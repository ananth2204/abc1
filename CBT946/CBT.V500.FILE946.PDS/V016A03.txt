 REXXPERT - expert system (continued)

This month we publish the concluding part of this article.

/**********************************************************************/
/*       R E X X P E R T - R E X X   E X P E R T   S Y S T E M        */
/*--------------------------------------------------------------------*/
/*                             E X E C                                */
/*        NAME:SKEXPERT ADREXX                                        */
/*        PURPOSE/DESCRIPTION: Inference Engine                       */
/*         This module is prefixed to a knowledge base by EXPCOMP.    */
/*                                                                    */
/**********************************************************************/
     DO UNTIL TRANSLATE(Answer) = 'QUIT' |,
              Main_Goal = 'QUIT'
    CALL Initialize
    User Satisfied = False
       IF Main_Goal ¬= 'QUIT'  THEN DO
         DO UNTIL User_Satisfied
       CALL Set_Up_For_Inference
       CALL Solve_Goal
       CALL Query_Conclusions
         END
       END
     END
 EXIT
/*--------------------------------------------------------------------*/
/* Initialize - set all variables to initial values                   */
/*--------------------------------------------------------------------*/
     Initialize:
   True = 1
   False = 0
   Drop ?.
   CALL Initialize_Attr_Lists
   CALL Initialize_Prompts
   Drop Main_Goal
   CALL Initialize_Main_Goal
       IF SYMBOL('Main_Goal') = 'LIT' THEN DO
     SAY 'Please enter main goal (quit to exit).'
     PARSE UPPER PULL Main_Goal
       END
   RETURN
     RETURN
/*--------------------------------------------------------------------*/
/* Set_Up_For_Inference  - reset environment for next run             */
/*--------------------------------------------------------------------*/
     Set_Up_For_Inference:
   Change_Active = False
   Drop False_Rule.
   Drop Fired_Rule.
   Goal_List = '?.'Main_Goal
   Reason_List = 'Main_Goal'
     RETURN
/*--------------------------------------------------------------------*/
/* Solve_Goal - attempt to solve goal using knowledge base            */
/*--------------------------------------------------------------------*/
     Solve_Goal:
       DO WHILE Goal_List ¬= ''
     PARSE VAR Goal_List Current_Goal ' Goal List
     PARSE VAR Reason_List Current_Reason ' Reason_List
     Rule_To_Fire = Rule_Available(Current_Goal)
         IF Rule_To_Fire  ¬= 0   THEN DO
       SIGNAL ON NOVALUE   /* Trap any unitialized variables */
       No_Value = False
       INTERPRET 'CALL' 'RULE_'Rule_To_Fire
       SIGNAL OFF NOVALUE
            IF (SYMBOL(Current_Goal) = 'VAR') THEN DO
          Fired_Rule.Rule_To_Fire = True
              END
           ELSE DO
             IF  No_Value = False THEN DO
           False_Rule.Rule_To_Fire = True
           Goal_List = Current_Goal'Goal_List
           Reason_List = Current_Reason'Reason_List
             END
           END
            END
         ELSE DO
       Why_Goal_List = Goal_List
       Why_Reason_List = Current_Reason'Reason_List
       Prompt = Build_Prompt(Current_Goal)
       Prior_Response_Changed = False
       Answer = Request_User_Input(Prompt)
           IF ¬Prior_Response_Changed THEN DO
         INTERPRET Current_Goal '= Answer'
         User_Entry.Current_Goal = True
             IF POS(Current_Goal,Attribute_List) = 0 THEN DO
           Attribute_List = Attribute_List'Current_Goal
             END
           END
         END
       END
     RETURN
/*--------------------------------------------------------------------*/
/* NOVALUE - This routine gets control when an unitialized variable   */
/*           is encountered                                           */
/*--------------------------------------------------------------------*/
     NOVALUE:
   No_Value = True
   I = 0
   Line = ''
       DO UNTIL FIND(Line,'THEN') ¬= 0
     Line = Line||SOURCELINE(SIGL + I)
     I = I + 1
       END
       DO WHILE Line ¬= ''
     PARSE UPPER VAR Line '?' Attribute Line
         IF SYMBOL('?'Attribute) = 'LIT' THEN DO
       Goal List = '?'Attribute'Current_Goal'Goal_List
       Reason List = Rule_To_Fire'Current_Reason'Reason_List
       Line = ''
         END
       END
     RETURN
/*--------------------------------------------------------------------*/
/* Rule_Available - Return next rule to be used to solve current goal */
/*--------------------------------------------------------------------*/
     Rule_Available:
   ARG Goal
   Rule_To_Fire = 0
       IF SYMBOL('Attr_Rule_List.Goal') = 'VAR' THEN DO
     List Of Rules = Attr_Rule_List.Goal
         DO WHILE List_Of_Rules ¬= ''
       PARSE VAR List_Of_Rules Rule_To_Use ' List_Of_Rules
           IF False_Rule.Rule_To_Use ¬= True THEN DO
         List_Of_Rules = ''
         Rule_To_Fire = Rule_To_Use
           END
         END
       END
     RETURN Rule_To_Fire
/*--------------------------------------------------------------------*/
 /* Build_Prompt - Build Prompt String for an attribute                */
/*--------------------------------------------------------------------*/
     Build_Prompt:
   ARG Prompt_Goal
       IF SYMBOL('Prompt.Prompt_Goal') = 'VAR'   THEN DO
     Prompt_String = Prompt.Prompt_Goal
          END
       ELSE DO
         IF LEFT(Prompt_Goal,1) = '?' THEN DO
       Prompt_Goal = SUBSTR(Prompt_Goal,3)
         END
     Prompt_String = 'Please enter value for ' Prompt_Goal '.'
       END
     RETURN Prompt_String
/*--------------------------------------------------------------------*/
/* Request_User_Input - requests user to enter input                  */
/*--------------------------------------------------------------------*/
     Request_User_Input:
   PARSE ARG User_Prompt
   Valid_Entry = False
       DO UNTIL Valid_Entry
     SAY User_Prompt
     PARSE PULL Response
     PARSE UPPER VAR  Response Command Rest_Of_Response
         SELECT
         WHEN Command = 'WHAT'   THEN CALL What
         WHEN Command = 'HOW'    THEN CALL How
         WHEN Command = 'WHY'    THEN CALL Why
         WHEN Command = 'RULE'   THEN CALL Rule
         WHEN Command = 'WHERE   THEN CALL Where
         WHEN Command = 'CHANGE' THEN CALL Change
         OTHERWISE
       Valid_Entry = True
         END
       END
     RETURN Response
/*--------------------------------------------------------------------*/
/* QUERY_CONCLUSIONS - ALLOW USER TO REVIEW CONCLUSIONS               */
/*--------------------------------------------------------------------*/
     Query_Conclusions:
       IF SYMBOL('?.'Main_Goal) = 'VAR' THEN DO
     SAY SUBSTR(Main_Goal,1,30) '=' VALUE('?.'Main_Goal)
          END
       ELSE DO
     SAY SUBSTR(Main_Goal,1,30) '=' 'Undefined'
       END
   Prior_Response_Changed = False
   Prompt =  'Press ENTER - ( or What,How,Rule nn,Change,Where,Quit)'
   Answer = Request_User_Input(Prompt)
       IF ¬Prior_Response_Changed  THEN DO
     User_Satisfied = True
       END
     RETURN
/*--------------------------------------------------------------------*/
/* Why - inform user why we are requesting this information           */
/*--------------------------------------------------------------------*/
     Why:
       IF Why_Goal_List = ''   THEN DO
     say 'Because this is the main goal.'
     Why_Goal_List = Goal List
     Why_Reason_List = Current_Reason'Reason_List
          END
       ELSE DO
     PARSE VAR Why_Goal_List Why_Goal ' Why_Goal_List
     PARSE VAR Why_Reason_List Why_Reason ' Why_Reason_List
     SAY 'I am trying to find a value for' SUBSTR(Why_Goal,3),
          'using rule' Why_reason '.'
     SAY
     Rule_To_Display = Why_Reason
     CALL Display_Rule
       END
     RETURN
/*--------------------------------------------------------------------*/
/* How - inform user how knowledge was found                          */
/*--------------------------------------------------------------------*/
     How:
   How_Goal  = '?.'Rest_Of_Response
   How_ Attr  = Rest_Of_Response
       IF SYMBOL(How_Goal) ¬= 'VAR' THEN DO
     SAY How_Attr 'is undefined.'
          END
       ELSE IF User_Entry.How_Goal = True THEN DO
     SAY How_Attr 'was user supplied.'
          END
       ELSE IF SYMBOL('Attr_Rule_List.How_Goal') = 'VAR' THEN DO
     Rule_Fired = 0
     List_Of_Rules = Attr_Rule_List.How_Goal
         DO WHILE List_Of_Rules ¬= ''
       PARSE VAR List_Of_Rules Rule_To_Use ' List_Of_Rules
           IF Fired_Rule.Rule_To_Use = True  THEN DO
         List_Of_Rules = ''
         Rule_Fired = Rule_To_Use
           END
         END
         IF Rule_Fired  = 0   THEN DO
       SAY How_Attr 'was established by Rule_'Rule_Fired '.'
            END
         ELSE DO
       SAY How_Attr 'was initialized in knowledge base.'
         END
          END
       ELSE DO
     SAY How_Attr 'was initialized in knowledge base.'
       END
     RETURN
/*--------------------------------------------------------------------*/
/* What - display what we currently know                              */
/*--------------------------------------------------------------------*/
     What:
   Work_List = Attribute_List
   What_Level = Rest_Of_Response
       DO WHILE Work_List  ¬= ''
     PARSE VAR Work_List Work_Attribute ' Work_List
         IF SYMBOL(Work_Attribute) = 'VAR' THEN DO
       SAY SUBSTR(Work_Attribute,3,30) '=' VALUE(Work_Attribute)
            END
         ELSE DO
           IF What_Level = 'ALL' THEN DO
         SAY SUBSTR(Work_Attribute,3,30) '=' 'Undefined'
           END
         END
       END
     RETURN
/*--------------------------------------------------------------------*/
/* Rule - Display the rules in the knowledge base                     */
/*--------------------------------------------------------------------*/
     Rule:
   Rule_To_Display = Rest_Of_Response
   CALL Display_Rule
     RETURN
/*--------------------------------------------------------------------*/
/* Change - allow user to change one of his prior responses           */
 /*--------------------------------------------------------------------*/
     Change:
       IF Change_Active THEN DO
     SAY 'Change already active for attribute ' Change_Attr
          END
       ELSE DO
     Change_Attr = Rest_Of_Response
     Change_Active = True
         DO Until Change_Attr = ''
       SAY 'Please enter attribute you would like to change.'
       SAY '      (press enter when no more to change)'
       PULL Change_Attr
       Change_Goal = '?.'Change_Attr
           IF Change_Attr ¬= ''  THEN DO
             IF User_Entry.Change_Goal = True THEN DO
           Prompt = Build_Prompt(Change_Goal)
           Answer = Request_User_Input(Prompt)
           INTERPRET Change_Goal '= Answer'
           Prior_Response_Changed = True
           Valid_Entry = True
                END
             ELSE DO
           SAY Change_Attr ' can not be changed - not user input.'
             END
           END
         END
         IF Prior_Response_Changed THEN DO
       CALL Drop_All_Infered_Values
       Goal_List = '?.'Main_Goal
       Reason_List = 'Main Goal'
         END
     Change_Active = False
       END
     RETURN
/*--------------------------------------------------------------------*/
/* Drop_All_Infered_Values - drop all infered values to allow  the    */
/*    user to modify prior responses.                                 */
/*--------------------------------------------------------------------*/
     Drop_All_Infered_Values:
   Work_List = Attribute_List
       DO WHILE Work_List ¬= ''
     PARSE UPPER VAR Work_List Work_Attribute ' Work_List
         IF  User_Entry.Work_Attribute ¬= True &,
             SYMBOL(Work_Attribute) = 'VAR' THEN DO
       Work_Attribute = SUBSTR(Work_Attribute,3)
       Drop ?.Work_Attribute
         END
       END
     RETURN
/*--------------------------------------------------------------------*/
/* Display_A_Rule - display a single rule                             */
/*--------------------------------------------------------------------*/
     Display_A_Rule:
   Last_Line = SOURCELINE()
   Scan_Line = SIGL
   Rule_Name = 'RULE 'Rule_To_Display':'
       DO WHILE (Scan_Line < Last_Line),
                 & (Rule_Name ¬= Sourceline(Scan_Line))
     Scan_Line = Scan_Line + 1
       END
       IF Scan_Line ¬< Last_Line THEN DO
     SAY 'Requested Rule can not be found.'
          END
       ELSE DO
         DO WHILE (Scan_Line < Last_Line),
                   & (Sourceline(Scan_Line) ¬= 'RETURN')
        Say Sourceline(Scan_Line)
       Scan_Line = Scan_Line + 1
         END
       END
     RETURN
/*--------------------------------------------------------------------*/
/* Where_Used - Called by Where to scan rules for attribute usage     */
/*--------------------------------------------------------------------*/
     Where_Used:
   Last_Line = SOURCELINE()
   Scan_Line = SIGL
   Rules_Where_Used = ''
   Where_Attr = Rest_Of_Response
       IF Where_Attr = '' THEN DO
     Say 'Please Enter attribute for where request - ENTER for current.'
     PULL Where_Attr
         IF Where_Attr = '' THEN DO
       Where_Attr = SUBSTR(Current_Goal,3)
         END
       END
       DO WHILE (Scan_Line < Last_Line),
        & (POS('Rules Follow',Sourceline(Scan_Line)) = 0)
     Scan_Line = Scan_Line + 1
       END
       DO WHILE (Scan_Line < Last_Line)
         IF LEFT(Sourceline(Scan Line),5) = 'RULE_' THEN DO
       Save_Name = LEFT(Sourceline(Scan_Line),10)
            END
         ELSE DO
       Temp_Line = TRANSLATE(Sourceline(Scan_Line))
           IF POS('?.'Where_Attr,Temp_Line) ¬= 0 THEN DO
         Rules_Where_Used = Rules_Where Used||Save_Name
           END
         END
     Scan_Line = Scan_Line + 1
       END
   SAY Where_Attr 'is referenced in'  Rules_Where_Used
     RETURN
/*--------------------------------------------------------------------*/
/* Where - tell user which rules use an attribute                     */
/*  Place this code next to rules to minimize search time for rules   */
/*--------------------------------------------------------------------*/
     Where:
   CALL Where_Used
     RETURN
/*--------------------------------------------------------------------*/
/* Display_Rule  - display user rules                                 */
/*  Place this code next to rules to minimize seaarch time for rules  */
/*--------------------------------------------------------------------*/
     Display_Rule:
   CALL Display_A_Rule
     RETURN
/* ************ USER RULES FOLLOW ************ */
ÝEditor's note:  If you would prefer a machine readable version of these REXX
programs the following options are available:

Format                   Shipping and handling charges

VMFPLC2 1600 bpi tape    $35.00 (USA only)

5.25 inch, MS-DOS        $10.00 (USA/CANADA)
(for upload to VM/SP)    $15.00 (Foreign)


Please send charges in US dollars by international money order or cheque drawn
on US bank to:

David Jeffery, 229 Olin Avenue, Girard, PA 16417, USA. ¨

For additional information on expert systems:

Harmon, P and King, D, Expert Systems: Artificial Intelligence in Business, John
Wiley and Sons Inc (1985)

Turner, M, Expert Systems: A Management Guide, PA Computers and
Telecommunications (1985).

David T Jeffery
Software Supervisor
Zurn Industries (USA)    ) David T Jeffery 1987




















































