 Project-data control

ÝEditor's note: This offers an interesting approach to what is a perennial
problem and one that has been featured before in VM Update.¨ The following EXECs
and programs represent our package of MDISK safety.  Within our environment,
projects tend to be developed by CMS user-id.  However, there is an extensive
requirement for raw data to be available to a large number of users.  The CMS
system does not support multi-write access;  however, we have found that we
encounter problems as users log on when another user is linked to them (even in
a read-only mode).  We have adopted the approach of defining their link as MW in
the directory and embedding a call to the following EXEC in their log-on
sequence (specifically by adding it to DTRIPF EXEC).


/* An EXEC to check for R/W access on a user's mini-disk */
trace o
arg addr .
if addr = '' then addr = '191'
 /* *************************************************************** */
 /*  hi takes hex value x'1de8'                                     */
 /*  lo takes hex value x'1d60'                                     */
 /* *************************************************************** */
hi =' y'
lo =' -'
makebuf
bufnum = rc
me = userid()
muser = ''
q link addr '(' stack
n = queued()
do i = 1 to n
  pull argstrng
  do forever
    posn = find(argstrng,me)
    if posn = 0 then leave
    argstrng = delword(argstrng,posn,3)
  end  /* end do forever */
  pos = find(argstrng,'R/W')
  pos2 = find(argstrng,'R/W,')
  pos = pos + pos2
  if pos ¬= 0 then muser = word(argstrng,pos - 2)
end  /* end do i */
dropbuf bufnum
if muser = '' then muser = 0
return muser
exit

To aid the user in establishing the links to Various ID's for the use of the
data we then have a number of EXECs coded.  The names are xlr, xlwr, and xlmwr
for the REXX functions.  Since the most complete of these is the request for
multiple write link, I will provide the code for this.  (The others are very
similiar, the difference being the type of link established).


 XLMWR

trace o
arg user,next,last,pass .
makebuf
bufnum = rc
getfmadr '090'
pull . fmode dskaddr curz .
dropbuf bufnum
dsk = '191'
if last ¬= '' then do
   dsk = next
    fmode = last
end
else if next ¬= '' then do
   if length(next) < 3 then
     fmode = next
   else dsk = next
end
signal on error
execio 0 'CP (STRING LINK ' user dsk dskaddr 'MW' pass
check = tstmwrtr(dskaddr)
if check ¬= 0 then do
  execio 0 cp '(' string det dskaddr
  fmode = check
  return fmode
end
set cmstype ht
ac dskaddr fmode
set cmstype rt
fmode = insert(dskaddr,fmode,0,4' ')
return fmode
/* **************************************************************** */
/*    ERROR ROUTINE -- IF ISSUED FROM COMMAND ENVIRONMENT DISPLAY   */
/*    ERROR MESSAGE AT TERMINAL.  OTHERWISE JUST PASS RETURN CODE   */
/* **************************************************************** */
error:
svcode = rc
errline = sourceline(sigl)
if find(errline,'LINK') ¬= 0 then
     step = 'link'
 else step = 'access'
parse upper source . howcalled .
if howcalled = 'COMMAND' then do
  say 'Error Return Code ' RC ' from' step ' command '
  say step ' Command not Performed'
end
/*  IF LINK SUCCESSFUL DETACH THE LINK                       */
if step = 'access' then
'EXECIO 0 cp (string detach ' dskaddr
exit svcode

Maurice Smyth
Senior Systems Programmer
Frank Russell Company (USA)   ) Frank Russell Company 1987























