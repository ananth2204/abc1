DCSS management

The organization of shared segments in memory can often
cause problems when one is trying to find space in main
storage for additional segments.  When given a list of segment
names, lengths, and corresponding start addresses in memory,
it is difficult to trace problems caused by overlaying conflicting
segments and contention between segments.

SEGMAP attempts to ease the problem by producing a
graphical representation of segments in main storage.

SEGMAP uses the file MEMORY SNTMAP, produced by the
IBM-supplied EXEC SNTMAP.  This is usually found on
MAINT's 191 mini-disk.  Therefore SEGMAP must link to
MAINT's 191 to access this file.  The routine is currently in
use at our installation (HPO 5 8904) running as a compiled
EXEC.

SEGMAP is executed by issuing the command:

    SEGMAP |fn ft fm|

If SEGMAP is executed without any parameters, all the
segments identified in MEMORY SNTMAP are included in the
output in the order in which they appear in the file.  By
supplying a filename as a parameter only a specified number of
segments will be displayed.  An example of such a file is
shown below.

* Group CMS
 DTRSEG
 D101
 D102
 D103
 D104
 D105
 D106
 D107
 D108
 D109
 D110
 ISPDCSS2
 CMAP
 EAGRTSEG
 DWXECF01
 EPSPROF1
 EPSPROF2
 DSMSEG31
 HELP
 EXECSEG
 NLSFRANC
 CMS
 CMST

 * Group SQL-VMSE
 SQLRMGR
 SQLISQL
 SQLSQLDS
 SQ2SQLDS
 SQLXRDS
 SQ2XRDS
 SQLS001
 SRTDCSS
 SDLDCSS
 XSDLDCSS
 SQ2ISQL


Executing SEGMAP generates a file named DCSS TABLE on
the user's A disk.  As this file exceeds the 132 column limit of
most printers, a second REXX EXEC called SEGPRINT is
used to print the file on two consecutive pages.  This EXEC
effectively 'cuts' the file in two, creating two temporary print
files which are subsequently printed as normal.

The command format is:

    SEGPRINT printer-name


SEGMAP EXEC

/*
     This program generates a chart for DCSS (shared segments)
     from the information contained in the file MEMORY SNTMAP.
     Segments on the table are grouped by family, (related segments)
     described in the DCSS group data file.
     The MEMORY SNTMAP is found of the 191 mdisk of MAINT and may
     be generated using the IBM supplied SNTMAP EXEC routine.
     A file, SEGMAP GROUP, is used to define grouping of segments
     on the graph and to select those segments which are to be
     displayed on the graph.
 */
 arg grpfile
 /* Variable initialisation */
 sntmap='MEMORY SNTMAP'       /* DCSS map source file */
 tabout='DCSS TABLE A'
 srcdisk='MAINT 191'              /* disk where DCSS map can be found */
 fm='Z'                /* filemode in which SRCDISK is to be accessed */
 maxseg=0;
 minseg=48;
 /* the DCSS map file is found on the minidisk MAINT 191              */
 'erase' tabout
 'link to' srcdisk 'as 555 rr'
 'access 555' fm
 orc=rc
 if orc¬=0 & orc¬=1 then
   do
     say 'SEGMAP001E Unable to access disk' srcdisk ',RC='||orc
     say 'SEGMAP002T Segmap aborted.'
     exit orc
   end
 /* get filemode of map file                                          */
 sntmap=sntmap||' '||fm
 'STATE' sntmap
 orc=rc
 if orc¬=0 then
   do
     say 'SEGMAP003E Unable to access file' sntmap 'on disk' srcdisk
     say 'SEGMAP002T SEGMAP aborted.'
     exit orc
   end
 call crtable sntmap           /* load DCSS data into table in memory */
 call crbars maxseg, minseg
 call wrtable tabout, grpfile
 'release' fm '(det'
 exit
 Crtable : procedure expose maptab. maxseg minseg
 arg fn
 /* load data in specified SNTMAP file into table                    */
   say 'SEGMAP004I Locating start of data in file' fn
   /* locate start of data */
   'EXECIO 1 DISKR' fn '(VAR ILINE'
   do while left(iline,1)¬='-'
     'EXECIO 1 DISKR' fn '(VAR ILINE'
   end
   /* load data, eof signaled by ----            */
   /* blank lines, and lines starting with * are ignored */
   say 'SEGMAP005I Loading data from file' fn
   maptab.0=0; i=0; j=0;
   'EXECIO 1 DISKR' fn '(VAR ILINE'
   do while left(iline,1)¬='-'
     parse upper var iline vol sname segloc nseg .
     parse var segloc sloc '-' eloc .
     if vol¬='' & left(vol,1)¬='*' then
       do
         if sloc>maxseg then maxseg=sloc
         if eloc>maxseg then maxseg=eloc
         maptab.0=(maptab.0)+1; i=i+1;
         maptab.i.1=sname; maptab.i.2=segloc;
         maptab.i.3=nseg;
       end /* if */
       'EXECIO 1 DISKR' fn '(VAR ILINE'
   end /* while */
   say 'SEGMAP006I' maptab.0 'lines read from file' fn
   'EXECIO 1 DISKR' fn '(FINIS'
 return
 /* end Crtable */
 CrBars : procedure expose maptab. maxseg minseg
 arg maxseg, minseg
 /*   For each segment, set up a line showing length of segment       */
   say 'SEGMAP007I Generating graphic bars between segments' minseg '-',
 maxseg
   do i=1 to (maptab.0)
     parse var maptab.i.2 sloc '-' .
     k=maxseg-minseg;
     maptab.i.4=copies('.',k);
     bar=copies('*',maptab.i.3)
     maptab.i.4=overlay(bar,maptab.i.4,(sloc-minseg)+1);
     n=0;
     do x=minseg to maxseg
       if (x/16)//1=0 then
         do
           if substr(maptab.i.4,(x-minseg)+1,1)¬='*' then
             maptab.i.4=overlay('+',maptab.i.4,(x-minseg)+1);
         end
     end x
   end i
 return
 /* end CrBars */
 Wrtable : procedure expose maptab. maxseg minseg
 arg tabout, grpfile
 /* output chart */
 scale.0=0
 do i=1 to 3
   scale.i=copies(' ',(maxseg-minseg));
 end i
 scale.4=copies('-',(maxseg-minseg));
 do i=minseg to maxseg
   if (i/16)//1=0 then scale.4=overlay(i%16,scale.4,(i-minseg)+1)
 end i
 n=1;
 do j=minseg to maxseg
   select
     when j<10 then scale.3=overlay(j,scale.3,n);
     when j>9 & j<100 then
       do
         scale.3=overlay(right(j,1),scale.3,n);
         scale.2=overlay(left(j,1),scale.2,n);
       end
     when j>99 & j<1000 then
       do
         scale.1=overlay(left(j,1),scale.1,n);
         scale.2=overlay(substr(j,2,1),scale.2,n);
         scale.3=overlay(right(j,1),scale.3,n);
       end
     otherwise
       do
         say 'SEGMAP008E Page address found above 999.'
         say 'SEGMAP002T SEGMAP aborted.'
         exit 999
       end
   end /* select */
   n=n+1;
 end j
 say 'SEGMAP009I Writing segment map data to file' tabout
 orc=999;
 if grpfile¬='' then
   do
     'STATE' grpfile
     orc=rc;
   end
 if orc¬=0 then
   do
     if grpfile¬='' then
       say 'SEGMAP010E Unable to find group file' grpfile ,
           ', STATE rc='orc
     say 'SEGMAP011I Using default grouping from SNTMAP'
     do i=1 to 3
       'EXECIO 1 DISKW' tabout '(FINIS STRING          '||scale.i
     end i
     do i=1 to (maptab.0)
       'EXECIO 1 DISKW' tabout '(STRING' left(maptab.i.1,8) maptab.i.4
     end i
     'EXECIO 1 DISKW' tabout '(FINIS STRING          '||scale.4
     'EXECIO 1 DISKW' tabout '(STRING DCSS map generated by' userid(),
       'at' date() time()
     'EXECIO 1 DISKW' tabout '(FINIS'
   end
   else
     do
       say 'SEGMAP012I Using grouping from' grpfile
       do i=1 to 3
         'EXECIO 1 DISKW' tabout '(FINIS STRING          '||scale.i
       end i
       'EXECIO 1 DISKR' grpfile '(VAR SEGNAME'
       do while rc=0
         if segname¬='' & left(segname,1)¬='*' then
           do
             do i=1 to (maptab.0)
               if maptab.i.1=segname then
        'EXECIO 1 DISKW' tabout '(FINIS STRING',
                                             left(segname,8) maptab.i.4
             end
           end
         'EXECIO 1 DISKR' grpfile '(VAR SEGNAME'
       end
       'EXECIO 1 DISKW' tabout '(FINIS STRING          '||scale.4
       'EXECIO 1 DISKW' tabout '(STRING DCSS map generated by',
          userid() 'at' date() time()
       'EXECIO 1 DISKW' tabout '(FINIS'
     end
 return


SEGPRINT EXEC

/*
   EXEC to print output from SEGMAP program on two pages landscape,
   the file DCSS TABLE, effectively cutting the file is two.
   Two temporary work files are created during SEGPRINT, SEGMAP
   $PRINT1$ and $PRINT2$, these may be erased after SEGPRINT has
   executed. If these files are found when SEGPRINT is executed,
   they will be erased.
   Calling sequence:
        SEGPRINT printer-name
 */
 arg prtname .
   tabfile='DCSS TABLE *'
   'STATE' tabfile
   orc=rc;
   if orc¬=0 then
     do
       say 'SEGPRI001E Unable to find file' tabfile', STATE RC='orc
       say 'SEGPRI002T SEGPRINT Aborted.'
       exit orc
     end
   say 'SEGPRI003I Erasing temporary print files.'
   'erase segmap $print1$ *'
   'erase segmap $print2$ *'
   say 'SEGPRI004I Creating temporary print files.'
   'EXECIO 1 DISKR' tabfile '(VAR ILINE'
   do while rc=0
     'EXECIO 1 DISKW SEGMAP $PRINT1$ A (FINIS STRING' left(iline,132)
     'EXECIO 1 DISKW SEGMAP $PRINT2$ A (FINIS STRING' substr(iline,133)
     'EXECIO 1 DISKR' tabfile '(VAR ILINE'
   end
   'EXECIO 1 DISKR' tabfile '(FINIS'
   say 'SEGPRI005I Printing files.'
 /*
 * The following two lines issue print requests for the two temporary
 * print files, on the IBM 3825 laser printer
 */
   'exec impr -p' prtname 'segmap $print1$ (L1'
   'exec impr -p' prtname 'segmap $print2$ (L1'
   say 'SEGPRI006I Print requests sent.'
 exit 0


Robert Burns
System Engineer
Alcatel (France)


