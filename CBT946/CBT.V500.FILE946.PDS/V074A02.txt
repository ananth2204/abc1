Displaying activity of all users

This tool does not claim to be as powerful as more
sophisticated products, but it will show you, at a glance,
activity and resource occupancy of all users logged on (CPU,
PAGING, I/O).

The results are displayed on a full screen using the facilities of
XEDIT, with the PF keys conveniently set to sort the results
according to the different arguments.

This will enable you to see immediately the reason for the poor
(or good) performance of your system.

The procedure:

o      Performs a QUERY NAMES command to identify all the
      logged on users

o      Performs INDICATE USER user-id on each of them

o      SLEEPs a given number of seconds

o      Performs INDICATE USER user-id again

o      Computes and displays the results.

INDU has been written to work under VM/XA SP 2.1, but is
well commented so that it could easily be modified to work
under other releases: base yourself on the results of the CP
command INDICATE USER.

An example of the output from INDU is shown in Figure 1.

To see quickly the data for one particular virtual machine,
concatenate the INDU command with the LINEND character
and XEDIT's LOCATE subcommand, eg:

      INDU$/VMUSER01


INDU EXEC

/*  Procedure  : INDU EXEC                                            *
*   Measurement  of activity of all users                             *
*   External references : INDU     XEDIT                              *
*                         INDUPF   XEDIT                             */
ADDRESS COMMAND
/* name of the file to be XEDITed : IUyymmdd Hhhmmss */
FN = DATE(ORDERED)
FN = 'IU' || SUBSTR(FN,1,2) || SUBSTR(FN,4,2) || SUBSTR(FN,7,2)
FT = TIME()
FT = 'H' || SUBSTR(FT,1,2) || SUBSTR(FT,4,2) || SUBSTR(FT,7,2)
'XEDIT' FN FT '(PROFILE INDU'
/* For testing purpose : 'XEDIT' FN FT '(NOCLEAR PROFILE INDU' */


INDU XEDIT

/*  Procedure  INDU XEDIT                                             *
*   Called by           : INDU     EXEC                               *
*   External reference  : INDUPF   XEDIT                              *
*   Class E required to issue the CP command INDICATE USER           */
/* trace off ; 'DROPBUF' ; 'MAKEBUF' */
trace err
NSEC = 20 ; /* Time to SLEEP between the two passes */
/*   10 seconds is the minimum time to sleep,       */
/*   any less and the results would be meaningless  */
ADDRESS XEDIT 'COMMAND SET CASE M I'
/* Making up the list of LOGGed machines,           */
/* with an extra entry for the SYSTEM               */
/* in order to do   INDICATE USER SYSTEM, too       */
'EXECIO * CP ( STRING QUERY NAMES'
i = 1
user.1 = 'SYSTEM'
  do j=1 to queued()
  pull lig
  if substr(lig,1,10) = 'VSM     - ' then iterate
  /* Replacement of hyphens and commas with blanks  */
  tlig=translate(lig,'  ','-,')
  parse value tlig with u t tlig
    do while u ¬= ''
    i = i+1
    user.i = u
    parse value tlig with u t tlig
    end /* do while */
  end /* do j=1 to queued() */
nu = i /* Number of LOGGed machines */
TOTRES = 0 ; TOTWS = 0 ; TOTLOCK = 0 ;TOTRESVD = 0 ;TOTNPREF = 0 ;TOTPREF  = 0 ;
TOTRE = 0 ; TOTWR  = 0 ; TOTPA = 0 ; TOTVT = 0 ; TOTTT = 0 ; TOTES = 0 ;
/* This proc works in two passes, between which it performs a CP SLEEP*/
/* Remark : if a user logs off between the first and the second pass, */
/*          it will not appear in the display                         */
/* First pass */
say 'First pass'
  do i = 1 to nu
  /* Case of the biprocessor virtual machines : */
  /* - for READS, WRITES and RES, both processors indicate the same*/
  /*   figures, so one can keep the figures for any of them.       */
  /*   Here, one keeps the figures for each processor, but the     */
  /*   figures from the second one will replace the figures from   */
  /*   the first one.                                              */
  /* - for VTIME, TTIME, IO, each processor uses CPU and makes IOs */
  /*   so figures from both of them must be added, and totals      */
  /*   zeroed beforehand.                                          */
  /* - for WS (Working Set), the first processor shows the correct */
  /*   value, and the second one shows 0. The correct value is     */
  /*   obtained by adding the two values ...                       */
  TVT.i = 0
  TTT.i = 0
  TIO.i = 0
  'EXECIO * CP (STRING INDICATE USER' user.i
    select /* rc */
    when (rc = 0) then
      do
      nl = queued()
        do l = 1 to nl
        pull ligne
          select
          when (substr(ligne,1,5)='PAGES') then
            do ;  /* nothing to be done during the first pass */
            end
          when (substr(ligne,1,5)='NPREF') then
            do
            READS.i =  SUBSTR(ligne,32,6)
            WRITES.i = SUBSTR(ligne,46,6)
            PAGES.i =  READS.i + WRITES.i
            end
          when (substr(ligne,1,3)='CPU') then
            do
            VTIME   = 60 * substr(ligne,27,3) + substr(ligne,31,2)
            TTIME   = 60 * substr(ligne,40,3) + substr(ligne,44,2)
            IO   = substr(ligne,50,6)
            TVT.i = TVT.i + VTIME
            TTT.i = TTT.i + TTIME
            TIO.i = TIO.i + IO
            end
          otherwise
          end ; /* select */
        end ; /* do l=1 to nl */
      end ; /* when (rc = 0) */
    when (rc = 1003) then
      do
say 'You are not authorized to issue the CP command ',
                                                 'INDICATE USER userid'
      'DROPBUF'
      ADDRESS XEDIT 'QQUIT'
      exit
      end
    when (rc = 1045) then
      do
      say user.i 'logged off before the first pass'
      'DROPBUF'
      end
    otherwise do while QUEUED() > 0 ; pull REP ; say REP ; end
    end ; /* select rc */
  end ; /* do i=1 to nu */
trace commands ; 'CP SLEEP' NSEC 'SEC' ; trace err
ADDRESS XEDIT 'EXTRACT /FNAME/FTYPE'
lins = '      Date:' SUBSTR(FNAME.1,3,2) || '/' || SUBSTR(FNAME.1,5,2),
                                          || '/' || SUBSTR(FNAME.1,7,2)
lins = lins ' Time:' SUBSTR(FTYPE.1,2,2) || ':' || SUBSTR(FTYPE.1,4,2),
                                          || ':' || SUBSTR(FTYPE.1,6,2)
lins = lins '  Duration:' || right(NSEC,3) 'SEC'
ADDRESS XEDIT 'INPUT' lins
/* Second pass */
say 'Second pass'
  do i = 1 to nu
  TVT2 = 0
  TTT2 = 0
  TIO2 = 0
  CPU  = 0
  TWS  = 0
  'EXECIO * CP (STRING INDICATE USER' user.i
    select /* rc */
    when (rc = 0) then
      do
      nl = queued()
        do l = 1 to nl
        pull ligne
          select
          when (substr(ligne,1,5)='PAGES') then
            do
            RES   = SUBSTR(ligne,12,6) + 0
            WS   = SUBSTR(ligne,22,6)
            TWS  = TWS + WS
            LOCK   = SUBSTR(ligne,34,6)
            LOCK  = LOCK  + 0 ; /* convert to numeric */
            RESVD   = SUBSTR(ligne,47,6)
            RESVD = RESVD + 0
            end
          when (substr(ligne,1,5)='NPREF') then
            do
            NPREF   =  SUBSTR(ligne,7,6) + 0
            PREF    =  SUBSTR(ligne,19,6) + 0
            READS2  =  SUBSTR(ligne,32,6)
            WRITES2 =  SUBSTR(ligne,46,6)
            PAGES2  =  READS2 + WRITES2
            end
          when (substr(ligne,1,3)='CPU') then
            do
            CPU   = CPU   + 1
            VTIME   = 60 * substr(ligne,27,3) + substr(ligne,31,2)
            TTIME   = 60 * substr(ligne,40,3) + substr(ligne,44,2)
            IO   = substr(ligne,50,6)
            TVT2 = TVT2 + VTIME
            TTT2 = TTT2 + TTIME
            TIO2 = TIO2 + IO
            end
          otherwise
          end ; /* select */
        end ; /* do l=1 to nl */
      /* Possible improvement of this EXEC :                         */
      /* 'EXECIO * CP (STRING QUERY SHARE' user.i                    */
      /* if rc ¬= 0 : replace the result with blanks                 */
      /* (This happens when  user.i = 'SYSTEM'                       */
      /*                 or  user.i   logged off                     */
      /*                 or  user.i  is the name of a GRAF or an LU) */
      /* Since the display has only 80 columns, to insert the result */
      /* it would be necessary to cut out one of the other fields... */
/*
 The line to INPUT is shaped like this :
USERID NCPU   WS  LOCK RESVD NPREF  PREF  READ WRITE   R+W VTIME TTIME    IO
     8   2     6     6     6     6     6     6     6     6     6     6     6
 */
      if CPU = 1 then CPU = '  '
      /* To make the display more legible, when the          */
      /* "Number of CPUs" is ONE, it is replaced with blanks */
      RE = READS2 - READS.i
      WR = WRITES2 - WRITES.i
      PA = PAGES2 - PAGES.i
      VT = TVT2   - TVT.i
      TT = TTT2   - TTT.i
      ES = TIO2   - TIO.i
/* With the INDicate USER command, counts are displayed with 6 digits.*/
/* In the rare case when counts wrap from 999999 to 000000 between the*/
/* first pass and the second pass, the results will be negative.      */
/* This is corrected by the following lines.                          */
      if RE < 0 then do; RE = RE + 1000000; PA = PA + 1000000; end
      if WR < 0 then do; WR = WR + 1000000; PA = PA + 1000000; end
      do while ES < 0 ; ES = ES + 1000000 ; end
lins = left(USER.i,8) || right(CPU,2) || right(RES,6) || right(TWS,6)
lins = lins || right(LOCK,6) || right(RESVD,6) || right(NPREF,6)
lins = lins || right(PREF,6) || right(RE,6) || right(WR,6)
lins = lins || right(PA,6) || right(VT,4) || right(TT,4) || right(ES,6)
      ADDRESS XEDIT 'INPUT' lins
      /* UPDATE of the totals */
      TOTRES = TOTRES + RES
      TOTWS  = TOTWS  + TWS
      TOTLOCK= TOTLOCK+ LOCK
      TOTRESVD= TOTRESVD+ RESVD
      TOTNPREF= TOTNPREF+ NPREF
      TOTPREF = TOTPREF + PREF
      TOTRE   = TOTRE   + RE
      TOTWR   = TOTWR   + WR
      TOTPA   = TOTPA   + PA
      TOTVT   = TOTVT   + VT
      TOTTT   = TOTTT   + TT
      TOTES   = TOTES   + ES
      end ; /* rc = 0 */
    when (rc = 1045) then
      do
      say user.i 'logged off before the second pass'
      'DROPBUF '
      end
    otherwise do while QUEUED() > 0 ; pull REP ; say REP ; end
    end ; /* select rc */
  end ; /* do i=1 to nu */
lins = ' Total : ' right(TOTRES,6) || right(TOTWS,6) || ,
                                  right(TOTLOCK,6) || right(TOTRESVD,6)
lins = lins || right(TOTNPREF,6) || right(TOTPREF,6) || ,
                                       right(TOTRE,6) || right(TOTWR,6)
lins = lins || right(TOTPA,6) || right(TOTVT,4) || ,
                                       right(TOTTT,4) || right(TOTES,6)
ADDRESS XEDIT 'INPUT' lins
ADDRESS XEDIT 'INDUPF'
exit

Results of the CP command INDICATE USER user-id (under

VM/XA SP 2.1) are shown in Figures 2 and 3.


INDUPF XEDIT

/*  Procedure  INDUPF  XEDIT                                          *
*   Setting of the screen and PK keys to display the results of       *
*   the Procedure INDU                                                *
*   Called by           : INDU     EXEC                               *
*                         INDU     XEDIT                              *
*   This macro can also be used to XEDIT results of INDU previously   *
*   saved                                                            */
ADDRESS XEDIT ;
'EXTRACT /SIZE'
S = SIZE.1 - 2 ;
'SET CASE M I' ;
'SET CMDLINE TOP' ;
'SET SCALE OFF' ;
'SET PREFIX OFF' ;
'SET WRAP ON' ;
'SET PF03 QQUIT' ;
'SET PF15 QQUIT' ;
'SET LINEND OFF' ;
'SET PF09 :2' ;
'SET PF10 :*$BACKWARD$-1' ;
'SET PF12 :2 $SORT' S 'A 1 8$:2'                    /* Sort on USERID*/
'SET PF13 :2 $SORT' S 'A 1 8$SORT' S 'D 11 16$:2' ; /* Sort on RESID */
'SET PF14 :2 $SORT' S 'A 1 8$SORT' S 'D 17 22$:2' ; /* Sort on W.SET */
'SET PF15 :2 $SORT' S 'A 1 8$SORT' S 'D 23 28$:2' ; /* Sort on  LOCK */
'SET PF16 :2 $SORT' S 'A 1 8$SORT' S 'D 29 34$:2' ; /* Sort on RESVD */
'SET PF17 :2 $SORT' S 'A 1 8$SORT' S 'D 35 40$:2' ; /* Sort on NPREF */
'SET PF18 :2 $SORT' S 'A 1 8$SORT' S 'D 41 46$:2' ; /* Sort on  PREF */
'SET PF19 :2 $SORT' S 'A 1 8$SORT' S 'D 47 52$:2' ; /* Sort on  READ */
'SET PF20 :2 $SORT' S 'A 1 8$SORT' S 'D 53 58$:2' ; /* Sort on WRITE */
'SET PF21 :2 $SORT' S 'A 1 8$SORT' S 'D 59 64$:2' ; /* Sort on   R+W */
'SET PF22 :2 $SORT' S 'A 1 8$SORT' S 'D 65 68$:2' ; /* Sort on VTIME */
'SET PF23 :2 $SORT' S 'A 1 8$SORT' S 'D 69 72$:2' ; /* Sort on TTIME */
'SET PF24 :2 $SORT' S 'A 1 8$SORT' S 'D 73 78$:2' ; /* Sort on    IO */
'SET LINEND ON $' ;
'SET CURLINE ON 3' ;
'SET COLOR CURLINE GREEN N' ;
'SET VERIFY 1 *' ;
'SET RESERVED  3 YELLOW H USER  NCPU RESID W.SET  LOCK RESVD NPREF  ',
                                  'PREF READS WRITE   R+W VtimTtim   IO'
'SET RESERVED -3 YELLOW H USER  NCPU RESID W.SET  LOCK RESVD NPREF  ',
                                  'PREF READS WRITE   R+W VtimTtim   IO'
'SET RESERVED -2 PINK   H Sort:PF12   PF13  PF14  PF15  PF16  PF17  ',
                                  'PF18  PF19  PF20  PF21 PF22PF23 PF24'
'SET RESERVED -1 PINK   H  PF3:END   PF7:Backward   PF8:Forward   ',
                                                    'PF9:TOP   PF10:BOT'
':1' ;

Jean-Marc Foisy
Systems Programmer
SITB Axime (France)

