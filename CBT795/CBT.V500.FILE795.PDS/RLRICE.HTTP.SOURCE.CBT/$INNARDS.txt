For those who like to know more about the "innards" of things...

Inside the main server space there are several subtasks.
MAIN
PRINTER
CONSOLE
HTTPLOG
HTTPWEB
HTTPTCP
HTTPLOCL
HTTPURL
Optionally one or more HTTPSERV


When the main space starts up it
  .  Obtains work area
  .  LOADs the common data module HTTPCOMM
     R11 points to HTTPCOMM at all times
  .  LOADs and links to HTTPINIT
  .  HTTPINIT
     . Obtains storage for the trace table
     . initializes the trace table 1STX, LAST, and CURR
     . Verify required DD's are present
     . Calls the parameter reader (HTTPPARM)
     . ATTACHes the console subtask (HTTPCONS)
     . ATTACHes the logging subtask (HTTPLOG)
     . ATTACHes the URL managing subtask (HTTPURL)
     . ATTACHes the WEB listener subtask HTTPWEB
     . ATTACHes the server space contact subtask (HTTPTCP)

Now the main space WAITs for work

Before the HTTP server can do any real work, server spaces
are needed.



Short explantion of server space start up:
When a server space starts up, it contacts the main space.
In the main space, a new subtask will be created to 'manage'
the communcation back to the server space.  There is a subtask
in the main server space for every server space.  The server
space will then 'register' the URLs it will process.
Once the server has 'registered' all the URL(s), it 'asks'
the main space for URLs to process.



Longer explanation of server space start up:
The application program can do any initialization required.
It then calls HTTPSUB to CONNECT to the main space.
The main space will ATTACH a new HTTPSERV subtask for this server.
The application program calls HTTPSUB to DEFINE a URL.
The application can DEFINE as many URLs as it needs/wants.
Once the application has defined the URLs, it calls HTTPSUB to get
a URL to process.  At this point the application will be in a WAIT
state.


Even longer explation of server space start up:
Prior to starting up a server space, the main space has be running.
The main space will have ATTACHed an HTTPTCP subtask that will have
created a SOCKET, OPENed the SOCKET, BOUND the SOCKET to the
SERVERPORT, issued a LISTEN, and have an ACCEPT pending.  When the
server space starts up, it will also (using the HTTPSUB) create a
SOCKET, OPEN the SOCKET, BIND the SOCKET (it will use zero for the
PORT number so TCP/IP will select an unused PORT), and issue a
CONNECT referencing the SERVERPORT PORT number.  The CONNECT causes
TCP/IP to POST the ECB the HTTPSUB task's ACCEPT is WAITing on.
The HTTPSUB subtask will build a new SERVBLOK and POST an ECB the
main task is WAITing on.  The main task will ATTACH a new HTTPSERV
subtask.  HTTPTCP will transfer the ownership of the connection to
the new HTTPSERV subtask... HTTPSERV issues a GIVESOCKET and the
HTTPSERV subtask issues a TAKESOCKET.  The HTTPTCP subtask is
now "out of the picture" for this server.  HTTPTCP will issue
another ACCEPT and WAIT again.  Meanwhile (back at the ranch),
the HTTPSERV subtask will issue a READ.  The server space will
issue a SEND to define a URL.  The HTTPSERV subtask will queue
work to the HTTPURL subtask to have the new URL added to the
URL data space.  HTTPURL will signal the URL has been added to
the data space and HTTPSERV will issue a SEND to let the
server space know the URL has been accepted.  The server space
can repeat the process to define as many URLS as you want.
Once the server has defined all its URLs, it will SEND a request
to "get a URL".  Now the main space and server space are in
WAIT states.


You can start up as many server spaces as needed.


What happens when a web user (using Internet Explorer, or other
browser) sends a URL to the server?

At start up, the main space will have ATTACHed the HTTPWEB subtask.
The HTTPWEB subtask creates a SOCKET, OPENs the SOCKET, BINDs to
the WEBPORT PORT, issues a LISTEN, and has an ACCEPT pending.
When the user's browser sends the URL, TCP/IP POSTs the ECB HTTPWEB
is WAITing on.  HTTPWEB issues a READ to get the URL.  HTTPWEB
builds a WEBURL block, transates the data into EBCDIC, and logs it.
HTTPWEB then queues the URL to the HTTPURL subtask to "look up"
which server space will process the URL.  HTTPWEB then issues a
GIVESOCKET to give ownership of the connection not to the HTTPSERV
subtask, but the the server space... you may have to think about
that one for a minute... I do every time I look at the source code.
HTTPWEB will then add the WEBURL block to the work queue for the
HTTPSERV subtask that corresponds the server space that will process
the URL.  The HTTPWEB subtask will issue another ACCEPT and WAIT
for another URL from a browser.  The HTTPSERV subtask SENDs the
URL and some SOCKET info to the server space.  The server space
will have had a READ pending (remember that from what happens when
a server space starts up"?).  The server space will then issue a
TAKESOCKET.  The server space now has the URL and ownership of
connection.  The server space can now send data back (directly
from the server space to the user...  the main space is no longer
involved) to the user's browser.  Once the server has completed
sending the reponse, it CLOSEs the SOCKET and sends another
"get URL" to the main space to ask for more work.
