I'm an MVSer by background.

There is a lot of information on MVS|OS 390|z/OS systems in 'legacy'
applications.

How would you like to make some of this data available via the web
without putting the data into UNIX style file systems?

There is no hard-and-fast reason why a URL must be a "server/pathname".
A URL is basically data used to access other data.  A URL could be
"server/DDname/Member".  Or possibly "server/DDname/key" where "key"
is the key for a record in a VSAM KSDS file.  The URL could be
"VIEWNAME/search_arg" for a DB2 search.

A few obsticles for accessing data on mainframes from the web are -
  Most data on the web is ASCII.  Mainframe text is usually EBCDIC.

  Most web servers run on a Unix system or on a PC.

  MVS|OS 390|z/OS does have the "open system" environment with HFS
  filesystems but yuck.


The purpose of this utility is to make data on mainframe systems
accessible via the web without having to move the data into a Unix
system, PC, or HFSs.  The utility does use TCP/IP and therefore some
UNIX services, but the end application is insulated from this.



The utility is not intended to be a full function web server such
as the APACHE server.  It is intended only to make simple
applications (and therefore data) available from a mainframe
without the need for learning about ASCII, TCP/IP, hierarchical
file systems, etc.






The utility consists of two parts.  One is the main address space.
The second is a subroutine that allows for the development of user
applications.  The user application would run in a second (as many
as you want/need) address space.  It has been a while since working
with COBOL, but I think the subroutine is written with the same
linkage as COBOL and most other high level languages.





Let's assume you have an application developed and ready to go..

First you would need to configure your main address space and then
start it up as an JOB or more likely as an STC.  The main address
space initializes the TCP/IP environment and connects to TCP/IP.
The main space BINDs to two ports given on the WEBPORT and SERVERPORT
initialization statements.

Next you would bring up your application server(s).  You can have
multiple applications each running in their own address spaces either
as JOBs or STCs.  When an application starts up, it uses the
subroutine to initialize its own TCP/IP environment and connect to
the main server space.  When a web client connects to the HTTP server,
it is connecting to the HTTPWEB subtask in the main server.  Using
TCP/IP GIVESOCKET/TAKESOCKET, the server main transfers ownership
of the connection to the secondary space.  The secondary space now
processes the URL and sends the requested info back to the web user.

