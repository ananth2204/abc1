Assume I want to develop a new application.  How do I use this thing?

1) Include the SUBPARM data area in your program's work area.

2) Initialize HTTP_WORKAREA field to binary zero.

3) In your application program's initalization steps,
    Call HTTPSUB with function $HTTP_INIT
    Call HTTPSUB with function $HTTP_CONNECT
      - you will need the PORT number the HTTPTCP subtask
        in the main server space is LISTENING on.
        This is the number used on the SERVERPORT initialization
        parameter in the main server's start up control statements

4) Define your URLs
   Call HTTPSUB with function $HTTP_DEFINE_PRFX or $HTTP_DEFINE_SPEC
   Set HTTP_DATA to the address of the URL
   Set HTTP_LENGTH to the length of the URL

5) Request a URL to process
   Call HTTPSUB with function $HTTP_GET_URL
   Set HTTP_DATA to the area the URL will be returned into

   Your program will WAIT at this point until a URL is received.
   When a URL is received, HTTPSUB will return the URL, the URL's
   length

   If the main space is shut-down, the subroutine will set
   HTTP_RETURN_CODE to $HTTP_MAIN_SHUTDOWN


6) Test HTTP_RETURN_CODE
   If the main server was shutdown, go to step 7
   Otherwise, Examine the URL and send the response
   Call HTTPSUB with function $HTTP_WRITE or $HTTP_WRITE_RAW to
      send data back to the user's browser.  A bit of warning here...
      if you do a $HTTP_WRITE, the data will be translated to ASCII
      before sending it to the web user.  If you send headings or
      other constants type data, copy it to a work area first!
      Otherwise on the first $HTTP_WRITE it will get translated
      to ASCII and will probably cause strange (and hard to find)
      problems on subsequent $HTTP_WRITEs.
   Either go back to step 5 for another URL or continue to step 7.


7) Close the socket
   Call HTTPSUB with function $HTTP_CLOSE
   Call HTTPSUB with function $HTTP_CLEAN_UP
