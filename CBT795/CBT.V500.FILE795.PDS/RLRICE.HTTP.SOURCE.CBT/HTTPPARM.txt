*---------------------------------------------------------------------*
*                                                                     *
*  Module name: HTTPPARM                                              *
*                                                                     *
*   This module interprets the control statements entered via SYSIN.  *
*   Since the control statements are only read once, this module is   *
*   linked separately.  HTTPINIT issues a LOAD, then links to this,   *
*   and then DELETEs it.  This frees up the storage that would        *
*   otherwise be wasted by having code that is only used at start-up. *
*                                                                     *
*   All control statements start in column 1.                         *
*                                                                     *
*     ABEND           Requests and ABEND at exit if errors are        *
*                     detected during initialization.                 *
*     WEBPORT=        TCP/IP port number to be used for web users     *
*     SERVERPORT=     TCP/IP port number to be used for communication *
*                     with server spaces.                             *
*     SNAPCLASS=      SYSOUT class for SNAP dumps                     *
*     TRACE=                                                          *
*                                                                     *
* ------------------------------------------------------------------- *
HTTPPARM CSECT
HTTPPARM AMODE 31
HTTPPARM RMODE ANY
         USING HTTPPARM,R12                   DEFINE BASE
         USING HTTPCOMM,R11                   DEFINE BASE
         STM   R14,R12,12(R13)                SAVE CALLER'S REGISTERS
         LR    R12,R15                        SET BASE
         B     PARM0000
         DC    CL8'HTTPPARM'
         DC    CL8'&SYSDATE'
         DC    CL6'&SYSTIME'
PARM0000 DS    0H
         GETMAIN RU,                          GETMAIN WORK AREA        +
               LV=WORKL,                                               +
               LOC=BELOW                      .. DCB MUST BE BELOW
         ST    R1,8(R13)                      CHAIN TO PREVIOUS AREA
         ST    R13,4(R1)                      CHAIN PREVIOUS TO OURS
         LR    R13,R1                         SET SAVE AREA ADDRESS
         USING WORKAREA,R13
         MVC   PRT_EYE,PRT_ID                 IDENTIFY CONTROL BLOCK
         MVC   PRT_CC(PRT_LRECL),COMM_BLANKS
         MVC   WORK_OCPL(OPENL),OPENI         COPY LIST FORM
         MVC   WORK_DCB(DCBL),DCBI            INITIAILZE
         OPEN  (WORK_DCB,INPUT),                                       +
               MODE=31,                                                +
               MF=(E,WORK_OCPL)
PARM0010 DS    0H
         ITRACE ID=READCARD
         GET   WORK_DCB,WORK_STMT             READ A CONTROL STATEMENT
         MVC   PRT_MESSAGE_ID(MSG01L),MSG01
         MVC   PRT_MESSAGE_ID+(MSG01D-MSG01)(L'MSG01D),WORK_STMT
         MVI   PRT_COMMAND,$PRT_ASIS          PRINT 'AS IS'
         BAL   R10,PRT0000                    PRINT
         CLI   WORK_STMT,C'*'                 COMMENT?
         BE    PARM0010                       YES
         CLC   ABEND_STMT,WORK_STMT           ABEND STATEMENT?
         BE    ABND0000                       YES
         CLC   WEB_PORT_STMT,WORK_STMT        WEB PORT STATEMENT?
         BE    WEB0000                        YES
         CLC   SERVER_PORT_STMT,WORK_STMT     SERVER PORT STATEMENT?
         BE    SERV0000                       YES
         CLC   SNPCSTMT,WORK_STMT             SNAP CLASS STATEMENT?
         BE    SNPC0000                       YES
         CLC   TRACESTMT,WORK_STMT            TRACE STATEMENT
         BE    TRACE100                       YES
         ITRACE ID=INVALID                    INVALID STATEMENT
         OI    COMM_FLAGS,$COMM_ABORT
         MVC   PRT_MESSAGE_ID(MSG02L),MSG02
         BAL   R10,PRT0000                    PRINT ERROR MESSAGE
         B     PARM0010                       READ NEXT STATEMENT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
PARM0100 DS    0H
         ITRACE ID=EOF
         MVC   WORK_OCPL(CLOSEL),CLOSEI
         CLOSE WORK_DCB,                      CLOSE THE DCB            +
               MODE=31,                                                +
               MF=(E,WORK_OCPL)
         TM    COMM_FLAGS,$COMM_ABORT         ABORT FLAG SET?
         BO    EXIT0000                       YES.. EXIT NOW
         OC    COMM_WEB_PORT,COMM_WEB_PORT    WEB PORT GIVEN?
         BNZ   PARM0110                       YES
         ITRACE ID=NO_WPORT
         MVC   PRT_MESSAGE_ID(MSG10L),MSG10
         BAL   R10,PRT0000                    PRINT MESSAGE
         OI    COMM_FLAGS,$COMM_ABORT         SET ABORT FLAG
         B     EXIT0000                       AND EXIT
PARM0110 DS    0H
         OC    COMM_SERVER_PORT,COMM_SERVER_PORT
         BNZ   EXIT0000
         ITRACE ID=NO_SPORT
         MVC   PRT_MESSAGE_ID(MSG11L),MSG11
         BAL   R10,PRT0000                    PRINT MESSAGE
         OI    COMM_FLAGS,$COMM_ABORT         SET ABORT FLAG
         B     EXIT0000                       AND EXIT
*---------------------------------------------------------------------*
*        Process ABEND statement                                      *
*---------------------------------------------------------------------*
ABND0000 DS    0H
         ITRACE ID=SETABEND
         OI    COMM_FLAGS,$COMM_ABEND
         B     PARM0010
*---------------------------------------------------------------------*
*        Process web port number statement                            *
*---------------------------------------------------------------------*
WEB0000  DS    0H
         ITRACE ID=WEB_PORT
         OC    COMM_WEB_PORT,COMM_WEB_PORT
         BNZ   WEB0050
         LA    R1,WORK_STMT+L'WEB_PORT_STMT   FIRST CHARACTER
         ST    R1,PARSE_IN                    SET INPUT DATA ADDRESS
         LA    R1,72-L'WEB_PORT_STMT          MAXIMUM INPUT LENGTH
         STH   R1,PARSE_IN_LENGTH             SET INPUT LENGTH
         LA    R1,5                           MAXIMUM CHARACTERS
         STH   R1,PARSE_OUT_LENGTH            SET MAXIMUM OUTPUT LENGTH
         BAL   R10,PARSE000                   LINK TO PARSE
         OC    PARSE_OUT_LENGTH,PARSE_OUT_LENGTH  ZERO?                 ?
         BZ    WEB0020                        YES
         CLI   PARSE_DELMITER,C' '            STOPPED ON A BLANK?
         BNE   WEB0030                        NO.. PORT IS TOO LONG
         LH    R1,PARSE_OUT_LENGTH            LENGTH
         LA    R2,PARSE_OUT
WEB0010  DS    0H
         CLI   0(R2),C'0'                     IS IT A DIGIT?
         BL    WEB0040                        NO
         CLI   0(R2),C'9'                     STILL A DIGIT?
         BH    WEB0040                        NO
         MVC   COMM_WEB_PORT_CHAR(4),COMM_WEB_PORT_CHAR+1
         MVC   COMM_WEB_PORT_CHAR+4(1),0(R2)
         LA    R2,1(R2)                       NEXT DIGIT
         BCT   R1,WEB0010
         PACK  WORK_DWORD,COMM_WEB_PORT_CHAR
         CVB   R1,WORK_DWORD                  CONVERT TO BINARY
         LTR   R1,R1                          CLEAR REGISTER
         BZ    WEB0060                        ZERO..
         STH   R1,COMM_WEB_PORT               SAVE PORT NUMBER
         ITRACE ID=GOODWEB,                   PORT LENGTH IS OK        +
               DATA1=(COMM_WEB_PORT,8)
         B     PARM0010                       READ NEXT STATEMENT
WEB0020  DS    0H
         ITRACE ID=NOPORT
         MVC   PRT_MESSAGE_ID(MSG05L),MSG05
         BAL   R10,PRT0000                    PRINT MESSAGE
         MVI   COMM_FLAGS,$COMM_ABORT         SET ABORT FLAG
         B     PARM0010                       READ NEXT STATEMENT
WEB0030  ds    0H
         ITRACE ID=PORTLONG
         MVC   PRT_MESSAGE_ID(MSG06L),MSG06
         BAL   R10,PRT0000                    PRINT MESSAGE
         MVI   COMM_FLAGS,$COMM_ABORT         SET ABORT FLAG
         B     PARM0010                       READ NEXT STATEMENT
WEB0040  ds    0H
         ITRACE ID=BADPORT
         MVC   PRT_MESSAGE_ID(MSG07L),MSG07
         BAL   R10,PRT0000                    PRINT MESSAGE
         MVI   COMM_FLAGS,$COMM_ABORT         SET ABORT FLAG
         B     PARM0010                       READ NEXT STATEMENT
WEB0050  ds    0H
         ITRACE ID=DUPPORT
         MVC   PRT_MESSAGE_ID(MSG08L),MSG08
         BAL   R10,PRT0000                    PRINT MESSAGE
         MVI   COMM_FLAGS,$COMM_ABORT         SET ABORT FLAG
         B     PARM0010                       READ NEXT STATEMENT
WEB0060  ds    0H
         ITRACE ID=ZEROPORT
         MVC   PRT_MESSAGE_ID(MSG09L),MSG09
         BAL   R10,PRT0000                    PRINT MESSAGE
         MVI   COMM_FLAGS,$COMM_ABORT         SET ABORT FLAG
         B     PARM0010                       READ NEXT STATEMENT
*---------------------------------------------------------------------*
*        Process server port number statement                         *
*---------------------------------------------------------------------*
SERV0000 DS    0H
         ITRACE ID=SERVPORT
         OC    COMM_SERVER_PORT,COMM_SERVER_PORT
         BNZ   SERV0050
         LA    R1,WORK_STMT+L'SERVER_PORT_STMT FIRST CHARACTER
         ST    R1,PARSE_IN                    SET INPUT DATA ADDRESS
         LA    R1,72-L'SERVER_PORT_STMT       MAXIMUM INPUT LENGTH
         STH   R1,PARSE_IN_LENGTH             SET INPUT LENGTH
         LA    R1,5                           MAXIMUM CHARACTERS
         STH   R1,PARSE_OUT_LENGTH            SET MAXIMUM OUTPUT LENGTH
         BAL   R10,PARSE000                   LINK TO PARSE
         OC    PARSE_OUT_LENGTH,PARSE_OUT_LENGTH   LENGTH ZERO?         ?
         BZ    SERV0020                       YES
         CLI   PARSE_DELMITER,C' '            STOPPED ON A BLANK?
         BNE   SERV0030                       NO.. PORT IS TOO LONG
         LH    R1,PARSE_OUT_LENGTH            LENGTH
         LA    R2,PARSE_OUT
SERV0010 DS    0H
         CLI   0(R2),C'0'                     IS IT A DIGIT?
         BL    SERV0040                       NO
         CLI   0(R2),C'9'                     STILL A DIGIT?
         BH    SERV0040                       NO
         MVC   COMM_SERVER_PORT_CHAR(4),COMM_SERVER_PORT_CHAR+1
         MVC   COMM_SERVER_PORT_CHAR+4(1),0(R2)
         LA    R2,1(R2)                       NEXT DIGIT
         BCT   R1,SERV0010
         PACK  WORK_DWORD,COMM_SERVER_PORT_CHAR
         CVB   R1,WORK_DWORD                  CONVERT TO BINARY
         LTR   R1,R1                          CLEAR REGISTER
         BZ    SERV0060                       ZERO..
         STH   R1,COMM_SERVER_PORT            SAVE PORT NUMBER
         ITRACE ID=GOODSERV,                  PORT LENGTH IS OK        +
               DATA1=(COMM_SERVER_PORT,8)
         B     PARM0010                       READ NEXT STATEMENT
SERV0020 DS    0H
         ITRACE ID=NOPORT
         MVC   PRT_MESSAGE_ID(MSG05L),MSG05
         BAL   R10,PRT0000                    PRINT MESSAGE
         MVI   COMM_FLAGS,$COMM_ABORT         SET ABORT FLAG
         B     PARM0010                       READ NEXT STATEMENT
SERV0030 DS    0H
         ITRACE ID=PORTLONG
         MVC   PRT_MESSAGE_ID(MSG06L),MSG06
         BAL   R10,PRT0000                    PRINT MESSAGE
         MVI   COMM_FLAGS,$COMM_ABORT         SET ABORT FLAG
         B     PARM0010                       READ NEXT STATEMENT
SERV0040 DS    0H
         ITRACE ID=BADPORT
         MVC   PRT_MESSAGE_ID(MSG07L),MSG07
         BAL   R10,PRT0000                    PRINT MESSAGE
         MVI   COMM_FLAGS,$COMM_ABORT         SET ABORT FLAG
         B     PARM0010                       READ NEXT STATEMENT
SERV0050 DS    0H
         ITRACE ID=DUPPORT
         MVC   PRT_MESSAGE_ID(MSG08L),MSG08
         BAL   R10,PRT0000                    PRINT MESSAGE
         MVI   COMM_FLAGS,$COMM_ABORT         SET ABORT FLAG
         B     PARM0010                       READ NEXT STATEMENT
SERV0060 DS    0H
         ITRACE ID=ZEROPORT
         MVC   PRT_MESSAGE_ID(MSG09L),MSG09
         BAL   R10,PRT0000                    PRINT MESSAGE
         MVI   COMM_FLAGS,$COMM_ABORT         SET ABORT FLAG
         B     PARM0010                       READ NEXT STATEMENT
*---------------------------------------------------------------------*
*        PROCESS SNAPCLASS STATEMENT                                  *
*---------------------------------------------------------------------*
SNPC0000 DS    0H
         ITRACE ID=SNAPCLAS                   SNAPSHOT SYSOUT CLASS
         CLI   WORK_STMT+L'SNPCSTMT,C' '      BLANK?
         BE    SNPC0010                       YES.. INVALID
         CLI   WORK_STMT+L'SNPCSTMT+1,C' '    BLANK?
         BNE   SNPC0020                       NO.. INVALID
         MVC   COMM_SNAP_CLASS,WORK_STMT+L'SNPCSTMT
         B     PARM0010                       READ NEXT STATEMENT
SNPC0010 DS    0H
         ITRACE ID=SNAPBLNK
         MVC   PRT_MESSAGE_ID(MSG03L),MSG03
         BAL   R10,PRT0000                    PRINT MESSAGE
         MVI   COMM_FLAGS,$COMM_ABORT         SET ABORT FLAG
         B     PARM0010                       READ NEXT STATEMENT
SNPC0020 DS    0H
         ITRACE ID=SNAPLONG
         MVC   PRT_MESSAGE_ID(MSG04L),MSG04
         BAL   R10,PRT0000                    PRINT MESSAGE
         MVI   COMM_FLAGS,$COMM_ABORT         SET ABORT FLAG
         B     PARM0010                       READ NEXT STATEMENT
* ------------------------------------------------------------------- *
*        Process TRACE statements                                     *
* ------------------------------------------------------------------- *
TRACE100 DS    0H
         ITRACE ID=TRACE
         CLC   =C'URL ',WORK_STMT+L'TRACESTMT
         BNE   TRACE200
         OI    COMM_TRACE_FLAGS,$TRACE_URLS
         B     PARM0010
TRACE200 DS    0H
         MVC   PRT_MESSAGE_ID(MSG14L),MSG14
         BAL   R10,PRT0000                    PRINT MESSAGE
         MVI   COMM_FLAGS,$COMM_ABORT         SET ABORT FLAG
         B     PARM0010                       READ NEXT STATEMENT
* ------------------------------------------------------------------- *
*                                                                     *
*  Parsing                                                            *
*                                                                     *
*  At entry:                                                          *
*     PARSE_IN           Address of source data                       *
*     PARSE_IN_LENGTH    Length of source data                        *
*     PARSE_OUT_LENGTH   Maximum output length                        *
*                                                                     *
*  At exit:                                                           *
*     PARSE_IN           Address of byte following delimiter that     *
*                        stopped the scan                             *
*     PARSE_IN_LENGTH    Length of data following the delimiter       * e *
*     PARSE_OUT          Data upto but not including the delimiter    *
*     PARSE_OUT_LENGTH   Length of data in PARSE_OUT                  * T *
*     PARSE_DELMITER     Delimiter that stopped the scan or null      * or *
*                        if the scan stopped due to end of data       *
*                                                                     *
* ------------------------------------------------------------------- *
PARSE000 DS    0H
         STM   R1,R5,PARSE_SAVE               SAVE REGISTERS
         ITRACE ID=PARSE,                     STARTING A PARSE         +
               DATA1=(PARSE_IN,8),            .. STARTING ADDRESS      +
               DATA2=(PARSE_IN_LENGTH,8)      .. INPUT/OUTPUT LENGTHS
         MVC   PARSE_OUT,COMM_BLANKS          CLEAR OUTPUT DATA
         LH    R1,PARSE_IN_LENGTH             INPUT DATA LENGTH
         LH    R2,PARSE_OUT_LENGTH            MAXIMUM OUTPUT LENGTH
         L     R3,PARSE_IN                    INPUT DATA ADDRESS
         LA    R4,PARSE_OUT                   OUTPUT DATA ADDRESS
         SR    R5,R5                          INITIALIZE OUTPUT LENGTH
         MVI   PARSE_DELMITER,0               SET DELIMITER TO A NULL
         LTR   R1,R1                          ANY DATA LEFT?
         BZ    PARSE050                       NO
PARSE010 DS    0H
         CLI   0(R3),C' '                     BLANK?
         BNE   PARSE020                       NO
         LA    R3,1(R3)                       NEXT
         BCT   R1,PARSE010                    LOOP
         B     PARSE050
PARSE020 DS    0H
         CLI   0(R3),C' '                     BLANK?
         BE    PARSE040                       YES
         CLI   0(R3),C','                     COMMA?
         BE    PARSE040                       YES
         CLI   0(R3),C'='                     EQUALS SIGN?
         BE    PARSE040                       YES
         MVC   0(1,R4),0(R3)                  COPY TO OUTPUT
         LA    R3,1(R3)                       NEXT
         LA    R4,1(R4)                       NEXT
         LA    R5,1(R5)                       PLUS 1 BYTE OF LENGTH
         BCT   R1,PARSE030                    MINUS 1 BYTE OF INPUT
         B     PARSE050                       FORCE EXIT
PARSE030 DS    0H
         BCT   R2,PARSE020                    LOOP
         CLI   0(R3),C' '                     BLANK?
         BE    PARSE040                       YES
         CLI   0(R3),C','                     COMMA?
         BNE   PARSE050                       NO
PARSE040 DS    0H
         MVC   PARSE_DELMITER,0(R3)           SAVE DELIMITER
         LA    R3,1(R3)                       SKIP DELIMITER
         BCTR  R1,0                           MINUS BYTE USED BY DELIM
PARSE050 DS    0H
         STH   R1,PARSE_IN_LENGTH             INPUT LENGTH LEFT
         STH   R5,PARSE_OUT_LENGTH            OUTPUT LENGTH
         ST    R3,PARSE_IN                    INPUT ENDING POINT
         ITRACE ID=PARSE_OUT,                 PARSE ENDING             +
               DATA1=(PARSE_OUT,8),           .. PART OF OUTPUT DATA   +
               DATA2=(PARSE_OUT_LENGTH,8)     .. OUTPUT LENGTH
         LM    R1,R5,PARSE_SAVE               RESTORE SAVED REGISTERS
         BR    R10                            EXIT
* ------------------------------------------------------------------- *
*        PRINTING                                                     *
* ------------------------------------------------------------------- *
PRT0000  DS    0H
         ITRACE ID=PRINT
         GETMAIN RU,                          GETMAIN STORAGE          +
               LV=PRTBLOKL,                                            +
               LOC=ANY
         MVC   0(PRTBLOKL,R1),PRTBLOK         COPY DATA
         MVC   PRT_CC(PRT_LRECL),COMM_BLANKS
PRT0010  DS    0H
         L     R14,COMM_PRINT_QUEUE           FIRST BLOCK QUEUE
         ST    R14,PRT_NEXT-PRTBLOK(R1)
         CS    R14,R1,COMM_PRINT_QUEUE
         BC    4,PRT0010
         BR    R10                            RETURN
* ------------------------------------------------------------------- *
*        EXIT                                                         *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         POST  COMM_PRINT_WORK_ECB            WAKE UP PRINT SUBTASK
         ITRACE ID=EXIT                       EXITING
         LR    R1,R13                         SAVE SAVE AREA ADDRESS
         L     R13,4(R13)                     RESTORE REGISTER 13       ASE01670
         FREEMAIN RU,                         FREEMAIN WORK AREA       +
               A=(1),                                                  +
               LV=WORKL
         LM    R14,R12,12(R13)                RESTORE OTHER REGISTERS   ASE01680
         SR    R15,R15                        RETURN CODE               ASE01690
         BR    R14                            RETURN TO CALLER          ASE01700
* ------------------------------------------------------------------ *
*                                                                    *
*        CONSTANTS                                                   *
*                                                                    *
* ------------------------------------------------------------------ *
DCBI     DCB   DSORG=PS,                                               +
               DDNAME=SYSIN,                                           +
               RECFM=FB,                                               +
               LRECL=80,                                               +
               DCBE=DCBEI,                                             +
               MACRF=GM
DCBL     EQU   *-DCBI
DCBEI    DCBE  EODAD=PARM0100
DCBEL    EQU   *-DCBEI
OPENI    OPEN  (*,INPUT),                                              +
               MODE=31,                                                +
               MF=L
OPENL    EQU   *-OPENI
CLOSEI   CLOSE *,                                                      +
               MODE=31,                                                +
               MF=L
CLOSEL   EQU   *-CLOSEI

PRT_ID           DC    CL8'PRTBLOK'

ABEND_STMT       DC  C'ABEND '          ABEND CONTROL STATEMENT
WEB_PORT_STMT    DC  C'WEBPORT='        WEB PORT NUMBER STATEMENT
SERVER_PORT_STMT DC  C'SERVERPORT='     SERVER PORT NUMBER STATEMENT
SNPCSTMT         DC  C'SNAPCLASS='      SNAPSHOT SYSOUT CLASS STATEMENT
TRACESTMT        DC  C'TRACE='          TRACE STATEMENT

MSG01    DS    0C
         DC    CL15'HTTPPARM01I'
         DC    C'Control statement:'
         DC    C' '
MSG01D   DC    CL80' '
MSG01L   EQU   *-MSG01
MSG02    DS    0C
         DC    CL15'HTTPPARM02E'
         DC    C'Invalid control statement.'
MSG02L   EQU   *-MSG02
MSG03    DS    0C
         DC    CL15'HTTPPARM07E'
         DC    C'SNAPSHOT SYSOUT class cannot be blank.'
MSG03L   EQU   *-MSG03
MSG04    DS    0C
         DC    CL15'HTTPPARM08E'
         DC    C'SNAPSHOT SYSOUT class too long.'
MSG04L   EQU   *-MSG04
MSG05    DS    0C
         DC    CL15'HTTPPARM09E'
         DC    C'PORT number omitted'
MSG05L   EQU   *-MSG05
MSG06    DS    0C
         DC    CL15'HTTPPARM10E'
         DC    C'PORT number must be 5 digits or less'
MSG06L   EQU   *-MSG06
MSG07    DS    0C
         DC    CL15'HTTPPARM11E'
         DC    C'Non-numeric found in PORT number'
MSG07L   EQU   *-MSG07
MSG08    DS    0C
         DC    CL15'HTTPPARM12E'
         DC    C'PORT number already specified'
MSG08L   EQU   *-MSG08
MSG09    DS    0C
         DC    CL15'HTTPPARM13E'
         DC    C'Zero is not valid for a PORT number'
MSG09L   EQU   *-MSG09
MSG10    DS    0C
         DC    CL15'HTTPPARM14E'
         DC    C'Web port number is required'
MSG10L   EQU   *-MSG10
MSG11    DS    0C
         DC    CL15'HTTPPARM11E'
         DC    C'Server port number is required'
MSG11L   EQU   *-MSG11
MSG13    DS    0C
         DC    CL15'HTTPPARM16E'
         DC    C'Syntax error'
MSG13L   EQU   *-MSG13
MSG14    DS    0C
         DC    CL15'HTTPPARM17E'
         DC    C'Invalid TRACE type on TRACE statement'
MSG14L   EQU   *-MSG14
         LTORG
* ------------------------------------------------------------------ *
*                                                                    *
*        WORK AREAS                                                  *
*                                                                    *
* ------------------------------------------------------------------ *
WORKAREA         DSECT
                 STDSAVE DSECT=NO   REGISTER SAVE AREA
WORK_DWORD       DS      D
                 PRTBLOK DSECT=NO
WORK_OCPL        DS      (OPENL)X
WORK_DCB         DS      (DCBL)X
PARSE_SAVE       DS      5F         REGISTER SAVE AREA FOR PARSE
PARSE_IN         DS      A          PARSE DATA INPUT ADDRESS
PARSE_IN_LENGTH  DS      H          LENGTH OF DATA AT PARSE IN
PARSE_OUT_LENGTH DS      H          LENGTH OF DATA IN PARSE OUT
PARSE_DELMITER   DS      C          DELIMITER THAT STOPPED PARSE
PARSE_OUT        DS      CL80       OUTPUT FROM PARSE
WORK_STMT        DS      CL80       CONTROL STATEMENT I/O AREA
WORKL            EQU     *-WORKAREA
* ------------------------------------------------------------------ *
*                                                                    *
* ------------------------------------------------------------------ *
         COMMON  MAIN,TYPE=DSECT
* ------------------------------------------------------------------ *
*                                                                    *
* ------------------------------------------------------------------ *
         COPY REGEQU
         END  HTTPPARM
