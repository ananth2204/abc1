{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012425000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 117572, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 6, "INMDSNAM": "CBT.V500.FILE592.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE592.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x03\\x06'", "DS1TRBAL": "b'x\\x10'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x04Z\\x00\\x05\\x04Z\\x00\\x08\\x00\\x04'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x02&\\x9f\\x01\\x02&\\x9f\\x165\\x00\\x0c\\x00\\x0c\\x00\\x00\\xe2\\xc8\\xc9\\xd7\\xc4\\xc1\\xe3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-09-26T00:00:00", "modifydate": "2002-09-26T16:35:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "SHIPDAT"}, "text": "REGULAR CBT TAPE - VERSION 452    FILE:  592\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT452.FILE592\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    3200    PO\n\n   PDS117I 5 MEMBERS COUNTED; CUMULATIVE SIZE IS 846 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   09/26/02    16:35:17    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$NOTE1": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00G\\x01\\x02&\\x9f\\x01\\x02&\\x9f\\x16&\\x00&\\x00&\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-09-26T00:00:00", "modifydate": "2002-09-26T16:26:47", "lines": 38, "newlines": 38, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject: Fwd: One more oldie\nDate: Sun, 22 Sep 2002 22:16:11 EDT\nFrom: SBGOLOB@aol.com\nTo: sbgolob@attglobal.net\n\n    --------------------------------------------------------------------\n\nSubject: One more oldie\nDate: Fri, 20 Sep 2002 14:37:31 -0500 (CDT)\nFrom: Richard Rice <rlrice@skylark.ppco.com>\nTo: sbgolob@aol.com\n\nSam,\n\nThis is another oldie.  The idea behind this was as an aid in\ndebugging an assembler program.  You could code the DISPLAY macro\nat various points to \"display\" the values of variables or\nregisters.  The DISPLAY module has to be link-edited with the\nprogram and you have to add a \"DD\" statement to your JCL.  Once\nyou got the program working, remove the DISPLAY macros.\n\nThere are two pieces to this.  One is the DISPLAY macro, the\nother is a module that you have to assemble and link-edit with\nthe program that is going to use the DISPLAY macro.  The DISPLAY\nmacro generates the parameter list and then links to the DISPLAY\nmodule.\n\nThe comments say it is not re-entrant and it was written way, way\nbefore XA and 31-bit mode.  I found this when looking through\nsome stuff that is being purged from what is left of my stuff on\nthe MVS sytem.  It looks like a line in PROC1TBL may not have\ncome through quite intact.  I think that table is used to\ntranslate out unprintable characters (it has been too long for me\nto remember).  I doubt that this is really good for much now, but\nit could possible inspire someone to develop something similar.\n\nNote:  I fixed the PROC1TBL the best I could. (SG)\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@FILE592": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x01\\x01\\x01\\x02_\\x01\\x02&\\x9f\\x164\\x00\\x14\\x00\\x02\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2001-01-25T00:00:00", "modifydate": "2002-09-26T16:34:01", "lines": 20, "newlines": 2, "modlines": 0, "user": "SBGOLOB"}, "text": "//***FILE 592 is from Richard Rice, and contains an assembler       *   FILE 592\n//*           program and a macro (both called DISPLAY), which      *   FILE 592\n//*           allows the programmer to display registers, fullwords *   FILE 592\n//*           and halfwords, etc. so that it is easier to debug     *   FILE 592\n//*           your assembler program.                               *   FILE 592\n//*                                                                 *   FILE 592\n//*           You linkedit the DISPLAY assembler module with the    *   FILE 592\n//*           assembler program that you're coding, and to display  *   FILE 592\n//*           values from the program, you code instances of the    *   FILE 592\n//*           DISPLAY macro in your program.  The result is a       *   FILE 592\n//*           display of the quantity, in readable format, so you   *   FILE 592\n//*           can debug your program.  When your program is clean,  *   FILE 592\n//*           you simply remove the DISPLAY macros.                 *   FILE 592\n//*                                                                 *   FILE 592\n//*           This is very old code, from the 70s or so.  See       *   FILE 592\n//*           member $$NOTE1, and the comments in the code, for     *   FILE 592\n//*           more details.                                         *   FILE 592\n//*                                                                 *   FILE 592\n//*           email:  Richard Rice <rlrice@skylark.ppco.com>        *   FILE 592\n//*                                                                 *   FILE 592\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DISPLAY": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\t\\x01\\x02&\\x9f\\x01\\x02&\\x9f\\x16 \\x01\\xe4\\x01\\xe4\\x01\\xe2\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2002-09-26T00:00:00", "modifydate": "2002-09-26T16:20:09", "lines": 484, "newlines": 484, "modlines": 482, "user": "SBGOLOB"}, "text": "*---------------------------------------------------------------------*\n*                                                                     *\n*           This program provides a method to quickly \"DISPLAY\"       *\n*           data.  This function is similar to the COBOL 'EXHIBIT     *\n*           NAMED'.  This data can be used to trace program execution,*\n*           display data, verify the results of program execution,    *\n*           or any other similar use.  This program allows data to    *\n*           be printed (DISPLAYed) without having to add an extra     *\n*           DCB, OPEN it, CLOSE it, or format the data before         *\n*           printing.  Output is double spaced between invocations    *\n*           and a sequence number is printed to group multiple lines  *\n*           Of one DISPLAY together if all data cannot be DISPLAYed   *\n*           on the same line.                                         *\n*                                                                     *\n*           This module is NOT re-entrant.                            *\n*                                                                     *\n*           The parameter list can be generated via the 'DISPLAY'     *\n*           macro.                                                    *\n*                                                                     *\n*           Some data types have maximum lengths that must not be     *\n*           exceeded.  These maximums are:                            *\n*               Binary            12                                  *\n*               Character        115                                  *\n*               Hex               57                                  *\n*               Packed decimal    15                                  *\n*          The 'DISPLAY' macro will check lengths and issue MNOTES    *\n*          for any values which exceed these maximums.  If registers  *\n*          are used to pass a variable length, the module will        *\n*          truncate any lengths which exceed the maximum.             *\n*                                                                     *\n*          No edit checking is done on packed decimals to ensure      *\n*          valid values before attempting to EDit.                    *\n*                                                                     *\n*---------------------------------------------------------------------*\nDISPLAY  CSECT\n         USING DISPLAY,R12              DECLARE ENTRY BASE\n         USING DSPLDSCT,R11             DECLARE PARM BLOCK BASE\n         PRINT ON,NOGEN                 NO MACRO PRINT\n         STM   R14,R12,12(R13)          STORE CALLERS REGISTERS\n         LR    R12,R15                  LOAD BASE REGISTER\n         LR    R15,R13                  SAVE CALLERS SAVEAREA ADDR\n         LA    R13,SAVE                 LOAD ADDRESS OF MY SAVE AREA\n         ST    R15,4(,R13)              CHAIN CALLERS TO MINE\n         ST    R13,8(,R15)              CHAIN MINE TO CALLERS\n         LR    R11,R1                   COPY PARAMETER LIST ADDRESS\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nINIT0000 DS    0H\n         TM    DCBFLAG,$DCBOPEN         IS THE DCB OPEN??\n         BO    PROC0000                 YES\n         OPEN  (DISPDCB,OUTPUT)         OPEN 'DISPLAY' DCB\n         OI    DCBFLAG,$DCBOPEN         DCB IS OPEN\n         BAL   R10,HEADINGS             PRINT INITIAL HEADINGS\nPROC0000 DS    0H\n         MVI   PRCC,C'0'                CAUSE A DOUBLE SPACE\n         AP    SEQNBR,P1                ADD 1 TO SEQUENCE NUMBER\n         MVC   SEQWORK,SEQEDWD          SET EDIT WORD\n         ED    SEQWORK,SEQNBR           EDIT SEQUENCE NUMBER\n         MVC   PRSEQ,SEQWORK+1          MOVE EDITED SEQUENCE NUMBER\nPROC0010 DS    0H\n         LA    R3,PRDATA                INITIALIZE DATA ADDRESS\n         LA    R4,124                   INITIALIZE LENGTH REMAINING\n         B     PROC0030                 SKIP 'NEXT' ELEMENT STUFF\nPROC0020 DS    0H\n         LA    R11,DSPLLEN(R11)         NEXT DATA ELEMENT\n         C     R12,DSPLNAME             END OF LIST??\n         BE    EXIT0000                 YES, EXIT\n         LA    R3,2(R3)                 SKIP 2 SPACES\n         SH    R4,H2                    ACCOUNT FOR THEM\n         BNH   PRT0000                  LINE FULL\nPROC0030 DS    0H\n         L     R5,DSPLADDR              DATA ITEM ADDRESS\n         CLI   DSPLTYPE,C'C'            CHARACTER DATA??\n         BE    PROC1000                 YES\n         CLI   DSPLTYPE,C'X'            HEX DATA??\n         BE    PROC2000                 YES\n         CLI   DSPLTYPE,C'P'            PACKED DECIMAL??\n         BE    PROC3000                 YES\n         CLI   DSPLTYPE,C'F'            FULLWORD??\n         BE    PROC4000                 YES\n         CLI   DSPLTYPE,C'H'            HALFWORD??\n         BE    PROC5000                 YES\n         CLI   DSPLTYPE,C'B'            BINARY??\n         BE    PROC6000                 YES\n         CLI   DSPLTYPE,C'R'            REGISTER CONTENTS?\n         BE    PROC7000                 YES\n         DC    H'0'                     .. BAD NEWS\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*         PROCESS CHARACTER FIELDS                                    *\n*                                                                     *\n*---------------------------------------------------------------------*\nPROC1000 DS    0H\n         SH    R4,H9                    LENGTH OF NAME AND ':'\n         BNH   PRT0000                  NAME WON'T FIT ON THIS LINE\n         LH    R1,DSPLDLEN              DATA LENGTH\n         CH    R1,H115                  EXCEED MAXIMUM??\n         BNH   PROC1010                 NO\n         LH    R1,H115                  LIMIT LENGTH\nPROC1010 DS    0H\n         CR    R4,R1                    WILL DATA FIT ALSO??\n         BL    PRT0000                  NO ... PRINT WHAT WE HAVE\n         MVC   0(8,R3),DSPLNAME         MOVE DATA ELEMENT NAME\n         MVI   8(R3),C':'               INSERT COLON\n         LA    R3,9(R3)                 NEW OUTPUT ADDRESS\n         LTR   R1,R1                    LENGTH ZERO??\n         BZ    PROC0020                 NO DATA\n         SR    R4,R1                    DECREMENT LENGTH LEFT ON LINE\n         BCTR  R1,0                     ADJUST FOR EXECUTE\n         EX    R1,PROC1MVC              MOVE DATA TO PRINT I/O AREA\n         EX    R1,PROC1TR               TRANSLATE OUT UNPRINTABLES\n         LA    R3,1(R1,R3)              NEW PRINT LINE ADDRESS\n         B     PROC0020                 ADVANCE TO NEXT DATA ELEMENT\nPROC1MVC MVC   0(0,R3),0(R5)            MOVE DATA TO PRINT I/O AREA\nPROC1TR  TR    0(0,R3),PROC1TBL         TRANSLATE OUT UNPRINTABLES\nPROC1TBL DS    0CL256\n*                0123456789ABCDEF\n         DC    C'                '      X'00' - X'0F'\n         DC    C'                '      X'10' - X'1F'\n         DC    C'                '      X'20' - X'2F'\n         DC    C'                '      X'30' - X'3F'\n         DC    C'           .<(+|'      X'40' - X'4F'\n         DC    C'&&         !$*);\u00ac'     X'50' - X'5F'\n         DC    C'-/        \u00a6,%_>?'      X'60' - X'6F'\n         DC    C'         `:#@''=\"'     X'70' - X'7F'\n         DC    C'                '      X'80' - X'8F'\n         DC    C'                '      X'90' - X'9F'\n         DC    C'                '      X'A0' - X'AF'\n         DC    C'                '      X'B0' - X'BF'\n         DC    C' ABCDEFGHI      '      X'C0' - X'CF'\n         DC    C' JKLMNOPQR      '      X'D0' - X'DF'\n         DC    C'\\ STUVWXYZ      '      X'E0' - X'EF'\n         DC    C'0123456789      '      X'F0' - X'FF'\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*         PROCESS HEX FIELDS                                          *\n*                                                                     *\n*---------------------------------------------------------------------*\nPROC2000 DS    0H\n         SH    R4,H9                    LENGTH OF NAME AND ':'\n         BNH   PRT0000                  NAME WON'T FIT ON THIS LINE\n         LH    R1,DSPLDLEN              SOURCE LENGTH\n         SLL   R1,1                     DOUBLE IT\n         CH    R1,H115                  EXCEED MAXIMUM??\n         BNH   PROC2010                 NO\n         LH    R1,H115                  LIMIT LENGTH\nPROC2010 DS    0H\n         CR    R4,R1                    WILL EXPANDED DATA FIT??\n         BL    PRT0000                  NO ... PRINT WHAT WE HAVE\n         MVC   0(8,R3),DSPLNAME         MOVE DATA ELEMENT NAME\n         MVI   8(R3),C':'               INSERT COLON\n         LA    R3,9(R3)                 NEW OUTPUT ADDRESS\n         LTR   R1,R1                    DATA LENGTH ZERO??\n         BZ    PROC0020                 YES ... NO DATA\n         LTR   R1,R1                    DATA LENGTH ZERO??\n         SR    R4,R1                    MINUS EXPANDED LENGTH\n         SRL   R1,1                     ORIGINAL LENGTH\nPROC2020 DS    0H\n         PACK  0(1,R3),0(1,R5)          MOVE A BYTE\n         MVC   1(1,R3),0(R5)            MOVE IT AGAIN\n         NC    0(2,R3),PROC20F          NULLIFY ZONES\n         TR    0(2,R3),PROC2TBL         TRANSLATE\n         LA    R3,2(R3)                 NEW OUTPUT ADDRESS\n         LA    R5,1(R5)                 NEXT SOURCE BYTE\n         BCT   R1,PROC2020              LOOP\n         B     PROC0020                 NEXT DATA ELEMENT\nPROC20F  DC    X'0F0F'\nPROC2TBL DC    C'0123456789ABCDEF'\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*         PROCESS PACKED DECIMAL FIELDS                               *\n*                                                                     *\n*---------------------------------------------------------------------*\nPROC3000 DS    0H\n         SH    R4,H9                    LENGTH OF NAME AND ':'\n         BNH   PRT0000                  NAME WON'T FIT ON THIS LINE\n         LH    R14,DSPLDLEN             SOURCE LENGTH\n         CH    R14,H15                  EXCEED MAXIMUM??\n         BNH   PROC3010                 NO\n         AR    R5,R14                   ADD FULL LENGTH\n         LH    R14,H15                  MAXIMUM LENGTH\n         SR    R5,R14                   START OF TRUNCATED DATA\nPROC3010 DS    0H\n         SLL   R14,1                    DOUBLE IT\n         CR    R4,R14                   WILL EXPANDED DATA FIT??\n         BL    PRT0000                  NO ... PRINT WHAT WE HAVE\n         MVC   0(8,R3),DSPLNAME         MOVE DATA ELEMENT NAME\n         MVI   8(R3),C':'               INSERT COLON\n         LA    R3,9(R3)                 NEW OUTPUT ADDRESS\n         LTR   R14,R14                  LENGTH ZERO??\n         BZ    PROC0020                 YES ... NO DATA\n         SR    R4,R14                   MINUS EXPANDED LENGTH\n         SRL   R14,1                    SOURCE LENGTH\n         BCTR  R14,0                    ADJUST FOR EXECUTE\n         EX    R14,PROC3ZAP             MOVE TO DOUBLE WORD\n         MVC   PROC3EWK,PROC3EWD        MOVE EDIT WORD\n         EDMK  PROC3EWK,PROC3DWD        EDIT\n         LTR   R1,R1                    R1 SET??\n         BZ    PROC3020                 NO\n         BCTR  R1,0                     ADJUST ADDRESS BACK 1\n         MVC   0(1,R1),PROC3EWK+16      MOVE SIGN FROM END\nPROC3020 DS    0H\n         LA    R2,PROC3EWK+15           LAST BYTE OF EDITED RESULT\n         LA    R14,1(R14)               RESTORE FULL LENGTH\n         SLL   R14,1                    LENGTH OF EXPANDED RESULT\n         BCTR  R14,0                    MINUS 1\n         SR    R2,R14                   OUTPUT PORTION OF RESULT\n         EX    R14,PROC3MVC             MOVE RESULT TO PRINT LINE\n         LA    R3,1(R14,R3)             ADJUST OUTPUT ADDRESS\n         B     PROC0020                 NEXT DATA ELEMENT\nPROC3ZAP ZAP   PROC3DWD(8),0(0,R5)      MOVE TO DOUBLE WORD\nPROC3MVC MVC   0(0,R3),0(R2)            MOVE RESULT TO PRINT\nPROC3DWD DC    D'0'\n*                                     1 1 1 1 1 1\n*                   1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\nPROC3EWD DC    X'4020202020202020202020202020212060'\nPROC3EWK DC    CL17' '\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*         PROCESS FULLWORD FIELDS                                     *\n*                                                                     *\n*---------------------------------------------------------------------*\nPROC4000 DS    0H\n         SH    R4,H9                    LENGTH OF NAME AND ':'\n         BNH   PRT0000                  NAME WON'T FIT ON THIS LINE\n         SH    R4,H11                   MINUS RESULTANT LENGTH\n         BL    PRT0000                  NO... PRINT WHAT WE HAVE\n         MVC   0(8,R3),DSPLNAME         MOVE FIELD NAME\n         MVI   8(R3),C':'               INSERT COLON\n         LA    R3,9(R3)                 NEW OUTPUT ADDRESS\n         L     R1,0(R5)                 LOAD VALUE\n         CVD   R1,PROC4DWD              CONVERT TO DECIMAL\n         MVC   PROC4EWK,PROC4EWD        MOVE EDIT WORD\n         EDMK  PROC4EWK,PROC4DWD+2      EDIT VALUE\n         LTR   R1,R1                    R1 SET??\n         BZ    PROC4010                 NO\n         BCTR  R1,0                     ADJUST ADDRESS\n         MVC   0(1,R1),PROC4EWK+12      MOVE SIGN\n         MVC   0(11,R3),PROC4EWK+1      MOVE RESULT\nPROC4010 DS    0H\n         LA    R3,11(R3)                ADJUST OUTPUT ADDRESS\n         B     PROC0020                 NEXT DATA ELEMENT\nPROC4DWD DC    D'0'\nPROC4EWK DC    CL13' '\n*                                       1\n*                     1 2 3 4 5 6 7 8 9 0\nPROC4EWD DC    X'40202020202020202020202060'\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*         PROCESS HALFWORD FIELDS                                     *\n*                                                                     *\n*---------------------------------------------------------------------*\nPROC5000 DS    0H\n         SH    R4,H9                    LENGTH OF NAME AND ':'\n         BNH   PRT0000                  NAME WON'T FIT ON THIS LINE\n         SH    R4,H6                    MINUS RESULTANT LENGTH\n         BL    PRT0000                  NO... PRINT WHAT WE HAVE\n         MVC   0(8,R3),DSPLNAME         MOVE FIELD NAME\n         MVI   8(R3),C':'               INSERT COLON\n         LA    R3,9(R3)                 NEW OUTPUT ADDRESS\n         LH    R1,0(R5)                 LOAD VALUE\n         CVD   R1,PROC5DWD              CONVERT TO DECIMAL\n         MVC   PROC5EWK,PROC5EWD        MOVE EDIT WORD\n         EDMK  PROC5EWK,PROC5DWD+5      EDIT VALUE\n         LTR   R1,R1                    R1 SET??\n         BZ    PROC5010                 NO\n         BCTR  R1,0                     ADJUST ADDRESS\n         MVC   0(1,R1),PROC5EWK+6       MOVE SIGN\n         MVC   0(6,R3),PROC5EWK         MOVE RESULT\nPROC5010 DS    0H\n         LA    R3,6(R3)                 ADJUST OUTPUT ADDRESS\n         B     PROC0020                 NEXT DATA ELEMENT\nPROC5DWD DC    D'0'\nPROC5EWK DC    CL7' '\n*\n*                   1 2 3 4 5\nPROC5EWD DC    X'40202020212060'\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*         PROCESS BINARY FIELDS                                       *\n*                                                                     *\n*---------------------------------------------------------------------*\nPROC6000 DS    0H\n         SH    R4,H9                    LENGTH OF NAME AND ':'\n         BNH   PRT0000                  NAME WON'T FIT ON THIS LINE\n         LH    R1,DSPLDLEN              SOURCE LENGTH\n         CH    R1,H12                   EXCEED MAXIMUM??\n         BNH   PROC6010                 NO\n         LH    R1,H12                   LIMIT DATA LENGTH\nPROC6010 DS    0H\n         SLL   R1,3                     FOR 8 BITS PER BYTE\n         SR    R4,R1                    WILL EXPANDED DATA FIT??\n         BL    PRT0000                  NO... PRINT WHAT WE HAVE\n         MVC   0(8,R3),DSPLNAME         MOVE DATA ITEM NAME\n         MVI   8(R3),C':'               INSERT COLON\n         LA    R3,9(R3)                 UPDATE OUTPUT ADDRESS\n         LTR   R1,R1                    DATA LENGTH ZERO??\n         BZ    PROC0020                 YES ... NO DATA\n         SRL   R1,3                     RESET TO SOURCE LENGTH\n         MVC   0(8,R3),PROC6INT         INITIALZE TO '00000000'\n         TM    0(R5),X'80'              BIT ON??\n         BNO   PROC6020                 NO\n         MVI   0(R3),C'1'               CHANGE TO '1'\nPROC6020 DS    0H\n         TM    0(R5),X'40'              BIT ON??\n         BNO   PROC6030                 NO\n         MVI   1(R3),C'1'               CHANGE TO '1'\nPROC6030 DS    0H\n         TM    0(R5),X'20'              BIT ON??\n         BNO   PROC6040                 NO\n         MVI   2(R3),C'1'               CHANGE TO '1'\nPROC6040 DS    0H\n         TM    0(R5),X'10'              BIT ON??\n         BNO   PROC6050                 NO\n         MVI   3(R3),C'1'               CHANGE TO '1'\nPROC6050 DS    0H\n         TM    0(R5),X'08'              BIT ON??\n         BNO   PROC6060                 NO\n         MVI   4(R3),C'1'               CHANGE TO '1'\nPROC6060 DS    0H\n         TM    0(R5),X'04'              BIT ON??\n         BNO   PROC6070                 NO\n         MVI   5(R3),C'1'               CHANGE TO '1'\nPROC6070 DS    0H\n         TM    0(R5),X'02'              BIT ON??\n         BNO   PROC6080                 NO\n         MVI   6(R3),C'1'               CHANGE TO '1'\nPROC6080 DS    0H\n         TM    0(R5),X'01'              BIT ON??\n         BNO   PROC6090                 NO\n         MVI   7(R3),C'1'               CHANGE TO '1'\nPROC6090 DS    0H\n         LA    R3,8(R3)                 ADJUST OUTPUT ADDRESS\n         LA    R5,1(R5)                 ADJUST SOURCE ADDRESS\n         BCT   R1,PROC6010              LOOP\n         B     PROC0020                 NEXT DATA ELEMENT\nPROC6INT DC    C'00000000'\n*---------------------------------------------------------------------*\n*                                                                     *\n*         PROCESS REGISTER CONTENT FIELDS                             *\n*                                                                     *\n*---------------------------------------------------------------------*\nPROC7000 DS    0H\n         SH    R4,H9                    LENGTH OF NAME AND ':'\n         BNH   PRT0000                  NAME WON'T FIT ON THIS LINE\n         LH    R1,DSPLDLEN              SOURCE LENGTH\n         SLL   R1,1                     DOUBLE IT\n         CH    R1,H115                  EXCEED MAXIMUM??\n         BNH   PROC7010                 NO\n         LH    R1,H115                  LIMIT LENGTH\nPROC7010 DS    0H\n         CR    R4,R1                    WILL EXPANDED DATA FIT??\n         BL    PRT0000                  NO ... PRINT WHAT WE HAVE\n         MVC   0(8,R3),DSPLNAME         MOVE DATA ELEMENT NAME\n         MVI   8(R3),C':'               INSERT COLON\n         LA    R3,9(R3)                 NEW OUTPUT ADDRESS\n         UNPK  0(9,R3),DSPLADDR(5)      MOVE A BYTE\n         MVZ   0(8,R3),PROC70F          NULLIFY ZONES\n         TR    0(8,R3),PROC7TBL         TRANSLATE\n         MVI   8(R3),C' '               RESTORE BLANK\n         LA    R3,8(R3)                 NEXT OUTPUT ADDRESS\n         SR    R4,R1                    MINUS LENGTH USED\n         B     PROC0020                 NEXT DATA ELEMENT\nPROC70F  DC    9X'00'\nPROC7TBL DC    C'0123456789ABCDEF'\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*         PRINT                                                       *\n*                                                                     *\n*---------------------------------------------------------------------*\nPRT0000  DS    0H\n         PUT   DISPDCB,PLINE            PRINT DATA BUILT\n         AP    LINECT,P1                ADD 1 TO LINE COUNT\n         CLI   PLINE,C'0'               DOUBLE SPACE??\n         BNE   PRT0010                  NO\n         AP    LINECT,P1                ADD 1 TO LINE COUNT\nPRT0010  DS    0H\n         CP    LINECT,P65               PAGE FULL??\n         MVC   PLINE,PLINE-1            CLEAR PRINT LINE\n         BL    PRT0020                  NO\n         BAL   R10,HEADINGS             PRINT HEADING\nPRT0020  DS    0H\n         LA    R3,PRDATA                INITIALIZE DATA ADDRESS\n         LA    R4,124                   INITIALIZE LENGTH REMAINING\n         B     PROC0030                 RE-TRY LAST ELEMENT\nHEADINGS DS    0H\n         AP    PAGECT,P1                ADD 1 TO PAGE COUNT\n         MVC   PRPAGE,PAGEEDWD          MOVE PAGE EDIT WORD\n         ED    PRPAGE,PAGECT            EDIT PAGE COUNT\n         PUT   DISPDCB,HEADLINE         PRINT HEADING\n         ZAP   LINECT,P0                RESET LINE COUNT\n         BR    R10                      RETURN\nEXIT0000 DS    0H\n         PUT   DISPDCB,PLINE            PRINT DATA BUILT\n         AP    LINECT,P1                ADD 1 TO LINE COUNT\n         MVC   PLINE,PLINE-1            CLEAR PRINT LINE\n         CP    LINECT,P65               PAGE FULL??\n         BNH   EXIT0010                 NO\n         BAL   R10,HEADINGS             PRINT HEADING\nEXIT0010 DS    0H\n         L     R13,SAVE+4               RE-LOAD SAVE AREA POINTER\n         LM    R14,R12,12(R13)          RESTORE REGISTERS\n         SR    R15,R15                  RETURN CODE\n         BR    R14                      RETURN TO CALLER\n*---------------------------------------------------------------------*\n*                      DATA AREAS                                     *\n*---------------------------------------------------------------------*\n         LTORG\nSAVE     DC    9D'0'                 REGISTER SAVE AREA\nH2       DC    H'2'\nH6       DC    H'6'\nH9       DC    H'9'\nH11      DC    H'11'\nH12      DC    H'12'\nH15      DC    H'15'\nH115     DC    H'115'\nP0       DC    P'0'\nP1       DC    P'1'\nP65      DC    P'65'\nLINECT   DC    PL3'0'\nPAGECT   DC    PL3'0'\nPAGEEDWD DC    X'402020202120'\nSEQNBR   DC    PL4'0'\nSEQWORK  DC    CL8' '\nSEQEDWD  DC    X'4020202020202120'\nDCBFLAG  DC    X'00'\n$DCBOPEN EQU   X'80'\nHEADLINE DC    CL123'1SEQ NBR'\n         DC    C'PAGE'\nPRPAGE   DC    CL6' '\n         DC    C' '\nPLINE    DS    0CL132\nPRCC     DC    C'0'\nPRSEQ    DC    CL7' '\n         DC    C' '\nPRDATA   DC    CL124' '\n         SPACE\n*---------------------------------------------------------------------*\n*                      DCB'S                                          *\n*---------------------------------------------------------------------*\nDISPDCB  DCB   DSORG=PS,                                               +\n               RECFM=FBA,                                              +\n               LRECL=133,                                              +\n               DDNAME=DISPLAY,                                         +\n               MACRF=PM\n*---------------------------------------------------------------------*\n*                                                                     *\n*---------------------------------------------------------------------*\nDSPLDSCT DSECT\nDSPLNAME DS    CL8\nDSPLADDR DS    AL4\nDSPLTYPE DS    C\nDSPLDLEN DS    AL2\nDSPLLEN  EQU   *-DSPLDSCT\n*---------------------------------------------------------------------*\n*                      EQUATES                                        *\n*---------------------------------------------------------------------*\nR0       EQU   0                   . R\nR1       EQU   1                   .  E\nR2       EQU   2                   .   G\nR3       EQU   3                   .    I\nR4       EQU   4                   .     S\nR5       EQU   5                   .      T\nR6       EQU   6                   .       E\nR7       EQU   7                   .        R\nR8       EQU   8                   .\nR9       EQU   9                   .          E\nR10      EQU   10                  .           Q\nR11      EQU   11                  .            U\nR12      EQU   12                  .             A\nR13      EQU   13                  .              T\nR14      EQU   14                  .               E\nR15      EQU   15                  .                S\n         SPACE 2\n         END   DISPLAY\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "MACLIB": {"ttr": 769, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00U\\x01\\x02&\\x9f\\x01\\x02&\\x9f\\x16\\x16\\x01$\\x01$\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2002-09-26T00:00:00", "modifydate": "2002-09-26T16:16:55", "lines": 292, "newlines": 292, "modlines": 0, "user": "SBGOLOB"}, "text": "./ ADD NAME=DISPLAY  0100-02269-02269-1615-00291-00291-00000-SBGOLOB\n         MACRO\n&NAME    DISPLAY &DATA=\n.*--------------------------------------------------------------------*\n.*   Macro name:  DISPLAY                                             *\n.*                                                                    *\n.*   Purpose:  Provide a utility similar to the cobol 'EXHIBIT NAMED' *\n.*             command.  This allows an assembler programmer to       *\n.*             quickly display data in various formats for the        *\n.*             purpose of debugging or verifying program execution.   *\n.*             The use of this macro with the accompanying DISPLAY    *\n.*             module eliminates the need to code a new DCB, OPEN it, *\n.*             or format the data.                                    *\n.*                                                                    *\n.*             DISPLAYed output is double spaced between invocations  *\n.*             of the DISPLAY macro so multiple fields 'DISPLAY'ed    *\n.*             at one time are grouped together.  A sequence number   *\n.*             is also printed to aid in debugging.  You may DISPLAY  *\n.*             multiple data elements on each invocation.  If you     *\n.*             request more than can be printed on one line, as much  *\n.*             as can be printed without spanning a field will be     *\n.*             printed per line, single spaced between lines.  Data   *\n.*             elements will always be printed in the sequence they   *\n.*             appear in the arguement list.                          *\n.*                                                                    *\n.*             Output from a field will be:                           *\n.*                NAME:VALUE                                          *\n.*             Where NAME is either 1) The field name if a label was  *\n.*             coded, or 2) 'ITEMNNNN' if register notation was       *\n.*             used (NNNN is 1 for the first time, 2 for the second,  *\n.*             3 for the third, etc), or 3) 'userdata' if a character *\n.*             string was used.  Value will be the value in the       *\n.*             data element, the format is determined by the field    *\n.*             type.  Valid types and the output format are:          *\n.*                                                                    *\n.*              TYPE      FORMAT                                      *\n.*               B      Binary.  Each byte is translated to a string  *\n.*                      of eight 1'S and 0'S.  Length is required.    *\n.*                      Output length is 8 Times input length.        *\n.*                      Maximum length is 12.                         *\n.*                                                                    *\n.*               C      Character.  Unprintable characters will be    *\n.*                      Translated out to prevent data checks on the  *\n.*                      printer.  Length is required.  Output length  *\n.*                      is equal to source field length.  Maximum     *\n.*                      length is 115.                                *\n.*                                                                    *\n.*               F      Fullword.  Full-word value is converted to    *\n.*                      Decimal.  Output is 10 Digits, leading zeros  *\n.*                      suppressed, with floating leading negative    *\n.*                      (-) sign.                                     *\n.*                                                                    *\n.*               H      Halfword.  Half-word value is converted to    *\n.*                      decimal.  Output is 5 digits, leading zeros   *\n.*                      suppressed, with floating leading negative    *\n.*                      (-) sign.                                     *\n.*                                                                    *\n.*               R      Register contents.  Register contents are     *\n.*                      printed as 8 hex digits.                      *\n.*                                                                    *\n.*               P      Packed decimal.  Packed decimal value is      *\n.*                      printed as edited decimal value.  Output      *\n.*                      length is 2 times input length.  Number of    *\n.*                      digits is 2 times input length minus 1.       *\n.*                      Leading zeros will be suppressed.  Minus      *\n.*                      sign is floating.  Length is required.        *\n.*                      Maximum length is 15.                         *\n.*                                                                    *\n.*               X      Hex.  Each byte is printed as two hex digits. *\n.*                      Length is required.  Output length is 2 times *\n.*                      input length.  Maximum length is 57.          *\n.*                                                                    *\n.*               Character strings enclosed in quotes can also be     *\n.*               Coded.  These are treated just like character data.  *\n.*               The length is determined by the length between the   *\n.*               Enclosing quotes, imbedded quotes are not allowed.   *\n.*                                                                    *\n.*               Coding sequence is:                                  *\n.*                                                                    *\n.*               DISPLAY DATA=(ITEM1,TYPE1,LENGTH1,                   *\n.*                             ITEM2,TYPE2,LENGTH2,                   *\n.*                                       .                            *\n.*                                       .                            *\n.*                                       .                            *\n.*                                       )                            *\n.*                                                                    *\n.*               The 'ITEM' parameter may be:                         *\n.*                  1) A Label                                        *\n.*                  2) A register enclosed in parenthesis             *\n.*                  3) A Character string enclosed in quotes          *\n.*                                                                    *\n.*               THE 'TYPE' PARAMETER MAY BE:                         *\n.*                  B  for binary data                                *\n.*                  C  for character                                  *\n.*                  F  for fullword                                   *\n.*                  H  for halfword                                   *\n.*                  P  for packed decimal                             *\n.*                  X  for hex                                        *\n.*         or omitted on character strings  (TYPE 3)                  *\n.*                                                                    *\n.*                The 'length' may be                                 *\n.*                  1) length of source field in bytes                *\n.*                  2) a register enclosed in parenthesis             *\n.*         or omitted on halfwords, fullwords, or character strings.  *\n.*                                                                    *\n.*                                                                    *\n.*   **** Please note that all parameters are positional and ****     *\n.*   **** if any are omitted, such as lengths on halfwords   ****     *\n.*   **** or fullwords, code a comma to indicate its absense.****     *\n.*   ****                                                    ****     *\n.*   **** For example to code a display for two halfword     ****     *\n.*   **** fields use:                                        ****     *\n.*   ****          DISPLAY DATA=(HALF1,H,,HALF2,H,)          ****     *\n.*   ****                                                    ****     *\n.*                                                                    *\n.*         The print routine requires a JCL statement:                *\n.*             //DISPLAY DD SYSOUT=class                              *\n.*                                                                    *\n.*--------------------------------------------------------------------*\n         LCLA    &ITEMS,&SUB1,&SUB2,&SUB3,&MAX,&ERROR,&WORK\n         LCLC    &CURITEM,&CURTYPE,&CURLEN\n         LCLC    &I(100),&T(100),&L(100)\n&MAX     SETA    (N'&DATA/3)\n&SUB1    SETA    &MAX*3\n         AIF     (&SUB1 NE N'&DATA).ERR001\n&SUB1    SETA    1\n&ITEMS   SETA    1\n.TYPE000 ANOP\n&SUB2    SETA    &SUB1+1\n&SUB3    SETA    &SUB1+2\n&CURITEM SETC    '&DATA(&SUB1)'\n&CURTYPE SETC    '&DATA(&SUB2)'\n&CURLEN  SETC    '&DATA(&SUB3)'\n         AIF     ('&CURTYPE' EQ 'C').TYPE010\n         AIF     ('&CURTYPE' EQ 'F').TYPE020\n         AIF     ('&CURTYPE' EQ 'H').TYPE030\n         AIF     ('&CURTYPE' EQ 'P').TYPE040\n         AIF     ('&CURTYPE' EQ 'X').TYPE050\n         AIF     ('&CURTYPE' EQ 'B').TYPE060\n         AIF     ('&CURTYPE' EQ 'R').TYPE070\n         AIF     ('&CURITEM'(1,1) EQ '''').TYPE080\n         MNOTE   12,'INVALID DATA TYPE ''&CURITEM'' '\n&ERROR   SETA    1\n         AGO     .TYPE100\n.TYPE010 ANOP\n         AIF     ('&CURLEN'(1,1)  EQ '(').TYPE100\n         AIF     ('&CURLEN' GT '0').TYPE011\n         MNOTE   12,'CHARACTER DATA WITH LENGTH < 1 INVALID'\n&ERROR   SETA    1\n         AGO     .TYPE100\n.TYPE011 ANOP\n         AIF     ('&CURLEN' LT '116').TYPE100\n         MNOTE   12,'CHARACTER DATA WITH LENGTH > 115 INVALID'\n         AGO     .TYPE100\n.TYPE020 ANOP\n         MNOTE   'LENGTH IGNORED ON FULLWORD FIELDS'\n&CURLEN  SETC   '4'\n         AGO     .TYPE100\n.TYPE030 ANOP\n         MNOTE   'LENGTH IGNORED ON HALFWORD FIELDS'\n&CURLEN  SETC   '2'\n         AGO     .TYPE100\n.TYPE040 ANOP\n         AIF     ('&CURLEN'(1,1)  EQ '(').TYPE100\n         AIF     ('&CURLEN' GT '0').TYPE041\n         MNOTE   12,'PACKED DECIMAL WITH LENGTH < 1 INVALID'\n&ERROR   SETA    1\n         AGO     .TYPE100\n.TYPE041 ANOP\n         AIF     ('&CURLEN' LT '16').TYPE100\n         MNOTE   12,'PACKED DECIMAL WITH LENGTH > 15 INVALID'\n&ERROR   SETA    1\n         AGO     .TYPE100\n.TYPE050 ANOP\n         AIF     ('&CURLEN'(1,1)  EQ '(').TYPE100\n         AIF     ('&CURLEN' GT '0').TYPE051\n         MNOTE   12,'HEX DATA WITH LENGTH < 1 INVALID'\n&ERROR   SETA    1\n         AGO     .TYPE100\n.TYPE051 ANOP\n         AIF     ('&CURLEN' LT '58').TYPE100\n         MNOTE   12,'HEX DATA WITH LENGTH > 57 INVALID'\n&ERROR   SETA    1\n         AGO     .TYPE100\n.TYPE060 ANOP\n         AIF     ('&CURLEN'(1,1)  EQ '(').TYPE100\n         AIF     ('&CURLEN' GT '0').TYPE061\n         MNOTE   12,'BINARY DATA WITH LENGTH < 1 INVALID'\n&ERROR   SETA    1\n         AGO     .TYPE100\n.TYPE061 ANOP\n         AIF     (&CURLEN LT 13).TYPE100\n         MNOTE   12,'BINARY DATA WITH LENGTH > 12 INVALID'\n&ERROR   SETA    1\n         AGO     .TYPE100\n.TYPE070 ANOP\n         AIF     ('&CURITEM'(1,1) NE '(').TYPE07X\n         MNOTE   'LENGTH IGNORED ON REGISTER CONTENTS FIELDS'\n&CURLEN  SETC    '4'\n         AGO     .TYPE100\n.TYPE07X ANOP\n&ERROR   SETA    1\n         MNOTE   12,'REGISTER MUST BE ENCLOSED IN PARENTHESIS'\n         AGO     .TYPE100\n.TYPE080 ANOP\n         AIF    (K'&CURITEM LT 117).TYPE090\n         MNOTE   'SELF DEFINING TERM WITH LENGTH > 115 INVALID'\n&ERROR   SETA    1\n         AGO     .TYPE100\n.TYPE090 ANOP\n&WORK    SETA    K'&CURITEM-2\n&CURTYPE SETC    'C'\n&CURLEN  SETC    '&WORK'\n         MNOTE   'SELF DEFINING TERM TYPE AND LENGTH AUTOMATICALLY GENN+\n               ED'\n.TYPE100 ANOP\n&I(&ITEMS) SETC  '&CURITEM'\n&T(&ITEMS) SETC  '&CURTYPE'\n&L(&ITEMS) SETC  '&CURLEN'\n         AIF     (&ITEMS EQ &MAX).LBL0000\n&SUB1    SETA    &SUB1+3\n&ITEMS   SETA    &ITEMS+1\n         AGO     .TYPE000\n.LBL0000 ANOP\n         AIF     (T'&NAME EQ 'O').RELO000\n&NAME    DS      0H\n.RELO000 ANOP\n         AIF     (&ERROR EQ 1).EXIT000\n&ITEMS   SETA    1\n.RELO010 ANOP\n&CURITEM SETC    '&I(&ITEMS)'\n&CURLEN  SETC    '&L(&ITEMS)'\n         AIF     ('&CURITEM'(1,1) NE '(').RELO020\n&AWORK   SETA    K'&CURITEM-2\n&CWORK   SETC    '&CURITEM'(2,&AWORK)\n         STCM    &CWORK,15,A&SYSNDX&ITEMS\n         AGO     .RELO030\n.RELO020 ANOP\n         AIF     ('&CURITEM'(1,1) NE '''').RELO030\n         LA      R1,=C&CURITEM\n         STCM    R1,15,A&SYSNDX&ITEMS\n.RELO030 ANOP\n         AIF     ('&CURLEN'(1,1)  NE '(').RELO040\n&AWORK   SETA    K'&CURLEN-2\n&CWORK   SETC    '&CURLEN'(2,&AWORK)\n         STCM    &CWORK,3,L&SYSNDX&ITEMS\n.RELO040 ANOP\n         AIF     (&ITEMS EQ &MAX).GEN0000\n&ITEMS   SETA    &ITEMS+1\n         AGO     .RELO010\n.GEN0000 ANOP\n         B       L&SYSNDX\n&ITEMS   SETA    1\n.GEN0010 ANOP\n&CURITEM SETC    '&I(&ITEMS)'\n&CURTYPE SETC    '&T(&ITEMS)'\n&CURLEN  SETC    '&L(&ITEMS)'\n         AIF     ('&CURITEM'(1,1) EQ '(').GEN0020\n         AIF     ('&CURITEM'(1,1) EQ '''').GEN0030\nN&SYSNDX&ITEMS   DC      CL8'&CURITEM'        ITEM NAME\nA&SYSNDX&ITEMS   DC      AL4(&CURITEM)        ITEM ADDRESS\n         AGO     .GEN0040\n.GEN0020 ANOP\nN&SYSNDX&ITEMS   DC      CL8'ITEM&ITEMS'      ITEM ID\nA&SYSNDX&ITEMS   DC      AL4(0)               ITEM ADDRESS\n         AGO     .GEN0040\n.GEN0030 ANOP\nN&SYSNDX&ITEMS   DC      CL8'USERDATA'        ITEM NAME\nA&SYSNDX&ITEMS   DC      AL4(0)               ITEM ADDRESS\n.GEN0040 ANOP\n                 DC      CL1'&CURTYPE'        DATA TYPE\n         AIF     ('&CURLEN'(1,1) EQ '(').GEN0045\nL&SYSNDX&ITEMS   DC      AL2(&CURLEN)         DATA LENGTH\n         AGO     .GEN0047\n.GEN0045 ANOP\nL&SYSNDX&ITEMS   DC      AL2(0)               DATA LENGTH\n.GEN0047 ANOP\n         AIF     (&ITEMS EQ &MAX).GEN0050\n&ITEMS   SETA    &ITEMS+1\n         AGO     .GEN0010\n.GEN0050 ANOP\nV&SYSNDX         DC      VL4(DISPLAY)         DISPLAY MODULE ADDRESS\nL&SYSNDX DS      0H\n         LA      R1,N&SYSNDX.1                SET PARM LIST ADDRESS\n         ICM     R15,15,V&SYSNDX              DISPLAY ENTRY POINT\n         BALR    R14,R15                      LINK TO DISPLAY MODULE\n         MEXIT\n.ERR001  ANOP\n      MNOTE   12,'INVALID ''DATA'' PARAMETER, COUNT NOT MULTIPLE OF 3'\n.EXIT000 ANOP\n         MNOTE   'ERRORS DETECTED, GEN ABORTED'\n         MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT592/FILE592.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT592", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}