{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012243000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 117572, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 8, "INMDSNAM": "CBT.V500.FILE518.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE518.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x03\\x12'", "DS1TRBAL": "b'a\\xc0'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x03\\xde\\x00\\x00\\x03\\xde\\x00\\x03\\x00\\x04'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04H\\x00\\x00\\x01\\x06\\x10/\\x01\\x06\\x10/\\x11A\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf2@@@'", "ispf": {"version": "04.72", "flags": 0, "createdate": "2006-04-12T00:00:00", "modifydate": "2006-04-12T11:41:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-472"}, "text": "REGULAR CBT TAPE - VERSION 472    FILE:  518\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT472.FILE518\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 14 MEMBERS COUNTED; CUMULATIVE SIZE IS 734 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   04/12/06    11:41:47    GMT-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$README": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x007\\x01\\x040o\\x01\\x06\\x10/\\t%\\x00?\\x002\\x00\\x00\\xe4\\xf0\\xf6\\xe3\\xf0\\xf3@@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "2004-11-01T00:00:00", "modifydate": "2006-04-12T09:25:37", "lines": 63, "newlines": 50, "modlines": 0, "user": "U06T03"}, "text": "Sam Knutson's utilities\n\n   Here are some odds and ends that I wrote or got from someone\n   else that have yet to find a better home on the CBT Tape.\n\n   Contact me at sam@knutson.org if you have suggestions or a\n   modification to one of these programs to share.\n\n   The contents of this collection are to be used at your own\n   risk and are not supported by me or my employer's past or present.\n   All are public domain with no rights reserved.\n\n   AUXBOOST\n   This program will modify the in storage defaults used by ASM to\n   determine when an AUX STORAGE SHORTAGE exists.  It is based on\n   IRA200E RESOLVE zap job by Thierry Falissard in CBT Tape file 432.\n   This memory zap allows you to change the 70% and 85 % thresholds to\n   more aggressive values : 90% and 95 %.\n\n   IEFUSIG                                        ADD April 2006\n   IEFUSI exit I am currently using derived from Mike Loos IEFUSI\n   exit in file 425.  I added code to calculate the maximum REGION\n   above as well as below and it either provides MAX-BELOW/DEFAULT ABOVE\n   or if you code REGION=0M MAX-BELOW/MAX-ABOVE.  I need to get back\n   to this and add some code to provide MEMLIMIT which I currently\n   specify in SMFPRMxx in PARMLIB.\n\n   HZSRACF                                        ADD April 2006\n   Very simple ISPF edit macro to filter the output of the\n   RACF_SENSITIVE_RESOURCES check output from the Health Checker\n   for z/OS.\n\n   PUTPARM\n   Simple utility posted by Perry Winter in 1993 on IBM-MAIN\n   which provides very nice generation of control cards on the fly\n   from a PARM.  This program writes 80 character records based on user\n   supplied parm.  All symbolics used in parm are expanded before\n   execution of program.  The semicolon is used as a record separator in\n   the parm therefore several 80 character records can be generated from\n   one 100 char parm field. The output records are written on ddname\n   parm where the lrecl is always 80 characters.  The user can select\n   any blocking factor on the parm dd card.  The output file can be\n   concatenated before or after any 80 char LRECL data file in the job\n   stream.\n\n   SC\n   Simple edit macro to SUBMIT a job then CANCEL out of the EDIT or VIEW\n   of the current member.\n\n   SUBX\n   REXX edit macro to submit the current job to a dynamically allocated\n   internal reader.  This avoids space abends using the IBM SUBMIT\n   command and can be used to bypass IKJEFF10 the TSO/E SUBMIT exit.\n\n   MAKEXMI & MAKEXMIU\n   XMIT a data set to a data set suffixed .XMI or to a file prefixed with\n   your TSO userid and suffixed .XMI\n\n   ME\n   Set your TSO profile the same as your userid\n\n   NOTME\n   Set your TSO profile to null\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@FILE518": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04H\\x00\\x00\\x01\\x06\\x10/\\x01\\x06\\x10/\\x11A\\x00L\\x00L\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf2@@@'", "ispf": {"version": "04.72", "flags": 0, "createdate": "2006-04-12T00:00:00", "modifydate": "2006-04-12T11:41:00", "lines": 76, "newlines": 76, "modlines": 0, "user": "CBT-472"}, "text": "//***FILE 518 contains Sam Knutson's Utility collection.            *   FILE 518\n//*                                                                 *   FILE 518\n//*           email:   sam@knutson.org                              *   FILE 518\n//*                                                                 *   FILE 518\n//*      Sam Knutson's utilities:                                   *   FILE 518\n//*                                                                 *   FILE 518\n//*      Here are some odds and ends that I wrote or got from       *   FILE 518\n//*      someone else that have yet to find a better home on        *   FILE 518\n//*      the CBT Tape.                                              *   FILE 518\n//*                                                                 *   FILE 518\n//*      Contact me at sam@knutson.org if you have                  *   FILE 518\n//*      suggestions or a modification to one of these              *   FILE 518\n//*      programs to share.                                         *   FILE 518\n//*                                                                 *   FILE 518\n//*      The contents of this collection are to be used at          *   FILE 518\n//*      your own risk and are not supported by me or my            *   FILE 518\n//*      employers past or present.  All are public domain          *   FILE 518\n//*      with no rights reserved.                                   *   FILE 518\n//*                                                                 *   FILE 518\n//*    Sam Knutson's utilities                                      *   FILE 518\n//*                                                                 *   FILE 518\n//*      Here are some odds and ends that I wrote or got from       *   FILE 518\n//*      someone else that have yet to find a better home on        *   FILE 518\n//*      the CBT Tape.                                              *   FILE 518\n//*                                                                 *   FILE 518\n//*      Contact me at sam@knutson.org if you have suggestions      *   FILE 518\n//*      or a modification to one of these programs to share.       *   FILE 518\n//*                                                                 *   FILE 518\n//*      The contents of this collection are to be used at          *   FILE 518\n//*      your own risk and are not supported by me or my            *   FILE 518\n//*      employer's past or present.  All are public domain         *   FILE 518\n//*      with no rights reserved.                                   *   FILE 518\n//*                                                                 *   FILE 518\n//*      AUXBOOST                                                   *   FILE 518\n//*      This program will modify the in storage defaults used      *   FILE 518\n//*      by ASM to determine when an AUX STORAGE SHORTAGE           *   FILE 518\n//*      exists.  It is based on IRA200E RESOLVE zap job by         *   FILE 518\n//*      Thierry Falissard in CBT Tape file 432.  This memory       *   FILE 518\n//*      zap allows you to change the 70% and 85 % thresholds       *   FILE 518\n//*      to more aggressive values : 90% and 95 %.                  *   FILE 518\n//*                                                                 *   FILE 518\n//*      PUTPARM                                                    *   FILE 518\n//*      Simple utility posted by Perry Winter in 1993 on           *   FILE 518\n//*      IBM-MAIN which provides very nice generation of            *   FILE 518\n//*      control cards on the fly from a PARM.  This program        *   FILE 518\n//*      writes 80 character records based on user supplied         *   FILE 518\n//*      parm.  All symbolics used in parm are expanded before      *   FILE 518\n//*      execution of program.  The semicolon is used as a          *   FILE 518\n//*      record separator in the parm therefore several 80          *   FILE 518\n//*      character records can be generated from one 100 char       *   FILE 518\n//*      parm field. The output records are written on ddname       *   FILE 518\n//*      parm where the lrecl is always 80 characters.  The         *   FILE 518\n//*      user can select any blocking factor on the parm dd         *   FILE 518\n//*      card.  The output file can be concatenated before or       *   FILE 518\n//*      after any 80 char LRECL data file in the job stream.       *   FILE 518\n//*                                                                 *   FILE 518\n//*      SC                                                         *   FILE 518\n//*      Simple edit macro to SUBMIT a job then CANCEL out of       *   FILE 518\n//*      the EDIT or VIEW of the current member.                    *   FILE 518\n//*                                                                 *   FILE 518\n//*      SUBX                                                       *   FILE 518\n//*      REXX edit macro to submit the current job to a             *   FILE 518\n//*      dynamically allocated internal reader.  This avoids        *   FILE 518\n//*      space abends using the IBM SUBMIT command and can be       *   FILE 518\n//*      used to bypass IKJEFF10 the TSO/E SUBMIT exit.             *   FILE 518\n//*                                                                 *   FILE 518\n//*      MAKEXMI & MAKEXMIU                                         *   FILE 518\n//*      XMIT a data set to a data set suffixed .XMI or to a        *   FILE 518\n//*      file prefixed with your TSO userid and suffixed .XMI       *   FILE 518\n//*                                                                 *   FILE 518\n//*      ME                                                         *   FILE 518\n//*      Set your TSO profile the same as your userid               *   FILE 518\n//*                                                                 *   FILE 518\n//*      NOTME                                                      *   FILE 518\n//*      Set your TSO profile to null                               *   FILE 518\n//*                                                                 *   FILE 518\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AUXBOOS$": {"ttr": 523, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x01\\x14_\\x01\\x01\\x14_\\x124\\x00\\x1a\\x00\\x1a\\x00\\x00\\xe6\\xe2\\xc2\\xc7@@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2001-05-25T00:00:00", "modifydate": "2001-05-25T12:34:00", "lines": 26, "newlines": 26, "modlines": 0, "user": "WSBG"}, "text": "   This program will modify the in storage defaults used by\n   ASM to determine when an AUX STORAGE SHORTAGE exists.\n   It is based on IRA200E RESOLVE zap job by Thierry Falissard\n   in CBT Tape file 432.  This memory zap allows you to change\n   the 70% and 85 % thresholds to more aggressive values : 90%\n   and 95 %.\n\n   This program makes a direct update to memory after only\n   minimal sanity checks.  The variable changed is an IBM internal\n   NOT a programming interface. USE ENTIRELY AT YOUR OWN RISK!\n   Program is placed into the public domain and is property of the\n   free world:-)\n\n   Requires APF authorization lacking this abend 047\n\n   IRA200E AUXILIARY STORAGE SHORTAGE\n   70% OF ALL AVAILABLE SLOTS IN THE SYSTEM ARE IN USE\n   THE SYSTEM REJECTS LOGON, MOUNT, AND START COMMANDS UNTIL THE\n   SHORTAGE IS RELIEVED\n\n   IRA201E CRITICAL AUXILIARY STORAGE SHORTAGE\n   85% OF ALL AVAILABLE SLOTS IN THE SYSTEM ARE IN USE\n\n   ISRDDN COMMAND TO DISPLAY THE VALUE : B 0.+10?+25C?+C?+68\n\n  Sam Knutson ..................................   May 20, 2001\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AUXBOOST": {"ttr": 525, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01\\x14_\\x01\\x01\\x14_\\x123\\x00F\\x00F\\x00\\x00\\xd2\\xd5\\xe4\\xe3\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-05-25T00:00:00", "modifydate": "2001-05-25T12:33:00", "lines": 70, "newlines": 70, "modlines": 0, "user": "KNUTSON"}, "text": "         TITLE 'AUXBOOST -- ADJUST ASM DEFAULTS FOR IRA200E'\n*======================================================================\n*\n*    This program will modify the in storage defaults used by\n*    ASM to determine when an AUX STORAGE SHORTAGE exists.\n*    It is based on IRA200E RESOLVE zap job by Thierry Falissard\n*    in CBT Tape file 432.  This memory zap allows you to change\n*    the 70% and 85 % thresholds to more aggressive values : 90%\n*    and 95 %.\n*\n*    This program makes a direct update to memory after only\n*    minimal sanity checks.  The variable changed is an IBM internal\n*    NOT a programming interface. USE ENTIRELY AT YOUR OWN RISK!\n*    Program is placed into the public domain and is property of the\n*    free world:-)\n*\n*    Requires APF authorization lacking this abend 047\n*\n*    IRA200E AUXILIARY STORAGE SHORTAGE\n*    70% OF ALL AVAILABLE SLOTS IN THE SYSTEM ARE IN USE\n*    THE SYSTEM REJECTS LOGON, MOUNT, AND START COMMANDS UNTIL THE\n*    SHORTAGE IS RELIEVED\n*\n*    IRA201E CRITICAL AUXILIARY STORAGE SHORTAGE\n*    85% OF ALL AVAILABLE SLOTS IN THE SYSTEM ARE IN USE\n*\n*    ISRDDN COMMAND TO DISPLAY THE VALUE : B 0.+10?+25C?+C?+68\n*\n*   Sam Knutson ..................................   May 20, 2001\n*======================================================================\n*\nAUXBOOST CSECT\nAUXBOOST AMODE 31\nAUXBOOST RMODE ANY\n         BAKR  R14,R0\n         LR    R12,R15\n         USING AUXBOOST,R12\n         MODESET  MODE=SUP            Will need later checks APF now\n         L     R1,CVTPTR              @ CVT\n         L     R1,CVTOPCTP-CVT(R1)    @ OF (SRM) CONTROL TABLE    RMCT\n         L     R1,RMCTMCT-RMCT(R1)    @ OF (ASM) STG CONTROL TBL  MCT\n         USING MCT,R1                 ## MCT\n         L     R0,IBMDFLTS            Check against\n         LA    R2,MCCASMT1             this  A(MCCASMT1)\n         C     R0,0(,R2)                using IBM defaults?\n         BNE   NOGOOD            BIF No , Something went haywire\n         L     R3,NEWDFLTS           get the new defaults\n         SPKA  0                   Need system key to update this\n         ST    R3,MCCASMT1            customize in core\n         SPKA  X'80'               must be done get back to Key 8\n         WTO  'AUXBOOST RAISED ASM DEFAULTS FOR IRA200E'\n         SLR   R15,R15              insure happy RC=00\n         B     EXIT                 Get on with leaving then\nNOGOOD   DS 0H\n         WTO  'AUXBOOST ALREADY DONE OR COULD NOT VERIFY STORAGE'\n         LA    R15,16             set a bad RC\n*\nEXIT     PR    ,\nIBMDFLTS DC    0F\nIBMASMT1 DC    H'70' -             FIRST AUX SHORTAGE THRESHOLD\nIBMASMT2 DC    H'85' -             SECOND AUX SHORTAGE THRESHOLD\nNEWDFLTS DC    0F\nNEWASMT1 DC    H'90' -             FIRST AUX SHORTAGE THRESHOLD\nNEWASMT2 DC    H'95' -             SECOND AUX SHORTAGE THRESHOLD\n         IRARMCT                   RMCT\n         IHAPSA                    PSA\n         CVT DSECT=YES             CVT\n         IRAMCT                    MCT\n         YREGS\n         END AUXBOOST\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "HZSRACF": {"ttr": 527, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00G\\x01\\x06\\x04/\\x01\\x06\\x04/ \\x08\\x00\\x0e\\x00\\x0e\\x00\\x00\\xe4\\xf0\\xf6\\xe3\\xf0\\xf3@@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "2006-02-11T00:00:00", "modifydate": "2006-02-11T20:08:47", "lines": 14, "newlines": 14, "modlines": 0, "user": "U06T03"}, "text": "         /*************************************************************/\n         /* EXCLUDE ALL NON-ERROR DATA SETS IN HEALTH CHECKER FOR ZOS */\n         /* RACF_SENSITIVE_RESOURCES CHECK OUTPUT.                    */\n         /* SJK                                                       */\n         /*************************************************************/\nISREDIT MACRO\nISREDIT EXCLUDE ALL\nISREDIT FIND 'V' 1 ALL\nISREDIT FIND 'E' 1 ALL\nISREDIT FIND 'VOL' FIRST\nISREDIT FIND '---' FIRST\nISREDIT DELETE ALL X\nISREDIT FIND 'E' 1 ALL\nEXIT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEFUSIG": {"ttr": 529, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0b\\x00\\x08\\x01\\x050\\x0f\\x01\\x053_\\tS\\x01 \\x01,\\x00\\x00\\xe4\\xf0\\xf6\\xe3\\xf0\\xf3@@@@'", "ispf": {"version": "01.11", "flags": 0, "createdate": "2005-10-27T00:00:00", "modifydate": "2005-12-01T09:53:08", "lines": 288, "newlines": 300, "modlines": 0, "user": "U06T03"}, "text": "         TITLE 'IEFUSI - SMF Step Initiation Exit'\n***********************************************************************\n*                                                                     *\n*             Module Name = IEFUSI                                    *\n*                                                                     *\n*             Descriptive Name = SMF Step Initiation Exit             *\n*                                                                     *\n*             Function =                                              *\n*                Exit allows installation to control job step         *\n*                region size.                                         *\n*                                                                     *\n* PVT:                                                                *\n*        We provide all tasks with the maximum available below the    *\n*        line less a safety allowance for RTM to prevent programs     *\n*        from using every last byte of storage and being terminated   *\n*        at END OF MEMORY (S0F9,S40D) by MVS if the MVS Recovery      *\n*        Termination Manager cannot obtain enough high private to     *\n*        do task level termination.                                   *\n*                                                                     *\n* EPVT:                                                               *\n*        For REGION=0K users we provide the maximum above all others  *\n*        are given a very generous 1G EPVT allocation.                *\n*                                                                     *\n*                                                                     *\n*                The value of the increment used in this exit is the  *\n*                difference between the region limit and the region   *\n*                size (below the line) and is set to 512K, i.e. the   *\n*                region limit = the region size + 512K  Above the     *\n*                line the same logic is applied only the cushion      *\n*                is set to 10M                                        *\n*                                                                     *\n*                Operation =                                          *\n*                   Save registers and establish addressability       *\n*                   If subsystem is OMVS, get out without changing    *\n*                   anything.                                         *\n*                   Get some storage to work in                       *\n*                   If region request is = 0 then set the region to   *\n*                       the maximum available below and above         *\n*                   If region request is anything else then set the   *\n*                       the maximum available below and 1G above.     *\n*                   Free the storage                                  *\n*                   Restore registers                                 *\n*                   Exit                                              *\n*                                                                     *\n***********************************************************************\n***********************************************************************\n*                                                                     *\n*              Notes =                                                *\n*                                                                     *\n*                 Register conventions = standard conventions.        *\n*                    Register  0       = not used                     *\n*                    Register  1       = Parameter list pointer       *\n*                    Register  2       = Work Reg / addr of CVT       *\n*                    Register  3       = Work Reg / addr of GDA       *\n*                    Register  4       = Work Reg / VSPL addressabilty*\n*                    Register  5       = Work Reg                     *\n*                    Registers 6       = not used                     *\n*                    Registers 7       = Work Reg                     *\n*                    Register  8       = Work Reg / SIPL addressabilty*\n*                    Registers 9 - 11  = not used                     *\n*                    Register  12      = Base Register                *\n*                    Register  13      = Save area pointer            *\n*                    Register  14      = Return                       *\n*                    Register  15      = Entry point address and      *\n*                                        Return code Register         *\n*                                                                     *\n*             Macros =                                                *\n*                SAVE, RETURN, STORAGE, YREGS                         *\n*                                                                     *\n*             Mapping macros used =                                   *\n*                CVT, IHAGDA                                          *\n*                                                                     *\n*             Assembler options = LIST,RENT                           *\n*                                                                     *\n*             Binder options = LET,LIST,XREF,RENT,REUS,REFR,AC=1      *\n*                                                                     *\n*                                                                     *\n*             Change activity =                                       *\n*                06/27/2000  Written.                           MJL.  *\n*                10/27/2005  rewrite for GEICO                  SJK.  *\n*                12/01/2005  dflt max PVT <16M few jobs S878-10 SJK.  *\n*                                                                     *\n***********************************************************************\n***********************************************************************\n*        Initialization\n***********************************************************************\nIEFUSI   CSECT ,                       SMF Step Initiation Exit\nIEFUSI   AMODE 31\nIEFUSI   RMODE ANY\n         SAVE  (14,12),,IEFUSI*GEICO*&SYSDATE*&SYSTIME\n*                                      Save Registers\n         LR    R12,R15                 R12 - Base Register\n         USING IEFUSI,R12              Establish addressability\n         LR    R8,R1                   Preserve ptr to parms\n         USING SIPLBEGN,R8             Establish addressability to SIPL\n         SR    R15,R15                 Set default return code = 0\n*\n*        See what we can do before we get any storage.... not much\n*\n         L     R4,SIPLSSN              Address of the subsytem name\n         CLC   0(R4),OMVS              Is it OMVS?\n         BE    RETURNQ                 Yes, quick return\n*FALL-THRU to  GETSTOR                 Proceed to normal processing\n*\nGETSTOR  EQU   *\n         LA    R4,WORKLEN\n         STORAGE OBTAIN,LENGTH=(R4),LOC=ANY\n*                                      GETMAIN dynamic storage\n         ST    R13,4(R1)               Store address of prev savearea\n*                                      in current savearea\n         ST    R1,8(R13)               Store address of current\n*                                      savearea in prev savearea\n         LR    R13,R1                  R13 = Address of GETMAINed area\n         USING WORKAREA,R13            Establish addressability to\n*                                      workarea\n*\n*        This code obtains the value for the maximum region available\n*        below the line\n*\n         L     R2,16                   Address of CVT\n         USING CVT,R2\n         L     R3,CVTGDA               Address of Global Data Area\n         DROP  R2                      ## CVT\n         USING GDA,R3\n         L     R2,GDAPVTSZ             Max storage size below 16M\n         ST    R2,MAXBELOW             Save it for region limit\n         S     R2,DFTINCR              Save room for LSQA\n         ST    R2,MAXREGSZ             Save it for region size\n*\n*        This code obtains the value for the maximum region available\n*        above the line\n*\n         L     R2,GDAEPVTS             Max storage size above 16M\n         ST    R2,MAXABOVE             Save it for region limit\n         S     R2,DFTINCRE             Save room for ELSQA\n         ST    R2,MAXEREGSZ            Save it for EPVT region size\n         DROP  R3                      ## GDA\n*\n***********************************************************************\n*        Requested region size checking\n***********************************************************************\n*\n* PVT:\n*        We provide all tasks with the maximum available below the\n*        line less a safety allowance for RTM to prevent programs\n*        from using every last byte of storage and being terminated\n*        at END OF MEMORY (S0F9,S40D) by MVS if the MVS Recovery\n*        Termination Manager cannot obtain enough high private to\n*        do task level termination.\n* EPVT:\n*        For REGION=0K users we provide the maximum above all others\n*        are given a very generous 1G EPVT allocation.\n*\nCHKREGN  DS    0H\n         L     R4,SIPLVSM              R4 = address if VSM parm list\n         USING VSPLBEGN,R4             Establish addressability to\n*                                      VSM parameter list DSECT\n         OI    VSPLFLAG,X'C0'          Turn on bit 0 TO indicate that\n*                                      IEFUSI has set region values\n*                                      and bit 1 to indicate that the\n*                                      system should not check for the\n*                                      availability of the requested\n*                                      region size.\n*\n*        We are checking for REGION=0\n*        If found, the region will be set to the maximum available\n*        below and to the maximum available above.\n*\n         L     R5,VSPLREGR             Geg the requested region size\n         LTR   R5,R5                   Check for REGION=0\n         BZ    LOADMAX                 Go load default maximums\n*\n*        Otherwise proceed to assign MAX BELOW & 1G ABOVE\n*\nLOADSTD  EQU    *\n         MVC   VSPLGETB,MAXBELOW       Load max limit below\n         MVC   VSPLREGB,MAXREGSZ       Load max region below\n         MVC   VSPLGETA,DFTABOVE       Load default limit above\n         MVC   VSPLREGA,DFTABOVE       Load default region avove\n         B     FINISH\nLOADMAX  EQU   *\n         MVC   VSPLGETB,MAXBELOW       Load max limit below\n         MVC   VSPLREGB,MAXREGSZ       Load max region below\n         MVC   VSPLGETA,MAXABOVE       Load max limit above\n         MVC   VSPLREGA,MAXEREGSZ      Load max region above\n         B     FINISH\n***********************************************************************\n*        Wrap things up and return\n***********************************************************************\nFINISH   DS    0H\n         LR    R4,R15                  R4 - Save the return code\n         LR    R7,R13                  R7 - Save address of WORKAREA\n         L     R13,4(R13)              Restore Register 13\n         LA    R8,WORKLEN              R8 - Length of WORKAREA\n         STORAGE RELEASE,ADDR=(R7),LENGTH=(R8)\n*                                      Free the dynamic storage\n         LR    R15,R4                  R15 - Restore the return code\nRETURNQ  EQU   *                       Quick return\n         RETURN (14,12),,RC=(15)       Return\n***********************************************************************\n*        CONSTANTS\n***********************************************************************\nDFTINCR  DC    A(512*1024)     512K    Default cushion for LSQA, etc.\nDFTINCRE DC    A(10*1024*1024) 10M     Default cushion for ELSQA, etc.\nDFTABOVE DC    A(1024*1024*1024) 1G    Default region size above 16M\nOMVS     DC    CL4'OMVS'               OMVS Subsystem name\n***********************************************************************\n*        REGISTER EQUATES\n***********************************************************************\n         YREGS\n         LTORG\n***********************************************************************\n*        IEFUSI input parameter list\n***********************************************************************\nSIPLBEGN DSECT\nSIPLCEPL DS    F                       Addr - Common SMF exit parm addr\nSIPLSTEP DS    F                       Addr - 8 byte job step name\nSIPLPGM  DS    F                       Addr - 8 byte program name\nSIPLACCT DS    F                       Addr - job step accting info\nSIPLVSM  DS    F                       Addr - VSM parameter list\nSIPLSRM  DS    F                       Addr - performance group number\n*                                             and V=R flag\nSIPLDSP  DS    F                       Addr - Dataspace, Hiperspace,\n*                                             And data sharing defaults\nSIPLSSN  DS    F                       Addr - Subsystem name\n***********************************************************************\n*        VSM parameter list\n***********************************************************************\nVSPLBEGN DSECT\nVSPLFLAG DS    F                       VSM flag word contains:\n*\n*              BIT 0  ---------------  On - IEFUSI set region values\n*                                      Off - region values not set\n*              BIT 1  ---------------  On - VSM not to check for avail-\n*                                           ability of requested free\n*                                           space below 16 Meg line\n*                                      Off - VSM is to check for avail-\n*                                           ability of requested free\n*                                           space below 16 Meg line\n*              BIT 2  ---------------  On - VSM not to check for avail-\n*                                           ability of requested free\n*                                           space above 16 Meg line\n*                                      Off - VSM is to check for avail-\n*                                           ability of requested free\n*                                           space above 16 Meg line\n*              BITS 3-31  -----------  Reserved\n*\nVSPLREGR DS    F                       Region size requested\n*\n*                                      On entry to IEFUSI the following\n*                                      4 words are set to X'FFFFFFFF'\n*\nVSPLGETB DS    F                       Getmain linit value below 16 Meg\nVSPLREGB DS    F                       Region size below 16 Meg\nVSPLGETA DS    F                       Getmain limit value above 16 Meg\nVSPLREGA DS    F                       Region size above 16 Meg\n*\nDSPBEGN  DSECT                         Default values for:\nDSPDFTSZ DS    F                       Data and Hiper space size in\n*                                      Blocks of 4K.  IBM Dft = 956K\n*                                      X'000000EF' * 4K\nDSPMAXSZ DS    F                       Maximum combined size for all\n*                                      user key Data and Hiper spaces.\n*                                      IBM default is (2**24)-1 MB.\nDSPMAXNO DS    F                       Maximum number of user key Data\n*                                      and Hiper spaces.  IBM default\n*                                      is (2**31)-1.\nDSPMAXSH DS    F                       Maximum number of source and\n*                                      target shafed pages usable at\n*                                      one time by problem state users\n*                                      IBM default is 32.\n*\nIEFUSI   CSECT\n***********************************************************************\n*        Dynamic storage area\n***********************************************************************\nWORKAREA DSECT\nSAVEAREA DS    18F                     IEFUSI save area\nWORK     DS    CL512                   Work Area\nMAXBELOW DS    F                       Maximum storage available < 16M\nMAXREGSZ DS    F                       Maximum region available < 16M\nMAXABOVE DS    F                       Maximum storage available > 16M\nMAXEREGSZ DS    F                      Maximum region available > 16M\nWORKLEN  EQU   *-WORKAREA\n         PRINT NOGEN\n         CVT   DSECT=YES\n         IHAGDA\n         END   IEFUSI\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "MAKEXMI": {"ttr": 772, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x00\\x01\\x040o\\x01\\x040o\\x12\\x04\\x00\\x11\\x00\\x11\\x00\\x00\\xd2\\xd5\\xe4\\xe3\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "2004-11-01T00:00:00", "modifydate": "2004-11-01T12:04:00", "lines": 17, "newlines": 17, "modlines": 0, "user": "KNUTSON"}, "text": "/* REXX MAKEXMI */\n/* Xmit PDS into data set for FTP             */\n\n PARSE UPPER ARG dsn\n @dsn = dsn\n @dsn2 = STRIP(@dsn,B,\"'\")\nsay 'Processing' @dsn 'into XMIT format'\n\nAddress \"TSO\"\n     \"XMIT MVS.IBMUSER\",\n      \"PDS\",\n      \"NOLOG\",\n      \"SYSOUT(X)\",\n      \"DATASET(\" || @dsn || \")\",\n      \"OUTDATASET('\" || @dsn2 || \".XMI')\"\n\nReturn 0\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "MAKEXMIU": {"ttr": 774, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00\\x00\\x01\\x040o\\x01\\x040o\\x12\\x04\\x00\\x11\\x00\\x11\\x00\\x00\\xd2\\xd5\\xe4\\xe3\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "2004-11-01T00:00:00", "modifydate": "2004-11-01T12:04:00", "lines": 17, "newlines": 17, "modlines": 0, "user": "KNUTSON"}, "text": "/* REXX MAKEXMIU */\n/* Xmit PDS into data set for FTP with userid prefix */\n/* Sam Knutson ............................ April, 2000 */\n\n PARSE UPPER ARG dsn\n @dsn = dsn\n @dsn2 = STRIP(@dsn,B,\"'\")\n @who = sysvar(SYSUID)\nsay 'Processing' @dsn 'into XMIT format'\n\nAddress \"TSO\"\n     \"XMIT MVS.IBMUSER\",\n      \"PDS\",\n      \"SYSOUT(X)\",\n      \"DATASET(\" || @dsn || \")\",\n      \"OUTDATASET('\" || @who || '.' || @dsn2 || \".XMI')\"\nReturn rc\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ME": {"ttr": 776, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x040o\\x01\\x040o\\x12\\x04\\x00\\x03\\x00\\x03\\x00\\x00\\xd2\\xd5\\xe4\\xe3\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-11-01T00:00:00", "modifydate": "2004-11-01T12:04:00", "lines": 3, "newlines": 3, "modlines": 0, "user": "KNUTSON"}, "text": "CONTROL LIST\nWRITE YOUR PREFIX WAS &SYSPREF\nPROFILE PREFIX(&SYSUID)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "NOTME": {"ttr": 778, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x040o\\x01\\x040o\\x12\\x04\\x00\\x03\\x00\\x03\\x00\\x00\\xd2\\xd5\\xe4\\xe3\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-11-01T00:00:00", "modifydate": "2004-11-01T12:04:00", "lines": 3, "newlines": 3, "modlines": 0, "user": "KNUTSON"}, "text": "CONTROL LIST\nWRITE YOUR PREFIX WAS &SYSPREF\nPROFILE NOPREFIX\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PUTPARM": {"ttr": 780, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x01\\x02\\x05\\x0f\\x01\\x02\\x05\\x0f\\x13&\\x00t\\x00l\\x00\\x00\\xc3\\xe2\\xe2\\xd1\\xd2@@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2002-02-19T00:00:00", "modifydate": "2002-02-19T13:26:00", "lines": 116, "newlines": 108, "modlines": 0, "user": "CSSJK"}, "text": "* From: Perry Winter (PWINTER@UNCMVS.OIT.UNC.EDU)\n* Subject: Re: Symbolic parameter substitution\n* Newsgroups: bit.listserv.ibm-main\n* Date: 1993-10-07 07:56:04 PST\n*\n* // EXEC ASMXCL,MEM=PUTPARM\n* //C.SYSIN  DD  *\n*\nPUTPARM CSECT                                                       SJK\n         SAVE  (14,12)              STANDARD LINKAGE CONVENTION BASE12\n         LR    12,15                            |\n         USING PUTPARM,12                       |\n         LA    3,SAVAREA                        |\n         ST    3,8(13)                          |\n         ST    13,4(3)                          |\n         LR    13,3                             V\nSTART    DS    0H\n*\n*  THIS PGM WRITES 80 CHARACTER RECORDS BASED ON USER SUPPLIED PARM.\n*  ALL SYMBOLICS USED IN PARM ARE EXPANDED BEFORE EXECUTION OF PGM.\n*  THE SEMICOLON IS USED AS A RECORD SEPARATOR IN THE PARM THEREFORE\n*  SEVERAL 80 CHARACTER RECORDS CAN BE GENERATED FROM ONE 100 CHAR\n*  PARM FIELD. THE OUTPUT RECORDS ARE WRITTEN ON DDNAME PARM WHERE\n*  THE LRECL IS ALWAYS 80 CHARACTERS.  THE USER CAN SELECT ANY BLOCKING\n*  FACTOR ON THE PARM DD CARD.  THE OUTPUT FILE CAN BE CONCATENATED\n*  BEFORE OR AFTER ANY 80 CHAR LRECL DATA FILE IN THE JOB STREAM.\n* $$$$$$$$$$$$$$$$$$$$\n*  WHEN NO PARM IS SUPPLIED PUTPARM WRITES AN EOF MARKER ON PARM DD\n*  $$$$$$$$$$$$$$$$$$$$\n*  EXAMPLE #1\n*\n*  //PARMGEN  EXEC PGM=PUTPARM,PARM='THIS IS A SIMPLE PARM'\n*  //STEPLIB  DD  DSN=STARTEST.DEV.LOAD,DISP=SHR\n*  //PARM  DD  DSN=&&TEMP,UNIT=DISK,DISP=(,PASS),\n*  //   DCB=(BLKSIZE=800,RECFM=FB)\n*\n*  THE FOLLOWING 80 CHARACTER RECORD IS GENERATED BY PUTPARM\n*  THE RECORD GENERATED IS DISPLAYED BETWEEN THE GRIDS:-\n*  0000+000010000+000020000+000030000+000040000+000050000+000060000+000 00+00008\n*  THIS IS A SIMPLE PARM\n*  0000+000010000+000020000+000030000+000040000+000050000+000060000+000 00+00008\n*\n*  EXAMPLE #2\n*  THE FOLLOWING JCL ILLUSTRATES USE OF PUTPARM USING THE SEMICOLON\n*  IN THE PARM TO CAUSE SEVERAL RECORDS TO BE WRITTEN BUY ONE PARM\n*\n*  //MYPROC   PROC  A=1709,B=1338\n*  //PARMGEN  EXEC PGM=PUTPARM,PARM='ABC  $22.95;DEF;;01234;;&A,&B'\n*  //STEPLIB  DD  DSN=STARTEST.DEV.LOAD,DISP=SHR\n*  //PARM  DD  DSN=&&TEMP,UNIT=DISK,DISP=(,PASS),\n*  //   DCB=(BLKSIZE=800,RECFM=FB)\n*\n*  THE FOLLOWING 80 CHARACTER RECORDS ARE GENERATED BY PUTPARM\n*  ALL SIX RECORDS GENERATED ARE DISPLAYED BETWEEN THE GRIDS:-\n*  0000+000010000+000020000+000030000+000040000+000050000+000060000+000 00+00008\n*  ABC  $22.95\n*  DEF\n*\n*  01234\n*\n*  1709,1338\n*  0000+000010000+000020000+000030000+000040000+000050000+000060000+000 00+00008\n*\n*  SEMICOLONS IN THE PARM FORCE RECORDS TO BE WRITTEN AT THAT POINT.\n*  ALL RECORDS WRITTEN ARE ALWAYS PADDED WITH BLANKS WHEN LESS THAN\n*  80 NON-BLANK CHARACTERS APPEAR BETWEEN THE SEMICOLONS.\n*  SEMICOLONS WITHOUT INTERVENING DATA FORCE WRITING OF BLANK RECORDS.\n*  NOTE THAT RECORDS THREE AND FIVE ARE BLANK BECAUSE THE DOUBLE\n*  SEMICOLON IN THE PARM FORCED THE BLANK RECORD TO BE WRITTEN.\n*  SYMBOLIC PARAMETERS &A AND &B ARE RESOLVED BY THE VALUES IN THE\n*  PROC STATEMENT AND APPEAR IN THE LAST OF THE SIX RECORDS WRITTEN\n*  BY PUTPARM.  ALL OF THE SIX RECORDS CHOSEN BY THIS PARTICULAR\n*  PARM HAVE THE AUTOMATIC BLANK PADDING AT THE END OF EACH RECORD.\n*\n         PRINT ON,NOGEN\n         L     R2,0(R1)                POINT R2 TO PARM\n         LH    R3,0(R2)                GET PARM LEN IN R3\n         LTR   R3,R3                   IS THE PARM LEN ZERO\n         BZ    NOPARM                  THEN OPEN/CLOSE AND RETURN\n         WTO   'PUTPARM USER PARM FOLLOWS',ROUTCDE=(11)\n         BCTR  R3,0                    MINUS ONE FROM PARM LEN FOR EXEC UTED M\n         EX    R3,MVC                  EXECUTE THE MOVE TO SAVE PARM\n         MVC   WTOPARM+8(100),SAVPARM  SHOW USER HIS PARM\nWTOPARM  WTO   '                                                       X\n                                                        ',ROUTCDE=(11)\n         LA    R3,1(R3)                RESTORE ORIGINAL PARM LEN\n         LA    R4,SAVPARM              POINT TO SAVED PARM\n         LA    R5,OUTPARM              POINT TO OUTPUT PARM REC\n         OPEN  (PARM,OUTPUT)\nNEXTCHAR CLI   0(R4),X'5E'             SEMICOLON IS THIS END OF REC     CHAR REC\n         BE    NEWREC                  WRITE THIS RECORD\n         MVC   0(1,R5),0(R4)           NON END-OF-REC CHAR TO OUTPARMRM\n         LA    R4,1(R4)                STEP TO NEXT PARM CHAR\n         LA    R5,1(R5)                STEP TO NEXT OUTPARM CHAR\n         BCT   R3,NEXTCHAR             MINUS ONE LEN TEST NEXT CHAR\n         B     EOJ                     PARM LEN IS ZERO WRITE LAST REC  0 CHARS\nNEWREC   PUT   PARM,OUTPARM            FOUND SEMI WRITE RECORD\n         MVC   OUTPARM(80),=CL80' '    CLR IT FOR NEXT RECORD\n         LA    R4,1(R4)                STEP TO NEXT PARM CHAR\n         LA    R5,OUTPARM              POINT TO BEGNNNG OF NEW OUTPARM   NEW REC\n         BCT   R3,NEXTCHAR             TEST NEXT CHAR IF ANY\n         B     RETURN                  GO BACK - NO MORE CHARS\nEOJ      PUT   PARM,OUTPARM            WRITE LAST 80 CHAR PARM REC\nRETURN   CLOSE PARM                    CLOSE THE PARM FILE\n         L     R13,SAVAREA+4\n         RETURN (14,12),RC=0\nOUTPARM  DC    CL80' '\nNOPARM   OPEN  (PARM,OUTPUT)\n         WTO   'NO PARM SUPPLIED - EOF WRITTEN ON PARM DD',ROUTCDE=11\n         B     RETURN\nPARM     DCB   DDNAME=PARM,DSORG=PS,MACRF=(PM),LRECL=80\nMVC      MVC   SAVPARM(1),2(R2)        EXECUTED MOVE\nSAVPARM  DC    CL100' '                SAVED USER PARM\nSAVAREA  DS    18F                     REG SAVE AREA\n         YREGS                                                      SJK\n         END   PUTPARM\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SC": {"ttr": 783, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x040o\\x01\\x040o\\x12\\x04\\x00\\x04\\x00\\x04\\x00\\x00\\xd2\\xd5\\xe4\\xe3\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2004-11-01T00:00:00", "modifydate": "2004-11-01T12:04:00", "lines": 4, "newlines": 4, "modlines": 0, "user": "KNUTSON"}, "text": "ISREDIT MACRO\nISREDIT SUBMIT\nISREDIT CANCEL\nEXIT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SUBX": {"ttr": 785, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x040o\\x01\\x040o\\x12\\x04\\x00\\x19\\x00\\x19\\x00\\x00\\xd2\\xd5\\xe4\\xe3\\xe2\\xd6\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-11-01T00:00:00", "modifydate": "2004-11-01T12:04:00", "lines": 25, "newlines": 25, "modlines": 0, "user": "KNUTSON"}, "text": "/* REXX SUBX    */\n/******************************************************************/\n/* This job will submit the member you are currently editing for  */\n/* execution.  The job will be submitted using a dynamically      */\n/* allocated internal reader.                                     */\n/* Sam Knutson ...  December 11, 1991                             */\n/******************************************************************/\n ADDRESS ISREDIT\n 'ISREDIT MACRO'\n 'ISREDIT (LINELIM) = LINENUM .ZLAST'\n  x =  1\n DO WHILE x <= LINELIM\n 'ISREDIT (LINEWORK) = LINE ' x\n  J.x = LINEWORK\n  x = x + 1\n END\n\n ADDRESS TSO\n@savemsg = MSG('OFF')\n\"ALLOC F(INTRDR) SYSOUT(A) WRITER(INTRDR) RECFM(F) LRECL(80) REUS\"\n\"EXECIO \" LINELIM \" DISKW INTRDR (STEM J. FINIS\"\n\"FREE F(INTRDR)\"\n ADDRESS ISPEXEC\n'SETMSG MSG('ISRS048')'\n        EXIT  0\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT518/FILE518.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT518", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}