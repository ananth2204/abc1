{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011744000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 235144, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 6, "INMDSNAM": "CBT.V500.FILE318.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 235144, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 235144, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE318.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x04\\x0b'", "DS1TRBAL": "b'%R'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x02n\\x00\\x0b\\x02o\\x00\\x00\\x00\\x05'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$ADDR": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x98\\x06O\\x00\\x98\\x06O\\t7\\x00\\x0e\\x00\\x13\\x00\\x00\\xd2\\xc6\\xc5\\xc9\\xc5\\xd9\\xe3@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1998-03-05T00:00:00", "modifydate": "1998-03-05T09:37:00", "lines": 14, "newlines": 19, "modlines": 0, "user": "KFEIERT"}, "text": "From - Thu Mar 05 08:59:57 1998\n\nKnut Feiert\nH&M System Software GmbH\nRoedermark, Germany\nHM-Roe@t-online.de\n\nThe mailing address is:\n\nKnut Feiert\nH&M System Software GmbH\nSenefelderstr. 16\nD-63322 Roedermark, Germany\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$DOC": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x98\\x06O\\x00\\x98\\x06O\\tF\\x00\\x1e\\x00\\x12\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1998-03-05T00:00:00", "modifydate": "1998-03-05T09:46:00", "lines": 30, "newlines": 18, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject: poffload program\n\n  This file consists of an assembler program (with included\n  macros) and a REXX exec, to print out tapes created on\n  a DOS/VSE system using POWER OFFLOAD.  The printing can\n  (I think) be done on either DOS/VSE, MVS, or VM/CMS.\n\n  This file was contributed by Knut Feiert, and the REXX exec\n  was translated by him, from German into English.  The original\n  German had ASCII --> EBCDIC translation difficulties, because\n  of the 'umlauted' German letters, and the 'ss' letter.\n\n       (note by Sam Golob 98/03/05  -  rest of file by Knut)\n\n\nThe enclosed file Poffload.zip contains the assembler source\nalong with the home grown macros and a rexx procedure for VM.\n(Now translated into English by Knut.)  The usage of that\nprocedure requires that the list output is not closed at end\nof program because the procedure does its own list handling.\n\nIf you have problems with the procedure pls let me know.\n--\n\n\nKnut Feiert\nH&M System Software GmbH\nRoedermark, Germany\nHM-Roe@t-online.de\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ASM": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x98\\x06O\\x00\\x98\\x06O\\t1\\x05T\\x05T\\x00\\x00\\xd2\\xc6\\xc5\\xc9\\xc5\\xd9\\xe3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-03-05T00:00:00", "modifydate": "1998-03-05T09:31:00", "lines": 1364, "newlines": 1364, "modlines": 0, "user": "KFEIERT"}, "text": "         MACRO\n        EPILOG &RTC=,                  NO/YES/LABEL/VALUE    OPTIONAL  +\n               &SAVEA=,                NO/YES/LABEL/(REG)    OPTIONAL  +\n               &NEXTID=,               LABEL/(REG)/'CODE     OPTIONAL  +\n               &TITLE=NO               YES/NO                OPTIONAL\n.*\n         GBLA  &PGMTYPE                0=BATCH, 1=SUBROUTINE, 2=ONLINE\n         GBLC  &PX                     PROGRAM PREFIX (4 CHARS OF NAME)\n         GBLA  &DMPMIND                1=DUMP MODULE ADDRESS GENNED\n         GBLA  &IDSMIND                1=3270 MODULE ADDRESS GENNED\n         GBLC  &PGMNAME                PROGRAM'S NAME\n         GBLA  &PWRMIND                1=POWER MODULE ADDRESS GENNED\n         GBLA  &SAVAIND                0=NO, 1=SAVEAREA AVAILABLE\n         GBLC  &SAVAREA                SAVE AREA NAME\n         GBLA  &TRANIND                0=NO TRANS ID, 1=TRANS ID AVAIL\n         GBLA  &SYSCOM                 1=SYSCOM DSECT REQUIRED\n         GBLA  &COMREG                 1=COMREG DSECT REQUIRED\n         GBLA  &RFTAB                  1=RECORDER FILE TABLE DSECT REQ.\n         GBLA  &VSEREL                 1=DOS/VS(E) RELEASE EQUATES REQ.\n         LCLC  &NID                    NEXT TRANSACTION ID CODE\n.*\n         SPACE 1                       CHANGE UPDATE DATE HERE ++++++++\n.*\n.*--------------------------------------------------------------------*\n*------------- MACRO 'EPILOG' ---- COPYRIGHT C 1986 BY KK ---- 87/08/20\n.*--------------------------------------------------------------------*\n.*                                                                    *\n.*       THIS MACRO IS TO PROVIDE END OF PROGRAM PROCESSING FOR       *\n.*       BATCH MAIN AND/OR SUBROUTINE PROGRAMS AND CICS ONLINE        *\n.*       PROGRAMS.                                                    *\n.*       FOR ONLIEN PROGRAMS THE MACRO ALSO CHECKS WHETHER OTHER      *\n.*       SERVICE MODULES (AS 'KDMPUTIL' AND 'KPWRUTIL' HAVE BEEN      *\n.*       LOADED AND ARE NOT RELEASED YET, IF SO THEY GET RELEASED.    *\n.*       ALSO FOR ONLINE PROGRAMS A 'NEXT TRANSACTION ID' MAY BE      *\n.*       SPECIFIED.                                                   *\n.*       THIS MACRO ASSUMES THAT MACRO 'PROLOG' HAD BEEN USED FOR     *\n.*       PROGRAM INITIATION.                                          *\n.*                                                                    *\n.*       PARAMETER DESCRIPTION:                                       *\n.*                                                                    *\n.*  ==>  RTC      (OPTIONAL)    LABEL/VALUE                           *\n.*                                                                    *\n.*       THIS RETURN CODE PARAMETER, IF SEPCIFIED, WILL ACCOMPLISH    *\n.*       THAT REGISTER 15 FROM A FIELD OR WITH A VALUE RESPECTIVELY   *\n.*       THAT REGISTER 15 FROM A FIELD OR WITH A VALUE RESPECTIVELY   *\n.*       DEPENDING ON TYPE OF SPECIFICATION.                          *\n.*                                                                    *\n.*  ==>  SAVEA    (OPTIONAL)    NO                                    *\n.*                                                                    *\n.*       POSSIBLE SAVE AREA PARAMETER SPECIFICATIONS:                 *\n.*       'NO' - NO SAVE AREA IS USED; IF OMITTED THE SPECIFICATIONS   *\n.*       FOR THIS PARAMETER FROM MACRO 'PROLOG' ARE HONOURED.         *\n.*                                                                    *\n.*  ==>  NEXTID   (OPTIONAL)    LABEL/(REG)/'CODE                     *\n.*                                                                    *\n.*       THIS PARAMETER ONLY APPLIES TO ONLINE PROGRAMS.              *\n.*       IF SPECIFIED, FIELD 'TCANXTID' IS FILLED PRIOR TO EXECUTING  *\n.*       DFHPC TYPE=RETURN CICS MACRO REQUEST.                        *\n.*                                                                    *\n.*  ==>  TITLE    (OPTIONAL)    YES/NO                                *\n.*                                                                    *\n.*       THIS PARAMETER DETERMINES IF A HEAD LINE HAS TO BE GENNED.   *\n.*       'NO' IS THE DEFAULT.                                         *\n.*                                                                    *\n.*--------------------------------------------------------------------*\n.*\n.START   ANOP\n         AIF   (&DMPMIND NE 1 AND &PWRMIND NE 1 AND &IDSMIND NE 1      +\n               ).CHKTITL\n         SPACE 1\n*---------------------------------------------------------------------*\n*------------- GENERAL SUBROUTINES -----------------------------------*\n*---------------------------------------------------------------------*\n         SPACE 1\n&PX.PLOD EQU   *                   === LOAD CICS PROGRAM\n         LR    R15,R14                 SAVE RETURN ADDRESS REGISTER\n         DFHPC TYPE=LOAD,              LOAD CICS PROGRAM               +\n               COND=YES                ... AND RETURN, IF NOT FOUND\n         LR    R14,R15                 GET RETURN ADDRESS\n         XR    R15,R15                 ... AND CLEAR RETURN CODE REG.\n         CLI   TCAPCTR,X'00'           NORMAL RESPONSE / PROGRAM FOUND?\n         BE    &PX.PLDX                YES, RETURN\n         LA    R15,4                   ... ELSE SET 'NOT FOUND' RETCODE\n&PX.PLDX EQU   *\n         BR    R14                     ... AND BRANCH BACK\n         SPACE 3\n&PX.PDEL EQU   *                   === RELEASE CICS PROGRAM\n         LR    R15,R14                 SAVE RETURN ADDRESS REGISTER\n         DFHPC TYPE=DELETE             RELEASE LOADED PROGRAM\n         LR    R14,R15                 GET RETURN ADDRESS\n         BR    R14                     ... AND BRANCH BACK\n         SPACE 2\n.CHKTITL ANOP\n         AIF   ('&TITLE' NE 'YES').NOTITLE\n         SPACE 1\n         AIF   (&DMPMIND NE 1 AND &PWRMIND NE 1 AND &IDSMIND NE 1      +\n               ).TITLE\n         TITLE '&PGMNAME        PROGRAM TERMINATION ROUTINES'\n.TITLE   ANOP\n*---------------------------------------------------------------------*\n*------------- PROGRAM TERMINATION ROUTINES --------------------------*\n*---------------------------------------------------------------------*\n         SPACE 1\n.NOTITLE ANOP\n&PX.EXIT EQU   *                   === NORMAL END OF PROGRAM ROUTINE\n         AIF   (&PGMTYPE NE 0).CHKTYPE BATCH PROGRAM PROCESSING\n&SYSCOM  SETA  1                       INDICATE SYSCOM DSECT REQUIRED\n&RFTAB   SETA  1                       INDICATE RFTABLE DSECT REQUIRED\n&VSEREL  SETA  1                       INDICATE OPSYS EQUATES REQUIRED\n       ASYSCOM R1                      GET SYSCOM ADDRESS\n         USING SYSCOM,R1               ... AND MAKE SYSCOM ADDRESSABLE\n         L     R2,IJBRFTAB             GET RECORDER FILE TABLE ADDRESS\n         USING RFTABLE,R2              ... AND MAKE RF TAB ADDRESSABLE\n         CLI   RFREL,VSESP2            CHECK IF VSE/SP2 AND HIGHER\n         BL    EOJ&SYSNDX              IF NOT, DO NOT PASS RETURN CODE\n         EOJ   RC=(R15)                EXIT WITH RETURN CODE IN REG.15\n         SPACE 1\nEOJ&SYSNDX  EQU   *                    EXIT WITH NO RETURN CODE PASSED\n         EOJ                           END OF PROGRAM\n         AGO   .MEXIT\n.CHKTYPE ANOP                          SUBROUTINE PROGRAM PROCESSING\n         AIF   (&PGMTYPE NE 1).ONLINE\n.SAVAREA ANOP                          SAVE AREA PARAMETER PROCESSING\n         AIF   (&SAVAIND EQ 1).DEFAREA\n         AIF   (T'&SAVEA EQ 'O' OR K'&SAVEA EQ 0 OR '&SAVEA' EQ 'NO'   +\n               ).NOSAVEA\n         AIF   ('&SAVEA'(1,1) EQ '(').SAVEREG\n         AIF   ('&SAVEA' EQ 'YES').SAVEDEF\n         L     R13,&SAVEA+4            GET CALLER'S SAVE AREA ADDRESS\n         AGO   .NOSAVEA\n.SAVEREG ANOP                          SAVE AREA IN REGISTER NOTATION\n         L     R13,4(,&SAVEA(1))       GET CALLER'S SAVE AREA ADDRESS\n         AGO   .NOSAVEA\n.SAVEDEF ANOP                          DEFAULT SAVE AREA NAME\n         L     R13,SAVEAREA+4          GET CALLER'S SAVE AREA ADDRESS\n         AGO   .NOSAVEA\n.DEFAREA ANOP                          'PROLOG' DEFAULT SAVE AREA NAME\n         AIF   ('&SAVEA' EQ 'NO').NOSAVEA\n         L     R13,&SAVAREA+4          GET CALLER'S SAVE AREA ADDRESS\n.NOSAVEA ANOP\n         AIF   (T'&RTC EQ 'O' OR K'&RTC EQ 0 OR '&RTC' EQ 'YES').DEFRTC\n         AIF   ('&RTC' EQ 'NO').RETURN\n         AGO   .CHKRTC                 CHECK FOR FIELDNAME / VALUE\n.DEFRTC  ANOP\n         ST    R15,0(,R13)             ... AND SAVE RETURN CODE\n         LM    R14,R12,12(R13)         RESTORE CALLER'S REGISTERS\n         L     R15,0(,R13)             SET RETURN CODE REGISTER\n         AGO   .RETURN\n.CHKRTC  ANOP\n         AIF   ('&RTC'(1,1) LT '0').RTCFLD\n         LM    R14,R12,12(R13)         RESTORE CALLER'S REGISTERS\n         LA    R15,&RTC                SET RETURN CODE REGISTER\n         AGO   .RETURN\n.RTCFLD  ANOP                          LOAD FROM RETURN CODE FIELD\n         MVC   0(4,R13),&RTC           SAVE RETURN CODE FOR CALLER\n         LM    R14,R12,12(R13)         RESTORE CALLER'S REGISTERS\n         L     R15,0(,R13)             SET RETURN CODE REGISTER\n.RETURN  ANOP\n         BR    R14                     ... AND RETURN\n         SPACE 1\n         AGO   .MEXIT\n.ONLINE  ANOP                          ONLINE PROGRAM PROCESSING\n         AIF   (&IDSMIND NE 1).CHKDMP\n         ICM   R14,B'1111',IDSMADDR    3270 SRV MODULE STILL AVAILABLE?\n         BZ    &PX.IDSX                NO, CONTINUE\n         MVC   TCAPCPI,IDSMNAME        GET PROGRAM NAME TO BE DELETED\n         BAL   R14,&PX.PDEL            ... AND GO TO DELETE IT\n         XC    IDSMADDR,IDSMADDR       CLEAR MODULE ADDRESS POINTER\n&PX.IDSX EQU   *                   === END OF 3270 MODULE PROCESSING\n         SPACE 1\n.CHKDMP  ANOP\n         AIF   (&DMPMIND NE 1).CHKPWR\n         ICM   R14,B'1111',DMPMADDR    DUMP MODULE STILL AVAILABLE?\n         BZ    &PX.DMPX                NO, CONTINUE\n         MVC   TCAPCPI,DMPMNAME        GET PROGRAM NAME TO BE DELETED\n         BAL   R14,&PX.PDEL            ... AND GO TO DELETE IT\n         XC    DMPMADDR,DMPMADDR       CLEAR MODULE ADDRESS POINTER\n&PX.DMPX EQU   *                   === END OF DUMP MODULE PROCESSING\n         SPACE 1\n.CHKPWR  ANOP\n         AIF   (&PWRMIND NE 1).CHKNXT\n         ICM   R14,B'1111',PWRMADDR    POWER MODULE STILL AVAILABLE?\n         BZ    &PX.PWRX                NO, CONTINUE\n         MVC   TCAPCPI,PWRMNAME        GET PROGRAM NAME TO BE DELETED\n         BAL   R14,&PX.PDEL            ... AND GO TO DELETE IT\n         XC    PWRMADDR,PWRMADDR       CLEAR MODULE ADDRESS POINTER\n&PX.PWRX EQU   *                   === END OF POWER MODULE PROCESSING\n         SPACE 1\n.CHKNXT  ANOP\n         AIF   (&TRANIND EQ 0).PCRTRN\n         AIF   (T'&NEXTID EQ 'O' OR K'&NEXTID EQ 0).PCRTRN\n         AIF   ('&NEXTID'(1,1) EQ '(').NEXTREG\n         AIF   ('&NEXTID'(1,1) EQ '''').NEXTCOD\n         OC    &NEXTID,&NEXTID         ANY NEXT TRANS ID SPECIFIED?\n         BZ    *+10                    NO, SKIP 'NEXT ID' SETTING\n         MVC   TCANXTID,&NEXTID        SET ID OF NEXT TRANSACTION\n         AGO   .PCRTRN\n.NEXTREG ANOP\n         OC    0(4,'&NEXTID(1)'),0('&NEXTID(1)')  NEXT ID SPECIFIED?\n         BZ    *+10                    NO, SKIP 'NEXT ID' SETTING\n         MVC   TCANXTID,0('&NEXTID(1)')  SET ID OF NEXT TRANSACTION\n         AGO   .RETURN\n.NEXTCOD ANOP\n&NID     SETC  '&NEXTID'(2,K'&NEXTID-2)  SET CORRECT CODE\n         MVC   TCANXTID,=CL4'&NID'     SET ID OF NEXT TRANSACTION\n.PCRTRN  ANOP\n         DFHPC TYPE=RETURN             EXIT PROGRAM\n         SPACE 3\n&PX.ABND EQU   *                   === ABNORMAL TERMINATION ROUTINE\n         DFHPC TYPE=ABEND              ABEND PROGRAM\n.MEXIT   ANOP\n         MEND\n         MACRO\n         HEXTR &NAME,&SOURCE,&CLRCHAR  MAKE HEX VALUE READABLE\n.*\n.*--------------------------------------------------------------------*\n.*------------ MACRO 'HEXTR' ----- COPYRIGHT C 1986 BY KK ---- 86/12/02\n.*--------------------------------------------------------------------*\n.*       THIS MACRO IS TO MAKE HEXADECIMAL VALUES READABLE.           *\n.*       BOTH PARAMETERS ARE MANDATORY AND A TRANSLATE TABLE          *\n.*       WITH NAME HEXTABLE HAS TO BE DEFINED:                        *\n.*                                                                    *\n.*       HEXTABLE EQU   *-C'0'                                        *\n.*       HEXDIGIT DC    C'0123456789ABCDEF'     HEX DIGITS AS CHARS   *\n.*--------------------------------------------------------------------*\n.*\n         UNPK  &NAME.(L'&NAME+1),&SOURCE   UNPACK HEX FIELD\n         TR    &NAME,HEXTABLE          CORRECT ZONE BYTES\n         AIF   (T'&CLRCHAR NE 'O' AND K'&CLRCHAR NE 0).CLRCHAR\n.DEFCHAR ANOP\n         MVI   &NAME+L'&NAME,X'40'     ... AND CLEAR BAD BYTE\n         AGO   .MEXIT\n.CLRCHAR ANOP\n         MVI   &NAME+L'&NAME,&CLRCHAR  ... AND CLEAR BAD BYTE\n.MEXIT   ANOP\n         MEND\n         MACRO\n       LITPOOL &END=,                  YES/NO                OPTIONAL  +\n               &INFO=,                 YES/NO                OPTIONAL  +\n               &DSECT=                 YES/NO                OPTIONAL\n.*\n         GBLA  &DYNIND                 1=DYNAMIC WORK AREA USED\n         GBLC  &DYNWORK                DYNAMIC WORK SPACE DSECT NAME\n         GBLA  &INFOIND                1=EYE CATCHER ALREADY PRINTED\n         GBLC  &PGMNAME                PROGRAM'S NAME\n         GBLA  &SAVAIND                0=NO, 1=SAVEAREA AVAILABLE\n         GBLC  &SAVAREA                SAVE AREA NAME\n         GBLA  &SYSCOM                 1=SYSCOM DSECT REQUIRED\n         GBLA  &COMREG                 1=COMREG DSECT REQUIRED\n         GBLA  &RFTAB                  1=RECORDER FILE TABLE DSECT REQ.\n         GBLA  &VSEREL                 1=DOS/VS(E) RELEASE EQUATES REQ.\n         LCLA  &INFOACT                1=DON'T GENERATE EYE CATCHER\n.*\n         SPACE 1                       CHANGE UPDATE DATE HERE ++++++++\n.*\n.*--------------------------------------------------------------------*\n*------------- MACRO 'LITPOOL' --- COPYRIGHT C 1986 BY KK ---- 87/08/20\n.*--------------------------------------------------------------------*\n.*                                                                    *\n.*       THIS MACRO IS TO PROVIDE END OF PROGRAM PROCESSING FOR       *\n.*       BATCH MAIN AND/OR SUBROUTINE PROGRAMS.                       *\n.*       THIS MACRO ASSUMES THAT MACRO 'PROLOG' HAD BEEN USED FOR     *\n.*       PROGRAM INITIATION.                                          *\n.*                                                                    *\n.*       PARAMETER DESCRIPTION:                                       *\n.*                                                                    *\n.*  ==>  END      (OPTIONAL)    YES/NO                                *\n.*                                                                    *\n.*       'YES' INDICATES, THAT AN ASSEMBLER END STATEMENT HAS TO BE   *\n.*       GENERATED. IF THIS PARAMETER IS NOT SPECIFIED, THE MACRO     *\n.*       DEFAULTS TO 'YES'.                                           *\n.*       IF 'NO' IS SPECIFIED, IT IS ALSO CHECKED, WHETHER A CSECT'S  *\n.*       TRAILING EYE CATCHER (PARAMETER 'INFO') AND/OR A DUMMY       *\n.*       SECTION FOR DYNAMIC USER WORKING STORAGE HAS TO BE DEFINED   *\n.*       DEPENDING ON 'SAVEA' SPECIFICATION IN MACRO 'PROLOG'         *\n.*       (PARAMETER 'DSECT').                                         *\n.*       WHEN THIS DSECT WILL BE DEFINED, THE SAVE AREA WILL ALSO     *\n.*       BE DEFINED.                                                  *\n.*                                                                    *\n.*  ==>  INFO     (OPTIONAL)    YES/NO                                *\n.*                                                                    *\n.*       IF THE 'END' PARAMETER WAS SPECIFIED 'YES', THIS PARAMETER   *\n.*       WILL NOT BE CHECKED, BUT AN EYE CATCHER INFORMATION WILL     *\n.*       BE GENERATED UNCONDITIONALLY, UNLESS IT HAD NOT BEEN         *\n.*       GENERATED IN A PRIOR 'LITPOOL' MACRO CALL. 'YES' IS DEFAULT. *\n.*                                                                    *\n.*  ==>  DSECT    (OPTIONAL)    YES/NO                                *\n.*                                                                    *\n.*       THIS PARAMETER JUST APPLIES, IF THE 'END' PARAMETER HAS      *\n.*       BEEN SPECIFIED AS 'NO'. 'NO' IS THE DEFAULT VALUE FOR THIS   *\n.*       PARAMETER.                                                   *\n.*                                                                    *\n.*--------------------------------------------------------------------*\n.*\n.START   ANOP\n         AIF   (&INFOIND NE 1).PROCEED IF EYE CATCHER HAD BEEN PRINTED\n&INFOACT SETA  1                       ... OMIT IT HERE\n.PROCEED ANOP\n         SPACE 1\n*---------------------------------------------------------------------*\n*------------- LITERAL POOL ------------------------------------------*\n*---------------------------------------------------------------------*\n         SPACE 1\n         LTORG                         LITERAL POOL\n         SPACE 1\n         DS    0D                      DOUBLEWORD ALIGNMENT\n         AIF   (T'&END EQ 'O' OR K'&END EQ 0 OR '&END' EQ 'YES').INFO\n         AIF   ('&END' EQ 'NO').CHKINFO\n         MNOTE 4,'PARAMETER ''END'' INCORRECT, ''YES'' ASSUMED'\n         AGO   .INFO\n.CHKINFO ANOP                          CHECK INFO PARAMETER IF END=NO\n         AIF   (T'&INFO EQ 'O' OR K'&INFO EQ 0 OR '&INFO' EQ 'YES'     +\n               ).INFO\n         AIF   ('&INFO' EQ 'NO').CHKDSCT\n         MNOTE 4,'PARAMETER ''INFO'' INCORRECT, ''YES'' ASSUMED'\n.INFO    ANOP                          ISSUE TRAILING EYE CATCHER\n         AIF   (&INFOACT NE 0).SYSDSCT\n         DC    CL08'&PGMNAME'\n         DC    CL16'  END OF PROGRAM'  CSECT'S TRAILING EYE CATCHER\n&INFOIND SETA  1                       INDICATE EYE CATCHER IS PRINTED\n.SYSDSCT ANOP                          SYSTEM DSECTS GENERATION\n         AIF   (&SYSCOM EQ 0 AND &COMREG EQ 0 AND &RFTAB EQ 0 AND      +\n               &VSEREL EQ 0).END\n.CHKCOMR ANOP                          CHECK IF COMREG DSECT REQUESTED\n         AIF   (&COMREG EQ 0).CHKRFTB\n         TITLE '&PGMNAME        PARTITION COMMUNICATION REGION LAYOUT'\n*---------------------------------------------------------------------*\n*------------- PARTITION COMMUNICATION REGION LAYOUT -----------------*\n*---------------------------------------------------------------------*\n         SPACE 1\n       MAPCOMR                         PARTITION COMREG LAYOUT\n.CHKRFTB ANOP                          CHECK IF RFTABLE DSECT REQUESTED\n         AIF   (&RFTAB EQ 0).CHKSYSC\n         TITLE '&PGMNAME        RECORDER FILE TABLE LAYOUT'\n*---------------------------------------------------------------------*\n*------------- RECORDER FILE TABLE LAYOUT ----------------------------*\n*---------------------------------------------------------------------*\n         SPACE 1\n      MAPRFTAB                         RECORDER FILE TABLE LAYOUT\n.CHKSYSC ANOP                          CHECK IF SYSCOM DSECT REQUESTED\n         AIF   (&SYSCOM EQ 0).CHKOPRL\n         TITLE '&PGMNAME        SYSTEM COMMUNICATION REGION LAYOUT'\n*---------------------------------------------------------------------*\n*------------- SYSTEM COMMUNICATION REGION LAYOUT --------------------*\n*---------------------------------------------------------------------*\n         SPACE 1\nSYSCOM   SYSCOM                        SYSCOM LAYOUT\n.CHKOPRL ANOP                          CHECK IF OPSYS EQUATES REQUESTED\n         AIF   (&VSEREL EQ 0).CHKEND\n         SPACE 3\n*        COPY  DOSOPREL                DOS OP.SYSTEM RELEASE EQUATES\n* MANUALLY COPIED HERE\n         SPACE 1\n*---------------------------------------------------------------------*\n*------------- DOS OPERATING SYSTEM EQUATES --------------------------*\n*---------------------------------------------------------------------*\n         SPACE 1\nVSESP3   EQU   X'2E'                   VSE/SP 3.X.X\nVSESP2   EQU   X'2D'                   VSE/SP 2.X.X\nVSESP1   EQU   X'2C'                   DOS/VSE 1.3.5 / 1.4.X\nVSE3     EQU   X'2B'                   DOS/VSE 3\nVSE2     EQU   X'2A'                   DOS/VSE 2\nVSE1     EQU   X'29'                   DOS/VSE 1\nDOSVS    EQU   X'28'                   DOS/VS\n*        COPY  DOSOPREL                DOS OP.SYSTEM RELEASE EQUATES\n.CHKEND  ANOP\n         SPACE 3\n.END     ANOP                          ISSUE END STATEMENT\n         AIF   ('&END' EQ 'NO').CHKDSCT\n         END   &PGMNAME                END OF PROGRAM\n         AGO   .MEND\n.CHKDSCT ANOP                          CHECK FOR DSECT DEFINITION\n         AIF   (&DYNIND NE 1).MEND\n         AIF   (T'&DSECT EQ 'O' OR K'&DSECT EQ 0 OR '&DSECT' EQ 'YES'  +\n               ).DSECT\n         AIF   ('&DSECT' EQ 'NO').MEND\n         MNOTE 4,'PARAMETER ''DSECT'' INCORRECT, ''NO'' ASSUMED'\n         AGO   .MEND\n.DSECT   ANOP\n         TITLE '&PGMNAME        DYNAMIC WORK AREA LAYOUT'\n*---------------------------------------------------------------------*\n*------------- DYNAMIC WORK AREA LAYOUT (ADDRESSED BY REG.13) --------*\n*---------------------------------------------------------------------*\n         SPACE 1\n&DYNWORK DSECT                         DYNAMIC WORK AREA DSECT\n         AIF   (&SAVAIND NE 1).MEXIT   DEFINE SAVE AREA IF REQUIRED\n&SAVAREA SAVEA WORKA=YES               COMMON SAVE AND WORK AREAS\n         AGO   .MEND\n.MEXIT   ANOP\n         SPACE 1\n.MEND    ANOP\n         MEND\n         MACRO\n         PATCH &CNT,                   NUMBER OF HALFWORDS   MANDATORY +\n               &ENTRY                  PATCH AREA ENTRY NAME  OPTIONAL\n.*\n         LCLA  &COUNT                  COUNT FIELD\n         LCLC  &EPNAME                 ENTRY POINT NAME\n.*\n         SPACE 1                       CHANGE UPDATE DATE HERE ++++++++\n.*\n.*--------------------------------------------------------------------*\n*------------- MACRO 'PATCH' ----- COPYRIGHT C 1986 BY KK ---- 86/05/27\n.*--------------------------------------------------------------------*\n.*                                                                    *\n.*       THIS MACRO IS TO DEFINE A PATCH AREA WITHIN A PROGRAM.       *\n.*                                                                    *\n.*       PARAMETER DESCRIPTION:                                       *\n.*                                                                    *\n.*  ==>  CNT      (MANDATORY)   COUNT/NUMBER OF 'S' CONSTANTS         *\n.*                                                                    *\n.*       THIS PARAMETER DEFINES THE SIZE OF THE PATCH AREA.           *\n.*                                                                    *\n.*  ==>  ENTRY    (MANDATORY)   PATCH AREA ENTRY NAME                 *\n.*                                                                    *\n.*       THIS PARAMETER, IF SPECIFIED, DEFINES AN ENTRY POINT FOR     *\n.*       THAT PATCH AREA. EA IS USED; IF OMITTED THE SPECIFICATIONS   *\n.*       FOR THIS PARAMETER FROM MACRO 'PROLOG' ARE HONOURED.         *\n.*                                                                    *\n.*--------------------------------------------------------------------*\n.*\n.START   ANOP\n&COUNT   SETA  K'&CNT                  GET LENGTH OF COUNT PARAMETER\n         AIF   (T'&CNT EQ 'O' OR K'&CNT EQ 0).CNTERR\n.CNTNUM  ANOP                          CHECK IF PARAMETER IS NUMERIC\n         AIF   ('&CNT'(K'&CNT+1-&COUNT,1) LT '0').CNTERR\n&COUNT   SETA  &COUNT-1                DECREMENT COUNTER\n         AIF   (&COUNT GT 0).CNTNUM    ... AND TRY NEXT DIGIT\n         SPACE 1\n*---------------------------------------------------------------------*\n*------------- PATCH AREA DEFINITION ---------------------------------*\n*---------------------------------------------------------------------*\n         SPACE 1\n         AGO   .CNTOKAY\n.CNTERR  ANOP\n         MNOTE 16,'MANDATORY PARAMETER ''CNT'' MISSING OR NOT NUMERIC'\n         MEXIT\n.CNTOKAY ANOP\n         AIF   (T'&ENTRY EQ 'O' OR K'&ENTRY EQ 0).NOENTRY\n&EPNAME  SETC  '&ENTRY'                SET ENTRY POINT NAME\n         ENTRY &EPNAME\n.NOENTRY ANOP\n&EPNAME  DC    &CNT.S(*)               PATCH AREA DEFINITION\n         SPACE 1\n.MEXIT   ANOP\n         MEND\n         MACRO\n        PROLOG &PGMID=,            *** MANDATORY PARAMETER             +\n               &BASEREG=,              NUMBER OR NAME        OPTIONAL  +\n               &SAVEA=,                YES/NO/LABEL          OPTIONAL  +\n               &TYPE=,                 BATCH/(ONLINE,NO)     OPTIONAL  +\n               &SID=,                  4-CHAR NAME           OPTIONAL  +\n               &CRT=,                  4-CHAR YEAR SPEC      OPTIONAL  +\n               &START=                 LABEL                 OPTIONAL\n.*\n         GBLA  &DYNIND                 1=DYNAMIC WORK AREA USED\n         GBLC  &DYNWORK                DYNAMIC WORK SPACE DSECT NAME\n         GBLC  &PGMNAME                PROGRAM'S NAME\n         GBLC  &PX                     PROGRAM PREFIX (4 CHARS OF NAME)\n         GBLA  &PGMTYPE                0=BATCH, 1=SUBROUTINE, 2=ONLINE\n         GBLA  &SAVAIND                0=NO, 1=SAVEAREA AVAILABLE\n         GBLC  &SAVAREA                SAVE AREA NAME\n         GBLA  &TRANIND                0=NO TRANS ID, 1=TRANS ID AVAIL\n         GBLA  &SYSCOM                 1=SYSCOM DSECT REQUIRED\n         GBLA  &COMREG                 1=COMREG DSECT REQUIRED\n         GBLA  &RFTAB                  1=RECORDER FILE TABLE DSECT REQ.\n         GBLA  &VSEREL                 1=DOS/VS(E) RELEASE EQUATES REQ.\n         LCLA  &CRTLCNT                CREATION DATE CHECK LOOP COUNTER\n         LCLA  &REGCNT                 NUMBER OF BASE REGISTERS SPEC'D\n         LCLA  &REGVAR                 BASE REGISTER VARIABLE\n         LCLC  &CYR                    CREATION YEAR\n         LCLC  &R                      BASE REGISTER\n         LCLC  &REGS                   BASE REGISTERS (USING STATMENT)\n         LCLC  &SAI                    SAVE AREA PROGRAM IDENTIFICATION\n.*\n         SPACE 1                       CHANGE UPDATE DATE HERE ++++++++\n.*\n.*--------------------------------------------------------------------*\n*------------- MACRO 'PROLOG' ---- COPYRIGHT C 1985 BY KK ---- 87/08/20\n.*--------------------------------------------------------------------*\n.*                                                                    *\n.*       THIS MACRO IS TO SET BASE REGISTER FOR BATCH MAIN AND/OR     *\n.*       SUBROUTINE AND (CICS) ONLINE PROGRAMS. DEPENDING ON THE      *\n.*       TYPE OF THE PROGRAM AND ON OTHER PARAMETER SPECIFICATIONS    *\n.*       IT WILL ALSO PROVIDE FOR THE SAVE AREA LINKAGE OF CALLING    *\n.*       AND CALLED PROGRAMS FOLLOWING IBM'S CONVENTIONS.             *\n.*                                                                    *\n.*       PARAMETER DESCRIPTION:                                       *\n.*                                                                    *\n.*  ==>  PGMID    (MANDATORY)   1 - 8 CHARACTERS                      *\n.*                                                                    *\n.*       THIS PARAMETER SPECIFICATION IS USED AS THE PROGRAM NAME IN  *\n.*       A CSECT STATEMENT AND ALSO AS CONTENTS OF AN 8-CHARACTER     *\n.*       FIELD NAMED 'PGMIDENT' AS PART OF THE COPYRIGHT INFORMATION. *\n.*       THIS PARAMETER IS ONLY MANDATORY, IF NOT ALREADY SPECIFIED   *\n.*       IN A PRECEEDING 'KDFHDEF' MACRO CALL.                        *\n.*                                                                    *\n.*  ==>  BASEREG  (OPTIONAL)                                          *\n.*                                                                    *\n.*       THIS PARAMETER, IF SPECIFIED, WILL OVERWRITE THE MACRO'S     *\n.*       DEFAULT BASE REGISTER. DEFAULTS ARE:                         *\n.*       REG.12 FOR BATCH/SUBROUTINE, REG.11 FOR ONLINE PROGRAMS.     *\n.*       ANY NAME (EQUATES!) IS ACCEPTED WITOUT VALIDATION CHECKING.  *\n.*       IF USING MULTIPLE BASE REGISTERS THEY HAVE TO BE SPECIFIED   *\n.*       IN PARENTHESIS. REGISTERS 13 TO 2 SHOULD NOT BE USED.        *\n.*                                                                    *\n.*  ==>  SAVEA    (OPTIONAL)    NO/YES/LABEL/(YES/LABEL,DSECT)        *\n.*                                                                    *\n.*       POSSIBLE SAVE AREA PARAMETER SPECIFICATIONS:                 *\n.*       'NO' - NO SAVE AREA IS USED; 'YES' - A SAVE AREA WITH NAME   *\n.*       'SAVEAREA' IS TO BE USED; 'LABEL' - A SAVE AREA WITH THAT    *\n.*       NAME IS TO BE USED.                                          *\n.*       IT IS USER RESPONSABILITY, THAT THE SPECIFIED SAVE AREA IS   *\n.*       DEFINED IN THE PROGRAM. IF OMITTED THE DEFAULTS ARE:         *\n.*       'NO' FOR TYPE=BATCH AND 'YES' FOR SUBROUTINES. THIS          *\n.*       PARAMETER WILL NOT BE HONOURED FOR TYPE=ONLINE PROGRAMS.     *\n.*       IN ADDITION 'YES' AND 'LABEL' MAY ALSO BE COMBINED WITH A    *\n.*       DSECT NAME. IN THIS CASE IT IS ASSUMED THAT THE 1ST ADDRESS  *\n.*       OF THE RPL LIST POINTS TO A DYNAMIC USER WORK AREA PASSED    *\n.*       THE THE PROGRAM BY THE CALLER, AND ESPECIALLY THE BEGIN OF   *\n.*       THIS AREA IS TO BE USED AS SAVE AREA.                        *\n.*       IF A DYNAMIC WORK AREA IS TO BE USED, A ROUTINE TO CONVERT   *\n.*       PARAMETERS FROM REGISTER INTO ADDRESS NOTATION IS ALSO       *\n.*       GENERATED (SEE 'PARMCHK' MACRO).                             *\n.*                                                                    *\n.*  ==>  TYPE     (OPTIONAL)    BATCH/ONLINE/(ONLINE,NO)              *\n.*                                                                    *\n.*       POSSIBLE PROGRAM TYPE SPECIFICATIONS:                        *\n.*       'BATCH' FOR BATCH MAIN PROGRAMS AND 'ONLINE' FOR (CICS)      *\n.*       ONLINE PROGRAMS. ANY OTHER SPECIFICATION OR NO SPECIFICATION *\n.*       WILL DEFAULT TO 'SUBROUTINE PROGRAM'. FOR TYPE 'ONLINE'      *\n.*       IT IS ALSO POSSIBLE TO SPECIFY '(ONLINE,NO)', WHICH WILL     *\n.*       RESULT IN INITIAL CICS TCTTE/TIOA LINKAGE BEING OMITTED.     *\n.*                                                                    *\n.*  ==>  SID      (OPTIONAL)    1 - 4 CHARACTERS                      *\n.*                                                                    *\n.*       THIS SHORT PROGRAM ID PARAMETER SPECIFICATION IS HONOURED    *\n.*       FOR SUBROUTINE PROGRAMS ONLY. THIS ID WILL BE PUT INTO THE   *\n.*       1ST FULLWORD OF THE CALLING PROGRAM'S SAVE AREA.             *\n.*                                                                    *\n.*  ==>  CRT      (OPTIONAL)    1 - 4 CHARACTERS, NUMERIC             *\n.*                                                                    *\n.*       THIS CREATION DATE (YEAR) PARAMETER SPECIFICATION WILL BE    *\n.*       PUT INTO THE COPYRIGHT INFORMATION. IF INCORRECTLY SPECIFIED *\n.*       OR OMITTED, THE CURRENT YEAR IS TAKEN.                       *\n.*                                                                    *\n.*  ==>  START    (OPTIONAL)    LABEL                                 *\n.*                                                                    *\n.*       LABEL SPECIFICATION, WHERE TO BRANCH TO. IT IS USER          *\n.*       RESPONSABILITY, THAT THE SPECIFIED LABEL EXISTS IN THE PGM.  *\n.*       IF THIS PARAMETER IS SPECIFIED FOR A SUBROUTINE PROGRAM,     *\n.*       A ROUTINE TO CONVERT PARAMETERS FROM REGISTER INTO ADDRESS   *\n.*       NOTATION IS ALSO GENERATED.                                  *\n.*       IF THIS PARAMETER IS SPECIFIED FOR A SUBROUTINE PROGRAM      *\n.*       WITH STATIC WORK AREAS, THE 'PARMCHK' ROUTINE WILL BE        *\n.*       GENERATED IN ADDITION.                                       *\n.*       IF THIS PARAMETER IS PSECIFIED FOR AN ONLINE PROGRAM,        *\n.*       PROGRAM TERMINATION ROUTINES (SEE MACRO 'EPILOG' WILL BE     *\n.*       GENERATED.                                                   *\n.*                                                                    *\n.*--------------------------------------------------------------------*\n.*\n.START   ANOP\n         AIF   ('&PX' EQ 'KDFH').SETPFX\n         AIF   (T'&PGMID NE 'O' AND K'&PGMID NE 0).NAMEOK\n         MNOTE 16,'MANDATORY PARAMETER ''PGMID'' MISSING/NOT SPECIFIED,+\n                ''PROLOG'' MACRO EXPANSION TERMINATED'\n         MEXIT\n.NAMEOK  ANOP\n&PGMNAME SETC  '&PGMID'                SET GLOBAL PROGRAM NAME\n.SETPFX  ANOP\n&PX      SETC  '&PGMNAME'(1,4)         ... PROGRAM PREFIX\n         AIF   (T'&TYPE EQ 'O' OR K'&TYPE EQ 0).DEFTYPE\n         AIF   ('&TYPE(1)' EQ 'BATCH').CHKTYPE\n         AIF   ('&TYPE(1)' EQ 'ONLINE').CHKTYPE\n         MNOTE 4,'''TYPE'' SPECIFICATION INVALID, DEFAULT TAKEN'\n.DEFTYPE ANOP                          SET DEFAULT PROGRAM TYPE\n&PGMTYPE SETA  1                       INDICATE SUBROUTINE\n.CHKTYPE ANOP\n&R       SETC  'R12'                   TAKE REG.12 AS DEFAULT BASE REG.\n         AIF   ('&TYPE(1)' NE 'ONLINE').CHKREG\n&R       SETC  'R11'                   TAKE REG.11 AS ONLINE BASE REG.\n&PGMTYPE SETA  2                       INDICATE ONLINE PROGRAM\n.CHKREG  ANOP\n&REGS    SETC  '&R'                    SET DEFAULT USING REGISTER\n         AIF   (T'&BASEREG EQ 'O' OR K'&BASEREG EQ 0).PROCEED\n&R       SETC  '&BASEREG(1)'           TAKE 1ST BASE REGISTER\n         AIF   ('&BASEREG'(1,1) EQ '(').MULTREG\n&REGS    SETC  '&BASEREG(1)'           TAKE MACRO SPECIFICATION\n         AGO   .PROCEED\n.MULTREG ANOP                          MULTIPLE BASE REG'S SPECIFIED\n&REGCNT  SETA  N'&BASEREG              GET NUMBER OF BASE REGISTERS\n&REGS    SETC  '&BASEREG'(2,K'&BASEREG-2) GET ALL BASE REGISTERS\n.PROCEED ANOP\n         PRINT ON,GEN,DATA\n&PGMNAME CSECT                         START OF PROGRAM\n         SPACE 1\n*---------------------------------------------------------------------*\n*------- SYMBOLIC NAMES FOR REGISTERS (REGISTER EQUATES) -------------*\n*---------------------------------------------------------------------*\n         SPACE 1\nR0       EQU   0\nR1       EQU   1                       REQUEST PARAMETER LIST (RPL)\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nRA       EQU   10\nR11      EQU   11\nRB       EQU   11\nR12      EQU   12\nRC       EQU   12\nR13      EQU   13                      SAVE AREA ADDRESS REGISTER\nRD       EQU   13\nR14      EQU   14                      RETURN ADDRESS REGISTER\nRE       EQU   14\nR15      EQU   15                      ENTRY POINT/RETURN CODE REGISTER\nRF       EQU   15\n         SPACE 1\nBASEREG  EQU   &R                      BASE REGISTER\n         AIF   (&PGMTYPE NE 2).PGMINIT IF NOT ONLINE PGM, INIT PROGRAM\n       KDFHREG                         GENERATE CICS REGISTER EQUATES\n.PGMINIT ANOP\n         TITLE '&PGMNAME        PROGRAM INITIATION ROUTINE'\n*---------------------------------------------------------------------*\n*------------- PROGRAM INITIATION ROUTINE ----------------------------*\n*---------------------------------------------------------------------*\n         SPACE 1\n         USING &PGMNAME,&REGS          PROGRAM BASE\n.SUBPGM  ANOP\n         AIF   (&PGMTYPE NE 1).ONLPGM  === SUBROUTINE LOGIC ===\n         STM   R14,R12,12(R13)         SAVE REGISTERS\n         LR    &R,R15                  SET BASE REGISTER\n         AGO   .CHKCRT\n.ONLPGM  ANOP                          === ONLINE PROGRAM LOGIC ===\n         AIF   (&PGMTYPE NE 2).MAINPGM\n         LR    &R,R14                  SET BASE REGISTER\n         AGO   .CHKCRT\n.MAINPGM ANOP                          === BATCH PROGRAM LOGIC ===\n         BALR  &R,0                    SET BASE REGISTER\n         LA    &R,0(,&R)\n         BCTR  &R,0                    ... AND\n         BCTR  &R,0                    ... SET IT PROPERLY\n.CHKCRT  ANOP\n         AIF   (T'&CRT EQ 'O' OR K'&CRT EQ 0).DEFCRT\n         AIF   (K'&CRT GT 4).CRTERR\n&CRTLCNT SETA  1                       SET LOOP COUNTER\n.LOOPCRT ANOP                          NUMERIC CHECK LOOP\n         AIF   ('&CRT'(&CRTLCNT,1) LT '0').CRTERR\n&CRTLCNT SETA  &CRTLCNT+1              INCREMENT LOOP COUNTER\n         AIF   (&CRTLCNT GT K'&CRT).MOVCRT\n         AGO   .LOOPCRT                GO TO CHECK NEXT CHARACTER\n.CRTERR  ANOP                          ... ELSE ISSUE ERROR MESSAGE\n         MNOTE 4,'''CRT'' SPECIFICATION TOO LONG OR NOT NUMERIC, DEFAUL+\n               T TAKEN'\n.DEFCRT  ANOP                          DEFAULT CREATION DATE ROUTINE\n&CYR     SETC  '&SYSDATE'(7,2)         TAKE CURRENT YEAR\n&CYR     SETC  '19&CYR'                ... AND ASSUME 19TH CENTURY\n         AGO   .CPYRITE\n.MOVCRT  ANOP\n&CYR     SETC  '&CRT'                  SET CREATION YEAR\n.CPYRITE ANOP\n         SPACE 1\n         BAL   R0,*+52                 SKIP EYE CATCHER AND COPYRIGHT\nPGMIDENT DC    CL08'&PGMNAME'          CSECT'S EYE CATCHER\nCOPYRITE DC    CL24'  COPYRIGHT C &CYR BY KK'  COPYRIGHT INFORMATION\n         DC    CL16'  &SYSDATE &SYSTIME' DATE AND TIME ASSEMBLED LAST\n         AIF   (&PGMTYPE EQ 2).MBASE   NO ONLINE PGM SAVE AREA LINKAGE\n         AIF   (&PGMTYPE NE 1 OR T'&SID EQ 'O' OR K'&SID EQ 0).CHKAREA\n         AIF   (K'&SID LE 4).SAIDENT\n         MNOTE 4,'''SID'' MORE THAN 4 CHARACTERS, TRUNCATED'\n.SAIDENT ANOP\n&SAI     SETC  '&SID'(1,4)             TRUNCATE CHARACTER STRING\n         MVC   0(4,R13),=CL4'&SAI'     PGM'S ID INTO CALLER'S SAVE AREA\n.CHKAREA ANOP                          SUBROUTINE SAVE AREA LINKAGE\n         AIF   (N'&SAVEA LT 2).SAVANAM\n&DYNWORK SETC  '&SAVEA(2)'             SET DYNAMIC WORK AREA NAME\n&DYNIND  SETA  1                       ... AND SET DYNIND FLAG ON\n.SAVANAM ANOP                          DETERMINE SAVE AREA NAME\n         AIF   ('&SAVEA' EQ 'NO').MBASE\n&SAVAREA SETC  'SAVEAREA'              DEFAULT SAVE AREA NAME\n         AIF   ('&SAVEA(1)' EQ 'YES').MOVAREA\n         AIF   (T'&SAVEA EQ 'O' OR K'&SAVEA EQ 0).DEFAREA\n&SAVAREA SETC  '&SAVEA(1)'             SAVE AREA NAME SPECIFICATION\n         AGO   .MOVAREA                AND GO TO LINK SAVE AREAS\n.DEFAREA ANOP                          NO SAVE AREA LINKAGE IS DEFAULT\n         AIF   (&PGMTYPE EQ 0).MBASE   ... FOR BATCH PROGRAMS\n.MOVAREA ANOP                          DO THE SAVE AREA LINKAGE\n         AIF   (&PGMTYPE EQ 1).LNKAREA\n         LA    R13,&SAVAREA            GET ADDRESS OF SAVE AREA\n         AGO   .SAVIND                 GO TO INDICATE SAVE AREA DEF'NED\n.LNKAREA ANOP                          DO THE SAVE AREA LINKAGE\n         AIF   (&DYNIND EQ 1).DYNAREA\n         ST    R13,&SAVAREA+4          SAVE CALLER'S SAVE AREA ADDRESS\n         LA    R0,&SAVAREA             LOAD NEW SAVE AREA ADDRESS\n         ST    R0,8(,R13)              STORE IT INTO CALLER'S SAVE AREA\n         LR    R13,R0                  MAKE NEW SAVE AREA ADDRESSABLE\n         AGO   .SAVIND\n.DYNAREA ANOP                          LINK DYNAMIC SAVE AREA\n         LA    R1,0(,R1)               SET PARM LIST REGISTER PROPERLY\n         LR    R0,R1                   ... AND SAVE IT\n         LTR   R1,R1                   IS A PARAMETER LIST AVAILABLE?\n         LA    R15,16                  SET REG.15 RETURN CODE\n         BZ    &PX.EXIT                NO, EXIT AT ONCE\n         L     R2,0(,R1)               GET USER WORKING STORAGE ADDRESS\n         BAL   R14,PARMCHK             ... AND TEST IF IT IS VALID\n         B     &PX.ALGN\n         LA    R2,&PX.WORK             USE PROGRAM'S WORKING STORAGE\n         B     &PX.LINK                ... AND GO TO LINK SAVE AREAS\n         SPACE 2\n       PARMCHK LABEL=PARMCHK,          PARM CHECK ROUTINE LABEL        +\n               DOCU=NO,                NO DESCRIPTION PRINTING         +\n               COND=YES                CONDITIONAL RETURN\n         EJECT\n&PX.ALGN EQU   *                       ALIGNMENT ON DOUBLEWORD BOUNDARY\n         ALIGN R2,8                    ALIGNMENT ON DOUBLEWORD BOUNDARY\n&PX.LINK EQU   *                       DO THE SAVE AREA LINKAGE\n         LR    R1,R0                   RE-ESTABLISH PARAMETER LIST ADDR\n         ST    R2,8(,R13)              NEW AREA ADDR INTO CALLER'S AREA\n         ST    R13,4(,R2)              STORE CALLER'S SAVE AREA ADDRESS\n         LR    R13,R2                  MAKE NEW SAVE AREA ADDRESSABLE\n         USING &DYNWORK,R13\n.SAVIND  ANOP                          END OF SAVE AREA LINKAGE\n&SAVAIND SETA  1                       INDICATE SAVE AREA TO BE USED\n.MBASE   ANOP                          MULTIPLE BASEREG'S PROCESSING\n         AIF   (&REGCNT LE 1).EXIT     MORE THAN ONE BASE REGISTERS?\n&REGVAR  SETA  1                       SET VARIABLE TO INITIAL VALUE\n.REGLOOP ANOP\n         CNOP  0,4                     DO FULLWORD ALIGNMENT\n         BAL   &BASEREG(&REGVAR+1),*+8 LOAD NEXT BASE REGISTER\n         DC    A(&PGMNAME+4096*&REGVAR)\n         L     &BASEREG(&REGVAR+1),0(,&BASEREG(&REGVAR+1))\n&REGVAR  SETA  &REGVAR+1               INCREMENT VARIABLE\n         AIF   (&REGVAR NE &REGCNT).REGLOOP\n.EXIT    ANOP\n         AIF   (&PGMTYPE NE 2).FINAL\n         AIF   ('&TYPE(2)' EQ 'NO').FINAL\n         L     TCTTEAR,TCAFCAAA        GET TERMINAL ENTRY ADDRESS\n         L     TIOABAR,TCTTEDA         ... AND MAKE TIOA ADDRESSABLE\n         AIF   (&TRANIND  EQ  1).SETRANS\n         AGO   .FINAL\n.SETRANS ANOP\n         L     R14,TCASYAA             GET SYSTEM TCA POINTER AND GET\n         MVC   TWATRNID,TCAKCOID-DFHTCADY(R14)  ... OUR TRANSACTION ID\n        TWACHK                         CHECK IF TWA SIZE IS SUFFICIENT\n.FINAL   ANOP\n         AIF   (T'&START EQ 'O' OR K'&START EQ 0).MEXIT\n         SPACE 1\n         B     &START                  ... AND BRANCH\n         AIF   (&PGMTYPE NE 2).PARMCHK\n         SPACE 2\n        EPILOG NEXTID=TWANXTID,                                        +\n               TITLE=YES               PRINT HEADLINE\n.PARMCHK ANOP                          PARMCHK ROUTINE TO BE GENNED?\n         AIF   (&PGMTYPE NE 1 OR &DYNIND EQ 1).MEXIT\n         SPACE 2\n       PARMCHK LABEL=PARMCHK,          PARM CHECK ROUTINE LABEL        +\n               DOCU=NO,                NO DESCRIPTION PRINTING         +\n               COND=YES                CONDITIONAL RETURN\n         SPACE 2\n.MEXIT   ANOP\n         SPACE 1\n         MEND\n         MACRO\n&LABEL   SAVEA &WORKA=,                YES/NO/LABEL          OPTIONAL  +\n               &HEXTAB=                YES/NO                OPTIONAL\n.*\n         GBLA  &SAVAIND                0=NO, 1=YES, 2=DYNAMIC SAVEAREA\n         LCLC  &LBLNAME                SAVE AREA LABEL NAME\n         LCLC  &WRKAREA                WORK AREA LABEL NAME\n.*\n         SPACE 1                       CHANGE UPDATE DATE HERE ++++++++\n.*\n.*--------------------------------------------------------------------*\n*------------- MACRO 'SAVEA' ----- COPYRIGHT C 1986 BY KK ---- 87/04/14\n.*--------------------------------------------------------------------*\n.*                                                                    *\n.*       THE 'SAVEA' MACRO PROVIDES A SAVE AREA STORAGE DEFINITION.   *\n.*       THE SAVE AREA NAME (LABEL PARAMETER) IS OPTIONAL. IF OMITTED *\n.*       'SAVEAREA' WILL BE TAKEN.                                    *\n.*       IN ADDITION ADJACENT TO THE SAVE AREA A DOUBLE WORD WORK     *\n.*       AREA CAN BE DEFINED WITH NAME 'WORKAREA' (WORKA=YES' OR      *\n.*       ANY USER CHOSEN NAME (WORKA=LABEL). IF OMITTED, 'YES' IS     *\n.*       DEFAULT WORKA PARAMETER.                                     *\n.*       THE PARAMETER HEXTAB=YES/NO DETERMINES, WHETHER A 16 BYTE    *\n.*       TABLE WITH ALL 16 HEXADECIMAL DIGITS IS TO BE GENERATED,     *\n.*       NO IS THE DEFAULT VALUE.                                     *\n.*                                                                    *\n.*--------------------------------------------------------------------*\n.*\n.START   ANOP\n&LBLNAME SETC  '&LABEL'                ASSUME MACRO SPECIFICATION FIRST\n         AIF   (T'&LABEL NE 'O').LBLNAME\n&LBLNAME SETC  'SAVEAREA'\n.LBLNAME ANOP\n         PRINT NODATA\n&LBLNAME DC    9D'0'                   COMMON SAVE AREA DEFINITION\n         PRINT DATA\n         SPACE 1\n         ORG   &LBLNAME                COMMON SAVE AREA RE-DEFINITION\n         DC    F'0'\nHSA      DC    F'0'                    HIGHER SAVE AREA ADDRESS\nLSA      DC    F'0'                    LOWER SAVE AREA ADDRESS\n         SPACE 1\nSAVEREGS DS    0CL60   15 FULL WORDS - SAVED REGISTERS 14 TO 12\nRET      DC    0F'0'                   SAVED RETURN ADDRESS\nR14SAVE  DC    F'0'                    SAVED REG.14\nEPA      DC    0F'0'                   SAVED ENTRY POINT ADDRESS\nR15SAVE  DC    F'0'                    SAVED REG.15\nR0SAVE   DC    F'0'                    SAVED REG.0\nRPL      DC    0F'0'                   SAVED PARAMETER LIST ADDRESS\nR1SAVE   DC    F'0'                    SAVED REG.1\nR2SAVE   DC    F'0'                    SAVED REG.2\nR3SAVE   DC    F'0'                    SAVED REG.3\nR4SAVE   DC    F'0'                    SAVED REG.4\nR5SAVE   DC    F'0'                    SAVED REG.5\nR6SAVE   DC    F'0'                    SAVED REG.6\nR7SAVE   DC    F'0'                    SAVED REG.7\nR8SAVE   DC    F'0'                    SAVED REG.8\nR9SAVE   DC    F'0'                    SAVED REG.9\nR10SAVE  DC    F'0'                    SAVED REG.10\nR11SAVE  DC    F'0'                    SAVED REG.11\nR12SAVE  DC    F'0'                    SAVED REG.12\n         SPACE 1\n         AIF   ('&WORKA' EQ 'NO').WRKSAVE\n&WRKAREA SETC  'WORKAREA'              DEFAULT WORK AREA NAME\n         AIF   (T'&WORKA EQ 'O' OR K'&WORKA EQ 0 OR '&WORKA' EQ 'YES'  +\n               ).DEFAREA\n&WRKAREA SETC  '&WORKA'                WORK AREA NAME SPECIFICATION\n.DEFAREA ANOP                          WORK AREA DEFINITION\n&WRKAREA DC    1D'0'                   COMMON WORK AREA\n         SPACE 1\n.WRKSAVE ANOP\nWORKREGS DS    0CL20    5 FULL WORDS - SAVED REGISTERS 14 TO 2\nRETADDR  DC    F'0'                    SAVED REG.14 - RETURN ADDRESS\nRETCODE  DC    F'0'                    SAVED REG.15 - RETURN CODE\n         DC    F'0'\nRPLADDR  DC    F'0'                    SAVED PARAMETER LIST ADDRESS\n         DC    F'0'\n         SPACE 1\n.HEXTAB  ANOP\n         AIF   (T'&HEXTAB EQ 'O' OR K'&HEXTAB EQ 0 OR '&HEXTAB' EQ 'NO'+\n               ).MEXIT\nHEXTABLE EQU   *-C'0'\nHEXDIGIT DC    C'0123456789ABCDEF'     HEX DIGITS AS CHARACTERS\n         SPACE 1\n.MEXIT   ANOP\n         MEND\n         AIF   ('&SYSPARM' EQ 'OS').TITLOS\n.TITLDOS ANOP                      === DOS TITLE ======================\nPFLD     TITLE 'POFFLOAD        PRINT OUT POWER OFFLOAD TAPES (DOS VERS+\n               ION)'\n         AGO   .TITLCOM\n.TITLOS  ANOP                      === OS TITLE =======================\nPFLD     TITLE 'POFFLOAD        PRINT OUT POWER OFFLOAD TAPES (OS VERSI+\n               ON)'\n.TITLCOM ANOP\n*---------------------------------------------------------------------*\n*------------- PROGRAM POFFLOAD --------------------------------------*\n*---------------------------------------------------------------------*\n*                                                                     *\n*        THIS PROGRAM IS TO PRINT OUT POWER OFFLOAD TAPES.            *\n*                                                                     *\n*        THE PROGRAM'S BENEFITS ARE:                                  *\n*            - ALL POWER VERSIONS ARE SUPPORTED                       *\n*            - POWER CONTROL INFORMATIONS (AS FCB, JSEP) ARE SKIPPED  *\n*            - PROGRAM IS EXECUTABLE IN DOS, OS AND VM/CMS            *\n*                                                                     *\n*        REGISTER USAGE:                                              *\n*        **    REG.12   BASE REGISTER                                 *\n*              REG.14   RETURN ADDRESS REGISTER                       *\n*              REG.0    WORK REGISTER                                 *\n*              REG.1    DTF POINTER FOR I/O                           *\n*              REG.2    BLOCK SIZE FOR UNDEFINED RECORDS              *\n*              REG.3    LOGICAL RECORD POINTER                        *\n*              REG.4    LOGICAL RECORD LENGTH                         *\n*              REG.5    RECORD LENGTH FOR EXECUTED MOVE (5 OR 9 LESS) *\n*              REG.6    POINTER TO LOGICAL RECORD                     *\n*              REG.7    LOOP COUNTER                                  *\n*              REG.8    INPUT BLOCKS COUNTER                          *\n*              REG.9    OUTPUT RECORDS COUNTER                        *\n*                                                                     *\n*        RETURN CODES IN REGISTER 15:                                 *\n*              00       NORMAL RETURN                                 *\n*              04       NULL FILE READ / NO INPUT                     *\n*              16       INVALID DATA / FILE BUFFER TOO SMALL          *\n*              NN       GETVIS MACRO RETURN CODE IN CASE OF GETVIS    *\n*                       FAILURE (DOS ONLY)                            *\n*                                                                     *\n*---------------------------------------------------------------------*\n         EJECT\n        PROLOG PGMID=POFFLOAD,         PROGRAM NAME                    +\n               SAVEA=YES,              SAVE AREA LINKAGE/USAGE         +\n               CRT=1984                CREATION DATE\n*---------------------------------------------------------------------*\n*------------- PROGRAM INITIALISATION ROUTINE ------------------------*\n*---------------------------------------------------------------------*\n         SPACE 1\nPGMSTART EQU   *\n         BAL   R14,PFLDOPEN            GO TO OPEN FILE(S)\n         XR    R8,R8                   CLEAR INPUT AND OUTPUT\n         XR    R9,R9                   ... RECORD COUNTERS\n         TITLE 'POFFLOAD        DATA RECORD PROCESSING ROUTINE'\n*---------------------------------------------------------------------*\n*------------- DATA RECORD PROCESSING ROUTINE ------------------------*\n*---------------------------------------------------------------------*\n         SPACE 1\nREADLOOP EQU   *\n         BAL   R14,PFLDGET             GO TO READ INPUT FILE\n         LA    R0,512                  GET MAX QUEUE RECORD LENGTH\n         CR    R2,R0                   ... AND COMPARE WITH INPUT BLOCK\n         SPACE 1\n*---------------------------------------------------------------------*\n*        POWER DATA BLOCKS MAY VARY FROM 548 TO 12288.                *\n*        IF SMALLER THAN 512 IT CAN ONLY BE A QUEUE RECORD.           *\n*---------------------------------------------------------------------*\n         SPACE 1\n         BNL   CHKBUFSZ                GO TO CHECK MAX BUFFER SIZE\n         CLI   42(R3),C'L'             IS IT LIST QUEUE DATA?\n         BE    READLOOP                YES, GO TO READ THE DATA RECORDS\n         SPACE 1\n         MVC   IOAREA(L'MSGNOLST),MSGNOLST  SET-UP 'INV. INPUT' MESSAGE\n         MVC   IOAREA+L'MSGNOLST(L'MSGTERM),MSGTERM\n         BAL   R14,ISSUEMSG            GO TO ISSUE MESSAGE\n         LA    R15,16                  SET-UP APPROPRIATE RETURN CODE\n         B     ABEND                   ... AND GO TO ABEND PROGRAM RUN\n         SPACE 1\nCHKBUFSZ EQU   *\n         L     R0,BUFSIZE              GET MAXIMUM BUFFER SIZE (16K)\n         CR    R2,R0                   ... AND COMPARE WITH INPUT BLOCK\n         BNH   PRTLOOP                 ABEND PGM IF BUFFER IS TOO SMALL\n         SPACE 1\n         MVC   IOAREA(L'MSGBUFSZ),MSGBUFSZ  SET-UP 'BUF. TOO SMALL' MSG\n         MVC   IOAREA+L'MSGBUFSZ(L'MSGTERM),MSGTERM\n         BAL   R14,ISSUEMSG            GO TO ISSUE MESSAGE\n         LA    R15,16                  SET-UP APPROPRIATE RETURN CODE\n         B     ABEND                   ... AND GO TO ABEND PROGRAM RUN\n         SPACE 1\nPRTLOOP  EQU   *\n         XR    R4,R4                   CLEAR REG FOR SUBSEQUENT IC\n         ICM   R4,B'0011',0(R3)        GET VARIABLE RECORD LENGTH\n         USING POWERREC,R3             MAKE LOGICAL RECORD ADDRESSABLE\n         LTR   R4,R4                   IF ZERO, END OF BLOCK REACHED\n         BZ    READLOOP                THEN GO TO READ NEXT RECORD\n         SPACE 1\n*---------------------------------------------------------------------*\n*        UNIT RECORD CONTROL CHARACTER X'FF' INDICATES                *\n*        (REDUNDANT) JSEP INFORMATIONS, WHICH CAN BE SKIPPED.         *\n*---------------------------------------------------------------------*\n         SPACE 1\n         CLI   POWERCC,PWRINVCC        INVALID CONTROL CHARACTER?\n         BE    NEXTREC                 YES, TRY NEXT RECORD\n         MVC   PRTCC,POWERCC           MOVE PRINT CONTROL CHARACTER\n         LR    R5,R4                   GET LOGICAL RECORD LENGTH\n         LA    R0,5                    SET DEFAULT CORRECTION FACTOR\n         SR    R5,R0                   SET ACTUAL LENGTH FOR 'EXECUTE'\n         BCTR  R0,0                    SET CORRECTION VALUE TO 4 AND\n         CR    R5,R0                   ... COMPARE WICH REMAINING LRECL\n         BNH   NORMREC                 LESS 4, CAN'T BE EXTENDED INFO\n         LA    R6,DATAREC2             MAKE EXTENDED RECORD ADDRESSABLE\n         SPACE 1\n*---------------------------------------------------------------------*\n*        THERE ARE DIFFERENT LAYOUTS OF A POWER RECORD POSSIBLE       *\n*        DEPENDENT ON THE POWER RELEASE:                              *\n*        AFTER THE COMMAND CODE (4TH BYTE IN LOGICAL DATA RECORD)     *\n*        THERE MAY BE ANOTHER 4 SYSTEM CONTROL BYTES, IN PARTICULIAR  *\n*        2 FLAG BYTES AND A HALFWORD CONTAINING A LENGTH.             *\n*        THE FOLLOWING LOGIC CHECKS THESE 4 BYTES. IF ONE OF THEM     *\n*        IS LESS THAN BLANK, THIS INDICATES THAT WE HAVE A RECORD     *\n*        WITH EXTENDED CONTROL INFORMATION, AND THIS RECORD           *\n*        PORTION HAS TO BE SKIPPED.                                   *\n*---------------------------------------------------------------------*\n         SPACE 1\n         LA    R7,4                    SET LOOP COUNTER\nCHECKPFX EQU   *\n         BCTR  R6,0                    POINT TO NEXT POSITION TO TEST\n         CLI   0(R6),X'40'             IS IT A PRINTABLE CHARACTER?\n         BL    ADJUST                  NO, RECORD HAS TO BE ADJUSTED\n         BCT   R7,CHECKPFX             ... ELSE TRY NEXT POSITION\n         SPACE 1\nNORMREC  EQU   *                       PROCESS 'NORMAL' POWER RECORD\n         LA    R6,DATAREC1\n         B     CHECKLEN\n         SPACE 1\nADJUST   EQU   *                       ADJUST LOGICAL DATA RECORD\n         SR    R5,R0                   CORRECT 'EXECUTE' RECORD LENGTH\n         LA    R6,DATAREC2             ... AND POINT TO LOGICAL RECORD\n         SPACE 1\nCHECKLEN EQU   *                       CHECH ACTUAL DATA RECORD LENGTH\n         CH    R5,=AL2(L'IOAREA)       ABEND IF ACTUAL RECORD LENGTH\n         BL    MOVEDATA                ... EXCEEDS PRINT IOAREA LENGTH\n         SPACE 1\n         MVC   IOAREA(L'MSGRECSZ),MSGRECSZ  SET-UP 'REC. TOO SMALL' MSG\n         MVC   IOAREA+L'MSGRECSZ(L'MSGTERM),MSGTERM\n         BAL   R14,ISSUEMSG            GO TO ISSUE MESSAGE\n         LA    R15,16                  SET-UP APPROPRIATE RETURN CODE\n         B     ABEND                   ... AND GO TO ABEND PROGRAM RUN\n         SPACE 1\nMOVEDATA EQU   *\n         MVC   IOAREA(0),0(R6)     *** EXECUTED MOVE\n         EX    R5,*-6                  MOVE RECORD INTO PRINT IOAREA\n         BAL   R14,PFLDPRT             ... AND PRINT IT OUT\n         MVI   IOAREA,X'40'            CLEAR PRINT IOAREA\n         MVC   IOAREA+1(L'IOAREA-1),IOAREA\n         SPACE 1\nNEXTREC  EQU   *\n         TM    PWRGPB1,PWRGPEOD        END OF DATA ENCOUNTERED?\n         BO    CLOSE                   YES, TERMINATE\n         TM    PWRGPB1,PWRGPEOB        END OF BLOCK ENCOUNTERED?\n         BO    READLOOP                YES, READ NEXT BLOCK\n         AR    R3,R4                   POINT TO NEXT LOGICAL RECORD\n         B     PRTLOOP                 ... AND PROCESS IT\n         TITLE 'POFFLOAD        PROGRAM TERMINATION ROUTINE'\n*---------------------------------------------------------------------*\n*------------- PROGRAM TERMINATION ROUTINE ---------------------------*\n*---------------------------------------------------------------------*\n         SPACE 1\nCLOSE    EQU   *\n         BAL   R14,PFLDCLOS            GO TO CLOSE FILE(S)\n         SPACE 1\n         CVD   R8,WORKAREA             SET-UP INPUT STATISTICS MESSAGE\n         MVC   IOAREA(L'MSGICNT),MSGICNT\n         MVC   IOAREA+L'MSGICNT(L'CNTRMASK),CNTRMASK\n         ED    IOAREA+L'MSGICNT(L'CNTRMASK),WORKAREA+3\n         BAL   R14,ISSUEMSG            GO TO ISSUE MESSAGE\n         CVD   R9,WORKAREA             SET-UP OUTPUT STATISTICS MESSAGE\n         MVC   IOAREA(L'MSGOCNT),MSGOCNT\n         MVC   IOAREA+L'MSGOCNT(L'CNTRMASK),CNTRMASK\n         ED    IOAREA+L'MSGOCNT(L'CNTRMASK),WORKAREA+3\n         BAL   R14,ISSUEMSG            GO TO ISSUE MESSAGE\n         SPACE 1\n         XR    R15,R15                 CLEAR RETURN CODE REGISTER\n         LTR   R8,R8                   CHECK IF WE HAD INPUT AT ALL\n         BNZ   POFFEXIT\n         SPACE 1\n         MVC   IOAREA(L'MSGNULL),MSGNULL  SET-UP 'NO INPUT' MESSAGE\n         MVC   IOAREA+L'MSGNULL(L'MSGTERM),MSGTERM\n         BAL   R14,ISSUEMSG            GO TO ISSUE MESSAGE\n         LA    R15,4                   SET-UP APPROPRIATE RETURN CODE\n         SPACE 1\n        EPILOG RTC=YES                 ... AND TERMINATE PROGRAM\n         TITLE 'POFFLOAD        DEFINITIONS AND CONSTANTS'\n*---------------------------------------------------------------------*\n*------------- DEFINITIONS AND CONSTANTS -----------------------------*\n*---------------------------------------------------------------------*\n         SPACE 1\nSAVEAREA SAVEA WORKA=YES,              COMMON SAVE AND WORK AREAS      +\n               HEXTAB=YES              ... AND HX DIGITS TRANS TABLE\n         EJECT\nBUFSIZE  DC    F'16384'                MAXIMUM BUFFER SIZE\nBUFADDR  DC    F'0'                    INPUT BUFFER ADDRESS\n         SPACE 1\n         PRINT NODATA\nWTOMSG   DC    AL2(WTOMSGL)            OS WTO MESSAGE LENGTH FIELD\nWTOMSGPX DC    X'8000'                 OS WTO MESSAGE PREFIX\n         DC    CL68' '                 CONSOLE MESSAGE IOAREA\nWTOMSGL  EQU   *-WTOMSG                OS WTO MESSAGE LENGTH\nWTOMSGSX DC    X'0000'                 OS WTO MESSAGE SUFFIX\n         SPACE 1\n         ORG   WTOMSG+3                RE-DEFINITION\n         SPACE 1\nPRTLINE  DS    0CL133                  PRINTER OUTPUT IOAREA DEFINITION\nPRTCC    DC    CL1' '                  PRINTER CONTROL CHARACTER\nIOAREA   DC    CL132' '                PRINTER IOAREA\n         PRINT DATA\n         SPACE 2\nMSGNULL  DC    C'INPUT FILE EMPTY'\nMSGNOLST DC    C'NO LIST (QUEUE) DATA ON INPUT FILE'\nMSGBUFSZ DC    C'FILE INPUT BUFFER EXHAUSTED'\nMSGRECSZ DC    C'PRINT BUFFER EXHAUSTED'\nMSGTERM  DC    C' - RUN TERMINATED'\nMSGICNT  DC    C'INPUT BLOCKS READ: '  INPUT COUNT MESSAGE\nMSGOCNT  DC    C'RECORDS PRINTED:   '  OUTPUT COUNT MESSAGE\nCNTRMASK DC    X'402020204B2020204B202120'  EDIT MASK FOR COUNTERS\n         EJECT\n         PATCH 32,PATCH                PATCH AREA DEFINITION\n         DC    CL48'OPERATING SYSTEM DEPENDENT CODE STARTS HERE --->'\n         DS    0H                      HALFWORD ALIGNMENT\n         AIF   ('&SYSPARM' EQ 'DOS').ROUTCOM\n         SPACE 6\n         USING IHADCB,R1               ESTABLISH DCB ADDRESSABILITY\n.ROUTCOM ANOP\n         TITLE 'POFFLOAD        OPERATING SYSTEM DEPENDENT FILE ACCESS +\n               ROUTINES'\n*---------------------------------------------------------------------*\n*------------- FILE(S) OPEN ROUTINE ----------------------------------*\n*---------------------------------------------------------------------*\n         SPACE 1\nPFLDOPEN EQU   *\n         ST    R14,RETADDR             SAVE RETURN ADDRESS REGISTER\n         L     R0,BUFSIZE              GET DEFAULT BUFFER SIZE\n         AIF   ('&SYSPARM' EQ 'OS').OPENOS\n.OPENDOS ANOP                      === DOS OPEN =======================\n         LR    R2,R0                   SAVE THIS DEFAULT BUFFER SIZE\n        GETVIS ADDRESS=(1),            DYNAMIC AREA ADDRESS            +\n               LENGTH=(0)              LENGTH OF AREA TO BE REQUESTED\n         LTR   R15,R15                 ANY ERROR ENCOUNTERED?\n         BZ    PFLDCONT                NO, CONTINUE PROCESSING\n         STC   R15,WORKAREA            GET MACRO RETURN CODE\n         HEXTR MACRORTC,WORKAREA(2)    ... AND MAKE IT READABLE\n         MVC   IOAREA(LOGMSGL),LOGMSG  MOVE CONSOLE MESSAGE TO IOAREA\n         BAL   R14,ISSUEMSG            GO TO ISSUE CONSOLE MESSAGE\n         B     ABEND                   THEN GO TO ABEND PROGRAM\n         SPACE 1\nPFLDCONT EQU   *\n         LA    R1,0(,R1)               SET AREA ADDRESS PROPERLY\n         ST    R1,BUFADDR              ... AND SAVE IT\n         STCM  R1,B'0111',MTIOACCW     SET-UP DTFMT'S IOAREA\n         STH   R2,MTBLKCCW             ... POINTERS AND BLOCK SIZES\n         STH   R2,MTBLKSZ\n         BCTR  R2,0                    COMPUTE BLOCK SIZE MINUS ONE\n         STH   R2,MTBLKM1\n         STCM  R1,B'1111',MTIOAALT\n         STCM  R1,B'1111',MTIOANO\n         SPACE 1\n         OPEN  PWRTAPE                 OPEN INPUT FILE\n         AGO   .OPENCOM\n.OPENOS  ANOP                      === OS OPEN ========================\n         LA    R1,PWRTAPE              ALSO MAKE DCB ADDRESSABLE\n         STH   R0,DCBBLKSI             ... TO STORE INPUT BUFFER SIZE\n         OPEN  (PWRTAPE,(INPUT),       OPEN POWER OFFLOAD INPUT TAPE   +\n               IJSYSLS,(OUTPUT))       ... AND PRINT OUTPUT FILE\n.OPENCOM ANOP                      === COMMON CODE ====================\n         L     R14,RETADDR             LOAD RETURN ADDRESS REGISTER\n         BR    R14                     ... AND RETURN\n         EJECT\n*---------------------------------------------------------------------*\n*------------- FILE(S) CLOSE ROUTINE ---------------------------------*\n*---------------------------------------------------------------------*\n         SPACE 1\nPFLDCLOS EQU   *\n         ST    R14,RETADDR             SAVE RETURN ADDRESS REGISTER\n         AIF   ('&SYSPARM' EQ 'OS').CLOSOS\n.CLOSDOS ANOP                      === DOS CLOSE ======================\n         CLOSE PWRTAPE                 CLOSE INPUT FILE\n         AGO   .CLOSCOM\n.CLOSOS  ANOP                      === OS CLOSE AND END OF JOB ========\n*\n*  IF YOU WANT TO PRINT MULTIPLE FILES IN ONE LIST,\n*  DO NOT CLOSE IJSYSLS.\n*  ESP. FOR INVOCATION UNDER VM\n*\n         CLOSE (PWRTAPE,,IJSYSLS)      CLOSE INPUT AND OUTPUT FILES\n.CLOSCOM ANOP                      === COMMON CODE ====================\n         L     R14,RETADDR             LOAD RETURN ADDRESS REGISTER\n         BR    R14                     ... AND RETURN\n         EJECT\n*---------------------------------------------------------------------*\n*------------- POFFLOAD TAPE READ ROUTINE ----------------------------*\n*---------------------------------------------------------------------*\n         SPACE 1\nPFLDGET  EQU   *\n         ST    R14,RETADDR             SAVE RETURN ADDRESS REGISTER\n         GET   PWRTAPE                 GET ONE PHYSICAL BLOCK\n         AIF   ('&SYSPARM' EQ 'OS').READOS\n.READDOS ANOP                      === DOS READ =======================\n         L     R3,BUFADDR              MAKE IOAREA ADDRESSABLE\n         AGO   .READCOM\n.READOS  ANOP                      === OS READ ========================\n         ST    R1,BUFADDR              SAVE INPUT BUFFER ADDRESS\n         LR    R3,R1                   MAKE IOAREA ADDRESSABLE\n         LA    R1,PWRTAPE              ALSO MAKE DCB ADDRESSABLE\n         LH    R2,DCBLRECL             ... TO GET ACTUAL BUFFER LENGTH\n.READCOM ANOP                      === COMMON CODE ====================\n         LA    R8,1(,R8)               INCREMENT INPUT BLOCKS COUNTER\n         L     R14,RETADDR             LOAD RETURN ADDRESS REGISTER\n         BR    R14                     ... AND RETURN\n         EJECT\n*---------------------------------------------------------------------*\n*------------- OUTPUT / MESSAGE PRINT ROUTINE ------------------------*\n*---------------------------------------------------------------------*\n         SPACE 1\nPFLDPRT  EQU   *\n         ST    R14,RETADDR             SAVE RETURN ADDRESS REGISTER\n         AIF   ('&SYSPARM' EQ 'OS').PRNTOS\n.PRNTDOS ANOP                      === DOS PRINT ======================\n         MVC   LSTCCW(1),PRTCC         GET PRINT CONTROL CHARACTER\n         LA    R1,LSTCCB               GET SYSLST CCB ADDRESS\n         BAL   R15,EXECIO              ... PRINT LINE\n         AGO   .PRNTCOM\n.PRNTOS  ANOP                      === OS PRINT =======================\n         PUT   IJSYSLS,PRTLINE         PRINT LINE\n.PRNTCOM ANOP                      === COMMON CODE ====================\n         LA    R9,1(,R9)               INCREMENT OUTPUT RECORDS COUNTER\n         L     R14,RETADDR             LOAD RETURN ADDRESS REGISTER\n         BR    R14                     ... AND RETURN\n         SPACE 3\n*---------------------------------------------------------------------*\n*------------- CONSOLE MESSAGE PRINT ROUTINE -------------------------*\n*---------------------------------------------------------------------*\n         SPACE 1\nISSUEMSG EQU   *                       PRINT CONSOLE MESSAGE\n         AIF   ('&SYSPARM' EQ 'OS').MSGOS\n.MSGDOS  ANOP                      === DOS CONSOLE MESSAGE ============\n         LA    R1,LOGCCB               GET SYSLOG CCB ADDRESS\n         BAL   R15,EXECIO              ... AND ISSUE MESSAGE\n         AGO   .MSGCOM\n.MSGOS   ANOP                      === OS CONSOLE MESSAGE =============\n         MVC   WTOMSGPX,=X'8000'       SET OS WTO MESSAGE PREFIX\n         XC    WTOMSGSX,WTOMSGSX       ... AND SUFFIX\n         LA    R1,WTOMSG               MAKE COMSOLE MESSAGE ADDRESSABLE\n         SVC   35                      ... AND ISSUE MESSAGE\n.MSGCOM  ANOP                      === COMMON CODE ====================\n         BR    R14                     ... AND RETURN\n         EJECT\n*---------------------------------------------------------------------*\n*------------- PROGRAM ABEND ROUTINE ---------------------------------*\n*---------------------------------------------------------------------*\n         SPACE 1\nABEND    EQU   *\n         AIF   ('&SYSPARM' EQ 'OS').DUMPOS\n.DUMPDOS ANOP                      === DOS ABEND DUMP REQUEST =========\n         JDUMP                         ABEND WITH A DUMP\n         SPACE 6\nEXECIO   EQU   *                       EXECUTE THE I/O\n         EXCP  (1)\n         WAIT  (1)\n         BR    R15                     RETURN\n         AGO   .DUMPCOM\n.DUMPOS  ANOP                      === OS ABEND DUMP REQUEST ==========\n         ABEND 888,DUMP                ABEND WITH A DUMP\n.DUMPCOM ANOP                      === COMMON CODE ====================\n         TITLE 'POFFLOAD        INPUT/OUTPUT DTF''S AND CCB''S - SYSLST+\n                OUTPUT DTF/DCB'\n*---------------------------------------------------------------------*\n*------------- INPUT/OUTPUT DTF'S AND CCB'S --------------------------*\n*---------------------------------------------------------------------*\n         SPACE 1\n*---------------------------------------------------------------------*\n*------------- DTF/DCB FOR PRINT OUTPUT ------------------------------*\n*---------------------------------------------------------------------*\n         SPACE 1\n         AIF   ('&SYSPARM' EQ 'OS').LISTOS\n.LISTDOS ANOP                      === DOS DTF DEFINITION =============\n         CNOP  0,8                     DOUBLEWORD ALIGNMENT\nLSTCCB   CCB   SYSLST,LSTCCW           SYSLST CCB\n         SPACE 1\nLSTCCW   CCW   X'09',IOAREA,0,132      ... AND ASSOCIATED CCW\n         SPACE 3\nLOGCCB   CCB   SYSLOG,LOGCCW           CCB FOR CONSOLE MESSAGE\n         SPACE 1\nLOGCCW   CCW   X'09',IOAREA,0,68       ... AND ASSOCIATED CCW\n         SPACE 1\nLOGMSG   EQU   *                       CONSOLE MESSAGE IOAREA\n         DC    C'GETVIS FAILURE CC '\nMACRORTC DC    CL2' '                  IBM MACRO REQUEST RETURN CODE\nLOGMSGL  EQU   *-LOGMSG\n         DC    X'40'                   FILLER, JUST USED FOR UNPACKING\n         AGO   .LISTCOM\n.LISTOS  ANOP                      === OS DCB DEFINITION ==============\nIJSYSLS  DCB   DDNAME=SYSPRINT,        FILE NAME                       +\n               DSORG=PS,               (PHYSICAL) SEQUENTIAL FILE      +\n               RECFM=FBM,              ... WITH MACHINE CONTROL CHAR'S +\n               MACRF=(PM),             PUT IN MOVE MODE                +\n               LRECL=133,              LOGICAL RECORD LENGTH           +\n               BLKSIZE=0               BLKSIZE=0 FOR DCB RE-BLOCKING\n.LISTCOM ANOP                      === COMMON CODE ====================\n         TITLE 'POFFLOAD        INPUT/OUTPUT DTF''S AND DCB''S - TAPE I+\n               NPUT DTF/DCB'\n*---------------------------------------------------------------------*\n*------------- POWER OFFLOAD TAPE INPUT DTF/DCB ----------------------*\n*---------------------------------------------------------------------*\n         SPACE 1\n         AIF   ('&SYSPARM' EQ 'OS').DCBOS\n.DTFDOS  ANOP                      === DOS DTF DEFINITION =============\nPWRTAPE  DTFMT TYPEFLE=INPUT,          INPUT TAPE                      +\n               DEVADDR=SYS010,         ... ASSIGNED BY SYS010          +\n               FILABL=NO,              ... UNLABELED                   +\n               REWIND=NORWD,           NO-REWIND AT OPEN/CLOSE TIME    +\n               RECFORM=UNDEF,          RECORD FORMAT IS UNDEFINED      +\n               RECSIZE=(2),            ... ACTUAL BLOCK SIZE IN REG.2  +\n               BLKSIZE=4096,       *** ... WITH MAXIMUM SIZE 4K        +\n               IOAREA1=INPUTBUF,   *** INPUT BUFFER AREA               +\n               EOFADDR=CLOSE,          ADDRESS OF END-OF-FILE ROUTINE  +\n               ERROPT=IGNORE           ERRORS ARE IGNORED\n         EJECT\n*---------------------------------------------------------------------*\n*        THE FOLLOWING FIELDS ARE RE-DEFINITIONS OF SELECTIVE         *\n*        FIELDS IN THE PRECEDING DTF. THESE HARD-CODED FIELDS         *\n*        ARE NECESSARY TO USE DYNAMIC IOAREAS (GETVIS!) WITH          *\n*        VARIABLE BLOCK SIZES DUE TO LACK OF FIELD NAMES AND          *\n*        REGISTER NOTATION FOR THESE FIELDS IN IBM'S DTF MACROS.      *\n*---------------------------------------------------------------------*\n         SPACE 1\n         ORG   PWRTAPE+X'39'\nMTIOACCW DC    AL3(INPUTBUF)           IOAREA IN READ CCW\n         ORG   PWRTAPE+X'3E'\nMTBLKCCW DS    H                       BLOCK SIZE IN READ CCW\n         ORG   PWRTAPE+X'44'\nMTIOAALT DC    A(INPUTBUF)             ALTERNATE IOAREA ADDRESS\n         ORG   PWRTAPE+X'4E'\nMTBLKM1  DS    H                       BLOCK SIZE MINUS ONE\n         ORG   PWRTAPE+X'40'\nMTIOANO  DC    A(INPUTBUF)             NUMBER OF IOAREAS\n         ORG   PWRTAPE+X'4C'\nMTBLKSZ  DS    H                       BLOCK SIZE\n         ORG\n         SPACE 2\nINPUTBUF EQU   *                   *** DUMMY TAPE INPUT IOAREA\n         AGO   .TAPECOM\n.DCBOS   ANOP                      === OS DCB DEFINITION ==============\nPWRTAPE  DCB   DDNAME=PWRTAPE,         FILE NAME                       +\n               DSORG=PS,               (PHYSICAL) SEQUENTIAL FILE      +\n               RECFM=U,                RECORD FORMAT IS UNDEFINED      +\n               BLKSIZE=4096,       *** ... WITH MAXIMUM SIZE 4K        +\n               EODAD=CLOSE,            ADDRESS OF END-OF-FILE ROUTINE  +\n               MACRF=(GL),             GET IN LOCATE-MODE              +\n               EROPT=ACC               ACCEPT DATA BLOCKS DESPITE ERROR\n         SPACE 1\n.TAPECOM ANOP                      === COMMON CODE ====================\n         TITLE 'POFFLOAD        LITERAL POOL'\n       LITPOOL END=NO                  LITERAL POOL\n         AIF   ('&SYSPARM' NE 'OS').PWRDSCT\n.DCBDSCT ANOP                      === OS DCB DSECT DESCRIPTION =======\n         TITLE 'POFFLOAD        DCB LAYOUT'\n*---------------------------------------------------------------------*\n*------------- DCB DUMMY SECTION -------------------------------------*\n*---------------------------------------------------------------------*\n         SPACE 1\n         DCBD  DSORG=(PS),             SEQUENTIAL ACCESS ONLY          +\n               DEVD=(DA,TA)            ... FOR BOTH DISK AND TAPE\n.PWRDSCT ANOP                      === COMMON CODE ====================\n         TITLE 'POFFLOAD        POWER LOGICAL DATA RECORD AREA DSECT'\n*---------------------------------------------------------------------*\n*------------- POWER LOGICAL DATA RECORD AREA DSECT ------------------*\n*---------------------------------------------------------------------*\n         SPACE 1\nPOWERREC DSECT\nPOWERECL DS    XL2                     LOGICAL RECORD LENGTH\nPWRGPB1  DS    X                       POWER GENERAL PURPOSE BYTE 1\nPWRGPNRM EQU   X'00'                   NORMAL RECORD\nPWRGPDUD EQU   X'02'                   3540 DATA RECORD\nPWRGPEOD EQU   X'04'                   END OF DATA\nPWRGPBRK EQU   X'08'                   BREAK RECORD\nPWRGPEOB EQU   X'10'                   END OF BLOCK\nPWRGPEDU EQU   X'20'                   END OF 3540 DATA\nPOWERCC  DS    X                       UR OUTPUT COMMAND CODE\nPWRINVCC EQU   X'FF'                   INVALID UR COMMAND CODE\n         SPACE 1\nDATAREC1 EQU   *                       ACTUAL DATA\n         SPACE 1\n*---------------------------------------------------------------------*\n*        THE NEXT 4 BYTES MAY CONTAIN EXTENDED CONTROL INFORMATION    *\n*        RATHER THAN PRINT DATA DEPENDING ON POWER VERSION/RELEASE.   *\n*---------------------------------------------------------------------*\n         SPACE 1\nPWRGPB2  DS    X                       POWER GENERAL PURPOSE BYTE 2\nPWRGPJHD EQU   X'80'                   JOB HEADER RECORD\nPWRGPJTR EQU   X'40'                   JOB TRAILER RECORD\nPWRGPDHD EQU   X'20'                   DATA SET HEADER RECORD\nPWRGPB3  DS    X                       POWER GENERAL PURPOSE BYTE 3\nPWRGPERB EQU   X'80'                   EXTENTED RECORD BEGIN\nPWRGPERM EQU   X'40'                   EXTENTED RECORD MIDDLE\nPWRGPERE EQU   X'20'                   EXTENTED RECORD END\nPOWERERL DS    XL2                     EXTENTED RECORD RESIDUAL LENGTH\n         SPACE 1\nDATAREC2 EQU   *                       ACTUAL DATA\n         SPACE 3\n         END   POFFLOAD\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "REX": {"ttr": 1030, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x98\\x06O\\x00\\x98\\x06O\\t1\\x00\\x85\\x00\\x85\\x00\\x00\\xd2\\xc6\\xc5\\xc9\\xc5\\xd9\\xe3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-03-05T00:00:00", "modifydate": "1998-03-05T09:31:00", "lines": 133, "newlines": 133, "modlines": 0, "user": "KFEIERT"}, "text": "/* ---------------------------------------------------------------- */\n/*  POFFLOAD EXEC                                                   */\n/*  AUTHOR:  MARTIN                                                 */\n/*  DATE:    13 Feb 1992  translated 05 Mar 1998 by Knut            */\n/* ---------------------------------------------------------------- */\n/*  ABSTRACT:                                                       */\n/*  Reads a tape in Power Offload Format                            */\n/*  and prints it to your VM READER                                 */\n/*                                                                  */\n/*  PARAMETER:                                                      */\n/*  NR:      Number of files on tape                                */\n/*  OP:      OnePrintfile (Y / N)  specifies whether all files are  */\n/*           to be printed to one PRT file or to print them         */\n/*           separately.  (Program POFFLOAD should not close PRT    */\n/*           output. See comment in program)                        */\n/*  PRTNAME: Name of the PRT file. Filetype is  PWDUMP,             */\n/*           for separate files PWDUMP1, PWDUMP2 ...                */\n/*                                                                  */\n/*  If the files are limited by a TapeMark you may specify a large  */\n/*  number for NR (e.g. 99). Reaching the TapeMark the program      */\n/*  stops with a RC of 4.                                           */\n/*                                                                  */\n/* ---------------------------------------------------------------- */\n\nTRACE n;\n\n/* ---------------------------------------------------------------- */\n/*  Set Defaults                                                    */\n/* ---------------------------------------------------------------- */\nnr        = 99;\nop        = N;\nprtname   = TAPE;\n\nfileno    = 1;\nretcode   = 0;\n\nparse upper arg kette\n\n/* ---------------------------------------------------------------- */\n/*  Input loop                                                      */\n/* ---------------------------------------------------------------- */\nDO forever\n\n   parse upper value kette with 'NR ' input .\n   IF input /= \"\" THEN nr      = input;\n   parse upper value kette with 'OP ' input .\n   IF input /= \"\" THEN op      = input;\n   parse upper value kette with 'PRTNAME ' input .\n   IF input /= \"\" THEN prtname = input;\n\n   IF op /= 'N' THEN op = 'Y';\n\n   call out;\n   pull kette;\n\n   IF kette = '' THEN leave;\n   IF KETTE = 'END' THEN EXIT 255;\nEND\n\nsay 'Please mount tape on 181 and confirm   ';\npull kette;\nIF kette = 'END' THEN EXIT 255;\n   'REW 181'\n\n'FILEDEF SYSPRINT PRINTER'\n'CP SPOOL PRT TO * NOHOLD CONT'\n/* 'TAPE FSR '  */\n   'FILEDEF PWRTAPE TAP1 LABOFF '\nDO WHILE (fileno <= nr) & (retcode == 0)\n\n   say 'File  No. 'fileno' is being printed    ';\n\n   fileno = fileno + 1;\n   'POFFLOAD'\n   'POFFLOAD'\n   retcode = rc;\n\n   IF op /= 'J' THEN\n   DO\n      'CP SPOOL PRT NOCONT';\n      'CP CLOSE PRT NAME 'prtname' PWDUMP'fileno-1;\n      'CP SPOOL PRT TO * NOHOLD CONT';\n   END\n\nEND\n\n\n'CP SPOOL PRT NOCONT'\n'CP CLOSE PRT NAME 'prtname' PWDUMP';\n\nexit retcode;\n\n/* ---------------------------------------------------------------- */\n/*  Output mask                                                     */\n/* ---------------------------------------------------------------- */\nout:\n\ntab1=25;\nOPJ = '(Y/N) One PRT file is created           ';\nOPN = '(Y/N) Separate PRT files are created         ';\n\nl.1 =   \"+---------------------------------------\"\nl.1 = l.1\"---------------------------------------+\"\nl.2 =   \"!                                       \"\nl.2 = l.2\"                                       !\"\n\nl.2 = overlay('POFFLOAD',l.2,4,);\nl.2 = overlay(date(european), l.2, 60);\nl.2 = overlay(time(), l.2, 70);\nl.2 = overlay('For User 'userid(), l.2, tab1);\nl.3 = l.1;\nl.4 = ''\nl.5 = 'NR        = 'nr;\nl.5 = overlay('Number of files to be printed   ', l.5, tab1);\nl.6 = 'OP        = 'op;\n\nIF OP == 'N' THEN\n   l.6 = overlay(OPN, l.6, tab1);\nELSE\n   l.6 = overlay(OPJ, l.6, tab1);\n\nl.7 = 'PRTNAME   = 'prtname;\nl.7 = overlay('Name of print file ', l.7, tab1);\nl.8 = ''\nl.9 = 'If these values are correct please confirm with ENTER      '\nl.10= 'or key in new values (e.g. nr 6 op y)     ';\nl.11= 'or END for stop, tape will not be read.    '\nl.12= ''\n'CLS'\nDO i = 1 to 12\n   say l.i\nEND\nreturn;\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "REXGERMN": {"ttr": 1033, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x98\\x06O\\x00\\x98\\x06O\\tR\\x00\\x84\\x00\\x84\\x00\\x00\\xd2\\xc6\\xc5\\xc9\\xc5\\xd9\\xe3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-03-05T00:00:00", "modifydate": "1998-03-05T09:52:00", "lines": 132, "newlines": 132, "modlines": 0, "user": "KFEIERT"}, "text": "/* ---------------------------------------------------------------- */\n/*  POFFLOAD EXEC                                                   */\n/*  AUTHOR:  MARTIN                                                 */\n/*  DATE:    13 Feb 1992                                            */\n/* ---------------------------------------------------------------- */\n/*  ABSTRACT:                                                       */\n/*  Liest ein Band, welches im Power Offload Format vorliegt        */\n/*  und druckt es in den READER                                     */\n/*                                                                  */\n/*  PARAMETER:                                                      */\n/*  NR:      Anzahl der Dateien auf dem Band                        */\n/*  OP:      OnePrintfile (J / N)  gibt an, ob alle Dateien in ein  */\n/*           PRT-file geschrieben werden soll oder auf mehrere (nr) */\n/*           verteilt wird                                          */\n/*  PRTNAME: Name des PRT-Files. Der filetype ist PWDUMP,           */\n/*           bei mehreren PWDUMP1, PWDUMP2 ...                      */\n/*                                                                  */\n/*  Wenn die Dateien mit einer TapeMark abgeschlossen werden, kann  */\n/*  man fuer NR eine grosse Zahl (zB 99) angeben, bei erreichen der */\n/*  TapeMark wird mit RC 4 abgebrochen.                             */\n/*                                                                  */\n/* ---------------------------------------------------------------- */\n\nTRACE n;\n\n/* ---------------------------------------------------------------- */\n/*  Defaults besetzen                                               */\n/* ---------------------------------------------------------------- */\nnr        = 99;\nop        = N;\nprtname   = TAPE;\n\nfileno    = 1;\nretcode   = 0;\n\nparse upper arg kette\n\n/* ---------------------------------------------------------------- */\n/*  Eingabeschleife                                                 */\n/* ---------------------------------------------------------------- */\nDO forever\n\n   parse upper value kette with 'NR ' input .\n   IF input /= \"\" THEN nr      = input;\n   parse upper value kette with 'OP ' input .\n   IF input /= \"\" THEN op      = input;\n   parse upper value kette with 'PRTNAME ' input .\n   IF input /= \"\" THEN prtname = input;\n\n   IF op /= 'N' THEN op = 'J';\n\n   call out;\n   pull kette;\n\n   IF kette = '' THEN leave;\n   IF kette = 'ENDE' THEN EXIT 255;\nEND\n\nsay 'Bitte Band auf 181 legen und bestdtigen';\npull kette;\nIF kette = 'ENDE' THEN EXIT 255;\n   'REW 181'\n\n'FILEDEF SYSPRINT PRINTER'\n'CP SPOOL PRT TO * NOHOLD CONT'\n/* 'TAPE FSR '  */\n   'FILEDEF PWRTAPE TAP1 LABOFF '\nDO WHILE (fileno <= nr) & (retcode == 0)\n\n   say 'Datei Nr. 'fileno' wird gerade gedruckt';\n\n   fileno = fileno + 1;\n   'POFFLOAD'\n   'POFFLOAD'\n   retcode = rc;\n\n   IF op /= 'J' THEN\n   DO\n      'CP SPOOL PRT NOCONT';\n      'CP CLOSE PRT NAME 'prtname' PWDUMP'fileno-1;\n      'CP SPOOL PRT TO * NOHOLD CONT';\n   END\n\nEND\n\n\n'CP SPOOL PRT NOCONT'\n'CP CLOSE PRT NAME 'prtname' PWDUMP';\n\nexit retcode;\n\n/* ---------------------------------------------------------------- */\n/*  Ausgabemaske                                                    */\n/* ---------------------------------------------------------------- */\nout:\n\ntab1=25;\nOPJ = '(J/N) Es wird in eine PRT-Datei gedruckt';\nOPN = '(J/N) Es wird in mehrere PRT-Dateien gedruckt';\n\nl.1 =   \"+---------------------------------------\"\nl.1 = l.1\"---------------------------------------+\"\nl.2 =   \"!                                       \"\nl.2 = l.2\"                                       !\"\n\nl.2 = overlay('POFFLOAD',l.2,4,);\nl.2 = overlay(date(european), l.2, 60);\nl.2 = overlay(time(), l.2, 70);\nl.2 = overlay('Fuer User 'userid(), l.2, tab1);\nl.3 = l.1;\nl.4 = ''\nl.5 = 'NR        = 'nr;\nl.5 = overlay('Anzahl der zu druckenden Dateien', l.5, tab1);\nl.6 = 'OP        = 'op;\n\nIF OP == 'N' THEN\n   l.6 = overlay(OPN, l.6, tab1);\nELSE\n   l.6 = overlay(OPJ, l.6, tab1);\n\nl.7 = 'PRTNAME   = 'prtname;\nl.7 = overlay('Name der Druckdatei', l.7, tab1);\nl.8 = ''\nl.9 = 'Wenn diese Werte richtig sind, mit DatenFreigabe bestdtigen'\nl.10= 'oder neue Werte eingeben, (zB nr 6 op yes)';\nl.11= 'oder ENDE fuer Ende, Band wird nicht gelesen'\nl.12= ''\n'CLS'\nDO i = 1 to 12\n   say l.i\nEND\nreturn;\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT318/FILE318.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT318", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}