{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011324000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 1587222, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 14, "INMDSNAM": "CBT.V500.FILE136.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 1587222, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 1587222, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE136.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x1b\\x01'", "DS1TRBAL": "b'\\xe2\\xfa'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x01\\x01\\x00\\x02\\x01\\x02\\x00\\x0e\\x00\\x1c'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04b\\x00W\\x01\\x19!O\\x01\\x19!O\\x15&\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf8@@@'", "ispf": {"version": "04.98", "flags": 0, "createdate": "2019-08-02T00:00:00", "modifydate": "2019-08-02T15:26:57", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-498"}, "text": "REGULAR CBT TAPE - VERSION 498    FILE:  136\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT498.FILE136\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 50 MEMBERS COUNTED; CUMULATIVE SIZE IS 14,817 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   08/02/19    15:26:56    UTC-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$INDEX": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x007\\x00\\x891\\x8f\\x01\\x10\\x13?\\x184\\x00c\\x00b\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1989-11-14T00:00:00", "modifydate": "2010-05-13T18:34:37", "lines": 99, "newlines": 98, "modlines": 0, "user": "SBGOLOB"}, "text": "American President Lines, LTD.\nHoward M. Dean       07/16/89\n-----------------------------\n\nContents of this tape --\n------------------------------------------------------------------------\nMEMBER                       DESCRIPTION\n========================================================================\n$INDEX        This summary of tape contents (you are reading it)\nAAHLXXX       WTO exit for certain 'GTF' messages\nADFHXXX       WTO exit to process CICS journals\nAFNMXXX       WTO exit to process NDM log switch\nAIEAXXX       WTO exit to kick off job to copy SYS1.DUMPxx to IPCS\nAIEEXXX       WTO exit to highlight SMF dataset errors\nAPLCAMS       Program to call IDCAMS to allow VSAM allocation on SYSDA\nAPUT          Macro to call EPUTL for ASID TSO command\nASID          TSO/E command to show address space data (31-bit mode)\nBANNER        Block print PARM field (requires 'SYS1.AOSB0(IEFSD095)')\nBRODCAST      Program to scan 'SYS1.BRODCAST' dataset and report\nCARTCOPY      Program generate JCL to call CARTPROC and invoke NEWVOL\nCARTPROC      Cataloged procedure used with CARTCOPY\nCONSOLE       TSO command to display the operator console (XA 2.2)\nCPPL          Macro to generate TSO CPPL block\nCSPL          Macro to generate TSO CSPL block\nDATECONV      Convert JULIAN date to GREGORIAN\nDRDROID       VTAM Dynamic Reconfiguration deck builder\nENTER         Macro for entry to program (save registers, etc..)\nEPUTL         Routine to set up text and call PUTLINE for ASID command\n                  (Fixed to put out longer messages - SBG May 2010)\nHMDCHRON      Time keeper supreme (returns TOD in various formats)\nHMDTIME       Macro to map HMDCHRON 72 byte return area\nIKJEFF10      TSO/E SUBMIT exit--Modifies JOBNAME, NOTIFY ACF2 LOGONID\nINMXZ02       TSO/E XMIT exit to notify user on same system of MAIL\nINUSE         Macro to show registers assigned by LUSE\nIOPL          Macro to generate TSO IOPL block\nJULGREG       Julian/GREGORIAN conversion program - called my HMDCHRON\nLDROP         Macro to generate DROP statement\nLEAVE         Macro for exit from program (restore regs, etc..)\nLSPACE        TSO/E command to display available space on volumes\nLSPHELP       Help text for the LSPACE command\nLUSE          Macro to generate USING statement\nNEWVOL        Program to convert 3420-->3480 via FATS/FATAR in CA-1\nPDFINIT       TSO/E command to initialize profile for ISPF/PDF\nPPL           Macro to generate TSO PPL block\nREGS          Macro to generate register equates\nSETUSER       Insert ACF2 LOGONID and other fields for TSO in BATCH\nTAPESCAN      Tape scanning program - updated for 3480 drives\nTAPESDOC      Documentation for the TAPESCAN program (somewhat old)\nTSOENTER      Macro for entry to TSO commands\nTSOLEAVE      Macro for exiting TSO commands\nWRU           TSO/E command to display user identity\nXABSM         Macro to switch between 31-bit and 24-bit modes\n=======================================================================\nBe sure to specify this library as a 'SYSLIB' concatenation when you\nassemble any members. All necessary macros should be in 'SYS1.MACLIB',\n'SYS1.AMODGEN', appropriate product libraies (like ACF2, etc..), or in\nthis library. Some PROGRAMS called or refered to in this dataset\nbelong to program products (CA-1, CA-ACF2, etc..) so they are not\nincluded here. You must be licensed for the product called or refered\nto to use our code. If you are not, the code can be modified to remove\nreferences to the unlicensed product or it can remain unusable.  If\nyou need help, find anything missing, or would just like to chat about\nthese programs please contact me at:\n\n                    American President Systems\n                    ATTN: Howard M. Dean\n                    Three Waters Park Drive\n                    Suite 115\n                    San Mateo, CA 94403\n                    PHONE: (415) 570-2331\n\n\nREMEMBER--> READ THE DISCLAIMER BELOW:\n\nNone of the programs, routines, and macros in this dataset are\nguaranteed to work or be \"safe\". As with any PUBLIC DOMAIN software it\nis the responsibility of the receiving installation to TEST the\nsoftware before running it on their production systems. It may crash\nyour system, and if it does, American President Systems assumes no\nresponsibility.  Install this software on your system AT YOUR OWN\nRISK. Also, American President Systems does not guarantee to FIX any\nof these programs or UPGRADE them when they become obsolete. American\nPresident Systems may periodically put updated version of these and\nother programs on the CBT tape, but they are under no obligation to do\nso.  Many of these programs have run on our system, but that is NOT a\ngurarantee they will run on YOUR system. Caveat Emptor.\n\nNote also, that the same restrictions on responsibility for our\ninstallation (American President Systems) hold true for Howard Dean.\nI will, however, accept suggestions for improvements and answer\nquestions about these programs. A prompt reply, the correct answer, or\ntimely improvements are not guaranteed. If there are missing parts to\nthese programs, I will TRY to forward the macros or routines to Arnie\nat CBT, however I do not guarantee to do this in a timely manner.\nAlso, just because these routines are on the CBT tape, I am not\navailable for \"demand\" support and neither is Arnie Casinghino. You\nmay call us, but we cannot guarantee a correct and prompt answer to\nyour problem. Again, you are on your own!  Caveat Emptor.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@FILE136": {"ttr": 521, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04b\\x00I\\x01\\x19!O\\x01\\x19!O\\x15&\\x00z\\x00z\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf8@@@'", "ispf": {"version": "04.98", "flags": 0, "createdate": "2019-08-02T00:00:00", "modifydate": "2019-08-02T15:26:49", "lines": 122, "newlines": 122, "modlines": 0, "user": "CBT-498"}, "text": "//***FILE 136 is from Mr Howard Dean of Alameda, California.        *   FILE 136\n//*           THIS FILE IS IN IEBUPDTE SYSIN FORMAT AND             *   FILE 136\n//*           CONTAINS THE FOLLOWING MEMBERS:  FOR ADDITIONAL       *   FILE 136\n//*           INFORMATION SEE THE MEMBER CALLED $INDEX              *   FILE 136\n//*                                                                 *   FILE 136\n//*       Howard Dean has contributed another file, CBT File 119,   *   FILE 136\n//*       which is of earlier date than this file.  When looking    *   FILE 136\n//*       at programs from this file, CBT File 119 may also be      *   FILE 136\n//*       a useful reference to look at, but this file is later.    *   FILE 136\n//*                                                                 *   FILE 136\n//*       further support:  Sam Golob                               *   FILE 136\n//*                 email:  sbgolob@cbttape.org                     *   FILE 136\n//*                         sbgolob@att.net                         *   FILE 136\n//*                                                                 *   FILE 136\n//*           AAHLXXX       WTO EXIT FOR CERTAIN 'GTF' MESSAGES     *   FILE 136\n//*           ADFHXXX       WTO EXIT TO PROCESS CICS JOURNALS       *   FILE 136\n//*           AFNMXXX       WTO EXIT TO PROCESS NDM LOG SWITCH      *   FILE 136\n//*           AIEAXXX       WTO EXIT TO KICK OFF JOB TO COPY        *   FILE 136\n//*                         SYS1.DUMPXX TO IPCS                     *   FILE 136\n//*           AIEEXXX       WTO EXIT TO HIGHLIGHT SMF DATASET       *   FILE 136\n//*                         ERRORS                                  *   FILE 136\n//*           APLCAMS       PROGRAM TO CALL IDCAMS TO ALLOW VSAM    *   FILE 136\n//*                         ALLOCATION ON SYSDA                     *   FILE 136\n//*           APUT          MACRO TO CALL EPUTL FOR ASID TSO        *   FILE 136\n//*                         COMMAND                                 *   FILE 136\n//*           ASID          TSO/E COMMAND TO SHOW ADDRESS SPACE     *   FILE 136\n//*                         DATA (31-BIT MODE)                      *   FILE 136\n//*           BANNER        BLOCK PRINT PARM FIELD (REQUIRES        *   FILE 136\n//*                         'SYS1.AOSB0(IEFSD095)')                 *   FILE 136\n//*           BRODCAST      PROGRAM TO SCAN 'SYS1.BRODCAST' DATASET *   FILE 136\n//*                         AND REPORT                              *   FILE 136\n//*           CARTCOPY      PROGRAM GENERATE JCL TO CALL CARTPROC   *   FILE 136\n//*                         AND INVOKE NEWVOL                       *   FILE 136\n//*           CARTPROC      CATALOGED PROCEDURE USED WITH CARTCOPY  *   FILE 136\n//*           CONSOLE       TSO COMMAND TO DISPLAY THE OPERATOR     *   FILE 136\n//*                         CONSOLE (XA 2.2)                        *   FILE 136\n//*           CPPL          MACRO TO GENERATE TSO CPPL BLOCK        *   FILE 136\n//*           CSPL          MACRO TO GENERATE TSO CSPL BLOCK        *   FILE 136\n//*           DATECONV      CONVERT JULIAN DATE TO GREGORIAN        *   FILE 136\n//*           DRDROID       VTAM DYNAMIC RECONFIGURATION DECK       *   FILE 136\n//*                         BUILDER                                 *   FILE 136\n//*           ENTER         MACRO FOR ENTRY TO PROGRAM (SAVE        *   FILE 136\n//*                         REGISTERS, ETC..)                       *   FILE 136\n//*           EPUTL         ROUTINE TO SET UP TEXT AND CALL PUTLINE *   FILE 136\n//*                         FOR ASID COMMAND                        *   FILE 136\n//*                         (Cleaned up a bit by Sam Golob.)        *   FILE 136\n//*           HMDCHRON      TIME KEEPER SUPREME (RETURNS TOD IN     *   FILE 136\n//*                         VARIOUS FORMATS)                        *   FILE 136\n//*           HMDTIME       MACRO TO MAP HMDCHRON 72 BYTE RETURN    *   FILE 136\n//*                         AREA                                    *   FILE 136\n//*           IKJEFF10      TSO/E SUBMIT EXIT--MODIFIES JOBNAME,    *   FILE 136\n//*                         NOTIFY ACF2 LOGONID                     *   FILE 136\n//*           INMXZ02       TSO/E XMIT EXIT TO NOTIFY USER ON SAME  *   FILE 136\n//*                         SYSTEM OF MAIL                          *   FILE 136\n//*           INUSE         MACRO TO SHOW REGISTERS ASSIGNED BY     *   FILE 136\n//*                         LUSE                                    *   FILE 136\n//*           IOPL          MACRO TO GENERATE TSO IOPL BLOCK        *   FILE 136\n//*           JULGREG       JULIAN/GREGORIAN CONVERSION PROGRAM -   *   FILE 136\n//*                         CALLED MY HMDCHRON                      *   FILE 136\n//*           LDROP         MACRO TO GENERATE DROP STATEMENT        *   FILE 136\n//*           LEAVE         MACRO FOR EXIT FROM PROGRAM (RESTORE    *   FILE 136\n//*                         REGS, ETC..)                            *   FILE 136\n//*           LSPACE        TSO/E COMMAND TO DISPLAY AVAILABLE      *   FILE 136\n//*                         SPACE ON VOLUMES                        *   FILE 136\n//*           LSPHELP       HELP TEXT FOR THE LSPACE COMMAND        *   FILE 136\n//*           LUSE          MACRO TO GENERATE USING STATEMENT       *   FILE 136\n//*           NEWVOL        PROGRAM TO CONVERT 3420-->3480 VIA      *   FILE 136\n//*                         FATS/FATAR IN CA-1                      *   FILE 136\n//*           PDFINIT       TSO/E COMMAND TO INITIALIZE PROFILE FOR *   FILE 136\n//*                         ISPF/PDF                                *   FILE 136\n//*           PPL           MACRO TO GENERATE TSO PPL BLOCK         *   FILE 136\n//*           REGS          MACRO TO GENERATE REGISTER EQUATES      *   FILE 136\n//*           SETUSER       INSERT ACF2 LOGONID AND OTHER FIELDS    *   FILE 136\n//*                         FOR TSO IN BATCH                        *   FILE 136\n//*           TAPESCAN      TAPE SCANNING PROGRAM - UPDATED FOR     *   FILE 136\n//*                         3480 DRIVES                             *   FILE 136\n//*           TAPESDOC      DOCUMENTATION FOR THE TAPESCAN PROGRAM  *   FILE 136\n//*                         (SOMEWHAT OLD)                          *   FILE 136\n//*           TSOENTER      MACRO FOR ENTRY TO TSO COMMANDS         *   FILE 136\n//*           TSOLEAVE      MACRO FOR EXITING TSO COMMANDS          *   FILE 136\n//*           WRU           TSO/E COMMAND TO DISPLAY USER IDENTITY  *   FILE 136\n//*           XABSM         MACRO TO SWITCH BETWEEN 31-BIT AND      *   FILE 136\n//*                         24-BIT MODES                            *   FILE 136\n//*                                                                 *   FILE 136\n//*           =============================================         *   FILE 136\n//*                                                                 *   FILE 136\n//*           NONE OF THE PROGRAMS, ROUTINES, AND MACROS IN THIS    *   FILE 136\n//*           DATASET ARE GUARANTEED TO WORK OR BE \"SAFE\". AS WITH  *   FILE 136\n//*           ANY PUBLIC DOMAIN SOFTWARE IT IS THE RESPONSIBILITY   *   FILE 136\n//*           OF THE RECEIVING INSTALLATION TO TEST THE SOFTWARE    *   FILE 136\n//*           BEFORE RUNNING IT ON THEIR PRODUCTION SYSTEMS. IT MAY *   FILE 136\n//*           CRASH YOUR SYSTEM, AND IF IT DOES, AMERICAN PRESIDENT *   FILE 136\n//*           SYSTEMS ASSUMES NO RESPONSIBILITY.  INSTALL THIS      *   FILE 136\n//*           SOFTWARE ON YOUR SYSTEM AT YOUR OWN RISK.  ALSO,      *   FILE 136\n//*           AMERICAN PRESIDENT SYSTEMS DOES NOT GUARANTEE TO FIX  *   FILE 136\n//*           ANY OF THESE PROGRAMS OR UPGRADE THEM WHEN THEY       *   FILE 136\n//*           BECOME OBSOLETE. AMERICAN PRESIDENT SYSTEMS MAY       *   FILE 136\n//*           PERIODICALLY PUT UPDATED VERSION OF THESE AND OTHER   *   FILE 136\n//*           PROGRAMS ON THE CBT TAPE, BUT THEY ARE UNDER NO       *   FILE 136\n//*           OBLIGATION TO DO SO.  MANY OF THESE PROGRAMS HAVE RUN *   FILE 136\n//*           ON OUR SYSTEM, BUT THAT IS NOT A GURARANTEE THEY WILL *   FILE 136\n//*           RUN ON YOUR SYSTEM. CAVEAT EMPTOR.                    *   FILE 136\n//*                                                                 *   FILE 136\n//*           NOTE ALSO, THAT THE SAME RESTRICTIONS ON              *   FILE 136\n//*           RESPONSIBILITY FOR OUR INSTALLATION (AMERICAN         *   FILE 136\n//*           PRESIDENT SYSTEMS) HOLD TRUE FOR HOWARD DEAN.  I      *   FILE 136\n//*           WILL, HOWEVER, ACCEPT SUGGESTIONS FOR IMPROVEMENTS    *   FILE 136\n//*           AND ANSWER QUESTIONS ABOUT THESE PROGRAMS. A PROMPT   *   FILE 136\n//*           REPLY, THE CORRECT ANSWER, OR TIMELY IMPROVEMENTS     *   FILE 136\n//*           ARE NOT GUARANTEED. IF THERE ARE MISSING PARTS TO     *   FILE 136\n//*           THESE PROGRAMS, I WILL TRY TO FORWARD THE MACROS OR   *   FILE 136\n//*           ROUTINES TO ARNIE AT CBT, HOWEVER I DO NOT GUARANTEE  *   FILE 136\n//*           TO DO THIS IN A TIMELY MANNER.  (YOU CAN'T, HOWARD.   *   FILE 136\n//*           YOU'D HAVE TO FORWARD THEM TO ME NOW).  ALSO, JUST    *   FILE 136\n//*           BECAUSE THESE ROUTINES ARE ON THE CBT TAPE, I AM NOT  *   FILE 136\n//*           AVAILABLE FOR \"DEMAND\" SUPPORT AND NEITHER IS ARNIE   *   FILE 136\n//*           CASINGHINO.  (PLEASE NOTICE THAT I AM NOT SAYING YOU  *   FILE 136\n//*           MAY CALL ME EITHER, BUT YOU CAN TRY).  YOU MAY CALL   *   FILE 136\n//*           US, BUT WE CANNOT GUARANTEE A CORRECT AND PROMPT      *   FILE 136\n//*           ANSWER TO YOUR PROBLEM. AGAIN, YOU ARE ON YOUR OWN!   *   FILE 136\n//*           CAVEAT EMPTOR.                                        *   FILE 136\n//*                                                                 *   FILE 136\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "AAHLXXX": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x891\\x8f\\x00\\x891\\x8f\\x108\\x01!\\x01!\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-11-14T00:00:00", "modifydate": "1989-11-14T10:38:00", "lines": 289, "newlines": 289, "modlines": 0, "user": "HMDEAN"}, "text": "AAHLXXX  TITLE 'WTO EXIT FOR GTF MESSAGE PROCESSING'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . AAHLXXX\n*\n*  DATE WRITTEN . . . . 04/85\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*\n*  ENVIRONMENT  . . . . MVS/XA WTO EXIT\n*\n*  FUNCTION\n*    RECEIVES CONTROL FOR VARIOUS GTF MESSAGES ( AHLXXX ).\n*    MAY RESPOND TO WTOR'S OR TAKE OTHER ACTIONS.\n*\n*\n*  DESCRIPTION:\n*    1) GETMAIN A SAVE AND WORK AREA\n*    2) BRANCH DEPENDING ON MESSAGE ID\n*\n*    AHL125I:\n*      FOR GTFVTAMA, GTFVTAMB, GTF2TAPE, GTFTAPEA AND GTFTAPEB\n*      RESPOND U TO THE STARTUP PROMPT.\n*\n*    3) FREEMAIN STORAGE\n*    4) RETURN\n*\n*\n*  REGISTERS AT ENTRY:\n*     R1 : @CTXT COMMTAS USER EXIT PARAMETER LIST\n*    R13 : @STANDARD SAVE AREA\n*    R14 : RETURN ADDRESS\n*    R15 : ENTRY POINT\n*\n*\n*  REGISTERS AT EXIT: ALL REGISTERS RESTORED\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*            ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                       WORK REGISTER\nR1       EQU   1                       INPUT PARMS AND WORK REGISTER\nR2       EQU   2                       MESSAGE ATTRIBUTES BAR\nR4       EQU   4                       MESSAGE TEXT BAR\nCTXTPTR  EQU   5                       CTXT BAR\nR7       EQU   7                       WORK REGISTER\nR11      EQU   11                      DYNAMIC STORAGE BAR\nR12      EQU   12                      BASE REGISTER\nR13      EQU   13                      SAVE AREA POINTER\nR14      EQU   14                      RETURN ADDRESS\nR15      EQU   15                      ENTRY ADDRESS\n*\n*\n*  CALLED MODULES: NONE\n*\n*  ASSUMPTIONS: MUST BE RUN UNDER AN MVS/XA SYSTEM\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*    AMODE=31\n*    RMODE=ANY\n*\n*  ABENDS: NONE\n*\n*\n*  MESSAGES (WTO'S):\n*    AAHLXXX - NO MESSAGE MATCH FOUND\n*      ISSUED IF MODULE INVOKED FOR OTHER THAN ITS INTENDED PURPOSES\n*\n*    AAHLXXX - NO TCT FURTHER PROCESSING ABORTED\n*       ISSUED IF TCBTCT ADDRESS IS NULL.\n*\n*\n*  CAVEATS:\n*    DO NOT ISSUE ANY WAITS IN THIS ROUTINE\n*    BE SURE TO LINK AS REENTRANT\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*            ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  IMPLEMENTATION NOTES:\n*    AFTER ASSEMBLY AND LINK LLA MUST BE RESTARTED\n*\n*    IN SYS1.PARMLIB(MPFLST??) MUST CONTAIN AT LEAST ONE OF THE\n*    FOLLOWING STATEMENTS:\n*\n*      AHL????,SUP(NO),USEREXIT(AAHLXXX)\n*\n*      WHERE AHL???? IS THE MESSAGE ID TO CAUSE OUR INVOCATION\n*\n*      TO ACTIVATE THE MPFLIST; T MPF=??  WHERE ?? IS THE MPFLST SUFFIX\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IEZVX100\n         EJECT\n         IKJTCB                        TIMING CONTROL TABLE\n         EJECT\n         IEFTCT                        TIMING CONTROL TABLE\n         EJECT\n         IEFJMR                        JOB MANAGEMENT RECORD\n         EJECT\nIHAPSA   DSECT\n         IHAPSA\n         EJECT\n***********************************************************************\n*  MAP SAVE AND WORK AREAS THAT ARE ACQUIRED\n***********************************************************************\n         SPACE 1\nDYNAMIC  DSECT\nSAVE1    DS   18F                      SAVE AREA\n         SPACE 1\nCOMHDR   DS    AL2(COMLEN),AL2(0)      COMMAND HEADER                   1770.\nCOMREP   DS    C'??'                   COMMAND TEXT (REPLY NUMBER)\nCOMRES   DS    C'U'                    COMMAND TEXT (REPLY)\nCOMLEN   EQU   *-COMHDR                COMMAND BLOCK LENGTH             1810.\nDYNAMICL EQU  *-DYNAMIC                LENGTH OF DYNAMIC AREA\n         SPACE 5\nMSGTEXT  DSECT\nMSGID    DS    CL8                     MESSAGE ID\n         EJECT\nAAHLXXX  CSECT\nAAHLXXX  AMODE 31                      31 BIT ADDRESSING MODE\nAAHLXXX  RMODE ANY                     CAN RUN ABOVE OR BELOW\n         SPACE 2\n***********************************************************************\n*  ESTABLISH ADDRESSABILITY, AND CHAIN SAVE AREAS\n***********************************************************************\n         SPACE 1\n         USING *,R15                   EST. ADDRESSABILITY\n         B     PROLOG                  BYPASS PROLOGUE\n         DC    AL1(L'ID)               PROLOGUE LENGTH\nID       DC    C'&SYSDATE-&SYSDATE'    MODULE NAME AND COMPILE DATE\n         DS    0H                      ALLIGNMENT\nPROLOG   SAVE  (14,12)                 SAVE CALLERS REGS\n         LR    R12,R15                 SAVE ENTRY ADRESS\n         DROP  R15                     LOSE OLD BASE\n         USING AAHLXXX,R12             REAL BASE ADDRESS=R12\n         L     CTXTPTR,0(R1)           @CTXT\n         USING CTXT,CTXTPTR            MAP CTXT\n         SPACE 2\n***********************************************************************\n*\n*  GETMAIN A SAVEAREA AND WORK AREA\n*\n* NOTE! STORAGE IS ACQUIRED BELOW THE LINE DUE TO SVC34 REQUIREMENTS\n*\n***********************************************************************\n         SPACE 1\nGTEMAIN  GETMAIN RU,LV=DYNAMICL,SP=230,LOC=BELOW,RELATED=(FREEMAIN)\n         LR    R11,R1                  @ACQUIRED STORAGE\n         USING DYNAMIC,R11             MAP DYNAMIC AREA\n         ST    R13,SAVE1+4             SETUP\n         LA    R15,SAVE1                 @OUR SAVE AREA\n         ST    R15,8(R13)                SET FORWARD POINTER\n         LR    R13,R15                   @OUR SAVE AREA\n         EJECT\n***********************************************************************\n*  DETERMINE WHICH MESSAGE TO PROCESS\n***********************************************************************\n         SPACE 1\n         L     R2,CTXTTXPJ             @MESSAGE ATTRIBUTESS\n         USING CTXTATTR,R2             MAP MESSAGE ATTRIBUTES\n         LA    R4,CTXTTMSG             @BASE TEXT\n         USING MSGTEXT,R4              MAP BASE TEXT\n         CLC   MSGID,=CL8'AHL125A'     MESSAGE AHL125A ?\n         BE    AHL125A                 -YES\n         SPACE 3\n***********************************************************************\n*  PUT TESTS FOR NEW MESSAGE TYPES HERE\n***********************************************************************\n         SPACE 1\n         WTO   'AAHLXXX - NO MESSAGE MATCH FOUND'\n         B     RETURN\n         EJECT\n***********************************************************************\n*\n*           1         2         3         4\n*  1234567890123456789012345678901234567890123\n*\n*  AHL125A  RESPECIFY TRACE OPTIONS OR REPLY U\n*\n***********************************************************************\n         SPACE 1\nAHL125A  EQU   *\n         MVC   COMHDR(COMLEN),CCOMHDR  MOVE CMD DATA TO DYNAMIC AREA\n         SPACE 1\n*  DETERMINE WHICH FLAVOR OF GTF ISSUED THIS COMMAND\n         SPACE 1\n         L     R7,PSATOLD-PSA          @OUR TCB\n         ICM   R7,15,TCBTCT-TCB(R7)    @OUR TCT\n         BNZ   A21510\n         WTO   'AAHLXXX - NO TCT - FURTHER PROCESSING ABORTED'\n         B     RETURN\n         SPACE 2\nA21510   EQU   *\n         L     R7,TCTJMR-SMFTCT(R7)    @JMR\n         USING JMR,R7\n         CLC   =C'GTFVTAM',JMRJOB      VTAM TRACE?\n         BE    A21590                  -YES\n         CLC   =C'GTF2TAP',JMRJOB      VTAM TRACE?\n         BE    A21590                  -YES\n         CLC   =C'GTFTAPE',JMRJOB      VTAM TRACE?\n         BE    A21590                  -YES\n         B     RETURN                  -NO\n         SPACE 1\n*  RESPOND TO THE WTOR\n         SPACE 1\nA21590   EQU   *\n         MVC   COMREP,CTXTRPID         MOVE IN REPLY NUMBER\n         SR    R0,R0                   NO UCMID ADDRESS                 1380.\n         MGCR  COMHDR                  SEND COMMAND VIA SVC34\n         EJECT\n***********************************************************************\n*  RETURN\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         L     R13,4(R13)              @CALLERS SAVE AREA\n         SPACE 2\n*  FREE THE SAVE AREA AND WORK AREA THAT WAS ACQUIRED EARLIER\n         SPACE 1\n         FREEMAIN RU,LV=DYNAMICL,A=(R11),SP=230,RELATED=(GETMAIN)\n         RETURN (14,12)                RESTORE REGS AND RETURN\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND RENTRANT MISCELLANEOUS\n***********************************************************************\n         SPACE 1\nCCOMHDR  DC    AL2(COMLEN),AL2(0)      COMMAND HEADER                   1770.\nCCOMREP  DC    C'??'                   COMMAND TEXT (REPLY NUMBER)\nCCOMRES  DC    C'U'                    COMMAND TEXT (REPLY)\n         SPACE 2                                                        1820.\n         LTORG\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ADFHXXX": {"ttr": 769, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x891\\x8f\\x00\\x891\\x8f\\x108\\x01Y\\x01Y\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-11-14T00:00:00", "modifydate": "1989-11-14T10:38:00", "lines": 345, "newlines": 345, "modlines": 0, "user": "HMDEAN"}, "text": "DFH      TITLE 'WTO EXIT FOR CICS MESSAGE PROCESSING'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . ADFHXXX\n*\n*  DATE WRITTEN . . . . 04/85\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH (AND MUCKED WITH BY S BUZZO)\n*                       (ADDITIONALLY MUCKED WITH BY M MILLER)\n*                       (MUCKED WITH AGAIN BY S BUZZO)\n*\n*  ENVIRONMENT  . . . . MVS/XA WTO EXIT\n*\n*  FUNCTION\n*    RECEIVES CONTROL FOR CICS JOURNAL SWITCH MESSAGE (ADFHXXX)\n*    MAY START TASKS OR TAKE OTHER ACTIONS.\n*\n*\n*  DESCRIPTION:\n*    1) GETMAIN A SAVE AND WORK AREA\n*    2) BRANCH DEPENDING ON MESSAGE ID\n*\n*    ADFHXXX:\n*      START THE CICS JOURNAL BACKUP JOB, BY ISSUING\n*      'S JOB,N=A#______' VIA SVC 34\n*                  | |||\n*                  | ||--- A IF MESSAGE TEXT CONTAINS 'PRIMARY'\n*                  | ||    B IF MESSAGE TEXT CONTAINS 'SECONDARY'\n*                  | ||\n*                  | ----- NN DEPENDING ON WHAT MSG TEXT CONTAINS\n*                  |       01 IF MESSAGE CONTAINS 'SYSTEM'\n*                  |         WHERE N IS THE NUMBER OF THE JOURNAL\n*                  |------ MLS IF THE MESSAGE FROM JOBNAME 'CICS16P '\n*                          OWQ IF THE MESSAGE FROM JOBNAME \"CICS    '\n*        EXAMPLE: \"S JOB,N=A#MLS09A\" OR \"S JOB,N=A#OWQ09B\"\n*\n*      VERIFY THAT THE JOBNAME IS 'CICS    ' OR 'CICS16P '\n*\n*    3) FREEMAIN STORAGE\n*    4) RETURN\n*\n*\n*  REGISTERS AT ENTRY:\n*     R1 : @CTXT COMMTAS USER EXIT PARAMETER LIST\n*    R13 : @STANDARD SAVE AREA\n*    R14 : RETURN ADDRESS\n*    R15 : ENTRY POINT\n*\n*\n*  REGISTERS AT EXIT: ALL REGISTERS RESTORED\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*            ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                       WORK REGISTER\nR1       EQU   1                       INPUT PARMS AND WORK REGISTER\nR2       EQU   2                       MESSAGE ATTRIBUTES BAR\nR3       EQU   3\nR4       EQU   4                       MESSAGE TEXT BAR\nCTXTPTR  EQU   5                       CTXT BAR\nR6       EQU   6\nR7       EQU   7                       WORK REGISTER\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12                      BASE REGISTER\nR13      EQU   13                      SAVE AREA POINTER\nR14      EQU   14                      RETURN ADDRESS\nR15      EQU   15                      ENTRY ADDRESS\n*\n*\n*  CALLED MODULES: NONE\n*\n*  ASSUMPTIONS: MUST BE RUN UNDER AN MVS/XA SYSTEM\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*    AMODE=31\n*    RMODE=ANY\n*\n*  ABENDS: NONE\n*\n*\n*  MESSAGES (WTO'S):\n*    ADFHXXX - NO MESSAGE MATCH FOUND\n*      ISSUED IF MODULE INVOKED FOR OTHER THAN ITS INTENDED PURPOSES\n*\n*    ADFHXXX - NO TCT FURTHER PROCESSING ABORTED\n*       ISSUED IF TCBTCT ADDRESS IS NULL.\n*\n*\n*  CAVEATS:\n*    DO NOT ISSUE ANY WAITS IN THIS ROUTINE\n*    BE SURE TO LINK AS REENTRANT\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*            ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  IMPLEMENTATION NOTES:\n*    AFTER ASSEMBLY AND LINK LLA MUST BE RESTARTED\n*\n*    IN SYS1.PARMLIB(MPFLST??) MUST CONTAIN AT LEAST ONE OF THE\n*    FOLLOWING STATEMENTS:\n*\n*      FNM????,SUP(NO),USEREXIT(ADFHXXX)\n*\n*      WHERE FNM???? IS THE MESSAGE ID TO CAUSE OUR INVOCATION\n*\n*      TO ACTIVATE THE MPFLIST; T MPF=??  WHERE ?? IS THE MPFLST SUFFIX\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IEZVX100\n         EJECT\n         IKJTCB                        TIMING CONTROL TABLE\n         EJECT\n         IEFTCT                        TIMING CONTROL TABLE\n         EJECT\n         IEFJMR                        JOB MANAGEMENT RECORD\n         EJECT\nIHAPSA   DSECT\n         IHAPSA\n         EJECT\n***********************************************************************\n*  MAP SAVE AND WORK AREAS THAT ARE ACQUIRED\n***********************************************************************\n         SPACE 1\nDYNAMIC  DSECT\nSAVE1    DS   18F                      SAVE AREA\n         SPACE 1\nCOMHDR   DS    AL2(COMLEN),AL2(0)      COMMAND HEADER\nCOMMAND  DS    C'S JOB,N=A#______'     COMMAND TEXT\nCOMLEN   EQU   *-COMHDR                COMMAND BLOCK LENGTH\nRCOMHDR  DS    AL2(RCOML),AL2(0)\nRCOM     DC    C'REPLY '\nREPLY    DC    C'XX,GO'\nRCOML    EQU   *-RCOMHDR\nDYNAMICL EQU  *-DYNAMIC                LENGTH OF DYNAMIC AREA\n         SPACE 5\nMSGTEXT  DSECT\nMSGID    DS    CL8                     MESSAGE ID\n         EJECT\nADFHXXX CSECT\nADFHXXX AMODE 31                       31 BIT ADDRESSING MODE\nADFHXXX RMODE ANY                      CAN RUN ABOVE OR BELOW\n         SPACE 2\n***********************************************************************\n*  ESTABLISH ADDRESSABILITY, AND CHAIN SAVE AREAS\n***********************************************************************\n         SPACE 1\n         USING *,R15                   EST. ADDRESSABILITY\n         B     PROLOG                  BYPASS PROLOGUE\n         DC    AL1(L'ID)               PROLOGUE LENGTH\nID       DC    C'&SYSDATE-&SYSDATE'    MODULE NAME AND COMPILE DATE\n         DS    0H                      ALLIGNMENT\nPROLOG   SAVE  (14,12)                 SAVE CALLERS REGS\n         LR    R12,R15                 SAVE ENTRY ADRESS\n         DROP  R15                     LOSE OLD BASE\n         USING ADFHXXX,R12             REAL BASE ADDRESS=R12\n         L     CTXTPTR,0(R1)           @CTXT\n         USING CTXT,CTXTPTR            MAP CTXT\n         SPACE 2\n***********************************************************************\n*\n*  GETMAIN A SAVEAREA AND WORK AREA\n*\n* NOTE! STORAGE IS ACQUIRED BELOW THE LINE DUE TO SVC34 REQUIREMENTS\n*\n***********************************************************************\n         SPACE 1\nGETMAIN  GETMAIN RU,LV=DYNAMICL,SP=230,LOC=BELOW,RELATED=(FREEMAIN)\n         ST    R13,4(R1)               SETUP\n         ST    R1,8(R13)                 SET FORWARD POINTER\n         LR    R13,R1                  @ACQUIRED STORAGE\n         USING DYNAMIC,R13             MAP DYNAMIC AREA\n         EJECT\n***********************************************************************\n*  DETERMINE WHICH MESSAGE TO PROCESS\n***********************************************************************\n         SPACE 1\n         L     R2,CTXTTXPJ             @MESSAGE ATTRIBUTESS\n         USING CTXTATTR,R2             MAP MESSAGE ATTRIBUTES\n         LA    R4,CTXTTMSG             @BASE TEXT\n         USING MSGTEXT,R4              MAP BASE TEXT\n         CLC   MSGID,=CL8'DFH4583'    MESSAGE DFH4583 ?\n         BE    DFH4583                 -YES\n         SPACE 3\n***********************************************************************\n*  PUT TESTS FOR NEW MESSAGE TYPES HERE\n***********************************************************************\n         SPACE 1\n         WTO   'ADFHXXX - NO MESSAGE MATCH FOUND'\n         B     RETURN\n         EJECT\n***********************************************************************\n*\n*           1         2         3         4         5\n*  1234567890123456789012345678901234567890123456789012\n*\n*  DFH4583 - CICS SYSTEM LOG. PRIMARY  EXTENT (DDNAME=\n*  DFH4583 - CICS JOURNAL NN. PRIMARY  EXTENT (DDNAME=\n***********************************************************************\n         SPACE 1\nDFH4583  EQU   *\n         MVC   COMHDR(COMLEN),CCOMHDR  MOVE CMD DATA TO DYNAMIC AREA\n         L     R7,PSATOLD-PSA    @OUR TCB\n         ICM   R7,15,TCBTCT-TCB(R7)\n         BNZ   D21510\n         WTO   'ADFHXXX - NO TCT - FURTHER PROCESSING ABORTED'\n         B     RETURN\nD21510   EQU   *\n         L     R7,TCTJMR-SMFTCT(R7)    @JMR\n***********************************************************************\n* VERYIFY THIS MESSAGE IS COMING FROM JOBNAME 'CICS     '\n***********************************************************************\nCHEKCJOB CLC   JMRJOB-JMR(8,R7),=CL8'CICS    '\n         BE    CICS#0\n         CLC   JMRJOB-JMR(8,R7),=CL8'CICS16P '\n         BE    CICS#6\n         B     WRONGJOB      WRONG JOB FIRED THIS EXIT - WTO AND END\n***********************************************************************\n* PLUG IN THE 5TH CHAR OF JOB NAME BASED ON JOBNAME OF CICS\n***********************************************************************\nCICS#0   MVC   COMMAND+10(3),=C'OWQ'\n         B     WHICHLOG\nCICS#6   MVC   COMMAND+10(3),=C'MLS'\n         B     WHICHLOG\n***********************************************************************\n* IF MSG SAYS 'SYSTEM' START JOB 'A#OWQ_1_'  OTHERWISE A#OWQ_2_\n* IE WE ARE DEALING WITH A SYSTEM JOURNAL SWITCH - START JOB A#OWQ_1_\n* IF NOT SYSTEM JOURNAL ASSUME USER JOURNAL # 2\n***********************************************************************\nWHICHLOG EQU   *\n         CLC   MSGID+15(6),=C'SYSTEM'\n         BE    LOG01                   START JOB FOR SYSTEM LOG (01)\n         MVC   COMMAND+13(2),MSGID+23  MUST BE USER JOURNAL #\n         B     WHICHEXT\nLOG01    MVC   COMMAND+13(2),=C'01'\n***********************************************************************\n* IF MSG SAYS 'PRIMARY' START JOB A#OWQ__A' OTHERWISE A#OWQ__B\n* IE PRIMARY LOG HAS JUST FILLED, SO START JOB A#OWQ__A\n***********************************************************************\nWHICHEXT CLC   MSGID+27(7),=C'PRIMARY'\n         BE    PRIEXT\n         MVI   COMMAND+15,C'B'\n         B     ALLOK\nPRIEXT   MVI   COMMAND+15,C'A'\n         SPACE 1\n***********************************************************************\n*  ISSUE THE START COMMAND VIA SVC34\n***********************************************************************\n         SPACE 1\nALLOK    SR    R0,R0                   NO UCMID ADDRESS\n         MGCR  COMHDR                  SEND COMMAND VIA SVC34\n***********************************************************************\n*  NOW ISSUE REPLY TEXT OF 'REPLY NN,GO REPLY FROM ADFHXXX EXIT'\n***********************************************************************\nISSUMGCR EQU   *\n         MVC   RCOMHDR(RCOML),CRCOMHDR MOVE IN THE REPLY BUFFER\n         MVC   REPLY(2),CTXTRPID       INSERT THE REPLY ID\n         SR    R0,R0                   CLEER REGISTER ZERO\n         MGCR  RCOMHDR                 ISSUE THE COMMAND\n         B     RETURN\n         EJECT\n         SPACE 1\n***********************************************************************\n*  WRONG JOB NAME- ISSUE WTO AND EXIT\n***********************************************************************\nWRONGJOB WTO   'CICS JOURNAL SWITCH NOT FROM JOBNAME CICS OR CICS16P'\n***********************************************************************\n*  RETURN\n***********************************************************************\nRETURN   EQU   *\n         LR    R11,R13\n         L     R13,4(R13)              @CALLERS SAVE AREA\n         SPACE 2\n*  FREE THE SAVE AREA AND WORK AREA THAT WAS ACQUIRED EARLIER\n         SPACE 1\n         FREEMAIN RU,LV=DYNAMICL,A=(R11),SP=230,RELATED=(GETMAIN)\n         RETURN (14,12)                RESTORE REGS AND RETURN\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND RENTRANT MISCELLANEOUS\n***********************************************************************\n         SPACE 1\nCRCOMHDR DC    AL2(RCOML),AL2(0)\nTXTINSRT DC    C'REPLY XX,GO'\nCCOMHDR  DC    AL2(COMLEN),AL2(0)      COMMAND HEADER\nCCOMMAND DC    C'S JOB,N=A#______'     COMMAND TEXT\n         SPACE 2\n         LTORG\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "AFNMXXX": {"ttr": 775, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x891\\x8f\\x00\\x891\\x8f\\x108\\x01\\x81\\x01\\x81\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-11-14T00:00:00", "modifydate": "1989-11-14T10:38:00", "lines": 385, "newlines": 385, "modlines": 0, "user": "HMDEAN"}, "text": "//AJEEAFNM JOB 0001,'SMD01-329-J.ELSWORTH',\n//    CLASS=0,MSGCLASS=A,\n//    NOTIFY=*******\n/*ROUTE PRINT RMT99\n//*\n//*  RE: SYS0.APL.SOURCE( AFNMXXX )\n//*\n//* DOC: ASSEMBLE AND LINK AFNMXXX - FNM WTO EXIT PROCESSOR\n//*\n//ASM      EXEC  ASMHAL,LPARM=RENT,\n//         PARM.ASM='DECK,NOOBJECT,XREF(SHORT),RENT'\n//ASM.SYSLIB DD DSN=SYS1.MACLIB,DCB=(BLKSIZE=8000),DISP=SHR\n//         DD DSN=SYS1.AMODGEN,DISP=SHR\n//ASM.SYSIN  DD *\nAFNMXXX  TITLE 'WTO EXIT FOR NPM MESSAGE PROCESSING'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . AFNMXXX\n*\n*  DATE WRITTEN . . . . 03/85\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*\n*  ENVIRONMENT  . . . . MVS/XA WTO EXIT\n*\n*  FUNCTION\n*    RECEIVES CONTROL FOR VARIOUS NPM MESSAGES ( FNMXXX ).\n*    MAY START TASKS OR TAKE OTHER ACTIONS.\n*\n*\n*  DESCRIPTION:\n*    1) GETMAIN A SAVE AND WORK AREA\n*    2) BRANCH DEPENDING ON MESSAGE ID\n*\n*    FNM215I:\n*      START THE NPMRSS TASK, S NPMRSS,SA=?,SSF=?\n*      SA IS LEFT ZERO FILLED HOST SUBAREA NUMBER\n*      SSF IS SET TO 1 GREATER THAN THE CURRENT SESSION STATISTICS\n*      FILE UNLESS THE CURRENT SSF FILE IS 4. IF THE CURRENT SSF FILE\n*      IS 4 SSF IS WRAPPED BACK TO 1.\n*\n*    FNM341I:\n*      START THE NPMRLF TASK, S NPMRLF,SA=?,LFN=?\n*      SA IS THE LEFT ZERO FILLED SUBAREA NUMBER\n*      LFN IS SET TO MODULO(CURRENT LFN + 1, 2).\n*\n*    3) FREEMAIN STORAGE\n*    4) RETURN\n*\n*\n*  REGISTERS AT ENTRY:\n*     R1 : @CTXT COMMTAS USER EXIT PARAMETER LIST\n*    R13 : @STANDARD SAVE AREA\n*    R14 : RETURN ADDRESS\n*    R15 : ENTRY POINT\n*\n*\n*  REGISTERS AT EXIT: ALL REGISTERS RESTORED\n*\n*\n*\n*            ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                       WORK REGISTER\nR1       EQU   1                       INPUT PARMS AND WORK REGISTER\nR2       EQU   2                       MESSAGE ATTRIBUTES BAR\nR4       EQU   4                       MESSAGE TEXT BAR\nCTXTPTR  EQU   5                       CTXT BAR\nR7       EQU   7                       WORK REGISTER\nR11      EQU   11                      DYNAMIC STORAGE BAR\nR12      EQU   12                      BASE REGISTER\nR13      EQU   13                      SAVE AREA POINTER\nR14      EQU   14                      RETURN ADDRESS\nR15      EQU   15                      ENTRY ADDRESS\n*\n*\n*  CALLED MODULES: NONE\n*\n*  ASSUMPTIONS: MUST BE RUN UNDER AN MVS/XA SYSTEM\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*    AMODE=31\n*    RMODE=ANY\n*\n*  ABENDS: NONE\n*\n*\n*  MESSAGES (WTO'S):\n*    AFNMXXX - NO MESSAGE MATCH FOUND\n*      ISSUED IF MODULE INVOKED FOR OTHER THAN ITS INTENDED PURPOSES\n*\n*    AFNMXXX - NO TCT FURTHER PROCESSING ABORTED\n*       ISSUED IF TCBTCT ADDRESS IS NULL.\n*\n*\n*  CAVEATS:\n*    DO NOT ISSUE ANY WAITS IN THIS ROUTINE\n*    BE SURE TO LINK AS REENTRANT\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*            ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  IMPLEMENTATION NOTES:\n*    AFTER ASSEMBLY AND LINK LLA MUST BE RESTARTED\n*\n*    IN SYS1.PARMLIB(MPFLST??) MUST CONTAIN AT LEAST ONE OF THE\n*    FOLLOWING STATEMENTS:\n*\n*      FNM????,SUP(NO),USEREXIT(AFNMXXX)\n*\n*      WHERE FNM???? IS THE MESSAGE ID TO CAUSE OUR INVOCATION\n*\n*      TO ACTIVATE THE MPFLIST; T MPF=??  WHERE ?? IS THE MPFLST SUFFIX\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IEZVX100\n         EJECT\n         IKJTCB                        TIMING CONTROL TABLE\n         EJECT\n         IEFTCT                        TIMING CONTROL TABLE\n         EJECT\n         IEFJMR                        JOB MANAGEMENT RECORD\n         EJECT\nIHAPSA   DSECT\n         IHAPSA\n         EJECT\n***********************************************************************\n*  MAP SAVE AND WORK AREAS THAT ARE ACQUIRED\n***********************************************************************\n         SPACE 1\nDYNAMIC  DSECT\nSAVE1    DS   18F                      SAVE AREA\n         SPACE 1\nCOMHDR   EQU   *                                                        1770.\n         SPACE 1\n         ORG   COMHDR\n         DS    AL2(COMLEN),AL2(0)      COMMAND HEADER                   1770.\nCOMMAND  DS    C'S NPMRSS,SA='         COMMAND TEXT\nCOMSA    DS    C'??'                   COMMAND TEXT (SUBAREA)\n         DS    C',SSF='                COMMAND TEXT\nCOMSSF   DS    C'?'                    COMMAND TEXT (SESSION STAT#)\nCOMLEN   EQU   *-COMHDR                COMMAND BLOCK LENGTH             1810.\n         SPACE 1\n         ORG   COMHDR\nD341HDR  DS    AL2(D341LEN),AL2(0)     COMMAND HEADER                   1770.\nD341CMD  DS    C'S NPMRLF,SA='         COMMAND TEXT\nD341SA   DS    C'??'                   COMMAND TEXT (SYSTEM)\n         DS    C',LFN='                COMMAND TEXT\nD341LFN  DS    C'?'                    COMMAND TEXT (LOG FILE#)\nD341LEN  EQU   *-COMHDR                COMMAND BLOCK LENGTH\n*\nDSYS     DS    C                       SYSTEM ID\nDSA      DS    CL2                     SUBAREA\n         ORG\nDYNAMICL EQU  *-DYNAMIC                LENGTH OF DYNAMIC AREA\n         SPACE 5\nMSGTEXT  DSECT\nMSGID    DS    CL8                     MESSAGE ID\n         EJECT\nAFNMXXX  CSECT\nAFNMXXX  AMODE 31                      31 BIT ADDRESSING MODE\nAFNMXXX  RMODE ANY                     CAN RUN ABOVE OR BELOW\n         SPACE 2\n***********************************************************************\n*  ESTABLISH ADDRESSABILITY, AND CHAIN SAVE AREAS\n***********************************************************************\n         SPACE 1\n         USING *,R15                   EST. ADDRESSABILITY\n         B     PROLOG                  BYPASS PROLOGUE\n         DC    AL1(L'ID)               PROLOGUE LENGTH\nID       DC    C'&SYSDATE-&SYSDATE'    MODULE NAME AND COMPILE DATE\n         DS    0H                      ALLIGNMENT\nPROLOG   SAVE  (14,12)                 SAVE CALLERS REGS\n         LR    R12,R15                 SAVE ENTRY ADRESS\n         DROP  R15                     LOSE OLD BASE\n         USING AFNMXXX,R12             REAL BASE ADDRESS=R12\n         L     CTXTPTR,0(R1)           @CTXT\n         USING CTXT,CTXTPTR            MAP CTXT\n         SPACE 2\n***********************************************************************\n*\n*  GETMAIN A SAVEAREA AND WORK AREA\n*\n* NOTE! STORAGE IS ACQUIRED BELOW THE LINE DUE TO SVC34 REQUIREMENTS\n*\n***********************************************************************\n         SPACE 1\nGTEMAIN  GETMAIN RU,LV=DYNAMICL,SP=230,LOC=BELOW,RELATED=(FREEMAIN)\n         LR    R11,R1                  @ACQUIRED STORAGE\n         USING DYNAMIC,R11             MAP DYNAMIC AREA\n         ST    R13,SAVE1+4             SETUP\n         LA    R15,SAVE1                 @OUR SAVE AREA\n         ST    R15,8(R13)                SET FORWARD POINTER\n         LR    R13,R15                   @OUR SAVE AREA\n         EJECT\n***********************************************************************\n*  BUILD SOME COMMON PARAMETERS\n***********************************************************************\n         SPACE 1\n*  GET SMF SYSTEM I.D.\n         SPACE 1\n         L     R7,PSATOLD-PSA          @OUR TCB\n         ICM   R7,15,TCBTCT-TCB(R7)    @OUR TCT\n         BNZ   FNM100\n         WTO   'AFNMXXX - NO TCT - FURTHER PROCESSING ABORTED'\n         B     RETURN\n         SPACE 1\n*  GUESS AT SUBAREA AS BASED ON SMF SYSTEM ID\n         SPACE 1\nFNM100   EQU   *\n         L     R7,TCTJMR-SMFTCT(R7)    @JMR\n         MVC   DSYS,JMRCPUID-JMR+3(R7) MOVE SIGNIFICANT PART OF CPUID\n         MVC   DSA,=C'07'              ASSUME APLA\n         CLI   DSYS,C'A'               YES ?\n         BE    FNM120\n         MVC   DSA,=C'09'              ASSUME APLB\n         CLI   DSYS,C'B'               YES ?\n         BE    FNM120\n         MVC   DSA,=C'05'              ASSUME APLC\n         CLI   DSYS,C'C'               YES ?\n         BE    FNM120\n         MVC   DSA,=C'??'              HAVE LITTLE IDEA OF WHATS UP\nFNM120   EQU   *\n         EJECT\n***********************************************************************\n*  DETERMINE WHICH MESSAGE TO PROCESS\n***********************************************************************\n         SPACE 1\n         L     R2,CTXTTXPJ             @MESSAGE ATTRIBUTESS\n         USING CTXTATTR,R2             MAP MESSAGE ATTRIBUTES\n         LA    R4,CTXTTMSG             @BASE TEXT\n         USING MSGTEXT,R4              MAP BASE TEXT\n         CLC   MSGID,=CL8'FNM215I'     MESSAGE FNM215I ?\n         BE    FNM215I                 -YES\n         CLC   MSGID,=CL8'FNM341I'     MESSAGE FNM341I ?\n         BE    FNM341I                 -YES\n         SPACE 3\n***********************************************************************\n*  PUT TESTS FOR NEW MESSAGE TYPES HERE\n***********************************************************************\n         SPACE 1\n         WTO   'AFNMXXX - NO MESSAGE MATCH FOUND'\n         B     RETURN\n         EJECT\n***********************************************************************\n*\n*           1         2         3         4         5\n*  1234567890123456789012345678901234567890123456789012\n*\n*  FNM215I NPMSESS? IS THE PRIMARY SESSION HISTORY FILE\n*\n***********************************************************************\n         SPACE 1\nNUMSESS  EQU   2                       NUMBER OF NPM SESSION DATASETS\n         SPACE 1\nC215COM  DC    AL2(COMLEN),AL2(0),C'S NPMRSS,SA=??,SSF=?'               1770.\n         SPACE 2                                                        1820.\nFNM215I  EQU   *\n         MVC   COMHDR(COMLEN),C215COM  MOVE CMD DATA TO DYNAMIC AREA\n         MVC   COMSA,DSA               MOVE IN SUB AREA\n         SPACE 1\n*  DETERMINE WHICH SESSION DATASET TO INITIALIZE\n         SPACE 1\n         IC    R14,MSGID+15            SESS NUMBER\n         N     R14,=X'0000000F'        TO BINARY\n         LA    R14,1(R14)              PLUS 1\n         C     R14,=A(NUMSESS)         BEYOND END ?\n         BNH   F21590                  -NO\n         LA    R14,1                   -YES, RESET TO 1ST ONE\nF21590   EQU   *\n         O     R14,=X'000000F0'        BACK TO EBCDIC\n         STC   R14,COMSSF              INTO 'START' COMMAND\n         SPACE 2                                                        1320.\n*  ISSUE THE START COMMAND VIA SVC34\n         SPACE 1                                                        1320.\n         SR    R0,R0                   NO UCMID ADDRESS                 1380.\n         MGCR  COMHDR                  SEND COMMAND VIA SVC34\n         B     RETURN\n         EJECT\n***********************************************************************\n*\n*           1         2         3         4         5\n*  1234567890123456789012345678901234567890123456789012\n*\n*  FNM341I VTAM LOG RECORDING ON SYS4.NPM.APL?.SYSLOG?\n*\n***********************************************************************\n         SPACE 1\nNUMSLOG  EQU   2                       NUMBER OF NPM SESSION DATASETS\n         SPACE 1\nC341COM  DC    AL2(D341LEN),AL2(0),C'S NPMRLF,SA=??,LFN=?'              1770.\n         SPACE 2                                                        1820.\nFNM341I  EQU   *\n         MVC   COMHDR(D341LEN),C341COM COMMAND HEADER & PROTOTYPE\n         MVC   D341SA,DSA              SUBAREA\n         SPACE 1\n*  DETERMINE WHICH SESSION DATASET TO INITIALIZE\n         SPACE 1\n         IC    R14,MSGID+50            SESS NUMBER\n         N     R14,=X'0000000F'        TO BINARY\n         LA    R14,1(R14)              PLUS 1\n         C     R14,=A(NUMSLOG)         BEYOND END ?\n         BNH   F34190                  -NO\n         LA    R14,1                   -YES, RESET TO 1ST ONE\nF34190   EQU   *\n         O     R14,=X'000000F0'        BACK TO EBCDIC\n         STC   R14,D341LFN             INTO 'START' COMMAND\n         SPACE 2                                                        1320.\n*  ISSUE THE START COMMAND VIA SVC34\n         SPACE 1                                                        1320.\n         SR    R0,R0                   NO UCMID ADDRESS                 1380.\n         MGCR  COMHDR                  SEND COMMAND VIA SVC34\n         B     RETURN\n         EJECT\n***********************************************************************\n*  RETURN\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         L     R13,4(R13)              @CALLERS SAVE AREA\n         SPACE 2\n*  FREE THE SAVE AREA AND WORK AREA THAT WAS ACQUIRED EARLIER\n         SPACE 1\n         FREEMAIN RU,LV=DYNAMICL,A=(R11),SP=230,RELATED=(GETMAIN)\n         RETURN (14,12)                RESTORE REGS AND RETURN\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND RENTRANT MISCELLANEOUS\n***********************************************************************\n         LTORG\n         END\n/*\n//LKED.SYSLMOD DD DSN=APL1.LINKLIB,DISP=SHR\n//LKED.SYSIN DD *\n NAME AFNMXXX(R)\n/*\n//LLA      EXEC PGM=OPERCMDS,COND=(0,LT)\n//SYSIN    DD *\nF LLA,REFRESH\nT MPF=01\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AIEAXXX": {"ttr": 1028, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x891\\x8f\\x00\\x891\\x8f\\x108\\x01\\x1f\\x01\\x1f\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-11-14T00:00:00", "modifydate": "1989-11-14T10:38:00", "lines": 287, "newlines": 287, "modlines": 0, "user": "HMDEAN"}, "text": "AIEAXXX  TITLE 'WTO EXIT FOR IEA MESSAGE PROCESSING'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . AIEAXXX\n*\n*  DATE WRITTEN . . . . 04/85\n*\n*  AUTHOR . . . . . . . M. MILLER (FROM J. ELSWORTH)\n*\n*  ENVIRONMENT  . . . . MVS/XA WTO EXIT\n*\n*  FUNCTION\n*    RECEIVES CONTROL FOR VARIOUS IEA MESSAGES ( IEAXXX ).\n*    AS SPECIFIED IN IEAMPF00 IN PARMLIB\n*    MAY START TASKS OR TAKE OTHER ACTIONS.\n*\n*\n*  DESCRIPTION:\n*    1) GETMAIN A SAVE AND WORK AREA\n*    2) BRANCH DEPENDING ON MESSAGE ID\n*\n*    IEA911E:\n*      START THE IPCSADD TASK, S IPCSADD,DUMP=??, VIA SVC34.\n*      DUMP IS THE DUMP DATASET TO BE COPIED FOR IPCS\n*\n*    3) FREEMAIN STORAGE\n*    4) RETURN\n*\n*\n*  REGISTERS AT ENTRY:\n*     R1 : @CTXT COMMTAS USER EXIT PARAMETER LIST\n*    R13 : @STANDARD SAVE AREA\n*    R14 : RETURN ADDRESS\n*    R15 : ENTRY POINT\n*\n*\n*  REGISTERS AT EXIT: ALL REGISTERS RESTORED\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*            ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                       WORK REGISTER\nR1       EQU   1                       INPUT PARMS AND WORK REGISTER\nR2       EQU   2                       MESSAGE ATTRIBUTES BAR\nR3       EQU   3\nR4       EQU   4                       MESSAGE TEXT BAR\nR5       EQU   5                       CTXT BAR\nR6       EQU   6\nR7       EQU   7                       WORK REGISTER\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12                      BASE REGISTER\nR13      EQU   13                      SAVE AREA POINTER AND DYN BAR\nR14      EQU   14                      RETURN ADDRESS\nR15      EQU   15                      ENTRY ADDRESS\n*\n*\n*  CALLED MODULES: NONE\n*\n*  ASSUMPTIONS: MUST BE RUN UNDER AN MVS/XA SYSTEM 2.1.2\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*    AMODE=31\n*    RMODE=ANY\n*\n*  ABENDS: NONE\n*\n*\n*  MESSAGES (WTO'S):\n*    AIEAXXX - NO MESSAGE MATCH FOUND\n*      ISSUED IF MODULE INVOKED FOR OTHER THAN ITS INTENDED PURPOSES\n*\n*\n*  CAVEATS:\n*    DO NOT ISSUE ANY WAITS IN THIS ROUTINE\n*    BE SURE TO LINK AS REENTRANT\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*            ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  IMPLEMENTATION NOTES:\n*    AFTER ASSEMBLY AND LINK LLA MUST BE RESTARTED\n*\n*    IN SYS1.PARMLIB(MPFLST??) MUST CONTAIN AT LEAST ONE OF THE\n*    FOLLOWING STATEMENTS:\n*\n*      IEA????,SUP(NO),USEREXIT(AIEAXXX)\n*\n*      WHERE IEA???? IS THE MESSAGE ID TO CAUSE OUR INVOCATION\n*\n*      TO ACTIVATE THE MPFLIST; T MPF=??  WHERE ?? IS THE MPFLST SUFFIX\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\nAIEAXXX  CSECT\nAIEAXXX  AMODE 31                      31 BIT ADDRESSING MODE\nAIEAXXX  RMODE ANY                     CAN RUN ABOVE OR BELOW\n         SPACE 2\n***********************************************************************\n*  ESTABLISH ADDRESSABILITY, AND CHAIN SAVE AREAS\n***********************************************************************\n         SPACE 1\n         USING *,R15                   EST. ADDRESSABILITY\n         B     PROLOG                  BYPASS PROLOGUE\n         DC    AL1(IDXXX-ID)           PROLOGUE LENGTH\nID       DC    C'AIEAXXX '           MODULE NAME\n         DC    C'&SYSDATE-&SYSDATE'    COMPILE DATE\nIDXXX    DS    0H                      ALLIGNMENT\nPROLOG   SAVE  (14,12)                 SAVE CALLERS REGS\n         LR    R12,R15                 SAVE ENTRY ADRESS\n         DROP  R15                     LOSE OLD BASE\n         USING AIEAXXX,R12             REAL BASE ADDRESS=R12\n         L     R5,0(R1)                @CTXT\n         USING CTXT,R5                 MAP CTXT\n         SPACE 2\n***********************************************************************\n*\n*  GETMAIN A SAVEAREA AND WORK AREA\n*\n* NOTE! STORAGE IS ACQUIRED BELOW THE LINE DUE TO SVC34 REQUIREMENTS\n*\n***********************************************************************\n         SPACE 1\nGETMAIN  GETMAIN RU,LV=DYNAMICL,SP=230,LOC=BELOW,RELATED=(FREEMAIN)\n         ST    R13,4(,R1)              SETUP\n         ST    R1,8(R13)               SET FORWARD POINTER\n         LR    R13,R1                  @ACQUIRED STORAGE\n         USING DYNAMIC,R13             MAP DYNAMIC AREA\n         EJECT\n***********************************************************************\n*  DETERMINE WHICH MESSAGE TO PROCESS\n***********************************************************************\n         SPACE 1\n         L     R2,CTXTTXPJ             @MESSAGE ATTRIBUTESS\n         USING CTXTATTR,R2             MAP MESSAGE ATTRIBUTES\n         LA    R4,CTXTTMSG             @BASE TEXT\n         USING MSGTEXT,R4              MAP BASE TEXT\n         CLC   MSGID,=CL8'IEA911E'     MESSAGE IEA911E ?\n         BE    IEA911E                 -YES\n         SPACE 3\n***********************************************************************\n*  PUT TESTS FOR NEW MESSAGE TYPES HERE\n***********************************************************************\n         SPACE 1\n         MVC   MSGERR(NOML),NOM\n         WTO   MF=(E,MSGERR)      ISSUE ERROR MSG\n         B     RETURN\n         EJECT\n***********************************************************************\n*\n*           1         2         3         4         5\n*  1234567890123456789012345678901234567890123456789012\n*\n*  IEA911E COMPLETE DUMP ON SYS1.DUMP??\n*  IEA911E PARTIAL DUMP ON SYS1.DUMP??\n*\n***********************************************************************\n         SPACE 1\nIEA911E  EQU   *\n         MVC   COMHDR(COMLEN),CCOMHDR  MOVE CMD DATA TO DYNAMIC AREA\n         CLC   MSGID+8(13),=CL13'COMPLETE DUMP'\n         BE    CHK911A\n         CLC   MSGID+8(13),=CL13'PARTIAL DUMP '\n         BNE   RETURN\n         MVC   COMDS(2),MSGID+33\n         B     STRTCMD\nCHK911A  MVC   COMDS(2),MSGID+34\n         B     STRTCMD\n*  ISSUE THE START COMMAND VIA SVC34\n         SPACE 1                                                        1320.\nSTRTCMD  EQU   *\n         SR    R0,R0                   NO UCMID ADDRESS                 1380.\n         MGCR  COMHDR                  SEND COMMAND VIA SVC34\n* TURN HIGH LIGHTING OFF\n         OI    CTXTRFB1,CTXTRCDC       SET BIT TO CHANGE DESCRIPTORS\n         L     R11,CTXTDCP             GET ADDR TO DESCIPTOR CODES\n         XC    0(2,R11),0(R11)         CLEAR THE CODES\n         EJECT\n***********************************************************************\n*  RETURN\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         LR    R11,R13                 SAVE DYN AREA ADDR\n         L     R13,4(R13)              @CALLERS SAVE AREA\n         SPACE 2\n*  FREE THE SAVE AREA AND WORK AREA THAT WAS ACQUIRED EARLIER\n         SPACE 1\nFREEMAIN FREEMAIN RU,LV=DYNAMICL,A=(R11),SP=230,RELATED=(GETMAIN)\n         RETURN (14,12)                RESTORE REGS AND RETURN\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND RENTRANT MISCELLANEOUS\n***********************************************************************\n         SPACE 1\nNOM      WTO   'AIEAXXX - NO MESSAGE MATCH FOUND',                     X\n               ROUTCDE=(1),DESC=(11),MF=L\nNOML     EQU   *-NOM\nCCOMHDR  DC    AL2(COMLEN),AL2(0)      COMMAND HEADER                   1770.\nCCOMMAND DC    C'S IPCSADD,DUMP='       COMMAND TEXT\nCCOMDS   DC    C'?? '                  COMMAND TEXT (SYSTEM)\n         SPACE 2                                                        1820.\n         LTORG\n         EJECT\n         IEZVX100\n         EJECT\n         IKJTCB                        TIMING CONTROL TABLE\n         EJECT\n         IEFTCT                        TIMING CONTROL TABLE\n         EJECT\n         IEFJMR                        JOB MANAGEMENT RECORD\n         EJECT\nIHAPSA   DSECT\n         IHAPSA\n         EJECT\n***********************************************************************\n*  MAP SAVE AND WORK AREAS THAT ARE ACQUIRED\n***********************************************************************\n         SPACE 1\nDYNAMIC  DSECT\nSAVE1    DS   18F                      SAVE AREA\n         SPACE 1\nCOMHDR   DS    AL2(COMLEN),AL2(0)      COMMAND HEADER                   1770.\nCOMMAND  DS    C'S IPCSADD,DUMP='      COMMAND TEXT\nCOMDS    DS    C'?? '                  COMMAND TEXT (DUMP DS)\nCOMLEN   EQU   *-COMHDR                COMMAND BLOCK LENGTH             1810.\nMSGERR   DS    CL132\nDYNAMICL EQU   *-DYNAMIC               LENGTH OF DYNAMIC AREA\n         SPACE 5\nMSGTEXT  DSECT\nMSGID    DS    CL8                     MESSAGE ID\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AIEEXXX": {"ttr": 1034, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x891\\x8f\\x00\\x891\\x8f\\x108\\x01\\x03\\x01\\x03\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-11-14T00:00:00", "modifydate": "1989-11-14T10:38:00", "lines": 259, "newlines": 259, "modlines": 0, "user": "HMDEAN"}, "text": "AIEEXXX  TITLE 'WTO EXIT PROCESSOR FOR IEE MESSAGES'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . AIEEXXX\n*\n*  DATE WRITTEN . . . . 03/85\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*\n*  ENVIRONMENT  . . . . MVS/XA WTO EXIT\n*\n*  FUNCTION\n*    RECEIVES CONTROL FOR VARIOUS IEE MESSAGES.\n*    MAY START TASKS, CHANGE MESSAGE ATTRIBUTES OR TAKE OTHER ACTIONS.\n*\n*\n*  DESCRIPTION:\n*    1) GETMAIN A SAVE AND WORK AREA\n*    2) BRANCH DEPENDING ON MESSAGE ID\n*\n*    IEE364I:\n*      CHANGE DESCRIPTOR CODES TO HIGHLIGTED ACTION TYPE MESSAGE\n*\n*\n*      FILE UNLESS THE CURRENT SSF FILE IS 4. IF THE CURRENT SSF FILE\n*      IS 4 SSF IS WRAPPED BACK TO 1.\n*\n*    3) FREEMAIN STORAGE\n*    4) RETURN\n*\n*\n*  REGISTERS AT ENTRY:\n*     R1 : @CTXT COMMTAS USER EXIT PARAMETER LIST\n*    R13 : @STANDARD SAVE AREA\n*    R14 : RETURN ADDRESS\n*    R15 : ENTRY POINT\n*\n*\n*  REGISTERS AT EXIT: ALL REGISTERS RESTORED\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*            ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                       WORK REGISTER\nR1       EQU   1                       INPUT PARMS AND WORK REGISTER\nR2       EQU   2                       MESSAGE ATTRIBUTES BAR\nRMSG     EQU   4                       MESSAGE TEXT BAR\nCTXTPTR  EQU   5                       CTXT BAR\nRDCP     EQU   6                       @DESCRIPTOR CODES\nR7       EQU   7                       WORK REGISTER\nR11      EQU   11                      DYNAMIC STORAGE BAR\nR12      EQU   12                      BASE REGISTER\nR13      EQU   13                      SAVE AREA POINTER\nR14      EQU   14                      RETURN ADDRESS\nR15      EQU   15                      ENTRY ADDRESS\n*\n*\n*  CALLED MODULES: NONE\n*\n*  ASSUMPTIONS: MUST BE RUN UNDER AN MVS/XA SYSTEM\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*    AMODE=31\n*    RMODE=ANY\n*\n*  ABENDS: NONE\n*\n*\n*  MESSAGES (WTO'S):\n*    AIEEXXX - NO MESSAGE MATCH FOUND\n*      ISSUED IF MODULE INVOKED FOR OTHER THAN ITS INTENDED PURPOSES\n*\n*    AIEEXXX - NO TCT FURTHER PROCESSING ABORTED\n*       ISSUED IF TCBTCT ADDRESS IS NULL.\n*\n*\n*  CAVEATS:\n*    DO NOT ISSUE ANY WAITS IN THIS ROUTINE\n*    BE SURE TO LINK AS REENTRANT\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*            ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  IMPLEMENTATION NOTES:\n*    AFTER ASSEMBLY AND LINK LLA MUST BE RESTARTED\n*\n*    IN SYS1.PARMLIB(MPFLST??) MUST CONTAIN AT LEAST ONE OF THE\n*    FOLLOWING STATEMENTS:\n*\n*      IEE????,SUP(NO),USEREXIT(AIEEXXX)\n*\n*      WHERE IEE???? IS THE MESSAGE ID TO CAUSE OUR INVOCATION\n*\n*      TO ACTIVATE THE MPFLIST; T MPF=??  WHERE ?? IS THE MPFLST SUFFIX\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IEZVX100\n         EJECT\n         PRINT NOGEN\n         IKJTCB                        TIMING CONTROL TABLE\n         IEFTCT                        TIMING CONTROL TABLE\n         IEFJMR                        JOB MANAGEMENT RECORD\nIHAPSA   DSECT\n         IHAPSA\n         EJECT\n***********************************************************************\n*  MAP SAVE AND WORK AREAS THAT ARE ACQUIRED\n***********************************************************************\n         SPACE 1\nDYNAMIC  DSECT\nSAVE1    DS   18F                      SAVE AREA\nDYNAMICL EQU  *-DYNAMIC                LENGTH OF DYNAMIC AREA\n         SPACE 5\nMSGTEXT  DSECT\nMSGID    DS    CL8                     MESSAGE ID\n         EJECT\nAIEEXXX  CSECT\nAIEEXXX  AMODE 31                      31 BIT ADDRESSING MODE\nAIEEXXX  RMODE ANY                     CAN RUN ABOVE OR BELOW\n         SPACE 2\n***********************************************************************\n*  ESTABLISH ADDRESSABILITY, AND CHAIN SAVE AREAS\n***********************************************************************\n         SPACE 1\n         USING *,R15                   EST. ADDRESSABILITY\n         B     PROLOG                  BYPASS PROLOGUE\n         DC    AL1(L'ID)               PROLOGUE LENGTH\nID       DC    C'&SYSDATE-&SYSDATE'    MODULE NAME AND COMPILE DATE\n         DS    0H                      ALLIGNMENT\nPROLOG   SAVE  (14,12)                 SAVE CALLERS REGS\n         LR    R12,R15                 SAVE ENTRY ADRESS\n         DROP  R15                     LOSE OLD BASE\n         USING AIEEXXX,R12             REAL BASE ADDRESS=R12\n         L     CTXTPTR,0(R1)           @CTXT\n         USING CTXT,CTXTPTR            MAP CTXT\n         L     RDCP,CTXTDCP            @DESCRIPTOR CODES\n         USING CTXTDESC,RDCP           MAP DESCRIPTOR CODES\n         SPACE 2\n***********************************************************************\n*\n*  GETMAIN A SAVEAREA AND WORK AREA\n*\n* NOTE! STORAGE IS ACQUIRED BELOW THE LINE DUE TO SVC34 REQUIREMENTS\n*\n***********************************************************************\n         SPACE 1\nGTEMAIN  GETMAIN RU,LV=DYNAMICL,SP=230,LOC=BELOW,RELATED=(FREEMAIN)\n         LR    R11,R1                  @ACQUIRED STORAGE\n         USING DYNAMIC,R11             MAP DYNAMIC AREA\n         ST    R13,SAVE1+4             SETUP\n         LA    R15,SAVE1                 @OUR SAVE AREA\n         ST    R15,8(R13)                SET FORWARD POINTER\n         LR    R13,R15                   @OUR SAVE AREA\n         EJECT\n***********************************************************************\n*  DETERMINE WHICH MESSAGE TO PROCESS\n***********************************************************************\n         SPACE 1\n         L     R2,CTXTTXPJ             @MESSAGE ATTRIBUTESS\n         USING CTXTATTR,R2             MAP MESSAGE ATTRIBUTES\n         LA    RMSG,CTXTTMSG           @BASE TEXT\n         USING MSGTEXT,RMSG            MAP BASE TEXT\n         CLC   MSGID,=CL8'IEE364I'     MESSAGE IEE364I ?\n         BE    IEE364I                 -YES\n         SPACE 3\n***********************************************************************\n*  PUT TESTS FOR NEW MESSAGE TYPES HERE\n***********************************************************************\n         SPACE 1\n         WTO   'AIEEXXX - NO MESSAGE MATCH FOUND'\n         B     RETURN\n         EJECT\n***********************************************************************\n*\n*           1         2         3         4         5\n*  1234567890123456789012345678901234567890123456789012\n*\n*  IEE364I SMF LOGICAL I/O ERROR ON SYS1.MAN?\n*\n***********************************************************************\n         SPACE 1\n*  CAUSE MESSAGE TO BE HIGH-LIGHTED\n         SPACE 1\nIEE364I  EQU   *\n         OI    CTXTDC1,CTXTDC02        CHANGE ATTR TO IMMED ACTION MSG  1380.\n         OI    CTXTRFB1,CTXTRCDC       INDICATE ATTRIBUTE CHANGED       1380.\n         EJECT\n***********************************************************************\n*  RETURN\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         L     R13,4(R13)              @CALLERS SAVE AREA\n         SPACE 2\n*  FREE THE SAVE AREA AND WORK AREA THAT WAS ACQUIRED EARLIER\n         SPACE 1\n         FREEMAIN RU,LV=DYNAMICL,A=(R11),SP=230,RELATED=(GETMAIN)\n         RETURN (14,12)                RESTORE REGS AND RETURN\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND RENTRANT MISCELLANEOUS\n***********************************************************************\n         SPACE 1\n         LTORG\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "APLCAMS": {"ttr": 1283, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x891\\x8f\\x00\\x891\\x8f\\x108\\x00\\xd0\\x00\\xd0\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-11-14T00:00:00", "modifydate": "1989-11-14T10:38:00", "lines": 208, "newlines": 208, "modlines": 0, "user": "HMDEAN"}, "text": "         TITLE 'APLCAMS : IDCAMS PRE-PROCESSOR'\n******************************************************************\n* APLCAMS: FRONT END TO IDCAMS.\n* THIS PROGRAM WILL INVOKE IDCAMS, MAKING MINOR CHANGES TO CERTAIN\n* SYSIN DD CARDS UNDER CERTAIN CONDITIONS.  IF A VOLALLOC DD STATEMENT\n* IS PRESENT, THEN ANY STRING OF XXXXXX WILL BE CHANGED TO THE\n* VOLSER ASSOCIATED WITH THE VOLALLOC DD STATEMENT.\n* THIS FRONT-END IS DESCRIBED IN THE IDCAMS REFERENCE BOOK OR\n* MVS/EXTENDED ARCHITECTURE INTERGRATED CATALOG ADMINISTRATION:\n* ACCESS METHOD SERVICES REFERENCE APPENDIX D.\n* STUART BUZZO APL 12-24-86\n* APF NOTE: THIS PROGRAM IS LINKED WITH AC(1) BECAUSE IDCAMS IS.\n* THE SOLE PURPOSE OF THIS PROGRAM IS TO MOVE THE VOLSER SPECIFICATION\n* OF A VSAM DATA SET FROM THE SYSIN CONTROL CARDS TO JCL CARDS.\n* THIS IS CONSIDERED USEFULL FOR TWO PURPOSES:\n* 1) IT MAKES THE VOLSER SPECIFICATION MORE OBVIOUS: EASIER TO\n*    FIND AND CHANGE OR OVERRIDE.\n* 2) ALLOWS NON-SPECIFIC VOLUME REQUESTS (WORK PACKS) FOR VSAM DATA\n*    SETS.\n*\n*   SAMPLE INVOCATION  WOULD BE AS FOLLOWS:\n*   //JS55       EXEC PGM=APLCAMS,PARM='ANY VALID IDCAMS PARMS'\n*   //SYSPRINT   DD   SYSOUT=*\n*   //VOLALLOC   DD   UNIT=SYSDA,SPACE=(TRK,0),VOL=SER=APLPR7\n*   //SYSIN      DD   *\n*     DEFINE CLUSTER NAME(......\n*     .....................\n*     VOLUME(XXXXXX) .......\n*     .....................\n*\n*   IN THE ABOVE SAMPLE, THE XXXXXX WILL BE CHANGED TO APLPR7\n*=================================================================\n*   WRITTEN BY:\n*\n*   STUART BUZZO\n*   AMERICAN PRESIDENT LINES, LTD.\n*   THREE WATERS PARK DRIVE\n*   SUITE 115\n*   SAN MATEO, CA  94403\n*   (415) 570-2325\n*=================================================================\n******************************************************************\n         EJECT\nR0       EQU 0\nR1       EQU 1\nR2       EQU 2\nR3       EQU 3\nR4       EQU 4\nR5       EQU 5\nR6       EQU 6\nR7       EQU 7\nR8       EQU 8\nR9       EQU 9\nR10      EQU 10\nR11      EQU 11\nR12      EQU 12\nR13      EQU 13\nR14      EQU 14\nR15      EQU 15\n******************************************************************\n* SMALL DSECT OF PARM LISTS PASSED TO IOROUTINE FROM IDCAMS\n******************************************************************\nPRMAREA  DSECT\nUSRADR   DS    AL4\nIOFLAGAD DS    AL4\nIOINFOAD DS    AL4\n******************************************************************\n* MAIN ENTRY POINT, FRONT END TO IDCAMS\n******************************************************************\nAPLCAMS  CSECT\n         STM   14,12,12(13)            SAVE CALLER'S REGISTERS\n         LR    12,15                   LOAD OUR BASE REGISTER\n         USING APLCAMS,12              ASSIGN BASE REGISTER\n         LA    14,SAVEARE1             GET OUR SAVE AREA ADDRESSS\n         ST    13,4(14)                STORE CALLER'S SA ADDR IN OURS\n         ST    14,8(13)                STORE OUR SA ADDR IN CALLER'S\n         LR    13,14                   KEEP OUR SA ADDR\n         B     STARTIT\n         DC    C'APLCAMS: AMERICAN PRESIDENT LINES FRONT END TO IDCAMS'\nSTARTIT  L     R2,0(R1)                GET PARM LIST FROM R1 POINTER\n         ST    R2,OPTADR               STORE PARM ADR IN OPTION ADR\n         MVI   OPTADR,X'00'            RESET VL BIT FROM OS PARM LIST\n*******************************************************************\n* DETERMINE VOLSER FROM VOLALLOC DD CARD\n* PRIME DCB AND OPENLIST FOR SYSIN IN DYNAMIC AREA\n*******************************************************************\n         RDJFCB (VOLALLOC)\n         C     R15,=F'0'               WAS RDJFCB SUCCESSFUL?\n         BNE   BADALLOC                NO, GO AND WTO ABOUT IT\n         MVC   USERDAT1,JFCB+118       MOVE VOLSER TO PARM AREA\n*******************************************************************\n* INVOKE IDCAMS IN FULL STATUS\n*******************************************************************\n         LA    R1,ARGLIST\n         LINK  EP=IDCAMS\n         L     13,SAVEARE1+4           RELOAD CALLER'S SAVEARA ADDR\n         RETURN (14,12),RC=(15)        RELOAD TO OS, PASS ON IDCAMS RC\n*******************************************************************\n* NO DDCARD FOR VOLALLOC, SO INVOKE IDCAMS WITHOUT AND\n* INTERCEPTION OF SYSIN CARDS\n*******************************************************************\nBADALLOC WTO   'APLCAMS: VOLALLOC DD STATEMENT MISSING'\n         WTO   'APLCAMS: IDCAMS WILL BE INVOKED WITHOUT VOLSER SUBSTITUX\n               TIONS'\n         LA    R1,ARGLIST\n         MVI   OPTADR,X'80'            MARK OPTIONS AS LAST PARM\n         LINK  EP=IDCAMS               INVOKE IDCAMS WITH NO IOROUTINE\n         L     13,SAVEARE1+4           RELOAD CALLER'S SAVEARA ADDR\n         RETURN (14,12),RC=(15)        RELOAD TO OS,PASSING IDCAMS RC\n*******************************************************************\n* DC'S AND DCBS FOR APLCAMS CSECT\n* 1) GENERAL JUNK FOR APLCAMS CSECT\n*******************************************************************\nSAVEARE1 DS    18F                     18 FULLWORD SAVE AREA\nVOLALLOC DCB   DDNAME=VOLALLOC,DSORG=PS,MACRF=(GM),EXLST=EXONE\nDDSYSIN  DC    CL10'DDSYSIN   '\n         DS    0F                      FORCE FULLWORD ALIGNMENT\nEXONE    DC    X'87',AL3(JFCB)\nJFCB     DC    CL176' '\n*******************************************************************\n* 2) PARM LIST TO PASS TO IDCAMS WHEN APLCAMS INVOKES IT.\n*******************************************************************\n         DS    0F                      FORCE FULLWORD ALIGNMENT\nARGLIST  DS    0XL16\nOPTADR   DS    AL4\nDDNADR   DC    AL4(DDNLIST)\nPGNADR   DC    AL4(PGNLIST)\nIOLADR   DC    AL4(IOLIST)\n******************************************************************\n* 3) DUMMY PARMS FOR IDCAMS WHEN APLCAMS INVOKES IT.\n******************************************************************\nDDNLIST  DC  XL2'0000'             NO OVERRIDING DDNAMES\nPGNLIST  DC  XL2'0000'\n******************************************************************\n* 4) IOLIST (SYSIN ONLY) FOR IDCAMS WHEN APLCAMS INVOKES IT.\n******************************************************************\n         DS  0F                    FORCE FULL WORD ALIGNMENT\nIOLIST   DS  0XL16\nIOLLEN   DC  F'1'\nIODDN1AD DC  AL4(DDSYSIN)\nIORNTADR DC  AL4(APLSYSIN)\nUSRD1ADR DC  AL4(USERDAT1)\nUSERDAT1 DS  CL6\n         LTORG\n******************************************************************\n*    CSECT APLSYSIN (IOROUTINE FOR DDNAME SYSIN TO BE INVOKED\n*    BY IDCAMS FOR OPEN,GET,CLOSE)\n******************************************************************\nAPLSYSIN CSECT\n         STM   14,12,12(13)            SAVE CALLER'S REGISTERS\n         LR    12,15                   LOAD OUR BASE REGISTER\n         USING APLSYSIN,12             ASSIGN BASE REGISTER\n         LA    14,SAVEARE2             GET OUR SAVE AREA ADDRESSS\n         ST    13,4(14)                STORE CALLER'S SA ADDR IN OURS\n         ST    14,8(13)                STORE OUR SA ADDR IN CALLER'S\n         LR    13,14                   KEEP OUR SA ADDR\n         LR    R9,R1                   GET PARM ADDRESS IN R9\n         USING PRMAREA,R9              MAP PARM AREA\n         L     R7,USRADR               ADDRESS USER DATA FIELD\n         MVC   VOLSER2,0(R7)           GET VOLSER FROM USER DATA FIELD\n         L     R7,IOFLAGAD             DETERMINE WHY IDCAMS INVOKED US\n         CLC   0(1,R7),=X'00'          IS IT AN OPEN?\n         BE    OPENIT                  YES, GO DO IT.\n         CLC   0(1,R7),=X'04'          IS IT A CLOSE?\n         BE    CLOSEIT                 YES, GO DO IT?\n         CLC   0(1,R7),=X'08'          IS IT A GET?\n         BE    GETIT                   YES, GO DO IT.\n         WTO   'APLCAMS: UNEXPECTED REQUEST FROM IDCAMS'\n         ABEND 99,DUMP\nOPENIT   EQU   *\n         L     R7,IOINFOAD\n         CLC   0(8,R7),=CL8'SYSIN   '   IS THE OPEN FOR DDNAME SYSIN?\n         BE    OPENIT2                  YES, BRANCH TO CONTINUE\n         WTO   'APLCAMS: UNEXPECTED DDNAME REQUEST FROM IDCAMS'\n         ABEND 88,DUMP\nGETIT    GET   SYSINDCB,INREC\n         LA    R5,INREC                SET POINTER TO SYSIN RECORD\n         L     R6,=F'78'               SET DECREMENTING COUNTER\nCHECKIT  CLC   0(6,R5),=CL6'XXXXXX'    IS THIS THE ONE?\n         BE    SWITCH                  YES, GO MAKE SUBSTITUION\n         A     R5,=F'1'                INCREMENT POINTER\n         BCT   R6,CHECKIT              ARE WE AT END OF RECORD?\n* FALL THROUGH WHEN AT END OF RECORD\n         L     R5,IOINFOAD\n         MVC   0(4,R5),RECADR          PRIME PARM LIST FOR RETURN\n         MVC   4(4,R5),RECLEN\n         B     RETCAMS                 RETURN TO IDCAMS\nSWITCH   MVC   0(6,R5),VOLSER2         MAKE VOLSER SUBSTITUION\n         B     CHECKIT                 GO BACK FOR MORE\nOPENIT2  OPEN  (SYSINDCB,INPUT)\n         B     RETCAMS                  RETURN TO IDCAMS\nCLOSEIT  CLOSE (SYSINDCB)\n         B     RETCAMS\nEOFSYSIN L     13,SAVEARE2+4           RELOAD CALLER'S SAVEARA ADDR\n         RETURN (14,12),RC=4           RELOAD TO IDCAMS. RC=4 IS EOF\nRETCAMS  L     13,SAVEARE2+4           RELOAD CALLER'S SAVEARA ADDR\n*        LR    R1,R9\n         RETURN (14,12),RC=0           RELOAD TO OS\nSAVEARE2 DS    18F                     18 FULLWORD SAVE AREA\n         LTORG\nSYSINDCB DCB   DDNAME=SYSIN,MACRF=(GM),DSORG=PS,LRECL=80,EODAD=EOFSYSIN\nRECBLK   DS    0XL88\nRECADR   DC    AL4(INREC)\nRECLEN   DC    F'80'\nINREC    DS    CL80\nVOLSER2  DS    CL6\nPGMEND   EQU   *\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "APUT": {"ttr": 1287, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x891\\x8f\\x00\\x891\\x8f\\x108\\x00\\x8a\\x00\\x8a\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-11-14T00:00:00", "modifydate": "1989-11-14T10:38:00", "lines": 138, "newlines": 138, "modlines": 0, "user": "HMDEAN"}, "text": "         MACRO\n&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &\n               &LEN,                    @LENGTH OF MESSAGE             &\n               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &\n               &EPA=                    EPUTL EPA\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*  --> E@PUT\n.*\n.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.\n.*\n.*\n.*  ARGUMENTS: -----------------------------------------------------\n.*\n.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL\n.*\n.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)\n.*\n.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT\n.*            COMPATIBILITY.\n.*\n.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE\n.*\n.*\n.*   EXAMPLES: -----------------------------------------------------\n.*\n.*      1) APUT  'LITERAL'\n.*\n.*      2) APUT  (R3),80\n.*\n.*      3) APUT  LABEL\n.*\n.*      4) APUT  LABEL,40\n.*\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*\n.*  LOCAL SET SYMBOLS\n.*\n         LCLC  &SMA                     MESSAGE ADDRESS (REG)\n         LCLC  &SML                     MESSAGE LENGTH (REG)\n         LCLC  &SEP                     EPA (REGISTER)\n.*\n         LCLC  &L1,&L2,&L3              LOCAL LABELS\n.*\n&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS\n&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS\n&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS\n.*\n.*\n.*  MESSAGE ADDRESS\n.*\n         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*\n.*                                                          *HMD 11/86*\n&LABEL   DS    0H                                           *HMD 11/86*\n.*                                                          *HMD 11/86*\n.A0500   ANOP                                               *HMD 11/86*\n         AIF   ('&MSG' NE '').A2000\n         MNOTE 8,'''&MSG='' MISSING / REQUIRED'\n         MEXIT\n.*\n.A2000   ANOP\n         AIF   ('&MSG'(1,1) NE '(').A2400\n&SMA     SETC  '&MSG'(2,K'&MSG-2)\n         LR    R1,&SMA                  @MESSAGE TEXT\n         AGO   .A2600\n.*\n.A2400   ANOP\n         AIF   ('&MSG'(1,1) NE '''').A2500\n         B     &L3                      BRANCH AROUND MESSAGE\n&L2      DC    C&MSG\n&L3      DS    0H\n         LA    R1,&L2                   @MESSAGE\n         AGO   .A2600\n.*\n.A2500   ANOP\n         LA    R1,&MSG                  @MESSAGE TEXT\n.A2600   ANOP\n.*\n.*  MESSAGE LENGTH\n.*\n         AIF   ('&LEN' NE '').A3000\n         AIF   ('&MSG'(1,1) NE '''').A2800\n         LA    R0,L'&L2                 MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2800   ANOP\n         AIF   ('&MSG'(1,1) EQ '(').A2900\n         LA    R0,L'&MSG                MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2900   ANOP\n         MNOTE 8,'''LEN'' MISSING / REQUIRED'\n         MEXIT\n.*\n.A3000   ANOP\n         AIF   ('&LEN'(1,1) NE '(').A3400\n&SML     SETC  '&LEN'(2,K'&LEN-2)\n         LR    R0,&SML                  MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A3400   ANOP\n         LA    R0,&LEN                  MESSAGE LENGTH\n.A3600   ANOP\n.*\n.*  RSA\n.*\n         AIF   ('&RSA' EQ '').A4900\n         ST    R14,&RSA                 SAVE REGS 14\n.A4900   ANOP\n.*\n.*  ENTRY POINT\n.*\n         AIF   ('&EPA' NE '').A5000\n         L     R15,=V(EPUTL)            EPA\n         AGO   .A5600\n.*\n.A5000   AIF   ('&EPA'(1,1) NE '(').A5400\n&SEP     SETC  '&EPA'(2,K'&EPA-2)\n         LR    R15,&SEP                 EPA\n         AGO   .A5600\n.*\n.A5400   ANOP\n         L     R15,&EPA                 EPA\n.*\n.A5600   ANOP\n.*\n.*  CALL LINKAGE\n.*\n.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE\n.*\n         AIF   ('&RSA' EQ '').A6900\n         L     R14,&RSA                 RESTORE R14\n.A6900   ANOP\n.*\n.AMEND   MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ASID": {"ttr": 1290, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x891\\x8f\\x00\\x891\\x8f\\x108\\x03B\\x03B\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-11-14T00:00:00", "modifydate": "1989-11-14T10:38:00", "lines": 834, "newlines": 834, "modlines": 0, "user": "HMDEAN"}, "text": "ASID    TITLE 'ASID COMMAND PROCESSOR - DISPLAY ACTIVE ADDRESS SPACES'\n        LCLB  &XA             XA ASSEMBLY SWITCH            *HMD 10/85*\n&XA     SETB  1               SET TO ZERO IF NON/XA SYSTEM  *HMD 10/85*\n        SPACE 2                                             *HMD 10/85*\n        AIF   (NOT &XA).X001                                *HMD 10/85*\nASID    AMODE 31                                            *HMD 09/85*\nASID    RMODE ANY             RESIDE ABOVE THE LINE         *HMD 09/85*\n.X001   ANOP                                                *HMD 10/85*\nASID    CSECT\n*\n*   ASID WAS WRITTEN BY\n*                             R P WENZEL\n*                             OPTIMUM SYSTEMS INCORPORATED\n*                             JUNE 2, 1976.\n*\n*   WITH MODIFICATIONS BY\n*                             J R PASEUR\n*                             OPTIMUM SYSTEMS INCORPORATED\n*\n*   MORE MODIFICATIONS BY\n*                             R P WENZEL\n*                             U S POSTAL SERVICE\n*                             FEBRUARY 1977.\n*   MORE MODIFICATIONS BY\n*                             R P WENZEL\n*                             MEMOREX CORPORATION\n*                             APRIL 1979.\n*   MORE MODIFICATIONS FOR SE-II\n*                             R P WENZEL\n*                             ITEL CORPORATION\n*                             APRIL 1981.\n*\n*   MORE MODIFICATIONS FOR SP1.3.1\n*                             R P WENZEL\n*                             AMERICAN PRESIDENT LINES\n*                             MARCH 1984.\n*\n*   MORE MODIFICATIONS FOR SP2.1.1  (XA YOU KNOW)\n*                             R P WENZEL\n*                             AMERICAN PRESIDENT LINES\n*                             DEC   1984.\n*\n*   MORE MODIFICATIONS FOR SP2.1.2  (XA OF COURSE)          *HMD 10/85*\n*                             H M DEAN                      *HMD 10/85*\n*                             SYNTEX U.S.A.                 *HMD 10/85*\n*                             OCT   1985                    *HMD 10/85*\n*    AND OTHERS. . .\n*\n         EJECT                                              *HMD 10/85*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         EJECT                                              *HMD 10/85*\nASID     CSECT\n         AIF   (NOT &XA).X002                               *HMD 10/85*\n         SPLEVEL SET=2                    INDICATE XA MODE  *HMD 10/85*\n.X002    ANOP                                               *HMD 10/85*\n         SAVE  (14,12),,ASID_&SYSDATE._&SYSTIME\n         LR    R12,R15                    SET UP PROGRAM BASE\n         USING ASID,R12\n         USING ASCB,R5\n*\n         BAL   R14,BEGIN\n*\n         B     PRSE\n*\nRETURN   LR    R1,R13                   DYNAMIC AREA ADDRESS IN R1\n         LA    R0,LDYNAMIC              SIZE OF AREA\n         L     R13,4(R13)               PREVIOUS SAVE AREA\n         FREEMAIN RU,LV=(0),A=(1),SP=0  FREE STORAGE        *HMD 10/85*\n         RETURN (14,12),T,RC=0\n EJECT\n*  SUBROUTINE TO GET READY SET AND GO\n*\nBEGIN    LR    R10,R1        SAVE R1\n         AIF   (&XA).X005                                   *HMD 10/85*\n         GETMAIN R,LV=LDYNAMIC          GET CORE\n         AGO   .X006                                        *HMD 10/85*\n.X005    ANOP                                               *HMD 10/85*\n         GETMAIN RU,LV=LDYNAMIC,LOC=RES,SP=0                *HMD 10/85*\n.X006    ANOP                                               *HMD 10/85*\n         LR    R11,R1\n         USING WORKAREA,R11             SET UP ADDRESSABILITY\n         LA    R9,SAVEAREA              CHAIN\n         ST    R13,SAVEAREA+4             SAVE\n         ST    R9,8(R13)                    AREAS\n         LR    R13,R9\n         MVI   LINE,C' '      BLANK LINE\n         MVC   LINE+1(79),LINE\n         MVC   CMPRGRP(2),=CL2'  '\n         MVI   CMPRPRD,C' '\n         MVC   CMPRDMN(2),=CL2'  '\n         MVI   ASIDFLAG,OFF   BLANK FLAG\n         MVI   SWGRP,OFF      BLANK SWITCH\n         MVI   SWPRD,OFF      BLANK SWITCH\n         MVI   SWDMN,OFF      BLANK SWITCH\n         MVI   SWCMD,OFF      BLANK SWITCH                      DLW\n         MVI   SWPRC,OFF      BLANK SWITCH                      RPW\n         L     R2,CVTPTR      CVT ->\n         L     R2,CVTASVT-CVTMAP(R2)                        *HMD 10/85*\n*                             ASID VECTOR TABLE             *HMD 10/85*\n         LA    R2,ASVTMAXU-ASVT(R2)                         *HMD 10/85*\n*                             ADDR OF ASVTMAXU\n         L     R3,0(R2)       ASVTMAXU\n         ST    R3,ASCBMAX     SAVE MAX ASCB'S\n         LA    R2,ASVTFRST-ASVTMAXU(R2)                     *HMD 10/85*\n*                             ADDRESS OF FIRST ASCB         *HMD 10/85*\n         ST    R2,ASCBONE     FIRST ASCB\n         AIF   (&XA).X008                                   *HMD 10/85*\n         BR    R14\n         AGO   .X009                                        *HMD 10/85*\n.X008    ANOP                                               *HMD 10/85*\n         BSM   R0,R14         RETURN TO CALLER              *HMD 10/85*\n.X009    ANOP                                               *HMD 10/85*\n EJECT\n*  SUBROUTINE TO FORMAT ASID NUMBER\n*                       DISPATCHING PRIORITY\n*                       OUCB STATUS FLAGS\n*                       STEP TIME\n*                       AMOUNT OF REAL STORAGE\n*                       CORE AT LAST SWAP IN\n*                       PERFORMANCE GROUP, PERIOD AND DOMAIN\n*                       SWAP REASON AND COUNT\n*                       TRANSACTION COUNT\n*                       NUMBER OF EXCPS\n*\nCOMN     CVD   R3,WORK        CONVERT TO DECIMAL\n         MVC   CHAR,EDMSK1    MOVE EDIT MASK TO CHAR\n         ED    CHAR,WORK+4    EDIT TO EBCDIC\n         MVC   LINEASID,CHAR+5 MOVE THREE CHARS TO LINE\n         USING OUCB,R7\n         L     R7,ASCBOUCB\nCOMNFRST SR    R8,R8          CLEAR R8\n         IC    R8,OUCBNDP     NEW ASCB DISPATCHING PRIORITY\n         SRL   R8,4           LEFT CHAR\n         AH    R8,=H'240'     ADD X'F0'\n         CH    R8,=H'249'     LESS THAN X'F9'\n         BH    COMNFST1       NO\n         STC   R8,LINEDPRT    SAVE CHAR\n         B     COMNSCND       RETURN\nCOMNFST1 SH    R8,=H'57'      SUB X'39'\n         STC   R8,LINEDPRT    SAVE CHAR\nCOMNSCND SR    R8,R8          CLEAR R8\n         IC    R8,ASCBDP      DPRTY\n         LA    R9,240         X'F0'\n         OR    R8,R9          AND REGS.\n         CH    R8,=H'249'     LESS THAN X'F9'\n         BH    COMSCND1       NO\n         STC   R8,LINEDPRT+1  SAVE CHAR\n         B     COMN1          CONTINUE\nCOMSCND1 SH    R8,=H'57'      SUB X'39'\n         STC   R8,LINEDPRT+1  SAVE CHAR\n EJECT\nCOMN1    MVC   LINESTAT,=C'FAIL '  DEFAULT STATUS - FAILED\n         TM    ASCBDSP1,ASCBFAIL   TEST FOR FAILED ADDRSPC\n         BO    COMN3               BR IF ADDRESS SPACE DEAD\n         MVC   LINESTAT,=C'IN   '  DEFAULT - WLM ALGORITHM IN EFFECT\n         LA    R8,COMNMVE1    MOVE STATEMENT\nTESTOUT  LA    R9,=C'LSW'          LOGICALLY SWAPPED\n         TM    OUCBQFL,OUCBLSW\n         BOR   R8\n         LA    R9,=C'OUT'          SWAPPED OUT\n         TM    ASCBRCTF,ASCBOUT    TEST ASCB FOR THIS\n         BOR   R8\n         LA    R9,=C'ENQ'          NONSWAPPABLE DUE TO ENQ\n         TM    OUCBSFL,OUCBENQ\n         BOR   R8\n         LA    R9,=C'NSW'          NON-SWAPPABLE\n         TM    OUCBSFL,OUCBNSW\n         BOR   R8\n         LA    R9,=C'PVL'          PRIVELEGED STATUS\n         TM    OUCBSFL,OUCBPVL\n         BOR   R8\n         LA    R9,=C'AXS'          AUX SHORTAGE FORCED SWAP\n         TM    OUCBYFL,OUCBAXS\n         BOR   R8\n         LA    R9,=C'GOO'          GOING OUT\n         TM    OUCBQFL,OUCBGOO\n         BOR   R8\n         LA    R9,=C'GOI'          GOING IN\n         TM    OUCBQFL,OUCBGOI\n         BOR   R8\n         LA    R9,=C'GOB'          CHANGING STATUS\n         TM    OUCBQFL,OUCBGOB\n         BOR   R8\n         LA    R9,=C'APG'          APG ALGORITM APPLICABLE\n         TM    OUCBAFL,OUCBAPG\n         BOR   R8\n         LA    R9,=C'RPG'          RPGNS ARE PRESENT\n         TM    OUCBAFL,OUCBREPT\n         BOR   R8\n         B     COMN2               ACCEPT DEFAULT STATUS\nCOMNMVE1 MVC   LINESTA1,0(R9) MOVE COMN1\n         SPACE 3\nCOMN2    LA    R8,COMNMVE2    MOVE COMMENT\n         LA    R9,=C'TW'           TERMINAL WAIT\n         TM    OUCBEFL,OUCBTRM\n         BOR   R8\n         LA    R9,=C'MW'           MSO-DETECTED WAIT\n         TM    OUCBEFL,OUCBMWT\n         BOR   R8\n         LA    R9,=C'LW'           LONG WAIT\n         TM    OUCBEFL,OUCBLWT\n         BOR   R8\n         LA    R9,=C'OW'           OUTPUT WAIT\n         TM    OUCBEFL,OUCBOWT\n         BOR   R8\n         LA    R9,=C'NW'           NON-SWAPPABLE WAIT\n         TM    OUCBAFL,OUCBNWT\n         BOR   R8\n         LA    R9,=C'CP'           SIGNIFICANT CPU USER\n         TM    OUCBAFL,OUCBCPL\n         BOR   R8\n         B     COMN3\nCOMNMVE2 MVC   LINESTA2,0(R9) MOVE COMN2\n EJECT\nCOMN3    LM    R8,R9,ASCBEJST           PICK UP CPU TIME\n         SRDL  R8,12                    MOVE TO ODD REG\n         D     R8,=A(1000000)\n         BAL   R7,TIMECNVT    CHANGE SEC. TO HH:MM:SS\n         SPACE 3\n         LH    R8,ASCBFMCT    ALLOCATED PAGE FRAME COUNT\n         SLL   R8,2           MULT. BY 4\n         CVD   R8,WORK        CONVERT TO DECIMAL\n         C     R8,=F'9999'    GREATER THAN 9,999\n         BH    COMN3A         YES, CHANGE TO M\n         CVD   R8,WORK        CONVERT TO DECIMAL\n         MVC   CHAR,EDMSK1    MOVE EDIT MASK TO CHAR\n         ED    CHAR,WORK+4    EDIT TO EBCDIC\n         MVC   LINEFMCT,CHAR+4 MOVE FOUR CHARS TO LINE\n         MVI   LINEFMCT+4,C'K' MOVE C'K' TO PRINT LINE\n         B     COMN3B         RETURN\nCOMN3A   AH    R8,=H'512'     ADD .5M FOR ROUND OFF\n         SRL   R8,10          DIVIDE BY 1024\n         CVD   R8,WORK        CONVERT TO DECIMAL\n         MVC   CHAR,EDMSK1    MOVE EDIT MASK TO CHAR\n         ED    CHAR,WORK+4    EDIT TO EBCDIC\n         MVC   LINEFMCT(4),CHAR+4 MOVE FOUR CHARS TO LINE\n         MVI   LINEFMCT+4,C'M' MOVE M TO LINE\n         SPACE 3\nCOMN3B   L     R7,ASCBOUCB\n         USING OUCB,R7\n         LH    R8,OUCBWSS     WORKING SET SIZE AT SWAP-IN\n         SLL   R8,2           MULT. BY 4\n         CVD   R8,WORK        CONVERT TO DECIMAL\n         MVC   CHAR,EDMSK1    MOVE EDIT MASK TO CHAR\n         ED    CHAR,WORK+4    EDIT TO EBCDIC\n         MVC   LINEWSS,CHAR+4 MOVE FOUR CHARS TO LINE\n         MVI   LINEWSS+4,C'K' MOVE C'K' TO PRINT LINE\n         SPACE 3\n         SR    R8,R8          CLEAR REG. 8\n         LH    R8,OUCBNPG     NEW PERFORMANCE GROUP NUMBER\n         CVD   R8,WORK        CONVERT TO DECIMAL\n         MVC   CHAR,EDMSK1    MOVE EDIT MASK TO CHAR\n         ED    CHAR,WORK+4    EDIT TO EBCDIC\n         MVC   LINENPG,CHAR+6 MOVE TWO CHARS TO LINE\n         MVI   LINENPG+2,C'/' MOVE IN SLASH\n         SPACE 3\n         IC    R8,OUCBPGP     WMPGP OFFSET\n         AH    R8,=H'4'       ADD 4 TO OFFSET, WAS 0C, 1C, 2C ETC\n         SRL   R8,4           DIVIDE BY 16\n         STC   R8,LINEPGP     PERFORMANCE GROUP PERIOD\n         OI    LINEPGP,X'F0'  OR TO GET PRINTABLE CHAR\n         MVI   LINEPGP+1,C'/' MOVE IN SLASH\n         SPACE 3\n         SR    R8,R8          CLEAR REG. 8\n         IC    R8,OUCBDMN     DOMAIN NUMBER\n         CH    R8,=H'9'       DOMAIN NUMBER GREATER THAN 9\n         BH    COMN4          YES THERE ARE TWO CHARS\n         STC   R8,LINEDMN     STORE CHARACTER\n         OI    LINEDMN,X'F0'  MAKE NUMBER\n         B     COMN5          SKIP MOVING TWO CHARACTERS\nCOMN4    CVD   R8,WORK        CONVERT TO DECIMAL\n         MVC   CHAR,EDMSK2    MOVE EDIT MASK TO CHAR\n         ED    CHAR,WORK+4    EDIT TO EBCDIC\n         MVC   LINEDMN,CHAR+6 MOVE TWO CHARS TO LINE\n         SPACE 3\nCOMN5    SR    R8,R8          CLEAR REGISTER 8\n         IC    R8,OUCBSRC     SWAP REASON CODE\n         LTR   R8,R8          EQUAL TO ZERO?\n         BZ    COMN6          GO TO COMN6 AND FIND SWAP COUNT\n         SLL   R8,2           MULT. BY 4 FOR TABLE OFFSET\n         LA    R9,COMNTBLE    TABLE OF SWAP REASON CODES\n         AR    R9,R8          ADD OFFSET\n         MVC   LINESRC(3),0(R9) MOVE SWAP REASON CODE TO LINE\n         B     COMN6          SKIP COMNTBLE\n*                 0   1   2   3   4   5   6  7   8   9  10\nCOMNTBLE DC    C'    OTW/ITW/ LW/ASS/RSS/ DW/ RS/ EE/ERV/  U/'\n         SPACE 3\nCOMN6    LH    R8,OUCBSWC     SWAP COUNT FOR CURRENT TRANSACTION\n         LTR   R8,R8          EQUAL TO ZERO?\n         BZ    COMMTRC        GO GET TRANSACTION COUNT\n         CVD   R8,WORK        CONVERT TO DECIMAL\n         MVC   CHAR,EDMSK1    MOVE EDIT MASK TO CHAR\n         ED    CHAR,WORK+4    EDIT TO EBCDIC\n         MVC   LINESWC,CHAR+3 MOVE FIVE CHARS TO LINE\n         SPACE 3\nCOMMTRC  L     R7,ASCBOUXB\n         USING OUXB,R7\n         L     R8,OUXBTRC     TRANSACTION COUNT\n         LTR   R8,R8          EQUAL TO ZERO?\n         BZ    COMMOUCB       GO GET EXCP COUNT\n         CVD   R8,WORK        CONVERT TO DECIMAL\n         MVC   CHAR,EDMSK1    MOVE EDIT MASK TO CHAR\n         ED    CHAR,WORK+4    EDIT TO EBCDIC\n         MVC   LINETRC,CHAR+4 MOVE FOUR CHARS TO LINE\nCOMMOUCB L     R7,ASCBOUCB\n         USING OUCB,R7\n         L     R8,ASCBIOSC    SMF EXCP COUNT\n         LTR   R8,R8          EQUAL TO 0?\n         BZ    COMNRTN        RETURN\n         C     R8,=F'9999'    GREATER THAN 9,999\n         BH    COMMOUC1       YES, CHANGE TO K\n         CVD   R8,WORK        CONVERT TO DECIMAL\n         MVC   CHAR,EDMSK1    MOVE EDIT MASK TO CHAR\n         ED    CHAR,WORK+4    EDIT TO EBCDIC\n         MVC   LINEEXCP,CHAR+3 MOVE FIVE CHARS TO LINE\n         B     COMNRTN        RETURN\nCOMMOUC1 AH    R8,=H'512'     ADD .5K FOR ROUND OFF\n         SRL   R8,10          DIVIDE BY 1024\n         C     R8,=F'9999'    GREATER THAN 9,999\n         BH    COMMOUC2       YES, CHANGE TO M\n         CVD   R8,WORK        CONVERT TO DECIMAL\n         MVC   CHAR,EDMSK1    MOVE EDIT MASK TO CHAR\n         ED    CHAR,WORK+4    EDIT TO EBCDIC\n         MVC   LINEEXCP(4),CHAR+4 MOVE FOUR CHARS TO LINE\n         MVI   LINEEXCP+4,C'K' MOVE K TO LINE\n         B     COMNRTN        RETURN\nCOMMOUC2 AH    R8,=H'512'     ADD .5M FOR ROUND OFF\n         SRL   R8,10          DIVIDE BY 1024\n         CVD   R8,WORK        CONVERT TO DECIMAL\n         MVC   CHAR,EDMSK1    MOVE EDIT MASK TO CHAR\n         ED    CHAR,WORK+4    EDIT TO EBCDIC\n         MVC   LINEEXCP(4),CHAR+4 MOVE FOUR CHARS TO LINE\n         MVI   LINEEXCP+4,C'M' MOVE M TO LINE\nCOMNRTN  EQU   *\n         BR    R15\n         DROP  R7\n EJECT\n*  SUBROUTINE TO FIND JOBS ON JES INITIATORS\n*\nINIT     MVC   HEADER,INITLINE MOVE INITLINE TO HEADER\n         MVI   HEADERSW,OFF   SET HEADERSW TO OFF\n         L     R2,ASCBONE     FIRST ASCB ->\n         LA    R3,0           SET R3 = 0\n         L     R4,ASCBMAX     MAX NO. OF ASCB\n         TM    ASIDFLAG,ON    WAS ASID=0\n         BZ    INITLOOP       YES\n         LH    R2,ASIDNMBR    NO, PICK UP ASID NUMBER\n         SLL   R2,2           MULT. BY 4\n         A     R2,ASCBONE     FIND CORRECT ASCB\n         LH    R3,ASIDNMBR    PICK UP ASID NUMBER\n         LA    R4,1           NULLIFY LOOP\nINITLOOP TM    0(R2),X'80'    ASID IN USE?\n         BO    INITINCR       NO\n         L     R5,0(R2)       BEGINNING OF ASCB\n         L     R6,ASCBJBNI    JOB NAME FOR INIT PGMS\n         LTR   R6,R6          ZERO?\n         BZ    INITINCR       YES\nINITOUT  MVC   LINEJOBN,0(R6) MOVE JOBNAME\n         MVC   LINESTEP,56(R6) MOVE STEPNAME\nINITPROC CLI   SWPRC,ON                                         RPW\n         BNE   INITNOPR                                         RPW\n         MVC   LINESTEP,24(R6) MOVE PROCNAME                    RPW\nINITNOPR BAL   R15,COMN       COMMON INFO\n         BAL   R7,PUTLINE\nINITINCR LA    R3,1(R3)       ADD ONE TO R3\n         LA    R2,4(R2)       NEXT ASCB ENTRY\n         BCT   R4,INITLOOP\n         BR    R14            RETURN\n EJECT\n*  SUBROUTINE TO PARSE INPUT AND TO PERFORM THE REQUESTS\n*\nPRSE     EQU   *\n         USING CPPL,R10\n*\n*        REMOVE THE * IN THE FOLLOWING 5 LINES OF CODE IF\n*        YOU WISH TO RESTRICT USE OF THIS COMMAND TO ONLY\n*        THOSE USERS WHO HAVE OPERATOR PRIVILEDGES\n*\n*        L     R8,CPPLPSCB\n*        USING PSCB,R8\n*        TM    PSCBATR1,PSCBCTRL USER HAVE OPERATOR PRIV.\n*        BZ    PRSEVLDT      TPUT MESSAGE AND QUIT\n*        DROP  R8\n         LA    R9,PPLADDR         ADDRESSABILITY FOR PPL\n         USING PPL,R9\n         MVC   PPLUPT,CPPLUPT           UPT\n         MVC   PPLECT,CPPLECT           ECT\n         LA    R3,ECB\n         ST    R3,PPLECB                ECB\n         L     R3,PCLADDR\n         ST    R3,PPLPCL                PCL\n         LA    R3,PDLADDR               PDL ADDRESS\n         ST    R3,PPLANS                ANSWER\n         MVC   PPLCBUF,CPPLCBUF         CBUF\n         LA    R1,PPLADDR               GET PARM LIST       *HMD 10/85*\n         LINK  EP=IKJPARS               CALL IKJPARS        *HMD 10/85*\n         LTR   R15,R15\n         BZ    PRSE1\n         APUT  PRSERM,40,RSA=WORK\n         B     RETURN\n         DROP  R9\n         DROP  R10\n EJECT\n*  ROUTINE FOR PARSING\nPRSE1    L     R10,PDLADDR\n         USING IKJPARMD,R10\nPRSECMD  CLC   COMMAND,=H'1'  WAS COMMAND SPECIFIED             DLW\n         BNE   PRSEPRC        NO                                DLW\n         MVI   SWCMD,ON       SET SWITCH                        DLW\nPRSEPRC  CLC   PROCNAME,=H'1'  WAS PROCNAME SPECIFIED           RPW\n         BNE   PRSEGRP        NO                                RPW\n         MVI   SWPRC,ON       SET SWITCH                        RPW\nPRSEGRP  CLC   GROUP,=H'1'    WAS GROUP SPECIFIED?\n         BNE   PRSEPRD        NO\n         MVI   SWGRP,ON       SET SWITCH\n         L     R3,GROUP#      GET ADDRESS OF GROUP NUMBER\n         LH    R4,GROUP#+4    LENGTH OF GROUP NUMBER\n         MVC   CMPRGRP+1(1),0(R3) GET ONE CHARACTER\n         CH    R4,=H'1'       WAS THERE ONLY ONE CHARACTER?\n         BE    PRSEPRD        YES, GO PARSE PERIOD\n         MVC   CMPRGRP(2),0(R3) NO MOVE BOTH CHARACTER\nPRSEPRD  CLC   PERIOD,=H'1'   WAS PERIOD SPECIFIED?\n         BNE   PRSEDMN        NO\n         MVI   SWPRD,ON       SET SWITCH\n         L     R3,PERIOD#     GET ADDRESS OF PERIOD NUMBER\n         MVC   CMPRPRD(1),0(R3) SAVE PERIOD NUMBER\nPRSEDMN  CLC   DOMAIN,=H'1'   WAS DOMAIN SPECIFIED\n         BNE   PRSEASID       NO\n         MVI   SWDMN,ON       SET SWITCH\n         L     R3,DOMAIN#     GET ADDRESS OF DOMAIN NUMBER\n         LH    R4,DOMAIN#+4   LENGTH OF DOMAIN NUMBER\n         MVC   CMPRDMN(1),0(R3) GET ONE CHARACTER\n         CH    R4,=H'1'       WAS THERE ONLY ONE CHARACTER?\n         BE    PRSEASID       YES, GO PARSE ASID\n         MVC   CMPRDMN+1(1),1(R3) NO MOVE SECOND CHARACTER\nPRSEASID L     R3,ASIDNO      ADDR OF ASIDNO\n         CLI   0(R3),C'*'     WANT ONLY CURRENT USER?\n         BNE   PRSEASLN       NO\n         L     R3,CVTPTR      CVT ->\n         L     R3,0(R3)       TCB CURRENT - OLD POINTER\n         L     R3,8(R3)       ASCB CURRENT - OLD POINTER\n         LH    R3,ASCBASID-ASCB(R3)      ASCBASID\n*                             GET ASID NUMBER               *HMD 10/85*\n         STH   R3,ASIDNMBR    SAVE ASID NUMBER\n         LA    R3,4           TSO TYPE NUMBER\n         STH   R3,TYPE        SAVE TYPE\n         B     PSRESTFL\n         SPACE 1\nPRSEASLN LH    R3,ASIDNO+4    LENGTH OF ASIDNO\n         BCTR  R3,0           DECREMENT BY 1\n         LA    R4,X'70'       LENGTH OF WORK - 1\n         OR    R3,R4          LENGTHS FOR PACK INSTR.\n         L     R4,ASIDNO      ADDR OF ASIDNO\n         EX    R3,PACK        PACK ASIDNO\n         CVB   R3,WORK        CONVERT ASID TO BINARY\n         C     R3,ASCBMAX     DOES ASIDNO EXISTS?\n         BH    PRSEMXER       NO SAY SO AND QUIT\n         STH   R3,ASIDNMBR    SAVE ASID NUMBER\n         LTR   R3,R3          ASIDNO = 0 ?\n         BZ    PRSEBRTB       YES GO TO PARSE BRANCH TABLE\nPSRESTFL MVI   ASIDFLAG,ON    NO TURN ASID FLAG ON\nPRSEBRTB XR    R3,R3          CLEAR IN CASE 31 BIT MODE     *HMD 10/85*\n         LH    R3,TYPE        PICK UP TYPE\n         SLL   R3,2           MULT. BY 4\n         B     *+0(R3)        BRANCH TABLE\n         B     PRSEALL        TYPE = 1\n         B     PRSESTRT       TYPE = 2\n         B     PRSEINIT       TYPE = 3\n         B     PRSETSO        TYPE = 4\nPRSEALL  BAL   R14,STRT\n         BAL   R14,INIT\n         BAL   R14,TSOJ\n         B     RETURN\nPRSETSO  BAL   R14,TSOJ\n         B     RETURN\nPRSEINIT BAL   R14,INIT\n         B     RETURN\nPRSESTRT BAL   R14,STRT\n         B     RETURN\n EJECT\nPRSEVLDT APUT  PRSEVLD,40,RSA=WORK\n         B     RETURN\n         SPACE 3\nPRSEMXER L     R3,ASCBMAX     MAX ASCB\n         MVC   LINE,PRSEMXTP\n         CVD   R3,WORK        CONVERT TO DECIMAL\n         MVC   CHAR,EDMSK1    MOVE EDIT MASK TO CHAR\n         ED    CHAR,WORK+4    EDIT TO EBCDIC\n         MVC   LINE+27(4),CHAR+4 MOVE FOUR CHARS TO LINE\n         LA    R3,LINE        SET UP FOR TPUT\n         APUT  (R3),80,RSA=WORK\n         B     RETURN\n         SPACE 3\nPACK     PACK  WORK,0(0,R4)\n*        DROP  R10\n*\nPRSERM   DC    CL40'PARSE ERROR'\nPRSEVLD  DC    CL40'COMMAND NOT AUTHORIZED FOR YOUR USE'\nPRSEMXTP DC    CL80'MAXIMUM NUMBER OF ASCBS IS'\n EJECT\n*  SUBROUTINE TO 1 LOOK FOR GROUPS, PERIODS, DOMAINS,\n*                  IN CORE USERS, OUT OF CORE USERS AND\n*                  HOLES IF REQUESTED,\n*                2 TEST IF APPROPRIATE HEADER HAS BEEN PRINTED,\n*                3 AND THEN PRINT CURRENT LINE\n*\nPUTLINE  EQU   *\nPUTGRP   TM    SWGRP,ON      LOOK FOR A GROUP\n         BNO   PUTPRD        NO\n         CLC   LINENPG(2),CMPRGRP IS THIS THE GROUP\n         BNE   PUTLINE2\nPUTPRD   TM    SWPRD,ON      LOOK FOR A PERIOD\n         BNO   PUTDMN        NO\n         CLC   LINEPGP(1),CMPRPRD IS THIS THE PERIOD\n         BNE   PUTLINE2\nPUTDMN   TM    SWDMN,ON      LOOK FOR A DOMAIN\n         BNO   PUTIN         NO\n         CLC   LINEDMN(2),CMPRDMN IS THIS THE DOMAIN\n         BNE   PUTLINE2\nPUTIN    CLC   REAL(2),=H'2' LOOK FOR IN CORE USERS\n         BNE   PUTOUT         NO\n         CLC   LINEFMCT+2(2),=C' 0'\n         BE    PUTLINE2\nPUTOUT   CLC   REAL(2),=H'3'  LOOK FOR OUT OF CORE USERS\n         BNE   PUTHOLE        NO\n         CLC   LINEFMCT+2(2),=C' 0'\n         BNE   PUTLINE2\nPUTHOLE  CLC   HOLES(2),=H'1' LOOK FOR HOLES ONLY\n         BNE   PUTHEAD        NO\n         CLC   LINEJOBN,=CL8' '\n         BNE   PUTLINE2\nPUTHEAD  TM    HEADERSW,ON    ALREADY TPUT HEADER\n         BO    PUTLINE1       YES SKIP\n         L     R6,CVTPTR      GET CVT ADDR.                 *HMD 10/85*\n         L     R6,CVTSMCA-CVTMAP(R6)                        *HMD 10/85*\n         MVC   HEADER+11(4),16(R6) SAVE IT IN THE HEADER\n         LA    R6,HEADER      ADDR OF HEADER\n         APUT  (R6),80,RSA=WORK\n         MVI   HEADERSW,ON    TURN HEADER SWITCH ON\nPUTLINE1 LA    R6,LINE        ADDR OF LINE FOR TPUT\n         APUT  (R6),80,RSA=WORK  OUTPUT LINE\nPUTLINE2 MVI   LINE,C' '      BLANK LINE\n         MVC   LINE+1(79),LINE\n         BR    7              RETURN\n EJECT\n*  SUBROUTINE TO FIND STARTED TASKS\n*\nSTRT     MVC   HEADER,STRTLINE MOVE STRTLINE TO HEADER\n         MVI   HEADERSW,OFF   SET HEADERSW TO OFF\n         L     R2,ASCBONE     FIRST ASCB ->\n         LA    R3,0           SET R3 = 0\n         L     R4,ASCBMAX     MAX NO. OF ASCB\n         TM    ASIDFLAG,ON    WAS ASID=0\n         BZ    STRTLOOP       YES\n         LH    R2,ASIDNMBR    NO, PICK UP ASID NUMBER\n         SLL   R2,2           MULT. BY 4\n         A     R2,ASCBONE     FIND CORRECT ASCB\n         LH    R3,ASIDNMBR    PICK UP ASID NUMBER\n         LA    R4,1           NULLIFY LOOP\nSTRTLOOP TM    0(R2),X'80'    ASID IN USE?\n         BO    STRTINCR       NO\n         L     R5,0(R2)       BEGINNING OF ASCB\n         L     R6,ASCBJBNI    JOB NAME FOR INIT PGMS\n         LTR   R6,R6          ZERO?\n         BNZ   STRTINCR       NO\n         L     R6,ASCBCSCB    ASCBCSCB ->\n         USING CSCB,R6\n         LTR   R6,R6          ZERO?\n         BZ    STRTOUT        YES SYSTEM TASK\n         TM    CHPKE,CHTSID   TSO JOB?\n         BO    STRTINCR       YES\n         DROP  R6\nSTRTOUT  L     R6,ASCBJBNS    JOB NAME FOR STARTED TASK\n         MVC   LINEJOBN,0(R6) MOVE JOBNAME\n         CLC   LINEJOBN(8),=C'*MASTER*' WAS JOBNAME *MASTER*?\n         BE    STRTOUT0       YES SKIP STEP NAME\n*        STEPNAME\n         MVC   LINESTEP(3),8(R6) MOVE ID  (FIRST 3 CHARS)\n         CLI   8(R6),C'*'\n         BNE   STRTOUT0\n         MVC   LINESTEP,8(R6) MOVE ID  (TASK'S STEPNAME)\nSTRTOUT0 BAL   R15,COMN\n         BAL   R7,PUTLINE\nSTRTINCR LA    R3,1(R3)       ADD ONE TO R3\n         LA    R2,4(R2)       NEXT ASCB ENTRY\n         BCT   R4,STRTLOOP\n         BR    R14            RETURN\n EJECT\n*  SUBROUTINE TO CONVERT TIME IN SEC TO HH:MM:SS.\n*        INPUT - R9=TIME IN SEC.\n*        OUTPUT - TIME IN 'LINEEJST'.\n*\nTIMECNVT MVC   LINEEJST,TIMECNST   SET DEFAULT LINEEJST\n         LTR   R9,R9          ANY SECONDS\n         BZ    TMECNV0        RETURN IF NO TIME\n         SR    R8,R8          ZERO FOR DIVIDE\n         D     R8,=F'3600'    GET HOURS IN R9\n         CVD   R9,WORK\n         UNPK  LINEEJST(2),WORK\n         OI    LINEEJST+1,X'F0'\n         LTR   R8,R8          ANY REMAINING SECONDS\n         BZ    TMECNV0        RETURN IF NO\n         LR    R9,R8          GET READY FOR DIVIDE\n         SR    R8,R8\n         D     R8,=F'60'      GET MINUTES IN R9\n         CVD   R9,WORK\n         UNPK  LINEEJST+3(2),WORK\n         OI    LINEEJST+4,X'F0'\n         CVD   R8,WORK        GET REMAINING SECONDS\n         UNPK  LINEEJST+6(2),WORK\n         OI    LINEEJST+7,X'F0'\nTMECNV0  CLC   LINEEJST(7),=C'00:00:0' CLEAN UP SOME\n         BNE   TMECNV1\n         MVC   LINEEJST(7),=C'       '\nTMECNV1  CLC   LINEEJST(6),=C'00:00:' CLEAN UP SOME MORE\n         BNE   TMECNV2\n         MVC   LINEEJST(6),=C'      '\nTMECNV2  CLC   LINEEJST(4),=C'00:0' CLEAN UP SOME MORE\n         BNE   TMECNV3\n         MVC   LINEEJST(4),=C'    '\nTMECNV3  CLC   LINEEJST(3),=C'00:' CLEAN UP SOME MORE\n         BNE   TMECNV4\n         MVC   LINEEJST(3),=C'   '\nTMECNV4  CLI   LINEEJST,C'0' CLEAN UP SOME MORE\n         BNER  R7              RETURN\n         MVI   LINEEJST,C' '\n         BR    R7             RETURN TO CALLER\n*\nTIMECNST DC    CL8'00:00:00'  DEFAULT TIME VALUE\n EJECT\n*  SUBROUTINE TO FIND TSO USERS\n*\nTSOJ     MVC   HEADER,TSOJLINE MOVE TSOJLINE TO HEADER\n         MVI   HEADERSW,OFF   SET HEADERSW TO OFF\n         L     R2,ASCBONE     FIRST ASCB ->\n         LA    R3,0           SET R3 = 0\n         L     R4,ASCBMAX     MAX NO. OF ASCB\n         TM    ASIDFLAG,ON    WAS ASID=0\n         BZ    TSOJLOOP       YES\n         LH    R2,ASIDNMBR    NO, PICK UP ASID NUMBER\n         SLL   R2,2           MULT. BY 4\n         A     R2,ASCBONE     FIND CORRECT ASCB\n         LH    R3,ASIDNMBR    PICK UP ASID NUMBER\n         LA    R4,1           NULLIFY LOOP\nTSOJLOOP TM    0(R2),X'80'    ASID IN USE?\n         BO    TSOJINCR       NO\n         L     R5,0(R2)       BEGINNING OF ASCB\n         L     R6,ASCBJBNI    JOB NAME FOR INIT PGMS\n         LTR   R6,R6          ZERO?\n         BNZ   TSOJINCR       NO\n         L     R6,ASCBCSCB    ASCBCSCB ->\n         USING CSCB,R6\n         LTR   R6,R6          ZERO?\n         BZ    TSOJINCR       YES SYSTEM TASK\n         TM    CHPKE,CHINITID INTIT?\n         BO    TSOJINCR       YES\n         TM    CHPKE,CHTSID   TSO JOB?\n         BNO   TSOJINCR       NO\nTSOJOUT  MVC   LINEJOBN,CHKEY MOVE JOBNAME\n         MVC   LINESTEP,CHCLS MOVE STEPNAME\n         DROP  R6\n         BAL   R15,COMN\n         BAL   R15,TSOOUCB                                      DLW\n         BAL   R7,PUTLINE\nTSOJINCR LA    R3,1(R3)       ADD ONE TO R3\n         LA    R2,4(R2)       NEXT ASCB ENTRY\n         BCT   R4,TSOJLOOP\n         BR    R14            RETURN\n EJECT\n*\n*  SUBROUTINE TO EXTRACT CURRENT COMMAND\n*         AND TO EXTRACT EXCP COUNT\n*\nTSOOUCB  CLI   SWCMD,ON\n         BNE   TSOOUCB1\n         L     R7,ASCBOUCB\n         USING OUCB,R7\n         MVC   LINESTEP(8),OUCBTRXN\nTSOOUCB1 EQU   *\n         BR    R15            RETURN\n EJECT\nPCLADDR  DC    A(DSPPCL)\nSTRTLINE DC    CL80' '\n         ORG   STRTLINE            RESET ADDRESSABILITY\n         DC    C' ID DP *** XXXX  STC *** FLAGS CPUTIME'\n         DC    C' REAL WORK  G/P/D  EXCPS  TRC SRC    SC'\n         ORG\nINITLINE DC    CL80' '\n         ORG   INITLINE            RESET ADDRESSABILITY\n         DC    C' ID DP *** XXXX  JOB *** FLAGS CPUTIME'\n         DC    C' REAL WORK  G/P/D  EXCPS  TRC SRC    SC'\n         ORG\nTSOJLINE DC    CL80' '\n         ORG   TSOJLINE            RESET ADDRESSABILITY\n         DC    C' ID DP *** XXXX  TSU *** FLAGS CPUTIME'\n         DC    C' REAL WORK  G/P/D  EXCPS  TRC SRC    SC'\n         ORG\nEDMSK1   DC    XL8'4020202020202120'\nEDMSK2   DC    XL8'4020202020212020'\n         LTORG\n EJECT\nDSPPCL   IKJPARM\nASIDNO   IKJIDENT 'ASID NUMBER',ASTERISK,                              C\n               MAXLNTH=3,FIRST=NUMERIC,OTHER=NUMERIC,                  C\n               DEFAULT='0'\nTYPE     IKJKEYWD DEFAULT='ALL'\n         IKJNAME 'ALL'\n         IKJNAME 'STC'\n         IKJNAME 'JOBS'\n         IKJNAME 'TS'\nREAL     IKJKEYWD DEFAULT='BOTH'\n         IKJNAME 'BOTH'\n         IKJNAME 'IN'\n         IKJNAME 'OUT'\nHOLES    IKJKEYWD\n         IKJNAME 'HOLES'\nPROCNAME IKJKEYWD\n         IKJNAME 'PROCNAME'                                   RPW\nCOMMAND  IKJKEYWD\n         IKJNAME 'COMMAND'\nGROUP    IKJKEYWD\n         IKJNAME 'GROUP',SUBFLD=GROUPN\nPERIOD   IKJKEYWD\n         IKJNAME 'PERIOD',SUBFLD=PERIODN\nDOMAIN   IKJKEYWD\n         IKJNAME 'DOMAIN',SUBFLD=DOMAINN\nGROUPN   IKJSUBF\nGROUP#   IKJIDENT 'NUMBER',FIRST=NUMERIC,OTHER=NUMERIC,MAXLNTH=2,      X\n               PROMPT='GROUP NUMBER'\nPERIODN  IKJSUBF\nPERIOD#  IKJIDENT 'NUMBER',FIRST=NUMERIC,MAXLNTH=1,                    X\n               PROMPT='PERIOD NUMBER'\nDOMAINN  IKJSUBF\nDOMAIN#  IKJIDENT 'NUMBER',FIRST=NUMERIC,OTHER=NUMERIC,MAXLNTH=2,      X\n               PROMPT='DOMAIN NUMBER'\n         IKJENDP\n EJECT\n         IKJCPPL\n EJECT\n         IKJPSCB\n EJECT\n         IKJPPL\n EJECT\n*   CSCB\nCSCB     DSECT\n         IEECHAIN\n EJECT\n*   ASCB\n         IHAASCB\n EJECT\n*   OUCB\n         IRAOUCB\n EJECT\n*   OUXB\n         IHAOUXB\n EJECT\nWORKAREA DSECT\nSAVEAREA DS    18F\nLINE     DS    CL80\n         ORG   LINE+0\nLINEASID DS    CL3\n         ORG   LINE+4\nLINEDPRT DS    CL2\n         ORG   LINE+7\nLINEJOBN DS    CL8\n         ORG   LINE+16\nLINESTEP DS    CL8\n         ORG   LINE+25\nLINESTAT DS    0CL5\nLINESTA1 DS    CL3\nLINESTA2 DS    CL2\n         ORG   LINE+30\nLINEEJST DS    CL8\n         ORG   LINE+38\nLINEFMCT DS    CL4\n         ORG   LINE+43\nLINEWSS  DS    CL4\n         ORG   LINE+49\nLINENPG  DS    CL2\n         ORG   LINE+52\nLINEPGP  DS    CL1\n         ORG   LINE+54\nLINEDMN  DS    CL2\n         ORG   LINE+57\nLINEEXCP DS    CL5\n         ORG   LINE+63\nLINETRC  DS    CL4\n         ORG   LINE+68\nLINESRC  DS    CL3\n         ORG   LINE+72\nLINESWC  DS    CL5\n         ORG   LINE+80\nWORK     DS    D\nCHAR     DS    D\nASCBONE  DS    F\nASCBMAX  DS    F\nECB      DS    F\nPDLADDR  DS    F\nPPLADDR  DS    7F\nASIDNMBR DS    H\nHEADER   DS    CL80\nCMPRGRP  DS    CL2\nCMPRPRD  DS    C\nCMPRDMN  DS    CL2\nASIDFLAG DS    C\nSWGRP    DS    C\nSWPRD    DS    C\nSWDMN    DS    C\nSWCMD    DS    C                                                DLW\nSWPRC    DS    C                                                DLW\nHEADERSW DS    C\nLDYNAMIC EQU   *-WORKAREA\nOFF      EQU   X'00'\nON       EQU   X'01'\n         EJECT                                              *HMD 10/85*\n         CVT   DSECT=YES,LIST=YES                           *HMD 10/85*\n         EJECT                                              *HMD 10/85*\n         IHAASVT                                            *HMD 10/85*\n         END   ASID\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BANNER": {"ttr": 1793, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x891\\x8f\\x00\\x891\\x8f\\x108\\x00v\\x00v\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-11-14T00:00:00", "modifydate": "1989-11-14T10:38:00", "lines": 118, "newlines": 118, "modlines": 0, "user": "HMDEAN"}, "text": "BANNER  TITLE '- PRINT PARM IN BLOCK LETTERS'\n*\n*  EQUATES\n*\n*\n*  SYMBOLICS FOR THE GENERAL PURPOSE REGISTERS\n*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12                      BASE REGISTER.\nR13      EQU   13                      STANDARD LINKAGE.\nR14      EQU   14                      STANDARD LINKAGE.\nR15      EQU   15                      STANDARD LINKAGE.\n         SPACE 3\n*\n*        UPON ENTRY TO BANNER :\n*\n*              R1  -  ADDRESS OF JCL PARM AREA.\n*              R13 -  ADDRESS OF AN 18 WORD SAVE AREA.\n*              R14 -  RETURN ADDRESS.\n*              R15 -  ENTRY POINT ADDRESS.\n*\n         EJECT\n*\n*  OBSERVE LINKAGE CONVENTIONS\n*\nBANNER  CSECT\n         SAVE   (14,12),,BANNER-COPYRIGHT_AMERICAN_PRESIDENT_LINES_&SYS-\n               DATE_&SYSTIME\n         USING BANNER,R12              SET BASE ADDRESS FOR MODULE.\n         LR    R12,R15                 SET BASE REGISTER.\n         CNOP  0,4                     ALIGN ON FULLWORD SO BAL IS\n*                                         RIGHT.\n         BAL   R2,APL00100             BRANCH AROUND AND POINT TO OUR\n*                                         SAVE AREA.\nAPLSAVEA DC    18F'-1'                 OUR SAVE AREA.\n         SPACE\nAPL00100 EQU   * ... BRANCH POINT AROUND SAVE AREA ...\n         SPACE\n         ST    R2,8(R13)               SAVE POINTER TO OUR SAVE AREA.\n         ST    R13,4(,R2)              SAVE POINTER TO CALLERS SAVE\n*                                         AREA.\n         LR    R13,R2                  POINT TO OUR SAVE AREA.\n         SPACE 3\n         L     R1,0(R1)                GET THE PARM LIST\n         LH    R2,0(R1)                GET LENGTH OF PARM DATA\n         LA    R3,2(R1)                POINT TO PARM DATA\n         LTR   R2,R2                   IS THE LENGTH ZERO\n         BZ    RETURN                  YES, SIMPLY RETURN\n         C     R2,=F'36'               IS THE LENGTH TOO LONG\n         BNH   MOVEIT                  NO, PRESS ON\n         LA    R2,36                   YES, TRUNCATE\n*\nMOVEIT   BCTR  R2,0                    DECREMENT 1 FOR EXECUTE\n         EX    R2,MOVEDATA             MOVE THE PARM DATA\n         OPEN  (SYSPRINT,OUTPUT)       OPEN SYSPRINT\n         LA    R8,1                    MAKE 1 COPY\nSTRTPAGE EQU   *\n         LA    R7,INPUT                GET THE INPUT ADDRESS\n         ST    R7,INADDR               AND PUT IT IN PARM LIST\n         XC    LINECT,LINECT           ZERO THE LINE COUNT\n         MVI   CC,X'8B'                SKIP TO CHANNEL 1\n         PUT   SYSPRINT,PRTLINE\n         LA    R4,4                    \"LINES\" OF OUTPUT\nSTRTLINE LA    R5,12                   ACTUAL LINES PER \"LINE\"\n         MVI   CC,X'09'                SPACE 1 LINE\nPRTALINE L     R6,LINECT               GET LINE NUMBER TO OUTPUT\n         LA    R6,1(R6)                BUMP BY ONE\n         ST    R6,LINECT               TELL SUBROUTINE\n         LA    R1,PARMLIST             FOR SUBROUTINE\n         CALL  IEFSD095                CALL IT\n         PUT   SYSPRINT,PRTLINE        WRITE IT OUT\n         MVI   OUTPUT,X'40'            BLANK THE LINE\n         MVC   OUTPUT+1(L'OUTPUT-1),OUTPUT\n         BCT   R5,PRTALINE             LOOP BACK FOR 12 LINES\n*\n         MVI   CC,X'13'                PUT IN TWO BLANK LINES\n         PUT   SYSPRINT,PRTLINE\n         L     R7,INADDR               BUMP THROUGH INPUT DATA\n         LA    R7,9(R7)\n         ST    R7,INADDR               AND PUT IT BACK\n         XC    LINECT,LINECT           ZERO THE LINE POINTER\n         BCT   R4,STRTLINE\n         BCT   R8,STRTPAGE             GO BACK FOR ANOTHER PAGE\n         CLOSE SYSPRINT\nRETURN   SR    R15,R15\n         L     R13,4(R13)              EXIT HERE\n         RETURN (14,12),T,RC=(15)\n*\nMOVEDATA MVC   INPUT(0),0(R3)          SAVE THE PARM DATA\n*\nPARMLIST DS    0F                      SUBROUTINE PARM LIST\nINADDR   DC    A(INPUT)                ADDRESS OF INPUT DATA\n         DC    A(LINECT)               ADDRESS OF LINE COUNTER\n         DC    A(OUTPUT)               ADDRESS OF OUTPUT AREA\n         DC    A(CHARCT)               ADDRESS OF CHARACTER COUNT\n*\nINPUT    DC    CL36' '                 INPUT AREA\nLINECT   DC    F'0'                    LINE COUNTER\nCHARCT   DC    F'9'                    CHARACTERS PER LINE\nPRTLINE  DS    0CL133\nCC       DC    C' '                    CARRIAGE CONTROL CHARACTER\nOUTPUT   DC    CL132' '                PRINTLINE\n*\n         LTORG ,                       FORCE OUT LITERAL POOL.\nSYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=PM,LRECL=133,RECFM=FBM,  X\n               BLKSIZE=1330\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "BRODSCAN": {"ttr": 1796, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0f\\x00\\x00\\x00\\x88%\\x0f\\x01\\x01\\x19/\\x10G\\x01\\x1b\\x01\\x03\\x00)\\xe6\\xe2\\xc2\\xc7@@@@@@'", "ispf": {"version": "01.15", "flags": 0, "createdate": "1988-09-06T00:00:00", "modifydate": "2001-07-11T10:47:00", "lines": 283, "newlines": 259, "modlines": 41, "user": "WSBG"}, "text": "BROD     TITLE 'SCAN SYS1.BRODCAST DATASET AND REPORT ON ENTRIES'\nBRODSCAN ENTER 12,*\n*********************************************************************\n**                                                                 **\n**       BRODSCAN -                                                **\n**                                                                 **\n**       WRITTEN 7/83                                              **\n**       WASHINGTON STATE DEPARTMENT OF TRANSPORTATION             **\n**       RICHARD G. NIKULA                                         **\n**                                                                 **\n**       THIS PROGRAM ANALYZES THE TSO BROADCAST DATASET.  IT      **\n**       DISPLAYS THE NUMBER OF AVAILABLE BLOCKS AND HOW THEY      **\n**       ARE USED.  IT ALSO DISPLAYS THE TSO USERS WHO HAVE        **\n**       MESSAGES WAITING.  IN ADDITION IT ALSO DOES A VALIDITY    **\n**       CHECK ON RECORDS WHICH ARE IN THE MESSAGE POOL TO ASSURE  **\n**       THEY ARE CHAINED OFF OF A USER RECORD.  ACCORDING TO      **\n**       DOCUMENTATION, INSTANCES OCCUR WHICH CAN RESULT IN THESE  **\n**       GARBAGE RECORDS EXISTING.                                 **\n**                                                                 **\n**       UPDATED 12/97                                         HD DEC97\n**       HOWARD M. DEAN UCSH UCSF/STANFORD HEALTH CARE         HD DEC97\n**                                                             HD DEC97\n**       1) FIX TYPETBL - DO GETMAIN SO BRODSCAN CAN HANDLE    HD DEC97\n**          LARGE BRODCAST DATASETS.                           HD DEC97\n*********************************************************************\n         EJECT\n         OPEN  (BRODCAST,(INPUT),SYSOUT,(OUTPUT))\n*\n*  GET THE HEADER RECORD\n*\n         READ  HDRECB,DI,BRODCAST,'S','S','S',BLOCKNO\n         CHECK HDRECB\n         L     R3,HDRECB+12\n         USING HEADER,R3\n         MVC   SAVERRN,USERRRN\n         MVC   HIGHVAL,TOTALREC         SAVE GET OUT VALUE\n         LH    R5,HIGHVAL               GET NUMBER FOR PRINTOUT\n         CVD   R5,CVDAREA               CONVERT IT TO PRINTABLE\n         MVC   MAXCNT,=X'4020206B202120'\n         ED    MAXCNT,CVDAREA+5         MAKE IT PRETTY\n         PUT   SYSOUT,MAXIMUM           TELL HOW MANY\n         LH    R5,MAXNOT                GET NUMBER OF NOTICES\n         XR    R4,R4                    CLEAR R4\n         D     R4,=F'25'                NUMBER OF BLOCKS REQUIRED\n         AH    R5,MAXNOT                PLUS TOTAL FOR MESSAGES\n         LTR   R4,R4                    REMAINDER?\n         BZ    CVDNOT\n         LA    R5,1(R5)                 ONE MORE REQUIRED\nCVDNOT   CVD   R5,CVDAREA               CONVERT IT TO PRINTABLE\n         MVC   NOTCNT,=X'40202120'\n         ED    NOTCNT,CVDAREA+6         MAKE IT PRETTY\n         PUT   SYSOUT,NOTICES           TELL HOW MANY\n         FREEDBUF HDRECB,D,BRODCAST\n         LH    R0,HIGHVAL               GET MAXIMUM RECORDS    HD DEC97\n         AH    R0,=H'1'                 ONE FOR GOOD LUCK      HD DEC97\nTYPEGET  GETMAIN RU,LV=(0),LOC=BELOW    GET STORAGE FOR TABLE  HD DEC97\n         ST    R1,TYPETBLA              SAVE ADDRESS           HD DEC97\n         LR    R0,R1                    SAVE ADDRESS           HD DEC97\n         LH    R1,HIGHVAL               GET LENGTH             HD DEC97\n         LM    R14,R15,=D'0'            CLEAR FOR ICM          HD DEC97\n         ICM   R15,B'1000',=X'99'       PAD WITH X'99'         HD DEC97\n         MVCL  R0,R14                   CLEAR AREA             HD DEC97\n         L     R7,TYPETBLA\n         MVI   1(R7),X'04'\nREADLOOP ICM   R1,7,BLOCKNO\n         LA    R1,1(R1)\n         STCM  R1,7,BLOCKNO\n         CLC   BLOCKNO+1(2),HIGHVAL\n         BE    ANALYZE\n         READ  RECECB,DI,BRODCAST,'S','S','S',BLOCKNO\n         CHECK RECECB\n         L     R2,RECECB+20             KEY ADDRESS\n         MVC   0(1,R7),0(R2)            STORE TYPE INTO TABLE\n         LA    R7,1(R7)\n         CLI   0(R2),X'00'              IS THIS NOTICE RECORD\n         BNE   CHK1                     NO.\n         AP    NOTDIR,=P'1'             ADD 1 TO TOTAL\n         B     FREEB\nCHK1     CLI   0(R2),X'01'              IS THIS USERID INDEX RECORD\n         BNE   CHK2                     NO.\n         AP    USRIND,=P'1'             ADD 1 TO TOTAL\n         B     FREEB\nCHK2     CLI   0(R2),X'02'              IS THIS NOTICE MSG RECORD\n         BNE   CHK3                     NO.\n         AP    NOTMSG,=P'1'             ADD 1 TO TOTAL\n         B     FREEB\nCHK3     CLI   0(R2),X'03'              IS THIS USER MESSAGE RECORD\n         BNE   CHKFF                    NO.\n         AP    USRMSG,=P'1'             ADD 1 TO TOTAL\n         B     FREEB\nCHKFF    CLI   0(R2),X'FF'              IS THIS FREE MESSAGE RECORD\n         BNE   UNKNOWN                  NO.\n         AP    FREEREC,=P'1'            ADD 1 TO TOTAL\n         B     FREEB\nUNKNOWN  PUT   SYSOUT,ODDKEY\nFREEB    DS    0H\n         FREEDBUF RECECB,D,BRODCAST\n         B     READLOOP\nANALYZE  EQU   *\n         PUT   SYSOUT,BREAKOUT\n         PUT   SYSOUT,KEYCOUNT\n         MVC   KEYTYPE,=CL50'BROADCAST MSG DIRECTORY RECORDS'\n         MVC   KEYCNT,=X'4020206B202120'\n         ED    KEYCNT,NOTDIR\n         PUT   SYSOUT,KEYCOUNT\n         MVC   KEYTYPE,=CL50'BROADCAST MESSAGE RECORDS'\n         MVC   KEYCNT,=X'4020206B202120'\n         ED    KEYCNT,NOTMSG\n         PUT   SYSOUT,KEYCOUNT\n         MVC   KEYTYPE,=CL50'USERID INDEX RECORDS'\n         MVC   KEYCNT,=X'4020206B202120'\n         ED    KEYCNT,USRIND\n         PUT   SYSOUT,KEYCOUNT\n         MVC   KEYTYPE,=CL50'NON-BROADCAST MESSAGE RECORDS'\n         MVC   KEYCNT,=X'4020206B202120'\n         ED    KEYCNT,USRMSG\n         PUT   SYSOUT,KEYCOUNT\n         MVC   KEYTYPE,=CL50'FREE RECORDS'\n         MVC   KEYCNT,=X'4020206B202120'\n         ED    KEYCNT,FREEREC\n         PUT   SYSOUT,KEYCOUNT\n         PUT   SYSOUT,USERSOUT\nINDEXLP  LA    R6,9                     COUNT OF USERS PER RECORD\n         MVC   BLOCKNO,SAVERRN\n         READ  SCNECB,DI,BRODCAST,'S','S','S',BLOCKNO\n         CHECK SCNECB\n         L     R3,SCNECB+12             ADDRESS OF RECORD\n         MVC   SAVERRN,126(R3)          COPY NEXT INDEX RECORD NUMBER\nUSRLOOP  MVC   USERID,0(R3)             COPY WHO THIS IS\n         CLC   USERID,=7X'00'           IS THIS A REAL USER?\n         BE    NOMSG                    NOPE, MUST HAVE BEEN DELETED\n         AP    USERS,=P'1'\n         XR    R4,R4                    CLEAR UPPER BYTE\n         ICM   R4,7,7(R3)               GET BLOCK POSITION\n         BZ    NOMSG                    NO.. JUST BUMP\nALTCODE  DS    0H                                              HD DEC97\n         SLR   R5,R5                    CLEAR FOR ADD          HD DEC97\n         L     R7,TYPETBLA              GET ADDRESS OF TYPETBL HD DEC97\n         LA    R5,0(R7,R4)              POINT TO TABLE ENTRY   HD DEC97\n         BCTR  R5,0                     ORIGIN ZERO            HD DEC97\n         CLI   0(R5),X'03'              JUST VERIFY WERE WE ARE\n         BE    TABLOK                   THIS IS A VALID ONE    HD DEC97\n         PUT   SYSOUT,TABLERR           JUST LET THEM KNOW I'M CONFUSED\n         B     BUMPUSR\nTABLOK   DS    0H                                              HD DEC97\n         MVI   0(R5),X'88'              SET THAT IT WAS A VALID MESSAGE\nBUMPUSR  AP    MSGCOUNT,=P'1'           INCREMENT HOW MANY MESSAGES\n         STCM  R4,7,MSGNUM\n         READ  MSGECB,DI,BRODCAST,'S','S','S',MSGNUM\n         CHECK MSGECB\n         L     R4,MSGECB+12             ADDRESS OF RECORD\n         ICM   R4,7,126(R4)             RRN OF NEXT MESSAGE\n         FREEDBUF MSGECB,D,BRODCAST\n         LTR   R4,R4\n         BNZ   ALTCODE\n         AP    RECCNT,=P'1'\n         CP    RECCNT,=P'2'             TEST MID RANGE\n         BL    LINE1                    LOWER\n         BH    LINE3                    HIGHER\n         BE    LINE2                    .MIDRANGE\nLINE1    MVC   MSGCNT1,=X'40202120'\n         MVC   USERID1,USERID\n         ED    MSGCNT1,MSGCOUNT\n         B     ZAPCNT\nLINE2    MVC   MSGCNT2,=X'40202120'\n         MVC   USERID2,USERID\n         ED    MSGCNT2,MSGCOUNT\n         B     ZAPCNT\nLINE3    MVC   MSGCNT3,=X'40202120'\n         MVC   USERID3,USERID\n         ED    MSGCNT3,MSGCOUNT\n         PUT   SYSOUT,USERLINE\n         MVC   MSGCNT2,=CL4' '\n         MVC   MSGCNT3,=CL4' '\n         MVC   USERID2,=CL7' '\n         MVC   USERID3,=CL7' '\n         ZAP   RECCNT,=P'0'\nZAPCNT   ZAP   MSGCOUNT,=P'0'\nNOMSG    LA    R3,13(R3)                BUMP TO NEXT ENTRY\n         BCT   R6,USRLOOP               REPEAT FOR NINE TIMES\n         FREEDBUF SCNECB,D,BRODCAST\n         CLC   SAVERRN,=3X'00'          IS THIS LAST\n         BNE   INDEXLP                  GO DO NEXT ONE\n         CP    RECCNT,=P'0'\n         BE    PUTUCNT\n         PUT   SYSOUT,USERLINE\nPUTUCNT  MVC   USERCNT,=X'4020206B202120'\n         ED    USERCNT,USERS            HOW MANY USERS ARE THERE\n         PUT   SYSOUT,UTOTLINE\n         L     R7,TYPETBLA              ONCE MORE THRU TYPETAB HD DEC97\nVERFLOOP CLI   0(R7),X'99'              END YET?\n         BE    ENDVERF\n         CLI   0(R7),X'03'              IS THIS STILL AN 03\n         LA    R7,1(R7)                 BUMP EITHER WAY\n         BNE   VERFLOOP\n         AP    UNUSABL,=P'1'\n         B     VERFLOOP\nENDVERF  EQU   *\n         MVC   UNUSDCNT,=X'40202120'\n         ED    UNUSDCNT,UNUSABL+1\n         PUT   SYSOUT,JUNKLINE\nCLOSE    CLOSE (BRODCAST,,SYSOUT)\nFREETYP  DS    0H                                              HD DEC97\n         L     R1,TYPETBLA              ADDRESS OF TABLE       HD DEC97\n         LH    R0,HIGHVAL               LENGTH OF TABLE        HD DEC97\n         AH    R0,=H'1'                 INCREMENT BY ONE       HD DEC97\n         FREEMAIN RU,LV=(0),A=(1)       FREE TYPE TABLE        HD DEC97\n         LEAVE EQ\n         EJECT\n         LTORG\n         SPACE 2\nBLOCKNO  DC    X'000000'                BLOCK NUMBERS\nSAVERRN  DS    CL3                      SAVE LOCAL OF USER INDEX\nMSGNUM   DS    CL3                      SAVE LOCAL OF USER INDEX\nCVDAREA  DS    D\nTYPETBLA DS    F       ADDRESS OF GETMAINED TYPE TABLE         HD DEC97\nHIGHVAL  DS    H\nRECCNT   DC    PL1'0'\nMSGCOUNT DC    PL2'0'\nNOTDIR   DC    PL3'0'\nUSRIND   DC    PL3'0'\nNOTMSG   DC    PL3'0'\nUSRMSG   DC    PL3'0'\nFREEREC  DC    PL3'0'\nUNUSABL  DC    PL3'0'\nUSERS    DC    PL3'0'\nODDKEY   DC    CL133'  ** UNKNOWN KEY TYPE ENCOUNTERED ***'\nTABLERR  DC    CL133'  ** TABLE IS OUT OF SYNC WITH MY REALITY **'\nBREAKOUT DC    CL133'0< THE FOLLOWING KEY BREAKDOWN WAS FOUND >'\nUSERSOUT DC    CL133'0< THE FOLLOWING USERS HAVE MESSAGES WAITING >'\nUSERID   DS    CL7\nKEYCOUNT DS    0CL133\n         DC    CL10' '\nKEYTYPE  DC    CL50'HEADER RECORDS'\nKEYCNT   DC    CL7'      1'\n         DC    CL66' '\nMAXIMUM  DS    0CL133\n         DC    CL60'1TOTAL AVAILABLE BLOCKS IN DATASET'\nMAXCNT   DS    CL7\n         DC    CL66' '\nNOTICES  DS    0CL133\n         DC    CL63' BLOCKS NECESSARY FOR BROADCST MSGS (DIRECTORY/MESSX\n               AGES)'\nNOTCNT   DS    CL4\n         DC    CL66' '\nUSERLINE DS    0CL133\n         DC    CL10' '\nUSERID1  DS    CL7\n         DC    CL5' '\nMSGCNT1  DS    CL4\n         DC    CL10' '\nUSERID2  DS    CL7\n         DC    CL5' '\nMSGCNT2  DS    CL4\n         DC    CL10' '\nUSERID3  DS    CL7\n         DC    CL5' '\nMSGCNT3  DS    CL4\n         DC    CL55' '\nUTOTLINE DS    0CL133\n         DC    CL60' NUMBER OF TSO USERS DEFINED IN DATASET'\nUSERCNT  DS    CL7\n         DC    CL66' '\nJUNKLINE DS    0CL133\n         DC    CL63'0BLOCKS FOUND TO BE GARBAGED'\nUNUSDCNT DS    CL4\n         DC    CL66' '\n         EJECT\nBRODCAST DCB   DDNAME=BRODCAST,BLKSIZE=129,DSORG=DA,MACRF=RISC,        X\n               OPTCD=R,RECFM=F,BUFNO=2,KEYLEN=1,BUFL=130\n         EJECT\nSYSOUT   DCB   DDNAME=SYSOUT,DSORG=PS,LRECL=133,MACRF=PM,RECFM=FBA\n         EJECT\nHEADER   DSECT\n         DS    CL1\nNOTRRN   DS    CL3                      RRN OF FIRST NOTICE RECORD\n         DS    CL1\nUSERRRN  DS    CL3                      RRN OF FIRST INDEX RECORD\n         DS    CL2\nTOTALREC DS    CL2                      NUMBER OF RECORDS IN FILE\nMAXNOT   DS    CL2                      MAXIMUM NUMBER OF NOTICES\n         DS    CL1                      -- REST OF RECORD ---\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BRODSCOL": {"ttr": 1802, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x891\\x8f\\x00\\x891\\x8f\\x104\\x01\\x03\\x01\\x03\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-11-14T00:00:00", "modifydate": "1989-11-14T10:34:00", "lines": 259, "newlines": 259, "modlines": 0, "user": "SBGOLOB"}, "text": "BROD     TITLE 'SCAN SYS1.BRODCAST DATASET AND REPORT ON ENTRIES'\nBRODSCAN ENTER 12,*\n*********************************************************************\n**                                                                 **\n**       BRODSCAN -                                                **\n**                                                                 **\n**       WRITTEN 7/83                                              **\n**       WASHINGTON STATE DEPARTMENT OF TRANSPORTATION             **\n**       RICHARD G. NIKULA                                         **\n**                                                                 **\n**       THIS PROGRAM ANALYZES THE TSO BROADCAST DATASET.  IT      **\n**       DISPLAYS THE NUMBER OF AVAILABLE BLOCKS AND HOW THEY      **\n**       ARE USED.  IT ALSO DISPLAYS THE TSO USERS WHO HAVE        **\n**       MESSAGES WAITING.  IN ADDITION IT ALSO DOES A VALIDITY    **\n**       CHECK ON RECORDS WHICH ARE IN THE MESSAGE POOL TO ASSURE  **\n**       THEY ARE CHAINED OFF OF A USER RECORD.  ACCORDING TO      **\n**       DOCUMENTATION, INSTANCES OCCUR WHICH CAN RESULT IN THESE  **\n**       GARBAGE RECORDS EXISTING.                                 **\n**                                                                 **\n*********************************************************************\n         EJECT\n         OPEN  (BRODCAST,(INPUT),SYSOUT,(OUTPUT))\n*\n*  GET THE HEADER RECORD\n*\n         READ  HDRECB,DI,BRODCAST,'S','S','S',BLOCKNO\n         CHECK HDRECB\n         L     R3,HDRECB+12\n         USING HEADER,R3\n         MVC   SAVERRN,USERRRN\n         MVC   HIGHVAL,TOTALREC         SAVE GET OUT VALUE\n         LH    R5,HIGHVAL               GET NUMBER FOR PRINTOUT\n         CVD   R5,CVDAREA               CONVERT IT TO PRINTABLE\n         MVC   MAXCNT,=X'4020206B202120'\n         ED    MAXCNT,CVDAREA+5         MAKE IT PRETTY\n         PUT   SYSOUT,MAXIMUM           TELL HOW MANY\n         LH    R5,MAXNOT                GET NUMBER OF NOTICES\n         XR    R4,R4                    CLEAR R4\n         D     R4,=F'25'                NUMBER OF BLOCKS REQUIRED\n         AH    R5,MAXNOT                PLUS TOTAL FOR MESSAGES\n         LTR   R4,R4                    REMAINDER?\n         BZ    CVDNOT\n         LA    R5,1(R5)                 ONE MORE REQUIRED\nCVDNOT   CVD   R5,CVDAREA               CONVERT IT TO PRINTABLE\n         MVC   NOTCNT,=X'40202120'\n         ED    NOTCNT,CVDAREA+6         MAKE IT PRETTY\n         PUT   SYSOUT,NOTICES           TELL HOW MANY\n         FREEDBUF HDRECB,D,BRODCAST\n         LA    R7,TYPETABL+1\n         MVI   TYPETABL,X'04'\nREADLOOP ICM   R1,7,BLOCKNO\n         LA    R1,1(R1)\n         STCM  R1,7,BLOCKNO\n         CLC   BLOCKNO+1(2),HIGHVAL\n         BE    ANALYZE\n         READ  RECECB,DI,BRODCAST,'S','S','S',BLOCKNO\n         CHECK RECECB\n         L     R2,RECECB+20             KEY ADDRESS\n         MVC   0(1,R7),0(R2)            STORE TYPE INTO TABLE\n         LA    R7,1(R7)\n         CLI   0(R2),X'00'              IS THIS NOTICE RECORD\n         BNE   CHK1                     NO.\n         AP    NOTDIR,=P'1'             ADD 1 TO TOTAL\n         B     FREEB\nCHK1     CLI   0(R2),X'01'              IS THIS USERID INDEX RECORD\n         BNE   CHK2                     NO.\n         AP    USRIND,=P'1'             ADD 1 TO TOTAL\n         B     FREEB\nCHK2     CLI   0(R2),X'02'              IS THIS NOTICE MSG RECORD\n         BNE   CHK3                     NO.\n         AP    NOTMSG,=P'1'             ADD 1 TO TOTAL\n         B     FREEB\nCHK3     CLI   0(R2),X'03'              IS THIS USER MESSAGE RECORD\n         BNE   CHKFF                    NO.\n         AP    USRMSG,=P'1'             ADD 1 TO TOTAL\n         B     FREEB\nCHKFF    CLI   0(R2),X'FF'              IS THIS FREE MESSAGE RECORD\n         BNE   UNKNOWN                  NO.\n         AP    FREEREC,=P'1'            ADD 1 TO TOTAL\n         B     FREEB\nUNKNOWN  PUT   SYSOUT,ODDKEY\nFREEB    FREEDBUF RECECB,D,BRODCAST\n         B     READLOOP\nANALYZE  EQU   *\n         PUT   SYSOUT,BREAKOUT\n         PUT   SYSOUT,KEYCOUNT\n         MVC   KEYTYPE,=CL50'BROADCAST MSG DIRECTORY RECORDS'\n         MVC   KEYCNT,=X'4020206B202120'\n         ED    KEYCNT,NOTDIR\n         PUT   SYSOUT,KEYCOUNT\n         MVC   KEYTYPE,=CL50'BROADCAST MESSAGE RECORDS'\n         MVC   KEYCNT,=X'4020206B202120'\n         ED    KEYCNT,NOTMSG\n         PUT   SYSOUT,KEYCOUNT\n         MVC   KEYTYPE,=CL50'USERID INDEX RECORDS'\n         MVC   KEYCNT,=X'4020206B202120'\n         ED    KEYCNT,USRIND\n         PUT   SYSOUT,KEYCOUNT\n         MVC   KEYTYPE,=CL50'NON-BROADCAST MESSAGE RECORDS'\n         MVC   KEYCNT,=X'4020206B202120'\n         ED    KEYCNT,USRMSG\n         PUT   SYSOUT,KEYCOUNT\n         MVC   KEYTYPE,=CL50'FREE RECORDS'\n         MVC   KEYCNT,=X'4020206B202120'\n         ED    KEYCNT,FREEREC\n         PUT   SYSOUT,KEYCOUNT\n         PUT   SYSOUT,USERSOUT\nINDEXLP  LA    R6,9                     COUNT OF USERS PER RECORD\n         MVC   BLOCKNO,SAVERRN\n         READ  SCNECB,DI,BRODCAST,'S','S','S',BLOCKNO\n         CHECK SCNECB\n         L     R3,SCNECB+12             ADDRESS OF RECORD\n         MVC   SAVERRN,126(R3)          COPY NEXT INDEX RECORD NUMBER\nUSRLOOP  MVC   USERID,0(R3)             COPY WHO THIS IS\n         CLC   USERID,=7X'00'           IS THIS A REAL USER?\n         BE    NOMSG                    NOPE, MUST HAVE BEEN DELETED\n         AP    USERS,=P'1'\n         XR    R4,R4                    CLEAR UPPER BYTE\n         ICM   R4,7,7(R3)               GET BLOCK POSITION\n         BZ    NOMSG                    NO.. JUST BUMP\nALTCODE  LA    R5,TYPETABL(R4)          ADDRESS OF THIS BLOCK IN TABLE\n         CLI   0(R5),X'03'              JUST VERIFY WERE WE ARE\n         BE    TABLOK\n         PUT   SYSOUT,TABLERR           JUST LET THEM KNOW I'M CONFUSED\n         B     BUMPUSR\nTABLOK   EQU   *\n         MVI   0(R5),X'88'              SET THAT IT WAS A VALID MESSAGE\nBUMPUSR  AP    MSGCOUNT,=P'1'           INCREMENT HOW MANY MESSAGES\n         STCM  R4,7,MSGNUM\n         READ  MSGECB,DI,BRODCAST,'S','S','S',MSGNUM\n         CHECK MSGECB\n         L     R4,MSGECB+12             ADDRESS OF RECORD\n         ICM   R4,7,126(R4)             RRN OF NEXT MESSAGE\n         FREEDBUF MSGECB,D,BRODCAST\n         LTR   R4,R4\n         BNZ   ALTCODE\n         AP    RECCNT,=P'1'\n         CP    RECCNT,=P'2'             TEST MID RANGE\n         BL    LINE1                    LOWER\n         BH    LINE3                    HIGHER\n         BE    LINE2                    .MIDRANGE\nLINE1    MVC   MSGCNT1,=X'40202120'\n         MVC   USERID1,USERID\n         ED    MSGCNT1,MSGCOUNT\n         B     ZAPCNT\nLINE2    MVC   MSGCNT2,=X'40202120'\n         MVC   USERID2,USERID\n         ED    MSGCNT2,MSGCOUNT\n         B     ZAPCNT\nLINE3    MVC   MSGCNT3,=X'40202120'\n         MVC   USERID3,USERID\n         ED    MSGCNT3,MSGCOUNT\n         PUT   SYSOUT,USERLINE\n         MVC   MSGCNT2,=CL4' '\n         MVC   MSGCNT3,=CL4' '\n         MVC   USERID2,=CL7' '\n         MVC   USERID3,=CL7' '\n         ZAP   RECCNT,=P'0'\nZAPCNT   ZAP   MSGCOUNT,=P'0'\nNOMSG    LA    R3,13(R3)                BUMP TO NEXT ENTRY\n         BCT   R6,USRLOOP               REPEAT FOR NINE TIMES\n         FREEDBUF SCNECB,D,BRODCAST\n         CLC   SAVERRN,=3X'00'          IS THIS LAST\n         BNE   INDEXLP                  GO DO NEXT ONE\n         CP    RECCNT,=P'0'\n         BE    PUTUCNT\n         PUT   SYSOUT,USERLINE\nPUTUCNT  MVC   USERCNT,=X'4020206B202120'\n         ED    USERCNT,USERS            HOW MANY USERS ARE THERE\n         PUT   SYSOUT,UTOTLINE\n         LA    R7,TYPETABL              ONCE MORE THRU TYPE TABLE\nVERFLOOP CLI   0(R7),X'99'              END YET?\n         BE    ENDVERF\n         CLI   0(R7),X'03'              IS THIS STILL AN 03\n         LA    R7,1(R7)                 BUMP EITHER WAY\n         BNE   VERFLOOP\n         AP    UNUSABL,=P'1'\n         B     VERFLOOP\nENDVERF  EQU   *\n         MVC   UNUSDCNT,=X'40202120'\n         ED    UNUSDCNT,UNUSABL\n         PUT   SYSOUT,JUNKLINE\nCLOSE    CLOSE (BRODCAST,,SYSOUT)\n         LEAVE EQ\n         EJECT\n         LTORG\n         SPACE 2\nBLOCKNO  DC    X'000000'                BLOCK NUMBERS\nSAVERRN  DS    CL3                      SAVE LOCAL OF USER INDEX\nMSGNUM   DS    CL3                      SAVE LOCAL OF USER INDEX\nCVDAREA  DS    D\nHIGHVAL  DS    H\nRECCNT   DC    PL1'0'\nMSGCOUNT DC    PL2'0'\nNOTDIR   DC    PL3'0'\nUSRIND   DC    PL3'0'\nNOTMSG   DC    PL3'0'\nUSRMSG   DC    PL3'0'\nFREEREC  DC    PL3'0'\nUNUSABL  DC    PL3'0'\nUSERS    DC    PL3'0'\nODDKEY   DC    CL133'  ** UNKNOWN KEY TYPE ENCUNTERED ***'\nTABLERR  DC    CL133'  ** TABLE IS OUT OF SYNC WITH MY REALITY **'\nBREAKOUT DC    CL133'0< THE FOLLOWING KEY BREAKDOWN WAS FOUND >'\nUSERSOUT DC    CL133'0< THE FOLLOWING USERS HAVE MESSAGES WAITING >'\nUSERID   DS    CL7\nKEYCOUNT DS    0CL133\n         DC    CL10' '\nKEYTYPE  DC    CL50'HEADER RECORDS'\nKEYCNT   DC    CL7'      1'\n         DC    CL66' '\nMAXIMUM  DS    0CL133\n         DC    CL60'1TOTAL AVAILABLE BLOCKS IN DATASET'\nMAXCNT   DS    CL7\n         DC    CL66' '\nNOTICES  DS    0CL133\n         DC    CL63' BLOCKS NECESSARY FOR BROADCST MSGS (DIRECTORY/MESSX\n               AGES)'\nNOTCNT   DS    CL4\n         DC    CL66' '\nUSERLINE DS    0CL133\n         DC    CL10' '\nUSERID1  DS    CL7\n         DC    CL5' '\nMSGCNT1  DS    CL4\n         DC    CL10' '\nUSERID2  DS    CL7\n         DC    CL5' '\nMSGCNT2  DS    CL4\n         DC    CL10' '\nUSERID3  DS    CL7\n         DC    CL5' '\nMSGCNT3  DS    CL4\n         DC    CL55' '\nUTOTLINE DS    0CL133\n         DC    CL60' NUMBER OF TSO USERS DEFINED IN DATASET'\nUSERCNT  DS    CL7\n         DC    CL66' '\nJUNKLINE DS    0CL133\n         DC    CL63'0BLOCKS FOUND TO BE GARBAGED'\nUNUSDCNT DS    CL4\n         DC    CL66' '\n         EJECT\nBRODCAST DCB   DDNAME=BRODCAST,BLKSIZE=129,DSORG=DA,MACRF=RISC,        X\n               OPTCD=R,RECFM=F,BUFNO=2,KEYLEN=1,BUFL=130\n         EJECT\nSYSOUT   DCB   DDNAME=SYSOUT,DSORG=PS,LRECL=133,MACRF=PM,RECFM=FBA\n         EJECT\nTYPETABL DC    16318X'99'\nHEADER   DSECT\n         DS    CL1\nNOTRRN   DS    CL3                      RRN OF FIRST NOTICE RECORD\n         DS    CL1\nUSERRRN  DS    CL3                      RRN OF FIRST INDEX RECORD\n         DS    CL2\nTOTALREC DS    CL2                      NUMBER OF RECORDS IN FILE\nMAXNOT   DS    CL2                      MAXIMUM NUMBER OF NOTICES\n         DS    CL1                      -- REST OF RECORD ---\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CARTCOPY": {"ttr": 2051, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x891\\x8f\\x00\\x891\\x8f\\x108\\x02Z\\x02Z\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-11-14T00:00:00", "modifydate": "1989-11-14T10:38:00", "lines": 602, "newlines": 602, "modlines": 0, "user": "HMDEAN"}, "text": "         TITLE 'CARTRIDGE TAPE COPY'\nCARTCOPY START\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         PRINT GEN\n         STM   R14,R12,12(R13)           SAVE CALLERS REGISTERS\n         LR    R9,R15                    INITIALIZE BASE REGISTER\n         USING CARTCOPY,R9,R10           ESTABLISH ADDRESSABILITY\n         ST    R13,MYSAVE+4              LINK TO MINE\n         LA    R11,MYSAVE                MY SAVE AREA\n         ST    R11,8(R13)                LINK TO CALLERS\n         LR    R13,R11                   POINT R13 TO MY SAVE AREA\n         LR    R10,R9                    PUT CONTENTS OF R9 INTO R10\n         AH    R10,K4                    ADD 4096\n         B     BEGIN                     START EM UP\nMYNAME   DC    C'CARTCOPY'\nVERSION  DC    C'1.0'\n         DC    C' &SYSDATE, &SYSTIME'\nK4       DC    H'4096'\nMYSAVE   DC    18F'0'\n*********************************************************************\n* OPEN FILES                                                        *\n*********************************************************************\nBEGIN    DS    0H\n         OPEN  (INPUT,INPUT,FATSOUT,OUTPUT)\n         OPEN  (REJECT,OUTPUT)\n*********************************************************************\n* INITIALIZE THE TMC PARAMETER LIST                                 *\n*********************************************************************\nOPENTMC  DS    0H\n         OPENTMC NOTACT=READERR3         INITIALIZE PARAMETR LIST\n*********************************************************************\n* HEADING ROUTINE                                                   *\n*********************************************************************\n         BAL   R8,REJHDR\n         B     READCARD\nREJHDR   DS    0H\n         AP    RPAGE,PONE                ADD 1 TO PAGE COUNTER\n         MVC   REJPAGE,=X'40202120'      MOVE IN EDIT MASK FOR EXPAGE\n         ED    REJPAGE,RPAGE             EDIT EXPAGE ON OUTPUT\n         PUT   REJECT,REJHDG1            WRITE HEADING 1\n         PUT   REJECT,BLANKS             INSERT BLANK LINE\n         BR    R8                        BRANCH BACK TO MAINLINE\n*********************************************************************\n* MAINLINE ROUTINE                                                  *\n*********************************************************************\nREADCARD DS    0H\n         GET   INPUT,INREC               GET INPUT RECORD\n         CLI   INREC+3,C'A'              DOES VOL BEGIN WITH 'A'?\n         BE    ACCEPT                    YES - ACCEPT RECORD\n         PUT   REJECT,INREC              REJECT RECORD\n         AP    RCOUNT,PONE               ADD 1 TO REJECT RECORD COUNT\n         CLC   RCOUNT,PTHIRTY            IS REJECT RECORD COUNT > 30?\n         BL    READCARD                  NO - GET ANOTHER CARD\n         BAL   R8,REJHDR                 YES - GO TO HEADING ROUNTINE\n         ZAP   RCOUNT,PZEROS             RESET REJECT CARD COUNTER\n         B     READCARD                  GET ANOTHER CARD\nACCEPT   DS    0H\n*        WTO   'ACCEPT',ROUTCDE=(11)\n         MVC   VSN(6),INVOLSER           MOVE VOLSER TO VSN FIELD\n****************************************************************\n* GET THE TMC RECORD FOR VOLSER                                *\n****************************************************************\n         LA    R12,RECWORK1              LOAD RECWORK1 AREA ADDRESS\n         USING TMREC,R12\nREADTMC  DS    0H\n*        WTO   'READTMC',ROUTCDE=(11)\n         GETTMC VSN,RECWORK1,READERR1,ENQ=NO  GET THE TMC RECORD\n         MVC   VOLTABLE,VOLTABLE-1       CLEAR VOLTABLE\n         MVC   VOLTABL1,VOLTABL1-1       CLEAR VOLTABLE1\n         LA    R7,VOLTABLE               LOAD ADDRESS OF VOLTABLE IN R7\n         MVC   0(6,R7),TMVOLSER          MOVE VOLSER INTO VOLTABLE\n         LA    R7,6(,R7)                 INCREMENT R7 BY 6\n* CATALOG SEARCH\n         MVI   CATFLAG,C'N'              RESET CATFLAG\n         MVC   DATASET,TMDSN             MOVE DATA SET FOR LOCATE\n         LOCATE LOCDSN                   TRY TO FIND DSN IN CATALOG\n         LTR   R15,R15                   TEST R15 FOR RETURN CODE\n         BNZ   TEST1                     NON-ZERO RC, GO TO TEST1\n         CLC   LOCAREA+6(6),TMVOLSER     ARE VOLUMES EQUAL ?\n         BNE   TEST1                     NO - GO TO TEST1\n         CLC   LOCAREA+12(2),=X'0001'    IS THIS THE 1ST FILE?\n         BNE   TEST1                     NO - GO TO TEST1\nYESCAT1  DS    0H\n*        WTO   'YESCAT1',ROUTCDE=(11)\n         MVI   CATFLAG,C'Y'              SET CATFLAG = Y\nTEST1    DS    0H\n*        WTO   'TEST1',ROUTCDE=(11)\n         CLC   TMFRSVOL,HEXZEROS         IS 1STVOL FIELD BLANK?\n         BE    TEST3                     YES - GO TO TEST3\nTEST2    DS    0H\n*        WTO   'TEST2',ROUTCDE=(11)\n         CLC   TMFRSVOL,TMVOLSER         IS 1STVOL = VOLSER\n         BNE   READCARD                  NO - GET ANOTHER RECORD\nTEST3    DS    0H\n*        WTO   'TEST3',ROUTCDE=(11)\n         CLC   TMADSNB,HEXZEROS          IS DSNB FIELD BLANK?\n         BNE   DSNBSEEN                  NO - BRANCH TO DSNBSEEN\n         CLC   TMNXTVOL,HEXZEROS         IS THERE ANOTHER VOLUME?\n         BE    TEST33                    NO - GO TO TEST33\n         BAL   R4,NXTVOL                 BRANCH TO NXTVOL ROUTINE\n         B     TEST3                     BRANCH TO TEST3\nTEST33   DS    0H\n*        WTO   'TEST33',ROUTCDE=(11)\n         BAL   R4,FATJCL                 YES - BRANCH TO FATJCL\n         PUT   FATSOUT,PROCCARD          WRITE PROCCARD\n         B     READCARD                  GET ANOTHER CARD\nDSNBSEEN DS    0H\n*        WTO   'DSNBSEEN',ROUTCDE=(11)\n         BAL   R4,FATJCL                 BRANCH TO FATJCL\n         ZAP   PCOUNTER,PZEROS           SET PCOUNTER TO '0'\n         MVC   RELBLK,TMADSNB            STORE ADDRESS OF 1ST DSNB\n****************************************************************\n* GET 1ST DSNB\n****************************************************************\nGETDSNB1 DS    0H\n*        WTO   'GETDSNB1',ROUTCDE=(11)\n         GETDSNB DSNBWORK,RELBLK,(R11),ENQ=NO\n         USING TMSDSNB,R11\n         AP    PCOUNTER,PONE             ADD '1' TO PCOUNTER\n         MVC   VOLTABLE,VOLTABLE-1       CLEAR VOLTABLE\n         MVC   VOLTABL1,VOLTABL1-1       CLEAR VOLTABLE1\n         LA    R7,VOLTABLE               LOAD ADDRESS OF VOLTABLE IN R7\n         MVC   0(6,R7),TMVOLSER          MOVE VOLSER INTO VOLTABLE\n         LA    R7,6(,R7)                 INCREMENT R7 BY 6\n* CATALOG SEARCH\n         MVI   CATFLAG,C'N'              RESET CATFLAG\n         MVC   DATASET,DSNBDSN           MOVE DATA SET FOR LOCATE\n         LOCATE LOCDSN                   TRY TO FIND DSN IN CATALOG\n         LTR   R15,R15                   TEST R15 FOR RETURN CODE\n         BNZ   DSNBCMPR                  NON-ZERO RC, GO TO DSNBCMPR\n         CLC   LOCAREA+6(6),TMVOLSER     ARE VOLUMES EQUAL ?\n         BNE   DSNBCMPR                  NO - GO TO DSNBCMPR\n         CLC   LOCAREA+12(2),DSNBFSN     DO FILE SEQUENCE'S MATCH?\n         BNE   DSNBCMPR                  NO - GO TO TEST1\nYESCAT2  DS    0H\n*        WTO   'YESCAT2',ROUTCDE=(11)\n         MVI   CATFLAG,C'Y'              SET CATFLAG = Y\n****************************************************************\n* DETERMINE HOW MANY DSNB'S AND HOW MANY VOLUMES\n****************************************************************\nDSNBCMPR DS    0H\n*        WTO   'DSNBCMPR',ROUTCDE=(11)\n         MVC   NUMDSNB,TM#DSNBS          MOVE # DSNB'S TO NUMDSNB\n         SR    R6,R6                     CLEAR R6\n         LH    R6,NUMDSNB                LOAD NUMDSNB INTO R6\n         CVD   R6,PNUMDSNB               LOAD R6 IN PNUMDSNB\n         CP    PNUMDSNB,PCOUNTER         IS NUMDSNB > COUNTER?\n         BZ    TSTFORMO                  IF EQUAL, TEST FOR MORE\n         BL    ABEND                     IF LOW, BRANCH TO ABEND\n         BAL   R4,DSNBJCL                BRANCH TO DSNBJCL\n         AP    PCOUNTER,PONE             ADD 1 TO PCOUNTER\n         MVC   RELBLK,DSNBNEXT           STORE ADDRESS OF NXT DSNB\n         B     GETDSNB2                  BRANCH TO GETDSNB2\nTSTFORMO DS    0H\n*        WTO   'TSTFORMO',ROUTCDE=(11)\n         CLC   TMNXTVOL,HEXZEROS         IS THERE ANOTHER VOLUME?\n         BNE   GETNEXT                   YES - BRANCH TO GETNEXT\n         BAL   R4,DSNBJCL                BRANCH TO DSNBJCL\n         PUT   FATSOUT,PROCCARD          WRITE PROCCARD\n         B     READCARD                  GET ANOTHER CARD\nGETNEXT  DS    0H\n*        WTO   'GETNEXT',ROUTCDE=(11)\n         BAL   R4,NXTVOL                 BRANCH TO NXTVOL SUBROUTINE\n         B     DSNBCMPR                  BRANCH TO DSNBCMPR\n****************************************************************\n* GET ALL SUBSEQUENT DSNB'S\n****************************************************************\nGETDSNB2 DS    0H\n*        WTO   'GETDSNB2',ROUTCDE=(11)\n         GETDSNB DSNBWORK,RELBLK,(R11),ENQ=NO\n         MVC   VOLTABLE,VOLTABLE-1       CLEAR VOLTABLE\n         MVC   VOLTABL1,VOLTABL1-1       CLEAR VOLTABLE1\n         LA    R7,VOLTABLE               LOAD ADDRESS OF VOLTABLE IN R7\n         MVC   0(6,R7),TMVOLSER          MOVE VOLSER INTO VOLTABLE\n         LA    R7,6(,R7)                 INCREMENT R7 BY 6\n* CATALOG SEARCH\n         MVI   CATFLAG,C'N'              RESET CATFLAG\n         MVC   DATASET,DSNBDSN           MOVE DATA SET FOR LOCATE\n         LOCATE LOCDSN                   TRY TO FIND DSN IN CATALOG\n         LTR   R15,R15                   TEST R15 FOR RETURN CODE\n         BNZ   DSNBCMPR                  NON-ZERO RC, GO TO DSNBCMPR\n         CLC   LOCAREA+6(6),TMVOLSER     ARE VOLUMES EQUAL ?\n         BNE   DSNBCMPR                  NO - GO TO DSNBCMPR\n         CLC   LOCAREA+12(2),DSNBFSN     DO FILE SEQUENCE'S MATCH?\n         BNE   DSNBCMPR                  NO - GO TO DSNBCMPR\nYESCAT3  DS    0H\n*        WTO   'YESCAT3',ROUTCDE=(11)\n         MVI   CATFLAG,C'Y'              SET CATFLAG = Y\n         B     DSNBCMPR                  BRANCH TO DSNBCMPR\n****************************************************************\n* SUBROUTINE TO BUILD JCL FOR DSNB\n****************************************************************\nDSNBJCL  DS    0H\n*        WTO   'DSNBJCL',ROUTCDE=(11)\n         MVC   FILESEQ,DSNBFSN           MOVE FILE SEQ # TO FILESEQ\n         SR    R6,R6                     CLEAR R6\n         LH    R6,FILESEQ                LOAD FILSEQ INTO R6\n         CVD   R6,PLABEL                 LOAD R6 IN PACKED LABEL FIELD\n         UNPK  LABEL,PLABEL+6(2)         UNPK PLABEL INTO LABEL\n         OI    LABEL+2,X'F0'             RESET ZONE\n         MVC   LABNUM1(2),LABEL+1        MOVE INPUT LABEL # TO LABNUM1\n         MVC   LABNUM2(2),LABEL+1        MOVE OUTPUT LABEL # TO LABNUM2\n         MVC   LABNUM3(2),LABEL+1        MOVE OUTPUT LABEL # TO LABNUM3\n         UNPK  STEPCNT,PSTEPCNT          UNPACK STEP COUNT\n         OI    STEPCNT+2,X'F0'           RESET ZONE FOR PRINTING\n         MVC   PREVSTEP(2),STEPCNT+1     MOVE INTO PREVSTEP FIELD\n         MVC   PREVSTP2(2),STEPCNT+1     MOVE INTO PREVSTP2 FIELD\n         AP    PSTEPCNT,PONE             ADD 1 TO STEP COUNT\n         UNPK  STEPCNT,PSTEPCNT          UNPACK STEP COUNT\n         OI    STEPCNT+2,X'F0'           RESET ZONE FOR PRINTING\n         MVC   STEPNUM(2),STEPCNT+1      MOVE INTO STEPNUM FIELD\n         MVC   INDSNCD,DSNBDSN           MOVE DSN TO TAPEIN DD\n         MVC   OUTDSNCD,DSNBDSN          MOVE DSN TO TAPEOUT DD\n* FATAR JCL CARDS FOR COPY\n         PUT   FATSOUT,EXEC              WRITE EXEC CARD\n         PUT   FATSOUT,SYSPRT2           WRITE SYSPRT2 CARD\n         CLI   CATFLAG,C'Y'              IS CATFLAG SET TO 'Y'?\n         BE    CATIN1                    YES - BRANCH TO CAT1\n         MVC   LABNUM4,LABNUM1           WRITE LABNUM1 TO LABNUM4\n         PUT   FATSOUT,TAPEIN4           WRITE TAPEIN4 CARD\n         BAL   R2,GETVOL                 BRANCH TO GETVOL SUBROUTINE\n         B     NOCAT1                    BRANCH TO NOCAT1\nCATIN1   DS    0H\n         PUT   FATSOUT,TAPEIN1           WRITE TAPEIN1 CARD\n         BAL   R2,GETVOL                 BRANCH TO GETVOL SUBROUTINE\nNOCAT1   DS    0H\n         PUT   FATSOUT,TAPEIN3           WRITE TAPEIN3 CARD\n         CLI   CATFLAG,C'Y'              IS CATFLAG SET TO 'Y'?\n         BE    CATOUT1                   YES - BRANCH TO CATOUT1\n         PUT   FATSOUT,TAPEOUT6          NO - WRITE TAPEOUT6\n         B     NOCAT2                    BRANCH TO NOCAT2\nCATOUT1  DS    0H\n         PUT   FATSOUT,TAPEOUT1          WRITE TAPEOUT1 CARD\nNOCAT2   DS    0H\n         CLC   DSNBNEXT,HEXZEROS         IS THERE ANOTHER DATASET?\n         BE    SKIPOUT3                  NO - SKIP TAPEOUT3\n         PUT   FATSOUT,TAPEOUT3          WRITE TAPEOUT3 CARD\n         B     OUT4                      BRANCH TO OUT4\nSKIPOUT3 DS    0H\n         PUT   FATSOUT,TAPEOUT5          WRITE TAPEOUT5 CARD\nOUT4     DS    0H\n         PUT   FATSOUT,TAPEOUT4          WRITE TAPEOUT4 CARD\n         PUT   FATSOUT,SYSIN1            WRITE SYSIN CARD\n         CLC   DSNBBLKC,HEXZEROS         IS BLOCK COUNT = ZERO?\n         BNE   BLOCKS1                   NO - GO TO BLOCKS1\n         PUT   FATSOUT,CNTRL2            YES - WRITE CNTRL2 CARD\n         B     ENDSTP1                   BRANCH AROUND BLOCKS1\nBLOCKS1  DS    0H\n         PUT   FATSOUT,CNTRL1            WRITE CNTRL1 CARD\nENDSTP1  DS    0H\n         PUT   FATSOUT,ENDSTEP           MARK END OF STEP\n         BR    R4                        BRANCH BACK TO CALLER\n****************************************************************\n* ABEND THE PROGRAM WHEN SOMETHING SERIOUS HAPPENS\n****************************************************************\nABEND    DS    0H\n*        WTO   'ABEND',ROUTCDE=(11)\n         ABEND 99,DUMP                   IF LOW, SOMETHING'S WRONG\n****************************************************************\n* SUBROUTINE TO GET NEXT VOLUME INFORMATION\n****************************************************************\nNXTVOL   DS    0H\n*        WTO   'NXTVOL',ROUTCDE=(11)\n         GETTMC TMNXTVOL,RECWORK1,READERR1,ENQ=NO\n         MVC   0(6,R7),TMVOLSER          MOVE VOLSER TO VOLTABLE\n         LA    R7,6(,R7)                 INCREMENT R7 BY 6\n         BR    R4                        BRANCH BACK TO CALLER\n****************************************************************\n* SUBROUTINE TO WRITE FATAR JCL CARDS FOR 1ST STEP OF VOLUME\n* CHAIN\n****************************************************************\nFATJCL   DS    0H\n*        WTO   'FATJCL',ROUTCDE=(11)\n         AP    PJOBNUM,PONE              ADD '1' TO PJOBNUM\n         CP    PJOBNUM,PFIVE             IS PJOBNUM > 4 ?\n         BL    NOTFIVE                   NO - BRANCH TO NOTFOUR\n         ZAP   PJOBNUM,PONE              SET PJOBNUM TO ONE\nNOTFIVE  DS    0H\n         UNPK  JOBNUM,PJOBNUM            UNPACK PJOBNUM INTO JOBNUM\n         OI    JOBNUM+1,X'F0'            FIX SIGN BIT FOR PRINTING\n         MVC   LABNUM1,ONE               MOVE 1 INTO INPUT LABEL\n         MVC   LABNUM2,ONE               MOVE 1 INTO OUTPUT LABEL 2\n         MVC   LABNUM3,ONE               MOVE 1 INTO OUTPUT LABEL 3\n         UNPK  STEPCNT,PSTEPCNT          UNPACK STEP COUNT\n         OI    STEPCNT+2,X'F0'           RESET ZONE FOR PRINTING\n         MVC   PREVSTEP(2),STEPCNT+1     MOVE INTO PREVSTEP FIELD\n         MVC   PREVSTP2(2),STEPCNT+1     MOVE INTO PREVSTP2 FIELD\n         ZAP   PSTEPCNT,PONE             SET PSTEPCNT TO '1'\n         UNPK  STEPCNT,PSTEPCNT          UNPACK STEP COUNT\n         OI    STEPCNT+2,X'F0'           RESET ZONE FOR PRINTING\n         MVC   STEPNUM(2),STEPCNT+1      MOVE INTO STEPNUM FIELD\n         MVC   INDSNCD,INDSN             MOVE DSN TO TAPEIN DD\n         MVC   OUTDSNCD,INDSN            MOVE DSN TO TAPEOUT DD\n         PUT   FATSOUT,PRIORITY          WRITE PRIORITY CARD\n         PUT   FATSOUT,JOBCARD           WRITE JOBCARD\n         PUT   FATSOUT,ROUTE             WRITE ROUTE PRINT CARD\n         AP    PJOBCNTR,PONE             ADD 1 TO JOB COUNTER\n         CP    PJOBCNTR,PFIFTY           IS THERE MORE THAN 50 STEPS?\n         BH    FINISH                    YES - THATS ALL FOLKS\n         PUT   FATSOUT,HOLDJOB           WRITE HOLDJOB CARD\n         PUT   FATSOUT,EXEC              WRITE EXEC CARD\n         PUT   FATSOUT,SYSPRT            WRITE SYSPRT CARD\n         PUT   FATSOUT,SYSPRT1           WRITE SYSPRT1 CARD\n         CLI   CATFLAG,C'Y'              IS CATFLAG SET TO 'Y'?\n         BE    CATIN2                    YES - BRANCH TO CAT2\n         MVC   LABNUM4,LABNUM1           WRITE LABNUM1 TO LABNUM4\n         PUT   FATSOUT,TAPEIN4           WRITE TAPEIN4 CARD\n         BAL   R2,GETVOL                 BRANCH TO GETVOL SUBROUTINE\n         B     NOCAT3                    BRANCH TO NOCAT3\nCATIN2   DS    0H\n         PUT   FATSOUT,TAPEIN1           WRITE TAPEIN1 CARD\n         BAL   R2,GETVOL                 BRANCH TO GETVOL SUBROUTINE\nNOCAT3   DS    0H\n         PUT   FATSOUT,TAPEIN3           WRITE TAPEIN3 CARD\n         CLI   CATFLAG,C'Y'              IS CATFLAG SET TO 'Y'?\n         BE    CATOUT2                   YES - BRANCH TO CATOUT2\n         PUT   FATSOUT,TAPEOUT6          NO - WRITE TAPEOUT6\n         B     NOCAT4                    BRANCH TO NOCAT4\nCATOUT2  DS    0H\n         PUT   FATSOUT,TAPEOUT1          WRITE TAPEOUT1 CARD\nNOCAT4   DS    0H\n         PUT   FATSOUT,TAPEOUT2          WRITE TAPEOUT2 CARD\n         PUT   FATSOUT,TAPEOUT4          WRITE TAPEOUT4 CARD\n         PUT   FATSOUT,SYSIN1            WRITE SYSIN CARD\n         CLC   TMBLKCNT,HEXZEROS         IS BLOCK COUNT = ZERO?\n         BNE   BLOCKS2                   NO - GO TO BLOCKS2\n         PUT   FATSOUT,CNTRL2            YES - WRITE CNTRL2 CARD\n         B     ENDSTP2                   BRANCH AROUND CNTRL1\nBLOCKS2  DS    0H\n         PUT   FATSOUT,CNTRL1            WRITE CNTRL1 CARD\nENDSTP2  DS    0H\n         PUT   FATSOUT,ENDSTEP           MARK END OF STEP\n         BR    R4                        GO BACK TO CALLER\n****************************************************************\n* SUBROUTINE TO GET THE VOLUMES FOR THE INPUT CARD\n****************************************************************\nGETVOL   DS    0H\n         LA    R7,VOLTABLE               LOAD R7 W/ADDR OF VOLTABLE\n         MVC   VOLIN1(6),0(R7)           LOAD 1ST VOLSER\n         LA    R7,6(,R7)                 INCREMENT R7 BY 6\n         CLC   0(6,R7),BLANKS            IS THERE ANOTHER ENTRY?\n         BE    PUTPAREN                  NO - GO TO PUTPAREN\n         MVC   VOLIN1+6(3),COMMA         YES - WRITE COMMA\n         B     NOPAREN                   GO TO NOPAREM\nPUTPAREN MVC   VOLIN1+6(3),CLSPAREN      WRITE CLOSE PARENTHESIS\nNOPAREN  PUT   FATSOUT,VOLCARD1          WRITE VOLCARD1\n         CLC   0(6,R7),BLANKS            IS THERE ANOTHER ENTRY?\n         BNE   GETVOL1                   YES - BRANCH TO GETVOL1\n         BR    R2                        BRANCH BACK TO CALLER\nGETVOL1  DS    0H\n         MVC   VOLIN2(6),0(R7)           LOAD NEXT VOLSER\n         LA    R7,6(,R7)                 INCREMENT R7 BY 6\n         CLC   0(6,R7),BLANKS            IS THERE ANOTHER ENTRY?\n         BE    PUTPARN1                  NO - GO TO PUTPARN1\n         MVC   VOLIN2+6(3),COMMA         YES - WRITE COMMA\n         B     NOPAREN1                  GO TO NOPAREN1\nPUTPARN1 MVC   VOLIN2+6(3),CLSPAREN      WRITE CLOSE PARENTHESIS\nNOPAREN1 PUT   FATSOUT,VOLCARD2          WRITE VOLCARD2\n         CLC   0(6,R7),BLANKS            IS THERE ANOTHER ENTRY?\n         BNE   GETVOL1                   YES - GET NEXT VOLUME\n         BR    R2                        BRANCH BACK TO CALLER\n****************************************************************\n*  READ ERROR ROUTINE                                          *\n****************************************************************\nREADERR1 DS    0H\n*        WTO   'READERR1',ROUTCDE=(11)\n         CLOSE (INPUT,,FATSOUT)          CLOSE FILES INPUT/FATSOUT\n         CLOSE (REJECT)                  CLOSE FILE REJECT\n         L     13,MYSAVE+4               RESTORE SAVE AREA\n         LM    14,12,12(13)              RESTORE REGS\n         LA    15,99                     SET BAD RETURN CODE - 99\n         BR    14                        GO BACK TO CALLER\nREADERR2 DS    0H\n*        WTO   'READERR2',ROUTCDE=(11)\n         CLOSE (INPUT,,FATSOUT)          CLOSE FILES INPUT/FATSOUT\n         CLOSE (REJECT)                  CLOSE FILE REJECT\n         L     13,MYSAVE+4               RESTORE SAVE AREA\n         LM    14,12,12(13)              RESTORE REGS\n         LA    15,88                     SET BAD RETURN CODE - 88\n         BR    14                        GO BACK TO CALLER\nREADERR3 DS    0H\n*        WTO   'READERR3',ROUTCDE=(11)\n         CLOSE (INPUT,,FATSOUT)          CLOSE FILES INPUT/FATSOUT\n         CLOSE (REJECT)                  CLOSE FILE REJECT\n         L     13,MYSAVE+4               RESTORE SAVE AREA\n         LM    14,12,12(13)              RESTORE REGS\n         LA    15,77                     SET BAD RETURN CODE - 77\n         BR    14                        GO BACK TO CALLER\n****************************************************************\n*  CLOSE FILES AND GO BACK                                     *\n****************************************************************\nFINISH   DS    0H\n         CP    PJOBCNTR,PFIFTY           WERE THERE 50 STEPS CREATED?\n         BL    CLOSEIT                   NO - CLOSE FILES\n         WTO   'MAXIMUM NUMBER OF JOBS CREATED - 50',ROUTCDE=(11)\nCLOSEIT  CLOSE (INPUT,,FATSOUT)          CLOSE FILES INPUT/FATSOUT\n         CLOSE (REJECT)                  CLOSE FILE REJECT\n         L     13,MYSAVE+4               RESTORE SAVE AREA\n         LM    14,12,12(13)              RESTORE REGS\n         LA    15,0                      SET R15 TO 0\n         BR    14                        GO BACK TO CALLER\n****************************************************************\n*  DCB DEFINITIONS                                             *\n****************************************************************\nINPUT    DCB   DDNAME=SYSIN,MACRF=GM,DSORG=PS,EODAD=FINISH,            X\n               LRECL=133\nFATSOUT  DCB   DDNAME=FATSOUT,LRECL=80,MACRF=PM,DSORG=PS,              X\n               RECFM=FB\nREJECT   DCB   DDNAME=REJECT,LRECL=133,MACRF=PM,DSORG=PS,              X\n               RECFM=FA\n****************************************************************\n*  FATS  JCL CARDS                                             *\n****************************************************************\nJOBCARD  DS    0CL80\n         DC    CL6'//COPY'\nJOBNUM   DC    CL2'  '\n         DC    CL72' JOB 0060,BIN-322,CLASS=D,MSGCLASS=A,USER=XXXXXXX '\nHOLDJOB  DC    CL80'//HOLDJOB EXEC PGM=HOLDJOB '\nPRIORITY DC    CL80'/*PRIORITY 4 '\nROUTE    DC    CL80'/*ROUTE PRINT RMT99 '\nEXEC     DS    0CL80\n         DC    CL6'//FATS'\nSTEPNUM  DC    CL2'  '\n         DC    CL72' EXEC PGM=FATAR '\nSYSPRT   DC    CL80'//SYSPRINT DD DSN=&&FATPRT,DISP=(,PASS),UNIT=SYSDA,X\n                '\nSYSPRT1  DC    CL80'//   SPACE=(TRK,(5,5),RLSE) '\nSYSPRT2  DC    CL80'//SYSPRINT DD SYSOUT=A '\nTAPEIN1  DS    0CL80\n         DC    CL53'//TAPEIN DD DISP=(OLD,UNCATLG,KEEP),UNIT=CTAPE,LABEX\n               L='\nLABNUM1  DC    CL2' '\n         DC    CL25', '\n*\nVOLCARD1 DS    0CL80\n         DC    CL27'//   VOL=(,RETAIN,,21,SER=('\nVOLIN1   DC    CL9' '\n         DC    CL44' '\n*\nVOLCARD2 DS    0CL80\n         DC    CL5'//   '\nVOLIN2   DC    CL9' '\n         DC    CL66' '\n*\nTAPEIN3  DS    0CL80\n         DC    CL13'//       DSN='\nINDSNCD  DC    CL44' '\n         DC    CL23' '\nCOMMA    DC    CL3',  '\nCLSPAREN DC    CL3')),'\nTAPEIN4  DS    0CL80\n         DC    CL52'//TAPEIN DD DISP=(OLD,DELETE,KEEP),UNIT=CTAPE,LABELX\n               ='\nLABNUM4  DC    CL2' '\n         DC    CL26', '\nTAPEOUT1 DC    CL80'//TAPEOUT DD DISP=(NEW,CATLG,DELETE),UNIT=CTAPE, '\nTAPEOUT2 DC    CL80'//   VOL=(,RETAIN,,21), '\nTAPEOUT3 DS    0CL80\n         DC    CL31'//  VOL=(,RETAIN,,21,REF=*.FATS'\nPREVSTEP DC    CL2'  '\n         DC    CL16'.TAPEOUT),LABEL='\nLABNUM2  DC    CL2'  '\n         DC    CL29', '\nTAPEOUT4 DS    0CL80\n         DC    CL13'//       DSN='\nOUTDSNCD DC    CL44' '\n         DC    CL23' '\nTAPEOUT5 DS    0CL80\n         DC    CL25'//  VOL=(,,,21,REF=*.FATS'\nPREVSTP2 DC    CL2'  '\n         DC    CL16'.TAPEOUT),LABEL='\nLABNUM3  DC    CL2'  '\n         DC    CL35', '\nTAPEOUT6 DC    CL80'//TAPEOUT DD DISP=(NEW,KEEP,DELETE),UNIT=CTAPE, '\nSYSIN1   DC    CL80'//SYSIN DD * '\nCNTRL1   DC    CL80'   ANALYZE LABELS=OS '\nCNTRL2   DC    CL80'   ANALYZE LABELS=YES,NF=1 '\nENDSTEP  DC    CL80'/* '\nPROCCARD DC    CL80'//CARTCOPY EXEC CARTCOPY '\n****************************************************************\n* INPUT RECORD - INPUT\n****************************************************************\nINREC    DS    0CL133\n         DS    CL3\nINVOLSER DC    CL6' '                    INPUT VOLSER\n         DS    CL1\nINDSN    DC    CL44' '                   INPUT DATA SET NAME\n         DS    CL1\nINEXPDT  DC    CL5' '                    INPUT EXPIRATION DATE\n         DS    CL1\nINPGMR   DC    CL20' '                   INPUT PGMR NAME\n         DS    CL1\nINCHRG   DS    0CL21\nINCHRGCD DC    CL4' '                    INPUT CHARGE CODE\n         DS    CL18                      THE REST OF INCHRG + 1 SPACE\nINCJOB   DC    CL8' '                    INPUT CREATING JOB\n         DS    CL1\nINCRTDT  DC    CL5' '                    INPUT CREATION DATE\n         DS    CL1\nIN1STVOL DC    CL6' '                    INPUT 1ST VOLSER FIELD\n         DS    CL8\n****************************************************************\n* PRINTLINE\n****************************************************************\n         DC    CL1' '\nPRTLINE  DC    CL133' '\n****************************************************************\n* ACCUMULATORS\n****************************************************************\n         DS    0D                        DOUBLEWORD ALIGNMENT\nPCOUNTER DC    PL8'0'                    PCOUNTER ON DBLWD BOUNDRY\nPNUMDSNB DC    PL8'0'                    PNUMDSNB ON DBLWD BOUNDRY\nRPAGE    DC    PL2'0'                    PACKED PAGE COUNTER FOR RPT\nCOUNT    DC    PL2'0'                    PACKED ACCEPTED RECORD COUNTER\nRCOUNT   DC    PL2'0'                    PACKED REJECT RECORD COUNTER\nPSTEPCNT DC    PL2'0'                    PACKED STEP COUNT\nPJOBCNTR DC    PL2'0'                    PACKED JOB COUNTER\n****************************************************************\n* MISC. PACKED AND ZONED DEFINITIONS\n****************************************************************\n         DS    0D                        DOUBLEWORD ALIGNMENT\nPLABEL   DC    PL8'0'                    PLABEL ON DOUBLEWORD BOUNDRY\nPZEROS   DC    PL16'0'                   PACKED ZEROS\nPONE     DC    P'1'                      PACKED ONE\nPFIVE    DC    P'5'                      PACKED FIVE\nPTHIRTY  DC    P'30'                     PACKED THIRTY\nPFIFTY   DC    P'50'                     PACKED FIFTY\nPLABEL1  DC    PL2'0'                    PLABEL1\nPJOBNUM  DC    PL2'0'                    PACKED JOB NUMBER\n****************************************************************\n* MISC. DEFINITIONS\n****************************************************************\nRELBLK   DC    F'0'                      ADDRESS OF 1ST DSNB\n         DS    0H                        ALIGNMENT FOR FILESEQ\nFILESEQ  DS    HL2                       FILE SEQUENCE #\nPREVDSNB DC    F'0'                      PREVIOUS DSNB #\nNUMDSNB  DS    HL2                       # OF DSNB'S\nONE      DC    CL2'01'                   CHARACTER 01\nCATFLAG  DC    CL1'N'                    CATALOG FLAG\nPASSFLAG DC    CL1'Y'                    1ST PASS FLAG\nLASTFLAG DC    CL1'N'                    LAST STEP FLAG\nLABEL    DC    CL3' '                    LABEL FIELD\nVSN      DC    CL6' '                    INPUT VOLSER\nBLANKS   DC    CL133' '                  BLANKS OUT RECORD\nHEXZEROS DC    XL80'0'                   HEX ZEROS\nSTEPCNT  DC    CL3' '                    STEP COUNT FIELD (CHARACTER)\n****************************************************************\n* VOLUME TABLE\n****************************************************************\n         DC    CL1' '\nVOLTABLE DC    CL252' '                  VOLUME TABLE/42 ENTRIES\nVOLTABL1 DC    CL252' '                  VOLUME TABLE1/42 ENTRIES\n****************************************************************\n* AREAS USED FOR CATALOG SEARCH\n****************************************************************\nLOCDSN   CAMLST NAME,DATASET,,LOCAREA\nDATASET  DC    CL44' '\nPARMVOL  DS    F                         ADDRESS OF VOLUME FOR CALL\nPARMDSN  DS    F                         ADDRESS OF DSN FOR CALL\n****************************************************************\n* TMRECORD/TMSDSNB/LOCATE WORK I/O AREAS\n****************************************************************\nRECWORK1 DS    CL200\nDSNBWORK DS    CL200\nLOCAREA  DS    0D\n         DS    256C\n****************************************************************\n* REPORT HEADERS\n****************************************************************\nREJHDG1  DS    0CL133\n         DC    CL36'1  '\n         DC    CL16'REJECTED RECORDS'\n         DS    CL34' '\n         DC    CL4'PAGE'\nREJPAGE  DC    CL4' '\n         DS    CL39\n****************************************************************\n*  TMC RECORD FORMAT                                           *\n****************************************************************\nTMREC    DSECT ,\n         TMRECORD\n****************************************************************\n*  DSNB RECORD FORMAT                                          *\n****************************************************************\nTMSDSNB  DSECT ,\n         TMSDSNB\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CARTPROC": {"ttr": 2307, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x891\\x8f\\x00\\x891\\x8f\\x108\\x00\\x1b\\x00\\x1b\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-11-14T00:00:00", "modifydate": "1989-11-14T10:38:00", "lines": 27, "newlines": 27, "modlines": 0, "user": "HMDEAN"}, "text": "//CARTCOPY PROC\n//*******************************************************************\n//* GENERATE TMC UPDATE CARDS\n//*******************************************************************\n//NEWVOL   EXEC PGM=NEWVOL\n//STEPLIB  DD DSN=AOPRPUB.TAPECONV.LOADLIB,DISP=SHR\n//FATSIN   DD DSN=&FATPRT,DISP=(OLD,DELETE)\n//TMCOUT   DD DSN=&&TMSUPD,DISP=(NEW,PASS),\n//         UNIT=SYSDA,SPACE=(TRK,(1,15))\n//DSNBOUT  DD DSN=&&DSNBUPD,DISP=(NEW,PASS),\n//         UNIT=SYSDA,SPACE=(TRK,(1,15))\n//TMC      DD DSN=SYS4.TMS.TMC,DISP=SHR\n//SYSPRINT DD SYSOUT=*\n//SYSABEND DD SYSOUT=*\n//*******************************************************************\n//* DSNB UPDATES\n//*******************************************************************\n//TMSUDSNB EXEC PGM=TMSUDSNB\n//TMSRPT   DD SYSOUT=A\n//TMC      DD DSN=SYS4.TMS.TMC,DISP=SHR\n//SYSIN    DD DSN=&&DSNBUPD,DISP=(OLD,DELETE)\n//*******************************************************************\n//* TMSUPDTE\n//*******************************************************************\n//TMSUPDTE EXEC PGM=TMSUPDTE\n//TMSRPT   DD SYSOUT=A\n//SYSIN    DD DSN=&&TMSUPD,DISP=(OLD,DELETE)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CONSOLE": {"ttr": 2309, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x891\\x8f\\x00\\x891\\x8f\\x108\\x02\\x86\\x02\\x86\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-11-14T00:00:00", "modifydate": "1989-11-14T10:38:00", "lines": 646, "newlines": 646, "modlines": 0, "user": "HMDEAN"}, "text": "         TITLE 'MVS CONSOLE ROUTINE'\nCONSOLE  CSECT\n***********************************************************************\n*                                                                     *\n*        REGISTER EQUATES                                             *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*        FIXED POINT REGISTERS                                        *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nR0       EQU   0        *USED BY O.S.\nR1       EQU   1        *USED BY O.S. // ADDRESS OF PARAMETER LIST\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13       *USED BY O.S. // SAVE-AREA ADDRESS\nR14      EQU   14       *USED BY O.S. // RETURN ADDRESS\nR15      EQU   15       *USED BY O.S. // ENTRY-PT ADDR, RETURN CODE\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*        FLOATING POINT REGISTERS                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nF0       EQU   0\nF2       EQU   2\nF4       EQU   4\nF6       EQU   6\n         EJECT\nENTRY    SAVE  (14,12),T,CONSOLE_&SYSDATE._&SYSTIME            HD JUN88\n         LR    R10,R15                 GET ENTRY POINT\n         USING ENTRY,R10\n         LR    R5,R1                   SAVE CPPL ADDRESS\n         L     R0,GETLEN\n         GETMAIN R,LV=(0)\n         XC    0(DATASIZ,R1),0(R1)     CLEAR WORKAREA\n         ST    R13,4(,R1)              CHAIN SAVE AREAS\n         ST    R1,8(,R13)              *\n         LR    R13,R1                  POINT TO MY SAVERAREA\n         USING DATA,R13\n         RWHOLE AUTHON                                         HD JUN88\n         GTSIZE ,\n         LTR   R0,R0\n         BZ    RETURN\n         ST    R0,SCRLEN\n         USING PSCB,R3                                         HD JUN88\n         L     R3,8(,R5)               TEST FOR OPER ABILITY\n         TM    PSCBATR1,PSCBCTRL          IN THE PSCB          HD JUN88\n         BO    OKGO                    USER HAS AUTHORITY\n         DROP  R3                                              HD JUN88\n         LA    R0,L'ERRMSG             SEND NO GO\n         LA    R1,ERRMSG\n         LA    R4,PUTFLG\n         SLL   R4,24\n         OR    R1,R4\n         TPUT  (1),(0),R\n         B     RETURN\n         EJECT\nOKGO     DS    0H                                              HD JUN88\n         MODESET MF=(E,SUPRMOD)\n         SPACE 1\n***************************************************************HD JUN88\n**                                                             HD JUN88\n**  SET UP ESTAE EXIT TO TRAP ABENDS AND FREE STORAGE          HD JUN88\n**                                                             HD JUN88\n***************************************************************HD JUN88\n         SPACE 1\n         ESTAE CEXIT,CT,PARAM=SQUATEP,                         HD JUN88X\n               XCTL=NO,PURGE=NONE,                             HD JUN88X\n               ASYNCH=NO,TERM=YES,MF=(E,ESTAE2)                HD JUN88\n         SPACE 1\n***************************************************************HD JUN88\n**                                                             HD JUN88\n**  GET STORAGE FOR COMMON AREA CODE                           HD JUN88\n**                                                             HD JUN88\n***************************************************************HD JUN88\n         SPACE 1\n         GETMAIN RU,LV=SQUATL,SP=241,LOC=BELOW                 HD JUN88\n         ST    R1,SQUATEP              SAVE ENTRY POINT        HD JUL89\n         MVC   0(SQUATL,R1),SQUAT      MOVE SQUAT CODE         HD JUN88\n         LA    R1,CROSSMEM-SQUAT(,R1)  INCREMENT ADDRESS       HD JUL89\n         ST    R1,SQATCMEP             SAVE CROSSMEM EP        HD JUL89\n         SPACE 1\n***************************************************************HD JUN88\n**                                                             HD JUN88\n**  SET UP CROSS MEMORY ENVIORNMENT AND EXTRACT TDCM ADDRESS   HD JUN88\n**                                                             HD JUN88\n***************************************************************HD JUN88\n         SPACE 1\n         XC    AXLIST,AXLIST           CLEAR AXLIST\n         MVI   AXLIST+1,X'2'\n         LA    R9,SH6ASID\n         AXRES AXLIST=AXLIST           RESERVE AX VALUE\n         LA    R2,1                    SET AX=1\n         AXSET AX=(2)                  CHANGE AX VALUE TO ONE\n         STH   R0,AXSAVE               SAVE ORGINAL AX VALUE\n         L     R15,CVTPTR              GET CVT ADDRESS\n         USING CVT,R15\n         L     R15,CVTCUCB             GET UCM BASE ADDRESS\n         USING UCM,R15\n         LH    R1,UCMCTID              GET CONSOLE TASK ASID\n         ST    R1,0(,R9)               SAVE IT\n         EPAR  R1                      GET PRIMARY ASID\n         STH   R1,0(,R9)               PUT IT IN THE PARM LIST\n         L     R11,UCMVEZ              *LOAD SIZE OF UCM ENTRY\n         L     R14,UCMVEL              GET ADDR OF LAST UCM ENTRY\n         L     R15,UCMVEA              GET FIRST  UCME\n         USING UCMLIST,R15\nCONCHK   TM    UCMDISP1,X'80'          *CHECK FOR MAST CONS\n         BO    CHKTYPE\n         LA    R15,0(R11,R15)          *INCREMENT TO NEXT UCM ENTRY\n         CR    R15,R14                 CHECK FOR END OF LIST\n         BNH   CONCHK                  ITS OK SO GO AGAIN\n         LA    R0,L'CONERR             GET LEN OF CONSOLE ERR MSG\n         LA    R1,CONERR               GET ADDR OF CONSOLE ERR MSG\n         L     R4,PUTFLG               GET PUT FLGS\n         SLL   R4,24                   PUT FLGS IN UPPER BYTE\n         OR    R1,R4                   SET TPUT REG\n         TPUT  (R1),(R0),R\n         B     RETURN\nCHKTYPE  MVI   CTYPE,C'P'              ASSUME NONCOLOR CONSOLE\n         CLI   UCMEDEVX,UCM3792B       *CHECK FOR 3279-2B\n         BE    SETCOLOR\n         CLI   UCMEDEVX,UCM3793B       *CHECK FOR 3279-2B\n         BNE   GETDCM\nSETCOLOR MVI   CTYPE,C'C'              SET CONSOLE TYPE\nGETDCM   L     R15,UCMXB               GET FIXED DCM ADDRESS\n         DROP  R15\n         LH    R6,2(,R9)\n         SSAR  R6                      SET ADDR TO SECONDARY ADDR\n         L     R1,SQUATEP              LOAD STORAGE ADDRESS    HD JUN88\n         BASR  R14,R1                  GO FISH                 HD JUN88\n         LA    R4,4                    GET LEN OF DATA TO MOVE\n         LA    R3,TEMPA1               WHERE TO PUT ADDRESS (DATA)\n         LA    R5,DCMAENTR-STRTDCM(R15)    GET ADDR OF ADDR    HD JUN88\n         LA    R14,0                   SET KEY 0\n         MVCP  0(R4,R3),0(R5),R14       MOVE ADDR TO TEMPA1\n         LA    R3,TEMPA2\n         LA    R5,DCMASCRN-STRTDCM(R15)\n         LA    R14,0\n         MVCP  0(R4,R3),0(R5),R14\n         LH    R6,0(R9)                GET MY ADDRESS SPACE\n         SSAR  R6                      SET PRIMARY ADDRESSING\n         SPACE 1\n***************************************************************HD JUN88\n**                                                             HD JUN88\n**  SET UP SCREEN FORMAT AND CALL CROSSMEM TO MOVE DATA        HD JUN88\n**                                                             HD JUN88\n***************************************************************HD JUN88\n         SPACE 1\n         L     R1,TEMPA1               LOAD ADDR OF ENTRY LINE\n         S     R1,TEMPA2               MINUS ADDR OF START OF BUFFER\n         ST    R1,8(,R9)               STORE BUFFER SIZE IN PARMLIST\n         LR    R4,R1                   SAVE LEN FOR DIVIDE\n         SRDL  R4,32                   SHIFT FOR DIVIDE\n         L     R1,TEMPA2               GET SCREEN ADDRESS\n         CLI   CTYPE,C'C'              CHECK FOR COLOR CON\n         BNE   SETNCOL\n         S     R1,=F'12'               BACKUP FOR ATTRIBUTE BYTES\n         D     R4,=F'90'               GET NUM OF ROWS\n         B     SKPNCOL\nSETNCOL  S     R1,=F'6'\n         D     R4,=F'84'               GET NUM OF ROWS\nSKPNCOL  ST    R1,4(,R9)               STORE SCREEN ADDR IN PARMLIST\n         LA    R5,3(R5)                ADD 3 FOR ENTRY AREA\n         ST    R5,CROWS                SAVE NUM OF ROWS\n         MODESET MF=(E,PROBMOD)\n         SPACE 3\n         LA    R1,DATASIZ(,R13)        GET TGET BUFFER ADDRESS\n         ST    R1,SH6INPTA             SAVE IT\n         LA    R1,SH6TGTBZ(,R1)        GET SCREEN BUFFER ADDRESS\n         ST    R1,SH6BUFAD             SAVE IT\n         LA    R1,SH6BUFSZ(,R1)        GET ADDR OF USER SCR BUF\n         ST    R1,USCRBUF              SAVE ADDR OF USER SCR BUF\n         MVI   0(R1),X'C3'             SET UP WCC\n         LA    R1,80                   SET UP TGET PARMS\n         ST    R1,SH6INPT              *\n         MVI   SH6TGOPT,TERMTGET+TGETASIS  *\n         OI    SH6FLAG1,SH6JES         SET JES COMMANDS OK\n         OI    SH6FLAG1,SH6AUTH+SH6USE  SET AUTH FLAG\n         SPACE 2\nSH6A005  DS    0H\n         TM    SH6FLAG1,SH6USE          IS USER OK\n         BZ    SH6EOJ\n         STFSMODE ON,INITIAL=YES\n         STTMPMD  ON                                           HD JUN88\n         STLINENO LINE=1\nSH6A010  BAL   R14,SH6B010             ENTRY TO MOVE ROUTINE\n         CLI   CTYPE,C'C'              CHECK FOR COLOR CONSOLE\n         BNE   SKIPCOL                 SKIP COLOR CON ADJUST\n         L     R3,USCRBUF              GET ADDR OF USER BUF AREA\n         LA    R3,1(,R3)               BUMP PAST WCC\n         L     R4,SH6BUFAD             GET ADDR OF CONSOLE BUF\n         L     R5,CROWS                GET NUM OF CONSOLE ROWS\n         SH    R5,=H'3'                SUB FOR ENTRY AREA\nCLOOP    MVC   0(3,R3),0(R4)           MOVE SBA AND SCR ADDR\n         MVC   3(2,R3),=X'1DE4'        MOVE IN SF AND ATTR BYTE\n         MVC   5(79,R3),11(R4)         MOVE IN TEXT\n         LA    R3,84(,R3)              INCR TO NEXT TO LINE\n         LA    R4,90(,R4)              INCR TO NEXT FROM LINE\n         BCT   R5,CLOOP                KEEP ON MOV'N'\n         ST    R3,ENTRYA               SAVE ENTRY AREA ADDR\n         XC    0(168,R3),0(R3)          CLEAR ENTRY AREA\n         LA    R3,168(,R3)              AND INCR\n         S     R3,USCRBUF              CALC THE LEN OF USER BUF\n         ST    R3,CONBUFL\n         B     FIXUPSCR                GO FIX UP FOR USER SCR SIZE\nSKIPCOL  L     R4,USCRBUF              GET USER BUF ADD\n         L     R5,DCMBUFSZ             GET LEN OF BUFFER\n         LA    R4,1(,R4)               BUMP PAST WCC\n         LR    R15,R5\n         L     R14,SH6BUFAD            GET ADDR OF FROM BUFF\n         MVCL  R4,R14\n         L     R5,DCMBUFSZ             GET LEN\n         LA    R5,1(,R5)               ADD ONE FOR WCC\n         L     R4,USCRBUF              GET ADDR OF USER SCR BUF\n         AR    R4,R5                   POINT TO END\n         ST    R4,ENTRYA               SAVE ENTRY AREA ADDR\n         XC    0(168,R4),0(R4)         CLEAR THE AREA\n         LA    R5,168(,R5)             BUMP PAST ENTRY AREA\n         ST    R5,CONBUFL              AND SAVE\nFIXUPSCR EQU   *\n         L     R1,USCRBUF              GET ADDRESS\n         CLC   CROWS,SCRLEN            HOW DO THE TWO SCRNS COMPARE\n         BNH   BUFREADY                YES...DO NOT MANIPULATE\n         L     R6,USCRBUF              GET ADDR OF USER SCR BUF\n         A     R6,CONBUFL              GET ADDR OF END OF BUFFER\n         L     R4,SCRLEN               GEN NUMBER OF USER ROWS\n         LR    R7,R4                   GET COUNTER OF ROWS\n         BCTR  R7,0                    SUB FOR ENTRY AREA\n         BCTR  R7,0                    SUB FOR ENTRY AREA\n         MH    R4,=H'84'               GET LEN OF NEW BUFFER\n         SR    R6,R4                   GET ADDR OF NEW BUFFER\n         ST    R4,CONBUFL              SAVE NEW BUF LEN\n         LR    R1,R6                   SAVE BUFF ADDR FOR PUT\n         BCTR  R1,0                    SUB FOR WCC\n         MVI   0(R1),X'C3'             MOVE IN WCC\n         SLR   R3,R3                   USE R3 AS SCREEN POS\nFLOOP    LR    R4,R3                   GET SCR POS IN EVEN REG\n         SRDL  R4,6                    SHIFT LOW ORDER BITS TO ODD\n         SRL   R5,26                   THEN SHIFT THEM TO LOW ORDER\n         STC   R4,1(,R6)               SAVE FIRST ADDR BYTE\n         STC   R5,2(,R6)               SAVE SECOND ADDR BYTE\n         TR    1(2,R6),CCTABL          PUT IN REAL ADDR BYTES\n         LA    R3,80(,R3)              INCR TO NEXT POS\n         LA    R6,84(,R6)              GET TO NEXT ROW\n         BCT   R7,FLOOP                AND GO AGAIN\nBUFREADY L     R6,ENTRYA               GET ADDR OF ENTRY AREA\n         MVI   0(R6),X'12'             MOVE IN EUA\n         L     R4,SCRLEN\n         MH    R4,=H'80'               CALC LAST POS\n         BCTR  R4,0                    POINT TO LAST POS\n         SRDL  R4,6                    SHIFT LOW ORDER BITS TO ODD\n         SRL   R5,26                   THEN SHIFT THEM TO LOW ORDER\n         STC   R4,1(,R6)               SAVE FIRST ADDR BYTE\n         STC   R5,2(,R6)               SAVE SECOND ADDR BYTE\n         TR    1(2,R6),CCTABL          PUT IN REAL ADDR BYTES\n         LA    R6,3(,R6)               GET ADDR OF END OF BUF\n         L     R4,SCRLEN               GET NUM OF LINES\n         SH    R4,=H'2'                BACK UP FOR ENTRY AREA\n         MH    R4,=H'80'               CALC BUF POS\n         MVI   0(R6),X'11'             MOVE SBA\n         SRDL  R4,6                    SHIFT LOW ORDER BITS TO ODD\n         SRL   R5,26                   THEN SHIFT THEM TO LOW ORDER\n         STC   R4,1(,R6)               SAVE FIRST ADDR BYTE\n         STC   R5,2(,R6)               SAVE SECOND ADDR BYTE\n         TR    1(2,R6),CCTABL          PUT IN REAL ADDR BYTES\n         LA    R6,3(,R6)               BUMP PAST SBA\n         MVC   0(3,R6),=X'1D4013'      MOVE IN SFA, CURSOR\n         LA    R6,3(,R6)               GET ADDR OF END OF BUF\n         SR    R6,R1                   GET LEN\n         LR    R0,R6                   GET LEN TO PUT\n         ICM   R1,8,=AL1(3)            SET TPUT OPTIONS\n         TM    SH6FLAG1,SH6AUTH          CHECK CONSOLE AUTH\n         BO    SH6A011\n         MVI   0(R1),X'C4'             RESET KEY BOARD\nSH6A011  BAL   R14,TPUT\n         TM    SH6FLAG1,SH6AUTH          CHECK CONSOLE AUTH\n         BO    SH6A012\n         STIMER WAIT,DINTVL=WAITIME\n         B     SH6A010\n         SPACE 1\n***************************************************************HD JUN88\n**                                                             HD JUN88\n**  GET INPUT FROM USER AND ISSUE OPERATOR COMMAND             HD JUN88\n**                                                             HD JUN88\n***************************************************************HD JUN88\n         SPACE 1\nSH6A012  BAL   R14,TGET\n         CLI   0(R9),X'6E'             CHECK FOR RESHOW\n         BE    SH6A005\n         CLI   0(R9),C'3'              CHECK FOR EOF PFK3\n         BE    SH6EOJ\n         CLI   0(R9),X'C3'             CHECK FOR EOF PFK15\n         BE    SH6EOJ\n         CLI   0(R9),X'7D'             CHECK FOR ENTER KEY\n         BNE   SH6A005\n         TM    SH6FLAG1,SH6TRMIN           WAS THERE INPUT\n         BO    SH6A010                   NO\n         TM    SH6FLAG1,SH6AUTH        CHECK AUTH\n         BZ    SH6A030                 USER NOT AUTH\n         CLI   6(R9),C'K'              DONT ALLOW CONTROL CMDS\n         BE    SH6A030\n         CLI   6(R9),C'$'              IS IT A JES2 COMMAND\n         BNE   SH6A019                 NO\n         TM    SH6FLAG1,SH6JES         IS USER AUTHORIZED\n         BZ    SH6A030                 NO\nSH6A019  LA    R2,6(,R9)               BUMP PAST BUFFER HEADER\n         LR    R3,R2\nSH6A020  CLI   0(R3),X'FF'             LOOK FOR END OF DATA\n         BE    SH6A025                 GO GET LENGTH OF DATA\n         LA    R3,1(,R3)               BUMP TO NEXT CHAR\n         B     SH6A020                 CHECK AGAIN\nSH6A025  SR    R3,R2                   GET CMD LENGTH\n         LA    R3,4(,R3)               ADD SVC 34 HEADER LENGTH\n         SLL   R3,16                   SET FIELDS FOR SVC 34\n         ST    R3,2(,R9)               *\n         LA    R1,2(,R9)               GET ADDR OF MSG FOR WTO\n         SLR   R0,R0                   CLEAR R0\n         SVC   35                      ISSUE DISPLAY OF COMMAND\n         MODESET MF=(E,SUPRMOD)\n         SLR   R0,R0                   SET R0\n         LA    R1,2(,R9)               POINT TO BUFFER\n         SVC   34                      ISSUE THE CMD\n         MODESET MF=(E,PROBMOD)\n         B     SH6A005\nSH6A030  LM    R0,R1,ER0002\n         BAL   R14,TPUT\n         BAL   R14,TGET\n         B     SH6A005\n         EJECT\nSH6B010  DS    0H\n         SPACE 1\n***************************************************************HD JUL89\n**                                                             HD JUL89\n**  BRANCH AND LINK TO CROSSMEM IN SQA TO MOVE DATA            HD JUL89\n**                                                             HD JUL89\n***************************************************************HD JUL89\n         SPACE 1\n         ST    R14,SH6RTN2\nSH6B015  DS    0H\n         MODESET MF=(E,SUPRMOD)        GET SUPERVISOR STATE    HD JUN88\n         LA    R1,SH6ASID              POINT TO PARM LIST\n         L     R15,SQATCMEP            LOAD EP                 HD JUL89\n         O     R15,BIT31               SET TO 31 BIT MODE      HD JUL89\n         BASSM R14,R15\n         MODESET MF=(E,PROBMOD)        BACK TO PROBLEM MODE    HD JUN88\n         LA    R14,SH6B015Z                                    HD JUL89\n         BSM   0,R14                   BACK TO 24 BIT MODE     HD JUL89\nSH6B015Z L     R14,SH6RTN2             RETURN\n         BR    R14\n         SPACE 2\nSH6EOJ   DS    0H\n         STLINENO LINE=1\n         STFSMODE OFF\n         STTMPMD  OFF                                          HD JUN88\nRETURN   DS    0H                                              HD JUN88\n         SPACE 1\n***************************************************************HD JUN88\n**                                                             HD JUN88\n**  FREE STORAGE AND RETURN TO CALLER                          HD JUN88\n**                                                             HD JUN88\n***************************************************************HD JUN88\n         SPACE 1\n         MODESET MF=(E,SUPRMOD)        GET SUPERVISOR STATE    HD JUN88\n         L     R1,SQUATEP              GET STORAGE ADDRESS     HD JUN88\n         LTR   R1,R1                   ANYTHING THERE?         HD JUN88\n         BZ    RETURN1                 NO, BYPASS FREEMAIN     HD JUN88\n         FREEMAIN RU,LV=SQUATL,A=(1),SP=241                    HD JUN88\n         SPACE 1                                               HD JUN88\nRETURN1  DS    0H                                              HD JUN88\n         MODESET MF=(E,PROBMOD)        BACK TO PROBLEM MODE    HD JUN88\n         RWHOLE AUTHOFF                                        HD JUN88\n         LR    R1,R13                  GET WORK AREA ADDRESS\n         L     R13,4(,R13)             POINT TO PREVIOUS SAVE AREA\n         LA    R0,DATASIZ+SH6BUFSZ+SH6TGTBZ WORK AREA SIZE\n         FREEMAIN R,LV=(0),A=(1)\n         SPACE 1\n         RETURN (14,12),T,RC=0\n         TITLE  'CONSOLE - EXITS AND COMMON SUBROUTINES'\nTGET     DS    0H\n         SPACE 1\n***************************************************************HD JUN88\n**                                                             HD JUN88\n**  'TGET' SUBROUTINE                                          HD JUN88\n**                                                             HD JUN88\n***************************************************************HD JUN88\n         SPACE 1\n         ST    R14,SH6RTN1             SAVE RETURN ADDRESS\n         NI    SH6FLAG1,255-SH6TRMIN\n         LM    R0,R1,SH6INPT           LOAD TGET PARMS\n         TGET  (1),(0),R\n         L     R9,SH6INPTA             GET BUFFER ADDRESS\n         LA    R15,0(R1,R9)            GET END OF DATA\n         MVI   0(R15),X'FF'            MARK END OF DATA\n         C     R1,=F'6'                WAS INPUT GT 6 BYTES\n         BNH   TGETNOIN                NO\n         LR    R15,R1                  SAVE DATA COUNT\n         SH    R15,=H'7'               SUBTRACT HEADER+1\n         EX    R15,EX1                 MAKE IT UPPER CASE\nTGETEX   L     R14,SH6RTN1             GET RETURN ADDRESS\n         BR    R14\nTGETNOIN OI    SH6FLAG1,SH6TRMIN\n         B     TGETEX\nEX1      OC    6(0,R9),BLANKS\n         SPACE 2\nTPUT     DS    0H\n         SPACE 1\n***************************************************************HD JUN88\n**                                                             HD JUN88\n**  'TPUT' SUBROUTINE                                          HD JUN88\n**                                                             HD JUN88\n***************************************************************HD JUN88\n         SPACE 1\n         ST    R14,SH6RTN1             SAVE RETURN\n         TPUT  (1),(0),R\n         L     R14,SH6RTN1\n         BR    R14\n         SPACE 2\n***************************************************************HD JUN88\n**                                                             HD JUN88\n**  ESTAE EXIT - ENTERED WHEN ABTERM IN MAIN PROGRAM           HD JUN88\n**  USED TO FREE CSA STORAGE AT ADDRESS SAVED IN SQASTOR       HD JUN88\n**                                                             HD JUN88\n***************************************************************HD JUN88\nCEXIT    DS    0H                      ESTAE EXIT              HD JUN88\n         USING CEXIT,R12               TELL ASSEMBLER          HD JUN88\n         LR    R12,R15                 GET ENTRY POINT ADDR    HD JUN88\n         LA    R4,12                   LOAD ESTAE RETURN CODE  HD JUN88\n         CR    R0,R4                   DID WE GET AN SDWA?     HD JUN88\n         BNE   GOTSDWA                 YES, CONTINUE           HD JUN88\nNOSDWA   DS    0H                                              HD JUN88\n***************************************************************HD JUN88\n**                                                             HD JUN88\n**  R0 = 12 / MVS COULDN'T GET STORAGE FOR AN SDWA             HD JUN88\n**                                                             HD JUN88\n***************************************************************HD JUN88\n         LR    R5,R14                  SAVE RETURN ADDRESS     HD JUN88\n         L     R2,0(R2)                LOAD PARM ADDRESS       HD JUN88\n         L     R1,0(R2)                POINT TO PARAMETER      HD JUN88\n         LTR   R1,R1                   PARAM PASSED?           HD JUN88\n         BZ    NOSRETN                 NO..RETURN              HD JUN88\n         FREEMAIN RU,LV=SQUATL,A=(1),SP=241                    HD JUN88\n         LR    R14,R5                  LOAD RETURN ADDRESS     HD JUN88\nNOSRETN  SLR   R15,R15                 CONTINUE TERMINATION    HD JUN88\n         BR    R14                     RETURN TO CALLER        HD JUN88\n         SPACE 2                                               HD JUN88\nGOTSDWA  DS    0H                                              HD JUN88\n         SPACE 1\n***************************************************************HD JUN88\n**                                                             HD JUN88\n**       HOME OF THE SDWA AND LAND OF THE FREEMAIN             HD JUN88\n**                                                             HD JUN88\n***************************************************************HD JUN88\n         SPACE 1\n         USING SDWA,R6                 TELL ASSEMBLER          HD JUN88\n         STM   R14,R12,12(R13)         SAVE REGISTERS          HD JUN88\n         LR    R6,R1                   GET ADDRESS OF SDWA     HD JUN88\n         SPACE 1                                               HD JUN88\n         L     R1,SDWAPARM             GET PARM ADDRESS        HD JUN88\n         L     R1,0(,R1)               GET PARM                HD JUN88\n         LTR   R1,R1                   IS IT GOTTEN?           HD JUN88\n         BZ    GOTSRETN                NO, SKIP FREEMAIN       HD JUN88\n         FREEMAIN RU,LV=SQUATL,A=(1),SP=241                    HD JUN88\nGOTSRETN SETRP REGS=(14,12),RC=0,WKAREA=(6)                    HD JUN88\n         TITLE 'CONSOLE - DATA AREAS'\n         DS    0F                                              HD JUN88\nBIT31    DC    X'80000000'             TO SET 31BIT MODE       HD JUN88\n         SPACE 1                                               HD JUN88\nSQUAT    DS    0H                                              HD JUN88\n         SAC   256(0)                  SWITCH ADDRESS SPACE    HD JUN88\n         L     R15,0(,R15)             LOAD TDCM ADDRESS       HD JUN88\n         SAC   0(0)                    RETURN HOME             HD JUN88\n         BR    R14                     RETURN TO CALLER        HD JUN88\nCROSSMEM DS    0H                                              HD JUL89\n*                                                              HD JUL89\n*  THIS ROUTINE IS USED TO MOVE DATA FROM ONE ADDRESS SPACE TO HD JUL89\n*  ANOTHER -- ON ENTRY R1 POINTS TO A LIST OF 4 PARMS          HD JUL89\n*  1) 02(R1) IS ASID                                           HD JUL89\n*  2) 04(R1) IS THE FROM DATA AREA IN SECONDARY ADDR SPACE     HD JUL89\n*  3) 08(R1) IS THE LENGTH TO BE MOVED                         HD JUL89\n*  4) 12(R1) IS THE TARGET ADDRESS IN THE PRIMARY ADDR SPACE   HD JUL89\n*                                                              HD JUL89\n*  THIS ROUTINE IS, AND SHOULD, BE ENTERED IN SUPERVISOR MODE  HD JUL89\n*  WITH A STORAGE PROTECT KEY OF ZERO!                         HD JUL89\n*                                                              HD JUL89\n*                                                              HD JUL89\n*  UPDATED 07/11/89 - HOWARD M. DEAN                           HD JUL89\n*                                                              HD JUL89\n*                                                              HD JUL89\n@CROSS   SAVE  (14,12),,CROSSMEM_&SYSDATE._&SYSTIME            HD JUN88\n         LR    R10,R15                                         HD JUL89\n         USING CROSSMEM,R10                                    HD JUL89\n         LR    R9,R1                   SAVE PARM LIST          HD JUL89\n         L     R3,12(,R9)        GET TARGET ADDRESS            HD JUL89\n         L     R4,4(,R9)         GET SCREEN ADDRESS            HD JUL89\n         LH    R1,2(R9)          LOAD SECONDARY ASID           HD JUL89\n         L     R6,8(,R9)         LOAD BUFFER SIZE              HD JUL89\n         SSAR  R1                SET SECONDARY ADDRESS SPACE   HD JUL89\n         SAC   X'100'(0)         SET SECANDARY ADDRESSING      HD JUL89\n         LA    R5,256            GET EFFECTIVE LEN             HD JUL89\n         LA    R2,0                SET ACCESS KEY              HD JUL89\n@LOOP1   MVCP  0(R6,R3),0(R4),R2    MOVE FROM SEC ADDRSPC      HD JUL89\n         BZ    @ENDMVC              END OF MOVE                HD JUL89\n         AR    R3,R5                   INCR SINK BY 256        HD JUL89\n         AR    R4,R5                   INCR SOURCE BY 256      HD JUL89\n         SR    R6,R5                   DECREMENT LEN BY 256    HD JUL89\n         B     @LOOP1                  LOOP TILL YOU POOP      HD JUL89\n@ENDMVC  DS    0H                                              HD JUL89\n         SAC   X'000'(0)               SET PRIMARY ADDRESSING  HD JUL89\n         LH    R1,0(R9)                LOAD CONSOLE ASID       HD JUL89\n         SSAR  R1                                              HD JUL89\n         LM    R14,R12,12(R13)                                 HD JUL89\n         SR    R15,R15                                         HD JUL89\n         BSM   0,R14                   RETURN IN CORRECT MODE  HD JUL89\nSQUATL   EQU   *-SQUAT                 SQUAT LENGTH            HD JUN88\n         EJECT\nCLR      DC    A(CL01001E-CL01001)\n         DC    AL1(3),AL3(CL01001)\nER0001   DC    A(ER01001E-ER01001)\n         DC    AL1(3),AL3(ER01001)\nER0002   DC    A(ER01002E-ER01002)\n         DC    AL1(3),AL3(ER01002)\nER0003   DC    A(ER03001E-ER03001)\n         DC    AL1(3),AL3(ER03001)\nER0004   DC    A(ER04001E-ER04001)\n         DC    AL1(3),AL3(ER04001)\n         SPACE 3\nLOADCRSM LOAD  EP=CROSSMEM,GLOBAL=YES,SF=L\nLOADLEN  EQU   *-LOADCRSM\n         SPACE 3\nWAITIME  DC    C'00001000'\nBLANKS   DC    CL80' '\nCL01001  EQU   *\n         DC    X'C3',X'11',X'4040',X'3C',X'4040',X'00'\nCL01001E EQU   *\nER01001  EQU   *\n         DC    X'C3',X'11',X'5A50',X'1D40',X'13',X'12',X'5D61'\nER01001E EQU   *\nER01002  EQU   *\n         DC    X'C3',X'11',X'5AD1'\n         DC    C'COMMAND NOT AUTHORIZED'\nER01002E EQU   *\nER03001  EQU   *\n         DC    X'C3',X'11',X'E450',X'1D40',X'13',X'12',X'E761'\nER03001E EQU   *\nER04001  EQU   *\n         DC    X'C3',X'11',X'F240',X'1D40',X'13',X'12',X'F561'\nER04001E EQU   *\n         SPACE 3\nSCRBUF2  EQU   1761\nSCRBUF3  EQU   2401\nSCRBUF4  EQU   3281\n         SPACE 3\nCONERR   DC    C'ERROR IN FINDING MASTER CONSOLE'\nERRMSG   DC    C'USER NOT AUTHORIZED'\nPUTFLG   EQU   B'00010100'\nPROBMOD  MODESET KEY=NZERO,MODE=PROB,MF=L\nSUPRMOD  MODESET KEY=ZERO,MODE=SUP,MF=L\nCCTABL   DC    X'40C1C2C3C4C5C6C7'\n         DC    X'C8C94A4B4C4D4E4F'\n         DC    X'50D1D2D3D4D5D6D7'\n         DC    X'D8D95A5B5C5D5E5F'\n         DC    X'6061E2E3E4E5E6E7'\n         DC    X'E8E96A6B6C6D6E6F'\n         DC    X'F0F1F2F3F4F5F6F7'\n         DC    X'F8F97A7B7C7D7E7F'\n         EJECT\nDATA     DSECT\nSAVEREG  DS    18F\nSQUATEP  DS    A                       SQA CODE ENTRY POINT    HD JUL89\nSQATCMEP DS    A                       \"CROSSMEM\" ENTRY POINT  HD JUL89\nAXLIST   DC    0F'0'\n         DC    H'2'                    NUMBER OF AX'S TO BE RESERVED\n         DC    H'0'                    AX=0 VALUE\nAX       DC    H'0'                    AX=1 VALUE\nAXSAVE   DC    F'0'                    SAVE AREA FOR ORGINAL AX VALUE\nESTAE2   ESTAE ,CT,XCTL=NO,PURGE=NONE,ASYNCH=NO,TERM=YES,MF=L  HD JUN88\nSH6BUFSZ EQU   3612                    SCREEN BUFFER SIZE\nCONBUFL  DS    F\nSCRLEN   DS    F                       USER'S SCREEN LENGTH\nSH6INPT  DS    A                       TGET INPUT BYTE COUNT\nSH6TGOPT DS    AL1                     TGET OPTION BYTE\nTERMTGET EQU   X'80'\nTGETASIS EQU   X'01'\n         ORG   *-1\nSH6INPTA DS    A                       TGET BUFFER ADDRESS\nSH6TGTBZ EQU   87                      TGET BUFFER SIZE\nSH6ASID  DS    A                       ASID FOR TASK AND CONSOLE\nDCMPAGAD DS    A                       PAGEABLE DCM ADDRESS\nDCMBUFSZ DS    F                       BUFFER SIZE\nSH6BUFAD DS    A                       SCREEN BUFFER ADDRESS\nSH6RTN1  DS    A                       RETURN ADDRESS FOR TGET\nSH6RTN2  DS    A                       RETURN ADDRESS FOR CROSSMEM\nSH6CRSEP DS    A                       EP FOR CROSSMEM\nSH6FLAG1 DS    AL1\nSH6AUTH  EQU   X'80'                   USER HAS AUTHORITY\nSH6TRMIN EQU   X'40'                   TERMINAL INPUT\nSH6USE   EQU   X'20'                   ALLOW USE\nSH6CRSLD EQU   X'10'                   CROSS MEM LOADED\nSH6JES   EQU   X'08'                   ALLOW JES COMMANDS\nSH6RSV01 DS    AL3\nSH6USRID DS    CL7                     TSO USER ID\nCTYPE    DS    C\nCROWS    DS    F                       NUMBER OF ROWS IN CONSOLE SCR\nUSCRBUF  DS    A                       ADDRESS OF USER SCREEN BUF\nTEMPA1   DS    A\nTEMPA2   DS    A\nENTRYA   DS    A\nDATASIZ  EQU   *-DATA\n         TITLE 'CONSOLE - LITERALS AND MVS DUMMY SECTIONS'     HD JUN88\nCONSOLE  CSECT\nGETLEN   DC    A(DATASIZ+(2*SH6BUFSZ+1)+SH6TGTBZ) WORK AREA SIZE\n         SPACE 1                                               HD JUN88\n         LTORG\n         SPACE 1                                               HD JUN88\n         EJECT\n         IEECUCM DSECT=YES,FORMAT=NEW,LIST=YES\n         EJECT\n         IEECDCM\n         EJECT\n         CVT   DSECT=YES,LIST=YES\n         EJECT\n         IKJTCB LIST=YES\n         EJECT\n         IKJPSCB                                               HD JUN88\n         EJECT                                                 HD JUN88\n         IHASDWA  ,                                            HD JUN88\n         EJECT                                                 HD JUN88\nTIOT     DSECT\n         IEFTIOT1\nCONSOLE  CSECT\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CPPL": {"ttr": 2565, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x891\\x8f\\x00\\x891\\x8f\\x108\\x00\\x15\\x00\\x15\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-11-14T00:00:00", "modifydate": "1989-11-14T10:38:00", "lines": 21, "newlines": 21, "modlines": 0, "user": "HMDEAN"}, "text": "         MACRO\n&X       CPPL  &Y,&DSECT=NO\n***********************************************************************\n*                                                                     *\n*             COMMAND   PROCESSOR   PARAMETER   LIST                  *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         AIF   ('&DSECT' NE 'NO').DSECT\nCPPL     DS    0A .                     COMMAND PROC PARM LIST\n         AGO   .COM\n.DSECT   ANOP\nCPPL     DSECT ,                        COMMAND PROC PARM LIST\n.COM     ANOP\nCPPLCBUF DC    A(0) .                   COMMAND BUFFER ADDR\nCPPLUPT  DC    A(0) .                   USER PROF. TAB\nCPPLPSCB DC    A(0) .                   PROT STEP CB\nCPPLECT  DC    A(0) .                   ENV. CTL TABLE\nCPPLLEN  EQU   *-CPPL .                 LENGTH\n         SPACE 2\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CSPL": {"ttr": 2567, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x891\\x8f\\x00\\x891\\x8f\\x108\\x00\\x17\\x00\\x17\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-11-14T00:00:00", "modifydate": "1989-11-14T10:38:00", "lines": 23, "newlines": 23, "modlines": 0, "user": "HMDEAN"}, "text": "         MACRO\n         CSPL  &DSECT=,                                     @HMD78174\n         AIF   ('&DSECT' EQ 'NO').DS0A                      @HMD78174\n.* RELEASE 20 SUPPORT CODE -- 20035                         @HMD78174\nCSPL     DSECT                                              @HMD78174\n         AGO    .GEN                                        @HMD78174\n.DS0A    ANOP                                               @HMD78174\nCSPL     DS      0A           COMMAND SCAN PARAMETER LIST   @HMD78174\n.GEN     ANOP\n***********************************************************************\n*    THE COMMAND SCAN PARAMETER LIST (CSPL) IS A LIST OF ADDRESSES    *\n*    PASSED FROM THE INVOKER TO COMMAND SCAN VIA REGISTER 1           *\n***********************************************************************\n         SPACE\nCSPLUPT  DS    A        PTR TO  UPT\nCSPLECT  DS    A        PTR TO  ECT\nCSPLECB  DS    A        PTR TO  CP'S ECB\nCSPLFLG  DS    A        PTR TO  FLAG WORD WHICH IS OBTAINED & FREED\n*                       BY CALLER. BIT 0 SET TO 0= SYNTAX CHECKING OF\n*                       COMMAND NAME.\nCSPLOA   DS    A        PTR TO OUTPUT AREA (CSOA DSECT)\nCSPLCBUF DS    A        PTR TO COMMAND BUFFER\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DATECONV": {"ttr": 2569, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x891\\x8f\\x00\\x891\\x8f\\x108\\x00\\xa5\\x00\\xa5\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-11-14T00:00:00", "modifydate": "1989-11-14T10:38:00", "lines": 165, "newlines": 165, "modlines": 0, "user": "HMDEAN"}, "text": "DCV      TITLE 'CONVERT EBCDIC JULIAN  DATE TO GREGORIAN'\nDATECONV CSECT\n***********************************************************************\n*                                                                     *\n*        REGISTER EQUATES                                             *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*        FIXED POINT REGISTERS                                        *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nR0       EQU   0        *USED BY O.S.\nR1       EQU   1        *USED BY O.S. // ADDRESS OF PARAMETER LIST\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13       *USED BY O.S. // SAVE-AREA ADDRESS\nR14      EQU   14       *USED BY O.S. // RETURN ADDRESS\nR15      EQU   15       *USED BY O.S. // ENTRY-PT ADDR, RETURN CODE\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*        FLOATING POINT REGISTERS                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nF0       EQU   0\nF2       EQU   2\nF4       EQU   4\nF6       EQU   6\n         EJECT\n         SAVE  (14,12),T,DATECONV_&SYSDATE._&SYSTIME\n         LR    R12,R15\n         USING DATECONV,R12\n         LR    R2,R1\n         GETMAIN RU,LV=DCVLEN\n         SPACE 1\n         LR    R3,R1               SAVE STORAGE ADDRESS\n         LR    R0,R1               GET ADDRESS\n         LA    R1,DCVLEN           SET LENGTH FOR CLEAR\n         SR    R15,R15             PAD WITH ZEROS\n         MVCL  R0,R14              CLEAR BUFFER TO ZEROS\n         SPACE 1\n         LR    R1,R3               POINT TO WORK AREA\n         ST    R13,4(,R1)          CHAIN\n         ST    R1,8(,R13)               SAVE\n         LR    R13,R1                        AREA\n         USING WORKAREA,R13        ADDRESS THE STORAGE\n         SPACE 1\n         LR    R1,R2               RETSORE PARM ADDRESS\n         MVC   WORKID,=CL8'DCVWORK'  IDENTIFY WORK AREA\n         L     R1,0(R1)              POINT TO PARM FIELD\n         CLC   0(2,R1),=H'0'         PARM EMPTY\n         BE    CALLTIME              YES, USE TODAY'S DATE\n         LH    R2,0(R1)              LOAD LENGTH\n         CH    R2,=H'5'              CHECK THE LENGTH\n         BE    CHEKZONE              OK, CHECK THE ZONES\n         OI    FLAG,BADPARM          INDICATE BAD PARM\n         B     CALLTIME              SET IT UP\nCHEKZONE DS    0H\n         MVZ   ZONING(5),2(R1)       CHECK AT LEAST FOR ZONED\n         CLC   ZONING,=C'00000'      DID IT CHECK OUT\n         BE    PACKER                PACK AWAY\n         OI    FLAG,BADPARM          INDICATE BAD PARM\n         B     CALLTIME              SET IT UP\nPACKER   DS    0H\n         PACK  DOUBLE(6),2(5,R1)     PACK IT FOR SHIPMENT\n         MVC   JULDATE,DOUBLE+2      MOVE IT TO PARMLIST\nCALLTIME DS    0H\n         MVC   PRTDCB(DCBLEN),MODDCB SET UP DATA CONTROL BLOCK\n         SPACE 1\n         OI    OPENLIST,X'80'        INDICATE LAST DCB\n         OPEN  (PRTDCB,OUTPUT),MF=(E,OPENLIST)\n         SPACE 1\n         TM    FLAG,BADPARM          BAD PARM FIELD?\n         BO    PRTMSG                YES, PRINT ERROR MSG\n         LA    R3,JULDATE            SET UP\n         LA    R4,HMDWORK                  PARMS\n         USING HMDAREA,R4            ADDRESSIBILITY\n         SPACE 1\n         CALL  HMDCHRON,((R3),(R4)),VL,MF=(E,CALLEX)\n         SPACE 1\nPRTMSG   DS    0H\n         MVI   PRTLINE,C' '\n         MVC   PRTLINE+1(L'PRTLINE-1),PRTLINE\n         TM    FLAG,BADPARM          RECOVERING FROM BAD PARM?\n         BZ    PRTTIME               NO, DO THE TIME\n         MVC   PRTLINE(L'BP),BP      SHOW BAD PARM\n         B     PUTLINE                 TO THE USER\n         SPACE 1\nPRTTIME  DS    0H\n         MVC   DAYNAME,HMDDAYNM\n         MVC   DAYYEAR,HMDDAYYR\n         MVC   GREGDATE,HMDENGDT\n         SPACE 1\nPUTLINE  DS    0H\n         PUT   PRTDCB,PRTLINE\n         SPACE 1\n         OI    OPENLIST,X'80'        INDICATE LAST DCB\n         CLOSE PRTDCB,MF=(E,OPENLIST)\n         SPACE 1\n         LA    R15,0                 ASSUME ALL OK\n         TM    FLAG,BADPARM          WAS THE PARM BAD\n         BZ    EOJTIME               NO, JUST END\n         LA    R15,16                SET RETURN CODE\nEOJTIME  DS    0H\n         LR    R8,R15                SAVE RETURN CODE\n         LR    R1,R13                GET SAVE AREA ADDRESS\n         L     R13,4(,R1)            RETSORE PREVIOUS SA ADDRESS\n         FREEMAIN RU,LV=DCVLEN,A=(1)\n         LR    R15,R8                LOAD RETURN CODE\n         RETURN (14,12),T,RC=(15)    RETURN TO CALLER\n         EJECT\nMODDCB   DCB   DDNAME=SYSPRINT,DSORG=PS,LRECL=80,BLKSIZE=3200,         X\n               MACRF=PM,RECFM=FB\nDCBLEN   EQU   *-MODDCB\n         SPACE 1\nBP       DC    C'PARM CONSISTS OF A VALID JULIAN DATE OR NOTHING'\n         EJECT\n***\n*** DSECTS\n***\nWORKAREA DSECT                       RESUME R13 DSECT\nSAVEAREA DS    18F                   SAVE AREA\nWORKID   DS    CL8                   WORK AREA ID\nZONING   DS    CL5                   CHECK FOR ZONE DECIMAL\n         SPACE 1\nFLAG     DS    C\nBADPARM  EQU   X'80'                 INDICATE BAD PARM FIELD\n         SPACE 1\nDOUBLE   DS    D                     HMDCHRON WORK AREA\nHMDWORK  DS    CL72\n         SPACE 1\nCALLEX   CALL  ,(0,0),MF=L           LIST FORM CALL MACRO\n         SPACE 1\nOPENLIST OPEN  (,),MF=L              OPEN PARAMETER LIST\n         SPACE 1\nJULDATE  DS    F                     JULIAN DATE AREA\n         SPACE 2\nPRTDCB   DC    CL(DCBLEN)' '         AREA TO COPY DCB\n         SPACE 1\nPRTLINE  DS    CL80                  PRINT LINE\n         ORG   PRTLINE\n         DS    CL2\nDAYNAME  DS    CL9\n         DS    CL2\nDAYYEAR  DS    CL11\n         DS    CL2\nGREGDATE DS    CL8\n         ORG   ,\nDCVLEN   EQU   *-WORKAREA            LENGTH OF WORKAREA\n         SPACE 2\nHMDAREA  HMDTIME ,                   HMDCHRON MAP\n         END     DATECONV\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DRDROID": {"ttr": 2573, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x891\\x8f\\x00\\x891\\x8f\\x108\\x04\\xe0\\x04\\xe0\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-11-14T00:00:00", "modifydate": "1989-11-14T10:38:00", "lines": 1248, "newlines": 1248, "modlines": 0, "user": "HMDEAN"}, "text": "//AJEEDRDR JOB 0001,'SMD01-329-J.ELSWORTH',\n//    CLASS=0,MSGCLASS=A,\n//    NOTIFY=*******\n/*ROUTE PRINT RMT99\n//*\n//* REF: ASYSJEE.LIB( DRDROID )\n//*\n//* DOC: VTAM DR DECK BUILDER\n//*\n//ASM      EXEC  ASMHAL\n//ASM.SYSLIB DD DSN=SYS1.MACLIB,DCB=(BLKSIZE=8000),DISP=SHR\n//         DD DSN=SYS1.AMODGEN,DISP=SHR\n//ASM.SYSIN  DD *\nDRDROID  TITLE 'VTAM DYNAMIC RECONFIGURATION DECK BUILDER  -  P R O L O&\n                G U E'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . DRDROID\n*\n*  DATE WRITTEN . . . . 11/87\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*\n*  ENVIRONMENT  . . . . BATCH\n*\n*  PURPOSE:\n*    AUTOMATICALLY BUILD VTAM DYNAMIC RECONFIGURATION MEMBERS FOR ALL\n*    DROPS OF THE NCP SOURCE DECK POINTED TO BY SYSUT1.\n*\n*\n*  INVOCATION:\n*\n* //DRDROID  EXEC PGM=DRDROID\n* //STEPLIB  DD DISP=SHR,DSN=...\n* //SYSPRINT DD SYSOUT=*\n* //SYSUT1   DD DISP=SHR,DSN=SYS4.VTAMLST(N.....)\n* //SYSUT2   DD DISP=SHR,DSN=SYS4.VTAMLST\n*\n*\n*  DESCRIPTION:\n*\n*    SYSUT1 IS ASSUMED TO POINT TO AN NCP SOURCE DECK.\n*    SYSUT2 CAN BE VTAMLST OR ANY OTHER PDS.\n*\n*    FOR EACH PU (THAT HAS SUBORDINATE LU'S) IN THE SYSUT1 INPUT\n*    2 MEMBERS WILL BE BUILT AND PLACED IN SYSUT2.\n*\n*    THE MEMBER NAMES WILL BE DRAAABBC\n*\n*      WHERE:\n*\n*    'DR' : CONSTANT\n*     AAA : 3 DIGIT LINE LUMBER FOR THE PU\n*      BB : 2 DIGIT CONTROLLER ADDRESS\n*       C : 'M' - MOVE MEMBER\n*            1) - DELETES ALL LU'S FROM THE DISABLED PU\n*            2) - ADDS A PU TO THE DR LINE\n*            3) - ADDS LU'S TO THE PU ON THE DR LINE\n*\n*           'R' - RESTORE MEMBER\n*            1) - DELETES THE PU ADDED IN M-2\n*            2) - ADDS THE LU'S BACK TO THEIR ORIGINAL PU\n*\n*    IF THE CONSTANT '*NODR* APPEAR IN COLUMN 40 ON THE PU STATEMENT\n*    NO DR MEMBERS WILL BE GENERATED FOR THAT PU.\n*\n*\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  ASSUMPTIONS:\n*\n*   \u00a2 ALL LU/PU SPECIFICATIONS IN THE SOURCE DECK ARE ASSUMED TO\n*     FIT ON ONE LINE.\n*\n*   \u00a2 BATCH DEVICES ARE ASSUMED TO EXPLICITLY SPECIFY PACING.\n*\n*   \u00a2 LU AND PU RECORD TYPES ARE EXPECTED TO CONTAIN EITHER 'LU' OR\n*     'PU' IN COLUMN 10.\n*\n*  CAVEATS:\n*\n*   \u00a2 SYSUT2 DATASET INTEGRITY IS MAINTAINED AS LONG AS THE ONLY OTHER\n*     MANNER OF SYSUT2 UPDATING IS VIA SPF EDIT.\n*\n*   \u00a2 SEVERE SYNTAX ERRORS ON SYSUT1 WILL CAUSE UNPREDICTABLE RESULTS.\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 3\n***********************************************************************\n*  USER MODIFIABLE PARAMETERS\n***********************************************************************\n         SPACE 1\n         GBLC  &DRLNO             DR LINE NUMBER\n&DRLNO   SETC  '???'\n         GBLC  &DRLNM             DR LINE NAME\n&DRLNM   SETC  'LNA'.'&DRLNO'\n         GBLC  &DLOGMOD           DEFAULT LOGMODE\n&DLOGMOD SETC  'T3278M2'\n         SPACE 1\n* -- OUTPUT OPTIONS\n         SPACE 1\nOUTDISK  EQU   X'80'              .DISK ONLY\nOUTPRT   EQU   X'40'              .PRINT ONLY\n*\nOUTOPT   EQU   OUTDISK\n         SPACE 1\nDRMAXLU  EQU   128                MAXIMUM LU'S PER PU\n         TITLE 'VTAM DYNAMIC RECONFIGURATION DECK BUILDER  -  M A C R O&\n                '' S'\n         MACRO\n&LABEL   @PUT  &TEXT,                   TEXT TO BE PUT                 &\n               &LENGTH,                 LENGTH OF TEXT                 &\n               &EJECT=NO                EJECT CC\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.* --> @ P U T\n.*\n.* SETS UP CALL TO LOCAL PRINT ROUTINE\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.* MESSAGE TEXT\n.*\n&LABEL   LA    R1,&TEXT                 ADDRESS OF TEXT TO PUT\n.*\n.* MESSAGE LENGTH\n.*\n         AIF   ('&LENGTH' NE '').A200\n         LA    R0,L'&TEXT               LENGTH OF TEXT\n         AGO   .A299\n.A200    ANOP\n         LA    R0,&LENGTH               LENGTH OF TEXT\n.A299    ANOP\n.*\n         AIF   ('&EJECT' NE 'YES').A600\n         MVI   DRSYSM,C'1'              EJECT CC\n.*\n.A600    ANOP\n.*\n.* LOCAL CALL\n.*\n.A2000   ANOP\n         BAL   R14,DR@PUT               CALL LOCAL PRINT ROUTINE\n         AIF   ('&EJECT' NE 'YES').AMEND\n         MVI   DRSYSM,C' '              RESTORE CC\n.*\n.AMEND   ANOP\n         MEND\n         EJECT\n         MACRO\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.* --> @ W T O\n.*\n.* SETS UP CALL TO LOCAL WTO ROUTINE\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n&LABEL   @WTO  &TEXT,                   TEXT TO BE PUT                 &\n               &LENGTH,                 LENGTH OF TEXT                 &\n               &MSGNO                   MESSAGE NUMBER\n.*\n         AIF   ('&TEXT' NE '-').A100\n&LABEL   SR    R1,R1                    INDICATE A DELIMITER LINE\n         AGO   .A2000\n.*\n.A100    ANOP\n&LABEL   LA    R1,&TEXT                 ADDRESS OF TEXT TO PUT\n.*\n.* MESSAGE LENGTH\n.*\n         AIF   ('&LENGTH' NE '').A200\n         LA    R0,L'&TEXT               LENGTH OF TEXT\n         AGO   .A299\n.A200    ANOP\n         LA    R0,&LENGTH               LENGTH OF TEXT\n.A299    ANOP\n.*\n.* MESSAGE NUMBER\n.*\n         AIF   ('&MSGNO' NE '').A600\n         LA    R2,=C'--'                DEFAULT MESSAGE NUMBER\n         AGO   .A2000\n.*\n.A600    ANOP\n         LA    R2,=CL2'&MSGNO'          MESSAGE NUMBER\n.*\n.A2000   ANOP\n         BAL   R14,DR@WTO               CALL LOCAL WTO ROUTINE\n.*\n.AMEND   ANOP\n         MEND\n         EJECT\n         MACRO\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.* --> @ E D I T\n.*\n.* PREPARE A PACKED FIELD FOR PRINTING\n.*\n.* ! DESTROYS R15\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n&LABEL   @EDIT &DISPLAY,               DISPLAY FIELD                   &\n               &PACKED                 PRINT FIELD\n.*\n&LABEL   MVC   DRWORK(L'DRMASK1),DRMASK1    EDIT MASK\n         ED    DRWORK(L'DRMASK1),&PACKED    EDIT THE PACKED FIELD\n         MVC   &DISPLAY,DRWORK+8-L'&DISPLAY MOVE TO DISPLAY FIELD\n         MEND\n         SPACE 3\n         MACRO\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.* --> @CHECK\n.*\n.* CHECK RETURN CODE IN R15\n.*\n.* IF NON ZERO THEN SET UP FOR ABEND PROCESSING\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n&LABEL   @CHECK\n.*\n         LCLC  &L1,&L2\n&L1      SETC  'DR'.'&SYSNDX'.'C1'\n&L2      SETC  'DR'.'&SYSNDX'.'C2'\n.*\n&L1      EQU   *\n&LABEL   LTR   R15,R15                 RETURN CODE OK\n         BZ    &L2                     -YUP\n         STM   R14,R15,DRABRSA+(4*14)  -NOPE, SAVE 14\n         LA    R14,&L1                 ERROR LOCATION\n         B     DRZABEND                GO TO ABEND PROCESSING\n&L2      EQU   *\n         MEND\n         TITLE 'VTAM DYNAMIC RECONFIGURATION DECK BUILDER  -  LOCAL DSE&\n               CTS AND EQUATES'\n*\n*  REGISTER SYMBOLICS\n*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3                   WORK REGISTER\nR4       EQU   4                   WORK REGISTER\nRN       EQU   9                   LU ENTRY NUMBER\nRSYSUT1  EQU   10                  @DETAIL SYSUT1 RECORD\nRJFCB    EQU   11                  @JFCB\nRBASE2   EQU   12                  2ND BASE REGISTER\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 3\n*\n*  VTAM / NCP DETAIL RECORD LAYOUT (SUCH AS IT IS)\n*\nDRDREC   DSECT\nDRDRES   DS    CL8                 RESOURCE NAME\n         ORG   DRDREC+1\nDRDLD    DS    CL5                 LINE / DROP\n         ORG\n         DS    C                   .FILLER\nDRDRTYP  DS    CL5'LU   '          RESOURCE TYPE\n         DS    C                   .FILLER\n         DS    24C                 .FILLER\nDRDCOM   DS    31C                 COMMENT FIELD\nDRDRECL  EQU   *-DRDREC            RECORD LENGTH\n         SPACE 3\n*\n*  MISCELLANEOUS DSECTS\n*\n         PUSH  PRINT\n         PRINT NOGEN\n         DCBD  DSORG=PS,DEVD=DA         DCB DSECTS\n         POP   PRINT\n         SPACE 5\n         TITLE 'VTAM DYNAMIC RECONFIGURATION DECK BUILDER  -  M A I N L&\n                I N E'\n***********************************************************************\n*  OBSERVE LINKAGE CONVENTIONS\n***********************************************************************\n         SPACE 1\nDRDROID  CSECT\n         USING DRDROID,R15              TEMP ADDRESSABILITY\n         B     *+28                     BRANCH AROUND EYECATCHED\n         DC    CL24'DRDROID-&SYSDATE-&SYSTIME'\n         STM   14,12,12(13)             SAVE CALLERS REGS\n         BAL   R3,DRSLRSA+72            BR AROUND RSA\nDRSLRSA  DC    18F'-1'                  REGISTER SAVE AREA\n         DROP  R15                      END TEMP USING\n         ST    3,8(13)                  @OUR SAVE AREA\n         ST    13,4(3)                  @CALLERS SAVE AREA\n         LR    13,3                     @OUR SAVE AREA\n         USING DRSLRSA,13               SAVE AREA IS ALSO THE BASE\n         LA    RBASE2,4095(R13)         ESTABLISH\n         LA    RBASE2,1(RBASE2)         ..SECOND\n         USING DRSLRSA+4096,RBASE2      ..BASE\n         SPACE 2\n***********************************************************************\n*  OPEN DATASETS\n***********************************************************************\n         SPACE 1\n         OPEN  (SYSPRINT,OUTPUT)\n         OPEN  (SYSUT1,INPUT)\n         SPACE 1\n***********************************************************************\n*  GET JFCB FOR SYSUT2\n***********************************************************************\n         SPACE 1\n         LA    R3,SYSUT2\n         USING IHADCB,R3                MAP DCB\n         MVC   DCBEXLST+1(R3),=AL3(DREXLST) FILL IN EXIT LIST ADDRESS\n         DROP  R3                       END DCB ADDRESSABILITY\n         RDJFCB ((R3))                  READ THE JFCB\n         LA    RJFCB,DRJFCB             @JFCB\n         USING INFMJFCB,RJFCB           MAP JFCB\n         OI    JFCBIND1,JFCPDS          INDICATE THIS IS A PDS\n         MVC   DRMINOR(44),JFCBDSNM     EXTRACT DATASET NAME FOR ENQ\n         SPACE 2\n***********************************************************************\n* INITIALIZE FOR DETAIL PROCESSING\n***********************************************************************\n         SPACE 1\n* DATE STAMP\n         TIME\n         ST    R1,DRPDATE\n         OI    DRPDATE+3,X'0F'         SPF DIRECTORY ENTRY FORMAT\n         UNPK  DRWORK(5),DRPDATE       MAKE PRINTABLE\n         MVC   DRDATE(2),DRWORK        YY\n         MVC   DRDATE+3(3),DRWORK+2    DDD\n*\n* TIME STAMP\n*\n         ST    R0,DRPTIME\n         UNPK  DRWORK(7),DRPTIME       MAKE PRINTABLE\n         MVC   DRTIME(2),DRWORK        HH\n         MVC   DRTIME+3(2),DRWORK+2    MM\n*\n         @WTO  DRMP2,DRMP2L,00\n*\n         @WTO  -                       DELIMITER\n*\n* KOUNTERS AND POINTERS\n*\n         SR    RN,RN                   CLEAR LU\n         ST    RN,DRKLU                  PROCESSED COUNT\n         LA    R3,DRLUTAB-80           TABLE ENTRY (PRIMED)\n         EJECT\n***********************************************************************\n* HEAD OF DETAIL READ LOOP\n***********************************************************************\n         SPACE 1\nREADLOOP EQU   *\n         GET   SYSUT1\n         LR    RSYSUT1,R1              COPY RECORD ADDRESS\n         USING DRDREC,RSYSUT1          MAP DETAIL RECORD\n         CLI   DRDREC,C'*'             COMMENT ?\n         BE    READLOOP                -YES\n         CLC   DRDRTYP(3),=C'PU '      PU SPECIFICATION\n         BE    H100                    -NO\n         CLC   DRDRTYP(3),=C'LU '      LU SPECIFICATION\n         BNE   READLOOP                 -NO\n         SPACE 1\n*  L U  PROCESSING\n         SPACE 1\n         CLC   DRDRES(3),=C'LU4'        NPA LU ?\n         BE    READLOOP                 -YES\n         TM    DRFLAGS,DRFNODR          *NODR* FLAG ON?\n         BO    READLOOP                 -YES\n*\n         LA    R3,80(R3)                BUMP TABLE POINTER\n         LA    RN,1(RN)                 BUMP TABLE\n         C     RN,=A(DRMAXLU)           AT MAX?\n         BNH   D200                     -NO\n         @WTO  DRME10,,44\n         ABEND 13\n         SPACE 2\nD200     EQU   *\n         ST    RN,DRKLU                 ENTRY COUNT\n         MVC   0(80,R3),DRDREC          MOVE DETAIL RECORD TO TABLE\n         B     READLOOP\n         TITLE 'VTAM DYNAMIC RECONFIGURATION DECK BUILDER  -  M A I N L&\n                I N E  -  (M)-OVE MEMBER : PASS-1'\n**********************************************************************\n*  (M)-OVE MEMBER PASS-1\n**********************************************************************\n         SPACE 1\nDRHM1    DC    C'* --( '\nDRHM1A   DC    C'????????'\n         DC    C' - '\nDRHM1B   DC    C'......'\n         DC    C' - '\nDRHM1C   DC    C'HH:MM'\n         DC    C' )'\nDRHM1L   EQU   *-DRHM1\n         SPACE 1\nDRHM2    DC    C'* DELETE LOGICAL UNITS FROM '\nDRHM2A   DC    C'????????'\n         DC    C' AND ADD THEM TO '\nDRHM2B   DC    C'????????'\nDRHM2L   EQU   *-DRHM2\n         SPACE 1\nDRHM3    DC    C'         VBUILD TYPE=DR'\nDRHM3L   EQU   *-DRHM3\n         SPACE 1\nDRHM4    DC    C'DELLUS   DELETE FROM='\nDRHM4A   DC    CL8'????????'            PUNAME\nDRHM4L   EQU   *-DRHM4\n         SPACE 2\nH000     DS    0H\n         LTR   RN,RN                    ANY LU'S FOR LAST PU?\n         BZ    W100                     -NO, JUST QUIT\n         OI    DRFLAGS,DRFEOF           SET EOF SWITCH\n         B     H200\nH100     EQU   *\n         AP    DRKPUX,=P'1'             BUMP PU IN SOUREC KOUNT\n         LTR   RN,RN                    ANY LU'S FOR LAST PU?\n         BZ    M100                     -NO\n         SPACE 2\n* CLOSE SYSUT2\n         SPACE 1\nH200     EQU   *\n         CLOSE SYSUT2\n         SPACE 1\n         MVC   DRLD,DRPU+3              BREAK OUT LINE.DROP NAME\n         MVC   DRMEMBER(2),=C'DR'       MEMNAME PREFIX\n         MVC   DRMEMBER+2(5),DRLD       LINE.DROP NAME\n         MVI   DRMEMBER+7,C'M'\n         MVC   JFCBELNM,DRMEMBER        MOVE TO JFCB\n*\n* ATTEMPT TO ENQUEUE ON THIS MEMBER\n*\n*  NOTE ! THIS ONLY PROTECTS AGAINST PEOPLE UPDATING THIS MEMBER\n*         VIA SPF.\n*\n         MVC   DRMINOR+44(8),DRMEMBER   MEMBER NAME TO ENQ MINOR\n         ENQ   (DRMAJOR,DRMINOR,E,44+8,SYSTEMS),RET=USE\n         CLI   3(R15),0                 GET IT ?\n         BE    H250                     -YES\n         MVC   DRMP6A,DRMEMBER          MEMBER NAME TO WTO\n         @WTO  DRMP6,DRMP6L,10\n         AP    DRKECF,=P'1'             BUMP THE ERROR COUNT\n         B     M100\n*\nH250     EQU   *\n         OPEN  (SYSUT2,OUTPUT),TYPE=J\n         AP    DRKPUP,=P'1'             BUMP PU'S PROCESSED KOUNT\n         MVC   DRDRPU,DRPU              BUILD DR PUNAME\n         MVC   DRDRPU+3(3),=C'&DRLNO'   LINE NUMBER PORTION OF PU\n*\n         @PUT  DRCOM,L'DRCOM,EJECT=YES\n*\n         MVC   DRHM1A,DRMEMBER          DR MEMBER NAME\n         MVC   DRHM1B,DRDATE            DATESTAMP\n         MVC   DRHM1C,DRTIME            TIMESTAMP\n         @PUT  DRHM1,DRHM1L\n*\n         @PUT  DRCOM,L'DRCOM\n*\n         MVC   DRHM2A,DRPU              FROM PUNAME\n         MVC   DRHM2B,DRDRPU            DR PUNAME\n         @PUT  DRHM2,DRHM2L\n*\n         @PUT  DRCOM,L'DRCOM\n*\n         @PUT  DRHM3,DRHM3L\n*\n         @PUT  DRCOM,L'DRCOM\n*\n         MVC   DRHM4A,DRPU              SOURCE PU\n         @PUT  DRHM4,DRHM4L\n*\n         @PUT  DRCOM,L'DRCOM\n*\n         SR    RN,RN                    CLEAR\n         LA    R3,DRLUTAB-80            TABLE POINTER *(PRIMED)\n         SPACE 1\nH300     EQU   *\n         LA    RN,1(RN)                 BUMP RECORD COUNT\n         C     RN,DRKLU                 FINISHED ?\n         BH    J100                     -NO\n*\n         SPACE 2\nH400     EQU   *\n         LA    R3,80(R3)                BUMP TABLE POINTER\n         @PUT  0(R3),15\n         B     H300\n         TITLE 'VTAM DYNAMIC RECONFIGURATION DECK BUILDER  -  M A I N L&\n                I N E  -  (M)-OVE MEMBER : PASS-2'\n**********************************************************************\n*  (M)-OVE MEMBER PASS-2\n**********************************************************************\n         SPACE 1\nDRJM1    DC    C'ADDPU    ADD   TO='\nDRJM1A   DC    C'??????'\nDRJM1L   EQU   *-DRJM1\n*\nDRJM3    EQU   *\nDRJM3A   DC    CL8'????????'\n         DC    C' PU    ADDR='\nDRJM3B   DC    CL2'??'\n         DC    C','\nDRJM3L   EQU   *-DRJM3\n*\nDRJM04   DC    C'               ANS=CONTINUE,'\nDRJM06   DC    C'               PUTYPE=2,'\nDRJM08   DC    C'               MAXOUT=7,'\nDRJM10   DC    C'               MAXDATA=265,'\nDRJM14   DC    C'               PACING=0,'\nDRJM16   DC    C'               PASSLIM=7,'\nDRJM18   DC    C'               RETRIES=(,1,4),'\nDRJM19   DC    C'               SSCPFM=USSSCS'\n*\nDRJM20   DC    C'ADDLUS   ADD   TO='\nDRJM20A  DC    C'????????'      PUNAME\nDRJM20L  EQU   *-DRJM20\n*\n         SPACE 2\nJ100     DS    0H\n         @PUT  DRCOM,L'DRCOM\n*\n         MVC   DRJM1A,=C'&DRLNM'        DR LINE NAME\n         @PUT  DRJM1,DRJM1L\n*\n         @PUT  DRCOM,L'DRCOM\n*\n         MVC   DRJM3A,DRDRPU            DR PUNAME\n         MVC   DRJM3B(2),DRPUADR        CONTROLLER ADDRESS\n         @PUT  DRJM3,DRJM3L\n*\n         @PUT  DRJM04,L'DRJM04\n         @PUT  DRJM06,L'DRJM06\n         @PUT  DRJM08,L'DRJM08\n         @PUT  DRJM10,L'DRJM10\n         @PUT  DRJM14,L'DRJM14\n         @PUT  DRJM16,L'DRJM16\n         @PUT  DRJM18,L'DRJM18\n         @PUT  DRJM19,L'DRJM19\n*\n         @PUT  DRCOM,L'DRCOM\n*\n         MVC   DRJM20A,DRDRPU           DR PUNAME\n         @PUT  DRJM20,DRJM20L\n*\n         SR    RN,RN                    CLEAR\n         LA    R3,DRLUTAB-80            TABLE POINTER *(PRIMED)\n         SPACE 1\nJ200     EQU   *\n         LA    RN,1(RN)                 BUMP RECORD COUNT\n         C     RN,DRKLU                 FINISHED ?\n         BH    J900                     -NO\n*\n         SPACE 2\nJ400     EQU   *\n         @PUT  DRCOM,L'DRCOM\n*\n         LA    R3,80(R3)                BUMP TABLE POINTER\n         TRT   15(70,R3),DRTRTBL        FIND LAST BLANK\n         LR    R2,R1                    COPY ADDRESS OF THE BLANK\n         BCTR  R2,0                     BACK UP BY 1\n         CLI   0(R2),C','               A COMMA ALREADY ?\n         BE    J450                     -YES\n         MVI   0(R1),C','               AND APPEND A COMMA\nJ450     EQU   *\n         @PUT  0(R3),80\n         BAL   R14,LOGMODE\n         LTR   R15,R15\n         BNZ   J500\n         @PUT  DRMG10,L'DRMG10\n         B     J200\nJ500     EQU   *\n         @PUT  DRMG20,L'DRMG20\n         B     J200\n         SPACE 2\n*  MEMBER CLOSE PROCESSING\n         SPACE 1\nJ900     EQU   *\n         BAL   R14,DR@MCP               CALL MEMBER CLOSE PROCESSING\n         B     L100\n         TITLE 'VTAM DYNAMIC RECONFIGURATION DECK BUILDER  -  M A I N L&\n                I N E  -  (R)-ESTORE MEMBER'\n**********************************************************************\n*  (R)-ESTORE MEMBER  PASS-1\n**********************************************************************\n         SPACE 1\nDRML4    DC    C'*  DELETE THE DYNAMICALLLY ADDED PU AND LU''S FROM '\nDRML4A   DC    C'??????'\nDRML4L   EQU   *-DRML4\n*\nDRML5    DC    C'         VBUILD TYPE=DR'\n*\nDRML6    DC    C'DELPU   DELETE FROM=&DRLNM'\nDRML6L   EQU   *-DRML6\n*\nDRML7    EQU   *\nDRML7A   DC    C'????????'\n         DC    C' PU'\nDRML7L   EQU   *-DRML7\n*\nDRML8    DC    C'ADDLUS   ADD   TO='\nDRML8A   DC    C'????????'\nDRML8L   EQU   *-DRML8\n         SPACE 1\nL100     DS    0H\n         MVI   DRMEMBER+7,C'R'          CHANGE MEMBER NAME\n         MVC   JFCBELNM,DRMEMBER        MOVE TO JFCB\n*\n* ATTEMPT TO ENQUEUE ON THIS MEMBER\n*\n*  NOTE ! THIS ONLY PROTECTS AGAINST PEOPLE UPDATING THIS MEMBER\n*         VIA SPF.\n*\n         MVC   DRMINOR+44(8),DRMEMBER   MEMBER NAME TO ENQ MINOR\n         ENQ   (DRMAJOR,DRMINOR,E,44+8,SYSTEMS),RET=USE\n         CLI   3(R15),0                 GET IT ?\n         BE    L150                     -YES\n         MVC   DRMP6A,DRMEMBER          MEMBER NAME TO WTO\n         MVC   DRJLMN(3),=C'100'        MOVE MESSAGE TO WTO\n         @WTO  DRMP6,DRMP6L,20\n         AP    DRKECF,=P'1'             BUMP THE ERROR COUNT\n         B     M100\n*\nL150     EQU   *\n         OPEN  (SYSUT2,OUTPUT),TYPE=J\n*\n         @PUT  DRCOM,1,EJECT=YES\n*\n         MVC   DRHM1A,DRMEMBER          DR MEMBER NAME\n         MVC   DRHM1B,DRDATE            DATESTAMP\n         MVC   DRHM1C,DRTIME            TIMESTAMP\n         @PUT  DRHM1,DRHM1L\n*\n         @PUT  DRCOM,L'DRCOM\n*\n         @PUT  DRCOM,1\n*\n         MVC   DRML4A,=C'&DRLNM'        DR LINE NAME\n         @PUT  DRML4,DRML4L\n*\n         @PUT  DRCOM,1\n*\n         @PUT  DRML5,L'DRML5\n*\n         @PUT  DRCOM,1\n*\n         @PUT  DRML6,DRML6L\n*\n         @PUT  DRCOM,1\n*\n         MVC   DRML7A,DRDRPU            DR PUNAME\n         @PUT  DRML7,DRML7L\n*\n         @PUT  DRCOM,1\n*\n         MVC   DRML8A,DRPU              ORIGINAL PUNAME\n         @PUT  DRML8,DRML8L\n         SPACE 2\n         SR    RN,RN                    CLEAR\n         LA    R3,DRLUTAB-80            TABLE POINTER *(PRIMED)\nL200     EQU   *\n         LA    RN,1(RN)                 BUMP RECORD COUNT\n         C     RN,DRKLU                 FINISHED ?\n         BH    L900                     -NO\n*\n         SPACE 2\nL400     EQU   *\n         @PUT  DRCOM,1\n*\n         LA    R3,80(R3)                BUMP TABLE POINTER\n         TRT   15(70,R3),DRTRTBL        FIND LAST BLANK\n         LR    R2,R1                    COPY ADDRESS OF THE BLANK\n         BCTR  R2,0                     BACK UP BY 1\n         CLI   0(R2),C','               A COMMA ALREADY ?\n         BE    L450                     -YES\n         MVI   0(R1),C','               AND APPEND A COMMA\nL450     EQU   *\n         @PUT  0(R3),80\n         BAL   R14,LOGMODE\n         LTR   R15,R15\n         BNZ   L500\n         @PUT  DRMG10,L'DRMG10\n         B     L200\nL500     EQU   *\n         @PUT  DRMG20,L'DRMG20\n         B     L200\n         SPACE 2\nL900     EQU   *\n         BAL   R14,DR@MCP               MEMBER CLOSE PROCESSING\n         TITLE 'VTAM DYNAMIC RECONFIGURATION DECK BUILDER  -  M A I N L&\n                I N E  -  PU RE-INITIALIZATION'\n**********************************************************************\n*  CLEAN UP FOR THIS PU AND INITIALIZE FOR NEXT ONE\n**********************************************************************\n         SPACE 1\nM100     EQU   *\n         SR    RN,RN                    CLEAR\n         ST    RN,DRKLU                   RECORD COUNT\n         LA    R3,DRLUTAB-80            TABLE POINTER *(PRIMED)\n*\n         NI    DRFLAGS,255-DRFNODR      ASSUME THAT WE WILL BUILD DR\n         CLC   DRDCOM(6),=C'*NODR*'     REQUEST NOT TO?\n         BNE   M200                     -NO\n         OI    DRFLAGS,DRFNODR          SET *NODR* FLAG\n         AP    DRKNOP,=P'1'             BUMP *NODR* KOUNT\n         MVC   DRMP4A,DRDRES            PUNAME TO MESSAGE\n         @WTO  DRMP4,DRMP4L,30\n         SPACE 1\nM200     EQU   *\n         MVC   DRPU,DRDRES              SAV PU NAME\n         TM    DRFLAGS,DRFEOF           AT EOF\n         BNO   READLOOP                 -NO\n         TITLE 'VTAM DYNAMIC RECONFIGURATION DECK BUILDER  -  M A I N L&\n                I N E  -  TERMINATION'\n***********************************************************************\n*  WARM FUZZIES\n***********************************************************************\n         SPACE 1\nW100     EQU   *\n         @WTO  -                        DELIMITER\n*\n         @EDIT DRMT2A,DRKPUX            PU'S IN THE SOURCE DECK\n         @WTO  DRMT2,DRMT2L,92\n*\n         @EDIT DRMT4A,DRKNOP            PU'S REQUESTING *NODR*\n         @WTO  DRMT4,DRMT4L,92\n*\n         @EDIT DRMT6A,DRKPUP            PU'S RESULTING IN DRMEMBERS\n         @WTO  DRMT6,DRMT6L,92\n*\n         @EDIT DRMT8A,DRKECF            ISPF ENQUEUE CONFLICTS\n         @WTO  DRMT8,DRMT8L,92\n*\n         @WTO  -                       DELIMITER\n         EJECT\n***********************************************************************\n*  CLOSE ANY DATASETS THAT WE HAVE DISTURBED\n***********************************************************************\n         CLOSE (SYSPRINT,,SYSUT1,,SYSUT2)\n         SPACE 2\n***********************************************************************\n*  RETURN TO CALLER\n***********************************************************************\n         SPACE 1\n         SR    R15,R15                 SET RETURN CODE\n         L     R13,4(R13)\n         RETURN (14,12),RC=(15)\n         SPACE 2\n***********************************************************************\n*  EXIT VIA ABEND / DUMP\n***********************************************************************\n         SPACE 1\nDRZABEND EQU   *\n         S     R14,=A(DRDROID)          OFFSET\n         ABEND 77,DUMP\n         TITLE 'VTAM DYNAMIC RECONFIGURATION DECK BUILDER  -  CONSTANTS&\n                AND WORK AREAS'\n***********************************************************************\n*  CONSTANTS AND NON-REENTRANT ETC.\n***********************************************************************\n         SPACE 1\nDRWORK   DC    D'0'                    WORK AREA\nDRRSA    DC    16F'0'                  COMMON REG SAVE AREA\nDRABRSA  DC    16F'0'                  ABEND REG SAVE AREA\nDRPDATE  DC    PL4'0'                  00YYDDDF PACKED DATE\nDRPTIME  DC    PL4'0'                  000HHMMF PACKED TIME\nDREXLST  DC    X'87',AL3(DRJFCB)       DCB EXIT LIST\n*\n* -- KOUNTERS\n*\nDRKLU    DC    F'0'                    NUMBER OF DRLUNUM ENTRIES\n*\nDRKPUP   DC    PL4'0'                  PU'S PROCESSED\nDRKECF   DC    PL4'0'                  ISPF ENQUEUE CONFLICTS\nDRKNOP   DC    PL4'0'                  *NODR* SPECIFICATIONS\nDRKPUX   DC    PL4'0'                  PU STMNTS IN SOURCE DECK\n*\nDRKHLO   DC    H'0'                    #LINES OUTPUT (PER MEMBER)\n*\nDRMASK1  DC    X'4020202020202120'     EDIT MASK\nDRBLANK  DC    C' '                    BLANK\nDRCOM    DC    C'*'                    COMMENT CARD\nDRLD     DC    CL5'.....'              PREVIOUS LINE / DROP\nDRDATE   DC    CL6'YY.JJJ'             YY.JJJ\nDRTIME   DC    CL6'HH:MM'               HH:MM\n*\nDRMAJOR  DC    CL8'SPFEDIT'\nDRMINOR  DC    CL44'SYSUT2 DSNAME?',CL8'NCPNAME?'\n*\nDRPU     DC    CL8'????????'           PREVIOUS PU\n         ORG   DRPU+6\nDRPUADR  DC    CL2'??'                 PU ADDRESS\nDRDRPU   DC    CL8'????????'           DR PUNAME\n*\nDRMEMBER DC    CL8' '                  DR MEMBER NAME\n*\nDRLM     DC    CL8'?'                  LOGMODE\n*\n* -- FLAGS\n*\nDRFLAGS  DC    X'00'                   STATUS FLAGS\nDRFEOF   EQU   X'80'                   .EOF ON SYSUT1\nDRFNODR  EQU   X'40'                   .*NODR* FLAG\n*\nDROUTOPT DC    AL1(OUTOPT)              OUTPUT OPTIONS\n*\n* -- TRANSLATE TABLES\n*\nDRTRTBL  DC    256X'00'                 LOCATE BLANKS\n         ORG   DRTRTBL+C' '\n         DC    C' '\n         ORG\n         EJECT\n***********************************************************************\n* M E S S A G E S\n***********************************************************************\n*\n* -- ERROR MESSAGES\n*\nDRMA10   DC    CL70'ERROR ENCOUNTERED: R14 IS DETECTION ADDRESS - R0-R1&\n               5 STORED AT DRRSA'\nDRME10   DC    C'LU PER PU COUNT EXCEEDED'\n*\n* -- COMMON MEMBER GENERATION TEXT\n*\n* INTERACTIVE DEVICE\n*\nDRMG10   DC    C'               MODETAB=MODEREM1,USSTAB=USSSNA,SSCPFM=U&\n               SSSCS'\n*\n* BATCH DEVICE\n*\nDRMG20   DC    C'               MODETAB=MODEREM1,USSTAB=USSSNA,SSCPFM=U&\n               SSSCS'\n*\n* -- PROCESSING MESSAGES\n*\nDRMP2    DC    C'VERSION &SYSDATE-&SYSTIME BEGINNING'\nDRMP2L   EQU   *-DRMP2\n*\nDRMP4    EQU   *\nDRMP4A   DC    C'XXXXXXXX'\n         DC    C' : REQUESTS *NODR*'\nDRMP4L   EQU   *-DRMP4\n*\nDRMP6    EQU   *\nDRMP6A   DC    C'XXXXXXXX'\n         DC    C' : IN USE - PROCESSING SKIPPED'\nDRMP6L   EQU   *-DRMP6\n*\n* -- MESSAGE BUFFERS\n*\nDRSYSM   DS    0CL80\n         DC    C' '\nDRSYSM1  DS    CL80\n         ORG\n*\n* -- TERMINATION MESSAGES\n*\nDRMT2    EQU   *\nDRMT2A   DC    C'???'\n         DC    C' PU''S IN SOURCE DECK'\nDRMT2L   EQU   *-DRMT2\n*\nDRMT4    EQU   *\nDRMT4A   DC    C'???'\n         DC    C' PU''S REQUESTED *NODR*'\nDRMT4L   EQU   *-DRMT4\n*\nDRMT6    EQU   *\nDRMT6A   DC    C'???'\n         DC    C' PU''S HAD DR MEMBERS GENERATED FOR THEM'\nDRMT6L   EQU   *-DRMT6\n*\nDRMT8    EQU   *\nDRMT8A   DC    C'???'\n         DC    C' PU''S SKIPPED DUE TO ISPF ENQUEUE CONFLICTS'\nDRMT8L   EQU   *-DRMT8\n         SPACE 2\n***********************************************************************\n* L I T E R A L S\n***********************************************************************\n         SPACE 1\n         LTORG\n         EJECT\nDRJFCB   DS    0A                       @JFCB\n         IEFJFCBN LIST=NO\n         TITLE 'VTAM DYNAMIC RECONFIGURATION DECK BUILDER - LOCAL SUBRO&\n               UTINE - L O G M O D E'\n***********************************************************************\n*\n* LOGMODE\n*\n* THIS ROUTINE LOCATES THE 'DLOGMOD=XXXXXXXX' PORTION OF THE LU\n* STATEMENT.\n*\n* IF THERE IS NONE THEN DEFAULT LOGMODE IS APPENDED TO THE END OF\n* THE STATEMENT.\n*\n* ALSO THE RETURN CODE IS SET TO INDICATE WHETHER THE LOGMODE DENOTES\n* AND INTERACTIVE OR BATCH DEVICE.\n*\n* INPUT ARGUMENTS ------------------------------\n*\n*     R3: @LU TYPE RECORD\n*    R14: RETURN ADDRESS\n*\n*\n* OUTPUT ARGUMENTS -----------------------------\n*\n*   DRLM: CONTAINS THE LOGMODE\n*\n*    R15: RETURN CODE:\n*\n*            0=INTERACTIVE DEVICE\n*            4=BATCH DEVICE\n*\n***********************************************************************\n         SPACE 1\nLOGMODE  DS    0H\n         STM   R0,R14,DRRSA             SAVE REGS\n         LR    R4,R3                    COPY @RECORD\n         LA    R14,71-8-4(R4)           ENDING SCAN POSITION\n         LA    R4,14(R4)                BEGINNING SCAN POSITION\nLOG200   EQU   *\n         LA    R4,1(R4)                 BUMP TEXT POINTER\n         CLC   0(8,R4),=C'DLOGMOD='     HIT ?\n         BE    LOG400                   -YES\n         CR    R4,R14                   BEYOND END?\n         BL    LOG200                   -NO, TRY AGAIN\n         SPACE 1\n         TRT   15(71-16,R3),DRTRTBL     FIND THE 1ST BLANK\n         BC    B'0100',LOG300           -YES AND NOT IN THE LAST POS\n         B     LOG600                   RETURN\n         SPACE 1\nLOG300   EQU   *\n         LR    R2,R1                    COPY ADDRESS OF THE BLANK\n         BCTR  R2,0                     AND BACK UP BY ONE\n         CLI   0(R2),C','               A COMMA THERE ?\n         BE    LOG350                   -YES\n         MVI   0(R1),C','               -NO SO PUT ONE\n         LA    R1,1(R1)                 BUMP POINTER\nLOG350   EQU   *\n         MVC   0(8,R1),=C'DLOGMOD='     APPEND THE DEFAULT\n         MVC   8(8,R1),=CL8'&DLOGMOD'     LOGMODE SPECIFICATION\n         MVC   DRLM,=CL8'&DLOGMOD'      FILL IN RETURN PARM LIST\n         B     LOG600                   RETURN\n         SPACE 1\n*  ARGUMENT FOUND - NOW EXTRACT DLOGMOD VALUE AND RETURN\n         SPACE 1\nLOG400   EQU   *\n         LA    R4,8(R4)                 POINT PAST 'DLOGMOD='\n         TRT   1(9,R4),LOGDEL           FIND THE DELIMITER\n         BC    B'1000',LOG600           -NO\n         MVC   DRLM,=CL8' '             CLEAR\n         SR    R1,R4                    LENGTH\n         BCTR  R1,0                     REDUCED FOR MVC\n         EX    R1,LOGMOV                MOVE TO RETURN ARG\n         SPACE 2\nLOG600   EQU   *\n         SR    R15,R15                  RC=0 => INTERACTIVE DEVICE\n         CLI   DRLM,C'T'                LOGMODE START WITH 'T' ?\n         BE    LOGRET                   -YES\n         LA    R15,4                    ASSUME BATCH DEVICE\n         SPACE 1\n* RETURN\n         SPACE 1\nLOGRET   EQU   *\n         LM    R0,R14,DRRSA             RESTORE REGS\n         BR    R14                      RETURN TO CALLER\n         SPACE 2\nLOGMOV   MVC   DRLM(*-*),0(R4)          MOVE ARGUMENT VALUE\n*\nLOGDEL   DC    256X'00'                 FIND DELIMITER TABLE\n         ORG   LOGDEL+C','\n         DC    C','\n         ORG   LOGDEL+C' '\n         DC    C' '\n         ORG\n         SPACE 1\n         LTORG\n         TITLE 'VTAM DYNAMIC RECONFIGURATION DECK BUILDER - LOCAL SUBRO&\n               UTINE - D R @ P U T'\n***********************************************************************\n*\n* DR@PUT\n*\n* PRINT A LINE WITH SOME MINOR EDITING\n*\n* IF THE LINE IS NOT A COMMENT STAETMENT AND THE LAST NON BLANK CHAR\n* IS A ',' THEN PUT A CONTINUATION CHARACTER IN COLUMN 72.\n*\n* INPUT ARGUMENTS ------------------------------\n*\n*     R0: LENGTH OF MESSAGE TO PRINT\n*     R1: ADDRESS OF MESSAGE TO PRINT\n*    R14: RETURN ADDRESS\n*    R15: DCB ADDRESS OR 0 FOR BOTH SYSPRINT AND SYSUT2\n*\n* OUTPUT ARGUMENTS: NONE\n*\n***********************************************************************\n         SPACE 1\nDR@PUT   DS    0H\n         STM   R14,R3,DRRSA             SAVE REGS\n         MVI   DRSYSM1,C' '             CLEAR\n         MVC   DRSYSM1+1(L'DRSYSM1-1),DRSYSM1 OUTPUT BUFFER\n*\n         LR    R2,R0                    COPY LENGTH\n         BCTR  R2,0                     REDUCE FOR MOVE\n         EX    R2,DRPMOVE               MOVE TO PRINT BUFFER\n*\n         CLI   DRSYSM1,C'*'             A COMMENT ?\n         BE    DRP600                   -NO\n*\n         TRT   DRSYSM1+16(72-16),DRTRTBL LOCATE THE NEXT BLANK\n         BCTR  R1,0                     BACK UP THE POINTER BY 1\n         CLI   0(R1),C','               CONTINUATION\n         BNE   DRP600                   -NO\n         MVI   DRSYSM1+71,C'&&'         -YES, FLAG COLUMN 72\n         SPACE 1\n* -- OUTPUT DESTINATION : SYSOUT\n         SPACE 1\nDRP600   EQU   *\n         TM    DROUTOPT,OUTPRT          PRINT ?\n         BNO   DRP700                   -NO\n         PUT   SYSPRINT,DRSYSM\nDRP700   EQU   *\n         SPACE 1\n* -- OUTPUT DESTINATION : DISK\n         SPACE 1\n         TM    DROUTOPT,OUTDISK         DISK  ?\n         BNO   DRP800\n         PUT   SYSUT2,DRSYSM1\n         SPACE 1\nDRP800   EQU   *\n         LH    R15,DRKHLO               BUMP\n         LA    R15,1(R15)                 LINE OUTPUT\n         STH   R15,DRKHLO                 COUNTER\n*\n         LM    R14,R3,DRRSA             RESTORE REGS\n         BR    R14                      RETURN TO CALLER\n         SPACE 1\nDRPMOVE  MVC   DRSYSM1(*-*),0(R1)       MOVE TEXT TO PRINT BUFFER\n         SPACE 1\n         LTORG\n         TITLE 'VTAM DYNAMIC RECONFIGURATION DECK BUILDER - LOCAL SUBRO&\n               UTINE - D R @ W T O'\n***********************************************************************\n*\n* DR@WTO\n*\n* BUILD WTO AND ISSUE\n*\n* INPUT ARGUMENTS ------------------------------\n*\n*     R0: LENGTH OF MESSAGE TO PRINT\n*\n*     R1: ADDRESS OF MESSAGE TO PRINT\n*           R1=0 => GENERATE DELIMITER\n*\n*     R2: ADDRESS OF MESSAGE NUMBER\n*    R14: RETURN ADDRESS\n*\n* OUTPUT ARGUMENTS: NONE\n*\n***********************************************************************\n         SPACE 1\nDR@WTO   DS    0H\n         STM   R14,R3,DRRSA             SAVE REGS\n*  CLEAR WTO BUFFER AREA\n         MVI   DRJLMN,C' '              MESSAGE NUMBER\n         MVC   DRJLMN+1(L'DRJLMN-1),DRJLMN\n*\n         MVI   DRJLMT,C' '              MESSAGE TEXT\n         MVC   DRJLMT+1(L'DRJLMT-1),DRJLMT\n         LTR   R1,R1                    REAL MESSAGE ?\n         BNZ   DRW400                   -YES\n         SPACE 1\n*  BUILD DELIMITER\n         SPACE 1\n         MVC   DRJLMN,=C'---'\n         MVC   DRJLMD,=C'-:-'\n         MVI   DRJLMT,C'-'              SET TEXT\n         MVC   DRJLMT+1(L'DRJLMT-1),DRJLMT  TO DASHES\n         B     DRW800\n         SPACE 2\nDRW400   EQU   *\n         MVC   DRJLMN,0(R2)             MESSAGE NUMBER\n         MVC   DRJLMD,=C' : '\n*\n         LR    R15,R0                   COPY LENGTH\n         BCTR  R15,0                    REDUCE FOR MOVE\n         EX    R15,DRWMOVE              MOVE TO PRINT BUFFER\n*\nDRW800   WTO   MF=(E,DRWTO)\n*\n         LM    R14,R3,DRRSA             RESTORE REGS\n         BR    R14                      RETURN TO CALLER\n         SPACE 1\nDRWMOVE  MVC   DRJLMT(*-*),0(R1)        MOVE TEXT TO WTO BUFFER\n         SPACE 1\nDRWTO    WTO   '                                                       &\n                                         ',ROUTCDE=11,MF=L\n         ORG   DRWTO+4\nDRJLMH   DC    C'DROID'                 JOB LOG MESSAGE HEADER\nDRJLMN   DC    C'12'                    JOB LOG MESSAGE NUMBER\nDRJLMD   DC    C' : '                   JOB LOG MESSAGE DELIMITER\nDRJLMT   DC    CL50'X'                  JOB LOG MESSAGE TEXT\n         ORG\n         LTORG\n         TITLE 'VTAM DYNAMIC RECONFIGURATION DECK BUILDER - LOCAL SUBRO&\n               UTINE - D R @ M C P'\n***********************************************************************\n*\n* DR@MCP\n*\n* MEMBER CLOSE PROCESSING\n*\n* DESCRIPTION:\n*\n* .. CLOSE SYSUT2 FOR QSAM\n*\n* .. UPDATE SPF TYPE DIRECTORY INFORMATION\n*\n* .. FREE SPF EDIT ENQUEUE\n*\n*\n* INPUT ARGUMENTS ------------------------------\n*\n*    R14: RETURN ADDRESS\n*\n* OUTPUT ARGUMENTS: NONE\n*\n***********************************************************************\n         SPACE 1\nDR@MCP   DS    0H\n         STM   R14,R3,DRRSA             SAVE REGS\n*\n* -- CLOSE DATASET FOR QSAM\n*\n         CLOSE (SYSUT2)\n*\n* -- OPEN FOR BPAM\n*\n         OPEN  (SYSUT2A,OUTPUT)\n*\n* -- UPDATE TTR IN DCB VIA FIND\n*\n         FIND  SYSUT2A,DRMEMBER,D\n*\n* -- UPDATE SPF-TYPE DIRECTORY INFO\n*\n         MVC   DRSTMEM,DRMEMBER         MEMBER NAME\n         MVC   DRSTCRD,DRPDATE          CREATE DATE = TODAY'S DATE\n         MVC   DRSTCHD,DRPDATE          CHANGE DATE = TODAY'S DATE\n         TIME\n         STCM  R0,B'1100',DRSTIME       TIME\n         LH    R2,DRKHLO                LINES OUTPUT COUNTER\n         STH   R2,DRSTCLK               AS #CHANGED LINES\n         STH   R2,DRSRILK               AS #INITIAL LINES\n         STH   R2,DRSTMLK               AS #MODIFIED LINES\n         SPACE 1\n         STOW  SYSUT2A,DRSTOW,R\n         @CHECK\n*\n         SR    R0,R0                    RESET\n         STH   R0,DRKHLO                  LINE COUNT\n*\n* -- CLOSE DATASET AS BPAM\n*\n         CLOSE (SYSUT2A)\n*\n* -- RELEASE SPFEDIT ENQUEUE\n*\n         DEQ   (DRMAJOR,DRMINOR,44+8,SYSTEMS)\n         @CHECK\n*\n* -- RETURN TO CALLER\n*\n         LM    R14,R3,DRRSA             RESTORE REGS\n         BR    R14                      RETURN TO CALLER\n         SPACE 2\n*  CONSTANTS AND NON-REENTRANT ETC.\n         SPACE 1\n*  STOW PARAMETER LIST\n         SPACE 1\nDRSTOW   DS    0F\nDRSTMEM  DC    CL8'DR??????'            MEMBER NAME\n         DC    X'000000'                TTR\n         DC    X'0F'\nDRSTDIR  EQU   *\n         DC    AL1(1)                   VERSION\n         DC    AL1(1)                   REVISION\n         DC    AL2(0)                   .RESERVED\nDRSTCRD  DC    XL4'00'                  CREATE DATE\nDRSTCHD  DC    XL4'00'                  CHANGE DATE\nDRSTIME  DC    XL2'1812'                CHANGE TIME\nDRSTCLK  DC    AL2(0)                   #CURRENT LINE KOUNT\nDRSRILK  DC    AL2(0)                   #INITAL LINES\nDRSTMLK  DC    AL2(0)                   #MODIFIED LINES\n         DC    CL10'DRDROID'            LAST PERSON TO UPDATE\n         SPACE 2\n         LTORG\n         EJECT\n***********************************************************************\n* DATASET CONTROL BLOCKS\n***********************************************************************\n         PUSH  PRINT\n         PRINT NOGEN\nSYSPRINT DCB   DDNAME=SYSPRINT,                                        X\n               DSORG=PS,MACRF=PM,                                      X\n               RECFM=FA,BLKSIZE=80,LRECL=80\n         SPACE 2\nSYSUT1   DCB   DDNAME=SYSUT1,DSORG=PS,MACRF=GL,EODAD=H000\n         SPACE 2\nSYSUT2   DCB   DDNAME=SYSUT2,DSORG=PS,MACRF=PM\n         SPACE 2\nSYSUT2A  DCB   DDNAME=SYSUT2,DSORG=PO,MACRF=W\n         SPACE 2\n         POP   PRINT\nDRLUTAB  EQU   *\n         DS    (128*80)C\n         END   DRDROID\n\n//*LKED.DRDROID DD DSN=ASYSJEE.DRDROID,\n//*       UNIT=SYSDA,SPACE=(TRK,(2,,2)),\n//*       DISP=(MOD,DELETE)\n//LKED.SYSLIB  DD DSN=ASYSJEE.LOADLIB,DISP=SHR\n//LKED.SYSLMOD DD DSN=ASYSJEE.LOADLIB,DISP=SHR\n//LKED.SYSIN DD *\n NAME DRDROID(R)\n/*\n//*\n//*\n//DRDROID  EXEC PGM=DRDROID,COND=(0,LT)       ASM.LKED)\n//STEPLIB  DD DSN=ASYSJEE.LOADLIB,DISP=SHR\n//SYSPRINT DD SYSOUT=*\n//SYSUDUMP DD SYSOUT=*\n//SYSUT1   DD DISP=SHR,DSN=SYS4.VTAMLST(N00001)\n//SYSUT2   DD DSN=ASYSJEE.DRDROID,DISP=SHR\n//*           UNIT=SYSDA,VOL=SER=APLTSA,\n//*           DCB=SYS1.MACLIB,\n//*           SPACE=(CYL,(1,,2)),\n//*           DISP=(,CATLG)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ENTER": {"ttr": 3080, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x891\\x8f\\x00\\x891\\x8f\\x108\\x00\\x8a\\x00\\x8a\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-11-14T00:00:00", "modifydate": "1989-11-14T10:38:00", "lines": 138, "newlines": 138, "modlines": 0, "user": "HMDEAN"}, "text": "         MACRO\n&SUBR    ENTER &BASES,&SAVE,&CSECT\n.*   THIS MACRO, USED WITH THE LEAVE MACRO, WILL PERFORM\n.*   STANDARD HOUSEKEEPING FOR A CSECT, INCLUDING SAVEAREA\n.*   CONSTRUCTION AND CHAINING, AND GETTING SOME STORAGE,\n.*   IF THAT IS DESIRED.\n.*   THE LEAVE MACRO WILL FREE THE GOTTEN STORAGE\n.*   THE OPERANDS ARE\n.*       &SUBR    ENTER  &BASES,&SAVE,&CSECT\n.*    WHERE\n.*       &SUBR    IS THE NAME OF THE CSECT\n.*       &BASES   ARE THE BASE REGISTERS FOR THE ROUTINE\n.*       &SAVE    IS THE LABEL FOR A SAVEAREA, OR A SUBPOOL\n.*                AND LENGTH FOR THE GETMAIN\n.*       &CSECT   TO CONTINUE AN EXISTING CSECT WITH ENTRY\n.*                POINT &SUBR\n.*\n.*    EXAMPLES -\n.*               ENTER 13,*\n.*\n.*       THIS WILL GENERATE NON-REENTRANT CODE, USING SAVEAREA\n.*       AS THE SAVE AREA LABEL, AND REGISTER 13 FOR THE BASE\n.*       REGISTER.\n.*\n.*       RENTMOD  ENTER (12,11),(,LDSECT)\n.*\n.*       THIS WILL GENERATE REENTRANT CODE WITH REGISTERS 12 AND\n.*       11 FOR BASE REGISTERS.  A GETMAIN WILL BE DONE FOR THE\n.*       DEFAULT SUBPOOL (0) WITH A LENGTH 'LDSECT'.\n.*\n         GBLC  &LV,&SP\n         LCLA  &K,&N\n         LCLC  &AREA,&B(16),&SUBNAME,&S\n&SUBNAME SETC  '&SUBR'\n         AIF   ('&SUBNAME' NE '').SUBSPEC\n&SUBNAME SETC  'MAIN'         DEFAULT CSECT NAME\n.SUBSPEC AIF   ('&CSECT' EQ '').NOTENT  IS IT AN ENTRY POINT?\n&CSECT   CSECT\n&SUBNAME DS    0F\n         AGO   .CSSPEC\n.NOTENT  ANOP\n&SUBNAME CSECT\n.CSSPEC  ANOP\n         SAVE  (14,12),T,&SUBNAME   SAVE THE REGISTERS\n         AIF   ('&BASES(1)' EQ '15' OR '&BASES' EQ '').R15SET\n         AIF   ('&BASES(1)' EQ '13' AND '&SAVE' NE '').R15SET\n         LR    &BASES(1),15  SET FIRST BASE REG\n.R15SET  CNOP  0,4\n&S       SETC  '&SUBNAME'\n         AIF   (N'&SAVE EQ 2).P4   SUBPOOL, SIZE SPEC?\n         AIF   ('&SAVE' EQ '').P3  NO SAVEAREA - DEFAULT\n&AREA    SETC  '&SAVE'\n         AIF   ('&SAVE' NE '*').P2\n&AREA    SETC  'SAVEAREA'\n.P2      AIF   ('&BASES(1)' NE '13').P4\n&S       SETC  '*'\n         USING &SUBNAME,15\n         ST    14,&AREA+4\n         LA    14,&AREA\n         ST    14,8(13)\n         L     14,&AREA+4\n         ST    13,&AREA+4\n         BAL   13,*+76        SKIP AROUND THE SAVEAREA\n         DROP  15\n         AGO   .P4\n.P3      AIF   ('&BASES(1)' NE '13').P4\n         MNOTE 8,'*** CONTENTS OF REG 13 ARE LOST.  NO SAVE AREA WAS ESX\n               TABLISHED.'\n.P4      AIF   ('&BASES(1)' NE '14' OR '&SAVE' EQ '').P5\n         MNOTE 8,'*** MACRO RESTRICTION - REG 14 MUST NOT BE USED AS THX\n               E FIRST BASE REGISTER IF A SAVE AREA IS USED.'\n.P5      AIF   ('&BASES' EQ '').P9\n&N       SETA  N'&BASES\n.P6      ANOP\n&K       SETA  &K+1\n&B(&K)   SETC  ','.'&BASES(&K)'\n         AIF   (N'&SAVE EQ 1).PE\n         AIF   ('&BASES(&K)' NE '13').P7\n         MNOTE 8,'*** REG 13 MAY NOT BE USED AS A BASE REGISTER FOR REEX\n               NTRANT CODE.'\n         AGO   .P7\n.PE      AIF   ('&BASES(&K+1)' NE '13' OR '&SAVE' EQ '').P7\n         MNOTE 8,'*** WHEN USING A SAVE AREA, REG 13 MAY NOT BE USED ASX\n                A SECONDARY BASE REGISTER.'\n.P7      AIF   ('&BASES(&K+1)' NE '').P6\n         USING &S&B(1)&B(2)&B(3)&B(4)&B(5)&B(6)&B(7)&B(8)&B(9)&B(10)&B(X\n               11)&B(12)&B(13)&B(14)&B(15)&B(16)\n&K       SETA  1\n         AIF   ('&BASES(1)' NE '13' OR '&SAVE' EQ '').P8\n&AREA    DC    18F'0'\n.P8      AIF   (&K GE &N).P10\n         LA    &BASES(&K+1),X'FFF'(&BASES(&K))\n         LA    &BASES(&K+1),1(&BASES(&K+1))\n&K       SETA  &K+1\n         AGO   .P8\n.P9      USING &SUBNAME,15\n.P10     AIF   (N'&SAVE GE 2).P13\n         AIF   ('&SAVE' EQ '' OR '&BASES(1)' EQ '13').P12\n         AIF   ('&SAVE(1,1)' GE '0').P16  NUMERIC MEANS A PASSED AREA\n         ST    14,&AREA+4\n         LA    14,&AREA\n         ST    14,8(13)\n         L     14,&AREA+4\n         ST    13,&AREA+4\n.P11     BAL   13,*+76       SKIP AROUND THE SAVEAREA\n&AREA    DC    18F'0'\n.P12     MEXIT\n.P13     ANOP\n&LV      SETC  '&SAVE(2)'\n&SP      SETC  '0'\n         AIF   ('&SAVE(1)' EQ '').P14\n&SP      SETC  '&SAVE(1)'\n.P14     CNOP  0,4          DO A GETMAIN FOR THE AREA\n         BAL   1,*+8          POINT THE SP AND LV\nENT&SYSNDX DC  AL1(&SP)       SUBPOOL FOR THE GETMAIN\n         DC    AL3(&LV)       LENGTH OF THE GETMAIN\n         L     0,0(1)         GET THE DATA IN REG 1\n         SVC   10             ISSUE THE GETMAIN\n.*                            CHAIN THE SAVEAREAS\n         ST    13,4(1)        PRIOR SAVEAREA ADDRESS TO MINE\n         ST    1,8(13)        MY SAVEAREA ADDRESS TO HIS\n         LR    2,13           KEEP THE SAVEAREA ADDRESS FOR REGS\n         LR    13,1           THIS IS MY SAVEAREA\n         LA    4,12(13)       YES, POINT PAST THE CHAIN\n         L     5,ENT&SYSNDX   GET THE SIZE\n         LA    6,12           MINUS THE CHAIN AREA (12 BYTES )\n         SR    5,6            GIVES THE AMOUNT TO CLEAR\n         SR    7,7            CLEAR THE FROM COUNT AND CLEAR BYTE\n         MVCL  4,6            WHEE, CLEAR IT OUT\n         LM    0,7,20(2)      RESTORE THE ORIGINAL REGISTERS\n         MEXIT\n.P16     L     1,&AREA+0(1)   NUMERIC &SAVE IMPLIES A PASSED SAVEAREA\n         ST    13,4(1)        PRIOR SAVEAREA ADDRESS TO MINE\n         ST    1,8(13)        MY SAVEAREA ADDRESS TO HIS\n         LR    2,13           KEEP THE SAVEAREA ADDRESS FOR REGS\n         LR    13,1           THIS IS MY SAVEAREA\n         LM    0,2,20(2)      RESTORE ORIGINAL REGS\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EPUTL": {"ttr": 3083, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x11\\x00Q\\x01\\x185/\\x01\\x19!O\\x129\\x00\\xcb\\x00\\xcb\\x00\\x01\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.17", "flags": 0, "createdate": "2018-12-18T00:00:00", "modifydate": "2019-08-02T12:39:51", "lines": 203, "newlines": 203, "modlines": 1, "user": "SBGOLOB"}, "text": "EPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&\n               OR'\nEPUTL    CSECT                                              *HMD 10/85*\n         LCLB  &XA                                          *HMD 10/85*\n&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . EPUTL\n*\n*  ALIASES  . . . . . . NONE\n*\n*  DATE WRITTEN . . . . 06/85\n*  UPDATED      . . . . 04/88                                  HD APR88\n*  CLEANED A BIT  . . . 08/17\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*  UPDATER  . . . . . . HOWARD M. DEAN                         HD APR88\n*\n*  ENVIRONMENT  . . . . TSO COMMAND PROCESSOR\n*\n*  PURPOSE:\n*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE\n*\n*\n*  DESCRIPTION:\n*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.\n*    ISSUES SINGLE LINE PUTLINE.\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*\n*  FEATURES:\n*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.\n*\n*  CALLED MODULES:\n*    PUTLINE\n*\n*  ASSUMPTIONS:\n*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE\n*\n*  ABENDS:\n*    POSSIBLE 0CX IF BAD ARGUMENTS\n*\n*  CAVEATS:\n*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB\n*    DID NOT SAVE (14,12) BEFORE R1 WAS MODIFIED.\n*\n*\n*  INPUT ARGUMENTS:\n*    1)  R1 : ADDRESS OF MESSAGE TEXT\n*    2)  R0 : LENGTH OF MESSAGE TEXT\n*    3) R13 : STANDARD OS SAVE AREA\n*    4) R14 : RETURN ADDRESS\n*    5) R15 : ENTRY ADDRESS\n*\n*               ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR\n*\nRCBA     EQU   100                 BAD MESSAGE ADDRESS\nRCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG\n*\nMAXMSG   EQU   255                 MAXIMUM MESSAGE LENGTH\n*\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                   MESSAGE LENGTH AT ENTRY\nR1       EQU   1                   MESSAGE ADDRESS AT ENTRY\nR2       EQU   2                   WORK\nR3       EQU   3                   WORK\nRMA      EQU   4                   @MESSAGE TEXT\nRML      EQU   5                   MESSAGE LENGTH\nRUPT     EQU   6                   @UPT (USER PROFILE TABLE)\nRECT     EQU   7                   @ECT\nR12      EQU   12                  CSECT BASE\nR13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA\nR14      EQU   14                  WORK/LINKAGE\nR15      EQU   15                  WORK/LINKAGE\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJTCB   LIST=YES                                  *HMD 10/85*\n         EJECT                                              *HMD 10/85*\n         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*\n         EJECT\n         IHAPSA   LIST=YES                                     HD APR88\n         EJECT                                                 HD APR88\nPUTLDS   DSECT\n         DS    18F                      OS SAVE AREA\nPUTAAA   EQU   *\nPUTECB   DS    F                        ECB\nPUTIOPL  DS    4F                       IOPLADS\nPUTBLOK  PUTLINE MF=L\nPUTLEN   DS    H                        LENGTH\nPUTZZZ   DS    H                        RESERVED\nPUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA\n         DS    0D\nPUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS\n         EJECT\n***********************************************************************\n*  SET UP LINKAGE\n***********************************************************************\n         SPACE 1\nEPUTL    CSECT\n         AIF  (NOT &XA).X001                                *HMD 10/85*\nEPUTL    AMODE 31\n.X001    ANOP                                               *HMD 10/85*\n         STM   R14,R12,12(R13)    SAVE CALLERS REGS\n         LR    R12,R15            COPY EPA\n         USING EPUTL,R12          ADDRESSABILITY\n         AIF   (NOT &XA).X002                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &\n               LOC=RES,SP=0       RELATIVE TO 16MB LINE\n         AGO   .X003                                        *HMD 10/85*\n.X002    ANOP                                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA\n.X003    ANOP                                               *HMD 10/85*\n         ST    R1,8(,R13)         OUR SAVE AREA POINTER\n         ST    R13,4(,R1)         POINTER TO CALLER'S SAVE AREA\n         LR    R13,R1             @OUR SAVE AREA\n         USING PUTLDS,R13         MAP SA AND WORK AREA\n         L     R14,4(,R13)        POINT TO CALLER'S RSA\n         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN\n         SPACE 2\n***********************************************************************\n*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE\n***********************************************************************\n         SPACE 1\n         LA    R15,RCBA                 RC IF BAD ADDRESS\n         LTR   RMA,R1                   MESSAGE ADDRESS\n         BNP   RETURN                   GOOD ASSUMPTION\n         LA    R15,RCBL                 RC IF BAD LENGTH\n         LTR   RML,R0                   POSITIVE?\n         BNP   RETURN                   -NO\n         C     RML,=A(MAXMSG)           MORE THAN MAX?\n         BH    RETURN                   -YES\n         SPACE 2\n***********************************************************************\n*  BUILD PARAMETER LIST\n***********************************************************************\n         SPACE 1\n         LA    R15,4(,RML)              MESSAGE LENGTH\n         STH   R15,PUTLEN               PLUS HEADER\n         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW\n         BCTR  RML,0                    REDUCE FOR MOVE\n         EX    RML,PUTMOVE\n         EJECT\n***********************************************************************\n*  DIG UP ADDRESS OF UPT AND ECT\n***********************************************************************\n         SPACE 1\n         L     R2,PSATOLD-PSA           @TCB                   HD APR88\n         L     R2,TCBFSA-TCB(,R2)       @1ST PROBLEM PGM SAVE AREA\n         L     R2,24(,R2)               REG1 THAT WAS PASSED TO CP\n         USING CPPL,R2                  MAP CPPL\n         L     RUPT,CPPLUPT             @UPT\n         L     RECT,CPPLECT             @ECT\n         SPACE 2\n***********************************************************************\n*  ISSUE PUTLINE CALL\n***********************************************************************\n         SPACE 1\n         XC    PUTECB,PUTECB            CLEAR ECB\n         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88\n         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &\n               UPT=(RUPT),              @UPT                           &\n               ECT=(RECT),              @ECT                           &\n               ECB=PUTECB,              @ECB                           &\n               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &\n               MF=(E,PUTIOPL)\n         EJECT\n***********************************************************************\n*  RETURN TO CALLER\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         LR    R2,R13                   @OUR SAVE AREA\n         LR    R3,R15                   SAVE RETURN CODE\n         L     R13,4(,R13)              @CALLER'S SAVE AREA\n         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0\n         LR    R15,R3                   RESTORE RC\n         RETURN (14,12),RC=(15)         RESTORE CALLER'S REGS\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND NON-REENTRANT WORK AREAS\n***********************************************************************\n         SPACE 1\nPUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER\n         SPACE 2\n         LTORG\n         SPACE 2\n         END   EPUTL\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EPUTL$": {"ttr": 3332, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00T\\x01\\x054\\x7f\\x01\\x17$o\\x02G\\x00\\x1c\\x00\\x1c\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2005-12-13T00:00:00", "modifydate": "2017-09-03T02:47:54", "lines": 28, "newlines": 28, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=A,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,NOXREF)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.B.ASM(EPUTL)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET,RENT'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETSSI  CB495136\n SETCODE AC(0)\n ENTRY   EPUTL\n NAME    EPUTL(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EPUTLO": {"ttr": 3334, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x891\\x8f\\x00\\x891\\x8f\\x108\\x00\\xc8\\x00\\xc8\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-11-14T00:00:00", "modifydate": "1989-11-14T10:38:00", "lines": 200, "newlines": 200, "modlines": 0, "user": "HMDEAN"}, "text": "EPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&\n               OR'\nEPUTL    CSECT                                              *HMD 10/85*\n         LCLB  &XA                                          *HMD 10/85*\n&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . EPUTL\n*\n*  ALIASES  . . . . . . NONE\n*\n*  DATE WRITTEN . . . . 06/85\n*  UPDATED      . . . . 04/88                                  HD APR88\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88\n*\n*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR\n*\n*  PURPOSE:\n*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE\n*\n*\n*  DESCRIPTION:\n*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.\n*    ISSUES SINGLE LINE PUTLINE.\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*\n*  FEATURES:\n*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.\n*\n*  CALLED MODULES:\n*    PUTLINE\n*\n*  ASSUMPTIONS:\n*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE\n*\n*  ABENDS:\n*    POSSIBLE 0CX IF BAD ARGUEMNTS\n*\n*  CAVEATS:\n*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB\n*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.\n*\n*\n*  INPUT ARGUMENTS:\n*    1)  R1 : ADDRESS OF MESSAGE TEXT\n*    2)  R0 : LENGTH OF MESSAGE TEXT\n*    3) R13 : STANDARD OS SAVE AREA\n*    4) R14 : RETURN ADDRESS\n*    5) R15 : ENTRY ADDRESS\n*\n*               ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR\n*\nRCBA     EQU   100                 BAD MESSAGE ADDRESS\nRCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG\n*\nMAXMSG   EQU   255                 MAXIMUM MESSAGE LENGTH\n*\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                   MESSAGE LENGTH AT ENTRY\nR1       EQU   1                   MESSAGE ADDRESS AT ENTRY\nR2       EQU   2                   WORK\nRMA      EQU   4                   @MESSAGE TEXT\nRML      EQU   5                   MESSAGE LENGTH\nRUPT     EQU   6                   @UPT (USER PROFILE TABLE)\nRECT     EQU   7                   @ECT\nR12      EQU   12                  CSECT BASE\nR13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA\nR14      EQU   14                  WORK/LINKAGE\nR15      EQU   15                  WORK/LINKAGE\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJTCB   LIST=YES                                  *HMD 10/85*\n         EJECT                                              *HMD 10/85*\n         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*\n         EJECT\n         IHAPSA   LIST=YES                                     HD APR88\n         EJECT                                                 HD APR88\nPUTLDS   DSECT\n         DS    18F                      OS SAVE AREA\nPUTAAA   EQU   *\nPUTECB   DS    F                        ECB\nPUTIOPL  DS    4F                       IOPLADS\nPUTBLOK  PUTLINE MF=L\nPUTLEN   DS    H                        LENGTH\nPUTZZZ   DS    H                        RESERVED\nPUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA\nPUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS\n         EJECT\n***********************************************************************\n*  SET UP LINKAGE\n***********************************************************************\n         SPACE 1\nEPUTL    CSECT\n         AIF  (NOT &XA).X001                                *HMD 10/85*\nEPUTL    AMODE 31\n.X001    ANOP                                               *HMD 10/85*\n         STM   14,12,12(13)       SAVE CALLERS REGS\n         LR    R12,R15            COPY EPA\n         USING EPUTL,R12          ADDRESSABILITY\n         AIF   (NOT &XA).X002                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &\n               LOC=RES            RELATIVE TO 16MB LINE\n         AGO   .X003                                        *HMD 10/85*\n.X002    ANOP                                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA\n.X003    ANOP                                               *HMD 10/85*\n         ST    1,8(13)            OUR SAVE AREA POINTER\n         ST    13,4(1)            POINTER TO CALLERS SAVE AREA\n         LR    13,1               @OUR SAVE AREA\n         USING PUTLDS,R13         MAP SA AND WORK AREA\n         L     R14,4(R13)         POINT TO CALLERS RSA\n         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN\n         SPACE 2\n***********************************************************************\n*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE\n***********************************************************************\n         SPACE 1\n         LA    R15,RCBA                 ASSUME BAD ADDRESS\n         LTR   RMA,R1                   MESSAGE ADDRESS\n         BNP   RETURN                   GOOD ASSUMPTION\n         LA    R15,RCBL                 ASSUME BAD LENGTH\n         LTR   RML,R0                   POSITIVE?\n         BNP   RETURN                   -NO\n         C     RML,=A(MAXMSG)           MORE THAN MAX?\n         BH    RETURN                   -YES\n         SPACE 2\n***********************************************************************\n*  BUILD PARAMETER LIST\n***********************************************************************\n         SPACE 1\n         LA    R15,4(RML)               MESSAGE LENGTH\n         STH   R15,PUTLEN                 PLUS HEADER\n         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW\n         BCTR  RML,0                    REDUCE FOR MOVE\n         EX    RML,PUTMOVE\n         EJECT\n***********************************************************************\n*  DIG UP ADDRESS OF UPT AND ECT\n***********************************************************************\n         SPACE 1\n         L     R2,PSATOLD-PSA           @TCB                   HD APR88\n         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA\n         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP\n         USING CPPL,R2                  MAP CPPL\n         L     RUPT,CPPLUPT             @UPT\n         L     RECT,CPPLECT             @ECT\n         SPACE 2\n***********************************************************************\n*  ISSUE PUTLINE CALL\n***********************************************************************\n         SPACE 1\n         XC    PUTECB,PUTECB            CLEAR ECB\n         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88\n         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &\n               UPT=(RUPT),              @UPT                           &\n               ECT=(RECT),              @ECT                           &\n               ECB=PUTECB,              @ECB                           &\n               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &\n               MF=(E,PUTIOPL)\n         EJECT\n***********************************************************************\n*  RETURN TO CALLER\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         LR    2,R13                    @OUR SAVE AREA\n         LR    3,R15                    SAVE RETURN CODE\n         L     R13,4(R13)               @CALLERS SAVE AREA\n         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0\n         LR    R15,3                    RESTORE RC\n         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND NON-REENTRANT WORK AREAS\n***********************************************************************\n         SPACE 1\nPUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER\n         SPACE 2\n         LTORG\n         SPACE 2\n         END   EPUTL\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EPUTL01": {"ttr": 3338, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\t\\x00\\x891\\x8f\\x01\\x10\\x13?\\x18(\\x00\\xc8\\x00\\xc8\\x00\\x13\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1989-11-14T00:00:00", "modifydate": "2010-05-13T18:28:09", "lines": 200, "newlines": 200, "modlines": 19, "user": "SBGOLOB"}, "text": "EPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&\n               OR'\nEPUTL    CSECT                                              *HMD 10/85*\n         LCLB  &XA                                          *HMD 10/85*\n&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . EPUTL\n*\n*  ALIASES  . . . . . . NONE\n*\n*  DATE WRITTEN . . . . 06/85\n*  UPDATED      . . . . 04/88                                  HD APR88\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88\n*\n*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR\n*\n*  PURPOSE:\n*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE\n*\n*\n*  DESCRIPTION:\n*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.\n*    ISSUES SINGLE LINE PUTLINE.\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*\n*  FEATURES:\n*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.\n*\n*  CALLED MODULES:\n*    PUTLINE\n*\n*  ASSUMPTIONS:\n*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE\n*\n*  ABENDS:\n*    POSSIBLE 0CX IF BAD ARGUEMNTS\n*\n*  CAVEATS:\n*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB\n*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.\n*\n*\n*  INPUT ARGUMENTS:\n*    1)  R1 : ADDRESS OF MESSAGE TEXT\n*    2)  R0 : LENGTH OF MESSAGE TEXT\n*    3) R13 : STANDARD OS SAVE AREA\n*    4) R14 : RETURN ADDRESS\n*    5) R15 : ENTRY ADDRESS\n*\n*               ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR\n*\nRCBA     EQU   100                 BAD MESSAGE ADDRESS\nRCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG\n*\nMAXMSG   EQU   255                 MAXIMUM MESSAGE LENGTH     SBG MAY10\n*\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                   MESSAGE LENGTH AT ENTRY\nR1       EQU   1                   MESSAGE ADDRESS AT ENTRY\nR2       EQU   2                   WORK\nRMA      EQU   4                   @MESSAGE TEXT\nRML      EQU   5                   MESSAGE LENGTH\nRUPT     EQU   6                   @UPT (USER PROFILE TABLE)\nRECT     EQU   7                   @ECT\nR12      EQU   12                  CSECT BASE\nR13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA\nR14      EQU   14                  WORK/LINKAGE\nR15      EQU   15                  WORK/LINKAGE\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJTCB   LIST=YES                                  *HMD 10/85*\n         EJECT                                              *HMD 10/85*\n         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*\n         EJECT\n         IHAPSA   LIST=YES                                     HD APR88\n         EJECT                                                 HD APR88\nPUTLDS   DSECT\n         DS    18F                      OS SAVE AREA\nPUTAAA   EQU   *\nPUTECB   DS    F                        ECB\nPUTIOPL  DS    4F                       IOPLADS\nPUTBLOK  PUTLINE MF=L\nPUTLEN   DS    H                        LENGTH\nPUTZZZ   DS    H                        RESERVED\nPUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA\nPUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS\n         EJECT\n***********************************************************************\n*  SET UP LINKAGE\n***********************************************************************\n         SPACE 1\nEPUTL    CSECT\n         AIF  (NOT &XA).X001                                *HMD 10/85*\nEPUTL    AMODE 31\n.X001    ANOP                                               *HMD 10/85*\n         STM   14,12,12(13)       SAVE CALLERS REGS\n         LR    R12,R15            COPY EPA\n         USING EPUTL,R12          ADDRESSABILITY\n         AIF   (NOT &XA).X002                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &\n               LOC=RES            RELATIVE TO 16MB LINE\n         AGO   .X003                                        *HMD 10/85*\n.X002    ANOP                                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA\n.X003    ANOP                                               *HMD 10/85*\n         ST    1,8(13)            OUR SAVE AREA POINTER\n         ST    13,4(1)            POINTER TO CALLERS SAVE AREA\n         LR    13,1               @OUR SAVE AREA\n         USING PUTLDS,R13         MAP SA AND WORK AREA\n         L     R14,4(R13)         POINT TO CALLERS RSA\n         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN\n         SPACE 2\n***********************************************************************\n*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE\n***********************************************************************\n         SPACE 1\n         LA    R15,RCBA                 ASSUME BAD ADDRESS\n         LTR   RMA,R1                   MESSAGE ADDRESS\n         BNP   RETURN                   GOOD ASSUMPTION\n         LA    R15,RCBL                 ASSUME BAD LENGTH\n         LTR   RML,R0                   POSITIVE?\n         BNP   RETURN                   -NO\n         C     RML,=A(MAXMSG)           MORE THAN MAX?\n         BH    RETURN                   -YES\n         SPACE 2\n***********************************************************************\n*  BUILD PARAMETER LIST\n***********************************************************************\n         SPACE 1\n         LA    R15,4(RML)               MESSAGE LENGTH\n         STH   R15,PUTLEN                 PLUS HEADER\n         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW\n         BCTR  RML,0                    REDUCE FOR MOVE\n         EX    RML,PUTMOVE\n         EJECT\n***********************************************************************\n*  DIG UP ADDRESS OF UPT AND ECT\n***********************************************************************\n         SPACE 1\n         L     R2,PSATOLD-PSA           @TCB                   HD APR88\n         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA\n         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP\n         USING CPPL,R2                  MAP CPPL\n         L     RUPT,CPPLUPT             @UPT\n         L     RECT,CPPLECT             @ECT\n         SPACE 2\n***********************************************************************\n*  ISSUE PUTLINE CALL\n***********************************************************************\n         SPACE 1\n         XC    PUTECB,PUTECB            CLEAR ECB\n         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88\n         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &\n               UPT=(RUPT),              @UPT                           &\n               ECT=(RECT),              @ECT                           &\n               ECB=PUTECB,              @ECB                           &\n               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &\n               MF=(E,PUTIOPL)\n         EJECT\n***********************************************************************\n*  RETURN TO CALLER\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         LR    2,R13                    @OUR SAVE AREA\n         LR    3,R15                    SAVE RETURN CODE\n         L     R13,4(R13)               @CALLERS SAVE AREA\n         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0\n         LR    R15,3                    RESTORE RC\n         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND NON-REENTRANT WORK AREAS\n***********************************************************************\n         SPACE 1\nPUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER\n         SPACE 2\n         LTORG\n         SPACE 2\n         END   EPUTL\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "HMDCHRON": {"ttr": 3585, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x891\\x8f\\x00\\x891\\x8f\\x108\\x01\\xbe\\x01\\xbe\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-11-14T00:00:00", "modifydate": "1989-11-14T10:38:00", "lines": 446, "newlines": 446, "modlines": 0, "user": "HMDEAN"}, "text": "HMDC     TITLE 'HMDCHRONO - SUPER TIME-N-DATE ROUTINE'      *HMD 03/85*\nHMDCHRON CSECT                    TIME/DATE SUBROUTINE\n*---------------------------------------------------------------------*\n*---------------------------------------------------------------------*\n**  S U P E R    T I M E  -  A N D  -  D A T E   S U B R O U T I N E **\n**                                                                   **\n**  ON ENTRY TO THIS SUBROUTINE:                            *HMD 03/85*\n**                                                          *HMD 03/85*\n**                                                          *HMD 03/85*\n**  R1 ========> A(DATE) - JULIAN FOUR BYTES 00YYDDDF       *HMD 03/85*\n**                       - GREG   EIGHT BYTES MM/YY/DD      *HMD 03/85*\n**                       - GREG   EIGHT BYTES MM-YY-DD      *HMD 03/85*\n**                       - ZERO   GET DATE FROM SYSTEM      *HMD 03/85*\n**                                                          *HMD 03/85*\n**               A(WORK) - 72 BYTE UNINITIALIZED WORK AREA  *HMD 03/85*\n**                       - FILLED IN BY THIS PROGRAM AND    *HMD 03/85*\n**                         MAPPED BY 'HMDTIME' MACRO        *HMD 03/85*\n**                                                          *HMD 03/85*\n*   UPON EXIT, THE FIELDS DESCRIBED BY THE MACRO 'HMDTIME'  *HMD 03/85*\n*   WILL BE FILLED IN. BASICALLY, THIS IS THE TIME OF DAY   *HMD 03/85*\n*   AND DATE IN VARIOUS FORMATS. YOU CAN ADDRESS THE WORK   *HMD 03/85*\n*   AREA AND ACCESS THE FORMATTED VALUES FOR USE IN YOUR    *HMD 03/85*\n*   PROGRAM.                                                *HMD 03/85*\n*                                                           *HMD 03/85*\n*   THE TIME RETURNED BY THIS PROGRAM IS THE TIME THE       *HMD 03/85*\n*   PROGRAM WAS CALLED AND IS OBTAINED VIA THE 'TIME'       *HMD 03/85*\n*   MACRO.                                                  *HMD 03/85*\n*---------------------------------------------------------------------*\n*---------------------------------------------------------------------*\n         EJECT\n***********************************************************************\n*                                                                     *\n*        REGISTER EQUATES                                             *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*        FIXED POINT REGISTERS                                        *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nR0       EQU   0        *USED BY O.S.\nR1       EQU   1        *USED BY O.S. // ADDRESS OF PARAMETER LIST\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13       *USED BY O.S. // SAVE-AREA ADDRESS\nR14      EQU   14       *USED BY O.S. // RETURN ADDRESS\nR15      EQU   15       *USED BY O.S. // ENTRY-PT ADDR, RETURN CODE\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*        FLOATING POINT REGISTERS                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nF0       EQU   0\nF2       EQU   2\nF4       EQU   4\nF6       EQU   6\n         EJECT\nRNULL    EQU   0                   FOR BALR, ETC\nNULL     EQU   0                   VALUE OF ZERO\nZERO     EQU   0                   ZERO - ZORRO\nONE      EQU   1                   VALUE OF 1\nRPARM    EQU   1                   PARAMETER REGISTER\nRWORK2   EQU   2                   WORK REGISTER\nRWORK3   EQU   3                   WORK REGISTER\nPPARM    EQU   3                   POINTS TO PASSED PARM AREA\nRW4      EQU   4                   WORK REGISTER\nRW5      EQU   5                   WORK REGISTER\nX        EQU   7\nRMNDR    EQU   8\nDVDND    EQU   RMNDR\nBINMTH   EQU   9\nBINYR    EQU   9\nQOT      EQU   9\nNINE     EQU   9                   DISPLACEMENT OF NINE       @HMD78265\nCORR     EQU   11\nRBASE    EQU   12                  BASE REGISTER\nRSAVE    EQU   13                  BASE REGISTER FOR WORKING STORAGE\n*                                                           *HMD 03/85*\nD0       EQU   ZERO                DISPLACEMENT OF ZERO     *HMD 03/85*\nD4       EQU   4                   DISPLACEMENT OF FOUR     *HMD 03/85*\nD8       EQU   8                   DISPLACEMENT OF EIGHT    *HMD 03/85*\nD12      EQU   12                  DISPLACEMENT OF TWELVE   *HMD 03/85*\n*                                                           *HMD 03/85*\nMASK     EQU   15                  ICM MASK                 *HMD 03/85*\n*                                                           *HMD 03/85*\nFXIG     EQU   X'0F'               FOR FIXING SIGN\nGIXF     EQU   X'F0'               FOR FIXING SIGN\nLEAPTM   EQU   X'12'               FOR TESTING LEAP YEAR\nCOLON    EQU   C':'                SEPERATOR\nSPACE    EQU   C' '                SEPERATOR\nDOT      EQU   C'.'                SEPERATOR\nSLASH    EQU   C'/'                SEPERATOR\nDASH     EQU   C'-'                SEPERATOR\nCOMMA    EQU   C','                SEPERATOR\n         EJECT\n         SAVE  (14,12),T,HMDCHRON_&SYSDATE._&SYSTIME._HOWARD_M_DEAN\n         BALR  RBASE,RNULL          ESTABLISH ADDRESSIBILITY\n         USING *,RBASE\n         USING TIMESTOR,RSAVE       ADDRESS WORKING STORAGE\n         USING HMDTIME,PPARM        ADDRESS THE PARAMETER AREA\n         LR    PPARM,RPARM          SAVE PARM ADDRESS       *HMD 03/85*\n         GETMAIN R,LV=HMDLV,SP=NINE GET STORAGE IN SUBPOOL NINE\n         ST    RSAVE,4(,RPARM)      SAVE R13\n         ST    RPARM,8(,RSAVE)      CHAIN BACKWARDS TOO\n         LR    RSAVE,RPARM          GET SAVE AREA ADDRESS\n         MVC   PARMAP(PARMLEN),D0(PPARM)                    *HMD 03/85*\n*                                   SAVE PASSED PARMS       *HMD 03/85*\n         L     PPARM,AWORK          ADDRESS THE WORK AREA   *HMD 03/85*\n         SPACE 1                                            *HMD 03/85*\n         TIME  DEC                  GET DATE/TOD            *HMD 03/85*\n         SPACE 1                                            *HMD 03/85*\n         ST    R0,TIME              SAVE TIME VALUE         *HMD 03/85*\n         ST    R1,DATE              SAVE DATE VALUE         *HMD 03/85*\n         EJECT                                              *HMD 03/85*\n*************************************************************HMD 03/85*\n*  CHECK THE FORMAT OF THE DATE AND CALL JULIAN OR GREGOR   *HMD 03/85*\n*                                                           *HMD 03/85*\n*  IF DATE IS 00YYDDDF THEN LEAVE AS IS                     *HMD 03/85*\n*  OTHERWISE IF DATE IS MM/DD/YY THEN                       *HMD 03/85*\n*  CONVERT TO 6 BYTE YYMMDD FORMAT AND PASS TO JULIAN       *HMD 03/85*\n*                                                           *HMD 03/85*\n*  WORKING DATE WILL ALWAYS BE JULIAN                       *HMD 03/85*\n*************************************************************HMD 03/85*\n         SPACE 1                                            *HMD 03/85*\n         L     RWORK2,ADATE       GET THE DATE ADDRESS      *HMD 03/85*\n         CLC   KF0,D0(RWORK2)     NULL WORD?                *HMD 03/85*\n         BE    FORMDTIM           YES, USE TODAY'S DATE     *HMD 03/85*\n         SPACE 1                                            *HMD 03/85*\n         MVC   DATE,0(RWORK2)     ASSUME JULIAN DATE        *HMD 03/85*\n         CLI   2(RWORK2),DASH     IS THIS A JULIAN DATE?    *HMD 03/85*\n         BE    CALLER             NO, MUST BE GREGORIAN     *HMD 03/85*\n         CLI   2(RWORK2),SLASH    TRY THE SLASH             *HMD 03/85*\n         BNE   FORMDTIM           NOPE, MUST BE JULIAN NOW  *HMD 03/85*\n         SPACE 1                                            *HMD 03/85*\nCALLER   DS    0H                                           *HMD 03/85*\n         SPACE 1                                            *HMD 03/85*\n         MVC   DATEG,0(RWORK2)    MOVE IN THE GREG DATE     *HMD 03/85*\n         MVC   DATEWORK,FABTAB    MOVE IN SNEEKY TABLE      *HMD 03/85*\n         TR    DATEWORK,DATEG-1   SNEEKY, AREN'T I?         *HMD 03/85*\n         SPACE 1                                            *HMD 03/85*\n         MVC   GDATE,DATEWORK     EASE IN THE DATE          *HMD 03/85*\n         XC    JDATE,JDATE        CLEAR JULIAN DATE         *HMD 03/85*\n         SPACE 1                                            *HMD 03/85*\nREACHOUT CALL  JULIAN,(GDATE,JDATE),VL,MF=(E,CALLMAC)       *HMD 03/85*\n         SPACE 1                                            *HMD 03/85*\n         MVC   DATE,JDATE         GET JULIAN DATE           *HMD 03/85*\n         EJECT                                              *HMD 03/85*\n*                                                           *HMD 03/85*\n* FORMAT THE TIME OF DAY                                    *HMD 03/85*\n*                                                           *HMD 03/85*\nFORMDTIM EQU   *\n         SPACE 1                                            *HMD 03/85*\n         TIME  BIN                GET THE SYSTEM TIME       *HMD 03/85*\n         LR    R9,R0              GET THE CURRENT TIME\n         SPACE 1                                            *HMD 03/85*\n         SR    R8,R8              CLEAR FOR DIVIDE\n         D     R8,KF100           GET THE TIME IN SECONDS\n         CVD   R8,DBLWORK         PACK IT IN\n         OI    DBLWORK+7,FXIG     FIX SIGN\n         UNPK  TIMEHUNS(2),DBLWORK(8)  MAKE IT READABLE\n         OI    TIMEHUNS+1,GIXF    FIX SIGN\n         MVI   COLON1,COLON       MOVE IN SEPARATOR\n         SR    R8,R8              CLEAR FOR DIVIDE\n         D     R8,KF60            SECONDS\n         CVD   R8,DBLWORK         PACK IT IN\n         OI    DBLWORK+7,FXIG     FIX SIGN\n         UNPK  TIMESECS(2),DBLWORK(8)  MAKE IT READABLE\n         OI    TIMESECS+1,GIXF    FIX SIGN\n         MVI   COLON2,COLON       INSERT SEPARATOR\n         SR    R8,R8              CLEAR FOR DIVIDE\n         D     R8,KF60            MINUTES\n         CVD   R8,DBLWORK         PACK IT IN\n         OI    DBLWORK+7,FXIG     FIX SIGN\n         UNPK  TIMEMINS(2),DBLWORK(8)  MAKE IT READABLE\n         OI    TIMEMINS+1,GIXF     FIX SIGN\n         MVI   COLON3,COLON       INSERT SEPARATOR\n         CVD   R9,DBLWORK         GET HOURS\n         OI    DBLWORK+7,FXIG     FIX SIGN\n         UNPK  TIMEHRS(2),DBLWORK(8) MAKE IT READABLE\n         OI    TIMEHRS+1,GIXF     FIX SIGN\n         MVC   HMDTIMER,BIGTIME   MOVE TIME TO PARM AREA\n         EJECT\n*\n*   GET TIME IN FORM HH.MM.SS  PM/AM\n*\nTIMEDEC  DS    0H\n         MVC   PATTERN,PATURN     MOVE EDIT PATTERN\n         LA    X,INDIC            LOAD AM/PM ADDRESS\n         OI    TIME+3,FXIG        FIX SIGN\n         CP    TIME,PTERM         IS IT AM OR PM?\n         BC    4,AM               IF LT NOON INDICATE AM\n         CP    TIME,PTERM+4(4)    COMPARE TO 1:00 PM\n         BC    11,*+10            IF HIGH OR = SUB 12 FROM TIME\nNOON     AP    TIME,PTERM(4)      ADD 12 TO HOUR\nPM       SP    TIME,PTERM(4)      SUBTRACT 12 FROM HOUR\n         LA    X,3(X)             INDICATE PM\nAM       CLI   TIME,ZERO          IS IS BETWEEN MIDNITE AND 1 AM?\n         BNE   EDIT               NO, LEAVE TIME ALONE\n         MVI   TIME,X'12'         OTHERWISE INDICATE 12:00 AM\nEDIT     ED    PATTERN,TIME       MAKE IT READABLE\n         MVC   PATTERN+9(3),NULL(X)  MOVE IN AM/PM INDICATOR\n         MVC   HMDTIMED(11),PATTERN+1  MOVE LINE TO OUTPUT BUFFER\n         EJECT\n*\n*  FORMAT THE DATE IN VARIOUS WAYS\n*\nFORMDAT  EQU   *\n         L     R1,DATE        GET TODAYS DATE\n         MVC   TEMP2(2),DATE+2  SAVE DAYS DIGITS\n         MVC   WORKWORD,DATE    MOVE DATE TO WORKAREA\n         MVO   WORKWORD+1(3),WORKWORD(2)  MAKE 00YYDDDS INTO 00000YYS\n         UNPK  YEAR(2),WORKWORD+2(2)  MAKE YEAR READABLE\n         OI    YEAR+1,GIXF        FIX SIGN\n         SR    X,X            CLEAR MONTH REG.\n         ST    X,DBLWORK      CNVT YEAR TO BINARY\n         MVC   DBLWORK+4(4),WORKWORD\n         CVB   R0,DBLWORK     CONVERT IT\n         L     R9,MONMSK+8    GET MASK\n         LA    R14,3          SET OUTER LOOP\n         TM    DATE+1,ONE     IF ODD, NOT LEAP YEAR\n         BO    MON1X                                        *HMD 02/80*\n         TM    DATE+1,LEAPTM  VALID TILL 1999               *HMD 02/80*\n         BM    MON1X          NOT A LEAP YEAR               *HMD 02/80*\n         O     R9,FEBFIX\nMON1X    ST    X,DBLWORK+4    CLEAR FOR CVB\n         MVC   DBLWORK+6(2),TEMP2\n         CVB   R0,DBLWORK\n         LA    X,ONE\n         B     MON2X\nMON1     SLL   R14,2\n         L     R9,MONMSK-4(R14)   SUBTRACT CODE\n         SRL   R14,2          BACK TO ORIGINAL\nMON2X    LA    R15,4          SET INNER LOOP\nMON2     SR    R8,R8          CLEAR SUBTRACT REG\n         SLDL  R8,8           GET NEXT MONTHS LENGTH\n         SR    R0,R8          SUB MON LENGTH FROM DATA\n         BC    12,MONOVR      OVERDRAW\n         LA    X,ONE(X)       INCR MONTH NUMBER\n         BCT   R15,MON2       CLOSE INNER LOOP\n         BCT   R14,MON1       CLOSE OUTER LOOP\n         B     MONOUT\nMONOVR   AR    R0,R8\nMONOUT   CVD   R0,DBLWORK\n         UNPK  DAY(2),DBLWORK+6(2)  GET DAY OF WEEK\n         OI    DAY+1,GIXF     FIX SIGN\n         LR    R14,X          GET MONTH NUMBER\n         MH    R14,KH9        MULTIPLY BY NINE\n         LA    R15,MONTAB-9   SET FOR INDEX INTO TABLE\n         AR    R14,R15        INDEX MONTH NAME\n         MVC   HMDDAYYR(3),NULL(R14) MOVE IN SHORT MONTH NAME\n         MVC   HMDMONTH,NULL(R14)  MOVE IN MONTH NAME\n         MVI   HMDDAYYR+3,SPACE    MOVE IN SPACE\n         MVC   HMDDAYYR+4(2),DAY   MOVE IN DAY\n         MVI   HMDDAYYR+6,COMMA    MOVE IN COMMA\n         MVC   HMDDAYYR+7(2),CENTURY  MOVE IN YEAR\n         MVC   HMDDAYYR+9(2),YEAR  FINISH MOVING IN YEAR\n         CVD   X,DBLWORK           PREPARE TO GET MONTH\n         UNPK  MONTH(2),DBLWORK+6(2) MAKE IT READABLE\n         OI    MONTH+1,GIXF       FIX SIGN\n         MVC   HMDENGDT(2),MONTH  MOVE IN MONTH VALUE\n         MVI   HMDENGDT+2,SLASH   SEPERATOR\n         MVC   HMDENGDT+3(2),DAY  MOVE IN DAY VALUE\n         MVI   HMDENGDT+5,SLASH   SEPERATOR\n         MVC   HMDENGDT+6(2),YEAR  MOVE IN YEAR VALUE\n         EJECT\n*\n*  THIS WILL GET YOU THE DAY OF THE WEEK\n*\nDAYOWK   DS    0H\n         LR    R14,R0\n         XC    DECDATE(4),DECDATE\n         MVC   INMY(4),HMDDAYYR+7\n         MVC   INMTH,MONTH\n         MVC   INDAY,DAY\n         PACK  DECMY,INDAY\n         CVB   CORR,DECDATE\n         PACK  DECMTH,INMTH\n         CVB   BINMTH,DECDATE\n         IC    BINMTH,FFTBL-1(BINMTH)\n         AR    CORR,BINMTH\n         PACK  DECMY,INMY\n         SP    DECMY,P3\n         OI    YRSIGN,FXIG\n         ZAP   DECMY,DECYR\n         CVB   BINYR,DECDATE\n         SR    DVDND,DVDND\n         LA    X,3\n         D     DVDND,KF100\n* CENTURY MOD 4\n         NR    QOT,X\n         NR    X,RMNDR\n         SRA   RMNDR,2\n         AR    QOT,RMNDR\n         MH    QOT,KH5\n         AR    CORR,QOT\n         AR    CORR,X\n         SR    CORR-1,CORR-1\n         D     CORR-1,KF7\n         LR    R14,CORR-1\n         STH   R14,HMDDAYNO       SAVE ORGIN ZERO DAY NMBR  *HMD 03/85*\n         LA    R15,DAYTAB         INDEX                     *HMD 03/85*\n         MH    R14,KH9               INTO                   *HMD 03/85*\n         AR    R14,R15                  THE TABLE           *HMD 03/85*\n         MVC   HMDDAYNM,0(R14)\n         LH    R14,HMDDAYNO       MAKE IT ORIGIN ONE        *HMD 03/85*\n         AH    R14,KH1                                      *HMD 03/85*\n         STH   R14,HMDDAYNO       SAVE ORIGIN ONE DAY NMBR  *HMD 03/85*\n         MVC   HMDJULDT(2),YEAR\n         MVI   HMDJULDT+2,DOT\n         UNPK  HMDJULDT+3(3),TEMP2(2)\n         OI    HMDJULDT+5,GIXF\n         EJECT\n*\n*  ALL DONE...GO BACK\n*\nEXIT     DS    0H                 WE'RE DONE FINALLY\n         LR    RPARM,RSAVE\n         L     RSAVE,4(,RSAVE)\n         FREEMAIN R,LV=HMDLV,A=(RPARM),SP=NINE\n         RETURN (14,12),T,RC=0\n         EJECT\n*\n*  CONSTANTS\n*\nKF100    DC    F'100'             CONSTANT OF 100\nKF60     DC    F'60'              CONSTANT OF 60\nKF7      DC    F'7'               CONSTANT OF 7\nKF0      DC    F'0'               CONSTANT OF ZERO          *HMD 03/85*\nKH1      DC    H'1'               CONSTANT OF ONE           *HMD 03/85*\nKH5      DC    H'5'               CONSTANT OF 5\nKH9      DC    H'9'               CONSTANT OF 9\nP3       DC    P'3'               PACKED CONSTANT OF 3\nPATURN   DC    X'4020217A20207A2020'   TO EDIT TIME\nINDIC    DC    C' AM'             MORNING\n         DC    C' PM'             NOON OR NIGHT\nCENTURY  DC    C'19'              CENTURY (GOOD TILL YEAR 2000)\n         DS    0F                 ALIGN TO FULLWORD\nPTERM    DC    X'1200000F'        SUBTRACTED FROM TIME IF AFTERNOON\n         DC    X'1300000F'        1300 O'CLOCK\nMONMSK   DC    X'1E1F1E1F1F1E1F1F1F1C1F1E'\nFFTBL    DC    AL1(0,3,2,5,0,3,5,1,4,6,2,4)  FUDGE FACTOR TABLE\nFEBFIX   DC    A(X'00010000') TO FIX LEAP YEARS\n* TRICKY TRANSLATE TABLE                                    *HMD 03/85*\nFABTAB   DC    X'0708010204050303'                          *HMD 03/85*\n         EJECT\n*\n*   DAY TABLE\n*\nDAYTAB   DC    CL9'SUNDAY'\n         DC    CL9'MONDAY'\n         DC    CL9'TUESDAY'\n         DC    CL9'WEDNESDAY'\n         DC    CL9'THURSDAY'\n         DC    CL9'FRIDAY'\n         DC    CL9'SATURDAY'\n         EJECT\n*\n*  MONTH TABLE\n*\nMONTAB   DC    CL9'JANUARY'\n         DC    CL9'FEBRUARY'\n         DC    CL9'MARCH'\n         DC    CL9'APRIL'\n         DC    CL9'MAY'\n         DC    CL9'JUNE'\n         DC    CL9'JULY'\n         DC    CL9'AUGUST'\n         DC    CL9'SEPTEMBER'\n         DC    CL9'OCTOBER'\n         DC    CL9'NOVEMBER'\n         DC    CL9'DECEMBER'\n         TITLE 'STORAGE MAPS FOR HMDCHRON'\nTIMESTOR DSECT                    WORKING STORAGE FOR HMDCHRON\nSAVEAREA DS    18F                OS/VS STANDARD SAVE AREA\nTIME     DS    F                  TIME OF DAY\nDATE     DS    F                  DATE (JULIAN PACKED)\nDATEG    DS    CL8                DATE (GREGORIAN MM/DD/YY) *HMD 03/85*\n*                                                           *HMD 03/85*\nDATEWORK DS    CL8                WORK AREA FOR GREG DATE   *HMD 03/85*\n*                                                           *HMD 03/85*\n* PASSED PARM SAVE AREA                                     *HMD 03/85*\n*                                                           *HMD 03/85*\nPARMAP   DS    0A                 PASSED PARMS              *HMD 03/85*\nADATE    DS    A                  ADDRESS OF DATE VALUE     *HMD 03/85*\nAWORK    DS    A                  ADDRESS OF 'HMDTIME' AREA *HMD 03/85*\nPARMLEN  EQU   *-PARMAP           TOTAL PARM LENGTH         *HMD 03/85*\n*                                                           *HMD 03/85*\n*  PARAMETER LIST FOR JULGREG SUBROUTINE                    *HMD 03/85*\n*                                                           *HMD 03/85*\nCALLMAC  CALL  ,(NULL,NULL),MF=L                            *HMD 03/85*\n*                                                           *HMD 03/85*\n*                                                           *HMD 03/85*\nJDATE    DS    F                  JULIAN DATE WORK AREA     *HMD 03/85*\nGDATE    DS    CL6                YYMMDD - GREGORIAN DATE   *HMD 03/85*\n*                                                           *HMD 03/85*\nWORKWORD DS    F                  A WORD TO WORK WITH\nDBLWORK  DS    D                  A DOUBLE-WORD TO WORK WITH\n*                                                           *HMD 03/85*\nBIGTIME  DS    0CL11              HH.MM.SS.TH - TIME OF DAY\nTIMEHRS  DS    CL2                HH PART OF ABOVE\nCOLON1   DS    C                  COLON\nTIMEMINS DS    CL2                MM PART OF ABOVE\nCOLON2   DS    C                  COLON\nTIMESECS DS    CL2                SS PART OF ABOVE\nCOLON3   DS    C                  COLON\nTIMEHUNS DS    CL2                HH PART OF ABOVE\n*                                                           *HMD 03/85*\nPATTERN  DS    CL9                FOR EDITING TIME\nAMPM     DS    CL3                AM/PM INDICATOR\nTEMP2    DS    XL4                TEMPORARY STORAGE AREA\nYEAR     DS    CL2                CURRENT YEAR\nMONTH    DS    CL2                MONTH NUMBER\nDAY      DS    CL2                DAY NUMBER\nALIGN    DS    0D                 ALIGN TO DOUBLEWORD\nDECDATE  DS    0PL8               WORK AREA\n         DS    4XL1\nDECMY    DS    0PL4               WORK AREA\nDECYR    DS    PL3\n         ORG   DECYR+2            OVERLAY STRUCTURE\nDECMTH   DS    0PL2\nYRSIGN   DS    PL1\n         DS    PL1\nINPUT    DS    0F             DSECT FOR CRAZY DAY OF WEEK CODE\nDAYY     DS    0ZL1\nDATEE    DS    0ZL8\nINMY     DS    0ZL6\n         DS    ZL4\nINMTH    DS    ZL2\nINDAY    DS    ZL2\nHMDLV    EQU   ((*-TIMESTOR+7)/8)*8  ROUND LENGTH TO DOUBLEWORD\n         EJECT\n         HMDTIME  ,               RETURN AREA FOR TIME OF DAY\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "HMDTIME": {"ttr": 3593, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x891\\x8f\\x00\\x891\\x8f\\x108\\x00/\\x00/\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-11-14T00:00:00", "modifydate": "1989-11-14T10:38:00", "lines": 47, "newlines": 47, "modlines": 0, "user": "HMDEAN"}, "text": "         MACRO\n&NAME    HMDTIME &DSECT=YES\n         LCLB  &B\n&B       SETB  ('&NAME' EQ '')\n         AIF   ('&DSECT' EQ 'YES').DS1\n         AIF   (&B).DS1A\n&NAME    DS    0CL72              AREA RETURNED BY HMDCHRON\n         AGO   .DS2\n.DS1A    ANOP\nHMDTIME  DS    0CL72              AREA RETURNED BY HMDCHRON\n         AGO   .DS2\n.DS1     ANOP\n         AIF   (&B).DS2A\n&NAME    DSECT                    MAP OF RETURN AREA OF TIME SUBRTN\n         AGO   .DS2\n.DS2A    ANOP\nHMDTIME  DSECT                    MAP OF RETURN AREA OF TIME SUBRTN\n.DS2     ANOP\n*******************************************************************\n** THIS 72 BYTE AREA MAPS THE RETURN AREA FOR THE 'HMDCHRON'     **\n** SUBROUTINE. THE TIME OF DAY AND DATE IS RETURNED AS MAPPED.   **\n** A FULLWORD DATE FIELD CAN BE PASSED TO THE ROUTINE AND THAT   **\n** VALUE WILL BE USED IN THE CALCULATIONS. IF ZEROED, THE        **\n** CURRENT DATE (VIA SVC 11)  WILL BE USED IN THE COMPUTATIONS.  **\n** THE ADDRESS OF THIS AREA IS IN THE SECOND WORD OF THE PLIST.  **\n*******************************************************************\nHMDJULDT DS    CL6                JULIAN DATE (FORM 'YY.DDD')\nHMDENGDT DS    CL8                GREGORIAN DATE (FORM MM/DD/YY)\nHMDMONTH DS    CL9                MONTH NAME\nHMDDAYYR DS    CL11               DATE IN FORM MMM DD,YYYY\nHMDDAYNO DS    H                  HALF WORD DAY NUMBER\nHMDDAYNM DS    CL9                DAY OF THE WEEK\nHMDTIMER DS    CL11               TIME OF DAY (24 HR FORM HH.MM.SS.HH)\nHMDTIMED DS    CL8                TIME OF DAY (12 HR FORM HH.MM.SS)\nHMDAMPM  DS    CL3                AM/PM INDICATOR (' AM' OR ' PM')\n         AIF   (&B).DS3\nHMDPAD   DS    CL(72-(*-&NAME))   PAD TO 72 BYTES\n         AGO   .DS4\n.DS3     ANOP\nHMDPAD   DS    CL(72-(*-HMDTIME)) PAD TO 72 BYTES\n.DS4     ANOP\n         AIF   (&B).DS5\nHMDLENTH EQU   ((*-&NAME+7)/8)*8\n         AGO   .END\n.DS5     ANOP\nHMDLENTH EQU   ((*-HMDTIME+7)/8)*8\n.END     MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "HTIME": {"ttr": 3595, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x891\\x8f\\x00\\x891\\x8f\\x108\\x00\\xa4\\x00\\xa4\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-11-14T00:00:00", "modifydate": "1989-11-14T10:38:00", "lines": 164, "newlines": 164, "modlines": 0, "user": "HMDEAN"}, "text": "HTIM     TITLE 'DISPLAY THE TIME OF DAY AND DATE FOR TSO'\n***********************************************************************\n*                                                                     *\n* MODULE NAME = HTIME                                                 *\n*                                                                     *\n* STATUS = COMMAND PROCESSOR                                          *\n*                                                                     *\n* AUTHOR = HOWARD M. DEAN                                             *\n*          SYNTEX USA M/S A5-5                                        *\n*          3401 HILLVIEW AVENUE                                       *\n*          PALO ALTO, CA 94303                                        *\n*          (415) 852-1792\n*                                                                     *\n* FUNCTION = PUT OUT AN INFORMATIONAL MESSAGE INDICATING THE DATE     *\n*            AND TIME OF DAY VIA THE PUTLINE FACILITY OF TSO.         *\n*                                                                     *\n* ENTRY POINTS = HTIME                                                *\n*                                                                     *\n* EXIT NORMAL =  EXIT TO MVS IS ALWAYS WITH A RETURN CODE OF ZERO     *\n*                                                                     *\n* EXIT ERROR = NO ERROR EXIT POINTS                                   *\n*                                                                     *\n* RESTRICTIONS = NONE                                                 *\n*                                                                     *\n* REGISTER-CONVENTIONS =                                              *\n*                                                                     *\n*  REGISTER 0: USED BY SYSTEM - UNPREDICTABLE                         *\n*  REGISTER 1: PARAMETER REGISTER                                     *\n*              USED BY SYSTEM AND SUBROUTINES - UNPREDICTABLE         *\n*                                                                     *\n*  REGISTERS 2-12: WORK REGISTERS AVAILABLE FOR USE BY PROGRAM        *\n*  REGISTER  13 ADDRESS OF AN 18 WORD SAVE AREA                       *\n*               AND POINTER TO WORK AREA/TSO DSECTS                   *\n*  REGISTER  14 RETURN ADDRESS                                        *\n*  REGISTER  15 ENTRY POINT OF HTIME                                  *\n*                                                                     *\n* ATTRIBUTES -  HTIME IS REENTERABLE AND REFRESHABLE                  *\n*                                                                     *\n* MACROS = SAVE, RETURN, GETMAIN, FREEMAIN, CALL, REGS,               *\n*          LUSE, LDROP, CPPL, IOPL, TSOENTER, TSOLEAVE                *\n*                                                                     *\n* EXTERNAL                                                            *\n*    ROUTINES =   HMDCHRON (LINKED WITH PROGRAM)                      *\n*                 IKJPUTL  (PUTLINE SUBROUTINE VIA CVT)               *\n*                                                                     *\n* INSTALLED 05/28/85 - HOWARD M. DEAN                                 *\n***********************************************************************\nHTIME    TSOENTER  PL=(CPPL,IO),REGS=YES,WORK=WORKLEN\n         SPACE 2\n         LA    R0,TSOUSER          R0 -> USER AREA\n         LA    R1,WORKLEN          R1 = LENGTH OF AREA\n         SR    R15,R15             R15 = 0\n         MVCL  R0,R14              CLEAR WORKAREA\n         SPACE 2\n         MVC   OUTONE(ONEMSGL),ONEMSG\n         MVC   OUTTWO(TWOMSGL),TWOMSG\n         MVC   OLD,=F'1'           ONE MESSAGE SEGMENT\n         SPACE 1\n         CALL  HMDCHRON,(TODAY,HMDTIME),VL,MF=(E,CALLEX)\n         SPACE 1\n         MVC   ONEJUL(L'HMDJULDT),HMDJULDT\n         MVC   ONETIM(L'HMDTIMER),HMDTIMER\n         SPACE 2\n         MVC   TWODAY(L'HMDDAYNM),HMDDAYNM\n         MVC   TWODATE(L'HMDDAYYR),HMDDAYYR\n         MVC   TWOTIME(11),HMDTIMED\n         SPACE 1\n         LA    R1,OUTONE            PUT OUT FIRST MESSAGE\n         BAL   R14,PUTOUT           CALL SUBROUTINE\n         LA    R1,OUTTWO            PUT OUT SECOND MESSAGE\n         BAL   R14,PUTOUT           CALL SUBROUTINE\n         B     EOJ                  RETURN TO MVS\n         EJECT\nPUTOUT   DS    0H                 PUTLINE SUBROUTINE\n         ST    R14,SAVELINK       SAVE LINK REGISTER\n         ST    R1,OLDADDR         SAVE MESSAGE ADDRESS\n         XC    PTPB(PTPBLEN),PTPB CLEAR THE PARM BLOCK\n         XC    TSOECB,TSOECB      CLEAR THE EVENT CONTROL BLOCK\n         SPACE 2\n         PUTLINE PARM=PTPB,OUTPUT=(OLD,TERM,SINGLE,INFOR),             X\n               MF=(E,IOPL)\n         SPACE 2\n         L     R14,SAVELINK       RETSORE LINK REGISTER\n         BR    R14                RETURN TO CALLER\n         EJECT\nEOJ      TSOLEAVE ISN=LTORG,RETCODE=0\n         SPACE 2\n*\n* PROGRAM CONSTANTS\n*\nONEMSG   DS    0C\n         DC    AL2(ONEMSGL),AL2(00)\n         DC    C'TSO036I '\n         DC    C'DATE='\n         DC    C'XX.XXX'\n         DC    C'      TIME='\n         DC    C'XX:XX:XX:XX'\nONEMSGL  EQU   *-ONEMSG\n         SPACE 2\nTWOMSG   DS    0C\n         DC    AL2(TWOMSGL),AL2(00)\n         DC    C'TSO037I '\n         DC    C'WEDNESDAY'       NAME OF DAY\n         DC    C' '\n         DC    C'XXXXXXXXXXX'     DATE MMM DD,YYYY\n         DC    C' '\n         DC    C'XXXXXXXXXXX'     XX:XX:XX  AM/PM\nTWOMSGL  EQU   *-TWOMSG\n         EJECT\nTSODSECT DSECT\n*\n* LIST FORM MACRO INSTRUCTIONS\n*\nPTPB     PUTLINE MF=L             PUTLINE MACRO - LIST FORM\nPTPBLEN  EQU   *-PTPB\n         SPACE 2\nCALLEX   CALL  ,(0,0),MF=L        CALL MACRO - LIST FORM\n         SPACE 2\n*\n* PROGRAM VARIABLES\n*\nOLD      DS    F                  NUMBER OF MESSAGE SEGMENTS\nOLDADDR  DS    A                  ADDRESS OF FIRST SEGMENT\n         SPACE 2\nSAVELINK DS    F                  R14 LINK REGISTER SAVE AREA\n         SPACE 1\nTODAY    DS    F                  TODAY'S DATE\nHMDTIME  DS    0CL72              AREA RETURNED BY HMDCHRON\n*******************************************************************\n** THIS 72 BYTE AREA MAPS THE RETURN AREA FOR THE 'HMDCHRON'     **\n** SUBROUTINE. THE TIME OF DAY AND DATE IS RETURNED AS MAPPED.   **\n** A FULLWORD DATE FIELD CAN BE PASSED TO THE ROUTINE AND THAT   **\n** VALUE WILL BE USED IN THE CALCULATIONS. IF ZEROED, THE        **\n** CURRENT DATE (VIA SVC 11)  WILL BE USED IN THE COMPUTATIONS.  **\n** THE ADDRESS OF THIS AREA IS IN THE SECOND WORD OF THE PLIST.  **\n*******************************************************************\nHMDJULDT DS    CL6                JULIAN DATE (FORM 'YY.DDD')\nHMDENGDT DS    CL8                GREGORIAN DATE (FORM MM/DD/YY)\nHMDMONTH DS    CL9                MONTH NAME\nHMDDAYYR DS    CL11               DATE IN FORM MMM DD,YYYY\nHMDDAYNO DS    H                  HALF WORD DAY NUMBER\nHMDDAYNM DS    CL9                DAY OF THE WEEK\nHMDTIMER DS    CL11               TIME OF DAY (24 HR FORM HH.MM.SS.HH)\nHMDTIMED DS    CL8                TIME OF DAY (12 HR FORM HH.MM.SS)\nHMDAMPM  DS    CL3                AM/PM INDICATOR (' AM' OR ' PM')\nHMDPAD   DS    CL(72-(*-HMDTIME)) PAD TO 72 BYTES\n         SPACE 2\nOUTONE   DC    AL2(00),AL2(00)    LENTH/OFFSET\nONEMID   DC    C'TSO036I '\n         DC    C'DATE='\nONEJUL   DC    C'XX.XXX'\n         DC    C'      TIME='\nONETIM   DC    C'XX:XX:XX:XX'\n         SPACE 2\nOUTTWO   DC    AL2(00),AL2(00)    LENGTH/OFFSET\nTWOMID   DC    C'TSO037I '\nTWODAY   DC    C'WEDNESDAY'       NAME OF DAY\n         DC    C' '\nTWODATE  DC    C'XXXXXXXXXXX'     DATE MMM DD,YYYY\n         DC    C' '\nTWOTIME  DC     C'XXXXXXXXXXX'     XX:XX:XX  AM/PM\n         SPACE 1\nWORKLEN  EQU   ((*-TSOUSER+7)/8)*8   ALIGN TO DOUBLEWORD\n         END   HTIME\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IKJEFF10": {"ttr": 3844, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x891\\x8f\\x00\\x891\\x8f\\x108\\x01\\xb9\\x01\\xb9\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-11-14T00:00:00", "modifydate": "1989-11-14T10:38:00", "lines": 441, "newlines": 441, "modlines": 0, "user": "HMDEAN"}, "text": "IKJ      TITLE 'IKJEFF10 - TSO SUBMIT EXIT ROUTINE '           HD APR87\n***********************************************************************\n*/* REF: ASYSHMD.MVS.ASM(IKJEFF10)\n*/* COMP TSO\n*/* DOC  THIS IS THE ASSEMBLER SOURCE CODE FOR THE\n*/*      TSO SUBMIT EXIT ROUTINE.\n*/*\n*             MODULE NAME = IKJEFF10                                  *\n*                                                                     *\n*             DESCRIPTIVE NAME =  EXIT FOR TSO SUBMIT COMMAND         *\n*                                                                     *\n*             FUNCTION =                                              *\n*              * ASSURE JOBNAME ADHERES TO 'APL' NAMING CONVENTIONS.  *\n*                (CXXXYYYY) WHERE  C= COMPANY CODE                    *\n*                                XXX= USERS ID & YYYY= ANYTHING       *\n*                                                                     *\n*                   NORMAL FORMAT IS 'CZZZXXXY' WHERE ZZZ -> GROUP APL*\n*                                                                     *\n*              * SUPPLY USERID FOR NOTIFY=*******                     *\n*                                                                     *\n*                OPERATION =                                          *\n*                   SCAN JOBCARDS. CHANGE JOBNAME TO FIT       HD APR87\n*                   CONVENTIONS. IF 'NOTIFY=*******' IS               *\n*                   FOUND, SUBSTITUTE THE USERID FOR THE ASTERISKS    *\n*                                                                     *\n*              * SCAN JCL FOR ACF2 '//*LOGONID' AND            HD APR87\n*                '//*PASSWORD' CARDS AND PROMPT USER FOR       HD APR87\n*                OPERANDS. PLUG THESE VALUES INTO CONTROL      HD APR87\n*                CARDS.                                        HD APR87\n*                                                                     *\n*              NOTES =                                                *\n*                                                                     *\n*                 DEPENDENCIES = CHARACTER IS EBCDIC.  REASSEMBLE     *\n*                    IF A DIFFERENT CHARACTER SET IS NEEDED.          *\n*                                                                     *\n*                 RESTRICTIONS = USES SPKA FORM OF MODESET MACRO      *\n*                    INSTRUCTION SO MUST RUN SUPERVISOR STATE.        *\n*                                                                     *\n*                 REGISTER CONVENTIONS = STANDARD CONVENTIONS.        *\n*                    REGISTERS 0,1     = WORK REGISTERS               *\n*                    REGISTER  2       = MODESET KEYADDR              *\n*                    REGISTERS 4       = ADDRESSABILITY TO EXIT       *\n*                                              PARAMETER LIST         *\n*                    REGISTER  5       = BASE FOR SUBMIT CONTROL INFO *\n*                    REGISTER  6,7     = PTRS INTO  JCL CARD IMAGE    *\n*                    REGISTERS 8,9     = WORK REGISTERS               *\n*                    REGISTER  11      = ADDRESSABILITY TO GETMAINED  *\n*                                              DATA AREA              *\n*                    REGISTER  12      = ADDRESSABILITY TO IKJEFF10   *\n*                                              CSECT                  *\n*                    REGISTER  13      = SAVE AREA REGISTER           *\n*                    REGISTERS 14,15   = WORK REGISTERS               *\n*                                                                     *\n*                PATCH LABEL = PATCH (UNUSED AND INTIALIZED TO        *\n*                   'ZAP*'S)                                          *\n*                                                                     *\n*             MODULE TYPE = PROCEDURE                                 *\n*                                                                     *\n*                PROCESSOR = ASM                                      *\n*                                                                     *\n*                MODULE SIZE = 1K                                     *\n*                                                                     *\n*                ATTRIBUTES = PROTECT KEY 1, REENTRANT,               *\n*                   SUPERVISOR STATE                                  *\n*                                                                     *\n*             ENTRY POINTS = IKJEFF10 (ONLY ENTRY POINT)              *\n*                                                                     *\n*                LINKAGE =                                            *\n*                   IKJXXXXX:  (SUBMIT COMMAND) VIA CALL              *\n*                                                                     *\n*             INPUT = REGISTER 1 POINTS TO PARAMETER LIST MAPPED      *\n*                BY IKJEFFIE MACRO                                    *\n*                                                                     *\n*             OUTPUT = SEE EXIT TOPICAL HEADING BELOW                 *\n*                                                                     *\n*             EXIT - NORMAL = AT PROGRAM END VIA BRANCH REGISTER 14   *\n*                                                                     *\n*                OUTPUT = NONE                                        *\n*                                                                     *\n*                RETURN CODE = ZERO                                   *\n*                                                                     *\n*             EXIT - ERROR = AT PROGRAM END VIA BRANCH REGISTER 14    *\n*                                                                     *\n*                OUTPUT = NONE                                        *\n*                                                                     *\n*                RETURN CODE =                                        *\n*                   0  - CONTINUE                                     *\n*                                                                     *\n*             EXTERNAL REFERENCES =                                   *\n*                                                                     *\n*                ROUTINES = NONE                                      *\n*                                                                     *\n*                DATA AREAS = NONE                                    *\n*                                                                     *\n*                CONTROL BLOCKS = PARMLIST, CVT, ASVT, ASCB, TSB      *\n*                                                                     *\n*             TABLES = DATA AREA TO BE GETMAINED.  MAPPED BY DSECT    *\n*                BEGINNING AT LABEL DATA.                             *\n*                                                                     *\n*             MACROS = IKJEFFIE, FREEMAIN, GETMAIN, SAVE, MODESET,    *\n*                      IKJTSB, IKTTSBX, IKJTCB, IKJRB, IHAPSA, IKJCPPL*\n*                                                                     *\n*             CHANGE ACTIVITY = MODIFIED 5/30/86 BY M. COST TO        *\n*                               SUBSTITUTE LOGONID AND PASSWORD FOR   *\n*                               ?? ON //*LOGONID AND //*PASSWORD.     *\n*                                                                     *\n*             MESSAGES =                                              *\n*                                                                     *\n*                NO MESSAGES ARE ISSUED BY THIS MODULE.               *\n*                                                                     *\n*             ABEND CODES = NONE                                      *\n*                                                                     *\n***********************************************************************\n         EJECT\nIKJEFF10 CSECT\n         SAVE  (14,12),,IKJEFF10_&SYSTIME._&SYSDATE SAVE REGISTERS\n*                                      WITH CSECT IDENTIFIER\n         LR    R12,R15                 SET BASE REG.\n         USING IKJEFF10,R12            CSECT ADDRESSABILITY\n         L     R0,SIZDATD              LOAD REGISTER 0 WITH SIZE FOR\n*                                      GETMAIN\n         GETMAIN R,LV=(0)              ISSUE REGISTER FORM OF GETMAIN\n*                                      FOR AREA IN SUBPOOL 0\n         LR    R2,R1                   LOAD ADDRESS OF AREA    HD APR87\n*                                                              HD APR87\n         L     R3,SIZDATD                CLEAR                 HD APR87\n         SLR   R5,R5                         THAT              HD APR87\n         MVCL  R2,R4                             SAVE          HD APR87\n*                                                     AREA     HD APR87\n         LR    R11,R1                  LOAD REGISTER 11 WITH ADDRESS OF\n*                                      GETMAINED AREA\n         USING DATD,R11                ESTABLISH ADDRESSABILITY TO\n*                                      GETMAINED AREA\n         ST    R13,SAVEAREA+4          SAVE REGISTER 13 FOR SAVEAREA\n*                                      CHAINING\n         LM    R0,R1,20(R13)           RELOAD REGISTERS 0 AND 1 FROM\n*                                      PREVIOUS SAVEAREA\n         ST    R11,8(,R13)             SAVE ADDRESS OF CURRENT SAVEAREA\n         SR    R15,R15\n         ST    R15,16(,R13)            SET RETURN CODE TO ZERO.\n         LR    R13,R11                 LOAD REGISTER 13 WITH ADDRESS OF\n*                                      CURRENT SAVEAREA\n         L     R4,0(,R1)               LOAD REGISTER 4 WITH POINTER TO\n*                                      PARAMETER LIST\n         USING IEEXITL,R4              ESTABLISH ADDRESSABILITY TO\n*                                      PARAMETER LIST (USES\n*                                      IKJEFFIE MAPPING MACRO)\n         SPACE 2\n*\n         L     R6,IECARDP              SET POINTER TO JCL IMAGE.\n*\n         L     R5,IESUBCTP             SET BASE FOR CONTROL INFO.\n*\n         USING IESUBCTD,R5\n         OI    IETAKEEX,IETCOMNT       CHECK FOR //* CARD      HD APR87\n         SPACE 1\n         TM    IESTMTP2,IESCOMNT       //*NONBLANK STATEMENT\n         BO    CHECKIT                 CHECK FOR ACF2 CARD     HD APR87\n         SPACE 1\n         TM    IESTMTYP,IESJOB         JOB CARD?\n         BZ    ENDPROC                 BY GOLLY IT IS          HD MAY87\n*                                                              HD MAY87\nIEJOBX   DS    0H                                              HD MAY87\n         TM    IESTMTYP,IESCONTN       CONTINUATION?\n         BO    CHKNOTIF                YES-SKIP JOB NAME STUFF.\n         SPACE 2\n         EXTRACT PSCBADDR,             GET                             X\n               'S',                       PSCB                         X\n               FIELDS=PSB,                    ADDRESS                  X\n               MF=(E,EXTLIST)\n         SPACE 2\n         L     R8,IEUSRIDP             POINT TO USER ID.\n         MVC   SAVEUSER(7),0(R8)       SAVE USERID\n         L     R1,PSCBADDR             LOAD POINTER TO PSCB\n         TM    PSCBATR1(R1),PSCBCTRL   SEE IF USER HAS OPERATOR\n*                                      AUTHORITY\n         BNO   REGUSER                 NO..GO DO REGULAR USER STUFF\n         CLC   1(3,R8),=C'SYS'         'XSYS' USER?\n         BNE   REGUSER                 NO-GO DO REGULAR USER STUFF\n         CLC   2(7,R6),0(R8)           YES-1ST 7 CHARS = USER ID?\n         BE    REGUSER                     YES-GO DROP OUT GROUP CODE.\n         B     CHKNOTIF                    NO-ALLOW IT-GO CHECK NOTIF.\n         SPACE 2\nREGUSER  CLC   2(7,R6),0(R8)           1ST 7 CHARS OF JOBNAME = USERID?\n         BNE   PLOP                    NO-GO PLOP IN RIGHT STUFF.\n         SPACE\n         MVC   3(4,R6),6(R6)           YES-DROP OUT\n         MVC   7(4,R6),=CL4' '             GROUP CODE.\n         B     CHKNOTIF\n         SPACE\nPLOP     DS    0H\n         MVC   2(1,R6),0(R8)           PLOP IN COMP CODE\n         MVC   3(3,R6),4(R8)            AND USER ID.\n         SPACE 2\nCHKNOTIF DS    0H\n         LA    R14,1                   INDEX FOR BXLE.\n         LA    R15,58(,R6)             END ADDR FOR SCAN.\nCHKCARD  CLC   0(14,R6),=C'NOTIFY=*******'    GOT IT?\n         BE    GOTIT       12345678901234     YES-BRANCH.\n         BXLE  R6,R14,CHKCARD                 CONTINUE IF MORE.\n         B     ENDPROC\n         SPACE\nGOTIT    DS    0H\n         L     R8,IEUSRIDP             POINT TO USER ID.\n         MVC   SAVEUSER(7),0(R8)       SAVE USERID\n         MVC   7(7,R6),SAVEUSER        MOVE USERID\n         SPACE\n         CLI   14(R6),C','             NEED TO SHIFT DATA LEFT?\n         BNE   ENDPROC                 NO-GO END.\n         LA    R7,9(,R6)               START BLANK SEARCH AT 2ND CHAR.\n         LA    R15,6(,R7)              SET END ADDR AT COMMA.\n         LA    R14,1                   INDEX FOR BXLE.\nCHKBLNK  CLI   0(R7),C' '              BLANK FOUND?\n         BE    SHIFT                   YES-GO TO SHIFT DATA.\n         BXLE  R7,R14,CHKBLNK          CONTINUE IF MORE TO CHECK.\n         B     ENDPROC\n         SPACE\nSHIFT    DS    0H\n         L     R6,IECARDP              SET POINTER TO JCL IMAGE.\n         LA    R14,70(,R6)             COMPUTE # BYTES\n         SR    R14,R15                 TO GO LEFT.\n         EX    R14,MVCLEFT             SHIFT DATA LEFT\n         B     ENDPROC\n         SPACE\nMVCLEFT  MVC   0(0,R7),0(R15)          'EX' ONLY TO SHIFT DATA.\n         EJECT\n***********************************************************************\n*        WAS CARD //*PASSWORD OR //*LOGONID                           *\n***********************************************************************\nCHECKIT  DS    0H                      CHECK FOR ACF2 CARDS    HD APR87\n         TM    IEEXITWD+3,X'C0'        FOUND LOGONID & PASSWORD?\n         BO    ENDPROC                 GO TURN OFF CHECKING\n*                                                              HD APR87\n         CLC   0(14,R6),=C'//*PASSWORD ??'     CORRECT FORMAT? HD APR87\n         BE    SETFLAG4                        FLAG FOR PW     HD APR87\n         CLC   0(13,R6),=C'//*LOGONID ??'      CORRECT FORMAT? HD APR87\n         BNE   ENDPROC                         NO, GET NEXT    HD APR87\n*                                                              HD APR87\nSETFLAG8 OI    IEEXITWD+3,X'80'                SAYS WE FOUND LOGONID\n         B     CHAINS\nSETFLAG4 OI    IEEXITWD+3,X'40'                SAYS WE FOUND PASSWORD\n         B     CHAINS\n***********************************************************************\n*        FIND CPPL                                    *\n*        FIND TCB OLD POINTER                         *\n*        FIND RB POINTER                              *\n*******************************************************\nCHAINS   L     R3,PSATOLD-PSA\n         USING TCB,R3\n         L     R9,TCBRBP            -> RB FOR EXECUTING PGM\n         USING RBBASIC,R9\n*******************************************************\n*        CHAIN THRU RB'S OR ADR OF TCB                *\n*        WHEN FIRST RB ON QUEUE                       *\n*******************************************************\nRBLOOP   CLM   R3,7,RBLINKB        IF ADR OF TCB = THEN ITS 1ST RB\n         BE    TOPRB\n         CLC   RBLINKB(3),=X'000000'   JUST IN CASE\n         BE    TOPRB\n         ICM   R9,7,RBLINKB        PLUG IN ADR OF PREVIOUS RB\n         B     RBLOOP\nTOPRB    EQU   *\n         DROP  R3                  DO NOT NEED ADRSING TO TCB\n         L     R3,RBGRS1           SHOULD -> TO CPPL\n         LA    R3,16(R3)           THIS IS YOUR CPPL\n         USING CPPL,R3\n         DROP  R9                  DO NOT NEED ADRSING TO RB\n         L     R9,CPPLUPT          PLACE ADR OF UPT IN REG 9\n         L     R8,CPPLECT          PLACE ADR OF ECT IN REG 8\n********************************************\n*        WHICH CARD WAS IT                 *\n********************************************\nWHICHONE CLC   0(14,R6),=C'//*PASSWORD ??'     CORRECT FORMAT?\n         BE    PASSWORD                        GO MOVE IN PASSWORD\n         CLC   0(13,R6),=C'//*LOGONID ??'      CORRECT FORMAT\n         BE    LOGONID                         GO MOVE IN LOGONID\n         B     ENDPROC\n********************************************\n*        ISSUE PUTGET FOR PASSWORD         *\n********************************************\nPASSWORD DS    0H                                              HD JAN87\n         USING UPT,R9              ADDRES USER PROFILE TABLE   HD JAN87\n         MVC   UPTBYTE(1),UPTSWS   SAVE THE PROFILE SWITCHES   HD JAN87\n         NI    UPTSWS,255-UPTNPRM  TURN OFF NO PROMPTING FLAG  HD JAN87\nPASSPTGT PUTGET PARM=APGPB,UPT=(9),ECT=(8),ECB=ECBADS,         HD JAN87X\n               TERMPUT=ASIS,TERMGET=EDIT,                              X\n               OUTPUT=(PWRDOLD,SINGLE,PTBYPS),MF=(E,IOPLADS)\n         MVC   UPTSWS(1),UPTBYTE    RESTORE SWITCHES           HD JAN87\n         LTR   R15,R15\n         BNZ   ENDPROC\n         DROP  R3\n         LA    R3,APGPB             ADRESSABILITY TO PUTGET\n         USING PGPB,R3              PARAMETER BLOCK\n         L     R2,PGPBIBUF          ADR OF RESPONSE FROM TERMINAL USER\n         DROP  R9                                              HD JAN87\n********************************************\n*        PROCESS RESPONSE FROM USER        *\n*        THEN FREE INPUT BUFFER            *\n********************************************\n         LH    R3,0(R2)              LENGTH INCLUDING HEADER\n         SH    R3,=H'5'             DECREMENT BY HEADER +1 FOR EXEC\n         EX    R3,MOVEPWRD\n*        OI    IEEXITWD+3,X'44'      SAYS WE HAVE SET PASSWORD\n         B     ENDPROC\nMOVEPWRD MVC   12(0,R6),4(R2)        MOVE PASSWORD STARTING AT ??\n********************************************\n*        ISSUE PUTGET FOR LOGONID          *\n********************************************\nLOGONID  DS    0H                                              HD JAN87\n         USING UPT,R9              ADDRES USER PROFILE TABLE   HD JAN87\n         MVC   UPTBYTE(1),UPTSWS   SAVE THE PROFILE SWITCHES   HD JAN87\n         NI    UPTSWS,255-UPTNPRM  TURN OFF NO PROMPTING FLAG  HD JAN87\nLOGPTGT  PUTGET PARM=APGPB,UPT=(9),ECT=(8),ECB=ECBADS,         HD JAN87X\n               TERMPUT=ASIS,TERMGET=EDIT,                              X\n               OUTPUT=(LOGOLD,SINGLE,PTBYPS),MF=(E,IOPLADS)\n         MVC   UPTSWS(1),UPTBYTE    RESTORE SWITCHES           HD JAN87\n         LTR   R15,R15\n         BNZ   ENDPROC\n         DROP  R3,R9                DROP OBSOLETE BASE REGS    HD JAN87\n         LA    R3,APGPB             ADRESSABILITY TO PUTGET\n         USING PGPB,R3              PARAMETER BLOCK\n         L     R2,PGPBIBUF          ADR OF RESPONSE FROM TERMINAL USER\n         LH    R3,0(R2)              LENGTH INCLUDING HEADER\n         SH    R3,=H'5'             DECREMENT BY HEADER +1 FOR EXEC\nUPCASE   TR    4(8,R2),TRANSTAB     UPPER CASE 8 CHARACTERS FOR LOGONID\n         EX    R3,MOVELOG\n*        OI    IEEXITWD+3,X'88'      SAYS WE HAVE SET PASSWORD\n         B     ENDPROC\n         SPACE 1\nMOVELOG  MVC   11(0,R6),4(R2)        MOVE LOGONID STARTING AT ??\n***********************************************************************\n*                                                                     *\n*        RETURN TO CALLER                                             *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nENDPROC  DS    0H\n         L     R13,4(,R13)             RESTORE REGISTER 13\n         L     R0,SIZDATD              LOAD REGISTER 0 WITH SIZE OF\n*                                      GETMAINED AREA\n         LR    R1,R11                  LOAD REGISTER 1 WITH ADDRESS OF\n*                                      GETMAINED AREA\n         FREEMAIN R,LV=(0),A=(1)       FREE GETMAINED AREA\n*                                      ADDRESS\n         LM    R14,R12,12(R13)         RESTORE REGISTERS & RETURN CODE.\n         BR    R14                     RETURN VIA REGISTER 14\n         SPACE 2\n******** CONSTANTS AND DSECTS *********\n*\nDATA     DS    0H\nDATD     DSECT\n         DS    0F\nSAVEAREA DS    18F\nSAVEUSER DS    1D\nUPTBYTE  DS    X                                               HD JAN87\n         DS    0D\nAPGPB    PUTGET MF=L\nPGL      EQU   *-APGPB                                         HD APR87\nECBADS   DC    F'0'\nIOPLADS  DC    4F'0'\nEXTLIST  EXTRACT MF=L\nPSCBADDR DS    F\nPSCBATR1 EQU   16\nPSCBCTRL EQU   X'80'\n         DS    0D\n         ORG\nENDDATD  EQU   *\nIKJEFF10 CSECT\n         DS    0F\nSIZDATD  DC    AL1(0)\n         DC    AL3(ENDDATD-DATD)\nPWRDOLD  DC    F'1'\n         DC    A(PWRDMSG)\nPWRDMSG  DC    H'26'\n         DC    H'0'\n         DC    CL22' >>***> ENTER PASSWORD'\nLOGOLD   DC    F'1'\n         DC    A(LOGMSG)\nLOGMSG   DC    H'25'\n         DC    H'0'\n         DC    CL21' >>***> ENTER LOGONID'\nPATCH    DC    8CL4'ZAP*'\nTRANSTAB DS    0CL256\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040405B40404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040407B7C404040'\n         DC    XL16'40C1C2C3C4C5C6C7C8C9404040404040'\n         DC    XL16'40D1D2D3D4D5D6D7D8D9404040404040'\n         DC    XL16'4040E2E3E4E5E6E7E8E9404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9404040404040'\n         DS    0F\nR0       EQU   00                      EQUATES FOR REGISTERS 0-15\nR1       EQU   01\nR2       EQU   02\nR3       EQU   03\nR4       EQU   04\nR5       EQU   05\nR6       EQU   06\nR7       EQU   07\nR8       EQU   08\nR9       EQU   09\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\nASCBTSB  EQU   60\nASCBPTR  EQU   544\nREJMSG   DSECT                         DSECT FOR RETURN MESSAGE\nREJMLEN  DS    H\nREJJOB   DS    CL4\nREJSLOT  DS    CL9\n         EJECT\n         IKJEFFIE IETYPE=SUBMIT\n         EJECT\n         IKJTSB   LIST=YES,EXT=NO\n         EJECT\n         IKTTSBX\n         EJECT\n         IKJPGPB\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJUPT ,                                              HD JAN87\n         EJECT\n         IHAPSA\n         EJECT\n         IKJTCB\n         EJECT\n         IKJRB\n         END   IKJEFF10\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "INMXZ02": {"ttr": 3852, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x891\\x8f\\x00\\x891\\x8f\\x108\\x00\\xa1\\x00\\xa1\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-11-14T00:00:00", "modifydate": "1989-11-14T10:38:00", "lines": 161, "newlines": 161, "modlines": 0, "user": "HMDEAN"}, "text": "INMX     TITLE 'INMXZ02 - TSO/E TRANSMIT TERMINATION EXIT'     HD JAN87\n***********************************************************************\n*                                                                     *\n*        REGISTER EQUATES                                             *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*        FIXED POINT REGISTERS                                        *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nR0       EQU   0        *USED BY O.S.\nR1       EQU   1        *USED BY O.S. // ADDRESS OF PARAMETER LIST\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13       *USED BY O.S. // SAVE-AREA ADDRESS\nR14      EQU   14       *USED BY O.S. // RETURN ADDRESS\nR15      EQU   15       *USED BY O.S. // ENTRY-PT ADDR, RETURN CODE\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*        FLOATING POINT REGISTERS                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nF0       EQU   0\nF2       EQU   2\nF4       EQU   4\nF6       EQU   6\n         EJECT                                                 HD JAN87\n*\n*  THIS IS THE INSTALLATION-WRITTEN TERMINATION EXIT FOR THE\n*  TRANSMIT (XMIT) COMMAND PROCESSOR.\n*\n*  THE FUNCTION OF THIS EXIT IS TO NOTIFY EACH INTENDED\n*  RECIPIENT THAT A TRANSMISSION IS WAITING FOR HIM TO RECEIVE.\n*  THIS IS ACCOMPLISHED BY INVOKING THE SEND COMMAND PROCESSOR\n*  WITH THE LOGON OPTION TO NOTIFY EACH INTENDED RECIPIENT\n*  EITHER IMMEDIATELY OR WHEN NEXT HE LOGS ONTO TSO.\n*\nPLIST    DSECT\nUSERWAD  DS    AL4                    ADDRESS OF USER WORD\nXMITPARM DS    AL4                    ADDRESS OF USER-ENTERED PARM\nFLAGS    DS    AL4                    ADDRESS OF TRANSMIT ACTION FLAG\nCPPLADDR DS    AL4                    CPPL ADDRESS\nXMITMSG  DS    AL4                    ADDRESS OF MESSAGE TO SENDER\nSTATUS   DS    AL4                    ADDRESS OF STATUS FLAG BYTE\nTUPLUSER DS    AL4                    TEXT UNIT POINTER LIST (SENDER)\nTUPLDS   DS    AL4                    TEXT UNIT POINTER LIST (DATASET)\nADRCHAIN DS    AL4                    CHAIN OF RECIPIENTS\nRCTRADDR DS    AL4                    POINTS TO NUMBER OF RECORDS\nXMITRC   DS    AL4                    ADDRESS OF TRANSMIT RETURN CODE\n*\n         EJECT                                                 HD JAN87\nRECEIVER DSECT\nRCVLINK  DS    AL4                    PTR TO NEXT RECEIVER BLOCK\nNODELEN  DS    XL2                    NODE NAME LENGTH\nNODENAME DS    CL8                    NODE NAME LEFT JUSTIFIED\nUSERIDLN DS    XL2                    USERID LENGTH\nUSERID   DS    CL8                    USERID LEFT JUSTIFIED\nNICKLEN  DS    XL2                    NICKNAME LENGTH\nNICKNAME DS    CL8                    NICKNAME LEFT JUSTIFIED\nUNAMELEN DS    XL2                    LENGTH OF USER NAME\nUSERNAME DS    CL30                   USER NAME FIELD\nRCVFLAG  DS    XL1                    FLAGS\nNOTIFY   EQU   X'80'                  REQUEST NOTIFICATION FOR USER\nXMITOK   EQU   X'20'                  TRANSMISSION SUCCESSFUL\n         DS    XL1                    RESERVED\nUPARMLEN DS    XL2                    USER PARM FIELD LENGTH\nUPARM    DS    CL30                   USER PARM FIELD\nSUSERL   DS    XL2                    SENDERS USERID LENGTH    HD JAN89\nSUSERID  DS    CL8                    SENDERS USERID           HD JAN89\nSNODEL   DS    XL2                    SENDERS NODE NAME LENGTH HD JAN89\nSNODE    DS    CL8                    SENDERS NODE NUMBER      HD JAN89\n*\n         EJECT                                                 HD JAN87\n         IKJCPPL\n         EJECT                                                 HD JAN87\n         IKJUPT\n         EJECT                                                 HD JAN87\n         IKJECT\n         EJECT                                                 HD JAN87\nINMXZ02  CSECT\n         STM   R14,R12,12(R13)\n         LR    R12,R15\n         USING INMXZ02,R12\n         LR    R8,R1                      SAVE PARM LIST POINTER\n         USING PLIST,R8\n         GETMAIN R,LV=WORKLEN             GET WORKAREA\n         ST    R1,8(R13)                  STANDARD LINKAGE\n         ST    R13,4(R1)                  TO GETMAINED SAVEAREA\n         LR    R13,R1\n         USING WORKAREA,R13\n         L     R11,CPPLADDR\n         USING CPPL,R11\n         L     R10,CPPLECT\n         USING ECT,R10\nCMDOK    MVC   CPPLAREA(16),0(R11)        INITIALIZE DUMMY CPPL\n         LA    R3,CPBUF                   POINT AT COMMAND BUFFER\n         ST    R3,CPPLAREA                CONTAINING SEND COMMAND\n         MVC   CPBUF(SMSGLEN),SMSGC       INITIALIZE COMMAND BUFFER\n         LA    R3,ADRCHAIN                R3 <=== PREVIOUS POINTER\n         USING RECEIVER,R4                R4 <=== CURRENT POINTER\n         SLR   R5,R5                      CLEAR R5\nRCVLOOP  L     R4,0(R3)                   LOAD POINTER TO NEXT\n         LTR   R4,R4                      RECEIVER, CHECK FOR END\n         BZ    INMXEND\n         CLC   SNODE,NODENAME             ARE WE SENDING HERE? HD JAN89\n         BNE   INMXEND                    NO LET JES2 HANDLE   HD JAN89\n         LA    R5,5                       INITIALIZE\n         STH   R5,CPBUF+2                 OFFSET TO OPERAND\n         ICM   R5,3,USERIDLN              LOAD USERID LENGTH\n         EX    R5,MOVEID                  MOVE USERID PLUS ONE BYTE\nMOVEID   MVC   TOUSER,USERID              TO SEND COMMAND\n         LA    R5,TOUSER(R5)              ADVANCE PAST USERID\n         MVC   0(7,R5),AFTUSER            CLOSE PAREN AND ADD LOGON\n         LA    R5,7(R5)                   END OF BUFFER ADDRESS\n         LA    R7,CPBUF                   SUBTRACT START OF BUFFER\n         SR    R5,R7                      ADDRESS AND PUT IN BUFFER\n         STH   R5,CPBUF                   LENGTH FIELD\n         LA    R1,CPPLAREA                POINT R1 AT DUMMY CPPL\n         LINK  EP=SEND\n         LR    R3,R4\n         B     RCVLOOP\nINMXEND  SLR   R15,R15\n         LR    R1,R13                     SAVE WORKAREA ADDRESS\n         L     R13,4(R13)                 RELOAD PREVIOUS SAVEAREA\n         FREEMAIN R,LV=WORKLEN,A=(1)      POINTER AND FREE WORKAREA\n         L     R14,12(R13)                RESTORE RETURN ADDRESS\n         LM    R0,R12,20(R13)             RESTORE REGISTERS\n         BR    R14                        RETURN TO TRANSMIT COMMAND\n         LTORG\nSMSGC    DC    H'0'\n         DC    H'0'\n         DC    CL5'SEND '\n         DC    X'7D'                      APOSTROPHE\n         DC    CL42'INMX001 MAIL IS AVAILABLE TO RECEIVE FROM '\n         DC    X'7D'                      APOSTROPHE\n         DC    CL6' USER('\nSMSGLEN  EQU   *-SMSGC\nAFTUSER  DC    CL7'),LOGON'\n         EJECT                                                 HD JAN87\nWORKAREA DSECT\nSAVEAREA DS    18F\nCPPLAREA DS    4F\nCPBUF    DS    CL59                                            HD JAN89\nTOUSER   DS    CL7\n         DS    CL7                        ),LOGON\nWORKLEN  EQU   *-WORKAREA\n         END   INMXZ02\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "INUSE": {"ttr": 4100, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x891\\x8f\\x00\\x891\\x8f\\x108\\x00\\x1c\\x00\\x1c\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-11-14T00:00:00", "modifydate": "1989-11-14T10:38:00", "lines": 28, "newlines": 28, "modlines": 0, "user": "HMDEAN"}, "text": "         MACRO\n&NAME    INUSE &FOOLASM\n         GBLB  &LUSED\n         GBLC  &USENM(50),&USEW(25)\n         LCLA  &A,&D,&B\n         LCLB  &F\n         LCLC  &X1,&X2\n         AIF   ('&NAME' EQ '').CHK\n&NAME    DS    0H .                     NAME DEFINED\n.CHK     AIF   (&LUSED).GO\n         MNOTE 0,'USER ERROR - LUSE NEVER USED, NO KNOWN BASE REGS'\n         MEXIT\n.GO      SPACE 2\n&A       SETA  1\n*              THE FOLLOWING REGISTER(S) IN USE:\n*                LOCATION           BASE\n.LOOP    AIF   ('&USEW(&A)' EQ '').MENDX\n&D       SETA  (&A*2)-1\n&X1      SETC  '&USENM(&D)'.'           '\n&X2      SETC  '&USENM(&D+1)'.'            '\n         MNOTE *,'&X1&X2    &USEW(&A)'\n&A       SETA  &A+1\n&F       SETB  1\n         AGO   .LOOP\n.MENDX   AIF   (&F).MEXIT\n*              ** NO REGISTERS CURRENTLY IN USE **\n.MEXIT   SPACE 2\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IOPL": {"ttr": 4102, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x891\\x8f\\x00\\x891\\x8f\\x108\\x00\\x13\\x00\\x13\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-11-14T00:00:00", "modifydate": "1989-11-14T10:38:00", "lines": 19, "newlines": 19, "modlines": 0, "user": "HMDEAN"}, "text": "         MACRO\n         IOPL     &DSECT=,                                  *HMD 05/78*\n         AIF  ('&DSECT' EQ 'NO').NODSECT                    *HMD 05/78*\nIOPL     DSECT                                              *HMD 05/78*\n         AGO   .DSCT                                        *HMD 05/78*\n.NODSECT ANOP                                               *HMD 05/78*\nIOPL     DS    0A                                           *HMD 05/78*\n.DSCT    ANOP                                               *HMD 05/78*\n***********************************************************************\n*    THE I/O SERVICE ROUTINE PARAMETER LIST (IOPL) IS A LIST OF       *\n*    FULLWORD ADDRESSES PASSED BY THE INVOKER OF ANY I/O SERVICE      *\n*    ROUTINE TO THE APPROPRIATE SERVICE ROUTINE VIA REGISTER ONE.     *\n***********************************************************************\n         SPACE\nIOPLUPT  DS    A        PTR TO UPT\nIOPLECT  DS    A        PTR TO ECT\nIOPLECB  DS    A        PTR TO USER'S ECB\nIOPLIOPB DS    A        PTR TO THE I/O SERVICE RTN PARM BLOCK\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JULGREG": {"ttr": 4104, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x891\\x8f\\x00\\x891\\x8f\\x108\\x01\\x15\\x01\\x15\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-11-14T00:00:00", "modifydate": "1989-11-14T10:38:00", "lines": 277, "newlines": 277, "modlines": 0, "user": "HMDEAN"}, "text": "         TITLE 'JULIAN/GREGOR CONVERSION ROUTINES'\n*        *         *         *         *         *         *          *\n* THIS ROUTINE CONVERTS A SIX CHARACTER ALPHAMERIC GREGORIAN DATE OF  *\n* THE FORM 'YYMMDD' TO A THREE BYTE PACKED DECIMAL FIELD OF THE FORM  *\n* YYDDDC, IF A JULIAN DATE IS DESIRED. THE JULIAN DATE IS C SIGNED.   *\n* EXAMPLE:                                                            *\n*                                                                     *\n*     R1 ==> A(GDATE)==>GDATE    DS    CL6                            *\n*            A(JDATE)==>JDATE    DS    F                              *\n*                                                                     *\n*  ON ENTRY R1......> |>GREGDATE|>JULDATE |                           *\n*                         P1        P2                                *\n*                                                                     *\n* HOWARD M. DEAN                                                      *\n* SYNTEX U.S.A.                                                       *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\nJULGRE   CSECT\n         ENTRY JULIAN,GREGOR\nJULIAN   SAVE  (14,12)\n         BALR  10,0\n         USING *,10\n         USING DSA,13                   TELL ASSEMBLER      *HMD 03/85*\n         LR    2,1                      SAVE PARMS          *HMD 03/85*\n         GETMAIN R,LV=STORLEN           GET DYNAMIC STORAGE *HMD 03/85*\n         MVC   0(STORLEN,1),BEGOSTOR    INITIALIZE DYNAMIC  *HMD 03/85*\n         ST    13,4(1)                  SAVE REGISTERS      *HMD 03/85*\n         ST    1,8(13)                   CHAIN BACK         *HMD 03/85*\n         LR    13,1                     ADDRESS DYNASTOR    *HMD 03/85*\n         LR    3,2                      RETORE PARM REG     *HMD 03/85*\n         ZAP   JULDATE,=P'0'\n         ZAP   YEAR,=P'0'               INITIALIZE <YEAR>\n         ZAP   DAYS,=P'0'               INITIALIZE JULIAN DAYS\n         ZAP   LYEAR,=P'64'             INITIALIZE LEAP YEAR TO 1964\n         L     4,0(0,3)                 GPR-4 <- ADDR OF GREGORIAN VAR.\n         CLC   0(6,4),=C'000000'        ZERO GREGORIAN DATE?\n         BE    ZDATE\n         MVC   YEAR(6),0(4)             MOVE GREGOR DATE TO YEAR,MO,DAY\n         MVZ   YEAR+1(1),=X'C0'         SET UP <YEAR> FOR PACKING\n         MVZ   MO+1(1),=X'C0'           SET UP <MO> FOR PACKING\n         MVZ   DAY+1(1),=X'C0'          SET UP <DAY> FOR PACKING\n         PACK  YEAR,YEAR                PACK <YEAR>\n         PACK  MO,MO                    PACK <MO>\n         PACK  DAY,DAY                  PACK <DAY>\n         CLC   DAY,=X'001C'\n         BL    ERROR\n         CLC   DAY,=X'031C'\n         BH    ERROR\n         CLC   MO,=X'001C'\n         BL    ERROR\n         CLC   MO,=X'012C'\n         BH    ERROR\n         CLC   YEAR,=X'000C'\n         BL    ERROR\n         CLC   YEAR,=X'099C'\n         BH    ERROR\n         ZAP   DBLWRK,YEAR         MOVE YEAR TO DOUBLEWORD\n         STM   6,7,STORM           SAVE THESE 2 REGS\n         CVB   6,DBLWRK            CONVERT YEAR TO BINARY\n         LTR   6,6                 CHECK FOR YEAR 0\n         BZ    LEAPYEAR            IF YEAR IS 0-ITS A LEAPYEAR\n         SRDA  6,32                SHIFT TO ODD # REG\n         D     6,=F'4'              DIVIDE BY 4  (ALL LEAPYEARS ARE\n*                                  EVENLY DIVISIBLE BY 4)\n         LTR   6,6                 CHECK FOR REMAINDER\n         LM    6,7,STORM           (RELOAD REGS REGARDLESS OF CC)\n         BNZ   NOTLYEAR            IF THERE WAS REMAINDER-\n*                                  THIS WASN'T A LEAPYEAR\nLEAPYEAR ZAP   FEBDAYS,=P'29'           MOVE 29 DAYS INTO # OF FEB DAYS\n         B     ADDDAYS                  GO ADD UP # OF DAYS\nNOTLYEAR ZAP   FEBDAYS,=P'28'           MOVE 28 DAYS INTO # OF FEB DAYS\nADDDAYS  LA    5,DAYSINMO               GPR-5 <- ADDR OF <DAYSINMO>\n         CP    DAY,=P'0'                IS DAY GREATER THAN 0 ?\n         BNH   ERROR                    NO, GO RETURN ERROR DATE\n         CP    MO,=P'0'                 IS MONTH GREATER THAN 0 ?\n         BNH   ERROR                    NO, GO RETURN ERROR DATE\n         CP    MO,=P'12'                IS MONTH GREATER THAN 12 ?\n         BH    ERROR                    YES, GO RETURN ERROR DATE\nNEXTMO   CP    MO,0(2,5)                COMPARE MONTH WITH TABLE MONTH\n         BZ    GOTMONTH                 IF EQUAL ADD DAYS IN MONTH\n         AP    DAYS,2(2,5)              OTHERWISE, ADD # OF DAYS IN MO\n         LA    5,4(0,5)                 SKIP TO NEXT MO IN TABLE\n         B     NEXTMO                   GO COMPARE AGAIN\nERROR    L     4,4(0,3)                 GPR-4 <- ADDR OF JULIAN DATE\n* OUTPUT IS FOUR BYTE FIELD                                 *HMD 03/85*\n         ZAP   0(4,4),=P'99999'         MOVE ERROR DATA     *HMD 03/85*\n         OI    3(4),X'0F'               CHANGE SIGN TO X'F' *HMD 03/85*\n         B     BADGOUT                  GO RETURN\nGOTMONTH CP    DAY,2(2,5)               IS DAY > # OF DAYS IN MONTH ?\n         BH    ERROR                    YES, GO RETURN ERROR DATE\n         AP    DAYS,DAY                 ADD # OF DAYS IN THIS MONTH\nZDATE    EQU   *\n         ZAP   JULDATE,YEAR             MOVE YEAR TO JULIAN VARIABLE\n         MP    JULDATE,=P'1000'         MULTIPLY BY 1000\n         AP    JULDATE,DAYS             ADD # OF JULIAN DAYS\n         L     4,4(3)                   GPR-4 <- ADDR OF JULIAN VAR.\n* OUTPUT IS FOUR BYTE FIELD                                 *HMD 03/85*\n         ZAP   0(4,4),JULDATE+5(3)      MOVE JUL DATE TO CALLING PGM\n         OI    3(4),X'0F'               CHANGE SIGN TO X'F' *HMD 03/85*\nBADGOUT  EQU   *\n         LR    1,13                     SAVE OUR STORAGE    *HMD 03/85*\n         L     13,4(0,13)               GET BACK POINTER    *HMD 03/85*\n         LA    0,STORLEN                LENGTH TO FREE      *HMD 03/85*\n         FREEMAIN R,LV=(0),A=(1)        FREE IT UP          *HMD 03/85*\n         RETURN (14,12),T,RC=0          RETURN TO CALLER    *HMD 03/85*\n         SPACE 2                                            *HMD 03/85*\nMOE      LTORG                          LITERALS FOLLOW\n         TITLE 'JULIAN TO GREGORIAN CONVERSION'\n*---------------------------------------------------------------------*\n* THIS ROUTINE CONVERTS A FOUR BYTE PACKED DECIMAL JULIAN DATE TO A   *\n* SIX BYTE GREGORIAN 'YYMMDD' DATE.                                   *\n* EXAMPLE:                                                            *\n*   R1==> A(GDATE)      GDATE   DS     CL6      GREGORIAN YYMMDD      *\n*         A(JDATE)      JDATE   DS     F        JULIAN    00YYDDDF    *\n*                                                                     *\n*  ON ENTRY R1......> |>GREGDATE|>JULDATE |                           *\n*                         P1        P2                                *\n* HOWARD M. DEAN                                                      *\n* SYNTEX U.S.A.                                                       *\n*---------------------------------------------------------------------*\nGREGOR   SAVE (14,12)\n         BALR  10,0\n         USING *,10\n         USING DSA,13                   TELL ASSEMBLER      *HMD 03/85*\n         LR    2,1                      SAVE PARMS          *HMD 03/85*\n         GETMAIN R,LV=STORLEN           GET DYNAMIC STORAGE *HMD 03/85*\n         MVC   0(STORLEN,1),BEGOSTOR    INITIALIZE DYNAMIC  *HMD 03/85*\n         ST    13,4(1)                  SAVE REGISTERS      *HMD 03/85*\n         ST    1,8(13)                   CHAIN BACK         *HMD 03/85*\n         LR    13,1                     ADDRESS DYNASTOR    *HMD 03/85*\n         LR    3,2                      RETORE PARM REG     *HMD 03/85*\n         ZAP   YEAR,=P'0'\n         ZAP   MO,=P'0'\n         ZAP   DAY,=P'0'\n         L     4,4(0,3)                 GPR-4 <- ADDR OF JULIAN VAR.\n*  DATE PRESENTED AS FULLWORD SIGNED 00YYDDDF               *HMD 03/85*\n         ZAP   JDATE,0(4,4)             MOVE JULIAN DATE TO <JDATE>\n         CLI   JDATE+2,X'0C'         M/B SIGNED\n         BL    BADJDATE\n         CLI   JDATE+2,X'9C'\n         BH    BADJDATE\n         CP    JDATE,=P'0'             ZERO DATE ENTERED\"?\n         BE    GOTGDATE                YES   ---   RETURN ZEROS\n         CP    JDATE+1(2),=P'366'      # OF DAYS > 366?\n         BH    BADJDATE                YES---RETURN ERROR DATE\n         ZAP   DAYS,JDATE+1(2)          MOVE JULIAN DAYS TO <DAYS>\n         SP    JDATE,DAYS               SUBTRACT TO ZERO JULIAN DAYS\n         ZAP   JULDATE,JDATE            MOVE YEAR TIMES 100 TO <JULDATE\n         DP    JULDATE,=P'1000'         DIVIDE BY 100 TO GET YEAR\n         ZAP   YEAR,JULDATE+3(2)        MOVE YEAR TO <YEAR>\n         ZAP   LYEAR,=P'64'             INITIALIZE LEAP YEAR TO 1964\n         ZAP   DBLWRK,YEAR         MOVE YEAR TO DOUBLEWORD\n         STM   6,7,STORM           SAVE THESE TWO REGS\n         CVB   6,DBLWRK            CONVERT YEAR TO BINARY\n         LTR   6,6                 CHECK FOR YEAR 0\n         BZ    LEAPYR              IF YEAR IS 0-ITS A LEAPYEAR\n         SRDA  6,32                SHIFT TO ODD # REG\n         D     6,=F'4'             DIVIDE BY 4-ALL LEAP YEARS ARE\n*                                  EVENLY DIVISIBLE BY 4\n         LTR   6,6                 CHECK FOR REMAINDER\n         LM    6,7,STORM           (RELOAD REGS REGARDLESS OF CC)\n         BNZ   NOTLYR              IF THERE WAS REMAINDER-THIS WASNT A\n*                                  LEAPYEAR\nLEAPYR   ZAP   FEBDAYS,=P'29'           SET FEB DAYS IN TABLE TO 29\n         B     GETMODAY                 GO ADD DAYS IN EACH MONTH\nNOTLYR   ZAP   FEBDAYS,=P'28'           SET FEB DAYS IN TABLE TO 28\nGETMODAY LA    5,DAYSINMO               GPR-5 <- ADDR OF MO/DAY TABLE\nNEXTGMO  CP    DAYS,2(2,5)              COMPARE # DAYS WITH DAYS IN MO\n         BP    NOTGMON                  IF HIGH, SUBTRACT DAYS IN MO\n         ZAP   DAY,DAYS                 IF NOT HIGH,MOVE DAYS TO <DAY>\n         ZAP   MO,0(2,5)                MOVE MONTH TO <MO>\n         B     GOTGDATE                 GO CONVERT TO ZONED DECIMAL\nNOTGMON  SP    DAYS,2(2,5)              SUBTRACT DAYS IN MO FROM JULIAN\n         LA    5,4(0,5)                 GPR-5 <- ADDR OF NEXT TABLE ENT\n         B     NEXTGMO                  GO COMPARE JULIAN DAYS AGAIN\nBADJDATE L     4,0(0,3)                 GPR-4 <- ADDR OF GREGORIAN VAR.\n         MVC   0(6,4),=C'999999'        SET GREG ERROR DATE\n         B     BADJOUT                  GO RETURN\nGOTGDATE L     4,0(0,3)                 GPR-4 <- ADDR OF GREGORIAN VAR.\n         UNPK  0(2,4),YEAR              CONVERT YEAR TO ZONED DECIMAL\n         MVZ   1(1,4),=X'F0'            CHANGE SIGN TO PRINT CHAR\n         UNPK  2(2,4),MO                CONVERT MONTH TO ZONED DECIMAL\n         MVZ   3(1,4),=X'F0'            CHANGE SIGN TO PRINT CHAR\n         UNPK  4(2,4),DAY               CONVERT DAY TO ZONED DECIMAL\n         MVZ   5(1,4),=X'F0'            CHANGE SIGN TO PRINT CHAR\nBADJOUT  EQU   *\n         LR    1,13                     RESTORE AREA PTR    *HMD 03/85*\n         L     13,4(0,13)               LOAD BACK CHAIN     *HMD 03/85*\n         LA    0,STORLEN                LENGTH TO FREE      *HMD 03/85*\n         FREEMAIN R,LV=(0),A=(1)        FREE IT UP          *HMD 03/85*\n         RETURN (14,12),T,RC=0          RETURN TO CALLER    *HMD 03/85*\n         SPACE 2                                            *HMD 03/85*\nIRVING   LTORG                          LITERALS FOLLOW\nBEGOSTOR DC    20F'0'\n         DS    PL8\n         DS    PL3\n         DC    PL2'0'\n         DC    PL2'0'\n         DC    PL2'0'\n         DC    PL2'0'\n         DC    PL2'0'\n         DC    PL2'0'\n         DC    PL2'0'\n         DC    PL2'1'\n         DC    PL2'31'\n         DC    PL2'2'\n         DC    PL2'0'\n         DC    PL2'3'\n         DC    PL2'31'\n         DC    PL2'4'\n         DC    PL2'30'\n         DC    PL2'5'\n         DC    PL2'31'\n         DC    PL2'6'\n         DC    PL2'30'\n         DC    PL2'7'\n         DC    PL2'31'\n         DC    PL2'8'\n         DC    PL2'31'\n         DC    PL2'9'\n         DC    PL2'30'\n         DC    PL2'10'\n         DC    PL2'31'\n         DC    PL2'11'\n         DC    PL2'30'\n         DC    PL2'12'\n         DC    PL2'31'\n         DC    PL2'99'\n         DC    PL2'99'\n         SPACE 3\n         DS    D\n         DS    2F\nENDOSTOR EQU   *                                            *HMD 03/85*\nSTORLEN  EQU   ENDOSTOR-BEGOSTOR        END MINUS BEGINNING *HMD 03/85*\n         TITLE 'DYNAMIC SAVE AREA'                          *HMD 03/85*\nDSA      DSECT                          DYNAMIC SAVE AREA   *HMD 03/85*\nSAVE     DC    20F'0'\nJULDATE  DS    PL8                      JULIAN DATE WORK WORD\nJDATE    DS    PL3                      JULIAN DATE\nLYEAR    DC    PL2'0'                   LEAP YEAR\nDAYS     DC    PL2'0'                   JULIAN DAYS\nYEAR     DC    PL2'0'                   YEAR\nMO       DC    PL2'0'                   MONTH\nDAY      DC    PL2'0'                   DAY\nDAYSINMO EQU   *\n         DC    PL2'0'\n         DC    PL2'0'\n         DC    PL2'1'                   JANUARY\n         DC    PL2'31'                  31 DAYS\n         DC    PL2'2'                   FEBRUARY\nFEBDAYS  DC    PL2'0'                   INITIALIZED TO 0 DAYS\n         DC    PL2'3'                   MARCH\n         DC    PL2'31'                  31 DAYS\n         DC    PL2'4'                   APRIL\n         DC    PL2'30'                  30 DAYS\n         DC    PL2'5'                   MAY\n         DC    PL2'31'                  31 DAYS\n         DC    PL2'6'                   JUNE\n         DC    PL2'30'                  30 DAYS\n         DC    PL2'7'                   JULY\n         DC    PL2'31'                  31 DAYS\n         DC    PL2'8'                   AUGUST\n         DC    PL2'31'                  31 DAYS\n         DC    PL2'9'                   SEPTEMBER\n         DC    PL2'30'                  30 DAYS\n         DC    PL2'10'                  OCTOBER\n         DC    PL2'31'                  31 DAYS\n         DC    PL2'11'                  NOVEMBER\n         DC    PL2'30'                  30 DAYS\n         DC    PL2'12'                  DECEMBER\n         DC    PL2'31'                  31 DAYS\n         DC    PL2'99'\n         DC    PL2'99'\n         SPACE 3\nDBLWRK   DS    D\nSTORM    DS    2F\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "LDROP": {"ttr": 4109, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x891\\x8f\\x00\\x891\\x8f\\x108\\x00Q\\x00Q\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-11-14T00:00:00", "modifydate": "1989-11-14T10:38:00", "lines": 81, "newlines": 81, "modlines": 0, "user": "HMDEAN"}, "text": "         MACRO\n&NAME    LDROP &W1,&W2\n         GBLB  &LUSED\n         GBLC  &USENM(50),&USEW(25)\n         LCLA  &A,&B,&C,&D,&E\n         LCLB  &F\n         LCLC  &X1,&X2\n         AIF   ('&NAME' EQ '').NONAME\n&NAME    DS    0H .                     NAME DEFINED\n.NONAME  AIF   (&LUSED).CNTU\n         MNOTE 8,'USER ERROR - LUSE HAS NEVER BEEN USED'\n         MEXIT\n.CNTU    ANOP\n&C       SETA  N'&SYSLIST\n         AIF   (&C GT 0).OK1\n         MNOTE 4,'NO OPERAND(S) ON LDROP, MACRO IGNORED'\n         MEXIT\n.OK1     AIF   ('&W1' EQ '*').DROPALL\n&A       SETA  1\n.LOOP    AIF   (&A GT &C).MEND\n&X1      SETC  '&SYSLIST(&A)'\n&B       SETA  1\n&F       SETB  0\n.LL1     AIF   ('&USEW(&B)' EQ '&X1').DROPIT\n         AIF   ('&USEW(&B)' EQ '').LL1A\n&B       SETA  &B+1\n         AIF   (&B LE 25).LL1\n.LL1A    AIF   (&F).GETNEXT\n         MNOTE 8,'USER ERROR - &SYSLIST(&A) NOT LUSED'\n.GETNEXT ANOP\n&A       SETA  &A+1\n         AGO   .LOOP\n.DROPIT  ANOP\n&D       SETA  (&B*2)-1\n         MNOTE *,'&USEW(&B) WAS BASE FOR &USENM(&D)&USENM(&D+1)'\n.*       CLEAN UP USEW ARRAY FIRST\n&E       SETA  &B                       SET POINTER\n.CL1     AIF   (&E EQ 25).NULLAST\n&USEW(&E) SETC '&USEW(&E+1)'\n&E       SETA  &E+1\n         AIF   ('&USEW(&E)' EQ '').CL2\n         AGO   .CL1\n.NULLAST ANOP\n&USEW(25) SETC ''\n.*       NOW - THE HARD PART, CLEAN UP USENM\n.CL2     AIF   (&D GE 49).NULBOTH\n&USENM(&D) SETC '&USENM(&D+2)'\n&USENM(&D+1) SETC '&USENM(&D+3)'\n&D       SETA  &D+2\n         AIF   ('&USENM(&D)' EQ '').GOTO\n         AGO   .CL2\n.NULBOTH ANOP\n&USENM(49) SETC ''\n&USENM(50) SETC ''\n.GOTO    AIF   (&F).LL1                 TRY AGAIN\n         DROP  &SYSLIST(&A) .           GEN DROP STMT\n&F       SETB  1                        NO MULTI-DROPS\n         AGO   .LL1                     CLEAN ANY REMAINING ENTRIES\n.DROPALL MNOTE *,'ALL KNOWN BASE REGISTERS BEING DROPPED'\n&B       SETA  1\n.DD1     AIF   ('&USEW(&B)' EQ '').DDONE\n         MNOTE *,'&USEW(&B) WAS BASE FOR &USENM(&B*2-1)&USENM(&B*2)'\n&B       SETA  &B+1\n&F       SETB  1\n         AGO   .DD1\n.DDONE   AIF   (&F).DDTWO\n         MNOTE 4,'** NO REGISTERS IN USE TO BE LDROP''ED **'\n         MEXIT\n.DDTWO   ANOP\n&A       SETA  1\n.CLEAR   AIF   (&A GT 25).MEND\n         AIF   ('&USEW(&A)' EQ '').NODRP\n         DROP  &USEW(&A) .                  GENERATE DROP STMT\n.NODRP   ANOP\n&USEW(&A) SETC ''\n&B       SETA  (&A*2)-1\n&USENM(&B) SETC ''\n&USENM(&B+1) SETC ''\n&A       SETA  &A+1\n         AGO   .CLEAR\n.MEND    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LEAVE": {"ttr": 4112, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x891\\x8f\\x00\\x891\\x8f\\x108\\x00\\x0e\\x00\\x0e\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-11-14T00:00:00", "modifydate": "1989-11-14T10:38:00", "lines": 14, "newlines": 14, "modlines": 0, "user": "HMDEAN"}, "text": "         MACRO\n&NAME    LEAVE &EQ,&RC=\n         GBLC  &LV,&SP\n&NAME    LR    2,13\n         L     13,4(13)\n         AIF   ('&RC' EQ '').L0\n         LA    15,&RC         LOAD THE RETURN CODE\n.L0      STM   15,1,16(13)  STORE RETURN REGS\n         AIF   ('&LV' EQ '').L1  ANYTHING TO FREE?\n         FREEMAIN R,LV=&LV,SP=&SP,A=(2)  FREE THE AREA\n.L1      RETURN (14,12),T     RETURN FROM WHENCE WE CAME\n         AIF   ('&EQ' NE 'EQ').L4  REGISTERS TOO?\n         REGS\n.L4      MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LSPACE": {"ttr": 4353, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x891\\x8f\\x00\\x891\\x8f\\x108\\x04\\x00\\x04\\x00\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-11-14T00:00:00", "modifydate": "1989-11-14T10:38:00", "lines": 1024, "newlines": 1024, "modlines": 0, "user": "HMDEAN"}, "text": "LSP      TITLE 'ISSUE LSPACE SVC (78) FOR ONLINE DASD'      *HMD 05/80*\n         LCLB  &XA                    MVS/XA SUPPORT        *HMD 12/85*\n&XA      SETB  1                      SET TO ZERO FOR       *HMD 12/85*\n*                                     MVS/SP 1.3.X          *HMD 12/85*\n*********************************************************** *HMD 12/85*\n**  NOTE: THIS COMMAND PROCESSOR WILL RUN ON  'ONLY'     ** *HMD 12/85*\n**        MVS/SP 1.3.X OR HIGHER OPERATING SYSTEMS.      ** *HMD 12/85*\n**                                                       ** *HMD 12/85*\n**        MVS/XA SUPPORT IS PROVIDED VIA THE '&XA' SET   ** *HMD 12/85*\n**        SYMBOL ABOVE.                                  ** *HMD 12/85*\n*********************************************************** *HMD 12/85*\nLSPACE   CSECT\n         AIF   (NOT &XA).X001                               *HMD 12/85*\nLSPACE   AMODE 31             SET ADDRESSING MODE           *HMD 12/85*\nLSPACE   RMODE ANY            SET RESIDENCY MODE            *HMD 12/85*\n.X001    ANOP                                               *HMD 12/85*\n         TSOENTER REGS=YES,PL=(CPPL,PARSE,IO),              *HMD 12/85*X\n               WORK=LDYNAMIC,CPR=Y,SP=1                     *HMD 12/85*\n         LUSE  CVTMAP,R3      ADDRESS THE CVT               *HMD 12/85*\n         LUSE  UCB,R4         ADDRESS THE UCB DSECT         *HMD 05/80*\n         LUSE  IKJPARMD,R9    ESTABLISH PDL ADDRESSIBILITY  *HMD 01/86*\n         SPACE 2                                            *HMD 01/86*\n         INUSE ,              SEE WHO'S ON FIRST            *HMD 01/86*\n         EJECT                                              *HMD 05/80*\n*                                                           *HMD 05/80*\n*  CLEAR THE WORK AREA                                      *HMD 05/80*\n*                                                           *HMD 05/80*\n         LA   R2,TSOUSER               GET START OF W/A     *HMD 05/80*\n         LA   R3,LDYNAMIC              LENGTH TO CLEAR      *HMD 05/80*\n         SR   R4,R4                    CLEAR R4             *HMD 05/80*\n         SR   R5,R5                    CLEAR R5             *HMD 05/80*\n         MVCL R2,R4                    C L E A R  L O N G   *HMD 05/80*\n*                                                           *HMD 05/80*\n*  GET PUTLINE SERVICE ROUTINE IN STORAGE                   *HMD 05/80*\n*                                                           *HMD 05/80*\n         LOAD EP=IKJPUTL                                    *HMD 05/80*\n         ST   R0,ADDRPUTL              SAVE PUTLINE ADDR    *HMD 05/80*\n         EJECT\n***********************************************************************\n* CALLTSSR TO PARSE (ENTRY POINT IKJPARS); ON RETURN PPLRANS --> PDL  *\n* HANDLE ALL ERROR CODES RETURNED BY PARSE USING GENERAL FAIL SERVICE *\n* ROUTINE.                                                            *\n***********************************************************************\n*                                                                     *\nPARSE    MVC   PPLPCL,=V(PARMTAB)      INSERT PARMTAB ADDR  *HMD 05/80*\n         XC    TSOECB,TSOECB           CLEAR ECB            *HMD 05/80*\n         CALLTSSR EP=IKJPARS,MF=(E,PPL)\n         LTR   R15,R15                 SEE IF RETURN CODE ZERO\n         BZ    GOODPARS                IF YES GO TO GOOD PARS ROUTINE\n         C     R15,RC4                 RETURN CODE OF 4     *HMD 05/80*\n         BE    SETCD                   SET RC=8             *HMD 05/80*\n         C     R15,RC20                RETURN CODE OF 20    *HMD 05/80*\n         BE    SETCD                   SET RC=8             *HMD 05/80*\n         EJECT                                              *HMD 05/80*\n***********************************************************************\n*                                                                     *\n*        FORMAT THE GENERAL FAIL (IKJEFF19) PARM BLOCK                *\n*                                                                     *\n***********************************************************************\n         ST    R15,GFRCODE             SAVE RETURN CODE     *HMD 05/80*\n         MVI   GFCALLID+1,GFPARSE      INDICATE PARSE       *HMD 05/80*\n         LA    R5,CPPL                 GET CPPL ADDRESS     *HMD 05/80*\n         ST    R5,GFCPPLP              POINT FOR IKJEFF19   *HMD 05/80*\n         LA    R5,TSOECB               GET ECB ADDRESS      *HMD 05/80*\n         ST    R5,GFECBP               SAVE IN GFPL         *HMD 05/80*\n         LA    R1,GFCBPTR              POINT TO GFPL        *HMD 05/80*\n         ST    R1,GFPARMP              SAVE PARM POINTER    *HMD 05/80*\n         LA    R1,GFPARMP              INDIRECT POINTER     *HMD 05/80*\n         XC    TSOECB,TSOECB           CLEAR ECB            *HMD 05/80*\n*                                                           *HMD 05/80*\n         LINK  EP=IKJEFF19             LINK TO GNRLFAIL     *HMD 05/80*\n*                                                           *HMD 05/80*\n         LTR   R15,R15                 GNRLFAIL OK?         *HMD 05/80*\n         BZ    SETCD                   YES, RETURN TO MVS   *HMD 05/80*\n         CVD   R15,DEC                 CONVERT RC           *HMD 05/80*\n         UNPK  RUNPK,DEC+6(2)          UNPK RETURN CODE     *HMD 05/80*\n         OI    RUNPK+2,C'0'            FIX SIGN             *HMD 05/80*\n         MVC   GFERR(GNRLERRL),GNRLERR MOVE GNRL ERROR MSG  *HMD 05/80*\n         MVC   GFERRND-3(2),RUNPK+1    MOVE R15 VALUE       *HMD 05/80*\n         MVC   OLD,SEGNUM              MOVE NUMBER OF SEGS  *HMD 05/80*\n         LA    R1,GFERR                GET ADDR OF MSG      *HMD 05/80*\n         ST    R1,OLDADDR              SAVE IN OLD          *HMD 05/80*\n         L     R15,ADDRPUTL            GET PUTLINE ADDR     *HMD 05/80*\n*                                                           *HMD 05/80*\n         PUTLINE PARM=PTPB,OUTPUT=(OLD,TERM,SINGLE,INFOR),  *HMD 05/80*X\n               MF=(E,IOPL),ENTRY=(15)  PUT OUT ERROR MSG    *HMD 05/80*\n*                                                           *HMD 05/80*\nSETCD    LA    R15,8                   RETURN CODE OF 8     *HMD 05/80*\n         B     FINISH                  END IT NOW           *HMD 05/80*\n*                                                                     *\n         EJECT\n***********************************************************************\n* SET UP ADDRESSABILITY TO PDL & LOAD REG 6 WITH ADDRESS OF DSNAME PDE*\n***********************************************************************\n*                                                                     *\nGOODPARS DS    0H\n         MVC   PARMNM,BLANKS           CLEAR NAME AREA      *HMD 05/80*\n         L     R9,PPLRANS        LOAD PTR TO PARS ANSWER    *HMD 01/86*\n         LA    R6,VOLUMES        LOAD PTR TO DSNAME LIST    *HMD 01/86*\n         LA    R7,KWORD          LOAD PTR TO FLAG LIST      *HMD 01/86*\n         CLI   1(R7),X'00'       Q. ANY KEYWORDS            *HMD 01/86*\n         BNE   SETSW             A. YES - TURN ON SWITCH\n*                                A. NO  - FALL THRU\nLDPTR    L     R7,0(R6)          SET UP PTR TO VOLUME LIST\nCHKL     LH    R8,4(R6)          SET UP LENGTH OF VOL LIST\n         ST    R8,SAVELGTH\n         LTR   R8,R8             IS LENGTH ZERO ?\n         BZ    DEFAULT           YES - ASSUME ALL VOLUMES\n         BCTR  R8,0\n         EX    R8,MOVEVOL\n         SPACE 2                                            *HMD 01/86*\n         INUSE ,                                            *HMD 05/80*\n*                                                                     *\n         EJECT\n***********************************************************************\n*    STEP THROUGH SEQUENCE CHECKING FOR COMMAND PARAMETER ENTRY TYPE  *\n***********************************************************************\n*                                                                     *\n         ST    R6,PARSAVE\n         CLC   PARMNM(3),=C'ALL'       ALL VOLUMES REQUEST  *HMD 05/80*\n         BE    DEFAULT                 TAKE THE DEFAULT     *HMD 05/80*\n         CLC   PARMNM(6),=C'PUBLIC'\n         BE    PUBLWD\n         CLC   PARMNM(7),=C'PRIVATE'\n         BE    PRIVWD\n         CLC   PARMNM(7),=C'STORAGE'\n         BE    STORWD\n         BAL   R5,VOLKYWD              IS REQUEST FOR VOLUME ID ?\n         CLI   REQFLG,VOLFLG           IS REQUEST FOR VOLUME???\n         BE    CHKPDE                  YES, GO TO IT\n         BAL   R5,UCBKYWD              IS REQUEST FOR UCB ADDRESS ?\n         CLI   REQFLG,UCBFLG           IS REQUEST FOR UCB?  *HMD 05/80*\n         BE    CHKPDE                  YES, GET NEXT ONE    *HMD 05/80*\n         BAL   R5,DEVKYWD              IS REQUEST FOR DEVICE TYPE ?\n         CLI   REQFLG,DEVFLG           REQUEST FOR DEVICE?  *HMD 05/80*\n         BE    CHKPDE                  CHECK NEXT REQUEST   *HMD 05/80*\n*                                                                     *\n         EJECT\n***********************************************************************\n*        HANDLE REQEST TO DISPLAY PUBLIC VOLUMES                      *\n***********************************************************************\nPUBLWD   DS    0H                   REQUEST IS FOR 'PUBLIC' *HMD 05/80*\n         L     R3,CVTPTR            GET CVT ADDRESS         *HMD 05/80*\n         XC    IOSWORK,IOSWORK      CLEAR WORK AREA         *HMD 01/86*\n         XC    IOSADDR,IOSADDR      INITIALIZE UCB ADDRESS  *HMD 01/86*\n         MVI   IOSTYPE,UCB3DACC     REQUEST ONLY DASD VOLS  *HMD 01/86*\nNEXTPUB  DS    0H                   UCB SEARCH LOOP         *HMD 01/86*\n         L     R15,CVTUCBSC         GET UCB SEARCH ROUTINE  *HMD 01/86*\n         SPACE 1                                            *HMD 01/86*\n         CALL  (15),(IOSWORK,IOSTYPE,IOSADDR),VL,MF=(E,IOSCALL)\n         SPACE 1                                            *HMD 01/86*\n         LTR   R15,R15              END OF SEARCH?          *HMD 01/86*\n         BNZ   CHKPEOT              YES, MUST NOT BE PUBLIC *HMD 05/80*\n         SPACE 1                                            *HMD 01/86*\nPUBCHK   DS    0H                   CHECK THE UCB CAREFULLY *HMD 05/80*\n         L     R4,IOSADDR           GET THE UCB ADDRESS     *HMD 01/86*\n         TM    UCBSTAT,UCBONLI      ONLINE?                 *HMD 05/80*\n         BNO   NEXTPUB              NO, GET NEXT UCB        *HMD 01/86*\n         MVI   REQFLG,PUBFLG        TURN ON PUBLIC FLAG     *HMD 05/80*\n         TM    UCBSTAB,UCBBPUB      IS THIS A PUBLIC VOL?   *HMD 05/80*\n         BZ    NEXTPUB              THIS IS NOT PUBLIC      *HMD 01/86*\n         OI    GOTFLG,GOTPUBL       WE GOT A PUBLIC VOL     *HMD 06/82*\n         B     SVC78                GO ISSUE SVC 78         *HMD 06/82*\n         SPACE 1                                            *HMD 01/86*\nCHKPEOT  DS    0H                   CHECK FOR PUBLIC EOT    *HMD 06/82*\n         TM    GOTFLG,GOTPUBL       DID WE GET A PUB VOL?   *HMD 06/82*\n         BZ    NOPUBL               NOPE..INDICATE ERROR    *HMD 06/82*\n         B     CHKFLG               GO CHECK FLAGS          *HMD 06/82*\n         EJECT\n***********************************************************************\n*        HANDLE REQEST TO DISPLAY PRIVATE VOLUMES                     *\n***********************************************************************\nPRIVWD   DS    0H                                           *HMD 05/80*\n         L     R3,CVTPTR            GET CVT ADDRESS         *HMD 05/80*\n         XC    IOSWORK,IOSWORK      CLEAR WORK AREA         *HMD 01/86*\n         XC    IOSADDR,IOSADDR      INITIALIZE UCB ADDRESS  *HMD 01/86*\n         MVI   IOSTYPE,UCB3DACC     REQUEST ONLY DASD VOLS  *HMD 01/86*\n         SPACE 1                                            *HMD 01/86*\nNEXTPRIV DS    0H                   PRIVATE VOLUME LOOP     *HMD 01/86*\n         L     R15,CVTUCBSC         GET UCB SEARCH ROUTINE  *HMD 01/86*\n         SPACE 1                                            *HMD 01/86*\n         CALL  (15),(IOSWORK,IOSTYPE,IOSADDR),VL,MF=(E,IOSCALL)\n         SPACE 1                                            *HMD 01/86*\n         LTR   R15,R15              END OF SEARCH?          *HMD 01/86*\n         BNZ   CHKFLG               YES, MUST NOT BE PRIVATE*HMD 05/80*\n         SPACE 1                                            *HMD 01/86*\nCHKPRIV  DS    0H\n         L     R4,IOSADDR           GET UCB ADDRESS         *HMD 01/86*\n         TM    UCBSTAT,UCBONLI      ONLINE DEVICE?          *HMD 05/80*\n         BNO   NEXTPRIV             NO, GET NEXT UCB        *HMD 01/86*\n         MVI   REQFLG,PRIVFLG       TURN ON PRIVATE FLAG    *HMD 01/86*\n         TM    UCBSTAB,UCBBPRV      MOUNTED PRIVATE?        *HMD 05/80*\n         BO    SVC78                GO GET FREE SPACE       *HMD 05/80*\n         B     NEXTPRIV             ELSE GO GET NEXT VOLUME *HMD 01/86*\n         EJECT\n***********************************************************************\n*        HANDLE REQEST TO DISPLAY STORAGE VOLUMES                     *\n***********************************************************************\nSTORWD   DS    0H                                           *HMD 05/80*\n         L     R3,CVTPTR            GET CVT ADDRESS         *HMD 05/80*\n         XC    IOSWORK,IOSWORK      CLEAR WORK AREA         *HMD 01/86*\n         XC    IOSADDR,IOSADDR      INITIALIZE UCB ADDRESS  *HMD 01/86*\n         MVI   IOSTYPE,UCB3DACC     REQUEST ONLY DASD VOLS  *HMD 01/86*\nNEXTSTOR DS    0H                                           *HMD 01/86*\n         L     R15,CVTUCBSC         GET UCB SEARCH ROUTINE  *HMD 01/86*\n         SPACE 1                                            *HMD 01/86*\n         CALL  (15),(IOSWORK,IOSTYPE,IOSADDR),VL,MF=(E,IOSCALL)\n         SPACE 1                                            *HMD 01/86*\n         LTR   R15,R15              END OF SEARCH?          *HMD 01/86*\n         BNZ   CHKFLG               YES, MUST NOT BE STORAGE*HMD 05/80*\n         SPACE 1                                            *HMD 01/86*\nCHKSTOR  DS    0H\n         L     R4,IOSADDR           GET UCB ADDRESS         *HMD 01/86*\n         TM    UCBSTAT,UCBONLI    ONLINE UCB?               *HMD 05/80*\n         BNO   NEXTSTOR             NO, GET NEXT UCB        *HMD 01/86*\n         MVI   REQFLG,STORFLG     TURN ON STORAGE FLAG      *HMD 05/80*\n         TM    UCBSTAB,UCBBSTR    STORAGE VOLUME?           *HMD 05/80*\n         BO    SVC78              GO GET FREE SPACE         *HMD 05/80*\n         B     NEXTSTOR           RETURN FOR MORE           *HMD 01/86*\n         EJECT\n***********************************************************************\n*        IF REQUEST IS FOR VOL(S), THEN PROCESS; ELSE BYPASS          *\n***********************************************************************\nVOLKYWD  DS    0H\n         L     R3,CVTPTR            GET CVT ADDRESS         *HMD 05/80*\n         XC    IOSWORK,IOSWORK      CLEAR WORK AREA         *HMD 01/86*\n         XC    IOSADDR,IOSADDR      INITIALIZE UCB ADDRESS  *HMD 01/86*\n         MVI   IOSTYPE,0            CHECK ALL DEVICE TYPES  *HMD 01/86*\nREQNEXT  DS    0H                                           *HMD 01/86*\n         L     R15,CVTUCBSC         GET UCB SEARCH ROUTINE  *HMD 01/86*\n         SPACE 1                                            *HMD 01/86*\n         CALL  (15),(IOSWORK,IOSTYPE,IOSADDR),VL,MF=(E,IOSCALL)\n         SPACE 1                                            *HMD 01/86*\n         LTR   R15,R15              END OF SEARCH?          *HMD 01/86*\n         BNZR  R5                   COULD NOT FIND VOLUME   *HMD 01/86*\n         SPACE 1\nSERCHEK  DS    0H                                           *HMD 01/86*\n         L     R4,IOSADDR           GET THE UCB ADDRESS     *HMD 01/86*\n         SPACE 1                                            *HMD 01/86*\n         CLI   REQFLG,ALLFLG        REQUEST FOR ALL?        *HMD 05/80*\n         BE    CKVOL                YES, DO THIS ONE        *HMD 05/80*\n         SPACE 1                                            *HMD 01/86*\n         L     R6,SAVELGTH          OPERAND LENGTH IN REG 6 *HMD 01/86*\n         BCTR  R6,0                 GET MACHINE LENGTH      *HMD 01/86*\n         EX    R6,COMPARE           COMPARE VOLSERS         *HMD 01/86*\n         BNE   REQNEXT              NE - TRY AGAIN          *HMD 01/86*\n*                                   EQ - PROCEEED           *HMD 01/86*\n         SPACE 1                                            *HMD 01/86*\nCKVOL    DS    0H                                           *HMD 05/80*\n         TM    UCBTBYT3,UCB3DACC    IS THIS A DASD DEVICE?  *HMD 01/86*\n         BNO   CKALL                NO, CHECK FOR ERROR     *HMD 01/86*\n         TM    UCBSTAT,UCBONLI      DEVICE ONLINE ?         *HMD 05/80*\n         BNO   CKALL1               NO-ISSUE MSG, RETURN    *HMD 05/80*\n         CLI   REQFLG,ALLFLG        ALL ONLINE DEVICES?     *HMD 05/80*\n         BE    CALLLSP              CALL LSPACE SVC         *HMD 05/80*\n         MVI   REQFLG,VOLFLG        TURN VOL FLAG ON        *HMD 05/80*\nCALLLSP  B     SVC78                FIND SPACE ATTRIBUTES   *HMD 05/80*\n*\nCKALL    CLI   REQFLG,ALLFLG        ARE WE LOOKING AT ALL?  *HMD 05/80*\n         BE    REQNEXT              YES, CHECK NEXT UCB     *HMD 01/86*\n         B     NODASD               VOLSER IS IN ERROR      *HMD 01/86*\n*                                                           *HMD 05/80*\nCKALL1   CLI   REQFLG,ALLFLG        ARE WE LOOK AT ALL?     *HMD 05/80*\n         BE    REQNEXT              YES, GET NEXT UCB       *HMD 01/86*\n         B     MSG08                DEVICE IS NOT MOUNTED   *HMD 05/80*\n*                                                           *HMD 05/80*\n         EJECT\n***********************************************************************\n*        IF REQUEST IS FOR UCB(S), THEN PROCESS; ELSE BYPASS          *\n***********************************************************************\nUCBKYWD  DS    0H\n         L     R3,CVTPTR            GET CVT ADDRESS         *HMD 05/80*\n         XC    IOSWORK,IOSWORK      CLEAR WORK AREA         *HMD 01/86*\n         XC    IOSADDR,IOSADDR      INITIALIZE UCB ADDRESS  *HMD 01/86*\n         MVI   IOSTYPE,0            REQUEST ALL DEVICES     *HMD 01/86*\n         SPACE 1                                            *HMD 01/86*\nREQNEXT1 DS    0H                                           *HMD 01/86*\n         L     R15,CVTUCBSC         GET UCB SEARCH ROUTINE  *HMD 01/86*\n         SPACE 1                                            *HMD 01/86*\n         CALL  (15),(IOSWORK,IOSTYPE,IOSADDR),VL,MF=(E,IOSCALL)\n         SPACE 1                                            *HMD 01/86*\n         LTR   R15,R15              END OF SEARCH?          *HMD 01/86*\n         BNZR  R5                   COULD NOT FIND VOLUME   *HMD 01/86*\n         SPACE 1                                            *HMD 05/80*\nUCBCHEK  DS    0H                                           *HMD 01/86*\n         L     R4,IOSADDR           GET UCB ADDRESS         *HMD 01/86*\n         SPACE 1                                            *HMD 01/86*\n         MVC   VOLSER(6),UCBVOLI  SAVE VOLSER FOR MSG       *HMD 01/86*\n         L     R6,SAVELGTH        GET LENGTH OF OPERAND     *HMD 01/86*\n         BCTR  R6,0               DECREMENT FOR EX          *HMD 01/86*\n         EX    R6,COMPUCB         COMPARE VOLSERS           *HMD 01/86*\n         BNE   REQNEXT1           IF UNEQUAL, GET NEXT UCB  *HMD 01/86*\n         SPACE 1\nCHKUCB   DS    0H                  CHECK UCB FIELDS         *HMD 05/80*\n         MVI   REQFLG,UCBFLG       TURN ON UCB REQUEST FLAG *HMD 05/80*\n         TM    UCBTBYT3,UCB3DACC   IS THIS A DASD DEVICE?   *HMD 01/86*\n         BNO   NODASD              NO, MUST BE AN ERROR     *HMD 01/86*\n         TM    UCBSTAT,UCBONLI     IS DEVICE ONLINE ?       *HMD 05/80*\n         BNO   MSG0C               NO - ISSUE MSG, RETURN   *HMD 05/80*\n         B     SVC78               RIGHT TYPE - GO TO LSPACE SVC\n*\n         EJECT\nDEVKYWD  DS    0H                 PROCESS DEVICE KEYWORD\n***********************************************************************\n*        IF REQUEST IS DEVNAME(S), THEN PROCESS; ELSE BYPASS          *\n***********************************************************************\n         AIF   (&XA).X003                                   *HMD 01/86*\n***********************************************************************\n*                                                                     *\n*             PREPARE TO COUNT NUMBER OF UCB ADDRESSES                *\n*                                                                     *\n***********************************************************************\nDEVCOUNT L     R3,CVTPTR            GET CVT ADDRESS         *HMD 01/86*\n         XC    IOSWORK,IOSWORK      CLEAR WORK AREA         *HMD 01/86*\n         XC    IOSADDR,IOSADDR      INITIALIZE UCB ADDRESS  *HMD 01/86*\n         XC    CNTSAVE,CNTSAVE      CLEAR DEVICE COUNTER    *HMD 01/86*\n         MVI   IOSTYPE,0            COUNT ALL THE DEVICES   *HMD 01/86*\n         SPACE 1                                            *HMD 01/86*\nDEVLOOP  DS    0H                                           *HMD 01/86*\n         L     R15,CVTUCBSC         GET UCB SEARCH ROUTINE  *HMD 01/86*\n         SPACE 1                                            *HMD 01/86*\n         CALL  (15),(IOSWORK,IOSTYPE,IOSADDR),VL,MF=(E,IOSCALL)\n         SPACE 1                                            *HMD 01/86*\n         L     R1,CNTSAVE         LOAD COUNT SAVE           *HMD 01/86*\n         LA    R1,1(,R1)          INCREMENT COUNTER         *HMD 01/86*\n         ST    R1,CNTSAVE         SAVE COUNTER              *HMD 01/86*\n         SPACE 1                                            *HMD 01/86*\n         LTR   R15,R15            END OF SEARCH?            *HMD 01/86*\n         BZ    DEVLOOP            NO, CONTINUE              *HMD 01/86*\n         SPACE 1                                            *HMD 01/86*\n* R1 NOW CONTAINS THE NUMBER OF DEVICES PLUS ONE            *HMD 01/86*\n         BCTR  R1,0               DECREMENT COUNT           *HMD 01/86*\n         LR    R9,R1              SAVE COUNT IN R9          *HMD 01/86*\n*\nLOAD     DS    0H\n*                                                           *HMD 05/80*\n         LOAD  EP=DEVNAMET        LOAD MASK TABLE\n*                                                           *HMD 05/80*\n         LR    R10,R0             SAVE MASK TABLE ADDRESS   *HMD 05/80*\n*                                                           *HMD 05/80*\n         LOAD  EP=DEVMASKT        LOAD MASK TABLE           *HMD 05/80*\n*                                                           *HMD 05/80*\n         LR    R11,R0             SAVE MASK TABLE ADDRESS   *HMD 05/80*\n*                                                           *HMD 05/80*\n         L     R0,0(,R10)         # OF NAME ENTRIES IN R0   *HMD 05/80*\n         LA    R15,4(,R10)        FIRST ENTRY FROM DEVNAMET *HMD 05/80*\n*                                                           *HMD 05/80*\nTABLSCAN DS    0H\n         CLC   PARMNM(8),0(R15)   COMPARE FOR CORRECT NAME\n         BE    HAVENAME           YES, WE GOT IT\n         LA    R15,12(,R15)       INCREMENT NAMET POINTER\n         BCT   R0,TABLSCAN        READ AGAIN\n         AGO   .X004                                        *HMD 01/86*\n.X003    ANOP                                               *HMD 01/86*\n***********************************************************************\n**                                                                   **\n**  USE ROUTINE IEFEB4UV TO SCAN ELIGIBLE DEVICE TABLE FOR MVS/XA    **\n**                                                                   **\n***********************************************************************\nDEVSRCH  DS    0H                 SCAN DEVICE TABLE         *HMD 01/86*\n         ST    R5,SAVERETN        SAVE RETURN ADDRESS       *HMD 01/86*\n         LA    R0,EUTAB           GET TABLE ADDRESS         *HMD 01/86*\n         LA    R1,EFLAGS          GET FLAGS ADDRESS         *HMD 01/86*\n         STM   R0,R1,EB4PARMS     SAVE PARAMETERS           *HMD 01/86*\n         MVC   EFLAGS,=X'1000'    SET REQUEST FLAGS         *HMD 01/86*\n         MVC   EUNAME,PARMNM      MOVE UNIT NAME TO LIST    *HMD 01/86*\n         XC    EULIST(8),EULIST   CLEAR UCB LIST AND ZERO   *HMD 01/86*\n         SPACE 1                                            *HMD 01/86*\n         LA    R1,EB4PARMS        GET PARM LIST ADDRESS     *HMD 01/86*\n         SPACE 1                                            *HMD 01/86*\n         LINK  EP=IEFEB4UV,SF=(E,EB4LINK)                   *HMD 01/86*\n         SPACE 1                                            *HMD 01/86*\n         LTR   R15,R15            CHECK RETURN CODE         *HMD 01/86*\n         BNZ   PUTNON             UNIT NAME NOT FOUND       *HMD 01/86*\n         OI    GOTFLG,GOTFREEM    INDICATE FREEMAIN NEEDED  *HMD 01/86*\n         SPACE 1                                            *HMD 01/86*\n         L     R10,EULIST          GET LIST ADDRESS         *HMD 01/86*\n         L     R6,USPNUM-ULIST(R10)                         *HMD 01/86*\n*                                   GET NUMBER OF ENTRIES   *HMD 01/86*\n         LA    R7,UCBPTRS-ULIST(R10)                        *HMD 01/86*\n*                                   GET POINTER TO UCB TBL  *HMD 01/86*\nEB4SPAC  L     R4,0(,R7)            POINT TO NEXT UCB       *HMD 01/86*\n         LA    R5,EB4CNTR           INDICATE RETURN ADDRESS *HMD 01/86*\n         MVI   REQFLG,DEVFLG        INDICATE DEVICE SEARCH  *HMD 01/86*\n         TM    UCBTBYT3,UCB3DACC    IS THIS DIRECT ACCESS   *HMD 01/86*\n         BNO   NODASD               NO, SEND MESSAGE        *HMD 01/86*\n         TM    UCBSTAT,UCBONLI      ONLINE DASD?            *HMD 01/86*\n         BZ    NOTONL               NO, NOT ONLINE          *HMD 01/86*\n         SPACE 1                                            *HMD 01/86*\n         BAL   R5,SVC78             REPORT ON SPACE USAGE   *HMD 01/86*\n         SPACE 1                                            *HMD 01/86*\nEB4CNTR  LA    R7,L'UCBPTRS(R7)     POINT TO NEXT UCB       *HMD 01/86*\n         BCT   R6,EB4SPAC           CONTINUE WITH NEXT UCB  *HMD 01/86*\n         SPACE 1                                            *HMD 01/86*\n         L     R5,SAVERETN          RESTORE RETURN ADDR     *HMD 01/86*\n         BR    R5                   CHECK NEXT OPERAND      *HMD 01/86*\n.X004    ANOP                                               *HMD 01/86*\n         EJECT                                              *HMD 01/86*\n         AIF   (&XA).X023         BYPASS FOR MVS/XA         *HMD 01/86*\n         SPACE 1                                            *HMD 01/86*\n***********************************************************************\n**                                                                   **\n**  WE'VE FOUND A MATCH IN THE DEVICE NAME TABLE - SELECT THE UNIT   **\n**                                                                   **\n***********************************************************************\n         SPACE 1                                            *HMD 01/86*\nHAVENAME LH    R0,0(,R11)         GET # OF DEVMASKT ENTRIES *HMD 05/80*\n         LA    R1,4(,R11)         GET MASK ENTRY            *HMD 05/80*\n*                                                           *HMD 05/80*\nFINDMASK CLC   8(4,R15),4(R1)     ARE DEVICE TYPES EQUAL    *HMD 05/80*\n         BE    HAVEMASK           YES - HAVE CORRECT MASK   *HMD 05/80*\n         LA    R1,8(R1,R9)        NO - INCR MASK POINTER    *HMD 05/80*\n         BCT   R0,FINDMASK        GET NEXT MASK ENTRY       *HMD 05/80*\n         B     PUTNON             PUT OUT MESSAGE           *HMD 05/80*\n*\nHAVEMASK DS    0H                                           *HMD 05/80*\n         LA    R2,7(R1,R9)        END OF MASK ENTRY         *HMD 05/80*\n         L     R3,0(,R1)          NUMBER OF BITS THIS ENTRY *HMD 05/80*\n         LA    R4,8(,R1)          POINT TO NEXT BYTE        *HMD 05/80*\n         SR    R7,R7              CLEAR FOR CALCULATION     *HMD 05/80*\nNEXTBYTE LA    R5,8               8 BITS TO A BYTE          *HMD 05/80*\n         LA    R6,X'80'           LOAD TEST MASK            *HMD 05/80*\nNEXTBIT  TM    0(R4),0            << EXECUTED >>            *HMD 05/80*\n         EX    R6,NEXTBIT         IS THIS BIT ON?           *HMD 05/80*\n         BZ    NOTTHIS            NO, GET NEXT ONE          *HMD 05/80*\n         LA    R14,0(R7,R8)       DOUBLE INDEX              *HMD 05/80*\n*                                 TO LOOKUP ENTRY           *HMD 05/80*\n         SLR   R45,R15            CLEAR R15 FOR UCB INSERT  *HMD 05/80*\n         ICM   R15,3,0(R14)       INSERT UCB ADDRESS        *HMD 05/80*\n         TM    UCBTBYT3-UCB(15),UCB3DACC                    *HMD 01/86*\n         BNO   NODASD             NOT DIRECT ACCESS         *HMD 01/86*\n         TM    UCBSTAT-UCB(15),UCBONLI                      *HMD 01/86*\n         BZ    NOTONL             NOT ONLINE                *HMD 01/86*\n         SPACE 1                                            *HMD 01/86*\nNOTDA    DS    0H\n         ST    R3,CNTSAVE       SAVE COUNTER OF BIT ENTRIES\n         ST    R5,BITSAVE       SAVE COUNTER OF # OF BITS\n         MVI   REQFLG,DEVFLG    INDICATE DEVICE SEARCH\n         LR    R4,R15           LOAD UCB ADDRESS            *HMD 01/86*\n         BAL   R5,SVC78         CHECK FREE SPACE ON VOLUME\n         L     R3,CNTSAVE       RESTORE COUNT OF ENTRIES\n         L     R5,BITSAVE       RESTORE NUMBER OF BITS\n         SPACE 1                                            *HMD 01/86*\nCNTR     BCT   R3,NOTTHIS       CONTINUE DEVMASKT SEARCH\n         B     CHKPDE\n         SPACE 1                                            *HMD 01/86*\nNOTTHIS  DS    0H\n         LA    R7,2(,R7)        BUMP BIT COUNTER\n         SRL   R6,1             DIVIDE BY 2\n         BCT   R5,NEXTBIT       CHECK NEXT BIT\n         LA    R4,1(,R4)        NEXT BYTE\n         CR    R4,R2            MASK BIT COUNT ERROR?\n         BH    TOOMANY          YES, TELL USER\n         B     NEXTBYTE\n.X023    ANOP                                               *HMD 01/86*\n*                                                           *HMD 05/80*\n*  PUT NON-SUPPORTED MESSAGE TO TERMINAL                    *HMD 05/80*\n*                                                           *HMD 05/80*\nPUTNON   MVC   OLD,SEGNUM         ONE SEGMENT THIS TIME     *HMD 05/80*\n         LA    R1,NOSUPP          ADDRESS OF MESSAGE        *HMD 05/80*\n         ST    R1,OLDADDR         SAVE IN OLD               *HMD 05/80*\n         XC    TSOECB,TSOECB      CLEAR ECB                 *HMD 05/80*\n         L     R15,ADDRPUTL       GET PUTLINE ADDRESS       *HMD 05/80*\n         PUTLINE PARM=PTPB,OUTPUT=(OLD,TERM,SINGLE,INFOR),  *HMD 05/80*X\n               MF=(E,IOPL),ENTRY=(15)                       *HMD 05/80*\n         B     CHKPDE             CHECK FOR MORE REQUESTS   *HMD 05/80*\n*\n         SPACE 2                                            *HMD 01/86*\nNOTONL   EQU   *\n         MVC   OFFLMSG(OFFLL),OFFLID  MOVE MESSAGE TO AREA  *HMD 05/80*\n         MVC   OFFLMSG+13(3),UCBNAME  MOVE DEVICE NAME      *HMD 05/80*\n         MVC   OLD,SEGNUM             ONE SEGEMENT          *HMD 05/80*\n         LA    R1,OFFLMSG             GET MESSAGE ADDRESS   *HMD 05/80*\n         ST    R1,OLDADDR             SAVE IN OLD           *HMD 05/80*\n         L     R15,ADDRPUTL           GET PUTLINE ADDRESS   *HMD 05/80*\n         XC    TSOECB,TSOECB          CLEAR ECB             *HMD 05/80*\n         PUTLINE PARM=PTPB,OUTPUT=(OLD,TERM,SINGLE,INFOR),  *HMD 05/80*X\n               MF=(E,IOPL),ENTRY=(15)                       *HMD 05/80*\n         AIF   (&XA).X090                                   *HMD 01/86*\n         B     CNTR\n         AGO   .X091                                        *HMD 01/86*\n.X090    ANOP                                               *HMD 01/86*\n         B     EB4CNTR          SCAN NEXT UCB ADDRESS       *HMD 01/86*\n.X091    ANOP                                               *HMD 01/86*\n*\n*                                                           *HMD 05/80*\nTOOMANY  DS    0H               TOO MANY BITS IN DEVMASKT   *HMD 05/80*\n         MVC   OLD,SEGNUM       ONE SEGMENT ONLY            *HMD 05/80*\n         LA    R1,MCNTA         ADDRESS OF MESSAGE          *HMD 05/80*\n         ST    R1,OLDADDR       SAVE IN OLD                 *HMD 05/80*\n         L     R15,ADDRPUTL     GET PUTLINE ADDRESS         *HMD 05/80*\n         XC    TSOECB,TSOECB    CLEAR ECB                   *HMD 05/80*\n         PUTLINE PARM=PTPB,OUTPUT=(OLD,TERM,SINGLE,INFOR),  *HMD 05/80*X\n               MF=(E,IOPL),ENTRY=(15)                       *HMD 05/80*\n         B     CHKPDE\n         EJECT\n***********************************************************************\n*        CALL LSPACE SVC (SVC 78) AND ISSUE SPACE MESSAGE             *\n***********************************************************************\nSVC78    ST    R4,UCBSAVE        SAVE UCB ADDR FOR SEARCH   *HMD 01/86*\n         LR    R0,R4             SAVE ADDRESS OF UCB        *HMD 01/86*\n         LA    R1,VOLSPC         LOAD REG 1 WITH ADDR OF MSG AREA\n         SVC   78                ISSUE LSPACE SVC\n         LTR   R15,R15           CHECK FOR RETURN CODE ZERO\n         BZ    PUTMSG            IF ZERO, GO TO PUTMSG\n         LR    R8,R15            LOAD RETURN CODE INTO REG 15\n         B     ERRORS            GO TO CONVERT ROUTINE\n*                                                                     *\nPUTMSG   MVC   SPCMSGM(SPCMSGL),SPCMSGA   MOVE IN MESSAGE   *HMD 05/80*\n         MVC   SPCMSGM+4(3),UCBNAME       MOVE IN UCBID     *HMD 05/80*\n         MVC   SPCMSGM+9(6),UCBVOLI       MOVE IN VOLSER    *HMD 05/80*\n         L     R15,ADDRPUTL      GET PUTLINE ADDRESS        *HMD 05/80*\n         XC    TSOECB,TSOECB     CLEAR ECB                  *HMD 05/80*\n*                                                           *HMD 05/80*\n         PUTLINE PARM=PTPB,OUTPUT=(SPCMSGM,TERM,SINGLE,DATA),          X\n               MF=(E,IOPL),ENTRY=(15)                       *HMD 05/80*\n*                                                           *HMD 05/80*\n         MVC   VOLSPC1,BLANKS             CLEAR AREA        *HMD 05/80*\n         MVC   VOLSPC1(4),=H'42,0'        MOVE IN MSG LEN   *HMD 05/80*\n         MVC   VOLSPC1+9(30),VOLSPC       MOVE IN SVC78 MSG *HMD 05/80*\n         L     R15,ADDRPUTL               GET PUTLINE ADDR  *HMD 05/80*\n         XC    TSOECB,TSOECB              CLEAR ECB         *HMD 05/80*\n*                                                           *HMD 05/80*\n         PUTLINE PARM=PTPB,OUTPUT=(VOLSPC1,TERM,SINGLE,DATA),          X\n               MF=(E,IOPL),ENTRY=(15)     PUT OUT MESSAGE   *HMD 05/80*\n*                                                           *HMD 05/80*\n         EJECT                                              *HMD 05/80*\n***********************************************************************\n*        CHECK REQUEST FLAGS AND PROCESS AS INDICATED                 *\n***********************************************************************\n         CLI   FLGSW,FLGSET            IS SPECIAL FLAG SET?\n         BE    UCBFLAG                 YES, UCB INDICATION\nCHKFLGS  CLI   REQFLG,PUBFLG           PUBLIC?\n         BE    NEXTPUB                 YES\n         CLI   REQFLG,PRIVFLG          PRIVATE?\n         BE    NEXTPRIV                YES\n         CLI   REQFLG,STORFLG          STORAGE?\n         BE    NEXTSTOR                YES\n         CLI   REQFLG,MYFLG            MYVOLS (NOT SUPPORTED YET)\n         BER   R5                      YES\n         CLI   REQFLG,VOLFLG           WAS REQUEST FOR VOLSER\n         BE    REQNEXT                 YES - DO NEXT\n         CLI   REQFLG,ALLFLG           WAS REQUEST FOR ALL  *HMD 05/80*\n         BE    REQNEXT                 YES - DO NEXT        *HMD 05/80*\n         CLI   REQFLG,UCBFLG           WAS THIS A UCB REQUEST\n         BE    REQNEXT1                YES - DO NEXT\n         CLI   REQFLG,DEVFLG           WAS THIS A DEV REQUEST\n         BER   R5                      YES - PROCESS NEXT VOLSER\n         B     CHKPDE                  NONE OF ABOVE, GET NEXT\n*                                      REQUEST              *HMD 05/80*\n*                                                           *HMD 05/80*\nDEFAULT  MVC   PARMNM,=C'ALL'          ALL VOLUMES IS DEFAULT\n         MVI   REQFLG,ALLFLG           INDICATE ALL VOLUMES *HMD 05/80*\n         BAL   R5,VOLKYWD              VOLUME KEYWORD       *HMD 05/80*\n         CLI   REQFLG,ALLFLG           ARE WE PROCESSING ALL*HMD 05/80*\n         BE    CHKPDE                  YES, CHECK PDE       *HMD 05/80*\n*                                                                     *\n         EJECT                                              *HMD 05/80*\n***********************************************************************\n*        FORMAT AND 'PUTLINE' SVC78 ERROR MESSAGES                    *\n***********************************************************************\nERRORS   DS    0H                     CHECK SVC78 ERRORS\n         C     R8,RC4                 IS RETURN CODE 4\n         BE    MSG04                  YES, GOTO ROUTINE\n         C     R8,RC8                 IS RETURN CODE 8\n         BE    MSG08                  YES, GOTO ROUTINE\n         C     R8,RC12                IS RETURN CODE 12\n         BE    MSG0C                  YES, GOTO ROUTINE\n* IF WE GOT HERE, WE HAVE AN UNKNOWN RETURN CODE            *HMD 05/80*\n         CVD   R8,DEC                 CONVERT RETURN CODE\n         UNPK  RUNPK(3),DEC+6(2)      UNPACK RETURN CODE    *HMD 05/80*\n         OI    RUNPK+2,X'F0'          FIX SIGN              *HMD 05/80*\n         MVC   SVC78R(SVC78ERL),SVC78ER   MOVE ERROR MSG    *HMD 05/80*\n         MVC   SVC78N-3(2),RUNPK+1    MOVE RETURN CODE      *HMD 05/80*\n         LA    R1,SVC78R              ADDR OF MESSAGE       *HMD 05/80*\n         ST    R1,OLDADDR             SAVE IN OLD           *HMD 05/80*\n         B     PUTLNE                 GO PUT OUT MESSAGE    *HMD 05/80*\n*\nMSG04    DS    0H                                           *HMD 05/80*\n         MVC   MSG04M(RC04L),RC04A    MOVE IN MESSAGE       *HMD 05/80*\n         MVC   MSG04M+13(3),UCBNAME   MOVE IN UCB NAME\n         MVC   MSG04M+17(6),UCBVOLI   MOVE IN VOLSER\n         LA    R1,MSG04M              GET MESSAGE ADDR\n         ST    R1,OLDADDR             SAVE IN OLD           *HMD 05/80*\n         B     PUTLNE                 PUT OUT MESSAGE\n*                                                           *HMD 05/80*\nMSG08    DS    0H                                           *HMD 05/80*\n         MVC   MSG08M(RC08L),RC08A    MOVE IN MESSAGE       *HMD 05/80*\n         MVC   MSG08M+13(3),UCBNAME   MOVE IN DEVICE NAME   *HMD 05/80*\n         LA    R1,MSG08M              GET MESSAGE ADDR      *HMD 05/80*\n         ST    R1,OLDADDR             SAVE IN OLD           *HMD 05/80*\n         B     PUTLNE                 PUT OUT MESSAGE       *HMD 05/80*\n*                                                           *HMD 05/80*\nMSG0C    DS    0H                                           *HMD 05/80*\n         MVC   MSG0CM(RC0CL),RC0CA    MOVE IN MESSAGE       *HMD 05/80*\n         MVC   MSG0CM+13(3),UCBNAME   MOVE IN DEVICE NAME   *HMD 05/80*\n         LA    R1,MSG0CM              GET MESSAGE ADDR      *HMD 05/80*\n         ST    R1,OLDADDR             SAVE IN OLD           *HMD 05/80*\n         B     PUTLNE                 PUT OUT MESSAGE       *HMD 05/80*\n*                                                           *HMD 05/80*\nNODASD   DS    0H                     NOT A DASD DEVICE     *HMD 05/80*\n         MVC   DMSGM(DMSGL),DMSGA     MOVE IN MESSAGE       *HMD 05/80*\n         MVC   DMSGM+13(3),UCBNAME    MOVE IN DEVICE NAME   *HMD 05/80*\n         LA    R1,DMSGM               GET MESSAGE ADDR      *HMD 05/80*\n         ST    R1,OLDADDR             SAVE IN OLD           *HMD 05/80*\n         B     PUTLNE                 PUT OUT MESSAGE       *HMD 05/80*\n*                                                           *HMD 05/80*\nNOSUP    DS    0H                     NON-SUPPORTED DEVICE  *HMD 05/80*\n         LA    R1,UNKA                GET MESSAGE ADDR      *HMD 05/80*\n         ST    R1,OLDADDR             SAVE IN OLD           *HMD 05/80*\n         B     PUTLNE                 PUT OUT MESSAGE       *HMD 05/80*\n*                                                           *HMD 05/80*\nNOPUBL   DS    0H                                           *HMD 05/80*\n         MVI   REQFLG,ESOCODE         CLEAR REQUEST FLAG    *HMD 05/80*\n         LA    R1,PUBLICA             GET MESSAGE ADDR      *HMD 05/80*\n         ST    R1,OLDADDR             SAVE IN OLD           *HMD 05/80*\n         B     PUTLNE                 PUT OUT MESSAGE       *HMD 05/80*\n*                                                           *HMD 05/80*\nPUTLNE   DS    0H             COMMON ERR PUTLINE ROUTINE    *HMD 05/80*\n         MVC   OLD,SEGNUM     ONE SEGMENT                   *HMD 05/80*\n         XC    TSOECB,TSOECB  CLEAR ECB                     *HMD 05/80*\n         L     R15,ADDRPUTL   GET PUTLINE ADDRESS           *HMD 05/80*\n         PUTLINE PARM=PTPB,OUTPUT=(OLD,TERM,SINGLE,INFOR),  *HMD 05/80*X\n               MF=(E,IOPL),ENTRY=(15)                       *HMD 05/80*\n         B     CHKFLGS        CHECK YOUR FLAGS              *HMD 05/80*\n*\n         EJECT\n***********************************************************************\n* CHECK FOR ADDITIONAL PARAMETERS, IF MORE; PROCESS, ELSE CLEANUP YOUR*\n*           MESS AND EXIT (ALL DONE)                                  *\n***********************************************************************\n*\nCHKFLG   CLI   REQFLG,ESOCODE          REQUEST NOT FOUND\n         BE    NOSUP\n*\nCHKPDE   DS    0H                      CHECK PDE FOR MORE   *HMD 05/80*\n         AIF   (&XA).X009                                   *HMD 01/86*\n*                                                           *HMD 05/80*\n         DELETE EP=DEVMASKT            DELETE THE TABLE     *HMD 05/80*\n*                                                           *HMD 05/80*\n         DELETE EP=DEVNAMET            AND THE OTHER ONE    *HMD 05/80*\n*                                                           *HMD 05/80*\n         AGO   .X019                   BRANCH AROUND XA CODE*HMD 01/86*\n.X009    ANOP                                               *HMD 01/86*\n***********************************************************************\n**                                                                   **\n**              FREE IEFEB4UV GOTTEN STORAGE                         **\n**                                                                   **\n***********************************************************************\nFREEX    DS    0H                                           *HMD 01/86*\n         TM    GOTFLG,GOTFREEM   DO WE NEED TO FREEMAIN?    *HMD 01/86*\n         BNO   FREEY             NO, BYPASS THIS CODE       *HMD 01/86*\n         L     R1,EULIST         ADDRESS TO FREE            *HMD 01/86*\n         L     R0,USPLEN-ULIST(R1)                          *HMD 01/86*\n*                                LOAD SUBPOOL,LENGTH        *HMD 01/86*\n         FREEMAIN R,LV=(0),A=(1) FREE THE STORAGE           *HMD 01/86*\n         SPACE 2                                            *HMD 01/86*\nFREEY    DS    0H                                           *HMD 01/86*\n.X019    ANOP                                               *HMD 01/86*\n         L     R6,PARSAVE                                   *HMD 01/86*\n         L     R7,8(,R6)         LOAD CHAIN FOR VOL LIST    *HMD 01/86*\n         C     R7,ENDCHAIN       IS IT END OF VOL LIST?     *HMD 01/86*\n         BE    FINISH            IF YES CLEANUP & EXIT      *HMD 01/86*\n         L     R6,8(,R6)         LOAD PTR TO NEXT VOLUME    *HMD 01/86*\n         L     R7,0(R6)          ADDR OF NEXT VOLUME        *HMD 01/86*\n         MVC   PARMNM,BLANKS                                *HMD 01/86*\n         MVI   REQFLG,ESOCODE    CLEAR REQFLG AREA          *HMD 01/86*\n         XC    WORKUCB(16),WORKUCB\n*                                CLEAR UCB WORK AREA        *HMD 01/86*\n         B     CHKL                          AND PROCESS\n         EJECT                                              *HMD 05/80*\n***********************************************************************\n*        EXECUTED INSTRUCTIONS                                        *\n***********************************************************************\nCOMPARE  CLC   PARMNM(0),UCBVOLI   IS THIS THE VOL REQUESTED ?\n*                                                                     *\nMOVEVOL  MVC   PARMNM(0),0(R7)     GET PARAMETER FROM CMND  *HMD 01/86*\n*                                                                     *\nCOMPUCB  CLC   PARMNM(0),UCBNAME   CHECK DEVICE NUMBER      *HMD 01/86*\n*                                                           *HMD 01/86*\nTEST4FLG TM    0(R15),*-*          TEST FOR FLAG\n*                                                                     *\n         EJECT\n***********************************************************************\n* CLEANUP AREAS GETMAINED BY PARSE, SET RETURN CODE, RESTORE REGISTERS*\n* AND EXIT\n***********************************************************************\n*                                                                     *\nFINISH   DS    0H\n         ST    R15,RETCODE         SAVE RETURN CODE         *HMD 05/80*\n*                                                           *HMD 05/80*\n         IKJRLSA PPLRANS           FREE PARSE STORAGE       *HMD 05/80*\n*                                                           *HMD 05/80*\n         DELETE EP=IKJPUTL         GET RID OF PUTLINE       *HMD 05/80*\n*                                                           *HMD 05/80*\n         L     R15,RETCODE         RESTORE RETURN CODE      *HMD 05/80*\n*                                                           *HMD 05/80*\n         TSOLEAVE RETCODE=(15)     RETURN TO MVS            *HMD 05/80*\n*\n         EJECT\n***********************************************************************\n*             PROCESSES FLAGS KEYWORD                                 *\n***********************************************************************\nUCBFLAG  DS    0H\n         STM   R2,R3,CHAINSAV       SAVE REGISTERS SO NEXT CODE\n         STM   R14,R15,CHAINSAV+8   DOESNT DESTROY THEM\n         STM   R4,R5,BUFRSAV\n         LA    R4,FLGMSG            POINT TO MSG AREA\n         LA    R5,FLGMSGN           POINT TO END OF AREA\n         L     R15,ADDRPUTL         GET PUTLINE ADDR        *HMD 05/80*\n         XC    TSOECB,TSOECB        CLEAR ECB               *HMD 05/80*\n*                                                           *HMD 05/80*\n         PUTLINE PARM=PTPB,OUTPUT=(HDRA,TERM,SINGLE,DATA),  *HMD 05/80*X\n               MF=(E,IOPL),ENTRY=(15)                       *HMD 05/80*\n*\n         SPACE 1                                            *HMD 01/86*\n         L     R2,UCBSAVE                                   *HMD 01/86*\n         SPACE 1                                            *HMD 01/86*\nNXTUCB   LA    R3,TABLE\nFLAGLOOP CLI   0(R3),X'FF'          END OF TABLE\n         BE    DONEWFLG             YES - ALL DONE\n         LR    R15,R2               GET COPY OF UCB ADDRESS\n         SLR   R14,R14              ZERO R14 FOR INSERT\n         IC    R14,0(R3)            GET OFFSET OF FLAG IN UCB\n         AR    R15,R14              GET ADDRESS OF FLAG\n         IC    R14,1(R3)            GET FLAG\n         EX    R14,TEST4FLG         TEST FOR CORRECT FLAG\n         BZ    NEXTFLAG             NOT ON - LOOP\n         BAL   R14,MSGBUF\n*                                                                     *\nNEXTFLAG DS    0H\n         LA    R3,10(R3)             BUMP FLAG POINTER\n         B     FLAGLOOP\n*                                                                     *\nDONEWFLG DS    0H\n         MVC   FLGMSGA,=H'69,0'      MOVE IN LENGTH         *HMD 05/80*\n         L     R15,ADDRPUTL          GET PUTLINE ADDRESS    *HMD 05/80*\n         XC    TSOECB,TSOECB         CLEAR ECB              *HMD 05/80*\n*                                                           *HMD 05/80*\n         PUTLINE PARM=PTPB,OUTPUT=(FLGMSGA,TERM,SINGLE,DATA),          X\n               MF=(E,IOPL),ENTRY=(15)                       *HMD 05/80*\n*                                                           *HMD 05/80*\n         MVC   FLGMSG,BLANKS\n         LM    R4,R5,BUFRSAV\n         LM    R2,R3,CHAINSAV\n         LM    R14,R15,CHAINSAV+8\n         B     CHKFLGS\n*                                                                     *\nSETSW    MVI   FLGSW,FLGSET          INDICATE KEYWORD IS PRESENT\n         B     LDPTR\n*                                                                     *\nMSGBUF   EQU   *\n         MVC   5(8,R4),2(R3)         MOVE IN STATUS DESCRIPTOR\n         LA    R4,10(R4)             BUMP AREA POINTER\n         CR    R4,R5                 COMPARE FOR MORE ROOM\n         BLR   R14                   LOW - RETURN\n         STM   R0,R15,SAVE015        SAVE REGS ACROSS PUTL  *HMD 05/80*\n         MVC   FLGMSGA,=H'69,0'      MOVE IN LENGTH         *HMD 05/80*\n         L     R15,ADDRPUTL          GET PUTLINE ADDRESS    *HMD 05/80*\n         XC    TSOECB,TSOECB         CLEAR ECB              *HMD 05/80*\n*                                                           *HMD 05/80*\n         PUTLINE PARM=PTPB,OUTPUT=(FLGMSGA,TERM,SINGLE,DATA),          X\n               MF=(E,IOPL),ENTRY=(15)                       *HMD 05/80*\n*                                                           *HMD 05/80*\n         MVC   FLGMSG,BLANKS         CLEAR MESSAGE AREA\n         LM    R0,R15,SAVE015        RESTORE SAVED REGS     *HMD 05/80*\n         LA    R4,FLGMSG             RESET MESSAGE PTR      *HMD 05/80*\n         LA    R5,FLGMSGN            RESET END OF MESSAGE   *HMD 05/80*\n         B     NEXTFLAG              GET NEXT FLAG GROUP    *HMD 05/80*\n*                                                                     *\n         EJECT                                              *HMD 05/80*\n***********************************************************************\n* ERROR AND INFORMATIONAL MESSAGES                                    *\n***********************************************************************\n*                                                                     *\nGNRLERR  DC    AL2(GNRLERRL),AL2(0)\n         DC    C'HMD0011I AN ERROR WAS ENCOUNTERED IN THE GENERAL FAIL X\n               SERVICE ROUTINE (REGISTER 15 = 00)'          *HMD 05/80*\nGNRLERRL EQU   *-GNRLERR\n*\nSVC78ER  DC    AL2(SVC78ERL),AL2(0)\n         DC    C'HMD0020I AN UNKNOWN ERROR CODE WAS ENCOUNTERED IN THE X\n               LSPACE SVC (REGISTER 15 = XX)'\nSVC78ERL EQU   *-SVC78ER\n*                                                           *HMD 05/80*\nRC04A    DC    AL2(RC04L),AL2(0)                            *HMD 05/80*\nRC04     DC    C'HMD0021I XXX XXXXXX - PERMANANT I/O ERROR'\nRC04L    EQU   *-RC04A                                      *HMD 05/80*\n*                                                           *HMD 05/80*\nRC08A    DC    AL2(RC08L),AL2(0)                            *HMD 05/80*\nRC08     DC    C'HMD0022I XXX - VOLUME NOT MOUNTED  '\nRC08L    EQU   *-RC08A                                      *HMD 05/80*\n*                                                           *HMD 05/80*\nRC0CA    DC    AL2(RC0CL),AL2(0)                            *HMD 05/80*\nRC0C     DC    C'HMD0023I XXX - UCB NOT READY OR INVALID UCB SPECIFIED'\nRC0CL    EQU   *-RC0CA                                      *HMD 05/80*\n*                                                           *HMD 05/80*\nDMSGA    DC    AL2(DMSGL),AL2(0)                            *HMD 05/80*\nDMSG     DC    C'HMD0025I XXX - NOT A DIRECT ACCESS DEVICE'\nDMSGL    EQU   *-DMSGA                                      *HMD 05/80*\n*                                                           *HMD 05/80*\nPUBLICA  DC    AL2(PUBLICL),AL2(0)                          *HMD 05/80*\nPUBLC    DC    C'HMD0026I NO PUBLIC DEVICES MOUNTED'\nPUBLICL  EQU   *-PUBLICA                                    *HMD 05/80*\n*                                                           *HMD 05/80*\nUNKA     DC    AL2(UNKNWNL),AL2(0)                          *HMD 05/80*\nUNKNWN   DC    C'HMD0027I UNKNOWN OR INVALID DEVICE SPECIFIED'\nUNKNWNL  EQU   *-UNKA                                       *HMD 05/80*\n*                                                           *HMD 05/80*\nHDRA     DC    AL2(HDRL),AL2(0)                             *HMD 05/80*\nHDR      DC    C'     STATUS FLAGS ARE:'\nHDRL     EQU   *-HDRA                                       *HMD 05/80*\n*                                                           *HMD 05/80*\nSPCMSGA  DC    AL2(SPCMSGL),AL2(0)                          *HMD 05/80*\nSPCMSG   DC    C'            CYL TRK  XTNT CYL-C TRK-C '\nSPCMSGL  EQU   *-SPCMSGA                                    *HMD 05/80*\n*                                                           *HMD 05/80*\nOFFLID   DC    AL2(OFFLL),AL2(0)      LENGTH OF MESSAGE     *HMD 05/80*\n         DC    C'HMD0016I XXX  OFFLINE'                     *HMD 05/80*\nOFFLL    EQU   *-OFFLID\n*                                                           *HMD 05/80*\nMCNTA    DC    AL2(MCNTL),AL2(0)      FOR PUTLINE MSG       *HMD 05/80*\n         DC    C'HMD0017I TOO MANY BITS IN DEVMASKT COUNT - SEE YOUR SYX\n               STEMS PROGRAMMER'                            *HMD 05/80*\nMCNTL    EQU   *-MCNTA                                      *HMD 05/80*\n*                                                           *HMD 05/80*\nNOSUPP   DC    AL2(NONSUPL),AL2(0)                          *HMD 05/80*\n         DC    C'HMD0015I NON-SUPPORTED DEVICE NAME SPECIFIED'\nNONSUPL  EQU   *-NOSUPP                                     *HMD 05/80*\n*                                                           *HMD 05/80*\n         EJECT                                              *HMD 05/80*\n***********************************************************************\n*        UCB FLAGS TABLE                                              *\n***********************************************************************\nTABLE    DS    0H\n         DC    X'0104',CL8'NONALLOC'     JES2,ETC\n         DC    X'0340',CL8'CHANGING'     CHANGING STATUS\n         DC    X'0320',CL8'RESERVED'     MOUNT STATUS - RESERVED\n         DC    X'0310',CL8'UNLOAD  '     UNLOAD PENDING\n         DC    X'0308',CL8'ALLOCATD'     ALLOCATED\n         DC    X'0304',CL8'RESIDENT'     PERM. RESIDENT\n         DC    X'0302',CL8'SYSRES  '     SYSRES, MSTRCONS, CONS\n         DC    X'0301',CL8'SECONS  '     LABELS VERIFD/SECONS\n         DC    X'0680',CL8'BUSY    '     DEVICE BUSY\n         DC    X'0640',CL8'NOT-RDY '     NOT READY\n         DC    X'0620',CL8'POSTED  '     POST FLAG\n         DC    X'0610',CL8'SENSE OP'     PENDING SENSE OP\n         DC    X'0608',CL8'CU BUSY '     CONTROL UNIT BUSY\n         DC    X'0604',CL8'S/A PROC'     STANDALONE PROCESS\n         DC    X'0602',CL8'ACTIVE  '     CHANNEL PGN ACTIVE\n         DC    X'0601',CL8'QUIESCED'     QUIESCED\n         DC    X'0740',CL8'SNS ACTV'     SENSE ACTIVE\n         DC    X'0720',CL8'SNS POST'     SENSE POST\n         DC    X'0710',CL8'DEV-RESV'     DEVICE RESERVED\n         DC    X'0708',CL8'CRH CONN'     CRH CONNECTION\n         DC    X'0C10',CL8'REWIND  '     REWIND IN PROGRESS\n         DC    X'1480',CL8'ATT PEND'     ATTENTION PENDING\n         DC    X'1420',CL8'U DEV ND'     UNSOLICITED DEVICE END\n         DC    X'1410',CL8'INTRCEPT'     INTERCEPT CONDITION\n         DC    X'1408',CL8'INT MSG '     INTERVENTION MESSAGE ISSUED\n         DC    X'1404',CL8'INT REQD'     INTERVENTION MSG REQUIRED\n         DC    X'1402',CL8'- MTP - '     MOUNT PENDING/CE/DE\n         DC    X'1401',CL8'DDR PEND'     DDR SWITCH PENDING\n         DC    X'2210',CL8'PRIVATE '     USE STATUS - PRIVATE\n         DC    X'2208',CL8'PUBLIC  '     USE STATUS - PUBLIC\n         DC    X'2204',CL8'STORAGE '     USE STATUS - STORAGE\n         DC    X'FFFF',CL8'        '     END OF TABLE\n         TITLE 'LTORG'\n         LTORG ,\n         TITLE 'CONSTANTS'\nBLANKS   DC    CL80' '            SPACES FOR CLEARING STUFF *HMD 05/80*\nCLEAR    DC    F'0'               CLEAR 1 FULL WORD         *HMD 05/80*\nENDCHAIN DC    X'FF000000'\nEOUCB    DC    H'-1'              END OF UCB TABLE          *HMD 05/80*\nFILLER   DC    H'0'               FILLER FOR ALIGNMENT      *HMD 05/80*\nHALF12   DC    H'12'\nHALF0    DC    H'0'\nRC4      DC    F'4'               RETURN CODE OF 4          *HMD 05/80*\nRC8      DC    F'8'               RETURN CODE OF 8          *HMD 05/80*\nRC12     DC    F'12'              RETURN CODE OF 12         *HMD 05/80*\nRC20     DC    F'20'              RETURN CODE OF 20         *HMD 05/80*\nSEGNUM   DC    F'1'               NUMBER OF SEGMENTS FOR OLD*HMD 05/80*\n         TITLE 'PARSE PARAMETER LIST'                       *HMD 05/80*\n***********************************************************************\n*                     PARSE PARAMETER LIST                            *\n***********************************************************************\nPARMTAB  IKJPARM DSECT=IKJPARMD\nVOLUMES  IKJIDENT 'DEVICE LIST',LIST,FIRST=ALPHANUM,OTHER=ALPHANUM,    X\n               DEFAULT='ALL',CHAR\nKWORD    IKJKEYWD\n         IKJNAME   'FLAGS'\n         IKJENDP\n         TITLE 'PATCH AREA'\n         PRINT ON,DATA                                      *HMD 05/80*\n         ENTRY PATCH                                        *HMD 05/80*\nPATCH    DC    C'LSPACE PATCH AREA'                         *HMD 05/80*\n         DC    50X'00'                  GENERATE PATCH AREA *HMD 05/80*\n         PRINT ON,NODATA                                    *HMD 05/80*\n         TITLE  'DSECT FOR LSPACE PROGRAM'                            *\n***********************************************************************\n* DSECT FOR GETMAINED WORKAREA                                        *\n***********************************************************************\n*                                                                     *\nTSODSECT DSECT                                              *HMD 05/80*\n********************** LIST MACRO INSTRUCTIONS ************************\n*\nPTPB     PUTLINE MF=L\n*\n***********************************************************************\nADDRPUTL DS    F                   PUTLINE ADDRESS          *HMD 05/80*\nBITSAVE  DS    F\nBUFRSAV  DS    D                   SAVE AREA FOR TWO REGS\nCHAINSAV DS    2D                  SAVE AREA FOR FOUR REGS\nCNTSAVE  DS    F\nCXALIGN  DS    0D                  ALIGNMENT AREA           *HMD 05/80*\nCONV     DS    2F\nDEC      DS    2F\nDMSGM    DS    (DMSGL)C            DEVICE MESSAGE           *HMD 05/80*\n*                                                           *HMD 05/80*\nFLGMSGA  DS    A                   FLAG MESSAGE FOR PUTL    *HMD 05/80*\nFLGMSG   DS    CL65\nFLGMSGN  DS    0C                  END OF FLAG MSG\n*                                                           *HMD 05/80*\nFLGSW    DC    X'00'\nFLGSET   EQU   X'FF'                                        *HMD 05/80*\nGFPARMP  DS    F\nGFERR    DS    CL(GNRLERRL)        GENERAL FAIL ERROR       *HMD 05/80*\nGFERRND  DS    0X                  FOR INSERTING RC         *HMD 05/80*\nLCFILL   DS    CL1                 AREA SEPERATOR\nMSG04M   DS    (RC04L)C            FOR RC=04                *HMD 05/80*\nMSG08M   DS    (RC08L)C            FOR RC=08                *HMD 05/80*\nMSG0CM   DS    (RC0CL)C            FOR RC=0C (12)           *HMD 05/80*\nOFFLMSG  DS    (OFFLL)C            FOR 'OFFLINE' MESSAGE    *HMD 05/80*\nOLD      DS    F                   OUTPUT LINE DESCRIPTOR   *HMD 05/80*\nOLDADDR  DS    A                   MESSAGE ADDRESS          *HMD 05/80*\nPARMNM   DS    CL8                 PARAMETER NAME\nPARSAVE  DS    F                   SAVE ACROSS PARSE\nPFILL    DS    H                   ALIGNMENT FILLER         *HMD 05/80*\n*   REQUEST FLAGS - SHOWS TYPE OF LSPACE REQUEST            *HMD 05/80*\nREQFLG   DS    X\nESOCODE  EQU   X'00'\nALLFLG   EQU   X'01'                                        *HMD 05/80*\nVOLFLG   EQU   X'04'\nUCBFLG   EQU   X'08'\nPUBFLG   EQU   X'11'\nPRIVFLG  EQU   X'22'\nSTORFLG  EQU   X'33'\nDEVFLG   EQU   X'88'\nMYFLG    EQU   X'FF'\nGOTFLG   DS    X                                            *HMD 06/82*\nGOTPUBL  EQU   X'80'    1... ....  WE'VE GOTTEN ONE PUBLIC  *HMD 01/86*\n         AIF   (NOT &XA).X010                               *HMD 01/86*\nGOTFREEM EQU   X'08'    .... 1...  EB4UV FREEMAIN NECESSARY *HMD 01/86*\n.X010    ANOP                                               *HMD 01/86*\n*                                                           *HMD 05/80*\nRETCODE  DS    F\nRUNPK    DS    CL3                 UNPACK WORK AREA         *HMD 01/86*\nRUCBNAME DS    CL3                 EBCDIC UCB NAME          *HMD 01/86*\nSAVELGTH DS    F\nSAVEPDE  DS    F\nSAVERETN DS    F                   REG 5 SAVE AREA          *HMD 01/86*\nSAVE015  DS    16F                 REG 0-15 SAVE AREA       *HMD 05/80*\nSPCMSGM  DS    (SPCMSGL)C          SPACE MESSAGE AREA       *HMD 05/80*\nSVC78R   DS    (SVC78ERL)C         SVC 78 ERROR MESSAGE     *HMD 05/80*\nSVC78N   DS    0X                  END OF MESSAGE           *HMD 05/80*\n         SPACE 2                                            *HMD 12/85*\n*********************************************************** *HMD 12/85*\n**                                                       ** *HMD 12/85*\n**  UCB LOOKUP ROUTINE (IOSVSUCB) PARAMTER LIST          ** *HMD 12/85*\n**                                                       ** *HMD 12/85*\n*********************************************************** *HMD 12/85*\n         SPACE 2                                            *HMD 12/85*\nIOSCALL  CALL  ,(0,0,0),MF=L     LIST FORM CALL MACRO       *HMD 12/85*\n         SPACE 1                                            *HMD 12/85*\nIOSWORK  DS    XL100             100 BYTE WORK AREA         *HMD 12/85*\nIOSTYPE  DS    X                 DEVICE TYPE FLAG           *HMD 12/85*\nIOSADDR  DS    F                 ADDRESS OF UNIT CNTL BLOCK *HMD 12/85*\n         SPACE 2                                            *HMD 12/85*\n         AIF   (NOT &XA).X015                               *HMD 01/86*\n*********************************************************** *HMD 12/85*\n**                                                       ** *HMD 12/85*\n**  IEFEB4UV UNIT VERIFICATION ROUTINE PARAMETER LIST    ** *HMD 12/85*\n**                                                       ** *HMD 12/85*\n*********************************************************** *HMD 12/85*\n         SPACE 1                                            *HMD 01/86*\nEB4LINK  LINK  EP=0,SF=L         LIST FORM OF LINK MACRO    *HMD 01/86*\n         SPACE 1                                            *HMD 01/86*\nEB4PARMS DS    0A                PARAMETER ANCHOR POINT     *HMD 01/86*\nEB4PARM1 DS    A                 POINTER TO FLAG AREA\nEB4PARM2 DS    A                 POINTER TO UNIT TABLE      *HMD 01/86*\n         SPACE 1                                            *HMD 01/86*\nEFLAGS   DS    XL2                                          *HMD 01/86*\nEUTAB    DS    0A                ALIGN                      *HMD 01/86*\nEUNAME   DS    CL8               UNIT NAME                  *HMD 01/86*\nEULIST   DS    A                 POINTER TO UCB LIST        *HMD 01/86*\nEUZERO   DS    A                 ZERO, NO ATTRIBUTES        *HMD 01/86*\n         SPACE 1                                            *HMD 01/86*\n.X015    ANOP                                               *HMD 01/86*\nUCBADDR  DS    F                                            *HMD 01/86*\nUCBSAVE  DS    F                 SAVE AREA FOR UCB          *HMD 01/86*\nVOLSER   DS    CL6               VOLSER SAVE AREA\nVOLSPC   DS    CL30              SVC78 WORK AREA\nVOLSPC1  DS    CL42              LSPACE MESSAGE W/A\nWORKUCB  DS    2D                WORK AREA\n         TITLE 'GNRLFAIL PARARMETER LIST'                   *HMD 05/80*\n*\n*\n         IKJEFFGF   ,              GNRLFAIL PARM LIST       *HMD 05/80*\n*                                                           *HMD 05/80*\n*                                                           *HMD 05/80*\nLDYNAMIC EQU   *-TSOUSER                                    *HMD 05/80*\n         TITLE 'CVT DSECT'\n         CVT   DSECT=YES,LIST=YES\n         TITLE 'UCB DSECT'                                  *HMD 05/80*\nUCB      DSECT                                              *HMD 05/80*\n         IEFUCBOB LIST=YES                                  *HMD 05/80*\n         EJECT                                              *HMD 01/86*\n         AIF    (NOT &XA).END                               *HMD 01/86*\nULIST    DSECT                     UCB RETURN AREA MAP      *HMD 01/86*\nUSPLEN   DS     F                  SUBPOOL 230 AND LENGTH   *HMD 01/86*\nUSPNUM   DS     F                  NUMBER OF UCB ENTRIES    *HMD 01/86*\nUCBPTRS  DS     0F                 START OF UCB ENTRIES     *HMD 01/86*\n.END     ANOP                                               *HMD 01/86*\n         END    LSPACE\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LSPHELP": {"ttr": 4616, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x891\\x8f\\x00\\x891\\x8f\\x108\\x00\\x1f\\x00\\x1f\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-11-14T00:00:00", "modifydate": "1989-11-14T10:38:00", "lines": 31, "newlines": 31, "modlines": 0, "user": "HMDEAN"}, "text": ")S   SUBCOMMANDS\n     ALL PARAMETERS FOR THE LSPACE COMMAND ARE EITHER\n     POSITIONAL OR KEYWORD. THERE ARE NO SUBCOMMANDS\n\n)F   FUNCTION\n     THE LSPACE COMMAND WILL DISPLAY THE AVAILABLE SPACE\n     AND STATUS OF ONLINE DIRECT ACCESS VOLUMES.\n\n     THE AVAILABLE SPACE WILL BE DISPLAYED USING THE \"LSPACE\"\n     SUPERVISOR CALL ROUTINE. SELECTION OF DASD CAN BE BY\n     VOLUME PREFIX, UNIT PREFIX, OR DEVICE TYPE.\n\n)X   SYNTAX\n\n     LSPACE ALL/VOLPREF/UNITPREF/DEVTYPE  (FLAGS)\n\n     REQUIRED- NONE\n     DEFAULT - ALL\n     ALIAS   - LSP\n\n)O   OPERANDS\n\n)P   SELECTION CRITERIA:\n     ALL      - REQUESTS THAT ALL ONLINE DASD VOLUMES BE DISPLAYED\n     VOLPREF  - THE PREFIX OF THE VOLUME SET TO BE DISPLAYED\n     UNITPREF - THE PREFIX OF THE UNIT SET TO BE DISPLAYED\n     DEVTYPE  - THE GENERIC OR ESOTERIC DEVICE NAME OF THE\n                UNITS TO BE DISPLAYED\n\n))FLAGS       - DISPLAYS THE STATUS FLAGS OF THE DASD DEVICES\n                IN ENGLISH FORMAT\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "LUSE": {"ttr": 4618, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x891\\x8f\\x00\\x891\\x8f\\x108\\x00B\\x00B\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-11-14T00:00:00", "modifydate": "1989-11-14T10:38:00", "lines": 66, "newlines": 66, "modlines": 0, "user": "HMDEAN"}, "text": "         MACRO\n&NAME    LUSE  &WHERE,&W1,&W2\n         GBLB  &LUSED\n         GBLC  &USENM(50),&USEW(25)\n         LCLA  &A,&B,&C,&D,&E\n         LCLC  &X1,&X2\n         AIF   ('&NAME' EQ '').NONAME\n&NAME    DS    0H .           DEFINE NAME\n.NONAME  AIF   (N'&SYSLIST LE 15).OK1\n         MNOTE 16,'OPERAND ERROR - TOO MANY OPERANDS, MACRO ABORTED'\n         MEXIT\n.OK1     AIF   (N'&SYSLIST LT 2).ERR\n&A       SETA  1\n&C       SETA  N'&SYSLIST\n.OKX     AIF   ('&SYSLIST(&A)' NE '').INCR\n         MNOTE 16,'OPERAND ERROR - NULL OPERAND'\n         MEXIT\n.INCR    AIF   (&A EQ &C).GEN\n&A       SETA  &A+1\n         AGO   .OKX\n.GEN     AIF   (&C NE 2).RECURSE\n&A       SETA  1\n.FNULL   AIF   ('&USEW(&A)' EQ '').HNULL\n&A       SETA  &A+1\n         AIF   (&A LE 25).FNULL\n         MNOTE 16,'LUSE USER ERROR - TOO MANY LUSE WITHOUT LDROP'\n         MEXIT\n.HNULL   ANOP\n&D       SETA  (&A*2)-1\n&E       SETA  K'&WHERE-8\n&X1      SETC  '&WHERE'\n         AIF   (&E LE 0).COMMON\n         AIF   (&E LE 8).SETX2\n&E       SETA  8\n.SETX2   ANOP\n&X2      SETC  '&WHERE'(9,&E)\n.COMMON  ANOP\n&USENM(&D)     SETC           '&X1'\n&USENM(&D+1) SETC '&X2'\n&USEW(&A) SETC '&W1'\n&E       SETA  1\n.MATCH   AIF   (&E GE &A).GENUSE\n         AIF   ('&USEW(&E)' EQ '&USEW(&A)').MN0\n&E       SETA  &E+1\n         AGO   .MATCH\n.MN0     MNOTE 0,'** WARNING **  REGISTER '\n         MNOTE *,'&USEW(&E) PREVIOUSLY LUSED AS BASE FOR'\n&D       SETA  (&E*2)-1\n         MNOTE *,'&USENM(&D)&USENM(&D+1) - NEW USING CREATED'\n&E       SETA  &E+1\n         AGO   .MATCH\n.GENUSE  USING &WHERE,&W1 .   GEN USING STMT\n         AIF   (&LUSED).MEND\n&LUSED   SETB  1\n         SPACE 1\n         MEXIT\n.RECURSE ANOP\n&B       SETA  2\n.RCU     AIF   (&B GT &C).MEND\n         LUSE  &WHERE&X1,&SYSLIST(&B)\n&B       SETA  &B+1\n&E       SETA  &E+4096\n&X1      SETC  '+'.'&E'\n         AGO   .RCU\n.ERR     MNOTE 16,'OPERAND ERROR - NEED 2 OR MORE OPERANDS, MACRO EXIT'\n.MEND    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "NEWVOL": {"ttr": 4620, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x891\\x8f\\x00\\x891\\x8f\\x108\\x01_\\x01_\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-11-14T00:00:00", "modifydate": "1989-11-14T10:38:00", "lines": 351, "newlines": 351, "modlines": 0, "user": "HMDEAN"}, "text": "         TITLE 'NEW VOLUME PROGRAM'\nNEWVOL   START\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         PRINT GEN\n         STM   R14,R12,12(R13)           SAVE CALLERS REGISTERS\n         LR    R9,R15                    INITIALIZE BASE REGISTER\n         USING NEWVOL,R9,R10             ESTABLISH ADDRESSABILITY\n         ST    R13,MYSAVE+4              LINK TO MINE\n         LA    R11,MYSAVE                MY SAVE AREA\n         ST    R11,8(R13)                LINK TO CALLERS\n         LR    R13,R11                   POINT R13 TO MY SAVE AREA\n         LR    R10,R9                    PUT CONTENTS OF R9 INTO R10\n         AH    R10,K4                    ADD 4096\n         B     BEGIN                     START EM UP\nMYNAME   DC    C'NEWVOL'\nVERSION  DC    C'1.0'\n         DC    C' &SYSDATE, &SYSTIME'\nK4       DC    H'4096'\nMYSAVE   DC    18F'0'\n*********************************************************************\n* OPEN FILES                                                        *\n*********************************************************************\nBEGIN    DS    0H\n         OPEN  (FATSIN,INPUT,TMCOUT,OUTPUT,SYSPRINT,OUTPUT)\n         OPEN  (DSNBOUT,OUTPUT)\n*********************************************************************\n* INITIALIZE THE TMC PARAMETER LIST                                 *\n*********************************************************************\nOPENTMC  DS    0H\n         OPENTMC NOTACT=READERR3         INITIALIZE PARAMETR LIST\n*********************************************************************\n* MAINLINE ROUTINE                                                  *\n* SEARCH FATAR OUTPUT UNTIL WE HAVE FOUND AN INPUT VOLUME           *\n*********************************************************************\nREADCARD DS    0H\n         GET   FATSIN,INFAT              GET INPUT RECORD\n         MVC   SYSOUT(121),INFAT\n         PUT   SYSPRINT,INFAT            PRINT INFAT RECORD\n         CLI   FLAG,C'Y'                 IS 'VOLSER FOUND' FLAG SET?\n         BE    GETNEW                    YES - GET THE NEW VOLSER\n         CLC   INFAT+63(4),=C'6250'\n         BE    FOUNDVOL                  YES, GO LOOK FOR NEW VOLUME\n         CLC   INFAT+63(4),=C'1600'\n         BE    FOUNDVOL                  YES, GO LOOK FOR NEW VOLUME\n         CLC   INFAT+63(5),=C'38000'\n         BE    FOUNDVOL                  YES, GO LOOK FOR NEW VOLUME\n         B     READCARD                  NO- TRY NEXT RECORD\nFOUNDVOL MVC   VOLOLD,INFAT+55\n         MVI   FLAG,C'Y'                 SET 'VOLSER FOUND' FLAG\n         B     READCARD                  GET ANOTHER CARD\n*********************************************************************\n* WE HAVE FOUND THE INPUT VOLUME, NOW SEARCH FOR THE OUTPUT VOLUME\n*********************************************************************\nGETNEW   DS    0H\n         CLC   INFAT+1(7),=C'FATS026'    IS S VOL BEGIN WITH 'A'?\n         BE    FATS026                   YES, THIS IS IT.\n         CLC   INFAT+16(26),=C'FATS044 END OF OUTPUT TAPE'\n         BE    FATS044                   YES, THIS IS IT.\n         B     READCARD                  NO, GO BACK FOR MORE.\nFATS026  MVC   VOLNEW,INFAT+69           SET VOLNEW FIELD\n         B     UPDATE\nFATS044  MVC   VOLNEW,INFAT+43           SET VOLNEW FIELD\n         B     UPDATE\nVOLERROR ABEND 99,DUMP\n****************************************************************\n* NOW WE HAVE AN INPUT TAPE AND AN OUTPUT TAPE\n* GET THE TMC RECORD FOR VOLSER OF INPUT TAPE.                 *\n****************************************************************\nUPDATE   DS    0H\n         MVI   FLAG,C'N'                 RESET FLAG\n         LA    R12,RECWORK               LOAD RECWORK AREA ADDRESS\n         USING TMREC,R12\nREADTMC  GETTMC VOLOLD,RECWORK,READERR1,ENQ=NO\n         CLC   TMPRVVOL,HEXZEROS         IS THIS THE FIRST INPUT VOL?\n         BNE   READCARD                  NO, FORGET IT\n****************************************************************\n* BUILD JCL AND CONTROL CARDS FOR TMSUPDTE STEPS\n****************************************************************\nCONTROLS DS    0H\n         MVC   OVOL,VOLNEW               MOVE VOLSER TO OUTPUT\n         MVC   ODSN,TMDSN                MOVE DSN TO DSN/CHRG VERIFY CD\n*        MVC   OPGMR,TMSPROGM            MOVE PGMR TO OUTPUT\n         MVC   OPGMR(20),TMUSER          MOVE PGMR TO OUTPUT\n*        MVC   OCHRG(4),TMSACCTG         MOVE 1ST 4 CHARACTERS OF CHRG\n         MVC   OCHRG(4),TMUSER+20        MOVE 1ST 4 CHARACTERS OF CHRG\n         MVC   OEXPDT(5),DATEMASK\n         ED    OEXPDT(5),TMEXPDT         FORMAT EXPDT TO OUTPUT\n         MVC   OCJOB,TMJOBNM             MOVE CJOB TO OUTPUT\n         MVC   OCRTDT(5),DATEMASK\n         ED    OCRTDT(5),TMCRTDT         FORMAT CRTDT TO OUTPUT\n         MVC   OLJOB,TMLASUSJ            MOVE LJOB TO OUTPUT\n         MVC   OLDATE(5),DATEMASK\n         ED    OLDATE(5),TMLASUSD        FORMAT LDATE TO OUTPUT\n         UNPK  CTIME(5),TMCRTTI          UNPACK CREATE TIME\n         OI    CTIME+4,X'F0'             RESET SIGN BIT\n         MVC   OCTIME(4),CTIME+1         MOVE CREATE TIME TO OCRTDT\n         PUT   TMCOUT,CNTL2              WRITE VOLSER CARD\n         PUT   TMCOUT,CNTL3              WRITE DSN VERIFY CARD\n         PUT   TMCOUT,CNTL4              WRITE PGMR CARD\n         PUT   TMCOUT,CNTL5              WRITE CHARGE CODE CARD\n         PUT   TMCOUT,CNTL6              WRITE EXPDT CARD\n         PUT   TMCOUT,CNTL7              WRITE CREATING JOB CARD\n         PUT   TMCOUT,CNTL8              WRITE CREATION DATE CARD\n         PUT   TMCOUT,CNTL15             WRITE CREATION TIME CARD\n         PUT   TMCOUT,CNTL16             WRITE LAST USED JOB CARD\n         PUT   TMCOUT,CNTL17             WRITE LAST USED DATE CARD\n         MVC   OVOL,VOLOLD               MOVE VOLSER TO OUTPUT\n         PUT   TMCOUT,CNTL2              WRITE VOLSER CARD\n         PUT   TMCOUT,CNTL3              WRITE DSN VERIFY CARD\n* DETERMINE DATE AND TIME\n         TIME ,\n         STCM  1,B'0111',RUNDATE\n         UNPK  OEXPDT2(5),RUNDATE(3)\n         MVZ   OEXPDT2+4(1),OEXPDT2\n         PUT   TMCOUT,CNTL9              WRITE EXPDT2 CARD\n         PUT   DSNBOUT,CNTL10            WRITE CNTL10 TO OUTPUT\n         CLC   TMADSNB,HEXZEROS          ARE THERE MORE DATASETS?\n         BE    LSTCHK                    NO - GO TO LAST CHECK\n         MVC   RELBLK,TMADSNB            MOVE DSNB ADDR TO RELBLK\n****************************************************************\n*  GET THE NEW TMC STUFF FOR NEW DSNB UPDATES                  *\n****************************************************************\nREADTMC1 GETTMC VOLNEW,RECWORK,READERR1,ENQ=NO\n         MVC   NXTBLK,TMADSNB            MOVE DSNB ADDR TO NXTBLK\n****************************************************************\n*  GET DSNB STUFF\n****************************************************************\nGETDSNB  DS    0H\n*        WTO   'GETDSNB',ROUTCDE=(11)\n         CLC   RELBLK,HEXZEROS           IS THERE ANOTHER DATASET?\n         BE    LSTCHK                    NO - DO THE LAST CHECK\n         GETDSNB DSNBWORK,RELBLK,(R11),ENQ=NO\n         USING TMSDSNB,R11\n         SR    R6,R6                     CLEAR R6\n         L     R6,RELBLK                 LOAD BINARY DSNB # INTO R6\n         CVD   R6,PDSNBNUM               LOAD R6 IN PDSNBNUM\n         UNPK  DSNBNUM(4),PDSNBNUM       UNPACK PDSNBNUM INTO CNTL11\n         OI    DSNBNUM+3,X'F0'           RESET SIGN BIT FOR PRINTING\n         MVC   DDSN,DSNBDSN              MOVE DSN TO CNTL12\n         SR    R6,R6                     CLEAR R6\n         L     R6,DSNBNEXT               LOAD NEXT DSNB # INTO R6\n         CVD   R6,PDSNBNUM               LOAD R6 IN PDSNBNUM\n         UNPK  DSNBNXT(4),PDSNBNUM       UNPACK PDSNBNUM INTO CNTL13\n         OI    DSNBNXT+3,X'F0'           RESET SIGN BIT FOR PRINTING\n         MVC   OLDEXPDT,DSNBEXDT         SAVE OLD EXPDT\n         PUT   DSNBOUT,CNTL11            WRITE CNTL11 TO OUTPUT\n         PUT   DSNBOUT,CNTL12            WRITE CNTL12 TO OUTPUT\n         PUT   DSNBOUT,CNTL13            WRITE CNTL13 TO OUTPUT\n         PUT   DSNBOUT,CNTL9             WRITE CNTL9 TO OUTPUT\n         MVC   RELBLK,DSNBNEXT           STORE ADDR OF NXT DSNB\n****************************************************************\n*  GET NEW DSNB STUFF\n****************************************************************\nGETDSNB1 DS    0H\n*        WTO   'GETDSNB1',ROUTCDE=(11)\n         GETDSNB DSNBWORK,NXTBLK,(R11),ENQ=NO\n         SR    R6,R6                     CLEAR R6\n         L     R6,NXTBLK                 LOAD BINARY DSNB # INTO R6\n         CVD   R6,PDSNBNUM               LOAD R6 IN PDSNBNUM\n         UNPK  DSNBNUM(4),PDSNBNUM       UNPACK PDSNBNUM INTO CNTL11\n         OI    DSNBNUM+3,X'F0'           RESET SIGN BIT FOR PRINTING\n         SR    R6,R6                     CLEAR R6\n         L     R6,DSNBNEXT               LOAD NEXT DSNB # INTO R6\n         CVD   R6,PDSNBNUM               LOAD R6 IN PDSNBNUM\n         UNPK  DSNBNXT(4),PDSNBNUM       UNPACK PDSNBNUM INTO CNTL13\n         OI    DSNBNXT+3,X'F0'           RESET SIGN BIT FOR PRINTING\n         PUT   DSNBOUT,CNTL11            WRITE CNTL11 TO OUTPUT\n         PUT   DSNBOUT,CNTL12            WRITE CNTL12 TO OUTPUT\n         PUT   DSNBOUT,CNTL13            WRITE CNTL13 TO OUTPUT\n         MVC   OEXPDT3(5),DATEMASK       MOVE DATEMASK TO OEXPDT3\n         ED    OEXPDT3(5),OLDEXPDT       FORMAT OLDEXPDT TO OUTPUT\n         PUT   DSNBOUT,CNTL14            WRITE CNTL14 TO OUTPUT\n         MVC   NXTBLK,DSNBNEXT           STORE ADDR OF NXT DSNB\n         B     GETDSNB                   GO GET 'EM\n****************************************************************\n*  ONCE LAST CHECK, COMPARE NEW TAPE DSN TO OLD TAPE DSN       *\n****************************************************************\nLSTCHK   GETTMC VOLNEW,RECWORK,READERR1,ENQ=NO\n         CLC   ODSN(44),TMDSN\n         BNE   WRONGDSN\n         B     READCARD\n****************************************************************\n*  READ ERROR ROUTINE                                          *\n****************************************************************\nREADERR1 DS    0H\n         L     13,MYSAVE+4               RESTORE SAVE AREA\n         LM    14,12,12(13)              RESTORE REGS\n         LA    15,99                     SET BAD RETURN CODE - 99\n         BR    14                        GO BACK TO CALLER\nREADERR3 DS    0H\n         L     13,MYSAVE+4               RESTORE SAVE AREA\n         LM    14,12,12(13)              RESTORE REGS\n         LA    15,77                     SET BAD RETURN CODE - 77\n         BR    14                        GO BACK TO CALLER\nWRONGDSN WTO   'TAPE DSNS DO NOT MATCH'\n         MVC   TEMPDSN(44),TMDSN\n         B     READCARD                  DEBUGGING\n         ABEND 88,DUMP\n****************************************************************\n* CLOSE FILES AND RETURN TO CALLER                             *\n****************************************************************\nFINISH   DS    0H\n         CLOSE (FATSIN,,TMCOUT)         CLOSE FILES FATSIN/FATSOUT\n         L     13,MYSAVE+4               RESTORE SAVE AREA\n         LM    14,12,12(13)              RESTORE REGS\n         LA    15,0                      SET R15 TO 0\n         BR    14                        GO BACK TO CALLER\n****************************************************************\n*  DCB DEFINITIONS                                             *\n****************************************************************\nFATSIN   DCB   DDNAME=FATSIN,MACRF=GM,DSORG=PS,EODAD=FINISH,           X\n               LRECL=121,BLKSIZE=1210\nTMCOUT   DCB   DDNAME=TMCOUT,LRECL=80,MACRF=PM,DSORG=PS,               X\n               RECFM=FB,BLKSIZE=16000\nDSNBOUT  DCB   DDNAME=DSNBOUT,LRECL=80,MACRF=PM,DSORG=PS,              X\n               RECFM=FB,BLKSIZE=16000\nSYSPRINT DCB   DDNAME=SYSPRINT,LRECL=133,MACRF=PM,DSORG=PS,            X\n               RECFM=FB,BLKSIZE=13300\n****************************************************************\n*  RECORD FORMATS                                              *\n****************************************************************\nINTMC    DS    CL80\nINFAT    DS    CL133\nINFAT2   DS    CL80\n****************************************************************\n* MISC. PACKED AND ZONED DEFINITIONS\n****************************************************************\n         DS    0D                        DOUBLEWORD ALIGNMENT\nPDSNBNUM DC    PL8'0'                    PACKED DSNB NUMBER\nTEMPDSN  DC    CL44' '\nRUNDATE  DC    PL3'0'                    TODAY'S DATE\nOLDEXPDT DC    PL3'0'                    EXPDT OF ORIGINAL DSNB\nRELBLK   DC    F'0'                      ADDR OF OLD DSNBS\nNXTBLK   DC    F'0'                      ADDR OF NEW DSNBS\nBLANKS   DC    CL6' '                    BLANKS\nHEXZEROS DC    XL6'00'                   HEX XEROES\nZEROS    DC    PL16'0'                   ZEROS OUT RECORD\nVOLOLD   DS    CL6                       INPUT VOLUME SERIAL\nVOLNEW   DS    CL6                       OUTPUT VOLUME SERIAL\nFLAG     DC    CL1'N'\nDATEMASK DC    XL5'2020202020'\nCTIME    DC    CL5' '\n****************************************************************\n* MISC. DEFINITIONS\n****************************************************************\nCNTL2    DS    0CL80                     VOLSER CARD\n         DC    CL4'VOL '\nOVOL     DC    CL6' '\n         DC    CL70' '\n*\nCNTL3    DS    0CL80\n         DC    CL9'VER DSN=|'\nODSN     DC    CL44' '\n         DC    CL27'| '\n*\nCNTL4    DS    0CL80\n         DC    CL10'REP PGMR=|'\nOPGMR    DC    CL20' '\n         DC    CL50'| '\n*\nCNTL5    DS    0CL80\n         DC    CL10'REP CHRG=|'\nOCHRG    DC    CL4' '\n         DC    CL66'| '\n*\nCNTL6    DS    0CL80\n         DC    CL10'REP EXPDT='\nOEXPDT   DC    CL5' '\n         DC    CL65' '\n*\nCNTL7    DS    0CL80\n         DC    CL10'REP CJOB=|'\nOCJOB    DC    CL8' '\n         DC    CL62'| '\n*\nCNTL8    DS    0CL80\n         DC    CL10'REP CRTDT='\nOCRTDT   DC    CL5' '\n         DC    CL65' '\n*\nCNTL9    DS    0CL80\n         DC    CL10'REP EXPDT='\nOEXPDT2  DC    CL5' '\n         DC    CL65' '\n*\nCNTL10   DC    CL80'PASSWORD=DISABLED '\n*\nCNTL11   DS    0CL80\n         DC    CL5'DSNB '\nDSNBNUM  DC    CL4' '\n         DC    CL71' '\n*\nCNTL12   DS    0CL80\n         DC    CL9'VER DSN=|'\nDDSN     DC    CL44' '\n         DC    CL27'| '\n*\nCNTL13   DS    0CL80\n         DC    CL9'VER NEXT='\nDSNBNXT  DC    CL4' '\n         DC    CL67' '\n*\nCNTL14   DS    0CL80\n         DC    CL10'REP EXPDT='\nOEXPDT3  DC    CL5' '\n         DC    CL65' '\n*\nCNTL15   DS    0CL80\n         DC    CL10'REP CTIME='\nOCTIME   DC    CL4' '\n         DC    CL66' '\n*\nCNTL16   DS    0CL80\n         DC    CL10'REP LJOB=|'\nOLJOB    DC    CL8' '\n         DC    CL62'| '\n*\nCNTL17   DS    0CL80\n         DC    CL10'REP LDATE='\nOLDATE   DC    CL5' '\n         DC    CL65' '\n****************************************************************\n* TMRECORD AND TMSDSNB WORK I/O AREAS\n****************************************************************\nRECWORK  DS    CL200\nDSNBWORK DS    CL200\nSYSOUT   DC    CL135'  '\n         LTORG\n****************************************************************\n*  TMC AND DSNB RECORD FORMATS                                 *\n****************************************************************\nTMREC    DSECT ,\n         TMRECORD\nTMSDSNB  DSECT ,\n         TMSDSNB\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PDFINIT": {"ttr": 4871, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x891\\x8f\\x00\\x891\\x8f\\x108\\x06\\x0b\\x06\\x0b\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-11-14T00:00:00", "modifydate": "1989-11-14T10:38:00", "lines": 1547, "newlines": 1547, "modlines": 0, "user": "HMDEAN"}, "text": "PDF      TITLE 'INITIALIZATION UTILITY FOR TSO/E PROGRAM PRODUCT'\n***********************************************************************\n*                                                                     *\n* MODULE NAME = PDFINIT                                               *\n*                                                                     *\n* STATUS = TSO EXTENSIONS VERSION 1 RELEASE 2.1                       *\n*          (NOTE - THIS COMMAND WILL NOT OPERATE                      *\n*                  WITHOUT THE TSO/EXTENTIONS                         *\n*                  PROGRAM PRODUCT)                                   *\n*                                                                     *\n* LEVEL  = MVS/XA 2.2.0                                        WFJJAN89\n*          (MINIMUM O/S LEVEL IS MVS/SP 1.3.3)                 HD JUN87\n*          TSO/E  VERSION 1 RELEASE 4.0                        WFJJAN89\n*          (MINIMUM TSO/E LEVEL IS TSO/E VER 1 REL 2.0)        HD JUN87\n*                                                              HD JUN87\n* AUTHOR = HOWARD M. DEAN                                             *\n*          SYNTEX U.S.A.                                              *\n*          TECHNICAL SUPPORT                                          *\n*          M/S A5-CIS-5                                               *\n*          3401 HILLVIEW AVENUE                                       *\n*          PALO ALTO, CA 94303                                        *\n*          (415) 852-1792                                             *\n*                                                                     *\n*          HOWARD M. DEAN                                      HD NOV86\n*          SR. SYSTEMS SPECIALIST                              HD NOV86\n*          AMERICAN PRESIDENT COMPANIES                        HD NOV86\n*          SAN MATEO DATACENTER                                HD NOV86\n*          #3 WATERS PARK DRIVE                                HD NOV86\n*          SUITE 115                                           HD NOV86\n*          SAN MATEO, CA 94403                                 HD NOV86\n*          (415) 570-2331                                      HD NOV86\n*                                                              HD NOV86\n* FUNCTION = THIS MODULE WILL OPTIONALLY ALLOCATE THE 'ISPPROF'       *\n*            PROFILE DATASET FOR USE WITH ISPF VERSION 2.2 OR LATER.  *\n*            ALSO, A COMMAND NAMED IN THE 'CMD' KEYWORD PARAMETER, OR *\n*            A DATASET NAMED '&PREFIX..PROFILE.CLIST' WILL BE PLACED  *\n*            ON THE INPUT STACK FOR EXECUTION AS SOON AS THIS COMMAND *\n*            PROCESSOR TERMINATES. THE EXECUTION FLOW IS AS FOLLOWS:  *\n*                                                                     *\n*            1) GET AND SAVE TIME OF DAY                              *\n*                                                                     *\n*            2) CHECK FOR VALID ENVIRONMENT. 'PDFINIT' MAY NOT BE     *\n*               EXECUTED FROM WITHIN A COMMAND PROCEDURE. THIS IS TO  *\n*               PREVENT RECURSION IN CASE SOMEONE PUTS THIS COMMAND   *\n*               IN THEIR PROFILE 'CLIST'.                             *\n*                                                                     *\n*            3) GET AND SAVE SMF SYSTEM ID                     WFJJAN89\n*                                                                     *\n*            4) BUILD A TABLE OF ELIGIBLE VOLUMES UPON WHICH TO       *\n*               ALLOCATE THE PROFILE DATA SET IF NECESSARY.           *\n*                                                                     *\n*            5) BUILD THE NAMES OF THE PROFILE DATASET AND     HD JUN86\n*               PROFILE COMMAND PROCEDURE. THE USERID FROM THE HD JUN86\n*               PSCB IS USED FOR THE ISPF PROFILE DATASET AND  HD JUN86\n*               THE PREFIX FROM THE UPT IS USED FOR THE        HD JUN86\n*               PROFILE CLIST.  HOWEVER, IF A COMMAND IS       HD JUN86\n*               SPECIFIED, THE PROFILE CLIST IS NOT ALLOCATED  HD JUN86\n*               AND EXECUTED.                                  HD JUN86\n*                                                                     *\n*            6) CALL 'IKJPARS' TO CHECK OPERANDS ON COMMAND    HD JUN86\n*               LINE                                           HD JUN86\n*                                                              HD JUN86\n*            7) IF 'NOISPF' SPECIFIED, SKIP STEPS 8, 9, & 10   HD JUN86\n*\n*            8) DEALLOCATE 'ISPPROF' DDNAME  (IF PREVIOUSLY USED)     *\n*                                                                     *\n*            9) ATTEMPT TO ALLOCATE FILE 'ISPPROF' EXCLUSIVELY        *\n*               AS DATASET '&SYSUID..ISPF.PROFILE'             HD MAY86\n*                                                                     *\n*           10) IF DATASET NOT FOUND, ALLOCATE IT NEW AS FOLLOWS:     *\n*                                                                     *\n*               ALLOC FI(ISPPROF) DA('&SYSUID..ISPF.PROFILE')- HD MAY86\n*               BLOCK(9040) DIR(10) UNIT(SYSALLDA) VOL(&VOL) - WFJJAN89\n*               SPACE(60) BLKSIZE(9040) LRECL(80) RECFM(F B)   WFJJAN89\n*                                                                     *\n*               VOLUME &VOL IS DETERMINED BY THE FOLLOWING     HD NOV86\n*               ALGORITHM:                                     HD NOV86\n*                                                              HD NOV86\n*                 1) EXTRACT 'MINUTE' PORTION OF TOD           HD NOV86\n*                 2) SEARCH UNITS FOR VOLUMES WITH \"TS\" IN     HD JUN87\n*                    POSITIONS 4 AND 5 OF THE NAME.            HD JUN87\n*                 3) COMPARE \"TS\" VOLUMES AGAINST SYSTEM ID    WFJJAN89\n*                    AND, IF VALID, BUILD A TABLE WITH TEN     WFJJAN89\n*                    VOLUME SERIALS. IF THERE ARE LESS THAN    WFJJAN89\n*                    TEN THE FIRST VOLSERS ARE \"WRAPPED        WFJJAN89\n*                    AROUND\" TO COMPLETE THE TABLE. SELECTION  WFJJAN89\n*                    IS AS FOLLOWS:                            WFJJAN89\n*                                                              WFJJAN89\n*                    IF 'MINUTE' VALUE IS:                     WFJJAN89\n*                                                              WFJJAN89\n*                    BETWEEN 00-05  - SELECT FIRST   VOLUME    WFJJAN89\n*                    BETWEEN 06-11  - SELECT SECOND  VOLUME    WFJJAN89\n*                    BETWEEN 12-17  - SELECT THIRD   VOLUME    WFJJAN89\n*                    BETWEEN 18-23  - SELECT FOURTH  VOLUME    WFJJAN89\n*                    BETWEEN 24-29  - SELECT FIFTH   VOLUME    WFJJAN89\n*                    BETWEEN 30-35  - SELECT SIXTH   VOLUME    WFJJAN89\n*                    BETWEEN 36-41  - SELECT SEVENTH VOLUME    WFJJAN89\n*                    BETWEEN 42-47  - SELECT EIGHTH  VOLUME    WFJJAN89\n*                    BETWEEN 48-53  - SELECT NINTH   VOLUME    WFJJAN89\n*                    BETWEEN 54-59  - SELECT TENTH   VOLUME    WFJJAN89\n*                                                              WFJJAN89\n*                 4) DISPLAY MESSAGE SHOWING VOLUME SERIAL     HD SEP87\n*                    SELECTED.                                 HD SEP87\n*                                                              HD JUN87\n*           11) IF THE 'CMD' KEYWORD WAS SUPPLIED:             HD JUN86\n*                                                              HD JUN86\n*               * ALLOCATE STORAGE FOR AN LSD                  HD JUN86\n*               * MOVE THE COMMAND SUPPLIED INTO THE LSD       HD JUN86\n*               * INVOKE IKJSTCK TO PLACE THE COMMAND ON THE   HD JUN86\n*                 INPUT STACK AND AN 'IN-STORAGE' SOURCE       HD JUN86\n*                 DATASET.                                     HD JUN86\n*               * SKIP STEPS 12, 13, & 14 AND RETURN           HD JUN86\n*                                                              HD JUN86\n*           12) ATTEMPT TO ALLOCATE '&SYSPREF..PROFILE.CLIST'         *\n*                                                                     *\n*           13) IF DATASET NOT FOUND, THEN JUST RETURN                *\n*                                                                     *\n*           14) IF DATASET WAS FOUND, THEN PLACE IT ON THE STACK      *\n*               FOR EXECUTION AFTER THIS COMMAND PROCESSOR FINISHES.  *\n*                                                                     *\n* USAGE  =  PLACE THE FOLLOWING PARAMETER FIELD ON                    *\n*           THE 'EXEC' CARD IN TSO LOGON PROCEDURES:                  *\n*                                                              HD JUN86\n*                //TSO    EXEC PGM=IKJEFT01,                   HD JUN86\n*                //     PARM='PDFINIT NOISPF CMD(''TIME'')'    HD JUN86\n*                                                              HD JUN86\n*           IF NO PARAMETERS ARE SPECIFIED, THEN               HD JUN86\n*           AN ISPF PROFILE DATASET IS ALLOCATED AND           HD JUN86\n*           AN '&SYSPREF..PROFILE.CLIST' IS PLACED ON          HD JUN86\n*           THE INPUT STACK.                                   HD JUN86\n*                                                              HD JUN86\n* ENTRY POINTS = PDFINIT                                              *\n*                                                                     *\n* EXIT NORMAL =  EXIT TO THE TERMINAL MONITOR PROGRAM WITH AN R/C IN  *\n*                REGISTER 15 AS FOLLOWS:                              *\n*                                                                     *\n*                R15 = 0       ALLOCATIONS COMPLETE - PROCEED         *\n*                R15 = 8       COULD NOT FIND PROFILE CLIST           *\n*                R15 = 12      AN ERROR OCCURED PROCESSING THIS CMD   *\n*                                                                     *\n* EXIT ERROR = DISPLAY MULTILEVEL ERROR MESSAGE AND                   *\n*              RETURN TO CALLER AS IN EXIT NORMAL ABOVE.              *\n*                                                                     *\n* RESTRICTIONS =                                                      *\n*                                                                     *\n*      WARNING! THIS COMMAND PROCEDURE CANNOT BE EXECUTED FROM WITHIN *\n*               A CLIST OR CMDPROC DATASET. THIS IS TO PREVENT A      *\n*               RECURSIVE LOOP IF PDFINIT IS ONE COMMAND IN A USER'S  *\n*               PROFILE CLIST.                                        *\n*                                                                     *\n*               A SPECIFIC CHECK IS MADE AND AN INVALID ENVIRONMENT   *\n*               WILL CAUSE AN ERROR MESSAGE TO BE GENERATED AND       *\n*               PROCESSING WILL TERMINATE.                            *\n*                                                                     *\n* REGISTER-CONVENTIONS =                                              *\n*                                                                     *\n*  REGISTER     0: WORK AND SYSTEM PARAMETERS                         *\n*  REGISTER     1: WORK AND SYSTEM PARAMETERS                         *\n*  REGISTERS 2-11: WORK REGISTERS                                     *\n*  REGISTER    12: PROGRAM BASE REGISTER                              *\n*  REGISTER    13: POINTER TO DYNAMIC AREA AND SAVE AREA              *\n*  REGISTER    14: LINK REGISTER FOR PROGRAM SUBROUTINES              *\n*  REGISTER    15: WORK REGISTER AND SUBROUTINE CALL REGISTER         *\n*                                                                     *\n* ATTRIBUTES -  PDFINIT IS REENTERABLE, REFRESHABLE AND               *\n*               RUNS IN PROBLEM STATE, PROBLEM KEY, UNAUTHORIZED.     *\n*                                                                     *\n* MODIFICATIONS =                                                     *\n*                                                                     *\n* DATE     WHO COMMENTS                                               *\n*                                                                     *\n* 05/05/89 HMD (APS)                                           HD MAY89\n*              1) ADDED SPECIAL CHARACTER '\u00ac' TO SYSTEM        HD MAY89\n*                 ID TABLE TO INDICATE PROFILE DATASET         HD MAY89\n*                 SHOULD BE ALLOCATED ON A 'WORK' VOLUME.      HD MAY89\n*                                                              HD MAY89\n*              2) CHANGE 'VOLT' SUBROUTINE TO CHECK FOR        HD MAY89\n*                 SPECIAL CHARACTER ABOVE. IF SO, USE          HD MAY89\n*                 'WORK' AS THE VOLUME PREFIX WHEN BUILDING    HD MAY89\n*                 THE VOLUME TABLE.                            HD MAY89\n*                                                              HD MAY89\n* 01/27/89 WFJ (APC)                                                  *\n*              1) REWORKED VOLSER TO SYSID CHECK TO USE A TABLE       *\n*                 (LINES FLAGGED WITH 'WFJFEB89'                      *\n*                                                                     *\n* 01/10/89 WFJ (APC)                                                  *\n*              1) EXPANDED TABLE TO ALLOW FOR TEN VOLSERS             *\n*              2) ADDED SUBROUTINE TO ACQUIRE SMF SYSTEM ID           *\n*              3) ADDED CHECKS OF VOLSER AGAINST SYSID DURING VOLSER  *\n*                 TABLE BUILD                                         *\n*                                                                     *\n* 07/??/88 HMD (APC)                                                  *\n*              1) INCREASED ALLOCATION OF PROFILE DATA SET:           *\n*                 SPACE(60) DIR(10)                                   *\n*                                                                     *\n* 09/03/87 HMD (APC)                                                  *\n*              1) ADD EXTRA VOLSER (NOW UP TO 5) FOR ALLOCATION       *\n*                 SELECTION.                                          *\n*              2) DISPLAY MESSAGE SHOWING WHICH VOLUME ON WHICH WE    *\n*                 ALLOCATED THE PROFILE DATASET.                      *\n*                                                                     *\n* 06/24/87 HMD (APC)                                                  *\n*              1) BUILD VOLUME TABLE FROM VOLUMES WITH 'TS' IN        *\n*                 POSITIONS FOUR AND FIVE OF ONLINE VOLUMES.          *\n*              2) PROPOGATE UP TO FOUR VOLUMES IN TABLE               *\n*              3) USE TOD ALGORIGTHM TO SELECT CORRECT VOLUMES        *\n*                                                                     *\n* 11/20/86 HMD (APC) ADDED LOOKUP ROUTINE TO SELECT PACK FOR NEW ISPF *\n*              PROFILE DATA SET.                                      *\n*                                                                     *\n* 06/26/86 HMD (SYNTEX)                                               *\n*              1)  ADDED PARSE ROUTINE                                *\n*              2)  ADDED \"NOISPF\" PARM TO BYPASS ISPF ALLOCATION      *\n*              3)  ADDED \"CMD\" PARM TO STACK QUOTED COMMAND STRING    *\n*                  INSTEAD OF THE PROFILE CLIST                       *\n*              4)  WROTE HELP MEMBER                                  *\n*              5)  MISC. CLEANUP                                      *\n*                                                                     *\n* 04/04/86 HMD (SYNTEX) INSTALLED                                     *\n*                                                                     *\n***********************************************************************\n         EJECT                                              *HMD 04/86*\nPDFINIT  TSOENTER REGS=YES,CPR=YES,PL=(CPPL,IO,SCAN,PARSE), *HMD 04/86*X\n               SP=1,WORK=AREALEN                            *HMD 04/86*\n         LA    R10,2048(R12)     ESTABLISH                     WFJFEB89\n         LA    R10,2048(R10)             SECOND                WFJFEB89\n         USING PDFINIT+4096,R10                 BASE           WFJFEB89\n         SPACE 2                                            *HMD 04/86*\n*************************************************************HMD 04/86*\n**                                                          *HMD 04/86*\n**       HOUSEKEEPING - INITIALIZE STORAGE                  *HMD 04/86*\n**                                                          *HMD 04/86*\n*************************************************************HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         LA    R0,TSOUSER          R0 -> USER SECTION       *HMD 03/85*\n         LA    R1,AREALEN          R1 = LENGTH OF WORKAREA  *HMD 03/85*\n         SLR   R15,R15             R15 = 0                  *HMD 03/85*\n         MVCL  R0,R14              CLEAR WORKAREA  TO ZEROS *HMD 03/85*\n         SPACE 1                                            *HMD 04/86*\n*************************************************************HMD 04/86*\n**                                                          *HMD 04/86*\n**       MAIN PROCESSING SECTION - CALL SUBROUTINES         *HMD 04/86*\n**                                                          *HMD 04/86*\n*************************************************************HMD 04/86*\n         TIME  DEC                 GET TIME OF DAY             HD NOV86\n         ST    R0,TIMESAVE         SAVE IT                     HD NOV86\n         SPACE 1                                            *HMD 04/86*\n         BAL   RLINK,CMDPROC       CHECK FOR VALID ENVIRON  *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         BAL   RLINK,IDS     GET HOME SYS. & SMF IDS FROM ACF2 WFJFEB89\n         SPACE 1                                               WFJFEB89\n         CLC   SYSID,HOMEID        COMPARE SYSID AND HOME SYS  WFJFEB89\n         BE    BUILDVOL            BUILD VOLUME TABLE          WFJFEB89\n         CLI   SYSID,C'B'          CHECK FOR APLB              WFJFEB89\n         BE    NOVOLTAB            SKIP BUILDING VOLUME TABLE  WFJFEB89\nBUILDVOL BAL   RLINK,VOLT          BUILD VOLUME TABLE          HD JUN87\n         SPACE 1                                               HD JUN87\nNOVOLTAB BAL   RLINK,NAMES         BUILD DATASET NAMES      *HMD 04/86*\n         SPACE 1                                               HD JUN86\n         BAL   RLINK,PARSE         PARSE OPERANDS              HD JUN86\n         SPACE 1                                               HD JUN86\n         TM    PARSFLAG,PARSFAIL   DID PARSE FAIL?             HD JUN86\n         LA    R2,MESS10           LOAD ERROR MESSAGE          HD JUN86\n         LA    R3,MESS02           LOAD SECOND LEVEL MESSAGE   HD JUN86\n         BO    ERRORMSG            SEND MESSAGE AND RETURN     HD JUN86\n         SPACE 1                                               HD JUN86\n         LUSE  IKJPARMD,R9         ADDRESS THE PARSE DSECT     HD JUN86\n         L     R9,PPLRANS          LOAD ANSWER PLACE           HD JUN86\n         CLI   KEYISPF+1,2         WAS NOISPF ENTERED?         HD JUN86\n         BNE   *+8                 BRANCH AROUND 'OI'          HD JUN86\n         OI    PARSFLAG,PNOISPF    INDICATE NO ISPF ALLOCATE   HD JUN86\n         SPACE 1                                               HD JUN86\n         LDROP R9                  NO NEED FOR BASE NOW        HD JUN86\n         BAL   RLINK,ALLODDN       FIX UP 'ISPPROF' DNAME   *HMD 04/86*\n         CLI   DYNFLAG,DYNFAIL     DID DYNALLOC FAIL?       *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         LA    R2,MESS01           GET FIRST LEVEL MESSAGE  *HMD 04/86*\n         LA    R3,MESS02           GET SECOND LEVEL MESSAGE *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         BE    ERRORMSG            YES, PRINT MSG AND END   *HMD 04/86*\n         BAL   RLINK,ALLODSN       GO ALLOCATE ISPPROF DSN  *HMD 04/86*\n         CLI   DYNFLAG,DYNFAIL     CHECK FOR DYNALLOC FAIL  *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         LA    R2,MESS01           GET FIRST LEVEL MESSAGE  *HMD 04/86*\n         LA    R3,MESS02           GET SECOND LEVEL MESSAGE *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         BE    ERRORMSG            YES, PRINT MSG AND END   *HMD 04/86*\n         SPACE 1                                               HD JUN86\n         LUSE  IKJPARMD,R9         ADDRESS THE PDE             HD JUN86\n         L     R9,PPLRANS          LOAD ANSWER PLACE           HD JUN86\n         CLI   KEYCMD+1,0          'COMMAND' KEYWORK PRESENT?  HD JUN86\n         BE    CLII                NO, TRY THE PROFILE CLIST   HD JUN86\n         TM    CMD+6,X'80'         IS COMMAND PRESENT?         HD JUN86\n         BZ    CLII                NO, TRY THE PROFILE CLIST   HD JUN86\n         OI    PARSFLAG,PCMD       INDICATE COMMAND PRESENT    HD JUN86\n         SPACE 1                                               HD JUN86\n         BAL   RLINK,DOCMD         GO STACK THE COMMAND        HD JUN86\n         SPACE 1                                               HD JUN86\n         SLR   R2,R2               CLEAR RETURN CODE           HD JUN86\n         B     RETURN                                          HD JUN86\n         LDROP R9                                              HD JUN86\n         SPACE 1                                               HD JUN86\nCLII     BAL   RLINK,ALLOCLI       GO CHECK FOR CLIST       *HMD 04/86*\n         CLI   DYNFLAG,DYNCNF      CLIST NOT FOUND?         *HMD 04/86*\n         BNE   CHKFAIL             YES, JUST GO BACK        *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         LA    R2,8                RETURN CODE 8            *HMD 04/86*\n         B     RETURN              RETURN TO CALLER         *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\nCHKFAIL  CLI   DYNFLAG,DYNFAIL     FAILURE?                 *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         LA    R2,MESS05           GET FIRST LEVEL MESSAGE  *HMD 04/86*\n         LA    R3,MESS06           GET SECOND LEVEL MSG     *HMD 04/86*\n         BE    ERRORMSG            PRINT MESSAGE AND RETURN *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         BAL   RLINK,GOSTACK       GO SET UP STACK          *HMD 04/86*\n         SLR   R2,R2               CLEAR RETURN CODE        *HMD 04/86*\n         B     RETURN              RETURN TO CALLER         *HMD 04/86*\n         EJECT\n*************************************************************HMD 04/86*\n**                                                          *HMD 04/86*\n**       RETURN TO THE TERMINAL MONITOR PROGRAM             *HMD 04/86*\n**               (FREE STORAGE AND GO)                      *  HD JUN86\n**                                                          *  HD JUN86\n*************************************************************  HD JUN86\nRETURN   IKJRLSA  PPLRANS          CLEAR PARSE STORAGE         HD JUN86\n         SPACE 2                                               HD JUN86\n         TSOLEAVE RETCODE=(2)      RETURN TO CALLER         *HMD 04/86*\n         EJECT\n***************************************************************HD JUN86\n**                                                             HD JUN86\n**  PARSE    -  INVOKE PARSE SERVICE ROUTINE                   HD JUN86\n**                                                             HD JUN86\n***************************************************************HD JUN86\nPARSE    DS    0H                                              HD JUN86\n         ST    RLINK,SAVRLINK      SAVE LINK REGISTER          HD JUN86\n         MVI   PARSFLAG,0          CLEAR PARSE FLAG            HD JUN86\n         MVC   PPLPCL,APDFTAB      MOVE PARM TAB ENTRY         HD JUN86\n         XC    TSOECB,TSOECB       CLEAR THE EVENT BLOCK       HD JUN86\n         SPACE 1\n         CALLTSSR EP=IKJPARS,MF=(E,PPL)                        HD JUN86\n         SPACE 1\n         LTR   R15,R15             CHECK RETURN CODE           HD JUN86\n         BZ    PARSEZ              OK RETURN TO CALLER         HD JUN86\n         C     R15,PARSERC         PROMPT NOT ALLOWED?         HD JUN86\n         BE    PARSEB              YES, JUST SEND MESSAGE      HD JUN86\n         SPACE 1\n         ST    R15,GFRCODE         SAVE RETURN CODE            HD JUN86\n         MVI   GFCALLID+1,GFPARSE  INDICATE PARSE IS CALLER    HD JUN86\n         LA    R0,CPPL             LOAD CPPL ADDRESS           HD JUN86\n         ST    R0,GFCPPLP          SAVE POINTER TO CPPL        HD JUN86\n         LA    R0,TSOECB           LOAD ECB POINTER            HD JUN86\n         ST    R0,GFECBP           SAVE IN PARM LIST           HD JUN86\n         LA    R0,L'PGMNAME        LOAD LENGTH OF PGM NAME     HD JUN86\n         STH   R0,GFPGMNL          SAVE LENGTH OF PROGRAM NAME HD JUN86\n         LA    R0,PGMNAME          LOAD PROGRAM NAME           HD JUN86\n         ST    R0,GFPGMNP          SAVE POINTER TO NAME        HD JUN86\n         LA    R0,GFPARMS          LOAD PARM ADDRESS           HD JUN86\n         ST    R0,GFPTR            SAVE IN PARM POINTER        HD JUN86\n         SPACE 1\n         LA    R1,GFPTR                                        HD JUN86\n         SPACE 1                                               HD JUN86\n         XC    TSOECB,TSOECB       CLEAR THE EVENT BLOCK       HD JUN86\n         LINK  EP=IKJEFF19         LINK TO MESSAGE ROUTINE     HD JUN86\n         SPACE 1\nPARSEB   OI    PARSFLAG,PARSFAIL   INDICATE PARSE FAILURE      HD JUN86\n         SPACE 1\nPARSEZ   L     RLINK,SAVRLINK      LOAD RETURN REGISTER        HD JUN86\n         BR    RLINK               RETURN TO CALLER            HD JUN86\n         EJECT\n***************************************************************WFJFEB89\n**                                                             WFJFEB89\n**  IDS      -  ACQUIRE \"HOME SYSTEM\" AND SMF SYSID FROM ACF2  WFJFEB89\n**                                                             WFJFEB89\n***************************************************************WFJFEB89\nIDS      EQU   *                                               WFJFEB89\n         ST    RLINK,SAVRLINK      SAVE RETURN REGISTER        WFJFEB89\n         SPACE 1                                               WFJFEB89\n         ACFINCVT 4,NONE=IDSERROR  CALL ACF FOR ACF CVT ADDR.  WFJFEB89\n         LUSE  ACCVT,R4            ADDRESS THE ACF CVT         WFJFEB89\n         SPACE 1                   CALL ACF FOR ACF UCB ADDR.  WFJFEB89\n         ACFGUCB 5,NONE=IDSERROR,INLINE=YES                    WFJFEB89\n         LDROP R4                  NO LONGER NEED ACF CVT      WFJFEB89\n         LUSE  ACUCB,R5            ADDRESS THE ACF UCB         WFJFEB89\n         MVC   SMFID(4),ACUSCPU    SAVE SMF SYSID              WFJFEB89\n         L     R6,ACUUIDP          LOAD ACF UID RECORD POINTER WFJFEB89\n         MVC   HOMEID(1),23(R6)    SAVE HOME SYSTEM ID         WFJFEB89\n         B     IDSEND              RETURN                      WFJFEB89\n         SPACE 1                                               WFJFEB89\nIDSERROR EQU   *                                               WFJFEB89\n         LA    R2,MESS14           GET FIRST LEVEL MESSAGE     WFJFEB89\n         LA    R3,MESS02           GET SECOND LEVEL MESSAGE    WFJFEB89\n         B     ERRORMSG            YES, PRINT MSG AND END      WFJFEB89\n         SPACE 1                                               WFJFEB89\nIDSEND   L     RLINK,SAVRLINK      LOAD RETURN REGISTER        WFJFEB89\n         BR    RLINK               RETURN TO CALLER            WFJFEB89\n         LDROP R5                  NO LONGER NEED ACF UCB      WFJFEB89\n         INUSE ,                                               WFJFEB89\n         EJECT                                                 WFJFEB89\n***************************************************************HD JUN87\n**                                                             HD JUN87\n**  VOLT - BUILD THE VOLUME TABLE, MABEL                       HD JUN87\n**                                                             HD JUN87\n***************************************************************HD JUN87\nVOLT     DS    0H                                              HD JUN87\n         LUSE  CVT,R3              ADDRESS THE CVT             HD JUN87\n         LUSE  UCBOB,R7            ADDRESS THE UCB             HD JUN87\n         SPACE 1                                               HD JUN87\n         ST    RLINK,SAVRLINK      SAVE RETURN REGISTER        HD JUN87\n         L     R3,CVTPTR           LOAD CVT POINTER            HD JUN87\n         MVC   VOLTAB(VOLTABL),VOLTABI  MOVE VOLTAB SKELETON   HD JUN87\n         MVC   SYSTAB(SYSTABL),SYSTABI  MOVE SYSTAB SKELETON   WFJFEB89\n         LA    R8,VOLTAB           LOAD VOLUME TABLE ADDRESS   HD JUN87\n         LA    R4,SYSTAB           LOAD SYSTEM TABLE ADDRESS   WFJFEB89\n         MVI   UCBFLAG,UCB3DACC    MOVE IN DASD DEVICE CODE    HD JUN87\n         SPACE 1                                               HD JUN87\nSYSLOOP  CLI   0(R4),X'FF'         END OF TABLE?               WFJFEB89\n         BE    SYSERROR            NO VALID SYSID FOUND        WFJFEB89\n         CLC   SYSID,0(R4)         COMPARE SYSID WITH ENTRY    WFJFEB89\n         BE    UCBLOOP             VALID SYSID FOUND           WFJFEB89\n         LA    R4,SYSTLEN(R4)      LOAD NEXT TABLE ENTRY       WFJFEB89\n         B     SYSLOOP             PROCESS NEXT ENTRY          WFJFEB89\n         SPACE 1                                               WFJFEB89\nUCBLOOP  CLI   0(R8),X'FF'         END OF TABLE?               HD JUN87\n         BE    UCBEND              END OF TABLE                HD JUN87\n         L     R15,CVTUCBSC        LOAD LOOKUP ROUTINE ADDR    HD JUN87\n         SPACE 1                                               HD JUN87\n         CALL  (15),               CALL UCB LOOKUP ROUTINE     HD JUN87+\n               (UCBWORK,UCBFLAG,UCBUNIT),                      HD JUN87+\n               VL,MF=(E,UCBCALL)                               HD JUN87\n         SPACE 1                                               HD JUN87\n         LTR   R15,R15             CHECK FOR END OF TABLE      HD JUN87\n         BNZ   UCBEND              END OF UCB TABLE            HD JUN87\n         SPACE 1                                               HD JUN87\nUCBGOT   L     R7,UCBUNIT          GET UNIT CNTL BLOCK ADDR    HD JUN87\n         TM    UCBSTAT,UCBONLI     ONLINE?                     HD JUN87\n         BZ    UCBLOOP             SKIP OFFLINE SERIALS        HD JUN87\n         CLI   1(R4),NOT           CHECK FOR WORK VOLUME       HD MAY89\n         BNE   UCBNORM             NO, USE NORMAL CRITERIA     HD MAY89\n         CLC   UCBVOLI(4),=C'WORK' WORK VOLUME?                HD MAY89\n         BNE   UCBLOOP             NO FETCH NEXT ONE           HD MAY89\n         TM    UCBSTAB,UCBBSTR     STORAGE VOLUME?             HD MAY89\n         BZ    UCBLOOP             NO..TRY THE NEXT            HD MAY89\n         MVC   1(6,R8),UCBVOLI     MOVE IN VOLUME SERIAL       HD JUN87\n         LA    R8,VOLTLEN(R8)      LOAD NEXT ENTRY             HD JUN87\n         B     UCBLOOP             GET NEXT UNIT               HD JUN87\nUCBNORM  CLC   UCBVOLI(1),1(R4)    VALIDATE VOLUME FOR SYSTEM  WFJFEB89\n         BNE   UCBLOOP             SKIP UNMATCHED VOLUMES      WFJFEB89\n         CLC   UCBVOLI+3(2),=C'TS' CHECK FOR 'TS' VOLUME       HD JUN87\n         BNE   UCBLOOP             SKIP NON-TS VOLUMES         HD JUN87\n         MVC   1(6,R8),UCBVOLI     MOVE IN VOLUME SERIAL       HD JUN87\n         LA    R8,VOLTLEN(R8)      LOAD NEXT ENTRY             HD JUN87\n         B     UCBLOOP             GET NEXT UNIT               HD JUN87\n         SPACE 1                                               HD JUN87\nUCBEND   DS    0H                  END OF TABLE OR UCBS        HD JUN87\n         LA    R6,VOLTAB           GET TABLE ADDRESS           HD JUN87\n         CR    R6,R8               ARE WE STILL AT BEGINNING?  HD JUN87\n         BE    UCBERROR            YES, NO CANDIDATE VOLUME    HD JUN87\n         SPACE 1                                               HD JUN87\nUCBPROP  DS    0H                  PROPOGATE VOLUME SERIAL     HD JUN87\n         CLI   0(R8),X'FF'         DID WE HIT END OF TABLE?    HD JUN87\n         BE    UCBBYE              YES, GO BACK                HD JUN87\n* IF WE GOT HERE, WE RAN OUT OF VOLUMES BEFORE END OF TABLE    HD JUN87\n         MVC   1(6,R8),1(R6)       MOVE IN FIRST/NEXT VOLSER   WFJJAN89\n         LA    R8,VOLTLEN(R8)      INCREMENT TO NEXT           HD JUN87\n         LA    R6,VOLTLEN(R6)      INCREMENT TO NEXT           WFJJAN89\n         B     UCBPROP             TRY NEXT SLOT               HD JUN87\n         SPACE 1                                               HD JUN87\nSYSERROR EQU   *                                               WFJFEB89\n         LA    R2,MESS13           GET FIRST LEVEL MESSAGE     WFJFEB89\n         LA    R3,MESS02           GET SECOND LEVEL MESSAGE    WFJFEB89\n         B     ERRORMSG            YES, PRINT MSG AND END      WFJFEB89\n         SPACE 1                                               WFJFEB89\nUCBERROR DS    0H                                              HD JUN87\n         LA    R2,MESS12           GET FIRST LEVEL MESSAGE     HD JUN87\n         LA    R3,MESS02           GET SECOND LEVEL MESSAGE    HD JUN87\n         B     ERRORMSG            YES, PRINT MSG AND END      HD JUN87\n         SPACE 1                                               HD JUN87\nUCBBYE   L     RLINK,SAVRLINK      LOAD RETURN ADDRESS         HD JUN87\n         BR    RLINK               RETURN TO CALLER            HD JUN87\n         LDROP R3,R7               UNBASE THYSELF              HD JUN87\n         EJECT                                                 HD JUN87\n*************************************************************HMD 04/86*\n**                                                          *HMD 04/86*\n**  ALLODDN  -  DEALLOCATE THE PROFILE DDNAME               *HMD 04/86*\n**                                                          *HMD 04/86*\n*************************************************************HMD 04/86*\n         SPACE 2                                            *HMD 04/86*\n*************************************************************HMD 04/86*\n*   BUILD SVC99 REQUEST BLOCKS IN GOTTEN AREA TO DEALLOCATE *HMD 04/86*\n*   THE PROFILE DDNAME                                      *HMD 04/86*\n*************************************************************HMD 04/86*\nALLODDN  DS    0H                                           *HMD 04/86*\n         ST    RLINK,STAKLINK   SAVE LINKAGE REG IN STACK   *HMD 04/86*\n         TM    PARSFLAG,PNOISPF WAS 'NOISPF' SPECIFIED?        HD JUN86\n         BO    ALLOCDNE         ALL DONE, GO HOME              HD JUN86\n         LA    R5,RB1           BUILD S99 RB PTR\n         ST    R5,APRB1\n         OI    APRB1,S99RBPND\n         SPACE 2\n         LUSE  S99RB,R5\n         MVI   S99RBLN,20       BUILD S99 RB\n         MVI   S99VERB,S99VRBUN UNALLOCATE THE DDNAME       *HMD 04/86*\n         LA    R6,RB1P1\n         ST    R6,S99TXTPP\n         LDROP R5\n         SPACE 2\n         LA    R5,RB1TU1\n         ST    R5,RB1P1\n         LUSE  S99TUNIT,R5      BUILD RB1TU1 - DDNAME\n         MVI   S99TUKEY+1,DALDDNAM\n         MVI   S99TUNUM+1,X'01'\n         MVI   S99TULNG+1,L'DDNAME\n         MVC   S99TUPAR(8),DDNAME\n         OI    RB1P1,S99RBPND               FLAG END OF CHAIN\n         SPACE 2\n         LDROP R5\n         SPACE 1\n         MVI   DYNFLAG,DYNOK ASSUME ALLOCATION WAS FINE     *HMD 04/86*\n         LA    R1,APRB1      LOAD PARAMETER POINTER FOR SVC99\n         SPACE 1\n         DYNALLOC            ISSUE SVC99\n         SPACE 1\n         LTR   RRC,RRC       CHECK RETURN CODE\n         BZ    ALLOCDNE      RETURN TO CALLER               *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         LA    R1,RB1        POINTER TO REQUEST BLOCK       *HMD 04/86*\n         LUSE  S99RB,R1      ADDRESS THE BLOCK              *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         CLC   S99ERROR,=X'0438'  SEE IF DDNAME NOT FOUND   *HMD 04/86*\n         BE    ALLOCDNE           ...NO ERROR AFTER ALL     *HMD 04/86*\n         LDROP R1\n         MVI   DYNFLAG,DYNFAIL    INDICATE ERROR            *HMD 04/86*\n         ST    R15,SVC99RC        SAVE RETURN CODE          *HMD 04/86*\n         LA    R15,SVC99RC        LOAD CODE ADDRESS         *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         BAL   RLINK,DERROR       CALL IKJEFF18             *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\nALLOCDNE L     RLINK,STAKLINK     LOAD FROM THE STACK       *HMD 04/86*\n         BR    RLINK              RETURN TO CALLER          *HMD 04/86*\n         EJECT\n*************************************************************HMD 04/86*\n**                                                          *HMD 04/86*\n**  ALLODSN  -  ALLOC THE XXXX.ISPF.PROFILE DSNAME          *HMD 04/86*\n**                                                          *HMD 04/86*\n*************************************************************HMD 04/86*\n         SPACE 2                                            *HMD 04/86*\n*************************************************************HMD 04/86*\n*   BUILD SVC99 REQUEST BLOCKS IN GOTTEN AREA TO ALLOCATE   *HMD 04/86*\n*   THE PROFILE DATASET OLD                                 *HMD 04/86*\n*************************************************************HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\nALLODSN  DS    0H                 ALLOCATE THE PROFILE DSN  *HMD 04/86*\n         ST    RLINK,STAKLINK     PUSH LINKAGE ON THE STACK *HMD 04/86*\n         TM    PARSFLAG,PNOISPF   WAS 'NOISPF' SPECIFIED?      HD JUN86\n         BO    ALLODSNE           ALL DONE, RETURN             HD JUN86\n         LA    R5,RB1             BUILD S99 RB PTR          *HMD 04/86*\n         ST    R5,APRB1\n         OI    APRB1,S99RBPND\n         SPACE 1\n         LUSE  S99RB,R5           ESTABLISH BASE REGISTER\n         MVI   S99RBLN,X'14'      BUILD S99 RB\n         MVI   S99VERB,S99VRBAL   INDICATE 'ALLOCATE'\n         MVI   S99FLG11,S99NOCNV  NON-CONVERTABLE BONDS\n         LA    R6,RB1P1\n         ST    R6,S99TXTPP\n         LDROP R5\n         SPACE 2\n         LA    R5,RB1TU1\n         ST    R5,RB1P1\n         LUSE  S99TUNIT,R5        BUILD RB1TU1 - DDNAME\n         MVI   S99TUKEY+1,DALDDNAM\n         MVI   S99TUNUM+1,X'01'\n         MVI   S99TULNG+1,L'DDNAME\n         MVC   S99TUPAR(8),DDNAME\n         SPACE 1\n         LA    R5,RB1TU2          BUILD RB1TU2 - DSNAME\n         ST    R5,RB1P2\n         MVI   S99TUKEY+1,DALDSNAM\n         MVI   S99TUNUM+1,X'01'\n         SPACE 1\n         LA    R5,RB1TU4          BUILD RB1TU4 - STATUS\n         ST    R5,RB1P4\n         MVI   S99TUKEY+1,DALSTATS\n         MVI   S99TUNUM+1,X'01'\n         MVI   S99TULNG+1,X'01'\n         MVI   S99TUPAR,DA08OLD             SET FOR OLD\n         SPACE 1\n         LA    R5,RB1TU5          BUILD RB1TU5 - DISPOSITION\n         ST    R5,RB1P5\n         MVI   S99TUKEY+1,DALNDISP\n         MVI   S99TUNUM+1,X'01'\n         MVI   S99TULNG+1,X'01'\n         MVI   S99TUPAR,DA08KEEP  SET FOR KEEP\n         OI    RB1P5,S99RBPND     FLAG END OF CHAIN\n         LDROP R5\n         SPACE 2\n         MVI   DYNFLAG,DYNOK      ASSUME ALLOCATION OK      *HMD 04/86*\n         LA    R1,APRB1           LOAD PARAMETER POINTER    *HMD 04/86*\n         SPACE 1\n         DYNALLOC                 ISSUE SVC99\n         SPACE 1\n         LTR   RRC,RRC            CHECK SVC99 RETURN CODE\n         BZ    ALLODSNE           ALL OK, END THIS ROUTINE  *HMD 04/86*\n         SPACE 2\n         LA    R1,RB1\n         LUSE  S99RB,R1\n         SPACE 1\n         CLC   S99ERROR,=X'1708'  SEE IF DSNAME NOT FOUND\n         BE    ALLODSN2           ... OK NO ERROR AFTER ALL\n         LDROP R1\n         MVI   DYNFLAG,DYNFAIL    INDICATE FAILURE          *HMD 04/86*\n         ST    RRC,SVC99RC        SAVE RETURN CODE FOR FF18 *HMD 04/86*\n         LA    RRC,SVC99RC        POINT TO RETURN CODE      *HMD 04/86*\n         BAL   RLINK,DERROR       CALL IKJEFF18             *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\nALLODSNE DS    0H                                           *HMD 04/86*\n         L     RLINK,STAKLINK     LOAD FROM STACK           *HMD 04/86*\n         BR    RLINK              RETURN TO CALLER          *HMD 04/86*\n         EJECT\n*************************************************************HMD 04/86*\n** OK - MUST NOT HAVE ONE SO LETS BUILD A NEW               *HMD 04/86*\n** PROFILE DATASET BUILD MORE SVC99 REQUEST BLOCKS          *HMD 04/86*\n** IN GOTTEN AREA TO ALLOCATE THE PROFILE DATASET AS        *HMD 04/86*\n** NEW, CATLG                                               *HMD 04/86*\n*************************************************************HMD 04/86*\nALLODSN2 DS    0H            ALLOCATE DSNAME AS NEW         *HMD 04/86*\n         LUSE  S99TUNIT,R5\n         LA    R5,RB1TU4     BUILD RB1TU4 - STATUS\n         MVI   S99TUPAR,DA08NEW             SET FOR NEW\n         SPACE 1\n         LA    R5,RB1TU5     BUILD RB1TU5 - DISPOSITION\n         ST    R5,RB1P5      RESET END OF CHAIN FLAG\n         MVI   S99TUPAR,DA08CAT             SET FOR CATLG\n         SPACE 1\n         LA    R5,RB1TU7     BUILD RB1TU7 - BLOCKLEN SPECS  *HMD 04/86*\n         ST    R5,RB1P7\n         MVI   S99TUKEY+1,DALBLKLN          AVG BLOCK LEN   *HMD 04/86*\n         MVI   S99TUNUM+1,X'01'\n         MVI   S99TULNG+1,X'03'             MOVE IN LENGTH  *HMD 04/86*\n         MVC   S99TUPAR+1(2),BLKSIZE        MOVE IN BLKSIZE *HMD 04/86*\n         SPACE 1\n         LA    R5,RB1TUA     BUILD RB1TUA - PRIMARY SPACE\n         ST    R5,RB1PA\n         MVI   S99TUKEY+1,DALPRIME\n         MVI   S99TUNUM+1,X'01'\n         MVI   S99TULNG+1,X'03'\n         MVC   S99TUPAR+1(2),PRIM           SET FOR # BLKS  *HMD 04/86*\n         SPACE 1\n         LA    R5,RB1TUC     BUILD RB1TUC - DIRECTORY BLKS\n         ST    R5,RB1PC\n         MVI   S99TUKEY+1,DALDIR\n         MVI   S99TUNUM+1,X'01'\n         MVI   S99TULNG+1,X'03'\n         MVC   S99TUPAR+1(2),DIRBLKS        SET FOR # DIR BLK\n         SPACE 1\n***************************************************************WFJFEB89\n*                                                              WFJFEB89\n* IF SYSID EQ HOMEID THEN                                      WFJFEB89\n*   USE UNIT=SYSALLDA AND ALLOC USING VOLSER FROM VOLUME TABLE WFJFEB89\n* ELSE IF (SYSID NE HOMEID) AND (EXECUTING ON APLB) THEN       WFJFEB89\n*   USE UNIT=SYSDA AND ALLOC WITHOUT VOLSER                    WFJFEB89\n*                                                              WFJFEB89\n* WHERE SYSDA IS GENERIC FOR UNITS WITH VOLSERS WORKXX AND     WFJFEB89\n* SYSALLDA IS GENERIC FOR ALL UNITS.  THIS CONFORMS TO THE     WFJFEB89\n* RULE (SDB: 02/22/89) THAT CROSSOVER USERS ON THE PRODUCTION  WFJFEB89\n* SYSTEM MAY ONLY ALLOCATE ON WORK VOLUMES.                    WFJFEB89\n*                                                              WFJFEB89\n***************************************************************WFJFEB89\nGETUNIT  LA    R5,RB1TU15          BUILD RB1TU15 - UNIT        HD NOV86\n         CLC   SYSID,HOMEID        COMPARE SYSID AND HOME SYS  WFJFEB89\n         BE    SAMESYSU            'SYSALLDA' & ALLOC BY VOLSERWFJFEB89\n         CLI   SYSID,C'B'          CHECK FOR APLB              WFJFEB89\n         BNE   SAMESYSU            'SYSALLDA' & ALLOC BY VOLSERWFJFEB89\n         MVC   S99TUPAR(L'UNITDA),UNITDA  ELSE USE 'SYSDA'     WFJFEB89\n         MVI   S99TULNG+1,L'UNITDA                             WFJFEB89\n*                                  LOAD WORK VOL ALLOC MESSAGE WFJFEB89\n         MVI   MESSDYN,C' '        CLEAR DYNAMIC AREA          WFJFEB89\n         MVC   MESSDYN+1(L'MESSDYN-1),MESSDYN                  WFJFEB89\n         MVC   MESSDYN(MESS15L),MESS15                         WFJFEB89\n         B     GETUNITE            ALLOC W/O VOLSER            WFJFEB89\nSAMESYSU MVC   S99TUPAR(L'UNIT),UNIT                           HD NOV86\n         MVI   S99TULNG+1,L'UNIT                               HD NOV86\n         SPACE 1\n         LA    R5,RB1TU10    BUILD RB1TU10- VOL SER\n         ST    R5,RB1P10\n         MVI   S99TUKEY+1,DALVLSER\n         MVI   S99TUNUM+1,X'01'\n         MVI   S99TULNG+1,X'06'\n         SPACE 1                                               HD NOV86\n***************************************************************HD NOV86\n**                                                            *HD NOV86\n**   CALCULATE VOLSER VALUE BASED ON TIME OF DAY              *HD NOV86\n**                                                            *HD NOV86\n***************************************************************HD NOV86\nSAMESYSV SLR   R1,R1                                           HD NOV86\n         IC    R1,TIMESAVE+1 GET 'MINUTES' VALUE               HD NOV86\n         LA    R2,VOLTAB     GET VOLUME TABLE                  HD NOV86\n         MVC   S99TUPAR(6),=C'#ERROR'                          HD JUN87\n*                            MOVE IN DEFAULT VOLSER            HD JUN87\n         SPACE 1                                               HD NOV86\nTIMECHK  CLI   0(R2),X'FF'   END OF TABLE?                     HD NOV86\n         BE    GETUNITE      END OF TABLE <BAD UNIT>           HD NOV86\n         CLM   R1,1,0(R2)    COMPARE WITH SECOND VALUE         HD NOV86\n         BNH   TIMELOW       CHECK SECOND VALUE                HD NOV86\n         LA    R2,VOLTLEN(R2)      INCREMENT TO NEXT ENTRY     HD NOV86\n         B     TIMECHK                                         HD NOV86\nTIMELOW  MVC   S99TUPAR(VOLTLEN-1),1(R2)                       HD JUN87\n*                            MOVE IN VOLUME SERIAL             HD NOV86\n         MVI   MESSDYN,C' '      CLEAR DYNAMIC AREA            HD SEP87\n         MVC   MESSDYN+1(L'MESSDYN-1),MESSDYN                  HD SEP87\n         MVC   MESSDYN(MESS03L),MESS03                         HD SEP87\n         MVC   MESSDYN+MESS03L-6(6),1(R2)                      HD SEP87\n         SPACE 2\nGETUNITE LA    R5,RB1TU15    BUILD RB1TU15- UNIT\n         ST    R5,RB1P15\n         MVI   S99TUKEY+1,DALUNIT\n         MVI   S99TUNUM+1,X'01'\n*  TEXT HAS BEEN PREVIOUSLY MOVED INTO PLACE                *HMD 04/86*\n         SPACE 1\n         LA    R5,RB1TU30    BUILD RB1TU30- BLKSIZE\n         ST    R5,RB1P30\n         MVI   S99TUKEY+1,DALBLKSZ\n         MVI   S99TUNUM+1,X'01'\n         MVI   S99TULNG+1,X'2'\n         MVC   S99TUPAR(2),BLKSIZE          MOVE IN BLKSIZE\n         SPACE 1\n         LA    R5,RB1TU3C    BUILD RB1TU3C- DSORG\n         ST    R5,RB1P3C\n         MVI   S99TUKEY+1,DALDSORG\n         MVI   S99TUNUM+1,X'01'\n         MVI   S99TULNG+1,X'2'\n         MVI   S99TUPAR,X'02'               MOVE IN DSORG=PO\n         SPACE 1\n         LA    R5,RB1TU42    BUILD RB1TU42- LRECL\n         ST    R5,RB1P42\n         MVI   S99TUKEY+1,DALLRECL\n         MVI   S99TUNUM+1,X'01'\n         MVI   S99TULNG+1,X'02'\n         MVC   S99TUPAR(2),LRECL            MOVE IN LRECL\n         SPACE 1\n         LA    R5,RB1TU49    BUILD RB1TU49- RECFM\n         ST    R5,RB1P49\n         MVI   S99TUKEY+1,DALRECFM\n         MVI   S99TUNUM+1,X'01'\n         MVI   S99TULNG+1,X'1'\n         MVI   S99TUPAR,X'90'        MOVE IN RECFM=FB\n         SPACE 1\n         OI    RB1P49,S99RBPND       FLAG END OF CHAIN\n         LDROP R5\n         SPACE 2\n         MVI   DYNFLAG,DYNOK ASSUME ALLOCATION WAS OK       *HMD 04/86*\n         LA    R1,APRB1      LOAD PARAMETER POINTER FOR SVC99\n         DYNALLOC            ISSUE SVC99\n         SPACE 1\n         LTR   RRC,RRC           CHECK SVC99 RETURN CODE\n         BNZ   ALLOFAIL          NON-ZERO, SOME FAILURE     *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         LA    R1,1              NUMBER OF SEGMENTS         *HMD 04/86*\n         ST    R1,OLD            SAVE IN OLD                *HMD 04/86*\n         SPACE 1                                               HD SEP87\n         LA    R1,MESSDYN        USE DYNAMIC AREA FOR M3       HD SEP87\n         ST    R1,OLD+4          SAVE IN OLD                *HMD 04/86*\n         XC    TSOECB,TSOECB     CLEAR EVENT CNTL BLOCK     *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         PUTLINE PARM=PTPB,OUTPUT=(OLD,TERM,SINGLE,INFOR),  *HMD 04/86*X\n               MF=(E,IOPL)                                  *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         B     ALLODSXE          RETURN TO CALLER           *HMD 04/86*\nALLOFAIL DS    0H                                           *HMD 04/86*\n         MVI   DYNFLAG,DYNFAIL   INDICATE FAILURE           *HMD 04/86*\n         ST    RRC,SVC99RC       SAVE RETURN CODE           *HMD 04/86*\n         LA    RRC,SVC99RC       LOAD ADDRESS               *HMD 04/86*\n         LA    R1,RB1            GET PARM BLOCK POINTER     *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         BAL   RLINK,DERROR      PRINT ERROR MESSAGE        *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\nALLODSXE DS    0H                END OF THE LINE\n         L     RLINK,STAKLINK    RELOAD FROM STACK          *HMD 04/86*\n         BR    RLINK             RETURN TO CALLER           *HMD 04/86*\n         EJECT                                              *HMD 04/86*\n*************************************************************HMD 04/86*\n**                                                          *HMD 04/86*\n**  ALLOCLI  -  CHECK FOR EXISTANCE OF:                     *HMD 04/86*\n**              '&PREFIX..PROFILE.CLIST'                    *HMD 04/86*\n**  IF SO, THEN PUT IT ON THE EXECUTION STACK               *HMD 04/86*\n**                                                          *HMD 04/86*\n*************************************************************HMD 04/86*\n         SPACE 2                                            *HMD 04/86*\nALLOCLI  DS    0H                                           *HMD 04/86*\n         ST    RLINK,STAKLINK   SAVE LINKAGE REG IN STACK   *HMD 04/86*\n         LA    R5,RB1           BUILD S99 RB PTR            *HMD 04/86*\n         ST    R5,APRB1                                     *HMD 04/86*\n         OI    APRB1,S99RBPND                               *HMD 04/86*\n         SPACE 2                                            *HMD 04/86*\n         LUSE  S99RB,R5                                     *HMD 04/86*\n         MVI   S99RBLN,20       BUILD S99 RB                *HMD 04/86*\n         MVI   S99VERB,S99VRBAL ALLOCATE THE DSNAME         *HMD 04/86*\n         LA    R6,RB1P1                                     *HMD 04/86*\n         ST    R6,S99TXTPP                                  *HMD 04/86*\n         LDROP R5                                           *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         LA    R5,RB1TU1                                    *HMD 04/86*\n         ST    R5,RB1P1                                     *HMD 04/86*\n         LUSE  S99TUNIT,R5      BUILD RB1TU1 - RETURN DDN   *HMD 04/86*\n         MVI   S99TUKEY+1,DALRTDDN    RETURN DDNAME         *HMD 04/86*\n         MVI   S99TUNUM+1,X'01'                             *HMD 04/86*\n         MVI   S99TULNG+1,8           DDNAME IS EIGHT BYTES *HMD 04/86*\n         MVI   S99TUPAR,C' '          CLEAR DDNAME          *HMD 04/86*\n         MVC   S99TUPAR+1(7),S99TUPAR CLEAR IT ALL THE WAY  *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         XC    RB1P2,RB1P2      CLEAR SECOND TU POINTER     *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         LA    R5,RB1TU3        GET DSNAME TEXT UNIT        *HMD 04/86*\n         ST    R5,RB1P3         SAVE POINTER IN LIST        *HMD 04/86*\n         MVI   S99TUKEY+1,DALDSNAM                          *HMD 04/86*\n         MVI   S99TUNUM+1,X'01'                             *HMD 04/86*\n* DSNAME HAS ALREADY BEEN BUILT                             *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         LA    R5,RB1TU4          BUILD RB1TU4 - STATUS     *HMD 04/86*\n         ST    R5,RB1P4                                     *HMD 04/86*\n         MVI   S99TUKEY+1,DALSTATS                          *HMD 04/86*\n         MVI   S99TUNUM+1,X'01'                             *HMD 04/86*\n         MVI   S99TULNG+1,X'01'                             *HMD 04/86*\n         MVI   S99TUPAR,DA08SHR   SET STATUS FOR SHR        *HMD 04/86*\n         SPACE 1\n         XC    RB1P5,RB1P5        CLEAR TU POINTER          *HMD 04/86*\n         SPACE 1\n         LA    R5,RB1TU7          SET RETURN DSORG          *HMD 04/86*\n         ST    R5,RB1P7           STORE POINTER IN LIST     *HMD 04/86*\n         MVI   S99TUKEY+1,DALRTORG    RETURN DSORG          *HMD 04/86*\n         MVI   S99TUNUM+1,X'01'   ONE PARAMETER             *HMD 04/86*\n         MVI   S99TULNG+1,2       LENGTH OF TWO             *HMD 04/86*\n         XC    S99TUPAR(2),S99TUPAR                         *HMD 04/86*\n*                                 CLEAR RETURN FIELD        *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         OI    RB1P7,S99RBPND     FLAG END OF CHAIN\n         LDROP R5                                           *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         MVI   DYNFLAG,DYNOK ASSUME ALLOCATION WAS FINE     *HMD 04/86*\n         LA    R1,APRB1\n         SPACE 1                                            *HMD 04/86*\n         DYNALLOC            ISSUE SVC99                    *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         LTR   RRC,RRC       CHECK RETURN CODE              *HMD 04/86*\n         BZ    ALLOCLFE      NOW FREE THE DDNAME            *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         ST    RRC,SVC99RC        SAVE RETURN CODE          *HMD 04/86*\n         LA    R1,RB1                                       *HMD 04/86*\n         LUSE  S99RB,R1                                     *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         CLC   S99ERROR,=X'1708'  SEE IF DSNAME NOT FOUND   *HMD 04/86*\n         BNE   ALLOCLID           .. OK, JUST RETURN        *HMD 04/86*\n         MVI   DYNFLAG,DYNCNF     INDICATE DSN NOT FOUND    *HMD 04/86*\n         B     ALLOCLIE           RETURN TO CALLER          *HMD 04/86*\n         LDROP R1                                           *HMD 04/86*\nALLOCLID MVI   DYNFLAG,DYNFAIL    INDICATE ERROR            *HMD 04/86*\n         LA    R15,SVC99RC        LOAD CODE ADDRESS         *HMD 04/86*\n         BAL   RLINK,DERROR       CALL IKJEFF18             *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\nALLOCLIE L     RLINK,STAKLINK     LOAD FROM THE STACK       *HMD 04/86*\n         BR    RLINK              RETURN TO CALLER          *HMD 04/86*\n         EJECT                                              *HMD 04/86*\n***********************************************************************\n**                                                                   **\n**  ALLOCLFE -  FREE THE DDNAME OF THE DATASET WE JUST               **\n**              ALLOCATED.                                           **\n**                                                                   **\n***********************************************************************\n         SPACE 2                                            *HMD 04/86*\nALLOCLFE DS    0H                 FREE THE ALLOCATED DDN    *HMD 04/86*\n         LA    R5,RB1TU7          GET DSORG RETURN          *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         LUSE  S99TUNIT,R5        ADDRESS THE TEXT UNIT     *HMD 04/86*\n         CLI   S99TUPAR,X'40'     SEQUENTIAL - NORMAL?      *HMD 04/86*\n         BE    ALLOCLFF           YES, THIS IS FINE         *HMD 04/86*\n         CLI   S99TUPAR,X'41'     SEQUENTIAL - UNMOVABLE?   *HMD 04/86*\n         BE    ALLOCLFF           YES, THIS IS FINE         *HMD 04/86*\n         MVI   DYNFLAG,DYNFAIL    INDICATE FAILURE          *HMD 04/86*\n         LDROP R5                                           *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         LA    R1,1               ONE MESSAGE SEGMENT       *HMD 04/86*\n         ST    R1,OLD             SAVE IN OLD               *HMD 04/86*\n         LA    R1,MESS04          GET MESSAGE               *HMD 04/86*\n         ST    R1,OLD+4           SAVE IN OLD               *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         XC    TSOECB,TSOECB      CLEAR ECB                 *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         PUTLINE PARM=PTPB,OUTPUT=(OLD,TERM,SINGLE,INFOR),  *HMD 04/86*X\n               MF=(E,IOPL)                                  *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\nALLOCLFF DS    0H                                           *HMD 04/86*\n         LA    R5,RB1           BUILD S99 RB PTR\n         ST    R5,APRB1\n         OI    APRB1,S99RBPND\n         SPACE 2\n         LUSE  S99RB,R5\n         MVI   S99RBLN,20       BUILD S99 RB\n         MVI   S99VERB,S99VRBUN UNALLOCATE THE DDNAME       *HMD 04/86*\n         LA    R6,RB1P1\n         ST    R6,S99TXTPP\n         LDROP R5\n         SPACE 2\n         LA    R5,RB1TU1\n         ST    R5,RB1P1\n         LUSE  S99TUNIT,R5      GET RETURNED DDNAME\n         MVI   S99TUKEY+1,DALDDNAM\n         MVI   S99TUNUM+1,X'01'\n* DDNAME IS ALREADY SETUP FROM PREVIOUS ALLOCATION          *HMD 04/86*\n         OI    RB1P1,S99RBPND               FLAG END OF CHAIN\n         LDROP R5\n         LA    R1,APRB1      LOAD PARAMETER POINTER FOR SVC99\n         SPACE 1\n         DYNALLOC            ISSUE SVC99\n         SPACE 1                                            *HMD 04/86*\n* IF DEALLOCATION FAILS, FLAG FAILURE AND RETURN            *HMD 04/86*\n         LTR   RRC,RRC                                      *HMD 04/86*\n         BZ    ALLOCLIE                                     *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         LA    R1,RB1                                       *HMD 04/86*\n         LUSE  S99RB,R1                                     *HMD 04/86*\n         CLC   S99ERROR,=X'0438'  SEE IF DDNAME NOT FOUND   *HMD 04/86*\n         BE    ALLOCLIE           ..THIS IS NOT AN ERROR    *HMD 04/86*\n         LDROP R1                                           *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         MVI   DYNFLAG,DYNFAIL    FLAG FAILURE              *HMD 04/86*\n         ST    RRC,SVC99RC        SAVE RETURN CODE          *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         LA    R15,SVC99RC        ADDRESS THE RETURN CODE   *HMD 04/86*\n         BAL   RLINK,DERROR       CALL IKJEFF18 FOR MSG     *HMD 04/86*\n         B     ALLOCLIE           RETURN TO CALLER          *HMD 04/86*\n         EJECT                                              *HMD 04/86*\n*************************************************************HMD 04/86*\n**                                                          *HMD 04/86*\n**   DOCMD   - STACK OUR COMMAND AND GET OUT FAST!!         *HMD 04/86*\n**                                                          *HMD 04/86*\n*************************************************************HMD 04/86*\n         SPACE 1                                               HD JUN86\nDOCMD    DS    0H                                              HD JUN86\n         LUSE  LSD,R5                                          HD JUN86\n         LUSE  IKJPARMD,R9                                     HD JUN86\n         SPACE 1                                               HD JUN86\n         ST    RLINK,STAKLINK                                  HD JUN86\n         SPACE 2                                               HD JUN86\n         LH    R7,CMD+4      LOAD LENGTH OF COMMAND            HD JUN86\n         CH    R7,MAXLEN     CHECK COMMAND LENGTH              HD JUN86\n         SPACE 1                                               HD JUN86\n         LA    R2,MESS11              MESSAGE TO DISPLAY\n         LA    R3,MESS06                \"     \"    \"\n         BH    ERRORMSG      OK, LET'S DO IT                   HD JUN86\n         SPACE 2                                               HD JUN86\n         GETMAIN LU,LA=CMDREQ,A=ANSWER,SP=78,LOC=BELOW,        HD JUN86X\n               MF=(E,LGM)              GET STORAGE FOR LIST    HD JUN86\n         SPACE 2                                               HD JUN86\n         L     R9,PPLRANS    LOAD ANSWER PLACE                 HD JUN86\n         SPACE 1                                               HD JUN86\n         L     R5,ANSWER     LOAD LSD ADDRESS                  HD JUN86\n         L     R6,ANSWER+4   LOAD INSTORAGE LIST ADDRESS       HD JUN86\n         SPACE 1                                               HD JUN86\n         ST    R6,LSDADATA   SAVE DATA ADDRESS                 HD JUN86\n         ST    R6,LSDANEXT   SAVE NEXT LINE ADDRESS            HD JUN86\n         SPACE 1                                               HD JUN86\n         L     R4,CMDREQ+4   LOAD LENGTH OF RECORD             HD JUN86\n         STH   R4,LSDRCLEN            LENGTH OF RECORD         HD JUN86\n         STH   R4,LSDTOTLN            SAVE TOTAL LENGTH        HD JUN86\n         XC    12(4,R5),12(R5)        CLEAR LAST ELEMENT       HD JUN86\n         LDROP R5                                              HD JUN86\n         SPACE 1                                               HD JUN86\n         L     R1,CMD                                          HD JUN86\n         MVI   0(R6),C' '    CLEAR AREA                        HD JUN86\n         MVC   1(255,R6),0(R6)     TO BLANKS                   HD JUN86\n         BCTR  R7,0          DECREMENT FOR 'EX'                HD JUN86\n         MVC   0(0,R6),0(R1) MOVE COMMAND                      HD JUN86\n         EX    R7,*-6              TO AREA                     HD JUN86\n         SPACE 1                                               HD JUN86\n         B     DOSTACK       GO PLACE COMMAND ON STACK         HD JUN86\n         EJECT                                                 HD JUN86\n*************************************************************HMD 04/86*\n**                                                          *HMD 04/86*\n**   GOSTACK - STACK AN 'EXECUTE' COMMAND IN STORAGE TO     *HMD 04/86*\n**             BE EXECUTED UPON EXIT FROM THIS COMMAND      *HMD 04/86*\n**                                                          *HMD 04/86*\n*************************************************************HMD 04/86*\n         SPACE 2                                            *HMD 04/86*\nGOSTACK  DS    0H           STACK AN EXECUTE COMMAND        *HMD 04/86*\n         ST    RLINK,STAKLINK     SAVE LINK REGISTER        *HMD 04/86*\n         SPACE 2                                            *HMD 04/86*\n         GETMAIN LU,LA=REQUEST,A=ANSWER,SP=78,LOC=BELOW,    *HMD 04/86*X\n               MF=(E,LGM)   GET STORAGE FOR LIST            *HMD 04/86*\n         SPACE 2                                            *HMD 04/86*\n         L     R5,ANSWER    GET LSD ADDRESS                 *HMD 04/86*\n         L     R6,ANSWER+4  GET INSTORAGE LIST ADDRESS      *HMD 04/86*\n         LUSE  LSD,R5       ADDRESS THE LSD                 *HMD 04/86*\n         ST    R6,LSDADATA  SAVE DATA ADDRESS               *HMD 04/86*\n         ST    R6,LSDANEXT  SAVE NEXT LINE ADDRESS          *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         L     R4,REQUEST+4           LOAD RECORD LENGTH    *HMD 04/86*\n         STH   R4,LSDRCLEN            LENGTH OF RECORD      *HMD 04/86*\n         STH   R4,LSDTOTLN            SAVE TOTAL LENGTH     *HMD 04/86*\n         XC    12(4,R5),12(R5)        CLEAR LAST ELEMENT    *HMD 04/86*\n         LDROP R5                     DROP LSD BASE         *HMD 04/86*\n         MVI   0(R6),C' '             CLEAR LIST            *HMD 04/86*\n         MVC   1(55,R6),0(R6)            TO BLANKS          *HMD 04/86*\n         MVC   0(L'STAKEXEC,R6),STAKEXEC                    *HMD 04/86*\n         LA    R6,L'STAKEXEC(R6)      MOVE IN 'EXEC' CMD    *HMD 04/86*\n         LH    R4,CDSNLEN             GET DATASET LENGTH    *HMD 04/86*\nMOVEDSNC MVC   0(0,R6),CDSNAME        MOVE IN THE NAME      *HMD 04/86*\n         BCTR  R4,0                   DECREMENT FOR 'EX'    *HMD 04/86*\n         EX    R4,MOVEDSNC            MOVE IN THE NAME      *HMD 04/86*\n         LA    R6,1(R4,R6)            POINT TO END OF NAME  *HMD 04/86*\n         MVI   0(R6),C''''            MOVE IN END QUOTE     *HMD 04/86*\n         SPACE 2                                            *HMD 04/86*\nDOSTACK  STACK PARM=STKPB,STORAGE=((5),SOURCE),MF=(E,IOPL)  *HMD 04/86*\n         SPACE 2                                            *HMD 04/86*\n         LTR   RRC,RRC                CHECK RETURN CODE     *HMD 04/86*\n         BZ    STACKRTE               RETURN TO CALLER      *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         LA    R1,1                   ONE SEGMENT           *HMD 04/86*\n         ST    R1,OLD                 SAVE IN O.L.D         *HMD 04/86*\n         LA    R1,MESS07              PRINT MESSAGE         *HMD 04/86*\n         ST    R1,OLD+4               SAVE IN O.L.D         *HMD 04/86*\n         XC    TSOECB,TSOECB          CLEAR ECB             *HMD 04/86*\n         SPACE 2                                            *HMD 04/86*\n         PUTLINE PARM=PTPB,OUTPUT=(OLD,TERM,SINGLE,INFOR),  *HMD 04/86*X\n               MF=(E,IOPL)                                  *HMD 04/86*\n         SPACE 2                                            *HMD 04/86*\n         LA    R2,MESS05              MESSAGE TO DISPLAY    *HMD 04/86*\n         LA    R3,MESS06                \"     \"    \"        *HMD 04/86*\n         B     ERRORMSG               PRINT MSG AND RETURN  *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\nSTACKRTE L     RLINK,STAKLINK         RESTORE RETURN REG    *HMD 04/86*\n         XC    ANSWER(8),ANSWER       CLEAR STORAGE POINTER    HD JUN86\n         BR    RLINK                  RETURN TO CALLER      *HMD 04/86*\n         EJECT                                              *HMD 04/86*\n*************************************************************HMD 04/86*\n**                                                          *HMD 04/86*\n**       DYNAMIC ALLOCATION FAILURE - PRINT MESSAGE         *HMD 04/86*\n**                                                          *HMD 04/86*\n**                                                          *HMD 04/86*\n** INPUT: THIS ROUTINE PRINTS A MULTILEVEL MESSAGE          *HMD 04/86*\n**                                                          *HMD 04/86*\n**        R2 --> POINTER TO FIRST LEVEL MESSAGE             *HMD 04/86*\n**        R3 --> POINTER TO SECOND LEVEL MESSAGE            *HMD 04/86*\n*************************************************************HMD 04/86*\nERRORMSG DS    0H                                           *HMD 04/86*\n         LA    R1,OLD2          SECOND LEVEL MESSAGE        *HMD 04/86*\n         ST    R1,OLD1          SAVE IN FIRST OLD           *HMD 04/86*\n         LA    R1,1             NUMBER OF SEGMENTS          *HMD 04/86*\n         ST    R1,OLD1+4                                    *HMD 04/86*\n         ST    R1,OLD2+4        SAVE IN LINE DESCRIPTORS    *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         LR    R1,R2            GET MESSAGE POINTER         *HMD 04/86*\n         ST    R1,OLD1+8        SAVE IN OLD                 *HMD 04/86*\n         LR    R1,R3            GET MESSAGE POINTER         *HMD 04/86*\n         ST    R1,OLD2+8        SAVE IN OLD                 *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         XC    TSOECB,TSOECB    CLEAR EVENT CNTL BLOCK      *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         PUTLINE PARM=PTPB,OUTPUT=(OLD1,TERM,MULTLVL,INFOR),           X\n               MF=(E,IOPL)                                  *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         LA    R2,12            RETURN CODE 12              *HMD 04/86*\n         B     RETURN                                       *HMD 04/86*\n         EJECT\n*************************************************************HMD 04/86*\n**                                                          *HMD 04/86*\n**  CMDPROC - CHECK TO SEE IF USER IS INVOKING THIS COMMAND *HMD 04/86*\n**            FROM A CLIST. IF SO, TERMINATE TO AVOID       *HMD 04/86*\n**            A RECURSIVE INVOCATION.                       *HMD 04/86*\n**                                                          *HMD 04/86*\n*************************************************************HMD 04/86*\nCMDPROC  DS    0H\n         ST    RLINK,SAVRLINK        SAVE THE LINKAGE REG   *HMD 04/86*\n         L     R15,CVTPTR            GET CVT POINTER        *HMD 04/86*\n         L     R15,CVTTVT-CVT(R15)   GET TSO VECTOR TABLE   *HMD 04/86*\n         L     R15,TSVTVACC-TSVT(R15)                       *HMD 04/86*\n*                                    GET IKJCT441 ADDRESS   *HMD 04/86*\n         LA    R1,TSVELOC            SELECT LOCATE SERVICE  *HMD 04/86*\n         ST    R1,ECODE              SAVE IN PARM LIST      *HMD 04/86*\n         SPACE 2                                            *HMD 04/86*\n         CALL  (15),                  CALL IKJCT441         *HMD 04/86*X\n               (ECODE,                ENTRY CODE            *HMD 04/86*X\n               NAMEPTR,               NAME POINTER          *HMD 04/86*X\n               NAMELEN,               NAME LENGTH           *HMD 04/86*X\n               VALUEPTR,              VALUE POINTER         *HMD 04/86*X\n               VALUELEN,              VALUE LENGTH          *HMD 04/86*X\n               TOKEN),                TOKEN (UNUSED HERE)   *HMD 04/86*X\n               VL,MF=(E,CCT441L)      CALL THE SUCKER       *HMD 04/86*\n         SPACE 2                                            *HMD 04/86*\n         CH     R15,=H'40'            CALL FROM READY MODE  *HMD 04/86*\n         BE    CMDPROCE                                     *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         LA     R2,MESS08                                   *HMD 04/86*\n         LA     R3,MESS09                                   *HMD 04/86*\n         B      ERRORMSG              INDICATE ERROR        *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\nCMDPROCE DS     0H                                          *HMD 04/86*\n         L      RLINK,SAVRLINK        RETURN TO CALLER      *HMD 04/86*\n         BR     RLINK                                       *HMD 04/86*\n         EJECT                                              *HMD 04/86*\n*************************************************************HMD 05/86*\n**                                                          *HMD 05/86*\n**  NAMES - SUBROUTINE TO BUILD DATASET NAMES. THE ISPF     *HMD 05/86*\n**          PROFILE DATASET IS BUILT FROM THE USERID, BUT   *HMD 05/86*\n**          THE TSO PREFIX IS USED TO BUILD THE PROFILE     *HMD 05/86*\n**          COMMAND PROCEDURE DATASET.                      *HMD 05/86*\n**                                                          *HMD 05/86*\n*************************************************************HMD 05/86*\nNAMES    DS    0H                                           *HMD 05/86*\n         ST    RLINK,SAVRLINK      SAVE THE LINKAGE REG     *HMD 04/86*\n         LUSE  UPT,R1                                       *HMD 04/86*\n         LUSE  PSCB,R2                                      *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         MVI   PDSNAME,C' '        CLEAR                    *HMD 04/86*\n         MVC   PDSNAME+1(43),PDSNAME     NAME FIELD         *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         MVI   CDSNAME,C' '        CLEAR                    *HMD 04/86*\n         MVC   CDSNAME+1(43),CDSNAME     NAME FIELD         *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         L     R1,CPPLUPT    GET USER PROFILE TABLE         *HMD 04/86*\n         L     R2,CPPLPSCB   GET PROTECTED STEP CNTL BLOCK  *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         INUSE ,             SEE WHOS ON FIRST              *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n*                                                           *HMD 05/86*\n* BUILD THE ISPF PROFILE DATASET NAME                       *HMD 05/86*\n*                                                           *HMD 05/86*\nPROFNAME SLR   R3,R3         CLEAR WORK REGISTER            *HMD 05/86*\n         ICM   R3,B'0001',PSCBUSRL                          *HMD 05/86*\n*                            LOAD USERID LENGTH             *HMD 05/86*\n         LA    R4,PDSNAME    POINT TO NAME BUILD FIELD      *HMD 05/86*\n         LA    R6,PSCBUSER   POINT TO USERID AREA           *HMD 05/86*\nNAMEMOV1 MVC   0(0,R4),0(R6) >>>  EXECUTED INSTRUCTION <<<  *HMD 05/86*\n         BCTR  R3,0          DECREMENT FOR EXECUTE          *HMD 05/86*\n         EX    R3,NAMEMOV1   MOVE IN THE NAME               *HMD 05/86*\n         SPACE 1                                            *HMD 05/86*\n         LA    R4,1(R3,R4)   POINT TO END OF NAME           *HMD 05/86*\n         MVI   0(R4),C'.'    BUILD DOT                      *HMD 05/86*\n         SPACE 1                                            *HMD 05/86*\n         MVC   1(L'DSNPART,R4),DSNPART                      *HMD 05/86*\n         SPACE 1                                            *HMD 05/86*\n         LA    R4,PDSNAME                                   *HMD 05/86*\n         SLR   R3,R3          CLEAR COUNTER                 *HMD 05/86*\n         SPACE 1                                            *HMD 05/86*\nPARTLOOP DS    0H                                           *HMD 05/86*\n         CLI   0(R4),C' '     END OF NAME?                  *HMD 05/86*\n         BE    PARTEXIT       EXIT                          *HMD 05/86*\n         LA    R3,1(,R3)      COUNT CHARACTERS              *HMD 05/86*\n         LA    R4,1(,R4)      BUMP TEXT POINTER             *HMD 05/86*\n         B     PARTLOOP                                     *HMD 05/86*\n         SPACE 1                                            *HMD 05/86*\nPARTEXIT DS    0H                                           *HMD 05/86*\n         STH   R3,PDSNLEN     SAVE LENGTH                   *HMD 04/86*\n         SPACE 2                                            *HMD 05/86*\n*                                                           *HMD 05/86*\n* BUILD THE PROFILE CLIST DATASET NAME                      *HMD 05/86*\n*                                                           *HMD 05/86*\nPREFIX   SLR   R3,R3         CLEAR WORK REGISTER            *HMD 05/86*\n         ICM   R3,B'0001',UPTPREFL                          *HMD 05/86*\n*                            LOAD PREFIX POINTER            *HMD 05/86*\n         BZ    USERID        NO PREFIX, USE USERID          *HMD 05/86*\n         LA    R6,UPTPREFX   POINT TO PREFIX AREA           *HMD 05/86*\n         SPACE 1                                            *HMD 05/86*\nBLDNAME  LA    R5,CDSNAME    POINT TO NAME BUILD FIELD      *HMD 05/86*\n         SPACE 1                                            *HMD 05/86*\nNAMEMOV2 MVC   0(0,R5),0(R6)                                *HMD 05/86*\n         SPACE 1                                            *HMD 05/86*\n         BCTR  R3,0          DECREMENT FOR EXECUTE          *HMD 05/86*\n         EX    R3,NAMEMOV2                                  *HMD 05/86*\n         SPACE 1                                            *HMD 05/86*\n         LA    R5,1(R3,R5)   POINT TO END OF PREFIX/USERID  *HMD 05/86*\n         MVI   0(R5),C'.'    MOVE IN 'DOT'                  *HMD 05/86*\n         SPACE 1                                            *HMD 05/86*\n         MVC   1(L'DSNXCTL,R5),DSNXCTL                      *HMD 05/86*\n         SPACE 1                                            *HMD 05/86*\n         SLR   R3,R3          CLEAR COUNTERS                *HMD 05/86*\n         LA    R5,CDSNAME     COUNT CHARACTERS              *HMD 05/86*\nXCTLLOOP DS    0H                                           *HMD 05/86*\n         CLI   0(R5),C' '     END OF NAME?                  *HMD 05/86*\n         BE    XCTLEXIT                                     *HMD 05/86*\n         LA    R3,1(,R3)      COUNT CHARACTERS              *HMD 05/86*\n         LA    R5,1(,R5)      BUMP TEXT POINTER             *HMD 05/86*\n         B     XCTLLOOP       CONTINUE COUNTING             *HMD 05/86*\nXCTLEXIT STH   R3,CDSNLEN     SAVE THE LENGTH               *HMD 05/86*\n         L     RLINK,SAVRLINK RESTORE THE LINKOR            *HMD 05/86*\n         BR    RLINK          RETURN HOME                   *HMD 05/86*\n         SPACE 1                                            *HMD 05/86*\nUSERID   SLR   R3,R3         CLEAR WORK REGISTER            *HMD 05/86*\n         ICM   R3,B'0001',PSCBUSRL                          *HMD 05/86*\n*                            LOAD PREFIX POINTER            *HMD 05/86*\n         LA    R6,PSCBUSER   POINT TO PREFIX AREA           *HMD 05/86*\n         B     BLDNAME       GO BUILD NAME                  *HMD 05/86*\n         SPACE 1                                            *HMD 05/86*\n         LDROP R1,R2         DROP REGISTERS                 *HMD 05/86*\n         EJECT\n*************************************************************HMD 04/86*\n**                                                          *HMD 04/86*\n**   DERROR - USE IKJEFF18 (DAIRFAIL) TO REPORT DYNAMIC     *HMD 04/86*\n**            ALLOCATION ERRORS                             *HMD 04/86*\n**                                                          *HMD 04/86*\n**   INPUT  - R15 = POINTER TO DYNAMIC ALLOC RETURN CODE    *HMD 04/86*\n**            R1  = POINTER TO SVC99 REQUEST BLOCK          *HMD 04/86*\n**                                                          *HMD 04/86*\n**   OUTPUT - MESSAGE TO TSO USER, THEN CONTINUE WITH       *HMD 04/86*\n**            THE COMMAND                                   *HMD 04/86*\n**                                                          *HMD 04/86*\n*************************************************************HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\nDERROR   DS    0H                                           *HMD 04/86*\n         ST    RLINK,SAVRLINK     SAVE RETURN REGISTER      *HMD 04/86*\n         ST    R15,DFRCP          POINTER TO RETURN CODE    *HMD 04/86*\n         ST    R1,DFS99RBP        SAVE REQUEST BLOCK PTRAD  *HMD 04/86*\n         MVI   S99ID,0            ISSUE PUTLINE             *HMD 04/86*\n         MVI   S99ID+1,DFSVC99    INDICATE CALLER IS SVC99  *HMD 04/86*\n         XC    DFBUFP,DFBUFP      GET FULLWORD OF ZEROS     *HMD 04/86*\n         LA    R1,DFBUFP          POINT TO FULLWORD OF ZERO *HMD 04/86*\n         ST    R1,DFJEFF02        SAVE IN PARM LIST         *HMD 04/86*\n         LA    R1,S99ID           ADDRESS OF ID FIELD       *HMD 04/86*\n         ST    R1,DFIDP           DAIRFAIL ID POINTER       *HMD 04/86*\n         LA    R1,CPPL            ADDRESS OF CPPL           *HMD 04/86*\n         ST    R1,DFCPPLP         STORE IN POINTER          *HMD 04/86*\n         SPACE 2                                            *HMD 04/86*\n         LA    R1,DFPARMS         GET PARAMETERS            *HMD 04/86*\nHOT      LINK  EP=IKJEFF18        GET YOUR HOT LINKS HERE   *HMD 04/86*\n         SPACE 2                                            *HMD 04/86*\n         L     RLINK,SAVRLINK     GET RETURN REGISTER       *HMD 04/86*\n         BR    RLINK              AND RETURN TO CALLER      *HMD 04/86*\n         EJECT                                              *HMD 04/86*\n*************************************************************HMD 04/86*\n**                                                          *HMD 04/86*\n**             LITERAL ORGANIZATION                         *HMD 04/86*\n**                                                          *HMD 04/86*\n*************************************************************HMD 04/86*\nIRVING   LTORG                                              *HMD 04/86*\n         SPACE 2                                            *HMD 04/86*\nSTAKEXEC DC    C'EXEC '''          COMMAND TO BE EXECUTED   *HMD 04/86*\nDSNPART  DC    C'ISPF.PROFILE'     REST OF DATASET NAME\nDSNXCTL  DC    C'PROFILE.CLIST'    EXECUTE FROM WITHIN      *HMD 04/86*\nDDNAME   DC    C'ISPPROF '         DDNAME - MUST BE ISPPROF\nUNIT     DC    C'SYSALLDA'         UNIT IF ON HOME SYSTEM      WFJFEB89\nUNITDA   DC    C'SYSDA'            UNIT IF NOT ON HOME SYSTEM  WFJFEB89\nPGMNAME  DC    C'PDFINIT'          NAME OF PROGRAM             HD JUN86\n         SPACE 1                                               HD JUN86\nPARSERC  DC    F'4'                RETURN CODE OF 4 OR HIGHER  HD JUN86\nAPDFTAB  DC    V(PDFTAB)           ADDRESS OF PARSE PARM LIST  HD JUN86\nPRIM     DC    H'60'               PRIM   - # OF BLOCKS     *HMD 07/88*\nDIRBLKS  DC    H'10'               DIRBLKS- # OF DIR BLOCKS *HMD 07/88*\nLRECL    DC    H'80'               LRECL  - MUST BE 80 FOR ISPF\nBLKSIZE  DC    H'9040'             BLKSIZE- AVERAGE BLKLEN  *HMD 04/86*\nMAXLEN   DC    H'256'              MAXIMUM COMMAND LENGTH      HD JUN86\n         SPACE 1                                            *HMD 04/86*\nREQUEST  DC    F'16'               SPACE FOR LSD DATA AREA  *HMD 04/86*\n         DC    AL1(128)            END OF LIST INDICATOR    *HMD 04/86*\n         DC    AL3(56)             80 BYTE RECORDS          *HMD 04/86*\n         SPACE 1                                               HD JUN86\n*                                                              HD JUN86\n* ALLOCATE STORAGE FOR 'CMD(' PARM ON COMMAND EXECUTION        HD JUN86\n*                                                              HD JUN86\nCMDREQ   DC    F'16'               SPACE FOR LSD DATA AREA     HD JUN86\n         DC    AL1(128)            END OF LIST INDICATOR       HD JUN86\n         DC    AL3(256)            256 BYTES FOR COMMAND       HD JUN86\n         SPACE 1                                               HD NOV86\n*                                                              WFJFEB89\n* THIS TABLE MAPS THE LAST CHARACTER OF THE SYSID TO THE       WFJFEB89\n* CORRECT FIRST CHARACTER OF ELIGIBLE TSO VOLUMES FOR THAT     WFJFEB89\n* SYSTEM                                                       WFJFEB89\n*                                                              WFJFEB89\nSYSTABI  DC    CL2'A\u00ac'             USE WORK PACKS FOR APLA     HD MAY89\n         DC    CL2'BA'             MAPPING FOR APLB            WFJFEB89\n         DC    CL2'CH'             MAPPING FOR APLC            WFJFEB89\n         DC    CL2'DD'             MAPPING FOR APLD            WFJFEB89\nSYSTEND  DC    XL2'FFFF'           END OF SYSTEM TABLE         WFJFEB89\nSYSTABL  EQU   *-SYSTABI           LENGTH OF SYSTEM TABLE      WFJFEB89\n         SPACE 1                                               HD MAY89\nNOT      EQU   C'\u00ac'                DESIGNATES A WORK VOLUME    HD MAY89\n*                                  10 ENTRY VOLUME TABLE       WFJJAN89\nVOLTABI  DC    X'05'               VOLUME TABLE CONSTANT       WFJJAN89\n         DC    CL6'XXXTSX'                                     WFJJAN89\n         DC    X'11'                                           WFJJAN89\n         DC    CL6'XXXTSX'                                     WFJJAN89\n         DC    X'17'                                           WFJJAN89\n         DC    CL6'XXXTSX'                                     WFJJAN89\n         DC    X'23'                                           WFJJAN89\n         DC    CL6'XXXTSX'                                     WFJJAN89\n         DC    X'29'                                           WFJJAN89\n         DC    CL6'XXXTSX'                                     WFJJAN89\n         DC    X'35'                                           WFJJAN89\n         DC    CL6'XXXTSX'                                     WFJJAN89\n         DC    X'41'                                           WFJJAN89\n         DC    CL6'XXXTSX'                                     WFJJAN89\n         DC    X'47'                                           WFJJAN89\n         DC    CL6'XXXTSX'                                     WFJJAN89\n         DC    X'53'                                           WFJJAN89\n         DC    CL6'XXXTSX'                                     WFJJAN89\n         DC    X'59'                                           WFJJAN89\n         DC    CL6'XXXTSX'                                     WFJJAN89\nVOLTEND  DC    X'FF',XL6'00'       END OF VOLUME TABLE         HD JUN87\nVOLTABL  EQU   *-VOLTABI           LENGTH OF VOLUME TABLE      HD JUN87\n         EJECT\n*************************************************************HMD 04/86*\n**                                                          *HMD 04/86*\n**             PUTLINE MESSAGES                             *HMD 04/86*\n**                                                          *HMD 04/86*\n*************************************************************HMD 04/86*\nMESS01   TSOMSG 'PDF080I FAULT OCCURED PROCESSING ISPF PROFILE FILE+'\n         SPACE 2\nMESS02   TSOMSG 'PDF081I INITIALIZATION TERMINATED DUE TO THIS ERROR'\n         SPACE 2\nMESS03   TSOMSG 'PDF082I A NEW ISPF PROFILE DATASET HAS BEEN CREATED ONX\n                VOLUME XXXXXX'                                 HD SEP87\nMESS03L  EQU   *-MESS03                                        HD SEP87\n         SPACE 2\nMESS04   TSOMSG 'PDF085I DSORG OF PROFILE CLIST MUST BE PHYSICAL SEQUENX\n               TIAL'                                        *HMD 04/86*\n         SPACE 2\nMESS05   TSOMSG 'PDF086I ALLOCATION ERROR OCCURED FOR PROFILE COMMAND PX\n               ROCEDURE+'                                      HD JUN86\n         SPACE 2\nMESS06   TSOMSG 'PDF087I COMMAND OR COMMAND PROCEDURE NOT EXECUTED'\n         SPACE 2                                            *HMD 04/86*\nMESS07   TSOMSG 'PDF088I STACK FAILURE PROCESSING COMMAND OR PROCEDURE'\n         SPACE 2                                            *HMD 04/86*\nMESS08   TSOMSG 'PDF089I INVALID ENVIRONMENT FOR TSO INITIALIZATION+'\n         SPACE 2\nMESS09   TSOMSG 'PDF090I INITIALIZATION ROUTINE MAY NOT BE EXECUTED FROX\n               M WITHIN A COMMAND PROCEDURE'                *HMD 04/86*\n         SPACE 2                                               HD JUN86\nMESS10   TSOMSG 'PDF100I FAULT OCCURED PARSING THE COMMAND OPERANDS+'\n         SPACE 2                                            *HMD 04/86*\nMESS11   TSOMSG 'PDF101I SPECIFIED COMMAND IS TOO LONG TO PROCESS+'\n         SPACE 2                                            *HMD 04/86*\nMESS12   TSOMSG 'PDF112I VOLUME NOT AVAILABLE TO CREATE ISPF PROFILE DA+\n               TA SET+'\n         SPACE 2\nMESS13   TSOMSG 'PDF113I SYSTEM ID NOT MATCHED. UNABLE TO CREATE ISPF P+\n               ROFILE DATA SET+'                               WFJFEB89\n         SPACE 2\nMESS14   TSOMSG 'PDF114I ACF2 VALIDATION FAILED. UNABLE TO CREATE ISPF +\n               PROFILE DATA SET+'                              WFJFEB89\n         SPACE 2\nMESS15   TSOMSG 'PDF115I A NEW ISPF PROFILE DATASET HAS BEEN CREATED ONX\n                A WORK VOLUME ON THIS SYSTEM'                  WFJFEB89\nMESS15L  EQU   *-MESS15                                        WFJFEB89\n         SPACE 2\n*************************************************************HMD 04/86*\n**                                                          *HMD 04/86*\n**           MISCELLANEOUS EQUIVILENCES                     *HMD 04/86*\n**                                                          *HMD 04/86*\n*************************************************************HMD 04/86*\nRLINK    EQU   14                LINKAGE REGISTER           *HMD 04/86*\nRRC      EQU   15                RETURN CODE REGISTER       *HMD 04/86*\n         EJECT                                                 HD JUN86\n***************************************************************HD JUN86\n**                                                             HD JUN86\n**           PARSE CONTROL PARAMETERS                          HD JUN86\n**                                                             HD JUN86\n***************************************************************HD JUN86\nPDFTAB   IKJPARM\n         SPACE 1\nKEYISPF  IKJKEYWD DEFAULT='ISPF'\n         IKJNAME  'ISPF'\n         IKJNAME  'NOISPF'\n         SPACE 1\nKEYCMD   IKJKEYWD\n         IKJNAME  'COMMAND',SUBFLD=CMDSUBF,ALIAS='CMD'\n         SPACE 2\nCMDSUBF  IKJSUBF\nCMD      IKJPOSIT QSTRING,UPPERCASE,                                   +\n               PROMPT='A QUOTED TSO COMMAND FOR POST-PROCESSING+',     +\n               HELP=('A QUOTED STRING REPRESENTING A TSO COMMAND AND IT+\n               S POSITIONAL AND KEYWORD PARAMETERS+','A STRING OF CHARA+\n               CTERS BETWEEN TWO QUOTATION MARKS TO BE PLACED ON THE IN+\n               PUT STACK')\n         IKJENDP\n         EJECT\n***************************************************************HD JUN86\n**                                                             HD JUN86\n**           DYNAMIC STORAGE AREA                              HD JUN86\n**                                                             HD JUN86\n***************************************************************HD JUN86\nTSODSECT DSECT                   RESUME USER AREA\n         SPACE 1\nDYNFLAG  DS    X                 DYNAMIC ALLOCATION FLAG    *HMD 04/86*\nDYNOK    EQU   X'00' .... ....   DYNAMIC ALLOC WAS FINE     *HMD 04/86*\nDYNFAIL  EQU   X'FF' 1111 1111   DYNAMIC ALLOC FAILED       *HMD 04/86*\nDYNCNF   EQU   X'FE' 1111 111.   CLIST DSN NOT FOUND        *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\nPARSFLAG DS    X                 PARSE FLAG                    HD JUN86\nPNOISPF  EQU   X'80' 1... ....   NOISPF KEYWORD SPECIFIED      HD JUN86\nPCMD     EQU   X'40' .1.. ....   CMD STRING SPECIFIED          HD JUN86\nPARSFAIL EQU   X'01' .... ...1   ERROR OCCURED IN PARSE        HD JUN86\n         SPACE 1                                               HD NOV86\nSMFID    DS    0F                SAVE AREA FOR SMF SYSTEM ID   WFJJAN89\n         DS    CL3                                             WFJFEB89\nSYSID    DS    CL1                                             WFJFEB89\n         SPACE 1                                               WFJJAN89\nHOMEID   DS    C                 SAVE AREA FOR \"HOME SYSTEM\" IDWFJFEB89\n         SPACE 1                                               WFJFEB89\nTIMESAVE DS    F                 SAVE AREA FOR TOD             HD NOV86\n         SPACE 1                                               HD JUN86\nSAVRLINK DS    F                 LINKAGE REGISTER SAVE      *HMD 04/86*\nSTAKLINK DS    F                 LINKAGE REGISTER SAVE      *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\nPTPB     PUTLINE MF=L            PUTLINE PARM BLOCK         *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\nSTKPB    STACK   MF=L            STACK PARM BLOCK           *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\nOLD      DS    F                 NUMBER OF SEGMENTS         *HMD 04/86*\n         DS    F                 POINTER TO MESSAGE LINE    *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\nOLD1     DS    A                 POINTER TO OLD2            *HMD 04/86*\n         DS    F                 NUMBER OF SEGMENTS         *HMD 04/86*\n         DS    A                 POINTER TO MESSAGE LINE    *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\nOLD2     DS    A                 ZERO - END OF CHAIN        *HMD 04/86*\n         DS    F                 NUMBER OF SEGMENTS         *HMD 04/86*\n         DS    A                 POINTER TO MESSAGE LINE    *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n**************************                                     HD SEP87\n** DYNAMIC MESSAGE AREA **                                     HD SEP87\n**************************                                     HD SEP87\nMESSDYN  DS    CL84              MESSAGE AREA                  HD SEP87\n*                                                              WFJFEB89\n* SYSTEM TABLE                                                 WFJFEB89\n*                                                              WFJFEB89\nSYSTAB   DS    0F                  NUMBER OF ENTRIES MUST      WFJFEB89\nENTRY1   DS    CL2                                             HD MAY89\nENTRY2   DS    CL2                 MATCH CONSTANT SYSTABI      HD MAY89\nENTRY3   DS    CL2                                             HD MAY89\nENTRY4   DS    CL2                                             HD MAY89\nSYSTABE  DS    XL2               END OF TABLE INDICATOR        WFJFEB89\nSYSTLEN  EQU   *-SYSTABE         ENTRY LENGTH                  WFJFEB89\n************************                                       HD SEP87\n** VOLUME TABLE       **                                       HD SEP87\n************************                                       HD SEP87\nVOLTAB   DS    0F                                              HD JUN87\nENTRY#1  DS    XL1,CL6           NUMBER OF ENTRIES MUST        HD JUN87\nENTRY#2  DS    XL1,CL6              MATCH CONSTANT VOLTABI     HD JUN87\nENTRY#3  DS    XL1,CL6                ================         HD JUN87\nENTRY#4  DS    XL1,CL6                ================         HD JUN87\nENTRY#5  DS    XL1,CL6                ================         HD JUN87\nENTRY#6  DS    XL1,CL6                                         WFJJAN89\nENTRY#7  DS    XL1,CL6                                         WFJJAN89\nENTRY#8  DS    XL1,CL6                                         WFJJAN89\nENTRY#9  DS    XL1,CL6                                         WFJJAN89\nENTRY#10 DS    XL1,CL6                                         WFJJAN89\nVOLTABE  DS    XL1,CL6           END OF TABLE INDICATOR        HD JUN87\nVOLTLEN  EQU   *-VOLTABE                                       HD JUN87\n         SPACE 1                                               HD JUN87\nGFPTR    DS    F                 POINTER TO GNRLFAIL PARM LIST HD JUN86\nSVC99RC  DS    F                 SVC99 RETURN CODE          *HMD 04/86*\nS99ID    DS    H                 2 BYTE IKJEFF18 ID FIELD   *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         IKJEFFDF DFDSECT=NO     IKJEFF18 PARM LIST         *HMD 04/86*\n         SPACE 1                                               HD JUN86\n         IKJEFFGF GFDSECT=NO     IKJEFF19 PARM LIST            HD JUN86\n         SPACE 2                                            *HMD 04/86*\nAPRB1    DS    F                 POINTER TO SVC99 REQUEST BLOCKS\n         SPACE 1\nRB1      DS    5F                SVC 99 REQUEST BLOCK\n         SPACE 1\nRB1P1    DS    F                 POINTER TO SVC99 TEXT UNIT 01\nRB1P2    DS    F                 POINTER TO SVC99 TEXT UNIT 02\nRB1P3    DS    F                 POINTER TO SVC99 TEXT UNIT 03\nRB1P4    DS    F                 POINTER TO SVC99 TEXT UNIT 04\nRB1P5    DS    F                 POINTER TO SVC99 TEXT UNIT 05\nRB1P7    DS    F                 POINTER TO SVC99 TEXT UNIT 07\nRB1PA    DS    F                 POINTER TO SVC99 TEXT UNIT 0A\nRB1PC    DS    F                 POINTER TO SVC99 TEXT UNIT 0C\nRB1P10   DS    F                 POINTER TO SVC99 TEXT UNIT 10\nRB1P15   DS    F                 POINTER TO SVC99 TEXT UNIT 15\nRB1P30   DS    F                 POINTER TO SVC99 TEXT UNIT 30\nRB1P3C   DS    F                 POINTER TO SVC99 TEXT UNIT 3C\nRB1P42   DS    F                 POINTER TO SVC99 TEXT UNIT 42\nRB1P49   DS    F                 POINTER TO SVC99 TEXT UNIT 49\n         SPACE 1\nRB1TU1   DS    XL14              SVC99 TEXT UNIT 01 - DDNAME\n         SPACE 1\nRB1TU2   DS    F                 SVC99 TEXT UNIT 02 - DSNAME\nPDSNLEN  DS    H                 LENGTH OF DATASET NAME     *HMD 04/86*\nPDSNAME  DS    CL44              DATA SET NAME              *HMD 04/86*\n         SPACE 1\nRB1TU3   DS    F                 PROFILE.CLIST DSNAME PTR   *HMD 04/86*\nCDSNLEN  DS    H                 LENGTH OF BUILD DSNAME     *HMD 04/86*\nCDSNAME  DS    CL44              DATA SET NAME              *HMD 04/86*\n         SPACE 1\nRB1TU4   DS    XL7               SVC99 TEXT UNIT 04 - DS STATUS\nRB1TU5   DS    XL7               SVC99 TEXT UNIT 05 - DS DISPOSITION\nRB1TU7   DS    XL9 BLOCK LENGTH  SVC99 TEXT UNIT 07 - BLKLEN*HMD 04/86*\nRB1TUA   DS    XL9               SVC99 TEXT UNIT 0A - PRIMARY SPACE\nRB1TUC   DS    XL9               SVC99 TEXT UNIT 0C - DIRECTORY BLKS\nRB1TU10  DS    XL12              SVC99 TEXT UNIT 10 - VOL SER\nRB1TU15  DS    XL(6+L'UNIT)      SVC99 TEXT UNIT 15 - UNIT\nRB1TU30  DS    XL8               SVC99 TEXT UNIT 30 - BLKSIZE\nRB1TU3C  DS    XL8               SVC99 TEXT UNIT 3C - DSORG\nRB1TU42  DS    XL8               SVC99 TEXT UNIT 42 - LRECL\nRB1TU49  DS    XL7               SVC99 TEXT UNIT 49 - RECFM\n         SPACE 1                                            *HMD 04/86*\nANSWER   DS    2F                ANSWER FROM LIST GETMAIN   *HMD 04/86*\n         SPACE 1                                               HD JUN86\nLGM      GETMAIN LU,MF=L         LIST FORM GETMAIN          *HMD 04/86*\n         SPACE 1                                               HD JUN86\nCCT441L  CALL  ,(0,0,0,0,0,0),MF=L                          *HMD 04/86*\n         SPACE 1                                               HD JUN87\nUCBCALL  CALL  ,(0,0,0),MF=L     UCB LOOKUP ROUTINE            HD JUN87\n         SPACE 2                                            *HMD 04/86*\nUCBWORK  DS    XL100             WORK AREA FOR UCB LOOKUP      HD JUN87\nUCBUNIT  DS    A                 UNIT CONTROL BLOCK ADDRESS    HD JUN87\nUCBFLAG  DS    X                 FLAG - CHECK ONLY DASD        HD JUN87\n         SPACE 2                                               HD JUN87\nECODE    DS    A                                            *HMD 04/86*\nNAMEPTR  DS    A                                            *HMD 04/86*\nNAMELEN  DS    F                                            *HMD 04/86*\nVALUEPTR DS    A                                            *HMD 04/86*\nVALUELEN DS    F                                            *HMD 04/86*\nTOKEN    DS    F                                            *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\nAREALEN  EQU   *-TSOUSER\n         EJECT\n         IEFZB4D0\n         EJECT\n         IEFZB4D2\n         EJECT\n         IKJDAP08                                           *HMD 04/86*\n         EJECT                                              *HMD 04/86*\n         IKJUPT                                             *HMD 04/86*\n         EJECT                                              *HMD 04/86*\n         IKJPSCB                                            *HMD 04/86*\n         EJECT                                              *HMD 04/86*\n         IKJLSD                                             *HMD 04/86*\n         EJECT                                              *HMD 04/86*\n         IKJTSVT                                            *HMD 04/86*\n         EJECT                                              *HMD 04/86*\n         IEFUCBOB LIST=YES                                     HD JUN87\n         EJECT                                                 HD JUN87\n         IHAPSA                    PREFIXED STORAGE AREA       WFJFEB89\n         EJECT                                                 WFJFEB89\n         IHAASCB                   ADDR. SPACE CONTROL BLOCK   WFJFEB89\n         EJECT                                                 WFJFEB89\n         ACCVT                     ACF2 COMM. VECTOR TABLE     WFJFEB89\n         EJECT                                                 WFJFEB89\n         ACFASVT                   ACF2 ADDRESS SPACE VEC. TBL WFJFEB89\n         EJECT                                                 WFJFEB89\n         ACUCB                     ACF2 ADDRESS SPACE CON. BLK WFJFEB89\n         EJECT                                                 WFJFEB89\n         CVT   LIST=YES,DSECT=YES                           *HMD 04/86*\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PPL": {"ttr": 5635, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x891\\x8f\\x00\\x891\\x8f\\x108\\x00\\x19\\x00\\x19\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-11-14T00:00:00", "modifydate": "1989-11-14T10:38:00", "lines": 25, "newlines": 25, "modlines": 0, "user": "HMDEAN"}, "text": "         MACRO\n&X       PPL   &Y,&DSECT=NO\n***********************************************************************\n*                                                                     *\n*                  PARSE   PARAMETER   LIST                           *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n         AIF   ('&DSECT' NE 'NO').DSECT\nPPL      DS    0A ,                     PARSE PARM LIST\n         AGO   .COM\n.DSECT   ANOP\nPPL      DSECT ,                        PARSE PARM LIST\n.COM     ANOP\nPPLUPT   DC    A(0) .                   USER PROF. TAB\nPPLECT   DC    A(0) .                   ENV. CTL TAB\nPPLECB   DC    A(0) .                   ECB ADDRESS\nPPLPCL   DC    A(0) .                   PARSE CTL LIST\nPPLANS   DC    A(0) .                   ANSWER ADDRESS\nPPLCBUF  DC    A(0) .                   COMMAND BUFFER\nPPLUWA   DC    A(0) .                   USER WORK AREA\nPPLRANS  DC    A(0) .                   RETURNED ANSWER ADDRESS\nPPLLEN   EQU   *-PPL .                  LENGTH\n         SPACE 2\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "REGS": {"ttr": 5637, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x891\\x8f\\x00\\x891\\x8f\\x108\\x00*\\x00*\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-11-14T00:00:00", "modifydate": "1989-11-14T10:38:00", "lines": 42, "newlines": 42, "modlines": 0, "user": "HMDEAN"}, "text": "         MACRO\n         REGS\n***********************************************************************\n*                                                                     *\n*        REGISTER EQUATES                                             *\n*                                                                     *\n***********************************************************************\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*        FIXED POINT REGISTERS                                        *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nR0       EQU   0        *USED BY O.S.\nR1       EQU   1        *USED BY O.S. // ADDRESS OF PARAMETER LIST\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13       *USED BY O.S. // SAVE-AREA ADDRESS\nR14      EQU   14       *USED BY O.S. // RETURN ADDRESS\nR15      EQU   15       *USED BY O.S. // ENTRY-PT ADDR, RETURN CODE\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*        FLOATING POINT REGISTERS                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nF0       EQU   0\nF2       EQU   2\nF4       EQU   4\nF6       EQU   6\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SETUSER": {"ttr": 5639, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x891\\x8f\\x00\\x891\\x8f\\x108\\x01\\x1d\\x01\\x1d\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-11-14T00:00:00", "modifydate": "1989-11-14T10:38:00", "lines": 285, "newlines": 285, "modlines": 0, "user": "HMDEAN"}, "text": "SETUSER  TITLE '- SET UP PSCB/UPT FROM LIDREC FOR TMP BACKGROUND JOBS'\n         MACRO\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.* ---> E@SAV\n.*\n.*  DESCRITPION:\n.*    SET UP ENTRY TO A MODULE CALLED VIA STANDRD LINKAGE AND\n.*    OPTIONALLY ACQUIRE A DYNAMIC SAVE AND WORK AREA.\n.*\n.*\n.*   1. GENERATES A CSECT WITH ID '&CSECT'.\n.*   2. SETS UP STANDARD ENTRY LINKAGE\n.*\n.*      IF RENT=NO:\n.*\n.*   3. GENERATES A AN INLINE SAVE AREA\n.*   4. USES R13 AS BOTH PGM AND SAVE AREA BASE\n.*   5. OPTIONALLY ESTABLISHES A SECOND BASE REGISTER (&BASE2)\n.*\n.*      IF RENT=YES:\n.*\n.*   3. ACQUIRES STORAGE AREA (72+&DYNAREA) BYTES LONG.\n.*      1ST 72 BYTES USED AS OS SAVE AREA.\n.*   4. SETS UP CSECT ADDRESSABILITY BASED ON &BASE\n.*\n.*\n.*  ARGUMENTS: ------------------------------------------------------\n.*\n.*     &BASE : BASE REG USED IF RENT=YES\n.*\n.*    &BASE2 : OPTIONAL 2ND BASE REGISTER (RENT=NO ONLY)\n.*\n.*     &RENT : 'NO' MEANS GENERATE AN INLINE SAVE AREA\n.*\n.*             'YES' MEANS ACQUIRE AN AREA OF STORGAE (72+&DYNAREA)\n.*             BYTES LONG FOR USE AS A FORWARD SAVE AREA AND OPTIONALLY\n.*             A WORK AREA.\n.*\n.*  &DYNAREA : LENGTH OF STORAGE (IN ADDITION TO 72) TO ACQUIRE\n.*\n.*    &DSECT : NAME OF DSECT THAT NAPS DYNMAIC AREA\n.*\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n&CSECT   E@SAV &BASE=R12,              DEFAULT BR FOR RENT=NO          &\n               &BASE2=,                SECOND BASE REGISTER (OPTIONAL) &\n               &RENT=NO,               GETMAIN SA IN RENT=YES          &\n               &DSECT=,                DSECT NAME FOR ACQUIRED STORAGE &\n               &DYNAREA=0              ADITIONAL AREA TO GETMAIN\n.*\n         LCLC  &RSA1,&RSA2\n.*\n&RSA1    SETC  'RS'.'&SYSNDX'.'AA'\n&RSA2    SETC  'RS'.'&SYSNDX'.'A2'\n         AIF   ('&CSECT' NE '').A100\n         MNOTE 8,'E@SAV MUST BE GIVEN A LABEL - USED FOR CSECT NAME'\n         AGO   .AMEND\n.*\n.A100    ANOP\n         AIF   ('&RENT' EQ 'YES').A5000\n         AIF   ('&RENT' EQ 'NO').A1000\n         MNOTE 8,'''RENT='' MUST BE EITHER ''YES'' OR ''NO'''\n         AGO   .AMEND\n.*\n.*\n.* RENT=NO\n.*\n.*\n.A1000   ANOP\n&CSECT   CSECT\n         USING &CSECT,15               CALLED VIA STANDARD LINKAGE\n         B     &RSA1                   BRACH AROUND  EYECATCHER\n         DC    CL24'&CSECT-&SYSDATE-&SYSTIME'\n&RSA1    STM   14,12,12(13)            SAVE CALLERS REGS\n         BAL   3,&RSA2                 BRANCH AROUND SAVE AREA\n         DC    18F'-1'                 SAVE AREA\n         DROP  15                      END TEMP USING\n&RSA2    ST    3,8(13)                 OUR SAVE AREA POINTER\n         ST    13,4(3)                 POINTER TO CALLERS SAVE AREA\n         LR    13,3                    @OUR SAVE AREA\n         USING &RSA1,13                SAVE AREA IS THE BASE\n         AIF   ('&BASE2' EQ '').AMEND\n         LA    &BASE2,4095(R13)        ESTABLISH\n         LA    &BASE2,1(&BASE2)        SECOND\n         USING &RSA1+4096,&BASE2       BASE\n         AGO   .AMEND\n.*\n.*\n.* RENT=YES\n.*\n.*\n.A5000   ANOP\n&CSECT   CSECT\n         STM   14,12,12(13)       SAVE CALLERS REGS\n         LR    &BASE,R15          COPY EPA\n         USING &CSECT,&BASE       ADDRESSABILITY\n         MNOTE *,'       GETMAIN RU,LV=72+&DYNAREA,LOC=RES'\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=72+&DYNAREA.    STANDARD OS SA PLUS ANY EXTRA        &\n               LOC=RES,           RELATIVE TO 16MB LINE\n         ST    1,8(13)            OUR SAVE AREA POINTER\n         ST    13,4(1)            POINTER TO CALLERS SAVE AREA\n         LR    13,1               @OUR SAVE AREA\n         AIF   ('&DSECT' EQ '').A6999\n         USING &DSECT,R13         MAP SA AND WORK AREA\n.A6999   ANOP\n.*\n         L     R14,4(R13)         POINT TO CALLERS RSA\n         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN\n.A8999   ANOP\n.*\n.AMEND   ANOP\n         MEND\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . SETUSER\n*\n*  DATE WRITTEN . . . . 04/84\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*\n*  ENVIRONMENT  . . . . T S O  COMMAND PROCESSOR (ONLY)\n*\n*  PURPOSE:\n*    USES THE ACF2 LOGON ID RECORD TO FILL IN THE &SYSUID AND &SYSPREF\n*    FIELDS IF EXECUTING TSO IN BATCH MODE.\n*\n*  DESCRIPTION:\n*    MOVES SELECTED FIELDS OF THE ACF2 LIDREC TO THE PROTECTED STEP\n*    CONTROL BLOCK (PSCB) AND THE USER PROFILE TABLE (UPT).\n*\n*  ATTRIBUTES:\n*    REENTRANT ETC.\n*\n*  CALLED MODULES:\n*    NONE\n*\n*  ASSUMPTIONS:\n*    ACF2 IS UP\n*    RUN AS A COMMAND PROCESSOR\n*\n*\n*  ABENDS:\n*    NONE\n*\n*  CAVEATS:\n*    (1) POTENTIAL PROBLEMS IF RUN AS OTHER THAN A COMMAND PROCESSOR.\n*\n*    (2) A FEW PICO SECOND ARE SPENT IN PROTECT KEY 0.\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         ACCVT\n         EJECT\n         ACFASVT\n         EJECT\n         ACUCB\n         EJECT\n         LIDREC\n         EJECT\n         IKJPSCB\n         EJECT\n         IHAPSA\n         EJECT\n         IHAASCB\n         EJECT\n         IKJUPT\n         EJECT\n         IKJTMPWA\n         EJECT\n         ACFREGS\n         SPACE 2\nRUPT     EQU   3                        @UPT\nRPSCB    EQU   4                        @PSCB\nRLID     EQU   5                        @LID\nRACCVT   EQU   6                        @ACCVT\nRACUCB   EQU   7                        @ACUCB\n         EJECT\n***********************************************************************\n*  LINKAGE CONVENTIONS\n***********************************************************************\n         SPACE 1\nSETUSER  E@SAV\n         ICM   RUPT,15,4(R1)            @USER PROFILE TABLE\n         USING UPT,RUPT                 MAP UPT\n         BZ    RETURN                   WHAT! NO UPT\n         ICM   RPSCB,15,8(R1)           @PROTECTED STEP CONTROL BLOCK\n         BZ    RETURN                   WHAT! NO PSCB?\n         USING PSCB,RPSCB               MAP PSCB\n         BZ    RETURN                   WHAT! NO UPT?\n         SPACE 1\n*  ABANDON THE TASK IF UID ALREADY CONTAINS SOMETHING\n         SPACE 1\n         CLC   =C'ASYSJEE',PSCBUSER     ME?\n         BE    GETACCVT                 -YES, SO CONTINUE\n         CLC   =C'ASYSHMD',PSCBUSER     ANOTHER?               HD DEC87\n         BE    GETACCVT                 -YES, SO CONTINUE      HD DEC87\n         CLI   PSCBUSER,C'A'            USER FIELD SET?\n         BE    RETURN                   -YES, SO FORGET THIS ENDEAVOR\n         EJECT\n***********************************************************************\n*  BEGIN ACF2 JOURNEY TO END UP WITH THE ADDRESS OF THE LID RECORD\n***********************************************************************\n         SPACE 1\nGETACCVT ACFINCVT RACCVT,NONE=RETURN    @ACCVT\n         USING ACCVT,RACCVT             MAP ACCVT\n         SPACE 1\n         ACFGUCB RACUCB,NONE=RETURN,INLINE=YES,SYS=AOS2 @ACUCB\n         USING ACUCB,RACUCB             MAP ACUCB\n         SPACE 1\n         TM    ACCCFLG,ACCCNUAD         UADS=NO\n         BZ    RETURN                   -NO, SO CAN'T DO IT.\n         SPACE 1\n         L     RLID,ACULRECP            @LIDREC\n         USING LIDREC,RLID              MAP LIDREC\n         SPACE 2\n***********************************************************************\n*  SET UP UPT FIELDS\n***********************************************************************\n         SPACE 2\n         TM    LIDTFLG2,LIDT2MSG        MSGID SET?\n         BZ    AC2MOD                   -NO\n         OI    UPTSWS,UPTMID            -YES, TURN ON PROF MSGID\n         SPACE 1\nAC2MOD   EQU   *\n         TM    LIDTFLG2,LIDT2MOD        MODE SET?\n         BZ    AC2PPR                   -NO\n         OI    UPTSWS,UPTMODE           TURN ON PROF MODE\n         SPACE 1\nAC2PPR   EQU   *\n         MVC   UPTPREFX,LIDTPPFX        TURN ON PROFILE PREFIX\n         CLI   UPTPREFX,C'.'\n         BE    DOPSCB\n         MVI   UPTPREFL,7\n         TRT   UPTPREFX,BLANKS\n         BZ    DOPSCB\n         LA    R0,UPTPREFX\n         SR    R1,R0\n         STC   R1,UPTPREFL\n         SPACE 2\n***********************************************************************\n*  SET UP PSCB FIELDS\n***********************************************************************\n         SPACE 1\nDOPSCB   RWHOLE AUTHON\n         SPACE 1\nACIN0    MODESET KEY=ZERO,RELATED=(ACOUT0,'OUT OF KEY 0')\n         MVC   PSCBUSER,LIDLID          USERID\n         MVI   PSCBUSRL,7               ASSUME USERID LENGTH IS 7\n         TRT   PSCBUSER,BLANKS          IS USERD ID LENGTH < 7?\n         BZ    ACUNIT                   -NO\n         LA    R0,PSCBUSER              -YES, THEN\n         SR    R1,R0                      COMPUTE LENGTH\n         STC   R1,PSCBUSRL                AND SAVE IN PSCB\n         SPACE 1\nACUNIT   EQU   *\n         MVC   PSCBGPNM,LIDTUNIT        SET UP PSCB DEFAULT UNIT\n         SPACE 1\n         MVC   PSCBATR1,LIDTFLG3        SYSTEM ATTRIBUTES\n         MVC   PSCBATR2,LIDTAT2         USER ATTRIBUTES\n         SPACE 1\n         MVC   PSCBDEST,LIDTDRMT        DEFAULT DESTINATION\n         SPACE 1\nACOUT0   MODESET KEY=NZERO,RELATED=(ACIN0,'INTO KEY 0')\n         SPACE 1\n         RWHOLE AUTHOFF\n         SPACE 2\nRETURN   EQU   *\n         L     R13,4(R13)               POINT CALLERS SA\n         RETURN (14,12)                 RELOAD CALLERS REGS\n         SPACE 3\n***********************************************************************\n*  CONSTANTS\n***********************************************************************\n         SPACE 1\nBLANKS   DC    256X'00'\n         ORG   BLANKS+C' '\n         DC    AL1(4)\n         ORG\n         SPACE 2\n         LTORG\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TAPESCAN": {"ttr": 5645, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x891\\x8f\\x00\\x891\\x8f\\x108\\x07\\xfc\\x07\\xfc\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-11-14T00:00:00", "modifydate": "1989-11-14T10:38:00", "lines": 2044, "newlines": 2044, "modlines": 0, "user": "HMDEAN"}, "text": " TITLE 'TAPESCAN 3.5  -  IRSS TAPE SCANNING, ANALYSIS, COPYING UTILITY'\nTAPESCAN CSECT\n***********************************************************************\n* THIS PROGRAM, CALLED TAPESCAN, WAS WRITTEN BY WILL DALAND, SOCIAL\n* SCIENCE STATISTICAL LABORATORY, INSTITUTE FOR RESEARCH IN SOCIAL\n* SCIENCE, UNIVERSITY OF NORTH CAROLINA AT CHAPEL HILL, MARCH 1974.\n* SINCE PROGRAM FOR TAPESCAN WAS PUBLICALLY FUNDED, PERMISSION IS\n* GRANTED FOR ANYONE TO USE THIS PROGRAM IN WHOLE OR IN PART.  IT\n* IS REQUESTED THAT WHEN DOING SO YOU GIVE CREDIT (PREFERABLY BOTH\n* IN SOURCE AND DOCUMENTATION) TO WILL DALAND, IRSS, UNC@CH.\n* VERSION 3.1 INCLUDES EXPIRATION DATE, AVERAGE BLOCK SIZES, AND VTOC\n* LISTING AND WAS PRODUCED BY C. WRANDLE BARTH, GODDARD SPACE FLIGHT\n* CENTER, JANUARY 1975.\n*\n* THIS PROGRAM WAS MODIFIED FOR MVS, JUNE 1978 BY:\n*  STEVE R. HAGGERTY\n*  GTE DATA SERVICES\n*  MARINA DEL REY, CA 90291\n*  (213) 821-0511 EXT. 285\n*\n*  INSTALLED AT UNIONBANC COMPUTER CORPORATION ON 08/25/78\n*  BY HOWARD DEAN (TECHNICAL SERVICES). IF ANY PROBLEMS WITH\n*  THIS PROGRAM ARE ENCOUNTERED, PLEASE CONTACT:\n*\n*   HOWARD M. DEAN\n*   UNION BANK COMPUTER CORPORATION\n*   TECHNICAL SERVICES (8TH FLOOR)\n*   605 W. OLYMPIC BLVD.\n*   LOS ANGELES, CA. 90015\n*   PHONE - (213) 687-5719\n*\n*   WILLIAM J. SMITH\n*   SYNTEX (USA), INC.\n*   3401 HILLVIEW AVENUE\n*   MS A4-CIS\n*   PALO ALTO, CA.  94304\n*   PHONE - (415) 852-1638\n*\n*   LAST ONE TO WORK ON THIS CODE:                             HD DEC86\n*                                                              HD DEC86\n*   HOWARD M. DEAN                                             HD DEC86\n*   SR. SYSTEMS SPECIALIST                                     HD DEC86\n*   AMERICAN PRESIDENT LINES                                   HD DEC86\n*   #3 WATERS PARK DRIVE                                       HD DEC86\n*   SUITE 115                                                  HD DEC86\n*   SAN MATEO, CA 94403                                        HD DEC86\n*   (415) 570-2331                                             HD DEC86\n*                                                              HD DEC86\n* VERSION 3.2 CORRECTED VARIOUS BUGS.\n* VERSION 3.3 CHANGED OUTPUT TAPE HANDLING TO USE ONLY EXCP.\n* VERSION 3.4 CORRECTED FOR USE UNDER MVS REL. 3.7F      *GTEDS LA*SRH*\n* VERSION 3.5 CORRECT BUGS AND ADD LINECNT PARAMETER     *GTEDS LA*HMD*\n* VERSION 4.0 REMOVE 7-TRK CODE AND SUPPORT FOR 3480 CARTS     HD DEC86\n* VERSION 5.0 COMPLETE SUPPORT FOR 3480 CARTRIDGE TAPES        HD JAN89\n         EJECT\n***** H I S T O R Y    L O G **********\n*  08/29/78 - HOWARD M. DEAN\n*  A.  INSTALLED AT UNIONBANC COMPUTER\n*  B.  FINISH SUPPORT FOR 556 BPI TAPE (REMOVED BY S. HAGGERTY)\n*      SEE COMMENT AROUND LABEL TRY556. IF DENSITY IS NOT\n*      FOUND, THIS IS THE DEFAULT\n*\n*  09/15/78 - HOWARD M. DEAN\n*   A.  DENSITY PRINTOUT WRONG ON FIRST PAGE OF LISTING. CHANGED\n*       COPY ROUTINE TO ISSUE SENSE CHANNEL COMMAND BEFORE PRINTING\n*       FIRST HEADING SO DENSITY WILL BE CORRECT.\n*\n*   B.  ADD ROUTINE TO CHECK FOR MAGNETIC TAPE DEVICES ON BOTH\n*       INPUT AND OUTPUT, FOR IDIOTS THAT LIKE TO PLAY AROUND\n*       WITH OTHER PEOPLES OVERSIGHTS.\n*\n*   C.  ADD ROUTINE TO CHECK FOR PRINTABLE OUTPUT VOLSER. IF THE\n*       VOLSER FROM THE JFCB IS PRINTABLE, IT IS PRINTED. IF NOT,\n*       THE UCB IS CHECKED FOR A VOLSER. IF THAT IS PRINTABLE IT\n*       IS PRINTED. IF NOT, THE NAME OUTVOL IS USED. THE DCB VOLSER\n*       OR JFCB VOLSER, WHICHEVER IS VALID IS COMPARED TO THE OUTPUT\n*       TAPE LABEL TO DETERMINE IF THE LABEL IS VALID.\n*       ** H. DEAN  09/78 **\n*\n*  10/30/78 - HOWARD DEAN\n*   A.  ADD ROUTINE TO PRINT ERROR MESSAGE IF EXPDT OR\n*       CREDT IN HDR1 OR EOF1 LABEL IS INVALID.\n*\n*   B.  INDICATE STD TRTCH ON VTOC INSTEAD OF BLANKS.\n*\n*   C.  FIX UNPK INSTRUCTION SO TOTAL COUNT OF BLOCKS READ\n*       WOULD NOT BE TRUNCATED. ADDED 3 DIGITS TO LABEL BYTES.\n*\n*  11/22/78 - HOWARD DEAN\n*   A. MOVE DENSITY SENSE ROUTINE TO AVOID ERROR IN SENSE\n*      PROCESSING FOR 6250 BPI TAPES.\n*\n*   B. SET SENSEBYTS INITIALLY TO 3XL8'00'\n*\n*  01/23/79 - HOWARD DEAN\n*   A. FIX DENSITY PRINT ON FIRST PAGE OF COPY LISTING BY ISSUING\n*      READ COMMAND TO SET MODE BEFORE OUTPUT PROCESSING\n*  04/09/79 - HOWARD DEAN\n*   A. MAKE LINE COUNT A SYMBOLIC PARAMETER\n*   B. MAKE \"LINE\" AN EXEC PARAMETER\n*\n*  01/09/84 - WILLIAM SMITH, SYNTEX (USA), INC., PALO ALTO, CA. 94304\n*   A. CHANGED NAME TO \"SYNTEX\" FOR OBVIOUS REASONS\n*   B. EXECUTED UNDER MVS/SP 1.3.3 PUT 8308 WITH UCC/1 4.7 AND\n*      CGA'S \"TOP SECRET\" SECURITY SYSTEM\n*   C. CREDIT IS HEREBY GIVEN TO A PERSONAL FRIEND, C. WRANDLE BARTH,\n*      FORMERLY OF NASA GODDARD SPACE FLIGHT CENTER, FOR THE WORK HE\n*      DID TO ENHANCE TAPESCAN IN THE MID 1970'S UNDER OS/MVT;  ALL\n*      CHANGES IMPLEMENTED BY RANDY ARE FLAGGED -CWB-\n*\n*  08/23/86 - HOWARD M. DEAN, SYNTEX (USA), INC. PALO ALTO, CA 94304\n*   A. FIX PAGE EJECT ROUTINE IN 'VTOC' LISTING TO CORRECTLY\n*      SPACE WHEN A MULTIPLE PAGE VTOC IS PRINTED.\n*\n*  12/24/86 - HOWARD M. DEAN, AMER PRES LINES, SAN MATEO, CA 94403\n*   A. REMOVE ALL VESTIGES OF SEVEN TRACK TAPE SUPPORT\n*   B. ADD MINIMAL SUPPORT FOR 3480 TAPE CARDTRIDGES.\n*   C. USE SYSTEM MACROS WHERE POSSIBLE INSTEAD OF HARDCODED VALUES\n*\n*  11/04/88 - HOWARD M. DEAN, AMER PRES LINES, SAN MATEO, CA 94403\n*   A. ADD SUPPORT FOR 3480 TAPE CARTRIDGES - MAKE IT WORK\n*\n*  01/09/89 - HOWARD M. DEAN, AMER PRES LINES, SAN MATEO, CA 94403\n*   A. FIX 3480 SUPPORT.\n*   B. ADD OPTIONS LIST AT BEGINNING OF INVOCATION             HD JAN89\n*\n*  04/28/89 - HOWARD M. DEAN, AMER PRES LINES, SAN MATEO, CA 94403\n*   A. FIX BUG IN OPTIONS LIST WITH \"NOVOLSER\" OPTION\n*\n**** NOTE: THIS PROGRAM MUST BE LINKED AUTHORIZED FOR MVS\n****       OPERATION. THIS IS NOT A REQUIREMENT IN ANOTHER\n****       OPERATING SYSTEM. ** HMD 05/79 **\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*                     OPTIONS IN EFFECT MACRO                         *\n*                                                                     *\n***********************************************************************\n         MACRO\n         OPTN  &C,&CONST,&VALUE\n         LCLA  &N,&P,&P1\n         LCLC  &X,&Y,&Z                                        HD JAN89\n         LCLC  &SANSNO                                         HD JAN89\n&N       SETA  K'&CONST+1\n&P       SETA  &N-2                                            HD JAN89\n&W       SETC  'W'.'&SYSNDX'                                   HD JAN89\n&X       SETC  'X'.'&SYSNDX'                                   HD JAN89\n&Y       SETC  'Y'.'&SYSNDX'                                   HD JAN89\n&Z       SETC  'Z'.'&SYSNDX'                                   HD JAN89\n         AIF   (K'&C EQ 0).SKIP\n.* ASSUME &CONST BEGINS WITH 'NO' IF &C IS NOT EQUAL TO NULLS  HD JAN89\n&SANSNO  SETC  '&CONST'(3,&P)                                  HD JAN89\n         B&C   &X                       NEGATIVE BRANCH        HD JAN89\n         B     &Y                       POSITIVE BRANCH        HD JAN89\n         AGO   .NONUM                                          HD JAN89\n.SKIP    ANOP                                                  HD JAN89\n         AIF   (K'&VALUE EQ 0).ERR01\n         MVC   0(&N,R2),=C',&CONST'\n         L     R1,&VALUE\n         L     R15,=A(DBLWORK)          GET WORK AREA ADDRESS  HD JAN89\n         CVD   R1,0(R15)                CONVERT IN WORK AREA   HD JAN89\n         OI    7(R15),X'0F'             FIX SIGN\n         UNPK  &N.(3,R2),6(2,R15)       UNPACK\n&N       SETA  &N+3                     INCREMENT PAST NUMBER  HD JAN89\n         LA    R2,&N.(R2)               INCREMENT POINTER      HD JAN89\n&W       DS    0H                                              HD JAN89\n         AGO   .MEND                                           HD JAN89\n.NONUM   ANOP                                                  HD JAN89\n&X       DS    0H\n         MVC   0(&N,R2),=C',&CONST'     MOVE NEGATIVE PARM     HD JAN89\n         LA    R2,&N.(R2)               INCREMENT POINTER      HD JAN89\n         B     &Z                       EXIT                   HD JAN89\n&Y       DS    0H                                              HD JAN89\n         MVC   0(&P,R2),=C',&SANSNO'    MOVE POSITIVE PARM     HD JAN89\n         LA    R2,&P.(R2)               INCREMENT POINTER      HD JAN89\n         B     &Z                       EXIT                   HD JAN89\n&Z       DS    0H                                              HD JAN89\n         AGO   .MEND                                           HD JAN89\n.ERR01   MNOTE 12,'VALUE MUST BE SPEIFIED FOR NUMERIC VARIABLE'\n         MEXIT                                                 HD JAN89\n.MEND    ANOP                                                  HD JAN89\n         MEND\n         EJECT\n***********************************************************************\n*                                                                     *\n*                     INITIALIZATION ROUTINES                         *\n*                                                                     *\n***********************************************************************\n         LCLA  &LINECNT                                    *HMD 04/79*\n&LINECNT SETA  57                                          *HMD 04/79*\nMSECT    DSECT\nTRT1     DS    32D\nBLANKBUF DS    CL136              BLANKS FOR BLANKING MSGBUF FAST\nTRT2     DS    32D\nMSGBUF   DS    CL136\nRECBUF   DS    CL136              MINIMUM ALLOC, MAX ALLOC = 32K\nHOLDBUF  DS    CL136                                           HD AUG86\n         EJECT\nTAPESCAN CSECT\nR0       EQU   0   WORK REG + SYSTEM USES\nR1       EQU   1   WORK REG + SYSTEM USES\nR2       EQU   2   MOSTLY FOR LINKAGE TO PUTLINE & GETNUM\nR3       EQU   3   USED IN PARM SCANNER + VTOC ENTRY POINTER.     -CWB-\nR4       EQU   4   BELOW LABEL 'PROCESS' COUNTS BLKS READ FOLLOWING A  *\n                   TAPEMARK OR THE LOAD POINT.\nR5       EQU   5   WORK, INTERNAL SUBROUTINE LINKAGE\nR6       EQU   6   WORK REG\nR7       EQU   7   WORK REG + LENGTH OF LAST BLK READ\nR8       EQU   8   PARM FIELD LENGTH CTR, TOTAL BYTES ON TAPE CTR\nR9       EQU   9   BASE REG FOR DSECT MSECT\nR10      EQU   10  FREE UNUSED REG\nR11      EQU   11  2ND BASE REG\nR12      EQU   12  1ST BASE REG\nR13      EQU   13\nR14      EQU   14  WORK REG + SYSTEM USES\nR15      EQU   15  WORK REG + SYSTEM USES\nIOBECBPT EQU   4\nIOBSTART EQU   16\nDEBUCBAD EQU   32\n         EJECT\nTAPESCAN CSECT                                              -HMD-\n         USING *,R12              BASE FOR INITIALIZATION ONLY\n         STM   14,12,12(13)\n         LR    R12,R15            R12 = TEMP BASE FOR INITIALIZATION\n         L     R11,=A(EXIT)       PERMANENT BASE FOR MAIN AND COMMON\n         USING EXIT,R11\n         LA    R9,SAVE\n         ST    R9,8(R13)\n         ST    13,SAVE+4\n         LR    R13,R9\n         L     R1,0(R1)           GET PTR TO PARM FIELD\n         LH    R8,0(R1)           LOAD PARM FIELD LENGTH\n         LA    R3,2(R1)           SET PTR TO PARM FIELD CHAR STRING\n         LA    R9,SRCHPRM         LOAD TEMPORARY BASE FOR MSECT DSECT\n         USING MSECT,R9           PERMANENT DECLARATION FOR MSECT BASE\n         OPEN  (SYSPRINT,OUTPUT)\n         TM    SYSPRINT+(DCBOFLGS-IHADCB),DCBOFOPN\n         BZ    EXITRC8\n         GETMAIN VU,LA=GMCTRL,A=GMLOCS\n         L     R9,GMLOCS          THERE IS AT LEAST THE MINIMUM CORE\n*              ABOVE STMT SETS UP PERMANENT BASE FOR MSECT DSECT\n*        MVI   BLANKBUF,C' '           (POSTPONE TIL AFTER CLEAR) -CWB-\n*        MVC   BLANKBUF+1(135),BLANKBUF                           -CWB-\n         LR    R6,R9              START CLEARING GOTTEN MAIN TO        *\n                                  SHORTEN POSSIBLE DUMPS.\n         L     R4,GMLOCS+4        ACTUAL LENGTH OF GOTTEN MAIN\n         LA    R5,256             OFT-USED CONSTANT FOR CLEARING MAIN\nCLOOP    CR    R4,R5              R5 CONTAINS F'256'\n         BNH   LE256              BIF ONLY 256 OR FEWER BYTES LEFT\n         XC    0(256,R6),0(R6)    CLEAR 256 BYTES\n         SR    R4,R5              R5 CONTAINS F'256'\n         AR    R6,R5              R5 CONTAINS F'256'\n         B     CLOOP\nLE256    BCTR  R4,0               SET TO MACHINE LENGTH\n         EX    R4,XCLEAR          CLEAR LAST 1 TO 256 BYTES\nXCLEAR   XC    0(0,R6),0(R6)      EXECUTED IN STMT ABOVE\n         MVI   BLANKBUF,C' '           CLEAR BLANK AREA.          -CWB-\n         MVC   BLANKBUF+1(135),BLANKBUF                           -CWB-\n         LA    R1,MSGBUF+46       FOR ADDRESS CONSTANT IN DYNAMIC -CWB-\n         ST    R1,AMSGBP46        STORAGE.                        -CWB-\n         LA    R1,MSGBUF+72       SECOND ADCON.                   -CWB-\n         ST    R1,AMSGBP72                                        -CWB-\n         LA    R15,RECBUF         POINT THE WRITE\n         O     R15,WRTCMND        CCW TO DYNAMICALLY\n         ST    R15,WRTCMND        ALLOCATED RECORD BUFFER.\n         LA    R15,RECBUF         SET FILE SEARCH CCW TO\n         O     R15,READ81CM       POINT TO\n         ST    R15,READ81CM\n         LA    R15,RECBUF         INSERT POINTER IN               -CWB-\n         O     R15,READCMND            READ COMMAND.              -CWB-\n         ST    R15,READCMND                                       -CWB-\n         LR    R5,R9              PTR TO TRT1\n         LA    R6,16\n         LA    R7,CTABLE\nSETUPTR1 MVC   0(1,5),0(7)        MOVE SEED CHAR INTO TRT1\n         MVC   1(15,5),0(5)       AND PROPAGATE IT\n         LA    5,16(5)\n         LA    7,1(7)\n         BCT   6,SETUPTR1\n         MVC   TRT2(16),CTABLE    MOVE 16 CHAR SEED INTO TRT2\n         MVC   TRT2+16(240),TRT2  AND PROPAGATE IT 15 TIMES\n         TIME  DEC                GET DATE IN R1 IN FORM 00YYJJJF\n         ST    R0,BADLNGTH        SAVE TIME WHILE YOU'RE AT IT\n         LR    R2,R1              PUT IN R2 TO PASS TO DATE SUBROUTINE\n         LA    R1,=A(DATERSLT)    PTR TO PTR TO DATE'S RESULT FIELD\n         L     R15,=V(DATE)       IRSS DATE SUBROUTINE (DATECONV)\n         BALR  R14,R15            CONVERT 00YYJJJF TO MM/DD/YY\n         ED    TIMERSLT,BADLNGTH  EDIT INTO PAGE HEADER LINE BUFFER\n*        SR    R0,R0              SET TO AVOID RESERVING ANY LINES\n*        BAL   R2,PAGECHK         PRINT PAGE HEADER\n         DEVTYPE INPUT+40,DTYPE   CHECK TO SEE IF TAPE DEVICE     -HMD-\n         LTR   R15,R15            DID WE FIND DD STATEMENT?       -HMD-\n         BNZ   NOINPUT            NOPE                            -HMD-\n         CLI   DTYPE+2,X'80'      IS THIS A TAPE DEVICE?          -HMD-\n         BNE   NOTTAPEI           NOPE                            -HMD-\n         RDJFCB (INPUT)           READ INPUT TAPE'S JFCB\n         LTR   R15,R15            SEE IF DD STATEMENT THERE\n         BNE   NOINPUT            EXIT WITH ERR MSG IF NOT\n         MVC   DDVOL,JFCBINX+(JFCBVOLS-JFCB) PUT VOL INTO PAGE HEAD.\n         MVC   JFCLTSV,JFCBINX+(JFCBLTYP-JFCB) SAVE INPUT LABEL TYPE\n         TM    JFCLTSV,X'01'      SEE IF NL OR LTM SPECIFIED\n         BO    *+8                IF IT WAS THEN LEAVE IT AS IT IS\n         MVI   JFCBINX+(JFCBLTYP-JFCB),JFCBLP ELSE SET TO BLP\n         MVC   JFCBINX+JFCBFLSQ-JFCB(2),=H'1' SET FILE SEQ. NO. TO = 1\n         OPEN  (INPUT,INOUT),TYPE=J                            HD OCT88\n         TM    INPUT+(DCBOFLGS-IHADCB),DCBOFOPN\n         BZ    NOINPUT            TERMINAL ERROR\n         L     R1,INPUT+(DCBEODAD-IHADCB) GET CORRECT EODAD       -HMD-\n         ST    R1,EODADDR         SAVE FOR EXCP ROUTINE           -HMD-\n         L     R1,GMCTRL+4        LOAD MAXIMUM REQUESTED GETMAIN LENGTH\n         S     R1,GMLOCS+4        SUBTRACT LENGTH ACTUALLY GOTTEN\n         BZ    SENSLDPT           BIF GOT ALL CORE REQUESTED\n         CVD   R1,BADLNGTH        CONVERT DIFERENCE TO PACKED DECIMAL\n         UNPK  MORECORE+33(5),BADLNGTH\n         OI    MORECORE+37,C'0'\n         LH    R2,INPUT+(DCBBLKSI-IHADCB) TO PREVENT DATA 'OVERRUNS'\n         SR    R2,R1              SUBTRACT DIFFERENCE OF MORE CORE\n         STH   R2,INPUT+(DCBBLKSI-IHADCB) AND PUT BACK IN DCB\n         BAL   R2,PUTLINE\n         MVC   MSGBUF(L'MORECORE),MORECORE\nSENSLDPT LA    R1,=AL3(SENSCMND)  SET UP PTR FOR EXECEXCP CALL\n         LA    R2,INPUT           PTR TO DCB  FOR EXCP CALL\n         BAL   R4,EXECEXCP        CALL EXCP SUBROUTINE\n         TM    SENSBYTS+1,X'08'   SEE IF LOAD POINT SENSED\n         BO    SENSTYP            BIF LOAD POINT SENSED           -HMD-\n         LA    R1,=AL3(RWNDCMND)  REWIND AND RE-SENSE COMMAND CHAIN\n         LA    R2,INPUT           PTR TO DCB  FOR EXCP CALL\n         BAL   R4,EXECEXCP\n         TM    SENSBYTS+1,X'08'   SEE IF NOW AT LOAD POINT\n         BO    SENSTYP            BIF AT LOAD POINT               -HMD-\nLDPTERR  BAL   R2,PUTLINE         PRINT ERROR MESSAGE             -HMD-\n         MVC   MSGBUF(66),=C'0UNABLE TO REWIND INPUT TAPE TO LOAD POINT*\n                - TERMINATING EXECUTION'\n         B     EXITRC8\nSENSTYP  DS    0H                 SENSE DENSITY OF TAPE           -HMD-\n         LA    R1,HDEOD           FAKE EOD ADDRESS                -HMD-\n         ST    R1,EODADDR         SAVE EOD ADDRESS FOR EXECEXCP   -HMD-\n         LA    R1,=AL3(READCMND)  READ TO SET UP SENSE BYTES      -HMD-\n         LA    R2,INPUT           POINT TO DCB                    -HMD-\n         BAL   R4,EXECEXCP        GO DO EXCP                      -HMD-\nHDEOD    LA    R1,=AL3(SENSCMND)  REWIND TO LOAD POINT            -HMD-\n         LA    R2,INPUT           POINT TO INPUT DCB              -HMD-\n         XC    SENSBYTS(24),SENSBYTS                              -HMD-\n         BAL   R4,EXECEXCP        ISSUE EXCP                      -HMD-\nRESTREOD L     R1,INPUT+(DCBEODAD-IHADCB) GET EOD ADDRESS         -HMD-\n         ST    R1,EODADDR         SAVE FOR FUTURE USE             -HMD-\n         L     R2,(DCBDEBAD-IHADCB)+INPUT GET \"DEB\" ADDRESS    HD NOV86\n         L     R2,DEBUCBAD(R2)    GET \"UCB\" ADDRESS            HD NOV86\n         TM    UCBTBYT4-UCBOB(R2),UCB3480                      HD NOV86\n         BO    HD3480             FLAG HEADER IF 3480 DEVICE   HD NOV86\n         TM    SENSBYTS+3,4       P.E.= 1600 B.P.I?               -HMD-\n         BZ    HD6250             NO, TRY 6250                    -HMD-\n         MVI   TAPEDENS,C'3'      SET DENS FOR 1600 BPI           -HMD-\n         MVC   PRTDENS(4),=CL4'1600'   SET PRINT DENS FOR 1600    -HMD-\n         B     HDEND              HEADING END                     -HMD-\nHD6250   L     R2,(DCBDEBAD-IHADCB)+INPUT GET INPUT DEB ADDR.     -HMD-\n         L     R2,DEBUCBAD(R2)    GET UCB ADDRESS                 -HMD-\n         TM    16(R2),2           UCBTYP = 6250?                  -HMD-\n         BNO   HD800              NOPE, TRY 800 BPI               -HMD-\n         MVI   TAPEDENS,C'4'      SET DEN FOR 6250 BPI            -HMD-\n         MVC   PRTDENS(4),=CL4'6250'  SET PRINT FOR 6250          -HMD-\n         B     HDEND                                              -HMD-\nHD3480   MVI   TAPEDENS,C'5'      SELECT DENSITY=5             HD JAN89\n         MVC   PRTDENS(4),=CL4' 38K'                           HD JAN89\n         L     R1,=A(FLAG3480)    LOAD ADDRESS OF FLAG         HD NOV86\n         MVI   0(R1),C'Y'         INDICATE 3480 DEVICE         HD NOV86\n         B     HDEND              CONTINUE WITH PROGRAM        HD NOV86\nHD800    TM    INPUT+(DCBDEN-IHADCB),B'10000011' 800 BPI?         -HMD-\n         MVI   TAPEDENS,C'2'      SET DEN FOR 800 BPI             -HMD-\n         MVC   PRTDENS(4),=CL4' 800'  SET PRINT FOR 800 BPI       -HMD-\n         B     HDEND              END OF ROUTINE                  -HMD-\nHDEND    DS    0H                 ENOUGH OF ALL THIS NONSENSE     -HMD-\n         LA    R1,=AL3(RWNDCMND)  REWIND TO LOAD POINT            -HMD-\n         LA    R2,INPUT           GET INPUT ADDRESS               -HMD-\n         BAL   R4,EXECEXCP        GO DO IT                        -HMD-\nREWOUND  TM    SENSBYTS+1,X'08'   ARE WE AT LOAD POINT NOW?       -HMD-\n         BZ    LDPTERR            NO, INDICATE LOAD ERROR         -HMD-\nSRCHPRM  LTR   R8,R8              LOAD AND TEST REMAINING PARM LENGTH\n         BNH   ENDPARMS\n         SR    R5,R5              ZERO CURRENT PARM LENGTH COUNTER\n         LR    R4,R3              SAVE PTR TO START OF PARM\nSRCHCOMA CLI   0(R3),C','\n         LA    R3,1(R3)           BUMP PTR TO NEXT CHAR\n         BE    GOTCOMMA\n         LA    5,1(5)             COUNTS LENGTH OF CURRENT PARM\n         BCT   R8,SRCHCOMA\nGOTCOMMA CLC   0(6,R4),=C'NOLIST' GET HERE IF COMMA OR END OF PARM LIST\n         BE    NOLIST\n         CLC   0(4,4),=C'LIST'\n         BE    LIST\n         CLC   0(5,4),=C'MAXTM'   INITIALLY 32760           FJP/20FEB79\n         BE    MAXTM\n         CLC   0(6,4),=C'SKIPTM'\n         BE    SKIPTM\n         CLC   0(5,4),=C'NOHEX'\n         BE    NOHEX\n         CLC   0(6,4),=C'MAXMOV'\n         BE    MAXEOV\n         CLC   0(7,4),=C'SKIPEOV'\n         BE    SKIPEOV\n         CLC   0(9,4),=C'NOSUMMARY'\n         BE    NOSUMARY\n         CLC   0(5,4),=C'COUNT'\n         BE    COUNT\n         CLC   0(7,4),=C'NOCOUNT'\n         BE    NOCOUNT\n         CLC   0(6,4),=C'ERRLIM'\n         BE    ERRLIM\n         CLC   0(4,4),=C'COPY'\n         BE    COPY               TAPE COPYING OPTION\n         CLC   0(6,4),=C'EOVMOD'  MOD OPTION IMPLIES COPY & COUNT OPTNS\n         BE    EOVMOD\n         CLC   0(8,4),=C'NOVOLSER'\n         BE    NOVOLSER\n         CLC   0(3,4),=C'OPT'\n         BE    OPT                MISCELLANEOUS OPTIONS\n         CLC   0(4,4),=C'LINE'    LINE COUNT OPTION        *HMD 04/79*\n         BE    LINE                                        *HMD 04/79*\n         CLC   0(4,4),=C'VTOC'                                  MRX-JJJ\n         BE    VTOCONLY                                         MRX-JJJ\nUNRECOG  BAL   R2,PUTLINE\n         MVC   MSGBUF(33),=C'0ERROR - UNRECOGNIZABLE PARAMETER'\nPRLENERR BAL   2,PUTLINE\n         MVC   MSGBUF(32),=C'0WARNING - INVALID PARM IGNORED.'\nSRCHPARM BCTR  R8,0\n         B     SRCHPRM\nGETNUM   DS    0H                 CHAR STRNG INTGR TO BIN INTGR CONV SB\n         SR    6,6                CLEAR ACCUMULATOR\n         CLI   0(4),C'9'          * R4=PTR TO 1ST CHAR OF NUM         *\n         BH    NUMERR             * R5=ACTUAL LENGTH OF NUM           *\n         CLI   0(4),C'0'          * RESULT RETURNED IN R6             *\n         BL    NUMERR             * R2,R4,R5,R6, AND R7 MODIFIED BY   *\n         MH    R6,=H'10'          * USING GETNUM SUBROUTINE.          *\n         IC    R7,0(4)            PICK UP DECIMAL CHARACTER\n         SLL   7,28               CHOP OFF LEFT 4 BITS\n         SRL   7,28               AND SHIFT BACK\n         AR    6,7                ADD DIGIT INTO RESULT\n         LA    4,1(4)             BUMP PTR TO NEXT CHAR\n         BCT   5,GETNUM+2         GO TO TOP OF LOOP\n         BR    2                  RETURN FROM GETNUM SUBROUTINE\nNUMERR   BAL   R2,PUTLINE         ERROR DESCRIPTOR SUBROUTINE\n         MVC   MSGBUF(50),=C'0ERROR - PARAMETER HAS INVALID NUMERICAL C*\n               OMPONENT'\n         B     PRLENERR\nNOCOUNT  CH    R5,=H'7'\n         BNE   PRLENERR           *** WARNING *** MODIFIED IN COPY/MOD *\n                                                  OPTION ROUTINES.\n         MVI   COUNTFLG,C'N'\n         B     SRCHPARM\nCOUNT    CH    R5,=H'5'           FINAL PROCESSING OF COUNT OPTION\n         BNE   UNRECOG\n         MVI   COUNTFLG,C'Y'\n         B     SRCHPARM\nNOVOLSER CH    R5,=H'8'\n         BNE   UNRECOG\n         MVI   SVOUTFLG,C'Y'      SET 'NOVOLSER SPECIFIED' FLAG\n         TM    JFCLTSV,X'31'      SEE IF INPUT HAD LABEL TYPE OF NL,\n         BNZ   SRCHPARM           BLP, OR LTM, AND BIF SO.\n         OI    WRTFLG,X'04'       OR IN 'DO NOT COPY INPUT VOL LABEL'\n         B     SRCHPARM\nCOPY     CH    R5,=H'4'\n         BNE   UNRECOG\n         OI    COPYFLG,X'01'      INDICATE COPY OPTION SPECIFIED\n         OI    WRTFLG,X'01'       INDICATE COPY   REQUESTED (THAT BIT)\n         OI    NOCOUNT+5,X'F0'    NOP OUT NOCOUNT & SET FOR WARN MSG\n         B     COUNT+8            COPY OPTION INVOKES COUNT AUTOMATICLY\nEOVMOD   CH    R5,=H'6'           ADD DATASETS ONTO EOV\n         BNE   UNRECOG\n         OI    COPYFLG,X'03'      BITS = 'COPY OPT + MOD OPT REQUESTED'\n         B     COPY+8             MOD OPTION IMPLIES COPY OPTION\nOPT      CH    R5,=H'3'\n         BNH   PRLENERR\n         LA    R4,4(R4)\n         SH    R5,=H'4'\n         BAL   R2,GETNUM\n         ST    R6,OPTNO\n         B     SRCHPARM\nERRLIM   CH    R5,=H'5'           CHANGE SYNAD ERROR COUNT LIMIT\n         BNH   PRLENERR\n         LA    R4,6(R4)\n         SH    R5,=H'6'\n         BAL   R2,GETNUM\n         ST    R6,SYNADNO\n         B     SRCHPARM\nNOLIST   CH    R5,=H'6'           FINAL PROCESSING OF NOLIST PARM\n         BNE   UNRECOG\n         SR    R0,R0\n         ST    R0,LISTNO\n         B     SRCHPARM\nLIST     CH    R5,=H'4'\n         BNH   PRLENERR\n         LA    R4,4(R4)\n         SH    R5,=H'4'           GET ACTUAL LENGTH OF PRESUMED NUMBER\n         BAL   R2,GETNUM          GET PRESUMED NUMBER INTO BINARY FORM\n         ST    R6,LISTNO          STORE NONNEGATIVE BINARY INTEGER\n         B     SRCHPARM\nNOHEX    CH    R5,=H'5'\n         BNE   UNRECOG\n         MVI   HEXFLG,C'N'\n         B     SRCHPARM\nVTOCONLY CH    R5,=H'4'                                         MRX-JJJ\n         BNE   UNRECOG                                          MRX-JJJ\n         MVI   VTOCFLAG,C'Y'      SET VTOC ONLY FLAG           HD OCT88\n         B     SRCHPARM                                         MRX-JJJ\nNOSUMARY CH    R5,=H'9'\n         BNE   UNRECOG\n         MVI   SUMFLG,C'N'        SET SUMMARY FLAG TO 'NOSUMMARY'\n         LA    R0,1               READ MINIMUM OF 1 BLK AFTER A TAPEMRK\n         ST    R0,READNO          SET # OF BLKS TO READ FOR SUMMARY=0\n         B     SRCHPARM\nSKIPTM   CH    R5,=H'6'\n         BNH   PRLENERR\n         LA    R4,6(R4)\n         SH    R5,=H'6'\n         BAL   R2,GETNUM\n         ST    R6,SKIPTMNO\n         B     SRCHPARM\nLINE     CH    R5,=H'4'            IS THIS PARM 'LINE'?    *HMD 04/79*\n         BNH   PRLENERR            NOPE, LENGTH ERROR      *HMD 04/79*\n         LA    R4,4(R4)            BUMP POINTER            *HMD 04/79*\n         SH    R5,=H'4'            DECREMENT COUNTER       *HMD 04/79*\n         BAL   R2,GETNUM           GET NUMERIC VALUE       *HMD 04/79*\n         CH    R6,=H'30'           TOO LOW?                *HMD 04/79*\n         BL    NUMERR              YES, FORGET IT          *HMD 04/79*\n         CH    R6,=H'99'           TOO HIGH?               *HMD 04/79*\n         BH    NUMERR              YES, FORGET IT          *HMD 04/79*\n         ST    R6,LINECNT          SAVE LINE COUNT PARM    *HMD 04/79*\n         B     SRCHPARM            GET SOME MORE PARMS     *HMD 04/79*\nMAXTM    CH    R5,=H'5'\n         BNH   PRLENERR\n         LA    R4,5(4)\n         SH    R5,=H'5'\n         BAL   R2,GETNUM\n         LTR   R6,R6              MAKE SURE MAXTM IS NOT =0\n         BZ    NUMERR             ERROR - INVALID NUMERICAL PARM\n         ST    R6,MAXTMNO\n         B     SRCHPARM\nSKIPEOV  CH    R5,=H'7'\n         BNH   PRLENERR\n         LA    R4,7(R4)\n         SH    R5,=H'7'\n         BAL   R2,GETNUM\n         ST    R6,SKPEOVNO\n         B     SRCHPARM\nMAXEOV   CH    R5,=H'6'           CHECK LENGTH OF PARM\n         BNH   PRLENERR           LENGTH MUST BE GREATER THAN 6\n         LA    R4,6(R4)           BUMP PTR TO START OF PARM'S NUMBER\n         SH    R5,=H'6'           GET ACTUAL LENGTH OF PRESUMED NUMBER\n         BAL   R2,GETNUM          CONVERT NUMBER FOLLOWING 'MAXEOV' PRM\n         LTR   R6,R6              MAKE SURE MAXEOV IS NOT=0\n         BZ    NUMERR             INVALID NUMERICAL COMPONENT\n         ST    R6,MAXEOVNO        STORE RESULT\n         B     SRCHPARM\nENDPARMS DS    0H\n         CLC   SKPEOVNO,MAXEOVNO  PARM VALIDITY CHECKING\n         BL    *+26               SKIP IF NO ERROR\n         BAL   R2,PUTLINE\n         MVC   MSGBUF(48),=C'0SKIPEOV PARM GE MAXEOV; SKIPEOV SET TO MA*\n               XEOV-1'\n         L     R2,MAXEOVNO\n         SH    R2,=H'1'\n         ST    R2,SKPEOVNO        STORE IT SET TO MAXEOV-1\n         CLC   SKIPTMNO,MAXTMNO\n         BL    *+26               SKIP IF SKIPTMNO & MAXTMNO CONSISTENT\n         BAL   R2,PUTLINE         PRINT ERROR MESSAGE\n         MVC   MSGBUF(44),=C'0SKIPTM PARM GE MAXTM; SKIPTM SET TO MAXTM*\n               -1'\n         L     R2,MAXTMNO         MAXIMUM ON TAPEMARKS TO BE READ\n         SH    R2,=H'1'\n         ST    R2,SKIPTMNO        STORE AS MAXTM-1\n         CLC   SKPEOVNO,=F'0'     SPECIFIED?\n         BE    ENDP010            NO, ITS OK\n         CLC   SKIPTMNO,=F'0'     SPECIFIED?\n         BE    ENDP010             NO, ITS OK\n         BAL   R2,PUTLINE         BOTH SPECIFIED, ERROR\n         MVC   MSGBUF(52),=C'0BOTH SKIPTM AND SKIPEOV SPECIFIED; SKIPEO+\n               V IGNORED.'        PRINT ERROR MESSAGE\n         MVC   SKPEOVNO,=F'0'\n         EJECT\n***********************************************************************\n*                                                                     *\n*                       PRINT OPTIONS IN EFFECT                       *\n*                                                                     *\n***********************************************************************\nENDP010  DS    0H                                              HD OCT88\n         MVC   MSGBUF,BLANKBUF    PRINT A BLANK LINE           HD JAN89\n         BAL   R2,PUTLINE3                                     HD JAN89\n         DC    C'OPT111'                                       HD JAN89\n         SPACE 2                                               HD JAN89\n         MVC   MSGBUF(19),=C' OPTIONS IN EFFECT:'\n         LA    R2,MSGBUF+19       R2=NEXT POSITION TO RECEIVE PARM\n         OPTN  ,LIST,LISTNO                                    HD JAN89\n         CLI   HEXFLG,C'N'                                     HD JAN89\n         OPTN  E,NOHEX                                         HD JAN89\n         CLI   COUNTFLG,C'N'                                   HD JAN89\n         OPTN  E,NOCOUNT                                       HD JAN89\n         CLC   READNO,=F'1'                                    HD JAN89\n         OPTN  E,NOSUMMARY                                     HD JAN89\n         CLI   COPYFLG,0                                       HD JAN89\n         OPTN  E,NOCOPY                                        HD JAN89\n         TM    COPYFLG,X'02'                                   HD JAN89\n         OPTN  NO,NOEOVMOD                                     HD JAN89\n         CLI   SVOUTFLG,C'Y'                                   HD APR89\n         OPTN  E,NOVOLSER                                      HD JAN89\n         MVI   MSGBUF+19,C' '    BLANK OUT FIRST COMMA         HD JAN89\n         BAL   R2,PUTLINE3       PRINT FIRST OPTION SET        HD JAN89\n         NOP   FWY101            POINT TO                      HD JAN89\n         NOPR  0                    BRANCH AROUND              HD JAN89\n         SPACE 2                                               HD JAN89\n         MVC   MSGBUF,BLANKBUF   CLEAR BUFFER FAST             HD JAN89\n         MVC   MSGBUF(19),=C' OPTIONS IN EFFECT:'\n         LA    R2,MSGBUF+19       R2=NEXT POSITION TO RECEIVE PARM\n         OPTN  ,SKIPEOV,SKPEOVNO                               HD JAN89\n         OPTN  ,SKIPTM,SKIPTMNO                                HD JAN89\n         OPTN  ,MAXEOV,MAXEOVNO                                HD JAN89\n         OPTN  ,MAXTM,MAXTMNO                                  HD JAN89\n         OPTN  ,OPT,OPTNO                                      HD JAN89\n         CLI   VTOCFLAG,C'N'                                   HD JAN89\n         OPTN  E,NOVTOCONLY                                    HD JAN89\n         MVI   MSGBUF+19,C' '     BLANK OUT FIRST COMMA\n         BAL   R2,PUTLINE3\n         DC    C'OPT222'                                       HD JAN89\n         SPACE 2                                               HD JAN89\nFWY101   DS    0H                                              HD JAN89\n         TM    COPYFLG,X'01'      SEE IF COPY AND/OR MOD SPECIFIED\n         BZ    NOTBOTH            BIF COPY OPTION NOT SPECIFIEDHD JAN89\n         MVI   COUNTFLG,C'Y'      TURN COUNT OPTION ON         HD OCT88\n         MVI   SVOUTFLG,C'N'      TURN \"NOVOLSER\" OFF          HD OCT88\n***************************************************************HD OCT88\n**                                                             HD OCT88\n**   CHECK OUTPUT TAPE, IF ANY FOR VALID DEVICE TYPE, ETC..    HD OCT88\n**                                                             HD OCT88\n***************************************************************HD OCT88\nOUTCHECK DS    0H                                              HD OCT88\n         DEVTYPE OUTPUT+40,DTYPE  CHECK FOR MAG TAPE DEVICE       -HMD-\n         LTR   R15,R15            IS DD STMT THERE?               -HMD-\n         BNZ   NOOUTPUT           NOPE                            -HMD-\n         CLI   DTYPE+2,X'80'      IS THIS A TAPE DEVICE?          -HMD-\n         BNE   NOTTAPEO           NOPE                            -HMD-\n         RDJFCB (OUTPUT)          ELSE PROCESS COPY AND/OR MOD OPTIONS\n         LTR   R15,R15            SEE IF RDJFCB WENT ALLRIGHT\n         BNE   NOOUTPUT           'MISSING OR INVALID DD' ERROR MSG\n         MVC   SAVEVOL,JFCBOUT+(JFCBVOLS-JFCB) SAVE VOLSER        -HMD-\n         NI    VOLSW,255-VOLSWNV          TURN OFF BIT            -HMD-\n         L     R3,=A(EBCDTBL)             GET TABLE ADDR          -HMD-\n         TRT   SAVEVOL(6),0(R3)           CHECK PRINTABLES        -HMD-\n         BZ    @VALID                     BIF OK                  -HMD-\n         OI    VOLSW,VOLSWNV              TURN ON SWITCH          -HMD-\n         B     *+10                       DONT MOVE IN VOLSER     -HMD\n@VALID   MVC   POSMSG+22(6),SAVEVOL       MOVE VOLSER TO HEADING  -HMD-\n         MVC   OUTLTYP,JFCBOUT+(JFCBLTYP-JFCB)\n         TM    OUTLTYP,X'01'      SEE IF LABEL IS NL OR LTM\n         BO    *+8                BIF YES - IT IS NL OR LTM\n         MVI   JFCBOUT+(JFCBLTYP-JFCB),JFCBLP ELSE SET TO BLP\n         LA    R0,1\n         LH    R2,JOUTFLSQ        SAVE ORIGINAL FILE SEQ. NO.\n         LTR   R2,R2              BUT IF IT'S\n         BNZ   *+6                EQUAL TO ZERO THEN\n         LR    R2,R0              SET IT TO = 1.\n         STH   R0,JOUTFLSQ        TEMPORARILY SET FLSQ IN JFCB TO = 1\n         ST    R2,SVR2            SAVE R2 OVER TRT                -HMD-\n         OPEN  (OUTPUT,INOUT),TYPE=J                           HD OCT88\n         TM    OUTPUT+(DCBOFLGS-IHADCB),DCBOFOPN\n         BZ    NOOUTPUT\n         TM    VOLSW,VOLSWNV      IS VOLSER PRINTABLE?            -HMD-\n         BNO   @VOLOK             YES, WE TOOK CARE OF IT EARLIER -HMD-\n         L     R2,(DCBDEBAD-IHADCB)+OUTPUT GET DEB ADDR           -HMD-\n         L     R2,DEBUCBAD(R2)    GET UCB ADDR                    -HMD-\n         MVC   SAVEVOL(6),28(R2)  SAVE VOLSER                     -HMD-\n         L     R3,=A(EBCDTBL)     GET TABLE ADDR                  -HMD-\n         TRT   SAVEVOL(6),0(R3)   SEE IF CHARS ARE PRINTABLE      -HMD-\n         BNZ   @VOLOK             NOPE, THEY ARE NOT..LEAVE CONST.-HMD-\n         MVC   POSMSG+22(6),SAVEVOL   MOVE IN MESSAGE             -HMD-\n@VOLOK   DS    0H                 END OF PRINTABLE CHECK          -HMD-\n         L     R2,SVR2            RESTORE R2 FROM SAVE AREA       -HMD-\n         LA    R1,EXCPIOBP        POINT TO IOB BSAM-TYPE PREFIX.  -CWB-\n         IC    R0,OUTPUT+(DCBIOBA-IHADCB) CHANGE DCB POINTER FROM EXCP-\n         ST    R1,OUTPUT+(DCBIOBA-IHADCB) TYPE TO BSAM-TYPE POINTER\n         STC   R0,OUTPUT+(DCBIOBA-IHADCB) FOR \"EXECEXCP\" CONSISTANCY\n         STH   R2,JOUTFLSQ        RESTORE ORIGINAL FLSQ IN JFCB\n         TM    OUTLTYP,X'42'      SEE IF AL, AUL, SL, OR SUL\n         BZ    COPYOUT            BIF NOT ONE OF ABOVE\n         LA    R1,=AL3(READCMND)  USE EXCP TO READ PRESUMED VOL   -CWB-\n         LA    R2,OUTPUT               LABEL (CHANGED FROM BSAM   -CWB-\n         BAL   R4,EXECEXCP             READING).                  -CWB-\n         LH    R7,READLENG        GET LENGTH OF READ COMMAND.     -CWB-\n         LH    R6,RESIDL          GET RESIDUAL LENGTH AFTER READ. -CWB-\n         SR    R7,R6\n         BNH   BADREC             VERY BAD IF RECORD LENGTH LT 1\n         TM    OUTLTYP,X'02'      SEE IF SL OR SUL, OR AL OR AUL\n         BO    COPYSL             BIF SL OR SUL\n*COPYAL  CLC   RECBUF(4),=X'B6AFAC51'  SEE IF ANSI 'VOL1'\n         BNE   BADOUTVL           AL OR AUL IN JCL, BUT LABEL NOT ANSI\n         C     R7,=F'80'\n         BL    BADOUTVL\n         B     REWINDCK\nCOPYSL   C     R7,=F'80'          SEE IF PRESUMED IBM SL IS 80 BYTES\n         BNE   BADOUTVL           BIF PRESUMED IBM LABEL NOT 80 BYTES\n         CLC   RECBUF(4),=C'VOL1'\n         BNE   BADOUTVL\n         CLC   SAVEVOL,RECBUF+4             COMPARE VOL SERS     -HMD-\n         BNE   BADOUTVL\nREWINDCK CLC   JOUTFLSQ(2),=H'1'  DO NOT REWIND IF FILE SEQ. NO. GT 1\n         BH    COPYOUT            DO NOT REWIND IF FILE SEQ. NO. GT 1\n         TM    COPYFLG,X'02'      DO NOT REWIND IF EOVMOD SPECIFIED\n         BO    COPYOUT            DO NOT REWIND IF EOVMOD SPECIFIED\n         CLI   SVOUTFLG,C'Y'      DO NOT REWIND IF NOVOLSER SPECIFIED\n         BE    COPYOUT            DO NOT REWIND IF NOVOLSER SPECIFIED\n         LA    R1,=AL3(RWNDCMND)  REWIND COMMAND CHAINED TO SENSE CMND\n         LA    R2,OUTPUT          OUTPUT DCB\n         BAL   R4,EXECEXCP        REWIND AND SENSE\n         TM    SENSBYTS+1,X'08'   SEE IF LOAD POINT SENSED\n         BO    COPYOUT            BIF SENSED LOADPOINT\n         BAL   R2,PUTLINE\n         MVC   MSGBUF(67),=C'0UNABLE TO REWIND OUTPUT TAPE TO LOAD POIN*\n               T - TERMINATING EXECUTION'\n         B     EXITRC8\nBADOUTVL BAL   R2,PUTLINE\n         MVC   MSGBUF(32),=C'0OUTPUT VOLUME LABEL IS INVALID:'\n         LR    R3,R12             PROVIDE PROPER ADDRESSABILITY.\n         L     R12,=A(EXIT+4096)\n         DROP  R12\n         USING TAPESCAN,R3\n         BAL   R5,LISTON\n         B     EXITRC8\n         LR    R12,R3             RESTORE ADDRESSABILITY.\n         DROP  R3\n         USING TAPESCAN,R12\nCOPYOUT  DS    0H                 IF NECESS., MOD PROCESSING DONE HERE\n         LA    R0,EODADOUT        ADDRESS OF NEW OUTPUT TAPE EODAD RTN\n         ST    R0,OUTPUT+(DCBEODAD-IHADCB) AND SET IT UP IN DCB.\nFILELOOP TM    COPYFLG,X'02'      SEE IF MOD SPECIFIED\n         BO    FILEFSM            IF SO THEN DO SRCH FWRD FOR TPMK\n         CLC   COUTFILE,JOUTFLSQ  ARE WE IN RIGHT FILE YET?\n         BNL   FILEMSG            BIF YES\nFILEFSM  LA    R1,=AL3(FSMCMND)   FWRD SPACE JUST PAST NEXT TAPEMARK\n         LA    R2,OUTPUT\n         BAL   R4,EXECEXCP\n         LA    R0,1               MAINTAIN\n         AH    R0,COUTFILE        CURRENT FILE\n         STH   R0,COUTFILE        NUMBER.\n         CH    R0,JOUTFLSQ        BIF NOT YET UP TO SPECIFIED FILE\n         BL    *+12               BIF NOT YET UP TO SPECIFIED FILE\n         TM    COPYFLG,X'02'      SEE IF EOVMOD SPECIFIED\n         BZ    FILEMSG            BIF   EOVMOD NOT SPECIFIED\n         LA    R1,=AL3(READCMND)  PREPARE TO READ WHAT IMMEDIATELY-CWB-\n         LA    R2,OUTPUT               FOLLOWS THE TAPE MARK.     -CWB-\n         BAL   R4,EXECEXCP        (CHANGED TO EXCP FROM BSAM.)    -CWB-\n         B     FILELOOP           ELSE IT'S A BLOCK, SO JUST GO ON\nFILEPOS  DS    0H                 BACKSPACE PAST 2ND TAPEMARK OF EOV\n         LA    R2,OUTPUT          PTR TO OUTPUT TAPE'S DCB\n         LA    R1,=AL3(BSFCMND)   BACKSPACE PAST ONE TAPEMARK\n         BAL   R4,EXECEXCP\n         LH    R0,COUTFILE        AND\n         BCTR  R0,0               REDUCE CURRENT FILE NO. APPROPRIATELY\n         STH   R0,COUTFILE\nFILEMSG  DS    0H                 PRINT INITIAL OUTPUT POSITION MSG\n         LH    R1,COUTFILE\n         CVD   R1,BADLNGTH\n         OI    BADLNGTH+7,X'0F'\n         UNPK  POSMSG+32(4),BADLNGTH TELL WHERE 1ST FILE OUTPUT GO-CWB-\n         MVC   POSMSG+47(4),POSMSG+32 MOVE INTO EXPLANATORY COMMEN-CWB-\n         BAL   R2,PUTLINE\n         MVC   MSGBUF(L'POSMSG),POSMSG\n         B     NOTBOTH\nEODADOUT LA    R0,1               COUNT\n         AH    R0,COUTFILE        THIS\n         STH   R0,COUTFILE        TAPEMARK (THE 2ND ONE OF AN EOV).\n         CH    R0,JOUTFLSQ        SEE IF UP TO SPECIFIED TAPEMARK\n         BL    TOPT456            BIF NOT UP TO SPECIFIED TAPEMARK\n         TM    COPYFLG,X'02'      SEE IF EOVMOD SPECIFIED\n         BO    FILEPOS            BIF EOVMOD SPECIFIED\n         TM    OPTNO,X'10'        SEE IF 'IGNORE EOV'S UNTIL FLSQ SATIS\n         BO    FILEPOS            BIF IT IS SPECIFIED\n         B     BADEOV             GIVE 'EM HELL, HARRY!\n*\nNOTTAPEO MVC   IDNTAPE+1(6),=C'OUTPUT'   MOVE 'OUTPUT' TO MSG     -HMD-\nNOTTAPEI BAL   R2,PUTLINE         PUT OUT LINE.                   -HMD-\n         MVC   MSGBUF(L'IDNTAPE),IDNTAPE MOVE MSG TO BUFFER       -HMD-\n         B     EXITRC8            RETURN WITH BAD CODE            -HMD-\n*\nTOPT456  TM    OPTNO,X'10'        TEST FOR OPT268435456\n         BO    FILELOOP           AND IF SPECIFIED IGNORE DOUBLE TPMK\nBADEOV   BAL   R2,PUTLINE\n         MVC   MSGBUF(83),=C'0ERROR - EOV INDICATION ENCOUNTERED BEFORE*\n                OUTPUT TAPE FINISHED INITIAL POSITIONING'\n         B     EXITRC8\nEODADBAD BAL   R2,PUTLINE\n         MVC   MSGBUF(092),=C'0ERROR - OUTPUT TAPE HAD TAPEMARK FOLLOWI*\n               NG LOAD POINT, BUT NEITHER LTM OR BLP WAS SPECIFIED'\n*                                 (LENGTH FIELD CORRECTED.)       -CWB-\n         B     EXITRC8\nNOTBOTH  DS    0H\n         L     R12,=A(EXIT+4096)  LOAD 2ND BASE REG FOR MAIN CODE\n         DROP  R12                DROP R12 FOR COMMON STUFF, ONLY R11\n         B     SKIPEOVP           INITIALIZATION ENDS HERE\n         USING TAPESCAN,R12\nNOOUTPUT MVC   BADINPUT+1(6),=C'OUTPUT'\nNOINPUT  BAL   R2,PUTLINE         BAD OR MISSING DD ROUTINE\n         MVC   MSGBUF(L'BADINPUT),BADINPUT\n         B     EXITRC8\n         DROP  R12\nBSFCMND  CCW   X'2F',0,X'70',1    BSF, CC,SLI,SKIP\n         CCW   X'04',SENSBYTS,X'20',24 SENSE SLI UP TO 24 BYTES\nREAD81CM CCW   2,0,X'60',81       SET TO POINT TO RECBUF DYNAMICALLY\n         CCW   4,SENSBYTS,X'20',24 AND SENSE FOR DEBUG\nJFCBOUT  DS    22D\nJOUTFLSQ EQU   JFCBOUT+(JFCBFLSQ-JFCB)\nEXLSTOUT DC    0F'0',X'87',AL3(JFCBOUT)\nGMCTRL   DC    A(RECBUF+136-TRT1)  MINIMUM LENGTH FOR THE GETMAIN\n         DC    A(RECBUF-TRT1+32768) MAXIMUM LENGTH FOR THE GETMAIN\nGMLOCS   DC    2F'0'\nDTYPE    DC    2F'0'              TO HOLD DEVTYPE INFO            -HMD-\nSVR2     DC    F'0'               SAVE AREA FOR R2 OVER TRT       -HMD-\nEXITLIST DS    0F                 INPUT DCB EXIT LIST FOR RDJFCB\n         DC    X'87'              LAST ENTRY AND RDJFCB\n         DC    AL3(JFCBINX)       BUFFER FOR INPUT TAPE'S JFCB\nBADINPUT DC    C'0INPUT  DD STATEMENT MISSING OR INVALID'\nIDNTAPE  DC    C'0INPUT DEVICE IS NOT MAGNETIC TAPE - EXECUTION TERMINAX\n               TED '                                              -HMD-\nPOSMSG   DC    C'0FIRST OUTPUT FILE ON SCRTCH IS 0000 -- LABEL=(0000,BL*\n               P)'                                                -CWB-\nMORECORE DC    C'0WARNING:  TAPESCAN SHOULD HAVE 00000 MORE BYTES OF CO*\n               RE FOR RELIABLE OPERATION; PROCESSING WILL BE ATTEMPTED *\n               ANYWAY.'\nCTABLE   DC    C'0123456789ABCDEF'\nSAVEVOL  DC    CL6' '             SAVE AREA FOR OUTPUT VOLSER     -HMD-\nSVOUTFLG DC    C'N'               C'Y' = 'SAVE OUTPUT VOL LABEL '\nVERIFLG  DC    C'N'\nOUTLTYP  DC    C'0'               FOR SAVING OUTPUT TAPE'S LABEL TYPE\nCOPYFLG  DC    X'00'              COPY AND MOD OPTION REQUEST BITS\nVOLSW    DC    X'00'              SWITCH FOR ALPHANUMERIC TEST    -HMD-\nVOLSWNV  EQU   X'80'              VOLSER NOT ALPHANUMERIC         -HMD-\n         LTORG\n         EJECT\n* COMMON ROUTINES FOR BOTH INITIALIZATION AND MAIN ARE HERE.\nEXIT     MVI   RCINSTR+3,X'00'    NORMAL END, SET RET CODE = 0\nEXITRC8  DS    0H                                                 -CWB-\n         TM    OUTPUT+(DCBOFLGS-IHADCB),DCBOFOPN\n         BZ    CLOSEIN            IF NOT, SKIP CLOSE.             -CWB-\n         LA    R1,EXCPIOB         RESTORE IOB POINTER IN DCB      -CWB-\n         IC    R0,OUTPUT+(DCBIOBA-IHADCB) TO POINT TO TRUE IOB, NOT\n         ST    R1,OUTPUT+(DCBIOBA-IHADCB) BSAM-TYPE IOB PREFIX.\n         STC   R0,OUTPUT+(DCBIOBA-IHADCB)\n         NI    OUTPUT+(DCBOFLGS-IHADCB),X'7F' PRETEND LAST I/O WAS A\n         OI    OUTPUT+(DCBOFLGS-IHADCB),X'04' READ TO AVOID WRITING A\n*                                      TAPE MARK.                 -CWB-\n         CLOSE  OUTPUT            CLOSE OUTPUT TAPE.              -CWB-\nCLOSEIN  TM    INPUT+(DCBOFLGS-IHADCB),DCBOFOPN\n         BZ    NOTOPEN            PROGRAM DIDN'T GET VERY FAR,    -CWB-\n*                                      DID IT.                    -CWB-\n         CLOSE INPUT              CLOSE INPUT TAPE.               -CWB-\nNOTOPEN  DS    0H                                                 -CWB-\n         L     R13,SAVE+4         MAY BYPASS UNRELEASED SYNAD AREA\n         LM    14,12,12(13)\nRCINSTR  LA    15,8\n         BR    R14                FINAL EXIT FROM TAPESCAN IN ALL CASES\nPUTLINE  DS    0H                 GENERAL PRINTING SUBROUTINE, ENTRY 1\n         MVC   MSGBUF,BLANKBUF    CLEAR BUFFER FAST\nPUTLINE2 EX    0,0(R2)            GENERAL PRINTING SUBROUTINE, ENTRY 2\nPUTLINE3 CLI   MSGBUF,C' '        GENERAL PRINTING SUBROUTINE, ENTRY 3\n         BE    LNCOUNT-4          BIF CARR. CTRL  CHAR IS A BLANK\n         CLI   MSGBUF,C'0'        SEE IF CARRIAGE CONTROL CHAR IS ZERO\n         BE    C0                 BIF IS A ZERO\n         LA    R0,3               NO BLANK OR ZERO, MUST BE A MINUS\n         B     LNCOUNT\nC0       LA    R0,2               COUNT TWO LINES\n         B     LNCOUNT\n         LA    R0,1               COUNT ONE LINE\nLNCOUNT  A     R0,LINENO\n         ST    R0,LINENO\n         C     R0,LINECNT         COMPARE WITH MAX LINES          -HMD-\n         BNH   SAMEPAGE\n         MVC   PAGECHAR,=X'40202120' EDIT PATTERN\n         L     R1,PAGECNT         INCREMENT THE PAGE COUNT.       -CWB-\n         LA    R1,1(R1)                (DECIMAL INSTRUCTIONS      -CWB-\n         ST    R1,PAGECNT              REPLACED BY BINARY.)       -CWB-\n         CVD   R1,DBLPAGE         MAKE IT PRINTABLE.              -CWB-\n         ED    PAGECHAR,DBLPAGE+6                                 -CWB-\n         MVI   LINENO+3,X'00'\n         PUT   SYSPRINT,PAGEHDR\n         SPACE 1                                               HD AUG86\n         CLC   =C'VTOC--',0(R2)   ARE WE IN VTOC ROUTINE?      HD AUG86\n         BNE   SAMEPAGE           NO, CONTINUE                 HD AUG86\n         MVC   HOLDBUF,BLANKBUF   CLEAR BUFFER FAST            HD AUG86\n         L     R1,=A(VTOCHED2)    GET HEADER TEXT AND MOVE     HD AUG86\n         MVC   HOLDBUF(L'VTOCHED2),0(R1)                       HD AUG86\n         MVI   LINENO+3,X'04'     INDICATE 3 LINES             HD AUG86\n         PUT   SYSPRINT,HOLDBUF   PUT THE LINE OUT             HD AUG86\n         MVI   MSGBUF,C'0'        INDICATE SKIP 1 LINE         HD DEC86\n         SPACE 1                                               HD AUG86\nSAMEPAGE PUT   SYSPRINT,MSGBUF\n         B     6(R2)              RETURN FROM PUTLINE SUBROUTINE\nPAGECHK  DS    0H                 LINE RESERVATION SUBROUTINE\n         A     R0,LINENO          ADD LINES TO BE RESERVED TO LINE NO\n         C     R0,LINECNT         COMPARE TO MAXIMUM LINE  NUMBER -HMD-\n         BCR   13,R2              RETURN IF CURRENT PAGE HAS ENUF ROOM\n         MVI   LINENO+3,0         ZERO LINE COUNTER\n*        AP    PAGEPACK,=P'1'     COUNT NEW PAGE                  -CWB-\n         MVC   PAGECHAR,=X'40202120'\n*        ED    PAGECHAR,PAGEPACK                                  -CWB-\n         L     R1,PAGECNT         INCREMENT THE PAGE COUNT.       -CWB-\n         LA    R1,1(R1)                (DECIMAL INSTRUCTIONS      -CWB-\n         ST    R1,PAGECNT              REPLACED BY BINARY.)       -CWB-\n         CVD   R1,DBLPAGE         MAKE IT PRINTABLE.              -CWB-\n         ED    PAGECHAR,DBLPAGE+6                                 -CWB-\n         PUT   SYSPRINT,PAGEHDR\n         BR    R2\n*BADREC  WTL   'BAD (0) BLOCK SIZE' (OFTEN MEANS TAPE OFF END OF REEL)\nBADREC   DS    0H                                               -CWB-\n         BAL   R2,PUTLINE\n         MVC   MSGBUF(L'BADRECM),BADRECM\n         B     EXITRC8\nSYNERR   SYNADAF ACSMETH=BSAM\nSYNERR2  ST    R14,SVR14\n         CH    R0,=H'4'           CHECK SYNADAF'S RETURN CODE\n         BNE   DIRECT\n         LH    R14,12(R1)         LOAD NO. OF BYTES READ\n         CVD   R14,BADLNGTH\n         OI    BADLNGTH+7,X'0F'\n         UNPK  32(5,R1),BADLNGTH\n         MVC   8(24,R1),=C'0I/O ERROR - BYTES READ='\nDIRECT   BAL   R2,PUTLINE         PRINT SYNAD ERROR MESSAGE\n         MVC   MSGBUF(120),8(R1)\n         LA    R14,1\n         A     R14,ERRCOUNT       INCREMENT ERROR COUNT\n         ST    R14,ERRCOUNT\n         C     R14,SYNADNO        COMPARE ERROR COUNT WITH ERROR LIMIT\n         BH    TOOMANY            PRINT MSG & EXIT IF ERR LIM EXCEEDED\n         SYNADRLS\n         L     R14,SVR14\n         BR    R14\nTOOMANY  BAL   R2,PUTLINE         YOU SHOULD PROBABLY SET ERRLIM TO 0 -\n         MVC   MSGBUF(55),=C'0TAPESCAN TERMINATING DUE TO EXCESSIVE I/O*\n                ERROR COUNT.'\n         B     EXITRC8            FOR TAPE COPYING OPERATIONS.\nEXECEXCP DS    0H                 EXCP SUBROUTINE, R2=PTR TO DCB, AND  *\n                                  R1=PTR TO 3-BYTE ADCON WHICH POINTS  *\n                                  TO CHANNEL PROGRAM.\n         ST    R2,EXCPDCB         SAVE DCB POINTER.               -CWB-\n         L     R2,DCBIOBA-IHADCB(R2) GET PTR TO A BSAM IOB PREFIX\n         MVC   STARTSAV(3),IOBSTART+9(R2) SAVE PTR TO BSAM'S CCW\n         MVC   IOBSTART+9(3,R2),0(R1) MOVE IN PTR TO CHAN PROG\n         LA    R1,4(R2)           LOAD PTR TO ECB IN PREFIX\n         ST    R1,IOBECBPT+8(R2)  STORE PTR TO ECB\n         XC    0(4,R1),0(R1)      CLEAR ECB IN IOB PREFIX\n         EXCP  8(R2)              EXCP USING BSAM'S IOB AND ECB\n         WAIT  ECB=4(R2)\n         L     R1,IOBSTART+8(R2)  RESTORE CCW POINTER.            -CWB-\n         MVC   IOBSTART+9(3,R2),STARTSAV RESTORE PTR TO BSAM'S CCW\n         CLI   4(R2),X'7F'        SEE IF EXCP WORKED PERFECTLY\n         BCR   8,R4               RETURN IF IT DID\n         CLI   4(R2),X'41'        DID PERMANENT ERROR OCCUR?      -CWB-\n         BNE   DOSYN              OTHER ERRORS BRANCH.            -CWB-\n         CLI   0(R1),X'02'        WAS COMMAND CODE A READ?        -CWB-\n         BNE   DOSYN              IF NOT, DO ERROR.               -CWB-\n         LH    R1,6(R1)           GET COMMAND LENGTH.             -CWB-\n         CH    R1,22(R2)          IS RESIDUAL LENGTH THE SAME?    -CWB-\n         BNE   DOSYN              IF NOT, BRANCH FOR ERROR.       -CWB-\n         L     R1,EXCPDCB         ELSE, MUST BE TAPE MARK READ.   -CWB-\n         C     R1,=A(INPUT)       IS THIS THE INPUT DCB?          -HMD-\n         BNE   LOADEOD            NO, LOAD THE EODAD FROM THE DCB -HMD-\n         L     R1,EODADDR         GET PREDEFINED EOD ADDRESS      -HMD-\n         BR    R1                 GO TO IT                        -HMD-\nLOADEOD  L     R1,DCBEODAD-IHADCB(R1) GET EOD FROM DCB            -HMD-\n         BR    R1                 GO TO IT                        -CWB-\nDOSYN    DS    0H                                                 -CWB-\n         LA    R1,8(R2)           GET PTR TO IOB FOR SYNADAF MACRO\n         SYNADAF ACSMETH=EXCP     WORKS OK EVEN THO IOBSTART RESTORED\n         BAL   R14,SYNERR2        NOW DO REST OF ANALYSIS WITH SYNERR\n         BR    R4\n         EJECT\n* CONSTANTS AND STORAGE FOR THIS SECTION\nSAVE     DS    9D\nJFCBINX  DS    22D                176 BYTES\nBADLNGTH DC    D'0'\nDBLPAGE  DC    D'0'               CVD WORK AREA FOR PAGE NUMBER.  -CWB-\nFSMCMND  CCW   X'3F',0,X'30',1    FWRD SPACE FILE, SKIP/SLI\nRWNDCMND CCW   7,0,X'60',1        REWIND TAPE, CHAIN CMND, SLI\nSENSCMND CCW   4,SENSBYTS,X'20',24 SENSE UP TO 24 BYTES, SLI\nREADCMND CCW   X'02',0,X'20',32767  READ COMMAND.                 -CWB-\nREADLENG EQU   READCMND+6           READ LENGTH FIELD.            -CWB-\nWRTCMND  CCW   1,0,X'20',0        PTR TO RECBUF UPDATED AFTER GM. -CWB-\nWTMCMND  CCW   X'1F',0,X'60',1    WRITE TM, SLI, CC TO SENSE.     -CWB-\n         CCW   X'04',SENSBYTS,X'20',1  SENSE CHAINED FOR DEV END. -CWB-\n*                                 ABOVE FIELDS MOVED HERE FROM    -CWB-\n*                                      LATTER PART OF PROGRAM TO  -CWB-\n*                                      CORRECT ADDRESSABILITY.    -CWB-\nSENSBYTS DC    3XL8'00'           BUFFER FOR SENSE BYTES\nAMSGBP46 DC    A(0)               A(MSGBUF+46) SET UP DURING INIT -CWB-\nAMSGBP72 DC    A(0)               A(MSGBUF+72) AS ABOVE.          -CWB-\nERRCOUNT DC    F'0'               NUMBER OF SYNAD EXITS TAKEN (I/O ERRS\nOPTNO    DC    F'0'               BIT ORIENTED OPTIONS - MISC/DEBUG\nLINENO   DC    F'90'                                              -CWB-\nEODADDR  DC    F'0'               FAKE END OF DATA ADDRESS        -HMD-\nLISTNO   DC    F'4'               NUMBER OF BLKS TO LIST PER DATASET\nSKIPTMNO DC    F'0'\nMAXTMNO  DC    F'32767'\nSKPEOVNO DC    F'0'\nMAXEOVNO DC    F'1'\nSYNADNO  DC    F'50'              MAX SYNAD EXITS BEFORE TERMINATION\nREADNO   DC    F'3'               SET TO ONE  FOR NOSUMMARY OPTION\nPAGECNT  DC    F'0'               PAGE COUNTER.                   -CWB-\nLINECNT  DC    F'&LINECNT'        LINES/PAGE                      -HMD-\nSVR14    DC    F'0'                                               -CWB-\nCOUTFILE DC    H'1'               CURRENT OUTPUT FILE SEQ. NO.\n*PAGEPACK DC   PL2'0'             (REPL'D BY PAGECNT)             -CWB-\nBADRECM  DC    C'0BAD (0) BLOCK SIZE ENCOUNTERED'\nERRSUMSG DC    C'0NUMBER OF I/O ERRORS=XXXXX'\nPAGEHDR  DC    CL60'1TAPESCAN 5.0 - APL-SMDC TAPE ANALYSIS AND COPYING +\n               PROGRAM  '                                   -CWB-\nDATERSLT DC    CL8'MM/DD/YY'      DATE WILL BE PLACED HERE\n         DC    CL2'  '\nTIMERSLT DC    XL11'4021207A20207A20204B20'\n         DC    C'   INPUT VOL='                                   -CWB-\nDDVOL    DC    CL6'VVVVVV'                                        -CWB-\n         DC    CL12'    DENSITY='                                 -SRH-\nTAPEDENS DC    CL1'X'\n         DC    CL2' ('\nPRTDENS  DC    CL4' XXX'\n         DC    CL4'BPI)'\n         DC    CL6'  PAGE'\nPAGECHAR DC    X'40202120'        EXAMPLE EDIT PATTERN FOR PAGE NUMBER\n         DC    CL12'           '  PAGE TRAILING BLANKS\nJFCLTSV  DC    X'FF'              FOR SAVING JFCBLTYP BYTE\nSENSW    DC    X'00'              SENS INFO SWITCH                *SRH*\nEXCPIOBP DC    0D'0',A(*)         IOB BSAM-TYPE PREFIX.           -CWB-\nEXCPECB  DC    F'0'                                               -CWB-\nEXCPIOB  DC    B'01000010',XL3'0',A(EXCPECB,0),H'0'  IOB PROPER.  -CWB-\nRESIDL   DC    H'0'               RESIDUAL COUNT.                 -CWB-\nEXCPCCW  DC    A(0)               ADDRESS OF CHANNEL PROGRAM.     -CWB-\n         DC    A(OUTPUT,0,0)                                      -CWB-\nEXCPDCB  DC    A(0)               DCB ADDRESS SAVE AREA.          -CWB-\nSTARTSAV DC    C'SAV'             FOR SAVING BSAM'S IOBSTART FIELD\nWRTFLG   DC    X'00'              TWO BIT COPY FLAG, X'03'=WRITE BLOCK\nCOUNTFLG DC    C'Y'               COUNT OPTION DEFAULT VALUE\nHEXFLG   DC    C'Y'\nSUMFLG   DC    C'Y'\nVTOCFLAG DC    C'N'               VTOC ONLY FLAG               HD OCT88\n         EJECT\nSYSPRINT DCB   DDNAME=SYSPRINT,MACRF=PM,DSORG=PS,RECFM=FBA,            *\n               BLKSIZE=3458,LRECL=133\n         EJECT\n* MAXIMUM BLKSIZE IS 32760                                     HD DEC86\nINPUT    DCB   DDNAME=INPUT,MACRF=RC,DSORG=PS,RECFM=U,DEVD=TA,         *\n               BLKSIZE=32760,EODAD=EODS,SYNAD=SYNERR,EXLST=EXITLIST\n         EJECT\nOUTPUT   DCB   DDNAME=OUTPUT,MACRF=(E),EODAD=EODADBAD,DSORG=PS,   -CWB-*\n               IOBAD=EXCPIOB,DEVD=TA,EXLST=EXLSTOUT               -CWB-\n         EJECT\n         LTORG\n         EJECT\n* MAIN LOOP AND MAIN LINE CODE STARTS HERE\nSKIPEOVP DS    0H                 SKIPEOV OPTION CONTROL ROUTINE\n         USING EXIT+4096,R12\n         SR    R3,R3              CLEAR R3 TILL WE GET A VTOC     -CWB-\n*                                      BLOCK ENTRY.               -CWB-\n         CLC   CEOVNO,SKPEOVNO\n         BNL   SKIPTMPR\n         SR    R4,R4              ZERO TO GET GOOD BLK CNT EVEN IF     *\n                                  SKIPTM OR SKIPEOV USED.\n         SR    R8,R8              (RE)-ZERO BYTE COUNTER\n         ST    R8,BLKCNT          (RE)-ZERO BLKCNT\n         BAL   R5,READER          CHECK FOR DOUBLE TAPEMARK\n         C     R7,=F'80'          SEE IF BLKSIZE=80 (LIKE ALL LABELS)\n         BNE   CONTROL            BIF BLKLNGTH NE 80 (I.E., IT'S NOT A *\n                                                    LABEL).\n         C     R4,=F'1'           SEE IF THIS IS THE 1ST BLK AFTER A   *\n                                  TAPEMARK OR THE LOAD POINT.\n         BNE   CONTROL            BIF IT ISN'T THE FIRST\n         CLC   RECBUF(4),=C'EOV1'\n         BNE   CONTROL\n         MVI   EOV1FLG,C'Y'       SET 'EOV PENDING' FLAG TO 'YES'\n         B     CONTROL            POSITION PAST TAPEMARK AND GOTO EODS\nSKIPTMPR CLC   CTPMKNO,SKIPTMNO   SKIPTM OPTION CONTROL ROUTINE\n         BL    SKIPEOVP+12\n         SR    R8,R8              CLEAR CTR FOR TOTAL BYTES ON TAPE\n         ST    R8,BLKCNT          (RE)-ZERO BLKCNT\n         OI    WRTFLG,X'02'       OR IN  'ALL TM & EOV SKIPPING DONE'\n         L     R1,CTPMKNO         GET TAPEMARK COUNT.             -CWB-\n         SR    R0,R0              CALCULATE NUMBER OF SL FILES    -CWB-\n         D     R0,=F'3'                WE HAVE SKIPPED.           -CWB-\n         ST    R1,TRUESEQN        SAVE AS LABEL= VALUE.           -CWB-\n         SR    R3,R3              CLEAR R3 TILL WE GET A VTOC     -CWB-\n*                                      BLOCK ENTRY.               -CWB-\nPROCESS  DS    0H                 TOP OF OUTER MAIN LOOP\n         SR    R4,R4              ZERO BLK COUNTER\n         ST    R4,FILEBYTS        CLEAR FILE BYTE COUNT.          -CWB-\n         ST    R4,MAX             RESET MAX BLKSIZE WATCHER\n         MVC   MIN,=F'32767'      RESET MIN BLKSIZE WATCHER\n         MVC   PREVHDR1,HDR1FLAG     SAVE PREV LABEL INDICATION.  -CWB-\n         MVI   HDR1FLAG,C'N'             ASSUME NO HDR1 LABEL.    -CWB-\n         MVI   LABLFLAG,C'N'      ASSUME THIS FILE IS NOT A LABEL.-CWB-\nPROCESS2 DS    0H                 TOP OF MAIN INNER LOOP\n         C     R4,READNO          SEE IF BLK IS TO BE READ FOR SUMMARY\n         BNL   OTHRCHKS\n         BAL   R5,READON          READ BLK, CALC LENGTH, DO MIN/MAX\n         C     R7,=F'80'          SEE IF BLKSIZE=80 (LIKE ALL LABELS)\n         BNE   NOLABEL            BIF BLKLNGTH NE 80 (I.E., IT'S NOT A *\n                                                    LABEL).\n         C     R4,=F'1'           SEE IF THIS IS THE 1ST BLK AFTER A   *\n                                  TAPEMARK OR THE LOAD POINT.\n         BNE   *+18               BIF IT ISN'T THE FIRST\n         CLC   RECBUF(4),=C'EOV1'\n         BNE   *+8\n         MVI   EOV1FLG,C'Y'       SET 'EOV PENDING' FLAG TO 'YES'\n         CLI   SUMFLG,C'Y'        SEE IF SUMMARY OPTION IS YES\n         BE    CHKLABEL           DO SUMMARY PROCESSING IF SO\nNOLABEL  C     R4,LISTNO\n         BNH   LISTER             BRANCH TO LIST BLOCK\n         B     PROCESS2\nOTHRCHKS C     R4,LISTNO\n         BNL   CHKCNT             BRANCH IF EVERYTHING ALREADY LISTED\n         BAL   R5,READON\nLISTER   BAL   R5,LISTON\n         B     PROCESS2\nCHKCNT   CLI   COUNTFLG,C'N'\n         BE    CONTROL\n         BAL   R5,READER          TOP    OF MAIN COUNTBLK OPTION LOOP\n         B     *-4                BOTTOM OF MAIN COUNTBLK OPTION LOOP\nCONTROL  CNTRL INPUT,FSM          FORWARD SPACE TO NEXT TAPEMARK,      *\n                                  THEN BACKSPACE OVER IT.\n         SR    R4,R4              RE-ZERO CURRENT BLK COUNT\n         ST    R4,MAX             ZERO MAX TO INHIBIT BLK COUNT MSG\n         SR    R8,R8              IS THIS NECESSARY?\n         BAL   R5,READON          NOW READ THE TAPEMARK\n         BAL   R5,LISTON          RETURN HERE IF NO TAPEMARK - ERROR!\n         BAL   R2,PUTLINE         PRINT ERR MSG\n         MVC   MSGBUF(37),=C'0ERROR - EXPECTED TAPEMARK NOT FOUND.'\n         B     EXITRC8\nREADON   DS    0H\n         MVC   RECBUF,BLANKBUF    CLEAR FIRST PART OF BUFFER FAST\nREADER   XC    TAPE(4),TAPE       CLEAR ECB\n         LA    R2,RECBUF\n         READ  TAPE,SF,INPUT,(R2),'S' READ A BLK OR TAPEMARK (WE HOPE)\n         CHECK TAPE\n         MVI   MARK,X'00'         SET TO X'FF' WHEN TAPEMARK READ (EOD)\n         LA    R4,1(R4)           COUNT THE BLK JUST READ FOR DATASET\n         L     R6,TAPE+16         GET PTR TO IOB\n         LH    R6,14(R6)          GET RESIDUAL COUNT\n         LH    R7,INPUT+(DCBBLKSI-IHADCB)\n         SR    R7,R6              COMPUTE BLOCK'S LENGTH\n         BNH   BADREC             BIF ZERO OR NEG RECORD LENGTH\n         L     R1,FILEBYTS        ADD BLOCK LENGTH TO TOTAL       -CWB-\n         AR    R1,R7                   BYTE COUNT FOR THIS        -CWB-\n         ST    R1,FILEBYTS             FILE.                      -CWB-\n         AR    R8,R7              COUNT ALL BYTES READ DURING RUN\n         C     R7,MAX             COMPARE CURRENT BLK'S SIZE WITH MAX\n         BNH   *+8                SKIP IF OLD MAX IS BIGGER\n         ST    R7,MAX             STORE NEW MAX BLK LENGTH\n         C     R7,MIN             COMPARE BLK'S SIZE WITH PREVIOUS MIN\n         BNL   *+8                SKIP IF OLD MIN IS SMALLER\n         ST    R7,MIN             STORE NEW MINIMUM BLOCK LENGTH\n         SPACE 1                                               HD DEC86\n         TM    SENSW,1        DID WE GET THE SENS INFO?\n         BO    DENEND         YEP,GO ON\n         LA    R1,=AL3(SENSCMND) POINT TO SENS CMDS\n         LA    R2,INPUT       POINT TO INPUT DATASET\n         LR    R6,R4          SAVE R4\n         BAL   R4,EXECEXCP    DO SENS EXCP\n         LR    R4,R6          RESTORE R4\n         OI    SENSW,1        TELL'M WE BEEN HERE BEFORE\n         SPACE 1                                               HD DEC86\nRD3480A  CLI   FLAG3480,C'Y'  ARE WE PROCESSING A 3480?        HD DEC86\n         BNE   RD3480Z        NO, CHECK 1600/6250              HD DEC86\n         MVI   TAPEDENS,C'5'  SELECT DENSITY=5                 HD NOV86\n         MVC   PRTDENS(4),=CL4' 38K'                           HD JAN89\n         B     DENEND         MOVE TEXT AND END DENSITY CHK    HD NOV86\nRD3480Z  DS    0H                                              HD DEC86\n         SPACE 1                                               HD DEC86\n         TM    SENSBYTS+3,4   P.E. = 1600 BPI\n         BNO   TRY6250        NOPE, TRY 6250BPI\n         MVI   TAPEDENS,C'3'      SET DENS FOR 1600 BPI\n         MVC   PRTDENS(4),=CL4'1600'\n         B     DENEND\nTRY6250  L     R2,(DCBDEBAD-IHADCB)+INPUT GET DEB PTR\n         L     R2,DEBUCBAD(R2)    GET UCB PTR\n         TM    16(R2),2           UCBTYP = 6250BPI?\n         BNO   TRY800             NOPE, TRY 800 BPI\n         MVI   TAPEDENS,C'4'      SET DEN FOR 6250BPI\n         MVC   PRTDENS(4),=CL4'6250'\n         B     DENEND\nTRY800   TM    INPUT+(DCBDEN-IHADCB),B'10000011' 800BPI?\n         BNO   TRY556             TRY 556BPI\n         MVI   TAPEDENS,C'2'      SET DENS\n         MVC   PRTDENS(4),=CL4' 800'  TO 800 BPI\n         B     DENEND             BRANCH AROUND 556 CODE         -HMD-\nTRY556   DS    0H ANYONE STILL USING THESE TURKEYS? DO YOUR OWN THING\n* I AM, AND WHOSE CALLING THEM TURKEYS, SUCKER                   -HMD-\n         MVI   TAPEDENS,C'1'      DEN=1 FOR 556 BPI              -HMD-\n         MVC   PRTDENS(4),=CL4' 556'  MOVE DEN TO PRINT          -HMD-\nDENEND   DS    0H\n         CLI   WRTFLG,X'03'       SEE IF SHOULD WRITE TO OUTPUT TAPE\n         BNE   READEREX\n         STH   R7,WRTCMND+6       STORE BLK LENGTH IN WRITE CCW\n         LA    R1,=AL3(WRTCMND)\n         LA    R2,OUTPUT\n         LR    R6,R4              SAVE R4 (CURRENT FILE BLK CNT)\n         BAL   R4,EXECEXCP\n         LR    R4,R6              RESTORE R4 (CURRENT FILE BLK COUNT)\nREADEREX NI    WRTFLG,X'03'       ZERO OFF POSSIBLE 'NOVOLSER' BIT\n         BR    R5                 RETURN FROM READON SUBROUTINE\nLISTON   DS    0H                                              HD JAN89\n         CLI   VTOCFLAG,C'Y'      VTOC ONLY?                   HD JAN89\n         BE    VTOCBYPD           YES..BYPASS PRINT            HD JAN89\n         MVI   MSGBUF,C'0'\n         LA    R0,4               PREPARE TO RESERVE 4 LINES\n         BAL   R2,PAGECHK         RESERVE 4 LINES\n         BAL   R2,PUTLINE2        LIST THE FIRST PART OF THE BLOCK\n         MVC   MSGBUF+1(132),RECBUF\nHEXON    DS    0H                                              HD JAN89\n         CLI   VTOCFLAG,C'Y'      VTOC ONLY?                   HD JAN89\n         BE    VTOCBYPD           YES, BYPASS PRINT            HD JAN89\n         CLI   HEXFLG,C'N'        SEE IF HEXLIST SPECIFIED\n         BCR   8,R5               BER R5 RETURN IF HEXLIST NOT SPECIFID\n         MVC   MSGBUF+1(132),RECBUF\n         MVI   TRINT1+1,131       SET UP DEFAULT  OF MOVE    =132 BYTES\n         MVI   TRINT2+1,131       SET UP DEFAULT  OF MOVE    =132 BYTES\n         C     R7,=F'132'         SEE IF LENGTH OF BLK EXCEEDS 1 LINE\n         BH    TRINT1             BRANCH IF LE 132 BYTES\n         BCTR  R7,0               CONVERT BLK LENGTH TO MACHINE LENGTH\n         STC   R7,TRINT1+1        AND STORE IN 1ST TR INSTRUCTION\n         STC   R7,TRINT2+1        AND IN THE SECOND ONE\nTRINT1   TR    MSGBUF+1(132),TRT1 MODIFIED INSTRUCTION (LENGTH)\n         MVI   MSGBUF,C' '        SET CARRIAGE CONTROL\n         BAL   R2,PUTLINE3        PRINT FIRST LINE OF HEX\n         DC    C'TRT111'\n         MVC   MSGBUF+1(132),RECBUF\nTRINT2   TR    MSGBUF+1(132),TRT2 MODIFIED INSTRUCTION (LENGTH)\n         BAL   R2,PUTLINE3        PRINT SECOND LINE OF HEX\n         DC    C'TRT222'          FILLER\nVTOCBYPD BR    R5                 RETURN FROM LISTON OR HEXON SUBR\nCHKLABEL DS    0H\n         MVI   LABLFLAG,C'Y'      NOTE WE HAVE A LABEL.           -CWB-\n         MVI   MSGBUF,C'0'\n         MVC   MSGBUF+1(132),RECBUF\n         CLC   RECBUF(4),=C'HDR1'\n         BE    HDR1\n         CLC   RECBUF(4),=C'EOF1'\n         BE    EOF1EOV1\n         CLC   RECBUF(4),=C'HDR2'\n         BE    HDR2\n         CLC   RECBUF(4),=C'EOF2'\n         BE    EOF2EOV2\n         CLC   RECBUF(4),=C'VOL1'\n         BE    VOL1\n         CLC   RECBUF(4),=C'EOV1'\n         BE    EOF1EOV1\n         CLC   RECBUF(4),=C'EOV2'\n         BE    EOF2EOV2\n         MVI   LABLFLAG,C'N'      OOPS, NO LABEL.                 -CWB-\n         B     NOLABEL            IT'S NOT A LABEL AFTER ALL\nHDR1     DS    0H\n         CLI   VTOCFLAG,C'Y'      VTOC ONLY?                   HD JAN89\n         BE    VTOCBYP1           YES, BYPASS THIS MESS        HD JAN89\n         MVI   HDR1FLAG,C'Y'      NOTE HEADER LABEL FILE.         -CWB-\n         LA    R0,14              PREPARE TO RESERVE 14 LINES\n         BAL   R2,PAGECHK\n         MVC   MSGBUF,BLANKBUF    CLEAR PRINT BUFFER FAST\n         MVI   MSGBUF+43,C'*'     MOVE IN SEED FOR FILL\n         MVC   MSGBUF+44(47),MSGBUF+43 FILL IN REST OF ASTERISKS\n         MVI   MSGBUF,C'-'\n         BAL   R2,PUTLINE3        PRINT LINE OF ASTERISKS\n         DC    C'HDR222'\n         MVI   MSGBUF,C' '        SET CARRIAGE CONTROL TO BLANK\n         BAL   R2,PUTLINE3        PRINT 2ND LINE OF ASTERISKS\n         DC    C'HDR333'\n         MVC   MSGBUF+45(44),=C' DATASET SEQUENCE NUMBER 0000  (LABEL=0*\n               000) '\n         MVC   MSGBUF+70(4),RECBUF+31  MOVE IN DATASET SEQUENCE NUMBER\n*        MVC   MSGBUF+83(4),RECBUF+31  AND MOVE IT IN AGAIN       -CWB-\nVTOCBYP1 DS    0H                                              HD JAN89\n         L     R5,CURRVTOC        POINT TO CURRENT VTOC BLOCK.    -CWB-\n         CLI   0(R5),VTOCEPB      IS THIS BLOCK FULL?             -CWB-\n         BL    NXTENTRY           IF NOT, BRANCH.                 -CWB-\n         GETMAIN  R,LV=VTOCBLSZ   ELSE, GET CORE FOR ANOTHER BLOCK-CWB-\n         ST    R1,0(R5)           SAVE FOREWARD POINTER.          -CWB-\n         MVI   0(R5),VTOCEPB      REINSERT THE ENTRY COUNT.       -CWB-\n         LR    R5,R1              MAKE NEW BLOCK CURRENT.         -CWB-\n         ST    R1,CURRVTOC                                        -CWB-\n         LA    R3,8(R5)           STEP OVER INITIAL DOUBLEWORD.   -CWB-\n*                                      R3 POINTS AT CURRENT ENTRY.-CWB-\n         SR    R0,R0              CLEAR ENTRY COUNT AND FORWARD   -CWB-\n         ST    R0,0(R5)                POINTER IN NEW BLOCK.      -CWB-\n         MVI   0(R5),1            CHANGE ENTRY COUNT TO 1.        -CWB-\n         B     CLEARVEN           GO CLEAR THE FIRST ENTRY.       -CWB-\nNXTENTRY LA    R3,VTOCSIZE(R3)    ADVANCE TO NEXT VTOC ENTRY.     -CWB-\n         SR    R1,R1              INCREMENT ENTRY COUNT.          -CWB-\n         IC    R1,0(R5)                                           -CWB-\n         LA    R1,1(R1)                                           -CWB-\n         STC   R1,0(R5)                                           -CWB-\n         USING VTOC,R3            R3 WILL ALWAYS POINT TO ENTRY.  -CWB-\nCLEARVEN MVC   VTOC(VTOCSIZE),BLANKBUF  CLEAR OUT VTOC ENTRY.     -CWB-\n         L     R1,TRUESEQN        ADVANCE THE TRUE DATA SET       -CWB-\n         LA    R1,1(R1)                SEQUENCE NUMBER COUNT.     -CWB-\n         ST    R1,TRUESEQN                                        -CWB-\n         L     R1,TRUESEQN        USE TRUE SEQUENCE NUMBER (AS    -CWB-\n         CVD   R1,DBLWORK              OPPOSED TO WHAT THE LABEL  -CWB-\n         OI    DBLWORK+7,X'0F'         SAYS) IN THE LABEL=XXXX    -CWB-\n         UNPK  MSGBUF+83(4),DBLWORK    PART OF THE MESSAGE.       -CWB-\n         MVC   VTOCSEQN,MSGBUF+83 ALSO USE IT IN VTOC.            -CWB-\n         CLI   VTOCFLAG,C'Y'           VTOC ONLY?              HD JAN89\n         BE    VTOCBYP2                YES, FILL IN LABEL REC  HD JAN89\n         BAL   R2,PUTLINE3        PRINT MSG BETWEEN TWO LINES OF STARS\n         DC    C'HDR444'\n         MVC   MSGBUF+44(47),MSGBUF+43 REFILL WITH ASTERISKS\n         BAL   R2,PUTLINE3\n         DC    C'HDR555'\n         BAL   R2,PUTLINE3\n         DC    C'HDR666'\n         MVC   MSGBUF+40(56),BLANKBUF CLEAR ASTERISKS TO BLANKS\n         MVC   MSGBUF+1(80),RECBUF\n         MVC   MSGBUF+82(35),=C'1ST HEADER LABEL RECORD,  FILE NO. '\nVTOCBYP2 DS    0H                                              HD JAN89\n         MVC   MSGBUF+116(4),RECBUF+31 MOVE IN DATASET SEQUENCE #\n         MVC   DATASEQ,RECBUF+31  SAVE DATASET SEQUENCE #\n         MVI   MSGBUF,C'-'        CCTRL FOR 2 BLANK LINES, THEN PRINT\n         CLI   VTOCFLAG,C'Y'      VTOC ONLY?                   HD JAN89\n         BE    VTOCBYP3           YES, BYPASS PRINT            HD JAN89\n         BAL   R2,PUTLINE3\n         DC    C'HDR111'\n         BAL   R5,HEXON           PRINT HEX IF OPTION IS YES\nVTOCBYP3 DS    0H                                              HD JAN89\n         CLC   RECBUF+54(6),=C'000000' SEE IF BLK CNT = 0\n         BNE   DOBLKCNT\n         MVC   MSGBUF,BLANKBUF\n         MVI   SWT2,X'01'               MOVE IN HEADR CODE        -HMD-\nLBL1     DS    0H\n         MVC   MSGBUF+6(7),=C'DSNAME='\n         MVC   MSGBUF+13(17),RECBUF+4\n         LTR   R3,R3                  DO WE HAVE A VTOC ENTRY?    -CWB-\n         BZ    *+10                   IF NOT, SKIP DSN SAVE.      -CWB-\n         MVC   VTOCDSN,RECBUF+4   SAVE DSN FOR VTOC.              -CWB-\n         MVC   MSGBUF+32(14),=C'CREATION DATE=' (MOVED OVER)      -CWB-\nCHKDATE  DS    0H                 CHECK FOR VALID DATA            -HMD-\n         L     R6,=A(NUBTABL)     LOAD TABLE ADDRESS              -HMD-\n         CLC   =C'00000',RECBUF+42 CHECK FOR ZERO CREATION DATE   -HMD-\n         BE    BADCREDT           BAD CREATION DATE               -HMD-\n         TRT   RECBUF+42(5),0(R6) CHECK FOR NUMERICS              -HMD-\n         BZ    DATEOK1            DATE IS OK                      -HMD-\nBADCREDT DS    0H                 CREATION DATE IS BAD            -HMD-\n         L     R1,AMSGBP46        POINT TO MESSAGE BUFFER         -HMD-\n         MVC   0(8,R1),=C'INVALID ' MOVE INVALID TO MSG           -HMD-\n         OI    SWT2,C'0'          INDICATE BAD DATE               -HMD-\n         B     CDATBAD            SKIP DATE CONVERSION         HD JAN89\nDATEOK1  DS    0H                                                 -HMD-\n         PACK  BADLNGTH+4(4),RECBUF+42(5)   CONVERT FOR DATE SUBROUTINE\n         L     R2,BADLNGTH+4\n         LA    R1,AMSGBP46        PTR TO PTR TO DATE SUBR'S RSULT -CWB-\n         L     R15,=V(DATE)       IRSS DATECONV SUBROUTINE\n         BALR  R14,R15            DATE SUBROUTINE\nCDATBAD  DS    0H                                              HD JAN89\n         LTR   R3,R3              DO WE HAVE A VTOC ENTRY?        -CWB-\n         BZ    *+10               IF NOT, SKIP SAVE.              -CWB-\n         MVC   VTOCCREA,MSGBUF+46 SAVE DATE FOR VTOC.             -CWB-\n         CLC   RECBUF+48(5),=C'00000'  DOES TAPE HAVE EXP DATE?   -HMD-\n         BE    EXPIRED            IF NOT, BRANCH.                 -CWB-\n         MVC   MSGBUF+56(16),=C'EXPIRATION DATE='  ELSE, LIST IT. -CWB-\n         TRT   RECBUF+48(5),0(R6)    SEE IF VALID EXPDT           -HMD-\n         BZ    DATEOK2            YES, IS VALID                   -HMD-\nBADEXPDT L     R1,AMSGBP72        GET POINTER TO MSG BUFFER       -HMD-\n         MVC   0(8,R1),=C'INVALID ' MOVE INVALID TO MSG BUFFER    -HMD-\n         OI    SWT2,C'0'          INDICATE ERROR                  -HMD-\n         B     EDATBAD            FORGET DATE CONVERSION          -HMD\nDATEOK2  PACK  BADLNGTH+4(4),RECBUF+48(5)                         -CWB-\n         L     R2,BADLNGTH+4      DO CONVERSION AS BEFORE.        -CWB-\n         LA    R1,AMSGBP72                                        -CWB-\n         L     R15,=V(DATE)                                       -CWB-\n         BALR  R14,R15                                            -CWB-\nEDATBAD  DS    0H                                              HD JAN89\n         LTR   R3,R3              DO WE HAVE A VTOC ENTRY?        -CWB-\n         BZ    *+10               IF NOT, SKIP SAVE.              -CWB-\n         MVC   VTOCEXPR,MSGBUF+72 SAVE EXP DATE FOR VTOC.         -CWB-\nEXPIRED  EQU   *                                                  -CWB-\n         CLI   VTOCFLAG,C'Y'      VTOC ONLY?                   HD JAN89\n         BE    VTOCBYP4           CONTINUE PROCESSING          HD JAN89\n         MVI   MSGBUF,C'0'\n         BAL   R2,PUTLINE3\n         DC    CL6'LBL111'\n         BAL   R5,PUTERROR        SEND WARNING MESSAGE            -HMD-\nVTOCBYP4 B     LABELEND           END OF THIS LABEL           HD  JAN89\nPUTERROR DS    0H                 ERROR MESSAGE ROUTINE           -HMD-\n         CLI   SWT2,X'03'         SEE IF ERROR                    -HMD-\n         BLR   R5                 BRANCH IF NO ERROR              -HMD-\n         CLI   SWT2,C'1'          IS THIS A HDR ERROR?            -HMD-\n         BNE   TRLRERR            NO, MUST BE A TRAILER ERROR     -HMD-\n         MVC   ERR1MSG(4),=C'HDR1'                                -HMD-\n         B     *+10                                               -HMD-\nTRLRERR  MVC   ERR1MSG(4),=C'EOF1'                                -HMD-\n         MVC   MSGBUF,BLANKBUF    CLEAR OUTPUT BUFFER             -HMD-\n         BAL   R2,PUTLINE2                                        -HMD-\n         MVC   MSGBUF(LMSG),ERR0MSG                               -HMD\n         BR    R5                 RETURN TO CALLER                -HMD-\nEOF1EOV1 DS    0H\n         CLC   DATASEQ,RECBUF+31  COMPARE OLD DATASET SEQ. NO. TO  THE *\n                                  CURRENT ONE.\n         BE    NEWSEQNO           SKIP ERROR MSG IF EQUAL\n         CLI   DATASEQ,C'N'       SEE IF 'NONE' STILL IN DATASEQ\n         BE    NEWSEQNO           SKIP ERR MSG IF NO PREVIOUS HDR1\n         CLI   VTOCFLAG,C'Y'      VTOC ONLY?                   HD JAN89\n         BE    VTOCBYP5           YES, BYPASS THIS MESS        HD JAN89\n         BAL   R2,PUTLINE2\n         MVC   MSGBUF(100),=C'0ERROR - THE DATASET SEQ. NO. ON THE FOLL*\n               OWING LABEL DOES NOT MATCH THAT ON THE PRECEDING HDR1 LA*\n               BEL'\n         LA    R0,6               PREPARE TO RESERVE 6 LINES\n         BAL   R2,PAGECHK         RESERVE 6 LINES OF PRINTOUT\nVTOCBYP5 DS    0H                                              HD JAN89\n         MVC   MSGBUF+1(132),RECBUF RESTORE MSGBUF\nNEWSEQNO MVC   DATASEQ,RECBUF+31  GET NEW DATASET SEQUENCE NUMBER\n         MVC   MSGBUF+82(35),=C'1ST TRAILER LABEL RECORD, FILE NO. '\n         MVC   MSGBUF+116(4),RECBUF+31\n         CLI   VTOCFLAG,C'Y'      VTOC ONLY?                   HD JAN89\n         BE    DOBLKCNT           YES, BYPASS PRINT            HD JAN89\n         BAL   R2,PUTLINE3\n         DC    C'EOF1EV'\n         BAL   R5,HEXON\nDOBLKCNT MVC   MSGBUF,BLANKBUF\n         MVI   SWT2,X'02'         INDICATE IN TRAILER ROUTINE     -HMD-\n         MVC   MSGBUF+82(12),=C'BLOCK COUNT=' (MOVED OVER.)       -CWB-\n         MVC   MSGBUF+94(6),RECBUF+54                             -CWB-\n         LTR   R3,R3              DO WE HAVE A VTOC ENTRY?        -CWB-\n         BZ    LBL1               IF NOT, SKIP SAVE.              -CWB-\n         CLI   VTOCOUNT,C' '      HAS THE TRUE BLOCK COUNT BEEN   -CWB-\n         BNE   LBL1                    FILLED IN?  IF SO, BRANCH. -CWB-\n         MVC   VTOCOUNT,RECBUF+54 ELSE, FILL IT IN FROM THE LABEL.-CWB-\n         B     LBL1\nEOF2EOV2 DS    0H\n         CLI   VTOCFLAG,C'Y'      VTOC ONLY?                   HD JAN89\n         BE    VTOCBYP6           YES, BYPASS THIS MESS        HD JAN89\n         LA    R0,6               PREPARE TO RESERVE 6 LINES OF PRINT\n         BAL   R2,PAGECHK         RESERVE 6 LINES OF PRINT\n         MVC   MSGBUF+82(35),=C'2ND TRAILER LABEL RECORD, FILE NO. '\n         B     LBL2\nHDR2     DS    0H\n         CLI   VTOCFLAG,C'Y'      VTOC ONLY?                   HD JAN89\n         BE    VTOCBYP6           YES, BYPASS THIS MESS        HD JAN89\n         LA    R0,8               PREPARE TO RESERVE 8 LINES  FOR PRINT\n         BAL   R2,PAGECHK         RESERVE PRINT\n         MVC   MSGBUF+82(35),=C'2ND HEADER LABEL RECORD,  FILE NO. '\nLBL2     DS    0H\n         MVC   MSGBUF+116(4),DATASEQ\n         BAL   R2,PUTLINE3\n         DC    C'HDR222'\n         BAL   R5,HEXON\nVTOCBYP6 DS    0H                                              HD JAN89\n         MVC   BLKSIZE(5),RECBUF+5\n         MVC   LRECL(5),RECBUF+10\n         MVC   RECFM(1),RECBUF+4  MOVE F, U, OR V PART OF RECFM DESC.\n         SR    R1,R1\n         CLI   RECBUF+38,C'R'     SEE IF BLOCKING ATTRIBUTE IS 'BS'\n         BNE   *+18               BIF NOT BS (BS AS IN 'VBS')\n         LA    R1,2\n         MVC   RECFM+1(2),=C'BS'\n         B     CTRLCHAR\n         CLI   RECBUF+38,C' '     SEE IF BLOCKING ATTRIBUTE IS UNBLKED\n         BE    CTRLCHAR           BIF UNBLOCKED\n         MVC   RECFM+1(1),RECBUF+38   MOVE B OR S BLOCK ATTRIBUTE CHAR\n         LA    R1,1               BUMP PTR PAST THE B OR S\nCTRLCHAR LA    R1,RECFM+1(R1)\n         MVC   0(1,R1),RECBUF+36\n         MVC   TRTCH(2),RECBUF+34\n         CLC   TRTCH(2),LBL2MSG+1 SEE IF IT'S 2 BLANKS\n         BNE   *+10\n         MVC   TRTCH(8),=C'STANDARD' 9-TRK\n         CLI   VTOCFLAG,C'Y'      CHECK FOR VTOC ONLY          HD JAN89\n         BE    VTOCBYP7           BYPASS PRINT                 HD JAN89\n         BAL   R2,PUTLINE\nVTOCBYP7 DS    0H                                              HD JAN89\n         MVC   MSGBUF(109),LBL2MSG\n         CLI   RECBUF,C'H'        SEE IF IS 'HDR2'\n         BNE   LABELEND           BIF IT WAS EOF2 OR EOV2      HD JAN89\n         LTR   R3,R3              DO WE HAVE A VTOC ENTRY?        -CWB-\n         BZ    NOVSTUFF           IF NOT, SKIP SAVES.             -CWB-\n         MVC   VTOCRECF,RECFM     COPY DATA FOR VTOC.             -CWB-\n         MVC   VTOCLREC,LRECL                                     -CWB-\n         MVC   VTOCBLKS,BLKSIZE                                   -CWB-\n         MVC   VTOCDEN,PRTDENS                                    *SRH*\n         MVC   VTOCTRTC,RECBUF+34                                 -CWB-\n         MVC   VTOCJOBN,RECBUF+17                                 -CWB-\n         MVC   VTOCSTEP,RECBUF+26                                 -CWB-\nNOVSTUFF EQU   *                                                  -CWB-\n         MVC   MSGBUF+2(120),MSGBUF+1    CLEAR MOST OF MSGBUF\n         MVC   CRMSG+15(8),RECBUF+17\n         MVC   CRMSG+32(8),RECBUF+26\n         CLI   VTOCFLAG,C'Y'                                   HD JAN89\n         BE    VTOCBYP8                                        HD JAN89\n         BAL   R2,PUTLINE2\n         MVC   MSGBUF+6(L'CRMSG),CRMSG\nVTOCBYP8 B     LABELEND                                        HD JAN89\n         EJECT                                                 HD JAN89\n************************************************************** HD JAN89\n**                                                             HD JAN89\n**        ROUTINE TO HANDLE VOLSER FILE AND PRINT VOLSER       HD JAN89\n**                                                             HD JAN89\n************************************************************** HD JAN89\nVOL1     DS    0H\n         CLI   VTOCFLAG,C'Y'      VTOC ONLY?                   HD JAN89\n         BE    VTOCBYP9           YES, BYPASS THIS MESS        HD JAN89\n         LA    R0,6               PREPARE TO RESERVE 6 LINES OF PRINT\n         BAL   R2,PAGECHK         AND RESERVE THEM\n         MVC   MSGBUF+82(19),=C'VOLUME LABEL RECORD'\n         MVI   MSGBUF,C'0'\n         BAL   R2,PUTLINE3\n         DC    C'VOL111'\n         BAL   R5,HEXON\nVTOCBYP9 DS    0H                                              HD JAN89\n         MVC   MSGBUF,BLANKBUF\n         MVC   MSGBUF+6(21),=C'VOLUME SERIAL NUMBER='\n         MVC   MSGBUF+27(6),RECBUF+4\n         MVC   MSGBUF+40(19),=C'OWNER INFORMATION='''\n         MVC   MSGBUF+59(10),RECBUF+41\n         MVI   MSGBUF+69,C''''\n         MVC   VSNSAVE,RECBUF+4   SAVE VSN AND OWNER FOR USE      -CWB-\n         MVC   OWNERSAV,RECBUF+41      IN VTOC LISTING.           -CWB-\n         MVI   MSGBUF,C'0'\n         CLI   VTOCFLAG,C'Y'      VTOC ONLY?                   HD JAN89\n         BE    VTOCBYPA           YES, BYPASS PRINT            HD JAN89\n         BAL   R2,PUTLINE3\n         DC    C'VOL222'\n         CLC   (JFCBINX+JFCBVOLS-JFCB)(6),RECBUF+4 SEE IF VOLUME MATCH\n         BE    LABELEND           BIF SAME                     HD JAN89\n         BAL   R2,PUTLINE\n         MVC   MSGBUF(098),=C'0WARNING - VOLUME SERIAL NUMBER IN ABOVE *\n               LABEL DOES NOT MATCH THAT SPECIFIED ON INPUT DD STATEMEN*\n               T'\nVTOCBYPA DS    0H                                              HD JAN89\n         TM    WRTFLG,X'01'       ARE WE MAKING A COPY?        -CWB-\n         BZ    LABELEND           IF NOT, CONTINUE PROCESSING. -CWB-\n         L     R0,CTPMKNO         GET CURRENT TAPEMARK NUMBER\n         LTR   R0,R0              SEE IF IT'S ZERO (NO TAPEMARKS YET)\n         BNZ   LABELEND           BIF A TAPEMARK HAS ALREADY BEEN READ\n         TM    JFCLTSV,X'02'      SEE IF 'SL' (OR SUL) BIT IS ON\n         BZ    LABELEND           IF IT'S NOT THEN 'NO VERIFY' (BLP OR *\n                                  AL) WAS SPECIFIED IN JCL; SO KEEP ON.\n         BAL   R2,PUTLINE         PRINT OPERATOR ERROR TERMINATION MSG\n         MVC   MSGBUF(38),=C'0TERMINATION DUE TO WRONG TAPE MOUNTED'\n         B     EXITRC8\nLABELEND B     PROCESS2                                        HD JAN89\n         EJECT                                                 HD JAN89\n************************************************************** HD JAN89\n**                                                             HD JAN89\n**               EOD PROCESSING                                HD JAN89\n**                                                             HD JAN89\n************************************************************** HD JAN89\nEODS     DS    0H\n*        AP    MARKNO,=P'1'       COUNT THE TAPEMARK              -CWB-\n*        UNPK  MARKNUM,MARKNO                                     -CWB-\n         L     R1,MARKNO          COUNT THE TAPEMARK (COUNT       -CWB-\n         LA    R1,1(R1)                STORED IN BINARY FORM).    -CWB-\n         ST    R1,MARKNO                                          -CWB-\n         CVD   R1,DBLWORK         MAKE IT PRINTABLE.              -CWB-\n         UNPK  MARKNUM,DBLWORK                                    -CWB-\n         OI    MARKNUM+3,X'F0'\n         LA    R1,1\n         A     R1,CTPMKNO         CURRENT NUMBER OF TAPEMARKS PASSED\n         ST    R1,CTPMKNO         IS NOW UPDATED TO ACTUAL VALUE\n         L     R1,BLKCNT          BLKS IN PREVIOUS DATASETS\n         AR    R1,R4              ADD NO. OF BLKS IN DATASET JUST READ\n         ST    R1,BLKCNT          TO GET TOTAL BLKS READ SO FAR (EXCEPT*\n                                  FOR SKIPPING - SKIPEOV OR SKIPTM).\n         CLI   WRTFLG,X'03'       SEE IF COPY BEING DONE NOW\n         BNE   *+24               SKIP WRITING TAPEMARK IF NOT\n         LA    R1,=AL3(WTMCMND)   PTR TO PTR TO WTM CCW FOR OUTPUT TAPE\n         LA    R2,OUTPUT          DCB FOR WTM EXCP OUTPUT\n         ST    R4,SVR4            SAVE R4 FOR EXEC ESCP CALL\n         BAL   R4,EXECEXCP        CAL SUBROUTINE TO ISSUE EXCP\n         L     R4,SVR4            RESTORE R4\n         CLI   COUNTFLG,C'N'\n         BE    SIMPLETM           BIF COUNT OPTION NOT SPECIFIED\n         L     R0,MAX\n         LTR   R0,R0\n         BZ    SIMPLETM           BIF NO COUNTING WORK HAS BEEN DONE\n         LTR   R4,R4              BYPASS MAX/MIN/AVG IF           -CWB-\n         BZ    SIMPLETM                NO RECORDS.                -CWB-\n         L     R1,MIN\n         CVD   R1,BADLNGTH\n         OI    BADLNGTH+7,X'0F'\n         UNPK  MINMSG,BADLNGTH\n         L     R1,MAX\n         CVD   R1,BADLNGTH\n         OI    BADLNGTH+7,X'0F'\n         UNPK  MAXMSG,BADLNGTH\n         LR    R1,R4              COPY COUNT OF RECORDS AND DIVIDE-CWB-\n         SRA   R1,1                    BY 2 TO ROUND THE AVERAGE. -CWB-\n         A     R1,FILEBYTS        ADD NUMBER OF BYTES IN FILE.    -CWB-\n         SR    R0,R0              CLEAR R0 FOR DIVIDE.            -CWB-\n         ST    R0,FILEBYTS        ALSO CLEAR FILEBYTS FOR NEXT    -CWB-\n*                                      FILE.                      -CWB-\n         DR    R0,R4              DIVIDE FOR AVERAGE BLOCK SIZE.  -CWB-\n         CVD   R1,BADLNGTH        MAKE AVERAGE SIZE PRINTABLE.    -CWB-\n         OI    BADLNGTH+7,X'0F'                                   -CWB-\n         UNPK  AVGMSG,BADLNGTH                                    -CWB-\n         CVD   R4,BADLNGTH\n         OI    BADLNGTH+7,X'0F'\n         UNPK  COUNTMSG,BADLNGTH\n         LTR   R3,R3              DO WE HAVE A VTOC ENTRY?        -CWB-\n         BZ    NOSAVE             IF NOT, BRANCH.                 -CWB-\n         CLI   LABLFLAG,C'Y'      IS THIS A LABEL FILE?           -CWB-\n         BE    NOSAVE             IF SO, DON'T SAVE STAT'S.       -CWB-\n         MVC   VTOCMINB,MINMSG    SAVE MIN, MAX, AVG, AND COUNT   -CWB-\n         MVC   VTOCMAXB,MAXMSG         FOR VTOC LISTING.          -CWB-\n         MVC   VTOCAVGB,AVGMSG                                    -CWB-\n         MVC   VTOCOUNT,COUNTMSG                                  -CWB-\nNOSAVE   EQU   *                                                  -CWB-\n*        MVI   EOVM+1,120         SET LENGTH FOR POSSIBLE LONG EOV-CWB-\n         MVI   EOVM+1,CNTSEND-TPMKMSG-1  SET LENGTH FOR MVC.      -CWB-\n*        MVI   MSGBUF+100,C' '    PREPARE TO CLEAR PART OF MSG BUF-CWB-\n*        MVC   MSGBUF+101(32),MSGBUF+100 CLEAR LAST PART OF  BUFFE-CWB-\n         MVC   MSGBUF,BLANKBUF    CLEAR BUFFER COMPLETELY.        -CWB-\n*        MVC   MSGBUF+18(87),EOVNUM+3                             -CWB-\n         MVC   MSGBUF+18(CNTSEND-EOVNUM-3),EOVNUM+3 COPY MESG.    -CWB-\n         LA    R5,PUTLINE2        SPECIFY LONG TYPE OF TAPEMARK MSG\n         B     TMSGDONE\nSIMPLETM MVI   EOVM+1,33          SET LENGTH OF POSSIBLE EOV MSG\n         LA    R5,PUTLINE         SPECIFY SHORT TPMK FOUND MSG IF ANY\n*************************************************************  HD AUG86\n** LABEL TMSGDONE REPLACED BELOW                           **  HD AUG86\n*************************************************************  HD AUG86\n*TMSGDONE  CLI   MARK,X'FF'\n*          BE    EOVPROC\n*          MVI   MARK,X'FF'\n*************************************************************  HD AUG86\n** END OF REPLACED CODE SEGMENT                            **  HD AUG86\n*************************************************************  HD AUG86\nTMSGDONE DS    0H                                                 -CWB-\n         CLI   EOV1FLG,C'Y'\n         BE    EOVPROC            BIF 'EOV PENDING' FLAG SET\n         CLI   MARK,X'FF'         TWO CONSECUTIVE MARKS?          -CWB-\n         BNE   SKPCHK             IF NOT, BRANCH.                 -CWB-\n         CLI   PREVHDR1,C'N'      PREV FILE A HDR1 LABEL?         -CWB-\n         BE    EOVPROC            IF NOT, GO DO EOV.              -CWB-\nSKPCHK   MVI   MARK,X'FF'         NOTE THIS MARK FOUND.           -CWB-\n         CLC   SKPEOVNO,CEOVNO    SKIP SKIPTM PROCESSSING IF\n         BH    SKIPEOVP           SKIPEOV PROCESSING IS BEING DONE\n         CLC   CTPMKNO,SKIPTMNO   COMPARE CTPMKNO WITH SKIPTMNO\n         BL    SKIPTMPR           BRANCH TO DO POSSIBLE SKIPTM PROCESS\n         CLI   VTOCFLAG,C'Y'      VTOC ONLY?                   HD JAN89\n         BE    VTOCBYPB           BYPASS PRINT IF YES.         HD JAN89\n         BALR  R2,R5              TO PUTLINE OR PUTLINE2\nVTOCBYPB DS    0H                                              HD JAN89\n         MVC   MSGBUF(18),TPMKMSG\n         OI    WRTFLG,X'02'       SET 'SKIPPING DONE' BIT FOR COPY\n         CLC   CTPMKNO,MAXTMNO\n         BL    PROCESS\n         CLI   WRTFLG,X'03'       CHECK IF COPY BEING DONE\n         BNE   *+16               SKIP IF IT'S NOT BEING DONE\n         LA    R1,=AL3(WTMCMND)   OTHERWISE WRITE AN EXTRA TAPEMARK,\n         LA    R2,OUTPUT          JUST TO MAKE SURE.  THIS COULD\n         BAL   R4,EXECEXCP        RESULT  IN 3 TAPEMARKS IN LAST EOV.\n         B     PRENDMSG\nEOVPROC  DS    0H                 HANDLES END-OF-VOLUME INDICATIONS\n         MVI   EOV1FLG,C'N'       CLEAR 'EOV PENDING' FLAG\n*        AP    EOVNO,=P'1'        COUNT EOV'S                     -CWB-\n*        UNPK  EOVNUM,EOVNO                                       -CWB-\n         L     R1,EOVNO           COUNT EOV'S (COUNT STORED       -CWB-\n         LA    R1,1(R1)                IN BINARY FORM).           -CWB-\n         ST    R1,EOVNO                                           -CWB-\n         CVD   R1,DBLWORK         MAKE IT PRINTABLE.              -CWB-\n         UNPK  EOVNUM,DBLWORK                                     -CWB-\n         OI    EOVNUM+2,X'F0'\n*        MVC   WRITELOG+11(3),EOVNUM                              -CWB-\n*WRITELOG WTL  'EOV000 ENCOUNTERED'                               -CWB-\n         CLI   VTOCFLAG,C'Y'      VTOC ONLY?                   HD JAN89\n         BE    VTOCBYPC           YES..BYPASS PRINT            HD JAN89\n         BAL   R2,PUTLINE\nVTOCBYPC DS    0H                                              HD JAN89\nEOVM     MVC   MSGBUF(00),TPMKMSG LENGTH SPECIFIED IN EODS EXIT\n         LA    R1,1\n         A     R1,CEOVNO\n         ST    R1,CEOVNO\n         C     R1,SKPEOVNO\n         BL    SKIPEOVP           BIF SKIPEOV BEING DONE\n         BNE   NOTJUST            BIF SKIPEOV PROCESSING NOT JUST DONE\n         CLC   CTPMKNO,SKIPTMNO   SEE IF SKIPTM PROCESSING COMPLETED\n         BL    NOTJUST            BIF NOT, SKIPTMNO SHOULD BECOME      *\n                                  ACTUAL NUMBER OF TAPEMARKS SKIPPED.\n         MVC   SKIPTMNO,CTPMKNO   MORE THAN SKIPTMNO WERE SKIPPED DUE  *\n                                  SKIPEOV; RESET SKIPTMNO TO INDICATE  *\n                                  ACTUAL NUMBER SKIPPED (FOR LNGTH EST)\nNOTJUST  DS    0H\n         OI    WRTFLG,X'02'       SET 'SKIPPING DONE' BIT FOR COPY\n         CLC   CEOVNO,MAXEOVNO\n         BL    PROCESS\n         SPACE 2                                               HD JAN89\nPRENDMSG DS    0H                                              HD JAN89\n         CLI   COUNTFLG,C'N'\n         BE    SHORT              SKIP TO NOT PRINT COUNTS\n         LA    R0,6               PREPARE TO RESERVE 6 LINES FOR PRINT\n         BAL   R2,PAGECHK         RESERVE THEM\n         LA    R1,=AL3(SENSCMND)  RE-SENSE AT END OF PROCESSING\n         LA    R2,INPUT           PTR TO DCB FOR EXCP CALL\n         BAL   R4,EXECEXCP\n         CLI   FLAG3480,C'Y'      IS THIS A 3480 DEVICE        HD JAN89\n         BE    ADDDEN3            YES, CONTINUE WITH PROCESS   HD JAN89\n         MVI   INDEX+3,8          SINCE 9-TRK, LOAD OFFSET     HD JAN89\n         TM    SENSBYTS+3,X'04'   CHECK IF PE, 1 = PE = 1600 BPI\n         BNO   CK6250             CK FOR 6250 BPI 9TRK\n         MVI   (DCBDEN-IHADCB)+INPUT,X'C3' SET DEN=1600 BPI INDICATOR\n         MVI   LNGTHEST+50,C'3'   SET DENSITY = 3              HD JAN89\n         B     ADDDEN3            CONTINUE WITH LENGTH CHECK   HD JAN89\n         SPACE 1\nEIGHTBPI DS    0H\n         MVI   INDEX+3,0          SET OFFSET IN BPI TABLE      HD JAN89\n         MVI   INPUT+(DCBDEN-IHADCB),X'83' SET DEN=800 BPI INDICATOR\n         MVI   LNGTHEST+50,C'2'   SET DENSITY = 2              HD JAN89\n         B     ADDDEN3            CONTINUE WITH LENGTH CHECK   HD JAN89\n         SPACE 1\nCK6250   L     R2,(DCBDEBAD-IHADCB)+INPUT GET DEB ADDR\n         L     R2,DEBUCBAD(R2)    GET UCB ADDR\n         TM    16(R2),2           CK UCBTYP FOR 6250 BPI\n         BNO   EIGHTBPI           NOPE, ASSUME 800 BPI         HD JAN89\n         MVI   (DCBDEN-IHADCB)+INPUT,X'D3' SET DENS=4 FOR 6250 BPI\n         MVI   LNGTHEST+50,C'4'   SAY DENS=4\n         MVI   INDEX+3,12         SET INDEX FOR 6250 BPI       HD JAN89\n         B     ADDDEN3            BYPASS SOME CODE\n         SPACE 1\n*\n*         FORMULA FOR LENGTH IN INCHES FOLLOWS:\n*         INCHES=R8/BPI+(IBG*BLKCNT+CTPMKNO*TMLENGTH)/1000\n         SPACE 1\nADDDEN3  L     R15,CTPMKNO        LOAD NUMBER OF TAPEMARKS READ\n         S     R15,SKIPTMNO       SUBTRACT NUMBER OF TAPEMARKS SKIPPED\n         MH    R15,TMLENGTH       MULTIPLY BY (TAPEMARK LENGTH*1000)\n         CLI   FLAG3480,C'N'      3480?                        HD JAN89\n         BE    ADDEN3A            YES, BYPASS THIS             HD JAN89\n         MVI   LNGTHEST+50,C'5'   INDICATE DENSITY=5           HD JAN89\n         L     R1,BLKCNT          LOAD BLOCK COUNT             HD JAN89\n         MH    R1,GAP3480         MULT TO GET GAP LEN*1000     HD JAN89\n         AR    R1,R15             GET TOTAL GAP + TM LGTH*1000 HD JAN89\n         SR    R0,R0              CLEAR FOR DIVIDE             HD JAN89\n         D     R0,=F'1000'        GET TOTAL TAPEMARK+GAP IN.   HD JAN89\n         LR    R15,R1             SAVE FOR LATER               HD JAN89\n         L     R2,BPI3480         LOAD DENSITY                 HD JAN89\n         B     ADDEN3B            CONTINUE WITH CALCULATION    HD JAN89\nADDEN3A  DS    0H                                              HD JAN89\n         L     R2,INDEX           LOAD INDEX INTO BPI/IBG TABLE\n         L     R1,BLKCNT          LOAD BLOCK COUNT\n         MH    R1,BPIBGTBL(R2)    MULTIPLY TO GET TOTAL GAP LENGTH*1000\n*                                                              HD JAN89\n         AR    R1,R15             GET TOTAL GAP + TAPEMARK LENGTH*1000\n         SR    R0,R0\n         D     R0,=F'1000'        GET TOTAL TAPEMARK+ GAP LENGTH INCHES\n         LR    R15,R1             SAVE THIS FOR LATER\n         LH    R2,BPIBGTBL+2(R2)  LOAD PHYSICAL BPI (NOT LOGICAL BPI)\n*                                                              HD JAN89\nADDEN3B  DS    0H                                              HD JAN89\n         LR    R1,R8              LOAD TOTAL BYTE COUNT\n         SR    R0,R0\n         DR    R0,R2              DIVIDE BYTE COUNT BY PHYSICAL BPI\n         AR    R1,R15             GET TOTAL LENGTH IN INCHES\n         SR    R0,R0\n         D     R0,=F'12'          GET FEET IN R1, INCHES IN R0\n         CVD   R1,BADLNGTH\n         OI    BADLNGTH+7,X'0F'\n         UNPK  LNGTHEST+17(4),BADLNGTH\n         CVD   R0,BADLNGTH\n         OI    BADLNGTH+7,X'0F'\n         UNPK  LNGTHEST+27(2),BADLNGTH\n         BAL   R2,PUTLINE\n         MVC   MSGBUF(81),LNGTHEST\n         BAL   R2,PUTLINE\n         MVC   MSGBUF(106),LNGTHACC\n         MVI   SHORTNOW+1,LNGTHEST-ENDMSG-1  SET LENGTH OF MESSAGE-HMD-\n         CVD   R8,BADLNGTH        TOTAL BYTES READ (FOR COUNT OPT ONLY)\n         OI    BADLNGTH+7,X'0F'   SET SIGN NIBBLE\n         UNPK  BYTES,BADLNGTH\n         L     R8,BLKCNT          TOTAL BLKS READ ON TAPE, EXCLUDING   *\n                                  THOSE READ DURING SKIP PROC%SSING.\n         CVD   R8,BADLNGTH\n         OI    BADLNGTH+7,X'0F'\n         UNPK  NBLKS,BADLNGTH\nSHORT    BAL   R2,PUTLINE         PRINT 'SUCCESSFUL END' MSG\nSHORTNOW MVC   MSGBUF(L'ENDMSG),ENDMSG (LENGTH MODIFIED FOR COUNTBLKS)\n         L     R2,ERRCOUNT        COUNT OF SYNAD EXITS TAKEN\n         LTR   R2,R2              SEE IF ZERO\n*        BZ    EXIT               EXIT IF SO                      -CWB-\n         BZ    LISTVTOC           GO DO VTOC IF SO.               -CWB-\n         CVD   R2,BADLNGTH\n         OI    BADLNGTH+7,X'0F'\n         UNPK  ERRSUMSG+22(5),BADLNGTH\n         BAL   R2,PUTLINE\n         MVC   MSGBUF(L'ERRSUMSG),ERRSUMSG\n*        B     EXIT                                               -CWB-\n         SPACE 3\nLISTVTOC CLC   FRSTVTOC+1(3),=AL3(0)  DID WE MAKE A VTOC?         -CWB-\n         BE    EXIT               IF NOT, SKIP IT.                -CWB-\n         LA    R0,100             RESERVE 100 LINES (FORCE EJECT).-CWB-\n         BAL   R2,PAGECHK                                         -CWB-\n         BAL   R2,PUTLINE         OUTPUT VTOC HEADING.            -CWB-\n         MVC   MSGBUF(VHEADLEN),VTOCHEAD                          -CWB-\n         BAL   R2,PUTLINE         OUTPUT COLUMN HEADINGS.         -CWB-\n         MVC   MSGBUF(L'VTOCHED2),VTOCHED2                        -CWB-\n         L     R4,FRSTVTOC        GET ADDRESS OF FIRST VTOC BLOCK.-CWB-\n         SR    R8,R8              CLEAR R8 FOR 1-BYTE COUNTS.     -CWB-\nNEXTVBLK LA    R3,8(R4)           GET ADDRESS OF FIRST ENTRY IN   -CWB-\n*                                      THE VTOC BLOCK.            -CWB-\n         IC    R8,0(R4)           GET THE NUMBER OF ENTRIES IN    -CWB-\n*                                      THIS VTOC BLOCK.           -CWB-\nNEXTLINE MVC   MSGBUF,BLANKBUF    BUILD THE VTOC ENTRY LINE:      -CWB-\n         MVC   MSGBUF+1(4),VTOCSEQN    DATA SET SEQUENCE NUMBER.  -CWB-\n         MVC   MSGBUF+7(17),VTOCDSN    DATA SET NAME.             -CWB-\n         MVC   MSGBUF+26(4),VTOCRECF   RECFM.                     -CWB-\n         MVC   MSGBUF+32(5),VTOCLREC   LRECL.                     -CWB-\n         MVC   MSGBUF+40(5),VTOCBLKS   BLKSIZE.                   -CWB-\n         MVC   MSGBUF+47(4),VTOCDEN    DENSITY.                   -CWB-\n         MVC   MSGBUF+53(2),VTOCTRTC   TRTCH.                     -CWB-\n         CLC   VTOCTRTC,LBL2MSG+1    Q. TRTCH IS BLANKS.          -HMD-\n         BNE   *+10                  A. NO, LEAVE AS IT IS        -HMD-\n         MVC   MSGBUF+53(3),=C'STD'     INDICATE STD. TRTCH       -HMD-\n         MVC   MSGBUF+59(5),VTOCMAXB   MAXIMUM BLOCK SIZE.        -CWB-\n         MVC   MSGBUF+68(5),VTOCMINB   MINIMUM BLOCK SIZE.        -CWB-\n         MVC   MSGBUF+77(5),VTOCAVGB   AVERAGE BLOCK SIZE.        -CWB-\n         MVC   MSGBUF+86(6),VTOCOUNT   NUMBER OF BLOCKS.          -CWB-\n         MVC   MSGBUF+95(8),VTOCCREA   CREATION DATE.             -CWB-\n         MVC   MSGBUF+105(8),VTOCJOBN  JOB NAME.                  -CWB-\n         MVC   MSGBUF+115(8),VTOCSTEP  STEP NAME.                 -CWB-\n         MVC   MSGBUF+125(8),VTOCEXPR  EXPIRATION DATE.           -CWB-\n         BAL   R2,PUTLINE3        OUTPUT THE LINE.                -CWB-\n         DC    CL6'VTOC--'        REQUIRED DEAD SPACE.            -CWB-\n         LA    R3,VTOCSIZE(R3)    ADVANCE TO NEXT ENTRY.          -CWB-\n         BCT   R8,NEXTLINE        LOOP IF MORE IN THIS BLOCK.     -CWB-\n         LR    R1,R4              POINT TO VTOC BLOCK.            -CWB-\n         L     R4,0(R4)           GET ADDRESS OF NEXT BLOCK.      -CWB-\n         LA    R0,VTOCBLSZ        GET VTOC BLOCK SIZE.            -CWB-\n         FREEMAIN  R,LV=(0),A=(1) FREE UP VTOC BLOCK'S CORE.      -CWB-\n         LA    R4,0(R4)           CLEAR HIGH-ORDER BYTE.          -CWB-\n         LTR   R4,R4              IS FOREWARD POINTER ZERO?       -CWB-\n         BZ    EXIT               IF SO, WE'RE DONE.              -CWB-\n         B     NEXTVBLK           ELSE, GO DO NEXT BLOCK.         -CWB-\n         EJECT\nCTPMKNO  DC    F'0'               # OF TAPEMARKS ALREADY ENCOUNTERED\nCEOVNO   DC    F'0'               # OF DOUBLE TAPEMARKS PASSED\nSVR4     DC    F'0'               FOR SAVING R4 TEMPORARILY\nBLKCNT   DC    F'0'               KEEPS TRACK OF TOTAL BLKS READ ON TAPE\n                                  EXCLUDING THOSE READ DURING SKIPPING.\nMAX      DC    F'0'               KEEPS TRACK OF MAX BLK LEN   HD DEC86\nMIN      DC    F'32760'           KEEPS TRACK OF MIN BLK LEN   HD DEC86\nTMLENGTH DC    H'3750'            DEFAULT TAPEMARK LENGTH*1000 (9-TRK)\nINDEX    DC    F'0'               NOCONV=+4, +DEN*8            HD DEC86\n         EJECT\n*\n*  -.-.-.- DO NOT CHANGE THE ORDER OF THE FOLLOWING TABLE -.-.-.-.\n*\n*TBLORG EQU BPIBGTBL-20           THEORETICAL ORIGIN OF BPIBGTBL\n*                                 WHICH IS LIKE A 3-D ARRAY:\n*                                 NOCONV=+4, +DEN*8\nBPIBGTBL DC    H'601,800'    800 BPI NOCONV 9-TRK\n         DC    H'1,1'       1600 BPI CONV   9-TRK (NOT USED)\n         DC    H'651,1600'  1600 BPI NOCONV 9-TRK\n         DC    H'300,6250'  6250 BPI NOCONV 9-TRK                 *SRH*\n*  TABLE END                                                      *SRH*\nGAP3480  DC    H'100'       3480 GAP                           HD JAN89\nBPI3480  DC    F'38000'     3480 DENSITY                       HD JAN89\nMARKNO   DC    F'0'               NUMBER OF TAPE MARKS READ.      -CWB-\nEOVNO    DC    F'0'               NUMBER OF EOV'S PROCESSED.      -CWB-\nTPMKMSG  DC    C'0TAPEMARK NO. '\nMARKNUM  DC    C'    '\n         DC    C' -- EOV NO. '\nEOVNUM   DC    CL3'000'\n         DC    C'    BLOCK LENGTHS:  MIN='                        -CWB-\nMINMSG   DC    C'00000'\n         DC    C'  MAX='                                          -CWB-\nMAXMSG   DC    C'00000'\n         DC    C'  AVG='                                          -CWB-\nAVGMSG   DC    C'00000'                                           -CWB-\n         DC    C'    NUMBER OF BLOCKS='\nCOUNTMSG DC    C'000000'\nCNTSEND  EQU   *                                                  -CWB-\nDATASEQ  DC    CL4'NONE'\nENDMSG   DC    C'0SUCCESSFUL PROCESSING OF THIS TAPE COMPLETED'\n         DC    C':    TOTAL BYTES READ='\nBYTES    DC    C'XXXXXXXXXXX'    NUMBER OF BYTES READ             -HMD-\n         DC    C'    NUMBER OF DATA BLOCKS READ='\nNBLKS    DC    C'XXXXXX'\nLNGTHEST DC    C'0LENGTH ESTIMATE=XXXX FEET YY INCHES ASSUMING DEN=X AN*\n               D TRTCH=STANDARD           '\nLNGTHACC DC    C'0(LENGTH ESTIMATE USUALLY ACCURATE WITHIN PLUS OR MINU*\n               S TEN PERCENT;  ALMOST ALWAYS WITHIN TWENTY PERCENT)'\nLNGT3480 DC    C'0LENGTH TEST BYPASSED FOR 3480 CARTRIDGE DEVICE' -HMD-\nLNGT348A DC    C'0LENGTH MEANINGLESS FOR CARTRIDGE TAPE'       HD DEC86\nLBL2MSG  DC    CL12'0     RECFM='\nRECFM    DC    CL18'          BLKSIZE='\nBLKSIZE  DC    CL18'XXXXX       LRECL='\nLRECL    DC    CL20'XXXXX               '\nDENSITY  DC    CL6'TRTCH='\nTRTCH    DC    CL35' '\nCRMSG    DC    C'CREATED BY JOB          IN STEP         '\nMARK     DC    X'00'              'TAPEMARK JUST READ' FLAG (00 = NOT)\nEOV1FLG  DC    C'N'               SET EOV1FLG =C'Y' WHENEVER 1ST BLK   *\n                                  AFTER A TAPEMARK IS 80 BYTES LONG &  *\n                                  STARTS WITH 'EOV1'.\nSWT2     DC    X'00'              SET FOR INVALID CREDT OR EXPDT  -HMD-\nLABLFLAG DC    C'N'               INDICATES WHETHER WE ARE        -CWB-\n*                                      PROCESSING A LABEL FILE.   -CWB-\nPREVHDR1 DC    C'N'               C'Y' IF PREV FILE A HDR1 LABEL. -CWB-\nHDR1FLAG DC    C'N'               C'Y' IF CURRENT FILE A HDR1.    -CWB-\nFLAG3480 DC    C'N'               C'Y' IF TAPE IS A 3480       HD NOV86\nDBLWORK  DC    D'0'               CVB/CVD WORK AREA.              -CWB-\nCURRVTOC DC    A(FRSTVTOC)        CURRENT VTOC BLOCK.             -CWB-\nFRSTVTOC DC    AL1(VTOCEPB),AL3(0)  ADDRESS OF FIRST VTOC BLOCK;  -CWB-\n*                                      HIGH-ORDER BYTE SET TO     -CWB-\n*                                      FORCE FIRST GETMAIN.       -CWB-\nFILEBYTS DC    F'0'               NUMBER OF BYTES IN THIS FILE.   -CWB-\nTRUESEQN DC    F'0'               LABEL= VALUE SEQUENCE NUMBER.   -CWB-\nVTOCHEAD DC    C'-VOLUME TABLE OF CONTENTS FOR '                  -CWB-\nVSNSAVE  DC    C'VSNVSN',C'    '                                  -CWB-\nSAVETRK  DC    C'9 TRACK    '                                     -CWB-\nOWNERSAV DC    CL10'          '                                   -CWB-\nVHEADLEN EQU   *-VTOCHEAD                                         -CWB-\nVTOCHED2 DC    C'-SEQ.  DATA SET NAME     RECFM  LRECL  BLKSIZE DEN TRT*\n               CH  MAX BLK  MIN BLK  AVG BLK  BLK COUNT  CREATED  JOB N*\n               AME  STEP      EXPIRES'                            -CWB-\nERR0MSG  DC    C'0WARNING - THE CREATION DATE AND/OR EXPIRATION DATE  OX\n               N THE ABOVE '\nERR1MSG  DC    C'HDR1'\nERR2MSG  DC    C' LABEL IS INVALID '\nLMSG     EQU   *-ERR0MSG\n         EJECT\n         LTORG\n         EJECT\n*****************************************************************-HMD-\n**  THIS TABLE IS USED TO DETERMINE IF THE VOLSER IN THE JFCB  **-HMD-\n**  OR IN THE UCB IS PRINTABLE EBCDIC. IF SO IT IS DISPLAYED;  **-HMD-\n**  IF NOT, THE DEFAULT CONSTANT IS DISPLAYED..SEE POSMSG.     **-HMD-\n*****************************************************************-HMD-\nEBCDTBL  DS    0C\n         DC    256XL1'FF'                FOR NON-PRINTABLES     -HMD-\n         ORG   EBCDTBL+C' '              SPACES ARE OK          -HMD-\n         DC    X'00'                     MAKE IT OK             -HMD-\n         ORG   EBCDTBL+C'$'              DOLLAR-SIGN            -HMD\n         DC    X'00'                     MAKE IT OK             -HMD-\n         ORG   EBCDTBL+C'#'              POUND-SIGN AND AT-SIGN -HMD-\n         DC    X'0000'                   BOTH ARE OK            -HMD-\n         ORG   EBCDTBL+C'A'              ALPHABET (UPPER-CASE)  -HMD-\n         DC    9X'00'                    OK                     -HMD-\n         ORG   EBCDTBL+C'J'                                     -HMD-\n         DC    9X'00'                                           -HMD-\n         ORG   EBCDTBL+C'S'                                     -HMD-\n         DC    8X'00'                                           -HMD-\n         ORG   EBCDTBL+C'0'              NUMBERS                -HMD-\n         DC    10X'00'                                          -HMD-\n         ORG   ,                         BACK TO REALITY        -HMD-\n         EJECT\n****************************************************************-HMD-\n** THIS TABLE IS USED TO DETERMINE WHETHER THE CREATION DATE  **-HMD-\n** OR THE EXPIRATION DATE IN THE HDR1 OR EOF1 FIELD OF A      **-HMD-\n** STANDARD LABELED TAPE IS NUMERIC. IF NOT, AN ERROR MSG IS  **-HMD-\n** PRINTED AND TAPESCAN CONTINUES.                            **-HMD-\n****************************************************************-HMD-\nNUBTABL  DS    0C                 NUMERIC CHECK TABLE\n         DC    256XL1'FD'         TO DISTINGUISH FROM EBCDTBL\n         ORG   NUBTABL+C'0'       NUMBERS ONLY\n         DC    10X'00'\n         ORG   ,                  BACK TO REALITY\n         EJECT\nDATE     CSECT\n         SAVE  (14,12),T,*\n*      R1 = ADDR FOR OUTPUT (DS CL8'MM/DD/YY')\n*      R2 = R1 FROM THE TIME MACRO\n         LR    R12,R15\n         USING DATE,R12\n         LA    R3,DATESAVE\n         ST    R13,4(,R3)\n         ST    R3,8(,R13)\n         LR    R13,R3\n         USING PARMAREA,R1\n         L     R1,0(,R1)   GET ADDR FOR OUTPUT            *LACCD*\n         ST    R2,W2                    STORE DATE (00YYDDDF)\n         TM    W2+1,01                  IF ODD NOT LEAP.\n         BO    NOLEAP                    NOT LEAP\n         TM    W2+1,X'12'               TEST FOR LEAP (VALID TILL 1999)\n         BM    NOLEAP                   1NOT LEAP\n         MVI   MONTHTBL+5,29            SETUP FEB LEAP YEAR\nNOLEAP   UNPK  MMDDYY+6(3),W2+1(2)           UNPK YR\n         XC    W1(6),W1                  CLEAR YR FOR DAY RTN.\n         CVB   R4,W1                    GET DAY\n         LA    R5,MONTHTBL-4            SET BACK PTR\nMONLUPE  LA    R5,4(R5)                 INCR THRU MON TBL\n         SH    R4,0(R5)                 DROP DOWN THRU MONTBL\n         BH    MONLUPE                  NOT YET, TRY AGAIN\n         AH    R4,0(R5)                 ADD BACK THE DAY\n         CVD   R4,W1                    MAKE\n         OI    W2+3,X'0F'                  THE DAY\n         UNPK  MMDDYY+2(3),W2+2(2)            PRINTABLE\n         MVI   MMDDYY+5,C'/'            RESTORE SLASH\n         MVC   MMDDYY(2),2(R5)          MOVE THE MONTH\n         MVI   MMDDYY+2,C'/'  RESTORE SLASH\n         MVC   THEDATE,MMDDYY         MOVE DATE TO USER\nRETURN   DS    0H\n         L     R13,4(,R13)\n         RETURN (14,12),,RC=0 RESTORE REGS AND RETURN\n         EJECT\n         SPACE 2\nMONTHTBL DS    0CL48\nMTK      DC    H'31',C'01' JAN\n         DC    H'28',C'02' FEB\n         DC    H'31',C'03' MAR\n         DC    H'30',C'04' APR\n         DC    H'31',C'05' MAY\n         DC    H'30',C'06' JUN\n         DC    H'31',C'07' JLY\n         DC    H'31',C'08' AUG\n         DC    H'30',C'09' SEP\n         DC    H'31',C'10' OCT\n         DC    H'30',C'11' NOV\n         DC    H'255',C'12' DEC\n         SPACE 2\nDATESAVE     DS    9D\nW1       DS    F              WORKARE1\nW2       DS    F              WORKAREA2\nMMDDYY   DS    CL9\nPARMAREA DSECT\nTHEDATE  DS    CL8\n         SPACE 5\nVTOC     DSECT\nVTOCSEQN DS    CL4                SEQUENCE NUMBER                 -CWB-\nVTOCDSN  DS    CL17               DATA SET NAME.                  -CWB-\nVTOCRECF DS    CL4                RECFM.                          -CWB-\nVTOCLREC DS    CL5                LRECL.                          -CWB-\nVTOCBLKS DS    CL5                BLKSIZE.                        -CWB-\nVTOCDEN  DS    CL4                DENSITY.                        -CWB-\nVTOCTRTC DS    CL2                TRTCH.                          -CWB-\nVTOCMAXB DS    CL5                MAXIMUM BLOCK SIZE.             -CWB-\nVTOCMINB DS    CL5                MINIMUM BLOCK SIZE.             -CWB-\nVTOCAVGB DS    CL5                AVERAGE BLOCK SIZE.             -CWB-\nVTOCOUNT DS    CL6                BLOCK COUNT.                    -CWB-\nVTOCCREA DS    CL8                CREATION DATE.                  -CWB-\nVTOCJOBN DS    CL8                JOB NAME.                       -CWB-\nVTOCSTEP DS    CL8                STEP NAME.                      -CWB-\nVTOCEXPR DS    CL8                EXPIRATION DATE.                -CWB-\n         DS    0D                 ADVANCE TO DOUBLE WORD BNDRY.   -CWB-\nVTOCSIZE EQU   *-VTOC             SIZE OF VTOC ENTRY.             -CWB-\nVTOCEPB  EQU   10                 NUMBER OF ENTRIES PER BLOCK.    -CWB-\nVTOCBLSZ EQU   VTOCEPB*VTOCSIZE+8 SIZE OF VTOC BLOCK.             -CWB-\n         EJECT\n         IEFUCBOB LIST=YES                                        -HMD-\n         EJECT                                                 HD DEC86\n         DCBD  DSORG=PS,DEVD=TA                                HD DEC86\n         EJECT                                                 HD DEC86\nJFCB     DSECT                                                 HD DEC86\n         IEFJFCBN LIST=YES                                     HD DEC86\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TAPESDOC": {"ttr": 6657, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x891\\x8f\\x00\\x891\\x8f\\x108\\x01&\\x01&\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-11-14T00:00:00", "modifydate": "1989-11-14T10:38:00", "lines": 294, "newlines": 294, "modlines": 0, "user": "HMDEAN"}, "text": "TAPESCAN---FAST TAPE SUMMARY, ANALYSIS, AND COPYING PROGRAM\n** HOWARD M. DEAN  05/10/79\n\nGENERAL INFORMATION--\n\n\n'TAPESCAN' IS A FAST-EXECUTING PROGRAM WHICH PROVIDES A SUMMARY OF THE\nTHE CONTENTS OF A MAGNETIC TAPE VOLUME WHILE OPTIONALLY COPYING THE TAPE\nOR PORTION OF TAPE VIEWED TO ANOTHER TAPE. 'TAPESCAN' IS EXPECIALLY USE-\nFUL WHEN THE DATA SET NAMES AND CHARACTERISTICS OR THE INTERNAL (LABEL) OR THE\nVOLUME SERIAL OF THE TAPE TO BE SCANNED ARE UNKNOWN. 'TAPESCAN' HAS\nTHE FOLLOWING FEATURES:\n\n\n(1) 'TAPESCAN' PRODUCES, FOR VS/370 STANDARD LABELED TAPES, A HIGHLY\n    READABLE SUMMARY OF THE CONTENTS OF EACH LABEL FOR EVERY DATA SET\n    PROCESSED.  THE LABELS THEMSELVES AS WELL AS SOME DATA BLOCKS ARE\n    ALSO LISTED IN BOTH CHARACTER AND HEXIDECIMAL FORMAT.\n\n(2) 'TAPESCAN' IS DESIGNED TO HANDLE A WIDE RANGE OF USER, I/O, AND\n    OPERATOR ERRORS.  EXTENSIVE DIAGNOSTICS ARE PROVIDED.\n\n(3) 'TAPESCAN' HAS THE ABILITY TO LOOK PAST THE TWO CONTIGUOUS TAPE\n    MARKS OR THE \"EOV1\" LABEL THAT USUALLY INDICATES THE END OF\n    USABLE DATA ON A TAPE VOLUME.\n\n(4) AN ESTIMATE IS PROVIDED OF THE PHYSICAL LENGTH OF THE TAPE SCANNED.\n\n(5) WITH THE 'COPY' OPTION, YOU CAN COPY ANY NUMBER OF FILES FROM ONE\n    TAPE TO ANOTHER.  NORMALLY THIS IS DONE ONLY FROM UNLABELED TAPE TO\n    UNLABELED TAPE OR STANDARD LABEL TAPE TO STANDARD LABEL TAPE.  WHEN\n    COPYING STANDARD LABEL TAPES THE VOLUME LABEL MAY BE COPIED OR THE\n    EXISTING VOLUME SERIAL NUMBER OF THE OUTPUT TAPE MAY BE RETAINED.\n    IN ADDITION, DATA SETS EXISTING ON THE OUTPUT TAPE MAY BE RETAINED\n    WITH THE COPIED DATA SETS FOLLOWING THEM.\n\n\nINSTRUCTIONS FOR USE--\n\n'TAPESCAN' IS MOST CONVENIENTLY USED THROUGH ITS CATALOGED PROCEDURE.   O SCAN\n THE FOLLOWING WILL EXPLAIN THE USE OF THE PROCEDURE:\n\n      //  EXEC  TAPESCAN,(PROC SYMBOLIC PARAMETERS)\n\nTHE SYMBOLIC PARAMETERS ARE EXPLAINED BELOW (NONE ARE REQUIRED):\n\n      T      =  THE VOLUME SERIAL OF THE INPUT TAPE. EVEN THOUGH\n                THE TAPE WILL BE READ AS BLP, THE OPERATOR MUST\n                KNOW WHICH TAPE TO MOUNT. IF THIS PARAMETER IS\n                OMITTED, THE SERIAL 'VOLSER' WILL BE USED.\n\n      NAME   =  THE DSNAME OF A DATA SET ON THE TAPE. THIS CAN\n                REALLY BE ANY NAME BECAUSE LABEL PROCESSING IS\n                BYPASSED. IT SHOULD BE INCLUDED FOR OPERATOR\n                INFORMATION. NAMES SUCH AS 'MOUNT.TAPE.PLEASE' ARE\n                COMMON. THE DEFAULT FOR NAME IS 'INPUT'.\n\n      CLASS  =  THE PRINT OUTPUT CLASS OF THE TAPESCAN SYSPRINT\n                FILE. THE DEFAULT IS '*', WHICH WILL PUT THE\n                OUTPUT IN THE SAME CLASS A YOUR MESSAGE CLASS.\n\n      TMS    =  THIS PARAMETER IS REQUIRED FOR USE WITH THE\n                UCC-1 TAPE MANAGEMENT SYSTEM. IT SHOULD BE\n                LEFT ALONE UNDER MOST CIRCUMSTANCES. THE\n                DEFAULT VALUE IS 98000, WHICH MEANS BYPASS THE\n                LOOKUP ON THE TMS CATALOG.\n\n\n      LBL    =  THE LABEL OF THE FIRST DATASET ON THE TAPE WHICH\n                YOU ARE SCANNING. DEFAULT IS LABEL 1, LET THIS\n                PARAMETER DEFAULT.\n\n      BLP    =  SPECIFYS THAT LABEL PROCESSING IS TO BE BYPASSED.\n                DEFAULT IS BLP. THIS PARAMETER SHOULD ONLY BE\n                CHANGED TO WHEN USING THE COPY OPTION AND THE TAPE\n                FROM WHICH YOU ARE COPYING HAS STANDARD LABELS.\n\n\nWHEN USING THE COPY OPTION, A DD CARD MUST BE PROVIDED FOR THE OUTPUT TAPE:\n\n    //   EXEC TAPESCAN,T=_____,PARM=COPY\n    //OUTPUT DD UNIT=TAPE,VOL=SER=_____\n\nPRINTED OUTPUT--\n\nMOST OF THE PRINTOUT IS SELF-EXPLANATORY FOR THE MODERATELY EXPERIENCED USER.\nSUMMARY INFORMATION FOR A LABEL RECORD IS PRINTED BELOW THE RECORD.  AN APPRO-\nPRIATE LABEL IS GIVEN FOR EACH SUMMARIZED PIECE OF INFORMATION.  OTHER INFOR-\nMATION NOT SUMMARIZED BY \"TAPESCAN\" IS DESCRIBED IN THE IBM OS/360 MANUAL\n\"TAPE LABELS,\" GC28-6680.  THE LENGTH ESTIMATE, BLOCK COUNT, AND BYTE COUNT\nLISTED ARE ONLY FOR THOSE INPUT DATA SETS PROCESSED.  SEE APPENDIX B FOR MORE\nINFORMATION ON THE LENGTH ESTIMATE.  THE PHYSICAL DENSITY OF NINE TRACK TAPES\nCAN BE CHECKED BY LOOKING AT THE \"DEN\" VALUE SPECIFIED IN THE LENGTH ESTIMATE.\nTHE DENSITY VALUE STORED IN THE LABELS CAN BE WRONG.  A RETURN CODE OF 8 IS\nPROVIDED FOR TERMINAL ERRORS;  0 FOR NONTERMINAL ERRORS OR NO ERRORS.\nTHE LABEL INFORMATION IS REPEATED IN A TABULAR FORM AT THE END OF THE RUN.\n\n\nPARAMETERS--\n\nTHESE PARAMETERS ARE PLACED IN THE PARM FIELD OF THE EXEC STATEMENT.  THEY\nSTART AT THE BEGINNING OF THE PARM FIELD AND ARE SEPARATED FROM EACH OTHER\nBY COMMAS WITH NO INTERVENING BLANKS.  EXAMPLE:\n\n    //   EXEC  TAPESCAN,PARM=(LIST10,NOHEX,ERRLIM15),...\n\nNOCOUNT  THIS CAUSES \"TAPESCAN\" TO AVOID READING EVERY BLOCK OF THE\n         DATA SETS IT PROCESSES.  AS A RESULT THE FOLLOWING INFORMATION\n         IS NOT REPORTED:  (1) THE NUMBER OF PHYSICAL BLOCKS ACTUALLY IN\n         THE DATA SET;  (2) THE MINIMUM, MAXIMUM, AND AVERAGE BLOCK LENGTHS\n         IN THE DATA SET;  (3) THE TAPE LENGTH ESTIMATE;  (4) THE TOTAL\n         NUMBER OF BYTES IN THE DATA SETS PROCESSED.  ONCE OTHER INFORMATION\n         HAS BEEN PROCESSED, A FORWARD SPACE FILE I/O COMMAND IS ISSUED.\n         THIS CUTS DOWN THE I/O CHARGE BUT TIES UP THE SELECTOR SUB-\n         CHANNEL.  THUS, ITS USE IS NOT RECOMENDED.  \"NOCOUNT\" IS\n         INVALID WITH \"COPY\" OR \"EOVMOD\".\n\nCOPY     THIS OPTION CAUSES THE COPYING OF DATA AND TAPE MARKS FROM THE\n         INPUT TAPE TO THE OUTPUT TAPE.  FOR A COMPLETE DESCRIPTION OF\n         COPYING SEE APPENDIX C.\n\nNOVOLSER DURING A TAPE COPYING OPERATION, THIS SPECIFIES THAT THE\n         INPUT VOLUME LABEL RECORD, IF ANY, IS NOT TO BE COPIED TO\n         THE OUTPUT TAPE AND THE VOLUME LABEL RECORD ON THE OUTPUT\n         TAPE, IF ANY, IS TO BE LEFT AS IT IS.  \"NOVOLSER\" IS IGNORED\n         UNLESS \"COPY\" IS ALSO SPECIFIED.  FURTHER DETAILS CAN BE\n         FOUND IN APPENDIX C.\n\nEOVMOD   COPIES THE INPUT TAPE FOLLOWING THE LAST EXISTING DATA SET OF\n         THE OUTPUT TAPE.  IMPLIES \"COPY\".\n\nLIST___  \"TAPESCAN\" NORMALLY LISTS ONE LINE'S WORTH OF THE FIRST FOUR\n         BLOCKS FOLLOWING A TAPE MARK OR THE LOAD POINT.  BY SPECIFYING\n         \"LIST___\", WHERE THE BLANK IS FILLED IN WITH A NUMBER BETWEEN\n         ZERO AND TWO BILLION, ONE CAN MAKE \"TAPESCAN\" LIST EITHER MORE\n         OR FEWER BLOCKS.\n\nNOLIST   SAME AS \"LIST0\".\n\nNOHEX    SUPPRESSES PRINTING OF THE TWO LINES OF HEXADECIMAL CHARACTERS\n         THAT NORMALLY APPEAR BELOW THE CHARACTER LISTING OF EACH BLOCK\n         PRINTED.  NOTE THAT THE HEX EQUIVALENT OF EACH BYTE APPEARS\n         PRINTED VERTICALLY:\n\n            -NOW IS THE TIME....\n         4446DDE4CE4ECC4ECDC444444\n         0000566092038503945BBBB00\n\nNOSUMMARY\n         SUPPRESSES THE EXTENDED DESCRIPTION OF ANY LABEL RECORDS THAT\n         MAY BE ENCOUNTERED ON AN IBM STANDARD LABELED TAPE.  IN ADDITION,\n         THE \"VTOC\" LISTING AT THE END OF THE OUTPUT IS SUPPRESSED.\n\nMAXTM___ \"TAPESCAN\" NORMALLY PROCESSES ALL OF THE TAPE MARKS UP TO AND\n         INCLUDING THE PAIR OF TAPE MARKS OR THE \"EOV1\" LABEL THAT\n         INDICATES LOGICAL END OF VOLUME.  SPECIFYING MAXTM___ SETS A\n         LOWER LIMIT ON THE NUMBER OF TAPE MARKS PROCESSED CAUSING\n         TERMINATION AFTER THE INDICATED NUMBER OF TAPE MARKS OR END\n         OF VOLUME, WHICHEVER OCCURS FIRST.\n\nSKIPTM___\n         \"TAPESCAN\" NORMALLY STARTS WITH THE FIRST DATA SET ON THE\n         TAPE IMMEDIATELY FOLLOWING THE LOAD POINT.  \"SKIPTM___\"\n         CAUSES THE INDICATED NUMBER OF TAPE MARKS TO BE SKIPPED\n         FIRST.  AS WITH \"MAXTM__\", \"SKIPTM__\" WILL NOT GO PAST\n         THE LOGICAL END OF VOLUME.\n\nMAXEOV__ THIS RESETS THE MAXIMUM LIMIT ON THE NUMBER OF LOGICAL\n         END-OF-VOLUME INDICATIONS THAT MAY BE PROCESSED.  USE OF\n         THIS PARAMETER IS NECESSARY FOR SCANNING BEYOND THE FIRST\n         LOGICAL END OF VOLUME.  NEITHER \"MAXTM___\" NOR \"MAXEOV__\"\n         IS EXCEEDED.  FOR MORE INFORMATION ON RETREIVING INFORMATION\n         \"LOST\" PAST END-OF-VOLUME, SEE APPENDIX A.\n\nSKIPEOV__\n         THIS CAUSES BYPASSING OF THE INDICATED NUMBER OF LOGICAL\n         END-OF-VOLUME INDICATIONS BEFORE PROCESSING OF DATA STARTS.\n         \"MAXEOV__\" MUST BE SET AT LEAST ONE GREATER THAN \"SKIPEOV__\"\n         FOR ANY PROCESSING TO OCCUR.  IF BOTH \"SKIPEOV__\" AND\n         \"SKIPTM__\" ARE SPECIFIED, THEN SKIPPING OCCURS UNTIL BOTH\n         ARE SATISIFIED (WHICHEVER REQUIRES THE MOST SKIPPING).\n\nERRLIM___\n         TAPE I/O ERRORS ARE COUNTED BY \"TAPESCAN\".  NORMALLY\n         EXECUTION IS TERMINATED IF 50 ERRORS ARE ENCOUNTERED.\n         \"ERRLIM___\" CAN BE USED TO CHANGE THIS LIMIT.\n\n\nSOURCE OF PROGRAM--\n\nAN EARLY VERSION OF \"TAPESCAN\", CALLED \"PRECI\", WAS WRITTEN BY DOUGLAS CLAPP OF\nTHE UNIVERSITY OF NORTH CAROLINA DEPARTMENT OF EPIDEMIOLOGY.  THE CURRENT\nVERSION WAS WRITTEN BY WILL DALAND OF THE INSTITUTE FOR RESEARCH IN SOCIAL\nSCIENCE AT UNC AND PURCHASED FOR USE AT GSFC BY THE SPACE AND APPLICATIONS\nCOMPUTING CENTER.  LOCAL MODIFICATIONS AND INFORMATION IS BEING PROVIDED BY\nRANDY BARTH.\n\n\n\n***APPENDIX A:  GOING PAST LOGICAL END OF VOLUME***\n\nAFTER YOU HAVE USED \"TAPESCAN\" TO EYEBALL THE CONTENTS OF A TAPE FOLLOWING AN\nEND OF VOLUME INDICATION YOU MAY WANT TO RETRIEVE SOME OF IT.  THIS CAN BE\nDONE USING JCL LIKE THE FOLLOWING:\n\n    //   EXEC  TAPESCAN,PARM=(NOLIST,COPY,MAXEOV2,SKIPEOV1),T=____\n    //OUTPUT DD UNIT=2400-9,VOL=SER=_____\n\nTHIS WILL COPY FROM THE FIRST TO SECOND END-OF-VOLUME INDICATIONS.  IT OFTEN\nHAPPENS THAT THE DATA SET IMMEDIATELY FOLLOWING THE LOGICAL END OF VOLUME\nCONTAINS I/O ERRORS IN ITS FIRST BLOCK CAUSED BY THE OVERWRITTING OF THE EOV.\nEROPT=ABE IS DEFAULTED IN THE PROGRAM, BUT MAY BE CHANGED BY OVERRIDING\n\"EROPT=___\" ON THE DD CARD.  THE CHOICE DEPENDS ON HOW THE BAD BLOCK IS TO\nBE HANDLED.  IF ACCEPTED, THE BAD BLOCK MAY NOT BE PROCESSABLE BY NORMAL\nPROGRAMS (PARTICULARLY RECFM=V DATA).  THESE PROBLEMS CAN BE CORRECTED OFTEN\nBY FURTHER USES OF \"TAPESCAN\" WITH VARIOUS DCB OVERRIDES.  VARIOUS DETAILS AND\nLIKELY PROBLEMS RELATED TO GOING PAST END-OF-VOLUME INDICATIONS ARE NOT\nHERE.  EVEN EXPERIENCED USERS SHOULD CONSIDER CONSULTING THE MANUAL BEFORE\nATTEMPTING TO RECOVER SUCH DATA.\n\n\n\n***APPENDIX B:  LENGTH ESTIMATION***\n\nTHE LENGTH ESTIMATE IS BASED ON THE FOLLOWING ASSUMPTIONS:\n\n(1) THE LENGTH OF A TAPE MARK IS 3.75 INCHES FOR 9 TRACK TAPES.\n\n(2) THE EFFECTIVE LENGTH OF AN INTERBLOCK GAP IS .601 INCHES FOR 800\n    BPI NINE TRACK, .651 FOR 1600 BPI.\n\n(3) THE DENSITY OF THE TAPE FOR 9 TRACK TAPES IS SENSED AFTER THE\n    LAST TAPE MARK PROCESSED IS READ, REGARDLESS OF THE DENSITY\n    SPECIFIED IN THE DCB OR SENSED AT THE LOAD POINT.\n\n(4) IF THE LENGTH ESTIMATE IS MADE FOR A PORTION OF A TAPE BETWEEN\n    TWO TAPE MARKS, THE LAST TAPEMARK IS INCLUDED IN THE ESTIMATE, BUT\n    THE FIRST IS NOT.  DUE TO ROUNDING ERRORS THE ESTIMATE MAY BE AS\n    MUCH AS TWO INCHES LESS THAN THE ABOVE SPECIFICATIONS INDICATE.\n\n(5) I/O ERRORS CAN INVALIDATE RESULTS.  MINOR DATA CHECKS AND NOISE\n    USUALLY DO NOT CAUSE MUCH INACCURACY.  BYTES READ IN I/O ERRORS\n    ARE COUNTED IN THE BYTE TOTAL JUST LIKE OTHER BYTES.  I/O ERRORS\n    TEND TO MAKE THE LENGTH ESTIMATE SMALLER THAN THE ACTUAL LENGTH.\n\n\n***APPENDIX C:  COPYING TAPES WITH \"TAPESCAN\"***\n\nCOPYING ALL OR PART OF A TAPE IS ACCOMPLISHED BY USING THE PARAMETER \"COPY\" IN\nTHE EXEC STATEMENT AND PROVIDING AN \"OUTPUT\" DD STATEMENT DEFINING THE OUTPUT\nTAPE.  THE FILES COPIED ARE ALL THOSE PROCESSED ON THE INPUT TAPE.  THE\nLOCATION ON THE OUTPUT TAPE OF THE FIRST FILE TO BE WRITTEN MAY BE DEFINED IN\nTHE LABEL PARAMETER OF THE OUTPUT TAPE'S DD CARD.  THIS DATA SET SEQUENCE\nNUMBER IS SPECIFIED AS THOUGH IT WERE FOR AN UNLABELED TAPE, REGARDLESS OF THE\nPRESENCE OR ABSENCE OF LABELS (I.E., LABELS ARE COUNTED AS DATA SETS FOR THIS\nPURPOSE).  THUS, \"LABEL=(4,SL)\" REFERS TO THE HEADER LABEL FILE WHICH PRECEEDS\nTHE SECOND OS DATA SET ON THE TAPE.  PHYSICAL FILES ARE COPIED EXACTLY EXCEPT\nFOR \"NOVOLSER\" PROCESSING.  FOR THE PURPOSE OF \"NOVOLSER\" PROCESSING, AN INPUT\nVOLUME LABEL IS DEFINED AS THE FIRST DATA BLOCK AFTER THE LOAD POINT REGARDLESS\nOF LENGTH OR OTHER CHARACTERISTICS.  AN OUTPUT VOLUME LABEL IS DEFINED AS\nEITHER AN IBM STANDARD VOLUME LABEL OR AN ANSI VOLUME LABEL IMMEDIATELY\nFOLLOWING THE LOAD POINT.  A TAPE IS TREATED AS NOT HAVING A VOLUME LABEL\nIF ITS JCL LABEL PARAMETER IS NL, LTM, OR BLP.  IF THE OUTPUT TAPE'S FILE\nSEQUENCE NUMBER IS 1 (OR 0) AND AL, AUL, SL, OR SUL IS SPECIFIED, THEN THE TAPE\nIS CHECKED TO MAKE SURE IT HAS EITHER THE PROPER IBM OR ANSI STANDARD LABELS.\nNOTE THAT THE VOLUME SERIAL NUMBER IS CHECKED FOR SL LABELS BUT NOT FOR AL.\nIF AN IMPROPER LABEL IS DETECTED THEN PROCESSING IS TERMINATED.  IF EITHER THE\nINPUT OR OUTPUT TAPE HAS A LEGITIMATE VOLUME LABEL THEN NEITHER NL NOR LTM MAY\nBE SPECIFIED FOR THAT TAPE.  THE FOLLOWING ILLUSTRATES COPYING OF THE SECOND\nAND THIRD FILES OF A NINE  TRACK UNLABELED TAPE ONTO THE EIGTH AND NINTH FILES\nOF ANOTHER UNLABELED TAPE:\n\n    //   EXEC  TAPESCAN,PARM=(COPY,SKIPTM1,MAXTM3),T=XX7777\n    //OUTPUT DD UNIT=TAPE,VOL=SER=YY9999,LABEL=(8,BLP)\n\nAN IMPLIED SL SPECIFICATION ON THE OUTPUT DD CARD IS MODIFIED BY \"TAPESCAN\"\nTO BLP.  AS ANOTHER EXAMPLE, WE COPY THE FIRST TWO SL FILES FROM ONE TAPE\nTO BECOME THE FORTH AND FIFTH SL FILES ON ANOTHER TAPE:\n\n    //   EXEC TAPESCAN,PARM=(COPY,MAXTM6,NOTSER),VOL=INTAPE\n    //OUTPUT DD UNIT=2400-9,VOL=SER=OUTTAP,LABEL=(10,BLP)\n\nTHE DATA SET SEQUENCE NUMBERS IN THE LABELS REMAIN ONE AND TWO RESPECTIVELY\nEVEN THOUGH THEY ARE NOW LOCATED AS FILES FOUR AND FIVE.  EXPERIMENTS INDICATE\nTHAT THE COPIED FILES CAN BE REFERENCED AS FILES FOUR AND FIVE THROUGH STANDARD\nOS JCL (I.E., \"LABEL=(4,SL)\").  THIS IS NOT SUPPORTED BY IBM, HOWEVER.\n\nUSING THE \"EOVMOD\" PARAMETER CAUSES ALL THE DATA SETS UP TO BUT NOT INCLUDING\nTHE LOGICAL END-OF-VOLUME INDICATOR ON THE OUTPUT TAPE TO BE BYPASSED BEFORE\nCOPYING BEGINS.  THIS, OF NECESSITY, IMPLIES \"NOVOLSER\" PROCESSING.\n\n\"TAPESCAN\" AND OTHER PROGRAMS USING THE SAME TAPE(S) IN THE SAME JOB SOMETIMES\nDO NOT MIX TOO WELL.  IF YOU MUST DO THIS, THEN USE A DISPOSITION OF \"KEEP\"\nAND DO NOT USE \"VOL=(,RETAIN,...)\".\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TSOENTER": {"ttr": 6663, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x891\\x8f\\x00\\x891\\x8f\\x108\\x00\\xa1\\x00\\xa1\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-11-14T00:00:00", "modifydate": "1989-11-14T10:38:00", "lines": 161, "newlines": 161, "modlines": 0, "user": "HMDEAN"}, "text": "         MACRO\n&NAYME   TSOENTER &FAKE,&BASE=12,&REGS=YES,&PL=CPPL,&ADBIT=24,         X\n               &WORK=0,&DSECT=NO,&SP=0,&CPR=NO,&XA=NO,&RMOD=24\n.*\n         GBLC  &R,&FSIZE,&POOL\n         GBLB  &XAM                                         *HMD 11/86*\n         LCLA  &A\n         LCLC  &NAME,&FNAME             TO HOLD CSECT NAME    @HMD78174\n         LCLB  &OPTS(8),&BIT\n         LCLC  &BASEREG\n         LCLC  &SECT                    CURRENT CSECT NAME    @HMD78174\n         LCLC  &YEAR                                          @HMD86107\n         LCLC  &LAB1,&LAB2,&LAB3,&LAB4  LABEL VARIABLES       @HMD86107\n.*\n&FNAME   SETC  'GM'.'&SYSNDX'           SET GETMAIN NAME    *HMD 11/86*\n&FSIZE   SETC  '&FNAME'.'S'             SET SIZE EQUATE LABEL\n&POOL    SETC  '&SP'\n&XAM     SETB  ('&XA' EQ 'YES')         SET XA FLAG         *HMD 11/86*\n&YEAR    SETC  '19'.'&SYSDATE'(7,8)                           @HMD76107\n&SECT    SETC  '&SYSECT'                SET CONTROL SECT NAME @HMD78174\n&NAME    SETC  '&NAYME'                 HOLD CSECT NAME       @HMD78174\nTSODSECT DSECT ,                        DEFINE NAME OF DSECT\nTSOSAVE  DS    18F .                    FIRST SAVE AREA\n         CPPL  DSECT=NO                 PARAMETER LIST\n&A       SETA  1\n.A1      AIF   (&A GT N'&PL).L1\n&OPTS(1) SETB  ((&OPTS(1))OR('&PL(&A)' EQ 'MESSAGE'))\n&OPTS(2) SETB  ((&OPTS(2))OR('&PL(&A)' EQ 'PARSE'))\n&OPTS(3) SETB  ((&OPTS(3))OR('&PL(&A)' EQ 'IO'))\n&OPTS(4) SETB  ((&OPTS(4))OR('&PL(&A)' EQ 'CSCAN'))\n&OPTS(5) SETB  ((&OPTS(5))OR('&PL(&A)' EQ 'DAIR'))\n&A       SETA  &A+1\n         AGO   .A1\n.L1      ANOP\nTSOECB   DS    F .                      DEFINE COMMAND ECB\n.LL1     AIF   (NOT &OPTS(1)).L2\n         MNOTE 0,'MESSAGE PARM LIST UNDEFINED'\n.L2      AIF   (NOT &OPTS(2)).L3\n         PPL   DSECT=NO                 PARSE PARM LIST\n.L3      AIF   (NOT &OPTS(3)).L4\n         IOPL  DSECT=NO                 I/O PARAMETER LIST\n.L4      AIF   (NOT &OPTS(4)).L5\n         CSPL  DSECT=NO                 CMD SCAN PARM LIST\n.L5      AIF   (NOT &OPTS(5)).L6\n         DAPL  DSECT=NO                 DAIR PARM LIST\n.L6      ANOP\nTSOWORK  DS    0D .                     ALIGN TO DOUBLE-WORD\nTSOUSER  EQU   * .                      GIVE ALTERNATE NAME\n         AIF   ('&REGS' NE 'YES').NOREGS\n         EJECT\n         REGS\n&R       SETC  'R'\n.NOREGS  AIF   ('&DSECT' EQ 'NO').GEN\n         MEXIT\n.GEN     EJECT                                                @HMD78174\n         AIF   ('&NAME' EQ '').NONAME                         @HMD78174\n&NAME    CSECT                                                @HMD78174\n         AGO   .GEN1                                          @HMD78174\n.NONAME  AIF   ('&SECT' NE '').GEN0                           @HMD78174\n         MNOTE 16,'CSECT NAME MISSING, GENERATION TERMINATED'\n         MEXIT                                                @HMD86107\n.GEN0    ANOP                                                 @HMD78174\n&SECT    CSECT                                                @HMD78174\n&NAME    SETC  '&SECT'            SET NAME TO CSECT NAME      @HMD78174\n.GEN1    ANOP\n         AIF   (NOT &XAM).XAM1                              *HMD 11/86*\n         AIF   ('&ADBIT' EQ '24' OR '&ADBIT' EQ '31').XAM2  *HMD 11/86*\n         MNOTE 20,'MVS/XA ADDRESSING MODE &ADBIT IS INVALID'\n         MEXIT                                              *HMD 11/86*\n.XAM2    ANOP                                               *HMD 11/86*\n&NAME    AMODE &ADBIT                                       *HMD 11/86*\n         MNOTE *,'MVS/XA ADDRESSING MODE IS &ADBIT'         *HMD 11/86*\n         AIF   ('&ADBIT' EQ '24').XAM3                      *HMD 11/86*\n         SPLEVEL SET=2    .       SET XA MODE FOR 31 BIT    *HMD 11/86*\n         AIF   ('&RMOD' EQ '24' OR '&RMOD' EQ '31').XAM0\n         AIF   ('&RMOD' EQ 'ANY').XAM0\n         MNOTE 20,'MVS/XA RESIDENCY MODE OF &RMOD IS INVALID'\n.XAM0    ANOP\n         AIF   ('&RMOD' EQ '24').XAM3\n&NAME    RMODE ANY                                          *HMD 11/86*\n         AGO   .XAM1                                        *HMD 11/86*\n.XAM3    ANOP                                               *HMD 11/86*\n&NAME    RMODE 24                                           *HMD 11/86*\n.XAM1    ANOP                                               *HMD 11/86*\n&LAB1    SETC  'IHB'.'&SYSNDX'    SET LABEL NAME            *HMD 04/86*\n&LAB2    SETC  'IHC'.'&SYSNDX'    SET LABEL NAME            *HMD 04/86*\n&LAB3    SETC  'IHD'.'&SYSNDX'    SET LABEL NAME            *HMD 04/86*\n         SPACE 1                                            *HMD 04/86*\n         B     &LAB1-&NAME.(,15)        BRANCH AROUND IDS     @HMD78174\n         DC    AL1(&LAB1-&LAB2)         LENGTH OF ID AREA   *HMD 04/86*\n&LAB2    DC    C'&NAME  &SYSDATE'       PGM ID AND DATE     *HMD 04/85*\n         AIF   ('&CPR' EQ 'NO').NOCPR   BYPASS COPYRIGHT    *HMD 04/85*\n         DC    C' COPYRIGHT (C) &YEAR HOWARD M. DEAN'       *HMD 04/85*\n.NOCPR   ANOP                                               *HMD 04/85*\n         SPACE 1                                            *HMD 04/86*\n&LAB1    DS    0H                       POINT TO BRANCH TO    @HMD78174\n         STM   14,12,12(13)             SAVE REGISTERS      *HMD 04/86*\n         AIF   (T'&BASE NE 'N').LUSE1\n&BASEREG SETC  '&R&BASE'\n         AGO   .LUSE2\n.LUSE1   ANOP\n&BASEREG SETC  '&BASE'\n.LUSE2   ANOP\n         LUSE  &NAME,&BASEREG           PERMANANT BASE        @HMD78174\n         CNOP  0,4                      ALIGNMENT             @HMD78174\n         L     &BASEREG,&LAB3-&NAME.(,15)\n*                                       ESTABLISH BASE REG  *HMD 04/86*\n         B     &LAB3+L'&LAB3            BRANCH AROUND ADDR  *HMD 04/86*\n         SPACE 1\n&LAB3    DC    A(&NAME)                 CSECT ADDRESS       *HMD 04/86*\n         SPACE 1\n         LR    &R.2,1 .                 SAVE CPPL POINTER\n&FSIZE   EQU   (((TSOUSER-TSODSECT)+(&WORK)+7)/8)*8 .  AREA LENGTH\n         AIF   (&XAM).X003\n&FNAME   GETMAIN R,LV=&FSIZE,SP=&SP\n         AGO   .X004\n.X003    ANOP\n         SPACE 1\n&FNAME   GETMAIN RU,LV=&FSIZE,SP=&SP,LOC=RES\n.X004    ANOP\n         SPACE 1\n         ST    13,4(,1) .               CHAIN\n         ST    1,8(,13) .               SAVE\n         LR    &R.13,1 .                AREAS\n         LUSE  TSODSECT,&R.13 .         ESTABLISH ADDRESSABILITY\n         MVC   CPPL(CPPLLEN),0(&R.2) .  COPY PARM LIST\n         AIF   (NOT &OPTS(2)).NPARSE\n         MVC   PPLUPT(4),CPPLUPT .      USER PROFILE TAB\n         MVC   PPLECT(4),CPPLECT\n         MVC   PPLCBUF(4),CPPLCBUF      INIT CMD BUFFER       @HMD78174\n         LA    &R.0,PPLRANS .              LOAD ANSWER PLACE\n         ST    &R.0,PPLANS\n         LA    &R.0,TSOECB\n         ST    &R.0,PPLECB\n&BIT     SETB  1\n.NPARSE  AIF   (NOT &OPTS(3)).NIO\n         MVC   IOPLECT(4),CPPLECT\n         MVC   IOPLUPT(4),CPPLUPT\n         AIF   (&BIT).Q1\n         LA    &R.0,TSOECB\n.Q1      ST    &R.0,IOPLECB\n&BIT     SETB  1\n.NIO     AIF   (NOT &OPTS(5)).NDAIR\n         MVC   DAPLUPT(4),CPPLUPT\n         MVC   DAPLECT(4),CPPLECT\n         MVC   DAPLPSCB(4),CPPLPSCB\n         AIF   (&BIT).Q2\n&BIT     SETB  1\n         LA    &R.0,TSOECB\n.Q2      ST    &R.0,DAPLECB\n.NDAIR   AIF   (NOT &OPTS(4)).NCSCAN\n         MVC   CSPLUPT(4),CPPLUPT\n         MVC   CSPLECT(4),CPPLECT\n         MVC   CSPLCBUF(4),CPPLCBUF     INIT CMD BUFFER       @HMD78174\n         AIF   (&BIT).Q3\n&BIT     SETB  1\n         LA    &R.0,TSOECB\n.Q3      ST    &R.0,CSPLECB\n.NCSCAN  INUSE\n         EJECT\n.MEND    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TSOLEAVE": {"ttr": 6667, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x891\\x8f\\x00\\x891\\x8f\\x108\\x00+\\x00+\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-11-14T00:00:00", "modifydate": "1989-11-14T10:38:00", "lines": 43, "newlines": 43, "modlines": 0, "user": "HMDEAN"}, "text": "         MACRO\n&NAME    TSOLEAVE &SPLV=TSOLEN,&ISN=,&RETCODE=0\n         GBLC  &R,&FSIZE,&POOL\n         GBLB  &XAM                     XA-MODE GLOBAL      *HMD 11/86*\n         LCLB  &RTYPE\n.*       TSOLEAVE MACRO                  BRUCE M. DANE\n.*       LAST UPDATED:                  06 NOV 1973\n.*       LAST UPDATED:                  24 NOV 1986         *HMD 11/86*\n.*       HOWARD M. DEAN - AMERICAN PRESIDENT LINES          *HMD 11/86*\n.*       MACRO GENERATES RE-ENTRANT CODE\n.*\n&NAME    LR    1,&R.13 .                LOAD RETURN ADDRESS\n         L     &R.13,4(0,&R.13) .       LOAD REGISTER POINTER\n         AIF   ('&RETCODE' EQ '').FREE1\n         AIF   ('&RETCODE'(1,1) NE '(').FREE1\n         ST    &RETCODE(1),16(,&R.13) . SAVE RETURN CODE IN R15 PLACE\n&RTYPE   SETB  1\n.FREE1   ANOP\n*        RETURN DYNAMIC SAVE AREA TO SYSTEM\n         FREEMAIN RU,LV=&FSIZE,A=(1),SP=&POOL ISSUE FREEMAIN\n.RETTEST AIF   (&RTYPE).R0\n         AIF   ('&RETCODE' EQ '').RETEQ0 * MESSAGE, ASSUME ZERO\n         AIF   (T'&RETCODE NE 'N').REGLD1 * RETURN NUMBER?\n         AIF   (&RETCODE EQ 0).R0       * RETCODE=0\n         AGO   .REGLA                   * LOAD ADDRESS ON RETCODE\n.RETEQ0  MNOTE 0,'*** WARNING *** RETCODE ASSUMED ZERO (0)'\n         AGO   .R0\n.REGLD1  L     &R.15,&RETCODE .         LOAD SAVED RETURN CODE\n         AGO   .BR14\n.REGLA   LA    &R.15,&RETCODE .         LOAD REQUESTED RETURN CODE\n         AGO   .BR14\n.R0      LM    14,12,12(13) .           RELOAD CALLERS' REGS\n         AIF   (&RTYPE).R00\n         SLR   15,15 .                  CLEAR RETURN CODE\n         AGO   .R00\n.BR14    LM    0,12,20(13) .            LOAD SAVED REGS\n         L     14,12(0,13) .            AND RETURN\n.R00     ANOP\n         BR    14 .                     RETURN TO CALLER\n         AGO   .ISNCHEK\n.ISNCHEK AIF   ('&ISN' EQ '').MEND\n         &ISN\n.MEND    MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "WRU": {"ttr": 6669, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x891\\x8f\\x00\\x891\\x8f\\x108\\x00D\\x00D\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-11-14T00:00:00", "modifydate": "1989-11-14T10:38:00", "lines": 68, "newlines": 68, "modlines": 0, "user": "HMDEAN"}, "text": "WRU      TITLE 'W H O    A R E    Y O U    F O R   T S O'\nWRU      TSOENTER PL=(CPPL,IO),REGS=YES,WORK=STORLEN,CPR=YES\n         L     1,CPPLPSCB          GET  PSCB  ADDRESS\n*  HOUSEKEEPING - INITIALIZE                                *HMD 02/87*\n         MVC   ASYSID(LSYSID),SYSID                         *HMD 02/87*\n         MVC   USERSEG(4),SEGA     MOVE IN SEGMENT BLOCK    *HMD 02/87*\n         MVC   SIDSEG(4),SEGB       \"    \"   \"       \"      *HMD 02/87*\n         MVC   UID,BLANKS          CLEAR USER ID FIELD      *HMD 02/87*\n         MVC   SID,BLANKS          CLEAR SYSTEM ID FIELD    *HMD 02/87*\n*  END OF HOUSEKEEPING                                      *HMD 02/87*\n         SLR   2,2                 CLEAR REGISTER           *HMD 02/87*\n         IC    2,7(1)              GET  USERID  LENGTH      *HMD 02/87*\n         BCTR  2,0                 DECREMENT FOR EXECUTE    *HMD 02/87*\n         EX    2,MOVEID            MOVE  IN  USERID\n         LA    2,L'USERSEG+1(2)    LENGTH + HEADER          *HMD 02/87*\n         STH   2,USERSEG           SAVE IN SEGMENT          *HMD 02/87*\n         L     3,CVTPTR            GET CVT ADDRESS          *HMD 02/87*\n         USING CVT,3\n         L     3,CVTSMCA           GET SMCA ADDRESS\n         MVC   SID+1(4),SMCASID-SMCABASE(3)                 *HMD 02/87*\n*                                  MOVE IN SYSTEM ID        *HMD 02/87*\n         LA    1,3                 NUMBER OF SEGMENTS       *HMD 02/87*\n         ST    1,OLD               SAVE IN OLD              *HMD 02/87*\n         LA    1,ASYSID            GET MESSAGE ADDRESS      *HMD 02/87*\n         ST    1,OLD+4             SAVE IN OLD              *HMD 02/87*\n         LA    1,USERSEG           GET USER SEGMENT         *HMD 02/87*\n         ST    1,OLD+8             SAVE IN OLD              *HMD 02/87*\n         LA    1,SIDSEG            GET SYSTEM ID SEG ADDR   *HMD 02/87*\n         ST    1,OLD+12            SAVE IN OLD              *HMD 02/87*\n         XC    PTPB(PTPBL),PTPB    CLEAR PARM BLOCK         *HMD 02/87*\n         XC    TSOECB,TSOECB       CLEAR ECB                *HMD 02/87*\n         SPACE 2                                            *HMD 02/87*\n         PUTLINE PARM=PTPB,ECB=TSOECB,                      *HMD 02/87*X\n               OUTPUT=(OLD,TERM,SINGLE,INFOR),              *HMD 02/87*X\n               MF=(E,IOPL),TERMPUT=ASIS                     *HMD 02/87*\n         SPACE 2                                            *HMD 02/87*\n         TSOLEAVE  ISN=LTORG       GOOD  BYE\n         SPACE 2                                            *HMD 02/87*\nMOVEID   MVC   UID(0),0(1)         MOVE IN USERID           *HMD 02/87*\nBLANKS   DC    CL8' '              CLEAR BLANKS QUICKLY     *HMD 02/87*\n         SPACE 2                                            *HMD 02/87*\nSYSID    DC    AL2(LSYSID),AL2(0)  OFFSET OF PRIME SEGMENT  *HMD 02/87*\nMSGID    DC    C'IKJ99900I '       MESSAGE ID               *HMD 02/87*\nTITLE    DC    C'You are user '\nTITLE2   DC    C' and you are on system'                    *HMD 02/87*\nNLCHAR   DC    X'4015'                                      *HMD 02/87*\nLSYSID   EQU   *-SYSID\n         SPACE 2\nSEGA     DC    AL2(0),AL2(TITLE2-MSGID) AFTER THE TEXT      *HMD 02/87*\nSEGB     DC    AL2(9),AL2(NLCHAR-MSGID) AFTER THE TEXT      *HMD 02/87*\nTSODSECT DSECT                                              *HMD 02/87*\nPTPB     PUTLINE MF=L                                       *HMD 02/87*\nPTPBL    EQU   *-PTPB              PUTLINE PARM BLK LENGTH  *HMD 02/87*\nOLD      DS    F                                            *HMD 02/87*\n         DS    A                                            *HMD 02/87*\n         DS    A                                            *HMD 02/87*\n         DS    A                                            *HMD 02/87*\nASYSID   DS    (LSYSID)C           DEFINE STORAGE FOR MSG   *HMD 02/87*\nUSERSEG  DS    F                                            *HMD 02/87*\nUID      DS    CL7                                          *HMD 02/87*\nSIDSEG   DS    F                                            *HMD 02/87*\nSID      DS    CL5                 SYSTEM ID SEGMENT        *HMD 02/87*\nSTORLEN  EQU   *-TSOUSER                                    *HMD 02/87*\n         EJECT\n         CVT DSECT=YES,LIST=YES\n         EJECT                                              *HMD 02/87*\n         IEESMCA                                            *HMD 02/87*\n         END WRU\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "XABSM": {"ttr": 6671, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x891\\x8f\\x00\\x891\\x8f\\x108\\x00\\x13\\x00\\x13\\x00\\x00\\xc8\\xd4\\xc4\\xc5\\xc1\\xd5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-11-14T00:00:00", "modifydate": "1989-11-14T10:38:00", "lines": 19, "newlines": 19, "modlines": 0, "user": "HMDEAN"}, "text": "         MACRO\n&LAB     XABSM &MODE=24\n         AIF   ('&LAB' EQ '').NOLAB CHECK FOR LABEL\n&LAB     DS    0H                  MVS/XA SET MODE MACRO\n.NOLAB   ANOP\n         AIF   ('&MODE' EQ '31').XAON\n         AIF   ('&MODE' EQ '24').XAOFF\n         MNOTE 8,'MODE &MODE INVALID'\n.XAON    ANOP                      GO TO 31 BIT MODE\n         CNOP  2,4                 FORCE FULL WORD ALIGNMENT\n         LA    R1,*+14 .              POINT TO AMODE = 31 CODE\n         O     R1,*+6 .               TURN ON AMODE = 31 BIT\n         BSM   0,R1 .                 BRANCH TO AMODE = 31 CODE\n         DC    X'80000000'         AMODE = 31 BIT\n         AGO   .MACEND\n.XAOFF   LA    R1,*+6 .               POINT TO AMODE = 24 CODE\n         BSM   0,R1 .                 BRANCH TO AMODE = 24 CODE\n.MACEND  ANOP\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT136/FILE136.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT136", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}