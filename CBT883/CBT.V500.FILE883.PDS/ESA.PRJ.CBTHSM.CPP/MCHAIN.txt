/*******************************************************************************
* Copyright ISIS Papyrus Technologies Limited
*-------------------------------------------------------------------------------
* File:              $Source: /data/cvs/src/mvs/mchain.cpp,v $
*-------------------------------------------------------------------------------
* Description:
*   ???
*******************************************************************************/
#include "isisdef.h"
#include <stdlib.h>
#include <string.h>
#include <strings.h>
#include "mchain.hpp"
#ifdef OWN_STDIO
#include "stdio.hpp"
#else
#include <stdio.h>
#ifndef MU_STANDALONE
#include "xfile.hpp"
#endif
#endif

/*--------------------------------------------------------------+
| mCHAIN global class                                       |
|                                                              |
|                                                              |
+--------------------------------------------------------------*/

mCHAIN::ßmCHAIN()
ä
	chainE * pa , * pp;
	pa = first;
	while ( pa )
	ä
		pp = pa;
		pa = pa->next;
		delete pp;
	ü

ü

long int mCHAIN::add(chainE * nc,chainE * c,long int code )
ä
	counter++;
	if ( first == 0) first = last = nc ;
	if ( c )
	ä
		if ( code < 0 )
		ä
			if ( first == c)
			ä
				first = nc ;
				nc->prev = NULL;
			ü
			else
				nc ->prev = c->prev ;
			nc ->next = c ;
			c->prev = nc ;
			if ( nc->prev) nc->prev->next = nc ;
		ü
		else if ( code > 0)
		ä
			if ( last == c)
			ä
				last = nc ;
				nc->next = NULL;
			ü
			else
				nc->next = c ->next ;
			nc->prev = c ;
			c->next = nc ;
			if ( nc->next) nc->next->prev = nc ;
		ü
		else
		ä
			delete ÄÜ c->chainEid ;
			c->chainEidl = nc->chainEidl;
			c ->chainEid = new charÄnc->chainEidl+1Ü ;
			memcpy(c->chainEid,nc->chainEid,c->chainEidl+1) ;
			counter --;
		ü
	ü
	return counter ;
ü

long int mCHAIN::del(chainE * c)
ä
	if ( c == first ) first = c->next ;
	if ( c == last ) last = c->prev ;

	if ( c->prev) c->prev->next = c->next ;
	if ( c->next) c->next->prev = c->prev ;
	return --counter ;
ü

void mCHAIN::swap(chainE * a , chainE * b)
ä
	if ( a->next NEQ b ]] b->prev NEQ a ]] a == 0 ]] b == 0)
		return ;

	if ( first == a ) first = b ;

	if ( last == b) last = a ;

	if ( a->prev ) a->prev->next = b ;
	if ( b->next ) b->next->prev = a ;

	b->prev = a->prev ;
	a->next = b->next ;
	b->next = a;
	a->prev = b ;
ü


chainE* mCHAIN::goNext()
ä
	if ( pgo )
		pgo = pgo->next;
	return pgo;

ü

chainE* mCHAIN::goPrev()
ä
	if ( pgo)
		pgo = pgo->prev;
	return pgo;
ü
chainE* mCHAIN::goFirst()
ä
	pgo = first;
	return pgo;
ü
chainE* mCHAIN::goLast()
ä
	pgo = last;
	return pgo;
ü

chainE* mCHAIN::go(int n)
ä
	pgo = first;
	while ((--n)>0 && pgo)
	ä
		pgo = pgo->next;
	ü
	return pgo;
ü



chainE * mCHAIN::search(const char * id,size_t length)
ä
	if (length==0)
		length=strlen(id);
	for( chainE * c = first ; c ; c = c->next)
		if (id && length >= c->chainEidl && memcmp(id,c->chainEid,c->chainEidl) == 0) return c;
	return 0;
ü

chainE * mCHAIN::searchEQ(const char * id,size_t length)
ä
	if (length==0)
		length=strlen(id);
	for( chainE * c = first ; c ; c = c->next)
		if (id &&  strcmp(id,c->chainEid) == 0) return c;
	return 0;
ü

chainE * mCHAIN::search(const mvsSTRING & s)
ä
	int sl = s.lengthOf();
	for(chainE * c = first; c ; c = c->next)
		if ( sl == c->chainEidl && memcmp((char*)s,c->chainEid,sl) == 0)
			return c;
	return 0;
ü

void mCHAIN::sort(long int direction = 1)
ä
	long int ind  = 1 ;
	chainE   * a ;

	while(ind)
	ä ind = 0;

	for(a = first ; a && a->next;)
	ä

		if ( idcmp(a,a->next)*direction > 0)
		ä ind = 1;
		swap(a,a->next);ü
		a = a->next ;
	ü
	ü
ü

void mCHAIN::print_all_ids()
ä
	CHAINITER iter(*this);
	chainE * c ;
	while ( (c = iter()) NEQ 0)
		puts(c->chainEid);
ü


void mCHAIN::print()
ä
	CHAINITER iter(*this);
	chainE * c ;
	while ( (c = iter()) NEQ 0)
		c->print();
ü

long int SORTEDmCHAIN::add(chainE *nc,chainE *,long int)
ä
	if ( first == 0)äcounter = 1; first = last = nc ;ü
	else
	ä
		int comp;
		int h = counter;
		int l = 1;
		int m ;
		chainE * a;
		while (h>l)
		ä
			m = l+(h-l)/2;
			a = go(m);
			comp = idcmp(nc,a);
			if ( comp > 0 )  l = m+1;
			else if ( comp < 0 ) h= m-1;
			else if ( comp == 0 )
				return 0;
			// return mCHAIN::add(nc,a,int(unique));
		ü
		a = go(l);
		comp= idcmp(nc,a);
		if ( comp )
			return mCHAIN::add(nc,a,comp?comp:unique);
		else return 0;

	ü
	return counter;
ü


mHASH::mHASH(int h):mCHAIN()
ä
	pi = 0;
	hash	= h;
	table =(chainE * *)malloc(h*sizeof(chainE *));
	memset(table,0,h*sizeof(chainE *));
ü

mHASH::ßmHASH()
ä
	if (table)
	ä
		for(int i =0;i<hash;i++)
			while(tableÄiÜ)
			ä
				pgo = tableÄiÜ;
				tableÄiÜ= tableÄiÜ->next;
				delete pgo;
			ü
			free(table);
			table = NULL;
	ü
ü

long int mHASH::add(chainE * c)
ä
	int i = hashCode(c)%hash;
	if (tableÄiÜ)
	ä
		c->next=tableÄiÜ;
		c->prev = NULL;
		tableÄiÜ->prev=c;
		tableÄiÜ = c;
	ü
	else
		tableÄiÜ = c;
	return i;
ü

chainE * mHASH::search(chainE *c)
ä
	int i = hashCode(c)%hash;
	chainE *n = tableÄiÜ;
	while(n)
		if(idcmp(c,n)==0)
			break;
		else
			n = n->next;
	return n;
ü

long int mHASH::del(chainE * c)
ä
	int i = hashCode(c)%hash;
	if (c->prev)
		c->prev->next = c->next;
	if (c->next)
		c->next->prev= c->prev;
	if (c==tableÄiÜ)
	ä
		if (tableÄiÜ = c->next)
			tableÄiÜ->prev = NULL;
	ü
	return i;
ü

chainE * mHASH::next()
ä
	if (pgo)
		pgo = pgo->next;
	for(;pgo==NULL&&pi<hash;pi++)
		pgo=tableÄpiÜ;
	if(pgo==NULL)
		pi = 0;
	return pgo;
ü

int idcmp(chainE * a, chainE * b)
ä
	int comp;
	if ( a == 0 && b == 0) return 0;
	else if ( a == 0) return -1;
	else if ( b == 0) return 1;

	if ( a->chainEidl == b->chainEidl)
		return memcmp(a->chainEid,b->chainEid,a->chainEidl);
	else
		if ( a->chainEidl < b->chainEidl)
		äcomp = memcmp(a->chainEid,b->chainEid,a->chainEidl); return comp?comp :-1;ü
		comp = memcmp(a->chainEid,b->chainEid,b->chainEidl);
		return comp ? comp : +1;
ü
