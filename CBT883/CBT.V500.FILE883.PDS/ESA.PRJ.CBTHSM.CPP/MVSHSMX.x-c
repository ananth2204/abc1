#pragma runopts(PLIST(OS))
//#pragma runopts(PLIST(OS),POSIX(ON))

#include "isisdef.h"
#include "versinfo.h"

#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>
#include <dynit.h>
#include <fcntl.h>
#include <assert.h>
#include <ctype.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <strings.h>
#include <string.h>
#include <errno.h>
#define _ISOC99_SOURCE 1
#include <math.h>
#define _OPEN_SYS_DIR_EXT
#include <dirent.h>

#include "arcmck.hpp"
#include "arcmcd.hpp"
#include "f1dscb.hpp"
typedef struct dscb f1dscb;
typedef struct arcmcd * arcmcdP;
typedef struct arcmck * arcmckP;

struct arcmdext
	ä
	f1dscb * dscb;
	char * * volser;
	void *   input;
	int  *   rc;
	ü;
typedef arcmdext * arcmdextP;

struct arcmmext
	ä
	arcmcdP * mcdp;
	int *  since;
	int *  flags;
	int *  rc;
	ü;
typedef arcmmext * arcmmextP;

#include "msgmgr.hpp"
#include "mvsbase.hpp"
#include "misc.hpp"
#include "casmif.hpp"
#include "jobenv.hpp"
#include "mchain.hpp"

#define RECALL_EXIT			"ARCRSTR"
#define ML2SYNC_PROGRAM "ML2SYNC"
#define DSN_MIGRATION_EXIT	"ARCMDSN"
#define GEN_MIGRATION_EXIT  "ARCMGEN"
#define MAKESPACE_CALL  "MAKESPC"
#define MVSHSMX_MAJOR   "ISISARCX" //major name
static char buffÄ32768Ü;
static const char * ml2dirParm ="//DD:EXITPARM";
static bool  traceFlag = false;
struct _parm
	ä
	char * key;
	char * value;
	int    valueI;
	ü;

typedef struct _parm parm;
parm _parmsÄÜ = ä
	ä"unit","3390"ü,
	ä"ml2dir","/mntbin/linuxcompile/miklos/invalid"ü, //root -> ml2dir
	ä"delta",NULL,1ü,
	ä"lrecl",NULL,2048ü,
	ä"blksize",NULL,18432ü,
	ä"dynallocrc",NULL,0x448ü,
	ä"logger",NULLü,
	ä"devtype",NULL,0x20ü,
	ä"ml2vol","RES279"ü,
	ä"ml2mask","DFHSM.HMIG.**"ü,
	ä"remove",NULL,0ü,                               //remove=0 -> remove=1
	ä"trace",NULL,0ü,
  ä"mcds","//DD:MIGCAT"ü,
	äNULLü
	ü;

enum parmEnum
	ä
	unit,
	ml2dir,
	delta,
	lrecl,
	blksize,
	dynallocrc,
	logger,
	devtype,
	ml2vol,
	ml2mask,
	okToRemove,
  trace,
  mcds
	ü;

class parms
	ä
	public:
		parms()
			ä
			FILE * f = fopen(ml2dirParm,"r");
			if (f==NULL)
				ä
				Msg(6001)<<ml2dirParm<<strerror(errno)<<eol;
				exit(8);
				ü
			while(fgets(buff,1024,f))
				ä
				if (strchr(buff,'Ön'))
					*strchr(buff,'Ön') = 0;
				mvsSTRING record(buff), key, value;
				record.parse(key,"=",value);
				key.strip();
				value.strip();
				//Msg(6002)<<buff<<eol;
				bool ok =false;
				for(int i =0;|ok&&i<=int(trace);i++)
					if (strcasecmp(_parmsÄiÜ.key,key)==0)
						ä
						_parmsÄiÜ.value  = strdup(value);
						_parmsÄiÜ.valueI = atoi(value);
						ok = true;
						ü
					if (|ok)
						Msg(6003)<<key<<eol;
				ü
			fclose(f);
			ü
		char * operatorÄÜ(parmEnum e)
			ä
			return _parmsÄint(e)Ü.value;
			ü
		int operator()(parmEnum e)
			ä
			return _parmsÄint(e)Ü.valueI;
			ü
		ßparms()äü
	ü;

static int callDynalloc(__dyn_t * d)
	ä
	int rc = dynalloc(d);
	if (traceFlag)
		printf(" <After dynalloc> rc:%d %x %x, dsn:%s ddn:%sÖn",
		rc,d->__errcode,
		d->__infocode,
		d->__dsname,
		d->__ddname);
	if (rc )
		Msg(6004)<<d->__dsname<<rc<<tHEX(d->__errcode)<<tHEX(d->__infocode)<<eol;
	return rc;
	ü

static int makespace(parms &);
static int ml2sync(parms &);
enum cleanUpAction
	ä
	Abort,
	Exit8,
	Exit0,
	Return8,
	Return0
	ü;
static FILE * nullfile = 0;
static int cleanUp(cleanUpAction a,char * t,FILE * & f0 = nullfile,FILE * & f1 = nullfile,__dyn_t * ip = NULL,char * enqMinor = NULL)
	ä
	if (f0)
		ä
		fclose(f0);
		f0 = NULL;
		ü
	if (f1)
		ä
		fclose(f1);
		f1 = NULL;
		ü
	if (ip)
		dynfree(ip);
	if (enqMinor)
		DEQ(MVSHSMX_MAJOR,enqMinor,6,STEP,NONE);
	switch(a)
		ä
		case Abort:
			if (traceFlag)
				printf(" <Abort> %sÖn",t);
			abort();
		case Exit8:
			if (traceFlag)
				printf(" <Exit8> %sÖn",t);
			exit(8);
		case Exit0:
			if (traceFlag)
				printf(" <Exit0> %sÖn",t);
			exit(0);
		case Return8:
			if (traceFlag)
				printf(" <Return8> %sÖn",t);
			return 8;
		case Return0:
		default:
			if (traceFlag)
				printf(" <Return0> %sÖn",t);
		ü
	return 0;
	ü

int main()
	ä

	const static char *version=ISIS_VERSION;
	const static char *compileDate=ISIS_VERSION_DATE; // MW 20021104 __DATE__; //MF 20020419

	void * * R1 = __osplist;
	jobEnv = new JOBENV("????????");
	arcmcdP mcd = arcmcdP(*R1);
	/*
	if (|(memcmp((char *)jobEnv->programRb,RECALL_EXIT,7)==0&&(int(mcd->mcdflgs)&(mcdfmig+mcdml2)))
	&&
	memcmp((char *)jobEnv->programRb,MIGRATION_EXIT,7)) //migrate to ML2 and migvol devtype == x'20'
	return 0;
	*/
	int rc = 0;
	__dyn_t ip;

	setenv("_EDC_ADD_ERRNO2","1",1);
	messagetext = new MessageTEXT();
	char *program=(char *)jobEnv->programRb;
	parms p;

	if (strlen(pÄloggerÜ))
		messagetext->setOnlyLogger(pÄloggerÜ);
	traceFlag=(p(trace)==1);
	if (traceFlag)
		printf(" <Program> program:%s programRb:%s %s  CompileDate:%s Version:%sÖn",
		(char *)jobEnv->program,(char *)jobEnv->programRb,program,compileDate,version);
	if (traceFlag)
		printf(" <Logger>%sÖn",pÄloggerÜ);

	if (memcmp(program,DSN_MIGRATION_EXIT,7)==0]]memcmp(program,GEN_MIGRATION_EXIT,7)==0)
		ä
		makespace(p);
		arcmdextP md = (arcmdextP)R1;
		if (traceFlag)
			printf("<ARCMxEXT> %44.44s %c Ön",(char *)(md->dscb->ds1dsnam),(char)md->dscb->ds1fmtid);

		if ((char)md->dscb->ds1fmtid == '1') //  it is an f1dscb , so we are in MD exit
			ä
			if (strchr((char *)md->dscb->ds1dsnam,' '))
				*strchr((char *)md->dscb->ds1dsnam,' ')= 0;
			md->dscb->ds1volsqÄ0Ü = 0;
			Msg(6029)<<(char *)(md->dscb->ds1dsnam)<<(char *)(md->dscb->ds1dssn)<<eol;
			*(md->rc)=0;
			ü
		else
			ä
			arcmmextP mm = (arcmmextP)R1;
			if (traceFlag)
				printf("<ARCMMEXT> %44.44s %44.44s %d %xÖn",(char *)((*(mm->mcdp))->mck),(char *)((*(mm->mcdp))->mcdmcanm),*(mm->since),*(mm->flags));

			if (strchr((char *)((*(mm->mcdp))->mck),' '))
				* strchr((char *)((*(mm->mcdp))->mck),' ') = 0;
			if (strchr((char *)((*(mm->mcdp))->mcdmcanm),' '))
				*	strchr((char *)((*(mm->mcdp))->mcdmcanm),' ') = 0;
			Msg(6031)<<	(char *)((*(mm->mcdp))->mck)<<(char *)((*(mm->mcdp))->mcdmcanm)<<*(mm->since)<<eol;
			*(mm->rc) = 0;
			ü
		ü
	else
		if (memcmp(program,MAKESPACE_CALL,7)==0)
			ä
			makespace(p);
			ü
		else
			if (memcmp(program,RECALL_EXIT,7)==0)
				ä
				if (traceFlag)
					printf(" <Flags> %x %xÖn",mcd->mcdflgs,mcd->mcdflag3);
				if (int(mcd->mcdflgs)&(mcdfmig+mcdml2) &&
					mcd->mcdflag3==p(devtype)) //migrate to ML2 and migvol devtype == x'20'
					ä
					Msg(6030)<<(char *)mcd->mck<<eol;
					//makespace(p); commented out for RECALL
					dyninit(&ip);
					char pathÄ1024Ü;
					sprintf(path,"%s/%44.44s",pÄml2dirÜ,mcd->mcdmcanm);
					if (strchr(path,' '))
						*strchr(path,' ') = 0;
					if (traceFlag)
						printf(" <Using path> Path:%sÖn",path);

					struct stat info;
					if (stat(path, &info) == 0)
						ä
						int size2k = info.st_size/2048;
						if (abs(size2k-mcd->mcdcsz)<=p(delta))
							ä
							FILE * input = fopen(path,"rb,noseek");
							if (input==NULL)
								cleanUp(Exit8,Msg(6006)<<path<<strerror(errno)<<eol);
							dyninit(&ip);

							char  ddnameÄ9Ü = "????????";
							ip.__ddname = ddname;
							ip.__dsname = (char *)mcd->mcdmcanm;
							ip.__unit = pÄunitÜ;
							ip.__volser = (char *)mcd->mcdvsn;
							ip.__status=__DISP_NEW;
							ip.__normdisp=__DISP_KEEP;
							ip.__recfm=_FBS_;
							ip.__lrecl=p(lrecl);
							ip.__blksize=p(blksize);
							ip.__avgblk = ip.__blksize;
							ip.__primary = mcd->mcdcsz/(ip.__blksize/ip.__lrecl)+1;
							ip.__secondary = ip.__primary;

							int count2k = 0;
							if (callDynalloc(&ip)==0)
								ä
								char ddÄ18Ü;
								sprintf(dd,"//DD:%8.8s",ddname);
								char modeÄ128Ü;
								sprintf(mode,"wb,recfm=fbs,lrecl=%d,blksize=%d,noseek",p(lrecl),p(blksize));
								if (traceFlag)
									printf(" <Before open>%s %s Ön",dd,mode);
								FILE * output = fopen(dd,mode);
								if (output==NULL)
									cleanUp(Return8,Msg(6006)<<ddname<<strerror(errno)<<eol,input,nullfile,&ip);

								int recl    = p(lrecl);
								memset(buff,0,recl);
								rc = fread(buff,1,recl,input);
								if (rc<=0)
									cleanUp(Return8,Msg(6011)<<path<<rc<<strerror(errno)<<eol,input,output,&ip);
								else
									ä
									doä
										rc = fwrite(buff,1,rc,output);
										memset(buff,0,recl);
										count2k++;
										ü
								while
									((rc=fread(buff,1,recl,input))>0);
									ü
								fclose(input);
								fclose(output);
								dynfree(&ip);
								if (p(okToRemove))
									ä
									if (traceFlag)
										printf(" <Remove> remove %sÖn",path);
									if (remove(path))
										Msg(6026)<<path<<strerror(errno)<<eol;
									else
										Msg(6027)<<path<<eol;
									ü
								ü
							else
								ä
								if (ip.__errcode==p(dynallocrc))
									cleanUp(Return0,Msg(6005)<<(char *)mcd->mck<<(char *)mcd->mcdmcanm<<(char *)mcd->mcdvsn<<eol);
								else
									return 8;
								ü


							if(count2k-mcd->mcdcsz)
								Msg(6007)<<count2k<<mcd->mcdcsz<<eol;
							else
								Msg(6008)<<(char *)mcd->mck<<(char *)mcd->mcdmcanm<<(char *)mcd->mcdvsn<<mcd->mcdcsz<<eol;
							ü
						else
							Msg(6009)<<mcd->mcdmcanm<<mcd->mcdcsz<<size2k<<eol;
						ü
					else
						cleanUp(Return8,Msg(6010)<<path<<strerror(errno)<<eol);
					ü
				ü
      else
        if (memcmp(program,ML2SYNC_PROGRAM,7)==0)
          return(ml2sync(p));
			return 0;
	ü

static int makespace(parms & p)
	ä
	mvsSTRING v(pÄml2volÜ), vol;
	v.parse(vol,",",v);

	while(strlen(vol))
		ä
		if (strlen(vol)-6)
			return(cleanUp(Return8,Msg(6020)<<v<<eol));

		if (traceFlag)
			printf(" <makespace> volume %s Ön",(char *)vol);
		int enqRc = ENQ(MVSHSMX_MAJOR ,vol,E,6,STEP,NONE);
		if (enqRc == 0)
		ä
		if (traceFlag)
			printf(" <makespace> ENQ %sÖn",(char *)vol);
		__dyn_t ip;
		dyninit(&ip);
		char vtocixÄ128Ü;
		sprintf(vtocix,"SYS1.VTOCIX.%6.6s",(char *)vol);
		char  ddnameÄ9Ü = "????????";
		ip.__ddname = ddname;
		ip.__unit = pÄunitÜ;
		ip.__volser = (char *)vol;
		ip.__status=__DISP_SHR;
		ip.__normdisp=__DISP_KEEP;
		ip.__dsname = vtocix;

		if (callDynalloc(&ip))
			Msg(6021)<<(char *)vol<<eol;
		else
			ä
			f1dscb mydscb;
			memset(&mydscb,0,sizeof(f1dscb));
			int vtocrc = mvs()->VtocOpen(ddname,pÄml2maskÜ,(char *)&mydscb);
			if (vtocrc<=4) //szm20051220 loop at DELETE error
      do
				ä
				if (strchr((char *)mydscb.ds1dsnam,' '))
					*strchr((char *)mydscb.ds1dsnam,' ')= 0;
				mydscb.ds1volsqÄ0Ü = 0;
				if (traceFlag)
					printf(" <makespace> selected %sÖn",mydscb.ds1dsnam);
				if (memcmp((char *)vol,mydscb.ds1dssn,6))
					ä
					if(vtocrc==0)
						ä
						cleanUp(Return8,Msg(6022)<<mydscb.ds1dssn<<(char *)vol<<mydscb.ds1dssn<<eol,nullfile,nullfile,NULL);
						break;
						ü
					else
						ä
						cleanUp(Return0,Msg(6028)<<pÄml2maskÜ<<(char *)vol<<eol,nullfile,nullfile,NULL);
						break;
						ü
					ü
				__dyn_t ip;
				dyninit(&ip);
				char  ddnameÄ9Ü = "????????";
				ip.__ddname = ddname;
				ip.__dsname = (char *)mydscb.ds1dsnam;
				ip.__unit = pÄunitÜ;
				ip.__volser = (char *)vol;
				ip.__status=__DISP_OLD; //__DISP_SHR
				ip.__normdisp=__DISP_KEEP;
				if (callDynalloc(&ip))
					Msg(6023)<<(char *)mydscb.ds1dsnam<<(char *)vol<<eol;
				else
					ä
					char ddÄ18Ü;
					sprintf(dd,"//DD:%s",ddname);
					FILE * output = NULL;
					FILE * input = fopen(dd,"rb,noseek");
					if (input==NULL)
						ä
						cleanUp(Return8,Msg(6006)<<ddname<<strerror(errno)<<eol,nullfile,nullfile,&ip);
						break;
						ü
					if (traceFlag)
						printf(" <makespace> input allocated to %s and opened as %sÖn",dd);
					char pathÄ1024Ü;
					sprintf(path,"%s/%s",pÄml2dirÜ,mydscb.ds1dsnam);
					mode_t mode =  S_IRUSR ] S_IWUSR ] S_IXUSR ]
						S_IRGRP ] S_IWGRP ] S_IXGRP ]
						S_IROTH ] S_IWOTH ] S_IXOTH;
					int flag = O_WRONLY+O_CREAT;
					if (traceFlag)
						printf(" <makespace> flag:%x mode:%xÖn",flag,mode);
					int file = open(path,flag,mode);
					if (file ==  -1)
						ä
						cleanUp(Return8,Msg(6006)<<path<<strerror(errno)<<eol,input,nullfile,&ip);
						continue;
						ü
					if (traceFlag)
						printf(" <makespace> file:%s Ön",file);

					//chmod(path,mode);
					//file = open(path,flag,mode);
					if ((output = fdopen(file,"wb,noseek")) == NULL)
						ä
						cleanUp(Return8,Msg(6006)<<path<<strerror(errno)<<eol,input,nullfile,&ip);
						continue;
						ü

					int count2k =0;
					while(fread(buff,1,p(lrecl),input)==p(lrecl))
						ä
						if (fwrite(buff,1,p(lrecl),output)-p(lrecl))
							ä
							cleanUp(Return8,Msg(6024)<<path<<strerror(errno)<<eol,input,output,&ip);
							break;
							ü
						else
							count2k++;
						ü
					Msg(6025)<<(char *)mydscb.ds1dsnam<<path<<count2k<<eol;
					fclose(input);
					input = NULL;
					fclose(output);
					output = NULL;
					if (p(okToRemove))
						ä
						if (traceFlag)
							printf(" <makespace> remove %sÖn",dd);
						if (remove(dd))
							ä
							cleanUp(Return8,Msg(6026)<<dd<<strerror(errno)<<eol,input,output,&ip);
							//continue;
							break; //szm20080205 abend after 2008:02:04 01:23:52 ARC6026E remove/delete error for //DD:SYS09916
							ü
						else
							Msg(6027)<<(char *)mydscb.ds1dsnam<<eol;
						ü
					dynfree(&ip);
					ü
				if (vtocrc==4)
					break;
				ü
				while((vtocrc= mvs()->Vtoc((char *)&mydscb))<=4); //szm20051220 loop at DELETE error

			if (traceFlag)
				printf(" <makespace> CloseVtoc %sÖn",vtocix);
			mvs()->VtocClose();
			dynfree(&ip);
			ü
		if (traceFlag)
			printf(" <makespace> DEQ %sÖn",(char *)vol);
		DEQ(MVSHSMX_MAJOR ,vol,6,STEP,NONE);
		ü
		else
			Msg(6056)<<enqRc<<eol;
		v.parse(vol,",",v);
		ü
	return 0;
	ü


void print_amrc(char * fb=NULL)
  ä
  __amrc_type currErr = *__amrc;
  if (fb)
    ä
    sprintf(fb,"R15 value   = %d",currErr.__code.__feedback.__rc);
    fb+=strlen(fb);
    sprintf(fb,"Reason code = %d",currErr.__code.__feedback.__fdbk);
    fb+=strlen(fb);
    sprintf(fb,"RBA         = %d",currErr.__RBA);
    fb+=strlen(fb);
    sprintf(fb,"Last op     = %dÖn",currErr.__last_op);
    ü
  else
    ä
    printf("R15 value   = %d",currErr.__code.__feedback.__rc);
    printf("Reason code = %d",currErr.__code.__feedback.__fdbk);
    printf("RBA         = %d",currErr.__RBA);
    printf("Last op     = %dÖn",currErr.__last_op);
    ü
  return;
  ü

fldata_t  * fattr(FILE *f)
  ä
  static char fnÄ1024Ü;
  static fldata_t ft;
  if (fldata(f,fn,&ft) == 0)
    return &ft;
  else
    print_amrc();
  return NULL;
  ü


static int ml2sync(parms & p)
  ä
  char * ml2prefix = "DFHSM.HMIG.";
  FILE * mcdsF = fopen(pÄmcdsÜ,"rb,type=record");
  fldata_t * fldataP = NULL;
  if (mcdsF==NULL]](fldataP=fattr(mcdsF))==NULL)
    return(cleanUp(Return8,Msg(6050)<<pÄmcdsÜ<<strerror(errno)<<eol));
  Msg(6052)<<fldataP->__dsname<<fldataP->__vsamRKP<<fldataP->__vsamkeylen<<eol;
  SORTEDmCHAIN mig;
  char bÄ32768Ü;
  arcmcdP mcdP = (arcmcdP)b;
  arcmckP mckP = (arcmckP)b;
  size_t len = 0;
  int count = 0;
  int dircount = 0;
  int removecount = 0;
  while((len=fread(b,1,32768,mcdsF))>0)
    ä
    //if (traceFlag)
    //  dump(stdout,"<mcds record>",b,sizeof(struct arcmcd));
    if (mckP->mcktype>0x40&&                      //dsn type
      mckP->mchtype==0x00&&                     //dataset entry type
      ((unsigned short)mcdP->mcdflgs&mcdfasn)&&  //valid migrated dataset
      ((unsigned short)mcdP->mcdflgs&&mcdml2))   //on ML2 volume
      ä
      if (strchr((char *)(mcdP->mcdmcanm),' '))
        *strchr((char *)(mcdP->mcdmcanm),' ') = 0;
      mig.add(new chainE((char *)mcdP->mcdmcanm));
      count++;
      if (traceFlag)
        printf("<mig entry>%s from:%44.44sÖn",mcdP->mcdmcanm,mcdP->mck);
      ü
    ü
  fclose(mcdsF);
  Msg(6051)<<count<<eol;
  Msg(6055)<<pÄml2dirÜ<<eol;
  struct stat info;
  if (stat(pÄml2dirÜ,&info)==NULL && S_ISDIR(info.st_mode))
    ä

    DIR * dir = opendir(pÄml2dirÜ);
    if (dir)
      ä
      struct dirent * ent = NULL;
      while((ent=__readdir2(dir,&info)))
        ä
        dircount++;
        char fullNameÄ1024Ü;
        if (memcmp(ent->d_name,ml2prefix,strlen(ml2prefix)))
          continue;
        sprintf(fullName,"%s/%s",pÄml2dirÜ,ent->d_name);
        if (traceFlag)
          printf("<ML2 ent>%s full:%sÖn",ent->d_name,fullName);
        if (stat(fullName,&info)==NULL && S_ISREG(info.st_mode))
          ä
          if (mig.search(mvsSTRING(ent->d_name))==NULL)
            ä
            removecount++;
            if (traceFlag)
              printf(" <Remove> remove %s (as:%s)Ön",fullName,ent->d_name);

            if (p(okToRemove))
              ä
              if (remove(fullName))
                Msg(6026)<<fullName<<strerror(errno)<<eol;
              else
                Msg(6027)<<fullName<<eol;
              ü
            ü
          ü
        ü
      ü
    else
      return(cleanUp(Return8,Msg(6053)<<pÄml2dirÜ<<strerror(errno)<<eol));
    ü
  else
    return(cleanUp(Return8,Msg(6053)<<pÄml2dirÜ<<strerror(errno)<<eol));
  Msg(6054)<<count<<dircount<<removecount<<eol;
  return 0;
  ü

