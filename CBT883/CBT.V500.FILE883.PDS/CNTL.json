{"INMR01": {"INMLRECL": 80, "INMFNODE": "NODENAME", "INMFUID": "RACF", "INMTNODE": "JES2P390", "INMTUID": "ESA", "INMFTIME": "20121220175758000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 352716, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 3120, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "ESA.PRJ.CBTHSM.CNTL", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 352716, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 352716, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"ESA.PRJ.CBTHSM.CNTL": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 3120, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 30051, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "120355", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\xc0\\x00\\x00\\x01'", "DS1LSTAR": "b'\\x00\\x05\\x03'", "DS1TRBAL": "b'\\xc5\\xa0'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03@\\x00\\x04y\\xf0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03@\\x00\\x04y\\xf0\\xd8'", "b'P\\xfb\\xd1\\x08\\x00\\x00\\x0fW\\x00\\x00\\x0fW\\x00\\x0e\\x00\\x0f'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"ALLOCBK1": {"ttr": 274, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//ALLOCBK1 JOB ?JOBPARM\n//ALLOCBK EXEC PGM=IEFBR14\n//*\n//*****************************************************************/\n//*    THIS SAMPLE JOB ALLOCATES AND CATALOGS THE CONTROL DATA SET*/\n//*    BACKUP VERSION DATA SETS ON DASD VOLUMES.                  */\n//*                                                               */\n//*    ENSURE THAT BACKUP VERSION DATA SETS ARE PLACED ON VOLUMES */\n//*    THAT ARE DIFFERENT FROM THE VOLUMES THAT THE CONTROL DATA  */\n//*    SETS ARE ON.                                               */\n//*                                                               */\n//*    THIS SAMPLE JOB ALLOCATES FOUR BACKUP COPIES (THE DEFAULT) */\n//*    FOR EACH CONTROL DATA SET.  IF YOU SPECIFY A DIFFERENT     */\n//*    NUMBER OF BACKUP VERSIONS, ENSURE THAT YOU ALLOCATE A      */\n//*    BACKUP COPY FOR EACH OF THE BACKUP VERSIONS YOU SPECIFY.   */\n//*****************************************************************/\n//*                                                               */\n//*    EDIT THIS JCL TO REPLACE THE PARAMETERS DESCRIBED BELOW.   */\n//*                                                               */\n//*****************************************************************/\n//*  PARAMETER PARAMETER DEFINITION\n//*\n//*  ?BKUNIT1   -  UNIT TYPE OF VOLUME TO CONTAIN THE FIRST CDS\n//*                BACKUP VERSION.\n//*  ?BKUNIT2   -  UNIT TYPE OF VOLUME TO CONTAIN THE SECOND CDS\n//*                BACKUP VERSION.\n//*  ?BKUNIT3   -  UNIT TYPE OF VOLUME TO CONTAIN THE THIRD CDS\n//*                BACKUP VERSION.\n//*  ?BKUNIT4   -  UNIT TYPE OF VOLUME TO CONTAIN THE FOURTH CDS\n//*                BACKUP VERSION.\n//*  ?BKVOL1    -  VOLUME SERIAL OF VOLUME TO CONTAIN THE FIRST CDS\n//*                BACKUP VERSION.\n//*  ?BKVOL2    -  VOLUME SERIAL OF VOLUME TO CONTAIN THE SECOND CDS\n//*                BACKUP VERSION.\n//*  ?BKVOL3    -  VOLUME SERIAL OF VOLUME TO CONTAIN THE THIRD CDS\n//*                BACKUP VERSION.\n//*  ?BKVOL4    -  VOLUME SERIAL OF VOLUME TO CONTAIN THE FOURTH CDS\n//*                BACKUP VERSION.\n//*  ?SCBVOL1   -  STORAGE CLASS NAME FOR BACKUP VERSIONS\n//*  ?MCDFHSM   -  MANAGEMENT CLASS NAME OF THE HSM CONSTRUCT\n//*\n//*  ?CDSSIZE   -  NUMBER OF CYLINDERS ALLOCATED TO CDS BACKUP\n//*                VERSIONS.\n//*  ?JNLSIZE   -  NUMBER OF CYLINDERS ALLOCATED TO JOURNAL DATA\n//*                SETS.\n//*  ?UID       -  AUTHORIZED USER ID (1 TO 7 CHARS) FOR THE HSM-\n//*                STARTED PROCEDURE. THIS WILL BE USED AS THE\n//*                HIGH-LEVEL QUALIFIER OF HSM DATA SETS.\n//* (NOTE: UID AUTHORIZATION IS VALID IN A NON-FACILITY CLASS    */\n//* ENVIRONMENT ONLY, OTHERWISE, FACILITY CLASS PROFILES WILL BE */\n//* USED FOR AUTHORIZATION CHECKING.)                            */\n//*****************************************************************/\n//*\n//******************************************************************/\n//* THIS PROCEDURE ASSUMES A SINGLE CLUSTER MCDS.  IF MORE THAN    */\n//* ONE VOLUME IS DESIRED, FOLLOW THE RULES FOR A MULTICLUSTER     */\n//* CDS.                                                           */\n//******************************************************************/\n//*\n//MCDSV1 DD DSN=?UID.MCDS.BACKUP.V0000001,DISP=(,CATLG),UNIT=?BKUNIT1,\n//   VOL=SER=?BKVOL1,SPACE=(CYL,(?CDSSIZE,5)),STORCLAS=?SCBVOL1,\n//   MGMTCLAS=?MCDFHSM\n//MCDSV2 DD DSN=?UID.MCDS.BACKUP.V0000002,DISP=(,CATLG),UNIT=?BKUNIT2,\n//   VOL=SER=?BKVOL2,SPACE=(CYL,(?CDSSIZE,5)),STORCLAS=?SCBVOL1,\n//   MGMTCLAS=?MCDFHSM\n//MCDSV3 DD DSN=?UID.MCDS.BACKUP.V0000003,DISP=(,CATLG),UNIT=?BKUNIT3,\n//   VOL=SER=?BKVOL3,SPACE=(CYL,(?CDSSIZE,5)),STORCLAS=?SCBVOL1,\n//   MGMTCLAS=?MCDFHSM\n//MCDSV4 DD DSN=?UID.MCDS.BACKUP.V0000004,DISP=(,CATLG),UNIT=?BKUNIT4,\n//   VOL=SER=?BKVOL4,SPACE=(CYL,(?CDSSIZE,5)),STORCLAS=?SCBVOL1,\n//   MGMTCLAS=?MCDFHSM\n//*\n//******************************************************************/\n//* REMOVE THE NEXT FOUR DD STATEMENTS IF YOU DO NOT INTEND TO USE */\n//* BACKUP AND DUMP                                                */\n//*                                                                */\n//* THIS PROCEDURE ASSUMES A SINGLE CLUSTER BCDS.  IF MORE THAN    */\n//* ONE VOLUME IS DESIRED, FOLLOW THE RULES FOR A MULTICLUSTER     */\n//* CDS.                                                           */\n//******************************************************************/\n//*\n//BCDSV1 DD DSN=?UID.BCDS.BACKUP.V0000001,DISP=(,CATLG),UNIT=?BKUNIT1,\n//   VOL=SER=?BKVOL1,SPACE=(CYL,(?CDSSIZE,5)),STORCLAS=?SCBVOL1,\n//   MGMTCLAS=?MCDFHSM\n//BCDSV2 DD DSN=?UID.BCDS.BACKUP.V0000002,DISP=(,CATLG),UNIT=?BKUNIT2,\n//   VOL=SER=?BKVOL2,SPACE=(CYL,(?CDSSIZE,5)),STORCLAS=?SCBVOL1,\n//   MGMTCLAS=?MCDFHSM\n//BCDSV3 DD DSN=?UID.BCDS.BACKUP.V0000003,DISP=(,CATLG),UNIT=?BKUNIT3,\n//   VOL=SER=?BKVOL3,SPACE=(CYL,(?CDSSIZE,5)),STORCLAS=?SCBVOL1,\n//   MGMTCLAS=?MCDFHSM\n//BCDSV4 DD DSN=?UID.BCDS.BACKUP.V0000004,DISP=(,CATLG),UNIT=?BKUNIT4,\n//   VOL=SER=?BKVOL4,SPACE=(CYL,(?CDSSIZE,5)),STORCLAS=?SCBVOL1,\n//   MGMTCLAS=?MCDFHSM\n//*\n//******************************************************************/\n//* REMOVE THE NEXT FOUR DD STATEMENTS IF YOU DO NOT INTEND TO USE */\n//* TAPE VOLUMES FOR DAILY BACKUP VOLUMES, SPILL BACKUP VOLUMES,   */\n//* OR MIGRATION LEVEL 2 VOLUMES.                                  */\n//*                                                                */\n//* THE OCDS MAY NOT EXCEED 1 VOLUME.                              */\n//******************************************************************/\n//*\n//OCDSV1 DD DSN=?UID.OCDS.BACKUP.V0000001,DISP=(,CATLG),UNIT=?BKUNIT1,\n//   VOL=SER=?BKVOL1,SPACE=(CYL,(?CDSSIZE,5)),STORCLAS=?SCBVOL1,\n//   MGMTCLAS=?MCDFHSM\n//OCDSV2 DD DSN=?UID.OCDS.BACKUP.V0000002,DISP=(,CATLG),UNIT=?BKUNIT2,\n//   VOL=SER=?BKVOL2,SPACE=(CYL,(?CDSSIZE,5)),STORCLAS=?SCBVOL1,\n//   MGMTCLAS=?MCDFHSM\n//OCDSV3 DD DSN=?UID.OCDS.BACKUP.V0000003,DISP=(,CATLG),UNIT=?BKUNIT3,\n//   VOL=SER=?BKVOL3,SPACE=(CYL,(?CDSSIZE,5)),STORCLAS=?SCBVOL1,\n//   MGMTCLAS=?MCDFHSM\n//OCDSV4 DD DSN=?UID.OCDS.BACKUP.V0000004,DISP=(,CATLG),UNIT=?BKUNIT4,\n//   VOL=SER=?BKVOL4,SPACE=(CYL,(?CDSSIZE,5)),STORCLAS=?SCBVOL1,\n//   MGMTCLAS=?MCDFHSM\n//*\n//JRNLV1 DD DSN=?UID.JRNL.BACKUP.V0000001,DISP=(,CATLG),UNIT=?BKUNIT1,\n//   VOL=SER=?BKVOL1,SPACE=(CYL,(?JNLSIZE,5)),STORCLAS=?SCBVOL1,\n//   MGMTCLAS=?MCDFHSM\n//JRNLV2 DD DSN=?UID.JRNL.BACKUP.V0000002,DISP=(,CATLG),UNIT=?BKUNIT2,\n//   VOL=SER=?BKVOL2,SPACE=(CYL,(?JNLSIZE,5)),STORCLAS=?SCBVOL1,\n//   MGMTCLAS=?MCDFHSM\n//JRNLV3 DD DSN=?UID.JRNL.BACKUP.V0000003,DISP=(,CATLG),UNIT=?BKUNIT3,\n//   VOL=SER=?BKVOL3,SPACE=(CYL,(?JNLSIZE,5)),STORCLAS=?SCBVOL1,\n//   MGMTCLAS=?MCDFHSM\n//JRNLV4 DD DSN=?UID.JRNL.BACKUP.V0000004,DISP=(,CATLG),UNIT=?BKUNIT4,\n//   VOL=SER=?BKVOL4,SPACE=(CYL,(?JNLSIZE,5)),STORCLAS=?SCBVOL1,\n//   MGMTCLAS=?MCDFHSM\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ALLOSDSP": {"ttr": 517, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//ALLOSDSP JOB ?JOBPARM\n//*\n//*****************************************************************/\n//*   THIS SAMPLE JOB DEFINES AND INITIALIZES A SMALL-DATA-SET-   */\n//*   PACKING DATA SET ON A MIGRATION LEVEL 1 VOLUME.             */\n//*                                                               */\n//*   THE DATA SET NAME IS REQUIRED TO BE ?UID.SMALLDS.V?SDSPVOL  */\n//*   WHERE ?UID IS THE AUTHORIZED DFSMSHSM USER ID AND WHERE     */\n//*   ?SDSPVOL IS THE VOLUME SERIAL NUMBER OF A MIGRATION LEVEL 1 */\n//*   VOLUME.                                                     */\n//*                                                               */\n//* (NOTE: UID AUTHORIZATION IS VALID IN A NON-FACILITY CLASS    *//\n//* ENVIRONMENT ONLY, OTHERWISE, FACILITY CLASS PROFILES WILL BE *//\n//* USED FOR AUTHORIZATION CHECKING.)                            *//\n//*                                                               */\n//*                                                               */\n//*   AFTER YOU ALLOCATE THE SMALL-DATA-SET-PACKING DATA SET ON A */\n//*   MIGRATION LEVEL 1 VOLUME, YOU MUST SPECIFY THE              */\n//*   SMALLDATASETPACKING PARAMETER ON THE SETSYS COMMAND IN THE  */\n//*   ARCCMD__ PARMLIB MEMBER AND ON THE ADDVOL COMMAND FOR THE   */\n//*   VOLUME THAT CONTAINS THE SMALL-DATA-SET-PACKING DATA SET.   */\n//*                                                               */\n//*   CHANGE THE PARAMETERS LISTED BELOW TO VALID VALUES FOR YOUR */\n//*   SYSTEM.                                                     */\n//*****************************************************************/\n//*  PARAMETER  -  PARAMETER DESCRIPTION\n//*\n//*  ?SDSPCIS   -  CONTROL INTERVAL SIZE VALUE FOR THE DATA COMPONENT\n//*                OF THE SDSP DATA SET. IF THE SDSP UNIT TYPE IS\n//*                3350, REPLACE ?SDSPCIS WITH 16384.  IF THE SDSP\n//*                UNIT TYPE IS 3380, REPLACE WITH 20480.\n//*                IF THE SDSP UNIT TYPE IS 3390, REPLACE WITH 26624.\n//*  ?SDSPUNT   -  UNIT TYPE FOR MIGRATION LEVEL 1 VOLUME TO\n//*                CONTAIN SMALL-DATA-SET-PACKING DATA SET.\n//*  ?SDSPVOL   -  VOLUME SERIAL OF THE MIGRATION LEVEL 1 VOLUME\n//*                TO CONTAIN SMALL-DATA-SET-PACKING DATA SET.\n//*  ?UID       -  AUTHORIZED USER ID (1 TO 7 CHARS) FOR THE DFSMShsm\n//*                START PROCEDURE, IN A NON FACILITY CLASS ENVIRONMENT.\n//*                USED AS THE HIGH-LEVEL QUALIFIER OF DFSMSHSM\n//*                DATA SETS.\n//*\n//* NOTE:         ENSURE THAT THE SMALL-DATA-SET-PACKING DATA SET\n//*               IS NOT ALLOCATED ON AN SMS VOLUME. THE DATA SET\n//*               SHOULD BE DEFINED IN A STORAGE CLASS FILTER TO\n//*               EXCLUDE IT FROM AN SMS VOLUME AS THE OTHER DFSMShsm\n//*               DATA SETS ARE.\n//*****************************************************************/\n//*****************************************************************/\n//* CREATE A ONE-RECORD, SEQUENTIAL DATA SET TO BE USED LATER TO  */\n//* PRIME VSAM CLUSTERS DEFINED FOR DFSMSHSM.                     */\n//*****************************************************************/\n//*\n//IEBDG    EXEC PGM=IEBDG\n//SYSPRINT DD SYSOUT=*\n//PRIMER   DD DSN=?UID.SDSP.PRIMER,DISP=(NEW,CATLG),UNIT=SYSDA,\n// DCB=(RECFM=F,LRECL=200,BLKSIZE=200),SPACE=(TRK,(1))\n//SYSIN    DD *\n DSD OUTPUT=(PRIMER)\n FD NAME=A,LENGTH=44,STARTLOC=1,PICTURE=44,                            X\n   'Z9999999999999999999999999999999999999999999'\n CREATE NAME=A\n END\n//STEP1 EXEC PGM=IDCAMS,REGION=512K\n//SYSPRINT DD SYSOUT=*\n//INPRIMER DD DSN=?UID.SDSP.PRIMER,DISP=(OLD,DELETE)\n//SDSP1 DD UNIT=?SDSPUNT,VOL=SER=?SDSPVOL,DISP=SHR\n//SYSIN DD *\n DEFINE CLUSTER (NAME(?UID.SMALLDS.V?SDSPVOL) VOLUMES(?SDSPVOL) -\n        CYLINDERS(5 0) FILE(SDSP1) -\n        RECORDSIZE(2093 2093) FREESPACE(0 0) -\n        INDEXED KEYS(45 0) -\n        SPEED BUFFERSPACE(530432) -\n        UNIQUE NOWRITECHECK) -\n        DATA -\n        (CONTROLINTERVALSIZE(?SDSPCIS)) -\n        INDEX -\n        (CONTROLINTERVALSIZE(1024))\n REPRO ODS('?UID.SMALLDS.V?SDSPVOL') INFILE(INPRIMER)\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ARCCMD01": {"ttr": 12, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": " /****************************************************************/\n /*  DFSMSHSM STARTUP COMMAND MEMBER FOR LEVEL 2 TAPE MIGRATION  */\n /*                                                              */\n /*  APPEND THIS COMMAND STREAM TO ARCCMD00 TO PROVIDE LEVEL 2   */\n /*  TAPE MIGRATION                                              */\n /****************************************************************/\n /****************************************************************/\n /*          DFSMSHSM LEVEL 2 TAPE MIGRATION PARAMETERS          */\n /****************************************************************/\n /*                                                              */\n\n SETSYS -\n   TAPEMIGRATION(ML2TAPE)    /* MIGRATE TO LEVEL 2 TAPE.         */\n\n SETSYS -\n   MIGUNITNAME(3590-1)       /* START WITH 3590-1 ML2 TAPE       */\n                             /* UNIT.                            */\n SETSYS -\n   ML2RECYCLEPERCENT(20)     /* LOG MESSAGE WHEN VALID DATA      */\n                             /* ON AN ML2 TAPE FALLS BELOW       */\n                             /* 20%.                             */\n SETSYS -\n   TAPEMAXRECALLTASKS(1)     /* ONE TAPE RECALL TASK AT A TIME   */\n\n /*                                                              */\n /****************************************************************/\n /* SEE MEMBER ARCCMD91 IN esa.prj.cbthsm.cntl FOR AN EXAMPLE    */\n /* OF ADDVOL COMMANDS TO BE USED IN CONJUNCTION WITH LEVEL      */\n /* 2 TAPE MIGRATION.                                            */\n /****************************************************************/\n /*                                                              */\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ARCCMD90": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00$\\x01\\x124\\x0f\\x01\\x124\\x0f\\x10A\\x00)\\x00(\\x00\\x00\\xd9\\xc1\\xc3\\xc6@@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2012-12-05T00:00:00", "modifydate": "2012-12-05T10:41:24", "lines": 41, "newlines": 40, "modlines": 0, "user": "RACF"}, "text": " /*                                                               */\n /*****************************************************************/\n /* THE FOLLOWING COMMANDS ARE AN EXAMPLE OF ADDVOL COMMANDS      */\n /* USED IN CONJUNCTION WITH THE ARCCMD00 COMPONENT OF THE        */\n /* STARTER SET.  THEY CAN BE COMPLETED BY ADDING VOLUME SERIAL   */\n /* NUMBERS AND UNIT TYPES IN THE SPACES PROVIDED.  THIS COMMAND  */\n /* STREAM CAN THEN BE APPENDED TO ARCCMD00.                      */\n /*                                                               */\n /* ADDVOL COMMANDS FOR PRIMARY AND MIGRATION LEVEL 1 VOLUMES     */\n /* MUST BE INCLUDED IN THE ARCCMD__ PARMLIB MEMBER FOR YOUR      */\n /* SYSTEM.  INDEED, THEY MUST BE IN THE ARCCMD__ WHEN RUNNING    */\n /* WITH JES3.                                                    */\n /*                                                               */\n /*****************************************************************/\n /*                                                               */\n DEFINE MIGRATIONLEVEL2 ( VOLUMES(RESML2))\n ADDVOL RESML0               /* ADD A VOLUME (PROVIDE SERIAL) */ -\n        UNIT(3390)           /* WITH UNIT TYPE (PROVIDE TYPE) */ -\n        PRIMARY              /* AS A PRIMARY VOLUME THAT IS A */ -\n        (AUTOMIGRATION       /* CANDIDATE FOR AUTOMIGRATION.  */ -\n         MIGRATE(7)          /* MIGRATE DATA SETS AFTER 7 DAYS*/ -\n         AUTOBACKUP          /* CANDIDATE FOR AUTOBACKUP.     */ -\n         BACKUPDEVICECATEGORY(TAPE) /* BACKED UP TO TAPE.     */ -\n         AUTORECALL          /* DATA SETS CAN BE RECALLED TO  */ -\n                             /* THIS VOLUME.                  */ -\n                             /* BY THE SUNDAY DUMP CLASS.     */ -\n        THRESHOLD(50 50)     /* NO INTERVAL MIGRATION         */\n /* ML1 VOLUME                                                   */\n ADDVOL RESML1               /* ADD A VOLUME (PROVIDE SERIAL) */ -\n        UNIT(3390)           /* WITH UNIT TYPE (PROVIDE TYPE) */ -\n        MIGRATION            /* AS A MIGRATION LEVEL 1 VOLUME */ -\n        (MIGRATIONLEVEL1     /* WITH NO SMALL DATA SET        */ -\n         NOSMALLDATASETPACKING) /* PACKING AVAILABLE.         */ -\n        THRESHOLD(100)       /* NO THRESHOLD PROCESSING.      */\n /* ML2 VOLUME                                                   */\n ADDVOL RESML2               /* ADD A VOLUME (PROVIDE SERIAL) */ -\n        UNIT(3390)           /* WITH UNIT TYPE (PROVIDE TYPE) */ -\n        MIGRATION            /* AS A MIGRATION LEVEL 1 VOLUME */ -\n        (MIGRATIONLEVEL2     /* WITH NO SMALL DATA SET        */ -\n         NOSMALLDATASETPACKING) /* PACKING AVAILABLE.         */ -\n        THRESHOLD(100)       /* NO THRESHOLD PROCESSING.      */\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ARCCMD91": {"ttr": 14, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": " /*                                                              */\n /****************************************************************/\n /* THE FOLLOWING EXAMPLE ADDVOL COMMANDS CAN BE USED WITH THE   */\n /* ARCCD00 MEMBER OF THE STARTER SET TO IDENTIFY LEVEL 2 TAPE   */\n /* MIGRATION VOLUMES.  AFTER YOU HAVE ADDED A VOLUME SERIAL     */\n /* NUMBER AND A UNIT TYPE IN THE SPACE PROVIDED, APPEND THIS    */\n /* COMMAND STREAM TO YOUR ARCCMD00 MEMBER.                      */\n /*                                                              */\n /****************************************************************/\n /*                                                              */\n ADDVOL ______               /* ADD A VOLUME (PROVIDE SERIAL)    */ -\n        MIGRATION            /* AS A MIGRATION LEVEL 2 TAPE      */ -\n         (MIGRATIONLEVEL2)   /* VOLUME.                          */ -\n        UNIT(______)         /* PROVIDE PROPER UNIT TYPE.        */\n /*                                                              */\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ARCCMD99": {"ttr": 1030, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x06\\x01\\x124?\\x01\\x124?\\x14\\x16\\x02\\x1f\\x02\\x1f\\x00\\x00\\xc5\\xe2\\xc1@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2012-12-08T00:00:00", "modifydate": "2012-12-08T14:16:06", "lines": 543, "newlines": 543, "modlines": 0, "user": "ESA"}, "text": " /*****************************************************************/\n /*              DFSMSHSM STARTUP COMMAND MEMBER                  */\n /*****************************************************************/\n /*****************************************************************/\n /*             DFSMSHSM AUTOMATIC FUNCTIONS                      */\n /*                                                               */\n /* *********** AUTOBACKUPSTART,  AUTODUMPSTART, ******************/\n /* ********** AUTOMATIC PRIMARY SPACE MANAGEMENT, ****************/\n /* ********* AUTOMATIC SECONDARY SPACE MANAGEMENT. ***************/\n /*                                                               */\n /* THE AUTOMATIC DFSMSHSM FUNCTIONS SPECIFIED IN THE FOLLOWING   */\n /* SETSYS COMMANDS CONTAIN ZEROS FOR START, LATE START, AND      */\n /* TIMES. THUS, NO AUTOMATIC FUNCTIONS ARE ACTIVATED WHEN        */\n /* DFSMSHSM IS STARTED ON YOUR SYSTEM. TO ACTIVATE AUTOMATIC     */\n /* FUNCTIONS, CHANGES THE TIMES TO VALUES THAT ARE APPROPRIATE   */\n /* FOR YOUR SYSTEM.                                              */\n /*****************************************************************/\n /*****************************************************************/\n /*              DFSMSHSM SYSTEM SPECIFICATIONS                   */\n /*****************************************************************/\n /*                                                               */\n AUTH MVSHSM                 /* ESTABLISH THE USER ID THAT CAN    */ -\n  DATABASEAUTHORITY(CONTROL) /* ISSUE AUTH COMMANDS.              */\n AUTH IBMUSER                /* ESTABLISH THE USER ID THAT CAN    */ -\n  DATABASEAUTHORITY(CONTROL) /* ISSUE AUTH COMMANDS.              */\n AUTH RACF                   /* ESTABLISH THE USER ID THAT CAN    */ -\n  DATABASEAUTHORITY(CONTROL) /* ISSUE AUTH COMMANDS.              */\n\n /*****************************************************************/\n /* NOTE THAT JES3 IS NOT ENABLED FOR HOSTMODE=AUX.  CONTACT IBM  */\n /* SUPPORT FOR ASSISTANCE.  IF USING A BIT TO TURN ON THIS MODE, */\n /* FOLLOW THE RECOMMENDED PROCEDURES LISTED BELOW:               */\n /* 1. START THE MAIN HOST BEFORE STARTING ANY AUX HOSTS          */\n /* 2. SHUTDOWN ALL AUX HOSTS BEFORE STOPPING THE MAIN HOST       */\n /*****************************************************************/\n\n SETSYS JES2                 /* JOB ENTRY SUBSYSTEM ID.           */\n\n SETSYS                      /* DO NOT REBLOCK DATA SETS DURING   */ -\n   NOCONVERSION              /* RECALL OR RECOVERY.               */\n\n SETSYS                      /* DO NOT ASK OPERATOR PERMISSION TO */ -\n   NOREQUEST                 /* START AUTOMATIC FUNCTIONS         */\n\n SETSYS                      /* MOVE OR DELETE DATA WHEN          */ -\n   NODEBUG                   /* PERFORMING AUTO FUNCTIONS.        */\n\n SETSYS NOSWAP               /* RUN DFSMSHSM NONSWAPPABLE.        */\n\n SETSYS                      /* DFSMSHSM USES IT OWN FACILITIES   */ -\n   DFHSMDATASETSERIALIZATION /* TO SERIALIZE DATA SETS.           */\n\n SETSYS                      /* DFSMSHSM USES ITS DEFINED OPTIMUM */ -\n   OPTIMUMDASDBLOCKING       /* BLOCK SIZE WHEN MOVING DATA TO    */\n                             /* DFSMSHSM-OWNED DASD.              */\n SETSYS                      /* DO NOT USE CMS OF ML1,ML2 AND     */ -\n   USECYLINDERMANAGEDSPACE(N) /* BACKUP EAVS                      */\n /*****************************************************************/\n /*                   DFSMSHSM EXITS                              */\n /*****************************************************************/\n /* MVSHSM change */\n SETSYS EXITON(MM)\n SETSYS EXITON(MD)\n SETSYS EXITON(RD)\n /* MVSHSM change */\n /*                   NONE ACTIVATED                              */\n /*****************************************************************/\n /*  DFSMSHSM LOGGING, JOURNALING, AND REPORTING OPTIONS          */\n /*****************************************************************/\n /*                                                               */\n\n SETSYS                      /* WRITE CDS CHANGES TO JOURNAL      */ -\n   JOURNAL(RECOVERY)         /* IMMEDIATELY.                      */\n\n SETSYS                      /* WRITE DAILY STATISTICS RECORDS AND*/ -\n   SMF(240)                  /* VOLUME STATISTIC RECORDS TO SMF   */\n                             /* RECORD TYPE 240; WRITE FUNCTIONAL */\n                             /* STATISTIC RECORDS TO TYPE 241.    */\n\n SETSYS                      /* WRITE ONE COPY OF SYSOUT TO       */ -\n   SYSOUT(A 1)               /* PRINTER CLASS A                   */\n\n SETSYS                      /* WRITE DFSMSHSM DUMPS TO SYSTEM    */ -\n   SYS1DUMP                  /* DUMP DATA SET.                    */\n\n SETSYS                      /* LOG ALL POSSIBLE DFSMSHSM ACTIVITY*/ -\n   ACTLOGMSGLVL(FULL)\n\n SETSYS                      /* WRITE ACTIVITY LOG INFORMATION TO */ -\n   ACTLOGTYPE(SYSOUT)        /* THE SYSOUT CLASS SPECIFIED BY THE */\n                             /* SYSOUT PARAMETER.                 */\n /*                                                               */\n /*****************************************************************/\n /*                   DFSMSHSM MONITOR OPTIONS                    */\n /*****************************************************************/\n /*                                                               */\n                             /* SPECIFY WHICH INFORMATIONAL       */\n                             /* MESSAGES TO SEND TO THE OPERATOR  */\n                             /* CONSOLE.                          */\n\n SETSYS                      /* LIST STARTUP PARAMETERS. DO NOT   */ -\n   MONITOR(STARTUP NOVOLUME) /* SEND DATA SET LEVEL MESSAGES TO   */\n                             /* THE SYSTEM CONSOLE.               */\n\n SETSYS                      /* DO NOT PRINT SPACE USAGE MSGS.    */ -\n   MONITOR(NOSPACE           /* WARN WHEN JOURNAL IS 80% FULL     */ -\n         JOURNAL(80))        /*                                   */\n\n /*                                                               */\n /*****************************************************************/\n /*         DFSMSHSM COMMON SERVICE AREA LIMITING OPTIONS         */\n /* THE FOLLOWING CSALIMITS PARAMETERS ARE IGNORED IF             */\n /* HOSTMODE=AUX HAS BEEN SPECIFIED AND WILL GENERATE AN ARC0103I */\n /* MESSAGE IF ISSUED.                                            */\n /*****************************************************************/\n /*                                                               */\n\n SETSYS                      /* LIMIT DFSMSHSM'S USAGE OF COMMON  */ -\n   CSALIMITS(MWE(4))         /* SEVICE AREA STORAGE. KEEP A       */\n                             /* MAXIMUM OF 4 NOWAIT TYPE MWES PER */\n                             /* ADDRESS SPACE ON THE CSA QUEUE.   */\n\n SETSYS                      /* NEVER ALLOCATE MORE THEN 100K OF  */ -\n   CSALIMITS(MAXIMUM(100)    /* STORAGE FOR MWES. ALLOCATE 90% OF */ -\n               ACTIVE(90)    /* AVAILABLE STORAGE TO MWES WHEN    */ -\n               INACTIVE(30)) /* DFSMSHSM IS ACTIVE. ALLOCATE ONLY */\n                             /* 30% OF AVAILABLE STORAGE WHEN     */\n                             /* DFSMSHSM IS INACTIVE.             */\n /*                                                               */\n /*****************************************************************/\n /*               DFSMSHSM TAPE HANDLING SPECIFICATIONS           */\n /*****************************************************************/\n /*                                                               */\n\n SETSYS                      /* SPECIFY IF EXTENDED TTOCS         */ -\n   EXTENDEDTTOC(N)           /* ARE IN USE                        */\n\n SETSYS                      /* USE IMPROVED DATA RECORDING       */ -\n   TAPEHARDWARECOMPACT       /* CAPABILITY WHEN 3480X OR NEWER    */\n                             /* THE OUTPUT DEVICE.                */\n\n SETSYS                      /* REUSE TAPES THAT ARE PARTIALLY    */ -\n   PARTIALTAPE(              /* FULL. DO NOT MARK THEM AS FULL.   */ -\n    BACKUP(REUSE) -\n    MIGRATION(REUSE))\n\n SETSYS                         /* DO NOT SUSPEND SYSTEM ACTIVITY */ -\n   INPUTTAPEALLOCATION(NOWAIT)  /* (WAIT) WHILE INPUT, OUTPUT, OR */ -\n   OUTPUTTAPEALLOCATION(NOWAIT) /* RECYCLE TAPES ARE BEING        */ -\n   RECYCLETAPEALLOCATION(NOWAIT) /* ALLOCATED.                    */\n\n SETSYS                      /* SCRATCH TAPE SELECTION AT TAPE END*/ -\n   SELECTVOLUME(             /* OF VOLUME (EOV) IF FROM THE GLOBAL*/ -\n   BACKUP(SCRATCH)           /* IS FROM THE GLOBAL SCRATCH POOL.  */ -\n   MIGRATION(SCRATCH) -\n   DUMP(SCRATCH))\n\n SETSYS                      /* INFORM THE STORAGE ADMINISTRATOR  */ -\n   RECYCLEPERCENT(20)        /* THAT A BACKUP OR MIGRATION TAPE   */\n                             /* SHOULD BE RECYCLED WHEN THE AMOUNT*/\n                             /* OF TAPE THAT IS OCCUPIED BY VALID */\n                             /* DATA IS 20% OR LESS.              */\n\n /*****************************************************************/\n /*  IF USERUNITTABLE IS SPECIFIED, IT SHOULD BE CODED PRIOR TO   */\n /*  ASSIGNMENT OF ANY OTHER UNIT STATEMENT.                      */\n /*****************************************************************/\n\n SETSYS                      /* NO ESOTERIC TAPE DEVICE NAMES ARE */ -\n   NOUSERUNITTABLE           /* DEFINED TO DFSMSHSM.              */\n\n SETSYS                      /* UTILIZE 97% OF TAPE CARTRIDGE     */ -\n   TAPEUTILIZATION(                                                  -\n    UNITTYPE(3590-1) PERCENTFUL(97))\n\n SETSYS                      /* THE AMOUNT OF SPACE THAT MAY NOT  */ -\n   TAPESPANSIZE(100)         /* BE UTILIZED AT THE LOGICAL END OF */\n                             /* A TAPE CARTRIDGE.                 */\n\n SETSYS                      /* RETURN TAPES THAT NO LONGER       */ -\n   TAPEDELETION(             /* CONTAIN VALID DATA TO THE         */ -\n    BACKUP(SCRATCHTAPE)      /* GLOBAL SCRATCH POOL.              */ -\n    MIGRATION(SCRATCHTAPE) -\n    DUMP(SCRATCHTAPE))\n\n SETSYS                      /* WAIT TEN MINUTES BEFORE REISSUING */ -\n   MOUNTWAITTIME(10)         /* ADDITIONAL MESSAGES TO TAPE       */\n                             /* OPERATORS FOR TAPE MOUNTS.        */\n\n SETSYS                      /* DIREST DFSMSHSM TO INITIALLY      */ -\n   UNITNAME(3590-1)          /* SPECIFY A 3590-1 DEVICE FOR       */\n                             /* BACKUP OR DUMP SCRATCH TAPES.     */\n\n SETSYS                      /* TAPE OPERATOR MESSAGES            */ -\n   TAPEINPUTPROMPT(MIGRATIONTAPES(YES))\n\n SETSYS                      /* TAPE OPERATOR MESSAGES            */ -\n   TAPEINPUTPROMPT(BACKUPTAPES(YES))\n\n SETSYS                      /* TAPE OPERATOR MESSAGES            */ -\n   TAPEINPUTPROMPT(DUMPTAPES(YES))\n\n SETSYS                      /* TURN ON TAPE DUPLEXING FOR BACKUP */ -\n   DUPLEX(                   /* AND MIGRATION. DURING MIGRATION   */ -\n    BACKUP(Y)                /* DUPLEXING IF ERRORS ARE           */ -\n    MIGRATION(               /* ENCOUNTERED ON THE ALTERNATE TAPE */ -\n     Y ERRORALTERNATE(       /* THEN PROCESSING OF THE ORIGINAL   */ -\n      CONTINUE)))            /* WILL CONTINUE.                    */\n\n                             /* NUMBER OF ML2 PARTIALS LEFT AFTER */\n SETSYS                      /* RECYCLE                           */ -\n   ML2PARTIALSNOTASSOCIATEDGOAL(10)\n\n /*                                                               */\n /*****************************************************************/\n /*             DFSMSHSM CONTROL DATA SET BACKUP PARAMETERS       */\n /*****************************************************************/\n /*                                                               */\n\n SETSYS                      /* MAINTAIN FOUR BACKUP VERSIONS     */ -\n   CDSVERSIONBACKUP(         /* OF THE CONTROL DATA SETS. BACK    */ -\n      BACKUPCOPIES(4)        /* UP THE CONTROL DATA SETS TO       */ -\n      BACKUPDEVICECATEGORY(  /* 3590-1 DEVICES IN PARALLEL USING  */ -\n        TAPE(UNITNAME(3590-1) /* USING DSS AS THE DATAMOVER       */ -\n        PARALLEL))  -\n      DATAMOVER(DSS))\n\n /*                                                               */\n /*****************************************************************/\n /*                DFSMSHSM RACF SPECIFICATIONS                   */\n /*****************************************************************/\n /*                                                               */\n\n SETSYS                      /* DO NOT PUT RACF-INDICATION        */ -\n   NORACFIND                 /* ON BACKUP AND MIGRATION           */\n                             /* COPIES OF DATA SETS.              */\n\n SETSYS                      /* USE RACF TO PROVIDE TAPE          */ -\n   TAPESECURITY(RACF)        /* SECURITY.                         */\n\n SETSYS                      /* DO NOT ALLOW ERASE-ON-SCRATCH     */ -\n   NOERASEONSCRATCH          /* ON ANY DFSMSHSM BACKUP            */\n                             /* VERSIONS AND MIGRATION COPIES     */\n\n SETSYS                      /* BACKUP DISCRETE RACF PROFILES     */ -\n   PROFILEBACKUP\n\n /*                                                               */\n /*****************************************************************/\n /*                DFSMSHSM COMPACTION OPTIONS                    */\n /*****************************************************************/\n /*                                                               */\n\n SETSYS                      /* COMPACT DATA SETS THAT MIGRATE TO */ -\n   COMPACT(DASDMIGRATE)      /* DASD.                             */\n\n SETSYS                      /* DO NOT COMPACT DATA UNLESS A      */ -\n     COMPACTPERCENT(20)      /* SAVINGS OF 20% OR MORE CAN BE     */\n                             /* GAINED.                           */\n\n SETSYS -\n   OBJECTNAMES(OBJ,OBJECT,LOAD,LOADLIB,LOADMODS,LINKLIB) -\n   SOURCENAMES(ASM,COBOL,FORT,PLI,SOURCE,SRC,SRCLIB,SRCE,CNTL,JCL)\n\n /*                                                               */\n /*****************************************************************/\n /*              DFSMSHSM MIGRATION PARAMETERS                    */\n /*****************************************************************/\n /*                                                               */\n\n SETSYS                      /* DO NOT ALLOW DFSMSHSM TO MIGRATE  */ -\n   TAPEMIGRATION(NONE)       /* DATA SETS TO LEVEL 2 TAPE VOLUMES.*/\n\n SETSYS                      /* SPECIFY PROCESSING WINDOW FOR     */ -\n   PRIMARYSPMGMTSTART        /* PRIMARY SPACE MANAGEMENT (LEVEL 0 */ -\n   (0000 0000)               /* TO LEVEL 1 MIGRATION              */\n\n DEFINE                      /* RUN PRIMARY SPACE MGMT EVERY      */ -\n   PRIMARYSPMGMTCYCLE        /* DAY, STARTING MARCH 02, 1998      */ -\n   (YYYYYYY -\n   CYCLESTARTDATE(1998/03/02))\n\n SETSYS                      /* A DATA SET THAT HAS NOT BEEN      */ -\n   DAYS(10)                  /* REFERRED TO (OPENED) FOR 10 DAYS  */\n                             /* IS ELIGIBLE FOR MIGRATION         */\n\n SETSYS                      /* SPECIFY A HIGH-LEVEL QUALIFIER    */ -\n   MIGRATEPREFIX(MVSHSM)     /* WITH WHICH DFSMSHSM RENAMES       */\n                             /* MIGRATED DATA SETS.               */\n\n SETSYS                      /* PERFORM MIGRATION THROUGHOUT      */ -\n   INTERVALMIGRATION         /* THE DAY.                          */\n\n SETSYS                       /* SPECIFY PROCESSING WINDOW FOR    */ -\n   SECONDARYSPMGMTSTART(0000) /* SECONDARY SPACE MANAGEMENT       */\n                              /* (LEVEL 1 TO LEVEL 2 MIGRATION)   */\n\n DEFINE                      /* RUN SECONDARY SPACE MANAGEMENT    */ -\n   SECONDARYSPMGMTCYCLE      /* EVERY DAY,                        */ -\n   (YYYYYYY                  /* STARTING MARCH 02, 1998.          */ -\n   CYCLESTARTDATE(1998/03/02))\n\n SETSYS                      /* KEEP MCDS RECORDS FOR RECALLED    */ -\n   MIGRATIONCLEANUPDAYS(10 30 3)  /* DATA SETS FOR 10 DAYS. KEEP  */\n                             /* VOLUME OR DAILY STATISTICS RECORDS*/\n                             /* FOR 30 DAYS. KEEP RECORDS TO      */\n                             /* RECONNECTABLE DATA SETS 3 DAYS    */\n                             /* BEYOND EARLIEST ELIGIBILITY.      */\n\n SETSYS                      /* MIGRATE DATA SETS FROM LEVEL 1    */ -\n /* MVSHSM change */\n   MIGRATIONLEVEL1DAYS(1)    /* VOLUMES TO LEVEL 2 VOLUMES IF THE */\n /* MVSHSM change */\n                             /* DATA SETS HAVE NOT BEEN REFERRED  */\n                             /* TO FOR 45 DAYS.                   */\n\n SETSYS                      /* DATA SET EXTENT REDUCTION         */ -\n   MAXEXTENTS(10)            /* OCCURS WHEN EXTENTS REACH 10.     */\n\n SETSYS                      /* LIMIT THE NUMBER OF CONCURRENT    */ -\n   MAXRECALLTASKS(8)         /* DFSMSHSM RECALL TASKS TO EIGHT.   */\n\n\n SETSYS                      /* DIRECT DFSMSHSM TO RECALL DATA    */ -\n   RECALL(PRIVATEVOLUME(LIKE))/* SETS TO ONLINE VOLUMES WITH THE  */\n                             /* USE ATTRIBUTE OF PUBLIC, STORAGE, */\n                             /* OR PRIVATE AND WITH LIKE          */\n                             /* CHARACTERISTICS.                  */\n\n SETSYS                      /* RETAIN LIST DATA SETS FOR 7 DAYS. */ -\n   SCRATCHFREQUENCY(7)       /* DO NOT SCRATCH EXPIRED DATA SETS. */ -\n   EXPIREDDATASETS(NOSCRATCH)\n\n SETSYS                      /* DO NOT MIGRATE SMALL DATA SETS AS */ -\n   NOSMALLDATASETPACKING     /* RECORDS TO SMALL DATA SET PACKING */\n                             /* (SDSP) DATA SETS.                 */\n\n SETSYS                      /* LIMIT THE NUMBER OF CONCURRENT    */ -\n   MAXMIGRATIONTASKS(3)      /* AUTOMATIC VOLUME MIGRATION TASKS  */\n                             /* TO THREE.                         */\n\n SETSYS                      /* LIMIT THE NUMBER OF CONCURRENT    */ -\n   MAXSSMTASKS               /* AUTOMATIC SECONDARY SPACE         */ -\n     (CLEANUP(2)             /* MANAGEMENT CLEANUP TASKS TO TWO   */ -\n      TAPEMOVEMENT(1))       /* AND TAPEMOVEMENT TASKS TO ONE     */\n\n /*                                                               */\n /*****************************************************************/\n /*                DFSMSHSM BACKUP PARAMETERS                     */\n /*****************************************************************/\n /*                                                               */\n\n ONLYIF                      /* THE FOLLOWING DEFINE COMMAND WILL */ -\n   HSMHOST(C)                /* EXECUTE ONLY IF THE ACTIVE HOST ID*/ -\n                             /* MATCHES THE HOST SPECIFIED.       */\n                                                                     -\n DEFINE BACKUP(Y 1           /* DIRECT DFSMSHSM TO BACKUP ELIGIBLE*/ -\n   CYCLESTARTDATE(1998/03/02)) /* DATA SETS DAILY (A 1 DAY CYCLE) */\n                             /* TO A SINGLE BACKUP VOLUME,STARTING*/\n                             /* MARCH 02, 1998.                   */\n\n SETSYS DSBACKUP(DASDSELECTIONSIZE(3000 250)  DASD(TASKS(2))         -\n   TAPE(TASKS(2) DEMOUNTDELAY(MINUTES(60)  MAXIDLETASKS(0))))\n                             /* BALANCE THE WORKLOAD BETWEEN TAPE */\n                             /* AND DASD FOR WAIT TYPE BACKDS     */\n                             /* COMMANDS. LIMIT THE NUMBER OF DATA*/\n                             /* SET BACKUP TAPE AND DASD TASKS.   */\n                             /* LIMIT THE NUMBER AND LENGTH OF    */\n                             /* TIME A TAPE TASK CAN REMAIN IDLE  */\n                             /* BEFORE BEING DEMOUNTED.           */\n\n SETSYS                      /* ACTIVATE THE BACKUP AND DUMP      */ -\n   BACKUP                    /* FUNCTION OF DFSMSHSM              */\n\n ONLYIF                      /* THE FOLLOWING SETSYS COMMAND WILL */ -\n   HSMHOST(C)                /* EXECUTE ONLY IF THE ACTIVE HOST ID*/ -\n                             /* MATCHES THE HOST SPECIFIED.       */ -\n\n SETSYS -\n   AUTOBACKUPSTART(0000 0000 0000)\n                             /* SPECIFY THE TIME FOR AUTOMATIC    */\n                             /* BACKUP TO BEGIN, THE LATEST START */\n                             /* TIME THAT AUTOMATIC BACKUP CAN    */\n                             /* BEGIN, AND THE QUIESCE TIME FOR   */\n                             /* AUTOMATIC BACKUP. NO AUTOMATIC    */\n                             /* BACKUP OCCURS UNTIL THESE TIMES   */\n                             /* ARE SPECIFIED.                    */\n\n SETSYS                      /* SPECIFY A HIGH-LEVEL QUALIFIER    */ -\n   BACKUPPREFIX(MVSHSM)      /* WITH WHICH DFSMSHSM RENAMES BACKED*/\n                             /* UP DATA SETS                      */\n\n SETSYS                      /* KEEP ONE VERSION OF EACH BACKED UP*/ -\n   VERSIONS(1)               /* DATA SET.                         */ -\n   FREQUENCY(0)\n\n SETSYS                      /* LIMIT THE NUMBER OF CONCURRENT    */ -\n   MAXBACKUPTASKS(3)         /* BACKUP TASKS TO THREE, BACK UP ALL*/ -\n   NOSKIPABPRIMARY           /* DFSMSHSM-MANAGED VOLUMES THAT HAVE*/\n                             /* THE AUTO BACKUP ATTRIBUTE.        */\n\n SETSYS                      /* LIMIT THE NUMBER OF CONCURRENT    */ -\n   MAXDSRECOVERTASKS(3)      /* DFSMSHSM DATA SET RECOVER TASKS   */\n                             /* TO THREE                          */\n\n SETSYS                      /* DURING DAILY BACKUP, MOVE         */ -\n   SPILL                     /* DATA SETS FROM FULL DAILY         */\n                             /* DASD VOLUMES TO SPILL VOLUMES.    */\n\n SETSYS                      /* MAKE INITIAL BACKUP COPIES OF DATA*/ -\n   INCREMENTALBACKUP(ORIGINAL) /* SETS DESPITE THE SETTING OF THE */\n                             /* CHANGE BIT.                       */\n\n SETSYS                      /* DFSMShsm will process BACKDS      */ -\n   DSBACKUP(GENVSAMCOMPNAMES(YES)) /* NEWNAME, request DFSMSdss   */\n                           /* create default names (.data .index) */\n\n /*                                                               */\n /*****************************************************************/\n /*            DFSMSHSM FULL VOLUME DUMP PARAMETERS               */\n /*****************************************************************/\n /*                                                               */\n\n ONLYIF                      /* THE DEFINE COMMAND WILL EXECUTE IF*/ -\n   HSMHOST(C)                /* THE ACTIVE HOST ID = C            */\n DEFINE -\n   DUMPCYCLE(NNNNNNY         /* 7-DAY DUMP CYCLE WITH DUMP DONE   */ -\n    CYCLESTARTDATE(1998/03/02)) /* ONLY ON THE SEVENTH DAY,       */\n                             /* STARTING ON MONDAY MARCH 02, 1998,*/\n                             /* SO DUMPS OCCUR ON SUNDAY.         */\n\n DEFINE DUMPCLASS(SUNDAY DAY(7) -\n   RETPD(27) AUTOREUSE NORESET  -\n   DATASETRESTORE VTOCCOPIES(4))\n                             /* DEFINE A DUMP CLASS NAMED SUNDAY  */\n                             /* THAT IS AUTOMATICALLY DUMPED ON   */\n                             /* THE SEVENTH DAY OF THE CYCLE.     */\n                             /* EACH DUMP COPY IS HELD FOR 27 DAYS*/\n                             /* AND THE TAPE IS REUSED WHEN IT IS */\n                             /* SCRATCHED. DO NOT RESET DATA SET  */\n                             /* CHANGE BITS. ALLOW TSO USERS TO   */\n                             /* RESTORE DATA SETS FROM DUMP TAPE. */\n                             /* AT MOST, KEEP FOUR VTOC COPY DUMP */\n                             /* DATA SETS FOR EACH VOLUME.        */\n\n DEFINE DUMPCLASS(QUARTERS   /* DEFINE A DUMP CLASS NAMED QUARTERS*/ -\n   FREQUENCY(90) RETPD(356)  /* THAT IS AUTOMATICALLY DUMPED EVERY*/ -\n   NOAUTOREUSE               /* THREE MONTHS AND IS HELD FOR ONE  */ -\n   NODATASETRESTORE NORESET  /* WEEK LESS THEN A YEAR. USE IS FOR */ -\n   DISPOSITION('OFF-SITE')   /* ONLY FULL RESTORES. HOLD THE TAPE */ -\n   VTOCCOPIES(0))            /* OFF-SITE AND KEEP NO VTOC COPIES  */\n                             /* FOR THIS CLASS.                   */\n\n SETSYS -\n   AUTODUMPSTART(0000 0000 0000)\n                             /* SPECIFY THE TIME FOR AUTOMATIC    */\n                             /* DUMP TO BEGIN, THE LATEST START   */\n                             /* THAT AUTOMATIC DUMP CAN BEGIN,    */\n                             /* AND THE QUIESCE TIME FOR AUTOMATIC*/\n                             /* DUMP. NO AUTOMATIC DUMP OCCURS    */\n                             /* UNTIL THESE TIMES ARE SPECIFIED.  */\n\n SETSYS                      /* BUFFER FIVE TRACKS WHEN PERFORMING*/ -\n   DUMPIO(3,2)               /* A DUMP. BUFFER TWO TRACKS DURING  */\n                             /* DATA MOVEMENT.                    */\n\n SETSYS                      /* LIMIT THE NUMBER OF CONCURRENT    */ -\n   MAXDUMPTASKS(3)           /* DUMP TASK TO THREE.               */\n\n/*                                                                */\n/******************************************************************/\n/*      DFSMSHSM AGGREGATE BACKUP AND RECOVER PARAMETERS          */\n /* THE FOLLOWING ABARS PARAMETERS ARE IGNORED IF HOSTMODE=AUX    */\n /* HAS BEEN SPECIFIED AND WILL GENERATE AN ARC0103I MESSAGE IF   */\n /* ISSUED.                                                       */\n /*****************************************************************/\n/*                                                                */\n\nSETSYS                       /* RECOVER DATA SET AGGREGATES TO    */ -\n  ARECOVERUNITNAME(3590-1)   /* 3590-1 TAPE DEVICES.              */\n\nSETSYS                       /* START ONLY ONE SECONDARY ADDRESS  */ -\n  MAXABARSADDRESSSPACE(1)    /* SPACE FOR BACKING UP AND          */\n                             /* RECOVERING AGGREGATED DATA SETS   */\n\nSETSYS                       /* START THE SECONDARY ADDRESS       */ -\n  ABARSPROCNAME(DFHSMABR)    /* SPACE WITH THE STARTUP PROCEDURE  */\n                             /* NAMED DFHSMABR.                   */\n\nSETSYS                       /* WRITE THE ABARS ACTIVITY LOG TO   */ -\n  ABARSACTLOGTYPE(DASD)      /* DASD                              */\n\nSETSYS                       /* LOG ALL ABARS MESSAGES            */ -\n  ABARSACTLOGMSGLVL(FULL)\n\nSETSYS                       /* RECOVER ML2 DATA SETS TO TAPE.    */ -\n  ARECOVERML2UNIT(3590-1)\n\nSETSYS                       /* USE 90% OF THE AVAILABLE TAPE FOR */ -\n  ARECOVERPERCENTUTILIZED(090) /* ARECOVERY TAPES.                */\n\nSETSYS                       /* BACKUP AGGREGATES TO 3590-1       */ -\n  ABARSUNITNAME(3590-1)      /* DEVICES.\n\nSETSYS                       /* BACKUP ABARS DATA SETS WITH TWO   */ -\n  ABARSBUFFERS(2)            /* DATA MOVEMENT BUFFERS.            */\n\nSETSYS                       /* SPECIFY ABARS TO STACK THE        */ -\n  ABARSTAPES(STACK)          /* ABACKUP OUTPUT ONTO A MINIMUM     */\n                             /* NUMBER OF TAPE VOLUMES            */\n\nSETSYS                       /* ABARS ACTIVITY LOG WILL NOT BE    */ -\n  ABARSDELETEACTIVITY(N)     /* AUTOMATICALLY DELETED DURING      */\n                             /* ABARS PROCESSING                  */\n\nSETSYS                       /* SET PERFORMANCE OF BACKING UP     */ -\n  ABARSOPTIMIZE(3)           /* LEVEL 0 DASD DATASETS             */\n\nSETSYS                       /* TARGET DATASET IS TO BE ASSIGNED  */ -\n  ARECOVERTGTGDS(SOURCE)     /* SOURCE STATUS                     */\n\nSETSYS                       /* ALLOWS RECOVERY OF A LEVEL 0      */ -\n  ABARSVOLCOUNT(ANY)         /* DASD DATA SET UP TO 59 VOLUMES    */\n /*                                                               */\n /*****************************************************************/\n /*            DFSMSHSM HSMPLEX/SYSPLEX PARAMETERS                */\n /*****************************************************************/\n /*                                                               */\n\nSETSYS                       /* SPECIFY THE SUFFIX FOR THE        */ -\n  PLEXNAME(PLEX0)            /* HSMPLEX IN A MULTI-HSMPLEX        */\n                             /* ENVIRONMENT   ARC(SUFFIX)         */\n\nSETSYS                       /* SPECIFY HOST NOT TO TAKE OVER     */ -\n  PROMOTE(PRIMARYHOST(NO)    /* PRIMARY OR SSM RESPONSIBILITIES   */ -\n  SSM(NO))\n\n /*                                                               */\n /*****************************************************************/\n /* SEE MEMBER ARCCMD90 IN esa.prj.cbthsm.cntl FOR AN EXAMPLE OF  */\n /* ADDVOL COMMAND TO BE USED IN CONJUNCTION WITH THIS COMMAND    */\n /* STREAM.                                                       */\n /*****************************************************************/\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "HSMEDIT": {"ttr": 272, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//EDITLOG  JOB ?JOBPARM\n//*\n//****************************************************************/\n//*           THIS JOB PRINTS THE EDIT-LOG DATA SET              */\n//*                                                              */\n//* REPLACE THE FOLLOWING ?UID VARIABLE WITH THE NAME OF THE     */\n//* DFSMSHSM-AUTHORIZED USER (1 TO 7 CHARS).                     */\n//* (NOTE: UID AUTHORIZATION IS VALID IN A NON-FACILITY CLASS    */\n//* ENVIRONMENT ONLY, OTHERWISE, FACILITY CLASS PROFILES WILL BE */\n//* USED FOR AUTHORIZATION CHECKING.)                            */\n//****************************************************************/\n//*\n//EDITLOG EXEC PGM=ARCPEDIT\n//ARCPRINT DD SYSOUT=*\n//ARCLOG DD DSN=?UID.EDITLOG,DISP=SHR\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "HSMHELP": {"ttr": 16, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": ")F Function:\n             The HSENDCMD command is used by authorized TSO users\n             to communicate with the DFSMShsm functions.\n)X SYNTAX:\n             HSENDCMD(WAIT | NOWAIT) command\n\nREQUIRED  -  command - You must enter a command.\nDEFAULTS  -  none\nALIAS     -  none\n\n)O OPERANDS:\n            'command' - specifies the DFSMShsm operator command.\nDEFAULTS  -  none\n\nThe following is a list of all DFSMShsm commands except\nthe user commands:\n\nABACKUP - Back up aggregated date sets\nADDVOL - Add or change the volumes to be controlled by DFSMShsm\nALTERDS - Change the backup specifications for a data set\nARECOVER - Recover aggregated date sets\nAUDIT - Audit DFSMShsm\nAUTH - Authorize a TSO user for DFSMShsm commands\nBACKDS - Create a backup version of a data set\nBACKVOL - Create a backup version of all data sets on a volume or\n          or on CDS\nBDELETE - Delete a backup version of a data set\nCANCEL - Cancel a queued DFSMShsm request\nDEFINE - Define control structures to DFSMShsm\nDELETE - Delete a data set that has been migrated\nDELVOL - Remove a volume from DFSMShsm control\nDISPLAY - Display DFSMShsm storage locations\nEXPIREBV - Delete unwanted backup versions of data sets\nFIXCDS - Repair a DFSMShsm control data set\nFRBACKUP - Create a fast replication backup of a copy pool\nFRDELETE - Delete a backup version of a copy pool\nFREEVOL - Move migrated data sets from migration volumes,\n          and backup data sets from backup volumes\nFRRECOV - Re-create a volume or copy pool from a backup version\nHOLD - Suspend a DFSMShsm function\nLIST - List information from the DFSMShsm control data sets\nLOG - Enter data into the DFSMShsm Log\nMIGRATE - Space manage a specific volume or migrate a data set\nPATCH - Modify DFSMShsm storage locations\nQUERY - List the status of DFSMShsm parameters, statistics, requests\nRECALL - Recall a data set\nRECOVER - Re-create a data set or a volume from a backup version\nRECYCLE - Move valid backup or migration copies from one tape\n          to another\nRELEASE - Resume a DFSMShsm function\nREPORT - Request reports based on DFSMShsm statistics\nSETMIG - Change the eligibility for migration of data sets\nSETSYS - Define or change the DFSMShsm installation parameters\nSTOP - Stop the DFSMShsm system task\nSWAPLOG - Switch the DFSMShsm log data sets\nTAPECOPY - Copy a DFSMShsm-owned migration or backup tape volume\n           to an alternate volume\nTAPEREPL - Replace a DFSMShsm-owned migration or backup tape volume\n           with an alternate volume\nTRAP - Request a dump when a specified error occurs\nUPDATEC - Apply the DFSMShsm journal to recover a control data set\nThe following list shows specific information about each command.\nYou could request the same information by typing HELP HSMHELP\nOPERANDS(command).\n\n))ABACKUP  agname\n           UNIT(unittype)\n           EXECUTE | VERIFY\n           MOVE\n           FILTEROUTPUTDATASET(dsname)\n           PROCESSONLY(LEVEL0 | MIGRATIONLEVEL1 | MIGRATIONLEVEL2 |\n                       USERTAPE)\n           STACK | NOSTACK\n           OPTIMIZE(1|2|3|4)\n           SKIP(PPRC | XRC | NOPPRC | NOXRC)\n           LIST(SKIPPED)\n))ADDVOL   volser\n           BACKUP | DUMP | MIGRATION | PRIMARY\n           UNIT(unittype)\n               (AUTOBACKUP | NOAUTOBACKUP)\n               (AUTODUMP(class,(class,class,class,class))|NOAUTODUMP)\n               (AUTOMIGRATION | NOAUTOMIGRATION)\n               (AUTORECALL | NOAUTORECALL)\n               (BACKUPDEVICECATEGORY(TAPE | DASD | NONE))\n               (DAILY(day) | SPILL)\n               (DELETEBYAGE(days) | DELETEIFBACKEDUP(days) |\n               MIGRATE(days))\n               DENSITY(2|3|4)\n               (DRAIN | NODRAIN)\n               (OVERFLOW | NOOVERFLOW)\n\n               (DUMPCLASS(class))\n               (MIGRATIONLEVEL1 | MIGRATIONLEVEL2)\n               (SMALLDATASETPACKING | NOSMALLDATASETPACKING)\n               THRESHOLD(thresh1(thresh2))\n               TRACKMANAGEDTHRESHOLD(thresh1 thresh2)\n\n))ALTERDS  (dsname...)\n                FREQUENCY(days) | SYSFREQUENCY\n                VERSIONS(limit) | SYSVERSIONS\n\n))ARECOVER DATASETNAME(controlfiledsname) |\n               STACK | NOSTACK\n               VOLUMES(volser1 ... volsern) | XMIT\n                   UNIT(unittype)\n           AGGREGATE(agname)\n               DATE(yyyy/mm/dd) | VERSION(nnnn)\n           EXECUTE | VERIFY | PREPARE\n               ACTVITY\n               DATASETCONFLICT\n                (RENAMESOURCE(level) |\n                 RENAMETARGET(level) |\n                 BYPASS | REPLACE)\n               INSTRUCTION\n               MENTITY(modeldsn)\n               MIGRATEDDATA(ML1 | ML2 | SOURCELEVEL)\n               NOBACKUPMIGRATED\n               ONLYDATASET\n                (NAME(dsname) |\n                 LISTOFNAMES(listdsname))\n               PERCENTUTILIZED(percent)\n               RECOVERNEWNAMEALL(level)|\n                RECOVERNEWNAMELEVEL(olevel1,nlevel1, ...,)\n               TARGETUNIT(unittype)\n               TGTGDS(SOURCE | ACTIVITY | DEFERRED | ROLLEDOFF)\n               VOLCOUNT(ANY | NONE)\n\n))AUDIT -  Command Variations:\n\n  AUDIT    ABARCONTROLS | ABARSCONTROLS(agname)\n\n  AUDIT    ALL\n                FIX | NOFIX\n                OUTDATASET(dsname) | SYSOUT(class)\n                REPORT(ALL | ERRORS)\n                SERIALIZATION(CONTINUOUS)\n\n  AUDIT    BACKUPTYPE(DAILY(day) | SPILL | ALL)\n                FIX | NOFIX\n                OUTDATASET(dsname) | SYSOUT(class)\n                REPORT(ALL | ERRORS)\n                SERIALIZATION(CONTINUOUS)\n\n  AUDIT    BACKUPCONTROLDATASET | MIGRATIONCONTROLDATASET |\n            OFFLINECONTROLDATASET(DAILY(day) | ML2 | SPILL | ALL)\n                FIX | NOFIX\n                OUTDATASET(dsname) | SYSOUT(class) | TERMINAL\n                REPORT(ALL | ERRORS)\n                SERIALIZATION(CONTINUOUS)\n\n  AUDIT    BACKUPVOLUMES(volser ...)\n                FIX | NOFIX\n                OUTDATASET(dsname) | SYSOUT(class) | TERMINAL\n                REPORT(ALL | ERRORS)\n                SERIALIZATION(CONTINUOUS)\n\n  AUDIT    COMMONQUEUE(RECALL)\n                FIX | NOFIX\n\n  AUDIT    COPYPOOLCONTROLS\n             (cpname)\n\n  AUDIT    DATASETCONTROLS(MIGRATION | BACKUP)\n                DATASETNAMES(dsname ...) | LEVELS(qualifier ...) |\n                RESUME\n                FIX | NOFIX\n                OUTDATASET(dsname) | SYSOUT(class)\n                REPORT(ERRORS)\n                SERIALIZATION(DYNAMIC | CONTINUOUS)\n\n  AUDIT    DATASETNAMES(dsname ...)\n                FIX | NOFIX\n                OUTDATASET(dsname) | SYSOUT(class) | TERMINAL\n                REPORT(ALL)\n                SERIALIZATION(CONTINUOUS)\n\n  AUDIT    DIRECTORYCONTROLS VOLUMES(volser)\n                FIX | NOFIX\n                OUTDATASET(dsname) | SYSOUT(class)\n                REPORT(ERRORS)\n                SERIALIZATION(DYNAMIC | CONTINUOUS)\n\n  AUDIT    LEVELS(qualifier ...)\n                FIX | NOFIX\n                OUTDATASET(dsname) | SYSOUT(class) | TERMINAL\n                REPORT(ALL | ERRORS)\n                SERIALIZATION(CONTINUOUS)\n\n  AUDIT    MASTERCATALOG | USERCATALOG(catname)\n                NOFIX\n                OUTDATASET(dsname) | SYSOUT(class) | TERMINAL\n                REPORT(ALL | ERRORS)\n                SERIALIZATION(CONTINUOUS)\n\n  AUDIT    MEDIACONTROLS(SMALLDATASETPACKING)\n           VOLUMES(volser)\n                FIX | NOFIX\n                OUTDATASET(dsname) | SYSOUT(class)\n                REPORT(ERRORS)\n                SERIALIZATION(DYNAMIC | CONTINUOUS)\n\n  AUDIT    VOLUMES(volser ...)\n                FIX | NOFIX\n                OUTDATASET(dsname) | SYSOUT(class) | TERMINAL\n                REPORT(ALL | ERRORS)\n                SERIALIZATION(CONTINUOUS)\n\n  AUDIT    VOLUMECONTROLS(BACKUP)\n                VOLUMES(volser ...) | BACKUPTYPE(DAILY(day)) |\n                SPILL | ALL\n                FIX | NOFIX\n                OUTDATASET(dsname) | SYSOUT(class)\n                REPORT(ERRORS)\n                SERIALIZATION(DYNAMIC | CONTINUOUS)\n\n  AUDIT    VOLUMECONTROLS(MIGRATION | RECOVERABLE)\n                VOLUMES(volser ...)\n                FIX | NOFIX\n                OUTDATASET(dsname) | SYSOUT(class)\n                REPORT(ERRORS)\n                SERIALIZATION(DYNAMIC | CONTINUOUS)\n\n))AUTH     userid\n           DATABASEAUTHORITY(USER | CONTROL) | REVOKE\n\n))BACKDS   dsname\n                NEWNAME(newdatasetname)\n                  DATE(yyyy/mm/dd)\n                    TIME(hhmmss)\n                  SPHERE(YES | NO)\n                  GENVSAMCOMPNAMES(YES | NO)\n                UNIT(unittype) VOLUME(volser)\n                TARGET(DASD | TAPE)\n                CC(PREFERRED | STANDARD | REQUIRED |\n                   VIRTUALPREFERRED | VIRTUALREQUIRED |\n                   CACHEPREFERRED | CACHEREQUIRED\n                     PHYSICALEND | LOGICALEND)\n                RETAINDAYS(days)\n\n))BACKVOL  PRIMARY | VOLUMES(volser...) | STORAGEGROUP(sgname ...) |\n                CONTROLDATASETS(\n                     DATAMOVER(HSM | DSS)\n                     BACKUPDEVICECATEGORY\n                          (DASD | TAPE(PARALLEL | NOPARALLEL)) |\n                     NULLJOURNALONLY)\n                FREQUENCY(days)\n                INCREMENTAL | TOTAL\n                DUMP(DUMPCLASS(class,class,class,class,class)\n                RETENTIONPERIOD(days | * | NOLIMIT ...)\n                STACK(nn | * ...) )\n                TERMINAL\n                UNIT(unittype)\n\n))BDELETE  (dsname...)  ALL | VERSIONS(bvn ...) |\n                        DATE(yyyy/mm/dd) TIME(hhmmss)\n                FROMVOLUME(volser)\n\n))CANCEL        DATASETNAME(dsn) | REQUEST(num) | USERID(userid)\n\n))DEFINE        ARPOOL(agname | ALL\n                              | ML1VOLS(* | volser ... volsern)\n                              | L0VOLS(* | volser ... volsern))\n                BACKUP(cycle(bvol) CYCLESTARTDATE(yyyy/mm/dd))\n                DUMPCLASS(class)\n                AUTOREUSE | NOAUTOREUSE\n                DATASETRESTORE | NODATASETRESTORE\n                DAY(day)\n                DISABLE\n                DISPOSITION('disposition')\n                FREQUENCY(days)\n                RESET | NORESET\n                RETENTIONPERIOD(days | NOLIMIT\n                STACK(number)\n                SWITCHTAPES(DSBACKUP(TIME(hhmm) | AUTOBACKUPEND\n                                     PARTIALTAPE(REUSE |\n                                                 MARKFULL |\n                                                 SETSYS)))\n\n                TAPEEXPIRATIONDATE(yyyyddd)\n                UNIT(unittype)\n                VTOCCOPIES(copies)\n                DUMPCYCLE(cycle CYCLESTARTDATE(yyyy/mm/dd))\n                MIGRATIONCLEANUPCYCLE(cycle(CYCLESTARTDATE(yyyy/mm/dd)))\n                MIGRATIONLEVEL2(KEYS(key ...) VOLUMES(volser...))\n                POOL(poolid VOLUMES(volser))\n                PRIMARYSPMGMTCYCLE(cycle CYCLESTARTDATE(yyyy/mm/dd))\n                SECONDARYSPMGMTCYCLE(cycle CYCLESTARTDATE(yyyy/mm/dd))\n                VOLUMEPOOL(poolid VOLUMES(volser))\n\n))DELETE   dsn\n                PURGE\n\n))DELVOL   volser\n           BACKUP | DUMP | MIGRATION | PRIMARY\n               (PURGE | REASSIGN | UNASSIGN | MARKFULL\n               LASTCOPY\n               COPYPOOLCOPY)\n\n))DISPLAY  (address (:address)...)\n           LENGTHS(bytes...)\n           LOGONLY\n           OUTDATASET(dsname)\n           VOLSER(volser)\n\n))EXPIREBV DISPLAY | EXECUTE\n                ABARVERSIONS\n                ABARVERSIONS(AGNAME(agname))\n                RETAINVERSIONS(n)\n                NONSMSVERSIONS(DELETEIFBACKEDUP(days)\n                CATALOGEDDATA(days)\n                UNCATALOGEDDATA(days))\n                STARTKEY(lowkey) | RESUME\n                ENDKEY(highkey)\n                OUTDATASET(dsname) | SYSOUT(class)\n\n))FIXCDS   type\n           key\n            ADDMIGRATEDDATASET(volser) | ASSIGNEDBIT(ON | OFF) |\n            CREATE(offset data) | DELETE | DISPLAY(offset) |\n            EXPAND(bytes) | NEWKEY(keyname) |\n            VERIFY(offset data | BITS(bits))|\n            PATCH(offset data | BIT(bits))\n            ENTRY(volser dsname)\n            LENGTH(bytes)\n            LOGONLY\n            OUTDATASET(dsname)\n            REFRESH(ON|OFF)\n\n))FREEVOL MIGRATIONVOLUME(volser)\n            AGE(days)\n            TARGETLEVEL(MIGRATIONLEVEL1 | MIGRATIONLEVEL2(TAPE|DASD))\n          BACKUPVOLUME(volser)\n            AGE(days)\n            TARGETLEVEL(SPILL (TAPE | DASD))\n            RETAINNEWESTVERSION\n\n))FRBACKUP COPYPOOL(cpname)\n             EXECUTE\n               TOKEN(token)\n               NOVTOCENQ\n               FORCE\n               DUMP\n                 RETURNCONTROL(DUMPEND | FASTREPLICATIONEND)\n                 DUMPCLASS(dclass1,...,dclass5)\n             PREPARE\n               FORCE\n             WITHDRAW\n             DUMPONLY(\n               TOKEN(token) | VERSION(vernum) | DATE(yyyy/mm/dd) |\n               GENERATION(gennum))\n               DUMPCLASS(dclass1,...,dclass5)\n\n))FRDELETE COPYPOOL(cpname)\n             VERSIONS(ver,...) | TOKEN(token) | ALL\n             BOTH | DASDONLY | DUMPONLY(DUMPCLASS(dclass1,...,dclass5))\n\n))FRRECOV  TOVOLUME(volser)\n             FROMCOPYPOOL(cpname)\n             FROMDASD |\n             FROMDUMP(\n               DUMPCLASS(dclass) | DUMPVOLUME(dvol)\n               APPLYINCREMENTAL)\n           COPYPOOL(cpname)\n             VERIFY(Y|N)\n             FROMDASD |\n             FROMDUMP(\n               DUMPCLASS(dclass)\n               PARTIALOK\n               RESUME(YES | NO))\n           DSNAME(dsname) REPLACE\n             FROMDASD |\n             FROMDUMP(\n               DUMPCLASS(dclass) | DUMPVOLUME(dvol))\n             FASTREPLICATION(PREFERRED | REQUIRED | NONE)\n             FROMCOPYPOOL(cpname)\n             NOCOPYPOOLBACKUP(RC4 | RC8)\n           GENERATION(gennum) | VERSION(vernum) |\n           DATE(yyyy/mm/dd) | TOKEN(token)\n\n\n))HOLD          ABACKUP(agname)\n                ALL\n                ARECOVER\n                  AGGREGATE(agname) | DATASETNAME(controlfiledsn)\n                AUDIT\n                AUTOMIGRATION\n                BACKUP(AUTO\n                       DSCOMMAND(\n                                 DASD |\n                                 TAPE |\n                                 SWITCHTAPES))\n                COMMONQUEUE(\n                  RECALL(\n                         SELECTION | PLACEMENT))\n                DUMP(AUTO | FASTREPLICATIONBACKUP)\n                ENDOFDATASET | ENDOFVOLUME\n                EXPIREBV\n                FRBACKUP\n                FRRECOV(\n                 DATASET | TAPE))\n                LIST\n                LOG\n                MIGRATION(AUTO)\n                RECALL(TAPE(TSO))\n                RECOVER(TAPEDATASET)\n                RECYCLE\n                REPORT\n                TAPECOPY\n                TAPEREPL\n\n))HSENDCMD command\n                WAIT | NOWAIT\n\nIf you are working from the DFSMShsm panel and your command\nfits on the COMMAND === line of the panel, then simply type\nTSO HSENDCMD ---command---\nIf you need space for a multiline command, then split the\nscreen and select 'OPTION 6'.\nType in the multiline command.\nAfter the command has been processed, return to the DFSMShsm panel.\n\n))LIST  -  Command Variations :\n\n  LIST     AGGREGATE(agname)\n           AGGREGATE(*)\n             DATE(yyy/mm/dd)\n             VERSION(nnnn)\n\n  LIST     BACKUPVOLUME(volser)\n           OUTDATASET(dsname) | SYSOUT(class) | TERMINAL\n           SELECT(EMPTY)\n\n  LIST     COPYPOOL\n             (cpname)\n             FASTREPLICATIONVOLS | NOVOLS | DUMPVOLS |\n             ALLOVLS(\n               GENERATION(gennum) | ALLVERS | TOKEN(token))\n             SELECT(\n               FASTREPLICATIONSTATE(RECOVERABLE | DUMPONLY |\n                                    FAILED | NONE) |\n               DUMPSTATE(ALLCOMPLETE | REQUIREDCOMPLETE |\n                         PARTIAL | NONE))\n           COPYPOOLBACKUPSTORAGEGROUP(cpbsgname)\n\n  LIST     DATASETNAME(dsname) | LEVEL(qualifier)\n                BACKUPCONTROLDATASET| MIGRATIONCONTROLDATASET | BOTH\n                INCLUDEPRIMARY\n                OUTDATASET(dsname) | SYSOUT(class) | TERMINAL\n                SELECT(AGE(mindays) maxdays) | MIGRATIONLEVEL1 |\n                MIGRATIONLEVEL2 | VOLUME(volser) |\n                RETAINDAYS | ACTIVE |\n                SMALLDATASETPACKING | NOSMALLDATASETPACKING |\n                VSAM |\n                EMPTY)       /* List empty migrated data sets */\n                SUMMARY\n\n  LIST     DUMPCLASS(class)\n                BACKUPCONTROLDATASET\n                OUTDATASET(dsname) | SYSOUT(class) | TERMINAL\n\n  LIST     DUMPVOLUME(volser)\n                BACKUPCONTROLDATASET\n                DUMPCONTENTS(volser)\n                SELECT(AVAILABLE UNAVAILABLE EXPIRED UNEXPIRED\n                LIB NOLIB NORETENTIONLIMIT DUMPCLASS(class))\n                OUTDATASET(dsname) | SYSOUT(class) | TERMINAL\n\n  LIST     HOST(hostid)\n                RESET\n                OUTDATASET(dsname) | SYSOUT(class) | TERMINAL\n\n  LIST     MIGRATIONVOLUME |\n           MIGRATIONLEVEL1 SELECT(OVERFLOW | NOOVERFLOW) |\n           MIGRATIONLEVEL2(DASD | TAPE) | VOLUME(volser)\n                BACKUPCONTROLDATASET | MIGRATIONCONTROLDATASET | BOTH\n                ALLDUMPS\n                OUTDATASET(dsname) | SYSOUT(class) | TERMINAL\n                SELECT(EMPTY)\n\n  LIST     PRIMARYVOLUME(volser)\n                ALLDUMPS | BACKUPCONTENTS(nn)\n                BACKUPCONTROLDATASET | MIGRATIONCONTROLDATASET| BOTH\n                OUTDATASET(dsname) | SYSOUT(class) | TERMINAL\n                SELECT(MULTIPLEVOLUME VSAM)\n\n  LIST    TAPETABLEOFCONTENTS\n                OUTDATASETNAME(dsname) | SYSOUT(class) | TERMINAL\n                BACKUPCONTROLDATASET | MIGRATIONCONTROLDATASET | BOTH\n                SELECT(\n                 MIGRATIONLEVEL2 | BACKUP | BOTH\n                 NOALTERNATEVOLUME | ALTERNATEVOLUME | FAILEDRECYCLE |\n                 FAILEDCREATE | EXCESSIVEVOLUMES | RECALLTAKEAWAY |\n                 DISASTERALTERNATEVOLUMES\n                 EMPTY | FULL | NOTFULL | ASSOCIATED | NOTASSOCIATED\n                 ERRORALTERNATE |\n                 CONNECTED(volser) | NOTCONNECTED\n                 LIB(ALTERNATE) | NOLIB(ALTERNATE) )\n\n  LIST    TAPETABLEOFCONTENTS(volser)\n               OUTDATASET(dsname) | SYSOUT(class) | TERMINAL\n               BACKUPCONTROLDATASET | MIGRATIONCONTROLDATASET | BOTH\n               NODATASETINFORMATION | DATASETINFORMATION\n\n  LIST     USER(userid)\n               OUTDATASET(dsname) | SYSOUT(class) | TERMINAL\n\n))LOG      data\n\n))MIGRATE  DATASETNAME(dsname) | MIGRATIONLEVEL1 | PRIMARY |\n           VOLUME(volser1 MIGRATE(days)\n           DELETEBYAGE(days) | DELETEIFBACKEDUP(days)| MIGRATE(days))\n                CONVERT(volser2 unittype2)\n                DAYS(days)\n                MIGRATIONLEVEL1\n                MIGRATIONLEVEL2\n                TERMINAL\n                UNIT(unittype)\n\n))PATCH    address\n           data | BITS(bits)\n                OUTDATASET(dsname)\n                VERIFY(address data | BITS(bits))\n                VOLSER(volser)\n\n))QUERY         ABARS\n                ACTIVE\n                ARPOOL(agname)\n                AUTOPROGRESS\n                BACKUP(ALL | DAILY(day) | SPILL | UNASSIGNED)\n                CDSVERSIONBACKUP\n                COMMONQUEUE(RECALL)\n                CONTROLDATASETS\n                COPYPOOL(cpname)\n                CSALIMITS\n                DATASETNAME(dsname) | REQUEST(reqnum) | USER(userid)\n                MIGRATIONLEVEL2\n                POOL\n                RETAIN\n                SECURITY\n                SETSYS\n                SPACE(volser ...)\n                STARTUP\n                STATISTICS\n                TRAPS\n                VOLUMEPOOL\n                WAITING\n\n))RECALL   dsname\n                DAOPTION(SAMETRK | RELTRK | RELBLK)\n                DFDSSOPTION(RETRY | VOLCOUNT(N(nn) | ANY) |\n                    RETRY VOLCOUNT(N(nn) | ANY))\n                FORCENONSMS\n                UNIT(unittype)\n                VOLUME(volser)\n\n))RECOVER  dsname\n                DAOPTION(SAMETRK | RELTRK | RELBLK)\n                DATE(date) | DATE(date) TIME(time) |\n                    GENERATION(gennum) | VERSION(vernum)\n                DFDSSOPTION(RETRY | VOLCOUNT(N(nn) | ANY) |\n                    RETRY VOLCOUNT(N(nn) | ANY))\n                FORCENONSMS\n                FROMDUMP(DUMPCLASS(class) | DUMPVOLUME(volser)\n                         SOURCEVOLUME(volser))\n                FROMVOLUME(volser)\n                NEWNAME(newdsname)\n                REPLACE\n                TOVOLUME(volser)\n                UNIT(unittype)\n\n))RECOVER  *\n                TOVOLUME(volser)\n                UNIT(unittype)\n                     DATE(date)\n                     FROMDUMP(DUMPCLASS(class) | DUMPVOLUME(volser) |\n                              DUMPGENERATION(dgennum) APPLYINCREMENTAL)\n                     TARGETVOLUME(volser)\n\n                     TERMINAL\n\n))RECYCLE  ALL | BACKUP | DAILY(day) | ML2 | SPILL | VOLUME(volser)\n           CHECKFIRST(Y | N)\n           DISPLAY | EXECUTE | VERIFY\n                OUTDATASET(dsname)\n                TAPELIST( PULLSIZE(size) TOTAL(count) PREFIX(prefix) |\n                                                      FULLDSNAME(dsn))\n                FORCE\n                PERCENTVALID(pct)\n                LIMIT(netfreed)\n\n))RELEASE       ABACKUP(agname)\n                ALL\n                ARECOVER AGGREGATE(agname)|DATASETNAME(controlfiledsn)\n                AUDIT\n                AUTOMIGRATION\n                BACKUP(AUTO\n                       DSCOMMAND(\n                                 DASD |\n                                 TAPE))\n                COMMONQUEUE(\n                  RECALL(\n                         SELECTION | PLACEMENT))\n                DUMP(AUTO | FASTREPLICATIONBACKUP)\n                EXPIREBV\n                FRBACKUP\n                FRRECOV(\n                 DATASET | TAPE)\n                HARDCOPY\n                LIST\n                LOG\n                MIGRATION(AUTO)\n                RECALL(TAPE(TSO))\n                RECOVER(TAPEDATASET)\n                RECYCLE\n                REPORT\n                TAPECOPY\n                TAPEREPL\n\n))REPORT  DAILY\n          DELETE\n          FROMDATE(date)\n          OUTDATASET(dsname) | SYSOUT(class)\n          NOFUNCTION | FUNCTION\n          (BACKUP | DELETE | MIGRATION(FROMANY | FROMMIGRATIONLEVEL1 |\n                                       FROMPRIMARY)\n                                      (TOANY | TOMIGRATIONLEVEL1 |\n                                       TOMIGRATIONLEVEL2) |\n          RECALL(FROMANY | FROMMIGRATIONLEVEL1 | FROMMIGRATIONLEVEL2)|\n          RECOVER | RECYCLE(BACKUP | MIGRATION | ALL) | SPILL))\n          SUMMARY\n          TODATE(date)\n          VOLUMES(volser ...)\n\n))SETMIG   DATASETNAME(dsname) | LEVEL(qualifier) | VOLUME(volser)\n                COMMANDMIGRATION | MIGRATION | NOMIGRATION\n\n))SETSYS        ABARSPROCNAME(abarsprocname)\n                ABARSACTLOGTYPE(SYSOUT(class) | DASD)\n                ABARSACTLOGMSGLVL(FULL | REDUCED)\n                ABARSBUFFERS(n)\n                ABARSDELETEACTIVITY(Y | N)\n                ABARSKIP(PPRC | XRC | NOPPRC | NOXRC)\n                ABARSOPTIMIZE(1|2|3|4)\n                ABARSPROCNAME(name)\n                ABARSTAPES(STACK | NOSTACK)\n                ABARSUNITNAME(unittype)\n                ABARSVOLCOUNT(NONE | ANY)\n                ACCEPTPSCBUSERID | NOACCEPTPSCBUSERID\n                ACTLOGMSGLVL(FULL | EXCEPTIONONLY | REDUCED)\n                ACTLOGTYPE(SYSOUT(class) | DASD)\n                ARECOVERPERCENTUTILIZED(percent)\n                ARECOVERREPLACE | NOARECOVERREPLACE\n                ARECOVERTGTGDS(SOURCE|ACTIVITY|DEFERRED|ROLLEDOFF)\n                ARECOVERUNITNAME(unittype)\n                ARECOVERML2UNIT(unittype)\n                AUTOBACKUPSTART(hhmm1(hhmm2(hhmm3)))\n                AUTODUMPSTART(hhmm1(hhmm2(hhmm3)))\n                AUTOMIGRATIONSTART(hhmm1(hhmm2(hhmm3)))\n                BACKUP( ANY | DASD | TAPE(unittype)) | NOBACKUP\n                BACKUPPREFIX(prefix)\n                CDSVERSIONBACKUP\n                     (BACKUPCOPIES(backupcopies)\n                     DATAMOVER(HSM | DSS)\n                     BACKUPDEVICECATEGORY(DASD |\n                              TAPE\n                              (PARALLEL | NOPARALLEL\n                              DENSITY(density)\n                              EXPIRATIONDATE(expirationdate) |\n                              RETENTIONPERIOD(retentionperiod))\n                              UNITNAME(unittype)))\n                     BCDSBACKUPDSN(dsname)\n                     JRNLBACKUPDSN(dsname)\n                     MCDSBACKUPDSN(dsname)\n                     OCDSBACKUPDSN(dsname))\n                COMMONQUEUE(RECALL\n                     (CONNECT(base_name) | DISCONNECT)\n                COMPACT((ALL | NONE) | (DASDBACKUP | NODASDBACKUP)\n                        (DASDMIGRATE | NODASDMIGRATE)\n                        (TAPEBACKUP | NOTAPEBACKUP)\n                        (TAPEMIGRATE | NOTAPEMIGRATE))\n\n                COMPACTPERCENT(pct)\n\n                CONVERSION((REBLOCKBASE | REBLOCKTOANY |\n                           REBLOCKTOUNLIKE) | NOCONVERSION)\n\n                CSALIMITS(ACTIVE(percent 1)\n                          INACTIVE(percent 2)\n                          MAXIMUM(Kbytes)\n                          MWE(#mwes)) | NOCSALIMITS\n\n                DAYS(days)\n                DEBUG | NODEBUG\n                DEFERMOUNT|NODEFERMOUNT\n                DENSITY(2 | 3 | 4)\n                DFHSMDATASETSERIALIZATION | USERDATASETSERIALIZATION\n                DISASTERMODE(Y|N)\n\n                DSBACKUP(DASDSELECTIONSIZE(maximum standard)\n                         DASD(TASKS(nn))\n                         TAPE(TASKS(nn)\n                              DEMOUNTDELAY(MINUTES(minutes)\n                                           MAXIDLETASKS(drives))))\n\n                DSSXMMODE(Y | N) |\n                  (BACKUP(Y | N)  CDSBACKUP(Y | N)  DUMP(Y | N)\n                   MIGRATION(Y | N)  RECOVERY(Y | N))\n                DUMPIO(1 | 2 | 3 | 4, 1 | 2 | 3 | 4)\n                DUPLEX(BACKUP(Y | N) |\n                       MIGRATION(Y ERRORALTERNATE(CONTINUE | MARKFULL)|\n                                 N) |\n                       BACKUP(Y | N)\n                       MIGRATION(Y ERRORALTERNATE(CONTINUE | MARKFULL)|\n                                 N))\n                EMERGENCY | NOEMERGENCY\n                ERASEONSCRATCH | NOERASEONSCRATCH\n                EXITOFF(modname, modname, ...)\n                EXITON(modname, modname, ...)\n                EXITS(abcdefghi)\n                EXPIREDDATASETS(SCRATCH | NOSCRATCH)\n                EXPORTESDS(CIMODE | RECORDMODE)\n                EXTENDEDTTOC(Y | N)\n                FASTREPLICATION(DATASETRECOVERY(PREFERRED |\n                                REQUIRED | NONE))\n                FREQUENCY(days)\n                INCREMENTALBACKUP(CHANGEDONLY | ORIGINAL)\n                INPUTTAPEALLOCATION(WAIT | NOWAIT)\n                INTERVALMIGRATION | NOINTERVALMIGRATION\n                JES2 | JES3\n                JOURNAL(RECOVERY | SPEED) | NOJOURNAL\n                MAXABARSADDRESSSPACE(number)\n                MAXBACKUPTASKS(tasks)\n                MAXCOPYPOOLTASKS(\n                   FRBACKUP(nn) FRRECOV(nn) DSS(nn))\n                MAXDSRECOVERTASKS(tasks)\n                MAXDSTAPERECOVERTASKS(tasks)\n                MAXDUMPTASKS(tasks)\n                MAXDUMPRECOVERTASKS(tasks)\n                MAXEXTENTS(extents)\n                MAXINTERVALTASKS(nn)\n                MAXMIGRATIONTASKS(nn)\n                MAXRECALLTASKS(tasks)\n                MAXSSMTASKS(CLEANUP(nn) TAPEMOVEMENT(mm))\n                MIGDENSITY(2 | 3 | 4)\n                MIGRATEPREFIX(prefix)\n                MIGRATIONCLEANUPDAYS(recalldays statdays reconnectdays)\n                MIGRATIONLEVEL1DAYS(days)\n                MIGUNITNAME(unittype)\n                ML1OVERFLOW(DATASETSIZE(dssize) THRESHOLD(threshold))\n                ML2PARTIALSNOTASSOCIATEDGOAL(nnn | NOLIMIT)\n                ML2RECYCLEPERCENT(pct)\n                MONITOR(BACKUPCONTROLDATASET(thresh)\n                        JOURNAL(thresh)\n                        MIGRATIONCONTROLDATASET(thresh)\n                        OFFLINECONTROLDATASET(thresh)\n                        SPACE | NOSPACE\n                        STARTUP | NOSTARTUP\n                        VOLUME | NOVOLUME)\n                MOUNTWAITTIME(minutes)\n                OBJECTNAMES(name1,name2,...)\n                OPTIMUMDASDBLOCKING | NOOPTIMUMDASDBLOCKING\n                OUTPUTTAPEALLOCATION(WAIT | NOWAIT)\n                PARTIALTAPE(MARKFULL | REUSE |\n                     MIGRATION(MARKFULL | REUSE)\n                     BACKUP(MARKFULL | REUSE))\n                PDA(NONE | ON | OFF)\n                PLEXNAME(plexname)\n                PRIMARYSPMGMTSTART(hhmm1 (hhmm2))\n                PROFILEBACKUP | NOPROFILEBACKUP\n                PROMOTE(PRIMARYHOST(YES | NO) SSM(YES | NO))\n                RACFIND | NORACFIND\n                RECALL(ANYSTORAGEVOLUME(LIKE | UNLIKE) |\n                       PRIVATEVOLUME(LIKE | UNLIKE))\n                RECYCLEOUTPUT(BACKUP(unittype) MIGRATION(unittype))\n                RECYCLEPERCENT(pct)\n                RECYCLETAPEALLOCATION(WAIT | NOWAIT)\n                REMOVECOMPACTNAMES(name1,name2,...)\n                REQUEST | NOREQUEST\n                SCRATCHFREQUENCY(days)\n                SECONDARYSPMGMTSTART(hhmm1 (hhmm2))\n                SELECTVOLUME(SCRATCH | SPECIFIC |\n                   MIGRATION(SCRATCH | SPECIFIC) |\n                   BACKUP(SCRATCH | SPECIFIC) |\n                   DUMP(SCRATCH | SPECIFIC) )\n                SKIPABPRIMARY | NOSKIPABPRIMARY\n                SMALLDATASETPACKING(tracks | KB(kilobytes)) |\n                NOSMALLDATASETPACKING\n                SMF(smfid) | NOSMF\n                SOURCENAMES(name1,name2,...)\n                SPILL(ANY | DASD | TAPE(unittype)) | NOSPILL\n                SWAP | NOSWAP\n                SYSOUT(class(copies forms))\n                SYS1DUMP | NOSYS1DUMP\n                TAPEDELETION(SCRATCHTAPE | HSMTAPE |\n                     MIGRATION(SCRATCHTAPE | HSMTAPE)\n                     BACKUP(SCRATCHTAPE | HSMTAPE)\n                     DUMP(SCRATCHTAPE | HSMTAPE))\n                TAPEFORMAT(SINGLEFILE)\n                TAPEHARDWARECOMPACT | NOTAPEHARDWARECOMPACT\n                TAPEINPUTPROMPT(MIGRATIONTAPES(YES | NO)\n                               BACKUPTAPES(YES | NO)\n                               DUMPTAPES(YES | NO))\n                TAPEMAXRECALLTASKS(tasks)\n                TAPEMIGRATION(DIRECT(TAPE(ANY | unittype)) |\n                               ML2TAPE(TAPE(ANY | unittype)) |\n                               NONE(ROUTETOTAPE(ANY | unittype))\n                               RECONNECT(NONE |\n                                         ALL |\n                                         ML2DIRECTEDONLY))\n\n                TAPEOUTPUTPROMPT(TAPECOPY(YES|NO))\n                TAPESECURITY((EXPIRATION | EXPIRATIONINCLUDE)\n                               PASSWORD (RACF | RACFINCLUDE))\n                TAPESPANSIZE(nnn)\n                TAPEUTILIZATION\n                  (UNITTYPE(unittype) PERCENTFULL(pct | NOLIMIT) |\n                  (LIBRARYBACKUP PERCENTFULL(pct | NOLIMIT) )    |\n                  (LIBRARYMIGRATION PERCENTFULL(pct | NOLIMIT) )\n\n                UNITNAME(unittype)\n                UNLOAD | NOUNLOAD\n                USERUNITTABLE(ES1,ES1OUT : ES2IN,ES3 : ES3) |\n                NOUSERUNITTABLE\n                VERSIONS(limit)\n                VOLCOUNT(NONE | ANY)\n                VOLUMEDUMP(NOCC | STANDARD |\n                           CC | PREFERRED |REQUIRED |\n                           VIRTUALPREFERRED | VIRTUALREQUIRED |\n                           CACHEPREFERRED | CACHEREQUIRED)\n                USECYLINDERMANAGEDSPACE(Y|N)\n\n))STOP          DUMP PROMOTE\n\n))SWAPLOG\n\n))TAPECOPY ALL | MIGRATIONLEVEL2 | BACKUP |\n           ORIGINALVOLUMES(ovol1,ovol2,...ovoln) | INDATASET(dsname)\n                ALTERNATEVOLUMES(avol1,avol2...avoln)\n                EXPDT((cc)yyddd) | RETPD(nnnn)\n                ALTERNATEUNITNAME(unittype1,unittype2) |\n                ALTERNATE3590UNITNAME(unittype1,unittype2) |\n                ALTERNATEUNITNAME(unittype1,unittype2)\n                     ALTERNATE3590UNITNAME(unittype1,unittype2)\n\n ))TAPEREPL ALL | BACKUP |\n            INDATASET(volrepl.list.dsname) |\n            MIGRATION |\n            ONLYDISASTERALTERNATES(\n                                   RESET) |\n            ORIGINALVOLUMES(ovol1,ovol2,...ovoln)\n                 ALTERNATEUNITNAME(unittype)\n                 ALTERNATEVOLUMES(avol1,avol2...avoln)\n                 DISASTERALTERNATEVOLUMES\n\n))TRAP     ALL | module\n                error code\n                ABEND(ALWAYS | NEVER | ONCE) |\n                LOG | OFF |\n                SNAP(ALWAYS | NEVER | ONCE)\n\n))UPDATEC  ALL | BACKUPCONTROLDATASET | MIGRATIONCONTROLDATASET |\n           OFFLINECONTROLDATASET\n                JOURNAL(dsname)\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "HSMLOG": {"ttr": 1028, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00 \\x01\\x124/\\x01\\x124/\\x13\\x02\\x00\\x14\\x00\\x14\\x00\\x00\\xc5\\xe2\\xc1@@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2012-12-07T00:00:00", "modifydate": "2012-12-07T13:02:20", "lines": 20, "newlines": 20, "modlines": 0, "user": "ESA"}, "text": "//HSMLOG JOB ,&SYSUID,NOTIFY=&SYSUID,\n//    CLASS=A,MSGCLASS=X,MSGLEVEL=(1,1),\n//    REGION=0M\n//*\n//****************************************************************/\n//*         THIS SAMPLE JOB PRINTS THE DFSMSHSM LOG              */\n//*                                                              */\n//* REPLACE THE MVSHSM VARIABLE IN THE FOLLOWING SAMPLE JOB WITH */\n//* THE NAME OF THE DFSMSHSM -AUTHORIZED USERID (1 TO 7 CHARS).  */\n//*                                                              */\n//* (NOTE: UID AUTHORIZATION IS VALID IN A NON-FACILITY CLASS    */\n//* ENVIRONMENT ONLY, OTHERWISE, FACILITY CLASS PROFILES         */\n//* WILL BE USED FOR AUTHORIZATION CHECKING.)                    */\n//****************************************************************/\n//*\n//PRINTLOG EXEC PGM=ARCPRLOG\n//ARCPRINT DD SYSOUT=*\n//ARCLOG DD DSN=MVSHSM.HSMLOGY1,DISP=OLD\n//ARCEDIT DD DSN=MVSHSM.EDITLOG,DISP=OLD\n//*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "HSMPRESS": {"ttr": 520, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//COMPRESS JOB ?JOBPARM\n//*\n//****************************************************************/\n//*  THIS SAMPLE JOB IS TO COMPRESS THE CONTROL DATA SETS.       */\n//*                                                              */\n//*  NOTE:  BEFORE RUNNING THIS JOB, YOU MUST SHUT DOWN ALL      */\n//*         ALL INSTANCES OF DFSMSHSM THAT SHARE THE CDS'S.      */\n//*                                                              */\n//* REPLACE THE ?UID VARIABLE WITH THE NAME OF THE DFSMSHSM-     */\n//* AUTHORIZED USER ID (1 TO 7 CHARACTERS).                      */\n//*                                                              */\n//* (NOTE: UID AUTHORIZATION IS VALID IN A NON-FACILITY CLASS    */\n//* ENVIRONMENT ONLY, OTHERWISE, FACILITY CLASS PROFILES WILL BE */\n//* USED FOR AUTHORIZATION CHECKING.)                            */\n//*                                                              */\n//* REPLACE THE ?NEW VARIABLE WITH AN EXTENSION NAME FOR THE     */\n//* NEW CDS BEING CREATED FROM THE IMPORT.  BECAUSE OF THE NAME  */\n//* CHANGE MADE TO THE CDS, MAKE SURE TO UPDATE THE ASSOCIATED   */\n//* PROCLIB MEMBER WITH THE NEW CDS NAME(S).                     */\n//*                                                              */\n//* IF YOU WISH TO ENLARGE THE CDS, PREALLOCATE A LARGER DATA    */\n//* SET WITH THE NEW SIZE (EITHER A NEW DATA SET, OR DELETE THE  */\n//* OLD DATA SET AND REALLOCATE WITH SAME NAME) THEN IMPORT.     */\n//* AGAIN, IF A NEW NAME IS USED, BE SURE TO UPDATE THE          */\n//* ASSOCIATED PROCLIB MEMBER WITH THE NEW CDS NAME(S).          */\n//*                                                              */\n//* THIS PROCEDURE ASSUMES THAT THE MCDS AND BCDS ARE SINGLE     */\n//* CLUSTER CDS'S.                                               */\n//*                                                              */\n//* Note: xCDS'S DD STMTS WITH DISP=OLD WILL KEEP OTHER JOBS     */\n//*  FROM ACCESSING THE CDS'S DURING THE EXPORT/IMPORT PROCESS.  */\n//****************************************************************/\n//*\n//ALLOCATE EXEC PGM=IEFBR14\n//EXPMCDS DD DSN=?UID.EXPORT.MCDS,DISP=(,CATLG),\n// UNIT=SYSDA,SPACE=(CYL,(20,2))\n//EXPBCDS DD DSN=?UID.EXPORT.BCDS,DISP=(,CATLG),\n// UNIT=SYSDA,SPACE=(CYL,(20,2))\n//EXPOCDS DD DSN=?UID.EXPORT.OCDS,DISP=(,CATLG),\n// UNIT=SYSDA,SPACE=(CYL,(20,2))\n//*\n//IDCAMS EXEC PGM=IDCAMS,REGION=512K\n//MCDS DD DSN=?UID.MCDS,DISP=OLD\n//BCDS DD DSN=?UID.BCDS,DISP=OLD\n//OCDS DD DSN=?UID.OCDS,DISP=OLD\n//SYSPRINT DD SYSOUT=*\n//SYSIN DD *\n LISTCAT ENT(?UID.MCDS ?UID.BCDS ?UID.OCDS) ALL\n EXAMINE NAME(?UID.MCDS) INDEXTEST\n IF LASTCC = 0 THEN -\n        EXPORT ?UID.MCDS ODS(?UID.EXPORT.MCDS) TEMPORARY\n IF LASTCC = 0 THEN -\n        IMPORT IDS(?UID.EXPORT.MCDS) ODS(?UID.MCDS.?NEW) -\n        OBJECTS -\n         ((?UID.MCDS -\n         NEWNAME(?UID.MCDS.?NEW)) -\n          (?UID.MCDS.DATA -\n           NEWNAME(?UID.MCDS.?NEW.DATA)) -\n          (?UID.MCDS.INDEX -\n           NEWNAME(?UID.MCDS.?NEW.INDEX))) -\n        CATALOG(?UCATNAM)\n IF MAXCC = 0 THEN -\n        DELETE ?UID.EXPORT.MCDS NONVSAM\n EXAMINE NAME(?UID.BCDS) INDEXTEST\n IF LASTCC = 0 THEN -\n        EXPORT ?UID.BCDS ODS(?UID.EXPORT.BCDS) TEMPORARY\n IF LASTCC = 0 THEN -\n        IMPORT IDS(?UID.EXPORT.BCDS) ODS(?UID.BCDS.?NEW) -\n        OBJECTS -\n         ((?UID.BCDS -\n         NEWNAME(?UID.BCDS.?NEW)) -\n          (?UID.BCDS.DATA -\n           NEWNAME(?UID.BCDS.?NEW.DATA)) -\n          (?UID.BCDS.INDEX -\n           NEWNAME(?UID.BCDS.?NEW.INDEX))) -\n        CATALOG(?UCATNAM)\n IF MAXCC = 0 THEN -\n        DELETE ?UID.EXPORT.BCDS NONVSAM\n EXAMINE NAME(?UID.OCDS) INDEXTEST\n IF LASTCC = 0 THEN -\n        EXPORT ?UID.OCDS ODS(?UID.EXPORT.OCDS) TEMPORARY\n IF LASTCC = 0 THEN -\n        IMPORT IDS(?UID.EXPORT.OCDS) ODS(?UID.OCDS.?NEW) -\n        OBJECTS -\n         ((?UID.OCDS -\n         NEWNAME(?UID.OCDS.?NEW)) -\n          (?UID.OCDS.DATA -\n           NEWNAME(?UID.OCDS.?NEW.DATA)) -\n          (?UID.OCDS.INDEX -\n           NEWNAME(?UID.OCDS.?NEW.INDEX))) -\n        CATALOG(?UCATNAM)\n IF MAXCC = 0 THEN -\n        DELETE ?UID.EXPORT.OCDS NONVSAM\n LISTCAT ENT(?UID.MCDS.NEW ?UID.BCDS.NEW ?UID.OCDS.NEW) ALL\n/*\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "STARTER": {"ttr": 527, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x19\\x01\\x124\\x0f\\x01\\x124\\x0f\\x11\\t\\x03n\\x03\\xa0\\x00\\x00\\xd9\\xc1\\xc3\\xc6@@@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2012-12-05T00:00:00", "modifydate": "2012-12-05T11:09:19", "lines": 878, "newlines": 928, "modlines": 0, "user": "RACF"}, "text": "//HSMALLOC JOB ,&SYSUID,NOTIFY=&SYSUID,\n//    CLASS=A,MSGCLASS=X,MSGLEVEL=(1,1),\n//    REGION=0M\n//DEFOUT OUTPUT CLASS=X,JESDS=LOG\n//VM     OUTPUT DEST=IBCRSSC1.MVSPRTSP,CLASS=C\n//*\n//********************************************************************/\n//* DFSMSHSM STARTER SET                                             */\n//*                                                                  */\n//* THIS JCL STREAM ESTABLISHES AN OPERATING DFSMSHSM ENVIRONMENT    */\n//* FOR A NEW USER OF DFSMSHSM OPERATING IN AN SMS ENVIRONMENT, OR   */\n//* FOR A USER WHO WANTS TO RUN THE FUNCTIONAL VERIFICATION          */\n//* PROCEDURE (FVP) IN AN ENVIRONMENT THAT IS SEPARATE FROM THE      */\n//* PRODUCTION ENVIRONMENT.  THE FVP IS FOUND IN ARCFVPST.           */\n//*                                                                  */\n//* EDIT THIS JCL FOR YOUR PROCESSING ENVIRONMENT.                   */\n//*                                                                  */\n//* YOU CAN DECREASE IMPLEMENTATION TIME BY MAKING GLOBAL CHANGES    */\n//* TO THE FOLLOWING PARAMETERS.  YOU MAY HAVE TO MAKE OTHER CHANGES */\n//* AS IDENTIFIED IN THE COMMENTS EMBEDDED IN THE JCL.               */\n//*                                                                  */\n//* IF YOU ALLOCATED SMS-MANAGED DATA SETS ON SPECIFIC VOLUMES,      */\n//* ENSURE THAT YOU ASSOCIATE THOSE DATA SETS WITH THE GUARANTEED    */\n//* SPACE ATTRIBUTE IN THEIR STORAGE CLASS DEFINITION.               */\n//*                                                                  */\n//* WE RECOMMEND THAT YOU DEFINE ALL DFSMSHSM DATA SETS WITH THE     */\n//* GUARANTEED-SPACE ATTRIBUTE IN THEIR STORAGE CLASS DEFINITIONS.   */\n//*                                                                  */\n//* WE RECOMMENDED THAT YOU DEFINE ALL DFSMSHSM DATA SETS WITH THE   */\n//* NO-MIGRATE AND NO-BACKUP ATTRIBUTES IN THEIR MANAGEMENT CLASS    */\n//* DEFINITIONS.  YOU CAN PREVENT DFSMSHSM DATA SETS FROM MIGRATING  */\n//* OR BEING BACKED UP BY ASSIGNING THEM TO THE DBSTNDRD MANAGEMENT  */\n//* CLASS.                                                           */\n//*                                                                  */\n//* WE RECOMMEND THAT YOU DEFINE THE LOG AND JOURNAL DATA SETS WITH  */\n//* A STORAGE CLASS DEFINITION FOR LOGGING OR FOR AUDIT TRAIL DATA   */\n//* SETS BY DEFINING THEM WITH THE STORAGE CLASS DBLOG.              */\n//*                                                                  */\n//* WE RECOMMEND THAT YOU DEFINE THE DFSMSHSM CONTROL DATA SETS WITH */\n//* A STORAGE CLASS DEFINITION THAT PROVIDES FAST RESPONSE BY        */\n//* DEFINING THEM WITH THE STORAGE CLASS DBENHANC.                   */\n//*                                                                  */\n//* THE SMS CONSTRUCTS (STORAGE CLASSES, STORAGE GROUPS, MANAGEMENT  */\n//* CLASSES, AND DATA CLASSES) ARE DISCUSSED IN THE STORAGE          */\n//* ADMINISTRATION GUIDE FOR DFSMSDFP.                               */\n//********************************************************************/\n//*                                                                  */\n//* CHANGE THE FOLLOWING PARAMETERS FOR YOUR PROCESSING ENVIRONMENT. */\n//*                                                                  */\n//********************************************************************/\n//*  PARAMETER     PARAMETER DEFINITION\n//*\n//*  ?MCDSVOL   -  VOLUME SERIAL NUMBER OF THE MCDS VOLUME\n//*  ?MCDSUNT   -  UNIT TYPE FOR MCDS VOLUME\n//*  ?BCDSVOL   -  VOLUME SERIAL NUMBER OF THE BCDS VOLUME\n//*  ?BCDSUNT   -  UNIT TYPE FOR BCDS VOLUME\n//*  ?OCDSVOL   -  VOLUME SERIAL NUMBER OF THE OCDS VOLUME\n//*  ?OCDSUNT   -  UNIT TYPE FOR OCDS VOLUME\n//*  ?CDSSIZE   -  NUMBER OF CYLINDERS TO INITIALLY ALLOCATE FOR ANY\n//*                CONTROL DATA SET\n//*  ?JRNLVOL   -  VOLUME SERIAL NUMBER OF THE JOURNAL\n//*  ?JRNLUNT   -  UNIT TYPE FOR JOURNAL VOLUME\n//*  ?LOGVOL    -  VOLUME SERIAL NUMBER OF THE LOG VOLUME\n//*  ?LOGUNIT   -  UNIT TYPE FOR LOG VOLUME\n//*  ?TRACEVOL  -  VOLUME SERIAL NUMBER OF THE PROBLEM DETERMINATION\n//*                AID VOLUME\n//*  ?TRACEUNIT -  UNIT TYPE FOR THE PROBLEM DETERMINATION AID VOLUME\n//*  ?UCATNAM   -  NAME OF THE USER CATALOG FOR THE DFSMSHSM DATA SETS.\n//*  ?UCATVOL   -  VOLUME SERIAL NUMBER OF THE USER CATALOG VOLUME\n//*  ?UCATUNT   -  UNIT TYPE FOR USER CATALOG VOLUME\n//*  ?CTLAUTH   -  THE USER ID THAT CAN ISSUE DFSMSHSM AUTH COMMANDS\n//*                (YOUR CONTROL-AUTHORIZED USER ID)\n//*  ?UID       -  AUTHORIZED USER ID (1 - 7 CHARACTERS) FOR THE\n//*                DFSMSHSM-STARTED PROCEDURE IN A NON-FACILITY CLASS\n//*                ENVIRONMENT (SEE NOTE BELOW).  THIS IS THE\n//*                HIGH-LEVEL QUALIFIER FOR DFSMSHSM DATA SETS.\n//*  ?JESVER    -  THE JOB ENTRY SUBSYSTEM (JES); EITHER JES2 OR JES3\n//*  ?JOBPARM   -  JOB CARD PARAMETERS\n//*  ?SCLOGNM   -  STORAGE CLASS FOR DFSMSHSM LOG AND JOURNAL\n//*  ?SCCDSNM   -  STORAGE CLASS NAME FOR DFSMSHSM CONTROL DATA SETS\n//*  ?MCDFHSM   -  MANAGEMENT CLASS NAME FOR DFSMSHSM DATA SETS\n//*  ?HOSTID    -  PROCESSING UNIT ID FOR THE PROBLEM DETERMINATION\n//*                AID FACILITY AND FOR IDENTIFYING THE HOST TO\n//*                DFSMSHSM\n//*  ?PRIMARY   -  YES OR NO; DEFINES WHETHER OR NOT THE DFSMSHSM\n//*                HOST PERFORMS AS A PRIMARY HOST\n//*  ?NEW       -  EXTENSION OF CDS NAME FOR IMPORT (HSMPRESS)\n//* (NOTE: UID AUTHORIZATION IS VALID IN A NON-FACILITY CLASS\n//* ENVIRONMENT ONLY, OTHERWISE, FACILITY CLASS PROFILES WILL BE\n//* USED FOR AUTHORIZATION CHECKING.)\n//*******************************************************************/\n//*\n//IDCAMS EXEC PGM=IDCAMS\n//*\n//*******************************************************************/\n//*  ENSURE THAT DFSMSHSM CONTROL DATA SETS, THE JOURNAL, AND ANY   */\n//*  CONTROL DATA SET BACKUP COPIES ARE ON DIFFERENT VOLUMES FROM   */\n//*  EACH OTHER.                                                    */\n//*                                                                 */\n//*  GIVE USERS WRITE ACCESS TO VSAM DATA SETS BY DEFINING VSAM     */\n//*  DATA SETS WITH A SHAREOPTION OF (3 3).  IT IS THE USER'S       */\n//*  RESPONSIBILITY TO PROTECT THE CONTROL DATA SETS AGAINST        */\n//*  UNAUTHORIZED ACCESS.                                           */\n//*                                                                 */\n//*******************************************************************/\n//*\n//HSMMCDS  DD UNIT=3390,VOL=SER=USERL2,DISP=SHR\n//*\n//*******************************************************************/\n//* REMOVE THE NEXT DD STATEMENT IF YOU DO NOT INTEND TO USE BACKUP */\n//* AND DUMP.                                                       */\n//*******************************************************************/\n//*\n//HSMBCDS  DD UNIT=3390,VOL=SER=USERL2,DISP=SHR\n//*\n//*******************************************************************/\n//* REMOVE THE NEXT DD STATEMENT IF YOU DO NOT INTEND TO USE TAPE   */\n//* VOLUMES FOR DAILY BACKUP VOLUMES, SPILL BACKUP VOLUMES, OR      */\n//* MIGRATION LEVEL 2 VOLUMES.                                      */\n//*******************************************************************/\n//*\n//*\n//SYSIN    DD *\n /*                                                                 */\n /*                                                              */\n /****************************************************************/\n /*  THIS PROCEDURE ASSUMES A SINGLE CLUSTER MCDS.  IF MORE THAN */\n /*  ONE VOLUME IS DESIRED, FOLLOW THE RULES FOR A MULTICLUSTER  */\n /*  CDS.                                                        */\n /****************************************************************/\n /*                                                              */\n IF MAXCC = 0 THEN DO\n   DEFINE CLUSTER (NAME(MVSHSM.MCDS) VOLUMES(USERL2) -\n        CYLINDERS(15) FILE(HSMMCDS) -\n        RECORDSIZE(435 2040) FREESPACE(0 0) -\n        INDEXED KEYS(44 0) SHAREOPTIONS(3 3) -\n        SPEED BUFFERSPACE(530432) -\n        UNIQUE NOWRITECHECK) -\n        DATA(NAME(MVSHSM.MCDS.DATA) -\n        CONTROLINTERVALSIZE(12288)) -\n        INDEX(NAME(MVSHSM.MCDS.INDEX) -\n        CONTROLINTERVALSIZE(2048))\n END\n /*                                                              */\n /****************************************************************/\n /* REMOVE THE NEXT DEFINE COMMAND IF YOU DO NOT                 */\n /* INTEND TO USE BACKUP, DUMP OR AGGREGATE BACKUP AND RECOVERY. */\n /*                                                              */\n /* THIS PROCEDURE ASSUMES A SINGLE CLUSTER BCDS.  IF MORE THAN  */\n /* ONE VOLUME IS DESIRED, FOLLOW THE RULES FOR A MULTICLUSTER   */\n /* CDS.                                                         */\n /*                                                              */\n /* IT'S RECOMMENDED THAT YOU SHOULD SPECIFY RECORDSIZE(334 2093)*/\n /* AND CISIZE(12288) WHEN CREATING UP TO 29 BACKUP VERSIONS     */\n /* OR RECORDSIZE(334 6544) AND CISIZE(12288) IF UP TO           */\n /* 100 BACKUP VERSIONS WILL BE KEPT OR IF FAST REPLICATION IS   */\n /* BEING USED (FRBACKUP).                                       */\n /*                                                              */\n /****************************************************************/\n /*                                                              */\n IF MAXCC = 0 THEN DO\n   DEFINE CLUSTER (NAME(MVSHSM.BCDS) VOLUMES(USERL2) -\n        CYLINDERS(15) FILE(HSMBCDS) -\n        RECORDSIZE(334 2093) FREESPACE(0 0) -\n        INDEXED KEYS(44 0) SHAREOPTIONS(3 3) -\n        SPEED BUFFERSPACE(530432) -\n        UNIQUE NOWRITECHECK) -\n        DATA(NAME(MVSHSM.BCDS.DATA) -\n        CONTROLINTERVALSIZE(12288)) -\n        INDEX(NAME(MVSHSM.BCDS.INDEX) -\n        CONTROLINTERVALSIZE(2048))\n END\n//SYSPRINT DD SYSOUT=*\n//*\n//****************************************************************/\n//*  ALLOCATE AND CATALOG THE DFSMSHSM LOG, EDIT LOG, AND JOURNAL*/\n//*  ON AN \"SMS\" VOLUME.                                         */\n//****************************************************************/\n//*\n//LOGALC   EXEC PGM=IEFBR14\n//HSMLOGX  DD DSN=MVSHSM.HSMLOGX1,DISP=(,CATLG),UNIT=3390,\n//   VOL=SER=USERL2,SPACE=(CYL,(3))\n//HSMLOGY  DD DSN=MVSHSM.HSMLOGY1,DISP=(,CATLG),UNIT=3390,\n//   VOL=SER=USERL2,SPACE=(CYL,(3))\n//EDITLOG  DD DSN=MVSHSM.EDITLOG,DISP=(,CATLG),UNIT=3390,\n//   VOL=SER=USERL2,SPACE=(CYL,(2))\n//*\n//****************************************************************/\n//*  THE JOURNAL MUST NOT EXCEED 1 VOLUME, MAY NOT HAVE          */\n//*  SECONDARY ALLOCATION, AND MUST BE ALLOCATED CONTIGUOUS.     */\n//****************************************************************/\n//*\n//JOURNAL DD DSN=MVSHSM.JRNL,DISP=(,CATLG),UNIT=3390,\n//   VOL=SER=USERL2,SPACE=(CYL,(5),,CONTIG)\n//*\n//****************************************************************/\n//*  ALLOCATE THE PROBLEM DETERMINATION AID (PDA) LOG ON \"SMS\"   */\n//*  OR ON 'NONSMS' VOLUME.  USE THE JCL BELOW FOR NONSMS        */\n//*  OR ADJUST THE BELOW TO MATCH THE JCL ABOVE FOR THE LOG      */\n//*  BY ADDING STORCLAS AND MGMTCLASS.                           */\n//*  REMOVE THE NEXT TWO DD CARDS IF YOU DO NOT PLAN TO USE PDA. */\n//****************************************************************/\n//*\n//ARCPDOX  DD DSN=MVSHSM.HSMPDOX,DISP=(,CATLG),VOL=SER=USERL2,\n//         UNIT=3390,SPACE=(CYL,(20,2))\n//ARCPDOY  DD DSN=MVSHSM.HSMPDOY,DISP=(,CATLG),VOL=SER=USERL2,\n//         UNIT=3390,SPACE=(CYL,(20,2))\n//HSMPROC  EXEC PGM=IEBUPDTE,PARM=NEW\n//SYSPRINT DD SYSOUT=*\n//SYSUT2   DD DSN=SYS9.PROCLIB,DISP=SHR\n//SYSIN    DD DATA,DLM='$A'\n./ ADD NAME=DFSMSHSM\n//*\n//*******************************************************************/\n//*                    DFSMSHSM START PROCEDURE                     */\n//*                                                                 */\n//* YOU CAN DUPLICATE AND RENAME THE FOLLOWING PROCEDURE FOR OTHER  */\n//* PROCESSORS IN A MULTIPLE-PROCESSING-UNIT ENVIRONMENT.           */\n//* ENSURE THAT YOU CHANGE THE CMD= AND HOST= KEYWORDS              */\n//* ENSURE THAT YOU CHANGE THE HIGH-LEVEL QUALIFIER FOR THE         */\n//* ARCLOGX AND ARCLOGY DATA SET NAMES.                             */\n//* KEYWORD DEFINITIONS:                                            */\n//*    CMD=00                 SPECIFY WHICH PARMLIB COMMAND MEMBER  */\n//*    STR=xx                 REPLACE xx WITH LAST TWO CHARACTERS   */\n//*                           OF THE SYS1.PARMLIB(ARCSTRxx)         */\n//*                           MEMBER THAT YOU CREATE PRIOR TO       */\n//*                           STARTING DFSMSHSM                     */\n//*    EMERG=YES|NO           START HSM IN EMERGENCY MODE           */\n//*    SIZE=0M                REGION SIZE FOR DFSMSHSM              */\n//*    LOGSW=YES|NO           SWITCH LOGS AT STARTUP                */\n//*    STARTUP=YES|NO         STARTUP INFO PRINT AT STARTUP         */\n//*    PDA=YES|NO             BEGIN PDA TRACING AT STARTUP          */\n//*    HOST=X                 SPECIFY HOSTID                        */\n//*    PRIMARY=YES|NO         SPECIFY PRIMARY HOST                  */\n//*    HOSTMODE=MAIN|AUX      INDICATE IF THIS IS A MAIN OR AUX HOST*/\n//*    DDD=50                 MAX DYNAMICALLY ALLOCATED DATASETS    */\n//*    RNAMEDSN=YES|NO        USE EXTENDED RESOURCE NAMES           */\n//*    CDSQ=YES|NO            SERIALIZE CDSs WITH GLOBAL ENQUEUES   */\n//*    CDSR=YES|NO            SERIALIZE CDSs WITH VOLUME RESERVES   */\n//*    CDSSHR=YES|NO|RLS      SPECIFY CDS SHARABILITY               */\n//*    RESTART=(A,B)          RESTART DFSMSHSM AFTER ABEND          */\n//*    CELLS=(200,100,100,50,20)  SIZES OF CELLPOOLS                */\n//*    UID=HSM                DFSMSHSM-AUTHORIZED USER ID.  ALSO    */\n//*                           USED FOR HLQ OF HSM DATASETS BUT NOT  */\n//*                           REQUIRED.                             */\n//*******************************************************************/\n//* IF ALL OF THE DFSMSHSM STARTUP PROCEDURE KEYWORDS ARE NEEDED,   */\n//* TOTAL LENGTH WILL EXCEED THE 100-BYTE LIMIT, IN WHICH CASE      */\n//* YOU SHOULD USE THE KEYWORD STR=XX IN PARM= TO IDENTIFY THE      */\n//* PARMLIB MEMBER CONTAINING THE ADDITIONAL KEYWORDS AND PARMS.    */\n//*******************************************************************/\n//DFSMSHSM   PROC CMD=99,     USE PARMLIB MEMBER ARCCMD00 FOR CMDS\n//           STR=00,          PARMLIB MEMBER FOR STARTUP PARMS\n//           EMERG=NO,        SETS HSM INTO NON-EMERGENCY MODE\n//           CDSQ=YES,        CDSs SERIALIZED WITH ENQUEUES\n//           PDA=YES,         PROBLEM DETERMINATION AID\n//           SIZE=0M,         REGION SIZE FOR DFSMSHSM\n//           DDD=50,          MAX DYNAMICALLY ALLOCATED DATASETS\n//           HOST=C,          PROC.UNIT ID AND LEVEL FUNCTIONS\n//           PRIMARY=YES LEVEL FUNCTIONS\n//*******************************************************************/\n//DFSMSHSM  EXEC PGM=ARCCTL,DYNAMNBR=&DDD,REGION=&SIZE,TIME=1440,\n//          PARM=('EMERG=&EMERG','CMD=&CMD','CDSQ=&CDSQ',\n//          'UID=MVSHSM','PDA=&PDA','HOST=&HOST','STR=&STR',\n//          'PRIMARY=&PRIMARY')\n//*****************************************************************/\n//*   HSMPARM DD must be deleted from the JCL or made into a      */\n//*       a comment to use Concatenated Parmlib Support           */\n//*****************************************************************/\n//HSMPARM  DD DSN=SYS9.PARMLIB,DISP=SHR\n//MSYSOUT  DD SYSOUT=A\n//MSYSIN   DD DUMMY\n//SYSPRINT DD SYSOUT=A,FREE=CLOSE\n//SYSUDUMP DD SYSOUT=A\n//*\n//*****************************************************************/\n//* THIS PROCEDURE ASSUMES A SINGLE CLUSTER MCDS.  IF MORE THAN   */\n//* ONE VOLUME IS DESIRED, FOLLOW THE RULES FOR A MULTICLUSTER    */\n//* CDS.                                                          */\n//*****************************************************************/\n//*\n//MIGCAT   DD DSN=MVSHSM.MCDS,DISP=SHR\n//JOURNAL  DD DSN=MVSHSM.JRNL,DISP=SHR\n//ARCLOGX  DD DSN=MVSHSM.HSMLOGX1,DISP=OLD\n//ARCLOGY  DD DSN=MVSHSM.HSMLOGY1,DISP=OLD\n//ARCPDOX  DD DSN=MVSHSM.HSMPDOX,DISP=OLD\n//ARCPDOY  DD DSN=MVSHSM.HSMPDOY,DISP=OLD\n//*\n//*****************************************************************/\n//* REMOVE THE NEXT DD STATEMENT IF YOU DO NOT INTEND TO USE      */\n//* BACKUP AND DUMP.                                              */\n//*                                                               */\n//* THIS PROCEDURE ASSUMES A SINGLE CLUSTER BCDS.  IF MORE THAN   */\n//* ONE VOLUME IS DESIRED, FOLLOW THE RULES FOR A MULTICLUSTER    */\n//* CDS.                                                          */\n//*****************************************************************/\n//*\n//BAKCAT   DD DSN=MVSHSM.BCDS,DISP=SHR\n//*\n//*****************************************************************/\n//* REMOVE THE NEXT DD STATEMENT IF YOU DO NOT INTEND TO USE TAPES*/\n//* FOR DAILY BACKUP, SPILL BACKUP OR MIGRATION LEVEL 2           */\n//* PROCESSING.                                                   */\n//*                                                               */\n//* THE OCDS MAY NOT EXCEED 1 VOLUME.                             */\n//*****************************************************************/\n//*\n//*OFFCAT   DD DSN=MVSHSM.OCDS,DISP=SHR\n./ ADD NAME=DFHSMABR\n//*\n//*****************************************************************/\n//*     ABARS SECONDARY ADDRESS SPACE STARTUP PROCEDURE           */\n//*****************************************************************/\n//*\n//DFHSMABR PROC\n//DFHSMABR EXEC PGM=ARCWCTL,REGION=0M\n//SYSUDUMP DD SYSOUT=A\n//MSYSIN DD DUMMY\n//MSYSOUT DD SYSOUT=A\n$A\n//HSMPROC  EXEC PGM=IEBUPDTE,PARM=NEW\n//SYSPRINT DD SYSOUT=*\n//SYSUT2   DD DSN=SYS9.PARMLIB,DISP=SHR\n//SYSIN    DD DATA,DLM='$A'\n./ ADD NAME=ARCCMD99\n /*****************************************************************/\n /*              DFSMSHSM STARTUP COMMAND MEMBER                  */\n /*****************************************************************/\n /*****************************************************************/\n /*             DFSMSHSM AUTOMATIC FUNCTIONS                      */\n /*                                                               */\n /* *********** AUTOBACKUPSTART,  AUTODUMPSTART, ******************/\n /* ********** AUTOMATIC PRIMARY SPACE MANAGEMENT, ****************/\n /* ********* AUTOMATIC SECONDARY SPACE MANAGEMENT. ***************/\n /*                                                               */\n /* THE AUTOMATIC DFSMSHSM FUNCTIONS SPECIFIED IN THE FOLLOWING   */\n /* SETSYS COMMANDS CONTAIN ZEROS FOR START, LATE START, AND      */\n /* TIMES. THUS, NO AUTOMATIC FUNCTIONS ARE ACTIVATED WHEN        */\n /* DFSMSHSM IS STARTED ON YOUR SYSTEM. TO ACTIVATE AUTOMATIC     */\n /* FUNCTIONS, CHANGES THE TIMES TO VALUES THAT ARE APPROPRIATE   */\n /* FOR YOUR SYSTEM.                                              */\n /*****************************************************************/\n /*****************************************************************/\n /*              DFSMSHSM SYSTEM SPECIFICATIONS                   */\n /*****************************************************************/\n /*                                                               */\n AUTH MVSHSM                 /* ESTABLISH THE USER ID THAT CAN    */ -\n  DATABASEAUTHORITY(CONTROL) /* ISSUE AUTH COMMANDS.              */\n AUTH IBMUSER                /* ESTABLISH THE USER ID THAT CAN    */ -\n  DATABASEAUTHORITY(CONTROL) /* ISSUE AUTH COMMANDS.              */\n AUTH RACF                   /* ESTABLISH THE USER ID THAT CAN    */ -\n  DATABASEAUTHORITY(CONTROL) /* ISSUE AUTH COMMANDS.              */\n\n /*****************************************************************/\n /* NOTE THAT JES3 IS NOT ENABLED FOR HOSTMODE=AUX.  CONTACT IBM  */\n /* SUPPORT FOR ASSISTANCE.  IF USING A BIT TO TURN ON THIS MODE, */\n /* FOLLOW THE RECOMMENDED PROCEDURES LISTED BELOW:               */\n /* 1. START THE MAIN HOST BEFORE STARTING ANY AUX HOSTS          */\n /* 2. SHUTDOWN ALL AUX HOSTS BEFORE STOPPING THE MAIN HOST       */\n /*****************************************************************/\n\n SETSYS JES2                 /* JOB ENTRY SUBSYSTEM ID.           */\n\n SETSYS                      /* DO NOT REBLOCK DATA SETS DURING   */ -\n   NOCONVERSION              /* RECALL OR RECOVERY.               */\n\n SETSYS                      /* DO NOT ASK OPERATOR PERMISSION TO */ -\n   NOREQUEST                 /* START AUTOMATIC FUNCTIONS         */\n\n SETSYS                      /* MOVE OR DELETE DATA WHEN          */ -\n   NODEBUG                   /* PERFORMING AUTO FUNCTIONS.        */\n\n SETSYS NOSWAP               /* RUN DFSMSHSM NONSWAPPABLE.        */\n\n SETSYS                      /* DFSMSHSM USES IT OWN FACILITIES   */ -\n   DFHSMDATASETSERIALIZATION /* TO SERIALIZE DATA SETS.           */\n\n SETSYS                      /* DFSMSHSM USES ITS DEFINED OPTIMUM */ -\n   OPTIMUMDASDBLOCKING       /* BLOCK SIZE WHEN MOVING DATA TO    */\n                             /* DFSMSHSM-OWNED DASD.              */\n SETSYS                      /* DO NOT USE CMS OF ML1,ML2 AND     */ -\n   USECYLINDERMANAGEDSPACE(N) /* BACKUP EAVS                      */\n /*****************************************************************/\n /*                   DFSMSHSM EXITS                              */\n /*****************************************************************/\n /* MVSHSM change */\n SETSYS EXITON(MM)\n SETSYS EXITON(MD)\n SETSYS EXITON(RD)\n /* MVSHSM change */\n /*                   NONE ACTIVATED                              */\n /*****************************************************************/\n /*  DFSMSHSM LOGGING, JOURNALING, AND REPORTING OPTIONS          */\n /*****************************************************************/\n /*                                                               */\n\n SETSYS                      /* WRITE CDS CHANGES TO JOURNAL      */ -\n   JOURNAL(RECOVERY)         /* IMMEDIATELY.                      */\n\n SETSYS                      /* WRITE DAILY STATISTICS RECORDS AND*/ -\n   SMF(240)                  /* VOLUME STATISTIC RECORDS TO SMF   */\n                             /* RECORD TYPE 240; WRITE FUNCTIONAL */\n                             /* STATISTIC RECORDS TO TYPE 241.    */\n\n SETSYS                      /* WRITE ONE COPY OF SYSOUT TO       */ -\n   SYSOUT(A 1)               /* PRINTER CLASS A                   */\n\n SETSYS                      /* WRITE DFSMSHSM DUMPS TO SYSTEM    */ -\n   SYS1DUMP                  /* DUMP DATA SET.                    */\n\n SETSYS                      /* LOG ALL POSSIBLE DFSMSHSM ACTIVITY*/ -\n   ACTLOGMSGLVL(FULL)\n\n SETSYS                      /* WRITE ACTIVITY LOG INFORMATION TO */ -\n   ACTLOGTYPE(SYSOUT)        /* THE SYSOUT CLASS SPECIFIED BY THE */\n                             /* SYSOUT PARAMETER.                 */\n /*                                                               */\n /*****************************************************************/\n /*                   DFSMSHSM MONITOR OPTIONS                    */\n /*****************************************************************/\n /*                                                               */\n                             /* SPECIFY WHICH INFORMATIONAL       */\n                             /* MESSAGES TO SEND TO THE OPERATOR  */\n                             /* CONSOLE.                          */\n\n SETSYS                      /* LIST STARTUP PARAMETERS. DO NOT   */ -\n   MONITOR(STARTUP NOVOLUME) /* SEND DATA SET LEVEL MESSAGES TO   */\n                             /* THE SYSTEM CONSOLE.               */\n\n SETSYS                      /* DO NOT PRINT SPACE USAGE MSGS.    */ -\n   MONITOR(NOSPACE           /* WARN WHEN JOURNAL IS 80% FULL     */ -\n         JOURNAL(80))        /*                                   */\n\n /*                                                               */\n /*****************************************************************/\n /*         DFSMSHSM COMMON SERVICE AREA LIMITING OPTIONS         */\n /* THE FOLLOWING CSALIMITS PARAMETERS ARE IGNORED IF             */\n /* HOSTMODE=AUX HAS BEEN SPECIFIED AND WILL GENERATE AN ARC0103I */\n /* MESSAGE IF ISSUED.                                            */\n /*****************************************************************/\n /*                                                               */\n\n SETSYS                      /* LIMIT DFSMSHSM'S USAGE OF COMMON  */ -\n   CSALIMITS(MWE(4))         /* SEVICE AREA STORAGE. KEEP A       */\n                             /* MAXIMUM OF 4 NOWAIT TYPE MWES PER */\n                             /* ADDRESS SPACE ON THE CSA QUEUE.   */\n\n SETSYS                      /* NEVER ALLOCATE MORE THEN 100K OF  */ -\n   CSALIMITS(MAXIMUM(100)    /* STORAGE FOR MWES. ALLOCATE 90% OF */ -\n               ACTIVE(90)    /* AVAILABLE STORAGE TO MWES WHEN    */ -\n               INACTIVE(30)) /* DFSMSHSM IS ACTIVE. ALLOCATE ONLY */\n                             /* 30% OF AVAILABLE STORAGE WHEN     */\n                             /* DFSMSHSM IS INACTIVE.             */\n /*                                                               */\n /*****************************************************************/\n /*               DFSMSHSM TAPE HANDLING SPECIFICATIONS           */\n /*****************************************************************/\n /*                                                               */\n\n SETSYS                      /* SPECIFY IF EXTENDED TTOCS         */ -\n   EXTENDEDTTOC(N)           /* ARE IN USE                        */\n\n SETSYS                      /* USE IMPROVED DATA RECORDING       */ -\n   TAPEHARDWARECOMPACT       /* CAPABILITY WHEN 3480X OR NEWER    */\n                             /* THE OUTPUT DEVICE.                */\n\n SETSYS                      /* REUSE TAPES THAT ARE PARTIALLY    */ -\n   PARTIALTAPE(              /* FULL. DO NOT MARK THEM AS FULL.   */ -\n    BACKUP(REUSE) -\n    MIGRATION(REUSE))\n\n SETSYS                         /* DO NOT SUSPEND SYSTEM ACTIVITY */ -\n   INPUTTAPEALLOCATION(NOWAIT)  /* (WAIT) WHILE INPUT, OUTPUT, OR */ -\n   OUTPUTTAPEALLOCATION(NOWAIT) /* RECYCLE TAPES ARE BEING        */ -\n   RECYCLETAPEALLOCATION(NOWAIT) /* ALLOCATED.                    */\n\n SETSYS                      /* SCRATCH TAPE SELECTION AT TAPE END*/ -\n   SELECTVOLUME(             /* OF VOLUME (EOV) IF FROM THE GLOBAL*/ -\n   BACKUP(SCRATCH)           /* IS FROM THE GLOBAL SCRATCH POOL.  */ -\n   MIGRATION(SCRATCH) -\n   DUMP(SCRATCH))\n\n SETSYS                      /* INFORM THE STORAGE ADMINISTRATOR  */ -\n   RECYCLEPERCENT(20)        /* THAT A BACKUP OR MIGRATION TAPE   */\n                             /* SHOULD BE RECYCLED WHEN THE AMOUNT*/\n                             /* OF TAPE THAT IS OCCUPIED BY VALID */\n                             /* DATA IS 20% OR LESS.              */\n\n /*****************************************************************/\n /*  IF USERUNITTABLE IS SPECIFIED, IT SHOULD BE CODED PRIOR TO   */\n /*  ASSIGNMENT OF ANY OTHER UNIT STATEMENT.                      */\n /*****************************************************************/\n\n SETSYS                      /* NO ESOTERIC TAPE DEVICE NAMES ARE */ -\n   NOUSERUNITTABLE           /* DEFINED TO DFSMSHSM.              */\n\n SETSYS                      /* UTILIZE 97% OF TAPE CARTRIDGE     */ -\n   TAPEUTILIZATION(                                                  -\n    UNITTYPE(3590-1) PERCENTFUL(97))\n\n SETSYS                      /* THE AMOUNT OF SPACE THAT MAY NOT  */ -\n   TAPESPANSIZE(100)         /* BE UTILIZED AT THE LOGICAL END OF */\n                             /* A TAPE CARTRIDGE.                 */\n\n SETSYS                      /* RETURN TAPES THAT NO LONGER       */ -\n   TAPEDELETION(             /* CONTAIN VALID DATA TO THE         */ -\n    BACKUP(SCRATCHTAPE)      /* GLOBAL SCRATCH POOL.              */ -\n    MIGRATION(SCRATCHTAPE) -\n    DUMP(SCRATCHTAPE))\n\n SETSYS                      /* WAIT TEN MINUTES BEFORE REISSUING */ -\n   MOUNTWAITTIME(10)         /* ADDITIONAL MESSAGES TO TAPE       */\n                             /* OPERATORS FOR TAPE MOUNTS.        */\n\n SETSYS                      /* DIREST DFSMSHSM TO INITIALLY      */ -\n   UNITNAME(3590-1)          /* SPECIFY A 3590-1 DEVICE FOR       */\n                             /* BACKUP OR DUMP SCRATCH TAPES.     */\n\n SETSYS                      /* TAPE OPERATOR MESSAGES            */ -\n   TAPEINPUTPROMPT(MIGRATIONTAPES(YES))\n\n SETSYS                      /* TAPE OPERATOR MESSAGES            */ -\n   TAPEINPUTPROMPT(BACKUPTAPES(YES))\n\n SETSYS                      /* TAPE OPERATOR MESSAGES            */ -\n   TAPEINPUTPROMPT(DUMPTAPES(YES))\n\n SETSYS                      /* TURN ON TAPE DUPLEXING FOR BACKUP */ -\n   DUPLEX(                   /* AND MIGRATION. DURING MIGRATION   */ -\n    BACKUP(Y)                /* DUPLEXING IF ERRORS ARE           */ -\n    MIGRATION(               /* ENCOUNTERED ON THE ALTERNATE TAPE */ -\n     Y ERRORALTERNATE(       /* THEN PROCESSING OF THE ORIGINAL   */ -\n      CONTINUE)))            /* WILL CONTINUE.                    */\n\n                             /* NUMBER OF ML2 PARTIALS LEFT AFTER */\n SETSYS                      /* RECYCLE                           */ -\n   ML2PARTIALSNOTASSOCIATEDGOAL(10)\n\n /*                                                               */\n /*****************************************************************/\n /*             DFSMSHSM CONTROL DATA SET BACKUP PARAMETERS       */\n /*****************************************************************/\n /*                                                               */\n\n SETSYS                      /* MAINTAIN FOUR BACKUP VERSIONS     */ -\n   CDSVERSIONBACKUP(         /* OF THE CONTROL DATA SETS. BACK    */ -\n      BACKUPCOPIES(4)        /* UP THE CONTROL DATA SETS TO       */ -\n      BACKUPDEVICECATEGORY(  /* 3590-1 DEVICES IN PARALLEL USING  */ -\n        TAPE(UNITNAME(3590-1) /* USING DSS AS THE DATAMOVER       */ -\n        PARALLEL))  -\n      DATAMOVER(DSS))\n\n /*                                                               */\n /*****************************************************************/\n /*                DFSMSHSM RACF SPECIFICATIONS                   */\n /*****************************************************************/\n /*                                                               */\n\n SETSYS                      /* DO NOT PUT RACF-INDICATION        */ -\n   NORACFIND                 /* ON BACKUP AND MIGRATION           */\n                             /* COPIES OF DATA SETS.              */\n\n SETSYS                      /* USE RACF TO PROVIDE TAPE          */ -\n   TAPESECURITY(RACF)        /* SECURITY.                         */\n\n SETSYS                      /* DO NOT ALLOW ERASE-ON-SCRATCH     */ -\n   NOERASEONSCRATCH          /* ON ANY DFSMSHSM BACKUP            */\n                             /* VERSIONS AND MIGRATION COPIES     */\n\n SETSYS                      /* BACKUP DISCRETE RACF PROFILES     */ -\n   PROFILEBACKUP\n\n /*                                                               */\n /*****************************************************************/\n /*                DFSMSHSM COMPACTION OPTIONS                    */\n /*****************************************************************/\n /*                                                               */\n\n SETSYS                      /* COMPACT DATA SETS THAT MIGRATE TO */ -\n   COMPACT(DASDMIGRATE)      /* DASD.                             */\n\n SETSYS                      /* DO NOT COMPACT DATA UNLESS A      */ -\n     COMPACTPERCENT(20)      /* SAVINGS OF 20% OR MORE CAN BE     */\n                             /* GAINED.                           */\n\n SETSYS -\n   OBJECTNAMES(OBJ,OBJECT,LOAD,LOADLIB,LOADMODS,LINKLIB) -\n   SOURCENAMES(ASM,COBOL,FORT,PLI,SOURCE,SRC,SRCLIB,SRCE,CNTL,JCL)\n\n /*                                                               */\n /*****************************************************************/\n /*              DFSMSHSM MIGRATION PARAMETERS                    */\n /*****************************************************************/\n /*                                                               */\n\n SETSYS                      /* DO NOT ALLOW DFSMSHSM TO MIGRATE  */ -\n   TAPEMIGRATION(NONE)       /* DATA SETS TO LEVEL 2 TAPE VOLUMES.*/\n\n SETSYS                      /* SPECIFY PROCESSING WINDOW FOR     */ -\n   PRIMARYSPMGMTSTART        /* PRIMARY SPACE MANAGEMENT (LEVEL 0 */ -\n   (0000 0000)               /* TO LEVEL 1 MIGRATION              */\n\n DEFINE                      /* RUN PRIMARY SPACE MGMT EVERY      */ -\n   PRIMARYSPMGMTCYCLE        /* DAY, STARTING MARCH 02, 1998      */ -\n   (YYYYYYY -\n   CYCLESTARTDATE(1998/03/02))\n\n SETSYS                      /* A DATA SET THAT HAS NOT BEEN      */ -\n   DAYS(10)                  /* REFERRED TO (OPENED) FOR 10 DAYS  */\n                             /* IS ELIGIBLE FOR MIGRATION         */\n\n SETSYS                      /* SPECIFY A HIGH-LEVEL QUALIFIER    */ -\n   MIGRATEPREFIX(MVSHSM)     /* WITH WHICH DFSMSHSM RENAMES       */\n                             /* MIGRATED DATA SETS.               */\n\n SETSYS                      /* PERFORM MIGRATION THROUGHOUT      */ -\n   INTERVALMIGRATION         /* THE DAY.                          */\n\n SETSYS                       /* SPECIFY PROCESSING WINDOW FOR    */ -\n   SECONDARYSPMGMTSTART(0000) /* SECONDARY SPACE MANAGEMENT       */\n                              /* (LEVEL 1 TO LEVEL 2 MIGRATION)   */\n\n DEFINE                      /* RUN SECONDARY SPACE MANAGEMENT    */ -\n   SECONDARYSPMGMTCYCLE      /* EVERY DAY,                        */ -\n   (YYYYYYY                  /* STARTING MARCH 02, 1998.          */ -\n   CYCLESTARTDATE(1998/03/02))\n\n SETSYS                      /* KEEP MCDS RECORDS FOR RECALLED    */ -\n   MIGRATIONCLEANUPDAYS(10 30 3)  /* DATA SETS FOR 10 DAYS. KEEP  */\n                             /* VOLUME OR DAILY STATISTICS RECORDS*/\n                             /* FOR 30 DAYS. KEEP RECORDS TO      */\n                             /* RECONNECTABLE DATA SETS 3 DAYS    */\n                             /* BEYOND EARLIEST ELIGIBILITY.      */\n\n SETSYS                      /* MIGRATE DATA SETS FROM LEVEL 1    */ -\n /* MVSHSM change */\n   MIGRATIONLEVEL1DAYS(1)    /* VOLUMES TO LEVEL 2 VOLUMES IF THE */\n /* MVSHSM change */\n                             /* DATA SETS HAVE NOT BEEN REFERRED  */\n                             /* TO FOR 45 DAYS.                   */\n\n SETSYS                      /* DATA SET EXTENT REDUCTION         */ -\n   MAXEXTENTS(10)            /* OCCURS WHEN EXTENTS REACH 10.     */\n\n SETSYS                      /* LIMIT THE NUMBER OF CONCURRENT    */ -\n   MAXRECALLTASKS(8)         /* DFSMSHSM RECALL TASKS TO EIGHT.   */\n\n\n SETSYS                      /* DIRECT DFSMSHSM TO RECALL DATA    */ -\n   RECALL(PRIVATEVOLUME(LIKE))/* SETS TO ONLINE VOLUMES WITH THE  */\n                             /* USE ATTRIBUTE OF PUBLIC, STORAGE, */\n                             /* OR PRIVATE AND WITH LIKE          */\n                             /* CHARACTERISTICS.                  */\n\n SETSYS                      /* RETAIN LIST DATA SETS FOR 7 DAYS. */ -\n   SCRATCHFREQUENCY(7)       /* DO NOT SCRATCH EXPIRED DATA SETS. */ -\n   EXPIREDDATASETS(NOSCRATCH)\n\n SETSYS                      /* DO NOT MIGRATE SMALL DATA SETS AS */ -\n   NOSMALLDATASETPACKING     /* RECORDS TO SMALL DATA SET PACKING */\n                             /* (SDSP) DATA SETS.                 */\n\n SETSYS                      /* LIMIT THE NUMBER OF CONCURRENT    */ -\n   MAXMIGRATIONTASKS(3)      /* AUTOMATIC VOLUME MIGRATION TASKS  */\n                             /* TO THREE.                         */\n\n SETSYS                      /* LIMIT THE NUMBER OF CONCURRENT    */ -\n   MAXSSMTASKS               /* AUTOMATIC SECONDARY SPACE         */ -\n     (CLEANUP(2)             /* MANAGEMENT CLEANUP TASKS TO TWO   */ -\n      TAPEMOVEMENT(1))       /* AND TAPEMOVEMENT TASKS TO ONE     */\n\n /*                                                               */\n /*****************************************************************/\n /*                DFSMSHSM BACKUP PARAMETERS                     */\n /*****************************************************************/\n /*                                                               */\n\n ONLYIF                      /* THE FOLLOWING DEFINE COMMAND WILL */ -\n   HSMHOST(C)                /* EXECUTE ONLY IF THE ACTIVE HOST ID*/ -\n                             /* MATCHES THE HOST SPECIFIED.       */\n                                                                     -\n DEFINE BACKUP(Y 1           /* DIRECT DFSMSHSM TO BACKUP ELIGIBLE*/ -\n   CYCLESTARTDATE(1998/03/02)) /* DATA SETS DAILY (A 1 DAY CYCLE) */\n                             /* TO A SINGLE BACKUP VOLUME,STARTING*/\n                             /* MARCH 02, 1998.                   */\n\n SETSYS DSBACKUP(DASDSELECTIONSIZE(3000 250)  DASD(TASKS(2))         -\n   TAPE(TASKS(2) DEMOUNTDELAY(MINUTES(60)  MAXIDLETASKS(0))))\n                             /* BALANCE THE WORKLOAD BETWEEN TAPE */\n                             /* AND DASD FOR WAIT TYPE BACKDS     */\n                             /* COMMANDS. LIMIT THE NUMBER OF DATA*/\n                             /* SET BACKUP TAPE AND DASD TASKS.   */\n                             /* LIMIT THE NUMBER AND LENGTH OF    */\n                             /* TIME A TAPE TASK CAN REMAIN IDLE  */\n                             /* BEFORE BEING DEMOUNTED.           */\n\n SETSYS                      /* ACTIVATE THE BACKUP AND DUMP      */ -\n   BACKUP                    /* FUNCTION OF DFSMSHSM              */\n\n ONLYIF                      /* THE FOLLOWING SETSYS COMMAND WILL */ -\n   HSMHOST(C)                /* EXECUTE ONLY IF THE ACTIVE HOST ID*/ -\n                             /* MATCHES THE HOST SPECIFIED.       */ -\n\n SETSYS -\n   AUTOBACKUPSTART(0000 0000 0000)\n                             /* SPECIFY THE TIME FOR AUTOMATIC    */\n                             /* BACKUP TO BEGIN, THE LATEST START */\n                             /* TIME THAT AUTOMATIC BACKUP CAN    */\n                             /* BEGIN, AND THE QUIESCE TIME FOR   */\n                             /* AUTOMATIC BACKUP. NO AUTOMATIC    */\n                             /* BACKUP OCCURS UNTIL THESE TIMES   */\n                             /* ARE SPECIFIED.                    */\n\n SETSYS                      /* SPECIFY A HIGH-LEVEL QUALIFIER    */ -\n   BACKUPPREFIX(MVSHSM)      /* WITH WHICH DFSMSHSM RENAMES BACKED*/\n                             /* UP DATA SETS                      */\n\n SETSYS                      /* KEEP ONE VERSION OF EACH BACKED UP*/ -\n   VERSIONS(1)               /* DATA SET.                         */ -\n   FREQUENCY(0)\n\n SETSYS                      /* LIMIT THE NUMBER OF CONCURRENT    */ -\n   MAXBACKUPTASKS(3)         /* BACKUP TASKS TO THREE, BACK UP ALL*/ -\n   NOSKIPABPRIMARY           /* DFSMSHSM-MANAGED VOLUMES THAT HAVE*/\n                             /* THE AUTO BACKUP ATTRIBUTE.        */\n\n SETSYS                      /* LIMIT THE NUMBER OF CONCURRENT    */ -\n   MAXDSRECOVERTASKS(3)      /* DFSMSHSM DATA SET RECOVER TASKS   */\n                             /* TO THREE                          */\n\n SETSYS                      /* DURING DAILY BACKUP, MOVE         */ -\n   SPILL                     /* DATA SETS FROM FULL DAILY         */\n                             /* DASD VOLUMES TO SPILL VOLUMES.    */\n\n SETSYS                      /* MAKE INITIAL BACKUP COPIES OF DATA*/ -\n   INCREMENTALBACKUP(ORIGINAL) /* SETS DESPITE THE SETTING OF THE */\n                             /* CHANGE BIT.                       */\n\n SETSYS                      /* DFSMShsm will process BACKDS      */ -\n   DSBACKUP(GENVSAMCOMPNAMES(YES)) /* NEWNAME, request DFSMSdss   */\n                           /* create default names (.data .index) */\n\n /*                                                               */\n /*****************************************************************/\n /*            DFSMSHSM FULL VOLUME DUMP PARAMETERS               */\n /*****************************************************************/\n /*                                                               */\n\n ONLYIF                      /* THE DEFINE COMMAND WILL EXECUTE IF*/ -\n   HSMHOST(C)                /* THE ACTIVE HOST ID = C            */\n DEFINE -\n   DUMPCYCLE(NNNNNNY         /* 7-DAY DUMP CYCLE WITH DUMP DONE   */ -\n    CYCLESTARTDATE(1998/03/02)) /* ONLY ON THE SEVENTH DAY,       */\n                             /* STARTING ON MONDAY MARCH 02, 1998,*/\n                             /* SO DUMPS OCCUR ON SUNDAY.         */\n\n DEFINE DUMPCLASS(SUNDAY DAY(7) -\n   RETPD(27) AUTOREUSE NORESET  -\n   DATASETRESTORE VTOCCOPIES(4))\n                             /* DEFINE A DUMP CLASS NAMED SUNDAY  */\n                             /* THAT IS AUTOMATICALLY DUMPED ON   */\n                             /* THE SEVENTH DAY OF THE CYCLE.     */\n                             /* EACH DUMP COPY IS HELD FOR 27 DAYS*/\n                             /* AND THE TAPE IS REUSED WHEN IT IS */\n                             /* SCRATCHED. DO NOT RESET DATA SET  */\n                             /* CHANGE BITS. ALLOW TSO USERS TO   */\n                             /* RESTORE DATA SETS FROM DUMP TAPE. */\n                             /* AT MOST, KEEP FOUR VTOC COPY DUMP */\n                             /* DATA SETS FOR EACH VOLUME.        */\n\n DEFINE DUMPCLASS(QUARTERS   /* DEFINE A DUMP CLASS NAMED QUARTERS*/ -\n   FREQUENCY(90) RETPD(356)  /* THAT IS AUTOMATICALLY DUMPED EVERY*/ -\n   NOAUTOREUSE               /* THREE MONTHS AND IS HELD FOR ONE  */ -\n   NODATASETRESTORE NORESET  /* WEEK LESS THEN A YEAR. USE IS FOR */ -\n   DISPOSITION('OFF-SITE')   /* ONLY FULL RESTORES. HOLD THE TAPE */ -\n   VTOCCOPIES(0))            /* OFF-SITE AND KEEP NO VTOC COPIES  */\n                             /* FOR THIS CLASS.                   */\n\n SETSYS -\n   AUTODUMPSTART(0000 0000 0000)\n                             /* SPECIFY THE TIME FOR AUTOMATIC    */\n                             /* DUMP TO BEGIN, THE LATEST START   */\n                             /* THAT AUTOMATIC DUMP CAN BEGIN,    */\n                             /* AND THE QUIESCE TIME FOR AUTOMATIC*/\n                             /* DUMP. NO AUTOMATIC DUMP OCCURS    */\n                             /* UNTIL THESE TIMES ARE SPECIFIED.  */\n\n SETSYS                      /* BUFFER FIVE TRACKS WHEN PERFORMING*/ -\n   DUMPIO(3,2)               /* A DUMP. BUFFER TWO TRACKS DURING  */\n                             /* DATA MOVEMENT.                    */\n\n SETSYS                      /* LIMIT THE NUMBER OF CONCURRENT    */ -\n   MAXDUMPTASKS(3)           /* DUMP TASK TO THREE.               */\n\n/*                                                                */\n/******************************************************************/\n/*      DFSMSHSM AGGREGATE BACKUP AND RECOVER PARAMETERS          */\n /* THE FOLLOWING ABARS PARAMETERS ARE IGNORED IF HOSTMODE=AUX    */\n /* HAS BEEN SPECIFIED AND WILL GENERATE AN ARC0103I MESSAGE IF   */\n /* ISSUED.                                                       */\n /*****************************************************************/\n/*                                                                */\n\nSETSYS                       /* RECOVER DATA SET AGGREGATES TO    */ -\n  ARECOVERUNITNAME(3590-1)   /* 3590-1 TAPE DEVICES.              */\n\nSETSYS                       /* START ONLY ONE SECONDARY ADDRESS  */ -\n  MAXABARSADDRESSSPACE(1)    /* SPACE FOR BACKING UP AND          */\n                             /* RECOVERING AGGREGATED DATA SETS   */\n\nSETSYS                       /* START THE SECONDARY ADDRESS       */ -\n  ABARSPROCNAME(DFHSMABR)    /* SPACE WITH THE STARTUP PROCEDURE  */\n                             /* NAMED DFHSMABR.                   */\n\nSETSYS                       /* WRITE THE ABARS ACTIVITY LOG TO   */ -\n  ABARSACTLOGTYPE(DASD)      /* DASD                              */\n\nSETSYS                       /* LOG ALL ABARS MESSAGES            */ -\n  ABARSACTLOGMSGLVL(FULL)\n\nSETSYS                       /* RECOVER ML2 DATA SETS TO TAPE.    */ -\n  ARECOVERML2UNIT(3590-1)\n\nSETSYS                       /* USE 90% OF THE AVAILABLE TAPE FOR */ -\n  ARECOVERPERCENTUTILIZED(090) /* ARECOVERY TAPES.                */\n\nSETSYS                       /* BACKUP AGGREGATES TO 3590-1       */ -\n  ABARSUNITNAME(3590-1)      /* DEVICES.\n\nSETSYS                       /* BACKUP ABARS DATA SETS WITH TWO   */ -\n  ABARSBUFFERS(2)            /* DATA MOVEMENT BUFFERS.            */\n\nSETSYS                       /* SPECIFY ABARS TO STACK THE        */ -\n  ABARSTAPES(STACK)          /* ABACKUP OUTPUT ONTO A MINIMUM     */\n                             /* NUMBER OF TAPE VOLUMES            */\n\nSETSYS                       /* ABARS ACTIVITY LOG WILL NOT BE    */ -\n  ABARSDELETEACTIVITY(N)     /* AUTOMATICALLY DELETED DURING      */\n                             /* ABARS PROCESSING                  */\n\nSETSYS                       /* SET PERFORMANCE OF BACKING UP     */ -\n  ABARSOPTIMIZE(3)           /* LEVEL 0 DASD DATASETS             */\n\nSETSYS                       /* TARGET DATASET IS TO BE ASSIGNED  */ -\n  ARECOVERTGTGDS(SOURCE)     /* SOURCE STATUS                     */\n\nSETSYS                       /* ALLOWS RECOVERY OF A LEVEL 0      */ -\n  ABARSVOLCOUNT(ANY)         /* DASD DATA SET UP TO 59 VOLUMES    */\n /*                                                               */\n /*****************************************************************/\n /*            DFSMSHSM HSMPLEX/SYSPLEX PARAMETERS                */\n /*****************************************************************/\n /*                                                               */\n\nSETSYS                       /* SPECIFY THE SUFFIX FOR THE        */ -\n  PLEXNAME(PLEX0)            /* HSMPLEX IN A MULTI-HSMPLEX        */\n                             /* ENVIRONMENT   ARC(SUFFIX)         */\n\nSETSYS                       /* SPECIFY HOST NOT TO TAKE OVER     */ -\n  PROMOTE(PRIMARYHOST(NO)    /* PRIMARY OR SSM RESPONSIBILITIES   */ -\n  SSM(NO))\n\n /*                                                               */\n /*****************************************************************/\n /* SEE MEMBER ARCCMD90 IN esa.prj.cbthsm.cntl FOR AN EXAMPLE OF  */\n /* ADDVOL COMMAND TO BE USED IN CONJUNCTION WITH THIS COMMAND    */\n /* STREAM.                                                       */\n /*****************************************************************/\n$A\n//HSMPROC  EXEC PGM=IEBUPDTE,PARM=NEW\n//SYSPRINT DD SYSOUT=*\n//SYSUT2   DD DSN=SYS9.PARMLIB,DISP=SHR\n//SYSIN    DD DATA,DLM='$A'\n./ ADD NAME=ARCSTR00\n /*****************************************************************/\n /*              DFSMSHSM ADDITIONAL STARTUP COMMAND MEMBER       */\n /*****************************************************************/\n$A\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT883/CBT.V500.FILE883.PDS/CNTL.xmi", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT883/CBT.V500.FILE883.PDS", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}