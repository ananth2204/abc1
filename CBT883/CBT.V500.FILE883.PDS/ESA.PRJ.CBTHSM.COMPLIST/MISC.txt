
15694A01 V1.12 z/OS XL C++                 //'ESA.PRJ.CBTHSM.CPP(MISC)'                      20.12.12 18:51:45
0                                      * * * * *   P R O L O G   * * * * *
    Compiler options. . . . . . . :AGGRCOPY(NOOVERLAP)             ANSIALIAS       ARCH(7)         ARGPARSE        NOASCII
                                  :NOATTRIBUTE     ASSERT(RESTRICT)                BITFIELD(UNSIGNED)              CHARS(UNSIGNED)
                                  :NOCOMPACT       NOCOMPRESS      CVFT            NODFP           DIGRAPH         DLL(CALLBACKANY)
                                  :ENUMSIZE(SMALL) NOEVENTS        EXECOPS         EXH             NOEXPMAC        NOEXPORTALL
                                  :NOFASTTEMPINC   FLAG(I)         NOGOFF          GONUMBER        HALT(16)
                                  :NOHGPR(NOPRESERVE)              NOHOT           NOIGNERRNO      ILP32           NOINITAUTO
                                  :NOINLRPT        NOLIBANSI       NOLIST          LONGNAME        NOMAKEDEP       NOMARGINS
                                  :MAXMEM(2097152) MEMORY          NAMEMANGLING(zOSV1R2)           NESTINC(255)    OBJECT
                                  :OBJECTMODEL(COMPAT)             NOOE            NOOFFSET        OPTIMIZE(2)     PLIST(HOST)
                                  :NOPORT          NOPPONLY        PREFETCH        REDIR           NOREPORT        ROSTRING
                                  :ROCONST         RTTI(ALL)       NOSEQUENCE      NOSHOWINC       NOSHOWMACROS    SOURCE
                                  :SKIPSRC(SHOW)   SPILL(3600)     START           NOSTATICINLINE  STRICT
                                  :NOSTRICT_INDUCTION              TARGET(LE,CURRENT)              NOTEMPLATEREGISTRY
                                  :TEMPLATERECOMPILE               TERMINAL        TEST(HOOK)      TMPLPARSE(NO)   TUNE(7)
                                  :UNROLL(AUTO)    UTF             NOWARN0X        NOWARN64        NOWSIZEOF       NOXREF
                                  :NOCICS
                                  :NOCONVLIT
                                  :NOCSECT
                                  :DEBUG(FORMAT(ISD),LEVEL(0),HOOK(NOLINE,NOBLOCK,NOPATH,CALL,FUNC),NOSYMBOL)
                                  :DEFINE(__OS390__=1,_POSIX_SOURCE=1,_XOPEN_SOURCE_EXTENDED=1,MU_STANDALONE=1,ISIS_PF_MU=1)
                                  :FLOAT(HEX,FOLD,AFP(NOVOLATILE)) ROUND(Z)
                                  :NOHALTONMSG
                                  :INFO(LAN)
                                  :INLINE(AUTO,NOREPORT,100,1000)
                                  :NOIPA
                                  :KEYWORD(bool,explicit,export,false,mutable,namespace,true,typename,using,restrict,__restrict__,
                                   __restrict,_Pragma,__alignof__,__asm__,__attribute__,__const__,__extension__,__volatile__,
                                   __inline__,__signed__,__typeof__)
                                  :NOKEYWORD(char16_t,char32_t,static_assert,typeof)
                                  :LANGLVL(ANONSTRUCT,ANONUNION,ANSIFOR,ANSISINIT,NOAUTOTYPEDEDUCTION,C99VLA,C99__FUNC__,
                                   NOC99LONGLONG,NOC99PREPROCESSOR,NODBCS,NODECLTYPE,NODELEGATINGCTORS,DEPENDENTBASELOOKUP,
                                   NODOLLARINNAMES,EMPTYSTRUCT,NOEXTENDEDFRIEND,NOEXTENDEDINTEGERSAFE,EXTERNTEMPLATE,ILLPTOM,
                                   IMPLICITINT,NOINLINENAMESPACE,LIBEXT,LONGLONG,NONEWEXCP,OFFSETNONPOD,NOOLDDIGRAPH,OLDFRIEND,
                                   NOOLDMATH,NOOLDSTR,OLDTEMPACC,NOOLDTMPLALIGN,OLDTMPLSPEC,NOSTATIC_ASSERT,TRAILENUM,TYPEDEFCLASS,
                                   NOUCS,VARARGMACROS,NOVARIADICTEMPLATES,GNU_INCLUDE_NEXT,ZEROEXTARRAY)
                                  :LOCALE(DE_DE.IBM-273)
                                  :NOLSEARCH
                                  :OPTFILE(DD:OPTFILE)
                                  :NORTCHECK
                                  :SEARCH(//'CEE.SCEEH.+', //'CBC.SCLBH.+', CEE.SCEEH.+, CBC.SCLBH.+, DD:USERLIB)
                                  :NOSERVICE
                                  :NOSQL
                                  :NOSUPPRESS
                                  :TEMPINC(./tempinc)
                                  :NOXPLINK(NOBACKCHAIN,NOCALLBACK,GUARD,OSCALL(UPSTACK),NOSTOREARGS)
    Version Macros. . . . . . . . : __COMPILER_VER__=0x410C0000
                                  : __LIBREL__=0x410C0000
                                  : __TARGET_LIB__=0x410C0000
    Source margins. . . . . . . . :
      Varying length. . . . . . . : 1 - 32760
      Fixed length. . . . . . . . : 1 - 32760
    Sequence columns. . . . . . . :
      Varying length. . . . . . . : none
      Fixed length. . . . . . . . : none
    Locale name . . . . . . . . . : DE_DE.IBM-273
    Code set. . . . . . . . . . . : IBM-273
    Listing name. . . . . . . . . : DD:SYSCPRT
0                                 * * * * *   E N D   O F   P R O L O G   * * * * *
-
15694A01 V1.12 z/OS XL C++                 //'ESA.PRJ.CBTHSM.CPP(MISC)'                      20.12.12 18:51:45
-
                                       * * * * *   S O U R C E   * * * * *
0            1 | /*******************************************************************************
             2 | * Copyright ISIS Papyrus Technologies Limited
             3 | *-------------------------------------------------------------------------------
             4 | * File:              $Source: /data/cvs/src/mvs/misc.cpp,v $
             5 | *-------------------------------------------------------------------------------
             6 | * Description:
             7 | *   ???
             8 | *******************************************************************************/
             9 |
            10 | #include "isisdef.h"
            11 | #include <stdlib.h>
            12 | #include <string.h>
            13 | #include <strings.h>
            14 |
            15 | //#include "pcsdll.hpp"
            16 | #ifdef    OWN_STDIO
            17 | #include "stdio.hpp"
            18 | #else
            19 | #include <stdio.h>
            20 | #endif
            21 |
            22 | #include <stdlib.h>
            23 | #include <time.h>
            24 | #include <math.h>
            25 | #include "mvsbase.hpp"
            26 | #if defined(MU_STANDALONE) == 0
            27 | #include "ebcdicut.hpp"
            28 | #else
            29 | #include "mvsebcdi.hpp"
            30 | #endif
            31 | #include "misc.hpp"
            32 | #include "mvsbase.hpp"
            33 | #ifdef CALL_PROJECT
            34 | #include "project.hpp"
            35 | #endif
            36 |
            37 | //#if defined(ISIS_PF_MI) == 1 && defined(ISIS_DEBUG) == 1 //szm20050316 debug flag, off from stdio
            38 | #if (defined(ISIS_PF_MI) == 1 ]] defined(ISIS_PF_MU) == 1) && defined(ISIS_DEBUG) == 1 //szm20050316
            38 |  debug flag, off from stdio
            39 | int _isis_pf_mi_debug = 1;
            40 | #endif
            41 | #if defined(ISIS_PF_HOST) ]] defined (ISIS_PF_MU)
            42 |   #if defined(OWN_STDIO) == 0
            43 |       #include <assert.h>
            44 |   #endif
            45 |   #include <ctype.h>
            46 |   #include <regex.h>
            47 |   #include <locale.h>
            48 |   #include <sys/time.h> //ZA040225
            49 |   #include "casmif.hpp" //ENQ DEQ
            50 |   #include <unistd.h>
            51 | #endif
            52 |
            53 | #ifndef MU_STANDALONE
            54 | #include "systems.hpp" //KV20040915 for stricmp
            55 | #else
            56 | #include <strings.h>
            57 | #ifndef stricmp
            58 |     #define stricmp strcmpi
            59 | #endif
            60 | #ifndef strcmpi
            61 | #define strcmpi strcasecmp
            62 | #endif
            63 | #define MVSBatch() 1
            64 | #endif
            65 |
            66 | #define UKEY_MAJOR "STRTUKEY"
            67 | #define UKEY_MINOR "ISIS_UKEY"
            68 | static unsigned char tUKÄÜ =
            69 |      "ABCDEFGHIJKLMNOPQRSTUVWXYZ"Ö
            70 |          "0123456789#$"Ö
            71 |          "abcdefghijklmnopqrstuvwxyz";
            72 |
            73 |
            74 | void formatTime(char * to,int l,char * format)
            75 | ä
            76 |    time_t t;
            77 |    struct tm * tmp;
            78 |    time(&t);
            79 |    tmp = localtime(&t);
            80 |    strftime(to,l-1,format,tmp);
            81 | ü
            82 |
            83 | char *strrev(char *s)  //szm 20020927
            84 | ä
            85 |     if (s==NULL]]strlen(s)==0) return s;
            86 |     char c;
            87 |     int i , j;
            88 |     for(i =0, j =strlen(s)-1; i<j;i++,j--)
            89 |     ä
            90 |       c    =  sÄiÜ;
            91 |       sÄiÜ =  sÄjÜ;
            92 |       sÄjÜ = c;
            93 |     ü
            94 |     return(s);
            95 | ü
            96 |
            97 |
            98 | unsigned long cvb(unsigned long f , unsigned long length)
            99 |  ä
           100 |   unsigned long r = 0;
           101 |     unsigned long m = 1;
           102 |     for(int i = 0;f && i<length;i++)
           103 |     ä
           104 |      r += (f&0x0000000fL)*m;
           105 |        m *= 10;
           106 |        f = f>>4;
           107 |     ü
           108 |     return r;
           109 | ü
           110 |
           111 |
           112 | unsigned long cvd(unsigned long f)
           113 | ä
           114 |  unsigned long r = 0;
           115 |    for ( int i = 0;f && i<8;i++)
           116 |    ä
           117 |     r ]= ((f%10)<<(i*4));
           118 |       f = f/10;
           119 |    ü
           120 |    return r;
           121 | ü
           122 |
           123 |
           124 | //KV20050725 dump functions moved to isislib/isismisc.cpp
           125 | //SZM20050810 If it is CICSAPPL , there is no isismisc
           126 | //SZM20090629 If standalone  , there is no isismisc
           127 | //#if defined(ISIS_PF_MU) == 0 ]] defined(MU_STANDALONE) == 0
           128 | #if defined(CICSAPPL)   ]] defined(MU_STANDALONE)
           129 | int dump(FILE * dumpf,char * id,void * from,int l)
           130 | ä
           131 |     return (dump(dumpf,id,(char *)from,l));
           132 | ü
           133 | int dump(FILE *f,char * id,char * p,int l)
           134 | ä
           135 |     int i , o;
           136 |     fprintf(f,"%sÖnÖn",id);
           137 |
           138 |     for(o = 0;o <((l/16)+1)*16;o+=16)
           139 |     ä
           140 |         fprintf(f,"%4.4lx:",o);
           141 |         for(i = o;i<o+16;i++)
           142 |         ä
           143 |             if ( i < l )
           144 |             ä
           145 |                 fprintf(f,"%2.2x",pÄiÜ& 0xFF );
           146 |                 if (i%4 == 3) fprintf(f," ");
           147 |
           148 |             ü
           149 |
           150 |             else
           151 |             ä
           152 |                 if ( i%4 == 3) fprintf(f," ");
           153 |                 fprintf(f," ");
           154 |             ü
           155 |         ü
           156 |         fprintf(f," ");
           157 |
           158 |         for(i = o;i<o+16;i++)
           159 |         ä
           160 |             if ( i < l )
           161 |                 fprintf(f,"%c",i_isprint(pÄiÜ)? pÄiÜ:'.');
           162 |             else fprintf(f," ");
           163 |         ü
           164 |         fprintf(f," ");
           165 |
           166 |         // print ebcdic -> ascii  converted chars on ascii platforms,
           167 |         //        ascii -> ebcdic converted chars on ebcdic platforms
           168 |         for(i = o;i<o+16;i++)
           169 |         ä
           170 |             if ( i < l )
           171 |             ä
           172 | #if ' ' == 0x20
           173 |                 char c=etoa(pÄiÜ);
           174 | #else
           175 |                 char c=atoe(pÄiÜ);
           176 | #endif
           177 |                 fprintf(f,"%c",i_isprint(c) ? c : '.');
           178 |             ü
           179 |         ü
           180 |         fprintf(f,"Ön");
           181 |     ü
           182 |     return l;
           183 | ü
           184 |
           185 | int dump(char *f,int o,char * p,int l)
           186 | ä
           187 |     int i;
           188 |
           189 |     sprintf(f,"%4.4lx:",o);
           190 |     f+=strlen(f);
           191 |     for(i = o;i<o+16;i++)
           192 |     ä
           193 |         if ( i < l )
           194 |         ä
           195 |             sprintf(f,"%2.2x",pÄiÜ& 0xFF );
           196 |             f+=strlen(f);
           197 |             if (i%4 == 3)
           198 |             ä
           199 |                 sprintf(f," ");f+=strlen(f);
           200 |             ü
           201 |
           202 |         ü
           203 |
           204 |         else
           205 |         ä
           206 |             if ( i%4 == 3)
           207 |             ä
           208 |                 sprintf(f," "); f+=strlen(f);
           209 |             ü
           210 |             sprintf(f," ");f+=strlen(f);
           211 |         ü
           212 |     ü
           213 |     sprintf(f," ");
           214 |     f+=strlen(f);
           215 |     for(i = o;i<o+16;i++)
           216 |     ä
           217 |         if ( i < l )
           218 |             sprintf(f,"%c",i_isprint(pÄiÜ)? pÄiÜ:'.');
           219 |         else sprintf(f," ");
           220 |         f+=strlen(f);
           221 |     ü
           222 |     sprintf(f," ");
           223 |     f+=strlen(f);
           224 |
           225 |     // print ebcdic -> ascii  converted chars on ascii platforms,
           226 |     //        ascii -> ebcdic converted chars on ebcdic platforms
           227 |     for(i = o;i<o+16;i++)
           228 |     ä
           229 |         if ( i < l ) ä
           230 | #if ' ' == 0x20
           231 |             char c=etoa(pÄiÜ);
           232 | #else
           233 |             char c=atoe(pÄiÜ);
           234 | #endif
           235 |             sprintf(f,"%c",i_isprint(c) ? c : '.');
           236 |             f+=strlen(f);
           237 |         ü
           238 |     ü
           239 |     sprintf(f,"Ön");
           240 |
           241 |     return l;
           242 | ü
           243 |
           244 |
           245 | long toInt(unsigned char  * p, int l)
           246 | ä
           247 |     char  tÄ4Ü;
           248 |     memset(t,'Ö00',4);
           249 |     if ( l > 4) l =l%4;
           250 |     int i;
           251 | #if defined(ISIS_PF_HOST) ]] defined(ISIS_PF_MU)
           252 |     for(i=3;l;l--,i--) tÄiÜ = pÄl-1Ü;
           253 |     return int(*(int *)t);
           254 | #else
           255 |     int ll = l;
           256 |     for(i=0;l;i++,l--) tÄiÜ = pÄl-1Ü;
           257 |     if( ll == 1) return int(*(UCHAR*)t) ;
           258 |     else if ( ll == 2) return short(*(short*)t);
           259 |     else  return long(*(long *)t);
           260 | #endif
           261 | ü
           262 |
           263 | long toInt(char  * p, int l)
           264 |   ä
           265 |   return(toInt((unsigned char *)p,l));
           266 |   ü
           267 |
           268 |
           269 | int fromInt(char  * to,long v,unsigned int  l)
           270 |   ä
           271 |   return fromInt(to,v,int(l));
           272 |   ü
           273 |
           274 | int fromInt(char  * to,long v,int l )
           275 | ä
           276 |
           277 |  //assert(l<=sizeof( long)); ?????
           278 | #if defined(ISIS_PF_HOST) ]] defined(ISIS_PF_MU)
           279 |     memcpy(to,((char * )&v)+(sizeof( int)-l),l);
           280 | #else
           281 |     char * t = (char *)&v;
           282 |     for(int i = l;i;i--)toÄi-1Ü = *(t++);
           283 | #endif
           284 |     return (l>=sizeof(long));
           285 | ü
           286 |
           287 | int Char2Hex(char * c)
           288 | ä
           289 |    int v = 0;
           290 |    for(int i = 2;i; i--)
           291 |    ä    v<<=4;
           292 |       if ( *c >= '0' && *c <= '9' ) v += *c-'0';
           293 |       else if ( *c >= 'A' && *c <= 'F' ) v += *c-'A'+10;
           294 |       else if ( *c >= 'a' && *c <= 'f' ) v += *c-'a'+10;
           295 |       c++;
           296 |    ü
           297 |    return v;
           298 | ü
           299 |
           300 | char * Hex2Char(char c)
           301 | ä
           302 |    static char rÄ3Ü;
           303 |    memset(r,null,sizeof(r));
           304 |    int v = (c&0xf0)>>4;
           305 |    if ( v >= 0 && v <= 9 ) rÄ0Ü = char('0'+v);
           306 |    else rÄ0Ü = char('A'+v-10);
           307 |    v = (c&0x0f);
           308 |    if ( v >= 0 && v <= 9 ) rÄ1Ü = char('0'+v);
           309 |    else rÄ1Ü = char('A'+v-10);   return r;
           310 | ü
           311 |
           312 | int isnull(char * s,int l)
           313 | ä
           314 |  if ( l == 0 ) l = int(strlen(s));
           315 |  for(l;l>0;l--)if ( sÄl-1Ü  ) return 0;
           316 |  return 1;
           317 | ü
           318 |
           319 | int roundToInt(double f)
           320 | ä
           321 |    double w;
           322 |    if ( modf(f,&w) >= 0.5 ) return (int(f)+1);
           323 |    else return int(f);
           324 | ü
           325 |
           326 |
           327 | static char tsÄ30Ü;
           328 | char  * getTimeStemp()
           329 | ä
           330 |
           331 |   formatTime(ts,sizeof(ts),"%Y:%m:%d %H:%M:%S");
           332 |   return ts;
           333 | ü
           334 |
           335 | static char *daysÄ7Ü  =ä "Mon", "Tue", "Wen", "Thu", "Fri", "Sat", "Sun"ü;
           336 | static char *ldaysÄ7Ü =ä "Monday",
           337 |              "Tuesday",
           338 |              "Wednesday",
           339 |              "Thursday",
           340 |              "Friday",
           341 |              "Saturday",
           342 |              "Sunday" ü;
           343 | static char *monthÄ12Ü = ä "Jan", "Feb", "Mar",
           344 |              "Apr", "May", "Jun",
           345 |              "Jul", "Aug", "Sep",
           346 |              "Oct", "Nov", "Dec"ü;
           347 |
           348 | int DatetoTm(tm & t, char * st)
           349 | ä
           350 |   char * term = ",:- ";
           351 |   char * c;
           352 |   char * day = strtok(st,term);
           353 |
           354 |   int i = 0;
           355 |   for(i = 7;i;i--)if ( stricmp(daysÄi-1Ü,day) == 0 ) break;
           356 |   if ( i == 0 )
           357 |    for(i = 7;i;i--)if (strcmp(ldaysÄi-1Ü,day) == 0 ) break;
           358 |
           359 |   t.tm_wday = i-1;
           360 |
           361 |   c = strtok(0,term);
           362 |   if ( isdigit(*c) )
           363 |   ä
           364 |     t.tm_mday = atoi(c);
           365 |     c = strtok(0,term);
           366 |     for( i = 12;i;i--) if ( stricmp(monthÄi-1Ü,c) == 0 ) break ;
           367 |     t.tm_mon = i;
           368 |     i = atoi(strtok(0,term));
           369 |     t.tm_year = i>1900? i-1900 : i;
           370 |     t.tm_hour = atoi(strtok(0,term));
           371 |     t.tm_min = atoi(strtok(0,term));
           372 |     t.tm_sec = atoi(strtok(0,term));
           373 |     t.tm_yday = 0;
           374 |    ü
           375 |    else
           376 |    ä
           377 |     for( i = 12;i;i--) if ( stricmp(monthÄi-1Ü,c) == 0 ) break ;
           378 |     t.tm_mon = i;
           379 |     t.tm_mday = atoi(strtok(0,term));
           380 |     t.tm_hour = atoi(strtok(0,term));
           381 |     t.tm_min = atoi(strtok(0,term));
           382 |     t.tm_sec = atoi(strtok(0,term));
           383 |     t.tm_year = atoi(strtok(0,term));    t.tm_yday = 0;
           384 |   ü
           385 |   return 0;
           386 | ü
           387 |
           388 | char * DatetoString()
           389 | ä
           390 |   static char dmvsSTRINGÄ64Ü;
           391 |   time_t now;
           392 |   time(&now);
           393 |   strcpy(dmvsSTRING,asctime(gmtime(&now)));
           394 |   strcpy(dmvsSTRING+strlen(dmvsSTRING)-1," GMT");
           395 |   return dmvsSTRING;
           396 | ü
           397 |
           398 | char * DatetoString(tm t,char * st)
           399 | ä
           400 |   strcpy(st,asctime(&t));
           401 |   strcpy(st+strlen(st)-1," GMT");
           402 |   return st;ü
           403 | #endif
           404 | //#endif //ifndef ISIS_PF_MU
           405 |
           406 |  static char dateInIBMÄ13Ü;
           407 |
           408 |  void formatIBMTime(char * to,int l,char * format)
           409 | ä
           410 |    time_t t;
           411 |    struct tm * tmp;
           412 |    time(&t);
           413 |    tmp = localtime(&t);
           414 |    strftime(to,l-1,format,tmp);
           415 | ü
           416 |
           417 |  char * DatetoIBM(char * from)
           418 |  ä
           419 |    memset(dateInIBM,0,sizeof(dateInIBM));
           420 |    char todayÄ12Ü;
           421 |    if ( from == NULL)
           422 |    ä
           423 |       from = today;
           424 |       formatIBMTime(today,sizeof(today),"%d.%m.%Y");
           425 |    ü
           426 |    int mvÄ12Ü = ä 31,28,31,30,31,30,31,31,30,31,30,31ü;
           427 |    mvsSTRING d, m, y;
           428 |    mvsSTRING date(from);
           429 |    date.parse(d,".",m,".",y);
           430 |    int id = atoi(d);
           431 |    int im = atoi(m);
           432 |    int iy = atoi(y);
           433 |    if ( id > 31 ]] im < 1 ]] im > 12 )
           434 |      return (char *)NULL;
           435 |
           436 |    int leapyear ;
           437 |    if ((iy%4) ]] ((iy%100) == 0  && (iy%400))) leapyear = 0 ;
           438 |      else leapyear = 1;
           439 |    int dd = 0;
           440 |    for(int i = 0;i < (im-1);i++)dd += mvÄiÜ;
           441 |    if ( leapyear && im > 2) dd++;
           442 |    dd +=id;
           443 |    if (iy < 100) iy += 2000;
           444 |    sprintf(dateInIBM,"%d     ",iy*1000+dd);
           445 |    return (dateInIBM);
           446 |  ü
           447 |
           448 | void getUniqueKEY(char * t)
           449 | ä
           450 |
           451 |
           452 |   char _dummy=0, stckÄ9Ü;
           453 |
           454 |   mvs()->Clock(stck); //szm20040914
           455 |   int  i, w1 , w2;
           456 |   _dummy = 0;
           457 |
           458 |   w1 = *(int *)(stck-1);
           459 |   w2 = *(int *)(stck+3);
           460 |   for (i = 0;i<5;i++)
           461 |   ä
           462 |   tÄiÜ = tUKÄw1&0x1fÜ; w1 = w1>>5;
           463 |   ü
           464 |   for (i = 5;i<10;i++)
           465 |   ä
           466 |   tÄiÜ = tUKÄw2&0x1fÜ; w2 = w2>>5;
           467 |   ü
           468 |   tÄ10Ü = _dummy;
           469 |
           470 | ü
           471 |
           472 | void getUniqueLongKEY(char * t)
           473 | ä
           474 |   char _dummy, stckÄ9Ü;
           475 |
           476 |   mvs()->Clock(stck); //szm20040914
           477 |   int w1 = *(int *)(stck);
           478 |   int w2 = *(int *)(stck+4);
           479 |   sprintf(t,"%8.8x%8.8x",w1,w2);
           480 |   tÄ16Ü = 0;
           481 | ü
           482 |
           483 |
           484 | //KV20040824 still needed?
           485 | //char * StrTok(char * mvsSTRING,char * termtokens)
           486 | //ä
           487 | //  char * c = strtok(mvsSTRING,termtokens);
           488 | //  return ( c ? c :"");
           489 | //ü
           490 |
           491 | int strcmpiList(const char * comp,const char *listÄÜ)
           492 | ä
           493 |    for (int i = 0;listÄiÜ;i++)
           494 |    if ( stricmp(comp,listÄiÜ) == 0)
           495 |    return 0;
           496 |    return 1;
           497 | ü
           498 |
           499 | int strcmpiList(const char * comp,const char *listÄÜ,int & i)
           500 | ä
           501 |    for ( i = 0;listÄiÜ;i++)
           502 |    if ( stricmp(comp,listÄiÜ) == 0)
           503 |     return 0;
           504 |    return 1;
           505 | ü
           506 |
           507 | //KV20040825 strnicmp replaced by strnicmp
           508 | #if 0
           509 | int strnicmp(const char * s1,const char * s2,int l)
           510 | ä
           511 |    for(int i = 0; i<l; i++)
           512 |    if ( tolower(s1ÄiÜ) - tolower(s2ÄiÜ) )
           513 |    return (tolower(s1ÄiÜ) - tolower(s2ÄiÜ));
           514 |    return 0;
           515 | ü
           516 | #endif
           517 |
           518 | int stcpma(char * mvsSTRING ,const char * pattern)
           519 | ä
           520 |    regex_t    preg;
           521 |    size_t     nmatch = 1;
           522 |    regmatch_t pmatchÄ1Ü;
           523 |    int rc = 0;
           524 |    if ( strlen(pattern) == 0 ]] strcmp(pattern,"*") == 0)
           525 |     return 1;
           526 |    //char pattÄ16Ü;
           527 |    char pattÄ512Ü; //ZA060607 for VSAM
           528 |    char * p = patt;
           529 |    int j = strlen(pattern);
           530 |    int k = j - 1; //index of last nonzero char
           531 | 	bool usepattern = false;//ToDo36320
           532 |    for(int i = 0;i<=j;i++)
           533 |    ä
           534 |    	  char c = patternÄiÜ;
           535 |       if (c == '*' ]] c == '?')
           536 | 		ä
           537 |           *p++= '.';
           538 | 			usepattern = true; //ToDo36320
           539 | 		ü
           540 |       else if (c == '.' ]] c == '$')
           541 |       ä
           542 |       	if (i < k) //not last char
           543 |       	ä
           544 |       		*p++= 'Öxe0'; // backslash
           545 |       		*p++= c; //no special character
           546 |       	ü
           547 |       	else
           548 |       	    *p++= c; //last char, remains special
           549 |       ü
           550 |         else
           551 |         *p++ = c;
           552 |    ü
           553 | 	if (usepattern)//ToDo36320
           554 | 	ä
           555 |    if (regcomp(&preg,patt,REG_EXTENDED))
           556 |     return 0;
           557 |    else
           558 |    ä
           559 |     rc = NOT regexec(&preg,mvsSTRING, nmatch, pmatch, 0);
           560 |       regfree(&preg);
           561 |       return rc;
           562 |    ü
           563 | ü
           564 | 	else //ToDo36320
           565 | 	ä
           566 | 		char * copy = strdup(mvsSTRING);
           567 | 		if (strchr(copy,' '))
           568 | 			* strchr(copy,' ') = 0;
           569 | 		int rc = | strcmp(copy,pattern);
           570 | 		free(copy);
           571 | 		return (rc);//ToDo36320
           572 | 	ü
           573 | ü
           574 |
           575 | mvsSTRING makemvsSTRING(char * s,int l)
           576 | ä
           577 |  for(l--;l;l--)
           578 |  if ( sÄl-1Ü NEQ ' ')  break;
           579 |  sÄlÜ = null;
           580 |  return mvsSTRING(s);
           581 | ü
           582 | char * StrDup(char * o)
           583 | ä
           584 |   char * rs =(char *)0;
           585 |   if ( o == (char *)0 ) return rs;
           586 |   rs = new charÄstrlen(o)+1Ü;
           587 |   strcpy(rs,o);
           588 |   return rs;
           589 | ü
           590 |
           591 | #ifndef ISIS_PF_MU
           592 | #if defined(CICSAPPL)
           593 | char bit_rotate(unsigned char from)
           594 |  ä
           595 |  static unsigned char rtabÄ256Ü =
           596 |  ä
           597 |     0x00, 0x80, 0x40, 0xc0, 0x20, 0xA0, 0x60, 0xe0,
           598 |     0x10, 0x90, 0x50, 0xd0, 0x30, 0xb0, 0x70, 0xf0,  // 0x00 bis 0x0f
           599 |     0x08, 0x88, 0x48, 0xc8, 0x28, 0xA8, 0x68, 0xe8,
           600 |     0x18, 0x98, 0x58, 0xd8, 0x38, 0xb8, 0x78, 0xf8,  // 0x10 bis 0x1f
           601 |     0x04, 0x84, 0x44, 0xc4, 0x24, 0xA4, 0x64, 0xe4,
           602 |     0x14, 0x94, 0x54, 0xd4, 0x34, 0xb4, 0x74, 0xf4,  // 0x20 bis 0x2f
           603 |     0x0c, 0x8c, 0x4c, 0xcc, 0x2c, 0xAc, 0x6c, 0xec,
           604 |     0x1c, 0x9c, 0x5c, 0xdc, 0x3c, 0xbc, 0x7c, 0xfc,  // 0x30 bis 0x3f
           605 |     0x02, 0x82, 0x42, 0xc2, 0x22, 0xA2, 0x62, 0xe2,
           606 |     0x12, 0x92, 0x52, 0xd2, 0x32, 0xb2, 0x72, 0xf2,  // 0x40 bis 0x4f
           607 |     0x0a, 0x8a, 0x4a, 0xca, 0x2a, 0xAa, 0x6a, 0xea,
           608 |     0x1a, 0x9a, 0x5a, 0xda, 0x3a, 0xba, 0x7a, 0xfa,  // 0x50 bis 0x5f
           609 |     0x06, 0x86, 0x46, 0xc6, 0x26, 0xA6, 0x66, 0xe6,
           610 |     0x16, 0x96, 0x56, 0xd6, 0x36, 0xb6, 0x76, 0xf6,  // 0x60 bis 0x6f
           611 |     0x0e, 0x8e, 0x4e, 0xce, 0x2e, 0xAe, 0x6e, 0xee,
           612 |     0x1e, 0x9e, 0x5e, 0xde, 0x3e, 0xbe, 0x7e, 0xfe,  // 0x70 bis 0x7f
           613 |     0x01, 0x81, 0x41, 0xc1, 0x21, 0xA1, 0x61, 0xe1,
           614 |     0x11, 0x91, 0x51, 0xd1, 0x31, 0xb1, 0x71, 0xf1,  // 0x80 bis 0x8f
           615 |     0x09, 0x89, 0x49, 0xc9, 0x29, 0xA9, 0x69, 0xe9,
           616 |     0x19, 0x99, 0x59, 0xd9, 0x39, 0xb9, 0x79, 0xf9,  // 0x90 bis 0x9f
           617 |     0x05, 0x85, 0x45, 0xc5, 0x25, 0xA5, 0x65, 0xe5,
           618 |     0x15, 0x95, 0x55, 0xd5, 0x35, 0xb5, 0x75, 0xf5,  // 0xa0 bis 0xaf
           619 |     0x0d, 0x8d, 0x4d, 0xcd, 0x2d, 0xAd, 0x6d, 0xed,
           620 |     0x1d, 0x9d, 0x5d, 0xdd, 0x3d, 0xbd, 0x7d, 0xfd,  // 0xb0 bis 0xbf
           621 |     0x03, 0x83, 0x43, 0xc3, 0x23, 0xA3, 0x63, 0xe3,
           622 |     0x13, 0x93, 0x53, 0xd3, 0x33, 0xb3, 0x73, 0xf3,  // 0xc0 bis 0xcf
           623 |     0x0b, 0x8b, 0x4b, 0xcb, 0x2b, 0xAb, 0x6b, 0xeb,
           624 |     0x1b, 0x9b, 0x5b, 0xdb, 0x3b, 0xbb, 0x7b, 0xfb,  // 0xd0 bis 0xdf
           625 |     0x07, 0x87, 0x47, 0xc7, 0x27, 0xA7, 0x67, 0xe7,
           626 |     0x17, 0x97, 0x57, 0xd7, 0x37, 0xb7, 0x77, 0xf7,  // 0xe0 bis 0xef
           627 |     0x0f, 0x8f, 0x4f, 0xcf, 0x2f, 0xAf, 0x6f, 0xef,
           628 |     0x1f, 0x9f, 0x5f, 0xdf, 0x3f, 0xbf, 0x7f, 0xff,  // 0xf0 bis 0xff
           629 |  ü;
           630 |    return rtabÄfromÜ;
           631 | ü
           632 | #endif
           633 | #endif //ifndef ISIS_PF_MU
           634 |
           635 | /*
           636 | void swab(char *source, char *target,int len) //ZA030918 Metacode needs it
           637 | ä
           638 |    int ii;
           639 |    for (ii=0; ii<len; ii=ii+2)
           640 |    ä
           641 |       targetÄiiÜ = sourceÄii+1Ü;
           642 |       targetÄii+1Ü = sourceÄiiÜ;
           643 |    ü
           644 |    if(ungerade(len))
           645 |    ä targetÄlenÜ=sourceÄlenÜ;
           646 |      targetÄlen+1Ü='Ö0'; ü
           647 |    else targetÄlenÜ = 'Ö0';
           648 |    return;
           649 | ü
           650 | */
           651 |
           652 |
           653 | void swab(char *source, char *target,int len) //ZA030924 Metacode needs it
           654 | ä
           655 |    int ii;
           656 |    for (ii=0; ii<len-1; ii=ii+2)
           657 |    ä
           658 |       targetÄiiÜ = sourceÄii+1Ü;
           659 |       targetÄii+1Ü = sourceÄiiÜ;
           660 |    ü
           661 |    return;
           662 | ü
           663 |
           664 | /*
           665 | unsigned int ungerade(int len)
           666 | ä
           667 |    if (len%2) return TRUE;
           668 |       else return FALSE;
           669 | ü
           670 | */
           671 |
           672 | #ifndef __TEST__
           673 | #define __TEST__ 1
           674 | #endif
           675 |
           676 | char __test__ = __TEST__ ;
0                                   * * * * *   E N D   O F   S O U R C E   * * * * *
-

15694A01 V1.12 z/OS XL C++                 //'ESA.PRJ.CBTHSM.CPP(MISC)'                      20.12.12 18:51:45
0                                    * * * * *   I N C L U D E S   * * * * *
     1  =  //'ESA.PRJ.CBTHSM.HPP(ISISDEF)'
     2  =  //'CEE.SCEEH.H(STDLIB)'
     3  =  //'CEE.SCEEH.H(FEATURES)'
     4  =  //'CEE.SCEEH.H(BUILTINS)'
     5  =  //'CEE.SCEEH.H(STDDEF)'
     6  =  //'CEE.SCEEH.H(STRING)'
     7  =  //'CEE.SCEEH.H(STRINGS)'
     8  =  //'CEE.SCEEH.SYS.H(TYPES)'
     9  =  //'CEE.SCEEH.H(STDIO)'
    10  =  //'CEE.SCEEH.H(TIME)'
    11  =  //'CEE.SCEEH.H(MATH)'
    12  =  //'ESA.PRJ.CBTHSM.HPP(MVSBASE)'
    13  =  //'ESA.PRJ.CBTHSM.HPP(MERROR)'
    14  =  //'ESA.PRJ.CBTHSM.HPP(DSNAMEUT)'
    15  =  //'CEE.SCEEH.H(ASSERT)'
    16  =  //'ESA.PRJ.CBTHSM.HPP(MVSEBCDI)'
    17  =  //'ESA.PRJ.CBTHSM.HPP(MISC)'
    18  =  //'CEE.SCEEH.H(ASSERT)'
    19  =  //'CEE.SCEEH.H(CTYPE)'
    20  =  //'CEE.SCEEH.H(REGEX)'
    21  =  //'CEE.SCEEH.H(LOCALE)'
    22  =  //'CEE.SCEEH.SYS.H(TIME)'
    23  =  //'ESA.PRJ.CBTHSM.HPP(CASMIF)'
    24  =  //'ESA.PRJ.CBTHSM.HPP(ASMIF)'
    25  =  //'CEE.SCEEH.H(UNISTD)'
    26  =  //'CEE.SCEEH.H(INTTYPES)'
    27  =  //'CEE.SCEEH.H(STDINT)'
-                                 * * * * *   E N D   O F   I N C L U D E S   * * * * *
0
15694A01 V1.12 z/OS XL C++                 //'ESA.PRJ.CBTHSM.CPP(MISC)'                      20.12.12 18:51:45
-                           * * * * *   M E S S A G E   S U M M A R Y   * * * * *
0TOTAL   UNRECOVERABLE  SEVERE       ERROR     WARNING    INFORMATIONAL
                (U)       (S)         (E)        (W)          (I)
     0           0         0           0          0            0
0                    * * * * *   E N D   O F   M E S S A G E   S U M M A R Y   * * * * *
0                        * * * * *   E N D   O F   C O M P I L A T I O N   * * * * *
