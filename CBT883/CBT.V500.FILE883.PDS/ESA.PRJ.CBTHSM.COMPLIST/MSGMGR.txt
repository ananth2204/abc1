
15694A01 V1.12 z/OS XL C++               //'ESA.PRJ.CBTHSM.CPP(MSGMGR)'                      20.12.12 18:51:58
0                                      * * * * *   P R O L O G   * * * * *
    Compiler options. . . . . . . :AGGRCOPY(NOOVERLAP)             ANSIALIAS       ARCH(7)         ARGPARSE        NOASCII
                                  :NOATTRIBUTE     ASSERT(RESTRICT)                BITFIELD(UNSIGNED)              CHARS(UNSIGNED)
                                  :NOCOMPACT       NOCOMPRESS      CVFT            NODFP           DIGRAPH         DLL(CALLBACKANY)
                                  :ENUMSIZE(SMALL) NOEVENTS        EXECOPS         EXH             NOEXPMAC        NOEXPORTALL
                                  :NOFASTTEMPINC   FLAG(I)         NOGOFF          GONUMBER        HALT(16)
                                  :NOHGPR(NOPRESERVE)              NOHOT           NOIGNERRNO      ILP32           NOINITAUTO
                                  :NOINLRPT        NOLIBANSI       NOLIST          LONGNAME        NOMAKEDEP       NOMARGINS
                                  :MAXMEM(2097152) MEMORY          NAMEMANGLING(zOSV1R2)           NESTINC(255)    OBJECT
                                  :OBJECTMODEL(COMPAT)             NOOE            NOOFFSET        OPTIMIZE(2)     PLIST(HOST)
                                  :NOPORT          NOPPONLY        PREFETCH        REDIR           NOREPORT        ROSTRING
                                  :ROCONST         RTTI(ALL)       NOSEQUENCE      NOSHOWINC       NOSHOWMACROS    SOURCE
                                  :SKIPSRC(SHOW)   SPILL(3600)     START           NOSTATICINLINE  STRICT
                                  :NOSTRICT_INDUCTION              TARGET(LE,CURRENT)              NOTEMPLATEREGISTRY
                                  :TEMPLATERECOMPILE               TERMINAL        TEST(HOOK)      TMPLPARSE(NO)   TUNE(7)
                                  :UNROLL(AUTO)    UTF             NOWARN0X        NOWARN64        NOWSIZEOF       NOXREF
                                  :NOCICS
                                  :NOCONVLIT
                                  :NOCSECT
                                  :DEBUG(FORMAT(ISD),LEVEL(0),HOOK(NOLINE,NOBLOCK,NOPATH,CALL,FUNC),NOSYMBOL)
                                  :DEFINE(__OS390__=1,_POSIX_SOURCE=1,_XOPEN_SOURCE_EXTENDED=1,MU_STANDALONE=1,ISIS_PF_MU=1)
                                  :FLOAT(HEX,FOLD,AFP(NOVOLATILE)) ROUND(Z)
                                  :NOHALTONMSG
                                  :INFO(LAN)
                                  :INLINE(AUTO,NOREPORT,100,1000)
                                  :NOIPA
                                  :KEYWORD(bool,explicit,export,false,mutable,namespace,true,typename,using,restrict,__restrict__,
                                   __restrict,_Pragma,__alignof__,__asm__,__attribute__,__const__,__extension__,__volatile__,
                                   __inline__,__signed__,__typeof__)
                                  :NOKEYWORD(char16_t,char32_t,static_assert,typeof)
                                  :LANGLVL(ANONSTRUCT,ANONUNION,ANSIFOR,ANSISINIT,NOAUTOTYPEDEDUCTION,C99VLA,C99__FUNC__,
                                   NOC99LONGLONG,NOC99PREPROCESSOR,NODBCS,NODECLTYPE,NODELEGATINGCTORS,DEPENDENTBASELOOKUP,
                                   NODOLLARINNAMES,EMPTYSTRUCT,NOEXTENDEDFRIEND,NOEXTENDEDINTEGERSAFE,EXTERNTEMPLATE,ILLPTOM,
                                   IMPLICITINT,NOINLINENAMESPACE,LIBEXT,LONGLONG,NONEWEXCP,OFFSETNONPOD,NOOLDDIGRAPH,OLDFRIEND,
                                   NOOLDMATH,NOOLDSTR,OLDTEMPACC,NOOLDTMPLALIGN,OLDTMPLSPEC,NOSTATIC_ASSERT,TRAILENUM,TYPEDEFCLASS,
                                   NOUCS,VARARGMACROS,NOVARIADICTEMPLATES,GNU_INCLUDE_NEXT,ZEROEXTARRAY)
                                  :LOCALE(DE_DE.IBM-273)
                                  :NOLSEARCH
                                  :OPTFILE(DD:OPTFILE)
                                  :NORTCHECK
                                  :SEARCH(//'CEE.SCEEH.+', //'CBC.SCLBH.+', CEE.SCEEH.+, CBC.SCLBH.+, DD:USERLIB)
                                  :NOSERVICE
                                  :NOSQL
                                  :NOSUPPRESS
                                  :TEMPINC(./tempinc)
                                  :NOXPLINK(NOBACKCHAIN,NOCALLBACK,GUARD,OSCALL(UPSTACK),NOSTOREARGS)
    Version Macros. . . . . . . . : __COMPILER_VER__=0x410C0000
                                  : __LIBREL__=0x410C0000
                                  : __TARGET_LIB__=0x410C0000
    Source margins. . . . . . . . :
      Varying length. . . . . . . : 1 - 32760
      Fixed length. . . . . . . . : 1 - 32760
    Sequence columns. . . . . . . :
      Varying length. . . . . . . : none
      Fixed length. . . . . . . . : none
    Locale name . . . . . . . . . : DE_DE.IBM-273
    Code set. . . . . . . . . . . : IBM-273
    Listing name. . . . . . . . . : DD:SYSCPRT
0                                 * * * * *   E N D   O F   P R O L O G   * * * * *
-
15694A01 V1.12 z/OS XL C++               //'ESA.PRJ.CBTHSM.CPP(MSGMGR)'                      20.12.12 18:51:58
-
                                       * * * * *   S O U R C E   * * * * *
0            1 | /*******************************************************************************
             2 | * Copyright ISIS Papyrus Technologies Limited
             3 | *-------------------------------------------------------------------------------
             4 | * File:              $Source: /data/cvs/src/mvs/msgmgr.cpp,v $
             5 | *-------------------------------------------------------------------------------
             6 | * Description:
             7 | *   ???
             8 | *******************************************************************************/
             9 |
            10 | #ifdef ISIS_PF_MU
            11 | #pragma csect(CODE,"msgmgrmC")
            12 | #pragma csect(STATIC,"msgmgrmS")
            13 | #pragma csect(TEST,"msgmgrmT")
            14 | #endif
            15 | #include "isisdef.h"
            16 | #include <stdlib.h>
            17 | #include <string.h>
            18 | #include <strings.h>
            19 | #ifdef OWN_STDIO
            20 | #include "stdio.hpp"
            21 | //#include "iqvprj.hpp"
            22 | #endif
            23 | #include "mvsbase.hpp"
            24 | #include "casmif.hpp"
            25 | #if defined(CICSAPPL) == 0 && defined(MU_STANDALONE) == 0
            26 | #include "isismisc.hpp"
            27 | #endif
            28 | #include "misc.hpp"
            29 | #include "msgmgr.hpp"
            30 | #ifdef PANEL_ID
            31 | #include "panel.hpp"
            32 | #include "cicbase.hpp"
            33 | #endif
            34 | #include <dll.h>
            35 | #include <stdlib.h>
            36 | #include <stdio.h>
            37 | #include <stdarg.h>
            38 |
            39 |
            40 | namespace isis_ns_mvs
            41 | 	ä
            42 | 	//KV20040216 protection exception in pas dll
            43 | 	//???MessageTEXT * messagetext   = new MessageTEXT();
            44 | 	MessageTEXT * messagetext   = 0;
            45 | 	ExternalTEXT * externaltext = 0;  //szm20060322
            46 | 	/*--------------------------------------------------------------+
            47 |
            48 | 	MSGE rouines                                                 ]
            49 | 	+--------------------------------------------------------------*/
            50 |
            51 |
            52 |
            53 | //#define ERROR_BUFF 512 szm20060504
            54 | #define ERROR_BUFF 4096
            55 | 	static char g_ebbÄ ERROR_BUFF Ü;
            56 | 	static char g_ebb_flag = 0;
            57 |
            58 |
            59 | 	void * TEXTVER();
            60 | 	MSGE * tCHARp(char * c ,int l)
            61 | 		ä return new MSGE(c,l);ü
            62 | 	MSGE * tINT(int i,int l )
            63 | 		ä return new MSGE(i,l); ü
            64 | 	MSGE * tSHORT(int i,int l )
            65 | 		ä return new MSGE(i, l);ü
            66 | 	MSGE * tmvsSTRING( mvsSTRING & s,int l )
            67 | 		ä return new MSGE(s,l); ü
            68 | 	MSGE * tHEX(int i ,int  l  )
            69 | 		ä return new MSGE(i,l,msgfx);ü
            70 | 	MSGE * tHEX(char * c, int l)
            71 | 		ä return new MSGE(c,l,msgfx);ü
            72 |
            73 | 	MSGE::MSGE():length(0), type(msgundef),to(NULL)äü
            74 | MSGE::MSGE(int i,int l, MSGEForm f):to(NULL)
            75 | 	ä
            76 | 	mint = i;length = l; type = msgint;form = f;
            77 | 	ü
            78 | MSGE::MSGE(short s,int l, MSGEForm f):to(NULL)
            79 | 	ä
            80 | 	mshort = s; length = l; type = msgshort;form = f;
            81 | 	ü
            82 | MSGE::MSGE(char * c,int l, MSGEForm f):to(NULL)
            83 | 	ä
            84 | 	mcharp = c; if ( l == 0) l = int(strlen(c)); length = l;
            85 | 	type = msgcharp;
            86 | 	form = f;
            87 | 	ü
            88 | MSGE::MSGE(const mvsSTRING &s,int l,MSGEForm f):to(NULL)
            89 | 	ä
            90 | 	mmvsSTRING = new mvsSTRING(s);
            91 | 	if ( l == 0) l = int(mvsSTRING(s).lengthOf());
            92 | 	length = l;
            93 | 	type = msgmvsSTRING;
            94 | 	form = f;
            95 | 	ü
            96 | MSGE:: MSGE(char c):to(NULL)
            97 | 	ä
            98 | 	mchar = c;
            99 | 	length = 1;
           100 | 	type = msgchar;
           101 | 	form = msgfc;
           102 | 	ü
           103 |
           104 |
           105 |
           106 |
           107 | /*--------------------------------------------------------------+
           108 | ]                                                               ]
           109 | ]  MSGE format                                                  ]
           110 | ]                                                               ]
           111 | +--------------------------------------------------------------*/
           112 |
           113 |
           114 | char * MSGE::format()
           115 | 	ä
           116 | 	char * f;
           117 | 	to = new charÄ2*length+1Ü;//szm20050907 heap demage in uprun
           118 |
           119 |
           120 | 	switch(form)
           121 | 		ä
           122 | 		case msgfc: f = "%c";
           123 | 			break;
           124 | 		case msgfd: f = "%*d";
           125 | 			break;
           126 | 		case msgfs: f = "%*s";
           127 | 			break;
           128 | 		case msgfx: f = "xÖ"%0*xÖ"";
           129 | 			break;
           130 | 		ü
           131 |
           132 | 	switch ( type)
           133 | 		ä
           134 | 		case msgshort:sprintf(to,f,length,mshort);
           135 | 			break;
           136 | 		case msgint  :sprintf(to,f,length,mint);
           137 | 			break;
           138 | 		case msgcharp:sprintf(to,f,length,mcharp);
           139 | 			break;
           140 | 		case msgmvsSTRING: sprintf(to,f,length,(char * )(*mmvsSTRING));
           141 | 			break;
           142 | 		case msgchar: sprintf(to,f,mchar);
           143 | 			break;
           144 | 		ü
           145 | 	return to;
           146 | 	ü
           147 |
           148 |
           149 | /*--------------------------------------------------------------+
           150 | ]                                                               ]
           151 | ]  TEXT class                                                   ]
           152 | ]                                                               ]
           153 | +--------------------------------------------------------------*/
           154 |
           155 |
           156 | static TEXTENTRY TextvectorÄÜ =
           157 | 	ä
           158 | #define  MESSAGE_TEXT
           159 | #define t( a , b ) ä a , b ü ,
           160 | #include "msgtext.hpp"
           161 | #undef t
           162 | #undef   MESSAGE_TEXT
           163 | 		ä0,0ü
           164 | 	ü;
           165 |
           166 | int initMessageText()
           167 |
           168 | 		ä
           169 | 		if (messagetext==NULL)
           170 | 			messagetext = new MessageTEXT();
           171 | 		return 0;
           172 | 		ü
           173 |
           174 | MessageTEXT::MessageTEXT(char * fn ,char * logstream)
           175 | 	ä
           176 | 	if ( fn)
           177 | 		ä
           178 | 		msgfilename = new charÄstrlen(fn)+1Ü;
           179 | 		strcpy(msgfilename,fn);
           180 | 		ü
           181 | 	else msgfilename = 0;
           182 | 	onlylogger = false;
           183 | 	logger = false; //szm20060410 init logger
           184 | 	if (logstream)
           185 | 		ä
           186 | 		if (mvs()->LoggerOpen(logstream))
           187 | 			logger = true;
           188 | 		else
           189 | 			logger = false;
           190 | 		ü
           191 | 	msgfile = NULL; //szm20040602
           192 | 	vector = Textvector;
           193 | 	printfv = 0;
           194 | 	timestemp = 1;
           195 | 	ü
           196 |
           197 | void MessageTEXT::setFileName(char * fn)
           198 | 	ä
           199 | 	if ( fn)
           200 | 		ä
           201 | 		msgfilename = new charÄstrlen(fn)+1Ü;
           202 | 		strcpy(msgfilename,fn);
           203 | 		ü
           204 | 	else msgfilename = 0;
           205 | 	ü
           206 |
           207 | void MessageTEXT::setLogger(const char *logstream)
           208 | 	ä
           209 | 	if (logstream)
           210 | 		ä
           211 | 		if (mvs()->LoggerOpen(logstream))
           212 | 			logger = true;
           213 | 		else
           214 | 			logger = false;
           215 | 		ü
           216 | 	ü
           217 |
           218 | MessageTEXT::ßMessageTEXT()
           219 | 	ä
           220 | 	if (msgfile) fclose(msgfile); //szm20040602
           221 | 	if (logger)  mvs()->LoggerClose();
           222 | 	logger = false;
           223 | 	delete ÄÜ msgfilename;
           224 | 	ü
           225 |
           226 | char * MessageTEXT::getText(int i)
           227 | 	ä
           228 | 	// printf("Message %d Ön",i);
           229 |
           230 | 	TEXTENTRY * te = Textvector;
           231 | 	while (te->t && (te->i > 0)  )
           232 | 		ä
           233 | 		if ( te->i == i )
           234 | 			ä
           235 | 			//      printf("%sÖn",te->t);
           236 | 			return te->t;
           237 | 			ü
           238 | 		te++;
           239 | 		ü
           240 | 	// printf("Undefined message %dÖn",i );
           241 | 	sprintf(deflt,"Undefined message %dÖn",i );
           242 | 	return deflt;
           243 |
           244 | 	ü
           245 |
           246 | int MessageTEXT::copyText(int i,char * to,int l)
           247 | 	ä
           248 | 	char   tmÄERROR_BUFFÜ;
           249 | 	char * from = getText(i);
           250 | 	if (messagetext->getTimeStempFlag() )
           251 | 		ä
           252 | 		char ttÄ32Ü;
           253 | 		char fmÄÜ = "%Y:%m:%d %H:%M:%S ";
           254 | 		formatTime(tt,sizeof(tt),fm);
           255 | 		strcpy(tm,tt);
           256 | 		strcat(tm,from);
           257 | 		from = tm;
           258 | 		ü
           259 |
           260 | 	int lf = strlen(from);
           261 | 	if ( lf <= l)
           262 | 		strcpy(to,from);
           263 | 	else
           264 | 		ä
           265 | 		memcpy(to,from,l-1);
           266 | 		toÄl-1Ü  = null;
           267 | 		ü
           268 | 	return ( l -lf );
           269 | 	ü
           270 |
           271 | char * MessageTEXT::print(char * t)
           272 | 	ä
           273 | 	if (|onlylogger)
           274 | 		ä
           275 | 		if ( msgfilename)
           276 | 			ä
           277 | 			if (msgfile == NULL)
           278 | 				msgfile = fopen(msgfilename,"wt,type=record"); //szm20040907
           279 | 			if (msgfile)
           280 | 				ä
           281 |
           282 | 				//fprintf(msgfile,"%sÖn",t); szm20050710
           283 | 				fputs(t,msgfile);
           284 | 				fflush(msgfile);
           285 | 				//fclose(msgfile); //szm20040602
           286 | 				ü
           287 | 			ü
           288 | 		if ( printfv ) printfv(t);
           289 | 		else
           290 | 			puts(t);
           291 | 		ü
           292 | 	if (logger)
           293 | 		mvs()->Logger(t);
           294 | 	return t;
           295 | 	ü
           296 |
           297 | void MessageTEXT::setNumber(int n)
           298 | 	ä
           299 | 	number = n;
           300 | 	vi = 0;
           301 | 	for (int i=0;i<8;i++)vÄiÜ = 0;
           302 | 	ü
           303 |
           304 |
           305 | MessageTEXT&  MessageTEXT::operator<<(int i)
           306 | 	ä
           307 | 	vÄvi++Ü = tINT(i);
           308 | 	return * this;
           309 | 	ü
           310 | #if 0   //szm20030513
           311 | MessageTEXT&  MessageTEXT::operator<<(short i)
           312 | 	ä
           313 | 	vÄvi++Ü = tSHORT(i);
           314 | 	return * this;
           315 | 	ü
           316 | #endif
           317 | MessageTEXT&  MessageTEXT::operator<<(char *c)
           318 | 	ä
           319 | 	vÄvi++Ü = tCHARp(c);
           320 | 	return * this;
           321 | 	ü
           322 |
           323 | MessageTEXT&  MessageTEXT::operator<<(const mvsSTRING& s)
           324 | 	ä
           325 | 	mvsSTRING temp = s;
           326 | 	vÄvi++Ü = tmvsSTRING(temp);
           327 | 	return * this;
           328 | 	ü
           329 |
           330 | MessageTEXT&  MessageTEXT::operator<<(void * p)
           331 | 	ä
           332 | 	vÄvi++Ü = tHEX((char *)p,8);
           333 | 	return * this;
           334 | 	ü
           335 | char * MessageTEXT::operator<<(const EOL eol)
           336 | 	ä
           337 | 	char ebbÄ ERROR_BUFF Ü;
           338 | 	char *ivÄ8Ü;
           339 | 	char formatÄERROR_BUFFÜ;
           340 |
           341 | 	int i;
           342 | 	memset(ebb,null,sizeof(ebb));
           343 | 	copyText(number,format,ERROR_BUFF);
           344 |
           345 | 	for(i = 0;i<8;i++)
           346 | 		ä
           347 | 		ivÄiÜ = 0;
           348 | 		MSGE * msge = vÄiÜ;
           349 | 		if ( msge == 0 ) break;
           350 | 		iv ÄiÜ = msge->format();
           351 | 		ü
           352 |
           353 | 	switch(i)
           354 | 		ä
           355 | 		case 0 : sprintf(ebb,format);
           356 | 			break;
           357 | 		case 1 : sprintf(ebb,format,ivÄ0Ü);
           358 | 			break;
           359 | 		case 2 : sprintf(ebb,format,ivÄ0Ü,ivÄ1Ü);
           360 | 			break;
           361 | 		case 3 : sprintf(ebb,format,ivÄ0Ü,ivÄ1Ü,ivÄ2Ü);
           362 | 			break;
           363 | 		case 4 : sprintf(ebb,format,ivÄ0Ü,ivÄ1Ü,ivÄ2Ü,ivÄ3Ü);
           364 | 			break;
           365 | 		case 5 : sprintf(ebb,format,ivÄ0Ü,ivÄ1Ü,ivÄ2Ü,ivÄ3Ü,ivÄ4Ü);
           366 | 			break;
           367 | 		case 6 : sprintf(ebb,format,ivÄ0Ü,ivÄ1Ü,ivÄ2Ü,ivÄ3Ü,ivÄ4Ü,ivÄ5Ü);
           368 | 			break;
           369 | 		case 7 : sprintf(ebb,format,ivÄ0Ü,ivÄ1Ü,ivÄ2Ü,ivÄ3Ü,ivÄ4Ü,ivÄ5Ü,ivÄ6Ü);
           370 | 			break;
           371 | 		default: sprintf(ebb,format);              break;
           372 | 		ü
           373 |
           374 | 	print(ebb);
           375 | 	strcpy(g_ebb,ebb);
           376 | 	for( i = 0;i<8;i++)
           377 | 		ä
           378 |
           379 | 		if ( vÄiÜ )
           380 | 			ä delete vÄiÜ ; vÄiÜ = 0;ü
           381 | 		else break;
           382 | 		ü
           383 | #ifdef  PANEL_ID
           384 | 	PanelSetMessageUncond(
           385 | 		messagetext->getTimeStempFlag() ? g_ebb+19 :  g_ebb ) ;
           386 | 	cicsbase->err(g_ebb);
           387 | #endif
           388 | 	g_ebb_flag = 1;
           389 | 	return g_ebb;
           390 | 	ü
           391 |
           392 |
           393 | /*--------------------------------------------------------------+
           394 | ]  Text formatting                                              ]
           395 | ]                                                               ]
           396 | ]                                                               ]
           397 | +--------------------------------------------------------------*/
           398 |
           399 |
           400 |
           401 |
           402 | MessageTEXT& Err(int number)
           403 | 	ä
           404 | 	if (messagetext==NULL)
           405 | 		messagetext = new MessageTEXT();
           406 | 	messagetext->setNumber(number);
           407 | 	return (*messagetext);
           408 | 	ü
           409 | MessageTEXT& Msg(int number)
           410 | 	ä
           411 | 	if (messagetext==NULL)
           412 | 		messagetext = new MessageTEXT();
           413 | 	messagetext->setNumber(number);
           414 | 	return (*messagetext);
           415 | 	ü
           416 |
           417 | int   Error(int number , ...   )
           418 | 	ä
           419 | 	char ebbÄ ERROR_BUFF Ü;
           420 | 	char *ivÄ8Ü;
           421 | 	MSGE *mvÄ8Ü;
           422 | 	char formatÄERROR_BUFFÜ;
           423 |
           424 | 	memset(ebb,null,sizeof(ebb));
           425 | 	va_list ap;
           426 | 	va_start(ap, number);
           427 |
           428 | 	messagetext->copyText(number,format,ERROR_BUFF);
           429 |
           430 | 	int i;
           431 | 	for(i = 0;i<8;i++)
           432 | 		ä
           433 | 		ivÄiÜ = 0;
           434 | 		mvÄiÜ = 0;
           435 | 		MSGE * msge = (MSGE *)(va_arg(ap,void *));
           436 | 		if ( msge == 0 ) break;
           437 | 		iv ÄiÜ = msge->format();
           438 | 		mv ÄiÜ = msge;
           439 | 		ü
           440 |
           441 | 	switch(i)
           442 | 		ä
           443 | 		case 0 : sprintf(ebb,format);
           444 | 			break;
           445 | 		case 1 : sprintf(ebb,format,ivÄ0Ü);
           446 | 			break;
           447 | 		case 2 : sprintf(ebb,format,ivÄ0Ü,ivÄ1Ü);
           448 | 			break;
           449 | 		case 3 : sprintf(ebb,format,ivÄ0Ü,ivÄ1Ü,ivÄ2Ü);
           450 | 			break;
           451 | 		case 4 : sprintf(ebb,format,ivÄ0Ü,ivÄ1Ü,ivÄ2Ü,ivÄ3Ü);
           452 | 			break;
           453 | 		case 5 : sprintf(ebb,format,ivÄ0Ü,ivÄ1Ü,ivÄ2Ü,ivÄ3Ü,ivÄ4Ü);
           454 | 			break;
           455 | 		case 6 : sprintf(ebb,format,ivÄ0Ü,ivÄ1Ü,ivÄ2Ü,ivÄ3Ü,ivÄ4Ü,ivÄ5Ü);
           456 | 			break;
           457 | 		case 7 : sprintf(ebb,format,ivÄ0Ü,ivÄ1Ü,ivÄ2Ü,ivÄ3Ü,ivÄ4Ü,ivÄ5Ü,ivÄ6Ü);
           458 | 			break;
           459 | 		default: sprintf(ebb,format);               break;
           460 | 		ü
           461 |
           462 | 	messagetext->print(ebb);
           463 | 	strcpy(g_ebb,ebb);
           464 | 	for( i = 0;i<8;i++)
           465 | 		ä
           466 | 		if ( mvÄiÜ ) delete mvÄiÜ ;
           467 | 		else break;
           468 | 		ü
           469 | #ifdef  PANEL_ID
           470 | 	PanelSetMessageUncond(
           471 | 		messagetext->getTimeStempFlag() ? g_ebb+19 :  g_ebb ) ;
           472 | 	cicsbase->err(g_ebb);
           473 | #endif
           474 | 	g_ebb_flag = 1;
           475 | 	return 0;
           476 | 	ü
           477 |
           478 |
           479 | char *  Message(int number , ...   )
           480 | 	ä
           481 | 	char ebbÄ ERROR_BUFF Ü;
           482 | 	char *ivÄ8Ü;
           483 | 	MSGE *mvÄ8Ü;
           484 | 	char formatÄERROR_BUFFÜ;
           485 |
           486 | 	memset(ebb,null,sizeof(ebb));
           487 | 	va_list ap;
           488 | 	va_start(ap, number);
           489 |
           490 | 	messagetext->copyText(number,format,ERROR_BUFF);
           491 |
           492 | 	int i;
           493 | 	for( i = 0;i<8;i++)
           494 | 		ä
           495 | 		ivÄiÜ = 0;
           496 | 		mvÄiÜ = 0;
           497 | 		MSGE * msge = (MSGE *)(va_arg(ap,void *));
           498 | 		if ( msge == 0 ) break;
           499 | 		iv ÄiÜ = msge->format();
           500 | 		mv ÄiÜ = msge;
           501 | 		ü
           502 |
           503 | 	switch(i)
           504 | 		ä
           505 | 		case 0 : sprintf(ebb,format);
           506 | 			break;
           507 | 		case 1 : sprintf(ebb,format,ivÄ0Ü);
           508 | 			break;
           509 | 		case 2 : sprintf(ebb,format,ivÄ0Ü,ivÄ1Ü);
           510 | 			break;
           511 | 		case 3 : sprintf(ebb,format,ivÄ0Ü,ivÄ1Ü,ivÄ2Ü);
           512 | 			break;
           513 | 		case 4 : sprintf(ebb,format,ivÄ0Ü,ivÄ1Ü,ivÄ2Ü,ivÄ3Ü);
           514 | 			break;
           515 | 		case 5 : sprintf(ebb,format,ivÄ0Ü,ivÄ1Ü,ivÄ2Ü,ivÄ3Ü,ivÄ4Ü);
           516 | 			break;
           517 | 		case 6 : sprintf(ebb,format,ivÄ0Ü,ivÄ1Ü,ivÄ2Ü,ivÄ3Ü,ivÄ4Ü,ivÄ5Ü);
           518 | 			break;
           519 | 		case 7 : sprintf(ebb,format,ivÄ0Ü,ivÄ1Ü,ivÄ2Ü,ivÄ3Ü,ivÄ4Ü,ivÄ5Ü,ivÄ6Ü);
           520 | 			break;
           521 | 		default: sprintf(ebb,format);               break;
           522 | 		ü
           523 |
           524 |
           525 | 	strcpy(g_ebb,ebb);
           526 | 	for( i = 0;i<8;i++)
           527 | 		ä
           528 | 		if ( mvÄiÜ ) delete mvÄiÜ ;
           529 | 		else break;
           530 | 		ü
           531 | #ifdef  PANEL_ID
           532 | 	PanelSetMessageUncond(
           533 | 		messagetext->getTimeStempFlag() ? g_ebb+19 :  g_ebb ) ;
           534 | 	cicsbase->log(g_ebb);
           535 | #endif
           536 | 	g_ebb_flag = 1;
           537 | 	return g_ebb;
           538 | 	ü
           539 |
           540 |
           541 | char * getErrorText()
           542 | 	ä
           543 | 	if ( g_ebb_flag == 0 ) return 0;
           544 | 	g_ebb_flag = 0;
           545 | 	if (messagetext->getTimeStempFlag()) return g_ebb+19;
           546 | 	else return g_ebb ;
           547 | 	ü
           548 |
           549 | char * getMessageText()
           550 | 	ä
           551 | 	if (messagetext->getTimeStempFlag()) return g_ebb+19;
           552 | 	else return g_ebb ;
           553 | 	ü
           554 |
           555 | ExternalTEXT::ExternalTEXT(char * name ):language('E')
           556 | 	äinit(name);ü
           557 | ExternalTEXT::ExternalTEXT(char * name, char lang ):language(lang)
           558 | 	äinit(name);ü
           559 |
           560 | void ExternalTEXT::init(char * name)
           561 | 	ä
           562 | 	modulnameÄ0Ü = language==' ' ? 'E':language;
           563 | 	strcpy(modulname+1,name);
           564 | 	dllhandle * handle = dllload(modulname);
           565 | 	//fp = (void *(*)())dllqueryfn(handle,"_dynamn");
           566 | 	fp = (EXT_C_fp)dllqueryfn(handle,"_dynamn");
           567 | 	if (fp == 0)
           568 | 		ä
           569 | 		char _bÄ128Ü;
           570 | 		sprintf(_b,"unable to load the '%s' text module Ön handle:%p function:%p dÖn",modulname,handle,fp)
           570 | ;
           571 | 		puts(_b);
           572 | 		abort();
           573 | 		ü
           574 | 	text = fp();
           575 | 	ü
           576 |
           577 | int ExternalTEXT::MSGTEXT(int id, char * buff,int len)
           578 | 	ä
           579 | 	if (text)
           580 | 		for ( et * etp = (et *) text;etp->ett;etp++)
           581 | 			ä if ( id == atoi(etp->cid) )
           582 | 			ä
           583 | 			strncpy(buff,*(etp->ett),len-1);
           584 | 			*(buff+len-1) = 0;
           585 | 			return 1;
           586 | 			ü
           587 | 			ü
           588 | 		*buff = 0;
           589 | 		return 0;
           590 | 	ü
           591 |
           592 | char * ExternalTEXT::HelpText(char * hid)
           593 | 	ä
           594 | 	if (text)
           595 | 		for ( et * etp = (et *) text;etp->ett;etp++)
           596 | 			if ( strcmp(hid,etp->cid) == 0 )
           597 | 				return *(etp->ett);
           598 | 	return 0;
           599 | 	ü
           600 |
           601 | selection* ExternalTEXT::SelectionText(char * hid)
           602 | 	ä
           603 | 	if (text)
           604 | 		for ( et * etp = (et *) text;etp->ett;etp++)
           605 | 			if ( strcmp(hid,etp->cid) == 0 )
           606 | 				return (selection *)(etp->ett);
           607 | 	return 0;
           608 | 	ü
           609 |
           610 | entry * ExternalTEXT::EntryText(char * hid)
           611 | 	ä
           612 | 	if (text)
           613 | 		for ( et * etp = (et *) text;etp->ett;etp++)
           614 | 			if ( strcmp(hid,etp->cid) == 0 )
           615 | 				return (entry *)(etp->ett);
           616 | 	return 0;
           617 | 	ü
           618 |
           619 | 	ü //namespace isis_ns_mvs
0                                   * * * * *   E N D   O F   S O U R C E   * * * * *
-

15694A01 V1.12 z/OS XL C++               //'ESA.PRJ.CBTHSM.CPP(MSGMGR)'                      20.12.12 18:51:58
0                                    * * * * *   I N C L U D E S   * * * * *
     1  =  //'ESA.PRJ.CBTHSM.HPP(ISISDEF)'
     2  =  //'CEE.SCEEH.H(STDLIB)'
     3  =  //'CEE.SCEEH.H(FEATURES)'
     4  =  //'CEE.SCEEH.H(BUILTINS)'
     5  =  //'CEE.SCEEH.H(STDDEF)'
     6  =  //'CEE.SCEEH.H(STRING)'
     7  =  //'CEE.SCEEH.H(STRINGS)'
     8  =  //'CEE.SCEEH.SYS.H(TYPES)'
     9  =  //'ESA.PRJ.CBTHSM.HPP(MVSBASE)'
    10  =  //'ESA.PRJ.CBTHSM.HPP(MERROR)'
    11  =  //'ESA.PRJ.CBTHSM.HPP(DSNAMEUT)'
    12  =  //'CEE.SCEEH.H(ASSERT)'
    13  =  //'CEE.SCEEH.H(STDIO)'
    14  =  //'ESA.PRJ.CBTHSM.HPP(CASMIF)'
    15  =  //'ESA.PRJ.CBTHSM.HPP(ASMIF)'
    16  =  //'ESA.PRJ.CBTHSM.HPP(MISC)'
    17  =  //'CEE.SCEEH.H(TIME)'
    18  =  //'ESA.PRJ.CBTHSM.HPP(MSGMGR)'
    19  =  //'CEE.SCEEH.H(DLL)'
    20  =  //'CEE.SCEEH.H(STDARG)'
    21  =  //'ESA.PRJ.CBTHSM.HPP(MSGTEXT)'
-                                 * * * * *   E N D   O F   I N C L U D E S   * * * * *
0
15694A01 V1.12 z/OS XL C++               //'ESA.PRJ.CBTHSM.CPP(MSGMGR)'                      20.12.12 18:51:58
-                           * * * * *   M E S S A G E   S U M M A R Y   * * * * *
0TOTAL   UNRECOVERABLE  SEVERE       ERROR     WARNING    INFORMATIONAL
                (U)       (S)         (E)        (W)          (I)
     0           0         0           0          0            0
0                    * * * * *   E N D   O F   M E S S A G E   S U M M A R Y   * * * * *
0                        * * * * *   E N D   O F   C O M P I L A T I O N   * * * * *
