
15694A01 V1.12 z/OS XL C++              //'ESA.PRJ.CBTHSM.CPP(MVSHSMX)'                      20.12.12 18:52:39
0                                      * * * * *   P R O L O G   * * * * *
    Compiler options. . . . . . . :AGGRCOPY(NOOVERLAP)             ANSIALIAS       ARCH(7)         ARGPARSE        NOASCII
                                  :NOATTRIBUTE     ASSERT(RESTRICT)                BITFIELD(UNSIGNED)              CHARS(UNSIGNED)
                                  :NOCOMPACT       NOCOMPRESS      CVFT            NODFP           DIGRAPH         DLL(CALLBACKANY)
                                  :ENUMSIZE(SMALL) NOEVENTS        EXECOPS         EXH             NOEXPMAC        NOEXPORTALL
                                  :NOFASTTEMPINC   FLAG(I)         NOGOFF          GONUMBER        HALT(16)
                                  :NOHGPR(NOPRESERVE)              NOHOT           NOIGNERRNO      ILP32           NOINITAUTO
                                  :NOINLRPT        NOLIBANSI       NOLIST          LONGNAME        NOMAKEDEP       NOMARGINS
                                  :MAXMEM(2097152) MEMORY          NAMEMANGLING(zOSV1R2)           NESTINC(255)    OBJECT
                                  :OBJECTMODEL(COMPAT)             NOOE            NOOFFSET        OPTIMIZE(2)     PLIST(OS)
                                  :NOPORT          NOPPONLY        PREFETCH        REDIR           NOREPORT        ROSTRING
                                  :ROCONST         RTTI(ALL)       NOSEQUENCE      NOSHOWINC       NOSHOWMACROS    SOURCE
                                  :SKIPSRC(SHOW)   SPILL(3600)     START           NOSTATICINLINE  STRICT
                                  :NOSTRICT_INDUCTION              TARGET(LE,CURRENT)              NOTEMPLATEREGISTRY
                                  :TEMPLATERECOMPILE               TERMINAL        TEST(HOOK)      TMPLPARSE(NO)   TUNE(7)
                                  :UNROLL(AUTO)    UTF             NOWARN0X        NOWARN64        NOWSIZEOF       NOXREF
                                  :NOCICS
                                  :NOCONVLIT
                                  :NOCSECT
                                  :DEBUG(FORMAT(ISD),LEVEL(0),HOOK(NOLINE,NOBLOCK,NOPATH,CALL,FUNC),NOSYMBOL)
                                  :DEFINE(__OS390__=1,_POSIX_SOURCE=1,_XOPEN_SOURCE_EXTENDED=1,MU_STANDALONE=1,ISIS_PF_MU=1)
                                  :FLOAT(HEX,FOLD,AFP(NOVOLATILE)) ROUND(Z)
                                  :NOHALTONMSG
                                  :INFO(LAN)
                                  :INLINE(AUTO,NOREPORT,100,1000)
                                  :NOIPA
                                  :KEYWORD(bool,explicit,export,false,mutable,namespace,true,typename,using,restrict,__restrict__,
                                   __restrict,_Pragma,__alignof__,__asm__,__attribute__,__const__,__extension__,__volatile__,
                                   __inline__,__signed__,__typeof__)
                                  :NOKEYWORD(char16_t,char32_t,static_assert,typeof)
                                  :LANGLVL(ANONSTRUCT,ANONUNION,ANSIFOR,ANSISINIT,NOAUTOTYPEDEDUCTION,C99VLA,C99__FUNC__,
                                   NOC99LONGLONG,NOC99PREPROCESSOR,NODBCS,NODECLTYPE,NODELEGATINGCTORS,DEPENDENTBASELOOKUP,
                                   NODOLLARINNAMES,EMPTYSTRUCT,NOEXTENDEDFRIEND,NOEXTENDEDINTEGERSAFE,EXTERNTEMPLATE,ILLPTOM,
                                   IMPLICITINT,NOINLINENAMESPACE,LIBEXT,LONGLONG,NONEWEXCP,OFFSETNONPOD,NOOLDDIGRAPH,OLDFRIEND,
                                   NOOLDMATH,NOOLDSTR,OLDTEMPACC,NOOLDTMPLALIGN,OLDTMPLSPEC,NOSTATIC_ASSERT,TRAILENUM,TYPEDEFCLASS,
                                   NOUCS,VARARGMACROS,NOVARIADICTEMPLATES,GNU_INCLUDE_NEXT,ZEROEXTARRAY)
                                  :LOCALE(DE_DE.IBM-273)
                                  :NOLSEARCH
                                  :OPTFILE(DD:OPTFILE)
                                  :NORTCHECK
                                  :SEARCH(//'CEE.SCEEH.+', //'CBC.SCLBH.+', CEE.SCEEH.+, CBC.SCLBH.+, DD:USERLIB)
                                  :NOSERVICE
                                  :NOSQL
                                  :NOSUPPRESS
                                  :TEMPINC(./tempinc)
                                  :NOXPLINK(NOBACKCHAIN,NOCALLBACK,GUARD,OSCALL(UPSTACK),NOSTOREARGS)
    Version Macros. . . . . . . . : __COMPILER_VER__=0x410C0000
                                  : __LIBREL__=0x410C0000
                                  : __TARGET_LIB__=0x410C0000
    Source margins. . . . . . . . :
      Varying length. . . . . . . : 1 - 32760
      Fixed length. . . . . . . . : 1 - 32760
    Sequence columns. . . . . . . :
      Varying length. . . . . . . : none
      Fixed length. . . . . . . . : none
    Locale name . . . . . . . . . : DE_DE.IBM-273
    Code set. . . . . . . . . . . : IBM-273
    Listing name. . . . . . . . . : DD:SYSCPRT
0                                 * * * * *   E N D   O F   P R O L O G   * * * * *
-
15694A01 V1.12 z/OS XL C++              //'ESA.PRJ.CBTHSM.CPP(MVSHSMX)'                      20.12.12 18:52:39
-
                                       * * * * *   S O U R C E   * * * * *
0            1 | #pragma runopts(PLIST(OS))
             2 | //#pragma runopts(PLIST(OS),POSIX(ON))
             3 |
             4 | #include "isisdef.h"
             5 | #include "versinfo.h"
             6 |
             7 | #include <stdlib.h>
             8 | #include <stdio.h>
             9 | #include <unistd.h>
            10 | #include <dynit.h>
            11 | #include <fcntl.h>
            12 | #include <assert.h>
            13 | #include <ctype.h>
            14 | #include <sys/types.h>
            15 | #include <sys/stat.h>
            16 | #include <strings.h>
            17 | #include <string.h>
            18 | #include <errno.h>
            19 | #define _ISOC99_SOURCE 1
            20 | #include <math.h>
            21 | #define _OPEN_SYS_DIR_EXT
            22 | #include <dirent.h>
            23 |
            24 | #include "arcmck.hpp"
            25 | #include "arcmcd.hpp"
            26 | #include "f1dscb.hpp"
            27 | typedef struct dscb f1dscb;
            28 | typedef struct arcmcd * arcmcdP;
            29 | typedef struct arcmck * arcmckP;
            30 |
            31 | struct arcmdext
            32 | 	ä
            33 | 	f1dscb * dscb;
            34 | 	char * * volser;
            35 | 	void *   input;
            36 | 	int  *   rc;
            37 | 	ü;
            38 | typedef arcmdext * arcmdextP;
            39 |
            40 | struct arcmmext
            41 | 	ä
            42 | 	arcmcdP * mcdp;
            43 | 	int *  since;
            44 | 	int *  flags;
            45 | 	int *  rc;
            46 | 	ü;
            47 | typedef arcmmext * arcmmextP;
            48 |
            49 | #include "msgmgr.hpp"
            50 | #include "mvsbase.hpp"
            51 | #include "misc.hpp"
            52 | #include "casmif.hpp"
            53 | #include "jobenv.hpp"
            54 | #include "mchain.hpp"
            55 |
            56 | #define RECALL_EXIT			"ARCRSTR"
            57 | #define ML2SYNC_PROGRAM "ML2SYNC"
            58 | #define DSN_MIGRATION_EXIT	"ARCMDSN"
            59 | #define GEN_MIGRATION_EXIT  "ARCMGEN"
            60 | #define MAKESPACE_CALL  "MAKESPC"
            61 | #define MVSHSMX_MAJOR   "ISISARCX" //major name
            62 | static char buffÄ32768Ü;
            63 | static const char * ml2dirParm ="//DD:EXITPARM";
            64 | static bool  traceFlag = false;
            65 | struct _parm
            66 | 	ä
            67 | 	char * key;
            68 | 	char * value;
            69 | 	int    valueI;
            70 | 	ü;
            71 |
            72 | typedef struct _parm parm;
            73 | parm _parmsÄÜ = ä
            74 | 	ä"unit","3390"ü,
            75 | 	ä"ml2dir","/mntbin/linuxcompile/miklos/invalid"ü, //root -> ml2dir
            76 | 	ä"delta",NULL,1ü,
            77 | 	ä"lrecl",NULL,2048ü,
            78 | 	ä"blksize",NULL,18432ü,
            79 | 	ä"dynallocrc",NULL,0x448ü,
            80 | 	ä"logger",NULLü,
            81 | 	ä"devtype",NULL,0x20ü,
            82 | 	ä"ml2vol","RES279"ü,
            83 | 	ä"ml2mask","DFHSM.HMIG.**"ü,
            84 | 	ä"remove",NULL,0ü,                               //remove=0 -> remove=1
            85 | 	ä"trace",NULL,0ü,
            86 |   ä"mcds","//DD:MIGCAT"ü,
            87 | 	äNULLü
            88 | 	ü;
            89 |
            90 | enum parmEnum
            91 | 	ä
            92 | 	unit,
            93 | 	ml2dir,
            94 | 	delta,
            95 | 	lrecl,
            96 | 	blksize,
            97 | 	dynallocrc,
            98 | 	logger,
            99 | 	devtype,
           100 | 	ml2vol,
           101 | 	ml2mask,
           102 | 	okToRemove,
           103 |   trace,
           104 |   mcds
           105 | 	ü;
           106 |
           107 | class parms
           108 | 	ä
           109 | 	public:
           110 | 		parms()
           111 | 			ä
           112 | 			FILE * f = fopen(ml2dirParm,"r");
           113 | 			if (f==NULL)
           114 | 				ä
           115 | 				Msg(6001)<<ml2dirParm<<strerror(errno)<<eol;
           116 | 				exit(8);
           117 | 				ü
           118 | 			while(fgets(buff,1024,f))
           119 | 				ä
           120 | 				if (strchr(buff,'Ön'))
           121 | 					*strchr(buff,'Ön') = 0;
           122 | 				mvsSTRING record(buff), key, value;
           123 | 				record.parse(key,"=",value);
           124 | 				key.strip();
           125 | 				value.strip();
           126 | 				//Msg(6002)<<buff<<eol;
           127 | 				bool ok =false;
           128 | 				for(int i =0;|ok&&i<=int(trace);i++)
           129 | 					if (strcasecmp(_parmsÄiÜ.key,key)==0)
           130 | 						ä
           131 | 						_parmsÄiÜ.value  = strdup(value);
           132 | 						_parmsÄiÜ.valueI = atoi(value);
           133 | 						ok = true;
           134 | 						ü
           135 | 					if (|ok)
           136 | 						Msg(6003)<<key<<eol;
           137 | 				ü
           138 | 			fclose(f);
           139 | 			ü
           140 | 		char * operatorÄÜ(parmEnum e)
           141 | 			ä
           142 | 			return _parmsÄint(e)Ü.value;
           143 | 			ü
           144 | 		int operator()(parmEnum e)
           145 | 			ä
           146 | 			return _parmsÄint(e)Ü.valueI;
           147 | 			ü
           148 | 		ßparms()äü
           149 | 	ü;
           150 |
           151 | static int callDynalloc(__dyn_t * d)
           152 | 	ä
           153 | 	int rc = dynalloc(d);
           154 | 	if (traceFlag)
           155 | 		printf(" <After dynalloc> rc:%d %x %x, dsn:%s ddn:%sÖn",
           156 | 		rc,d->__errcode,
           157 | 		d->__infocode,
           158 | 		d->__dsname,
           159 | 		d->__ddname);
           160 | 	if (rc )
           161 | 		Msg(6004)<<d->__dsname<<rc<<tHEX(d->__errcode)<<tHEX(d->__infocode)<<eol;
           162 | 	return rc;
           163 | 	ü
           164 |
           165 | static int makespace(parms &);
           166 | static int ml2sync(parms &);
           167 | enum cleanUpAction
           168 | 	ä
           169 | 	Abort,
           170 | 	Exit8,
           171 | 	Exit0,
           172 | 	Return8,
           173 | 	Return0
           174 | 	ü;
           175 | static FILE * nullfile = 0;
           176 | static int cleanUp(cleanUpAction a,char * t,FILE * & f0 = nullfile,FILE * & f1 = nullfile,__dyn_t *
           176 | ip = NULL,char * enqMinor = NULL)
           177 | 	ä
           178 | 	if (f0)
           179 | 		ä
           180 | 		fclose(f0);
           181 | 		f0 = NULL;
           182 | 		ü
           183 | 	if (f1)
           184 | 		ä
           185 | 		fclose(f1);
           186 | 		f1 = NULL;
           187 | 		ü
           188 | 	if (ip)
           189 | 		dynfree(ip);
           190 | 	if (enqMinor)
           191 | 		DEQ(MVSHSMX_MAJOR,enqMinor,6,STEP,NONE);
           192 | 	switch(a)
           193 | 		ä
           194 | 		case Abort:
           195 | 			if (traceFlag)
           196 | 				printf(" <Abort> %sÖn",t);
           197 | 			abort();
           198 | 		case Exit8:
           199 | 			if (traceFlag)
           200 | 				printf(" <Exit8> %sÖn",t);
           201 | 			exit(8);
           202 | 		case Exit0:
           203 | 			if (traceFlag)
           204 | 				printf(" <Exit0> %sÖn",t);
           205 | 			exit(0);
           206 | 		case Return8:
           207 | 			if (traceFlag)
           208 | 				printf(" <Return8> %sÖn",t);
           209 | 			return 8;
           210 | 		case Return0:
           211 | 		default:
           212 | 			if (traceFlag)
           213 | 				printf(" <Return0> %sÖn",t);
           214 | 		ü
           215 | 	return 0;
           216 | 	ü
           217 |
           218 | int main()
           219 | 	ä
           220 |
           221 | 	const static char *version=ISIS_VERSION;
           222 | 	const static char *compileDate=ISIS_VERSION_DATE; // MW 20021104 __DATE__; //MF 20020419
           223 |
           224 | 	void * * R1 = __osplist;
           225 | 	jobEnv = new JOBENV("????????");
           226 | 	arcmcdP mcd = arcmcdP(*R1);
           227 | 	/*
           228 | 	if (|(memcmp((char *)jobEnv->programRb,RECALL_EXIT,7)==0&&(int(mcd->mcdflgs)&(mcdfmig+mcdml2)))
           229 | 	&&
           230 | 	memcmp((char *)jobEnv->programRb,MIGRATION_EXIT,7)) //migrate to ML2 and migvol devtype == x'20'
           231 | 	return 0;
           232 | 	*/
           233 | 	int rc = 0;
           234 | 	__dyn_t ip;
           235 |
           236 | 	setenv("_EDC_ADD_ERRNO2","1",1);
           237 | 	messagetext = new MessageTEXT();
           238 | 	char *program=(char *)jobEnv->programRb;
           239 | 	parms p;
           240 |
           241 | 	if (strlen(pÄloggerÜ))
           242 | 		messagetext->setOnlyLogger(pÄloggerÜ);
           243 | 	traceFlag=(p(trace)==1);
           244 | 	if (traceFlag)
           245 | 		printf(" <Program> program:%s programRb:%s %s  CompileDate:%s Version:%sÖn",
           246 | 		(char *)jobEnv->program,(char *)jobEnv->programRb,program,compileDate,version);
           247 | 	if (traceFlag)
           248 | 		printf(" <Logger>%sÖn",pÄloggerÜ);
           249 |
           250 | 	if (memcmp(program,DSN_MIGRATION_EXIT,7)==0]]memcmp(program,GEN_MIGRATION_EXIT,7)==0)
           251 | 		ä
           252 | 		makespace(p);
           253 | 		arcmdextP md = (arcmdextP)R1;
           254 | 		if (traceFlag)
           255 | 			printf("<ARCMxEXT> %44.44s %c Ön",(char *)(md->dscb->ds1dsnam),(char)md->dscb->ds1fmtid);
           256 |
           257 | 		if ((char)md->dscb->ds1fmtid == '1') //  it is an f1dscb , so we are in MD exit
           258 | 			ä
           259 | 			if (strchr((char *)md->dscb->ds1dsnam,' '))
           260 | 				*strchr((char *)md->dscb->ds1dsnam,' ')= 0;
           261 | 			md->dscb->ds1volsqÄ0Ü = 0;
           262 | 			Msg(6029)<<(char *)(md->dscb->ds1dsnam)<<(char *)(md->dscb->ds1dssn)<<eol;
           263 | 			*(md->rc)=0;
           264 | 			ü
           265 | 		else
           266 | 			ä
           267 | 			arcmmextP mm = (arcmmextP)R1;
           268 | 			if (traceFlag)
           269 | 				printf("<ARCMMEXT> %44.44s %44.44s %d %xÖn",(char *)((*(mm->mcdp))->mck),(char *)((*(mm->mcdp))-
           269 | >mcdmcanm),*(mm->since),*(mm->flags));
           270 |
           271 | 			if (strchr((char *)((*(mm->mcdp))->mck),' '))
           272 | 				* strchr((char *)((*(mm->mcdp))->mck),' ') = 0;
           273 | 			if (strchr((char *)((*(mm->mcdp))->mcdmcanm),' '))
           274 | 				*	strchr((char *)((*(mm->mcdp))->mcdmcanm),' ') = 0;
           275 | 			Msg(6031)<<	(char *)((*(mm->mcdp))->mck)<<(char *)((*(mm->mcdp))->mcdmcanm)<<*(mm->since)<<eol;
           276 | 			*(mm->rc) = 0;
           277 | 			ü
           278 | 		ü
           279 | 	else
           280 | 		if (memcmp(program,MAKESPACE_CALL,7)==0)
           281 | 			ä
           282 | 			makespace(p);
           283 | 			ü
           284 | 		else
           285 | 			if (memcmp(program,RECALL_EXIT,7)==0)
           286 | 				ä
           287 | 				if (traceFlag)
           288 | 					printf(" <Flags> %x %xÖn",mcd->mcdflgs,mcd->mcdflag3);
           289 | 				if (int(mcd->mcdflgs)&(mcdfmig+mcdml2) &&
           290 | 					mcd->mcdflag3==p(devtype)) //migrate to ML2 and migvol devtype == x'20'
           291 | 					ä
           292 | 					Msg(6030)<<(char *)mcd->mck<<eol;
           293 | 					//makespace(p); commented out for RECALL
           294 | 					dyninit(&ip);
           295 | 					char pathÄ1024Ü;
           296 | 					sprintf(path,"%s/%44.44s",pÄml2dirÜ,mcd->mcdmcanm);
           297 | 					if (strchr(path,' '))
           298 | 						*strchr(path,' ') = 0;
           299 | 					if (traceFlag)
           300 | 						printf(" <Using path> Path:%sÖn",path);
           301 |
           302 | 					struct stat info;
           303 | 					if (stat(path, &info) == 0)
           304 | 						ä
           305 | 						int size2k = info.st_size/2048;
           306 | 						if (abs(size2k-mcd->mcdcsz)<=p(delta))
           307 | 							ä
           308 | 							FILE * input = fopen(path,"rb,noseek");
           309 | 							if (input==NULL)
           310 | 								cleanUp(Exit8,Msg(6006)<<path<<strerror(errno)<<eol);
           311 | 							dyninit(&ip);
           312 |
           313 | 							char  ddnameÄ9Ü = "????????";
           314 | 							ip.__ddname = ddname;
           315 | 							ip.__dsname = (char *)mcd->mcdmcanm;
           316 | 							ip.__unit = pÄunitÜ;
           317 | 							ip.__volser = (char *)mcd->mcdvsn;
           318 | 							ip.__status=__DISP_NEW;
           319 | 							ip.__normdisp=__DISP_KEEP;
           320 | 							ip.__recfm=_FBS_;
           321 | 							ip.__lrecl=p(lrecl);
           322 | 							ip.__blksize=p(blksize);
           323 | 							ip.__avgblk = ip.__blksize;
           324 | 							ip.__primary = mcd->mcdcsz/(ip.__blksize/ip.__lrecl)+1;
           325 | 							ip.__secondary = ip.__primary;
           326 |
           327 | 							int count2k = 0;
           328 | 							if (callDynalloc(&ip)==0)
           329 | 								ä
           330 | 								char ddÄ18Ü;
           331 | 								sprintf(dd,"//DD:%8.8s",ddname);
           332 | 								char modeÄ128Ü;
           333 | 								sprintf(mode,"wb,recfm=fbs,lrecl=%d,blksize=%d,noseek",p(lrecl),p(blksize));
           334 | 								if (traceFlag)
           335 | 									printf(" <Before open>%s %s Ön",dd,mode);
           336 | 								FILE * output = fopen(dd,mode);
           337 | 								if (output==NULL)
           338 | 									cleanUp(Return8,Msg(6006)<<ddname<<strerror(errno)<<eol,input,nullfile,&ip);
           339 |
           340 | 								int recl    = p(lrecl);
           341 | 								memset(buff,0,recl);
           342 | 								rc = fread(buff,1,recl,input);
           343 | 								if (rc<=0)
           344 | 									cleanUp(Return8,Msg(6011)<<path<<rc<<strerror(errno)<<eol,input,output,&ip);
           345 | 								else
           346 | 									ä
           347 | 									doä
           348 | 										rc = fwrite(buff,1,rc,output);
           349 | 										memset(buff,0,recl);
           350 | 										count2k++;
           351 | 										ü
           352 | 								while
           353 | 									((rc=fread(buff,1,recl,input))>0);
           354 | 									ü
           355 | 								fclose(input);
           356 | 								fclose(output);
           357 | 								dynfree(&ip);
           358 | 								if (p(okToRemove))
           359 | 									ä
           360 | 									if (traceFlag)
           361 | 										printf(" <Remove> remove %sÖn",path);
           362 | 									if (remove(path))
           363 | 										Msg(6026)<<path<<strerror(errno)<<eol;
           364 | 									else
           365 | 										Msg(6027)<<path<<eol;
           366 | 									ü
           367 | 								ü
           368 | 							else
           369 | 								ä
           370 | 								if (ip.__errcode==p(dynallocrc))
           371 | 									cleanUp(Return0,Msg(6005)<<(char *)mcd->mck<<(char *)mcd->mcdmcanm<<(char *)mcd->mcdvsn<<eo
           371 | l);
           372 | 								else
           373 | 									return 8;
           374 | 								ü
           375 |
           376 |
           377 | 							if(count2k-mcd->mcdcsz)
           378 | 								Msg(6007)<<count2k<<mcd->mcdcsz<<eol;
           379 | 							else
           380 | 								Msg(6008)<<(char *)mcd->mck<<(char *)mcd->mcdmcanm<<(char *)mcd->mcdvsn<<mcd->mcdcsz<<eol;
           381 | 							ü
           382 | 						else
           383 | 							Msg(6009)<<mcd->mcdmcanm<<mcd->mcdcsz<<size2k<<eol;
           384 | 						ü
           385 | 					else
           386 | 						cleanUp(Return8,Msg(6010)<<path<<strerror(errno)<<eol);
           387 | 					ü
           388 | 				ü
           389 |       else
           390 |         if (memcmp(program,ML2SYNC_PROGRAM,7)==0)
           391 |           return(ml2sync(p));
           392 | 			return 0;
           393 | 	ü
           394 |
           395 | static int makespace(parms & p)
           396 | 	ä
           397 | 	mvsSTRING v(pÄml2volÜ), vol;
           398 | 	v.parse(vol,",",v);
           399 |
           400 | 	while(strlen(vol))
           401 | 		ä
           402 | 		if (strlen(vol)-6)
           403 | 			return(cleanUp(Return8,Msg(6020)<<v<<eol));
           404 |
           405 | 		if (traceFlag)
           406 | 			printf(" <makespace> volume %s Ön",(char *)vol);
           407 | 		int enqRc = ENQ(MVSHSMX_MAJOR ,vol,E,6,STEP,NONE);
           408 | 		if (enqRc == 0)
           409 | 		ä
           410 | 		if (traceFlag)
           411 | 			printf(" <makespace> ENQ %sÖn",(char *)vol);
           412 | 		__dyn_t ip;
           413 | 		dyninit(&ip);
           414 | 		char vtocixÄ128Ü;
           415 | 		sprintf(vtocix,"SYS1.VTOCIX.%6.6s",(char *)vol);
           416 | 		char  ddnameÄ9Ü = "????????";
           417 | 		ip.__ddname = ddname;
           418 | 		ip.__unit = pÄunitÜ;
           419 | 		ip.__volser = (char *)vol;
           420 | 		ip.__status=__DISP_SHR;
           421 | 		ip.__normdisp=__DISP_KEEP;
           422 | 		ip.__dsname = vtocix;
           423 |
           424 | 		if (callDynalloc(&ip))
           425 | 			Msg(6021)<<(char *)vol<<eol;
           426 | 		else
           427 | 			ä
           428 | 			f1dscb mydscb;
           429 | 			memset(&mydscb,0,sizeof(f1dscb));
           430 | 			int vtocrc = mvs()->VtocOpen(ddname,pÄml2maskÜ,(char *)&mydscb);
           431 | 			if (vtocrc<=4) //szm20051220 loop at DELETE error
           432 |       do
           433 | 				ä
           434 | 				if (strchr((char *)mydscb.ds1dsnam,' '))
           435 | 					*strchr((char *)mydscb.ds1dsnam,' ')= 0;
           436 | 				mydscb.ds1volsqÄ0Ü = 0;
           437 | 				if (traceFlag)
           438 | 					printf(" <makespace> selected %sÖn",mydscb.ds1dsnam);
           439 | 				if (memcmp((char *)vol,mydscb.ds1dssn,6))
           440 | 					ä
           441 | 					if(vtocrc==0)
           442 | 						ä
           443 | 						cleanUp(Return8,Msg(6022)<<mydscb.ds1dssn<<(char *)vol<<mydscb.ds1dssn<<eol,nullfile,nullfile,
           443 | NULL);
           444 | 						break;
           445 | 						ü
           446 | 					else
           447 | 						ä
           448 | 						cleanUp(Return0,Msg(6028)<<pÄml2maskÜ<<(char *)vol<<eol,nullfile,nullfile,NULL);
           449 | 						break;
           450 | 						ü
           451 | 					ü
           452 | 				__dyn_t ip;
           453 | 				dyninit(&ip);
           454 | 				char  ddnameÄ9Ü = "????????";
           455 | 				ip.__ddname = ddname;
           456 | 				ip.__dsname = (char *)mydscb.ds1dsnam;
           457 | 				ip.__unit = pÄunitÜ;
           458 | 				ip.__volser = (char *)vol;
           459 | 				ip.__status=__DISP_OLD; //__DISP_SHR
           460 | 				ip.__normdisp=__DISP_KEEP;
           461 | 				if (callDynalloc(&ip))
           462 | 					Msg(6023)<<(char *)mydscb.ds1dsnam<<(char *)vol<<eol;
           463 | 				else
           464 | 					ä
           465 | 					char ddÄ18Ü;
           466 | 					sprintf(dd,"//DD:%s",ddname);
           467 | 					FILE * output = NULL;
           468 | 					FILE * input = fopen(dd,"rb,noseek");
           469 | 					if (input==NULL)
           470 | 						ä
           471 | 						cleanUp(Return8,Msg(6006)<<ddname<<strerror(errno)<<eol,nullfile,nullfile,&ip);
           472 | 						break;
           473 | 						ü
           474 | 					if (traceFlag)
           475 | 						printf(" <makespace> input allocated to %s and opened as %sÖn",dd);
           476 | 					char pathÄ1024Ü;
           477 | 					sprintf(path,"%s/%s",pÄml2dirÜ,mydscb.ds1dsnam);
           478 | 					mode_t mode =  S_IRUSR ] S_IWUSR ] S_IXUSR ]
           479 | 						S_IRGRP ] S_IWGRP ] S_IXGRP ]
           480 | 						S_IROTH ] S_IWOTH ] S_IXOTH;
           481 | 					int flag = O_WRONLY+O_CREAT;
           482 | 					if (traceFlag)
           483 | 						printf(" <makespace> flag:%x mode:%xÖn",flag,mode);
           484 | 					int file = open(path,flag,mode);
           485 | 					if (file ==  -1)
           486 | 						ä
           487 | 						cleanUp(Return8,Msg(6006)<<path<<strerror(errno)<<eol,input,nullfile,&ip);
           488 | 						continue;
           489 | 						ü
           490 | 					if (traceFlag)
           491 | 						printf(" <makespace> file:%s Ön",file);
           492 |
           493 | 					//chmod(path,mode);
           494 | 					//file = open(path,flag,mode);
           495 | 					if ((output = fdopen(file,"wb,noseek")) == NULL)
           496 | 						ä
           497 | 						cleanUp(Return8,Msg(6006)<<path<<strerror(errno)<<eol,input,nullfile,&ip);
           498 | 						continue;
           499 | 						ü
           500 |
           501 | 					int count2k =0;
           502 | 					while(fread(buff,1,p(lrecl),input)==p(lrecl))
           503 | 						ä
           504 | 						if (fwrite(buff,1,p(lrecl),output)-p(lrecl))
           505 | 							ä
           506 | 							cleanUp(Return8,Msg(6024)<<path<<strerror(errno)<<eol,input,output,&ip);
           507 | 							break;
           508 | 							ü
           509 | 						else
           510 | 							count2k++;
           511 | 						ü
           512 | 					Msg(6025)<<(char *)mydscb.ds1dsnam<<path<<count2k<<eol;
           513 | 					fclose(input);
           514 | 					input = NULL;
           515 | 					fclose(output);
           516 | 					output = NULL;
           517 | 					if (p(okToRemove))
           518 | 						ä
           519 | 						if (traceFlag)
           520 | 							printf(" <makespace> remove %sÖn",dd);
           521 | 						if (remove(dd))
           522 | 							ä
           523 | 							cleanUp(Return8,Msg(6026)<<dd<<strerror(errno)<<eol,input,output,&ip);
           524 | 							//continue;
           525 | 							break; //szm20080205 abend after 2008:02:04 01:23:52 ARC6026E remove/delete error for //DD:SY
           525 | S09916
           526 | 							ü
           527 | 						else
           528 | 							Msg(6027)<<(char *)mydscb.ds1dsnam<<eol;
           529 | 						ü
           530 | 					dynfree(&ip);
           531 | 					ü
           532 | 				if (vtocrc==4)
           533 | 					break;
           534 | 				ü
           535 | 				while((vtocrc= mvs()->Vtoc((char *)&mydscb))<=4); //szm20051220 loop at DELETE error
           536 |
           537 | 			if (traceFlag)
           538 | 				printf(" <makespace> CloseVtoc %sÖn",vtocix);
           539 | 			mvs()->VtocClose();
           540 | 			dynfree(&ip);
           541 | 			ü
           542 | 		if (traceFlag)
           543 | 			printf(" <makespace> DEQ %sÖn",(char *)vol);
           544 | 		DEQ(MVSHSMX_MAJOR ,vol,6,STEP,NONE);
           545 | 		ü
           546 | 		else
           547 | 			Msg(6056)<<enqRc<<eol;
           548 | 		v.parse(vol,",",v);
           549 | 		ü
           550 | 	return 0;
           551 | 	ü
           552 |
           553 |
           554 | void print_amrc(char * fb=NULL)
           555 |   ä
           556 |   __amrc_type currErr = *__amrc;
           557 |   if (fb)
           558 |     ä
           559 |     sprintf(fb,"R15 value   = %d",currErr.__code.__feedback.__rc);
           560 |     fb+=strlen(fb);
           561 |     sprintf(fb,"Reason code = %d",currErr.__code.__feedback.__fdbk);
           562 |     fb+=strlen(fb);
           563 |     sprintf(fb,"RBA         = %d",currErr.__RBA);
           564 |     fb+=strlen(fb);
           565 |     sprintf(fb,"Last op     = %dÖn",currErr.__last_op);
           566 |     ü
           567 |   else
           568 |     ä
           569 |     printf("R15 value   = %d",currErr.__code.__feedback.__rc);
           570 |     printf("Reason code = %d",currErr.__code.__feedback.__fdbk);
           571 |     printf("RBA         = %d",currErr.__RBA);
           572 |     printf("Last op     = %dÖn",currErr.__last_op);
           573 |     ü
           574 |   return;
           575 |   ü
           576 |
           577 | fldata_t  * fattr(FILE *f)
           578 |   ä
           579 |   static char fnÄ1024Ü;
           580 |   static fldata_t ft;
           581 |   if (fldata(f,fn,&ft) == 0)
           582 |     return &ft;
           583 |   else
           584 |     print_amrc();
           585 |   return NULL;
           586 |   ü
           587 |
           588 |
           589 | static int ml2sync(parms & p)
           590 |   ä
           591 |   char * ml2prefix = "DFHSM.HMIG.";
           592 |   FILE * mcdsF = fopen(pÄmcdsÜ,"rb,type=record");
           593 |   fldata_t * fldataP = NULL;
           594 |   if (mcdsF==NULL]](fldataP=fattr(mcdsF))==NULL)
           595 |     return(cleanUp(Return8,Msg(6050)<<pÄmcdsÜ<<strerror(errno)<<eol));
           596 |   Msg(6052)<<fldataP->__dsname<<fldataP->__vsamRKP<<fldataP->__vsamkeylen<<eol;
           597 |   SORTEDmCHAIN mig;
           598 |   char bÄ32768Ü;
           599 |   arcmcdP mcdP = (arcmcdP)b;
           600 |   arcmckP mckP = (arcmckP)b;
           601 |   size_t len = 0;
           602 |   int count = 0;
           603 |   int dircount = 0;
           604 |   int removecount = 0;
           605 |   while((len=fread(b,1,32768,mcdsF))>0)
           606 |     ä
           607 |     //if (traceFlag)
           608 |     //  dump(stdout,"<mcds record>",b,sizeof(struct arcmcd));
           609 |     if (mckP->mcktype>0x40&&                      //dsn type
           610 |       mckP->mchtype==0x00&&                     //dataset entry type
           611 |       ((unsigned short)mcdP->mcdflgs&mcdfasn)&&  //valid migrated dataset
           612 |       ((unsigned short)mcdP->mcdflgs&&mcdml2))   //on ML2 volume
           613 |       ä
           614 |       if (strchr((char *)(mcdP->mcdmcanm),' '))
           615 |         *strchr((char *)(mcdP->mcdmcanm),' ') = 0;
           616 |       mig.add(new chainE((char *)mcdP->mcdmcanm));
           617 |       count++;
           618 |       if (traceFlag)
           619 |         printf("<mig entry>%s from:%44.44sÖn",mcdP->mcdmcanm,mcdP->mck);
           620 |       ü
           621 |     ü
           622 |   fclose(mcdsF);
           623 |   Msg(6051)<<count<<eol;
           624 |   Msg(6055)<<pÄml2dirÜ<<eol;
           625 |   struct stat info;
           626 |   if (stat(pÄml2dirÜ,&info)==NULL && S_ISDIR(info.st_mode))
           627 |     ä
           628 |
           629 |     DIR * dir = opendir(pÄml2dirÜ);
           630 |     if (dir)
           631 |       ä
           632 |       struct dirent * ent = NULL;
           633 |       while((ent=__readdir2(dir,&info)))
           634 |         ä
           635 |         dircount++;
           636 |         char fullNameÄ1024Ü;
           637 |         if (memcmp(ent->d_name,ml2prefix,strlen(ml2prefix)))
           638 |           continue;
           639 |         sprintf(fullName,"%s/%s",pÄml2dirÜ,ent->d_name);
           640 |         if (traceFlag)
           641 |           printf("<ML2 ent>%s full:%sÖn",ent->d_name,fullName);
           642 |         if (stat(fullName,&info)==NULL && S_ISREG(info.st_mode))
           643 |           ä
           644 |           if (mig.search(mvsSTRING(ent->d_name))==NULL)
           645 |             ä
           646 |             removecount++;
           647 |             if (traceFlag)
           648 |               printf(" <Remove> remove %s (as:%s)Ön",fullName,ent->d_name);
           649 |
           650 |             if (p(okToRemove))
           651 |               ä
           652 |               if (remove(fullName))
           653 |                 Msg(6026)<<fullName<<strerror(errno)<<eol;
           654 |               else
           655 |                 Msg(6027)<<fullName<<eol;
           656 |               ü
           657 |             ü
           658 |           ü
           659 |         ü
           660 |       ü
           661 |     else
           662 |       return(cleanUp(Return8,Msg(6053)<<pÄml2dirÜ<<strerror(errno)<<eol));
           663 |     ü
           664 |   else
           665 |     return(cleanUp(Return8,Msg(6053)<<pÄml2dirÜ<<strerror(errno)<<eol));
           666 |   Msg(6054)<<count<<dircount<<removecount<<eol;
           667 |   return 0;
           668 |   ü
           669 |
0                                   * * * * *   E N D   O F   S O U R C E   * * * * *
-

15694A01 V1.12 z/OS XL C++              //'ESA.PRJ.CBTHSM.CPP(MVSHSMX)'                      20.12.12 18:52:39
0                                    * * * * *   I N C L U D E S   * * * * *
     1  =  //'ESA.PRJ.CBTHSM.HPP(ISISDEF)'
     2  =  //'ESA.PRJ.CBTHSM.HPP(VERSINFO)'
     3  =  //'CEE.SCEEH.H(STDLIB)'
     4  =  //'CEE.SCEEH.H(FEATURES)'
     5  =  //'CEE.SCEEH.H(BUILTINS)'
     6  =  //'CEE.SCEEH.H(STDDEF)'
     7  =  //'CEE.SCEEH.H(STDIO)'
     8  =  //'CEE.SCEEH.SYS.H(TYPES)'
     9  =  //'CEE.SCEEH.H(UNISTD)'
    10  =  //'CEE.SCEEH.H(INTTYPES)'
    11  =  //'CEE.SCEEH.H(STDINT)'
    12  =  //'CEE.SCEEH.H(DYNIT)'
    13  =  //'CEE.SCEEH.H(FCNTL)'
    14  =  //'CEE.SCEEH.SYS.H(MODES)'
    15  =  //'CEE.SCEEH.H(ASSERT)'
    16  =  //'CEE.SCEEH.H(CTYPE)'
    17  =  //'CEE.SCEEH.SYS.H(STAT)'
    18  =  //'CEE.SCEEH.SYS.H(MNTENT)'
    19  =  //'CEE.SCEEH.SYS.H(STAT)'
    20  =  //'CEE.SCEEH.H(STRINGS)'
    21  =  //'CEE.SCEEH.H(STRING)'
    22  =  //'CEE.SCEEH.H(ERRNO)'
    23  =  //'CEE.SCEEH.H(MATH)'
    24  =  //'CEE.SCEEH.H(DIRENT)'
    25  =  //'ESA.PRJ.CBTHSM.HPP(ARCMCK)'
    26  =  //'ESA.PRJ.CBTHSM.HPP(ARCMCD)'
    27  =  //'ESA.PRJ.CBTHSM.HPP(F1DSCB)'
    28  =  //'ESA.PRJ.CBTHSM.HPP(MSGMGR)'
    29  =  //'ESA.PRJ.CBTHSM.HPP(MVSBASE)'
    30  =  //'ESA.PRJ.CBTHSM.HPP(MERROR)'
    31  =  //'ESA.PRJ.CBTHSM.HPP(DSNAMEUT)'
    32  =  //'CEE.SCEEH.H(ASSERT)'
    33  =  //'ESA.PRJ.CBTHSM.HPP(MISC)'
    34  =  //'CEE.SCEEH.H(TIME)'
    35  =  //'ESA.PRJ.CBTHSM.HPP(CASMIF)'
    36  =  //'ESA.PRJ.CBTHSM.HPP(ASMIF)'
    37  =  //'ESA.PRJ.CBTHSM.HPP(JOBENV)'
    38  =  //'ESA.PRJ.CBTHSM.HPP(MCHAIN)'
0"//'ESA.PRJ.CBTHSM.HPP(ARCMCD)'", line 7.12: CCN6451 (I) Using #pragma pack(1), the C++ compiler may generate a different class
 layout than the C compiler generates. Use #pragma pack(1:C_Compat) to get the C compiler's behavior.
-                                 * * * * *   E N D   O F   I N C L U D E S   * * * * *
0
15694A01 V1.12 z/OS XL C++              //'ESA.PRJ.CBTHSM.CPP(MVSHSMX)'                      20.12.12 18:52:39
-                           * * * * *   M E S S A G E   S U M M A R Y   * * * * *
0TOTAL   UNRECOVERABLE  SEVERE       ERROR     WARNING    INFORMATIONAL
                (U)       (S)         (E)        (W)          (I)
     1           0         0           0          0            1
0                    * * * * *   E N D   O F   M E S S A G E   S U M M A R Y   * * * * *
0                        * * * * *   E N D   O F   C O M P I L A T I O N   * * * * *
