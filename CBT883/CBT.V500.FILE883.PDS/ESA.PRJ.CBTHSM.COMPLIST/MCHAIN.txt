
15694A01 V1.12 z/OS XL C++               //'ESA.PRJ.CBTHSM.CPP(MCHAIN)'                      20.12.12 18:51:21
0                                      * * * * *   P R O L O G   * * * * *
    Compiler options. . . . . . . :AGGRCOPY(NOOVERLAP)             ANSIALIAS       ARCH(7)         ARGPARSE        NOASCII
                                  :NOATTRIBUTE     ASSERT(RESTRICT)                BITFIELD(UNSIGNED)              CHARS(UNSIGNED)
                                  :NOCOMPACT       NOCOMPRESS      CVFT            NODFP           DIGRAPH         DLL(CALLBACKANY)
                                  :ENUMSIZE(SMALL) NOEVENTS        EXECOPS         EXH             NOEXPMAC        NOEXPORTALL
                                  :NOFASTTEMPINC   FLAG(I)         NOGOFF          GONUMBER        HALT(16)
                                  :NOHGPR(NOPRESERVE)              NOHOT           NOIGNERRNO      ILP32           NOINITAUTO
                                  :NOINLRPT        NOLIBANSI       NOLIST          LONGNAME        NOMAKEDEP       NOMARGINS
                                  :MAXMEM(2097152) MEMORY          NAMEMANGLING(zOSV1R2)           NESTINC(255)    OBJECT
                                  :OBJECTMODEL(COMPAT)             NOOE            NOOFFSET        OPTIMIZE(2)     PLIST(HOST)
                                  :NOPORT          NOPPONLY        PREFETCH        REDIR           NOREPORT        ROSTRING
                                  :ROCONST         RTTI(ALL)       NOSEQUENCE      NOSHOWINC       NOSHOWMACROS    SOURCE
                                  :SKIPSRC(SHOW)   SPILL(3600)     START           NOSTATICINLINE  STRICT
                                  :NOSTRICT_INDUCTION              TARGET(LE,CURRENT)              NOTEMPLATEREGISTRY
                                  :TEMPLATERECOMPILE               TERMINAL        TEST(HOOK)      TMPLPARSE(NO)   TUNE(7)
                                  :UNROLL(AUTO)    UTF             NOWARN0X        NOWARN64        NOWSIZEOF       NOXREF
                                  :NOCICS
                                  :NOCONVLIT
                                  :NOCSECT
                                  :DEBUG(FORMAT(ISD),LEVEL(0),HOOK(NOLINE,NOBLOCK,NOPATH,CALL,FUNC),NOSYMBOL)
                                  :DEFINE(__OS390__=1,_POSIX_SOURCE=1,_XOPEN_SOURCE_EXTENDED=1,MU_STANDALONE=1,ISIS_PF_MU=1)
                                  :FLOAT(HEX,FOLD,AFP(NOVOLATILE)) ROUND(Z)
                                  :NOHALTONMSG
                                  :INFO(LAN)
                                  :INLINE(AUTO,NOREPORT,100,1000)
                                  :NOIPA
                                  :KEYWORD(bool,explicit,export,false,mutable,namespace,true,typename,using,restrict,__restrict__,
                                   __restrict,_Pragma,__alignof__,__asm__,__attribute__,__const__,__extension__,__volatile__,
                                   __inline__,__signed__,__typeof__)
                                  :NOKEYWORD(char16_t,char32_t,static_assert,typeof)
                                  :LANGLVL(ANONSTRUCT,ANONUNION,ANSIFOR,ANSISINIT,NOAUTOTYPEDEDUCTION,C99VLA,C99__FUNC__,
                                   NOC99LONGLONG,NOC99PREPROCESSOR,NODBCS,NODECLTYPE,NODELEGATINGCTORS,DEPENDENTBASELOOKUP,
                                   NODOLLARINNAMES,EMPTYSTRUCT,NOEXTENDEDFRIEND,NOEXTENDEDINTEGERSAFE,EXTERNTEMPLATE,ILLPTOM,
                                   IMPLICITINT,NOINLINENAMESPACE,LIBEXT,LONGLONG,NONEWEXCP,OFFSETNONPOD,NOOLDDIGRAPH,OLDFRIEND,
                                   NOOLDMATH,NOOLDSTR,OLDTEMPACC,NOOLDTMPLALIGN,OLDTMPLSPEC,NOSTATIC_ASSERT,TRAILENUM,TYPEDEFCLASS,
                                   NOUCS,VARARGMACROS,NOVARIADICTEMPLATES,GNU_INCLUDE_NEXT,ZEROEXTARRAY)
                                  :LOCALE(DE_DE.IBM-273)
                                  :NOLSEARCH
                                  :OPTFILE(DD:OPTFILE)
                                  :NORTCHECK
                                  :SEARCH(//'CEE.SCEEH.+', //'CBC.SCLBH.+', CEE.SCEEH.+, CBC.SCLBH.+, DD:USERLIB)
                                  :NOSERVICE
                                  :NOSQL
                                  :NOSUPPRESS
                                  :TEMPINC(./tempinc)
                                  :NOXPLINK(NOBACKCHAIN,NOCALLBACK,GUARD,OSCALL(UPSTACK),NOSTOREARGS)
    Version Macros. . . . . . . . : __COMPILER_VER__=0x410C0000
                                  : __LIBREL__=0x410C0000
                                  : __TARGET_LIB__=0x410C0000
    Source margins. . . . . . . . :
      Varying length. . . . . . . : 1 - 32760
      Fixed length. . . . . . . . : 1 - 32760
    Sequence columns. . . . . . . :
      Varying length. . . . . . . : none
      Fixed length. . . . . . . . : none
    Locale name . . . . . . . . . : DE_DE.IBM-273
    Code set. . . . . . . . . . . : IBM-273
    Listing name. . . . . . . . . : DD:SYSCPRT
0                                 * * * * *   E N D   O F   P R O L O G   * * * * *
-
15694A01 V1.12 z/OS XL C++               //'ESA.PRJ.CBTHSM.CPP(MCHAIN)'                      20.12.12 18:51:21
-
                                       * * * * *   S O U R C E   * * * * *
0            1 | /*******************************************************************************
             2 | * Copyright ISIS Papyrus Technologies Limited
             3 | *-------------------------------------------------------------------------------
             4 | * File:              $Source: /data/cvs/src/mvs/mchain.cpp,v $
             5 | *-------------------------------------------------------------------------------
             6 | * Description:
             7 | *   ???
             8 | *******************************************************************************/
             9 | #include "isisdef.h"
            10 | #include <stdlib.h>
            11 | #include <string.h>
            12 | #include <strings.h>
            13 | #include "mchain.hpp"
            14 | #ifdef OWN_STDIO
            15 | #include "stdio.hpp"
            16 | #else
            17 | #include <stdio.h>
            18 | #ifndef MU_STANDALONE
            19 | #include "xfile.hpp"
            20 | #endif
            21 | #endif
            22 |
            23 | /*--------------------------------------------------------------+
            24 | | mCHAIN global class                                       |
            25 | |                                                              |
            26 | |                                                              |
            27 | +--------------------------------------------------------------*/
            28 |
            29 | mCHAIN::ßmCHAIN()
            30 | ä
            31 | 	chainE * pa , * pp;
            32 | 	pa = first;
            33 | 	while ( pa )
            34 | 	ä
            35 | 		pp = pa;
            36 | 		pa = pa->next;
            37 | 		delete pp;
            38 | 	ü
            39 |
            40 | ü
            41 |
            42 | long int mCHAIN::add(chainE * nc,chainE * c,long int code )
            43 | ä
            44 | 	counter++;
            45 | 	if ( first == 0) first = last = nc ;
            46 | 	if ( c )
            47 | 	ä
            48 | 		if ( code < 0 )
            49 | 		ä
            50 | 			if ( first == c)
            51 | 			ä
            52 | 				first = nc ;
            53 | 				nc->prev = NULL;
            54 | 			ü
            55 | 			else
            56 | 				nc ->prev = c->prev ;
            57 | 			nc ->next = c ;
            58 | 			c->prev = nc ;
            59 | 			if ( nc->prev) nc->prev->next = nc ;
            60 | 		ü
            61 | 		else if ( code > 0)
            62 | 		ä
            63 | 			if ( last == c)
            64 | 			ä
            65 | 				last = nc ;
            66 | 				nc->next = NULL;
            67 | 			ü
            68 | 			else
            69 | 				nc->next = c ->next ;
            70 | 			nc->prev = c ;
            71 | 			c->next = nc ;
            72 | 			if ( nc->next) nc->next->prev = nc ;
            73 | 		ü
            74 | 		else
            75 | 		ä
            76 | 			delete ÄÜ c->chainEid ;
            77 | 			c->chainEidl = nc->chainEidl;
            78 | 			c ->chainEid = new charÄnc->chainEidl+1Ü ;
            79 | 			memcpy(c->chainEid,nc->chainEid,c->chainEidl+1) ;
            80 | 			counter --;
            81 | 		ü
            82 | 	ü
            83 | 	return counter ;
            84 | ü
            85 |
            86 | long int mCHAIN::del(chainE * c)
            87 | ä
            88 | 	if ( c == first ) first = c->next ;
            89 | 	if ( c == last ) last = c->prev ;
            90 |
            91 | 	if ( c->prev) c->prev->next = c->next ;
            92 | 	if ( c->next) c->next->prev = c->prev ;
            93 | 	return --counter ;
            94 | ü
            95 |
            96 | void mCHAIN::swap(chainE * a , chainE * b)
            97 | ä
            98 | 	if ( a->next NEQ b ]] b->prev NEQ a ]] a == 0 ]] b == 0)
            99 | 		return ;
           100 |
           101 | 	if ( first == a ) first = b ;
           102 |
           103 | 	if ( last == b) last = a ;
           104 |
           105 | 	if ( a->prev ) a->prev->next = b ;
           106 | 	if ( b->next ) b->next->prev = a ;
           107 |
           108 | 	b->prev = a->prev ;
           109 | 	a->next = b->next ;
           110 | 	b->next = a;
           111 | 	a->prev = b ;
           112 | ü
           113 |
           114 |
           115 | chainE* mCHAIN::goNext()
           116 | ä
           117 | 	if ( pgo )
           118 | 		pgo = pgo->next;
           119 | 	return pgo;
           120 |
           121 | ü
           122 |
           123 | chainE* mCHAIN::goPrev()
           124 | ä
           125 | 	if ( pgo)
           126 | 		pgo = pgo->prev;
           127 | 	return pgo;
           128 | ü
           129 | chainE* mCHAIN::goFirst()
           130 | ä
           131 | 	pgo = first;
           132 | 	return pgo;
           133 | ü
           134 | chainE* mCHAIN::goLast()
           135 | ä
           136 | 	pgo = last;
           137 | 	return pgo;
           138 | ü
           139 |
           140 | chainE* mCHAIN::go(int n)
           141 | ä
           142 | 	pgo = first;
           143 | 	while ((--n)>0 && pgo)
           144 | 	ä
           145 | 		pgo = pgo->next;
           146 | 	ü
           147 | 	return pgo;
           148 | ü
           149 |
           150 |
           151 |
           152 | chainE * mCHAIN::search(const char * id,size_t length)
           153 | ä
           154 | 	if (length==0)
           155 | 		length=strlen(id);
           156 | 	for( chainE * c = first ; c ; c = c->next)
           157 | 		if (id && length >= c->chainEidl && memcmp(id,c->chainEid,c->chainEidl) == 0) return c;
           158 | 	return 0;
           159 | ü
           160 |
           161 | chainE * mCHAIN::searchEQ(const char * id,size_t length)
           162 | ä
           163 | 	if (length==0)
           164 | 		length=strlen(id);
           165 | 	for( chainE * c = first ; c ; c = c->next)
           166 | 		if (id &&  strcmp(id,c->chainEid) == 0) return c;
           167 | 	return 0;
           168 | ü
           169 |
           170 | chainE * mCHAIN::search(const mvsSTRING & s)
           171 | ä
           172 | 	int sl = s.lengthOf();
           173 | 	for(chainE * c = first; c ; c = c->next)
           174 | 		if ( sl == c->chainEidl && memcmp((char*)s,c->chainEid,sl) == 0)
           175 | 			return c;
           176 | 	return 0;
           177 | ü
           178 |
           179 | void mCHAIN::sort(long int direction = 1)
           180 | ä
           181 | 	long int ind  = 1 ;
           182 | 	chainE   * a ;
           183 |
           184 | 	while(ind)
           185 | 	ä ind = 0;
           186 |
           187 | 	for(a = first ; a && a->next;)
           188 | 	ä
           189 |
           190 | 		if ( idcmp(a,a->next)*direction > 0)
           191 | 		ä ind = 1;
           192 | 		swap(a,a->next);ü
           193 | 		a = a->next ;
           194 | 	ü
           195 | 	ü
           196 | ü
           197 |
           198 | void mCHAIN::print_all_ids()
           199 | ä
           200 | 	CHAINITER iter(*this);
           201 | 	chainE * c ;
           202 | 	while ( (c = iter()) NEQ 0)
           203 | 		puts(c->chainEid);
           204 | ü
           205 |
           206 |
           207 | void mCHAIN::print()
           208 | ä
           209 | 	CHAINITER iter(*this);
           210 | 	chainE * c ;
           211 | 	while ( (c = iter()) NEQ 0)
           212 | 		c->print();
           213 | ü
           214 |
           215 | long int SORTEDmCHAIN::add(chainE *nc,chainE *,long int)
           216 | ä
           217 | 	if ( first == 0)äcounter = 1; first = last = nc ;ü
           218 | 	else
           219 | 	ä
           220 | 		int comp;
           221 | 		int h = counter;
           222 | 		int l = 1;
           223 | 		int m ;
           224 | 		chainE * a;
           225 | 		while (h>l)
           226 | 		ä
           227 | 			m = l+(h-l)/2;
           228 | 			a = go(m);
           229 | 			comp = idcmp(nc,a);
           230 | 			if ( comp > 0 )  l = m+1;
           231 | 			else if ( comp < 0 ) h= m-1;
           232 | 			else if ( comp == 0 )
           233 | 				return 0;
           234 | 			// return mCHAIN::add(nc,a,int(unique));
           235 | 		ü
           236 | 		a = go(l);
           237 | 		comp= idcmp(nc,a);
           238 | 		if ( comp )
           239 | 			return mCHAIN::add(nc,a,comp?comp:unique);
           240 | 		else return 0;
           241 |
           242 | 	ü
           243 | 	return counter;
           244 | ü
           245 |
           246 |
           247 | mHASH::mHASH(int h):mCHAIN()
           248 | ä
           249 | 	pi = 0;
           250 | 	hash	= h;
           251 | 	table =(chainE * *)malloc(h*sizeof(chainE *));
           252 | 	memset(table,0,h*sizeof(chainE *));
           253 | ü
           254 |
           255 | mHASH::ßmHASH()
           256 | ä
           257 | 	if (table)
           258 | 	ä
           259 | 		for(int i =0;i<hash;i++)
           260 | 			while(tableÄiÜ)
           261 | 			ä
           262 | 				pgo = tableÄiÜ;
           263 | 				tableÄiÜ= tableÄiÜ->next;
           264 | 				delete pgo;
           265 | 			ü
           266 | 			free(table);
           267 | 			table = NULL;
           268 | 	ü
           269 | ü
           270 |
           271 | long int mHASH::add(chainE * c)
           272 | ä
           273 | 	int i = hashCode(c)%hash;
           274 | 	if (tableÄiÜ)
           275 | 	ä
           276 | 		c->next=tableÄiÜ;
           277 | 		c->prev = NULL;
           278 | 		tableÄiÜ->prev=c;
           279 | 		tableÄiÜ = c;
           280 | 	ü
           281 | 	else
           282 | 		tableÄiÜ = c;
           283 | 	return i;
           284 | ü
           285 |
           286 | chainE * mHASH::search(chainE *c)
           287 | ä
           288 | 	int i = hashCode(c)%hash;
           289 | 	chainE *n = tableÄiÜ;
           290 | 	while(n)
           291 | 		if(idcmp(c,n)==0)
           292 | 			break;
           293 | 		else
           294 | 			n = n->next;
           295 | 	return n;
           296 | ü
           297 |
           298 | long int mHASH::del(chainE * c)
           299 | ä
           300 | 	int i = hashCode(c)%hash;
           301 | 	if (c->prev)
           302 | 		c->prev->next = c->next;
           303 | 	if (c->next)
           304 | 		c->next->prev= c->prev;
           305 | 	if (c==tableÄiÜ)
           306 | 	ä
           307 | 		if (tableÄiÜ = c->next)
           308 | 			tableÄiÜ->prev = NULL;
           309 | 	ü
           310 | 	return i;
           311 | ü
           312 |
           313 | chainE * mHASH::next()
           314 | ä
           315 | 	if (pgo)
           316 | 		pgo = pgo->next;
           317 | 	for(;pgo==NULL&&pi<hash;pi++)
           318 | 		pgo=tableÄpiÜ;
           319 | 	if(pgo==NULL)
           320 | 		pi = 0;
           321 | 	return pgo;
           322 | ü
           323 |
           324 | int idcmp(chainE * a, chainE * b)
           325 | ä
           326 | 	int comp;
           327 | 	if ( a == 0 && b == 0) return 0;
           328 | 	else if ( a == 0) return -1;
           329 | 	else if ( b == 0) return 1;
           330 |
           331 | 	if ( a->chainEidl == b->chainEidl)
           332 | 		return memcmp(a->chainEid,b->chainEid,a->chainEidl);
           333 | 	else
           334 | 		if ( a->chainEidl < b->chainEidl)
           335 | 		äcomp = memcmp(a->chainEid,b->chainEid,a->chainEidl); return comp?comp :-1;ü
           336 | 		comp = memcmp(a->chainEid,b->chainEid,b->chainEidl);
           337 | 		return comp ? comp : +1;
           338 | ü
0                                   * * * * *   E N D   O F   S O U R C E   * * * * *
-

15694A01 V1.12 z/OS XL C++               //'ESA.PRJ.CBTHSM.CPP(MCHAIN)'                      20.12.12 18:51:21
0                                    * * * * *   I N C L U D E S   * * * * *
     1  =  //'ESA.PRJ.CBTHSM.HPP(ISISDEF)'
     2  =  //'CEE.SCEEH.H(STDLIB)'
     3  =  //'CEE.SCEEH.H(FEATURES)'
     4  =  //'CEE.SCEEH.H(BUILTINS)'
     5  =  //'CEE.SCEEH.H(STDDEF)'
     6  =  //'CEE.SCEEH.H(STRING)'
     7  =  //'CEE.SCEEH.H(STRINGS)'
     8  =  //'CEE.SCEEH.SYS.H(TYPES)'
     9  =  //'ESA.PRJ.CBTHSM.HPP(MCHAIN)'
    10  =  //'ESA.PRJ.CBTHSM.HPP(MVSBASE)'
    11  =  //'ESA.PRJ.CBTHSM.HPP(MERROR)'
    12  =  //'ESA.PRJ.CBTHSM.HPP(DSNAMEUT)'
    13  =  //'CEE.SCEEH.H(ASSERT)'
    14  =  //'CEE.SCEEH.H(STDIO)'
-                                 * * * * *   E N D   O F   I N C L U D E S   * * * * *
0
15694A01 V1.12 z/OS XL C++               //'ESA.PRJ.CBTHSM.CPP(MCHAIN)'                      20.12.12 18:51:21
-                           * * * * *   M E S S A G E   S U M M A R Y   * * * * *
0TOTAL   UNRECOVERABLE  SEVERE       ERROR     WARNING    INFORMATIONAL
                (U)       (S)         (E)        (W)          (I)
     0           0         0           0          0            0
0                    * * * * *   E N D   O F   M E S S A G E   S U M M A R Y   * * * * *
0                        * * * * *   E N D   O F   C O M P I L A T I O N   * * * * *
