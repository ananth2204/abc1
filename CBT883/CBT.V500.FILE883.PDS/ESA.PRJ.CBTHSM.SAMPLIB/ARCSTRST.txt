//ARCSTRST JOB ,&SYSUID,NOTIFY=&SYSUID,
//    CLASS=A,MSGCLASS=X,MSGLEVEL=(1,1),
//    REGION=0M
//DEFOUT OUTPUT CLASS=X,JESDS=LOG
//VM     OUTPUT DEST=IBCRSSC1.MVSPRTSP,CLASS=C
//HSMSTEP1 EXEC PGM=IEBGENER
//*
//********************************************************************/
//* THESE SAMPLE DFSMSHSM PROGRAMS CREATE A PDS (esa.prj.cbthsm.cntl)*/
//* THAT CONTAINS THE FOLLOWING MEMBERS:                             */
//*                                                                  */
//* STARTER  - THE DFSMSHSM STARTER SET                              */
//* ARCCMD01 - SAMPLE ARCCMD MEMBER FOR ML2 TAPE PROCESSING          */
//* ARCCMD90 - SAMPLE ADDVOL COMMANDS FOR STARTER SET                */
//* ARCCMD91 - SAMPLE ADDVOL COMMANDS FOR ML2 TAPE PROCESSING        */
//* HSMHELP  - HELP TEXT FOR DFSMSHSM-AUTHORIZED COMMANDS            */
//* HSMLOG   - SAMPLE JOB TO PRINT THE LOG                           */
//* HSMEDIT  - SAMPLE JOB TO PRINT THE EDITLOG                       */
//* ALLOCBK1 - SAMPLE JOB TO ALLOCATE CDS BACKUP VERSION DATA SETS   */
//* ALLOSDSP - SAMPLE JOB TO ALLOCATE AN SDSP DATA SET               */
//* HSMPRESS - SAMPLE JOB TO REORGANIZE THE CONTROL DATA SETS        */
//*                                                             4@01D*/
//*                                                                  */
//* YOU CAN ESTABLISH AN OPERATING DFSMSHSM ON A SINGLE PROCESSOR    */
//* BY EDITING AND EXECUTING THE JOB CONTAINED IN THE MEMBER NAMED   */
//* STARTER. REFER TO THE DFSMSHSM IMPLEMENTATION AND CUSTOMIZATION  */
//* GUIDE - DFSMSHSM FOR INSTRUCTIONS ON USING THE DFSMSHSM STARTER  */
//* SET.                                                             */
//********************************************************************/
//*
//SYSPRINT DD SYSOUT=*
//SYSUT2   DD UNIT=SYSDA,
//            DSN=ESA.PRJ.CBTHSM.CNTL(STARTER),
//            DISP=(NEW,CATLG),
//            DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120),
//            SPACE=(CYL,(1,1,10))
//SYSIN    DD DUMMY
//SYSUT1   DD DATA,DLM='$$'
//HSMALLOC JOB ?JOBPARM
//*
//********************************************************************/
//* DFSMSHSM STARTER SET                                             */
//*                                                                  */
//* THIS JCL STREAM ESTABLISHES AN OPERATING DFSMSHSM ENVIRONMENT    */
//* FOR A NEW USER OF DFSMSHSM OPERATING IN AN SMS ENVIRONMENT, OR   */
//* FOR A USER WHO WANTS TO RUN THE FUNCTIONAL VERIFICATION          */
//* PROCEDURE (FVP) IN AN ENVIRONMENT THAT IS SEPARATE FROM THE      */
//* PRODUCTION ENVIRONMENT.  THE FVP IS FOUND IN ARCFVPST.           */
//*                                                                  */
//* EDIT THIS JCL FOR YOUR PROCESSING ENVIRONMENT.                   */
//*                                                                  */
//* YOU CAN DECREASE IMPLEMENTATION TIME BY MAKING GLOBAL CHANGES    */
//* TO THE FOLLOWING PARAMETERS.  YOU MAY HAVE TO MAKE OTHER CHANGES */
//* AS IDENTIFIED IN THE COMMENTS EMBEDDED IN THE JCL.               */
//*                                                                  */
//* IF YOU ALLOCATED SMS-MANAGED DATA SETS ON SPECIFIC VOLUMES,      */
//* ENSURE THAT YOU ASSOCIATE THOSE DATA SETS WITH THE GUARANTEED    */
//* SPACE ATTRIBUTE IN THEIR STORAGE CLASS DEFINITION.               */
//*                                                                  */
//* WE RECOMMEND THAT YOU DEFINE ALL DFSMSHSM DATA SETS WITH THE     */
//* GUARANTEED-SPACE ATTRIBUTE IN THEIR STORAGE CLASS DEFINITIONS.   */
//*                                                                  */
//* WE RECOMMENDED THAT YOU DEFINE ALL DFSMSHSM DATA SETS WITH THE   */
//* NO-MIGRATE AND NO-BACKUP ATTRIBUTES IN THEIR MANAGEMENT CLASS    */
//* DEFINITIONS.  YOU CAN PREVENT DFSMSHSM DATA SETS FROM MIGRATING  */
//* OR BEING BACKED UP BY ASSIGNING THEM TO THE DBSTNDRD MANAGEMENT  */
//* CLASS.                                                           */
//*                                                                  */
//* WE RECOMMEND THAT YOU DEFINE THE LOG AND JOURNAL DATA SETS WITH  */
//* A STORAGE CLASS DEFINITION FOR LOGGING OR FOR AUDIT TRAIL DATA   */
//* SETS BY DEFINING THEM WITH THE STORAGE CLASS DBLOG.              */
//*                                                                  */
//* WE RECOMMEND THAT YOU DEFINE THE DFSMSHSM CONTROL DATA SETS WITH */
//* A STORAGE CLASS DEFINITION THAT PROVIDES FAST RESPONSE BY        */
//* DEFINING THEM WITH THE STORAGE CLASS DBENHANC.                   */
//*                                                                  */
//* THE SMS CONSTRUCTS (STORAGE CLASSES, STORAGE GROUPS, MANAGEMENT  */
//* CLASSES, AND DATA CLASSES) ARE DISCUSSED IN THE STORAGE          */
//* ADMINISTRATION GUIDE FOR DFSMSDFP.                               */
//********************************************************************/
//*                                                                  */
//* CHANGE THE FOLLOWING PARAMETERS FOR YOUR PROCESSING ENVIRONMENT. */
//*                                                                  */
//********************************************************************/
//*  PARAMETER     PARAMETER DEFINITION
//*
//*  ?MCDSVOL   -  VOLUME SERIAL NUMBER OF THE MCDS VOLUME
//*  ?MCDSUNT   -  UNIT TYPE FOR MCDS VOLUME
//*  ?BCDSVOL   -  VOLUME SERIAL NUMBER OF THE BCDS VOLUME
//*  ?BCDSUNT   -  UNIT TYPE FOR BCDS VOLUME
//*  ?OCDSVOL   -  VOLUME SERIAL NUMBER OF THE OCDS VOLUME
//*  ?OCDSUNT   -  UNIT TYPE FOR OCDS VOLUME
//*  ?CDSSIZE   -  NUMBER OF CYLINDERS TO INITIALLY ALLOCATE FOR ANY
//*                CONTROL DATA SET
//*  ?JRNLVOL   -  VOLUME SERIAL NUMBER OF THE JOURNAL
//*  ?JRNLUNT   -  UNIT TYPE FOR JOURNAL VOLUME
//*  ?LOGVOL    -  VOLUME SERIAL NUMBER OF THE LOG VOLUME
//*  ?LOGUNIT   -  UNIT TYPE FOR LOG VOLUME
//*  ?TRACEVOL  -  VOLUME SERIAL NUMBER OF THE PROBLEM DETERMINATION
//*                AID VOLUME
//*  ?TRACEUNIT -  UNIT TYPE FOR THE PROBLEM DETERMINATION AID VOLUME
//*  ?UCATNAM   -  NAME OF THE USER CATALOG FOR THE DFSMSHSM DATA SETS.
//*  ?UCATVOL   -  VOLUME SERIAL NUMBER OF THE USER CATALOG VOLUME
//*  ?UCATUNT   -  UNIT TYPE FOR USER CATALOG VOLUME
//*  ?CTLAUTH   -  THE USER ID THAT CAN ISSUE DFSMSHSM AUTH COMMANDS
//*                (YOUR CONTROL-AUTHORIZED USER ID)
//*  ?UID       -  AUTHORIZED USER ID (1 - 7 CHARACTERS) FOR THE
//*                DFSMSHSM-STARTED PROCEDURE IN A NON-FACILITY CLASS
//*                ENVIRONMENT (SEE NOTE BELOW).  THIS IS THE
//*                HIGH-LEVEL QUALIFIER FOR DFSMSHSM DATA SETS.
//*  ?JESVER    -  THE JOB ENTRY SUBSYSTEM (JES); EITHER JES2 OR JES3
//*  ?JOBPARM   -  JOB CARD PARAMETERS
//*  ?SCLOGNM   -  STORAGE CLASS FOR DFSMSHSM LOG AND JOURNAL
//*  ?SCCDSNM   -  STORAGE CLASS NAME FOR DFSMSHSM CONTROL DATA SETS
//*  ?MCDFHSM   -  MANAGEMENT CLASS NAME FOR DFSMSHSM DATA SETS
//*  ?HOSTID    -  PROCESSING UNIT ID FOR THE PROBLEM DETERMINATION
//*                AID FACILITY AND FOR IDENTIFYING THE HOST TO
//*                DFSMSHSM
//*  ?PRIMARY   -  YES OR NO; DEFINES WHETHER OR NOT THE DFSMSHSM
//*                HOST PERFORMS AS A PRIMARY HOST
//*  ?NEW       -  EXTENSION OF CDS NAME FOR IMPORT (HSMPRESS)
//* (NOTE: UID AUTHORIZATION IS VALID IN A NON-FACILITY CLASS
//* ENVIRONMENT ONLY, OTHERWISE, FACILITY CLASS PROFILES WILL BE
//* USED FOR AUTHORIZATION CHECKING.)
//*******************************************************************/
//*
//IDCAMS EXEC PGM=IDCAMS
//*
//*******************************************************************/
//*  ENSURE THAT DFSMSHSM CONTROL DATA SETS, THE JOURNAL, AND ANY   */
//*  CONTROL DATA SET BACKUP COPIES ARE ON DIFFERENT VOLUMES FROM   */
//*  EACH OTHER.                                                    */
//*                                                                 */
//*  GIVE USERS WRITE ACCESS TO VSAM DATA SETS BY DEFINING VSAM     */
//*  DATA SETS WITH A SHAREOPTION OF (3 3).  IT IS THE USER'S       */
//*  RESPONSIBILITY TO PROTECT THE CONTROL DATA SETS AGAINST        */
//*  UNAUTHORIZED ACCESS.                                           */
//*                                                                 */
//*******************************************************************/
//*
//HSMMCDS  DD UNIT=?MCDSUNT,VOL=SER=?MCDSVOL,DISP=SHR
//HSMCAT   DD UNIT=?UCATUNT,DISP=SHR,VOL=SER=?UCATVOL
//*
//*******************************************************************/
//* REMOVE THE NEXT DD STATEMENT IF YOU DO NOT INTEND TO USE BACKUP */
//* AND DUMP.                                                       */
//*******************************************************************/
//*
//HSMBCDS  DD UNIT=?BCDSUNT,VOL=SER=?BCDSVOL,DISP=SHR
//*
//*******************************************************************/
//* REMOVE THE NEXT DD STATEMENT IF YOU DO NOT INTEND TO USE TAPE   */
//* VOLUMES FOR DAILY BACKUP VOLUMES, SPILL BACKUP VOLUMES, OR      */
//* MIGRATION LEVEL 2 VOLUMES.                                      */
//*******************************************************************/
//*
//HSMOCDS  DD UNIT=?OCDSUNT,VOL=SER=?OCDSVOL,DISP=SHR
//*
//SYSIN    DD *
 /*                                                                 */
 /*******************************************************************/
 /* THIS JOB ALLOCATES AN INTEGRATED CATALOG FACILITY (ICF) CATALOG */
 /* AND ITS ASSOCIATED ALIAS "?UID".                                */
 /*                                                                 */
 /*  ****** INTEGRATED CATALOG FACILITY CATALOG REQUIRED *******    */
 /*                                                                 */
 /* THIS JOB ALLOCATES A USER CATALOG FOR THE DFSMSHSM CONTROL DATA */
 /* SETS (CDS). SEE THE SECTION "DFSMSHSM DATA SETS" IN THE         */
 /* DFSMSHSM IMPLEMENTATION AND CUSTOMIZATION GUIDE.                */
 /*******************************************************************/
 /*                                                                 */
  DEFINE UCAT(NAME(?UCATNAM) -
         CYLINDERS(1 1) VOLUME(?UCATVOL) -
         FILE(HSMCAT) FREESPACE(10 10) -
         RECORDSIZE(4086 4086) -
         ICFCATALOG)
  IF MAXCC = 0 THEN DO
    DEFINE  ALIAS(NAME(?UID) RELATE(?UCATNAM))
  END
 /*                                                              */
 /****************************************************************/
 /*  THIS PROCEDURE ASSUMES A SINGLE CLUSTER MCDS.  IF MORE THAN */
 /*  ONE VOLUME IS DESIRED, FOLLOW THE RULES FOR A MULTICLUSTER  */
 /*  CDS.                                                        */
 /****************************************************************/
 /*                                                              */
 IF MAXCC = 0 THEN DO
   DEFINE CLUSTER (NAME(?UID.MCDS) VOLUMES(?MCDSVOL) -
        CYLINDERS(?CDSSIZE) FILE(HSMMCDS) -
        STORCLAS(?SCCDSNM) -
        MGMTCLAS(?MCDFHSM) -
        RECORDSIZE(435 2040) FREESPACE(0 0) -
        INDEXED KEYS(44 0) SHAREOPTIONS(3 3) -
        SPEED BUFFERSPACE(530432) -
        UNIQUE NOWRITECHECK) -
        DATA(NAME(?UID.MCDS.DATA) -
        CONTROLINTERVALSIZE(12288)) -
        INDEX(NAME(?UID.MCDS.INDEX) -
        CONTROLINTERVALSIZE(2048))
 END
 /*                                                              */
 /****************************************************************/
 /* REMOVE THE NEXT DEFINE COMMAND IF YOU DO NOT                 */
 /* INTEND TO USE BACKUP, DUMP OR AGGREGATE BACKUP AND RECOVERY. */
 /*                                                              */
 /* THIS PROCEDURE ASSUMES A SINGLE CLUSTER BCDS.  IF MORE THAN  */
 /* ONE VOLUME IS DESIRED, FOLLOW THE RULES FOR A MULTICLUSTER   */
 /* CDS.                                                         */
 /*                                                              */
 /* IT'S RECOMMENDED THAT YOU SHOULD SPECIFY RECORDSIZE(334 2093)*/
 /* AND CISIZE(12288) WHEN CREATING UP TO 29 BACKUP VERSIONS     */
 /* OR RECORDSIZE(334 6544) AND CISIZE(12288) IF UP TO           */
 /* 100 BACKUP VERSIONS WILL BE KEPT OR IF FAST REPLICATION IS   */
 /* BEING USED (FRBACKUP).                                       */
 /*                                                              */
 /****************************************************************/
 /*                                                              */
 IF MAXCC = 0 THEN DO
   DEFINE CLUSTER (NAME(?UID.BCDS) VOLUMES(?BCDSVOL) -
        CYLINDERS(?CDSSIZE) FILE(HSMBCDS) -
        STORCLAS(?SCCDSNM) -
        MGMTCLAS(?MCDFHSM) -
        RECORDSIZE(334 2093) FREESPACE(0 0) -
        INDEXED KEYS(44 0) SHAREOPTIONS(3 3) -
        SPEED BUFFERSPACE(530432) -
        UNIQUE NOWRITECHECK) -
        DATA(NAME(?UID.BCDS.DATA) -
        CONTROLINTERVALSIZE(12288)) -
        INDEX(NAME(?UID.BCDS.INDEX) -
        CONTROLINTERVALSIZE(2048))
 END
 /*
 /****************************************************************/
 /* REMOVE THE NEXT DEFINE COMMAND IF YOU DO NOT                 */
 /* INTEND TO USE TAPES FOR DAILY BACKUP, SPILL BACKUP, OR       */
 /* MIGRATION LEVEL 2 PROCESSING.                                */
 /*                                                              */
 /*                                                              */
 /* IT IS RECOMMENDED THAT YOU SPECIFY                           */
 /*   RECORDSIZE(1800 2040) WHEN NOT USING EXTENDED TTOCS AND    */
 /*   RECORDSIZE(1080 6144) WHEN USING EXTENDED TTOCS.           */
 /*                                                              */
 /* NOTE: YOU CAN ONLY USE EXTENDED TTOCS IF ALL OF YOUR         */
 /* DFSMSHSM HOSTS ARE AT Z/OS DFSMSHSM V1R7 OR LATER.           */
 /*                                                              */
 /* THE OCDS MAY NOT EXCEED 1 VOLUME.                            */
 /****************************************************************/
 /*
 IF MAXCC = 0 THEN DO
   DEFINE CLUSTER (NAME(?UID.OCDS) VOLUMES(?OCDSVOL) -
        CYLINDERS(?CDSSIZE) FILE(HSMOCDS) -
        STORCLAS(?SCCDSNM) -
        MGMTCLAS(?MCDFHSM) -
        RECORDSIZE(1800 2040) FREESPACE(0 0) -
        INDEXED KEYS(44 0) SHAREOPTIONS(3 3) -
        SPEED BUFFERSPACE(530432) -
        UNIQUE NOWRITECHECK) -
        DATA(NAME(?UID.OCDS.DATA) -
        CONTROLINTERVALSIZE(12288)) -
        INDEX(NAME(?UID.OCDS.INDEX) -
        CONTROLINTERVALSIZE(2048))
 END
//SYSPRINT DD SYSOUT=*
//*
//****************************************************************/
//*  ALLOCATE AND CATALOG THE DFSMSHSM LOG, EDIT LOG, AND JOURNAL*/
//*  ON AN "SMS" VOLUME.                                         */
//****************************************************************/
//*
//LOGALC   EXEC PGM=IEFBR14
//HSMLOGX  DD DSN=?UID.HSMLOGX1,DISP=(,CATLG),UNIT=?LOGUNIT,
//   VOL=SER=?LOGVOL,SPACE=(CYL,(3)),STORCLAS=?SCLOGNM,
//   MGMTCLAS=?MCDFHSM
//HSMLOGY  DD DSN=?UID.HSMLOGY1,DISP=(,CATLG),UNIT=?LOGUNIT,
//   VOL=SER=?LOGVOL,SPACE=(CYL,(3)),STORCLAS=?SCLOGNM,
//   MGMTCLAS=?MCDFHSM
//EDITLOG  DD DSN=?UID.EDITLOG,DISP=(,CATLG),UNIT=?LOGUNIT,
//   VOL=SER=?LOGVOL,SPACE=(CYL,(2)),STORCLAS=?SCLOGNM,
//   MGMTCLAS=?MCDFHSM
//*
//****************************************************************/
//*  THE JOURNAL MUST NOT EXCEED 1 VOLUME, MAY NOT HAVE          */
//*  SECONDARY ALLOCATION, AND MUST BE ALLOCATED CONTIGUOUS.     */
//****************************************************************/
//*
//JOURNAL DD DSN=?UID.JRNL,DISP=(,CATLG),UNIT=?JRNLUNT,
//   VOL=SER=?JRNLVOL,SPACE=(CYL,(5),,CONTIG),STORCLAS=?SCLOGNM,
//   MGMTCLAS=?MCDFHSM
//*
//****************************************************************/
//*  ALLOCATE THE PROBLEM DETERMINATION AID (PDA) LOG ON "SMS"   */
//*  OR ON 'NONSMS' VOLUME.  USE THE JCL BELOW FOR NONSMS        */
//*  OR ADJUST THE BELOW TO MATCH THE JCL ABOVE FOR THE LOG      */
//*  BY ADDING STORCLAS AND MGMTCLASS.                           */
//*  REMOVE THE NEXT TWO DD CARDS IF YOU DO NOT PLAN TO USE PDA. */
//****************************************************************/
//*
//ARCPDOX  DD DSN=?UID.HSMPDOX,DISP=(,CATLG),VOL=SER=?TRACEVOL,
//         UNIT=?TRACEUNIT,SPACE=(CYL,(20,2))
//ARCPDOY  DD DSN=?UID.HSMPDOY,DISP=(,CATLG),VOL=SER=?TRACEVOL,
//         UNIT=?TRACEUNIT,SPACE=(CYL,(20,2))
//HSMPROC  EXEC PGM=IEBUPDTE,PARM=NEW
//SYSPRINT DD SYSOUT=*
//SYSUT2   DD DSN=SYS1.PROCLIB,DISP=SHR
//SYSIN    DD DATA,DLM='$A'
./ ADD NAME=DFSMSHSM
//*
//*******************************************************************/
//*                    DFSMSHSM START PROCEDURE                     */
//*                                                                 */
//* YOU CAN DUPLICATE AND RENAME THE FOLLOWING PROCEDURE FOR OTHER  */
//* PROCESSORS IN A MULTIPLE-PROCESSING-UNIT ENVIRONMENT.           */
//* ENSURE THAT YOU CHANGE THE CMD= AND HOST= KEYWORDS              */
//* ENSURE THAT YOU CHANGE THE HIGH-LEVEL QUALIFIER FOR THE         */
//* ARCLOGX AND ARCLOGY DATA SET NAMES.                             */
//* KEYWORD DEFINITIONS:                                            */
//*    CMD=00                 SPECIFY WHICH PARMLIB COMMAND MEMBER  */
//*    STR=xx                 REPLACE xx WITH LAST TWO CHARACTERS   */
//*                           OF THE SYS1.PARMLIB(ARCSTRxx)         */
//*                           MEMBER THAT YOU CREATE PRIOR TO       */
//*                           STARTING DFSMSHSM                     */
//*    EMERG=YES|NO           START HSM IN EMERGENCY MODE           */
//*    SIZE=0M                REGION SIZE FOR DFSMSHSM              */
//*    LOGSW=YES|NO           SWITCH LOGS AT STARTUP                */
//*    STARTUP=YES|NO         STARTUP INFO PRINT AT STARTUP         */
//*    PDA=YES|NO             BEGIN PDA TRACING AT STARTUP          */
//*    HOST=X                 SPECIFY HOSTID                        */
//*    PRIMARY=YES|NO         SPECIFY PRIMARY HOST                  */
//*    HOSTMODE=MAIN|AUX      INDICATE IF THIS IS A MAIN OR AUX HOST*/
//*    DDD=50                 MAX DYNAMICALLY ALLOCATED DATASETS    */
//*    RNAMEDSN=YES|NO        USE EXTENDED RESOURCE NAMES           */
//*    CDSQ=YES|NO            SERIALIZE CDSs WITH GLOBAL ENQUEUES   */
//*    CDSR=YES|NO            SERIALIZE CDSs WITH VOLUME RESERVES   */
//*    CDSSHR=YES|NO|RLS      SPECIFY CDS SHARABILITY               */
//*    RESTART=(A,B)          RESTART DFSMSHSM AFTER ABEND          */
//*    CELLS=(200,100,100,50,20)  SIZES OF CELLPOOLS                */
//*    UID=HSM                DFSMSHSM-AUTHORIZED USER ID.  ALSO    */
//*                           USED FOR HLQ OF HSM DATASETS BUT NOT  */
//*                           REQUIRED.                             */
//*******************************************************************/
//* IF ALL OF THE DFSMSHSM STARTUP PROCEDURE KEYWORDS ARE NEEDED,   */
//* TOTAL LENGTH WILL EXCEED THE 100-BYTE LIMIT, IN WHICH CASE      */
//* YOU SHOULD USE THE KEYWORD STR=XX IN PARM= TO IDENTIFY THE      */
//* PARMLIB MEMBER CONTAINING THE ADDITIONAL KEYWORDS AND PARMS.    */
//*******************************************************************/
//DFSMSHSM   PROC CMD=00,     USE PARMLIB MEMBER ARCCMD00 FOR CMDS
//           STR=00,          PARMLIB MEMBER FOR STARTUP PARMS
//           EMERG=NO,        SETS HSM INTO NON-EMERGENCY MODE
//           CDSQ=YES,        CDSs SERIALIZED WITH ENQUEUES
//           PDA=YES,         PROBLEM DETERMINATION AID
//           SIZE=0M,         REGION SIZE FOR DFSMSHSM
//           DDD=50,          MAX DYNAMICALLY ALLOCATED DATASETS
//           HOST=?HOSTID,    PROC.UNIT ID AND LEVEL FUNCTIONS
//           PRIMARY=?PRIMARY LEVEL FUNCTIONS
//*******************************************************************/
//DFSMSHSM  EXEC PGM=ARCCTL,DYNAMNBR=&DDD,REGION=&SIZE,TIME=1440,
//          PARM=('EMERG=&EMERG','CMD=&CMD','CDSQ=&CDSQ',
//          'UID=?UID','PDA=&PDA','HOST=&HOST','STR=&STR',
//          'PRIMARY=&PRIMARY')
//*****************************************************************/
//*   HSMPARM DD must be deleted from the JCL or made into a      */
//*       a comment to use Concatenated Parmlib Support           */
//*****************************************************************/
//HSMPARM  DD DSN=SYS1.PARMLIB,DISP=SHR
//MSYSOUT  DD SYSOUT=A
//MSYSIN   DD DUMMY
//SYSPRINT DD SYSOUT=A,FREE=CLOSE
//SYSUDUMP DD SYSOUT=A
//*
//*****************************************************************/
//* THIS PROCEDURE ASSUMES A SINGLE CLUSTER MCDS.  IF MORE THAN   */
//* ONE VOLUME IS DESIRED, FOLLOW THE RULES FOR A MULTICLUSTER    */
//* CDS.                                                          */
//*****************************************************************/
//*
//MIGCAT   DD DSN=?UID.MCDS,DISP=SHR
//JOURNAL  DD DSN=?UID.JRNL,DISP=SHR
//ARCLOGX  DD DSN=?UID.HSMLOGX1,DISP=OLD
//ARCLOGY  DD DSN=?UID.HSMLOGY1,DISP=OLD
//ARCPDOX  DD DSN=?UID.HSMPDOX,DISP=OLD
//ARCPDOY  DD DSN=?UID.HSMPDOY,DISP=OLD
//*
//*****************************************************************/
//* REMOVE THE NEXT DD STATEMENT IF YOU DO NOT INTEND TO USE      */
//* BACKUP AND DUMP.                                              */
//*                                                               */
//* THIS PROCEDURE ASSUMES A SINGLE CLUSTER BCDS.  IF MORE THAN   */
//* ONE VOLUME IS DESIRED, FOLLOW THE RULES FOR A MULTICLUSTER    */
//* CDS.                                                          */
//*****************************************************************/
//*
//BAKCAT   DD DSN=?UID.BCDS,DISP=SHR
//*
//*****************************************************************/
//* REMOVE THE NEXT DD STATEMENT IF YOU DO NOT INTEND TO USE TAPES*/
//* FOR DAILY BACKUP, SPILL BACKUP OR MIGRATION LEVEL 2           */
//* PROCESSING.                                                   */
//*                                                               */
//* THE OCDS MAY NOT EXCEED 1 VOLUME.                             */
//*****************************************************************/
//*
//OFFCAT   DD DSN=?UID.OCDS,DISP=SHR
./ ADD NAME=DFHSMABR
//*
//*****************************************************************/
//*     ABARS SECONDARY ADDRESS SPACE STARTUP PROCEDURE           */
//*****************************************************************/
//*
//DFHSMABR PROC
//DFHSMABR EXEC PGM=ARCWCTL,REGION=0M
//SYSUDUMP DD SYSOUT=A
//MSYSIN DD DUMMY
//MSYSOUT DD SYSOUT=A
$A
//HSMPROC  EXEC PGM=IEBUPDTE,PARM=NEW
//SYSPRINT DD SYSOUT=*
//SYSUT2   DD DSN=SYS1.PARMLIB,DISP=SHR
//SYSIN    DD DATA,DLM='$A'
./ ADD NAME=ARCCMD00
 /*****************************************************************/
 /*              DFSMSHSM STARTUP COMMAND MEMBER                  */
 /*              WITH ONLY LEVEL 1 MIGRATION                      */
 /*****************************************************************/
 /*****************************************************************/
 /*             DFSMSHSM AUTOMATIC FUNCTIONS                      */
 /*                                                               */
 /* *********** AUTOBACKUPSTART,  AUTODUMPSTART, ******************/
 /* ********** AUTOMATIC PRIMARY SPACE MANAGEMENT, ****************/
 /* ********* AUTOMATIC SECONDARY SPACE MANAGEMENT. ***************/
 /*                                                               */
 /* THE AUTOMATIC DFSMSHSM FUNCTIONS SPECIFIED IN THE FOLLOWING   */
 /* SETSYS COMMANDS CONTAIN ZEROS FOR START, LATE START, AND      */
 /* TIMES. THUS, NO AUTOMATIC FUNCTIONS ARE ACTIVATED WHEN        */
 /* DFSMSHSM IS STARTED ON YOUR SYSTEM. TO ACTIVATE AUTOMATIC     */
 /* FUNCTIONS, CHANGES THE TIMES TO VALUES THAT ARE APPROPRIATE   */
 /* FOR YOUR SYSTEM.                                              */
 /*****************************************************************/
 /*****************************************************************/
 /*              DFSMSHSM SYSTEM SPECIFICATIONS                   */
 /*****************************************************************/
 /*                                                               */
 AUTH ?CTLAUTH               /* ESTABLISH THE USER ID THAT CAN    */ -
  DATABASEAUTHORITY(CONTROL) /* ISSUE AUTH COMMANDS.              */

 /*****************************************************************/
 /* NOTE THAT JES3 IS NOT ENABLED FOR HOSTMODE=AUX.  CONTACT IBM  */
 /* SUPPORT FOR ASSISTANCE.  IF USING A BIT TO TURN ON THIS MODE, */
 /* FOLLOW THE RECOMMENDED PROCEDURES LISTED BELOW:               */
 /* 1. START THE MAIN HOST BEFORE STARTING ANY AUX HOSTS          */
 /* 2. SHUTDOWN ALL AUX HOSTS BEFORE STOPPING THE MAIN HOST       */
 /*****************************************************************/

 SETSYS ?JESVER              /* JOB ENTRY SUBSYSTEM ID.           */

 SETSYS                      /* DO NOT REBLOCK DATA SETS DURING   */ -
   NOCONVERSION              /* RECALL OR RECOVERY.               */

 SETSYS                      /* DO NOT ASK OPERATOR PERMISSION TO */ -
   NOREQUEST                 /* START AUTOMATIC FUNCTIONS         */

 SETSYS                      /* MOVE OR DELETE DATA WHEN          */ -
   NODEBUG                   /* PERFORMING AUTO FUNCTIONS.        */

 SETSYS NOSWAP               /* RUN DFSMSHSM NONSWAPPABLE.        */

 SETSYS                      /* DFSMSHSM USES IT OWN FACILITIES   */ -
   DFHSMDATASETSERIALIZATION /* TO SERIALIZE DATA SETS.           */

 SETSYS                      /* DFSMSHSM USES ITS DEFINED OPTIMUM */ -
   OPTIMUMDASDBLOCKING       /* BLOCK SIZE WHEN MOVING DATA TO    */
                             /* DFSMSHSM-OWNED DASD.              */
 SETSYS                      /* DO NOT USE CMS OF ML1,ML2 AND     */ -
   USECYLINDERMANAGEDSPACE(N) /* BACKUP EAVS                      */
 /*****************************************************************/
 /*                   DFSMSHSM EXITS                              */
 /*****************************************************************/
 /*                   NONE ACTIVATED                              */
 /*****************************************************************/
 /*  DFSMSHSM LOGGING, JOURNALING, AND REPORTING OPTIONS          */
 /*****************************************************************/
 /*                                                               */

 SETSYS                      /* WRITE CDS CHANGES TO JOURNAL      */ -
   JOURNAL(RECOVERY)         /* IMMEDIATELY.                      */

 SETSYS                      /* WRITE DAILY STATISTICS RECORDS AND*/ -
   SMF(240)                  /* VOLUME STATISTIC RECORDS TO SMF   */
                             /* RECORD TYPE 240; WRITE FUNCTIONAL */
                             /* STATISTIC RECORDS TO TYPE 241.    */

 SETSYS                      /* WRITE ONE COPY OF SYSOUT TO       */ -
   SYSOUT(A 1)               /* PRINTER CLASS A                   */

 SETSYS                      /* WRITE DFSMSHSM DUMPS TO SYSTEM    */ -
   SYS1DUMP                  /* DUMP DATA SET.                    */

 SETSYS                      /* LOG ALL POSSIBLE DFSMSHSM ACTIVITY*/ -
   ACTLOGMSGLVL(FULL)

 SETSYS                      /* WRITE ACTIVITY LOG INFORMATION TO */ -
   ACTLOGTYPE(SYSOUT)        /* THE SYSOUT CLASS SPECIFIED BY THE */
                             /* SYSOUT PARAMETER.                 */
 /*                                                               */
 /*****************************************************************/
 /*                   DFSMSHSM MONITOR OPTIONS                    */
 /*****************************************************************/
 /*                                                               */
                             /* SPECIFY WHICH INFORMATIONAL       */
                             /* MESSAGES TO SEND TO THE OPERATOR  */
                             /* CONSOLE.                          */

 SETSYS                      /* LIST STARTUP PARAMETERS. DO NOT   */ -
   MONITOR(STARTUP NOVOLUME) /* SEND DATA SET LEVEL MESSAGES TO   */
                             /* THE SYSTEM CONSOLE.               */

 SETSYS                      /* DO NOT PRINT SPACE USAGE MSGS.    */ -
   MONITOR(NOSPACE           /* WARN WHEN JOURNAL IS 80% FULL     */ -
         JOURNAL(80))        /*                                   */

 /*                                                               */
 /*****************************************************************/
 /*         DFSMSHSM COMMON SERVICE AREA LIMITING OPTIONS         */
 /* THE FOLLOWING CSALIMITS PARAMETERS ARE IGNORED IF             */
 /* HOSTMODE=AUX HAS BEEN SPECIFIED AND WILL GENERATE AN ARC0103I */
 /* MESSAGE IF ISSUED.                                            */
 /*****************************************************************/
 /*                                                               */

 SETSYS                      /* LIMIT DFSMSHSM'S USAGE OF COMMON  */ -
   CSALIMITS(MWE(4))         /* SEVICE AREA STORAGE. KEEP A       */
                             /* MAXIMUM OF 4 NOWAIT TYPE MWES PER */
                             /* ADDRESS SPACE ON THE CSA QUEUE.   */

 SETSYS                      /* NEVER ALLOCATE MORE THEN 100K OF  */ -
   CSALIMITS(MAXIMUM(100)    /* STORAGE FOR MWES. ALLOCATE 90% OF */ -
               ACTIVE(90)    /* AVAILABLE STORAGE TO MWES WHEN    */ -
               INACTIVE(30)) /* DFSMSHSM IS ACTIVE. ALLOCATE ONLY */
                             /* 30% OF AVAILABLE STORAGE WHEN     */
                             /* DFSMSHSM IS INACTIVE.             */
 /*                                                               */
 /*****************************************************************/
 /*               DFSMSHSM TAPE HANDLING SPECIFICATIONS           */
 /*****************************************************************/
 /*                                                               */

 SETSYS                      /* SPECIFY IF EXTENDED TTOCS         */ -
   EXTENDEDTTOC(N)           /* ARE IN USE                        */

 SETSYS                      /* USE IMPROVED DATA RECORDING       */ -
   TAPEHARDWARECOMPACT       /* CAPABILITY WHEN 3480X OR NEWER    */
                             /* THE OUTPUT DEVICE.                */

 SETSYS                      /* REUSE TAPES THAT ARE PARTIALLY    */ -
   PARTIALTAPE(              /* FULL. DO NOT MARK THEM AS FULL.   */ -
    BACKUP(REUSE) -
    MIGRATION(REUSE))

 SETSYS                         /* DO NOT SUSPEND SYSTEM ACTIVITY */ -
   INPUTTAPEALLOCATION(NOWAIT)  /* (WAIT) WHILE INPUT, OUTPUT, OR */ -
   OUTPUTTAPEALLOCATION(NOWAIT) /* RECYCLE TAPES ARE BEING        */ -
   RECYCLETAPEALLOCATION(NOWAIT) /* ALLOCATED.                    */

 SETSYS                      /* SCRATCH TAPE SELECTION AT TAPE END*/ -
   SELECTVOLUME(             /* OF VOLUME (EOV) IF FROM THE GLOBAL*/ -
   BACKUP(SCRATCH)           /* IS FROM THE GLOBAL SCRATCH POOL.  */ -
   MIGRATION(SCRATCH) -
   DUMP(SCRATCH))

 SETSYS                      /* INFORM THE STORAGE ADMINISTRATOR  */ -
   RECYCLEPERCENT(20)        /* THAT A BACKUP OR MIGRATION TAPE   */
                             /* SHOULD BE RECYCLED WHEN THE AMOUNT*/
                             /* OF TAPE THAT IS OCCUPIED BY VALID */
                             /* DATA IS 20% OR LESS.              */

 /*****************************************************************/
 /*  IF USERUNITTABLE IS SPECIFIED, IT SHOULD BE CODED PRIOR TO   */
 /*  ASSIGNMENT OF ANY OTHER UNIT STATEMENT.                      */
 /*****************************************************************/

 SETSYS                      /* NO ESOTERIC TAPE DEVICE NAMES ARE */ -
   NOUSERUNITTABLE           /* DEFINED TO DFSMSHSM.              */

 SETSYS                      /* UTILIZE 97% OF TAPE CARTRIDGE     */ -
   TAPEUTILIZATION(                                                  -
    UNITTYPE(3590-1) PERCENTFUL(97))

 SETSYS                      /* THE AMOUNT OF SPACE THAT MAY NOT  */ -
   TAPESPANSIZE(100)         /* BE UTILIZED AT THE LOGICAL END OF */
                             /* A TAPE CARTRIDGE.                 */

 SETSYS                      /* RETURN TAPES THAT NO LONGER       */ -
   TAPEDELETION(             /* CONTAIN VALID DATA TO THE         */ -
    BACKUP(SCRATCHTAPE)      /* GLOBAL SCRATCH POOL.              */ -
    MIGRATION(SCRATCHTAPE) -
    DUMP(SCRATCHTAPE))

 SETSYS                      /* WAIT TEN MINUTES BEFORE REISSUING */ -
   MOUNTWAITTIME(10)         /* ADDITIONAL MESSAGES TO TAPE       */
                             /* OPERATORS FOR TAPE MOUNTS.        */

 SETSYS                      /* DIREST DFSMSHSM TO INITIALLY      */ -
   UNITNAME(3590-1)          /* SPECIFY A 3590-1 DEVICE FOR       */
                             /* BACKUP OR DUMP SCRATCH TAPES.     */

 SETSYS                      /* TAPE OPERATOR MESSAGES            */ -
   TAPEINPUTPROMPT(MIGRATIONTAPES(YES))

 SETSYS                      /* TAPE OPERATOR MESSAGES            */ -
   TAPEINPUTPROMPT(BACKUPTAPES(YES))

 SETSYS                      /* TAPE OPERATOR MESSAGES            */ -
   TAPEINPUTPROMPT(DUMPTAPES(YES))

 SETSYS                      /* TURN ON TAPE DUPLEXING FOR BACKUP */ -
   DUPLEX(                   /* AND MIGRATION. DURING MIGRATION   */ -
    BACKUP(Y)                /* DUPLEXING IF ERRORS ARE           */ -
    MIGRATION(               /* ENCOUNTERED ON THE ALTERNATE TAPE */ -
     Y ERRORALTERNATE(       /* THEN PROCESSING OF THE ORIGINAL   */ -
      CONTINUE)))            /* WILL CONTINUE.                    */

                             /* NUMBER OF ML2 PARTIALS LEFT AFTER */
 SETSYS                      /* RECYCLE                           */ -
   ML2PARTIALSNOTASSOCIATEDGOAL(10)

 /*                                                               */
 /*****************************************************************/
 /*             DFSMSHSM CONTROL DATA SET BACKUP PARAMETERS       */
 /*****************************************************************/
 /*                                                               */

 SETSYS                      /* MAINTAIN FOUR BACKUP VERSIONS     */ -
   CDSVERSIONBACKUP(         /* OF THE CONTROL DATA SETS. BACK    */ -
      BACKUPCOPIES(4)        /* UP THE CONTROL DATA SETS TO       */ -
      BACKUPDEVICECATEGORY(  /* 3590-1 DEVICES IN PARALLEL USING  */ -
        TAPE(UNITNAME(3590-1) /* USING DSS AS THE DATAMOVER       */ -
        PARALLEL))  -
      DATAMOVER(DSS))

 /*                                                               */
 /*****************************************************************/
 /*                DFSMSHSM RACF SPECIFICATIONS                   */
 /*****************************************************************/
 /*                                                               */

 SETSYS                      /* DO NOT PUT RACF-INDICATION        */ -
   NORACFIND                 /* ON BACKUP AND MIGRATION           */
                             /* COPIES OF DATA SETS.              */

 SETSYS                      /* USE RACF TO PROVIDE TAPE          */ -
   TAPESECURITY(RACF)        /* SECURITY.                         */

 SETSYS                      /* DO NOT ALLOW ERASE-ON-SCRATCH     */ -
   NOERASEONSCRATCH          /* ON ANY DFSMSHSM BACKUP            */
                             /* VERSIONS AND MIGRATION COPIES     */

 SETSYS                      /* BACKUP DISCRETE RACF PROFILES     */ -
   PROFILEBACKUP

 /*                                                               */
 /*****************************************************************/
 /*                DFSMSHSM COMPACTION OPTIONS                    */
 /*****************************************************************/
 /*                                                               */

 SETSYS                      /* COMPACT DATA SETS THAT MIGRATE TO */ -
   COMPACT(DASDMIGRATE)      /* DASD.                             */

 SETSYS                      /* DO NOT COMPACT DATA UNLESS A      */ -
     COMPACTPERCENT(20)      /* SAVINGS OF 20% OR MORE CAN BE     */
                             /* GAINED.                           */

 SETSYS -
   OBJECTNAMES(OBJ,OBJECT,LOAD,LOADLIB,LOADMODS,LINKLIB) -
   SOURCENAMES(ASM,COBOL,FORT,PLI,SOURCE,SRC,SRCLIB,SRCE,CNTL,JCL)

 /*                                                               */
 /*****************************************************************/
 /*              DFSMSHSM MIGRATION PARAMETERS                    */
 /*****************************************************************/
 /*                                                               */

 SETSYS                      /* DO NOT ALLOW DFSMSHSM TO MIGRATE  */ -
   TAPEMIGRATION(NONE)       /* DATA SETS TO LEVEL 2 TAPE VOLUMES.*/

 SETSYS                      /* SPECIFY PROCESSING WINDOW FOR     */ -
   PRIMARYSPMGMTSTART        /* PRIMARY SPACE MANAGEMENT (LEVEL 0 */ -
   (0000 0000)               /* TO LEVEL 1 MIGRATION              */

 DEFINE                      /* RUN PRIMARY SPACE MGMT EVERY      */ -
   PRIMARYSPMGMTCYCLE        /* DAY, STARTING MARCH 02, 1998      */ -
   (YYYYYYY -
   CYCLESTARTDATE(1998/03/02))

 SETSYS                      /* A DATA SET THAT HAS NOT BEEN      */ -
   DAYS(10)                  /* REFERRED TO (OPENED) FOR 10 DAYS  */
                             /* IS ELIGIBLE FOR MIGRATION         */

 SETSYS                      /* SPECIFY A HIGH-LEVEL QUALIFIER    */ -
   MIGRATEPREFIX(?UID)       /* WITH WHICH DFSMSHSM RENAMES       */
                             /* MIGRATED DATA SETS.               */

 SETSYS                      /* PERFORM MIGRATION THROUGHOUT      */ -
   INTERVALMIGRATION         /* THE DAY.                          */

 SETSYS                       /* SPECIFY PROCESSING WINDOW FOR    */ -
   SECONDARYSPMGMTSTART(0000) /* SECONDARY SPACE MANAGEMENT       */
                              /* (LEVEL 1 TO LEVEL 2 MIGRATION)   */

 DEFINE                      /* RUN SECONDARY SPACE MANAGEMENT    */ -
   SECONDARYSPMGMTCYCLE      /* EVERY DAY,                        */ -
   (YYYYYYY                  /* STARTING MARCH 02, 1998.          */ -
   CYCLESTARTDATE(1998/03/02))

 SETSYS                      /* KEEP MCDS RECORDS FOR RECALLED    */ -
   MIGRATIONCLEANUPDAYS(10 30 3)  /* DATA SETS FOR 10 DAYS. KEEP  */
                             /* VOLUME OR DAILY STATISTICS RECORDS*/
                             /* FOR 30 DAYS. KEEP RECORDS TO      */
                             /* RECONNECTABLE DATA SETS 3 DAYS    */
                             /* BEYOND EARLIEST ELIGIBILITY.      */

 SETSYS                      /* MIGRATE DATA SETS FROM LEVEL 1    */ -
   MIGRATIONLEVEL1DAYS(45)   /* VOLUMES TO LEVEL 2 VOLUMES IF THE */
                             /* DATA SETS HAVE NOT BEEN REFERRED  */
                             /* TO FOR 45 DAYS.                   */

 SETSYS                      /* DATA SET EXTENT REDUCTION         */ -
   MAXEXTENTS(10)            /* OCCURS WHEN EXTENTS REACH 10.     */

 SETSYS                      /* LIMIT THE NUMBER OF CONCURRENT    */ -
   MAXRECALLTASKS(8)         /* DFSMSHSM RECALL TASKS TO EIGHT.   */


 SETSYS                      /* DIRECT DFSMSHSM TO RECALL DATA    */ -
   RECALL(PRIVATEVOLUME(LIKE))/* SETS TO ONLINE VOLUMES WITH THE  */
                             /* USE ATTRIBUTE OF PUBLIC, STORAGE, */
                             /* OR PRIVATE AND WITH LIKE          */
                             /* CHARACTERISTICS.                  */

 SETSYS                      /* RETAIN LIST DATA SETS FOR 7 DAYS. */ -
   SCRATCHFREQUENCY(7)       /* DO NOT SCRATCH EXPIRED DATA SETS. */ -
   EXPIREDDATASETS(NOSCRATCH)

 SETSYS                      /* DO NOT MIGRATE SMALL DATA SETS AS */ -
   NOSMALLDATASETPACKING     /* RECORDS TO SMALL DATA SET PACKING */
                             /* (SDSP) DATA SETS.                 */

 SETSYS                      /* LIMIT THE NUMBER OF CONCURRENT    */ -
   MAXMIGRATIONTASKS(3)      /* AUTOMATIC VOLUME MIGRATION TASKS  */
                             /* TO THREE.                         */

 SETSYS                      /* LIMIT THE NUMBER OF CONCURRENT    */ -
   MAXSSMTASKS               /* AUTOMATIC SECONDARY SPACE         */ -
     (CLEANUP(2)             /* MANAGEMENT CLEANUP TASKS TO TWO   */ -
      TAPEMOVEMENT(1))       /* AND TAPEMOVEMENT TASKS TO ONE     */

 /*                                                               */
 /*****************************************************************/
 /*                DFSMSHSM BACKUP PARAMETERS                     */
 /*****************************************************************/
 /*                                                               */

 ONLYIF                      /* THE FOLLOWING DEFINE COMMAND WILL */ -
   HSMHOST(?HOSTID)          /* EXECUTE ONLY IF THE ACTIVE HOST ID*/ -
                             /* MATCHES THE HOST SPECIFIED.       */
                                                                     -
 DEFINE BACKUP(Y 1           /* DIRECT DFSMSHSM TO BACKUP ELIGIBLE*/ -
   CYCLESTARTDATE(1998/03/02)) /* DATA SETS DAILY (A 1 DAY CYCLE) */
                             /* TO A SINGLE BACKUP VOLUME,STARTING*/
                             /* MARCH 02, 1998.                   */

 SETSYS DSBACKUP(DASDSELECTIONSIZE(3000 250)  DASD(TASKS(2))         -
   TAPE(TASKS(2) DEMOUNTDELAY(MINUTES(60)  MAXIDLETASKS(0))))
                             /* BALANCE THE WORKLOAD BETWEEN TAPE */
                             /* AND DASD FOR WAIT TYPE BACKDS     */
                             /* COMMANDS. LIMIT THE NUMBER OF DATA*/
                             /* SET BACKUP TAPE AND DASD TASKS.   */
                             /* LIMIT THE NUMBER AND LENGTH OF    */
                             /* TIME A TAPE TASK CAN REMAIN IDLE  */
                             /* BEFORE BEING DEMOUNTED.           */

 SETSYS                      /* ACTIVATE THE BACKUP AND DUMP      */ -
   BACKUP                    /* FUNCTION OF DFSMSHSM              */

 ONLYIF                      /* THE FOLLOWING SETSYS COMMAND WILL */ -
   HSMHOST(?HOSTID)          /* EXECUTE ONLY IF THE ACTIVE HOST ID*/ -
                             /* MATCHES THE HOST SPECIFIED.       */ -

 SETSYS -
   AUTOBACKUPSTART(0000 0000 0000)
                             /* SPECIFY THE TIME FOR AUTOMATIC    */
                             /* BACKUP TO BEGIN, THE LATEST START */
                             /* TIME THAT AUTOMATIC BACKUP CAN    */
                             /* BEGIN, AND THE QUIESCE TIME FOR   */
                             /* AUTOMATIC BACKUP. NO AUTOMATIC    */
                             /* BACKUP OCCURS UNTIL THESE TIMES   */
                             /* ARE SPECIFIED.                    */

 SETSYS                      /* SPECIFY A HIGH-LEVEL QUALIFIER    */ -
   BACKUPPREFIX(?UID)        /* WITH WHICH DFSMSHSM RENAMES BACKED*/
                             /* UP DATA SETS                      */

 SETSYS                      /* KEEP ONE VERSION OF EACH BACKED UP*/ -
   VERSIONS(1)               /* DATA SET.                         */ -
   FREQUENCY(0)

 SETSYS                      /* LIMIT THE NUMBER OF CONCURRENT    */ -
   MAXBACKUPTASKS(3)         /* BACKUP TASKS TO THREE, BACK UP ALL*/ -
   NOSKIPABPRIMARY           /* DFSMSHSM-MANAGED VOLUMES THAT HAVE*/
                             /* THE AUTO BACKUP ATTRIBUTE.        */

 SETSYS                      /* LIMIT THE NUMBER OF CONCURRENT    */ -
   MAXDSRECOVERTASKS(3)      /* DFSMSHSM DATA SET RECOVER TASKS   */
                             /* TO THREE                          */

 SETSYS                      /* DURING DAILY BACKUP, MOVE         */ -
   SPILL                     /* DATA SETS FROM FULL DAILY         */
                             /* DASD VOLUMES TO SPILL VOLUMES.    */

 SETSYS                      /* MAKE INITIAL BACKUP COPIES OF DATA*/ -
   INCREMENTALBACKUP(ORIGINAL) /* SETS DESPITE THE SETTING OF THE */
                             /* CHANGE BIT.                       */

 SETSYS                      /* DFSMShsm will process BACKDS      */ -
   DSBACKUP(GENVSAMCOMPNAMES(YES)) /* NEWNAME, request DFSMSdss   */
                           /* create default names (.data .index) */

 /*                                                               */
 /*****************************************************************/
 /*            DFSMSHSM FULL VOLUME DUMP PARAMETERS               */
 /*****************************************************************/
 /*                                                               */

 ONLYIF                      /* THE DEFINE COMMAND WILL EXECUTE IF*/ -
   HSMHOST(?HOSTID)          /* THE ACTIVE HOST ID = ?HOSTID      */
 DEFINE -
   DUMPCYCLE(NNNNNNY         /* 7-DAY DUMP CYCLE WITH DUMP DONE   */ -
    CYCLESTARTDATE(1998/03/02)) /* ONLY ON THE SEVENTH DAY,       */
                             /* STARTING ON MONDAY MARCH 02, 1998,*/
                             /* SO DUMPS OCCUR ON SUNDAY.         */

 DEFINE DUMPCLASS(SUNDAY DAY(7) -
   RETPD(27) AUTOREUSE NORESET  -
   DATASETRESTORE VTOCCOPIES(4))
                             /* DEFINE A DUMP CLASS NAMED SUNDAY  */
                             /* THAT IS AUTOMATICALLY DUMPED ON   */
                             /* THE SEVENTH DAY OF THE CYCLE.     */
                             /* EACH DUMP COPY IS HELD FOR 27 DAYS*/
                             /* AND THE TAPE IS REUSED WHEN IT IS */
                             /* SCRATCHED. DO NOT RESET DATA SET  */
                             /* CHANGE BITS. ALLOW TSO USERS TO   */
                             /* RESTORE DATA SETS FROM DUMP TAPE. */
                             /* AT MOST, KEEP FOUR VTOC COPY DUMP */
                             /* DATA SETS FOR EACH VOLUME.        */

 DEFINE DUMPCLASS(QUARTERS   /* DEFINE A DUMP CLASS NAMED QUARTERS*/ -
   FREQUENCY(90) RETPD(356)  /* THAT IS AUTOMATICALLY DUMPED EVERY*/ -
   NOAUTOREUSE               /* THREE MONTHS AND IS HELD FOR ONE  */ -
   NODATASETRESTORE NORESET  /* WEEK LESS THEN A YEAR. USE IS FOR */ -
   DISPOSITION('OFF-SITE')   /* ONLY FULL RESTORES. HOLD THE TAPE */ -
   VTOCCOPIES(0))            /* OFF-SITE AND KEEP NO VTOC COPIES  */
                             /* FOR THIS CLASS.                   */

 SETSYS -
   AUTODUMPSTART(0000 0000 0000)
                             /* SPECIFY THE TIME FOR AUTOMATIC    */
                             /* DUMP TO BEGIN, THE LATEST START   */
                             /* THAT AUTOMATIC DUMP CAN BEGIN,    */
                             /* AND THE QUIESCE TIME FOR AUTOMATIC*/
                             /* DUMP. NO AUTOMATIC DUMP OCCURS    */
                             /* UNTIL THESE TIMES ARE SPECIFIED.  */

 SETSYS                      /* BUFFER FIVE TRACKS WHEN PERFORMING*/ -
   DUMPIO(3,2)               /* A DUMP. BUFFER TWO TRACKS DURING  */
                             /* DATA MOVEMENT.                    */

 SETSYS                      /* LIMIT THE NUMBER OF CONCURRENT    */ -
   MAXDUMPTASKS(3)           /* DUMP TASK TO THREE.               */

/*                                                                */
/******************************************************************/
/*      DFSMSHSM AGGREGATE BACKUP AND RECOVER PARAMETERS          */
 /* THE FOLLOWING ABARS PARAMETERS ARE IGNORED IF HOSTMODE=AUX    */
 /* HAS BEEN SPECIFIED AND WILL GENERATE AN ARC0103I MESSAGE IF   */
 /* ISSUED.                                                       */
 /*****************************************************************/
/*                                                                */

SETSYS                       /* RECOVER DATA SET AGGREGATES TO    */ -
  ARECOVERUNITNAME(3590-1)   /* 3590-1 TAPE DEVICES.              */

SETSYS                       /* START ONLY ONE SECONDARY ADDRESS  */ -
  MAXABARSADDRESSSPACE(1)    /* SPACE FOR BACKING UP AND          */
                             /* RECOVERING AGGREGATED DATA SETS   */

SETSYS                       /* START THE SECONDARY ADDRESS       */ -
  ABARSPROCNAME(DFHSMABR)    /* SPACE WITH THE STARTUP PROCEDURE  */
                             /* NAMED DFHSMABR.                   */

SETSYS                       /* WRITE THE ABARS ACTIVITY LOG TO   */ -
  ABARSACTLOGTYPE(DASD)      /* DASD                              */

SETSYS                       /* LOG ALL ABARS MESSAGES            */ -
  ABARSACTLOGMSGLVL(FULL)

SETSYS                       /* RECOVER ML2 DATA SETS TO TAPE.    */ -
  ARECOVERML2UNIT(3590-1)

SETSYS                       /* USE 90% OF THE AVAILABLE TAPE FOR */ -
  ARECOVERPERCENTUTILIZED(090) /* ARECOVERY TAPES.                */

SETSYS                       /* BACKUP AGGREGATES TO 3590-1       */ -
  ABARSUNITNAME(3590-1)      /* DEVICES.

SETSYS                       /* BACKUP ABARS DATA SETS WITH TWO   */ -
  ABARSBUFFERS(2)            /* DATA MOVEMENT BUFFERS.            */

SETSYS                       /* SPECIFY ABARS TO STACK THE        */ -
  ABARSTAPES(STACK)          /* ABACKUP OUTPUT ONTO A MINIMUM     */
                             /* NUMBER OF TAPE VOLUMES            */

SETSYS                       /* ABARS ACTIVITY LOG WILL NOT BE    */ -
  ABARSDELETEACTIVITY(N)     /* AUTOMATICALLY DELETED DURING      */
                             /* ABARS PROCESSING                  */

SETSYS                       /* SET PERFORMANCE OF BACKING UP     */ -
  ABARSOPTIMIZE(3)           /* LEVEL 0 DASD DATASETS             */

SETSYS                       /* TARGET DATASET IS TO BE ASSIGNED  */ -
  ARECOVERTGTGDS(SOURCE)     /* SOURCE STATUS                     */

SETSYS                       /* ALLOWS RECOVERY OF A LEVEL 0      */ -
  ABARSVOLCOUNT(ANY)         /* DASD DATA SET UP TO 59 VOLUMES    */
 /*                                                               */
 /*****************************************************************/
 /*            DFSMSHSM HSMPLEX/SYSPLEX PARAMETERS                */
 /*****************************************************************/
 /*                                                               */

SETSYS                       /* SPECIFY THE SUFFIX FOR THE        */ -
  PLEXNAME(PLEX0)            /* HSMPLEX IN A MULTI-HSMPLEX        */
                             /* ENVIRONMENT   ARC(SUFFIX)         */

SETSYS                       /* SPECIFY HOST NOT TO TAKE OVER     */ -
  PROMOTE(PRIMARYHOST(NO)    /* PRIMARY OR SSM RESPONSIBILITIES   */ -
  SSM(NO))

 /*                                                               */
 /*****************************************************************/
 /* SEE MEMBER ARCCMD90 IN esa.prj.cbthsm.cntl FOR AN EXAMPLE OF  */
 /* ADDVOL COMMAND TO BE USED IN CONJUNCTION WITH THIS COMMAND    */
 /* STREAM.                                                       */
 /*****************************************************************/
$A
//HSMPROC  EXEC PGM=IEBUPDTE,PARM=NEW
//SYSPRINT DD SYSOUT=*
//SYSUT2   DD DSN=SYS1.PARMLIB,DISP=SHR
//SYSIN    DD DATA,DLM='$A'
./ ADD NAME=ARCSTR00
 /*****************************************************************/
 /*              DFSMSHSM ADDITIONAL STARTUP COMMAND MEMBER       */
 /*****************************************************************/
$A
$$
//HSMSTEP2 EXEC PGM=IEBUPDTE,PARM=NEW
//SYSPRINT DD SYSOUT=*
//SYSUT2   DD DSN=ESA.PRJ.CBTHSM.CNTL,
//            DISP=OLD
//SYSIN    DD DATA,DLM='$$'
./ ADD NAME=ARCCMD90
 /*                                                               */
 /*****************************************************************/
 /* THE FOLLOWING COMMANDS ARE AN EXAMPLE OF ADDVOL COMMANDS      */
 /* USED IN CONJUNCTION WITH THE ARCCMD00 COMPONENT OF THE        */
 /* STARTER SET.  THEY CAN BE COMPLETED BY ADDING VOLUME SERIAL   */
 /* NUMBERS AND UNIT TYPES IN THE SPACES PROVIDED.  THIS COMMAND  */
 /* STREAM CAN THEN BE APPENDED TO ARCCMD00.                      */
 /*                                                               */
 /* ADDVOL COMMANDS FOR PRIMARY AND MIGRATION LEVEL 1 VOLUMES     */
 /* MUST BE INCLUDED IN THE ARCCMD__ PARMLIB MEMBER FOR YOUR      */
 /* SYSTEM.  INDEED, THEY MUST BE IN THE ARCCMD__ WHEN RUNNING    */
 /* WITH JES3.                                                    */
 /*                                                               */
 /*****************************************************************/
 /*                                                               */
 ADDVOL ______               /* ADD A VOLUME (PROVIDE SERIAL) */ -
        UNIT(______)         /* WITH UNIT TYPE (PROVIDE TYPE) */ -
        PRIMARY              /* AS A PRIMARY VOLUME THAT IS A */ -
        (AUTOMIGRATION       /* CANDIDATE FOR AUTOMIGRATION.  */ -
         MIGRATE(7)          /* MIGRATE DATA SETS AFTER 7 DAYS*/ -
         AUTOBACKUP          /* CANDIDATE FOR AUTOBACKUP.     */ -
         BACKUPDEVICECATEGORY(TAPE) /* BACKED UP TO TAPE.     */ -
         AUTORECALL          /* DATA SETS CAN BE RECALLED TO  */ -
                             /* THIS VOLUME.                  */ -
         AUTODUMP(SUNDAY))   /* DUMP FULL VOLUME AS SPECIFIED */ -
                             /* BY THE SUNDAY DUMP CLASS.     */ -
        THRESHOLD(100 0)     /* NO INTERVAL MIGRATION         */
 ADDVOL ______               /* ADD A VOLUME (PROVIDE SERIAL) */ -
        UNIT(______)         /* WITH UNIT TYPE (PROVIDE TYPE) */ -
        MIGRATION            /* AS A MIGRATION LEVEL 1 VOLUME */ -
        (MIGRATIONLEVEL1     /* WITH NO SMALL DATA SET        */ -
         NOSMALLDATASETPACKING) /* PACKING AVAILABLE.         */ -
        THRESHOLD(100)       /* NO THRESHOLD PROCESSING.      */
/*                                                               */
/*****************************************************************/
/* YOU MAY REMOVE ADDVOL COMMANDS FOR VOLUMES OTHER THAN PRIMARY */
/* AND MIGRATION LEVEL 1 VOLUMES FROM ARCCMD__ IF YOU WANT TO    */
/* SAVE TIME DURING DFSMSHSM STARTUP.  THOSE ADDVOL COMMANDS ARE */
/* STORED IN THE CONTROL DATA SETS WHEN DFSMSHSM IS STARTED.     */
/*****************************************************************/
/*                                                               */
ADDVOL ______               /* ADD A VOLUME (PROVIDE SERIAL)  */ -
       UNIT(______)         /* WITH UNIT TYPE (PROVIDE TYPE)  */ -
       BACKUP               /* AS A DAILY BACKUP VOLUME FOR   */ -
       (DAILY)              /* AUTOMATIC BACKUP.              */ -
       THRESH(97)           /* SPILL CONTENTS UNTIL THIS      */ -
                            /* VOLUME IS 97% FULL.            */

ADDVOL ______               /* ADD A VOLUME (PROVIDE SERIAL)  */ -
       UNIT(______)         /* WITH UNIT TYPE (PROVIDE TYPE)  */ -
       BACKUP               /* AS A SPILL BACKUP VOLUME THAT  */ -
       (SPILL)              /* IS CONSIDERED FULL AND         */ -
       THRESH(97)           /* UNUSABLE WHEN 97% FULL.        */

ADDVOL ______               /* ADD A VOLUME (PROVIDE SERIAL)  */ -
       UNIT(______)         /* THAT IS A TAPE USED AS         */ -
       BACKUP(DAILY)        /* A DAILY BACKUP VOLUME.         */

ADDVOL ______               /* ADD A VOLUME (PROVIDE SERIAL)  */ -
       DUMP                 /* USED FOR FULL VOLUME           */ -
       (DUMPCLASS(SUNDAY))  /* DUMP FOR SUNDAY CLASS.         */ -
       UNIT(______)         /* DUMPS MUST GO TO TAPE.         */
 /*                                                           */
./ ADD NAME=ARCCMD01
 /****************************************************************/
 /*  DFSMSHSM STARTUP COMMAND MEMBER FOR LEVEL 2 TAPE MIGRATION  */
 /*                                                              */
 /*  APPEND THIS COMMAND STREAM TO ARCCMD00 TO PROVIDE LEVEL 2   */
 /*  TAPE MIGRATION                                              */
 /****************************************************************/
 /****************************************************************/
 /*          DFSMSHSM LEVEL 2 TAPE MIGRATION PARAMETERS          */
 /****************************************************************/
 /*                                                              */

 SETSYS -
   TAPEMIGRATION(ML2TAPE)    /* MIGRATE TO LEVEL 2 TAPE.         */

 SETSYS -
   MIGUNITNAME(3590-1)       /* START WITH 3590-1 ML2 TAPE       */
                             /* UNIT.                            */
 SETSYS -
   ML2RECYCLEPERCENT(20)     /* LOG MESSAGE WHEN VALID DATA      */
                             /* ON AN ML2 TAPE FALLS BELOW       */
                             /* 20%.                             */
 SETSYS -
   TAPEMAXRECALLTASKS(1)     /* ONE TAPE RECALL TASK AT A TIME   */

 /*                                                              */
 /****************************************************************/
 /* SEE MEMBER ARCCMD91 IN esa.prj.cbthsm.cntl FOR AN EXAMPLE    */
 /* OF ADDVOL COMMANDS TO BE USED IN CONJUNCTION WITH LEVEL      */
 /* 2 TAPE MIGRATION.                                            */
 /****************************************************************/
 /*                                                              */
./ ADD NAME=ARCCMD91
 /*                                                              */
 /****************************************************************/
 /* THE FOLLOWING EXAMPLE ADDVOL COMMANDS CAN BE USED WITH THE   */
 /* ARCCD00 MEMBER OF THE STARTER SET TO IDENTIFY LEVEL 2 TAPE   */
 /* MIGRATION VOLUMES.  AFTER YOU HAVE ADDED A VOLUME SERIAL     */
 /* NUMBER AND A UNIT TYPE IN THE SPACE PROVIDED, APPEND THIS    */
 /* COMMAND STREAM TO YOUR ARCCMD00 MEMBER.                      */
 /*                                                              */
 /****************************************************************/
 /*                                                              */
 ADDVOL ______               /* ADD A VOLUME (PROVIDE SERIAL)    */ -
        MIGRATION            /* AS A MIGRATION LEVEL 2 TAPE      */ -
         (MIGRATIONLEVEL2)   /* VOLUME.                          */ -
        UNIT(______)         /* PROVIDE PROPER UNIT TYPE.        */
 /*                                                              */
./ ADD NAME=HSMHELP
)F Function:
             The HSENDCMD command is used by authorized TSO users
             to communicate with the DFSMShsm functions.
)X SYNTAX:
             HSENDCMD(WAIT | NOWAIT) command

REQUIRED  -  command - You must enter a command.
DEFAULTS  -  none
ALIAS     -  none

)O OPERANDS:
            'command' - specifies the DFSMShsm operator command.
DEFAULTS  -  none

The following is a list of all DFSMShsm commands except
the user commands:

ABACKUP - Back up aggregated date sets
ADDVOL - Add or change the volumes to be controlled by DFSMShsm
ALTERDS - Change the backup specifications for a data set
ARECOVER - Recover aggregated date sets
AUDIT - Audit DFSMShsm
AUTH - Authorize a TSO user for DFSMShsm commands
BACKDS - Create a backup version of a data set
BACKVOL - Create a backup version of all data sets on a volume or
          or on CDS
BDELETE - Delete a backup version of a data set
CANCEL - Cancel a queued DFSMShsm request
DEFINE - Define control structures to DFSMShsm
DELETE - Delete a data set that has been migrated
DELVOL - Remove a volume from DFSMShsm control
DISPLAY - Display DFSMShsm storage locations
EXPIREBV - Delete unwanted backup versions of data sets
FIXCDS - Repair a DFSMShsm control data set
FRBACKUP - Create a fast replication backup of a copy pool
FRDELETE - Delete a backup version of a copy pool
FREEVOL - Move migrated data sets from migration volumes,
          and backup data sets from backup volumes
FRRECOV - Re-create a volume or copy pool from a backup version
HOLD - Suspend a DFSMShsm function
LIST - List information from the DFSMShsm control data sets
LOG - Enter data into the DFSMShsm Log
MIGRATE - Space manage a specific volume or migrate a data set
PATCH - Modify DFSMShsm storage locations
QUERY - List the status of DFSMShsm parameters, statistics, requests
RECALL - Recall a data set
RECOVER - Re-create a data set or a volume from a backup version
RECYCLE - Move valid backup or migration copies from one tape
          to another
RELEASE - Resume a DFSMShsm function
REPORT - Request reports based on DFSMShsm statistics
SETMIG - Change the eligibility for migration of data sets
SETSYS - Define or change the DFSMShsm installation parameters
STOP - Stop the DFSMShsm system task
SWAPLOG - Switch the DFSMShsm log data sets
TAPECOPY - Copy a DFSMShsm-owned migration or backup tape volume
           to an alternate volume
TAPEREPL - Replace a DFSMShsm-owned migration or backup tape volume
           with an alternate volume
TRAP - Request a dump when a specified error occurs
UPDATEC - Apply the DFSMShsm journal to recover a control data set
The following list shows specific information about each command.
You could request the same information by typing HELP HSMHELP
OPERANDS(command).

))ABACKUP  agname
           UNIT(unittype)
           EXECUTE | VERIFY
           MOVE
           FILTEROUTPUTDATASET(dsname)
           PROCESSONLY(LEVEL0 | MIGRATIONLEVEL1 | MIGRATIONLEVEL2 |
                       USERTAPE)
           STACK | NOSTACK
           OPTIMIZE(1|2|3|4)
           SKIP(PPRC | XRC | NOPPRC | NOXRC)
           LIST(SKIPPED)
))ADDVOL   volser
           BACKUP | DUMP | MIGRATION | PRIMARY
           UNIT(unittype)
               (AUTOBACKUP | NOAUTOBACKUP)
               (AUTODUMP(class,(class,class,class,class))|NOAUTODUMP)
               (AUTOMIGRATION | NOAUTOMIGRATION)
               (AUTORECALL | NOAUTORECALL)
               (BACKUPDEVICECATEGORY(TAPE | DASD | NONE))
               (DAILY(day) | SPILL)
               (DELETEBYAGE(days) | DELETEIFBACKEDUP(days) |
               MIGRATE(days))
               DENSITY(2|3|4)
               (DRAIN | NODRAIN)
               (OVERFLOW | NOOVERFLOW)

               (DUMPCLASS(class))
               (MIGRATIONLEVEL1 | MIGRATIONLEVEL2)
               (SMALLDATASETPACKING | NOSMALLDATASETPACKING)
               THRESHOLD(thresh1(thresh2))
               TRACKMANAGEDTHRESHOLD(thresh1 thresh2)

))ALTERDS  (dsname...)
                FREQUENCY(days) | SYSFREQUENCY
                VERSIONS(limit) | SYSVERSIONS

))ARECOVER DATASETNAME(controlfiledsname) |
               STACK | NOSTACK
               VOLUMES(volser1 ... volsern) | XMIT
                   UNIT(unittype)
           AGGREGATE(agname)
               DATE(yyyy/mm/dd) | VERSION(nnnn)
           EXECUTE | VERIFY | PREPARE
               ACTVITY
               DATASETCONFLICT
                (RENAMESOURCE(level) |
                 RENAMETARGET(level) |
                 BYPASS | REPLACE)
               INSTRUCTION
               MENTITY(modeldsn)
               MIGRATEDDATA(ML1 | ML2 | SOURCELEVEL)
               NOBACKUPMIGRATED
               ONLYDATASET
                (NAME(dsname) |
                 LISTOFNAMES(listdsname))
               PERCENTUTILIZED(percent)
               RECOVERNEWNAMEALL(level)|
                RECOVERNEWNAMELEVEL(olevel1,nlevel1, ...,)
               TARGETUNIT(unittype)
               TGTGDS(SOURCE | ACTIVITY | DEFERRED | ROLLEDOFF)
               VOLCOUNT(ANY | NONE)

))AUDIT -  Command Variations:

  AUDIT    ABARCONTROLS | ABARSCONTROLS(agname)

  AUDIT    ALL
                FIX | NOFIX
                OUTDATASET(dsname) | SYSOUT(class)
                REPORT(ALL | ERRORS)
                SERIALIZATION(CONTINUOUS)

  AUDIT    BACKUPTYPE(DAILY(day) | SPILL | ALL)
                FIX | NOFIX
                OUTDATASET(dsname) | SYSOUT(class)
                REPORT(ALL | ERRORS)
                SERIALIZATION(CONTINUOUS)

  AUDIT    BACKUPCONTROLDATASET | MIGRATIONCONTROLDATASET |
            OFFLINECONTROLDATASET(DAILY(day) | ML2 | SPILL | ALL)
                FIX | NOFIX
                OUTDATASET(dsname) | SYSOUT(class) | TERMINAL
                REPORT(ALL | ERRORS)
                SERIALIZATION(CONTINUOUS)

  AUDIT    BACKUPVOLUMES(volser ...)
                FIX | NOFIX
                OUTDATASET(dsname) | SYSOUT(class) | TERMINAL
                REPORT(ALL | ERRORS)
                SERIALIZATION(CONTINUOUS)

  AUDIT    COMMONQUEUE(RECALL)
                FIX | NOFIX

  AUDIT    COPYPOOLCONTROLS
             (cpname)

  AUDIT    DATASETCONTROLS(MIGRATION | BACKUP)
                DATASETNAMES(dsname ...) | LEVELS(qualifier ...) |
                RESUME
                FIX | NOFIX
                OUTDATASET(dsname) | SYSOUT(class)
                REPORT(ERRORS)
                SERIALIZATION(DYNAMIC | CONTINUOUS)

  AUDIT    DATASETNAMES(dsname ...)
                FIX | NOFIX
                OUTDATASET(dsname) | SYSOUT(class) | TERMINAL
                REPORT(ALL)
                SERIALIZATION(CONTINUOUS)

  AUDIT    DIRECTORYCONTROLS VOLUMES(volser)
                FIX | NOFIX
                OUTDATASET(dsname) | SYSOUT(class)
                REPORT(ERRORS)
                SERIALIZATION(DYNAMIC | CONTINUOUS)

  AUDIT    LEVELS(qualifier ...)
                FIX | NOFIX
                OUTDATASET(dsname) | SYSOUT(class) | TERMINAL
                REPORT(ALL | ERRORS)
                SERIALIZATION(CONTINUOUS)

  AUDIT    MASTERCATALOG | USERCATALOG(catname)
                NOFIX
                OUTDATASET(dsname) | SYSOUT(class) | TERMINAL
                REPORT(ALL | ERRORS)
                SERIALIZATION(CONTINUOUS)

  AUDIT    MEDIACONTROLS(SMALLDATASETPACKING)
           VOLUMES(volser)
                FIX | NOFIX
                OUTDATASET(dsname) | SYSOUT(class)
                REPORT(ERRORS)
                SERIALIZATION(DYNAMIC | CONTINUOUS)

  AUDIT    VOLUMES(volser ...)
                FIX | NOFIX
                OUTDATASET(dsname) | SYSOUT(class) | TERMINAL
                REPORT(ALL | ERRORS)
                SERIALIZATION(CONTINUOUS)

  AUDIT    VOLUMECONTROLS(BACKUP)
                VOLUMES(volser ...) | BACKUPTYPE(DAILY(day)) |
                SPILL | ALL
                FIX | NOFIX
                OUTDATASET(dsname) | SYSOUT(class)
                REPORT(ERRORS)
                SERIALIZATION(DYNAMIC | CONTINUOUS)

  AUDIT    VOLUMECONTROLS(MIGRATION | RECOVERABLE)
                VOLUMES(volser ...)
                FIX | NOFIX
                OUTDATASET(dsname) | SYSOUT(class)
                REPORT(ERRORS)
                SERIALIZATION(DYNAMIC | CONTINUOUS)

))AUTH     userid
           DATABASEAUTHORITY(USER | CONTROL) | REVOKE

))BACKDS   dsname
                NEWNAME(newdatasetname)
                  DATE(yyyy/mm/dd)
                    TIME(hhmmss)
                  SPHERE(YES | NO)
                  GENVSAMCOMPNAMES(YES | NO)
                UNIT(unittype) VOLUME(volser)
                TARGET(DASD | TAPE)
                CC(PREFERRED | STANDARD | REQUIRED |
                   VIRTUALPREFERRED | VIRTUALREQUIRED |
                   CACHEPREFERRED | CACHEREQUIRED
                     PHYSICALEND | LOGICALEND)
                RETAINDAYS(days)

))BACKVOL  PRIMARY | VOLUMES(volser...) | STORAGEGROUP(sgname ...) |
                CONTROLDATASETS(
                     DATAMOVER(HSM | DSS)
                     BACKUPDEVICECATEGORY
                          (DASD | TAPE(PARALLEL | NOPARALLEL)) |
                     NULLJOURNALONLY)
                FREQUENCY(days)
                INCREMENTAL | TOTAL
                DUMP(DUMPCLASS(class,class,class,class,class)
                RETENTIONPERIOD(days | * | NOLIMIT ...)
                STACK(nn | * ...) )
                TERMINAL
                UNIT(unittype)

))BDELETE  (dsname...)  ALL | VERSIONS(bvn ...) |
                        DATE(yyyy/mm/dd) TIME(hhmmss)
                FROMVOLUME(volser)

))CANCEL        DATASETNAME(dsn) | REQUEST(num) | USERID(userid)

))DEFINE        ARPOOL(agname | ALL
                              | ML1VOLS(* | volser ... volsern)
                              | L0VOLS(* | volser ... volsern))
                BACKUP(cycle(bvol) CYCLESTARTDATE(yyyy/mm/dd))
                DUMPCLASS(class)
                AUTOREUSE | NOAUTOREUSE
                DATASETRESTORE | NODATASETRESTORE
                DAY(day)
                DISABLE
                DISPOSITION('disposition')
                FREQUENCY(days)
                RESET | NORESET
                RETENTIONPERIOD(days | NOLIMIT
                STACK(number)
                SWITCHTAPES(DSBACKUP(TIME(hhmm) | AUTOBACKUPEND
                                     PARTIALTAPE(REUSE |
                                                 MARKFULL |
                                                 SETSYS)))

                TAPEEXPIRATIONDATE(yyyyddd)
                UNIT(unittype)
                VTOCCOPIES(copies)
                DUMPCYCLE(cycle CYCLESTARTDATE(yyyy/mm/dd))
                MIGRATIONCLEANUPCYCLE(cycle(CYCLESTARTDATE(yyyy/mm/dd)))
                MIGRATIONLEVEL2(KEYS(key ...) VOLUMES(volser...))
                POOL(poolid VOLUMES(volser))
                PRIMARYSPMGMTCYCLE(cycle CYCLESTARTDATE(yyyy/mm/dd))
                SECONDARYSPMGMTCYCLE(cycle CYCLESTARTDATE(yyyy/mm/dd))
                VOLUMEPOOL(poolid VOLUMES(volser))

))DELETE   dsn
                PURGE

))DELVOL   volser
           BACKUP | DUMP | MIGRATION | PRIMARY
               (PURGE | REASSIGN | UNASSIGN | MARKFULL
               LASTCOPY
               COPYPOOLCOPY)

))DISPLAY  (address (:address)...)
           LENGTHS(bytes...)
           LOGONLY
           OUTDATASET(dsname)
           VOLSER(volser)

))EXPIREBV DISPLAY | EXECUTE
                ABARVERSIONS
                ABARVERSIONS(AGNAME(agname))
                RETAINVERSIONS(n)
                NONSMSVERSIONS(DELETEIFBACKEDUP(days)
                CATALOGEDDATA(days)
                UNCATALOGEDDATA(days))
                STARTKEY(lowkey) | RESUME
                ENDKEY(highkey)
                OUTDATASET(dsname) | SYSOUT(class)

))FIXCDS   type
           key
            ADDMIGRATEDDATASET(volser) | ASSIGNEDBIT(ON | OFF) |
            CREATE(offset data) | DELETE | DISPLAY(offset) |
            EXPAND(bytes) | NEWKEY(keyname) |
            VERIFY(offset data | BITS(bits))|
            PATCH(offset data | BIT(bits))
            ENTRY(volser dsname)
            LENGTH(bytes)
            LOGONLY
            OUTDATASET(dsname)
            REFRESH(ON|OFF)

))FREEVOL MIGRATIONVOLUME(volser)
            AGE(days)
            TARGETLEVEL(MIGRATIONLEVEL1 | MIGRATIONLEVEL2(TAPE|DASD))
          BACKUPVOLUME(volser)
            AGE(days)
            TARGETLEVEL(SPILL (TAPE | DASD))
            RETAINNEWESTVERSION

))FRBACKUP COPYPOOL(cpname)
             EXECUTE
               TOKEN(token)
               NOVTOCENQ
               FORCE
               DUMP
                 RETURNCONTROL(DUMPEND | FASTREPLICATIONEND)
                 DUMPCLASS(dclass1,...,dclass5)
             PREPARE
               FORCE
             WITHDRAW
             DUMPONLY(
               TOKEN(token) | VERSION(vernum) | DATE(yyyy/mm/dd) |
               GENERATION(gennum))
               DUMPCLASS(dclass1,...,dclass5)

))FRDELETE COPYPOOL(cpname)
             VERSIONS(ver,...) | TOKEN(token) | ALL
             BOTH | DASDONLY | DUMPONLY(DUMPCLASS(dclass1,...,dclass5))

))FRRECOV  TOVOLUME(volser)
             FROMCOPYPOOL(cpname)
             FROMDASD |
             FROMDUMP(
               DUMPCLASS(dclass) | DUMPVOLUME(dvol)
               APPLYINCREMENTAL)
           COPYPOOL(cpname)
             VERIFY(Y|N)
             FROMDASD |
             FROMDUMP(
               DUMPCLASS(dclass)
               PARTIALOK
               RESUME(YES | NO))
           DSNAME(dsname) REPLACE
             FROMDASD |
             FROMDUMP(
               DUMPCLASS(dclass) | DUMPVOLUME(dvol))
             FASTREPLICATION(PREFERRED | REQUIRED | NONE)
             FROMCOPYPOOL(cpname)
             NOCOPYPOOLBACKUP(RC4 | RC8)
           GENERATION(gennum) | VERSION(vernum) |
           DATE(yyyy/mm/dd) | TOKEN(token)


))HOLD          ABACKUP(agname)
                ALL
                ARECOVER
                  AGGREGATE(agname) | DATASETNAME(controlfiledsn)
                AUDIT
                AUTOMIGRATION
                BACKUP(AUTO
                       DSCOMMAND(
                                 DASD |
                                 TAPE |
                                 SWITCHTAPES))
                COMMONQUEUE(
                  RECALL(
                         SELECTION | PLACEMENT))
                DUMP(AUTO | FASTREPLICATIONBACKUP)
                ENDOFDATASET | ENDOFVOLUME
                EXPIREBV
                FRBACKUP
                FRRECOV(
                 DATASET | TAPE))
                LIST
                LOG
                MIGRATION(AUTO)
                RECALL(TAPE(TSO))
                RECOVER(TAPEDATASET)
                RECYCLE
                REPORT
                TAPECOPY
                TAPEREPL

))HSENDCMD command
                WAIT | NOWAIT

If you are working from the DFSMShsm panel and your command
fits on the COMMAND === line of the panel, then simply type
TSO HSENDCMD ---command---
If you need space for a multiline command, then split the
screen and select 'OPTION 6'.
Type in the multiline command.
After the command has been processed, return to the DFSMShsm panel.

))LIST  -  Command Variations :

  LIST     AGGREGATE(agname)
           AGGREGATE(*)
             DATE(yyy/mm/dd)
             VERSION(nnnn)

  LIST     BACKUPVOLUME(volser)
           OUTDATASET(dsname) | SYSOUT(class) | TERMINAL
           SELECT(EMPTY)

  LIST     COPYPOOL
             (cpname)
             FASTREPLICATIONVOLS | NOVOLS | DUMPVOLS |
             ALLOVLS(
               GENERATION(gennum) | ALLVERS | TOKEN(token))
             SELECT(
               FASTREPLICATIONSTATE(RECOVERABLE | DUMPONLY |
                                    FAILED | NONE) |
               DUMPSTATE(ALLCOMPLETE | REQUIREDCOMPLETE |
                         PARTIAL | NONE))
           COPYPOOLBACKUPSTORAGEGROUP(cpbsgname)

  LIST     DATASETNAME(dsname) | LEVEL(qualifier)
                BACKUPCONTROLDATASET| MIGRATIONCONTROLDATASET | BOTH
                INCLUDEPRIMARY
                OUTDATASET(dsname) | SYSOUT(class) | TERMINAL
                SELECT(AGE(mindays) maxdays) | MIGRATIONLEVEL1 |
                MIGRATIONLEVEL2 | VOLUME(volser) |
                RETAINDAYS | ACTIVE |
                SMALLDATASETPACKING | NOSMALLDATASETPACKING |
                VSAM |
                EMPTY)       /* List empty migrated data sets */
                SUMMARY

  LIST     DUMPCLASS(class)
                BACKUPCONTROLDATASET
                OUTDATASET(dsname) | SYSOUT(class) | TERMINAL

  LIST     DUMPVOLUME(volser)
                BACKUPCONTROLDATASET
                DUMPCONTENTS(volser)
                SELECT(AVAILABLE UNAVAILABLE EXPIRED UNEXPIRED
                LIB NOLIB NORETENTIONLIMIT DUMPCLASS(class))
                OUTDATASET(dsname) | SYSOUT(class) | TERMINAL

  LIST     HOST(hostid)
                RESET
                OUTDATASET(dsname) | SYSOUT(class) | TERMINAL

  LIST     MIGRATIONVOLUME |
           MIGRATIONLEVEL1 SELECT(OVERFLOW | NOOVERFLOW) |
           MIGRATIONLEVEL2(DASD | TAPE) | VOLUME(volser)
                BACKUPCONTROLDATASET | MIGRATIONCONTROLDATASET | BOTH
                ALLDUMPS
                OUTDATASET(dsname) | SYSOUT(class) | TERMINAL
                SELECT(EMPTY)

  LIST     PRIMARYVOLUME(volser)
                ALLDUMPS | BACKUPCONTENTS(nn)
                BACKUPCONTROLDATASET | MIGRATIONCONTROLDATASET| BOTH
                OUTDATASET(dsname) | SYSOUT(class) | TERMINAL
                SELECT(MULTIPLEVOLUME VSAM)

  LIST    TAPETABLEOFCONTENTS
                OUTDATASETNAME(dsname) | SYSOUT(class) | TERMINAL
                BACKUPCONTROLDATASET | MIGRATIONCONTROLDATASET | BOTH
                SELECT(
                 MIGRATIONLEVEL2 | BACKUP | BOTH
                 NOALTERNATEVOLUME | ALTERNATEVOLUME | FAILEDRECYCLE |
                 FAILEDCREATE | EXCESSIVEVOLUMES | RECALLTAKEAWAY |
                 DISASTERALTERNATEVOLUMES
                 EMPTY | FULL | NOTFULL | ASSOCIATED | NOTASSOCIATED
                 ERRORALTERNATE |
                 CONNECTED(volser) | NOTCONNECTED
                 LIB(ALTERNATE) | NOLIB(ALTERNATE) )

  LIST    TAPETABLEOFCONTENTS(volser)
               OUTDATASET(dsname) | SYSOUT(class) | TERMINAL
               BACKUPCONTROLDATASET | MIGRATIONCONTROLDATASET | BOTH
               NODATASETINFORMATION | DATASETINFORMATION

  LIST     USER(userid)
               OUTDATASET(dsname) | SYSOUT(class) | TERMINAL

))LOG      data

))MIGRATE  DATASETNAME(dsname) | MIGRATIONLEVEL1 | PRIMARY |
           VOLUME(volser1 MIGRATE(days)
           DELETEBYAGE(days) | DELETEIFBACKEDUP(days)| MIGRATE(days))
                CONVERT(volser2 unittype2)
                DAYS(days)
                MIGRATIONLEVEL1
                MIGRATIONLEVEL2
                TERMINAL
                UNIT(unittype)

))PATCH    address
           data | BITS(bits)
                OUTDATASET(dsname)
                VERIFY(address data | BITS(bits))
                VOLSER(volser)

))QUERY         ABARS
                ACTIVE
                ARPOOL(agname)
                AUTOPROGRESS
                BACKUP(ALL | DAILY(day) | SPILL | UNASSIGNED)
                CDSVERSIONBACKUP
                COMMONQUEUE(RECALL)
                CONTROLDATASETS
                COPYPOOL(cpname)
                CSALIMITS
                DATASETNAME(dsname) | REQUEST(reqnum) | USER(userid)
                MIGRATIONLEVEL2
                POOL
                RETAIN
                SECURITY
                SETSYS
                SPACE(volser ...)
                STARTUP
                STATISTICS
                TRAPS
                VOLUMEPOOL
                WAITING

))RECALL   dsname
                DAOPTION(SAMETRK | RELTRK | RELBLK)
                DFDSSOPTION(RETRY | VOLCOUNT(N(nn) | ANY) |
                    RETRY VOLCOUNT(N(nn) | ANY))
                FORCENONSMS
                UNIT(unittype)
                VOLUME(volser)

))RECOVER  dsname
                DAOPTION(SAMETRK | RELTRK | RELBLK)
                DATE(date) | DATE(date) TIME(time) |
                    GENERATION(gennum) | VERSION(vernum)
                DFDSSOPTION(RETRY | VOLCOUNT(N(nn) | ANY) |
                    RETRY VOLCOUNT(N(nn) | ANY))
                FORCENONSMS
                FROMDUMP(DUMPCLASS(class) | DUMPVOLUME(volser)
                         SOURCEVOLUME(volser))
                FROMVOLUME(volser)
                NEWNAME(newdsname)
                REPLACE
                TOVOLUME(volser)
                UNIT(unittype)

))RECOVER  *
                TOVOLUME(volser)
                UNIT(unittype)
                     DATE(date)
                     FROMDUMP(DUMPCLASS(class) | DUMPVOLUME(volser) |
                              DUMPGENERATION(dgennum) APPLYINCREMENTAL)
                     TARGETVOLUME(volser)

                     TERMINAL

))RECYCLE  ALL | BACKUP | DAILY(day) | ML2 | SPILL | VOLUME(volser)
           CHECKFIRST(Y | N)
           DISPLAY | EXECUTE | VERIFY
                OUTDATASET(dsname)
                TAPELIST( PULLSIZE(size) TOTAL(count) PREFIX(prefix) |
                                                      FULLDSNAME(dsn))
                FORCE
                PERCENTVALID(pct)
                LIMIT(netfreed)

))RELEASE       ABACKUP(agname)
                ALL
                ARECOVER AGGREGATE(agname)|DATASETNAME(controlfiledsn)
                AUDIT
                AUTOMIGRATION
                BACKUP(AUTO
                       DSCOMMAND(
                                 DASD |
                                 TAPE))
                COMMONQUEUE(
                  RECALL(
                         SELECTION | PLACEMENT))
                DUMP(AUTO | FASTREPLICATIONBACKUP)
                EXPIREBV
                FRBACKUP
                FRRECOV(
                 DATASET | TAPE)
                HARDCOPY
                LIST
                LOG
                MIGRATION(AUTO)
                RECALL(TAPE(TSO))
                RECOVER(TAPEDATASET)
                RECYCLE
                REPORT
                TAPECOPY
                TAPEREPL

))REPORT  DAILY
          DELETE
          FROMDATE(date)
          OUTDATASET(dsname) | SYSOUT(class)
          NOFUNCTION | FUNCTION
          (BACKUP | DELETE | MIGRATION(FROMANY | FROMMIGRATIONLEVEL1 |
                                       FROMPRIMARY)
                                      (TOANY | TOMIGRATIONLEVEL1 |
                                       TOMIGRATIONLEVEL2) |
          RECALL(FROMANY | FROMMIGRATIONLEVEL1 | FROMMIGRATIONLEVEL2)|
          RECOVER | RECYCLE(BACKUP | MIGRATION | ALL) | SPILL))
          SUMMARY
          TODATE(date)
          VOLUMES(volser ...)

))SETMIG   DATASETNAME(dsname) | LEVEL(qualifier) | VOLUME(volser)
                COMMANDMIGRATION | MIGRATION | NOMIGRATION

))SETSYS        ABARSPROCNAME(abarsprocname)
                ABARSACTLOGTYPE(SYSOUT(class) | DASD)
                ABARSACTLOGMSGLVL(FULL | REDUCED)
                ABARSBUFFERS(n)
                ABARSDELETEACTIVITY(Y | N)
                ABARSKIP(PPRC | XRC | NOPPRC | NOXRC)
                ABARSOPTIMIZE(1|2|3|4)
                ABARSPROCNAME(name)
                ABARSTAPES(STACK | NOSTACK)
                ABARSUNITNAME(unittype)
                ABARSVOLCOUNT(NONE | ANY)
                ACCEPTPSCBUSERID | NOACCEPTPSCBUSERID
                ACTLOGMSGLVL(FULL | EXCEPTIONONLY | REDUCED)
                ACTLOGTYPE(SYSOUT(class) | DASD)
                ARECOVERPERCENTUTILIZED(percent)
                ARECOVERREPLACE | NOARECOVERREPLACE
                ARECOVERTGTGDS(SOURCE|ACTIVITY|DEFERRED|ROLLEDOFF)
                ARECOVERUNITNAME(unittype)
                ARECOVERML2UNIT(unittype)
                AUTOBACKUPSTART(hhmm1(hhmm2(hhmm3)))
                AUTODUMPSTART(hhmm1(hhmm2(hhmm3)))
                AUTOMIGRATIONSTART(hhmm1(hhmm2(hhmm3)))
                BACKUP( ANY | DASD | TAPE(unittype)) | NOBACKUP
                BACKUPPREFIX(prefix)
                CDSVERSIONBACKUP
                     (BACKUPCOPIES(backupcopies)
                     DATAMOVER(HSM | DSS)
                     BACKUPDEVICECATEGORY(DASD |
                              TAPE
                              (PARALLEL | NOPARALLEL
                              DENSITY(density)
                              EXPIRATIONDATE(expirationdate) |
                              RETENTIONPERIOD(retentionperiod))
                              UNITNAME(unittype)))
                     BCDSBACKUPDSN(dsname)
                     JRNLBACKUPDSN(dsname)
                     MCDSBACKUPDSN(dsname)
                     OCDSBACKUPDSN(dsname))
                COMMONQUEUE(RECALL
                     (CONNECT(base_name) | DISCONNECT)
                COMPACT((ALL | NONE) | (DASDBACKUP | NODASDBACKUP)
                        (DASDMIGRATE | NODASDMIGRATE)
                        (TAPEBACKUP | NOTAPEBACKUP)
                        (TAPEMIGRATE | NOTAPEMIGRATE))

                COMPACTPERCENT(pct)

                CONVERSION((REBLOCKBASE | REBLOCKTOANY |
                           REBLOCKTOUNLIKE) | NOCONVERSION)

                CSALIMITS(ACTIVE(percent 1)
                          INACTIVE(percent 2)
                          MAXIMUM(Kbytes)
                          MWE(#mwes)) | NOCSALIMITS

                DAYS(days)
                DEBUG | NODEBUG
                DEFERMOUNT|NODEFERMOUNT
                DENSITY(2 | 3 | 4)
                DFHSMDATASETSERIALIZATION | USERDATASETSERIALIZATION
                DISASTERMODE(Y|N)

                DSBACKUP(DASDSELECTIONSIZE(maximum standard)
                         DASD(TASKS(nn))
                         TAPE(TASKS(nn)
                              DEMOUNTDELAY(MINUTES(minutes)
                                           MAXIDLETASKS(drives))))

                DSSXMMODE(Y | N) |
                  (BACKUP(Y | N)  CDSBACKUP(Y | N)  DUMP(Y | N)
                   MIGRATION(Y | N)  RECOVERY(Y | N))
                DUMPIO(1 | 2 | 3 | 4, 1 | 2 | 3 | 4)
                DUPLEX(BACKUP(Y | N) |
                       MIGRATION(Y ERRORALTERNATE(CONTINUE | MARKFULL)|
                                 N) |
                       BACKUP(Y | N)
                       MIGRATION(Y ERRORALTERNATE(CONTINUE | MARKFULL)|
                                 N))
                EMERGENCY | NOEMERGENCY
                ERASEONSCRATCH | NOERASEONSCRATCH
                EXITOFF(modname, modname, ...)
                EXITON(modname, modname, ...)
                EXITS(abcdefghi)
                EXPIREDDATASETS(SCRATCH | NOSCRATCH)
                EXPORTESDS(CIMODE | RECORDMODE)
                EXTENDEDTTOC(Y | N)
                FASTREPLICATION(DATASETRECOVERY(PREFERRED |
                                REQUIRED | NONE))
                FREQUENCY(days)
                INCREMENTALBACKUP(CHANGEDONLY | ORIGINAL)
                INPUTTAPEALLOCATION(WAIT | NOWAIT)
                INTERVALMIGRATION | NOINTERVALMIGRATION
                JES2 | JES3
                JOURNAL(RECOVERY | SPEED) | NOJOURNAL
                MAXABARSADDRESSSPACE(number)
                MAXBACKUPTASKS(tasks)
                MAXCOPYPOOLTASKS(
                   FRBACKUP(nn) FRRECOV(nn) DSS(nn))
                MAXDSRECOVERTASKS(tasks)
                MAXDSTAPERECOVERTASKS(tasks)
                MAXDUMPTASKS(tasks)
                MAXDUMPRECOVERTASKS(tasks)
                MAXEXTENTS(extents)
                MAXINTERVALTASKS(nn)
                MAXMIGRATIONTASKS(nn)
                MAXRECALLTASKS(tasks)
                MAXSSMTASKS(CLEANUP(nn) TAPEMOVEMENT(mm))
                MIGDENSITY(2 | 3 | 4)
                MIGRATEPREFIX(prefix)
                MIGRATIONCLEANUPDAYS(recalldays statdays reconnectdays)
                MIGRATIONLEVEL1DAYS(days)
                MIGUNITNAME(unittype)
                ML1OVERFLOW(DATASETSIZE(dssize) THRESHOLD(threshold))
                ML2PARTIALSNOTASSOCIATEDGOAL(nnn | NOLIMIT)
                ML2RECYCLEPERCENT(pct)
                MONITOR(BACKUPCONTROLDATASET(thresh)
                        JOURNAL(thresh)
                        MIGRATIONCONTROLDATASET(thresh)
                        OFFLINECONTROLDATASET(thresh)
                        SPACE | NOSPACE
                        STARTUP | NOSTARTUP
                        VOLUME | NOVOLUME)
                MOUNTWAITTIME(minutes)
                OBJECTNAMES(name1,name2,...)
                OPTIMUMDASDBLOCKING | NOOPTIMUMDASDBLOCKING
                OUTPUTTAPEALLOCATION(WAIT | NOWAIT)
                PARTIALTAPE(MARKFULL | REUSE |
                     MIGRATION(MARKFULL | REUSE)
                     BACKUP(MARKFULL | REUSE))
                PDA(NONE | ON | OFF)
                PLEXNAME(plexname)
                PRIMARYSPMGMTSTART(hhmm1 (hhmm2))
                PROFILEBACKUP | NOPROFILEBACKUP
                PROMOTE(PRIMARYHOST(YES | NO) SSM(YES | NO))
                RACFIND | NORACFIND
                RECALL(ANYSTORAGEVOLUME(LIKE | UNLIKE) |
                       PRIVATEVOLUME(LIKE | UNLIKE))
                RECYCLEOUTPUT(BACKUP(unittype) MIGRATION(unittype))
                RECYCLEPERCENT(pct)
                RECYCLETAPEALLOCATION(WAIT | NOWAIT)
                REMOVECOMPACTNAMES(name1,name2,...)
                REQUEST | NOREQUEST
                SCRATCHFREQUENCY(days)
                SECONDARYSPMGMTSTART(hhmm1 (hhmm2))
                SELECTVOLUME(SCRATCH | SPECIFIC |
                   MIGRATION(SCRATCH | SPECIFIC) |
                   BACKUP(SCRATCH | SPECIFIC) |
                   DUMP(SCRATCH | SPECIFIC) )
                SKIPABPRIMARY | NOSKIPABPRIMARY
                SMALLDATASETPACKING(tracks | KB(kilobytes)) |
                NOSMALLDATASETPACKING
                SMF(smfid) | NOSMF
                SOURCENAMES(name1,name2,...)
                SPILL(ANY | DASD | TAPE(unittype)) | NOSPILL
                SWAP | NOSWAP
                SYSOUT(class(copies forms))
                SYS1DUMP | NOSYS1DUMP
                TAPEDELETION(SCRATCHTAPE | HSMTAPE |
                     MIGRATION(SCRATCHTAPE | HSMTAPE)
                     BACKUP(SCRATCHTAPE | HSMTAPE)
                     DUMP(SCRATCHTAPE | HSMTAPE))
                TAPEFORMAT(SINGLEFILE)
                TAPEHARDWARECOMPACT | NOTAPEHARDWARECOMPACT
                TAPEINPUTPROMPT(MIGRATIONTAPES(YES | NO)
                               BACKUPTAPES(YES | NO)
                               DUMPTAPES(YES | NO))
                TAPEMAXRECALLTASKS(tasks)
                TAPEMIGRATION(DIRECT(TAPE(ANY | unittype)) |
                               ML2TAPE(TAPE(ANY | unittype)) |
                               NONE(ROUTETOTAPE(ANY | unittype))
                               RECONNECT(NONE |
                                         ALL |
                                         ML2DIRECTEDONLY))

                TAPEOUTPUTPROMPT(TAPECOPY(YES|NO))
                TAPESECURITY((EXPIRATION | EXPIRATIONINCLUDE)
                               PASSWORD (RACF | RACFINCLUDE))
                TAPESPANSIZE(nnn)
                TAPEUTILIZATION
                  (UNITTYPE(unittype) PERCENTFULL(pct | NOLIMIT) |
                  (LIBRARYBACKUP PERCENTFULL(pct | NOLIMIT) )    |
                  (LIBRARYMIGRATION PERCENTFULL(pct | NOLIMIT) )

                UNITNAME(unittype)
                UNLOAD | NOUNLOAD
                USERUNITTABLE(ES1,ES1OUT : ES2IN,ES3 : ES3) |
                NOUSERUNITTABLE
                VERSIONS(limit)
                VOLCOUNT(NONE | ANY)
                VOLUMEDUMP(NOCC | STANDARD |
                           CC | PREFERRED |REQUIRED |
                           VIRTUALPREFERRED | VIRTUALREQUIRED |
                           CACHEPREFERRED | CACHEREQUIRED)
                USECYLINDERMANAGEDSPACE(Y|N)

))STOP          DUMP PROMOTE

))SWAPLOG

))TAPECOPY ALL | MIGRATIONLEVEL2 | BACKUP |
           ORIGINALVOLUMES(ovol1,ovol2,...ovoln) | INDATASET(dsname)
                ALTERNATEVOLUMES(avol1,avol2...avoln)
                EXPDT((cc)yyddd) | RETPD(nnnn)
                ALTERNATEUNITNAME(unittype1,unittype2) |
                ALTERNATE3590UNITNAME(unittype1,unittype2) |
                ALTERNATEUNITNAME(unittype1,unittype2)
                     ALTERNATE3590UNITNAME(unittype1,unittype2)

 ))TAPEREPL ALL | BACKUP |
            INDATASET(volrepl.list.dsname) |
            MIGRATION |
            ONLYDISASTERALTERNATES(
                                   RESET) |
            ORIGINALVOLUMES(ovol1,ovol2,...ovoln)
                 ALTERNATEUNITNAME(unittype)
                 ALTERNATEVOLUMES(avol1,avol2...avoln)
                 DISASTERALTERNATEVOLUMES

))TRAP     ALL | module
                error code
                ABEND(ALWAYS | NEVER | ONCE) |
                LOG | OFF |
                SNAP(ALWAYS | NEVER | ONCE)

))UPDATEC  ALL | BACKUPCONTROLDATASET | MIGRATIONCONTROLDATASET |
           OFFLINECONTROLDATASET
                JOURNAL(dsname)
./ ADD NAME=HSMLOG
//HSMLOG   JOB ?JOBPARM
//*
//****************************************************************/
//*         THIS SAMPLE JOB PRINTS THE DFSMSHSM LOG              */
//*                                                              */
//* REPLACE THE ?UID VARIABLE IN THE FOLLOWING SAMPLE JOB WITH   */
//* THE NAME OF THE DFSMSHSM -AUTHORIZED USERID (1 TO 7 CHARS).  */
//*                                                              */
//* (NOTE: UID AUTHORIZATION IS VALID IN A NON-FACILITY CLASS    */
//* ENVIRONMENT ONLY, OTHERWISE, FACILITY CLASS PROFILES         */
//* WILL BE USED FOR AUTHORIZATION CHECKING.)                    */
//****************************************************************/
//*
//PRINTLOG EXEC PGM=ARCPRLOG
//ARCPRINT DD SYSOUT=*
//ARCLOG DD DSN=?UID.HSMLOGY1,DISP=OLD
//ARCEDIT DD DSN=?UID.EDITLOG,DISP=OLD
//*
//EMPTYLOG EXEC PGM=IEBGENER
//SYSPRINT DD SYSOUT=*
//SYSIN DD DUMMY
//SYSUT2 DD DSN=?UID.HSMLOGY1,DISP=OLD
//SYSUT1 DD DUMMY,DCB=(?UID.HSMLOGY1)
/*
./ ADD NAME=HSMEDIT
//EDITLOG  JOB ?JOBPARM
//*
//****************************************************************/
//*           THIS JOB PRINTS THE EDIT-LOG DATA SET              */
//*                                                              */
//* REPLACE THE FOLLOWING ?UID VARIABLE WITH THE NAME OF THE     */
//* DFSMSHSM-AUTHORIZED USER (1 TO 7 CHARS).                     */
//* (NOTE: UID AUTHORIZATION IS VALID IN A NON-FACILITY CLASS    */
//* ENVIRONMENT ONLY, OTHERWISE, FACILITY CLASS PROFILES WILL BE */
//* USED FOR AUTHORIZATION CHECKING.)                            */
//****************************************************************/
//*
//EDITLOG EXEC PGM=ARCPEDIT
//ARCPRINT DD SYSOUT=*
//ARCLOG DD DSN=?UID.EDITLOG,DISP=SHR
/*
./ ADD NAME=ALLOCBK1
//ALLOCBK1 JOB ?JOBPARM
//ALLOCBK EXEC PGM=IEFBR14
//*
//*****************************************************************/
//*    THIS SAMPLE JOB ALLOCATES AND CATALOGS THE CONTROL DATA SET*/
//*    BACKUP VERSION DATA SETS ON DASD VOLUMES.                  */
//*                                                               */
//*    ENSURE THAT BACKUP VERSION DATA SETS ARE PLACED ON VOLUMES */
//*    THAT ARE DIFFERENT FROM THE VOLUMES THAT THE CONTROL DATA  */
//*    SETS ARE ON.                                               */
//*                                                               */
//*    THIS SAMPLE JOB ALLOCATES FOUR BACKUP COPIES (THE DEFAULT) */
//*    FOR EACH CONTROL DATA SET.  IF YOU SPECIFY A DIFFERENT     */
//*    NUMBER OF BACKUP VERSIONS, ENSURE THAT YOU ALLOCATE A      */
//*    BACKUP COPY FOR EACH OF THE BACKUP VERSIONS YOU SPECIFY.   */
//*****************************************************************/
//*                                                               */
//*    EDIT THIS JCL TO REPLACE THE PARAMETERS DESCRIBED BELOW.   */
//*                                                               */
//*****************************************************************/
//*  PARAMETER PARAMETER DEFINITION
//*
//*  ?BKUNIT1   -  UNIT TYPE OF VOLUME TO CONTAIN THE FIRST CDS
//*                BACKUP VERSION.
//*  ?BKUNIT2   -  UNIT TYPE OF VOLUME TO CONTAIN THE SECOND CDS
//*                BACKUP VERSION.
//*  ?BKUNIT3   -  UNIT TYPE OF VOLUME TO CONTAIN THE THIRD CDS
//*                BACKUP VERSION.
//*  ?BKUNIT4   -  UNIT TYPE OF VOLUME TO CONTAIN THE FOURTH CDS
//*                BACKUP VERSION.
//*  ?BKVOL1    -  VOLUME SERIAL OF VOLUME TO CONTAIN THE FIRST CDS
//*                BACKUP VERSION.
//*  ?BKVOL2    -  VOLUME SERIAL OF VOLUME TO CONTAIN THE SECOND CDS
//*                BACKUP VERSION.
//*  ?BKVOL3    -  VOLUME SERIAL OF VOLUME TO CONTAIN THE THIRD CDS
//*                BACKUP VERSION.
//*  ?BKVOL4    -  VOLUME SERIAL OF VOLUME TO CONTAIN THE FOURTH CDS
//*                BACKUP VERSION.
//*  ?SCBVOL1   -  STORAGE CLASS NAME FOR BACKUP VERSIONS
//*  ?MCDFHSM   -  MANAGEMENT CLASS NAME OF THE HSM CONSTRUCT
//*
//*  ?CDSSIZE   -  NUMBER OF CYLINDERS ALLOCATED TO CDS BACKUP
//*                VERSIONS.
//*  ?JNLSIZE   -  NUMBER OF CYLINDERS ALLOCATED TO JOURNAL DATA
//*                SETS.
//*  ?UID       -  AUTHORIZED USER ID (1 TO 7 CHARS) FOR THE HSM-
//*                STARTED PROCEDURE. THIS WILL BE USED AS THE
//*                HIGH-LEVEL QUALIFIER OF HSM DATA SETS.
//* (NOTE: UID AUTHORIZATION IS VALID IN A NON-FACILITY CLASS    */
//* ENVIRONMENT ONLY, OTHERWISE, FACILITY CLASS PROFILES WILL BE */
//* USED FOR AUTHORIZATION CHECKING.)                            */
//*****************************************************************/
//*
//******************************************************************/
//* THIS PROCEDURE ASSUMES A SINGLE CLUSTER MCDS.  IF MORE THAN    */
//* ONE VOLUME IS DESIRED, FOLLOW THE RULES FOR A MULTICLUSTER     */
//* CDS.                                                           */
//******************************************************************/
//*
//MCDSV1 DD DSN=?UID.MCDS.BACKUP.V0000001,DISP=(,CATLG),UNIT=?BKUNIT1,
//   VOL=SER=?BKVOL1,SPACE=(CYL,(?CDSSIZE,5)),STORCLAS=?SCBVOL1,
//   MGMTCLAS=?MCDFHSM
//MCDSV2 DD DSN=?UID.MCDS.BACKUP.V0000002,DISP=(,CATLG),UNIT=?BKUNIT2,
//   VOL=SER=?BKVOL2,SPACE=(CYL,(?CDSSIZE,5)),STORCLAS=?SCBVOL1,
//   MGMTCLAS=?MCDFHSM
//MCDSV3 DD DSN=?UID.MCDS.BACKUP.V0000003,DISP=(,CATLG),UNIT=?BKUNIT3,
//   VOL=SER=?BKVOL3,SPACE=(CYL,(?CDSSIZE,5)),STORCLAS=?SCBVOL1,
//   MGMTCLAS=?MCDFHSM
//MCDSV4 DD DSN=?UID.MCDS.BACKUP.V0000004,DISP=(,CATLG),UNIT=?BKUNIT4,
//   VOL=SER=?BKVOL4,SPACE=(CYL,(?CDSSIZE,5)),STORCLAS=?SCBVOL1,
//   MGMTCLAS=?MCDFHSM
//*
//******************************************************************/
//* REMOVE THE NEXT FOUR DD STATEMENTS IF YOU DO NOT INTEND TO USE */
//* BACKUP AND DUMP                                                */
//*                                                                */
//* THIS PROCEDURE ASSUMES A SINGLE CLUSTER BCDS.  IF MORE THAN    */
//* ONE VOLUME IS DESIRED, FOLLOW THE RULES FOR A MULTICLUSTER     */
//* CDS.                                                           */
//******************************************************************/
//*
//BCDSV1 DD DSN=?UID.BCDS.BACKUP.V0000001,DISP=(,CATLG),UNIT=?BKUNIT1,
//   VOL=SER=?BKVOL1,SPACE=(CYL,(?CDSSIZE,5)),STORCLAS=?SCBVOL1,
//   MGMTCLAS=?MCDFHSM
//BCDSV2 DD DSN=?UID.BCDS.BACKUP.V0000002,DISP=(,CATLG),UNIT=?BKUNIT2,
//   VOL=SER=?BKVOL2,SPACE=(CYL,(?CDSSIZE,5)),STORCLAS=?SCBVOL1,
//   MGMTCLAS=?MCDFHSM
//BCDSV3 DD DSN=?UID.BCDS.BACKUP.V0000003,DISP=(,CATLG),UNIT=?BKUNIT3,
//   VOL=SER=?BKVOL3,SPACE=(CYL,(?CDSSIZE,5)),STORCLAS=?SCBVOL1,
//   MGMTCLAS=?MCDFHSM
//BCDSV4 DD DSN=?UID.BCDS.BACKUP.V0000004,DISP=(,CATLG),UNIT=?BKUNIT4,
//   VOL=SER=?BKVOL4,SPACE=(CYL,(?CDSSIZE,5)),STORCLAS=?SCBVOL1,
//   MGMTCLAS=?MCDFHSM
//*
//******************************************************************/
//* REMOVE THE NEXT FOUR DD STATEMENTS IF YOU DO NOT INTEND TO USE */
//* TAPE VOLUMES FOR DAILY BACKUP VOLUMES, SPILL BACKUP VOLUMES,   */
//* OR MIGRATION LEVEL 2 VOLUMES.                                  */
//*                                                                */
//* THE OCDS MAY NOT EXCEED 1 VOLUME.                              */
//******************************************************************/
//*
//OCDSV1 DD DSN=?UID.OCDS.BACKUP.V0000001,DISP=(,CATLG),UNIT=?BKUNIT1,
//   VOL=SER=?BKVOL1,SPACE=(CYL,(?CDSSIZE,5)),STORCLAS=?SCBVOL1,
//   MGMTCLAS=?MCDFHSM
//OCDSV2 DD DSN=?UID.OCDS.BACKUP.V0000002,DISP=(,CATLG),UNIT=?BKUNIT2,
//   VOL=SER=?BKVOL2,SPACE=(CYL,(?CDSSIZE,5)),STORCLAS=?SCBVOL1,
//   MGMTCLAS=?MCDFHSM
//OCDSV3 DD DSN=?UID.OCDS.BACKUP.V0000003,DISP=(,CATLG),UNIT=?BKUNIT3,
//   VOL=SER=?BKVOL3,SPACE=(CYL,(?CDSSIZE,5)),STORCLAS=?SCBVOL1,
//   MGMTCLAS=?MCDFHSM
//OCDSV4 DD DSN=?UID.OCDS.BACKUP.V0000004,DISP=(,CATLG),UNIT=?BKUNIT4,
//   VOL=SER=?BKVOL4,SPACE=(CYL,(?CDSSIZE,5)),STORCLAS=?SCBVOL1,
//   MGMTCLAS=?MCDFHSM
//*
//JRNLV1 DD DSN=?UID.JRNL.BACKUP.V0000001,DISP=(,CATLG),UNIT=?BKUNIT1,
//   VOL=SER=?BKVOL1,SPACE=(CYL,(?JNLSIZE,5)),STORCLAS=?SCBVOL1,
//   MGMTCLAS=?MCDFHSM
//JRNLV2 DD DSN=?UID.JRNL.BACKUP.V0000002,DISP=(,CATLG),UNIT=?BKUNIT2,
//   VOL=SER=?BKVOL2,SPACE=(CYL,(?JNLSIZE,5)),STORCLAS=?SCBVOL1,
//   MGMTCLAS=?MCDFHSM
//JRNLV3 DD DSN=?UID.JRNL.BACKUP.V0000003,DISP=(,CATLG),UNIT=?BKUNIT3,
//   VOL=SER=?BKVOL3,SPACE=(CYL,(?JNLSIZE,5)),STORCLAS=?SCBVOL1,
//   MGMTCLAS=?MCDFHSM
//JRNLV4 DD DSN=?UID.JRNL.BACKUP.V0000004,DISP=(,CATLG),UNIT=?BKUNIT4,
//   VOL=SER=?BKVOL4,SPACE=(CYL,(?JNLSIZE,5)),STORCLAS=?SCBVOL1,
//   MGMTCLAS=?MCDFHSM
./ ADD NAME=ALLOSDSP
//ALLOSDSP JOB ?JOBPARM
//*
//*****************************************************************/
//*   THIS SAMPLE JOB DEFINES AND INITIALIZES A SMALL-DATA-SET-   */
//*   PACKING DATA SET ON A MIGRATION LEVEL 1 VOLUME.             */
//*                                                               */
//*   THE DATA SET NAME IS REQUIRED TO BE ?UID.SMALLDS.V?SDSPVOL  */
//*   WHERE ?UID IS THE AUTHORIZED DFSMSHSM USER ID AND WHERE     */
//*   ?SDSPVOL IS THE VOLUME SERIAL NUMBER OF A MIGRATION LEVEL 1 */
//*   VOLUME.                                                     */
//*                                                               */
//* (NOTE: UID AUTHORIZATION IS VALID IN A NON-FACILITY CLASS    *//
//* ENVIRONMENT ONLY, OTHERWISE, FACILITY CLASS PROFILES WILL BE *//
//* USED FOR AUTHORIZATION CHECKING.)                            *//
//*                                                               */
//*                                                               */
//*   AFTER YOU ALLOCATE THE SMALL-DATA-SET-PACKING DATA SET ON A */
//*   MIGRATION LEVEL 1 VOLUME, YOU MUST SPECIFY THE              */
//*   SMALLDATASETPACKING PARAMETER ON THE SETSYS COMMAND IN THE  */
//*   ARCCMD__ PARMLIB MEMBER AND ON THE ADDVOL COMMAND FOR THE   */
//*   VOLUME THAT CONTAINS THE SMALL-DATA-SET-PACKING DATA SET.   */
//*                                                               */
//*   CHANGE THE PARAMETERS LISTED BELOW TO VALID VALUES FOR YOUR */
//*   SYSTEM.                                                     */
//*****************************************************************/
//*  PARAMETER  -  PARAMETER DESCRIPTION
//*
//*  ?SDSPCIS   -  CONTROL INTERVAL SIZE VALUE FOR THE DATA COMPONENT
//*                OF THE SDSP DATA SET. IF THE SDSP UNIT TYPE IS
//*                3350, REPLACE ?SDSPCIS WITH 16384.  IF THE SDSP
//*                UNIT TYPE IS 3380, REPLACE WITH 20480.
//*                IF THE SDSP UNIT TYPE IS 3390, REPLACE WITH 26624.
//*  ?SDSPUNT   -  UNIT TYPE FOR MIGRATION LEVEL 1 VOLUME TO
//*                CONTAIN SMALL-DATA-SET-PACKING DATA SET.
//*  ?SDSPVOL   -  VOLUME SERIAL OF THE MIGRATION LEVEL 1 VOLUME
//*                TO CONTAIN SMALL-DATA-SET-PACKING DATA SET.
//*  ?UID       -  AUTHORIZED USER ID (1 TO 7 CHARS) FOR THE DFSMShsm
//*                START PROCEDURE, IN A NON FACILITY CLASS ENVIRONMENT.
//*                USED AS THE HIGH-LEVEL QUALIFIER OF DFSMSHSM
//*                DATA SETS.
//*
//* NOTE:         ENSURE THAT THE SMALL-DATA-SET-PACKING DATA SET
//*               IS NOT ALLOCATED ON AN SMS VOLUME. THE DATA SET
//*               SHOULD BE DEFINED IN A STORAGE CLASS FILTER TO
//*               EXCLUDE IT FROM AN SMS VOLUME AS THE OTHER DFSMShsm
//*               DATA SETS ARE.
//*****************************************************************/
//*****************************************************************/
//* CREATE A ONE-RECORD, SEQUENTIAL DATA SET TO BE USED LATER TO  */
//* PRIME VSAM CLUSTERS DEFINED FOR DFSMSHSM.                     */
//*****************************************************************/
//*
//IEBDG    EXEC PGM=IEBDG
//SYSPRINT DD SYSOUT=*
//PRIMER   DD DSN=?UID.SDSP.PRIMER,DISP=(NEW,CATLG),UNIT=SYSDA,
// DCB=(RECFM=F,LRECL=200,BLKSIZE=200),SPACE=(TRK,(1))
//SYSIN    DD *
 DSD OUTPUT=(PRIMER)
 FD NAME=A,LENGTH=44,STARTLOC=1,PICTURE=44,                            X
   'Z9999999999999999999999999999999999999999999'
 CREATE NAME=A
 END
//STEP1 EXEC PGM=IDCAMS,REGION=512K
//SYSPRINT DD SYSOUT=*
//INPRIMER DD DSN=?UID.SDSP.PRIMER,DISP=(OLD,DELETE)
//SDSP1 DD UNIT=?SDSPUNT,VOL=SER=?SDSPVOL,DISP=SHR
//SYSIN DD *
 DEFINE CLUSTER (NAME(?UID.SMALLDS.V?SDSPVOL) VOLUMES(?SDSPVOL) -
        CYLINDERS(5 0) FILE(SDSP1) -
        RECORDSIZE(2093 2093) FREESPACE(0 0) -
        INDEXED KEYS(45 0) -
        SPEED BUFFERSPACE(530432) -
        UNIQUE NOWRITECHECK) -
        DATA -
        (CONTROLINTERVALSIZE(?SDSPCIS)) -
        INDEX -
        (CONTROLINTERVALSIZE(1024))
 REPRO ODS('?UID.SMALLDS.V?SDSPVOL') INFILE(INPRIMER)
./ ADD NAME=HSMPRESS
//COMPRESS JOB ?JOBPARM
//*
//****************************************************************/
//*  THIS SAMPLE JOB IS TO COMPRESS THE CONTROL DATA SETS.       */
//*                                                              */
//*  NOTE:  BEFORE RUNNING THIS JOB, YOU MUST SHUT DOWN ALL      */
//*         ALL INSTANCES OF DFSMSHSM THAT SHARE THE CDS'S.      */
//*                                                              */
//* REPLACE THE ?UID VARIABLE WITH THE NAME OF THE DFSMSHSM-     */
//* AUTHORIZED USER ID (1 TO 7 CHARACTERS).                      */
//*                                                              */
//* (NOTE: UID AUTHORIZATION IS VALID IN A NON-FACILITY CLASS    */
//* ENVIRONMENT ONLY, OTHERWISE, FACILITY CLASS PROFILES WILL BE */
//* USED FOR AUTHORIZATION CHECKING.)                            */
//*                                                              */
//* REPLACE THE ?NEW VARIABLE WITH AN EXTENSION NAME FOR THE     */
//* NEW CDS BEING CREATED FROM THE IMPORT.  BECAUSE OF THE NAME  */
//* CHANGE MADE TO THE CDS, MAKE SURE TO UPDATE THE ASSOCIATED   */
//* PROCLIB MEMBER WITH THE NEW CDS NAME(S).                     */
//*                                                              */
//* IF YOU WISH TO ENLARGE THE CDS, PREALLOCATE A LARGER DATA    */
//* SET WITH THE NEW SIZE (EITHER A NEW DATA SET, OR DELETE THE  */
//* OLD DATA SET AND REALLOCATE WITH SAME NAME) THEN IMPORT.     */
//* AGAIN, IF A NEW NAME IS USED, BE SURE TO UPDATE THE          */
//* ASSOCIATED PROCLIB MEMBER WITH THE NEW CDS NAME(S).          */
//*                                                              */
//* THIS PROCEDURE ASSUMES THAT THE MCDS AND BCDS ARE SINGLE     */
//* CLUSTER CDS'S.                                               */
//*                                                              */
//* Note: xCDS'S DD STMTS WITH DISP=OLD WILL KEEP OTHER JOBS     */
//*  FROM ACCESSING THE CDS'S DURING THE EXPORT/IMPORT PROCESS.  */
//****************************************************************/
//*
//ALLOCATE EXEC PGM=IEFBR14
//EXPMCDS DD DSN=?UID.EXPORT.MCDS,DISP=(,CATLG),
// UNIT=SYSDA,SPACE=(CYL,(20,2))
//EXPBCDS DD DSN=?UID.EXPORT.BCDS,DISP=(,CATLG),
// UNIT=SYSDA,SPACE=(CYL,(20,2))
//EXPOCDS DD DSN=?UID.EXPORT.OCDS,DISP=(,CATLG),
// UNIT=SYSDA,SPACE=(CYL,(20,2))
//*
//IDCAMS EXEC PGM=IDCAMS,REGION=512K
//MCDS DD DSN=?UID.MCDS,DISP=OLD
//BCDS DD DSN=?UID.BCDS,DISP=OLD
//OCDS DD DSN=?UID.OCDS,DISP=OLD
//SYSPRINT DD SYSOUT=*
//SYSIN DD *
 LISTCAT ENT(?UID.MCDS ?UID.BCDS ?UID.OCDS) ALL
 EXAMINE NAME(?UID.MCDS) INDEXTEST
 IF LASTCC = 0 THEN -
        EXPORT ?UID.MCDS ODS(?UID.EXPORT.MCDS) TEMPORARY
 IF LASTCC = 0 THEN -
        IMPORT IDS(?UID.EXPORT.MCDS) ODS(?UID.MCDS.?NEW) -
        OBJECTS -
         ((?UID.MCDS -
         NEWNAME(?UID.MCDS.?NEW)) -
          (?UID.MCDS.DATA -
           NEWNAME(?UID.MCDS.?NEW.DATA)) -
          (?UID.MCDS.INDEX -
           NEWNAME(?UID.MCDS.?NEW.INDEX))) -
        CATALOG(?UCATNAM)
 IF MAXCC = 0 THEN -
        DELETE ?UID.EXPORT.MCDS NONVSAM
 EXAMINE NAME(?UID.BCDS) INDEXTEST
 IF LASTCC = 0 THEN -
        EXPORT ?UID.BCDS ODS(?UID.EXPORT.BCDS) TEMPORARY
 IF LASTCC = 0 THEN -
        IMPORT IDS(?UID.EXPORT.BCDS) ODS(?UID.BCDS.?NEW) -
        OBJECTS -
         ((?UID.BCDS -
         NEWNAME(?UID.BCDS.?NEW)) -
          (?UID.BCDS.DATA -
           NEWNAME(?UID.BCDS.?NEW.DATA)) -
          (?UID.BCDS.INDEX -
           NEWNAME(?UID.BCDS.?NEW.INDEX))) -
        CATALOG(?UCATNAM)
 IF MAXCC = 0 THEN -
        DELETE ?UID.EXPORT.BCDS NONVSAM
 EXAMINE NAME(?UID.OCDS) INDEXTEST
 IF LASTCC = 0 THEN -
        EXPORT ?UID.OCDS ODS(?UID.EXPORT.OCDS) TEMPORARY
 IF LASTCC = 0 THEN -
        IMPORT IDS(?UID.EXPORT.OCDS) ODS(?UID.OCDS.?NEW) -
        OBJECTS -
         ((?UID.OCDS -
         NEWNAME(?UID.OCDS.?NEW)) -
          (?UID.OCDS.DATA -
           NEWNAME(?UID.OCDS.?NEW.DATA)) -
          (?UID.OCDS.INDEX -
           NEWNAME(?UID.OCDS.?NEW.INDEX))) -
        CATALOG(?UCATNAM)
 IF MAXCC = 0 THEN -
        DELETE ?UID.EXPORT.OCDS NONVSAM
 LISTCAT ENT(?UID.MCDS.NEW ?UID.BCDS.NEW ?UID.OCDS.NEW) ALL
/*
$$
