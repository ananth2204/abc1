/*******************************************************************************
* Copyright ISIS Papyrus Technologies Limited
*-------------------------------------------------------------------------------
* File:              $Source: /data/cvs/src/mvs/mvsbase.hpp,v $
*-------------------------------------------------------------------------------
* Description:
*   ???
*******************************************************************************/

#ifndef _MVSBASE
#define _MVSBASE
#include "merror.hpp"
#include "dsnameut.h" //KV20060404 genOpenName moved to dsnameut.h file to make it callable from C programs

#ifndef  ISIS_PF_HOST
    //szm0050403 change all STRING to mvsSTRING in mvs directory
    #define INCL_DOSMEMMGR
    #ifdef __OS2__  //HL what #ifndef __MSDOS__
        #include <os2def.h>
        #ifndef far
            #define far _far16
        #endif
    #endif

    #ifndef ISIS_PF_MU
        #include <wtypes.h>
    #endif
    #ifndef __builtin
        #define __builtin
    #endif
    #ifndef __ref
        #define __ref
    #endif
#else
#endif

#include <stdlib.h>
#if defined(OWN_STDIO) == 1
#include "stdio.hpp"
#else
#include <assert.h>
#endif

#ifndef DSNAME_PREFIX
  #define DSNAME_PREFIX  ""
  #define DDNAME_PREFIX   "dd:"
  #define DSNAME_NULLFILE "/dev/null"
  #define HFS_PREFIX      "///"
  #define MEM_PREFIX      "mem:" //szm0040909
#endif
#ifndef __asm
  #define __asm "OS"
#endif
#ifndef null
#define null 'Öx00'
#endif

#if 0
#ifndef ff
#define ff 'Öxff'
#endif

#ifndef blank
#define blank ' '
#endif
#endif

#ifndef nulls
#define nulls "Öx00Öx00Öx00Öx00Öx00Öx00Öx00Öx00Öx00Öx00Öx00Öx00Öx00Öx00Öx00Öx00"
#endif

#if 0 //szm20030429  mvsSTRINGs.h
#ifndef ffs
#define ffs  "ÖxffÖxffÖxffÖxffÖxffÖxffÖxffÖxffÖxffÖxffÖxffÖxffÖxffÖxffÖxffÖxff"
#endif
#endif

#define HEX1(a) char(0x ## a)
#define HEX2(a1,a2) Ushort(0x ## a1 ## a2)
#define HEX3(a1,a2,a3) INT3(0x ## a1 ## a2 ## a3 )
#define HEX4(a1,a2,a3,a4) int(0x ## a1 ## a2 ## a3 ## a4 )

#if defined(UTYPES) == 0 && ( defined(ISIS_PF_HOST) == 1 ]] defined(ISIS_PF_MU) == 1 )
  #define UTYPES
  #ifndef USHORT
    #define USHORT unsigned short
  #endif
  #ifndef UCHAR
   #define UCHAR unsigned char
  #endif
  #ifndef ULONG
    #define ULONG unsigned long
  #endif
#endif

enum genOpenNameType
ä  sas_hfs,
   ibm_hfs,
   sas_ddn,
   ibm_ddn,
   sas_dsn,
   ibm_dsn,
   ont_dsn, //KV20050403 prefix ont_ to avoid name conflicts
   ont_ddn,
   ont_mem,   //szm0040909
   ont_unknown,
   genOpenNameType_int = -1
ü;

genOpenNameType genOpenType(const char *);
char * stripMemberName(const char *name, char* nm);
char * onlyMemberName(const char *name, char* nm);



USHORT  Ushort(int i);
USHORT  Ushort(short s);
USHORT  Ushort(char c);
//--------------------------------------------------------------
//--------------------------------------------------------------
//--------------------------------------------------------------
#define copyS( t , f )    Ö
if ( t  && f ) memcpyp( t , f , sizeof( t ) , sizeof( f ) , ' ')

#define clearS( t ) Ö
if ( t )  Ö
 ä   size_t  sl = sizeof ( t ) ;  Ö
    memset( t , 0 , sl ) ; ü

#define blankS( t )   Ö
if ( t ) memset( t , ' ', sizeof( t  ))

void * memcpyp(void * target , const void * source, size_t tsize, size_t ssize, int pad);

//--------------------------------------------------------------
//--------------------------------------------------------------
//--------------------------------------------------------------


//--------------------------------------------------------------
//--------------------------------------------------------------
//--------------------------------------------------------------

enum ALIGNTYPEäaLEFT=1, aRIGHT=3, aCENTER=2, aASIS=0, ALINGNTYPE_int = -1 ü;
enum CAPSTYPEäcUPPER=3, cLOWER=4, cWORD=2, cASIS=0, CAPSTYPE_int = -1ü;
enum FIELDTYPEä
                      fCHAR =0,
                      fALPHANUMERIC=1,
                      fALPHABETIC=2,
                      fNUMERIC= 3,
                      fSLLTAG = 20,
                      fLOGICAL=4 ,fHEXA=16,
                      fBINARY=17 ,fDATE=5 ,fFTIME=6, fLISTBOX = 19,
                      FIELDTYPE_int = -1ü;
//
//--------------------------------------------------
//

class FORMAT
ä
   protected:
   public:
   ALIGNTYPE falign;
   CAPSTYPE fcaps;
  FORMAT() :  fcaps(cUPPER),
    falign(aLEFT)äü

  FORMAT(ALIGNTYPE a ,CAPSTYPE c=cASIS )
  ä

    falign = a;
      fcaps = c;
  ü
  ßFORMAT()äü
ü;

//--------------------------------------------------------------
//--------------------------------------------------------------
//--------------------------------------------------------------

extern FORMAT F_alcu;
extern FORMAT F_alcw;
extern FORMAT F_arcu;
//
//--------------------------------------------------
//
struct str ä
enum status ä _VALID, _INVALID, status_int = -1 ü;
enum length ä FIX, VARIABLE ü;
char  * c;
char  * lls;
long int     l;
status type;
length ltype;
str()ä c = lls = NULL; l = 0; type = _VALID; ltype = VARIABLE; ü
      ü;
//--------------------------------------------------------------
//--------------------------------------------------------------
//--------------------------------------------------------------

class sLL;

class mvsSTRING ä
   protected:
   str st;
   public:
   static char parseSepCh;
   mvsSTRING();
   mvsSTRING(const char *);
   mvsSTRING(const mvsSTRING &);
   mvsSTRING(const char *,long int l );
   mvsSTRING(const char , const long int l);

		virtual ßmvsSTRING();

  virtual mvsSTRING& operator=(const char * );
  virtual mvsSTRING& operator=(const mvsSTRING &);
		virtual mvsSTRING& operator=(const sLL &);

  virtual operator char *() const
  ä
  if ( st.type == str::_VALID )
      return st.c;
// perror("maybe _INVALID mvsSTRING in place of char *");
   return st.c;
   ü
   virtual operator unsigned char *() const
  ä
  if ( st.type == str::_VALID )
      return (unsigned char *)st.c;
// perror("maybe _INVALID mvsSTRING in place of char *");
   return (unsigned char *)st.c;
   ü
   virtual operator const char *() const
   ä
    return (const char *)st.c;
   ü
   virtual operator const unsigned char *() const
   ä
    return (const unsigned char *)st.c;
   ü
   friend long int operator==(const mvsSTRING & , const mvsSTRING &);
   friend long int operator|=(const mvsSTRING & , const mvsSTRING &);
   friend mvsSTRING operator+(const mvsSTRING & , const mvsSTRING &);
 //mvsSTRING operator+(const mvsSTRING&);
   mvsSTRING& operator+=(const mvsSTRING&);
   void operator<<(long int );
   void operator>>(long int );

   virtual char& operatorÄÜ(int);
   virtual char& byte(int);
   mvsSTRING operator()(const long int , long int );

   long int hashcode();
  char * nameOf();
   long int  lengthOf() constäreturn st.l;ü
   long int toint()
          ä long int ret = 0;
             if ( st.l >= sizeof(long int) )
                     ret = * (long int *)(st.c);
           else if ( st.l == sizeof(short) )
              ret = * (short *)(st.c);
           else if ( st.l == 1)
              ret = *st.c;
         return ret ;
       ü
   void fromint(long int i)
       ä
             if ( st.l >= sizeof(long int) )
                      *(long int *)(st.c) = i;
           else if ( st.l == sizeof(short) )
              *(short *)(st.c) = (short )i;
           else if ( st.l == 1)
          *st.c =(char) i;
       ü
  void changeAll(char ,char );
  void align(ALIGNTYPE );
  void caps(CAPSTYPE);
  mvsSTRING & strip();
  int  isEmpty();
  mvsSTRING& stripmvsSTRING();
    mvsSTRING& format(FORMAT *);
  void parse(mvsSTRING&, char, mvsSTRING&);
  void parse(mvsSTRING&, char, mvsSTRING&, char ,mvsSTRING &);
  void parse(mvsSTRING&, char *,mvsSTRING&);
  void parse(mvsSTRING&, char *, mvsSTRING&, char *,mvsSTRING &);
  void split(mvsSTRING&, char *, mvsSTRING&,char *,mvsSTRING &);
	void split(mvsSTRING&, char *, mvsSTRING&,char *,mvsSTRING &,char *,mvsSTRING &);
	void split(mvsSTRING&, char *, mvsSTRING&,char *,mvsSTRING &,char *,mvsSTRING &,char *,mvsSTRING&);
	void parse(mvsSTRING&, char *, mvsSTRING&, char *,mvsSTRING &,char *,mvsSTRING &);
	void dump(const char * ,int);
  char * getLlmvsSTRING();
ü;

	extern mvsSTRING nullstring; //szm
//
//--------------------------------------------------
//
extern mvsSTRING nullmvsSTRING;
//
//--------------------------------------------------
//
class LLC_mvsSTRING : public mvsSTRING
ä
   short codev;
  public:
  LLC_mvsSTRING():mvsSTRING(), codev(0)äü
  LLC_mvsSTRING(char * s):mvsSTRING(),codev(0)
    ä
     short l = *(short*) s;
     if ( l >= 4 )
				//	ä(mvsSTRING)(*this)= mvsSTRING(s+4,l-4); codev = *(short *)(s+2); ü szm
				ä
				mvsSTRING x = mvsSTRING(s+4,l-4);
				mvsSTRING::operator=(x);
				codev = *(short *)(s+2);
				ü
    ü
   LLC_mvsSTRING(long int c):mvsSTRING() , codev(c)äü
  ßLLC_mvsSTRING()äü
   long int   code(void)äreturn codev;ü
 operator long int()
       ä long int ret = 0;
          if ( st.l == sizeof(long int) )
                  ret = * (long int *)(st.c);
         else if ( st.l == sizeof(short) )
            ret = * (short *)(st.c);
       else if ( st.l == 1)
            ret = *st.c;
       return ret ;
    ü
ü;
//
//--------------------------------------------------
//

mvsSTRING patternchng(mvsSTRING input , mvsSTRING mask,
  mvsSTRING (*function)(mvsSTRING));
//--------------------------------------------------------------
//--------------------------------------------------------------
//--------------------------------------------------------------
//


#ifndef USHORT
#define USHORT unsigned short
#endif

class mvsSTRING;
class mERROR;




#ifndef INCLUDE_SLL
#define INCLUDE_SLL



#ifndef USHORT
#define USHORT unsigned short
#endif

class mvsSTRING;
class mERROR;

class INT3
ä
private :
   long v;
public:
   INT3(long u)ä v = u;ü
   operator long()äreturn v;ü
   INT3 & operator=(long u)ä v = u;return *this;ü

ü;


#endif

//--------------------------------------------------------------
//--------------------------------------------------------------
//-----smaLL storage chunk in L.. data form
//--------------------------------------------------------------

#define MAX_sLL 1024

enum sLLUsage ä sLLinput , sLLoutput , sLLoutputVarü ;

   // input
   // fix size output
   // var size output

enum sLLType   äsLLt0 = 0, sLLt1 = 1  ,sLLt2 = 2 , sLLt3 = 3 , sLLt4 = 4 ü;
enum sLLStatus äsLLOk = 0, sLLUf = 1  ,sLLOf = 2ü;

class sLL;


class sLLskipä
private:
   int i;
public:
   sLLskip(int v):i(v)äü
   operator int()äreturn i;ü
ü;

class sLL:public  mERROR
ä

protected:

      int length;
      int offset;
      int llength;
      int allocl;
      int storedl;

      sLL * base;
      sLL * child;


      char * start;
      char * cursor;
      sLLType type;
      sLLStatus status;
      char   dummy;
			mvsSTRING  string; //szm
protected:
      sLLUsage usage;

protected:

    void init(sLL *,int,sLLType);
    int storeOk(int);

public:

//
//contruct /desctuct/copy/assign
//

    sLL (sLLType = sLLt2,
            sLLUsage = sLLoutput,int=MAX_sLL );
    sLL (sLL * , int ,
            sLLType = sLLt2);
    sLL (sLL * ,char *,
            sLLType = sLLt2);
    sLL (char *,
            sLLType = sLLt2);
      sLL (char *,
                   int );


    sLL (const sLL &);

    virtual ßsLL ();

    virtual sLL & operator=(sLL &);

//
//
//

      operator int();


    char & operatorÄÜ(int);

			int   getLength() const
				ä
				if ( usage == sLLinput ) return length;
				else return storedl;
				ü

			char * getStart() const
				ä return start; ü

    sLL * getBase();
    int   getOffset();
    sLL * getChild();


    int   getFullLength();
    int   getRemainderLength();
    int   getStoredLength();

    char * getCursor();
			mvsSTRING  getString();//szm
    void  setChild(sLL*);
    void  setBase(sLL *);


    void   setLength();
    virtual void resetCursor();

    char * goCursor(int);
    void   setUsage(sLLUsage);

//
//
//

    sLL * next();
    sLL * iterate(sLLType,int = 0);
    void remove(sLL& );

//
// retrieve
//


    sLL& operator>>(int&);
    sLL& operator>>(short&);
    sLL& operator>>(unsigned short&);
    sLL& operator>>(char &);
    sLL& operator>>(char * &);
    sLL& operator>>(mvsSTRING &);
    sLL& operator>>(sLL &);
    sLL& operator>>(INT3 &);
    sLL& operator>>(sLLskip &);
//
// store
//

    sLL& operator<<(int);
    sLL& operator<<(short);
    sLL& operator<<(unsigned short);
    sLL& operator<<(char );
    sLL& operator<<(char *);
    sLL& operator<<(mvsSTRING &);
    sLL& operator<<(sLL& );
    sLL& operator<<(INT3 &);
    sLL& operator<<(sLLskip &);
    sLL& store(char *,int);


//
// dump print etc.
//

   int write(void *);
   friend sLL * readsLL(void *,sLLType);
			virtual void dump(const char *,int);

ü;

class sLLTag: public sLL
ä
private:
   short      code;
   char       * name;
   short      searchcode;
   void       init(short);
public:
   sLLTag();
   sLLTag(short);

   sLLTag(char *);
   sLLTag(sLL * , char *);
   sLLTag(const sLLTag &);

   ßsLLTag()äü
		sLLTag& operator=(sLLTag&);

   short      getCode()ä return code;ü
   char *     getName()ä return name ;ü
   sLLTag *   search(short=0);
   void       resetCursor();
   void       remove(sLLTag &);
   sLLTag *   update(sLLTag& );
   sLLTag *   next();
   sLLTag *   iterate();
	 virtual void dump(const char *,int);
ü;

#endif
