/*******************************************************************************
* Copyright ISIS Papyrus Technologies Limited
*-------------------------------------------------------------------------------
* File:              $Source: /data/cvs/src/mvs/subtask.hpp,v $
*-------------------------------------------------------------------------------
* Description:
*   ???
*******************************************************************************/


#ifndef INCLUDE_SUBTASK
#define INCLUDE_SUBTASK
#include "merror.hpp"
#include "mvsbase.hpp"
#include "msgmgr.hpp"

#if defined(ISIS_PF_MI) ]] defined (ISIS_PF_MU) //szm
#define		__alignmem
#define		__local
#endif

#ifndef PSA_CONST
#define PSA_CONST
const  unsigned PSATOLD = 0x21c;
const  unsigned PSAAOLD = 0x224;
const  unsigned TCBFSA  = 0x70/4;
const  unsigned TCBUSER = 0xA8;
const  unsigned tcbuser = 0xa8;
const  unsigned SAVEr1  = 0x18/4;
static unsigned POSTcode = 0x40000000;
static unsigned WAITcode = 0x80000000;
#endif

class SUBTASK;
class JOBENV;


typedef void       (*SUBTASK_FUNCTION)(void*);
typedef void       * addressP;
inline addressP getASCB()äreturn(*(addressP*)PSAAOLD);ü
inline addressP getTCB()äreturn (*(addressP *)PSATOLD);ü


enum SUBTASK_STATUS
ä
    Reset,
    Started,
    WaitingForWork,
    WaitingForMain,
    Working,
    Stopping
ü;
typedef struct PROGRAM_ARGUMENTS ä
  short  arg_l;
  char   arg_vÄ1024Ü;
  ü programArguments;

__alignmem class SUBTASK: public mERROR
ä
private:
  char * dll;
protected:
  MessageTEXT * messageText;
  JOBENV *      jobEnv;
  void * TCB;
  unsigned ECB;
  unsigned StopECB;
  unsigned WorkECB;
  unsigned MainECB;
  unsigned SuspendECB;
  unsigned *  ecblistÄ2Ü;
  __local void(* address)(void);
  void (*subrun)();
  int R15 ;
  SUBTASK_FUNCTION functionsÄ4Ü;
  void  * argÄ4Ü;
  int subtask_rc;
  int suspendflag;
  SUBTASK_STATUS status;
  char   nameÄ9Ü;
  char   subtaskposted;
  char   first_start;
  int    timeout;
public:
  friend void run();
  SUBTASK();
  SUBTASK(char *);
  SUBTASK(addressP,SUBTASK_FUNCTION,char*);
  SUBTASK(int,char * *,char *,char *);
  virtual ßSUBTASK();
  virtual int    attach();
  virtual int    detach();
  virtual int    callAsync(int);
  virtual int    callSync(int);
  virtual int    waitForSubtask();
  virtual int    waitForEndOfSubtask();
  virtual void   start();
  virtual void   stop();
  virtual void   chap(int);
  virtual void   exit(int);
  virtual int    isTerminated()ä return (ECB&0x7fffffff);ü
  SUBTASK_STATUS askStatus()äreturn status;ü
  MessageTEXT * getMessageText()äreturn messageText;ü
  JOBENV      * getJobEnv()äreturn jobEnv;ü
  addressP      getParam()äreturn(addressP(argV));ü
  addressP      getTCB()äreturn(addressP(TCB));ü
  int           getTimeout()äreturn timeout;ü
  char *        getDllName()ä return dll;ü
  void          setDllName(char *d)ä dll = d;ü
  char * *  argV;
  int       argC;

static addressP GetTCB()äreturn (*(addressP *)PSATOLD);ü
static addressP GetASCB()äreturn(*(addressP*)PSAAOLD);ü

protected:
  int    checkR15(char *);
  void   init(char *);
  void   error(char *);
ü;

__alignmem class DLL_SUBTASK
ä
private:
public:
  SUBTASK * subtask;
  DLL_SUBTASK(int,char * *,char *,char * = "SUBRUN ");
  ßDLL_SUBTASK();
  void      start()äsubtask->start();ü
  void      stop()äsubtask->stop();ü
  int       detach()äreturn(subtask->detach());ü
  addressP  getTCB()äreturn(subtask->getTCB());ü
ü;

__alignmem class MAIN_SUBTASK:public SUBTASK
ä
private:
mvsSTRING startmvsSTRING;
 void * plistÄ1Ü;
programArguments   argument;
programArguments * argumentP;
public:
 MAIN_SUBTASK();
 MAIN_SUBTASK(int,char * *,char *);
 MAIN_SUBTASK(programArguments *,char * );
 virtual int  attach();
ü;

#endif
