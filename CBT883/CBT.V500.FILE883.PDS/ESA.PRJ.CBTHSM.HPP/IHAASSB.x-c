#pragma pack(packed)

struct assb ä
  struct ä
    unsigned char  _assbassbÄ4Ü; /* ACRONYM IN EBCDIC - ASSB.            */
    int            _assbvafn;    /* COUNT OF TASKS IN THE           @D5C */
    ü assbegin;
  double         assbevst;     /* ELAPSED VECTOR USAGE TIME.      @H1A */
  double         assbvfat;     /* ELAPSED VECTOR AFFINITY TIME.   @D1A */
  unsigned char  assbxmf1;     /* CROSS MEMORY FLAGS 1            @L4A */
  unsigned char  assbxmf2;     /* CROSS MEMORY FLAGS 2            @L4A */
  short int      assbxmcc;     /* CROSS MEMORY CONNECTIONS COUNT. @L1A */
  void          *assbcbtp;     /* POINTER TO IHAACBT              @LEC */
  int            assbvsc;      /* VIO SLOT ALLOCATED COUNT.       @D3A */
  int            assbnvsc;     /* NON-VIO SLOT ALLOCATED COUNT.   @D3A */
  int            assbasrr;     /* ADDRESS SPACE RE-READS TO BE    @D4C */
  void          *assbdexp;     /* POINTER TO IHADEXP              @LDC */
  struct ä
    int            _assbstw1; /* FIRST WORD OF ASSBSTKN.         @L2C */
    int            _assbisqn; /* INITIAL ADDRESS SPACE SEQUENCE  @L2C */
    ü assbstkn;
  void          *assbbpsa;     /* IBMPM ANCHOR BLOCK.             @02C */
  int            assbcsct;     /* CACHING FACILITY STOP COUNT     @LGA */
  void          *assbbalv;     /* VIRTUAL ADDRESS OF THE BASIC    @L2C */
  void          *assbbald;     /* BASIC ACCESS LIST DESIGNATOR.   @L2C */
  void          *assbxmse;     /* ADDRESS OF XMSE FOR THIS        @L2A */
  int            assbtsqn;     /* NEXT TTOKEN SEQUENCE NUMBER.    @L3A */
  int            assbvcnt;     /* COUNT OF CURRENT TASKS WITH     @D5A */
  void          *assbpalv;     /* PASN ACCESS LIST VIRTUAL        @D6C */
  void          *assbasei;     /* ADDRESS OF ADDRESS SPACE        @D6C */
  void          *assbrma;      /* ADDRESS OF ADDRESS SPACE        @D6C */
  double         assbhst;      /* RSM SERVICE TIME FOR HIPERSPACE @L8C */
  double         assbiipt;     /* IOS I/O INTERRUPT PROCESSING    @L5A */
  int            assbanec;     /* ALESERV ADD WITH NO EAX COUNT.  @L6A */
  void          *assbsdov;     /* ADDRESS OF SHARED DATA OBJECT   @LDC */
  int            assbmcso;     /* NUMBER OF CONSOLE IDS ACTIVATED @LAA */
  void          *assbdfas;     /* ADDRESS OF DFP=SMSX STRUCTURE   @L7A */
  struct ä
    unsigned char  _assbflg0; /* ASSB FLAG BYTE 0.               @D7C */
    unsigned char  _assbflg1; /* ASSB FLAG BYTE 1                @LIC */
    unsigned char  _assbflg2; /* ASSB FLAG BYTE 2.               @D7C */
    unsigned char  _assbflg3; /* ASSB FLAG BYTE 3 - RESERVED.    @D7C */
    ü assbflgs;
  void          *assbascb;     /* ADDRESS OF ASCB.                @L9C */
  void          *assbasrf;     /* CREATED ASSB FORWARD POINTER.   @L9A */
  void          *assbasrb;     /* CREATED ASSB BACKWARD POINTER.  @L9A */
  void          *assbssd;      /* ADDRESS OF THE SUSPENDED SRB    @D8A */
  void          *assbmqma;     /* CONTROL BLOCK ANCHOR FOR        @06C */
  double         assblasb;     /* TOKEN INDICATING IF MVS/APPC    @LBC */
  void          *assbsch;      /* POINTER TO APPC SCHEDULER       @LBA */
  int            assbfsc;      /* COUNT ACCUMULATED BY IEAMFCNT   @01A */
  void          *assbjsab;     /* ADDRESS OF JOB SCHEDULER        @D9A */
  void          *assbrctw;     /* ADDRESS OF RCT's WEB.           @LSA */
  int            assbcreq;     /* COUNT OF CONCURRENT GQSCAN AND  @04A */
  int            assbcrqa;     /* COUNT OF CONCURRENT AUTHORIZED  @04A */
  void          *assbtlmi;     /* ADDRESS OF TAILORED LOCK        @LOA */
  void          *assbsdas;     /* POINTER TO WORKING STORAGE      @DBA */
  int            assbtpin;     /* THE COUNT OF UCB PIN REQUESTS   @LFA */
  int            assbspin;     /* THE COUNT OF UCB PIN REQUESTS   @LFA */
  int            assbect1;     /* THE COUNT OF ALLOCATION         @H2A */
  int            assbect2;     /* THE COUNT OF ALLOCATION         @H2A */
  int            assbmt_;      /* MEMTERM DISABLE COUNT.  WHEN    @DAA */
  unsigned char  assbdfpÄ4Ü;   /* RESERVED FOR USE BY DFP.        @03A */
  short int      assbnter;     /* Count of Tasks simultaneously   @0AA */
  short int      assbsnew;     /* Count of SASN=NEW connections        */
  void          *assbnttp;     /* ADDRESS OF ADDRESS SPACE LEVEL  @LIA */
  struct ä
    unsigned char  _assboepc; /* POST CODE: '81'X=>BPX1EXC       @LMA */
    struct ä
      unsigned char  _filler1Ä2Ü;  /* Unused.                         @LMA */
      unsigned char  _assboees;    /* Exit Status passed on BPX1EXI.  @LMA */
      ü assboecd;
    ü assboecb;
  void          *assboasb;     /* OpenMVS ADDRESS SPACE BLOCK.    @LLA */
  void          *assbxsba;     /* XSB POOL QUEUE.                 @LKA */
  void          *assbdlcb;     /* Contains the address of the Dynamic  */
  void          *assbvab;      /* ADDRESS OF VSM ADDRESS SPACE    @LNC */
  void          *assblmab;     /* LATCH MANAGER ADDRESS SPACE     @LNC */
  unsigned char  assbr0f8Ä8Ü;  /* Reserved.                       @LYC */
  int            assbxrct;     /* XES REQUEST COUNT               @LQA */
  int            assbetsc;     /* Enclave TCB Summary Count       @M5C */
  void          *assbtasb;     /* TCPIP ASSB Extension            @07A */
  int            assbtpma;     /* OWNER:  IOS.                    @DCA */
  int            assbrosu;     /* OWNER:  IOS.                    @DCA */
  int            assbtpmt;     /* OWNER:  IOS.                    @DCA */
  unsigned char  assbssdtÄ4Ü;  /* SSD Trailer                     @LSC */
  void          *assbtawq;     /* ADDRESS OF TASK WEB QUEUE.      @LSA */
  void          *assbwcml;     /* ADDRESS OF CML PROMOTION WEB.   @LSA */
  void          *assbws3s;     /* ADDRESS OF ASYNCHRONOUS EXIT    @LSA */
  void          *assbwsss;     /* ADDRESS OF SUSPENDED STATUS     @LSA */
  void          *assbcapq;     /* ADDRESS OF FIRST WEB ON THE     @LSC */
  void          *assbptar;     /* Pointer used by RTM processing  @09C */
  int            assbwtct;     /* When this counter is non-zero,       */
  int            assbsbct;     /* XES-owned count of requests     @05A */
  void          *assbarbp;     /* ARM (Automatic Restart Manager) @LVA */
  void          *assbrctr;     /* ADDRESS OF RCT's RB                  */
  void          *assbscah;     /* Address of the SCA (SPIE/ESPIE  @PAA */
  unsigned char  assbttfl;     /* Transaction Trace flags.        @MCA */
  unsigned char  assbwmf1;     /* WLM flags                       @M8A */
  short int      assbpswc;     /* Preemptable-class SRB short     @P5A */
  void          *assbixga;     /* Pointer to SLC address space    @LXC */
  double         assbjbni;     /* Jobname for the Initiated       @P1A */
  double         assbjbns;     /* Jobname for the START/MOUNT/    @P1A */
  double         assbasst;     /* Additional SRB Service Time.    @LYA */
  double         assbphtm;     /* Preemptable-class SRB Time. The @LYA */
  void          *assbcrwq;     /* Client Related WEB Queue.       @LYA */
  void          *assbscwq;     /* Suspended Client related WEB    @LYA */
  int            assblcnt;     /* Number of latched operations    @LZA */
  int            assbacnt;     /* Number of asynchronous requests @M1C */
  int            assblcpd;     /* CPOOLID of the cpool created    @M1A */
  void          *assbpqel;     /* Queue of outstanding GQSCAN     @M2A */
  void          *assbpvtc;     /* Queue of privately managed      @M4A */
  struct ä
    unsigned char  _assbctxf;    /* Context Services flags          @MAM */
    unsigned char  _assbctx2Ä3Ü; /* Reserved context services.      @MAA */
    ü assbctx;
  unsigned char  assbhaleÄ16Ü; /* Copy of Home ALE                @P7A */
  void          *assbrtls;     /* Address of RTLSA                @M6A */
  int            assbsrsn;     /* Suspend/Resume sequence number       */
  void          *assbwlms;     /* Address of WLM managed server   @M8A */
  void          *assbbcba;     /* Address of SOMObjects data structure */
  unsigned char  assbcsmÄ4Ü;   /* CSM user bitmap                 @P9A */
  int            assbpect;     /* Number of Pause elements allocated   */
  void          *assbrrsa;     /* RRS data area pointer           @0EA */
  struct ä
    unsigned char  _assbofl0; /* ASSB USS flag byte 0            @DEA */
    unsigned char  _assbofl1; /* ASSB USS flag byte 1            @DEA */
    ü assboflg;
  unsigned char  assbscafÄ2Ü;  /* CPU affinity indicator          @MDA */
  int            assbctxc;     /* Number of private contexts owned by  */
  int            assbrmct;     /* Number of PKM 8 to 15 resource       */
  void          *assblrba;     /* License manager resource block  @MFA */
  unsigned char  assbr1ccÄ11Ü; /* Reserved.                       @MFC */
  char           assbcsdp;     /* Channel Subsystem I/O Priority. @MEA */
  double         assbend;      /* END OF ASSB.                         */
  ü;

#define assbassb assbegin._assbassb
#define assbvafn assbegin._assbvafn
#define assbstw1 assbstkn._assbstw1
#define assbisqn assbstkn._assbisqn
#define assbflg0 assbflgs._assbflg0
#define assbflg1 assbflgs._assbflg1
#define assbflg2 assbflgs._assbflg2
#define assbflg3 assbflgs._assbflg3
#define assboepc assboecb._assboepc
#define assboees assboecb.assboecd._assboees
#define assbctxf assbctx._assbctxf
#define assbctx2 assbctx._assbctx2
#define assbofl0 assboflg._assbofl0
#define assbofl1 assboflg._assbofl1

/* Values for field "assbxmf1" */
#define assbxeax 0x80 /* ADDRESS SPACE OWNS ENTRY TABLES @L4A */

/* Values for field "assbstw1" */
#define assbstyp 0xF0 /* FIRST 4 BITS REPRESENT STOKEN   @L3A */

/* Values for field "assbflg0" */
#define assbbsdn 0x80 /* BYPASS SVC DUMP                 @D7C */
#define assbcdsi 0x40 /* CDSI Resources Held             @DDA */
#define assbpsch 0x20 /* Parallel Detach SRB scheduled   @09A */

/* Values for field "assbflg1" */
#define assbntar 0x80 /* NAME/TOKEN ADDRESS SPACE        @LIA */
#define assbnttr 0x40 /* NAME/TOKEN JOB STEP TASK        @LIA */
#define assbntsl 0x20 /* JOB STEP HAS CREATED            @LIA */
#define assbfrst 0x10 /* The first pool of SVRBs has     @0CA */

/* Values for field "assbflg2" */
#define assbenfl 0x80 /* IF ON, INDICATES ADDRESS SPACE  @LRA */
#define assbnswf 0x40 /* If on, indicates IEAVEGR found  @LSA */
#define assbpran 0x20 /* No longer set - kept for        @09C */

/* Values for field "assbflg3" */
#define assbarm  0x80 /* The job or STC running in this  @LVA */
#define assbnrst 0x40 /* The Automatic Restart Manager   @LVA */
#define assbgdps 0x20 /* If on, indicates this is the         */

/* Values for field "assbmt_" */
#define assbmtp  0x80 /* MEMTERM PENDING.  TURNED ON     @DAA */

/* Values for field "assbdfp" */
#define assboam  0x80 /* ADDRESS SPACE IS A USER OF OAM  @03A */

/* Values for field "assbttfl" */
#define assbttrc 0x80 /* Transaction Trace has been used.@MCA */

/* Values for field "assbwmf1" */
#define assbwini 0x80 /* WLM Managed Batch initiator     @M8A */
#define assbfsas 0x40 /* WLM Managed OE Forked/Spawned   @M8A */

/* Values for field "assbctxf" */
#define assbncl  0x80 /* There is no limit to the number @MAM */
#define assbmsgi 0x40 /* The message to relax the above  @MAM */
#define assburmx 0x20 /* There is no limit to the number @MAA */
#define assburmm 0x10 /* The message to relax the above  @MAA */

/* Values for field "assbofl0" */
#define assbomsc 0x80 /* USS address space must remain   @DEA */

#pragma pack(reset)
