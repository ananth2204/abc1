{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011427000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 529074, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 6, "INMDSNAM": "CBT.V500.FILE181.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 529074, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 529074, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE181.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\t\\x08'", "DS1TRBAL": "b'4\\xdc'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x01F\\x00\\x00\\x01F\\x00\\t\\x00\\n'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"CATLIST": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x04\\x00\\x00\\x00\\x85\\x16\\x8f\\x00\\x92\\t\\x0f W\\x04 \\x03[\\x00\\xf2\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "02.04", "flags": 0, "createdate": "1985-06-17T00:00:00", "modifydate": "1992-03-30T20:57:00", "lines": 1056, "newlines": 859, "modlines": 242, "user": "LDW"}, "text": "CATLIST  TITLE '-----  PRODUCE CONDENSED LISTING OF ICF CATALOG  -----'\n***********************************************************************\n*                                                                     *\n*                *===================================*                *\n*                *  COPYRIGHT NOTICE AND DISCLAIMER  *                *\n*                *===================================*                *\n*                                                                     *\n*   Copyright (c) 1984, 1985, 1988, 1989 by Leonard D. Woren.         *\n*   All rights reserved, except as explicitly noted herein.  This     *\n*   program may be used, modified, and distributed, provided that     *\n*   all of the following conditions are met:                          *\n*                                                                     *\n*   (1)  This notice and all references to the original author(s)     *\n*        are retained forever in all copies and versions of the       *\n*        source.                                                      *\n*                                                                     *\n*   (2)  This program may be distributed via \"public domain\" mods     *\n*        tapes, such as the SHARE mods tape, the CBT (Connecticut     *\n*        Bank and Trust) tape, the LA MVSUG (Los Angeles MVS User's   *\n*        Group) tape, etc, etc.  Only versions of this program        *\n*        authorized by Leonard D. Woren may be placed on these        *\n*        tapes.  Distribution of modified versions of this program,   *\n*        via the above named tapes or via any method, is              *\n*        specifically prohibited.  (Please note the reason stated     *\n*        below.)                                                      *\n*                                                                     *\n*   (3)  Permission is specifically NOT given to distribute MODIFIED  *\n*        versions of this program.  Modified versions may be used     *\n*        only at the site making the mods.  (Please note the reason   *\n*        stated below.)                                               *\n*                                                                     *\n*   (4)  The only charge which may be made for distribution is to     *\n*        recover real costs, such as postage, or creating a tape.     *\n*                                                                     *\n*   (5)  The only charge for running the program which may be made    *\n*        is your normal charge for computer time.                     *\n*                                                                     *\n*   The reason for the restrictions on distribution of modified       *\n*   versions is to try to prevent circulation of many different       *\n*   versions of the program, each with a few features that aren't     *\n*   in any other version.                                             *\n*                                                                     *\n*   Since everyone will benefit from this, please send all updates    *\n*   to me.  (Address below.)  I will try merge them in, if they       *\n*   have been made to a reasonably current version of the source,     *\n*   and if they are in keeping with the general design of the rest    *\n*   of the program.  Mods may be altered by me for this purpose.      *\n*   Any such mods which are incorporated into the program will then   *\n*   become governed by the restrictions specified here for the whole  *\n*   program, with appropriate credit to the contributor.              *\n*                                                                     *\n*   Although this program has been extensively tested, and is in use  *\n*   in a production environment (MVS/ESA release 3.1, with DFP 3.1),  *\n*   no guarantee is made of (or responsibility assumed for) correct   *\n*   or reliable operation.  I may try to help with problems.  I do    *\n*   not assume any responsibility to distribute updates.              *\n*                                                                     *\n*                                                                     *\n*   CONTACT:                                                          *\n*          Leonard D. Woren                                           *\n*        snail-mail:                                                  *\n*          University of Southern California                          *\n*          University Park  Mail Code 0251                            *\n*          Los Angeles, CA   90089-0251                               *\n*                                                                     *\n*        e-mail:                                                      *\n*          LDW@USCMVSA.BITNET                                         *\n*          LDW@MVSA.USC.EDU                                           *\n*          ...!usc!ldw (last resort)                                  *\n*                                                                     *\n*          (213) 740-2875 (direct -- 11 am to 7 pm Pacific time)      *\n*                                                                     *\n*          I prefer electronic mail.  If you call me long distance    *\n*          and leave a msg because you didn't get me, there's a good  *\n*          chance that I won't call back.  Moral:  don't leave a      *\n*          message for me to call you back unless you're in 213,      *\n*          818, 714, or 310.  Sorry.                                  *\n*                                                                     *\n*          SHARE installation code:  USC                              *\n*          GUIDE installation code:  OUY                              *\n*                                                                     *\n***********************************************************************\n         EJECT ,\n*---------------------------------------------------------------------*\n*                                                                     *\n*   PROGRAM NAME:  CATLIST                                            *\n*                                                                     *\n*   PURPOSE:       PRINT A CONDENSED LISTING OF WHAT'S CATALOGED IN   *\n*                  AN ICF CATALOG BY READING EITHER THE CATALOG       *\n*                  ITSELF (APF AUTHORIZATION REQUIRED) OR AN          *\n*                  'EXPORT TEMP' COPY OF AN ICF CATALOG.              *\n*                                                                     *\n*   AUTHOR:        LEONARD D. WOREN                                   *\n*                                                                     *\n*   DATE:          FEBRUARY 15, 1984                                  *\n*                                                                     *\n*   ATTRIBUTES:    NONE                                               *\n*                                                                     *\n*   JCL:                                                              *\n*        //CATLIST  EXEC PGM=CATLIST                                  *\n*        //SYSPRINT  DD  SYSOUT=*                                     *\n*        //CATIN     DD  DISP=SHR,DSN=CATALOG.NAME                    *\n*                                                                     *\n*   UPDATES:                                                          *\n*      29OCT89  LDW  ADD CODE TO READ ICF CATALOG DIRECTLY            *\n*      29MAY88  LDW  FIX FOR UNKNOWN RECORD TYPES                     *\n*      06/17/85 LDW  ADD SUPPORT FOR TYPES 'T' AND 'C'                *\n*                    RENAME FROM ICFCATL TO CATLIST                   *\n*      05/08/84 LDW  ADD LINECNT= PARM                                *\n*                                                                     *\n*---------------------------------------------------------------------*\n         EJECT ,\n         MACRO\n&NFS     TYPENT  &TYPE,&DESC\n         LCLC  &WHERE\n&WHERE   SETC  '-1'\n         AIF   (K'&TYPE EQ 2).GEN\n&WHERE   SETC  'TYPE$&TYPE-$'\n         AIF   ('&TYPE' NE '?').GEN\n&WHERE   SETC  'TYPE$$-$'\n.GEN     ANOP\n&NFS     DC    Y(&WHERE),CL1'&TYPE',CL10&DESC,XL3'00',F'0'\n         SPACE 1\n         MEND\n         SPACE 3\nCATLIST  OSENTER  EXIT=LEAVE,RC=0,PARMREG=R2,LENREG=R3,ADDRREG=R4,     $\n               ENV=(CALL,SIM),BASE2=R11\n$        EQU   CATLIST                  MAS'S STUNT\nLINK     EQU   R10                      INTERNAL LINKAGE REGISTER\n         LTR   R3,R3                    ANY PARM?\n         SPACE 1\nPARMLOOP BNP   NO$PARM                  NO - SKIP\n         CH    R3,=H'4'                 LONG ENOUGH?\n         BL    NO$PARM                  NO - SKIP\n         CLC   =C'TEST',0(R4)           PARM=TEST?\n         BNE   PARM$01                  NO - try next\n         OI    FLAGS,FTEST              YES - SET FLAG FOR LATER\n         LA    R4,5(,R4)                -> NEXT PARM ITEM\n         SH    R3,=H'5'                 DECREMENT LENGTH\n         B     PARMLOOP                 CONTINUE IF MORE PARM\n         SPACE 2\nPARM$01  CH    R3,=H'5'                 LONG ENOUGH?\n         BL    NO$PARM                  NO - SKIP\n         CLC   =C'PSWD=',0(R4)          PARM=PSWD=xxxx?\n         BNE   PARM$02                  NO - try next\n         LA    R4,5(,R4)                -> password\n         SH    R3,=H'5'                 DECREMENT LENGTH\n         BNP   NO$PARM                  skip if nothing left\n         LA    R1,CAT#PSWD+1            -> target\n         LA    R0,8                     max length\n         SPACE 1\nPSWD$LP  MVC   0(1,R1),0(R4)            move one char of password\n         LA    R1,1(,R1)                bump output ptr\n         LA    R4,1(,R4)                bump input ptr\n         BCT   R3,*+8                   continue if more parm\n         B     NO$PARM                  nothing left - stop\n         BCT   R0,PSWD$LP               move next char of password\n         B     PARMLOOP                 CONTINUE IF MORE PARM\n         SPACE 2\nPARM$02  CH    R3,=H'10'                LONG ENOUGH?\n         BL    NO$PARM                  NO - SKIP\n         CLC   =C'LINECNT=',0(R4)       PARM=LINECNT=NN?\n         BNE   NO$PARM                  NO - SKIP\n         IC    R0,8(,R4)                GET FIRST DIGIT\n         IC    R1,9(,R4)                GET SECOND DIGIT\n         N     R0,=F'15'                STRIP IT\n         N     R1,=F'15'                STRIP IT\n         MH    R0,=H'10'                SCALE FIRST DIGIT\n         AR    R0,R1                    COMBINE DIGITS\n         SH    R0,=H'7'                 ADJUST FOR MY OVERHEAD\n         STH   R0,LINECT                SAVE FOR PUTLINE'S USE\n         LA    R4,11(,R4)               -> NEXT PARM ITEM\n         SH    R3,=H'11'                DECREMENT LENGTH\n         B     PARMLOOP                 CONTINUE IF MORE PARM\n         SPACE 3\nNO$PARM  RDJFCB  CATIN                  GET THE JFCB\n         LTR   R15,R15                  OK?\n         BZ    OK$JFCB                  YES\n         ABEND 98,DUMP\n         SPACE 2\nOK$JFCB  TM    JFCDSRG2,JFCORGAM        VSAM?\n         BZ    GO$OPEN                  NO - SKIP\n         OI    FLAGS,FACB               YES - REMEMBER WE'RE USING ACB\n         LA    R0,CATACB                YES - ALTER OPEN LIST TO ...\n         ST    R0,OPENMFL               ... POINT TO ACB INSTEAD OF DCB\n         SPACE 2\nGO$OPEN  OPEN  MF=(E,OPENMFL)\n         SPACE 1\n         LTR   R15,R15                  OPEN OK?\n         BNZ   ABEND99                  NO\n**       TM    CATIN+48,X'10'\n         L     R1,OPENMFL               -> CATIN OR CATACB\n         TM    48(R1),X'10'\n         BNO   ABEND99\n         TM    SYSPRINT+48,X'10'\n         BO    OPENOK\nABEND99  ABEND 99\nOPENOK   TM    FLAGS,FACB               USING ACB?\n         BZ    NOT$VSAM                 NO - READ EXPORT HEADER RECORDS\n         MVC   HEADER1+33(44),JFCBDSNM  PUT CATALOG NAME INTO MY HEADER\n         SPACE 1\n         TODAY HEADER1+80,TIME=HEADER1+103  CURRENT DATE/TIME INTO HDR\n         SPACE 2\n         GETMAIN  RU,LV=32767,SP=2      get a buffer\n         SPACE 1\n         ST    R1,ADDRREC               save for later\n         SPACE 1\n         MODCB RPL=CATRPL,AREA=(R1)     put buffer address into RPL\n         SPACE 2\n         B     LOOP                     START PROCESSING\n         SPACE 3\nNOT$VSAM BAL   LINK,GETCATIN            READ EXPORT HEADER REC # 1\n         MVC   HEADER1+80(8),X'18'(R1)  PUT HIS DATE INTO MY HEADER\n         MVC   HEADER1+91(8),X'10'(R1)  PUT HIS TIME INTO MY HEADER\n         BAL   LINK,GETCATIN            READ EXPORT HEADER REC # 2\n         BAL   LINK,GETCATIN            READ EXPORT HEADER REC # 3\n******** MVC   HEADER1+33(44),X'BF'(R1) PUT CATALOG NAME INTO MY HEADER\n         BAL   LINK,GETCATIN            READ EXPORT HEADER REC # 4\n         BAL   LINK,GETCATIN            READ EXPORT HEADER REC # 5\n         MVC   HEADER1+33(44),9(R1)     PUT CATALOG NAME INTO MY HEADER\n         BAL   LINK,GETCATIN            READ EXPORT HEADER REC # 6\n         BAL   LINK,GETCATIN            READ EXPORT HEADER REC # 7\n         BAL   LINK,GETCATIN            READ EXPORT HEADER REC # 8\n         BAL   LINK,GETCATIN            READ EXPORT HEADER REC # 9\n         EJECT\n*---------------------------------------------------------------------*\n*  MAIN LOOP - GET ANOTHER CATALOG RECORD                             *\n*---------------------------------------------------------------------*\nLOOP     MVC   OLINE,BLANKS             CLEAR PRINT LINE\n         BAL   LINK,GETCATIN            GET A CATALOG RECORD\n**       ST    R1,ADDRREC               SAVE RECORD ADDRESS\n**       LH    R3,4(,R1)                SAVE LENGTH OF RECORD (NOT RDW)\n**       SH    R3,=H'2'                 ADJUST FOR LL\n**       LA    R4,4+2(,R1)              -> FIRST CELL IN RECORD\n*                                       (SKIP RDW (4) & LL (2) )\n         LH    R3,0(,R1)                SAVE LENGTH OF RECORD (NOT RDW)\n         SH    R3,=H'2'                 ADJUST FOR LL\n         LA    R4,2(,R1)                -> FIRST CELL IN RECORD\n         LA    R2,TYPETBL               -> CELL TYPE TABLE\n         SPACE 1\nTYPELOOP CLC   2(1,R4),2(R2)            THIS AN INTERESTING ENTRY TYPE?\n         BE    PROCESS                  YES - USE IT\n         LA    R2,TYPETBLL(,R2)         -> NEXT ENTRY TYPE\n         CLI   0(R2),X'FF'              END OF TABLE?\n         BNE   TYPELOOP                 NO - KEEP LOOKING\n******** B     LOOP                     YES - IGNORE THIS RECORD\n         LA    R2,TYPEUNKN              YES - PROCESS AS UNKNOWN TYPE\n         SPACE 2\nPROCESS  MVC   OL#ENTRY,3(R2)           FILL IN ENTRY TYPE\n         L     R14,16(,R2)              GET ENTRY COUNT\n         LA    R14,1(,R14)              INCREMENT\n         ST    R14,16(,R2)              SAVE UPDATED ENTRY COUNT\n         LH    R15,0(,R2)               GET OFFSET OF ROUTINE\n         B     $(R15)                   INVOKE CORRECT ROUTINE\n         SPACE 3\nGETCATIN TM    FLAGS,FACB               USING ACB?\n         BNZ   GET$ACB                  YES - USE IT\n         SPACE 1\n         GET   CATIN                    GET A COMPLETE CATALOG RECORD\n         SPACE 1\n         LA    R1,4(,R1)                SKIP OVER RDW\n         ST    R1,ADDRREC               SAVE RECORD ADDRESS\n         BR    LINK                     RETURN TO CALLER\n         SPACE 2\nGET$ACB  GET   RPL=CATRPL               READ FROM THAT LOCATION\n         SPACE 1\n         L     R1,ADDRREC               GET RECORD ADDRESS\n         LTR   R15,R15                  O.K.?\n         BZR   LINK                     YES - RETURN TO CALLER\n         ST    R15,DWD\n         MVC   OLINE(66),=C'-*** VSAM GET Error *** R15 = xxxxxxxx RPL $\n               Feedback = xx xx xx ***'\n         HEX   OLINE+30,DWD,LEN=4       R15\n         HEX   OLINE+54,CATRPL+13,LEN=1 feedback (return code)\n         HEX   OLINE+57,CATRPL+14,LEN=1 feedback (component)\n         HEX   OLINE+60,CATRPL+15,LEN=1 feedback (reason code)\n         BAL   LINK,PUTLINEB            PRINT LINE AND CLEAR\n         ABEND 2,DUMP                   NO\n         EJECT ,\n*---------------------------------------------------------------------*\n*  PROCESS ENTRY TYPE 'NONVSAM'         PAGE 82                       *\n*---------------------------------------------------------------------*\n         USNGX NVNC,R4\nTYPE$A   MVC   OL#NAME,NVNAME           ENTRY NAME TO PRINT LINE\n         LH    R2,NVOLCNT               GET VOLUME COUNT\n         DROPX R4                       NVNC\n         BAL   LINK,NEXTCELL            ADVANCE TO NEXT CELL\n         BAL   LINK,SKIP$OWN       %%%  SKIP REQUIRED OWNER CELL\n         BAL   LINK,SKIP$ASC       %%%  SKIP OPTIONAL ASSOC CELL\n         SPACE 1\nA$VOL$LP BAL   LINK,FMT$VOL             FORMAT VOLUME CELL(S)\n         BCT   R2,*+8                   CONTINUE IF MORE VOLUME CELLS\n         B     A$VOL$EX                 SEE IF ANY MORE CELLS\n         LTR   R3,R3                    ANY LENGTH LEFT?\n         BP    A$VOL$LP                 YES - GO FORMAT NEXT VOL CELL\n         BAL   R14,LOGICERR             NO - DIE\n         SPACE 1\nA$VOL$EX LTR   R3,R3                    ANY LENGTH LEFT?\n         BNP   LOOP                     NO - GO READ NEXT RECORD\n         BAL   R14,LOGICERR             NO - DIE\n         EJECT ,\n*---------------------------------------------------------------------*\n*  PROCESS ENTRY TYPE 'ALIAS'           PAGE 82                       *\n*---------------------------------------------------------------------*\n         USNGX NVNC,R4\nTYPE$X   MVC   OL#NAME,NVNAME           ENTRY NAME TO PRINT LINE\n         BAL   LINK,NEXTCELL            ADVANCE TO NEXT CELL\n         DROPX R4                       NVNC\n         USNGX ASSOCC,R4\n         CLI   ASCTYPE,X'03'            ASSOCIATION CELL?\n         BE    *+8                      YES - OK\n         BAL   R14,LOGICERR             NO - DIE\n*  DON'T CHECK THE NUMBER OF ASSOCIATIONS (ASCOUNT)\n         LA    R5,ASCKEYS               -> FIRST ASSOCIATION ENTRY\n         USNGX ASCKEYS,R5\n         IC    R15,ASCKYLEN             GET LENGTH OF ASSOC KEY\n         BCTR  R15,0                    -1 FOR EX\n         BCTR  R15,0                    -1 FOR SOME OTHER STUPID REASON\n         MVC   OL#MISC(*-*),ASCKEY      << EXECUTED >>\n         EX    R15,*-6                  ASSOCIATED NAME TO PRINT LINE\n         BAL   LINK,PUTLINE\n         BAL   LINK,NEXTCELL            ADVANCE TO NEXT CELL\n         BNP   LOOP                     GET NEXT REC IF NO MORE CELLS\n         B     UNKN$LP                  MORE CELLS - WHAT ARE THEY???\n         SPACE 2\n         DROPX R4,R5                    ASSOCC, ASCKEYS\n         EJECT ,\n*---------------------------------------------------------------------*\n*  PROCESS ENTRY TYPE 'GDG BASE'        PAGE 83                       *\n*---------------------------------------------------------------------*\n         USNGX GDGNC,R4\nTYPE$B   MVC   OL#NAME,GDGNAME          ENTRY NAME TO PRINT LINE\n         LA    R15,GDGNAME+43           -> END OF NAME\n         CLI   0(R15),C' '              FIND END OF NAME?\n         BNE   *+12                     YES - GO COMPUTE LENGTH\n         BCT   R15,*-8                  TRY PREVIOUS CHARACTER\n         BAL   R14,LOGICERR             SCANNED THRU ALL OF STORAGE???\n         LA    R14,GDGNAME-1            -> START OF NAME -1\n         SR    R15,R14                  COMPUTE LENGTH OF BASE NAME\n         STH   R15,GDG#LEN              SAVE LENGTH OF GDG BASE (KEY)\n         MVC   GDG#NAME,GDGNAME         SAVE GDG BASE NAME\n         CLI   GDGNOEXT,0               ANY EXTENSION RECORDS?\n         BE    B$NO$EXT                 NO - OK\n         MVC   OL#UNKN(14),=C'NBR EXT RECS ='\n         HEX   OL#UNKN+15,GDGNOEXT,1\n         DROPX R4                       GDGNC\n         SPACE 2\nB$NO$EXT BAL   LINK,NEXTCELL            ADVANCE TO NEXT CELL\n         BAL   LINK,SKIP$OWN       %%%  SKIP OWNER CELL (REQUIRED)\n         BP    *+8                      CONTINUE IF MORE CELLS\n         BAL   R14,LOGICERR             DIE IF RECORD EXHAUSTED\n         USNGX GATC,R4\n         CLI   GATYPE,X'05'             IS IT A GEN AGING TABLE CELL?\n         BE    *+8                      YES - CONTINUE\n         BAL   R14,LOGICERR             NO - DIE\n         SPACE 1\n         MVC   OL#MISC(6),=C'LIMIT='\n         SR    R0,R0                    CLEAR FOR IC\n         IC    R0,GATLIMIT              GET MAX NUMBER OF ENTRIES\n         CVD   R0,DWD                   CONVERT TO PACKED\n         OI    DWD+7,X'0F'              REMOVE SIGN NIBBLE\n         UNPK  OL#MISC+6(3),DWD\n         SPACE 1\n         MVC   OL#MISC+11(8),=C'CURRENT='\n         SR    R0,R0                    CLEAR FOR IC\n         IC    R0,GATCNT                GET CURRENT NUMBER OF ENTRIES\n         CVD   R0,DWD                   CONVERT TO PACKED\n         OI    DWD+7,X'0F'              REMOVE SIGN NIBBLE\n         UNPK  OL#MISC+19(3),DWD\n         SPACE 1\n         MVC   OL#MISC+25(9),=C'NOSCRATCH'  ASSUME NOSCRATCH\n         TM    GATATTR,GATSCRTH         SCRATCH?\n         BNO   *+10                     NO - OK\n         MVC   OL#MISC+25(2),BLANKS     YES - CHANGE TO '  SCRATCH'\n         SPACE 1\n         MVC   OL#MISC+36(7),=C'NOEMPTY'  ASSUME NOEMPTY\n         TM    GATATTR,GATDELET         EMPTY?\n         BNO   *+10                     NO - OK\n         MVC   OL#MISC+36(2),BLANKS     YES - CHANGE TO '  EMPTY'\n         SPACE 1\n         BAL   LINK,PUTLINE\n         SR    R5,R5                    CLEAR FOR IC\n         IC    R5,GATCNT                GET CURRENT NUMBER OF ENTRIES\n         BAL   LINK,NEXTCELL            ADVANCE TO NEXT CELL\n         BNP   LOOP                     GET NEXT REC IF NO MORE CELLS\n         DROPX R4                       GATC\n         SPACE 10\n*---------------------------------------------------------------------*\n*  PROCESS GDS 'NONVSAM' SUBENTRIES     PAGE 83                       *\n*---------------------------------------------------------------------*\n         SPACE 1\n         USNGX GDSNC,R4\nGDG$LOOP CLI   GDSTYPE,C'H'             IS THIS A GDG NAME CELL?\n         BE    *+8                      YES - CONTINUE\n         BAL   R14,LOGICERR             NO - DIE\n         MVC   OL#ENTRY,TYPEGDGE+3      INDICATE GDG-NONVSAM\n         L     R14,TYPEGDGE+16          GET ENTRY COUNT\n         LA    R14,1(,R14)              INCREMENT\n         ST    R14,TYPEGDGE+16          SAVE UPDATED ENTRY COUNT\n         MVC   OL#NAME(35),GDG#NAME     ENTRY NAME TO PRINT LINE\n         LA    R1,OL#NAME               -> START OF NAME FIELD\n         AH    R1,GDG#LEN               -> END OF GDG BASE NAME\n         SR    R0,R0                    CLEAR FOR ICM\n         ICM   R0,B'0011',GDSGENO       GET GENERATION NUMBER\n         CVD   R0,DWD                   BINARY -> PACKED\n         UNPK  2(4,R1),DWD              PACKED -> PRINTABLE\n         SR    R0,R0                    CLEAR FOR IC\n         IC    R0,GDSVERNO              GET VERSION NUMBER\n         CVD   R0,DWD                   BINARY -> PACKED\n         UNPK  7(2,R1),DWD              PACKED -> PRINTABLE\n         OC    0(9,R1),=C'.G0000V00'    PUT IN MISC, REMOVE SIGNS\n         SPACE 1\n******** LH    R2,GDSVOLCT              GET VOLUME COUNT\n*  APPARENTLY, THE ABOVE NUMBER IS ALWAYS 1 FOR A GDS!!!\n*  SO, USE A DIFFERENT NUMBER...\n         SR    R2,R2                    CLEAR FOR ICM\n         ICM   R2,B'0011',GDSCMPLN      GET LENGTH OF GDS COMPONENT\n*  WHAT DINGBAT PUT A HALFWORD NUMBER NOT HALFWORD ALIGNED???\n         DROPX R4                       GDSNC\n         BAL   LINK,NEXTCELL            ADVANCE TO NEXT CELL\n         BP    *+8                      CONTINUE IF MORE CELLS\n         BAL   R14,LOGICERR             DIE IF RECORD EXHAUSTED\n         SR    R2,R0                    SUBTRACT LENGTH OF PREV CELL\n         USNGX VOLCELL,R4               I HOPE\n         CLI   VOLTYPE,X'01'            OWNER CELL?\n         BNE   H$NO$OWN                 NO - SKIP\n         BAL   LINK,NEXTCELL            ADVANCE TO NEXT CELL\n         BP    *+8                      CONTINUE IF MORE CELLS\n         BAL   R14,LOGICERR             DIE IF RECORD EXHAUSTED\n         SR    R2,R0                    SUBTRACT LENGTH OF PREV CELL\n         BP    *+8                      CONTINUE IF MORE CELLS\n         BAL   R14,LOGICERR             DIE IF RECORD EXHAUSTED\n         SPACE 1\nH$NO$OWN BAL   LINK,SKIP$ASC       %%%  SKIP ASSOC CELL (OPTIONAL)\n         BP    *+8                      CONTINUE IF MORE CELLS\n         BAL   R14,LOGICERR             DIE IF RECORD EXHAUSTED\n         SR    R2,R0                    SUBTRACT LENGTH OF PREV CELL\n         BP    *+8                      CONTINUE IF MORE CELLS\n         BAL   R14,LOGICERR             DIE IF RECORD EXHAUSTED\n         SPACE 1\nH$VOL$LP SH    R2,VOLLEN                SUBTRACT LENGTH OF THIS CELL\n         BAL   LINK,FMT$VOL             FORMAT VOLUME CELL(S)\n         LTR   R2,R2                    DONE WITH THIS COMPONENT?\n         BNP   H$NEXT                   NO - PROCESS NEXT, IF ANY\n         LTR   R3,R3                    ANY LENGTH LEFT?\n         BP    H$VOL$LP                 YES - FORMAT NEXT VOL LINE\n         BAL   R14,LOGICERR             NO - DIE\n         SPACE 1\nH$NEXT   BCT   R5,*+8                   CONTINUE IF MORE GDS ENTRIES\n         B     LOOP                     GET NEXT RECORD IF NO MORE GDS\n         LTR   R3,R3                    ANY LENGTH LEFT?\n         BP    GDG$LOOP                 YES - FORMAT NEXT GDS LINE\n         BAL   R14,LOGICERR             NO - DIE\n         DROPX R4                       VOLCELL\n         EJECT ,\n*---------------------------------------------------------------------*\n*  PROCESS ENTRY TYPE 'TRUENAME'        PAGE 82                       *\n*---------------------------------------------------------------------*\n         USNGX TNC,R4\nTYPE$T   MVC   OL#NAME,TRUENAME         ENTRY NAME TO PRINT LINE\n         MVI   OL#MISC,C'('\n         MVC   OL#MISC+1(1),TRUNTYPE    ENTRY TYPE OF ASSOCIATED ENTRY\n         MVI   OL#MISC+2,C')'\n         BAL   LINK,NEXTCELL            ADVANCE TO NEXT CELL\n         DROPX R4                       NVNC\n         SPACE 2\n         USNGX ASSOCC,R4\n         CLI   ASCTYPE,X'03'            ASSOCIATION CELL?\n         BE    *+8                      YES - OK\n         BAL   R14,LOGICERR             NO - DIE\n*  DON'T CHECK THE NUMBER OF ASSOCIATIONS (ASCOUNT)\n         LA    R5,ASCKEYS               -> FIRST ASSOCIATION ENTRY\n         USNGX ASCKEYS,R5\n         IC    R15,ASCKYLEN             GET LENGTH OF ASSOC KEY\n         BCTR  R15,0                    -1 FOR EX\n         BCTR  R15,0                    -1 FOR SOME OTHER STUPID REASON\n         MVC   OL#MISC+5(*-*),ASCKEY    << EXECUTED >>\n         EX    R15,*-6                  ASSOCIATED NAME TO PRINT LINE\n         BAL   LINK,PUTLINE\n         BAL   LINK,NEXTCELL            ADVANCE TO NEXT CELL\n         BZ    LOOP                     GET NEXT REC IF NO MORE CELLS\n         B     UNKN$LP                  MORE CELLS - WHAT ARE THEY???\n         SPACE 2\n         DROPX R4,R5                    ASSOCC, ASCKEYS\n         EJECT ,\n*---------------------------------------------------------------------*\n*  PROCESS ENTRY TYPE 'CLUSTER'         PAGE 83                       *\n*---------------------------------------------------------------------*\n         USNGX VCNC,R4\nTYPE$C   MVC   OL#NAME,CLNAME           ENTRY NAME TO PRINT LINE\n         CLI   CLNOEXT,0                ANY EXTENSION RECORDS?\n         BE    C$NO$EXT                 NO OK\n         MVC   OL#UNKN(14),=C'NBR EXT RECS ='\n         HEX   OL#UNKN+15,CLNOEXT,1\nC$NO$EXT BAL   LINK,NEXTCELL            ADVANCE TO NEXT CELL\n         BAL   LINK,SKIP$OWN       %%%  SKIP OWNER CELL (REQUIRED)\n         BAL   LINK,SKIP$SEC            SKIP SECURITY CELL (OPTIONAL)\n         BAL   LINK,SKIP$ASC       %%%  SKIP ASSOC CELL (OPTIONAL)\n         BAL   LINK,SKIP$REL            SKIP RELATION CELL (OPTIONAL)\n         BAL   LINK,PUTLINE\n         LTR   R3,R3                    ANY MORE CELLS?\n         BP    *+8                      YES - CONTINUE\n         BAL   R14,LOGICERR             DIE IF RECORD EXHAUSTED\n         SPACE 1\n*---  NEXT CELLS SHOULD BE DATA/OWNER/SECURITY/VOLUME...\n         CLI   CLTYPE,C'D'              DATA NAME CELL?\n         BE    *+8                      OK - CONTINUE\n         BAL   R14,LOGICERR             DIE IF RECORD EXHAUSTED\n         LA    R1,TYPEDATA              -> TYPE DESCRIPTOR\n         BAL   LINK,FMT$DINC            FORMAT DATA COMPONENT\n         LTR   R3,R3                    ANYTHING LEFT?\n         BNP   LOOP                     NO - READ NEXT RECORD\n         CLI   CLTYPE,C'I'              INDEX NAME CELL?\n         BE    *+8                      OK - CONTINUE\n         BAL   R14,LOGICERR             DIE IF RECORD EXHAUSTED\n         LA    R1,TYPEINDX              -> TYPE DESCRIPTOR\n         BAL   LINK,FMT$DINC            FORMAT DATA COMPONENT\n         LTR   R3,R3                    ANYTHING LEFT?\n         BNP   LOOP                     NO - READ NEXT RECORD\n         B     UNKN$LP                  YES - DUMP ALL REMAINING CELLS\n         DROPX R4                       NVNC\n         SPACE 6\n*---------------------------------------------------------------------*\n*  SUBROUTINE TO FORMAT A COMPLETE DATA OR INDEX COMPONENT    PAGE 83 *\n*---------------------------------------------------------------------*\n         USNGX DINC,R4                  DATA NAME CELL\nFMT$DINC ST    LINK,LINKDINC            SAVE LINKAGE REGISTER\n         MVC   OL#ENTRY,3(R1)           SET ENTRY TYPE\n         L     R0,16(,R1)               GET COUNT\n         AH    R0,=H'1'                 INCREMENT\n         ST    R0,16(,R1)               SAVE UPDATED COUNT\n         SR    R2,R2                    CLEAR FOR ICM\n         ICM   R2,B'0011',DIDCMPLN      GET COMPONENT LENGTH\n         IC    R15,DIDKEYLN             GET CONDENSED KEY LENGTH\n         BCTR  R15,0                    -1 FOR EX\n         BCTR  R15,0                    -1 FOR SOME OTHER STUPID REASON\n         MVC   OL#NAME(*-*),DIDKEY      << EXECUTED >>\n         EX    R15,*-6                  MOVE DATA COMPONENT NAME\n         CLI   DIDIRFLG,0               ANY INTERRUPTION?\n         BE    D$NOTINT                 NO - SKIP\n         MVC   OL#MISC(26),=C'* INTERRUPTED OPERATION --'\n         TM    DIDIRFLG,DIDELETE        DELETE?\n         BNO   *+10                     NO - SKIP\n         MVC   OL#MISC+27(8),=C'DELETE *'\n         TM    DIDIRFLG,DIDUPDAT        UPDATE-EXTEND?\n         BNO   *+10                     NO - SKIP\n         MVC   OL#MISC+27(15),=C'UPDATE-EXTEND *'\n         TM    DIDIRFLG,DIDSRMU         SUB-RECORD MOVE & UPDATE?\n         BNO   *+10                     NO - SKIP\n         MVC   OL#MISC+27(21),=C'SUB-REC MOVE && UPDATE'\n         SPACE 1\n         DROPX R4                       DINC\n         SPACE 1\nD$NOTINT BAL   LINK,NEXTCELL            ADVANCE TO NEXT CELL\n         BP    *+8                      CONTINUE IF MORE CELLS\n         BAL   R14,LOGICERR             DIE IF NO MORE CELLS\n         SR    R2,R0                    ADJUST REMAINING COMPONENT LEN\n         BP    *+8                      CONTINUE IF MORE CELLS\n         BAL   R14,LOGICERR             DIE IF NO MORE CELLS\n         SPACE 1\n         BAL   LINK,SKIP$OWN       %%%  SKIP OWNER CELL (REQUIRED)\n         SR    R2,R0                    ADJUST REMAINING COMPONENT LEN\n         SPACE 1\n         BAL   LINK,SKIP$SEC            SKIP SECURITY CELL (OPTIONAL)\n         SR    R2,R0                    ADJUST REMAINING COMPONENT LEN\n         SPACE 1\n         USNGX VOLCELL,R4\n         SPACE 1\nD$VOL$LP SH    R2,VOLLEN                SUBTRACT LENGTH OF THIS CELL\n         BAL   LINK,FMT$VOL             FORMAT VOLUME CELL(S)\n         L     LINK,LINKDINC            RESTORE RETURN ADDRESS\n         LTR   R2,R2                    DONE WITH THIS COMPONENT?\n         BNPR  LINK                     YES - RETURN TO CALLER\n         LTR   R3,R3                    ANY LENGTH LEFT?\n         BP    D$VOL$LP                 YES - FORMAT NEXT VOL LINE\n         BAL   R14,LOGICERR             NO - DIE\n         SPACE 1\n         DROPX R4                       VOLCELL\n         EJECT ,\n*---------------------------------------------------------------------*\n*  PROCESS UNSUPPORTED ENTRY TYPE                                     *\n*---------------------------------------------------------------------*\nTYPE$H   EQU   *                        GDG ENTRY\nTYPE$D   EQU   *                        DATA\nTYPE$I   EQU   *                        INDEX\nTYPE$G   EQU   *                        AIX\nTYPE$R   EQU   *                        PATH\nTYPE$U   EQU   *                        UCAT CONNECTOR\nTYPE$$   EQU   *                        UNKNOWN\n         MVC   OL#UNKN(3),=C'LL='\n         HEX   OL#UNKN+3,(0,R1),2       LL\n         SPACE 1\nUNKN$LP  MVC   OL#UNKN+11(7),=C'L''CELL='\n         HEX   OL#UNKN+18,(0,R4),2      LENGTH OF FIRST CELL\n         MVC   OL#UNKN+24(5),=C'TYPE='\n         OC    OL#UNKN+29(1),2(R4)      CELL TYPE\n         MVI   OL#UNKN+31,C'('\n         HEX   OL#UNKN+32,(2,R4),1,BYTE=C')'  CELL TYPE\n         LH    R1,0(,R4)                GET CELL LENGTH\n         SH    R1,=H'4'                 -3 ALEADY PRINTED, -1 FOR EX\n         CH    R1,=Y(L'OLINE-(OL#UNKN+38-OLINE)-1)  TOO LONG?\n         BNH   *+8                      NO - OK\n         LH    R1,=Y(L'OLINE-(OL#UNKN+38-OLINE)-1)  YES - USE MAX\n         OC    OL#UNKN+38(*-*),3(R4)    << EXECUTED >>\n         EX    R1,*-6                   PRINT SOME OF THE RECORD\n         BAL   LINK,PUTLINE\n         SH    R3,0(,R4)                SUBTRACT LENGTH OF THIS CELL\n         AH    R4,0(,R4)                -> NEXT CELL\n         LTR   R3,R3                    ANY MORE CELLS?\n         BP    UNKN$LP                  YES - PROCESS\n         B     LOOP                     GET NEXT RECORD IF NONE\n         EJECT ,\n*---------------------------------------------------------------------*\n*  END OF FILE ON INPUT DATASET -- PRINT ENTRY COUNTERS               *\n*---------------------------------------------------------------------*\n         SPACE 1\n*  FROM HERE ON, I WON'T USE 'PUTLINE', SINCE IT WILL BREAK THE OUTPUT.\n*  I CAN GET AWAY WITH THIS BECAUSE I KNOW THE NUMBER OF ENTRY TYPES\n*  IS LESS THAN THE PAGE SIZE.\n         SPACE 1\nEOF      AP    PAGENUM,=P'1'            INCREMENT PAGE NUMBER\n         MVC   WORK,=X'402020202020'    MOVE IN EDIT MASK\n         ED    WORK(6),PAGENUM\n         MVC   H1PGNUM(4),WORK+2\n         SPACE 1\n         PUT   SYSPRINT,HEADER1         PRINT THE HEADER\n         SPACE 1\n         MVI   OLINE,C'-'               TRIPLE SPACE THIS LINE\n         MVC   OLINE+10(27),=C'Number of Entries, by Type:'\n         BAL   LINK,PUTLINEB            PRINT LINE AND CLEAR\n         MVI   OLINE,C'0'               DOUBLE SPACE THE HEADER\n         MVC   OLINE+10(26),=C'Count   Type   Description'\n         BAL   LINK,PUTLINEB            PRINT LINE AND CLEAR\n         MVI   OLINE,C'+'               OVERPRINT THE UNDERLINES\n         MVC   OLINE+10(26),=C'_____   ____   ___________'\n         BAL   LINK,PUTLINEB            PRINT LINE AND CLEAR\n         MVC   OLINE,BLANKS             CLEAR PRINT LINE\n         MVI   OLINE,C'0'               DOUBLE SPACE THE FIRST ONE\n         LA    R2,TYPETBL               -> FIRST ENTRY\n         SR    R3,R3                    CLEAR ACCUMULATOR\n         SPACE 2\nSUMMLOOP BAL   LINK,SUMMLINE            PRINT A SUMMARY LINE\n         LA    R2,TYPETBLL(,R2)         -> NEXT TYPE ENTRY\n         CLI   0(R2),X'FF'              END OF LIST?\n         BNE   SUMMLOOP                 NO - DO NEXT\n         LA    R2,TYPEUNKN              -> UNKNOWNS CELL\n         BAL   LINK,SUMMLINE            PRINT A SUMMARY LINE\n         LA    R2,TYPETOTL              -> TOTALS CELL\n         ST    R3,16(,R2)               SAVE GRAND TOTAL IN TOTALS CELL\n         MVI   OLINE,C'0'               DOUBLE SPACE LAST LINE\n         BAL   LINK,SUMMLINE            PRINT A SUMMARY LINE\n         SPACE 1\n         CLOSE MF=(E,OPENMFL)           CLOSE CATIN AND SYSPRINT\n         SPACE 1\n         B     LEAVE\n         SPACE 3\nSUMMLINE MVI   OLINE+18,C'('\n         MVC   OLINE+19(1),2(R2)        FILL IN TYPE CHARACTER\n         MVI   OLINE+20,C')'\n         MVC   OLINE+25(10),3(R2)       FILL IN DESCRIPTION\n         L     R0,16(,R2)               GET ENTRY COUNT\n         AR    R3,R0                    ADD TO RUNNING TOTAL\n         CVD   R0,DWD                   MAKE IT PACKED\n         MVC   OLINE+06(9),=X'206B2020206B202020'  GET EDIT MASK\n         ED    OLINE+05(10),DWD+4       MAKE IT PRINTABLE\n         B     PUTLINEB                 PRINT LINE AND CLEAR\n*              (WILL RETURN TO 'LINK', WHICH IS SUMMLINE'S CALLER)\n         EJECT\n*---------------------------------------------------------------------*\n*  SUBROUTINE TO FORMAT VOLUME CELLS                                  *\n*---------------------------------------------------------------------*\n         USNGX VOLCELL,R4\nFMT$VOL  ST    LINK,LINKVOL             SAVE LINKAGE REGISTER\n         CLI   VOLTYPE,X'04'            IS IT A VOLUME CELL???\n         BE    *+8                      YES - CONTINUE\n         BAL   R14,LOGICERR             NO - DIE\n         SPACE 1\n         MVC   OL#VOLSR,VOLSERN         VOLSER TO PRINT LINE\n         HEX   OL#DEVTP,VOLDEVTP        DEVTYPE TO PRINT LINE\n         LA    R1,VOLDEVTP              -> HEX DEVTYPE\n         LA    R15,DEVTABLE             -> FIRST TABLE ENTRY\n         SPACE 1\nDT$LOOP  CLC   0(4,R1),0(R15)           THIS IT?\n         BE    DT$FOUND                 YES\n         LA    R15,4+8(,R15)            -> NEXT TABLE ENTRY\n         CLI   0(R15),X'FF'             END OF TABLE?\n         BNE   DT$LOOP                  NO - KEEP LOOKING\n         B     DT$NONE                  YES - NOTHING TO MOVE\n         SPACE 1\nDT$FOUND MVC   OL#DEVTP,4(R15)          SET THE PRINTABLE DEVICE TYPE\n         SPACE 1\nDT$NONE  LH    R0,VOLFLSEQ              GET FILE SEQUENCE NUMBER\n         CVD   R0,DWD                   CONVERT TO PACKED\n         MVC   WORK(6),=X'402020202020'  COPY EDIT MASK\n         ED    WORK(6),DWD+5\n         MVC   OL#FSEQN,WORK+2\n         BAL   LINK,PUTLINE\n         BAL   LINK,NEXTCELL            ADVANCE TO NEXT CELL\n         L     LINK,LINKVOL             RESTORE LINKAGE REGISTER\n         BR    LINK                     RETURN TO CALLER IF NONE\n         DROPX R4                       VOLCELL\n         EJECT\n*---------------------------------------------------------------------*\n*  AN ERROR HAS OCCURRED -- MAY BE A DOCUMENTATION ERROR, A BAD       *\n*  RECORD IN THE CATALOG, OR A PROGRAMMING ERROR IN THIS PROGRAM.     *\n*---------------------------------------------------------------------*\nLOGICERR SR    R14,R12                  COMPUTE OFFSET OF ERROR\n         SH    R14,=H'4'                ACCOUNT FOR LENGTH OF 'BAL'\n         STH   R14,DWD                  SAVE FOR UNPK\n         SR    LINK,R12                 COMPUTE OFFSET OF LINK\n         SH    LINK,=H'4'               ACCOUNT FOR LENGTH OF 'BAL'\n         STH   LINK,DWD+2               SAVE FOR UNPK\n         CLC   OLINE,BLANKS             ANY PARTIAL LINE?\n         BE    *+8                      NO - SKIP\n         BAL   LINK,PUTLINE             YES - PRINT UNFINISHED LINE\n         MVC   OLINE(49),=C'0*** LOGIC ERROR AT OFFSET XXXX *** LINK=XX$\n               XX ***'\n         HEX   OLINE+27,DWD,2           FORMAT 'R14' OFFSET\n         HEX   OLINE+41,DWD+2,2         FORMAT 'LINK' OFFSET\n         TM    FLAGS,FTEST              PARM=TEST?\n         BO    LE$TEST                  YES - HANDLE DIFFENTLY\n**       MVC   OLINE+46(36),=C'-- SKIPPING TO NEXT INPUT RECORD ***'\n         MVC   OLINE+46(60),=C'-- WILL DUMP THIS RECORD, THEN SKIP TO N$\n               EXT INPUT RECORD ***'\n         LH    R15,CURLINE              GET CURRENT LINE NUMBER\n         LA    R15,2(,R15)              ADJUST FOR DOUBLE SPACED ERRMSG\n         STH   R15,CURLINE              SAVE UPDATED LINE NUMBER\n         BAL   LINK,PUTLINE             PRINT THE ERROR MSG\n**       B     LOOP                     AND GO GET THE NEXT RECORD\n         L     R1,ADDRREC               RESTORE RECORD POINTER\n**       LH    R3,4(,R1)                SAVE LENGTH OF RECORD (NOT RDW)\n**       SH    R3,=H'2'                 ADJUST FOR LL\n**       LA    R4,4+2(,R1)              -> FIRST CELL IN RECORD\n*                                       (SKIP RDW (4) & LL (2) )\n         LH    R3,0(,R1)                SAVE LENGTH OF RECORD (NOT RDW)\n         SH    R3,=H'2'                 ADJUST FOR LL\n         LA    R4,2(,R1)                -> FIRST CELL IN RECORD\n         MVI   OLINE,C'0'               DOUBLE SPACE NEXT OUTPUT LINE\n         B     TYPE$$                   AND FORMAT AS IF UNKNOWN\n         SPACE 2\nLE$TEST  ABEND 1000,DUMP\n         EJECT\n*---------------------------------------------------------------------*\n*  SUBROUTINES TO ADVANCE TO OR OVER VARIOUS CELL TYPES               *\n*---------------------------------------------------------------------*\n         USNGX CELL,R4                  GENERAL CELL DESCRIPTION\n         SPACE 3\n*  SKIP OWNER CELL (REQUIRED)\nSKIP$OWN CLI   CELLTYPE,X'01'           OWNER CELL?\n         BE    NEXTCELL                 YES - GO TO NEXT CELL\n         BAL   R14,LOGICERR             NO - LOGIC ERROR\n         SPACE 2\nNEXTCELL LH    R0,CELLLEN               GET LENGTH OF THIS CELL\n         SR    R3,R0                    SUBTRACT FROM REMAINING REC LEN\n         BNM   *+8                      CONTINUE IF OK\n         BAL   R14,LOGICERR             ABORT IF LENGTH WENT NEGATIVE\n         AR    R4,R0                    ADVANCE POINTER TO NEXT CELL\n         LTR   R3,R3                    SET CC FOR REMAINING LENGTH\n         BR    LINK                     RETURN TO CALLER\n         SPACE 3\n*  SKIP SECURITY CELL (OPTIONAL)\nSKIP$SEC SR    R0,R0                    ASSUME THIS CELL DOESN'T EXIST\n         CLI   CELLTYPE,X'02'           SECURITY CELL?\n         BE    NEXTCELL                 YES - SKIP IT\n         BR    LINK                     NO - JUST RETURN TO CALLER\n         SPACE 3\n*  SKIP ASSOCIATION CELL (OPTIONAL)\nSKIP$ASC SR    R0,R0                    ASSUME THIS CELL DOESN'T EXIST\n         CLI   CELLTYPE,X'03'           ASSOCIATION CELL?\n         BE    NEXTCELL                 YES - SKIP IT\n         BR    LINK                     NO - JUST RETURN TO CALLER\n         SPACE 3\n*  SKIP RELATION CELL (OPTIONAL)\nSKIP$REL SR    R0,R0                    ASSUME THIS CELL DOESN'T EXIST\n         CLI   CELLTYPE,X'06'           RELATION CELL?\n         BE    NEXTCELL                 YES - SKIP IT\n         BR    LINK                     NO - JUST RETURN TO CALLER\n         SPACE 2\n         DROPX R4                       CELL\n         EJECT\n*---------------------------------------------------------------------*\n*  SUBROUTINE TO PUT A LINE TO PRINT FILE                             *\n*---------------------------------------------------------------------*\nPUTLINE  LH    R15,CURLINE              GET CURRENT LINE NUMBER\n         LA    R15,1(,R15)              INCREMENT\n         STH   R15,CURLINE              SAVE UPDATED LINE NUMBER\n         CH    R15,LINECT               IS THIS PAGE FULL?\n         BNH   PL$PUT                   NO - CONTINUE\n         MVC   CURLINE,=H'1'            YES - RESET LINE COUNT\n         AP    PAGENUM,=P'1'            INCREMENT PAGE NUMBER\n         MVC   WORK,=X'402020202020'    MOVE IN EDIT MASK\n         ED    WORK(6),PAGENUM\n         MVC   H1PGNUM(4),WORK+2\n         MVI   OLINE,C'0'               DOUBLE SPACE THE FIRST ONE\n         LA    R0,HEADER1\n         BAL   R14,PUTPRINT\n         LA    R0,HEADER2\n         BAL   R14,PUTPRINT\n         LA    R0,HEADER3\n         BAL   R14,PUTPRINT\n         LH    R15,CURLINE              RESTORE UPDATED LINE COUNTER\n         SPACE 2\nPL$PUT   LA    R0,OLINE\n         BAL   R14,PUTPRINT             PRINT THE LINE\n         SPACE 2\n         LH    R15,CURLINE              RESTORE UPDATED LINE COUNTER\n         SR    R14,R14                  CLEAR FOR DIVIDE\n         D     R14,=F'5'                UNDERSCORE EVERY FIFTH LINE\n         CH    R14,=F'5'                IS THIS THE LAST IN THE GROUP?\n         BNE   PL$CLEAR                 NO - SKIP IT\n         MVC   OLINE(2),=C'+_'          OVERPRINT THIS LINE\n         MVC   OLINE+2(L'OLINE-2),OLINE+1  PROPAGATE THE UNDERSCORES\n         SPACE 1\nPUTLINEB LA    R0,OLINE\n         BAL   R14,PUTPRINT             PRINT THE LINE\n         SPACE 2\nPL$CLEAR MVC   OLINE,BLANKS             CLEAR THE BUFFER\n         BR    LINK                     RETURN TO CALLER\n         SPACE 3\nPUTPRINT PUT   SYSPRINT,(0)\n         SPACE 1\n         ORG   *-2                      BACK OVER THE BALR\n         BR    R15                      MAKE 'PUT' RETURN TO MY CALLER\n         EJECT ,\n         LTORG ,\n         EJECT ,\n         DC    0F'0'                    ALIGNMENT\nTYPETBL  TYPENT  A,'NONVSAM'            NONVSAM\nTYPETBLL EQU   *-TYPETBL                LENGTH OF A TABLE ENTRY\n         TYPENT  C,'CLUSTER'            CLUSTER\nTYPEDATA TYPENT  D,'  DATA'             DATA\nTYPEINDX TYPENT  I,'  INDEX'            INDEX\n         TYPENT  G,' AIX'               AIX\n         TYPENT  R,' PATH'              PATH\n         TYPENT  B,'GDG BASE'           GDG BASE\nTYPEGDGE TYPENT  H,'   NONVSAM'         GDG ENTRY\n         TYPENT  U,'CATALOG'            UCAT CONNECTOR\n         TYPENT  T,'TRUENAME'           TRUENAME\n         TYPENT  X,' ALIAS'             ALIAS\n         DC    X'FFFF'                  END OF TABLE\n         SPACE 1\nTYPEUNKN TYPENT  ?,'*UNKNOWN*'          UNKNOWN\nTYPETOTL TYPENT  **,'*** TOTALS'        GRAND TOTALS\n         EJECT ,\nDWD      DC    D'0'\nLINKVOL  DC    A(0)                     SAVE FOR 'LINK' IN 'FMT$VOL'\nLINKDINC DC    A(0)                     SAVE FOR 'LINK' IN 'FMT$DINC'\nADDRREC  DC    A(0)                     SAVED ADDRESS OF INPUT RECORD\nGDG#LEN  DC    H'0'                     LENGTH OF CURRENT GDG BASE NAME\nGDG#NAME DC    CL35' '                  NAME   OF CURRENT GDG BASE\nVSAMKEY  DC    XL45'00'\nPAGENUM  DC    PL3'0'\nLINECT   DC    H'55'\nCURLINE  DC    H'9999'\nWORK     DC    CL6' '\nFLAGS    DC    B'0'\nFTEST    EQU   X'80'\nFACB     EQU   X'40'                    USING ACB, NOT DCB\n         DC    X'00'                    WASTED FOR ALIGNMENT\n         SPACE 2\nDEVTABLE DC    X'3010200E',C'3380    '\n         DC    X'78008080',C'3480    '\n         DC    X'3050200B',C'3350    '\n         DC    X'32008003',C'3400-5  '\n         DC    X'32108003',C'3400-6  '\n         DC    X'34208003',C'3400-4  '\n         DC    X'3050200D',C'3330-1  '\n         DC    X'34208001',C'2400-4  '\n         DC    X'3040200A',C'3340    '\n         DC    X'3010200C',C'3375    '\n         DC    X'30502009',C'3330    '\n         DC    X'30C08001',C'2400-2  '\n         DC    X'30008001',C'2400    '\n         DC    X'30C08003',C'3400-2  '\n         DC    X'34008003',C'3400-3  '\n         DC    X'30008001',C'2400    '\n         DC    X'00000000',C'INDIRECT'  INDIRECT CATALOG\n         DC    X'FF'                    END OF TABLE INDICATOR\n         SPACE 2\n         HEXTAB  DUAL=NO\n         SPACE 2\nMONTHS   MONTHS  ,\n         SPACE 2\nBLANKS   DC    CL133' '\nHEADER1  DC    CL133'1Condensed Listing of Catalog --'\n         ORG   HEADER1+116\n         DC    C'Page '\nH1PGNUM  DC    C'0000'\n         ORG   ,\nHEADER2  DC    CL133'-ENTRY TYPE   DEV TYPE  VOLSER FSEQ  ENTRY NAME'\nHEADER3  DC    CL133'+__________   ________  ______ ____  __________'\nOLINE    DC    CL133' '\n         ORG   OLINE+1\nOL#ENTRY DC    C'ENTRY TYPE',CL3' '\nOL#UNKN  DS    0C                       START OF AREA FOR UNKNOWN INFO\nOL#DEVTP DC    C'DEV TYPE',CL2' '\nOL#VOLSR DC    C'VOLSER',CL1' '\nOL#FSEQN DC    C'FSEQ',CL2' '\nOL#NAME  DC    CL44' ',CL2' '\nOL#MISC  DS    CL(OLINE+133-*)          REMAINDER OF PRINT LINE\n         ORG   OLINE\n         DC    CL133' '\n         ORG   ,\nDCBEXIT  DCBEXIT  BLKSIZE=6118\n         LTORG ,\n         SPACE 2\nCAT#PSWD DC    FL1'8',CL8'        '     CATALOG PASSWORD\n         SPACE 2\nOPENMFL  OPEN  (CATIN,,SYSPRINT,(OUTPUT)),MF=L\n         SPACE 2\nEXLST    DC    0F'0',X'85',AL3(DCBEXIT)\n         SPACE 2\nEXLST#IN DC    0F'0',X'87',AL3(IN#JFCB)\nIN#JFCB  DC    XL176'00'\n         PUSH  PRINT\n         PRINT NOGEN\n         ORG   IN#JFCB\n         IEFJFCBN\n         ORG   ,\n         POP   PRINT\n         SPACE 2\nCATRPL   RPL   ACB=CATACB,AM=VSAM,KEYLEN=45,AREA=*-*,AREALEN=32767,    $\n               ARG=VSAMKEY,OPTCD=(KEY,NSP,SEQ,KGE,MVE)\n         SPACE 2\nCATEXLST EXLST EODAD=(EOF,A)\n         SPACE 5\nCATIN    DCB   DDNAME=CATIN,MACRF=GL,EODAD=EOF,                        $\n               DSORG=PS,RECFM=VBS,BFTEK=A,EXLST=EXLST#IN\n         SPACE 5\nSYSPRINT DCB   DDNAME=SYSPRINT,MACRF=PM,EXLST=EXLST,                   $\n               DSORG=PS,RECFM=FBA,LRECL=133\n         SPACE 5\n*?TACB   ACB   DDNAME=CATIN,MACRF=(CNV,KEY,SEQ,DIR,IN,NCI),\nCATACB   ACB   DDNAME=CATIN,MACRF=(KEY,SEQ,IN,NCI),                    $\n               AM=VSAM,EXLST=CATEXLST,PASSWD=CAT#PSWD\n**             BUFND=8,BUFNI=2\n         SPACE 5\nWORKD    DSECT ,                        resume\nRECBUFF  DS    CL32767                  record area\n         EJECT ,\nCELL     DSECT                          GENERAL CELL FORMAT\nCELLLEN  DS    H                        LENGTH OF THIS CELL\nCELLTYPE DS    C                        TYPE OF THIS CELL\n         SPACE 3\nNVNC     DSECT     PAGE 86              NONVSAM NAME CELL\nNVCELEN  DS    H                        LENGTH OF NVNC INCLUDING ITSELF\nNVTYPE   DC    C'A'                     TYPE 'A' FOR NONVSAM\nNVRESV   DS    X                        RESERVED\nNVOLCNT  DS    H                        NUMBER OF VOLUME CELLS (TO 255)\nNVKEYLN  DS    AL1                      LENGTH OF NONVSAM KEY\nNVNAME   DS    CL44                     NONVSAM NAME\nNVPAD    DS    X                        PAD VALUE (BINARY ZEROES)\n         SPACE 3\nVOLCELL  DSECT     PAGE 89              VOLUME CELL\nVOLLEN   DS    H                        LENGTH OF VOLCELL INCL ITSELF\nVOLTYPE  DC    X'04'                    TYPE X'04' FOR VOLUME CELL\nVOLOFSET DS    X                        NOT USED\nVOLSERN  DS    CL6                      VOLUME SERIAL NUMBER\nVOLDEVTP DS    XL4                      DEVICE TYPE\nVOLFLAG1 DS    B                        VOLUME FLAG 1\nVOLPRIME EQU   X'80'                    PRIME VOLUME - ALLOCATED SPACE\nVOLCANDI EQU   X'40'                    CANDIDATE VOLUME NO SPACE\nVOLOFLOW EQU   X'20'                    OVERFLOW KEYRANGE ONLY\nVOLCONV  EQU   X'10'                    CONVERTED VSAM DATA SET VOLUME\nVOLNVSAM EQU   X'08'                    NONVSAM VOLUME CELL\nVOLKYRNG EQU   X'04'                    KEYRANGE QUALIFIER PRESENT\nVOLVPCI  EQU   X'02'                    PRIMARY VVR CI\nVOLSSQWD EQU   X'01'                    SEQUENCE SET WITH DATA\nVOLFLAG2 DS    B                        RESERVED\nVOLVVRBA DS    0XL4                     RELATIVE BYTE ADDRESS OF VVR\nVOLDSTTR DS    XL3                      NONVSAM FORMAT 1 DSCB TTR\n         DS    X                        RESERVED\nVOLFLSEQ DS    H                        NONVSAM FILE SEQUENCE NO (TAPE)\nVOLKRQL  DS    XL4                      KEYRANGE QUALIFIER (VSAM ONLY)\n         DS    XL4                      RESERVED FOR NONVSAM\nVOLLKYLN DS    H                        LENGTH OF LOW KEY RANGE KEY\nVOLLOWKY DS    0C                       1-64 BYTE LOW KEY\nVOLHKYLN DS    H                        LENGTH OF HIGH KEY RANGE KEY\nVOLHIKY  DS    0C                       1-64 BYTE HIGH KEY\n         SPACE 3\nASSOCC   DSECT     PAGE 89              ASSOCIATION CELL\nASCLEN   DS    H                        LENGTH OF ASSOCIATION CELL\nASCTYPE  DC    X'03'                    TYPE X'03' FOR ASSOCC\nASCOUNT  DS    HL2                      COUNT OF ASSOCIATIONS\n         SPACE 1\n*  THE FOLLOWING FIELDS ARE REPEATED 'ASCOUNT' TIMES\nASCKEYS  DS    0X\nASCFLAG  DS    X                        RESERVED\nASCREUS  EQU   X'80'                    USED IN RELATION CELL ONLY\nASCKYLEN DS    AL1                      LENGTH OF CONDENSED ASSOC KEY\nASCKEY   DS    0C                       2-45 BYTE CONDENSED ASSOC KEY\n         SPACE 3\nGATC     DSECT     PAGE 90              GENERATION AGING TABLE CELL\nGATCELN  DS    H                        LENGTH OF GATC\nGATYPE   DC    X'05'                    TYPE X'05' FOR GATC\nGATATTR  DS    B                        ATTRIBUTES\nGATDELET EQU   X'80'                    EMPTY SPECIFIED\nGATSCRTH EQU   X'40'                    SCRATCH SPECIFIED\nGATLIMIT DS    AL1                      MAXIMUM GDS ENTRIES IN GDG BASE\nGATCNT   DS    AL1                      CURRENT NBR OF ENTRIES IN GAT\n         SPACE 1\n*  THE FOLLOWING FIELDS ARE REPEATED 'GATCNT' TIMES\nGAT      EQU   *\nGATENT   EQU   *\nGATEXTNO DS    AL1                      EXTENSION RECORD SEQUENCE NBR\nGATGEN   DS    HL2                      GENERATION NUMBER OF GDS\nGATWRAP  EQU   X'80'                    GENERATION EXCEEDED 9999\nGATVER   DS    AL1                      VERSION NUMBER OF GDS\n         SPACE 3\nGDGNC    DSECT     PAGE 86              GENERATION DATA GROUP NAME CELL\nGDGCELLN DS    H                        LNTH OF GDGNC INCLUDING ITSELF\nGDGTYPE  DC    C'B'                     TYPE 'B' FOR GDG\nGDGCMPLN DS    AL2                      LENGTH OF GDG COMPONENT\nGDGNOEXT DS    AL1                      NUMBER OF EXTENSION RECORDS\nGDGKYLEN DS    AL1                      LENGTH OF GDG KEY\nGDGNAME  DS    CL44                     1-35 BYTE GDG NAME\nGDGPAD   DS    X                        PAD VALUE (BINARY ZEROES)\n         SPACE 3\nGDSNC    DSECT     PAGE 86              GENERATION DATASET NAME CELL\nGDSCELEN DS    H                        LENGTH OF GDSNC\nGDSTYPE  DC    C'H'                     TYPE 'H' FOR GDSNC\nGDSCMPLN DS    AL2                      LENGTH OF GDS COMPONENT\nGDSGENO  DS    AL2                      GENERATION NUMBER OF GDS\nGDSVERNO DS    AL1                      VERSION NUMBER OF GDS\nGDSVOLCT DS    AL2                      NUMBER OF VOLUME CELLS IN GDS\n         SPACE 3\nTNC      DSECT    PAGE 87\nTRUCELN  DS    H                        LENGTH OF TNC INCLUDING ITSELF\nTRUTYPE  DC    C'T'                     TYPE 'T' FOR TRUENAME\nTRURESV  DS    CL2                      RESERVED\nTRUNTYPE DS    C                        TRUENAME RECORD FOR 'G','D','I'\nTRUEKEYL DS    AL1                      TRUENAME KEY LENGTH\nTRUENAME DS    CL44                     DATA, INDEX OR AIX NAME\nTRUPAD   DS    XL1                      PAD VALUE (BINARY ZEROS)\n         SPACE 3\nVCNC     DSECT     PAGE 84\nCLCELLN  DS    H                        LENGTH OF VCNC INCLUDING ITSELF\nCLTYPE   DC    C'C'                     TYPE 'C' FOR CLUSTER\nCLCOMPLN DS    AL2                      LENGTH OF THE CLUSTER COMPONENT\nCLNOEXT  DS    AL1                      NUMBER OF EXTENSION RECORDS\nCLNMLEN  DS    AL1                      LENGTH OF THE CLUSTER KEY (45)\nCLNAME   DS    CL44                     CLUSTER NAME PART OF KEY\nCLNMPAD  DS    XL1                      PAD VALUE, SET TO BINARY ZERO\n         SPACE 3\nDINC     DSECT     PAGE 85              DATA OR INDEX NAME CELL\nDIDLEN   DS    H                        LENGTH OF DINC\nDIDTYPE  DC    C'D'                     'D' OR 'I' FOR DATA OR INDEX\nDIDCMPLN DS    AL2                      LENGTH OF DINC COMPONENT\nDIDIRFLG DS    B                        INTERRUPTION RECOGNITION FLAGS\nDIDELETE EQU   B'10000000'              DELETE IN PROGRESS\nDIDUPDAT EQU   B'01000000'              UPDATE-EXTEND IN PROGRESS\nDIDSRMU  EQU   B'00100000'              SUB-REC MOVE & UPDT IN PROGRESS\nDIDKEYLN DS    AL1                      CONDENSED KEY LENGTH\nDIDKEY   EQU   *                        CONDENSED KEY\n         SPACE 3\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TAPEMAP": {"ttr": 778, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01F\\x00\\x00\\x00y\\x14\\x1f\\x00\\x92\\t\\x0f X\\x0ey\\x08M\\x08\\xfe\\xd3\\xc4\\xe6@@@@@@@'", "ispf": {"version": "01.70", "flags": 0, "createdate": "1979-05-21T00:00:00", "modifydate": "1992-03-30T20:58:00", "lines": 3705, "newlines": 2125, "modlines": 2302, "user": "LDW"}, "text": "TAPEMAP  TITLE '-----  TAPE ANALYSIS PROGRAM  -----            - LDW -'\n*---------------------------------------------------------------------*\n*                                                                     *\n*  Copyright (C) 1988 by Leonard D. Woren.  All rights reserved,      *\n*  except as explicitly noted below.  This updated copyright          *\n*  supercedes all previous ones.  Permission to distribute this       *\n*  program is now restricted:  only UNMODIFIED versions may be        *\n*  distributed, i.e., only versions obtained from Leonard D. Woren    *\n*  may be placed on \"public domain\" tapes, such as the SHARE mods     *\n*  tape, the CBT (Connecticut Bank and Trust) tape, the LA MVSUG      *\n*  (Los Angeles MVS User's Group) tape, etc. etc.  Modified versions  *\n*  may be used at your site only; they may not be given to any other  *\n*  sites.  I am tired of trying to refit other people's mods, and I   *\n*  resent not getting credit for the main program.  I am tired of a   *\n*  zillion different versions of the program floating around.         *\n*                                                                     *\n*  Since everyone will benefit from this, please send all updates to  *\n*  me.  (Address below.)  I will merge them in, if they have been     *\n*  made to a reasonably current version of the source, and if they    *\n*  are in keeping with the general design of the rest of the program. *\n*  Mods may be altered by me for this purpose.  Mods sent to me for   *\n*  this purpose will then become governed by the restrictions         *\n*  specified here for the whole program.                              *\n*                                                                     *\n*  Any copyright provisions below which are not superseded above are  *\n*  still in effect.                                                   *\n*                                                                     *\n*  COPYRIGHT 1985, 1984, 1983, 1982 BY LEONARD D. WOREN.              *\n*  PERMISSION IS HEREBY GRANTED TO COPY, USE, AND DISTRIBUTE THIS     *\n*  PROGRAM SUBJECT TO THE FOLLOWING CONDITIONS:                       *\n*  (BASICALLY THE STANDARD SHARE AND MVSUSER GROUP POLICY)            *\n*   1)  THIS NOTICE MUST APPEAR IN ALL COPIES.                        *\n*   2)  THE ONLY CHARGE WHICH MAY BE MADE FOR DISTRIBUTION IS TO      *\n*       RECOVER REAL COSTS, SUCH AS POSTAGE.                          *\n*   3)  THE ONLY CHARGE FOR RUNNING THE PROGRAM WHICH MAY BE MADE     *\n*       IS YOUR NORMAL CHARGE FOR COMPUTER TIME.                      *\n*   4)  ALL REFERENCES TO THE ORIGINAL AUTHORS MUST BE RETAINED.      *\n*                                                                     *\n*                                                                     *\n*  COPYRIGHT 1981, 1980, 1979, 1978                                   *\n*                       BY LEONARD D. WOREN    ALL RIGHTS RESERVED.   *\n*  COPYRIGHT 1977 BY LEONARD D. WOREN AND MICHAEL S. MAITEN           *\n*                                                                     *\n*                        -- DISCLAIMER --                             *\n*  ALTHOUGH THIS PROGRAM HAS BEEN EXTENSIVELY TESTED, AND IS IN USE   *\n*  IN A PRODUCTION ENVIRONMENT (MVS/XA RELEASE 2.2, with DFP 2.3),    *\n*  NO GUARANTEE IS MADE OF (OR RESPONSIBILITY ASSUMED FOR) CORRECT    *\n*  OR RELIABLE OPERATION.  WE MAY TRY TO HELP WITH PROBLEMS.  WE      *\n*  ALSO DO NOT ASSUME ANY RESPONSIBILITY TO DISTRIBUTE UPDATES,       *\n*  ALTHOUGH I WILL TRY TO INTEGRATE ANY CHANGES AND PASS THEM ON TO   *\n*  BE PUT ON THE various mod tapes.                                   *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*  I WOULD ALSO LIKE TO GET A COPY OF ANY ADDITIONS OR CORRECTIONS    *\n*  MADE TO THIS PROGRAM, SO THEY CAN BE INCORPORATED.                 *\n*                                                                     *\n*                                                                     *\n*  CONTACT:                                                           *\n*          Leonard D. Woren                                           *\n*          University of Southern California                          *\n*          University Park  Mail Code 0251                            *\n*          Los Angeles, CA   90089-0251                               *\n*          LDW@USCMVSA.BITNET                                         *\n*          LDW@MVSA.USC.EDU                                           *\n*          sdcrdcf!usc-oberon!LDW (last resort)                       *\n*          (213) 740-2875 (direct -- good luck!)                      *\n*          (213) 743-2957 (msgs)                                      *\n*          I prefer electronic mail.  If you call me long distance    *\n*          and leave a msg because you didn't get me, there's a good  *\n*          chance that I won't call back.  Moral:  don't call the     *\n*          message number unless you're in 213 or 818.                *\n*                                                                     *\n*                                                                     *\n*          SHARE installation code:  USC                              *\n*          GUIDE installation code:  OUY                              *\n*                                                                     *\n*---------------------------------------------------------------------*\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*  THIS PROGRAM IS BASED ON THE PROGRAM TAPEINDX WRITTEN BY           *\n*  MICHAEL S. MAITEN OF THE UCLA COMPUTER CLUB.                       *\n*  IT HAS BEEN ALMOST COMPLETELY REWRITTEN BY LEONARD D. WOREN OF     *\n*  THE UCLA COMPUTER CLUB.                                            *\n*                                                                     *\n*                                                                     *\n*  SAMPLE JCL:                                                        *\n*                                                                     *\n*        //JOBNAME  JOB (ACCOUNTING),'PRGMR ID',                      *\n*        //            CLASS=S,MSGCLASS=R,MSGLEVEL=(1,1)              *\n*        //STEP010  EXEC PGM=TAPEMAP                                  *\n*        //SYSPRINT DD SYSOUT=*                                       *\n*        //SYSPRNT2 DD SYSOUT=*                                       *\n*        //SYSUT1   DD DSN=DSNAME,                                    *\n*        //             DISP=OLD,                                     *\n*        //             LABEL=(,BLP,EXPDT=98000),  <== FOR TMS        *\n*        //             UNIT=(TAPE,,DEFER),                           *\n*        //             VOL=SER=VOLID                                 *\n*                                                                     *\n*                                                                     *\n*  AVAILABLE PARMS:                                                   *\n*                                                                     *\n*        CHECK      Print both standard output and SCAN analysis      *\n*        DEN1       Print density character directly from tape label  *\n*        FEET       Display cartridge length in feet                  *\n*        GDATE      Print dates in \"Gregorian\" format                 *\n*        INLINE     Print special info inline instead of on SYSPRNT2  *\n*        JDATE      Print dates in \"Julian\" format                    *\n*        LC=nn      Set lines per page                                *\n*        LINECNT=nn Set lines per page                                *\n*        NL         Force NL style analysis even if tape is SL        *\n*        NOATTR     Skip second print file                            *\n*        NOMEM      Do not list members of PDS's                      *\n*        NOMEMBERS  Do not list members of PDS's                      *\n*        NONOTE     Suppress note on tape length calculation          *\n*        NULL=nn    Allow nn null files on NL tape before EOV         *\n*        PERCENT    Display reel length in percent                    *\n*        PCT        Display reel length in percent                    *\n*        SCAN       Read all data blocks to determine accurate length *\n*        TEST       Abend on logic errors                             *\n*                                                                     *\n*---------------------------------------------------------------------*\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*  THINGS TO DO (MAY BE DONE SOMEDAY), PROBLEMS TO FIX (MAYBE SOONER) *\n*    . OPTIONALLY LIST SPF STATISTICS FOR UNLOADED MEMBERS            *\n*    . VOL1 ONLY (MAY WORK)                                           *\n*    . IEHINITT (MAY WORK)                                            *\n*    . FUGWA ARCHIVE TAPES???                                         *\n*    . HANDLE MISSING EOF LABELS                                      *\n*    . XCALL SOME ROUTINES, LIKE IEHMOVE2, CNVDSORG, CNVRECFM         *\n*    . CLCL instead of TRT if looking for non-blank                   *\n*    . GAP count - add bytes for labels when read                     *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                                                     *\n* Updates:  (Remember to update HEADER2!!)                            *\n*                                                                     *\n*  23Dec90 U048 LDW - Display 4 digit years for tape labels           *\n*                        (PSWD field changed to 1 character wide,     *\n*                        other slight field movement/resizing)        *\n*                                                                     *\n*  09Oct90 U047 LDW - Remove some U046 updates which broke NL support *\n*                                                                     *\n*  14Aug90 U046 LDW - Update DEVTABX from V50E FDRDEVTB               *\n*                   - Correct (?) 3480 tapemark length                *\n*                   - Show cartridge lengths in percent               *\n*                   - Improve the \"wrong volume mounted\" message      *\n*                   - Fix more U034 errors                            *\n*                   - More corrections to \"CHECK\" tape length calc    *\n*                   - Another fix like U045                           *\n*                   - Fix bug that caused \"CHECK\" line to not be      *\n*                        printed for a file with EOV2 label           *\n*                   - Miscellenaneous minor cleanup                   *\n*                                                                     *\n*  25Jul90 U045 EMS - Fix S0C1 caused by bad U032/U033 refit          *\n*                                                                     *\n*  06Jun90 U044 LDW - Fix bug in DEVTABX for 3380K (caused S0C9s)     *\n*                   - Add 3390 to DEVTABX (sort of... need to know    *\n*                        what the FDR \"device type character\" is)     *\n*                                                                     *\n*  19Feb89 U043 LDW - Implement save area stack to allow program      *\n*                        growth                                       *\n*                   - Move LCTR to work area to free a register       *\n*                                                                     *\n*  19Feb89 U042 LDW - Fix bugs in rewritten CONVUFDR                  *\n*                                                                     *\n*  26Jan89 U041 LDW - Don't expand invalid density character          *\n*                                                                     *\n*  12Jan89 U040 LDW - Fix bugs in new method of tracking density      *\n*                                                                     *\n*  01Jan89 U039 LDW - New device type table (basically UCLA/OAC's     *\n*                        CS02046 fix)                                 *\n*                                                                     *\n*  01Jan89 U038 LDW - Pick up UCLA/OAC's fix CS02199 for disks with   *\n*                        > X'7FFF' tracks (3380K)                     *\n*                                                                     *\n*  30Dec88 U037 LDW - Pick up MAS's fix for FDR dump tapes with       *\n*                        blocks with no DSCBs                         *\n*                   - Update copyright to disallow distribution of    *\n*                        versions modified by anyone other than LDW   *\n*                   - Change some stuff to mixed case (not marked)    *\n*                   - Change HEADER1 and HEADER2                      *\n*                   - 3480 support                                    *\n*                   - Fix bug in conditional assembly so that the     *\n*                        TESTAUTH code for setting BLP gets           *\n*                        assembled for MVS                            *\n*                                                                     *\n*  12Jan88 U036 EMS - Fix not resetting counters on null file         *\n*                                                                     *\n*  28FEB87 U035 SDM - REFIT U033/U034 BACK ONTO U032 BASE             *\n*                                                                     *\n*  28MAR86 U034 CSL - ADD SUPPORT FOR DF/DSS @ 1.2.1 LEVEL            *\n*          U033 CSL - ADJUSTED FDR SUPPORT FOR V4.8 AND LATER         *\n*                   - CORRECTED MISC ERRORS IN FDR DSNAME LISTING     *\n*                                                                     *\n*  06JUL85 U032 EMS - UPDATE FOR NEW VERSION OF FDR (4.8)             *\n*                   - HANDLE BLOCKSIZES > 32K (NOW UP TO 64K)         *\n*                   - CREATE MACRO FOR PARMTABLE ENTRIES              *\n*                   - FIX FOR BLANK FIELDS IN LABELS                  *\n*                   - FIX CHECK FOR NL FDR TAPES                      *\n*                   - DETECT FDR/ABR TAPES AS DIFFERENT FROM FDR      *\n*                   - CHECK FOR VOL RECORDS 80 BYTES LONG             *\n*                                                                     *\n*---------------------------------------------------------------------*\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*  28MAY85 U031 LDW - CHANGE TAPE DSN TO KEEP ACF2 R4 QUIET           *\n*  26APR85          - CHECK FOR INVALID DATA BEFORE TRYING TO         *\n*                        CONVERT CDATE/EDATE                          *\n*                                                                     *\n*  11JUN85 U030 EMS - FIX FOR BLANK FIELDS IN DOS LABELS              *\n*                   - UNDERSCORE FIELDS THAT DIFFER BETWEEN HDR/TRL   *\n*                        LABELS                                       *\n*                                                                     *\n*  13FEB84 U029 LDW - FIX TURKEY BUG IN U025                          *\n*                                                                     *\n*  17JAN84 U028 LDW - PRINT DATES IN DDMMMYY FORM INSTEAD OF MMDDYY   *\n*                        (PARM=GDATE WILL REQUEST MMDDYY FORM)        *\n*                                                                     *\n*  02MAR83 U027 LDW - PRINT DATES IN MMDDYY FORM INSTEAD OF YY.DDD    *\n*                        (PARM=JDATE WILL REQUEST YY.DDD FORM)        *\n*                                                                     *\n*  13DEC82 U026 EMS - FIX BUG IN U025                                 *\n*                                                                     *\n*  02DEC82 U025 EMS - FIX DEVICETYPE TABLE IN U022                    *\n*                   - EXTRACT DATA FROM HEADER INSTEAD OF TRAILER     *\n*                        LABELS AND INDICATE INCONSISTANCIES          *\n*                   - CREATE SOME DCB EQUATES                         *\n*                                                                     *\n*  03NOV82 U024 LDW - FIX LOOP CAUSED  BY U023                        *\n*                   - ADD \"LINECNT=\" PARM                             *\n*                   - FIX SPELLING OF \"ASTERISKS\"                     *\n*                        (EMS:  IT'S NOT \"ASTRISKS\"!!)                *\n*                   - FIX SPELLING OF \"NOMEMBERS\" IN PARM TABLE       *\n*                                                                     *\n*  15JUL82 U023 LDW - ADD SUPPORT FOR ASCII STANDARD LABELS           *\n*                   - ADD THIRD BASE REG BY MOVING LCTR2 TO STORAGE   *\n*                                                                     *\n*  06JUL82 U022 EMS - LIST DSN'S DUMPED BY FDR & FRIENDS              *\n*                   - ADD SUPPORT FOR 3375, 3380'S FOR UTILITIES      *\n*                                                                     *\n*  18APR81 U021 LDW - SUPPORT DOS LABELED TAPES                       *\n*                   - RE-ORGANIZE PROGRAM SOMEWHAT                    *\n*                   - CHANGE \"ENTR\" TO \"OSENTER\"                      *\n*                   - CHANGE DEFAULT PRINT BLKSIZE FOR 3350'S         *\n*                   - SET LABEL=BLP ONLY IF ACTUALLY RUNNING APFAUTH  *\n*                                                                     *\n*  25SEP80 U020 LDW - PARM=SCAN                                       *\n*                   - COND ASM SWITCH FOR MVS                         *\n*                   - IMPROVE HANDLING OF UNEXPECTED TAPE MARK        *\n*                   - DON'T PRINT CDATE AND EDATE IF 00.000           *\n*                   - FIX MINOR BUG IN FDR DUMP TAPE DETECTION        *\n*                                                                     *\n*  09SEP80 U019 LDW - SET LABEL=BLP FOR TAPE                          *\n*                                                                     *\n*  06MAR80 U018 SDM - FIX CONFUSION BETWEEN 6250 AND 800 BPI          *\n*                                                                     *\n*---------------------------------------------------------------------*\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*  18JAN80 U017 SDM - FIX 6250 IBG ERROR IN LENGTH ESTIMATE           *\n*                                                                     *\n*  11JUL79 U016 LDW - FIX RECURSION BUG IN TAPE I/O ERROR HANDLING    *\n*                                                                     *\n*  10FEB79 U015 LDW - FIX VOLSER FOR NL TAPES                         *\n*                   - PRINT SENSE BIT MEANINGS                        *\n*                   - PRINT SENSE BIT MEANINGS                        *\n*                   - CHANGE FORMAT OF \"REQUESTED VOL\" MSG            *\n*                   - FIX ./DDNAME= BUG                               *\n*                                                                     *\n*  28JUN78 U014 LDW - RE-ARRANGE CODE, ADD 'NULL=' PARM               *\n*                                                                     *\n*  05MAY78 U013 LDW - PRINT SENSE INFO WHEN I/O ERROR OCCURS          *\n*                                                                     *\n*  06APR78      LDW - FIX A COUPLE OF TURKEY BUGS                     *\n*                                                                     *\n*  22FEB78      LDW - LIST MEMBERS IN AN IEBUPDTE INPUT STREAM        *\n*                                                                     *\n*  05JAN78      LDW - LIST MEMBERS UNLOADED BY IEHMOVE                *\n*                                                                     *\n*  26DEC78      LDW - NL TAPE ANALYSIS CODE ADDED                     *\n*                                                                     *\n*  14NOV77      LDW - DO A SENSE TO DETERMINE TRUE TAPE DENSITY       *\n*                                                                     *\n*  08NOV77      LDW - FIX SOME MISCELLANEOUS MINOR BUGS               *\n*                                                                     *\n*  16MAR77      LDW - LIST MEMBERS UNLOADED BY IEBCOPY                *\n*                   - ATTRS FOR IEBISAM AND IEHDASDR UNLOADED DS'S    *\n*                                                                     *\n*  13FEB77      LDW - GENERAL RE-WRITING OF TAPE READ CODE TO LIST    *\n*                     THE ORIGINAL ATTRIBUTESS FOR UNLOADED           *\n*                     DATASETS CREATED BY IEHMOVE (SYSMOVE) AND       *\n*                     IEBCOPY (VS2COPY)                               *\n*                   - CHANGE TAPE I/O ERROR AND TAPE MARK DETECTION   *\n*                     ALGORITHM.                                      *\n*                                                                     *\n*  07FEB77      LDW - PUT IN DSECTS FOR LABELS                        *\n*                   - FIX A BUG INTRODUCED IN UPDATE OF 01/06/77      *\n*                   - RE-WRITE PRINTLIN MACRO (CHANGE TO PRTLN)       *\n*                                                                     *\n*  06JAN77      LDW - COUNT LINES AND DO PAGE EJECT                   *\n*                   - MUCH OTHER MISCELLANEOUS STUFF                  *\n*                                                                     *\n*  08NOV76      LDW - (UNCLUDGED A LITTLE:)                           *\n*                   - FIX LENGTH CALCULATION                          *\n*                   - MAKE SOME MACROS INTO SUBROUTINES (IT SEEMS     *\n*                     THAT MSM NEVER HEARD OF SUBROUTINES             *\n*                   - PUT IN SYMBOLIC OFFSETS FOR PRINT LINE INFO     *\n*                                                                     *\n*  30OCT74      MSM - *TAPEINDX* -- CLUDGED UP IN A HURRY FROM A      *\n*                     SPASM PROGRAM TO MAKE A QUICK LOAD MODULE       *\n*                                                                     *\n*---------------------------------------------------------------------*\n         EJECT\n         MACRO                                                     U043\n&NFS     SUBINIT ,\n&NFS     CSECT ,\n.*&NFS   AMODE 31\n.*&NFS   RMODE ANY\n         DC    CL8'&NFS'                routine name\n         STM   R0,R15,0(R10)            save callers regs\n         LR    LBASE,R15                get local base\n         USNGX &NFS,LBASE\n         INUSE ,                                                   U043\n         LA    R10,16*4(,R10)           -> next stack element\n         CL    R10,STACKEND             overflow?\n         BH    OVERFLOW                 yes - blow out of here\n         SPACE 2\n         MEND\n         SPACE 3\n         MACRO                                                     U043\n&NFS     SUBEXIT ,\n&NFS     LA    R12,16*4                 length of stack element\n         SR    R10,R12                  -> previous stack element\n         LM    R2,R14,4*R2(R10)         restore callers regs\n         BR    R14                      return to caller\n         SPACE 2\n         MEND\n         SPACE 3\n         MACRO                                                     U043\n&NFS     SCALL &ROUTINE\n&NFS     L     R15,=A(&ROUTINE)         -> subroutine\n         BAL   R14,8(,R15)\n         SPACE 1\n         MEND\n         SPACE 3\n         MACRO\n&NFS     PRTLN &A,&I\n         LCLC  &LQ,&NAME                                           U043\n         LCLA  &L\n&LQ      SETC  'L'''                    TO FOOL THE ASSEMBLER\n&NAME    SETC  '&NFS'                                              U043\n         AIF   ('&A'(1,1) NE '''').NOTQ NOT QUOTED STRING\n&L       SETA  K'&A-2                   SET LENGTH OF IT\n&NAME    MVC   OUTBUFF(&L),=C&A\n&NAME    SETC  ''                                                  U043\n         AGO   .BAL\n.NOTQ    AIF   ('&A' EQ 'OUTBUFF').BAL                             U043\n         AIF   ('&I' EQ 'I').I\n&NAME    MVC   OUTBUFF(&LQ&A),&A\n&NAME    SETC  ''                                                  U043\n.BAL     ANOP\n.*&NAME  BAL   R14,PRTLN\n         MNOTE '         SCALL PRTLN'                              U043\n&NAME    SCALL PRTLN                                               U043\n         SPACE 1\n         MEXIT ,                                                   U043\n.I       ANOP\n&NAME    L     R15,=A(&A)\n&NAME    SETC  ''                                                  U043\n         MVC   OUTBUFF(&LQ&A),0(R15)\n         AGO   .BAL\n         MEND\n         SPACE 3\n         MACRO\n&NFS     PRTLN2  &DUMMY\n.*&NFS   BAL   R14,PRTLN2\n         MNOTE '         SCALL PRTLN2'                             U043\n&NFS     SCALL PRTLN2                                              U043\n         MEND\n         SPACE 3\n         MACRO\n&NFS     TAPIO &CCW,&TM=UNEXTPMK\n&NFS     LA    R0,&CCW\n         BAL   LINK,TAPIO\n         B     &TM                      TAPEMARK FOUND\n         SPACE 1\n         MEND\n         SPACE 3\n         MACRO\n&NFS     NEWPAGE  &C,&F\n         LCLC  &N                                                  U043\n&N       SETC  '&F'                     use specified file         U043\n         AIF   ('&F' NE '').HAVEN                                  U043\n&N       SETC  '1'                      assume SYSPRINT            U043\n.HAVEN   AIF   ('&C' EQ '').JUSTBAL\n         AIF   ('&C' EQ '(R0)').R0\n&NFS     LA    R0,&C\n.R0      BAL   LINK,NEWPAG&N.C                                     U043\n         MEXIT\n.JUSTBAL ANOP\n&NFS     BAL   LINK,NEWPAG&N                                       U043\n         MEND\n         SPACE 3\n         MACRO\n&NFS     IFP2  &L,&B\n&NFS     TM    TFLAG2,T2@PRT2\n         AIF   ('&L'(1,1) EQ 'N').NO\n         BO    &B\n         MEXIT\n.NO      BNO   &B\n         MEND\n         SPACE 3\n         MACRO\n&NFS     ICALL &RTN,&REG,&R1=,&R15=\n         LCLC  &NAME\n&NAME    SETC  '&NFS'\n         AIF   ('&R1' EQ '').A\n&NAME    LA    R1,&R1\n&NAME    SETC  ''\n.A       AIF   ('&R15' EQ '').B\n&NAME    LA    R15,&R15\n&NAME    SETC  ''\n.B       ANOP\n&NAME    BAL   &REG,&RTN\n         SPACE 1\n         MEND\n         SPACE 3\n         MACRO ,                                                   U025\n&NAME    LABCK &FLD,&TARG,&BLANK=NO                                U032\n         LCLC  &ORG,&SAVE,&NFS,&N                                  U037\n&NFS     SETC  '&NAME'                  SET NAME FIELD             U032\n&N       SETC  'IHB&SYSNDX'                                        U037\n&SAVE    SETC  'SAVEHDR1'               ASSUME HEADER 1 DATA       U025\n&ORG     SETC  'FL1LABI'                DITTO                      U025\n         AIF   ('&FLD'(1,3) EQ 'FL1').GEN01                        U025\n&SAVE    SETC  'SAVEHDR2'               GET HEADER 2 DATA          U025\n&ORG     SETC  'FL2LABI'                DITTO HERE TOO.            U025\n.GEN01   ANOP  ,                                                   U025\n         AIF   ('&BLANK' EQ 'YES').GEN02                           U032\n&NFS     CLC   &FLD-&ORG+&SAVE,BLANKS           IS FIELD BLANK?    U030\n&NFS     SETC  ''                       CLEAR NAME FIELD           U032\n         BNE   *+4+4+4                          NO, KEEP CHECKING  U030\n         MVI   #BLKFLD,C'#'                     INDICATE SUCH      U030\n         B     &N                               AND EXIT           U030\n.GEN02   ANOP  ,                        DON'T CHECK FOR BLANK FLDS U032\n&NFS     CLC   &FLD,&FLD-&ORG+&SAVE             SAME CONTENTS?     U032\n         BE    &N                               YES, CONTINUE      U030\n         MVI   #MSMATCH,C'*'                    NO, FLAG DIF       U025\n         MVC   &FLD,&FLD-&ORG+&SAVE             USE HDR1 INFO      U025\n         MVC   &TARG,UNDER                      UNDERSCORE FLD     U030\n&N       DS    0H                                                  U030\n         SPACE 1\n         MEND  ,                                                   U025\n         SPACE 3\n         MACRO ,                                                   U032\n&NFS     PARMTAB  &NAME,&BITS                                      U032\n         LCLA  &KN                                                 U032\n         LCLC  &NBITS(2)                                           U032\n&KN      SETA  K'&NAME-1                FOR STUPID ASMH            U032\n&NBITS(1) SETC 'X''FF''-&BITS(1)'       SET INVERSE FOR FIRST ONE  U032\n&NBITS(2) SETC 'X''FF''-&BITS(2)'       SET INVERSE FOR SECND ONE  U032\n&NFS     DC    Y(&KN),AL1&BITS,CL10'&NAME'                         U032\n         MEND  ,                                                   U032\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*  NON-IBM LIBRARY MACROS USED IN THIS PROGRAM ARE:                   *\n*                                                                     *\n*   CHARTAB  - GENERATE TRANSLATE TABLE                               *\n*   DAYS     - GENERATE TABLE OF DAY OF WEEK NAMES FOR \"TODAY\" MACRO  *\n*   DCBEXIT  - GENERATE DCB EXIT TO FILL IN DEFAULT BLKSIZE, BUFNO    *\n*   DROPX    - DELETE ENTRY FROM USING/DROP SYMBOL TABLE              *\n*   FL1      - HDR1/EOF1/EOV1 DSECT                                   *\n*   FL2      - HDR2/EOF2/EOV2 DSECT                                   *\n*   HEX      - CONVERT INTERNAL TO PRINTABLE HEX                      *\n*   HEXTAB   - GENERATE HEX TRANSLATE TABLE FOR \"HEX\" MACRO           *\n*   ID       - INNER MACRO FOR OSENTER                                *\n*   INUSE    - PRINT USING/DROP SYMBOL TABLE                          *\n*   IOBD     - IOB DSECT                                              *\n*   MONTHS   - GENERATE TABLE OF MONTH NAMES & NUMBER OF DAYS         *\n*   OSENTER  - OS HOUSEKEEPING                                        *\n*   OSENT01  - INNER MACRO FOR OSENTER                                *\n*   REGEQU   - INNER MACRO FOR OSENTER TO GEN EQU'S FOR REGISTERS     *\n*   TODAY    - FORMAT PRINTABLE CURRENT DATE & TIME                   *\n*   USNGX    - ADD ENTRY TO USING/DROP SYMBOL TABLE                   *\n*   VOL      - VOLUME LABEL DSECT                                     *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\n         GBLB  &MVS                                                U020\n&MVS     SETB  1                                                   U020\n         EJECT\nTAPEMAP  OSENTER  LPARM=R2,GETMAIN=(WORKLEN,WORKD,ZERO),           U021$\n               EXIT=LEAVE,RC=0,BASE2=R11,BASE3=R8                  U021\n         LA    R10,SA@STACK             -> first stack element     U043\n         LR    R0,R10                   compute address of ...     U043\n         AH    R0,=Y(STACKLEN)          ... last stack element     U043\n         ST    R0,STACKEND              save for overflow check    U043\n         SCALL INIT                     GO INITIALIZE              U043\n         EJECT\nREADCARD L     R1,OPENMFLI              GET SYSIN DCB ADDR\n         GET   (1),INBUFF\n         OI    TFLAG1,T1@DATA           SET FLAG\n         CLC   =C'./DDNAME',INBUFF      IS IT THIS?\n         BE    INDDNAME                 YES - PROCESS\n         CLC   =C'./VOLUME',INBUFF      IS IT THIS?\n         BNE   *+10                     NO - MUST BE VOL NAME\n         MVC   INBUFF(6),INBUFF+9       MOVE OVER\n         MVI   JFCB+117,1               # OF VOL SER #'S\n         MVC   JFCB+118(6),INBUFF       VOL SER #\n         MVI   JFCB+52,X'40'            VOLUME SERIAL LIST CHANGED\n         B     TAPEINDX                 SKIP THE RDJFCB, GO TO SUBROUTN\n         SPACE 2\nINDDNAME L     R1,TAPEMFL               GET ADDR OF TAPEDCB        U014\n         MVC   DCBDDNAM-IHADCB(,R1),INBUFF+9  MOVE DDNAME INTO DCB U025\n         SPACE 2\nRDJFCB   RDJFCB  MF=(E,TAPEMFL)\n         B     TAPEINDX                 GO TO SUBROUTINE\n         SPACE 3\nEOD2     CLOSE MF=(E,OPENMFL)\n         IFP2  N,LEAVE                  SKIP IF NOT OPEN\n         CLOSE MF=(E,OPENMFL2)\n         B     LEAVE                    RETURN\n         SPACE 2\nEOD      TM    TFLAG1,T1@DATA           DATA READ IN?\n         BO    EOD2                     YES.\n         MVC   RET#ADDR,=A(EOD2)        SET NEW RETURN ADDR\n         B     RDJFCB\n         SPACE 3\nOVERFLOW WTO   'Stack overflow in TAPEMAP -- Notify Support.',     U043$\n               ROUTCDE=11                                          U043\n         WTO   '   Routines called in sequence:',ROUTCDE=11        U043\n         LA    R2,16*4                  length of a stack element  U043\n         LA    R3,SA@STACK              -> first stack element     U043\n         LA    R1,=CL8'USCLGN*'         fake the first name        U043\n         SPACE 2\nOF$LOOP  MVC   OF$WTO+8+6(8),0(R1)      routine name               U043\nOF$WTO   WTO   '      xxxxxxxx',ROUTCDE=11                         U043\n         LA    R3,16*4(,R3)             -> next stack element      U043\n         L     R1,4*R11(,R3)            get routine's base         U043\n         CLR   R3,R10                   at end of stack?           U043\n         BNH   OF$LOOP                  no - keep going            U043\n         ABEND 4095,DUMP                the ultimate diagnostic    U043\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n* T A P E I N D X                                                     *\n*                                                                     *\n*    A ROUTINE WHICH READS IN THE VOLUME NAME & ALL THE DATA SET NAMES*\n*        (FROM THE TRAILER LABELS) OF A TAPE (WITH STANDARD LABELS)   *\n*        AND FORMATS AND PRINTS THE INFORMATION FROM THE LABELS.      *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\nTAPEINDX XC    LCTR2,LCTR2              INIT SECOND LINE COUNTER   U021\n         XC    NUMBNULL,NUMBNULL        INIT COUNT OF NULL FILES   U014\n         OI    TFLAG1,T1@PAGE1+T1@ANLZ  1ST PAGE/THIS VOL + ANLZ LABEL\n         SPACE 1\n* OPEN TAPE VOLUME FOR LABEL=BLP\n*U037    MVC   JFCB(40),HEADER1+34      BE CUTE WITH THE DSN\n*U037    MVI   JFCB+4,C'.'              MAKE IT A ...              U031\n*U037    MVI   JFCB+13,C'.'             ... SYNTACTICALLY ...      U031\n*U037    MVI   JFCB+18,C'.'             ... VALID DSNAME TO ...    U031\n*U037    MVI   JFCB+23,C'.'             ... KEEP ACF2 R4 ...       U031\n*U037    MVI   JFCB+32,C'.'             ... FROM GETTING UPSET     U031\n*U031    MVC   JFCB+40(4),=C'/LDW'      EVEN CUTER HERE...\n*U037    MVC   JFCB+40(4),=C'.LDW'      EVEN CUTER HERE...         U031\n*U037    MVC   JFCB+44(8),BLANKS        BLANK OUT ELEM NAME\n         SPACE 1\n         AIF   (NOT &MVS).MVS01                                    U037\n         TESTAUTH  FCTN=1               SEE IF WE ARE RUNNING...   U021\n         LTR   R15,R15                  ... APF AUTHORIZED         U021\n         BNZ   *+8                      SKIP IF NOT                U021\n.MVS01   MVI   JFCB+66,X'10'            LABEL=BLP                  U019\n         MVC   JFCB+68(2),=H'1'         FILE SEQ #                 U021\n         MVC   JFCB+70(2),=H'1'         VOL SEQ #                  U021\n         MVI   JFCB+98,X'40'            DSORG=PS\n         MVI   JFCB+100,X'90'           RECFM=FB\n         MVC   HEADER1+5(6),JFCB+118    INIT volser IN CASE NOT SL\n         XC    FILE#SEQ,FILE#SEQ\n         SPACE 1\n         OPEN  MF=(E,TAPEMFL),TYPE=J\n         L     R1,TAPEMFL               GET ADDR OF TAPEDCB        U014\n         TM    DCBOFLGS-IHADCB(R1),DCBOFOPN DATA SET OPEN?         U025\n         BO    TPOPENOK                 YES.\n         NEWPAGE ,                      PRINT THE HEADER\n         PRTLN '-*** Tape volume could not be opened ***'\n         B     RETURN\n         SPACE 3\nTPOPENOK NI    DCBMACRF-IHADCB(R1),X'FF'-DCBMRABC  BLOCK COUNT BAD U025\n         XC    LEN#TAPE(4*2),LEN#TAPE   CLEAR SL & NL LENGTHS\n         NI    TFLAG1,255-T1@BADEN-T1@SL RESET FLAGS\n         NI    TFLAG2,255-T2@ASCII      RESET SL ASCII FLAG        U023\n         L     R14,=A(COLHEAD2)         -> second column header    U046\n         TM    PARMFLG2,P2@PCT          force percent?             U046\n         BO    LEN_PCT                  yes                        U046\n         TM    PARMFLG2,P2@FEET         force feet?                U046\n         BO    LEN_FEET                 yes                        U046\n         L     R15,TAPEMFL              -> TAPEDCB                 U046\n         CLI   DCBDEVT-IHADCB(R15),DCBDVMT4  3480?                 U046\n         BNE   LEN_FEET                 no - default to feet       U046\n         SPACE 1\nLEN_PCT  MVC   #LENGTH-OUTBUFF(6,R14),=C' (pct)'                   U046\n         MVC   #CUMLEN-OUTBUFF(6,R14),=C'% full'                   U046\n         B     LEN_SET                                             U046\n         SPACE 1\nLEN_FEET MVC   #LENGTH-OUTBUFF(6,R14),=C'(feet)'                   U046\n         MVC   #CUMLEN-OUTBUFF(6,R14),=C'length'                   U046\n         SPACE 2\nLEN_SET  MVI   WHERE,0                  SET \"WHERE ARE WE\" FLAG\n         TAPIO TCCW#DAT,TM=LEADTPMK     READ IN VOLUME LABEL\n         MVC   VOLLABI(80),TAPEBUFF     SAVE VOLUME LABEL\n         SPACE 1\nDO$SENSE XR    R2,R2                    CLEAR                      U032\n         ICM   R2,B'0011',LASTSIZE      PRESERVE LENGTH OVER SENSE U032\n         LA    R0,C'0'                  assume 3480                U037\n         LA    R1,DEN#3480              ...                        U037\n         L     R15,TAPEMFL              -> TAPEDCB                 U037\n         CLI   DCBDEVT-IHADCB(R15),DCBDVMT4  3480?                 U037\n         BE    SAVE$DEN                 yes                        U037\n*--- The code above will need to be changed when 3480s come in     U037\n*--- multiple densities.                                           U037\n         TAPIO TCCW#SNS                 READ SENSE DATA\n         LA    R1,C'3'                  ASSUME 1600 BPI\n         TM    SENSDATA+3,B'00000100'   PE MODE?\n         BO    TRUE$GOT                 YES\n         LA    R1,C'2'                  ASSUME 800 BPI             U018\n         NI    SENSDATA+5,B'11000000'   CLEAN OFF SUBSYS DATA      U018\n         CLI   SENSDATA+5,B'01000000'   'NEW' SUBSYSTEM?           U018\n         BNE   TRUE$GOT                 NO, ASSUME 2400 SERIES     U018\n         TM    SENSDATA+6,B'00001000'   6250 CAPABLE DRIVE (MODEL#)U018\n         BNO   TRUE$GOT                 NO, DENSITY IS RIGHT       U018\n         LA    R1,C'4'                  YES, SET 6250              U018\n         SPACE 2\nTRUE$GOT LR    R0,R1                    COPY DENSITY CHAR\n         N     R1,=F'15'                STRIP IT                   U020\n         MH    R1,=Y(DEN#TBLL)          multiple by tbl entry len  U037\n         LA    R1,DEN#LIST(R1)          POINT TO table entry\n         SPACE 2\nSAVE$DEN MVC   DEN@BIN(DEN#TBLL),0(R1)  set den-related constants  U037\n         STC   R0,DEN@TRUE              SAVE 1 CHAR FORM           U037\n         SPACE 2\n         CLI   NUMBNULL+1,0             HOW MANY NULL SKIPPED?     U014\n         BNE   NULL1ST                  MORE THAN ZERO.            U014\n         CH    R2,=H'80'                LABEL RECORD 80 BYTES?     U032\n         BNE   NEITHER                  NO, CAN'T BE SL            U032\n         CLC   VOLLABI(4),=C'VOL1VOL1'  VOLUME LABEL?\n         BE    TPVOL1OK                 YES.\n         CLC   VOLLABI(4),=X'564F4C31'  ASCII VOLUME LABEL?        U023\n         BNE   NEITHER                  NO                         U023\n         OI    TFLAG2,T2@ASCII          YES - SET FLAG             U023\n         TR    VOLLABI(80),ASCIITAB     AND TRANSLATE TO ASCII     U023\n         B     TPVOL1OK                 JOIN STANDARD LABEL CODE   U023\n         SPACE 3\nNEITHER  MVC   VOLSERNO(6),JFCB+118     SET HERE FOR OVERPRINTING  U015\n         NEWPAGE ,                      PRINT THE HEADER LINES\n         PRTLN '0++++ No VOL1 label found.  NL analysis follows ++++'\n         LH    R0,LCTR                  get current line count     U043\n         BCTR  R0,0                     acct for extra blank line  U043\n         STH   R0,LCTR                  store updated line count   U043\n         PRTLN OUTBUFF                  BLANK LINE\n         SPACE 1\nNULL1ST  MVC   FL1ID,BLANKS             SET THE DSN                U014\n         SPACE 3\nNL$NEXT  STH   R2,LASTSIZE              RESTORE SIZE OF FIRST BLOCK\n         STH   R2,BYTECNT+2             INIT TOTAL BYTES READ\n         XC    BYTECNT(2),BYTECNT       CLEAR HIGH ORDER HALFWORD\n         STH   R2,MAXBLKSI              INIT BIGGEST BLOCK READ\n         MVC   BLOCKCNT,=F'1'           INIT # OF BLOCKS READ      U020\n         MVI   NLFLAGS,NL@F             INIT NL TYPE FLAGS\n         CLC   MAXBLKSI,TAPEBUFF        IS FIRST BLOCK RECFM=V?    U032\n         BNE   *+8                      NO - SKIP\n         OI    NLFLAGS,NL@V             YES - SET FLAG\n         MVI   WHERE,3                  SET \"WHERE ARE WE\" FLAG\n         MVC   UNLOADER,UNLOADER-1      CLEAR INDICATOR\n         LH    R1,FILE#SEQ              GET FILE NUMBER\n         LA    R1,1(,R1)                INCR\n         STH   R1,FILE#SEQ              PUT BACK\n         CVD   R1,DWD                   -> PACKED\n         UNPK  DWD(5),DWD+5(3)          -> EBCDIC\n         OI    DWD+4,C'0'               FIX SIGN\n         MVC   FL1FILSQ,DWD+1           PUT INTO \"LABEL\"\n         SPACE 1\n*  NOW SEE IF THIS FILE IS ANYTHING SPECIAL THAT WE KNOW ABOUT.\n*                                       +-----------------------------+\n*                                       |  IEHMOVE?                   |\n*                                       +-----------------------------+\n***      CLC   =H'800',LASTSIZE         RIGHT SIZE?\n***      BNE   NL$NMOVE                 NOT IEHMOVE\n         BAL   LINK,TEST$MV             IS IT IEHMOVE?\n         B     NL$NMOVE                 NO\n         B     IEHMOVE2                 YES - 2 PRINT FILE FORMAT\n         B     IEHMOVE1                 YES - 1 PRINT FILE FORMAT\n         SPACE 2\n*                                       +-----------------------------+\n*                                       |  IEBCOPY?                   |\n*                                       +-----------------------------+\nNL$NMOVE CLC   TAPEBUFF(8),=H'60,0,56,0' RECFM=V,BLK=60,REC=56?\n         BNE   NL$NCOPY                 NO - NOT IEBCOPY\n         BAL   LINK,TEST$CPY            IS IT IEBCOPY?\n         B     NL$NCOPY                 NO\n         B     IEBCOPY2                 YES - 2 PRINT FILE FORMAT\n         B     IEBCOPY1                 YES - 1 PRINT FILE FORMAT\n         SPACE 2\n*                                       +-----------------------------+\n*                                       |  IEHDASDR?                  |\n*                                       +-----------------------------+\nNL$NCOPY BAL   LINK,TEST$DMP            IS IT IEHDASDR?\n         B     NL$NDSDR                 NO\n*------* IFP2  Y,IHDASDR2\n         B     IHDASDR1\n         SPACE 2\n*                                       +-----------------------------+\n*                                       |  IEBUPDTE?                  |\n*                                       +-----------------------------+\nNL$NDSDR BAL   LINK,TEST$UPS            MAYBE IEBUPDTE INPUT STREAM?\n         B     NL$NUPDT                 BOY WILL THIS BE UNRELIABLE\n         B     IEBUPDT2                 YES - 2 PRINT FILE FORMAT\n         MVC   OUTBUFF2+8(27),=C'is an IEBUPDTE input stream'\n         B     NL$LOOP\n         SPACE 2\n*                                       +-----------------------------+\n*                                       |  INNOVATION'S FDR?          |\n*                                       +-----------------------------+\nNL$NUPDT BAL   LINK,TEST$FDR            IS IT FDR?\n         B     NL$NFDR                  NO\n*------* IFP2  Y,\n*U032    B     NL$LOOP                  YES, BUT I DON'T KNOW ANY MORE\n         B     FDR2                     YES - 2 PRINT FILE         U032\n         B     FDR1                     YES - 1 PRINT FILE         U032\n         SPACE 2\n*                                       +-----------------------------+\n*                                       |  IEBISAM?                   |\n*                                       +-----------------------------+\nNL$NFDR  BAL   LINK,TEST$IS             IS IT IEBISAM?\n         B     NL$NIS                   DIDN'T THINK SO...         U034\n         B     IEBISAM2                 YES - 2 PRINT FILE FORMAT\n         B     IEBISAM1                 YES - 1 PRINT FILE FORMAT\n         SPACE 3\n*                                       +-----------------------------+\n*                                       |  IBM'S DF/DSS?              |\n*                                       +-----------------------------+\nNL$NIS   BAL   LINK,TEST$DSS            IS IT DSS?                 U034\n         B     NL$LOOP                  NO                         U034\n*------* IFP2  Y,                                                  U034\n         B     NL$LOOP                  YES, BUT DON'T KNOW MORE   U034\n         SPACE 2\n*                                       +-----------------------------+\n*                                       |  READ THE WHOLE FILE        |\n*                                       +-----------------------------+\nNL$LOOP  TAPIO TCCW#DAT,TM=NL$EOF       READ A BLOCK\n         B     NL$LOOP                  DO THAT TILL EOF\n         SPACE 2\n*                                       +-----------------------------+\n*                                       |  PRINT NL STATS             |\n*                                       +-----------------------------+\nNL$EOF   CLI   UNLOADER,C' '            A SECOND LINE?\n         BE    *+12                     NO - SKIP\n         NEWPAGE  2                     MAKE SURE WE HAVE ENOUGH\n         SPACE 1\n         MVC   #UNLOAD,UNLOADER\n         LH    R1,FILE#SEQ              GET THE FILE SEQ #\n         CVD   R1,DWD                   TO PACKED\n         MVC   #FILE-1(5),=X'2020202120'\n         ED    #FILE-2(6),DWD+5\n         SPACE 3\nNL$SL    CLC   =C'(null)',UNLOADER+3    SL NULL FILE?              U021\n         BE    NLSLDONE                 YES - CAN'T DO ANYTHING    U021\n         SCALL NL$ATTR                  DO NL DCB ATTRIBUTES       U043\n         TM    TFLAG1,T1@SL             THIS TAPE SL?\n         BO    NLSLDONE                 YES - DIFFERENT HANDLING\n         SPACE 1\nNL$DONEX TAPIO TCCW#DAT,TM=NULL$NL      READ NEXT FILE'S FIRST BLK U014\n         XR    R2,R2                    CLEAR FOR ICM              U032\n         ICM   R2,B'0011',LASTSIZE      GET SIZE OF LAST BLOCK     U032\n         B     NL$NEXT                  PROCESS NEXT FILE\n         SPACE 2\nNLSLDONE PRTLN OUTBUFF                  BLANK LINE\n         B     NEXTFILE                 NEXT SL FILE\n         SPACE 2\nNULL$NL  LH    R1,NUMBNULL              GET NUMBER OF NULL FILES   U014\n         LA    R1,1(,R1)                INCR                       U014\n         STH   R1,NUMBNULL              SAVE NEW COUNT             U014\n         CH    R1,NULLNUMB              DONE ENOUGH?               U014\n         BH    HAVE$EOV                 YES - STOP                 U014\n         LH    R1,FILE#SEQ              MUST INCR...               U014\n         LA    R1,1(,R1)                ...THIS ALSO...            U014\n         STH   R1,FILE#SEQ              ...                        U014\n         MVC   #FILE-1(5),=X'2020202120'  MOVE IN EDIT MASK        U014\n         CVD   R1,DWD                                              U014\n         ED    #FILE-2(6),DWD+5                                    U014\n         MVC   #UNLOAD+3(6),=C'(null)'  PUT IN INDICATOR           U014\n         PRTLN OUTBUFF                                             U014\n         L     R0,LEN#TAPE+4            GET ACCUMULATED TAPE LENGTHU014\n         AH    R0,=Y(375)               COUNT 1 TAPEMARK           U014\n         ST    R0,LEN#TAPE+4            SAVE UPDATED               U014\n         B     NL$DONEX                                            U014\n         SPACE 3\nTPVOL1OK OI    TFLAG1,T1@SL\n         MVC   BYTECNT,=F'80'           init byte count            U046\n         MVC   HEADER1+5(6),VOLSERNO\n         MVC   HEADER1+19(10),VOLOWNER\n         MVC   HEADER1+13(6),HEADER1+12 BLANK OUT KEYWORD\n         CLC   VOLOWNER,BLANKS          OWNER ALL BLANK?\n         BE    *+10\n         MVC   HEADER1+13(6),=C'Owner='\n         NI    TFLAG2,255-T2@RQVOL      TURN OFF FLAG\n         CLC   VOLSERNO(6),JFCB+118     GET WHAT WE ASKED FOR?\n         BE    *+8                      YES - CONTINUE\n         OI    TFLAG2,T2@RQVOL          SET FLAG\n         SPACE 1\n         NEWPAGE ,                      PRINT HEADER LINES\n         NI    TFLAG1,255-T1@ANLZ       RESET FLAG\n         TM    PARMFLG1,P1@SCAN+P1@CHECK+P1@NL   ANALYZING?        U020\n         BZ    *+8                      NO - SKIP\n         OI    TFLAG1,T1@ANLZ           YES - SET ANALYZE FLAG\n         SPACE 1\n         TM    PARMFLG1,P1@NL           FORCE NL ANALYSIS?\n         BNO   NO$FORCE                 NO - CONTINUE\n         XI    TFLAG1,T1@SL             YES - TURN OFF FLAG\n         B     NL$NEXT                  AND GO TO NL ROUTINE\n         SPACE 2\nNO$FORCE MVI   WHERE,1                  SET \"WHERE ARE WE\" FLAG\n         NI    TFLAG2,255-T2@DOSTP      RESET DOS FLAG             U021\n         TAPIO TCCW#L1,TM=MISSHDR1      READ THE first HDR1 LABEL  U021\n         L     R0,BYTECNT               get current byte count     U046\n         AH    R0,=H'80'                adjust by length just read U046\n         ST    R0,BYTECNT               save updated value         U046\n         TM    TFLAG2,T2@ASCII          ASCII STANDARD LABELS?     U023\n         BNO   *+10                     NO - SKIP                  U023\n         TR    FL1LABI(80),ASCIITAB     YES - TRANSLATE TO EBCDIC  U023\n         MVC   SAVEHDR1,FL1LABI         SAVE COPY OF HEADER 1      U025\n         XC    FL2LABI(80),FL2LABI      IN CASE IT DOESN'T EXIST   U021\n         XC    SAVEHDR2,SAVEHDR2        DITTO                      U025\n         TAPIO TCCW#L2,TM=MIS1HDR2      READ THE first HDR2 LABEL  U021\n         L     R0,BYTECNT               get current byte count     U046\n         AH    R0,=H'80'                adjust by length just read U046\n         ST    R0,BYTECNT               save updated value         U046\n         TM    TFLAG2,T2@ASCII          ASCII STANDARD LABELS?     U023\n         BNO   *+10                     NO - SKIP                  U023\n         TR    FL2LABI(80),ASCIITAB     YES - TRANSLATE TO EBCDIC  U023\n         MVC   SAVEHDR2,FL2LABI         SAVE COPY FOR LATER        U025\n         B     DATAREAD                 SKIP AROUND NORMAL CODE\n         SPACE 2\n*---  FIRST HDR2 LABEL IS MISSING.                                 U021\nMIS1HDR2 CLI   FL1ID,C'0'               MAYBE IEHINITT?            U021\n         BNE   MISSHDR2                 NO - SKIP                  U021\n         CLC   FL1ID(80-4-1),FL1ID+1    ALL CHARACTER ZEROES?      U021\n         BE    IEHINITT                 YES - IEHINITT TAPE        U021\n         SPACE 1\n*---  A HDR2 LABEL IS MISSING.                                     U021\nMISSHDR2 OI    TFLAG2,T2@DOSTP          HDR2 LABEL MISSING         U021\n         B     NO$FSF                   SKIP FIRST TIME CODE       U021\n         SPACE 2\nNEXTFILE TM    TFLAG2,T2@DOSTP          EOF2 MISSING?              U021\n         BO    READHDR1                 YES - ALREADY AT TAPEMARK  U021\n         TAPIO TCCW#FSF                 FWD SPACE\n         SPACE 1\nREADHDR1 MVI   WHERE,1                  SET \"WHERE ARE WE\" FLAG\n         NI    TFLAG2,255-T2@DOSTP      RESET DOS FLAG             U021\n         TAPIO TCCW#L1,TM=HAVE$EOV      READ THE HDR1 LABEL        U021\n         MVC   BYTECNT,=F'80'           init byte count            U046\n         TM    TFLAG2,T2@ASCII          ASCII STANDARD LABELS?     U023\n         BNO   *+10                     NO - SKIP                  U023\n         TR    FL1LABI(80),ASCIITAB     YES - TRANSLATE TO EBCDIC  U023\n         MVC   SAVEHDR1,FL1LABI         SAVE COPY OF HEADER 1      U026\n         XC    FL2LABI(80),FL2LABI      IN CASE IT DOESN'T EXIST   U021\n         XC    SAVEHDR2,SAVEHDR2        DITTO                      U026\n         TAPIO TCCW#L2,TM=MISSHDR2      READ THE HDR2 LABEL        U021\n         L     R0,BYTECNT               get current byte count     U046\n         AH    R0,=H'80'                adjust by length just read U046\n         ST    R0,BYTECNT               save updated value         U046\n         TM    TFLAG2,T2@ASCII          ASCII STANDARD LABELS?     U023\n         BNO   *+10                     NO - SKIP                  U023\n         TR    FL2LABI(80),ASCIITAB     YES - TRANSLATE TO EBCDIC  U023\n         MVC   SAVEHDR2,FL2LABI         SAVE COPY FOR LATER        U026\n         SPACE 1\nDATAREAD TAPIO TCCW#FSF                 SKIP TO END OF HDR LABELS  U021\n         SPACE 1\nNO$FSF   MVC   UNLOADER,UNLOADER-1      CLEAR UNLOADED FLAG\n         MVI   NLFLAGS,NL@V+NL@F        ASSUME RECFM=V & RECFM=F\n         MVI   WHERE,3                  SET \"WHERE ARE WE\" FLAG\n         XC    MAXBLKSI,MAXBLKSI        Clear to 0                 U036\n         MVC   BYTECNT,=A(4*80)         Set to 2 HDR + 2 EOF lbls  U036\n         XC    BLOCKCNT,BLOCKCNT        Clear blocks read          U036\n         TAPIO TCCW#DAT,TM=NULLFILE     READ FIRST DATA BLOCK\n         XR    R1,R1                    CLEAR FOR ICM              U032\n         ICM   R1,B'0011',LASTSIZE      GET SIZE OF (FIRST) BLOCK  U032\n         STH   R1,MAXBLKSI              INIT BIGGEST BLOCK READ\n*U036    AH    R1,=Y(4*80)              2 HDR + 2 EOF LABELS\n         A     R1,BYTECNT               Update current byte count  U036\n         ST    R1,BYTECNT               INIT TOTAL BYTES READ\n         MVC   BLOCKCNT,=F'1'           INIT NUMBER OF BLOCKS READ U020\n         NI    NLFLAGS,255-NL@CHANG     FIRST BLOCK NOT A CHANGE\n         OI    NLFLAGS,NL@F             STILL COULD BE RECFM=F\n         SPACE 2\n         CLI   FL2RECFM,C'F'            RECFM=FB?\n         BNE   NOT$RF$F                 NO - NOT IEHMOVE OR IEBISAM\n         CLC   FL2LRECL,C00080          LRECL=80?\n         BNE   FIND$EOF                 NO - NOT IEHMOVE OR IEBISAM\n***      CLC   FL2BLKL,C00800           BLKSIZE=800?\n***      BNE   TST$UPDT                 NO - NOT IEHMOVE'D\n         CLI   FL2BLKA,C'B'             BLOCKED?\n         BNE   TST$UPDT                 NO - NOT IEHMOVE'D\n         BAL   LINK,TEST$MV             IS IT IEHMOVE?\n         B     TST$UPDT                 NO - TRY NEXT\n         B     IEHMOVE2                 YES - 2 PRINT FILE FORMAT\n         B     TEST$LCT                 YES - 1 PRINT FILE FORMAT\n         SPACE 3\nNOT$RF$F CLI   FL2RECFM,C'V'            RECFM=V?\n         BNE   NOT$RF$V                 NO - NOT IEBCOPY'D\n         CLI   FL2BLKA,C'S'             RECFM=VS?\n         BNE   FIND$EOF                 NO - NOT IEBCOPY'D\n         BAL   LINK,TEST$CPY            IS IT VS2COPY?\n         B     FIND$EOF                 NO\n         B     IEBCOPY2                 YES - 2 PRINT FILE FORMAT\n         B     TEST$LCT                 YES - 1 PRINT FILE FORMAT\n         SPACE 3\nNOT$RF$V CLI   FL2RECFM,C'U'            RECFM=U?\n         BNE   FIND$EOF                 NO - NOT IEHDASDR\n         BAL   LINK,TEST$DMP            IS IT IEHDASDR?\n         B     NOT$DSDR                 NO\n*------* IFP2  Y,IHDASDR2               USING SECOND PRINT FILE?\n         B     TEST$LCT                 CONTINUE\n         SPACE 3\nNOT$DSDR BAL   LINK,TEST$FDR            IS IT FDR?\n         B     TST$DSS                  NO                         U034\n*------* IFP2  Y,                       USING SECOND PRINT FILE?\n         B     FDR2                     USING SECOND PRINT FILE?   U022\n         B     FDR1                     NO, JUST IDENTIFY          U022\n         SPACE 3\nTST$UPDT BAL   LINK,TEST$UPS            SEE IF IEBUPDTE INPUT STREAM\n         B     TST$ISAM                 PROBABLY NOT\n         B     IEBUPDT2                 YES - 2 PRINT FILE FORMAT\n         MVC   OUTBUFF2+8(27),=C'is an IEBUPDTE input stream'\n         B     TEST$LCT\n         SPACE 3\nTST$ISAM BAL   LINK,TEST$IS             IS IT IEBISAM?\n         B     FIND$EOF                 NO\n         B     IEBISAM2                 YES - 2 PRINT FILE FORMAT\n         B     TEST$LCT                 YES - 1 PRINT FILE FORMAT  U034\n         SPACE 2\nTST$DSS  BAL   LINK,TEST$DSS            IS IT DSS?                 U034\n         B     FIND$EOF                 NO                         U034\n         B     DSS2                     USING SECOND PRINT FILE?   U034\n         B     DSS1                     NO, JUST IDENTIFY          U034\n         SPACE 1\nTEST$LCT TM    PARMFLG1,P1@INLIN        PARM=INLINE?\n         BNO   FIND$EOF                 NO - SKIP THIS\n         NEWPAGE  2                     MORE THAN 1 LINE LEFT?\n         SPACE 1\n         CLC   IEBCOPY,UNLOADER         UNLOADED BY IEBCOPY?\n         BE    IEBCOPY1                 YES - PRINT EXTRA INFO\n         CLC   IEHMOVE,UNLOADER         UNLOADED BY IEHMOVE?\n         BE    IEHMOVE1                 YES - PRINT EXTRA INFO\n         CLC   IEBISAM,UNLOADER         UNLOADED BY IEBISAM?\n         BE    IEBISAM1                 YES - PRINT EXTRA INFO\n         CLC   IEHDASDR,UNLOADER        DUMPED BY IEHDASDR?\n         BE    IHDASDR1                 YES - PRINT EXTRA INFO\n         SPACE 3\nFIND$EOF TM    PARMFLG1,P1@SCAN+P1@CHECK  ANALYZING SL TAPE?       U020\n         BZ    DATA$FSF                 no - FSF over the data     U037\n*---  Keep reading until hit a tapemark (EOF)\n         SPACE 1\nSCAN$EOF TAPIO TCCW#DAT,TM=SL$SAVE      READ & TALLY A DATA BLOCK\n         B     SCAN$EOF                 DO THAT TILL EOF\n         SPACE 2\nSL$SAVE  MVC   NL#SAVE(NLSTUFFL),NLSTUFF  SAVE ALL INFO            U046\n         MVC   NL#FLAGX,NLFLAGS         MORE...\n         B     READ$EOF                 GO READ THE EOF LABELS\n         SPACE 2\nNULLFILE MVC   UNLOADER+3(6),=C'(null)' PUT IN INDICATOR\n         B     READ$EOF                 GO GET EOF1/EOF2           U021\n         SPACE 2\nDATA$FSF TAPIO TCCW#FSF                 FSF PAST REST OF DATA\n         SPACE 3\nREAD$EOF MVI   WHERE,2                  SET \"WHERE ARE WE\" FLAG\n         TAPIO TCCW#L1,TM=MISSEOF1      READ FIRST TRAILER LABEL   U021\n         TM    TFLAG2,T2@ASCII          ASCII STANDARD LABELS?     U023\n         BNO   *+10                     NO - SKIP                  U023\n         TR    FL1LABI(80),ASCIITAB     YES - TRANSLATE TO EBCDIC  U023\n         CLC   =C'EOF1',FL1LABI         TRAILER LABEL?\n         BE    HAVEEOF1                 YES - OK\n         CLC   =C'EOV1',FL1LABI         OTHER KIND?\n         BE    HAVEEOF1                 YES - OK\n      PRTLN '0*** EOF1 or EOV1 label not found where expected ***' U021\n         B     REWINDIT                 REWIND AND LEAVE    %%%%%%%%%\n         SPACE 2\nMISSEOF1 PRTLN '0*** Tapemark read when expecting EOF1 or EOV1 ***' U21\n         B     REWINDIT                 REWIND AND LEAVE    %%%%%%%%%\n         SPACE 2\nMISSEOF2 OI    TFLAG2,T2@DOSTP          REMEMBER NO EOF2           U021\n         B     NO$EOF2                  CONTINUE                   U021\n         SPACE 2\nHAVEEOF1 XC    FL2LABI(80),FL2LABI      IN CASE IT DOESN'T EXIST   U021\n         TAPIO TCCW#L2,TM=MISSEOF2      READ TRAILER LABEL         U021\n         TM    TFLAG2,T2@ASCII          ASCII STANDARD LABELS?     U023\n         BNO   *+10                     NO - SKIP                  U023\n         TR    FL2LABI(80),ASCIITAB     YES - TRANSLATE TO EBCDIC  U023\n         SPACE 2\n*                                       +-----------------------------+\n*                                       |  PRINT SL STATS             |\n*                                       +-----------------------------+\nNO$EOF2  LA    R1,1                     ASSUME 1-LINE GROUPS\n         TM    PARMFLG1,P1@CHECK        CHECKING?\n         BNO   *+8                      NO - SKIP\n         LA    R1,2(,R1)                YES - NEED 2 MORE EACH\n         CLI   UNLOADER,C' '            IS THIS FILE UNLOADED?\n         BE    *+8                      NO - SKIP\n         LA    R1,1(,R1)                YES - NEED 1 MORE LINE\n         LR    R0,R1                    COPY FOR STUPID MACRO\n         NEWPAGE  (R0)                  CHECK FOR ENOUGH LINES\n         SPACE 2\n*                                       +-----------------------------+\n*                                       |  UNLOADED BY                |\n*                                       +-----------------------------+\n         MVC   #UNLOAD,UNLOADER         SAY WHO UNLOADED IT\n*                                       +-----------------------------+\n*                                       |  FILE SEQUENCE NUMBER       |\n*                                       +-----------------------------+\n         LABCK FL1FILSQ,#FILEU          HDR/EOF MATCH?             U030\n         MVC   #FILE,FL1FILSQ           FILE #\n         ICALL DEZERO,R14,R1=#FILE      REMOVE LEADING ZEROES\n*                                       +-----------------------------+\n*                                       |  DATASET NAME               |\n*                                       +-----------------------------+\n         LABCK FL1ID,#DSNU              HDR/EOF MATCH?             U030\n         MVC   #DSN(17),FL1ID           DSN\n*                                       +-----------------------------+\n*                                       |  PASSWORD PROTECTION INDIC. |\n*                                       +-----------------------------+\n         LABCK FL1FSEC,#PSWDU,BLANK=YES HDR/EOF MATCH?             U032\n         TM    TFLAG2,T2@ASCII          ASCII LABELS?              U023\n         BO    ASCII$PW                 YES - DIFFERENT CHECK      U023\n         CLI   FL1FSEC,C'0'             PASSWORD PROTECTED?\n         BE    NOTPSWD                  NO - SKIP\n         CLI   FL1FSEC,C'1'             PASSWORD PROTECTED?\n         BE    YESPSWD                  YES - MOVE IT IN\n         CLI   FL1FSEC,C'3'             NOPWREAD?\n         BNE   WHATPSWD                 NO - WHAT THEN????\n*U048    MVC   #PSWD,=C'WRT'            YES\n         MVI   #PSWD,C'W'               YES                        U048\n         B     NOTPSWD                  CONTINUE\n*HATPSWD MVC   #PSWD,=C'???'   *U048    SAY WHAT?\nWHATPSWD MVI   #PSWD,C'?'               SAY WHAT?                  U048\n         B     NOTPSWD\nASCII$PW CLI   FL1FSEC,C' '             ASCII TAPES HAVE BLANK     U023\n         BE    NOTPSWD                  IF NOT, IT'S PROTECTED     U023\n*YESPSWD MVC   #PSWD,=C'YES'   *U048    SAY SO.\nYESPSWD  MVI   #PSWD,C'R'               SAY SO.                    U048\n         SPACE 3\n*                                       +-----------------------------+\n*                                       |  CREATION DATE              |\n*                                       +-----------------------------+\nNOTPSWD  LABCK FL1CREDT,#CDATEU         HDR/EOF MATCH?             U030\n         ICALL FMT$DATE,LINK,R1=FL1CREDT,R15=#CDATE                U048\n*                                       +-----------------------------+\n*                                       |  EXPIRATION DATE            |\n*                                       +-----------------------------+\nNO$CDATE LABCK FL1EXPDT,#EDATEU,BLANK=YES  HDR/EOF MATCH?          U032\n         ICALL FMT$DATE,LINK,R1=FL1EXPDT,R15=#EDATE                U048\n*                                       +-----------------------------+\n*                                       |  BLOCK COUNT                |\n*                                       +-----------------------------+\nNO$EDATE MVC   #BLKCNT,FL1BLKCT         BLOCK COUNT\n         ICALL DEZERO,R14,R1=#BLKCNT    REMOVE LEADING ZEROES\n         TM    TFLAG2,T2@DOSTP          HDR2/EOF2 MISSING?         U021\n         BNO   OK$RECFM                 NO - FORMAT RECFM,LRECL,BLKU021\n         MVC   #CREATOR(18),=C'**** DOS tape ****'                 U021\n         IC    R15,DEN@TRUE             get true density           U037\n         STC   R15,FL2DEN               PUT HERE ALSO FOR LATER    U021\n         B     DOS$DEN                  JUMP INTO THE MIDDLE       U021\n         SPACE 2\n*                                       +-----------------------------+\n*                                       |  RECORD FORMAT              |\n*                                       +-----------------------------+\nOK$RECFM LABCK FL2RECFM,#RECFMU,BLANK=YES  HDR/EOF MATCH?          U032\n         MVC   #RECFM(1),FL2RECFM       RECFM                      U025\n         LABCK FL2BLKA,#RECFMU,BLANK=YES  HDR/EOF MATCH?           U032\n         MVC   #RECFM+1(1),FL2BLKA      BLOCK ATTRIBUTE\n         LABCK FL2CNTRL,#RECFMU,BLANK=YES  HDR/EOF MATCH?          U032\n         MVC   #RECFM+2(1),FL2CNTRL     CONTROL CHARACTER\n         CLI   #RECFM+1,C'R'            WEIRDO RECFM?  (FR OR VR)\n         BNE   NOT$RF$R                 NOT RECFM=FR OR VR\n         MVC   #RECFM+3(1),#RECFM+2     MOVE CTL CHAR OVER\n         MVC   #RECFM+1(2),=C'BS'       IT'S REALLY FBS OR VBS\n*                                       +-----------------------------+\n*                                       |  BLOCK SIZE                 |\n*                                       +-----------------------------+\nNOT$RF$R LABCK FL2BLKL,#BLKSIU          HDR/EOF MATCH?             U030\n         MVC   #BLKSIZE,FL2BLKL         BLOCK LENGTH               U030\n         ICALL DEZERO,R14,R1=#BLKSIZE   REMOVE LEADING ZEROES      U030\n*                                       +-----------------------------+\n*                                       |  LOGICAL RECORD LENGTH      |\n*                                       +-----------------------------+\n         LABCK FL2LRECL,#LRECLU,BLANK=YES  HDR/EOF MATCH?          U032\n         MVC   #LRECL,FL2LRECL          RECORD LENGTH\n         ICALL DEZERO,R14,R1=#LRECL     REMOVE LEADING ZEROES\n*                                       +-----------------------------+\n*                                       |  DENSITY                    |\n*                                       +-----------------------------+\n         LABCK FL2DEN,#DENU             HDR/EOF MATCH?             U030\n         IC    R15,FL2DEN               GET TAPE DENSITY\nDOS$DEN  STC   R15,#DEN+1               SET IN PRINT LINE\n         CLM   R15,B'0001',DEN@TRUE     LABEL CORRECT?             U037\n         BE    *+8                      YES - OK\n         OI    TFLAG1,T1@BADEN          SET BAD DENSITY FLAG\n         TM    PARMFLG2,P2@DEN1         PARM=DEN1?                 U041\n         BNZ   DEN$1                    YES - LEAVE 1 CHAR DEN     U041\n         CLI   FL2DEN,C'0'              TOO LOW?                   U041\n         BL    DEN$1                    YES - SKIP                 U041\n         CLI   FL2DEN,C'4'              TOO HIGH for reel or cart? U041\n         BH    DEN$1                    YES - SKIP                 U041\n         N     R15,=F'15'               JUST DIGIT                 U020\n         MH    R15,=Y(DEN#TBLL)         MULTIPLY BY table ent len  U037\n         LA    R3,DEN#LIST(R15)         POINT TO DENSITY tbl ent\n         L     R1,TAPEMFL               -> TAPEDCB                 U037\n         CLI   DCBDEVT-IHADCB(R1),DCBDVMT4  3480?                  U037\n         BNE   DEN$OK                   no - ok                    U037\n         CLI   FL2DEN,C'0'              TOO HIGH for cartridge?    U041\n         BH    DEN$1                    YES - SKIP                 U041\n         LA    R3,DEN#3480(R15)         POINT TO DENSITY VALUE     U037\nDEN$OK   MVC   #DEN,4(R3)               MOVE CHAR FORM OF DENSITY  U037\n         CLI   #DEN,C' '                3 CHAR DENSITY?            U021\n         BNE   *+10                     NO - SKIP                  U021\n         MVC   #DEN(4),#DEN+1           YES - SHIFT IT OVER        U021\n         SPACE 2\nDEN$1    TM    TFLAG2,T2@DOSTP          DOS TAPE?                  U021\n         BNO   DO$TRTCH                 NO - SKIP                  U021\n         MVC   #LENGTH,=C'?????'                                   U021\n         MVC   #CUMLEN,=C'?????'                                   U021\n         TM    PARMFLG1,P1@SCAN         PARM=SCAN?                 U021\n         BNO   DONE$FL2                 NO - SKIP                  U021\n         SCALL NL$ATTR                  FORMAT RECFM/LRECL/BLKSIZE U043\n         B     DONE$FL2                 SKIP THE REST              U021\n         SPACE 1\n*                                       +-----------------------------+\n*                                       |  TRTCH                      |\n*                                       +-----------------------------+\nDO$TRTCH LABCK FL2TRTCH,#TRTCHU,BLANK=YES  HDR/EOF MATCH?          U032\n         MVC   #TRTCH,FL2TRTCH          TAPE RECORDING TECHNIQUE   U025\n*                                       +-----------------------------+\n*                                       |  CREATING JOB & STEP NAMES  |\n*                                       +-----------------------------+\n         LABCK FL2JOBD,#CREATU          HDR/EOF MATCH?             U030\n         MVC   #CREATOR,FL2JOBD         CREATOR'S JOB & STEP NAMES\n*                                       +-----------------------------+\n*                                       |  LENGTH (INCHES)            |\n*                                       +-----------------------------+\n         PACK  DWD,FL1BLKCT(6)          BLOCK COUNT\n         CVB   R15,DWD                  SAVE BLOCK COUNT\n         LA    R1,4(,R15)               ADD 4 GAPS TO BLOCK COUNT.\n*  NOTE - LENGTH KEPT IN .01 INCHES\n         M     R1-1,DEN@GAPL            multiply by gap length     U037\n         SPACE 1\n         LR    R2,R1                    SAVE LENGTH OF GAPS\n         PACK  DWD,FL2BLKL(5)           BLKSIZE.\n         CVB   R1,DWD\n         MR    R1-1,R15                 BLKSIZE * BLOCK_COUNT = BYTES\n         A     R1,=A(4*80)              2 HDR + 2 EOF labels       U036\n         TM    PARMFLG1,P1@SCAN         PARM=SCAN?                 U020\n         BNO   *+8                      NO - USE COMPUTED          U020\n         L     R1,BYTECNT               YES - USE ACTUAL BYTE COUNTU020\n*U036    AH    R1,=Y(4*80)              2 HDR & 2 EOF LABELS\n         M     R1-1,=F'100'             CONVERT TO .01\n         D     R1-1,DEN@BIN             DIVIDE BY DENSITY.         U037\n*U037    AH    R1,=Y(375*3)             3 TAPEMARKS @ 3.75 INCH\n         AH    R1,DEN@TM                add length of a tapemark   U037\n         AH    R1,DEN@TM                add length of a tapemark   U037\n         AH    R1,DEN@TM                add length of a tapemark   U037\n         AR    R1,R2                    ADD TO LENGTH OF DATA\n         LR    R2,R1                    save for later\n         ICALL TAPE_LEN,R14,R15=#LENGTH-1 FORMAT FILE LENGTH (FEET)\n         A     R2,LEN#TAPE              ADD TO TOTAL LENGTH\n         ST    R2,LEN#TAPE              SAVE NEW TOTAL LENGTH\n         LR    R1,R2                    COPY FOR SUBROUTINE\n         ICALL TAPE_LEN,R14,R15=#CUMLEN-1 FORMAT CUMULATIVE LENGTH\n         SPACE 3\nDONE$FL2 XR    R2,R2                    CLEAR FLAG                 U030\n         CLI   #MSMATCH,C'*'            HDR/EOF CONSISTANT?        U025\n         BNE   *+12                     YES, CONTINUE              U030\n         OI    TFLAG2,T2@HDRDF          NO, FLAG LINE              U025\n         LA    R2,1                     FORCE POSITIVE             U030\n         CLI   #BLKFLD,C'#'             HDR BLANK FIELDS?          U030\n         BNE   *+8                      NO, CONTINUE               U030\n         OI    TFLAG2,T2@HDRBK          YES, FLAG IT               U030\n         SPACE 1\n         PRTLN OUTBUFF                                             U025\n         LTR   R2,R2                    ANYTHING?                  U030\n         BZ    DONE$UND                 NO, SKIP UNDERSCORING      U030\n         LH    R15,LCTR                 get current line count     U043\n         LA    R15,1(,R15)              +1 FOR DECREMENT KLUDGE    U043\n         STH   R15,LCTR                 store updated line count   U043\n         PRTLN OUTBUFFU                 UNDER SCORE LINE           U030\n         MVC   OUTBUFFU,OUTCLRU         CLEAR LINE                 U030\n         MVI   OUTBUFFU,C'+'            OVER PRINT NEXT TIME       U030\n         SPACE 3\nDONE$UND CLC   =C'0001',FL1VOLSQ        FIRST VOLUME OF FILE?      U030\n         BE    TEST$EOV                 YES.\n         L     R14,=A(FVOL#MSG)         -> MESSAGE                 U022\n         MVC   22(4,R14),FL1VOLSQ       VOL SEQ #                  U022\n         MVC   80(6,R14),FL1FILSR       FIRST VOLSER               U022\n         PRTLN FVOL#MSG,I                                          U022\n         SPACE 2\nTEST$EOV TM    TFLAG2,T2@DOSTP                                     U046\n         BO    NOT$EOV                  EOV.                       U046\n         CLC   =C'EOV2',FL2LABI\n         BNE   NOT$EOV                  EOV.\n         TM    PARMFLG1,P1@CHECK        SL WITH NL ANALYSIS?       U046\n         BZ    EOV$MSG                  no - skip                  U046\n         SCALL NL$ATTR                  DO NL DCB ATTRIBUTES       U046\n         PRTLN OUTBUFF                  BLANK LINE                 U046\nEOV$MSG  PRTLN ' *** The above file is continued on another volume ***'\n         B     HAVE$EOV                 all done\n         SPACE 2\nNOT$EOV  TM    PARMFLG1,P1@CHECK        SL WITH NL ANALYSIS?\n         BZ    NO$CHECK                 NO - SEE IF SECOND LINE    U047\n*U046    MVC   MAXBLKSI(12),NL#SAVE     RESTORE INFO\n         MVC   NLSTUFF(NLSTUFFL),NL#SAVE  restore info             U047\n         MVC   NLFLAGS,NL#FLAGX         MORE...                    U047\n         B     NL$SL                    YES - GO DO IT             U047\n*U047    BNZ   NL$SL                    YES - GO DO IT             U046\n         SPACE 2\nNO$CHECK TM    PARMFLG1,P1@INLIN        INLINE MESSAGES?\n         BNO   NEXTFILE                 NO - DO NEXT FILE\n         CLI   UNLOADER,C' '            UNLOADED?\n         BE    NEXTFILE                 NO - DO NEXT FILE\n         PRTLN OUTBUFF2                 PRINT TRUE ATTRS OF UNLOADED DS\n         MVC   OUTBUFF2,OUTCLR2         CLEAR OTHER PRINT LINE\n         B     NEXTFILE                 DO NEXT FILE\n         SPACE 3\nHAVE$EOV PRTLN '-     *** EOV ***'\n         OC    LCTR2,LCTR2              ANYTHING ON OTHER PAGE?    U023\n         BZ    NO$EOV2                  NO - SKIP\n         MVC   OUTBUFF2(17),=C'-     *** EOV ***'\n         PRTLN2                         FLAG END OF OTHER PRINT FILE\n         SPACE 1\nNO$EOV2  TM    TFLAG1,T1@BADEN          ANY INCORRECT DENSITIES?\n         BNO   NO$BADEN                 NO - SKIP\n         LA    R0,9                     ASSUME NOT PARM=NONOTE\n         TM    PARMFLG2,P2@NONOT        WANT THE NOTE?             U020\n         BNO   *+8                      YES - SO USE 9\n         LA    R0,6                     PARM=NONOTE, SO USE 6\n         NEWPAGE  (R0)                  GO TO TOP OF PAGE IF NEEDED\n         LH    R15,LCTR                 get current line count     U043\n         LA    R15,1(,R15)              WILL CALL PRTLN EXTRA TIME U043\n         STH   R15,LCTR                 store updated line count   U043\n         L     R1,=A(INVDEN)            -> INVALID DENSITY MSG     U022\n         MVC   OUTBUFF(113),0(R1)       MOVE IN MESSAGE            U022\n         MVC   OUTBUFF+98(4),DEN@CHAR   4 char true den to prt lin U037\n         PRTLN OUTBUFF\n         MVI   OUTBUFF,C'+'             SET FOR OVERPRINT\n         MVC   OUTBUFF+98(4),DEN@CHAR   light up the density       U040\n         LA    R0,OUTBUFF               POINT TO OUTPUT LINE\n*U043    BAL   R14,PUTPRTLN             PRINT IT ONCE (NO CLEAR OUTBUFF\n         L     R1,OPENMFL               -> SYSPRINT DCB            U043\n         PUT   (1),(0)                  print it once              U043\n         PRTLN OUTBUFF                  AND THE THIRD TIME\n         SPACE 2\nNO$BADEN TM    PARMFLG2,P2@NONOT        WANT THE NOTE?             U020\n         BO    REWINDIT                 NO - SO DON'T\n         NEWPAGE  4                     ENOUGH LINES LEFT ON PAGE?\n         PRTLN DENWARN,I                MSG LIVES ELSEWHERE        U022\n         TM    TFLAG1,T1@ANLZ           ANALYZING?\n         BO    TST$HDR                  YES - GOOD LENGTHS PRINTED\n         PRTLN LENWARN,I                MSG LIVES ELSEWHERE        U022\n         SPACE 2\nTST$HDR  TM    TFLAG2,T2@HDRDF          HDR/EOF MATCH?             U025\n         BZ    TST$HDRB                 YES, CONTINUE              U030\n         PRTLN HDRFOOT1,I               NO, TELL WHAT MESSAGE      U025\n         PRTLN HDRFOOTU,I               LINE 2 AS WELL.            U030\n         NI    TFLAG2,X'FF'-T2@HDRDF    RESET MISMATCH INDICATOR   U025\n         SPACE 2\nTST$HDRB TM    TFLAG2,T2@HDRBK          BLANK FIELDS IN HDR?       U030\n         BZ    REWINDIT                 NO, CONTINUE               U030\n         PRTLN HDRFOOT2,I               SEND MSG                   U030\n         NI    TFLAG2,X'FF'-T2@HDRBK    RESET FLAG                 U030\n         SPACE 2\nREWINDIT TAPIO TCCW#RWD                 REWIND THE TAPE\n         SPACE 2\nCLOSE$TP CLOSE MF=(E,TAPEMFL)\n         SPACE 2\nRETURN   L     R14,RET#ADDR             GET RETURN ADDR\n         BR    R14\n         SPACE 2\nUNEXTPMK CLI   WHERE,3                  READING DATA?              U020\n         BE    UNEXTM02                 YES                        U020\n         PRTLN '0*** Unexpected tape mark ***'\n         B     REWINDIT                 CLOSE UP & LEAVE\n         SPACE 1\nUNEXTM02 IFP2  Y,UNEXTM03               PRINT MSG IF 2ND PRINT FILEU020\n*  OTHERWISE, JUST IGNORE THE ERROR                                U020\n         TM    TFLAG1,T1@SL             SL TAPE?                   U020\n         BO    SL$SAVE                  YES                        U020\n         B     NL$EOF                   NO                         U020\n         SPACE 1\nUNEXTM03 PRTLN2                         PRINT POSSIBLE PARTIAL BUF U020\n         MVC   OUTBUFF2(29),=C'0*** Unexpected tape mark ***'      U020\n         MVC   OUTBUFF2+26(50),=C'while reading data.  File is probably$\n                unusable ***'                                      U020\n         PRTLN2                                                    U020\n         OI    TFLAG1,T1@MVEOF          INDICATE HIT EOF           U020\n         B     STAR$TWO                                            U020\n         SPACE 2\nLEADTPMK NEWPAGE  ,                     PRINT THE HEADER LINES\n         PRTLN '0++++ Tape has leading tape mark ++++'\n         LH    R0,LCTR                  get current line count     U043\n         BCTR  R0,0                     acct for extra blank line  U043\n         STH   R0,LCTR                  store updated line count   U043\n         PRTLN OUTBUFF                  BLANK LINE\n         MVI   VOLLABI,C'X'             INSURE NL ROUTINE\n         MVI   FILE#SEQ+1,1             INIT FILE SEQUENCE NUMBER  U014\n         MVI   NUMBNULL+1,1             INIT NUMBER OF NULL FILES  U014\n         TAPIO TCCW#DAT,TM=LEAD$EOV     READ FIRST BLOCK FROM FILE U014\n         B     DO$SENSE                 DO NL ANALYSIS\n         SPACE 2\nLEAD$EOV MVI   NUMBNULL+1,2             SET NUMBER OF NULL FILES   U014\n         CLI   NULLNUMB+1,2             TOO MANY?                  U014\n         BL    HAVE$EOV                 YES - STOP                 U014\n         MVC   #UNLOAD+3(6),=C'(null)'  FLAG IT                    U014\n         MVI   #FILE+3,C'1'             SET FOR PRINT              U014\n         MVI   FILE#SEQ+1,2             INIT COUNTER               U014\n         PRTLN OUTBUFF                                             U014\n         B     DO$SENSE                                            U014\n         SPACE 2\nIEHINITT PRTLN '-++++ Tape has been re-labelled with IEHINITT ++++'\n         B     SHOWDEN                                             U021\n         SPACE 2\n*---  FIRST HDR1 LABEL IS MISSING.                                 U021\nMISSHDR1 PRTLN '-++++ Tape contains volume label only ++++'        u021\n         SPACE 1\nSHOWDEN  MVC   OUTBUFF(34),=C'-***** This tape is XXXX BPI *****'  U021\n         MVC   OUTBUFF+20(4),DEN@CHAR   4 char true den to prt lin U037\n         PRTLN OUTBUFF                                             U021\n         MVI   OUTBUFF,C'+'             SET FOR OVERPRINT          U021\n         MVC   OUTBUFF+20(4),DEN@CHAR   light up the density       U040\n         LA    R0,OUTBUFF               POINT TO OUTPUT LINE       U021\n*U043    BAL   R14,PUTPRTLN             PRINT IT ONCE (NO CLEAR)   U021\n         L     R1,OPENMFL               -> SYSPRINT DCB            U043\n         PUT   (1),(0)                  print it once (no clear)   U043\n         PRTLN OUTBUFF                  AND THE THIRD TIME         U021\n         B     REWINDIT                 ...\n         EJECT\nTEST$MV  CLC   =C'UNLOADED',TAPEBUFF+16 IEHMOVE'S TRADEMARK?\n         BNER  LINK                     NO\n         MVC   UNLOADER(7),IEHMOVE      SAY WHO\n         SPACE 1\nTEST$RET IFP2  Y,4(,LINK)               RETURN POINT FOR 2 PRINT FILES\n         B     8(,LINK)                 RETURN POINT FOR 1 PRINT FILE\n         SPACE 2\nTEST$CPY CLC   =X'00CA6D0F',TAPEBUFF+8  VS2COPY'S TRADEMARK?\n         BNER  LINK                     NO\n         MVC   UNLOADER(7),IEBCOPY      SAY WHO\n         B     TEST$RET                 RETURN\n         SPACE 2\nTEST$UPS ST    LINK,DWD                 SAVE MY RETURN ADDR\n         LA    R2,80                    BXLE INCR\n         LA    R15,TAPEBUFF             BXLE START\n         XR    R3,R3                    CLEAR FOR ICM              U032\n         ICM   R3,B'0011',LASTSIZE      LOAD LEN READ              U032\n         AR    R3,R15                   POINT PAST END             U032\n         SR    R3,R2                    POINT TO LAST CARD IN BLOCK\n         SPACE 1\nTEST$UPL LR    R1,R15                   COPY CARD START ADDR\n         BAL   LINK,TEST$UP             IS THIS IEBUPDTE CTL CARD?\n         B     TEST$UPB                 NO - GO BXLE\n         MVC   UNLOADER(8),IEBUPDTE     SAY WHAT\n         L     LINK,DWD                 GET BACK MY RETURN ADDR\n         B     TEST$RET                 AND RETURN TO CALLER\n         SPACE 1\nTEST$UPB BXLE  R15,R2,TEST$UPL          TRY ALL CARDS IN THIS BLOCK\n         L     LINK,DWD                 RESTORE RETURN ADDR\n         BR    LINK                     NOT IEBUPDTE INPUT STREAM\n         SPACE 2\nTEST$UP  CLC   =C'./',0(R1)             START RIGHT?\n         BNER  LINK                     NO - THAT WAS QUICK\n         LA    R1,2(,R1)                POINT TO SCAN START\n         LA    R0,69                    MAX SCAN LENGTH\n         BAL   R14,F$BLANK              FIND END OF NAME FIELD\n         BAL   R14,F$CHARS              FIND THE VERB\n         CLC   =C'ADD ',0(R1)\n         BE    TU$SAVE\n         CLC   =C'REPL ',0(R1)\n         BE    TU$SAVE\n         CLC   =C'CHANGE ',0(R1)\n         BE    TU$SAVE\n         BR    LINK                     NOT IEBUPDTE VERB\n         SPACE 2\nTU$SAVE  MVC   UPDT#TYP(1),0(R1)        A,R,C\n         SPACE 1\nTU$LOOP  LA    R1,1(,R1)\n         CLC   =C'MEMBER=',0(R1)\n         BE    TU$MEM\n         CLC   =C'NAME=',0(R1)\n         BE    TU$NAM\n         BCT   R0,TU$LOOP               SCAN THE REST OF THE CARD\n         BR    LINK                     NOTHING INTERESTING ON CARD\n         SPACE 2\nTU$MEM   LA    R1,7(,R1)                POINT TO MEMBER NAME\n         B     *+8                      SKIP OTHER LA\n         SPACE 1\nTU$NAM   LA    R1,5(,R1)                POINT TO MEMBER NAME\n         SPACE 1\n         MVI   8(R1),C','               BE SURE TO STOP\n         B     4(,LINK)                 FOUND A NAME\n         SPACE 2\nF$BLANK  BCTR  R0,0                     -1 FROM LENGTH\n         CLI   0(R1),C' '               GOT A BLANK YET?\n         BER   R14                      YES - RETURN\n         LA    R1,1(,R1)                MOVE SCAN PTR\n         BCT   R0,F$BLANK+2             KEEP SCANNING\n         BR    LINK                     NONE--RETURN TO CALLER'S CALLER\n         SPACE 2\nF$CHARS  BCTR  R0,0                     -1 FROM LENGTH\n         CLI   0(R1),C' '               FIND A CHAR?\n         BNER  R14                      YES - RETURN\n         LA    R1,1(,R1)                INCR SCAN PTR\n         BCT   R0,F$CHARS+2             KEEP SCANNING\n         BR    LINK                     NONE--RETURN TO CALLER'S CALLER\n         SPACE 2\nTEST$DMP CLC   =X'F47006016663B24D',TAPEBUFF+12  IEHDASDR'S TRADEMARK?\n         BNER  LINK                     NO\n         MVC   UNLOADER(8),IEHDASDR     SAY WHO\n         MVC   DASDRSAV(24),TAPEBUFF    SAVE HEADER RECORD\n         LR    R2,LINK                  SAVE RETURN ADDR\n         TAPIO TCCW#DAT                 IGNORE CCWS\n         SPACE 1\nCOM$DUMP TAPIO TCCW#DAT                 READ FIRST TRK'S DATA\n         B     4(,R2)                   RETURN\n         SPACE 2\nTEST$DSS DC    0H'0'                                               U034\n         ST    LINK,DSSLINK             SAVE RETURN ADDRESS        U034\n         CLC   =H'100',LASTSIZE         BLOCK SHORT ENOUGH?        U034\n         BLR   LINK                     NO, CAN'T BE DF/DSS        U034\n         CLC   =H'62',LASTSIZE          BLOCK LONG ENOUGH?         U034\n         BHR   LINK                     NO, CAN'T BE DF/DSS        U034\n         CLC   =BL4'1',TAPEBUFF         SEQ NUM FOR 1ST BLOCK?     U034\n         BNER  LINK                     NO, CAN'T BE DF/DSS        U034\n         CLC   LASTSIZE,TAPEBUFF+6      SIZE READ MATCHES CTL REC? U034\n         BNER  LINK                     NO, CAN'T BE DF/DSS        U034\n         LA    R1,0                                                U034\n         IC    R1,TAPEBUFF+50           GET DEVICE UNIT TYPE       U034\n         MH    R1,=Y(DEVTABXL)          TIMES LEN OF DEVTABX ENTRY U039\n         A     R1,=A(DEVTABX)           POINT TO DEVICE TABLE      U039\n         MVC   DSSDEVTY,4(R1)           SAVE DEVICE TYPE           U039\n         MVC   DSSDEVSZ,TAPEBUFF+24     SAVE DEVICE SIZE           U034\n         LH    R1,DSSDEVTT              GET TRACKS PER CYLINDER    U034\n         ST    R1,TRKCYL                  AND PUT IN WORK FIELD    U034\n         MVC   DSSVOLID,TAPEBUFF+32     SAVE SERIAL NUMBER         U034\n         MVC   DSSVER,TAPEBUFF+59       SAVE VERSION#              U034\n         MVC   DSSREL,TAPEBUFF+58       SAVE RELEASE#              U034\n         TM    DSSVER,X'F0'                                        U034\n         BNZR  LINK                     NO, CAN'T BE DF/DSS        U034\n         TM    DSSREL,X'F0'                                        U034\n         BNZR  LINK                     NO, CAN'T BE DF/DSS        U034\n         OI    DSSVER,X'F0'                                        U034\n         OI    DSSREL,X'F0'                                        U034\n         CLI   DSSVER,C'1'              VERSION 1?                 U034\n         BLR   LINK                     NO, CAN'T BE DF/DSS        U034\n         CLI   DSSREL,C'2'              RELEASE 2?                 U034\n         BLR   LINK                     NO, CAN'T BE DF/DSS        U034\n         TAPIO TCCW#DAT,TM=BOOM         READ THE 2ND BLOCK         U034\n         CLC   =C'BMBB',TAPEBUFF+16     DSS BIT MAP?               U034\n         BE    TEST$DS1                 YES, IT'S DF/DSS           U034\n         L     R1,BLOCKCNT              ADJUST THE                 U034\n         BCTR  R1,0                       BLOCK COUNT FOR          U034\n         ST    R1,BLOCKCNT                  A BACK SPACE BLOCK     U034\n         L     R1,BYTECNT               ADJUST THE                 U034\n         SH    R1,LASTSIZE                BYTE COUNT FOR           U034\n         ST    R1,BYTECNT                   A BACK SPACE BLOCK     U034\n         LA    R0,TCCW#BSB              RE-POSITION THE TAPE       U034\n         ST    R0,TAPEIOB+16                                       U034\n         EXCP  TAPEIOB                  BACK SPACE ONE BLOCK       U034\n         WAIT  ECB=TAPEECB                                         U034\n         EXCP  TAPEIOB                  BACK SPACE ONE BLOCK       U034\n         WAIT  ECB=TAPEECB                                         U034\n         TAPIO TCCW#DAT                 RE-READ THE 1ST BLOCK      U034\n         L     R1,BLOCKCNT              ADJUST THE                 U034\n         BCTR  R1,0                       BLOCK COUNT FOR          U034\n         ST    R1,BLOCKCNT                  A BACK SPACE BLOCK     U034\n         L     R1,BYTECNT               ADJUST THE                 U034\n         SH    R1,LASTSIZE                BYTE COUNT FOR           U034\n         ST    R1,BYTECNT                   A BACK SPACE BLOCK     U034\n         L     LINK,DSSLINK             GET  RETURN ADDRESS        U034\n         BR    LINK                     CAN'T BE DF/DSS            U034\nTEST$DS1 DC    0H'0'                                               U034\n         LH    R1,TAPEBUFF+24           # OF TRACKS IN THIS MAP    U034\n         SRL   R1,3                     # OF BYTES IN BITMAP       U034\n         LA    R1,1(R1)                                            U034\n         STH   R1,BITMAPLN                                         U034\n         LR    R0,R1                                               U034\n         GETMAIN R,LV=(0)               GET STORAGE FOR BITMAP     U034\n         ST    R1,BITMAP                  AND SAVE THE POINTER     U034\n         LA    R1,0                     CLEAR REGISTER             U034\n         IC    R1,TAPEBUFF+8              AND INSERT PREFIX LENGTH U034\n         LA    R0,12(R1)                ADD BITMAP EXT LENGTH      U034\n         LA    R2,TAPEBUFF                                         U034\n         AR    R0,R2                    POINT TO THE BITMAP        U034\n         L     R2,BITMAP                                           U034\n         LH    R3,BITMAPLN                                         U034\n         LR    R1,R3                                               U034\n         MVCL  R2,R0                    SAVE THE BITMAP            U034\n         CLC   =F'0',TAPEBUFF+20        ANOTHER BITMAP SEGMENT?    U034\n         BZ    TEST$DS3                                            U034\n         OI    TFLAG3,T3@DSSBO          INDICATE NEED OF MSG       U046\nTEST$DS3 MVC   UNLOADER(3),DSS          SAY WHO                    U034\n         MVI   UNLOADER+4,C'V'          SET VERSION PREFIX         U034\n         MVC   UNLOADER+5(1),DSSVER     SET VERSION NUMBER         U034\n         MVI   UNLOADER+6,C'.'                                     U034\n         MVC   UNLOADER+7(1),DSSREL     SET RELEASE NUMBER         U034\n         L     LINK,DSSLINK             GET  RETURN ADDRESS        U034\n         B     TEST$RET                 RETURN W/DSS               U034\n         SPACE 2\nTEST$FDR CLC   =C'THATS ALL FOLK',TAPEBUFF+5    HIS TRADEMARK?     U034\n         BNER  LINK                     NO\n         CLI   TAPEBUFF+19,C'S'         OLD STYLE FDR?             U032\n         BE    *+4+4+2+6                YES, CONTINUE              U032\n         CLI   TAPEBUFF+19,C'F'         NEW STYLE FDR?             U032\n         BNER  LINK                     NO, RETURN TO CALLER       U032\n         MVC   UNLOADER+3(4),=C'/ABR'   YES, ABR DUMP              U032\n         MVC   UNLOADER(3),FDR          SAY WHO\n         B     TEST$RET                 RETURN W/FDR               U022\n         SPACE 2\n* FOR IEBISAM, THE BEGINNING OF THE DCB IS UNLOADED TO THE FIRST\n* TWO CARDS.  SO CHECK (GUESS?) IF IT LOOKS LIKE AN ISAM DCB\nTEST$IS  CLC   TAPEBUFF(4),=Y(0,154)    SEQ # AND LENGTH CORRECT?\n         BNER  LINK                     NO\n         CLC   TAPEBUFF+80(2),=H'1'     SECOND SEQ # CORRECT       U020\n         BNER  LINK                     NO\n         TM    TAPEBUFF+4+48,X'10'      DCBOFLGS,DCBOFOPN\n         BNOR  LINK                     NOT \"OPEN\"\n         CLI   TAPEBUFF+4+26,X'80'      DSORG=IS?\n         BE    *+10                     YES - CONTINUE\n         CLI   TAPEBUFF+4+26,X'81'      DSORG=ISU?\n         BNER  LINK                     NO\n         MVC   UNLOADER(7),IEBISAM      SAY WHO\n         B     TEST$RET                 RETURN\n         EJECT\nIEHMOVE1 MVC   #BLKCNT+OUTBUFF2-OUTBUFF(4),=C'DSN='\n         MVC   #BLKCNT+OUTBUFF2-OUTBUFF+4(44),TAPEBUFF+85 MOVE DISK DSN\n         SPACE 1\n         BAL   LINK,SET$ONE\n         DC    Y(169)                   DSORG OFFSET\n         DC    Y(171)                   RECFM OFFSET\n         DC    Y(173)                   BLKSIZE OFFSET\n         DC    Y(175)                   LRECL OFFSET\n         SPACE 3\nIEBCOPY1 BAL   LINK,SET$ONE\n         DC    Y(12)                    DSORG OFFSET\n         DC    Y(18)                    RECFM OFFSET\n         DC    Y(14)                    BLKSIZE OFFSET\n         DC    Y(16)                    LRECL OFFSET\n         SPACE 3\nIEBISAM1 BAL   LINK,SET$ONE\n         DC    Y(4+26)                  DSORG OFFSET\n         DC    Y(4+36)                  RECFM OFFSET\n         DC    Y(4+62)                  BLKSIZE OFFSET\n         DC    Y(4+2+82)                LRECL OFFSET\n         SPACE 3\n*  FIRST RECORD SAVED IN \"DASDRSAV\"\nIHDASDR1 MVC   OUTBUFF2+8(15),=C'Dump from CCHH='\n         UNPK  OUTBUFF2+23(9),DASDRSAV+0(5)\n         TR    OUTBUFF2+23(8),HEXTAB    MAKE EBCDIC\n         MVC   OUTBUFF2+31(5),=C' of a'\n         ICALL CONVUNIT,LINK,R1=DASDRSAV+21  GET UNIT TYPE         U022\n         MVC   OUTBUFF2+37(6),OUTBUFF2+125  MOVE TO CORRECT SPOT   U022\n         MVC   OUTBUFF2+120(12),BLANKS  CLEAR OUT CONVERTED FLD    U022\n         CLC   =F'0',DASDRSAV+8         THIS TAPE START AT 0?\n         BNE   PRT$ONE                  NO - CAN'T FIND VOLSER\n*  SECOND RECORD IS IN \"TAPEBUFF\"\n         CLC   =C'VOL1VOL1',TAPEBUFF+216  LABEL?\n         BNE   PRT$ONE                  NO - SKIP\n         MVC   OUTBUFF2+46(7),=C'Volume='\n         MVC   OUTBUFF2+53(6),TAPEBUFF+224\n         MVC   OUTBUFF2+61(6),=C'Owner='\n         MVC   OUTBUFF2+67(10),TAPEBUFF+261\n         B     PRT$ONE\n         SPACE 3\nDSS1     DC    0H'0'                                               U034\n         B     PRT$ONE                  YES, AND GET OUT           U034\n         SPACE 3\nFDR1     ICALL CONVUFDR,LINK,R1=TAPEBUFF+4  FORMAT UNIT TYPE       U022\n         TAPIO  TCCW#DAT                GET NEXT BLOCK             U022\n         CLC   =C'DUMMYDSF',TAPEBUFF+12 DUMMY DSF BLOCK?           U022\n         BE    FDR1LOOP                 YES, CONTINUE CHECKING     U022\n         CLC   UNLOADER+3(5),BLANKS     ANY VERSION YET?           U032\n         BNE   *+10                     YES, SKIP UPDATE           U032\n         MVC   UNLOADER+3(5),=C'-CCHH'  DSF DOING CCHH DUMP(FDR 4?)U022\n         B     PRT$ONE                  YES, AND GET OUT           U022\n         SPACE 1\nFDR1LOOP TAPIO  TCCW#DAT                GET NEXT BLOCK             U022\n         CLC   =C'DUMMYDSF',TAPEBUFF+12 STILL DUMMY VTOC?          U022\n         BNE   PRT$ONE                  NO, EXIT FROM HERE         U022\n         CLC   =C'VSAMDFEF',TAPEBUFF+32 ICF INFORMATION?           U033\n         BE    FDR1LOOP                 YES, SKIP IT               U033\n         CLC   =C'TRACKTAB',TAPEBUFF+32 FDR VERSION 4.5?           U022\n         BNE   FDR1DFEF                 NO, CHECK VVDS             U032\n         CLC   UNLOADER+4(4),BLANKS     ANY VERSION YET?           U032\n         BNE   PRT$ONE                  YES, SKIP UPDATE           U045\n         MVC   UNLOADER+4(4),=C'V4.5'   YES, LABEL AS SUCH         U045\n         B     PRT$ONE                  AND EXIT                   U022\n         SPACE 1\nFDR1DFEF CLC   =C'VSAMDFEF',TAPEBUFF+32 VVDS INFO BLOCK?           U032\n         BNE   FDR1LOOP                 NO, CONTINUE               U032\n         MVC   UNLOADER+4(4),=C'V4.8'   SET VERSION NUMBER         U032\n         B     PRT$ONE                  AND EXIT                   U032\n         EJECT\nSET$ONE  MVC   OUTBUFF2+8(24),=C'True attributes:  DSORG='\n         LA    R1,TAPEBUFF              -> TAPE BUFFER             U022\n         AH    R1,0(,LINK)              + OFFSET TO DSORG          U022\n         ICALL CNVDSORG,R14,R15=OUTBUFF2+32 FORMAT THE DSORG\n         SPACE 1\n         LA    R1,TAPEBUFF              -> TAPE BUFFER             U022\n         AH    R1,2(,LINK)              + OFFSET TO RECFM          U022\n         ICALL CNVRECFM,R14,R15=#RECFM+OUTBUFF2-OUTBUFF\n         SPACE 1\n         LA    R1,TAPEBUFF\n         AH    R1,4(,LINK)              POINT TO BLKSIZE\n         ICALL CONVHALF,R14,R15=#BLKSIZE-1+OUTBUFF2-OUTBUFF        U030\n         SPACE 1\n         LA    R1,TAPEBUFF\n         AH    R1,6(,LINK)              POINT TO LRECL\n         ICALL CONVHALF,R14,R15=#LRECL-1+OUTBUFF2-OUTBUFF\n         SPACE 2\nPRT$ONE  TM    TFLAG1,T1@ANLZ           ANALYZING?\n         BNO   FIND$EOF                 NO\n         B     NL$LOOP                  YES - KEEP SCANNING NL TAPE\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*  ROUTINES TO FORMAT INFORMATION TO SYSPRNT2 FOR UNLOADED FILES      *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\nIEHMOVE2 LA    R0,7                     ASSUME PARM=NOMEM\n         TM    PARMFLG1,P1@NOMEM        IS IT?\n         BO    *+8                      YES\n         LA    R0,9                     NO\n         TM    TAPEBUFF+169,X'02'       DSORG=PO?\n         BO    *+8                      YES\n         LA    R0,7                     NO\n         NEWPAGE  (R0),2                ENOUGH LINES LEFT ON PAGE?\n         SPACE 1\n         BAL   LINK,SET$FULL            SET UP HEADER\n         DC    Y(169)                   DSORG OFFSET\n         DC    Y(171)                   RECFM OFFSET\n         DC    Y(173)                   BLKSIZE OFFSET\n         DC    Y(175)                   LRECL OFFSET\n         SPACE 1\n         MVC   OUTBUFF2+47(7),IEHMOVE   WHO IT WAS UNLOADED BY\n         SPACE 1\n         ICALL CONVUNIT,LINK,R1=TAPEBUFF+282 CONVERT UNIT TYPE\n         SPACE 1\n         PRTLN2                         PRINT FIRST INFO LINE\n         SPACE 1\n         MVI   OUTBUFF2,C'0'            DOUBLE SPACE FOR MSM\n         MVC   OUTBUFF2+25(7),=C'C-date='\n         ICALL CONVDATE,LINK,R1=TAPEBUFF+138,R15=OUTBUFF2+32 C-DATE\n         SPACE 1\n         MVC   OUTBUFF2+42(7),=C'E-date='\n         ICALL CONVDATE,LINK,R1=TAPEBUFF+141,R15=OUTBUFF2+49 E-DATE\n         SPACE 1\n         MVC   OUTBUFF2+59(4),=C'DSN='\n         MVC   OUTBUFF2+63(44),TAPEBUFF+85       MOVE IN OLD DSN\n         SPACE 1\n****     CLC   =C'VS2',TAPEBUFF+152     CHECK PROGRAMMING SYSTEM\n****     BE    MV$NOVOL                 SKIP IF OS/VS2\n         TM    TAPEBUFF+132,X'0F'       SEE IF LOOKS LIKE PACKED DATE\n         BO    MV$NOVOL                 SKIP IF NEW FORMAT IEHMOVE DS\n         CLI   TAPEBUFF+135,0           INVALID FOR VOLSER ANYWAY?\n         BE    MV$NOVOL                 SKIP IF NEW FORMAT IEHMOVE DS\n         MVC   OUTBUFF2+120(4),=C'Vol='\n         MVC   OUTBUFF2+124(6),TAPEBUFF+130\n         SPACE 1\nMV$NOVOL PRTLN2                         PRINT SECOND INFO LINE\n         SPACE 2\n         TM    TAPEBUFF+169,X'02'       DSORG=PO?\n         BNO   STAR$TWO                 NO - SKIP\n         BAL   LINK,FMU$                PRINT HEADER\n         SPACE 2\n         XR    BLEN,BLEN                CLEAR FOR ICM              U032\n         ICM   BLEN,B'0011',LASTSIZE    GET SIZE OF BLOCK          U032\n         SH    BLEN,=H'80'              MINUS FIRST CARD USED\n         LA    BPTR,TAPEBUFF+80         -> NEXT CARD TO USE\n         BAL   LINK,SEG$NEXT            NOW HAVE CARDS 1 & 2\n         BAL   LINK,SEG$NEXT            NOW 2 & 3\n         BAL   LINK,SEG$NEXT            NOW 3 & 4\n         BAL   LINK,SEG$NEXT            NOW 4 & 5\n         LA    DPTR,MV#BUFF1+46         -> FIRST MEMBER NAME -4\n         CLI   0(DPTR),X'C8'            START OF MEMBER?\n         BE    MV$GOT1                  YES\n         LA    DPTR,3(,DPTR)            -> OTHER PLACE\n         CLI   0(DPTR),X'C8'            START OF MEMBER?\n         BE    MV$GOT1                  YES\n         BAL   R14,BOOM                 PRINT LOGIC ERROR MSG\n         SPACE 2\nMV$GOT1  LA    DPTR,4(,DPTR)            -> FIRST MEMBER NAME\n         SPACE 2\nMV$LOOP  BAL   LINK,MOVE$MEM            MEMBER NAME TO PRINT LINE\n         BAL   LINK,SEG$TEST            SEE IF WITHIN RANGE\n         SPACE 2\n*  RECORDS IN AN IEHMOVE UNLOADED DATASET HAVE THE FOLLOWING FORMAT:\n*  FIRST 2 BYTES OF EACH CARD IS A BINARY SEQUENCE NUMBER.\n*  AFTER THAT, THERE IS SOME HEADER INFO (THE FMT1 DSCB + OTHER JUNK),\n*  THEN THE RECORDS IN THIS FORMAT:  LENGTH OF THIS \"RECORD\", 1 BYTE\n*  INDICATOR WITH THE FOLLOWING BIT MEANINGS:\n*    X'80' -> 3 BYTE TTR FOLLOWS INDICATOR BYTE\n*    X'40' -> UNLOADED DS IS PDS\n*    X'20' -> RECORD IS PART OF A MEMBER\n*    X'10' -> RECORD IS A NOTE LIST\n*    X'08' -> RECORD IS A DIRECTORY ENTRY\n*    X'04' -> RECORD IS A DUMMY RECORD\n*  THIS INFORMATION IS IN THE SOURCE TO MODULE IEHMVSRA\n         SPACE 1\nMV$NXTBL CLI   2(DPTR),X'E0'            DATA RECORD?\n         BE    MV$REC                   YES\n         CLI   2(DPTR),X'D0'            NOTE LIST RECORD?\n         BE    MV$REC                   YES\n         CLI   2(DPTR),X'C8'            DIRECTORY RECORD?\n         BE    MV$MEND                  YES\n         CLI   2(DPTR),X'C4'            DUMMY RECORD?\n         BE    MV$DUMMY                 YES\n         CLI   2(DPTR),X'0A'            END OF DS?\n         BNH   DIR$END                  YES\n*** LOGIC ERROR ***\n         PRTLN2                         PRINT (POSSIBLY) UNFINISHED LIN\n         BAL   R14,BOOM                 PRINT LOGIC ERROR MSG\n         SPACE 2\nMV$DUMMY MVC   DWD(2),0(DPTR)           COPY LENGTH TO ALIGNED PLACE\n         LH    DLEN,DWD                 LOAD LENGTH OF DUMMY RECORD\n         LA    DPTR,12(DPTR,DLEN)       POINT TO NEXT\n         BAL   LINK,SEG$TEST            MAKE SURE STILL WITHIN RANGE\n         B     MV$LOOP                  DO NEXT MEMBER NAME\n         SPACE 2\nMV$REC   MVC   DWD(2),0(DPTR)           COPY LEN TO ALIGNED PLACE\n         LH    DLEN,DWD                 GET BLOCK LENGTH\n         LA    DPTR,6(DPTR,DLEN)        POINT PAST LEN,E0,TTR,DATA\n         SPACE 2\nMV$SCAN  CL    DPTR,MV#ABUF2            WITHIN RANGE?\n         BL    MV$NXTBL                 YES - PROCESS NEXT BLOCK\n         BAL   LINK,SEG$NEXT            SKIP 78 BYTES\n         B     MV$SCAN                  KEEP GOING\n         SPACE 2\nMV$MEND  LA    DPTR,6(,DPTR)            -> MEMBER NAME\n         BAL   LINK,SEG$TEST            WITHIN RANGE?\n         B     MV$LOOP                  GO PRINT NEXT NAME\n         SPACE 2\nSEG$TEST CL    DPTR,MV#ABUF2            WITHIN RANGE?\n         BLR   LINK                     YES - JUST RETURN\n         SPACE 1\nSEG$NEXT MVC   MV#BUFF1,MV#BUFF2\n         LTR   BLEN,BLEN                ANY LEFT?\n         BP    SEG$MVC                  YES - USE IT\n         BZ    *+8                      NO\n* RAN OFF END OF DATASET\n***      EX    0,*                      *** LOGIC ERROR ***\n         B     DIR$END                  FORGET THAT - IT'S THE END\n         SPACE 1\n         ST    LINK,LINKSAVE            SAVE RETURN ADDR\n         TAPIO TCCW#DAT,TM=SEG$EOF      READ ANOTHER BLOCK\n         L     LINK,LINKSAVE            RESTORE RETURN ADDR\n         LA    BPTR,TAPEBUFF            RESET PTR\n         XR    BLEN,BLEN                CLEAR FOR ICM              U032\n         ICM   BLEN,B'0011',LASTSIZE    AND LENGTH LEFT            U032\n         SPACE 1\nSEG$MVC  SH    BLEN,=H'80'              DECR LENGTH LEFT / THIS BLOCK\n         MVC   MV#BUFF2,2(BPTR)         MOVE A SEGMENT\n         LA    BPTR,80(,BPTR)           -> NEXT SEGMENT\n         SH    DPTR,=H'78'              BACK UP DATA PTR\n         BR    LINK                     RETURN TO CALLER\n         SPACE 2\nSEG$EOF  BCTR  BLEN,0                   SET FLAG\n         L     LINK,LINKSAVE            RESTORE RETURN ADDR\n         OI    TFLAG1,T1@MVEOF          REMEMBER HIT EOF\n         BR    LINK                     RETURN TO CALLER\n         SPACE 3\nCONVDATE OC    0(3,R1),0(R1)            ANY DATA TO PRINT?         U022\n         BZR   LINK                     NO, RETURN TO CALLER       U022\n         SR    R0,R0                    CLEAR FOR IC               U022\n         IC    R0,0(,R1)                GET THE YEAR\n         CVD   R0,DWD                   CONVERT TO PACKED\n         UNPK  0(3,R15),DWD+6(2)        AND THEN TO EBCDIC\n         OI    2(R15),C'0'              FIX SIGN\n         MVC   0(2,R15),1(R15)          MOVE YEAR OVER\n         MVI   2(R15),C'.'              PUT IN THE DOT\n         MVC   DWD(2),1(R1)             MOVE DAY TO ALIGNED PLACE\n         LH    R0,DWD                   GET THE YEAR\n         CVD   R0,DWD                   CONVERT TO PACKED\n         UNPK  3(3,R15),DWD+6(2)        AND THEN TO EBCDIC\n         OI    5(R15),C'0'              FIX THE SIGN\n         BR    LINK                     RETURN TO CALLER\n         EJECT\nIEBCOPY2 LA    R0,7                     ASSUME MEMBERS\n         TM    PARMFLG1,P1@NOMEM        PARM=NOMEMBERS?\n         BNO   *+8                      NOPE - OK\n         LA    R0,5                     NO MEMBERS\n         NEWPAGE  (R0),2                TEST LINE COUNTER\n         SPACE 1\n         BAL   LINK,SET$FULL            SET UP HEADER\n         DC    Y(12)                    DSORG OFFSET\n         DC    Y(18)                    RECFM OFFSET\n         DC    Y(14)                    BLKSIZE OFFSET\n         DC    Y(16)                    LRECL OFFSET\n         SPACE 1\n         MVC   OUTBUFF2+47(7),IEBCOPY   WHO IT WAS UNLOADED BY\n         SPACE 1\n         ICALL CONVUNIT,LINK,R1=TAPEBUFF+24 FORMAT THE UNIT TYPE\n         SPACE 2\n         BAL   LINK,FMU                 'FOLLOWING MEMBERS UNLOADED:'\n         SPACE 2\n         TAPIO TCCW#DAT                 IGNORE THE NEXT BLOCK\n         SPACE 2\nIBCPY$LP TAPIO TCCW#DAT                 READ A DIRECTORY BLOCK\n         LH    BLEN,TAPEBUFF+4          GET RDW\n         SH    BLEN,=H'8'               -8 FOR BDR & RDW\n         LA    BPTR,TAPEBUFF+8          INIT BLOCK PTR\n         SPACE 2\nDIR$NEXT LA    DPTR,22(,BPTR)           INIT DIR BLK PTR\n         LH    DLEN,20(,BPTR)           GET LENGTH USED\n         SH    DLEN,=H'2'               LENGTH OF DATA\n         SPACE 2\nDIR$LP   CLC   0(8,DPTR),=8X'FF'        END OF DIRECTORY?\n         BE    DIR$END                  YES - DONE\n         BAL   LINK,MOVE$MEM            MOVE NAME TO PRINT LINE\n         LTR   DLEN,DLEN                ANYTHING LEFT?\n         BP    DIR$LP                   CONTINUE IF MORE LEFT\n         LA    BPTR,256+12+8(,BPTR)     NEXT DIRECTORY BLOCK\n         SH    BLEN,=Y(256+12+8)        DECR LENGTH LEFT\n         BP    DIR$NEXT                 MORE IN THIS TAPE BLOCK\n         B     IBCPY$LP                 GET NEXT BLOCK FROM TAPE\n         SPACE 2\nDIR$END  LA    R0,OUTBUFF2+20           GET START PTR FOR COMPARE\n         CR    R0,PPTR                  ANY ON THIS LINE?\n         BE    STAR$TWO                 NO - DONE\n         PRTLN2                         PRINT PARTIAL LINE\n         B     STAR$TWO                 CONTINUE PROCESSING\n         SPACE 3\nMOVE$MEM MVC   0(8,PPTR),0(DPTR)        MOVE NAME TO PRINT LINE\n         IC    R1,11(,DPTR)             GET USER DATA LENGTH\n         N     R1,=F'31'                STRIP OFF JUNK\n         LA    R1,12(R1,R1)             GET LENGTH OF ENTRY\n         AR    DPTR,R1                  ADVANCE DIR PTR\n         SR    DLEN,R1                  DECR LENGTH LEFT\n         SPACE 1\n         LA    PPTR,10(,PPTR)           NEXT PRINT LINE POSITION\n         CL    PPTR,OB2END              END OF PRINT LINE?\n         BNHR  LINK                     NO - RETURN\n         LR    PPTR,LINK                SAVE RETURN ADDR\n         PRTLN2                         PRINT IT\n         LR    LINK,PPTR                RESTORE RETURN ADDR\n         LA    PPTR,OUTBUFF2+20         RESET PTR\n         BR    LINK                     RETURN TO CALLER\n         SPACE 3\n*  FIRST RECORD SAVED IN \"DASDRSAV\"\n*HDASDR2 BAL   LINK,SET$FULD            SET UP HEADER\n***      DC    4Y(0)                    SO RETURN ADDR IS CORRECT\n***      MVC OUTBUFF2+29(38),=C') IS AN IEHDASDR DUMP STARTING AT CCHH'\n***      UNPK  OUTBUFF2+68(9),DASDRSAV+0(5)   CCHH OF THIS TAPE\n***      TR    OUTBUFF2+68(8),HEXTAB    MAKE EBCDIC\n***      MVC   OUTBUFF2+76(5),=C' OF A'\n***      IC    R1,DASDRSAV+21           GET DEVTYPE\n***      N     R1,=F'255'               CLEAN\n***      MH    R1,=H'6'\n***      LA    R14,=C'2321  2311  2314  2302  2301  2305-12305-23330  ?\n***            ?0A  ??0B  ??0C  3330-1'\n***      LA    R14,0(R14,R1)            GET ADDR OF THIS DEVTYPE\n***      MVC   OUTBUFF2+82(6),0(R14)    MOVE TO PRINT LINE\n***      CLC   =F'0',DASDRSAV+8         THIS TAPE START AT 0?\n***      BNE   D$NOVOL                  NO - CAN'T FIND VOLSER\n*  SECOND RECORD IS IN \"TAPEBUFF\"\n***      CLC   =C'VOL1VOL1',TAPEBUFF+216  LABEL?\n***      BNE   D$NOVOL                  NO - SKIP\n***      MVC   OUTBUFF2+91(7),=C'VOLUME='\n***      MVC   OUTBUFF2+98(6),TAPEBUFF+224\n***      MVC   OUTBUFF2+106(6),=C'OWNER='\n***      MVC   OUTBUFF2+112(10),TAPEBUFF+261\n         SPACE 1\n*D$NOVOL PRTLN2\n***      B     STAR$TWO\n         SPACE 3\nIEBUPDT2 LA    R0,7\n         TM    PARMFLG1,P1@NOMEM        PARM=NOMEM?\n         BNO   *+8                      NO\n         LA    R0,5                     YES\n         NEWPAGE  (R0),2\n         BAL   LINK,SET$FULD            SET UP HEADER INFO\n         DC    4Y(0)                    FILLER\n         MVC   OUTBUFF2+31(27),=C'is an IEBUPDTE input stream'\n         BAL   LINK,FMU                 'FOLLOWING MEMBERS UNLOADED:'\n         SPACE 2\nUPDTE$L1 LA    BLEN,80                  BXLE INCR\n         LA    DPTR,TAPEBUFF            POINT TO START\n         XR    BPTR,BPTR                CLEAR FOR ICM              U032\n         ICM   BPTR,B'0011',LASTSIZE    LOAD LEN READ              U032\n         AR    BPTR,DPTR                POINT PAST END OF BLOCK    U032\n         SR    BPTR,BLEN                BACK UP FOR BXLE\n         SPACE 1\nUPDTE$L2 LR    R1,DPTR                  COPY CARD ADDR\n         BAL   LINK,TEST$UP             IS THIS ONE?\n         B     UPDTE$BX                 NO - SKIP\n         SPACE 1\n         MVC   0(1,PPTR),UPDT#TYP       MOVE A,R,C\n         MVI   1(PPTR),C'-'             SEPARATOR\n         MVC   2(8,PPTR),0(R1)          MEMBER NAME\n         LA    R1,1(,PPTR)\nUPDTE$L3 CLI   0(R1),C','               END OF MEMBER NAME?\n         BE    UPDTE$EM                 YES\n         CLI   0(R1),C' '               END OF MEMBER NAME?\n         BE    UPDTE$EM                 YES\n         LA    R1,1(,R1)                INCR SCAN PTR\n         B     UPDTE$L3                 CONTINUE\n         SPACE 1\nUPDTE$EM MVC   0(7,R1),OUTBUFF+1        BLANK OUT GARBAGE\n         LA    PPTR,11(,PPTR)           BUMP PRINT LINE PTR\n         CL    PPTR,OB2END2             PAST END?\n         BNH   UPDTE$BX                 NO - CONTINUE\n         PRTLN2                         PRINT THE MEMBERS\n         LA    PPTR,OUTBUFF2+20         RESET PTR\n         SPACE 1\nUPDTE$BX BXLE  DPTR,BLEN,UPDTE$L2       KEEP SCANNING\n         TAPIO TCCW#DAT,TM=UPDT$EOF     GET NEXT BLOCK\n         B     UPDTE$L1                 GO CHECK IT\n         SPACE 2\nUPDT$EOF OI    TFLAG1,T1@MVEOF          SET \"HIT EOF\"\n         B     DIR$END                  CLEAN UP\n         SPACE 3\nIEBISAM2 BAL   LINK,SET$FULL            SET UP HEADER\n         DC    Y(4+26)                  DSORG OFFSET\n         DC    Y(4+36)                  RECFM OFFSET\n         DC    Y(4+62)                  BLKSIZE OFFSET\n         DC    Y(4+2+82)                LRECL OFFSET\n         SPACE 1\n         MVC   OUTBUFF2+47(7),IEBISAM   WHO IT WAS UNLOADED BY\n         SPACE 1\n         ICALL CONVUNIT,LINK,R1=TAPEBUFF+4+17-3 CONVERT UNIT TYPE\n         SPACE 1\n         PRTLN2                         PRINT SECOND INFO LINE\n         SPACE 1\n         B     STAR$TWO                                            U???\n         SPACE 3\nFDR2     BAL   LINK,SET$FULD            FORMAT UNLOADED MSG        U022\n         DC    4Y(0)                    SO RETURN ADDR IS CORRECT  U024\n         MVC   OUTBUFF2+58(25),=C'....... was unloaded from'       U022\n         ICALL CONVUFDR,LINK,R1=TAPEBUFF+4  FORMAT UNIT TYPE       U022\n         MVC   OUTBUFF2+89(7),OUTBUFF2+125  GRAB UNIT TYPE         U022\n         MVC   OUTBUFF2+125(7),BLANKS   CLEAR IT OUT               U022\n         TAPIO TCCW#DAT                 GET NEXT DATA BLOCK        U022\n         CLC   =C'DUMMYDSF',TAPEBUFF+12 FAKE VTOC RECORD?          U022\n         BE    FDR2HEAD                 YES, CONTINUE              U022\n         CLC   UNLOADER+3(5),BLANKS     ANY VERSION YET?           U032\n         BNE   *+10                     YES, SKIP UPDATE           U032\n         MVC   UNLOADER+3(5),=C'-CCHH'  JUST DSF-CCHH DUMP (FDR4.0)U022\n         MVC   OUTBUFF2+47(8),UNLOADER  MOVE IN UNLOADER           U022\n         PRTLN2                         OUTPUT THE LINE            U022\n         B     STAR$TWO                 DONE HERE                  U022\n         SPACE 1\nFDR2HEAD MVC   OUTBUFF2+47(8),UNLOADER  MOVE IN UNLOADER           U022\n         PRTLN2                         OUTPUT TITLE LINE 1        U022\n         TM    PARMFLG1,P1@NOMEM        DUMP DSN'S?                U022\n         BO    FDR2LOOP                 NO, FINNISH GETTING UNLOAD U022\n         MVI   OUTBUFF2,C'0'            SKIP A LINE                U022\n         MVC   OUTBUFF2+16(28),=C'Following datasets unloaded:'    U022\n         L     R1,=A(COLTITLE)                                     U035\n         MVC   OUTBUFF2+55(78),0(R1)                               U035\n         PRTLN2 ,                       SECOND LINE OF TITLE       U022\n         MVI   OUTBUFF2,C'0'            SKIP A LINE HERE TOO.      U022\n         CLC   =C'VSAMDFEF',TAPEBUFF+32 ICF INFORMATION?           U033\n         BE    FDR2LOOP                 YES, SKIP IT               U033\n         B     FDR2INIT                 CONTINUE W/BLOCK           U022\n         SPACE 1\nFDR2LOOP TAPIO TCCW#DAT                 GET NEXT DATA BLOCK        U022\n         CLC   =C'DUMMYDSF',TAPEBUFF+12 FAKE VTOC RECORD?          U022\n         BNE   FDR2$EOF                 NO, DONE HERE              U033\n         CLC   =C'VSAMDFEF',TAPEBUFF+32 VSAM DATA FROM V4.8?       U033\n         BE    FDR2LOOP                 YES, SKIP IT               U033\n         CLC   =C'TRACKTAB',TAPEBUFF+32 TRACK BITMAP?              U033\n         BE    FDR2LOOP                 YES, SKIP IT               U033\n         SPACE 1\nFDR2INIT TM    PARMFLG1,P1@NOMEM        DUMP DSN'S?\n         BO    FDR2LOOP                 NO, FINNISH GETTING UNLOAD U022\n         LA    DPTR,TAPEBUFF+32+8       -> FIRST DSCB IN BLOCK     U022\n         ICM   DLEN,B'1111',TAPEBUFF+28 NUMBER OF DSCB'S IN BLOCK  U022\n*U037    BNZ   *+8                      ALL OK                     U022\n*U037    BAL   R14,BOOM                 SOMETHING IS FICHIE        U022\n         BZ    FDR2LOOP                 skip null block            U037\nFDR2$DSN CLI   44(DPTR),C'1'            FORMAT 1 DSCB?             U022\n         BNE   FDR2$NXT                 NO, GET NEXT DSCB          U022\n         LH    R1,LCTR2                                            U033\n         BCT   R1,FDR2$NHD                                         U033\n         MVI   OUTBUFF2,C'0'            SKIP A LINE                U033\n         L     R1,=A(COLTITLE)                                     U035\n         MVC   OUTBUFF2+55(78),0(R1)                               U035\n         PRTLN2 ,                       SECOND LINE OF TITLE       U033\n         MVI   OUTBUFF2,C'0'            SKIP A LINE HERE TOO.      U033\nFDR2$NHD MVC   #FDSN,0(DPTR)            YES, MOVE IN DSN           U033\n         ICALL CNVDSORG,R14,R1=82(,DPTR),R15=#FDSORG   DSORG       U022\n         ICALL CNVRECFM,R14,R1=84(,DPTR),R15=#FRECFM   RECFM       U022\n         ICALL CONVHALF,R14,R1=86(,DPTR),R15=#FBLKSI   BLKSIZE     U022\n         ICALL CONVHALF,R14,R1=88(,DPTR),R15=#FLRECL   LRECL       U022\n         ICALL CONVDATE,LINK,R1=53(,DPTR),R15=#FCDATE  CDATE       U022\n         ICALL CONVDATE,LINK,R1=75(,DPTR),R15=#FLDATE  L/USED      U022\n         XC    DWD,DWD                  CLEAR OUT WORKAREA         U022\n         MVC   DWD+3,59(DPTR)           MOVE IN NUMBER OF EXTENTS  U022\n         ICALL CONVHALF,R14,R1=DWD+2,R15=#FEXT         # EXT.      U022\n         ICALL SLIDE,R14,R15=#FEXT+1    SHIFT TO LEFT SOME         U022\n         XR    R1,R1                    CLEAR FOR ICM              U022\n         ICM   R1,B'0111',95(DPTR)      GET QUANTITY FOR SEC       U022\n         BZ    FDR2$ALC                 IF ZERO, DONE HERE         U022\n         C     R1,=F'99999'             LARGER THAN EDIT MASK?     U022\n         BNH   *+12                     YES, LEAVE FILL CHAR       U022\n         OI    TFLAG2,T2@FDROV          INDICATE FIELD OVERFLOW    U022\n         MVI   #FSEC,C'*'               INDICATE LARGER THAN FIELD U022\n         CVD   R1,DWD                   CONVERT TO DEC             U022\n         MVC   #FSEC+1(5),=X'2020202120'  EDIT MASK                U022\n         ED    #FSEC,DWD+5              EDIT IN NUMBER             U022\n         SPACE 1\nFDR2$ALC MVC   DWD(1),94(DPTR)          COPY OVER ALLOC ALG        U022\n         NI    DWD,X'C0'                JUST ALLOC ALG.            U022\n         XR    R1,R1                    CLEAR FOR IC               U022\n         IC    R1,DWD                   GET ALLOC ALG              U022\n         SRL   R1,6                     JUST 2 BITS PLEASE         U022\n         MH    R1,=H'3'                 INTO INDEX FOR TABLE       U022\n         LA    R15,=C'ABSBLKTRKCYL'     ALLOCATION TYPE TABLE      U022\n         AR    R1,R15                   -> ENTRY IN TABLE          U022\n         MVC   #FALC(3),0(R1)           MOVE IN ALLOC TYPE         U022\n         TM    94(DPTR),X'01'           WAS ROUND SPEC?            U022\n         BZ    *+10                     NO, SKIP UPDATE            U022\n         MVC   #FALC+1(3),=C'- R'       ROUND IT TO CYL            U022\n         TM    94(DPTR),X'08'           CONTIG?                    U022\n         BZ    FDR2$ALM                 NO, TRY MXIG               U022\n         MVC   #FALC+1(2),=C'-C'        WHATEVER IN 1 HUNK         U022\n         B     FDR2$USE                 GET AMOUNT USED            U022\nFDR2$ALM TM    94(DPTR),X'04'           MXIG?                      U022\n         BZ    FDR2$ALA                 NO, TRY ALX                U022\n         MVC   #FALC,=C'MXIG'           YES, SAY SO                U022\n         B     FDR2$USE                 AND CONTINUE               U022\nFDR2$ALA TM    94(DPTR),X'02'           ALX ALLOC?                 U022\n         BZ    FDR2$USE                 NO, DONE HERE              U022\n         MVC   #FALC+1(2),=C'-A'        ORIGINAL IN ALX            U022\n         SPACE 1\nFDR2$USE SR    R1,R1                    clear for icm              U038\n         ICM   R1,B'0011',98(DPTR)      get tt of ds1lstar         U038\n         LA    R1,1(,R1)                add 1 for origin 1         U038\n         MVI   TTREXMSK,C' '            FILL WITH BLANKS           U022\n         ICALL CONVTTR,R14,R15=#FUSED   DS1LSTAR CCC.HH            U022\n         XC    TRKTOT,TRKTOT            INIT TOTAL TRACKS          U033\n         ICALL CONVEXT,R14,R1=105(,DPTR),R15=3   GET FIRST EXTS    U022\n         CLI   59(DPTR),3               MORE THAN 3 EXTENTS?       U022\n         BNH   FDR2$EXP                 NO, PRINT TOTAL NUMBER NOW U022\n         OC    135(8,DPTR),135(DPTR)    MORE FORMAT 3?             U022\n         BZ    FDR2$EXP                 NO, PRINT WHAT WE HAVE     U022\nFDR2$EXL MVC   TRKCCHH,135(DPTR)        -> FMT3 DSCB               U022\nFDR2$NX3 LA    DPTR,140(,DPTR)          -> COUNT OF NEXT DSCB      U033\n         BCT   DLEN,FDR2$EXT            CHECK IF IN THIS BLOCK     U022\n         SPACE 1\n         TAPIO TCCW#DAT                 GET NEXT TAPE BLOCK        U022\n         CLC   =C'DUMMYDSF',TAPEBUFF+12 STILL IN DSF BLOCKS        U022\n         BNE   FDR2$OUT                 NO, GET OUT NOW            U022\n         CLC   =C'VSAMDFEF',TAPEBUFF+32 ICF CAT (V4.8)?            U032\n         BNE   *+4+6+4                  NO, TRY TRACKTAB           U032\n         MVC   UNLOADER+4(4),=C'V4.8'   YES, INDICATE V4.8         U032\n         B     FDR2LOOP                 AND SKIP THIS BLOCK        U032\n         CLC   =C'TRACKTAB',TAPEBUFF+32 INTO TRACK MAPS?           U022\n         BNE   FDR2$EXD                 NO, CONTINUE PROCESSING    U022\n         CLC   UNLOADER+4(4),BLANKS     ANY VERSION YET?           U032\n         BNE   *+10                     YES, SKIP UPDATE           U032\n         MVC   UNLOADER+4(4),=C'V4.5'   YES, INDICATE VERSION 4.5  U046\nFDR2$OUT MVI   TTREXMSK,C'*'            INDICATE QUANTITY UNKNOWN  U022\n         OI    TFLAG2,T2@FDROV          INDICATE NEED OF MSG       U022\n         L     R1,TRKTOT                GET TOTAL TRACKS COUNTED   U022\n         ICALL CONVTTR,R14,R15=#FTOTAL  OUTPUT FIELD FOR PRINTING  U022\n         PRTLN2  ,                      DRIVE OUT THE LINE         U022\n         B     FDR2$EOF                 AND OUTPUT TITLE LINE      U022\n         SPACE 1\nFDR2$EXD ICM   DLEN,B'1111',TAPEBUFF+28 NUMBER OF DSCB'S IN BLOCK  U022\n*U037    BNZ   *+8                      VALID, GO ON               U022\n*U037    BAL   R14,BOOM                 LOGIC ERROR!!!!!           U022\n         BZ    FDR2LOOP                 skip if none here          U037\n         LA    DPTR,TAPEBUFF+32         -> COUNT OF FIRST DSCB     U022\n         SPACE 1\nFDR2$EXT CLC   TRKCCHH,0(DPTR)          IS THIS IT??               U022\n         LA    DPTR,8(,DPTR)            -> DATA PORTION OF RECORD  U033\n         BE    FDR2$F3                  YEP, FOUND IT              U033\n         CLI   44(DPTR),C'1'            FORMAT 1 DSCB?             U033\n         BNE   FDR2$NX3                 NO, GO SEARCH FOR NEXT     U033\n         OI    TFLAG2,T2@FDROV          INDICATE NEED FOR MESSAGE  U022\n         MVI   TTREXMSK,C'*'            FILL EDIT WITH ASTRISKS    U022\n*                                       TO IND. UNKNOWN SIZE       U022\n*                                       SORTA LIKE FORTRASH        U022\n         LA    DLEN,1(,DLEN)            RESET COUNTER              U033\n         SH    DPTR,=H'148'             RESET POINTER              U033\n         B     FDR2$EXP                 GO PRINT TOTALS            U033\nFDR2$F3  ICALL CONVEXT,R14,R1=4(,DPTR),R15=4  GET NEXT 4 EXTS      U033\n         CLI   45(DPTR),0               ANY MORE EXTENTS HERE?     U022\n         BE    FDR2$EXP                 NO, FORMAT ENTRY           U033\n         ICALL CONVEXT,R14,R1=45(,DPTR),R15=9 GET NEXT 9 EXTS      U022\nFDR2$EXN OC    135(5,DPTR),135(DPTR)    ANY MORE DSCB'S?           U022\n         BNZ   FDR2$EXL                 YES, GO LOOK FOR THEM      U022\n         SPACE 1\nFDR2$EXP L     R1,TRKTOT                GET TOTAL TRACKS           U022\n         ICALL CONVTTR,R14,R15=#FTOTAL  FORMAT TOTAL TRACKS        U022\n         PRTLN2  ,                      AND PRINT THE LINE         U022\n         SPACE 1\nFDR2$NXT LA    DPTR,140+8(,DPTR)        -> NEXT DSCB IN BUFFER     U022\n         BCT   DLEN,FDR2$DSN            LOOP BACK FOR NEXT         U022\n         B     FDR2LOOP                 GET NEXT BUFFER            U022\n         SPACE 3\nFDR2$EOF TM    TFLAG2,T2@FDROV          MSG REQ?                   U022\n         BZ    STAR$TWO                 NO, OUTPUT LINES           U022\n         L     R15,=A(FDRFOOT1)         -> OUTPUT MESSAGE          U022\n         MVC   OUTBUFF2(L'FDRFOOT1),0(R15)   MOVE IN MESSAGE       U022\n         PRTLN2  ,                      DRIVE OUT MESSAGE          U022\n         B     STAR$TWO                 AND TERMINATE THE FILE     U034\n         EJECT\nDSS2NEWV DC    0H'0'                                               U034\n         XC    LCTR2,LCTR2                                         U034\n         LA    R1,0                                                U034\n         IC    R1,TAPEBUFF+50           GET DEVICE UNIT TYPE       U034\n         MH    R1,=Y(DEVTABXL)          TIMES LEN OF DEVTABX ENTRY U039\n         A     R1,=A(DEVTABX)           POINT TO DEVICE TABLE      U039\n         MVC   DSSDEVTY,4(R1)           SAVE DEVICE TYPE           U039\n         MVC   DSSDEVSZ,TAPEBUFF+24     SAVE DEVICE SIZE           U034\n         LH    R1,DSSDEVTT              GET TRACKS PER CYLINDER    U034\n         ST    R1,TRKCYL                  AND PUT IN WORK FIELD    U034\n         MVC   DSSVOLID,TAPEBUFF+32     SAVE SERIAL NUMBER         U034\n         TAPIO TCCW#DAT,TM=BOOM         READ THE 2ND BLOCK         U034\n         CLC   =C'BMBB',TAPEBUFF+16     DSS BIT MAP?               U034\n         BNE   BOOM                     NO, LOGIC ERROR            U034\n         LH    R1,TAPEBUFF+24           # OF TRACKS IN THIS MAP    U034\n         SRL   R1,3                     # OF BYTES IN BITMAP       U034\n         LA    R1,1(R1)                                            U034\n         STH   R1,BITMAPLN                                         U034\n         LR    R0,R1                                               U034\n         GETMAIN R,LV=(0)               GET STORAGE FOR BITMAP     U034\n         ST    R1,BITMAP                  AND SAVE THE POINTER     U034\n         LA    R1,0                     CLEAR REGISTER             U034\n         IC    R1,TAPEBUFF+8              AND INSERT PREFIX LENGTH U034\n         LA    R0,12(R1)                ADD BITMAP EXT LENGTH      U034\n         LA    R2,TAPEBUFF                                         U034\n         AR    R0,R2                    POINT TO THE BITMAP        U034\n         L     R2,BITMAP                                           U034\n         LH    R3,BITMAPLN                                         U034\n         LR    R1,R3                                               U034\n         MVCL  R2,R0                    SAVE THE BITMAP            U034\n         CLC   =F'0',TAPEBUFF+20        ANOTHER BITMAP SEGMENT?    U034\n         BZ    DSS2                                                U034\n         OI    TFLAG3,T3@DSSBO          INDICATE NEED OF MSG       U046\nDSS2     DC    0H'0'                                               U034\n         BAL   LINK,SET$FULD            FORMAT UNLOADED MSG        U034\n         DC    4Y(0)                    SO RETURN ADDR IS CORRECT  U034\n         MVC   OUTBUFF2+58(25),=C'....... was unloaded from a'     U034\n         MVC   OUTBUFF2+91(7),DSSDEVTY  GRAB UNIT TYPE             U034\n         MVC   OUTBUFF2+100(16),=C'-  VOLID(      )'               U034\n         MVC   OUTBUFF2+109(6),DSSVOLID GRAB VOL SERIDAL NUM       U034\n         MVC   OUTBUFF2+47(8),UNLOADER  MOVE IN UNLOADER           U034\n         PRTLN2                         OUTPUT TITLE LINE 1        U034\n         TM    PARMFLG1,P1@NOMEM        DUMP DSN'S?                U034\n         BO    STAR$TWO                 NO, FINNISH IT             U034\n         MVI   OUTBUFF2,C'0'            SKIP A LINE                U034\n         MVC   OUTBUFF2+16(28),=C'Following datasets unloaded:'    U034\n         L     R1,=A(COLTITLE)                                     U035\n         MVC   OUTBUFF2+55(78),0(R1)                               U035\n         PRTLN2 ,                       SECOND LINE OF TITLE       U034\n         MVI   OUTBUFF2,C'0'            SKIP A LINE HERE TOO.      U034\n         B     DSS2TEST                                            U034\n         SPACE 1\nDSS2LOOP TAPIO TCCW#DAT,TM=DSS2$EOF     NEW BUFFER                 U034\nDSS2TEST CLI   TAPEBUFF+10,X'10'        VTOC TRACK?                U034\n         BE    DSS2INIT                                            U034\n         CLI   TAPEBUFF+10,X'80'        VOL HEADER?                U034\n         BE    DSS2$EOD                                            U034\n         B     DSS2LOOP                                            U034\nDSS2INIT LA    R1,0                                                U034\n         IC    R1,TAPEBUFF+8            LENGTH OF PREFIX           U034\n         LH    DLEN,TAPEBUFF+6          GET SEGMENT LENGTH         U034\n         SR    DLEN,R1                  LENGTH OF PREFIX           U034\n         SH    DLEN,=H'24'              LENGTH OF TRACK EXTENSION  U034\n         LA    DPTR,TAPEBUFF+24         LENGTH OF TRACK EXTENSION  U034\n         AR    DPTR,R1                  LENGTH OF PREFIX           U034\n         LA    DPTR,8(DPTR)             POINT TO DSNAME            U034\nDSS2$DSN CLI   44(DPTR),C'1'            FORMAT 1 DSCB?             U034\n         BNE   DSS2$NXT                 NO, GET NEXT DSCB          U034\n         LA    R0,0                                                U034\n         LA    R1,0                                                U034\n         ICM   R0,B'0011',107(DPTR)     GET LOW CYL ADDRESS        U034\n         MH    R0,DSSDEVTT                AND MULTIPLY BY TRK/CYL  U034\n         ICM   R1,B'0011',109(DPTR)         THEN GET LOW TRK ADR   U034\n         AR    R0,R1                          AND MAKE IT REL TRK  U034\n         SRDL  R0,3                     DEVIDE BY 8 FOR REL BYTE   U034\n         L     R2,BITMAP                POINT TO BITMAP            U034\n         AR    R2,R0                       AND ADD REL BYTE ADR    U034\n         SRL   R1,29                    REL BIT WITHIN BYTE * 2    U034\n         A     R1,=A(MASKTAB)           POINT TO MASK ENTRY        U034\n         IC    R1,0(R1)                 GET THE MASK               U034\n         EX    R1,DSS2$TM               DO TEST UNDER MASK         U034\n         BNO   DSS2$NXT                                            U034\n         LH    R1,LCTR2                                            U034\n         BCT   R1,DSS2$NHD                                         U034\n         MVI   OUTBUFF2,C'0'            SKIP A LINE                U034\n         L     R1,=A(COLTITLE)                                     U035\n         MVC   OUTBUFF2+55(78),0(R1)                               U035\n         PRTLN2 ,                       SECOND LINE OF TITLE       U034\n         MVI   OUTBUFF2,C'0'            SKIP A LINE HERE TOO.      U034\nDSS2$NHD MVC   #FDSN,0(DPTR)            YES, MOVE IN DSN           U034\n         ICALL CNVDSORG,R14,R1=82(,DPTR),R15=#FDSORG   DSORG       U034\n         ICALL CNVRECFM,R14,R1=84(,DPTR),R15=#FRECFM   RECFM       U034\n         ICALL CONVHALF,R14,R1=86(,DPTR),R15=#FBLKSI   BLKSIZE     U034\n         ICALL CONVHALF,R14,R1=88(,DPTR),R15=#FLRECL   LRECL       U034\n         ICALL CONVDATE,LINK,R1=53(,DPTR),R15=#FCDATE  CDATE       U034\n         ICALL CONVDATE,LINK,R1=75(,DPTR),R15=#FLDATE  L/USED      U034\n         XC    DWD,DWD                  CLEAR OUT WORKAREA         U034\n         MVC   DWD+3,59(DPTR)           MOVE IN NUMBER OF EXTENTS  U034\n         ICALL CONVHALF,R14,R1=DWD+2,R15=#FEXT         # EXT.      U034\n         ICALL SLIDE,R14,R15=#FEXT+1    SHIFT TO LEFT SOME         U034\n         XR    R1,R1                    CLEAR FOR ICM              U034\n         ICM   R1,B'0111',95(DPTR)      GET QUANTITY FOR SEC       U034\n         BZ    DSS2$ALC                 IF ZERO, DONE HERE         U034\n         C     R1,=F'99999'             LARGER THAN EDIT MASK?     U034\n         BNH   *+12                     YES, LEAVE FILL CHAR       U034\n         OI    TFLAG2,T2@FDROV          INDICATE FIELD OVERFLOW    U034\n         MVI   #FSEC,C'*'               INDICATE LARGER THAN FIELD U034\n         CVD   R1,DWD                   CONVERT TO DEC             U034\n         MVC   #FSEC+1(5),=X'2020202120'  EDIT MASK                U034\n         ED    #FSEC,DWD+5              EDIT IN NUMBER             U034\n         SPACE 1\nDSS2$ALC MVC   DWD(1),94(DPTR)          COPY OVER ALLOC ALG        U034\n         NI    DWD,X'C0'                JUST ALLOC ALG.            U034\n         XR    R1,R1                    CLEAR FOR IC               U034\n         IC    R1,DWD                   GET ALLOC ALG              U034\n         SRL   R1,6                     JUST 2 BITS PLEASE         U034\n         MH    R1,=H'3'                 INTO INDEX FOR TABLE       U034\n         LA    R15,=C'ABSBLKTRKCYL'     ALLOCATION TYPE TABLE      U034\n         AR    R1,R15                   -> ENTRY IN TABLE          U034\n         MVC   #FALC(3),0(R1)           MOVE IN ALLOC TYPE         U034\n         TM    94(DPTR),X'01'           WAS ROUND SPEC?            U034\n         BZ    *+10                     NO, SKIP UPDATE            U034\n         MVC   #FALC+1(3),=C'- R'       ROUND IT TO CYL            U034\n         TM    94(DPTR),X'08'           CONTIG?                    U034\n         BZ    DSS2$ALM                 NO, TRY MXIG               U034\n         MVC   #FALC+1(2),=C'-C'        WHATEVER IN 1 HUNK         U034\n         B     DSS2$USE                 GET AMOUNT USED            U034\nDSS2$ALM TM    94(DPTR),X'04'           MXIG?                      U034\n         BZ    DSS2$ALA                 NO, TRY ALX                U034\n         MVC   #FALC,=C'MXIG'           YES, SAY SO                U034\n         B     DSS2$USE                 AND CONTINUE               U034\nDSS2$ALA TM    94(DPTR),X'02'           ALX ALLOC?                 U034\n         BZ    DSS2$USE                 NO, DONE HERE              U034\n         MVC   #FALC+1(2),=C'-A'        ORIGINAL IN ALX            U034\n         SPACE 1\nDSS2$USE LA    R1,1                     TTR'S ARE ORIGIN 0         U034\n         AH    R1,98(,DPTR)             GET TT OF DS1LSTAR         U034\n         MVI   TTREXMSK,C' '            FILL WITH BLANKS           U034\n         ICALL CONVTTR,R14,R15=#FUSED   DS1LSTAR CCC.HH            U034\n         XC    TRKTOT,TRKTOT            INIT TOTAL TRACKS          U034\n         ICALL CONVEXT,R14,R1=105(,DPTR),R15=3   GET FIRST EXTS    U034\n         CLI   59(DPTR),3               MORE THAN 3 EXTENTS?       U034\n         BNH   DSS2$EXP                 NO, PRINT TOTAL NUMBER NOW U034\n         OC    135(8,DPTR),135(DPTR)    MORE FORMAT 3?             U034\n         BZ    DSS2$FLG                 NO, GO SET FLAG            U034\nDSS2$EXL MVC   TRKCCHH,135(DPTR)        -> FMT3 DSCB               U034\nDSS2$NX3 LA    DPTR,140(,DPTR)          -> COUNT OF NEXT DSCB      U034\n         SH    DLEN,=H'148'             CHECK IF IN THIS BLOCK     U034\n         BP    DSS2$EXT                 YES                        U034\n         SPACE 1\n         TAPIO TCCW#DAT,TM=DSS2$OUT     GET NEXT TAPE BLOCK        U034\n         CLI   TAPEBUFF+10,X'10'        VTOC TRACK?                U034\n         BNE   DSS2$FLG                 NO, GO SET FLAG            U034\n         LA    R1,0                                                U034\n         IC    R1,TAPEBUFF+8            LENGTH OF PREFIX           U034\n         LH    DLEN,TAPEBUFF+6          GET SEGMENT LENGTH         U034\n         SR    DLEN,R1                  LENGTH OF PREFIX           U034\n         SH    DLEN,=H'24'              LENGTH OF TRACK EXTENSION  U034\n         LA    DPTR,TAPEBUFF+24         LENGTH OF TRACK EXTENSION  U034\n         AR    DPTR,R1                  LENGTH OF PREFIX           U034\n         SPACE 1\nDSS2$EXT CLC   TRKCCHH,0(DPTR)          IS THIS IT??               U034\n         LA    DPTR,8(,DPTR)            -> DATA PORTION OF RECORD  U034\n         BE    DSS2$F3                  YEP, FOUND IT              U034\n         CLI   44(DPTR),C'1'            FORMAT 1 DSCB?             U034\n         BNE   DSS2$NX3                 NO, GO SEARCH FOR NEXT     U034\n         AH    DLEN,=H'148'             RESET COUNTER              U034\n         SH    DPTR,=H'148'             RESET POINTER              U034\nDSS2$FLG OI    TFLAG2,T2@FDROV          INDICATE NEED FOR MESSAGE  U034\n         MVI   TTREXMSK,C'*'            FILL EDIT WITH ASTRISKS    U034\n*                                       TO IND. UNKNOWN SIZE       U034\n*                                       SORTA LIKE FORTRASH        U034\n         B     DSS2$EXP                 GO PRINT TOTALS            U034\nDSS2$F3  ICALL CONVEXT,R14,R1=4(,DPTR),R15=4  GET NEXT 4 EXTS      U034\n         CLI   45(DPTR),0               ANY MORE EXTENTS HERE?     U034\n         BE    DSS2$EXP                 NO, FORMAT ENTRY           U034\n         ICALL CONVEXT,R14,R1=45(,DPTR),R15=9 GET NEXT 9 EXTS      U034\nDSS2$EXN OC    135(5,DPTR),135(DPTR)    ANY MORE DSCB'S?           U034\n         BNZ   DSS2$EXL                 YES, GO LOOK FOR THEM      U034\n         SPACE 1\nDSS2$EXP L     R1,TRKTOT                GET TOTAL TRACKS           U034\n         ICALL CONVTTR,R14,R15=#FTOTAL  FORMAT TOTAL TRACKS        U034\n         PRTLN2  ,                      AND PRINT THE LINE         U034\n         SPACE 1\nDSS2$NXT LA    DPTR,148(,DPTR)          -> NEXT DSCB IN BUFFER     U034\n         SH    DLEN,=H'148'             ANOTHER ENTRY IN BLOCK?    U034\n         BP    DSS2$DSN                                            U034\n         B     DSS2LOOP                 GET NEXT BUFFER            U034\n         SPACE 2\nDSS2$OUT MVI   TTREXMSK,C'*'            INDICATE QUANTITY UNKNOWN  U034\n         OI    TFLAG2,T2@FDROV          INDICATE NEED OF MSG       U034\n         L     R1,TRKTOT                GET TOTAL TRACKS COUNTED   U034\n         ICALL CONVTTR,R14,R15=#FTOTAL  OUTPUT FIELD FOR PRINTING  U034\n         PRTLN2  ,                      DRIVE OUT THE LINE         U034\nDSS2$EOF DC    0H'0'                                               U034\n         OI    TFLAG1,T1@MVEOF                                     U034\nDSS2$EOD DC    0H'0'                                               U034\n         LH    R0,BITMAPLN                                         U034\n         L     R2,BITMAP                                           U034\n         FREEMAIN R,LV=(0),A=(2)                                   U034\n         TM    TFLAG3,T3@DSSBO          MSG REQ?                   U046\n         BZ    DSS2$END                 NO, OUTPUT LINES           U034\n         L     R15,=A(DSSFOOT1)         -> OUTPUT MESSAGE          U034\n         MVC   OUTBUFF2(L'DSSFOOT1),0(R15)   MOVE IN MESSAGE       U034\n         PRTLN2  ,                      DRIVE OUT MESSAGE          U034\n*U046    NI    TFLAG2,X'FF'-T2@FDROV                               U034\nDSS2$END TM    TFLAG2,T2@FDROV          MSG REQ?                   U034\n         BZ    DSS2$NEW                 NO, OUTPUT LINES           U034\n         L     R15,=A(FDRFOOT1)         -> OUTPUT MESSAGE          U034\n         MVC   OUTBUFF2(L'FDRFOOT1),0(R15)   MOVE IN MESSAGE       U034\n         PRTLN2  ,                      DRIVE OUT MESSAGE          U034\n         NI    TFLAG2,X'FF'-T2@FDROV                               U034\nDSS2$NEW CLI   TAPEBUFF+10,X'80'        VOL HEADER?                U034\n         BE    DSS2NEWV                                            U034\n         B     STAR$TWO                     TERMINATE THE FILE     U034\nDSS2$TM  TM    0(R2),0                                             U034\nMASKTAB  DC    0H'0'                                               U034\n         DC    B'10000000'                                         U034\n         DC    B'01000000'                                         U034\n         DC    B'00100000'                                         U034\n         DC    B'00010000'                                         U034\n         DC    B'00001000'                                         U034\n         DC    B'00000100'                                         U034\n         DC    B'00000010'                                         U034\n         DC    B'00000001'                                         U034\n         EJECT\nSTAR$TWO MVC   OUTBUFF2(2),=C'0*'\n         MVC   OUTBUFF2+2(L'OUTBUFF2-2),OUTBUFF2+1\n         PRTLN2\n         TM    TFLAG1,T1@MVEOF          ALREADY HIT EOF?\n         BO    CHKMVEOF                 YES - SEE WHERE TO GO\n         TM    TFLAG1,T1@SL             SL TAPE?\n         BO    FIND$EOF                 YES - CONTINUE PROCESSING\n         B     NL$LOOP                  SCAN THRU REST OF FILE\n         SPACE 1\nCHKMVEOF NI    TFLAG1,255-T1@MVEOF      RESET FLAG\n         TM    TFLAG1,T1@SL             SL TAPE?\n         BO    SL$SAVE                  YES - GO READ THE EOF LABELS\n         B     NL$EOF                   NO\n         SPACE 3\nFMU      PRTLN2                         PRINT INFO LINE\nFMU$     TM    PARMFLG1,P1@NOMEM        WANT MEMBER LISTING?\n         BO    STAR$TWO                 NO - DONE\n         MVI   OUTBUFF2,C'0'            SET CC\n         MVC   OUTBUFF2+16(27),=C'Following members unloaded:'\n         PRTLN2                         PRINT HEADER\n         MVI   OUTBUFF2,C'0'            DOUBLE SPACE FIRST MEMBER LINE\n         LA    PPTR,OUTBUFF2+20         INIT PRINT LINE PTR\n         BR    LINK                     RETURN TO CALLER\n         SPACE 3\nSET$FULL MVC   OUTBUFF2+54(17),=C'...  was:  DSORG='\n         LA    R1,TAPEBUFF              -> TAPE BUFFER             U022\n         AH    R1,0(,LINK)              + OFFSET TO DSORG          U022\n         ICALL CNVDSORG,R14,R15=OUTBUFF2+71  CONVERT DSORG\n         SPACE 1\n         MVC   OUTBUFF2+76(6),=C'LRECL='\n         LA    R1,TAPEBUFF\n         AH    R1,6(,LINK)              GET LRECL ADDR\n         ICALL CONVHALF,R14,R15=OUTBUFF2+82  CONVERT LRECL\n         BAL   R14,SLIDE                MOVE IT LEFT\n         SPACE 1\n         MVC   OUTBUFF2+90(6),=C'RECFM='\n         LA    R1,TAPEBUFF              -> TAPE BUFFER             U022\n         AH    R1,2(,LINK)              + OFFSET TO RECFM          U022\n         ICALL CNVRECFM,R14,R15=OUTBUFF2+96  CONVERT RECFM\n         SPACE 1\n         MVC   OUTBUFF2+104(8),=C'BLKSIZE='\n         LA    R1,TAPEBUFF\n         AH    R1,4(,LINK)              GET BLKSIZE ADDR\n         ICALL CONVHALF,R14,R15=OUTBUFF2+112 CONVERT BLKSIZE\n         BAL   R14,SLIDE                MOVE IT LEFT\n         SPACE 2\nSET$FULD MVI   OUTBUFF2,C'-'            SET CC\n         MVC   OUTBUFF2+1(17),FL1ID     MOVE IN (TAPE) DSN\n         MVC   OUTBUFF2+19(5),=C'(File'\n         MVC   OUTBUFF2+25(4),FL1FILSQ  MOVE IN FILE SEQ#\n         MVC   OUTBUFF2+29(17),=C') was unloaded by'\n         B     8(,LINK)                 RETURN TO CALLER\n         SPACE 3\nBOOM     STM   R0,R15,BOOMREGS          SAVE ALL REGS\n         MVC   OUTBUFF2(34),=C'0*** Logic error - contact LDW ***'\n         PRTLN2                         PRINT ERROR MSG\n         TM    PARMFLG2,P2@TEST         ABEND?                     U020\n         BNO   STAR$TWO                 NO - IGNORE REST OF FILE\n         SPACE 1\n         CLOSE MF=(E,OPENMFL)           CLOSE SYSPRINT\n         IFP2  N,BOOM2                  SKIP IF NOT OPEN\n         CLOSE MF=(E,OPENMFL2)          CLOSE SYSPRNT2\n         SPACE 1\nBOOM2    LA    R14,BOOMREGS             POINT TO REG SAVE AREA\n         EX    0,*                      AND AWAY WE GO\n         EJECT\nCONVHALF MVC   DWD(2),0(R1)             MOVE FIELD TO AN ALIGNED PLACE\n         XR    R0,R0                    CLEAR FOR ICM              U032\n         ICM   R0,B'0011',DWD           PICK IT UP                 U032\n         CVD   R0,DWD                   CONVERT TO PACKED\n         MVC   1(5,R15),=X'2020202120'  MOVE IN EDIT MASK\n         ED    0(6,R15),DWD+5           DO THE EDIT\n         BR    R14                      RETURN TO CALLER\n         SPACE 3\nSLIDE    CLI   0(R15),C' '              NON-BLANK YET?\n         BNER  R14                      YES - RETURN TO CALLER\n         MVC   0(6,R15),1(R15)          MOVE IT LEFT 1 POS\n         B     SLIDE                    AND CHECK IT AGAIN\n         SPACE 3\nCONVUFDR MVC   OUTBUFF2+84(9),=C'Unit=????'  INSERT MASK           U022\n         L     R15,=A(DEVTABX)          -> device type table       U039\nCONVUF$L CLC   0(1,R1),1(R15)           this device?               U042\n         BE    CONVUF$G                 yes - got it               U039\n         LA    R15,DEVTABXL(,R15)       -> next table entry        U039\n         CLC   =F'0',0(R15)             end of table?              U039\n         BNE   CONVUF$L                 no - keep looking          U039\n         MVC   TRKCYL,=F'255'           any old number for invalid U039\n         MVC   OUTBUFF2+125(1),0(R1)    copy the bad FDR type code U039\n         MVC   OUTBUFF2+126(6),=C'<-unkn'  set rest of devtype     U039\n         BR    LINK                     return to caller           U039\n         SPACE 1\nCONVUF$G MVC   OUTBUFF2+125(7),4(R15)   copy the device type name  U042\n         XC    TRKCYL,TRKCYL            CLEAR TRACKS/CYL           U022\n         MVC   TRKCYL+2(2),2(R15)       save trks/cyl for this d/t U039\n         BR    LINK                     return to caller           U039\n         SPACE 1\nCONVUNIT MVC   OUTBUFF2+120(10),=C'Unit=unkn-'                     U039\n         HEX   OUTBUFF2+130,(3,R1),LEN=1  assume invalid           U039\n         CLI   3(R1),DEVTABXM           too big?                   U039\n         BHR   LINK                     yes - return\n         SR    R14,R14                  clear for ICM              U039\n         IC    R14,3(,R1)               get devtype byte           U022\n         MH    R14,=Y(DEVTABXL)         length of a table entry    U039\n         A     R14,=A(DEVTABX)          point to correct entry     U039\n         MVC   OUTBUFF2+125(7),4(R14)   move devtype name to line  U039\n         BR    LINK                     return to caller\n         SPACE 3\nCNVDSORG TM    0(R1),X'01'              DSORG=**U                  U022\n         BNO   *+8                      NO - SKIP\n         MVI   2(R15),C'U'\n         SPACE 1\n         MVC   0(2,R15),=C'PO'          ASSUME DSORG=PO\n         TM    0(R1),X'02'              IS IT?\n         BOR   R14                      YES - RETURN TO CALLER\n         SPACE 1\n         MVC   0(2,R15),=C'DA'          ASSUME DSORG=DA\n         TM    0(R1),X'20'              IS IT?\n         BOR   R14                      YES - RETURN TO CALLER\n         SPACE 1\n         MVC   0(2,R15),=C'PS'          ASSUME DSORG=PS\n         TM    0(R1),X'40'              IS IT?\n         BOR   R14                      YES - RETURN TO CALLER\n         SPACE 1\n         MVC   0(2,R15),=C'IS'          ASSUME DSORG=IS\n         TM    0(R1),X'80'              IS IT?\n         BOR   R14                      YES - RETURN TO CALLER\n         SPACE 1\n         MVC   0(2,R15),=C'VS'          LAST TRY = VSAM?           U033\n         TM    1(R1),X'08'              IS IT?                     U022\n         BOR   R14                      YES - RETURN TO CALLER     U022\n         SPACE 1\n         MVC   0(2,R15),=C'**'          NONE OF THE ABOVE???\n         BR    R14                      RETURN TO CALLER\n         SPACE 3\nCNVRECFM TM    0(R1),X'C0'              RECFM=U?                   U022\n         BNO   *+12                     NO - TRY NEXT\n         MVI   0(R15),C'U'\n         B     RECFM$2                  CONTINUE\n         SPACE 1\n         TM    0(R1),X'80'              RECFM=F?\n         BNO   *+12                     NO - TRY NEXT\n         MVI   0(R15),C'F'\n         B     RECFM$2                  CONTINUE\n         SPACE 1\n         TM    0(R1),X'40'              RECFM=V?\n         BNO   *+8                      NO - TRY NEXT\n         MVI   0(R15),C'V'\n         SPACE 1\nRECFM$2  LA    R15,1(,R15)\n         TM    0(R1),X'10'              BLOCKED?\n         BNO   *+12                     NO - TRY NEXT\n         MVI   0(R15),C'B'\n         LA    R15,1(,R15)\n         SPACE 1\n         TM    0(R1),X'08'              SPANNED?\n         BNO   *+12                     NO - TRY NEXT\n         MVI   0(R15),C'S'\n         LA    R15,1(,R15)\n         SPACE 1\n         TM    0(R1),X'20'              TRK OVFL?\n         BNO   *+12                     NO - TRY NEXT\n         MVI   0(R15),C'T'\n         LA    R15,1(,R15)\n         SPACE 1\n         TM    0(R1),X'02'              RECFM=A?\n         BNO   *+12                     NO - TRY NEXT\n         MVI   0(R15),C'A'\n         LA    R15,1(,R15)\n         SPACE 1\n         TM    0(R1),X'01'              RECFM=M?\n         BNOR  R14                      NO - RETURN TO CALLER\n         MVI   0(R15),C'M'\n         BR    R14                      RETURN TO CALLER\n         SPACE 3\nCONVTTR  LTR   R1,R1                    ANY VALUE?                 U022\n         BZR   R14                      NO, RETURN TO CALLER       U022\n         XR    R0,R0                    CLEAR FOR DIVISION (\u00ac0C9)  U022\n         D     R0,TRKCYL                GET TT;CCC                 U022\n         CVD   R1,DWD                   CONVERT CYLINDERS          U022\n         MVC   0(5,R15),TTREXMSK        INSERT EDIT MASK           U022\n         ED    0(4,R15),DWD+6           CONVERT CYLINDERS          U022\n         MH    R0,=H'10'                SHIFT 1 NIBBLE             U022\n         CVD   R0,DWD                   CONVERT TRACKS             U022\n         UNPK  5(3,R15),DWD+6(2)        CHARS TRACKS               U022\n         MVI   7(R15),C' '              CLEAR GARBAGE              U022\n         MVI   TTREXMSK,C' '            RESET FILL TO NULL         U022\n         BR    R14                      RETURN TO CALLER           U022\n         SPACE 3\nCONVEXT  CLI   0(R1),0                  ANY EXTENTS LEFT?          U022\n         BER   R14                      NO, RETURN TO CALLER       U022\n         CLI   0(R1),X'40'              USER LABEL EXTENT?         U022\n         BE    CONVEXTL                 YES, SKIP IT - NO DATA     U022\n         LH    R0,6(,R1)                GET HIGH CC                U022\n         SH    R0,2(,R1)                LESS LOW CC                U022\n         MH    R0,TRKCYL+2              * TRKS/CYL                 U022\n         AH    R0,8(,R1)                + HIGH TT                  U022\n         SH    R0,4(,R1)                LESS LOW TT = TOTAL TRKS   U022\n         AH    R0,=H'1'                 TTR'S ARE ORIGIN 0         U033\n         A     R0,TRKTOT                NEW TOTAL FOR EXTENTS      U022\n         ST    R0,TRKTOT                SAVE NEW TOTAL             U022\nCONVEXTL LA    R1,10(,R1)               -> NEXT EXTENT             U022\n         BCT   R15,CONVEXT              LOOP AGAIN TILL DONE       U022\n         BR    R14                      AND RETURN TO CALLER       U022\n         SPACE 3\n*  Subroutine to compute tape length in feet or percent            U046\nTAPE_LEN L     R3,TAPEMFL               -> TAPEDCB                 U046\n         TM    PARMFLG2,P2@PCT          force percent?             U046\n         BO    TAPE_PCT                 yes                        U046\n         TM    PARMFLG2,P2@FEET         force feet?                U046\n         BO    TAPEFEET                 yes                        U046\n         CLI   DCBDEVT-IHADCB(R3),DCBDVMT4  3480?                  U046\n         BE    TAPE_PCT                 yes - default to percent   U046\n         SPACE 1\nTAPEFEET XR    R0,R0\n         D     R0,=F'1200'              GET LENGTH IN FEET\n         CH    R0,=H'600'               ROUND UP?\n         BL    *+8                      NO                         U021\n         AH    R1,=H'1'                 ROUND UP.                  U021\n         CVD   R1,DWD\n         MVC   1(5,R15),=X'2020202120'\n         ED    0(6,R15),DWD+5\n         BR    R14                      RETURN TO CALLER\n         SPACE 2\nTAPE_PCT M     R0,=F'10000'             scale for percent(100)*100 U046\n         CLI   DCBDEVT-IHADCB(R3),DCBDVMT4  3480?                  U046\n         BE    PCT_CART                                            U046\nPCT_REEL D     R0,=A(2400*12*100)       divide by inches*100/reel  U046\n         B     PCT_CONV                                            U046\nPCT_CART D     R0,=A(150*3937)          divide by inches*100/cart  U046\nPCT_CONV CVD   R1,DWD                                              U046\n         MVC   1(6,R15),=X'2020214B2020'                           U046\n         ED    0(7,R15),DWD+5                                      U046\n         BR    R14                      RETURN TO CALLER           U046\n         SPACE 2\n*  SUBROUTINE TO DO I/O TO TAPE\nTAPIO    ST    R0,TAPEIOB+16            SET CCW ADDR\n         EXCP  TAPEIOB\n         WAIT  ECB=TAPEECB\n         CLI   TAPEECB,X'7F'            DID IT WORK?\n         BE    TAPIO$OK                 YES - CONTINUE\n         CLI   TAPEECB,X'41'            CHANNEL PROGRAM ERROR?\n         BNE   *+10     >=======+       NO - ERROR\n         CLI   IOBCSW+4,X'0D'   |       CHEND, DEVEND, UNITEXCPT?\n         BER   LINK             |       YES - IT'S REALLY A TAPEMARK\n         ST    LINK,LINKTPIO <==+       SAVE BAL REGISTER          U016\n         CLC   LCTR,=H'60'              ANYTHING ON PAGE?          U043\n         BL    *+8                      YES - CONTINUE             U013\n         NEWPAGE  ,                     PRINT THE TITLE            U013\n         MVC   OUTBUFF(44),=C'-*** Tape I/O error --- ECB code=XX *** C$\n               SW='                                                U013\n         HEX   OUTBUFF+33,TAPEECB,LEN=1                            U013\n         HEX   OUTBUFF+44,IOBCSW+1,LEN=7                           U013\n         MVC   OUTBUFF+59(24),=C'*** IOBSENSE0,1=XXXX ***'         U013\n         HEX   OUTBUFF+75,TAPEIOB+2,LEN=2                          U013\n         PRTLN OUTBUFF\n         SPACE 1\n         AIF   (&MVS).MVS02                                        U020\n**       L     R1,DD#PTR                -> DD SECTION OF TIOT      U013\n**       SH    R1,=H'24'                -> TIOT                    U013\n**       AH    R1,TAPEDCB+40            -> DD ENTRY FOR TAPE       U013\n**       L     R1,16(,R1)               -> UCB                     U013\n         L     R1,TAPEMFL               -> DCB                     U013\n         L     R1,DCBDEBAD-IHADCB(,R1)  -> DEB                     U025\n         L     R1,32(,R1)               -> UCB                     U013\n         L     R2,24(,R1)               -> EXTENDED SENSE INFO     U013\n         MVC   OUTBUFF(16),=C' *** Sense data='                    U013\n         HEX   OUTBUFF+16,(00,R2),LEN=4                            U013\n         HEX   OUTBUFF+25,(04,R2),LEN=4                            U013\n         HEX   OUTBUFF+35,(08,R2),LEN=4                            U013\n         HEX   OUTBUFF+44,(12,R2),LEN=4                            U013\n         HEX   OUTBUFF+54,(16,R2),LEN=4                            U013\n         HEX   OUTBUFF+63,(20,R2),LEN=4                            U013\n         PRTLN OUTBUFF                  PRINT THE SENSE DATA       U013\n         SPACE 3\n         NEWPAGE  10                    NEXT PAGE IF NEED ROOM     U015\n         MVC  OUTBUFF(35),=C'0    Bits set are flagged ''*'' below'U015\n         PRTLN OUTBUFF                  PRINT HEADER               U015\n         MVI   OUTBUFF,C'0'             DOUBLE SPACE FIRST ONE     U015\n         SPACE 2\n*  R2 -> SENSE DATA                                                U015\n         LA    R3,10                    NUMBER OF BYTES            U015\n         L     R4,=A(ERR#LIST)          -> ERROR MESSAGES          U015\n         SPACE 1\nNEXTBYTE LA    R6,OUTBUFF+5             -> LINE POS                U015\n         LA    R1,X'80'                 MASK BIT                   U015\n         SPACE 1\nTEST$BIT MVC   2(10,R6),0(R4)           MOVE TEXT                  U015\n         EX    R1,BIT$TM                IS THIS BIT SET?           U015\n         BZ    *+8                      NO - SKIP                  U015\n         MVI   0(R6),C'*'               YES - FLAG THIS ONE        U015\n         SPACE 1\n         LA    R4,10(,R4)               -> NEXT MSG                U015\n         LA    R6,16(,R6)               -> NEXT PRINT LINE POS     U015\n         SRA   R1,1                     MOVE BIT RIGHT             U015\n         BNZ   TEST$BIT                 CONTINUE WITH THIS BYTE    U015\n         PRTLN OUTBUFF                  PRINT DESC OF THIS BYTE    U015\n         LA    R2,1(,R2)                -> NEXT BYTE OF SENSE DATA U015\n         BCT   R3,NEXTBYTE              CONTINUE IF MORE           U015\n.MVS02   ANOP                                                      U020\n         SPACE 3\n         CLI   WHERE,3                  READING DATA?\n         BNE   CLOSE$TP                 NO - CLOSE UP AND LEAVE\n         L     R1,TAPEIOB+16            GET CCW ADDR\n         CLI   0(R1),RD                 WAS IT A READ?\n         BNE   CLOSE$TP                 NO - CLOSE UP AND LEAVE\n         LA    R0,TCCW#FSF              SKIP REST OF DATA...\n         L     LINK,LINKTPIO            RESTORE BAL REGISTER       U016\n         B     TAPIO                    START AT TOP OF THIS SUBRTN\n         SPACE 2\n         AIF   (&MVS).MVS03                                        U020\nBIT$TM   TM    0(R2),*-*                << EXECUTED >>             U015\n.MVS03   ANOP                                                      U020\n         SPACE 2\nTAPIO$OK L     R15,TAPEIOB+16           -> CCW                     U037\n         XC    LASTSIZE,LASTSIZE        assume not a data read     U037\n         CLI   0(R15),RD                was it a data read?        U037\n         BNE   4(,LINK)                 no - skip this junk        U037\n         SR    R0,R0                    clear for icm              U037\n         ICM   R0,B'0011',6(R15)        get length requested       U037\n         MVC   DWD+2(2),IOBCSW+6        COPY LENGTH LEFT\n         XC    DWD(2),DWD               CLEAR HIGH 2 BYTES\n         S     R0,DWD                   MINUS LENGTH UNUSED\n*%%% make a fullword called LASTSIZF                               U037\n         STH   R0,LASTSIZE              EQUALS SIZE READ\n         TM    TFLAG1,T1@ANLZ           ANALYZING?\n         BNO   4(,LINK)                 NO - SKIP THE REST\n         A     R0,BYTECNT               ADD PREVIOUS BYTE COUNT\n         ST    R0,BYTECNT               SAVE NEW TOTAL\n         L     R1,BLOCKCNT              GET BLOCK COUNT\n         LA    R1,1(,R1)                INCR\n         ST    R1,BLOCKCNT              SAVE NEW COUNT\n         CLC   LASTSIZE,TAPEBUFF        START WITH BLKSIZE?\n         BE    *+8                      YES - COULD BE RECFM=V\n         NI    NLFLAGS,255-NL@V         NO - NOT RECFM=V\n         CLC   LASTSIZE,MAXBLKSI        SAME SIZE?\n         BE    4(,LINK)                 YES - DONE HERE\n         BH    TAPIO$H                  LAST BLOCK IS BIGGEST\n         TM    NLFLAGS,NL@CHANG         ALREADY CHANGED?\n         BO    TAPIO$NL                 YES - TURN OFF RECFM=F\n         OI    NLFLAGS,NL@CHANG         SET \"CHANGED\"\n         B     4(,LINK)                 RETURN\n         SPACE 1\nTAPIO$H  OI    NLFLAGS,NL@CHANG         SET \"CHANGED\"\n         MVC   MAXBLKSI,LASTSIZE        SAVE NEW BIGGEST BLKSIZE\nTAPIO$NL NI    NLFLAGS,255-NL@F         NOT RECFM=F\n         B     4(,LINK)                 RETURN TO CALLER\n         SPACE 3\n*  SUBROUTINE TO FIND A TIOT ENTRY\nTIOTSCAN L     R1,DD#PTR                -> DD SECTION\n         XR    R0,R0                    CLEAR FOR IC\n         BAL   R14,*+6                  SET LOOP ADDR & SKIP\n         SPACE 1\n         AR    R1,R0                    POINT TO NEXT ENTRY\n         IC    R0,0(,R1)                GET LENGTH OF THIS ENTRY\n         LTR   R0,R0                    END OF TIOT?\n         BZR   LINK                     YES - \"NOT FOUND\" RETURN\n         CLC   4(8,R1),0(R15)           THIS IT?\n         BNER  R14                      NO - LOOP\n         CLC   =F'0',16(R1)             DD DUMMY? (LIKE MSM?)\n         BNE   4(,LINK)                 NO - RETURN (FOUND)\n         BR    LINK                     SAY NOT FOUND\n         SPACE 3\n*  SUBROUTINE TO FORMAT DATE FROM TAPE LABEL                       U027\nFMT$DATE CLC   =C' 00000',0(R1)         IS IT ZERO?                U048\n         BER   LINK                     YES - RETURN (LEAVE BLANK) U027\n         CLC   BLANKS(6),0(R1)          OR BLANK?                  U048\n         BER   LINK                     YES - RETURN (IT'S STILL)  U030\n         TM    PARMFLG2,P2@JDATE        JULIAN DATE REQUESTED?     U027\n         BO    FD$JDATE                 YES - GO DO IT             U027\n         CLC   3(3,R1),=C'00000'        DAY OF YEAR = ZERO?        U048\n         BE    FD$JDATE                 YES - FORCE JULIAN FORMAT  U031\n         MVC   DWD(5),1(R1)             COPY DATE                  U048\n         NC    DWD(5),=C'00000'         REMOVE DIGITS, LEAVE ZONES U031\n         CLC   DWD(5),=C'00000'         WAS IT ALL NUMERIC?        U031\n         BNE   FD$JDATE                 NO - FORCE JULIAN FORMAT   U031\n         PACK  DWD,1(2+1,R1)            PACK (SORT OF) YEAR        U048\n*                                       (GET 000000000000YYXS)     U027\n         L     R14,=A(MONTHS)           -> TARGET                  U030\n         MVI   6+1(R14),28              ASSUME NOT LEAP YEAR       U030\n         TM    DWD+6,X'01'              LEAP YEAR?                 U027\n         BO    FD$01                    NO (ODD YEAR)              U027\n         TM    DWD+6,X'12'              DIVISIBLE BY 4?            U027\n         BM    FD$01                    NO - NOT LEAP YEAR         U027\n         MVI   6+1(R14),29              YES - FEB HAS 29 DAYS      U030\nFD$01    PACK  DWD,3(3,R1)              PACK DAY OF YEAR           U048\n         CVB   R0,DWD                   GET IT IN BINARY           U027\n         LA    R3,1                     INIT MONTH NUMBER          U027\nFD$02    SH    R0,0(,R14)               SUB NUM OF DAYS THIS MONTH U027\n         BNP   FD$03                    HAVE MONTH                 U027\n         LA    R14,6(,R14)              NEXT TABLE ENTRY           U027\n         LA    R3,1(,R3)                BUMP MONTH                 U027\n         B     FD$02                    KEEP LOOKING               U027\nFD$03    AH    R0,0(,R14)               GET BACK CORRECT RESIDUAL  U027\n         CVD   R0,DWD                   CONVERT DAY OF MONTH       U028\n         OI    DWD+7,X'0F'              REMOVE SIGN                U028\n         TM    PARMFLG2,P2@GDATE        GREGORIAN DATE REQUESTED?  U028\n         BO    FD$GDATE                 YES - GO DO IT             U028\n         MVC   0(3,R15),2(R14)          MONTH NAME TO ANSWER       U048\n         UNPK  3(2,R15),DWD             FORMAT DAY OF MONTH        U048\n         MVI   5(R15),C','              put in separator           U048\n         MVC   6(2,R15),=C'19'          assume 19xx                U048\n         MVC   8(2,R15),1(R1)           PUT YEAR IN ANSWER         U048\n         CLI   0(R1),C' '               is it 19xx?                U048\n         BER   LINK                     yes - all done             U048\n         MVI   6(R15),C'2'              no - set millenium         U048\n         MVC   7(1,R15),0(R1)           ... and century            U048\n         BR    LINK                     RETURN TO CALLER           U028\n         SPACE 1\nFD$GDATE UNPK  3(2,R15),DWD             FORMAT DAY OF MONTH        U048\n         MVI   5(R15),C'/'              put in separator           U048\n         CVD   R3,DWD                   CONVERT MONTH              U027\n         OI    DWD+7,X'0F'              REMOVE SIGN                U027\n         UNPK  0(2,R15),DWD             FORMAT MONTH               U027\n         MVI   2(R15),C'/'              put in separator           U048\n         MVC   6(2,R15),=C'19'          assume 19xx                U048\n         MVC   8(2,R15),1(R1)           PUT YEAR IN ANSWER         U048\n         CLI   0(R1),C' '               is it 19xx?                U048\n         BER   LINK                     yes - all done             U048\n         MVI   6(R15),C'2'              no - set millenium         U048\n         MVC   7(1,R15),0(R1)           ... and century            U048\n         BR    LINK                     RETURN TO CALLER           U027\n         SPACE 1\nFD$JDATE MVC   2(2,R15),1(R1)           YEAR                       U048\n         MVI   4(R15),C'.'                                         U048\n         MVC   5(3,R15),3(R1)           DAY OF YEAR                U048\n         MVC   0(2,R15),=C'19'          assume 19xx                U048\n         CLI   0(R1),C' '               is it?                     U048\n         BER   LINK                     yes - return to caller     U048\n         MVI   0(R15),C'2'              no - set millenium         U048\n         MVC   1(1,R15),0(R1)           ... and century            U048\n         BR    LINK                     RETURN TO CALLER           U027\n         SPACE 3\n*  SUBROUTINE TO REMOVE LEADING ZEROES\nDEZERO   CLI   0(R1),C'0'               NON-ZERO YET?\n         BNER  R14                      YES - RETURN\n         MVI   0(R1),C' '               MAKE IT A BLANK\n         AH    R1,=H'1'                 ADVANCE                    U021\n         B     DEZERO                   LOOP\n         SPACE 3\nNEWPAG1C CH    R0,LCTR                  enough lines left?         U043\n         BNHR  LINK                     YES - JUST RETURN          U043\n         SPACE 1\nNEWPAG1  MVC   LCTR,LINECNT             RESET LINE COUNTER         U043\n         PRTLN HEADER1\n         MVI   OUTBUFF,C'+'             SET FOR OVERPRINT\n         MVC   OUTBUFF+5(6),VOLSERNO    OVERPRINT THE VOLSER\n         LA    R0,OUTBUFF               POINT TO OUTPUT LINE\n*U043    BAL   R14,PUTPRTLN             OVERPRINT THE SECOND TIME\n         L     R1,OPENMFL               -> SYSPRINT DCB            U043\n         PUT   (1),(0)                  overprint the second time  U043\n         PRTLN OUTBUFF                  AND THE THIRD\n         TM    TFLAG1,T1@PAGE1          IS THIS FIRST PAGE OF VOL?\n         BNO   NEWPAG$2                 NO - SKIP THIS STUFF.\n         NI    TFLAG1,255-T1@PAGE1      TURN OFF FLAG\n         MVC   HEADER2+1(28),HEADER2    BLANK IT OUT\n         TM    TFLAG1,T1@PARM           HAVE PARM FIELD?\n         BNO   NEWPAG$4                 NO - SKIP\n         TM    TFLAG2,T2@LPARM          IS IT TOO LONG?\n         BO    NEWPAG$4                 YES - SKIP\n         MVC   HEADER2+1(28),PARM#MSG+1 MOVE IN THE PARM FIELD\n         SPACE 1\nNEWPAG$4 PRTLN HEADER2                  PRINT AUTHOR LINE\n         TM    TFLAG1,T1@PARM           HAVE PARM FIELD?\n         BNO   NEWPAG$2                 NO - DON'T PRINT IT\n         TM    TFLAG2,T2@LPARM          LONG PARM FIELD?\n         BNO   NEWPAG$5                 NO - ALREADY PRINTED       U015\n         PRTLN PARM#MSG                 PRINT IT\nNEWPAG$5 TM    TFLAG1,T1@PERR           ERROR IN PARM FIELD?\n         BNO   NEWPAG$2                 NO - DON'T PRINT IT\n         PRTLN PARMERR,I                PRINT IT                   U022\n         SPACE 1\nNEWPAG$2 LA    R0,DASHES\n*U043    BAL   R14,PUTPRTLN             SEPARATOR LINE\n         L     R1,OPENMFL               -> SYSPRINT DCB            U043\n         PUT   (1),(0)                  separator line             U043\n         PRTLN COLHEAD1,I\n         PRTLN COLHEAD2,I\n         LA    R0,DASHES\n*U043    BAL   R14,PUTPRTLN             SEPARATOR LINE\n         L     R1,OPENMFL               -> SYSPRINT DCB            U043\n         PUT   (1),(0)                  separator line             U043\n         MVI   OUTBUFF,C'0'             DOUBLE SPACE THE FIRST FILEU015\n         LH    R0,LCTR                  get current line count     U043\n         BCTR  R0,0                     ADJUST THE LINE COUNT      U043\n         STH   R0,LCTR                  store updated line count   U043\n         TM    TFLAG2,T2@RQVOL          WRONG VOLUME MOUNTED?      U015\n         BNO   TRYASCII                 NO - SEE IF ASCII SL       U023\n         NI    TFLAG2,255-T2@RQVOL      TURN OFF FLAG NOW          U015\n         MVI   OUTBUFF,C'-'             TRIPLE SPACE               U015\n*U046    MVI   OUTBUFF+41,C'*'          START OF BOX               U015\n*U046    MVC   OUTBUFF+42(49),OUTBUFF+41  REST OF IT               U015\n*U046    PRTLN OUTBUFF                  PRINT TOP OF BOX           U015\n*U046    MVC   OUTBUFF+41(50),=C'* Id of mounted volume differs from id$\n                requested *'            MOVE IN MSG                U015\n         MVI   OUTBUFF+1,C'*'           START OF BOX               U046\n         MVC   OUTBUFF+2(46),OUTBUFF+1  REST OF IT                 U046\n         PRTLN OUTBUFF                  PRINT TOP OF BOX           U015\n*U046    MVC   OUTBUFF+41(50),=C'* Id of mounted volume differs from id$\n                requested *'            MOVE IN MSG                U015\n         MVC   OUTBUFF+1(47),=C'* WARNING:  Your JCL requested volume  $\n               xxxxxx *'                MOVE IN MSG                U046\n         MVC   OUTBUFF+40(6),JFCB+118   fill in JCL volser         U046\n         PRTLN OUTBUFF                  PRINT MSG                  U046\n         MVC   OUTBUFF+1(47),=C'* Internal volser of mounted volume is $\n               xxxxxx *'                MOVE IN MSG                U046\n         MVC   OUTBUFF+40(6),VOLSERNO   fill in actual volser      U046\n         PRTLN OUTBUFF                  PRINT MSG                  U046\n         LH    R0,LCTR                  get current line count     U043\n         SH    R0,=H'2'                 account for triple space   U043\n         STH   R0,LCTR                  store updated line count   U043\n*U046    MVI   OUTBUFF+41,C'*'          START OF BOX               U015\n*U046    MVC   OUTBUFF+42(49),OUTBUFF+41  REST OF IT               U015\n         MVI   OUTBUFF+1,C'*'           START OF BOX               U046\n         MVC   OUTBUFF+2(46),OUTBUFF+1  REST OF IT                 U046\n         PRTLN OUTBUFF                  PRINT BOTTOM OF BOX        U015\n         MVI   OUTBUFF,C'0'             DOUBLE SPACE FIRST FILE    U015\n         SPACE 2\nTRYASCII TM    TFLAG2,T2@ASCII          IS TAPE ASCII SL?          U023\n         BNOR  LINK                     NO - ALL DONE              U023\n         MVI   OUTBUFF,C'-'             TRIPLE SPACE               U023\n         MVI   OUTBUFF+16,C'*'          START OF BOX               U023\n         MVC   OUTBUFF+17(24),OUTBUFF+16  REST OF IT               U023\n         PRTLN OUTBUFF                  PRINT TOP OF BOX           U023\n         MVC   OUTBUFF+16(25),=C'* Tape labels are ASCII *'        U023\n         PRTLN OUTBUFF                  PRINT MSG                  U023\n         LH    R0,LCTR                  get current line count     U043\n         SH    R0,=H'2'                 account for triple space   U043\n         STH   R0,LCTR                  store updated line count   U043\n         MVI   OUTBUFF+16,C'*'          START OF BOX               U023\n         MVC   OUTBUFF+17(24),OUTBUFF+16  REST OF IT               U023\n         PRTLN OUTBUFF                  PRINT BOTTOM OF BOX        U023\n         MVI   OUTBUFF,C'0'             DOUBLE SPACE FIRST FILE    U023\n         BR    LINK                     RETURN\n         SPACE 3\n         LTORG ,                                                   U043\n         SPACE 3\nPRTLN    SUBINIT  ,                                                U043\n         LA    R0,OUTBUFF               POINT TO OUTPUT LINE\n*U043    BAL   R14,PUTPRTLN             WRITE OUTPUT LINE\n         L     R1,OPENMFL               -> SYSPRINT DCB            U043\n         PUT   (1),(0)                  write output line          U043\n         MVC   OUTBUFF,OUTCLEAR         CLEAR OUTPUT LINE\n         LH    R15,LCTR                 get current line count     U043\n         SH    R15,=H'1'                decrement                  U043\n         STH   R15,LCTR                 store updated line count   U043\n         BP    PRTLNRET                 return if more lines left  U043\n         NEWPAGE ,                      DO A NEW PAGE\nPRTLNRET SUBEXIT  ,                     RETURN TO CALLER           U043\n         SPACE 2\nPUTPRTLN L     R1,OPENMFL               -> SYSPRINT DCB\n         PUT   (1),(0)                  WRITE OUTPUT LINE\n         ORG   *-2                      BACK OVER BALR\n         BR    R15                      MAKE HIM RETURN TO MY CALLER\n         SPACE 2\n         DROPX LBASE                    PRTLN                      U043\n         LTORG ,                                                   U043\n         SPACE 3\nTAPEMAP  CSECT ,                        resume                     U043\nNEWPAG2C CH    R0,LCTR2                 ENOUGH LINES LEFT?         U023\n         BLR   LINK                     YES - JUST RETURN\n         SPACE 1\nNEWPAG2  LA    R0,HEADER1               GET RECORD ADDR\n*U043    BAL   R14,PUTPRNT2+4           WRITE IT OUT\n         L     R1,OPENMFL2              -> SYSPRNT2 DCB            U043\n         PUT   (1),(0)                  write it out               U043\n         LA    R0,DASHES\n*U043    BAL   R14,PUTPRNT2+4           WRITE IT OUT\n         L     R1,OPENMFL2              -> SYSPRNT2 DCB            U043\n         PUT   (1),(0)                  write it out               U043\n         MVC   LCTR2,LINECNT            RESET LINE COUNTER         U023\n         BR    LINK                     RETURN TO CALLER\n         SPACE 3\nPRTLN2   SUBINIT  ,                                                U043\n         LA    R1,3                     ASSUME TRIPLE SPACE\n         CLI   OUTBUFF2,C'-'            IS IT?\n         BE    P2$OK                    YES\n         BCTR  R1,0                     ASSUME DOUBLE SPACE\n         CLI   OUTBUFF2,C'0'            IS IT?\n         BE    P2$OK                    YES\n         BCTR  R1,0                     ASSUME SINGLE SPACE\n         CLI   OUTBUFF2,C' '            IS IT?\n         BE    P2$OK                    YES\n         MVI   OUTBUFF2,C' '            MAKE A BLANK\n         SPACE 1\nP2$OK    LH    R14,LCTR2                GET SYSPRNT2 LINE COUNT    U023\n         SR    R14,R1                   DECR LINE COUNT            U023\n         STH   R14,LCTR2                SAVE UPDATED COUNT         U023\n         BP    P2$GO                    CONTINUE IF OK\n         NEWPAGE  ,2                    SET NEW PAGE\n         MVI   OUTBUFF2,C'-'            TRIPLE SPACE FIRST LINE    U013\n         LH    R14,LCTR2                GET SYSPRNT2 LINE COUNT    U023\n         SH    R14,=H'3'                ACCOUNT FOR IT             U023\n         STH   R14,LCTR2                SAVE UPDATED COUNT         U023\n         SPACE 1\nP2$GO    BAL   R14,PUTPRNT2             WRITE OUTPUT LINE\n         MVC   OUTBUFF2,OUTCLR2         CLEAR OUTPUT LINE\n         SUBEXIT  ,                     RETURN TO CALLER           U043\n         SPACE 3\nPUTPRNT2 LA    R0,OUTBUFF2              GET RECORD ADDR\n         L     R1,OPENMFL2              -> SYSPRNT2 DCB\n         PUT   (1),(0)                  WRITE IT OUT\n         ORG   *-2                      BACK OVER BALR\n         BR    R15                      MAKE HIM RETURN TO MY CALLER\n         SPACE 2\n         DROPX LBASE                    PRTLN2                     U043\n         LTORG ,                                                   U043\n         SPACE 3\nTAPEMAP  CSECT ,                        resume                     U043\n         SPACE 3\nPRT$EXIT DCBEXIT  BLKSIZE=6118,BUFNO=1                             U021\n         SPACE 6\n         LTORG ,\n         EJECT\n*  REGISTERS USED IN ROUTINES TO LIST IEHMOVE & IEBCOPY UNLOADED MEMBRS\nBLEN     EQU   R2      *PAIR*           BLOCK LENGTH LEFT\nBPTR     EQU   R3      *PAIR*           -> CURRENT POS IN BLOCK\nDLEN     EQU   R4                       DIRBLK OR DATA LENGTH LEFT\nDPTR     EQU   R5                       -> CURRENT POS IN BLOCK\nPPTR     EQU   R6                       -> POS IN PRINT LINE\n         SPACE 1\n*  OTHER MISC REGISTERS\nLBASE    EQU   R7                       LOCAL SUBROUTINE BASE      U021\nLINK     EQU   R9                       INTERNAL LINKAGE REGISTER  U023\n         SPACE 1\nCC       EQU   X'40'                    COMMAND CHAINING\nSLI      EQU   X'20'                    SUPPRESS INCORR LENGTH INDIC.\nRD       EQU   X'02'                    OPCODE FOR READ\n         SPACE 1\nBUFFSIZE EQU   65535                    SIZE OF TAPE BUFFER        U032\n         SPACE 2\nOPENMFL2 OPEN  (SYSPRNT2,OUTPUT),MF=L\nOPENMFL  OPEN  (SYSPRINT,OUTPUT),MF=L\nOPENMFLI OPEN  SYSIN,MF=L\nTAPEMFL  OPEN  TAPEDCB,MF=L\n         SPACE 1\nEXLST    DC    A(0)\nPRTEXLST DC    X'85',AL3(PRT$EXIT)\n         SPACE 2\nTAPEECB  DC    A(0)\nTAPEIOB  DC    X'42000000'              IOBFLAG1 (SET FOR CMD CHAINING)\n         DC    A(TAPEECB)               ECB ADDR\nIOBCSW   DC    2F'0'                    CSW\n         DC    A(0)                     CHANNEL PGM ADDR\n         DC    A(TAPEDCB),A(0)          DCB ADDR\n         DC    H'1',H'0'                TAPE BLOCK COUNT INCREMENT\n         SPACE 1\nTCCW#FSF CCW   X'3F',0,0,1              FORWARD SPACE FILE\n         SPACE 1\nTCCW#L1  CCW   RD,*-*,00,80             READ BLOCK INTO FL1LABI    U021\nTCCW#L2  CCW   RD,*-*,00,80             READ BLOCK INTO FL2LABI    U021\nTCCW#BSB CCW   X'27',0,0,1              BACK SPACE BLOCK           U033\n         SPACE 1\nTCCW#DAT CCW   RD,*-*,SLI,BUFFSIZE      READ DATA BLOCK\n         SPACE 1\nTCCW#RWD CCW   X'07',0,0,1              REWIND THE TAPE\n         SPACE 1\nTCCW#SNS CCW   X'04',SENSDATA,SLI,24    READ SENSE DATA\n         SPACE 2\nSENSDATA DC    XL24'00'                 SENSE DATA BUFFER\n         SPACE 2\nTFLAG1   DC    X'00'                    FLAGS\nT1@PARM  EQU   X'80'                    HAVE PARM FIELD\nT1@PERR  EQU   X'40'                    ERROR IN PARM FIELD\nT1@PAGE1 EQU   X'20'                    THIS IS FIRST TITLE GROUP\nT1@BADEN EQU   X'10'                    DENSITY ERROR IN TAPE LABEL(S)\nT1@SL    EQU   X'08'                    THIS TAPE IS SL\nT1@ANLZ  EQU   X'04'                    PARM=CHECK OR NL TAPE\nT1@MVEOF EQU   X'02'                    IEHMOVE2 HAS READ TILL EOF\nT1@DATA  EQU   X'01'                    HAVE INPUT DATA\n         SPACE 1\nTFLAG2   DC    X'00'                    MORE\nT2@RQVOL EQU   X'80'                    REQUESTED VOL MISMATCH\nT2@LPARM EQU   X'40'                    PARM FIELD LONGER THAN 21 CHARS\nT2@PRT2  EQU   X'20'                    SECOND PRINT FILE IN USE\nT2@DOSTP EQU   X'10'                    FILE HAS NO HDR2/EOF2      U021\nT2@FDROV EQU   X'08'                    FDR FILE HAS OVERFLOW MSG  U022\nT2@ASCII EQU   X'04'                    TAPE IS ASCII SL           U023\nT2@HDRDF EQU   X'02'                    HDR/EOF LABELS DON'T MATCH U025\nT2@HDRBK EQU   X'01'                    HDR FIELDS BLANK           U030\n         SPACE 1\nTFLAG3   DC    X'00'                    MORE                       U046\nT3@DSSBO EQU   X'01'                    DSS BITMAP OVERFLOW        U046\n         SPACE 1\nNLFLAGS  DC    X'00'                    NON-LABELLED TAPE FLAGS\nNL@V     EQU   X'80'                    RECFM=V\nNL@F     EQU   X'40'                    RECFM=F\nNL@CHANG EQU   X'20'                    BLOCKSIZE HAS CHANGED\n         SPACE 1\nPARMFLGS DC    0XL2'00'                 PARM FLAGS                 U020\nPARMFLG1 DC    X'00'\n*        EQU   X'80'                    (CURRENTLY UNUSED)         U020\nP1@INLIN EQU   X'40'                    INLINE\nP1@NOMEM EQU   X'20'                    NOMEMBERS (NOMEM)\n*        EQU   X'10'                    (CURRENTLY UNUSED)         U020\nP1@NATTR EQU   X'08'                    NOATTR\nP1@SCAN  EQU   X'04'                    SCAN                       U020\nP1@CHECK EQU   X'02'                    CHECK\nP1@NL    EQU   X'01'                    NL\n         SPACE 1\nPARMFLG2 DC    X'00'                                               U020\nP2@TEST  EQU   X'80'                    TEST                       U020\nP2@DEN1  EQU   X'40'                    DEN1                       U020\nP2@NONOT EQU   X'20'                    NONOTE                     U020\nP2@JDATE EQU   X'10'                    JDATE                      U027\nP2@GDATE EQU   X'08'                    GDATE                      U028\n*        EQU   X'04'                    (CURRENTLY UNUSED)         U020\nP2@PCT   EQU   X'02'                    PCT/PERCENT                U046\nP2@FEET  EQU   X'01'                    FEET                       U046\n         SPACE 2\nIEBCOPY  DC    C'IEBCOPY'\nIEHMOVE  DC    C'IEHMOVE'\nIEBISAM  DC    C'IEBISAM'\nIEHDASDR DC    C'IEHDASDR'\nIEBUPDTE DC    C'IEBUPDTE'\nFDR      DC    C'FDR'\nDSS      DC    C'DSS'                                              U034\n         SPACE 2\n         DC    C' '                     FOR CLEARING \"UNLOADER\"\nUNLOADER DC    CL9' '             /   /IEBCOPY/IEHMOVE/IEBISAM/IEHDASDR\nC00080   DC    C'00080'\n         ORG   C00080+1\nC00800   DC    C'00800'\nRET#ADDR DC    A(EOD2)                  RETURN ADDR\n* Density in BPI, binary, char, IBG length in .01 inches, TM len   U037\nDEN#LIST DC    F'0200',C' 200',F'60',F'375'                        U037\nDEN#TBLL EQU   *-DEN#LIST               length of a table entry    U037\n         DC    F'0556',C' 556',F'60',F'375'                        U037\n         DC    F'0800',C' 800',F'60',F'375'                        U037\n         DC    F'1600',C'1600',F'60',F'375'                        U037\n         DC    F'6250',C'6250',F'30',F'375'                        U037\nDEN#3480 DC    F'37871',C' 38K',F'08',F'13'                        U046\nNULLNUMB DC    H'0'                     # OF NULL FILES TO SKIP    U014\nNUMBNULL DC    H'0'                     # OF NULL FILES / THIS TAPEU014\nLINECNT  DC    Y(60-2)                  # OF LINES/PAGE - 2 TITLES U024\nWHERE    DC    X'00'                    WHERE-WE-ARE FLAG\n         SPACE 1\nHEXTAB   HEXTAB  DUAL=NO\n         SPACE 1\nASCIITAB CHARTAB  TYPE=FROM-ASCII,FILL='?'                         U023\n         SPACE 2\nHEADER1  DC    C'1VOL=xxxxxx  Owner=xxxxxxxxxx       TAPEMAP -- Tape An$\n               alysis Program         DAYDAYDAY  MON DD, 19yy  (yy.ddd)$\n                 HH:MM:SS            '                             U037\nTTL1TIME EQU   *-21                                                U037\nTTL1DATE EQU   TTL1TIME-23\nTTL1DAY  EQU   TTL1DATE-11\n         SPACE 2\nHEADER2  DC    C'                                    Copyright (c) Leon$\n               ard D. Woren    Version=048<23Dec90>  assembled on      $\n                                     '                             U044\n         SPACE 2\nPARMERR  DC    C' Unknown parm option at col=xxx.  Any remaining parm i$\n               gnored.'\n         SPACE 1\nFVOL#MSG DC    C' *** This is volume # xxxx of the above multiple volum$\n               e file.  First volume was xxxxxx.'\n         SPACE 1\nLENWARN  DC    C'        Lengths for recfms other than f,fb,etc may not$\n                be very close to the true length.'                 U022\n         SPACE 1\nDENWARN  DC    C'0Note:  Length(s) are computed, (based on blksize, blk$\n               count, and density), and are therefore only approximate.$\n               '                                                   U022\n         SPACE 1\nINVDEN   DC    C'-*****  One or more files have density indicated incor$\n               rectly in labels.  All files are written at xxxx BPI  **$\n               ***'                                                U022\n         SPACE 1\n* --- New devtab table, includes all values for each type          U039\n*  + 0 = IBM UCBTYP low byte value                                 U039\n*  + 1 = FDR device type character                                 U039\n*  + 2 = H-word # trk/cyl (always non-zero)                        U039\n*  + 4 = CL8 of device name                                        U039\n* Note that IBM uses the same device type for 3380 & 3380E         U039\n*                                                                  U039\n* Some routines that use this table index directly into it, so     U039\n* there must be exactly one entry for each type in the first       U039\n* section.  Duplicate entries can be placed in the second section. U039\nDEVTABX  DC    0D'0'                                               U039\n         DC    X'00',C' ',AL2(01),CL8'unknown '    invalid         U039\nDEVTABXL EQU   *-DEVTABX                entry length               U039\n         DC    X'01',C' ',AL2(01),CL8'2311    '    * OLD *         U039\n         DC    X'02',C' ',AL2(01),CL8'2301    '    * OLD *         U039\n         DC    X'03',C' ',AL2(01),CL8'2303    '    * OLD *         U039\n         DC    X'04',C' ',AL2(01),CL8'2302    '    * OLD *         U039\n         DC    X'05',C' ',AL2(01),CL8'2321    '    * OLD *         U039\n         DC    X'06',C'A',AL2(08),CL8'2305-1  '                    U039\n         DC    X'07',C'C',AL2(08),CL8'2305-2  '                    U039\n         DC    X'08',C'T',AL2(20),CL8'2314    '                    U039\n         DC    X'09',C'X',AL2(19),CL8'3330    '                    U039\n         DC    X'0A',C'U',AL2(12),CL8'3340-35 '                    U046\n         DC    X'0B',C'Z',AL2(30),CL8'3350    '                    U039\n         DC    X'0C',C'N',AL2(12),CL8'3375    '                    U039\n         DC    X'0D',C'Y',AL2(19),CL8'3330-11 '                    U046\n         DC    X'0E',C'M',AL2(15),CL8'3380    '                    U039\n         DC    X'0F',C'F',AL2(15),CL8'3390-1  '                    U046\nDEVTABXM EQU   (*-DEVTABX)/DEVTABXL-1   maximum devtype in table   U039\n*--- Duplicates follow                                             U039\n         DC    X'0A',C'V',AL2(12),CL8'3340-70 '                    U046\n         DC    X'0E',C'L',AL2(15),CL8'3380-E  '                    U046\n         DC    X'0E',C'K',AL2(15),CL8'3380-K  '                    U046\n         DC    X'0E',C'D',AL2(15),CL8'3380-1  '  3390-1 emulation? U046\n         DC    X'0E',C'E',AL2(15),CL8'3380-2  '  3390-2 emulation? U046\n         DC    X'0F',C'G',AL2(15),CL8'3390-2  '                    U046\n         DC    X'85',C'B',AL2(20),CL8'F6421   '                    U046\n         DC    XL4'00'            END OF TABLE                     U039\n         SPACE 2\nFDRFOOT1 DC    C'0Note:  Asterisks in SEC field indicates value over 99$\n               999, and asterisks in TOTAL field indicates value is at $\n               least that size.'                                   U024\n         SPACE 1\nDSSFOOT1 DC    C'0Note:  Bitmap on tape exceeds program''s capabilities$\n                ----- dsname list may not be complete *****'       U034\n         SPACE 1\nHDRFOOT1 DC    C'0Note:  An asterisk after the file sequence number ind$\n               icates header and trailer labels don''t match.  Data pri$\n               nted is from header.'                               U025\n         SPACE 1\nCOLTITLE DC    CL78'DSORG  RECFM  BLKSIZE  LRECL  CDATE  L/USED  EXT   $\n               SEC   ALC     USED    TOTAL'                        U033\n         SPACE 1\nHDRFOOTU DC    C'        An underscored field indicates that field didn$\n               ''t match in header and trailer labels'             U030\n         SPACE 1\nHDRFOOT2 DC    C'0Note:  A number(#) sign after the file sequence numbe$\n               r indicates one or more fields from the header label is($\n               are) blank.'                                        U030\n         EJECT\nWORKD    DSECT                          RESUME\nSTACKEND DS    A(SA@STACK+STACKLEN)     -> last stack element      U043\nDD#PTR   DS    A                        -> DD SECTION OF TIOT\nLEN#TAPE DS    F                        TAPE LENGTH\n         DS    F                        NL LENGTH\nFILE#SEQ DS    H                        NL FILE SEQ #\nLCTR     DS    H                        LINES LEFT/PAGE, SYSPRINT  U043\nLCTR2    DS    H                        LINES LEFT/PAGE, SYSPRNT2  U023\nLINKSAVE DS    A                        %%%\nLINKTPIO DS    A                        %%%\nBOOMREGS DS    16F                      REG SAVE AREA FOR LOGIC ERROR\nNLSTUFF  DS    0F                                                  U046\nMAXBLKSI DS    H                        BIGGEST BLOCK READ SO FAR\nLASTSIZE DS    H                        SIZE OF THE LAST BLOCK READ\nBLOCKCNT DS    F                        # OF BLOCKS READ\nBYTECNT  DS    F                        TOTAL # OF BYTES READ\n*%GAPCNT DS    F                                                   U046\nNLSTUFFL EQU   *-NLSTUFF                                           U046\nDEN@BIN  DS    F       | must           bytes/inch                 U037\nDEN@CHAR DS    CL4     | be             bytes/inch                 U037\nDEN@GAPL DS    F       | together       gap length, in .01 inches  U037\nDEN@TM   DS    F       |                tapemark len in .01 inches U037\nDEN@TRUE DS    C                        density character          U037\n         DS    CL3                      currently wasted           U037\nBITMAP   DS    F                        DF/DSS POINTER TO BITMAP   U034\nBITMAPLN DS    H                        DF/DSS LENGTH OF BITMAP    U034\nDSSVER   DS    C                        DF/DSS VERSION NUMBER      U034\nDSSREL   DS    C                        DF/DSS RELEASE NUMBER      U034\nDSSDEVTY DS    CL8                      DF/DSS DUMP DASD TYPE      U034\nDSSVOLID DS    CL6                      DF/DSS DUMP DASD ID        U034\nDSSDEVSZ DS    0F                       DF/DSS DUMP DASD SIZE      U034\nDSSDEVCC DS    H                        DF/DSS DUMP DASD CYLS      U034\nDSSDEVTT DS    H                        DF/DSS DUMP DASD TRKS/CYL  U034\nDSSLINK  DS    F                        DF/DSS LINK SAVE AREA      U034\nNL#SAVE  DS    0F,XL(NLSTUFFL)          SAVE FOR NL STUFF IF SL    U046\nNL#FLAGX DS    X                        SAME\nUPDT#TYP DS    C                        A,R,C FOR UPDTE\nUNDER    DC    CL17'_'                  UNDER SCORES               U030\nBLANKS   DS    0CL17,CL16' '\nOUTCLEAR DC    C' '                     FOR CLEARING OUTBUFF\nOUTBUFF  DS    CL133\nOUTCLRU  DC    C' '                     FOR CLEARING OUTBUFFU      U030\nOUTBUFFU DS    CL133                                               U030\nOUTCLR2  DC    C' '                     FOR CLEARING OUTBUFF2\nOUTBUFF2 DS    CL133,7C                                            U014\nDASHES   DS    CL133\nINBUFF   DS    CL80\nLABELS   DS    3CL80                    FOR VOL,FL1,FL2\nSAVEHDR1 DS    CL80                     SAVE AREA FOR HEADER 1     U025\nSAVEHDR2 DS    CL80                     SAVE AREA FOR HEADER 2     U025\nMV#ABUF2 DS    A(MV#BUFF2)              ADDR OF SECOND DE-SPANNING BUFF\nMV#BUFF1 DS    CL78                     FIRST DE-SPANNING BUFFER\nMV#BUFF2 DS    CL78                     SECOND DE-SPANNING BUFFER\nPARM#MSG DS    CL110                    FOR PARM\nOB2END   DS    A(OUTBUFF2+110)          ADDR OF END OF OUTBUFF2\nOB2END2  DS    A(OUTBUFF2+110+10)       SAME FOR UPDTE\nDASDRSAV DS    XL24                     FOR HEADER RECORD\nDWD      DS    D\nJFCB     DS    XL176                    DWD ALIGNED\nTRKCYL   DS    F                        TRACKS/CYL                 U022\nTRKTOT   DS    F                        TOTAL TRACKS IN DATASET    U022\nTRKCCHH  DS    XL5                      CCHHR OF NEXT EXTENT       U022\nTTREXMSK DS    X'402021204B'            EDIT MASK FOR CC.TT DISP   U022\n*\n         DS    0D                       alignment?                 U043\nSA@STACK DS    (10*18)F                 10 internal save areas     U043\nSTACKLEN EQU   *-SA@STACK                                          U043\n         DS    18F                      well, ok, 11               U043\n*\n         ORG   WORKD+2048               ALIGN THE BUFFER REAL WELL\nTAPEBUFF DS    CL(BUFFSIZE)             TAPE INPUT DATA BUFFER\nWORKLEN  EQU   *-WORKD\n         SPACE 2\n         ORG   OUTBUFF+1\n#UNLOAD  DS    CL9,1C\n#FILE    DS    CL4\n#MSMATCH DC    C'*'                     HDR/EOF MISMATCH           U025\n#BLKFLD  DC    C'#',C' '                HDR BLANK FIELDS           U030\n#DSN     DS    CL17,2C\n#PSWD    DS    CL1,2C                                              U048\n#CDATE   DS    CL10,C                                              U048\n#EDATE   DS    CL10,2C                                             U048\n#RECFM   DS    CL4,C                                               U048\n#LRECL   DS    CL5,2C\n#BLKSIZE DS    CL5,2C                                              U030\n#BLKCNT  DS    CL6,2C\n#DEN     DS    CL4,3C\n#TRTCH   DS    CL2,C                                               U048\n#LENGTH  DS    CL5,3C\n#CUMLEN  DS    CL5,3C\n#CREATOR DS    CL17\n         SPACE 3\n         ORG   OUTBUFFU+#FILE-OUTBUFF                              U030\n#FILEU   DS    CL4,3C                                              U030\n#DSNU    DS    CL17,2C                                             U030\n#PSWDU   DS    CL1,2C                                              U048\n#CDATEU  DS    CL10,C                                              U048\n#EDATEU  DS    CL10,2C                                             U048\n#RECFMU  DS    CL4,C                                               U048\n#LRECLU  DS    CL5,2C                                              U030\n#BLKSIU  DS    CL5,2C                                              U030\n         ORG   OUTBUFFU+#DEN-OUTBUFF                               U030\n#DENU    DS    CL4,3C                                              U030\n#TRTCHU  DS    CL2,C                                               U048\n         ORG   OUTBUFFU+#CREATOR-OUTBUFF                           U030\n#CREATU  DS    CL17                                                U030\n         SPACE 3\n         ORG   OUTBUFF2+9                                          U022\n#FDSN    DS    CL44,3C                                             U022\n#FDSORG  DS    CL3,5C                                              U022\n#FRECFM  DS    CL4,C                                               U022\n#FBLKSI  DS    CL5,3C                                              U022\n#FLRECL  DS    CL5,3C                                              U022\n#FCDATE  DS    CL5,2C                                              U022\n#FLDATE  DS    CL5,2C                                              U022\n#FEXT    DS    CL2,2C                                              U022\n#FSEC    DS    CL6,3C                                              U022\n#FALC    DS    CL4,C                                               U022\n#FUSED   DS    CL6,3C                                              U022\n#FTOTAL  DS    CL6,3C                                              U022\n         EJECT\n         ORG   LABELS\n         SPACE 2\n         VOL   DSECT=NO\n         FL1   DSECT=NO\n         FL2   DSECT=NO\n         SPACE 2\nTAPEMAP  CSECT                          RESUME                     U021\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*  FORMAT DCB ATTRIBUTES FOR NL TAPE                              U021*\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\nNL$ATTR  SUBINIT  ,                                                U043\n*U047    MVC   NLSTUFF(NLSTUFFL),NL#SAVE  restore info             U046\n*U047    MVC   NLFLAGS,NL#FLAGX         more...                    U046\n         MVI   #RECFM,C'('              SHOW THAT IT'S A GUESS     U021\n         MVI   #RECFM+2,C')'            ...                        U021\n         SPACE 1\n         MVI   #RECFM+1,C'V'            ASSUME RECFM=V             U021\n         TM    NLFLAGS,NL@V             IS IT?\n         BO    NL$ATTR1                 YES - CONTINUE\n         MVI   #RECFM+1,C'F'            ASSUME RECFM=F             U021\n         TM    NLFLAGS,NL@F             IS IT?\n         BO    NL$ATTR1                 YES - CONTINUE\n         MVI   #RECFM+1,C'U'            ANYTHING ELSE IS RECFM=U   U021\n         SPACE 2\nNL$ATTR1 XR    R0,R0                    CLEAR FOR ICM              U032\n         ICM   R0,B'0011',MAXBLKSI      GET SIZE OF LARGEST BLOCK  U032\n         CVD   R0,DWD\n         MVC   #BLKSIZE,=X'2020202120'                             U030\n         ED    #BLKSIZE-1(L'#BLKSIZE+1),DWD+5                      U030\n         SPACE 1\n         MVC   #LRECL(5),=C'?????'                                 U021\n         SPACE 1\n         L     R0,BLOCKCNT              GET BLOCK COUNT\n         CVD   R0,DWD\n         MVC   #BLKCNT-1(7),=X'20202020202120'\n         ED    #BLKCNT-2(8),DWD+4\n         SPACE 1\n         MVC   #DEN+1(1),DEN@TRUE                                  U037\n         TM    PARMFLG2,P2@DEN1                                    U020\n         BO    *+10\n         MVC   #DEN,DEN@CHAR                                       U037\n         SPACE 1\n         L     R15,BLOCKCNT             COUNT # OF GAPS\n         L     R1,BYTECNT\n         M     R1-1,=F'100'             SCALE\n         D     R1-1,0(,R14)             DIVIDE BY BYTES/INCH\n         AH    R1,=Y(375)               ADD 1 TAPEMARK\n         TM    TFLAG1,T1@SL             REALLY SL?\n         BNO   NL$ATTR2                 NO - SKIP                  U021\n         AH    R1,=Y(2*375)             YES - 2 MORE TAPEMARKS\n         LA    R15,2(,R15)              INCR # OF GAPS             U021\n         TM    TFLAG2,T2@DOSTP          DOS LABELS?                U021\n         BO    *+8                      YES - ONLY 2 LABELS        U021\n         LA    R15,2(,R15)              INCR # OF GAPS             U021\nNL$ATTR2 M     R15-1,DEN@GAPL           multiply by gap length     U037\n         AR    R1,R15                   ADD IN LENGTH OF GAPS\n         LR    R2,R1                    SAVE\n         ICALL TAPE_LEN,R14,R15=#LENGTH-1\n         A     R2,LEN#TAPE+4\n         ST    R2,LEN#TAPE+4\n         LR    R1,R2                    COPY FOR SUBROUTINE\n         ICALL TAPE_LEN,R14,R15=#CUMLEN-1\n         SPACE 2\n         PRTLN OUTBUFF\n         CLI   UNLOADER,C' '            ANY SECOND PRINT LINE?\n         BE    NLA$RET                  NO - ALL DONE              U043\n         TM    PARMFLG1,P1@INLIN        PARM=INLINE?\n         BNO   NLA$RET                  NO - NO SECOND LINE        U043\n         PRTLN OUTBUFF2\n         MVC   OUTBUFF2,OUTCLR2\nNLA$RET  SUBEXIT  ,                     RETURN TO CALLER           U043\n         DROPX LBASE                    NL$ATTR                    U021\n         SPACE 2\n         LTORG ,                                                   U021\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*  INITIALIZATION CODE                                            U014*\n*                                                                     *\n*---------------------------------------------------------------------*\nINIT     SUBINIT  ,                                                U043\n         MVI   BLANKS,C' '\n         MVC   BLANKS+1(L'BLANKS+L'OUTBUFF),BLANKS  GET OUTBUFF ALSO\n         MVI   OUTCLEAR,C' '            CLEAR IT                   U030\n         MVC   OUTCLR2(L'OUTBUFF2),OUTCLEAR                        U030\n         MVI   OUTCLRU,C' '             CLEAR IT                   U030\n         MVC   OUTBUFFU,OUTCLRU                                    U030\n         MVI   OUTBUFFU,C'+'            OVER PRINT                 U030\n         MVI   DASHES,C' '              SET CC                     U021\n         MVI   DASHES+1,C'-'\n         MVC   DASHES+2(L'DASHES-2),DASHES+1\n         MVI   UNDER,C'_'                                          U030\n         MVC   UNDER+1(L'UNDER-1),UNDER FILL                       U030\n         MVC   HEADER2+105(13),TAPEMAP+14 fill in asm date & time  U037\n         MVC   PARM#MSG+1(L'PARM#MSG-1),PARM#MSG\n         MVC   TTREXMSK,=X'402021204B'  INSERT DEFAULT EDIT MASK   U022\n         XC    JFCB(176),JFCB\n         LA    R0,JFCB\n         ST    R0,EXLST\n         MVI   EXLST,X'87'\n         LA    R0,TAPEBUFF              GET ADDR OF DATA BUFFER\n         STCM  R0,B'0111',TCCW#DAT+1    SET INTO CCW               U021\n         LA    R1,FL1LABI               GET LABEL BUFFER ADDR\n         STCM  R1,B'0111',TCCW#L1+1     SET IN CCW                 U021\n         LA    R0,FL2LABI               GET LABEL BUFFER ADDR\n         STCM  R0,B'0111',TCCW#L2+1     SET IN CCW                 U021\n         LA    R1,MV#BUFF2              GET 2ND BUFFER ADDR\n         ST    R1,MV#ABUF2              SAVE\n         LA    R0,OUTBUFF2+110          GET ADDR OF END OF OUTBUFF2\n         ST    R0,OB2END                SAVE FOR FUTURE REFERENCE\n         LA    R0,OUTBUFF2+110+10       FOR UPDTE STUFF\n         ST    R0,OB2END2\n         SPACE 2\n         OPEN  MF=(E,OPENMFL)           OPEN PRINT FILE\n         L     R1,OPENMFL               -> SYSPRINT DCB\n         TM    48(R1),X'10'             OPEN?\n         BO    PRINTOK                  YES\n         LA    R1,100                   GET ABEND CODE\n         SVC   13                       AND LEAVE\n         SPACE 2\nPRINTOK  LH    R15,0(,R2)               GET PARM LEN\n         LTR   R15,R15                  ANY?\n         BNP   DONEPARM                 NO\n         LA    R14,2(,R2)               SET ADDR OF FIRST ITEM\n         LR    R0,R14                   SAVE IT\n         MVC   PARM#MSG(8),=C' PARM='' '\n         MVC   PARM#MSG+8(L'PARM#MSG-8),PARM#MSG+7   BLANK THE REST\n         CH    R15,=H'21'               PARM TOO LONG FOR \"HEADER2\"?\n         BNH   *+8                      NO - SKIP\n         OI    TFLAG2,T2@LPARM          YES - SET FLAG\n         EX    R15,MVCPARM              SAVE PARM IN PARM#MSG\n         LA    R1,PARM#MSG+7(R15)       GET ADDR OF END+1\n         MVI   0(R1),C''''              PUT IN ENDING QUOTE\n         OI    TFLAG1,T1@PARM           SET \"HAVE PARM\" FLAG\n         SPACE 2\nNEXTPARM LM    R1,R3,=A(PARMTAB,PARMTABL,PARMLAST)  GET BXLE REGS  U020\nTESTPARM LH    R4,0(,R1)                GET LENGTH-1 OF ITEM\n         EX    R4,CLCPARM               THIS IT?\n         BNE   INCRPARM                 NO - TRY NEXT\n         OC    PARMFLGS,2(R1)           TURN ON BITS               U020\n         LA    R14,2(R14,R4)            INCR SCAN PTR\n         SR    R15,R4                   DECR LENGTH LEFT\n         SH    R15,=H'2'\n         BP    NEXTPARM                 LOOP IF ANY MORE\n         B     DONEPARM                 DONE...\n         SPACE 2\nNULLPARM BAL   LINK,NUMBPARM            CONVERT NUMERIC OPERAND    U024\n         STH   R1,NULLNUMB              SAVE                       U024\n         LTR   R15,R15                  ANY MORE PARM?             U024\n         BP    NEXTPARM                 YES - GO PROCESS           U024\n         B     DONEPARM                 NO                         U024\n         SPACE 2\nLINEPARM BAL   LINK,NUMBPARM            CONVERT NUMERIC OPERAND    U024\n         SH    R1,=H'2'                 ACCOUNT FOR 2 TITLE LINES  U024\n         STH   R1,LINECNT               SAVE                       U024\n         LTR   R15,R15                  ANY MORE PARM?             U024\n         BP    NEXTPARM                 YES - GO PROCESS           U024\n         B     DONEPARM                 NO                         U024\n         SPACE 2\nNUMBPARM SR    R15,R4                   DECR LENGTH LEFT           U024\n         BNP   DONEPARM                 NOTHING LEFT               U014\n         AR    R14,R4                   POINT TO OPERAND           U024\n         SR    R1,R1                    CLEAR ACCUMULATOR          U014\n         SPACE 1\nNUMBLOOP CLI   0(R14),C'0'              DIGIT?                     U024\n         BL    HAVENUMB                 NO - HAVE COMPLETE NUMBER  U024\n         IC    R0,0(,R14)               GET A DIGIT                U014\n         N     R0,=F'15'                STRIP IT                   U020\n         MH    R1,=H'10'                SHIFT PREVIOUS             U014\n         AR    R1,R0                    ADD NEW                    U014\n         LA    R14,1(,R14)              BUMP SCAN PTR              U014\n         BCT   R15,NUMBLOOP             CONT FOR LENGTH OF PARM    U024\n         SPACE 2\nHAVENUMB LA    R14,1(,R14)              BUMP SCAN PTR              U024\n         BCTR  R15,0                    DECR LENGTH LEFT           U024\n         BR    LINK                     RETURN TO CALLER           U024\n         SPACE 2\nINCRPARM BXLE  R1,R2,TESTPARM           KEEP LOOKING\n*  DIDN'T FIND IT IN TABLE\n         LA    R4,4+1                   SET KEYWORD LENGTH         U024\n         CLC   =C'NULL=',0(R14)         SPECIAL KIND?              U014\n         BE    NULLPARM                 YES - PROCESS IT           U014\n         LA    R4,7+1                   SET KEYWORD LENGTH         U024\n         CLC   =C'LINECNT=',0(R14)      SPECIAL KIND?              U024\n         BE    LINEPARM                 YES - PROCESS IT           U024\n         LA    R4,2+1                   SET KEYWORD LENGTH         U024\n         CLC   =C'LC=',0(R14)           SPECIAL KIND?              U024\n         BE    LINEPARM                 YES - PROCESS IT           U024\n*  INVALID PARM ITEM\n         SR    R14,R0                   COMPUTE OFFSET INTO PARM\n         LA    R14,1(,R14)              FIX IT\n         CVD   R14,DWD                  CONVERT TO PACKED\n         L     R14,=A(PARMERR)          -> PARMERR MSG             U022\n         UNPK  28(3,R14),DWD+6(2)       PUT INTO MSG               U022\n         OI    30(R14),C'0'             FIX SIGN                   U022\n         OI    TFLAG1,T1@PERR           SET \"PARM ERROR\" FLAG\n         SPACE 3\nDONEPARM MVC   LCTR,=H'60'              INIT LINECOUNTER           U043\n         SPACE 2\n         TODAY TTL1DATE,PUNCT=NO,WEEKDAY=TTL1DAY,TIME=TTL1TIME     U020\n         SPACE 2\n         L     R1,16                    -> CVT\n         L     R1,0(,R1)                -> TCBWORDS\n         L     R1,4(,R1)                -> TCB\n         L     R1,12(,R1)               -> TIOT\n         LA    R1,24(,R1)               -> DD SECTION\n         ST    R1,DD#PTR                SAVE PTR\n         SPACE 1\n         TM    PARMFLG1,P1@INLIN+P1@NATTR PARM=INLINE OR NOATTR?\n         BNZ   OK$PRT2                  YES - SKIP SECOND PRINT FILE\n         L     R2,OPENMFL2              -> SYSPRNT2 DCB\n         ICALL TIOTSCAN,LINK,R15=40(,R2) SEE IF WE HAVE IT\n         B     OK$PRT2                  NOPE\n         SPACE 1\n         OPEN  MF=(E,OPENMFL2)          OPEN SECOND PRINT FILE\n         OI    TFLAG2,T2@PRT2           ASSUME IT WORKS.\n         TM    DCBOFLGS-IHADCB(R2),DCBOFOPN  DID IT OPEN?          U025\n         BO    OK$PRT2                  YES\n         SPACE 2\nABEND99  LA    R1,99                    GET ABEND CODE\n         SVC   13                       BYE\n         SPACE 2\nOK$PRT2  L     R2,OPENMFLI              -> SYSIN DCB\n         ICALL TIOTSCAN,LINK,R15=40(,R2) SEE IF IT'S THERE\n         B     RDJFCB                   NOPE\n         MVC   RET#ADDR,=A(READCARD)    SET RETURN ADDR\n         SPACE 2\n         OPEN  MF=(E,OPENMFLI)          OPEN INPUT FILE\n         TM    48(R2),X'10'             OPEN?\n         BZ    ABEND99                  NO.  (THIS SHOULD NEVER HAPPEN)\n         MVI   OPENMFL,0                SET TO CLOSE BOTH FILES\n         SUBEXIT  ,                     GO START MAIN PROCESSING   U043\n         SPACE 2\nMVCPARM  MVC   PARM#MSG+7(0),0(R14)     << EXECUTED >>\nCLCPARM  CLC   4(*-*,R1),0(R14)         << EXECUTED >>             U020\n         SPACE 2\n         LTORG ,                                                   U014\n         SPACE 2\n         DROPX LBASE                                               U021\n         EJECT\nPARMTAB  PARMTAB  TEST,(0,P2@TEST)                                 U032\nPARMTABL EQU   *-PARMTAB                                           U020\n         PARMTAB  INLINE,(P1@INLIN,0)                              U032\n         PARMTAB  NOMEMBERS,(P1@NOMEM,0)                           U032\n         PARMTAB  NOMEM,(P1@NOMEM,0)                               U032\n         PARMTAB  DEN1,(0,P2@DEN1)                                 U032\n         PARMTAB  NOATTR,(P1@NATTR,0)                              U032\n         PARMTAB  NONOTE,(0,P2@NONOT)                              U032\n         PARMTAB  CHECK,(P1@CHECK,0)                               U032\n         PARMTAB  SCAN,(P1@SCAN,0)                                 U032\n         PARMTAB  JDATE,(0,P2@JDATE)                               U032\n         PARMTAB  GDATE,(0,P2@GDATE)                               U032\n         PARMTAB  PERCENT,(0,P2@PCT)                               U046\n         PARMTAB  PCT,(0,P2@PCT)                                   U046\n         PARMTAB  FEET,(0,P2@FEET)                                 U046\nPARMLAST PARMTAB  NL,(P1@NL,0)                                     U032\n         SPACE 2\nDAYS     DAYS  LEFT\nMONTHS   MONTHS\n         SPACE 2\nBIGSTUFF CSECT ,                                                   U043\n         SPACE 2\nTAPEDCB  DCB   DSORG=PS,MACRF=E,DDNAME=SYSUT1,DEVD=TA,EXLST=EXLST,     $\n               IOBAD=TAPEIOB\n         SPACE 2\nSYSIN    DCB  DSORG=PS,MACRF=GM,DDNAME=SYSIN,LRECL=80,EODAD=EOD,BUFNO=1\n         SPACE 2\nSYSPRINT DCB   DSORG=PS,MACRF=PM,DDNAME=SYSPRINT,LRECL=133,            $\n               RECFM=FBA,EXLST=PRTEXLST\n         SPACE 2\nSYSPRNT2 DCB   DSORG=PS,MACRF=PM,DDNAME=SYSPRNT2,LRECL=133,            $\n               RECFM=FBA,EXLST=PRTEXLST\n         SPACE 3\nCOLHEAD1 DC    C' Unloaded  File                         Creation   Exp$\n               iration              Block  Blocks            Length  To$\n               tal       Creator      '                            U048\n         SPACE 1\nCOLHEAD2 DC    C' by / for  seq#   Dataset name      PW    date        $\n               date    Recfm Lrecl   size   used   Den   Trt (feet)  le$\n               ngth  Job name/Stepname'                            U048\n         SPACE 2\n         AIF   (&MVS).MVS04                                        U020\n         EJECT\nERR#LIST DC    0F'0'                                               U015\n*                                                                  U015\n*  ERROR MSGS FOR EACH SENSE BIT FOR 3420 TAPE DRIVES              U015\n*                                                                  U015\n         SPACE 1\n*** BYTE 0                       BIT                               U015\n         DC    C'CMD REJ   '      0     80                         U015\n         DC    C'INT REQ   '      1     40                         U015\n         DC    C'BUS OUT CK'      2     20                         U015\n         DC    C'EQC CHK   '      3     10                         U015\n         DC    C'DATA CHK  '      4     08                         U015\n         DC    C'OVERRUN   '      5     04                         U015\n         DC    C'WORD CNT 0'      6     02                         U015\n         DC    C'DATA CNVTR'      7     01                         U015\n         SPACE 1\n*** BYTE 1                       BIT                               U015\n         DC    C'NOISE     '      0     80                         U015\n         DC    C'SEL+RDY+NB'      1     40                         U015\n         DC    C'NOT READY '      2     20                         U015\n         DC    C'7 TRK FEAT'      3     10                         U015\n         DC    C'@ LOAD PT '      4     08                         U015\n         DC    C'WRITE STAT'      5     04                         U015\n         DC    C'FILE PROT '      6     02                         U015\n         DC    C'NOT CAPABL'      7     01                         U015\n         SPACE 1\n*** BYTE 2                       BIT                               U015\n         DC    C'TIE BIT 0 '      0     80                         U015\n         DC    C'TIE BIT 1 '      1     40                         U015\n         DC    C'TIE BIT 2 '      2     20                         U015\n         DC    C'TIE BIT 3 '      3     10                         U015\n         DC    C'TIE BIT 4 '      4     08                         U015\n         DC    C'TIE BIT 5 '      5     04                         U015\n         DC    C'TIE BIT 6 '      6     02                         U015\n         DC    C'TIE BIT 7 '      7     01                         U015\n         SPACE 1\n*** BYTE 3                       BIT                               U015\n         DC    C'R/W VRC   '      0     80                         U015\n         DC    C'MT/LRC    '      1     40                         U015\n         DC    C'SKEW      '      2     20                         U015\n         DC    C'END DC/CRC'      3     10                         U015\n         DC    C'ENV/ECC   '      4     08                         U015\n         DC    C'1600 BPI  '      5     04                         U015\n         DC    C'BACKWARD  '      6     02                         U015\n         DC    C'C/P COMPAR'      7     01                         U015\n         SPACE 1\n*** BYTE 4                       BIT                               U015\n         DC    C'MP H E    '      0     80                         U015\n         DC    C'DROP READY'      1     40                         U015\n         DC    C'TAPE INDIC'      2     20                         U015\n         DC    C'W T VRC   '      3     10                         U015\n         DC    C'MICROPGM  '      4     08                         U015\n         DC    C'LWR       '      5     04                         U015\n         DC    C'UNIT CHECK'      6     02                         U015\n         DC    C'RSRVD RPQ '      7     01                         U015\n         SPACE 1\n*** BYTE 5                       BIT                               U015\n         DC    C'NEW SUBSYS'      0     80                         U015\n         DC    C'NEW SUBSYS'      1     40                         U015\n         DC    C'WTM CHECK '      2     20                         U015\n         DC    C'ID BURST  '      3     10                         U015\n         DC    C'START READ'      4     08                         U015\n         DC    C'PART''L REC'     5     04                         U015\n         DC    C'POSTAMBLE '      6     02                         U015\n         DC    C'RSRVD RPQ '      7     01                         U015\n         SPACE 1\n*** BYTE 6                       BIT                               U015\n         DC    C'7 TRK UNIT'      0     80                         U015\n         DC    C'WRT CURR  '      1     40                         U015\n         DC    C'DUAL DEN  '      2     20                         U015\n         DC    C'NOT 1600  '      3     10                         U015\n         DC    C'MOD 4,6,8 '      4     08                         U015\n         DC    C'MD 5,6,7,8'      5     04                         U015\n         DC    C'MOD 3,4   '      6     02                         U015\n         DC    C'MD 3,4,7,8'      7     01                         U015\n         SPACE 1\n*** BYTE 7                       BIT                               U015\n         DC    C'LAMP FAIL '      0     80                         U015\n         DC    C'BOTM LEFT '      1     40                         U015\n         DC    C'BOTM RIGHT'      2     20                         U015\n         DC    C'RESET KEY '      3     10                         U015\n         DC    C'DSE       '      4     08                         U015\n         DC    C'ERASE HEAD'      5     04                         U015\n         DC    C'AIR BEARNG'      6     02                         U015\n         DC    C'LOAD FAIL '      7     01                         U015\n         SPACE 1\n*** BYTE 8                       BIT                               U015\n         DC    C'IBG       '      0     80                         U015\n         DC    C'SPARE ?   '      1     40                         U015\n         DC    C'SPARE ?   '      2     20                         U015\n         DC    C'EARLY READ'      3     10                         U015\n         DC    C'CTL BURST '      4     08                         U015\n         DC    C'SLOW RD B '      5     04                         U015\n         DC    C'SLOW RD E '      6     02                         U015\n         DC    C'VELOCITY  '      7     01                         U015\n         SPACE 1\n*** BYTE 9                       BIT                               U015\n         DC    C'6250 CORR '      0     80                         U015\n         DC    C'WRT VEL CH'      1     40                         U015\n         DC    C'CHAN BUFF '      2     20                         U015\n         DC    C'CRC III   '      3     10                         U015\n         DC    C'6250 FEAT '      4     08                         U015\n         DC    C'SPARE ?   '      5     04                         U015\n         DC    C'SPARE ?   '      6     02                         U015\n         DC    C'TCU RSRVD '      7     01                         U015\n.MVS04   ANOP                                                      U020\n         SPACE 2\n*        DCBD  DEVD=TA,DSORG=PS                                    U025\nIHADCB   DSECT ,                                                   U025\n         ORG   IHADCB+17                                           U025\nDCBDEVT  DS    B                                                   U037\nDCBDVMT4 EQU   X'80'                    3480                       U037\n         ORG   IHADCB+40                                           U025\nDCBDDNAM DS    CL8                      DDNAME                     U025\n         ORG   IHADCB+42                                           U025\nDCBMACRF DS    2X                       MACRO FORMAT (AFTER OPEN)  U025\nDCBMRABC EQU   X'04'                    BLOCK COUNT NOT MAINTAINED U025\nDCBDEBAD DS    A                        -> DEB                     U025\nDCBOFLGS DS    X                        OPEN FLAGS                 U025\nDCBOFOPN EQU   X'10'                    OPEN BIT                   U025\n         SPACE 2\n         END   TAPEMAP\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT181/FILE181.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT181", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}