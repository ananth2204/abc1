{"INMR01": {"INMLRECL": 80, "INMFNODE": "BVOMM", "INMFUID": "RLRICE", "INMTNODE": "BVOMM", "INMTUID": "RLRICE", "INMFTIME": "20090318212522000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 352716, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 4000, "INMRECFM": "FB", "INMDIR": 6, "INMDSNAM": "RLRICE.OS.USERFMT.CBT", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 352716, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 352716, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"RLRICE.OS.USERFMT.CBT": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 4000, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3339, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 0}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x05\\xa0\\x00\\x04\\x8a0P'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x05\\xa0\\x00\\x04\\x8a0P'", "b'X\\xf1\\xe20\\x00\\x00\\x00.\\x00\\x08\\x00.\\x00\\r\\x00\\x06'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$DOC": {"ttr": 7, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "The whole purpose for On Screen is to allow users to view data.\n\nUSERFMT allows users to do some customized data formatting\nwithout having to do any actual programming.\n\nUSERFMT uses control statements that are a part of the format\ndefinition (members in the OSFORMAT library).  Any control\nstatements that OSFORMAT does not recognize are passed through\nto the 'formatter'.  This allows the same 'formatter' program\nto perform mutliple functions.\n\nUSERFMT control statements are:\n\n  FIELD statements\n    1-10       literal 'FIELD'\n   10-19       starting position in data record\n   20-29       length in data record\n   30-39       data type\n   40-49       row,column for displaying in dynamic area\n   50-80       data displayed for HEADING fields\n\n\n\n\n\n\n  IF statements\n    1-10       literal 'IF'\n   10-19       starting position in data record of data to be tested\n   20-29       length of data to be tested\n   30-39       data type\n   40-49       condition\n   50-80       value used for test\n\n\n\n\n\n  ENDIF\n    1-10       literal 'IF'\n\n\n\n\n\n\n\n\n\n\n\nNumeric fields may be either packed decimal or binary.\nBy default numeric fields will be displayed with all digits\n(leading zeros not suppressed).  However, you may include a\n\"edit word\" or \"picture\" that is much like COBOL PICTUREs.\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CNTRLEIF": {"ttr": 10, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*  MODULE NAME: CNTRLEIF                                              *\n*                                                                     *\n*  Interpret ENDIF control statements                                 *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCNTRLEIF CSECT\nCNTRLEIF AMODE 31\nCNTRLEIF RMODE ANY\n         USING OSCOMM,R12\n         USING SESSION,R11\n         USING CNTRLEIF,R15\n         B     INIT0000\nMODID    DC    CL8'CNTRLEIF'\n         DC    CL8'&SYSDATE'\n         DC    CL7'&SYSTIME'\nINIT0000 DS    0H\n         STM   R14,R12,12(R13)               SAVE REGS\n         LR    R10,R15                       COPY ENTRY POINT\n         DROP  R15\n         USING CNTRLEIF,R10                  DEFINE BASE\n         L     R9,SESS_FORMATTER_DXD_ADDR    WORK AREA\n         USING FMT_COMMON,R9\n         LR    R8,R1                         CONTROL STATEMENT ADDRESS\n         USING FORMAT,R8                     DEFINE BASE\n         USING FMAT,R7\n         LR    R15,R9                        WORK AREA BASE\n         A     R15,DXD_START                 PLUS DISP\n         ST    R13,4(R15)                    SAVE R13\n         ST    R15,8(R13)                    CHAIN SAVE AREA\n         LR    R13,R15                       COPY WORK AREA ADDRESS\n         USING DXDCEIF,R13                   DEFINE WORK AREA BASE\n         MVC   DXD_CSECT,MODID\n         XC    DXD_RC,DXD_RC                 INITIALIZE RETURN CODE\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         GETMAIN RU,                                                   +\n               LV=FMAT_L,                                              +\n               LOC=ANY\n         OC    DXD_FIRST_FMAT,DXD_FIRST_FMAT BLOCKS ALREADY ON CHAIN?\n         BZ    ERR0010                       NO\n         L     R15,DXD_FMAT_CHAIN_POINT      CHAIN POINT\n         ST    R1,0(R15)                     ADD TO CHAIN\n         LR    R7,R1\n         XC    FMAT(FMAT_L),FMAT\n         MVI   FMAT_TYPE,$FMAT_END_IF        SET TYPE\n         SR    R1,R1                         CLEAR R1\n         ICM   R1,3,DXD_IF_LEVEL             IF LEVEL\n         LR    R0,R1                         COPY IF LEVEL\n         BZ    ERR0020                       BETTER NOT BE ZERO\n         BCTR  R1,0                          MINUS 1\n         STCM  R1,3,DXD_IF_LEVEL             SAVE NEW IF LEVEL\n         SLL   R1,2                          MULTIPLBY BY 4\n         LA    R1,DXD_IF_TABLE(R1)           COMPUTE ADDRESS\n         MVC   DXD_FMAT_CHAIN_POINT,0(R1)    RESTORE CHAIN POINT\n         ITRACE ID=ENDIF,                                              +\n               RDATA1=R0,                                              +\n               DATA2=(DXD_FMAT_CHAIN_POINT,4)\n         B     EXIT0000                      EXIT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         MVI   COMM_MSG_ID+1,1               NO FMAT BLOCKS ON CHAIN\n         B     ERR1000\nERR0020  DS    0H\n         MVI   COMM_MSG_ID+1,2               ENDIF WITH NO MATCHING IF\n         B     ERR1000\nERR1000  DS    0H\n         MVC   COMM_MSG_CSECT,MODID\n         MVI   COMM_MSG_ID,0\n         L     R15,COMM_V_OSMSG              OSMSG ENTRY POINT\n         BALR  R14,R15                       BUILD MESSAGE\n         MVI   DXD_RC+1,8                    SET RC\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         LH    R15,DXD_RC                    SET RC\n         L     R13,4(,R13)                   RESTORE R13\n         L     R14,12(,R13)                  RESTORE R14\n         LM    R0,R12,20(R13)                RESTORE REGISTERS\n         BR    R14                           RETURN\n* ------------------------------------------------------------------- *\n*        CONSTANTS                                                    *\n* ------------------------------------------------------------------- *\nDXD_START      DC   Q(DXDCEIF)\n* ------------------------------------------------------------------- *\n*              WORK AREAS                                             *\n* ------------------------------------------------------------------- *\nDXDCEIF        DSECT\n               COPY    DXDPREF\n\nDXD_RC         DS      H\n\n* ------------------------------------------------------------------- *\n*              COMMON AREA                                            *\n* ------------------------------------------------------------------- *\n               COMMON\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               SESSION\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               BPXYSTAT DSECT=YES,LIST=YES\n* ------------------------------------------------------------------- *\n*              FMT COMMON                                             *\n* ------------------------------------------------------------------- *\nFMT_COMMON     DSECT\n               DS      (DXD_PREFIX_L)X\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               COPY    FMTCOMM\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               COPY    FORMAT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               COPY    FMAT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               COPY    TRENTRY\n* ------------------------------------------------------------------- *\n*              EQUATES                                                *\n* ------------------------------------------------------------------- *\n               COPY    REGEQU\n               END     CNTRLEIF\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CNTRLFLD": {"ttr": 14, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*  MODULE NAME: CNTRLFLD                                              *\n*                                                                     *\n*  Interpret FIELD control statements                                 *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCNTRLFLD CSECT\nCNTRLFLD AMODE 31\nCNTRLFLD RMODE ANY\n         USING OSCOMM,R12\n         USING SESSION,R11\n         USING CNTRLFLD,R15\n         B     INIT0000\nMODID    DC    CL8'CNTRLFLD'\n         DC    CL8'&SYSDATE'\n         DC    CL7'&SYSTIME'\nINIT0000 DS    0H\n         STM   R14,R12,12(R13)                SAVE REGS\n         LR    R10,R15                        COPY ENTRY POINT\n         DROP  R15\n         USING CNTRLFLD,R10                   DEFINE BASE\n         L     R9,SESS_FORMATTER_DXD_ADDR     WORK AREA\n         LR    R15,R9                         COPY WORK AREA ADDRESS\n         USING FMT_COMMON,R9\n         LR    R8,R1                          CONTROL STATEMENT ADDRESS\n         USING FORMAT,R8                      DEFINE BASE\n         USING FMAT,R7\n         A     R15,DXD_START                  PLUS DISP\n         ST    R13,4(R15)                     SAVE R13\n         ST    R15,8(R13)                     CHAIN SAVE AREA\n         LR    R13,R15                        COPY WORK AREA ADDRESS\n         USING DXDCFLD,R13                    DEFINE WORK AREA BASE\n         MVC   DXD_CSECT,MODID\n         XC    DXD_RC,DXD_RC                  INITIALIZE RETURN CODE\n         ITRACE ID=ENTRY,                                              +\n               RDATA1=R13,                                             +\n               RDATA2=R9\n* ------------------------------------------------------------------- *\n*        Process FIELD statements                                     *\n* ------------------------------------------------------------------- *\nFLD0000  DS    0H\n         ITRACE ID=FIELD\n         MVI   DXD_OPTIONS,0                  RESET OPTIONS\n         LA    R1,FORMAT_START                STARTING POSITION\n         BAL   R15,NBR0000                    VERIFY AND CONVERT\n         BM    ERR0010                        NOT VALID\n         ITRACE ID=START,                                              +\n               RDATA1=R0\n         STH   R0,DXD_FIELD_START             SAVE START POSITION\n         LA    R1,FORMAT_LENGTH               LENGTH\n         BAL   R15,NBR0000                    VERIFY AND CONVERT\n         BM    ERR0020                        NOT VALID\n         ITRACE ID=LENGTH,                                             +\n               RDATA1=R0\n         STH   R0,DXD_FIELD_LENGTH            SAVE FIELD LENGTH\n         LA    R1,DATA_TYPE_TABLE             DATA TYPE TABLE\n         USING DATA_TYPES,R1                  DEFINE BASE\nFLD0010  DS    0H\n         CLC   DATA_TYPES_TYPE,FORMAT_DATA_TYPE\n         BE    FLD0020\n         CLI   DATA_TYPES_TYPE,X'FF'          END OF TABLE?\n         BE    ERR0030                        YES\n         LA    R1,DATA_TYPES_L(,R1)           NEXT TYPE\n         B     FLD0010                        KEEP LOOKING\nFLD0020  DS    0H\n         ITRACE ID=TYPECODE,                                           +\n               DATA1=(DATA_TYPES_CODE,1)\n         MVC   DXD_TYPE_CODE,DATA_TYPES_CODE\n         CLC   FORMAT_ROW_COLUMN+5(5),COMM_BLANKS\n         BNE   ERR0040                        MUST BE 5 CHARS OR LESS\n         LA    R1,FORMAT_ROW_COLUMN           DISPLAY ROW,COLUMN\n         BAL   R15,NBR0000                    VERIFY AND CONVERT\n         BM    ERR0050                        ROW NOT VALID\n         CLI   0(R1),C','                     STOP ON A COMMA?\n         BNE   ERR0060                        NO\n         ITRACE ID=ROW,                                                +\n               RDATA1=R0\n         STH   R0,DXD_ROW                     SAVE ROW\n         LA    R1,1(,R1)                      SKIP THE COMMA\n         BAL   R15,NBR0000                    VERIFY AND CONVERT\n         BM    ERR0050                        COLUMN NOT VALID\n         CLI   0(R1),C','                     STOP ON A COMMA?\n         BE    ERR0060                        YES.. NOT VALID\n         ITRACE ID=COLUMN,                                             +\n               RDATA1=R0\n         STH   R0,DXD_COLUMN                  SAVE COLUMN NUMBER\n         CLI   DXD_TYPE_CODE,$FMAT_BINARY     BINARY FIELD?\n         BE    FLD0030                        YES\n         CLI   DXD_TYPE_CODE,$FMAT_PACKED     PACKED DECIMAL?\n         BNE   FLD0080                        NO\nFLD0030  DS    0H\n         CLC   FORMAT_HEADING,COMM_BLANKS     EDIT MASK PRESENT?\n         BE    FLD0080                        NO\n* ------------------------------------------------------------------- *\n*        Verify editword is valid                                     *\n* ------------------------------------------------------------------- *\n         LA    R2,FORMAT_HEADING              1ST CHARACTER OF MASK\n         MVI   DXD_FLAGS,0                    RESET FLAGS\n         OI    DXD_OPTIONS,$FMAT_EDITWORD     SET EDIT MASK INDICATOR\nFLD0040  DS    0H\n         CLI   0(R2),C' '                     END OF EDIT MASK?\n         BE    FLD0080                        YES\n         TM    DXD_FLAGS,$SIGNIFICANT         SIGNIFICANT FLAG ON?\n         BO    FLD0050                        YES\n         CLC   0(1,R2),1(R2)                  'FLOATING' PAD?\n         BE    FLD0060                        YES\n         CLI   0(R2),C'9'                     NINE?\n         BNE   FLD0070                        NO.. CHECK NEXT\n         OI    DXD_FLAGS,$SIGNIFICANT         SET SIGNIFICANT FLAG\n         B     FLD0070\nFLD0050  DS    0H\n         CLI   0(R2),C','                     COMMA?\n         BE    FLD0070                        YES.. ALLOWABLE\n         CLI   0(R2),C'.'                     DECIMAL POINT?\n         BE    FLD0070                        YES.. ALLOWABLE\n         CLI   0(R2),C'9'                     DIGIT?\n         BE    FLD0070                        YES.. ALLOWABLE\n         CLC   CREDIT,0(R2)                   'CR '?\n         BE    FLD0080                        YES\n         B     ERR0070\nFLD0060  DS    0H\n         OI    DXD_OPTIONS,$FMAT_FLOAT        SET 'FLOATING' PAD\nFLD0070  DS    0H\n         LA    R2,1(,R2)                      NEXT IN MASK\n         B     FLD0040\n* ------------------------------------------------------------------- *\n*        Build new FMAT block                                         *\n* ------------------------------------------------------------------- *\nFLD0080  DS    0H\n         GETMAIN RU,                                                   +\n               LV=FMAT_L,                                              +\n               LOC=ANY\n         OC    DXD_FIRST_FMAT,DXD_FIRST_FMAT  BLOCKS ALREADY ON CHAIN?\n         BNZ   FLD0090                        YES\n         ST    R1,DXD_FIRST_FMAT              FIRST BLOCK\nFLD0090  DS    0H\n         L     R15,DXD_FMAT_CHAIN_POINT       CHAIN POINT\n         ST    R1,0(,R15)                     ADD TO CHAIN\n         LR    R7,R1                          COPY ADDRESS\n         LA    R15,FMAT_NEXT\n         ST    R15,DXD_FMAT_CHAIN_POINT       SAVE CHAIN POINT\n         XC    FMAT(FMAT_L),FMAT              INITIALIZE\n         ITRACE ID=FMAT,                                               +\n               RDATA1=R7\n         MVI   FMAT_TYPE,$FMAT_FIELD          SET TYPE TO 'FIELD'\n         MVC   FMAT_START,DXD_FIELD_START     COPY STARTING POSITION\n         MVC   FMAT_LENGTH,DXD_FIELD_LENGTH   COPY LENGTH\n         MVC   FMAT_ROW,DXD_ROW               COPY DISPLAY ROW\n         MVC   FMAT_COLUMN,DXD_COLUMN         COPY DISPLAY COLUMN\n         MVC   FMAT_DATA_TYPE,DXD_TYPE_CODE   COPY DATA TYPE CODE\n         MVC   FMAT_OPTIONS,DXD_OPTIONS       CUSTOM EDIT WORD PRESENT\n         MVC   FMAT_DATA,FORMAT_HEADING       COPY HEADING OR EDIT MASK\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nNBR0000  DS    0H\n         MVC   COMM_INFO_01(10),C_0000000000\nNBR0010  DS    0H\n         CLI   0(R1),C' '                     BLANK?\n         BE    NBR0020                        YES\n         CLI   0(R1),C','                     COMMA?\n         BE    NBR0020                        YES\n         CLI   0(R1),C'0'                     ZERO?\n         BL    NBR0030                        LESS.. BAD\n         CLI   0(R1),C'9'                     NINE?\n         BH    NBR0030                        HIGHER.. BAD\n         MVC   COMM_INFO_01(9),COMM_INFO_01+1\n         MVC   COMM_INFO_01+9(1),0(R1)\n         LA    R1,1(,R1)                      NEXT DIGIT\n         B     NBR0010                        LOOP\nNBR0020  DS    0H\n         PACK  COMM_DWORD,COMM_INFO_01(10)\n         CVB   R0,COMM_DWORD                  CONVERT TO BINARY\n         BR    R15\nNBR0030  DS    0H\n         ICM   R0,15,MINUS_ONE                INDICATE BAD\n         BR    R15\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         MVI   COMM_MSG_ID+1,1                START NOT VALID\n         B     ERR900\nERR0020  DS    0H\n         MVI   COMM_MSG_ID+1,2                LENGTH NOT VALID\n         B     ERR900\nERR0030  DS    0H\n         MVI   COMM_MSG_ID+1,3                BAD DATA TYPE\n         B     ERR900\nERR0040  DS    0H\n         MVI   COMM_MSG_ID+1,4                ROW,COL > 5 CHARACTERS\n         B     ERR900\nERR0050  DS    0H\n         MVI   COMM_MSG_ID+1,5                BAD ROW\n         B     ERR900\nERR0060  DS    0H\n         MVI   COMM_MSG_ID+1,6                BAD COLUMN\n         B     ERR900\nERR0070  DS    0H\n         MVI   COMM_MSG_ID+1,7                BAD EDIT MASK\n         B     ERR900\nERR900   DS    0H\n         MVC   COMM_MSG_CSECT,MODID\n         MVI   COMM_MSG_ID,0\n         L     R15,COMM_V_OSMSG               OSMSG ENTRY POINT\n         BALR  R14,R15                        BUILD MESSAGE\n         MVI   DXD_RC+1,8                     SET RC\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         LH    R15,DXD_RC                     SET RC\n         L     R13,4(,R13)                    RESTORE R13\n         L     R14,12(,R13)                   RESTORE R14\n         LM    R0,R12,20(R13)                 RESTORE REGISTERS\n         BR    R14                            RETURN\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START       DC   Q(DXDCFLD)\nMINUS_ONE       DC   F'-1'\n\nC_0000000000    DC   10C'0'\n\nCREDIT          DC   C'CR '\n\nDATA_TYPE_TABLE DS   0C\n                DC   CL10'BINARY',AL1($FMAT_BINARY)\n                DC   CL10'CHARACTER',AL1($FMAT_CHARACTER)\n                DC   CL10'HEADING',AL1($FMAT_HEADING)\n                DC   CL10'HEX',AL1($FMAT_HEX)\n                DC   CL10'PACKED',AL1($FMAT_PACKED)\n                DC   X'FF'\n\n                LTORG\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDCFLD             DSECT\n                    COPY    DXDPREF\n\nDXD_RC              DS      H\n\nDXD_FIELD_START     DS      XL2\nDXD_FIELD_LENGTH    DS      XL2\nDXD_ROW             DS      XL2\nDXD_COLUMN          DS      XL2\nDXD_TYPE_CODE       DS      X\nDXD_OPTIONS         DS      X\nDXD_FLAGS           DS      X\n$SIGNIFICANT        EQU     X'80'\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n                    COMMON\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n                    SESSION\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n                    BPXYSTAT DSECT=YES,LIST=YES\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nFMT_COMMON          DSECT\n                    DS      (DXD_PREFIX_L)X\n                    COPY    FMTCOMM\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n                    COPY    FORMAT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n                    COPY    FMAT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDATA_TYPES          DSECT\nDATA_TYPES_TYPE     DS      CL10\nDATA_TYPES_CODE     DS      X\nDATA_TYPES_L        EQU     *-DATA_TYPES\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n                    COPY    TRENTRY\n* ------------------------------------------------------------------- *\n*                   EQUATES                                           *\n* ------------------------------------------------------------------- *\n                    COPY    REGEQU\n                    END     CNTRLFLD\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CNTRLIF": {"ttr": 257, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*  MODULE NAME: CNTRLIF                                               *\n*                                                                     *\n*  Interpret IF control statements                                    *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCNTRLIF  CSECT\nCNTRLIF  AMODE 31\nCNTRLIF  RMODE ANY\n         USING OSCOMM,R12\n         USING SESSION,R11\n         USING CNTRLIF,R15\n         B     INIT0000\nMODID    DC    CL8'CNTRLIF'\n         DC    CL8'&SYSDATE'\n         DC    CL7'&SYSTIME'\nINIT0000 DS    0H\n         STM   R14,R12,12(R13)               SAVE REGS\n         LR    R10,R15                       COPY ENTRY POINT\n         DROP  R15\n         USING CNTRLIF,R10                   DEFINE BASE\n         L     R9,SESS_FORMATTER_DXD_ADDR    WORK AREA\n         USING FMT_COMMON,R9\n         LR    R8,R1                         CONTROL STATEMENT ADDRESS\n         USING FORMAT,R8                     DEFINE BASE\n         USING FMAT,R7\n         LR    R15,R9                        WORK AREA BASE\n         A     R15,DXD_START                 PLUS DISP\n         ST    R13,4(R15)                    SAVE R13\n         ST    R15,8(R13)                    CHAIN SAVE AREA\n         LR    R13,R15                       COPY WORK AREA ADDRESS\n         USING DXDCIF,R13                    DEFINE WORK AREA BASE\n         MVC   DXD_CSECT,MODID\n         XC    DXD_RC,DXD_RC                 INITIALIZE RETURN CODE\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        Process IF statements                                        *\n*                                                                     *\n*        Note... the base used for the record and FMAT block used     *\n*        in the compare instructions that are built must match        *\n*        the code in FMTIF.. that is R6 is assumed to be computed     *\n*        to the address of data in the record to be tested and R7     *\n*        will be the address of the FMAT block at the time of the     *\n*        compare in FMTIF.                                            *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nIF0000   DS    0H\n         ITRACE ID=IF,                                                 +\n               DATA1=(DXD_IF_LEVEL,2)\n         XC    DXD_COMPARE,DXD_COMPARE       INITIALIZE\n         LA    R1,FORMAT_START               STARTING POSITION\n         BAL   R15,NBR0000                   VERIFY AND CONVERT\n         BM    ERR0010                       NOT VALID\n         ITRACE ID=START,                                              +\n               RDATA1=R0\n         STH   R0,DXD_FIELD_START            SAVE START POSITION\n         LA    R1,FORMAT_LENGTH              LENGTH\n         BAL   R15,NBR0000                   VERIFY AND CONVERT\n         BM    ERR0020                       NOT VALID\n         ITRACE ID=LENGTH,                                             +\n               RDATA1=R0\n         STH   R0,DXD_FIELD_LENGTH           SAVE FIELD LENGTH\n         LA    R1,DATA_TYPE_TABLE            DATA TYPE TABLE\n         USING DATA_TYPES,R1                 DEFINE BASE\nIF0010   DS    0H\n         CLC   DATA_TYPES_TYPE,FORMAT_DATA_TYPE\n         BE    IF0020                        TYPE LOCATED\n         CLI   DATA_TYPES_TYPE,X'FF'         END OF TABLE?\n         BE    ERR0030                       YES\n         LA    R1,DATA_TYPES_L(,R1)          NEXT TYPE\n         B     IF0010                        KEEP LOOKING\nIF0020   DS    0H\n         MVC   DXD_TYPE_CODE,DATA_TYPES_CODE COPY TYPE CODE\n         ITRACE ID=TYPECODE,                                           +\n               DATA1=(DXD_TYPE_CODE,1)\n         CLI   DXD_TYPE_CODE,$FMAT_CHARACTER CHARACTER FIELD?\n         BE    IF0030                        YES\n         CLI   DXD_TYPE_CODE,$FMAT_HEX       HEX FIELD?\n         BE    IF0040                        YES\n         CLI   DXD_TYPE_CODE,$FMAT_PACKED    PACKED DECIMAL\n         BE    IF0100                        YES\n         DC    H'0'\n* ------------------------------------------------------------------- *\n*        Character fields                                             *\n* ------------------------------------------------------------------- *\nIF0030   DS    0H\n         ITRACE ID=CHAR\n         MVC   DXD_DATA,FORMAT_HEADING       COPY AS IS\n         CLC   DXD_FIELD_LENGTH,H30          FIELD LENGTH\n         BL    IF0090                        NO\n         MVC   DXD_FIELD_LENGTH,H30          LIMIT LENGTH\n         B     IF0090\n* ------------------------------------------------------------------- *\n*        HEX fields                                                   *\n* ------------------------------------------------------------------- *\nIF0040   DS    0H\n         ITRACE ID=HEX\n         LA    R2,FORMAT_HEADING             DATA FOR COMPARE\n         LH    R1,DXD_FIELD_LENGTH           FIELD LENGTH\n         CH    R1,H15                        TOO LARGE?\n         BL    IF0050                        NO\n         LH    R1,H15                        LIMIT\n         STH   R1,DXD_FIELD_LENGTH\nIF0050   DS    0H\n         SLL   R1,1                          TWO PER BYTE\nIF0060   DS    0H\n         CLI   0(R2),C'A'                    VALID HEX?\n         BL    ERR0060                       NO\n         CLI   0(R2),C'F'                    VALID HEX?\n         BNH   IF0070                        YES\n         CLI   0(R2),C'0'                    VALID HEX?\n         BL    ERR0060                       NO\n         CLI   0(R2),C'9'                    LAST CHANCE\n         BH    ERR0060                       NOT VALID\nIF0070   DS    0H\n         LA    R2,1(,R2)                     NEXT\n         BCT   R1,IF0060                     LOOP\n         XC    DXD_DATA,DXD_DATA             INITIALIZE\n         TR    FORMAT_HEADING,CHAR_TO_HEX    PREPARE FOR PACKING\n         LA    R1,FORMAT_HEADING             SOURCE\n         LA    R2,DXD_DATA                   OUTPUT\n         LH    R3,DXD_FIELD_LENGTH           LENGTH\n         ITRACE ID=PACK_HEX,                                           +\n               RDATA1=R2,                                              +\n               RDATA2=R3\nIF0080   DS    0H\n         PACK  0(2,R2),0(3,R1)               PACK\n         MVI   1(R2),X'00'\n         LA    R1,2(,R1)                     NEXT IN SOURCE\n         LA    R2,1(,R2)                     NEXT IN OUTPUT\n         BCT   R3,IF0080                     LOOP\n* ------------------------------------------------------------------- *\n*        Construct compare for character and hex                      *\n* ------------------------------------------------------------------- *\nIF0090   DS    0H\n         ITRACE ID=BLD_CLC\n         MVI   DXD_COMPARE,X'D5'             USE CLC OP-CODE\n         LH    R1,DXD_FIELD_LENGTH           FIELD LENGTH\n         BCTR  R1,0                          MINUS 1\n         STC   R1,DXD_COMPARE+1              SET LENGTH\n         B     IF0110                        BUILD THE OPERANDS\n* ------------------------------------------------------------------- *\n*        Packed decimal                                               *\n* ------------------------------------------------------------------- *\nIF0100   DS    0H\n         ITRACE ID=PACKED\n         LA    R1,FORMAT_HEADING             STARTING POSITION\n         BAL   R15,NBR0000                   VERIFY AND CONVERT\n         BM    ERR0010                       NOT VALID\n         XC    DXD_DATA,DXD_DATA             INITIALIZE\n         MVC   DXD_DATA(L'COMM_DWORD),COMM_DWORD\n* ------------------------------------------------------------------- *\n*        Construct compare for packed decimal                         *\n* ------------------------------------------------------------------- *\n         ITRACE ID=BLD_CP\n         MVI   DXD_COMPARE,X'F9'             USE CP OP-CODE\n         LH    R1,DXD_FIELD_LENGTH           LENGTH\n         BCTR  R1,0                          MINUS 1\n         SLL   R1,4                          SHIFT\n         STC   R1,DXD_COMPARE+1              SET LENGTH 1\n         OI    DXD_COMPARE+1,L'COMM_DWORD-1  OR-IN LENGTH 2\n* ------------------------------------------------------------------- *\n*        Build operands for compare (CLC or CP)                       *\n* ------------------------------------------------------------------- *\nIF0110   DS    0H\n         LH    R1,DXD_FIELD_START            STARTING POSITION\n         BCTR  R1,0\n         STCM  R1,3,DXD_COMPARE+2            SET DISP\n         OI    DXD_COMPARE+2,X'60'           OR-IN RECORD BASE  <---\n         LA    R1,FMAT_DATA-FMAT             DISP TO DATA\n         STCM  R1,3,DXD_COMPARE+4            SET DISP\n         OI    DXD_COMPARE+4,X'70'           FMAT BLOCK BASE    <---\n* ------------------------------------------------------------------- *\n*        Find Branch instruction                                      *\n* ------------------------------------------------------------------- *\n         LA    R1,BRANCH_TABLE\n         USING BRANCH_TYPES,R1\nIF0120   DS    0H\n         CLC   BRANCH_TYPE,FORMAT_ROW_COLUMN\n         BE    IF0130\n         CLI   BRANCH_TYPE,X'FF'             END OF TABLE?\n         BE    ERR0040                       YES\n         LA    R1,BRANCH_TYPES_L(,R1)\n         B     IF0120\nIF0130   DS    0H\n         MVC   DXD_BRANCH,BRANCH_OPCODE      COPY BRANCH OPCODE\n* ------------------------------------------------------------------- *\n*        Update IF level                                              *\n* ------------------------------------------------------------------- *\n         LH    R2,DXD_IF_LEVEL               CURRENT IF LEVEL\n         CH    R2,H16                        AT LEVEL 16 NOW?\n         BE    ERR0050                       YES\n         LR    R1,R2                         COPY IF LEVEL\n         LA    R1,1(,R1)                     PLUS 1\n         STH   R1,DXD_IF_LEVEL               UPDATE IF LEVEL\n         ITRACE ID=DOWN,                                               +\n               RDATA1=R1                     .. NEW LEVEL\n* ------------------------------------------------------------------- *\n*        Build new FMAT block                                         *\n* ------------------------------------------------------------------- *\n         GETMAIN RU,                                                   +\n               LV=FMAT_L,                                              +\n               LOC=ANY\n         OC    DXD_FIRST_FMAT,DXD_FIRST_FMAT BLOCKS ALREADY ON CHAIN?\n         BNZ   IF0140                        YES\n         ST    R1,DXD_FIRST_FMAT             SET 1ST ON CHAIN\nIF0140   DS    0H\n         L     R15,DXD_FMAT_CHAIN_POINT      CHAIN POINT\n         ST    R1,0(R15)                     ADD TO CHAIN\n         LR    R7,R1                         COPY ADDRESS\n         XC    FMAT(FMAT_L),FMAT             INITIALIZE THE STORAGE\n         MVI   FMAT_TYPE,$FMAT_IF            SET TYPE TO 'IF'\n         MVC   FMAT_DATA_TYPE,DXD_TYPE_CODE  COPY DATA TYPE CODE\n         MVC   FMAT_START,DXD_FIELD_START    COPY STARTING POSITION\n         MVC   FMAT_LENGTH,DXD_FIELD_LENGTH  COPY LENGTH\n         MVC   FMAT_COMPARE,DXD_COMPARE      COPY COMPARE INSTRUCTION\n         MVC   FMAT_BRANCH,DXD_BRANCH        COPY BRANCH\n         MVC   FMAT_DATA,DXD_DATA            COPY FOR COMPARE\n         SLL   R2,2                          MULTIPLY LEVEL BY 4\n         LA    R2,DXD_IF_TABLE(R2)           COMPUTE ADDRESS\n         ST    R7,0(R2)                      SAVE IF BLOCK ADDRESS\n         ITRACE ID=FMAT,                                               +\n               RDATA1=R7\n         LA    R1,FMAT_FIELDS                CHAIN POINT\n         ST    R1,DXD_FMAT_CHAIN_POINT\n         B     EXIT0000                      ALL DONE\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nNBR0000  DS    0H\n         MVC   COMM_INFO_01(10),C_0000000000\nNBR0010  DS    0H\n         CLI   0(R1),C' '                    BLANK?\n         BE    NBR0020                       YES\n         CLI   0(R1),C','                    COMMA?\n         BE    NBR0020                       YES\n         CLI   0(R1),C'0'                    ZERO?\n         BL    NBR0030                       LESS.. BAD\n         CLI   0(R1),C'9'                    NINE?\n         BH    NBR0030                       HIGHER.. BAD\n         MVC   COMM_INFO_01(9),COMM_INFO_01+1\n         MVC   COMM_INFO_01+9(1),0(R1)\n         LA    R1,1(,R1)                     NEXT DIGIT\n         B     NBR0010                       LOOP\nNBR0020  DS    0H\n         PACK  COMM_DWORD,COMM_INFO_01(10)\n         CVB   R0,COMM_DWORD                 CONVERT TO BINARY\n         BR    R15\nNBR0030  DS    0H\n         ICM   R0,15,MINUS_ONE              INDICATE BAD\n         BR    R15\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         MVI   COMM_MSG_ID+1,1              START NOT VALID\n         B     ERR900\nERR0020  DS    0H\n         MVI   COMM_MSG_ID+1,2              LENGTH NOT VALID\n         B     ERR900\nERR0030  DS    0H\n         MVI   COMM_MSG_ID+1,3              BAD DATA TYPE\n         B     ERR900\nERR0040  DS    0H\n         MVI   COMM_MSG_ID+1,4              BAD BRANCH CONDITION\n         B     ERR900\nERR0050  DS    0H\n         MVI   COMM_MSG_ID+1,5              TOO MANY NESTED IF'S\n         B     ERR900\nERR0060  DS    0H\n         MVI   COMM_MSG_ID+1,6              BAD HEX DIGIT\nERR900   DS    0H\n         MVC   COMM_MSG_CSECT,MODID\n         MVI   COMM_MSG_ID,0\n         L     R15,COMM_V_OSMSG             OSMSG ENTRY POINT\n         BALR  R14,R15                      BUILD MESSAGE\n         MVI   DXD_RC+1,8                   SET RC\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         LH    R15,DXD_RC                   SET RC\n         L     R13,4(,R13)                  RESTORE R13\n         L     R14,12(,R13)                 RESTORE R14\n         LM    R0,R12,20(R13)               RESTORE REMAINING REGISTERS\n         BR    R14                          RETURN\n\n* ------------------------------------------------------------------- *\n*        CONSTANTS                                                    *\n* ------------------------------------------------------------------- *\nDXD_START       DC   Q(DXDCIF)\nMINUS_ONE       DC   F'-1'\n\nH15             DC   H'15'\nH16             DC   H'16'\nH30             DC   H'30'\n\nC_0000000000    DC   10C'0'\n\nDATA_TYPE_TABLE DS   0C\n                DC   CL10'BINARY',AL1($FMAT_BINARY)\n                DC   CL10'CHARACTER',AL1($FMAT_CHARACTER)\n                DC   CL10'HEADING',AL1($FMAT_HEADING)\n                DC   CL10'HEX',AL1($FMAT_HEX)\n                DC   CL10'PACKED',AL1($FMAT_PACKED)\n                DC   X'FF'\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCHAR_TO_HEX     DC   256X'00'\n                ORG  CHAR_TO_HEX+C'A'\n                DC   X'0A0B0C0D0E0F'\n                ORG  CHAR_TO_HEX+C'0'\n                DC   X'00010203040506070809'\n                ORG\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nBRANCH_TABLE    DS   0H\n                DC   CL4'EQ  '\n                BER  R15\n\n                DC   CL4'NE  '\n                BNER R15\n\n                DC   CL4'=   '\n                BER  R15\n\n                DC   CL4'LOW '\n                BLR  R15\n\n                DC   CL4'<   '\n                BLR  R15\n\n                DC   CL4'HIGH'\n                BHR  R15\n\n                DC   CL4'>   '\n                BHR  R15\n\n                DC   CL4'ON  '\n                BOR  R15\n\n                DC   CL4'ONE '\n                BOR  R15\n\n                DC   CL4'OFF '\n                BNOR R15\n\n                DC   CL4'ZERO'\n                BNOR R15\n\n                DC   X'FF'\n\n                LTORG\n* ------------------------------------------------------------------- *\n*                   WORK AREAS                                        *\n* ------------------------------------------------------------------- *\nDXDCIF              DSECT\n                    COPY    DXDPREF\n\nDXD_RC              DS      H\n\nDXD_FIELD_START     DS      XL2\nDXD_FIELD_LENGTH    DS      XL2\nDXD_ROW             DS      XL2\nDXD_COLUMN          DS      XL2\nDXD_TYPE_CODE       DS      X\nDXD_COMPARE         DS      XL6\nDXD_BRANCH          DS      XL2\nDXD_DATA            DS      CL30\n\n* ------------------------------------------------------------------- *\n*                   COMMON AREA                                       *\n* ------------------------------------------------------------------- *\n                    COMMON\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n                    SESSION\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n                    BPXYSTAT DSECT=YES,LIST=YES\n* ------------------------------------------------------------------- *\n*                   FMT COMMON                                        *\n* ------------------------------------------------------------------- *\nFMT_COMMON          DSECT\n                    DS      (DXD_PREFIX_L)X\n                    COPY    FMTCOMM\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n                    COPY    FORMAT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n                    COPY    FMAT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDATA_TYPES          DSECT\nDATA_TYPES_TYPE     DS      CL10\nDATA_TYPES_CODE     DS      X\nDATA_TYPES_L        EQU     *-DATA_TYPES\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nBRANCH_TYPES        DSECT\nBRANCH_TYPE         DS      CL4\nBRANCH_OPCODE       DS      XL2\nBRANCH_TYPES_L      EQU     *-BRANCH_TYPES\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n                    COPY    TRENTRY\n* ------------------------------------------------------------------- *\n*                   EQUATES                                           *\n* ------------------------------------------------------------------- *\n                    COPY    REGEQU\n                    END     CNTRLIF\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "FMTBIN": {"ttr": 267, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*  MODULE NAME: FMTBIN                                                *\n*                                                                     *\n*  Process binary fields during 'format'                              *\n*                                                                     *\n*                                                                     *\n*  If no \"edit word\" is specified, the number is displayed in vanilla *\n*  99999 type format with leading zeros displayed, no plus or minus   *\n*  sign.  1-byte fields are displayed as 3 digits, 2-byte fields are  *\n*  displayed as 5 digits, 3-byte fields are displayed as 8 digits,    *\n*  4-byte fields are displayed as 10 digits.                          *\n*                                                                     *\n*  Rather than use hardware edit instruction (ED), the editing is     *\n*  done more 'manually'.  \"Edit words\" are much like \"PICTURE\"        *\n*  values valid to COBOL.                                             *\n*                                                                     *\n* ------------------------------------------------------------------- *\nFMTBIN   CSECT\nFMTBIN   AMODE 31\nFMTBIN   RMODE ANY\n         USING OSCOMM,R12\n         USING SESSION,R11\n         USING FMTBIN,R15\n         B     INIT0000\nMODID    DC    CL8'FMTBIN'\n         DC    CL8'&SYSDATE'\n         DC    CL7'&SYSTIME'\nINIT0000 DS    0H\n         STM   R14,R12,12(R13)               SAVE REGS\n         LR    R10,R15                       COPY ENTRY POINT\n         DROP  R15\n         USING FMTBIN,R10                    DEFINE BASE\n         L     R9,SESS_FORMATTER_DXD_ADDR    WORK AREA\n         LR    R15,R9                        COPY WORK AREA ADDRESS\n         USING FMT_COMMON,R9\n         L     R15,SESS_FORMATTER_DXD_ADDR   WORK AREA BASE\n         A     R15,DXD_START                 PLUS DISP\n         ST    R13,4(R15)                    SAVE R13\n         ST    R15,8(R13)                    CHAIN SAVE AREA\n         LR    R13,R15                       COPY WORK AREA ADDRESS\n         USING DXDFPACK,R13                  DEFINE WORK AREA BASE\n         MVC   DXD_CSECT,MODID\n         L     R7,DXD_FMAT_FMAT              FMAT BEING PROCESSED\n         USING FMAT,R7\n         ITRACE ID=ENTRY,                                              +\n               RDATA1=R7\n         L     R8,COMM_OSSPFD\n         USING OSSPFD,R8\n* ------------------------------------------------------------------- *\n*        Convert binary to packed decimal                             *\n* ------------------------------------------------------------------- *\n         LH    R1,FMAT_START                 STARTING COLUMN\n         A     R1,DXD_RECORD_ADDR            PLUS RECORD ADDRESS\n         BCTR  R1,0\n         SR    R0,R0                         INITIALIZE\n         CLI   FMAT_LENGTH+1,1               1 BYTE?\n         BE    BIN0010                       YES\n         CLI   FMAT_LENGTH+1,2               2 BYTES?\n         BE    BIN0020                       YES\n         CLI   FMAT_LENGTH+1,3               3 BYTES?\n         BE    BIN0030                       YES\n         ICM   R0,15,0(R1)                   INSERT 4 BYTES\n         LA    R2,COMM_INFO_02+2             1ST BYTE TO DISPLAY\n         LA    R3,11                         LENGTH TO DISPLAY\n         B     BIN0040\nBIN0010  DS    0H\n         IC    R0,0(,R1)                     INSERT 1 BYTE\n         LA    R2,COMM_INFO_02+9             1ST BYTE TO DISPLAY\n         LA    R3,3                          LENGTH TO DISPLAY\n         B     BIN0040\nBIN0020  DS    0H\n         ICM   R0,3,0(R1)                    INSERT 2 BYTES\n         LA    R2,COMM_INFO_02+7             1ST BYTE TO DISPLAY\n         LA    R3,5                          LENGTH TO DISPLAY\n         B     BIN0040\nBIN0030  DS    0H\n         ICM   R0,7,0(R1)                    INSERT 3 BYTE\n         LA    R2,COMM_INFO_02+4             1ST BYTE TO DISPLAY\n         LA    R3,8                          LENGTH TO DISPLAY\nBIN0040  DS    0H\n         CVD   R0,COMM_DWORD                 CONVERT TO DECIMAL\n         MVC   COMM_INFO_02(L'EDITWORD1),EDITWORD1\n         ED    COMM_INFO_02(L'EDITWORD1),COMM_DWORD+2\n         TM    FMAT_OPTIONS,$FMAT_EDITWORD   EDIT WORD SPECIFIED?\n         BO    BIN0050                       YES\n         ITRACE ID=NOWORD\n         LH    R0,FMAT_ROW                   DISPLAY ROW\n         LH    R1,FMAT_COLUMN                DISPLAY COLUMN\n         BCTR  R0,0                          ROW RELATIVE TO ZERO\n         MH    R0,SPF_VWIDTH+2               MULTIPLY BY LINE LENGTH\n         BCTR  R1,0                          COLUMN RELATIVE TO ZERO\n         AR    R0,R1                         PLUS COLUMN\n         A     R0,DXD_VDATA_ADDR             PLUS VDATA ADDRESS\n         B     BIN0060\nBIN0050  DS    0H\n         LA    R0,COMM_INFO_01               COPY TO COMM_INFO_01\nBIN0060  DS    0H\n         LR    R1,R3                         LENGTH\n         MVCL  R0,R2                         COPY TO VDATA BUFFER\n         TM    FMAT_OPTIONS,$FMAT_EDITWORD   EDIT WORD SPECIFIED?\n         BNO   EXIT0000                      NO\n         ITRACE ID=PRE_EDIT,                                           +\n               DATA1=COMM_INFO_01+0,                                   +\n               DATA2=COMM_INFO_01+8\n         ITRACE ID=CALLEDIT\n         L     R15,V_FMTEDIT                 FMTEDIT ENTRY POINT\n         BALR  R14,R15                       CALL FMTEDIT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         LH    R15,DXD_RC                    SET RC\n         L     R13,4(,R13)                   RESTORE R13\n         L     R14,12(,R13)                  RESTORE R14\n         LM    R0,R12,20(R13)                RESTORE REGISTERS\n         BR    R14                           RETURN\n* ------------------------------------------------------------------- *\n*              CONSTANTS                                              *\n* ------------------------------------------------------------------- *\nDXD_START      DC      Q(DXDFPACK)\nV_FMTEDIT      DC      V(FMTEDIT)\n\nHEXCHAR        EQU     *-C'0'\n               DC      C'0123456789ABCDEF'\n\nEDITWORD1      DC      X'F02020202020202020202020'\n\n               LTORG\n* ------------------------------------------------------------------- *\n*              WORK AREAS                                             *\n* ------------------------------------------------------------------- *\nDXDFPACK             DSECT\n                     COPY     DXDPREF\n\nDXD_RC               DS   H\n\nDXD_SIGN_ADDRESS     DS   A\n* ------------------------------------------------------------------- *\n*              COMMON AREA                                            *\n* ------------------------------------------------------------------- *\n               COMMON\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               SESSION\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               BPXYSTAT DSECT=YES,LIST=YES\n* ------------------------------------------------------------------- *\n*              FMT COMMON                                             *\n* ------------------------------------------------------------------- *\nFMT_COMMON     DSECT\n               DS      (DXD_PREFIX_L)X\n               COPY    FMTCOMM\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               COPY    FMAT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               OSSPFD  TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               COPY    TRENTRY\n* ------------------------------------------------------------------- *\n*              EQUATES                                                *\n* ------------------------------------------------------------------- *\n               COPY    REGEQU\n               END     FMTBIN\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "FMTCHAR": {"ttr": 514, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*  MODULE NAME: FMTCHAR                                               *\n*                                                                     *\n*  Process heading (constant) fields during a 'format'                *\n*                                                                     *\n* ------------------------------------------------------------------- *\nFMTCHAR  CSECT\nFMTCHAR  AMODE 31\nFMTCHAR  RMODE ANY\n         USING OSCOMM,R12\n         USING SESSION,R11\n         USING FMTCHAR,R15\n         B     INIT0000\nMODID    DC    CL8'FMTCHAR'\n         DC    CL8'&SYSDATE'\n         DC    CL7'&SYSTIME'\nINIT0000 DS    0H\n         STM   R14,R12,12(R13)               SAVE REGS\n         LR    R10,R15                       COPY ENTRY POINT\n         DROP  R15\n         USING FMTCHAR,R10                   DEFINE BASE\n         L     R9,SESS_FORMATTER_DXD_ADDR    WORK AREA\n         LR    R15,R9                        COPY WORK AREA ADDRESS\n         USING FMT_COMMON,R9\n         L     R15,SESS_FORMATTER_DXD_ADDR   WORK AREA BASE\n         A     R15,DXD_START                 PLUS DISP\n         ST    R13,4(R15)                    SAVE R13\n         ST    R15,8(R13)                    CHAIN SAVE AREA\n         LR    R13,R15                       COPY WORK AREA ADDRESS\n         USING DXDFCHAR,R13                  DEFINE WORK AREA BASE\n         MVC   DXD_CSECT,MODID\n         L     R7,DXD_FMAT_FMAT              FMAT BEING PROCESSED\n         USING FMAT,R7\n         ITRACE ID=ENTRY,                                              +\n               RDATA1=R7\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         L     R8,COMM_OSSPFD\n         USING OSSPFD,R8\n         LH    R1,FMAT_START                 STARTING POSITION\n         LH    R2,FMAT_LENGTH                LENGTH\n         LH    R3,FMAT_ROW                   DISPLAY ROW\n         LH    R4,FMAT_COLUMN                DISPLAY COLUMN\n         LR    R0,R1                         COPY START\n         A     R0,DXD_RECORD_ADDR            PLUS BASE ADDRESS\n         BCTR  R0,0                          RELATIVE TO ZERO\n         ST    R0,DXD_SOURCE_START           DATA SOURCE START ADDRESS\n         AR    R0,R2                         PLUS LENGTH\n         ST    R0,DXD_SOURCE_END             DATA SOURCE END ADDRESS\n         BCTR  R3,0                          ROW RELATIVE TO ZERO\n         MH    R3,SPF_VWIDTH+2               MULTIPLY BY LINE LENGTH\n         BCTR  R4,0                          COLUMN RELATIVE TO ZERO\n         AR    R3,R4                         PLUS COLUMN\n         A     R3,DXD_VDATA_ADDR             PLUS VDATA ADDRESS\n         ST    R3,DXD_DISPLAY_START          START ADDR IN VDATA\n         AR    R3,R2                         PLUS LENGTH\n         ST    R3,DXD_DISPLAY_END            END ADDRESS IN VDATA\n         ITRACE ID=STRT_END,                                           +\n               DATA1=DXD_SOURCE_START,                                 +\n               DATA2=DXD_DISPLAY_START\n         LR    R0,R1                         COPY START POSITION\n         AR    R0,R2                         PLUS LENGTH\n         BCTR  R0,0\n         C     R0,DXD_RECORD_LENGTH          BEYOND END OF RECORD?\n         BH    ERR0010                       YES\n         CLC   FMAT_ROW,SPF_VDEPTH+2         BELOW BOTTOM OF SCREEN?\n         BH    ERR0020                       YES\n         L     R0,DXD_SOURCE_START\n         LH    R1,FMAT_LENGTH\n         L     R14,DXD_DISPLAY_START\n         LR    R15,R1\n         MVCL  R14,R0                        COPY SOURCE TO DISPLAY\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         MVI   COMM_MSG_ID+1,1\n         B     ERR1000\nERR0020  DS    0H\n         MVI   COMM_MSG_ID+1,2\nERR1000  DS    0H\n         MVC   COMM_MSG_CSECT,MODID\n         L     R15,COMM_V_OSMSG\n         BALR  R14,R15\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         LH    R15,DXD_RC                    SET RC\n         L     R13,4(,R13)                   RESTORE R13\n         L     R14,12(,R13)                  RESTORE R14\n         LM    R0,R12,20(R13)                RESTORE REGISTERS\n         BR    R14                           RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START      DC      Q(DXDFCHAR)\n\n               LTORG\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDFCHAR             DSECT\n                     COPY     DXDPREF\n\nDXD_RC               DS   H\n\nDXD_SOURCE_START     DS   A\nDXD_SOURCE_END       DS   A\nDXD_DISPLAY_START    DS   A\nDXD_DISPLAY_END      DS   A\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               COMMON\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               SESSION\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               BPXYSTAT DSECT=YES,LIST=YES\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nFMT_COMMON     DSECT\n               DS      (DXD_PREFIX_L)X\n               COPY    FMTCOMM\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               COPY    FMAT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               OSSPFD  TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               COPY    TRENTRY\n* ------------------------------------------------------------------- *\n*              EQUATES                                                *\n* ------------------------------------------------------------------- *\n               COPY    REGEQU\n               END     FMTCHAR\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "FMTCLNUP": {"ttr": 518, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*  MODULE NAME: FMTCLNUP                                              *\n*                                                                     *\n*  Free the FMAT blocks                                               *\n*                                                                     *\n* ------------------------------------------------------------------- *\nFMTCLNUP CSECT\nFMTCLNUP AMODE 31\nFMTCLNUP RMODE ANY\n         USING OSCOMM,R12\n         USING SESSION,R11\n         USING FMTCLNUP,R15\n         B     INIT0000\nMODID    DC    CL8'FMTCLNUP'\n         DC    CL8'&SYSDATE'\n         DC    CL7'&SYSTIME'\nINIT0000 DS    0H\n         STM   R14,R12,12(R13)               SAVE REGS\n         LR    R10,R15                       COPY ENTRY POINT\n         DROP  R15\n         USING FMTCLNUP,R10                  DEFINE BASE\n         L     R9,SESS_FORMATTER_DXD_ADDR    WORK AREA BASE\n         USING FMT_COMMON,R9                 FORMATTER COMMON\n         LR    R15,R9\n         L     R15,SESS_FORMATTER_DXD_ADDR   DXD BASE\n         A     R15,DXD_START                 PLUS DISP\n         ST    R13,4(R15)                    SAVE R13\n         ST    R15,8(R13)                    CHAIN SAVE AREA\n         LR    R13,R15                       COPY WORK AREA ADDRESS\n         USING DXDCLNUP,R13                  DEFINE WORK AREA BASE\n         MVC   DXD_CSECT,MODID\n         XC    DXD_IF_LEVEL,DXD_IF_LEVEL     RESET IF LEVEL\n         ICM   R7,15,SESS_FORMATTER_DATA     FIRST FMAT BLOCK\n         BZ    EXIT0000                      NO FMAT BLOCKS\n         USING FMAT,R7\nFREE0010 DS    0H\n         ITRACE ID=FMAT,                     TRACE EACH BLOCK          +\n               RDATA1=R7,                                              +\n               DATA2=(FMAT_FIELDS,4)\n         ICM   R2,15,FMAT_FIELDS             ANY DEPENDANT FIELDS?\n         BZ    FREE0020                      NO\n         LH    R15,DXD_IF_LEVEL              CURRENT IF LEVEL\n         ITRACE ID=DOWN,                                               +\n               RDATA1=R15,                                             +\n               RDATA2=R2\n         SLL   R15,2                         MULTIPLY BY 4\n         LA    R15,DXD_IF_TABLE(R15)         COMPUTE ADDRESS\n         ST    R7,0(R15)                     SAVE IF FMAT BLOCK ADDRESS\n         LH    R15,DXD_IF_LEVEL              IF LEVEL (AGAIN)\n         LA    R15,1(,R15)                   PLUS 1\n         STH   R15,DXD_IF_LEVEL              UPDATE IF LEVEL\n         LR    R7,R2                         COPY DEPENDANT'S ADDRESS\nFREE0020 DS    0H\n         L     R2,FMAT_NEXT                  NEXT FMAT BLOCK'S ADDRESS\nFREE0030 DS    0H\n         ITRACE ID=FREEFMAT,                 FREEMAIN THIS FMAT BLOCK  +\n               RDATA1=R7,                                              +\n               RDATA2=R2\n         FREEMAIN RU,                                                  +\n               A=(R7),                                                 +\n               LV=FMAT_L\n         LTR   R7,R2                         COPY NEXT ON CHAIN\n         BNZ   FREE0010                      FREE IT\n         SR    R15,R15                       CLEAR R15\n         ICM   R15,3,DXD_IF_LEVEL            CURRENT IF LEVEL\n         BZ    FREE0040                      ZERO.. ALL DONE\n         BCTR  R15,0                         MINUS 1\n         STH   R15,DXD_IF_LEVEL              UPDATE IF LEVEL\n         SLL   R15,2                         MULTIPLY BY 4\n         LA    R15,DXD_IF_TABLE(R15)         COMPUTE ADDRESS\n         L     R7,0(R15)                     RESTORE SAVED FMAT ADDRESS\n         ITRACE ID=UP,                                                 +\n               RDATA1=R15,                                             +\n               RDATA2=R7\n         B     FREE0020                      FREE IT\nFREE0040 DS    0H\n         XC    SESS_FORMATTER_DATA,SESS_FORMATTER_DATA\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         L     R13,4(R13)                    RESTORE R13\n         LM    R14,R12,12(R13)               RESTORE REGISTERS\n         SR    R15,R15                       SET RC\n         BR    R14                           RETURN\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START      DC      Q(DXDCLNUP)\n               LTORG\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDCLNUP       DSECT\n               COPY    DXDPREF\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nFMT_COMMON     DSECT\n               DS      (DXD_PREFIX_L)X\n               COPY    FMTCOMM\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               COMMON\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               SESSION\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               BPXYSTAT DSECT=YES,LIST=YES\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               COPY    FORMAT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               COPY    FMAT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               COPY    TRENTRY\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               COPY    REGEQU\n               END     FMTCLNUP\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "FMTCNTRL": {"ttr": 522, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*  Module name: FMTCNTRL                                              *\n*                                                                     *\n*  Process control statements                                         *\n*                                                                     *\n*                                                                     *\n*  At time of entry R1 is the address of the control statement        *\n*                                                                     *\n* ------------------------------------------------------------------- *\nFMTCNTRL CSECT\nFMTCNTRL AMODE 31\nFMTCNTRL RMODE ANY\n         USING OSCOMM,R12\n         USING SESSION,R11\n         USING FMTCNTRL,R15\n         B     INIT0000\nMODID    DC    CL8'FMTCNTRL'\n         DC    CL8'&SYSDATE'\n         DC    CL7'&SYSTIME'\nINIT0000 DS    0H\n         STM   R14,R12,12(R13)               SAVE REGS\n         LR    R10,R15                       COPY ENTRY POINT\n         DROP  R15\n         USING FMTCNTRL,R10                  DEFINE BASE\n         L     R9,SESS_FORMATTER_DXD_ADDR    WORK AREA BASE\n         USING FMT_COMMON,R9                 FORMATTER COMMON\n         LR    R15,R9\n         A     R15,DXD_START                 PLUS DISP\n         ST    R13,4(R15)                    SAVE R13\n         ST    R15,8(R13)                    CHAIN SAVE AREA\n         LR    R13,R15                       COPY WORK AREA ADDRESS\n         USING DXDCNTRL,R13                  DEFINE WORK AREA BASE\n         MVC   DXD_CSECT,MODID\n         ITRACE ID=ENTRY,                                              +\n               RDATA1=R13,                                             +\n               RDATA2=R9\n         XC    DXD_RC,DXD_RC                 SET RC\n         USING FORMAT,R1                     DEFINE BASE\n         ITRACE ID=TYPE,                                               +\n               RDATA1=R1,                                              +\n               DATA2=FORMAT_TYPE\n         CLC   ENDIF,FORMAT_TYPE             ENDIF STATEMENT?\n         BE    ENDIF000                      YES\n         CLC   FIELD,FORMAT_TYPE             FIELD STATEMENT?\n         BE    FIELD000                      YES\n         CLC   IF,FORMAT_TYPE                IF STATEMENT?\n         BE    IF0000                        YES\n         B     ERR0010\nENDIF000 DS    0H\n         ITRACE ID=ENDIF\n         L     R15,V_CNTRLEIF                CNTRLEIF ENTRY POINT\n         BALR  R14,R15                       LINK TO CNTRLEIF\n         ITRACE ID=ENDIFX\n         B     EXIT0000\nIF0000   DS    0H\n         ITRACE ID=IF\n         L     R15,V_CNTRLIF                 CNTRLIF ENTRY POINT\n         BALR  R14,R15                       LINK TO CNTRLIF\n         ITRACE ID=IFX\n         B     EXIT0000\nFIELD000 DS    0H\n         ITRACE ID=FIELD\n         L     R15,V_CNTRLFLD                CNTRLFLD ENTRY POINT\n         BALR  R14,R15                       LINK TO CNTRLFLD\n         ITRACE ID=FLDX\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         MVI   COMM_MSG_ID+1,1               UNRECOGNIZED RECORD TYPE\n         MVC   COMM_MSG_CSECT,MODID          SET MODULE NAME\n         L     R15,COMM_V_OSMSG              MESSAGE BUILDER\n         BALR  R14,R15                       BUILD MESSAGE\n         MVI   DXD_RC+1,8                    SET RETURN CODE\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         LH    R15,DXD_RC                    SET RETURN CODE\n         ITRACE ID=EXIT,                                               +\n               RDATA1=R15\n         L     R13,4(R13)                    RESTORE R13\n         L     R14,12(,R13)                  RESTORE R14\n         LM    R0,R12,20(R13)                RESTORE REGISTERS\n         BR    R14                           RETURN\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START      DC      Q(DXDCNTRL)\nV_CNTRLEIF     DC      V(CNTRLEIF)\nV_CNTRLFLD     DC      V(CNTRLFLD)\nV_CNTRLIF      DC      V(CNTRLIF)\nENDIF          DC      CL8'ENDIF'\nFIELD          DC      CL8'FIELD'\nIF             DC      CL8'IF'\n               LTORG\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDCNTRL       DSECT\n               COPY    DXDPREF\nDXD_RC         DS      H\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nFMT_COMMON     DSECT\n               DS      (DXD_PREFIX_L)X\n               COPY    FMTCOMM\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               COMMON\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               SESSION\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               BPXYSTAT DSECT=YES,LIST=YES\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               COPY    FORMAT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               COPY    FMAT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               COPY    TRENTRY\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               COPY    REGEQU\n               END     FMTCNTRL\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "FMTEDIT": {"ttr": 526, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*  MODULE NAME: FMTEDIT                                               *\n*                                                                     *\n*  Process custom edit words                                          *\n*                                                                     *\n*  Rather than use hardware edit instruction (ED), the editing is     *\n*  done more 'manually'.  \"Edit words\" are much like \"PICTURE\"        *\n*  values valid to COBOL.                                             *\n*                                                                     *\n* ------------------------------------------------------------------- *\nFMTEDIT  CSECT\nFMTEDIT  AMODE 31\nFMTEDIT  RMODE ANY\n         USING OSCOMM,R12\n         USING SESSION,R11\n         USING FMTEDIT,R15\n         B     INIT0000\nMODID    DC    CL8'FMTEDIT'\n         DC    CL8'&SYSDATE'\n         DC    CL7'&SYSTIME'\nINIT0000 DS    0H\n         STM   R14,R12,12(R13)               SAVE REGS\n         LR    R10,R15                       COPY ENTRY POINT\n         DROP  R15\n         USING FMTEDIT,R10                   DEFINE BASE\n         L     R9,SESS_FORMATTER_DXD_ADDR    WORK AREA\n         LR    R15,R9                        COPY WORK AREA ADDRESS\n         USING FMT_COMMON,R9\n         L     R15,SESS_FORMATTER_DXD_ADDR   WORK AREA BASE\n         A     R15,DXD_START                 PLUS DISP\n         ST    R13,4(R15)                    SAVE R13\n         ST    R15,8(R13)                    CHAIN SAVE AREA\n         LR    R13,R15                       COPY WORK AREA ADDRESS\n         USING DXDEDIT,R13                   DEFINE WORK AREA BASE\n         MVC   DXD_CSECT,MODID\n         L     R7,DXD_FMAT_FMAT              FMAT BEING PROCESSED\n         USING FMAT,R7\n         L     R8,COMM_OSSPFD\n         USING OSSPFD,R8\n         ITRACE ID=ENTRY,                                              +\n               DATA1=(COMM_INFO_01+00,8),                              +\n               DATA2=(COMM_INFO_01+08,8)\n* ------------------------------------------------------------------- *\n*                                                                     *\n*     Perform \"custom editing\"                                        *\n*                                                                     *\n*     The number to be edited has been unpacked into COMM_INFO_01.    *\n*     The edit word is in FMAT_DATA.                                  *\n*     Output will be performed into COMM_INFO_02, then copied to      *\n*     the VDATA buffer.                                               *\n*                                                                     *\n*     The length of the output is determined by the user supplied     *\n*     edit mask (columns 50-80 on the FIELD control statement).       *\n*     The end of the mask will be indicated by a byte of binary zero. *\n*                                                                     *\n* ------------------------------------------------------------------- *\nINIT0010 DS    0H\n         LA    R2,COMM_INFO_01+15\n         LA    R1,15\nINIT0020 DS    0H\n         CLI   0(R2),X'00'                   ZEROS?\n         BNE   INIT0030                      NO\n         BCTR  R2,0\n         BCT   R1,INIT0020                   LOOP\nINIT0030 DS    0H\n         MVC   DXD_SIGN,0(R2)                SAVE SIGN\n         ITRACE ID=ED_SIGN,                                            +\n               DATA1=(DXD_SIGN,1)\nEDIT0010 DS    0H\n         ITRACE ID=EDITWORD,                                           +\n               DATA1=FMAT_DATA+0,                                      +\n               DATA2=FMAT_DATA+8\n         MVI   DXD_EDIT_FLAGS,0              RESET ALL FLAGS\n         LA    R2,COMM_INFO_01               NUMBER TO 'EDIT'\n         LA    R3,FMAT_DATA                  'EDIT MASK'\n         LA    R4,COMM_INFO_02               OUTPUT ADDRESS\n         MVC   COMM_INFO_02(L'FMAT_DATA),FMAT_DATA\nEDIT0020 DS    0H\n         ITRACE ID=X,DATA1=(0(R3),2)\n         CLI   0(R3),C' '                    END OF EDIT MASK?\n         BE    EDIT0120                      YES\n         CLI   0(R3),X'00'                   END OF EDIT MASK?\n         BE    EDIT0120                      YES\n         CLC   =X'C3D900',0(R3)              'CR' AND A BYTE OF ZERO?\n         BE    EDIT0100                      YES\n         CLC   =C'CR ',0(R3)                 'CR '?\n         BE    EDIT0100                      YES\n         CLI   0(R3),C'9'                    EDIT MASK A NINE?\n         BE    EDIT0090                      YES\n         CLI   0(R3),C'Z'                    EDIT MASK A 'Z'?\n         BE    EDIT0030                      YES\n         CLI   0(R3),C'-'                    EDIT MASK A MINUS SIGN?\n         BE    EDIT0060                      YES\n         CLI   0(R3),C'$'                    DOLLAR SIGN?\n         BE    EDIT0030                      YES\n         MVC   0(1,R4),0(R3)                 COPY MASK BYTE TO OUTPUT\n         LA    R3,1(,R3)                     NEXT MASK BYTE\n         LA    R4,1(,R4)                     NEXT OUTPUT\n         B     EDIT0020\nEDIT0030 DS    0H\n         CLI   0(R2),C'0'                    THIS DIGIT A ZERO?\n         BNE   EDIT0090                      NO\n         TM    DXD_EDIT_FLAGS,$SIGNIFICANT   SIGNIFICANT DIGIT FOUND?\n         BO    EDIT0080                      YES\n         TM    FMAT_OPTIONS,$FMAT_FLOAT      FLOATING PAD CHARACTER?\n         BO    EDIT0040\n         MVI   0(R4),C' '                    INSERT BLANK\n         LA    R4,1(,R4)                     NEXT IN OUTPUT\n         LA    R3,1(,R3)                     NEXT IN MASK\n         LA    R2,1(,R2)                     NEXT IN NUMBER\n         B     EDIT0020\nEDIT0040 DS    0H\n         MVC   0(1,R4),FMAT_DATA             COPY 1ST EDIT MASK CHAR\n         LR    R1,R4                         COPY ADDRESS\n         BCTR  R1,0                          BACK UP ONE\n         CLC   0(1,R1),FMAT_DATA             TWO IN A ROW?\n         BNE   EDIT0050                      NO\n         MVI   0(R1),C' '                    CHANGE 1ST ONE TO A BLANK\nEDIT0050 DS    0H\n         CLI   FMAT_DATA,C'-'                IS PAD A MINUS SIGN?\n         BE    EDIT0060                      YES\n         CLI   FMAT_DATA,C'Z'                IS PAD A 'Z'?\n         BNE   EDIT0070                      NO\n         MVI   0(R4),C' '                    CHANGE TO A BLANK\n         B     EDIT0070\nEDIT0060 DS    0H\n         CLI   DXD_SIGN,C'D'                 NEGATIVE NUMBER?\n         BE    EDIT0070                      YES.. LEAVE HYPHEN\n         MVI   0(R4),C' '                    CHANGE TO A BLANK\nEDIT0070 DS    0H\n         LA    R4,1(,R4)                     NEXT IN OUTPUT\n         LA    R3,1(,R3)                     NEXT IN MASK\n         LA    R2,1(,R2)                     NEXT IN NUMBER\n         B     EDIT0020\nEDIT0080 DS    0H\n         MVI   0(R4),C'0'                    INSERT A ZERO\n         LA    R4,1(,R4)                     NEXT IN OUTPUT\n         LA    R3,1(,R3)                     NEXT IN MASK\n         LA    R2,1(,R2)                     NEXT IN NUMBER\n         B     EDIT0020\nEDIT0090 DS    0H\n         OI    DXD_EDIT_FLAGS,$SIGNIFICANT   FORCE SIGNIFICANT DIGIT\n         MVC   0(1,R4),0(R2)                 COPY THE DIGIT\n         LA    R2,1(,R2)                     NEXT IN NUMBER\n         LA    R3,1(,R3)                     NEXT IN MASK\n         LA    R4,1(,R4)                     NEXT IN OUTPUT\n         B     EDIT0020\nEDIT0100 DS    0H\n         ITRACE ID=Y,DATA1=(DXD_SIGN,1)\n         CLI   DXD_SIGN,C'D'                 NEGATIVE NUMBER?\n         BE    EDIT0110                      YES.. LEAVE 'CR'\n         MVC   0(2,R4),COMM_BLANKS           OVER-LAY WITH BLANKS\nEDIT0110 DS    0H\n         LA    R4,2(,R4)                     ADD 2 TO LENGTH\nEDIT0120 DS    0H\n         LA    R1,COMM_INFO_02               OUTPUT AREA\n         SR    R4,R1                         LENGTH GENERATED\n         BCTR  R4,0                          FOR EXECUTE\n         LH    R1,FMAT_ROW                   ROW ON DISPLAY\n         BCTR  R1,0                          RELATIVE TO ZERO\n         MH    R1,SPF_VWIDTH+2               TIMES WIDTH\n         LH    R2,FMAT_COLUMN                COLUMN NUMBER\n         BCTR  R2,0                          RELATIVE TO ZERO\n         AR    R1,R2                         PLUS COLUMN\n         A     R1,DXD_VDATA_ADDR             PLUS VDATA ADDR\n         EX    R4,PACK_MVC                   COPY TO OUTPUT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         L     R13,4(,R13)                   RESTORE R13\n         L     R14,12(,R13)                  RESTORE R14\n         LM    R0,R12,20(R13)                RESTORE REGISTERS\n         BR    R14                           RETURN\n* ------------------------------------------------------------------- *\nPACK_MVC MVC   0(0,R1),COMM_INFO_02          COPY TO VDATA BUFFER\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START      DC      Q(DXDEDIT)\n\n\n               LTORG\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDEDIT              DSECT\n                     COPY  DXDPREF\n\nDXD_SIGN             DS    X\n\nDXD_EDIT_FLAGS       DS    X\n$SIGNIFICANT         EQU   X'80'          SIGNIFICANT DIGIT FOUND\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               COMMON\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               SESSION\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               BPXYSTAT DSECT=YES,LIST=YES\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nFMT_COMMON     DSECT\n               DS      (DXD_PREFIX_L)X\n               COPY    FMTCOMM\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               COPY    FMAT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               OSSPFD  TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               COPY    TRENTRY\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               COPY    REGEQU\n               END     FMTEDIT\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "FMTEIF": {"ttr": 772, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*  MODULE NAME: FMTEIF                                                *\n*                                                                     *\n*  Process ENDIF FMAT block during a 'format'                         *\n*                                                                     *\n* ------------------------------------------------------------------- *\nFMTEIF   CSECT\nFMTEIF   AMODE 31\nFMTEIF   RMODE ANY\n         USING OSCOMM,R12\n         USING SESSION,R11\n         USING FMTEIF,R15\n         B     INIT0000\nMODID    DC    CL8'FMTEIF'\n         DC    CL8'&SYSDATE'\n         DC    CL7'&SYSTIME'\nINIT0000 DS    0H\n         STM   R14,R12,12(R13)               SAVE REGS\n         LR    R10,R15                       COPY ENTRY POINT\n         DROP  R15\n         USING FMTEIF,R10                    DEFINE BASE\n         L     R9,SESS_FORMATTER_DXD_ADDR    WORK AREA\n         LR    R15,R9                        COPY WORK AREA ADDRESS\n         USING FMT_COMMON,R9\n         L     R15,SESS_FORMATTER_DXD_ADDR   WORK AREA BASE\n         A     R15,DXD_START                 PLUS DISP\n         ST    R13,4(R15)                    SAVE R13\n         ST    R15,8(R13)                    CHAIN SAVE AREA\n         LR    R13,R15                       COPY WORK AREA ADDRESS\n         USING DXDFEIF,R13                   DEFINE WORK AREA BASE\n         MVC   DXD_CSECT,MODID\n         L     R7,DXD_FMAT_FMAT              FMAT BEING PROCESSED\n         USING FMAT,R7\n         ITRACE ID=ENTRY,                                              +\n               RDATA1=R7\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         LH    R1,DXD_IF_LEVEL               CURRENT IF LEVEL\n         BCTR  R1,0                          MINUS 1\n         STH   R1,DXD_IF_LEVEL               SAVE UPDATED IF LEVEL\n         SLL   R1,2                          MULTIPLY BY 4\n         LA    R1,DXD_IF_TABLE(R1)           COMPUTE ADDRESS\n         L     R7,0(R1)                      SAVED FMAT BLOCK ADDR\n         MVC   DXD_FMAT_FMAT,FMAT_NEXT       CONTINUE WITH NEXT FMAT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT,                                               +\n               DATA1=(DXD_FMAT_FMAT,4)\n         LH    R15,DXD_RC                    SET RC\n         L     R13,4(,R13)                   RESTORE R13\n         L     R14,12(,R13)                  RESTORE R14\n         LM    R0,R12,20(R13)                RESTORE REGISTERS\n         BR    R14                           RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START      DC      Q(DXDFEIF)\n\n               LTORG\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDFEIF        DSECT\n               COPY    DXDPREF\n\nDXD_RC         DS      H\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               COMMON\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               SESSION\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               BPXYSTAT DSECT=YES,LIST=YES\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nFMT_COMMON     DSECT\n               DS      (DXD_PREFIX_L)X\n               COPY    FMTCOMM\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               COPY    FMAT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               COPY    TRENTRY\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               COPY    REGEQU\n               END     FMTEIF\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "FMTFLD": {"ttr": 776, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*  MODULE NAME: FMTFLD                                                *\n*                                                                     *\n*  Process FIELD FMAT block during a 'format'                         *\n*                                                                     *\n* ------------------------------------------------------------------- *\nFMTFLD   CSECT\nFMTFLD   AMODE 31\nFMTFLD   RMODE ANY\n         USING OSCOMM,R12\n         USING SESSION,R11\n         USING FMTFLD,R15\n         B     INIT0000\nMODID    DC    CL8'FMTFLD'\n         DC    CL8'&SYSDATE'\n         DC    CL7'&SYSTIME'\nINIT0000 DS    0H\n         STM   R14,R12,12(R13)               SAVE REGS\n         LR    R10,R15                       COPY ENTRY POINT\n         DROP  R15\n         USING FMTFLD,R10                    DEFINE BASE\n         L     R9,SESS_FORMATTER_DXD_ADDR    WORK AREA\n         LR    R15,R9                        COPY WORK AREA ADDRESS\n         USING FMT_COMMON,R9\n         L     R15,SESS_FORMATTER_DXD_ADDR   WORK AREA BASE\n         A     R15,DXD_START                 PLUS DISP\n         ST    R13,4(R15)                    SAVE R13\n         ST    R15,8(R13)                    CHAIN SAVE AREA\n         LR    R13,R15                       COPY WORK AREA ADDRESS\n         USING DXDFFLD,R13                   DEFINE WORK AREA BASE\n         MVC   DXD_CSECT,MODID\n         L     R7,DXD_FMAT_FMAT              FMAT BEING PROCESSED\n         USING FMAT,R7\n         ITRACE ID=ENTRY,                                              +\n               RDATA1=R7\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         CLI   FMAT_DATA_TYPE,$FMAT_BINARY   BINARY?\n         BE    FLD0010                       YES\n         CLI   FMAT_DATA_TYPE,$FMAT_CHARACTER\n         BE    FLD0020                       YES\n         CLI   FMAT_DATA_TYPE,$FMAT_HEADING  HEADING?\n         BE    FLD0030                       YES\n         CLI   FMAT_DATA_TYPE,$FMAT_HEX      HEX?\n         BE    FLD0040                       YES\n         CLI   FMAT_DATA_TYPE,$FMAT_PACKED   PACKED DECIMAL?\n         BE    FLD0050                       YES\n         DC    H'0'\nFLD0010  DS    0H\n         ITRACE ID=BINARY                    BINARY FIELD\n         L     R15,V_FMTBIN\n         B     FLD0060\nFLD0020  DS    0H\n         ITRACE ID=CHARACTER\n         L     R15,V_FMTCHAR                 CHARACTER FIELD\n         B     FLD0060\nFLD0030  DS    0H\n         ITRACE ID=HEADING\n         L     R15,V_FMTHEAD                 HEADING FIELD\n         B     FLD0060\nFLD0040  DS    0H\n         ITRACE ID=HEX\n         L     R15,V_FMTHEX                  HEX FIELD\n         B     FLD0060\nFLD0050  DS    0H\n         ITRACE ID=PACKED\n         L     R15,V_FMTPACK                 PACKED DECIMAL FIELD\nFLD0060  DS    0H\n         ITRACE ID=LINK,                                               +\n               RDATA1=R15\n         BALR  R14,R15\n         ITRACE ID=LINKX\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         MVC   DXD_FMAT_FMAT,FMAT_NEXT       SET NEXT FMAT\n         ITRACE ID=EXIT,                                               +\n               DATA1=(DXD_FMAT_FMAT,4)\n         LH    R15,DXD_RC                    SET RC\n         L     R13,4(,R13)                   RESTORE R13\n         L     R14,12(,R13)                  RESTORE R14\n         LM    R0,R12,20(R13)                RESTORE REGISTERS\n         BR    R14                           RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START      DC      Q(DXDFFLD)\nV_FMTBIN       DC      V(FMTBIN)\nV_FMTCHAR      DC      V(FMTCHAR)\nV_FMTHEAD      DC      V(FMTHEAD)\nV_FMTHEX       DC      V(FMTHEX)\nV_FMTPACK      DC      V(FMTPACK)\n\n               LTORG\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDFFLD        DSECT\n               COPY    DXDPREF\n\nDXD_RC         DS      H\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               COMMON\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               SESSION\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               BPXYSTAT DSECT=YES,LIST=YES\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nFMT_COMMON     DSECT\n               DS      (DXD_PREFIX_L)X\n               COPY    FMTCOMM\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               COPY    FMAT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               COPY    TRENTRY\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               COPY    REGEQU\n               END     FMTFLD\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "FMTHEAD": {"ttr": 780, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*  MODULE NAME: FMTHEAD                                               *\n*                                                                     *\n*  Process heading (constant) fields during a 'format'                *\n*                                                                     *\n* ------------------------------------------------------------------- *\nFMTHEAD  CSECT\nFMTHEAD  AMODE 31\nFMTHEAD  RMODE ANY\n         USING OSCOMM,R12\n         USING SESSION,R11\n         USING FMTHEAD,R15\n         B     INIT0000\nMODID    DC    CL8'FMTHEAD'\n         DC    CL8'&SYSDATE'\n         DC    CL7'&SYSTIME'\nINIT0000 DS    0H\n         STM   R14,R12,12(R13)               SAVE REGS\n         LR    R10,R15                       COPY ENTRY POINT\n         DROP  R15\n         USING FMTHEAD,R10                   DEFINE BASE\n         L     R9,SESS_FORMATTER_DXD_ADDR    WORK AREA\n         LR    R15,R9                        COPY WORK AREA ADDRESS\n         USING FMT_COMMON,R9\n         L     R15,SESS_FORMATTER_DXD_ADDR   WORK AREA BASE\n         A     R15,DXD_START                 PLUS DISP\n         ST    R13,4(R15)                    SAVE R13\n         ST    R15,8(R13)                    CHAIN SAVE AREA\n         LR    R13,R15                       COPY WORK AREA ADDRESS\n         USING DXDFHEAD,R13                  DEFINE WORK AREA BASE\n         MVC   DXD_CSECT,MODID\n         L     R7,DXD_FMAT_FMAT              FMAT BEING PROCESSED\n         USING FMAT,R7\n         ITRACE ID=ENTRY,                                              +\n               RDATA1=R7\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         L     R8,COMM_OSSPFD\n         USING OSSPFD,R8\n         LA    R0,FMAT_DATA                  SOURCE\n         LA    R1,L'FMAT_DATA                LENGTH\n         LH    R2,FMAT_ROW                   ROW ON DISPLAY\n         BCTR  R2,0                          RELATIVE TO ZERO\n         MH    R2,SPF_VWIDTH+2               MULTIPLY BY WIDTH\n         AH    R2,FMAT_COLUMN                PLUS COLUMN\n         BCTR  R2,0                          RELATIVE TO ZERO\n         A     R2,DXD_VDATA_ADDR             PLUS VDATA ADDRESS\n         ITRACE ID=STRT_END,                                           +\n               RDATA1=R0,                                              +\n               RDATA2=R2\n         LR    R3,R1                         COPY LENGTH\n         MVCL  R2,R0                         COPY SOURCE TO DISPLAY\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         LH    R15,DXD_RC                    SET RC\n         L     R13,4(,R13)                   RESTORE R13\n         L     R14,12(,R13)                  RESTORE R14\n         LM    R0,R12,20(R13)                RESTORE REGISTERS\n         BR    R14                           RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START      DC      Q(DXDFHEAD)\n\n               LTORG\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDFHEAD             DSECT\n                     COPY     DXDPREF\n\nDXD_RC               DS   H\n\nDXD_SOURCE_START     DS   A\nDXD_SOURCE_END       DS   A\nDXD_DISPLAY_START    DS   A\nDXD_DISPLAY_END      DS   A\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               COMMON\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               SESSION\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               BPXYSTAT DSECT=YES,LIST=YES\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nFMT_COMMON     DSECT\n               DS      (DXD_PREFIX_L)X\n               COPY    FMTCOMM\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               COPY    FMAT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               OSSPFD  TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               COPY    TRENTRY\n* ------------------------------------------------------------------- *\n*              EQUATES                                                *\n* ------------------------------------------------------------------- *\n               COPY    REGEQU\n               END     FMTHEAD\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "FMTHEX": {"ttr": 784, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*  MODULE NAME: FMTHEX                                                *\n*                                                                     *\n*  Process heading (constant) fields during a 'format'                *\n*                                                                     *\n* ------------------------------------------------------------------- *\nFMTHEX   CSECT\nFMTHEX   AMODE 31\nFMTHEX   RMODE ANY\n         USING OSCOMM,R12\n         USING SESSION,R11\n         USING FMTHEX,R15\n         B     INIT0000\nMODID    DC    CL8'FMTHEX'\n         DC    CL8'&SYSDATE'\n         DC    CL7'&SYSTIME'\nINIT0000 DS    0H\n         STM   R14,R12,12(R13)               SAVE REGS\n         LR    R10,R15                       COPY ENTRY POINT\n         DROP  R15\n         USING FMTHEX,R10                    DEFINE BASE\n         L     R9,SESS_FORMATTER_DXD_ADDR    WORK AREA\n         LR    R15,R9                        COPY WORK AREA ADDRESS\n         USING FMT_COMMON,R9\n         L     R15,SESS_FORMATTER_DXD_ADDR   WORK AREA BASE\n         A     R15,DXD_START                 PLUS DISP\n         ST    R13,4(R15)                    SAVE R13\n         ST    R15,8(R13)                    CHAIN SAVE AREA\n         LR    R13,R15                       COPY WORK AREA ADDRESS\n         USING FMTFHEX,R13                   DEFINE WORK AREA BASE\n         MVC   DXD_CSECT,MODID\n         L     R7,DXD_FMAT_FMAT              FMAT BEING PROCESSED\n         USING FMAT,R7\n         ITRACE ID=ENTRY,                                              +\n               RDATA1=R7\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         L     R8,COMM_OSSPFD\n         USING OSSPFD,R8\n         LH    R1,FMAT_START                 STARTING POSITION\n         LH    R2,FMAT_LENGTH                LENGTH\n         CH    R2,=Y(L'COMM_INFO_01/2)       TOO LONG?\n         BL    HEX0000                       NO\n         LH    R2,=Y(L'COMM_INFO_01/2)       LIMIT LENGTH\nHEX0000  DS    0H\n         LR    R3,R2                         SAVE LENGTH USED\n         A     R1,DXD_RECORD_ADDR            PLUS RECORD ADDRESS\n         BCTR  R1,0\n         LA    R15,COMM_INFO_01              WORK AREA FOR UNPACKING\nHEX0010  DS    0H\n         UNPK  0(3,R15),0(2,R1)              UNPACK DATA\n         TR    0(2,R15),HEXCHAR              TRANSLATE\n         LA    R1,1(,R1)                     NEXT SOURCE\n         LA    R15,2(,R15)                   NEXT OUTPUT\n         BCT   R2,HEX0010                    LOOP\n         LA    R0,COMM_INFO_01               SOURCE IS UNPACKED DATA\n         ST    R0,DXD_SOURCE_START\n         SLL   R3,1                          DOUBLE LENGTH\n         ST    R3,DXD_DISPLAY_LENGTH\n         AR    R0,R3                         PLUS LENGTH\n         BCTR  R0,0                          LAST BYTE\n         ST    R0,DXD_SOURCE_END\n         LH    R0,FMAT_ROW                   ROW ON DISPLAY\n         LH    R1,FMAT_COLUMN                COLUMN ON DISPLAY\n         BCTR  R0,0                          RELATIVE TO ZERO\n         MH    R0,SPF_VWIDTH+2               MULTIPLY BY LINE LENGTH\n         BCTR  R1,0                          COLUMN RELATIVE TO ZERO\n         AR    R1,R0                         PLUS COLUMN\n         A     R1,DXD_VDATA_ADDR             PLUS VDATA ADDRESS\n         ST    R1,DXD_DISPLAY_START          START ADDR IN VDATA\n         AR    R1,R3                         PLUS LENGTH\n         ST    R3,DXD_DISPLAY_END            END ADDRESS IN VDATA\n         ITRACE ID=STRT_END,                                           +\n               DATA1=DXD_SOURCE_START,                                 +\n               DATA2=DXD_DISPLAY_START\n         L     R0,DXD_SOURCE_START           UNPACKED DATA ADDRESS\n         LR    R1,R3                         DISPLAY LENGTH\n         L     R14,DXD_DISPLAY_START         ADDRESS IN VDATA\n         LR    R15,R1\n         MVCL  R14,R0                        COPY SOURCE TO DISPLAY\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         MVI   COMM_MSG_ID+1,1\n         B     ERR1000\nERR0020  DS    0H\n         MVI   COMM_MSG_ID+1,2\nERR1000  DS    0H\n         MVC   COMM_MSG_CSECT,MODID\n         L     R15,COMM_V_OSMSG\n         BALR  R14,R15\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         LH    R15,DXD_RC                    SET RC\n         L     R13,4(,R13)                   RESTORE R13\n         L     R14,12(,R13)                  RESTORE R14\n         LM    R0,R12,20(R13)                RESTORE REGISTERS\n         BR    R14                           RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START      DC      Q(FMTFHEX)\n\nHEXCHAR        EQU     *-C'0'\n               DC      C'0123456789ABCDEF'\n\n               LTORG\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nFMTFHEX              DSECT\n                     COPY     DXDPREF\n\nDXD_RC               DS   H\n\nDXD_SOURCE_START     DS   A\nDXD_SOURCE_END       DS   A\nDXD_DISPLAY_START    DS   A\nDXD_DISPLAY_END      DS   A\nDXD_DISPLAY_LENGTH   DS   F\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               COMMON\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               SESSION\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               BPXYSTAT DSECT=YES,LIST=YES\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nFMT_COMMON     DSECT\n               DS      (DXD_PREFIX_L)X\n               COPY    FMTCOMM\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               COPY    FMAT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               OSSPFD  TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               COPY    TRENTRY\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               COPY    REGEQU\n               END     FMTHEX\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "FMTIF": {"ttr": 1028, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*  MODULE NAME: FMTIF                                                 *\n*                                                                     *\n*  Process IF FMAT blocks during a 'format'                           *\n*                                                                     *\n* ------------------------------------------------------------------- *\nFMTIF    CSECT\nFMTIF    AMODE 31\nFMTIF    RMODE ANY\n         USING OSCOMM,R12\n         USING SESSION,R11\n         USING FMTIF,R15\n         B     INIT0000\nMODID    DC    CL8'FMTIF'\n         DC    CL8'&SYSDATE'\n         DC    CL7'&SYSTIME'\nINIT0000 DS    0H\n         STM   R14,R12,12(R13)               SAVE REGS\n         LR    R10,R15                       COPY ENTRY POINT\n         DROP  R15\n         USING FMTIF,R10                     DEFINE BASE\n         L     R9,SESS_FORMATTER_DXD_ADDR    WORK AREA\n         LR    R15,R9                        COPY WORK AREA ADDRESS\n         USING FMT_COMMON,R9\n         L     R15,SESS_FORMATTER_DXD_ADDR   WORK AREA BASE\n         A     R15,DXD_START                 PLUS DISP\n         ST    R13,4(R15)                    SAVE R13\n         ST    R15,8(R13)                    CHAIN SAVE AREA\n         LR    R13,R15                       COPY WORK AREA ADDRESS\n         USING DXDFIF,R13                    DEFINE WORK AREA BASE\n         MVC   DXD_CSECT,MODID\n         MVC   DXD_SAVED_RETRY,SESS_RETRY\n         L     R7,DXD_FMAT_FMAT              FMAT BEING PROCESSED\n         USING FMAT,R7\n         ITRACE ID=ENTRY,                                              +\n               RDATA1=R7\n         LA    R1,RTRY0000                   ABEND RETRY POINT\n         ST    R1,SESS_RETRY\n         LH    R6,FMAT_START                 FIELD'S STARTING POINT\n         LH    R1,FMAT_LENGTH                FIELD LENGTH\n         AR    R1,R6                         ENDING POINT\n         BCTR  R1,0                          RELATIVE TO ZERO\n         C     R1,DXD_RECORD_LENGTH          BEYOND END OF RECORD?\n         BH    IF0020                        YES\n         L     R6,DXD_RECORD_ADDR            RECORD ADDRESS\n         LA    R15,IF0010                    MATCH POINT\n         MVC   FMAT_RETURN,B_IF0020          NOT MATCH POINT\nEX_CMPR  EX    R0,FMAT_COMPARE               COMPARE THE DATA\n         B     FMAT_BRANCH                   BRANCH\n* ------------------------------------------------------------------- *\n*        An IF was just executed (data matched)                       *\n* ------------------------------------------------------------------- *\nIF0010   DS    0H\n         LH    R1,DXD_IF_LEVEL               CURRENT IF LEVEL\n         SLL   R1,2                          MULTIPLY BY 4\n         LA    R1,DXD_IF_TABLE(R1)           COMPUTE ADDRESS\n         ST    R7,0(,R1)                     SAVE IF BLOCK ADDRESS\n         LH    R1,DXD_IF_LEVEL               CURRENT IF LEVEL\n         LA    R1,1(,R1)                     PLUS 1\n         STH   R1,DXD_IF_LEVEL               SAVE UPDATED IF LEVEL\n         ITRACE ID=MATCH,                                              +\n               RDATA1=R7,                                              +\n               RDATA2=R1\n         MVC   DXD_FMAT_FMAT,FMAT_FIELDS     FIRST DEPENDANT FMAT\n         B     EXIT0000                      PROCESS FIELDS\n* ------------------------------------------------------------------- *\n*        An IF was just executed (data did not match)                 *\n* ------------------------------------------------------------------- *\nIF0020   DS    0H\n         ITRACE ID=NOMATCH,                                            +\n               RDATA1=R7,                                              +\n               DATA2=(FMAT_NEXT,4)\n         NI    SESS_ABEND_FLAG,255-$ABENDED  FORCE ABEND FLAG OFF\n         MVC   DXD_FMAT_FMAT,FMAT_NEXT       CONTINUE WITH NEXT FMAT\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         MVI   COMM_MSG_ID+1,1               START NOT VALID\n         B     ERR1000\nERR1000  DS    0H\n         MVC   COMM_MSG_CSECT,MODID\n         MVI   COMM_MSG_ID,0\n         L     R15,COMM_V_OSMSG              OSMSG ENTRY POINT\n         BALR  R14,R15                       BUILD MESSAGE\n         MVI   DXD_RC+1,8                    SET RC\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nRTRY0000 DS    0H\n         ITRACE ID=ABEND,                                              +\n               SESS_ABEND_DISP\n         CLC   SESS_ABEND_DISP,EX_CMPR_DISP  ABEND ON EX OF CP?\n         BE    IF0020                        YES..\n         L     R15,COMM_V_OSABEND\n         BALR  R14,R15                       LINK TO OSABEND\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT,                                               +\n               DATA1=(DXD_FMAT_FMAT,4)\n         LH    R15,DXD_RC                    SET RC\n         MVC   SESS_RETRY,DXD_SAVED_RETRY\n         L     R13,4(,R13)                   RESTORE R13\n         L     R14,12(,R13)                  RESTORE R14\n         LM    R0,R12,20(R13)                RESTORE REGISTERS\n         BR    R14                           RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START      DC      Q(DXDFIF)\nB_IF0020       B       IF0020\nEX_CMPR_DISP   DC      Y((EX_CMPR-FMTIF)+4)\n\n               LTORG\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDFIF          DSECT\n                COPY    DXDPREF\n\nDXD_SAVED_RETRY DS     A\n\nDXD_RC          DS     H\n\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               COMMON\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               SESSION\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               BPXYSTAT DSECT=YES,LIST=YES\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nFMT_COMMON     DSECT\n               DS      (DXD_PREFIX_L)X\n               COPY    FMTCOMM\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               COPY    FMAT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               COPY    TRENTRY\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               COPY    REGEQU\n               END     FMTIF\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "FMTMAIN": {"ttr": 1033, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*  Module name: FMTMAIN                                               *\n*                                                                     *\n*  Process USER formats defined via FIELD and IF/ENDIF statements.    *\n*                                                                     *\n*  This code will be called for four reasons.                         *\n*    1) Initialize                                                    *\n*    2) Process a control statement that has been read by FMFORMAT    *\n*    3) Format/display data                                           *\n*    4) Clean up                                                      *\n*                                                                     *\n*                                                                     *\n*  This code has a \"common\" area sort of like OSCOMM.                 *\n*  Good or bad, this common area is the first part of the area        *\n*  GETMAINed for DXD work area.  Therefore FMTMAIN's work area        *\n*  MUST be the first 'section' of this area.  Make sure the           *\n*  link-edit statements specify ORDER statements to insure            *\n*  FMTMAIN is the first CSECT in the output load module.              *\n*                                                                     *\n*                                                                     *\n* ------------------------------------------------------------------- *\nFMTMAIN  CSECT\nFMTMAIN  AMODE 31\nFMTMAIN  RMODE ANY\n         USING OSCOMM,R12\n         USING SESSION,R11\n         USING FMTMAIN,R15\n         B     INIT0000\nMODID    DC    CL8'FMTMAIN'\n         DC    CL8'&SYSDATE'\n         DC    CL7'&SYSTIME'\nINIT0000 DS     0H\n         USING OSCOMM,R12                     DEFINE COMMON AREA BASE\n         STM   R14,R12,12(R13)                SAVE REGS\n         LR    R10,R15                        COPY ENTRY POINT\n         DROP  R15\n         USING FMTMAIN,R10                    DEFINE BASE\n         L     R9,COMM_OSSPFD\n         USING OSSPFD,R9\n         CLI   SESS_FORMAT_FLAGS,$FORMAT_INITIALIZE\n         BE    FMT0000                        YES\n         CLI   SESS_FORMAT_FLAGS,$FORMAT_CONTROL\n         BE    FMT1000                        YES\n         CLI   SESS_FORMAT_FLAGS,$FORMAT_FORMAT\n         BE    FMT2000                        YES\n         CLI   SESS_FORMAT_FLAGS,$FORMAT_CLEANUP\n         BE    FMT3000                        YES\n         DC    H'0'\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nFMT0000  DS    0H\n         L     R3,DXDSIZE                     WORK AREA SIZE\n         GETMAIN RU,                          ACQUIRE WORK AREA        +\n               LV=(R3),                       .. WORK AREA SIZE        +\n               LOC=ANY                        .. MAY BE ABOVE OR BELOW\n         ST    R1,SESS_FORMATTER_DXD_ADDR     SAVE WORK AREA ADDRESS\n         LR    R4,R1                          COPY STORAGE ADDRESS\n         LR    R5,R1                          COPY STORAGE ADDRESS\n         LR    R2,R1                          COPY WORK AREA ADDRESS\n         SR    R1,R1                          CLEAR REGISTER\n         MVCL  R2,R0                          CLEAR WORK AREA\n         ST    R13,4(R4)                      SAVE R13\n         ST    R4,8(R13)                      CHAIN SAVE AREA\n         LR    R13,R4                         COPY WORK AREA ADDRESS\n         USING DXDMAIN,R13                    DEFINE WORK AREA BASE\n         MVC   DXD_CSECT,MODID                IDENTIFY WORK AREA OWNER\n         ITRACE ID=ENTRY,                                              +\n               DATA1=(=C'INIT',4),                                     +\n               RDATA2=R13\n         L     R9,COMM_OSSPFD                 SPF DATA\n         USING OSSPFD,R9                      DEFINE BASE\n         MVC   DXD_SAVED_RETRY,SESS_RETRY     SAVE CALLER'S RETRY\n         XC    DXD_IF_LEVEL,DXD_IF_LEVEL      INITIALIZE IF LEVEL\n         XC    DXD_IF_TABLE(64),DXD_IF_TABLE  INITIALIZE IF TABLE\n         XC    DXD_FIRST_FMAT,DXD_FIRST_FMAT  NO FMAT BLOCK ON CHAIN\n         LA    R0,SESS_FORMATTER_DATA         FMAT BLOCK CHAIN POINT\n         ST    R0,DXD_FMAT_CHAIN_POINT        SET CHAIN POINT\n         LA    R1,PANEL_NAME                  ADDR OF PANEL NAME\n         MVI   COMM_VDATA_FUNC,$VDATA_GETMAIN SET FUNCTION\n         L     R15,COMM_V_OSVDATA             OSVDATA ENTRY POINT\n         BALR  R14,R15                        GET VDATA\n         ST    R0,DXD_VDATA_LENGTH            SAVE LENGTH\n         ST    R1,DXD_VDATA_ADDR              SAVE ADDRESS\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*        Interpret control statement                                  *\n* ------------------------------------------------------------------- *\nFMT1000  DS    0H\n         L     R15,SESS_FORMATTER_DXD_ADDR\n         ST    R13,4(R15)                     CHAIN CALLER'S SAVE AREA\n         ST    R15,8(R13)                     CHAIN OUR SAVE AREA\n         LR    R13,R15\n         ITRACE ID=CONTROL,                                            +\n               RDATA1=R1\n         L     R15,V_FMTCNTRL                 FMTCNTRL ENTRY POINT\n         BALR  R14,R15\n         ITRACE ID=CONTROLX\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*        Format data                                                  *\n* ------------------------------------------------------------------- *\nFMT2000  DS    0H\n         L     R15,SESS_FORMATTER_DXD_ADDR\n         ST    R13,4(R15)                     CHAIN CALLER'S SAVE AREA\n         ST    R15,8(R13)                     CHAIN OUR SAVE AREA\n         LR    R13,R15\n         ITRACE ID=FORMAT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nFMT2020  DS    0H\n         LA    R1,DATASPACE_1\n         ST    R1,DSPCREQ_DATASPACE\n         ITRACE ID=FMT2020,                                            +\n               DATA1=DATASPACE_1_NAME,                                 +\n               DATA2=(DATASPACE_1_ALET,4)\n* ------------------------------------------------------------------- *\n*        Build display                                                *\n* ------------------------------------------------------------------- *\nFMT2030  DS    0H\n         MVC   DSPCREQ_RECORD_NBR,DATASPACE_1_DISPLAY_FIRST_RECORD\n* ------------------------------------------------------------------- *\n*        Build DSCB info                                              *\n* ------------------------------------------------------------------- *\nFMT2040  DS    0H\n         MVC   SPF_RECORD_FROM,DSPCREQ_RECORD_NBR\n         MVC   SPF_COLUMN_FROM,DATASPACE_1_DISPLAY_FIRST_COLUMN\n         ITRACE ID=OSDSCB\n         L     R15,COMM_V_OSDSCB              OSDSCB ENTRY POINT\n         BALR  R14,R15                        FORMAT THE DSCB INFO\n* ------------------------------------------------------------------- *\n*        Initialize the VDATA buffer                                  *\n* ------------------------------------------------------------------- *\n         L     R0,DXD_VDATA_ADDR              BUFFER ADDRESS\n         L     R1,DXD_VDATA_LENGTH            NUMBER OF LINES\n         SR    R14,R14\n         SR    R15,R15\n         MVCL  R0,R14                         INITIALIZE BUFFER\n* ------------------------------------------------------------------- *\n*        \"Retrieve\" the data and build the body of the SPF panel      *\n* ------------------------------------------------------------------- *\n         MVI   DSPCREQ_FUNC,$DSPCREQ_RETREIVE\n         MVC   DSPCREQ_RECORD_ADDR,SESS_IO_AREA\n         ITRACE ID=GET_RECD,                                           +\n               DATA1=(DSPCREQ_RECORD_NBR,4),                           +\n               DATA2=(DSPCREQ_RECORD_ADDR,4)\n         LA    R1,DSPCREQ\n         L     R15,COMM_OSDSPACE              OSDSPACE ENTRY POINT\n         BALR  R14,R15                        LINK TO OSDSPACE\n         ITRACE ID=GET_RC,                                             +\n               DATA1=(DSPCREQ_RC,1)\n         CLI   DSPCREQ_RC,$DSPCREQ_NOT_STORED\n         BE    ERR0010                        NOT STORED\n         CLI   DSPCREQ_RC,$DSPCREQ_OK\n         BNE   ERR0020\n         ITRACE ID=RECORD,                                             +\n               DATA1=(DSPCREQ_RECORD_ADDR,4),                          +\n               DATA2=(DSPCREQ_RECORD_LENGTH,4)\n         MVC   DXD_RECORD_ADDR,DSPCREQ_RECORD_ADDR\n         MVC   DXD_RECORD_LENGTH,DSPCREQ_RECORD_LENGTH\n* ------------------------------------------------------------------- *\n*        Process the FMAT blocks                                      *\n* ------------------------------------------------------------------- *\n         ICM   R7,15,DXD_FIRST_FMAT           FIRST FMAT BLOCK\n         USING FMAT,R7\n         BZ    FMT2100                        NO FORMAT BLOCKS\nFMT2050  DS    0H\n         ST    R7,DXD_FMAT_FMAT\n         CLI   FMAT_TYPE,$FMAT_END_IF         END IF BLOCK?\n         BE    FMT2060                        YES\n         CLI   FMAT_TYPE,$FMAT_FIELD          FIELD?\n         BE    FMT2070                        YES\n         CLI   FMAT_TYPE,$FMAT_IF             IF\n         BE    FMT2080                        YES\n         DC    H'0'\nFMT2060  DS    0H\n         L     R15,V_FMTEIF                   FMTEIF ENTRY POINT\n         B     FMT2090\nFMT2070  DS    0H\n         L     R15,V_FMTFLD                   FMTFLD ENTRY POINT\n         B     FMT2090\nFMT2080  DS    0H\n         L     R15,V_FMTIF                    FMTIF ENTRY POINT\nFMT2090  DS    0H\n         ITRACE ID=FMTLINK,                                            +\n               RDATA1=R15\n         BALR  R14,R15                        LINK\n         ITRACE ID=LINKX,                                              +\n               DATA1=(DXD_FMAT_FMAT,4)\n         ICM   R7,15,DXD_FMAT_FMAT\n         BNZ   FMT2050                        PROCESS NEXT FMAT\n         ITRACE ID=FMATDONE\n* ------------------------------------------------------------------- *\n*        All FMAT blocks processed, display the data                  *\n* ------------------------------------------------------------------- *\nFMT2100  DS    0H\n         ITRACE ID=DISPLAY,                                            +\n               DATA1=PANEL_NAME,                                       +\n               RDATA2=R15\n         MVC   SESS_DISP_PANEL,PANEL_NAME\n         MVC   SESS_DISP_VDATA_ADDR,DXD_VDATA_ADDR\n         MVC   SESS_DISP_VDATA_LENGTH,DXD_VDATA_LENGTH\n         XC    SESS_DISP_CURSOR,SESS_DISP_CURSOR\n         L     R15,COMM_V_OSDISP\n         BALR  R14,R15\n         ITRACE ID=DISP_RC,                                            +\n               DATA1=(SESS_RC,2),                                      +\n               DATA2=(SESS_STATUS,1)\n         CLC   COMM_NEW_FORMAT,COMM_BLANKS      NEW FORMAT WANTED?\n         BNE   EXIT0000                         YES\n         CLI   COMM_SESS_FUNC,0                 SESSION FUNCTION?\n         BNE   EXIT0000                         YES\n         OC    SESS_RC,SESS_RC                  RC=0\n         BZ    FMT2120                          YES\n         ITRACE ID=ENDING\n         MVI   COMM_SESS_FUNC,$SESS_REMOVE      SET FUNCTION\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*        Perform scrolling                                            *\n* ------------------------------------------------------------------- *\nFMT2120  DS    0H\n         ITRACE ID=SCROLL,                                             +\n               DATA1=SPF_ZCMD,                                         +\n               DATA2=SPF_ZVERB\n         CLI   SPF_ZVERB,C'B'                 BOTTOM?\n         BE    FMT2130                        YES\n         CLI   SPF_ZVERB,C'D'                 SCROLL DOWN?\n         BE    FMT2140                        YES\n         CLI   SPF_ZVERB,C'T'                 TOP?\n         BE    FMT2160                        YES\n         CLI   SPF_ZVERB,C'U'                 SCROLL UP?\n         BE    FMT2170                        YES\n         CLC   SPF_ZCMD,COMM_BLANKS           ALL BLANK?\n         BE    FMT2030                        YES\n         B     ERR0030\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nFMT2130  DS    0H\n         ITRACE ID=BOTTOM\n         MVC   SPF_ZCMD,COMM_BLANKS           CLEAR CMD\n         MVC   DATASPACE_1_DISPLAY_FIRST_RECORD,DATASPACE_1_LAST_RECORD\n         B     FMT2030\nFMT2140  DS    0H\n         ITRACE ID=DOWN\n         MVC   SPF_ZCMD,COMM_BLANKS           CLEAR COMMAND\n         CLI   SPF_ZSCROLLA,C'M'              MAX?\n         BE    FMT2130                        YES\n         L     R1,DATASPACE_1_DISPLAY_FIRST_RECORD RECORD NBR\n         A     R1,F1                          PLUS 1\n         C     R1,DATASPACE_1_LAST_RECORD     BEYOND LAST?\n         BH    FMT2150                        YES\n         ST    R1,DATASPACE_1_DISPLAY_FIRST_RECORD SET RECORD NBR\n         B     FMT2030\nFMT2150  DS    0H\n         MVC   SPF_MSG_1(MSG_01_l),MSG_01     AT BOTTOM OF DATA\n         B     FMT2100\nFMT2160  DS    0H\n         ITRACE ID=TOP\n         MVC   SPF_ZCMD,COMM_BLANKS           CLEAR COMMAND\n         MVC   DATASPACE_1_DISPLAY_FIRST_RECORD,F1 SET RECORD NBR\n         B     FMT2030\nFMT2170  DS    0H\n         ITRACE ID=UP\n         MVC   SPF_ZCMD,COMM_BLANKS           CLEAR COMMAND\n         CLI   SPF_ZSCROLLA,C'M'              MAX?\n         BE    FMT2160                        YES\n         L     R1,DATASPACE_1_DISPLAY_FIRST_RECORD CURRENT RECORD\n         BCT   R1,FMT2180                     MINUS 1\n         MVC   SPF_MSG_1(MSG_02_l),MSG_02     AT TOP OF DATA\n         B     FMT2100\nFMT2180  DS    0H\n         ST    R1,DATASPACE_1_DISPLAY_FIRST_RECORD SET RECORD NBR\n         B     FMT2030\n* ------------------------------------------------------------------- *\n*        Clean up                                                     *\n* ------------------------------------------------------------------- *\nFMT3000  DS    0H\n         L     R15,SESS_FORMATTER_DXD_ADDR\n         ST    R13,4(R15)                     CHAIN CALLER'S SAVE AREA\n         ST    R15,8(R13)                     CHAIN OUR SAVE AREA\n         LR    R13,R15\n         ITRACE ID=CLEANUP                    DOING CLEAN UP\n         L     R15,V_FMTCLNUP                 FMTFREE ENTRY POINT\n         BALR  R14,R15                        LINK TO FMTFREE\n         ITRACE ID=CLEANX\n         ITRACE ID=FREE_DXD,                                           +\n               RDATA1=R13\n         LR    R1,R13                         COPY WORK AREA ADDRESS\n         L     R13,4(R13)                     RESTORE R13\n         L     R3,DXDSIZE\n         FREEMAIN RU,                                                  +\n               A=(1),                                                  +\n               LV=(3)\n         XC    SESS_FORMATTER_DXD_ADDR,SESS_FORMATTER_DXD_ADDR\n         XC    SESS_FORMATTER_DXD_LENGTH,SESS_FORMATTER_DXD_LENGTH\n         B     EXIT0010\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         MVI   COMM_MSG_ID+1,1\n         B     ERR1000\nERR0020  DS    0H\n         MVI   COMM_MSG_ID+1,2\n         B     ERR1000\nERR0030  DS    0H\n         MVI   COMM_MSG_ID+1,3\n         B     ERR1000\nERR1000  DS    0H\n         MVC   COMM_MSG_CSECT,MODID\n         MVC   SPF_MSG_1,COMM_MSG_1  COPY MESSAGE\n         MVC   SPF_MSG_2,COMM_MSG_2  COPY MESSAGE\n         MVC   SPF_MSG_3,COMM_MSG_3  COPY MESSAGE\n         MVC   SPF_MSG_4,COMM_MSG_4  COPY MESSAGE\n         MVC   SPF_MSG_5,COMM_MSG_5  COPY MESSAGE\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nCLEAN000 DS    0H\n         ITRACE ID=CLEAN_UP,                                           +\n               DATA1=(DXD_VDATA_ADDR,4),                               +\n               DATA2=(DXD_VDATA_LENGTH,4)\n         ICM   R1,15,DXD_VDATA_ADDR         VDATA GETMAINED?\n         BZ    CLEAN010                     NO\n         L     R0,DXD_VDATA_LENGTH          VDATA LENGTH\n         MVI   COMM_VDATA_FUNC,$VDATA_FREEMAIN\n         L     R15,COMM_V_OSVDATA\n         BALR  R14,R15                      FREE VDATA\n         XC    DXD_VDATA_ADDR,DXD_VDATA_ADDR\n         XC    DXD_VDATA_LENGTH,DXD_VDATA_LENGTH\nCLEAN010 DS    0H\n         L     R0,SESS_FORMATTER_DXD_LENGTH WORK AREA SIZE\n         LR    R1,R13                       COPY WORK AREA ADDRESS\n         L     R13,4(R13)                   RESTORE R13\n         FREEMAIN RU,                       FREE WORK AREA             +\n               A=(1),                                                  +\n               LV=(0)\n         XC    SESS_FORMATTER_DXD_ADDR,SESS_FORMATTER_DXD_ADDR\n         XC    SESS_FORMATTER_DXD_LENGTH,SESS_FORMATTER_DXD_LENGTH\n         B     EXIT0010\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         MVC   SESS_RETRY,DXD_SAVED_RETRY\n         ITRACE ID=EXIT\n         L     R13,4(R13)                  RESTORE SAVE AREA ADDRESS\nEXIT0010 DS    0H\n         LM    R14,R12,12(R13)             RESTORE REMAINING REGISTERS\n         SR    R15,R15                     SET RC\n         BR    R14                         RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDSIZE             CXD\nDXD_START           DC      Q(DXDMAIN)\nV_FMTCLNUP          DC      V(FMTCLNUP)\nV_FMTCNTRL          DC      V(FMTCNTRL)\nV_FMTEIF            DC      V(FMTEIF)\nV_FMTFLD            DC      V(FMTFLD)\nV_FMTIF             DC      V(FMTIF)\n\nF1                  DC      F'1'\n\nPANEL_NAME          DC      CL8'OSUSER'\n\nMSG_01              DC      C'At bottom of data'\nMSG_01_L            EQU     *-MSG_01\n\nMSG_02              DC      C'At top of data'\nMSG_02_L            EQU     *-MSG_02\n\n                    LTORG\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDMAIN             DSECT\n                    COPY     DXDPREF\n                    COPY     FMTCOMM\n                    DSPCREQ  DSECT=NO\nDXD_SAVED_RETRY     DS       A\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n                    COMMON\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n                    SESSION  TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n                    BPXYSTAT DSECT=YES,LIST=YES\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n                    COPY    FMAT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n                    OSSPFD  TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n                    COPY    TRENTRY\n* ------------------------------------------------------------------- *\n*                   EQUATES                                           *\n* ------------------------------------------------------------------- *\n                    COPY    REGEQU\n                    END     FMTMAIN\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "FMTPACK": {"ttr": 1284, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "* ------------------------------------------------------------------- *\n*                                                                     *\n*  MODULE NAME: FMTPACK                                               *\n*                                                                     *\n*  Process packed decimal fields during 'format'                      *\n*                                                                     *\n*                                                                     *\n*  If no \"edit word\" is specified, the number is displayed in vanilla *\n*  99999 type format with leading zeros displayed, no plus or minus   *\n*  sign.                                                              *\n*                                                                     *\n*  Rather than use hardware edit instruction (ED), the editing is     *\n*  done more 'manually'.  \"Edit words\" are much like \"PICTURE\"        *\n*  values valid to COBOL.                                             *\n*                                                                     *\n* ------------------------------------------------------------------- *\nFMTPACK  CSECT\nFMTPACK  AMODE 31\nFMTPACK  RMODE ANY\n         USING OSCOMM,R12\n         USING SESSION,R11\n         USING FMTPACK,R15\n         B     INIT0000\nMODID    DC    CL8'FMTPACK'\n         DC    CL8'&SYSDATE'\n         DC    CL7'&SYSTIME'\nINIT0000 DS    0H\n         STM   R14,R12,12(R13)               SAVE REGS\n         LR    R10,R15                       COPY ENTRY POINT\n         DROP  R15\n         USING FMTPACK,R10                   DEFINE BASE\n         L     R9,SESS_FORMATTER_DXD_ADDR    WORK AREA\n         LR    R15,R9                        COPY WORK AREA ADDRESS\n         USING FMT_COMMON,R9\n         L     R15,SESS_FORMATTER_DXD_ADDR   WORK AREA BASE\n         A     R15,DXD_START                 PLUS DISP\n         ST    R13,4(R15)                    SAVE R13\n         ST    R15,8(R13)                    CHAIN SAVE AREA\n         LR    R13,R15                       COPY WORK AREA ADDRESS\n         USING DXDFPACK,R13                  DEFINE WORK AREA BASE\n         MVC   DXD_CSECT,MODID\n         L     R7,DXD_FMAT_FMAT              FMAT BEING PROCESSED\n         USING FMAT,R7\n         ITRACE ID=ENTRY,                                              +\n               RDATA1=R7\n         L     R8,COMM_OSSPFD\n         USING OSSPFD,R8\n* ------------------------------------------------------------------- *\n*        Unpack the data first                                        *\n* ------------------------------------------------------------------- *\n         LH    R1,FMAT_START                 STARTING POSITION\n         LH    R2,FMAT_LENGTH                LENGTH\n         A     R1,DXD_RECORD_ADDR            PLUS RECORD ADDRESS\n         BCTR  R1,0                          RELATIVE TO ZERO\n         ITRACE ID=UNPACK,                                             +\n               DATA1=0(R1),                                            +\n               RDATA2=R2\n         LA    R3,COMM_INFO_01               WORK AREA\n         XC    COMM_INFO_01,COMM_INFO_01     INITIALIZE\nPACK0010 DS    0H\n         UNPK  0(3,R3),0(2,R1)               UNPACK\n         TR    0(2,R3),HEXCHAR               TRANSLATE\n         MVI   2(R3),x'00'\n         LA    R1,1(,R1)                     NEXT IN SOURCE\n         LA    R3,2(,R3)                     NEXT IN WORK AREA\n         BCT   R2,PACK0010                   LOOP\n* ------------------------------------------------------------------- *\n*        Verify the data is all valid numeric                         *\n* ------------------------------------------------------------------- *\n         ITRACE ID=VERIFY,                                             +\n               DATA1=COMM_INFO_01+0,                                   +\n               DATA2=COMM_INFO_01+8\n         LA    R1,COMM_INFO_01               1ST UNPACKED DIGIT\n         LH    R2,FMAT_LENGTH                LENGTH\n         SLL   R2,1                          MULTIPLY BY 2\n         BCTR  R2,0                          MINUS 1\nPACK0020 DS    0H\n         CLI   0(R1),C'0'                    VALID DIGIT?\n         BL    ERR0010                       NO\n         CLI   0(R1),C'9'                    VALID DIGIT?\n         BH    ERR0010                       NO\n         LA    R1,1(,R1)                     NEXT DIGIT\n         BCT   R2,PACK0020                   LOOP\n* ------------------------------------------------------------------- *\n*        Verify the sign is valid                                     *\n* ------------------------------------------------------------------- *\n         MVC   DXD_SIGN,0(R1)                SAVE SIGN\n         CLI   0(R1),C'C'                    VALID POSITIVE SIGN?\n         BE    PACK0030                      YES\n         CLI   0(R1),C'D'                    VALID NEGATIVE SIGN?\n         BE    PACK0030                      YES\n         CLI   0(R1),C'F'                    VALID POSITIVE SIGN?\n         BE    PACK0030                      YES\n         B     ERR0020                       BAD\n* ------------------------------------------------------------------- *\n*                                                                     *\n*        Data is valid, sign is valid.  \"Edit\" it.                    *\n*                                                                     *\n*    If no edit word is specified, copy it unpacked for \"as is\".      *\n*                                                                     *\n*    If an edit word is specified, the data is 'edited' into          *\n*    COMM_INFO_02, then copied to the VDATA buffer.                   *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPACK0030 DS    0H\n         ITRACE ID=PRE_EDIT,                                           +\n               DATA1=COMM_INFO_01+0,                                   +\n               DATA2=COMM_INFO_02+8\n         TM    FMAT_OPTIONS,$FMAT_EDITWORD   EDIT WORD SPECIFIED?\n         BO    PACK0050                      YES\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         ITRACE ID=NOWORD\nPACK0040 DS    0H\n         LH    R0,FMAT_ROW                   DISPLAY ROW\n         LH    R1,FMAT_COLUMN                DISPLAY COLUMN\n         BCTR  R0,0                          ROW RELATIVE TO ZERO\n         MH    R0,SPF_VWIDTH+2               MULTIPLY BY LINE LENGTH\n         BCTR  R1,0                          COLUMN RELATIVE TO ZERO\n         AR    R0,R1                         PLUS COLUMN\n         A     R0,DXD_VDATA_ADDR             PLUS VDATA ADDRESS\n         LH    R1,FMAT_LENGTH                SOURCE LENGTH\n         SLL   R1,1                          MULTIPLY BY 2\n         BCTR  R1,0                          MINUS 1\n         LA    R14,COMM_INFO_01              UNPACKED NUMBER\n         LR    R15,R1                        COPY LENGTH\n         MVCL  R0,R14                        COPY TO VDATA BUFFER\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n*     Perform \"custom editing\"                                        *\n*                                                                     *\n*     The number to be edited has been unpacked into COMM_INFO_01.    *\n*     The edit word is in FMAT_DATA.                                  *\n*     Output will be performed into COMM_INFO_02, then copied to      *\n*     the VDATA buffer.                                               *\n*                                                                     *\n*     The length of the output is determined by the user supplied     *\n*     edit mask (columns 50-80 on the FIELD control statement).       *\n*     The end of the mask will be indicated by a byte of binary zero. *\n*                                                                     *\n* ------------------------------------------------------------------- *\nPACK0050 DS    0H\n         ITRACE ID=CALLEDIT\n         L     R15,V_FMTEDIT                 FMTEDIT ENTRY POINT\n         BALR  R14,R15                       LINK TO FMTEDIT\n         B     EXIT0000\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nERR0010  DS    0H\n         MVC   COMM_MSG_1(MSG_01_L),MSG_01\n         B     ERR1000\nERR0020  DS    0H\n         MVC   COMM_MSG_1(MSG_02_L),MSG_02\nERR1000  DS    0H\n         MVI   DXD_RC+1,8\n         MVC   COMM_INFO_01,COMM_BLANKS\n         MVC   COMM_INFO_01(L'BAD),BAD\n         B     PACK0040                      <-- DON'T LIKE 'UPHILL' BR\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nEXIT0000 DS    0H\n         ITRACE ID=EXIT\n         LH    R15,DXD_RC                    SET RC\n         L     R13,4(,R13)                   RESTORE R13\n         L     R14,12(,R13)                  RESTORE R14\n         LM    R0,R12,20(R13)                RESTORE REGISTERS\n         BR    R14                           RETURN\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXD_START      DC      Q(DXDFPACK)\nV_FMTEDIT      DC      V(FMTEDIT)\n\nHEXCHAR        EQU     *-C'0'\n               DC      C'0123456789ABCDEF'\n\nBAD            DC      C'*BAD*'\n\nMSG_01         DS      0C\n               DC      C'Bad packed number'\nMSG_01_L       EQU     *-MSG_01\n\nMSG_02         DS      0C\n               DC      C'Bad sign on packed number'\nMSG_02_L       EQU     *-MSG_02\n\n               LTORG\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nDXDFPACK       DSECT\n               COPY  DXDPREF\n\nDXD_RC         DS    H\n\nDXD_SIGN       DS    X\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               COMMON\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               SESSION\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               BPXYSTAT DSECT=YES,LIST=YES\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\nFMT_COMMON     DSECT\n               DS      (DXD_PREFIX_L)X\n               COPY    FMTCOMM\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               COPY    FMAT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               OSSPFD  TYPE=DSECT\n* ------------------------------------------------------------------- *\n*                                                                     *\n* ------------------------------------------------------------------- *\n               COPY    TRENTRY\n* ------------------------------------------------------------------- *\n*              EQUATES                                                *\n* ------------------------------------------------------------------- *\n               COPY    REGEQU\n               END     FMTPACK\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT745/CBT.V500.FILE745.PDS/USERFMT.xmi", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT745/CBT.V500.FILE745.PDS", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}