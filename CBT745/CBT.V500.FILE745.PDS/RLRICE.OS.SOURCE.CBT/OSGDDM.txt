* ------------------------------------------------------------------- *
*                                                                     *
*                                                                     *
*                                                                     *
*  NOT____NOT___NOT___NOT___NOT___NOT___NOT___NOT___NOT  working!     *
*                                                                     *
*                                                                     *
*         DISPLAY PICTURE IMAGE WITH VECTOR GRAPHICS                  *
*                                                                     *
*        The graphics will be rendered and written to the user's      *
*        display device using GDDM calls.                             *
*                                                                     *
*        GDDM will use the whole screen.                              *
*        "normal" REVIEW interaction will resume after                *
*        this terminates.                                             *
*                                                                     *
*        This is called by REVIMAGE after it has been determined      *
*        to employ vector graphics.                                   *
*                                                                     *
*        Currently the byte/pixel array is created by PCXCHECK        *
*        which can process ".pcx" single-plane picture files with     *
*        1-, 4-, or 8-colors.                                         *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
OSGDDM   CSECT
OSGDDM   AMODE 31
OSGDDM   RMODE ANY
         USING OSGDDM,R15
         B     INIT0000
         DC    CL8'OSGDDM'
         DC    CL8'&SYSDATE'
         DC    CL8'&SYSTIME'
         DC    A(OSGDDMEND-OSGDDM)
INIT0000 DS    0H
         STM   R14,R12,12(R13)     SAVE REGISTERS
         DROP  R15
         LR    R12,R15             SET BASE
         USING OSGDDM,R12
         USING REVCOMM,R9
         L     R15,SESS_FORMATTER_DXD_ADDR
         A     R15,DXD_START
         ST    R13,4(R15)
         ST    R15,8(R13)
         LR    R13,R15
         USING DXDGDDM,R13
         ITRACE ID=ENTRY
         MVC   DXD_DCB(DCBL),DCBI               INITIALIZE DCB
         LA    R1,DXD_DCB
         USING IHADCB,R1
         MVC   DCBDDNAM,MSG+64                  SET DDNAME
         ICM   R0,15,DXD_ADMASPLT               ADMASPLT LOADED?
         BNZ   GDDM0010                         YES
         LOAD  EP=ADMASPLT                      LOAD IT
         ST    R0,DXD_ADMASPLT                  SAVE ENTRY POINT
GDDM0010 DS    0H
         LA    R0,SESS_DATASPACE_1
         ST    R0,DSPCREQ_DATASPACE
         MVC   DSPCREQ_RECORD_ADDR,SESS_IO_AREA
         MVI   DSPCREQ_FUNC,$DSPCREQ_RETREIVE
* ------------------------------------------------------------------- *
*                                                                     *
*                                                                     *
*        Determine if we know how to render this file as a picture    *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
*                                                                     *
*      For black and white.. x'00' black, x'01' white                 *
*                                                                     *
*      For colors..                                                   *
*      Each byte contains a color number that corresponds to an       *
*      entry in a color "palette".                                    *
*                                                                     *
* ------------------------------------------------------------------- *
         MVC   DSPCREQ_RECORD_NBR,F1            SET RECORD NBR
         LA    R1,DSPCREQ
         L     R15,COMM_OSDSPACE
         BALR  R14,R15                          RETREIVE RECORD 1
         CLI   DSPCREQ_RC,$DSPCREQ_OK           SUCCESSUFUL?
         BNE   ERR0010                          ERROR
         CLC   DSPCREQ_RECORD_LENGTH,F80        RECORD LENGTH = 80?
         BL    ERR0020                          NO
         L     R7,DSPCREQ_RECORD_ADDR           DATA ADDRESS
         USING PCXHDR,R7                        DEFINE BASE
         CLI   PCXMFR,10                        ZSOFT PCX FILE?
         BNE   ERR0030                          NO
         CLI   PCXMETHD,1                       KNOWN ENCODING METHOD?
         BH    ERR0040                          NO
         CLI   PCXRESV,0                        EXPECTED ZERO BYTE?
         BNE   ERR0050                          NO
         CLI   PCXNPLNS,1                       SINGLE COLOR PLANE?
         BNE   ERR0060                          NO
         CLI   PCXBITPP,1                       BLACK AND WHITE?
         BE    GDDM0020                         YES
         CLI   PCXBITPP,4                       16-COLORS?
         BE    GDDM0020                         YES
         CLI   PCXBITPP,8                       256-COLORS?
         BNE   ERR0070                          NO..
GDDM0020 DS    0H
         CLI   PCXBITPP,1                       BLACK AND WHITE
         SR    R3,R3
         IC    R3,PCXBITPP                      BITS PER PIXEL
         ST    R3,DXD_RESOLUTION                SAVE FOR DISPLAY
         ICM   R3,1,PCXBYTLN
         ICM   R3,2,PCXBYTLN+1                  UNCOMPRESSED PER LINE
         LA    R1,7(,R3)                        ROUND ..
         SRL   R1,3
         SLL   R1,3                             ..  TO NEXT DOUBLEWORD
         MVC   PCXHDRWS,PCXHDR                  COPY FILE HEADER
         STH   R3,PCXBYTLN                      DECODED BYTES PER LINE
         LA    R3,DXD_EXPANDED_DATA(R3)         COMPUTE ENDING ADDRESS
         ST    R3,PCXEOSCN                      SAVE FOR COMPARISON
* ------------------------------------------------------------------- *
*                                                                     *
*                                                                     *
*        Decode co-ordinates of the corners of the window.            *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
         LA    R0,4                             NUMBER TO DECODE
         LA    R15,PCXWINDW                     FIRST CO-ORDINATE
GDDM0030 DS    0H
         ICM   R0,1,0(R15)
         ICM   R0,2,1(R15)
         STH   R0,0(R15)
         LA    R15,2(,R15)                      NEXT CO-ORDINATE
         BCT   R0,GDDM0030                      LOOP
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         LA    R2,1
         AH    R2,PCXXMAX                       PLUS MAXIMUM X IN PELS
         SH    R2,PCXXMIN                       MINUS MINIMUM
         ST    R2,X_PELS                        X DIMENSION IN PELS
         LA    R3,1
         AH    R3,PCXYMAX                       PLUS MAXIMUM Y IN PELS
         SH    R3,PCXYMIN                       MINUS MINIMUM
         ST    R3,Y_PELS                        Y DIMENSION IN PELS
         ST    R3,LINES2GO                      SAVE LINES TO RENDER
         MR    R2,R2                            COMPUTE SIZE IN PELS
         ST    R3,DXD_TOTAL_PELS
         LA    R0,7(,R3)
         SRL   R0,3
         SLL   R0,3                             ROUND TO DOUBLEWORDS
         ST    R0,DXD_PICTURE_SIZE              SAVE SIZE
         ITRACE ID=GET_PICT,                                           +
               RDATA1=R0
         GETMAIN RU,                                                   +
               LV=(0),                                                 +
               LOC=ANY
         ITRACE ID=PICTURE,                                            +
               RDATA1=R1
         ST    R1,DXD_PICTURE_ADDR              SAVE STORAGE ADDRESS
         MVC   0(8,R1),PICTURE_ID               SET EYECATCHER
         ST    R1,PEL_LOAD_CURSOR               INITIALIZE PEL CURSOR
         A     R1,DXD_PICTURE_SIZE              COMPUTE END ADDRESS
         ST    R1,PIC_END_ADDR                  SAVE FOR DISPLAY
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
         MVI   PIC_COLOR,X'F7'                  START IN NEUTRAL COLOR
         MVC   PCXPAL16,PCXCOLMP                COPY 16-COLOR PALETTE
         MVI   PCXRUNLN,0                       PREPARE FOR USE
         L     R1,DSPCREQ_RECORD_LENGTH
         LA    R6,DXD_EXPANDED_DATA             EXPANSION AREA
         LA    R8,PCXHDR(R1)                    SKIP HEADER
         LA    R0,PCXHDRL                       HEADER LENGTH
         AR    R2,R0               PAST HEADER
         SR    R1,R0               ADJUST REMAINING LENGTH
         BP    PCX0110             FIRST RECORD HAS HEADER PLUS MORE
PCX0090  DS    0H
         LPR   R15,R1              LENGTH OF REST OF HEADER
         L     R7,DIRNXT(,R7)      SECOND RECORD DETAILS
         L     R1,DIRLEN(R7)       RECORD LENGTH
         L     R2,DIRREC(R7)       RECORD ADDRESS
         LR    R0,R15              REMAINING HEADER LENGTH
         BCTR  R15,0               DECREMENT FOR EXECUTE
         LTR   R15,R15             WAS FIRST RECORD JUST COMPLETE HDR?
         BM    PCX0100             YES, HAVE HDR BUT END OF 1ST RECORD
         EX    R15,PCXHDRST        COPY REST OF PCX 128-BYTE HEADER
PCX0100  DS    0H
         AR    R8,R1               PREPARE FOR (VERY) SHORT 2ND RECORD
         AR    R2,R0               PAST HEADER
         SR    R1,R0               ADJUST REMAINING LENGTH
         BNP   PCX0090             HANDLE EMBEDDED (VERY) SHORT RECORD

PCX0110  DS    0H
         MVI   PCXRUNLN+1,1        SET RUN-LENGTH COUNT TO ONE
         TM    0(R2),X'C0'         IS THIS A RUN-LENGTH COUNT?
         BNO   PCX0130             NO
         CLI   PCXMETHD,0          FILE COMPRESSED?
         BE    PCX0130             NO
         MVC   PCXRUNLN+1(1),0(R2) YES, COPY RUN-LENGTH COUNT
         NI    PCXRUNLN+1,X'3F'    RESET FLAG BITS TO GET COUNT
         LA    R2,1(,R2)           NEXT BYTE
         BCT   R1,PCX0130          ADJUST REMAINING BYTE COUNT
         B     PCX0170             END OF RECORD REACHED
PCX0130  DS    0H
         MVC   0(1,R6),0(R2)       LOAD DATA BYTE
         LH    R15,PCXRUNLN        RUN-LENGTH
         LA    R0,2
         SR    R15,R0              REPETITION AND ALLOW FOR EXECUTE
         BM    PCX0140             NO REPETITION FOR RUN-LENGTH OF 1
         EX    R15,PCXREPIT        PROPAGATE DATA BYTE
PCX0140  DS    0H
         AR    R15,R0              RESTORE RUN-LENGTH COUNT
         AR    R6,R15              PAST LOADED DATA
         C     R6,PCXEOSCN         SCAN LINE FINISHED?
         BNL   PCX0210             YES, HAVE NOW SCANNED A LINE
PCX0150  DS    0H
         LA    R2,1(,R2)           NEXT BYTE
         BCT   R1,PCX0110          ADJUST REMAINING BYTE COUNT
         BAL   R14,PCX0170
         B     PCX0110             GOT THE NEXT RECORD

PCX0170  DS    0H
         C     R7,HOLDEND          END OF LAST CACHED RECORD?
         BE    PCX0200             YES, HAVE TO READ FROM FILE
         L     R7,DIRNXT(,R7)      NO, POINT TO NEXT RECORD
PCX0180  DS    0H
         L     R1,DIRLEN(R7)       RECORD LENGTH
         L     R2,DIRREC(R7)       RECORD ADDRESS
         LTR   R1,R1               END-OF-FILE?
         BM    PCX0320             YES, END OF DATA
         BZ    PCX0170             DISCARD NULL RECORD
         BR    R14                 RETURN
PCX0200  DS    0H
         ST    R14,PCXSAVER        SAVE THE RETURN ADDRESS
         MVC   DOWNAMT,F1          NEED TO READ ANOTHER RECORD
         STM   R5,R8,PCXSECSV      SAVE LOCAL STATUS
         L     R15,COMM_V_DOWNER   DOWNER ENTRY POINT
         BALR  R14,R15             RETURNS WITH NEW HOLDEND IN R7
         LM    R5,R6,PCXSECSV      RESTORE LOCAL STATUS
         L     R8,PCXSECSV+12
         L     R14,PCXSAVER
         B     PCX0180

PCX0210  DS    0H
         STM   R1,R2,PCXSECSV      SAVE RECORD PROCESSING STATUS
         L     R8,PELLDCSR         PICTURE ARRAY CURSOR
         LA    R6,DXD_EXPANDED_DATA SCAN LINE EXPANSION AREA
         L     R0,X_PELS           PIXELS PER SCAN LINE
         SR    R14,R14             CLEAR FOR DIVIDE
         LA    R15,32              BITS PER WORD
         SR    R1,R1               CLEAR FOR INSERT
         IC    R1,PCXBITPP         BITS PER PEL
         DR    R14,R1              PELS PER WORD
         ST    R15,COMM_DWORD      SAVE PELS PER WORD
PCX0220  DS    0H
         L     R2,COMM_DWORD       PELS PER WORD
         L     R15,0(,R6)          SOME PIXEL DATA
         LA    R6,4(,R6)           NEXT DATA TO LOAD
PCX0230  DS    0H
         SR    R14,R14             CLEAR FOR SHIFT
         SLDL  R14,0(R1)           PIXEL BITS FOR AN ARRAY ELEMENT
         STC   R14,0(,R8)          SAVE IT INTO THE ARRAY
         LA    R8,1(,R8)           NEXT ARRAY ELEMENT
         BCT   R0,PCX0240          DECREMENT REMAINING WIDTH
         B     PCX0250             PREPARE TO PROCESS NEXT SCAN LINE
PCX0240  DS    0H
         BCT   R2,PCX0230          PROCESS NEXT PIXEL BYTE
         B     PCX0220
PCX0250  DS    0H
         ST    R8,PELLDCSR         SAVE PIXEL LOAD CURSOR
         LA    R6,DXD_EXPANDED_DATA SCAN LINE EXPANSION AREA
         LM    R1,R2,PCXSECSV      RESTORE RECORD PROCESSING STATUS
         L     R0,LINES2GO         DECREMENT REMAINING SCAN LINE COUNT
         BCTR  R0,0
         ST    R0,LINES2GO
         LTR   R0,R0               NEED MORE SCAN LINES?
         BP    PCX0150             YES, EXPAND NEXT SCAN LINE
         CLI   PCXBITPP,8          256-COLOR PICTURE?
         BNE   PCX0320             NO, SKIP 256-COLOR PALETTE SEARCH

         LA    R8,PCXPALET         PALETTE HOLD AREA
         LA    R6,768(,R8)         PAST PALETTE HOLD AREA
PCX0260  DS    0H
         LA    R2,1(,R2)           NEXT BYTE
         BCT   R1,PCX0280          ADJUST REMAINING BYTE COUNT
         BAL   R14,PCX0170         NEXT RECORD
PCX0280  DS    0H
         CLI   0(R2),12            256-COLOR PALETTE FLAG?
         BNE   PCX0260             NO, BUT KEEP LOOKING FOR IT
PCX0290  DS    0H
         LA    R2,1(,R2)           NEXT BYTE
         BCT   R1,PCX0310          ADJUST REMAINING BYTE COUNT
         BAL   R14,PCX0170         END OF RECORD REACHED
PCX0310  DS    0H
         MVC   0(1,R8),0(R2)       COPY A PALETTE BYTE
         LA    R8,1(,R8)           INCREMENT HOLD AREA CURSOR
         CR    R8,R6               PALETTE LOAD NOW COMPLETE?
         BL    PCX0290             NO, KEEP LOADING COLOR PALETTE

PCX0320  DS    0H
         CLI   PCXBITPP,1          BLACK-AND-WHITE PICTURE?
         BE    PCX0340             YES, ASSUME PALETTE NOT NEEDED

         SR    R0,R0               CLEAR BIT ACCUMULATOR
         LA    R1,3                BYTES PER PALETTE COLOR
         LA    R6,PCXPALET         COLOR PALETTE
         L     R7,DXD_TOTAL_PELS   NUMBER OF PIXELS
         L     R8,HSEACTIV         PIXEL BYTE ARRAY
PCX0330  DS    0H
         SR    R15,R15             CLEAR FOR INSERT
         IC    R15,0(,R8)          PALETTE COLOR INDEX
         MR    R14,R1              CONVERT TO PALETTE INDEX
         LA    R15,0(R15,R6)       PALETTE ENTRY
         IC    R0,1(,R15)          GREEN LEVEL
         SLL   R0,1                KEEP HIGH BIT
         IC    R0,0(,R15)          RED LEVEL
         SLL   R0,1                KEEP HIGH BIT
         IC    R0,2(,R15)          BLUE LEVEL
         SRL   R0,7                KEEP HIGH BITS
         STC   R0,0(,R8)           OVERLAY INDEX WITH 3270 GRB FLAGS
         LA    R8,1(,R8)           NEXT PIXEL ARRAY ELEMENT
         BCT   R7,PCX0330          CONTINUE CONVERSION TO 3270 COLOR

PCX0340  DS    0H
         SR    R0,R0
         L     R1,X_PELS           LOAD PICTURE HORIZONTAL PEL COUNT
         LA    R15,9               PELS PER BYTE WIDTH
         AR    R1,R15
         BCTR  R1,0                ROUND UP TO NEXT INTEGRAL BYTE
         DR    R0,R15              PICTURE WIDTH IN BYTES
         STH   R1,X_BYTES          SAVE IT
         L     R0,SCRNCOLS         SCREEN COLUMNS
         SR    R0,R1               COLUMNS UNUSED
         SRA   R0,1                HALVE IT
         BNP   PCX0350             LEAVE OFFSET 0 IF PCX NOT NARROWER
         STH   R0,X_OFFSET         SAVE OFFSET FOR DISPLAY ROUTINE
PCX0350  DS    0H
         L     R1,Y_PELS           VERTICAL PEL'S USED
         LA    R1,15(,R1)          ROUND UP TO NEXT INTEGRAL BYTE
         SRL   R1,4                PICTURE HEIGHT IN BYTES
         STH   R1,Y_BYTES          SAVE IT
         LA    R0,1
         AH    R0,PAGESIZE         MAXIMUM PICTURE ROWS
         SR    R0,R1               UNUSED ROWS
         SRA   R0,1                HALVE IT
         BNP   PCX0360             LEAVE OFFSET 0 IF PCX NOT SHORTER
         STH   R0,Y_OFFSET         SAVE OFFSET FOR DISPLAY ROUTINE
PCX0360  DS    0H
         LH    R1,X_BYTES
         MH    R1,Y_BYTES          TOTAL PICTURE SIZE
         ST    R1,X_Y_SYMS         SAVE NEEDED SYMBOL COUNT

EXIT0000 DS    0H
         SR    R15,R15
         B     EXITEXIT
EXIT0004 DS    0H
         LA    R15,4
EXITEXIT DS    0H
         ITRACE ID=EXIT,                                               +
               RDATA1=R15
         L     R14,12(R13)         RESTORE R14
         LM    R0,R12,20(R13)      RESTORE REGISTERS
         BR    R14                 EXIT

* ------------------------------------------------------------------- *
PCXHDRST MVC   0(0,R8),0(R1)       <<< EXECUTED >>>
PCXREPIT MVC   1(0,R6),0(R6)       <<< EXECUTED >>>

* ------------------------------------------------------------------- *
DXD_START  DC    Q(DXDPCX)

F1         DC    F'1'
H80        DC    H'80'

PICTURE_ID DC  CL8'PICTURE'

MSG02    DC    C'REVPCX02E  Cannot interpret PCX color mode'
MSG02L   EQU   *-MSG02
         LTORG

GDDMEND  EQU   *
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *


* ------------------------------------------------------------------- *
*                                                                     *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *

GDDM0010 DS    0H
         L     R1,X_PELS           GET PICTURE WIDTH
         LA    R1,7(,R1)
         SRL   R1,3                ROUND UP TO BYTE BOUNDARY
         M     R0,Y_PELS           GET GDDM BITMAP SIZE
         ST    R1,DXD_BITMAP_LENGTH SAVE IT
         LA    R0,7(,R1)
         SRL   R0,3                ROUND UP TO DOUBLEWORD BOUNDARY
         SLL   R0,3
         ST    R0,DXD_BUFFER_SIZE  SAVE BITMAP STORAGE SIZE
         ITRACE ID=GET_BUFF,                                           +
               RDATA1=R0
         GETMAIN RU,                                                   +
               LV=(0),                                                 +
               LOC=ANY
         ITRACE ID=BUFFADDR,                                           +
               RDATA1=R1
         ST    R1,DXD_BUFFER       SAVE BITMAP STORAGE ADDRESS
         TM    PICFLAGS,PICSRC     WRITING PICTURE SOURCE?
         BNO   GDDM0050            NO
         LA    R1,DXD_DCB
         ITRACE ID=OPEN,                                               +
               RDATA1=R1,                                              +
               DATA2=DCBDDNAM
         MVC   DXD_OPEN(OPENL),OPENI
         OPEN  (DXD_DCB,(OUTPUT)),                                     +
               MODE=31,                                                +
               MF=(E,DXD_OPEN)
         MVI   DXD_STATEMENT,C' '  CLEAR OUTPUT RECORD
         MVC   DXD_STATEMENT+1(79),DXD_STATEMENT
         MVC   DXD_STATEMENT(30),=C'* REVIEW &REL  BITMAP DATA FOR'
         LH    R1,$DSNAME
         BCTR  R1,0
         EX    R1,LDVECDSN
         CLI   $MEMBER,C' '        MEMBER NAME TO BE DISPLAYED?
         BE    GDDM0040            NO
         LA    R1,DXD_STATEMENT+32(R1)
         MVI   0(R1),C'('
         MVC   1(8,R1),$MEMBER
GDDM0020 DS    0H
         CLI   8(R1),C' '          TRAILING BLANK?
         BNE   GDDM0030            NO
         BCT   R1,GDDM0020
GDDM0030 DS    0H
         MVI   9(R1),C')'
GDDM0040 DS    0H
         PUT   DXD_DCB,DXD_STATEMENT WRITE HEADING

GDDM0050 DS    0H
         LA    R1,DXD_ANCHOR
         ST    R1,DXD_ANCHOR_ADDR
         LA    R1,FSINIT
         ST    R1,DXD_GDDM_FUNCTION
         OI    DXD_GDDM_FUNCTION,X'80' FLAG LAST PARAMETER
         LA    R1,DXD_GDDM_PARMS   POINT TO GDDM PARAMETER LIST
         L     R15,DXD_ADMASPLT
         BALR  R14,R15             LINK TO ADMASPLT

         LA    R1,GSMIX
         ST    R1,DXD_GDDM_FUNCTION
         LA    R1,GMIXXOR
         ST    R1,DXD_GDDM_PARM1
         OI    DXD_GDDM_PARM1,X'80' FLAG LAST PARAMETER
         LA    R1,DXD_GDDM_PARMS   POINT TO GDDM PARAMETER LIST
         L     R15,DXD_ADMASPLT
         BALR  R14,R15             LINK TO ADMASPLT

         MVI   DXD_STATEMENT,C' '  CLEAR OUTPUT RECORD
         MVC   DXD_STATEMENT+1(79),DXD_STATEMENT
         MVI   DXD_STATEMENT,C'*'  FLAG COMMENT
         LA    R8,DXD_STATEMENT+5
         MVC   5(1,R8),DXD_RESOLUTION+3 SHOW COLOR BIT DEPTH
         OI    5(R8),X'F0'         MAKE NUMERIC CHARACTER
         MVC   6(10,R8),=CL10'-BIT COLOR'
         L     R0,X_PELS
         LA    R15,18(,R8)         POINT TO DISPLAY AREA
         BAL   R14,GDDM0240        FORMAT NUMBER
         MVC   7(9,R15),=CL9'PELS WIDE'
         L     R0,Y_PELS
         LA    R15,36(,R8)         POINT TO DISPLAY AREA
         BAL   R14,GDDM0240        FORMAT NUMBER
         MVC   7(9,R15),=CL9'PELS DEEP'
         TM    PICFLAGS,PICSRC     WRITING PICTURE SOURCE?
         BNO   GDDM0060            NO
         PUT   DXD_DCB,DXD_STATEMENT YES, WRITE STATISTICS

GDDM0060 DS    0H
         LA    R1,GSCOL
         ST    R1,DXD_GDDM_FUNCTION
         LA    R1,GCOLTURQ
         ST    R1,DXD_GDDM_PARM1
         OI    DXD_GDDM_PARM1,X'80' FLAG LAST PARAMETER
         LA    R1,DXD_GDDM_PARMS   POINT TO GDDM PARAMETER LIST
         L     R15,DXD_ADMASPLT
         BALR  R14,R15             GSCOL

         LA    R1,GSCHAR
         ST    R1,DXD_GDDM_FUNCTION
         LA    R1,GPOSMIN
         ST    R1,DXD_GDDM_PARM1   X
         ST    R1,DXD_GDDM_PARM2   Y
         LA    R1,GTXTLEN
         ST    R1,DXD_GDDM_PARM3
         LA    R1,DXD_STATEMENT+10
         ST    R1,DXD_GDDM_PARM4
         OI    DXD_GDDM_PARM4,X'80' FLAG LAST PARAMETER
         LA    R1,DXD_GDDM_PARMS   POINT TO GDDM PARAMETER LIST
         L     R15,DXD_ADMASPLT
         BALR  R14,R15             GSCHAR (FROM BOTTOM LEFT)
         LA    R1,GSCP
         ST    R1,DXD_GDDM_FUNCTION
         LA    R1,GPOSMIN
         ST    R1,DXD_GDDM_PARM1   X
         LA    R1,GPOSMAX
         ST    R1,DXD_GDDM_PARM2   Y
         OI    DXD_GDDM_PARM2,X'80' FLAG LAST PARAMETER
         LA    R1,DXD_GDDM_PARMS   POINT TO GDDM PARAMETER LIST
         L     R15,DXD_ADMASPLT
         BALR  R14,R15             GSCP (TO TOP LEFT)
         XC    COMM_DWORD,COMM_DWORD SET UP FOR FIRST OR ONLY PLANE
         MVI   COMM_DWORD+3,X'01'  SET BIT TO TEST IN ARRAY BYTES
GDDM0070 DS    0H
         LA    R1,GSCOL
         ST    R1,DXD_GDDM_FUNCTION
         LA    R1,COMM_DWORD
         CLI   DXD_RESOLUTION+3,1  BLACK-AND-WHITE PICTURE?
         BNH   GDDM0080            YES, GET PICTURE COLOR TO USE
         L     R0,COMM_DWORD       NO, SAVE COLOR PLANE INDICATOR
         NC    COMM_DWORD+3(1),PIC_COLOR
         BNZ   GDDM0090            THIS PLANE IS IN PICTURE COLOR
         ST    R0,COMM_DWORD       RESTORE COLOR PLANE INDICATOR
         B     GDDM0210            SKIP THIS COLOR PLANE
GDDM0080 DS    0H
         MVC   COMM_DWORD+7(1),PIC_COLOR COPY COLOR TO USE
         NI    COMM_DWORD+7,X'07'
         LA    R1,COMM_DWORD+4
GDDM0090 DS    0H
         ST    R1,DXD_GDDM_PARM1
         OI    DXD_GDDM_PARM1,X'80' FLAG LAST PARAMETER
         LA    R1,DXD_GDDM_PARMS   POINT TO GDDM PARAMETER LIST
         L     R15,DXD_ADMASPLT
         BALR  R14,R15             GSCOL
         L     R15,COMM_DWORD      GET PIXEL BYTE MASK
         L     R1,HSEACTIV         POINT TO PIXEL/BYTE ARRAY
         L     R2,DXD_BUFFER       POINT TO BITMAP STORAGE
         L     R3,Y_PELS           GET SCAN LINES IN PICTURE
GDDM0100 DS   0H
         L     R4,X_PELS           GET PIXEL WIDTH OF PICTURE
GDDM0110 DS    0H
         LA    R0,8                GET BITS PER BYTE
         SR    R14,R14             CLEAR ACCUMULATOR
GDDM0120 DS    0H
         SLL   R14,1               PROMOTE ACCUMULATED BITS
         LTR   R4,R4               FINISHED LINE'S PIXELS?
         BNP   GDDM0130            YES, DO NOT TEST BYTE
         EX    R15,TESTPEL         TEST IF PIXEL BIT IS ON
         LA    R1,1(,R1)           POINT TO NEXT ARRAY BYTE
         BCTR  R4,0                DECREMENT PIXELS IN LINE TO GO
         BZ    GDDM0130            PIXEL BIT IS OFF
         LA    R14,1(,R14)         PIXEL BIT IS ON
GDDM0130 DS    0H                  PROCESS NEXT BIT OF BYTE
         BCT   R0,GDDM0120         PROCESS NEXT BIT OF BYTE
         STC   R14,0(,R2)          STORE EIGHT BITMAP PIXELS
         LA    R2,1(,R2)           POINT TO NEXT BITMAP BYTE
         LTR   R4,R4               FINISHED THIS LINE'S PIXELS?
         BP    GDDM0110            NO, CONTINUE PACKING THIS SCAN LINE
         BCT   R3,GDDM0100         YES, COMMENCE PACKING NEXT SCAN LINE

         LA    R1,GSIMG
         ST    R1,DXD_GDDM_FUNCTION
         LA    R1,GIMGTYPE
         ST    R1,DXD_GDDM_PARM1   IMAGE TYPE
         LA    R1,X_PELS
         ST    R1,DXD_GDDM_PARM2   IMAGE WIDTH
         LA    R1,Y_PELS
         ST    R1,DXD_GDDM_PARM3   IMAGE DEPTH
         LA    R1,DXD_BITMAP_LENGTH
         ST    R1,DXD_GDDM_PARM4   IMAGE LENGTH
         L     R1,DXD_BUFFER
         ST    R1,DXD_GDDM_PARM5   IMAGE DATA
         OI    DXD_GDDM_PARM5,X'80' FLAG LAST PARAMETER
         LA    R1,DXD_GDDM_PARMS   POINT TO GDDM PARAMETER LIST
         L     R15,DXD_ADMASPLT
         BALR  R14,R15             GSIMG (CURRENT POSITION UNCHANGED)

         TM    PICFLAGS,PICSRC     WRITING PICTURE SOURCE?
         BNO   GDDM0210            NO
         CLI   DXD_RESOLUTION+3,1  BLACK-AND-WHITE PICTURE?
         BNH   GDDM0150            YES, GET ON WITH IT
         MVI   DXD_STATEMENT,C' '  CLEAR OUTPUT RECORD
         MVC   DXD_STATEMENT+1(79),DXD_STATEMENT
         MVC   DXD_STATEMENT(13),=CL13'*  BLUE PLANE'
         CLI   COMM_DWORD+3,X'01'  CORRECT?
         BE    GDDM0140            YES
         MVC   DXD_STATEMENT+3(4),=CL4' RED'
         CLI   COMM_DWORD+3,X'02'  CORRECT?
         BE    GDDM0140            YES
         MVC   DXD_STATEMENT+2(5),=CL5'GREEN'
GDDM0140 DS    0H
         PUT   DXD_DCB,DXD_STATEMENT
GDDM0150 DS    0H
         L     R2,DXD_BUFFER       INITIALIZE BUFFER POINTER
         LA    R3,DXD_STATEMENT+17 POINT TO FIRST UNPACK TARGET
         LA    R4,DXD_STATEMENT+55 POINT TO LAST UNPACK TARGET
         L     R5,Y_PELS           GET NUMBER OF SCAN LINES
GDDM0160 DS    0H
         L     R6,X_PELS           GET PICTURE PIXEL WIDTH
         LA    R6,7(,R6)
         SRL   R6,3                GET BYTES PER SCAN LINE
GDDM0170 DS    0H
         MVI   DXD_STATEMENT,C' '  CLEAR OUTPUT RECORD
         MVC   DXD_STATEMENT+1(79),DXD_STATEMENT
         MVC   DXD_STATEMENT(17),VECCARD COPY TEMPLATE
         LR    R7,R3               POINT TO FIRST UNPACK TARGET
GDDM0180 DS    0H
         UNPK  0(3,R7),0(2,R2)     UNPACK A BITMAP BYTE
         TR    0(2,R7),VECHEX-C'0'
         LA    R7,2(,R7)           POINT PAST LATEST HEX
         MVI   0(R7),QUOTE         PREPARE FOR END OF RECORD'S DATA
         LA    R2,1(,R2)           POINT TO BITMAP BYTE
         CR    R7,R4               FILLED CARD IMAGE?
         BH    GDDM0190            YES, WRITE OUTPUT RECORD
         BCT   R6,GDDM0180         NO, GO UNPACK ANOTHER BYTE
         LA    R6,1                END OF LINE SO WRITE RECORD
GDDM0190 DS    0H
         PUT   DXD_DCB,DXD_STATEMENT PRODUCE BITMAP DATA RECORD
         BCT   R6,GDDM0170         GO WRITE ANOTHER CARD IMAGE
         BCT   R5,GDDM0160         GO PROCESS NEXT SCAN LINE
         MVI   DXD_STATEMENT,C' '  CLEAR OUTPUT RECORD
         MVC   DXD_STATEMENT+1(79),DXD_STATEMENT
         L     R0,DXD_BITMAP_LENGTH SHOW LENGTH OF BITMAP
         CVD   R0,24(,R13)
         MVI   DXD_STATEMENT,C'*'  FLAG COMMENT
         MVC   DXD_STATEMENT+10(8),=X'4020202020202120'
         ED    DXD_STATEMENT+10(8),28(R13)
         MVC   DXD_STATEMENT+19(21),=C'BYTES IN IMAGE BITMAP'
         CLI   DXD_RESOLUTION+3,1  BLACK-AND-WHITE PICTURE?
         BNH   GDDM0200            YES
         MVC   DXD_STATEMENT+28(5),=C'PLANE'
GDDM0200 DS    0H
         PUT   DXD_DCB,DXD_STATEMENT

GDDM0210 DS    0H
         CLI   DXD_RESOLUTION+3,1  BLACK-AND-WHITE PICTURE?
         BNH   GDDM0220            YES, PICTURE NOW RENDERED
         CLI   COMM_DWORD+3,X'02'  LAST PLANE PROCESSED?
         BH    GDDM0220            YES, PICTURE NOW RENDERED
         L     R0,COMM_DWORD       NO, GET COLOR PLANE NUMBER
         SLL   R0,1                PROMOTE BIT TO NEXT PLANE
         ST    R0,COMM_DWORD       SAVE NEXT COLOR PLANE NUMBER
         B     GDDM0070            PROCESS NEXT COLOR PLANE

GDDM0220 DS    0H
         TM    PICFLAGS,PICSRC     WRITING PICTURE SOURCE?
         BNO   GDDM0230            NO
         ITRACE ID=CLOSE
         MVC   DXD_OPEN(CLOSEL),CLOSEI
         CLOSE (DXD_DCB),                                              +
               MODE=31,                                                +
               MF=(E,DXD_OPEN)
         FREEPOOL DXD_DCB          FREE BUFFERS
GDDM0230 DS    0H
         LM    R0,R1,DXD_BUFFER_SIZE
         ITRACE ID=FREEBUFF,                                           +
               RDATA1=R1,                                              +
               RDATA2=R0
         FREEMAIN RU,                                                  +
               A=(1),                                                  +
               LV=(0)
         LA    R1,ASREAD
         ST    R1,DXD_GDDM_FUNCTION
         LA    R1,ATTTYPE
         ST    R1,DXD_GDDM_PARM1
         LA    R1,ATTVALUE
         ST    R1,DXD_GDDM_PARM2
         LA    R1,ATTCOUNT
         ST    R1,DXD_GDDM_PARM3
         OI    DXD_GDDM_PARM3,X'80' FLAG LAST PARAMETER
         LA    R1,DXD_GDDM_PARMS   POINT TO GDDM PARAMETER LIST
         L     R15,DXD_ADMASPLT
         BALR  R14,R15             ASREAD (FINISH SEND, WAIT FOR INPUT)

         LA    R1,FSTERM
         ST    R1,DXD_GDDM_FUNCTION
         OI    DXD_GDDM_FUNCTION,X'80' FLAG LAST PARAMETER
         LA    R1,DXD_GDDM_PARMS   POINT TO GDDM PARAMETER LIST
         L     R15,DXD_ADMASPLT
         BALR  R14,R15             FSTERM

         ITRACE ID=EXIT
         L     R13,4(,R13)         POINT TO PREVIOUS SAVE AREA
         LM    R14,R12,12(R13)     RESTORE REGISTERS
         SR    R15,R15
         BR    R14                 RETURN

* ------------------------------------------------------------------- *
GDDM0240 DS    0H
         CVD   R0,COMM_DWORD
         MVC   0(6,R15),=XL6'402020202120'
         ED    0(6,R15),COMM_DWORD+5
         BR    R14
* ------------------------------------------------------------------- *
LDVECDSN MVC   DXD_STATEMENT+31(0),$DSNAME+2 <<< EXECUTED >>>
TESTPEL  TM    0(R1),X'00'                   <<< EXECUTED >>>

* ------------------------------------------------------------------- *
DXD_START DC   Q(DXDGDDM)
FSINIT   DC    A(QQFSINIT)         INITIALIZE GDDM
GSMIX    DC    A(QQGSMIX)          SET FOREGROUND COLOR-MIXING MODE
GSCOL    DC    A(QQGSCOL)          SET GRAPHIC COLOR
GSCHAR   DC    A(QQGSCHAR)         DRAW A CHARACTER STRING
GSCP     DC    A(QQGSCP)           SET CURRENT POSITION
GSIMG    DC    A(QQGSIMG)          DRAW A GRAPHICS IMAGE
ASREAD   DC    A(QQASREAD)         PERFORM A TERMINAL READ
FSTERM   DC    A(QQFSTERM)         TERMINATE GDDM
GMIXXOR  DC    F'4'
GCOLTURQ DC    F'5'
GTXTLEN  DC    F'47'
GIMGTYPE DC    F'0'
GPOSMIN  DC    E'0'
GPOSMAX  DC    E'100'
VECHEX   DC    C'0123456789ABCDEF' HEXADECIMAL DIGIT TRANSLATE TABLE
VECCARD  DC    CL17'         DC    X'''
OPENI    OPEN  (*,INPUT),                                              +
               MODE=31,                                                +
               MF=L
OPENL    EQU   *-OPENI
CLOSEI   CLOSE *,                                                      +
               MODE=31,                                                +
               MF=L
CLOSEL   EQU   *-CLOSEI
DCBI     DCB   DSORG=PS,                                               +
               DDNAME=$,                                               +
               MACRF=PM,                                               +
               RECFM=FB,                                               +
               LRECL=80
DCBL     EQU   *-DCBI

         LTORG
* ------------------------------------------------------------------- *
DXDGDDM            DSECT
                   COPY  DXDPREF
*        COPY  PCXWORK
PCXSECSV DS    4F                            SECONDARY SAVE AREA
PCXWKLEN DS    F                             SIZE OF THIS AREA
PELLDCSR DS    F                             PIXEL LOAD CURSOR
PCXEOSCN DS    F                             END OF DECODED LINE
LINES2GO DS    F                             SCAN LINES LEFT TO READ
PCXSAVER DS    F                             RETURN ADDRESS
PCXRUNLN DS    H                             DATA BYTE RUN-LENGTH
         DS    0D
PCXHDRWS DS    CL128                         PCX HEADER HOLD AREA
PCXPAL16 DS    0XL48                         16-COLOR PALETTE
PCXPALET DS    XL768                         256-COLOR PALETTE
DXD_EXPANDED_DATA DS 0D                      SCAN LINE EXPANSION AREA
-------<> -------- <> ------- <> ------- <> --------------
      NEED TO DETERMINE HOW MUCH STORAGE IS NEEDED FOR 'SCAN LINE'
-------<> -------- <> ------- <> ------- <> --------------

DXD_BUFFER_SIZE    DS    F     _____/ BITMAP STORAGE LENGTH
DXD_BUFFER         DS    F          \ BITMAP STORAGE ADDRESS
DXD_ADMASPLT       DS    A            ADMASPLT ENTRY POINT
DXD_DCB            DS    0F,(DCBL)X   BITMAP SOURCE OUTPUT DCB
DXD_OPEN           DS    0F,(OPENL)X
DXD_ANCHOR_ADDR    DS    A            APPLICATION ANCHOR BLOCK
DXD_STATEMENT      DS    CL80         BITMAP SOURCE OUTPUT RECORD
DXD_ANCHOR         DS    0F           APPLICATION ANCHOR BLOCK
DXD_GDDM_FEEDBACK  DS    0F           GDDM FEEDBACK CODE
DXD_GDDM_SEV_CODE  DS    H            GDDM SEVERITY CODE
DXD_ERROR_CODE     DS    H            GDDM ERROR CODE
DXD_GDDM_ANCHOR    DS    A            GDDM ANCHOR POINTER
                   DS    F            REQUEST CONTROL PARAMETER
DXD_BITMAP_LENGTH  DS    F            LENGTH OF THE IMAGE BITMAP

DXD_GDDM_PARMS     DS    0F
DXD_GDDM_FUNCTION  DS    A            REQUEST CONTROL PARAMETERS
DXD_GDDM_PARM1     DS    A
DXD_GDDM_PARM2     DS    A
DXD_GDDM_PARM3     DS    A
DXD_GDDM_PARM4     DS    A
DXD_GDDM_PARM5     DS    A

ATTTYPE            DS    A
ATTVALUE           DS    A
ATTCOUNT           DS    A

* ------------------------------------------------------------------- *
*                                COPIED FROM GDDM.SADMSAM(ADMURCPB)
* GROUP - ADMMCQA
QQFSTRCE EQU   X'00020000'       TRACE
QQFSEXIT EQU   X'00030000'       SET ERROR EXIT
QQFSQERR EQU   X'00040000'       QUERY LAST ERROR
QQSPINIT EQU   X'00050000'       SPI SPECIAL INIT
QQFSQSYS EQU   X'00060000'       QUERY SYSTEMS ENVIRONS
QQESSUDS EQU   X'00070000'       SPECIFY SOURCE UDS
QQESEUDS EQU   X'00080000'       SPECIFY ENCODED UDS
QQESACRT EQU   X'000A0000'       CREATE APP GROUP
QQESADEL EQU   X'000B0000'       DELETE APP GROUP
QQESAQRY EQU   X'000C0000'       QUERY CURRENT APP GRP
QQESASEL EQU   X'000D0000'       SELECT APP GROUP
QQFSTRAN EQU   X'000F0000'       TRANSLATE CHAR STRING
QQESQCPG EQU   X'00100000'       QUERY CODE PAGE
QQESSCPG EQU   X'00110000'       SET CODE PAGE
QQESQEUD EQU   X'00120000'       QUERY ENCODED UDS
QQESQUNL EQU   X'00130000'       QRY NICKNAME INFO LEN
QQESQUNS EQU   X'00140000'       QUERY NICKNAME INFO
* GROUP - ADMMCQEE
QQESLIB  EQU   X'08142000'       DEFINE LIBRARY
QQESQOBJ EQU   X'08142400'       QUERY OBJECT EXISTENCE
QQESPCB  EQU   X'081C1000'       DEFINE PCB
* GROUP - ADMMCQDS
QQFSTERM EQU   X'0C000000'       TERMINATION
QQFSINIT EQU   X'0C000001'       INITIALISATION
QQFSRNIT EQU   X'0C000002'       RE-INITIALISATION
QQDSOPEN EQU   X'0C000200'       OPEN DEVICE
QQDSCLS  EQU   X'0C000201'       CLOSE DEVICE
QQDSUSE  EQU   X'0C000202'       DEVICE USAGE
QQDSDROP EQU   X'0C000203'       DROP DEVICE
QQDSQUID EQU   X'0C000204'       QUERY UNIQUE DEVICE ID
QQDSQUSE EQU   X'0C000205'       QUERY USAGE
QQDSQDEV EQU   X'0C000206'       QUERY DEVICE CHRISTCS
QQDSRNIT EQU   X'0C000207'       RE-INIT DEVICE
* GROUP - ADMMCQDC
QQFSPCRT EQU   X'0C040000'       PAGE CREATION
QQFSPSEL EQU   X'0C040001'       PAGE SELECTION
QQFSPDEL EQU   X'0C040002'       PAGE DELETION
QQFSPCLR EQU   X'0C040003'       PAGE CLEAR
QQFSPQRY EQU   X'0C040004'       QUERY PAGE
QQFSQCPG EQU   X'0C040005'       QUERY CURRENT PAGE
QQMSPQRY EQU   X'0C040006'       QUERY MAPPED PAGE
QQSSQF   EQU   X'0C040100'       QUERY S SETS ON FILE
QQPSQSS  EQU   X'0C040101'       QUERY DEVICE PS STORES
QQGSQNSS EQU   X'0C040102'       QUERY NO LOADED GRA SS
QQGSQSS  EQU   X'0C040103'       QUERY LOADED GRPHCS SS
QQPSLSS  EQU   X'0C040200'       LOAD DEV PS FROM STOR
QQPSLSSC EQU   X'0C040201'       COND LOAD DEV PS STORE
QQPSDSS  EQU   X'0C040202'       LOAD DEV PS FROM PROG
QQPSRSV  EQU   X'0C040203'       RESERVE DEVICE PS STOR
QQGSLSS  EQU   X'0C040300'       LOAD GRPH SYMBOL SET
QQGSDSS  EQU   X'0C040301'       DEFINE GRPH SYMBOL SET
QQPSRSS  EQU   X'0C040400'       RELEASE SS FROM DEV PS
QQGSRSS  EQU   X'0C040401'       RELEASE GRPH SYM SET
QQFSQDEV EQU   X'0C040500'       QUERY DEVICE
QQFSQURY EQU   X'0C040501'       EXTENDED QUERY DEVICE
QQFSQUPG EQU   X'0C040900'       QUERY UNIQUE PAGE ID
QQSSREAD EQU   X'0C040B00'       READ SYMBOL SET
QQSSWRT  EQU   X'0C040B01'       WRITE SYMBOL SET
QQFSPWIN EQU   X'0C040C00'       PAGE WINDOW
QQFSQWIN EQU   X'0C040C01'       PAGE WINDOW QUERY
QQGSCPG  EQU   X'0C040D00'       SET CURRENT CODE PAGE
QQGSQCPG EQU   X'0C040D01'       QUERY CODE PAGE
QQFSENAB EQU   X'0C040E00'       ENABLE DEVICE INPUT
* GROUP - ADMMCQDA
QQFSALRM EQU   X'0C080000'       SOUND ALARM
QQASFCUR EQU   X'0C080100'       MOVE CURSOR
QQASDFLT EQU   X'0C080200'       SET DEFAULT FLD ATTRS
QQASDTRN EQU   X'0C080300'       DEFINE XLATE TABLE
QQASFCLR EQU   X'0C080400'       CLEAR ALPHA FIELDS
QQASFTYP EQU   X'0C080500'       SET FIELD TYPE
QQASFINT EQU   X'0C080501'       SET FIELD INTENSITY
QQASFCOL EQU   X'0C080502'       SET FIELD COLOR
QQASFPSS EQU   X'0C080503'       SET FIELD PRIMARY SS
QQASFHLT EQU   X'0C080504'       SET FIELD HILITE
QQASFEND EQU   X'0C080505'       SET END FLD ATTRIBUTE
QQASFOUT EQU   X'0C080506'       SET FIELD O/P NULLS
QQASFIN  EQU   X'0C080507'       SET FIELD I/P BLANKS
QQASFTRN EQU   X'0C080508'       SET FLD XLATE TABLE
QQASFTRA EQU   X'0C080509'       SET FIELD TRANSPARENCY
QQASFSEN EQU   X'0C08050A'       SET SO/SI ENABLEMENT
QQASFBDY EQU   X'0C08050B'       SET FIELD OUTLINING
QQASCHLT EQU   X'0C080600'       SET CHARACTER HILITES
QQASCCOL EQU   X'0C080601'       SET CHARACTER COLORS
QQASCSS  EQU   X'0C080602'       SET CHAR SYMBOL SETS
QQASCPUT EQU   X'0C080603'       SET CHARACTER CODES
QQASDFLD EQU   X'0C080700'       DEFINE ALPHA FIELD
QQASRFMT EQU   X'0C080800'       REDEFINE ALPHA FIELDS
QQASDFMT EQU   X'0C080801'       DEFINE ALPHA FIELDS
QQASRATT EQU   X'0C080802'       REDEFINE FIELD ATTR.S
QQASQHLT EQU   X'0C080900'       QUERY CHAR HILITES
QQASQCOL EQU   X'0C080901'       QUERY CHARACTER COLORS
QQASQSS  EQU   X'0C080902'       QUERY CHAR SYMBOL SETS
QQASCGET EQU   X'0C080903'       QUERY CHARACTER CODES
QQASQFLD EQU   X'0C080A00'       QUERY FIELD ATTRIBUTES
QQASQMOD EQU   X'0C080B00'       QUERY MODIFIED FIELDS
QQFSREST EQU   X'0C080C00'       RESTORE SCREEN
QQDSCMF  EQU   X'0C080C01'       USER CONTROL FUNCTION
QQDSQCMF EQU   X'0C080C02'       QUERY USER CONTROL FTN
QQASMODE EQU   X'0C080D00'       SET REPLY MODE
QQASQMAX EQU   X'0C080E00'       QUERY NO. OF FIELDS
QQASQNMF EQU   X'0C080E01'       QUERY NO. MOD. FIELDS
QQASQCUR EQU   X'0C080F00'       QUERY CURSOR
QQASFMOD EQU   X'0C081100'       MODIFY FIELD
QQASTYPE EQU   X'0C081300'       SET TERMINAL TYPE
QQASGPUT EQU   X'0C081503'       SET DUAL-CHARACTERS
QQASGGET EQU   X'0C081603'       QUERY DUAL-CHARACTERS
QQASQLEN EQU   X'0C081800'       QUERY FIELD LENGTH
* GROUP - ADMMCQDG
QQGSFLD  EQU   X'0C0C0000'       GRAPHICS FIELD
QQGSPS   EQU   X'0C0C0001'       PICTURE SPACE
QQGSWIN  EQU   X'0C0C0002'       SPECIFY WINDOW
QQGSVIEW EQU   X'0C0C0003'       SPECIFY VIEWPORT
QQGSQPS  EQU   X'0C0C0004'       QUERY PICTURE SPACE
QQGSQVIE EQU   X'0C0C0005'       QUERY VIEWPORT
QQGSQWIN EQU   X'0C0C0006'       QUERY WINDOW
QQGSUWIN EQU   X'0C0C0007'       DEFINE UNIFORM WINDOW
QQGSQFLD EQU   X'0C0C000A'       QUERY GRAPHICS FIELD
QQGSARCC EQU   X'0C0C000B'       ASPECT RATIO CONTROL
QQGSBND  EQU   X'0C0C000D'       SPECIFY DATA BOUNDARY
QQGSQBND EQU   X'0C0C000E'       QUERY DATA BOUNDARY
QQGSQMAX EQU   X'0C0C0100'       QUERY SEGMENT RANGE
QQGSQCUR EQU   X'0C0C0101'       QUERY CURSOR
QQGSQSSD EQU   X'0C0C0102'       QUERY SYMBOL SET DATA
QQGSQCEL EQU   X'0C0C0202'       QUERY CELL SIZE
QQGSCLP  EQU   X'0C0C0203'       SPECIFY CLIPPING
QQGSQCLP EQU   X'0C0C0204'       QUERY CLIPPING
QQGSSEG  EQU   X'0C0C0300'       CREATE SEGMENT
QQGSSCLS EQU   X'0C0C0301'       CLOSE SEGMENT
QQGSSDEL EQU   X'0C0C0302'       DELETE SEGMENT
QQGSCLR  EQU   X'0C0C0303'       CLEAR GRAPHICS FIELD
QQGSSATI EQU   X'0C0C0309'       SET INITIAL ATTRIBUTES
QQGSQATI EQU   X'0C0C030A'       QUERY INITIAL ATTS
QQGSSATS EQU   X'0C0C030B'       SET SEGMENT ATTRIBUTES
QQGSQATS EQU   X'0C0C030C'       QUERY SEGMENT ATTS
QQGSSPOS EQU   X'0C0C030D'       SET SEGMENT POSITION
QQGSQPOS EQU   X'0C0C030E'       QUERY SEGMENT POSITION
QQGSSORG EQU   X'0C0C0311'       SET SEGMENT ORIGIN
QQGSSPRI EQU   X'0C0C0312'       SET SEGMENT PRIORITY
QQGSQPRI EQU   X'0C0C0313'       QUERY SEGMENT PRIORITY
QQGSQORG EQU   X'0C0C0316'       QUERY SEGMENT ORIGIN
QQGSMOVE EQU   X'0C0C0400'       MOVE TO
QQGSLINE EQU   X'0C0C0401'       LINE TO
QQGSPLNE EQU   X'0C0C0402'       POLYLINE TO
QQGSMARK EQU   X'0C0C0406'       MARKER AT
QQGSMRKS EQU   X'0C0C0407'       POLY MARKER AT
QQGSAREA EQU   X'0C0C0408'       BEGIN AREA
QQGSENDA EQU   X'0C0C0409'       END AREA
QQGSVECM EQU   X'0C0C040A'       VECTOR
QQGSCHAR EQU   X'0C0C0500'       CHARACTER STRING AT
QQGSCHAP EQU   X'0C0C0501'       CHARACTER STRING
QQGSQTB  EQU   X'0C0C0502'       QUERY THE TEXT BOX
QQGSARC  EQU   X'0C0C0600'       ARC
QQGSELPS EQU   X'0C0C0601'       ELLIPSE
QQGSPFLT EQU   X'0C0C0602'       FILLET
QQGSQCP  EQU   X'0C0C0700'       QUERY CURRENT POSN
QQGSCOL  EQU   X'0C0C0701'       SET COLOR
QQGSMIX  EQU   X'0C0C0702'       SET MIX MODE
QQGSLT   EQU   X'0C0C0703'       SET LINE TYPE
QQGSLW   EQU   X'0C0C0704'       SET LINE WIDTH
QQGSCM   EQU   X'0C0C0705'       SET CHARACTER MODE
QQGSCS   EQU   X'0C0C0706'       SET CHARACTER SET
QQGSCB   EQU   X'0C0C0707'       SET CHARACTER BOX
QQGSCA   EQU   X'0C0C0708'       SET CHARACTER ANGLE
QQGSCD   EQU   X'0C0C0709'       SET CHARACTER DIRCTN
QQGSPAT  EQU   X'0C0C070A'       SET PATTERN
QQGSMS   EQU   X'0C0C070B'       SET MARKER SYMBOL
QQGSCH   EQU   X'0C0C070C'       SET CHARACTER SHEAR
QQGSFLW  EQU   X'0C0C070E'       SET FRACTIONAL WIDTH
QQGSQFLW EQU   X'0C0C070F'       QUERY FRACTIONAL WIDTH
QQGSQCOL EQU   X'0C0C0711'       QUERY COLOR
QQGSQMIX EQU   X'0C0C0712'       QUERY MIX MODE
QQGSQLT  EQU   X'0C0C0713'       QUERY LINE TYPE
QQGSQLW  EQU   X'0C0C0714'       QUERY LINE WIDTH
QQGSQCM  EQU   X'0C0C0715'       QUERY CHARACTER MODE
QQGSQCS  EQU   X'0C0C0716'       QUERY CHARACTER SET
QQGSQCB  EQU   X'0C0C0717'       QUERY CHARACTER BOX
QQGSQCA  EQU   X'0C0C0718'       QUERY CHARACTER ANG
QQGSQCD  EQU   X'0C0C0719'       QUERY CHARACTER DIRN
QQGSQPAT EQU   X'0C0C071A'       QUERY PATTERN
QQGSQMS  EQU   X'0C0C071B'       QUERY MARKER SYMBOL
QQGSQCH  EQU   X'0C0C071C'       QUERY CHARACTER SHEAR
QQGSMSC  EQU   X'0C0C071D'       SET MARKER SCALE
QQGSQMSC EQU   X'0C0C071E'       QUERY MARKER SCALE
QQGSPUT  EQU   X'0C0C0900'       INCLUDE GDF
QQGSIMG  EQU   X'0C0C0A00'       LIMITED IMAGE
QQGSIMGS EQU   X'0C0C0A04'       LIMITED IMAGE (SCALED)
QQGSGETS EQU   X'0C0C0B00'       RETRIEVE GDF
QQGSGETE EQU   X'0C0C0B01'       END GDF RETRIEVAL
QQGSGET  EQU   X'0C0C0B02'       GET GDF BUFFER
QQGSILOC EQU   X'0C0C0C00'       INITIALIZE LOCATOR
QQGSIPIK EQU   X'0C0C0C01'       INITIALIZE PICK DEVICE
QQGSIDVI EQU   X'0C0C0C04'       INITIALIZE DATA VALUE
QQGSIDVF EQU   X'0C0C0C05'       INITIALIZE DATA VALUE
QQGSISTR EQU   X'0C0C0C06'       INIT. STRING DEVICE
QQGSISTK EQU   X'0C0C0C07'       INIT. STROKE DEVICE
QQGSQLID EQU   X'0C0C0C09'       QUERY INPUT DEVICE
QQGSENAB EQU   X'0C0C0D00'       ENABLE INPUT DEVICE
QQGSFLSH EQU   X'0C0C0E00'       FLUSH INPUT QUEUE
QQGSQSIM EQU   X'0C0C0E01'       QUERY INPUT QUEUE
QQGSQCHO EQU   X'0C0C0F00'       QUERY CHOICE DATA
QQGSQLOC EQU   X'0C0C0F01'       QUERY LOCATOR DATA
QQGSQPIK EQU   X'0C0C0F02'       QUERY PICK DATA
QQGSQSTR EQU   X'0C0C0F03'       QUERY STRING DATA
QQGSQSTK EQU   X'0C0C0F04'       QUERY STROKE DATA
QQGSQPKS EQU   X'0C0C0F05'       QUERY PICK STRUCTURE
QQGSTAG  EQU   X'0C0C1000'       SET THE CURRENT TAG
QQGSQTAG EQU   X'0C0C1001'       QUERY THE CURRENT TAG
QQGSSAGA EQU   X'0C0C1102'       SET GEOM ATTRIBUTES
QQGSSTFM EQU   X'0C0C1103'       SET SEGMENT TRANSFORM
QQGSQAGA EQU   X'0C0C1104'       QUERY GEOM ATTRIBUTES
QQGSQTFM EQU   X'0C0C1105'       QUERY SEGMENT TRANSFM
QQGSSCT  EQU   X'0C0C1107'       SET CURRENT TRANSFORM
QQGSSAVE EQU   X'0C0C1200'       SAVE SEGMENT
QQGSLOAD EQU   X'0C0C1201'       LOAD SEGMENT
QQGSMB   EQU   X'0C0C1307'       SET MARKER BOX
QQGSQMB  EQU   X'0C0C1308'       QUERY MARKER BOX
QQGSTA   EQU   X'0C0C130D'       SET TEXT ALIGNMENT
QQGSQTA  EQU   X'0C0C130E'       QUERY TEXT ALIGNMENT
QQGSCBS  EQU   X'0C0C130F'       SET CHARACTER SPACING
QQGSQCBS EQU   X'0C0C1310'       QUERY CHARACTER SPACIN
QQGSAM   EQU   X'0C0C1311'       SET ATTRIBUTE MODE
QQGSQAM  EQU   X'0C0C1312'       QUERY ATTRIBUTE MODE
QQGSPOP  EQU   X'0C0C1313'       RESTORE ATTRIBUTES
QQGSSVL  EQU   X'0C0C1314'       SET SEGMENT VIEW LIMIT
QQGSQSVL EQU   X'0C0C1315'       QUERY SEG VIEW LIMITS
QQGSQBMX EQU   X'0C0C1316'       QUERY BACKGROUND MIX
QQGSBMIX EQU   X'0C0C1317'       SET BACKGROUND MIX
QQGSCP   EQU   X'0C0C1319'       SET CURRENT POSITION
QQGSSCPY EQU   X'0C0C1400'       COPY SEGMENT
QQGSSINC EQU   X'0C0C1401'       INCLUDE SEGMENT
QQGSCALL EQU   X'0C0C1402'       CALL A SEGMENT
QQGSCORR EQU   X'0C0C1500'       EXPLICIT CORRELATE
QQGSCORS EQU   X'0C0C1501'       STRUCTURE CORRELATION
QQGSDEFS EQU   X'0C0C1900'       START DRAWING DEFAULTS
QQGSDEFE EQU   X'0C0C1901'       END DRAWING DEFAULTS
QQFSUPDM EQU   X'0C0C1A00'       SET UPDATE MODE
QQFSQUPD EQU   X'0C0C1A01'       QUERY UPDATE MODE
QQGSSEN  EQU   X'0C0C1B00'       SET MIXED STRING MODE
QQGSQSEN EQU   X'0C0C1B01'       QUERY MIX STRING MODE
QQCGLOAD EQU   X'0C0C1F00'       LOAD CGM
QQCGSAVE EQU   X'0C0C2000'       SAVE CGM
* GROUP - ADMMCQDD
QQASREAD EQU   X'0C100000'       READ
QQFSFRCE EQU   X'0C100001'       FORCE OUTPUT
QQFSCHEK EQU   X'0C100002'       PREPARE PS FOR OUTPUT
QQGSREAD EQU   X'0C100003'       AWAIT GRAPHICS INPUT
QQFSSAVE EQU   X'0C100004'       SAVE SCREEN
QQFSSHOW EQU   X'0C100005'       SHOW SCREEN
QQFSSHOR EQU   X'0C100007'       SHOW WITH REPLY
QQWSIO   EQU   X'0C100008'       WINDOWED DEVICE I/O
QQFSGETS EQU   X'0C100009'       FAM-4 BUFFER START
QQFSGET  EQU   X'0C10000A'       FAM-4 OUTPUT TO BUFFER
QQFSGETE EQU   X'0C10000B'       FSGET TERMINATE
QQDSFRCE EQU   X'0C10000C'       FAM-4 MEMBER TO PDS
* GROUP - ADMMCQDO
QQFSOPEN EQU   X'0C180000'       OPEN PRINTER DESTINTN
QQFSCOPY EQU   X'0C180001'       PAGE COPY
QQGSCOPY EQU   X'0C180002'       GRAPHICS COPY
QQFSLOG  EQU   X'0C180003'       LINE-BY-LINE OUTPUT
QQFSCLS  EQU   X'0C180004'       CLOSE PRINTER DESTINTN
QQFSLOGC EQU   X'0C180005'       LINE-BY-LINE O/P + CC
QQDSCOPY EQU   X'0C180008'       DEVICE COPY
* GROUP - ADMMCQDB
QQPTSCRT EQU   X'0C200000'       CREATE PTN SET.
QQPTSQRY EQU   X'0C200001'       QUERY PTN SET.
QQPTSSEL EQU   X'0C200100'       SELECT PTN SET.
QQPTSDEL EQU   X'0C200101'       DELETE PTN SET.
QQPTSQUN EQU   X'0C200102'       Q. UNIQUE PTN SET ID.
QQPTSSPP EQU   X'0C200300'       SET PARTN. PRIORITIES
QQPTSQPP EQU   X'0C200301'       QUERY PTN PRIORITIES
QQPTSQPI EQU   X'0C200400'       QUERY PARTITION IDS
QQPTSQPN EQU   X'0C200401'       QUERY PARTITION NOS
* GROUP - ADMMCQDE
QQPTNCRT EQU   X'0C240000'       CREATE PARTITION.
QQPTNQRY EQU   X'0C240001'       QUERY PARTITION.
QQPTNMOD EQU   X'0C240002'       MODIFY PARTITION.
QQPTNSEL EQU   X'0C240100'       SELECT PARTITION.
QQPTNDEL EQU   X'0C240101'       DELETE PARTITION.
QQPTNQUN EQU   X'0C240102'       Q. UNIQUE PTN ID.
* GROUP - ADMMCQDM
QQMSREAD EQU   X'0C280000'       READ WITH MAP
QQMSPCRT EQU   X'0C280100'       CREATE MAPPED PAGE
QQMSQGRP EQU   X'0C280300'       QUERY ABOUT A GROUP
QQMSQMAP EQU   X'0C280301'       QUERY ABOUT A MAP
QQMSQADS EQU   X'0C280302'       QUERY ABOUT AN ADS
QQMSQFIT EQU   X'0C280303'       QUERY WHETHER MAP FITS
QQMSQMOD EQU   X'0C280400'       QUERY MODIFIED M-FLDS
QQMSDFLD EQU   X'0C280500'       DEFINE MAPPED-FIELD
QQMSPUT  EQU   X'0C280501'       PUT MAPPED-FIELD DATA
QQMSGET  EQU   X'0C280502'       GET MAPPED-FIELD DATA
QQMSQFLD EQU   X'0C280503'       QUERY MAPPED-FIELD
QQMSCPOS EQU   X'0C280600'       SET CURSOR POSITION
QQMSQPOS EQU   X'0C280601'       QUERY CURSOR POSITION
* GROUP - ADMMCQDN
QQWSCRT  EQU   X'0C2C0000'       CREATE OPERATOR WINDOW
QQWSDEL  EQU   X'0C2C0100'       DELETE OPERATOR WINDOW
QQWSMOD  EQU   X'0C2C0200'       MODIFY OPERATOR WINDOW
QQWSQRY  EQU   X'0C2C0300'       QUERY OPERATOR WINDOW
QQWSQUN  EQU   X'0C2C0400'       QUERY OP WINDOW ID
QQWSQWI  EQU   X'0C2C0500'       QUERY OP WINDOW IDS
QQWSQWN  EQU   X'0C2C0600'       QUERY OP WINDOW NOS
QQWSQWP  EQU   X'0C2C0700'       QUERY WIN PRIORITIES
QQWSSEL  EQU   X'0C2C0800'       SELECT OPERATOR WINDOW
QQWSSWP  EQU   X'0C2C0900'       SET WINDOW PRIORITIES
* GROUP - ADMMCQD3
QQISFLD  EQU   X'0C300000'       DEFINE IMAGE FIELD
QQISQFLD EQU   X'0C300001'       QUERY IMAGE FIELD
QQISCTL  EQU   X'0C300002'       SET IMAGE QUALITY CTRL
QQISXCTL EQU   X'0C300003'       EXT IMAGE QUALITY CTRL
QQISESCA EQU   X'0C300B00'       ECHO SCANNER
QQISLDE  EQU   X'0C300C00'       LOAD EXT. R/O IMAGE
QQISQSCA EQU   X'0C300D00'       QRY IMAGE SCANNER DEV.
QQISQRES EQU   X'0C300E00'       QRY SUPPORTED RES
QQISENAB EQU   X'0C301200'       IMAGE CSR ENAB/DISAB
QQISQLOC EQU   X'0C301300'       QRY IMAGE LOCATOR CSR
QQISILOC EQU   X'0C301400'       IMAGE LOC. CSR. INIT
QQISQBOX EQU   X'0C301500'       IMAGE BOX CSR. QUERY
QQISIBOX EQU   X'0C301600'       IMAGE BOX CSR. INIT
QQISQFOR EQU   X'0C301700'       QUERY IMAGE FORMATS
QQISQCOM EQU   X'0C301800'       QUERY IMAGE COMPRESSNS
* GROUP - ADMMCQDQ
QQAPDEF  EQU   X'0C380000'       DEFINE FIELD LIST
QQAPDEL  EQU   X'0C380100'       DELETE FIELD LIST
QQAPMOD  EQU   X'0C380200'       MODIFY FIELD LIST
QQAPQIDS EQU   X'0C380300'       QUERY FIELD LIST IDS
QQAPQNUM EQU   X'0C380400'       QUERY FIELD LIST NOS
QQAPQRY  EQU   X'0C380500'       QUERY FIELD LIST
QQAPQSIZ EQU   X'0C380600'       QUERY FIELD LIST SIZE
QQAPQUID EQU   X'0C380700'       QUERY UNIQUE FL ID
* GROUP - ADMMCQB
QQCHLC   EQU   X'10020307'       LINE COLORS
* GROUP - ADMMCQIS
QQISSE   EQU   X'18000000'       INVOKE SYMBOL EDITOR
* GROUP - ADMMCQ3I
QQIMACRT EQU   X'3C010001'       CREATE AN IMAGE
QQIMAGID EQU   X'3C010002'       GET UNIQUE IMAGE ID
QQIMAQRY EQU   X'3C010004'       QUERY IMAGE ATTRIBUTES
QQIMARES EQU   X'3C010006'       CONVERT RESOLUTION
QQIMADEL EQU   X'3C010007'       DELETE SPECIFIED IMAGE
QQIMACLR EQU   X'3C010008'       CLEAR IMAGE RECTANGLE
QQIMATRM EQU   X'3C010009'       TRIM IMAGE TO RECTANGL
QQIMASAV EQU   X'3C01000A'       SAVE IMAGE IN LIBRARY
QQIMARST EQU   X'3C01000B'       RESTORE IMAGE
QQIMARF  EQU   X'3C01000C'       CHANGE RESOLUTION FLAG
QQIMAPTS EQU   X'3C010011'       START DATA ENTRY
QQIMAPT  EQU   X'3C010012'       ENTER DATA IN IMAGE
QQIMAPTE EQU   X'3C010013'       END DATA ENTRY
QQIMAGTS EQU   X'3C010014'       START DATA RETRIEVAL
QQIMAGT  EQU   X'3C010015'       GET IMAGE DATA
QQIMAGTE EQU   X'3C010016'       END DATA RETRIEVAL
QQIMXFER EQU   X'3C010017'       IMAGE DATA TRANSFER
* GROUP - ADMMCQ3P
QQIMPGID EQU   X'3C030001'       GET UNIQUE PROJ ID
QQIMPCRT EQU   X'3C030003'       CREATE A PROJECTION
QQIMPDEL EQU   X'3C030004'       DELETE SPECIFIED PROJ
QQIMPSAV EQU   X'3C030005'       SAVE IMAGE PROJECTION
QQIMPRST EQU   X'3C030006'       RESTORE PROJECTION
QQIMREX  EQU   X'3C030101'       DEFINE IMAGE RECTANGLE
QQIMREXR EQU   X'3C030102'       DEFINE IMAGE RECTANGLE
QQIMRPL  EQU   X'3C030103'       DEFINE PLACE POSITION
QQIMRSCL EQU   X'3C030105'       SCALE IMAGE RECTANGLE
QQIMRRAL EQU   X'3C030106'       SET SCALING ALGORITHM
QQIMRORN EQU   X'3C030107'       ORIENTATE SUB-IMAGE
QQIMRREF EQU   X'3C030108'       REFLRCT SUB-IMAGE
QQIMRNEG EQU   X'3C030109'       NEGATE IMAGE PIXELS
QQIMRCVB EQU   X'3C030201'       BI-LEVEL CONVERSION
QQIMRBRI EQU   X'3C030202'       BRIGHTNESS CONVERSION
QQIMRCON EQU   X'3C030203'       CONTRAST CONVERSION
QQIMRPLR EQU   X'3C030204'       DEFINE PLACE POSITION
* GROUP - ADMMCQ4
QQCDPU   EQU   X'40000000'       COMP DOC PRINT UTIL

* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DUMMY     DSECT
          GEN  DAPL,SEQDCB,PDSDCB,GM
* ------------------------------------------------------------------- *
          COMMON
          COPY TRENTRY
          COPY X3270
          DCBD DSORG=PS
          COPY REGEQU
          END  OSGDDM
