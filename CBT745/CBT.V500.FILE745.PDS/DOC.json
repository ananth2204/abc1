{"INMR01": {"INMLRECL": 80, "INMFNODE": "BVOMM", "INMFUID": "RLRICE", "INMTNODE": "BVOMM", "INMTUID": "RLRICE", "INMFTIME": "20090318212021000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 117572, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 6400, "INMRECFM": "FB", "INMDIR": 6, "INMDSNAM": "RLRICE.OS.DOC.CBT", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"RLRICE.OS.DOC.CBT": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 6400, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3339, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 0}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x05p\\x00\\x04\\x8a0P'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x05p\\x00\\x04\\x8a0P'", "b'X\\xf2U\\x80\\x00\\x00\\x00\\x0c\\x00\\t\\x00\\x0c\\x00\\r\\x00\\x05'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"APPEND": {"ttr": 7, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "APPENDs the data set or PDS member to the end of an existing\nsequential file or PDS member\n\nWhen used as a line command on a PDS(/E) member display, the\nmember will be Appended.\n\n\nWhen used as a primary command (in the COMMAND=> area) on a PSE(/E)\nmember display\n\n\n  If the command is \"A(PPEND) mmmmmmmm\"\n     the specified member will be Appended\n\n\n  If the command is \"A(PPEND)\" with no member name,\n     all \"TAGGED\" members will be APPENDED\n\n\n\n\nYou will be prompted for the output data set or member to use for\nAppending the data.\n\n\n\n\n\n\n\n\nUp to three of 'separator' lines can be generated before or\nfollowing each member.\n\n\n   Variables available for customizing the separator lines:\n\n\n    &DSN     data set name\n    &MEMBER  member name\n    &DATE1   date in 'Julian'   form (YYDDD)  (five digits)\n    &DATE2   date in 'Julian'   form (YY.DDD) (six digits)\n    &DATE3   date in MMDDYYYY   form (8 bytes)\n    &DATE4   date in MM/DD/YYYY form (10 bytes)\n    &DATE5   date in DDMMYYYY   form (8 bytes)\n    &DATE6   date in DD/MM/YYYY form (10 bytes)\n    &DATE7   date in YYYYMMDD   form (8 bytes)\n    &DATE8   date in YYYY/MM/DD form (10 bytes)\n    &SEQ     Sequence number (first file is 00001,\n                              second is 00002, etc)\n    &TIME1   time in HH:MM:SS        (8 bytes)\n    &TIME2   time in HH:MM:SS:th     (11 bytes)\n    &RECORDS Number of records in last file appended\n    &SIZE    Number of bytes in last file appended\n\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ASCII": {"ttr": 9, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "ASCII is not a \"format\".\n\nTurn turn ASCII mode on or off, enter \"ASCII ON\", \"ASCII OFF\".\nIf you enter \"ASCII\" with no operand, the ASCII mode is \"toggled\".\n\"toggling\" means that if ASCII is OFF, it will be turned ON.\nLikewise if ASCII is ON, it will be turned OFF.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "BROWSE": {"ttr": 11, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "Starts the same display for a PDS or PDS/E member as used for\nsequential files or VSAM files.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DELETE": {"ttr": 13, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "For a PDS or PDS/E member delete the member\nFor a data set on a VTOC display, delete the data set\n\nYou should be prompted to confirm your intent to delete\nPDS(/E) members or data sets.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "FORMAT": {"ttr": 15, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "One of the primary reasons for developing On Screen was to all data\nbeing viewed to be \"formatted\" based on the type of data being viewed.\nFor example a sequential file, the contents would initially be in a\n\"browse\" type format.  PDS(/E) directories would initially be shown\nin a member list with a number of line commands or a command line\ncommand available.  The contents of VTOCs are shown as a list data sets\nwith a line command per data set.  Other custom formatters can be\ndeveloped easily.  One custom formatter that comes \"stock\" is SMF.\n\nThe names of formats is determined by members in the FORMATS library.\n\n\nDEFINING a FORMAT\nTo define a format, create a member in the FORMATS library.\n\nControl statements are:\n\n         Columns\n\n         1        \"*\" (asterisk)   Comment.\n\n         1-4      EXIT             Literally 'EXIT'\n         9-12     module name      Name of a module whose entry\n                                   point will be passed to the\n                                   program named on the PROGRAM\n                                   statement.\n\n\n         1-7      PROGRAM          Literally 'PROGRAM'\n         9-16     module name      This is the name of the program\n                                   called to format the data.\n\n         1-5      PANEL            Literally 'PANEL'\n         9-16     SPF panel        Name of panel.  This should be\n                                   the name of a member in the\n                                   ISPPLIB library.\n\n         other                     Any other data will be passed to\n                                   the the module named on the\n                                   PROGRAM statement.\n\n\n\n\n\n\n\n\nWhen On Screen invokes a format, it calls reads the definition from the\nOSFORMAT directory.  The placement of the statements in the definition\nis important.  When On Screen reads the PROGRAM statement, it loads the\nnamed program and stores the entry point in SESS_FORMATTER_ADDR.\n\nProcessing a format has four \"phases\".\n  1) Initialize\n  2) control\n  3) format\n  4) clean up\n\nThe format phase is indicated by SESS_FORMAT_FLAGS.\n\nWhen the formatter is called with \"initialize\", it should obtain\nis working storage.  It can save the address and length of the\nin SESS_FORMATTER_DXD_ADDR and SESS_FORMATTER_DXD_LENGTH.\nIt can perform any other initialization needed.\n\n\nIf/when a control statement other than EXIT, PANEL, or PROGRAM is\nread, On Screen assumes it is a control statement for use by the\nformatter program.  On Screen will call the formatterin in \"CONTROL\"\nstate with the address of the control statement in register 1.\nThis is intended to allow the same formatting program to be used\nfor multiple purposes.  That is, the same program can be used in\nmultiple FORMAT definitions with differenet control parameters\npassed to the formatter for each FORMAT.  The USERFMT formatter\nis a formatter that uses control statements to allow the same\nprogram to customize the display.\n\n\n\n\nWhen all control statements have been processed, On Screen calls\nthe formatter in \"format\" phase.  The formatter should now display\nthe data.\n\n\nWhen the user switches to a new format or ends the current format,\nthe formatter is called in clean-up.  This allows the formatter to\ndo any clean up necessary like FREEMAINing storage or DEQ'ing\nany ENQ'ed resources.\n\n\nMember OSSKEL of the source library can be used as a starting\npoint to write your own formatter.\n\n\n\n\n\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "GENERAL": {"ttr": 18, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "OS  (On Screen)\n\nOn Screen allows users to view sequential files, PDSs, PDSEs, and VSAM\nfiles of most types and VTOCs.\n\nThe purpose of On Screen is to allow data to not only be viewed in\nplain text, but also to be 'formatted'.  The design of On Screen allows\nnew formats to be added easily.  Some types of data common to most all\nMVS (OS/390, z/OS, or whatever it is called now) systems like SMF are\nalready known (at least some SMF record types).\n\nThe utility determines the data set's DSORG dynamically.  That is it\ndetermines if the data set is sequential, a PDS, VSAM, etc and uses\nthe appropriate access method.\n\nIf a PDS or PDSE is referenced without a member name, a list of the\nmembers is displayed.  PDS(/E)s with RECFM U are assumed to be\n\"loadlibs\", all other RECFMs are \"non loadlibs\".\n\nData from the data set or directory is read into a data space before\nbeing displayed.  This has its advantages and disadvantes.  On the\nplus side, file I/O is only required once.  You can scroll forward,\nbackward, reference anything read into the data space with the system\ndoing any required I/O via system paging which has less overhead and\nis faster than file I/O.  On the negative side, if the data is too\nlarge to be loaded into the data space, only a portion can be viewed\nat a time.  There are options on invocation that allow you to specify\nrecords to skip, number of records to read, and for VSAM files you\ncan use FROMKEY and TOKEY or RBA for positioning.  Why put data in a\ndataspace?  Once the data is in the dataspace, it can be manipulated\nin all sorts of ways without regard data's source.  That is, it\ndoesn't matter whether the source was a sequential file, VSAM, a VTOC,\nHFS, whatever and we don't have to worry about I/O.\nThe system defualt for the dataspace's size is 239 pages.  I intend\nto add a keyword to allow users to request a larger dataspace.\n\n\n\n\nI tried to keep the hard-coded message text to a minimum.  Since I\nam only (somewhat) literate in Enligsh (United States variety),\nthe only messages provided now are English.  If anyone wants to\ntake on translating the messages, the source for US english is\nin source OSMSGUS.  The language you use can be customized on a\nuser by user basis.  The options are kept in the users ISPPROF.\n\n\n\n\n\n\n\n\n\n\n\n\n\nOther odds/ends\nAs of now, On Screen depends on SPF.  I have been looking at\n'faking out' the SPF functions.\n\nThere is no provision for HFS stuff as of yet.\n\n\nI work at a JES3 shop.  We don't have any JES2 SMF data so I don't\nhave much motivation for worrying about formatting any SMF records\nthat would be created by JES2.\n\n\nI have been thinking about On Screening storage.  This would allow\nformatting of in storage control blocks.\n\n\nOn Screen really doesn't 'know' much about tapes.  In the last several\nyears the use of tape has declined drastically here.  The older\nround-reels were notorious for causing problems.  The main purpose\nfor developing DITTO was for messing around with tapes.  By the\nway DO NOT USE DITTO on any system later than about MVS 3 (ESA).\nOn anything later, DITTO CLOBBERS something and the system becomes\nunusable requiring an IPL.\n\n\nCommands can be recalled via a question mark (?).\nUp to the last 20 commands can be recalled.\n\n\nYou can see the contents of various fields in the common area by\nentering DEBUG as a primary command.\n\n\n\n\n\n\n\nFORMATs\n\nWhen a sequential file is first displayed, it is shown using the\ndefault format which is BROWSE.  PDS(/E) directories are displayed\nas member lists.  You can change which format is being used by\nentering \"FORMAT nnnnnnnn\" as a primary command.\n\n\nFormats are defined by members in the OSFORMAT library.\n\nAs supplied the formats available are:\n BROWSE        Displays data 'a-record-at-a-time' that allows up, down,\n               left, and right scrolling.\n\n DIR           Used to display non-loadlib PDS(/E) directories\n\n HEX           Displays data as two hex characters per byte.  The\n               display allows scrolling up, down, left, and right.\n\n LDIR          Used to display loadlib PDS(/E) directories.\n\n RVTOC         Displays VTOC info in \"raw\" form.\n\n SMF           Assumes the data is SMF data.  Most SMF record types\n               have customized displays.  Some records have multiple\n               \"screens\".  \"up\" and \"down\" scrolls records, \"left\"\n               and \"right\" change \"screens\" for a given record.\n\n\n VHEX          Displays data in 'vertical'  hex.  Each record is\n\n VTOC          Displays data sets on a volume.\n\n\n\n\n\n\nReading a VSAM data set component (the index or data) using a DCB\n(this is usually done by a 'S', 'B', or 'V' line command from a\nVTOC display) requires APF authorization.  Otherwise On Screen does\nnot require any special APF authorization.\n\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "OFFLOAD": {"ttr": 21, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "OFFLOAD the member or sequential file to another sequential file or\nPDS member.  If the file or member already exists, it is overwritten.\n\nWhen used as a line command on a PDS or PDS/E display, the member will\nbe Offloaded.\n\n\nWhen used as a primary command (in the COMMAND=> area) on a PDS or PDS/E\nmember display..\n  If the command is \"O(FFLOAD) mmmmmmm\"\n     then only member \"mmmmmm\" is O(FFLOAD)ed\n\n  If the command is \"O(FFLOAD)\"  with no member name,\n     all \"TAGGED\" members will be O(FFLOAD)ed\n\n\n\nYou will be prompted for the name of the output data set or PDS(/E)\nmember to use for the output.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "OS": {"ttr": 23, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "/* REXX ------------------------------------------------------------ */\n/*                                                                   */\n/* ----------------------------------------------------------------- */\n\nARG PARMS\n\n/*   TRACE R */\n\nADDRESS TSO ISPEXEC \"CONTROL ERRORS RETURN\"\n\nADDRESS TSO ISPEXEC \"SELECT  CMD(OS2\" PARMS \") NEWAPPL(OS)\"\n\nRETURN 4\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "OS2": {"ttr": 277, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "/* REXX ------------------------------------------------------------ */\n/*                                                                   */\n/* ----------------------------------------------------------------- */\n\n   PARSE UPPER ARG OSARG\n\n/* TRACE R  */\n\n   ADDRESS TSO FREE \"F(STEPLIBX)\"\n   ADDRESS TSO FREE \"F(OS000001)\"\n   ADDRESS TSO FREE \"F(OS000002)\"\n   ADDRESS TSO FREE \"F(OS000003)\"\n   ADDRESS TSO FREE \"F(OS000004)\"\n   ADDRESS TSO FREE \"F(OS000005)\"\n   ADDRESS TSO FREE \"F(OS000006)\"\n   ADDRESS TSO FREE \"F(OS000007)\"\n   ADDRESS TSO FREE \"F(OS000008)\"\n   ADDRESS TSO FREE \"F(OS000009)\"\n   ADDRESS TSO FREE \"F(OS000010)\"\n   ADDRESS TSO FREE \"F(OSOPTS)\"\n   ADDRESS TSO FREE \"F(OSOSAT)\"\n\n   ADDRESS TSO ALLOC \"F(OSFORMAT)  DA(.......OS.FORMATS) SHR REUSE\"\n   ADDRESS TSO ALLOC \"F(OSOPTS)    DA(.......OS.OPTS)    SHR REUSE\"\n\n   ADDRESS TSO\n        ISPEXEC \"LIBDEF ISPPLIB DATASET ID('.......OS.ISPPLIB')\"\n\n   ADDRESS TSO\n        ALLOC \"FI(STEPLIBX) DA('.......OS.LOADLIB' ***) SHR REUSE\"\n\n   XX=TSOPEXT\n\n      \"OSMAIN\" OSARG\n\n   IF XX = '' THEN\n      ADDRESS TSO FREE \"FI(STEPLIBX)\"\n   ELSE\n      ADDRESS TSO ALLOC \"F(STEPLIBX) DA(\" XX \") SHR REUSE\"\n\n   ADDRESS TSO FREE \"F(STEPLIBX)\"\n   ADDRESS TSO FREE \"F(OS000001)\"\n   ADDRESS TSO FREE \"F(OS000002)\"\n   ADDRESS TSO FREE \"F(OS000003)\"\n   ADDRESS TSO FREE \"F(OS000004)\"\n   ADDRESS TSO FREE \"F(OS000005)\"\n   ADDRESS TSO FREE \"F(OS000006)\"\n   ADDRESS TSO FREE \"F(OS000007)\"\n   ADDRESS TSO FREE \"F(OS000008)\"\n   ADDRESS TSO FREE \"F(OS000009)\"\n   ADDRESS TSO FREE \"F(OS000010)\"\n   ADDRESS TSO FREE \"F(OSOPTS)\"\n   ADDRESS TSO FREE \"F(OSOSAT)\"\n   ADDRESS TSO FREE \"F(OSFORMAT)\"\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PDS": {"ttr": 257, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": " When viewing a PDS or PDS/E member list, the options depend on the\n RECFM of the library.  If the library has RECFM=U, it is assumed to\n be a LOADLIB.  Otherwise it is assumed to be a \"non LOADLIB\".\n\n \"non LOADLIB\" line commands are:\n    B    BROWSE  this member\n    D    DELETE  this member\n    O    OFFLOAD this member\n    R    RENAME  this member\n    S    BROWSE  this member\n    T    TAG     this member\n    V    BROWSE  this member\n    X    RESET   FLAG for this member\n\n\nPrimary commands (comands entered in the \"COMMAND=>\" area)\n\n\n  A          Append\n  B          Browse\n  D          Delete\n  F          Find a member\n  J          Submit member as a batch JOB\n  L          Locate (same as Find)\n  O          Offload\n  R          Rename\n  S          Select (same as browse)\n  T          Tag a member\n  X          Reset FLAG\n  BR         BRowse\n  FI         Find a member\n  FL         FLag (Tag) a member\n  DEL        DELETE\n  JOB        Submit member as a batch JOB\n  LOC        LOCate a member (same as Find)\n  OFF        OFFload\n  REN        REName\n  RES        RESet\n  SEL        SELect\n  SUB        SUBmit member as a batch JOB\n  TAG        Tag a member\n  FIND       FIND\n  FLAG       FLAG (Tag) a member\n  SORT       SORT members by NAME, TTR, CDATE, MDATE, SIZE, or USER name\n  VIEW       VIEW (same as browse)\n  RESET      RESET (turn off FLAG)\n  APPEND     APPEND\n  DELETE     DELETE\n  LOCATE     LOCATE (same as Find)\n  RENAME     RENAME\n  SELECT     SELECT (same as browse)\n  SUBMIT     SUBMIT member as a batch JOB\n  OFFLOAD    OFFLOAD\n  REFRESH    REFRESHs the data in the display\n\n\n\n\n\n\n\n\"Loadlib\" line commands are:\n    B    BROWSE  this member\n    D    DELETE  this member\n    F    FLAG (Tag) this member\n    L    Display binder info for this member\n    O    OFFLOAD this member\n    R    RENAME  this member\n    S    BROWSE  this member\n    T    Tag this member\n    V    BROWSE  this member\n    X    RESET   reset tag for this member\n\n\n\n\nPrimary commands are:\n  B          Browse\n  D          Delete\n  F          Find     a member\n  L          Locate   (same as find)\n  S          Select   (same as browse)\n  T          Tag      a member\n  V          View     (same as browse)\n  X          Reset    flag\n  FI         FInd     (same as find)\n  FL         FLag     (same as tag)\n  DEL        DELete   a member\n  LOC        LOCate   (same as find)\n  Tag        Tag      a member\n  FIND       FInd     a member\n  FLAG       FLag     (same as tag)\n  VIEW       VIEW     (same as browse)\n  RESET      RESET    flag\n  BROWSE     BROWSE\n  DELETE     DELETE\n  LOCATE     LOCATE\n  REFRESH    REFRESHs the display\n\n\n\n\nThe \"L\" line command for a member of a loadlib starts a BINDER dialog\nLine commands available for BINDER displays are:\n    B       Display information about the BINDER used to link-edit\n    E       Display ESD data\n    L       Display language processor info\n    M       Display MAP info\n    R       Display RLD info\n    Z       Display ZAP info\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RECALL": {"ttr": 260, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "\nCommands entered in the area following \"COMMAND=>\" on the top line\nare \"primary\" commands.  Primary commands are stored and are\n\"recallable\".  To recall commands one at a time in reverse order,\nenter a question mark (?) in the primary command area.\n\nOnce a command has been recalled, it can be over-typed if desired\nand re-entered by pressing the ENTER key.\n\nUp to the last 20 commands may be RECALLED.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SESSION": {"ttr": 262, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "Each PDS, sequential file, or PDS member \"OS'd\" is considered a\n\"session\".\n\nFor example if you start On Screen by displaying the members in a\nPDS(/E), the member list display itself is a \"session\".  If you browse\n(with the S, B, or V line command or primary commands), On Screen\ncreates a second \"session\".  You may display your active sessions by\nentering \"SESS\" or \"SESSION\" as a primary command.\n\n\nThe session display shows one line for each \"session\"\n\nYou may switch \"sessions\" by entering a non-blank in the line command\narea.\n\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SMF": {"ttr": 264, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "On Screen is designed to allow data to be custom formatted.\n\nSMF records are one of the types of data On Screen \"knows\".\n\nWhen browsing a file of SMF data, you can enter \"FORMAT SMF\" or\njust \"SMF\" to have On Screen start formatting the SMF data a record\nat a time.\n\nOn Screen does no checking to verify packed decimal or other types of\ndata are valid.  If the data is not valid SMF records, On Screen can\nand probably will abend with 0C7, 0C4, etc.\n\n\nSome SMF record types have more data than can be displayed on one\nscreen.  Use the LEFT and RIGHT scroll commands to display the\nother screens for these record types.\n\nYou can return to BROWSE be entering \"FORMAT\" in the primary command.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SORT": {"ttr": 266, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "Members in PDS(/E) directory displays can be sorted.\n\nFor non-LOADLIB PDS(/E)s\n   NAME         member name\n   TTR          member's disk address (track and record)\n   CDATE        create date\n   MDATE        last modification date\n   SIZE         size (number of records)\n   USER         last user to modify this member\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "STARTUP": {"ttr": 268, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "Start up On Screen from SPF option 6 by entering:\n\n OS DSN=xxxxx\n\n   or\n\n OS DSN=xxxxx MEMBER=mmmmmmm\n\n   or\n\n OS VTOC=vvvvvv\n\n   or\n\n OS RAWVTOC=vvvvvv (or VTOCRAW=vvvvvv)\n\n\n From SPF 3.4 you can enter \"OS DSN=/\" as a line command\n\n\n DSN can be the name of a sequential file, PDS (or PDS/E), or VSAM file\n\n If the data set is a PDS or PDS/E, a member name is optional.\n\n If the data set is a PDS or PDS/E and no member name is given,\n a listing of the members in the library will be displayed.\n\n\n If started with the VTOC keyword, a list of the data sets on the\n volume will be displayed.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "USERFMT": {"ttr": 270, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "    If you're not an assembler programmer of if spending the time\n    writing an exit or formatter isn't worth the trouble, you may\n    still be able to get a customized display by using USERFMT.\n\n\n        IF statements\n          1-10       literal 'IF'\n         10-19       starting position in data record\n         20-29       length in data record\n         30-39       data type\n         40-49       condition (EQ, NE,\n         50-59       data for compare\n\n\n        FIELD statements\n          1-10       literal 'FIELD'\n         10-19       starting position in data record\n         20-29       length in data record\n         30-39       Data type\n                      .. valid data types are:\n                         BINARY\n                         CHARACTER\n                         HEADING\n                         HEX\n         40-49       row,column for displaying in dynamic area\n         50-80       data displayed for HEADING fields\n\n\n\n    IF statements may be 'nested'.  That is one IF can be\n    dependant on another.\n\n 1      FIELD\n 2      FIELD\n 3      IF ..............\n 4      FIELD\n 5      FIELD\n 6      FIELD\n 7      FIELD\n 8      IF ..............\n 9      FIELD\n10      FIELD\n11      ENDIF\n12      FIELD\n13      FIELD\n14      ENDIF\n15      FIELD\n16      FIELD\n\n\n     in the preceding example,\n        The sequence numbers (1-16) are just to help in this\n        explanation, they are not part of the format definition\n        statements.\n\n        The FIELDS on statements 1 and 2 will always be processed.\n\n        The condition specified on the IF on statement 3 will always\n        be tested.\n\n        If the condition from the test on statement 3 is true\n           the FIELDs on statements 4, 5, 6, and 7 will be processed\n           The condition on statement 8 will be tested\n           If the condition on statement 8 is true\n              process the FIELDs on statements 9 and 10.\n           If the condtion from the test on statement 8 was false\n              skip to statement 12\n           process the FIELDs on statments 12 and 13\n        If the condition from the test on statement 3 is false\n           skip to statement 15\n\n        The FIELDs on statements 15 and 16 are always processed.\n\n\n\n\n\nOS.USER1 is some data that can be used to demo a user format.\nStart up OS:\n     OS DSN=xxx.OS.USER1 F=USER2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "VSAM": {"ttr": 273, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "VSAM is still a work in progress.\n\nAs of now you can allow On Screen to start reading from the\nstart of the data set or specify an RBA.  If you specify an RBA,\nonly one record will be read.\n\nFor VSAM KSDS's you can specify a FROMKEY and/or a TOKEY.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "VTOC": {"ttr": 275, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": " When viewing a VTOC\n\n line commands are:\n     B             Browse\n     C             Catalog\n     D             Delete\n     I             Detail info\n     R             Rename\n     S             Select (same as browse)\n     U             Uncatalog\n     X             Compress\n\n\n Primary commands\n     F             Find a data set\n     L             Locate a data set (same as find)\n     FIND          Find a data set\n     LOCATE        Locate a data set (same as find)\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT745/CBT.V500.FILE745.PDS/DOC.xmi", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT745/CBT.V500.FILE745.PDS", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}