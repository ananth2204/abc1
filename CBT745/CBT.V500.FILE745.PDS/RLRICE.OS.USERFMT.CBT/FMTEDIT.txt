* ------------------------------------------------------------------- *
*                                                                     *
*  MODULE NAME: FMTEDIT                                               *
*                                                                     *
*  Process custom edit words                                          *
*                                                                     *
*  Rather than use hardware edit instruction (ED), the editing is     *
*  done more 'manually'.  "Edit words" are much like "PICTURE"        *
*  values valid to COBOL.                                             *
*                                                                     *
* ------------------------------------------------------------------- *
FMTEDIT  CSECT
FMTEDIT  AMODE 31
FMTEDIT  RMODE ANY
         USING OSCOMM,R12
         USING SESSION,R11
         USING FMTEDIT,R15
         B     INIT0000
MODID    DC    CL8'FMTEDIT'
         DC    CL8'&SYSDATE'
         DC    CL7'&SYSTIME'
INIT0000 DS    0H
         STM   R14,R12,12(R13)               SAVE REGS
         LR    R10,R15                       COPY ENTRY POINT
         DROP  R15
         USING FMTEDIT,R10                   DEFINE BASE
         L     R9,SESS_FORMATTER_DXD_ADDR    WORK AREA
         LR    R15,R9                        COPY WORK AREA ADDRESS
         USING FMT_COMMON,R9
         L     R15,SESS_FORMATTER_DXD_ADDR   WORK AREA BASE
         A     R15,DXD_START                 PLUS DISP
         ST    R13,4(R15)                    SAVE R13
         ST    R15,8(R13)                    CHAIN SAVE AREA
         LR    R13,R15                       COPY WORK AREA ADDRESS
         USING DXDEDIT,R13                   DEFINE WORK AREA BASE
         MVC   DXD_CSECT,MODID
         L     R7,DXD_FMAT_FMAT              FMAT BEING PROCESSED
         USING FMAT,R7
         L     R8,COMM_OSSPFD
         USING OSSPFD,R8
         ITRACE ID=ENTRY,                                              +
               DATA1=(COMM_INFO_01+00,8),                              +
               DATA2=(COMM_INFO_01+08,8)
* ------------------------------------------------------------------- *
*                                                                     *
*     Perform "custom editing"                                        *
*                                                                     *
*     The number to be edited has been unpacked into COMM_INFO_01.    *
*     The edit word is in FMAT_DATA.                                  *
*     Output will be performed into COMM_INFO_02, then copied to      *
*     the VDATA buffer.                                               *
*                                                                     *
*     The length of the output is determined by the user supplied     *
*     edit mask (columns 50-80 on the FIELD control statement).       *
*     The end of the mask will be indicated by a byte of binary zero. *
*                                                                     *
* ------------------------------------------------------------------- *
INIT0010 DS    0H
         LA    R2,COMM_INFO_01+15
         LA    R1,15
INIT0020 DS    0H
         CLI   0(R2),X'00'                   ZEROS?
         BNE   INIT0030                      NO
         BCTR  R2,0
         BCT   R1,INIT0020                   LOOP
INIT0030 DS    0H
         MVC   DXD_SIGN,0(R2)                SAVE SIGN
         ITRACE ID=ED_SIGN,                                            +
               DATA1=(DXD_SIGN,1)
EDIT0010 DS    0H
         ITRACE ID=EDITWORD,                                           +
               DATA1=FMAT_DATA+0,                                      +
               DATA2=FMAT_DATA+8
         MVI   DXD_EDIT_FLAGS,0              RESET ALL FLAGS
         LA    R2,COMM_INFO_01               NUMBER TO 'EDIT'
         LA    R3,FMAT_DATA                  'EDIT MASK'
         LA    R4,COMM_INFO_02               OUTPUT ADDRESS
         MVC   COMM_INFO_02(L'FMAT_DATA),FMAT_DATA
EDIT0020 DS    0H
         ITRACE ID=X,DATA1=(0(R3),2)
         CLI   0(R3),C' '                    END OF EDIT MASK?
         BE    EDIT0120                      YES
         CLI   0(R3),X'00'                   END OF EDIT MASK?
         BE    EDIT0120                      YES
         CLC   =X'C3D900',0(R3)              'CR' AND A BYTE OF ZERO?
         BE    EDIT0100                      YES
         CLC   =C'CR ',0(R3)                 'CR '?
         BE    EDIT0100                      YES
         CLI   0(R3),C'9'                    EDIT MASK A NINE?
         BE    EDIT0090                      YES
         CLI   0(R3),C'Z'                    EDIT MASK A 'Z'?
         BE    EDIT0030                      YES
         CLI   0(R3),C'-'                    EDIT MASK A MINUS SIGN?
         BE    EDIT0060                      YES
         CLI   0(R3),C'$'                    DOLLAR SIGN?
         BE    EDIT0030                      YES
         MVC   0(1,R4),0(R3)                 COPY MASK BYTE TO OUTPUT
         LA    R3,1(,R3)                     NEXT MASK BYTE
         LA    R4,1(,R4)                     NEXT OUTPUT
         B     EDIT0020
EDIT0030 DS    0H
         CLI   0(R2),C'0'                    THIS DIGIT A ZERO?
         BNE   EDIT0090                      NO
         TM    DXD_EDIT_FLAGS,$SIGNIFICANT   SIGNIFICANT DIGIT FOUND?
         BO    EDIT0080                      YES
         TM    FMAT_OPTIONS,$FMAT_FLOAT      FLOATING PAD CHARACTER?
         BO    EDIT0040
         MVI   0(R4),C' '                    INSERT BLANK
         LA    R4,1(,R4)                     NEXT IN OUTPUT
         LA    R3,1(,R3)                     NEXT IN MASK
         LA    R2,1(,R2)                     NEXT IN NUMBER
         B     EDIT0020
EDIT0040 DS    0H
         MVC   0(1,R4),FMAT_DATA             COPY 1ST EDIT MASK CHAR
         LR    R1,R4                         COPY ADDRESS
         BCTR  R1,0                          BACK UP ONE
         CLC   0(1,R1),FMAT_DATA             TWO IN A ROW?
         BNE   EDIT0050                      NO
         MVI   0(R1),C' '                    CHANGE 1ST ONE TO A BLANK
EDIT0050 DS    0H
         CLI   FMAT_DATA,C'-'                IS PAD A MINUS SIGN?
         BE    EDIT0060                      YES
         CLI   FMAT_DATA,C'Z'                IS PAD A 'Z'?
         BNE   EDIT0070                      NO
         MVI   0(R4),C' '                    CHANGE TO A BLANK
         B     EDIT0070
EDIT0060 DS    0H
         CLI   DXD_SIGN,C'D'                 NEGATIVE NUMBER?
         BE    EDIT0070                      YES.. LEAVE HYPHEN
         MVI   0(R4),C' '                    CHANGE TO A BLANK
EDIT0070 DS    0H
         LA    R4,1(,R4)                     NEXT IN OUTPUT
         LA    R3,1(,R3)                     NEXT IN MASK
         LA    R2,1(,R2)                     NEXT IN NUMBER
         B     EDIT0020
EDIT0080 DS    0H
         MVI   0(R4),C'0'                    INSERT A ZERO
         LA    R4,1(,R4)                     NEXT IN OUTPUT
         LA    R3,1(,R3)                     NEXT IN MASK
         LA    R2,1(,R2)                     NEXT IN NUMBER
         B     EDIT0020
EDIT0090 DS    0H
         OI    DXD_EDIT_FLAGS,$SIGNIFICANT   FORCE SIGNIFICANT DIGIT
         MVC   0(1,R4),0(R2)                 COPY THE DIGIT
         LA    R2,1(,R2)                     NEXT IN NUMBER
         LA    R3,1(,R3)                     NEXT IN MASK
         LA    R4,1(,R4)                     NEXT IN OUTPUT
         B     EDIT0020
EDIT0100 DS    0H
         ITRACE ID=Y,DATA1=(DXD_SIGN,1)
         CLI   DXD_SIGN,C'D'                 NEGATIVE NUMBER?
         BE    EDIT0110                      YES.. LEAVE 'CR'
         MVC   0(2,R4),COMM_BLANKS           OVER-LAY WITH BLANKS
EDIT0110 DS    0H
         LA    R4,2(,R4)                     ADD 2 TO LENGTH
EDIT0120 DS    0H
         LA    R1,COMM_INFO_02               OUTPUT AREA
         SR    R4,R1                         LENGTH GENERATED
         BCTR  R4,0                          FOR EXECUTE
         LH    R1,FMAT_ROW                   ROW ON DISPLAY
         BCTR  R1,0                          RELATIVE TO ZERO
         MH    R1,SPF_VWIDTH+2               TIMES WIDTH
         LH    R2,FMAT_COLUMN                COLUMN NUMBER
         BCTR  R2,0                          RELATIVE TO ZERO
         AR    R1,R2                         PLUS COLUMN
         A     R1,DXD_VDATA_ADDR             PLUS VDATA ADDR
         EX    R4,PACK_MVC                   COPY TO OUTPUT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ITRACE ID=EXIT
         L     R13,4(,R13)                   RESTORE R13
         L     R14,12(,R13)                  RESTORE R14
         LM    R0,R12,20(R13)                RESTORE REGISTERS
         BR    R14                           RETURN
* ------------------------------------------------------------------- *
PACK_MVC MVC   0(0,R1),COMM_INFO_02          COPY TO VDATA BUFFER
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXD_START      DC      Q(DXDEDIT)


               LTORG
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DXDEDIT              DSECT
                     COPY  DXDPREF

DXD_SIGN             DS    X

DXD_EDIT_FLAGS       DS    X
$SIGNIFICANT         EQU   X'80'          SIGNIFICANT DIGIT FOUND

* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
               COMMON
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
               SESSION
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
               BPXYSTAT DSECT=YES,LIST=YES
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
FMT_COMMON     DSECT
               DS      (DXD_PREFIX_L)X
               COPY    FMTCOMM
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
               COPY    FMAT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
               OSSPFD  TYPE=DSECT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
               COPY    TRENTRY
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
               COPY    REGEQU
               END     FMTEDIT
