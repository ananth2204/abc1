* ------------------------------------------------------------------- *
*                                                                     *
*  MODULE NAME: CNTRLIF                                               *
*                                                                     *
*  Interpret IF control statements                                    *
*                                                                     *
* ------------------------------------------------------------------- *
CNTRLIF  CSECT
CNTRLIF  AMODE 31
CNTRLIF  RMODE ANY
         USING OSCOMM,R12
         USING SESSION,R11
         USING CNTRLIF,R15
         B     INIT0000
MODID    DC    CL8'CNTRLIF'
         DC    CL8'&SYSDATE'
         DC    CL7'&SYSTIME'
INIT0000 DS    0H
         STM   R14,R12,12(R13)               SAVE REGS
         LR    R10,R15                       COPY ENTRY POINT
         DROP  R15
         USING CNTRLIF,R10                   DEFINE BASE
         L     R9,SESS_FORMATTER_DXD_ADDR    WORK AREA
         USING FMT_COMMON,R9
         LR    R8,R1                         CONTROL STATEMENT ADDRESS
         USING FORMAT,R8                     DEFINE BASE
         USING FMAT,R7
         LR    R15,R9                        WORK AREA BASE
         A     R15,DXD_START                 PLUS DISP
         ST    R13,4(R15)                    SAVE R13
         ST    R15,8(R13)                    CHAIN SAVE AREA
         LR    R13,R15                       COPY WORK AREA ADDRESS
         USING DXDCIF,R13                    DEFINE WORK AREA BASE
         MVC   DXD_CSECT,MODID
         XC    DXD_RC,DXD_RC                 INITIALIZE RETURN CODE
* ------------------------------------------------------------------- *
*                                                                     *
*        Process IF statements                                        *
*                                                                     *
*        Note... the base used for the record and FMAT block used     *
*        in the compare instructions that are built must match        *
*        the code in FMTIF.. that is R6 is assumed to be computed     *
*        to the address of data in the record to be tested and R7     *
*        will be the address of the FMAT block at the time of the     *
*        compare in FMTIF.                                            *
*                                                                     *
*                                                                     *
* ------------------------------------------------------------------- *
IF0000   DS    0H
         ITRACE ID=IF,                                                 +
               DATA1=(DXD_IF_LEVEL,2)
         XC    DXD_COMPARE,DXD_COMPARE       INITIALIZE
         LA    R1,FORMAT_START               STARTING POSITION
         BAL   R15,NBR0000                   VERIFY AND CONVERT
         BM    ERR0010                       NOT VALID
         ITRACE ID=START,                                              +
               RDATA1=R0
         STH   R0,DXD_FIELD_START            SAVE START POSITION
         LA    R1,FORMAT_LENGTH              LENGTH
         BAL   R15,NBR0000                   VERIFY AND CONVERT
         BM    ERR0020                       NOT VALID
         ITRACE ID=LENGTH,                                             +
               RDATA1=R0
         STH   R0,DXD_FIELD_LENGTH           SAVE FIELD LENGTH
         LA    R1,DATA_TYPE_TABLE            DATA TYPE TABLE
         USING DATA_TYPES,R1                 DEFINE BASE
IF0010   DS    0H
         CLC   DATA_TYPES_TYPE,FORMAT_DATA_TYPE
         BE    IF0020                        TYPE LOCATED
         CLI   DATA_TYPES_TYPE,X'FF'         END OF TABLE?
         BE    ERR0030                       YES
         LA    R1,DATA_TYPES_L(,R1)          NEXT TYPE
         B     IF0010                        KEEP LOOKING
IF0020   DS    0H
         MVC   DXD_TYPE_CODE,DATA_TYPES_CODE COPY TYPE CODE
         ITRACE ID=TYPECODE,                                           +
               DATA1=(DXD_TYPE_CODE,1)
         CLI   DXD_TYPE_CODE,$FMAT_CHARACTER CHARACTER FIELD?
         BE    IF0030                        YES
         CLI   DXD_TYPE_CODE,$FMAT_HEX       HEX FIELD?
         BE    IF0040                        YES
         CLI   DXD_TYPE_CODE,$FMAT_PACKED    PACKED DECIMAL
         BE    IF0100                        YES
         DC    H'0'
* ------------------------------------------------------------------- *
*        Character fields                                             *
* ------------------------------------------------------------------- *
IF0030   DS    0H
         ITRACE ID=CHAR
         MVC   DXD_DATA,FORMAT_HEADING       COPY AS IS
         CLC   DXD_FIELD_LENGTH,H30          FIELD LENGTH
         BL    IF0090                        NO
         MVC   DXD_FIELD_LENGTH,H30          LIMIT LENGTH
         B     IF0090
* ------------------------------------------------------------------- *
*        HEX fields                                                   *
* ------------------------------------------------------------------- *
IF0040   DS    0H
         ITRACE ID=HEX
         LA    R2,FORMAT_HEADING             DATA FOR COMPARE
         LH    R1,DXD_FIELD_LENGTH           FIELD LENGTH
         CH    R1,H15                        TOO LARGE?
         BL    IF0050                        NO
         LH    R1,H15                        LIMIT
         STH   R1,DXD_FIELD_LENGTH
IF0050   DS    0H
         SLL   R1,1                          TWO PER BYTE
IF0060   DS    0H
         CLI   0(R2),C'A'                    VALID HEX?
         BL    ERR0060                       NO
         CLI   0(R2),C'F'                    VALID HEX?
         BNH   IF0070                        YES
         CLI   0(R2),C'0'                    VALID HEX?
         BL    ERR0060                       NO
         CLI   0(R2),C'9'                    LAST CHANCE
         BH    ERR0060                       NOT VALID
IF0070   DS    0H
         LA    R2,1(,R2)                     NEXT
         BCT   R1,IF0060                     LOOP
         XC    DXD_DATA,DXD_DATA             INITIALIZE
         TR    FORMAT_HEADING,CHAR_TO_HEX    PREPARE FOR PACKING
         LA    R1,FORMAT_HEADING             SOURCE
         LA    R2,DXD_DATA                   OUTPUT
         LH    R3,DXD_FIELD_LENGTH           LENGTH
         ITRACE ID=PACK_HEX,                                           +
               RDATA1=R2,                                              +
               RDATA2=R3
IF0080   DS    0H
         PACK  0(2,R2),0(3,R1)               PACK
         MVI   1(R2),X'00'
         LA    R1,2(,R1)                     NEXT IN SOURCE
         LA    R2,1(,R2)                     NEXT IN OUTPUT
         BCT   R3,IF0080                     LOOP
* ------------------------------------------------------------------- *
*        Construct compare for character and hex                      *
* ------------------------------------------------------------------- *
IF0090   DS    0H
         ITRACE ID=BLD_CLC
         MVI   DXD_COMPARE,X'D5'             USE CLC OP-CODE
         LH    R1,DXD_FIELD_LENGTH           FIELD LENGTH
         BCTR  R1,0                          MINUS 1
         STC   R1,DXD_COMPARE+1              SET LENGTH
         B     IF0110                        BUILD THE OPERANDS
* ------------------------------------------------------------------- *
*        Packed decimal                                               *
* ------------------------------------------------------------------- *
IF0100   DS    0H
         ITRACE ID=PACKED
         LA    R1,FORMAT_HEADING             STARTING POSITION
         BAL   R15,NBR0000                   VERIFY AND CONVERT
         BM    ERR0010                       NOT VALID
         XC    DXD_DATA,DXD_DATA             INITIALIZE
         MVC   DXD_DATA(L'COMM_DWORD),COMM_DWORD
* ------------------------------------------------------------------- *
*        Construct compare for packed decimal                         *
* ------------------------------------------------------------------- *
         ITRACE ID=BLD_CP
         MVI   DXD_COMPARE,X'F9'             USE CP OP-CODE
         LH    R1,DXD_FIELD_LENGTH           LENGTH
         BCTR  R1,0                          MINUS 1
         SLL   R1,4                          SHIFT
         STC   R1,DXD_COMPARE+1              SET LENGTH 1
         OI    DXD_COMPARE+1,L'COMM_DWORD-1  OR-IN LENGTH 2
* ------------------------------------------------------------------- *
*        Build operands for compare (CLC or CP)                       *
* ------------------------------------------------------------------- *
IF0110   DS    0H
         LH    R1,DXD_FIELD_START            STARTING POSITION
         BCTR  R1,0
         STCM  R1,3,DXD_COMPARE+2            SET DISP
         OI    DXD_COMPARE+2,X'60'           OR-IN RECORD BASE  <---
         LA    R1,FMAT_DATA-FMAT             DISP TO DATA
         STCM  R1,3,DXD_COMPARE+4            SET DISP
         OI    DXD_COMPARE+4,X'70'           FMAT BLOCK BASE    <---
* ------------------------------------------------------------------- *
*        Find Branch instruction                                      *
* ------------------------------------------------------------------- *
         LA    R1,BRANCH_TABLE
         USING BRANCH_TYPES,R1
IF0120   DS    0H
         CLC   BRANCH_TYPE,FORMAT_ROW_COLUMN
         BE    IF0130
         CLI   BRANCH_TYPE,X'FF'             END OF TABLE?
         BE    ERR0040                       YES
         LA    R1,BRANCH_TYPES_L(,R1)
         B     IF0120
IF0130   DS    0H
         MVC   DXD_BRANCH,BRANCH_OPCODE      COPY BRANCH OPCODE
* ------------------------------------------------------------------- *
*        Update IF level                                              *
* ------------------------------------------------------------------- *
         LH    R2,DXD_IF_LEVEL               CURRENT IF LEVEL
         CH    R2,H16                        AT LEVEL 16 NOW?
         BE    ERR0050                       YES
         LR    R1,R2                         COPY IF LEVEL
         LA    R1,1(,R1)                     PLUS 1
         STH   R1,DXD_IF_LEVEL               UPDATE IF LEVEL
         ITRACE ID=DOWN,                                               +
               RDATA1=R1                     .. NEW LEVEL
* ------------------------------------------------------------------- *
*        Build new FMAT block                                         *
* ------------------------------------------------------------------- *
         GETMAIN RU,                                                   +
               LV=FMAT_L,                                              +
               LOC=ANY
         OC    DXD_FIRST_FMAT,DXD_FIRST_FMAT BLOCKS ALREADY ON CHAIN?
         BNZ   IF0140                        YES
         ST    R1,DXD_FIRST_FMAT             SET 1ST ON CHAIN
IF0140   DS    0H
         L     R15,DXD_FMAT_CHAIN_POINT      CHAIN POINT
         ST    R1,0(R15)                     ADD TO CHAIN
         LR    R7,R1                         COPY ADDRESS
         XC    FMAT(FMAT_L),FMAT             INITIALIZE THE STORAGE
         MVI   FMAT_TYPE,$FMAT_IF            SET TYPE TO 'IF'
         MVC   FMAT_DATA_TYPE,DXD_TYPE_CODE  COPY DATA TYPE CODE
         MVC   FMAT_START,DXD_FIELD_START    COPY STARTING POSITION
         MVC   FMAT_LENGTH,DXD_FIELD_LENGTH  COPY LENGTH
         MVC   FMAT_COMPARE,DXD_COMPARE      COPY COMPARE INSTRUCTION
         MVC   FMAT_BRANCH,DXD_BRANCH        COPY BRANCH
         MVC   FMAT_DATA,DXD_DATA            COPY FOR COMPARE
         SLL   R2,2                          MULTIPLY LEVEL BY 4
         LA    R2,DXD_IF_TABLE(R2)           COMPUTE ADDRESS
         ST    R7,0(R2)                      SAVE IF BLOCK ADDRESS
         ITRACE ID=FMAT,                                               +
               RDATA1=R7
         LA    R1,FMAT_FIELDS                CHAIN POINT
         ST    R1,DXD_FMAT_CHAIN_POINT
         B     EXIT0000                      ALL DONE
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
NBR0000  DS    0H
         MVC   COMM_INFO_01(10),C_0000000000
NBR0010  DS    0H
         CLI   0(R1),C' '                    BLANK?
         BE    NBR0020                       YES
         CLI   0(R1),C','                    COMMA?
         BE    NBR0020                       YES
         CLI   0(R1),C'0'                    ZERO?
         BL    NBR0030                       LESS.. BAD
         CLI   0(R1),C'9'                    NINE?
         BH    NBR0030                       HIGHER.. BAD
         MVC   COMM_INFO_01(9),COMM_INFO_01+1
         MVC   COMM_INFO_01+9(1),0(R1)
         LA    R1,1(,R1)                     NEXT DIGIT
         B     NBR0010                       LOOP
NBR0020  DS    0H
         PACK  COMM_DWORD,COMM_INFO_01(10)
         CVB   R0,COMM_DWORD                 CONVERT TO BINARY
         BR    R15
NBR0030  DS    0H
         ICM   R0,15,MINUS_ONE              INDICATE BAD
         BR    R15
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
ERR0010  DS    0H
         MVI   COMM_MSG_ID+1,1              START NOT VALID
         B     ERR900
ERR0020  DS    0H
         MVI   COMM_MSG_ID+1,2              LENGTH NOT VALID
         B     ERR900
ERR0030  DS    0H
         MVI   COMM_MSG_ID+1,3              BAD DATA TYPE
         B     ERR900
ERR0040  DS    0H
         MVI   COMM_MSG_ID+1,4              BAD BRANCH CONDITION
         B     ERR900
ERR0050  DS    0H
         MVI   COMM_MSG_ID+1,5              TOO MANY NESTED IF'S
         B     ERR900
ERR0060  DS    0H
         MVI   COMM_MSG_ID+1,6              BAD HEX DIGIT
ERR900   DS    0H
         MVC   COMM_MSG_CSECT,MODID
         MVI   COMM_MSG_ID,0
         L     R15,COMM_V_OSMSG             OSMSG ENTRY POINT
         BALR  R14,R15                      BUILD MESSAGE
         MVI   DXD_RC+1,8                   SET RC
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
EXIT0000 DS    0H
         ITRACE ID=EXIT
         LH    R15,DXD_RC                   SET RC
         L     R13,4(,R13)                  RESTORE R13
         L     R14,12(,R13)                 RESTORE R14
         LM    R0,R12,20(R13)               RESTORE REMAINING REGISTERS
         BR    R14                          RETURN

* ------------------------------------------------------------------- *
*        CONSTANTS                                                    *
* ------------------------------------------------------------------- *
DXD_START       DC   Q(DXDCIF)
MINUS_ONE       DC   F'-1'

H15             DC   H'15'
H16             DC   H'16'
H30             DC   H'30'

C_0000000000    DC   10C'0'

DATA_TYPE_TABLE DS   0C
                DC   CL10'BINARY',AL1($FMAT_BINARY)
                DC   CL10'CHARACTER',AL1($FMAT_CHARACTER)
                DC   CL10'HEADING',AL1($FMAT_HEADING)
                DC   CL10'HEX',AL1($FMAT_HEX)
                DC   CL10'PACKED',AL1($FMAT_PACKED)
                DC   X'FF'
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
CHAR_TO_HEX     DC   256X'00'
                ORG  CHAR_TO_HEX+C'A'
                DC   X'0A0B0C0D0E0F'
                ORG  CHAR_TO_HEX+C'0'
                DC   X'00010203040506070809'
                ORG
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
BRANCH_TABLE    DS   0H
                DC   CL4'EQ  '
                BER  R15

                DC   CL4'NE  '
                BNER R15

                DC   CL4'=   '
                BER  R15

                DC   CL4'LOW '
                BLR  R15

                DC   CL4'<   '
                BLR  R15

                DC   CL4'HIGH'
                BHR  R15

                DC   CL4'>   '
                BHR  R15

                DC   CL4'ON  '
                BOR  R15

                DC   CL4'ONE '
                BOR  R15

                DC   CL4'OFF '
                BNOR R15

                DC   CL4'ZERO'
                BNOR R15

                DC   X'FF'

                LTORG
* ------------------------------------------------------------------- *
*                   WORK AREAS                                        *
* ------------------------------------------------------------------- *
DXDCIF              DSECT
                    COPY    DXDPREF

DXD_RC              DS      H

DXD_FIELD_START     DS      XL2
DXD_FIELD_LENGTH    DS      XL2
DXD_ROW             DS      XL2
DXD_COLUMN          DS      XL2
DXD_TYPE_CODE       DS      X
DXD_COMPARE         DS      XL6
DXD_BRANCH          DS      XL2
DXD_DATA            DS      CL30

* ------------------------------------------------------------------- *
*                   COMMON AREA                                       *
* ------------------------------------------------------------------- *
                    COMMON
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
                    SESSION
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
                    BPXYSTAT DSECT=YES,LIST=YES
* ------------------------------------------------------------------- *
*                   FMT COMMON                                        *
* ------------------------------------------------------------------- *
FMT_COMMON          DSECT
                    DS      (DXD_PREFIX_L)X
                    COPY    FMTCOMM
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
                    COPY    FORMAT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
                    COPY    FMAT
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
DATA_TYPES          DSECT
DATA_TYPES_TYPE     DS      CL10
DATA_TYPES_CODE     DS      X
DATA_TYPES_L        EQU     *-DATA_TYPES
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
BRANCH_TYPES        DSECT
BRANCH_TYPE         DS      CL4
BRANCH_OPCODE       DS      XL2
BRANCH_TYPES_L      EQU     *-BRANCH_TYPES
* ------------------------------------------------------------------- *
*                                                                     *
* ------------------------------------------------------------------- *
                    COPY    TRENTRY
* ------------------------------------------------------------------- *
*                   EQUATES                                           *
* ------------------------------------------------------------------- *
                    COPY    REGEQU
                    END     CNTRLIF
