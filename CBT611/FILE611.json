{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012448000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 235144, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 9, "INMDSNAM": "CBT.V500.FILE611.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 235144, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 235144, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE611.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x05\\x0c'", "DS1TRBAL": "b'iR'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x04u\\x00\\x07\\x04u\\x00\\x0c\\x00\\x06'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04;\\x00\\x00\\x01\\x03\\x07\\x1f\\x01\\x03\\x07\\x1f\\x087\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf5\\xf9@@@'", "ispf": {"version": "04.59", "flags": 0, "createdate": "2003-03-12T00:00:00", "modifydate": "2003-03-12T08:37:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-459"}, "text": "REGULAR CBT TAPE - VERSION 459    FILE:  611\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT459.FILE611\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    8000    PO\n\n   PDS117I 18 MEMBERS COUNTED; CUMULATIVE SIZE IS 1,970 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   03/12/03    08:37:05    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$NOTE1": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x15\\x01\\x03\\x07\\x1f\\x01\\x03\\x07\\x1f\\x08'\\x00\\x1e\\x00\\x1e\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-03-12T00:00:00", "modifydate": "2003-03-12T08:27:15", "lines": 30, "newlines": 30, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject: Updates to FILE # 611\nDate: Wed, 12 Mar 2003 17:40:27 +0530\nFrom:\n  \"Ramaswamy Saraswathy, Hari (Cognizant)\" <RamaHari@CHN.COGNIZANT.COM>\nTo: <sbgolob@attglobal.net>,\n     <sbgolob@cbttape.org>,\n     <SBGOLOB@aol.com>\n\nHi Sam,\n\nI am the contributor of CBT 611 tape (REXX to submit job based on\nRC fom previous job).  I had promised you more updates.\n\nWith all the help you extended, I was able to extend the\napplication to perform scheduling operation of any batch cycle. I\nhave tested it for a one batch cycle.\n\nThis tool is having the functionalities such as automating a\nwhole cycle, to restart at a particular job etc. README and HELP\nfiles are also included.\n\nI also want to thank my teammates, Madhan (for the design of\ntables which the tool uses) and Mathangi(for GUI using panels).\n\nI want to extend my sincere thanks to you for your constant help\nand encouragement.\n\nThanking you,\nHari\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@FILE611": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04;\\x00\\x00\\x01\\x03\\x07\\x1f\\x01\\x03\\x07\\x1f\\x08\\x13\\x00\\x0f\\x00\\x0f\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf5\\xf9@@@'", "ispf": {"version": "04.59", "flags": 0, "createdate": "2003-03-12T00:00:00", "modifydate": "2003-03-12T08:13:00", "lines": 15, "newlines": 15, "modlines": 0, "user": "CBT-459"}, "text": "//***FILE 611 is from Hari Ramaswamy Saraswathy of Madras, India    *   FILE 611\n//*           (Chennai) and contains an Automatic Job Scheduler.    *   FILE 611\n//*           This package makes it possible to delay the           *   FILE 611\n//*           submission of a job until a prerequisite job has      *   FILE 611\n//*           completed first, and entire sequences of jobs can     *   FILE 611\n//*           be scheduled to execute properly.                     *   FILE 611\n//*                                                                 *   FILE 611\n//*           Please see member README in this pds, to see how to   *   FILE 611\n//*           install and run the Job Scheduler.  The member HELP   *   FILE 611\n//*           also gives a lot of insight into how this package     *   FILE 611\n//*           works.                                                *   FILE 611\n//*                                                                 *   FILE 611\n//*           email:   RamaHari@Chn.Cognizant.com                   *   FILE 611\n//*                    harirs@yahoo.com                             *   FILE 611\n//*                                                                 *   FILE 611\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DECNPNL": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03\\x07\\x1f\\x01\\x03\\x07\\x1f\\x07W\\x00%\\x00%\\x00\\x00\\xc8\\xc1\\xd9\\xc9@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-03-12T00:00:00", "modifydate": "2003-03-12T07:57:00", "lines": 37, "newlines": 37, "modlines": 0, "user": "HARI"}, "text": ")ATTR\n% TYPE(TEXT) COLOR(BLUE) HILITE(REVERSE)\n* TYPE(TEXT) CAPS(OFF) INTENS(HIGH) COLOR(PINK) SKIP(ON)\n_ TYPE(INPUT) PAD('_') INTENS(HIGH) COLOR(RED)\n@ TYPE(TEXT) CAPS(OFF) INTENS(HIGH) COLOR(BLUE) SKIP(ON)\n! TYPE(AB)\n\u00a2 TYPE(NT)\n)ABC DESC(Help) MNEM(1)\n  PDC DESC(Help) MNEM(1)\n  ACTION RUN(ISRROUTE) PARM('SELECT CMD(%shwhlp)')\n)ABCINIT\n  .ZVARS = PDCHOICE\n  &PDCHOICE = ''\n)BODY WIDTH(80) EXPAND(//)\n! Help\u00a2\n% ---------------------- Job Scheduler Tool /-/%\n% -----------------------------Entry Screen/-/%\n*\n*\n*\n*\n*\n*                 Scheduler Options = _Z*\n@                 Select 'S' for Scheduling jobs or 'M' for maintenance\n*\n*\n*\n*\n*\n)INIT\n   .ZVARS  = '(option)'\n   &option = ' '\n)PROC\n  &ZCURSOR = .CURSOR\n  &ZCSROFF = .CSRPOS\n  ver(&option,nb,list,'S','M')\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "GENTAB": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03\\x07\\x1f\\x01\\x03\\x07\\x1f\\x07W\\x00\\x1d\\x00\\x1d\\x00\\x00\\xc8\\xc1\\xd9\\xc9@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-03-12T00:00:00", "modifydate": "2003-03-12T07:57:00", "lines": 29, "newlines": 29, "modlines": 0, "user": "HARI"}, "text": ")ATTR\n  % TYPE(TEXT) COLOR(BLUE) HILITE(REVERSE)\n  * TYPE(TEXT) CAPS(OFF) INTENS(HIGH) COLOR(PINK) SKIP(ON)\n  ! TYPE(TEXT) CAPS(OFF) INTENS(HIGH) COLOR(BLUE) SKIP(ON)\n  _ TYPE(INPUT) PAD('_') INTENS(HIGH) COLOR(RED)\n  @ TYPE(INPUT) PAD('_') COLOR(blue) NUMERIC(ON)\n)BODY WIDTH(80) EXPAND(//)\n% ---------------------- Job Scheduler Tool /-/%\n% -----------------------------Entry Screen/-/%\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*                        &panelvar            _Z*\n*\n!                        &paneltxt\n)INIT\n   .ZVARS  = '(Confirm)'\n)PROC\n  &ZCURSOR = .CURSOR\n  &ZCSROFF = .CSRPOS\n  Ver(&confirm,nb,list,'Y','R')\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "HELP": {"ttr": 526, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03\\x07\\x1f\\x01\\x03\\x07\\x1f\\x07W\\x00\\xbd\\x00\\xbd\\x00\\x00\\xc8\\xc1\\xd9\\xc9@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-03-12T00:00:00", "modifydate": "2003-03-12T07:57:00", "lines": 189, "newlines": 189, "modlines": 0, "user": "HARI"}, "text": "                       --------------------------------\n                       \u00a6  JOB SCHEDULER - HELP PANEL  \u00a6\n                       --------------------------------\n\n     Once the the Job Scheduler Tool is invoked, the following panel\n     would be shown:\n                 ____________________________________\n                |                                    |\n                |                                    |\n                |                                    |\n                |     Scheduler Options =  _         |\n                |                                    |\n                |                                    |\n                |                                    |\n                |                                    |\n                |                                    |\n                |                                    |\n                |____________________________________|\n\n\n\n\n\n     If the option selected is 'M', the screen for maintenance of\n     Master tables will be shown\n\n     The panel for entering the job information has the following form\n\n     Table I\n\n       ____________________________________\n      |                                    |\n      |  A  Insert after the row           |\n      |  /  Edit the selected row          |\n      |  D  Delete the selected row        |\n      |                                    |\n      |     ________     ________     _    |\n      |                                    |\n      |     Generate Master Tables =  _    |\n      |     ParentJob     ChildJob    Type |\n      |  _     JOB01         JOB01    T    |\n      |  _     JOB01         JOB02    T    |\n      |  _     JOB01         JOB03    T    |\n      |  _     JOB02         JOB04    T    |\n      |  _     JOB03         JOB05    T    |\n      |  _     JOB04         JOB06    D    |\n      |  _     JOB05         JOB06    D    |\n      |  _     JOB06         JOB07    T    |\n      |____________________________________|\n\n    Assume the following as the sequence of jobs to be scheduled.\n\n    Figure I\n\n                             JOB01\n                               |\n                          _____|_____\n                         |           |\n                         |           |\n                       JOB02       JOB03 --->> Trigger job\n                         |           |\n                         |           |\n                       JOB04       JOB05\n                         |           |\n                         |___________|\n                               |\n                               |\n                             JOB06 --------->> Dependent job\n                               |\n                               |\n                             JOB07\n\n\n    For the sequence of jobs given above, the user entry to be done is given\n    in Table I.\n\n\n\n    The Terminology used are explained below:\n    _________________________________________\n\n\n    Trigger Job:  (Entered as type 'T')\n    -----------   ---------------------\n\n    Trigger job is a job which gets submitted immediately after the\n    completion of the previous job without any dependencies on any\n    other job. The first job in the cycle which triggers the rest of\n    the jobs must also be defined as type 'T'.\n    Example: JOB03 (as in Figure I) can be submitted immediately after\n             JOB01 completes without waiting for any other Job.\n\n\n    Dependent Job:  (Entered as type 'D')\n    -------------   ---------------------\n\n    Dependent job is a job which has to wait for more than one job to\n    get finished before it can be submitted.\n    Example: JOB06 (as in Figure I) has to wait till JOB04 and JOB05\n             are completed successfully.\n\n\n    Parent Job:\n    -----------\n    Refers to the Job which would call another job on its successful\n    completion.\n\n    Child Job:\n    ----------\n    Refers to the Job which must be called on the successful completion\n    of the corresponding parent job.\n\n\n    How to add jobs to Table I ?\n    ****************************\n\n    For the First job ie JOB01 the PARENT and CHILD jobs are to be entered\n    as JOB01.\n\n    JOB01 Triggers 2 jobs namely, JOB02 and JOB03.\n    For this the entry should be\n\n    Parent   Child  type\n    JOB01    JOB02   T  --->> type is T(for Trigger)\n    JOB01    JOB03   T  --->> type is T(for Trigger)\n\n    JOB06 is a Dependent job. It depends on the successful completion of the\n    jobs JOB04 and JOB05.\n\n    For this the entry should be\n    Parent   Child  type\n    JOB04    JOB06   D  --->> type is D(for Dependent)\n    JOB05    JOB06   D  --->> type is D(for Dependent)\n\n    Once the entries are done properly, select PF3 to display the below\n    panel:\n       ____________________________________\n      |                                    |\n      |                                    |\n      |                                    |\n      |     Submit Scheduler JOB  _        |\n      |                                    |\n      |     Y for Submit, R for Restart    |\n      |                                    |\n      |                                    |\n      |                                    |\n      |                                    |\n      |                                    |\n      |____________________________________|\n\n    On selection of 'Y' for Generate Master Tables, the system would\n    generate all the required Master tables, which would be internally\n    used for scheduling the jobs by the Scheduling routine.\n\n    Selection of PF3 in this screen would quit the application.\n\n    If the option selected is 'R', the following screen will be shown.\n\n       ____________________________________\n      |                                    |\n      |                                    |\n      |                                    |\n      |     Restart job name      ________ |\n      |                                    |\n      |                                    |\n      |                                    |\n      |                                    |\n      |                                    |\n      |                                    |\n      |____________________________________|\n\n    How to start the automatic submission of Jobs ?\n    ***********************************************\n\n    If 'Y' is selected for Submit Scheduler Jobs, the scheduler would:\n\n    1. Submit the Scheduling JCL.\n\n    2. In case of abend, further submission of jobs will not take place and\n       spool will show the abended job.\n\n    3. If the jobs go through fine, spool will show that jobs are scheduled\n       properly.\n\n    4. In case of abend, corrective action can be taken and the scheduling\n       JCL can be submitted with RESTART option with the job to be\n       restarted. Then the scheduling will start from the restart job\n       specified.\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "INITTOOL": {"ttr": 530, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03\\x07\\x1f\\x01\\x03\\x07\\x1f\\x07W\\x00\\r\\x00\\r\\x00\\x00\\xc8\\xc1\\xd9\\xc9@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-03-12T00:00:00", "modifydate": "2003-03-12T07:57:00", "lines": 13, "newlines": 13, "modlines": 0, "user": "HARI"}, "text": "/*rexx*/\ntabldsn = 'hlq.tables'\njcllib  = 'hlq.JCLLIB'\npnllib  = 'hlq.panels'\nskllib  = 'hlq.panels'\nrexxlib = 'hlq.rexx'\naddress ispexec\n\"VPUT ( tabldsn ) ASIS\"\n\"VPUT ( jcllib ) ASIS\"\n\"VPUT ( pnllib ) ASIS\"\n\"VPUT ( skllib ) ASIS\"\n\"VPUT ( rexxlib ) ASIS\"\nexit\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "JOBLIST": {"ttr": 532, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03\\x07\\x1f\\x01\\x03\\x07\\x1f\\x07W\\x00F\\x00F\\x00\\x00\\xc8\\xc1\\xd9\\xc9@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-03-12T00:00:00", "modifydate": "2003-03-12T07:57:00", "lines": 70, "newlines": 70, "modlines": 0, "user": "HARI"}, "text": "/*REXX*/\n/****************************** REXX *********************************/\n/*   THE REXX IS USED TO PULL OUT ALL JOB RELATED INFORMATION FROM   */\n/*   ADDRESS CONTROL BLOCK (ASCB) AND OTHER RELATED CONTROL BLOCKS   */\n/*   LISTED BELOW:                                                   */\n/*           CVT, ASVT, ASCB, ASXB, TSB, LWA, PSCB, CSCB             */\n/*********************************************************************/\nARG      TAR OPT                               /* PULL IN PARMS      */\nCVT    = STORAGE(10,4)                         /* ADDR CVT           */\nDCVT   = C2D(CVT)                              /* CONVERT TO DECIMAL */\nASVT   = STORAGE(C2X(D2C(DCVT+556)),4)         /* ADDR ASVT          */\nDASVT  = C2D(ASVT)                             /* CONVERT TO DECIMAL */\nASCNT  = C2D(STORAGE(C2X(D2C(DASVT+516)),4))   /* ADDR ASCBCNT       */\nCOUNT  = 0                                     /* INIT THE SEQ-COUNT */\n/*CLEAR*/                                      /* CLEAR SCREEN       */\nHEADER = 'A C T I V E    J O B    L I S T'     /*INIT HEADER LINE    */\nHEADER = CENTER(HEADER,80)                     /* CENTERS IT         */\nSAY      HEADER                                /* PUT OUT HEADER LINE*/\nDO I     = 1 TO ASCNT\n   ASCB  = STORAGE(C2X(D2C(DASVT+524+I*4)),4)  /* ADDR ASCB FROM ASVT*/\n   IF   ABBREV(C2X(ASCB),'80')  = 1            /* IS IT VALID?       */\n        THEN ITERATE                           /* NO, LEAVE FOR NEXT */\n   ELSE IF   STORAGE(C2X(ASCB),4) \\= 'ASCB'    /* IS IT ALLOCATED?   */\n             THEN ITERATE                      /* NO, LEAVE FOR NEXT */\n   DASCB = C2D(ASCB)                           /* CONVERT TO DECIMAL */\n   COUNT = COUNT + 1                           /* INCREASE COUNTER   */\n   TSB   = STORAGE(C2X(D2C(DASCB+60)),4)       /* LOAD TSB ADDRESS   */\n   IF    TSB \\= '00000000'X  THEN              /* ANY ADDR IN THERE  */\n         TYPE = TSO                            /* YES, ITS A TSO     */\n   ELSE  TYPE = STC                            /* NO, ASSUME STC     */\n   UID   = STORAGE(C2X(D2C(DASCB+172)),4)      /* LOAD ASCBJOBI ADDR */\n   IF    C2X(UID) = 00000000 THEN              /* IS THERE AN ADDR?  */\n         UID = STORAGE(C2X(D2C(DASCB+176)),4)  /* NO, MUST BE A STC  */\n   ELSE  TYPE = JOB                            /* YES, MAKE TYPE JOB */\n   UID   = STORAGE(C2X(UID),8)                 /* GET JOB/STC NAME   */\n   STAT  = STORAGE(C2X(D2C(DASCB+X2D(66))),1)  /*                    */\n   STAT  = C2X(STAT)                           /*                    */\n   IF    LENGTH(TAR) > 0 THEN                  /* ANY TARGET ENTERED */\n         DO                                    /* DO USERID CHECKING */\n            LN  = LENGTH(TAR)                  /* GET PARM LENGTH    */\n            IF  TAR \\= SUBSTR(UID,1,LN) THEN   /* IS IT MATCH UID?   */\n                ITERATE                        /* NO, GO GET NEXT ONE*/\n         END                                   /*                    */\n   IF    LENGTH(OPT) > 0 &,                    /* ANY OPTION ENTERED */\n         OPT \\= TYPE   THEN                    /* IS IT MATCH TYPE?  */\n         ITERATE                               /* NO, GO GET NEXT ONE*/\n   ASID  = STORAGE(C2X(D2C(DASCB+X2D(24))),2)  /* LOAD ASID IN HEX   */\n   ASID  = C2X(ASID)                           /* CONVERT TO CHAR.   */\n   ASXB  = STORAGE(C2X(D2C(DASCB+108)),4)      /* LOAD ASXB ADDRESS  */\n   DASXB = C2D(ASXB)                           /* CONVERT TO DECIMAL */\n   ACEE  = STORAGE(C2X(D2C(DASXB+X2D(C8))),4)  /* LOAD LAST TCB ADDR */\n   DACEE = C2D(ACEE)                           /* CONVERT TO DECIMAL */\n   ACEID = STORAGE(C2X(D2C(DACEE+X2D(00))),4)  /* LOAD LAST TCB ADDR */\n   CRTID = STORAGE(C2X(D2C(DACEE+X2D(40))),8)  /* LOAD LAST TCB ADDR */\n   CSCB  = STORAGE(C2X(D2C(DASCB+X2D(38))),4)  /* LOAD CSCB ADDRESS  */\n   DCSCB = C2D(CSCB)                           /* CONVERT TO DECIMAL */\n   CHKEY = STORAGE(C2X(D2C(DCSCB+8)),8)        /* GET PROC NAME      */\n   CHCLS = STORAGE(C2X(D2C(DCSCB+16)),8)       /* GET STEP NAME      */\n   LWA   = STORAGE(C2X(D2C(DASXB+20)),4)       /* LOAD LWA ADDRESS   */\n   DLWA  = C2D(LWA)                            /* CONVERT TO DECIMAL */\n   PSCB  = STORAGE(C2X(D2C(DLWA+24)),4)        /* LOAD PSCB ADDRESS  */\n   DPSCB = C2D(PSCB)                           /* CONVERT TO DECIMAL */\n   XFLAG = C2X(STORAGE(C2X(D2C(DPSCB+16)),1))  /* GET PROFILE ATTRIB */\n   OTCNT = RIGHT(COUNT,3)                      /* FORMAT COUNT FIELD */\n   LINE  = OTCNT UID CHCLS C2X(ASCB) ASID,     /* FORMAT OUTPUT LINE */\n           TYPE ' ' STAT ' ' C2X(ACEE) CRTID   /*                    */\n   LINE  = CENTER(LINE,79)                     /* CENTERS THE LINE   */\n   SAY    LINE                                 /* PUT OUT TITLE LINE */\nEND\nRETURN(0)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "README": {"ttr": 534, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03\\x07\\x1f\\x01\\x03\\x07\\x1f\\x07W\\x00T\\x00T\\x00\\x00\\xc8\\xc1\\xd9\\xc9@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-03-12T00:00:00", "modifydate": "2003-03-12T07:57:00", "lines": 84, "newlines": 84, "modlines": 0, "user": "HARI"}, "text": "\n      Job Scheduler Installation Manual\n      ---------------------------------\n\n      Following setup needs to be checked before running the  Job\n      Scheduler Tool :\n\n      1) Following members must be present in the panel dataset:\n         XXXX.PANELS(FB:80)\n\n          USERENTY\n          DECNPNL\n          THROTBL\n          GENTAB\n          RSRTPAN\n\n      2) Following members must be present in the Rexx dataset:\n         XXXX.REXX(FB:80)\n\n          INITTOOL\n          SCHDULER\n          SCHTEST\n          SHWHLP\n          HELP\n          README\n          SDSFUPDT\n          JOBLIST\n\n      3) Following members must be present in the SKel dataset:\n         XXXX.SKELS(FB:80)\n\n          SCHDJCL\n          SCHRSTRT\n          Important : The JCLs provided with the skel library might\n          *********   need changes depending on the installation.\n                      ISRDDN can be used for finding out the\n                      concatenations.\n\n      4) Following table dataset must be present:\n         XXXX.TABLES(FB:80)\n\n      INITIALIZATION procedure\n      ------------------------\n\n      Edit the INITTOOL member with the dataset names for the TABLES,\n      PANELS and JCL library.\n\n      JCL changes to be done to use Scheduler\n      ---------------------------------------\n\n      A step has to be added to each jcl. This step will capture\n      the return codes for all the previous steps or any ABEND in\n      previous step. The step has to have COND=EVEN to intercept an\n      ABEND.\n      The following step needs to be added to each JCL as the last step.\n\n     //ISPF    EXEC PGM=IKJEFT01,DYNAMNBR=1500,PARM='',COND=EVEN\n     //SYSPROC  DD  DSN=hlq.TEST.REXX,DISP=SHR         ---------\n     //SYSPRINT DD SYSOUT=*\n     //SYSTSPRT DD SYSOUT=*\n     //SYSOUT   DD SYSOUT=*\n     //ISPFILE DD DUMMY\n     //ISPLOG  DD SYSOUT=*,DCB=(RECFM=VA,LRECL=125,BLKSIZE=129)\n     //SYSTSIN DD *\n         ISPSTART CMD(%SDSFUPDT jobname ) NEWAPPL(BAT)\n     /*                         -------\n     //                            \u00a6\n                                    --> Name of the job\n\n      Executing the scheduler\n      -----------------------\n      Concat the rexx library to SYSPROC or SYSEXEC.\n      Execute the member SCHDULER. This will show navigation panels,\n      using which all functions such as creation and maintenance of\n      master tables, Submitting the scheduler job or Submitting\n      the Scheduler job with RESTART job can be done.\n\n      For help regarding the Job entry to master tables, please refer\n      the member HELP in rexx library.\n\n      For any queries or bugs please mail to\n          Ramahari@Chn.Cognizant.Com\n          harirs@yahoo.com\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "RSRTPAN": {"ttr": 769, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03\\x07\\x1f\\x01\\x03\\x07\\x1f\\x07W\\x00\\x1d\\x00\\x1d\\x00\\x00\\xc8\\xc1\\xd9\\xc9@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-03-12T00:00:00", "modifydate": "2003-03-12T07:57:00", "lines": 29, "newlines": 29, "modlines": 0, "user": "HARI"}, "text": ")ATTR\n  % TYPE(TEXT) COLOR(BLUE) HILITE(REVERSE)\n  * TYPE(TEXT) CAPS(OFF) INTENS(HIGH) COLOR(PINK) SKIP(ON)\n  ! TYPE(TEXT) CAPS(OFF) INTENS(HIGH) COLOR(BLUE) SKIP(ON)\n  _ TYPE(INPUT) PAD('_') INTENS(HIGH) COLOR(RED)\n  @ TYPE(INPUT) PAD('_') COLOR(blue) NUMERIC(ON)\n)BODY WIDTH(80) EXPAND(//)\n% ---------------------- Job Scheduler Tool /-/%\n% -----------------------------Entry Screen/-/%\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*                        &panelvar            _Z       *\n*\n!                        &paneltxt\n)INIT\n   .ZVARS  = '(rsrtjb)'\n)PROC\n  &ZCURSOR = .CURSOR\n  &ZCSROFF = .CSRPOS\n  Ver(&rsrtjb,nb)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SCHDJCL": {"ttr": 771, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03\\x07\\x1f\\x01\\x03\\x07\\x1f\\x07W\\x00\\x0e\\x00\\x0e\\x00\\x00\\xc8\\xc1\\xd9\\xc9@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-03-12T00:00:00", "modifydate": "2003-03-12T07:57:00", "lines": 14, "newlines": 14, "modlines": 0, "user": "HARI"}, "text": ")DEFAULT ~#?!<|>\n//SCHDULER JOB COMP,CLASS=A,MSGCLASS=X,USER=&SYSUID,\n//   NOTIFY=&SYSUID,REGION=4M,MSGLEVEL=(1,1)\n//ISPF    EXEC PGM=IKJEFT01,DYNAMNBR=1500,PARM='',COND=EVEN\n//SYSPROC  DD DSN=HLQ.REXX,DISP=SHR\n//SYSPRINT DD SYSOUT=*\n//SYSTSPRT DD SYSOUT=*\n//SYSOUT   DD SYSOUT=*\n//ISPLOG  DD SYSOUT=*,DCB=(RECFM=VA,LRECL=125,BLKSIZE=129)\n//SYSTSIN DD *\n   ISPSTART CMD(%SCHTEST  PDS #REXXLIB  +\n     ) NEWAPPL(BAT)\n/*\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SCHDULER": {"ttr": 773, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03\\x07\\x1f\\x01\\x03\\x07\\x1f\\x084\\x02\\x03\\x02\\x03\\x00\\x00\\xc8\\xc1\\xd9\\xc9@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-03-12T00:00:00", "modifydate": "2003-03-12T08:34:00", "lines": 515, "newlines": 515, "modlines": 0, "user": "HARI"}, "text": "/*rexx*/\nADDRESS ISPEXEC\n\"CONTROL ERRORS RETURN\"\n\nCall inittool\n\n\"VGET ( tabldsn ) ASIS\"\n\"VGET ( skllib ) ASIS\"\n\"VGET ( pnllib ) ASIS\"\n\"VGET ( rexxlib ) ASIS\"\n\nADDRESS ISPEXEC\n\"LIBDEF ISPPLIB DATASET ID('\"pnllib\"') UNCOND\"\nIF RC \\= 0 THEN DO\n   SAY \"S--> LIBDEF  FAILED FOR ISPPLIB .RC=\"RC\n   SAY ZERRLM\n   SIGNAL MAIN_EXIT\nEND\n\n\"LIBDEF ISPTLIB DATASET ID('\"tabldsn\"') UNCOND\"\nif rc \\= 0 then do\n    say 'S-> LIBDEF failed on DD ISPTLIB. RC = ' rc\n    say \"S-> Dataset name = '\" tabldsn \"'\"\n    say 'S-> Terminating application'\n    exit\nend\n\"LIBDEF ISPTABL DATASET ID('\"tabldsn\"') UNCOND\"\nif rc \\= 0 then do\n    say 'S-> LIBDEF failed on DD ISPTABL. RC = ' rc\n    say \"S-> Dataset name = '\" tabldsn \"'\"\n    say 'S-> Terminating application'\n    exit\nend\n\nskeldsn = skllib\n\"LIBDEF ISPSLIB DATASET ID('\"skeldsn\"') UNCOND\"\nif rc \\= 0 then do\n    say 'S-> LIBDEF failed on DD ISPTABL. RC = ' rc\n    say \"S-> Dataset name = '\" tabldsn \"'\"\n    say 'S-> Terminating application'\n    exit\nend\n\nIF sysdsn(temp.schd.ps) \u00ac= 'OK' Then Do\n   Address tso\n   \"alloc da(temp.schd.ps) dsorg(ps) lrecl(80)\",\n       \"recfm(f,b) blksize(27920) space(50,50) new\"\nEnd\n\nAddress ispexec\n\"LIBDEF ISPFILE DATASET ID(\"temp.schd.ps\")\"\nif rc \\= 0 then do\n   say \"s--> libdef  failed for ispfile .rc=\"rc\n   say zerrlm\n   signal main_exit\nend\n\n\"TBERASE \"basetbl\nbasetbl = 'basetbl'\n\"TBOPEN \"basetbl\norc = rc\nselect\n   when orc = 0 then nop\n   when orc = 8 then do\n     \"TBCREATE \"basetbl\",\n      Names(seq\",\n           \"basjbnam \",\n           \"jbfunc)\",\n        \"WRITE\"\n        if rc \\= 0 then do\n          say \"S-> TBCREATE failed for table \"basetbl\".RC=\"rc\n          Say zerrlm\n          signal main_exit\n        end\n     \"TBSORT \"basetbl\" FIELDS(seq,n,a)\"\n   end\n   otherwise do\n      say \"S-> TBOPEN failed for table \"basetbl\".RC=\"orc\n      Say zerrlm\n      signal main_exit\n   end\nend\nif rc \\= 0 then do\n    say 'W-> TBOPEN failed for table 'basetbl'. RC = ' rc\n    basflag = 0\nend\ntrigtbl = 'trigtbl'\n\"TBERASE \"trigtbl\n\"TBOPEN \"trigtbl\norc = rc\nselect\n   when orc = 0 then nop\n   when orc = 8 then do\n     \"TBCREATE \"trigtbl\",\n      Names(trigjbnm\",\n        \"targjbnm)\",\n        \"WRITE\"\n        if rc \\= 0 then do\n          say \"S-> TBCREATE failed for table \"basetbl\".RC=\"rc\n          Say zerrlm\n          signal main_exit\n        end\n   end\n   otherwise do\n      say \"S-> TBOPEN failed for table \"basetbl\".RC=\"orc\n      Say zerrlm\n      signal main_exit\n   end\nend\nif rc \\= 0 then do\n    say 'W-> TBOPEN failed for table 'basetbl'. RC = ' rc\n    triflag = 0\nend\ndepdtbl = 'depdtbl'\n\"TBERASE \"depdtbl\n\"TBOPEN \"depdtbl\norc = rc\nselect\n   when orc = 0 then nop\n   when orc = 8 then do\n     \"TBCREATE \"depdtbl\",\n      Names(srcjbnm \",\n        \"depdjbnm)\",\n        \"WRITE\"\n        if rc \\= 0 then do\n          say \"S-> TBCREATE failed for table \"basetbl\".RC=\"rc\n          Say zerrlm\n          signal main_exit\n        end\n   end\n   otherwise do\n      say \"S-> TBOPEN failed for table \"basetbl\".RC=\"orc\n      Say zerrlm\n      signal main_exit\n   end\nend\nif rc \\= 0 then do\n    say 'W-> TBOPEN failed for table 'basetbl'. RC = ' rc\n    depflag = 0\nend\njbsttbl = 'jbsttbl'\n\"TBERASE \"jbsttbl\n\"TBOPEN \"jbsttbl\norc = rc\nselect\n   when orc = 0 then nop\n   when orc = 8 then do\n     \"TBCREATE \"jbsttbl\",\n      Names(runingjb\",\n        \"jbstatus)\",\n        \"WRITE\"\n        if rc \\= 0 then do\n          say \"S-> TBCREATE failed for table \"jbsttbl\".RC=\"rc\n          Say zerrlm\n          signal main_exit\n        end\n   end\n   otherwise do\n      say \"S-> TBOPEN failed for table \"jbsttbl\".RC=\"orc\n      Say zerrlm\n      signal main_exit\n   end\nend\nif rc \\= 0 then do\n    say 'W-> TBOPEN failed for table 'jbsttbl'. RC = ' rc\n    depflag = 0\nend\njobtbl = 'jobtbl'\n\"TBOPEN \"jobtbl \"write\"\norc = rc\nselect\n   when orc = 0 then nop\n   when orc = 8 then do\n     \"TBCREATE \"jobtbl\",\n      Names(parent  \",\n        \"child   \",\n        \"ty)\",\n        \"WRITE\"\n        if rc \\= 0 then do\n          say \"S-> TBCREATE failed for table \"jobtbl\".RC=\"rc\n          Say zerrlm\n          signal main_exit\n        end\n   end\n   otherwise do\n      say \"S-> TBOPEN failed for table \"jobtbl\".RC=\"orc\n      Say zerrlm\n      signal main_exit\n   end\nend\n\n\"tbtop \" jobtbl\n\"tbskip \" jobtbl\nskiprc = rc\nif skiprc = 0 then do\n   Call Decide_upon\n   If option = 'M' then do\n       Call disp_tbl\n   End\n   Call Disp_gentab\n   signal main_exit\nend\n\n\"DISPLAY PANEL(USERENTY)\"\ndisprc = rc\nif rc > 8 then do\n   say \"s--> display failed.rc=\"rc\n   say zerrlm\n   signal main_exit\nend\ndo while disprc = 0\n  do i = 1 to 12\n    parent = value(p||i)\n    child = value(c||i)\n    ty = value(t||i)\n    if strip(parent) = '' then do\n       if strip(child) = '' then do\n         if strip(ty) = '' then do\n         leave\n         end\n       end\n    end\n    else do\n    \"tbadd \" jobtbl\n    end\n  end\n  \"Display panel(userenty)\"\n  disprc = rc\n  if rc > 8 then do\n     say \"s--> display failed.rc=\"rc\n     say zerrlm\n     signal main_exit\n  end\nend\nCall disp_tbl\nCall Disp_gentab\nSignal main_exit\n\nDecide_upon:\n    \"Display panel(decnpnl)\"\n    disprc = rc\n    If disprc = 8 then do\n        Say \"I -> Exiting the scheduling process\"\n        Signal main_exit\n    End\nReturn\ndisp_tbl:\n\"TBTOP \"  jobtbl\n\"TBDISPL \"jobtbl\" PANEL(THROTBL)\"\nIf rc > 8 Then Do\n   Say \"S-> Error when processing panel THROTBL rc = \"rc,\n       \" Execution terminated...\"\n   Say zerrlm\n   Signal main_exit\nEnd\ndispcc = rc\n\nIf dispcc < 8 then do\n   Call process_selected_rows\nEnd\nreturn\nDisp_gentab:\n    Call Generate_Master_tables\n    Confirm = ' '\n    panelvar = \"Submit Scheduler JOB   \"\n    paneltxt = \"Y for Submit, R for Restart\"\n    \"Display Panel(GENTAB)\"\n    If Confirm = 'Y' then do\n        Say \"I -> Submitting the Scheduler\"\n        skelvar = 'SCHDJCL'\n        Call skel_call\n        Address tso \"submit \"temp.schd.ps\n        Say \"I -> Please view the jobstatus in spool\"\n        Signal main_exit\n    End\n    If Confirm = 'R' then do\n        panelvar = \"Restart job name       \"\n        paneltxt = \" \"\n        Confirm = \" \"\n        \"Display Panel(RSRTPAN)\"\n        If rc = 0 then do\n            rstrmem = rsrtjb\n            Say \"I -> Restarting with job \"RSTRMEM\n            skelvar = 'SCHRSTRT'\n            Call skel_call\n            Address tso \"Submit \"temp.schd.ps\n            Say \"I -> Please view the jobstatus in spool\"\n            Signal main_exit\n        End\n    End\n\nReturn\nprocess_selected_rows:\n\n  Do while ztdsels >= 0 & dispcc < 8\n     Select\n       When psel = '/' Then Do\n         \"TBPUT \" jobtbl\n       End\n       When psel = 'A' Then Do\n         \"TBTOP \" jobtbl\n         \"TBSCAN \" jobtbl \"ARGLIST(parent,child,ty)\"\n         cc = rc\n         if cc = 0 then do\n            parent = value(pj)\n            child = value(cj)\n            ty = value(tp)\n            \"TBADD \" jobtbl\n            if rc \\=0 then do\n              say 'tbadd failed , rc - ' rc\n              signal main_exit\n            end\n         End\n       End\n       when psel = 'D' then do\n         \"TBDELETE \" jobtbl\n       End\n       Otherwise do\n         \"TBTOP \"  jobtbl\n         \"TBSKIP \" jobtbl\n         If rc > 0 then do\n             parent = 'smjob  '\n             child  = 'smjob  '\n                ty  = 't'\n             \"TBADD \" jobtbl\n             If rc > 0 then do\n                 Say \"S -> Add on table failed \" jobtbl\n                 Signal main_exit\n             End\n         End\n       End\n     End\n\n     \"TBDISPL \"jobtbl\n     dispcc = rc\n     If dispcc = 8 Then Leave\n  End\nReturn\n\nGenerate_Master_tables:\n\n    /*Create all the master tables*/\n\n    Call Open_tables\n\n    \"TBTOP \" jobtbl\n    \"TBTOP \" basetbl\n    \"TBTOP \" trigtbl\n    \"TBTOP \" depdtbl\n    \"TBTOP \" jbsttbl\n    cntr = 0\n    \"TBSKIP \"jobtbl\n    Skiprc = rc\n    If Skiprc > 0 Then Do\n        Say \"S-> Error Reading table \"jobtbl \"rc\"rc\n        Signal main_exit\n    End\n    Do While Skiprc = 0\n       If Cntr = 0 then do\n          Cntr = Cntr + 1\n          Seq  = Cntr\n          basjbnam = child\n          jbfunc   = 'T'\n          \"TBADD \"basetbl \"ORDER\"\n          Addrc = rc\n          If Addrc > 0 Then Do\n              Say \"S-> Error Adding table \"basetbl \"rc\"rc\n              Signal main_exit\n          End\n       End\n       Else do\n          Cntr = Cntr + 1\n          If ty = 'T' then do\n              trigjbnm = parent\n              targjbnm = child\n              \"TBADD \"trigtbl\n              Addrc = rc\n              If Addrc > 0 Then Do\n                  Say \"S-> Error Reading table \"trigtbl \"rc\"rc\n                  Signal main_exit\n              End\n              runingjb = parent\n              Call Update_job_status_table\n              runingjb = child\n              Call Update_job_status_table\n          End\n          If ty = 'D' then do\n              Srcjbnm = child\n              depdjbnm = parent\n              \"TBADD \"depdtbl\n              Addrc = rc\n              If Addrc > 0 Then Do\n                  Say \"S-> Error Reading table \"trigtbl \"rc\"\n                  Signal main_exit\n              End\n              runingjb = parent\n              Call Update_job_status_table\n              runingjb = child\n              Call Update_job_status_table\n              Seq = Cntr\n              basjbnam = child\n              jbfunc = 'D'\n              \"TBSARG \"basetbl \"NAMECOND(basjbnam,EQ)\"\n              \"TBTOP  \"basetbl\n              \"TBSCAN \"basetbl \"ARGLIST(basjbnam)\"\n              Scanrc = rc\n              If Scanrc \\= 0 then do\n                  \"TBADD \"basetbl \"ORDER\"\n                  Addrc = rc\n                  If Addrc > 0 Then Do\n                      Say \"S-> Error Reading table \"basetbl \"rc\"\n                      Signal main_exit\n                  End\n              End\n          End\n       End\n      \"TBSKIP \"jobtbl\n      Skiprc = rc\n      End\n      Seq      = 999\n      basjbnam = 'DUMMY'\n      jbfunc       = 'D'\n      \"TBADD \"basetbl \"ORDER\"\n      Addrc = rc\n      If Addrc > 0 Then Do\n          Say \"S-> Error Adding table \"basetbl \"rc\"rc\n          Signal main_exit\n      End\nReturn\n\nUpdate_job_status_table:\n\n   \"TBSARG \"jbsttbl \"NAMECOND(runingjb,EQ)\"\n   \"TBTOP  \"jbsttbl\n   \"TBSCAN \"jbsttbl \"ARGLIST(runingjb)\"\n   Scanrc = rc\n   If Scanrc  \\= 0 then do\n       jbstatus = 'S'\n       \"TBBOTTOM \"jbsttbl \"NOREAD\"\n       \"TBADD \"   jbsttbl\n       If Addrc > 0 Then Do\n           Say \"S-> Error Adding to table \"jbsttbl \"rc\"rc\n           Signal main_exit\n       End\n   End\nReturn\n\nOpen_tables:\n\n    basetbl= 'BASETBL'\n    \"TBCLOSE \"basetbl\n    \"TBOPEN \"basetbl\" WRITE\"\n    If rc > 0 Then Do\n        Say \"S-> Error opening table \"basetbl \"rc\"rc\n        Signal main_exit\n    End\n    \"TBSORT \"basetbl\" FIELDS(seq,n,a)\"\n    \"TBCLOSE \"trigtbl\n    \"TBOPEN \" trigtbl \"WRITE\"\n    If rc > 0 Then Do\n        Say \"S-> Error opening table \"trigtbl \"rc\"rc\n        Signal main_exit\n    End\n    \"TBCLOSE \"depdtbl\n    \"TBOPEN \" depdtbl \"WRITE\"\n    If rc > 0 Then Do\n        Say \"S-> Error opening table \"depdtbl \"rc\"rc\n        Signal main_exit\n    End\n    \"TBCLOSE \"jbsttbl\n    \"TBOPEN \" jbsttbl \"WRITE\"\n    If rc > 0 Then Do\n        Say \"S-> Error opening table \"depdtbl \"rc\"rc\n        Signal main_exit\n    End\nReturn\n\nskel_call:\naddress ispexec\n\"ftclose\"\n\"ftopen\"\nif rc \\= 0 then do\n   say \"s--> ftopen failed for \"skelvar\".rc=\"rc\n   say zerrlm\n   signal main_exit\nend\n\"ftincl \"skelvar\"\"\nif rc \\= 0 then do\n   say \"s--> ftincl failed for \"skelvar\".rc=\"rc\n   say zerrlm\n   signal main_exit\nend\n\n\"ftclose \"\nif rc \\= 0 then do\n   say \"s--> ftclose failed for \"skelvar\".rc=\"rc\n   say zerrlm\n   signal main_exit\nend\nreturn\nmain_exit:\n\"tbclose \" basetbl\n\"tbclose \" jobtbl\n\"tbclose \" trigtbl\n\"tbclose \" depdtbl\n\"tbclose \" jbsttbl\n\"LIBDEF ISPTLIB\"\n\"LIBDEF ISPTABL\"\n\"LIBDEF ISPPLIB\"\n\"LIBDEF ISPSLIB\"\n\"LIBDEF ISPFILE\"\ny = msg(\"OFF\")\n  \"delete temp.schd.ps nonvsam\"      /* Delete the temporary dataset */\ny = msg(y)\nexit\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SCHRSTRT": {"ttr": 782, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03\\x07\\x1f\\x01\\x03\\x07\\x1f\\x07W\\x00\\x0e\\x00\\x0e\\x00\\x00\\xc8\\xc1\\xd9\\xc9@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-03-12T00:00:00", "modifydate": "2003-03-12T07:57:00", "lines": 14, "newlines": 14, "modlines": 0, "user": "HARI"}, "text": ")DEFAULT ~#?!<|>\n//SCHDULER JOB COMP,CLASS=A,MSGCLASS=X,USER=&SYSUID,\n//   NOTIFY=&SYSUID,REGION=4M,MSGLEVEL=(1,1)\n//ISPF    EXEC PGM=IKJEFT01,DYNAMNBR=1500,PARM='',COND=EVEN\n//SYSPROC  DD DSN=PX1HR1.TEST.REXX,DISP=SHR\n//SYSPRINT DD SYSOUT=*\n//SYSTSPRT DD SYSOUT=*\n//SYSOUT   DD SYSOUT=*\n//ISPLOG  DD SYSOUT=*,DCB=(RECFM=VA,LRECL=125,BLKSIZE=129)\n//SYSTSIN DD *\n   ISPSTART CMD(%SCHTEST  RESTART #RSTRMEM      +\n     ) NEWAPPL(BAT)\n/*\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SCHTEST": {"ttr": 1025, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03\\x07\\x1f\\x01\\x03\\x07\\x1f\\x07W\\x02\\xcb\\x02\\xcb\\x00\\x00\\xc8\\xc1\\xd9\\xc9@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-03-12T00:00:00", "modifydate": "2003-03-12T07:57:00", "lines": 715, "newlines": 715, "modlines": 0, "user": "HARI"}, "text": "/*REXX*/\n/*\n  Work Flow:\n  1. Submit the first job from the Base table.\n  2. Wait for the job to get completed.\n  3. Check for the status of completion of First job. If it is completed\n     sucessfully, then search in Trigger table for the jobs triggered by\n     this job. Submit all the jobs which are to be triggered.\n  4. All submitted jobs will update their status of completion\n     (ie 'C' for successful completion and 'A' for abend) in a job\n     status table.\n  5. The job status table is scanned for the completed jobs. If any job\n     is completed, the jobs which are to be triggered by this completed\n     job are searched in the Trigger table. If any jobs to be triggered\n     are present in the Trigger table, they are submitted in sequence.\n     If the completed job doesnot have any entry in the Trigger table,\n     it means that the next job is a dependent one. So the next job in\n     the Base table is taken.\n  6. If the job from Base table is a dependent job. The job is searched\n     in the dependent table. Based on the entries in the dependent table\n     the dependent job will wait for the completion of the jobs on which\n     it is dependent.\n  7. If all dependent jobs are completed successfully, the dependent job\n     is submitted.\n  8. The Job status table is again searched for completed jobs and steps\n     5 through 8 are performed.\n  9. When all the jobs are submitted, the program ends.\n 10. In the case of abend in any job(ie if a status of 'A' is found in\n     Jobstatus table, the submission of all subsequent jobs are stopped\n     and the program is exited.\n 11. In the case of an abend, user has to intervene and correct the\n     problematic job which will be displayed in the spool.\n 12. The Submission of the jobs can be started from a particular job\n     by specifiying the restart parameter. This can be done as follows.\n\n       ISPSTART CMD(%SCHTEST  RESTART RESTARTJOB )\n*/\nAddress ispexec\nArg Restart rsrtjob\n\"CONTROL ERRORS RETURN\"\n\n/*Get the configuration information from inittool dataset*/\nCall inittool\n\n\"VGET ( tabldsn ) ASIS\"\n\"VGET ( jcllib ) ASIS\"\n\n\"LIBDEF ISPTLIB DATASET ID('\"tabldsn\"') UNCOND\"\nif rc \\= 0 then do\n    say 'S-> LIBDEF failed on DD ISPTLIB. RC = ' rc\n    say \"S-> Dataset name = '\" tabldsn \"'\"\n    say 'S-> Terminating application'\n    exit\nend\n\"LIBDEF ISPTABL DATASET ID('\"tabldsn\"') UNCOND\"\nif rc \\= 0 then do\n    say 'S-> LIBDEF failed on DD ISPTABL. RC = ' rc\n    say \"S-> Dataset name = '\" tabldsn \"'\"\n    say 'S-> Terminating application'\n    exit\nend\n\n/*Check whether Restart is specified*/\n\nIf value(Restart) = 'RESTART' then do\n    Restart = 'Yes'\n    Say \"I -> Restart is specified, restart jobname is \"rsrtjob\nEnd\nElse do\n    Restart = 'No'\nEnd\n\nSay \"I -> Preparing tables\"\nCall Prepare_jobstatus_table\nSay \"I -> Reading the Master Tables\"\nbasetbl = 'basetbl'\n\"TBOPEN \"basetbl \"NOWRITE\"\norc = rc\nif orc \\= 0 then do\n    say \"S-> TBOPEN failed for table \"basetbl\".RC=\"rc\n    Say zerrlm\n    signal main_exit\nend\ntrigtbl = 'trigtbl'\n\"TBOPEN \"trigtbl \"NOWRITE\"\norc = rc\nif orc \\= 0 then do\n    say \"S-> TBOPEN failed for table \"trigtbl\".RC=\"rc\n    Say zerrlm\n    signal main_exit\nend\ndepdtbl = 'depdtbl'\n\"TBOPEN \"depdtbl \"NOWRITE\"\norc = rc\nif orc \\= 0 then do\n    say \"S-> TBOPEN failed for table \"depdtbl\".RC=\"rc\n    Say zerrlm\n    signal main_exit\nend\n\"TBTOP \"basetbl\n\"TBSKIP \"basetbl\nif rc \\= 0 then do\n    say \"S-> TBSKIP failed for table \"jbsttbl\".RC=\"rc\n    Say zerrlm\n    signal main_exit\nend\nelse\n    Say \"First job from base table \" basjbnam\n\n/*Submit the first job from base table*/\n\njbname = basjbnam\nIf Restart = 'Yes' then do\n    Call Open_jobstatus_nowrite_jbscan\n    If jbname \\= rsrtjob then do\n        runingjb = jbname\n        \"TBSCAN \"jbsttbl \"ARGLIST(runingjb)\"\n        Scanrc = rc\n        If Scanrc = 0 then do\n            Update_ind = 'C'\n            Call Update_jobstatus_x\n        End\n    End\n    Else do\n        Restart = 'No'\n        Call Submit_the_job\n    End\nEnd\nElse do\n    Call submit_the_job\nEnd\n\n/*Initialise switches*/\n\nDummy_depd  = ''\ndepd_sub_sw = 'N'\njbsttbl = 'JBSTTBL'\nruningjb  = basjbnam\njbstatus  = 'C'\n\n/*Scan for the status 'A' or 'C' of first job in jobstatus table*/\n\nScanrc = 1\nDo While Scanrc /= 0\n    Call Open_jobstatus_nowrite\n    jbstatus = 'A'\n    \"TBSCAN \"jbsttbl \"ARGLIST(jbstatus)\"\n    Scanrc = rc\n    If Scanrc = 0 then do\n       Say \"S -> First job has abended. Jobname \"runingjb\n       Signal main_exit\n    End\n    \"TBTOP \"jbsttbl\n    jbstatus = 'M'\n    \"TBSCAN \"jbsttbl \"ARGLIST(jbstatus)\"\n    mscan = rc\n    If mscan = 0 then do\n        jbname = runingjb\n        Call Find_End\n        If y.2 = 'Y.2' then do\n            Say \"S -> JCL ERROR or JOB CANCELLED.Quitting in first job\",\n                                                   jbname\n            Signal main_exit\n        End\n        Else do\n           y.2 = 'Y.2'\n        End\n    End\n    \"TBTOP \"jbsttbl\n    jbstatus = 'C'\n    \"TBSCAN \"jbsttbl \"ARGLIST(jbstatus)\"\n    Scanrc = rc\nEnd\nscanrc = rc /*Scan success, proceed with processing the jobstatus*/\n\n/*Main Loop starts here. The Loop revolves around job status table\n  checking for any completed job(ie job with status 'C') based on which\n  further action is taken. In case an abend job is found(ie job with\n  status 'A') the Loop is exited without any further submission of jobs.\n*/\n Do While scanrc = 0\n\n\n     Call Submit_from_trigger_table\n     /*Tscan1rc is non-zero. This means that the we have to search the\n       base table to find the next job, which will be a dependent job*/\n\n     If tscan1rc \\= 0 & Dummy_depd = 'DUMMY' then do\n         \"TBSKIP \"basetbl\n         skiprc = rc\n         If skiprc = 8 then do\n             Say \"I -> JOBs scheduled properly, good bye\"\n             Signal main_exit\n         End\n     End\n\n\n     If tscan1rc \\= 0 & Dummy_depd = '' then do\n        Rescan_sw = 0\n\n         /*Do a read next on the base table*/\n\n         \"TBSKIP \"basetbl\n         skiprc = rc\n         If skiprc = 0 then do\n             If strip(basjbnam) = 'DUMMY' then do\n                 Dummy_depd = 'DUMMY'\n                 Say \"I -> No more Dependent jobs\"\n             End\n         End\n         If skiprc = 8 then do\n             Say \"I -> JOBs scheduled properly, good bye\"\n             Signal main_exit\n         end\n\n         /*A status 'D' means the job is dependent one\n           Scan the dependent table*/\n\n         If jbfunc = 'D' & Dummy_depd = '' then do\n             \"TBTOP \"depdtbl\n             Say \"I -> Dependent job name \" basjbnam\n             srcjbnm = basjbnam\n             \"TBSARG \" depdtbl \"NAMECOND(srcjbnm,EQ)\"\n             \"TBSCAN \" depdtbl \"ARGLIST(srcjbnm)\"\n             depscanrc = rc\n             if depscanrc \\= 0 then do\n                 Say \"S -> TBSCAN error on tabl \"depdtbl\"rc\"rc\n                 Say zerrlm\n                 Signal main_exit\n             end\n\n             /*Check for all the jobs in dependent table. The\n               dependent job has to be submitted only after all its\n               corresponding entries in dependent table(jobs) are over*/\n\n             Do While depscanrc = 0\n                runingjb = depdjbnm\n                Call Open_jobstatus_nowrite_jbscan\n                \"TBSCAN  \"jbsttbl \"ARGLIST(runingjb)\"\n                 statrc = rc\n\n                 /*Check whether the job is completed, if yes go ahead\n                   and update the jobstatus table with indicator as 'X'\n                   Remember that the main loop checks for the job status\n                   of 'C' for exit criteria\n\n                   JOBSTATUS 'M': A job with a job status 'M' denotes\n                   -------------\n                   that it has been submitted. Now if the job ends due\n                   to jcl error or it is cancelled, the job wouldnot be\n                   updating the job status table. So a check is made as\n                   to ascertain whether the job is active or not. For\n                   this the routine \"JOBLIST\" from CBT tape is used. If\n                   a job is submitted and if it is not active, then the\n                   scheduling is stopped with an appropriate error\n                   message.\n                 */\n\n                 Select\n                  When jbstatus = 'S' then do\n                      Call Open_jobstatus_nowrite\n                      jbstatus = 'M'\n                      \"TBSCAN \"jbsttbl \"ARGLIST(jbstatus)\"\n                      mscan = rc\n                      If mscan = 0 then do\n                          jbname = runingjb\n                          Call Find_End\n                          If y.2 = 'Y.2' then do\n                              Say \"S -> JCL ERROR or JOB Cancelled \",\n                                  \"..Quitting \" jbname\n                              Signal main_exit\n                          End\n                          Else do\n                              y.2 = 'Y.2'\n                              \"TBTOP \"jbsttbl\n                              jbstatus = 'A'\n                              \"TBSCAN \"jbsttbl \"ARGLIST(jbstatus)\"\n                              ascanrc = rc\n                              If ascanrc = 0 then do\n                                  Say \"S -> Abend in job \"runingjb\n                                  Signal main_exit\n                              End\n                              \"TBTOP \"jbsttbl\n                              jbstatus = 'C'\n                              \"TBSCAN \"jbsttbl \"ARGLIST(jbstatus)\"\n                              scanrc = rc\n                              If scanrc = 0 then do\n                                  Call Submit_from_trigger_table\n                                  Rescan_sw = 1\n                              End\n                              Else do\n                                  Rescan_sw = 1\n                              End\n                          End\n                      End\n                  End\n                  When jbstatus = 'C' then do\n                      Say \"I -> Dependent job \"depdjbnm\" completed\"\n                      runingjb = depdjbnm\n                      Update_ind = 'X'\n                      Call Update_jobstatus_x\n                  End\n                  When jbstatus = 'A' then do\n                      Say \"S -> Dependent job has abended \"runingjb\n                      Signal main_exit\n                  End\n                  When jbstatus = 'X' then do\n                      Say \"S -> Dependent job \"depdjbnm \" completed\"\n                  End\n                  When jbstatus = 'M' then do\n                      jbname = depdjbnm\n                      Call Find_End\n                      If y.2 = 'Y.2' then do\n                          Say \"S -> JCL ERROR or JOB CANCELLED\",\n                          \"..Quitting \"jbname\n                          Signal main_exit\n                      End\n                      Else do\n                          y.2 = 'Y.2'\n                          Rescan_sw = 1\n                      End\n                  End\n                  Otherwise nop\n                 End\n                 \"TBSCAN \"depdtbl \"ARGLIST(srcjbnm)\"\n                 depscanrc = rc\n                 If depscanrc \\= 0 & Rescan_sw > 0 then do\n                     Rescan_sw = 0\n                     \"TBTOP \"depdtbl\n                     \"TBSCAN \"depdtbl \"ARGLIST(srcjbnm)\"\n                     depscanrc = rc\n                 End\n             End\n\n             /*submit the dependent job*/\n\n             jbname = srcjbnm\n             If Restart = 'Yes' then do\n                 Call Open_jobstatus_nowrite_jbscan\n                 If jbname \\= rsrtjob then do\n                     runingjb = jbname\n                     \"TBSCAN \"jbsttbl \"ARGLIST(runingjb)\"\n                     Scanrc = rc\n                     If Scanrc = 0 then do\n                         Update_ind = 'C'\n                         Call Update_jobstatus_x\n                     End\n                 End\n                 Else do\n                     Restart = 'No'\n                     Say \"submitting depd jb \" jbname\n                     Call Submit_the_job\n                 End\n             End\n             Else do\n                 Say \"submitting depd jb \" jbname\n                 Call submit_the_job\n             End\n\n             /*The following switch is set to 'Y' because when a\n               dependent job is submitted no job might be active*/\n\n             depd_sub_sw = 'Y'\n         End\n     End\n\n     Call Open_jobstatus_nowrite\n     jbstatus = 'A'\n     \"TBSCAN \"jbsttbl \"ARGLIST(jbstatus)\"\n     scanrc = rc\n     If Scanrc = 0 then do\n         Say \"S -> job has abended \" runingjb\n         Say zerrlm\n         Signal main_exit\n     End\n     \"TBTOP   \"jbsttbl\n     jbstatus = 'M'\n     \"TBSCAN \"jbsttbl \"ARGLIST(jbstatus)\"\n     mscan = rc\n     If mscan = 0 then do\n         jbname = runingjb\n         Call Find_End\n         If y.2 = 'Y.2' then do\n             Say \"S -> JCL ERROR or JOB CANCELLED..Quitting \"jbname\n             Signal main_exit\n         End\n         Else do\n             y.2 = 'Y.2'\n         End\n     End\n     \"TBTOP   \"jbsttbl\n     jbstatus = 'C'\n     \"TBSCAN \"jbsttbl \"ARGLIST(jbstatus)\"\n     Scanrc = rc\n     Scansrc = 1\n     if scanrc \\= 0 then do\n         \"TBTOP \"jbsttbl\n         jbstatus = 'S'\n         \"TBSCAN \"jbsttbl \"ARGLIST(jbstatus)\"\n         scansrc = rc\n     end\n     If Scansrc = 0 then do\n         Scanrc = 1\n     End\n     Else do\n         Scanrc = 0\n     End\n     Do While scanrc \\= 0\n         Call Wait_period 15\n         Call Open_jobstatus_nowrite\n         jbstatus = 'M'\n         \"TBTOP \"jbsttbl\n         \"TBSCAN \"jbsttbl \"ARGLIST(jbstatus)\"\n         mscan = rc\n         If mscan = 0 then do\n             jbname = runingjb\n             Call Find_End\n             If y.2 = 'Y.2' then do\n                 Say \"S -> JCL ERROR or JOB CANCELLED..Quitting \"jbname\n                 Signal main_exit\n             End\n             Else do\n                 y.2 = 'Y.2'\n             End\n         End\n         \"TBTOP \"jbsttbl\n         jbstatus = 'A'\n         \"TBSCAN \"jbsttbl \"ARGLIST(jbstatus)\"\n         if rc = 0 then do\n             Say \"S -> Job has abended \"runingjb\n             Say zerrlm\n             Signal main_exit\n         end\n         \"TBTOP \"jbsttbl\n         jbstatus = 'C'\n         \"TBSCAN \"jbsttbl \"ARGLIST(jbstatus)\"\n         scanrc = rc\n     End\n\n\n     /*check for dependent job submitted status*/\n\n     If depd_sub_sw = 'Y' then do\n         Do While scanrc \\= 0\n             Call Wait_period 15\n             Call Open_jobstatus_nowrite\n             jbstatus = 'M'\n             \"TBSCAN \"jbsttbl \"ARGLIST(jbstatus)\"\n             mscan = rc\n             If mscan = 0 then do\n                 jbname = runingjb\n                 Call Find_End\n                 If y.2 = 'Y.2' then do\n                     Say \"S -> JCL ERROR or JOB CANCELLED..Quitting \",\n                                                            jbname\n                     Signal main_exit\n                 End\n                 Else do\n                    y.2 = 'Y.2'\n                 End\n             End\n             \"TBTOP   \"jbsttbl\n             jbstatus = 'A'\n             \"TBSCAN \"jbsttbl \"ARGLIST(jbstatus)\"\n             Scanrc = rc\n             if Scanrc = 0 then do\n                 Say \"S -> job has abended \" runingjb\n                 Say zerrlm\n                 Signal main_exit\n             End\n             \"TBTOP   \"jbsttbl\n             jbstatus = 'C'\n             \"TBSCAN \"jbsttbl \"ARGLIST(jbstatus)\"\n             Scanrc = rc\n         End\n         depd_sub_sw   = 'N'\n     End\n End\n/*Processing ended, go to exit*/\nSignal main_exit\n/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/\n/*Functions used in the program                                      */\n/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/\nUpdate_jobstatus_x:\n    \"TBCLOSE \"jbsttbl\n    \"TBOPEN   \"jbsttbl \"WRITE\"\n    openrc = rc\n\n    /*Check whether some other job has ENQ on the table, if so wait*/\n\n    Do While openrc = 12\n        Call Wait_period 15\n        \"TBOPEN \"jbsttbl \"WRITE\"\n        openrc = rc\n    End\n    \"TBSARG \" jbsttbl \"NAMECOND(runingjb,EQ)\"\n    \"TBTOP    \" jbsttbl\n    \"TBSCAN   \" jbsttbl \"ARGLIST(runingjb)\"\n\n    jbstatus = update_ind\n    /*Update the job status table with status of 'X'*/\n\n    \"TBPUT   \" jbsttbl\n    putrc = rc\n    if putrc \\= 0 then do\n        Say \"S -> TBPUT failed on table\"jbsttbl\n        Say zerrlm\n        Signal main_exit\n    End\n    \"TBCLOSE \" jbsttbl\n    \"TBOPEN   \" jbsttbl \"NOWRITE\"\nReturn\nOpen_jobstatus_nowrite:\n    \"TBCLOSE \"jbsttbl\n    \"TBOPEN  \"jbsttbl \"NOWRITE\"\n    \"TBTOP   \"jbsttbl\n    \"TBSARG  \"jbsttbl \"NAMECOND(jbstatus,EQ)\"\nReturn\nOpen_jobstatus_nowrite_jbscan:\n    \"TBCLOSE \"jbsttbl\n    \"TBOPEN \"jbsttbl \"NOWRITE\"\n    \"TBTOP \"jbsttbl\n    \"TBSARG \"jbsttbl \"NAMECOND(runingjb,EQ)\"\nReturn\nPrepare_jobstatus_table:\n    \"TBCLOSE \"jbsttbl\n    \"TBOPEN   \"jbsttbl \"WRITE\"\n    openrc = rc\n\n    if openrc \\= 0 then do\n        Say \"S -> TBOPEN failed on table\"jbsttbl \"rc \" rc\n        Say zerrlm\n        Signal main_exit\n    End\n    \"TBSARG \" jbsttbl \"NAMECOND(jbstatus,EQ)\"\n    \"TBTOP    \" jbsttbl\n    jbstatus = 'A'\n    \"TBSCAN   \" jbsttbl \"ARGLIST(jbstatus)\"\n    ascanrc = rc\n\n    /*Update the job status table with status of 'S'*/\n    Do While ascanrc = 0\n        update_ind = 'S'\n        jbstatus = update_ind\n        \"TBPUT   \" jbsttbl\n        putrc = rc\n        If putrc = 8 then do\n            putrc = 0\n            \"TBTOP \"jbsttbl\n        End\n        if putrc \\= 0 then do\n            Say \"S -> TBPUT failed on table\"jbsttbl \"rc \" rc\n            Say zerrlm\n            Signal main_exit\n        End\n        jbstatus = 'A'\n        \"TBSCAN \" jbsttbl \"ARGLIST(jbstatus)\"\n        ascanrc = rc\n    End\n    \"TBTOP    \" jbsttbl\n    jbstatus = 'C'\n    \"TBSCAN   \" jbsttbl \"ARGLIST(jbstatus)\"\n    ccscanrc = rc\n\n    /*Update the job status table with status of 'S'*/\n    Do While ccscanrc = 0\n        update_ind = 'S'\n        jbstatus = update_ind\n        \"TBPUT   \" jbsttbl\n        putrc = rc\n        If putrc = 8 then do\n            putrc = 0\n            \"TBTOP \"jbsttbl\n        End\n        if putrc \\= 0 then do\n            Say \"S -> TBPUT failed on table\"jbsttbl \"rc \" rc\n            Say zerrlm\n            Signal main_exit\n        End\n        jbstatus = 'C'\n        \"TBSCAN \" jbsttbl \"ARGLIST(jbstatus)\"\n        ccscanrc = rc\n    End\n    \"TBTOP    \" jbsttbl\n    jbstatus = 'X'\n    \"TBSCAN   \" jbsttbl \"ARGLIST(jbstatus)\"\n    xscanrc = rc\n\n    /*Update the job status table with status of 'S'*/\n    Do While xscanrc = 0\n        update_ind = 'S'\n        jbstatus = update_ind\n        \"TBPUT   \" jbsttbl\n        putrc = rc\n        If putrc = 8 then do\n            putrc = 0\n            \"TBTOP \"jbsttbl\n        End\n        if putrc \\= 0 then do\n            Say \"S -> TBPUT failed on table\"jbsttbl \"rc \" rc\n            Say zerrlm\n            Signal main_exit\n        End\n        jbstatus = 'X'\n        \"TBSCAN \" jbsttbl \"ARGLIST(jbstatus)\"\n        xscanrc = rc\n    End\n    \"TBTOP    \" jbsttbl\n    jbstatus = 'M'\n    \"TBSCAN   \" jbsttbl \"ARGLIST(jbstatus)\"\n    mscanrc = rc\n\n    /*Update the job status table with status of 'S'*/\n    Do While mscanrc = 0\n        update_ind = 'S'\n        jbstatus = update_ind\n        \"TBPUT   \" jbsttbl\n        putrc = rc\n        If putrc = 8 then do\n            putrc = 0\n            \"TBTOP \"jbsttbl\n        End\n        if putrc \\= 0 then do\n            Say \"S -> TBPUT failed on table\"jbsttbl \"rc \" rc\n            Say zerrlm\n            Signal main_exit\n        End\n        jbstatus = 'M'\n        \"TBSCAN \" jbsttbl \"ARGLIST(jbstatus)\"\n        mscanrc = rc\n    End\n    \"TBCLOSE \" jbsttbl\nReturn\nSubmit_from_trigger_table:\n     trigjbnm = runingjb\n     \"TBTOP  \" trigtbl\n     \"TBSARG \" trigtbl \"NAMECOND(trigjbnm,EQ)\"\n     \"TBSCAN \" trigtbl \"ARGLIST(trigjbnm)\"\n     tscanrc  = rc\n\n     /*Function of tscan1rc. If the return code is non zero from the\n       first scan itself, then the next job is a dependent job.*/\n\n     tscan1rc = rc\n\n\n     /*If the completed job trigger any jobs, submit those in sequence\n     */\n\n     Do While tscanrc = 0\n         jbname = targjbnm\n         If Restart = 'Yes' then do\n             Call Open_jobstatus_nowrite_jbscan\n             If jbname \\= rsrtjob then do\n                 runingjb = jbname\n                 \"TBSCAN \"jbsttbl \"ARGLIST(runingjb)\"\n                 Scanrc = rc\n                 If Scanrc = 0 then do\n                     Update_ind = 'C'\n                     Call Update_jobstatus_x\n                 End\n             End\n             Else do\n                 Restart = 'No'\n                 Say \"submitting from trig table \" jbname\n                 Call Submit_the_job\n             End\n         End\n         Else do\n             Say \"submitting from trig table \" jbname\n             Call submit_the_job\n         End\n         \"TBSCAN \"trigtbl \"ARGLIST(trigjbnm)\"\n         tscanrc = rc\n     End\n\n     /*As the completed job (with the status 'C' has triggered all its\n       jobs, we have to update its status to 'X'. This is to be done\n       as our loop exit criteria depends on a scan on job status 'C'*/\n\n     runingjb = trigjbnm\n     Update_ind = 'X'\n     Call Update_jobstatus_x\nReturn\nWait_period:\n    Arg seconds\n    Call syscalls('ON')\n    address syscall\n    \"sleep \"seconds\n    call syscalls('OFF')\nReturn\nSubmit_the_job:\n    address tso \"submit '\"jcllib\"(\"jbname\")'\"\n    /*Once a job is submitted, update its status to 'M' in jobstatus\n      table. This is to findout whether a job has ended due to a\n      jcl error or the job was cancelled due to some reason\n    */\n    runingjb = jbname\n    Update_ind = 'M'\n    Call Update_jobstatus_x\n    Call Wait_period 2\nReturn\nFind_end:\nx = outtrap(y.)\n    call joblist jbname\nx = outtrap(off)\nReturn\nmain_exit:\n\"TBCLOSE \"basetbl\n\"TBCLOSE \"trigtbl\n\"TBCLOSE \"depdtbl\n\"TBCLOSE \"jbsttbl\n\"LIBDEF ISPTABL\"\n\"LIBDEF ISPTLIB\"\nexit\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SDSFUPDT": {"ttr": 1284, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03\\x07\\x1f\\x01\\x03\\x07\\x1f\\x07W\\x00W\\x00W\\x00\\x00\\xc8\\xc1\\xd9\\xc9@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-03-12T00:00:00", "modifydate": "2003-03-12T07:57:00", "lines": 87, "newlines": 87, "modlines": 0, "user": "HARI"}, "text": "/*REXX*/\naddress ispexec\n\"CONTROL ERRORS RETURN\"\narg jbname\n\nCall inittool\n\n\"VGET ( tabldsn ) ASIS\"\n\n\"LIBDEF ISPTLIB DATASET ID('\"tabldsn\"') UNCOND\"\nif rc \\= 0 then do\n    say 'S-> LIBDEF failed on DD ISPTLIB. RC = ' rc\n    say \"S-> Dataset name = '\" tabldsn \"'\"\n    say 'S-> Terminating application'\n    exit\nend\n\"LIBDEF ISPTABL DATASET ID('\"tabldsn\"') UNCOND\"\nif rc \\= 0 then do\n    say 'S-> LIBDEF failed on DD ISPTABL. RC = ' rc\n    say \"S-> Dataset name = '\" tabldsn \"'\"\n    say 'S-> Terminating application'\n    exit\nend\naddress tso\nTCB     = PTR(540,4)\nJSCB    = PTR(TCB+180,4)\nJCT     = ADJ(PTR(JSCB+260,4))\nabcode  = stg(jct+168,4)\nabcode  = c2x(abcode)\nruningjb = jbname\nJSCB    = PTR(JSCB+348,4)\nSSIB    = PTR(JSCB+316,4)\nJCT     = ADJ(PTR(JSCB+260,4))\nACTIVE  = ADJ(PTR(JSCB+328,4))\nCURRENT = ADJ(PTR(JCT+32,3))\nDO FOREVER\n   IF CURRENT = 0 | CURRENT = ACTIVE THEN LEAVE\n   STEP_RC = STRIP(PTR(CURRENT+8,2))\n   say 'Step rc' Step_rc\n   If STEP_RC >= 8  then leave\n   STEP_PROC = STRIP(STG(CURRENT+44,8))\n   IF STEP_PROC = \"\" THEN STEP_NAME = STRIP(STG(CURRENT+52,8))\n   ELSE STEP_NAME = STEP_PROC||\".\"||STRIP(STG(CURRENT+52,8))\n   CURRENT = ADJ(PTR(CURRENT+20,3))\nEND\naddress ispexec\n\"TBOPEN \"jbsttbl \"WRITE\"\nopenrc = rc\nDo While openrc = 12\n    Call Wait_period 15\n    \"TBOPEN \"jbsttbl \"WRITE\"\n    openrc = rc\nend\n\"TBSARG\" jbsttbl \"NAMECOND(runingjb,EQ)\"\n\"TBTOP\"  jbsttbl\n\"TBSCAN\" jbsttbl \"ARGLIST(runingjb)\"\nif rc \\= 0 then do\n   Say \"S -> Scan failed on table\"jbsttbl \"rc=\"rc\n   Signal main_exit\nend\nif abcode = '00000000' & step_rc < 8 then do\n    jbstatus = 'C'\nend\nelse do\n    if step_rc = 28 then do\n        jbstatus = 'C'\n    end\n    else do\n        jbstatus = 'A'\n    end\nend\n\"TBPUT \" jbsttbl\nmain_exit:\n\"TBCLOSE \"jbsttbl\n\"libdef isptlib\"\n\"libdef isptabl\"\nexit\nWait_period:\n    Arg seconds\n    Call syscalls('ON')\n    address syscall\n    \"sleep \"seconds\n    call syscalls('OFF')\nreturn\nPTR: RETURN C2D(STORAGE(D2X(ARG(1)),ARG(2)))\nSTG: RETURN STORAGE(D2X(ARG(1)),ARG(2))\nADJ: IF ARG(1) = 0 THEN RETURN ARG(1) ; ELSE RETURN ARG(1) + 16\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SHWHLP": {"ttr": 1287, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03\\x07\\x1f\\x01\\x03\\x07\\x1f\\x07W\\x00\\x04\\x00\\x04\\x00\\x00\\xc8\\xc1\\xd9\\xc9@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-03-12T00:00:00", "modifydate": "2003-03-12T07:57:00", "lines": 4, "newlines": 4, "modlines": 0, "user": "HARI"}, "text": "/*rexx*/\nAddress ispexec\n\"Browse dataset('hlq.rexx(help)')\"\nexit\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "THROTBL": {"ttr": 1289, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03\\x07\\x1f\\x01\\x03\\x07\\x1f\\x07W\\x00-\\x00-\\x00\\x00\\xc8\\xc1\\xd9\\xc9@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-03-12T00:00:00", "modifydate": "2003-03-12T07:57:00", "lines": 45, "newlines": 45, "modlines": 0, "user": "HARI"}, "text": ")ATTR\n _ TYPE(INPUT) INTENS(LOW) PAD('_') COLOR(RED)\n % TYPE(TEXT) INTENS(HIGH) COLOR(PINK)\n # TYPE(INPUT) INTENS(LOW) PAD('_') CAPS(ON) COLOR(RED)\n ~ TYPE(TEXT) INTENS(LOW) COLOR(BLUE) HILITE(REVERSE)\n @ TYPE(INPUT) INTENS(LOW)\n * TYPE(AB)\n \u00a2 TYPE(NT)\n)ABC DESC(Help) MNEM(1)\n  PDC DESC(Help) MNEM(1)\n  ACTION RUN(ISRROUTE) PARM('SELECT CMD(%shwhlp)')\n)ABCINIT\n  .ZVARS = PDCHOICE\n  &PDCHOICE = ''\n)BODY CMD(ZCMD) EXPAND($$)\n* Help\u00a2\n+\n~ ---------------------- Job Scheduler Tool $-$~\n~ -----------------------------Entry Screen$-$~\n+\n+COMMAND ===> @zcmd\n+\n%A +Insert after the row                                                       +\n%/ +Edit the selected row                                                      +\n%D +Delete the selected row\n+\n+  _pj      +   _cj      +   _Z+\n+\n%   ParentJob     ChildJob    Type\n)MODEL  ROWS(ALL)\n#Z+@parent  +    @child   +  @ty+\n)INIT\n.ZVARS = '(tp,psel)'\n&pj = ' '\n&cj = ' '\n&tp = ' '\n&psel = ' '\n)REINIT\n REFRESH(pj,cj,tp)\n)PROC\n&pj = ' '\n&cj = ' '\n&tp = ' '\n&psel = ' '\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "USERENTY": {"ttr": 1291, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03\\x07\\x1f\\x01\\x03\\x07\\x1f\\x07W\\x00D\\x00D\\x00\\x00\\xc8\\xc1\\xd9\\xc9@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-03-12T00:00:00", "modifydate": "2003-03-12T07:57:00", "lines": 68, "newlines": 68, "modlines": 0, "user": "HARI"}, "text": ")ATTR\n  % TYPE(TEXT) COLOR(BLUE) HILITE(REVERSE)\n  * TYPE(TEXT) CAPS(OFF) INTENS(HIGH) COLOR(PINK) SKIP(ON)\n  ! TYPE(TEXT) CAPS(OFF) INTENS(HIGH) COLOR(BLUE) SKIP(ON)\n  _ TYPE(INPUT) PAD('_') INTENS(HIGH) COLOR(RED)\n  @ TYPE(INPUT) PAD('_') COLOR(blue) NUMERIC(ON)\n  # TYPE(AB)\n  \u00a2 TYPE(NT)\n)ABC DESC(Help) MNEM(1)\n  PDC DESC(Help) MNEM(1)\n  ACTION RUN(ISRROUTE) PARM('SELECT CMD(%shwhlp)')\n)ABCINIT\n  .ZVARS = PDCHOICE\n  &PDCHOICE = ''\n)BODY WIDTH(80) CMD(ZCMD) EXPAND(//)\n# Help\u00a2\n% ---------------------- Job Scheduler Tool /-/%\n% -----------------------------Entry Screen/-/%\n*\n*COMMAND ===>_ZCMD\n*     Enter the Job sequence\n*\n*     Parent Job      Child Job      Type\n*     _p1      *     _c1      *      @Z*\n*     _p2      *     _c2      *      @Z*\n*     _p3      *     _c3      *      @Z*\n*     _p4      *     _c4      *      @Z*\n*     _p5      *     _c5      *      @Z*\n*     _p6      *     _c6      *      @Z*\n*     _p7      *     _c7      *      @Z*\n*     _p8      *     _c8      *      @Z*\n*     _p9      *     _c9      *      @Z*\n*     _p10     *     _c10     *      @Z*\n*     _p11     *     _c11     *      @Z*\n*     _p12     *     _c12     *      @Z*\n*\n!     Press *PF3*!to quit WITHOUT saving\n)INIT\n   .ZVARS  = '(t1,t2,t3,t4,t5,t6,t7,t8,t9,t10,t11,t12)'\n)REINIT\n   REFRESH(*)\n)PROC\n  &ZCURSOR = .CURSOR\n  &ZCSROFF = .CSRPOS\n  REFRESH(*)\n  ver(&t1,list,'T','D')\n  ver(&t2,list,'T','D')\n  ver(&t3,list,'T','D')\n  ver(&t4,list,'T','D')\n  ver(&t5,list,'T','D')\n  ver(&t6,list,'T','D')\n  ver(&t7,list,'T','D')\n  ver(&t8,list,'T','D')\n  ver(&t9,list,'T','D')\n  ver(&t10,list,'T','D')\n  ver(&t11,list,'T','D')\n  ver(&t12,list,'T','D')\n  if (ver(&p1,nb))\n     ver(&t1,nb)\n  if (ver(&c1,nb))\n     ver(&t1,nb)\n  if (ver(&p1,nb))\n     ver(&c1,nb)\n  if (ver(&t1,nb))\n     ver(&c1,nb)\n  if (ver(&t1,nb))\n     ver(&p1,nb)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT611/FILE611.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT611", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}