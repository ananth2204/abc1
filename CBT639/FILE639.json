{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012517000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 352716, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE639.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 352716, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 352716, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE639.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x07\\x03'", "DS1TRBAL": "b'\\xb6\\xe2'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x04\\x93\\x00\\x02\\x04\\x93\\x00\\t\\x00\\x08'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04H\\x00\\x00\\x01\\x06\\x11_\\x01\\x06\\x11_\\x10\\x15\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf2@@@'", "ispf": {"version": "04.72", "flags": 0, "createdate": "2006-04-25T00:00:00", "modifydate": "2006-04-25T10:15:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-472"}, "text": "REGULAR CBT TAPE - VERSION 472    FILE:  639\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT472.FILE639\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 11 MEMBERS COUNTED; CUMULATIVE SIZE IS 3,020 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   04/25/06    10:15:46    GMT-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$NOTE1": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x001\\x01\\x06\\x11_\\x01\\x06\\x11_\\t!\\x00\\x1a\\x00\\x14\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2006-04-25T00:00:00", "modifydate": "2006-04-25T09:21:31", "lines": 26, "newlines": 20, "modlines": 0, "user": "SBGOLOB"}, "text": "Note from Sam Golob:\n\n   I have made adjustments to the support information in\n   this file, according to the email address and (cell)\n   phone number for Hunter Zhou, which is listed here.\n\nSubject:     Good Luck!\nFrom:        \"Zhou, Hunter\" <hunter.zhou@sobeys.com>\nDate:        Fri, 21 Apr 2006 08:42:57 -0400\nTo:          <zhough2000@yahoo.com>\n\nDear All,\n\nAs you might already know, today is my last day in Sobeys.\n\nI wish you continue to success and enjoy everyday in Sobeys.\nPlease keep in touch, and I can be reached at my personal email\naddress zhough2000@yahoo.com.\n\nThanks again for everything.\n\nYours Sincerely,\n\nHunter Zhou\nEmail: zhough2000@yahoo.com\nCell: (416) 602-9567\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$PROCS": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00&\\x01\\x04\\x10\\x9f\\x01\\x04\\x10\\x9f\\x10C\\x00\\x0c\\x00\\x0c\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-04-18T00:00:00", "modifydate": "2004-04-18T10:43:26", "lines": 12, "newlines": 12, "modlines": 0, "user": "SBGOLOB"}, "text": "./ ADD NAME=SETFALL  0101-04094-04094-2257-00003-00003-00000-SBGOLOB\n//SETCLK  EXEC PGM=SETHOUR,PARM=FALL\n//STEPLIB  DD  DISP=SHR,DSN=SBGOLOB.W$$.LINKLIB      /* AUTH LIB\n//SYSPRINT DD  SYSOUT=*\n./ ADD NAME=SETHOUR  0100-04094-04094-2051-00003-00003-00000-SBGOLOB\n//SETCLK  EXEC PGM=SETHOUR,PARM=AUTO\n//STEPLIB  DD  DISP=SHR,DSN=SBGOLOB.W$$.LINKLIB      /* AUTH LIB\n//SYSPRINT DD  SYSOUT=*\n./ ADD NAME=SETSPRNG 0101-04094-04094-2257-00003-00003-00000-SBGOLOB\n//SETCLK  EXEC PGM=SETHOUR,PARM=SPRING\n//STEPLIB  DD  DISP=SHR,DSN=SBGOLOB.W$$.LINKLIB      /* AUTH LIB\n//SYSPRINT DD  SYSOUT=*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$RACF": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00Q\\x01\\x04\\x10\\x9f\\x01\\x04\\x10\\x9f\\x11\\x12\\x00!\\x00\\x11\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2004-04-18T00:00:00", "modifydate": "2004-04-18T11:12:51", "lines": 33, "newlines": 17, "modlines": 0, "user": "SBGOLOB"}, "text": "RACF notes from Sam Golob.\n\n\nApproximate instructions to get RACF permissions for SETHOUR,\nSETFALL, SETSPRNG to run (see member $$PROCS for the procs themselves).\n\nInstructions:\n\nDo a   SETROPTS LIST   TSO RACF command, to see if OPERCMDS is an\n   active class.  If not.......\n\nActivate the OPERCMDS class:  Issue RACF TSO commands:\n\nSETROPTS RACLIST(OPERCMDS)\nSETROPTS CLASSACT(OPERCMDS)\nSETROPTS GENERIC(OPERCMDS)\n\nMake userids for the names:  SETHOUR, SETFALL, SETSPRNG\n                             Give them a default group of SYS1.\n\n Note:  If you need to activate the OPERCMDS class, and there was\n some other automated software which did operator commands without\n this class being active (such as NETINIT from File 672), you may\n now have to make new userids for those other procedures too.)\n\nMake an OPERCMDS profile of:\nMVS.**\n\nGive group SYS1 the access of ALTER to this profile.\n\nDo a REFRESH of the OPERCMDS class, specifically, for GENERIC and\nRACLIST.\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@ASSMSBG": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01 \\x00\\x18\\x01\\x00\\x04\\x8f\\x01\\x04\\tO E\\x00\\x1e\\x00\\x1c\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.32", "flags": 0, "createdate": "2000-02-17T00:00:00", "modifydate": "2004-04-03T20:45:18", "lines": 30, "newlines": 28, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,\n//  PARM=(OBJECT,NODECK,ESD,RLD,BATCH,'SYSPARM(NORTHERN)')\n//SYSLIB   DD DISP=SHR,DSN=SBGOLOB.R14.MACLIB\n//         DD DISP=SHR,DSN=SBGOLOB.R14.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.B.ASM(SETHOUR)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,4),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET,RENT'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SBGOLOB.LOAD\n//SYSLMOD  DD  DISP=SHR,DSN=SBGOLOB.LOAD\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n ENTRY   SETHOUR\n SETSSI  CB465639\n SETCODE AC(1)\n NAME    SETHOUR(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@FILE639": {"ttr": 526, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04H\\x00\\x00\\x01\\x06\\x11_\\x01\\x06\\x11_\\x10\\x15\\x00Z\\x00Z\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf2@@@'", "ispf": {"version": "04.72", "flags": 0, "createdate": "2006-04-25T00:00:00", "modifydate": "2006-04-25T10:15:00", "lines": 90, "newlines": 90, "modlines": 0, "user": "CBT-472"}, "text": "//***FILE 639 Set System Clock for Time Saving - Hunter Zhou        *   FILE 639\n//*                                                                 *   FILE 639\n//*           The package SETHOUR is from Hunter Zhou.              *   FILE 639\n//*                                                                 *   FILE 639\n//*           Hunter Guanghui Zhou                                  *   FILE 639\n//*           Phone: 1-(416)-602-9567                               *   FILE 639\n//*           E-mail: zhough2000@yahoo.com                          *   FILE 639\n//*                                                                 *   FILE 639\n//*           The package SETHOUR is used to change the system      *   FILE 639\n//*           TOD clock for time saving automatically. The software *   FILE 639\n//*           will also update the TIMEZONE statement in current    *   FILE 639\n//*           active CLOCKxx member to reflect the new timezone.    *   FILE 639\n//*                                                                 *   FILE 639\n//*       Program: SETHOUR (HLASM)                                  *   FILE 639\n//*       Purpose: Update System Clock and TIMEZONE in CLOCKxx.     *   FILE 639\n//*       Parameter:                                                *   FILE 639\n//*         1. +1|-1                                                *   FILE 639\n//*            Tell program to set clock one hour ahead or back.    *   FILE 639\n//*                                                                 *   FILE 639\n//*         2. FALL|AUTUMN|WINTER                                   *   FILE 639\n//*            Tell program to change clock in fall.                *   FILE 639\n//*                                                                 *   FILE 639\n//*         3. SPRING|SUMMER                                        *   FILE 639\n//*            Tell program to change clock in spring.              *   FILE 639\n//*                                                                 *   FILE 639\n//*         3. AUTO                                                 *   FILE 639\n//*            Tell program to change the TOD clock according to    *   FILE 639\n//*            the current month when the program is run:           *   FILE 639\n//*            . If current month is between Janurary to June       *   FILE 639\n//*              this parm is the same as SPRING.                   *   FILE 639\n//*            . Otherwise it is the same as FALL.                  *   FILE 639\n//*                                                                 *   FILE 639\n//*        The program will issue MVS SET CLOCK command to set the  *   FILE 639\n//*        system clock, the date may be also changed according to  *   FILE 639\n//*        the time it is run.                                      *   FILE 639\n//*                                                                 *   FILE 639\n//*        The program will locate the active CLOCKxx member,       *   FILE 639\n//*        and update the TIMEZONE statement to reflect the updated *   FILE 639\n//*        clock, so that the clock change will be kept after next  *   FILE 639\n//*        IPL.                                                     *   FILE 639\n//*                                                                 *   FILE 639\n//*        Some permissions from the security system may have to    *   FILE 639\n//*        be set, for the SETHOUR proc to run.  For notes about    *   FILE 639\n//*        RACF, please see member $$RACF from Sam Golob.  Sample   *   FILE 639\n//*        procs SETHOUR, SETFALL, SETSPRNG are in member $$PROCS.  *   FILE 639\n//*                                                                 *   FILE 639\n//*        There are some software are time sensitive, especially   *   FILE 639\n//*        set the clock back. In order to make the TOD clock       *   FILE 639\n//*        change automatically, you may use the operation          *   FILE 639\n//*        package to restart the software and update the clock,    *   FILE 639\n//*        such as File #623. Here is example to use this           *   FILE 639\n//*        package:                                                 *   FILE 639\n//*                                                                 *   FILE 639\n//*        //********************************************           *   FILE 639\n//*        //* Stop CLOCK sensitive software                        *   FILE 639\n//*        //STOPSW   EXEC PGM=IKJEFT01,PARM=AUTOIPL                *   FILE 639\n//*        //STEPLIB  DD   DISP=SHR,DSN=SYS1.USER.LINKLIB           *   FILE 639\n//*        //SYSEXEC  DD   DISP=SHR,DSN=SYS1.USER.REXXLIB           *   FILE 639\n//*        //SYSTSPRT DD   SYSOUT=*                                 *   FILE 639\n//*        //SYSTSIN  DD   DUMMY                                    *   FILE 639\n//*        //SYSIN    DD   *                                        *   FILE 639\n//*          WTOH('STOP SOFTWARE FOR TIME CHANGE')                  *   FILE 639\n//*          P RMF                                                  *   FILE 639\n//*          P TMONMVS                                              *   FILE 639\n//*          P TMVSLFS                                              *   FILE 639\n//*          WAIT                                                   *   FILE 639\n//*          P TMVSMSTR                                             *   FILE 639\n//*          P TMVSHUB                                              *   FILE 639\n//*        /*                                                       *   FILE 639\n//*        //********************************************           *   FILE 639\n//*        //* Change TOD clock and CLOCKxx member                  *   FILE 639\n//*        //SETCLK   EXEC PGM=SETHOUR,PARM=AUTO                    *   FILE 639\n//*        //SYSPRINT DD   SYSOUT=*                                 *   FILE 639\n//*        //* Wait 1 hour in case of set clock back.               *   FILE 639\n//*        //WAIT     EXEC PGM=WAIT,PARM=3600     3600 seconds      *   FILE 639\n//*        //*********************************************          *   FILE 639\n//*        //* Start CLOCK sensitive software                       *   FILE 639\n//*        //STARTALL EXEC PGM=IKJEFT01,PARM=AUTOIPL                *   FILE 639\n//*        //STEPLIB  DD   DISP=SHR,DSN=SYS1.USER.LINKLIB           *   FILE 639\n//*        //SYSEXEC  DD   DISP=SHR,DSN=SYS1.USER.REXXLIB           *   FILE 639\n//*        //SYSTSPRT DD   SYSOUT=*                                 *   FILE 639\n//*        //SYSTSIN  DD   DUMMY                                    *   FILE 639\n//*        //SYSIN    DD   *                                        *   FILE 639\n//*          WTOH('START SOFTWARE FOR TIME CHANGE')                 *   FILE 639\n//*          S TMVSHUB                                              *   FILE 639\n//*          S TMVSMSTR                                             *   FILE 639\n//*          S RMF                                                  *   FILE 639\n//*          WTOH('TIME SAVING CHANGE IS COMPLETED')                *   FILE 639\n//*        //*                                                      *   FILE 639\n//*                                                                 *   FILE 639\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@INSTALL": {"ttr": 529, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00E\\x01\\x03\\x17O\\x01\\x06\\x11_\\x10\\t\\x00N\\x00\\x1f\\x00\\x00\\xe9\\xc8\\xd6\\xe4@@@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2003-06-23T00:00:00", "modifydate": "2006-04-25T10:09:45", "lines": 78, "newlines": 31, "modlines": 0, "user": "ZHOU"}, "text": "*---------------------------------------------------------------------*\n* PROGRAM: SETHOUR                                                    *\n* AUTHOR : Hunter Guanghui Zhou                                       *\n*          Phone: 1-(416)-602-9567                                    *\n*          E-mail: zhough2000@yahoo.com                               *\n* UPDATE : MAY, 2003                                                  *\n* DESCRIPTION: UPDATE TOD CLOCK BY ONE HOUR, AND UPDATE CLOCKxx       *\n*---------------------------------------------------------------------*\n* INSTALLATION                                                        *\n* ============                                                        *\n*  1. THE PROGRAM WILL BE RUN IN SUPERVISOR MODE.                     *\n*     THE LOADLIB PDS MUST BE IN MVS APF AUTHORIZED LIST.             *\n*     SUCH AS APF LIST IN SYS1.PARMLIB(PROGXX)                        *\n*  2. OPTIONALLY, THE LOADLIB CAN BE PUT IN MVS LINKLST               *\n*     IN SYS1.PARMLIB(PROGXX).                                        *\n*     THE PROGRAM IS REENTRENT PROGRAM AND CAN BE ALSO LOADED         *\n*     INTO LPA LIST (SYS1.PARMLIB(LPALSTXX))                          *\n*  3. COMPILE REQUIREMENTS.                                           *\n*     THE LINKEDIT OPTION MUST USE 'RENT,A(1)'.                       *\n*     THE COMPILE OPTION IS GIVEN IN PARM.C='SYSPARM(parameter)':     *\n*       .NORTHERN, NORTHERN HEMISHPERE or empty                       *\n*                                                                     *\n*        This is a default option to tell the program to run in       *\n*     northern hemisphere.                                            *\n*                                                                     *\n*       .SOUTHERN or SOUTHERN HEMISPHERE                              *\n*                                                                     *\n*        This tells the program to run in southern hemisphere.        *\n*     The difference of hemisphere is the TOD clock change for        *\n*     daylight saving time is reverse as follows:                     *\n*     Northern Hemisphere (North America, Europe, Asia):              *\n*        In Spring: set 1 hour ahead                                  *\n*        In Fall:   set 1 hour back                                   *\n*                                                                     *\n*     Southern Hemisphere (South America, Australia, Africa)          *\n*        In Spring: set 1 hour back                                   *\n*        In Fall:   set 1 hour ahead                                  *\n*                                                                     *\n*     Example 1: Compile for Northern Hemishpere (default)            *\n*                                                                     *\n*     //jobcard here.                                                 *\n*     //COMPILE EXEC ASMACL,PARM.L='LIST,RENT,AC(1)'                  *\n*     //C.SYSIN   DD DISP=SHR,DSN=SP2487.ASM.SOURCE(SETHOUR) <--ASM   *\n*     //C.SYSLIB  DD DISP=SHR,DSN=SYS1.MACLIB                         *\n*     //          DD DISP=SHR,DSN=SYS1.MODGEN                         *\n*     //L.SYSLMOD DD DISP=SHR,DSN=SYS1.USER.LINKLIB   <==APF LIBRARY  *\n*     //L.SYSIN   DD *                                                *\n*       NAME SETHOUR(R)                                               *\n*     /*                                                              *\n*                                                                     *\n*     Example 2: Compile for Southern Hemishpere:                     *\n*                                                                     *\n*     //jobcard here.                                                 *\n*     //COMPILE EXEC ASMACL,PARM.L='LIST,RENT,AC(1)',                 *\n*     //        PARM.C='SYSPARM=(SOUTHERN HEMISHPERE)'                *\n*     //C.SYSIN   DD DISP=SHR,DSN=SP2487.ASM.SOURCE(SETHOUR) <--ASM   *\n*     //C.SYSLIB  DD DISP=SHR,DSN=SYS1.MACLIB                         *\n*     //          DD DISP=SHR,DSN=SYS1.MODGEN                         *\n*     //L.SYSLMOD DD DISP=SHR,DSN=SYS1.USER.LINKLIB   <==APF LIBRARY  *\n*     //L.SYSIN   DD *                                                *\n*       NAME SETHOUR(R)                                               *\n*     /*                                                              *\n*  4. THE USER TO RUN THIS PROGRAM MUST HAVE ENGOUGH AUTHORITY.       *\n*     THE SECURITY SOFTWARE WILL CHECK THE AUTHORITY OF THE USERID    *\n*     IF HE HAS THE AUTHORITY TO ISSUE THE MVS COMMAND.               *\n*---------------------------------------------------------------------*\n\nQuestions & suggestions\n=======================\n Should you have any question, please contact Hunter Zhou at\n zhough2000@yahoo.com\n\n June, 2003\n\n Hunter Guanghui Zhou\n Phone: 1-(416)-602-9567\n E-mail: zhough2000@yahoo.com\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@USERGDE": {"ttr": 532, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00T\\x01\\x03\\x17O\\x01\\x06\\x11_\\x10\\x10\\x00\\xb4\\x00\\xa7\\x00\\x00\\xe9\\xc8\\xd6\\xe4@@@@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "2003-06-23T00:00:00", "modifydate": "2006-04-25T10:10:54", "lines": 180, "newlines": 167, "modlines": 0, "user": "ZHOU"}, "text": "*---------------------------------------------------------------------*\n* PROGRAM: SETHOUR                                                    *\n* AUTHOR : Hunter Guanghui Zhou                                       *\n*          Phone: 1-(416)-602-9567                                    *\n*          E-mail: zhough2000@yahoo.com                               *\n* UPDATE : MAY, 2003                                                  *\n* DESCRIPTION: UPDATE TOD CLOCK BY ONE HOUR, AND UPDATE CLOCKxx       *\n*---------------------------------------------------------------------*\n* USER GUIDE                                                          *\n* ==========                                                          *\n*  The SETHOUR will update the current TOD clock by one hour,         *\n*  and update CLOCKxx member in current system.                       *\n*                                                                     *\n*  This is used for time saving at April and October each year.       *\n*  The program will issue the SET CLOCK system command to set         *\n*  the new clock.                                                     *\n*                                                                     *\n*  The program will get the current TOD clock from system.            *\n*  Depends on the parameter given in EXEC PARM, update the TOD        *\n*  clock one hour foreward or backward.                               *\n*                                                                     *\n*  The date will be also changed at following situations:\n*   1. Parameter is one hour foreward and the current hour is 23.     *\n*   2. Parameter is one hour backward and the current hour is 00.     *\n*  This does not apply for Janurary 1 and December 30 because it      *\n*  it will change the year. So DO NOT run this program between        *\n*  23PM December 30 and 01AM Janurary 1.                              *\n*                                                                     *\n*  The program will automatically locate your CLOCKxx member in       *\n*  system. Normally the member will be SYS1.PARMLIB(CLOCK00).         *\n*  The program will first find the CLOCK suffix xx, and search        *\n*  the system PARMLIB PDS given in your LOADxx.                       *\n*                                                                     *\n*  The TIMEZONE statement in CLOCKxx will be updated according to     *\n*  EXEC PARM parameters.                                              *\n*  For example, if your current time zone in CLOCKxx member is:       *\n*      TIMEZONE W.00.00.00                                            *\n*  and you use PARM='+1' to run this program in April, this           *\n*  time zone statement in CLOCKxx will be changed to:                 *\n*      TIMEZONE E.01.00.00                                            *\n*                                                                     *\n*  PARAMETERS                                                         *\n*  ----------                                                         *\n*  The parameter is given in EXEC PARM. Here are the valid options:   *\n*  According to the compile time SYSPARM option for southern or       *\n*  Northern hemisphere, the PARM option will have different           *\n*  meaning:                                                           *\n*                                                                     *\n*  1. +1                                                              *\n*     This option to tell the program set TOD clock one hour          *\n*     ahead, no matter where the system is.                           *\n*                                                                     *\n*  2. -1                                                              *\n*     This option to tell the program set TOD clock one hour          *\n*     back, no matter where the system is.                            *\n*                                                                     *\n*  3. SPRING|SUMMER                                                   *\n*     These options tell program to set clock in Spring.              *\n*     It can be used in April.                                        *\n*                                                                     *\n*     For Northern Hemisphere, it will set clock one hour ahead.      *\n*     For Southern Hemisphere, it will set clock one hour back.       *\n*                                                                     *\n*     Example: Run following step in first Sunday morning in April:   *\n*     //SETCLK  EXEC PGM=SETHOUR,PARM=SUMMER                          *\n*     //SYSPRINT DD  SYSOUT=*                                         *\n*                                                                     *\n*  4. FALL|AUTUMN|WINTER                                              *\n*     These option tell program to set clock in fall.                 *\n*     It can be used in October.                                      *\n*                                                                     *\n*     For Northern Hemisphere, it will set clock one hour back.       *\n*     For Southern Hemisphere, it will set clock one hour ahead.      *\n*                                                                     *\n*     Example: Run following step in last Sunday morning in October:  *\n*     //SETCLK  EXEC PGM=SETHOUR,PARM=FALL                            *\n*     //SYSPRINT DD  SYSOUT=*                                         *\n*                                                                     *\n*  5. AUTO                                                            *\n*     These option tell program to set clock according to current     *\n*     month, as follows:                                              *\n*     . If current month is between Janurary and June, it will be     *\n*       the same as parameter SPRING.                                 *\n*     . If current month is between July and December, it will be     *\n*       the same as parameter FALL,                                   *\n*                                                                     *\n*     AUTO option is useful when you need use the same JCL BATCH      *\n*     for both April and October.                                     *\n*                                                                     *\n*     Example:                                                        *\n*     You can use following step to change system clock in            *\n*     both April and October.                                         *\n*                                                                     *\n*     //* update time by according current month                      *\n*     //SETCLK  EXEC PGM=SETHOUR,PARM=AUTO                            *\n*     //SYSPRINT DD  SYSOUT=*                                         *\n*                                                                     *\n*  6. HELP                                                            *\n*     Show the help messages. If there is no PARM given, the help     *\n*  message will also be displayed.                                    *\n*                                                                     *\n*  PERFORMANCE                                                        *\n*  -----------                                                        *\n*  There will be slight time difference (less than 1 second)          *\n*  because TOD clock is changed via MVS command SET CLOCK.            *\n*  You should give this TOD change job higher performance goal        *\n*  to ensure minimum time difference.                                 *\n*                                                                     *\n*  To do so, you may need to verify your workload manager to          *\n*  ensure the performance will be high enough. If you are running     *\n*  workload manager goal mode, you must not run this job in           *\n*  discretionary service classes.                                     *\n*                                                                     *\n*                                                                     *\n*  CLOCK SENSITIVE SOFTWARE                                           *\n*  ------------------------                                           *\n*  Because some software products are sensitive to system clock,      *\n*  especially when you TOD clock one hour back.                       *\n*  You mey need to restart and wait one hour after the new clock      *\n*  is set.                                                            *\n*                                                                     *\n*  To make this procedure automatic, you may use my AUTOIPL package   *\n*  to restart these sensitive software. The AUTOIPL can be downloaded *\n*  from file #623 in http://www.cbttape.org.                          *\n*                                                                     *\n*  Example:                                                           *\n*                                                                     *\n*  //*************************************************************    *\n*  //* Stop CLOCK sensitive software                                  *\n*  //STOPSW   EXEC PGM=IKJEFT01,PARM=AUTOIPL                          *\n*  //STEPLIB  DD   DISP=SHR,DSN=SYS1.USER.LINKLIB <==AUTOIPL loadlib  *\n*  //SYSEXEC  DD   DISP=SHR,DSN=SYS1.USER.REXXLIB <==AUTOIPL rexxlib  *\n*  //SYSTSPRT DD   SYSOUT=*                                           *\n*  //SYSTSIN  DD   DUMMY                                              *\n*  //SYSIN    DD   *                                                  *\n*    WTOH('STOP SOFTWARE FOR TIME CHANGE')  #issue highlight WTO      *\n*    P RMF                                                            *\n*    P TMONMVS                                                        *\n*    P TMVSLFS                                                        *\n*    WAIT                                                             *\n*    P TMVSMSTR                                                       *\n*    P TMVSHUB                                                        *\n*  /*                                                                 *\n*  //*************************************************************    *\n*  //* Change TOD clock and CLOCKxx member                            *\n*  //SETCLK   EXEC PGM=SETHOUR,PARM=AUTO                              *\n*  //SYSPRINT DD   SYSOUT=*                                           *\n*  //*************************************************************    *\n*  //* Wait one hour before start CLOCK sensitive software            *\n*  //* This is required to change TOD clock one hour back in October, *\n*  //* and optional to changing TOD clock one hour ahead in April.    *\n*  //WAIT     EXEC PGM=WAIT,PARM=3600        wait 3600 seconds        *\n*  //*************************************************************    *\n*  //* Start CLOCK sensitive software                                 *\n*  //STARTALL EXEC PGM=IKJEFT01,PARM=AUTOIPL                          *\n*  //STEPLIB  DD   DISP=SHR,DSN=SYS1.USER.LINKLIB                     *\n*  //SYSEXEC  DD   DISP=SHR,DSN=SYS1.USER.REXXLIB                     *\n*  //SYSTSPRT DD   SYSOUT=*                                           *\n*  //SYSTSIN  DD   DUMMY                                              *\n*  //SYSIN    DD   *                                                  *\n*    WTOH('START SOFTWARE FOR TIME CHANGE')  #issue highlight WTO     *\n*    S TMVSHUB                                                        *\n*    S TMVSMSTR         #it will also start TMONMVS and TMVSLFS       *\n*    S RMF                                                            *\n*    WTOH('TIME SAVING CHANGE IS COMPLETED')                          *\n*  //*                                                                *\n*                                                                     *\n*---------------------------------------------------------------------*\n\nQuestions & suggestions\n=======================\n Should you have any question, please contact Hunter Zhou at\n zhough2000@yahoo.com\n\n June, 2003\n\n Hunter Guanghui Zhou\n Phone: 1-(416)-602-9567\n E-mail: zhough2000@yahoo.com\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@USERGD1": {"ttr": 769, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00C\\x01\\x03\\x17o\\x01\\x06\\x11_\\x10\\x11\\x00\\xaa\\x00\\xa8\\x00\\x00\\xe9\\xc8\\xd6\\xe4@@@@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2003-06-25T00:00:00", "modifydate": "2006-04-25T10:11:43", "lines": 170, "newlines": 168, "modlines": 0, "user": "ZHOU"}, "text": "*---------------------------------------------------------------------*\n* SETHOUR PACKAGE                                                     *\n*---------------------------------------------------------------------*\n* PROGRAM: SETHOUR                                                    *\n* AUTHOR : Hunter Guanghui Zhou                                       *\n*          Phone: 1-(416)-602-9567                                    *\n*          E-mail: zhough2000@yahoo.com                               *\n* UPDATE : MAY, 2003                                                  *\n* DESCRIPTION: UPDATE TOD CLOCK BY ONE HOUR, AND UPDATE CLOCKxx       *\n*---------------------------------------------------------------------*\n* INSTALLATION                                                        *\n* ============                                                        *\n*  1. THE PROGRAM WILL BE RUN IN SUPERVISOR MODE.                     *\n*     THE LOADLIB PDS MUST BE IN MVS APF AUTHORIZED LIST.             *\n*     SUCH AS APF LIST IN SYS1.PARMLIB(PROGXX)                        *\n*  2. OPTIONALLY, THE LOADLIB CAN BE PUT IN MVS LINKLST               *\n*     IN SYS1.PARMLIB(PROGXX).                                        *\n*     THE PROGRAM IS REENTRENT PROGRAM AND CAN BE ALSO LOADED         *\n*     INTO LPA LIST (SYS1.PARMLIB(LPALSTXX))                          *\n*  3. COMPILE REQUIREMENTS.                                           *\n*     THE LINKEDIT OPTION MUST USE 'RENT,A(1)'.                       *\n*     //jobcard here.                                                 *\n*     //COMPILE EXEC ASMACL,PARM.L='LIST,RENT,AC(1)'                  *\n*     //C.SYSIN   DD DISP=SHR,DSN=SP2487.ASM.SOURCE(SETHOUR)          *\n*     //C.SYSLIB  DD DISP=SHR,DSN=SYS1.MACLIB                         *\n*     //          DD DISP=SHR,DSN=SYS1.MODGEN                         *\n*     //L.SYSLMOD DD DISP=SHR,DSN=SYS1.USER.LINKLIB   <==APF LIBRARY  *\n*     //L.SYSIN   DD *                                                *\n*       NAME SETHOUR(R)                                               *\n*     /*                                                              *\n*  4. THE USER TO RUN THIS PROGRAM MUST HAVE ENGOUGH AUTHORITY.       *\n*     THE SECURITY SOFTWARE WILL CHECK THE AUTHORITY OF THE USERID    *\n*     IF HE HAS THE AUTHORITY TO ISSUE THE MVS COMMAND.               *\n*---------------------------------------------------------------------*\n* USER GUIDE                                                          *\n* ==========                                                          *\n*  The SETHOUR will update the current TOD clock by one hour,         *\n*  and update CLOCKxx member in current system.                       *\n*                                                                     *\n*  This is used for time saving at April and October each year.       *\n*  The program will issue the SET CLOCK system command to set         *\n*  the new clock.                                                     *\n*                                                                     *\n*  The program will get the current TOD clock from system.            *\n*  Depends on the parameter given in EXEC PARM, update the TOD        *\n*  clock one hour foreward or backward.                               *\n*                                                                     *\n*  The date will be also changed at following situations:\n*   1. Parameter is one hour foreward and the current hour is 23.     *\n*   2. Parameter is one hour backward and the current hour is 00.     *\n*  This does not apply for Janurary 1 and December 30 because it      *\n*  it will change the year. So DO NOT run this program between        *\n*  23PM December 30 and 01AM Janurary 1.                              *\n*                                                                     *\n*  The program will automatically locate your CLOCKxx member in       *\n*  system. Normally the member will be SYS1.PARMLIB(CLOCK00).         *\n*  The program will first find the CLOCK suffix xx, and search        *\n*  the system PARMLIB PDS given in your LOADxx.                       *\n*                                                                     *\n*  The TIMEZONE statement in CLOCKxx will be updated according to     *\n*  EXEC PARM parameters.                                              *\n*  For example, if your current time zone in CLOCKxx member is:       *\n*      TIMEZONE W.00.00.00                                            *\n*  and you use PARM=AUTO to run this program in April, this           *\n*  time zone statement in CLOCKxx will be changed to:                 *\n*      TIMEZONE E.01.00.00                                            *\n*                                                                     *\n*  PARAMETERS                                                         *\n*  ----------                                                         *\n*  The parameter is given in EXEC PARM. Here are the valid options:   *\n*                                                                     *\n*  1. +1|SPRING|SUMMER                                                *\n*     These options tell program to set clock one hour ahead.         *\n*     It can be used in April.                                        *\n*                                                                     *\n*     Example: Run following step in first Sunday morning in April:   *\n*     //* UPDATE TIME BY MOVE FORWARD.  I.E. FROM 2am TO 3am          *\n*     //SETCLK  EXEC PGM=SETHOUR,PARM=SUMMER                          *\n*                                                                     *\n*  2. -1|FALL|AUTUMN|WINTER                                           *\n*     These option tell program to set clock one hour back.           *\n*     It can be used in October.                                      *\n*                                                                     *\n*     Example: Run following step in last Sunday morning in October:  *\n*     //* UPDATE TIME BY MOVE BACKWARD, I.E. FROM 2am TO 1am          *\n*     //SETCLK  EXEC PGM=SETHOUR,PARM=FALL                            *\n*                                                                     *\n*  3. AUTO                                                            *\n*     These option tell program to set clock according to current     *\n*     month, as follows:                                              *\n*     . If current month is earlier than July (Janurary to June),     *\n*       the program will set clock one hour ahead.                    *\n*     . If current month is later than June (July to December),       *\n*       the program will set clock one hour back.                     *\n*                                                                     *\n*     AUTO option is useful when you need use the same JCL BATCH      *\n*     for both April and October.                                     *\n*                                                                     *\n*     Example:                                                        *\n*     You can use following step to change system clock in            *\n*     both April and October.                                         *\n*                                                                     *\n*     //* update time by according current month                      *\n*     //SETCLK  EXEC PGM=SETHOUR,PARM=AUTO                            *\n*                                                                     *\n*  PERFORMANCE                                                        *\n*  -----------                                                        *\n*  There will be slight time difference (less than 1 second)          *\n*  because TOD clock is changed via MVS command SET CLOCK.            *\n*  You should give this TOD change job higher performance goal        *\n*  to ensure minimum time difference.                                 *\n*                                                                     *\n*  To do so, you may need to verify your workload manager to          *\n*  ensure the performance will be high enough. If you are running     *\n*  workload manager goal mode, you must not run this job in           *\n*  discretionary service classes.                                     *\n*                                                                     *\n*                                                                     *\n*  CLOCK SENSITIVE SOFTWARE                                           *\n*  ------------------------                                           *\n*  Because some software products are sensitive to system clock,      *\n*  especially when you TOD clock one hour back.                       *\n*  You mey need to restart and wait one hour after the new clock      *\n*  is set.                                                            *\n*                                                                     *\n*  To make this procedure automatic, you may use my AUTOIPL package   *\n*  to restart these sensitive software. The AUTOIPL can be downloaded *\n*  from file #623 in http://www.cbttape.org.                          *\n*                                                                     *\n*  Example:                                                           *\n*                                                                     *\n*  //*************************************************************    *\n*  //* Stop CLOCK sensitive software                                  *\n*  //STOPSW   EXEC PGM=IKJEFT01,PARM=AUTOIPL                          *\n*  //STEPLIB  DD   DISP=SHR,DSN=SYS1.USER.LINKLIB <==AUTOIPL loadlib  *\n*  //SYSEXEC  DD   DISP=SHR,DSN=SYS1.USER.REXXLIB <==AUTOIPL rexxlib  *\n*  //SYSTSPRT DD   SYSOUT=*                                           *\n*  //SYSTSIN  DD   DUMMY                                              *\n*  //SYSIN    DD   *                                                  *\n*    WTOH('STOP SOFTWARE FOR TIME CHANGE')  #issue highlight WTO      *\n*    P RMF                                                            *\n*    P TMONMVS                                                        *\n*    P TMVSLFS                                                        *\n*    WAIT                                                             *\n*    P TMVSMSTR                                                       *\n*    P TMVSHUB                                                        *\n*  /*                                                                 *\n*  //*************************************************************    *\n*  //* Change TOD clock and CLOCKxx member                            *\n*  //SETCLK   EXEC PGM=SETHOUR,PARM=AUTO                              *\n*  //*************************************************************    *\n*  //* Wait one hour before start CLOCK sensitive software            *\n*  //* This is required to change TOD clock one hour back in October, *\n*  //* and optional to changing TOD clock one hour ahead in April.    *\n*  //WAIT     EXEC PGM=WAIT,PARM=3600        wait 3600 seconds        *\n*  //*************************************************************    *\n*  //* Start CLOCK sensitive software                                 *\n*  //STARTALL EXEC PGM=IKJEFT01,PARM=AUTOIPL                          *\n*  //STEPLIB  DD   DISP=SHR,DSN=SYS1.USER.LINKLIB                     *\n*  //SYSEXEC  DD   DISP=SHR,DSN=SYS1.USER.REXXLIB                     *\n*  //SYSTSPRT DD   SYSOUT=*                                           *\n*  //SYSTSIN  DD   DUMMY                                              *\n*  //SYSIN    DD   *                                                  *\n*    WTOH('START SOFTWARE FOR TIME CHANGE')  #issue highlight WTO     *\n*    S TMVSHUB                                                        *\n*    S TMVSMSTR         #it will also start TMONMVS and TMVSLFS       *\n*    S RMF                                                            *\n*    WTOH('TIME SAVING CHANGE IS COMPLETED')                          *\n*  //*                                                                *\n*                                                                     *\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "COMPILE": {"ttr": 773, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00$\\x01\\x03\\x17O\\x01\\x06\\x11_\\x10\\x12\\x00\\x1c\\x009\\x00\\x00\\xe9\\xc8\\xd6\\xe4@@@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2003-06-23T00:00:00", "modifydate": "2006-04-25T10:12:24", "lines": 28, "newlines": 57, "modlines": 0, "user": "ZHOU"}, "text": "//SP2487CP JOB (DCTS2INF),HUNTER.Z,MSGCLASS=X,MSGLEVEL=(1,1),CLASS=9,   JOB02090\n//             NOTIFY=&SYSUID\n//********************************************************************\n//*Purpose: Generate LOAD MODULES FOR SETHOUR\n//*Design : Hunter Guanghui Zhou\n//*         Phone: 1-(416)-602-9567\n//*         E-mail: zhough2000@yahoo.com\n//*Update : May, 2003\n//*********************************************************************\n//* COMPILE TIME UPDATES:                                             *\n//* HEMISPH:\n//*  1. NORTHERN or NORTHERN HEMISPHERE\n//*  2. SOUTHERN or SOUTHERN HEMISPHERE\n//*********************************************************************\n//* LOADLIB: Must be APF Authorized and in your LINKLST.\n// SET  SRCLIB='SYS1.PACKAGE.SETHOUR.INSTALL',   <==THIS PDS LIBRARY\n//      LOADLIB='SYS1.USER.LINKLIB',             <==APF Library\n//      HEMISPH='NORTHERN HEMISPHERE'            <==Hemisphere\n//********************************************************************\n//COMPILE EXEC ASMACL,PARM.L='LIST,RENT,AC(1)',\n//        PARM.C='SYSPARM(&HEMISPH)'\n//C.SYSIN   DD DISP=SHR,DSN=&SRCLIB(SETHOUR)\n//C.SYSLIB  DD DISP=SHR,DSN=SYS1.MACLIB\n//          DD DISP=SHR,DSN=SYS1.MODGEN\n//L.SYSLMOD DD DISP=SHR,DSN=&LOADLIB\n//L.SYSIN   DD *\n  NAME SETHOUR(R)\n/*\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SETHOUR": {"ttr": 775, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01c\\x00R\\x01\\x03\\t?\\x01\\x06\\x11_\\x10\\x13\\t9\\x01\\x02\\x00\\x00\\xe9\\xc8\\xd6\\xe4@@@@@@'", "ispf": {"version": "01.99", "flags": 0, "createdate": "2003-04-03T00:00:00", "modifydate": "2006-04-25T10:13:52", "lines": 2361, "newlines": 258, "modlines": 0, "user": "ZHOU"}, "text": "SETHOUR TITLE 'UPDATE TOD CLOCK AND CLOCKxx MEMBER'\n*---------------------------------------------------------------------*\n* PROGRAM: SETHOUR                                                    *\n* AUTHOR : Hunter Guanghui Zhou                                       *\n*          Phone: 1-(416)-602-9567                                    *\n*          E-mail: zhough2000@yahoo.com                               *\n* UPDATE : MAY, 2003                                                  *\n* DESCRIPTION: UPDATE TOD CLOCK BY ONE HOUR, AND UPDATE CLOCKxx       *\n*---------------------------------------------------------------------*\n* INSTALLATION                                                        *\n* ============                                                        *\n*  1. THE PROGRAM WILL BE RUN IN SUPERVISOR MODE.                     *\n*     THE LOADLIB PDS MUST BE IN MVS APF AUTHORIZED LIST.             *\n*     SUCH AS APF LIST IN SYS1.PARMLIB(PROGXX)                        *\n*  2. OPTIONALLY, THE LOADLIB CAN BE PUT IN MVS LINKLST               *\n*     IN SYS1.PARMLIB(PROGXX).                                        *\n*     THE PROGRAM IS REENTRENT PROGRAM AND CAN BE ALSO LOADED         *\n*     INTO LPA LIST (SYS1.PARMLIB(LPALSTXX))                          *\n*  3. COMPILE REQUIREMENTS.                                           *\n*     THE LINKEDIT OPTION MUST USE 'RENT,A(1)'.                       *\n*     THE COMPILE OPTION IS GIVEN IN PARM.C='SYSPARM(parameter)':     *\n*       .NORTHERN, NORTHERN HEMISHPERE or empty                       *\n*                                                                     *\n*        This is a default option to tell the program to run in       *\n*     northern hemisphere.                                            *\n*                                                                     *\n*       .SOUTHERN or SOUTHERN HEMISPHERE                              *\n*                                                                     *\n*        This tells the program to run in southern hemisphere.        *\n*     The difference of hemisphere is the TOD clock change for        *\n*     daylight saving time is reverse as follows:                     *\n*     Northern Hemisphere (North America, Europe, Asia):              *\n*        In Spring: set 1 hour ahead                                  *\n*        In Fall:   set 1 hour back                                   *\n*                                                                     *\n*     Southern Hemisphere (South America, Australia, Africa)          *\n*        In Spring: set 1 hour back                                   *\n*        In Fall:   set 1 hour ahead                                  *\n*                                                                     *\n*     Example 1: Compile for Northern Hemishpere (default)            *\n*                                                                     *\n*     //jobcard here.                                                 *\n*     //COMPILE EXEC ASMACL,PARM.L='LIST,RENT,AC(1)'                  *\n*     //C.SYSIN   DD DISP=SHR,DSN=SP2487.ASM.SOURCE(SETHOUR) <--ASM   *\n*     //C.SYSLIB  DD DISP=SHR,DSN=SYS1.MACLIB                         *\n*     //          DD DISP=SHR,DSN=SYS1.MODGEN                         *\n*     //L.SYSLMOD DD DISP=SHR,DSN=SYS1.USER.LINKLIB   <==APF LIBRARY  *\n*     //L.SYSIN   DD *                                                *\n*       NAME SETHOUR(R)                                               *\n*     /*                                                              *\n*                                                                     *\n*     Example 2: Compile for Southern Hemishpere:                     *\n*                                                                     *\n*     //jobcard here.                                                 *\n*     //COMPILE EXEC ASMACL,PARM.L='LIST,RENT,AC(1)',                 *\n*     //        PARM.C='SYSPARM=(SOUTHERN HEMISHPERE)'                *\n*     //C.SYSIN   DD DISP=SHR,DSN=SP2487.ASM.SOURCE(SETHOUR) <--ASM   *\n*     //C.SYSLIB  DD DISP=SHR,DSN=SYS1.MACLIB                         *\n*     //          DD DISP=SHR,DSN=SYS1.MODGEN                         *\n*     //L.SYSLMOD DD DISP=SHR,DSN=SYS1.USER.LINKLIB   <==APF LIBRARY  *\n*     //L.SYSIN   DD *                                                *\n*       NAME SETHOUR(R)                                               *\n*     /*                                                              *\n*  4. THE USER TO RUN THIS PROGRAM MUST HAVE ENGOUGH AUTHORITY.       *\n*     THE SECURITY SOFTWARE WILL CHECK THE AUTHORITY OF THE USERID    *\n*     IF HE HAS THE AUTHORITY TO ISSUE THE MVS COMMAND.               *\n*                                                                     *\n*---------------------------------------------------------------------*\n* USER GUIDE                                                          *\n* ==========                                                          *\n*  The SETHOUR will update the current TOD clock by one hour,         *\n*  and update CLOCKxx member in current system.                       *\n*                                                                     *\n*  This is used for time saving at April and October each year.       *\n*  The program will issue the SET CLOCK system command to set         *\n*  the new clock.                                                     *\n*                                                                     *\n*  The program will get the current TOD clock from system.            *\n*  Depends on the parameter given in EXEC PARM, update the TOD        *\n*  clock one hour foreward or backward.                               *\n*                                                                     *\n*  The date will be also changed at following situations:\n*   1. Parameter is one hour foreward and the current hour is 23.     *\n*   2. Parameter is one hour backward and the current hour is 00.     *\n*  This does not apply for Janurary 1 and December 30 because it      *\n*  it will change the year. So DO NOT run this program between        *\n*  23PM December 30 and 01AM Janurary 1.                              *\n*                                                                     *\n*  The program will automatically locate your CLOCKxx member in       *\n*  system. Normally the member will be SYS1.PARMLIB(CLOCK00).         *\n*  The program will first find the CLOCK suffix xx, and search        *\n*  the system PARMLIB PDS given in your LOADxx.                       *\n*                                                                     *\n*  The TIMEZONE statement in CLOCKxx will be updated according to     *\n*  EXEC PARM parameters.                                              *\n*  For example, if your current time zone in CLOCKxx member is:       *\n*      TIMEZONE W.00.00.00                                            *\n*  and you use PARM='+1' to run this program in April, this           *\n*  time zone statement in CLOCKxx will be changed to:                 *\n*      TIMEZONE E.01.00.00                                            *\n*                                                                     *\n*  PARAMETERS                                                         *\n*  ----------                                                         *\n*  The parameter is given in EXEC PARM. Here are the valid options:   *\n*  According to the compile time SYSPARM option for southern or       *\n*  Northern hemisphere, the PARM option will have different           *\n*  meaning:                                                           *\n*                                                                     *\n*  1. +1                                                              *\n*     This option to tell the program set TOD clock one hour          *\n*     ahead, no matter where the system is.                           *\n*                                                                     *\n*  2. -1                                                              *\n*     This option to tell the program set TOD clock one hour          *\n*     back, no matter where the system is.                            *\n*                                                                     *\n*  3. SPRING|SUMMER                                                   *\n*     These options tell program to set clock in Spring.              *\n*     It can be used in April.                                        *\n*                                                                     *\n*     For Northern Hemisphere, it will set clock one hour ahead.      *\n*     For Southern Hemisphere, it will set clock one hour back.       *\n*                                                                     *\n*     Example: Run following step in first Sunday morning in April:   *\n*     //SETCLK  EXEC PGM=SETHOUR,PARM=SUMMER                          *\n*     //SYSPRINT DD  SYSOUT=*                                         *\n*                                                                     *\n*  4. FALL|AUTUMN|WINTER                                              *\n*     These option tell program to set clock in fall.                 *\n*     It can be used in October.                                      *\n*                                                                     *\n*     For Northern Hemisphere, it will set clock one hour back.       *\n*     For Southern Hemisphere, it will set clock one hour ahead.      *\n*                                                                     *\n*     Example: Run following step in last Sunday morning in October:  *\n*     //SETCLK  EXEC PGM=SETHOUR,PARM=FALL                            *\n*     //SYSPRINT DD  SYSOUT=*                                         *\n*                                                                     *\n*  5. AUTO                                                            *\n*     These option tell program to set clock according to current     *\n*     month, as follows:                                              *\n*     . If current month is between Janurary and June, it will be     *\n*       the same as parameter SPRING.                                 *\n*     . If current month is between July and December, it will be     *\n*       the same as parameter FALL,                                   *\n*                                                                     *\n*     AUTO option is useful when you need use the same JCL BATCH      *\n*     for both April and October.                                     *\n*                                                                     *\n*     Example:                                                        *\n*     You can use following step to change system clock in            *\n*     both April and October.                                         *\n*                                                                     *\n*     //* update time by according current month                      *\n*     //SETCLK  EXEC PGM=SETHOUR,PARM=AUTO                            *\n*     //SYSPRINT DD  SYSOUT=*                                         *\n*                                                                     *\n*  6. HELP                                                            *\n*     Show the help messages. If there is no PARM given, the help     *\n*  message will also be displayed.                                    *\n*                                                                     *\n*                                                                     *\n*  PERFORMANCE                                                        *\n*  -----------                                                        *\n*  There will be slight time difference (less than 1 second)          *\n*  because TOD clock is changed via MVS command SET CLOCK.            *\n*  You should give this TOD change job higher performance goal        *\n*  to ensure minimum time difference.                                 *\n*                                                                     *\n*  To do so, you may need to verify your workload manager to          *\n*  ensure the performance will be high enough. If you are running     *\n*  workload manager goal mode, you must not run this job in           *\n*  discretionary service classes.                                     *\n*                                                                     *\n*                                                                     *\n*  CLOCK SENSITIVE SOFTWARE                                           *\n*  ------------------------                                           *\n*  Because some software products are sensitive to system clock,      *\n*  especially when you TOD clock one hour back.                       *\n*  You mey need to restart and wait one hour after the new clock      *\n*  is set.                                                            *\n*                                                                     *\n*  To make this procedure automatic, you may use my AUTOIPL package   *\n*  to restart these sensitive software. The AUTOIPL can be downloaded *\n*  from file #623 in http://www.cbttape.org.                          *\n*                                                                     *\n*  Example:                                                           *\n*                                                                     *\n*  //*************************************************************    *\n*  //* Stop CLOCK sensitive software                                  *\n*  //STOPSW   EXEC PGM=IKJEFT01,PARM=AUTOIPL                          *\n*  //STEPLIB  DD   DISP=SHR,DSN=SYS1.USER.LINKLIB <==AUTOIPL loadlib  *\n*  //SYSEXEC  DD   DISP=SHR,DSN=SYS1.USER.REXXLIB <==AUTOIPL rexxlib  *\n*  //SYSTSPRT DD   SYSOUT=*                                           *\n*  //SYSTSIN  DD   DUMMY                                              *\n*  //SYSIN    DD   *                                                  *\n*    WTOH('STOP SOFTWARE FOR TIME CHANGE')  #issue highlight WTO      *\n*    P RMF                                                            *\n*    P TMONMVS                                                        *\n*    P TMVSLFS                                                        *\n*    WAIT                                                             *\n*    P TMVSMSTR                                                       *\n*    P TMVSHUB                                                        *\n*  /*                                                                 *\n*  //*************************************************************    *\n*  //* Change TOD clock and CLOCKxx member                            *\n*  //SETCLK   EXEC PGM=SETHOUR,PARM=AUTO                              *\n*  //SYSPRINT DD   SYSOUT=*                                           *\n*  //*************************************************************    *\n*  //* Wait one hour before start CLOCK sensitive software            *\n*  //* This is required to change TOD clock one hour back in October, *\n*  //* and optional to changing TOD clock one hour ahead in April.    *\n*  //WAIT     EXEC PGM=WAIT,PARM=3600        wait 3600 seconds        *\n*  //*************************************************************    *\n*  //* Start CLOCK sensitive software                                 *\n*  //STARTALL EXEC PGM=IKJEFT01,PARM=AUTOIPL                          *\n*  //STEPLIB  DD   DISP=SHR,DSN=SYS1.USER.LINKLIB                     *\n*  //SYSEXEC  DD   DISP=SHR,DSN=SYS1.USER.REXXLIB                     *\n*  //SYSTSPRT DD   SYSOUT=*                                           *\n*  //SYSTSIN  DD   DUMMY                                              *\n*  //SYSIN    DD   *                                                  *\n*    WTOH('START SOFTWARE FOR TIME CHANGE')  #issue highlight WTO     *\n*    S TMVSHUB                                                        *\n*    S TMVSMSTR         #it will also start TMONMVS and TMVSLFS       *\n*    S RMF                                                            *\n*    WTOH('TIME SAVING CHANGE IS COMPLETED')                          *\n*  //*                                                                *\n*                                                                     *\n*---------------------------------------------------------------------*\n*---------------------------------------------------------------------*\n* END OF DESCRIPTION OF THE PROGRAM                                   *\n*---------------------------------------------------------------------*\n* PROGRAM DESIGN                                                      *\n* ==============                                                      *\n* REGISTERS ASSIGNMENT                                                *\n* --------------------                                                *\n* CONSTANT REGISTERS THROUGH THE WHOLE PROGRAM:                       *\n*  R12: BASE ADDRESS                                                  *\n*  R11: SECOND BASE ADDRESS                                           *\n*  R13: ADDRESSING FOR DYNAMIC STORAGE                                *\n*                                                                     *\n* FOLLOWING REGISTERS WILL BE MODIFIED WHILE CALLING MVS MACROS:      *\n*   R0, R1, R14, R15                                                  *\n*                                                                     *\n* FOLLOWING REGISTERS WILL BE USED WITH THEIR PURPOSE:                *\n*   R9 : WORK                                                         *\n*   R8 : WORK                                                         *\n*   R7 : WORK, SOURCE ADDR IN MVCREC                                  *\n*   R6 : WORK, TARGET ADDR IN MVCREC                                  *\n*   R5 : WORK, LENGTH IN MVCREC                                       *\n*   R5 : WORK                                                         *\n*   R3 : CALLING SECOND-LEVEL SUB-ROUTINES                            *\n*   R2 : CALLING FIRST-LEVEL SUB-ROUTINES                             *\n*                                                                     *\n* PROGRAM LOGIC                                                       *\n* -------------                                                       *\n*  1. SETUP THE RE-ENTRENT PROGRAM ENVIRONMENT                        *\n*     ALLOCATE THE WORK STORAGE(DSA)                                  *\n*  2. INITIALIZE WORK STORAGE                                         *\n*    .READ EXEC PARM                                                  *\n*    .INITIAL MVS COMMAND BUFFER                                      *\n*    .INITIAL DYNAMIC ALLOCATION BUFFER                               *\n*    .INITIAL DYNAMIC ALLOCATION DCB/DCBE/OPENLISTS                   *\n*  3. VALIDATE EXEC PARM                                              *\n*  4. ISSUE SET CLOCK COMMAND TO CURRENT SYSTEM.                      *\n*    .PREPARE EXTEND CONSOLE ENVIRONMENT                              *\n*    .GET CURRENT SYSTEM TOD CLOCK (LOCAL TIME)                       *\n*    .UPDATE SET CLOCK COMMAND BUFFER ACCORDING TO EXEC PARM          *\n*     UPDATE HOUR (AND DAY OF YEAR IF REQUIRED) IN SET CLOCK          *\n*    .ISSUE UPDATED SET CLOCK COMMAND (WITH DATE AND TIME)            *\n*  5. GET THE NEW TIME ZONE                                           *\n*    .GET CURRENT SYSTEM GMT CLOCK                                    *\n*    .GENERATE NEW TIMEZONE STATEMENT ACCORDING TO LOCAL AND GMT      *\n*     CLOCK                                                           *\n*  6. FIND CURRENT CLOCKxx MEMBER                                     *\n*     GET CLOCKxx SUFFIX FROM CVT-ECVT-ECVTIPA-IPACLOCK-IPAPDE        *\n*     SEARCH ALL PARMLIB FOR CLOCKxx MEMBER                           *\n*       . GET PARMLIB FROM CVT-ECVT-ECVTIPA-IPAPLIB@-IPAPLI           *\n*       . ALLOCATE PARMLIB VIA DYNALLOC                               *\n*       . OPEN PARMLIB PDS                                            *\n*       . SEARCH CLOCKXX USING BLDL MACRO                             *\n*       . CLOSE PARMLIB                                               *\n*       . DEALLOCATE PARMLIB VIA DYNALLOC                             *\n*  7. TEST THE TIME ZONE STATEMENT IN CURRENT CLOCKxx                 *\n*       . ALLOCATE THE PARMLIB WITH CLOCKxx VIA DYNALLOC              *\n*       . OPEN THE MEMBER WITH READ DCB                               *\n*       . READ AND SCAN ALL RECORDS                                   *\n*       . TEST TIMEZONE STATEMENT, UPDATE IT IF NOT THE SAME AS       *\n*         THE NEW TIME ZONE STATEMENT IN STEP 6.                      *\n*       . CLOSE CLOCKxx DD                                            *\n*       . DEALLOCATE CLOCKxx VIA DYNALLOC                             *\n*  8. UPDATE THE CLOCK MEMBER IF REQUIRED.                            *\n*       . ALLOCATE THE PARMLIB WITH CLOCKxx VIA DYNALLOC              *\n*       . OPEN THE MEMBER WITH WRITE DCB                              *\n*       . WRITE ALL RECORDS                                           *\n*       . CLOSE CLOCKxx DD                                            *\n*       . DEALLOCATE CLOCKxx VIA DYNALLOC                             *\n*  9. CLEAN UP.                                                       *\n*       . READ THE RETURN CODE                                        *\n*       . FREE ALLOCATED STORAGE                                      *\n*       . RETURN TO THE CALLER                                        *\n*                                                                     *\n*---------------------------------------------------------------------*\nSETHOUR  CSECT\nSETHOUR  AMODE 31\nSETHOUR  RMODE ANY\n*---------------------------------------------------------------------*\n* DEFINE REGISTER EQUALS USING IBM STANDARD MACRO YREGS               *\n*---------------------------------------------------------------------*\n* LOCAL CONSTANTS\n         LCLC  &INIDDNM,&HEMISPH\n&INTDDNM SETC  'SYSTMPDD'      INITIAL DD NAME IN ALL DCB\n&HEMISPH SETC  '&SYSPARM'      HEMISPHERE: NORTHERN OR SOUTHERN\n         AIF   ('&HEMISPH' NE ''         AND                           X\n                '&HEMISPH' NE 'NORTHERN' AND                           X\n                '&HEMISPH' NE 'SOUTHERN' AND                           X\n                '&HEMISPH' NE 'NORTHERN HEMISPHERE' AND                X\n                '&HEMISPH' NE 'SOUTHERN HEMISPHERE').SYSPERR\n         AGO   .ASTART\n.SYSPERR MNOTE 12,'The SYSPARM must be NORTHERN or SOURTHER or empty.'\n         AGO   .END\n.ASTART  ANOP\n         YREGS\n*---------------------------------------------------------------------*\n* BUILD LINKAGE CONVENTION:                                           *\n*---------------------------------------------------------------------*\n* ESTABLISH ADDRESSABILITY, USING R15 AS TEMPORARY BASE REGISTER\n         USING SETHOUR,R15           R15 IS CURRENT ADDRESS, USING IT\n         B     START              BRANCH AROUND CONSTANTS\n         DC    C' PROGRAM NAME(SETHOUR)'        MODULE IDENTIFIER\n         DC    C' COMPILE TIME(&SYSDATE &SYSTIME)'\n         DC    C' SETHOUR: UPDATE TOD CLOCK IN TIME SAVING CHANGE.'\n         DC    C' JCL EXEC PARM SYNTAX:'\n         DC    C' HELP: SHOW HELP MESSAGE.'\n         DC    C' +1: SET ONE HOUR AHEAD.'\n         DC    C' -1: SET HOUR BACKWARD.'\n         DC    C' AUTO: Use +1 if current month<July, Otherwiae -1.'\n         DC    C' Example: //SETCLK EXEC PGM=SETHOUR,PARM=AUTO   '\n         DC    C' Design: Hunter Zhou, zhough2000@yahoo.com     '\nBASE2REG DC    A(SETHOUR+4096)    Second base register\nBASE3REG DC    A(SETHOUR+8192)    Second base register\nSTART    DS    0H\n         SAVE  (14,12)            ; SAVE CALLER'S REGISTERS USING SAVE\n         L     R11,BASE2REG       second base register\n         L     R10,BASE3REG       third  base register\n         LR    R12,R15            Change base registers\n         DROP  R15                Tell assembler\n         USING SETHOUR,R12,R11,R10\n*---------------------------------------------------------------------*\n* SAVE THE PARAMETER REGISTER FROM R1 TO R7 BEFORE GETMAIN\n*---------------------------------------------------------------------*\n         LR    R7,R1              ;SAVE ADDR OF PARM TO R7\n         LR    R8,R13             ;SAVE CALLER'S ADDRESS\n*---------------------------------------------------------------------*\n* DYNAMICALLY ALLOCATE STORAGE FOR DATA AREAS\n*---------------------------------------------------------------------*\n         GETMAIN RU,LV=STORLEN,LOC=BELOW ;OBTAIN STORAGE FOR DATA AREAS\n         LR    R13,R1             ;ADDR OF ENTRY POINT\n         USING DSA,R13            ;USING R11 AS STOR ADDRESSING REGS.\n         ST    R8,SAVEAREA+4      ;SET OUR BACKWARD LINK\n         ST    R13,8(R8)          ;SET CALLER'S FORWARD LINK\n*---------------------------------------------------------------------*\n* INITIALIZE BUFFERS\n*---------------------------------------------------------------------*\n         BAL   R2,INITIAL         ;INITIALIZE BUFFERS\n         CLI   RETCODE,X'00'      ;TEST RETURN CODE\n         BNE   RETURN\n*---------------------------------------------------------------------*\n* VALIDATE THE PARM\n         BAL   R2,READPARM        ;CALL READ/VALIDATE PARAMETER\n         CLI   RETCODE,X'00'      ;TEST RETURN CODE\n         BNE   RETURN\n         CLI   FLGTERM,YES        ;NEED TO STOP THE PROGRAM?\n         BE    RETURN             ;YES, THEN STOP THE PROGRAM\n* CALL MAIN FUNCTION\n* PROCESS OF SYSTEM CLOCK\n         BAL   R2,RUNSTCLK        CALL MVS COMMAND SET CLOCK\n         CLI   RETCODE,X'00'      ;TEST RETURN CODE\n         BNE   RETURN\n* PROCESS OF PARMLIB CLOCKxx MEMBER\n         BAL   R2,GETTZ           GET NEW TIME ZONE INFORMATION\n         CLI   RETCODE,X'00'      ;TEST RETURN CODE\n         BNE   RETURN\n         BAL   R2,GETCLKMB        GET CURRENT SYSTEM CLOCKxx LOCATION\n         CLI   RETCODE,X'00'      ;TEST RETURN CODE\n         BNE   RETURN\n         BAL   R2,TSTCLKMB        TEST CLOCKxx TIMEZONE STATEMENT\n         CLI   RETCODE,X'00'      ;TEST RETURN CODE\n         BNE   RETURN\n         BAL   R2,UPDCLKMB\n         B     RETURN\n*---------------------------------------------------------------------*\n*  RETURN LINKAGE                                                     *\n*---------------------------------------------------------------------*\nRETURN   EQU   *\n         BAL   R2,TERMPROG        ;FREE ALLOCATED STORAGE\n         XR    R9,R9              ;CLEAR R9\n         IC    R9,RETCODE       ;LOAD RETURN CODE TO R9\n         L     R11,SAVEAREA+4     ;LOAD CALLER'S ADDRESS\n         FREEMAIN RU,LV=STORLEN,A=(R13)        ; FREE ALLOCATED STOR\n         LR    R13,R11            ; COPY RETURN CODE TO R15\n         LR    R15,R9             ; COPY RETURN CODE TO R15\n         RETURN (14,12),RC=(15)   ;RESTORE CALLER'S REGS AND RETURN\n*---------------------------------------------------------------------*\n* ROUTINE: INITIAL\n* DESCRIPTION: INITIALIZE ALL BUFFERS\n* INPUT:\n*    R2  : RETURN CONTROL\n* RETURN :\n*---------------------------------------------------------------------*\nINITIAL  EQU    *\n         MVI   RETCODE,X'00'      ;RESET RETURN CODE\n         LA    R8,DSA+DSALEN      ;LOAD DTABLE ADDRESS\n         ST    R8,DRECAREA        ;SAVE DTABLE ADDRESS INTO DRECAREA\n*---------------------------------------------------------------------*\n* SAVE THE PARAMETER TO PRIVATE STORAGE (PARM AND PARMLEN)\n*---------------------------------------------------------------------*\n         L     R7,0(R7)           ;LENGTH OF PARM\n         LH    R5,0(R7)           ;LENGTH OF PARM\n         LA    R7,2(,R7)          ;POINT AT DATA\n         STH   R5,PARMLEN         ;COPY THE PARAMETER LENGTH TO PARMLEN\n         LTR   R5,R5              ; TEST IF PARM IS ZERO\n         BZ    INIT1000           ; IF NO PARM, SKIP TO COPY PARM\n         BCTR  R5,0               ;DECREMENT LENGTH BY 1\n         LA    R6,PARM            ;\n         EX    R5,MVCREC          ; COPY PARAMETER\n*---------------------------------------------------------------------*\n* INITIALIZE STORAGE AREA WITH CONSTANT DATA\n*---------------------------------------------------------------------*\n* GET THE JOBNAME AS TEMPORARY CONSOLE NAME\nINIT1000 EQU   *\n         MVI   FLGTERM,NO         DO NOT STOP THE PROGRAM\n         LA    R3,TIOTA\n         EXTRACT (R3),'S',FIELDS=(TIOT),MF=(E,EXTRMFL) JOB NAME INFO\n         L     R3,TIOTA           TIOT ADDRESS\n         USING TIOT1,R3           TIOT ADDRESSABILITY\n         MVC   HCCONSNM,TIOCNJOB  COPY THE JOBNAME AS CONSOL NAME\n         DROP  R3\n* INITIALIZE THE DATA BUFFERS\n         MVC   SETCLK(SETCLKL),SETCLKC COPY THE SET CLOCK COMMAND\n         MVC   DATEBUF(DATEMDLL),DATEMDL COPY DATE EDIT PATTERN\n         MVC   WTOLIST(WTOMDLL),WTOMDL ;COPY THE MVC MODEL TO MVCCMD\n* INITIALIZE THE DYNAMIC ALLOCATION BUFFERS\n         MVC   TUALC(TUALCML),TUALCM     COPY TEXT UNIT CONTENTS\n         MVC   TUUALC(TUUALCML),TUUALCM COPY UNALLOCATE TEXT UNITS\n         MVI   MSGBUFCC,C' '            SET MESSAGE CC BYTE\n* INITIALIZE THE DCBS\n* PARMLIB READ  DCB\n         MVC   PRMLIB(CPRMLIBL),CPRMLIB    COPY THE DCB TO BELOW 16M\n         MVC   PRMOPLST(CPRMOPLL),CPRMOPL  COPY THE OPEN LIST TO BL 16M\n* CLOCKxx READ  DCB\n         MVC   CLRDCB(CCLRDCBL),CCLRDCB    COPY DCB\n         MVC   CLRDCBE(DCBE$LEN),CCLRDCBE  COPY DCBE\n         MVC   CLROPLST(CCLROPLL),CCLROPL\n         LA    R4,CLRDCBE\n         ST    R4,CLRDCB+(DCBDCBE-IHADCB)  UPDATE DCBE IN DCB\n         LA    R4,CLRDCB\n         ST    R4,CLROPLST+4               UPDATE DCB IN OPEN LIST\n* CLOCKxx WRITE DCB\n         MVC   CLWDCB(CCLWDCBL),CCLWDCB    COPY DCB\n         MVC   CLWDCBE(DCBE$LEN),CCLWDCBE  COPY DCBE\n         MVC   CLWOPLST(CCLWOPLL),CCLWOPL\n         LA    R4,CLWDCBE\n         ST    R4,CLWDCB+(DCBDCBE-IHADCB)  UPDATE DCBE IN DCB\n         LA    R4,CLWDCB\n         ST    R4,CLWOPLST+4               UPDATE DCB IN OPEN LIST\n* SYSPRINT DD\n         MVC   SPRDCB(CSPRDCBL),CSPRDCB    COPY DCB\n         MVC   SPRDCBE(DCBE$LEN),CSPRDCBE  COPY DCBE\n         MVC   SPROPLST(CSPROPLL),CSPROPL\n         LA    R4,SPRDCBE\n         ST    R4,SPRDCB+(DCBDCBE-IHADCB)  UPDATE DCBE IN DCB\n         LA    R4,SPRDCB\n         ST    R4,SPROPLST+4               UPDATE DCB IN OPEN LIST\n* LOCATE THE DDNAME ADDRESS IN PRMLIB DCB\n         LA    R4,PRMLIB                 LOAD DCB ADDRESS\n         LA    R5,CPRMLIBL               LOAD DCB LENGTH\n         LA    R6,PRMDDLOC               LOAD DDLOC ADDRESS STORAGE\n         BAL   R3,FNDDLOC                CALL FIND DDNAME LOCATION\n* LOCATE THE DDNAME ADDRESS IN CLRDCB\n         LA    R4,CLRDCB                 LOAD DCB ADDRESS\n         LA    R5,CCLRDCBL               LOAD DCB LENGTH\n         LA    R6,CLRDDLOC               LOAD DDLOC ADDRESS STORAGE\n         BAL   R3,FNDDLOC                CALL FIND DDNAME LOCATION\n* LOCATE THE DDNAME ADDRESS IN CLWDCB\n         LA    R4,CLWDCB                 LOAD DCB ADDRESS\n         LA    R5,CCLWDCBL               LOAD DCB LENGTH\n         LA    R6,CLWDDLOC               LOAD DDLOC ADDRESS STORAGE\n         BAL   R3,FNDDLOC                CALL FIND DDNAME LOCATION\n* INITIALIZE THE FLAGS\n         MVI   FLGUCLKM,NO               UPDATE CLOCKxx FLAG TO NO\n* INITIALIZE THE SYSPRINT DD\n         MVI   MSGID,MSGINIT      ;INITIALIZE SYSPRINT DD\n         BAL   R4,WRITELOG\n* SHOW WELCOME MESSAGES\n         MVI   MSGID,MSG001I\n         BAL   R4,WRITELOG\n         MVI   MSGID,MSG002I\n         BAL   R4,WRITELOG\n         MVI   MSGID,MSG003I\n         BAL   R4,WRITELOG\n* SHOW HEMISPHERE INFORMATION.\n         AIF  ('&HEMISPH' NE 'SOUTHERN HEMISPHERE' AND                 X\n               '&HEMISPH' NE 'SOUTHERN').AINORTH\n         MVI   MSGID,MSG032I\n         AGO   .AIEND\n.AINORTH ANOP\n         MVI   MSGID,MSG031I\n.AIEND   ANOP\n         BAL   R4,WRITELOG\nINIT9000 EQU   *\n         BR     R2\n*\n*---------------------------------------------------------------------*\n* ROUTINE: TERMPROG\n* DESCRIPTION: INITIALIZE ALL BUFFERS\n* INPUT:\n*    R2  : RETURN CONTROL\n* RETURN :\n*---------------------------------------------------------------------*\nTERMPROG EQU   *\n* TEST THE RETURN CODES FOR LAST MESSAGE\n         CLI RETCODE,X'00'\n         BE  TERM1000\n         CLI RETCODE,X'04'\n         BE  TERM2000\n         MVI MSGID,MSG026I\n         B   TERM5000\n* STOP NORMALLY\nTERM1000 EQU   *\n         MVI MSGID,MSG024I\n         B   TERM5000\n* STOP WITH WARN MESSAGE\nTERM2000 EQU   *\n         MVI MSGID,MSG025I\n         B   TERM5000\n* CLOSE SYSPRINT\nTERM5000 EQU   *\n         BAL R4,WRITELOG\n         MVI MSGID,MSGTERM      ;CLOSE SYSPRINT DD\n         BAL R4,WRITELOG\n         BR  R2\n*---------------------------------------------------------------------*\n* ROUTINE: FNDDLOC\n* DESCRIPTION: FIND DDNAME LOCATION IN SPECIFIC DDNAME\n* INPUT:\n*    R3  : RETURN CONTROL\n*    R4  : DCB ADDRESS\n*    R5  : DCB LENGTH\n*    R6  : ADDRESS TO BE SAVED TO\n* RETURN :\n*---------------------------------------------------------------------*\nFNDDLOC EQU    *\n* LOCATE THE DDNAME ADDRESS IN PRMLIB DCB\n         AR    R5,R4                     THE LAST POSITION OF DCB\n         LA    R7,8                      LENGTH OF THE DDNAME\n         SR    R5,R7                     LAST POSSIBLE DDNAME ADDRESS\nFNDD1000 EQU   *\n         CLC   0(8,R4),SYSTMPDD          FIND THE INITIAL DDNAME\n         BE    FNDD1200\n         LA    R4,1(0,R4)                MOVE TO NEXT BYTE\n         CR    R4,R5                     REACH AT THE END OF DCB?\n         BL    FNDD1000                  NO, CONTINUE TO TEST NEXT ONE\nFNDDERR  EQU   *\n         MVI   RETCODE,X'0C'             SET THE RETURN CODE 12\n         MVI   MSGID,MSG004I\n         BAL   R4,WRITELOG\n         B     FNDD9000\nFNDD1200 EQU   *\n         ST    R4,0(R6)                  SAVE THE DDNAME LOCATION\nFNDD9000 EQU   *\n         BR    R3\n*\n*---------------------------------------------------------------------*\n* ROUTINE: RUNSTCLK\n* DESCRIPTION: UPDATE TOD CLOCK MAIN PROCEDURE\n* INPUT:\n*    R2  : RETURN CONTROL\n* RETURN :\n*    R15 : 0 SUCCESS\n*          8 UNSUCCESS\n*---------------------------------------------------------------------*\nRUNSTCLK EQU    *\n*---------------------------------------------------------------------*\n* PARPARE OPERPARM\n*---------------------------------------------------------------------*\n         LA    R8,OPERDATA            ADDRESS OF OPERPARM AREA\n         USING MCSOPPRM,R8            IEZVG111 DSECT ADDRESSABILITY\n         XC    MCSOPPRM(MCSOPLEN),MCSOPPRM  CLEAR THE OPERPARM AREA\n***********************************************************************\n* OVERRIDE THE CONSOLE ATTRIBUTES SPECIFIED IN THE USER PROFILE\n* OF THE SECURITY PRODUCT BY TURNING ON BIT MCSOVRDY IN THE MCSOP DATA\n* AREA. REQUEST THE HARDCOPY ATTRIBUTE (TO RECEIVE HARDCOPY MESSAGE SET\n***********************************************************************\n         OI    MCSOFLAG,MCSOVRDY      OVERRIDE CONSOLE ATTRIBUTES\n         OI    MCSOMISC,MCSOHDCY      REQUEST THE HARDCOPY ATTRIBUTE\n         DROP  R8                     DROP ADDRESSABILITY OF IEZVG111\n*\n*---------------------------------------------------------------------*\n* CALL MGCRE TO ISSUE MVS COMMAND\n*---------------------------------------------------------------------*\n         MODESET MF=(E,MODESUP)    ;SUPERVISOR STATE, KEY 0\n***********************************************************************\n* ACTIVATE AN EXTENDED MCS CONSOLE WHOSE NAME IS CONTAINED IN A FIELD\n* CALLED HCCONSNM.  THE ATTRIBUTES OF THE EXTENDED MCS CONSOLE ARE\n* CONTAINED IN A FIELD CALLED OPERDATA, MAPPED BY IEZVG111.  THE\n* CONSOLE WILL HAVE ITS MESSAGES DELIVERED ON A FIRST-IN-FIRST-OUT\n* BASIS.  THE SYSTEM WILL POST A MESSAGE ECB CALLED HCMECB.\n* THE ADDRESS OF THE OUTPUT AREA THAT CONTAINS THE\n* ADDRESS OF THE MCS CONSOLE STATUS AREA IS CONTAINED IN A FIELD\n* CALLED HCSTATUS.  THE ADDRESS OF THE ALET THAT IDENTIFIES THE ADDRESS\n* OR DATA SPACE THAT CONTAINS THE MCS CONSOLE STATUS AREA IS\n* CONTAINED IN A FIELD CALLED HCSTATAL.\n* THE SYSTEM RETURNS THE CONSOLE ID IN THE FIELD CALLED HCCONSID.\n* THE SYSTEM RETURNS A RETURN CODE AND A REASON CODE IN FIELDS\n* CALLED HCRETC AND HCRNC, RESPECTIVELY.\n***********************************************************************\n         MCSOPER REQUEST=ACTIVATE,  ACTIVATE THE CONSOLE               X\n               NAME=HCCONSNM,                                          X\n               TERMNAME=HCCONSNM,                                      X\n               OPERPARM=OPERDATA,                                      X\n               MSGDLVRY=FIFO,                                          X\n               MSGECB=HCMECB,                                          X\n               MCSCSA=HCSTATUS,                                        X\n               MCSCSAA=HCSTATAL,                                       X\n               CONSID=HCCONSID,                                        X\n               RTNCODE=HCRETC,                                         X\n               RSNCODE=HCRSNC,                                         X\n               MF=(E,MCSOPPL)\n***********************************************************************\n         BAL   R3,UPSETCLK            UPDATE HOUR WITH GIVEN -1 OR +1\n***********************************************************************\n         LA    R4,SETCLK             ;LOAD THE SETHOUR ADDRESS\nSETCMD   MGCRE TEXT=(R4),            ;CALL MVS COMMAND MGCRE           X\n               CONSNAME=HCCONSNM,MF=(E,MGCAREA)\n         MCSOPER REQUEST=DEACTIVATE,CONSID=HCCONSID,ABTERM=NO,         X\n               RTNCODE=HCRETC,RSNCODE=HCRSNC\n         MODESET MF=(E,MODEPROB)    ;BACK TO NORMAL STATE\n*SHOW COMMAND INFORMATION\n* SHOW THE PARM IN LOG\n         MVI MSGID,MSG028I\n         BAL R4,WRITELOG\n         MVI MSGID,MSGCUST\n         LH  R5,SETCLK               LOAD THE COMMAND LENGTH\n         LA  R6,MSGBUFTX+8\n         LA  R7,SETCLKCM             JUST COPY THE COMMAND\n         BCTR R5,0\n         EX  R5,MVCREC               COPY THE PARM TO MSG BUFFER\n         LA  R5,9(0,R5)              LOAD THE PARM LENGTH+8\n         STC R5,MSGBUFLN\n         BAL R4,WRITELOG\n         BR   R2\n*---------------------------------------------------------------------*\n* ROUTINE: READPARM\n* DESCRIPTION: READ AND VALIDATE PARAMETER FROM JCL EXEC PARM\n* INPUT:\n*    R2  : RETURN CONTROL\n*  PARM  : THE PARAMETER TEXT\n*PARMLEN : THE PARAMETER TEXT LENGTH\n* RETURN :\n* RETCODE: 0 VALID PARAMETER\n*          4 NO PARAMETER\n*          8 INVALID PARAMETER\n*---------------------------------------------------------------------*\nREADPARM EQU *\n         MVI RETCODE,X'00'\n         LH  R5,PARMLEN\n         LTR R5,R5\n         BZ  PARMWARN\n* SHOW THE PARM IN LOG\n         MVI MSGID,MSGCUST\n         MVC MSGBUFTX(32),=CL32'STZ010I The given EXEC PARM is: '\n         LH  R5,PARMLEN\n         LA  R6,MSGBUFTX+32\n         LA  R7,PARM\n         BCTR R5,0\n         EX  R5,MVCREC               COPY THE PARM TO MSG BUFFER\n         LA  R5,33(0,R5)              LOAD THE PARM LENGTH+8\n         STC R5,MSGBUFLN\n         BAL R4,WRITELOG\n* VERIFY THE PARM\n         LH  R5,PARMLEN\n         LA  R6,PARM\n         LA  R8,X'06'                LOAD THE MAXIMUM PARM LENGTH\n         CR  R5,R8                   LENGTH > 6?\n         BH  PARMERR\n         LA  R5,PARMLEN              LOAD THE ADDRESS OF PARMLEN\n         CLI 1(R5),X'02'\n         BE  PARMCP2\n         CLI 1(R5),X'04'\n         BE  PARMCP4\n         CLI 1(R5),X'06'\n         BE  PARMCP6\n         MVI RETCODE,X'08'\n         B   PARMERR\nPARMCP2  CLC 0(2,R6),OPTM1\n         BE  PARMMINS\n         CLC 0(2,R6),OPTP1\n         BE  PARMPLUS\n         B   PARMERR\nPARMCP4  CLC 0(4,R6),OPTFALL\n         BE  PARMMINS\n         CLC 0(4,R6),OPTAUTO\n         BE  PARMAUTO\n         CLC 0(4,R6),OPTHELP\n         BE  PARMHELP\n         B   PARMERR\nPARMCP6  CLC 0(6,R6),OPTAUTM\n         BE  PARMMINS\n         CLC 0(6,R6),OPTWNTR\n         BE  PARMMINS\n         CLC 0(6,R6),OPTSPRG\n         BE  PARMPLUS\n         CLC 0(6,R6),OPTSUMR\n         BE  PARMPLUS\n         B   PARMERR\n* AUTO:\n* if month < 06, then use +1, otherwise use -1\nPARMAUTO EQU *\n         TIME  DEC,DATELCL,LINKAGE=SYSTEM,    GET TIME/DATE AT DATELCL X\n               MF=(E,TIMELST),DATETYPE=YYYYMMDD\n         CLI DATELCL+10,X'06'     COMPARE MONTH WITH 06 (JUNE)\n         BH  PARMMINS             IF HIGHER, JULY OR LATER, THEN USE -1\n* +1\nPARMPLUS EQU *\n         MVI SETCPLUS,YES\n         B   PARMOK\n* -1\nPARMMINS EQU *\n         MVI SETCPLUS,NO\n* PARM IS VALID , SHOW THE PARM INFORMATION\nPARMOK   EQU *\n* FOR PARM +1 AND -1, BYPASS CHECKING HEMISHPERE\n         CLI 1(R5),X'02'    PARM LENGTH IS 2?\n         BE  PARMOKA        YES, BYPASS HEMISPHERE CHECKING\n         AIF  ('&HEMISPH' NE 'SOUTHERN HEMISPHERE' AND                 X\n               '&HEMISPH' NE 'SOUTHERN').APNORTH\n* REVERSE THE VALUE FOR SOURTHERN HEMISPHERE.\n         XI  SETCPLUS,YES\n.APNORTH ANOP\nPARMOKA  EQU *\n         CLI SETCPLUS,YES\n         BNE PARMOKM\nPARMOKP  EQU *\n         MVI MSGID,MSG029I\n         B   PARMOKS\nPARMOKM  EQU *\n         MVI MSGID,MSG030I\nPARMOKS  EQU *\n         BAL R4,WRITELOG\n         B   PARMEND\n* NO PARM\nPARMWARN EQU *\n         MVI MSGID,MSG022I\n         MVI RETCODE,X'04'\n         BAL R4,WRITELOG\n         B   PARMHELP\n* INVALID PARM\nPARMERR  EQU *\n         MVI MSGID,MSG023I\n         BAL R4,WRITELOG\n         MVI RETCODE,X'08'\n* SHOW HELP MESSAGES\nPARMHELP EQU *\n         MVI FLGTERM,YES\n         BAL R3,SHOWHELP\nPARMEND  EQU *\n         BR  R2\n*---------------------------------------------------------------------*\n*---------------------------------------------------------------------*\n* ROUTINE: UPSETCLK\n* DESCRIPTION: UPDATE SET CLOCK COMMAND BUFFER\n* INPUT:\n*    R3  : RETURN CONTROL\n* RETURN : UPDATED SET CLOCK DATELCL WITH NEW HOUR OR DATE\n* DATELCL: TIME & DATE HHMMSSthmiju0000 0YYYYDDD00000000\n*                       0 1 2 3 4 5 6 7  8 9 0 1 2 3 4 5\n*---------------------------------------------------------------------*\nUPSETCLK EQU   *\n         ZAP   HOURBUF,P0              ;CLEAR HOUR DECIMAL BUFFER\n         ZAP   MINBUF,P0               ;CLEAR MINUTE DECIMAL BUFFER\n         ZAP   SECBUF,P0               ;CLEAR SECOND DECIMAL BUFFER\n         ZAP   STHBUF,P0               ;CLEAR SECOND/100 DECIMAL BUFFER\n         ZAP   DAYBUF,P0               ;CLEAR DAY  DECIMAL BUFFER\n* GET GMT TIME\n         TIME  DEC,DATEGMT,LINKAGE=SYSTEM,   GET TIME/DATE IN DATEGMT  X\n               MF=(E,TIMELST),DATETYPE=YYYYDDD,ZONE=GMT\n* GET LOCAL TIME\n         TIME  DEC,DATELCL,LINKAGE=SYSTEM,    GET TIME/DATE AT DATELCL X\n               MF=(E,TIMELST),DATETYPE=YYYYDDD\n         MVC   HOURBUF(1),DATELCL     COPY THE HOUR BYTE TO DEC BUFFER\n         MVC   MINBUF(1),DATELCL+1    COPY THE MINUTE\n         MVC   SECBUF(1),DATELCL+2    COPY THE SECOND\n         MVC   STHBUF(1),DATELCL+3    COPY THE SECOND/100\n         MVC   DAYBUF(2),DATELCL+10   COPY THE DAY OF YEAR\n         CLI   SETCPLUS,YES           NEED +1?\n         BE    UPDT3000               YES, PROCESS PLUS\n* PROCESS -1\n         CLI   DATELCL,X'00'          AT 00am?\n         BE    UPDT1000               YES, UPDATE HOUR AND DATE\n         SP    HOURBUF,P10            SUBTRACT HOUR BY 1\n         B     UPDT2000\nUPDT1000 EQU   *\n         MVI   HOURBUF,X'23'          UPDATE HOUR TO 23\n         SP    DAYBUF,P10             SUBTRACT DAY BY 1\nUPDT2000 B     UPDT5000\n* PROCESS +1\nUPDT3000 EQU   *\n         CLI   DATELCL,X'23'          AT 23pm?\n         BE    UPDT4000               YES,UPDATE HOUR AND DATE\n         AP    HOURBUF,P10            SUBTRACT HOUR BY 1\n         B     UPDT5000\n* UPDATE DATE AND HOUR\nUPDT4000 EQU   *\n         MVI   HOURBUF,X'00'          UPDATE HOUR TO 00\n         AP    DAYBUF,P10             SUBTRACT HOUR BY 1\n* ADJUST THE CLOCK BY 1 SECOND, RULES:\n* TEST THE SECOND/100 BYTE\n*   .IF SECOND/100 BYTE<50 (0.5 SECOND), NO SECOND ADJUSTMENT.\n*   .OTHERWISE ADD 1 SECOND TO CURRENT CLOCK\n*       IF SECOND!=59, JUST ADD SECOND BY 1, AND JUMP OUT\n*       IF SECOND==59, SET SECOND=0,\n*       IF MINUTE!=59, ADD MINUTE BY 1, AND JUMP OUT\n*       IF MINUTE==59, SET MINUTE=0,\n*       IF HOUR!=23, ADD HOUR BY 1, AND JUMP OUT\n*       IF HOUR==23, SET HOUR=0, ADD YTD BY 1.\n*\n* PROCESS SECOND\nUPDT5000 EQU   *\n         MVC   DATELCL(1),HOURBUF     COPY THE UPDATED HOUR BYTE\n         MVC   DATELCL+10(2),DAYBUF   COPY THE UPDATED DAY BYTE\n         CLI   DATELCL+3,X'50'        COMPARE SECOND/100\n         BL    UPDT6000               <50(0.5 SECOND), THEN SKIP CHANGE\n         CLI   DATELCL+2,X'59'        TEST SECOND=59?\n         BE    UPDT5100               YES, PROCESS MINUTE\n         AP    SECBUF,P10             OTHERWISE ADD SECOND BY 1\n         B     UPDT6000               AND CONTINUE UPDATE\n* PROCESS MINUTE WHEN SECOND==59\nUPDT5100 EQU   *\n         ZAP   SECBUF,P0              SET SECOND TO 0.\n         CLI   DATELCL+1,X'59'        TEST MINUTE=59?\n         BE    UPDT5200               YES, PROCESS HOUR\n         AP    MINBUF,P10             OTHERWISE ADD MINUTE BY 1\n         B     UPDT6000               AND CONTINUE UPDATE\n* PROCESS HOUR WHEN MINUTE==59\nUPDT5200 EQU   *\n         ZAP   MINBUF,P0              SET MINUTE TO 0.\n         CLI   DATELCL,X'23'          TEST HOUR==23?\n         BE    UPDT5300               YES, PROCESS HOUR\n         AP    HOURBUF,P10            OTHERWISE ADD HOUR BY 1\n         B     UPDT6000               AND CONTINUE UPDATE\n* PROCESS DAY WHEN HOUR==23\nUPDT5300 EQU   *\n         ZAP   HOURBUF,P0             SET HOUR TO 0.\n         AP    DAYBUF,P10             ADD YTD BY 1\n         B     UPDT6000               AND CONTINUE UPDATE\n* UPDATE DATELCL\nUPDT6000 EQU   *\n         MVC   DATELCL(1),HOURBUF     COPY THE HOUR BYTE\n         MVC   DATELCL+1(1),MINBUF    COPY THE MINUTE BYTE\n         MVC   DATELCL+2(1),SECBUF    COPY THE SECOND BYTE\n         MVC   DATELCL+10(2),DAYBUF   COPY THE DAY BYTE\n* FORMAT THE TIME AND DATE IN SET CLOCK COMMAND BUFFER\nUPDT9000 EQU   *\n         ED    TIMEFMT(9),DATELCL\n         ED    DATEFMT(10),DATELCL+8\n         MVC   SETCLKDT(8),DATEFMT+2\n         MVC   SETCLKTM(8),TIMEFMT+1\n         BR    R3\n*---------------------------------------------------------------------*\n* ROUTINE: GETTZ\n* DESCRIPTION: GET THE NEW TIME ZONE FOR UPDATED TIME\n* INPUT:\n*    R2  : RETURN CONTROL\n* RETURN :\n*  TZSTMT: UPDATED CLOCKxx TIMEZONE STATEMENT FOR UPDATED TIME\n*\n*---------------------------------------------------------------------*\nGETTZ    EQU   *\n         MVC   TZSTMT(TZMDLL),TZMDL        COPY TIMEZONE STATEMENT\n         MVC   TZHRDEC(TZHRMDLL),TZHRMDL   COPY THE HOUR EDIT MODEL.\n         ZAP   GMTYTD,P0\n         ZAP   LCLYTD,P0\n         ZAP   GMTHOUR,P0\n         ZAP   LCLHOUR,P0\n         ZAP   TZDELTA,P0\n* GMT AND LOCAL TIME ARE RETRIEVED IN SUB-ROUTINE UPSETCLK.\n*\n* COPY THE HOUR AND YTD (0YYYYDDD)\n         MVC   GMTHOUR(1),DATEGMT\n         MVC   GMTYTD(4),DATEGMT+8\n         MVC   LCLHOUR(1),DATELCL\n         MVC   LCLYTD(4),DATELCL+8\n* COMPARE THE YTD\n         CP    GMTYTD,LCLYTD              COMPARE YTD\n         BE    GETT2000                   GMT DAY = LCL DAY\n         CP    GMTYTD,LCLYTD              COMPARE YTD\n         BH    GETT1000                   GMT DAY > LCL DAY\n         B     GETT1200                   OTHERWISE GMT DAY < LCL DAY\n* PROCESS GYTD > LYTD\nGETT1000 AP    GMTHOUR,P240               ADD GMT HOUR BY 24\n         B     GETT2000\n* PROCESS GYTD < LYTD\nGETT1200 AP    LCLHOUR,P240               ADD LOCAL HOUR BY 24\n         B     GETT2000\n* PROCESS GYTD = LYTD, COMPARE HOUR\nGETT2000 CP    GMTHOUR,LCLHOUR            COMPARE HOUR\n         BE    GETT5000                   GMT = LOCAL HOUR\n         CP    GMTHOUR,LCLHOUR            COMPARE HOUR\n         BH    GETT2200                   GMT > LOCAL HOUR\n         B     GETT2400                   GMT < LOCAL HOUR\n* PROCESS GMT > LOCAL HOUR\nGETT2200 MVI   TZWORD,C'W'              WEST\n         ZAP   TZDELTA,GMTHOUR\n         SP    TZDELTA,LCLHOUR\n         B     GETT3000\n* PROCESS GMT < LOCAL HOUR\nGETT2400 MVI   TZWORD,C'E'              EAST\n         ZAP   TZDELTA,LCLHOUR\n         SP    TZDELTA,GMTHOUR\n         B     GETT3000\n* FORMAT THE HOUR\nGETT3000 EQU   *\n         ED    TZHRDEC,TZDELTA           EDIT THE TZDELTA TO TZHRDEC\n         MVC   TZHOUR(2),TZHRDEC+1   COPY THE NEW HOUR IN TIMEZONE\nGETT5000 EQU   *\n         MVI   MSGID,MSG005I\n         BAL   R4,WRITELOG\n         MVI   MSGBUFLN,X'1B'\n         MVC   MSGBUFTX+8(19),TZSTMT+2\n         MVI   MSGID,MSGCUST\n         BAL   R4,WRITELOG\n         BR    R2\n*---------------------------------------------------------------------*\n* ROUTINE: GETCLKMB\n* DESCRIPTION: GET PARMLIB DATASET AND MEMBER FOR CURRENT CLOCKxx\n*  STEPS:\n*  1. FIND THE CURRENT CLOCK SUFFIX FROM ECVT/IPA\n*  2. FIND THE PARMLIB DATASET NAME CONTAINS THIS CLOCK MEMBER\n*\n* INPUT:\n*    R2  : RETURN CONTROL\n* RETURN :\n*  CLKPMMBR : the CLOCKxx member name\n*  CLKPMDSN : The PARMLIB with member name\n*---------------------------------------------------------------------*\nGETCLKMB EQU   *\n* Find CLOCKxx in current system\n         STM   R0,R15,SVLVL1        SAVE ALL REGISTERS\n         MVI   FLGFNDMB,NO          NOT FIND THE MEMBER\nGETC1000 EQU   *\n         MVC   CLKPMMBR,CLKMBNM     COPY THE INITIAL CLOCK MEMBER NAME\n         L     R4,X'10'             GET CVT\n         USING CVTMAP,R4            ADDRESSABILITY FOR CVT\n         L     R5,CVTECVT           GET ECVT\n         USING ECVT,R5              ADDRESSABILITY FOR ECVT\n         L     R6,ECVTIPA           GET ECVTIPA\n         USING IPA,R6               ADDRESSABILITY FOR IPA\n         LA    R7,IPACLOCK          LOAD THE START OF CLOCK\n         USING IPAPDE,R7            ADDRESSABILITY FOR IPAPDE\n         L     R8,IPAPDESA          CLOCK PDE (PARM DESC ELEMENT)\n         MVC   CLKPMSFX(2),0(R8)    COPY THE CLOCK MEMBER SUFFIX\n         DROP  R4,R5,R7\n         MVI   MSGID,MSGCUST\n         MVC   MSGBUFTX(35),=CL35'STZ034I The active CLOCK member is '\n         MVC   MSGBUFTX+35(8),CLKPMMBR\n         LA    R4,43\n         STC   R4,MSGBUFLN\n         BAL   R4,WRITELOG\n* the CLOCKxx is stored in CLKPMMBR\n* Find PARMLIB which contain the member CLOCKxx in current system\n         LA    R8,10                LOAD THE MAXIMUM PARMLIB CARD IMGS\n         LA    R5,IPAPLIB           LOAD THE FIRST PARMLIB CARD IMAGE\n         USING IPRMLIB,R5           MAP IT WITH IPRMLIB DSECT\nGETC2000 EQU   *                    LOOP TO SCAN ALL PARMLIBS\n         MVC   CLKPMDSN(44),IPMLDSN COPY THE CURRENT PARMLIB DSN\n         CLI   IPMLDSN,C' '         IS THE DSN EMPTY?\n         BE    GETC3400             YES, SKIP TO THE END\n         TM    IPMLLFLG,IPAPLUSE    TEST IF PARMLIB IS IN USE OR NOT.\n         BNO   GETC2500             NO, SKIP THIS PARMLIB CARD IMAGE\n*\n         MVI   MSGID,MSGCUST\n         MVC   MSGBUFTX(34),=CL34'STZ035I Search active clock member'\n         MVC   MSGBUFTX+34(19),=CL19' in system PARMLIB '\n         MVC   MSGBUFTX+53(44),CLKPMDSN\n         LA    R4,97\n         STC   R4,MSGBUFLN\n         BAL   R4,WRITELOG\n*\n* CALL DYNALC TO ALLOCATE THIS PARMLIB\n         MVI   DSDISP,DISPSHR       TELL ALLOCAT DSN WITH SHR\n         LA    R4,CLKPMDSN          LOAD THE DATASET NAME ADDRESS\n         BAL   R3,DYNALC            CALL DYNALC TO ALLOCATE THE DATASET\n         CLI   RETCODE,X'00'        RETURN CODE IS 0?\n         BNE   GETCERR\n         MVC   PRMDDNAM(8),ALCDD         SAVE THE DDNAME\n         L     R4,PRMDDLOC\n         MVC   0(8,R4),ALCDD        UPDATE THE DCB WITH DDNAME\n* CALL BLDL TO LIST THE MEMBER INFORMATION\n         OPEN  PRMLIB,MF=(E,PRMOPLST)\n         LA    R4,1                 SET THE NUMBER OF MEMBERS TO 1\n         STH   R4,BLDMBNB\n         LA    R4,32                SET THE LENGTH OF BUFFERS TO 32\n         STH   R4,BLDMBLN\n         MVC   BLDMBNM(8),CLKPMMBR  COPY THE MEMBER NAME\n         LA    R4,PRMLIB\n         LA    R7,BLDLBUF\n         BLDL  (R4),(R7)\n         LTR   R15,R15              RETURN CODE IS 0?\n         BNE   GETC2200             NON-ZERO, NOT FOUND IN THIS PARMLIB\n         MVI   FLGFNDMB,YES         FIND THE MEMBER\n* UNALLOCATE THE PARMLIB DDNAME\nGETC2200 EQU   *\nPRMDDEOF EQU   *\n         CLOSE PRMLIB,MF=(E,PRMOPLST)\n         LA    R4,PRMDDNAM          LOAD THE DD NAME TO R4\n         BAL   R3,DYNUNALC          CALL DYNAMIC UNALLOCATE\n         CLI   FLGFNDMB,YES         FIND THE PARMLIB WITH MEMBER?\n         BE    GETC3000             YES, JUMP OUT OF THE LOOP\n         MVI   MSGID,MSGCUST\n         MVC   MSGBUFTX(34),=CL34'STZ036W Active clock member is not'\n         MVC   MSGBUFTX+34(19),=CL19' in system PARMLIB '\n         MVC   MSGBUFTX+53(44),CLKPMDSN\n         LA    R9,97\n         STC   R9,MSGBUFLN\n         BAL   R4,WRITELOG\nGETC2500 EQU   *\n         LA    R5,64(0,R5)          GET NEXT PARMLIB CARD IMAGE\n         BCT   R8,GETC2000          SCAN NEXT PARMLIB CARD IMAGE\n         CLI   FLGFNDMB,YES         FIND THE PARMLIB WITH MEMBER?\n         BNE   GETC7000             NO, SHOW ERROR\n* PREPARE THE DATASET NAME+ MEMBER NAME\nGETC3000 EQU   *\n         MVI   MSGID,MSGCUST\n         MVC   MSGBUFTX(36),=CL36'STZ037I Active clock member is found'\n         MVC   MSGBUFTX+36(19),=CL19' in system PARMLIB '\n         MVC   MSGBUFTX+55(44),CLKPMDSN\n         LA    R9,99\n         STC   R9,MSGBUFLN\n         BAL   R4,WRITELOG\n         DROP  R5,R6\n         LA   R6,CLKPMDSN+43     MOVE TO THE END OF DATASET BUFFER\n         LA   R7,44              LOAD MAXMIMUM LENGTH OF THE BUFFER\nGETC3100 EQU  *\n         CLI  0(R6),C' '         IS THIS SPACE?\n         BNE  GETC3200           NO, OUT OF LOOP\n         BCTR R6,0               MOVE TO PREVIOUS CHAR\n         BCT  R7,GETC3100        TEST THE PREVIOUS CHAR\n         BE   GETCERR            BUFFER IS FULL OF SPACE!\nGETC3200 EQU  *\n         MVI  1(R6),C'('          (\n         MVC  2(8,R6),CLKPMMBR    COPY THE MEMBER NAME\n         LA   R6,9(0,R6)\n         LA   R7,8\nGETC3300 EQU   *\n         CLI  0(R6),C' '         IS THIS SPACE?\n         BNE  GETC4000           NO, OUT OF LOOP\n         BCTR R6,0               MOVE TO PREVIOUS CHAR\n         BCT  R7,GETC3300        TEST THE PREVIOUS CHAR\n* END OF SEARCH\nGETC3400 EQU  *\n         MVI   MSGID,MSGCUST\n         MVC   MSGBUFTX(36),=CL36'STZ038I End of system PARMLIB search'\n         LA    R9,36\n         STC   R9,MSGBUFLN\n         BAL   R4,WRITELOG\n         BE   GETC7000\nGETC4000 EQU   *\n         MVI  1(R6),C')'          )\n*\n         MVI   MSGID,MSGCUST\n         MVC   MSGBUFTX(31),=CL31'STZ021I The active clock member'\n         MVC   MSGBUFTX+31(19),=CL19' in your system is '\n         MVC   MSGBUFTX+50(44),CLKPMDSN\n         LA    R9,94\n         STC   R9,MSGBUFLN\n         BAL   R4,WRITELOG\n         B     GETC9000\nGETC7000 EQU   *\n         MVI   MSGID,MSG033I\n         BAL   R4,WRITELOG\n         MVI   RETCODE,X'0C'     SET THE RETURN CODE 12\n         B     GETC9000\nGETCERR  EQU   *\n         MVI   RETCODE,X'0C'     SET THE RETURN CODE 12\nGETC9000 EQU   *\n         LM    R0,R15,SVLVL1        RESTORE ALL REGISTERS\n         BR    R2\n*---------------------------------------------------------------------*\n* ROUTINE: TSTCLKMB\n* DESCRIPTION: GET PARMLIB DATASET AND MEMBER FOR CURRENT CLOCKxx\n*  STEPS:\n*  3. ALLOC THE CLOCKxx MEMBER WITH READ\n*  4. OPEN THE CLOCKxx MEMBER\n*  5. READ THE CLOCKxx MEMBER\n*  6. CLOSE THE CLOCKxx MEMBER\n*  7. COMPARE TIMEZONE STATEMENT WITH NEW TIMEZONE STATEMENT\n*     UPDATE THE FLAG FLGUPCLK\n* INPUT:\n*    R2  : RETURN CONTROL\n* RETURN\n*    FLGUPCLK: YES OR NO\n*---------------------------------------------------------------------*\nTSTCLKMB EQU   *\n         MVI   MSGID,MSGCUST\n         MVC   MSGBUFTX(35),=CL35'STZ030I Test if required to update '\n         MVC   MSGBUFTX+35(44),CLKPMDSN\n         LA    R9,79\n         STC   R9,MSGBUFLN\n         BAL   R4,WRITELOG\n* READ CLOCKxx in current system\n* DYNAMICALLY ALLOCATE CLOCK MEMBER\n         L     R8,DRECAREA\n         USING DTABLE,R8\n         MVI   DSDISP,DISPSHR       TELL ALLOCAT DSN WITH SHR/READ\n         LA    R4,CLKPMDSN          LOAD THE DATASET NAME ADDRESS\n         BAL   R3,DYNALC            CALL DYNALC TO ALLOCATE THE DATASET\n         CLI   RETCODE,X'00'        RETURN CODE IS 0?\n         BNE   TSTCAERR\n         MVC   CLRDDNAM(8),ALCDD    SAVE THE DDNAME\n         L     R4,CLRDDLOC          LOAD DD NAME ADDRESS IN DCB\n         MVC   0(8,R4),ALCDD        UPDATE DDNAME IN DCB\n* OPEN THE DDNAME\n         OPEN  (CLRDCB,(INPUT)),MODE=31,MF=(E,CLROPLST)\n         TM    CLRDCB+(DCBOFLGS-IHADCB),DCBOFOPN OPEN SUCCESS?\n         BNO   TSTCOERR             NO, JUMP TO ERROR PROCESSING\n         MVI   MSGID,MSGCUST\n         MVC   MSGBUFTX(37),=CL37'STZ031I Current statements in member'\n         MVC   MSGBUFTX+37(44),CLKPMDSN\n         LA    R9,81\n         STC   R9,MSGBUFLN\n         BAL   R4,WRITELOG\n         LA    R6,CLKMBBUF          LOAD THE RECORD BUFFER ADDRESS\n         XC    CLKMBCTR,CLKMBCTR\n         XC    CLKMBRTZ,CLKMBRTZ\n         XR    R5,R5                COUNTER\n         MVI   MSGID,MSGCUST\nTSTC1000 EQU   *\n         GET   CLRDCB,0(R6)\n* SHOW CURRENT TIMEZONE STATEMENT\n         MVC   MSGBUFTX+8(80),0(R6)\n         LA    R7,88\n         STC   R7,MSGBUFLN\n         BAL   R4,WRITELOG\n* TEST THE RECORD\n         CLC   0(9,R6),TZKEYW       TEST THIS IS TIMEZONE STATEMENT\n         BNE   TSTC3000\n         LA    R9,8(0,R6)           LOAD THE TIMEZONE STATEMENT\n         LA    R7,72(0,R6)          LOAD THE STATEMENT END\nTSTC2000 EQU   *                    SKIP ALL LEADING SPACES\n         LA    R9,1(0,R9)           MOVE TO NEXT BYTE\n         CR    R9,R7\n         BNL   TSTCTZER\n         CLI   0(R9),C' '\n         BE    TSTC2000\n* TEST THE STATMENT\n         STH   R5,CLKMBRTZ          RECORD LOCATION OF THE STATEMENT\n         CLC   0(4,R9),TZWORD       JUST COMPARE TZWORD AND HOUR\n         BE    TSTC3000             IF THEY ARE THE SAME, SKIP IT\n* UPDATE THE STATEMENT\n         MVC   0(4,R9),TZWORD       UPDATE TIMEZONE WORD AND HOUR\n         MVI   FLGUCLKM,YES         UPDATE  FLAG TO YES\n*\n* CONTINUE UNTIL EOF\nTSTC3000 EQU   *\n         LA    R5,1(0,R5)           INCREADE RECORD COUNTER\n         LA    R9,CLKMBMAX\n         CR    R5,R9\n         BNL   TSTCRCER             JUMP TO ERROR PROCESSING\n         LA    R6,80(0,R6)          MOVE TO NEXT BUFFER\n         B     TSTC1000\nTSTCRCER EQU   *\n         MVI   MSGID,MSG010I\n         BAL   R4,WRITELOG\n         MVI   RETCODE,X'0C'\n         B     CLKDDEOF\nTSTCTZER EQU   *\n         MVI   MSGID,MSG011I\n         BAL   R4,WRITELOG\n         MVI   RETCODE,X'0C'\n         B     CLKDDEOF\nCLKDDERR EQU   *\n         MVI   RETCODE,X'0C'\n         MVI   MSGID,MSG012I\n         BAL   R4,WRITELOG\nCLKDDEOF EQU   *\n         STH   R5,CLKMBCTR\n         CLOSE CLRDCB,MODE=31,MF=(E,CLROPLST)\n         LA    R4,CLRDDNAM          LOAD THE DD NAME TO R4\n         BAL   R3,DYNUNALC          CALL DYNAMIC UNALLOCATE\n         B     TSTC9000\nTSTCOERR EQU   *\n         MVI   RETCODE,X'0C'\n         MVI   MSGID,MSG013I\n         BAL   R4,WRITELOG\n         B     TSTC9000\nTSTCAERR EQU   *\n         MVI   RETCODE,X'0C'\n         MVI   MSGID,MSG014I\n         BAL   R4,WRITELOG\n         B     TSTC9000\nTSTC9000 EQU   *\n         DROP  R8\n         BR    R2\n*---------------------------------------------------------------------*\n* ROUTINE: UPDCLKMB\n* DESCRIPTION: GET PARMLIB DATASET AND MEMBER FOR CURRENT CLOCKxx\n*  STEPS:\n*  9. ALLOC THE CLOCKXX MEMBER WITH WRITE\n* 10. OPEN THE CLOCKXX MEMBER\n* 11. WRITE THE CLOCKXX MEMBER\n* 12. CLOSE THE CLOCKXX MEMBER\n* INPUT:\n*    R2  : RETURN CONTROL\n* RETURN\n*---------------------------------------------------------------------*\nUPDCLKMB EQU   *\n         CLI   FLGUCLKM,YES       NEED TO UPDATE THE CLOCK MEMBER?\n         BE    UPDC0100           YES, THEN UPDATE\n         MVI   MSGID,MSG015I\n         BAL   R4,WRITELOG\n         B     UPDC9000\n*\n* write CLOCKxx in current system\n* DYNAMICALLY ALLOCATE CLOCK MEMBER\nUPDC0100 EQU   *\n         MVI   MSGID,MSG016I\n         BAL   R4,WRITELOG\n         MVI   DSDISP,DISPSHR       TELL ALLOCAT DSN WITH OLD/WRITE\n         LA    R4,CLKPMDSN          LOAD THE DATASET NAME ADDRESS\n         BAL   R3,DYNALC            CALL DYNALC TO ALLOCATE THE DATASET\n         CLI   RETCODE,X'00'        RETURN CODE IS 0?\n         BNE   UPDCAERR\n         MVC   CLWDDNAM(8),ALCDD    SAVE THE DDNAME\n         L     R4,CLWDDLOC          LOAD DD NAME ADDRESS IN DCB\n         MVC   0(8,R4),ALCDD        UPDATE DDNAME IN DCB\n* OPEN THE DDNAME\n         OPEN  (CLWDCB,(OUTPUT)),MODE=31,MF=(E,CLWOPLST)\n         TM    CLWDCB+(DCBOFLGS-IHADCB),DCBOFOPN OPEN SUCCESS?\n         BNO   UPDCOERR             NO, JUMP TO ERROR PROCESSING\n         L     R8,DRECAREA          LOAD THE DTABLE DSECT ADDRESS\n         USING DTABLE,R8\n         MVI   MSGID,MSG009I\n         BAL   R4,WRITELOG\n         LA    R6,CLKMBBUF        LOAD THE RECORD BUFFER ADDRESS\n         LH    R5,CLKMBCTR          LOAD THE RECORD COUNTER\n         MVI   MSGID,MSGCUST\nUPDC1000 EQU   *\n* SHOW NEW TIMEZONE STATEMENT\n         LA    R7,88\n         STC   R7,MSGBUFLN\n         MVC   MSGBUFTX+8(80),0(R6)\n         BAL   R4,WRITELOG\n* SAVE THE RECORD\n         PUT   CLWDCB,0(R6)         SAVE CURRENT RECORD\n         LA    R6,80(0,R6)          MOVE TO NEXT RECORD\n         BCT   R5,UPDC1000\n         CLOSE CLWDCB,MODE=31,MF=(E,CLWOPLST)\n         LA    R4,CLWDDNAM          LOAD THE DD NAME TO R4\n         BAL   R3,DYNUNALC          CALL DYNAMIC UNALLOCATE\n         MVI   MSGID,MSGCUST\n         MVC   MSGBUFTX(37),=CL37'STZ042I Following member is updated:'\n         MVC   MSGBUFTX+37(44),CLKPMDSN\n         LA    R9,81\n         STC   R9,MSGBUFLN\n         BAL   R4,WRITELOG\n         B     UPDC9000\nUPDCOERR EQU   *\n         MVI   RETCODE,X'0C'\n         MVI   MSGID,MSG018I\n         BAL   R4,WRITELOG\n         B     TSTC9000\nUPDCAERR EQU   *\n         MVI   RETCODE,X'0C'\n         MVI   MSGID,MSG019I\n         BAL   R4,WRITELOG\n         B     TSTC9000\nUPDC9000 EQU   *\n         DROP  R8\n         BR    R2\n*---------------------------------------------------------------------*\n* ROUTINE: DYNUNALC\n* DESCRIPTION: DYNAMICALLY UNALLOCATE THE DDNAME\n* INPUT:\n*  R3      : RETURN CONTROL\n*  R4      : DDNAME TO BE UNALLOCATED\n*\n*---------------------------------------------------------------------*\nDYNUNALC EQU  *\n         STM  R0,R15,SVLVL2      SAVE ALL REGISTERS\n         MVC  TUUALC(TUUALCML),TUUALCM COPY UNALLOCATE TEXT UNITS\n         MVC  UALCDD(8),0(R4)     COPY THE DATASET NAME\n         LA 0,50                 AMOUNT OF STORAGE REQUIRED FOR THIS\n         GETMAIN R,LV=(0)            THE STORAGE NECESSARY FOR THE RE\n         LR R8,R1                SAVE THE ADDRESS OF THE RETURNED STO\n         USING S99RBP,R8         ESTABLISH ADDRESSABILITY FOR S99RBP\n         LA R4,S99RBPTR+4        POINT FOUR BYTES BEYOND START OF S99\n         USING S99RB,R4          ESTABLISH ADDRESSABILITY FOR RB DSEC\n         ST R4,S99RBPTR          MAKE 'RBPTR' POINT TO RB.\n         OI S99RBPTR,S99RBPND    TURN ON THE HIGH-ORDER BIT IN RBPTR.\n         XC S99RB(RBLEN),S99RB   ZERO OUT 'RB' ENTIRELY.\n         MVI S99RBLN,RBLEN       PUT THE LENGTH OF 'RB' IN ITS LENGTH\n         MVI S99VERB,S99VRBUN    SET VERB CODE FIELD TO UNALLOCATE\n         LA R5,S99RB+RBLEN       POINT PAST 'RB' TO START OF TUP LIST\n         USING S99TUPL,R5        ESTABLISH ADDRESSABILITY FOR TEXT UN\n         ST R5,S99TXTPP          STORE ADDRESS OF TUP LIST IN THE RB.\n* SETUP RETURN DDNAME TEXT UNIT\n         LA R6,TUUALC            GET ADDRESS OF FIRST TEXT UNIT\n         ST R6,S99TUPTR          AND STORE IN TUP LIST.\n* SETUP LAST TEXT UNIT\n         OI S99TUPTR,S99TUPLN    TURN ON HIGH-ORDER BIT IN LAST TUP L\n* INVOKE DYNALLOC TO PROCESS THE REQUEST\n         LR R1,R8                PUT ADDRESS OF REQUEST BLOCK POINTER\n         DYNALLOC\n         LTR R15,R15\n         BZ DYNA9000\n         STC R15,RETCODE         SAVE THE RETURN CODE\n         B  DYNA9000\nDYNUERR  EQU *\n         STC R15,RETCODE         SAVE THE RETURN CODE\n         MVI MSGID,MSG020I\n         BAL R4,WRITELOG\n         MVI RETCODE,X'0C'       SET THE RETURN CODE 12.\nDYNU9000 EQU *\n         LM  R0,R15,SVLVL2      SAVE ALL REGISTERS\n         DROP R4,R5,R8\n         BR    R3\n*---------------------------------------------------------------------*\n* ROUTINE: DYNALC\n* DESCRIPTION: DYNAMICALLY ALLOCATE THE DATASET\n* INPUT:\n*  R3      : RETURN CONTROL\n*  R4      : ADDRESS OF DATASET NAME: MAXIMUM 44 BYTES\n*  DSNDISP : DATASET DISPOSITION: DISPOLD|DISPMOD|DISPNEW|DISPSHR\n*\n*---------------------------------------------------------------------*\nDYNALC   EQU  *\n         STM  R0,R15,SVLVL2      SAVE ALL REGISTERS\n         LR   R9,R4              KEEP A COPY OF DATASET NAME\n         XR   R5,R5\n         ICM  R5,1,DSDISP        COPY DSDISP\n         MVC  TUALC(TUALCML),TUALCM INITIALIZE TEXT UNIT CONTENTS\n         MVC  DSNAME(44),0(R4)   COPY THE DATASET NAME\n         STCM R5,1,DSDISP        RESTORE DISP\n*\n* GET THE ACTUAL LENGTH OF DATASET BY REMOVE TRAILING SPACES.\n         LA   R4,DSNAME+43       MOVE TO THE END OF DATASET BUFFER\n         LA   R5,44              LOAD MAXMIMUM LENGTH OF THE BUFFER\nDYNA1000 EQU  *\n         CLI  0(R4),C' '         IS THIS SPACE?\n         BNE  DYNA1500           NO, OUT OF LOOP\n         BCTR R4,0               MOVE TO PREVIOUS CHAR\n         BCT  R5,DYNA1000        TEST THE PREVIOUS CHAR\n         BE   DYNAERR            BUFFER IS FULL OF SPACE!\nDYNA1500 EQU  *\n         LA   R5,1(0,R5)\n         STH  R5,DSNAMEL         UPDATE THE DATASET LENGTH\n* TEST IF THERE IS A MEMBER NAME IN DATASET NAME\nDYNA2000 EQU  *\n         CLI  0(R4),C')'         THE LAST BYTE IS ')' ?\n         BNE  DYNA3000           NO, NORMAL DATASET\n         LA   R6,0               MEMBER NAME LENGTH\n         LA   R8,8               MAXIMUM LENGTH\nDYNA2200 EQU  *\n         BCTR R4,0               MOVE TO PREVIOUS LOCATION\n         CLI  0(R4),C'('         BEGIN OF MEMBER?\n         BE   DYNA2400           YES, PROCESS THE MEMBER NAME\n         LA   R6,1(0,R6)         ADD MEMBER LENTH BY 1\n         CR   R6,R8              EXCEED 8?\n         BNH  DYNA2200           NO, CONTINUE TO TEST NEXT CHAR\n         B    DYNAERR            MEMBER NAME LENGTH EXCEED 8.\nDYNA2400 EQU  *\n* UPDATE THE DATASET NAME WITHOUT MEMBER NAME\n         SR   R5,R6\n         BCTR R5,0\n         BCTR R5,0\n         BCTR R5,0\n         STH  R5,DSNAMEL         UPDATE THE DATASET LENGTH\n* COPY THE MEMBER NAME TO MEMBER TEXT UNIT\n         STH  R6,ALCMEML         SAVE THE MEMBER NAME LENGTH\n         LR   R5,R6\n         BCTR R5,0\n         LA   R7,1(0,R4)         LOAD THE MEMBER ADDRESS\n         LA   R6,ALCMEM\n         EX   R5,MVCREC          COPY THE MEMBER NAME\n* PROCESS DYNAMIC ALLICATION PARAMETER LISTS.\n* PREPARE REQUEST BLOCK\nDYNA3000 EQU  *\n         LA R0,80                AMOUNT OF STORAGE REQUIRED FOR THIS\n         GETMAIN R,LV=(R0),LOC=BELOW   STORAGE NECESSARY FOR THE RE\n         LR R8,R1                SAVE THE ADDRESS OF THE RETURNED STO\n         USING S99RBP,R8         ESTABLISH ADDRESSABILITY FOR S99RBP\n         LA R4,S99RBPTR+4        POINT FOUR BYTES BEYOND START OF S99\n         USING S99RB,R4          ESTABLISH ADDRESSABILITY FOR RB DSEC\n         ST R4,S99RBPTR          MAKE 'RBPTR' POINT TO RB.\n         OI S99RBPTR,S99RBPND    TURN ON THE HIGH-ORDER BIT IN RBPTR.\n         XC S99RB(RBLEN),S99RB   ZERO OUT 'RB' ENTIRELY.\n         MVI S99RBLN,RBLEN       PUT THE LENGTH OF 'RB' IN ITS LENGTH\n         MVI S99VERB,S99VRBAL    SET THE VERB CODE FIELD TO ALLOCATIO\n         LA R5,S99RB+RBLEN       POINT PAST 'RB' TO START OF TUP LIST\n         USING S99TUPL,R5        ESTABLISH ADDRESSABILITY FOR TEXT UN\n         ST R5,S99TXTPP          STORE ADDRESS OF TUP LIST IN THE RB.\n* SETUP DATASET NAME TEXT UNIT\n         LA R6,TUALC             GET ADDRESS OF DSN    TEXT UNIT\n         ST R6,S99TUPTR          AND STORE IN TUP LIST.\n         LA R5,S99TUPL+4         GET ADDRESS OF NEXT TUP LIST ENTRY.\n* SETUP MEMBER  NAME TEXT UNIT\n         LH R6,ALCMEML           TEST IF THE MEMBER LENGTH IS 0?\n         LTR R6,R6\n         BZ DYNA3200             YES, SKIP THE MEMBER TEXT UNIT\n         LA R6,TUAMEM             GET ADDRESS OF DSN    TEXT UNIT\n         ST R6,S99TUPTR          AND STORE IN TUP LIST.\n         LA R5,S99TUPL+4         GET ADDRESS OF NEXT TUP LIST ENTRY.\nDYNA3200 EQU  *\n* SETUP STATUS TEXT UNIT\n         LA R6,TUASTS            GET ADDRESS OF STATUS TEXT UNIT\n         ST R6,S99TUPTR          AND STORE IN TUP LIST.\n         LA R5,S99TUPL+4         GET ADDRESS OF NEXT TUP LIST ENTRY.\n* SETUP RETURN DDNAME TEXT UNIT\n         LA R6,TUARTDD           GET ADDRESS OF STATUS TEXT UNIT\n         ST R6,S99TUPTR          AND STORE IN TUP LIST.\n* SETUP LAST TEXT UNIT\n         OI S99TUPTR,S99TUPLN    TURN ON HIGH-ORDER BIT IN LAST TUP L\n* INVOKE DYNALLOC TO PROCESS THE REQUEST\n         LR R1,R8                PUT ADDRESS OF REQUEST BLOCK POINTER\n         DYNALLOC\n         LTR R15,R15             ALLOCATE SUCCESSFUL?\n         BZ  DYNA9000            YES, RETURN TO THE CALLER.\n         DROP R4,R5,R8\nDYNAERR  EQU *                   ERROR PROCESSING\n         STC R15,RETCODE         SAVE THE RETURN CODE\n         MVI MSGID,MSG021I\n         BAL R4,WRITELOG\nDYNA9000 EQU *\n         LM  R0,R15,SVLVL2      SAVE ALL REGISTERS\n         BR    R3\n*======================================================================\n*---------------------------------------------------------------------*\n* ROUTINE: WRITELOG\n* DESCRIPTION: WRITE LOG TO SYSPRINT DD, OR WTO MESSAGE IF NO SYSPRINT\n* INPUT:\n*    R4  : RETURN CONTROL\n*  MSDID : MESSAGE ID TO BE DISPLAYED\n*        : 00 FOR INITIALIZE, OPEN SYSPRINT\n*        : FF FOR CLEAN UP, CLOSE  SYSPRINT\n* RETURN\n*---------------------------------------------------------------------*\nWRITELOG EQU   *\n         STM  R0,R15,SVLVL3      SAVE ALL REGISTERS\n         CLI  MSGID,MSGINIT      INITIALIZE THE LOG?\n         BE   WTLG5000\n         CLI  MSGID,MSGTERM      INITIALIZE THE LOG?\n         BE   WTLG6000\n         CLI  MSGID,MSGCUST      MESSAGE IS PROVIDED IN MESSAGE BUFFER?\n         BE   WTLG4000\n* SEARCH MESSAGE INDEX FOR GIVEN MESSAGE ID IN MSGID\n         LA   R5,MSGIDX-5        LOAD THE START OF THE TABLE\nWTLG1000 EQU  *\n         LA   R5,5(0,R5)         MOVE TO NEXT INDEX RECORD\n         CLC  0(1,R5),MSGID      COMPARE THE MESSAGE WITH GIVEN ID\n         BE   WTLG2000\n         CLI  0(R5),MSGIXEND     GET THE END OF THE TABLE?\n         BNE  WTLG1000           NO, CHECK NEXT RECORD\n         B    WTLG9000           YES, SHOW ERROR: NOT FIND MESSAGE\n* PROCESS MESSAGE ID\nWTLG2000 EQU  *\n         XR   R7,R7              CLEAR R7\n         ICM  R7,15,1(R5)        LOAD THE MESSAGE ADDRESS\n         LH   R5,0(R7)           LOAD THE MESSAGE LENGTH\n         LA   R7,2(0,R7)         LOAD THE MESSAGE BODY POSITION\n         STC  R5,MSGBUFLN        SAVE THE MESSAGE LENGTH TO MSGBUFLN\n         BCTR R5,0\n         LA   R6,MSGBUFTX        COPY TO MESSAGE BUFFER\n         EX   R5,MVCREC          COPY MESSAGE TO SYSPRINT MSG BUFFER\n* PROCESS CUSTOMIZED MESSAGE\nWTLG4000 EQU  *\n* CLEAN ALL REST OF BUFFER WITH SPACES\n         XR   R5,R5\n         ICM  R5,1,MSGBUFLN      LOAD MESSAGE BUFFER LENGTH\n         LA   R7,MSGBUFTX        LOAD THE MESSAGE ADDRESS\n         AR   R7,R5              MOVE TO THE END OF MESSAGE\n         MVI  0(R7),C' '         SET BYTE AFTER LAST AS SPACE\n         LR   R6,R5\n         LA   R5,131             MAXIMUM RECORD LENGTH\n         SR   R5,R6              GET THE RECORD REST LENGTH\n         BCTR R5,0\n         BCTR R5,0\n         LR   R6,R7              COPY THE END POSITION\n         LA   R6,1(0,R6)         MOVE TO NEXT BYTE\n         EX   R5,MVCREC          CLEAN REST BUFFER WITH SPACES.\n* TEST IF SYSPRINT PROVIDED\n         CLI  FLSYSPRT,YES       IS SYSPRINT PROVIDED?\n         BNE  WTLG4500           NO, USE WTO MESSAGE\n* SYSPRINT PROVIDED\n         CP   MSGCTR,P0          PAGE BREAKER?\n         BE   WTLG4100\n         CP   MSGCTR,P50         PAGE BREAKER?\n         BNE  WTLG4200\n         ZAP  MSGCTR,P0          RESET THE COUNTER\n* LINE BREAKER\nWTLG4100 MVI  MSGBUFCC,C'1'      SET CC BYTE TO SPACE\n         B    WTLG4300\n* NORMAL LINES\nWTLG4200 EQU  *\n         MVI  MSGBUFCC,C' '\nWTLG4300 EQU  *\n         AP   MSGCTR,P1\n         PUT  SPRDCB,MSGBUFCC    WRITE THE MESSAGE TO SYSPRINT\n         B    WTLG9000\nWTLG4500 EQU  *\n         XR   R5,R5\n         ICM  R5,1,MSGBUFLN      LOAD MESSAGE BUFFER LENGTH\n         STH  R5,MSGBUF          STORE THE MESSAGE LENGTH\n         LA   R6,MSGBUF\n         WTO  TEXT=(R6),MF=(E,WTOLIST)\n         B    WTLG9000\n* INITIALIZE\nWTLG5000 EQU  *\n         MVI  FLSYSPRT,NO\n         OPEN (SPRDCB,(OUTPUT)),MODE=31,MF=(E,SPROPLST)\n         LTR  R15,R15\n         BNZ  WTLG5500\n         MVI  FLSYSPRT,YES\n         ZAP  MSGCTR,P0          RESET THE MESSAGE COUNTER\nWTLG5500 B    WTLG9000\n* CLEAN\nWTLG6000 EQU  *\n         CLI  FLSYSPRT,YES\n         BNE  WTLG9000\n         CLOSE SPRDCB,MODE=31,MF=(E,SPROPLST)\nWTLG9000 EQU  *\n         LM  R0,R15,SVLVL3      SAVE ALL REGISTERS\n         BR    R4\n*---------------------------------------------------------------------*\n* ROUTINE: SHOWHELP\n* DESCRIPTION: SHOW HELP MESSAGES\n* INPUT:\n*    R3  : RETURN CONTROL\n* RETURN\n*---------------------------------------------------------------------*\nSHOWHELP EQU   *\n         LA    R5,200         THE FIRST HELP MESSAGE ID\n         LA    R6,MSGHLPE     THE LAST HELP MESSAGE ID\n         SR    R6,R5          TOTAL MESSAGES\n         LA    R6,1(0,R6)     ADD 1 FOR TOTAL NUMBER OF MESSAGES\nSHLP1000 EQU   *\n         STC   R5,MSGID       SET CURRENT MESSAGE ID\n         BAL   R4,WRITELOG    CALL WRITELOG TO SHOW CURRENT MESSAGE ID\n         LA    R5,1(0,R5)     MOVE TO NEXT MESSAGE ID\n         BCT   R6,SHLP1000\n         BR    R3\n*---------------------------------------------------------------------*\n*  DATA  AREAS                                                        *\n*---------------------------------------------------------------------*\n*  LIST FORMS OF MVS MACROS                                           *\n*---------------------------------------------------------------------*\nMODESUP  MODESET MODE=SUP,KEY=ZERO,MF=L    ;SUPERVISOR STATE\nMODEPROB MODESET MODE=PROB,KEY=NZERO,MF=L  ;PROBLEM STATE (NORMAL)\nMGCAREA  MGCRE   MF=L                      ;MGCRE\n*---------------------------------------------------------------------*\n*  MVC INSTRUCTIONS FOR DATA STORAGE                                  *\n*---------------------------------------------------------------------*\nMVCREC   MVC   0(0,R6),0(R7)      ;COPY RECORD FROM R7 to R6,length R5\nWTOMDL   WTO   TEXT=,MF=L\nWTOMDLL  EQU   *-WTOMDL           ;LENGTH OF WTO MODEL\n*---------------------------------------------------------------------*\n* SET CLOCK COMMAND MODEL\nSETCLKC  DS    0F\n         DC    AL2(SETCLKCL)\nSETCLKT  DC    C'SET DATE=YYYY.DDD,CLOCK=HH:MM:SS'\nSETCLKL  EQU   *-SETCLKC          ; PATTERN LENGTH\nSETCLKCL EQU   *-SETCLKT          ; SET CLOCK COMMAND LENGTH\n* CONSTANT PACKET NUMBERS\nP590     DC    PL2'590'      MINUTE AND SECOND IN 59\nP240     DC    PL2'240'      HOURS IN 24\nP50      DC    PL2'50'       PAGE BREAKER LINES\nP10      DC    PL2'10'       1 IN HOUR/MINUTE/SECOND/SECOND/100 PACKED\nP1       DC    PL1'1'\nP0       DC    PL1'0'\n* FLAG OPTIONS: YES OR NO\nYES      EQU   X'01'\nNO       EQU   X'00'\n* DATE FORMAT IN SET CLOCK COMMAND\nDATEMDL  DC    XL10'F021202020204B202020'     0YYYY.DDD\n* TIME FORMAT IN SET CLOCK COMMAND\nTIMEMDL  DC    XL9'F021204B20204B2020'        HH.MM.SS\nDATEMDLL EQU   *-DATEMDL\n*\n* HOUR FORMAT IN CLOCKXX STATEMENT\nTZHRMDL  DC    XL4'F0212020'\nTZHRMDLL EQU   *-TZHRMDL\n* CLOCKxx TIME ZONE STATEMENT MODEL\nTZMDL    DC    0D\n         DC    AL2(TZMDLTL)                   LENGTH OF THE STATEMENT\nTZMDLT   DC    C'TIMEZONE W.00.00.00'         STATEMENT\nTZMDLTL  EQU   *-TZMDLT                       STATEMENT LENGTH\nTZMDLL   EQU   *-TZMDL                        TIMEZONE MODEL LENGTH\n*\nCLKMBNM  DC    CL8'CLOCK00 '\n*\n* DYNAMIC ALLOCATION STORAGE\n* REQUEST BLOCK LENGTH\nRBLEN    EQU (S99RBEND-S99RB)\n* DATASET DISPOSITIONS\nDISPOLD  EQU X'01'\nDISPMOD  EQU X'02'\nDISPNEW  EQU X'04'\nDISPSHR  EQU X'08'\n* TEXT UNIT FOR DATASET NAME ALLOCATION: RETURN DD NAME\n* ALLOCATE UNIT TEXT MODEL\nTUALCM   DS 0D\n         DC AL2(DALDSNAM)        TEXT UNIT OF DATASET NAME\n         DC XL2'0001'            # MUST BE 1\n         DC XL2'002C'            DATASET NAME LENGTH (44)\n         DC CL44' '              DATASET NAME\n         DC AL2(DALRTDDN)                     RETURN DD NAME\n         DC XL2'0001'\n         DC XL2'0008'\n         DC CL8'        '                     DD NAME\n         DC AL2(DALMEMBR)        OPTIONAL MEMBER NAME FOR PDS\n         DC XL2'0001'\n         DC XL2'0000'            DEFAULT MEMBER LENGTH IS 0: NO MEMBER\n         DC CL8'        '                     DD NAME\n         DC AL2(DALSTATS)        TEXT UNIT OF DATSET STATUS\n         DC XL2'0001'            #   MUST BE 1\n         DC XL2'0001'            LEN MUST BE 1\n         DC XL1'08'              PARM: 01-OLD, 02-MOD, 04-NEW, 08-SHARE\nTUALCML  EQU  *-TUALCM           THE LENGTH OF TEXT UNIT MODEL\n         SPACE\n* UNALLOCATE UNIT TEXT MODEL; BY DD NAME\nTUUALCM  DS 0D\nTUUALCDD DC AL2(DUNDDNAM)        UNALLOCATE BY DD NAME\n         DC XL2'0001'            #MUST BE 1\n         DC XL2'0008'            LENGTH OF THE DDNAME\n         DC CL8'        '        DD NAME\nTUUALCML EQU *-TUUALCM\n*---------------------------------------------------------------------*\n* CONSTANT DCB/DCBE/OPENLIST\n*---------------------------------------------------------------------*\n* PARMLIB CONSTANT DCB/DCBE/OPENLIST\n*---------------------------------------------------------------------*\nCPRMLIB  DCB   DSORG=PO,                                               X\n               MACRF=R,                                                X\n               DDNAME=&INTDDNM,                                        X\n               EODAD=PRMDDEOF,                                         X\n               SYNAD=PRMDDEOF\nCPRMLIBL EQU   *-CPRMLIB               LENGTH OF SYSPRINT DCE\n* PARMLIB  OPEN LIST FORM\nCPRMOPL  OPEN  CPRMLIB,MF=L\nCPRMOPLL EQU   *-CPRMOPL               LENGTH OF THE OPENLIST\n*---------------------------------------------------------------------*\n* CCLRDCB  CONSTANT DCB/DCBE/OPENLIST\n* CCLRDCB: CONSTANT DCB FOR CLOCKxx DATASET WITH READ ONLY\n*---------------------------------------------------------------------*\nCCLRDCB  DCB   DSORG=PS,                                               X\n               MACRF=GM,                                               X\n               DDNAME=&INTDDNM,                                        X\n               RECFM=FB,                                               X\n               LRECL=80,                                               X\n               DCBE=CCLRDCBE\nCCLRDCBL EQU   *-CCLRDCB               LENGTH OF THE OPENLIST\nCCLRDCBE DCBE  RMODE31=BUFF,EODAD=CLKDDEOF,SYNAD=CLKDDERR\nCCLROPL  OPEN  (CCLRDCB,(INPUT)),MODE=31,MF=L\nCCLROPLL EQU   *-CCLROPL               LENGTH OF THE OPENLIST\n* CCLWDCB: CONSTANT DCB FOR CLOCKxx DATASET WITH WRITE\nCCLWDCB  DCB   DSORG=PS,                                               X\n               MACRF=PM,                                               X\n               DDNAME=&INTDDNM,                                        X\n               RECFM=FB,                                               X\n               LRECL=80,                                               X\n               DCBE=CCLWDCBE\nCCLWDCBL EQU   *-CCLWDCB               LENGTH OF THE OPENLIST\nCCLWDCBE DCBE  RMODE31=BUFF\nCCLWOPL  OPEN  (CCLWDCB,(OUTPUT)),MODE=31,MF=L\nCCLWOPLL EQU   *-CCLWOPL               LENGTH OF THE OPENLIST\n* CSPRDCB: CONSTANT DCB FOR SYSPRINT WITH WRITE\nCSPRDCB  DCB   DSORG=PS,                                               X\n               MACRF=PM,                                               X\n               DDNAME=SYSPRINT,                                        X\n               RECFM=FBA,                                              X\n               LRECL=132,                                              X\n               DCBE=CSPRDCBE\nCSPRDCBL EQU   *-CSPRDCB               LENGTH OF THE OPENLIST\nCSPRDCBE DCBE  RMODE31=BUFF\nCSPROPL  OPEN  (CSPRDCB,(OUTPUT)),MODE=31,MF=L\nCSPROPLL EQU   *-CSPROPL               LENGTH OF THE OPENLIST\n* CONSTANT FOR EXEC PARM OPTIONS\nSYSTMPDD DC    CL8'&INTDDNM'           INITIAL DD NAME\nOPTFALL  DC    CL4'FALL'               PARM OPTION: FALL\nOPTAUTO  DC    CL4'AUTO'               PARM OPTION: AUTO\nOPTP1    DC    CL2'+1'                 PARM OPTION: -1\nOPTM1    DC    CL2'-1'                 PARM OPTION: +1\nOPTAUTM  DC    CL6'AUTUMN'             PARM OPTION: AUTUMN\nOPTWNTR  DC    CL6'WINTER'             PARM OPTION: WINTER\nOPTSPRG  DC    CL6'SPRING'             PARM OPTION: SPRING\nOPTSUMR  DC    CL6'SUMMER'             PARM OPTION: SUMMER\nOPTHELP  DC    CL4'HELP'               PARM OPTION: HELP\n*************************************************************\n* MESSAGE INDEX TABLE\nMSGIDX   DS    0C\n*              MSGID    MESSAGE TEXT LOCATION\n*              ======== =======================\n         DC    AL1(MSG001I),AL4(MSG001)        01\n         DC    AL1(MSG002I),AL4(MSG002)        02\n         DC    AL1(MSG003I),AL4(MSG003)        03\n         DC    AL1(MSG004I),AL4(MSG004)        04\n         DC    AL1(MSG005I),AL4(MSG005)        05\n         DC    AL1(MSG006I),AL4(MSG006)        06\n         DC    AL1(MSG007I),AL4(MSG007)        07\n         DC    AL1(MSG008I),AL4(MSG008)        08\n         DC    AL1(MSG009I),AL4(MSG009)        09\n         DC    AL1(MSG010I),AL4(MSG010)        0A\n         DC    AL1(MSG011I),AL4(MSG011)        0B\n         DC    AL1(MSG012I),AL4(MSG012)        0C\n         DC    AL1(MSG013I),AL4(MSG013)        0D\n         DC    AL1(MSG014I),AL4(MSG014)        0E\n         DC    AL1(MSG015I),AL4(MSG015)        0F\n         DC    AL1(MSG016I),AL4(MSG016)        10\n         DC    AL1(MSG017I),AL4(MSG017)        11\n         DC    AL1(MSG018I),AL4(MSG018)        12\n         DC    AL1(MSG019I),AL4(MSG019)        13\n         DC    AL1(MSG020I),AL4(MSG020)        14\n         DC    AL1(MSG021I),AL4(MSG021)        15\n         DC    AL1(MSG022I),AL4(MSG022)        16\n         DC    AL1(MSG023I),AL4(MSG023)        17\n         DC    AL1(MSG024I),AL4(MSG024)        18\n         DC    AL1(MSG025I),AL4(MSG025)        19\n         DC    AL1(MSG026I),AL4(MSG026)        1A\n         DC    AL1(MSG027I),AL4(MSG027)        1B\n         DC    AL1(MSG028I),AL4(MSG028)        1C\n         DC    AL1(MSG029I),AL4(MSG029)        1D\n         DC    AL1(MSG030I),AL4(MSG030)        1E\n         DC    AL1(MSG031I),AL4(MSG031)        1F\n         DC    AL1(MSG032I),AL4(MSG032)        20\n         DC    AL1(MSG033I),AL4(MSG033)        20\n         DC    AL1(MSG200I),AL4(MSG200)\n         DC    AL1(MSG201I),AL4(MSG201)\n         DC    AL1(MSG202I),AL4(MSG202)\n         DC    AL1(MSG203I),AL4(MSG203)\n         DC    AL1(MSG204I),AL4(MSG204)\n         DC    AL1(MSG205I),AL4(MSG205)\n         DC    AL1(MSG206I),AL4(MSG206)\n         DC    AL1(MSG207I),AL4(MSG207)\n         DC    AL1(MSG208I),AL4(MSG208)\n         DC    AL1(MSG209I),AL4(MSG209)\n         DC    AL1(MSG210I),AL4(MSG210)\n         DC    AL1(MSG211I),AL4(MSG211)\n         DC    AL1(MSG212I),AL4(MSG212)\n         DC    AL1(MSG213I),AL4(MSG213)\n         DC    AL1(MSG214I),AL4(MSG214)\n         DC    AL1(MSG215I),AL4(MSG215)\n         DC    AL1(MSG216I),AL4(MSG216)\n         DC    AL1(MSG217I),AL4(MSG217)\n         DC    AL1(MSG218I),AL4(MSG218)\n         DC    AL1(MSG219I),AL4(MSG219)\n         DC    AL1(MSG220I),AL4(MSG220)\n         DC    AL1(MSG221I),AL4(MSG221)\n         DC    AL1(MSG222I),AL4(MSG222)\n         DC    AL1(MSG223I),AL4(MSG223)\n         DC    AL1(MSG224I),AL4(MSG224)\n         DC    AL1(MSG225I),AL4(MSG225)\n         DC    AL1(MSG226I),AL4(MSG226)\n         DC    AL1(MSG227I),AL4(MSG227)\n         DC    AL1(MSG228I),AL4(MSG228)\n         DC    AL1(MSG229I),AL4(MSG229)\n         DC    AL1(MSG230I),AL4(MSG230)\n         DC    XL5'0000000000'                LAST INDEX RECORD\nMSGIDXL  EQU   *-MSGIDX\n* END OF MESSAGE INDEX TABLE\n***********************************************************\n* MESSAGE BODY TABLE\nMSG001   DC  AL2(MSG001L)\nMSG001T  DC  C'STZ001I Welcome to SETHOUR program.'\nMSG001I  EQU X'01'\nMSG001L  EQU *-MSG001T\n*\nMSG002   DC  AL2(MSG002L)\nMSG002T  DC  C'STZ002I Design: Hunter Zhou, zhough2000@yahoo.com.    '\nMSG002I  EQU X'02'\nMSG002L  EQU *-MSG002T\n*\nMSG003   DC  AL2(MSG003L)\nMSG003T  DC  C'STZ003I Purpose: Set System TOD Clock, '\n         DC  C'and update the PARMLIB CLOCKxx member.'\nMSG003I  EQU X'03'\nMSG003L  EQU *-MSG003T\n*\nMSG004   DC  AL2(MSG004L)\nMSG004T  DC  C'STZ004E Program failed to locate DDNAME in DCB.'\nMSG004I  EQU X'04'\nMSG004L  EQU *-MSG004T\n*\nMSG005   DC  AL2(MSG005L)\nMSG005T  DC  C'STZ020I The new time zone for updated clock will be:'\nMSG005I  EQU X'05'\nMSG005L  EQU *-MSG005T\n*\nMSG006   DC  AL2(MSG006L)\nMSG006T  DC  C'STZ021I The active CLOCKxx member in your system is:'\nMSG006I  EQU X'06'\nMSG006L  EQU *-MSG006T\n*\nMSG007   DC  AL2(MSG007L)\nMSG007T  DC  C'STZ030I Test if the CLOCKxx is required to be updated.'\nMSG007I  EQU X'07'\nMSG007L  EQU *-MSG007T\n*\nMSG008   DC  AL2(MSG008L)\nMSG008T  DC  C'STZ031I The old statements in active clock member:'\nMSG008I  EQU X'08'\nMSG008L  EQU *-MSG008T\n*\nMSG009   DC  AL2(MSG009L)\nMSG009T  DC  C'STZ032I The new statements in active clock member:'\nMSG009I  EQU X'09'\nMSG009L  EQU *-MSG009T\n*\nMSG010   DC  AL2(MSG010L)\nMSG010T  DC  C'STZ033E ERROR: There are more than 50 records '\n         DC  C'in current CLOCKxx member!'\nMSG010I  EQU X'0A'\nMSG010L  EQU   *-MSG010T\n*\nMSG011   DC  AL2(MSG011L)\nMSG011T  DC  C'STZ034E There is a error while reading TIMEZONE '\n         DC  C'statement in active clock member:'\nMSG011I  EQU X'0B'\nMSG011L  EQU   *-MSG011T\n*\nMSG012   DC  AL2(MSG012L)\nMSG012T  DC  C'STZ035E ERROR: Failed to read current CLOCKxx member.'\nMSG012I  EQU X'0C'\nMSG012L  EQU   *-MSG012T\n*\nMSG013   DC  AL2(MSG013L)\nMSG013T  DC  C'STZ036E ERROR: Failed to open current CLOCKxx member '\n         DC  C'with read.'\nMSG013I  EQU X'0D'\nMSG013L  EQU   *-MSG013T\n*\nMSG014   DC  AL2(MSG014L)\nMSG014T  DC  C'STZ037E ERROR: Failed to dynamically allocate current '\n         DC  C'CLOCKxx member.'\nMSG014I  EQU X'0E'\nMSG014L  EQU   *-MSG014T\n*\nMSG015   DC  AL2(MSG015L)\nMSG015T  DC  C'STZ040I It is not required to update CLOCKxx member.'\nMSG015I  EQU X'0F'\nMSG015L  EQU   *-MSG015T\n*\nMSG016   DC  AL2(MSG016L)\nMSG016T  DC  C'STZ041I This active clock member is required to be '\n         DC  C'updated.'\nMSG016I  EQU X'10'\nMSG016L  EQU   *-MSG016T\n*\nMSG017   DC  AL2(MSG017L)\nMSG017T  DC  C'STZ042I The current active clock member is updated.'\nMSG017I  EQU X'11'\nMSG017L  EQU   *-MSG017T\n*\nMSG018   DC  AL2(MSG018L)\nMSG018T  DC  C'STZ043E ERROR: Failed to open current CLOCKxx member '\n         DC  C'with write.'\nMSG018I  EQU X'12'\nMSG018L  EQU   *-MSG018T\n*\nMSG019   DC  AL2(MSG019L)\nMSG019T  DC  C'STZ044E ERROR: Failed to dynamically allocate current '\n         DC  C'CLOCKxx member with write.'\nMSG019I  EQU X'13'\nMSG019L  EQU   *-MSG019T\n*\nMSG020   DC  AL2(MSG020L)\nMSG020T  DC  C'STZ050E ERROR: There is an error while dynamically '\n         DC  C'deallocating following dataset:'\nMSG020I  EQU X'14'\nMSG020L  EQU   *-MSG020T\n*\nMSG021   DC  AL2(MSG021L)\nMSG021T  DC  C'STZ060E ERROR: There is an error while dynamically '\n         DC  C'allocating following dataset:'\nMSG021I  EQU X'15'\nMSG021L  EQU   *-MSG021T\n*\nMSG022   DC  AL2(MSG022L)\nMSG022T  DC  C'STZ011W WARN: There is no EXEC PARM given.'\nMSG022I  EQU X'16'\nMSG022L  EQU   *-MSG022T\n*\nMSG023   DC  AL2(MSG022L)\nMSG023T  DC  C'STZ012E ERROR: The EXEC PARM is invalid!'\nMSG023I  EQU X'17'\nMSG023L  EQU   *-MSG022T\n*\nMSG024   DC  AL2(MSG024L)\nMSG024T  DC  C'STZ100I The SETHOUR program is finished normally.'\nMSG024I  EQU X'18'\nMSG024L  EQU   *-MSG024T\n*\nMSG025   DC  AL2(MSG025L)\nMSG025T  DC  C'STZ101W The SETHOUR program is finished normally with '\n         DC  C'warning messages.'\nMSG025I  EQU X'19'\nMSG025L  EQU   *-MSG025T\n*\nMSG026   DC  AL2(MSG026L)\nMSG026T  DC  C'STZ102E The SETHOUR program is finished abnormally.'\nMSG026I  EQU X'1A'\nMSG026L  EQU   *-MSG026T\n*\nMSG027   DC  AL2(MSG027L)\nMSG027T  DC  C'STZ010I The given EXEC PARM is:'\nMSG027I  EQU X'1B'\nMSG027L  EQU   *-MSG027T\n*\nMSG028   DC  AL2(MSG028L)\nMSG028T  DC  C'STZ023I Following MVS system command has been issued:'\nMSG028I  EQU X'1C'\nMSG028L  EQU   *-MSG028T\n*\nMSG029   DC  AL2(MSG029L)\nMSG029T  DC  C'STZ014I Program will set system clock one hour ahead.'\nMSG029I  EQU X'1D'\nMSG029L  EQU   *-MSG029T\n*\nMSG030   DC  AL2(MSG030L)\nMSG030T  DC  C'STZ015I Program will set system clock one hour back.'\nMSG030I  EQU X'1E'\nMSG030L  EQU   *-MSG030T\n*\nMSG031   DC  AL2(MSG031L)\nMSG031T  DC  C'STZ016I This program is built for Northern Hemisphere.'\nMSG031I  EQU X'1F'\nMSG031L  EQU   *-MSG031T\n*\nMSG032   DC  AL2(MSG032L)\nMSG032T  DC  C'STZ017I This program is built for Southern Hemisphere.'\nMSG032I  EQU X'20'\nMSG032L  EQU   *-MSG032T\n*\nMSG033   DC  AL2(MSG033L)\nMSG033T  DC  C'STZ018E Cannot find the active CLOCKxx member.'\nMSG033I  EQU X'21'\nMSG033L  EQU   *-MSG033T\n* HELP MESSAGES\nMSG200   DC  AL2(MSG200L)\nMSG200T  DC  C'Help Message for SETHOUR program.'\nMSG200I  EQU X'C8'\nMSG200L  EQU   *-MSG200T\n*\nMSG201   DC  AL2(MSG201L)\nMSG201T  DC  C'The SETHOUR will update the current TOD clock by one '\n         DC  C'hour, and update CLOCKxx member in current system.'\nMSG201I  EQU X'C9'\nMSG201L  EQU   *-MSG201T\n*\nMSG202   DC  AL2(MSG202L)\nMSG202T  DC  C'This program can be used for time saving change in '\n         DC  C'both April and October each year.'\nMSG202I  EQU X'CA'\nMSG202L  EQU   *-MSG202T\n*\nMSG203   DC  AL2(MSG203L)\nMSG203T  DC  C'Parameters'\nMSG203I  EQU X'CB'\nMSG203L  EQU   *-MSG203T\n*\nMSG204   DC  AL2(MSG204L)\nMSG204T  DC  C'The parameter is given in EXEC PARM. '\n         DC  C'Here are the valid options: '\nMSG204I  EQU X'CC'\nMSG204L  EQU   *-MSG204T\n*\nMSG205   DC  AL2(MSG205L)\nMSG205T  DC  C'1. +1'\nMSG205I  EQU X'CD'\nMSG205L  EQU   *-MSG205T\n*\nMSG206   DC  AL2(MSG206L)\nMSG206T  DC  C'   Set clock one hour ahead, '\n         DC  C'no matter where the system is.'\nMSG206I  EQU X'CE'\nMSG206L  EQU   *-MSG206T\n*\nMSG207   DC  AL2(MSG207L)\nMSG207T  DC  C' '\nMSG207I  EQU X'CF'\nMSG207L  EQU   *-MSG207T\n*\nMSG208   DC  AL2(MSG208L)\nMSG208T  DC  C'2. -1'\nMSG208I  EQU X'D0'\nMSG208L  EQU   *-MSG208T\n*\nMSG209   DC  AL2(MSG209L)\nMSG209T  DC  C'   Set clock one hour back, '\n         DC  C'no matter where the system is.'\nMSG209I  EQU X'D1'\nMSG209L  EQU   *-MSG209T\n*\nMSG210   DC  AL2(MSG210L)\nMSG210T  DC  C' '\nMSG210I  EQU X'D2'\nMSG210L  EQU   *-MSG210T\n*\nMSG211   DC  AL2(MSG211L)\nMSG211T  DC  C'3. SPRING|SUMMER'\nMSG211I  EQU X'D3'\nMSG211L  EQU   *-MSG211T\n*\nMSG212   DC  AL2(MSG212L)\nMSG212T  DC  C'   Tell program to set clock in Spring. '\n         DC  C'It can be used in April.'\nMSG212I  EQU X'D4'\nMSG212L  EQU   *-MSG212T\n*\nMSG213   DC  AL2(MSG213L)\nMSG213T  DC  C'   For Northern Hemisphere, '\n         DC  C'it will set clock one hour ahead.'\nMSG213I  EQU X'D5'\nMSG213L  EQU   *-MSG213T\n*\nMSG214   DC  AL2(MSG214L)\nMSG214T  DC  C'   For Southern Hemisphere, '\n         DC  C'it will set clock one hour back.'\nMSG214I  EQU X'D6'\nMSG214L  EQU   *-MSG214T\n*\nMSG215   DC  AL2(MSG215L)\nMSG215T  DC  C' '\nMSG215I  EQU X'D7'\nMSG215L  EQU   *-MSG215T\n*\nMSG216   DC  AL2(MSG216L)\nMSG216T  DC  C'4. FALL|AUTUMN|WINTER'\nMSG216I  EQU X'D8'\nMSG216L  EQU   *-MSG216T\n*\nMSG217   DC  AL2(MSG217L)\nMSG217T  DC  C'   Tell program to set clock in Fall. '\n         DC  C'It can be used in October.'\nMSG217I  EQU X'D9'\nMSG217L  EQU   *-MSG217T\n*\nMSG218   DC  AL2(MSG218L)\nMSG218T  DC  C'   For Northern Hemisphere, '\n         DC  C'it will set clock one hour back.'\nMSG218I  EQU X'DA'\nMSG218L  EQU   *-MSG218T\n*\nMSG219   DC  AL2(MSG219L)\nMSG219T  DC  C'   For Southern Hemisphere, '\n         DC  C'it will set clock one hour ahead.'\nMSG219I  EQU X'DB'\nMSG219L  EQU   *-MSG219T\n*\nMSG220   DC  AL2(MSG220L)\nMSG220T  DC  C' '\nMSG220I  EQU X'DC'\nMSG220L  EQU   *-MSG220T\n*\nMSG221   DC  AL2(MSG221L)\nMSG221T  DC  C'5. AUTO'\nMSG221I  EQU X'DD'\nMSG221L  EQU   *-MSG221T\n*\nMSG222   DC  AL2(MSG222L)\nMSG222T  DC  C'   Set clock one hour ahead or back automatically '\n         DC  C'according to current month.'\nMSG222I  EQU X'DE'\nMSG222L  EQU   *-MSG222T\n*\nMSG223   DC  AL2(MSG223L)\nMSG223T  DC  C'   If current month is between Janurary and June, '\n         DC  C'it will set clock as Spring, otherwise as Fall.'\nMSG223I  EQU X'DF'\nMSG223L  EQU   *-MSG223T\n*\nMSG224   DC  AL2(MSG224L)\nMSG224T  DC  C'   Example: Run this step for both April and '\n         DC  C'October'\nMSG224I  EQU X'E0'\nMSG224L  EQU   *-MSG224T\n*\nMSG225   DC  AL2(MSG225L)\nMSG225T  DC  C'   //SETCLK  EXEC PGM=SETHOUR,PARM=AUTO'\nMSG225I  EQU X'E1'\nMSG225L  EQU   *-MSG225T\n*\nMSG226   DC  AL2(MSG226L)\nMSG226T  DC  C'   //SYSPRINT DD SYSOUT=*'\nMSG226I  EQU X'E2'\nMSG226L  EQU   *-MSG226T\n*\nMSG227   DC  AL2(MSG227L)\nMSG227T  DC  C' '\nMSG227I  EQU X'E3'\nMSG227L  EQU   *-MSG227T\n*\nMSG228   DC  AL2(MSG228L)\nMSG228T  DC  C'6. HELP'\nMSG228I  EQU X'E4'\nMSG228L  EQU   *-MSG228T\n*\nMSG229   DC  AL2(MSG229L)\nMSG229T  DC  C'   Show this help message.'\nMSG229I  EQU X'E5'\nMSG229L  EQU   *-MSG229T\n*\nMSG230   DC  AL2(MSG230L)\nMSG230T  DC  C' '\nMSG230I  EQU X'E6'\nMSG230L  EQU   *-MSG223T\nMSGHLPE  EQU X'E6'    THE LAST HELP MESSAGE ID\n*\n*---------------------------------------------------------------------*\n*  DSECT DATA, ALLOCATED DYNAMICALLY, USING R13.                      *\n*---------------------------------------------------------------------*\nDSA      DSECT\nSAVEAREA DS    18F                ;REGISTER SAVE AREA\nSVLVL1   DS    16F                ;REGISTER SAVE AREA ROUTINE LEVEL 1\nSVLVL2   DS    16F                ;REGISTER SAVE AREA ROUTINE LEVEL 2\nSVLVL3   DS    16F                ;REGISTER SAVE AREA ROUTINE LEVEL 3\nDRECAREA DS    F                  ;DTABLE STORAGE ADDRESS\nRETCODE  DS    XL1                ;RETURN CODE\n* TIME MACRO LIST FORM\nTIMELST  TIME  LINKAGE=SYSTEM,MF=L   TIME LIST FORM\n* EXEC PARM INFORMATION\nPARMLEN  DS    AL2                ;THE LENGTH OF THE PARM\nPARM     DS    CL126              ;PARAMETER FROM\n*---------------------------------------------------------------------*\n* SET CLOCK PARM\nSETCPLUS DS    X                   01 FOR +1, 00 FOR -1\n* SET CLOCK COMMAND BUFFER\n* SETCLKC  DC    'SET DATE=YYYY.DDD,CLOCK=HH:MM:SS'\nSETCLK   DS    0F\n         DS    AL2(SETCLKL)\nSETCLKCM DS    CL9                 SET DATE=\nSETCLKDT DS    CL8                 YYYY.DDD\n         DS    CL7                 ,CLOCK=\nSETCLKTM DS    CL8                 HH:MM:SS\n* LOCAL TIME & DATE\nDATELCL  DS    CL16   TIME MACRO: HHMMSSthmiju0000 0YYYYDDD00000000\n* GMT   TIME & DATE\nDATEGMT  DS    CL16   TIME MACRO: HHMMSSthmiju0000 0YYYYDDD00000000\n* DATE AND TIME IN TEXT FORMAT\nDATEBUF  DS    0D\nDATEFMT  DS    XL10               0YYYY.DDD\nTIMEFMT  DS    XL9                HH.MM.SS\nHOURBUF  DS    XL2                PACKED DECIMAL BUFFER FOR HOUR HH\nMINBUF   DS    XL2                PACKED DECIMAL BUFFER FOR MINUTE\nSECBUF   DS    XL2                PACKED DECIMAL BUFFER FOR SECOND\nSTHBUF   DS    XL2                PACKED DECIMAL BUFFER FOR SECOND/100\nDAYBUF   DS    XL3                PACKED DECIMAL BUFFER FOR DAY DDD\n*---------------------------------------------------------------------*\n* GET TIME ZONE BUFFERS\n* LOCAL TIME & DATE AREA\nGMTYTD   DS    XL5                PACKED BUFFER FOR 0YYYYDDD0C\nLCLYTD   DS    XL5                PACKED BUFFER FOR 0YYYYDDD0C\nGMTHOUR  DS    XL2                PACKED BUFFER FOR GMT HOUR HH0C\nLCLHOUR  DS    XL2                PACKED BUFFER FOR LCL HOUR HH0C\nTZDELTA  DS    XL2                PACKED TIME ZONE HOUR DELTA HH0C\nTZHRDEC  DS    CL4                DECIMAL FORMAT EDITED BY TZHRMDL\n* CLOCKxx TIME ZONE STATEMENT MODEL\nTZSTMT   DS    0D\n         DS    AL2                LENGTH OF TIMEZONE STATEMENT\nTZKEYW   DS    CL9                TIMEZONE\nTZWORD   DS    CL1                W OR E\n         DS    CL1                .\nTZHOUR   DS    CL2                00\n         DS    CL6                .00.00\n* END OF TIME ZONE STATEMENT\n*---------------------------------------------------------------------*\n* CLOCKxx member name\nCLKPMDSN DS    CL44               CONBINED DATASET AND MEMBER NAME\n* CLOCK MEMBER\nCLKPMMBR DS    0CL8               CLOCK MEMBER NAME OF CLOCKXX\nCLKPMPFX DS    CL5                CLOCK\nCLKPMSFX DS    CL2                XX\n         DS    C                  SPACE\nFLGFNDMB DS    XL1                FLAG TO TELL IF FIND THE MEMBER\nFLGUCLKM DS    XL1                FLAG TO TELL IF NEED TO UPDATE CLOCK?\n*---------------------------------------------------------------------*\n*TIOT AREA FOR JOB INFORMATION\nTIOTA    DS    F                  TIOT ADDRESS\n*MCSOPER REQUIRED DATA STOREAGE\n         DS    0F\nOPERDATA DS    CL(MCSOPLEN)\nHCCONSNM DS    CL8\nHCCONSID DS    CL4\nHCSTATUS DS    A\nHCSTATAL DS    F\nHCMECB   DS    F\nHCRETC   DS    F\nHCRSNC   DS    F\n*---------------------------------------------------------------------*\n* DYNAMIC ALLOCATION STORAGE\n* INPUT TO SUBROUTINE DYALC: DSNAME, DSDISP\n* TEXT UNIT DEFINITIONS\nTUALC    DS 0D\n*TEXT UNIT DATASET NAME DSNTU\nTUADSN   DS XL2\n         DS XL2\nDSNAMEL  DS XL2\nDSNAME   DS CL44\n*TEXT UNIT RETURNED DD NAME RETDDN\nTUARTDD  DS XL2\n         DS XL2\nALCDDL   DS XL2\nALCDD    DS CL8                   DD NAME FILLED BY DYNALLOC\n*TEXT UNIT PDS MEMBER NANE\nTUAMEM   DS XL2\n         DS XL2\nALCMEML  DS XL2\nALCMEM   DS CL8\n*TEXT UNIT STATUS STATUSTU\nTUASTS   DS XL2\n         DS XL2\n         DS XL2\nDSDISP   DS XL1\n*---------------------------------------------------------------------*\n* DYNAMIC DEALLOCATION STORAGE\nTUUALC   DS 0D\n*TEXT UNIT RETURNED DD NAME\nTUUALDD  DS XL2\n         DS XL2\nUALCDDL  DS XL2\nUALCDD   DS CL8\n* END OF TIME ZONE STATEMENT\n*---------------------------------------------------------------------*\n*---------------------------------------------------------------------*\n* PDS MEMBER PROCESSING BUFFERS\nBLDLBUF  DS 0F\nBLDMBNB  DS XL2\nBLDMBLN  DS AL2\nBLDMBNM  DS CL8\nBLDTTR   DS XL3\nBLDK     DS XL1\nBLDZ     DS XL1\nBLDC     DS XL1\n         DS CL32\n* END OF PDS MEMBER PROCESSING BUFFERS\n*---------------------------------------------------------------------*\n         MCSOPER MF=(L,MCSOPPL)\nEXTRMFL  EXTRACT MF=L                      ;EXTRACT JOB NAME INFO\nWTOLIST  WTO   TEXT=,MF=L\n* MESSSAGE ID TO PASS TO WRITELOG ROUTINE\nMSGID    DS    XL1\nFLSYSPRT DS    XL1                FLAG IF SYSPRINT PROVIDED\nFLGTERM  DS    XL1                FLAG IF NEED TO TERMINATE THE PRORAM.\n* MESSAGE BUFFER\n* IF FOR WTO, THE FIRST 2 BYTES WILL SET TO MESSAGE LENGTH\n* IF FOR SYSPRINT, THE FIRST BYTE IS LENGTH, SECOND BYTE IS C' '\nMSGBUF   DS    0H\nMSGBUFLN DS    XL1\nMSGBUFCC DS    XL1\nMSGBUFTX DS    CL131              ;SYSPRINT MESSAGE BUFFER\nMSGCTR   DS    PL2                ;MESSAGE COUNTER\n* FLAGS FOR MESSAGE\nMSGINIT  EQU   X'00'              INITIALIZE MESSAGE SYSPRINT\nMSGTERM  EQU   X'FF'              TERMINATE MESSAGE SYSPRINT\nMSGCUST  EQU   X'FE'          MESSAGE IS PROVIDED IN MSGBUF, NOT MSGID\nMSGIXEND EQU   X'00'                   END OF MESSAGE INDEX TABLE TAG\n*---------------------------------------------------------------------*\n* THE DCB MUST BE ALLOCATED BELOW 16MB LINE,\n* SO THE GETMAIN FOR THIS DSECT MUST CODE LOC=BELOW\n* THE DCBE WILL POINT TO THE CONSTANT DCBE AS IT WILL NOT BE CHANGED.\n* SYSPRINT DCB/OPEN LIST FORM\n*---------------------------------------------------------------------*\n         DS    0F\nPRMLIB   DS    XL(CPRMLIBL)       PARMLIB DCB WORK AREA\n         DS    0F\nPRMOPLST DS    XL(CPRMOPLL)       PARMLIB OPEN WORK AREA\nPRMDDNAM DS    CL8                THE DDNAME IN PRMLIB DCB\nPRMDDLOC DS    A                  ADDRESS OF THE DDNAME IN PRMLIB DCB\n* CLOCKxx READ DCB\n         DS    0F\nCLRDCB   DS    XL(CCLRDCBL)       DCB FOR QSAM\n         DS    0F\nCLRDCBE  DS    XL(DCBE$LEN)       DCBE FOR QSAM\n         DS    0F\nCLROPLST DS    XL(CCLROPLL)       OPEN LIST\nCLRDDNAM DS    CL8                THE DDNAME IN DCB\nCLRDDLOC DS    A                  ADDRESS OF THE DDNAME IN DCB\n* CLOCKxx WRITE DCB\n         DS    0F\nCLWDCB   DS    XL(CCLWDCBL)       DCB FOR QSAM\n         DS    0F\nCLWDCBE  DS    XL(DCBE$LEN)       DCBE FOR QSAM\n         DS    0F\nCLWOPLST DS    XL(CCLWOPLL)       OPEN LIST\nCLWDDNAM DS    CL8                THE DDNAME IN DCB\nCLWDDLOC DS    A                  ADDRESS OF THE DDNAME IN DCB\n* SYSPRINT DCB\n         DS    0F\nSPRDCB   DS    XL(CSPRDCBL)       DCB FOR QSAM\n         DS    0F\nSPRDCBE  DS    XL(DCBE$LEN)       DCBE FOR QSAM\n         DS    0F\nSPROPLST DS    XL(CSPROPLL)       OPEN LIST\n* DCBE LENGTH\nDCBE$LEN EQU   DCBEEND-DCBE       DCBE length\n*---------------------------------------------------------------------*\nDSALEN   EQU   *-DSA              ;LENGTH OF DATA AREA, USING R13\n********************************************************************\n* DUMMY SECTION: DATA TABLE, USING R8 DYNAMICALLY\n********************************************************************\n*---------------------------------------------------------------------*\n* CLOCKxx MEMBER BUFFER: EACH RECORD HAS 80 BYTES LONG\nDTABLE   DSECT\nCLKMBBUF DS    CL4000             THE CLOCK MEMBER BUFFER MAX 40 LINES\nCLKMBMAX EQU   50                 MAXIMUM RECORDS: 50\nCLKMBCTR DS    XL2                THE TOTAL NUMBER OF RECORDS\nCLKMBRTZ DS    XL2                THE LOCATION OF TIMEZONE RECORD\n*---------------------------------------------------------------------*\nDTABLEN  EQU   *-DTABLE\nSTORLEN  EQU   DSALEN+DTABLEN     TOTAL STORAGE TO BE ALLOCATED.\n*\n*---------------------------------------------------------------------*\n* PARMLIB DSECT: PARMLIB CARD IMAGE MAPS, USED BEFORE OS/390 R10\n* THIS DSECT IS USED TO MAP THE DATA AREA OF IPAPLIB IN\n* MACRO IPAIPA.\n* EACH SYSTEM PARMLIB WILL HAVE A DATA AREA MAPPED BY THIS\n* DSECT, THIS IS USED TO ACCESS ALL SYSTEM PARMLIB DATASETS.\n*\nIPRMLIB  DSECT\nIPMLDSN  DS    CL44      PARMLIB dataset name\n         DS    CL1       Reserved\nIPMLLVOL DS    CL6       PARMLIB VOLSER\n         DS    CL12      Reserved\nIPMLLFLG DS    1BL1      PARMLIB usage flags\nIPMLIBL  EQU  *-IPRMLIB  LENGTH OF PRMLIB (64 bytes)\n*---------------------------------------------------------------------*\n*  SYSTEM DSECTS AND MACROS                                           *\n*---------------------------------------------------------------------*\n*  SYSTEM DSECTS FOR MGCRE SYSTEM COMMANDS\n         IEZVG111\n         IEZMGCR\n*  SYSTEM DSECTS FOR JOBNAMES\n         IHAPSA\n         IHAASCB\n         IEFTIOT1\n*  SYSTEM DSECTS FOR SYSTEM IPL/PARMLIB INFORMATION\n         CVT      DSECT=YES       Communication table\n         IHAECVT  DSECT=YES       Extended CVT\n         IHAIPA   DSECT=YES       IPA\n         IEFZPMAP DSECT=YES       Logical PARMLIB MAP\n*  SYSTEM DSECTS FOR DYNAMIC ALLOCATION\n         IEFZB4D0\n         IEFZB4D2\n*  SYSTEM DSECTS FOR DCB/DCBE\n*        'Data Control Block (DCB)'\n         DCBD  DSORG=PS,DEVD=DA\n*        'DCB Extension (DCBE)'\n         IHADCBE\n*---------------------------------------------------------------------*\n*  END OF PROGRAM                                                     *\n*---------------------------------------------------------------------*\n.END     END   SETHOUR\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT639/FILE639.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT639", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}