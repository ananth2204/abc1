{"INMR01": {"INMLRECL": 80, "INMFNODE": "NODENAME", "INMFUID": "T311LBD", "INMTNODE": "X", "INMTUID": "Y", "INMFTIME": "20180806132204000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 293930, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 32720, "INMRECFM": "FB", "INMDIR": 6, "INMDSNAM": "T311LBD.ZFSTOOLS.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 293930, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 293930, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"T311LBD.ZFSTOOLS.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 32720, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 65520, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "180218", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\x0f'", "DS1LSTAR": "b'\\x00\\x04\\x03'", "DS1TRBAL": "b'.\\xc0'"}, "COPYR2": {"deb": "b'\\x02\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x0e\\xa0\\x00\\x04\\x95@P'", "extents": ["b'\\x02\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x0e\\xa0\\x00\\x04\\x95@P'", "b'X\\x99\\x83\\xb8\\x00\\x00\\x03\\xd1\\x00\\x00\\x03\\xd1\\x00\\x06\\x00\\x07'", "b'P\\x99\\x83\\xb8\\x00\\x00\\x08/\\x00\\x00\\x08/\\x00\\x0e\\x00\\x0f'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$DOC": {"ttr": 5, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x13\\x00G\\x01\\x16\\x13O\\x01\\x16(o\\x10\\x13\\x00P\\x00\\x16\\x00\\x00\\xe9\\xc6\\xe2@@@@@@@'", "ispf": {"version": "01.19", "flags": 0, "createdate": "2016-05-13T00:00:00", "modifydate": "2016-10-12T10:13:47", "lines": 80, "newlines": 22, "modlines": 0, "user": "ZFS"}, "text": "zFSTools is an ISPF dialog that combines home grown and IBM dialogs to\nassist and simplify the management of zFS datasets. With this dialog you\ncan backup a zFS dataset to a unloaded sequential dataset, restore a zFS\ndataset from a backup, allocate a new zFS, grow the size of a zFS, access\nmany of the zfsadm functions (grow is one of them), mount and unmount\nfilesystems, and even rename a zFS dataset. All with comparitive ease thanks\nto the ISPF menus and panels.\n\nSome of the functions require that the user have the ability to become\na SuperUser and if you have that ability then those functions (e.g. mount,\nunmount, grow) will work very well. If not, then find someone who can do\nit for you.\n\nThe backup and restore functions work with any unmounted zFS dataset and\nsupport using a GDG for the backup dataset if desired using relative GDG\nnumbers.\n\nThe dialog is accessed by starting with the ISPF Panel ZFSMENU.\n\nTo simplfy use you can edit the ZFSTOOLS exec to point to the install\ndatasets (exec and panels) and then install just the ZFSTOOLS exec into\nan allocated library in your SYSPROC or SYSEXEC concatenation.\n\nSome of the REXX exec's included are:\n\n   ZFSADM   - perfrom several of the zfsadm functions\n   ZFSALLOC - to allocate and format a new zFS (as a type 1.5)\n   ZFSBACK  - to backup a zFS to a sequential dataset\n              - uses IDCAMS REPRO\n              - make backup to a gdg\n              - Note that if the zFS to be backed up is mounted then\n                the code, using the sysdsn() function, gets a dataset\n                not found result. Strange but it does prevent an\n                attempt to backup an active zFS.\n   ZFSCOPY  - Generate ADRDSSU JCL to copy a zFS\n * ZFSGROW  - increase the size of a mounted zFS\n   ZFSIBM   - exec to access some of the IBM zFS dialogs\n              - Mount Table by File System\n              - Mount Table by Mount Point\n              * not supported prior to z/OS 2.2\n   ZFSMENU  - Simple exec to display the ZFSTools Menu Panel\n   ZFSMNT   - Mount a file system using the IBM Mount dialog\n              - if z/OS 2.1 then use custom dialog\n   ZFSRENAM - rename the zFS base and data datasets\n   ZFSREST  - to restore a zFS unloaded dataset\n            - uses IDCAMS REPRO\n            - can create a new zFS\n            - can delete a current zFS before allocating a new\n              zFS and reloading\n            - can restore from a gdg\n   ZFSTOOLS - exec to altlib and libdef for this application if you\n              don't install in ispf allocated libraries\n   ZFSUMNT  - UnMount using the IBM Mount Table by File System\n              - if z/OS 2.1 then use custom dialog\n   ZFSUSE   - Display information about zFS usage\n\n   * - these functions require SU authority\n\nMembers of this PDS are:\n\n    $DOC    - what you are reading\n    EXEC    - TSO Transmit of the REXX Library\n    PANELS  - TSO Transmit of the ISPF Panel Library\n    $RECV   - TSO Command to RECEIVE EXEC and PANELS into\n              usable datasets\n\nDependencies:\n  - This ISPF dialog utilizes the STEMEDIT utility which can be found\n    on the CBTTape FILE 183.\n  - Some elements of the dialog require the user to have SuperUser\n    capability.\n  - the zLSOF option on the menu requires access to SYS1.SBPXEXEC where\n    IBM ships this exec\n\n\nAcknowledgements:\n   - Ed Jaffe for how to use bpxwunix\n   - Paul from IBM z/OS USS Shell and Utilities for how to set\n     SuperUser mode using syscall.\n   - Peter Giles for several usability updates\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$RECV": {"ttr": 3, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00&\\x01\\x16\\x13O\\x01\\x16\\x13\\x9f\\x13A\\x004\\x004\\x00\\x00\\xe9\\xc6\\xe2@@@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2016-05-13T00:00:00", "modifydate": "2016-05-18T13:41:26", "lines": 52, "newlines": 52, "modlines": 0, "user": "ZFS"}, "text": "        /* this rexx exec is expected to be invoked by the EXEC command\n           thus:\n\n           EXec 'dsname(RECEIVE)'\n\n           Prompting will occur for hlq and optional volser.\n\n           and it will then issue the TSO RECEIVE command for the\n           the following members to create these new data sets:\n\n           Member       Dataset\n           EXEC         hlq.EXEC and\n           PANELS       hlq.PANELS\n\n           You will then need to copy these datasets/members into\n           datasets for production use.\n\n           After these data sets are created several of the members\n           of this install data set will be browsed.\n           */\n\n        parse source x1 x2 x3 x4 dsn .\n         x = PROMPT(\"ON\") /* enable prompting */\n\n        say \"Enter desired hlq for target data sets\",\n            \"(default is\" sysvar(\"syspref\")\".zfstools.NEW):\"\n        pull hlq\n        hlq = strip(hlq)\n\n        if hlq = \"\" then hlq = sysvar(\"syspref\")\".zfstools.NEW\"\n\n        say \"Enter optional volser for target data sets\",\n            \"default is to allow standard allocation to\",\n            \"find a volume.\"\n        pull volser\n        volser = strip(volser)\n\n        if volser <> \"\" then vol = \"vol(\"volser\")\"\n                        else vol = \"\"\n\n        Say \"Using HLQ:\" hlq\n        if vol <> \"\" then\n           Say \"Using Volser:\" volser\n\n        queue \"dsn('\"hlq\".exec')\" vol\n        \"Receive inds('\"dsn\"(exec)')\"\n        queue \"dsn('\"hlq\".panels')\" vol\n        \"Receive inds('\"dsn\"(panels)')\"\n\n        if sysvar('sysispf') <> \"ACTIVE\" then exit\n        Address ISPEXEC\n           \"Browse dataset('\"dsn\"($doc)')\"\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "EXEC": {"ttr": 7, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "PANELS": {"ttr": 1025, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT314/CBT.V500.FILE314.PDS/ZFSTOOLS.xmi", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT314/CBT.V500.FILE314.PDS", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}