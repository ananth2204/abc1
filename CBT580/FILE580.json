{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012411000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 176358, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 8, "INMDSNAM": "CBT.V500.FILE580.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 176358, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 176358, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE580.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x04\\x04'", "DS1TRBAL": "b'\\xa1\\xa2'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x04L\\x00\\x06\\x04L\\x00\\n\\x00\\x05'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x02\\x18?\\x01\\x02\\x18?\\x13P\\x00\\x0c\\x00\\x0c\\x00\\x00\\xe2\\xc8\\xc9\\xd7\\xc4\\xc1\\xe3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-07-02T00:00:00", "modifydate": "2002-07-02T13:50:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "SHIPDAT"}, "text": "REGULAR CBT TAPE - VERSION 448    FILE:  580\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT448.FILE580\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 15 MEMBERS COUNTED; CUMULATIVE SIZE IS 1,230 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   07/02/02    13:50:53    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$NOTE1": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x12\\x01\\x02\\x18?\\x01\\x02\\x18?\\x13A\\x00\"\\x00\"\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-07-02T00:00:00", "modifydate": "2002-07-02T13:41:12", "lines": 34, "newlines": 34, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject: New Version of Cut/Paste\nDate: Tue, 2 Jul 2002 08:31:45 -0500\nFrom: \"Mike\" <mrsmith1@earthlink.net>\nTo: <sbgolob@attglobal.net>,\n     <sbgolob@aol.com>\n\nSam,\n\nOS/390 V2.10 introduced a CUT/PASTE command in edit.  It is a\ntrivial implementation of the CUT/PASTE macros from the PDS share\nproduct.\n\nI used the PDS share CUT/PASTE macros as a base; converted them\nto REXX and enhanced them a \"little\".\n\nThe Showcut macro will display a table of all cut tables and will\ndisplay the contents of the table.\n\nThe ZPASTE function has been enhanced to provide a multiple-paste\noperation when invoked with ZPASTE AFTER NX/X or ZPASTE BEFORE\nNX/X.\n\nThe CUT.XMI is a TSO xmit of a PDS per your specifications. There\nis a trivial $INSTALL member to perform the required IEBCOPY\nsteps.\n\nMike Smith\n4383 W. Campbell Lane\nLibertyville, IL 60048\n\nOffice: (847) 573-8718\nCell:   (847) 736-6733\nEmail:  MRSmith1@earthlink.net\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$INSTALL": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00A\\x01\\x02\\x17\\x7f\\x01\\x02\\x17\\x7f\\x14\\x08\\x00\\x1d\\x00\\x1d\\x00\\x00\\xd2\\xc3\\xd4\\xd9\\xe2\\xf1\\xf1@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2002-06-26T00:00:00", "modifydate": "2002-06-26T14:08:41", "lines": 29, "newlines": 29, "modlines": 0, "user": "KCMRS11"}, "text": "//JOBCARD\n//*\n//*\n//*\n//* COPY REXX TO ISPEXEC\n//*\n//DUMP1   EXEC PGM=IEBCOPY,REGION=2M\n//SYSPRINT DD  SYSOUT=*\n//SYSABEND DD  SYSOUT=*\n//NPDSFAST DD  DUMMY\n//COMP1    DD  DISP=SHR,DSN=HLQ.CUT.CNTL\n//COMP2    DD  DISP=SHR,DSN=HLQ.ISPEXEC\n//SYSIN    DD  *\n  COPY    O=COMP2,I=((COMP1,R))\n  S M=SHOWCUT,ZCUT,ZPASTE\n/*\n//*\n//* COPY PANELS TO ISPPLIB\n//*\n//DUMP1   EXEC PGM=IEBCOPY,REGION=2M\n//SYSPRINT DD  SYSOUT=*\n//SYSABEND DD  SYSOUT=*\n//NPDSFAST DD  DUMMY\n//COMP1    DD  DISP=SHR,DSN=HLQ.CUT.CNTL\n//COMP2    DD  DISP=SHR,DSN=HLQ.ISPPLIB\n//SYSIN    DD  *\n COPY    O=COMP2,I=((COMP1,R))\n S M=CUTDEF,CUTDEF@,CUTHELP,CUTPROM,PASTEDEF,PASTEPRM,SHOWCUTP,SHOWCUTT\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@FILE580": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00C\\x01\\x01\\x02_\\x01\\x02\\x18?\\x13H\\x00\\x16\\x00\\x02\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2001-01-25T00:00:00", "modifydate": "2002-07-02T13:48:43", "lines": 22, "newlines": 2, "modlines": 0, "user": "SBGOLOB"}, "text": "//***FILE 580 is from Mike R. Smith, and contains a \"modernized\"    *   FILE 580\n//*           REXXed version of Steve Smith's CUT and PASTE edit    *   FILE 580\n//*           macros from File 182.                                 *   FILE 580\n//*                                                                 *   FILE 580\n//*           Office: (847) 573-8718                                *   FILE 580\n//*           Cell:   (847) 736-6733                                *   FILE 580\n//*           Email:  MRSmith1@earthlink.net                        *   FILE 580\n//*                                                                 *   FILE 580\n//*      OS/390 V2.10 introduced a CUT/PASTE command in edit.       *   FILE 580\n//*      It is a trivial implementation of the CUT/PASTE macros     *   FILE 580\n//*      from the PDS product from File 182 of the CBT Tape.        *   FILE 580\n//*                                                                 *   FILE 580\n//*      I used the PDS (File 182) CUT/PASTE macros as a base;      *   FILE 580\n//*      converted them to REXX and enhanced them a \"little\".       *   FILE 580\n//*                                                                 *   FILE 580\n//*      The SHOWCUT macro will display a table of all cut          *   FILE 580\n//*      tables and will display the contents of the table.         *   FILE 580\n//*                                                                 *   FILE 580\n//*      The ZPASTE function has been enhanced to provide a         *   FILE 580\n//*      multiple-paste operation when invoked with ZPASTE AFTER    *   FILE 580\n//*      NX/X or ZPASTE BEFORE NX/X.                                *   FILE 580\n//*                                                                 *   FILE 580\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CUTDEF": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00$\\x01\\x015?\\x01\\x02\\x17/\\x11D\\x005\\x003\\x00\\x00\\xd2\\xc3\\xd4\\xd9\\xe2\\xf1\\xf1@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2001-12-19T00:00:00", "modifydate": "2002-06-21T11:44:24", "lines": 53, "newlines": 51, "modlines": 0, "user": "KCMRS11"}, "text": ")ATTR DEFAULT(%+_)\n    % TYPE(TEXT) INTENS(HIGH) COLOR(WHITE) SKIP(ON)\n    \u00a2 TYPE(TEXT) INTENS(HIGH) COLOR(YELLOW)\n    + TYPE(TEXT) INTENS(LOW)  COLOR(TURQ) SKIP(ON)\n    _ TYPE(INPUT) INTENS(HIGH) CAPS(ON) JUST(LEFT) COLOR(RED)\n    \u00ac TYPE(INPUT) INTENS(HIGH) CAPS(ON) JUST(LEFT) COLOR(RED) PAD(_)\n    \u00a6 TYPE(INPUT) INTENS(HIGH) CAPS(OFF)\n)BODY EXPAND(\\\\)\n+-\\-\\-\u00a2CUT prompt and set defaults+-\\-\\-+\n%COMMAND ===>_ZCMD                                                     +\n%\n+   Enter\u00a2END+key for no action\n%\n%Action       ====>_ACTCMD  +\u00a2ADD, REPLACE, or blank for default\n%CUT table name===>_z +      \u00a2any two character name for this one time\n+                            \u00a2blank for default\n%CUT size limit===>_CUTCOUNT+\u00a2any number 100 to 99999 for this one time\n+-\\-\\-\n%Set default actions for CUT and PASTE\n+\n%CUT default   ===>_CUTDEF  +\u00a2ADD or REPLACE\n%PASTE default ===>_PASTEDEF+\u00a2KEEP or ZERO\n%CUT table name===>_z +      \u00a2any two character name for default\n%CUT size limit===>_CUTLIMIT+\u00a2any number 100 to 99999 for default\n+\n+ \u00a2ADD    +will add CUT lines at the end of previous CUT lines if any\n+ \u00a2REPLACE+will clear any previous CUT lines then add newly CUT lines\n+ \u00a2ZERO   +will delete previously CUT lines after the PASTE operation\n+ \u00a2KEEP   +will keep previously CUT lines after the PASTE operation to\n+          be used by a later PASTE or added to by later CUT operations\n)INIT\n  .ZVARS='(CUTTBL, CUTTNDEF)'\n  .CURSOR=ACTCMD\n  .HELP=CUTDEF@\n  IF (&CUTTNDEF=&Z) &CUTTNDEF=AA\n  IF (&CUTLIMIT=&Z) &CUTLIMIT=2000\n  IF (&CUTCOUNT=&Z) &CUTCOUNT=&CUTLIMIT\n  IF (&CUTDEF=&Z)   &CUTDEF=ADD\n  IF (&PASTEDEF=&Z) &PASTEDEF=ZERO\n)PROC\n VER(&CUTCOUNT,NB,RANGE,100,99999)\n &CUTDEF=TRANS(TRUNC(&CUTDEF,1),A,ADD,R,REPLACE,*,'&CUTDEF')\n VER(&CUTDEF,NB,LIST,ADD,REPLACE)\n IF (&ACTCMD=&Z) &ACTCMD=&CUTDEF\n &ACTCMD=TRANS(TRUNC(&ACTCMD,1),A,ADD,R,REPLACE,*,'&ACTCMD')\n VER(&ACTCMD,LIST,ADD,REPLACE)\n &PASTEDEF=TRANS(TRUNC(&PASTEDEF,1),Z,ZERO,K,KEEP,*,'&PASTEDEF')\n VER(&PASTEDEF,NB,LIST,ZERO,KEEP)\n VER(&CUTTNDEF,NB)\n IF (&CUTTBL=&Z) &CUTTBL=&CUTTNDEF\n VER(&CUTCOUNT,NB,RANGE,100,99999)\n VPUT (CUTDEF PASTEDEF CUTTNDEF CUTLIMIT) PROFILE\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CUTDEF@": {"ttr": 526, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x008\\x01\\x015?\\x01\\x02\\x17/\\x11A\\x00!\\x00!\\x00\\x00\\xd2\\xc3\\xd4\\xd9\\xe2\\xf1\\xf1@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2001-12-19T00:00:00", "modifydate": "2002-06-21T11:41:38", "lines": 33, "newlines": 33, "modlines": 0, "user": "KCMRS11"}, "text": ")ATTR DEFAULT(%+_)\n    % TYPE(TEXT) INTENS(HIGH) COLOR(WHITE) SKIP(ON)\n    \u00a2 TYPE(TEXT) INTENS(HIGH) COLOR(YELLOW)\n    + TYPE(TEXT) INTENS(LOW)  COLOR(TURQ) SKIP(ON)\n    _ TYPE(INPUT) INTENS(HIGH) CAPS(ON) JUST(LEFT) COLOR(RED)\n    \u00ac TYPE(INPUT) INTENS(HIGH) CAPS(ON) JUST(LEFT) COLOR(RED) PAD(_)\n    \u00a6 TYPE(INPUT) INTENS(HIGH) CAPS(OFF)\n)BODY EXPAND(\\\\)\n%Tutorial+-\\-\\-\u00a2ZCUT/ZPASTE HELP+-\\-\\-\n%OPTION  ===>_ZCMD                                                             +\n+\n%                  ZCUT Prompt and Set Defaults\n+\n   The ZCUT and ZPASTE Edit macros provide a handy method to move data\n   from one Edit session to another.  The ZCUT Default panel supports\n   the definition of the MODE for the ZCUT operation and for setting\n   the defaults for both ZCUT and ZPASTE for future operations.\n\n   The mode for the ZCUT   operation is ether REPLACE or ADD.\n\n   The mode for the ZPASTE operation is ether KEEP or ZERO.\n\n   The ZCUT table name can also be set. Multiple ZCUT tables can be\n   utilized at the same time.  A limit on the number of lines that are\n   allowed to be saved can also be set.\n\n   The default values for the ZCUT MODE, ZPASTE MODE, table name, and\n   line limit value can also be set or altered.\n\n                  (continued)\n)PROC\n  &ZCONT = CUTHELP\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CUTHELP": {"ttr": 528, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x16\\x01\\x02\\x17/\\x01\\x02\\x17/\\x119\\x00\\xde\\x00\\x93\\x00\\x00\\xd2\\xc3\\xd4\\xd9\\xe2\\xf1\\xf1@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2002-06-21T00:00:00", "modifydate": "2002-06-21T11:39:16", "lines": 222, "newlines": 147, "modlines": 0, "user": "KCMRS11"}, "text": ")ATTR\n\u00ac AREA(SCRL)    EXTEND(ON)\n^ TYPE(SAC)\n+ TYPE(PS) CSRGRP(99)\n@ TYPE(NT)\n~ TYPE(TEXT) INTENS(LOW)\n` TYPE(TEXT) INTENS(LOW)\n\u00a2 TYPE(TEXT) INTENS(HIGH) COLOR(YELLOW)\n)BODY Expand(\\\\)\n%TUTORIAL~-\\-\\-\u00a2CUT/PASTE HELP~-\\-\\-\n%Option ===>_ZCMD                                            %Scroll ===>_ZSCBR+\n+\n\u00acDYNAREA                                                                       \u00ac\n\u00ac                                                                              \u00ac\n\u00ac                                                                              \u00ac\n\u00ac                                                                              \u00ac\n\u00ac                                                                              \u00ac\n\u00ac                                                                              \u00ac\n\u00ac                                                                              \u00ac\n\u00ac                                                                              \u00ac\n%\n% Use UP and DOWN PF Keys or commands to scroll.\n% Enter END command to terminate.\n%                                                                      %\n)AREA DYNAREA\n+\n%                     CUT Prompt and Set Defaults\n+\n   The ZCUT and ZPASTE Edit macros provide a handy method to move data\n   from one Edit session to another.  The%ZCUT Default+panel provides\n   the fields for selecting the%MODE+for the ZCUT operation and for\n   setting the default options for both ZCUT and ZPASTE during future\n   operations.  The%MODE+for the ZCUT operation is ether REPLACE or ADD.\n\n   The table name can also be set for this request as well as the limit\n   on the number of lines that are allowed to be saved.  The default\n   options for the request can also be set.  Also the default options\n   for ZPASTE macro can be set to ZERO or KEEP.\n\n                 \u00a2General information on ZCUT and ZPASTE+\n+\n   The ZCUT and ZPASTE Edit macros provides a handy method to move data\n   from one Edit session to another. The ZCUT macro saves lines from an\n   Edit session. The ZPASTE macro places these lines into another Edit\n   session (or the same session).\n\n   The ZCUT macro can combine data lines with previously saved data\n   lines.  This is called ADD or APPEND mode.  The ZPASTE macro can\n   place these lines into one or more Edit sessions. The ZCUT table\n   data lines are saved when KEEP mode is active.  The Edit sessions can\n   be on different screens and/or Edit sessions started at a later time\n   provided you do not exit ISPF.\n\n   The macros use a temporary ISPF table to store/retrieve the data\n   lines.  The tables are defined with a two character table name.\n   Multiple tables can be active at the same time.  The SHOWCUT macro\n   will display the active ZCUT tables.\n\n                   \u00a2Common operands for ZCUT and ZPASTE+\n+\n   The ZCUT and ZPASTE macro have several optional operands.\n\n   The operands P or PROMPT, D or DEFAULTS provide menu panels for\n   entering the optional operands.  The operands H or HELP can be used\n   to provide access to this panel.\n\n   The lines from the ZCUT macro are saved in an ISPF table.  A two\n   character operand is used to name the table for the saved lines.\n   Multiple tables can be created. Just remember the two character table\n   name operand! The SHOWCUT macro will display all of the ZCUT tables\n   created during the current ISPF session.\n\n   A two character operand on the ZPASTE macro recalls the lines stored\n   in the ZCUT table.\n\n   The table name will default if not provided.  This default can be\n   changed with the (D)efault or (P)rompt operand.\n\n   A numeric operand sets the limit for the number of lines saved in the\n   table during a ZCUT.  Region size is the limiting factor.\n\n  %Select the lines to be saved, either MOVE or COPY.+\n      The ZCUT macro works with the Edit line commands for MOVE/COPY\n      in their several forms (M, MM, Mn, C, CC, Cn) to specify which\n      group of data lines to copy (and delete if move is specified).\n\n  %Set the MODE for the ZCUT execution, either ADD or REPLACE.+\n      The operand A or ADD for the ZCUT macro specifies that the\n      selected lines are to be added to any already saved lines in\n      the named ZCUT table.\n\n      The operand R or REPLACE for the ZCUT macro specifies that the\n      lines selected are to replace or overlay any lines already saved.\n\n      The default, if not changed, is ADD.\n\n  %Specify where to save the lines, either\n      a two character table name\n      or the default table name.+\n\n      The lines from the ZCUT macro are saved in an ISPF table. A two\n      character operand is used to name the table for the saved lines.\n      Multiple tables can be created. Just remember the two character\n      table name operand! The SHOWCUT macro will display the list of\n      created ZCUT tables.\n\n  %Specify a limit for the number of lines to copy.+\n      A numeric operand specifying the limit for the number of lines\n      to be saved in the table during a ZCUT.  Region size is the\n      limiting factor.\n\n\n                         \u00a2How to use ZPASTE+\n\n   The data lines from the ZCUT macro are saved in an ISPF table.  A two\n   character operand is used to name the table for the saved lines.\n   These lines are inserted into the edit session based on the ZPASTE\n   operands specified.\n\n   A two character operand on the ZPASTE macro recalls the lines stored\n   in the ZCUT table.\n\n       The table name will default if not provided.  This default can be\n       changed with the (D)efault or (P)rompt operand.\n\n   The \"post\" ZPASTE action for the ZCUT table.  This is called the\n   ZPASTE MODE.\n\n   A Before/After operand can be used with the X/NX operand.\n\n   A X/NX operand can be used to execute the paste operation multiple\n   times based on the eXcluded or Non-eXcluded status of the data lines.\n\n  %Specify the table name containing the data lines to be restored,\n      a two character table name\n      or the default table name.+\n\n      The lines from the ZCUT macro are saved in a table. Specify the\n      two character name of the table to use for the ZPASTE.\n      The lines from the ZCUT macro are saved in an ISPF table. A two\n      character operand is used to name the table containing the saved\n      lines.  Multiple tables can be created. Just remember the two\n      character table name operand! The SHOWCUT macro will display the\n      list of created ZCUT tables.\n\n  %Set the MODE for the ZPASTE excution, either ZERO or KEEP.+\n      The operand Z or ZERO specifies that the table is to be cleared\n      after the lines have been inserted.\n\n      The operand K or KEEP specifies that the table is not to be\n      cleared, thus the saved lines are to be kept for future ZPASTE\n      requests or to be added to by other ZCUT requests.\n\n      The default, if not changed, is ZERO.\n\n  %Specify where to insert the saved lines:\n      After or Before line command,\n      After or Before Excluded lines operand,\n      After or Before Non-Excluded lines operand.\n+\n     %After or Before line command,+\n      This is a single paste execution.  The ZPASTE macro works with the\n      Edit line commands for After or Before (A or B).  This specifies a\n      single paste execution either (B)efore the line line specified or\n      (A)fter the line speciified.\n\n      All lines previously saved will be inserted.\n\n     %After or Before operand,+\n      This is a multiple paste execution.  The data lines previously\n      saved will be inserted multiple times. The default is After.\n\n     %X or NX operand,+\n      This is a multiple paste execution.  The data lines previously\n      saved will be inserted multiple times.\n\n      The X (or excluded) operand will paste the ZCUT data lines either\n      After or Before each of the blocks of excluded lines contained\n      within the edit session.\n\n      The NX (or non-excluded) operand will paste the ZCUT data lines\n      either After or Before each of the visble or non-excluded data\n      lines contained within the edit session.\n\n\n               \u00a2Modes of Operation using ZCUT and ZPASTE+\n+\n      The use of the operands ADD, REPLACE, ZERO, and KEEP define the mode\n      for the ZCUT and ZPASTE macros.\n\n      The most common mode could be called the \"gather mode\" with operands\n      ADD and ZERO.  This is where several groups of lines are gathered from\n      here and there and finally pasted into one member.\n\n      The other mode could be called the \"distribution mode\" where one\n      group of lines is collected and then placed in several members or\n      in several spots in one member.  This uses the operands REPLACE\n      and KEEP.\n\n      The defaults can be set for the mode you like most.   Either mode\n      works when working in the \"one for one mode\" where each ZCUT is\n      followed by one ZPASTE.  If you set the default options to ADD\n      and KEEP you will have to keep track of the contents of the ZCUT\n      table (use the SHOWCUT macro) to know when to override the default\n      option with ether REPLACE or ZERO or you will continue to\n      accumulate lines.\n\n                          \u00a2How to use SHOWCUT+\n+\n  %Specify which table to display, either\n      a two character table name\n      or the select from a list.+\n\n      The lines from the ZCUT macro are saved in an ISPF table.\n      Multiple tables can be created. Specify the two character\n      table to be displayed.\n\n      Don't supply a two character table name and the SHOWCUT macro\n      will display the list of two character table names currently\n      defined. Select one of the entries from the list to display the\n      contents of the table.\n)end\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CUTPROM": {"ttr": 533, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x12\\x01\\x015?\\x01\\x02\\x17/\\x11E\\x00(\\x00(\\x00\\x00\\xd2\\xc3\\xd4\\xd9\\xe2\\xf1\\xf1@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2001-12-19T00:00:00", "modifydate": "2002-06-21T11:45:12", "lines": 40, "newlines": 40, "modlines": 0, "user": "KCMRS11"}, "text": ")ATTR DEFAULT(%+_)\n    % TYPE(TEXT) INTENS(HIGH) COLOR(WHITE) SKIP(ON)\n    \u00a2 TYPE(TEXT) INTENS(HIGH) COLOR(YELLOW)\n    + TYPE(TEXT) INTENS(LOW)  COLOR(TURQ) SKIP(ON)\n    _ TYPE(INPUT) INTENS(HIGH) CAPS(ON) JUST(LEFT) COLOR(RED)\n    \u00ac TYPE(INPUT) INTENS(HIGH) CAPS(ON) JUST(LEFT) COLOR(RED) PAD(_)\n    \u00a6 TYPE(INPUT) INTENS(HIGH) CAPS(OFF)\n)BODY EXPAND(\\\\)\n+-\\-\\-\u00a2CUT prompt panel+-\\-\\-+\n%COMMAND ===>_ZCMD                                                     +\n%\n+   Enter\u00a2END+key for no action\n%\n%Action       ====>_ACTCMD  +\u00a2ADD, REPLACE, or blank for default\n%CUT table name===>_z +      \u00a2any two character name for this one time\n+                            \u00a2blank for default\n%CUT size limit===>_CUTCOUNT+\u00a2any number 100 to 99999 for this one time\n+\n+ \u00a2ADD    +will add CUT lines at the end of previous CUT lines if any\n+ \u00a2REPLACE+will clear any previous CUT lines then add newly CUT lines\n+\n+\n+\n)INIT\n  .zvars='(CUTTBL)'\n  .CURSOR=ACTCMD\n  .HELP=CUTDEF@\n  IF (&CUTLIMIT=&Z) &CUTLIMIT=2000\n  IF (&CUTCOUNT=&Z) &CUTCOUNT=&CUTLIMIT\n)PROC\n &ACTCMD=TRANS(TRUNC(&ACTCMD,1),\n                              A,ADD\n                              R,REPLACE\n                              D,DEFAULTS\n                              H,HELP\n                              P,PROMPT\n                              *,'&ACTCMD')\n VER(&ACTCMD,LIST,ADD,REPLACE,DEFAULTS,PROMPT,HELP)\n VER(&CUTCOUNT,NB,RANGE,100,99999)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PASTEDEF": {"ttr": 535, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\t\\x01\\x015?\\x01\\x02\\x17/\\x11F\\x003\\x002\\x00\\x00\\xd2\\xc3\\xd4\\xd9\\xe2\\xf1\\xf1@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2001-12-19T00:00:00", "modifydate": "2002-06-21T11:46:09", "lines": 51, "newlines": 50, "modlines": 0, "user": "KCMRS11"}, "text": ")ATTR DEFAULT(%+_)\n    % TYPE(TEXT) INTENS(HIGH) COLOR(WHITE) SKIP(ON)\n    \u00a2 TYPE(TEXT) INTENS(HIGH) COLOR(YELLOW)\n    + TYPE(TEXT) INTENS(LOW)  COLOR(TURQ) SKIP(ON)\n    _ TYPE(INPUT) INTENS(HIGH) CAPS(ON) JUST(LEFT) COLOR(RED)\n    \u00ac TYPE(INPUT) INTENS(HIGH) CAPS(ON) JUST(LEFT) COLOR(RED) PAD(_)\n    \u00a6 TYPE(INPUT) INTENS(HIGH) CAPS(OFF)\n)BODY EXPAND(\\\\)\n+-\\-\\-\u00a2PASTE prompt and set defaults+-\\-\\-+\n%COMMAND ===>_ZCMD                                                     +\n%\n+   Enter\u00a2END+key for no action\n%\n%Action       ====>_ACTCMD  +\u00a2ZERO, KEEP, or blank for default\n%CUT table name===>_z +      \u00a2any two character name for this one time\n+                            \u00a2blank for default\n+\n+-\\-\\-\n%Set default actions for CUT and PASTE\n+\n%CUT default   ===>_CUTDEF  +\u00a2ADD or REPLACE\n%PASTE default ===>_PASTEDEF+\u00a2KEEP or ZERO\n%CUT table name===>_z +      \u00a2any two character name for default\n%CUT size limit===>_CUTLIMIT+\u00a2any number 100 to 99999 for default\n+\n+ \u00a2ADD    +will add CUT lines at the end of previous CUT lines if any\n+ \u00a2REPLACE+will clear any previous CUT lines then add newly CUT lines\n+ \u00a2ZERO   +will delete previously CUT lines after the PASTE operation\n+ \u00a2KEEP   +will keep previously CUT lines after the PASTE operation to\n+          be used by a later PASTE or added to by later CUT operations\n)INIT\n  .ZVARS='(CUTTBL, CUTTNDEF)'\n  .CURSOR=ACTCMD\n  .HELP=CUTDEF@\n  IF (&CUTTNDEF=&Z) &CUTTNDEF=AA\n  IF (&CUTLIMIT=&Z) &CUTLIMIT=2000\n  IF (&CUTTBL=&Z)   &CUTTBL=&CUTTNDEF\n)PROC\n VER(&CUTCOUNT,NB,RANGE,100,99999)\n &PASTEDEF=TRANS(TRUNC(&PASTEDEF,1),Z,ZERO,K,KEEP,*,'&PASTEDEF')\n VER(&PASTEDEF,NB,LIST,ZERO,KEEP)\n IF (&ACTCMD=&Z) &ACTCMD=&PASTEDEF\n &ACTCMD=TRANS(TRUNC(&ACTN,1),Z,ZERO,K,KEEP,*,'&ACTN')\n VER(&ACTCMD,LIST,ZERO,KEEP)\n &CUTDEF=TRANS(TRUNC(&CUTDEF,1),A,ADD,R,REPLACE,*,'&CUTDEF')\n VER(&CUTDEF,NB,LIST,ADD,REPLACE)\n VER(&CUTTNDEF,NB)\n IF (&CUTTBL=&Z) &CUTTBL=&CUTTNDEF\n VER(&CUTLIMIT,NB,RANGE,100,99999)\n VPUT (CUTDEF PASTEDEF CUTNAME CUTLIMIT) PROFILE\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PASTEPRM": {"ttr": 769, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x02\\x00\\x00\\x01\\x015?\\x01\\x02\\x17/\\x11G\\x00'\\x00'\\x00\\x00\\xd2\\xc3\\xd4\\xd9\\xe2\\xf1\\xf1@@@\"", "ispf": {"version": "01.02", "flags": 0, "createdate": "2001-12-19T00:00:00", "modifydate": "2002-06-21T11:47:00", "lines": 39, "newlines": 39, "modlines": 0, "user": "KCMRS11"}, "text": ")ATTR DEFAULT(%+_)\n    % TYPE(TEXT) INTENS(HIGH) COLOR(WHITE) SKIP(ON)\n    \u00a2 TYPE(TEXT) INTENS(HIGH) COLOR(YELLOW)\n    + TYPE(TEXT) INTENS(LOW)  COLOR(TURQ) SKIP(ON)\n    _ TYPE(INPUT) INTENS(HIGH) CAPS(ON) JUST(LEFT) COLOR(RED)\n    \u00ac TYPE(INPUT) INTENS(HIGH) CAPS(ON) JUST(LEFT) COLOR(RED) PAD(_)\n    \u00a6 TYPE(INPUT) INTENS(HIGH) CAPS(OFF)\n)BODY EXPAND(\\\\)\n+-\\-\\-\u00a2PASTE prompt panel+-\\-\\-+\n%COMMAND ===>_ZCMD                                                     +\n%\n+   Enter\u00a2END+key for no action\n%\n%Action       ====>_ACTCMD  +\u00a2ZERO, KEEP, or blank for default\n%CUT table name===>_z +      \u00a2any two character name for this one time\n+                            \u00a2blank for default\n+\n+ \u00a2ZERO   +will delete previously CUT lines after the PASTE operation\n+ \u00a2KEEP   +will keep previously CUT lines after the PASTE operation to\n+          be used by a later PASTE or added to by later CUT operations\n+\n+\n)INIT\n  .ZVARS='(CUTTBL)'\n  .CURSOR=ACTCMD\n  .HELP=CUTDEF@\n  IF (&CUTLIMIT=&Z) &CUTLIMIT=2000\n  &CUTCOUNT=&CUTLIMIT\n)PROC\n &ACTN=TRANS(TRUNC(&ACTN,1),\n                              Z,ZERO\n                              K,KEEP\n                              D,DEFAULTS\n                              H,HELP\n                              P,PROMPT\n                              *,'&ACTN')\n VER(&ACTN,LIST,ZERO,KEEP,DEFAULTS,HELP,PROMPT)\n VER(&CUTCOUNT,NB,RANGE,100,99999)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SHOWCUT": {"ttr": 771, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\t\\x00\"\\x01\\x01(\\x1f\\x01\\x015O\\x11\\x06\\x00?\\x00\\x17\\x00\\x00\\xc3\\xd1\\xd4\\xe5\\xf6\\xf3@@@@'", "ispf": {"version": "01.09", "flags": 0, "createdate": "2001-10-08T00:00:00", "modifydate": "2001-12-20T11:06:22", "lines": 63, "newlines": 23, "modlines": 0, "user": "CJMV63"}, "text": " /***REXX**************************************************/\n /*   ISPF/PDF EDIT MACRO TO WRITE LINES FROM A FILE TO A */\n /*   ISPF TABLE IN MEMBER FOR LATTER INCLUSION BY THE    */\n /*   PASTE MACRO.                                        */\n /*                                                       */\n /*   FOR HELP ON RUNNING THIS MACRO, UNDER EDIT ENTER:   */\n /*       CUT HELP                                        */\n /*                                                       */\n /*   PANEL VARIABLES:                                    */\n /*                                                       */\n /*       CUTTBLL         Table of 2 char cut tbl names   */\n /*       STBL            Row selected from table display */\n /*                                                       */\n /*********************************************************/\n    /*trace i */\n  address ispexec\n  \"ISREDIT MACRO (PARM) NOPROCESS\"\n  \"VGET (CUTTBL) PROFILE\"\n  \"CONTROL ERRORS RETURN\"\n\n  upper PARM\n\n  if length(PARM) > 0 then\n  do\n     CUTTBL = PARM\n     x = showtbl()\n     exit\n  end\n  else do\n    \"TBQUERY CUTTBLL ROWNUM(LISTMAX)\"\n    if RC \u00ac= 0 then\n    do\n       ZEDSMSG = 'No Cut tables found'\n       ZEDLMSG = 'No Cut tables have been defined'\n       \"SETMSG MSG(ISRZ001)\"\n       exit(12)\n    end\n    do forever\n       \"TBSORT CUTTBLL FIELDS(CUTTBL)\"\n       \"TBTOP CUTTBLL\"\n       \"TBDISPL CUTTBLL PANEL(SHOWCUTT)\"\n       if RC > 4 then exit\n       x = showtbl()\n    end\n  end\n\nshowtbl:\n  TblName = \"CUTPST\"||CUTTBL\n  \"TBOPEN \"TblName\" NOWRITE SHARE\"\n  if RC \u00ac= 0 then\n  do\n     ZEDSMSG = 'Cut table not found'\n     ZEDLMSG = 'Cut table 'TblName' does not exist'\n     \"SETMSG MSG(ISRZ001)\"\n     exit(12)\n  end\n  \"TBTOP \"TblName\n  LastCC = 0\n  do while LastCC < 8\n     \"TBDISPL \"TblName\" PANEL(SHOWCUTP)\"\n     LastCC = RC\n  end\n  return true\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SHOWCUTP": {"ttr": 773, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x015?\\x01\\x015?\\x180\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xd1\\xd4\\xe5\\xf6\\xf3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-12-19T00:00:00", "modifydate": "2001-12-19T18:30:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CJMV63"}, "text": ")ATTR\n @ TYPE(OUTPUT) INTENS(LOW)\n \u00ac TYPE(TEXT) SKIP(ON) INTENS(LOW)\n)BODY\n%BROWSE    Cut Table '&CUTTBL' -------------------------------------------------\n%Command ===>_ZCMD                                          \u00ac%Scroll ===>_ZSCBR+\n+******************************** Top of Data **********************************\n)MODEL\n@CTPT\n)INIT\n)PROC\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SHOWCUTT": {"ttr": 775, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00C\\x01\\x015?\\x01\\x015O\\x10B\\x00\\x1d\\x00\\x0c\\x00\\x00\\xc3\\xd1\\xd4\\xe5\\xf6\\xf3@@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "2001-12-19T00:00:00", "modifydate": "2001-12-20T10:42:43", "lines": 29, "newlines": 12, "modlines": 0, "user": "CJMV63"}, "text": ")ATTR\n @ TYPE(OUTPUT) INTENS(LOW)\n \u00ac TYPE(TEXT) SKIP(ON) INTENS(LOW)\n \u00a2 TYPE(TEXT) INTENS(HIGH) COLOR(YELLOW)\n _ TYPE(INPUT) INTENS(HIGH) COLOR(TURQ) CAPS(ON)\n)BODY EXPAND(\\\\)\n+-\\-\\-\u00a2Show CUT tables+-\\-\\-+\n%COMMAND ===>_ZCMD                                                     +\n%\n%\n%     Select a Cut Table to display\n%\n+         Two character\n+         table name\n%\n)MODEL\n    _z+  @CUTTBL\n)INIT\n  .zvars='(STBL)'\n  &VARS = '(STBL CUTTBL)'\n  &CMD = ' '\n  &STBL = ' '\n)REINIT\n  &CMD = ' '\n  &STBL = ' '\n)PROC\n  IF (&STBL = 's','S')\n     &STBL  = 'S'\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ZCUT": {"ttr": 777, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x13\\x00Q\\x01\\x01(\\x1f\\x01\\x02\\x17/\\x11S\\x00\\xca\\x00\\xa4\\x00\\x00\\xd2\\xc3\\xd4\\xd9\\xe2\\xf1\\xf1@@@'", "ispf": {"version": "01.19", "flags": 0, "createdate": "2001-10-08T00:00:00", "modifydate": "2002-06-21T11:53:51", "lines": 202, "newlines": 164, "modlines": 0, "user": "KCMRS11"}, "text": " /***REXX**************************************************/\n /*   ISPF/PDF EDIT MACRO TO WRITE LINES FROM A FILE TO A */\n /*   ISPF TABLE IN MEMBER FOR LATTER INCLUSION BY THE    */\n /*   PASTE MACRO.                                        */\n /*                                                       */\n /*   FOR HELP ON RUNNING THIS MACRO, UNDER EDIT ENTER:   */\n /*       CUT HELP                                        */\n /*                                                       */\n /*   panel variables:                                    */\n /*                                                       */\n /*       CUTCOUNT        CUT LIMIT FROM PANEL            */\n /*       CUTTBL          TWO CHAR TABLE NAME EXTENSION   */\n /*       ACTCMD          add/replace                     */\n /*                                                       */\n /*                                                       */\n /*********************************************************/\n   /* trace i */\n\n   address ispexec \"ISREDIT MACRO (P1 P2 P3) NOPROCESS\"\n   if RC \u00ac= 0 then\n   do\n      say 'Error message ' ZERRSM ZERRLM\n      exit\n   end\n\n   upper P1 P2 P3\n\n   Param.1 = P1\n   Param.2 = P2\n   Param.3 = P3\n\n address ispexec\n   \"CONTROL ERRORS RETURN\"\n   \"VGET (CUTDEF PASTEDEF CUTLIMIT CUTTNDEF) PROFILE\"\n\n ACTCMD = ''\n\n do i = 1 to 3\n\n    if Param.i = '' then leave\n\n    if (datatype(Param.i,'M') & (length(Param.i) = 2)) then\n       CUTTBL = Param.i\n    else if datatype(Param.i,'N') then CUTCOUNT = Param.i\n         else ACTCMD = Param.i\n end\n\n \"CONTROL NONDISPL\"\n\n do forever\n\n     \"DISPLAY PANEL(CUTPROM)\"\n     if RC = 8 then exit(0)\n\n          /* parse the ACTCMD commands */\n    if ACTCMD = 'HELP' then\n    do\n      \"CONTROL DISPL\"\n      \"DISPLAY PANEL(CUTHELP)\"\n      ACTCMD = ''\n      ZEDSMSG = 'ZCUT Help displayed'\n      ZEDLMSG = 'Enter ZCUT command.'\n      \"SETMSG MSG(ISRZ001)\"\n      exit\n    end\n\n    if ACTCMD = 'PROMPT' then\n    do\n      ACTCMD = ''\n      iterate\n    end\n\n    /* GET DEFAULT MODE */\n    if substr(ACTCMD, 1,1) = 'D' then leave\n\n    /* done?            */\n    if substr(ACTCMD, 1,1) = 'A' then leave\n    if substr(ACTCMD, 1,1) = 'R' then leave\n    if ACTCMD  = '' then leave\n\n end\n\n if ACTCMD \u00ac= 'D' then \"CONTROL NONDISPL\"\n\n \"DISPLAY PANEL(CUTDEF)\"\n if RC = 8 then exit(0)\n\n TblName = \"CUTPST\"||CUTTBL\n\n \"TBQUERY CUTTBLL ROWNUM(LISTMAX)\"\n if RC \u00ac= 0 then\n do\n    \"TBCREATE CUTTBLL KEYS(CUTTBL) NOWRITE SHARE\"\n    if RC \u00ac= 0 then do\n        \"TBOPEN CUTTBLL NOWRITE SHARE\"\n        if RC \u00ac= 0 then exit(12)\n    end\n end\n \"TBADD CUTTBLL\"\n\n /* PROCESS LINE COMMANDS, CHECK if C OR M WAS SPECIFIED */\n \"ISREDIT PROCESS RANGE C M\"\n if RC  >= 16 then exit(0)\n else if RC >= 4 then\n      do\n         ZEDSMSG = 'ENTER \"C\" | \"M\" LINE CMD'\n         ZEDLMSG = 'CUT REQUIRES A \"C\" OR \"M\" LINE COMMAND'\n         \"SETMSG MSG(ISRZ001)\"\n         exit(12)\n      end\n\n \"ISREDIT (CMD) = RANGE_CMD\"              /* GET THE COMMAND     */\n \"ISREDIT (LINE1) = LINENUM .ZFRANGE\"     /* FIRST LINE IN RANGE */\n \"ISREDIT (LINE2) = LINENUM .ZLRANGE\"     /* LAST LINE IN RANGE  */\n NumToCut = LINE2 - LINE1 + 1\n\n /* GET THE NUM OF LINES THAT HAVE BEEN CUT BUT NOT PASTED,  */\n /* INITIALIZE TO ZERO if FIRST TIME.                        */\n\n \"TBQUERY \"TblName\" ROWNUM(PREVMAX)\"\n if RC \u00ac= 0 then\n do\n    \"TBCREATE \"TblName\" NAMES(CTPT) NOWRITE SHARE\"\n    if RC \u00ac= 0 then do\n        \"TBOPEN \"TblName\" NOWRITE SHARE\"\n        if RC \u00ac= 0 then exit(12)\n    end\n    PREVMAX = 0\n end\n\n \"TBBOTTOM \"TblName\n if ACTCMD = 'REPLACE' then\n do\n    LastCC = 0\n    do while (LastCC = 0)\n        \"TBDELETE \"TblName\n        LastCC = RC\n    end\n    PREVMAX  = 0\n end\n PrevMaxSave = PREVMAX + 0\n PREVMAX = PREVMAX + 0\n\n /* CHECK TO SEE if THE LIMIT WILL BE EXCEEDED BY STORING   */\n /* THE LINES                                               */\n TheCount = PREVMAX + NumToCut\n if TheCount > CUTCOUNT then\n do\n    ZEDSMSG = \"> \" || CUTCOUNT || ' lines to cut'\n    ZEDLMSG = 'REDUCE THE RANGE OR CHANGE LIMIT WITH \"CUT 'TheCount'\"'\n    \"SETMSG MSG(ISRZ001)\"\n    exit(12)\n end\n\n /* CUT THE LINES TO THE TABLE */\n CutCnt = PREVMAX\n CTPT   = ''\n do i = LINE1 to LINE2\n   CutCnt = CutCnt + 1\n   \"ISREDIT (CTPT) = LINE \"i\n   \"TBADD \"TblName\n END\n\n /* If the number of lines cut this time   */\n /* is greater than the maximum cut,       */\n /* then save the new maximum.             */\n /* Paste will set this variable to        */\n /* zero if it deletes the variables.      */\n\n if CMD = 'M' then\n do\n    \"ISREDIT DELETE \" LINE1 LINE2\n    if PrevMaxSave = 0 then\n    do\n       ZEDSMSG = NumToCut || \" lines cut and deleted\"\n       ZEDLMSG = NumToCut || \" lines were cut and deleted \",\n                                \"from the current file\"\n    end\n    else do\n       ZEDSMSG = NumToCut || \" lines cut and deleted\"\n       ZEDLMSG = \"A total of \" || PrevMax || \" lines have been cut\"\n                   \"the last \" || NumToCut || \" were deleted\"\n    end\n    \"SETMSG MSG(ISRZ000)\"\n end\n else do\n   if PrevMaxSave = 0 then\n   do\n      ZEDSMSG = NumToCut || \" lines cut\"\n      ZEDLMSG = NumToCut || \" lines were cut from the \",\n                               \"current file\"\n   end\n   else do\n      ZEDSMSG = NumToCut || \" lines plus \" || PrevMaxSave || ,\n                               \" lines cut\"\n      ZEDLMSG = \"A total of \" || PrevMax || \" lines have been cut\"\n   end\n   \"SETMSG MSG(ISRZ000)\"\n end\n\n exit\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ZPASTE": {"ttr": 781, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00(\\x01\\x02\\x17\\x1f\\x01\\x02\\x17/\\x11V\\x01\\x85\\x01\\x81\\x00\\x00\\xd2\\xc3\\xd4\\xd9\\xe2\\xf1\\xf1@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2002-06-20T00:00:00", "modifydate": "2002-06-21T11:56:28", "lines": 389, "newlines": 385, "modlines": 0, "user": "KCMRS11"}, "text": " /**REXX***************************************************/\n /*   ISPF/PDF EDIT MACRO TO WRITE LINES FROM A ISPF      */\n /*   ISPF TABLE INTO THE CURRENT FILE.                   */\n /*   THIS MACRO IS USED IN CONJUNCTION WITH THE CUT      */\n /*   CUT MACRO                                           */\n /*                                                       */\n /*   SUPPORT                                             */\n /*                                                       */\n /*   FOR HELP ON RUNNING THIS MACRO, UNDER EDIT ENTER:   */\n /*     PASTE HELP                                        */\n /*********************************************************/\n  /*trace i */\n address ispexec\n\n \"ISREDIT MACRO (P1 P2 P3 P4) NOPROCESS\"\n \"CONTROL ERRORS RETURN\"\n \"VGET (CUTDEF PASTEDEF CUTLIMIT CUTNAME) PROFILE\"\n ACTCMD = ''\n CUTTBL = ''\n MsgText = ''\n Use_b4   = 'N'\n Use_excl = ''\n\n   upper P1 P2 P3 P4\n\n   Param.1 = P1      /* table name       */\n   Param.2 = P2      /* keep/zero/k/z    */\n   Param.3 = P3      /* before/after/b/a */\n   Param.4 = P4      /* x/nx             */\n\n do i = 1 to 4\n\n    if Param.i = '' then leave\n\n    if length(Param.i) = 1 then\n    do\n       select\n         when Param.i = 'A' then Use_b4 = 'N'\n         when Param.i = 'B' then Use_b4 = 'Y'\n         when Param.i = 'D' then ACTCMD = Param.i\n         when Param.i = 'H' then ACTCMD = Param.i\n         when Param.i = 'P' then ACTCMD = Param.i\n         when Param.i = 'K' then ACTCMD = Param.i\n         when Param.i = 'X' then Use_excl = 'Y'\n         when Param.i = 'Z' then ACTCMD = Param.i\n         otherwise\n         do\n            ZEDSMSG = 'Unknown parm ' Param.i\n            ZEDLMSG = \"Don't know what you want! Parm was \" Param.i\n            \"SETMSG MSG(ISRZ001)\"\n            exit\n         end\n       end\n       iterate\n    end\n\n    if length(Param.i) > 2 then\n    do\n       key_word = substr(Param.i, 1, 3)\n       select\n         when key_word = 'AFT' then Use_b4 = 'N'\n         when key_word = 'BEF' then Use_b4 = 'Y'\n         when key_word = 'DEF' then ACTCMD = Param.i\n         when key_word = 'HEL' then ACTCMD = Param.i\n         when key_word = 'EXC' then Use_excl = 'Y'\n         when key_word = 'NOT' then Use_excl = 'N'\n         when key_word = 'PRO' then ACTCMD = Param.i\n         when key_word = 'KEE' then ACTCMD = Param.i\n         when key_word = 'ZER' then ACTCMD = Param.i\n         otherwise\n         do\n            ZEDSMSG = 'Unknown parm ' || Param.i\n            ZEDLMSG = \"Don't know what you want! Parm was \" || Param.i\n            \"SETMSG MSG(ISRZ001)\"\n            exit\n         end\n       end\n       iterate\n    end\n\n    /* either it's nx or a table name! */\n\n    if Param.i == 'NX' then Use_excl = 'N'\n    else do\n       if CUTTBL == '' then\n          CUTTBL   = substr(Param.i, 1, 2)\n       else do\n          ZEDSMSG = 'Unknown parm ' || Param.i\n          ZEDLMSG = \"Don't know what you want! Parm was \" || Param.i\n          \"SETMSG MSG(ISRZ001)\"\n          exit\n       end\n    end\n end\n\n\n \"CONTROL NONDISPL\"\n\n do forever\n\n     \"DISPLAY PANEL(PASTEPRM)\"\n     if RC = 8 then exit(0)\n\n          /* parse the ACTCMD commands */\n    if ACTCMD = 'HELP' then\n    do\n      \"CONTROL DISPL\"\n      \"DISPLAY PANEL(CUTHELP)\"\n      ACTCMD = ''\n      ZEDSMSG = 'ZPASTE Help displayed'\n      ZEDLMSG = 'Enter ZPASTE command.'\n      \"SETMSG MSG(ISRZ001)\"\n      exit\n    end\n\n    if substr(ACTCMD,1,1) = 'P' then\n    do\n      ACTCMD = ''\n      iterate\n    end\n\n    /* GET DEFAULT MODE */\n    if substr(ACTCMD, 1,1) = 'D' then leave\n\n    /* done?            */\n    if substr(ACTCMD, 1,1) = 'Z' then leave\n    if substr(ACTCMD, 1,1) = 'K' then leave\n    if ACTCMD  = '' then leave\n end\n\n if ACTCMD \u00ac= 'D' then \"CONTROL NONDISPL\"\n\n \"DISPLAY PANEL(PASTEDEF)\"\n if RC = 8 then exit(0)\n\n TblName = \"CUTPST\"||CUTTBL\n\n msg1 = 'Paste ' || CUTTBL\n msg2 = 'Pasted table ' || CUTTBL\n if Use_b4 == 'Y' then msg1 = msg1 || ' b4 '\n                  else msg1 = msg1 || ' after '\n\n if Use_b4 == 'Y' then msg2 = msg2 || ' before '\n                  else msg2 = msg2 || ' after '\n\n if Use_excl == '' then msg1 = 'Pasted after one line.'\n if Use_excl == 'Y' then msg1 = msg1 || \"x'ed.\"\n if Use_excl == 'N' then msg1 = msg1 || 'nx.'\n\n if Use_excl == 'Y' then msg2 = msg2 || 'excluded lines.'\n if Use_excl == 'N' then msg2 = msg2 || 'non-excluded lines.'\n\n if ACTCMD = '' then ACTCMD = PASTEDEF\n\n /* GET THE NUMBER OF LINES VARIABLE */\n\n \"TBQUERY \"TblName\" ROWNUM(NumCut)\"\n if RC \u00ac= 0 then\n do\n    \"TBCREATE \"TblName\" NAMES(CTPT) NOWRITE SHARE\"\n    if RC = 0 then\n    do\n       ZEDSMSG = 'Use CUT before PASTE'\n       ZEDLMSG = 'The CUT table was not found - use CUT first'\n       \"SETMSG MSG(ISRZ001)\"\n       exit(12)\n    end\n    else do\n      \"TBOPEN \"TblName\" NOWRITE SHARE\"\n      if RC \u00ac= 0 then exit(12)\n      \"TBQUERY \"TblName\" ROWNUM(NumCut)\"\n    end\n end\n\n NumCut = NumCut + 0   /* force type to number */\n\n if NumCut <= 0 then\n do\n    ZEDSMSG = 'Use CUT defore PASTE'\n    ZEDLMSG = 'No data has been stored via the CUT macro'\n    \"SETMSG MSG(ISRZ001)\"\n    exit(12)\n end\n\n if Use_excl == '' then\n do\n    /* PROCESS LINE COMMANDS, CHECK IF A OR B WAS SPECIFIED */\n    \"ISREDIT PROCESS DEST\"\n    if RC >= 16 then\n    do\n      ZEDSMSG = 'Too many dest lines selected'\n      ZEDLMSG = 'Big time error in the zpaste macro!'\n      \"SETMSG MSG(ISRZ001)\"\n      exit(12)\n    end\n    else do\n       if RC = 8 then\n       do\n          MsgText = ' at EOF'\n          \"ISREDIT (ZDEST) = LINENUM .ZLAST\"\n       end\n       if RC > 8 then\n       do\n         ZEDSMSG = 'Enter \"A\"|\"B\" line cmd'\n         ZEDLMSG = 'PASTE requires an \"A\" or \"B\" line command'\n         \"SETMSG MSG(ISRZ001)\"\n         exit(12)\n       end\n    end\n    \"ISREDIT (LINEPTR) = LINENUM .ZDEST\"\n    LINEPTR = LINEPTR + 0\n    x = paste_after()\n end\n\n if Use_excl == 'Y' then\n do\n    \"ISREDIT UP MAX\"\n    if rc > 4 then\n    do\n      ZEDSMSG = 'Max up failed'\n      ZEDLMSG = 'No idea what could have possibly gone wrong.'\n      \"SETMSG MSG(ISRZ001)\"\n      exit(12)\n    end\n\n    do_last = 0\n    do forever\n       \"ISREDIT LOCATE NEXT EXCLUDED\"\n       if rc == 4 then leave\n       if rc > 0 then\n       do\n         ZEDSMSG = 'What is excl status?'\n         ZEDLMSG = 'No idea what could have possibly gone wrong.'\n         \"SETMSG MSG(ISRZ001)\"\n         exit(12)\n       end\n\n       if Use_b4 == 'N' then\n       do\n          \"ISREDIT DOWN 1\"\n          if rc == 2 then\n          do\n             do_last = 1\n             leave\n          end\n       end\n\n       if \u00acdo_last then\n       do\n          \"ISREDIT (LINEPTR, LINETO) = DISPLAY_LINES\"\n          if rc > 0 then\n          do\n            ZEDSMSG = 'What is excl status?'\n            ZEDLMSG = 'No idea what could have possibly gone wrong.'\n            \"SETMSG MSG(ISRZ001)\"\n            exit(12)\n          end\n       end\n\n       LINEPTR = LINEPTR + 0\n\n       \"ISREDIT (Xstat) = XSTATUS &LINEPTR\"\n       if rc > 0 then\n       do\n         ZEDSMSG = 'What is excl status?'\n         ZEDLMSG = 'No idea what could have possibly gone wrong.'\n         \"SETMSG MSG(ISRZ001)\"\n         exit(12)\n       end\n\n       if Use_b4 == 'N' then if XSTAT = 'NX' then x = paste_before(); else nop;\n                        else if XSTAT = 'X'  then x = paste_before(); else nop;\n\n       LINEPTR = LINEPTR + 1\n       \"ISREDIT (LASTPTR) = LINENUM .ZLAST\"\n       LASTPTR = LASTPTR + 0\n       if LINEPTR > LASTPTR then leave\n    end\n\n    if do_last then\n    do\n       \"ISREDIT (LINEPTR) = LINENUM .ZLAST\"\n       LINEPTR = LINEPTR + 0\n       x = paste_after()\n    end\n\n end\n if Use_excl == 'N' then\n do\n    \"ISREDIT (LinePtr) = LINENUM .ZFIRST\"\n    LinePtr = LinePtr + 0\n    if rc > 0 then\n    do\n      ZEDSMSG = 'Cursor not on line 1'\n      ZEDLMSG = 'No idea what could have possibly gone wrong.'\n      \"SETMSG MSG(ISRZ001)\"\n      exit(12)\n    end\n\n\n    do forever\n       \"ISREDIT (Xstat) = XSTATUS &LINEPTR\"\n       if rc > 0 then\n       do\n         ZEDSMSG = 'What is excl status?'\n         ZEDLMSG = 'No idea what could have possibly gone wrong.'\n         \"SETMSG MSG(ISRZ001)\"\n         exit(12)\n       end\n\n       if Xstat = 'NX' then\n          if Use_b4 == 'Y' then x = paste_before()\n                           else x = paste_after()\n\n       LinePtr = LinePtr + 1\n       \"ISREDIT (LASTPTR) = LINENUM .ZLAST\"\n       LASTPTR = LASTPTR + 0\n       if LinePtr > LastPtr then leave\n    end\n end\n /* If KEEP parameter was not given and no lines were truncated, */\n /* remove all rows from the table.                          */\n\n if ACTCMD = 'ZERO' then\n do\n    LCC=0\n    \"TBBOTTOM \"TblName\n    do while (LCC = 0)\n       \"TBDELETE \"TblName\n       LCC = RC\n    end\n end\n\n /* Check if truncation occurred, if so display message */\n if Trunc_count > 0 then\n do\n     ZEDSMSG = Trunc_count' lines truncated'\n     ZEDLMSG = 'Current record length shorter than origin',\n               '- 'Trunc_count' OF 'NumCut' records were truncated'\n     \"SETMSG MSG(ISRZ001)\"\n end\n else do\n     if Use_excl == '' then\n        ZEDSMSG = NumCut' lines pasted'||MsgText\n     else\n        ZEDSMSG = msg1\n\n     if Use_excl == '' then\n        ZEDLMSG = NumCut' lines were pasted into the current file'||MsgText\n     else\n        ZEDLMSG = msg2\n     \"SETMSG MSG(ISRZ000)\"\n end\n\n LINE1 = ZDEST + 1\n \"ISREDIT CURSOR = &LINE1 0\"\n exit\n\n\npaste_before:\n    /* \"ISREDIT (ZDEST) = LINENUM .ZCSR\"  */\n    ZDEST = LINEPTR\n    Trunc_count = 0\n    /* GET EACH CUT LINE FROM THE TABLE AND ADD IT TO THE FILE */\n    i = NumCut\n    \"TBTOP \"TblName\n    do i = 1 to NumCut\n      \"TBSKIP \"TblName\" NUMBER(+1)\"\n      \"ISREDIT LINE_BEFORE &ZDEST = DATALINE (CTPT)\"\n      if RC = 4 then Trunc_count = Trunc_count + 1\n      ZDEST = ZDEST + 1\n    end\n    LINEPTR = ZDEST\nreturn 1\n\npaste_after:\n    /* \"ISREDIT (ZDEST) = LINENUM .ZCSR\"  */\n    ZDEST = LINEPTR\n    Trunc_count = 0\n    /* GET EACH CUT LINE FROM THE TABLE AND ADD IT TO THE FILE */\n    i = NumCut\n    \"TBBOTTOM \"TblName\n    do i = NumCut to 1 by -1\n      \"ISREDIT LINE_AFTER &ZDEST = DATALINE (CTPT)\"\n      if RC = 4 then Trunc_count = Trunc_count + 1\n      \"TBSKIP \"TblName\" NUMBER(-1)\"\n    end\n    LINEPTR = LINEPTR + NumCut\n return 1\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT580/FILE580.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT580", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}