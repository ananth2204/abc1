                A WHOHAS Dialog Using QUERYENQ

Recently, I have been experimenting with the new z/OS-only
ISPF service named QUERYENQ. Initially, when reading about
and experimenting with the QUERYENQ service, I found one
thing about the service a bit strange. What was so strange?

Unlike any other ISPF service, it returns an open ISPF table
positioned at the top (current row pointer set to zero). If
any ENQUEUE is being held on the Qname / Rname pair passed
to QUERYENQ, the returned table contains one row for every
ENQUEUE held.

After working with QUERYENQ for a while using a few practice
REXX EXECs, this table method began to make sense to me. In
fact, I kept thinking about the advice that I have given out
over the years: An ISPF dialog doesn't have to be the one
that created a table in order to manipulate the table.

Why not have ISPF services create a standard ISPF table?
Once I got comfortable with this, everything was good.

WHOHAS as a TSO Command

Over the years, I have encountered a TSO command named
WHOHAS at some MVS installations (but not all). It is not an
IBM-distributed TSO command. I've seen a few variations of
it as well. Some variations allow more parameters, such as
the scope of the ENQUEUE. Others versions are more rigid,
allowing only a scope of SYSTEM.  I even ran across a
variation of it named WHOGOT. The grammar of this particular
command name always tickled me.

As I fiddled around with the QUERYENQ service, a thought
came to me: Why not write a REXX wrapper around QUERYENQ
that pops-up a scrollable window of all held ENQUEUEs on a
dataset?

An hour or two later, I had it working quite well. The
balance of this month's column will explain the basics of
the REXX WHOHAS EXEC.

WHOHAS - REXX and ISPF

I should point out that the REXX WHOHAS is intended only
for full-screen, interactive ISPF. The entire dialog has
only two components: The REXX EXEC and a single ISPF panel.
The source code is in this pds as member WHOHAS so that you
can follow along with the narrative and you can execute it.
The panel is also here in this pds as member CLCPQENQ.

I will not delve too deeply into the QUERYENQ service
itself. I'll only discuss it where appropriate. The basic
format of the QUERYENQ can be seen in member WHOHAS. For a
more detailed explanation of QUERYENQ, you should read the
z/OS ISPF Services Guide manual.  Note that Qname and Rname
are parameters to QUERYENQ. They must be REXX variables
whose values have been set prior to invoking QUERYENQ.

And this brings me to the first bit of REXX explanation.
Since many ENQUEUEs use the dataset name as the Rname,  I
immediately ran into some confusion with regard to whether
to quote the dataset name or not when preparing the Rname
QUERYENQ variable.

The simple answer is: Don't enclose any dataset name in
quotes for QUERYENQ purposes. At first, this might seem to
violate a long-held TSO/ISPF convention. But then, you must
remember that the Rname value can be anything. It doesn't
necessarily have to be a dataset name.

REXX Functions to the Rescue

Since the ARG dataset name might be enclosed in quotes (such
as when you invoke a REXX EXEC as a line command at ISPF
Option 3.4) or it might not be, the REXX STRIP function is
used to remove any quotes, if present. Then, the LISTDSI
function is used to verify that the dataset has a valid,
cataloged name.

The LISTDSI function returns a lot of dataset attributes.
Two of these attributes are used to determine if an asterisk
should be appended to the Minor dataset name variable before
passing it to QUERYENQ.

First the SYSDSORG variable is queried to see if it is PO
(partitioned organization, or a PDS). If it is PO dataset,
then the REXX LEFT function is used to determine if the
left-most character of SYSREFCM is an F (or Fixed-length).

The extra checks are there to expand the Minor name with an
asterisk in order to pick up more ENQUEUEs, such as any
SPFEDIT-style ENQUEUE.

If a member of a fixed-length PDS is being edited, the Minor
name will include the member name as well as the complete
dataset name. Normally, SYSDSN-style ENQUEUEs include only
the dataset name. The WHOHAS REXX EXEC has already set the
Major variable to a single asterisk so that ANY Major name
will match.

This is why I append an asterisk to the passed dataset name
in the Minor (Rname) variable under the specified
conditions. Note that this could result in QUERYENQ
returning too many ENQUEUEs on other datasets that begin
with identical qualifiers. This would be especially true if
the dataset name was short.

QUERYENQ Return Codes

There are only four QUERYENQ return codes that the WHOHAS
REXX considers: 0, 2, 4 and 8. Here's what they indicate:

       * 0 | Indicates that an ENQUEUE is being held but some
             might be missing
       * 2 | Indicates all ENQUEUEs returned, even cross-system
             ENQUEUEs
       * 4 | ENQUEUEs held but table truncated due to limit
       * 8 | No ENQUEUE held

The REXX code will display the table returned by QUERYENQ in
a small pop-up panel if the return code from QUERYENQ is
"less than" five.

If the return code is eight, an ISPF message is displayed
stating | No ENQUEUE held.

Other things to note

When you are using QUERYENQ and an ISPF table is returned
(RC=0, 2 or 4), it is up to the programmer to delete the
table when finished with it. This is important because ISPF
tables are persistent. Simply ending your dialog function
will not cause the table to be deleted.

It will live on and the next time you invoke whatever
created the QUERYENQ table, you will likely get an error
message reading: Table already exists.

Whenever a message needs to be set in a simple dialog such
as WHOHAS, I prefer to use the IBM-supplied generic message
named ISPZ000. If the ZMSG000S variable is set to spaces and
the ZMSG000L contains the actual message text, after issuing
the SETMSG, only the long message will display.

If the user has the Display Long Message in Pop-Up option
set (at Option 0, Settings) the message will appear in a
nice little rectangular pop-up window.

No processing at all is required for the table that
QUERYENQ returns, other than the TBEND, that is. The
TBDISPL command uses the panel named CLCPQENQ that contains
a model line naming the columns returned by QUERYENQ.

Conclusion

The entire dialog is simple and easy to use. Place the panel
in an 80-byte PDS and code the name of the PDS with the
panel in the LIBDEF statement. Place the WHOHAS in a PDS at
SYSEXEC (or SYSPROC or even an ALTLIB'd PDS) and invoke it.

Just a reminder: QUERYENQ is the newest of the ISPF services
and did not appear until z/OS was released. Also, no PDF
MODEL exists for QUERYENQ as of z/OS V1R4.

The missing MODEL has been reported to IBM.

Tip of the Month: How about wrapping a point-and-shoot
around the WHOHAS dialog?




