/**** REXX ICSFSTAT ***************************************************/
/*                                                                    */
/*  REXX-Programmm                      : ICSFSTAT                    */
/*   |                                                                */
/*   '-> Unterprogramme (intern)        : -----                       */
/*   |   Unterprogramme (extern)        : -----                       */
/*   |                                                                */
/*   '-> Messages                       : -----                       */
/*   |                                                                */
/*   '-> Panels                         : icsfmp01, icsfmp02, icsfmp03*/
/*   |                                    icsfmp04,                   */
/*   |                                    icsfhlp1...icsfhlp5         */
/*   |                                                                */
/*   '-> Tables                         : -----                       */
/*   |                                                                */
/*   '-> Skeletons                      : -----                       */
/*                                                                    */
/*  History:                                                          */
/*  lvl 001 : base version                                01.01.2002  */
/*  lvl 002 : update to new CSFDACC with 10 services      14.05.2008  */
/*            some doku updates and implementation of                 */
/*            LUSER to show all users which are using                 */
/*            crypto operations.                                      */
/*                                                                    */
/*  Utility to display ICSF Statistics.                               */
/*                                                                    */
/*  More description found in SYS1.MODGEN member CSFCCVT and CSFDACC. */
/*                                                                    */
/*  CCVT:                                                             */
/*  The CCVT is the base control block for ICSF/MVS. The CCVT         */
/*  contains addresses of common areas for use by ICSF/MVS            */
/*  components.  Indicators in the CCVT provide status                */
/*  of ICSF/MVS.                                                      */
/*                                                                    */
/*  DACC:                                                             */
/*  The DACC is the base control block for ICSF to collect            */
/*  Performance measurements for RMF to report on. This control       */
/*  block is the programming interface. The count fields are          */
/*  double-word length.                                               */
/*  The following services will have data collected:                  */
/*  CSNBENC - Encipher:                                               */
/*  - This will be done for single DES separately.                    */
/*    Collect number of service calls, number of                      */
/*    bytes of data enciphered, number of CMD instructions            */
/*    used to encipher the data.                                      */
/*  - Double and triple DES will be counted together.                 */
/*    collect number of service calls, number of                      */
/*    bytes of data enciphered, number of CMD instructions            */
/*    used to encipher the data.                                      */
/*  CSNBDEC - Decipher:                                               */
/*  CSNBDEC - Decipher:                                               */
/*  - This will be done for single DES separately.                    */
/*    Collect number of service calls, number of                      */
/*      bytes of data deciphered, number of CMD instructions          */
/*      used to decipher the data.                                    */
/*    - Double and triple DES will be counted together.               */
/*      collect number of service calls, number of                    */
/*      bytes of data deciphered, number of CMD instructions          */
/*      used to decipher the data.                                    */
/*    CSNBMGN - MAC_Generate:                                         */
/*    - Single and varous double key MAC will be                      */
/*      gathered together.                                            */
/*      Collect number of service calls, number of                    */
/*      bytes of data MACd, number of PCMF instructions.              */
/*    CSNBMVR - MAC_Verify:                                           */
/*    - Single and varous double key MAC will be                      */
/*      gathered together.                                            */
/*      Collect number of service calls, number of                    */
/*      bytes of data MACd, number of PCMF instructions.              */
/*    CSNBOWH - One_Way_Hash:                                         */
/*    - For SHA-1,                                                    */
/*      Collect number of service calls, number of                    */
/*      bytes of data hashed, number of PCMF instructions             */
/*      for SHA-1.                                                    */
/*    CSNBPTR - PIN_Translate:                                        */
/*    - Collect number of service calls only.                         */
/*    CSNBPVR - PIN_Verify:                                           */
/*    - Collect number of service calls only.                         */
/*    CSNBOWH - One_Way_Hash:                                         */
/*    - For SHA-256                                                   */
/*      Collect number of service calls, number of                    */
/*      bytes of data hashed, number of PCMF instructions             */
/*      for SHA-256.                                                  */
/*                                                                    */
/*  Author: Karl-Heinz Doppelfeld                                     */
/*          Karl-Heinz.Doppelfeld§Sparkassen-Informatik.de            */
/*                                                                    */
/*  rev : 13.02.07 insert statistic function                          */
/*                                                                    */
/**** REXX ************************************************************/
unitname = '3390'    /* set unit for temp. datasets.     */
                     /* Change this if allocations fail  */

NUMERIC  DIGITS 20
CVT      = C2d(Storage(10,4))                /* point to cvt         */
SCVT     = C2d(Storage(D2x(CVT + 200),4))    /* point to scvt        */
CCVT     = C2d(Storage(D2x(SCVT + 184),4))   /* point to csfccvt     */

CVTPCCAT = c2d(Storage(d2x(CVT+764),4))      /* point to pccat       */
PCCA     = Storage(d2x(CVTPCCAT+4),4)        /* point to pcca        */
IF PCCA  ¬= '00000000'X THEN
   PCCAMDL  = Storage(d2x(c2d(PCCA)+12),4)   /* get CPU Model        */

if (ccvt <> 0) then do
  CCVTSFG1 = c2x(Storage(D2x(CCVT + 36 ),1)) /* get ccvt Flag1       */
  CCVTSFG1 = x2b(CCVTSFG1)
  CCVTFLAG = c2x(Storage(D2x(CCVT + 37 ),1)) /* get ccvt Flag        */
  CCVTFLAG = x2b(CCVTFLAG)
  CCVTHFLG = c2x(Storage(D2x(CCVT + 80 ),1)) /* get ccvt Flag        */
  CCVTHFLG = x2b(CCVTHFLG)
  CCVTFMID =    (Storage(D2x(CCVT + 136),8)) /* get FMID             */
  CCVTASID = C2x(Storage(D2x(CCVT + 42 ),2)) /* get ASID hex         */

  if (substr(CCVTSFG1,1,1) = 1) then CCVTACT  = 'Y'
    else CCVTACT  = 'N'                /* ICSF Services active       */
  if (substr(CCVTSFG1,2,1) = 1) then CCVTMK   = 'Y'
    else CCVTMK   = 'N'                /* At least one Int. crypto.  */
                                       /* feature with valid m-Key   */
  if (substr(CCVTSFG1,3,1) = 1) then CCVTINIT = 'Y'
    else CCVTINIT = 'N'                /* ICSF initialization comp.  */
  if (substr(CCVTSFG1,4,1) = 1) then CCVTCSF  = 'Y'
    else CCVTCSF  = 'N'                /* ICSF is active and CUSP/PCF*/
                                       /* is not active              */
  if (substr(CCVTSFG1,5,1) = 1) then CCVTCOMP = 'Y'
    else CCVTCOMP = 'N'                /* compatibility is permitted */
  if (substr(CCVTSFG1,6,1) = 1) then CCVTHW   = 'Y'
    else CCVTHW   = 'N'                /* At least one valid crypto  */
                                       /* unit.                      */
  if (substr(CCVTSFG1,7,1) = 1) then CCVTCUCV = 'Y'
    else CCVTCUCV = 'N'                /* SEC250 level or crypto abov*/
  if (substr(CCVTSFG1,8,1) = 1) then CCVTCCFU = 'Y'
    else CCVTCCFU = 'N'                /* Crypto. coprocessor feature*/
                                       /* is in use.                 */
  if (substr(CCVTFLAG,1,1) = 1) then CCVT31AM = 'Y'
    else CCVT31AM = 'N'                /* VTAM puts terminal buffer  */
                                       /* above 16MB line.           */
  if (substr(CCVTFLAG,2,1) = 1) then CCVTENVT = 'Y'
    else CCVTENVT = 'N'                /* Hdwre environment tested   */
  if (substr(CCVTFLAG,3,1) = 1) then CCVTDMAC = 'Y'
    else CCVTDMAC = 'N'                /* GTMAC opcode in hardware   */
  if (substr(CCVTFLAG,4,1) = 1) then CCVTCCPH = 'Y'
    else CCVTCCPH = 'N'                /* PCI crypto. coprocessor    */
                                       /* hardware instruction avail.*/
  if (substr(CCVTFLAG,5,1) = 1) then CCVTCCP  = 'Y'
    else CCVTCCP = 'N'                 /* At least one PCI crypto.   */
                                       /* coprocessor is active.     */
  if (substr(CCVTFLAG,6,1) = 1) then CCVTENVK = 'Y'
    else CCVTENVK = 'N'                /* Add'l hrdwre envir. tested */
  if (substr(CCVTFLAG,7,1) = 1) then CCVTCCPO = 'Y'
    else CCVTCCPO = 'N'                /* At least one PCI crypto.   */
                                       /* coprocessor is online.     */
  if (substr(CCVTHFLG,1,1) = 1) then CCVTACF  = 'Y'
    else CCVTACF  = 'N'                /* Crypto assist instructions */
                                       /* available.                 */
  if (substr(CCVTHFLG,2,1) = 1) then CCVTASCD = 'Y'
    else CCVTASCD = 'N'                /* Additional secure Crypto s */
                                       /* device available.          */
  if (substr(CCVTHFLG,3,1) = 1) then CCVTS64C = 'Y'
    else CCVTS64C = 'N'                /* Support for 64-bit callers */
end
else do
  CCVTACT  = 'N'
  CCVTMK   = 'N'
  CCVTINIT = 'N'
  CCVTCSF  = 'N'
  CCVTCOMP = 'N'
  CCVTHW   = 'N'
  CCVTCUCV = 'N'
  CCVTCCFU = 'N'
  CCVT31AM = 'N'
  CCVTCCPH = 'N'
  CCVTCCP  = 'N'
  CCVTENVK = 'N'
  CCVTCCPO = 'N'
  CCVTACF  = 'N'
  CCVTASCD = 'N'
  CCVTS64C = 'N'
  CCVTFMID = ''
  CCVTASID = ''
end

If ((CCVTHW   = 'N') & (CCVTCCP = 'N')) then
  do
    zedsmsg = 'Crypto error ||'
    zedlmsg = 'No crypto (co)processor available.'
    address ispexec "SETMSG MSG(ISRZ001) MSGLOC(zcmd)"
  End

If ((CCVTACT = 'N') | (CCVTINIT = 'N')) then
  do
    zedsmsg = 'ICSF error ||'
    zedlmsg = 'ICSF initialization not complete'
    address ispexec "SETMSG MSG(ISRZ001) MSGLOC(zcmd)"
  End

If (CCVTACF = 'N') then
  do
    zedsmsg = 'CPACF inactiv'
    zedlmsg = 'CPACF not activated on the hardware.'
    address ispexec "SETMSG MSG(ISRZ001) MSGLOC(zcmd)"
  End

If (CCVT = 0) then
  do
    zedsmsg = 'CCVT is ZERO|'
    zedlmsg = 'ICSF CCVT not initialized; contact Sysprog|'
    address ispexec "SETMSG MSG(ISRZ001) MSGLOC(zcmd)"

    /* EXIT coding to free dynamic alloc. Panel-library */

/*
    address ispexec "LMFREE DATAID(&TMPPNL)"
    address ispexec "LIBDEF ISPPLIB "
    Address tso "FREE F($UPDPAN)"
*/

    exit
  End

csfdacc  = C2d(Storage(D2x(CCVT + 276),4))   /* point to csfdacc */

servcnt  = C2d(Storage(D2x(csfdacc + 12),2)) /* count services   */
servlen  = C2d(Storage(D2x(csfdacc + 14),2)) /* service length   */

call BuildTempPanel  /* build temp panel and concat it via libdef */

address ispexec "ADDPOP"
do forever
  call GetActualCounts
  address ispexec "display panel(icsfmp01)"
  if (rc > 4) then leave

  if (word(zcmd,1) = 'LUSER') then
    do
      zcmd = ''
      jfilter = '*'
      address ispexec "addpop"
      do forever
        call GetAllCryptoUser
        address ispexec "tbvclear tmptbl"
        if (jfilter <> '*') then
          do
            address ispexec "tbtop  tmptbl"
            do forever
              address ispexec "tbskip tmptbl"
              if (rc > 0) then leave
              if (wildcard(jobname,jfilter) = 0) then
                ispexec "tbdelete tmptbl"
            end
            jobname = jfilter
          end
        else
          nop
        address ispexec "tbdispl tmptbl panel(icsfmp03)"
        if (rc > 4) then
          do
            address ispexec "rempop"
            leave
          end
      end
    end
  if (word(zcmd,1) = 'GO') then
    do
      parse var zcmd . acctime
      if (SYSCALLS('ON') > 0) then
        do
          zerrsm  = 'Stat. unavailable'
          zerrlm  = 'SYSCALL(ON) > 0; needed waitroutine',
                    'could not be used'
          zerralrm = 'YES'       /* msg - with alarm */
          address ISPEXEC "SETMSG MSG(ISRZ002)"
          zcmd = ''
          iterate
        end
      if (acctime > 300) then
        do
          zerrsm  = 'Acctime > 300s'
          zerrlm  = 'The limit for the accumulation time',
                    'is 300 seconds'
          zerralrm = 'YES'       /* msg - with alarm */
          address ISPEXEC "SETMSG MSG(ISRZ002)"
          zcmd = ''
          iterate
        end
      if (acctime = '') then
        acctime = 10    /* set default to 10 Seconds */

      act = right(acctime,3,' ') /* justify acctime for panel display */
      call DisplayStatus SET acctime
      call GetActualCounts
      strttime = time('S')
      do i = 1 to servcnt
        interpret 'srv'i'cn1_save = srv'i'cn1'
        interpret 'srv'i'cn2_save = srv'i'cn2'
        interpret 'srv'i'cn3_save = srv'i'cn3'
      end
      waittime = min(acctime%10,10)
      call DisplayStatus '$'
      do ii = 1 to acctime/waittime
        call RexxWait waittime
        starcnt = format(20/acctime*ii*waittime,2,0)
        starcnt = right('',min(starcnt,20),'$')
        call DisplayStatus starcnt
      end
      call GetActualCounts
      do i = 1 to servcnt
        interpret 'service = srv'i
        if ((service = "PIN_Translate ") | (service = "PIN_Verify ")),
          then do
            interpret 'srv'i'cn1 = srv'i'cn1 - srv'i'cn1_save'
            interpret 'srv'i'cn2 = "no value"'
            interpret 'srv'i'cn3 = "no value"'
          end
        else
          do
            interpret 'srv'i'cn1 = srv'i'cn1 - srv'i'cn1_save'
            interpret 'srv'i'cn2 = srv'i'cn2 - srv'i'cn2_save'
            interpret 'srv'i'cn3 = srv'i'cn3 - srv'i'cn3_save'
          end
      end
      call DisplayStatus RESET

      zcmd = ''
      address ispexec "CONTROL DISPLAY SAVE"
      address ispexec "ADDPOP"
      address ispexec "display panel(icsfmp02)"
      address ispexec "REMPOP"
      address ispexec "CONTROL DISPLAY RESTORE"
    end
end

address ispexec

"REMPOP"
"LMFREE DATAID(&TMPPNL)"
"LIBDEF ISPPLIB "
Address tso
"FREE F($UPDPAN)"

exit

DisplayStatus:procedure expose char1 act
arg shadow1 acctime

 address ispexec

 if (shadow1 = 'SET') then
   do
     select
       when (acctime < 100) then
         do
           midval = right(acctime/2,2,'.')
           endval = right(acctime,2,'.')
           char1   = '0.......'midval'.......'endval's'
         end
       when (acctime < 1000) then
         do
           midval = right(acctime/2,3,'.')
           endval = right(acctime,3,'.')
           char1   = '0......'midval'......'endval's'
         end
       otherwise
         nop
     end
     shadow1 = '$'
     "ADDPOP ROW(2) COLUMN(5)"
     "control display lock"
     "display panel(icsfmp04)"
   end
 else
   do
     if (shadow1 = 'RESET') then
       "REMPOP"
     else
       do
         "CONTROL DISPLAY LOCK"
         "DISPLAY"
       end
   end
Return

GetActualCounts:
  do i = 1 to servcnt
    offset = 16 + 32 * (i - 1)
    interpret 'srv'i'     = Storage(D2x(csfdacc + offset),8)'
    interpret 'if (srv'i' = ENCSDES) then service = ENCSDES'
    interpret 'if (srv'i' = ENCTDES) then service = ENCTDES'
    interpret 'if (srv'i' = DECSDES) then service = DECSDES'
    interpret 'if (srv'i' = DECTDES) then service = DECTDES'
    interpret 'if (srv'i' = MACGEN ) then service = MACGEN '
    interpret 'if (srv'i' = MACVER ) then service = MACVER '
    interpret 'if (srv'i' = OWH    ) then service = OWH '
    interpret 'if (srv'i' = PTR    ) then service = PTR '
    interpret 'if (srv'i' = PVR    ) then service = PVR '
    interpret 'if (srv'i' = OWH256 ) then service = OWH256 '
    interpret 'srv'i'cn1 = C2d(Storage(D2x(csfdacc + offset + 8),8))'
    interpret 'srv'i'cn2 = C2d(Storage(D2x(csfdacc + offset + 16),8))'
    interpret 'srv'i'cn3 = C2d(Storage(D2x(csfdacc + offset + 24),8))'
    select
      when (service = ENCSDES) then
        do
          interpret 'srv'i' = "Encipher Single DES"'
        end
      when (service = ENCTDES) then
        do
          interpret 'srv'i' = "Encipher Triple DES"'
        end
      when (service = DECSDES) then
        do
          interpret 'srv'i' = "Decipher Single DES"'
        end
      when (service = DECTDES) then
        do
          interpret 'srv'i' = "Decipher Triple DES"'
        end
      when (service = MACGEN ) then
        do
          interpret 'srv'i' = "MAC_Generate"'
        end
      when (service = MACVER ) then
        do
          interpret 'srv'i' = "MAC_Verify"'
        end
      when (service = OWH    ) then
        do
          interpret 'srv'i' = "One_Way_Hash"'
        end
      when (service = OWH256 ) then
        do
          interpret 'srv'i' = "One_Way_Hash_256"'
        end
      when (service = PTR    ) then
        do
          interpret 'srv'i' = "PIN_Translate "'
          interpret 'srv'i'cn2 = "no value"'
          interpret 'srv'i'cn3 = "no value"'
        end
      when (service = PVR    ) then
        do
          interpret 'srv'i' = "PIN_Verify "'
          interpret 'srv'i'cn2 = "no value"'
          interpret 'srv'i'cn3 = "no value"'
        end
      otherwise
        nop
    end
  end
RETURN

WILDCARD: PROCEDURE
  ARG name,pattern                   /* parse arguments */
/*SAY name pattern*/
  IF pattern='*' THEN RETURN 1       /* we have a match */
  n=1
  DO p=1 TO LENGTH(pattern)
    p1=SUBSTR(pattern,p,1)
    SELECT
      WHEN p1=SUBSTR(name,n,1) THEN n=n+1
      WHEN p1='%' THEN n=n+1
      WHEN p1='*' THEN DO
        IF p=LENGTH(pattern) THEN RETURN 1
        n=INDEX(name,SUBSTR(pattern,p+1,1),n+1)
        IF n=0 THEN RETURN 0        /* mismatch, exit */
        END
      OTHERWISE RETURN 0            /* mismatch, exit */
      END
  END
  RETURN n=LENGTH(name)+1

GetAllCryptoUser:
/*** REXX GetAllCryptoUser *******************************************/
/*                                                                   */
/* Print a list of address spaces which are using crypto operations. */
/*                                                                   */
/* Use the field ASSBFSC in the ASSB filled by IEAMFCNT - Interface  */
/* to the Feature count service routine.                             */
/* A descriptions can be found in SYS1.MACLIB(IEAMFCNT).             */
/*                                                                   */
/* K.Doppelfeld   13.05.08                                           */
/*                                                                   */
/*********************************************************************/
cvt=ptr(16)                            /* Get CVT                    */
asvt=ptr(cvt+556)+512                  /* Get asvt                   */
asvtmaxu=ptr(asvt+4)                   /* Get max asvt entries       */

address ispexec "control errors return"
                                       /* build a temp. tabele to    */
address ispexec "tbclose tmptbl"       /* store and display all users*/
address ispexec "tberase tmptbl"       /* which are using crypto     */
table_row = "JOBNAME ASID JOBID CRYPCNT"  /* services.               */
address ispexec "tbcreate tmptbl names("table_row") nowrite replace"
address ispexec "control errors cancel"

Do a = 0 to asvtmaxu - 1
  ascb=stg(asvt+16+a*4,4)              /* Get ptr to ascb (Skip
                                          master)                    */
  If bitand(ascb,'80000000'x) = '00000000'x Then /* If in use        */
    Do
      ascb=c2d(ascb)                    /* Get ascb address          */
      xascb=d2x(ascb)                   /* Get ascb address          */
      cscb=ptr(ascb+56)                 /* Get CSCB address          */
      assb=ptr(ascb+336)                /* Get assb address          */
      ASSBFSC =x2d(c2x(stg(assb+164,4))) /* crypto counter   */
      jsab=ptr(assb+168)                /* Get jasb address          */
      chtrkid=stg(cscb+28,1)           /* Check addr space type      */
      ascbjbns=ptr(ascb+176)           /* Get ascbjbns               */
      ascbjbni=ptr(ascb+172)           /* Get ascbjbni               */
      ascbasid=c2x(stg(ascb+36,2))     /* Get asid                   */
      ascbrctf=ptr(ascb+102)           /* ascb rctf                  */
      jsabuser=stg(jsab+44,8)          /* Get userid from jsab       */
      jsabjobi=stg(jsab+20,8)          /* Get jobid  from jsab       */

      if (ASSBFSC <> 0) then
        do
          If chtrkid='03'x Then        /* Batch Job or Initiator     */
            do
              if (ascbjbni<>0) then
                do
                  Jobname = stg(ascbjbni,8)
                  Asid    = ascbasid
                  Jobid   = jsabjobi
                  Crypcnt = right(ASSBFSC,10,' ')
                  address ispexec "tbadd tmptbl"
                end
              else
                nop
            end
          else                         /* all other workers          */
            do
              Jobname = stg(ascbjbns,8)
              Asid    = ascbasid
              Jobid   = jsabjobi
              Crypcnt = right(ASSBFSC,10,' ')
              address ispexec "tbadd tmptbl"
            end
        end
      else
        nop
    End
End
address ispexec "tbtop   tmptbl"
address ispexec "tbsort  tmptbl fields(jobname)"
Return

/*********************************************************************/
/* storage routines                                                  */
/*********************************************************************/
ptx: return c2x(storage(d2x(arg(1)),4))
ptr: return c2d(storage(d2x(arg(1)),4))
stg: return storage(d2x(arg(1)),arg(2))

RexxWait:
/*.REXX EXEC */
/*.*******************************************************************/
/*.TSOWAIT : WAIT/SLEEP FOR SPECIFIED NUMBER OF SECONDS              */
/*.*******************************************************************/
/*.FORMAT: TSOWAIT SECONDS                                           */
/*.SECONDS MUST BE A WHOLE NUMBER, OTHERWISE DEFAULT TO 15 SECONDS   */
/*.*******************************************************************/
/*.USES OS/390 UNIX CALLABLE SERVICES EXTENSIONS FOR REXX            */
/*.*******************************************************************/
TRACE OFF
ARG PARMS
EXITRC = 0
SECONDS = WORD(PARMS,1)
DEFAULT_SECONDS = 15
IF SECONDS = '' THEN SECONDS = DEFAULT_SECONDS
IF DATATYPE(SECONDS,"WHOLE NUMBER")
   THEN SECONDS = ABS(SECONDS)
   ELSE SECONDS = DEFAULT_SECONDS
/* CALL SYSCALLS 'ON' */
IF SYSCALLS('ON') > 0
THEN DO
       SAY 'UNABLE TO ESTABLISH THE UNIX SYSCALL ENVIRONMENT'
       EXITRC = SYSCALLS('ON')
       RETURN exitrc
     END
/* CALL TIME 'E' */
/* SAY 'READY TO SLEEP FOR ' SECONDS 'SECONDS' */
ADDRESS SYSCALL 'SLEEP ' SECONDS
EXITRC = RC
/* SAY 'I WAITED 'TIME('E')' SECONDS' */
RETURN exitrc

BuildTempPanel:

"ALLOC NEW DEL F($UPDPAN) DSO(PO) DIR(3) SP(5,5) TRACK
        REUSE RECFM(F B) BLKSIZE(0) LRECL(80) UNIT("unitname")"
Address ispexec
"LMINIT DATAID(TMPPNL) ENQ(EXCLU) DDNAME($UPDPAN)"
"LMOPEN DATAID("tmppnl") OPTION(OUTPUT)"

/* build status panel */

Do queued();pull;end
queue ,
")ATTR                                                                "
queue ,
"  ¬ TYPE(Text) color(white)                                          "
queue ,
"  _ TYPE(INPUT) COLOR(GREEN) INTENS(HIGH) CAPS(ON) HILITE(USCORE)    "
queue ,
"  $ TYPE(OUTPUT) color(white) just(right)                            "
queue ,
"  | TYPE(OUTPUT) COLOR(RED)                                          "
queue ,
"  % TYPE(OUTPUT) color(blue) hilite(reverse)                         "
queue ,
"  + TYPE(TEXT) color(blue)                                           "
queue ,
"  ? TYPE(TEXT) color(blue) hilite(reverse)                           "
queue ,
"  @ TYPE(TEXT) color(yellow)                                         "
queue ,
")BODY WINDOW(69,22)                                                  "
queue ,
"+-@ICSF Status Display+-----+ICSF Fmid :|Z       +Asid :|Z   +(hex)+-"
queue ,
"+COMMAND¬===>_ZCMD                                   @CPU-Model:|Z   "
queue ,
"¬ICSF Serv active  :|Z¬ CPACF available   :|Z¬ Compat permitted  :|Z+"
queue ,
"¬min 1 valid M-Key :|Z¬ CCP Hardware Instr:|Z¬ Support 64Bit Call:|Z+"
queue ,
"¬ICSF Init complete:|Z¬ min 1 CCP active  :|Z¬ min 1 CCP online  :|Z+"
queue ,
"¬ICSF active and PCF not    :|Z¬ Other Secure crypto available   :|Z+"
queue ,
"¬min 1 valid crypto unit    :|Z¬ SEC250 level or CRYPTO or above :|Z+"
queue ,
"¬Hardware environment tested:|Z¬ Additional Hardware env tested  :|Z+"
queue ,
"?  Service(s) formated with    number of    bytes cnt  number of     "
queue ,
"?   CB CSFDACC (count : "servcnt")",
"   calls        (accu.)    cmd/PCMF inst."
queue ,
"+ |srv1                      $srv1cn1   +$srv1cn2    +  $srv1cn3    +"
queue ,
"+ |srv2                      $srv2cn1   +$srv2cn2    +  $srv2cn3    +"
queue ,
"+ |srv3                      $srv3cn1   +$srv3cn2    +  $srv3cn3    +"
queue ,
"+ |srv4                      $srv4cn1   +$srv4cn2    +  $srv4cn3    +"
queue ,
"+ |srv5                      $srv5cn1   +$srv5cn2    +  $srv5cn3    +"
queue ,
"+ |srv6                      $srv6cn1   +$srv6cn2    +  $srv6cn3    +"
queue ,
"+ |srv7                      $srv7cn1   +$srv7cn2    +  $srv7cn3    +"
queue ,
"+ |srv8                      $srv8cn1   +$srv8cn2    +  $srv8cn3    +"
queue ,
"+ |srv9                      $srv9cn1   +$srv9cn2    +  $srv9cn3    +"
queue ,
"+ |srv10                     $srv10cn1  +$srv10cn2   +  $srv10cn3   +"
queue ,
"¬ENTER+to refresh,¬GO+for 10s Statistic,¬LUSER+List all crypto user,+"
queue ,
"¬PF1+for Help or¬END+to leave."
queue ,
")INIT                                                                "
queue ,
" .HELP = ICSFHLP1                                                    "
queue ,
" .ZVARS = '(CCVTFMID,CCVTASID,PCCAMDL,CCVTACT,CCVTACF ,CCVTCOMP,   + "
queue ,
"   CCVTMK  ,CCVTCCPH,CCVTS64C,CCVTINIT,CCVTCCP ,CCVTCCPO,CCVTCSF , + "
queue ,
"   CCVTASCD,CCVTHW  ,CCVTCUCV,CCVTENVT,CCVTENVK            )' "
queue ,
")PROC                                                                "
queue ,
")end                                                                 "

Do queued()
  parse pull line
  "LMPUT DATAID(&TMPPNL) MODE(INVAR) DATALOC(LINE) DATALEN(80)"
End
"LMMADD DATAID(&TMPPNL) MEMBER(icsfmp01)"

/* build statistik panel */

Do queued();pull;end
queue ,
")ATTR                                                                "
queue ,
"  ¬ TYPE(Text) color(white)                                          "
queue ,
"  _ TYPE(INPUT) COLOR(GREEN) INTENS(HIGH) CAPS(ON) HILITE(USCORE)    "
queue ,
"  $ TYPE(OUTPUT) color(white) just(right)                            "
queue ,
"  | TYPE(OUTPUT) COLOR(RED)                                          "
queue ,
"  % TYPE(OUTPUT) COLOR(BLUE) HILITE(REVERSE)                         "
queue ,
"  + TYPE(TEXT) color(blue)                                           "
queue ,
"  ? TYPE(TEXT) COLOR(BLUE) HILITE(REVERSE)                           "
queue ,
"  @ TYPE(TEXT) color(yellow)                                         "
queue ,
")BODY WINDOW(69,16)                                                  "
queue ,
"+-@ICSF Status Display+-----+Used services in last &act seconds -----"
queue ,
"+COMMAND¬===>_ZCMD                                                   "
queue ,
"?  Service(s) formated with    number of    bytes cnt  number of     "
queue ,
"?   CB CSFDACC (count : "servcnt")",
"   calls        (accu.)    cmd/PCMF inst."
queue ,
"+ |srv1                      $srv1cn1   +$srv1cn2    +  $srv1cn3    +"
queue ,
"+ |srv2                      $srv2cn1   +$srv2cn2    +  $srv2cn3    +"
queue ,
"+ |srv3                      $srv3cn1   +$srv3cn2    +  $srv3cn3    +"
queue ,
"+ |srv4                      $srv4cn1   +$srv4cn2    +  $srv4cn3    +"
queue ,
"+ |srv5                      $srv5cn1   +$srv5cn2    +  $srv5cn3    +"
queue ,
"+ |srv6                      $srv6cn1   +$srv6cn2    +  $srv6cn3    +"
queue ,
"+ |srv7                      $srv7cn1   +$srv7cn2    +  $srv7cn3    +"
queue ,
"+ |srv8                      $srv8cn1   +$srv8cn2    +  $srv8cn3    +"
queue ,
"+ |srv9                      $srv9cn1   +$srv9cn2    +  $srv9cn3    +"
queue ,
"+ |srv10                     $srv10cn1  +$srv10cn2   +  $srv10cn3   +"
queue ,
"                                                                     "
queue ,
"+Press¬ENTER+to leave. "
queue ,
")INIT                                                                "
queue ,
")PROC                                                                "
queue ,
")end                                                                 "

Do queued()
  parse pull line
  "LMPUT DATAID(&TMPPNL) MODE(INVAR) DATALOC(LINE) DATALEN(80)"
End
"LMMADD DATAID(&TMPPNL) MEMBER(icsfmp02)"

/* build statistik panel */

Do queued();pull;end
queue ,
")ATTR                                                                "
queue ,
"  ¬ TYPE(Text) color(white)                                          "
queue ,
"  _ TYPE(INPUT) COLOR(GREEN) INTENS(HIGH) CAPS(ON) HILITE(USCORE)    "
queue ,
"  $ TYPE(OUTPUT) color(white)                                        "
queue ,
"  | TYPE(OUTPUT) COLOR(RED)                                          "
queue ,
"  % TYPE(OUTPUT) COLOR(BLUE) HILITE(REVERSE)                         "
queue ,
"  + TYPE(TEXT) color(blue)                                           "
queue ,
"  ? TYPE(TEXT) COLOR(BLUE) HILITE(REVERSE)                           "
queue ,
"  @ TYPE(TEXT) color(yellow)                                         "
queue ,
")BODY WINDOW(41,16)                                                  "
queue ,
"+-@User(s) using crypto +----------------"
queue ,
"+COMMAND¬===>_ZCMD                       "
queue ,
"+        ¬ENTER+to refresh,¬END+to leave."
queue ,
"+Select Job/STC:_jfilter +    ;¬*+for ALL"
queue ,
"?Job/STC    Asid   JobId      Crypto-Ops."
queue ,
")MODEL                                   "
/*
")MODEL ROWS(SCAN)                        "
*/
queue ,
"|Jobname   $Asid  $Jobid     $crypcnt   +"
queue ,
")INIT                                    "
queue ,
")PROC                                    "
queue ,
")end                                     "

Do queued()
  parse pull line
  "LMPUT DATAID(&TMPPNL) MODE(INVAR) DATALOC(LINE) DATALEN(80)"
End
"LMMADD DATAID(&TMPPNL) MEMBER(icsfmp03)"

/* build waittime panel */

Do queued();pull;end
queue ,
")ATTR                                                            "
queue ,
"¢ ATTN(ON) TYPE(TEXT) INTENS(HIGH)                               "
queue ,
"_ TYPE(INPUT) COLOR(WHITE) INTENS(HIGH) CAPS(ON)                 "
queue ,
"/ TYPE(INPUT) COLOR(RED) INTENS(HIGH) CAPS(ON) JUST(LEFT)        "
queue ,
"$ TYPE(char) COLOR(yellow) hilite(reverse)                       "
queue ,
"? area(dynamic)                                                  "
queue ,
"# TYPE(TEXT) COLOR(YELLOW)                                       "
queue ,
"+ TYPE(TEXT) COLOR(BLUE)                                         "
queue ,
"% TYPE(TEXT) COLOR(WHITE)                                        "
queue ,
")BODY WINDOW(49,5)                                               "
queue ,
"#ICSF Status Monitor+---------------------------"
queue ,
"+                                               "
queue ,
"+  Waiting .....%?char1,shadow1 -------?        "
queue ,
"+                                               "
queue ,
"+Waiting for &act seconds and accumulate services"
queue ,
")REINIT                                                          "
queue ,
"REFRESH(*)                                                       "
queue ,
")END                                                             "

Do queued()
  parse pull line
  "LMPUT DATAID(&TMPPNL) MODE(INVAR) DATALOC(LINE) DATALEN(80)"
End
"LMMADD DATAID(&TMPPNL) MEMBER(icsfmp04)"

/* build help panel 1 of 5 */

Do queued();pull;end
queue ,
")ATTR                                                                "
queue ,
"  ¬ TYPE(Text) color(white)                                          "
queue ,
"  % TYPE(INPUT) COLOR(GREEN) INTENS(HIGH) CAPS(ON) HILITE(USCORE)    "
queue ,
"  $ TYPE(OUTPUT) color(white) just(right)                            "
queue ,
"  | TYPE(TEXT) COLOR(RED)                                            "
queue ,
"  + TYPE(TEXT) color(blue)                                           "
queue ,
"  @ TYPE(TEXT) color(yellow)                                         "
queue ,
")BODY WINDOW(69,20)                                                  "
queue ,
"|Help+-------@ICSF Status Display Utility+----------- Panel@1+-@5+-- "
queue ,
"+                                                                    "
queue ,
"+The utilities shows the status of the CMOS crypto services.         "
queue ,
"+Additionally it shows the@FMID+of the@ICSF+services and the         "
queue ,
"@asid+in hex. where the ICSF STC runs.                               "
queue ,
"+The status flags are extracted from control block|CSFCCVT.          "
queue ,
"+You can find the description in@SYS1.MODGEN.                        "
queue ,
"+                                                                    "
queue ,
"¬ICSF Serv active        :|Y/N+- ICSF STC is started or not.        "
queue ,
"¬min 1 valid M-Key       :|Y/N+- At least one crypto unit has a     "
queue ,
"+   valid Master-Key (2084 Cpu's hasn't internal feat.)"
queue ,
"¬ICSF Init complete      :|Y/N+- ICSF Initialization complete.      "
queue ,
"¬ICSF active and PCF not :|Y/N+- ICSF/MVS is active (not PCF or CUSP)"
queue ,
"¬min 1 valid crypto unit :|Y/N+- At least one Integrated Crypto.    "
queue ,
"+   Feature is valid.                                    "
queue ,
"¬Hardware environment tested :|Y/N+- Hardware environment tested."
queue ,
"¬CPACF available         :|Y/N+- Crypto assist instructions available"
queue ,
"¬CCP Hardware Instr      :|Y/N+- PCI Crypto. hardware instruct. avail"
queue ,
"+                                                                    "
queue ,
"+Press¬ENTER+to see next help panel, press¬END+to leave.             "
queue ,
")INIT                                                                "
queue ,
" &ZCONT = ICSFHLP2                                                   "
queue ,
" .HELP = ICSFHLP1                                                    "
queue ,
")PROC                                                                "
queue ,
")end                                                                 "

Do queued()
  parse pull line
  "LMPUT DATAID(&TMPPNL) MODE(INVAR) DATALOC(LINE) DATALEN(80)"
End
"LMMADD DATAID(&TMPPNL) MEMBER(ICSFHLP1)"

/* build help panel 2 of 5 */

Do queued();pull;end
queue ,
")ATTR                                                                "
queue ,
"  ¬ TYPE(Text) color(white)                                          "
queue ,
"  % TYPE(INPUT) COLOR(GREEN) INTENS(HIGH) CAPS(ON) HILITE(USCORE)    "
queue ,
"  $ TYPE(OUTPUT) color(white) just(right)                            "
queue ,
"  | TYPE(TEXT) COLOR(RED)                                            "
queue ,
"  + TYPE(TEXT) color(blue)                                           "
queue ,
"  @ TYPE(TEXT) color(yellow)                                         "
queue ,
")BODY WINDOW(69,20)                                                  "
queue ,
"|Help+-------@ICSF Status Display Utility+----------- Panel@2+-@5+-- "
queue ,
"+                                                                    "
queue ,
"¬min 1 CCP active        :|Y/N+- At least one PCI crypto   "
queue ,
"+   coprocessor is active.                                           "
queue ,
"¬min 1 CCP online        :|Y/N+- At least one PCI crypto "
queue ,
"+   coprocessor is online.                                           "
queue ,
"¬Compat permitted        :|Y/N+- Compatibility is permitted"
queue ,
"¬Support 64Bit Call      :|Y/N+- Support for 64-bit callers"
queue ,
"¬Other Secure crypto available  :|Y/N+- Additional secure Crypto  "
queue ,
"+   device available.                                                "
queue ,
"¬SEC250 level or CRYPTO or above:|Y/N+- SEC250 or above           "
queue ,
"¬Additional Hardware env tested :|Y/N+- Additional hardware       "
queue ,
"+   environment tested.                                              "
queue ,
"+                                                                    "
queue ,
"+The service section shows the accumulated crypto services since last"
queue ,
"+IPL. The services are formatted with the control block|CSFDACC+and  "
queue ,
"+used for RMF reporting. Hit¬ENTER+to refresh the display.           "
queue ,
"+You can find the description in@SYS1.MODGEN.                        "
queue ,
"+                                                                    "
queue ,
"+Press¬ENTER+to see next help panel, press¬END+to leave.             "
queue ,
")INIT                                                                "
queue ,
" &ZCONT = ICSFHLP3                                                   "
queue ,
" .HELP = ICSFHLP1                                                    "
queue ,
")PROC                                                                "
queue ,
")end                                                                 "

Do queued()
  parse pull line
  "LMPUT DATAID(&TMPPNL) MODE(INVAR) DATALOC(LINE) DATALEN(80)"
End
"LMMADD DATAID(&TMPPNL) MEMBER(ICSFHLP2)"

/* build help panel 3 of 5 */

Do queued();pull;end
queue ,
")ATTR                                                                "
queue ,
"  ¬ TYPE(Text) color(white)                                          "
queue ,
"  % TYPE(INPUT) COLOR(GREEN) INTENS(HIGH) CAPS(ON) HILITE(USCORE)    "
queue ,
"  $ TYPE(OUTPUT) color(white) just(right)                            "
queue ,
"  | TYPE(TEXT) COLOR(RED)                                            "
queue ,
"  + TYPE(TEXT) color(blue)                                           "
queue ,
"  @ TYPE(TEXT) color(yellow)                                         "
queue ,
")BODY WINDOW(69,20)                                                  "
queue ,
"|Help+-------@ICSF Status Display Utility+----------- Panel@3+-@5+-- "
queue ,
"+                                                                    "
queue ,
"+The following services are displayed:                               "
queue ,
"+ |CSNBENC+-|Encipher:                                               "
queue ,
"+ @-+This will be done for single DES separately.                    "
queue ,
"+    Collect number of service calls, number of                      "
queue ,
"+    bytes of data enciphered, number of CMD instructions            "
queue ,
"+    used to encipher the data.                                      "
queue ,
"+                                                                    "
queue ,
"+ @-+Double and triple DES will be counted together.                 "
queue ,
"+    collect number of service calls, number of                      "
queue ,
"+    bytes of data enciphered, number of CMD instructions            "
queue ,
"+    used to encipher the data.                                      "
queue ,
"+ |CSNBDEC+-|Decipher:                                               "
queue ,
"+ @-+This will be done for single DES separately.                    "
queue ,
"+    Collect number of service calls, number of                      "
queue ,
"+    bytes of data deciphered, number of CMD instructions            "
queue ,
"+    used to decipher the data.                                      "
queue ,
"+                                                                    "
queue ,
"+Press¬ENTER+to see next help panel, press¬END+to leave.             "
queue ,
")INIT                                                                "
queue ,
" &ZCONT = ICSFHLP4                                                   "
queue ,
" .HELP = ICSFHLP1                                                    "
queue ,
")PROC                                                                "
queue ,
")end                                                                 "

Do queued()
  parse pull line
  "LMPUT DATAID(&TMPPNL) MODE(INVAR) DATALOC(LINE) DATALEN(80)"
End
"LMMADD DATAID(&TMPPNL) MEMBER(ICSFHLP3)"

/* build help panel 4 of 5 */

Do queued();pull;end
queue ,
")ATTR                                                                "
queue ,
"  ¬ TYPE(Text) color(white)                                          "
queue ,
"  % TYPE(INPUT) COLOR(GREEN) INTENS(HIGH) CAPS(ON) HILITE(USCORE)    "
queue ,
"  $ TYPE(OUTPUT) color(white) just(right)                            "
queue ,
"  | TYPE(TEXT) COLOR(RED)                                            "
queue ,
"  + TYPE(TEXT) color(blue)                                           "
queue ,
"  @ TYPE(TEXT) color(yellow)                                         "
queue ,
")BODY WINDOW(69,20)                                                  "
queue ,
"|Help+-------@ICSF Status Display Utility+----------- Panel@4+-@5+-- "
queue ,
"+                                                                    "
queue ,
"+ @-+Double and triple DES will be counted together.                 "
queue ,
"+    collect number of service calls, number of                      "
queue ,
"+    bytes of data deciphered, number of CMD instructions            "
queue ,
"+    used to decipher the data.                                      "
queue ,
"+ |CSNBMGN+-|MAC-Generate:                                           "
queue ,
"+ @-+Single and varous double key MAC will be                        "
queue ,
"+    gathered together.                                              "
queue ,
"+    Collect number of service calls, number of                      "
queue ,
"+    bytes of data MACd, number of PCMF instructions.                "
queue ,
"+ |CSNBMVR+-|MAC-Verify:                                             "
queue ,
"+ @-+Single and varous double key MAC will be                        "
queue ,
"+    gathered together.                                              "
queue ,
"+    Collect number of service calls, number of                      "
queue ,
"+    bytes of data MACd, number of PCMF instructions.                "
queue ,
"+ |CSNBOWH+-|One-Way-Hash:                                           "
queue ,
"+ @-+For SHA-1,                                                      "
queue ,
"+                                                                    "
queue ,
"+Press¬ENTER+to see next help panel, press¬END+to leave.             "
queue ,
")INIT                                                                "
queue ,
" &ZCONT = ICSFHLP5                                                   "
queue ,
" .HELP = ICSFHLP1                                                    "
queue ,
")PROC                                                                "
queue ,
")end                                                                 "

Do queued()
  parse pull line
  "LMPUT DATAID(&TMPPNL) MODE(INVAR) DATALOC(LINE) DATALEN(80)"
End
"LMMADD DATAID(&TMPPNL) MEMBER(ICSFHLP4)"

/* build help panel 5 of 5 */

Do queued();pull;end
queue ,
")ATTR                                                                "
queue ,
"  ¬ TYPE(Text) color(white)                                          "
queue ,
"  % TYPE(INPUT) COLOR(GREEN) INTENS(HIGH) CAPS(ON) HILITE(USCORE)    "
queue ,
"  $ TYPE(OUTPUT) color(white) just(right)                            "
queue ,
"  | TYPE(TEXT) COLOR(RED)                                            "
queue ,
"  + TYPE(TEXT) color(blue)                                           "
queue ,
"  @ TYPE(TEXT) color(yellow)                                         "
queue ,
")BODY WINDOW(69,20)                                                  "
queue ,
"|Help+-------@ICSF Status Display Utility+----------- Panel@5+-@5+-- "
queue ,
"+                                                                    "
queue ,
"+    Collect number of service calls, number of                      "
queue ,
"+    bytes of data hashed, number of PCMF instructions               "
queue ,
"+    for SHA-1.                                                      "
queue ,
"+ |CSNBOWH+-|One-Way-Hash-256:                                       "
queue ,
"+ @-+For SHA-256,                                                    "
queue ,
"+    Collect number of service calls, number of                      "
queue ,
"+    bytes of data hashed, number of PCMF instructions               "
queue ,
"+    for SHA-256.                                                    "
queue ,
"+ |CSNBPTR+-|PIN-Translate:                                          "
queue ,
"+ @-+Collect number of service calls only.                           "
queue ,
"+ |CSNBPVR+-|PIN-Verify:                                             "
queue ,
"+ @-+Collect number of service calls only.                           "
queue ,
"+                                                                    "
queue ,
"+ ¬GO     +:+count services for a given interval ;¬GO|xxx+sec;       "
queue ,
"+            def. 10 secs, max 300 secs.                             "
queue ,
"+ ¬LUSER  +:+List all Job/STCs which are using crypto operations.    "
queue ,
"+                                                                    "
queue ,
"+Press¬ENTER+to see first help panel, press¬END+to leave.            "
queue ,
")INIT                                                                "
queue ,
" &ZCONT = ICSFHLP1                                                   "
queue ,
" .HELP = ICSFHLP1                                                    "
queue ,
")PROC                                                                "
queue ,
")end                                                                 "

Do queued()
  parse pull line
  "LMPUT DATAID(&TMPPNL) MODE(INVAR) DATALOC(LINE) DATALEN(80)"
End
"LMMADD DATAID(&TMPPNL) MEMBER(ICSFHLP5)"

"LIBDEF ISPPLIB LIBRARY ID($UPDPAN) STACK"

Return
