{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012748000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 176358, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 6, "INMDSNAM": "CBT.V500.FILE771.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 176358, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 176358, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE771.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x04\\x04'", "DS1TRBAL": "b'\\xa0\\xb4'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x05:\\x00\\x08\\x05:\\x00\\x0c\\x00\\x05'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04M\\x00\\x00\\x01\\x08\\x13o\\x01\\x08\\x13o\\t0\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf7@@@'", "ispf": {"version": "04.77", "flags": 0, "createdate": "2008-05-15T00:00:00", "modifydate": "2008-05-15T09:30:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-477"}, "text": "REGULAR CBT TAPE - VERSION 477    FILE:  771\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT477.FILE771\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 4 MEMBERS COUNTED; CUMULATIVE SIZE IS 1,367 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   05/15/08    09:30:05    GMT-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$NOTE1": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00I\\x01\\x072o\\x01\\x072o\\x10\\x16\\x00/\\x00/\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2007-11-22T00:00:00", "modifydate": "2007-11-22T10:16:49", "lines": 47, "newlines": 47, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject:     ICSF Status Monitor \u00ddVirus checked\u00a8\nFrom:        Karl-Heinz.Doppelfeld@Sparkassen-Informatik.de\nDate:        Thu, 22 Nov 2007 13:24:54 +0100\nTo:          sbgolob@cbttape.org\n\n\nHello Sam,\n\nI have downloaded diverse goodies from CBT-Org, and now I will\ngive you an ICSF - Status - Monitor that you may share with the\nother folks.  The monitor is written in REXX and is called as a\nTSO command.\n\nHere is the main display after calling the REXX:\n\n    ---  sample screen was here  ---\n\nIt shows much information from ICSF control blocks and displays\nthe crypto services formatted with CSFDACC as used for RMF\nreporting.\n\nFor a better feeling how many crypto actions are called you can\nsample statistics for a given time range.\n\n    ---  sample screen was here  ---\n\nIn the sample before I count the services for 10 secs. The result\nshows like this:\n\n    ---  sample screen was here  ---\n\nIf you like it and you think that it's of interest for the other\nfolks please give me an answer and I will send you the REXX.\n\nKind regards from Germany, Karl-Heinz Doppelfeld.\n\n\nKarl-Heinz Doppelfeld\nHost Betriebssysteme\n\nSparkassen Informatik GmbH & Co.KG\nEdmund-Rumpler-Strasse 6c\n51149 K\u00f6ln\nTelefon: 02203/5039-3482\nTelefax: 02203/5039-9443482\n\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@FILE771": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04M\\x00\\x00\\x01\\x08\\x13o\\x01\\x08\\x13o\\t)\\x00L\\x00L\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf7@@@'", "ispf": {"version": "04.77", "flags": 0, "createdate": "2008-05-15T00:00:00", "modifydate": "2008-05-15T09:29:00", "lines": 76, "newlines": 76, "modlines": 0, "user": "CBT-477"}, "text": "//***FILE 771 is from Karl-Heinz Doppelfeld and contains an         *   FILE 771\n//*           ICSF (cryptographic service facility) monitor that    *   FILE 771\n//*           is written in REXX.  A short description is found     *   FILE 771\n//*           below.  Necessary panels are imbedded in the REXX     *   FILE 771\n//*           code.                                                 *   FILE 771\n//*                                                                 *   FILE 771\n//*     email:  Karl-Heinz.Doppelfeld@Sparkassen-Informatik.de      *   FILE 771\n//*                                                                 *   FILE 771\n//*     Utility to display ICSF Statistics.                         *   FILE 771\n//*                                                                 *   FILE 771\n//*  History:                                                       *   FILE 771\n//*  lvl 001 : base version                             01.01.2002  *   FILE 771\n//*  lvl 002 : update to new CSFDACC with 10 services   14.05.2008  *   FILE 771\n//*            some doc updates and implementation of               *   FILE 771\n//*            LUSER to show all users which are using              *   FILE 771\n//*            crypto operations.                                   *   FILE 771\n//*                                                                 *   FILE 771\n//*     More description found in SYS1.MODGEN member CSFCCVT        *   FILE 771\n//*     and CSFDACC.                                                *   FILE 771\n//*                                                                 *   FILE 771\n//*     CCVT:                                                       *   FILE 771\n//*     The CCVT is the base control block for ICSF/MVS. The        *   FILE 771\n//*     CCVT contains addresses of common areas for use by          *   FILE 771\n//*     ICSF/MVS components.  Indicators in the CCVT provide        *   FILE 771\n//*     status of ICSF/MVS.                                         *   FILE 771\n//*                                                                 *   FILE 771\n//*     DACC:                                                       *   FILE 771\n//*     The DACC is the base control block for ICSF to collect      *   FILE 771\n//*     Performance measurements for RMF to report on. This         *   FILE 771\n//*     control block is the programming interface.  The count      *   FILE 771\n//*     fields are double-word length.                              *   FILE 771\n//*                                                                 *   FILE 771\n//*     The following services will have data collected:            *   FILE 771\n//*                                                                 *   FILE 771\n//*     CSNBENC - Encipher:                                         *   FILE 771\n//*     - This will be done for single DES separately.              *   FILE 771\n//*       Collect number of service calls, number of bytes of       *   FILE 771\n//*       data enciphered, number of CMD instructions used to       *   FILE 771\n//*       encipher the data.                                        *   FILE 771\n//*     - Double and triple DES will be counted together.           *   FILE 771\n//*       collect number of service calls, number of bytes of       *   FILE 771\n//*       data enciphered, number of CMD instructions used to       *   FILE 771\n//*       encipher the data.                                        *   FILE 771\n//*     CSNBDEC - Decipher:                                         *   FILE 771\n//*     CSNBDEC - Decipher:                                         *   FILE 771\n//*     - This will be done for single DES separately.              *   FILE 771\n//*       Collect number of service calls, number of bytes of       *   FILE 771\n//*         data deciphered, number of CMD instructions used        *   FILE 771\n//*         to decipher the data.                                   *   FILE 771\n//*       - Double and triple DES will be counted together.         *   FILE 771\n//*         collect number of service calls, number of bytes        *   FILE 771\n//*         of data deciphered, number of CMD instructions          *   FILE 771\n//*         used to decipher the data.                              *   FILE 771\n//*       CSNBMGN - MAC_Generate:                                   *   FILE 771\n//*       - Single and varous double key MAC will be                *   FILE 771\n//*         gathered together.                                      *   FILE 771\n//*         Collect number of service calls, number of              *   FILE 771\n//*         bytes of data MACd, number of PCMF instructions.        *   FILE 771\n//*       CSNBMVR - MAC_Verify:                                     *   FILE 771\n//*       - Single and varous double key MAC will be                *   FILE 771\n//*         gathered together.                                      *   FILE 771\n//*         Collect number of service calls, number of              *   FILE 771\n//*         bytes of data MACd, number of PCMF instructions.        *   FILE 771\n//*       CSNBOWH - One_Way_Hash:                                   *   FILE 771\n//*       - For SHA-1,                                              *   FILE 771\n//*         Collect number of service calls, number of              *   FILE 771\n//*         bytes of data hashed, number of PCMF instructions       *   FILE 771\n//*         for SHA-1.                                              *   FILE 771\n//*         CSNBPTR - PIN_Translate:                                *   FILE 771\n//*         - Collect number of service calls only.                 *   FILE 771\n//*         CSNBPVR - PIN_Verify:                                   *   FILE 771\n//*         - Collect number of service calls only.                 *   FILE 771\n//*                                                                 *   FILE 771\n//*     Author: Karl-Heinz Doppelfeld                               *   FILE 771\n//*        Karl-Heinz.Doppelfeld\u00a7Sparkassen-Informatik.de           *   FILE 771\n//*                                                                 *   FILE 771\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ICSFSTAT": {"ttr": 523, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00H\\x01\\x08\\x13_\\x01\\x08\\x13_\\x149\\x04\\xd0\\x04\\xd0\\x00\\x00\\xd2\\xc8\\xc4\\xd6\\xd7\\xd7\\xd3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2008-05-14T00:00:00", "modifydate": "2008-05-14T14:39:48", "lines": 1232, "newlines": 1232, "modlines": 0, "user": "KHDOPPL"}, "text": "/**** REXX ICSFSTAT ***************************************************/\n/*                                                                    */\n/*  REXX-Programmm                      : ICSFSTAT                    */\n/*   |                                                                */\n/*   '-> Unterprogramme (intern)        : -----                       */\n/*   |   Unterprogramme (extern)        : -----                       */\n/*   |                                                                */\n/*   '-> Messages                       : -----                       */\n/*   |                                                                */\n/*   '-> Panels                         : icsfmp01, icsfmp02, icsfmp03*/\n/*   |                                    icsfmp04,                   */\n/*   |                                    icsfhlp1...icsfhlp5         */\n/*   |                                                                */\n/*   '-> Tables                         : -----                       */\n/*   |                                                                */\n/*   '-> Skeletons                      : -----                       */\n/*                                                                    */\n/*  History:                                                          */\n/*  lvl 001 : base version                                01.01.2002  */\n/*  lvl 002 : update to new CSFDACC with 10 services      14.05.2008  */\n/*            some doku updates and implementation of                 */\n/*            LUSER to show all users which are using                 */\n/*            crypto operations.                                      */\n/*                                                                    */\n/*  Utility to display ICSF Statistics.                               */\n/*                                                                    */\n/*  More description found in SYS1.MODGEN member CSFCCVT and CSFDACC. */\n/*                                                                    */\n/*  CCVT:                                                             */\n/*  The CCVT is the base control block for ICSF/MVS. The CCVT         */\n/*  contains addresses of common areas for use by ICSF/MVS            */\n/*  components.  Indicators in the CCVT provide status                */\n/*  of ICSF/MVS.                                                      */\n/*                                                                    */\n/*  DACC:                                                             */\n/*  The DACC is the base control block for ICSF to collect            */\n/*  Performance measurements for RMF to report on. This control       */\n/*  block is the programming interface. The count fields are          */\n/*  double-word length.                                               */\n/*  The following services will have data collected:                  */\n/*  CSNBENC - Encipher:                                               */\n/*  - This will be done for single DES separately.                    */\n/*    Collect number of service calls, number of                      */\n/*    bytes of data enciphered, number of CMD instructions            */\n/*    used to encipher the data.                                      */\n/*  - Double and triple DES will be counted together.                 */\n/*    collect number of service calls, number of                      */\n/*    bytes of data enciphered, number of CMD instructions            */\n/*    used to encipher the data.                                      */\n/*  CSNBDEC - Decipher:                                               */\n/*  CSNBDEC - Decipher:                                               */\n/*  - This will be done for single DES separately.                    */\n/*    Collect number of service calls, number of                      */\n/*      bytes of data deciphered, number of CMD instructions          */\n/*      used to decipher the data.                                    */\n/*    - Double and triple DES will be counted together.               */\n/*      collect number of service calls, number of                    */\n/*      bytes of data deciphered, number of CMD instructions          */\n/*      used to decipher the data.                                    */\n/*    CSNBMGN - MAC_Generate:                                         */\n/*    - Single and varous double key MAC will be                      */\n/*      gathered together.                                            */\n/*      Collect number of service calls, number of                    */\n/*      bytes of data MACd, number of PCMF instructions.              */\n/*    CSNBMVR - MAC_Verify:                                           */\n/*    - Single and varous double key MAC will be                      */\n/*      gathered together.                                            */\n/*      Collect number of service calls, number of                    */\n/*      bytes of data MACd, number of PCMF instructions.              */\n/*    CSNBOWH - One_Way_Hash:                                         */\n/*    - For SHA-1,                                                    */\n/*      Collect number of service calls, number of                    */\n/*      bytes of data hashed, number of PCMF instructions             */\n/*      for SHA-1.                                                    */\n/*    CSNBPTR - PIN_Translate:                                        */\n/*    - Collect number of service calls only.                         */\n/*    CSNBPVR - PIN_Verify:                                           */\n/*    - Collect number of service calls only.                         */\n/*    CSNBOWH - One_Way_Hash:                                         */\n/*    - For SHA-256                                                   */\n/*      Collect number of service calls, number of                    */\n/*      bytes of data hashed, number of PCMF instructions             */\n/*      for SHA-256.                                                  */\n/*                                                                    */\n/*  Author: Karl-Heinz Doppelfeld                                     */\n/*          Karl-Heinz.Doppelfeld\u00a7Sparkassen-Informatik.de            */\n/*                                                                    */\n/*  rev : 13.02.07 insert statistic function                          */\n/*                                                                    */\n/**** REXX ************************************************************/\nunitname = '3390'    /* set unit for temp. datasets.     */\n                     /* Change this if allocations fail  */\n\nNUMERIC  DIGITS 20\nCVT      = C2d(Storage(10,4))                /* point to cvt         */\nSCVT     = C2d(Storage(D2x(CVT + 200),4))    /* point to scvt        */\nCCVT     = C2d(Storage(D2x(SCVT + 184),4))   /* point to csfccvt     */\n\nCVTPCCAT = c2d(Storage(d2x(CVT+764),4))      /* point to pccat       */\nPCCA     = Storage(d2x(CVTPCCAT+4),4)        /* point to pcca        */\nIF PCCA  \u00ac= '00000000'X THEN\n   PCCAMDL  = Storage(d2x(c2d(PCCA)+12),4)   /* get CPU Model        */\n\nif (ccvt <> 0) then do\n  CCVTSFG1 = c2x(Storage(D2x(CCVT + 36 ),1)) /* get ccvt Flag1       */\n  CCVTSFG1 = x2b(CCVTSFG1)\n  CCVTFLAG = c2x(Storage(D2x(CCVT + 37 ),1)) /* get ccvt Flag        */\n  CCVTFLAG = x2b(CCVTFLAG)\n  CCVTHFLG = c2x(Storage(D2x(CCVT + 80 ),1)) /* get ccvt Flag        */\n  CCVTHFLG = x2b(CCVTHFLG)\n  CCVTFMID =    (Storage(D2x(CCVT + 136),8)) /* get FMID             */\n  CCVTASID = C2x(Storage(D2x(CCVT + 42 ),2)) /* get ASID hex         */\n\n  if (substr(CCVTSFG1,1,1) = 1) then CCVTACT  = 'Y'\n    else CCVTACT  = 'N'                /* ICSF Services active       */\n  if (substr(CCVTSFG1,2,1) = 1) then CCVTMK   = 'Y'\n    else CCVTMK   = 'N'                /* At least one Int. crypto.  */\n                                       /* feature with valid m-Key   */\n  if (substr(CCVTSFG1,3,1) = 1) then CCVTINIT = 'Y'\n    else CCVTINIT = 'N'                /* ICSF initialization comp.  */\n  if (substr(CCVTSFG1,4,1) = 1) then CCVTCSF  = 'Y'\n    else CCVTCSF  = 'N'                /* ICSF is active and CUSP/PCF*/\n                                       /* is not active              */\n  if (substr(CCVTSFG1,5,1) = 1) then CCVTCOMP = 'Y'\n    else CCVTCOMP = 'N'                /* compatibility is permitted */\n  if (substr(CCVTSFG1,6,1) = 1) then CCVTHW   = 'Y'\n    else CCVTHW   = 'N'                /* At least one valid crypto  */\n                                       /* unit.                      */\n  if (substr(CCVTSFG1,7,1) = 1) then CCVTCUCV = 'Y'\n    else CCVTCUCV = 'N'                /* SEC250 level or crypto abov*/\n  if (substr(CCVTSFG1,8,1) = 1) then CCVTCCFU = 'Y'\n    else CCVTCCFU = 'N'                /* Crypto. coprocessor feature*/\n                                       /* is in use.                 */\n  if (substr(CCVTFLAG,1,1) = 1) then CCVT31AM = 'Y'\n    else CCVT31AM = 'N'                /* VTAM puts terminal buffer  */\n                                       /* above 16MB line.           */\n  if (substr(CCVTFLAG,2,1) = 1) then CCVTENVT = 'Y'\n    else CCVTENVT = 'N'                /* Hdwre environment tested   */\n  if (substr(CCVTFLAG,3,1) = 1) then CCVTDMAC = 'Y'\n    else CCVTDMAC = 'N'                /* GTMAC opcode in hardware   */\n  if (substr(CCVTFLAG,4,1) = 1) then CCVTCCPH = 'Y'\n    else CCVTCCPH = 'N'                /* PCI crypto. coprocessor    */\n                                       /* hardware instruction avail.*/\n  if (substr(CCVTFLAG,5,1) = 1) then CCVTCCP  = 'Y'\n    else CCVTCCP = 'N'                 /* At least one PCI crypto.   */\n                                       /* coprocessor is active.     */\n  if (substr(CCVTFLAG,6,1) = 1) then CCVTENVK = 'Y'\n    else CCVTENVK = 'N'                /* Add'l hrdwre envir. tested */\n  if (substr(CCVTFLAG,7,1) = 1) then CCVTCCPO = 'Y'\n    else CCVTCCPO = 'N'                /* At least one PCI crypto.   */\n                                       /* coprocessor is online.     */\n  if (substr(CCVTHFLG,1,1) = 1) then CCVTACF  = 'Y'\n    else CCVTACF  = 'N'                /* Crypto assist instructions */\n                                       /* available.                 */\n  if (substr(CCVTHFLG,2,1) = 1) then CCVTASCD = 'Y'\n    else CCVTASCD = 'N'                /* Additional secure Crypto s */\n                                       /* device available.          */\n  if (substr(CCVTHFLG,3,1) = 1) then CCVTS64C = 'Y'\n    else CCVTS64C = 'N'                /* Support for 64-bit callers */\nend\nelse do\n  CCVTACT  = 'N'\n  CCVTMK   = 'N'\n  CCVTINIT = 'N'\n  CCVTCSF  = 'N'\n  CCVTCOMP = 'N'\n  CCVTHW   = 'N'\n  CCVTCUCV = 'N'\n  CCVTCCFU = 'N'\n  CCVT31AM = 'N'\n  CCVTCCPH = 'N'\n  CCVTCCP  = 'N'\n  CCVTENVK = 'N'\n  CCVTCCPO = 'N'\n  CCVTACF  = 'N'\n  CCVTASCD = 'N'\n  CCVTS64C = 'N'\n  CCVTFMID = ''\n  CCVTASID = ''\nend\n\nIf ((CCVTHW   = 'N') & (CCVTCCP = 'N')) then\n  do\n    zedsmsg = 'Crypto error ||'\n    zedlmsg = 'No crypto (co)processor available.'\n    address ispexec \"SETMSG MSG(ISRZ001) MSGLOC(zcmd)\"\n  End\n\nIf ((CCVTACT = 'N') | (CCVTINIT = 'N')) then\n  do\n    zedsmsg = 'ICSF error ||'\n    zedlmsg = 'ICSF initialization not complete'\n    address ispexec \"SETMSG MSG(ISRZ001) MSGLOC(zcmd)\"\n  End\n\nIf (CCVTACF = 'N') then\n  do\n    zedsmsg = 'CPACF inactiv'\n    zedlmsg = 'CPACF not activated on the hardware.'\n    address ispexec \"SETMSG MSG(ISRZ001) MSGLOC(zcmd)\"\n  End\n\nIf (CCVT = 0) then\n  do\n    zedsmsg = 'CCVT is ZERO|'\n    zedlmsg = 'ICSF CCVT not initialized; contact Sysprog|'\n    address ispexec \"SETMSG MSG(ISRZ001) MSGLOC(zcmd)\"\n\n    /* EXIT coding to free dynamic alloc. Panel-library */\n\n/*\n    address ispexec \"LMFREE DATAID(&TMPPNL)\"\n    address ispexec \"LIBDEF ISPPLIB \"\n    Address tso \"FREE F($UPDPAN)\"\n*/\n\n    exit\n  End\n\ncsfdacc  = C2d(Storage(D2x(CCVT + 276),4))   /* point to csfdacc */\n\nservcnt  = C2d(Storage(D2x(csfdacc + 12),2)) /* count services   */\nservlen  = C2d(Storage(D2x(csfdacc + 14),2)) /* service length   */\n\ncall BuildTempPanel  /* build temp panel and concat it via libdef */\n\naddress ispexec \"ADDPOP\"\ndo forever\n  call GetActualCounts\n  address ispexec \"display panel(icsfmp01)\"\n  if (rc > 4) then leave\n\n  if (word(zcmd,1) = 'LUSER') then\n    do\n      zcmd = ''\n      jfilter = '*'\n      address ispexec \"addpop\"\n      do forever\n        call GetAllCryptoUser\n        address ispexec \"tbvclear tmptbl\"\n        if (jfilter <> '*') then\n          do\n            address ispexec \"tbtop  tmptbl\"\n            do forever\n              address ispexec \"tbskip tmptbl\"\n              if (rc > 0) then leave\n              if (wildcard(jobname,jfilter) = 0) then\n                ispexec \"tbdelete tmptbl\"\n            end\n            jobname = jfilter\n          end\n        else\n          nop\n        address ispexec \"tbdispl tmptbl panel(icsfmp03)\"\n        if (rc > 4) then\n          do\n            address ispexec \"rempop\"\n            leave\n          end\n      end\n    end\n  if (word(zcmd,1) = 'GO') then\n    do\n      parse var zcmd . acctime\n      if (SYSCALLS('ON') > 0) then\n        do\n          zerrsm  = 'Stat. unavailable'\n          zerrlm  = 'SYSCALL(ON) > 0; needed waitroutine',\n                    'could not be used'\n          zerralrm = 'YES'       /* msg - with alarm */\n          address ISPEXEC \"SETMSG MSG(ISRZ002)\"\n          zcmd = ''\n          iterate\n        end\n      if (acctime > 300) then\n        do\n          zerrsm  = 'Acctime > 300s'\n          zerrlm  = 'The limit for the accumulation time',\n                    'is 300 seconds'\n          zerralrm = 'YES'       /* msg - with alarm */\n          address ISPEXEC \"SETMSG MSG(ISRZ002)\"\n          zcmd = ''\n          iterate\n        end\n      if (acctime = '') then\n        acctime = 10    /* set default to 10 Seconds */\n\n      act = right(acctime,3,' ') /* justify acctime for panel display */\n      call DisplayStatus SET acctime\n      call GetActualCounts\n      strttime = time('S')\n      do i = 1 to servcnt\n        interpret 'srv'i'cn1_save = srv'i'cn1'\n        interpret 'srv'i'cn2_save = srv'i'cn2'\n        interpret 'srv'i'cn3_save = srv'i'cn3'\n      end\n      waittime = min(acctime%10,10)\n      call DisplayStatus '$'\n      do ii = 1 to acctime/waittime\n        call RexxWait waittime\n        starcnt = format(20/acctime*ii*waittime,2,0)\n        starcnt = right('',min(starcnt,20),'$')\n        call DisplayStatus starcnt\n      end\n      call GetActualCounts\n      do i = 1 to servcnt\n        interpret 'service = srv'i\n        if ((service = \"PIN_Translate \") | (service = \"PIN_Verify \")),\n          then do\n            interpret 'srv'i'cn1 = srv'i'cn1 - srv'i'cn1_save'\n            interpret 'srv'i'cn2 = \"no value\"'\n            interpret 'srv'i'cn3 = \"no value\"'\n          end\n        else\n          do\n            interpret 'srv'i'cn1 = srv'i'cn1 - srv'i'cn1_save'\n            interpret 'srv'i'cn2 = srv'i'cn2 - srv'i'cn2_save'\n            interpret 'srv'i'cn3 = srv'i'cn3 - srv'i'cn3_save'\n          end\n      end\n      call DisplayStatus RESET\n\n      zcmd = ''\n      address ispexec \"CONTROL DISPLAY SAVE\"\n      address ispexec \"ADDPOP\"\n      address ispexec \"display panel(icsfmp02)\"\n      address ispexec \"REMPOP\"\n      address ispexec \"CONTROL DISPLAY RESTORE\"\n    end\nend\n\naddress ispexec\n\n\"REMPOP\"\n\"LMFREE DATAID(&TMPPNL)\"\n\"LIBDEF ISPPLIB \"\nAddress tso\n\"FREE F($UPDPAN)\"\n\nexit\n\nDisplayStatus:procedure expose char1 act\narg shadow1 acctime\n\n address ispexec\n\n if (shadow1 = 'SET') then\n   do\n     select\n       when (acctime < 100) then\n         do\n           midval = right(acctime/2,2,'.')\n           endval = right(acctime,2,'.')\n           char1   = '0.......'midval'.......'endval's'\n         end\n       when (acctime < 1000) then\n         do\n           midval = right(acctime/2,3,'.')\n           endval = right(acctime,3,'.')\n           char1   = '0......'midval'......'endval's'\n         end\n       otherwise\n         nop\n     end\n     shadow1 = '$'\n     \"ADDPOP ROW(2) COLUMN(5)\"\n     \"control display lock\"\n     \"display panel(icsfmp04)\"\n   end\n else\n   do\n     if (shadow1 = 'RESET') then\n       \"REMPOP\"\n     else\n       do\n         \"CONTROL DISPLAY LOCK\"\n         \"DISPLAY\"\n       end\n   end\nReturn\n\nGetActualCounts:\n  do i = 1 to servcnt\n    offset = 16 + 32 * (i - 1)\n    interpret 'srv'i'     = Storage(D2x(csfdacc + offset),8)'\n    interpret 'if (srv'i' = ENCSDES) then service = ENCSDES'\n    interpret 'if (srv'i' = ENCTDES) then service = ENCTDES'\n    interpret 'if (srv'i' = DECSDES) then service = DECSDES'\n    interpret 'if (srv'i' = DECTDES) then service = DECTDES'\n    interpret 'if (srv'i' = MACGEN ) then service = MACGEN '\n    interpret 'if (srv'i' = MACVER ) then service = MACVER '\n    interpret 'if (srv'i' = OWH    ) then service = OWH '\n    interpret 'if (srv'i' = PTR    ) then service = PTR '\n    interpret 'if (srv'i' = PVR    ) then service = PVR '\n    interpret 'if (srv'i' = OWH256 ) then service = OWH256 '\n    interpret 'srv'i'cn1 = C2d(Storage(D2x(csfdacc + offset + 8),8))'\n    interpret 'srv'i'cn2 = C2d(Storage(D2x(csfdacc + offset + 16),8))'\n    interpret 'srv'i'cn3 = C2d(Storage(D2x(csfdacc + offset + 24),8))'\n    select\n      when (service = ENCSDES) then\n        do\n          interpret 'srv'i' = \"Encipher Single DES\"'\n        end\n      when (service = ENCTDES) then\n        do\n          interpret 'srv'i' = \"Encipher Triple DES\"'\n        end\n      when (service = DECSDES) then\n        do\n          interpret 'srv'i' = \"Decipher Single DES\"'\n        end\n      when (service = DECTDES) then\n        do\n          interpret 'srv'i' = \"Decipher Triple DES\"'\n        end\n      when (service = MACGEN ) then\n        do\n          interpret 'srv'i' = \"MAC_Generate\"'\n        end\n      when (service = MACVER ) then\n        do\n          interpret 'srv'i' = \"MAC_Verify\"'\n        end\n      when (service = OWH    ) then\n        do\n          interpret 'srv'i' = \"One_Way_Hash\"'\n        end\n      when (service = OWH256 ) then\n        do\n          interpret 'srv'i' = \"One_Way_Hash_256\"'\n        end\n      when (service = PTR    ) then\n        do\n          interpret 'srv'i' = \"PIN_Translate \"'\n          interpret 'srv'i'cn2 = \"no value\"'\n          interpret 'srv'i'cn3 = \"no value\"'\n        end\n      when (service = PVR    ) then\n        do\n          interpret 'srv'i' = \"PIN_Verify \"'\n          interpret 'srv'i'cn2 = \"no value\"'\n          interpret 'srv'i'cn3 = \"no value\"'\n        end\n      otherwise\n        nop\n    end\n  end\nRETURN\n\nWILDCARD: PROCEDURE\n  ARG name,pattern                   /* parse arguments */\n/*SAY name pattern*/\n  IF pattern='*' THEN RETURN 1       /* we have a match */\n  n=1\n  DO p=1 TO LENGTH(pattern)\n    p1=SUBSTR(pattern,p,1)\n    SELECT\n      WHEN p1=SUBSTR(name,n,1) THEN n=n+1\n      WHEN p1='%' THEN n=n+1\n      WHEN p1='*' THEN DO\n        IF p=LENGTH(pattern) THEN RETURN 1\n        n=INDEX(name,SUBSTR(pattern,p+1,1),n+1)\n        IF n=0 THEN RETURN 0        /* mismatch, exit */\n        END\n      OTHERWISE RETURN 0            /* mismatch, exit */\n      END\n  END\n  RETURN n=LENGTH(name)+1\n\nGetAllCryptoUser:\n/*** REXX GetAllCryptoUser *******************************************/\n/*                                                                   */\n/* Print a list of address spaces which are using crypto operations. */\n/*                                                                   */\n/* Use the field ASSBFSC in the ASSB filled by IEAMFCNT - Interface  */\n/* to the Feature count service routine.                             */\n/* A descriptions can be found in SYS1.MACLIB(IEAMFCNT).             */\n/*                                                                   */\n/* K.Doppelfeld   13.05.08                                           */\n/*                                                                   */\n/*********************************************************************/\ncvt=ptr(16)                            /* Get CVT                    */\nasvt=ptr(cvt+556)+512                  /* Get asvt                   */\nasvtmaxu=ptr(asvt+4)                   /* Get max asvt entries       */\n\naddress ispexec \"control errors return\"\n                                       /* build a temp. tabele to    */\naddress ispexec \"tbclose tmptbl\"       /* store and display all users*/\naddress ispexec \"tberase tmptbl\"       /* which are using crypto     */\ntable_row = \"JOBNAME ASID JOBID CRYPCNT\"  /* services.               */\naddress ispexec \"tbcreate tmptbl names(\"table_row\") nowrite replace\"\naddress ispexec \"control errors cancel\"\n\nDo a = 0 to asvtmaxu - 1\n  ascb=stg(asvt+16+a*4,4)              /* Get ptr to ascb (Skip\n                                          master)                    */\n  If bitand(ascb,'80000000'x) = '00000000'x Then /* If in use        */\n    Do\n      ascb=c2d(ascb)                    /* Get ascb address          */\n      xascb=d2x(ascb)                   /* Get ascb address          */\n      cscb=ptr(ascb+56)                 /* Get CSCB address          */\n      assb=ptr(ascb+336)                /* Get assb address          */\n      ASSBFSC =x2d(c2x(stg(assb+164,4))) /* crypto counter   */\n      jsab=ptr(assb+168)                /* Get jasb address          */\n      chtrkid=stg(cscb+28,1)           /* Check addr space type      */\n      ascbjbns=ptr(ascb+176)           /* Get ascbjbns               */\n      ascbjbni=ptr(ascb+172)           /* Get ascbjbni               */\n      ascbasid=c2x(stg(ascb+36,2))     /* Get asid                   */\n      ascbrctf=ptr(ascb+102)           /* ascb rctf                  */\n      jsabuser=stg(jsab+44,8)          /* Get userid from jsab       */\n      jsabjobi=stg(jsab+20,8)          /* Get jobid  from jsab       */\n\n      if (ASSBFSC <> 0) then\n        do\n          If chtrkid='03'x Then        /* Batch Job or Initiator     */\n            do\n              if (ascbjbni<>0) then\n                do\n                  Jobname = stg(ascbjbni,8)\n                  Asid    = ascbasid\n                  Jobid   = jsabjobi\n                  Crypcnt = right(ASSBFSC,10,' ')\n                  address ispexec \"tbadd tmptbl\"\n                end\n              else\n                nop\n            end\n          else                         /* all other workers          */\n            do\n              Jobname = stg(ascbjbns,8)\n              Asid    = ascbasid\n              Jobid   = jsabjobi\n              Crypcnt = right(ASSBFSC,10,' ')\n              address ispexec \"tbadd tmptbl\"\n            end\n        end\n      else\n        nop\n    End\nEnd\naddress ispexec \"tbtop   tmptbl\"\naddress ispexec \"tbsort  tmptbl fields(jobname)\"\nReturn\n\n/*********************************************************************/\n/* storage routines                                                  */\n/*********************************************************************/\nptx: return c2x(storage(d2x(arg(1)),4))\nptr: return c2d(storage(d2x(arg(1)),4))\nstg: return storage(d2x(arg(1)),arg(2))\n\nRexxWait:\n/*.REXX EXEC */\n/*.*******************************************************************/\n/*.TSOWAIT : WAIT/SLEEP FOR SPECIFIED NUMBER OF SECONDS              */\n/*.*******************************************************************/\n/*.FORMAT: TSOWAIT SECONDS                                           */\n/*.SECONDS MUST BE A WHOLE NUMBER, OTHERWISE DEFAULT TO 15 SECONDS   */\n/*.*******************************************************************/\n/*.USES OS/390 UNIX CALLABLE SERVICES EXTENSIONS FOR REXX            */\n/*.*******************************************************************/\nTRACE OFF\nARG PARMS\nEXITRC = 0\nSECONDS = WORD(PARMS,1)\nDEFAULT_SECONDS = 15\nIF SECONDS = '' THEN SECONDS = DEFAULT_SECONDS\nIF DATATYPE(SECONDS,\"WHOLE NUMBER\")\n   THEN SECONDS = ABS(SECONDS)\n   ELSE SECONDS = DEFAULT_SECONDS\n/* CALL SYSCALLS 'ON' */\nIF SYSCALLS('ON') > 0\nTHEN DO\n       SAY 'UNABLE TO ESTABLISH THE UNIX SYSCALL ENVIRONMENT'\n       EXITRC = SYSCALLS('ON')\n       RETURN exitrc\n     END\n/* CALL TIME 'E' */\n/* SAY 'READY TO SLEEP FOR ' SECONDS 'SECONDS' */\nADDRESS SYSCALL 'SLEEP ' SECONDS\nEXITRC = RC\n/* SAY 'I WAITED 'TIME('E')' SECONDS' */\nRETURN exitrc\n\nBuildTempPanel:\n\n\"ALLOC NEW DEL F($UPDPAN) DSO(PO) DIR(3) SP(5,5) TRACK\n        REUSE RECFM(F B) BLKSIZE(0) LRECL(80) UNIT(\"unitname\")\"\nAddress ispexec\n\"LMINIT DATAID(TMPPNL) ENQ(EXCLU) DDNAME($UPDPAN)\"\n\"LMOPEN DATAID(\"tmppnl\") OPTION(OUTPUT)\"\n\n/* build status panel */\n\nDo queued();pull;end\nqueue ,\n\")ATTR                                                                \"\nqueue ,\n\"  \u00ac TYPE(Text) color(white)                                          \"\nqueue ,\n\"  _ TYPE(INPUT) COLOR(GREEN) INTENS(HIGH) CAPS(ON) HILITE(USCORE)    \"\nqueue ,\n\"  $ TYPE(OUTPUT) color(white) just(right)                            \"\nqueue ,\n\"  | TYPE(OUTPUT) COLOR(RED)                                          \"\nqueue ,\n\"  % TYPE(OUTPUT) color(blue) hilite(reverse)                         \"\nqueue ,\n\"  + TYPE(TEXT) color(blue)                                           \"\nqueue ,\n\"  ? TYPE(TEXT) color(blue) hilite(reverse)                           \"\nqueue ,\n\"  @ TYPE(TEXT) color(yellow)                                         \"\nqueue ,\n\")BODY WINDOW(69,22)                                                  \"\nqueue ,\n\"+-@ICSF Status Display+-----+ICSF Fmid :|Z       +Asid :|Z   +(hex)+-\"\nqueue ,\n\"+COMMAND\u00ac===>_ZCMD                                   @CPU-Model:|Z   \"\nqueue ,\n\"\u00acICSF Serv active  :|Z\u00ac CPACF available   :|Z\u00ac Compat permitted  :|Z+\"\nqueue ,\n\"\u00acmin 1 valid M-Key :|Z\u00ac CCP Hardware Instr:|Z\u00ac Support 64Bit Call:|Z+\"\nqueue ,\n\"\u00acICSF Init complete:|Z\u00ac min 1 CCP active  :|Z\u00ac min 1 CCP online  :|Z+\"\nqueue ,\n\"\u00acICSF active and PCF not    :|Z\u00ac Other Secure crypto available   :|Z+\"\nqueue ,\n\"\u00acmin 1 valid crypto unit    :|Z\u00ac SEC250 level or CRYPTO or above :|Z+\"\nqueue ,\n\"\u00acHardware environment tested:|Z\u00ac Additional Hardware env tested  :|Z+\"\nqueue ,\n\"?  Service(s) formated with    number of    bytes cnt  number of     \"\nqueue ,\n\"?   CB CSFDACC (count : \"servcnt\")\",\n\"   calls        (accu.)    cmd/PCMF inst.\"\nqueue ,\n\"+ |srv1                      $srv1cn1   +$srv1cn2    +  $srv1cn3    +\"\nqueue ,\n\"+ |srv2                      $srv2cn1   +$srv2cn2    +  $srv2cn3    +\"\nqueue ,\n\"+ |srv3                      $srv3cn1   +$srv3cn2    +  $srv3cn3    +\"\nqueue ,\n\"+ |srv4                      $srv4cn1   +$srv4cn2    +  $srv4cn3    +\"\nqueue ,\n\"+ |srv5                      $srv5cn1   +$srv5cn2    +  $srv5cn3    +\"\nqueue ,\n\"+ |srv6                      $srv6cn1   +$srv6cn2    +  $srv6cn3    +\"\nqueue ,\n\"+ |srv7                      $srv7cn1   +$srv7cn2    +  $srv7cn3    +\"\nqueue ,\n\"+ |srv8                      $srv8cn1   +$srv8cn2    +  $srv8cn3    +\"\nqueue ,\n\"+ |srv9                      $srv9cn1   +$srv9cn2    +  $srv9cn3    +\"\nqueue ,\n\"+ |srv10                     $srv10cn1  +$srv10cn2   +  $srv10cn3   +\"\nqueue ,\n\"\u00acENTER+to refresh,\u00acGO+for 10s Statistic,\u00acLUSER+List all crypto user,+\"\nqueue ,\n\"\u00acPF1+for Help or\u00acEND+to leave.\"\nqueue ,\n\")INIT                                                                \"\nqueue ,\n\" .HELP = ICSFHLP1                                                    \"\nqueue ,\n\" .ZVARS = '(CCVTFMID,CCVTASID,PCCAMDL,CCVTACT,CCVTACF ,CCVTCOMP,   + \"\nqueue ,\n\"   CCVTMK  ,CCVTCCPH,CCVTS64C,CCVTINIT,CCVTCCP ,CCVTCCPO,CCVTCSF , + \"\nqueue ,\n\"   CCVTASCD,CCVTHW  ,CCVTCUCV,CCVTENVT,CCVTENVK            )' \"\nqueue ,\n\")PROC                                                                \"\nqueue ,\n\")end                                                                 \"\n\nDo queued()\n  parse pull line\n  \"LMPUT DATAID(&TMPPNL) MODE(INVAR) DATALOC(LINE) DATALEN(80)\"\nEnd\n\"LMMADD DATAID(&TMPPNL) MEMBER(icsfmp01)\"\n\n/* build statistik panel */\n\nDo queued();pull;end\nqueue ,\n\")ATTR                                                                \"\nqueue ,\n\"  \u00ac TYPE(Text) color(white)                                          \"\nqueue ,\n\"  _ TYPE(INPUT) COLOR(GREEN) INTENS(HIGH) CAPS(ON) HILITE(USCORE)    \"\nqueue ,\n\"  $ TYPE(OUTPUT) color(white) just(right)                            \"\nqueue ,\n\"  | TYPE(OUTPUT) COLOR(RED)                                          \"\nqueue ,\n\"  % TYPE(OUTPUT) COLOR(BLUE) HILITE(REVERSE)                         \"\nqueue ,\n\"  + TYPE(TEXT) color(blue)                                           \"\nqueue ,\n\"  ? TYPE(TEXT) COLOR(BLUE) HILITE(REVERSE)                           \"\nqueue ,\n\"  @ TYPE(TEXT) color(yellow)                                         \"\nqueue ,\n\")BODY WINDOW(69,16)                                                  \"\nqueue ,\n\"+-@ICSF Status Display+-----+Used services in last &act seconds -----\"\nqueue ,\n\"+COMMAND\u00ac===>_ZCMD                                                   \"\nqueue ,\n\"?  Service(s) formated with    number of    bytes cnt  number of     \"\nqueue ,\n\"?   CB CSFDACC (count : \"servcnt\")\",\n\"   calls        (accu.)    cmd/PCMF inst.\"\nqueue ,\n\"+ |srv1                      $srv1cn1   +$srv1cn2    +  $srv1cn3    +\"\nqueue ,\n\"+ |srv2                      $srv2cn1   +$srv2cn2    +  $srv2cn3    +\"\nqueue ,\n\"+ |srv3                      $srv3cn1   +$srv3cn2    +  $srv3cn3    +\"\nqueue ,\n\"+ |srv4                      $srv4cn1   +$srv4cn2    +  $srv4cn3    +\"\nqueue ,\n\"+ |srv5                      $srv5cn1   +$srv5cn2    +  $srv5cn3    +\"\nqueue ,\n\"+ |srv6                      $srv6cn1   +$srv6cn2    +  $srv6cn3    +\"\nqueue ,\n\"+ |srv7                      $srv7cn1   +$srv7cn2    +  $srv7cn3    +\"\nqueue ,\n\"+ |srv8                      $srv8cn1   +$srv8cn2    +  $srv8cn3    +\"\nqueue ,\n\"+ |srv9                      $srv9cn1   +$srv9cn2    +  $srv9cn3    +\"\nqueue ,\n\"+ |srv10                     $srv10cn1  +$srv10cn2   +  $srv10cn3   +\"\nqueue ,\n\"                                                                     \"\nqueue ,\n\"+Press\u00acENTER+to leave. \"\nqueue ,\n\")INIT                                                                \"\nqueue ,\n\")PROC                                                                \"\nqueue ,\n\")end                                                                 \"\n\nDo queued()\n  parse pull line\n  \"LMPUT DATAID(&TMPPNL) MODE(INVAR) DATALOC(LINE) DATALEN(80)\"\nEnd\n\"LMMADD DATAID(&TMPPNL) MEMBER(icsfmp02)\"\n\n/* build statistik panel */\n\nDo queued();pull;end\nqueue ,\n\")ATTR                                                                \"\nqueue ,\n\"  \u00ac TYPE(Text) color(white)                                          \"\nqueue ,\n\"  _ TYPE(INPUT) COLOR(GREEN) INTENS(HIGH) CAPS(ON) HILITE(USCORE)    \"\nqueue ,\n\"  $ TYPE(OUTPUT) color(white)                                        \"\nqueue ,\n\"  | TYPE(OUTPUT) COLOR(RED)                                          \"\nqueue ,\n\"  % TYPE(OUTPUT) COLOR(BLUE) HILITE(REVERSE)                         \"\nqueue ,\n\"  + TYPE(TEXT) color(blue)                                           \"\nqueue ,\n\"  ? TYPE(TEXT) COLOR(BLUE) HILITE(REVERSE)                           \"\nqueue ,\n\"  @ TYPE(TEXT) color(yellow)                                         \"\nqueue ,\n\")BODY WINDOW(41,16)                                                  \"\nqueue ,\n\"+-@User(s) using crypto +----------------\"\nqueue ,\n\"+COMMAND\u00ac===>_ZCMD                       \"\nqueue ,\n\"+        \u00acENTER+to refresh,\u00acEND+to leave.\"\nqueue ,\n\"+Select Job/STC:_jfilter +    ;\u00ac*+for ALL\"\nqueue ,\n\"?Job/STC    Asid   JobId      Crypto-Ops.\"\nqueue ,\n\")MODEL                                   \"\n/*\n\")MODEL ROWS(SCAN)                        \"\n*/\nqueue ,\n\"|Jobname   $Asid  $Jobid     $crypcnt   +\"\nqueue ,\n\")INIT                                    \"\nqueue ,\n\")PROC                                    \"\nqueue ,\n\")end                                     \"\n\nDo queued()\n  parse pull line\n  \"LMPUT DATAID(&TMPPNL) MODE(INVAR) DATALOC(LINE) DATALEN(80)\"\nEnd\n\"LMMADD DATAID(&TMPPNL) MEMBER(icsfmp03)\"\n\n/* build waittime panel */\n\nDo queued();pull;end\nqueue ,\n\")ATTR                                                            \"\nqueue ,\n\"\u00a2 ATTN(ON) TYPE(TEXT) INTENS(HIGH)                               \"\nqueue ,\n\"_ TYPE(INPUT) COLOR(WHITE) INTENS(HIGH) CAPS(ON)                 \"\nqueue ,\n\"/ TYPE(INPUT) COLOR(RED) INTENS(HIGH) CAPS(ON) JUST(LEFT)        \"\nqueue ,\n\"$ TYPE(char) COLOR(yellow) hilite(reverse)                       \"\nqueue ,\n\"? area(dynamic)                                                  \"\nqueue ,\n\"# TYPE(TEXT) COLOR(YELLOW)                                       \"\nqueue ,\n\"+ TYPE(TEXT) COLOR(BLUE)                                         \"\nqueue ,\n\"% TYPE(TEXT) COLOR(WHITE)                                        \"\nqueue ,\n\")BODY WINDOW(49,5)                                               \"\nqueue ,\n\"#ICSF Status Monitor+---------------------------\"\nqueue ,\n\"+                                               \"\nqueue ,\n\"+  Waiting .....%?char1,shadow1 -------?        \"\nqueue ,\n\"+                                               \"\nqueue ,\n\"+Waiting for &act seconds and accumulate services\"\nqueue ,\n\")REINIT                                                          \"\nqueue ,\n\"REFRESH(*)                                                       \"\nqueue ,\n\")END                                                             \"\n\nDo queued()\n  parse pull line\n  \"LMPUT DATAID(&TMPPNL) MODE(INVAR) DATALOC(LINE) DATALEN(80)\"\nEnd\n\"LMMADD DATAID(&TMPPNL) MEMBER(icsfmp04)\"\n\n/* build help panel 1 of 5 */\n\nDo queued();pull;end\nqueue ,\n\")ATTR                                                                \"\nqueue ,\n\"  \u00ac TYPE(Text) color(white)                                          \"\nqueue ,\n\"  % TYPE(INPUT) COLOR(GREEN) INTENS(HIGH) CAPS(ON) HILITE(USCORE)    \"\nqueue ,\n\"  $ TYPE(OUTPUT) color(white) just(right)                            \"\nqueue ,\n\"  | TYPE(TEXT) COLOR(RED)                                            \"\nqueue ,\n\"  + TYPE(TEXT) color(blue)                                           \"\nqueue ,\n\"  @ TYPE(TEXT) color(yellow)                                         \"\nqueue ,\n\")BODY WINDOW(69,20)                                                  \"\nqueue ,\n\"|Help+-------@ICSF Status Display Utility+----------- Panel@1+-@5+-- \"\nqueue ,\n\"+                                                                    \"\nqueue ,\n\"+The utilities shows the status of the CMOS crypto services.         \"\nqueue ,\n\"+Additionally it shows the@FMID+of the@ICSF+services and the         \"\nqueue ,\n\"@asid+in hex. where the ICSF STC runs.                               \"\nqueue ,\n\"+The status flags are extracted from control block|CSFCCVT.          \"\nqueue ,\n\"+You can find the description in@SYS1.MODGEN.                        \"\nqueue ,\n\"+                                                                    \"\nqueue ,\n\"\u00acICSF Serv active        :|Y/N+- ICSF STC is started or not.        \"\nqueue ,\n\"\u00acmin 1 valid M-Key       :|Y/N+- At least one crypto unit has a     \"\nqueue ,\n\"+   valid Master-Key (2084 Cpu's hasn't internal feat.)\"\nqueue ,\n\"\u00acICSF Init complete      :|Y/N+- ICSF Initialization complete.      \"\nqueue ,\n\"\u00acICSF active and PCF not :|Y/N+- ICSF/MVS is active (not PCF or CUSP)\"\nqueue ,\n\"\u00acmin 1 valid crypto unit :|Y/N+- At least one Integrated Crypto.    \"\nqueue ,\n\"+   Feature is valid.                                    \"\nqueue ,\n\"\u00acHardware environment tested :|Y/N+- Hardware environment tested.\"\nqueue ,\n\"\u00acCPACF available         :|Y/N+- Crypto assist instructions available\"\nqueue ,\n\"\u00acCCP Hardware Instr      :|Y/N+- PCI Crypto. hardware instruct. avail\"\nqueue ,\n\"+                                                                    \"\nqueue ,\n\"+Press\u00acENTER+to see next help panel, press\u00acEND+to leave.             \"\nqueue ,\n\")INIT                                                                \"\nqueue ,\n\" &ZCONT = ICSFHLP2                                                   \"\nqueue ,\n\" .HELP = ICSFHLP1                                                    \"\nqueue ,\n\")PROC                                                                \"\nqueue ,\n\")end                                                                 \"\n\nDo queued()\n  parse pull line\n  \"LMPUT DATAID(&TMPPNL) MODE(INVAR) DATALOC(LINE) DATALEN(80)\"\nEnd\n\"LMMADD DATAID(&TMPPNL) MEMBER(ICSFHLP1)\"\n\n/* build help panel 2 of 5 */\n\nDo queued();pull;end\nqueue ,\n\")ATTR                                                                \"\nqueue ,\n\"  \u00ac TYPE(Text) color(white)                                          \"\nqueue ,\n\"  % TYPE(INPUT) COLOR(GREEN) INTENS(HIGH) CAPS(ON) HILITE(USCORE)    \"\nqueue ,\n\"  $ TYPE(OUTPUT) color(white) just(right)                            \"\nqueue ,\n\"  | TYPE(TEXT) COLOR(RED)                                            \"\nqueue ,\n\"  + TYPE(TEXT) color(blue)                                           \"\nqueue ,\n\"  @ TYPE(TEXT) color(yellow)                                         \"\nqueue ,\n\")BODY WINDOW(69,20)                                                  \"\nqueue ,\n\"|Help+-------@ICSF Status Display Utility+----------- Panel@2+-@5+-- \"\nqueue ,\n\"+                                                                    \"\nqueue ,\n\"\u00acmin 1 CCP active        :|Y/N+- At least one PCI crypto   \"\nqueue ,\n\"+   coprocessor is active.                                           \"\nqueue ,\n\"\u00acmin 1 CCP online        :|Y/N+- At least one PCI crypto \"\nqueue ,\n\"+   coprocessor is online.                                           \"\nqueue ,\n\"\u00acCompat permitted        :|Y/N+- Compatibility is permitted\"\nqueue ,\n\"\u00acSupport 64Bit Call      :|Y/N+- Support for 64-bit callers\"\nqueue ,\n\"\u00acOther Secure crypto available  :|Y/N+- Additional secure Crypto  \"\nqueue ,\n\"+   device available.                                                \"\nqueue ,\n\"\u00acSEC250 level or CRYPTO or above:|Y/N+- SEC250 or above           \"\nqueue ,\n\"\u00acAdditional Hardware env tested :|Y/N+- Additional hardware       \"\nqueue ,\n\"+   environment tested.                                              \"\nqueue ,\n\"+                                                                    \"\nqueue ,\n\"+The service section shows the accumulated crypto services since last\"\nqueue ,\n\"+IPL. The services are formatted with the control block|CSFDACC+and  \"\nqueue ,\n\"+used for RMF reporting. Hit\u00acENTER+to refresh the display.           \"\nqueue ,\n\"+You can find the description in@SYS1.MODGEN.                        \"\nqueue ,\n\"+                                                                    \"\nqueue ,\n\"+Press\u00acENTER+to see next help panel, press\u00acEND+to leave.             \"\nqueue ,\n\")INIT                                                                \"\nqueue ,\n\" &ZCONT = ICSFHLP3                                                   \"\nqueue ,\n\" .HELP = ICSFHLP1                                                    \"\nqueue ,\n\")PROC                                                                \"\nqueue ,\n\")end                                                                 \"\n\nDo queued()\n  parse pull line\n  \"LMPUT DATAID(&TMPPNL) MODE(INVAR) DATALOC(LINE) DATALEN(80)\"\nEnd\n\"LMMADD DATAID(&TMPPNL) MEMBER(ICSFHLP2)\"\n\n/* build help panel 3 of 5 */\n\nDo queued();pull;end\nqueue ,\n\")ATTR                                                                \"\nqueue ,\n\"  \u00ac TYPE(Text) color(white)                                          \"\nqueue ,\n\"  % TYPE(INPUT) COLOR(GREEN) INTENS(HIGH) CAPS(ON) HILITE(USCORE)    \"\nqueue ,\n\"  $ TYPE(OUTPUT) color(white) just(right)                            \"\nqueue ,\n\"  | TYPE(TEXT) COLOR(RED)                                            \"\nqueue ,\n\"  + TYPE(TEXT) color(blue)                                           \"\nqueue ,\n\"  @ TYPE(TEXT) color(yellow)                                         \"\nqueue ,\n\")BODY WINDOW(69,20)                                                  \"\nqueue ,\n\"|Help+-------@ICSF Status Display Utility+----------- Panel@3+-@5+-- \"\nqueue ,\n\"+                                                                    \"\nqueue ,\n\"+The following services are displayed:                               \"\nqueue ,\n\"+ |CSNBENC+-|Encipher:                                               \"\nqueue ,\n\"+ @-+This will be done for single DES separately.                    \"\nqueue ,\n\"+    Collect number of service calls, number of                      \"\nqueue ,\n\"+    bytes of data enciphered, number of CMD instructions            \"\nqueue ,\n\"+    used to encipher the data.                                      \"\nqueue ,\n\"+                                                                    \"\nqueue ,\n\"+ @-+Double and triple DES will be counted together.                 \"\nqueue ,\n\"+    collect number of service calls, number of                      \"\nqueue ,\n\"+    bytes of data enciphered, number of CMD instructions            \"\nqueue ,\n\"+    used to encipher the data.                                      \"\nqueue ,\n\"+ |CSNBDEC+-|Decipher:                                               \"\nqueue ,\n\"+ @-+This will be done for single DES separately.                    \"\nqueue ,\n\"+    Collect number of service calls, number of                      \"\nqueue ,\n\"+    bytes of data deciphered, number of CMD instructions            \"\nqueue ,\n\"+    used to decipher the data.                                      \"\nqueue ,\n\"+                                                                    \"\nqueue ,\n\"+Press\u00acENTER+to see next help panel, press\u00acEND+to leave.             \"\nqueue ,\n\")INIT                                                                \"\nqueue ,\n\" &ZCONT = ICSFHLP4                                                   \"\nqueue ,\n\" .HELP = ICSFHLP1                                                    \"\nqueue ,\n\")PROC                                                                \"\nqueue ,\n\")end                                                                 \"\n\nDo queued()\n  parse pull line\n  \"LMPUT DATAID(&TMPPNL) MODE(INVAR) DATALOC(LINE) DATALEN(80)\"\nEnd\n\"LMMADD DATAID(&TMPPNL) MEMBER(ICSFHLP3)\"\n\n/* build help panel 4 of 5 */\n\nDo queued();pull;end\nqueue ,\n\")ATTR                                                                \"\nqueue ,\n\"  \u00ac TYPE(Text) color(white)                                          \"\nqueue ,\n\"  % TYPE(INPUT) COLOR(GREEN) INTENS(HIGH) CAPS(ON) HILITE(USCORE)    \"\nqueue ,\n\"  $ TYPE(OUTPUT) color(white) just(right)                            \"\nqueue ,\n\"  | TYPE(TEXT) COLOR(RED)                                            \"\nqueue ,\n\"  + TYPE(TEXT) color(blue)                                           \"\nqueue ,\n\"  @ TYPE(TEXT) color(yellow)                                         \"\nqueue ,\n\")BODY WINDOW(69,20)                                                  \"\nqueue ,\n\"|Help+-------@ICSF Status Display Utility+----------- Panel@4+-@5+-- \"\nqueue ,\n\"+                                                                    \"\nqueue ,\n\"+ @-+Double and triple DES will be counted together.                 \"\nqueue ,\n\"+    collect number of service calls, number of                      \"\nqueue ,\n\"+    bytes of data deciphered, number of CMD instructions            \"\nqueue ,\n\"+    used to decipher the data.                                      \"\nqueue ,\n\"+ |CSNBMGN+-|MAC-Generate:                                           \"\nqueue ,\n\"+ @-+Single and varous double key MAC will be                        \"\nqueue ,\n\"+    gathered together.                                              \"\nqueue ,\n\"+    Collect number of service calls, number of                      \"\nqueue ,\n\"+    bytes of data MACd, number of PCMF instructions.                \"\nqueue ,\n\"+ |CSNBMVR+-|MAC-Verify:                                             \"\nqueue ,\n\"+ @-+Single and varous double key MAC will be                        \"\nqueue ,\n\"+    gathered together.                                              \"\nqueue ,\n\"+    Collect number of service calls, number of                      \"\nqueue ,\n\"+    bytes of data MACd, number of PCMF instructions.                \"\nqueue ,\n\"+ |CSNBOWH+-|One-Way-Hash:                                           \"\nqueue ,\n\"+ @-+For SHA-1,                                                      \"\nqueue ,\n\"+                                                                    \"\nqueue ,\n\"+Press\u00acENTER+to see next help panel, press\u00acEND+to leave.             \"\nqueue ,\n\")INIT                                                                \"\nqueue ,\n\" &ZCONT = ICSFHLP5                                                   \"\nqueue ,\n\" .HELP = ICSFHLP1                                                    \"\nqueue ,\n\")PROC                                                                \"\nqueue ,\n\")end                                                                 \"\n\nDo queued()\n  parse pull line\n  \"LMPUT DATAID(&TMPPNL) MODE(INVAR) DATALOC(LINE) DATALEN(80)\"\nEnd\n\"LMMADD DATAID(&TMPPNL) MEMBER(ICSFHLP4)\"\n\n/* build help panel 5 of 5 */\n\nDo queued();pull;end\nqueue ,\n\")ATTR                                                                \"\nqueue ,\n\"  \u00ac TYPE(Text) color(white)                                          \"\nqueue ,\n\"  % TYPE(INPUT) COLOR(GREEN) INTENS(HIGH) CAPS(ON) HILITE(USCORE)    \"\nqueue ,\n\"  $ TYPE(OUTPUT) color(white) just(right)                            \"\nqueue ,\n\"  | TYPE(TEXT) COLOR(RED)                                            \"\nqueue ,\n\"  + TYPE(TEXT) color(blue)                                           \"\nqueue ,\n\"  @ TYPE(TEXT) color(yellow)                                         \"\nqueue ,\n\")BODY WINDOW(69,20)                                                  \"\nqueue ,\n\"|Help+-------@ICSF Status Display Utility+----------- Panel@5+-@5+-- \"\nqueue ,\n\"+                                                                    \"\nqueue ,\n\"+    Collect number of service calls, number of                      \"\nqueue ,\n\"+    bytes of data hashed, number of PCMF instructions               \"\nqueue ,\n\"+    for SHA-1.                                                      \"\nqueue ,\n\"+ |CSNBOWH+-|One-Way-Hash-256:                                       \"\nqueue ,\n\"+ @-+For SHA-256,                                                    \"\nqueue ,\n\"+    Collect number of service calls, number of                      \"\nqueue ,\n\"+    bytes of data hashed, number of PCMF instructions               \"\nqueue ,\n\"+    for SHA-256.                                                    \"\nqueue ,\n\"+ |CSNBPTR+-|PIN-Translate:                                          \"\nqueue ,\n\"+ @-+Collect number of service calls only.                           \"\nqueue ,\n\"+ |CSNBPVR+-|PIN-Verify:                                             \"\nqueue ,\n\"+ @-+Collect number of service calls only.                           \"\nqueue ,\n\"+                                                                    \"\nqueue ,\n\"+ \u00acGO     +:+count services for a given interval ;\u00acGO|xxx+sec;       \"\nqueue ,\n\"+            def. 10 secs, max 300 secs.                             \"\nqueue ,\n\"+ \u00acLUSER  +:+List all Job/STCs which are using crypto operations.    \"\nqueue ,\n\"+                                                                    \"\nqueue ,\n\"+Press\u00acENTER+to see first help panel, press\u00acEND+to leave.            \"\nqueue ,\n\")INIT                                                                \"\nqueue ,\n\" &ZCONT = ICSFHLP1                                                   \"\nqueue ,\n\" .HELP = ICSFHLP1                                                    \"\nqueue ,\n\")PROC                                                                \"\nqueue ,\n\")end                                                                 \"\n\nDo queued()\n  parse pull line\n  \"LMPUT DATAID(&TMPPNL) MODE(INVAR) DATALOC(LINE) DATALEN(80)\"\nEnd\n\"LMMADD DATAID(&TMPPNL) MEMBER(ICSFHLP5)\"\n\n\"LIBDEF ISPPLIB LIBRARY ID($UPDPAN) STACK\"\n\nReturn\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT771/FILE771.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT771", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}