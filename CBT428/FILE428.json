{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012010000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 411502, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE428.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 411502, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 411502, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE428.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x07\\n'", "DS1TRBAL": "b'\\x80*'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x03\\x11\\x00\\x08\\x03\\x12\\x00\\x00\\x00\\x08'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$DOC": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x93)_\\x00\\x93)_\\x08\\t\\x00\\x14\\x00\\x0c\\x00\\x00\\xe2\\xc2\\xc7\\xc3\\xe2\\xc3@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1993-10-22T00:00:00", "modifydate": "1993-10-22T08:09:00", "lines": 20, "newlines": 12, "modlines": 0, "user": "SBGCSC"}, "text": "Short doc.\n\n   This is the SHOW program which comes from the SHARE 81 PC diskettes\nthat were distributed at SHARE in Washington D.C., August 1993.\n\n   This material was contributed by Lionel Dyck and Douglas Adams\nof Rockwell International in Seal Beach, California.\n\n\n         Douglas H. Adams          Lionel B. Dyck\n                Mail Code 110-SE28\n                Information Systems Center\n                Rockwell International Corporation\n                2201 Seal Beach Boulevard\n                P. O. Box 2515\n                Seal Beach, California 90740-1515\n\n         (310) 797-2618            (310) 797-1125\n\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ASM": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x93!?\\x00\\x93!?\\t\\x00\\n\\x00\\n\\x00\\x00\\x00\\xd9\\xd6\\xc3\\xd2\\xe6\\xc5\\xd3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-08-01T00:00:00", "modifydate": "1993-08-01T09:00:00", "lines": 2560, "newlines": 2560, "modlines": 0, "user": "ROCKWEL"}, "text": "./ ADD NAME=IKJCT44B 0100-92115-92118-1606-000141-000120-000000-$A1019\nIKJCCT4B TITLE 'ROCKWELL CLIST BUILT-IN FUNCTION EXIT'\n***********************************************************************\n*        Rockwell CLIST Built-in Function Exit\n*\n*        CLIST Function &SYSXSHOW Interface to SHOW\n*\n*        Use: refer to &SYSXSHOW(id), where \"id\" is a valid value for\n*        the SHOW routine.\n*        \"id\" may be a constant or a variable, and may be either\n*        uppercase or lowercase.\n*\n*\n*        Douglas H. Adams\n*        Mail code 110-SE28\n*        Information Systems Center\n*        Rockwell International Corporation\n*        2201 Seal Beach Boulevard\n*        P. O. Box 2515\n*        Seal Beach, California 90740-1515\n*\n*        (310) 797-2618\n*\n*        April 24, 1992\n*\n***********************************************************************\n         PUNCH ' ALIAS IKJCT44B'\nIKJCCT4B CSECT\nIKJCCT4B AMODE 31\nIKJCCT4B RMODE ANY\n         EJECT\n***********************************************************************\n*                                  EXIT PARAMETERS\n***********************************************************************\nPARMS    DSECT                     PARAMETERS PASSED TO EXIT\nPCBUF    DS    A                   COMMAND BUFFER\nPNCBUF   DS    A                   NEW COMMAND BUFFER\nPUPT     DS    A                   USER PROFILE TABLE\nPECT     DS    A                   ENVIRONMENTAL CONTROL TABLE\nPPSCB    DS    A                   PROTECTED STEP CONTROL BLOCK\nPCOMM    DS    A                   EXIT-TO-EXIT COMMUNICATION WORD\nPREASON  DS    A                   EXIT REASON CODE\n         DS    A                   RESERVED\n         DS    A                   RESERVED\nPNAME    DS    A                   NAME OF BUILT-IN FUNCTION\nPARG     DS    A                   ARGUMENT OF BUILT-IN FUNCTION\nPRESULT  DS    A                   256 BYTE ANSWER AREA\nPALTLEN  DS    A                   ALTERNATE BUFFER LENGTH\n*\nPARMENT  DSECT                     PARAMETER ENTRY\nKEY      DS    XL4                 TYPE OF ENTRY\nLENGTH   DS    F                   LENGTH OF DATA\nDATA     DS    A                   DATA OR ADDRESS OF DATA\n         EJECT\n***********************************************************************\n*                                  WORK AREA FOR REENTRANCE\n***********************************************************************\nWORKAREA DSECT\nSAVE     DS    18F                 SAVE AREA\nID       DS    CL8\nCALL     CALL  ,(ID,ILENGTH,,),MF=L  SHOW PARAMETERS\nWORKSIZE EQU   *-WORKAREA\n***********************************************************************\n*                                  INITIALIZATION\n***********************************************************************\nIKJCCT4B CSECT\n         USING IKJCCT4B,15\n         SAVE  (14,12)             SAVE REGISTERS\n         MODID\n         DROP  15\n         LR    12,15               SET BASE REGISTER\n         USING IKJCCT4B,12\n         LR    2,1                 SAVE PARAMETER POINTER\n         USING PARMS,2\n         LA    0,WORKSIZE          GET WORK AREA SIZE\n         GETMAIN RU,LV=(0)         GET WORKAREA STORAGE\n         XC    0(WORKSIZE,1),0(1)  CLEAR WORK AREA\n         ST    1,8(,13)            CHAIN SAVE AREAS\n         ST    13,4(,1)\n         LR    13,1\n         USING WORKAREA,13\n***********************************************************************\n*                                  GET FUNCTION VALUE\n***********************************************************************\n         L     3,PNAME             POINT TO FUNCTION NAME ENTRY\n         USING PARMENT,3\n         L     4,LENGTH            GET LENGTH OF FUNCTION  NAME\n         C     4,=A(L'SYSXSHOW)    CORRECT LENGTH?\n         BNE   ERROR1              NO, BRANCH\n         L     5,DATA              POINT TO FUNCTION NAME\n         CLC   SYSXSHOW,0(5)       CORRECT NAME?\n         BNE   ERROR1              NO, BRANCH\n         L     3,PARG              POINT TO ARGUMENT ENTRY\n         ICM   4,15,LENGTH         GET LENGTH OF ARGUMENT\n         BNP   ERROR2              NULL OR NEGATIVE, BRANCH\n         C     4,=F'8'             IS ARG TOO BIG?\n         BH    ERROR2              YES, BRANCH\n         MVC   ID,=CL8' '          SET ID TO BLANKS\n         BCTR  4,0                 GET MACHINE LENGTH OF ID\n         L     5,DATA              POINT TO ID\n         EX    4,MVC               MOVE ARG TO ID\n         L     3,PRESULT           POINT TO RESULT ENTRY\n         LA    4,LENGTH            POINT TO LENGTH OF RESULT\n         L     5,DATA              POINT TO RESULT\n         ICM   15,15,=V(SHOW)      GET ENTRY POINT OF SHOW\n         BZ    LINK                BRANCH IF NOT RESOLVED\n         CALL  (15),(ID,ILENGTH,(5),(4)),VL,MF=(E,CALL)\n         B     TESTRET             GO TEST RETURN CODE\nLINK     EQU   *\n         LINK  EP=SHOW,PARAM=(ID,ILENGTH,(5),(4)),VL=1,MF=(E,CALL)\nTESTRET  EQU   *\n         LTR   15,15               SUCCESSFUL?\n         BZ    RETURN              YES, BRANCH\n         BNZ   ERROR2              NO, BRANCH\n***********************************************************************\n*                                  TERMINATION\n***********************************************************************\n         EJECT\nERROR1   EQU   *\n         LA    15,8                NOT A SUPPORTED FUNCTION\nERROR2   EQU   *\n         LA    15,12               EXIT PROCESSING UNSUCCESSFUL\n*                                  CLIST PROCESSING ISSUES MESSAGE\nRETURN   EQU   *\n         LR    2,15                SAVE RETURN CODE\n         LA    0,WORKSIZE          GET WORKAREA SIZE\n         LR    1,13                UNCHAIN SAVE AREAS\n         L     13,4(,1)\n         FREEMAIN RU,LV=(0),A=(1)  FREE WORK AREA STORAGE\n         LR    15,2                RESTORE RETURN CODE\n         RETURN (14,12),RC=(15)    RETURN\n*\nMVC      MVC   ID(0),0(5)          EXECUTED\n         DROP  13\n         DROP  12\n         EJECT\n***********************************************************************\n*                                  DATA\n***********************************************************************\nSYSXSHOW DC    C'SYSXSHOW'         NAME OF FUNCTION\nILENGTH  DC    F'256'              CLIST RESULT LENGTH\n         END\n./ ADD NAME=IRXFLOC  0100-92114-92115-1615-000044-000026-000000-$A1019\nIRXFLOC  TITLE 'ROCKWELL REXX FUNCTION PACKAGE DIRECTORY'\n***********************************************************************\n*        Rockwell REXX Function Package Directory\n*\n*        See macro IRXFPDIR for the format of this module.\n*\n*\n*        Douglas H. Adams\n*        Mail code 110-SE28\n*        Information Systems Center\n*        Rockwell International Corporation\n*        2201 Seal Beach Boulevard\n*        P. O. Box 2515\n*        Seal Beach, California 90740-1515\n*\n*        (310) 797-2618\n*\n*        April 24, 1992\n*\n***********************************************************************\n         PUNCH ' ALIAS IRXFLOC'\nIRXFLOC  CSECT\nIRXFLOC  AMODE 31\nIRXFLOC  RMODE ANY\n         EJECT\n         IRXFPDIR                  REXX FUNCTION PACKAGE DIRECTORY\n         EJECT\nIRXFLOC  CSECT\nHEADER   DC    CL8'IRXFPACK'       STRING IDENTIFYING DIRECTORY\n         DC    A(ENTRIES-HEADER)   LENGTH OF HEADER\n         DC    A((END-ENTRIES)/32) NUMBER OF ROWS IN DIRECTORY\n         DC    F'0'                WORD OF ZEROS\n         DC    A(FPCKDIR_NEXT-FPCKDIR_ENTRY)  LENGTH OF DIRECTORY ENTRY\n*\nENTRIES  EQU   *\n*\n         DC    CL8'SHOWREXX'       NAME USED IN EXEC\n         DC    V(SHOWREXX)         ADDRESS OF PRELOADED CODE\n         DC    F'0'                RESERVED FIELD\n         DC    CL8' '              NAME OF ENTRY POINT\n         DC    CL8' '              DD FROM WHICH TO LOAD ENTRY POINT\n*\nEND      EQU   *\n         END\n./ ADD NAME=SHOW     0147-90107-92118-1530-001517-000743-001171-$A1019\nSHOW     TITLE 'SHOW - EXTRACT INFORMATION FROM SYSTEM CONTROL BLOCKS'\n***********************************************************************\n*\n*        How to Use This Program.\n*\n*        The SHOW routine provides the caller with character string\n*        information extracted from system control blocks. Numeric and\n*        bit information is converted to character string format.\n*\n*        Entry linkage:\n*              CALL SHOW,(ID,ILENGTH,VALUE,OLENGTH),VL\n*\n*        Parameters:\n*              ID      - Character string. Input.  An 8 character\n*                        identifier for the information requested by\n*                        the caller, padded with blanks if necessary.\n*\n*              ILENGTH - Full word binary. Input.  The length of the\n*                        VALUE character string provided by the caller.\n*                        The VALUE will be padded with trailing blanks\n*                        or truncated if necessary. A maximum of 32767\n*                        is supported.\n*\n*              VALUE   - Character string. Output.  The returned\n*                        information specified by ID. The caller must\n*                        provide a receiving character string of\n*                        sufficient length.\n*\n*              OLENGTH - Full word binary. Output.  The actual length\n*                        of the value requested. This may be less than\n*                        or greater than ILENGTH.\n*\n*        Return codes:\n*               0 - Normal completion\n*               4 - VALUE truncated, insufficient length\n*               8 - ID not found\n*              12 - Too few arguments\n*              16 - System control block failed validity check\n*\n*\n*        Douglas H. Adams          Lionel B. Dyck\n*               Mail Code 110-SE28\n*               Information Systems Center\n*               Rockwell International Corporation\n*               2201 Seal Beach Boulevard\n*               P. O. Box 2515\n*               Seal Beach, California 90740-1515\n*\n*        (310) 797-2618            (310) 797-1125\n*\n*               April 24, 1992\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n* Supported arguments are:                                 *LBD 02/84*\n*                                                          *LBD 02/84*\n* ID        ILENGTH Description                            *DHA 04/92*\n*----------------------------------------------------------------------\n* ACCT       11     Rockwell Job Card Account (with FDS #) *LBD 06/89*\n* ACCTNO      8     Rockwell Job Card Account (no FDS #)   *LBD 02/84*\n* ACCTNO#     8     Rockwell ACF2 User's Account (no FDS #)*LBD 12/86*\n* ACF2ACCT   40     ACF2 User's Default Accounting Field   *LBD 02/84*\n* BCPFMID     8     Basic Control Program FMID             *DHA 04/92*\n* BCPLEVEL    8     Basic Control Program Product Name     *LBD 04/91*\n* CENTER      8     Rockwell Center Name                   *LBD 05/84*\n* COMPMAIL    4     Rockwell ACF2 User's Computer Mail Code*LBD 06/86*\n* CPU         8     System Name from SYS1.PARMLIB(IEASYSxx)*LBD 06/89*\n* CPUMODEL    4     CPU Model (e.g., 3090)                 *DHA 04/92*\n* CPUSER    112     CPU Serial(s) (Maximum 16)             *DHA 04/92*\n* CPUVER      2     CPU Version                            *DHA 04/92*\n* CRTCD       2     Rockwell Job Card CRT Code             *LBD 02/84*\n* DEPT        3     Rockwell ACF2 User's Department        *LBD 02/84*\n* DEST        8     TSO User's Default Destination         *LBD 03/84*\n* DFPLEVEL    5     Data Facility Product Level            *LBD 04/91*\n* FDS         3     Rockwell Job Card FDS #                *LBD 02/84*\n* FDS#        4     Rockwell ACF2 User's FDS #             *LBD 12/86*\n* FRAMES      3     Rockwell Job Card CRT Frame Limit      *LBD 02/84*\n* GROUP       3     Rockwell ACF2 User's Group (in Dept)   *LBD 02/84*\n* GRP         3     Rockwell ACF2 User's Group (in Dept)   *DHA 04/92*\n* HOMEDIV     4     Rockwell ACF2 User's Home Division     *LBD 10/90*\n* JOBFUNC     2     Rockwell ACF2 User's Job Function Code *LBD 10/84*\n* JOBNAME     8     Job Name                               *LBD 02/84*\n* LINES       8     Rockwell Job Card FORTRAN Line Limit   *LBD 02/84*\n* LOC         4     Rockwell ACF2 User's Physical Location *LBD 02/84*\n* MAIL        8     Rockwell ACF2 User's Mail Code         *LBD 02/84*\n* NAME       20     ACF2 User's Name                       *LBD 02/84*\n* OPSYS       7     Operating System (MVS/xxx)              *LBD 05/89*\n* OS          3     Operating System (xxx)                  *LBD 07/89*\n* OSLEV       3     Operating System (xxx)                  *LBD 07/89*\n* OSREL       4     Operating System Release Number        *LBD 03/84*\n* PHONE      12     ACF2 User's Phone Number               *LBD 02/84*\n* REFERVOL    6     Volume Serial of Dataset userid.REFER  *DHA 04/92*\n* SHOWLEV    14     Level of SHOW (Date and Time)           *LBD 04/91*\n* SYSNAME     8     System Name from SYS1.PARMIB(IEASYSxx) *LBD 03/84*\n* TERMINAL    8     Terminal ID                            *LBD 02/84*\n* TSOOPER     6     TSO OPERATOR Authority (YES or NO)      *LBD 06/89*\n* TSOUNIT     8     TSO User's Default Unit Name           *LBD 03/87*\n* UID        24     Rockwell ACF2 User's UID String         *LBD 06/89*\n* USERID      8     User ID                                *LBD 02/84*\n*----------------------------------------------------------------------\n* The following are derived from control blocks or fields\n* which are not official IBM programming interfaces. Use\n* them at your own risk.\n*\n* ID        ILENGTH Description                            *DHA 04/92*\n*----------------------------------------------------------------------\n* BDTNODE     8     MVS/BDT Node Name                      *LBD 06/84*\n* CLPA        3     CLPA Specified at last IPL (YES or NO) *DHA 04/92*\n* CVIO        3     CVIO Specified at IPL (YES or NO)      *DHA 04/92*\n* IPLDATE     8     Last IPL Date                          *DHA 04/92*\n* IPLTIME    10     Last IPL Time                          *DHA 04/92*\n* JOBID       8     Job ID (JOBnnnnn)                      *LBD 12/89*\n* LPAR        3     Logical Partition Mode (YES or NO)     *DHA 04/92*\n* PRTY        2     Job Scheduling Priority                 *LBD 07/89*\n* REALSTOR   17     Real Storage Available at Last IPL     *DHA 04/92*\n* REGION     17     Region Size (nK)                      *LBD 07/85*\n* SMFID       4     SMF ID from SYS1.PARMLIB(SMFPRMxx)      *LBD 06/89*\n* SMS         3     Status of SMS (ON or OFF)              *LBD 01/91*\n* SWA         5     SWA Location (ABOVE or BELOW)          *LBD 04/91*\n* SYSID       4     System ID from SYS1.PARMLIB(SMFPRMxx)  *LBD 03/84*\n* SYSRES      6     System Residence Volume Serial         *DHA 04/92*\n* VERID      16     Installation System Version (CVTVERID) *LBD 03/84*\n***********************************************************************\n         EJECT\n***********************************************************************\n*        Assembly Parameters                               *DHA 04/92*\n***********************************************************************\n         GBLC  &SYSSPLV            SPLEVEL                 *DHA 04/92*\n         SPLEVEL SET               SET MVS/SP VERSION      *DHA 04/92*\n&ACF2    SETB  1                   0 = NO ACF2             *DHA 04/92*\n&JES3    SETB  1                   0 = NO JES3             *DHA 04/92*\n&ROCKWELL SETB 1                   0 = NO ROCKWELL         *DHA 04/92*\n         EJECT\n***********************************************************************\n*\n*        How to Modify This Program.\n*\n*        This program has been designed to be easy to modify.  It\n*        consists of 6 sections:\n*              (1) Macro definitions\n*              (2) Control block definitions (DSECTs)\n*              (3) Work area definitions (DSECT)\n*              (4) Initialization\n*              (5) VALUE determination\n*              (6) Termination\n*\n*        Modifications will normally be done in section 2 and section\n*        5.  A modification may also require changes to section 3.\n*        Sections 4 and 6 are designed to minimize the amount of code\n*        required in section 5.\n*\n*        The functions  performed by the sections are:\n*\n*              1. The SHOW macro. There must be a SHOW macro call in\n*                 section 5 for each ID. The syntax is:\n*                    id SHOW <BLOCK=block,FIELD=field><,WORK={YES|NO}>\n*                 Required:  id.\n*                 Defaults:  BLOCK=0,FIELD=0,WORK=NO.\n*                 id     is the ID name.\n*                 BLOCK  is the name of an area containing a character\n*                        string is to be copied to VALUE.  This is\n*                        usually the name of a control block defined by\n*                        a DSECT, but it may be a name in the work\n*                        area (WORKAREA) or the name of a constant\n*                        defined by a DC within this module.\n*                 FIELD  is the name of the character string to be\n*                        copied to VALUE.  This defines the offset from\n*                        BLOCK and the length of the character string.\n*                 WORK   specifies whether or not a GETMAIN should be\n*                        issued for a work area.\n*\n*              2. Control block DSECTs.  Macro calls needed to define\n*                 control blocks should be placed here.\n*\n*              3. Work area definitions. An optional 4K work area may\n*                 be requested via the SHOW macro to allow reentrant\n*                 coding. It is RMODE 24.  The work area begins with a\n*                 standard 18 word save area, pointed to by register\n*                 13.  If an ID requires a work area, an ORG WORKORG\n*                 should be used and unique set of DS and EQU\n*                 instructions should be defined.\n*\n*              4. Initialization. This section should not be modified.\n*                 It obtains and validity checks the parameters.  It\n*                 then initializes the caller's output area to blanks\n*                 (for a length of ILENGTH) and sets OLENGTH to zero.\n*                 Next it determines which ID was requested.  If the ID\n*                 requires a work area, it issues a GETMAIN.  Finally,\n*                 it branches to the appropriate code in section 5.\n*                 The following registers are set and must not be\n*                 changed:\n*                    R8   Pointer to SHOW table entry\n*                    R9   Pointer to OLENGTH\n*                    R10  Pointer to VALUE\n*                    R11  Value of ILENGTH\n*                    R12  Base register\n*                    R13  Pointer to save area and optional work area.\n*                         If no work area was obtained, the save area\n*                         is that of SHOW's caller.\n*\n*              5. Determination of the requested VALUE. The code\n*                 receives control with RMODE 24 and AMODE 31. It must\n*                 be reentrant.  There must be SHOW macro for each ID\n*                 in this section. When multiple IDs refer to different\n*                 fields within a specific control block, they should\n*                 be grouped together with the same BLOCK value and\n*                 different FIELD values. The code following the SHOW\n*                 macro(s) must find the appropriate BLOCK value and\n*                 point to it with register 1.  The BLOCK value may be\n*                 a control block, the work area, or a constant within\n*                 this module. The code must then branch to label\n*                 FOUND.  Control blocks should be validity checked. If\n*                 they fail, the code should branch to label INVALID.\n*                 Normally, the length of FIELD is determined at\n*                 assembly time. If the length must be determined\n*                 dynamically, the code should load the length into\n*                 register 2 and branch to label FOUNDLEN.\n*\n*              6. Termination.  This section should not be modified.\n*                 When reached at label FOUND, it loads the length from\n*                 the SHOW macro FIELD definition. This is bypassed if\n*                 label FOUNDLEN is used. The code then strips off\n*                 leading and trailing blanks and nulls and move the\n*                 result to the caller's VALUE. If ILENGTH is\n*                 insufficient the VALUE is truncated.\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*        Section 1 - Macro Definitions\n*\n***********************************************************************\n         MACRO\n&ID      SHOW  &BLOCK=0,           SHOW IDENTIFIER/CONTROL BLOCK       *\n               &FIELD=0,           FIELD WITHIN CONTROL BLOCK          *\n               &WORK=NO            WORK AREA NEEDED?       *DHA 04/90*\n.*********************************************************************\n.*       &ID    Specifies the external identifier used by the caller.\n.*       &BLOCK Specifies the control block containing the required\n.*              information.\n.*       &FIELD Specifies the control block field which corresponds\n.*              the external identifier. Note the length of field is\n.*              obtained from the control block definition.\n.*       &WORK  Specifies whether or not a GETMAIN should be issued\n.*              for a work area.\n.*********************************************************************\n         GBLA  &SHOWN              NUMBER OF TABLE ENTRIES\n         GBLC  &SHOWID(100)        IDS (PADDED WITH BLANKS)\n         GBLC  &SHOWBLK(100)       BLOCKS (PADDED WITH BLANKS)\n         GBLC  &SHOWFLD(100)       FIELDS (PADDED WITH BLANKS)\n         GBLB  &SHOWWORK(100)      WORK AREA REQUIRED      *DHA 04/90*\n&ID      DS    0H\n&SHOWN            SETA &SHOWN+1    NUMBER OF IDS\n&SHOWID(&SHOWN)   SETC '&ID'       SAVE ID\n&SHOWBLK(&SHOWN)  SETC '&BLOCK'    SAVE BLOCK\n&SHOWFLD(&SHOWN)  SETC '&FIELD'    SAVE FIELD\n&SHOWWORK(&SHOWN) SETB ('&WORK' EQ 'YES')                  *DHA 04/90*\n         MEND\n         EJECT\n***********************************************************************\n         MACRO\n&NAME    SHOWTBL &END              GENERATE SHOW ID TABLE\n         GBLA  &SHOWN              NUMBER OF TABLE ENTRIES\n         GBLC  &SHOWID(100)        IDS (PADDED WITH BLANKS)\n         GBLC  &SHOWBLK(100)       BLOCKS (PADDED WITH BLANKS)\n         GBLC  &SHOWFLD(100)       FIELDS (PADDED WITH BLANKS)\n         GBLB  &SHOWWORK(100)      WORK AREA REQUIRED      *DHA 04/90*\n         LCLA  &I,&L\n         LCLC  &N\n         SPACE\nSHOWENT  DSECT                     SHOW TABLE\nSHOWID   DS    CL8                 ID (FIXED LENGTH)\nSHOWFLD  DS    Y                   OFFSET OF CONTROL BLOCK FIELD\nSHOWRTN  DS    Y                   OFFSET TO EXECUTABLE ROUTINE\nSHOWFLDL DS    H                   LENGTH OF CONTROL BLOCK FIELD\nSHOWFLAG DS    X                   FLAGS                   *DHA 04/90*\nSHOWWORK EQU   X'01'               WORK AREA REQUIRED      *DHA 04/90*\n         DS    X                   PAD                     *DHA 04/90*\nSHOWSIZE DS    0XL(*-SHOWENT)      SIZE OF TABLE ENTRY\n         SPACE\n&SYSECT  CSECT\n         SPACE\n         DS    0D\n         SHOWSORT 1,&SHOWN         SORT ID'S\n&N       SETC  '&NAME'             NAME START OF TABLE\n.LOOP    ANOP\n&I       SETA  &I+1                INCREMENT INDEX\n         AIF   (&I GT &SHOWN).END  END OF TABLE?\n         AIF   (&I LT &SHOWN).GEN  STILL WITHIN TABLE?\n&N       SETC  '&END'              NAME END OF TABLE\n.GEN     ANOP\n&N       DC    CL8'&SHOWID(&I)'              ID\n         DC    Y(&SHOWFLD(&I)-&SHOWBLK(&I))  OFFSET OF FIELD\n         DC    Y(&SHOWID(&I)-&SYSECT)        OFFSET TO ROUTINE\n         DC    AL2(L'&SHOWFLD(&I))           LENGTH OF FIELD\n         DC    X'&SHOWWORK(&I)'              FLAGS\n         DC    X'00'\n&N       SETC  ''                  NULLIFY NAME FIELD\n         AGO   .LOOP               LOOP FOR NEXT ID\n.END     SPACE\n         MEND\n         EJECT\n***********************************************************************\n         MACRO\n         SHOWSORT &M,&N            SORT ID'S\n         GBLB  &SHOWWORK(100)      WORK AREA REQUIRED      *DHA 04/90*\n         GBLC  &SHOWID(100)        IDS (PADDED WITH BLANKS)\n         GBLC  &SHOWBLK(100)       BLOCKS (PADDED WITH BLANKS)\n         GBLC  &SHOWFLD(100)       FIELDS (PADDED WITH BLANKS)\n         LCLA  &I,&J,&F,&TEMPA\n         LCLB  &TEMPB                                      *DHA 04/90*\n         LCLC  &X,&TEMPC,&XI,&XJ\n         AIF   (&M GE &N).SORTED   IS THIS SEGMENT SORTED?\n&I       SETA  &M                  INITIALIZE START OF SEGMENT\n&J       SETA  &N                  INITIALIZE END OF SEGMENT\n&F       SETA  (&M+&N)/2           GET MIDDLE OF SEGMENT\n&X       SETC  '&SHOWID(&F)'.(8-K'&SHOWID(&F))' '  GET MIDDLE ELEMENT\n.UP      ANOP                      SEARCH FOR OUT OF PLACE ELEMENT\n&XI      SETC  '&SHOWID(&I)'.(8-K'&SHOWID(&I))' '  GET UPPER ELEMENT\n         AIF   ('&X' LE '&XI').DOWN  HIGH ELEMENT FOUND?\n&I       SETA  &I+1                INCREMENT INDEX\n         AGO   .UP                 LOOP FOR NEXT ELEMENT\n.DOWN    ANOP                      SEARCH FOR OUT OF PLACE ELEMENT\n&XJ      SETC  '&SHOWID(&J)'.(8-K'&SHOWID(&J))' '  GET LOWER ELEMENT\n         AIF   ('&X' GE '&XJ').CHANGE  LOW ELEMENT FOUND?\n&J       SETA  &J-1                DECREMENT INDEX\n         AGO   .DOWN               LOOP FOR NEXT ELEMENT\n.CHANGE  AIF   (&I GT &J).SPLIT    IS SEGMENT NOW SPLIT?\n&TEMPC       SETC '&SHOWID(&I)'    EXCHANGE ID ELEMENTS\n&SHOWID(&I)  SETC '&SHOWID(&J)'\n&SHOWID(&J)  SETC '&TEMPC'\n&TEMPC       SETC '&SHOWBLK(&I)'   EXCHANGE BLOCK ELEMENTS\n&SHOWBLK(&I) SETC '&SHOWBLK(&J)'\n&SHOWBLK(&J) SETC '&TEMPC'\n&TEMPC       SETC '&SHOWFLD(&I)'   EXCHANGE FIELD ELEMENTS\n&SHOWFLD(&I) SETC '&SHOWFLD(&J)'\n&SHOWFLD(&J) SETC '&TEMPC'\n&TEMPB       SETB (&SHOWWORK(&I))  EXCHANGE FLAG ELEMENTS  *DHA 04/90*\n&SHOWWORK(&I) SETB (&SHOWWORK(&J))                         *DHA 04/90*\n&SHOWWORK(&J) SETB (&TEMPB)                                *DHA 04/90*\n&I       SETA  &I+1                INCREMENT LOW INDEX\n&J       SETA  &J-1                DECREMENT HIGH INDEX\n         AIF   (&I LT &J).UP       IS SEGMENT NOW SPLIT?\n.SPLIT   ANOP                      SORT SEGMENTS RECURSIVELY\n         SHOWSORT &M,&J            SORT UPPER SEGMENT\n         SHOWSORT &I,&N            SORT LOWER SEGMENT\n.SORTED  MEND\n         EJECT\n***********************************************************************\n*\n*        Section 2 - Control Block Definitions\n*\n***********************************************************************\n         PUNCH ' ENTRY SHOW'\nSHOW     CSECT\nSHOW     AMODE 31                                          *DHA 04/90*\nSHOW     RMODE 24                  For RMODE 24 callers    *DHA 04/90*\n*----------------------------------------------------------------------\n*                                  ACF2 Control Blocks     *DHA 04/92*\n*----------------------------------------------------------------------\n         AIF   (NOT &ACF2).ACF2A                           *DHA 04/92*\n         ACCVT                     ACF2 CVT                *LBD 02/84*\n         EJECT\n         ACFASVT                   ACF2 Address Space      *LBD 02/84*\n*                                  Vector Table\n         EJECT\n         ACUCB                     ACF2 Address Space C. B.*LBD 02/84*\n         EJECT\nACUID    ACUID                     ACF2 UID String         *DHA 04/90*\n         LIDREC DSECT=YES          ACF2 Logon ID Record    *LBD 02/84*\nLIDACCT# EQU   LIDACCT+3,4                                 *LBD 02/84*\n.ACF2A   ANOP                                              *DHA 04/92*\n         EJECT\n*----------------------------------------------------------------------\n*                                  JES3 Control Blocks     *DHA 04/92*\n*----------------------------------------------------------------------\n         AIF   (NOT &JES3).JES3A                           *DHA 04/92*\n         IATYUSVT                  BDT User Subsystem     *LBD 06/84*\n*                                  Vector Table\n.JES3A   ANOP                                              *DHA 04/92*\n         EJECT\n*----------------------------------------------------------------------\n*                                  Rockwell Control Blocks *DHA 04/92*\n*----------------------------------------------------------------------\n         AIF   (NOT &ROCKWELL).ROCKWELL1                   *DHA 04/92*\n         RATYJCD                   Rockwell JOB Card\nFDSACCT  EQU   ABFDS,11            Rockwell Account Number  *LBD 06/89*\n         EJECT\n         RCVT                      Rockwell CVT            *DHA 04/92*\n.ROCKWELL1 ANOP                                            *DHA 04/92*\n         EJECT\n*----------------------------------------------------------------------\n*                                  MVS Control Blocks      *DHA 04/92*\n*----------------------------------------------------------------------\n         CVT   DSECT=YES,PREFIX=YES,LIST=YES  CVT          *LBD 03/84*\n         EJECT\n         IEESMCA                   SMF Control table       *LBD 03/84*\n         EJECT\nIEFAJCTB DSECT\n         IEFAJCTB                  Job Control Table\n         EJECT\n         IEFJESCT                  JES Communication Table*LBD 06/84*\n         EJECT\n         IEFJSCVT                  Subsystem CVT          *LBD 06/84*\n         EJECT\n         IEFJSSIB ,                Subsystem ID Block      *LBD 12/89*\n         EJECT\nIEFTIOT1 DSECT                                             *DHA 04/92*\n         IEFTIOT1                  Task Input/Output Table *DHA 04/92*\n         EJECT\nIEFUCBOB DSECT                                             *DHA 04/92*\n         IEFUCBOB                  Unit Control Block      *DHA 04/92*\n         EJECT\n         IEZBITS                   Bit Definitions        *LBD 06/84*\n         EJECT\n         IEZJSCB                   Job Step Control Block\n         EJECT                                            *\n         IHAACEE                   Accessor Environment    *DHA 04/92*\n*                                  Element                 *DHA 04/92*\n         EJECT\n         IHAASCB                   Address Space C. B.     *LBD 08/85*\n         EJECT                                            *\n         IHAASXB                   Address Space Extension *DHA 04/92*\n*                                  Block                   *DHA 04/92*\n         EJECT\n         IHADFA ,                  Data Facilities Area    *LBD 01/91*\n         EJECT\n         IHALDA                    Local Data Area         *LBD 08/85*\n         EJECT                                            *\n         IHAPCCA                   Physical Configuration  *DHA 04/92*\n*                                  Communication Area      *DHA 04/92*\nVERSION  EQU   PCCACPID,2          CPU VERSION             *DHA 04/92*\n         EJECT\n         IHAPCCAT                  Physical Configuration  *DHA 04/92*\n*                                  Communication Area      *DHA 04/92*\n*                                  Vector Table            *DHA 04/92*\n         EJECT\n         IHAPSA LIST=YES           Prefixed Save Area\n         EJECT\n         IHASCCB                   Service Call C.B.       *DHA 04/92*\n         EJECT\n         IKJPSCB                   TSO Protected Step C.B. *DHA 04/92*\n         EJECT\n         IKJTCB LIST=YES           Task Control Block\n         EJECT                                            *\n*        ILRASMVT                  Asm Vector Table        *DHA 04/92*\nASMVT    DSECT                                             *DHA 04/92*\nASMFLAG1 DS    B                   ASM Global flag field 1 *DHA 04/92*\nASMFLAG2 DS    B                   ASM Global flag field 2 *DHA 04/92*\nASMQUICK EQU   B'00001000'         Quick Start (no CLPA)   *DHA 04/92*\nASMWARM  EQU   B'00000100'         Warm Start (no CVIO)    *DHA 04/92*\n         EJECT\n         REGEQU                    Registers\n         EJECT\n***********************************************************************\n*\n*        Parameter Definitions\n*\n***********************************************************************\nPARMS    DSECT\nAID      DS    A                   A(ID)\nAILENGTH DS    A                   A(ILENGTH)\nAVALUE   DS    A                   A(VALUE)\nAOLENGTH DS    A                   A(OLENGTH)\nPARM1    DSECT                     FIRST PARAMETER\nID       DS    CL8                 IDENTIFIER\nPARM2    DSECT                     SECOND PARAMETER\nILENGTH  DS    F                   INPUT LENGTH OF VALUE\nPARM3    DSECT                     THIRD PARAMETER\nVALUE    DS    CL256               VALUE ASSOCIATED WITH IDENTIFIER\nPARM4    DSECT                     THIRD PARAMETER\nOLENGTH  DS    F                   OUTPUT LENGTH OF VALUE\n         EJECT\n***********************************************************************\n*\n*        Section 3 - Work Area for Reentrance\n*\n***********************************************************************\nWORKAREA DSECT                     GETMAIN AREA            *DHA 04/90*\nSAVEAREA DS    18F                 SAVE AREA               *DHA 04/90*\n*----------------------------------------------------------------------\n*                                                          *DHA 04/90*\n*        Origin for Individual Work Areas                  *DHA 04/90*\n*                                                          *DHA 04/90*\n*        Each ID which requires a work area should begin   *DHA 04/90*\n*        with an ORG WORKORG.                              *DHA 04/90*\n*                                                          *DHA 04/90*\n*----------------------------------------------------------------------\nWORKORG  EQU   *                                           *DHA 04/90*\n*----------------------------------------------------------------------\n*        CPU MODEL NUMBER CONVERSION                       *DHA 04/92*\n*----------------------------------------------------------------------\n         ORG   WORKORG                                     *DHA 04/92*\nMODEL    DS    CL4                 UNPACKED MODEL NUMBER   *DHA 04/92*\n*----------------------------------------------------------------------\n*        PRTY CONVERSION                                   *DHA 04/90*\n*----------------------------------------------------------------------\n         ORG   WORKORG                                     *DHA 04/90*\nPRTYDWK  DS    D                   DOUBLE WORD WORKAREA    *DHA 04/90*\nPRTYEDIT DS    0CL4                                        *DHA 04/90*\n         DS    C' ',X'20'          PAD CHAR + EXTRA DIGIT  *DHA 04/90*\nPRTYVAL  DS    XL2'2120'           PRTY                    *DHA 04/90*\n*----------------------------------------------------------------------\n*        REGION SIZE CONVERSION                            *DHA 04/90*\n*----------------------------------------------------------------------\n         ORG   WORKORG                                     *DHA 04/90*\nREGDWK   DS    D                DOUBLE WORD WORKAREA       *LBD 08/85*\nREGSIZE  DS    0CL17               REGION SIZE             *DHA 04/92*\nREGEDIT  DS    0CL16               REGION EDIT PATTERN     *DHA 04/90*\n         DS    C' ',13X'20',X'2120',C'K'                   *DHA 04/92*\n*----------------------------------------------------------------------\n*        IKJEHCIR CATALOG INFO ROUTINE PARAMETER LIST      *DHA 04/90*\n*----------------------------------------------------------------------\n         ORG   WORKORG                                     *DHA 04/90*\nCIRPARM  DS    0D                                          *DHA 04/90*\nCIROPT   DS    X'04'               ENTRY CODE (VOLUME INFO)*DHA 04/90*\n         DS    2X                                          *DHA 04/90*\nCIRLOCRC DS    X                   LOCATE RETURN CODE      *DHA 04/90*\nCIRSRCH  DS    A(REFERDSN)         ADDRESS OF SEARCH ARG.  *DHA 04/90*\nCIRCVOL  DS    A(0)                ADDRESS OF CVOL ID      *DHA 04/90*\nCIRWA    DS    A(AREALN)           ADDRESS OF WORK AREA    *DHA 04/90*\nCIRSAVE  DS    A(SAVE)             ADDRESS OF SAVE AREA    *DHA 04/90*\nCIRPSWD  DS    A(0)                ADRESS OF PASSWORD      *DHA 04/90*\n*                                                          *DHA 04/90*\nREFERDSN DS    CL44'USERID.REFER'  CIR DSNAME              *DHA 04/90*\n*        CIRWA WORK AREA                                   *DHA 04/90*\nAREALN   DS    Y(DATASIZE)         LENGTH OF WORK AREA     *DHA 04/90*\nDATALIN  DS    H                   LENGTH OF DATA RETURNED *DHA 04/90*\nDATA     DS    X                   NUMBER OF VOLUMES       *DHA 04/90*\nDEVTYP   DS    XL4                 DEVICE TYPE             *DHA 04/90*\nVOLSER   DS    CL6                 VOLUME SERIAL NUMBER    *DHA 04/90*\nFILESEQ  DS    XL2                 FILE SEQUENCE NUMBER    *DHA 04/90*\n         DS    12X'FF'             END OF LIST             *DHA 04/90*\nDATASIZE EQU   *-AREALN            SIZE OF VOLUME WORK AREA*DHA 04/90*\n*                                                          *DHA 04/90*\nSAVE     DS    18F                 CIR SAVE AREA           *DHA 04/90*\n*----------------------------------------------------------------------\n*        DFPLEVEL CONVERSION                               *DHA 04/92*\n*----------------------------------------------------------------------\n         ORG   WORKORG                                     *DHA 04/92*\nDFPLEV   DS    CL5                 DFP LEVEL               *DHA 04/92*\n*----------------------------------------------------------------------\n*        IPL DATE CONVERSION                               *DHA 04/92*\n*----------------------------------------------------------------------\n         ORG   WORKORG                                     *DHA 04/92*\nT001BL   DS    0XL24                   MONTH TABLE\n         DC    PL2'31'\n         DC    PL2'28'\n         DC    PL2'31'\n         DC    PL2'30'\n         DC    PL2'31'\n         DC    PL2'30'\n         DC    PL2'31'\n         DC    PL2'31'\n         DC    PL2'30'\n         DC    PL2'31'\n         DC    PL2'30'\n         DC    PL2'31'\nW001X    DC    F'00'\nMX001M   DC    PL2'00'                 MONTH WORK AREA\nR1001ST  DC    F'00'                   REGISTER SAVE AREA FOR REG\nYR001X   DC    PL2'00'                 YEAR WORK AREA\nDYXX     DC    PL2'00'                 DAY WORK AREA\nXDATE    DS    0CL8                                        *DHA 04/92*\nXM1      DC    CL2'  '                 MONTH O/P AREA\nXMD1     DC    C'/'\nXD1      DC    CL2'  '                 DAY O/P AREA\nXDY1     DC    C'/'\nXY1      DC    CL2'  '                 YEAR O/P AREA\n*----------------------------------------------------------------------\n*        IPL TIME CONVERSION                               *DHA 04/92*\n*----------------------------------------------------------------------\n         ORG   WORKORG                                     *DHA 04/92*\n@DWORD   DS    D\n@TWORK   DS    CL6\n@TIME    DS    0CL10\n@HRS     DS    CL4\n         DC    C'.'\n@MIN     DS    CL2\n         DC    C'.'\n@SEC     DS    CL2\n*----------------------------------------------------------------------\n*        REAL STORAGE SIZE CONVERSION                      *DHA 04/92*\n*----------------------------------------------------------------------\n         ORG   WORKORG                                     *DHA 04/92*\nREALDEC  DS    D                                           *LBD 08/85*\nREALSIZE DS    0CL17               REAL STORAGE SIZE       *DHA 04/92*\nREALEDIT DS    0CL16               EDIT PATTERN            *DHA 04/90*\n         DS    C' ',13X'20',X'2120',C'M'                   *DHA 04/92*\n*----------------------------------------------------------------------\n*        CPU SERIAL NUMBERS                                *DHA 04/92*\n*----------------------------------------------------------------------\nSERIAL   DS    0CL6                A CPU SERIAL            *DHA 04/92*\nSERIALS  DS    CL(7*16)            ALL CPU SERIALS         *DHA 04/92*\n         ORG   WORKORG                                     *DHA 04/92*\n*----------------------------------------------------------------------\n*        END OF INDIVIDUAL WORK AREAS                      *DHA 04/90*\n*----------------------------------------------------------------------\n         ORG   ,                                           *DHA 04/90*\n         EJECT\n***********************************************************************\n*\n*        Section 4 - Initialization\n*\n*              Input:  R1 -> PARMS.\n*              Output: VALUE = blanks.\n*                      OLENGTH = 0.\n*                      R8 -> SHOW table entry.\n*                      R9 -> OLENGTH.\n*                      R10 -> VALUE.\n*                      R11 = ILENGTH.\n*                      R12 = base register.\n*                      R13 -> WORKAREA/SAVEAREA if requested.\n*\n***********************************************************************\nSHOW     CSECT\n         USING PSA,R0              APPLIES TO ENTIRE MODULE*DHA 04/92*\n         USING *,R15\n         USING PARMS,R1\n         BSM   R14,0               SAVE AMODE              *DHA 04/90*\n         SAVE  (14,12)             SAVE REGISTERS\n         MODID ,                   MODULE IDENTIFICATION\n         DROP  R15\n         LR    R12,R15             R12 = BASE REGISTER\n         USING SHOW,R12\n         SR    R8,R8               NO TABLE ENTRY YET      *DHA 04/92*\n         LR    R9,R1              SAVE R1                   *LBD 06/89*\n         XABSM MODE=31            ENTER 31-BIT MODE         *LBD 06/89*\n         LR    R1,R9              RELOAD R1                 *LBD 06/89*\n         TM    AID,X'80'           IS ID LAST PARAMETER?\n         BO    ARGERROR            YES, ERROR\n         TM    AILENGTH,X'80'      IS ILENGTH LAST PARAMETER?\n         BO    ARGERROR            YES, ERROR\n         TM    AVALUE,X'80'        IS VALUE LAST PARAMETER?\n         BO    ARGERROR            YES, ERROR\n         L     R9,AOLENGTH         R9 -> OLENGTH\n         USING OLENGTH,R9\n         XC    OLENGTH,OLENGTH     OLENGTH = 0 IN CASE OF ERROR\n         L     R10,AVALUE          R10 -> VALUE\n         USING VALUE,R10\n         L     R11,AILENGTH        R11 -> ILENGTH\n         USING ILENGTH,R11\n         ICM   R11,15,ILENGTH      R11 = ILENGTH\n         DROP  R11\n         BNP   TRUNCATE            ERROR IF ILENGTH <= 0\n         LA    R2,VALUE            POINT TO TARGET         *DHA 04/92*\n         LR    R3,R11              GET LENGTH OF TARGET    *DHA 04/92*\n         LA    R5,C' '             PAD BYTE = BLANK        *DHA 04/92*\n         SLL   R5,24               SOURCE LENGTH = 0       *DHA 04/92*\n         MVCL  R2,R4               SET VALUE TO BLANKS     *DHA 04/92*\n         L     R14,AID             R14 -> ID\n         USING ID,R14\n         DROP  R1                                          *DHA 04/92*\n         EJECT\n***********************************************************************\n*        Determine whether ID is in table.\n*              A binary search is made to determine whether the ID\n*              in the internal table.  If so, a branch is\n*              made to the appropriate routine.\n*              A 4K GETMAIN is done if required.           *DHA 04/90*\n***********************************************************************\n         LM    R14,R15,ID          GET ID                  *DHA 04/92*\n         DROP  R14\n         O     R14,=CL4' '         INSURE UPPERCASE        *DHA 04/92*\n         O     R15,=CL4' '                                 *DHA 04/92*\n         SR    R4,R4               CLEAR FOR DIVISION\n         LA    R6,L'SHOWSIZE       GET +LENGTH OF TABLE ENTRY\n         LNR   R2,R6               GET -LENGTH OF TABLE ENTRY\n         LA    R3,SHOWTBL          POINT TO LOW END OF TABLE\n         LA    R7,SHOWTBLE         POINT TO HIGH END OF TABLE\nLOOP     DS    0H\n         LR    R5,R7               HIGH END OF TABLE\n         SR    R5,R3               HIGH-LOW\n         SRL   R5,1                (HIGH-LOW)/2\n         DR    R4,R6               ((HIGH-LOW)/2)/SHOWSIZE\n         MR    R4,R6               (((HIGH-LOW)/2)/SHOWSIZE)*SHOWSIZE\n         AR    R5,R3               POINT TO MIDDLE ENTRY IN TABLE\n         USING SHOWENT,R5\n         CL    R14,SHOWID          COMPARE LEFT HALF OF ID *DHA 04/90*\n         BL    LOW                 LOW: BRANCH             *DHA 04/92*\n         BH    HIGH                HIGH: BRANCH\n         CL    R15,SHOWID+4        COMPARE RIGHT HALF OF ID*DHA 04/92*\n         BE    EQUAL               EQUAL: BRANCH\n         BH    HIGH                HIGH: BRANCH            *DHA 04/92*\nLOW      DS    0H\n         LR    R7,R5               POINT HIGH AT MIDPOINT\n         BXH   R7,R2,LOOP          MINUS TESTED ENTRY; HIGH > LOW?\n         CR    R7,R3               ELSE HIGH = LOW?\n         BE    LOOP\n         B     NOID                NO, ERROR (NOT MATCHED)\n*\nHIGH     DS    0H\n         LR    R3,R5               POINT LOW AT MIDPOINT\n         BXLE  R3,R6,LOOP          PLUS TESTED ENTRY; LOW <= HIGH?\n         B     NOID                NO, ERROR (NOT MATCHED)\n*\nEQUAL    DS    0H\n         LR    R8,R5               POINT TO SHOW ENTRY     *DHA 04/90*\n         DROP  R5                                          *DHA 04/90*\n         USING SHOWENT,R8                                  *DHA 04/90*\n         LH    R6,SHOWRTN          GET BRANCH DISPLACEMENT *DHA 04/92*\n         TM    SHOWFLAG,SHOWWORK   WORK AREA NEEDED?       *DHA 04/90*\n         BZ    SHOW(R6)            NO, BRANCH TO PROCESS ID*DHA 04/92*\n         GETMAIN RU,LV=4096,BNDRY=PAGE,LOC=(BELOW,ANY)     *DHA 04/90*\n         LR    R2,R1               R2 -> WORKAREA          *DHA 04/92*\n         LA    R3,2048             R3 = 2048*2 = 4096 =    *DHA 04/92*\n         SLL   R3,1                     TARGET LENGTH      *DHA 04/92*\n*                                  R4 IRRELEVANT           *DHA 04/92*\n         SR    R5,R5               R5 = 0 = PAD/LENGTH     *DHA 04/92*\n         MVCL  R2,R4               ZERO OUT WORKAREA       *DHA 04/92*\n         ST    R13,4(,R1)          CHAIN SAVE AREAS        *DHA 04/90*\n         ST    R1,8(R13)           ...                     *DHA 04/90*\n         LR    R13,R1              ...                     *DHA 04/90*\n         B     SHOW(R6)            BRANCH TO PROCESS ID    *DHA 04/92*\n         EJECT\n***********************************************************************\n*\n*        Section 5 - Determination of the requested VALUE\n*\n*              Input:  R0 -> Prefixed Save Area (PSA)\n*                      R8 -> SHOW TABLE ENTRY.\n*                      R9 -> OLENGTH.\n*                      R10 -> VALUE.\n*                      R11 = ILENGTH.\n*                      R12 = base register.\n*                      R13 -> WORKAREA/SAVEAREA if requested.\n*              Output: R1 -> BLOCK (beginning of control block).\n*                      Optionally, R2 = length of FIELD.\n*                      R8 -> SHOW TABLE ENTRY.\n*                      R9 -> OLENGTH.\n*                      R10 -> VALUE.\n*                      R11 = ILENGTH.\n*                      R12 = base register.\n*                      R13 -> WORKAREA/SAVEAREA if requested.\n*\n***********************************************************************\n*----------------------------------------------------------------------\n*                  Assembly date/time\n*----------------------------------------------------------------------\nSHOWLEV  SHOW  BLOCK=SHOWDATE,FIELD=SHOWDATE               *DHA 04/92*\n         LA    R1,SHOWDATE         R1 -> SHOWDATE          *DHA 04/92*\n         B     FOUND                                       *DHA 04/92*\nSHOWDATE DS    0CL14               SHOW ASSEMBLY           *DHA 04/92*\n         DC    CL8'&SYSDATE'         DATE                  *DHA 04/92*\n         DC    C' '                    AND                 *LBD 04/91*\n         DC    CL5'&SYSTIME'             TIME              *LBD 04/91*\n         EJECT\n*----------------------------------------------------------------------\n*                   Volume Serial of Data Set userid.REFER\n*----------------------------------------------------------------------\nREFERVOL SHOW  BLOCK=WORKAREA,FIELD=VOLSER,WORK=YES        *LBD 03/87*\n         USING WORKAREA,R13                                *DHA 04/92*\n         MVC   REFERDSN,=CL44' '   CLEAR CIR DSNAME        *DHA 04/90*\n         L     R1,PSATOLD          POINT TO CURRENT TCB    *DHA 04/92*\n         USING TCB,R1                                      *DHA 04/92*\n         L     R1,TCBTIO           POINT TO TIOT           *DHA 04/92*\n         DROP  R1                                          *DHA 04/92*\n         USING TIOT1,R1                                    *DHA 04/92*\n         MVC   REFERDSN(8),TIOCNJOB MOVE USER-ID           *DHA 04/92*\n         DROP  R1                                          *DHA 04/92*\n         LA    R1,REFERDSN         -> DSN                  *LBD 03/87*\n         LA    R2,7                MAX SEARCH              *LBD 03/87*\nUSERLP1  DS    0H                                          *LBD 03/87*\n         LA    R1,1(R1)            INCR R1                 *LBD 03/87*\n         CLI   1(R1),C' '          END OF USERID           *LBD 03/87*\n         BE    MOVREFER                                    *LBD 03/87*\n         BCT   R2,USERLP1                                  *LBD 03/87*\nMOVREFER MVC   1(7,R1),=CL7'.REFER'                        *LBD 03/87*\n         MVI   CIROPT,X'04'        RETRIEVE VOLUME INFO    *DHA 04/90*\n         LA    R0,REFERDSN         POINT TO DSNAME         *DHA 04/90*\n         ST    R0,CIRSRCH          ADDRESS OF SEARCH ARG.  *DHA 04/90*\n         XC    CIRCVOL,CIRCVOL     CLEAR CVOL ADDRESS      *DHA 04/90*\n         LA    R0,AREALN           POINT TO WORK AREA      *DHA 04/90*\n         ST    R0,CIRWA            ADDRESS OF WORK AREA    *DHA 04/90*\n         LA    R0,SAVE             POINT TO CIR SAVE AREA  *DHA 04/90*\n         ST    R0,CIRSAVE          ADDRESS OF SAVE AREA    *DHA 04/90*\n         XC    CIRPSWD,CIRPSWD     CLEAR PASSWORD ADDRESS  *DHA 04/90*\n         LA    R0,DATASIZE         GET LENGTH OF WORK AREA *DHA 04/90*\n         STH   R0,AREALN           LENGTH OF WORK AREA     *DHA 04/90*\n         CALLTSSR EP=IKJEHCIR,     CALL CATALOG INFO RTN.  *DHA 04/90* *\n               MF=(E,CIRPARM)                              *DHA 04/90*\n         LA    R1,WORKAREA         R1 -> WORKAREA          *DHA 04/90*\n         B     FOUND               AND LEAVE               *DHA 04/92*\n         DROP  R13                                         *DHA 04/92*\n         EJECT\n         EJECT\n*----------------------------------------------------------------------\n*        ACUID    - ACF2 UID String\n*----------------------------------------------------------------------\n         AIF   (NOT &ACF2).ACF2B                           *DHA 04/92*\nUID      SHOW  BLOCK=ACUID,FIELD=ACUID                     *DHA 04/90*\n         ACFINCVT R6,NONE=INVALID                          *LBD 02/84*\n         USING ACCVT,R6            ADDRESSABILITY          *LBD 02/84*\n         ACFGUCB R7,NONE=INVALID,INLINE=YES                *DHA 04/92*\n         USING ACUCB,R7                                     *LBD 06/89*\n         L     R1,ACUUIDP          R1 -> ACUID              *LBD 06/89*\n         DROP  R6,R7                                        *LBD 06/89*\n         B     FOUND                                       *DHA 04/90*\n.ACF2B   ANOP                                              *DHA 04/92*\n         EJECT\n*----------------------------------------------------------------------\n*        CVT      - Communications Vector Table Prefix\n*----------------------------------------------------------------------\nCPUMODEL SHOW  BLOCK=MODEL,FIELD=MODEL,WORK=YES            *DHA 04/92*\n         USING WORKAREA,R13                                *DHA 04/92*\n         L     R1,CVTPTR           POINT TO CVT            *DHA 04/92*\n         LA    R0,CVTMAP-CVTFIX    GET LENGTH OF CVT PREFIX*DHA 04/92*\n         SR    R1,R0               POINT TO CVTFIX         *DHA 04/92*\n         USING CVTFIX,R1\n         MVC   MODEL,=X'21202020'  GET EDIT PATTERN        *DHA 04/92*\n         ED    MODEL,CVTMDL        EDIT MODEL              *DHA 04/92*\n         DROP  R1\n         LA    R1,MODEL            R1 -> MODEL             *DHA 04/92*\n         B     FOUND                                       *DHA 04/92*\n         DROP  R13                                         *DHA 04/92*\n         EJECT\n*----------------------------------------------------------------------\n*        CVT      - Communications Vector Table Prefix\n*----------------------------------------------------------------------\nBCPFMID  SHOW  BLOCK=CVTFIX,FIELD=CVTPRODI                 *DHA 04/92*\nBCPLEVEL SHOW  BLOCK=CVTFIX,FIELD=CVTPRODN                 *LBD 04/91*\nOSREL    SHOW  BLOCK=CVTFIX,FIELD=CVTRELNO                 *LBD 03/84*\nSYSNAME  SHOW  BLOCK=CVTFIX,FIELD=CVTSNAME                 *LBD 03/84*\nVERID    SHOW  BLOCK=CVTFIX,FIELD=CVTVERID                 *LBD 03/84*\n         L     R1,CVTPTR           POINT TO CVT            *LBD 03/84*\n         LA    R0,CVTMAP-CVTFIX    GET LENGTH OF CVT PREFIX*DHA 04/92*\n         SR    R1,R0               R1 -> CVTFIX            *DHA 04/92*\n         B     FOUND                                       *DHA 04/90*\n         EJECT\n*----------------------------------------------------------------------\n*        CVT      - Communications Vector Table\n*----------------------------------------------------------------------\nCPU      SHOW  BLOCK=CVTMAP,FIELD=CVTSNAME                 *DHA 04/90*\n         L     R1,CVTPTR           R1 -> CVTMAP             *LBD 06/89*\n         B     FOUND                                       *DHA 04/90*\n         EJECT\n*----------------------------------------------------------------------\n*        CVT      - Communications Vector Table\n*----------------------------------------------------------------------\nOPSYS    SHOW  BLOCK=MVSOSLEV,FIELD=MVS                    *DHA 04/90*\nOS       SHOW  BLOCK=MVSOSLEV,FIELD=OSLEVEL                *DHA 04/90*\nOSLEV    SHOW  BLOCK=MVSOSLEV,FIELD=OSLEVEL                *DHA 04/90*\n         L     R3,CVTPTR                                   *DHA 04/90*\n         USING CVTMAP,R3                                   *DHA 04/90*\n         LA    R1,MVS370           R1 -> MVSOSLEV (370)    *DHA 04/90*\n         AIF   (&SYSSPLV EQ 1).OS                          *DHA 04/92*\n         TM    CVTDCB,CVTMVSE     XA IF ON                  *LBD 05/89*\n         BZ    FOUND                                       *DHA 04/90*\n         LA    R1,MVSXA            R1 -> MVSOSLEV (XA)     *DHA 04/90*\n         AIF   (&SYSSPLV EQ 2).OS                          *DHA 04/92*\n         TM    CVTOSLV0,CVTXAX    TEST FOR ESA              *LBD 05/89*\n         BZ    FOUND                                        *DHA 04/92*\n         LA    R1,MVSESA           R1 -> MVSOSLEV (ESA)    *DHA 04/90*\n.OS      ANOP                                              *DHA 04/92*\n         B     FOUND                                       *DHA 04/90*\n         DROP  R3                                          *DHA 04/90*\nMVSOSLEV DSECT                                             *DHA 04/92*\nMVS      DS    0CL7                MVS/XXX                 *DHA 04/92*\n         DS    CL4                 MVS/                    *DHA 04/92*\nOSLEVEL  DS    CL3                 XXX (370, XA, ESA)      *DHA 04/92*\nSHOW     CSECT                                             *DHA 04/92*\nMVSESA   DC    CL7'MVS/ESA'                                 *LBD 05/89*\nMVSXA    DC    CL7'MVS/XA'                                  *LBD 05/89*\nMVS370   DC    CL7'MVS/370'                                 *LBD 05/89*\n         EJECT\n*----------------------------------------------------------------------\n*        CVT      - Communications Vector Table\n*----------------------------------------------------------------------\nREALSTOR SHOW  BLOCK=WORKAREA,FIELD=REALSIZE,WORK=YES      *DHA 04/92*\n         USING WORKAREA,R13                                *DHA 04/92*\n         L     R1,CVTPTR           POINT TO CVT            *DHA 04/92*\n         USING CVTMAP,R1                                   *DHA 04/92*\n         L     R2,CVTRLSTG         REAL STORAGE AT IPL (K) *DHA 04/92*\n         SRL   R2,10               CONVERT KILO TO MEG     *DHA 04/92*\n         CVD   R2,REALDEC          CONVERT TO DECIMAL      *DHA 04/92*\n         MVC   REALSIZE,REALPTRN   COPY EDIT PATTERN       *DHA 04/92*\n         ED    REALEDIT,REALDEC    EDIT VALUE              *DHA 04/92*\n         LA    R1,WORKAREA         R1 -> WORKAREA          *DHA 04/92*\n         B     FOUND                                       *DHA 04/92*\n         DROP  R13                                         *DHA 04/92*\nREALPTRN DC    C' ',13X'20',X'2120',C'M'                   *DHA 04/92*\n         EJECT\n*----------------------------------------------------------------------\n*        IEESMCA  - SMF Control Table\n*----------------------------------------------------------------------\nSMFID    SHOW  BLOCK=SMCABASE,FIELD=SMCASID                *LBD 06/89*\nSYSID    SHOW  BLOCK=SMCABASE,FIELD=SMCASID                *LBD 03/84*\n         L     R1,CVTPTR           POINT TO CVT            *LBD 03/84*\n         USING CVTMAP,R1                                   *LBD 03/84*\n         L     R1,CVTSMCA          R1 -> SMCABASE          *LBD 03/84*\n         DROP  R1                                          *DHA 04/92*\n         USING SMCABASE,R1                                 *DHA 04/92*\n         CLC   SMCASMCA,=C'SMCA'   VALIDITY CHECK          *DHA 04/92*\n         BNE   INVALID             BRANCH IF INVALID       *DHA 04/92*\n         DROP  R1                                          *LBD 03/84*\n         B     FOUND                                       *DHA 04/90*\n         EJECT\n*----------------------------------------------------------------------\n*        IEESMCA  - SMF Control Table - IPL Date\n*----------------------------------------------------------------------\nIPLDATE  SHOW  BLOCK=WORKAREA,FIELD=XDATE,WORK=YES         *DHA 04/92*\n         USING WORKAREA,R13                                *DHA 04/92*\n         L     R1,CVTPTR           POINT TO CVT            *DHA 04/92*\n         USING CVTMAP,R1                                   *DHA 04/92*\n         L     R1,CVTSMCA          R1 -> SMCABASE          *DHA 04/92*\n         DROP  R1                                          *DHA 04/92*\n         USING SMCABASE,R1                                 *DHA 04/92*\n         CLC   SMCASMCA,=C'SMCA'   VALIDITY CHECK          *DHA 04/92*\n         BNE   INVALID             BRANCH IF INVALID       *DHA 04/92*\n         L     R1,SMCAIDTE         R1 = IPL DATE           *DHA 04/92*\n         DROP  R1                                          *DHA 04/92*\n         MVC   T001BL,T001BLC          INITIALIZE TABLE    *DHA 04/92*\n         ZAP   MX001M,=P'01'           INITIALIZE MONTH\n         ZAP   T001BL+2(2),=P'28'      INITIALIZE FEB\n         ST    R1,R1001ST              STORE JULIAN DATE\n         XC    W001X,W001X             ZERO WORK AREA\n         MVC   W001X+3(1),R1001ST+1    MOVE YEAR INTO WORK\n         L     R1,W001X                LOAD YEAR INTO REGISTER\n         SLL   R1,4                    SHIFT LEFT 1/2 BYTE\n         ST    R1,W001X                STORE YEAR INTO WORK AGAIN\n         OI    W001X+3,X'0F'           CONVERT YEAR INTO PACKED FORMAT\n         ZAP   YR001X,W001X            SAVE YEAR\n         DP    W001X,=P'04'            DIVIDE YEAR BY 4\n         CP    W001X+2(2),=P'00'       IF REMAINDER THEN LEAP YEAR\n         BNE   XNOLEAPX                NOT A LEAP YEAR\n         ZAP   T001BL+2(2),=P'29'      SET MONTH 2 EQUAL TO 29 DAYS\nXNOLEAPX LA    1,T001BL                SET POINTER TO MONTH TABLE\n         L     2,=F'02'                SET COUNTER\n         LA    3,MX001M-1              SET POINTER TO END OF TABLE\nXCPR01   CP    R1001ST+2(2),0(2,1)     COMPARE DAYS TO MONTH DABLE\n         BNH   XDATEX                  LESS THAN TABLE\n         AP    MX001M,=P'01'           INCRIMENT MONTH COUNTER\n         SP    R1001ST+2(2),0(2,1)     SUB TABLE DAY FORM JULIAN DAY\n         BXLE  1,2,XCPR01              CONTINUE SCAN\nXDATEX   ZAP   DYXX,R1001ST+2(2)       SET DAY\n         UNPK  W001X,DYXX              UNPACK DAY\n         OI    W001X+3,X'F0'           RESET SIGN\n         MVC   XD1(2),W001X+2          MOVE DAY TO O/P AREA\n         UNPK  W001X,MX001M            UNPACK MONTH\n         OI    W001X+3,X'F0'           RESET SIGN\n         MVC   XM1(2),W001X+2          MOVE MONTH TO O/P AREA\n         UNPK  W001X,YR001X            UNPACK YEAR\n         OI    W001X+3,X'F0'           RESER SIGN\n         MVC   XY1(2),W001X+2          MOVE YEAR TO O/P AREA\n         MVI   XMD1,C'/'                                   *DHA 04/92*\n         MVI   XDY1,C'/'                                   *DHA 04/92*\n         LA    R1,WORKAREA         R1 -> WORKAREA          *DHA 04/92*\n         B     FOUND                                       *DHA 04/92*\n         DROP  R13                                         *DHA 04/92*\nT001BLC  DS    0XL24                   MONTH TABLE\n         DC    PL2'31'\n         DC    PL2'28'\n         DC    PL2'31'\n         DC    PL2'30'\n         DC    PL2'31'\n         DC    PL2'30'\n         DC    PL2'31'\n         DC    PL2'31'\n         DC    PL2'30'\n         DC    PL2'31'\n         DC    PL2'30'\n         DC    PL2'31'\n         EJECT\n*----------------------------------------------------------------------\n*        IEESMCA  - SMF Control Table - IPL Time\n*----------------------------------------------------------------------\nIPLTIME  SHOW  BLOCK=WORKAREA,FIELD=@TIME,WORK=YES         *DHA 04/92*\n         USING WORKAREA,R13                                *DHA 04/92*\n         L     R1,CVTPTR           POINT TO CVT            *DHA 04/92*\n         USING CVTMAP,R1                                   *DHA 04/92*\n         L     R1,CVTSMCA          R1 -> SMCABASE          *DHA 04/92*\n         DROP  R1                                          *DHA 04/92*\n         USING SMCABASE,R1                                 *DHA 04/92*\n         CLC   SMCASMCA,=C'SMCA'   VALIDITY CHECK          *DHA 04/92*\n         BNE   INVALID             BRANCH IF INVALID       *DHA 04/92*\n         L     R7,SMCAITME         R1 = IPL TIME           *DHA 04/92*\n         DROP  R1                                          *DHA 04/92*\n         MVI   @HRS+4,C'.'\n         MVI   @MIN+2,C'.'\n         SR    R6,R6                    CLEAR R6\n         D     R6,=F'100'               DIVIDE OUT 100TH SEC\n         SR    R6,R6\n         D     R6,=F'60'                DIVIDE OUT SECONDS\n         LR    R5,R6                    STORE SEC IN R5\n         SR    R6,R6\n         D     R6,=F'60'                DIVIDE OUT MINUTES\n         CVD   R7,@DWORD                CVD\n         MVC   @TWORK,@TPAT               &\n         ED    @TWORK,@DWORD+5            EDIT\n         MVC   @HRS,@TWORK+2              @HRS\n         CVD   R6,@DWORD                CVD\n         MVC   @TWORK,@TPAT               &\n         ED    @TWORK,@DWORD+5            EDIT\n         MVC   @MIN,@TWORK+4             @MIN\n         CVD   R5,@DWORD                CVD\n         MVC   @TWORK,@TPAT               &\n         ED    @TWORK,@DWORD+5            EDIT\n         MVC   @SEC,@TWORK+4              SEC\n         LA    R1,WORKAREA         R1 -> WORKAREA          *DHA 04/92*\n         B     FOUND                                       *DHA 04/92*\n         DROP  R13                                         *DHA 04/92*\n@TPAT    DC    X'402020212020'\n         EJECT\n*----------------------------------------------------------------------\n*        IEFAJCTB - Job Control Table (Priority)\n*----------------------------------------------------------------------\nPRTY     SHOW  BLOCK=WORKAREA,FIELD=PRTYVAL,WORK=YES       *DHA 04/90*\n         USING WORKAREA,R13                                *DHA 04/92*\n         L     R1,PSATOLD          R1 -> CURRENT TASK CONTROL BLOCK\n         USING TCB,R1\n         L     R1,TCBJSCB          R1 -> JOB STEP CONTROL BLOCK\n         DROP  R1                                          *DHA 04/92*\n         USING IEZJSCB,R1\n         L     R1,JSCBJCT          R1 -> JOB CONTROL TABLE\n         DROP  R1                                          *DHA 04/92*\n         USING INJMJCT-16,R1\n         CLI   JCTIDENT,JCTID      VALIDITY CHECK          *DHA 04/92*\n         BNE   INVALID             BRANCH IF INVALID       *DHA 04/92*\n         IC    R2,JCTJPRTY         LOAD JOB PRIORITY       *DHA 04/90*\n         DROP  R1                                          *DHA 04/92*\n         SRDL  R2,4                EXTRACT PRIORITY        *DHA 04/90*\n         SRL   R3,32-4             POSITION FOR DIVISION   *DHA 04/90*\n         CVD   R3,PRTYDWK          CONVERT TO DECIMAL      *DHA 04/90*\n         MVC   PRTYEDIT,=X'40202120'  EDIT PATTERN         *DHA 04/90*\n         ED    PRTYEDIT,PRTYDWK+6  CONVERT TO EBCDIC       *DHA 04/90*\n         LA    R1,WORKAREA         R1 -> WORKAREA          *DHA 04/90*\n         B     FOUND                                       *DHA 04/90*\n         DROP  R13                                         *DHA 04/92*\n         EJECT\n*----------------------------------------------------------------------\n*        IEFAJCTB - Job Control Table (SWA)\n*----------------------------------------------------------------------\nSWA      SHOW  BLOCK=SWASTAT,FIELD=SWASTAT                 *DHA 04/92*\n         L     R4,PSATOLD         -> TCB                   *DHA 04/92*\n         USING TCB,R4                                      *DHA 04/92*\n         L     R4,TCBJSCB           -> JSCB                *DHA 04/92*\n         DROP  R4                                          *DHA 04/92*\n         USING IEZJSCB,R4                                  *DHA 04/92*\n         L     R4,JSCBJCT               -> JCT             *DHA 04/92*\n         DROP  R4                                          *DHA 04/92*\n         USING INJMJCT-16,R4                               *DHA 04/92*\n         CLI   JCTIDENT,JCTID      VALIDITY CHECK          *DHA 04/92*\n         BNE   INVALID             BRANCH IF INVALID       *DHA 04/92*\n         LA    R1,SWAABOVE         R1 -> SWASTAT (ABOVE)   *DHA 04/92*\n         TM    JCTSTAT2,JCTSWAUP   IS SWA ABOVE THE LINE?  *DHA 04/92*\n         BO    FOUND               YES, BRANCH             *DHA 04/92*\n         LA    R1,SWABELOW         R1 -> SWASTAT (BELOW)   *DHA 04/92*\n         B     FOUND                                       *DHA 04/92*\n         DROP  R4                                          *DHA 04/92*\nSWASTAT  DS    0CL5                SWA STATUS              *DHA 04/92*\nSWAABOVE DC    CL5'ABOVE'                                  *DHA 04/92*\nSWABELOW DC    CL5'BELOW'                                  *DHA 04/92*\n         EJECT\n*----------------------------------------------------------------------\n*        IEFJESCT - JES Communication Table Extension\n*----------------------------------------------------------------------\n         AIF   (&SYSSPLV LT 3).SMS                         *DHA 04/92*\nSMS      SHOW  BLOCK=SMSSTAT,FIELD=SMSSTAT                 *DHA 04/92*\n         L     R2,CVTPTR           POINT TO CVT            *LBD 01/91*\n         USING CVTMAP,R2                                   *LBD 01/91*\n         L     R2,CVTJESCT         POINT TO JES CONTROL TBL*LBD 01/91*\n         DROP  R2                                          *DHA 04/92*\n         USING JESCT,R2                                    *LBD 01/91*\n         L     R2,JESCTEXT         POINT JESCT EXTENSION   *LBD 01/91*\n         DROP  R2                                          *DHA 04/92*\n         USING JESPEXT,R2                                  *LBD 01/91*\n         CLC   JESSID,=C'JESPEXT'  CHECK VALIDITY          *DHA 04/92*\n         BNE   INVALID             BRANCH IF INVALID       *DHA 04/92*\n         LA    R1,SMSON            R1 -> SMSSTAT (ON)      *DHA 04/92*\n         CLC   JESSMSIB,=F'0'     SMS ENABLED ?            *LBD 01/91*\n         BNE   FOUND               YES, BRANCH             *DHA 04/92*\n         LA    R1,SMSOFF           R1 -> SMSSTAT (OFF)     *DHA 04/92*\n         B     FOUND                                       *DHA 04/92*\n         DROP  R2                                          *LBD 01/91*\nSMSSTAT  DS    0CL3                SMS STATUS              *DHA 04/92*\nSMSON    DC    CL3'ON'                                     *DHA 04/92*\nSMSOFF   DC    CL3'OFF'                                    *DHA 04/92*\n.SMS     ANOP                                              *DHA 04/92*\n         EJECT\n*----------------------------------------------------------------------\n*        IEFJSCVT - BDT Subsystem Communications Vector Table\n*----------------------------------------------------------------------\n         AIF   (NOT &JES3).JES3B                           *DHA 04/92*\nBDTNODE  SHOW  BLOCK=USVTBGN,FIELD=USVTNDID               *LBD 06/84*\n         L     R1,CVTPTR                                  *LBD 06/84*\n         USING CVTMAP,R1                                  *LBD 07/84*\n         L     R1,CVTJESCT             -> JESCT           *LBD 06/84*\n         DROP  R1                                          *DHA 04/92*\n         USING JESCT,R1                                   *LBD 07/84*\n         L     R7,JESSSCT              -> SSCVT           *LBD 06/84*\n         USING SSCTBEGN,R7                                *LBD 06/84*\nDONODE   DS    0H                                         *LBD 06/84*\n         CLC   SSCTSNAM,=C'JES3'  JES3 ?                    *LBD 02/88*\n         BE    NSSCT              YES - SKIP                *LBD 02/88*\n         CLC   SSCTSUSE,=F'0'     NULL SSCTSUSE ?           *LBD 02/88*\n         BE    NSSCT              YES                       *LBD 02/88*\n         L     R1,SSCTSUSE                                *LBD 06/84*\n         CLC   =C'USVT',0(R1)          BDT USVT ?         *LBD 07/84*\n         BNE   NSSCT                   NO - KEEP LOOKING  *LBD 07/84*\n         USING USVTBGN,R1                                 *LBD 06/84*\nUSVTDEF  EQU   BIT2               * SYMBOL REMOVED OZ80124 *LBD 12/85*\n         TM    USVTFLGS,USVTDEF        DEFAULT BDT        *LBD 06/84*\n         BZ    NSSCT                   NO - KEEP GOING    *LBD 06/84*\n         B     FOUND                                      *LBD 06/84*\nNSSCT    DS    0H                                         *LBD 06/84*\n         ICM   R7,15,SSCTSCTA      POINT TO NEXT SSCVT    *DHA 04/92*\n         BNZ   DONODE              BRANCH IF PRESENT      *LBD 06/84*\n         B     INVALID             BRANCH IF END OF CHAIN   *DHA 04/92*\n         DROP  R1,R7                                      *LBD 06/84*\n.JES3B   ANOP                                              *DHA 04/92*\n         EJECT\n*----------------------------------------------------------------------\n*        IEFJSSIB - Subsystem Identification Block\n*----------------------------------------------------------------------\nJOBID    SHOW  BLOCK=SSIBEGIN,FIELD=SSIBJBID               *LBD 12/89*\n         L     R1,PSATOLD         -> CURRENT TCB WORD LIST *LBD 12/89*\n         USING TCB,R1                                      *LBD 12/89*\n         L     R1,TCBJSCB         -> JSCB                  *LBD 12/89*\n         DROP  R1                                          *DHA 04/92*\n         USING IEZJSCB,R1                                  *LBD 12/89*\n         L     R1,JSCBSSIB        -> SSIBEGIN              *LBD 12/89*\n         DROP  R1                                          *DHA 04/92*\n         USING SSIBEGIN,R1                                 *LBD 12/89*\n         CLC   SSIBID,=C'SSIB'    VALIDITY CHECK           *LBD 12/89*\n         BNE   INVALID                                     *LBD 12/89*\n         DROP  R1                                          *LBD 12/89*\n         B     FOUND                                       *DHA 04/92*\n         EJECT\n*----------------------------------------------------------------------\n*        IEFTIOT1 - Task Input/Output Table                *DHA 04/92*\n*----------------------------------------------------------------------\nJOBNAME  SHOW  BLOCK=TIOT1,FIELD=TIOCNJOB                  *DHA 04/92*\n         L     R1,PSATOLD          POINT TO CURRENT TCB    *DHA 04/92*\n         USING TCB,R1                                      *DHA 04/92*\n         L     R1,TCBTIO           R1 -> TIOT1             *DHA 04/92*\n         DROP  R1                                          *DHA 04/92*\n         B     FOUND                                       *DHA 04/92*\n         EJECT\n*----------------------------------------------------------------------\n*        IEFUCBOB - System Residence UCB                   *DHA 04/92*\n*----------------------------------------------------------------------\nSYSRES   SHOW  BLOCK=UCBOB,FIELD=UCBVOLI                   *DHA 04/92*\n         L     R1,CVTPTR           POINT TO CVT            *DHA 04/92*\n         USING CVTMAP,R1                                   *DHA 04/92*\n         L     R1,CVTSYSAD         R1 -> UCBOB             *DHA 04/92*\n         DROP  R1                                          *DHA 04/92*\n         B     FOUND                                       *DHA 04/92*\n         EJECT\n*----------------------------------------------------------------------\n*        IHAACEE  - Accessor Environment Element           *DHA 04/92*\n*----------------------------------------------------------------------\nTERMINAL SHOW  BLOCK=ACEE,FIELD=ACEETRID                   *DHA 04/92*\nUSERID   SHOW  BLOCK=ACEE,FIELD=ACEEUSRI                   *DHA 04/92*\n         L     R1,PSAAOLD          POINT TO ASCB           *DHA 04/92*\n         USING ASCB,R1                                     *DHA 04/92*\n         L     R1,ASCBASXB         POINT TO ASXB           *DHA 04/92*\n         DROP  R1                                          *DHA 04/92*\n         USING ASXB,R1                                     *DHA 04/92*\n         L     R1,ASXBSENV         R1 -> ACEE              *DHA 04/92*\n         DROP  R1                                          *DHA 04/92*\n         USING ACEE,R1                                     *DHA 04/92*\n         CLC   ACEEACEE,=C'ACEE'   VALIDITY CHECK          *DHA 04/92*\n         BE    FOUND                                       *DHA 04/92*\n         BNE   INVALID                                     *DHA 04/92*\n         EJECT\n*----------------------------------------------------------------------\n*        IHADFA   - Data Facilities Area\n*----------------------------------------------------------------------\nDFPLEVEL SHOW  BLOCK=WORKAREA,FIELD=DFPLEV,WORK=YES        *DHA 04/92*\n         USING WORKAREA,R13                                *DHA 04/92*\n         L     R1,CVTPTR           POINT TO CVT            *LBD 04/91*\n         USING CVTMAP,R1\n         L     R1,CVTDFA             POINT TO DFA          *LBD 04/91*\n         DROP  R1                                          *DHA 04/92*\n         USING DFA,R1\n         CLC   DFAACRON,=C'DFA '   CHECK VALIDITY          *DHA 04/92*\n         BNE   INVALID             BRANCH IF INVALID       *DHA 04/92*\n         MVC   DFPLEV,DFPLEVPT     MOVE EDIT PATTERN       *DHA 04/92*\n         ED    DFPLEV,DFAREL          EDIT DFP LEVEL       *DHA 04/92*\n         LA    R1,WORKAREA         R1 -> WORKAREA          *DHA 04/92*\n         B     FOUND                                       *DHA 04/92*\n         DROP  R1\n         DROP  R13                                         *DHA 04/92*\nDFPLEVPT DC    X'214B204B20'       EDIT PATTERN            *LBD 04/91*\n         EJECT\n*----------------------------------------------------------------------\n*        IHALDA   - Local Data Area\n*----------------------------------------------------------------------\nREGION   SHOW  BLOCK=WORKAREA,FIELD=REGSIZE,WORK=YES       *DHA 04/92*\n         USING WORKAREA,R13                                *DHA 04/92*\n         L     R2,PSAAOLD          -> TO MY ASCB           *DHA 04/92*\n         USING ASCB,R2                                     *LBD 08/85*\n         L     R2,ASCBLDA       -> LDA                     *LBD 08/85*\n         DROP  R2                                          *LBD 08/85*\n         USING LDA,R2                                      *LBD 08/85*\n         CLC   LDAID,=C'LDA '      VALIDITY CHECK          *DHA 04/92*\n         BNE   INVALID             BRANCH IF INVALID       *DHA 04/92*\n         L     R2,LDAREGRQ        REGION REQUESTED -XA-    *LBD 12/85*\n         DROP  R2                                          *LBD 08/85*\n         SRL   R2,10               REGION/1K               *LBD 08/85*\n         CVD   R2,REGDWK                                   *LBD 08/85*\n         MVC   REGSIZE,REGPTRN     COPY EDIT PATTERN + K   *DHA 04/92*\n         ED    REGEDIT,REGDWK      CONVERT TO EBCDIC       *DHA 04/92*\n         LA    R1,WORKAREA         R1 -> WORKAREA          *DHA 04/92*\n         B     FOUND                                       *DHA 04/90*\nREGPTRN  DC    C' ',13X'20',X'2120',C'K'                   *DHA 04/92*\n         DROP  R13                                         *DHA 04/92*\n         EJECT\n*----------------------------------------------------------------------\n*        IHAPCCA  - Physical Configuration Communication Area\n*----------------------------------------------------------------------\nCPUVER   SHOW  BLOCK=PCCA,FIELD=VERSION                    *DHA 04/92*\n         L     R3,CVTPTR                                   *DHA 04/92*\n         USING CVTMAP,R3                                   *DHA 04/92*\n         L     R3,CVTPCCAT         POINT TO PCCAVT\n         DROP  R3                                          *DHA 04/92*\n         USING PCCAVT,R3\n         LA    R6,L'PCCAT00P       LENGTH OF ENTRY         *DHA 04/92*\n         LA    R7,PCCAT15P         POINT TO LAST ENTRY     *DHA 04/92*\nCPUMOD1  EQU   *                                           *DHA 04/92*\n         ICM   R1,15,PCCAVT        R1 -> PCCA              *DHA 04/92*\n         BNZ   CPUMOD2             BRANCH IF IT EXISTS     *DHA 04/92*\n         BXLE  R3,R6,CPUMOD1       LOOP TO NEXT ENTRY      *DHA 04/92*\n         B     INVALID             BRANCH IN NO ENTRY      *DHA 04/92*\nCPUMOD2  EQU   *                                           *DHA 04/92*\n         USING PCCA,R1                                     *DHA 04/92*\n         CLC   PCCAPCCA,=C'PCCA'   VALID PCCA?             *DHA 04/92*\n         BE    FOUND               YES, FOUND              *DHA 04/92*\n         BNE   INVALID             NO, INVALID             *DHA 04/92*\n         DROP  R3                                          *DHA 04/92*\n         DROP  R1                                          *DHA 04/92*\n         EJECT\n*----------------------------------------------------------------------\n*        IHAPCCA  - Physical Configuration Communication Area\n*----------------------------------------------------------------------\nCPUSER   SHOW  BLOCK=WORKAREA,FIELD=SERIALS,WORK=YES       *DHA 04/92*\n         USING WORKAREA,R13                                *DHA 04/92*\n         L     R3,CVTPTR                                   *DHA 04/92*\n         USING CVTMAP,R3                                   *DHA 04/92*\n         L     R3,CVTPCCAT         POINT TO PCCAVT\n         DROP  R3                                          *DHA 04/92*\n         USING PCCAVT,R3\n         LA    R6,L'PCCAT00P       LENGTH OF ENTRY         *DHA 04/92*\n         LA    R7,PCCAT15P         POINT TO LAST ENTRY     *DHA 04/92*\n         LA    R1,SERIALS          POINT TO CPU SERIALS    *DHA 04/92*\nCPUSER1  EQU   *                                           *DHA 04/92*\n         ICM   R2,15,PCCAVT        R2 -> PCCA              *DHA 04/92*\n         BZ    CPUSER2             BRANCH IF NO ENTRY      *DHA 04/92*\n         USING PCCA,R2                                     *DHA 04/92*\n         CLC   PCCAPCCA,=C'PCCA'   VALID PCCA?             *DHA 04/92*\n         BNE   INVALID             NO, BRANCH              *DHA 04/92*\n         MVC   0(L'SERIAL,R1),PCCACPID+2  MOVE CPU SERIAL  *DHA 04/92*\n         LA    R1,L'SERIAL+1(,R1)  POINT TO NEXT SLOT      *DHA 04/92*\nCPUSER2  EQU   *                                           *DHA 04/92*\n         BXLE  R3,R6,CPUSER1       LOOP TO NEXT ENTRY      *DHA 04/92*\n         LA    R1,WORKAREA         R1 -> WORKAREA          *DHA 04/92*\n         B     FOUND                                       *DHA 04/92*\n         DROP  R2                                          *DHA 04/92*\n         DROP  R3                                          *DHA 04/92*\n         DROP  R13                                         *DHA 04/92*\n         EJECT\n*----------------------------------------------------------------------\n*        IHASCCB  - Service Call Control Block             *DHA 04/92*\n*----------------------------------------------------------------------\nLPAR     SHOW  BLOCK=LPARSTAT,FIELD=LPARSTAT               *DHA 04/92*\n         L     R4,CVTPTR          -> CVT                    *LBD 11/88*\n         USING CVTMAP,R4                                   *DHA 04/92*\n         ICM   R4,15,CVTSCPIN        -> SCCP                *LBD 11/88*\n         BZ    INVALID            NO SCCP                   *LBD 11/88*\n         DROP  R4                                          *DHA 04/92*\n         USING SCCB,R4                                      *LBD 11/88*\n         LA    R1,LPARYES          R1 -> LPARSTAT (YES)    *DHA 04/92*\n         TM    SCCBCON1,SCCBBFY   LPAR MODE ?               *LBD 11/88*\n         BO    FOUND                                       *DHA 04/92*\n         LA    R1,LPARNO           R1 -> LPARSTAT (NO)     *DHA 04/92*\n         B     FOUND                                       *DHA 04/92*\n         DROP  R4                                          *DHA 04/92*\nLPARSTAT DS    0CL3                                        *DHA 04/92*\nLPARYES  DC    CL3'YES'                                    *DHA 04/92*\nLPARNO   DC    CL3'NO'                                     *DHA 04/92*\n         EJECT\n*----------------------------------------------------------------------\n*        IKJPSCB  - TSO Protected Step Control Block\n*----------------------------------------------------------------------\nDEST     SHOW  BLOCK=PSCB,FIELD=PSCBDEST                   *DHA 04/92*\nTSOUNIT  SHOW  BLOCK=PSCB,FIELD=PSCBGPNM                   *DHA 04/92*\n         L     R1,PSATOLD          -> TCB                  *DHA 04/92*\n         USING TCB,R1                                      *DHA 04/92*\n         L     R1,TCBJSCB          -> JSCB                 *DHA 04/92*\n         DROP  R1                                          *DHA 04/92*\n         USING IEZJSCB,R1                                  *DHA 04/92*\n         L     R1,JSCBPSCB         R1 -> PSCB              *DHA 04/92*\n         DROP  R1                                          *DHA 04/92*\n         B     FOUND                                       *DHA 04/92*\n         EJECT\n*----------------------------------------------------------------------\n*        IKJPSCB  - TSO Protected Step Control Block (OPER)\n*----------------------------------------------------------------------\nTSOOPER  SHOW  BLOCK=OPERAUTH,FIELD=OPERAUTH               *DHA 04/92*\n         L     R4,PSATOLD          -> TCB                  *DHA 04/92*\n         USING TCB,R4                                      *DHA 04/92*\n         L     R4,TCBJSCB          -> JSCB                 *DHA 04/92*\n         DROP  R4                                          *DHA 04/92*\n         USING IEZJSCB,R4                                  *DHA 04/92*\n         L     R4,JSCBPSCB         -> PSCB                 *DHA 04/92*\n         DROP  R4                                          *DHA 04/92*\n         USING PSCB,R4                                     *DHA 04/92*\n         LA    R1,NOOPER           R1 -> OPERAUTH (NOOPER) *DHA 04/90*\n         TM    PSCBATR1,PSCBCTRL   OPERATOR AUTHORITY?     *DHA 04/92*\n         BZ    FOUND               NO                      *DHA 04/92*\n         LA    R1,OPER             R1 -> OPERAUTH (OPER)   *DHA 04/92*\n         B     FOUND                                       *DHA 04/92*\n         DROP  R4                                          *DHA 04/92*\nOPERAUTH DS    0CL6                TSO OPERATOR AUTHORITY  *DHA 04/92*\nOPER     DC    CL6'OPER'                                   *DHA 04/92*\nNOOPER   DC    CL6'NOOPER'                                 *DHA 04/92*\n         EJECT\n*----------------------------------------------------------------------\n*        ILRASMVT - CLPA (Not Quick Start)                 *DHA 04/92*\n*----------------------------------------------------------------------\nCLPA     SHOW  BLOCK=CLPASTAT,FIELD=CLPASTAT               *DHA 04/92*\n         L     R2,CVTPTR           POINT TO CVT            *DHA 04/92*\n         USING CVTMAP,R2                                   *DHA 04/92*\n         L     R2,CVTASMVT         POINT TO ASMVT          *DHA 04/92*\n         DROP  R2                                          *DHA 04/92*\n         USING ASMVT,R2                                    *DHA 04/92*\n         LA    R1,CLPAYES          R1 -> CLPASTAT (YES)    *DHA 04/92*\n         TM    ASMFLAG2,ASMQUICK   QUICK START?            *DHA 04/92*\n         BZ    FOUND               NO, CLPA                *DHA 04/92*\n         LA    R1,CLPANO           R1 -> CLPASTAT (NO)     *DHA 04/92*\n         B     FOUND                                       *DHA 04/92*\n         DROP  R2                                          *DHA 04/92*\nCLPASTAT DS    0CL3                CLPA STATUS             *DHA 04/92*\nCLPAYES  DC    CL3'YES'                                    *DHA 04/92*\nCLPANO   DC    CL3'NO'                                     *DHA 04/92*\n         EJECT\n*----------------------------------------------------------------------\n*        ILRASMVT - CVIO (Not Warm Start)                  *DHA 04/92*\n*----------------------------------------------------------------------\nCVIO     SHOW  BLOCK=CVIOSTAT,FIELD=CVIOSTAT               *DHA 04/92*\n         L     R2,CVTPTR           POINT TO CVT            *DHA 04/92*\n         USING CVTMAP,R2                                   *DHA 04/92*\n         L     R2,CVTASMVT         POINT TO ASMVT          *DHA 04/92*\n         DROP  R2                                          *DHA 04/92*\n         USING ASMVT,R2                                    *DHA 04/92*\n         LA    R1,CVIOYES          R1 -> CVIOSTAT (YES)    *DHA 04/92*\n         TM    ASMFLAG2,ASMWARM    WARM START?             *DHA 04/92*\n         BZ    FOUND               NO, CVIO                *DHA 04/92*\n         LA    R1,CVIONO           R1 -> CVIOSTAT (NO)     *DHA 04/92*\n         B     FOUND                                       *DHA 04/92*\n         DROP  R2                                          *DHA 04/92*\nCVIOSTAT DS    0CL3                CVIO STATUS             *DHA 04/92*\nCVIOYES  DC    CL3'YES'                                    *DHA 04/92*\nCVIONO   DC    CL3'NO'                                     *DHA 04/92*\n         EJECT\n*----------------------------------------------------------------------\n*        LIDREC   - ACF2 Logon ID Record\n*----------------------------------------------------------------------\n         AIF   (NOT &ACF2).ACF2C                           *DHA 04/92*\nACCTNO#  SHOW  BLOCK=LIDREC,FIELD=LIDACCT#                 *LBD 12/86*\nACF2ACCT SHOW  BLOCK=LIDREC,FIELD=LIDACCT                  *LBD 02/84*\nCOMPMAIL SHOW  BLOCK=LIDREC,FIELD=LIDUMAIL                 *LBD 06/86*\nDEPT     SHOW  BLOCK=LIDREC,FIELD=LIDDEPT                  *LBD 02/84*\nFDS#     SHOW  BLOCK=LIDREC,FIELD=LIDFDS#                  *LBD 12/86*\nGROUP    SHOW  BLOCK=LIDREC,FIELD=LIDGRP                   *DHA 04/92*\nGRP      SHOW  BLOCK=LIDREC,FIELD=LIDGRP                   *DHA 04/92*\nHOMEDIV  SHOW  BLOCK=LIDREC,FIELD=LIDHMED                  *LBD 10/90*\nJOBFUNC  SHOW  BLOCK=LIDREC,FIELD=LIDJOBF                 *LBD 10/84*\nLOC      SHOW  BLOCK=LIDREC,FIELD=LIDLOCAT                 *LBD 02/84*\nMAIL     SHOW  BLOCK=LIDREC,FIELD=LIDMAILC                 *LBD 02/84*\nNAME     SHOW  BLOCK=LIDREC,FIELD=LIDNAME                  *LBD 02/84*\nPHONE    SHOW  BLOCK=LIDREC,FIELD=LIDPHONE                 *LBD 02/84*\n         ACFINCVT R6,NONE=INVALID                          *LBD 02/84*\n         USING ACCVT,R6           ADDRESSABILITY           *LBD 02/84*\n         ACFGUCB R7,NONE=INVALID,INLINE=YES                *DHA 04/92*\n         DROP  R6                                          *LBD 02/84*\n         USING ACUCB,R7                                    *LBD 02/84*\n         L     R1,ACULRECP         R1 -> LIDREC            *LBD 02/84*\n         DROP  R7                                          *LBD 02/84*\n         B     FOUND                                       *DHA 04/92*\n.ACF2C   ANOP                                              *DHA 04/92*\n         EJECT\n*----------------------------------------------------------------------\n*        RATYJCD  - Rockwell ACT Accounting Field\n*----------------------------------------------------------------------\n         AIF   (NOT &ROCKWELL).ROCKWELL2                   *DHA 04/92*\nACCT     SHOW  BLOCK=ABSTART,FIELD=FDSACCT                 *LBD 06/89*\nACCTNO   SHOW  BLOCK=ABSTART,FIELD=ABACCTNO                *LBD 02/84*\nCRTCD    SHOW  BLOCK=ABSTART,FIELD=ABCRTCD\nFDS      SHOW  BLOCK=ABSTART,FIELD=ABFDS                   *LBD 02/84*\nFRAMES   SHOW  BLOCK=ABSTART,FIELD=ABFRAMES\nLINES    SHOW  BLOCK=ABSTART,FIELD=ABLINES\n         L     R1,PSATOLD          R1 -> CURRENT TASK CONTROL BLOCK\n         USING TCB,R1\n         L     R1,TCBJSCB          R1 -> JOB STEP CONTROL BLOCK\n         DROP  R1                                          *DHA 04/92*\n         USING IEZJSCB,R1\n         L     R1,JSCBJCT          R1 -> JOB CONTROL TABLE\n         DROP  R1                                          *DHA 04/92*\n         USING INJMJCT-16,R1\n         ICM   R1,B'0111',JCTACTAD R1 -> ACCOUNT CONTROL TABLE\n         DROP  R1                                          *DHA 04/92*\n         USING IEFAACTB-16,R1\n         CLI   ACTIDENT,ACTID      VALIDITY CHECK          *DHA 04/92*\n         BNE   INVALID             BRANCH IF FAILURE\n         CLI   ACTACCNT,ABSIZE     VALIDITY CHECK\n         BNE   INVALID             BRANCH IF FAILURE\n         LA    R1,ACTACCNT+1       R1 -> ABSTART\n         DROP  R1\n         B     FOUND                                       *LBD 02/84*\n.ROCKWELL2 ANOP                                            *DHA 04/92*\n         EJECT\n*----------------------------------------------------------------------\n*        RCVT     - Rockwell Communications Vector Table\n*----------------------------------------------------------------------\n         AIF   (NOT &ROCKWELL).ROCKWELL3                   *DHA 04/92*\nCENTER   SHOW  BLOCK=RCVT,FIELD=RCVTHOME                   *DHA 04/90*\n         L     R1,CVTPTR           POINT TO CVT            *LBD 04/84*\n         USING CVTMAP,R1                                   *LBD 04/84*\n         ICM   R1,15,CVTUSER      R1 -> RCVT               *DHA 04/92*\n         DROP  R1                                          *LBD 04/84*\n         BZ    INVALID             BRANCH IF ABSENT        *DHA 04/92*\n         USING RCVT,R1                                     *DHA 04/92*\n         CLC   RCVTID,=C'RCVT'     VALID?                  *DHA 04/92*\n         BE    FOUND               YES, BRANCH             *DHA 04/92*\n         BNE   INVALID             NO, BRANCH              *DHA 04/92*\n         DROP  R1                                          *DHA 04/92*\n.ROCKWELL3 ANOP                                            *DHA 04/92*\n         EJECT                                            *\n***********************************************************************\n*\n*        Section 6 - Termination\n*\n*              Strip leading and trailing blanks and nulls from VALUE.\n*              Store length in OVALUE.\n*              Insure ILENGTH is not exceeded.\n*              Move requested information to VALUE.\n*\n***********************************************************************\nFOUND    DS    0H                                          *LBD 02/84*\n         LH    R2,SHOWFLDL         R2 = OLENGTH            *DHA 04/92*\nFOUNDLEN DS    0H                                          *DHA 04/90*\n         LTR   R2,R2               NULL STRING?            *DHA 04/92*\n         BZ    STORE               YES, BRANCH             *DHA 04/92*\n         AH    R1,SHOWFLD          R1 -> REQUESTED SUBFIELD\nLEADING  DS    0H                                          *DHA 04/92*\n         TM    0(R1),X'FF'-C' '    LEADING BLANK OR NULL?  *DHA 04/92*\n         BNZ   TRAILING            NO, BRANCH              *DHA 04/92*\n         LA    R1,1(,R1)           YES, INCREMENT POINTER  *DHA 04/92*\n         BCT   R2,LEADING          DECREMENT LENGTH        *DHA 04/92*\n         B     NORMAL              BRANCH, NULL STRING     *DHA 04/92*\nTRAILING DS    0H                                          *DHA 04/92*\n         LR    R3,R2               R3 = LENGTH             *DHA 04/92*\n         BCTR  R3,0                R3 = LENGTH-1           *DHA 04/92*\n         LA    R4,0(R3,R1)         POINT TO LAST BYTE      *DHA 04/92*\n         TM    0(R4),X'FF'-C' '    TRAILING BLANK OR NULL? *DHA 04/92*\n         BNZ   STORE               NO, BRANCH              *DHA 04/92*\n         BCT   R2,TRAILING         DECREMENT LENGTH        *DHA 04/92*\nSTORE    DS    0H                                          *DHA 04/92*\n         ST    R2,OLENGTH          STORE OLENGTH\n         LA    R4,VALUE            POINT TO TARGET         *DHA 04/92*\n         LR    R5,R11              GET LENGTH OF TARGET    *DHA 04/92*\n         LR    R6,R1               POINT TO SOURCE         *DHA 04/92*\n         LR    R7,R2               GET LENGTH OF SOURCE    *DHA 04/92*\n         ICM   R7,8,=C' '          PAD = BLANK             *DHA 04/92*\n         MVCL  R4,R6               COPY SOURCE TO TARGET   *DHA 04/92*\n         BNL   NORMAL              NORMAL RETURN           *DHA 04/92*\n         BL    TRUNCATE            BRANCH, TRUNCATION      *DHA 04/92*\n         EJECT\n***********************************************************************\n*        RETURN\n***********************************************************************\nINVALID  DS    0H                  VALIDITY CHECK FAILED\n         LA    R15,16              RETURN CODE = 16\n         B     RETURN\nARGERROR DS    0H                  CALLER ARGUMENT LIST ERROR\n         LA    R15,12              RETURN CODE = 12\n         B     RETURN\nNOID     DS    0H                  ID NOT FOUND\n         LA    R15,8               RETURN CODE = 8\n         B     RETURN\nTRUNCATE DS    0H                  VALUE TRUNCATED\n         LA    R15,4               RETURN CODE = 4\n         B     RETURN\nNORMAL   DS    0H                  NORMAL COMPLETION\n         SR    R15,R15             RETURN CODE = 0\nRETURN   DS    0H\n         LTR   R8,R8               DOES TABLE ENTRY EXIST? *DHA 04/92*\n         BZ    RETURN1             NO, BRANCH              *DHA 04/90*\n         TM    SHOWFLAG,SHOWWORK   WAS GETMAIN ISSUED?     *DHA 04/90*\n         BZ    RETURN1             NO, BRANCH              *DHA 04/90*\n         LR    R2,R15              SAVE RETURN CODE        *DHA 04/90*\n         LR    R1,R13              UNCHAIN SAVE AREAS      *DHA 04/90*\n         L     R13,4(R1)           ...                     *DHA 04/90*\n         FREEMAIN RU,LV=4096,A=(1) FREE WORK AREA          *DHA 04/90*\n         LR    R15,R2              RESTORE RETURN CODE     *DHA 04/90*\nRETURN1  DS    0H                                          *DHA 04/90*\n         L     14,12(13,0)        RESTORE REGISTER 14      *LBD 12/89*\n         LM    0,12,20(13)        RESTORE THE REGISTERS    *LBD 12/89*\n         BSM   0,14               RETURN TO THE CALLER     *LBD 12/89*\n*                                                          *DHA 04/92*\n         DROP  R9\n         DROP  R10\n         DROP  R12\n         DROP  R0                                          *DHA 04/92*\n         EJECT\n***********************************************************************\n*        ID TABLE\n*              ENTRIES ARE FORMED BY SHOW MACRO CALLS IN THE PRECEDING\n*              ACTION ROUTINES.  THE TABLE IS USED BY THE BINARY SEARCH\n*              CODE IN THE PROLOG TO THE ACTION ROUTINES.\n***********************************************************************\nSHOWTBL  SHOWTBL SHOWTBLE\n         EJECT\n         END   SHOW\n./ ADD NAME=SHOWREXX 0100-92112-92115-1920-000171-000088-000000-$A1019\nSHOWREXX TITLE 'REXX FUNCTION INTERFACE TO SHOW'\n***********************************************************************\n*        REXX Function Interface to SHOW\n*\n*        Use: refer to SHOWREXX(id) or CALL SHOWREXX id,\n*        where \"id\" is a constant or variable which has a valid value\n*        for SHOW. \"id\" may be lowercase or uppercase.\n*\n*\n*\n*        Douglas H. Adams\n*        Mail code 110-SE28\n*        Information Systems Center\n*        Rockwell International Corporation\n*        2201 Seal Beach Boulevard\n*        P. O. Box 2515\n*        Seal Beach, California 90740-1515\n*\n*        (310) 797-2618\n*\n*        April 24, 1992\n*\n***********************************************************************\n         PUNCH ' ALIAS SHOWREXX'\nSHOWREXX CSECT\nSHOWREXX AMODE 31\nSHOWREXX RMODE ANY\n         EJECT\n         IRXEFPL                   REXX EXTERNAL FUNCTIONS PARM LIST\n         EJECT\n         IRXARGTB                  REXX ARGUMENT TABLE\n         EJECT\n         IRXENVB                   REXX ENVIRONMENT BLOCK\n         EJECT\n         IRXEVALB                  REXX EVALUATION BLOCK\n         EJECT\n         IRXEXTE                   REXX VECTOR OF EXTERNAL ENTRY POINTS\n         EJECT\n***********************************************************************\n*                                  WORK AREA FOR REENTRANCE\n***********************************************************************\nWORKAREA DSECT\nSAVE     DS    18F\nID       DS    CL8                 FUNCTION ARGUMENT\nCALL     CALL  ,(ID,ILENGTH,,),MF=L  SHOW PARAMETERS\nWORKSIZE EQU   *-WORKAREA\n         EJECT\n***********************************************************************\n*                                  INITIALIZATION\n***********************************************************************\nSHOWREXX CSECT\n         USING SHOWREXX,15\n         SAVE  (14,12)             SAVE REGISTER\n         MODID                     IDENTIFICATION\n         DROP  15\n         LR    12,15               SET BASE REGISTER\n         USING SHOWREXX,12\n         LR    10,0                SAVE ENVBLOCK POINTER\n         USING ENVBLOCK,10\n         LR    2,1                 SAVE EFPL POINTER\n         USING EFPL,2\n         LA    0,WORKSIZE          GET WORKAREA SIZE\n         GETMAIN RU,LV=(0)         GET WORKAREA STORAGE\n         USING WORKAREA,1\n         XC    WORKAREA(WORKSIZE),WORKAREA  CLEAR WORKAREA\n         ST    1,8(,13)            CHAIN SAVE AREAS\n         ST    13,SAVE+4\n         LR    13,1\n         DROP  1\n         USING WORKAREA,13\n***********************************************************************\n*                                  GET FUNCTION VALUE\n***********************************************************************\n         L     3,EFPLARG           POINT TO ARGUMENT TABLE\n         USING ARGTABLE_ENTRY,3\n         L     4,EFPLEVAL          POINT TO A(EVALUATION BLOCK)\n         L     4,0(,4)             POINT TO EVALUATION BLOCK\n         USING EVALBLOCK,4\n         L     5,ARGTABLE_ARGSTRING_PTR     POINT TO ARG\n         ICM   6,15,ARGTABLE_ARGSTRING_LENGTH  GET LENGTH OF ARG\n         BZ    ERROR3              NULL, BRANCH\n         BM    ERROR2              MISSING, BRANCH\n         C     6,=F'8'             IS ARG TOO BIG?\n         BH    ERROR3              YES, BRANCH\n         ICM   7,15,ARGTABLE_NEXT  IS THERE A SECOND ARG?\n         BNM   ERROR1              YES, BRANCH\n         MVC   ID,=CL8' '          SET ID TO BLANKS\n         BCTR  6,0                 GET MACHINE LENGTH OF ARG\n         EX    6,MVC               MOVE ARG TO ID\n         LA    7,EVALBLOCK_EVLEN   POINT TO OUTPUT LENGTH\n         LA    8,EVALBLOCK_EVDATA  POINT TO OUTPUT RESULT\n         ICM   15,15,=V(SHOW)      GET ENTRY POINT OF SHOW\n         BZ    LINK                BRANCH IF NOT RESOLVED\n         CALL  (15),(ID,ILENGTH,(8),(7)),VL,MF=(E,CALL)\n         B     TESTRET             GO TEST RETURN CODE\nLINK     EQU   *\n         LINK  EP=SHOW,PARAM=(ID,ILENGTH,(8),(7)),VL=1,MF=(E,CALL)\nTESTRET  EQU   *\n         LTR   15,15               SUCCESSFUL?\n         BZ    RETURN              YES, BRANCH\n         C     15,=F'8'            ID NOT SUPPORTED?\n         BE    ERROR3              YES, BRANCH\n         BNE   ERROR4              NO, OTHER ERROR\n***********************************************************************\n*                                  ERROR MESSAGE PROCESSING\n***********************************************************************\nERROR1   EQU   *\n         LA    1,ERRMSG1           MULTIPLE ARGUMENTS\n         B     ERRORSAY\nERROR2   EQU   *\n         LA    1,ERRMSG2           NO ARGUMENT\n         B     ERRORSAY\nERROR3   EQU   *\n         LA    1,ERRMSG3           UNSUPPORTED ARGUMENT\n         B     ERRORSAY\nERROR4   EQU   *\n         LA    1,ERRMSG4           INVALID ENVIRONMENT\n         B     ERRORSAY\nERRORSAY EQU   *\n         LR    0,10                POINT TO ENVIRONMENT BLOCK\n         L     15,ENVBLOCK_IRXEXTE POINT TO ENTRY POINT VECTOR\n         USING IRXEXTE,15\n         CLC   IRXEXTE_ENTRY_COUNT,=A((IRXSAY-IRXEXTE)/4) IRXSAY EXIST?\n         BL    RETURN              NO, BRANCH\n         L     15,IRXSAY           POINT TO SAY ROUTINE\n         DROP  15\n         CALL  (15),MF=(E,(1))     CALL IRXSAY\n         LA    15,4                UNSUCCESSFUL RETURN CODE\n***********************************************************************\n*                                  TERMINATION\n***********************************************************************\nRETURN   EQU   *\n         LR    1,13                POINT TO WORKAREA\n         L     13,SAVE+4           UNCHAIN SAVE AREAS\n         LR    2,15                SAVE RETURN CODE\n         LA    0,WORKSIZE          GET WORKAREA SIZE\n         FREEMAIN RU,LV=(0),A=(1)  FREE WORKAREA\n         LR    15,2                RESTORE RETURN CODE\n         RETURN (14,12),RC=(15)    RETURN\n         EJECT\n***********************************************************************\n*                                  ERROR MESSAGES\n***********************************************************************\nERRMSG1  CALL  ,(WRITEERR,ERRPTR1,ERRLEN1),VL,MF=L\nERRPTR1  DC    A(ERRTXT1)\nERRLEN1  DC    A(L'ERRTXT1)\nERRTXT1  DC    C'Muliple arguments are not allowed for the SHOW functio*\n               n.'\n*\nERRMSG2  CALL  ,(WRITEERR,ERRPTR2,ERRLEN2),VL,MF=L\nERRPTR2  DC    A(ERRTXT2)\nERRLEN2  DC    A(L'ERRTXT2)\nERRTXT2  DC    C'No arguments were specified for the SHOW function.'\n*\nERRMSG3  CALL  ,(WRITEERR,ERRPTR3,ERRLEN3),VL,MF=L\nERRPTR3  DC    A(ERRTXT3)\nERRLEN3  DC    A(L'ERRTXT3)\nERRTXT3  DC    C'This ID is not supported for SHOW processing.'\n*\nERRMSG4  CALL  ,(WRITEERR,ERRPTR4,ERRLEN4),VL,MF=L\nERRPTR4  DC    A(ERRTXT4)\nERRLEN4  DC    A(L'ERRTXT4)\nERRTXT4  DC    C'Invalid environment detected by SHOW.'\n         EJECT\n***********************************************************************\n*                                  DATA\n***********************************************************************\nMVC      MVC   ID(0),0(5)          EXECUTED\nILENGTH  DC    F'250'              REXX EVALBLOCK_EVDATA LENGTH\nWRITEERR DC    CL8'WRITEERR'\n         END\n./ ADD NAME=SHOWSPF  0103-85344-92115-1618-000388-000368-000029-$A1019\nSHOWSPF  TITLE 'INFORMATION EXTRACTION SPF COMMAND'\n***********************************************************************\n*\n*              INFORMATION EXTRACTION SPF COMMAND\n*\n*        THIS IS AN INTERFACE TO THE INFORMATION EXTRACTION ROUTINE\n*        FOR SPF CLISTS UNDER SPF. IT IS INVOKED AS FOLLOWS:\n*\n*              ISPEXEC SELECT PGM(SHOWSPF) PARM(ID,NAME)\n*              ISPEXEC VGET NAME SHARED\n*\n*        ID   - MUST BE A VALID IDENTIFIER FOR THE SHOW ROUTINE.\n*        NAME - WILL BE USED TO CREATE A VARIABLE IN THE\n*               SPF SHARED VARIABLE POOL. THE VARIABLE WILL BE SET TO\n*               THE VALUE CORRESPONDING TO THE SHOW INDENTIFIER.\n*\n*\n*        Douglas H. Adams\n*        Mail Code 110-SE28\n*        Information Systems Center\n*        Rockwell International Corporation\n*        2201 Seal Beach Boulevard\n*        P. O. Box 2515\n*        Seal Beach, California 90740-1515\n*\n*        (310) 797-2618\n*\n*        April 24, 1992\n*\n***********************************************************************\n         PUNCH ' ALIAS SHOWSPF'\nSHOWSPF  CSECT\nSHOWSPF  AMODE 31\nSHOWSPF  RMODE ANY\n         EJECT\n         REGEQU ,                  REGISTER EQUATES\n         EJECT\n***********************************************************************\n*              PARAMETER\n***********************************************************************\nPARM     DSECT\nPARMSIZE DS    H                   LENGTH OF PARAMETER STRING\nPARMVAL  DS    CL100               PARAMETER CHARACTER STRING\n         EJECT\n***********************************************************************\n*              WORKING STORAGE\n***********************************************************************\nWORK     DSECT                     WORK AREA\nSAVE     DS    18F                 SAVE AREA\nNAMELIST DS    C'('                ISPLINK VPUT NAME LIST\nNAME     DS    CL8                 ISPLINK VPUT VARIABLE NAME\nNAMEEND  DS    C')'                END OF NAME LIST\nID       DS    CL8                 SHOW IDENTIFIER\nILENGTH  DS    A(L'VALUE)          SHOW VALUE INPUT LENGTH\nVALUE    DS    CL256               SHOW VALUE\nOLENGTH  DS    F                   SHOW VALUE OUTPUT LENGTH\nCALLSHOW CALL  ,                   CALL SHOW                           *\n               (ID,                ID                                  *\n               ILENGTH,            ILENGTH                             *\n               VALUE,              VALUE                               *\n               OLENGTH),           OLENGTH                             *\n               VL,                                                     *\n               MF=L\nDEFINE   CALL  ,                   CALL ISPLINK                        *\n               (,                  'VDEFINE'                           *\n               NAMELIST,           NAMELIST                            *\n               VALUE,              VALUE                               *\n               ,                   'CHAR'                              *\n               OLENGTH),           OLENGTH                             *\n               VL,                                                     *\n               MF=L\nDELETE   CALL  ,                   CALL ISPLINK                        *\n               (,                  'VDELETE'                           *\n               NAMELIST),          NAMELIST                            *\n               VL,                                                     *\n               MF=L\nPUT      CALL  ,                   CALL ISPLINK                        *\n               (,                  'VPUT'                              *\n               NAMELIST,           NAMELIST                            *\n               ),                  'SHARED'                            *\n               VL,                                                     *\n               MF=L\nWORKSIZE DS    0XL(*-WORK)         LENGTH OF WORK AREA\n         EJECT\n***********************************************************************\n*              INITIALIZATION\n***********************************************************************\nSHOWSPF  CSECT\n         USING SHOWSPF,R15\n         SAVE  (14,12)             SAVE REGISTERS\n         MODID ,                   IDENTIFICATION\n         DROP  R15\n         LR    R12,R15             R12 = BASE REGISTER\n         USING SHOWSPF,R12\n         L     R11,0(R1)           R11 -> PARM\n         USING PARM,R11\n         LA    R0,L'WORKSIZE       R0 = LENGTH OF WORK AREA\n         GETMAIN R,LV=(0)          GET MAIN STORAGE FOR WORK AREA\n         LR    R2,R1               R2 -> STORAGE\n         LA    R3,L'WORKSIZE       R3 = LENGTH OF STORAGE\n         SR    R5,R5               R5 = 0\n         MVCL  R2,R4               CLEAR WORK AREA\n         ST    R13,4(R1)           CHAIN SAVE AREAS\n         ST    R1,8(R13)           ...\n         LR    R13,R1              R13 -> WORKING STORAGE\n         USING WORK,R13\n         MVI   ID,C' '             ID = BLANK\n         MVC   ID+1(L'ID-1),ID     ...\n         MVI   NAME,C' '           NAME = BLANK\n         MVC   NAME+1(L'NAME-1),NAME ...\n         MVI   NAMELIST,C'('       NAMELIST = (NAME)\n         MVI   NAMEEND,C')'        ...\n         LA    R0,L'VALUE          ILENGTH = LENGTH OF VALUE\n         ST    R0,ILENGTH          ...\n         EJECT\n***********************************************************************\n*              PARSE PARAMETER STRING VIA SYNTAX MATRIX\n***********************************************************************\n*----------------------------------------------------------------------\n*        POINT TO BEGINNING OF INPUT STRING.\n*        POINT TO INITIAL ROW OF SYNTAX MATRIX.\n*----------------------------------------------------------------------\n         LH    R6,PARMSIZE         R6 = SIZE OF PARM FIELD\n         BNP   ARGERROR            BRANCH IF MISSING\n         BCTR  R6,0                R6 = SIZE - 1\n         LA    R1,PARMVAL          R1 -> PARAMETER STRING\n         BCTR  R1,0                R1 -> STRING - 1 FOR TRT\n         SR    R2,R2               R2 = 0 FOR TRT\n         LA    R4,MATRIX           R4 -> INITIAL MATRIX ROW\n*----------------------------------------------------------------------\n*        POINT TO NEXT INPUT CHARACTER\n*----------------------------------------------------------------------\nNEXT     DS    0H                  SCAN FOR NEXT PARAMETER\n         LA    R7,PARAMETR         R7 -> TRT TABLE FOR PARAMETER\nPOINT    DS    0H                  POINT TO NEXT INPUT CHARACTER\nCOMA2##  DS    0H                  COMMA AFTER DELIMITING BLANK\n         LTR   R6,R6               END OF PARAMETER STRING?\n         BM    PROCESS             YES, BRANCH\n         LA    R5,1(R1)            R5 -> NEXT INPUT CHARACTER\n*----------------------------------------------------------------------\n*        SCAN FOR NEXT SIGNIFICANT CHARACTER IN INPUT STRING.\n*        TRANSLATE CHARACTER TO ITS CATEGORY (MATRIX COLUMN NUMBER).\n*        CHECK FOR END OF PARAMETER STRING.\n*        OBTAIN MATRIX ELEMENT USING CURRENT ROW AND COLUMN.\n*        USE THAT ELEMENT AS NEW MATRIX ROW NUMBER.\n*        BRANCH TO ACTION ROUTINE INDEXED BY THAT ELEMENT.\n*----------------------------------------------------------------------\n         EX    R6,TRT              R1 -> DELIMITING CHARACTER\n*                                  R2 = MATRIX COLUMN NUMBER\n         BNZ   SET                 END OF INPUT STRING?\n         LA    R1,2(R6,R1)         R1 -> END OF INPUT STRING + 1\n         LA    R2,ENDOS            R2 = ENDING MATRIX COLUMN NUMBER\nSET      DS    0H\n         BCTR  R6,0                R6 = REMAINING LENGTH\n         AR    R6,R5               ...\n         SR    R6,R1               ...\n         SR    R3,R3               R3 = 0\n         IC    R3,0(R2,R4)         R3 = MATRIX ELEMENT\n         LR    R4,R3               R4 = NEW MATRIX ROW NUMBER\n         MH    R4,=Y(L'MATRIX)     R4 = NUMBER * MATRIX ROW LENGTH\n         LA    R4,MATRIX(R4)       R4 -> NEW MATRIX ROW\n         SLL   R3,2                R3 = BRANCH INDEX\n         B     ACTION(R3)          GO TO ACTION ROUTINE\n*\nTRT      TRT   1(0,R1),0(R7)       EXECUTED\n*----------------------------------------------------------------------\n*        BRANCH TABLE TO ACTION ROUTINES.\n*----------------------------------------------------------------------\nACTION   DS    0H\n         B     ABEND               SHOULD NEVER GET HERE\n         B     PARM1##             FIRST PARAMETER\n         B     BLNK1##             BLANK DELIMITING FIRST PARAMETER\n         B     COMA1##             COMMA DELIMITING FIRST PARAMETER\n         B     COMA2##             COMMA AFTER DELIMITING BLANK\n         B     PARM2##             SECOND PARAMETER\n         B     BLNK2##             BLANK DELIMITING SECOND PARAMETER\n         B     ENDP1##             END OF SECOND PARAMETER\n         B     ENDP2##             END OF PARAMETER STRING\n         B     DELIM##             DELIMITER ERROR\n         B     ABEND##             LOGIC ERROR\n         EJECT\n***********************************************************************\n*              TAKE ACTION BASED ON SYNTACTIC SIGNIFICANCE\n***********************************************************************\nPARM1##  DS    0H                  FIRST PARAMETER\nPARM2##  DS    0H                  SECOND PARAMETER\n         LR    R9,R1               R9 -> PARAMETER\n         LA    R7,DELIMITR         R7 -> TRT TABLE FOR DELIMITER\n         B     POINT               POINT TO NEXT INPUT CHARACTER\n*----------------------------------------------------------------------\nBLNK1##  DS    0H                  BLANK DELIMITING FIRST PARAMETER\nCOMA1##  DS    0H                  COMMA DELIMITING FIRST PARAMETER\n         LR    R8,R1               R8 = LENGTH OF FIELD SCANNED - 1\n         SR    R8,R9               ...\n         BCTR  R8,0                ...\n         C     R8,=A(L'ID-1)       IS LENGTH OF PARAMETER > ID?\n         BH    ARGERROR            YES, BRANCH\n         EX    R8,MVCID            MOVE ID TO WORKING STORAGE\n         B     NEXT                SCAN FOR PARAMETER\n*\nMVCID    MVC   ID(0),0(R9)         EXECUTED\n*----------------------------------------------------------------------\nENDP1##  DS    0H                  END OF SECOND PARAMETER\nBLNK2##  DS    0H                  BLANK DELIMITING SECOND PARAMETER\n         LR    R8,R1               R8 = LENGTH OF FIELD SCANNED - 1\n         SR    R8,R9               ...\n         BCTR  R8,0                ...\n         C     R8,=A(L'NAME-1)     IS LENGTH OF PARAMETER > NAME?\n         BH    ARGERROR            YES, BRANCH\n         EX    R8,MVCNAME          MOVE NAME TO WORKING STORAGE\n         B     NEXT                SCAN FOR PARAMETER\n*\nMVCNAME  MVC   NAME(0),0(R9)       EXECUTED\n         EJECT\n***********************************************************************\nENDP2##  DS    0H                  END OF PARAMETER STRING\nPROCESS  DS    0H                  PROCESS PARAMETERS\n         ICM   R15,15,=V(SHOW)     POINT TO SHOW ROUTINE\n         BZ    LINK                BRANCH IF NOT RESOLVED  *DHA 04/92*\n         CALL  (15),               INVOKE SHOW                         *\n               (ID,                IDENTIFIER FOR INFORMATION REQUESTED*\n               ILENGTH,            LENGTH PROVIDED FOR VALUE           *\n               VALUE,              INFORMATION REQUESTED               *\n               OLENGTH),           LENGTH OF INFORMATION PROVIDED      *\n               VL,                                                     *\n               MF=(E,CALLSHOW)\n         B     TESTRET             GO TEST RETURN CODE     *DHA 04/92*\nLINK     DS    0H                                          *DHA 04/92*\n         LINK  EP=SHOW,                                    *DHA 04/92* *\n               (ID,                IDENTIFIER FOR INFORMATION REQUESTED*\n               ILENGTH,            LENGTH PROVIDED FOR VALUE           *\n               VALUE,              INFORMATION REQUESTED               *\n               OLENGTH),           LENGTH OF INFORMATION PROVIDED      *\n               VL=1,                                                   *\n               MF=(E,CALLSHOW)\nTESTRET  DS    0H                                          *DHA 04/92*\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   SHOWERR             BRANCH IF ERROR\n         CALL  ISPLINK,            DEFINE FUNCTION VARIABLE            *\n               (=C'VDEFINE',       'VDEFINE'                           *\n               NAMELIST,           (VARIABLE-NAME)                     *\n               VALUE,              VALUE                               *\n               =C'CHAR',           'CHAR'                              *\n               OLENGTH),           VARIABLE-LENGTH                     *\n               VL,                                                     *\n               MF=(E,DEFINE)\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   ISPERROR            BRANCH IF ERROR\n         CALL  ISPLINK,            COPY TO SHARED VARIABLE             *\n               (=C'VPUT',          'VPUT'                              *\n               NAMELIST,           (VARIABLE-NAME)                     *\n               =C'SHARED'),        'SHARED'                            *\n               VL,                                                     *\n               MF=(E,PUT)\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   ISPERROR            BRANCH IF ERROR\n         CALL  ISPLINK,            DELETE FUNCTION VARIABLE            *\n               (=C'VDELETE',       'VDELETE'                           *\n               NAMELIST),          (VARIABLE-NAME)                     *\n               VL,                                                     *\n               MF=(E,DELETE)\n         LTR   R15,R15             TEST RETURN CODE\n         BNZ   ISPERROR            BRANCH IF ERROR\n         B     NORMAL              NORMAL RETURN\n         EJECT\n***********************************************************************\n*              TERMINATION\n***********************************************************************\nSHOWERR  DS    0H                  SHOW ERROR\nISPERROR DS    0H                  SPF ERROR\n         LR    R2,R15              SAVE RETURN CODE\n         B     RETURN\nDELIM##  DS    0H                  DELIMITER ERROR\n         LA    R2,20               RETURN CODE = 20\n         B     RETURN\nARGERROR DS    0H                  CALLER ARGUMENT LIST ERROR\n         LA    R2,12               RETURN CODE = 12\n         B     RETURN\nNORMAL   DS    0H                  NORMAL COMPLETION\n         SR    R2,R2               RETURN CODE = 0\nRETURN   DS    0H\n         LA    R0,L'WORKSIZE       R0 = LENGTH OF WORK AREA\n         LR    R1,R13              R1 -> DYNAMIC STORAGE\n         L     R13,SAVE+4          R13 -> PREVIOUS SAVE AREA\n         FREEMAIN R,LV=(0),A=(1)   FREE MAIN STORAGE FOR WORK AREA\n         LR    R15,R2              R15 = RETURN CODE\n         RETURN (14,12),RC=(15)    RETURN TO CALLER\n*\nABEND##  ABEND 0,DUMP              LOGIC ERROR\n*\n         DROP  R11\n         DROP  R12\n         DROP  R13\n         EJECT\n***********************************************************************\n*              PARSE TABLES\n***********************************************************************\n*----------------------------------------------------------------------\n*        CATEGORIES OF CHARACTERS:\n*              TRANSLATE-AND-TEST TABLE VALUES;\n*              MATRIX COLUMN NUMBERS.\n*----------------------------------------------------------------------\nFIELD    EQU   0                   VALID CHARACTERS BETWEEN DELIMITERS\nBLANK    EQU   1  ' '              BLANK\nALPHA    EQU   2  $#@ A-Z          ALPHABETIC AND NATIONAL\nNUMBR    EQU   3  0-9              NUMERIC\nCOMMA    EQU   4  ,                COMMA\nENDOS    EQU   5                   END OF STRING\nOTHER    EQU   6                   ANY OTHER CHARACTER\n*----------------------------------------------------------------------\n*        CORRESPONDENCE BETWEEN CHARACTERS AND CATEGORIES:\n*              SCAN FOR START OF PARAMETER\n*              TRANSLATE-AND-TEST TABLE\n*----------------------------------------------------------------------\nPARAMETR DS    0CL256\n         DC    64AL1(OTHER)\n         DC      AL1(FIELD)  ' '   BLANK\n         DC    26AL1(OTHER)\n         DC      AL1(ALPHA)  $     NATIONAL\n         DC    15AL1(OTHER)\n         DC      AL1(COMMA)  ,     COMMA\n         DC    15AL1(OTHER)\n         DC     2AL1(ALPHA)  #@    NATIONAL\n         DC    68AL1(OTHER)\n         DC     9AL1(ALPHA)  A-I   ALPHABETIC\n         DC     7AL1(OTHER)\n         DC     9AL1(ALPHA)  J-R   ALPHABETIC\n         DC     8AL1(OTHER)\n         DC     8AL1(ALPHA)  S-Z   ALPHABETIC\n         DC     6AL1(OTHER)\n         DC    10AL1(NUMBR)  0-9   NUMERIC\n         DC     6AL1(OTHER)\n*----------------------------------------------------------------------\n*        CORRESPONDENCE BETWEEN CHARACTERS AND CATEGORIES:\n*              SCAN FOR DELIMITER BETWEEN PARAMETERS\n*              TRANSLATE-AND-TEST TABLE\n*----------------------------------------------------------------------\nDELIMITR DS    0CL256\n         DC    64AL1(OTHER)\n         DC      AL1(BLANK)  ' '   BLANK\n         DC    26AL1(OTHER)\n         DC      AL1(FIELD)  $     NATIONAL\n         DC    15AL1(OTHER)\n         DC      AL1(COMMA)  ,     COMMA\n         DC    15AL1(OTHER)\n         DC     2AL1(FIELD)  #@    NATIONAL\n         DC    68AL1(OTHER)\n         DC     9AL1(FIELD)  A-I   ALPHABETIC\n         DC     7AL1(OTHER)\n         DC     9AL1(FIELD)  J-R   ALPHABETIC\n         DC     8AL1(OTHER)\n         DC     8AL1(FIELD)  S-Z   ALPHABETIC\n         DC     6AL1(OTHER)\n         DC    10AL1(FIELD)  0-9   NUMERIC\n         DC     6AL1(OTHER)\n*----------------------------------------------------------------------\n*        SYNTACTIC SIGNIFICANCE:\n*              MATRIX ROW NUMBERS;\n*              ACTION INDEX NUMBERS.\n*----------------------------------------------------------------------\nBEGIN    EQU   0                   BEGINNING OF INPUT STRING\nPARM1    EQU   1                   FIRST PARAMETER\nBLNK1    EQU   2                   BLANK DELIMITING FIRST PARAMETER\nCOMA1    EQU   3                   COMMA DELIMITING FIRST PARAMETER\nCOMA2    EQU   4                   COMMA AFTER DELIMITING BLANK\nPARM2    EQU   5                   SECOND PARAMETER\nBLNK2    EQU   6                   BLANK DELIMITING SECOND PARAMETER\nENDP1    EQU   7                   END OF SECOND PARAMETER\nENDP2    EQU   8                   END OF PARAMETER STRING\nDELIM    EQU   9                   DELIMITER ERROR\nABEND    EQU   10                  LOGIC ERROR\n*----------------------------------------------------------------------\n*        CORRESPONDENCE BETWEEN CHARACTER CATEGORIES AND SYNTACTIC\n*        SIGNIFICANCE:\n*              NEW MATRIX ROW NUMBERS;\n*              ACTION INDEXES.\n*----------------------------------------------------------------------\nMATRIX   DS    0XL6,AL1\n*                  BLANK ALPHA NUMBR COMMA ENDOS OTHER\nBEGIN#   DC    AL1(ABEND,PARM1,DELIM,DELIM,DELIM,DELIM)\nPARM1#   DC    AL1(BLNK1,PARM1,PARM1,COMA1,DELIM,DELIM)\nBLNK1#   DC    AL1(ABEND,PARM2,DELIM,COMA2,DELIM,DELIM)\nCOMA1#   DC    AL1(ABEND,PARM2,DELIM,DELIM,DELIM,DELIM)\nCOMA2#   DC    AL1(ABEND,PARM2,DELIM,DELIM,DELIM,DELIM)\nPARM2#   DC    AL1(BLNK2,PARM2,PARM2,DELIM,ENDP1,DELIM)\nBLNK2#   DC    AL1(ABEND,DELIM,DELIM,DELIM,ENDP2,DELIM)\n         EJECT\n         END   ,\n./ ADD NAME=SHOWTSO  0133-85354-92115-1618-000293-000134-000293-$A1019\n         TITLE 'SHOWTSO - SET CLIST VARIABLES WITH SHOW INFO'\n***********************************************************************\n*  NAME:     SHOWTSO                                                  *\n*  FUNCTION: TO INVOKE THE SHOW UTILITY AND CREATE TSO/E CLIST        *\n*            VARIABLES WITH INFORMATION FROM ACF2 AND SYSTEM CONTROL  *\n*            BLOCKS FOR USE BY A TSO/E CLIST.                         *\n*                                                                     *\n*  SYNTAX:   SHOWTSO OPERAND(S)                                       *\n*                                                                     *\n*  NOTE:       OPERANDS MAY BE SPECIFIED SINGLY OR IN PAIR SEPERATED  *\n*              BY AN EQUAL SIGN.   IF AN OPERAND IS NOT EQUATED WITH  *\n*              ANOTHER NAME BY AN '=' THEN THE OPERAND VALUE IS ALSO  *\n*              THE NAME OF THE CLIST VARIABLE TO BE GENERATED.        *\n*              IF AN OPERAND IS SPECIFIED AS OPERAND=NAME THEN THE    *\n*              SPECIFIED NAME WILL BE THE NAME OF THE CLIST VARIABLE. *\n*                                                                     *\n*  OPERANDS:   ALL SUPPORTED VALUES OF THE SHOW PROGRAM.              *\n*                                                                     *\n*  DEPENDENCIES:  TSO/E AND THE SHOW PROGRAM.                         *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n* AUTHOR:      LIONEL DYCK                DOUGLAS H. ADAMS            *\n*              ROCKWELL INTERNATIONAL                                 *\n*              2201 SEAL BEACH BLVD.                                  *\n*              PO BOX 2515                                            *\n*              SEAL BEACH, CALIF  90740                               *\n*              MAIL CODE 110-SE28                                     *\n*              PHONE (310) 797-1125       (310) 797-2618              *\n*              COMNET 797-1125                                        *\n*                                                                     *\n***********************************************************************\n         EJECT                                             *LBD 12/85*\n         PUNCH ' ALIAS SHOWTSO'                            *DHA 04/92*\nSHOWTSO  CSECT                                             *DHA 04/92*\nSHOWTSO  AMODE 31                                          *DHA 04/92*\nSHOWTSO  RMODE ANY                                         *DHA 04/92*\n         REGEQU                                            *DHA 04/92*\n         EJECT                                             *DHA 04/92*\n************************************************************DHA 04/92*\n*              WORK AREA FOR REENTRANCE                    *DHA 04/92*\n************************************************************DHA 04/92*\nWORKAREA DSECT                                             *DHA 04/92*\nSAVE     DS    18F                                         *DHA 04/92*\nIOPLADS  DS    4F                                          *DHA 04/92*\nECBADS   DS    F                                           *DHA 04/92*\n         DS    0F                                          *DHA 04/92*\nPUTBLOK  PUTLINE MF=L              PUTLINE PTPB            *DHA 04/92*\n         BITSW DOIT,END,ERR                                *DHA 04/92*\nSHOWEPA  DS    A                   EPA OF SHOW             *DHA 04/92*\nOPERANDS DS    CL256               INPUT PARAMETERS        *DHA 04/92*\nILENGTH  DS    A                   SHOW INPUT LENGTH       *DHA 04/92*\nVALUE    DS    CL256               SHOW OUTPUT VALUE       *DHA 04/92*\nVALUELEN DS    F                   SHOW OUTPUT LENGTH      *DHA 04/92*\nNAMELEN  DS    F                   LENGTH OF VARIABLE NAME *DHA 04/92*\nVALUEPTR DC    A(VALUE)            A(VARIABLE VALUE)       *DHA 04/92*\nNAMEPTR  DC    A(CLSTNAME)         A(VARIABLE NAME)        *DHA 04/92*\n*                                                          *DHA 04/92*\nOLDCEMSG DS    F'2'                PUTLINE OLD             *DHA 04/92*\nACEMSG   DS    A(CEMSG)            A(PRIMARY MESSAGE)      *DHA 04/92*\nACLSTLEN DS    A(CLSTLEN)          A(TEXT INSERT)          *DHA 04/92*\nCLSTLEN  DS    Y(L'CLSTNAME)       TEXT LENGTH             *DHA 04/92*\nCLSTOFF  DS    Y(CEMSGNM)          TEXT OFFSET             *DHA 04/92*\nCLSTNAME DS    CL8                 NAME OF CLIST VAR       *DHA 04/92*\n*                                                          *DHA 04/92*\nOLDSEMSG DS    F'2'                PUTLINE OLD             *DHA 04/92*\nASEMSG   DS    A(SEMSG)            A(PRIMARY MESSAGE)      *DHA 04/92*\nASHOWLEN DS    A(SHOWLEN)          A(TEXT INSERT)          *DHA 04/92*\nSHOWLEN  DS    Y(L'SHOWNAME)       TEXT LENGTH             *DHA 04/92*\nSHOWOFF  DS    Y(SEMSGNM)          TEXT OFFSET             *DHA 04/92*\nSHOWNAME DS    CL8                 NAME OF SHOW VALUE      *DHA 04/92*\n*                                                          *DHA 04/92*\nCALLSHOW CALL  ,(SHOWNAME,ILENGTH,VALUE,VALUELEN),VL,MF=L  *DHA 04/92*\nCALLVACC CALL  ,(ECODE,NAMEPTR,NAMELEN,VALUEPTR,VALUELEN,  *DHA 04/92* *\n               TOKEN),VL,MF=L                              *DHA 04/92*\nWORKSIZE EQU   *-WORKAREA                                  *DHA 04/92*\n         EJECT                                             *DHA 04/92*\nSHOWTSO  CSECT                                             *DHA 04/92*\n         USING *,R15                                       *DHA 04/92*\n         MODID ,                                           *DHA 04/92*\n         SAVE  (14,12)             SAVE REGISTERS          *DHA 04/92*\n         LR    R12,R15                                     *DHA 04/92*\n         DROP  R15                                         *DHA 04/92*\n         USING SHOWTSO,R12                                 *DHA 04/92*\n         LR    R11,R1              SAVE PARM ADDRESS       *DHA 04/92*\n         GETMAIN RU,LV=WORKSIZE    GET WORK AREA           *DHA 04/92*\n         LR    R2,R1               ZERO OUT WORK AREA      *DHA 04/92*\n         L     R3,=A(WORKSIZE)                             *DHA 04/92*\n         SR    R5,R5                                       *DHA 04/92*\n         MVCL  R2,R4                                       *DHA 04/92*\n         ST    R13,4(R1)           CHAIN SAVE AREAS        *DHA 04/92*\n         ST    R1,8(R13)                                   *DHA 04/92*\n         LR    R13,R1                                      *DHA 04/92*\n         USING WORKAREA,R13                                *DHA 04/92*\n         LA    R2,IOPLADS          POINT TO IOPL           *DHA 04/92*\n         USING IOPL,R2                                     *DHA 04/92*\n         L     R3,4(,R11)          COPY A(UPT)             *DHA 04/92*\n         ST    R3,IOPLUPT                                  *DHA 04/92*\n         L     R3,12(,R11)         COPY A(ECT)             *DHA 04/92*\n         ST    R3,IOPLECT                                  *DHA 04/92*\n         L     R3,ECBADS           POINT TO ECB            *DHA 04/92*\n         ST    R3,IOPLECB                                  *DHA 04/92*\n         DROP  R2                                          *DHA 04/92*\n         EJECT\n         L     R3,0(,R11)          -> COMMAND BUFFER       *DHA 04/92*\n         LH    R1,2(R3)           LOAD OFFSET TO 1ST OPER\n         LH    R2,0(R3)           LOAD LENGTH\n         SR    R2,R1              GET LEN\n         SH    R2,=H'04'          LESS HEADER\n         LA    R3,4(R3)           -> PAST HEADER\n         AR    R3,R1              -> 1ST OPERAND\n         BCTR  R2,R0              LESS 1 FOR MVC            *LBD 05/89*\n         EX    R2,MOVEOPER        MOVE OPERANDS\n         EJECT\n         ICM   R0,15,=V(SHOW)      GET POINTER TO SHOW     *DHA 04/92*\n         BNZ   STSHOW              BRANCH IF RESOLVED      *DHA 04/92*\n         LOAD  EP=SHOW\nSTSHOW   DS    0H                                          *DHA 04/92*\n         ST    R0,SHOWEPA\n         OC    OPERANDS,BLANKS    SET UPPER CASE\n         LA    R5,OPERANDS\n         LR    R7,R5\n         AR    R7,R2              -> END OF DATA\n         MVC   CLSTNAME,BLANKS    INITIALIZE CLSTNAME\n         MVC   SHOWNAME,BLANKS    INITIALIZE SHOWNAME\n         LA    R4,SHOWNAME\nLOOP1    DS    0H\n         IFON  END,EXIT\n         CLI   0(R5),C'='         START OF CLIST NAME ?\n         BE    LOOPP              YES\n         CLI   0(R5),C' '         BLANK\n         BE    INCR2              YES\n         MVC   0(1,R4),0(R5)      MOVE CHAR OF NAME\n         LA    R4,1(R4)\n         SETON DOIT\nINCR     DS    0H\n         LA    R5,1(R5)           BUMP R5\n         CR    R5,R7              AT END ?\n         BNH   LOOP1              NO\n         IFON  DOIT,PROCESS\n         SETON END\n         B     EXIT\nINCR2    DS    0H\n         IFON  DOIT,PROCESS\n         B     INCR\n         EJECT\nLOOPP    DS    0H\n         LA    R4,CLSTNAME\n         B     INCR\n         EJECT\nPROCESS  DS    0H\n         SETOF DOIT\n         CLI   CLSTNAME,C' '\n         BNE   SKMV\n         MVC   CLSTNAME,SHOWNAME\nSKMV     DS    0H\n         LA    R1,SHOWNAME+7      -> END OF SHOWNAME\n         LA    R2,8               SET LEN\nSCKLEN   CLI   0(R1),C' '         END OF DSN\n         BNE   SETLEN\n         BCTR  R1,R0              LESS 1\n         BCT   R2,SCKLEN\nSETLEN   ST    R2,NAMELEN\n         LA    R1,L'VALUE\n         ST    R1,ILENGTH\n         L     R15,SHOWEPA         SHOW ENTRY POINT\n         LA    R8,SHOWNAME         SHOW VALUE NAME         *DHA 04/92*\n         LA    R9,ILENGTH          SHOW INPUT LENGTH       *DHA 04/92*\n         LA    R10,VALUE           SHOW OUTPUT VALUE       *DHA 04/92*\n         LA    R11,VALUELEN        SHOW OUTPUT LENGTH      *DHA 04/92*\n         CALL  (15),((R8),(R9),(R10),(R11)),VL,            *DHA 04/92* *\n               MF=(E,CALLSHOW)                             *DHA 04/92*\n         CH    R15,=H'04'\n         BNH   SETVAR\n         LA    R0,2                NUMBER OF MSG SEGMENTS  *DHA 04/92*\n         ST    R0,OLDSEMSG                                 *DHA 04/92*\n         LA    R0,SEMSG            A(PRIMARY MESSAGE)      *DHA 04/92*\n         ST    R0,ASEMSG                                   *DHA 04/92*\n         LA    R0,SHOWLEN          A(TEXT INSERT)          *DHA 04/92*\n         ST    R0,ASHOWLEN                                 *DHA 04/92*\n         LA    R0,L'SHOWNAME       TEXT LENGTH             *DHA 04/92*\n         STH   R0,SHOWLEN                                  *DHA 04/92*\n         LA    R0,SEMSGNM          TEXT OFFSET             *DHA 04/92*\n         STH   R0,SHOWOFF                                  *DHA 04/92*\n         PUTLINE PARM=PUTBLOK,OUTPUT=(OLDSEMSG),           *DHA 04/92* *\n               MF=(E,IOPLADS)                              *DHA 04/92*\n         SETON ERR\n         LA    R4,SHOWNAME\n         MVC   CLSTNAME,BLANKS\n         MVC   SHOWNAME,BLANKS\n         B     INCR\n         EJECT\nSETVAR   DS    0H\n         SPACE 1\n         CLC   CLSTNAME,SHOWNAME  SAME NAME ?\n         BE    DOCLST             YES\n         LA    R1,CLSTNAME+7\n         LA    R2,8\nVLP1     CLI   0(R1),C' '         LAST SIGNIFICANT CHAR\n         BNE   SETVLP1\n         BCTR  R1,R0\n         BCT   R2,VLP1\nSETVLP1  ST    R2,NAMELEN\n         SPACE 1\nDOCLST   DS    0H                                          *LBD 12/85*\n         L     R15,CVTPTR       -> CVT\n         USING CVTMAP,R15\n         L     R15,CVTTVT         ACCESS THE TSVT\n         DROP  R15\n         USING TSVT,R15\n         TM    TSVTVACC,X'80'     31-BIT ADDRESS ?          *LBD 12/88*\n         BZ    CALLPTGT           NO                        *LBD 12/88*\n         L     R1,BIT31           LOAD 31-BIT ADDRESS       *LBD 12/88*\n         BSM   R0,R1              SET MODE TO 31-BIT        *LBD 12/88*\nBIT31    DC    A(CALLPTGT+X'80000000')                      *LBD 12/88*\nCALLPTGT DS    0H                                           *LBD 12/88*\n         L     R15,TSVTVACC\n         DROP  R15\n*\n         LA    R0,CLSTNAME         A(VARIABLE NAME)        *DHA 04/92*\n         ST    R0,NAMEPTR                                  *DHA 04/92*\n         LA    R0,VALUE            A(VARIABLE VALUE)       *DHA 04/92*\n         ST    R0,VALUEPTR                                 *DHA 04/92*\n         LA    R8,NAMEPTR          A(VARIABLE NAME)        *DHA 04/92*\n         LA    R9,NAMELEN          LENGTH OF VARIABLE      *DHA 04/92*\n         LA    R10,VALUEPTR        A(VARIABLE VALUE)       *DHA 04/92*\n         LA    R11,VALUELEN        LENGTH OF VARIABLE VALUE*DHA 04/92*\n         CALL  (15),(ECODE,(R8),(R9),(R10),(R11),TOKEN),   *DHA 04/92* *\n               VL,MF=(E,CALLVACC)                          *DHA 04/92*\n         LA    R1,LTR2            LOAD R1 WITH 24-BIT ADDR  *LBD 12/88*\n         BSM   R0,R1              AND RETURN TO 24-BIT      *LBD 12/88*\nLTR2     LTR   R15,R15\n         BZ    RET\n         LA    R0,2                NUMBER OF MSG SEGMENTS  *DHA 04/92*\n         ST    R0,OLDCEMSG                                 *DHA 04/92*\n         LA    R0,CEMSG            A(PRIMARY MESSAGE)      *DHA 04/92*\n         ST    R0,ACEMSG                                   *DHA 04/92*\n         LA    R0,CLSTLEN          A(TEXT INSERT)          *DHA 04/92*\n         ST    R0,ACLSTLEN                                 *DHA 04/92*\n         LA    R0,L'CLSTNAME       TEXT LENGTH             *DHA 04/92*\n         STH   R0,CLSTLEN                                  *DHA 04/92*\n         LA    R0,CEMSGNM          TEXT OFFSET             *DHA 04/92*\n         STH   R0,CLSTOFF                                  *DHA 04/92*\n         PUTLINE PARM=PUTBLOK,OUTPUT=(OLDCEMSG),           *DHA 04/92* *\n               MF=(E,IOPLADS)                              *DHA 04/92*\n         SETON ERR\nRET      LA    R4,SHOWNAME\n         MVC   CLSTNAME,BLANKS\n         MVC   SHOWNAME,BLANKS\n         MVC   VALUE,BLANKS\n         B     INCR\n         EJECT\nEXIT     DS    0H\n         ICM   R0,15,=V(SHOW)      GET POINTER TO SHOW     *DHA 04/92*\n         BNZ   NODELETE            BRANCH IF RESOLVED      *DHA 04/92*\n         DELETE EP=SHOW\nNODELETE DS    0H                                          *DHA 04/92*\n         SR    R15,R15\n         IFOFF ERR,EXIT0\n         LA    R15,8\nEXIT0    DS    0H\n         LR    R1,R13              UNCHAIN SAVE AREAS      *DHA 04/92*\n         L     R13,4(,R1)                                  *DHA 04/92*\n         FREEMAIN RU,LV=WORKSIZE,A=(1)  FREE WORKAREA      *DHA 04/92*\n         RETURN (14,12),RC=0                               *DHA 04/92*\nMOVEOPER MVC   OPERANDS(0),0(R3)  ***** EXECUTED\n         DROP  R13                                         *DHA 04/92*\n         DROP  R12                                         *DHA 04/92*\n         EJECT\n         LTORG\n         SPACE 2\nCEMSG    DC    AL2(CEMSGL),AL2(0)\nCEMSGTXT DC    C' ERROR SETTING CLIST VARIABLE '\nCEMSGNM  EQU   *-CEMSGTXT\nCEMSGL   EQU   *-CEMSG\n         SPACE 1\nSEMSG    DC    AL2(SEMSGL),AL2(0)\nSEMSGTXT DC    C' INVALID INFORMATION REQUEST FOR VALUE '\nSEMSGNM  EQU   *-SEMSGTXT\n         DC    C' SEE HELP FOR VALID KEYWORD OPTIONS'\nSEMSGL   EQU   *-SEMSG\n         SPACE 2\nBLANKS   DC    CL256' '\nECODE    DC    A(TSVEUPDT)      ENTRY CODE\nTOKEN    DC    F'0'\n         EJECT\n         IKJTSVT\n         EJECT\n         IKJIOPL ,\n         EJECT\n         CVT   DSECT=YES,LIST=YES\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "EXEC": {"ttr": 1540, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x93!?\\x00\\x93!?\\t\\x00\\x01c\\x01c\\x00\\x00\\xd9\\xd6\\xc3\\xd2\\xe6\\xc5\\xd3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-08-01T00:00:00", "modifydate": "1993-08-01T09:00:00", "lines": 355, "newlines": 355, "modlines": 0, "user": "ROCKWEL"}, "text": "./ ADD NAME=RSHOWTSO\n/*REXX******************************************************************\n*                                                                      *\n* Display system information from various sources:                     *\n*                                                                      *\n*    SHOWREXX function                                                 *\n*    RATJESUP command (JES3)                                           *\n*    REXX (miscellaneous instructions)                                 *\n*    SYSVAR function (REXX/TSO)                                        *\n*    ISPF (VGET service)                                               *\n*                                                                      *\n* Douglas H. Adams                                                     *\n* Mail Code 110-SE28                                                   *\n* Rockwell International Corporation                                   *\n* 2201 Seal Beach Boulevard                                            *\n* P. O. Box 2515                                                       *\n* Seal Beach, California 90740-1515                                    *\n*                                                                      *\n* Internet:  $A1019@WCC1A.Rockwell.Com                                 *\n*                                                                      *\n* (310) 797-2618                                                       *\n*                                                                      *\n* October 30, 1992                                                     *\n*                                                                      *\n***********************************************************************/\n\nTrace \"Off\"\n\"NEWSTACK\"\nAddress ISPEXEC\n\"TBCREATE RSHOWTSO NAMES(ID VALUE) NOWRITE REPLACE\"\n\n/***********************************************************************\n* Obtain data via SHOWREXX function                                    *\n***********************************************************************/\nId = copies(\"*\",8)\nValue = right(center(\" Information from SHOW \",80,\"*\"),70)\n\"TBADD RSHOWTSO MULT(125)\"\n\nQueue \"ACCT\"\nQueue \"ACCTNO\"\nQueue \"ACCTNO#\"\nQueue \"ACF2ACCT\"\nQueue \"BCPFMID\"\nQueue \"BCPLEVEL\"\nQueue \"CENTER\"\nQueue \"COMPMAIL\"\nQueue \"CPU\"\nQueue \"CPUMODEL\"\nQueue \"CPUSER\"\nQueue \"CPUVER\"\nQueue \"CRTCD\"\nQueue \"DEPT\"\nQueue \"DEST\"\nQueue \"DFPLEVEL\"\nQueue \"FDS\"\nQueue \"FDS#\"\nQueue \"FRAMES\"\nQueue \"GROUP\"\nQueue \"GRP\"\nQueue \"HOMEDIV\"\nQueue \"JOBFUNC\"\nQueue \"JOBNAME\"\nQueue \"LINES\"\nQueue \"LOC\"\nQueue \"MAIL\"\nQueue \"NAME\"\nQueue \"OPSYS\"\nQueue \"OS\"\nQueue \"OSLEV\"\nQueue \"OSREL\"\nQueue \"PHONE\"\nQueue \"REFERVOL\"\nQueue \"SHOWLEV\"\nQueue \"SYSNAME\"\nQueue \"TERMINAL\"\nQueue \"TSOOPER\"\nQueue \"TSOUNIT\"\nQueue \"UID\"\nQueue \"USERID\"\n\nDo queued()\n   Parse pull id .\n   Value = showrexx(id)\n   \"TBADD RSHOWTSO\"\n   End\n\n/***********************************************************************\n* Obtain data via SHOWREXX function (not supported by IBM)             *\n***********************************************************************/\nId = copies(\"*\",8)\nValue = right(center(\" Information from SHOW (Unsupported by IBM) \",,\n        80,\"*\"),70)\n\"TBADD RSHOWTSO MULT(120)\"\n\nQueue \"BDTNODE\"\nQueue \"CLPA\"\nQueue \"CVIO\"\nQueue \"IPLDATE\"\nQueue \"IPLTIME\"\nQueue \"JOBID\"\nQueue \"LPAR\"\nQueue \"PRTY\"\nQueue \"REALSTOR\"\nQueue \"REGION\"\nQueue \"SMFID\"\nQueue \"SMS\"\nQueue \"SWA\"\nQueue \"SYSID\"\nQueue \"SYSRES\"\nQueue \"VERID\"\n\nDo queued()\n   Parse pull id .\n   Value = showrexx(id)\n   \"TBADD RSHOWTSO\"\n   End\n\n/***********************************************************************\n* Obtain data from JES3 via RATJESUP                                   *\n***********************************************************************/\nId = copies(\"*\",8)\nValue = right(center(\" Information from JES3/RATJESUP \",80,\"*\"),70)\n\"TBADD RSHOWTSO\"\n\nDo n = 1 to 6\n   Id = \"MAIN\"n\n   \"SELECT CMD(RATJESUP\" id\")\"\n   If rc = 4\n   Then leave\n   Value = d2c(rc,4)\n   Suffix = \"system\" substr(value,2,1) ,\n            word(\"? ASP global local\",pos(substr(value,3,1),\"AGL\")+1) ,\n            word(\"? IPLed notIPLed\",pos(right(value,1),\"INU\")+1)\n   Value = value \"(\"strip(suffix)\")\"\n   \"TBADD RSHOWTSO\"\n   End\n\nId = \"RC\"\n\"SELECT CMD(RATJESUP)\"\nValue = rc \"(\"word(\"global local down ?\",min(rc/4+1,4))\")\"\n\"TBADD RSHOWTSO\"\n\nId = \"VER\"\n\"SELECT CMD(RATJESUP VER)\"\nValue = rc \"(version \"left(rc,1)\".\"substr(rc,2,1)\".\"right(rc,1)\")\"\n\"TBADD RSHOWTSO\"\n\n/***********************************************************************\n* Obtain data from REXX                                                *\n***********************************************************************/\nId = copies(\"*\",8)\nValue = right(center(\" Information from REXX \",80,\"*\"),70)\n\"TBADD RSHOWTSO\"\n\nParse value date(\"B\")\";\"date(\"C\")\";\"date(\"D\")\";\" ||,\n            date(\"E\")\";\"date(\"J\")\";\"date(\"M\")\";\" ||,\n            date(\"N\")\";\"date(\"O\")\";\"date(\"S\")\";\" ||,\n            date(\"U\")\";\"date(\"W\")\";\"             ||,\n            time(\"C\")\";\"time(\"H\")\";\"time(\"L\")\";\" ||,\n            time(\"M\")\";\"time(\"N\")\";\"time(\"S\"),\n      with  dateb \";\" datec \";\" dated \";\" datee \";\" datej \";\" datem \";\",\n            daten \";\" dateo \";\" dates \";\" dateu \";\" datew \";\",\n            timec \";\" timeh \";\" timel \";\" timem \";\" timen \";\" times\n\nId = \"DATE(B)\"\nValue = dateb \"(\"comma(dateb) \"days since January 1, 0001)\"\n\"TBADD RSHOWTSO\"\n\nId = \"DATE(C)\"\nValue = datec \"(\"comma(datec),\n        \"days since January 1,\" left(date(\"Standard\"),2)\"00)\"\n\"TBADD RSHOWTSO\"\n\nId = \"DATE(D)\"\nValue = dated \"(days since January 1,\" left(date(\"Standard\"),4)\")\"\n\"TBADD RSHOWTSO\"\n\nId = \"DATE(E)\"\nValue = datee \"(dd/mm/yy)\"\n\"TBADD RSHOWTSO\"\n\nId = \"DATE(J)\"\nValue = datej \"(yyddd)\"\n\"TBADD RSHOWTSO\"\n\nId = \"DATE(M)\"\nValue = datem\n\"TBADD RSHOWTSO\"\n\nId = \"DATE(N)\"\nValue = daten\n\"TBADD RSHOWTSO\"\n\nId = \"DATE(O)\"\nValue = dateo \"(yy/mm/dd)\"\n\"TBADD RSHOWTSO\"\n\nId = \"DATE(S)\"\nValue = dates \"(yyyymmdd)\"\n\"TBADD RSHOWTSO\"\n\nId = \"DATE(U)\"\nValue = dateu \"(mm/dd/yy)\"\n\"TBADD RSHOWTSO\"\n\nId = \"DATE(W)\"\nValue = datew\n\"TBADD RSHOWTSO\"\n\nId = \"TIME(C)\"\nValue = timec\n\"TBADD RSHOWTSO\"\n\nId = \"TIME(H)\"\nValue = timeh \"(hours since midnight)\"\n\"TBADD RSHOWTSO\"\n\nId = \"TIME(L)\"\nValue = timel \"(hh:mm:ss.uuuuuu)\"\n\"TBADD RSHOWTSO\"\n\nId = \"TIME(M)\"\nValue = timem \"(\"comma(timem) \"minutes since midnight)\"\n\"TBADD RSHOWTSO\"\n\nId = \"TIME(N)\"\nValue = timen \"(hh:mm:ss)\"\n\"TBADD RSHOWTSO\"\n\nId = \"TIME(S)\"\nValue = times \"(\"comma(times) \"seconds since midnight)\"\n\"TBADD RSHOWTSO\"\n\nId = \"USERID\"\nValue = userid()\n\"TBADD RSHOWTSO\"\n\nParse version value\nId = \"VERSION\"\n\"TBADD RSHOWTSO\"\n\n/***********************************************************************\n* Obtain data from REXX/TSO SYSVAR function                            *\n***********************************************************************/\nId = copies(\"*\",8)\nValue = right(center(\" Information from REXX/TSO SYSVAR \",80,\"*\"),70)\n\"TBADD RSHOWTSO\"\n\nQueue \"SYSCPU\" \"seconds\"\nQueue \"SYSHSM\"\nQueue \"SYSLRACF\"\nQueue \"SYSLTERM\" \"lines\"\nQueue \"SYSPREF\"\nQueue \"SYSPROC\"\nQueue \"SYSRACF\"\nQueue \"SYSSRV\" \"service units\"\nQueue \"SYSTSOE\"\nQueue \"SYSUID\"\nQueue \"SYSWTERM\" \"columns\"\n\nDo queued()\n   Parse pull id suffix\n   Value = strip(sysvar(id))\n   If wordpos(id,\"SYSHSM SYSLRACF SYSTSOE\") \u00ac= 0\n   Then suffix = \"version\" left(value,1)\".\"format(substr(value,2,2)) ||,\n                 \".\"right(value,1) suffix\n   If id == \"SYSSRV\"\n   Then suffix = comma(value) suffix\n   If suffix \u00ac= \"\"\n   Then value = value \"(\"strip(suffix)\")\"\n   \"TBADD RSHOWTSO\"\n   End\n\n/***********************************************************************\n* Obtain data from ISPF via VGET                                       *\n***********************************************************************/\nId = copies(\"*\",8)\nValue = right(center(\" Information from ISPF \",80,\"*\"),70)\n\"TBADD RSHOWTSO\"\n\nQueue \"ZACCTNUM\"\nQueue \"ZCOLORS\"\nQueue \"ZDATE\"\nQueue \"ZDAY\"\nQueue \"ZENVIR\"\nQueue \"ZHILITE\"\nQueue \"ZJDATE\"\nQueue \"ZKEYS\"\nQueue \"ZLOGON\"\nQueue \"ZMONTH\"\nQueue \"ZPDFREL\"\nQueue \"ZPREFIX\"\nQueue \"ZSCREEND\" \"rows\"\nQueue \"ZSCREENW\" \"columns\"\nQueue \"ZSCRMAXD\" \"rows\"\nQueue \"ZSCRMAXW\" \"columns\"\nQueue \"ZSTDYEAR\"\nQueue \"ZSYSID\"\nQueue \"ZTERM\"\nQueue \"ZTIME\"\nQueue \"ZUSER\"\nQueue \"ZYEAR\"\n\nDo queued()\n   Parse pull id suffix\n   \"VGET\" id\n   Value = value(id)\n   If datatype(value,\"W\") & left(value,1) == \"0\" & suffix \u00ac== \"\"\n   Then suffix = format(value) suffix\n   If id == \"ZENVIR\"\n   Then suffix = left(value,8)\"/\"strip(substr(value,9,8))\"/\" || ,\n                 substr(value,17)\n   If suffix \u00ac= \"\"\n   Then value = value \"(\"strip(suffix)\")\"\n   \"TBADD RSHOWTSO\"\n   End\n\n/***********************************************************************\n* Clean up and display information                                     *\n***********************************************************************/\nAddress TSO \"DELSTACK\"\n\"TBTOP RSHOWTSO\"\n\"TBDISPL RSHOWTSO PANEL(RSHOWTSO)\"\nDo while rc = 0\n   \"CONTROL DISPLAY SAVE\"\n   \"TBSKIP RSHOWTSO NUMBER(\"ztdtop\") NOREAD\"\n   Parse upper var zcmd command id .\n   If abbrev(\"LOCATE\",command)\n   Then do\n      If id = \"\"\n      Then id = save_id\n      Else do\n         Id = id\"*\"\n         Save_id = id\n         \"TBTOP RSHOWTSO\"\n         End\n      \"TBSCAN RSHOWTSO ARGLIST(ID) NOREAD\"\n      If rc = 8\n      Then \"TBSKIP RSHOWTSO NUMBER(\"ztdtop\") NOREAD\"\n      End\n   \"CONTROL DISPLAY RESTORE\"\n   \"TBDISPL RSHOWTSO PANEL(RSHOWTSO)\"\n   End\n\n/***********************************************************************\n* Terminate                                                            *\n***********************************************************************/\nExit\n\n/***********************************************************************\n* Insert commas into numbers (nnnnnnnnn -> nnn,nnn,nnn)                *\n***********************************************************************/\nComma:\nReturn right(translate(\"12304560789\",\",\"right(arg(1),9),\"0123456789\"),,\n       (length(arg(1))*4-1)%3)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "HELP": {"ttr": 1547, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x93!?\\x00\\x93!?\\t\\x00\\x00\\x99\\x00\\x99\\x00\\x00\\xd9\\xd6\\xc3\\xd2\\xe6\\xc5\\xd3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-08-01T00:00:00", "modifydate": "1993-08-01T09:00:00", "lines": 153, "newlines": 153, "modlines": 0, "user": "ROCKWEL"}, "text": "./ ADD NAME=SHOWREXX 0100-92118-92118-1259-000018-000019-000000-$A1019\n)F Function -\n   SHOWREXX is a REXX function, similar to SYSVAR, which returns\n   information about MVS, TSO/E, your ACF2 profile, etc.\n)X Syntax -\n   SHOWREXX(id)\n\n   Required  - id\n   Default   - none\n   Example 1 - Value = showrexx(\"acct\")\n   Example 2 - Id = \"acct\"\n               Value = showrexx(id)\n)O Operands -\n)P id - is a keyword which specifies the information desired. It may be\n        specified in uppercase or lowercase. An error in the argument\n        will cause a syntax error with an error code of 40. A message\n        will also be issued.\n)I SHOWUSER\n)I SYSSHOW\n./ ADD NAME=SHOWSPF  0100-92118-92118-1259-000024-000019-000000-$A1019\n)F Function -\n   SHOWSPF is a an ISPF program which returns information about MVS,\n   TSO/E, your ACF2 profile, etc.\n)X Syntax -\n   ISPEXEC SELECT PGM(SHOWSPF) PARM(id,value)\n\n   Required - id\n              value\n   Default  - none\n   Example  - ISPEXEC SELECT PGM(SHOWSPF) PARM(ACCT,VALUE)\n              VGET VALUE\n   Return codes -\n               0: Normal completion.\n               8: Id not recognized.\n              12: Argument length error.\n              16: System control block failed validity check.\n              20: Argument syntax error.\n)O Operands -\n)P id - is a keyword which specifies the information desired. It may be\n        specified in uppercase or lowercase.\n)P value - is the name of an ISPF variable to receive the specified\n           information.\n)I SHOWUSER\n)I SYSSHOW\n./ ADD NAME=SHOWTSO  0100-92118-92118-1300-000018-000064-000000-$A1019\n)F Function -\n   SHOWTSO is a TSO command which returns information about MVS, TSO/E,\n   your ACF2 profile, etc.\n)X Syntax -\n  SHOWTSO {id | id=value | id id ... | id=value id=value ...}\n\n   Required  - id\n   Default   - none\n   Example 1 - SHOWTSO ACCT\n   Example 2 - SHOWTSO ACCT=VALUE\n)O Operands -\n)P id - is a keyword which specifies the information desired. It may be\n        specified in uppercase or lowercase.\n)P value - is the name of a CLIST or REXX variable to receive the value\n           specified by id. If value is omitted, the variable name is\n           the same as id.\n)I SHOWUSER\n)I SYSSHOW\n./ ADD NAME=SHOWUSER 0100-92118-92118-1554-000052-000057-000000-$A1019\n\n  The following keywords are supported for id:\n\n))ACCT        -     Rockwell Job Card Account (with FDS #)\n))ACCTNO      -     Rockwell Job Card Account (no FDS #)\n))ACCTNO#     -     Rockwell ACF2 User's Account (no FDS #)\n))ACF2ACCT    -     ACF2 User's Default Accounting Field\n))BCPFMID     -     Basic Control Program FMID\n))BCPLEVEL    -     Basic Control Program Product Name\n))CENTER      -     Rockwell Center Name\n))COMPMAIL    -     Rockwell ACF2 User's Computer Mail Code\n))CPU         -     System Name from SYS1.PARMLIB(IEASYSxx)\n))CPUMODEL    -     CPU Model (e.g., 3090)\n))CPUSER      -     CPU Serial(s) (Maximum 16)\n))CPUVER      -     CPU Version\n))CRTCD       -     Rockwell Job Card CRT Code\n))DEPT        -     Rockwell ACF2 User's Department\n))DEST        -     TSO User's Default Destination\n))DFPLEVEL    -     Data Facility Product Level\n))FDS         -     Rockwell Job Card FDS #\n))FDS#        -     Rockwell ACF2 User's FDS #\n))FRAMES      -     Rockwell Job Card CRT Frame Limit\n))GROUP       -     Rockwell ACF2 User's Group (in Dept)\n))GRP         -     Rockwell ACF2 User's Group (in Dept)\n))HOMEDIV     -     Rockwell ACF2 User's Home Division\n))JOBFUNC     -     Rockwell ACF2 User's Job Function Code\n))JOBNAME     -     Job Name\n))LINES       -     Rockwell Job Card FORTRAN Line Limit\n))LOC         -     Rockwell ACF2 User's Physical Location\n))MAIL        -     Rockwell ACF2 User's Mail Code\n))NAME        -     ACF2 User's Name\n))OPSYS       -     Operating System (MVS/xxx)\n))OS          -     Operating System (xxx)\n))OSLEV       -     Operating System (xxx)\n))OSREL       -     Operating System Release Number\n))PHONE       -     ACF2 User's Phone Number\n))REFERVOL    -     Volume Serial of Dataset userid.REFER\n))SHOWLEV     -     Level of SHOW (Date and Time)\n))SYSNAME     -     System Name from SYS1.PARMIB(IEASYSxx)\n))TERMINAL    -     Terminal ID\n))TSOOPER     -     TSO OPERATOR Authority (YES or NO)\n))TSOUNIT     -     TSO User's Default Unit Name\n))UID         -     Rockwell ACF2 User's UID String\n))USERID      -     User ID\n  ---------------------------------------------------------------------\n  The following information is derived from control blocks or fields\n  which IBM does not consider programming interfaces. This information\n  may therefore be unavailable in the future.\n  ---------------------------------------------------------------------\n))JOBID       -     Job ID (JOBnnnnn)\n))PRTY        -     Job Scheduling Priority\n))REGION      -     Region Size (nK)\n./ ADD NAME=SYSSHOW  0100-92118-92118-1554-000017-000017-000000-$A1019\n  ---------------------------------------------------------------------\n  The following information is for systems programmers only. The\n  information is not officially available.\n  ---------------------------------------------------------------------\n))BDTNODE     -     MVS/BDT Node Name\n))CLPA        -     CLPA Specified at last IPL (YES or NO)\n))CVIO        -     CVIO Specified at IPL (YES or NO)\n))IPLDATE     -     Last IPL Date\n))IPLTIME     -     Last IPL Time\n))LPAR        -     Logical Partition Mode (YES or NO)\n))REALSTOR    -     Real Storage Available at Last IPL\n))SMFID       -     SMF ID from SYS1.PARMLIB(SMFPRMxx)\n))SMS         -     Status of SMS (ON or OFF)\n))SWA         -     SWA Location (ABOVE or BELOW)\n))SYSID       -     System ID from SYS1.PARMLIB(SMFPRMxx)\n))SYSRES      -     System Residence Volume Serial\n))VERID       -     Installation System Version (CVTVERID)\n./ ADD NAME=SYSXSHOW 0100-92118-92118-1300-000018-000019-000000-$A1019\n)F Function -\n   &SYSXSHOW is a CLIST function which returns information about MVS,\n   TSO/E, your ACF2 profile, etc.\n)X Syntax -\n   &SYSXSHOW(id)\n\n   Required  - id\n   Default   - none\n   Example 1 - SET &VALUE = &SYSXSHOW(ACCT)\n   Example 2 - SET &ID = ACCT\n               SET &VALUE = &SYSXSHOW(&ID)\n)O Operands -\n)P id - is a keyword which specifies the information desired. It may be\n        specified in uppercase or lowercase. An error in the argument\n        will cause an ERROR condition with a return code of 604. A\n        message will also be issued.\n)I SHOWUSER\n)I SYSSHOW\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "LINK": {"ttr": 1795, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x93!?\\x00\\x93!?\\t\\x00\\x00\\x07\\x00\\x07\\x00\\x00\\xd9\\xd6\\xc3\\xd2\\xe6\\xc5\\xd3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-08-01T00:00:00", "modifydate": "1993-08-01T09:00:00", "lines": 7, "newlines": 7, "modlines": 0, "user": "ROCKWEL"}, "text": " INCLUDE OBJECT(SHOW)\n INCLUDE OBJECT(IKJCT44B)\n INCLUDE OBJECT(IRXFLOC)\n INCLUDE OBJECT(SHOWREXX)\n INCLUDE OBJECT(SHOWSPF)\n INCLUDE OBJECT(SHOWTSO)\n NAME SHOW(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MACROS": {"ttr": 1797, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x93!?\\x00\\x93!?\\t\\x00\\x00\\xb1\\x00\\xb1\\x00\\x00\\xd9\\xd6\\xc3\\xd2\\xe6\\xc5\\xd3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-08-01T00:00:00", "modifydate": "1993-08-01T09:00:00", "lines": 177, "newlines": 177, "modlines": 0, "user": "ROCKWEL"}, "text": "./ ADD NAME=BITSW\n         MACRO\n&LABEL   BITSW   &BIT0,&BIT1,&BIT2,&BIT3,&BIT4,&BIT5,&BIT6,&BIT7,&DSECT\n         LCLC  &#\n&#       SETC  '#'\n         AIF   ('&BIT0' EQ '').A\n&BIT0    EQU   *  .          BIT 0.\n&BIT0&#  EQU   128  .        1... ....      BIT POSITION\n.A       AIF   ('&BIT1' EQ '').B\n&BIT1    EQU   *  .          BIT 1.\n&BIT1&#  EQU   64  .         .1.. ....      BIT POSITION\n.B       AIF   ('&BIT2' EQ '').C\n&BIT2    EQU   *  .          BIT 2.\n&BIT2&#  EQU   32  .         ..1. ....      BIT POSITION\n.C       AIF   ('&BIT3' EQ '').D\n&BIT3    EQU   *  .          BIT 3.\n&BIT3&#  EQU   16  .         ...1 ....      BIT POSITION\n.D       AIF   ('&BIT4' EQ '').E\n&BIT4    EQU   *  .          BIT 4.\n&BIT4&#  EQU   8  .          .... 1...      BIT POSITION\n.E       AIF   ('&BIT5' EQ '').F\n&BIT5    EQU   *  .          BIT 5.\n&BIT5&#  EQU   4  .          .... .1..      BIT POSITION\n.F       AIF   ('&BIT6' EQ '').G\n&BIT6    EQU   *  .          BIT 6.\n&BIT6&#  EQU   2  .          .... ..1.      BIT POSITION\n.G       AIF   ('&BIT7' EQ '').H\n&BIT7    EQU   *  .          BIT 7.\n&BIT7&#  EQU   1  .          .... ...1      BIT POSITION\n.H       ANOP\n         AIF   ('&DSECT' EQ '').I\n&LABEL   DS    XL1  .        BIT BYTE.\n         SPACE\n         MEXIT\n.I       ANOP\n&LABEL   DC    XL1'0' .      BIT BYTE.\n         SPACE\n         MEND\n./ ADD NAME=IFOFF\n         MACRO\n&LABEL   IFOFF &BIT,&BROF,&BRON\n         LCLB  &BL121,&BL122\n         LCLC  &#\n&#       SETC  '#'\n         AIF   ('&BIT' NE '').A\n         MNOTE 1,'OPERAND 1 MISSING - NO GENERATION'\n         MEXIT\n.A       ANOP\n&BL121   SETB  ('&BRON' NE '')\n&BL122   SETB  ('&BROF' NE '')\n         AIF   (&BL121 OR &BL122).AA\n         MNOTE 1,'NO TRANSFER ADDRESS'\n         MEXIT\n.AA      ANOP\n&LABEL   TM    &BIT,&BIT&#  .          TEST FOR BIT.\n         AIF   (NOT &BL122).OTHER\n         BZ    &BROF  .                BRANCH NOT ON.\n         AIF   (&BL121).OTHER\n         SPACE\n         MEXIT\n.OTHER   BO    &BRON  .                BRANCH ON.\n         SPACE\n         MEND\n./ ADD NAME=IFON\n         MACRO\n&LABEL   IFON  &BIT,&BRYES,&BRNO\n         LCLB  &BL121,&BL122\n         LCLC  &#\n&#       SETC  '#'\n         AIF   ('&BIT' NE '').A\n         MNOTE 1,'OPERAND 1 MISSING - NO GENERATION'\n         MEXIT\n.A       ANOP\n&BL121   SETB  ('&BRYES' NE '')\n&BL122   SETB  ('&BRNO' NE '')\n         AIF   (&BL121 OR &BL122).AA\n         MNOTE 1,'NO TRANSFER ADDRESS'\n         MEXIT\n.AA      ANOP\n&LABEL   TM    &BIT,&BIT&#  .          TEST FOR BIT.\n         AIF   (NOT &BL121).TAKNO\n         BO    &BRYES  .               BRANCH ON.\n         AIF   (&BL122).TAKNO\n         SPACE\n         MEXIT\n.TAKNO   ANOP\n         BZ    &BRNO  .                BRANCH NOT ON.\n         SPACE\n         MEND\n./ ADD NAME=REGEQU   0100-82323-82323-1417-000021-000021-000000-$A1238\n         MACRO\n         REGEQU\n***********************************************************************\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n***********************************************************************\n         MEND\n./ ADD NAME=SETOF\n         MACRO\n&LABEL   SETOF &A,&B,&C,&D,&E,&F,&G,&H,&I,&J,&K,&L,&M,&N,&O,&P\n         LCLA  &NU\n         LCLC  &VALUE\n         LCLC  &#\n&#       SETC  '#'\n         AIF   ('&A' NE '').OK\n         MNOTE 5,'MISSING OPERANDS - NO GEN'\n         MEXIT\n.OK      AIF   ('&LABEL' EQ '').B1\n&LABEL   EQU   *\n.B1      ANOP\n&NU      SETA  N'&SYSLIST\n.CHK     AIF   ('&NU' NE '0').LOOP\n         SPACE\n         MEXIT\n.LOOP    ANOP\n&VALUE   SETC  '&SYSLIST(&NU)'\n         NI    &SYSLIST(&NU),255-&VALUE&#\n&NU      SETA  &NU-1\n         AGO   .CHK\n         MEND\n./ ADD NAME=SETON\n         MACRO\n&LABEL   SETON &A,&B,&C,&D,&E,&F,&G,&H,&I,&J,&K,&L,&M,&N,&O,&P\n         LCLA  &NU\n         LCLC  &VALUE\n         LCLC  &#\n&#       SETC  '#'\n         AIF   ('&A' NE '').OK\n         MNOTE 5,'MISSING OPERANDS - NO GEN'\n         MEXIT\n.OK      AIF   ('&LABEL' EQ '').B1\n&LABEL   EQU   *\n.B1      ANOP\n&NU      SETA  N'&SYSLIST\n.CHK     AIF   ('&NU' NE '0').LOOP\n         SPACE\n         MEXIT\n.LOOP    ANOP\n&VALUE   SETC  '&SYSLIST(&NU)'\n         OI    &SYSLIST(&NU),&VALUE&#\n&NU      SETA  &NU-1\n         AGO   .CHK\n         MEND\n./ ADD NAME=XABSM    0100-89168-89168-1749-000019-000019-000000-$A1238\n         MACRO\n&LAB     XABSM &MODE=24\n         AIF   ('&LAB' EQ '').NOLAB CHECK FOR LABEL\n&LAB     DS    0H                  MVS/XA SET MODE MACRO\n.NOLAB   ANOP\n         AIF   ('&MODE' EQ '31').XAON\n         AIF   ('&MODE' EQ '24').XAOFF\n         MNOTE 8,'MODE &MODE INVALID'\n.XAON    ANOP                      GO TO 31 BIT MODE\n         CNOP  2,4                 FORCE FULL WORD ALIGNMENT\n         LA    R1,*+14 .              POINT TO AMODE = 31 CODE\n         O     R1,*+6 .               TURN ON AMODE = 31 BIT\n         BSM   0,R1 .                 BRANCH TO AMODE = 31 CODE\n         DC    X'80000000'         AMODE = 31 BIT\n         AGO   .MACEND\n.XAOFF   LA    R1,*+6 .               POINT TO AMODE = 24 CODE\n         BSM   0,R1 .                 BRANCH TO AMODE = 24 CODE\n.MACEND  ANOP\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PANELS": {"ttr": 1801, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x93!?\\x00\\x93!?\\t\\x00\\x00%\\x00%\\x00\\x00\\xd9\\xd6\\xc3\\xd2\\xe6\\xc5\\xd3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-08-01T00:00:00", "modifydate": "1993-08-01T09:00:00", "lines": 37, "newlines": 37, "modlines": 0, "user": "ROCKWEL"}, "text": "./ ADD NAME=$SHOWTSO 0100-92303-92304-1113-000022-000020-000000-$A1019\n%Tutorial -------------------- System Information -------------------- Tutorial%\n%Command ===>_zcmd                                                             %\n%                                                                              %\n+System information obtained from SHOW, JES3, REXX, and ISPF is displayed.\n+\n+There is a separator line for the information from each of these sources.\n+The information is displayed in columns:\n+   Column one contains the keyword used to obtain the information.\n+   Column two contains the information exactly as obtained.\n+   Column three may contain a brief explanation and/or formatted version of the\n+   information.\n+\n+You may scroll through the information or use the%LOCATE+command.\n+\n+The LOCATE command syntax is:\n+   %LOCATE keyword+\n+\n+The LOCATE command may be repeated by issuing it without a keyword:\n+   %LOCATE+\n+\n+Any abbreviation of LOCATE or \"keyword\" is accepted.\n)End\n./ ADD NAME=RSHOWTSO 0132-89180-92304-1207-000013-000036-000000-$A1019\n)Attr\n @ type(output) intens(high) color(turq)   caps(off)\n + type(output) intens(low)  color(yellow)\n % type(text)   intens(high) color(white)\n)Body\n%----------------------------- System Information -----------------------------%\n%Command ===>_zcmd                                             %Scroll ===>_amt\n)Model\n+id      @value\n)Init\n &zcmd = &z\n .help = $showtso\n)End\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT428/FILE428.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT428", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}