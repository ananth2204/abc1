        TITLE  'AOFMCS'
*PROCESS  USING(NOWARN)
AOFMCS CSECT ,
AOFMCS AMODE 31
AOFMCS RMODE ANY
*---------------------------------------------------------------------*
*- AOFMCS: PROGRAM ENTRY POINT, APF AUTHORIZATION REQUIRED           -*
*-                                                                   -*
*-                                                                   -*
*-                                                                   -*
*-                                                                   -*
*- Function: An example showing how to use the extended console      -*
*-           programming interface to activate a console, deactivate -*
*-           a console, receive messages, process MDB objects, and   -*
*-           listen for console alerts.                              -*
*-                                                                   -*
*-           This example also illustrates use of some other MVS     -*
*-           operations facilities including:                        -*
*-           the MODIFY/STOP interface (using EXTRACT and QEDIT),    -*
*-           CONVCON to see if a console is active,                  -*
*-           MGCRE to issue system commands,                         -*
*-           WTO using the TEXT key,                                 -*
*-           and DOM to delete a held message.                       -*
*-                                                                   -*
*-           This program is intended to be used as an example or    -*
*-           skeleton for use of those services.  It is not intended -*
*-           to provide any other useful function.                   -*
*-                                                                   -*
*-         AOFMCS responds to the following MODIFY commands:         -*
*-                                                                   -*
*-              ACTIVATE <optional console name>                     -*
*-                 to activate its extended console                  -*
*-                                                                   -*
*-              DEACTIVATE                                           -*
*-                 to deactivate its extended console                -*
*-                                                                   -*
*-              RELOAD <optional AOF table name>                     -*
*-                 to reload AOF table                               -*
*-                                                                   -*
*-           Any other modify command will be ignored                -*
*-                                                                   -*
*-         AOFMCS is implemented as a reentrant program.    It must  -*
*-           be APF authorized.  Wherever possible it runs problem   -*
*-           state, key 8.                                           -*
*-                                                                   -*
*- Operation:                                                        -*
*-     initialization                                                -*
*-     main router loop                                              -*
*-       if done, exit                                               -*
*-       if message queued, process all messages                     -*
*-          process all MDBs in the message                          -*
*-            determine object type                                  -*
*-            call appropriate processing routine                    -*
*-       if alert posted, process the alert                          -*
*-          display any alert conditions                             -*
*-          this code    doesn't try to recover from any alert       -*
*-           conditions, it just deactivates the console             -*
*-       if modify or stop queued, process the CIB                   -*
*-          when CIB is a modify, determine command                  -*
*-             when 'RELOAD' reload the AOF table                    -*
*-             when 'ACTIVATE' the console is activated              -*
*-             when 'DEACTIVATE' the console is deactivated          -*
*-             otherwise complain about invalid command              -*
*-          when CIB is a stop, set done flag                        -*
*-          delete the CIB                                           -*
*-                                                                   -*
*- NOTE: This is a re-entrant program, but should be assembled   @P1A-*
*-       without the PARM=RENT option. If PARM=RENT is used,     @P1A-*
*-       the assembler will issue warning messages saying        @P1A-*
*-       "RE-ENTRANT CHECK FAILED".                              @P1A-*
*-       Dynamic variables should be added between the labels    @P1A-*
*-       DYNMODEL and DYNL.                                      @P1A-*
*-                                                                   -*
*---------------------------------------------------------------------*
* begin AR mode linkage convention
       BAKR    R14,0              save regs
       LR      R6,R1              Save parm pointer
       SAC     512                set AR mode
       SYSSTATE ASCENV=AR         let macros know
       LAE     R12,0(R15,0)       base and address regs
       USING   AOFMCS,R12         addressability
       MODID   ,                  eye catcher and date
       STORAGE OBTAIN,LENGTH=DYNL get dynamic storage
       LAE     R11,0(0,R1)        use R11 as dyn base
       LAE     R2,DYNMODEL        address of dynamic area model
       L       R3,=A(DYNL)        length of dynamic area
       LAE     R4,0(0,R11)        address of dynamic area
       LR      R5,R3              length of dynamic area
       MVCL    R4,R2              copy model to dynamic area
       USING   DYNMODEL,R11       map model over dynamic area
       LAE     R13,SV             put save area addr in R13
       MVC     4(4,R13),=C'F1SA'  set acro in save area
       STORAGE OBTAIN,LENGTH=MSGCBL Get storage
       LAE     R10,0(0,R1)        use R10 as MSGCB base
       USING   MSGCB,R10          map model over dynamic area
       XC      MSGLCNT,MSGLCNT    Clear line count
* end AR mode linkage convention
* begin initialization
       SAC     0                  set primary mode
       SYSSTATE ASCENV=P          let macros know
       LA      R9,COMADDR         get address for com area
       EXTRACT (R9),FIELDS=COMM,  extract the com area                 X
               MF=(E,EXTRACT)
       L       R9,COMADDR         get address of the area
       USING   COM,R9             use R9 as base address of comm area
       ICM     R7,15,COMCIBPT     get address of the CIB
       BZ      NOCIB              no start CIB
       BAL     R14,DOCIB          process the CIB
NOCIB  DS      0H
       QEDIT   ORIGIN=COMCIBPT,                                        X
               CIBCTR=1           set modify limit to 1
       L       R1,COMECBPT        get address of the com ecb
       O       R1,=X'80000000'    set high bit - last ecb in list
       ST      R1,MODECB          put addr of modify ecb in list
       LA      R1,ECB             get addr of message ecb
       ST      R1,MECB            put into ecb list
       LA      R1,ALERT           get addr of alert ecb
       ST      R1,AECB            put into ecb list
       MVC     CMDRSP,STRTD       started task, init msg back to cons
       LA      R1,INITMSG         get initialization message
       BAL     R14,MESSR          display message
       MVI     CMDRSP,0           make sure command response reset
       MVC     TRUTABN,=CL8'AOFTABLE'
       L       R1,0(,R6)          point to first parameter
       LTR     R1,R1
       BZ      LINKAOF
       LH      R2,0(,R1)
       LTR     R2,R2
       BZ      LINKAOF
       CH      R2,=H'8'
       BNH     GETPARM
       LA      R1,BADPARM         get error message
       BAL     R14,MESSR          show it
       B       LINKAOF
GETPARM DS     0H
       MVC     TRUTABN,=CL8' '
       LA      R1,2(,R1)
       BCTR    R2,0
       EX      R2,MVCTBLNM
       B       LINKAOF
MVCTBLNM MVC   TRUTABN(*-*),0(R1) Set table name
LINKAOF DS     0H
       LA      R1,AOFCB           Point to paramter list
       MVC     LINK1D(LINK1CE-LINK1C),LINK1C
       LINK    EP=AOFLOAD,SF=(E,LINK1D)
       LTR     R15,R15
       BZ      INITCON
       MVI     DONE,0
INITCON DS     0H
       L       R2,CVTPTR          get the cvt pointer
       USING   CVTMAP,R2
       MVC     CNAME(4),CVTSNAME  Move system to CNAME
       MVC     CNAME+4(4),=C'AOFC'  default name if none supplied
       L       R1,PSAAOLD-PSA(,R0)  Get ASCB Pointer
       MVC     MYASID,ASCBASID-ASCB(R1) Save my ASID
       DROP    R2
       BAL     R14,ACTCON
       B       LOOP
* end initialization
*---------------------------------------------------------------------*
*-                                                                   -*
*- LOOP:     ASCMODE=PRIMARY, IN-LINE ENTRY                          -*
*- Function: Main processing loop; watch for done and posted ECBs    -*
*- Operation:                                                        -*
*-     if done then exit                                             -*
*-     wait for ecb post (message, alert, or modify/stop)            -*
*-     if message ecb posted, call GETMSGS                           -*
*-     if alert ecb posted, call DOALERT                             -*
*-     if modify/stop ecb posted, call DOCIB                         -*
*-     go back to top of loop                                        -*
*-                                                                   -*
*---------------------------------------------------------------------*
LOOP   DS      0H                 main processing loop
       CLI     DONE,0             check for termination
       BZ      WAIT               no, do wait
       STORAGE RELEASE,           free dynamic storage                 X
               LENGTH=DYNL,                                            X
               ADDR=(R11)
       STORAGE RELEASE,           free dynamic storage                 X
               LENGTH=MSGCBL,                                          X
               ADDR=(R10)
       PR                         exit program
WAIT   DS      0H
       WAIT    ECBLIST=ECBS       wait for a message/alert/modify/stop
       L       R1,ECB             get msg ecb
       N       R1,=X'40000000'    check for post
       BZ      CKALRT             not set, check alert
       XC      ECB,ECB            clear message ecb
       BAL     R14,GETMSGS        process the message
CKALRT DS      0H
       L       R1,ALERT           get alert ecb
       N       R1,=X'40000000'    check for post
       BZ      CKCIB              not posted, check modify
       XC      ALERT,ALERT        clear alert ecb
       BAL     R14,DOALERT        process alert
CKCIB  DS      0H
       ICM     R1,15,COMCIBPT     get CIB pointer
       BZ      LOOP               no CIB, back to main loop
       BAL     R14,DOCIB          process the CIB (QEDIT takes care of X
                                  the ECB)
       B       LOOP               back to main loop
*---------------------------------------------------------------------*
*-                                                                   -*
*- GETMSGS:  BRANCH ENTERED ASCMODE=PRIMARY, sets ASCMODE=AR         -*
*- Function: process all messages queued to this console             -*
*- Operation:                                                        -*
*-     invoke MCSOPMSG in supervisor state                           -*
*-     when a message is returned (GOTMDB)                           -*
*-        loop through the mdb objects                               -*
*-          when general object, call GOTMDBG                        -*
*-          when control prog object, call GOTMDBC                   -*
*-          when text object, call GOTMDBT                           -*
*-          otherwise unknown object type                            -*
*-     when an error occurs in MCSOPMSG (GOTERR)                     -*
*-        put out error message                                      -*
*-        set done flag to exit program                              -*
*-     return to caller                                              -*
*-                                                                   -*
*---------------------------------------------------------------------*
       SYSSTATE ASCENV=P          let macros know primary mode
GETMSGS DS     0H
       BAKR    R14,0              save caller environment
MSGLP  DS      0H
       L       R8,MSGCNID         load the console id in reg 8     @P4A
       LTR     R8,R8              is the id = 0 (ie was it             X
                                           deactivated?            @P4A
       BZ      LVGETM             then leave this proc - no msgs       X
                                           to receive              @P4A
       SAC     0                  set primary mode for modeset
       MODESET MF=(E,SUP)         set sup state
       SAC     512                this procedure runs in AR mode
       SYSSTATE ASCENV=AR         let macros know
       MCSOPMSG REQUEST=GETMSG,   get a message                        X
               NAME=CNAME,        my console name                  @P5CX
               RTNCODE=RC,        save return code                     X
               RSNCODE=RSN,       save reason code                     X
               MF=(E,MCSOPMPL)
       LAE     R8,0(0,R1)         put mdb address in R8
       USING   MDB,R8             addressability to the mdb
       SAC     0                  set primary mode for modeset
       SYSSTATE ASCENV=P          let macro know
       MODESET MF=(E,PROB)        set problem state
       SAC     512                this procedure runs in AR mode
       SYSSTATE ASCENV=AR         let macros know
       MVI     MDBFLGS,0          clear processing flags
       MVI     CMDRSP,0           assume not issuing command response
       LA      R15,8              looking for message returned
       C       R15,RC             see if any messages
       BH      GOTMDB             process it (rc<8)
       BL      GOTERR             some kind of error (rc>8)
       PR                         no more messages (rc=8)
GOTERR DS      0H
       LA      R1,BADGET          get error message
       BAL     R14,MESSR          show it
       MVI     DONE,1             set done flag
LVGETM EQU     *                  Exit point of GETMSGS            @P4A
       PR                         return error message
*---------------------------------------------------------------------*
*-                                                                   -*
*- GOTMDB:   ENTRY VIA BRANCH (NOT A SUBROUTINE)                     -*
*- Function: Process the general object and control program object   -*
*-           for a message.  Assumptions must not be made that these -*
*-           objects will preceed any text objects.                  -*
*- Operation:                                                        -*
*-     find end of MDB                                               -*
*-     loop through objects                                          -*
*-         when general object                                       -*
*-           call GOTMDBG to process general object                  -*
*-         when control program object                               -*
*-           call GOTMDBC to process control program object          -*
*-         otherwise ignore object                                   -*
*-       if both objects found, go process text objects              -*
*-       skip to next object                                         -*
*-         add object length                                         -*
*-         if end of MDB, this MDB does not have proper objects      -*
*-           to process as a message; just ignore it                 -*
*-                                                                   -*
*---------------------------------------------------------------------*
GOTMDB DS      0H
       LR      R5,R8              calc end of mbd in R5
       AH      R5,MDBLEN          start+mdblen in header
       LR      R6,R8              remember start of MDB for pass 2
       LA      R8,MDBHLEN(R8)     bump to 1st object
OBJLP  DS      0H                 loop through the objects
       LH      R3,MDBTYPE         get type
       C       R3,=A(MDBGOBJ)     check for general object
       BNE     NOTG               not general object
       TM      MDBFLGS,MDBFGO     see if first general object
       BO      CHKASID            no, skip it
       BAL     R14,GOTMDBG        process general object
       B       CHKASID            bump to next object
NOTG   DS      0H
       C       R3,=A(MDBCOBJ)     check for control prog object
       BNE     NOTC               not control prog object
       TM      MDBFLGS,MDBFCO     see if first control prog object
       BO      CHKASID            no, skip it
       BAL     R14,GOTMDBC        process control prog object
       B       CHKASID            bump to next object
NOTC   DS      0H                 not control prog obj
CHKASID DS     0H                 find next object
       CLC     MSGMASID,MYASID    Is the messge coming from me?
       BE      NXTOBJ             Yes, skip it
       TM      MDBFLGS,MDBFGO+MDBFCO see if we found general and SCP
       BO      FNDTXT             got them, loop through text objs
NXTOBJ DS      0H                 find next object
       AH      R8,MDBLEN          bump to next object
       CR      R8,R5              see if this is the end
       BL      OBJLP              no, get another object
       B       MSGLP              missing necessary objects, skip it
*---------------------------------------------------------------------*
*-                                                                   -*
*- FNDTXT:   ENTRY VIA BRANCH (NOT A SUBROUTINE)                     -*
*- Function: Process all text objects in all MDBs for this message.  -*
*-           Text objects are always ordered, but it cannot be       -*
*-           assumed that they are contiguous.                       -*
*- Operation:                                                        -*
*-     find end of MDB                                               -*
*-     get pointer to next MDB in message                            -*
*-     loop through MDBs                                             -*
*-        loop through objects                                       -*
*-            when text object                                       -*
*-              call GOTMDBT to store text object                    -*
*-            otherwise ignore object                                -*
*-          skip to next object                                      -*
*-            add object length                                      -*
*-            if end of MDB, call AOF to process message             -*
*-              move to next MDB                                     -*
*-                                                                   -*
*---------------------------------------------------------------------*
FNDTXT DS      0H
       LR      R8,R6              reset R8 to start of MDB
TXTLP  DS      0H
       LR      R5,R8              calc end of mbd in R5
       AH      R5,MDBLEN          start+mdblen in header
       LAE     R6,0(0,R8)         calc prefix address in R6
       SH      R6,=AL2(MDBPLNNO)  prefix=start-prefix length
       USING   MDBPRFX,R6         get addressability
       L       R6,MDBPNEXT        get forward pointer in R6
       DROP    R6                 R6 no longer base for prefix
       LA      R8,MDBHLEN(R8)     bump to 1st object
       SLR     R4,R4              zero line count
       ST      R4,MSGLCNT         Store line count
       LA      R1,MSGENTRY        Get address of start of messages
       S       R1,=A(L'MSGENTRY)  Go back one entry length
       ST      R1,MSGLAST         And save address of next message
TOBJLP DS      0H                 loop through the objects
       LH      R3,MDBTYPE         get type
       C       R3,=A(MDBTOBJ)     check for text object
       BNE     NOTT               not text object
       BAL     R14,GOTMDBT        process text object
NOTT   DS      0H
       AH      R8,MDBLEN          bump to next object
       CR      R8,R5              see if this is the end
       BL      TOBJLP             no, get another object
       LTR     R6,R6              check for more MDBs for message
       BZ      TXTDONE            done with message
       LR      R8,R6              next mdb
       B       TXTLP              process the mdb
TXTDONE DC     0H
       SAC     0                  set primary mode for AOFMATCH
       SYSSTATE ASCENV=P          let macro know
       LA      R1,AOFCB
       ST      R1,MATCHPRM1
       LA      R1,MSGCB
       ST      R1,MATCHPRM2
       LA      R1,MATCHPRMS
       CALL    AOFMATCH
       SAC     512                this procedure runs in AR mode
       SYSSTATE ASCENV=AR         let macros know
       XC      MSGLCNT,MSGLCNT    Clear line count
       B       MSGLP              done with message
       DROP    R8
*---------------------------------------------------------------------*
*-                                                                   -*
*- GOTMDBG:  BRANCH ENTERED, ASCMODE=AR, R8=ADDR(general object)     -*
*- Function: process MDB general object                              -*
*- Operation:                                                        -*
*-     establish addressability to the general object                -*
*-     indicate general object processed                             -*
*-                                                                   -*
*---------------------------------------------------------------------*
       SYSSTATE ASCENV=AR         let macros know AR mode
GOTMDBG DS     0H
       BAKR    R14,0              save caller environment
       USING   MDBG,R8            addressability to general object
       OI      MDBFLGS,MDBFGO     set processed general object
       PR
       DROP    R8
*---------------------------------------------------------------------*
*-                                                                   -*
*- GOTMDBC:  BRANCH ENTERED, ASCMODE=AR, R8=ADDR(control prog object)-*
*- Function: process MDB control program object                      -*
*- Operation:                                                        -*
*-     establish addressability to the control program object        -*
*-     if this is an MVS object                                      -*
*-        set flag indicating control prog object found for the msg  -*
*-        save message text offset for text processing               -*
*-        if this is a command response message                      -*
*-           save the CART                                           -*
*-           indicate that the text echo should be command response  -*
*-                                                                   -*
*---------------------------------------------------------------------*
       SYSSTATE ASCENV=AR         let macros know AR mode
GOTMDBC DS     0H
       BAKR    R14,0              save caller environment
       USING   MDBSCP,R8          addressability to control prog object
       CLC     MDBCPNAM,=C'MVS '  make sure it is an MVS object
       BNE     GOTC1              if not, just skip it
       OI      MDBFLGS,MDBFCO     set processed control prog object
       LH      R1,MDBCTOFF        get text offset
       ST      R1,TOFF            save it for text processing
       TM      MDBCATT1,MDBCMCSC  check if command response
       BZ      GOTC1              not command response
       MVI     CMDRSP,1           issue any WTOs as cmd response
GOTC1  DS      0H
       MVC     MSGMCART,MDBCCART  hold onto cart
       MVC     MSGMASID,MDBCASID  hold onto ASID
       MVC     MSGMJOBN,MDBCOJBN  hold onto JOBNAME
       MVC     MSGMRPYI,MDBCRPYI  hold onto Reply ID
       MVC     MSGCSUPB,MDBCSUPB  hold onto Suppression byte
       MVC     MSGCDESC,MDBCDESC  hold onto Descriptor codes
       PR
       DROP    R8
*---------------------------------------------------------------------*
*-                                                                   -*
*- GOTMDBT:  BRANCH ENTERED, ASCMODE=AR, R8=ADDR(text object)        -*
*- Function: process MDB text objects                                -*
*- Operation:                                                        -*
*-     establish addressability to the text object                   -*
*-     calculate the length of the text                              -*
*-     move it to a buffer                                           -*
*-     set the length                                                -*
*-     R4 contains line count for MLWTOs                             -*
*-                                                                   -*
*---------------------------------------------------------------------*
       SYSSTATE ASCENV=AR         let macros know AR mode
GOTMDBT DS     0H
       BAKR    R14,0              save caller environment
       L       R1,MSGLCNT
       C       R1,=F'255'         Reached maximum number of lines?
       BNL     GOTTX              Yes, can't do any more
       A       R1,=F'1'           Add one to line count
       ST      R1,MSGLCNT         and save it
       USING   MDBT,R8            addressability to text object
       LH      R1,MDBTLEN         get text object length
       S       R1,=A(MDBTMSGT-MDBTLEN) subtract non-text size
       S       R1,TOFF            take off offset to text
       S       R1,=F'1'           set up for MVC
       LAE     R2,MDBTMSGT        get address of text
       A       R2,TOFF            bump past prefix info
       L       R3,MSGLAST
       LA      R3,L'MSGENTRY(,R3)
       ST      R3,MSGLAST
       EX      R1,GOTTMVC         move text to buffer
       LA      R1,1(,R1)
       STH     R1,0(,R3)          set message length
*      CLC     0(8,R2),=CL8'$HASP050'
*      BNE     GOTTX
*      EX      R0,*
GOTTX  DS      0H
       PR
GOTTMVC DS      0H
       MVC     2(*-*,R3),0(R2)
       DROP    R8
*---------------------------------------------------------------------*
*-                                                                   -*
*- DOALERT:  BRANCH ENTERED ASCMODE=PRIMARY, sets ASCMODE=AR         -*
*- Function: process a console alert notification                    -*
*- Operation:                                                        -*
*-     establish addressability the the console status area          -*
*-     check each alert indicator                                    -*
*-       if set, put out a message                                   -*
*-     no error handling is performed this example, just             -*
*-      deactivate the console on any alert                          -*
*-                                                                   -*
*---------------------------------------------------------------------*
DOALERT DS     0H
       BAKR    R14,0              save caller environment
       SAC     512                get into AR mode
       SYSSTATE ASCENV=AR         let macros know
       L       R2,CSA             get address of the status area
       LAM     R2,R2,CSAALET      get ALET for status area
       USING   MCSCSA,R2          establish addressability
       CLI     MCSCMLIM,0         reached memory limit?
       BZ      ALRT1              no
       LA      R1,MSGMLIM         get error message
       BAL     R14,MESSR          display it
ALRT1  DS      0H
       CLI     MCSCDLIM,0         reached queue limit?
       BZ      ALRT2              no
       LA      R1,MSGDLIM         get error message
       BAL     R14,MESSR          display it
ALRT2  DS      0H
       CLI     MCSCINTR,0         internal error?
       BZ      ALRT3              no
       LA      R1,MSGINTR         get error message
       BAL     R14,MESSR          display it
ALRT3  DS      0H
       CLI     MCSCALRT,0         reached alert percent?
       BZ      ALRT4              no
       LA      R1,MSGALRT         get error message
       BAL     R14,MESSR          display it
ALRT4  DS      0H
       LA      R1,ALRMSG          get alert message
       BAL     R14,MESSR          display it
       BAL     R14,DEACT          deactivate console
       PR
*---------------------------------------------------------------------*
*-                                                                   -*
*- DOCIB:    BRANCH ENTERED ASCMODE=PRIMARY                          -*
*- Function: process all CIBs queued to this job                     -*
*- Operation:                                                        -*
*-     loop while there are CIBs                                     -*
*-        when modify CIB                                            -*
*-           save requesting console id                              -*
*-           when activate command                                   -*
*-              invoke MCSOPER to activate the console               -*
*-              display acknowledgement or error                     -*
*-           when deactivate command                                 -*
*-              invoke MCSOPER to deactivate the console             -*
*-              display acknowledgement or error                     -*
*-        when stop CIB                                              -*
*-           set done indicator                                      -*
*-        delete the CIB                                             -*
*-     return to caller                                              -*
*-                                                                   -*
*---------------------------------------------------------------------*
       SYSSTATE ASCENV=P          let macros know primary mode
DOCIB  DS      0H
       BAKR    R14,0              save caller environment
       MVI     CMDRSP,1           issue WTOs as command response
CIBLP  DS      0H
       ICM     R7,15,COMCIBPT     get address of the CIB
       BNZ     SVINFO             got one, check the CIB type
       MVI     CMDRSP,0           turn off cmd response flag
       PR                         no, return to caller
       USING   CIB,R7             CIB based on R7
SVINFO DS      0H
       LR      R1,R7              get consid and CART from CIBX
       AH      R1,CIBXOFF         CIBX=addr(CIB)+CIBXOFF
       USING   CIBX,R1            get addressability
       MVC     MYOPER,CIBXCNID get console id that I will talk to
       MVC     MSGMCART,CIBXCART  keep CART for a cmd response
       DROP    R1                 done with CIBX
       CLI     CIBVERB,CIBMODFY   check for modify
       BNE     CKSTOP             no, try stop
       CLC     MSGID,=F'0'        do I have a message to be DOMed
       BE      DOFCMD             no
       DOM     MSG=MSGID          DOM it
       XC      MSGID,MSGID        clear held message id
DOFCMD DS      0H
       LH      R3,CIBDATLN        get text length in R3
       C       R3,=A(L'CMDACT)    check cmd length
       BL      NOTACT             too short
       CLC     CMDACT(L'CMDACT),CIBDATA  check text
       BNE     NOTACT             not activate
       L       R1,MSGCNID         see if I have a console active
       LTR     R1,R1              any id?
       BZ      NOCNID             yes, don't activate another
       LA      R1,DIDACT          error, console already active
       BAL     R14,MESSR          show message
       B       DELCIB             done with CIB
NOCNID DS      0H
       L       R2,CVTPTR          get the cvt pointer
       USING   CVTMAP,R2
       MVC     CNAME(4),CVTSNAME  Move system to CNAME
       MVC     CNAME+4(4),=C'AOFC'  default name if none supplied
       DROP    R2
       LA      R2,L'CMDACT+1      R2-->past activate command
       SR      R3,R2              remaining chars in command
       BNP     CALLACT            no console name provided
       C       R3,=F'8'           no more than 8 chars in console name
       BH      CALLACT            too much text for name - ignore it
       MVC     CNAME,=CL8' '      start with a blank name field
       LA      R2,CIBDATA(R2)     get address of name in the cib
       S       R3,=F'1'           calc move length
       EX      R3,MOVECN          do the move
       B       CALLACT            call actcon routine
MOVECN DS      0H
       MVC     CNAME(0),0(R2)     this move instruction is EX'ed
CALLACT DS     0H                 check if console active using convcon
       BAL     R14,ACTCON
       B       DELCIB             done with CIB
NOTACT DS      0H
       C       R3,=A(L'CMDDACT)   check for deactivate command
       BL      NOTDACT            bad length
       CLC     CMDDACT(L'CMDDACT),CIBDATA check text
       BNE     NOTDACT            not deactivate command
       BAL     R14,DEACT          deactivate console
       B       DELCIB             done with CIB
NOTDACT DS     0H
       C       R3,=A(L'CMDRELO)   Check for reload command
       BL      NOTRELO            Too short
       CLC     CMDRELO(L'CMDRELO),CIBDATA check text
       BNE     NOTRELO            not reload command
       BAL     R14,RELOAD         reload AOF table
       B       DELCIB             done with CIB
NOTRELO DS     0H
       B       DELCIB             done with CIB
CKSTOP DS      0H
       CLI     CIBVERB,CIBSTOP    check for stop CIB
       BNE     CKSTRT             not stop either
       MVI     DONE,1             signal done
       ICM     R1,15,MSGCNID      get console id
       BZ      DELCIB             the console is not active
       BAL     R14,DEACT          deactivate it
       B       DELCIB             done with CIB
CKSTRT DS      0H
       CLI     CIBVERB,CIBSTART   check for start CIB
       BNE     DELCIB             CIB not used by this prog
       MVI     STRTD,1            this is a started task
DELCIB DS      0H
       QEDIT   ORIGIN=COMCIBPT,                                        X
               BLOCK=(R7)         free the CIB
       B       CIBLP              go look for another
*---------------------------------------------------------------------*
*-                                                                   -*
*- DEACT:     BRANCH ENTERED, SETS ASCMODE=PRIMARY                   -*
*- Function:  deactivate the console                                 -*
*- Operation:                                                        -*
*-     save caller state                                             -*
*-     set sup state for MCSOPER deactivate                          -*
*-     if rc is 0 then                                               -*
*-        set current console id to 0 (MSGCNID)                      -*
*-        display console deactivated message                        -*
*-      else                                                         -*
*-        display deactivation error message                         -*
*-                                                                   -*
*---------------------------------------------------------------------*
DEACT  DS      0H
       BAKR    R14,0              save caller state
       SAC     0                  runs in primary mode
       SYSSTATE ASCENV=P          tell macros
       MODESET MF=(E,SUP)         set sup state
       MCSOPER REQUEST=DEACTIVATE,                                     X
               NAME=CNAME,        deactivate the console           @P5CX
               RTNCODE=RC,        save return code                     X
               RSNCODE=RSN,       save reason code                     X
               MF=(E,MCSOPPL)
       MODESET MF=(E,PROB)        set problem state
       ICM     R15,15,RC          get return code
       BNZ     DACTERR            if non-zero, process error
       XC      MSGCNID,MSGCNID    zero console id to show not active
       LA      R1,NOWDACT         get not active message
       BAL     R14,MESSR          display it
       PR                         return
DACTERR DS     0H
       LA      R1,BADDACT         deactivate error
       BAL     R14,MESSR          display message
       PR                         return
*---------------------------------------------------------------------*
*-                                                                   -*
*- ACTCON     BRANCH ENTERED, SETS ASCMODE=PRIMARY                   -*
*- Function:  activate console                                       -*
*- Operation:                                                        -*
*-     save caller state                                             -*
*-     activate console                                              -*
*-     if rc is 0 then                                               -*
*-        display table loaded message                               -*
*-      else                                                         -*
*-        display load error message                                 -*
*-                                                                   -*
*---------------------------------------------------------------------*
ACTCON DS      0H
       BAKR    R14,0              save caller state
       SAC     0                  runs in primary mode
       SYSSTATE ASCENV=P          tell macros
*                                 check if console active using convcon
       XC      CONV(CONVPLEN),CONV clear convcon parm list
       MVC     CONVACRO,=C'CONV'  set acronym
       MVI     CONVVRSN,CONVRID   set version
       OI      CONVFLGS,CONVPFLD  set name to id conversion
       MVC     CONVFLD,CNAME      set console name
       OI      CONVGFLG,CONVNPAR  set no area verification
       CONVCON CONV               call convcon
       LTR     R15,R15            check rc
       BNZ     DOACT              branch if not active
       LA      R1,DIDACT          error, console already active
       BAL     R14,MESSR          show message
       B       ENDACT             return
DOACT  DS      0H
       LA      R1,OPERPRM         build operparm defaults
       USING   MCSOPPRM,R1        map area
       XC      OPERPRM(MCSOPLEN),OPERPRM clear operparm parm list
       MVI     MCSOAUTH,MCSOMSTR  set master authority
       MVI     MCSORCFL,MCSORCAL  all route codes
       MVC     MCSOKEY,CNAME      set key
       MVC     MCSOSTOR,=H'150'   Set storage limit for messages in MB
       OI      MCSOMISC,MCSOAUTY  Set to receive auto msgs
       OI      MCSOMISC,MCSOHDCY  Set to receive harcpy msgs
       OI      MCSOMSFG,MCSOSLST  Set to list systems for MSCOPE
       LA      R2,OPERSCP         get address of MSCOPE table
       ST      R2,MCSOMSPT        Save in parm list
       USING   MCSOTBL,R2
       MVC     MCSOMSNM,=F'1'     Only one system for MSCOPE
       MVC     MCSOTSYS,=CL8'*'   Set to MSCOPE to *
       DROP    R2
       MODESET MF=(E,SUP)         set sup state to activate console
       MCSOPER REQUEST=ACTIVATE,  activate the console                 X
               NAME=CNAME,        activate name found in CNAME         X
               TERMNAME=CNAME,    use CNAME for the termname audit     X
               OPERPARM=OPERPRM,  use my OPERPARMs if none in RACF     X
               MSGDLVRY=FIFO,     request fifo delivery                X
               MSGECB=ECB,        ecb to be posted when msg is queued  X
               ALERTECB=ALERT,    ecb to be posted when alert occurs   X
               MCSCSA=CSA,        returned status area address         X
               MCSCSAA=CSAALET,   returned status area alet            X
               CONSID=MSGCNID,    returned console id                  X
               RTNCODE=RC,        save return code                     X
               RSNCODE=RSN,       save reason code                     X
               MF=(E,MCSOPPL)
       MODESET MF=(E,PROB)        back to problem state
       ICM     R15,15,RC          get return code
       BNZ     ACTERR             if non-zero, process error
       LA      R1,NOWACT          now active message
       BAL     R14,MESSR          display it
       B       ENDACT
ACTERR DS      0H
       LA      R1,BADINI          console initialization error
       BAL     R14,MESSR          display message
ENDACT DS      0H
       PR                         return
*---------------------------------------------------------------------*
*-                                                                   -*
*- RELOAD     BRANCH ENTERED, SETS ASCMODE=PRIMARY                   -*
*- Function:  reload AOF table                                       -*
*- Operation:                                                        -*
*-     save caller state                                             -*
*-     reload AOF table                                              -*
*-     if rc is 0 then                                               -*
*-        display table loaded message                               -*
*-      else                                                         -*
*-        display load error message                                 -*
*-                                                                   -*
*---------------------------------------------------------------------*
RELOAD DS      0H
       BAKR    R14,0              save caller state
       SAC     0                  runs in primary mode
       SYSSTATE ASCENV=P          tell macros
       L       R6,TRUTABL         CHECK TO SEE IF table loaded
       LTR     R6,R6              WELL.. IS IT ?
       BZ      NODEL              NO table, NO NEED TO DELETE
       L       R10,TRUBSTH              GET POINTER TO INDEX TABLE
       L       R2,0(,R10)               GET LENGTH AND SUBPOOL
       XC      TRUBSTH(TRUBSTL+4-TRUBSTH),TRUBSTH CLR PTRS
       XC      TRUTABL,TRUTABL          INDICATE NO POINTER
       STORAGE RELEASE,           free dynamic storage                 X
               LENGTH=(R2),                                            X
               ADDR=(R10)
       LA      R6,TRUTABN         GET CURRENT TABLE NAME
       DELETE  EPLOC=(R6)           DELETE IT !
       MVC     TRUTABN(8),=CL8' '
NODEL  DS      0H
       LA      R2,L'CMDRELO+1     R2-->past activate command
       SR      R3,R2              remaining chars in command
       BNP     LOADERR            no table name provided
       C       R3,=F'8'           no more than 8 chars in table name
       BH      LOADERR            too much text for name - ignore it
       MVC     TRUTABN,=CL8' '    start with a blank name field
       LA      R2,CIBDATA(R2)     get address of name in the cib
       S       R3,=F'1'           calc move length
       EX      R3,MOVEAOF         do the move
       B       AOFLOAD            see if it is already active
MOVEAOF DS     0H
       MVC     TRUTABN(0),0(R2)   this move instruction is EX'ed
AOFLOAD DS     0H
       CLC     TRUTABN,=CL8'NONE'      OPERATOR WANTS NO table loaded?
       BNE     LOADNTAB                  NO, LOAD NEW TABLE
*
LOADNTAB DS    0H
       LA      R1,AOFCB           Point to paramter list
       MVC     LINK1D(LINK1CE-LINK1C),LINK1C
       LINK    EP=AOFLOAD,SF=(E,LINK1D)
       LTR     R15,R15
       BNZ     LOADERR            if non-zero, process error
       PR                         return
LOADERR DS     0H
       MVC     TRUTABN,=CL8'NONE' No AOF table loaded
       LA      R1,BADLOAD         load error
       BAL     R14,MESSR          display message
       PR                         return
*---------------------------------------------------------------------*
*-                                                                   -*
*- MESSR:     BRANCH ENTERED, R1=ADDR(message), SETS ASCMODE=PRIMARY -*
*- Function:  display a message                                      -*
*- Operation:                                                        -*
*-       does a WTO of the message passed as the parameter           -*
*-                                                                   -*
*---------------------------------------------------------------------*
MESSR  DS      0H
       BAKR    R14,0              save caller environment
       SAC     0                  run in primary mode
       SYSSTATE ASCENV=P          tell macros primary mode
       LR      R2,R1              use R2 for text in WTO
       CLI     CMDRSP,1           check for command response
       BE      MESSRC             yes, issue as cmd response
       WTO     TEXT=(R2),         display message                      X
               MF=(E,WTOPL)
       PR                         return to caller
MESSRC DS      0H
       WTO     TEXT=(R2),         display message                      X
               CONSID=MYOPER,                                          X
               CART=MSGMCART,                                          X
               MF=(E,WTOPLCR)
       PR                         return to caller
*---------------------------------------------------------------------*
*- messages                                                          -*
*---------------------------------------------------------------------*
BADINI  DC     AL2(L'MSG0)
MSG0    DC     C'AOF000I ERROR ACTIVATING CONSOLE'
BADGET  DC     AL2(L'MSG1)
MSG1    DC     C'AOF001I ERROR TRYING TO GET A MESSAGE'
DIDACT  DC     AL2(L'MSG2)
MSG2    DC     C'AOF002I CONSOLE IS ALREADY ACTIVE'
NOWACT  DC     AL2(L'MSG3)
MSG3    DC     C'AOF003I CONSOLE HAS BEEN ACTIVATED'
NOWDACT DC     AL2(L'MSG5)
MSG5    DC     C'AOF005I CONSOLE HAS BEEN DEACTIVATED'
BADDACT DC     AL2(L'MSG6)
MSG6    DC     C'AOF006I ERROR DEACTIVATING CONSOLE'
ALRMSG  DC     AL2(L'MSG7)
MSG7    DC     C'AOF007I ALERT DETECTED - DEACTIVATING CONSOLE'
INITMSG DC     AL2(L'MSG8)
MSG8    DC     C'AOF008I NOW ACCEPTING MODIFY COMMANDS'
MSGMLIM DC     AL2(L'MSG9)
MSG9    DC     C'AOF009I CONSOLE QUEUEING STOPPED DUE TO MEMORY LIMIT'
MSGDLIM DC     AL2(L'MSG10)
MSG10   DC     C'AOF010I CONSOLE QUEUEING STOPPED DUE TO DEPTH LIMIT'
MSGINTR DC     AL2(L'MSG11)
MSG11   DC     C'AOF011I INTERNAL SYSTEM ERROR ON CONSOLE'
MSGALRT DC     AL2(L'MSG12)
MSG12   DC     C'AOF012I RECEIVED QUEUE DEPTH ALERT'
BADPARM DC     AL2(L'MSG13)
MSG13   DC     C'AOF013I INVALID AOF TABLE NAME SPECIFIED IN PARM'
BADLOAD DC     AL2(L'MSG14)
MSG14   DC     C'AOF014I INVALID AOF TABLE NAME SPECIFIED'
*---------------------------------------------------------------------*
*- static variables                                                  -*
*---------------------------------------------------------------------*
CMDACT  DC     C'ACTIVATE'        activate command
CMDDACT DC     C'DEACTIVATE'      deactivate command
CMDRELO DC     C'RELOAD'          reload command
LINK1C  LINK   LSEARCH=YES,SF=L
LINK1CE EQU    *
        LTORG
*---------------------------------------------------------------------*
*- dynamic area model                                                -*
*---------------------------------------------------------------------*
DYNMODEL DS    0F
ECBS    DS     0CL12              ecb list for wait
MECB    DS     A                    addr(message ecb)
AECB    DS     A                    addr(alert ecb)
MODECB  DS     A                    addr(modify/stop ecb)
CSA     DS     A                  addr(mcscsa)
CSAALET DS     F                  alet(mcscsa)
ECB     DC     F'0'               message ecb
ALERT   DC     F'0'               alert ecb
COMADDR DS     F                  addr(comarea) from extract
RC      DS     F                  return code from mcsoper/mcsopmsg
RSN     DS     F                  reason code from mcsoper/mcsopmsg
MYOPER  DS     F                  console id from last modify command
MYASID  DS     H                  ASID AOFMCS is running under
MSGID   DC     F'0'
OPERPRM DS     CL(MCSOPLEN)       OPERPARMs area
OPERSCP DS     CL(68)             MSCOPE table area
CNAME   DS     CL8                console name to activate
        DC     CL2'  '            space for area id on convcon
SV      DS     18F                save area
MATCHPRMS DS   2F                 Parm list for AOFMATCH
        ORG    MATCHPRMS
MATCHPRM1 DS   F
MATCHPRM2 DS   F
TOFF    DS     F                  offset to message in text object
DONE    DC     FL1'0'             done flag
MDBFLGS DC     FL1'0'             mdb flags
MDBFGO  EQU    X'01'              processed general object
MDBFCO  EQU    X'02'              processed control prog object
CMDRSP  DC     FL1'0'             command response flag
STRTD   DC     FL1'0'             indicator that this was started task
        DS     0H
        EJECT
WTOPL   WTO    TEXT=,             WTO parameter list                   X
               DESC=(7),                                               X
               MF=L
WTOPLCR WTO    TEXT=,             WTO parameter list for cmd response  X
               CONSID=,                                                X
               CART=,                                                  X
               DESC=(5,7),        descriptor code 5 is cmd response    X
               MF=L
        EJECT
LINK1D  LINK   LSEARCH=YES,SF=L
        EJECT
MGCREPL MGCRE  MF=(L)             MGCRE parameter list
        EJECT
SUP     MODESET MODE=SUP,MF=L     MODESET parm list for sup state
SUP0    MODESET MODE=SUP,                                              X
               KEY=ZERO,MF=L      MODESET parm list for sup, key 0
PROB    MODESET MODE=PROB,                                             X
               KEY=NZERO,MF=L MODESET parm list for problem state
EXTRACT EXTRACT MF=L              EXTRACT parameter list
        EJECT
        IEZVG200 DSECT=NO         CONVCON parameter list
        EJECT
        MCSOPER MF=(L,MCSOPPL)    MCSOPER parameter list
        EJECT
        MCSOPMSG MF=(L,MCSOPMPL),PLISTVER=2 MCSOPMSG Parm List     @P5C
        EJECT
        AOFCB DSECT=NO
DYNL    EQU    *-DYNMODEL         dynamic area length
*---------------------------------------------------------------------*
*- required DSECTs                                                   -*
*---------------------------------------------------------------------*
        MSGCB
        EJECT
        CVT     DSECT=YES,LIST=YES
        EJECT
        IHAPSA  LIST=YES
        EJECT
        IHAASCB LIST=YES
        EJECT
        IEAVG132 ,                mdb prefix
        EJECT
        IEAVM105 ,                mdb
        EJECT
        IEAVG131 ,                console status area
        EJECT
        IEZVG111 ,                operparm parameter area
        EJECT
COM     DSECT
        IEZCOM   ,                COM area
        EJECT
CIB     DSECT
        IEZCIB   ,                CIB and CIBX
*---------------------------------------------------------------------*
*- register usage                                                    -*
*---------------------------------------------------------------------*
R0      EQU    0                  work reg
R1      EQU    1                  work and parm reg
R2      EQU    2                  work reg
R3      EQU    3                  work reg
R4      EQU    4                  work reg
R5      EQU    5                  pointer to end of the mdb
R6      EQU    6                  next mdb pointer
R7      EQU    7                  base for CIB
R8      EQU    8                  base for mdb and mdb objects
R9      EQU    9                  base for com area
R10     EQU    10                 dynamic storage base
R11     EQU    11                 dynamic storage base
R12     EQU    12                 module base
R13     EQU    13                 linkage
R14     EQU    14                 linkage
R15     EQU    15                 linkage
        END
