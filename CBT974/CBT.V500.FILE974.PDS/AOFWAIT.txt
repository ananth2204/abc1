          TITLE 'AOF ROUTINE TO WAIT FOR MESSAGE'
*PROCESS  USING(NOWARN)
AOFWAIT   CSECT ,
AOFWAIT   AMODE 31
AOFWAIT   RMODE ANY
***********************************************************************
* This is the AOFWAIT REXX function.                                  *
***********************************************************************
* command syntax:                                                     *
*                                                                     *
* aofwaitrc = AOFWAIT(entryid,timeout)                                *
*                                                                     *
* Where entryid is the an entry label for the message entry in the    *
*       AOF table of the message to wait for and                      *
*       timeout is the amount of time in seconds to wait              *
*       for the message to appear.                                    *
*                                                                     *
*                                                                     *
* This command is designed to be used with the AOF application. It is *
* intended to provide an AOF automation exec  with the capability of  *
* waiting until a given message appears before continuing. When the   *
* message appears on the z/OS console, this function will be posted.  *
* If the message does not appear before the timeout value is reached  *
* the function will exit with a function value of 4.                  *
*                                                                     *
* If the message does appear the function will exit with a function   *
* value of 0.                                                         *
***********************************************************************
*---------------------------------------------------------------------*
*- register usage                                                    -*
*---------------------------------------------------------------------*
R0      EQU    0                  work reg
R1      EQU    1                  work and parm reg
R2      EQU    2                  work reg
R3      EQU    3                  work reg
R4      EQU    4                  work reg
R5      EQU    5
R6      EQU    6
R7      EQU    7
R8      EQU    8
R9      EQU    9
R10     EQU    10
R11     EQU    11                 work area base
R12     EQU    12                 module base
R13     EQU    13                 linkage
R14     EQU    14                 linkage
R15     EQU    15                 linkage
***********************************************************************
* begin linkage convention
       STM     R14,R12,12(R13)
       LR      R2,R13             Save savearea
       LR      R10,R1             Save parm pointer
       LA      R12,0(R15)         base and address regs
       USING   AOFWAIT,R12
       USING   PSA,0
       MODID   ,                  eye catcher and date
       STORAGE OBTAIN,LENGTH=DYNL get dynamic storage
       LA      R11,0(0,R1)        use R11 as dyn base
       USING   DYNAREA,R11        map model over dynamic area
       LA      R13,SAVEAREA
       ST      R13,8(R2)          Link saveareas
       ST      R2,SAVEAREA+4
******************************************************************
       L       R1,16(R10)          let's get our argument
       CLC     0(L'PARMEND,R1),PARMEND    is there an argument
       BE      BAD_WAIT            no, then send error
       ICM     R3,15,4(R1)         get the length of argument
       BZ      BAD_WAIT            if none send error
       CH      R3,=AL2(L'ENTRYID)    verify it's not too long
       BH      BAD_WAIT            yes, send error
       MVI     ENTRYID,C' '
       MVC     ENTRYID+1(L'ENTRYID-1),ENTRYID
       STH     R3,ENTRYID_LENGTH   save the length of entryid
       BCTR    R3,0                decrement for execute move
       L       R7,0(R1)            and address the argument
       EX      R3,MOVEENTRYID      MVC   ENTRYID(0),0(R7)
       B       GET_TIMEOUT
MOVEENTRYID DS 0H
       MVC     ENTRYID(*-*),0(R7)  executed
******************************************************************
GET_TIMEOUT EQU   *
       LA      R1,8(,R1)
       CLC     0(L'PARMEND,R1),PARMEND    is there an argument?
       BE      DEFAULT_TIMEOUT     no, then use default wait time
       ICM     R3,15,4(R1)         get the length of descriptor
       BZ      DEFAULT_TIMEOUT     zero, then use default wait time
       CH      R3,=H'5'            verify it's not too long
       BH      BAD_WAIT            no, then continue
       L       R7,0(R1)            point to the argument
       LR      R0,R3
       LR      R1,R7
TEST_TIMEOUT_LOOP EQU   *
       CLC     0(1,R1),=C'0'
       BL      BAD_WAIT
       CLC     0(1,R1),=C'9'
       BH      BAD_WAIT
       LA      R1,1(,R1)
       BCT     R0,TEST_TIMEOUT_LOOP
       BCTR    R3,0
       EX      R3,PACK
       B       CONVERT_TIMEOUT
PACK   DS      0H
       PACK    DWORD,0(*-*,R7)
CONVERT_TIMEOUT EQU   *
       CVB     R3,DWORD              convert to binary
       C       R3,=F'1'
       BL      BAD_WAIT
       C       R3,=F'7200'           two hours
       BH      BAD_WAIT
       M       R2,=F'100'            change to hundreths
       ST      R3,TIMEOUTVAL
       B       TIMEOK
DEFAULT_TIMEOUT EQU   *
       MVC     TIMEOUTVAL,=F'1000'   default 10 seconds
***********************************************************************
*                                                                     *
* Set up name_token parm lists
*
***********************************************************************
TIMEOK EQU     *
       MVC     NT_NAME,NT_NAMEC
       MVI     NT_ENTRYID,C' '
       MVC     NT_ENTRYID+1(L'NT_ENTRYID-1),NT_ENTRYID
       MVC     NT_ENTRYID(L'ENTRYID),ENTRYID
       LA      R1,NT_LEVEL
       ST      R1,NTCR_PARMLIST
       ST      R1,NTDL_PARMLIST
       LA      R1,NT_NAME
       ST      R1,NTCR_PARMLIST+4
       ST      R1,NTDL_PARMLIST+4
       LA      R1,NT_TOKEN
       ST      R1,NTCR_PARMLIST+8
       ST      R1,NTDL_PARMLIST+8
       LA      R1,NT_PERSOPT
       ST      R1,NTCR_PARMLIST+12
       LA      R1,NT_RETCODE
       ST      R1,NTCR_PARMLIST+16
       ST      R1,NTDL_PARMLIST+12
***********************************************************************
*                                                                     *
* Create wait ecb token
*
***********************************************************************
SET_TOKEN DS 0H
       LA      R2,AOFWTECB
       ST      R2,NT_ECBPTR        deposit ecb ptr into token
       L       R2,PSAAOLD
       ST      R2,NT_ASCBPTR       deposit ascb ptr into token
       XC      NT_RETCODE,NT_RETCODE
       LA      R1,NTCR_PARMLIST
       LA      R0,=C'CREATE'
       SVC     254
       CLC     NT_RETCODE,=F'4'
       BH      BAD_TOKEN2
       BE      BAD_TOKEN1
       B       DO_STIMER
***********************************************************************
*                                                                     *
* Set up STIMER
*
***********************************************************************
DO_STIMER DS 0H
***********************************************************************
* Next, we prepare to await the message. We will wait for one of two  *
* events, either the message will appear and we will be posted or the *
* timer will pop, because the message did not appear.                 *
***********************************************************************
       MVC     STIMERD(STIMRPEN-STIMRPRE),STIMRPRE     copy STIMER
       LA      R2,DYNAREA
       ST      R2,STIMPARM         get address of dsect area for parms
       LA      R2,STIMEREX         get address of stimer exit
       ST      R2,STIMREAL         and tell stimer preprocessor
       STIMER  REAL,STIMERD,BINTVL=TIMEOUTVAL
***********************************************************************
* We will awaken upon one of two events. If the STIMER expires, the   *
* STIMEREX exit is driven, and this will post the ecb. This means that*
* the expected message never did materialize, and therefore, we will  *
* dummy up the response, set a condition code of 8 and return.        *
* On the other hand, if the message did materialize, we will cancel   *
* stimer, set a condition code of 0 and return.                       *
***********************************************************************
       XC      AOFWTECB(4),AOFWTECB
       XC      STIMRECB(4),STIMRECB
       LA      R2,AOFWTECB            get address of AOFETECB
       ST      R2,LISTECBS            store in list
       LA      R2,STIMRECB            get address of other ecb
       ST      R2,LISTECBS+4           store in list
       OI      LISTECBS+4,X'80'       set high order bit
       WAIT    ECBLIST=LISTECBS
***********************************************************************
* We have been posted, either from the message being posted, or from  *
* the STIMER popping... If posted through our STIMER exit, we are     *
* ok, if posted through the AOF xmem post, we should cancel the STIMER*
***********************************************************************
       TM      AOFWTECB,X'40'         post bit on ?
       BNO     PSTTSTIM
       TTIMER  CANCEL
***********************************************************************
* Following the TTIMER, there is a chance that the timer exit was     *
* scheduled (if time remaining is zero) but not yet called.           *
* We will check to see if we need to handle this rare occurance.      *
***********************************************************************
       LTR     R0,R0          any time interval remaining ?
       BNZ     NOWAIT2        no, no need to be concerned...
       TM      STIMRECB,X'40' were we already posted ?
       BNZ     NOWAIT2        no, no need to be concerned...
       WAIT    ECB=STIMRECB   we have to be concerned... wait till
*                             stimer exit pops before continuing.
***********************************************************************
* Delete the AOF message token.                                       *
***********************************************************************
NOWAIT2 DS     0H
       LA      R1,NTDL_PARMLIST
       LA      R0,=C'DELETE'
       SVC     254
*
       MVC     RETCODE(2),=H'0'       Set return code
       B       MSG_POSTED
*
***********************************************************************
* Here, the STIMER exit has popped, and posted the STIMERECB, meaning *
* that the message has not appeared. we will set a return code of 8   *
* and terminate.                                                      *
***********************************************************************
PSTTSTIM DS    0H
       LA      R1,NTDL_PARMLIST
       LA      R0,=C'DELETE'
       SVC     254
*
       B       MSG_TIMEOUT
***********************************************************************
*                                                                     *
* SET REPLY
*
***********************************************************************
MSG_POSTED     EQU   *
       MVC     REPLY_AREA(L'OK_FUNCTION),OK_FUNCTION
       L       R8,=A(L'OK_FUNCTION)
       MVC     RETCODE(2),=CL2'00'    set return code
       B       SETERRORMSG
MSG_TIMEOUT    EQU   *
       MVC     REPLY_AREA(L'ERROR_TIMEOUT),ERROR_TIMEOUT
       L       R8,=A(L'ERROR_TIMEOUT)
       MVC     RETCODE(2),=CL2'04'    set return code
       B       SETERRORMSG
BAD_TOKEN1     EQU   *
       MVC     REPLY_AREA(L'ERROR_TOKEN1),ERROR_TOKEN1
       L       R8,=A(L'ERROR_TOKEN1)
       MVC     RETCODE(2),=CL2'08'    set return code
       B       SETERRORMSG
BAD_TOKEN2     EQU   *
       MVC     REPLY_AREA(L'ERROR_TOKEN2),ERROR_TOKEN2
       L       R8,=A(L'ERROR_TOKEN2)
       MVC     RETCODE(2),=CL2'08'    set return code
       B       SETERRORMSG
BAD_WAIT       EQU   *
       MVC     REPLY_AREA(L'ERROR_FUNCTION),ERROR_FUNCTION
       L       R8,=A(L'ERROR_FUNCTION)
       MVC     RETCODE(2),=CL2'08'    set return code
       B       SETERRORMSG
SETERRORMSG DS    0H
       LA      R1,IRXSHVBSTG
       USING   SHVBLOCK,R1
       LA      R5,KAOFWAIT_ERROR
       ST      R5,SHVNAMA
       LA      R5,REPLY_AREA
       ST      R5,SHVVALA
       LA      R5,L'KAOFWAIT_ERROR
       ST      R5,SHVNAML
       ST      R8,SHVVALL
       SR      R0,R0        NO ENVIRONMENT BLOCK
       ST      R0,SHVNEXT
       MVI     SHVCODE,SHVSTORE
       DROP    R1
       LINK       EP=IRXEXCOM,DCB=0,MF=(E,CALLIST),SF=(E,LINKLIST),    *
               PARAM=(EYEC,DUMMY,DUMMY,IRXSHVBSTG),VL=1
       B       SETRETCODE
SETRETCODE DS  0H
       L       R7,20(R10)
       L       R7,0(R7)
       USING   EVALBLOCK,R7
       MVC     EVALBLOCK_EVLEN,=F'2'
       MVC     EVALBLOCK_EVDATA(2),RETCODE
ENDPROG EQU    *
       L       R3,SAVEAREA+4
       STORAGE RELEASE,           free dynamic storage                 X
               LENGTH=DYNL,                                            X
               ADDR=(R11)
       SLR     R15,R15
       L       R14,12(R3)
       LM      R0,R12,20(R3)
       BR      R14
***********************************************************************
* This is the stimer exit routine. It is branched to by the stimer    *
* preprocessing routine that is set up to pass parameters. The        *
* registers on entry to this routine are:                             *
*                                                                     *
* R1: address of the aofwait dsect.                                   *
* R13: savearea                                                       *
* R14: place to return to.                                            *
* R15: address of stimerex
*
***********************************************************************
STIMEREX DS    0H
       PUSH    USING
       DROP    R12,R11
       STM     R14,R12,12(R13)     save os regs for stimer
       LR      R12,R15             get good base
       USING   STIMEREX,R12        tell assembler
       LR      R11,R1              get address of AOFWAIT dsect area
       USING   DYNAREA,R11         tell assembler
***********************************************************************
* The whole idea of this code is to post the ecb associated with the  *
* stimer. The ecb is now conviently addressable.                      *
***********************************************************************
       L       R1,TIMEOUTVAL
       LA      R2,STIMRECB         get address of stimer ecb
       POST    (R2),0              post ecb with comp code zero
***********************************************************************
* NOW WE WILL TERMINATE STIMER EXIT PROCESSING BY RESTORING REGISTERS *
* INCLUDING R1 AND R15 PREVIOUSLY DESTROYED. NOTE THAT THESE WERE     *
* SAVED IN THE DSECT AREA, WHICH WE STILL HAVE ADDRESSABILITY TO.     *
***********************************************************************
         L     R15,R15SAVED        restore R15
         L     R1,R1SAVED          restore R1
         L     R14,12(R13)         restore return address
         LM    R2,R12,28(R13)      restore everything else.
         BR    R14
         DROP  R11
         DROP  R12
         POP   USING
***********************************************************************
* Although this looks like real code, it's actually a mechanism used  *
* to pass a parameter to a stimer exit routine. We will preporcess the*
* routine with this one, which is copied to the dsect area.           *
***********************************************************************
STIMRPRE DS    0D
         DROP  R12,R11
         USING *,R15            on entry, r15 points to stimer exit.
         ST    R15,20(R15)      store register 15 in dsect area
         ST    R1,24(R15)       store register 1  in dsect area
         L     R1,PARMADDR      Load parameter r1 from dsect area
         L     R15,STMRADDR     load register 15 with "real" stimer
*                               exit routine
         BR    R15              branch to real stimer exit routine
STIMER_CODEL      EQU  *-STIMRPRE    length of code
R15SAVE           DS    A            room for R15
R1SAVE            DS    A            room for R1
STMRADDR          DC    A(STIMEREX)  address of real stimer exit
PARMADDR          DS    F            to be filled in by program.
STIMRPEN          DS    0H
*
PARMEND           DC    X'FFFFFFFFFFFFFFFF'
ERROR_TOKEN1      DC    C'AOFWAIT ECB FOR MESSAGE ALREADY EXISTS'
ERROR_TOKEN2      DC    C'ERROR IN CALL TO IEANTCR'
ERROR_FUNCTION    DC    C'ERROR IN SPECIFYING AOFWAIT FUNCTION'
ERROR_TIMEOUT     DC    C'AOFWAIT TIMED OUT WAITING FOR MESSAGE'
OK_FUNCTION       DC    C'OK'
KAOFWAIT_ERROR    DC    C'AOFWAIT_ERROR'
EYEC              DC    CL8'IRXEXCOM'
DUMMY             DC    A(0)
NT_PERSOPT        DC    A(IEANT_NOPERSIST)    persist option
NT_LEVEL          DC    A(IEANT_SYSTEM_LEVEL)
NT_NAMEC          EQU   *,16
                  DC    CL4'~AOF'
                  DC    CL12' '
              LTORG
*================================================================
DYNAREA       DSECT
SAVEAREA      DS    18F
REPLY_AREA    DS    CL120
ENTRYID_LENGTH DS   H
ENTRYID       DS    CL8
DWORD         DS    D
TIMEOUTVAL    DS    F
IEANTCR       DS    A
IEANTDL       DS    A
NT_TOKEN      DS    4A       token
              ORG   NT_TOKEN
NT_ECBPTR     DS    A
NT_ASCBPTR    DS    A
              ORG
NT_NAME       DS    CL16
              ORG   NT_NAME
NT_PREFIX     DS    CL4'~AOF'
NT_ENTRYID    DS    CL12' '
              ORG
NT_RETCODE    DS    F'0'
NTCR_PARMLIST   DS    5A
NTDL_PARMLIST   DS    4A
**
RETCODE       DS    H
**
LINKLIST      LINK    EP=IRXEXCOM,DCB=0,SF=L
CALLIST       CALL    ,(EYEC,DUMMY,DUMMY,IRXSHVBSTG),VL,MF=L
IRXSHVBSTG    DS      CL(SHVBLEN)
**
LISTECBS      DS    0F
              DC    A(0)            one for the AOFWTECB
              DC    X'80'
              DC    A(0)
AOFWTECB      DS    F                ecb for the aofwait function
STIMRECB      DS    F                ecb for the stimer.
**
STIMERD       DS    0D
              DS    CL(STIMER_CODEL)   length of code copied here
R15SAVED      DS    A
R1SAVED       DS    A
STIMREAL      DS    A
STIMPARM      DS    F
*
DYNL          EQU  *-SAVEAREA
         IRXSHVB
         IRXEVALB
         IEANTASM
         PRINT ON
         CVT   DSECT=YES
         IHAPSA
         END
