         MACRO
.**********************************************************************
.* Version level: AOF  Version 1.0                                    *
.*              : Written  9/20/07                                    *
.*              : Updated  5/29/14 to include descriptor code test    *
.*                                                                    *
.**********************************************************************
&EID     TABENTRY &MSG=,&ACTION=,&TEXT=,&TEST=,&ECHO=,&MATCHLIM=
         GBLA  &ENTCOUNT
         LCLA  &LOOPCNT,&LMATTEXT,&LTEXT
         LCLB  &BTEXT
         LCLC  &TTYPE,&STRSTAR,&STRLEN,&SEPCHAR,&MATTEXT
         LCLC  &ECHOVAR,&MLIMNMBR,&ENTRYID
&BTEXT   SETB  0
         AIF   (K'&MSG EQ 0).NOMSG
         AIF   (K'&ACTION EQ 0).NOACT
         AIF   ('&ACTION' EQ 'POST').ACTOK
         AIF   ('&ACTION' EQ 'NONE').ACTOK
&BTEXT   SETB  1
         AIF   ('&ACTION' EQ 'OSCMD').ACTOK
         AIF   ('&ACTION' EQ 'OSCMDT').ACTOK
         AIF   ('&ACTION' EQ 'REPLY').ACTOK
         AGO   .ACTBAD
.ACTOK   ANOP
.**********************************************************************
.* ONCE WE VERIFY THE CORRECTNESS OF THE MSG AND ACTION PARMS, WE     *
.* START GENERATING TSSO AOF CONTROL BLOCKS. THE CONTROL BLOCK HEADER *
.* IS GENERATED FIRST, FOLLOWED BY ANY TESTS THE USER MAY HAVE        *
.* SPECIFIED.                                                         *
.**********************************************************************
NENT&SYSNDX    DC    A(ENDE&SYSNDX)       ADDRESS OF NEXT MAJOR ENTRY
               DC    A(0)                 ADDRESS OF NEXT IDENT. ENTRY
.**********************************************************************
.*GENERATE THE MSG AND ACTION PARAMATERS, FOLLOWED BY THE TEXT        *
.*OPERAND.                                                            *
.**********************************************************************
         AIF   ('&MSG'(1,1) EQ '''').MSGQUO
MID&SYSNDX     DC    CL12'&MSG'          MESSAGE TO SEARCH FOR.
         AGO   .NOMSGQ
.MSGQUO  ANOP  ,
MID&SYSNDX     DC    CL12&MSG            MESSAGE TO SEARCH FOR.
.NOMSGQ  ANOP  ,
AID&SYSNDX     DC    CL8'&ACTION'        ACTION TYPE
               DS    0F
.**********************************************************************
.* ENSURE THAT MSG='*' IS NOT SPECIFIED UNLESS TEST PARAMETERS ARE ALSO
.* SPECIFIED.
.**********************************************************************
         AIF   ('&MSG' EQ '*' AND N'&TEST EQ 0).NTRAPALL
         AIF   (N'&TEST EQ 0).GENA0
.*
               DC    A(FIRT&SYSNDX)      ADDRESS OF FIRST TEST PARM
         AGO   .GENCOUNT
.*
.GENA0         ANOP
               DC    A(0)                NO TEST PARM FOR THIS ENTRY
               AGO   .GENCOUNT
.*
.GENCOUNT      ANOP
.**********************************************************************
.*UPDATE THE COUNT FIELD FOR GENERATION INTO THIS ENTRY. DEFINE A HALF*
.*WORD WITH THE CURRENT NUMBER                                        *
.**********************************************************************
&ENTCOUNT      SETA  &ENTCOUNT+1
               DC    AL2(&ENTCOUNT)     AOF ENTRY NUMBER &ENTCOUNT
               AGO   .GENECHO
.*
.GENECHO       ANOP
.**********************************************************************
.*CREATE THE ECHO PARAMETER BASED ON USER INPUT. USE THE FOLLOWING    *
.*TABLE TO DETERMINE ECHO PARAMETERS...                               *
.*                                                                    *
.*ECHO=YES :   DC  CL2'YE'                                            *
.*ECHO=NO  :   DC  CL2'NO'                                            *
.*ECHO=LOG :   DC  CL2'LO'                                            *
.*                                                                    *
.**********************************************************************
&ECHOVAR       SETC '&ECHO'
               AIF  ('&ECHOVAR' NE '').ECHOSPEC
&ECHOVAR       SETC 'NO'
.ECHOSPEC      ANOP
               AIF  ('&ECHOVAR' EQ 'YES').ECHOYES
               AIF  ('&ECHOVAR' EQ 'NO').ECHONO
               AIF  ('&ECHOVAR' EQ 'LOG').ECHOLOG
               AGO  .ECHOERR
.ECHOYES       ANOP
ECHO&ENTCOUNT  DC   CL2'YE'             ECHO = YES SPECIFIED.
               AGO  .ENDECHO
.*
.ECHONO        ANOP
ECHO&ENTCOUNT  DC   CL2'NO'             ECHO = NO  SPECIFIED.
               AGO  .ENDECHO
.*
.ECHOLOG       ANOP
ECHO&ENTCOUNT  DC   CL2'LO'             ECHO = LOG SPECIFIED.
               AGO  .ENDECHO
.*
.ENDECHO       ANOP
               AGO  .GENMLIM
.*
.*
.GENMLIM       ANOP
.**********************************************************************
.*CREATE THE MATCHLIM PARAMETER ENTRY BY GENERATING A FULLWORD WITH   *
.*THE USER SPECIFIED MATCHLIM COUNT. IF MATCHLIM IS NOT SPECIFIED,    *
.*IT WILL DEFAULT TO UNLIMITED MATCHING (I.E. ALWAYS PERFORM THE      *
.*ACTIONS SPECIFIED IN THE ACTION = PARAMETER.                        *
.*NOTE THAT THE DEFAULT VALUE "999999" WILL BE CHECKED BY TSSOSS09    *
.*AS A FLAG TO DEMONSTRATE NO MATCHLIM IS IN EFFECT.                  *
.**********************************************************************
&MLIMNMBR      SETC '&MATCHLIM'
               AIF  ('&MLIMNMBR' NE '').GOTMTCH
&MLIMNMBR      SETC '999999'
.GOTMTCH       ANOP
MLIM&SYSNDX    DC   AL4(&MLIMNMBR)      MATCH LIMIT VALUE.
.ENDMTCH       ANOP
.**********************************************************************
.*                                                                    *
.* NEXT, WE GENERATE THE 8 CHARACTER ENTRY ID THAT WAS SPECIFIED IN   *
.* THE LABEL FIELD OF THE TABENTRY MACRO.                             *
.*                                                                    *
.**********************************************************************
               AIF  (K'&EID  EQ 0).DEFEID
&ENTRYID       SETC '&EID'
               AGO  .GENEID
.*
.DEFEID        ANOP
.*
&ENTRYID       SETC 'ENTR&ENTCOUNT'
               AGO  .GENEID
.GENEID        ANOP
.*
EID&SYSNDX     DC   CL8'&ENTRYID'
               AGO  .GENTEXT
.*
.*
.*
.*
.GENTEXT       ANOP
               AIF   (K'&TEXT EQ 0).NOACTTEX
               AIF   (&BTEXT NE 1).TEXTERR
&LTEXT         SETA  K'&TEXT
&LTEXT         SETA  &LTEXT-2
               DC    AL2(ATEC&SYSNDX-ATEX&SYSNDX)    LENGTH OF ACT-TEXT
ATEX&SYSNDX    DC    C&TEXT             ACTION-TEXT
ATEC&SYSNDX    EQU   *
               AGO   .DOTESTS
.*
.NOACTTEX      ANOP
               AIF   ('&ACTION' EQ 'POST').ACTOK2
               AIF   ('&ACTION' EQ 'NONE').ACTOK2
               AGO   .INVMIX
.ACTOK2        ANOP
               DC    AL2(0)             NO ACTION-TEXT
               AGO   .DOTESTS
.*
.*
.DOTESTS ANOP
&LOOPCNT SETA  1
FIRT&SYSNDX    DS    0D
.*
.*
.**********************************************************************
.* WE ARE NOW READY TO GENERATE THE CONTROL BLOCKS TO REPRESENT ANY   *
.* TEST ENTRIES WE MAY HAVE FOUND. THE VARIABLE "TEST" CONTAINS AN    *
.* ARRAY OF SUCH ENTRIES. EACH LINE (ROW) CONTAINS THE FOLLOWING      *
.* VARIABLES:                                                         *
.*                                                                    *
.* TEST TYPE, SUBSTRING OR WORD START, LENGTH, MATCHING STRING        *
.*                                                                    *
.* AND THE CONTROL BLOCK TO REPRESENT THIS WILL LOOK LIKE:            *
.*                                                                    *
.*     DC    A(NEXT TEST CONTROL BLOCK, OR ZERO)                      *
.*     DC    CL2'TEST TYPE'    S=SUBSTR  W=WORD  L=LINE               *
.*     DC    F'SUBSTRING OR WORD STARTING POINT OR LINE NO.'          *
.*                                                                    *
.* IF THE TEST IS FOR A 'S' OR 'W', THE FOLLOWING DATA IS PRESENT;    *
.*                                                                    *
.*     DC    F'LENGTH'                                                *
.*     DC    CL&LENGTH'MATCHING STRING'                               *
.*                                                                    *
.*                                                                    *
.* THE MACRO WILL LOOP, FOR THE NUMBER OF TEST ENTRIES SPECIFIED      *
.* GENERATING THESE CONTROL BLOCKS.                                   *
***********************************************************************
.TOPTLOOP ANOP
         AIF   (&LOOPCNT GT  N'&TEST).ENDTESTS
.*
         AIF   (&LOOPCNT EQ  N'&TEST).GENA02
               DC   A(NTE&LOOPCNT.&SYSNDX)
         AGO   .GENTTYPE
.*
.GENA02        DC   A(0)
         AGO   .GENTTYPE
.*
.GENTTYPE ANOP
.**********************************************************************
.* HERE, WE GENERATE THE TYPE OF TEST TO PERFORM. THE POSSIBLE TYPES
.* ARE:
.*
.* S  - PERFORM A SUBSTRING MATCHING TEST ON THE MESSAGE
.* SX - PERFORM A SUBSTRING EXCLUDED TEST ON THE MESSAGE
.* W  - PERFORM A WORD MATCHING TEST ON THE MESSAGE
.* WX - PERFORM A WORD EXCLUDED TEST ON THE MESSAGE
.* L  - PERFORM A LINE NUMBER MATCHING TEST ON THE MESSAGE
.* D  - PERFORM A DESCRIPTOR CODE MATCHING TEST ON THE MESSAGE
.**********************************************************************
&TTYPE   SETC  '&TEST(&LOOPCNT,1)'
         AIF   ('&TTYPE' EQ 'S').TYPEOK
         AIF   ('&TTYPE' EQ 'SX').TYPEOK
         AIF   ('&TTYPE' EQ 'W').TYPEOK
         AIF   ('&TTYPE' EQ 'WX').TYPEOK
         AIF   ('&TTYPE' EQ 'L').TYPEOK
         AIF   ('&TTYPE' EQ 'D').TYPEOK
         AGO   .TYPEBAD
.TYPEOK  ANOP
         DC    CL2'&TTYPE'       TYPE OF ENTRY
         DC    CL2' '            RESERVED, ALIGN TO WORD BOUNDARY
.**********************************************************************
.*
.* NEXT, GENERATE DESC OR, THE SUBSTRING OR WORD START POINT
.*
.**********************************************************************
         AIF   ('&TTYPE' NE 'D').STRSTDF
&DESCCDS SETC  '&TEST(&LOOPCNT,2)'
         DS    0F
         DC    XL2'&DESCCDS'       DESCRIPTOR CODES TO TEST
         DC    CL2'  '
         AGO   .BOTTLOOP
.STRSTDF ANOP
&STRSTAR SETC  '&TEST(&LOOPCNT,2)'
         DC    F'&STRSTAR'       START OF SUBSTR, NO. OF WORD OR LINE
         AIF   ('&TTYPE' EQ 'L').BOTTLOOP
.**********************************************************************
.*
.* NOW, WE GENERATE THE LENGTH THAT WE WILL COMPARE
.*
.**********************************************************************
&STRLEN  SETC  '&TEST(&LOOPCNT,3)'
         DC    F'&STRLEN'        LENGTH OF SUBSTRING OR WORD
.*
.**********************************************************************
.*
.* NOW, WE GENERATE THE POSSIBLE SEPERATOR CHARACTERS, IF THE TYPE WAS
.* FOR A WORD SEARCH. FIRST, CHECK IF THE TYPE WAS S OR W
.**********************************************************************
&SEPCHAR SETC  '&TEST(&LOOPCNT,5)'
         AIF   ('&TTYPE' EQ 'S').CHEKSERR    CHECK FOR AN ERROR
         AIF   ('&TTYPE' EQ 'SX').CHEKSERR    CHECK FOR AN ERROR
.**********************************************************************
.* TYPE WAS "W" - USE SEPCHARS
.**********************************************************************
         DC    CL4&SEPCHAR      SEPARATOR CHARS FOR ENTRY
         AGO   .GENMTEXT
.*
.CHEKSERR ANOP
         AIF   (K'&SEPCHAR EQ 0).GENNSEP
         AGO   .INVMIX
.*
.GENNSEP  ANOP
          DC   CL4' '            NO SEPARATOR FOR "S" TYPE ENTRY
         AGO   .GENMTEXT
.*
***********************************************************************
.* NOW, WE HAVE GENERATED ALL BUT THE MATCHING TEXT. WE GENERATED THE *
.* TEXT AS A STRING, PROCEDED BY A TWO BYTE LENGTH FIELD.             *
.**********************************************************************
.GENMTEXT ANOP
&MATTEXT  SETC  '&TEST(&LOOPCNT,4)'
&LMATTEXT SETA  K'&MATTEXT
&LMATTEXT SETA  &LMATTEXT-2             ACCOUNT FOR QUOTES
          DC   H'&LMATTEXT'             LENGTH OF MATCH-TEXT
          DC   C&MATTEXT                MATCH-TEXT
***********************************************************************
.* LASTLY, WE MUST GENERATE THE LABEL TO BE USED BY THE NEXT TEST     *
.* ENTRY, IF THERE IS ONE, AND INCREMENT &LOOPCNT                     *
.**********************************************************************
.BOTTLOOP ANOP
NTE&LOOPCNT.&SYSNDX   DS     0D
&LOOPCNT  SETA  &LOOPCNT+1
          AGO  .TOPTLOOP
.*
.ENDTESTS ANOP
.**********************************************************************
.* WHEN THE CONTROL BLOCKS FOR ALL THE APPROPRIATE TESTS HAVE BEEN    *
.* GENERATED, WE GENERATE THE LABEL FOR THE NEXT MSG ENTRY, IF WE     *
.* HAVE ONE.                                                          *
.**********************************************************************
ENDE&SYSNDX DS   0D
          AGO    .ENDIT
.**********************************************************************
.* ERROR ROUTINES TO GENERATE MNOTES GO HERE                          *
.*                                                                    *
.**********************************************************************
.NOMSG    ANOP
  MNOTE 12,'AOFG001A REQUIRED PARAMETER "MSG" MISSING'
          AGO    .ENDIT
.*
.NOACT    ANOP
  MNOTE 12,'AOFG002A REQUIRED PARAMETER "ACTION" MISSING'
          AGO    .ENDIT
.*
.ACTBAD   ANOP
  MNOTE 12,'AOFG003A ACTION PARAMETER INVALID'
          AGO    .ENDIT
.*
.INVMIX   ANOP
  MNOTE 12,'AOFG004A INVALID MIXTURE OF PARAMETERS- CHECK USER GUIDE'
          AGO    .ENDIT
.*
.TYPEBAD  ANOP
  MNOTE 12,'AOFG005A TYPE INVALID, MUST BE "S" OR "W"'
          AGO    .ENDIT
.*
.NTRAPALL ANOP
  MNOTE 12,'AOFG006A MSG = "*" WITH NO TEST PARAMETERS IS INVALID, AS'
  MNOTE 12,'AOFG006A (CONT) THIS WOULD TRAP ALL WTO MESSAGES'
          AGO    .ENDIT
.*
.ECHOERR  ANOP
  MNOTE 12,'AOFG007A IMPROPER SPECIFICATION OF ECHO PARAMETER'
  MNOTE 12,'AOFG007A TRY "YES", "NO" OR "LOG"'
          AGO    .ENDIT
.*
.TEXTERR  ANOP
  MNOTE 4,'AOFG008I TEXT PARAMETER INVALID FOR THIS ACTION. IGNORED'
          AGO    .NOACTTEX
.*
.ENDIT    ANOP
          MEXIT
          MEND
