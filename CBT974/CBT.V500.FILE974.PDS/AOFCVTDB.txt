          TITLE 'AOF EBCDIC DECIMAL TO BINARY CONVERT ROUTINES'
*PROCESS  USING(NOWARN)
AOFCVTDB CSECT ,
AOFCVTDB AMODE 31
AOFCVTDB RMODE ANY
***********************************************************************
* Subroutine name -
*
*         AOFCVTDB
*
* Function -
*
*         Converts the EBCDIC decimal field designated to a full word
*         of binary
*
* Attributes -
*
*         Serially reusable, reSIDent, called via BALR
*
* Entry points -
*
*         AOFCVTDB - Convert ebcdic decimal to binary
*
* Entry conditions -
*
* R1 -> parameters
*         PARM1 -> The first byte of the field
*         PARM2 -> Halfword containing the length of field
*         PARM3 -> Doubleword work area
*
* Exit conditions -
*
*         R1  = Full word of binary; if error R1 = 0
*         R15 = Return code
*
*         CC = 0; If error cc Â¬= 0
*
* Calls to other routines -
*
*         NONE
*
* External references -
*
*         NONE
*
* Tables / Work areas -
*
*         Workdword
*
* Register usage -
*
*         R11 = Work area base register
*         R12 = Base register
*         R14 = Return register
*
*         R0, R1, R2 = Work registers
*
*         All other registers are not used
*
* Notes -
*
*         None
*
* Operation -
*
*         1. Save registers.
*         2. If length greater than 10 digits indicate error.
*         3. Validity check all EBCDIC decimal digits.
*         4. Pack field.
*         5. If result is greater than 2**31-1 indicate error.
*         6. Convert result to binary.
*         7. Restore registers.
*
*.
*---------------------------------------------------------------------*
*- register usage                                                    -*
*---------------------------------------------------------------------*
R0      EQU    0                  work reg
R1      EQU    1                  work and parm reg
R2      EQU    2                  work reg
R3      EQU    3                  work reg
R4      EQU    4                  work reg
R5      EQU    5
R6      EQU    6
R7      EQU    7
R8      EQU    8
R9      EQU    9
R10     EQU    10
R11     EQU    11                 work area base
R12     EQU    12                 module base
R13     EQU    13                 linkage
R14     EQU    14                 linkage
R15     EQU    15                 linkage
***********************************************************************
* begin linkage convention
       BAKR    R14,0              save regs
       LR      R10,R1             Save parm pointer
       LA      R12,0(R15,0)       base and address regs
       USING   AOFCVTDB,R12       addressability
       MODID   ,                  eye catcher and date
***********************************************************************
          L     R1,0(,R10)
          L     R11,4(,R10)
          LH    R0,0(,R11)
          L     R11,8(,R10)
          USING WORKAREA,R11
          CH    R0,=H'10'      Greater than 10 digits ?
          BH    EXIT8
          LR    R2,R0          Get length of field
          BCTR  R2,0           Decrement for EX
DECCHK    CLI   0(R1),C'0'
          BL    EXIT8
          CLI   0(R1),C'9'
          BH    EXIT8
          LA    R1,1(,R1)
          BCT   R0,DECCHK
          L     R1,0(,R10)
          EX    R2,PACK        ...
          B     CHKMAX
PACK      PACK  WORKDWORD,0(*-*,R1) Executed PACK instruction
CHKMAX    DS    0H
          CP    WORKDWORD,=PL8'2147483647' Greater than 2**31-1 ?
          BH    EXIT8          Branch if yes
          CVB   R1,WORKDWORD   Convert to binary
          L     R15,=F'0'      Set return code to 0
          B     ENDPROG
EXIT8     EQU   *
          L     R1,=F'0'       return vaule 0
          L     R15,=F'8'      Set return code to 8
          B     ENDPROG
          SPACE 1
          EJECT
          LTORG
          EJECT
***********************************************************************
*  All done!!!!! now free up storage and exit                         *
***********************************************************************
ENDPROG  DS   0H
         PR                         Exit program
         EJECT
         LTORG ,
         EJECT
*---------------------------------------------------------------------*
*- work area                                                         -*
*---------------------------------------------------------------------*
WORKAREA DSECT
WORKDWORD DS    D
*
         END   AOFCVTDB
