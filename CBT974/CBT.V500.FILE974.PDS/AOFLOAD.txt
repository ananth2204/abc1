        TITLE  'TRU - LOAD AOF TABLE'
*PROCESS  USING(NOWARN)
AOFLOAD  CSECT ,
AOFLOAD  AMODE 31
AOFLOAD  RMODE ANY
***********************************************************************
*---------------------------------------------------------------------*
*- Register usage                                                    -*
*---------------------------------------------------------------------*
R0      EQU    0                  work reg
R1      EQU    1                  work and parm reg
R2      EQU    2                  work reg
R3      EQU    3                  work reg
R4      EQU    4                  work reg
R5      EQU    5                  pointer to end of the mdb
R6      EQU    6                  next mdb pointer
R7      EQU    7
R8      EQU    8
R9      EQU    9
R10     EQU    10
R11     EQU    11                 dynamic storage base
R12     EQU    12                 module base
R13     EQU    13                 linkage
R14     EQU    14                 linkage
R15     EQU    15                 linkage
***********************************************************************
* Return codes:                                                       *
*   None                                                              *
*                                                                     *
***********************************************************************
* Begin linkage convention
       BAKR    R14,0              Save regs
       LR      R10,R1             Save parm pointer
       USING   AOFCB,R10
       SAC     512                Set AR mode
       SYSSTATE ASCENV=AR         Let macros know
       LA      R12,0(R15,0)       Base and address regs
       USING   AOFLOAD,R12        Addressability
       MODID   ,                  Eye catcher and date
       STORAGE OBTAIN,LENGTH=DYNL Get dynamic storage
       LA      R11,0(0,R1)        Use R11 as dyn base
       LA      R2,DYNMODEL        Address of dynamic area model
       L       R3,=A(DYNL)        Length of dynamic area
       LA      R4,0(0,R11)        Address of dynamic area
       LR      R5,R3              Length of dynamic area
       MVCL    R4,R2              Copy model to dynamic area
       USING   DYNMODEL,R11       Map model over dynamic area
       LA      R13,SV             Put save area addr in R13
       MVC     4(4,R13),=C'F1SA'  sSt acro in save area
* Begin initialization
       SAC     0                  Set primary mode
       SYSSTATE ASCENV=P          Let macros know
************************************************************
*                                                          *
*        Get name of module to load                        *
*                                                          *
************************************************************
         CLC   TRUTABN(8),=CL8' '
         BNE   GETTABLE
         MVC   TRUTABN(8),=CL8'AOFTABL'
************************************************************
*                                                          *
*        Load the automated operator facility table        *
*                                                          *
************************************************************
GETTABLE DS    0H
         LA    R2,TRUTABN
         LOAD  EPLOC=(R2),LSEARCH=YES,ERRET=NOLOAD,                    X
               SF=(E,LOAD1D)
         LR    R6,R0                         Remember load address
         B     CHCKTABL
AOFLOADB DS    0H
         MVC   WTO05D+49(8),8(R7)
         WTO   MF=(E,WTO05D)          (MSG 05)
         B     ENDPROG
CHCKTABL DS    0H
         CLC   4(8,R6),=CL8'AOFTABL'         Make sure we really
*                                            have an AOF table
         BNE   TABNGOOD                      Darn
         CLC   44(8,R6),=CL8'AOF 1.0'        Check version number
         BNE   TABNGOO2                      Incorrect version
         ST    R6,TRUTABL
         MVC   WTO01D+37(8),TRUTABN
         WTO   MF=(E,WTO01D)           (MSG 01)
         B     ENDSTP16
TABNGOOD DS    0H                      ** Not an AOF table **
         MVC   WTO03D+20(8),TRUTABN
         WTO   MF=(E,WTO03D)           (MSG 03)
         B     BADE16                  Go to bad end of step 16
TABNGOO2 DS    0H                      ** Table at incorrect version **
         MVC   WTO04D+19(8),TRUTABN
         WTO   MF=(E,WTO04D)           (MSG 04)
         B     BADE16                  Go to bad end of step 16
NOLOAD   DS    0H
         MVC   WTO02D+20(8),TRUTABN
         WTO   MF=(E,WTO02D)           (MSG 02)
         B     BADE16A                 Go to bad end of step 16 w/o del
BADE16   DS    0H
         LA    R3,TRUTABN
         DELETE EPLOC=(R3)
BADE16A  DS    0H
         XR    R3,R3
         ST    R3,TRUTABL
         MVC   TRUTABN,=CL8'NONE'      Indicate no table
         B     ENDPROG
ENDSTP16 DS    0H
***********************************************************************
*  Table is now loaded and validated, go and build the index.         *
***********************************************************************
         L     R3,TRUTABL               Get pointer to actual table
         L     R2,52(,R3)               Point at entry count
         L     R2,0(,R2)                Get count of entries
         LA    R2,1(,R2)                Plus 1
         SLL   R2,4                     Assume worst,
*                                       all entries different
         LA    R2,4(,R2)                Plus header
         STORAGE OBTAIN,LENGTH=(2)      Get dynamic storage
         ST    R2,0(,R1)                Set length
         ST    R1,TRUBSTH               Save address of index block
         AR    R1,R2                    Point to real end
         SH    R1,=H'16'                Less an entry size
         MVC   4(L'AOFMSGID,R1),=CL12'ZZZZZZZZZZZZ' put in dummy entry
         XC    0(4,R1),0(R1)            Clear pointer
         ST    R1,TRUBSTS               Save pointer to start
         ST    R1,TRUBSTE               Save pointer to current last
         MVI   TRUBSTL+3,16             Set length
         L     R3,0(,R3)                Get address of first entry
         USING AOFNTRY,R3               Setup addressability
LPAOFN   DS    0H
         LTR   R3,R3                    Any entry
         BZ    ENDPROG                  All done, so exit
         CLC   AOFMSGID,=CL12'*'        Is it match all
         BNE   DORMSG                   No, do real message
         LA    R7,TRUALMS               Point to head of all msg
         ICM   R4,15,0(R7)              *TEST 6/9/2014
         B     CHAINNEW                 Chain it on
DORMSG   DS    0H                       Do real message
         LA    R1,AOFMSGID
         ST    R1,BSCANPRM1
         LA    R1,TRUBSTS
         ST    R1,BSCANPRM2
         LA    R1,BSCANPRM
         CALL  AOFBSCAN                 Call BSCAN
         LR    R7,R1
         LTR   R15,R15
         BZ    ADD                      +0 not in table, add it
         ICM   R4,15,0(R7)              *TEST 6/9/2014
         B     CHAINNEW                 +4 in table, chain it
*
**       Chain new AOF entry to previous entries or head
*
CHAINNEW ICM   R4,15,0(R7)              Get pointer to first
         BNZ   CHNLP                    If one exists then handlE
         ST    R3,0(,R7)                Set first entry
         B     CHNELP                   Now clear new tail
CHNLP    LR    R7,R4
         ICM   R4,15,AOFBNXT-AOFNTRY(R7) Any more
         BNZ   CHNLP
         ST    R3,AOFBNXT-AOFNTRY(,R7)  Chain new on
CHNELP   DS    0H
         XC    AOFBNXT,AOFBNXT          Clear new tail
         L     R3,AOFNXT                Point to next
         B     LPAOFN                   Go do next
*
**       Add in new entry to index
*
*                       Note
*                            - R7 points to entry
*                              That the new one should follow
*                            - TRUBSTS and TRUBSTE point to
*                              the end of current table. TRUBSTS
*                              will be modified by this routiNE
ADD      DS    0H                       Add in new entry
         LM    R4,R6,TRUBSTS            Get start and end ptrs
*
**       Compute length to move
*
         LR    R1,R7
         SR    R1,R4                    Get length to move
         BNM   ADDNTY                   Go and do move
*
**       ADD TO FRONT OF TABLE
*
         SR    R4,R6                    Get new low value
         ST    R4,TRUBSTS               Save new start
         MVC   4(L'AOFMSGID,R4),AOFMSGID         Set new message id
         XC    0(4,R4),0(R4)            Clear chain
         LR    R7,R4                    Point to entry to add
         ICM   R4,15,0(R7)              *TEST 6/9/2014
         B     CHAINNEW                 Put on chain
*
**       Add somewhere in table (even end)
*
ADDNTY   DS    0H
         AR    R1,R6                    Add in an entry
         LR    R0,R4                    Get old start
         SR    R0,R6                    Make it new start
         ST    R0,TRUBSTS
         LR    R5,R1                    Set old length
         MVCL  R0,R4                    Move front of table up
*                                       R7 will point to open entry
         MVC   4(L'AOFMSGID,R7),AOFMSGID Set new message id
         XC    0(4,R7),0(R7)            Clear chain
         ICM   R4,15,0(R7)              *TEST 6/9/2014
         B     CHAINNEW
***********************************************************************
*  All done!!!!! now free up storage and exit                         *
***********************************************************************
ENDPROG  DS   0H
       STORAGE RELEASE,           free dynamic storage                 X
               LENGTH=DYNL,                                            X
               ADDR=(R11)
         PR                         exit program
         EJECT
         LTORG ,
         EJECT
*---------------------------------------------------------------------*
*- Dynamic area model                                                -*
*---------------------------------------------------------------------*
DYNMODEL DS    0F
SV       DS    18F                save area
BSCANPRM DS    2F
         ORG   BSCANPRM
BSCANPRM1 DS   F
BSCANPRM2 DS   F
*
WTO01D   WTO   'AOF0001I AOF IS USING TABLE NAME XXXXXXXX FOR THE AUTOMx
               ATED OPERATIONS FACILITY',CONSID=,MF=L
*
WTO02D   WTO   'AOF2000S MODULE XXXXXXXX NOT FOUND, AUTOMATED OPERATIONX
               S FACILITY DEACTIVATED',DESC=1,MF=L
*
WTO03D   WTO   'AOF0003S MODULE XXXXXXXX IS NOT AN AUTOMATED OPERATIONSX
                FACILITY TABLE- FUNCTION DEACTIVATED',DESC=(1),MF=L
*
WTO04D   WTO   'AOF0004S TABLE XXXXXXXX IS AT AN INCORRECT LEVEL- REASSX
               EMBLE',DESC=1,MF=L
*
*
WTO05D   WTO   'AOF0005A AN ERROR HAS OCCURED LOADING MODULE XXXXXXXX',X
               DESC=(1),MF=L
*
        EJECT
LOAD1D   LOAD  EPLOC=0,LSEARCH=YES,ERRET=AOFLOADB,                     X
               SF=L
DYNL    EQU    *-DYNMODEL         dynamic area length
         AOFNTRY
         AOFCB
         END   AOFLOAD
