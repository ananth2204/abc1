         TITLE 'BINARY SEARCH ROUTINE'
***********************************************************************
*                                                                     *
* Binary search routine - generalized                                 *
*                                                                     *
* This routine will scan the index table built when the AOF table     *
* was loaded. The index table has the message ids in alphabetical     *
* order (std collating seq.). This allows the table to be searched    *
* via the binary search method.                                       *
*                                                                     *
* Input                                                               *
*   R1  --  Points to parameter list                                  *
*       Parameters                                                    *
*       1) Address of field to compare to                             *
*       2) Address of a three word field containing                   *
*          Address of start of table                                  *
*          Address of end of table                                    *
*          Length of table (must be a power of 2)                     *
*   R13 --  Save area address                                         *
*   R14 --  Return address                                            *
* Output                                                              *
*   R1  --  Return parameter (see below)                              *
*   R15 --  Return code                                               *
* Return codes                                                        *
*    0  --  Not found                                                 *
*             R1 points to item to insert after                       *
*    4  --  Found                                                     *
*             R1 points to match                                      *
*                                                                     *
*                                                                     *
***********************************************************************
*PROCESS  USING(NOWARN)
AOFBSCAN CSECT ,
AOFBSCAN AMODE 31
AOFBSCAN RMODE ANY
***********************************************************************
*---------------------------------------------------------------------*
*- register usage                                                    -*
*---------------------------------------------------------------------*
R0      EQU    0                  work reg
R1      EQU    1                  work and parm reg
R2      EQU    2                  work reg
R3      EQU    3                  work reg
R4      EQU    4                  work reg
R5      EQU    5                  pointer to end of the mdb
R6      EQU    6                  next mdb pointer
R7      EQU    7
R8      EQU    8
R9      EQU    9
R10     EQU    10
R11     EQU    11
R12     EQU    12                 module base
R13     EQU    13                 linkage
R14     EQU    14                 linkage
R15     EQU    15                 linkage
***********************************************************************
* Begin linkage convention
***********************************************************************
       BAKR    R14,0              save regs
       LA      R12,0(R15,0)       base and address regs
       USING   AOFBSCAN,R12       addressability
       MODID   ,                  eye catcher and date
***********************************************************************
* Begin initialization
***********************************************************************
         L     R2,0(,R1)                Get address for compare field
         L     R1,4(,R1)                Get address for table scan
         LM    R4,R6,0(R1)              Load table scan parameters
         LNR   R3,R6                    Get -length for andinG
         LA    R8,4(R4)
BSLOOP   LR    R1,R5                    Get end address
         SR    R1,R4                    Get difference
         SRL   R1,1                     Divide by 2
         NR    R1,R3                    Round down to entry boundary
         AR    R1,R4                    Add in base of table
         CLC   0(12,R2),4(R1)           Do the compare
         BE    RET4                     If equal then all donE
         BH    BSHIGH                   Go handle high case
*    LOW - NEED TO GO CLOSER TO START
         CR    R1,R4                    Are we already at start of tbl
         BE    BSUPONE                  Not found, but need to adj R1
         LR    R5,R1                    Set new high to current
         SR    R5,R6                    Set new high to below current
         B     BSLOOP                   Try again
*    HIGH - NEED TO GO CLOSER TO END
BSHIGH   DS    0H
         CR    R1,R5                    Are we already at end of table
         BE    RET0                     Not found, R1 is ok
         LR    R4,R1                    Set new low to current
         AR    R4,R6                    Set new low above current
         B     BSLOOP                   Try again
BSUPONE  DS    0H
         SR    R1,R6                    Set pointer to one before
*                                       Canidate
RET0     DS    0H                       Exit not found
         SLR   R15,R15                  With return code 0
         B     EXIT
RET4     DS    0H                       Exit found
         LA    R15,4                    With return code 4
         B     EXIT
***********************************************************************
*  All done!!!!! now freE up storage and exit                         *
***********************************************************************
EXIT     DS   0H
         PR                         Exit program
         END   AOFBSCAN
