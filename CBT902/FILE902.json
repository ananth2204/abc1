{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220013355000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 470288, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 8, "INMDSNAM": "CBT.V500.FILE902.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 470288, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 470288, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE902.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\t\\x02'", "DS1TRBAL": "b'\\xcc\\x88'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xb0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xb0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x08\\xdb\\x00\\x05\\x08\\xdb\\x00\\x0e\\x00\\n'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04X\\x00\\x07\\x01\\x132O\\x01\\x132O\\x14(\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf8\\xf8@@@'", "ispf": {"version": "04.88", "flags": 0, "createdate": "2013-11-20T00:00:00", "modifydate": "2013-11-20T14:28:07", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-488"}, "text": "REGULAR CBT TAPE - VERSION 488    FILE:  902\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT488.FILE902\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 16 MEMBERS COUNTED; CUMULATIVE SIZE IS 4,118 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   11/20/13    14:28:07    UTC-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@FILE902": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x04X\\x00U\\x01\\x132O\\x01\\x132O\\x14'\\x00\\x0b\\x00\\x0b\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf8\\xf8@@@\"", "ispf": {"version": "04.88", "flags": 0, "createdate": "2013-11-20T00:00:00", "modifydate": "2013-11-20T14:27:55", "lines": 11, "newlines": 11, "modlines": 0, "user": "CBT-488"}, "text": "//***FILE 902 is from Jay Moseley and contains date conversion      *   FILE 902\n//*           routines written in Assembler.  These were originally *   FILE 902\n//*           written for Y2K purposes, but they can prove useful   *   FILE 902\n//*           in other situations as well.                          *   FILE 902\n//*                                                                 *   FILE 902\n//*           The structure of each of these programs allows them   *   FILE 902\n//*           to be called by COBOL programs and return the data    *   FILE 902\n//*           to the calling program.                               *   FILE 902\n//*                                                                 *   FILE 902\n//*           email:  dino@jaymoseley.com                           *   FILE 902\n//*                                                                 *   FILE 902\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "Y2KATOG": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x132O\\x01\\x132O\\x134\\x00\\xf1\\x00\\xf1\\x00\\x00\\xd1\\xc1\\xe8\\xd4\\xe8\\xf2\\xd2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2013-11-20T00:00:00", "modifydate": "2013-11-20T13:34:00", "lines": 241, "newlines": 241, "modlines": 0, "user": "JAYMY2K"}, "text": "         TITLE 'Y2KATOG - REBUILD GREGORIAN DATE FROM ASTRO NUMBER'\n*                                                                     *\n*   YY   YY   222   KK   KK    A   TTTTTTTT  OOOOO   GGGGG            *\n*   YY   YY  2   2  KK  KK    AAA     TT    OO   OO GG   GG           *\n*   YY   YY      2  KK KK    AA AA    TT    OO   OO GG   GG           *\n*    YY YY       2  KKKK    AA   AA   TT    OO   OO GG                *\n*     YYY     222   KKKK    AA   AA   TT    OO   OO GG  GGG           *\n*     YY     2      KK KK   AAAAAAA   TT    OO   OO GG   GG           *\n*     YY     2      KK  KK  AA   AA   TT    OO   OO GG   GG           *\n*     YY     22222  KK   KK AA   AA   TT     OOOOO   GGGGG            *\n*                                                                     *\n* ******************************************************************* *\n* ******************************************************************* *\n*    THIS SUBROUTINE REBUILDS THE GREGORIAN DATE (MMDDYYYY) FOR       *\n*    A GIVEN ASTRONOMICAL NUMBER                                      *\n*                                                                     *\n*    1.  VALID ASTRONOMICAL NUMBERS FOR THIS ROUTINE ARE 2305814+     *\n*        THROUGH 2962884+ (INCLUSIVE)                                 *\n*                                                                     *\n*    2.  THREE FIELDS ARE PASSED AS PARAMETERS TO THE ROUTINE:        *\n*        1)  A 7 BYTE FIELD CONTAINING THE ASTRONOMICAL NUMBER        *\n*            (IN ZONED-DECIMAL FORMAT) TO BE PROCESSED,               *\n*        2)  A 1 BYTE ZONED-DECIMAL RETURN CODE, AND                  *\n*        3)  AN 8 BYTE FIELD WHICH WILL RECEIVE THE OUTPUT DATE       *\n*            (IN ZONED-DECIMAL FORMAT).                               *\n*        THE ROUTINE WILL NOT ALTER THE ASTRONOMICAL NUMBER PASSED    *\n*        TO IT.                                                       *\n*                                                                     *\n*        SUGGESTED CALLING SYNTAX FOR ALC CALLERS:                    *\n*                                                                     *\n*                      CALL  Y2KATOG,(ANUM)                           *\n*                         . . .                                       *\n*             ANUM     DS    ZL7'2451544'                             *\n*             RC       DS    ZL1'0'                                   *\n*             DATE     DS    ZL8'0'                                   *\n*                                                                     *\n*        SUGGESTED CALLING SYNTAX FOR COBOL CALLERS:                  *\n*                                                                     *\n*             01  ATOG-PARAMETERS.                                    *\n*                 02  ANUM PIC 9(7) VALUE +2451544.                   *\n*                 02  RC   PIC 9(1) VALUE 0.                          *\n*                 02  DATE PIC 9(8) VALUE 0.                          *\n*             CALL 'Y2KATOG' USING ATOG-PARAMETERS.                   *\n*                                                                     *\n*    3.  THE POSSIBLE VALUES FOR THE RETURN CODE FIELD ARE:           *\n*                                                                     *\n*        0 INDICATES SUCCESSFUL EXECUTION OF THE ROUTINE.             *\n*                                                                     *\n*        2 INDICATES INVALID DATA WAS FOUND IN THE ANUM FIELD.        *\n*        INVALID DATA ARE DETERMINED IF THE FIELD'S LOW ORDER BYTE'S  *\n*        ZONE CONTAINS AN INVALID SIGN, (NOT ONE OF X'C', X'D', OR    *\n*        X'F'), OR IF THE PRECEDING BYTES' ZONES ARE OTHER THAN       *\n*        X'F', OR IF ANY BYTE'S LOW ORDER NIBBLE CONTAINS A VALUE     *\n*        GREATER THAN X'9'.                                           *\n*                                                                     *\n*        4 INDICATES THE VALUE OF THE ANUM SPECIFIED WAS NOT IN       *\n*        THE RANGE SPECIFIED IN 1 (ABOVE).                            *\n*                                                                     *\n*    4.  UPON SUCCESSFUL EXECUTION, THE GREGORIAN DATE TO WHICH       *\n*        THE ASTRONOMICAL NUMBER CORRESPONDS WILL BE PLACED IN        *\n*        THE 3RD PARAMETER FIELD (DATE).  IF THE RETURN CODE IS       *\n*        A NON-ZERO VALUE (UNSUCCESSFUL EXECUTION), THE DATE          *\n*        FIELD WILL CONTAINS ZEROS.                                   *\n*                                                                     *\n* ******************************************************************* *\n* ******************************************************************* *\n         EJECT\nY2KATOG  CSECT\n*         PRINT NOGEN\n         EYEC  'CONVERT ASTRO DATE TO GREGORIAN'\n*\n         SAVE  (14,12)                 SAVE CALLER'S REGISTERS\n*\n         LR    R12,R15                 LOAD BASE WITH ENTRY ADDRESS\n         USING Y2KATOG,R12             ESTABLISH ADDRESSABILITY\n*\n         L     R11,0(,R1)              LOAD A(PARAMETERS)\n         USING $PARMS,R11              ESTABLISH ADDRESSABILITY\n*\n         GETMAIN R,LV=$DYNLEN          GETMAIN DYNAMIC WORKAREA\n         LR    R10,R1                  SAVE A(MEMORY)\n*\n         ST    R13,4(,R10)             STORE A(CALLER'S SAVE AREA)\n         ST    R10,8(,R13)             BACK CHAIN A(MY SAVE AREA)\n         LR    R13,R10                 SET A(MY SAVE AREA)\n         USING $DYNMEM,R13             ESTABLISH ADDRESSABILITY\n*\n*    INSERT EYECATCHER MARKS AT BEGIN/END OF GETMAIN'D AREA.\n*\n         MVC   TOPFLAG,=C'Y2KATOG GETMAIN BEGINS->'\n         MVC   BOTFLAG,=C'<-Y2KATOG GETMAIN ENDS'\n*\n*    INITIALIZE RETURN CODE AND DATE PARAMETER FIELDS.\n*\n         MVI   PRC,C'0'                ASSUME GOOD RETURN\n         MVC   PRC+1(8),PRC            NULL GREGORIAN DATE\n*\n*    TEST ANUM FOR INVALID CHARACTER\n*\n         LA    R2,PANUM                ADDRESS PASSED ANUM\n         LA    R3,6                    LENGTH OF FIELD MINUS 1\nP1VLOOP  CLI   0(R2),X'F0'             TEST LESS THAN C'0'\n         BL    P1ERR1                  IF YES, ANUM CONTAINS BAD DATA\n         CLI   0(R2),X'F9'             TEST GREATER THAN C'9'\n         BH    P1ERR1                  IF YES, ANUM CONTAINS BAD DATA\n         LA    R2,1(0,R2)              ADDRESS NEXT BYTE\n         BCT   R3,P1VLOOP              CONTINUE TESTING\n         IC    R3,0(,R2)               LOAD RIGHT-MOST CHARACTER\n         LR    R4,R3                   COPY INTO R4\n         N     R3,=F'15'               ISOLATE DIGIT PORTION\n         CH    R3,=H'9'                TEST GREATER THAN 9\n         BH    P1ERR1                  IF YES, ANUM CONTAINS BAD DATA\n         SRL   R4,4                    ISOLATE ZONE PORTION\n         CH    R4,=H'12'               TEST FOR 'C' ZONE\n         BE    P1OK1                   IF YES, ANUM IS VALID NUMERIC\n         CH    R4,=H'13'               TEST FOR 'D' ZONE\n         BE    P1OK1                   IF YES, ANUM IS VALID NUMERIC\n         CH    R4,=H'15'               TEST FOR 'F' ZONE\n         BE    P1OK1                   IF YES, ANUM IS VALID NUMERIC\n*\n*    ANUM CONTAINED AN INVALID CHARACTER\n*\nP1ERR1   MVI   PRC,C'2'                INDICATE BAD DATA\n         B     RETURN                  AND RETURN TO CALLER\n*\n*    TEST ANUM FOR VALID RANGE\n*\nP1OK1    PACK  TA(8),PANUM(7)          PACK PASSED ANUM\n         CP    TA(8),=P'2305814'       IS YEAR PRIOR TO 1601?\n         BL    P1ERR2                  IF YES, YEAR NOT VALID\n         CP    TA(8),=P'2962884'       IS YEAR AFTER 3399?\n         BNH   P1OK2                   IF NOT, YEAR IS VALID\n*\n*    ANUM CONTAINED AN INVALID VALUE (OUT OF RANGE)\n*\nP1ERR2   MVI   PRC,C'4'                INDICATE BAD VALUE\n         B     RETURN                  AND RETURN TO CALLER\n*\n*    CONVERT ANUM TO GREGORIAN DATE\n*\nP1OK2    MP    TA,=P'4'                MULTIPLY BY 4\n         SP    TA,=P'6884477'          SUBTRACT 6,884,477\n*\n         ZAP   TY,TA                   GET TA RESULT\n         DP    TY,=P'146097'           DIVIDE BY 146,097\n         ZAP   TD,TY+4(4)              SAVE REMAINDER\n         ZAP   TY,TY(4)                SHIFT QUOTIENT\n         MP    TY,=P'100'              MULTIPLY BY 100\n*\n         DP    TD,=P'4'                DIVIDE BY 4\n         ZAP   TD,TD(7)                SHIFT QUOTIENT\n*\n         ZAP   TA,TD                   GET TD RESULT\n         MP    TA,=P'4'                MULTIPLY BY 4\n         AP    TA,=P'3'                ADD 3\n*\n         ZAP   TX,TA                   GET TA RESULT\n         DP    TX,=P'1461'             DIVIDE BY 1,461\n         ZAP   TD,TX+5(3)              SAVE REMAINDER\n         ZAP   TX,TX(5)                SHIFT QUOTIENT\n         AP    TY,TX                   ADD TO PRIOR VALUE OF TY\n*\n         DP    TD,=P'4'                DIVIDE BY 4\n         ZAP   TD,TD(7)                SHIFT QUOTIENT\n         AP    TD,=P'1'                ADD 1\n*\n         ZAP   TA,TD                   GET PRIOR TD RESULT\n         MP    TA,=P'5'                MULTIPLY BY 5\n         SP    TA,=P'3'                SUBTRACT 3\n*\n         ZAP   TM,TA                   GET PRIOR TA RESULT\n         DP    TM,=P'153'              DIVIDE BY 153\n         ZAP   TD,TM+6(2)              SAVE REMAINDER\n         ZAP   TM,TM(6)                SHIFT QUOTIENT\n         AP    TM,=P'1'                ADD 1\n*\n         DP    TD,=P'5'                DIVIDE BY 5\n         ZAP   TD,TD(7)                SHIFT QUOTIENT\n         AP    TD,=P'1'                ADD 1\n*\n         ZAP   TMONTH,TM               TRUNCATE MONTH\n         CP    TMONTH,=P'11'           IS MONTH LESS THAN 11?\n         BL    COMP001                 YES\n         SP    TMONTH,=P'10'           SUBTRACT 10\n         B     COMP002                 CONTINUE\nCOMP001  AP    TMONTH,=P'2'            ADD 2\nCOMP002  ZAP   TDAY,TD                 TRUNCATE DAY\n         DP    TM,=P'11'               DIVIDE TM BY 11\n         ZAP   TYEAR,TM(6)             TRUNCATE QUOTIENT\n         AP    TYEAR,TY                FINISH YEAR\n*\n         UNPK  PMONTH,TMONTH           UNPACK MONTH\n         OI    PMONTH+1,X'F0'          CLEAR SIGN\n         UNPK  PDAY,TDAY               UNPACK DAY\n         OI    PDAY+1,X'F0'            CLEAR SIGN\n         UNPK  PYEAR,TYEAR             UNPACK YEAR\n         OI    PYEAR+3,X'F0'           CLEAR SIGN\n*\n*    RESTORE REGISTERS, FREE STORAGE, AND RETURN\n*\nRETURN   LR    R1,R13                  LOAD ADDRESS OF GETMAINED AREA\n         L     R13,4(,R13)             RELOAD PREVIOUS SAVE AREA\n         LA    R0,$DYNLEN              LOAD LENGTH OF GETMAINED AREA\n         FREEMAIN R,LV=(0),A=(1)       FREE GETMAINED AREA\n         RETURN (14,12),RC=0           RETURN TO CALLER WITH RC=0\n*\n         LTORG\n         EJECT\n* ******************************************************************* *\n* ***************************** EQUATES ***************************** *\n* ******************************************************************* *\n         YREGS\n* ******************************************************************* *\n         EJECT\n* ******************************************************************* *\n* ***************************** DSECTS ****************************** *\n* ******************************************************************* *\n$DYNMEM  DSECT                         DYNAMICALLY ALLOCATED MEMORY\nSAVEAREA DS    18F                     REGISTER SAVE AREA\nTOPFLAG  DS    CL24                    EYECATCHER\nTA       DS    PL8                     INTERMEDIATE ANSWER\nTX       DS    PL8                     INTERMEDIATE ANSWER\nTM       DS    PL8                     INTERMEDIATE ANSWER\nTD       DS    PL8                     INTERMEDIATE ANSWER\nTY       DS    PL8                     INTERMEDIATE ANSWER\nTMONTH   DS    PL2                     CALCULATED GREGORIAN MONTH\nTDAY     DS    PL2                     CALCULATED GREGORIAN DAY\nTYEAR    DS    PL4                     CALCULATED GREGORIAN YEAR\nBOTFLAG  DS    CL22                    EYECATCHER\n*\n$DYNLEN  EQU   (*-$DYNMEM)             LENGTH OF GETMAIN'D AREA\n*\n$PARMS   DSECT                         PARAMETERS FROM/TO CALLER\nPANUM    DS    ZL7                     ASTRONOMICAL NUMBER\nPRC      DS    ZL1                     RETURN CODE (0/2/4)\nPDATE    DS    0ZL8                    EXPANDED DATE\nPMONTH   DS    ZL2                       MONTH\nPDAY     DS    ZL2                       DAY\nPYEAR    DS    ZL4                       YEAR\n* ******************************************************************* *\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "Y2KCONV": {"ttr": 525, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x132O\\x01\\x132O\\x134\\x01|\\x01|\\x00\\x00\\xd1\\xc1\\xe8\\xd4\\xe8\\xf2\\xd2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2013-11-20T00:00:00", "modifydate": "2013-11-20T13:34:00", "lines": 380, "newlines": 380, "modlines": 0, "user": "JAYMY2K"}, "text": "         TITLE 'Y2KCONV - CONVERT DATES WITH 2 DIGIT YEARS'\n*                                                                     *\n*   YY   YY   222   KK   KK  CCCCC   OOOOO  NN   NN VV   VV           *\n*   YY   YY  2   2  KK  KK  CC   CC OO   OO NNN  NN VV   VV           *\n*   YY   YY      2  KK KK   CC   CC OO   OO NNN  NN VV   VV           *\n*    YY YY       2  KKKK    CC      OO   OO NNNN NN VV   VV           *\n*     YYY     222   KKKK    CC      OO   OO NN NNNN VV   VV           *\n*     YY     2      KK KK   CC   CC OO   OO NN  NNN  VV VV            *\n*     YY     2      KK  KK  CC   CC OO   OO NN  NNN   VVV             *\n*     YY     22222  KK   KK  CCCCC   OOOOO  NN   NN    V              *\n*                                                                     *\n* ******************************************************************* *\n* ******************************************************************* *\n*    THIS SUBROUTINE CONVERTS EXISTING DATE FIELDS WITH 2 DIGIT       *\n*    YEARS TO A YEAR 2000 COMPLIANT FORMAT                            *\n*                                                                     *\n*    1.  VALID INPUT MONTH VALUES (FOR FORMATS 1, 2, AND 3 INPUT      *\n*        DATES) FOR THIS ROUTINE ARE 01 THROUGH 12.                   *\n*                                                                     *\n*    2.  VALID INPUT DAY VALUES (FOR FORMATS 1, 2, AND 3 INPUT DATES) *\n*        FOR THIS ROUTINE ARE 01 THROUGH 31, WITH EXCEPTIONS FOR      *\n*        THE MONTHS LISTED:                                           *\n*             MONTH          MAXIMUM DAY VALUE                        *\n*              04                    30                               *\n*              06                    30                               *\n*              09                    30                               *\n*              11                    30                               *\n*              02                    28                               *\n*              02 DURING LEAP YEAR   29                               *\n*                                                                     *\n*    3.  VALID INPUT DAY OF YEAR VALUES (FOR FORMAT 4 INPUT DATE)     *\n*        FOR THIS ROUTINE ARE 001 THROUGH 365 (FOR NON-LEAP YEARS)    *\n*        OR 001 THROUGH 366 (FOR LEAP YEARS).                         *\n*                                                                     *\n*    4.  THE DATE FORMAT MUST BE ONE OF THE FOLLOWING (BASED UPON     *\n*        THE INPUT FORMAT CODE - PARAMETER 2):                        *\n*          A)  FORMAT 1 DATES MUST BE MMDDYY (U.S. 6)                 *\n*          B)  FORMAT 2 DATES MUST BE DDMMYY (EUROPEAN 6)             *\n*          C)  FORMAT 3 DATES MUST BE YYMMDD (FIPS 6)                 *\n*          D)  FORMAT 4 DATES MUST BE YYDDD (JULIAN 5)                *\n*        WHERE MM = THE 2 DIGIT MONTH VALUE, DD = THE 2 DIGIT DAY     *\n*        VALUE, YY = THE 2 DIGIT YEAR VALUE, AND DDD = THE 3 DIGIT    *\n*        ORDINAL DAY OF THE YEAR VALUE.                               *\n*                                                                     *\n*    5.  SEVEN FIELDS ARE PASSED AS PARAMETERS TO THE ROUTINE:        *\n*        1)  THE INPUT DATE (IN ZONED-DECIMAL FORMAT) TO BE CON-      *\n*            VERTED IN A SUB-FORMAT CORRESPONDING TO THE FORMAT       *\n*            CODE CONTAINED IN FIELD #2 (SEE 4 ABOVE).  (FORMAT 4     *\n*            DATES (5 BYTE JULIAN) MUST BE FOLLOWED BY A SLACK        *\n*            BYTE WHICH IS NOT ACCESSED BY THE ROUTINE)               *\n*        2)  A 1 BYTE FIELD CONTAINING THE FORMAT OF THE DATE IN      *\n*            FIELD #1 (IN ZONED-DECIMAL) AS SPECIFIED IN 4 (ABOVE).   *\n*        3)  A 2 BYTE FIELD CONTAINING THE YEAR AT WHICH THE CENTURY  *\n*            IS TO SWITCH FROM 1900 TO 2000 (IN ZONED-DECIMAL).  IF   *\n*            THIS FIELD CONTAINS 20, INPUT DATES WITH YEAR VALUES OF  *\n*            00 THROUGH 20 WILL EXPAND TO 2000 THROUGH 2020 AND       *\n*            INPUT DATES WITH YEAR VALUES OF 21 THROUGH 99 WILL       *\n*            EXPAND TO 1921 THROUGH 1999.                             *\n*        4)  A 1 BYTE ZONED-DECIMAL RETURN CODE.                      *\n*        5)  AN 8 BYTE FIELD WHICH WILL RECEIVE THE DATE IN GREGOR-   *\n*            IAN FORMAT (IN ZONED DECIMAL FORMAT).  THIS FIELD WILL   *\n*            BE RETURNED IN COMMERCIAL-8 FORMAT (MMDDYYYY).           *\n*        6)  A 7 BYTE FIELD WHICH WILL RECEIVE THE DATE IN JULIAN     *\n*            FORMAT (IN ZONED DECIMAL FORMAT).                        *\n*        7)  A 7 BYTE FIELD WHICH WILL RECEIVE THE ASTRONOMICAL       *\n*            NUMBER (IN ZONED DECIMAL FORMAT).                        *\n*        THE ROUTINE WILL NOT ALTER THE FIELDS PASSED TO IT (1-3).    *\n*                                                                     *\n*        SUGGESTED CALLING SYNTAX FOR ALC CALLERS:                    *\n*                                                                     *\n*                      CALL  Y2KCONV,(DATEIN)                         *\n*                         . . .                                       *\n*             DATEIN   DS    ZL6'010197'                              *\n*             DATEFMT  DS    ZL1'1'                                   *\n*             BREAK    DS    ZL2'20'                                  *\n*             RC       DS    ZL1'0'                                   *\n*             DATEG    DS    ZL8'00000000'                            *\n*             DATEJ    DS    ZL7'0000000'                             *\n*             ANUM     DS    ZL7'0000000'                             *\n*                                                                     *\n*        SUGGESTED CALLING SYNTAX FOR COBOL CALLERS:                  *\n*                                                                     *\n*             01  CONV-PARAMETERS.                                    *\n*                 02  DATEIN  PIC 9(6) VALUE 010197.                  *\n*                 02  DATEFMT PIC 9(1) VALUE 1.                       *\n*                 02  BREAK   PIC 9(2) VALUE 20.                      *\n*                 02  RC      PIC 9(1) VALUE 0.                       *\n*                 02  DATEG   PIC 9(8) VALUE 0.                       *\n*                 02  DATEJ   PIC 9(7) VALUE 0.                       *\n*                 02  ANUM    PIC 9(7) VALUE 0.                       *\n*             CALL 'Y2KCONV' USING CONV-PARAMETERS.                   *\n*                                                                     *\n*    6.  THE POSSIBLE VALUES FOR THE RETURN CODE FIELD ARE:           *\n*                                                                     *\n*        0 INDICATES SUCCESSFUL EXECUTION OF THE ROUTINE.             *\n*                                                                     *\n*        2 INDICATES INVALID DATA WAS FOUND IN THE INPUT DATE FIELD   *\n*        (3 FOR THE BREAK VALUE FIELD).  INVALID DATA ARE DETERMINED  *\n*        IF THE FIELD'S LOW ORDER BYTE'S ZONE CONTAINS AN INVALID     *\n*        SIGN, (NOT ONE OF X'C', X'D', OR X'F'), OR IF THE PRECEED-   *\n*        ING BYTES' ZONES ARE OTHER THAN X'F', OR IF ANY BYTE'S LOW   *\n*        LOW ORDER NIBBLE CONTAINS A VALUE GREATER THAN X'9'.         *\n*                                                                     *\n*        5 INDICATES THE VALUE OF THE DATE FORMAT CODE IS INVALID     *\n*        ('1', '2', '3', AND '4' ARE VALID).                          *\n*                                                                     *\n*        6 INDICATES THE VALUE OF THE MONTH SPECIFIED IN THE INPUT    *\n*        DATE FIELD WAS NOT IN THE RANGE SPECIFIED IN 1 (ABOVE).      *\n*                                                                     *\n*        8 INDICATES THE VALUE OF THE DAY SPECIFIED IN THE INPUT      *\n*        DATE FIELD WAS NOT IN THE RANGE SPECIFIED IN 2 OR 3          *\n*        (ABOVE) DEPENDING UPON THE INPUT DATE FORMAT.                *\n*                                                                     *\n*    7.  UPON SUCCESSFUL EXECUTION, THE GREGORIAN DATE WITH THE 4     *\n*        DIGIT YEAR WILL BE PLACED IN FIELD 5, THE JULIAN DATE WITH   *\n*        THE 4 DIGIT YEAR WILL BE PLACED IN FIELD 6, AND THE ASTRO-   *\n*        NOMICAL NUMBER FOR THE DATE WILL BE PLACE IN FIELD 7.  IF    *\n*        THE RETURN CODE IS A NON-ZERO VALUE (UNSUCCESSFUL EXECUTION) *\n*        RETURN FIELDS 5 THROUGH 7 WILL CONTAIN ZEROS.                *\n*                                                                     *\n* ******************************************************************* *\n* ******************************************************************* *\n         EJECT\nY2KCONV  CSECT\n*         PRINT NOGEN\n         EYEC  'CONVERT PRE-2000 DATE'\n*\n         SAVE  (14,12)                 SAVE CALLER'S REGISTERS\n*\n         LR    R12,R15                 LOAD BASE WITH ENTRY ADDRESS\n         USING Y2KCONV,R12             ESTABLISH ADDRESSABILITY\n*\n         L     R11,0(,R1)              LOAD A(PARAMETERS)\n         USING $PARMS,R11              ESTABLISH ADDRESSABILITY\n*\n         GETMAIN R,LV=$DYNLEN          GETMAIN DYNAMIC WORKAREA\n         LR    R10,R1                  SAVE A(MEMORY)\n*\n         ST    R13,4(,R10)             STORE A(CALLER'S SAVE AREA)\n         ST    R10,8(,R13)             BACK CHAIN A(MY SAVE AREA)\n         LR    R13,R10                 SET A(MY SAVE AREA)\n         USING $DYNMEM,R13             ESTABLISH ADDRESSABILITY\n*\n*    INSERT EYECATCHER MARKS AT BEGIN/END OF GETMAIN'D AREA.\n*\n         MVC   TOPFLAG,=C'Y2KCONV GETMAIN BEGINS->'\n         MVC   BOTFLAG,=C'<-Y2KCONV GETMAIN ENDS'\n*\n*    INITIALIZE OUTPUT FIELDS.\n*\n         MVI   PRC,C'0'                RETURN CODE\n         MVC   PRC+1(22),PRC           OUTPUT DATES\n*\n*    TEST INPUT FORMAT CODE FOR INVALID VALUE\n*\n         XR    R1,R1                   CLEAR WORK REGISTER\n         IC    R1,PFORM                GET FORMAT CODE\n         LA    R2,X'F1'                LOWEST VALID CODE\n         LA    R3,4                    HIGHEST VALID CODE\nFMTLOOP  CR    R1,R2                   IS FORMAT VALID?\n         BE    FORMOK                  YES, CONTINUE\n         LA    R2,1(,R2)               INCREMENT VALID CODE\n         BCT   R3,FMTLOOP              CONTINUE TESTING NEXT CODE\n         MVI   PRC,C'5'                INDICATE INVALID CODE\n         B     RETURN                  AND RETURN TO CALLER\n*\n*    TEST INPUT BREAK POINT FOR INVALID CHARACTER\n*\nFORMOK   LA    R2,PBREAK               ADDRESS BREAK VALUE\n         LA    R3,1                    LENGTH MINUS 1\n         MVI   PRC,C'3'                ASSUME INVALID DATA\n         BAL   R14,PTEST1              PERFORM TESTING ROUTINE\n         CLI   PRC,C'0'                DID BREAK TEST 'OK'?\n         BNE   RETURN                  IF NOT, RETURN TO CALLER\n*\n*    TEST INPUT DATE FOR INVALID CHARACTER\n*\n         LA    R2,PDATEG               ADDRESS DATE FIELDS\n         LA    R3,5                    LENGTH MINUS 1 (FOR FORMAT 1)\n         MVI   PRC,C'2'                ASSUME INVALID DATA\n         CLI   PFORM,C'1'              IS IT FORMAT 1?\n         BE    F1CALL                  YES, GO TEST IT\n         BCTR  R3,0                    NO, DECREMENT LENGTH\nF1CALL   BAL   R14,PTEST1              PERFORM TESTING ROUTINE\n         CLI   PRC,C'0'                DID DATE TEST 'OK'?\n         BNE   RETURN                  IF NOT, RETURN TO CALLER\n*\n*    BRANCH AROUND PERFORMED CODE TO CONTINUE\n*\n         B     PERCON                  CONTINUE\n*\n*    THIS ROUTINE SCANS FOR INVALIDS CHARACTER IN ZONED-DECIMAL\n*    PARAMETER FIELDS.  IT IS CALLED FOR BOTH DATE FIELDS.\n*\nPTEST1   EQU   *\nPT1LOOP  CLI   0(R2),X'F0'             TEST LESS THAN C'0'\n         BL    PT1ERR                  IF YES, DATE CONTAINS BAD DATA\n         CLI   0(R2),X'F9'             TEST GREATER THAN C'9'\n         BH    PT1ERR                  IF YES, DATE CONTAINS BAD DATA\n         LA    R2,1(0,R2)              ADDRESS NEXT BYTE\n         BCT   R3,PT1LOOP              CONTINUE TESTING\n         IC    R3,0(,R2)               LOAD RIGHT-MOST CHARACTER\n         LR    R4,R3                   COPY INTO R4\n         N     R3,=F'15'               ISOLATE DIGIT PORTION\n         CH    R3,=H'9'                TEST GREATER THAN 9\n         BH    PT1ERR                  IF YES, DATE CONTAINS BAD DATA\n         SRL   R4,4                    ISOLATE ZONE PORTION\n         CH    R4,=H'12'               TEST FOR 'C' ZONE\n         BE    PT1OK                   IF YES, DATE IS VALID NUMERIC\n         CH    R4,=H'13'               TEST FOR 'D' ZONE\n         BE    PT1OK                   IF YES, DATE IS VALID NUMERIC\n         CH    R4,=H'15'               TEST FOR 'F' ZONE\n         BE    PT1OK                   IF YES, DATE IS VALID NUMERIC\n*\n*    DATA CONTAINED AN INVALID CHARACTER.  SINCE THE ERROR RC WAS\n*    SET BY THE CALLER, JUST RETURN.\n*\nPT1ERR   BR    R14                     RETURN\n*\n*    DATA WAS VALID, SO RESET RETURN CODE TO GOOD AND RETURN.\n*\nPT1OK    MVI   PRC,C'0'                INDICATE GOOD DATA\n         BR    R14                     AND RETURN\n*\n*    THIS BRANCH POINT IS TO JUMP OVER PERFORMED ROUTINE ABOVE\n*\nPERCON   EQU   *\n*\n*    WHICH FORMAT IS COMING IN?\n*\n         CLI   PFORM,C'4'              FORMAT 4 (YYDDD)?\n         BNE   DATE6                   NO, GO TO 6 DIGIT DATES\n*\n*    PROCESSING INPUT FORMAT 4 (YYDDD)\n*\n         MVC   JDATEJ+4(3),PDATEJ+2    MOVE DDD PART OF FIELD\n         PACK  WORKY,PDATEJ(2)         PACK YY PART OF FIELD\n         BAL   R14,EXTYEAR             PERFORM YEAR EXTENSION\n         MVC   JDATEJ(4),WORKYZ+1      UNPACK EXTENDED DATE\n         LA    R1,JTOGPARM             ADDRESS OF Y2KJTOG PARMS\n         ST    R1,PLIST                STORE IN DYNAMIC AREA\n         LA    R1,PLIST                ADDRESS TO PASS\n         L     R15,=V(Y2KJTOG)         ADDRESS OF ROUTINE\n         BALR  R14,R15                 CALL ROUTINE\n*\n*    TEST RETURN CODE TO SEE IF JULIAN DATE PASSED LOGIC TEST\n*\n         MVC   PRC,RCJ                 SHARE RETURN CODE\n         CLI   RCJ,C'0'                GOOD RETURN CODE?\n         BNE   RETURN                  RETURN TO MY CALLER\n*\n*    RETURN CODE IS OK, MOVE FIELDS TO OUTPUT\n*\n         MVC   POUTG,JDATEG            MOVE GREGORIAN\n         MVC   POUTJ,JDATEJ            MOVE EXTENDED JULIAN\n         MVC   GDATEA,JDATEG           LOAD INPUT FOR LAST CALL\n         B     FINI                    GO DO COMMON FINISH\n*\n*    INPUT FORMAT IS PARSED ACCORDING TO DATE FORMAT CODE.\n*\nDATE6    CLI   PFORM,C'2'              FORMAT 1?\n         BE    DATE6I2                 YES, DO DDMMYY\n         CLI   PFORM,C'3'              FORMAT 2?\n         BE    DATE6I3                 YES, DO YYMMDD\nDATE6I1  MVC   GDATEG(4),PDATEG        MOVE MMDD PART OF FIELD\n         PACK  WORKY,PDATEG+4(2)       PACK YY PART OF FIELD\n         B     DATE6IX                 GO DO COMMON DATE6 PROCESS\nDATE6I2  MVC   GDATEG(2),PDATEG+2      MOVE DD PART OF FIELD\n         MVC   GDATEG+2(2),PDATEG      MOVE MM PART OF FIELD\n         PACK  WORKY,PDATEG+4(2)       PACK YY PART OF FIELD\n         B     DATE6IX                 GO DO COMMON DATE6 PROCESS\nDATE6I3  MVC   GDATEG(4),PDATEG+2      MOVE MMDD PART OF FIELD\n         PACK  WORKY,PDATEG(2)         PACK YY PART OF FIELD\nDATE6IX  BAL   R14,EXTYEAR             PERFORM YEAR EXTENSION\n         MVC   GDATEG+4(4),WORKYZ+1    UNPACK EXTENDED YEAR\n*\n*    CALL Y2KGTOJ TO DO VERIFY DATE AND DO 1ST CONVERSION\n*\n         LA    R1,GTOJPARM             ADDRESS OF Y2KGTOJ PARMS\n         ST    R1,PLIST                STORE IN DYNAMIC AREA\n         LA    R1,PLIST                ADDRESS TO PASS\n         L     R15,=V(Y2KGTOJ)         ADDRESS OF ROUTINE\n         BALR  R14,R15                 CALL ROUTINE\n*\n*    TEST RETURN CODE TO SEE IF GREGORIAN DATE PASSED LOGIC TEST\n*\n         MVC   PRC,RCG                 SHARE RETURN CODE\n         CLI   RCG,C'0'                GOOD RETURN CODE?\n         BNE   RETURN                  RETURN TO MY CALLER\n*\n*    RETURN CODE IS OK, MOVE FIELDS TO OUTPUT\n*\n         MVC   POUTG,GDATEG            MOVE MMDDYYYY TO OUTPUT\n         MVC   POUTJ,GDATEJ            MOVE JULIAN\n         MVC   GDATEA,GDATEG           LOAD INPUT FOR LAST CALL\n         B     FINI                    GO DO COMMON FINISH\n*\n*    THIS ROUTINE IS CALLED BY BOTH FORMAT ROUTINES ABOVE TO EXTEND\n*    THE 2 DIGIT YEAR TO 4 DIGITS.\n*\nEXTYEAR  PACK  WORKB,PBREAK            PACK BREAK POINT\n         ZAP   WORKY,WORKY             SET SIGN TO POSITIVE\n         ZAP   WORKB,WORKB             SET SIGN TO POSITIVE\n         CP    WORKY,WORKB             COMPARE PASSED YEAR TO IT\n         BH    IS1900                  IF ABOVE POINT, MAKE IT 1900\nIS2000   OC    WORKY,=X'020000'        ADD 20 BEFORE YY\n         B     EXTYEARF                COMMON FINISH\nIS1900   OC    WORKY,=X'019000'        ADD 19 BEFORE YY\nEXTYEARF UNPK  WORKYZ,WORKY            UNPACK THE RESULT\n         OI    WORKYZ+4,X'F0'          CLEAR SIGN\n         BR    R14                     AND RETURN\n*\n*    CALL Y2KGTOA TO GET THE ASTRONOMICAL NUMBER\n*\nFINI     LA    R1,GTOAPARM             ADDRESS OF Y2KGTOA PARMS\n         ST    R1,PLIST                STORE IN DYNAMIC AREA\n         LA    R1,PLIST                ADDRESS TO PASS\n         L     R15,=V(Y2KGTOA)         ADDRESS OF ROUTINE\n         BALR  R14,R15                 CALL ROUTINE\n*\n*    SHOULD BE ABLE TO IGNORE THE RETURN CODE HERE ... JUST COPY\n*    THE ASTRO NUMBER TO THE OUTPUT FIELD.\n*\n         MVC   PANUM,ANUM              WAS EXECUTION SUCCESSFUL?\n*\n*    RESTORE REGISTERS, FREE STORAGE, AND RETURN\n*\nRETURN   LR    R1,R13                  LOAD ADDRESS OF GETMAINED AREA\n         L     R13,4(,R13)             RELOAD PREVIOUS SAVE AREA\n         LA    R0,$DYNLEN              LOAD LENGTH OF GETMAINED AREA\n         FREEMAIN R,LV=(0),A=(1)       FREE GETMAINED AREA\n         RETURN (14,12),RC=0           RETURN TO CALLER WITH RC=0\n*\n         LTORG\n         EJECT\n* ******************************************************************* *\n* ***************************** EQUATES ***************************** *\n* ******************************************************************* *\n         YREGS\n* ******************************************************************* *\n         EJECT\n* ******************************************************************* *\n* ***************************** DSECTS ****************************** *\n* ******************************************************************* *\n$DYNMEM  DSECT                         DYNAMICALLY ALLOCATED MEMORY\nSAVEAREA DS    18F                     REGISTER SAVE AREA\nTOPFLAG  DS    CL24                    EYECATCHER\nPLIST    DS    A                       PARMLIST ADDR FOR SUB CALLS\nGTOAPARM DS    0H                      PARAMETERS FOR Y2KGTOA\nGDATEA   DS    CL8                       INPUT DATE\nRCGTOA   DS    CL1                       RETURN CODE\nANUM     DS    CL7                       ASTRO NUMBER\nJTOGPARM DS    0H                      PARAMETERS FOR Y2KJTOG\nJDATEJ   DS    CL7                       INPUT DATE\nRCJ      DS    CL1                       RETURN CODE\nJDATEG   DS    CL8                       OUTPUT GREGORIAN DATE\nGTOJPARM DS    0H                      PARAMETERS FOR Y2KGTOJ\nGDATEG   DS    CL8                       INPUT DATE\nRCG      DS    CL1                       RETURN CODE\nGDATEJ   DS    CL7                       OUTPUT JULIAN DATE\nWORKB    DS    PL2                     WORK FIELD FOR COMPUTATION\nWORKY    DS    PL3                     WORK FIELD FOR COMPUTATION\nWORKYZ   DS    ZL5                     WORK FIELD FOR COMPUTATION\nBOTFLAG  DS    CL22                    EYECATCHER\n*\n$DYNLEN  EQU   (*-$DYNMEM)             LENGTH OF GETMAIN'D AREA\n*\n$PARMS   DSECT                         PARAMETERS FROM/TO CALLER\nPDATEG   DS    CL6                     GREGORIAN DATE FORMAT\n         ORG   PDATEG\nPDATEJ   DS    CL5                     JULIAN DATE FORMAT\n         ORG\nPFORM    DS    CL1                     FORMAT CODE OF INPUT DATE\nPBREAK   DS    ZL2                     YEAR WHERE 2000 BEGINS\nPRC      DS    CL1                     RETURN CODE (0, 2-6, 8)\nPOUTG    DS    CL8                     EXPANDED GREGORIAN\nPOUTJ    DS    CL7                     EXPANDED JULIAN\nPANUM    DS    CL7                     ASTRONOMICAL NUMBER\n* ******************************************************************* *\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "Y2KDFMT": {"ttr": 772, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x132O\\x01\\x132O\\x134\\x02P\\x02P\\x00\\x00\\xd1\\xc1\\xe8\\xd4\\xe8\\xf2\\xd2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2013-11-20T00:00:00", "modifydate": "2013-11-20T13:34:00", "lines": 592, "newlines": 592, "modlines": 0, "user": "JAYMY2K"}, "text": "         TITLE 'Y2KDFMT - FORMAT DATE FOR OUTPUT'\n*                                                                     *\n*   YY   YY   222   KK   KK DDDDDD  FFFFFFF M     MTTTTTTTT           *\n*   YY   YY  2   2  KK  KK  DD   DD FF      MM   MM   TT              *\n*   YY   YY      2  KK KK   DD   DD FF      MMM MMM   TT              *\n*    YY YY       2  KKKK    DD   DD FFFFF   MMMMMMM   TT              *\n*     YYY     222   KKKK    DD   DD FF      MM M MM   TT              *\n*     YY     2      KK KK   DD   DD FF      MM   MM   TT              *\n*     YY     2      KK  KK  DD   DD FF      MM   MM   TT              *\n*     YY     22222  KK   KK DDDDDD  FF      MM   MM   TT              *\n*                                                                     *\n* ******************************************************************* *\n* ******************************************************************* *\n*    THIS SUBROUTINE FORMATS A GIVEN GREGORIAN DATE (MMDDYYYY) IN     *\n*    A LARGE VARIETY OF FORMATS                                       *\n*                                                                     *\n*    1.  VALID INPUT YEARS FOR THIS ROUTINE ARE THE YEARS 1601        *\n*        THROUGH 3399 A. D. (INCLUSIVE)                               *\n*                                                                     *\n*    2.  VALID INPUT MONTH VALUES FOR THIS ROUTINE ARE 01 THROUGH 12. *\n*                                                                     *\n*    3.  VALID INPUT DAY VALUES FOR THIS ROUTINE ARE 01 THROUGH 31    *\n*        WITH EXCEPTIONS FOR THE MONTHS LISTED:                       *\n*             MONTH          MAXIMUM DAY VALUE                        *\n*              04                    30                               *\n*              06                    30                               *\n*              09                    30                               *\n*              11                    30                               *\n*              02                    28                               *\n*              02 DURING LEAP YEAR   29                               *\n*                                                                     *\n*    4.  THE DATE FORMAT MUST BE MMDDYYYY, WHERE MM = THE 2 DIGIT     *\n*        MONTH VALUE, DD = THE 2 DIGIT DAY VALUE, AND YYYY = THE      *\n*        4 DIGIT YEAR VALUE.                                          *\n*                                                                     *\n*    5.  THE MAJOR FORMAT CODE DETERMINES THE OVERALL OUTPUT FORMAT   *\n*        AND THE MINOR FORMAT CODE DETERMINES SUBTLE VARIATIONS OF    *\n*        THE FORMAT:                                                  *\n*          MAJOR                                  MINOR               *\n*            1 = COMMERCIAL (01051997)              1 = NO INSERT     *\n*            1 = COMMERCIAL (01 05 1997)            2 = SPACE         *\n*            2 = EUROPEAN   (05/01/1997)            3 = SLASH         *\n*            2 = EUROPEAN   (05-01-1997)            4 = HYPHEN        *\n*            3 = F.I.P.S.   (YYYY.MM.DD)            5 = PERIOD        *\n*          ---------------------------------------------------------  *\n*            4 = TEXT 1 (JANUARY 5, 1997)           1 = U.S.          *\n*            4 = TEXT 1 (5 JANUARY 1997)            2 = EUROPEAN      *\n*            5 = TEXT 2 (JAN 5, 1997)               1 = U.S.          *\n*            6 = TEXT 3 (SUNDAY, JANUARY 5, 1997)   1 = U.S.          *\n*            7 = TEXT 4 (SUNDAY, 5 JAN 1997)        2 = EUROPEAN      *\n*            8 = TEXT 5 (SUN, JANUARY 5, 1997)      1 = U.S.          *\n*            9 = TEXT 6 (SUN, 5 JAN 1997)           2 = EUROPEAN      *\n*                                                                     *\n*    6.  SIX FIELDS ARE PASSED AS PARAMETERS TO THE ROUTINE:          *\n*        1)  AN 8 BYTE FIELD CONTAINING THE DATE (IN ZONED-           *\n*            DECIMAL FORMAT) TO BE FORMATTED,                         *\n*        2)  A 1 BYTE ZONED-DECIMAL MAJOR FORMAT CODE (SEE 5 ABOVE),  *\n*        3)  A 1 BYTE ZONED-DECIMAL MINOR FORMAT CODE (SEE 5 ABOVE),  *\n*        4)  A 1 BYTE ZONED-DECIMAL RETURN CODE,                      *\n*        5)  A 2 BYTE FIELD WHICH WILL CONTAIN THE NUMBER OF BYTES    *\n*            PLACED IN THE FOLLOWING FIELD (IN ZONED DECIMAL FORMAT), *\n*        6)  AN OUTPUT FIELD TO RECEIVE THE FORMATTED DATE (NOTE:     *\n*            THE SIZE OF THIS FIELD DEPENDS UPON THE FORMATTING       *\n*            CODES ... IT IS THE CALLER'S RESPONSIBILITY TO PASS A    *\n*            FIELD LONG ENOUGH TO RECEIVE THE REQUESTED FORMAT).      *\n*        THE ROUTINE WILL NOT ALTER THE DATE OR FORMAT CODE FIELDS.   *\n*                                                                     *\n*        SUGGESTED CALLING SYNTAX FOR ALC CALLERS:                    *\n*                                                                     *\n*                      CALL  Y2KDFMT,(DATEIN)                         *\n*                         . . .                                       *\n*             DATEIN   DS    ZL8'01051997'                            *\n*             MAJOR    DS    CL1'1'                                   *\n*             MINOR    DS    CL1'3'                                   *\n*             RC       DS    ZL1'0'                                   *\n*             OUTSIZE  DS    ZL2'00'                                  *\n*             OUTDATE  DS    CL29' '                                  *\n*                                                                     *\n*        SUGGESTED CALLING SYNTAX FOR COBOL CALLERS:                  *\n*                                                                     *\n*             01  DFMT-PARAMETERS.                                    *\n*                 02  DATEIN  PIC 9(8) VALUE 01011997.                *\n*                 02  MAJOR   PIC 9(1) VALUE 1.\n*                 02  MINOR   PIC 9(1) VALUE 3.\n*                 02  RC      PIC 9(1) VALUE 0.                       *\n*                 02  OUTSIZE PIC 9(2) VALUE 0.                       *\n*                 02  OUTDATE PIC X(29).                              *\n*             CALL 'Y2KDFMT' USING DFMT-PARAMETERS.                   *\n*                                                                     *\n*    7.  THE POSSIBLE VALUES FOR THE RETURN CODE FIELD ARE:           *\n*                                                                     *\n*        0 INDICATES SUCCESSFUL EXECUTION OF THE ROUTINE.             *\n*                                                                     *\n*        2 INDICATES INVALID DATA WAS FOUND IN THE DATE FIELD.        *\n*        INVALID DATA ARE DETERMINED IF THE FIELD'S LOW ORDER         *\n*        BYTE'S ZONE CONTAINS AN INVALID SIGN, (NOT ONE OF            *\n*        X'C', X'D' OR X'F'), OR IF THE PRECEDING BYTES' ZONES        *\n*        ARE OTHER THAN X'F', OR IF ANY BYTE'S LOW ORDER NIBBLE       *\n*        CONTAINS A VALUE GREATER THAN X'9'.                          *\n*                                                                     *\n*        4 INDICATES THE VALUE OF THE YEAR SPECIFIED WAS NOT IN       *\n*        THE RANGE SPECIFIED IN 1 (ABOVE).                            *\n*                                                                     *\n*        6 INDICATES THE VALUE OF THE MONTH SPECIFIED WAS NOT IN      *\n*        THE RANGE SPECIFIED IN 2 (ABOVE).                            *\n*                                                                     *\n*        8 INDICATES THE VALUE OF THE DAY SPECIFIED WAS NOT IN        *\n*        THE RANGE SPECIFIED IN 3 (ABOVE).                            *\n*                                                                     *\n*        3 INDICATES THE VALUE OF THE MAJOR FORMAT CODE SPECIFIED     *\n*        WAS NOT ONE OF THE ACCEPTABLE VALUES (SEE 5 ABOVE).          *\n*                                                                     *\n*        5 INDICATES THE VALUE OF THE MINOR FORMAT CODE SPECIFIED     *\n*        WAS NOT ONE OF THE ACCEPTABLE VALUES FOR THE MAJOR FORMAT    *\n*        CODE SPECIFIED (SEE 5 ABOVE).                                *\n*                                                                     *\n*    8.  UPON SUCCESSFUL EXECUTION, THE FORMATTED DATE WILL BE        *\n*        PLACED IN THE 6TH PARAMETER FIELD AND THE NUMBER OF BYTES    *\n*        PLACED IN THE FIELD WILL BE PLACED IN THE 5TH FIELD.  IF     *\n*        THE RETURN CODE CONTAINS A NON-ZERO VALUE (UNSUCCESSFUL      *\n*        EXECUTION), THE 6TH FIELD WILL NOT BE MODIFIED BY THE        *\n*        ROUTINE AND THE 5TH FIELD WILL CONTAIN ZERO.                 *\n*                                                                     *\n* ******************************************************************* *\n* ******************************************************************* *\n         EJECT\nY2KDFMT  CSECT\n*         PRINT NOGEN\n         EYEC  'FORMAT DATE WITH FOR PRINT/DISPLAY'\n*\n         SAVE  (14,12)                 SAVE CALLER'S REGISTERS\n*\n         LR    R12,R15                 LOAD BASE WITH ENTRY ADDRESS\n         USING Y2KDFMT,R12             ESTABLISH ADDRESSABILITY\n*\n         L     R11,0(,R1)              LOAD A(PARAMETERS)\n         USING $PARMS,R11              ESTABLISH ADDRESSABILITY\n*\n         GETMAIN R,LV=$DYNLEN          GETMAIN DYNAMIC WORKAREA\n         LR    R10,R1                  SAVE A(MEMORY)\n*\n         ST    R13,4(,R10)             STORE A(CALLER'S SAVE AREA)\n         ST    R10,8(,R13)             BACK CHAIN A(MY SAVE AREA)\n         LR    R13,R10                 SET A(MY SAVE AREA)\n         USING $DYNMEM,R13             ESTABLISH ADDRESSABILITY\n*\n*    INSERT EYECATCHER MARKS AT BEGIN/END OF GETMAIN'D AREA.\n*\n         MVC   TOPFLAG,=C'Y2KDFMT GETMAIN BEGINS->'\n         MVC   BOTFLAG,=C'<-Y2KDFMT GETMAIN ENDS'\n*\n*    INITIALIZE RETURN CODE AND OUTPUT BYTE COUNT.\n*\n         MVI   PRC,C'0'                ASSUME GOOD RETURN\n         MVC   PRC+1(2),PRC            ZERO RETURN SIZE\n*\n*    CALL Y2KDOWN TO VERIFY DATE AND RETURN INTEGRAL DAY NUMBER.\n*\n         MVC   DDATE,PDATE             COPY YEAR TO Y2KDOWN PARM\n         LA    R1,DOWNPARM             ADDRESS OF Y2KDOWN PARMS\n         ST    R1,PLIST                STORE IN DYNAMIC AREA\n         LA    R1,PLIST                ADDRESS TO PASS\n         L     R15,=V(Y2KDOWN)         ADDRESS OF ROUTINE\n         BALR  R14,R15                 CALL ROUTINE\n*\n*    SEE IF DATE WE RECEIVED FROM CALLER PASSED EDITS IN Y2KDOWN.\n*    THIS MEANS WE DON'T HAVE TO REPEAT THE EDIT CODE HERE <G>!\n*\n         MVC   PRC,DRC                 ADOPT RECEIVED RETURN CODE\n         CLI   DRC,C'0'                WAS EXECUTION SUCCESSFUL?\n         BNE   RETURN                  IF NOT, EXIT TO CALLER\n*\n*    TEST MAJOR FORMAT CODE FOR INVALID VALUE.\n*\n         XR    R1,R1                   CLEAR WORK REGISTER\n         IC    R1,PMAJOR               GET MAJOR FORMAT CODE\n         LA    R2,X'F1'                LOWEST VALID CODE\n         LA    R3,9                    HIGHEST VALID CODE\nMAJLOOP  CR    R1,R2                   IS FORMAT VALID?\n         BE    MAJOK                   YES, CONTINUE\n         LA    R2,1(,R2)               INCREMENT TO NEXT VALID CODE\n         BCT   R3,MAJLOOP              AND CONTINUE TESTING\n         MVI   PRC,C'3'                INDICATE INVALID CODE\n         B                             RETURN\n*\n*    TEST MINOR FORMAT CODE FOR INVALID VALUE.\n*\nMAJOK    IC    R1,PMINOR               GET MINOR FORMAT CODE\n         LA    R2,X'F1'                LOWEST VALID CODE\n         LA    R3,5                    HIGHEST VALID CODE FOR MAJ:1-3\n         CLI   PMAJOR,C'4'             IS MAJOR LESS THAN 4?\n         BL    MINLOOP                 YES, BEGIN TEST\n         LA    R3,2                    ELSE SET HIGHEST FOR MAJ:4-9\nMINLOOP  CR    R1,R2                   IS FORMAT VALID?\n         BE    MINOK                   YES, CONTINUE\n         LA    R2,1(,R2)               INCREMENT TO NEXT VALID CODE\n         BCT   R3,MINLOOP              AND CONTINUE TESTING\n         MVI   PRC,C'5'                INDICATE INVALID CODE\n         B                             RETURN\n*\n*    BRANCH TO FORMAT ROUTINE BASED ON MAJOR FORMAT CODE\n*\nMINOK    XR    R3,R3                   CLEAR WORK REGISTER\n         IC    R3,PMAJOR               GET FORMAT NUMBER\n         N     R3,=F'15'               CLEAR SIGN\n         BCTR  R3,0                    DECREMENT BY 1 (ZERO BASED)\n         SLL   R3,2                    MULTIPLY BY 4 (LENGTH OF BRANCH)\n         LA    R3,MFMTBR(R3)           LOAD ADDRESS OF BRANCH\n         BR    R3                      GO BRANCH DEPENDING ON FORMAT\n*\n*    BRANCH TABLE TO SELECT ROUTINE FOR MAJOR FORMAT CODE\n*\nMFMTBR   B     MFMT1\n         B     MFMT2\n         B     MFMT3\n         B     MFMT4\n         B     MFMT5\n         B     MFMT6\n         B     MFMT7\n         B     MFMT8\n         B     MFMT9\n*\n*    MAJOR FORMAT CODE 1: COMMERCIAL (MMDDYYYY)\n*\nMFMT1    BAL   R9,MFMTSUB              GO GET SEPARATOR CHARACTOR\n         LA    R2,POUTDATE             LOAD OUTPUT AREA ADDRESS\n         MVC   0(2,R2),PDATE           MOVE MM\n         LA    R2,2(,R2)               BUMP OUTPUT ADDRESS\n         LTR   R3,R3                   IS THERE AN INSERTION CHAR?\n         BZ    MFMT1A                  NO, JUMP OVER\n         STC   R3,0(,R2)               INSERT CHARACTER\n         LA    R2,1(,R2)               BUMP OUTPUT ADDRESS\nMFMT1A   MVC   0(2,R2),PDATE+2         MOVE DD\n         LA    R2,2(,R2)               BUMP OUTPUT ADDRESS\n         LTR   R3,R3                   IS THERE AN INSERTION CHAR?\n         BZ    MFMT1B                  NO, JUMP OVER\n         STC   R3,0(,R2)               INSERT CHARACTER\n         LA    R2,1(,R2)               BUMP OUTPUT ADDRESS\nMFMT1B   MVC   0(4,R2),PDATE+4         MOVE YYYY\n         LA    R2,4(,R2)               BUMP OUTPUT ADDRESS\n         B     SETSIZE                 SET OUTPUT FIELD SIZE\n*\n*    MAJOR FORMAT CODE 2: EUROPEAN (DDMMYYYY)\n*\nMFMT2    BAL   R9,MFMTSUB              GO GET SEPARATOR CHARACTOR\n         LA    R2,POUTDATE             LOAD OUTPUT AREA ADDRESS\n         MVC   0(2,R2),PDATE+2         MOVE DD\n         LA    R2,2(,R2)               BUMP OUTPUT ADDRESS\n         LTR   R3,R3                   IS THERE AN INSERTION CHAR?\n         BZ    MFMT2A                  NO, JUMP OVER\n         STC   R3,0(,R2)               INSERT CHARACTER\n         LA    R2,1(,R2)               BUMP OUTPUT ADDRESS\nMFMT2A   MVC   0(2,R2),PDATE           MOVE MM\n         LA    R2,2(,R2)               BUMP OUTPUT ADDRESS\n         LTR   R3,R3                   IS THERE AN INSERTION CHAR?\n         BZ    MFMT2B                  NO, JUMP OVER\n         STC   R3,0(,R2)               INSERT CHARACTER\n         LA    R2,1(,R2)               BUMP OUTPUT ADDRESS\nMFMT2B   MVC   0(4,R2),PDATE+4         MOVE YYYY\n         LA    R2,4(,R2)               BUMP OUTPUT ADDRESS\n         B     SETSIZE                 SET OUTPUT FIELD SIZE\n*\n*    MAJOR FORMAT CODE 3: F.I.P.S. (YYYYMMDD)\n*\nMFMT3    BAL   R9,MFMTSUB              GO GET SEPARATOR CHARACTOR\n         LA    R2,POUTDATE             LOAD OUTPUT AREA ADDRESS\n         MVC   0(4,R2),PDATE+4         MOVE YYYY\n         LA    R2,4(,R2)               BUMP OUTPUT ADDRESS\n         LTR   R3,R3                   IS THERE AN INSERTION CHAR?\n         BZ    MFMT3A                  NO, JUMP OVER\n         STC   R3,0(,R2)               INSERT CHARACTER\n         LA    R2,1(,R2)               BUMP OUTPUT ADDRESS\nMFMT3A   MVC   0(2,R2),PDATE           MOVE MM\n         LA    R2,2(,R2)               BUMP OUTPUT ADDRESS\n         LTR   R3,R3                   IS THERE AN INSERTION CHAR?\n         BZ    MFMT3B                  NO, JUMP OVER\n         STC   R3,0(,R2)               INSERT CHARACTER\n         LA    R2,1(,R2)               BUMP OUTPUT ADDRESS\nMFMT3B   MVC   0(2,R2),PDATE+2         MOVE DD\n         LA    R2,2(,R2)               BUMP OUTPUT ADDRESS\n         B     SETSIZE                 SET OUTPUT FIELD SIZE\n*\n*    THIS SUBROUTINE PLACES THE INSERTION CHARACTER (IF ANY) INTO\n*    REGISTER 3 BASED UPON MINOR CODE 1 THROUGH 5 (USED BY MAJOR\n*    CODE ROUTINES 1 THROUGH 3 ABOVE.\n*\nMFMTSUB  XR    R3,R3                   ASSUME NO SEPARATOR\n         XR    R4,R4                   CLEAR WORK REGISTER\n         IC    R4,PMINOR               GET MINOR FORMAT NUMBER\n         N     R4,=F'15'               CLEAR SIGN\n         BCTR  R4,0                    DECREMENT BY 1 (ZERO BASED)\n         SLL   R4,2                    MULTIPLY BY 4 (LENGTH OF BRANCH)\n         LA    R4,MFMTSBR(R4)          LOAD ADDRESS OF BRANCH\n         BR    R4                      GO BRANCH DEPENDING ON FORMAT\n*\n*    BRANCH TABLE TO SELECT INSERTION CHARACTER\n*\nMFMTSBR  B     MFMTSC1                 NONE\n         B     MFMTSC2                 SPACE\n         B     MFMTSC3                 SLASH\n         B     MFMTSC4                 HYPHEN\n         B     MFMTSC5                 PERIOD\n*\nMFMTSC1  BR    R9                      RETURN TO MAJOR FORMAT\nMFMTSC2  LA    R3,C' '                 SPACE IS INSERTION CHARACTER\n         BR    R9                      RETURN TO MAJOR FORMAT\nMFMTSC3  LA    R3,C'/'                 SPACE IS INSERTION CHARACTER\n         BR    R9                      RETURN TO MAJOR FORMAT\nMFMTSC4  LA    R3,C'-'                 SPACE IS INSERTION CHARACTER\n         BR    R9                      RETURN TO MAJOR FORMAT\nMFMTSC5  LA    R3,C'.'                 SPACE IS INSERTION CHARACTER\n         BR    R9                      RETURN TO MAJOR FORMAT\n*\n*    MAJOR FORMAT CODE 4: TEXT 1 (MMMMMMMMM D, YYYY)\n*\nMFMT4    LA    R2,POUTDATE             LOAD OUTPUT AREA ADDRESS\n         CLI   PMINOR,C'2'             EUROPEAN?\n         BE    MFMT4A                  YES, USE ALTERNATE ORDER\n         BAL   R9,MMONTHN              MOVE MONTH NAME\n         BAL   R9,MDAY                 MOVE DAY OF MONTH\n         MVC   0(2,R2),=C', '          INSERT COMMA\n         LA    R2,2(,R2)               BUMP OUTPUT ADDRESS\n         B     MFMT4B                  CONTINUE\nMFMT4A   BAL   R9,MDAY                 MOVE DAY OF MONTH\n         MVI   0(R2),C' '              INSERT BLANK\n         LA    R2,1(,R2)               BUMP OUTPUT ADDRESS\n         BAL   R9,MMONTHN              MOVE MONTH NAME\nMFMT4B   MVC   0(4,R2),PDATE+4         MOVE YYYY\n         LA    R2,4(,R2)               BUMP OUTPUT ADDRESS\n         B     SETSIZE                 SET OUTPUT FIELD SIZE\n*\n*    MAJOR FORMAT CODE 5: TEXT 2 (MMM D, YYYY)\n*\nMFMT5    LA    R2,POUTDATE             LOAD OUTPUT AREA ADDRESS\n         CLI   PMINOR,C'2'             EUROPEAN?\n         BE    MFMT5A                  YES, USE ALTERNATE ORDER\n         BAL   R9,MMONTHA              MOVE MONTH ABBREVIATION\n         BAL   R9,MDAY                 MOVE DAY OF MONTH\n         MVC   0(2,R2),=C', '          INSERT COMMA\n         LA    R2,2(,R2)               BUMP OUTPUT ADDRESS\n         B     MFMT5B                  CONTINUE\nMFMT5A   BAL   R9,MDAY                 MOVE DAY OF MONTH\n         MVI   0(R2),C' '              INSERT BLANK\n         LA    R2,1(,R2)               BUMP OUTPUT ADDRESS\n         BAL   R9,MMONTHA              MOVE MONTH ABBREVIATION\nMFMT5B   MVC   0(4,R2),PDATE+4         MOVE YYYY\n         LA    R2,4(,R2)               BUMP OUTPUT ADDRESS\n         B     SETSIZE                 SET OUTPUT FIELD SIZE\n*\n*    MAJOR FORMAT CODE 6: TEXT 3 (DAYNAME, MMMMMMMMM D, YYYY)\n*\nMFMT6    LA    R2,POUTDATE             LOAD OUTPUT AREA ADDRESS\n         BAL   R9,MDAYN                MOVE DAY OF WEEK NAME\n         CLI   PMINOR,C'2'             EUROPEAN?\n         BE    MFMT6A                  YES, USE ALTERNATE ORDER\n         BAL   R9,MMONTHN              MOVE MONTH NAME\n         BAL   R9,MDAY                 MOVE DAY OF MONTH\n         MVC   0(2,R2),=C', '          INSERT COMMA\n         LA    R2,2(,R2)               BUMP OUTPUT ADDRESS\n         B     MFMT6B                  CONTINUE\nMFMT6A   BAL   R9,MDAY                 MOVE DAY OF MONTH\n         MVI   0(R2),C' '              INSERT BLANK\n         LA    R2,1(,R2)               BUMP OUTPUT ADDRESS\n         BAL   R9,MMONTHN              MOVE MONTH NAME\nMFMT6B   MVC   0(4,R2),PDATE+4         MOVE YYYY\n         LA    R2,4(,R2)               BUMP OUTPUT ADDRESS\n         B     SETSIZE                 SET OUTPUT FIELD SIZE\n*\n*    MAJOR FORMAT CODE 7: TEXT 4 (DAYNAME, MMM D, YYYY)\n*\nMFMT7    LA    R2,POUTDATE             LOAD OUTPUT AREA ADDRESS\n         BAL   R9,MDAYN                MOVE DAY OF WEEK NAME\n         CLI   PMINOR,C'2'             EUROPEAN?\n         BE    MFMT7A                  YES, USE ALTERNATE ORDER\n         BAL   R9,MMONTHA              MOVE MONTH ABBREVIATION\n         BAL   R9,MDAY                 MOVE DAY OF MONTH\n         MVC   0(2,R2),=C', '          INSERT COMMA\n         LA    R2,2(,R2)               BUMP OUTPUT ADDRESS\n         B     MFMT7B                  CONTINUE\nMFMT7A   BAL   R9,MDAY                 MOVE DAY OF MONTH\n         MVI   0(R2),C' '              INSERT BLANK\n         LA    R2,1(,R2)               BUMP OUTPUT ADDRESS\n         BAL   R9,MMONTHA              MOVE MONTH ABBREVIATION\nMFMT7B   MVC   0(4,R2),PDATE+4         MOVE YYYY\n         LA    R2,4(,R2)               BUMP OUTPUT ADDRESS\n         B     SETSIZE                 SET OUTPUT FIELD SIZE\n*\n*    MAJOR FORMAT CODE 8: TEXT 5 (DAY, MMMMMMMMM D, YYYY)\n*\nMFMT8    LA    R2,POUTDATE             LOAD OUTPUT AREA ADDRESS\n         BAL   R9,MDAYA                MOVE DAY OF WEEK ABBREVIATION\n         CLI   PMINOR,C'2'             EUROPEAN?\n         BE    MFMT8A                  YES, USE ALTERNATE ORDER\n         BAL   R9,MMONTHN              MOVE MONTH NAME\n         BAL   R9,MDAY                 MOVE DAY OF MONTH\n         MVC   0(2,R2),=C', '          INSERT COMMA\n         LA    R2,2(,R2)               BUMP OUTPUT ADDRESS\n         B     MFMT8B                  CONTINUE\nMFMT8A   BAL   R9,MDAY                 MOVE DAY OF MONTH\n         MVI   0(R2),C' '              INSERT BLANK\n         LA    R2,1(,R2)               BUMP OUTPUT ADDRESS\n         BAL   R9,MMONTHN              MOVE MONTH NAME\nMFMT8B   MVC   0(4,R2),PDATE+4         MOVE YYYY\n         LA    R2,4(,R2)               BUMP OUTPUT ADDRESS\n         B     SETSIZE                 SET OUTPUT FIELD SIZE\n*\n*    MAJOR FORMAT CODE 9: TEXT 6 (DAY, MMM D, YYYY)\n*\nMFMT9    LA    R2,POUTDATE             LOAD OUTPUT AREA ADDRESS\n         BAL   R9,MDAYA                MOVE DAY OF WEEK ABBREVIATION\n         CLI   PMINOR,C'2'             EUROPEAN?\n         BE    MFMT9A                  YES, USE ALTERNATE ORDER\n         BAL   R9,MMONTHA              MOVE MONTH NAME\n         BAL   R9,MDAY                 MOVE DAY OF ABBREVIATION\n         MVC   0(2,R2),=C', '          INSERT COMMA\n         LA    R2,2(,R2)               BUMP OUTPUT ADDRESS\n         B     MFMT9B                  CONTINUE\nMFMT9A   BAL   R9,MDAY                 MOVE DAY OF MONTH\n         MVI   0(R2),C' '              INSERT BLANK\n         LA    R2,1(,R2)               BUMP OUTPUT ADDRESS\n         BAL   R9,MMONTHA              MOVE MONTH ABBREVIATION\nMFMT9B   MVC   0(4,R2),PDATE+4         MOVE YYYY\n         LA    R2,4(,R2)               BUMP OUTPUT ADDRESS\n         B     SETSIZE                 SET OUTPUT FIELD SIZE\n*\n*    MOVE WEEKDAY NAME TO OUTPUT AREA FOLLOWED BY ', ' (COMMON\n*    ROUTINE PERFORMED BY MAJOR FORMAT CODE ROUTINES 6/7 ABOVE)\n*\nMDAYN    BAL   R8,LDAY                 GET ADDRESS/LENGTH OF DAYNAME\n         BCTR  R7,0                    DECREMENT LENGTH FOR EX\n         EX    R7,VARMOVE              MOVE DAY NAME\n         LA    R7,1(,R7)               RESTORE FULL NAME LENGTH\n         AR    R2,R7                   BUMP OUTPUT ADDRESS\n         MVC   0(2,R2),=C', '          INSERT COMMA/BLANK AFTER NAME\n         LA    R2,2(,R2)               BUMP OUTPUT ADDRESS\n         BR    R9                      AND RETURN\n*\n*    MOVE WEEKDAY ABBR TO OUTPUT AREA FOLLOWED BY ', ' (COMMON\n*    ROUTINE PERFORMED BY MAJOR FORMAT CODE ROUTINES 7/8 ABOVE)\n*\nMDAYA    BAL   R8,LDAY                 GET ADDRESS/LENGTH OF DAYNAME\n         LA    R7,2                    ABBR LENGTH MINUS 1 FOR EX\n         EX    R7,VARMOVE              MOVE DAY NAME\n         LA    R7,1(,R7)               RESTORE FULL MOVE LENGTH\n         AR    R2,R7                   BUMP OUTPUT ADDRESS\n         MVC   0(2,R2),=C', '          INSERT COMMA/BLANK AFTER NAME\n         LA    R2,2(,R2)               BUMP OUTPUT ADDRESS\n         BR    R9                      AND RETURN\n*\n*    MOVE MONTH NAME TO OUTPUT AREA FOLLOWED BY A BLANK (COMMON\n*    ROUTINE PERFORMED BY MAJOR FORMAT CODE ROUTINES 4/6/8 ABOVE)\n*\nMMONTHN  BAL   R8,LMONTH               GET ADDRESS/LENGTH OF MONTH\n         BCTR  R7,0                    DECREMENT LENGTH FOR EX\n         EX    R7,VARMOVE              MOVE MONTH NAME\n         LA    R7,1(,R7)               RESTORE FULL NAME LENGTH\n         AR    R2,R7                   BUMP OUTPUT ADDRESS\n         MVI   0(R2),C' '              INSERT BLANK AFTER NAME\n         LA    R2,1(,R2)               BUMP OUTPUT ADDRESS\n         BR    R9                      AND RETURN\nVARMOVE  MVC   0(0,R2),0(R6)           VARIABLE MOVE FOR EXECUTE\n*\n*    MOVE MONTH ABBR TO OUTPUT AREA FOLLOWED BY A BLANK (COMMON\n*    ROUTINE PERFORMED BY MAJOR FORMAT CODE ROUTINES 5/7/9 ABOVE)\n*\nMMONTHA  BAL   R8,LMONTH               GET ADDRESS/LENGTH OF MONTH\n         LA    R7,2                    ABBR LENGTH MINUS 1 FOR EX\n         EX    R7,VARMOVE              MOVE MONTH NAME\n         LA    R7,1(,R7)               RESTORE FULL MOVE LENGTH\n         AR    R2,R7                   BUMP OUTPUT ADDRESS\n         MVI   0(R2),C' '              INSERT BLANK AFTER NAME\n         LA    R2,1(,R2)               BUMP OUTPUT ADDRESS\n         BR    R9                      AND RETURN\n*\n*    MOVE DAY OF MONTH TO OUTPUT AREA (COMMON ROUTINE PERFORMED FROM\n*    MAJOR FORMAT CODE ROUTINES 4 THROUGH 9 ABOVE)\n*\nMDAY     CLI   PDATE+2,C'0'            IS FIRST DIGIT ZERO?\n         BNE   MDAY2                   NO, MOVE BOTH DIGITS\nMDAY1    MVC   0(1,R2),PDATE+3         MOVE ONLY RIGHT DIGIT\n         LA    R2,1(,R2)               BUMP OUTPUT ADDRESS\n         BR    R9                      AND RETURN\nMDAY2    MVC   0(2,R2),PDATE+2         MOVE BOTH DIGITS\n         LA    R2,2(,R2)               BUMP OUTPUT ADDRESS\n         BR    R9                      AND RETURN\n*\n*    LOAD ADDRESS OF DAY NAME IN R6, LENGTH IN R7 (COMMON ROUTINE\n*    PERFORMED FROM MDAYN AND MDAYA ABOVE)\n*\nLDAY     PACK  DWORK(1),DDOW(1)        PACK DAY INTEGRAL NUMBER\n         ZAP   DWORK(8),DWORK(1)       EXPAND TO DOUBLEWORD\n         CVB   R6,DWORK                CONVERT TO BINARY\n         MH    R6,=H'12'               MULTIPLY BY 12 (LENGTH OF ENTRY)\n         LA    R7,DNAME(R6)            LOAD ADDRESS OF NAME'S SIZE\n         LA    R6,2(,R7)               LOAD ADDRESS OF DAY'S NAME\n         LH    R7,0(,R7)               LOAD SIZE OF DAY'S NAME\n         BR    R8                      AND RETURN\n*\n*    LOAD ADDRESS OF MONTH NAME IN R6, LENGTH IN R7 (COMMON ROUTINE\n*    PERFORMED FROM MMONTHN AND MMONTHA ABOVE)\n*\nLMONTH   PACK  DWORK(2),PDATE(2)       PACK MONTH INTEGRAL NUMBER\n         ZAP   DWORK(8),DWORK(2)       EXPAND TO DOUBLEWORD\n         CVB   R6,DWORK                CONVERT TO BINARY\n         BCTR  R6,0                    DECREMENT BY 1 (ZERO BASED)\n         MH    R6,=H'12'               MULTIPLY BY 12 (LENGTH OF ENTRY)\n         LA    R7,MNAME(R6)            LOAD ADDRESS OF NAME'S SIZE\n         LA    R6,2(,R7)               LOAD ADDRESS OF MONTH'S NAME\n         LH    R7,0(,R7)               LOAD SIZE OF MONTH'S NAME\n         BR    R8                      AND RETURN\n*\n*    RETURN THE SIZE OF THE OUTPUT FIELD IN BYTES (COMMON ROUTINE\n*    BRANCHED TO BY ALL MAJOR FORMAT CODE ROUTINES ABOVE)\n*\nSETSIZE  LA    R1,POUTDATE             GET ADDRESS OF FIELD START\n         SR    R2,R1                   COMPUTE LENGTH OF FIELD\n         CVD   R2,DWORK                CONVERT TO DECIMAL\n         UNPK  DWORK(3),DWORK+6(2)     UNPACK SIZE\n         OI    DWORK+2,X'F0'           CLEAR SIGN\n         MVC   PSIZE,DWORK+1           MOVE TO OUTPUT FIELD\n*\n*    RESTORE REGISTERS, FREE STORAGE, AND RETURN\n*\nRETURN   LR    R1,R13                  LOAD ADDRESS OF GETMAINED AREA\n         L     R13,4(,R13)             RELOAD PREVIOUS SAVE AREA\n         LA    R0,$DYNLEN              LOAD LENGTH OF GETMAINED AREA\n         FREEMAIN R,LV=(0),A=(1)       FREE GETMAINED AREA\n         RETURN (14,12),RC=0           RETURN TO CALLER WITH RC=0\n*\n         EJECT\n* ******************************************************************* *\n* **************************** CONSTANTS **************************** *\n* ******************************************************************* *\n*\n*    DAY OF WEEK NAMES, PRECEEDED BY LENGTH ATTRIBUTE\n*\nDNAME    DC    H'6',CL10'MONDAY  '\n         DC    H'7',CL10'TUESDAY '\n         DC    H'9',CL10'WEDNESDAY'\n         DC    H'8',CL10'THURSDAY '\n         DC    H'6',CL10'FRIDAY  '\n         DC    H'8',CL10'SATURDAY '\n         DC    H'6',CL10'SUNDAY  '\n*\n*    MONTH NAMES, PRECEEDED BY LENGTH ATTRIBUTE\n*\nMNAME    DC    H'7',CL10'JANUARY '\n         DC    H'8',CL10'FEBRUARY '\n         DC    H'5',CL10'MARCH   '\n         DC    H'5',CL10'APRIL   '\n         DC    H'3',CL10'MAY     '\n         DC    H'4',CL10'JUNE    '\n         DC    H'4',CL10'JULY    '\n         DC    H'6',CL10'AUGUST  '\n         DC    H'9',CL10'SEPTEMBER'\n         DC    H'7',CL10'OCTOBER '\n         DC    H'8',CL10'NOVEMBER '\n         DC    H'8',CL10'DECEMBER '\n* ******************************************************************* *\n         LTORG\n         EJECT\n* ******************************************************************* *\n* ***************************** EQUATES ***************************** *\n* ******************************************************************* *\n         YREGS\n* ******************************************************************* *\n         EJECT\n* ******************************************************************* *\n* ***************************** DSECTS ****************************** *\n* ******************************************************************* *\n$DYNMEM  DSECT                         DYNAMICALLY ALLOCATED MEMORY\nSAVEAREA DS    18F                     REGISTER SAVE AREA\nTOPFLAG  DS    CL24                    EYECATCHER\nPLIST    DS    A                       PARMLIST ADDR FOR SUB CALLS\nDOWNPARM DS    0H                      PARAMETERS FOR Y2KDOWN\nDDATE    DS    CL8                       INPUT DATE\nDRC      DS    CL1                       RETURN CODE\nDDOW     DS    CL1                       INTEGRAL DAY OF WEEK\nDWORK    DS    D                       DOUBLEWORD WORK FIELD\nBOTFLAG  DS    CL22                    EYECATCHER\n*\n$DYNLEN  EQU   (*-$DYNMEM)             LENGTH OF GETMAIN'D AREA\n*\n$PARMS   DSECT                         PARAMETERS FROM/TO CALLER\nPDATE    DS    CL8                     DATE TO BE PROCESSED\nPMAJOR   DS    CL1                     MAJOR FORMAT CODE\nPMINOR   DS    CL1                     MINOR FORMAT CODE\nPRC      DS    CL1                     RETURN CODE (0, 2-6, 8)\nPSIZE    DS    CL2                     SIZE OF OUTPUT FIELD\nPOUTDATE DS    CL1                     OUTPUT DATE (SIZE WILL VARY!)\n* ******************************************************************* *\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "Y2KDOWN": {"ttr": 1028, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x132O\\x01\\x132O\\x134\\x00\\xb4\\x00\\xb4\\x00\\x00\\xd1\\xc1\\xe8\\xd4\\xe8\\xf2\\xd2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2013-11-20T00:00:00", "modifydate": "2013-11-20T13:34:00", "lines": 180, "newlines": 180, "modlines": 0, "user": "JAYMY2K"}, "text": "         TITLE 'Y2KDOWN - DETERMINES DAY NUMBER FOR DATE'\n*                                                                     *\n*   YY   YY   222   KK   KK DDDDDD   OOOOO  WW   WW NN   NN           *\n*   YY   YY  2   2  KK  KK  DD   DD OO   OO WW   WW NNN  NN           *\n*   YY   YY      2  KK KK   DD   DD OO   OO WW   WW NNN  NN           *\n*    YY YY       2  KKKK    DD   DD OO   OO WW   WW NNNN NN           *\n*     YYY     222   KKKK    DD   DD OO   OO WW W WW NN NNNN           *\n*     YY     2      KK KK   DD   DD OO   OO WWWWWWW NN  NNN           *\n*     YY     2      KK  KK  DD   DD OO   OO WWW WWW NN  NNN           *\n*     YY     22222  KK   KK DDDDDD   OOOOO   W   W  NN   NN           *\n*                                                                     *\n* ******************************************************************* *\n* ******************************************************************* *\n*    THIS SUBROUTINE DETERMINES THE INTEGRAL NUMBER OF THE DAY        *\n*    OF THE WEEK A GREGORIAN DATE (MMDDYYYY) FALLS ON                 *\n*                                                                     *\n*    1.  VALID INPUT YEARS FOR THIS ROUTINE ARE THE YEARS 1601        *\n*        THROUGH 3399 A. D. (INCLUSIVE)                               *\n*                                                                     *\n*    2.  VALID INPUT MONTH VALUES FOR THIS ROUTINE ARE 01 THROUGH 12. *\n*                                                                     *\n*    3.  VALID INPUT DAY VALUES FOR THIS ROUTINE ARE 01 THROUGH 31    *\n*        WITH EXCEPTIONS FOR THE MONTHS LISTED:                       *\n*             MONTH          MAXIMUM DAY VALUE                        *\n*              04                    30                               *\n*              06                    30                               *\n*              09                    30                               *\n*              11                    30                               *\n*              02                    28                               *\n*              02 DURING LEAP YEAR   29                               *\n*                                                                     *\n*    4.  THE DATE FORMAT MUST BE MMDDYYYY, WHERE MM = THE 2 DIGIT     *\n*        MONTH VALUE, DD = THE 2 DIGIT DAY VALUE, AND YYYY = THE      *\n*        4 DIGIT YEAR VALUE.                                          *\n*                                                                     *\n*    5.  THREE FIELDS ARE PASSED AS PARAMETERS TO THE ROUTINE:        *\n*        1)  AN 8 BYTE FIELD CONTAINING THE DATE (IN ZONED-DECIMAL    *\n*            FORMAT) TO BE PROCESSED,                                 *\n*        2)  A 1 BYTE ZONED-DECIMAL RETURN CODE, AND                  *\n*        3)  A 1 BYTE FIELD IN WHICH THE INTEGRAL DAY NUMBER (IN      *\n*            ZONED-DECIMAL FORMAT) WILL BE PLACED.                    *\n*        THE ROUTINE WILL NOT ALTER THE YEAR PASSED TO IT.            *\n*                                                                     *\n*        SUGGESTED CALLING SYNTAX FOR ALC CALLERS:                    *\n*                                                                     *\n*                      CALL  Y2KDOWN,(DATE)                           *\n*                         . . .                                       *\n*             DATE     DS    ZL8'04151997'                            *\n*             RC       DS    ZL1'0'                                   *\n*             DOWN     DS    ZL1'0'                                   *\n*                                                                     *\n*        SUGGESTED CALLING SYNTAX FOR COBOL CALLERS:                  *\n*                                                                     *\n*             01  DOWN-PARAMETERS.                                    *\n*                 02  DATE PIC 9(8) VALUE 04151997.                   *\n*                 02  RC   PIC 9(1) VALUE 0.                          *\n*                 02  DOWN PIC 9(1) VALUE 0.                          *\n*             CALL 'Y2KDOWN' USING DOWN-PARAMETERS.                   *\n*                                                                     *\n*    6.  THE POSSIBLE VALUES FOR THE RETURN CODE FIELD ARE:           *\n*                                                                     *\n*        0 INDICATES SUCCESSFUL EXECUTION OF THE ROUTINE.             *\n*                                                                     *\n*        2 INDICATES INVALID DATA WAS FOUND IN THE DATE FIELD.        *\n*        INVALID DATA ARE DETERMINED IF THE FIELD'S LOW ORDER         *\n*        BYTE'S ZONE CONTAINS AN INVALID SIGN, (NOT ONE OF            *\n*        X'C', X'A', X'E', OR X'F'), OR IF THE PRECEDING BYTES'       *\n*        ZONES ARE OTHER THAN X'F', OR IF ANY BYTE'S LOW ORDER        *\n*        NIBBLE CONTAINS A VALUE GREATER THAN X'9'.                   *\n*                                                                     *\n*        4 INDICATES THE VALUE OF THE YEAR SPECIFIED WAS NOT IN       *\n*        THE RANGE SPECIFIED IN 1 (ABOVE).                            *\n*                                                                     *\n*        6 INDICATES THE VALUE OF THE MONTH SPECIFIED WAS NOT IN      *\n*        THE RANGE SPECIFIED IN 2 (ABOVE).                            *\n*                                                                     *\n*        8 INDICATES THE VALUE OF THE DAY SPECIFIED WAS NOT IN        *\n*        THE RANGE SPECIFIED IN 3 (ABOVE).                            *\n*                                                                     *\n*    4.  UPON SUCCESSFUL EXECUTION, THE INTEGRAL DAY NUMBER ON WHICH  *\n*        THE INPUT DATE FALLS (0=MONDAY, 1=TUESDAY, ... 6=SUNDAY)     *\n*        WILL BE PLACED IN THE 3RD PARAMETER FIELD.  IF THE RETURN    *\n*        CODE IS A NON-ZERO VALUE (UNSUCCESSFUL EXECUTION), THE       *\n*        3RD PARAMETER FIELD WILL CONTAIN THE VALUE OF 9 TO PROTECT   *\n*        AGAINST UNINTENTIONAL USE OF AN INVALID RESULT.              *\n*                                                                     *\n* ******************************************************************* *\n* ******************************************************************* *\n         EJECT\nY2KDOWN  CSECT\n*         PRINT NOGEN\n         EYEC  'RETURN DAY OF WEEK FOR DATE'\n*\n         SAVE  (14,12)                 SAVE CALLER'S REGISTERS\n*\n         LR    R12,R15                 LOAD BASE WITH ENTRY ADDRESS\n         USING Y2KDOWN,R12             ESTABLISH ADDRESSABILITY\n*\n         L     R11,0(,R1)              LOAD A(PARAMETERS)\n         USING $PARMS,R11              ESTABLISH ADDRESSABILITY\n*\n         GETMAIN R,LV=$DYNLEN          GETMAIN DYNAMIC WORKAREA\n         LR    R10,R1                  SAVE A(MEMORY)\n*\n         ST    R13,4(,R10)             STORE A(CALLER'S SAVE AREA)\n         ST    R10,8(,R13)             BACK CHAIN A(MY SAVE AREA)\n         LR    R13,R10                 SET A(MY SAVE AREA)\n         USING $DYNMEM,R13             ESTABLISH ADDRESSABILITY\n*\n*    INSERT EYECATCHER MARKS AT BEGIN/END OF GETMAIN'D AREA.\n*\n         MVC   TOPFLAG,=C'Y2KDOWN GETMAIN BEGINS->'\n         MVC   BOTFLAG,=C'<-Y2KDOWN GETMAIN ENDS'\n*\n*    INITIALIZE RETURN CODE AND DAY OF WEEK NUMBER.\n*\n         MVI   PRC,C'0'                ASSUME GOOD RETURN\n         MVI   PDOWN,C'9'              UNDETERMINED DOWN\n*\n*    RETRIEVE ASTRONOMICAL NUMBER FOR DATE PASSED\n*\n         MVC   GDATE,PDATE             LOAD DATE TO PASS\n         LA    R1,GTOAPARM             ADDRESS OF Y2KGTOA PARMS\n         ST    R1,PLIST                STORE IN DYNAMIC AREA\n         LA    R1,PLIST                ADDRESS TO PASS\n         L     R15,=V(Y2KGTOA)         ADDRESS OF ROUTINE\n         BALR  R14,R15                 CALL ROUTINE\n*\n*    SEE IF DATE WE RECEIVED FROM CALLER PASSED EDITS IN Y2KGTOA.\n*    THIS MEANS WE DON'T HAVE TO REPEAT THE EDIT CODE HERE <G>!\n*\n         MVC   PRC,RCG                 ADOPT RECEIVED RETURN CODE\n         CLI   RCG,C'0'                WAS EXECUTION SUCCESSFUL?\n         BNE   RETURN                  IF NOT, EXIT TO CALLER\n*\n*    INTEGRAL DAY NUMBER IS THE REMAINDER OF ASTRO NUMBER / 7.\n*\nP1OK     PACK  WORK(8),ANUM(7)         PACK ASTRO NUMBER\n         DP    WORK,=P'7'              DIVIDE BY 7\n         UNPK  PDOWN,WORK+7(1)         UNPACK REMAINDER\n         OI    PDOWN,X'F0'             REMOVE SIGN\n*\n*    RESTORE REGISTERS, FREE STORAGE, AND RETURN\n*\nRETURN   LR    R1,R13                  LOAD ADDRESS OF GETMAINED AREA\n         L     R13,4(,R13)             RELOAD PREVIOUS SAVE AREA\n         LA    R0,$DYNLEN              LOAD LENGTH OF GETMAINED AREA\n         FREEMAIN R,LV=(0),A=(1)       FREE GETMAINED AREA\n         RETURN (14,12),RC=0           RETURN TO CALLER WITH RC=0\n*\n         LTORG\n         EJECT\n* ******************************************************************* *\n* ***************************** EQUATES ***************************** *\n* ******************************************************************* *\n         YREGS\n* ******************************************************************* *\n         EJECT\n* ******************************************************************* *\n* ***************************** DSECTS ****************************** *\n* ******************************************************************* *\n$DYNMEM  DSECT                         DYNAMICALLY ALLOCATED MEMORY\nSAVEAREA DS    18F                     REGISTER SAVE AREA\nTOPFLAG  DS    CL24                    EYECATCHER\nPLIST    DS    A                       PARMLIST ADDR FOR SUB CALLS\nGTOAPARM DS    0H                      PARAMETERS FOR Y2KGTOA\nGDATE    DS    CL8                       DATE INPUT\nRCG      DS    CL1                       RETURN CODE\nANUM     DS    ZL7                       ASTRO NUMBER\nWORK     DS    PL8                     WORK FIELD FOR DIVISION\nBOTFLAG  DS    CL22                    EYECATCHER\n*\n$DYNLEN  EQU   (*-$DYNMEM)             LENGTH OF GETMAIN'D AREA\n*\n$PARMS   DSECT                         PARAMETERS FROM/TO CALLER\nPDATE    DS    CL8                     DATE TO BE PROCESSED\nPRC      DS    CL1                     RETURN CODE (0/2/4/6/8)\nPDOWN    DS    CL1                     INTEGRAL DAY NUMBER\n* ******************************************************************* *\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "Y2KESTR": {"ttr": 1032, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x132O\\x01\\x132O\\x134\\x01(\\x01(\\x00\\x00\\xd1\\xc1\\xe8\\xd4\\xe8\\xf2\\xd2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2013-11-20T00:00:00", "modifydate": "2013-11-20T13:34:00", "lines": 296, "newlines": 296, "modlines": 0, "user": "JAYMY2K"}, "text": "         TITLE 'Y2KESTR - DETERMINES DATE ON WHICH EASTER FALLS'\n* ******************************************************************* *\n* ******************************************************************* *\n*  THIS PROGRAM IS COPYRIGHTED BY:  MR. JAY MOSELEY, CCP              *\n*                                   200 HEYWOOD AVE 1503              *\n*                                   SPARTANBURG, SC 29307-1792        *\n*  NO USE MAY BE MADE OF THE DESIGN, CODING STRUCTURE, OR ANY PART    *\n*  THEREOF WITHOUT THE EXPRESS WRITTEN PERMISSION OF THE AUTHOR IN    *\n*  ADVANCE.  (1996, 1997, 1998, 1999, 2000)                           *\n* ******************************************************************* *\n* ******************************************************************* *\n*                                                                     *\n*   YY   YY   222   KK   KK EEEEEE   SSSSS TTTTTTTT RRRRRR            *\n*   YY   YY  2   2  KK  KK  EE      SS   SS   TT    RR   RR           *\n*   YY   YY      2  KK KK   EE      SS        TT    RR   RR           *\n*    YY YY       2  KKKK    EEEE     SSSSS    TT    RR   RR           *\n*     YYY     222   KKKK    EE           SS   TT    RRRRRR            *\n*     YY     2      KK KK   EE      SS   SS   TT    RR RR             *\n*     YY     2      KK  KK  EE      SS   SS   TT    RR  RR            *\n*     YY     22222  KK   KK EEEEEEE  SSSSS    TT    RR   RR           *\n*                                                                     *\n* ******************************************************************* *\n* ******************************************************************* *\n*    THIS SUBROUTINE DETERMINES THE DATE ON WHICH EASTER FALLS        *\n*    FOR A GIVEN YEAR                                                 *\n*                                                                     *\n*    1.  VALID INPUT YEARS FOR THIS ROUTINE ARE THE YEARS 1601        *\n*        THROUGH 3399 A. D. (INCLUSIVE)                               *\n*                                                                     *\n*    2.  THREE FIELDS ARE PASSED AS PARAMETERS TO THE ROUTINE:        *\n*        1)  A 4 BYTE FIELD CONTAINING THE YEAR TO BE PROCESSED       *\n*            (IN ZONED-DECIMAL FORMAT),                               *\n*        2)  A 1 BYTE ZONED-DECIMAL RETURN CODE, AND                  *\n*        3)  AN 8 BYTE FIELD WHICH WILL RECEIVE THE GREGORIAN DATE    *\n*            ON WHICH EASTER FALLS (IN ZONED-DECIMAL FORMAT).         *\n*        THE ROUTINE WILL NOT ALTER THE YEAR PASSED TO IT.            *\n*                                                                     *\n*        SUGGESTED CALLING SYNTAX FOR ALC CALLERS:                    *\n*                                                                     *\n*                      CALL  Y2KESTR,(YEAR)                           *\n*                         . . .                                       *\n*             YEAR     DS    ZL4'1997'                                *\n*             RC       DS    ZL1'0'                                   *\n*             EASTER   DS    CL8'00000000'                            *\n*                                                                     *\n*        SUGGESTED CALLING SYNTAX FOR COBOL CALLERS:                  *\n*                                                                     *\n*             01  ESTR-PARAMETERS.                                    *\n*                 02  YEAR   PIC 9(4) VALUE 1997.                     *\n*                 02  RC     PIC 9(1) VALUE 0.                        *\n*                 02  EASTER PIC 9(8) VALUE 0.                        *\n*             CALL 'Y2KESTR' USING ESTR-PARAMETERS.                   *\n*                                                                     *\n*    3.  THE POSSIBLE VALUES FOR THE RETURN CODE FIELD ARE:           *\n*                                                                     *\n*        0 INDICATES SUCCESSFUL EXECUTION OF THE ROUTINE.             *\n*                                                                     *\n*        2 INDICATES INVALID DATA WAS FOUND IN THE YEAR FIELD.        *\n*        INVALID DATA ARE DETERMINED IF THE FIELD'S LOW ORDER         *\n*        BYTE'S ZONE CONTAINS AN INVALID SIGN, (NOT ONE OF            *\n*        X'C', X'A', X'E', OR X'F'), OR IF THE PRECEDING BYTES'       *\n*        ZONES ARE OTHER THAN X'F', OR IF ANY BYTE'S LOW ORDER        *\n*        NIBBLE CONTAINS A VALUE GREATER THAN X'9'.                   *\n*                                                                     *\n*        4 INDICATES THE VALUE OF THE YEAR SPECIFIED WAS NOT IN       *\n*        THE RANGE SPECIFIED IN 1 (ABOVE).                            *\n*                                                                     *\n*    4.  UPON SUCCESSFUL EXECUTION, THE GREGORIAN DATE (MMDDYYYY)     *\n*        ON WHICH EASTER FALLS FOR THE GIVEN YEAR WILL BE PLACED      *\n*        IN THE 3RD PARAMETER FIELD.  IF THE RETURN CODE IS A         *\n*        NON-ZERO VALUE (UNSUCCESSFUL EXECUTION), THE OUTPUT DATE     *\n*        FIELD WILL CONTAIN ZEROS.                                    *\n*                                                                     *\n* ******************************************************************* *\n* ******************************************************************* *\n         EJECT\nY2KESTR  CSECT\n         PRINT NOGEN\n         EYEC  'RETURN EASTER DATE FOR GIVEN YEAR'\n*\n         SAVE  (14,12)                 SAVE CALLER'S REGISTERS\n*\n         LR    R12,R15                 LOAD BASE WITH ENTRY ADDRESS\n         USING Y2KESTR,R12             ESTABLISH ADDRESSABILITY\n*\n         L     R11,0(,R1)              LOAD A(PARAMETERS)\n         USING $PARMS,R11              ESTABLISH ADDRESSABILITY\n*\n         GETMAIN R,LV=$DYNLEN          GETMAIN DYNAMIC WORKAREA\n         LR    R10,R1                  SAVE A(MEMORY)\n*\n         ST    R13,4(,R10)             STORE A(CALLER'S SAVE AREA)\n         ST    R10,8(,R13)             BACK CHAIN A(MY SAVE AREA)\n         LR    R13,R10                 SET A(MY SAVE AREA)\n         USING $DYNMEM,R13             ESTABLISH ADDRESSABILITY\n*\n*    INSERT EYECATCHER MARKS AT BEGIN/END OF GETMAIN'D AREA.\n*\n         MVC   TOPFLAG,=C'Y2KESTR GETMAIN BEGINS->'\n         MVC   BOTFLAG,=C'<-Y2KESTR GETMAIN ENDS'\n*\n*    INITIALIZE RETURN CODE AND EASTER OUTPUT DATE.\n*\n         MVI   PRC,C'0'                ASSUME GOOD RETURN\n         MVC   PRC+1(8),PRC            ZERO RETURN DATE\n*\n*    TEST YEAR FOR INVALID CHARACTER\n*\n         LA    R2,PYEAR                ADDRESS PASSED YEAR\n         LA    R3,3                    LENGTH MINUS 1\nP1VLOOP  CLI   0(R2),X'F0'             TEST LESS THAN C'0'\n         BL    P1ERR1                  IF YES, YEAR CONTAINS BAD DATA\n         CLI   0(R2),X'F9'             TEST GREATER THAN C'9'\n         BH    P1ERR1                  IF YES, YEAR CONTAINS BAD DATA\n         LA    R2,1(0,R2)              ADDRESS NEXT BYTE\n         BCT   R3,P1VLOOP              CONTINUE TESTING\n         IC    R3,0(,R2)               LOAD RIGHT-MOST CHARACTER\n         LR    R4,R3                   COPY INTO R4\n         N     R3,=F'15'               ISOLATE DIGIT PORTION\n         CH    R3,=H'9'                TEST GREATER THAN 9\n         BH    P1ERR1                  IF YES, YEAR CONTAINS BAD DATA\n         SRL   R4,4                    ISOLATE ZONE PORTION\n         CH    R4,=H'12'               TEST FOR 'C' ZONE\n         BE    P1OK1                   IF YES, YEAR IS VALID NUMERIC\n         CH    R4,=H'13'               TEST FOR 'D' ZONE\n         BE    P1OK1                   IF YES, YEAR IS VALID NUMERIC\n         CH    R4,=H'15'               TEST FOR 'F' ZONE\n         BE    P1OK1                   IF YES, YEAR IS VALID NUMERIC\n*\n*    YEAR CONTAINED AN INVALID CHARACTER\n*\nP1ERR1   MVI   PRC,C'2'                INDICATE BAD DATA\n         B     RETURN                  AND RETURN TO CALLER\n*\n*    TEST YEAR FOR VALID RANGE\n*\nP1OK1    PACK  P3(3),PYEAR             PACK PASSED YEAR\n         CP    P3(3),=P'1601'          IS YEAR PRIOR TO 1601?\n         BL    P1ERR2                  IF YES, YEAR NOT VALID\n         CP    P3(3),=P'3399'          IS YEAR AFTER 3399?\n         BNH   P1OK                    IF NOT, YEAR IS VALID\n*\n*    YEAR CONTAINED AN INVALID VALUE (OUT OF RANGE)\n*\nP1ERR2   MVI   PRC,C'4'                INDICATE BAD VALUE\n         B     RETURN                  AND RETURN TO CALLER\n*\n*    STEP 1: COMPUTE CENTURY NUMBER + 1.\n*\nP1OK     PACK  CENT,PYEAR(2)           DIVIDE BY 100\n         AP    CENT,=P'1'              ADD 1\n*\n*    STEP 2: COMPUTE NON-LEAP-YEAR CENTESIMALS.\n*\n         ZAP   P5,P3                   EXPAND FULL YEAR\n         SP    P5,=P'1600'             SUBTRACT 1600\n         DP    P5,=P'400'              DIVIDE BY 400\n         ZAP   T2,P5+1(2)              TAKE QUOTIENT\n         MP    T2,=P'3'                MULTIPLY BY 3\n         ZAP   P5,P5+3(2)              TAKE REMAINDER\n         DP    P5,=P'100'              DIVIDE BY 100\n         ZAP   T3,P5+2(1)              SAVE QUOTIENT\n         ZAP   NONL,T2                 COMBINE THE\n         AP    NONL,T3                   TWO ANSWERS\n*\n*    STEP 3: COMPUTE YEAR'S POSITION IN METONIC CYCLE.\n*\n         ZAP   P5,P3                   EXPAND FULL YEAR\n         DP    P5,=P'19'               DIVIDE BY 19\n         AP    P5+3(2),=P'1'           ADD 1 TO REMAINDER\n         ZAP   MET,P5+3(2)             SAVE ANSWER\n*\n*    STEP 4: COMPUTE CORRECTION FOR METONIC CYCLE.\n*\n         ZAP   P5,CENT                 EXPAND CENTURY NUMBER\n         MP    P5,=P'8'                MULTIPLY BY 8\n         AP    P5,=P'5'                ADD 5\n         DP    P5,=P'25'               DIVIDE BY 25\n         SP    P5(3),=P'5'             SUBTRACT 5\n         SP    P5(3),NONL              SUBTRACT NONL\n         ZAP   METC,P5+1(2)            SAVE ANSWER\n*\n*    STEP 5: COMPUTE DAY COUNT MODIFIER.\n*\n         ZAP   P5,P3                   EXPAND FULL YEAR\n         MP    P5,=P'5'                MULTIPLY BY 5\n         DP    P5,=P'4'                DIVIDE BY 4\n         SP    P5(4),NONL              SUBTRACT NONL\n         SP    P5(4),=P'10'            SUBTRACT 10\n         ZAP   DMOD,P5+1(3)            SAVE ANSWER\n*\n*    STEP 6: COMPUTE THE EPACT.\n*\n         ZAP   P5,MET                  TAKE THE METONIC POSITION\n         MP    P5,=P'11'               MULTIPLY BY 11\n         AP    P5,=P'20'               ADD 20\n         AP    P5,METC                 ADD THE METONIC CORRECTION\n         DP    P5,=P'30'               DIVIDE BY 30\n         ZAP   EPACT,P5+3(2)           SAVE THE ANSWER\n*\n*    STEP 7: DETERMINE THE EPACT VALUE.\n*\n         CP    EPACT,=P'25'            IS EPACT 25?\n         BNE   EADJ                    NO\n*\n*    STEP 8: DETERMINE THE METONIC CYCLE POSITION FOR EPACT ADJUSTMENT.\n*\n         CP    MET,=P'11'              IS METONIC CYCLE 11?\n         BNH   EADJ                    NO\n         AP    EPACT,=P'1'             ADD 1 TO EPACT\n*\n*    STEP 9: DETERMINE THE EPACT VALUE FOR ADJUSTMENT.\n*\nEADJ     CP    EPACT,=P'24'            IS EPACT 24?\n         BNE   DAYV                    NO\n         AP    EPACT,=P'1'             ADD 1 TO EPACT\n*\n*    STEP 10: COMPUTE VALUE OF DAY.\n*\nDAYV     ZAP   DAY,=P'44'              INITIALIZE DAY TO 44\n         SP    DAY,EPACT               SUBTRACT EPACT\n*\n*    STEP 11: DETERMINE DAY VALUE FOR ADJUSTMENT.\n*\n         CP    DAY,=P'21'              IS DAY 21 OR GREATER?\n         BNL   CANDA                   YES\n         AP    DAY,=P'30'              ADD 30 TO DAY\n*\n*    STEP 12: FIND MODIFIED DAY VALUE.\n*\nCANDA    ZAP   P4,DAY                  EXPAND DAY\n         AP    P4,=P'7'                ADD 7\n         ZAP   P5,DAY                  EXPAND DAY\n         AP    P5,DMOD                 ADD DMOD\n         DP    P5,=P'7'                DIVIDE BY 7\n         SP    P4,P5+4(1)              SUBTRACT REMAINDER\n         ZAP   DAY,P4+2(2)             SAVE ANSWER\n*\n*    STEP 13: FIND EXACT DATE:  IF DAY LESS THAN/EQUAL 31, EASTER IS\n*    03/DAY/YR ELSE EASTER IS 04/(DAY - 31)/YR.\n*\n         MVC   PEASTER(2),=C'03'       ASSUME MONTH IS MARCH\n         CP    DAY,=P'31'              IS DAY GREATER THAN 31?\n         BNH   MARCH                   NO\n         MVC   PEASTER(2),=C'04'       MONTH IS APRIL\n         SP    DAY,=P'31'              ADJUST DAY\nMARCH    UNPK  Z3,DAY                  UNPACK DAY\n         OI    Z3+2,X'F0'              CLEAR SIGN\n         MVC   PEASTER+2(2),Z3+1       MOVE DAY\n         MVC   PEASTER+4(4),PYEAR      MOVE YEAR\n*\n*    RESTORE REGISTERS, FREE STORAGE, AND RETURN\n*\nRETURN   LR    R1,R13                  LOAD ADDRESS OF GETMAINED AREA\n         L     R13,4(,R13)             RELOAD PREVIOUS SAVE AREA\n         LA    R0,$DYNLEN              LOAD LENGTH OF GETMAINED AREA\n         FREEMAIN R,LV=(0),A=(1)       FREE GETMAINED AREA\n         RETURN (14,12),RC=0           RETURN TO CALLER WITH RC=0\n*\n         LTORG\n         EJECT\n* ******************************************************************* *\n* ***************************** EQUATES ***************************** *\n* ******************************************************************* *\n         YREGS\n* ******************************************************************* *\n         EJECT\n* ******************************************************************* *\n* ***************************** DSECTS ****************************** *\n* ******************************************************************* *\n$DYNMEM  DSECT                         DYNAMICALLY ALLOCATED MEMORY\nSAVEAREA DS    18F                     REGISTER SAVE AREA\nTOPFLAG  DS    CL24                    EYECATCHER\nP3       DS    PL3                     WORK AREA\nP4       DS    PL4                     WORK AREA\nP5       DS    PL5                     WORK AREA\nZ3       DS    ZL3                     WORK AREA\nCENT     DS    PL2                     CENTURY NUMBER\nT2       DS    PL2                     INTERMEDIATE ANSWER\nT3       DS    PL1                     INTERMEDIATE ANSWER\nNONL     DS    PL2                     INTERMEDIATE ANSWER\nMET      DS    PL2                     INTERMEDIATE ANSWER\nMETC     DS    PL2                     INTERMEDIATE ANSWER\nDMOD     DS    PL3                     INTERMEDIATE ANSWER\nEPACT    DS    PL2                     INTERMEDIATE ANSWER\nDAY      DS    PL2                     INTERMEDIATE ANSWER\nBOTFLAG  DS    CL22                    EYECATCHER\n*\n$DYNLEN  EQU   (*-$DYNMEM)             LENGTH OF GETMAIN'D AREA\n*\n$PARMS   DSECT                         PARAMETERS FROM/TO CALLER\nPYEAR    DS    CL4                     YEAR TO BE PROCESSED\nPRC      DS    CL1                     RETURN CODE (0/2/4)\nPEASTER  DS    CL8                     DATE OF EASTER\n* ******************************************************************* *\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "Y2KGETD": {"ttr": 1281, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x132O\\x01\\x132O\\x134\\x00\\xb9\\x00\\xb9\\x00\\x00\\xd1\\xc1\\xe8\\xd4\\xe8\\xf2\\xd2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2013-11-20T00:00:00", "modifydate": "2013-11-20T13:34:00", "lines": 185, "newlines": 185, "modlines": 0, "user": "JAYMY2K"}, "text": "         TITLE 'Y2KGETD - GET CURRENT SYSTEM DATE'\n*                                                                     *\n*   YY   YY   222   KK   KK  GGGGG  EEEEEE TTTTTTTT DDDDDD            *\n*   YY   YY  2   2  KK  KK  GG   GG EE        TT    DD   DD           *\n*   YY   YY      2  KK KK   GG   GG EE        TT    DD   DD           *\n*    YY YY       2  KKKK    GG      EEEE      TT    DD   DD           *\n*     YYY     222   KKKK    GG  GGG EE        TT    DD   DD           *\n*     YY     2      KK KK   GG   GG EE        TT    DD   DD           *\n*     YY     2      KK  KK  GG   GG EE        TT    DD   DD           *\n*     YY     22222  KK   KK  GGGGG  EEEEEEE   TT    DDDDDD            *\n*                                                                     *\n* ******************************************************************* *\n* ******************************************************************* *\n*    THIS SUBROUTINE RETRIEVES THE CURRENT DATE FROM THE OPERATING    *\n*    SYSTEM AND RETURNS IT IN 3 FORMATS                               *\n*                                                                     *\n*    1.  THREE FIELDS ARE PASSED AS PARAMETERS TO THE ROUTINE:        *\n*        1)  AN 8 BYTE FIELD WHICH WILL RECEIVE THE CURRENT GREGORIAN *\n*            DATE (IN ZONED-DECIMAL FORMAT),                          *\n*        2)  A 7 BYTE FIELD WHICH WILL RECEIVE THE CURRENT JULIAN     *\n*            DATE (IN ZONED-DECIMAL FORMAT), AND                      *\n*        3)  A 7 BYTE FIELD WHICH WILL RECEIVE THE ASTRONOMICAL       *\n*            NUMBER (IN ZONED-DECIMAL FORMAT) FOR THE CURRENT DATE.   *\n*                                                                     *\n*        SUGGESTED CALLING SYNTAX FOR ALC CALLERS:                    *\n*                                                                     *\n*                      CALL  Y2KGETD,(DATEG)                          *\n*                         . . .                                       *\n*             DATEG    DS    ZL8'00000000'                            *\n*             DATEJ    DS    ZL7'0000000'                             *\n*             ANUM     DS    ZL7'0000000'                             *\n*                                                                     *\n*        SUGGESTED CALLING SYNTAX FOR COBOL CALLERS:                  *\n*                                                                     *\n*             01  GETD-PARAMETERS.                                    *\n*                 02  DATEG PIC 9(8) VALUE 0.                         *\n*                 02  DATEJ PIC 9(7) VALUE 0.                         *\n*                 02  ANUM  PIC 9(7) VALUE 0.                         *\n*             CALL 'Y2KGETD' USING GETD-PARAMETERS.                   *\n*                                                                     *\n*    2.  UPON SUCCESSFUL EXECUTION, THE CURRENT DATE IN GREGORIAN     *\n*        (MMDDYYYY) AND JULIAN (YYYYDDD) WILL BE PLACED IN FIELDS     *\n*        1 AND 2, RESPECTIVELY, AND THE ASTRONOMICAL NUMBER FOR THE   *\n*        CURRENT DATE WILL BE PLACED IN FIELD 3.                      *\n*                                                                     *\n* ******************************************************************* *\n* ******************************************************************* *\n         EJECT\nY2KGETD  CSECT\n*         PRINT NOGEN\n         EYEC  'RETURN SYSTEM DATE'\n*\n         SAVE  (14,12)                 SAVE CALLER'S REGISTERS\n*\n         LR    R12,R15                 LOAD BASE WITH ENTRY ADDRESS\n         USING Y2KGETD,R12             ESTABLISH ADDRESSABILITY\n*\n         L     R11,0(,R1)              LOAD A(PARAMETERS)\n         USING $PARMS,R11              ESTABLISH ADDRESSABILITY\n*\n         GETMAIN R,LV=$DYNLEN          GETMAIN DYNAMIC WORKAREA\n         LR    R10,R1                  SAVE A(MEMORY)\n*\n         ST    R13,4(,R10)             STORE A(CALLER'S SAVE AREA)\n         ST    R10,8(,R13)             BACK CHAIN A(MY SAVE AREA)\n         LR    R13,R10                 SET A(MY SAVE AREA)\n         USING $DYNMEM,R13             ESTABLISH ADDRESSABILITY\n*\n*    INSERT EYECATCHER MARKS AT BEGIN/END OF GETMAIN'D AREA.\n*\n         MVC   TOPFLAG,=C'Y2KGETD GETMAIN BEGINS->'\n         MVC   BOTFLAG,=C'<-Y2KGETD GETMAIN ENDS'\n*\n*    RETRIEVE SYSTEM DATE\n*\n*         XC    SYSTIME,SYSTIME         CLEAR DATE/TIME RETURN AREA\n*         TIME  DEC,SYSTIME,LINKAGE=SYSTEM,DATETYPE=MMDDYYYY,\n*               MF=(E,TIMEPL)\n*\n*    MODIFIED FOR MVS3.8J WHICH LACKS CURRENT TIME MACRO FUNCTIONALITY\n*\n          TIME  DEC                     GET DECIMAL DATE/TIME VALUE\n          STM   R0,R1,SYSTWRK           STORE IN WORK AREA\n          AP    SYSTWRK+4(4),=PL4'1900000' ADD 19 TO CENTURY BYTE\n          UNPK  SYSTIME,SYSTWRK         UNPACK DATE/TIME FIELDS\n          OI    SYSTIME+15,X'F0'        CLEAR SIGN\n          LA    R1,SYSTIME              RETRIEVE\n          MVC   JDATEJ,9(R1)              DATE VALUE\n          MVC   PDATEJ,9(R1)                FOR SUBROUTINE\n          LA    R1,JTOGPARM             STORE\n          ST    R1,PLIST                  IN\n          LA    R1,PLIST                    PARAMETER\n          L     R15,=V(Y2KJTOG)               LIST\n          BALR  R14,R15                         AND CALL\n          MVC   PDATEG,JDATEG           STORE GREGORIAN DATE\n          B     MVSCONT                 AND CONTINUE NORMALLY\n*\n*    UNPACK FIELDS FROM MACRO CALL INTO OUTPUT AREA\n*\n         UNPK  Z5,SYSTIME+8(3)         UNPACK YEAR\n         MVC   PDATEG+4(4),Z5          MOVE TO OUTPUT FIELD\n         UNPK  Z5,SYSTIME+10(3)        UNPACK MONTH, DAY\n         MVC   PDATEG(4),Z5            MOVE TO OUTPUT FIELD\n*\n*    CALL Y2KGTOJ TO GET JULIAN VERSION OF DATE.\n*\n         MVC   GDATEG,PDATEG           LOAD DATE TO PASS\n         LA    R1,GTOJPARM             ADDRESS OF Y2KGTOJ PARMS\n         ST    R1,PLIST                STORE IN DYNAMIC AREA\n         LA    R1,PLIST                ADDRESS TO PASS\n         L     R15,=V(Y2KGTOJ)         ADDRESS OF ROUTINE\n         BALR  R14,R15                 CALL ROUTINE\n*\n*    MOVE RETURNED JULIAN DATE TO OUTPUT AREA.\n*\n         MVC   PDATEJ,GDATEJ           MOVE JULIAN TO OUTPUT AREA\n*\nMVSCONT  EQU   *\n*\n*    CALL Y2KGTOA TO GET ASTRONOMICAL NUMBER OF DATE.\n*\n         MVC   ADATEG,PDATEG           LOAD DATE TO PASS\n         LA    R1,GTOAPARM             ADDRESS OF Y2KGTOA PARMS\n         ST    R1,PLIST                STORE IN DYNAMIC AREA\n         LA    R1,PLIST                ADDRESS TO PASS\n         L     R15,=V(Y2KGTOA)         ADDRESS OF ROUTINE\n         BALR  R14,R15                 CALL ROUTINE\n*\n*    MOVE RETURNED ASTRO NUMBER TO OUTPUT AREA.\n*\n         MVC   PANUM,ANUM              MOVE TO OUTPUT AREA\n*\n*    RESTORE REGISTERS, FREE STORAGE, AND RETURN\n*\nRETURN   LR    R1,R13                  LOAD ADDRESS OF GETMAINED AREA\n         L     R13,4(,R13)             RELOAD PREVIOUS SAVE AREA\n         LA    R0,$DYNLEN              LOAD LENGTH OF GETMAINED AREA\n         FREEMAIN R,LV=(0),A=(1)       FREE GETMAINED AREA\n         RETURN (14,12),RC=0           RETURN TO CALLER WITH RC=0\n*\n         LTORG                         LITERAL POOL\n         EJECT\n* ******************************************************************* *\n* ***************************** EQUATES ***************************** *\n* ******************************************************************* *\n         YREGS\n* ******************************************************************* *\n         EJECT\n* ******************************************************************* *\n* ***************************** DSECTS ****************************** *\n* ******************************************************************* *\n$DYNMEM  DSECT                         DYNAMICALLY ALLOCATED MEMORY\nSAVEAREA DS    18F                     REGISTER SAVE AREA\nTOPFLAG  DS    CL24                    EYECATCHER\n*SYSTIME  TIME  LINKAGE=SYSTEM,MF=L     PARAMETER LIST FOR TIME MACRO\n*\n* MODIFIED FOR MVS3.8J\n*\nSYSTIME  DS    CL16\nSYSTWRK  DS    D\nJTOGPARM DS    0H\nJDATEJ   DS    CL7\nJRC      DS    CL1\nJDATEG   DS    CL8\n*\nZ5       DS    ZL5                     WORK FIELD\nPLIST    DS    A                       PARMLIST ADDR FOR SUB CALLS\nGTOJPARM DS    0H                      PARAMETERS FOR Y2KGTOJ\nGDATEG   DS    CL8                       INPUT DATE\nGRC      DS    CL1                       RETURN CODE\nGDATEJ   DS    CL7                       JULIAN DATE\nGTOAPARM DS    0H                      PARAMETERS FOR Y2KGTOA\nADATEG   DS    CL8                       INPUT DATE\nARC      DS    CL1                       RETURN CODE\nANUM     DS    ZL7                       ASTRO NUMBER\nBOTFLAG  DS    CL22                    EYECATCHER\n*\n$DYNLEN  EQU   (*-$DYNMEM)             LENGTH OF GETMAIN'D AREA\n*\n$PARMS   DSECT                         PARAMETERS TO CALLER\nPDATEG   DS    CL8                     GREGORIAN DATE\nPDATEJ   DS    CL7                     JULIAN DATE\nPANUM    DS    ZL7                     ASTRONOMICAL NUMBER\n* ******************************************************************* *\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "Y2KGTOA": {"ttr": 1285, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x132O\\x01\\x132O\\x134\\x01D\\x01D\\x00\\x00\\xd1\\xc1\\xe8\\xd4\\xe8\\xf2\\xd2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2013-11-20T00:00:00", "modifydate": "2013-11-20T13:34:00", "lines": 324, "newlines": 324, "modlines": 0, "user": "JAYMY2K"}, "text": "         TITLE 'Y2KGTOA - COMPUTE ASTRO NUMBER FROM GREGORIAN DATE'\n*                                                                     *\n*   YY   YY   222   KK   KK  GGGGG TTTTTTTT  OOOOO     A              *\n*   YY   YY  2   2  KK  KK  GG   GG   TT    OO   OO   AAA             *\n*   YY   YY      2  KK KK   GG   GG   TT    OO   OO  AA AA            *\n*    YY YY       2  KKKK    GG        TT    OO   OO AA   AA           *\n*     YYY     222   KKKK    GG  GGG   TT    OO   OO AA   AA           *\n*     YY     2      KK KK   GG   GG   TT    OO   OO AAAAAAA           *\n*     YY     2      KK  KK  GG   GG   TT    OO   OO AA   AA           *\n*     YY     22222  KK   KK  GGGGG    TT     OOOOO  AA   AA           *\n*                                                                     *\n* ******************************************************************* *\n* ******************************************************************* *\n*    THIS SUBROUTINE COMPUTES THE ASTRONOMICAL NUMBER FOR A           *\n*    GIVEN GREGORIAN DATE (MMDDYYYY)                                  *\n*                                                                     *\n*    1.  VALID INPUT YEARS FOR THIS ROUTINE ARE THE YEARS 1601        *\n*        THROUGH 3399 A. D. (INCLUSIVE)                               *\n*                                                                     *\n*    2.  VALID INPUT MONTH VALUES FOR THIS ROUTINE ARE 01 THROUGH 12. *\n*                                                                     *\n*    3.  VALID INPUT DAY VALUES FOR THIS ROUTINE ARE 01 THROUGH 31    *\n*        WITH EXCEPTIONS FOR THE MONTHS LISTED:                       *\n*             MONTH          MAXIMUM DAY VALUE                        *\n*              04                    30                               *\n*              06                    30                               *\n*              09                    30                               *\n*              11                    30                               *\n*              02                    28                               *\n*              02 DURING LEAP YEAR   29                               *\n*                                                                     *\n*    4.  THE DATE FORMAT MUST BE MMDDYYYY, WHERE MM = THE 2 DIGIT     *\n*        MONTH VALUE, DD = THE 2 DIGIT DAY VALUE, AND YYYY = THE      *\n*        4 DIGIT YEAR VALUE.                                          *\n*                                                                     *\n*    5.  THREE FIELDS ARE PASSED AS PARAMETERS TO THE ROUTINE:        *\n*        1)  AN 8 BYTE FIELD CONTAINING THE DATE (IN ZONED-           *\n*            DECIMAL FORMAT) FOR WHICH THE ASTRONOMICAL NUMBER IS     *\n*            TO BE CALCULATED,                                        *\n*        2)  A 1 BYTE ZONED-DECIMAL RETURN CODE, AND                  *\n*        3)  A 7 BYTE FIELD WHICH WILL RECEIVE THE ASTRONOMICAL       *\n*            NUMBER (IN ZONED-DECIMAL FORMAT).                        *\n*        THE ROUTINE WILL NOT ALTER THE DATE PASSED TO IT.            *\n*                                                                     *\n*        SUGGESTED CALLING SYNTAX FOR ALC CALLERS:                    *\n*                                                                     *\n*                      CALL  Y2KGTOA,(DATE)                           *\n*                         . . .                                       *\n*             DATE     DS    ZL8'01011997'                            *\n*             RC       DS    ZL1'0'                                   *\n*             ANUM     DS    ZL7'0000000'                             *\n*                                                                     *\n*        SUGGESTED CALLING SYNTAX FOR COBOL CALLERS:                  *\n*                                                                     *\n*             01  GTOA-PARAMETERS.                                    *\n*                 02  DATE PIC 9(8) VALUE 01011997.                   *\n*                 02  RC   PIC 9(1) VALUE 0.                          *\n*                 02  ANUM PIC 9(7) VALUE 0.                          *\n*             CALL 'Y2KGTOA' USING GTOA-PARAMETERS.                   *\n*                                                                     *\n*    6.  THE POSSIBLE VALUES FOR THE RETURN CODE FIELD ARE:           *\n*                                                                     *\n*        0 INDICATES SUCCESSFUL EXECUTION OF THE ROUTINE.             *\n*                                                                     *\n*        2 INDICATES INVALID DATA WAS FOUND IN THE DATE FIELD.        *\n*        INVALID DATA ARE DETERMINED IF THE FIELD'S LOW ORDER         *\n*        BYTE'S ZONE CONTAINS AN INVALID SIGN, (NOT ONE OF            *\n*        X'C', X'D' OR X'F'), OR IF THE PRECEDING BYTES' ZONES        *\n*        ARE OTHER THAN X'F', OR IF ANY BYTE'S LOW ORDER NIBBLE       *\n*        CONTAINS A VALUE GREATER THAN X'9'.                          *\n*                                                                     *\n*        4 INDICATES THE VALUE OF THE YEAR SPECIFIED WAS NOT IN       *\n*        THE RANGE SPECIFIED IN 1 (ABOVE).                            *\n*                                                                     *\n*        6 INDICATES THE VALUE OF THE MONTH SPECIFIED WAS NOT IN      *\n*        THE RANGE SPECIFIED IN 2 (ABOVE).                            *\n*                                                                     *\n*        8 INDICATES THE VALUE OF THE DAY SPECIFIED WAS NOT IN        *\n*        THE RANGE SPECIFIED IN 3 (ABOVE).                            *\n*                                                                     *\n*    7.  UPON SUCCESSFUL EXECUTION, THE ASTRONOMICAL NUMBER FOR THE   *\n*        DATE WILL BE PLACED IN THE 3RD PARAMETER FIELD (ANUM).  IF   *\n*        THE RETURN CODE IS A NON-ZERO VALUE (UNSUCCESSFUL            *\n*        EXECUTION), THE ANUM FIELD WILL CONTAIN ZEROS.               *\n* ------------------------------------------------------------------- *\n* CHANGE LOG:                                                         *\n* 0.1 04/17/2008 - CHANGED METHOD OF DETERMINING LEAP YEAR AT THE     *\n*                  SUGGESTION OF ANGEL LUIS DOMINGUEZ.  TESTS ARE     *\n*                  NOW DONE ON BINARY FORM OF YEAR, ELIMINATING THE   *\n*                  USE OF PACKED DECIMAL INSTRUCTIONS.  TESTS ON MY   *\n*                  EMULATED HARDWARE SHOW A SAVINGS OF 3.13 SECONDS   *\n*                  ON 500,000 ITERATIONS.                             *\n* ******************************************************************* *\n* ******************************************************************* *\n         EJECT\nY2KGTOA  CSECT\n          PRINT NOGEN\n         EYEC  'RETURN ASTRO NUMBER FOR GREGORIAN DATE'\n*\n         SAVE  (14,12)                 SAVE CALLER'S REGISTERS\n*\n         LR    R12,R15                 LOAD BASE WITH ENTRY ADDRESS\n         USING Y2KGTOA,R12             ESTABLISH ADDRESSABILITY\n*\n         L     R11,0(,R1)              LOAD A(PARAMETERS)\n         USING $PARMS,R11              ESTABLISH ADDRESSABILITY\n*\n         GETMAIN R,LV=$DYNLEN          GETMAIN DYNAMIC WORKAREA\n         LR    R10,R1                  SAVE A(MEMORY)\n*\n         ST    R13,4(,R10)             STORE A(CALLER'S SAVE AREA)\n         ST    R10,8(,R13)             BACK CHAIN A(MY SAVE AREA)\n         LR    R13,R10                 SET A(MY SAVE AREA)\n         USING $DYNMEM,R13             ESTABLISH ADDRESSABILITY\n*\n*    INSERT EYECATCHER MARKS AT BEGIN/END OF GETMAIN'D AREA.\n*\n         MVC   TOPFLAG,=C'Y2KGTOA GETMAIN BEGINS->'\n         MVC   BOTFLAG,=C'<-Y2KGTOA GETMAIN ENDS'\n*\n*    INITIALIZE RETURN CODE AND ANUM PARAMETER FIELDS.\n*\n         MVI   PRC,C'0'                ASSUME GOOD RETURN\n         MVC   PRC+1(7),PRC            NULL ASTRONOMICAL NUMBER\n*\n*    TEST DATE FOR INVALID CHARACTER\n*\n         LA    R2,PDATE                ADDRESS PASSED DATE\n         LA    R3,7                    LENGTH MINUS 1\nP1VLOOP  CLI   0(R2),X'F0'             TEST LESS THAN C'0'\n         BL    P1ERR1                  IF YES, DATE CONTAINS BAD DATA\n         CLI   0(R2),X'F9'             TEST GREATER THAN C'9'\n         BH    P1ERR1                  IF YES, DATE CONTAINS BAD DATA\n         LA    R2,1(0,R2)              ADDRESS NEXT BYTE\n         BCT   R3,P1VLOOP              CONTINUE TESTING\n         IC    R3,0(,R2)               LOAD RIGHT-MOST CHARACTER\n         LR    R4,R3                   COPY INTO R4\n         N     R3,=F'15'               ISOLATE DIGIT PORTION\n         CH    R3,=H'9'                TEST GREATER THAN 9\n         BH    P1ERR1                  IF YES, DATE CONTAINS BAD DATA\n         SRL   R4,4                    ISOLATE ZONE PORTION\n         CH    R4,=H'12'               TEST FOR 'C' ZONE\n         BE    P1OK1                   IF YES, DATE IS VALID NUMERIC\n         CH    R4,=H'13'               TEST FOR 'D' ZONE\n         BE    P1OK1                   IF YES, DATE IS VALID NUMERIC\n         CH    R4,=H'15'               TEST FOR 'F' ZONE\n         BE    P1OK1                   IF YES, DATE IS VALID NUMERIC\n*\n*    DATE CONTAINED AN INVALID CHARACTER\n*\nP1ERR1   MVI   PRC,C'2'                INDICATE BAD DATA\n         B     RETURN                  AND RETURN TO CALLER\n*\n*    TEST YEAR FOR VALID RANGE\n*\nP1OK1    PACK  YEAR(4),PDATE+4(4)      PACK PASSED YEAR\n         CP    YEAR(4),=P'1601'        IS YEAR PRIOR TO 1601?\n         BL    P1ERR2                  IF YES, YEAR NOT VALID\n         CP    YEAR(4),=P'3399'        IS YEAR AFTER 3399?\n         BNH   P1OK2                   IF NOT, YEAR IS VALID\n*\n*    YEAR CONTAINED AN INVALID VALUE (OUT OF RANGE)\n*\nP1ERR2   MVI   PRC,C'4'                INDICATE BAD VALUE\n         B     RETURN                  AND RETURN TO CALLER\n*\n*    TEST MONTH FOR VALID RANGE\n*\nP1OK2    PACK  MONTH(2),PDATE(2)       PACK PASSED MONTH\n         CP    MONTH(2),=P'1'          IS MONTH ZERO?\n         BL    P1ERR3                  IF YES, MONTH NOT VALID\n         CP    MONTH(2),=P'12'         IS MONTH GREATER THAN 12?\n         BNH   P1OK3                   IF NOT, MONTH IS VALID\n*\n*    MONTH CONTAINED AN INVALID VALUE (OUT OF RANGE)\n*\nP1ERR3   MVI   PRC,C'6'                INDICATE BAD VALUE\n         B     RETURN                  AND RETURN TO CALLER\n*\n*    DETERMINE LEAP YEAR STATUS\n*\nP1OK3    MVI   LEAP,C'0'               ASSUME NOT A LEAP YEAR\n         MVO   B3(3),YEAR+1(3)         DROP SIGN                    0.1\n         TM    B3+1,X'01'              ODD YEAR?                    0.1\n         BO    P1CON4                  IF YES, IT IS *NOT* LEAP YEAR0.1\n         TM    B3+1,X'12'              EVENLY DIVISIBLE BY 4?       0.1\n         BM    P1CON4                  IF NO, IT IS *NOT* LEAP YEAR 0.1\n         CLI   B3+1,X'00'              DOES YEAR END IN 00?         0.1\n         BNE   ISLEAP                  IF YES, IT IS A LEAP YEAR    0.1\n         TM    B3,X'01'                IS CENTURY ODD?              0.1\n         BO    P1CON4                  IF YES, IT IS *NOT* LEAP YEAR0.1\n         TM    B3,X'12'                EVENLY DIVISIBLE BY 400?     0.1\n         BM    P1CON4                  IF NO, IT IS *NOT* LEAP YEAR 0.1\n*                                      ELSE IT IS A LEAP YEAR       0.1\n*\n*    TEST FOR LEAP YEAR SUCCEEDED, RESET LEAP INDICATOR.\n*\nISLEAP   MVI   LEAP,C'1'               INDICATE LEAP YEAR\n*\n*    DETERMINE MAXIMUM DAYS FOR GIVEN MONTH\n*\nP1CON4   LA    R4,DIM                  GET ADDRESS OF DAY TABLE\n         CLI   LEAP,C'0'               IS THIS LEAP YEAR?\n         BE    P1CON4A                 IF NOT, ADDRESS IS OK\n         LA    R4,2(,R4)               ELSE ADJUST TO LEAP ENTRY\nP1CON4A  ZAP   DWORK(8),MONTH          GET MONTH INTO DOUBLEWORD\n         CVB   R3,DWORK                CONVERT TO BINARY\n         BCTR  R3,0                    DECREMENT BY 1 (ZERO BASE)\n         SLL   R3,2                    MULTIPLY BY TABLE ENTRY LENGTH\n         LA    R4,0(R3,R4)             LOAD ENTRY ADDRESS INTO R4\n*\n*    TEST DAY FOR VALID RANGE\n*\n         PACK  DAY(2),PDATE+2(2)       PACK PASSED DAY\n         ZAP   DAY,DAY                 CONVERT SIGN OF DAY TO X'C'\n         CP    DAY(2),=P'1'            IS DAY ZERO?\n         BL    P1ERR4                  IF YES, DAY NOT VALID\n         CLC   DAY(2),0(R4)            IS DAY GREATER THAN MAX?\n         BNH   P1OK4                   IF NOT, MONTH IS VALID\n*\n*    DAY CONTAINED AN INVALID VALUE (OUT OF RANGE)\n*\nP1ERR4   MVI   PRC,C'8'                INDICATE BAD VALUE\n         B     RETURN                  AND RETURN TO CALLER\n*\n*    COMPUTE ASTRONOMICAL NUMBER\n*\nP1OK4    CP    MONTH(2),=P'2'          IS MONTH GREATER THAN 2?\n         BH    COMP001                 YES\n*\n         AP    MONTH(2),=P'9'          INCREMENT MONTH BY 9\n         SP    YEAR(4),=P'1'           DECREMENT YEAR BY 1\n         B     COMP002                 PROCEED WITH CONVERSION\n*\nCOMP001  SP    MONTH(2),=P'3'          DECREMENT MONTH BY 3\n*\nCOMP002  DP    YEAR,=P'100'            DIVIDE BY 100\n         ZAP   TA,YEAR(2)              SAVE QUOTIENT IN TA\n         ZAP   TB,YEAR+2(2)            SAVE REMAINDER IN TB\n         MP    TA,=P'146097'           MULTIPLY BY 146097\n         DP    TA,=P'4'                DIVIDE BY 4\n         ZAP   TA,TA(7)                SHIFT QUOTIENT OVER REMAINDER\n*\n         MP    TB,=P'1461'             MULTIPLY BY 1461\n         DP    TB,=P'4'                DIVIDE BY 4\n         ZAP   TB,TB(7)                SHIFT QUOTIENT OVER REMAINDER\n*\n         ZAP   TC,MONTH\n         MP    TC,=P'153'              MULTIPLY BY 153\n         AP    TC,=P'2'                ADD 2\n         DP    TC,=P'5'                DIVIDE BY 5\n         ZAP   TC,TC(7)                SHIFT QUOTIENT OVER REMAINDER\n         AP    TC,DAY                  ADD DAY\n         AP    TC,=P'1721119'          ADD 1721119\n*\n         ZAP   TX,TA                   COMBINE THE ANSWERS\n         AP    TX,TB\n         AP    TX,TC\n*\n         UNPK  PANUM(7),TX+4(4)        UNPACK ANUM\n         OI    PANUM+6,X'F0'           CLEAR SIGN\n*\n*    RESTORE REGISTERS, FREE STORAGE, AND RETURN\n*\nRETURN   LR    R1,R13                  LOAD ADDRESS OF GETMAINED AREA\n         L     R13,4(,R13)             RELOAD PREVIOUS SAVE AREA\n         LA    R0,$DYNLEN              LOAD LENGTH OF GETMAINED AREA\n         FREEMAIN R,LV=(0),A=(1)       FREE GETMAINED AREA\n         RETURN (14,12),RC=0           RETURN TO CALLER WITH RC=0\n         EJECT\n* ******************************************************************* *\n* **************************** CONSTANTS **************************** *\n* ******************************************************************* *\n*\n*    MAXIMUM DAYS IN MONTHS ... EACH ENTRY HAS 2 VALUES, THE 1ST FOR\n*    A NORMAL (NON-LEAP) YEAR AND THE 2ND FOR A LEAP YEAR\n*\nDIM      DC    PL2'31',PL2'31'           JANUARY\n         DC    PL2'28',PL2'29'           FEBRUARY\n         DC    PL2'31',PL2'31'           MARCH\n         DC    PL2'30',PL2'30'           APRIL\n         DC    PL2'31',PL2'31'           MAY\n         DC    PL2'30',PL2'30'           JUNE\n         DC    PL2'31',PL2'31'           JULY\n         DC    PL2'31',PL2'31'           AUGUST\n         DC    PL2'30',PL2'30'           SEPTEMBER\n         DC    PL2'31',PL2'31'           OCTOBER\n         DC    PL2'30',PL2'30'           NOVEMBER\n         DC    PL2'31',PL2'31'           DECEMBER\n* ******************************************************************* *\n         LTORG\n         EJECT\n* ******************************************************************* *\n* ***************************** EQUATES ***************************** *\n* ******************************************************************* *\n         YREGS\n* ******************************************************************* *\n         EJECT\n* ******************************************************************* *\n* ***************************** DSECTS ****************************** *\n* ******************************************************************* *\n$DYNMEM  DSECT                         DYNAMICALLY ALLOCATED MEMORY\nSAVEAREA DS    18F                     REGISTER SAVE AREA\nTOPFLAG  DS    CL24                    EYECATCHER\nMONTH    DS    PL2                     GREGORIAN MONTH\nDAY      DS    PL2                     GREGORIAN DAY\nYEAR     DS    PL4                     GREGORIAN YEAR\nB3       DS    XL3                     WORK AREA FOR BINARY YEAR    0.1\nTA       DS    PL8                     INTERMEDIATE ANSWER\nTB       DS    PL8                     INTERMEDIATE ANSWER\nTC       DS    PL8                     INTERMEDIATE ANSWER\nTX       DS    PL8                     INTERMEDIATE ANSWER\nLEAP     DS    CL1                     LEAP STATUS\nDWORK    DS    D                       DOUBLEWORD WORK FIELD\nBOTFLAG  DS    CL22                    EYECATCHER\n*\n$DYNLEN  EQU   (*-$DYNMEM)             LENGTH OF GETMAIN'D AREA\n*\n$PARMS   DSECT                         PARAMETERS FROM/TO CALLER\nPDATE    DS    CL8                     DATE TO BE PROCESSED\nPRC      DS    CL1                     RETURN CODE (0/2/4/6/8)\nPANUM    DS    ZL7                     ASTRONOMICAL NUMBER\n* ******************************************************************* *\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "Y2KGTOJ": {"ttr": 1291, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x132O\\x01\\x132O\\x134\\x00\\xc6\\x00\\xc6\\x00\\x00\\xd1\\xc1\\xe8\\xd4\\xe8\\xf2\\xd2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2013-11-20T00:00:00", "modifydate": "2013-11-20T13:34:00", "lines": 198, "newlines": 198, "modlines": 0, "user": "JAYMY2K"}, "text": "         TITLE 'Y2KGTOJ - CONVERT GREGORIAN DATE TO JULIAN DATE'\n*                                                                     *\n*   YY   YY   222   KK   KK  GGGGG TTTTTTTT  OOOOO       JJ           *\n*   YY   YY  2   2  KK  KK  GG   GG   TT    OO   OO      JJ           *\n*   YY   YY      2  KK KK   GG   GG   TT    OO   OO      JJ           *\n*    YY YY       2  KKKK    GG        TT    OO   OO      JJ           *\n*     YYY     222   KKKK    GG  GGG   TT    OO   OO      JJ           *\n*     YY     2      KK KK   GG   GG   TT    OO   OO JJ   JJ           *\n*     YY     2      KK  KK  GG   GG   TT    OO   OO JJ   JJ           *\n*     YY     22222  KK   KK  GGGGG    TT     OOOOO   JJJJJ            *\n*                                                                     *\n* ******************************************************************* *\n* ******************************************************************* *\n*    THIS SUBROUTINE COMPUTES THE JULIAN DATE(YYYYDDD) FOR A GIVEN    *\n*    A GREGORIAN DATE (MMDDYYYY)                                      *\n*                                                                     *\n*    1.  VALID INPUT YEARS FOR THIS ROUTINE ARE THE YEARS 1601        *\n*        THROUGH 3399 A. D. (INCLUSIVE)                               *\n*                                                                     *\n*    2.  VALID INPUT MONTH VALUES FOR THIS ROUTINE ARE 01 THROUGH 12. *\n*                                                                     *\n*    3.  VALID INPUT DAY VALUES FOR THIS ROUTINE ARE 01 THROUGH 31    *\n*        WITH EXCEPTIONS FOR THE MONTHS LISTED:                       *\n*             MONTH          MAXIMUM DAY VALUE                        *\n*              04                    30                               *\n*              06                    30                               *\n*              09                    30                               *\n*              11                    30                               *\n*              02                    28                               *\n*              02 DURING LEAP YEAR   29                               *\n*                                                                     *\n*    4.  THE DATE FORMAT MUST BE MMDDYYYY, WHERE MM = THE 2 DIGIT     *\n*        MONTH VALUE, DD = THE 2 DIGIT DAY VALUE, AND YYYY = THE      *\n*        4 DIGIT YEAR VALUE.                                          *\n*                                                                     *\n*    5.  THREE FIELDS ARE PASSED AS PARAMETERS TO THE ROUTINE:        *\n*        1)  AN 8 BYTE FIELD CONTAINING THE DATE (IN ZONED-           *\n*            DECIMAL FORMAT) FOR WHICH THE JULIAN DAY NUMBER IS       *\n*            TO BE CALCULATED,                                        *\n*        2)  A 1 BYTE ZONED-DECIMAL RETURN CODE, AND                  *\n*        3)  A 7 BYTE FIELD WHICH WILL RECEIVE THE YEAR AND JULIAN    *\n*            DAY NUMBER (IN ZONED-DECIMAL FORMAT).                    *\n*        THE ROUTINE WILL NOT ALTER THE DATE PASSED TO IT.            *\n*                                                                     *\n*        SUGGESTED CALLING SYNTAX FOR ALC CALLERS:                    *\n*                                                                     *\n*                      CALL  Y2KGTOJ,(DATEG)                          *\n*                         . . .                                       *\n*             DATEG    DS    ZL8'01011997'                            *\n*             RC       DS    ZL1'0'                                   *\n*             JDATE    DS    ZL7'0'                                   *\n*                                                                     *\n*        SUGGESTED CALLING SYNTAX FOR COBOL CALLERS:                  *\n*                                                                     *\n*             01  GTOJ-PARAMETERS.                                    *\n*                 02  DATEG PIC 9(8) VALUE 01011997.                  *\n*                 02  RC    PIC 9(1) VALUE 0.                         *\n*                 02  JDATE PIC 9(7) VALUE 0.                         *\n*             CALL 'Y2KGTOJ' USING GTOJ-PARAMETERS.                   *\n*                                                                     *\n*    6.  THE POSSIBLE VALUES FOR THE RETURN CODE FIELD ARE:           *\n*                                                                     *\n*        0 INDICATES SUCCESSFUL EXECUTION OF THE ROUTINE.             *\n*                                                                     *\n*        2 INDICATES INVALID DATA WAS FOUND IN THE DATE FIELD.        *\n*        INVALID DATA ARE DETERMINED IF THE FIELD'S LOW ORDER         *\n*        BYTE'S ZONE CONTAINS AN INVALID SIGN, (NOT ONE OF            *\n*        X'C', X'D' OR X'F'), OR IF THE PRECEDING BYTES' ZONES        *\n*        ARE OTHER THAN X'F', OR IF ANY BYTE'S LOW ORDER NIBBLE       *\n*        CONTAINS A VALUE GREATER THAN X'9'.                          *\n*                                                                     *\n*        4 INDICATES THE VALUE OF THE YEAR SPECIFIED WAS NOT IN       *\n*        THE RANGE SPECIFIED IN 1 (ABOVE).                            *\n*                                                                     *\n*        6 INDICATES THE VALUE OF THE MONTH SPECIFIED WAS NOT IN      *\n*        THE RANGE SPECIFIED IN 2 (ABOVE).                            *\n*                                                                     *\n*        8 INDICATES THE VALUE OF THE DAY SPECIFIED WAS NOT IN        *\n*        THE RANGE SPECIFIED IN 3 (ABOVE).                            *\n*                                                                     *\n*    7.  UPON SUCCESSFUL EXECUTION, THE 4 DIGIT YEAR PLUS THE 3       *\n*        DIGIT JULIAN DAY NUMBER (YYYYDDD) WILL BE PLACED IN THE      *\n*        3RD PARAMETER FIELD (IN ZONED-DECIMAL FORMAT).  IF THE       *\n*        RETURN CODE IS A NON-ZERO VALUE (UNSUCCESSFUL EXECUTION),    *\n*        THE 3RD PARAMETER FIELD WILL CONTAIN ZEROS.                  *\n*                                                                     *\n* ******************************************************************* *\n* ******************************************************************* *\n         EJECT\nY2KGTOJ  CSECT\n*         PRINT NOGEN\n         EYEC  'CONVERT GREGORIAN DATE TO JULIAN (DAY OF YEAR)'\n*\n         SAVE  (14,12)                 SAVE CALLER'S REGISTERS\n*\n         LR    R12,R15                 LOAD BASE WITH ENTRY ADDRESS\n         USING Y2KGTOJ,R12             ESTABLISH ADDRESSABILITY\n*\n         L     R11,0(,R1)              LOAD A(PARAMETERS)\n         USING $PARMS,R11              ESTABLISH ADDRESSABILITY\n*\n         GETMAIN R,LV=$DYNLEN          GETMAIN DYNAMIC WORKAREA\n         LR    R10,R1                  SAVE A(MEMORY)\n*\n         ST    R13,4(,R10)             STORE A(CALLER'S SAVE AREA)\n         ST    R10,8(,R13)             BACK CHAIN A(MY SAVE AREA)\n         LR    R13,R10                 SET A(MY SAVE AREA)\n         USING $DYNMEM,R13             ESTABLISH ADDRESSABILITY\n*\n*    INSERT EYECATCHER MARKS AT BEGIN/END OF GETMAIN'D AREA.\n*\n         MVC   TOPFLAG,=C'Y2KGTOJ GETMAIN BEGINS->'\n         MVC   BOTFLAG,=C'<-Y2KGTOJ GETMAIN ENDS'\n*\n*    INITIALIZE RETURN CODE AND JULIAN OUTPUT FIELD.\n*\n         MVI   PRC,C'0'                ASSUME GOOD RETURN\n         MVC   PRC+1(7),PRC            NULL JULIAN DATE\n*\n*    RETRIEVE ASTRONOMICAL NUMBER FOR DATE PASSED\n*\n         MVC   DATEG,PDATEG            LOAD DATE TO PASS\n         LA    R1,GTOAPARM             ADDRESS OF Y2KGTOA PARMS\n         ST    R1,PLIST                STORE IN DYNAMIC AREA\n         LA    R1,PLIST                ADDRESS TO PASS\n         L     R15,=V(Y2KGTOA)         ADDRESS OF ROUTINE\n         BALR  R14,R15                 CALL ROUTINE\n*\n*    SEE IF DATE WE RECEIVED FROM CALLER PASSED EDITS IN Y2KGTOA.\n*    THIS MEANS WE DON'T HAVE TO REPEAT THE EDIT CODE HERE <G>!\n*\n         MVC   PRC,RCG                 ADOPT RECEIVED RETURN CODE\n         CLI   RCG,C'0'                WAS EXECUTION SUCCESSFUL?\n         BNE   RETURN                  IF NOT, EXIT TO CALLER\n*\n*    SAVE THE ASTRONOMICAL NUMBER FOR DAY PASSED\n*\n         PACK  WORK(4),ANUMG(7)        SAVE ASTRO NUMBER\n*\n*    RETRIEVE THE ASTRONOMICAL NUMBER FOR JANUARY 1 OF THE SAME YEAR.\n*\n         MVC   DATEG(4),=C'0101'       SET DATE TO JAN 1\n         LA    R1,PLIST                ADDRESS TO PASS\n         L     R15,=V(Y2KGTOA)         ADDRESS OF ROUTINE\n         BALR  R14,R15                 CALL ROUTINE\n*\n*    DECREASE BY 1 BECAUSE WE REALLY WANT TO SUBTRACT 12/31 OF THE\n*    PRIOR YEAR (IT'S JUST LESS WORK TO DO IT THIS WAY).\n*\n         PACK  WORK2(4),ANUMG(7)       PACK ASTRO NUMBER\n         SP    WORK2,=P'1'             SUBTRACT 1 FROM ASTRO NUMBER\n*\n*    SUBTRACT THAT NUMBER FROM THE PRIOR ONE.\n*\n         SP    WORK,WORK2              YIELDS DAY NUMBER\n         UNPK  PDATEJ+4(3),WORK+2(2)   UNPACK DAY NUMBER INTO OUTPUT\n         OI    PDATEJ+6,X'F0'          CLEAR SIGN\n         MVC   PDATEJ(4),PDATEG+4      PREPEND YEAR TO OUTPUT\n*\n*    RESTORE REGISTERS, FREE STORAGE, AND RETURN\n*\nRETURN   LR    R1,R13                  LOAD ADDRESS OF GETMAINED AREA\n         L     R13,4(,R13)             RELOAD PREVIOUS SAVE AREA\n         LA    R0,$DYNLEN              LOAD LENGTH OF GETMAINED AREA\n         FREEMAIN R,LV=(0),A=(1)       FREE GETMAINED AREA\n         RETURN (14,12),RC=0           RETURN TO CALLER WITH RC=0\n*\n         LTORG\n         EJECT\n* ******************************************************************* *\n* ***************************** EQUATES ***************************** *\n* ******************************************************************* *\n         YREGS\n* ******************************************************************* *\n         EJECT\n* ******************************************************************* *\n* ***************************** DSECTS ****************************** *\n* ******************************************************************* *\n$DYNMEM  DSECT                         DYNAMICALLY ALLOCATED MEMORY\nSAVEAREA DS    18F                     REGISTER SAVE AREA\nTOPFLAG  DS    CL24                    EYECATCHER\nPLIST    DS    A                       PARMLIST ADDR FOR SUB CALLS\nGTOAPARM DS    0H                      PARAMETERS FOR Y2KGTOA\nDATEG    DS    CL8                       INPUT DATE\nRCG      DS    CL1                       RETURN CODE\nANUMG    DS    ZL7                       ASTRO NUMBER\nWORK     DS    PL4                     WORK FIELD\nWORK2    DS    PL4                     WORK FIELD\nBOTFLAG  DS    CL22                    EYECATCHER\n*\n$DYNLEN  EQU   (*-$DYNMEM)             LENGTH OF GETMAIN'D AREA\n*\n$PARMS   DSECT                         PARAMETERS FROM/TO CALLER\nPDATEG   DS    CL8                     GREGORIAN DATE INPUT\nPRC      DS    CL1                     RETURN CODE (0/2/4/6/8)\nPDATEJ   DS    CL7                     GREGORIAN DATE OUTPUT\n* ******************************************************************* *\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "Y2KJTOG": {"ttr": 1540, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x132O\\x01\\x132O\\x134\\x00\\xe2\\x00\\xe2\\x00\\x00\\xd1\\xc1\\xe8\\xd4\\xe8\\xf2\\xd2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2013-11-20T00:00:00", "modifydate": "2013-11-20T13:34:00", "lines": 226, "newlines": 226, "modlines": 0, "user": "JAYMY2K"}, "text": "         TITLE 'Y2KJTOG - CONVERT JULIAN DATE TO GREGORIAN DATE'\n*                                                                     *\n*   YY   YY   222   KK   KK      JJTTTTTTTT  OOOOO   GGGGG            *\n*   YY   YY  2   2  KK  KK       JJ   TT    OO   OO GG   GG           *\n*   YY   YY      2  KK KK        JJ   TT    OO   OO GG   GG           *\n*    YY YY       2  KKKK         JJ   TT    OO   OO GG                *\n*     YYY     222   KKKK         JJ   TT    OO   OO GG  GGG           *\n*     YY     2      KK KK   JJ   JJ   TT    OO   OO GG   GG           *\n*     YY     2      KK  KK  JJ   JJ   TT    OO   OO GG   GG           *\n*     YY     22222  KK   KK  JJJJJ    TT     OOOOO   GGGGG            *\n*                                                                     *\n* ******************************************************************* *\n* ******************************************************************* *\n*    THIS SUBROUTINE RETURNS THE GREGORIAN DATE (MMDDYYYY) FOR        *\n*    A GIVEN JULIAN DATE (YYYYDDD)                                    *\n*                                                                     *\n*    1.  VALID INPUT YEARS FOR THIS ROUTINE ARE THE YEARS 1601        *\n*        THROUGH 3399 A. D. (INCLUSIVE)                               *\n*                                                                     *\n*    2.  VALID INPUT DAY VALUES FOR THIS ROUTINE ARE 001 THROUGH      *\n*        365 (NON-LEAP YEARS) AND 001 THROUGH 366 (LEAP YEARS).       *\n*                                                                     *\n*    3.  THE DATE FORMAT MUST BE YYYYDDD, WHERE YYYY = THE 4 DIGIT    *\n*        YEAR VALUE AND DDD = THE 3 DIGIT JULIAN DAY NUMBER VALUE.    *\n*                                                                     *\n*    5.  THREE FIELDS ARE PASSED AS PARAMETERS TO THE ROUTINE:        *\n*        1)  A 7 BYTE FIELD CONTAINING THE JULIAN DATE (IN ZONED      *\n*            DECIMAL FORMAT),                                         *\n*        2)  A 1 BYTE ZONED-DECIMAL RETURN CODE, AND                  *\n*        3)  AN 8 BYTE FIELD WHICH WILL RECEIVE THE CORRESPONDING     *\n*            GREGORIAN DATE (IN ZONED-DECIMAL FORMAT).                *\n*        THE ROUTINE WILL NOT ALTER THE DATE PASSED TO IT.            *\n*                                                                     *\n*        SUGGESTED CALLING SYNTAX FOR ALC CALLERS:                    *\n*                                                                     *\n*                      CALL  Y2KJTOG,(DATEJ)                          *\n*                         . . .                                       *\n*             DATEJ    DS    ZL7'1997158'                             *\n*             RC       DS    ZL1'0'                                   *\n*             DATEG    DS    ZL8'00000000'                            *\n*                                                                     *\n*        SUGGESTED CALLING SYNTAX FOR COBOL CALLERS:                  *\n*                                                                     *\n*             01  JTOG-PARAMETERS.                                    *\n*                 02  DATEJ PIC 9(7) VALUE 1997158.                   *\n*                 02  RC    PIC 9(1) VALUE 0.                         *\n*                 02  DATEG PIC 9(8) VALUE 0.                         *\n*             CALL 'Y2KJTOG' USING JTOG-PARAMETERS.                   *\n*                                                                     *\n*    6.  THE POSSIBLE VALUES FOR THE RETURN CODE FIELD ARE:           *\n*                                                                     *\n*        0 INDICATES SUCCESSFUL EXECUTION OF THE ROUTINE.             *\n*                                                                     *\n*        2 INDICATES INVALID DATA WAS FOUND IN THE DATE FIELD.        *\n*        INVALID DATA ARE DETERMINED IF THE FIELD'S LOW ORDER         *\n*        BYTE'S ZONE CONTAINS AN INVALID SIGN, (NOT ONE OF            *\n*        X'C', X'D' OR X'F'), OR IF THE PRECEDING BYTES' ZONES        *\n*        ARE OTHER THAN X'F', OR IF ANY BYTE'S LOW ORDER NIBBLE       *\n*        CONTAINS A VALUE GREATER THAN X'9'.                          *\n*                                                                     *\n*        4 INDICATES THE VALUE OF THE YEAR SPECIFIED WAS NOT IN       *\n*        THE RANGE SPECIFIED IN 1 (ABOVE).                            *\n*                                                                     *\n*        8 INDICATES THE VALUE OF THE DAY SPECIFIED WAS NOT IN        *\n*        THE RANGE SPECIFIED IN 2 (ABOVE).                            *\n*                                                                     *\n*    7.  UPON SUCCESSFUL EXECUTION, THE 8 DIGIT GREGORIAN DATE        *\n*        (MMDDYYYY) WILL BE PLACED IN THE 3RD PARAMETER FIELD (IN     *\n*        ZONED DECIMAL FORMAT).  IF THE RETURN CODE IS A NON-ZERO     *\n*        VALUE (UNSUCCESSFUL EXECUTION), THE 3RD PARAMETER WILL       *\n*        CONTAIN ZEROS.                                               *\n*                                                                     *\n* ******************************************************************* *\n* ******************************************************************* *\n         EJECT\nY2KJTOG  CSECT\n*         PRINT NOGEN\n         EYEC  'CONVERT JULIAN (DAY OF YEAR) TO GREGORIAN'\n*\n         SAVE  (14,12)                 SAVE CALLER'S REGISTERS\n*\n         LR    R12,R15                 LOAD BASE WITH ENTRY ADDRESS\n         USING Y2KJTOG,R12             ESTABLISH ADDRESSABILITY\n*\n         L     R11,0(,R1)              LOAD A(PARAMETERS)\n         USING $PARMS,R11              ESTABLISH ADDRESSABILITY\n*\n         GETMAIN R,LV=$DYNLEN          GETMAIN DYNAMIC WORKAREA\n         LR    R10,R1                  SAVE A(MEMORY)\n*\n         ST    R13,4(,R10)             STORE A(CALLER'S SAVE AREA)\n         ST    R10,8(,R13)             BACK CHAIN A(MY SAVE AREA)\n         LR    R13,R10                 SET A(MY SAVE AREA)\n         USING $DYNMEM,R13             ESTABLISH ADDRESSABILITY\n*\n*    INSERT EYECATCHER MARKS AT BEGIN/END OF GETMAIN'D AREA.\n*\n         MVC   TOPFLAG,=C'Y2KJTOG GETMAIN BEGINS->'\n         MVC   BOTFLAG,=C'<-Y2KJTOG GETMAIN ENDS'\n*\n*    INITIALIZE RETURN CODE AND OUTPUT DATE FIELD.\n*\n         MVI   PRC,C'0'                ASSUME GOOD RETURN\n         MVC   PRC+1(8),PRC            NULL GREGORIAN DATE\n*\n*    TEST DATE FOR INVALID CHARACTER\n*\n         LA    R2,PDATEJ               ADDRESS PASSED DATE\n         LA    R3,6                    LENGTH MINUS 1\nP1VLOOP  CLI   0(R2),X'F0'             TEST LESS THAN C'0'\n         BL    P1ERR1                  IF YES, DATE CONTAINS BAD DATA\n         CLI   0(R2),X'F9'             TEST GREATER THAN C'9'\n         BH    P1ERR1                  IF YES, DATE CONTAINS BAD DATA\n         LA    R2,1(0,R2)              ADDRESS NEXT BYTE\n         BCT   R3,P1VLOOP              CONTINUE TESTING\n         IC    R3,0(,R2)               LOAD RIGHT-MOST CHARACTER\n         LR    R4,R3                   COPY INTO R4\n         N     R3,=F'15'               ISOLATE DIGIT PORTION\n         CH    R3,=H'9'                TEST GREATER THAN 9\n         BH    P1ERR1                  IF YES, DATE CONTAINS BAD DATA\n         SRL   R4,4                    ISOLATE ZONE PORTION\n         CH    R4,=H'12'               TEST FOR 'C' ZONE\n         BE    P1OK1                   IF YES, DATE IS VALID NUMERIC\n         CH    R4,=H'13'               TEST FOR 'D' ZONE\n         BE    P1OK1                   IF YES, DATE IS VALID NUMERIC\n         CH    R4,=H'15'               TEST FOR 'F' ZONE\n         BE    P1OK1                   IF YES, DATE IS VALID NUMERIC\n*\n*    DATE CONTAINED AN INVALID CHARACTER\n*\nP1ERR1   MVI   PRC,C'2'                INDICATE BAD DATA\n         B     RETURN                  AND RETURN TO CALLER\n*\n*    TEST YEAR FOR VALID RANGE\n*\nP1OK1    PACK  WX,PDATEJ(4)            PACK PASSED YEAR\n         CP    WX,=P'1601'             IS YEAR PRIOR TO 1601?\n         BL    P1ERR2                  IF YES, YEAR NOT VALID\n         CP    WX,=P'3399'             IS YEAR AFTER 3399?\n         BNH   P1OK2                   IF NOT, YEAR IS VALID\n*\n*    YEAR CONTAINED AN INVALID VALUE (OUT OF RANGE)\n*\nP1ERR2   MVI   PRC,C'4'                INDICATE BAD VALUE\n         B     RETURN                  AND RETURN TO CALLER\n*\n*    CALL Y2KGTOA TO GET JANUARY 1 ASTRO NUMBER\n*\nP1OK2    MVC   DATEG(4),=C'0101'       JANUARY 1\n         MVC   DATEG+4(4),PDATEJ       OF REQUESTED YEAR\n         LA    R1,GTOAPARM             ADDRESS OF Y2KGTOA PARMS\n         ST    R1,PLIST                STORE IN DYNAMIC AREA\n         LA    R1,PLIST                ADDRESS TO PASS\n         L     R15,=V(Y2KGTOA)         ADDRESS OF ROUTINE\n         BALR  R14,R15                 CALL ROUTINE\n*\n*    ADJUST ASTRO NUMBER NUMBER FOR JULIAN DATE\n*\n         PACK  WX(4),ANUMG(7)          PACK IT\n         SP    WX,=P'1'                ADJUST TO 12/31 OF PRIOR YEAR\n         PACK  WY(2),PDATEJ+4(3)       PACK JULIAN DAY NUMBER\n         AP    WX,WY                   ADD TO PRIOR YEAR'S ASTRO #\n*\n*    CALL Y2KATOG TO GET NEW GREGORIAN DATE\n*\n         UNPK  ANUMA(7),WX             UNPACK COMPUTED ASTRO #\n         LA    R1,ATOGPARM             ADDRESS OF Y2KATOG PARMS\n         ST    R1,PLIST                STORE IN DYNAMIC AREA\n         LA    R1,PLIST                ADDRESS TO PASS\n         L     R15,=V(Y2KATOG)         ADDRESS OF ROUTINE\n         BALR  R14,R15                 CALL ROUTINE\n*\n*    IF YEAR IS DIFFERENT, DDD WAS INVALID FOR YEAR SPECIFIED\n*\n         CLC   PDATEJ(4),DATEA+4       COMPARE YEARS\n         BE    MOVEOUT                 IF SAME, ALL OK\n         MVI   PRC,C'8'                ELSE INDICATE ERROR\n         B     RETURN\n*\n*    MOVE RETURNED DATE TO OUR CALLER'S RETURN AREA\n*\nMOVEOUT  MVC   PDATEG,DATEA            STORE OUTPUT FIELD\n*\n*    RESTORE REGISTERS, FREE STORAGE, AND RETURN\n*\nRETURN   LR    R1,R13                  LOAD ADDRESS OF GETMAINED AREA\n         L     R13,4(,R13)             RELOAD PREVIOUS SAVE AREA\n         LA    R0,$DYNLEN              LOAD LENGTH OF GETMAINED AREA\n         FREEMAIN R,LV=(0),A=(1)       FREE GETMAINED AREA\n         RETURN (14,12),RC=0           RETURN TO CALLER WITH RC=0\n*\n         LTORG\n         EJECT\n* ******************************************************************* *\n* ***************************** EQUATES ***************************** *\n* ******************************************************************* *\n         YREGS\n* ******************************************************************* *\n         EJECT\n* ******************************************************************* *\n* ***************************** DSECTS ****************************** *\n* ******************************************************************* *\n$DYNMEM  DSECT                         DYNAMICALLY ALLOCATED MEMORY\nSAVEAREA DS    18F                     REGISTER SAVE AREA\nTOPFLAG  DS    CL24                    EYECATCHER\nPLIST    DS    A                       PARMLIST ADDR FOR SUB CALLS\nGTOAPARM DS    0H                      PARAMETERS FOR Y2KGTOA\nDATEG    DS    CL8                       INPUT GREGORIAN DATE\nRCG      DS    CL1                       RETURN CODE\nANUMG    DS    ZL7                       RETURNED ASTRO NUMBER\nATOGPARM DS    0H                      PARAMETERS FOR Y2KATOG\nANUMA    DS    ZL7                       INPUT ASTRO NUMBER\nRCA      DS    CL1                       RETURN CODE\nDATEA    DS    CL8                       RETURNED GREGORIAN DATE\nWX       DS    PL4                     WORK FIELD\nWY       DS    PL2                     WORK FIELD\nBOTFLAG  DS    CL22                    EYECATCHER\n*\n$DYNLEN  EQU   (*-$DYNMEM)             LENGTH OF GETMAIN'D AREA\n*\n$PARMS   DSECT                         PARAMETERS FROM/TO CALLER\nPDATEJ   DS    CL7                     JULIAN DATE INPUT\nPRC      DS    CL1                     RETURN CODE (0/2/4/8)\nPDATEG   DS    CL8                     GREGORIAN DATE OUTPUT\n* ******************************************************************* *\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "Y2KLAGE": {"ttr": 1545, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x132O\\x01\\x132O\\x134\\x02\\r\\x02\\r\\x00\\x00\\xd1\\xc1\\xe8\\xd4\\xe8\\xf2\\xd2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2013-11-20T00:00:00", "modifydate": "2013-11-20T13:34:00", "lines": 525, "newlines": 525, "modlines": 0, "user": "JAYMY2K"}, "text": "         TITLE 'Y2KLAGE - COMPUTE ELAPSED YEARS, MONTHS, DAYS'\n*                                                                     *\n*   YY   YY   222   KK   KK LL         A     GGGGG  EEEEEE            *\n*   YY   YY  2   2  KK  KK  LL        AAA   GG   GG EE                *\n*   YY   YY      2  KK KK   LL       AA AA  GG   GG EE                *\n*    YY YY       2  KKKK    LL      AA   AA GG      EEEE              *\n*     YYY     222   KKKK    LL      AA   AA GG  GGG EE                *\n*     YY     2      KK KK   LL      AAAAAAA GG   GG EE                *\n*     YY     2      KK  KK  LL      AA   AA GG   GG EE                *\n*     YY     22222  KK   KK LLLLLLL AA   AA  GGGGG  EEEEEEE           *\n*                                                                     *\n* ******************************************************************* *\n* ******************************************************************* *\n*    THIS SUBROUTINE COMPUTES THE NUMBER OF YEARS, MONTHS, AND        *\n*    DAYS ELAPSED BETWEEN 2 GIVEN GREGORIAN DATES (MMDDYYYY) FOR      *\n*    LONG TERM AGING                                                  *\n*                                                                     *\n*    1.  VALID INPUT YEARS FOR THIS ROUTINE ARE THE YEARS 1601        *\n*        THROUGH 3399 A. D. (INCLUSIVE)                               *\n*                                                                     *\n*    2.  VALID INPUT MONTH VALUES FOR THIS ROUTINE ARE 01 THROUGH 12. *\n*                                                                     *\n*    3.  VALID INPUT DAY VALUES FOR THIS ROUTINE ARE 01 THROUGH 31    *\n*        WITH EXCEPTIONS FOR THE MONTHS LISTED:                       *\n*             MONTH          MAXIMUM DAY VALUE                        *\n*              04                    30                               *\n*              06                    30                               *\n*              09                    30                               *\n*              11                    30                               *\n*              02                    28                               *\n*              02 DURING LEAP YEAR   29                               *\n*                                                                     *\n*    4.  THE DATE FORMAT MUST BE MMDDYYYY, WHERE MM = THE 2 DIGIT     *\n*        MONTH VALUE, DD = THE 2 DIGIT DAY VALUE, AND YYYY = THE      *\n*        4 DIGIT YEAR VALUE.                                          *\n*                                                                     *\n*    5.  SIX FIELDS ARE PASSED AS PARAMETERS TO THE ROUTINE:          *\n*        1) & 2)  8 BYTE FIELDS CONTAINING THE GREGORIAN DATES (IN    *\n*            (ZONED-DECIMAL FORMAT) BETWEEN WHICH THE NUMBER OF       *\n*            YEARS, MONTHS AND DAYS IS TO BE CALCULATED (ORDER        *\n*            OF THE DATES IS IMMATERIAL),                             *\n*        3)  A 1 BYTE ZONED-DECIMAL RETURN CODE,                      *\n*        4), 5) & 6)  2 BYTE, 2 BYTE, AND 5 BYTE FIELDS WHICH WIL     *\n*            RECEIVE THE NUMBER OF DAYS, MONTHS, AND YEARS ELAPSED    *\n*            (IN ZONED-DECIMAL FORMAT).                               *\n*        THE ROUTINE WILL NOT ALTER THE DATES PASSED TO IT.           *\n*                                                                     *\n*        SUGGESTED CALLING SYNTAX FOR ALC CALLERS:                    *\n*                                                                     *\n*                      CALL  Y2KLAGE,(DATE1)                          *\n*                         . . .                                       *\n*             DATE1    DS    ZL8'01011997'                            *\n*             DATE2    DS    ZL8'04251988'                            *\n*             RC       DS    ZL1'0'                                   *\n*             DAYS     DS    ZL2'00'                                  *\n*             MONTHS   DS    ZL2'00'                                  *\n*             YEARS    DS    ZL3'00000'                               *\n*                                                                     *\n*        SUGGESTED CALLING SYNTAX FOR COBOL CALLERS:                  *\n*                                                                     *\n*             01  LAGE-PARAMETERS.                                    *\n*                 02  DATE1  PIC 9(8) VALUE 01011997.                 *\n*                 02  DATE2  PIC 9(8) VALUE 04251988.                 *\n*                 02  RC     PIC 9(1) VALUE 0.                        *\n*                 02  DAYS   PIC S9(2) VALUE +0.                      *\n*                 02  MONTHS PIC S9(2) VALUE +0.                      *\n*                 02  YEARS  PIC S9(5) VALUE +0.                      *\n*             CALL 'Y2KLAGE' USING LAGE-PARAMETERS.                   *\n*                                                                     *\n*    6.  THE POSSIBLE VALUES FOR THE RETURN CODE FIELD ARE:           *\n*                                                                     *\n*        0 INDICATES SUCCESSFUL EXECUTION OF THE ROUTINE.             *\n*                                                                     *\n*        2 INDICATES INVALID DATA WAS FOUND IN THE DATE1 FIELD        *\n*        (3 FOR DATE2).  INVALID DATA ARE DETERMINED IF THE FIELD'S   *\n*        LOW ORDER BYTE'S ZONE CONTAINS AN INVALID SIGN, (NOT ONE     *\n*        OF X'C', X'D', OR X'F'), OR IF THE PRECEEDING BYTES' ZONES   *\n*        ARE OTHER THAN X'F', OR IF ANY BYTE'S LOW ORDER NIBBLE       *\n*        CONTAINS A VALUE GREATER THAN X'9'.                          *\n*                                                                     *\n*        4 INDICATES THE VALUE OF THE YEAR SPECIFIED IN THE DATE1     *\n*        FIELD (5 FOR DATE2) WAS NOT IN THE RANGE SPECIFIED IN 1      *\n*        (ABOVE).                                                     *\n*                                                                     *\n*        6 INDICATES THE VALUE OF THE MONTH SPECIFIED IN THE DATE1    *\n*        FIELD (7 FOR DATE2) WAS NOT IN THE RANGE SPECIFIED IN 2      *\n*        (ABOVE).                                                     *\n*                                                                     *\n*        8 INDICATES THE VALUE OF THE DAY SPECIFIED IN THE DATE1      *\n*        FIELD (9 FOR DATE2) WAS NOT IN THE RANGE SPECIFIED IN 3      *\n*        (ABOVE).                                                     *\n*                                                                     *\n*    7.  UPON SUCCESSFUL EXECUTION, THE ABSOLUTE VALUE OF THE NUMBER  *\n*        OF DAYS, MONTHS, AND YEARS WILL BE PLACED IN THE 4TH, 5TH    *\n*        AND 6TH FIELDS.  IF THE RETURN CODE IS A NON-ZERO VALUE      *\n*        (UNSUCCESSFUL EXECUTION), THESE 3 FIELDS WILL CONTAIN ZEROS. *\n*                                                                     *\n* ------------------------------------------------------------------- *\n* CHANGE LOG:                                                         *\n* 0.1 04/17/2008 - CHANGED METHOD OF DETERMINING LEAP YEAR AT THE     *\n*                  SUGGESTION OF ANGEL LUIS DOMINGUEZ.  TESTS ARE     *\n*                  NOW DONE ON BINARY FORM OF YEAR, ELIMINATING THE   *\n*                  USE OF PACKED DECIMAL INSTRUCTIONS.  TESTS ON MY   *\n*                  EMULATED HARDWARE SHOW A SAVINGS OF 3.13 SECONDS   *\n*                  ON 500,000 ITERATIONS.                             *\n* ******************************************************************* *\n* ******************************************************************* *\n         EJECT\nY2KLAGE  CSECT\n          PRINT NOGEN\n         EYEC  'LONG TERM AGE BETWEEN 2 DATES'\n*\n         SAVE  (14,12)                 SAVE CALLER'S REGISTERS\n*\n         LR    R12,R15                 LOAD BASE WITH ENTRY ADDRESS\n         USING Y2KLAGE,R12             ESTABLISH ADDRESSABILITY\n*\n         L     R11,0(,R1)              LOAD A(PARAMETERS)\n         USING $PARMS,R11              ESTABLISH ADDRESSABILITY\n*\n         GETMAIN R,LV=$DYNLEN          GETMAIN DYNAMIC WORKAREA\n         LR    R10,R1                  SAVE A(MEMORY)\n*\n         ST    R13,4(,R10)             STORE A(CALLER'S SAVE AREA)\n         ST    R10,8(,R13)             BACK CHAIN A(MY SAVE AREA)\n         LR    R13,R10                 SET A(MY SAVE AREA)\n         USING $DYNMEM,R13             ESTABLISH ADDRESSABILITY\n*\n*    INSERT EYECATCHER MARKS AT BEGIN/END OF GETMAIN'D AREA.\n*\n         MVC   TOPFLAG,=C'Y2KLAGE GETMAIN BEGINS->'\n         MVC   BOTFLAG,=C'<-Y2KLAGE GETMAIN ENDS'\n*\n*    INITIALIZE OUTPUT PARAMETER FIELDS.\n*\n         MVI   PRC,C'0'                ASSUME GOOD RETURN CODE\n         MVC   PRC+1(9),PRC            ZERO ELAPSED DAYS\n*\n*    TEST DATE1 FOR INVALID CHARACTER\n*\n         LA    R2,PDATE1               ADDRESS PASSED DATE\n         LA    R3,7                    LENGTH MINUS 1\n         MVI   PRC,C'2'                ASSUME INVALID DATA\n         BAL   R14,PTEST1              PERFORM TESTING ROUTINE\n         CLI   PRC,C'0'                DID DATE TEST 'OK'?\n         BNE   RETURN                  IF NOT, RETURN TO CALLER\n*\n*    TEST DATE2 FOR INVALID CHARACTER\n*\n         LA    R2,PDATE2               ADDRESS PASSED DATE\n         LA    R3,7                    LENGTH MINUS 1\n         MVI   PRC,C'3'                ASSUME INVALID DATA\n         BAL   R14,PTEST1              PERFORM TESTING ROUTINE\n         CLI   PRC,C'0'                DID DATE TEST 'OK'?\n         BNE   RETURN                  IF NOT, RETURN TO CALLER\n*\n*    BRANCH AROUND PERFORMED CODE TO CONTINUE\n*\n         B     TEST2                   CONTINUE WITH NEXT TEST\n*\n*    THIS ROUTINE SCANS FOR INVALID CHARACTERS IN ZONED-DECIMAL\n*    PARAMETER FIELDS.  IT IS CALLED FOR BOTH DATE FIELDS.\n*\nPTEST1   EQU   *\nPT1LOOP  CLI   0(R2),X'F0'             TEST LESS THAN C'0'\n         BL    PT1ERR                  IF YES, DATE CONTAINS BAD DATA\n         CLI   0(R2),X'F9'             TEST GREATER THAN C'9'\n         BH    PT1ERR                  IF YES, DATE CONTAINS BAD DATA\n         LA    R2,1(0,R2)              ADDRESS NEXT BYTE\n         BCT   R3,PT1LOOP              CONTINUE TESTING\n         IC    R3,0(,R2)               LOAD RIGHT-MOST CHARACTER\n         LR    R4,R3                   COPY INTO R4\n         N     R3,=F'15'               ISOLATE DIGIT PORTION\n         CH    R3,=H'9'                TEST GREATER THAN 9\n         BH    PT1ERR                  IF YES, DATE CONTAINS BAD DATA\n         SRL   R4,4                    ISOLATE ZONE PORTION\n         CH    R4,=H'12'               TEST FOR 'C' ZONE\n         BE    PT1OK                   IF YES, DATE IS VALID NUMERIC\n         CH    R4,=H'13'               TEST FOR 'D' ZONE\n         BE    PT1OK                   IF YES, DATE IS VALID NUMERIC\n         CH    R4,=H'15'               TEST FOR 'F' ZONE\n         BE    PT1OK                   IF YES, DATE IS VALID NUMERIC\n*\n*    DATE CONTAINED AN INVALID CHARACTER.  SINCE THE ERROR RC WAS\n*    SET BY THE CALLER, JUST RETURN.\n*\nPT1ERR   BR    R14                     RETURN\n*\n*    DATE WAS VALID, SO RESET RETURN CODE TO GOOD AND RETURN.\n*\nPT1OK    MVI   PRC,C'0'                INDICATE GOOD DATE\n         BR    R14                     AND RETURN\n*\n*    THIS BRANCH POINT IS TO JUMP OVER PERFORMED ROUTINE ABOVE\n*\nTEST2    EQU   *\n*\n*    TEST YEAR1 FOR VALID RANGE\n*\n         PACK  WFY,PDATE1+4(4)         PACK PASSED YEAR1\n         CP    WFY,=P'1601'            IS YEAR PRIOR TO 1601?\n         BL    P1ERR2                  IF YES, YEAR NOT VALID\n         CP    WFY,=P'3399'            IS YEAR AFTER 3399?\n         BNH   P1OK2                   IF NOT, YEAR IS VALID\n*\n*    YEAR1 CONTAINED AN INVALID VALUE (OUT OF RANGE)\n*\nP1ERR2   MVI   PRC,C'4'                INDICATE BAD VALUE\n         B     RETURN                  AND RETURN TO CALLER\n*\n*    TEST YEAR2 FOR VALID RANGE\n*\nP1OK2    PACK  WTY,PDATE2+4(4)         PACK PASSED YEAR2\n         CP    WTY,=P'1601'            IS YEAR PRIOR TO 1601?\n         BL    P2ERR2                  IF YES, YEAR NOT VALID\n         CP    WTY,=P'3399'            IS YEAR AFTER 3399?\n         BNH   P2OK2                   IF NOT, YEAR IS VALID\n*\n*    YEAR2 CONTAINED AN INVALID VALUE (OUT OF RANGE)\n*\nP2ERR2   MVI   PRC,C'5'                INDICATE BAD VALUE\n         B     RETURN                  AND RETURN TO CALLER\n*\n*    TEST MONTH1 FOR VALID RANGE\n*\nP2OK2    PACK  WFM,PDATE1(2)           PACK PASSED MONTH1\n         CP    WFM,=P'1'               IS MONTH ZERO?\n         BL    P1ERR3                  IF YES, MONTH NOT VALID\n         CP    WFM,=P'12'              IS MONTH GREATER THAN 12?\n         BNH   P1OK3                   IF NOT, MONTH IS VALID\n*\n*    MONTH1 CONTAINED AN INVALID VALUE (OUT OF RANGE)\n*\nP1ERR3   MVI   PRC,C'6'                INDICATE BAD VALUE\n         B     RETURN                  AND RETURN TO CALLER\n*\n*    TEST MONTH2 FOR VALID RANGE\n*\nP1OK3    PACK  WTM,PDATE2(2)           PACK PASSED MONTH2\n         CP    WTM,=P'1'               IS MONTH ZERO?\n         BL    P2ERR3                  IF YES, MONTH NOT VALID\n         CP    WTM,=P'12'              IS MONTH GREATER THAN 12?\n         BNH   P2OK3                   IF NOT, MONTH IS VALID\n*\n*    MONTH2 CONTAINED AN INVALID VALUE (OUT OF RANGE)\n*\nP2ERR3   MVI   PRC,C'7'                INDICATE BAD VALUE\n         B     RETURN                  AND RETURN TO CALLER\n*\n*    GET MAXIMUM DAYS FOR DATE1 MONTH\n*\nP2OK3    MVC   GMYEAR,PDATE1+4         COPY YEAR TO GETMDAYS PARM\n         MVC   GMMONTH,PDATE1          COPY MONTH TO GETMDAYS PARM\n         BAL   R9,GETMDAYS             EXECUTE ROUTINE\n*\n*    TEST DAY FOR VALID RANGE\n*\n         PACK  WFD,PDATE1+2(2)         PACK PASSED DAY1\n         ZAP   WFD,WFD                 CONVERT SIGN OF DAY TO X'C'\n         CP    WFD,=P'1'               IS DAY ZERO?\n         BL    P1ERR4                  IF YES, DAY NOT VALID\n         CP    WFD,MAXDAYS             IS DAY GREATER THAN MAX?\n         BNH   P1OK4                   IF NOT, MONTH IS VALID\n*\n*    DAY1 CONTAINED AN INVALID VALUE (OUT OF RANGE)\n*\nP1ERR4   MVI   PRC,C'8'                INDICATE BAD VALUE\n         B     RETURN                  AND RETURN TO CALLER\n*\n*    GET MAXIMUM DAYS FOR DATE2 MONTH\n*\nP1OK4    MVC   GMYEAR,PDATE2+4         COPY YEAR TO GETMDAYS PARM\n         MVC   GMMONTH,PDATE2          COPY MONTH TO GETMDAYS PARM\n         BAL   R9,GETMDAYS             EXECUTE ROUTINE\n*\n*    TEST DAY FOR VALID RANGE\n*\n         PACK  WTD,PDATE2+2(2)         PACK PASSED DAY2\n         ZAP   WTD,WTD                 CONVERT SIGN OF DAY TO X'C'\n         CP    WTD,=P'1'               IS DAY ZERO?\n         BL    P2ERR4                  IF YES, DAY NOT VALID\n         CP    WTD,MAXDAYS             IS DAY GREATER THAN MAX?\n         BNH   P2OK4                   IF NOT, MONTH IS VALID\n*\n*    DAY2 CONTAINED AN INVALID VALUE (OUT OF RANGE)\n*\nP2ERR4   MVI   PRC,C'9'                INDICATE BAD VALUE\n         B     RETURN                  AND RETURN TO CALLER\n*\n*    ENSURE THAT WFM/WFD/WFY CONTAINS EARLIER OF THE 2 DATES\n*\nP2OK4    CP    WFY,WTY                 COMPARE YEARS\n         BL    ORDOK                   ORDER IS CORRECT\n         BH    ORDSWAP                 ORDER IS INCORRECT\n         CP    WFM,WTM                 COMPARE MONTHS (SAME YEAR)\n         BL    ORDOK                   ORDER IS CORRECT\n         BH    ORDSWAP                 ORDER IS INCORRECT\n         CP    WFD,WTD                 COMPARE DAYS (SAME MONTH)\n         BNH   ORDOK                   ORDER IS CORRECT\nORDSWAP  ZAP   COUNT,WFY               SWAP\n         ZAP   WFY,WTY                    WFY AND\n         ZAP   WTY,COUNT                     WTY\n         ZAP   COUNT,WFM               SWAP\n         ZAP   WFM,WTM                    WFM AND\n         ZAP   WTM,COUNT                     WTM\n         ZAP   COUNT,WFD               SWAP\n         ZAP   WFD,WTD                    WFD AND\n         ZAP   WTD,COUNT                     WTD\n*\n*    SET COUNT WORK FIELD TO ZERO.\n*\nORDOK    ZAP   COUNT,=P'0'              SET COUNT TO ZERO\n*\n*    BEGIN COMPUTATIONS FOR ELAPSED TIME:  STEP 1:  IF YEAR AND\n*    MONTH ARE THE SAME, COMPUTE DIFFERENCE IN DAYS AND EXIT.\n*\n         CP    WFY,WTY                 ARE YEARS THE SAME?\n         BNE   STEP2                   IF NOT, GO TO NEXT STEP\n         CP    WFM,WTM                 ARE MONTHS THE SAME?\n         BNE   STEP2                   IF NOT, GO TO NEXT STEP\n         SP    WTD,WFD                 COMPUTE DIFFERENCE BETWEEN DAYS\n         UNPK  DWORK(3),WTD(2)         UNPACK\n         OI    DWORK+2,X'F0'           CLEAR SIGN\n         MVC   PDAYS,DWORK+1           MOVE TO OUTPUT\n         B     RETURN                  AND RETURN\n*\n*    STEP2:  GET MAXDAYS FOR FROM MONTH AND STORE FROM DAY IN ID\n*\nSTEP2    UNPK  GMYEAR,WFY              COPY YEAR TO GETMDAYS PARM\n         UNPK  GMMONTH,WFM             COPY MONTH TO GETMDAYS PARM\n         BAL   R9,GETMDAYS             EXECUTE ROUTINE\n         ZAP   ID,WFD                  STORE FROM DAY AND\n         ZAP   IMAX,MAXDAYS              MAXDAYS FOR FROM YEAR/MONTH\n*\n*    STEP3:  BEGIN INCREMENTING FROM MONTH AND YEAR UNTIL EQUAL\n*    TO MONTH AND YEAR, COUNTING THE NUMBER OF INCREMENTS.\n*\nSTEP3    CP    WFY,WTY                 YEARS DIFFERENT?\n         BL    STEP3A                  IF SO, CONTINUE INCREMENTING\n         CP    WFM,WTM                 MONTHS DIFFERENT?\n         BNL   STEP4                   IF NOT, GO TO NEXT STEP\nSTEP3A   AP    WFM,=P'1'               INCREMENT MONTH\n         AP    COUNT,=P'1'             COUNT MONTHS INCREMENTED\n         CP    WFM,=P'13'              EXCEEDED 12 MONTHS THIS YEAR?\n         BL    STEP3                   IF NOT, CONTINUE THIS STEP\n         SP    WFM,=P'12'              ELSE, RESET MONTH\n         AP    WFY,=P'1'                 AND INCREMENT YEAR\n         B     STEP3                       THEN CONTINUE THIS STEP\n*\n*    GET MAXDAYS FOR INCREMENTED YEAR/MONTH.\n*\nSTEP4    UNPK  GMYEAR,WFY              COPY YEAR TO GETMDAYS PARM\n         UNPK  GMMONTH,WFM             COPY MONTH TO GETMDAYS PARM\n         BAL   R9,GETMDAYS             EXECUTE ROUTINE\n*\n*    TEST FOR OVERSHOOT.\n*\nSTEP5    ZAP   X,WTD                   PUT TO DAY IN WORK FIELD\n         SP    X,MAXDAYS               SUBTRACT MAX DAYS\n         BL    STEP7                   IF LESS THAN ZERO, STEP 7\n*\n*    COMPUTE SUM OF DAYS COUNTED TO END OF THE EARLIEST MONTH, PLUS\n*    DAYS COUNTED TO THE TARGET DAY FROM THE END OF THE NEWLY\n*    CALCULATED MONTH.\n*\n         ZAP   WTD,X                   SET TO DAY EQUAL X\n         AP    WTD,IMAX                ADD ORIGINAL MAX DAYS\n         SP    WTD,ID                  SUBTRACT ORIGINAL DAY\n         B     FINI                    GO TRANSFER TO RETURN FIELDS\n*\n*    CORRECT OVERSHOOT.\n*\nSTEP7    SP    COUNT,=P'1'             DECREMENT MONTH COUNTER\n         AP    WTD,IMAX                ADD ORIGINAL MAX DAYS\n         SP    WTD,ID                  SUBTRACT ORIGINAL DAY\n*\n*    IF TO DAY NOT LESS THAN ORIGINAL MAX DAYS AND INITIAL FROM DAY\n*    IS LESS THAN 29, SWITCH TO RELATIVE DATE DISPLACEMENT AGING\n*\n         CP    WTD,IMAX                TO DAY < ORIGINAL MAX DAYS?\n         BL    FINI                    NO, TRANSFER TO RETURN FIELDS\n         CP    ID,=P'29'               ORIGINAL DAY < 29?\n         BNL   FINI                    NO, TRANSFER TO RETURN FIELDS\n*\n*    SWITCH TO RELATIVE AGING: PDAY PARAMETER WILL BE: -1 < PDAY < 33\n*\n         SP    WTD,IMAX                SUBTRACT ORIGINAL MAX DAYS\n         AP    COUNT,=P'1'             INCREMENT COUNT\n*\n*    BUILD PARAMETER FIELDS\n*\nFINI     ZAP   WORK5,COUNT             PUT COUNT IN 5 BYTE FIELD\n         DP    WORK5,=P'12'            DIVIDE BY 12\n         UNPK  PYEARS(5),WORK5(3)      UNPACK YEARS\n         OI    PYEARS+4,X'F0'          CLEAR SIGN\n         UNPK  DWORK(3),WORK5+3(2)     UNPACK MONTHS\n         OI    DWORK+2,X'F0'           CLEAR SIGN\n         MVC   PMONTHS,DWORK+1         MOVE TO OUTPUT\n         UNPK  DWORK(3),WTD(2)         UNPACK DAYS\n         OI    DWORK+2,X'F0'           CLEAR SIGN\n         MVC   PDAYS,DWORK+1           MOVE TO OUTPUT\n*\n*    RESTORE REGISTERS, FREE STORAGE, AND RETURN\n*\nRETURN   LR    R1,R13                  LOAD ADDRESS OF GETMAINED AREA\n         L     R13,4(,R13)             RELOAD PREVIOUS SAVE AREA\n         LA    R0,$DYNLEN              LOAD LENGTH OF GETMAINED AREA\n         FREEMAIN R,LV=(0),A=(1)       FREE GETMAINED AREA\n         RETURN (14,12),RC=0           RETURN TO CALLER WITH RC=0\n*\n* ******************************************************************* *\n* *************************** SUBROUTINES *************************** *\n* ******************************************************************* *\n*\n*    SINCE IT IS NECESSARY TO REPEATEDLY DETERMINE THE MAXIMUM NUMBER\n*    OF DAYS FOR A GIVEN MONTH IN A GIVEN YEAR, THIS ROUTINE IS USED\n*    TO REDUCE PROGRAM SIZE.  THE YEAR IS PLACED IN GMYEAR, THE MONTH\n*    IN GMMONTH AND THE ROUTINE IS BRANCHED TO USING REGISTER 9 AS\n*    THE LINK POINT TO THE CALL.\n*\n* ******************************************************************* *\nGETMDAYS EQU   *\n*\n*    DETERMINE LEAP YEAR STATUS\n*\n         MVI   LEAP,C'0'               ASSUME NOT A LEAP YEAR\n         PACK  DWORK(5),GMYEAR         PUT YEAR INTO WORK FIELD\n         MVO   B3(3),DWORK+2(3)        DROP SIGN                    0.1\n         TM    B3+1,X'01'              ODD YEAR?                    0.1\n         BO    GMCONT1                 IF YES, IT IS *NOT* LEAP YEAR0.1\n         TM    B3+1,X'12'              EVENLY DIVISIBLE BY 4?       0.1\n         BM    GMCONT1                 IF NO, IT IS *NOT* LEAP YEAR 0.1\n         CLI   B3+1,X'00'              DOES YEAR END IN 00?         0.1\n         BNE   GMLEAP                  IF YES, IT IS A LEAP YEAR    0.1\n         TM    B3,X'01'                IS CENTURY ODD?              0.1\n         BO    GMCONT1                 IF YES, IT IS *NOT* LEAP YEAR0.1\n         TM    B3,X'12'                EVENLY DIVISIBLE BY 400?     0.1\n         BM    GMCONT1                 IF NO, IT IS *NOT* LEAP YEAR 0.1\n*                                      ELSE IT IS A LEAP YEAR       0.1\n*\n*    TEST\n*\nGMLEAP   MVI   LEAP,C'1'               INDICATE LEAP YEAR\n*\n*    RETRIEVE MAXIMUM DAYS ENTRY FROM TABLE\n*\nGMCONT1  LA    R4,DIM                  GET ADDRESS OF DAY TABLE\n         CLI   LEAP,C'0'               IS THIS LEAP YEAR?\n         BE    GMCONT2                 IF NOT, ADDRESS IS OK\n         LA    R4,2(,R4)               ELSE ADJUST TO LEAP ENTRY\nGMCONT2  PACK  DWORK(8),GMMONTH(2)     GET MONTH INTO DOUBLEWORD\n         CVB   R3,DWORK                CONVERT TO BINARY\n         BCTR  R3,0                    DECREMENT BY 1 (ZERO BASE)\n         SLL   R3,2                    MULTIPLY BY TABLE ENTRY LENGTH\n         LA    R4,0(R3,R4)             LOAD ENTRY ADDRESS INTO R4\n         MVC   MAXDAYS(2),0(R4)        MOVE ENTRY TO WORK FIELD\n*\n*    RETURN FROM SUBROUTINE\n*\n         BR    R9                      RETURN TO CALLING POINT\n         EJECT\n* ******************************************************************* *\n* **************************** CONSTANTS **************************** *\n* ******************************************************************* *\n*\n*    MAXIMUM DAYS IN MONTHS ... EACH ENTRY HAS 2 VALUES, THE 1ST FOR\n*    A NORMAL (NON-LEAP) YEAR AND THE 2ND FOR A LEAP YEAR\n*\nDIM      DC    PL2'31',PL2'31'           JANUARY\n         DC    PL2'28',PL2'29'           FEBRUARY\n         DC    PL2'31',PL2'31'           MARCH\n         DC    PL2'30',PL2'30'           APRIL\n         DC    PL2'31',PL2'31'           MAY\n         DC    PL2'30',PL2'30'           JUNE\n         DC    PL2'31',PL2'31'           JULY\n         DC    PL2'31',PL2'31'           AUGUST\n         DC    PL2'30',PL2'30'           SEPTEMBER\n         DC    PL2'31',PL2'31'           OCTOBER\n         DC    PL2'30',PL2'30'           NOVEMBER\n         DC    PL2'31',PL2'31'           DECEMBER\n* ******************************************************************* *\n         LTORG\n         EJECT\n* ******************************************************************* *\n* ***************************** EQUATES ***************************** *\n* ******************************************************************* *\n         YREGS\n* ******************************************************************* *\n         EJECT\n* ******************************************************************* *\n* ***************************** DSECTS ****************************** *\n* ******************************************************************* *\n$DYNMEM  DSECT                         DYNAMICALLY ALLOCATED MEMORY\nSAVEAREA DS    18F                     REGISTER SAVE AREA\nTOPFLAG  DS    CL24                    EYECATCHER\nWFM      DS    PL2                     FROM MONTH\nWFD      DS    PL2                     FROM DAY\nWFY      DS    PL3                     FROM YEAR\nWTM      DS    PL2                     TO MONTH\nWTD      DS    PL2                     TO DAY\nWTY      DS    PL3                     TO YEAR\nID       DS    PL2                     WORK FIELD\nIMAX     DS    PL2                     WORK FIELD\nX        DS    PL2                     WORK FIELD\nWORK5    DS    PL5                     WORK FIELD\nCOUNT    DS    PL3                     WORK COUNTER\nGMYEAR   DS    ZL4                     PARM YEAR TO GETMDAYS ROUTINE\nGMMONTH  DS    ZL2                     PARM MONTH TO GETMDAYS ROUTINE\nMAXDAYS  DS    PL2                     MAX DAYS IN CURRENT MONTH\nLEAP     DS    CL1                     LEAP STATUS\nDWORK    DS    D                       DOUBLEWORD WORK FIELD\nB3       DS    XL3                     WORK AREA FOR BINARY YEAR    0.1\nBOTFLAG  DS    CL22                    EYECATCHER\n*\n$DYNLEN  EQU   (*-$DYNMEM)             LENGTH OF GETMAIN'D AREA\n*\n$PARMS   DSECT                         PARAMETERS FROM/TO CALLER\nPDATE1   DS    CL8                     DATE TO BE PROCESSED\nPDATE2   DS    CL8                     DATE TO BE PROCESSED\nPRC      DS    CL1                     RETURN CODE (0, 2-9)\nPDAYS    DS    ZL2                     ELAPSED DAYS\nPMONTHS  DS    ZL2                     ELAPSED MONTHS\nPYEARS   DS    ZL5                     ELAPSED YEARS\n* ******************************************************************* *\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "Y2KLEAP": {"ttr": 1799, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x14\\x01\\x132O\\x01\\x132O\\x14&\\x00\\xd2\\x00\\xcf\\x00\\x18\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2013-11-20T00:00:00", "modifydate": "2013-11-20T14:26:14", "lines": 210, "newlines": 207, "modlines": 24, "user": "SBGOLOB"}, "text": "         TITLE 'Y2KLEAP - DETERMINES LEAP YEAR STATUS'\n* ******************************************************************* *\n* ******************************************************************* *\n*  THIS PROGRAM IS COPYRIGHTED BY:  MR. JAY MOSELEY, CCP              *\n*                                   200 HEYWOOD AVE 1503              *\n*                                   SPARTANBURG, SC 29307-1792        *\n*  NO USE MAY BE MADE OF THE DESIGN, CODING STRUCTURE, OR ANY PART    *\n*  THEREOF WITHOUT THE EXPRESS WRITTEN PERMISSION OF THE AUTHOR IN    *\n*  ADVANCE.  (1996, 1997, 1998, 1999, 2000)                           *\n*                                                                     *\n*  PERMISSION HAS BEEN GRANTED BY THE AUTHOR, THAT THIS PROGRAM BE    *\n*  DISTRIBUTED ON THE CBT TAPE BY WWW.CBTTAPE.ORG.                    *\n* ******************************************************************* *\n* ******************************************************************* *\n*                                                                     *\n*   YY   YY   222   KK   KK LL      EEEEEE     A    PPPPPP            *\n*   YY   YY  2   2  KK  KK  LL      EE        AAA   PP   PP           *\n*   YY   YY      2  KK KK   LL      EE       AA AA  PP   PP           *\n*    YY YY       2  KKKK    LL      EEEE    AA   AA PP   PP           *\n*     YYY     222   KKKK    LL      EE      AA   AA PPPPPP            *\n*     YY     2      KK KK   LL      EE      AAAAAAA PP                *\n*     YY     2      KK  KK  LL      EE      AA   AA PP                *\n*     YY     22222  KK   KK LLLLLLL EEEEEEE AA   AA PP                *\n*                                                                     *\n* ******************************************************************* *\n* ******************************************************************* *\n*    THIS SUBROUTINE DETERMINES GREGORIAN LEAP YEARS                  *\n*                                                                     *\n*    1.  VALID INPUT YEARS FOR THIS ROUTINE ARE THE YEARS 1601        *\n*        THROUGH 3399 A. D. (INCLUSIVE)                               *\n*                                                                     *\n*    2.  THREE FIELDS ARE PASSED AS PARAMETERS TO THE ROUTINE:        *\n*        1)  A 4 BYTE FIELD CONTAINING THE YEAR TO BE TESTED          *\n*            (IN ZONED-DECIMAL FORMAT),                               *\n*        2)  A 1 BYTE ZONED-DECIMAL RETURN CODE, AND                  *\n*        3)  A 1 BYTE LEAP YEAR INDICATOR (IN ZONED-DECIMAL FORMAT).  *\n*        THE ROUTINE WILL NOT ALTER THE YEAR PASSED TO IT.            *\n*                                                                     *\n*        SUGGESTED CALLING SYNTAX FOR ALC CALLERS:                    *\n*                                                                     *\n*                      CALL  Y2KLEAP,(YEAR)                           *\n*                         . . .                                       *\n*             YEAR     DS    ZL4'1997'                                *\n*             RC       DS    ZL1'0'                                   *\n*             LEAP     DS    ZL1'0'                                   *\n*                                                                     *\n*        SUGGESTED CALLING SYNTAX FOR COBOL CALLERS:                  *\n*                                                                     *\n*             01  LEAP-PARAMETERS.                                    *\n*                 02  YEAR PIC 9(4) VALUE 1997.                       *\n*                 02  RC   PIC 9(1) VALUE 0.                          *\n*                 02  LEAP PIC 9(1) VALUE 0.                          *\n*             CALL 'Y2KLEAP' USING LEAP-PARAMETERS.                   *\n*                                                                     *\n*    3.  THE POSSIBLE VALUES FOR THE RETURN CODE FIELD ARE:           *\n*                                                                     *\n*        0 INDICATES SUCCESSFUL EXECUTION OF THE ROUTINE.             *\n*                                                                     *\n*        2 INDICATES INVALID DATA WAS FOUND IN THE YEAR FIELD.        *\n*        INVALID DATA ARE DETERMINED IF THE FIELD'S LOW ORDER         *\n*        BYTE'S ZONE CONTAINS AN INVALID SIGN, (NOT ONE OF            *\n*        X'C', X'A', X'E', OR X'F'), OR IF THE PRECEDING BYTES'       *\n*        ZONES ARE OTHER THAN X'F', OR IF ANY BYTE'S LOW ORDER        *\n*        NIBBLE CONTAINS A VALUE GREATER THAN X'9'.                   *\n*                                                                     *\n*        4 INDICATES THE VALUE OF THE YEAR SPECIFIED WAS NOT IN       *\n*        THE RANGE SPECIFIED IN 1 (ABOVE).                            *\n*                                                                     *\n*    4.  UPON SUCCESSFUL EXECUTION, THE LEAP INDICATOR FIELD WILL     *\n*        CONTAIN A VALUE OF 1 IF THE YEAR IS A LEAP YEAR.  A VALUE    *\n*        OF 0 INDICATES NO LEAP YEAR.  IF THE RETURN CODE IS A        *\n*        NON-ZERO VALUE (UNSUCCESSFUL EXECUTION), THE LEAP YEAR       *\n*        INDICATOR WILL CONTAIN THE VALUE OF 9 TO PROTECT AGAINST     *\n*        UNINTENTIONAL USE OF AN INVALID RESULT.                      *\n* ------------------------------------------------------------------- *\n* CHANGE LOG:                                                         *\n* 0.1 04/17/2008 - CHANGED METHOD OF DETERMINING LEAP YEAR AT THE     *\n*                  SUGGESTION OF ANGEL LUIS DOMINGUEZ.  TESTS ARE     *\n*                  NOW DONE ON BINARY FORM OF YEAR, ELIMINATING THE   *\n*                  USE OF PACKED DECIMAL INSTRUCTIONS.  TESTS ON MY   *\n*                  EMULATED HARDWARE SHOW A SAVINGS OF 3.13 SECONDS   *\n*                  ON 500,000 ITERATIONS.                             *\n* ******************************************************************* *\n* ******************************************************************* *\n         EJECT\nY2KLEAP  CSECT\n         PRINT NOGEN\n         EYEC  'RETURN LEAP YEAR STATUS FOR PASSED YEAR'\n*\n         SAVE  (14,12)                 SAVE CALLER'S REGISTERS\n*\n         LR    R12,R15                 LOAD BASE WITH ENTRY ADDRESS\n         USING Y2KLEAP,R12             ESTABLISH ADDRESSABILITY\n*\n         L     R11,0(,R1)              LOAD A(PARAMETERS)\n         USING $PARMS,R11              ESTABLISH ADDRESSABILITY\n*\n         GETMAIN R,LV=$DYNLEN          GETMAIN DYNAMIC WORKAREA\n         LR    R10,R1                  SAVE A(MEMORY)\n*\n         ST    R13,4(,R10)             STORE A(CALLER'S SAVE AREA)\n         ST    R10,8(,R13)             BACK CHAIN A(MY SAVE AREA)\n         LR    R13,R10                 SET A(MY SAVE AREA)\n         USING $DYNMEM,R13             ESTABLISH ADDRESSABILITY\n*\n*    INSERT EYECATCHER MARKS AT BEGIN/END OF GETMAIN'D AREA.\n*\n         MVC   TOPFLAG,=C'Y2KLEAP GETMAIN BEGINS->'\n         MVC   BOTFLAG,=C'<-Y2KLEAP GETMAIN ENDS'\n*\n*    INITIALIZE RETURN CODE AND LEAP YEAR STATUS PARAMETER FIELDS.\n*\n         MVI   PRC,C'0'                ASSUME GOOD RETURN\n         MVI   PLEAP,C'9'              UNDETERMINED LEAP STATUS\n*\n*    TEST YEAR FOR INVALID CHARACTER\n*\n         LA    R2,PYEAR                ADDRESS PASSED YEAR\n         LA    R3,3                    LENGTH MINUS 1\nP1VLOOP  CLI   0(R2),X'F0'             TEST LESS THAN C'0'\n         BL    P1ERR1                  IF YES, YEAR CONTAINS BAD DATA\n         CLI   0(R2),X'F9'             TEST GREATER THAN C'9'\n         BH    P1ERR1                  IF YES, YEAR CONTAINS BAD DATA\n         LA    R2,1(0,R2)              ADDRESS NEXT BYTE\n         BCT   R3,P1VLOOP              CONTINUE TESTING\n         IC    R3,0(,R2)               LOAD RIGHT-MOST CHARACTER\n         LR    R4,R3                   COPY INTO R4\n         N     R3,=F'15'               ISOLATE DIGIT PORTION\n         CH    R3,=H'9'                TEST GREATER THAN 9\n         BH    P1ERR1                  IF YES, YEAR CONTAINS BAD DATA\n         SRL   R4,4                    ISOLATE ZONE PORTION\n         CH    R4,=H'12'               TEST FOR 'C' ZONE\n         BE    P1OK1                   IF YES, YEAR IS VALID NUMERIC\n         CH    R4,=H'13'               TEST FOR 'D' ZONE\n         BE    P1OK1                   IF YES, YEAR IS VALID NUMERIC\n         CH    R4,=H'15'               TEST FOR 'F' ZONE\n         BE    P1OK1                   IF YES, YEAR IS VALID NUMERIC\n*\n*    YEAR CONTAINED AN INVALID CHARACTER\n*\nP1ERR1   MVI   PRC,C'2'                INDICATE BAD DATA\n         B     RETURN                  AND RETURN TO CALLER\n*\n*    TEST YEAR FOR VALID RANGE\n*\nP1OK1    PACK  P3(3),PYEAR             PACK PASSED YEAR\n         CP    P3(3),=P'1601'          IS YEAR PRIOR TO 1601?\n         BL    P1ERR2                  IF YES, YEAR NOT VALID\n         CP    P3(3),=P'3399'          IS YEAR AFTER 3399?\n         BNH   P1OK                    IF NOT, YEAR IS VALID\n*\n*    YEAR CONTAINED AN INVALID VALUE (OUT OF RANGE)\n*\nP1ERR2   MVI   PRC,C'4'                INDICATE BAD VALUE\n         B     RETURN                  AND RETURN TO CALLER\n*\n*    DETERMINE LEAP YEAR STATUS\n*\nP1OK     MVI   PLEAP,C'0'              ASSUME NOT A LEAP YEAR\n         MVO   B3(3),P3(3)             DROP SIGN                    0.1\n         TM    B3+1,X'01'              ODD YEAR?                    0.1\n         BO    RETURN                  IF YES, IT IS *NOT* LEAP YEAR0.1\n         TM    B3+1,X'12'              EVENLY DIVISIBLE BY 4?       0.1\n         BM    RETURN                  IF NO, IT IS *NOT* LEAP YEAR 0.1\n         CLI   B3+1,X'00'              DOES YEAR END IN 00?         0.1\n         BNE   ISLEAP                  IF YES, IT IS A LEAP YEAR    0.1\n         TM    B3,X'01'                IS CENTURY ODD?              0.1\n         BO    RETURN                  IF YES, IT IS *NOT* LEAP YEAR0.1\n         TM    B3,X'12'                EVENLY DIVISIBLE BY 400?     0.1\n         BM    RETURN                  IF NO, IT IS *NOT* LEAP YEAR 0.1\n*                                      ELSE IT IS A LEAP YEAR       0.1\n*\n*    TEST FOR LEAP YEAR SUCCEEDED, RESET LEAP INDICATOR.\n*\nISLEAP   MVI   PLEAP,C'1'              INDICATE LEAP YEAR\n*\n*    RESTORE REGISTERS, FREE STORAGE, AND RETURN\n*\nRETURN   LR    R1,R13                  LOAD ADDRESS OF GETMAINED AREA\n         L     R13,4(,R13)             RELOAD PREVIOUS SAVE AREA\n         LA    R0,$DYNLEN              LOAD LENGTH OF GETMAINED AREA\n         FREEMAIN R,LV=(0),A=(1)       FREE GETMAINED AREA\n         RETURN (14,12),RC=0           RETURN TO CALLER WITH RC=0\n*\n         LTORG\n         EJECT\n* ******************************************************************* *\n* ***************************** EQUATES ***************************** *\n* ******************************************************************* *\n         YREGS\n* ******************************************************************* *\n         EJECT\n* ******************************************************************* *\n* ***************************** DSECTS ****************************** *\n* ******************************************************************* *\n$DYNMEM  DSECT                         DYNAMICALLY ALLOCATED MEMORY\nSAVEAREA DS    18F                     REGISTER SAVE AREA\nTOPFLAG  DS    CL24                    EYECATCHER\nP3       DS    PL3                     WORK AREA FOR PACKED YEAR\nB3       DS    XL3                     WORK AREA FOR BINARY YEAR    0.1\nBOTFLAG  DS    CL22                    EYECATCHER\n*\n$DYNLEN  EQU   (*-$DYNMEM)             LENGTH OF GETMAIN'D AREA\n*\n$PARMS   DSECT                         PARAMETERS FROM/TO CALLER\nPYEAR    DS    CL4                     YEAR TO BE TESTED\nPRC      DS    CL1                     RETURN CODE (0/2/4)\nPLEAP    DS    CL1                     LEAP YEAR STATUS (0/1/9)\n* ******************************************************************* *\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "Y2KPROJ": {"ttr": 1803, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x132O\\x01\\x132O\\x134\\x00\\xfd\\x00\\xfd\\x00\\x00\\xd1\\xc1\\xe8\\xd4\\xe8\\xf2\\xd2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2013-11-20T00:00:00", "modifydate": "2013-11-20T13:34:00", "lines": 253, "newlines": 253, "modlines": 0, "user": "JAYMY2K"}, "text": "         TITLE 'Y2KPROJ - INCREMENT/DECREMENT GREGORIAN DATE'\n*                                                                     *\n*   YY   YY   222   KK   KK PPPPPP  RRRRRR   OOOOO       JJ           *\n*   YY   YY  2   2  KK  KK  PP   PP RR   RR OO   OO      JJ           *\n*   YY   YY      2  KK KK   PP   PP RR   RR OO   OO      JJ           *\n*    YY YY       2  KKKK    PP   PP RR   RR OO   OO      JJ           *\n*     YYY     222   KKKK    PPPPPP  RRRRRR  OO   OO      JJ           *\n*     YY     2      KK KK   PP      RR RR   OO   OO JJ   JJ           *\n*     YY     2      KK  KK  PP      RR  RR  OO   OO JJ   JJ           *\n*     YY     22222  KK   KK PP      RR   RR  OOOOO   JJJJJ            *\n*                                                                     *\n* ******************************************************************* *\n* ******************************************************************* *\n*    THIS SUBROUTINE INCREMENTS OR DECREMENTS A GIVEN GREGORIAN       *\n*    DATE (MMDDYYYY) BY A SPECIFIED NUMBER OF DAYS                    *\n*                                                                     *\n*    1.  VALID INPUT YEARS FOR THIS ROUTINE ARE THE YEARS 1601        *\n*        THROUGH 3399 A. D. (INCLUSIVE)                               *\n*                                                                     *\n*    2.  VALID INPUT MONTH VALUES FOR THIS ROUTINE ARE 01 THROUGH 12. *\n*                                                                     *\n*    3.  VALID INPUT DAY VALUES FOR THIS ROUTINE ARE 01 THROUGH 31    *\n*        WITH EXCEPTIONS FOR THE MONTHS LISTED:                       *\n*             MONTH          MAXIMUM DAY VALUE                        *\n*              04                    30                               *\n*              06                    30                               *\n*              09                    30                               *\n*              11                    30                               *\n*              02                    28                               *\n*              02 DURING LEAP YEAR   29                               *\n*                                                                     *\n*    4.  THE DATE FORMAT MUST BE MMDDYYYY, WHERE MM = THE 2 DIGIT     *\n*        MONTH VALUE, DD = THE 2 DIGIT DAY VALUE, AND YYYY = THE      *\n*        4 DIGIT YEAR VALUE.                                          *\n*                                                                     *\n*    5.  FOUR FIELDS ARE PASSED AS PARAMETERS TO THE ROUTINE:         *\n*        1)  AN 8 BYTE FIELD CONTAINING THE DATE TO BE INCR/          *\n*            DECREMENTED (IN ZONED-DECIMAL FORMAT),                   *\n*        2)  A 6 BYTE FIELD CONTAINING THE INCREMENTAL VALUE (IN      *\n*            ZONED-DECIMAL FORMAT, NEGATIVE OR POSITIVE),             *\n*        3)  A 1 BYTE ZONED-DECIMAL RETURN CODE, AND                  *\n*        4)  AN 8 BYTE FIELD WHICH WILL RECEIVE THE RESULTING         *\n*            GREGORIAN DATE (IN ZONED-DECIMAL FORMAT).                *\n*        THE ROUTINE WILL NOT ALTER THE DATE AND INCREMENT FIELDS     *\n*        PASSED TO IT.                                                *\n*                                                                     *\n*        SUGGESTED CALLING SYNTAX FOR ALC CALLERS:                    *\n*                                                                     *\n*                      CALL  Y2KPROJ,(DATE)                           *\n*                         . . .                                       *\n*             DATE     DS    ZL8'01011997'                            *\n*             INCR     DS    ZL6'00003N'     NOTE: -35 DAYS           *\n*             RC       DS    ZL1'0'                                   *\n*             NUDATE   DS    ZL8'00000000'                            *\n*                                                                     *\n*        SUGGESTED CALLING SYNTAX FOR COBOL CALLERS:                  *\n*                                                                     *\n*             01  PROJ-PARAMETERS.                                    *\n*                 02  DATE   PIC 9(8) VALUE 01011997.                 *\n*                 02  INCR   PIC S9(6) VALUE -35.                     *\n*                 02  RC     PIC 9(1) VALUE 0.                        *\n*                 02  NUDATE PIC 9(8) VALUE ZERO.                     *\n*             CALL 'Y2KPROJ' USING PROJ-PARAMETERS.                   *\n*                                                                     *\n*    6.  THE POSSIBLE VALUES FOR THE RETURN CODE FIELD ARE:           *\n*                                                                     *\n*        0 INDICATES SUCCESSFUL EXECUTION OF THE ROUTINE.             *\n*                                                                     *\n*        2 INDICATES INVALID DATA WAS FOUND IN THE DATE FIELD.        *\n*        INVALID DATA ARE DETERMINED IF THE FIELD'S LOW ORDER         *\n*        BYTE'S ZONE CONTAINS AN INVALID SIGN, (NOT ONE OF            *\n*        X'C', X'D' OR X'F'), OR IF THE PRECEDING BYTES' ZONES        *\n*        ARE OTHER THAN X'F', OR IF ANY BYTE'S LOW ORDER NIBBLE       *\n*        CONTAINS A VALUE GREATER THAN X'9'.                          *\n*                                                                     *\n*        4 INDICATES THE VALUE OF THE YEAR SPECIFIED WAS NOT IN       *\n*        THE RANGE SPECIFIED IN 1 (ABOVE).                            *\n*                                                                     *\n*        6 INDICATES THE VALUE OF THE MONTH SPECIFIED WAS NOT IN      *\n*        THE RANGE SPECIFIED IN 2 (ABOVE).                            *\n*                                                                     *\n*        8 INDICATES THE VALUE OF THE DAY SPECIFIED WAS NOT IN        *\n*        THE RANGE SPECIFIED IN 3 (ABOVE).                            *\n*                                                                     *\n*        3 INDICATES INVALID DATA WAS FOUND IN THE INCREMENT FIELD.   *\n*        INVALID DATA ARE DETERMINED IF THE FIELD'S LOW ORDER         *\n*        BYTE'S ZONE CONTAINS AN INVALID SIGN, (NOT ONE OF            *\n*        X'C', X'D' OR X'F'), OR IF THE PRECEDING BYTES' ZONES        *\n*        ARE OTHER THAN X'F', OR IF ANY BYTE'S LOW ORDER NIBBLE       *\n*        CONTAINS A VALUE GREATER THAN X'9'.                          *\n*                                                                     *\n*        5 INDICATES THAN AN INVALID DATE WILL BE DEVELOPED WHEN      *\n*        THE INPUT DATE IS INCREMENTED BY THE SPECIFIED AMOUNT        *\n*        (OUTSIDE OF YEAR RANGE LISTED IN 1 ABOVE).                   *\n*                                                                     *\n*    7.  UPON SUCCESSFUL EXECUTION, THE RESULTING DATE IS PLACED      *\n*        IN THE 4TH PARAMETER.  IF THE RETURN CODE IS A NON-ZERO      *\n*        VALUE (UNSUCCESSFUL EXECUTION), THE 4TH PARAMETER WILL       *\n*        CONTAIN ZEROS.                                               *\n*                                                                     *\n* ******************************************************************* *\n* ******************************************************************* *\n         EJECT\nY2KPROJ  CSECT\n*        PRINT NOGEN\n         EYEC  'COMPUTE DATE USING OFFSET FROM GIVEN DATE'\n*\n         SAVE  (14,12)                 SAVE CALLER'S REGISTERS\n*\n         LR    R12,R15                 LOAD BASE WITH ENTRY ADDRESS\n         USING Y2KPROJ,R12             ESTABLISH ADDRESSABILITY\n*\n         L     R11,0(,R1)              LOAD A(PARAMETERS)\n         USING $PARMS,R11              ESTABLISH ADDRESSABILITY\n*\n         GETMAIN R,LV=$DYNLEN          GETMAIN DYNAMIC WORKAREA\n         LR    R10,R1                  SAVE A(MEMORY)\n*\n         ST    R13,4(,R10)             STORE A(CALLER'S SAVE AREA)\n         ST    R10,8(,R13)             BACK CHAIN A(MY SAVE AREA)\n         LR    R13,R10                 SET A(MY SAVE AREA)\n         USING $DYNMEM,R13             ESTABLISH ADDRESSABILITY\n*\n*    INSERT EYECATCHER MARKS AT BEGIN/END OF GETMAIN'D AREA.\n*\n         MVC   TOPFLAG,=C'Y2KPROJ GETMAIN BEGINS->'\n         MVC   BOTFLAG,=C'<-Y2KPROJ GETMAIN ENDS'\n*\n*    INITIALIZE RETURN CODE AND ANUM PARAMETER FIELDS.\n*\n         MVI   PRC,C'0'                ASSUME GOOD RETURN\n         MVC   PRC+1(8),PRC            NULL NEW DATE\n*\n*    RETRIEVE ASTRONOMICAL NUMBER FOR DATE PASSED\n*\n         MVC   DATEG,PDATE             LOAD DATE TO PASS\n         LA    R1,GTOAPARM             ADDRESS OF Y2KGTOA PARMS\n         ST    R1,PLIST                STORE IN DYNAMIC AREA\n         LA    R1,PLIST                ADDRESS TO PASS\n         L     R15,=V(Y2KGTOA)         ADDRESS OF ROUTINE\n         BALR  R14,R15                 CALL ROUTINE\n*\n*    SEE IF DATE WE RECEIVED FROM CALLER PASSED EDITS IN Y2KGTOA.\n*    THIS MEANS WE DON'T HAVE TO REPEAT THE EDIT CODE HERE <G>!\n*\n         MVC   PRC,RCG                 ADOPT RECEIVED RETURN CODE\n         CLI   RCG,C'0'                WAS EXECUTION SUCCESSFUL?\n         BNE   RETURN                  IF NOT, EXIT TO CALLER\n*\n*    TEST INCREMENT/DECREMENT VALUE FOR INVALID CHARACTER\n*\n         LA    R2,PINCR                ADDRESS PASSED INCREMENT\n         LA    R3,5                    LENGTH MINUS 1\nP2VLOOP  CLI   0(R2),X'F0'             TEST LESS THAN C'0'\n         BL    P2ERR1                  IF YES, INCR CONTAINS BAD DATA\n         CLI   0(R2),X'F9'             TEST GREATER THAN C'9'\n         BH    P2ERR1                  IF YES, INCR CONTAINS BAD DATA\n         LA    R2,1(0,R2)              ADDRESS NEXT BYTE\n         BCT   R3,P2VLOOP              CONTINUE TESTING\n         IC    R3,0(,R2)               LOAD RIGHT-MOST CHARACTER\n         LR    R4,R3                   COPY INTO R4\n         N     R3,=F'15'               ISOLATE DIGIT PORTION\n         CH    R3,=H'9'                TEST GREATER THAN 9\n         BH    P2ERR1                  IF YES, INCR CONTAINS BAD DATA\n         SRL   R4,4                    ISOLATE ZONE PORTION\n         CH    R4,=H'12'               TEST FOR 'C' ZONE\n         BE    P2OK                    IF YES, INCR IS VALID NUMERIC\n         CH    R4,=H'13'               TEST FOR 'D' ZONE\n         BE    P2OK                    IF YES, INCR IS VALID NUMERIC\n         CH    R4,=H'15'               TEST FOR 'F' ZONE\n         BE    P2OK                    IF YES, INCR IS VALID NUMERIC\n*\n*    INCREMENT CONTAINED AN INVALID CHARACTER\n*\nP2ERR1   MVI   PRC,C'3'                INDICATE BAD DATA\n         B     RETURN                  AND RETURN TO CALLER\n*\n*    ADD INCREMENT TO ASTRO NUMBER FOR ORIGIN DATE.\n*\nP2OK     PACK  WORK(4),PINCR(6)        PACK THE INCREMENT\n         PACK  WORK2(4),ANUMG(7)       AND THE ASTRO #\n         AP    WORK(4),WORK2(4)        ADD THEM\n*\n*    NOW MAKE SURE RESULTING DATE WILL BE IN ALLOWABLE RANGE.\n*\n         CP    WORK,=P'2305814'        WILL YEAR BE LESS THAN 1601?\n         BL    P2ERR2                  IF YES, RETURN ERROR\n         CP    WORK,=P'2962884'        OR GREATER THAN 3399?\n         BNH   GETDATE                 IF NOT, GET THE DATE\n*\n*    NEW DATE WOULD BE OUT OF RANGE, SO INDICATE ERROR.\n*\nP2ERR2   MVI   PRC,C'5'                INDICATE BAD VALUE\n         B     RETURN                  AND RETURN TO CALLER\n*\n*    USE Y2KATOG TO BUILD NEW DATE.\n*\nGETDATE  UNPK  ANUMA(7),WORK(4)        UNPACK NEW ASTRO #\n         OI    ANUMA+6,X'F0'           CLEAR SIGN\n         LA    R1,ATOGPARM             ADDRESS OF Y2KATOG PARMS\n         ST    R1,PLIST                STORE IN DYNAMIC AREA\n         LA    R1,PLIST                ADDRESS TO PASS\n         L     R15,=V(Y2KATOG)         ADDRESS OF ROUTINE\n         BALR  R14,R15                 CALL ROUTINE\n*\n*    PLACE DATE IN CALLER'S STORAGE.\n*\n         MVC   PNUDATE(8),DATEA        RETURNED DATE\n*\n*    RESTORE REGISTERS, FREE STORAGE, AND RETURN\n*\nRETURN   LR    R1,R13                  LOAD ADDRESS OF GETMAINED AREA\n         L     R13,4(,R13)             RELOAD PREVIOUS SAVE AREA\n         LA    R0,$DYNLEN              LOAD LENGTH OF GETMAINED AREA\n         FREEMAIN R,LV=(0),A=(1)       FREE GETMAINED AREA\n         RETURN (14,12),RC=0           RETURN TO CALLER WITH RC=0\n*\n         LTORG\n         EJECT\n* ******************************************************************* *\n* ***************************** EQUATES ***************************** *\n* ******************************************************************* *\n         YREGS\n* ******************************************************************* *\n         EJECT\n* ******************************************************************* *\n* ***************************** DSECTS ****************************** *\n* ******************************************************************* *\n$DYNMEM  DSECT                         DYNAMICALLY ALLOCATED MEMORY\nSAVEAREA DS    18F                     REGISTER SAVE AREA\nTOPFLAG  DS    CL24                    EYECATCHER\nPLIST    DS    A                       PARMLIST ADDR FOR SUB CALLS\nGTOAPARM DS    0H                      PARAMETERS FOR Y2KGTOA\nDATEG    DS    CL8                       INPUT DATE\nRCG      DS    CL1                       RETURN CODE\nANUMG    DS    ZL7                       ASTRO NUMBER\nATOGPARM DS    0H                      PARAMETERS FOR Y2KATOG\nANUMA    DS    ZL7                       ASTRO NUMBER\nRCA      DS    CL1                       RETURN CODE\nDATEA    DS    CL8                       OUTPUT DATE\nWORK     DS    PL4                     CALCULATION WORK FIELD\nWORK2    DS    PL4                     CALCULATION WORK FIELD\nBOTFLAG  DS    CL22                    EYECATCHER\n*\n$DYNLEN  EQU   (*-$DYNMEM)             LENGTH OF GETMAIN'D AREA\n*\n$PARMS   DSECT                         PARAMETERS FROM/TO CALLER\nPDATE    DS    CL8                     DATE TO BE PROCESSED\nPINCR    DS    ZL6                     AMOUNT OF INCREMENT\nPRC      DS    CL1                     RETURN CODE (0/2-6/8)\nPNUDATE  DS    CL8                     NEW DATE\n* ******************************************************************* *\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "Y2KSAGE": {"ttr": 2053, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x132O\\x01\\x132O\\x134\\x00\\xd5\\x00\\xd5\\x00\\x00\\xd1\\xc1\\xe8\\xd4\\xe8\\xf2\\xd2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2013-11-20T00:00:00", "modifydate": "2013-11-20T13:34:00", "lines": 213, "newlines": 213, "modlines": 0, "user": "JAYMY2K"}, "text": "         TITLE 'Y2KSAGE - COMPUTE ELAPSED DAYS BETWEEN DATES'\n*                                                                     *\n*   YY   YY   222   KK   KK  SSSSS     A     GGGGG  EEEEEE            *\n*   YY   YY  2   2  KK  KK  SS   SS   AAA   GG   GG EE                *\n*   YY   YY      2  KK KK   SS       AA AA  GG   GG EE                *\n*    YY YY       2  KKKK     SSSSS  AA   AA GG      EEEE              *\n*     YYY     222   KKKK         SS AA   AA GG  GGG EE                *\n*     YY     2      KK KK   SS   SS AAAAAAA GG   GG EE                *\n*     YY     2      KK  KK  SS   SS AA   AA GG   GG EE                *\n*     YY     22222  KK   KK  SSSSS  AA   AA  GGGGG  EEEEEEE           *\n*                                                                     *\n* ******************************************************************* *\n* ******************************************************************* *\n*    THIS SUBROUTINE COMPUTES THE NUMBER OF DAYS ELAPSED BETWEEN 2    *\n*    GIVEN GREGORIAN DATES (MMDDYYYY) FOR SHORT TERM AGING            *\n*                                                                     *\n*    1.  VALID INPUT YEARS FOR THIS ROUTINE ARE THE YEARS 1601        *\n*        THROUGH 3399 A. D. (INCLUSIVE)                               *\n*                                                                     *\n*    2.  VALID INPUT MONTH VALUES FOR THIS ROUTINE ARE 01 THROUGH 12. *\n*                                                                     *\n*    3.  VALID INPUT DAY VALUES FOR THIS ROUTINE ARE 01 THROUGH 31    *\n*        WITH EXCEPTIONS FOR THE MONTHS LISTED:                       *\n*             MONTH          MAXIMUM DAY VALUE                        *\n*              04                    30                               *\n*              06                    30                               *\n*              09                    30                               *\n*              11                    30                               *\n*              02                    28                               *\n*              02 DURING LEAP YEAR   29                               *\n*                                                                     *\n*    4.  THE DATE FORMAT MUST BE MMDDYYYY, WHERE MM = THE 2 DIGIT     *\n*        MONTH VALUE, DD = THE 2 DIGIT DAY VALUE, AND YYYY = THE      *\n*        4 DIGIT YEAR VALUE.                                          *\n*                                                                     *\n*    5.  FOUR FIELDS ARE PASSED AS PARAMETERS TO THE ROUTINE:         *\n*        1) & 2)  8 BYTE FIELDS CONTAINING THE GREGORIAN DATES (IN    *\n*            (ZONED-DECIMAL FORMAT) BETWEEN WHICH THE NUMBER OF DAYS  *\n*            IS TO BE CALCULATED (ORDER OF THE DATES IS IMMATERIAL),  *\n*        3)  A 1 BYTE ZONED-DECIMAL RETURN CODE, AND                  *\n*        4)  A 7 BYTE FIELD WHICH WILL RECEIVE THE NUMBER OF ELAPSED  *\n*            DAYS (IN ZONED-DECIMAL FORMAT).                          *\n*        THE ROUTINE WILL NOT ALTER THE DATES PASSED TO IT.           *\n*                                                                     *\n*        SUGGESTED CALLING SYNTAX FOR ALC CALLERS:                    *\n*                                                                     *\n*                      CALL  Y2KSAVE,(DATE1)                          *\n*                         . . .                                       *\n*             DATE1    DS    ZL8'01011997'                            *\n*             DATE2    DS    ZL8'04011997'                            *\n*             RC       DS    ZL1'0'                                   *\n*             DAYS     DS    ZL7'0000000'                             *\n*                                                                     *\n*        SUGGESTED CALLING SYNTAX FOR COBOL CALLERS:                  *\n*                                                                     *\n*             01  SAGE-PARAMETERS.                                    *\n*                 02  DATE1 PIC 9(8) VALUE 01011997.                  *\n*                 02  DATE2 PIC 9(8) VALUE 04011997.                  *\n*                 02  RC    PIC 9(1) VALUE 0.                         *\n*                 02  DAYS  PIC S9(7) VALUE +0.                       *\n*             CALL 'Y2KSAGE' USING SAGE-PARAMETERS.                   *\n*                                                                     *\n*    6.  THE POSSIBLE VALUES FOR THE RETURN CODE FIELD ARE:           *\n*                                                                     *\n*        0 INDICATES SUCCESSFUL EXECUTION OF THE ROUTINE.             *\n*                                                                     *\n*        2 INDICATES INVALID DATA WAS FOUND IN THE DATE1 FIELD        *\n*        (3 FOR DATE2).  INVALID DATA ARE DETERMINED IF THE FIELD'S   *\n*        LOW ORDER BYTE'S ZONE CONTAINS AN INVALID SIGN, (NOT ONE     *\n*        OF X'C', X'D', OR X'F'), OR IF THE PRECEEDING BYTES' ZONES   *\n*        ARE OTHER THAN X'F', OR IF ANY BYTE'S LOW ORDER NIBBLE       *\n*        CONTAINS A VALUE GREATER THAN X'9'.                          *\n*                                                                     *\n*        4 INDICATES THE VALUE OF THE YEAR SPECIFIED IN THE DATE1     *\n*        FIELD (5 FOR DATE2) WAS NOT IN THE RANGE SPECIFIED IN 1      *\n*        (ABOVE).                                                     *\n*                                                                     *\n*        6 INDICATES THE VALUE OF THE MONTH SPECIFIED IN THE DATE1    *\n*        FIELD (7 FOR DATE2) WAS NOT IN THE RANGE SPECIFIED IN 2      *\n*        (ABOVE).                                                     *\n*                                                                     *\n*        8 INDICATES THE VALUE OF THE DAY SPECIFIED IN THE DATE1      *\n*        FIELD (9 FOR DATE2) WAS NOT IN THE RANGE SPECIFIED IN 3      *\n*        (ABOVE).                                                     *\n*                                                                     *\n*    7.  UPON SUCCESSFUL EXECUTION, THE ABSOLUTE VALUE OF THE NUMBER  *\n*        OF DAYS BETWEEN THE 2 SPECIFIED DATES WILL BE PLACED IN THE  *\n*        4TH PARAMETER (IN PACKED DECIMAL FORMAT).  IF THE RETURN     *\n*        CODE IS A NON-ZERO VALUE (UNSUCCESSFUL EXECUTION), THE 4TH   *\n*        PARAMETER WILL CONTAIN ZEROS.                                *\n*                                                                     *\n* ******************************************************************* *\n* ******************************************************************* *\n         EJECT\nY2KSAGE  CSECT\n*         PRINT NOGEN\n         EYEC  'SHORT TERM AGE BETWEEN 2 DATES'\n*\n         SAVE  (14,12)                 SAVE CALLER'S REGISTERS\n*\n         LR    R12,R15                 LOAD BASE WITH ENTRY ADDRESS\n         USING Y2KSAGE,R12             ESTABLISH ADDRESSABILITY\n*\n         L     R11,0(,R1)              LOAD A(PARAMETERS)\n         USING $PARMS,R11              ESTABLISH ADDRESSABILITY\n*\n         GETMAIN R,LV=$DYNLEN          GETMAIN DYNAMIC WORKAREA\n         LR    R10,R1                  SAVE A(MEMORY)\n*\n         ST    R13,4(,R10)             STORE A(CALLER'S SAVE AREA)\n         ST    R10,8(,R13)             BACK CHAIN A(MY SAVE AREA)\n         LR    R13,R10                 SET A(MY SAVE AREA)\n         USING $DYNMEM,R13             ESTABLISH ADDRESSABILITY\n*\n*    INSERT EYECATCHER MARKS AT BEGIN/END OF GETMAIN'D AREA.\n*\n         MVC   TOPFLAG,=C'Y2KSAGE GETMAIN BEGINS->'\n         MVC   BOTFLAG,=C'<-Y2KSAGE GETMAIN ENDS'\n*\n*    INITIALIZE RETURN CODE AND DAYS PARAMETER FIELDS.\n*\n         MVI   PRC,C'0'                ASSUME GOOD RETURN\n         MVC   PRC+1(7),PRC            NULL DAYS\n*\n*    RETRIEVE ASTRONOMICAL NUMBER FOR 1ST DATE PASSED\n*\n         MVC   GDATE,PDATE1            LOAD DATE TO PASS\n         LA    R1,GTOAPARM             ADDRESS OF Y2KGTOA PARMS\n         ST    R1,PLIST                STORE IN DYNAMIC AREA\n         LA    R1,PLIST                ADDRESS TO PASS\n         L     R15,=V(Y2KGTOA)         ADDRESS OF ROUTINE\n         BALR  R14,R15                 CALL ROUTINE\n*\n*    SEE IF DATE WE RECEIVED FROM CALLER PASSED EDITS IN Y2KGTOA.\n*    THIS MEANS WE DON'T HAVE TO REPEAT THE EDIT CODE HERE <G>!\n*\n         MVC   PRC,RCG                 ADOPT RECEIVED RETURN CODE\n         CLI   RCG,C'0'                WAS EXECUTION SUCCESSFUL?\n         BNE   RETURN                  IF NOT, EXIT TO CALLER\n*\n*    SAVE THE ASTRONOMICAL NUMBER FOR DAY PASSED\n*\n         PACK  WORK(4),ANUMG(7)        SAVE ASTRO NUMBER\n*\n*    RETRIEVE ASTRONOMICAL NUMBER FOR 2ND DATE PASSED\n*\n         MVC   GDATE,PDATE2            LOAD DATE TO PASS\n         LA    R1,PLIST                ADDRESS TO PASS\n         L     R15,=V(Y2KGTOA)         ADDRESS OF ROUTINE\n         BALR  R14,R15                 CALL ROUTINE\n*\n*    AGAIN, TEST THE RETURN CODE SO THE CALLER'S DATA IS CHECKED\n*    BY Y2KGTOA INSTEAD OF US ... BUT WE HAVE TO ADJUST THE CODE\n*    THIS TIME TO REFLECT THE SECOND DATE FIELD.\n*\n         CLI   RCG,C'0'                WAS EXECUTION SUCCESSFUL?\n         BE    COMPUTE                 IF YES, GO FIGURE DAYS\n*\n*    WE HAVE TO BUMP THE RETURN CODE BY 1 TO INDICATE THE 2ND DATE.\n*\n         PACK  WORK(1),RCG(1)          PACK THE RETURN CODE\n         AP    WORK(1),=P'1'           INCREMENT BY 1\n         UNPK  PRC(1),WORK(1)          UNPACK TO DESTINATION\n         OI    PRC,X'F0'               REMOVE THE ZONE\n         B     RETURN                  AND EXIT TO CALLER\n*\n*    SUBTRACT 2ND ASTRO NUMBER FROM THE 1ST ONE.\n*\nCOMPUTE  PACK  WORK2(4),ANUMG(7)       PACK THE 2ND ASTRO #\n         SP    WORK,WORK2              YIELDS DIFFERENCE IN DAYS\n         UNPK  PDAYS(7),WORK           UNPACK RESULT\n         OI    PDAYS+6,X'F0'           CLEAR SIGN\n*\n*    RESTORE REGISTERS, FREE STORAGE, AND RETURN\n*\nRETURN   LR    R1,R13                  LOAD ADDRESS OF GETMAINED AREA\n         L     R13,4(,R13)             RELOAD PREVIOUS SAVE AREA\n         LA    R0,$DYNLEN              LOAD LENGTH OF GETMAINED AREA\n         FREEMAIN R,LV=(0),A=(1)       FREE GETMAINED AREA\n         RETURN (14,12),RC=0           RETURN TO CALLER WITH RC=0\n*\n         LTORG\n         EJECT\n* ******************************************************************* *\n* ***************************** EQUATES ***************************** *\n* ******************************************************************* *\n         YREGS\n* ******************************************************************* *\n         EJECT\n* ******************************************************************* *\n* ***************************** DSECTS ****************************** *\n* ******************************************************************* *\n$DYNMEM  DSECT                         DYNAMICALLY ALLOCATED MEMORY\nSAVEAREA DS    18F                     REGISTER SAVE AREA\nTOPFLAG  DS    CL24                    EYECATCHER\nPLIST    DS    A                       PARMLIST ADDR FOR SUB CALLS\nGTOAPARM DS    0H                      PARAMETERS FOR Y2KGTOA\nGDATE    DS    CL8                       INPUT DATE\nRCG      DS    CL1                       RETURN CODE\nANUMG    DS    ZL7                       ASTRO NUMBER\nWORK     DS    PL4                     WORK FIELD FOR COMPUTATION\nWORK2    DS    PL4                     WORK FIELD FOR COMPUTATION\nBOTFLAG  DS    CL22                    EYECATCHER\n*\n$DYNLEN  EQU   (*-$DYNMEM)             LENGTH OF GETMAIN'D AREA\n*\n$PARMS   DSECT                         PARAMETERS FROM/TO CALLER\nPDATE1   DS    CL8                     DATE TO BE PROCESSED\nPDATE2   DS    CL8                     DATE TO BE PROCESSED\nPRC      DS    CL1                     RETURN CODE (0, 2-9)\nPDAYS    DS    ZL7                     DAYS DIFFERENCE\n* ******************************************************************* *\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "Y2KTDOW": {"ttr": 2058, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x132O\\x01\\x132O\\x134\\x01\\x10\\x01\\x10\\x00\\x00\\xd1\\xc1\\xe8\\xd4\\xe8\\xf2\\xd2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2013-11-20T00:00:00", "modifydate": "2013-11-20T13:34:00", "lines": 272, "newlines": 272, "modlines": 0, "user": "JAYMY2K"}, "text": "         TITLE 'Y2KTDOW - DETERMINES DATE FOR GIVEN DAY REFERENCE'\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*   YY   YY   222   KK   KK TTTTTTTT DDDDDD   OOOOO  WW   WW          *\n*   YY   YY  2   2  KK  KK     TT    DD   DD OO   OO WW   WW          *\n*   YY   YY      2  KK KK      TT    DD   DD OO   OO WW   WW          *\n*    YY YY       2  KKKK       TT    DD   DD OO   OO WW   WW          *\n*     YYY     222   KKKK       TT    DD   DD OO   OO WW W WW          *\n*     YY     2      KK KK      TT    DD   DD OO   OO WWWWWWW          *\n*     YY     2      KK  KK     TT    DD   DD OO   OO WWW WWW          *\n*     YY     22222  KK   KK    TT    DDDDDD   OOOOO   W   W           *\n*                                                                     *\n* ******************************************************************* *\n* ******************************************************************* *\n*    THIS SUBROUTINE DETERMINES THE DATE FOR A GIVEN DAY OF WEEK      *\n*    USING A GIVEN GREGORIAN DATE (MMDDYYYY) AS A REFERENCE DATE      *\n*                                                                     *\n*    1.  VALID INPUT YEARS FOR THIS ROUTINE ARE THE YEARS 1601        *\n*        THROUGH 3399 A. D. (INCLUSIVE)                               *\n*                                                                     *\n*    2.  VALID INPUT MONTH VALUES FOR THIS ROUTINE ARE 01 THROUGH 12. *\n*                                                                     *\n*    3.  VALID INPUT DAY VALUES FOR THIS ROUTINE ARE 01 THROUGH 31    *\n*        WITH EXCEPTIONS FOR THE MONTHS LISTED:                       *\n*             MONTH          MAXIMUM DAY VALUE                        *\n*              04                    30                               *\n*              06                    30                               *\n*              09                    30                               *\n*              11                    30                               *\n*              02                    28                               *\n*              02 DURING LEAP YEAR   29                               *\n*                                                                     *\n*    4.  THE DATE FORMAT MUST BE MMDDYYYY, WHERE MM = THE 2 DIGIT     *\n*        MONTH VALUE, DD = THE 2 DIGIT DAY VALUE, AND YYYY = THE      *\n*        4 DIGIT YEAR VALUE.                                          *\n*                                                                     *\n*    5.  FIVE FIELDS ARE PASSED AS PARAMETERS TO THE ROUTINE:         *\n*        1)  AN 8 BYTE FIELD CONTAINING THE REFERENCE DATE (IN        *\n*            ZONED-DECIMAL FORMAT),                                   *\n*        2)  A 1 BYTE FIELD CONTAINING 'P' TO SPECIFY THE PREVIOUS    *\n*            DATE OR 'N' TO SPECIFY THE NEXT DATE TO BE RETURNED,     *\n*        3)  A 1 BYTE FIELD CONTAINING THE NUMERIC DESIGNATION OF     *\n*            THE DAY OF WEEK TO BE RETURNED (0=MONDAY, 1=TUESDAY, ... *\n*            6=SUNDAY),                                               *\n*        4)  A 1 BYTE ZONED-DECIMAL RETURN CODE, AND                  *\n*        5)  AN 8 BYTE FIELD IN WHICH THE DERIVED DATE (IN            *\n*            ZONED-DECIMAL FORMAT) WILL BE PLACED.                    *\n*        THE ROUTINE WILL NOT ALTER THE FIELDS PASSED TO IT.          *\n*                                                                     *\n*        SUGGESTED CALLING SYNTAX FOR ALC CALLERS:                    *\n*                                                                     *\n*                      CALL  Y2KTDOW,(DATE)                           *\n*                         . . .                                       *\n*             DATE     DS    ZL8'04151997'                            *\n*             NORP     DS    CL1'N'                                   *\n*             DAYN     DS    ZL1'3'                                   *\n*             RC       DS    ZL1'0'                                   *\n*             NEWDATE  DS    ZL8'0'                                   *\n*                                                                     *\n*        SUGGESTED CALLING SYNTAX FOR COBOL CALLERS:                  *\n*                                                                     *\n*             01  TDOW-PARAMETERS.                                    *\n*                 02  DATE    PIC 9(8) VALUE 04151997.                *\n*                 02  NORP    PIC X(1) VALUE 'N'.                     *\n*                 02  DAYN    PIC 9(1) VALUE 3.                       *\n*                 02  RC      PIC 9(1) VALUE 0.                       *\n*                 02  NEWDATE PIC 9(8) VALUE 0.                       *\n*             CALL 'Y2KTDOW' USING TDOW-PARAMETERS.                   *\n*                                                                     *\n*    6.  THE POSSIBLE VALUES FOR THE RETURN CODE FIELD ARE:           *\n*                                                                     *\n*        0 INDICATES SUCCESSFUL EXECUTION OF THE ROUTINE.             *\n*                                                                     *\n*        2 INDICATES INVALID DATA WAS FOUND IN THE DATE FIELD.        *\n*        INVALID DATA ARE DETERMINED IF THE FIELD'S LOW ORDER         *\n*        BYTE'S ZONE CONTAINS AN INVALID SIGN, (NOT ONE OF            *\n*        X'C', X'A', X'E', OR X'F'), OR IF THE PRECEDING BYTES'       *\n*        ZONES ARE OTHER THAN X'F', OR IF ANY BYTE'S LOW ORDER        *\n*        NIBBLE CONTAINS A VALUE GREATER THAN X'9'.                   *\n*                                                                     *\n*        4 INDICATES THE VALUE OF THE YEAR SPECIFIED WAS NOT IN       *\n*        THE RANGE SPECIFIED IN 1 (ABOVE).                            *\n*                                                                     *\n*        6 INDICATES THE VALUE OF THE MONTH SPECIFIED WAS NOT IN      *\n*        THE RANGE SPECIFIED IN 2 (ABOVE).                            *\n*                                                                     *\n*        8 INDICATES THE VALUE OF THE DAY SPECIFIED WAS NOT IN        *\n*        THE RANGE SPECIFIED IN 3 (ABOVE).                            *\n*                                                                     *\n*        3 INDICATES THE VALUE OF THE PREVIOUS/NEXT INDICATOR WAS     *\n*        NOT VALID ('N' OR 'P').                                      *\n*                                                                     *\n*        5 INDICATES THAN AN INVALID DATE WILL BE DEVELOPED WHEN      *\n*        THE TARGET DATE IS CREATED (OUTSIDE OF YEAR RANGE LISTED     *\n*        IN 1 ABOVE).                                                 *\n*                                                                     *\n*        7 INDICATES THE VALUE OF THE DAY OF THE WEEK WAS NOT IN      *\n*        THE ALLOWABLE RANGE (0-6).                                   *\n*                                                                     *\n*    4.  UPON SUCCESSFUL EXECUTION, THE DERIVED DATE WILL BE          *\n*        PLACED IN THE 5TH PARAMETER FIELD.  IF THE RETURN CODE IS    *\n*        A NON-ZERO VALUE (UNSUCCESSFUL EXECUTION), THE 5TH           *\n*        PARAMETER FIELD WILL CONTAIN ZEROS.                          *\n*                                                                     *\n* ******************************************************************* *\n* ******************************************************************* *\n         EJECT\nY2KTDOW  CSECT\n*         PRINT NOGEN\n         EYEC  'COMPUTE NEW DATE USING DOW+OFFSET'\n*\n         SAVE  (14,12)                 SAVE CALLER'S REGISTERS\n*\n         LR    R12,R15                 LOAD BASE WITH ENTRY ADDRESS\n         USING Y2KTDOW,R12             ESTABLISH ADDRESSABILITY\n*\n         L     R11,0(,R1)              LOAD A(PARAMETERS)\n         USING $PARMS,R11              ESTABLISH ADDRESSABILITY\n*\n         GETMAIN R,LV=$DYNLEN          GETMAIN DYNAMIC WORKAREA\n         LR    R10,R1                  SAVE A(MEMORY)\n*\n         ST    R13,4(,R10)             STORE A(CALLER'S SAVE AREA)\n         ST    R10,8(,R13)             BACK CHAIN A(MY SAVE AREA)\n         LR    R13,R10                 SET A(MY SAVE AREA)\n         USING $DYNMEM,R13             ESTABLISH ADDRESSABILITY\n*\n*    INSERT EYECATCHER MARKS AT BEGIN/END OF GETMAIN'D AREA.\n*\n         MVC   TOPFLAG,=C'Y2KTDOW GETMAIN BEGINS->'\n         MVC   BOTFLAG,=C'<-Y2KTDOW GETMAIN ENDS'\n*\n*    INITIALIZE RETURN CODE AND DAY OF WEEK NUMBER.\n*\n         MVI   PRC,C'0'                ASSUME GOOD RETURN\n         MVC   PRC+1(8),PRC            INITIALIZE RETURN DATE TO ZEROS\n*\n*    RETRIEVE DAY OF WEEK FOR DATE PASSED.\n*\n         MVC   DATED,PDATE             LOAD DATE TO PASS\n         LA    R1,DOWNPARM             ADDRESS OF Y2KDOWN PARMS\n         ST    R1,PLIST                STORE IN DYNAMIC AREA\n         LA    R1,PLIST                ADDRESS TO PASS\n         L     R15,=V(Y2KDOWN)         ADDRESS OF ROUTINE\n         BALR  R14,R15                 CALL ROUTINE\n*\n*    SEE IF DATE WE RECEIVED FROM CALLER PASSED EDITS IN Y2KDOWN.\n*    THIS MEANS WE DON'T HAVE TO REPEAT THE EDIT CODE HERE <G>!\n*\n         MVC   PRC,RCD                 ADOPT RECEIVED RETURN CODE\n         CLI   RCD,C'0'                WAS EXECUTION SUCCESSFUL?\n         BNE   RETURN                  IF NOT, EXIT TO CALLER\n*\n*    TEST DIRECTION CODE FOR INVALID VALUE\n*\n         CLI   PDIR,C'P'               WAS 'PREVIOUS' SPECIFIED?\n         BE    P2OK                    YES, OK\n         CLI   PDIR,C'N'               WAS 'NEXT' SPECIFIED?\n         BE    P2OK                    YES, OK\n         MVI   PRC,C'3'                INDICATE ERROR\n         B     RETURN                  AND RETURN TO CALLER\n*\n*    TEST TARGET DAY OF WEEK NUMBER FOR INVALID VALUE\n*\nP2OK     XR    R1,R1                   CLEAR WORK REGISTER\n         IC    R1,PDOW                 GET FORMAT CODE\n         LA    R2,X'F0'                LOWEST VALID CODE\n         LA    R3,7                    TEST THROUGH X'F6'\nDOWLOOP  CR    R1,R2                   IS FORMAT VALID?\n         BE    P3OK                    YES, CONTINUE\n         LA    R2,1(,R2)               INCREMENT VALID CODE\n         BCT   R3,DOWLOOP              CONTINUE TESTING NEXT CODE\n         MVI   PRC,C'7'                INDICATE INVALID CODE\n         B     RETURN                  AND RETURN TO CALLER\n*\n*    INITIALIZE Y2KPROJ PARAMETER FIELDS.\n*\nP3OK     MVC   DATEP,PDATE             LOAD REFERENCE DATE\n         MVC   OFFSETP,=C'000000'      INITIALIZE OFFSET\n         LA    R1,PROJPARM             ADDRESS OF Y2KPROJ PARMS\n         ST    R1,PLIST                STORE IN DYNAMIC AREA\n*\n*    SELECT CALCULATION BASED ON DIRECTION OF INCREMENT\n*\n         ZAP   WORK,=P'7'              INITIALIZE WORK FIELD\n         CLI   PDIR,C'N'               GOING TO NEXT?\n         BE    NEXTDAY                 YES\nPREVDAY  PACK  P1(1),DOW(1)            PACK CURRENT DAY NUMBER\n         AP    WORK,P1                 ADD TO WORK FIELD\n         PACK  P1(1),PDOW(1)           PACK TARGET DAY NUMBER\n         SP    WORK,P1                 SUBTRACT FROM WORK FIELD\n         CP    WORK,=P'7'              IS RESULT GREATER THAN 7?\n         BNH   PREVFINI                NO, GO FINISH\n         SP    WORK,=P'7'              ADJUST FOR OVERSHOOT\nPREVFINI UNPK  OFFSETP+5(1),WORK+1(1)  UNPACK COMPUTED OFFSET\n         MVZ   OFFSETP+5(1),=X'D0'     NEGATIVE SIGN\n         B     FINI                    BRANCH TO COMMON FINISH\n*\nNEXTDAY  PACK  P1(1),DOW(1)            PACK CURRENT DAY NUMBER\n         SP    WORK,P1                 SUBTRACT FROM WORK FIELD\n         PACK  P1(1),PDOW(1)           PACK TARGET DAY NUMBER\n         AP    WORK,P1                 ADD TO WORK FIELD\n         CP    WORK,=P'7'              IS RESULT GREATER THAN 7?\n         BNH   NEXTFINI                NO, GO FINISH\n         SP    WORK,=P'7'              ADJUST FOR OVERSHOOT\nNEXTFINI UNPK  OFFSETP+5(1),WORK+1(1)  UNPACK COMPUTED OFFSET\n         MVZ   OFFSETP+5(1),=X'C0'     POSITIVE SIGN\n*\n*    CALL TO Y2KPROJ TO GET TARGET DATE\n*\nFINI     LA    R1,PLIST                ADDRESS TO PASS\n         L     R15,=V(Y2KPROJ)         ADDRESS OF ROUTINE\n         BALR  R14,R15                 CALL ROUTINE\n*\n*    IF RETURN CODE FROM Y2KPROJ IS '5', THE DATE THAT WOULD BE\n*    DEVELOPED WOULD BE OUTSIDE OF RANGE OF VALID YEARS.\n*\n         MVC   PRC,RCP                 ADOPT RECEIVED RETURN CODE\n         CLI   RCP,C'0'                WAS EXECUTION SUCCESSFUL?\n         BNE   RETURN                  IF NOT, EXIT TO CALLER\n*\n*    MOVE RETURNED DATE TO CALLER'S AREA\n*\n         MVC   PNEWDATE(8),NUDATEP\n*\n*    RESTORE REGISTERS, FREE STORAGE, AND RETURN\n*\nRETURN   LR    R1,R13                  LOAD ADDRESS OF GETMAINED AREA\n         L     R13,4(,R13)             RELOAD PREVIOUS SAVE AREA\n         LA    R0,$DYNLEN              LOAD LENGTH OF GETMAINED AREA\n         FREEMAIN R,LV=(0),A=(1)       FREE GETMAINED AREA\n         RETURN (14,12),RC=0           RETURN TO CALLER WITH RC=0\n*\n         LTORG\n         EJECT\n* ******************************************************************* *\n* ***************************** EQUATES ***************************** *\n* ******************************************************************* *\n         YREGS\n* ******************************************************************* *\n         EJECT\n* ******************************************************************* *\n* ***************************** DSECTS ****************************** *\n* ******************************************************************* *\n$DYNMEM  DSECT                         DYNAMICALLY ALLOCATED MEMORY\nSAVEAREA DS    18F                     REGISTER SAVE AREA\nTOPFLAG  DS    CL24                    EYECATCHER\nPLIST    DS    A                       PARMLIST ADDR FOR SUB CALLS\nDOWNPARM DS    0H                      PARAMETERS FOR Y2KDOWN\nDATED    DS    CL8                       DATE INPUT\nRCD      DS    CL1                       RETURN CODE\nDOW      DS    ZL1                       DAY OF WEEK\nPROJPARM DS    0H                      PARAMETERS FOR Y2KPROJ\nDATEP    DS    CL8                       DATE INPUT\nOFFSETP  DS    ZL6                       OFFSET IN DAYS\nRCP      DS    CL1                       RETURN CODE\nNUDATEP  DS    CL8                       NEW DATE\nWORK     DS    PL2                     WORK FIELD FOR CALCULATION\nP1       DS    PL1                     WORK FIELD FOR CALCULATION\nBOTFLAG  DS    CL22                    EYECATCHER\n*\n$DYNLEN  EQU   (*-$DYNMEM)             LENGTH OF GETMAIN'D AREA\n*\n$PARMS   DSECT                         PARAMETERS FROM/TO CALLER\nPDATE    DS    CL8                     REFERENCE DATE\nPDIR     DS    CL1                     DIRECTION AWAY FROM\nPDOW     DS    CL1                     TARGET DAY OF WEEK\nPRC      DS    CL1                     RETURN CODE (0/2-6/8)\nPNEWDATE DS    CL8                     NEW DATE\n* ******************************************************************* *\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT902/FILE902.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT902", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}