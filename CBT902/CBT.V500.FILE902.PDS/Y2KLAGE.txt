         TITLE 'Y2KLAGE - COMPUTE ELAPSED YEARS, MONTHS, DAYS'
*                                                                     *
*   YY   YY   222   KK   KK LL         A     GGGGG  EEEEEE            *
*   YY   YY  2   2  KK  KK  LL        AAA   GG   GG EE                *
*   YY   YY      2  KK KK   LL       AA AA  GG   GG EE                *
*    YY YY       2  KKKK    LL      AA   AA GG      EEEE              *
*     YYY     222   KKKK    LL      AA   AA GG  GGG EE                *
*     YY     2      KK KK   LL      AAAAAAA GG   GG EE                *
*     YY     2      KK  KK  LL      AA   AA GG   GG EE                *
*     YY     22222  KK   KK LLLLLLL AA   AA  GGGGG  EEEEEEE           *
*                                                                     *
* ******************************************************************* *
* ******************************************************************* *
*    THIS SUBROUTINE COMPUTES THE NUMBER OF YEARS, MONTHS, AND        *
*    DAYS ELAPSED BETWEEN 2 GIVEN GREGORIAN DATES (MMDDYYYY) FOR      *
*    LONG TERM AGING                                                  *
*                                                                     *
*    1.  VALID INPUT YEARS FOR THIS ROUTINE ARE THE YEARS 1601        *
*        THROUGH 3399 A. D. (INCLUSIVE)                               *
*                                                                     *
*    2.  VALID INPUT MONTH VALUES FOR THIS ROUTINE ARE 01 THROUGH 12. *
*                                                                     *
*    3.  VALID INPUT DAY VALUES FOR THIS ROUTINE ARE 01 THROUGH 31    *
*        WITH EXCEPTIONS FOR THE MONTHS LISTED:                       *
*             MONTH          MAXIMUM DAY VALUE                        *
*              04                    30                               *
*              06                    30                               *
*              09                    30                               *
*              11                    30                               *
*              02                    28                               *
*              02 DURING LEAP YEAR   29                               *
*                                                                     *
*    4.  THE DATE FORMAT MUST BE MMDDYYYY, WHERE MM = THE 2 DIGIT     *
*        MONTH VALUE, DD = THE 2 DIGIT DAY VALUE, AND YYYY = THE      *
*        4 DIGIT YEAR VALUE.                                          *
*                                                                     *
*    5.  SIX FIELDS ARE PASSED AS PARAMETERS TO THE ROUTINE:          *
*        1) & 2)  8 BYTE FIELDS CONTAINING THE GREGORIAN DATES (IN    *
*            (ZONED-DECIMAL FORMAT) BETWEEN WHICH THE NUMBER OF       *
*            YEARS, MONTHS AND DAYS IS TO BE CALCULATED (ORDER        *
*            OF THE DATES IS IMMATERIAL),                             *
*        3)  A 1 BYTE ZONED-DECIMAL RETURN CODE,                      *
*        4), 5) & 6)  2 BYTE, 2 BYTE, AND 5 BYTE FIELDS WHICH WIL     *
*            RECEIVE THE NUMBER OF DAYS, MONTHS, AND YEARS ELAPSED    *
*            (IN ZONED-DECIMAL FORMAT).                               *
*        THE ROUTINE WILL NOT ALTER THE DATES PASSED TO IT.           *
*                                                                     *
*        SUGGESTED CALLING SYNTAX FOR ALC CALLERS:                    *
*                                                                     *
*                      CALL  Y2KLAGE,(DATE1)                          *
*                         . . .                                       *
*             DATE1    DS    ZL8'01011997'                            *
*             DATE2    DS    ZL8'04251988'                            *
*             RC       DS    ZL1'0'                                   *
*             DAYS     DS    ZL2'00'                                  *
*             MONTHS   DS    ZL2'00'                                  *
*             YEARS    DS    ZL3'00000'                               *
*                                                                     *
*        SUGGESTED CALLING SYNTAX FOR COBOL CALLERS:                  *
*                                                                     *
*             01  LAGE-PARAMETERS.                                    *
*                 02  DATE1  PIC 9(8) VALUE 01011997.                 *
*                 02  DATE2  PIC 9(8) VALUE 04251988.                 *
*                 02  RC     PIC 9(1) VALUE 0.                        *
*                 02  DAYS   PIC S9(2) VALUE +0.                      *
*                 02  MONTHS PIC S9(2) VALUE +0.                      *
*                 02  YEARS  PIC S9(5) VALUE +0.                      *
*             CALL 'Y2KLAGE' USING LAGE-PARAMETERS.                   *
*                                                                     *
*    6.  THE POSSIBLE VALUES FOR THE RETURN CODE FIELD ARE:           *
*                                                                     *
*        0 INDICATES SUCCESSFUL EXECUTION OF THE ROUTINE.             *
*                                                                     *
*        2 INDICATES INVALID DATA WAS FOUND IN THE DATE1 FIELD        *
*        (3 FOR DATE2).  INVALID DATA ARE DETERMINED IF THE FIELD'S   *
*        LOW ORDER BYTE'S ZONE CONTAINS AN INVALID SIGN, (NOT ONE     *
*        OF X'C', X'D', OR X'F'), OR IF THE PRECEEDING BYTES' ZONES   *
*        ARE OTHER THAN X'F', OR IF ANY BYTE'S LOW ORDER NIBBLE       *
*        CONTAINS A VALUE GREATER THAN X'9'.                          *
*                                                                     *
*        4 INDICATES THE VALUE OF THE YEAR SPECIFIED IN THE DATE1     *
*        FIELD (5 FOR DATE2) WAS NOT IN THE RANGE SPECIFIED IN 1      *
*        (ABOVE).                                                     *
*                                                                     *
*        6 INDICATES THE VALUE OF THE MONTH SPECIFIED IN THE DATE1    *
*        FIELD (7 FOR DATE2) WAS NOT IN THE RANGE SPECIFIED IN 2      *
*        (ABOVE).                                                     *
*                                                                     *
*        8 INDICATES THE VALUE OF THE DAY SPECIFIED IN THE DATE1      *
*        FIELD (9 FOR DATE2) WAS NOT IN THE RANGE SPECIFIED IN 3      *
*        (ABOVE).                                                     *
*                                                                     *
*    7.  UPON SUCCESSFUL EXECUTION, THE ABSOLUTE VALUE OF THE NUMBER  *
*        OF DAYS, MONTHS, AND YEARS WILL BE PLACED IN THE 4TH, 5TH    *
*        AND 6TH FIELDS.  IF THE RETURN CODE IS A NON-ZERO VALUE      *
*        (UNSUCCESSFUL EXECUTION), THESE 3 FIELDS WILL CONTAIN ZEROS. *
*                                                                     *
* ------------------------------------------------------------------- *
* CHANGE LOG:                                                         *
* 0.1 04/17/2008 - CHANGED METHOD OF DETERMINING LEAP YEAR AT THE     *
*                  SUGGESTION OF ANGEL LUIS DOMINGUEZ.  TESTS ARE     *
*                  NOW DONE ON BINARY FORM OF YEAR, ELIMINATING THE   *
*                  USE OF PACKED DECIMAL INSTRUCTIONS.  TESTS ON MY   *
*                  EMULATED HARDWARE SHOW A SAVINGS OF 3.13 SECONDS   *
*                  ON 500,000 ITERATIONS.                             *
* ******************************************************************* *
* ******************************************************************* *
         EJECT
Y2KLAGE  CSECT
          PRINT NOGEN
         EYEC  'LONG TERM AGE BETWEEN 2 DATES'
*
         SAVE  (14,12)                 SAVE CALLER'S REGISTERS
*
         LR    R12,R15                 LOAD BASE WITH ENTRY ADDRESS
         USING Y2KLAGE,R12             ESTABLISH ADDRESSABILITY
*
         L     R11,0(,R1)              LOAD A(PARAMETERS)
         USING $PARMS,R11              ESTABLISH ADDRESSABILITY
*
         GETMAIN R,LV=$DYNLEN          GETMAIN DYNAMIC WORKAREA
         LR    R10,R1                  SAVE A(MEMORY)
*
         ST    R13,4(,R10)             STORE A(CALLER'S SAVE AREA)
         ST    R10,8(,R13)             BACK CHAIN A(MY SAVE AREA)
         LR    R13,R10                 SET A(MY SAVE AREA)
         USING $DYNMEM,R13             ESTABLISH ADDRESSABILITY
*
*    INSERT EYECATCHER MARKS AT BEGIN/END OF GETMAIN'D AREA.
*
         MVC   TOPFLAG,=C'Y2KLAGE GETMAIN BEGINS->'
         MVC   BOTFLAG,=C'<-Y2KLAGE GETMAIN ENDS'
*
*    INITIALIZE OUTPUT PARAMETER FIELDS.
*
         MVI   PRC,C'0'                ASSUME GOOD RETURN CODE
         MVC   PRC+1(9),PRC            ZERO ELAPSED DAYS
*
*    TEST DATE1 FOR INVALID CHARACTER
*
         LA    R2,PDATE1               ADDRESS PASSED DATE
         LA    R3,7                    LENGTH MINUS 1
         MVI   PRC,C'2'                ASSUME INVALID DATA
         BAL   R14,PTEST1              PERFORM TESTING ROUTINE
         CLI   PRC,C'0'                DID DATE TEST 'OK'?
         BNE   RETURN                  IF NOT, RETURN TO CALLER
*
*    TEST DATE2 FOR INVALID CHARACTER
*
         LA    R2,PDATE2               ADDRESS PASSED DATE
         LA    R3,7                    LENGTH MINUS 1
         MVI   PRC,C'3'                ASSUME INVALID DATA
         BAL   R14,PTEST1              PERFORM TESTING ROUTINE
         CLI   PRC,C'0'                DID DATE TEST 'OK'?
         BNE   RETURN                  IF NOT, RETURN TO CALLER
*
*    BRANCH AROUND PERFORMED CODE TO CONTINUE
*
         B     TEST2                   CONTINUE WITH NEXT TEST
*
*    THIS ROUTINE SCANS FOR INVALID CHARACTERS IN ZONED-DECIMAL
*    PARAMETER FIELDS.  IT IS CALLED FOR BOTH DATE FIELDS.
*
PTEST1   EQU   *
PT1LOOP  CLI   0(R2),X'F0'             TEST LESS THAN C'0'
         BL    PT1ERR                  IF YES, DATE CONTAINS BAD DATA
         CLI   0(R2),X'F9'             TEST GREATER THAN C'9'
         BH    PT1ERR                  IF YES, DATE CONTAINS BAD DATA
         LA    R2,1(0,R2)              ADDRESS NEXT BYTE
         BCT   R3,PT1LOOP              CONTINUE TESTING
         IC    R3,0(,R2)               LOAD RIGHT-MOST CHARACTER
         LR    R4,R3                   COPY INTO R4
         N     R3,=F'15'               ISOLATE DIGIT PORTION
         CH    R3,=H'9'                TEST GREATER THAN 9
         BH    PT1ERR                  IF YES, DATE CONTAINS BAD DATA
         SRL   R4,4                    ISOLATE ZONE PORTION
         CH    R4,=H'12'               TEST FOR 'C' ZONE
         BE    PT1OK                   IF YES, DATE IS VALID NUMERIC
         CH    R4,=H'13'               TEST FOR 'D' ZONE
         BE    PT1OK                   IF YES, DATE IS VALID NUMERIC
         CH    R4,=H'15'               TEST FOR 'F' ZONE
         BE    PT1OK                   IF YES, DATE IS VALID NUMERIC
*
*    DATE CONTAINED AN INVALID CHARACTER.  SINCE THE ERROR RC WAS
*    SET BY THE CALLER, JUST RETURN.
*
PT1ERR   BR    R14                     RETURN
*
*    DATE WAS VALID, SO RESET RETURN CODE TO GOOD AND RETURN.
*
PT1OK    MVI   PRC,C'0'                INDICATE GOOD DATE
         BR    R14                     AND RETURN
*
*    THIS BRANCH POINT IS TO JUMP OVER PERFORMED ROUTINE ABOVE
*
TEST2    EQU   *
*
*    TEST YEAR1 FOR VALID RANGE
*
         PACK  WFY,PDATE1+4(4)         PACK PASSED YEAR1
         CP    WFY,=P'1601'            IS YEAR PRIOR TO 1601?
         BL    P1ERR2                  IF YES, YEAR NOT VALID
         CP    WFY,=P'3399'            IS YEAR AFTER 3399?
         BNH   P1OK2                   IF NOT, YEAR IS VALID
*
*    YEAR1 CONTAINED AN INVALID VALUE (OUT OF RANGE)
*
P1ERR2   MVI   PRC,C'4'                INDICATE BAD VALUE
         B     RETURN                  AND RETURN TO CALLER
*
*    TEST YEAR2 FOR VALID RANGE
*
P1OK2    PACK  WTY,PDATE2+4(4)         PACK PASSED YEAR2
         CP    WTY,=P'1601'            IS YEAR PRIOR TO 1601?
         BL    P2ERR2                  IF YES, YEAR NOT VALID
         CP    WTY,=P'3399'            IS YEAR AFTER 3399?
         BNH   P2OK2                   IF NOT, YEAR IS VALID
*
*    YEAR2 CONTAINED AN INVALID VALUE (OUT OF RANGE)
*
P2ERR2   MVI   PRC,C'5'                INDICATE BAD VALUE
         B     RETURN                  AND RETURN TO CALLER
*
*    TEST MONTH1 FOR VALID RANGE
*
P2OK2    PACK  WFM,PDATE1(2)           PACK PASSED MONTH1
         CP    WFM,=P'1'               IS MONTH ZERO?
         BL    P1ERR3                  IF YES, MONTH NOT VALID
         CP    WFM,=P'12'              IS MONTH GREATER THAN 12?
         BNH   P1OK3                   IF NOT, MONTH IS VALID
*
*    MONTH1 CONTAINED AN INVALID VALUE (OUT OF RANGE)
*
P1ERR3   MVI   PRC,C'6'                INDICATE BAD VALUE
         B     RETURN                  AND RETURN TO CALLER
*
*    TEST MONTH2 FOR VALID RANGE
*
P1OK3    PACK  WTM,PDATE2(2)           PACK PASSED MONTH2
         CP    WTM,=P'1'               IS MONTH ZERO?
         BL    P2ERR3                  IF YES, MONTH NOT VALID
         CP    WTM,=P'12'              IS MONTH GREATER THAN 12?
         BNH   P2OK3                   IF NOT, MONTH IS VALID
*
*    MONTH2 CONTAINED AN INVALID VALUE (OUT OF RANGE)
*
P2ERR3   MVI   PRC,C'7'                INDICATE BAD VALUE
         B     RETURN                  AND RETURN TO CALLER
*
*    GET MAXIMUM DAYS FOR DATE1 MONTH
*
P2OK3    MVC   GMYEAR,PDATE1+4         COPY YEAR TO GETMDAYS PARM
         MVC   GMMONTH,PDATE1          COPY MONTH TO GETMDAYS PARM
         BAL   R9,GETMDAYS             EXECUTE ROUTINE
*
*    TEST DAY FOR VALID RANGE
*
         PACK  WFD,PDATE1+2(2)         PACK PASSED DAY1
         ZAP   WFD,WFD                 CONVERT SIGN OF DAY TO X'C'
         CP    WFD,=P'1'               IS DAY ZERO?
         BL    P1ERR4                  IF YES, DAY NOT VALID
         CP    WFD,MAXDAYS             IS DAY GREATER THAN MAX?
         BNH   P1OK4                   IF NOT, MONTH IS VALID
*
*    DAY1 CONTAINED AN INVALID VALUE (OUT OF RANGE)
*
P1ERR4   MVI   PRC,C'8'                INDICATE BAD VALUE
         B     RETURN                  AND RETURN TO CALLER
*
*    GET MAXIMUM DAYS FOR DATE2 MONTH
*
P1OK4    MVC   GMYEAR,PDATE2+4         COPY YEAR TO GETMDAYS PARM
         MVC   GMMONTH,PDATE2          COPY MONTH TO GETMDAYS PARM
         BAL   R9,GETMDAYS             EXECUTE ROUTINE
*
*    TEST DAY FOR VALID RANGE
*
         PACK  WTD,PDATE2+2(2)         PACK PASSED DAY2
         ZAP   WTD,WTD                 CONVERT SIGN OF DAY TO X'C'
         CP    WTD,=P'1'               IS DAY ZERO?
         BL    P2ERR4                  IF YES, DAY NOT VALID
         CP    WTD,MAXDAYS             IS DAY GREATER THAN MAX?
         BNH   P2OK4                   IF NOT, MONTH IS VALID
*
*    DAY2 CONTAINED AN INVALID VALUE (OUT OF RANGE)
*
P2ERR4   MVI   PRC,C'9'                INDICATE BAD VALUE
         B     RETURN                  AND RETURN TO CALLER
*
*    ENSURE THAT WFM/WFD/WFY CONTAINS EARLIER OF THE 2 DATES
*
P2OK4    CP    WFY,WTY                 COMPARE YEARS
         BL    ORDOK                   ORDER IS CORRECT
         BH    ORDSWAP                 ORDER IS INCORRECT
         CP    WFM,WTM                 COMPARE MONTHS (SAME YEAR)
         BL    ORDOK                   ORDER IS CORRECT
         BH    ORDSWAP                 ORDER IS INCORRECT
         CP    WFD,WTD                 COMPARE DAYS (SAME MONTH)
         BNH   ORDOK                   ORDER IS CORRECT
ORDSWAP  ZAP   COUNT,WFY               SWAP
         ZAP   WFY,WTY                    WFY AND
         ZAP   WTY,COUNT                     WTY
         ZAP   COUNT,WFM               SWAP
         ZAP   WFM,WTM                    WFM AND
         ZAP   WTM,COUNT                     WTM
         ZAP   COUNT,WFD               SWAP
         ZAP   WFD,WTD                    WFD AND
         ZAP   WTD,COUNT                     WTD
*
*    SET COUNT WORK FIELD TO ZERO.
*
ORDOK    ZAP   COUNT,=P'0'              SET COUNT TO ZERO
*
*    BEGIN COMPUTATIONS FOR ELAPSED TIME:  STEP 1:  IF YEAR AND
*    MONTH ARE THE SAME, COMPUTE DIFFERENCE IN DAYS AND EXIT.
*
         CP    WFY,WTY                 ARE YEARS THE SAME?
         BNE   STEP2                   IF NOT, GO TO NEXT STEP
         CP    WFM,WTM                 ARE MONTHS THE SAME?
         BNE   STEP2                   IF NOT, GO TO NEXT STEP
         SP    WTD,WFD                 COMPUTE DIFFERENCE BETWEEN DAYS
         UNPK  DWORK(3),WTD(2)         UNPACK
         OI    DWORK+2,X'F0'           CLEAR SIGN
         MVC   PDAYS,DWORK+1           MOVE TO OUTPUT
         B     RETURN                  AND RETURN
*
*    STEP2:  GET MAXDAYS FOR FROM MONTH AND STORE FROM DAY IN ID
*
STEP2    UNPK  GMYEAR,WFY              COPY YEAR TO GETMDAYS PARM
         UNPK  GMMONTH,WFM             COPY MONTH TO GETMDAYS PARM
         BAL   R9,GETMDAYS             EXECUTE ROUTINE
         ZAP   ID,WFD                  STORE FROM DAY AND
         ZAP   IMAX,MAXDAYS              MAXDAYS FOR FROM YEAR/MONTH
*
*    STEP3:  BEGIN INCREMENTING FROM MONTH AND YEAR UNTIL EQUAL
*    TO MONTH AND YEAR, COUNTING THE NUMBER OF INCREMENTS.
*
STEP3    CP    WFY,WTY                 YEARS DIFFERENT?
         BL    STEP3A                  IF SO, CONTINUE INCREMENTING
         CP    WFM,WTM                 MONTHS DIFFERENT?
         BNL   STEP4                   IF NOT, GO TO NEXT STEP
STEP3A   AP    WFM,=P'1'               INCREMENT MONTH
         AP    COUNT,=P'1'             COUNT MONTHS INCREMENTED
         CP    WFM,=P'13'              EXCEEDED 12 MONTHS THIS YEAR?
         BL    STEP3                   IF NOT, CONTINUE THIS STEP
         SP    WFM,=P'12'              ELSE, RESET MONTH
         AP    WFY,=P'1'                 AND INCREMENT YEAR
         B     STEP3                       THEN CONTINUE THIS STEP
*
*    GET MAXDAYS FOR INCREMENTED YEAR/MONTH.
*
STEP4    UNPK  GMYEAR,WFY              COPY YEAR TO GETMDAYS PARM
         UNPK  GMMONTH,WFM             COPY MONTH TO GETMDAYS PARM
         BAL   R9,GETMDAYS             EXECUTE ROUTINE
*
*    TEST FOR OVERSHOOT.
*
STEP5    ZAP   X,WTD                   PUT TO DAY IN WORK FIELD
         SP    X,MAXDAYS               SUBTRACT MAX DAYS
         BL    STEP7                   IF LESS THAN ZERO, STEP 7
*
*    COMPUTE SUM OF DAYS COUNTED TO END OF THE EARLIEST MONTH, PLUS
*    DAYS COUNTED TO THE TARGET DAY FROM THE END OF THE NEWLY
*    CALCULATED MONTH.
*
         ZAP   WTD,X                   SET TO DAY EQUAL X
         AP    WTD,IMAX                ADD ORIGINAL MAX DAYS
         SP    WTD,ID                  SUBTRACT ORIGINAL DAY
         B     FINI                    GO TRANSFER TO RETURN FIELDS
*
*    CORRECT OVERSHOOT.
*
STEP7    SP    COUNT,=P'1'             DECREMENT MONTH COUNTER
         AP    WTD,IMAX                ADD ORIGINAL MAX DAYS
         SP    WTD,ID                  SUBTRACT ORIGINAL DAY
*
*    IF TO DAY NOT LESS THAN ORIGINAL MAX DAYS AND INITIAL FROM DAY
*    IS LESS THAN 29, SWITCH TO RELATIVE DATE DISPLACEMENT AGING
*
         CP    WTD,IMAX                TO DAY < ORIGINAL MAX DAYS?
         BL    FINI                    NO, TRANSFER TO RETURN FIELDS
         CP    ID,=P'29'               ORIGINAL DAY < 29?
         BNL   FINI                    NO, TRANSFER TO RETURN FIELDS
*
*    SWITCH TO RELATIVE AGING: PDAY PARAMETER WILL BE: -1 < PDAY < 33
*
         SP    WTD,IMAX                SUBTRACT ORIGINAL MAX DAYS
         AP    COUNT,=P'1'             INCREMENT COUNT
*
*    BUILD PARAMETER FIELDS
*
FINI     ZAP   WORK5,COUNT             PUT COUNT IN 5 BYTE FIELD
         DP    WORK5,=P'12'            DIVIDE BY 12
         UNPK  PYEARS(5),WORK5(3)      UNPACK YEARS
         OI    PYEARS+4,X'F0'          CLEAR SIGN
         UNPK  DWORK(3),WORK5+3(2)     UNPACK MONTHS
         OI    DWORK+2,X'F0'           CLEAR SIGN
         MVC   PMONTHS,DWORK+1         MOVE TO OUTPUT
         UNPK  DWORK(3),WTD(2)         UNPACK DAYS
         OI    DWORK+2,X'F0'           CLEAR SIGN
         MVC   PDAYS,DWORK+1           MOVE TO OUTPUT
*
*    RESTORE REGISTERS, FREE STORAGE, AND RETURN
*
RETURN   LR    R1,R13                  LOAD ADDRESS OF GETMAINED AREA
         L     R13,4(,R13)             RELOAD PREVIOUS SAVE AREA
         LA    R0,$DYNLEN              LOAD LENGTH OF GETMAINED AREA
         FREEMAIN R,LV=(0),A=(1)       FREE GETMAINED AREA
         RETURN (14,12),RC=0           RETURN TO CALLER WITH RC=0
*
* ******************************************************************* *
* *************************** SUBROUTINES *************************** *
* ******************************************************************* *
*
*    SINCE IT IS NECESSARY TO REPEATEDLY DETERMINE THE MAXIMUM NUMBER
*    OF DAYS FOR A GIVEN MONTH IN A GIVEN YEAR, THIS ROUTINE IS USED
*    TO REDUCE PROGRAM SIZE.  THE YEAR IS PLACED IN GMYEAR, THE MONTH
*    IN GMMONTH AND THE ROUTINE IS BRANCHED TO USING REGISTER 9 AS
*    THE LINK POINT TO THE CALL.
*
* ******************************************************************* *
GETMDAYS EQU   *
*
*    DETERMINE LEAP YEAR STATUS
*
         MVI   LEAP,C'0'               ASSUME NOT A LEAP YEAR
         PACK  DWORK(5),GMYEAR         PUT YEAR INTO WORK FIELD
         MVO   B3(3),DWORK+2(3)        DROP SIGN                    0.1
         TM    B3+1,X'01'              ODD YEAR?                    0.1
         BO    GMCONT1                 IF YES, IT IS *NOT* LEAP YEAR0.1
         TM    B3+1,X'12'              EVENLY DIVISIBLE BY 4?       0.1
         BM    GMCONT1                 IF NO, IT IS *NOT* LEAP YEAR 0.1
         CLI   B3+1,X'00'              DOES YEAR END IN 00?         0.1
         BNE   GMLEAP                  IF YES, IT IS A LEAP YEAR    0.1
         TM    B3,X'01'                IS CENTURY ODD?              0.1
         BO    GMCONT1                 IF YES, IT IS *NOT* LEAP YEAR0.1
         TM    B3,X'12'                EVENLY DIVISIBLE BY 400?     0.1
         BM    GMCONT1                 IF NO, IT IS *NOT* LEAP YEAR 0.1
*                                      ELSE IT IS A LEAP YEAR       0.1
*
*    TEST
*
GMLEAP   MVI   LEAP,C'1'               INDICATE LEAP YEAR
*
*    RETRIEVE MAXIMUM DAYS ENTRY FROM TABLE
*
GMCONT1  LA    R4,DIM                  GET ADDRESS OF DAY TABLE
         CLI   LEAP,C'0'               IS THIS LEAP YEAR?
         BE    GMCONT2                 IF NOT, ADDRESS IS OK
         LA    R4,2(,R4)               ELSE ADJUST TO LEAP ENTRY
GMCONT2  PACK  DWORK(8),GMMONTH(2)     GET MONTH INTO DOUBLEWORD
         CVB   R3,DWORK                CONVERT TO BINARY
         BCTR  R3,0                    DECREMENT BY 1 (ZERO BASE)
         SLL   R3,2                    MULTIPLY BY TABLE ENTRY LENGTH
         LA    R4,0(R3,R4)             LOAD ENTRY ADDRESS INTO R4
         MVC   MAXDAYS(2),0(R4)        MOVE ENTRY TO WORK FIELD
*
*    RETURN FROM SUBROUTINE
*
         BR    R9                      RETURN TO CALLING POINT
         EJECT
* ******************************************************************* *
* **************************** CONSTANTS **************************** *
* ******************************************************************* *
*
*    MAXIMUM DAYS IN MONTHS ... EACH ENTRY HAS 2 VALUES, THE 1ST FOR
*    A NORMAL (NON-LEAP) YEAR AND THE 2ND FOR A LEAP YEAR
*
DIM      DC    PL2'31',PL2'31'           JANUARY
         DC    PL2'28',PL2'29'           FEBRUARY
         DC    PL2'31',PL2'31'           MARCH
         DC    PL2'30',PL2'30'           APRIL
         DC    PL2'31',PL2'31'           MAY
         DC    PL2'30',PL2'30'           JUNE
         DC    PL2'31',PL2'31'           JULY
         DC    PL2'31',PL2'31'           AUGUST
         DC    PL2'30',PL2'30'           SEPTEMBER
         DC    PL2'31',PL2'31'           OCTOBER
         DC    PL2'30',PL2'30'           NOVEMBER
         DC    PL2'31',PL2'31'           DECEMBER
* ******************************************************************* *
         LTORG
         EJECT
* ******************************************************************* *
* ***************************** EQUATES ***************************** *
* ******************************************************************* *
         YREGS
* ******************************************************************* *
         EJECT
* ******************************************************************* *
* ***************************** DSECTS ****************************** *
* ******************************************************************* *
$DYNMEM  DSECT                         DYNAMICALLY ALLOCATED MEMORY
SAVEAREA DS    18F                     REGISTER SAVE AREA
TOPFLAG  DS    CL24                    EYECATCHER
WFM      DS    PL2                     FROM MONTH
WFD      DS    PL2                     FROM DAY
WFY      DS    PL3                     FROM YEAR
WTM      DS    PL2                     TO MONTH
WTD      DS    PL2                     TO DAY
WTY      DS    PL3                     TO YEAR
ID       DS    PL2                     WORK FIELD
IMAX     DS    PL2                     WORK FIELD
X        DS    PL2                     WORK FIELD
WORK5    DS    PL5                     WORK FIELD
COUNT    DS    PL3                     WORK COUNTER
GMYEAR   DS    ZL4                     PARM YEAR TO GETMDAYS ROUTINE
GMMONTH  DS    ZL2                     PARM MONTH TO GETMDAYS ROUTINE
MAXDAYS  DS    PL2                     MAX DAYS IN CURRENT MONTH
LEAP     DS    CL1                     LEAP STATUS
DWORK    DS    D                       DOUBLEWORD WORK FIELD
B3       DS    XL3                     WORK AREA FOR BINARY YEAR    0.1
BOTFLAG  DS    CL22                    EYECATCHER
*
$DYNLEN  EQU   (*-$DYNMEM)             LENGTH OF GETMAIN'D AREA
*
$PARMS   DSECT                         PARAMETERS FROM/TO CALLER
PDATE1   DS    CL8                     DATE TO BE PROCESSED
PDATE2   DS    CL8                     DATE TO BE PROCESSED
PRC      DS    CL1                     RETURN CODE (0, 2-9)
PDAYS    DS    ZL2                     ELAPSED DAYS
PMONTHS  DS    ZL2                     ELAPSED MONTHS
PYEARS   DS    ZL5                     ELAPSED YEARS
* ******************************************************************* *
         END
