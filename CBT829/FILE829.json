{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012906000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 176358, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 8, "INMDSNAM": "CBT.V500.FILE829.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 176358, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 176358, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE829.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x04\\x07'", "DS1TRBAL": "b'r\\x9e'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x05\\xaa\\x00\\n\\x05\\xaa\\x00\\x0e\\x00\\x05'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04O\\x00\\x14\\x01\\x10\\x12o\\x01\\x10\\x12o\\x10\\x12\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf9@@@'", "ispf": {"version": "04.79", "flags": 0, "createdate": "2010-05-06T00:00:00", "modifydate": "2010-05-06T10:12:14", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-479"}, "text": "REGULAR CBT TAPE - VERSION 479    FILE:  829\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT479.FILE829\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 12 MEMBERS COUNTED; CUMULATIVE SIZE IS 1,412 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   05/06/10    10:12:13    GMT-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$NOTE01": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00P\\x01\\x10\\x12O\\x01\\x10\\x12O\"H\\x00/\\x00/\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2010-05-04T00:00:00", "modifydate": "2010-05-04T22:48:50", "lines": 47, "newlines": 47, "modlines": 0, "user": "SBGOLOB"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "$$README": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00X\\x01\\x10\\x12o\\x01\\x10\\x12o\\tD\\x00\\x1e\\x00.\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2010-05-06T00:00:00", "modifydate": "2010-05-06T09:44:58", "lines": 30, "newlines": 46, "modlines": 0, "user": "SBGOLOB"}, "text": "Notes:\n\nThis program was submitted to the CBT Tape by Jim Marshall (File 316)\nand was fixed by Eugene Vogt.  email: racfra2@bluewin.ch\n\nTIDYASM is a program that cleans up Assembler code and repositions\nthe comments.  The default PARM is PARM='36,71' where 36 is the\ncolumn where the comments are assumed to begin, and 71 is the\ncolumn where the comments are assumed to end.  I do not recommend\nmaking the second parm any less than 71, for the following reason:\n\nTIDYASM (as currently coded) has a possibility of going into an\nendless loop.  Coding the second parm too small, will make it easier\nfor the loop to happen.  This situation is currently being looked\ninto, but for now, we are putting this program out anyway, so people\ncan benefit from it when it does work, which is most of the time.\n\nMy recommendation is that for a given piece of source code, you\nshould try running this program without a PARM, taking the default\nof column 36 for \"comment start\" and 71 for \"comment end\".  If\nthat works well for you, then you can start playing with the\nparms, to see if a different setting will work out better.  But\nalways keep watching out for the loop, because it is endless, and\nthis program (even for very large source modules) should end very\nquickly when there is no loop.\n\nGood luck.\n\nSam Golob  (sbgolob@attglobal.net   or  sbgolob@cbttape.org)\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$ENTER3": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x10\\x12_\\x01\\x10\\x12_\\x104\\x01\\x1f\\x01\\x1f\\x00\\x00\\xd4\\xc1\\xc3\\xd9\\xd6@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2010-05-05T00:00:00", "modifydate": "2010-05-05T10:34:00", "lines": 287, "newlines": 287, "modlines": 0, "user": "MACRO"}, "text": "         MACRO\n&NAME    $ENTER3 &BASE=R3,&CSECT=YES,&SAVE=,&RENT=,&SP=1,&SPM=YES,     +\n               &CHAIN=YES\n         MNOTE *,'       $ENTER3   VERSION 003 05/07/75  04/29/76  GPW'\n.**********************************************************************\n.*                                                                    *\n.* $ENTER3                                                            *\n.*                                                                    *\n.* FUNCTION       PROVIDE ENTRY CODING TO ESTABLISH BASE REGISTERS,   *\n.*                ALLOCATE AND CHAIN SAVE AREAS, SET PROGRAM MASK,    *\n.*                AND OBTAIN WORK AREA FOR RE-ENTRANT PROGRAMS.       *\n.*                                                                    *\n.* DESCRIPTION    THE MACRO WILL GENERATE CODE TO ESTABLISH ONE OR    *\n.*                MORE BASE REGISTERS.  IT IS ASSUMED THAT STANDARD   *\n.*                IBM LINKAGE CONVENTIONS HAVE BEEN FOLLOWED AND THAT *\n.*                REGISTER 15 CONTAINS THE ADDRESS OF THE ENTRY       *\n.*                POINT.  USER SPECIFIED OR DEFAULT BASE REGISTERS    *\n.*                ARE INITIALIZED.  THE FIRST BASE REGISTER CONTAINS  *\n.*                THE ADDRESS OF THE ENTRY POINT, AND SUCCESSIVE BASE *\n.*                REGISTER ADDRESSES ARE INCREMENTED BY 4096.  THE    *\n.*                DEFAULT BASE REGISTER IS REGISTER 3.  IF REGISTER 2 *\n.*                IS SPECIFIED AS A BASE REGISTER, IT WILL BE         *\n.*                ALLOWED, BUT A WARNING MESSAGE WILL BE DISPLAYED.   *\n.*                REGISTERS 0, 1, 13, 14, AND 15 MAY NOT BE           *\n.*                SPECIFIED AS BASE REGISTERS.  ALL REGISTER          *\n.*                SPECIFICATIONS MUST BE MADE AS MNEMONICS (EG,       *\n.*                REGISTER 3 IS R3).                                  *\n.*                                                                    *\n.*                IDENTIFICATION CONSTANTS SPECIFYING THE DATE AND    *\n.*                TIME OF ASSEMBLY ARE CONSTRUCTED IN THE ENTRY       *\n.*                CODING.  THESE VALUES ARE DISPLAYED IN DUMPS AND    *\n.*                MAY BE USED TO VERIFY THAT THE PROPER VERSION OF    *\n.*                THE ROUTINE HAS BEEN USED.                          *\n.*                                                                    *\n.*                ALL BITS OF THE PROGRAM MASK ARE SET.  IBM          *\n.*                TRANSFERS CONTROL TO THE USER PROGRAM WITH ALL      *\n.*                PROGRAM MASK BITS OFF.  IF SPM=NO IS SPECIFIED,     *\n.*                THE PROGRAM MASK WILL BE UNALTERED.                 *\n.*                                                                    *\n.*                THE USER MAY SPECIFY THE NAME OF A WORK AREA OF 18  *\n.*                FULLWORDS TO BE USED AS A SAVE AREA.  IF A USER     *\n.*                AREA IS NOT SUPPLIED, AN 18 FULLWORD AREA IS        *\n.*                ALLOCATED AND INITIALIZED TO ZERO.  THE ADDRESS OF  *\n.*                THE SAVE AREA IS LOADED INTO REGISTER 13 AND IT IS  *\n.*                CHAINED TO THE SAVE AREA OF THE CALLING PROGRAM.    *\n.*                                                                    *\n.*                THE USER MAY SPECIFY THAT THE MACRO IS NOT TO       *\n.*                OBTAIN A SAVE AREA OR CHAIN SAVE AREAS BY           *\n.*                SPECIFYING CHAIN=NO.  THE USER IS THEN              *\n.*                RESPONSIBLE FOR SAVE AREA CHAINING.                 *\n.*                                                                    *\n.*                REGISTER EQUIVALENCES (R0  EQU  0, ETC.) ARE        *\n.*                GENERATED FOR THE FIRST USAGE OF THE MACRO.         *\n.*                                                                    *\n.*                A CSECT DEFINITION WILL BE GENERATED UNLESS         *\n.*                CSECT=NO IS SPECIFIED.  IF CSECT=NO IS SPECIFIED,   *\n.*                AN ENTRY STATEMENT WILL BE GENERATED.               *\n.*                                                                    *\n.*                RE-ENTRANT CODING IS SUPPORTED.  FOR RE-ENTRANT     *\n.*                CODING, THE USER MUST SPECIFY THE LENGTH OF A       *\n.*                WORK AREA.  THE WORK AREA IS OBTAINED FROM SUBPOOL  *\n.*                1 UNLESS OTHERWISE SPECIFIED.  THE FIRST 18 WORDS   *\n.*                OF THE WORK AREA ARE USED FOR THE SAVE AREA.        *\n.*                                                                    *\n.* SYNTAX         NAME     $ENTER3   BASE=(REG1,...,REGN)             *\n.*                                   CSECT=NO                         *\n.*                                   SAVE=SYM                         *\n.*                                   RENT=LEN                         *\n.*                                   SP=NUMBER                        *\n.*                                   SPM=NO                           *\n.*                                   CHAIN=NO                         *\n.*                                                                    *\n.*                NAME   - A SYMBOLIC TAG ASSIGNED TO THE FIRST       *\n.*                         INSTRUCTION GENERATED.                     *\n.*                                                                    *\n.*                BASE   - THE REGISTERS TO BE USED AS BASE           *\n.*                         REGISTERS.  THE DEFAULT IS R3.  THE FIRST  *\n.*                         REGISTER SPECIFIED WILL CONTAIN THE        *\n.*                         ADDRESS OF THE ENTRY POINT, AND SUCCEEDING *\n.*                         BASE VALUES WILL BE INCREMENTED BY 4096.   *\n.*                         REGISTERS 0, 1, 13, 14, AND 15 MAY NOT BE  *\n.*                         SPECIFIED AS BASE REGISTERS.  REGISTERS    *\n.*                         MUST BE SPECIFIED IN MNEMONIC FORM (EG,    *\n.*                         R3 FOR REGISTER 3).                        *\n.*                                                                    *\n.*                CSECT  - CSECT=NO SPECIFIES THAT CODING FOR AN      *\n.*                         ENTRY POINT RATHER THAN A CSECT IS TO BE   *\n.*                         GENERATED.                                 *\n.*                                                                    *\n.*                SAVE   - SPECIFIES THE NAME OF A USER DEFINED 18    *\n.*                         WORD SAVE AREA TO BE USED INSTEAD OF       *\n.*                         GENERATING AN IN-LINE SAVE AREA.  IF RENT  *\n.*                         IS SPECIFIED, SAVE MUST SPECIFY THE NAME   *\n.*                         ASSIGNED TO THE FIRST 18 WORDS IN THE      *\n.*                         WORK AREA.                                 *\n.*                                                                    *\n.*                RENT   - SPECIFIES THAT RE-ENTRANT CODE IS TO BE    *\n.*                         GENERATED.  LEN IS THE LENGTH OF A WORK    *\n.*                         AREA TO BE OBTAINED BY A GETMAIN.          *\n.*                                                                    *\n.*                SP     - SPECIFIES THE SUBPOOL FROM WHICH THE WORK  *\n.*                         AREA FOR RE-ENTRANT CODING IS TO BE        *\n.*                         OBTAINED.  DEFAULT IS SUBPOOL 1.           *\n.*                                                                    *\n.*                SPM    - SPM=NO SPECIFIES THAT THE PROGRAM MASK IS  *\n.*                         NO TO BE ALTERED.                          *\n.*                                                                    *\n.*                CHAIN  - CHAIN=NO SPECIFIES THAT SAVE AREA ARE NOT  *\n.*                         TO BE CHAINED.  THIS OPTION IS INTENDED    *\n.*                         FOR USE ONLY BY HIGH ACTIVITY RE-ENTRANT   *\n.*                         MODULES WHERE THE OVERHEAD OF              *\n.*                         GETMAIN/FREEMAIN IS TO BE AVOIDED.         *\n.*                                                                    *\n.* ERRORS         THE NAME FIELD MUST BE SPECIFIED.  IF IT IS NOT, A  *\n.*                GENERATED NAME, $ENTNNNN WILL BE GENERATED AND A    *\n.*                SEVERITY 8 MNOTE IS GENERATED.  IF NO CODE WERE     *\n.*                GENERATED AND NO BASE REGISTER DEFINED, THE ERROR   *\n.*                LISTING WOULD BE LARGE.  TO REDUCE THE SIZE OF THE  *\n.*                ERROR LISTING AND ALLOW OTHER ERRORS TO BE FOUND,   *\n.*                THE MACRO WILL EXPAND.                              *\n.*                                                                    *\n.*                                                                    *\n.* EXAMPLE        EX1      $ENTER3                                    *\n.*                                                                    *\n.*                EX2      $ENTER3 CSECT=NO                           *\n.*                                                                    *\n.*                EX3      $ENTER3 BASE=(R3,R4,R5)                    *\n.*                                                                    *\n.*                EX4      $ENTER BASE=R12,RENT=DSECTLEN,SAVE=SAVEAREA*\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                NAME     TYPE  USE                                  *\n.*                                                                    *\n.*                &ENCOUNT   A   SET TO 1 AFTER REGISTER EQUIVALENCES *\n.*                               GENERATED TO PREVENT EQUIVALENCES    *\n.*                               FROM BEING GENERATED FOR LATER USES. *\n.*                                                                    *\n.* MACROS USED                                                        *\n.*                                                                    *\n.*                GETMAIN                                             *\n.*                                                                    *\n.* UPDATE SUMMARY                                                     *\n.*                                                                    *\n.*      VERSION   DATE     CHANGE                                     *\n.*                                                                    *\n.*        003   04/29/76   CHAIN KEYWORD ADDED                        *\n.*                                                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n         GBLA  &ENCOUNT\n         GBLC  &DECID\n&DECID   SETC  '&NAME'\n         GBLC  &DECVERS\n&DECVERS SETC  'V3R2M0-A'          * SPECFIFY  THE VERSION\n.*\n         LCLA  &PARMNO,&REGNO\n         LCLC  &REG,&CHAR,&LAST,&USING,&TEMP,&ID,&FIRST\n.*\n         LCLC  &ASMDATE\n&ASMDATE SETC  '&SYSDATC'(1,4).'-'.'&SYSDATC'(5,2).'-'.'&SYSDATC'(7,2)\n.*\n&ID      SETC  '&NAME'\n         AIF   ('&NAME' NE '').CKCSECT\n&ID      SETC  '$ENT&SYSNDX'\n         MNOTE 8,'NAME OPERAND REQUIRED, NOT SPECIFIED. &ID WILL BE USE+\n               D.'\n.CKCSECT AIF   ('&CSECT' NE 'NO').CSECT\n         AIF   ('&SYSECT' NE '').CKEQU\n         MNOTE 8,'ENTRY POINT SPECIFIED, BUT NO CSECT DEFINED'\n.CSECT   ANOP\n         SPACE\n&ID      CSECT\n.CKEQU   AIF   (&ENCOUNT EQ 1).SKIPEQU\n         SPACE\n***********************************************************************\n*                                                                     *\n*                      REGISTER EQUIVALENCES                          *\n*                                                                     *\n***********************************************************************\n         SPACE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n.*\n&ENCOUNT SETA  1\n         SPACE\n.SKIPEQU AIF   ('&CSECT' NE 'NO').CSECT2\n         AIF   ('&SYSECT' EQ '').CSECT2\n.*-------ENTRY POINT\n         ENTRY &ID\n         USING &ID,R15                  DEFINE BASE REGISTER\n&ID      B     14(R15)                  BRANCH AROUND ID\n         DC    AL1(8)                   IDENTIFIER LENGTH\n         DC    CL8'&ID'                 ENTRY POINT NAME\n         DC    CL1' '                   SPACER\n         AGO   .STREGS\n.*-------CSECT\n.CSECT2  USING &ID,R15                  DEFINE BASE REGISTER\n         B     28(0,R15)                BRANCH AROUND ID\n         DC    AL1(23)                  IDENTIFIER LENGTH\n         DC    CL8'&ID'                 CSECT NAME\n         DC    CL1' '                   SPACER\n         DC    CL8'&SYSDATE'            DATE OF ASSEMBLY\n         DC    CL1' '                   SPACER\n         DC    CL5'&SYSTIME'            TIME OF ASSEMBLY\n.STREGS  STM   R14,R12,12(R13)          SAVE REGISTERS\n&PARMNO  SETA  1                        INITIALIZE COUNTER\n.CKBASE  ANOP\n&REG     SETC  '&BASE(&PARMNO)'(1,3)\n         AIF   ('&REG'(1,1) NE 'R').SKIPBAS\n&TEMP    SETC  '&REG'(2,2)\n&REGNO   SETA  &TEMP\n         AIF   (&REGNO LT 2).BADBASE\n         AIF   (&REGNO GT 12).BADBASE\n         AIF   (&REGNO NE 2).SETBASE\n         MNOTE 0,'*** WARNING - R2 IS A BASE REGISTER. TRANSLATE AND TE+\n               ST INSTRUCTION WILL DESTROY CONTENTS.'\n.SETBASE ANOP\n         AIF   ('&FIRST' NE '').SETBAS2\n         LR    &REG,R15                 LOAD BASE ADDRESS\n&FIRST   SETC  '&REG'                   SAVE REGISTER\n         AGO   .SETLAST\n.SETBAS2 LA    &REG,4095(&LAST)         ADD 4095 TO LAST BASE\n         LA    &REG,1(&REG)             ADD 1 MORE\n.SETLAST ANOP\n&LAST    SETC  '&REG'\n&USING   SETC  '&USING.,&REG'\n         AGO   .NEXTBAS\n.SKIPBAS MNOTE 8,'*&REG* IS AN INVALID REGISTER FORM, IGNORED'\n         AGO   .NEXTBAS\n.BADBASE MNOTE 8,'*&REG* IS AN INVALID BASE REGISTER, IGNORED'\n.NEXTBAS ANOP\n&PARMNO  SETA  &PARMNO+1\n         AIF   (&PARMNO LE N'&BASE).CKBASE\n         DROP  R15                      DISCONTINUE R15 BASE\n         USING &ID.&USING               DEFINE BASE REGISTERS\n.*-------SEE IF PROGRAM MASK IS TO BE SET\n         AIF   ('&SPM' EQ 'NO').NOSPM\n         LA    R15,15                   LOAD PGM MASK SETTING\n         SLA   R15,24                   SHIFT TO BITS 4-7\n         SPM   R15                      SET PGM MASK AND COND\n.NOSPM   AIF   ('&CHAIN' EQ 'NO').DONE\n         AIF   ('&RENT' NE '').GETMAIN\n         LR    R15,R13                  SAVE OLD SAVEAREA ADDR\n         AIF   ('&SAVE' NE '').LOADSAV\n         CNOP  0,4                      FULL WORD ALIGNMENT\n         BAS   R13,*+76                 LOAD SAVEAREA ADDR\n         DC    18F'0'                   SAVE AREA\n         AGO   .CHAIN\n.LOADSAV LA    R13,&SAVE                LOAD NEW SAVEAREA ADDR\n         AGO   .CHAIN\n.GETMAIN MNOTE *,' GETMAIN R,LV=&RENT,SP=&SP'\n         GETMAIN R,LV=&RENT,SP=&SP      GET STORAGE\n* END OF GETMAIN - $ENTER3\n         LR    R15,R13                  SAVE OLD SAVEAREA ADDR\n         LR    R13,R1                   LOAD STORAGE ADDRESS\n         USING &SAVE,R13                DEFINE BASE REGISTER\n         L     R1,24(R15)               RESTORE REG 1 CONTENTS\n.CHAIN   ST    R15,4(R13)               CHAIN SAVE AREAS\n         ST    R13,8(R15)\n*        SETMODE MODE=31                   * EVOGT 1989 FOR RA2\n*SETMODE MNOTE *,'SETMODE TO MODE=31 DONE'\n.DONE    ANOP\nMYBIT0   EQU   B'10000000'\nMYBIT1   EQU   B'01000000'\nMYBIT2   EQU   B'00100000'\nMYBIT3   EQU   B'00010000'\nMYBIT4   EQU   B'00001000'\nMYBIT5   EQU   B'00000100'\nMYBIT6   EQU   B'00000010'\nMYBIT7   EQU   B'00000001'\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$RTRN": {"ttr": 528, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x10\\x12_\\x01\\x10\\x12_\\x104\\x00\\x7f\\x00\\x7f\\x00\\x00\\xd4\\xc1\\xc3\\xd9\\xd6@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2010-05-05T00:00:00", "modifydate": "2010-05-05T10:34:00", "lines": 127, "newlines": 127, "modlines": 0, "user": "MACRO"}, "text": "         MACRO\n&NAME    $RTRN &RC=0,&RENT=,&SP=1,&SPM=YES,&REST01=YES\n         MNOTE *,'       $RTRN     VERSION 002 05/07/75  04/29/76  GPW'\n         PRINT OFF,NOGEN\n.**********************************************************************\n.*                                                                    *\n.* $RTRN                                                              *\n.*                                                                    *\n.* FUNCTION       GENERATE CODE REQUIRED TO RETURN CONTROL TO THE     *\n.*                CALLING PROGRAM.                                    *\n.*                                                                    *\n.* DESCRIPTION    STANDARD IBM LINKAGE CODE IS GENERATED BY THE MACRO *\n.*                TO RETURN CONTROL TO THE CALLING PROGRAM.  THE USER *\n.*                MAY SPECIFY THE RETURN CODE TO BE RETURNED.         *\n.*                RE-ENTRANT CODE IS SUPPORTED.                       *\n.*                                                                    *\n.*                REGISTERS 0 THROUGH 14 (OR OPTIONALLY, REGISTERS    *\n.*                2 THROUGH 14) WILL BE RESTORED TO THEIR STATUS      *\n.*                UPON ENTRY TO THE ROUTINE.  REGISTER 15 WILL BE     *\n.*                USED FOR A DEFAULT OR USER SPECIFIED RETURN CODE.   *\n.*                AN X'FF' WILL BE PLACED IN THE HIGH ORDER BYTE OF   *\n.*                WORD 4 OF THE OLD SAVE AREA TO INDICATE THAT        *\n.*                CONTROL HAS BEEN RETURNED TO THE CALLING PROGRAM    *\n.*                                                                    *\n.*                CODE IS ALSO GENERATED TO RESTORE THE PROGRAM MASK  *\n.*                TO ITS STATUS UPON ENTRY TO THE ROUTINE.  THE       *\n.*                VALUE OF THE MASK IS OBTAINED FROM THE HIGH ORDER   *\n.*                BYTE OF REGISTER 14.  THE ASSUMPTION IS MADE THAT   *\n.*                STANDARD LINKAGE WAS USED TO INVOKE THE ROUTINE,    *\n.*                THAT IS, THAT ENTRY WAS MADE BY A  BALR  R14,R15.   *\n.*                IF THIS IS NOT TRUE, THE PROGRAM MASK WILL BE       *\n.*                RESTORED INCORRECTLY.  IF SPM=NO IS SPECIFIED, THE  *\n.*                PROGRAM MASK WILL NOT BE ALTERED.                   *\n.*                                                                    *\n.*                IF RE-ENTRANT CODE IS BEING GENERATED, A DROP R2    *\n.*                STATEMENT IS GENERATED, SO THE USER SHOULD NOT USE  *\n.*                REGISTER 2 AS A BASE REGISTER.                      *\n.*                                                                    *\n.* SYNTAX         NAME     $RTRN     RC=NUM1                          *\n.*                                      (R15)                         *\n.*                                   RENT=LEN                         *\n.*                                   SP=NUM2                          *\n.*                                   SPM=NO                           *\n.*                                   REST01=NO                        *\n.*                                                                    *\n.*                NAME   - A SYMBOLIC TAG ASSIGNED TO THE FIRST       *\n.*                         INSTRUCTION GENERATED.                     *\n.*                                                                    *\n.*                RC     - SPECIFIES THE RETURN CODE TO BE PLACED IN  *\n.*                         REGISTER 15.  A NUMBER MAY BE SPECIFIED,   *\n.*                         OR (R15) INDICATES THAT THE RETURN CODE    *\n.*                         HAS ALREADY BEEN PLACED IN REGISTER 15 BY  *\n.*                         THE USER.  THE DEFAULT RETURN CODE IS 0.   *\n.*                                                                    *\n.*                RENT   - INDICATES THAT THE WORK AREA OBTAINED BY   *\n.*                         $ENTER IS TO BE FREED.  LEN SPECIFIES THE  *\n.*                         LENGTH OF THE AREA.  THE ADDRESS IS        *\n.*                         OBTAINED FROM REGISTER 13.                 *\n.*                                                                    *\n.*                SP     - SPECIFIES THE SUBPOOL OF THE WORK AREA.    *\n.*                         IT MUST AGREE WITH THE SUBPOOL SPECIFIED   *\n.*                         IN $ENTER.  THE DEFAULT IS 1.              *\n.*                                                                    *\n.*                SPM    - SPM=NO SPECIFIES THAT THE PROGRAM MASK     *\n.*                         IS NOT TO BE ALTERED.                      *\n.*                                                                    *\n.*                REST01 - REST01=NO SPECIFIES THAT THE CONTENTS      *\n.*                         OF REGISTERS 0 AND 1 ARE NOT TO BE         *\n.*                         RESTORED.  THIS OPTION SHOULD BE           *\n.*                         SPECIFIED WHEN DATA IS TO BE PASSED        *\n.*                         BACK TO THE CALLING PROGRAM IN             *\n.*                         REGISTERS 0 AND 1.                         *\n.*                                                                    *\n.* ERRORS         NO ERROR MESSAGES ARE GENERATED                     *\n.*                                                                    *\n.* EXAMPLE        EX1      $RTRN                                      *\n.*                                                                    *\n.*                EX2      $RTRN  RC=4                                *\n.*                                                                    *\n.*                EX3      $RTRN  RC=(R15),RENT=DSECTLEN              *\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                NONE                                                *\n.*                                                                    *\n.* MACROS CALLED                                                      *\n.*                                                                    *\n.*                FREEMAIN                                            *\n.*                                                                    *\n.* UPDATE SUMMARY                                                     *\n.*                                                                    *\n.*      VERSION   DATE     CHANGE                                     *\n.*                                                                    *\n.*        002   04/29/76   REST01 KEYWORD ADDED                       *\n.*                                                                    *\n.**********************************************************************\n.*\n         AIF   ('&RENT' EQ '').REGULAR\n&NAME    LR    R1,R13                   LOAD STORAGE ADDRESS\n         BALR  R2,0                     ESTABLISH BASE REG\n         USING *,R2                     DEFINE BASE REGISTER\n         L     R3,4(R13)                SAVE OLD SAVEAREA ADDR\n         LR    R4,R15                   SAVE RETURN CODE\n.FREE    MNOTE *,' FREEMAIN R,LV=&RENT,A=(1),SP=&SP'\n         FREEMAIN RU,LV=&RENT,A=(1),SP=&SP FREE STORAGE\n* END FREEMAIN - $RTRN\n         AIF   ('&RC' NE '(R15)').RESSAV\n         LR    R15,R4                   RESTORE RETURN CODE\n.RESSAV  LR    R13,R3                   RESTORE OLD SAVEAREA\n         DROP  R2\n         AGO   .COMMON\n.REGULAR ANOP\n&NAME    L     R13,4(R13)               RESTORE OLD SAVEAREA\n.COMMON  AIF   ('&RC' EQ '(R15)').RES14\n         LA    R15,&RC                  SET RETURN CODE\n.RES14   L     R14,12(R13)              RESTORE RETURN ADDRESS\n         AIF   ('&REST01' EQ 'NO').REST2\n         LM    R0,R12,20(R13)           RESTORE REGS 0 - 12\n         AGO   .SETFLAG\n.REST2   LM    R2,R12,28(R13)           RESTORE REGS 2 - 12\n.SETFLAG MVI   12(R13),X'FF'            SET RETURNED FLAG\n.*-------TEST FOR SPM RESET\n         AIF   ('&SPM' EQ 'NO').NOSPM\n         SPM   R14                      RESTORE PROGRAM MASK\n.NOSPM   BSM   0,R14                    RETURN  EHV FOR XA\n         PRINT ON,GEN\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@FILE829": {"ttr": 531, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04O\\x00\\x08\\x01\\x10\\x12o\\x01\\x10\\x12o\\x10\\x12\\x00\\r\\x00\\r\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf9@@@'", "ispf": {"version": "04.79", "flags": 0, "createdate": "2010-05-06T00:00:00", "modifydate": "2010-05-06T10:12:08", "lines": 13, "newlines": 13, "modlines": 0, "user": "CBT-479"}, "text": "//***FILE 829 is from Eugene Vogt and contains a program to fix     *   FILE 829\n//*           the comments in Assembler source code, to make it     *   FILE 829\n//*           pretty.  The program is called TIDYASM and it was     *   FILE 829\n//*           adapted from a program of the same name, that was     *   FILE 829\n//*           on CBT File 316, submitted by Jim Marshall.           *   FILE 829\n//*                                                                 *   FILE 829\n//*           Necessary assembly macros are included in this        *   FILE 829\n//*           file.  Be sure to linkedit with NORENT and NOREUS.    *   FILE 829\n//*                                                                 *   FILE 829\n//*           Please read the notes in member $$README.             *   FILE 829\n//*                                                                 *   FILE 829\n//*           email:  racfra2@bluewin.ch                            *   FILE 829\n//*                                                                 *   FILE 829\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SAMPJCL1": {"ttr": 533, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\"\\x01\\x10\\x12\\x1f\\x01\\x10\\x12_\\x17T\\x00\\x08\\x00\\x0e\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2010-05-01T00:00:00", "modifydate": "2010-05-05T17:54:22", "lines": 8, "newlines": 14, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBT JOB ,'SAM GOLOB',CLASS=B,\n//    MSGCLASS=X,NOTIFY=&SYSUID\n//*\n//TIDYIT  EXEC PGM=TIDYASM\n//STEPLIB   DD DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSPRINT  DD SYSOUT=*\n//SYSUT1    DD DISP=SHR,DSN=SBGOLOB.B.ASM(LLWA)\n//SYSUT2    DD DISP=SHR,DSN=SBGOLOB.B.ASMOUT(LLWA)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SAMPJCL2": {"ttr": 770, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00C\\x01\\x10\\x12_\\x01\\x10\\x12_\\x18)\\x00\\x0f\\x00\\x0f\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2010-05-05T00:00:00", "modifydate": "2010-05-05T18:29:43", "lines": 15, "newlines": 15, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBT JOB ,'SAM GOLOB',CLASS=B,\n//    MSGCLASS=X,NOTIFY=&SYSUID\n//*\n//TIDYPROC     PROC M=\n//TIDYASMC     EXEC PGM=TIDYASM\n//STEPLIB      DD   DSNAME=SYS1.W$$.LINKLIB,DISP=SHR\n//SYSPRINT     DD   SYSOUT=*\n//SYSUT1       DD   DISP=SHR,DSN=SBGOLOB.B.ASM(&M.)\n//SYSUT2       DD   DISP=SHR,DSN=SBGOLOB.B.ASMOUT(&M.)\n// PEND\n//TIDYPROC     EXEC TIDYPROC,M=SHOWZOS\n//TIDYPROC     EXEC TIDYPROC,M=SHOWMVS\n//TIDYPROC     EXEC TIDYPROC,M=UKEYCSA\n//TIDYPROC     EXEC TIDYPROC,M=EESCB\n//TIDYPROC     EXEC TIDYPROC,M=CINMX\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SAMPJCL3": {"ttr": 772, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00H\\x01\\x10\\x12\\x1f\\x01\\x10\\x12o\\t3\\x00\\x08\\x00\\x0e\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "2010-05-01T00:00:00", "modifydate": "2010-05-06T09:33:48", "lines": 8, "newlines": 14, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBT JOB ,'SAM GOLOB',CLASS=B,\n//    MSGCLASS=X,NOTIFY=&SYSUID\n//*\n//TIDYIT  EXEC PGM=TIDYASM,PARM='32,60'\n//STEPLIB   DD DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSPRINT  DD SYSOUT=*\n//SYSUT1    DD DISP=SHR,DSN=SBGOLOB.B.ASM(LLWA)\n//SYSUT2    DD DISP=SHR,DSN=SBGOLOB.B.ASMOUT(LLWA4)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SETLABEH": {"ttr": 774, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x10\\x12_\\x01\\x10\\x12_\\x104\\x00\\x04\\x00\\x04\\x00\\x00\\xd4\\xc1\\xc3\\xd9\\xd6@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2010-05-05T00:00:00", "modifydate": "2010-05-05T10:34:00", "lines": 4, "newlines": 4, "modlines": 0, "user": "MACRO"}, "text": "         MACRO\n&NAME    SETLABEH\n&NAME    DS    0H\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TIDYASM": {"ttr": 776, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00\\x11\\x01\\x10\\x12O\\x01\\x10\\x12_\\x12V\\x03A\\x03U\\x00\\x00\\xc5`\\xe5\\xd6\\xc7\\xe3@@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "2010-05-04T00:00:00", "modifydate": "2010-05-05T12:56:11", "lines": 833, "newlines": 853, "modlines": 0, "user": "E-VOGT"}, "text": "         PRINT ON,GEN\n*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---\n*\n*        MODIFIED BY EUGENE VOGT 2002/2010\n*\n*\n*        OPEN SHARE CODE WRITTEN BY JIM MARSHALL  1982\n*\n*\n*        FUNCTION:  REALIGN ASM CODE\n*\n*\n*\n*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---\nDEB$TIDY TITLE 'CLEANUP ASM CODE             '\nDEB$TIDY $ENTER3 BASE=(R11,R12),RENT=ENTEREND,SAVE=ENTERSTR\nDEB$TIDY AMODE  31\nDEB$TIDY RMODE  24\n*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---\nCC       EQU   X'80'\nEF       EQU   X'40'\nMAC      EQU   X'20'\nAIF      EQU   X'10'\nSI       EQU   X'08'\nLC       EQU   X'04'\nGC       EQU   X'02'\nCR       EQU   X'01'\nALLBITS  EQU   X'FF'\nHIT      EQU   7\nNOHIT    EQU   8\n*\n*   REGISTER ASSIGNMENTS\n*     0 - WORK\n*     1 - LENGTH OF TEXT - 1\n*     2 - WORK\n*     3 - WORK\n*     4 - WORK\n*     5 - POINTER TO INPUT AREA\n*     6 - POINTER TO DELIMITING BLANK AFTER TEXT\n*     7 - POINTER TO TEXT IN INPUT AREA\n*     8 - POINTER TO OUTPUT AREA\n*     9 - POINTER TO DESTNATION OF TEXT IN OUTPUT AREA\n*    10 - INTERNAL LINKAGE REGISTER\n*    11 - BASE REGISTER 1\n*    12 - BASE REGISTER 2\n*    13 - SAVE AREA POINTER\n*    14 - WORK\n*    15 - WORK\n*\n         EJECT\n         PRINT GEN\n***********************************************************************\n*                                                                     *\n*        PROCESS PARM INFORMATION IF ANY.  IF CMS DEFAULT TO          *\n*        COMMENTS START = COL 36 (PARM1) AND COMMENTS STOP =          *\n*        COL 71 (PARM2).                                              *\n*                                                                     *\n***********************************************************************\nBEGIN    LA    R5,36               SET DEFAULT COMM START\n         LA    R7,71               SET DEFAULT COMM STOP\nPARMOS   L     R1,0(R1)            GET PARM POINTER\n         LH    R2,0(R1)            GET PARM SIZE\n         LR    R0,R2               COPY TO HOLDING REG\nPARMSAME LTR   R2,R2               ANY PARM GIVEN?\n         BZ    NOPARM              NO, DEFAULT\n         LA    R3,2(R1)            POINT TO DATA PORTION OF PARM\n         LR    R4,R3               SAVE FOR MOVE\nPARM1CHK CLI   0(R3),C','          END OF PARM 1\n         BE    PARM1END            YES, CHECK IF NAY GIVEN\n         LA    R3,1(R3)            BUMP TO NEXT POS'N\n         BCT   R2,PARM1CHK         CHECK NEXT CHARACTER\nPARM1END LR    R5,R0               GET ORIGINAL SIZE\n         SR    R5,R2               GET NUMBER SCANNED\n         CH    R5,=H'2'            WITHIN LIMITS?\n         BH    PARMERR             NO, ERROR\n         LTR   R5,R5               CHECK IF 1ST PARM GIVEN\n         BZ    PARM2CHK            NONE, SKIP IT (DEFAULT)\n         LA    R14,PARMWORK+8      SET DATA POINTER FOR EXECUTE\n         SR    R14,R5              DECREMENT BY NUMBER TO MOVE\n         BCTR  R5,R0               DECREMENT FOR EXECUTE\n         EX    R5,PARMMOVE         MOVE TO WORK AREA\n         XC    WORK,WORK           CLEAR WORK AREA\n         MVZ   WORK,PARMWORK       MOVE FOR ZONE CHECK\n         CLC   WORK,ZEROS          WAS PARM NUMERIC?\n         BNE   PARMERR             NO, ERROR\n         PACK  WORK(8),PARMWORK(8)  MAKE DECIMAL FIRST\n         CVB   R5,WORK             CONVERT TO HEX\nPARM2CHK LA    R3,1(R3)            BUMP TO NEXT CHAR\n         LR    R4,R3               SAVE FOR MOVE\n         BCTR  R2,R0               DECREMENT PARM SIZE\n         MVC   PARMWORK,ZEROS      CLEAR WORK AREA\n         LA    R14,PARMWORK+8      SET DATA POINTER FOR MOVE\n         SR    R14,R2              DECREMENT BY NUMBER LEFT TO MOVE\n         BCTR  R2,R0               DECREMENT FY NUMBER LEFT\n         EX    R2,PARMMOVE         MOVE TO WORK AREA\n         XC    WORK,WORK           CLEAR WORK AREA\n         MVZ   WORK,PARMWORK       MOVE ZONES FOR CHECK\n         CLC   WORK,ZEROS          ALL NUMERICS?\n         BNE   PARMERR             NO, ERROR\n         PACK  WORK(8),PARMWORK(8)  MAKE DECIMAL FIRST\n         CVB   R7,WORK             MAKE HEX\nNOPARM   ST    R5,COMMSTRT         SET COMMENT START FIELD\n         ST    R7,LIMIT            SET COMMENT STOP FIELD\n         CH    R5,=H'60'           WITHIN LIMITS?\n         BH    PARMERR             NO, ERROR\n         CH    R7,=H'71'           WITHIN LIMIT?\n         BH    PARMERR             NO, ERROR TOO\n         SR    R7,R5               GET COMMENTS SIZE\n         STH   R7,LIMITSZ          SAVE FOR FUTURE REF\n         CH    R7,=H'16'           WITHIN LIMITS?\n         BH    PARMEND             YES, CONTINUE\nPARMERR  WTO   'DEB$TIDY - INVALID PARM SUPPLIED'\n         LA    R15,36              SET RETCODE\n         B     EXIT                RETURN TO CALLER\n         EJECT\n***********************************************************************\n*                                                                     *\n*        INITIALIZE TRANSLATE TABLES AND OPEN FILES.  THEN SET UP     *\n*        READ AHEAD RECORD.                                           *\n*                                                                     *\n***********************************************************************\nPARMEND  DS    0H\n         MVI   QBTABLE,X'00'\n         MVC   QBTABLE+1(L'QBTABLE),QBTABLE\n         OC    QBTABLE,QTABLE      INITIALIZE QUOTE BLANK\n         OC    QBTABLE,BTABLE      TABLE WITH QUOTES AND BLANKS\n         MVI   RECORD80,C' '\n         MVC   RECORD80+1(L'RECORD80),RECORD80\n         MVI   RECORD99,C'9'\n         MVC   RECORD99+1(L'RECORD99),RECORD99\nPRINTSET EQU   *                   SET UP TO PRINT OUTPUT\n         OI    FLG2,X'01'          FORCE HEADING ON FIRST CARD\n         OPEN  (PRINT,OUTPUT)\nOPENIO   OPEN  (INPUT,,OUTPUT,OUTPUT)\n         GET   INPUT,RECORD80      GET FIRST CARD OF INPUT\n         B     PASTGET             SKIP BUFFER SHIFT\nGET      MVC   RECORD80(80),RECORD99 MAKE LOOK AHEAD RECORD80\n         NI    FLG,ALLBITS-GC      RESET COMMENT CONTINUATION\n         TM    FLG,EF              END OF FILE ON PREVIOUS\n         BO    EODAD               YES, NO MORE READS\n         MVC   RECORD99+71(8),NINES MOVE HIGH VALUE TO NEW SEQ\nPASTGET  GET   INPUT,RECORD99      READ LOOK AHEAD CARD\nONCEMORE LA    R5,RECORD80         SET PERM. INPUT REC. POINTER\n         LR    R7,R5               COPY FOR WORKING REGISTER\n         LA    R8,PAREA            OUTPUT AREA\n         EJECT\n***********************************************************************\n*                                                                     *\n*        CHECK TYPE OF RECORD JUST READ.  IF COMMENTS OR OTHER        *\n*        NON-PROCESS CARD, SKIP IT.                                   *\n*                                                                     *\n***********************************************************************\n         CLI   0(R7),C'*'          COMMENTS CARD\n         BE    CPUTA               YES, OUTPUT AS IS\n         CLC   0(2,R7),=CL2'.*'    MACRO COMMENTS\n         BE    CPUT                YES, OUTPUT AS IS\n         TM    FLG,CC              PREVIOUS IND. CONT?\n         BZ    SKIPCONT            NO, SKIP CONT. INIT.\n         LA    R6,1(R7)            SET BEGINNING OF CARD\n         LR    R7,R6               COPY TO WORKING SET\n         B     CONTINUE\nSKIPCONT SETLABEH\n         CLI   0(R7),C' '          IS LABEL PRESENT\n         BE    ORCHECK             NO - FIND OPERATOR\n         CLI   0(R7),C'*'          COMMENT\n         BE    CPUT                YES - OUTPUT CARD AS IS\n         CLI   0(R7),C'/'          JCL\n         BNE   LDELIM              NO - ISOLATE LABEL\n         CLI   1(R7),C'*'          /*\n         BNE   CPUT                NO - OUTPUT AS IS\n         OI    FLG2,X'01'          EJECT AFTER PRINTING\n         B     CPUT                OUTPUT CARD\nCPUTA    SETLABEH\n         CLI   71(R5),C' '         CONTINUATION IN COMMENTS\n         BE    CPUT                NO, BRANCH AROUND\n         MVC   85(20,R8),ERR6MSG   INFORM USER\nCPUT     SETLABEH                  OUTPUT CARD UNCHANED\n         MVC   0(80,R8),0(R5)      MOVE COMMENT OR JCL\n         B     XCARD1              OUTPUT IT\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*        FIND AND PROCESS LABEL IF ONE IS PRESENT.                    *\n*                                                                     *\n***********************************************************************\nLDELIM   SETLABEH                  DELIMIT LABEL\n         TRT   0(09,R7),BTABLE     LOOK FOR BLANK (WAS 9 OLD ASM EHV)\n         BC    NOHIT,ERR1          LABEL EEROR\n         LR    R0,R1               SAVE ADDRESS\n         SR    R1,R7               FIND L'LABEL\n         BCTR  R1,R0               -1\n         EX    R1,LMOVE            MOVE TO OUTPUT\n         LR    R7,R0               A(FIRST BLANK)\n         EJECT\n***********************************************************************\n*                                                                     *\n*        FIND AND PROCESS OPERATOR.  IF A SPECIAL OPERATOR IS         *\n*        FOUND (MACRO TYPES)SET APPROPRIATE INDICATOR FOR COMMENT     *\n*        GENERATION ROUTINES.                                         *\n*                                                                     *\n***********************************************************************\nORCHECK  SETLABEH                  ISOLATE OPERATOR\n         LA    R1,70(R5)           POINT TO COL 71\n         SR    R1,R7               NUMBER OF COLS AFTER LABEL\n         EX    R1,FINDNB           FIND OPERATOR\n         BC    NOHIT,ERR2\n         LR    R7,R1               A(OPERATOR)\n         TRT   0(9,R7),BTABLE      FIND OPERATOR END\n         BC    NOHIT,ERR3\n         LR    R6,R1               END OF OPERATOR\n         SR    R1,R7               L'OPERATOR\n         BCTR  R1,R0               -1\n         EX    R1,ORMOVE           MOVE OPERATOR\n         LR    R0,R1               SAVE LENGTH OF OPERAND\n         LA    R1,1(R1)            UPDATE FOR BLANK\n         LA    R14,TSTBL           GET POINTER TO TABLE ORIGIN\n         LA    R15,R2              NUMBER OF THREE BYTE ENTRIES\nTRY3     EX    R1,MACOMP           COMPARE OPERATORS\n         BE    MACMATCH            BRANCH IF FOUND\n         LA    R14,6(R14)          UPDATE TO NEXT IN LIST\n         BCT   R15,TRY3            GO CHECK NEXT\n         LA    R15,R8              NUMBER OF FOUR BYTE ENTRIES\nTRY4     EX    R1,MACOMP           COMPARE OPERATORS\n         BE    MACMATCH            BRANCH IF FOUND\n         LA    R14,6(R14)          UPDATE TO NEXT IN LIST\n         BCT   R15,TRY4            GO CHECK NEXT\n         LA    R15,R10             NUMBER OF FIVE BYTE ENTRIES\nTRY5     EX    R1,MACOMP           COMPARE OPERATORS\n         BE    MACMATCH            BRANCH IF FOUND\n         LA    R14,6(R14)          UPDATE TO NEXT IN LIST\n         BCT   R15,TRY5            GO CHECK NEXT IN LIST\n         NI    FLG,ALLBITS-SI-AIF  RESET MAC CONTINUE FLAG\n         B     MACEND              AROUND FOLLOWING TESTS\nMACMATCH OI    FLG,SI              SET MACRO COMMENT FLAG\n         CLC   0(6,R7),MACRO       IS THIS START OF MACRO\n         BNE   TST2                NO, TO NEXT TEST\n         OI    FLG,MAC             SET MACRO FLAG\n         B     MACEND              SKIP FOLLOWING TESTS\nTST2     CLC   0(5,R7),MEND        IS THIS END OF MACRO\n         BNE   TST3                NO, TO NEXT TEST\n         NI    FLG,ALLBITS-SI-AIF-MAC  RESET MACRO FLAGS\n         B     MACEND              SKIP NEXT TESTS\nTST3     CLC   0(4,R7),TSTBL       CHECK FOR 'AIF' OPERATOR\n         BNE   MACEND              NO, OTHER OPERAND\n         OI    FLG,AIF             SET 'AIF' FLAG\n         EJECT\n***********************************************************************\n*                                                                     *\n*        CHACK FOR SPECIAL ASSEMBLER CONTROL STATEMENTS, AND IF       *\n*        FOUND, BRANCH TO SET SPECIAL INDICATOR IN OUTPUT.            *\n*                                                                     *\n***********************************************************************\nMACEND   SETLABEH\n         CLC   0(6,R7),EJECT        CONTROL OPERATOR\n         BE    ERR5                YES, AS IS\n         CLC   0(6,R7),SPACE        CONTROL OPERATOR\n         BE    ERR5                YES, AS IS\n         LR    R1,R0               RESTORE OPERATOR LENGTH\n         LR    R7,R6               POINT TO END OF OPERATOR\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        DETERMINE BEGINNING OF OPERAND ADDRESS BASED ON SIZE OF      *\n*        OPERATOR.                                                    *\n*                                                                     *\n***********************************************************************\n         C     R1,=F'4'            5-BYTE OPERATOR OR LESS\n         BH    *+12                NO\nCONTINUE LA    R9,15(R8)           A(DESTNATION)\n         B     ODLOC               BRANCH TO CONTINUE\n         C     R1,=F'6'            7-BYTE OPERATOR\n         BH    *+12                NO\n         LA    R9,17(R8)           A(DESTNATION)\n         B     ODLOC               BRANCH TO CONTINUE\n         LA    R9,19(R8)           A(DSTINATION)\nODLOC    SETLABEH                  FIND OPERAND\n         LA    R1,70(R5)           A(COL 71)\n         SR    R1,R6               NUMBER OF COLS LEFT\n         BM    XCARD               COPY CARD IF MINUS\n         EX    R1,FINDNB           FIND OPERAND\n         BC    NOHIT,XCARD         IF NONE OUTPUT CARD\n         LR    R4,R1               COPY START OP OPERAND\n         LR    R7,R1               COPY START OF OPERAND\n         EJECT\n***********************************************************************\n*                                                                     *\n*   PROCESS OPERAND INCLUDING QUOTED STRINGS AND CONTINUATIONS        *\n*   IF AN 'AIF' IS BEING PROCESSED, COPY ALL OF OPERAND TO PERIOD     *\n*   R1 = A(OPERAND)                                                   *\n*   R4 = A(OPERAND)                                                   *\n*   R5 = A(INPUT CARD)                                                *\n*   R7 = A(OPERAND)                                                   *\n*   R8 = A(OUTPUT CARD)                                               *\n*   R9 = A(OUTPUT OPERAND DESTINATION)                                *\n*   THE OPERAND SHOULD OCCUR BEFORE COL 25 - OTHERWISE IT IS          *\n*   CONSIDERED COMMENTS.                                              *\n*                                                                     *\n***********************************************************************\n         LA    R3,24(R5)           COLUMN 25\n         CR    R1,R3               IS OPERAND BEFORE 25\n         BNL   COMLOC0             LO, IT IS NOW A COMMENT\nODLOC2   TM    FLG,AIF             SPECIAL 'AIF' OPERATOR\n         BZ    ODLOC3              NO, BRANCH AROUND\n         LA    R3,70(R5)           A(COL 72-1)\n         SR    R3,R1               NUMBER OF COLUMNS TO SCAN\n         EX    R3,AIFCHK           SCAN FOR PERIOD\n         BZ    XODMOVE3            NONE FOUND, COPY ALL OF CARD\n         NI    FLG,ALLBITS-AIF     RESET AIF FLAG\n         LR    R7,R1               SET NEW BEGINNING FOR SCAN\nODLOC3   LA    R3,70(R5)           A(COL 72-1)\n         SR    R3,R1               NUMBER OF COLS TO SCAN\n         BM    XODMOVE3            BRANCH IF NONE TO SCAN\n         EX    R3,QBCHECK          FIND A BLANK OR QUOTE\n         BZ    XODMOVE3            NEITHER FOUND, COPY CARD\n         CLI   0(R1),X'40'         BLANK OR QUOTE FOUND\n         BE    XODMOVE4            BRANCH IF BLANK\n         CLI   1(R1),X'40'         CHECK FOR \"' \" TYPE USAGE        SEC\n         BE    XODMOVE2            YES  - NO MORE CHECKING          SEC\n*                                                                   SEC\n*       NOW CHECK FOR ATTRIBUTE USAGE                               SEC\n*                                                                   SEC\n         LR    R7,R1               GET START OF QUOTE               SEC\n         BCTR  R7,0                REDUCE BY 1 FOR CHECK            SEC\n         CLC   0(2,R7),=C'L'''     IS IT ONLY A LENGTH OPERAND      SEC\n         BE    XODMOVE3            YES - DO NOT SET LITERAL FLAG    SEC\n         CLC   0(2,R7),=C'K'''     IS IT ONLY A COUNT OPERAND       SEC\n         BE    XODMOVE3            YES - DO NOT SET LITERAL FLAG    SEC\n         CLC   0(2,R7),=C'I'''     IS IT ONLY A INTERGER OPERAND    SEC\n         BE    XODMOVE3            YES - DO NOT SET LITERAL FLAG    SEC\n         CLC   0(2,R7),=C'N'''     IS IT ONLY A NUMBER OPERAND      SEC\n         BE    XODMOVE3            YES - DO NOT SET LITERAL FLAG    SEC\n         CLC   0(2,R7),=C'S'''     IS IT ONLY A SCALING OPERAND     SEC\n         BE    XODMOVE3            YES - DO NOT SET LITERAL FLAG    SEC\n         CLC   0(2,R7),=C'T'''     IS IT ONLY A TYPE OPERAND        SEC\n         BE    XODMOVE3            YES - DO NOT SET LITERAL FLAG    SEC\nXODMOVE2 SETLABEH                  EHV 2010-04-20\n         B     XODMOVE3            EHV 2010-04-20\n         XI    FLG,LC              FLIP LITERAL FLG\nLITCONT  LA    R1,1(R1)            BUMP TO NEXT COLUMN\n         LR    R7,R1               SET NEW START FOR TRT\n         B     ODLOC3              BACK TO CONTINUE SCAN\nXODMOVE3 LA    R1,71(R5)           SET ENTIRE CARD IF NO HIT\n         B     XODMOVE5            SKIP LITERAL TEST\nXODMOVE4 TM    FLG,LC              LITERAL STILL UNFINISHED?\n         BO    LITCONT             YES, BACK TO CONTINUE SCAN\nXODMOVE5 LR    R7,R4               RESTORE A(OPERAND)\n         EJECT\n***********************************************************************\n*                                                                     *\n*   R1 POINTS TO THE DELIMITER OF THE OPERAND, DETERMINE IF IT WILL   *\n*   FIT IN THE OUTPUT RECORD.                                         *\n*   R7 -A(OPERAND)                                                   *\n*                                                                     *\n***********************************************************************\n         SR    R4,R1\n         LCR   R4,R4\n         LA    R2,71(,R8)          A(COL 72)\n         SR    R2,R9               NUMBER OF BLANKS AFTER OP\n         BNZ   MOVECHK             BRANCH IF 1 OR MORE\n         DC    H'0'                PGM CHECK ************\nMOVECHK  SETLABEH\n         CR    R4,R2               WILL OPERAND FIT\n         BH    ERR4                NO - OUTPUT CARD\n         BCTR  R4,R0               -1\n         EX    R4,ODMOVE           MOVE OPERAND TO OUTPUT\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PROCESS COMMENTS FIELDS, AND GENERATE NEW COMMENTS CARD      *\n*        IF REQUIRED TO CONTINUE COMMENTS DATA.                       *\n*                                                                     *\n***********************************************************************\n         LA    R9,1(R4,R9)         GET END OF OUTPUT\n         L     R2,COMMSTRT         GET STARTING COMMENTS COL\n         BCTR  R2,R0               DECREMENT FOR EXECUTE\n         BCTR  R2,R0               ONCE MORE FOR FUDGE\n         AR    R2,R8               2 = OUTPUT COL COMM START\n         CR    R9,R2               END BEFORE COMMENT COL?\n         BL    SETCOL              BRANCH YES, USE DEFINED VAL\n         LA    R9,2(,R9)           NO, BUMP TO USE NEXT\nRESUME   DS    0H\n         LR    R7,R1               10 = INPUT END OF OP\n         LA    R4,70(,R5)          4 = INPUT COL 71\n         SR    R4,R1               4 = INPUT NUMBER LEFT TO MOVE\n         BM    XCARD               BRANCH IF NONE LEFT\n         EX    R4,FINDNB           FIND INPUT BEGIN'G OF COMMENTS\n         BZ    XCARD               BRANCH IF NO COMMENTS\nMOVECOM  DS    0H\n         LR    R7,R1               10 = INPUT BEGIN'G OF COMMENTS\n         LA    R2,70(,R5)          2 = INPUT COL 71\nCHK2     CR    R7,R2               START = STOP COMMENTS\n         BNL   SETSIZ              YES, DEFAULT\n         CLI   0(2),C' '           BLANK CHARACTER\n         BNE   SETSIZ              NO, SET SIZE OF INPUT\n         BCT   R2,CHK2             GO CHECK PREVIOUS CHAR\nSETSIZ   SR    R2,R1               2 = NUMB OF CHARS TO MOVE\n         BNM   CHKSUPCD            INSURE RESULT IS POSITIVE\n         DC    H'0'                PGM CHECK IF ERROR\nCHKSUPCD EQU   *                   CHECK FOR SUPPORT CODES\n         LA    R3,0(R2,R7)         COPY END OF COMMENTS ADDR\n         S     R3,=F'8'            DECREMENT BY EIGHT\n         CLI   1(R3),C'@'          SUPPORT CODE EXIST?\n         BNE   MOVEMORE            NO, ALL COMMENTS\n         S     R2,=F'9'            DECREMENT BY NINE FOR MOVE\n         MVC   SUPCODE(8),1(R3)    SAVE SUPPORT CODE FOR LATER\n         LTR   R2,R2               ANYTHING TO MOVE NOW?\n         BNP   XCARD               NO, WRITE OUT RECORD\nMOVEMORE SETLABEH                  LABEL\n         L     R4,LIMIT            GET END OF COMMENTS OFFSET\n         BCTR  R4,R0               DECREMENT FOR EXECUTE\n         AR    R4,R8               4 = OUTPUT COL COMM LIMIT\n         SR    R4,R9               4 = OUTPUT COLUMNS LEFT\n         NI    FLG,ALLBITS-CR      RESET COMMENT REQ\n         LA    R3,1(R2)            SET INPUT SIZE AS DEFAULT\n         CR    R4,R2               CHECK IF INPUT FITS OUTPUT\n         BNL   SET                 BRANCH IF NO\n         LR    R3,R4               SET MAX OUTPUT SIZE\n         LA    R15,0(4,R7)         GET INPUT DATA PLUS OFFSET\nCHK      CLI   0(R15),C' '         LOOK FOR LAST BLANK\n         BE    SET                 FOUND LAST BLANK\n         BCTR  R15,R0              DECREMENT TO PREVIOUS\n         BCT   R3,CHK              DECR. FOR MOVE AND BRANCH\n         CH    R4,LIMITSZ          MAX OUTPUT LENGTH\n         BL    AROUND              TRY NEXT CARD IF LOW\n         B     ERR6                ELSE ERROR ASSUMED\n         EJECT\n***********************************************************************\n*                                                                     *\n*        MOVE COMMENTS TO OUTPUT CARD, AND DETERMINE IF ANOTHER       *\n*        COMMENTS CARD WILL BE NEEDED TO CONTINUE COMMENTS.           *\n*                                                                     *\n***********************************************************************\nSET      SETLABEH\n         EX    R3,ODMOVE           MOVE DATA TO OUTPUT\n         LA    R3,1(R3)            BUMP FOR EXECUTE\nAROUND   SR    R2,R3               DECREMENT AMOUNT MOVED\n         LTR   R2,R2               ANY LEFT TO MOVE\n         BNP   XCARD               NO, GO GENERATE RECORD\n         CLI   71(R5),C' '         CONTINUATION CARD\n         BNE   ERR6                YES, CANNOT CONT. COMMENTS\n         LA    R9,35(,R8)          SET NEW OUTPUT LOCATION\n         LA    R7,0(R3,R7)         UPDATE INPUT RECORD POINTER\n         OI    FLG,CR              SET COMMENT CONT REQUEST\n         B     XCARD               GO PROCESS THIS CARD\nSETCOL   L     R9,COMMSTRT         GET START OF COMMENTS COL\n         BCTR  R9,R0               DECREMENT FOR EXECUTE\n         AR    R9,R8               9 = OUTPUT COL COMM START\n         B     RESUME              BRANCH TO CONTINUE\nCOMLOC0  L     R9,COMMSTRT         GET START OF COMMENTS COL\n         BCTR  R9,R0               DECREMENT FOR EXECUTE\n         AR    R9,R8               9 = OUTPUT COL COMM START\n         B     MOVECOM             BRANCH TO CONTINUE\nXCARD    SETLABEH\n         CLI   0(R8),C'*'          COMMENTS CARD?\n         BE    SEQNEW              YES, BRANCH TO TEST MORE\n         CLC   0(2,R8),=CL2'.*'    MACRO COMMENTS\n         BNE   SEQOLD              NO, USE OLD SEQUENCE\nSEQNEW   TM    FLG,GC              IS THIS COMMENT GENERATED\n         BZ    SEQOLD              NO, USE OLD SEQ NUMBER\n         MVI   80(R8),C'*'         FLAG ADDED CARD\n         SR    R1,R1               CLEAR FOR COUNT\n         LA    R15,RECORD80+79     FIND END OF CARD\nCOUNT    TM    0(R15),X'F0'        FIND NUMERICS\n         BNO   SETNUMB             NON NUMERICS, SET COUNT\n         LA    R1,1(R1)            UPDATE COUNT\n         CH    R1,=H'8'            CHECK LIMIT\n         BNL   SETNUMB             BRANCH IF ALL 8 NUMBERICS\n         BCT   R15,COUNT           GO CHECK NEXT\n         B     ERR7                ERROR IF FALL THROUGH\n         EJECT\n***********************************************************************\n*                                                                     *\n*        DETERMINE IF POSSIBLE WHAT THE NEXT SEQUENCE NUMBER SHOULD   *\n*        BE.  IF ABLE TO, INCREASE THE OLD SEQUENCE NUMBER BY 1.      *\n*                                                                     *\n***********************************************************************\nSETNUMB  LTR   R10,R1              COPY TO COUNT REG\n         BZ    ERR7                BRANCH IF NO NUMERICS\n         LR    R0,R10              SAVE COUNT OF NUMBS\n         BCTR  R10,R0              DECREMENT FOR RUBBER BANDS\n         MVC   SEQC(8),ZEROS       CLEAR FOR CONVERT\n         MVC   SEQN(8),ZEROS       CLEAR FOR CONVERT\n         LA    R15,RECORD80+80     GET POINTER TO END OF CARD\n         LA    R1,SEQC+8           FIND END OF SEQ\n         SR    R15,R0              BACKUP TO START OF NUMERICS\n         SR    R1,R0               DITTO FOR NEXT\n         EX    R10,MOVEC           MOVE RECORD80 SEQ TO WORK\n         LA    R15,RECORD99+80     GET END OF NEXT\n         LA    R1,SEQN+8           GET END OF WORK AREA\n         SR    R15,R0              TO START OF NUMBS\n         SR    R1,R0               DITTO\n         EX    R10,MOVEC           MOVE NEXT SEQ TO WORK\n         PACK  WORK(8),SEQC(R5)    PACK FOR CONVERT\n         CVB   R15,WORK            MAKE SEQ NUMB BINARY\n         PACK  WORK(8),SEQN(R5)    PACK FOR CONVERT\n         CVB   R1,WORK             MAKE SEQ NUMB BINARY\n         SR    R1,R15              GET SEQ NUMB DIFFERENCE\n         BNP   ERR7                INSURE REMAINDER EXISTS\n         C     R1,=F'1'            CAN NEW SEQUENCE BE ADDED?\n         BNH   ERR7                CANT ADD, ERROR\n         A     R15,=F'1'           UPDATE BY ONE HUNDRED\n         MVC   72(8,R8),RECORD80+72 SET UP NON NUMERICS\n         XC    SEQC(8),SEQC        CLEAR FOR UNPACK\n         CVD   R15,WORK            MAKE DECIMAL AGAIN\n         UNPK  SEQC(8),WORK+3(5)   MAKE PRINTABLE\n         OI    SEQC+7,C'0'         MAKE LAST PRINT TOO\n         LA    R15,SEQC+8          FIND END OF NEW SEQ\n         SR    R15,R0              WHERE TO START MOVE\n         LA    R1,80(R8)           END OF OUTPUT CARD\n         SR    R1,R0               DECREMENT TO NUMERICS START\n         EX    R10,MOVEC           MOVE UPDATED SEQ NUMB\n         MVC   RECORD80+72(8),72(R8) UPDATE RECORD80 SEQ ALSO\n         B     NOCONT              SKIP OLD SEQUENCE RTN\n         EJECT\n***********************************************************************\n*                                                                     *\n*        OUTPUT CARD TO THE NEW FILE, AND DETERMINE IF ANOTHER        *\n*        COMMENTS CARD MUST BE GENERATED.  IF SO, RETURN TO           *\n*        COMMENTS ROUTINE TO CONTINUE THEM.                           *\n*                                                                     *\n***********************************************************************\nSEQOLD   MVC   71(9,R8),71(R5)     MOVE CONTIN. AND COMMENTS\n         CLI   SUPCODE,C'@'        ANY SUPPORT CODE FOR THIS REC\n         BNE   XCARD1              NO, SKIP SUPCODE\n         MVC   63(8,R8),SUPCODE    UPDATE SUPCODE IN REC\nXCARD1   SETLABEH\n         NI    FLG,ALLBITS-CC      RESET CONTINUATION FLAG\n         CLI   71(R5),C' '         CONTINUATION CARD\n         BE    TSTLIT2             NO, GO CHECK LITERAL SW\n         OI    FLG,CC              SET CONTINUATION FLAG\n         B     NOCONT              AROUND LITERAL TESTS\nTSTLIT2  SETLABEH\n         TM    FLG,LC              LITERAL CONTINUATION ON\n         BO    ERR5                YES, ERR MESSAGE\nNOCONT   SETLABEH                  LABEL\n         PUT   OUTPUT,0(R8)        WRITE NEW CARD\nXCARD15  SETLABEH\n         BAL   R10,PRINTIT         PRINT OUTPUT IF DESIRES\nXCARD2   MVI   0(R8),C' '\n         MVC   1(125,R8),0(R8)     CLEAR OUTPUT\n         MVI   SUPCODE,0           IN-VALIDATE SUPPORT CODE\n         TM    FLG,CR              COMMENT CONT. REQ'D?\n         BZ    GET                 NO, BRANCH TO GET NEXT\n         OI    FLG,GC              SET COMMENT CONT. ACTIVE\n         MVI   0(R8),C'*'          SET COMMENT CHARACTER\n         TM    FLG,SI              SPECIAL OPERATOR\n         BZ    MOVEMORE            NO, NORMAL COMMENTS\n         TM    FLG,MAC             WITHIN A MACRO\n         BZ    MOVEMORE            NO, NORMAL COMMENTS\n         MVC   0(2,R8),=C'.*'      MOVE MACRO COMMENTS DATA\n         B     MOVEMORE            GO GET MORE COMMENTS\n         EJECT\n***********************************************************************\n*                                                                     *\n*        EXECUTED (RUBBER BAND) INSTRUCTIONS AND END OF INPUT ROUTINE *\n*                                                                     *\n***********************************************************************\nLMOVE    MVC   0(0,R8),0(R7)       MOVE LABEL TO OUTPUT\nORMOVE   MVC   9(0,R8),0(R7)       MOVE OPERATOR\nFINDB    TRT   0(0,R7),BTABLE      FIND A BLANK\nFINDNB   TRT   0(0,R7),NBTABLE     FIND A NON-BLANK\nLITCHECK TRT   0(0,R7),QTABLE      FIND A QUOTE\nQBCHECK  TRT   0(0,R7),QBTABLE     LOOK FOR QUOTE OR BLANK\nAIFCHK   TRT   0(0,R7),PTABLE      LOOK FOR PERIOD (AIF)\nODMOVE   MVC   0(0,R9),0(R7)       MOVE OPERAND\nCOMMOVE  MVC   0(0,R9),0(R7)       MOVE COMMENT\nSHIFTL1  MVC   0(0,R7),1(R7)       MOVE TEXT OVER 2ND QUOTE\nMACOMP   CLC   0(0,R7),0(R14)      COMPARE FOR MACRO OPERATORS\nMVESPACE PACK  WORK,15(0,R8)       MOVE SPACE VALUE TO WORK\nCLEARHED XC    0(0,R1),0(R1)       CLEAR HEADING\nMOVEC    MVC   0(1,R1),0(R15)      MOVE RECORD80 SEQ\nPARMMOVE MVC   0(1,R14),0(R4)      MOVE PARM TO WORK AREA\nEOD      EQU   *                   EOD ON INPUT\n         OI    FLG,EF              SET END OF FILE IND\n         B     ONCEMORE            DO FINAL CARD\n***********************************************************************\n*                                                                     *\n*        PRINT ROUTINE.  ALL RECORDS WHICH ARE OUTPUTED WILL ALSO     *\n*        BE PRINTED.  THE TITLE FOR THE HEADER IS TAKEN FROM THE      *\n*        INPUT SOURCE ASSEMBLY FILE IF ONE EXISTS.                    *\n*                                                                     *\n***********************************************************************\nPRINTIT  EQU   *                   PRINTS OUTPUT\n         CLI   0(R8),C'/'          JCL\n         BCR   8,R10               RETURN IF SO\n         CLC   9(6,R8),TITLE       IS THIS A TITLE CARD\n         BNE   PRINTIT1            NO - GO PRINT CARD\n         CLC   9(6,R8),PINKEL      IS THIS A TITLE CARD\n         BE    DO_TITLE\n         B     PRINTIT1            NO - GO PRINT CARD\nDO_TITLE DS    0H\n         CLI   15(R8),C''''        HAS TITLE BEEN ALIGNED\n         BNE   PRINTIT1            NO - PRINT WITHOUT TITLE\n         MVC   HEADING+1(55),16(R8)  MOVE TITLE TO HEADING\n         L     R0,=F'1'            QUOTE COUNT\n         LA    R7,HEADING+1        A(HEADING+1)\n         LA    R2,LINE_COUNT       MAXIMUMUM LENGTH - 1\nTQ0      EX    R2,LITCHECK         SEEK QUOTE\n         BC    HIT,TQ05\n         LA    R1,0(2,R7)          WHERE QUOTE SHOULD BE (COL 71)\n         B     TQ1\nTQ05     EQU   *\n         X     R0,=F'1'            ODD OR EVEN COUNT\n         CLI   1(R1),C''''         DOUBLE QUOTE\n         BE    TQ06                YES\n         LTR   R0,R0               EVEN NUMBER OF QUOTES\n         BZ    TQ1                 YES - EXIT\nTQ06     EQU   *\n         X     R0,=F'1'            ODD OR EVEN COUNT\n         LA    R1,1(R1)            POINT TO SECOND QUOTE\n         LR    R6,R1\n         SR    R1,R7               NUMBER THRU 1ST QUOTE\n         SR    R2,R1               NUMBER TO SCAN\n         LR    R7,R6\n         EX    R2,SHIFTL1          CLEAR SECOND QUOTE\n         BCT   R2,TQ0              KNOCK 1 OFF AND BRANCH BACK\nTQ1      MVI   0(R1),C' '          BLANK TRAILING QUOTE\n         OI    FLG2,X'01'          FORCE NEW PAGE EJECT\n         LA    R7,HEADING+54       A(LAST BYTE OF TITLE)\n         SR    R7,R1               FIND NUMBER OF BYTES AFTER\n         BNH   PRINTIT1            IF NONE\n         BCTR  R7,R0\n         EX    R7,CLEARHED         BLANK HEADING PAST TITLE\n         B     PRINTIT1\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PRINT OUTPUT LINE, AND CAUSE OVERFLOW IF END OF PAGE OR      *\n*        IF THE EJECT REQUEST BIT HAS BEEN SET.                       *\n*                                                                     *\n***********************************************************************\nPRINTIT1 EQU   *                   PRINT OUTPUT\n         L     R1,LINES            GET LINE COUNT\n         LTR   R1,R1               NEW PAGE REQUIRED?\n         BZ    NEWPAGE             YES, GENERATE SKIP\n         TM    FLG2,X'01'          EJECT REQUIRED?\n         BNO   NPRINT              NO, NORMAL PRINT\nNEWPAGE  NI    FLG2,ALLBITS-X'01'  RESET EJECT REQUEST\n         PUT   PRINT,HEADING\n         MVI   CCHAR,C'0'          DOUBLE SPACE AFTER PRINT\n         LA    R1,LINE_COUNT       SET NEW LINE COUNT\nNPRINT   EQU   *\n         BCTR  R1,R0               DECREMENT LINE COUNT\n         ST    R1,LINES            PUT IT BACK FOR LATER\n         PUT   PRINT,CCHAR\n         MVI   CCHAR,C' '\n         BR    R10                 RETURN\n         EJECT\nLINE_COUNT EQU 52\n***********************************************************************\n*                                                                     *\n*        ERROR MESSAGE GENERATION ROUTINE.  ALL ERROR MESSAGES        *\n*        THAT CAN BE GENERATED WILL BE MOVE WITHIN THIS ROUTINE.      *\n*                                                                     *\n***********************************************************************\nERR1     MVC   85(40,R8),ERR1MSG   MOVE MSG TO OUTPUT\n         B     ERRX\nERR2     MVC   85(40,R8),ERR2MSG   MOVE MSG TO OUTPUT\n         B     ERRX\nERR3     MVC   85(40,R8),ERR3MSG   MOVE MSG TO OUTPUT\n         B     ERRX\nERR4     MVC   85(40,R8),ERR4MSG   MOVE MSG TO OUTPUT\n         B     ERRX\nERR5     MVC   85(40,R8),ERR5MSG   MOVE MSG TO OUTPUT\n*        B     NOCONT              AVOID LOOP ONLY\n         B     CPUT                OUPUT CARD AS IS\nERR6     MVC   85(40,R8),ERR6MSG   MOVE MSG TO OUTPUT\n         B     ERRX                GO TO ERROR COMMON\nERR7     MVC   85(40,R8),ERR7MSG   MOVE MSG TO OUTPUT\n         MVC   79(1,R8),SEQSAVE    RESTORE SEQ NUMB\n         MVC   RECORD99+79(1),SEQSAVE+1 RESTORE SEQ NUMB\n         OI    RETCODE+3,X'04'     SET RETURN CODE\n         NI    FLG,ALLBITS-GC-CR   RESET COMMENTS CONTROL FLAGS\n         B     XCARD1              GENERATE NEW COMMENTS CARD\nERR8     MVC   85(40,R8),ERR8MSG   MOVE MSG TO OUTPUT\n         NI    FLG,ALLBITS-LC      RESET LITERAL CONTINUATION\n         B     NOCONT              GO OUTPUT CARD\nERRX     EQU   *\n         MVC   0(80,R8),0(R5)      MOVE ORIGINAL CARD TO OUTPUT\n         OI    RETCODE+3,X'08'     SET ERROR RETURN CODE\n         B     XCARD\n*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---\n         EJECT\nEODAD    CLOSE (INPUT,,OUTPUT,,PRINT)  CLOSE INPUT AND OUTPUTS\n         B     RETURN0\n*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---\nRETURN0  DS    0H\nEXIT     DS    0H\n         $RTRN RC=0,RENT=ENTEREND        GO BACK CALLER\n*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---\n         DC    CL40'LAST INSTRUCTION '\n         SPACE 1\n*        COPY  HEX2\n*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---\n*\n*        EQUATES\n*\n*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---\n         SPACE 1\n*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---\n*\n*        CONSTANTS\n*\n*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---\n         DS    0D\n*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---\nEJECT    DC    CL6'EJECT'\nSPACE    DC    CL6'SPACE'\nTITLE    DC    CL6'TITLE'\nPINKEL   DC    CL6'PINKEL'\n*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---\nERR1MSG  DC    CL40'DEB$TIDY-01 LABEL MAY BE TOO LONG'\nERR2MSG  DC    CL40'DEB$TIDY-02 NO OPERATOR FOUND'\nERR3MSG  DC    CL40'DEB$TIDY-03 OPERATOR MAY BE TOO LONG OR MACRO DATA'\nERR4MSG  DC    CL40'DEB$TIDY-04 ALIGNMENT ERROR'\nERR5MSG  DC    CL40'DEB$TIDY-05 EJECT OR SPACE LINE'\nERR6MSG  DC    CL40'DEB$TIDY-06 COMMENT DOES NOT FIT ON LINE'\nERR7MSG  DC    CL40'DEB$TIDY-07 SEQUENCE ERROR'\nERR8MSG  DC    CL40'DEB$TIDY-08 QUOTE MISMATCH'\nERR9MSG  DC    CL40'DEB$TIDY-09 COMMENT CONTINUATION'\nERRAMSG  DC    CL40'DEB$TIDY-0A TEST LINE           '\nFLG2     DC    X'00'               PRINT OPTION FLAG\nFLG      DC    X'00'\n*                                  80 = CONTINUATION CARD\n*                                  40 = END OF FILE INDICATOR\n*                                  20 = PROCESSING MACRO\n*                                  10 = PROCESSING 'AIF' INSTR\n*                                  08 = PROCESSING SPECIAL MACRO INSTR\n*                                  04 = LITERAL CONTINUATION\n*                                  02 = CURRENT RECORD IS COMMENTS CONT\n*                                  01 = COMMENTS CONT REQUESTED\nZEROS    DC    CL8'00000000'\nNINES    DC    CL8'99999999'\nPARMWORK DC    CL8'00000000'\nSUPCODE  DC    CL8' '\nRETCODE  DC    F'0'\nLINES    DC    F'0'\nPTABLE   DC    75X'00',C'.',180X'00'\nPAD      DC    F'0'\nCOMMSTRT DC    F'0'                START OF COMMENTS\nLIMIT    DC    F'0'                END OF COMMENTS\nBTABLE   DC    64X'00',C' ',191X'00'\nNBTABLE  DC    64X'FF',X'00',191X'FF'\nQTABLE   DC    125X'00',C'''',130X'00'\nSEQSAVE  DC    H'0'                SEQ SAVE AREA\nLIMITSZ  DC    H'0'                SIZE OF COMMENTS\nHEADING  DC    C'1'\n         DC    CL132' ASM CLEANUP PROGRAM - INTERNAL USE ONLY'\nCCHAR    DS    CL1\nPAREA    DC    CL132' '\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        SPECIAL OPERATORS TABLE TO HANDLE MACRO AND COPY STATEMENTS  *\n*                                                                     *\n***********************************************************************\nTSTBL    DC    CL6'AIF'\n         DC    CL6'AGO'\n         DC    CL6'ANOP'\n         DC    CL6'GBLA'\n         DC    CL6'GBLB'\n         DC    CL6'GBLC'\n         DC    CL6'LCLA'\n         DC    CL6'LCLB'\n         DC    CL6'LCLC'\n         DC    CL6'ACTR'\n         DC    CL6'SETA'\n         DC    CL6'SETB'\n         DC    CL6'SETC'\nMEND     DC    CL6'MEND'\n         DC    CL6'MNOTE'\n         DC    CL6'MEXIT'\n         DC    CL6'PRINT'\n         DC    CL6'PUNCH'\n         DC    CL6'REPRO'\nMACRO    DC    CL6'MACRO'\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        DATA CONTROL BLOCKS AND BUFFER AREAS FOR INPUT RECORDS.      *\n*                                                                     *\n***********************************************************************\nPRINT    DCB   DSORG=PS,MACRF=PM,LRECL=133,RECFM=FA,DDNAME=SYSPRINT\nINPUT    DCB   DSORG=PS,MACRF=GM,LRECL=80,EODAD=EOD,DDNAME=SYSUT1\nOUTPUT   DCB   DSORG=PS,MACRF=PM,LRECL=80,DDNAME=SYSUT2\n*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---\n         SPACE  1\n*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---\n*\n*    OTHER STORAGE AREAS\n*\n*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---\n         PRINT ON,NOGEN\n         DC    C'END   OF CONSTANTS: '\n         DC    C'ALAIN STEFFEN VERSION 3 DATE:&SYSDATE TIME:&SYSTIME'\n         SPACE  1\n*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---\n*\n*        LTORGS\n*\n*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---\n         LTORG\n         SPACE  1\n*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---\n*\n*        DSECTS (USER)\n*\n*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---\n         PRINT ON,NOGEN\n*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---\n*\n*        DSECT  (FOR $ENTER3 SAVE AREA FOR SUBROUTINES)\n*\n*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---\n         PRINT ON,NOGEN\n$ENTER   DSECT\n*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---\nENTERSTR DS    18F            NEW SAVE AREA\n*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---\nBLANKS   DS    CL255\n*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---\nQBTABLE  DC    XL256'00'           INITIALIZED ON ENTRY\n*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---\nRECORD80 DC    CL80' '\nRECORD99 DC    81C'9'\n*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---\nWORK     DS    D\nSEQC     DS    D\nSEQN     DS    D\n*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---\nENTEREND EQU   *-ENTERSTR     END OF SAVE AREA FOR RE-ENTRANT CODE\n*-- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- --- ---\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TIDYASM$": {"ttr": 1030, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0e\\x00\\x00\\x01\\x07\"_\\x01\\x10\\x12o\\tI\\x00\\x1c\\x00\\x0e\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.14", "flags": 0, "createdate": "2007-08-13T00:00:00", "modifydate": "2010-05-06T09:49:00", "lines": 28, "newlines": 14, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM  -  NORENT,NOREUS\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,RLD,FLAG(5))\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//         DD DISP=SHR,DSN=SBGOLOB.CBT479.FILE829\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT479.FILE829(TIDYASM)\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,20)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=SYSDA,SPACE=(TRK,30),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=IEWL,\n//       PARM='NCAL,MAP,LIST,LET,NORENT,NOREUS'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=(OLD,PASS),DSN=&&TEMP\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLIN   DD  *\n INCLUDE SYSLIB\n ORDER   DEB$TIDY\n SETSSI  CB479829\n ENTRY   DEB$TIDY\n NAME    TIDYASM(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT829/FILE829.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT829", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}