{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011809000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 352716, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 8, "INMDSNAM": "CBT.V500.FILE338.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 352716, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 352716, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE338.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x07\\x02'", "DS1TRBAL": "b'\\xd8\\x9e'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x02\\x85\\x00\\r\\x02\\x86\\x00\\x05\\x00\\x08'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04U\\x000\\x01\\x12%\\x7f\\x01\\x12%\\x7f!\\x02\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf8\\xf5@@@'", "ispf": {"version": "04.85", "flags": 0, "createdate": "2012-09-13T00:00:00", "modifydate": "2012-09-13T21:02:30", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-485"}, "text": "REGULAR CBT TAPE - VERSION 485    FILE:  338\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT485.FILE338\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 12 MEMBERS COUNTED; CUMULATIVE SIZE IS 2,892 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   09/13/12    21:02:30    GMT-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$COGSF": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x97\\t\\x1f\\x01\\x01\\x02\\x9f\\x12\\x10\\x00\\x06\\x00\\x06\\x00\\x00\\xe6\\xe2\\xc2\\xc7@@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1997-04-01T00:00:00", "modifydate": "2001-01-29T12:10:00", "lines": 6, "newlines": 6, "modlines": 0, "user": "WSBG"}, "text": "\nThis is public-domain software written by Gilbert Saint-flour.\n\nUse at your own risk.  Do what you want with it.  Distribute freely.\n\nSend all comments/questions to carlos@gsf-soft.com.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$$DOC": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x97\\t\\x1f\\x00\\x97)\\x0f\\x14\\x04\\x00\\x0b\\x00\\x06\\x00\\x00\\xc9\\xc2\\xd4\\xe4\\xe2\\xc5\\xd9@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1997-04-01T00:00:00", "modifydate": "1997-10-17T14:04:00", "lines": 11, "newlines": 6, "modlines": 0, "user": "IBMUSER"}, "text": "\n                Contents of P390IPL.PDS\n\n1.  CANCELU        Cancel your own TSO session\n2.  FTCHKPWD       Prevent CANCELU from accessing the FTP server\n3.  HASP373        Show active jobs and TSO users on master console\n4.  IEEZB816       Macro instruction\n5.  P390IPL        Automate MVS IPL and shutdown on the P390\n6.  SHUTDOWN       Automate MVS shutdown procedure on the P390\n7.  STRING         Macro instruction\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$LWILTIP": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x01\\x00\\x00\\x00\\x98'\\x0f\\x00\\x98'\\x0f\\x14V\\x00\\xa7\\x00\\xc3\\x00\\x00\\xd3\\xc1\\xd9\\xd9\\xe8\\xe6@@@@\"", "ispf": {"version": "01.01", "flags": 0, "createdate": "1998-09-27T00:00:00", "modifydate": "1998-09-27T14:56:00", "lines": 167, "newlines": 195, "modlines": 0, "user": "LARRYW"}, "text": "Re: P390 Tips\nDate: 98-09-21 11:15:36 EDT\nFrom: lwilliams@unitechsys.com (Larry Williams)\nTo: larryw@ix.netcom.com (Larry Williams), sbgolob@aol.com\n\n\nSix tips for improving performance with OS/390 on a P390 box\n\nBy Larry Williams\n\nIn the material that follows are some ideas for optimizing a P390\nsystem running ESA or OS/390.  The P390 is an amazing small, server\nbased mainframe that in its latest version is about the same firepower\nas a 4381 class system.   My P390 is one of the older ones and is not\nquite that powerful, but then again, tuning becomes even more\nimportant in those cases.\n\nMy P390 is a IBM Server model 500 machine with 128 megabyes of memory\nfor mainframe processing, and about 20 gig of hard drive space for\n\"virtual\" disk packs.\n\nWhen I arrived here, about a year ago, it took 18 minutes to IPL the\nP390, and as a rule, jobs ran much slower that the \"real\" big iron at\na partner site.\n\nAfter installing these \"tips\" the IPL takes about 5 minutes and I-O\nbound jobs aren't quite as fast as the \"real\" iron, but within 20% or\nso of the clock time for the other box.  Our partner site being\ncompared to is under a very, very heavy load, and your mileage may\nvary.  I point this out to say that a lighly loaded P390 can compare\nfavorably in many cases (for non I-O bound jobs) to a heavily loaded\nlarger system.\n\nWhat are the tips?\n\nFirst tip:  You need at LEAST a part time \"real\" system programmer.\n\nIBM likes to suggest that anyone who can run a PC can run a P390.\nPerhaps with all defaults, but not very fast or very well, plus \"good\nluck\" with trouble shooting!  I suggest that you still need at least a\npart time system programmer to do it well.  Ever since IBM sent me\nDASD images (ZIP files on the OS/390 1.3.0 CD-ROM set) with MVS\ncatalog and MVS VTOC errors on them,  I know my job is safe!\n\nSecond tip:  Define Expanded memory.\n\nThe P390 setup allows you to specify Expanded memory for virtual\npaging, (F4 from the P390 configuration program)  do so.  16 meg is a\ngood choice.  More modern P390 boxes allow you to use the server's PC\nmemory for this parm, so 32 meg might work even better for you.  This\nhelps prevent paging (esp. swap paging) and is related to the fourth\ntip below.\n\nThird tip:  \"Rightsize\" small disk packs for \"problem\" datasets.\n\nThe doc from IBM that says \"Keep the number of packs to a minimum to\nimprove performance\" is, in my opinion, not at all accurate.\n\"Rightsizing\" certain \"problem\" packs increases performance, not\ndecreases it, so I suggest taking advantage of the \"mini-disk\" feature\nof a P390 to right-size certain packs with special use datasets.\n(When you use ICKDSF on a pack that is not the same size as the\n\"usual\" size, the messages indicate a \"mini disk\" (VM style disk) is\nin use.)\n\nOne of the nastiest datasets to place are the JES2 Checkpoint\ndatasets. I created two 25 cylinder 3380 packs and placed  the\ncheckpoint datasets out there by themselves.  This improved JES2 and\noverall system performance in a noticable way, plus nothing else\nrunning uses those packs.  The checkpoint packs are so busy most of\nthe time it offers no advantage to put other datasets with them, and\nsince I can make a disk pack any legal size, why not split it out?\n\nI gave the SPOOL volumes dedicated mini size 3380 packs.  As I need\nmore space, I add it 300 cylinders at a time.\n\nI also created a small user catalog on the \"C:\" volume containing the\nMVS catalog of my backup tapes, so if the RAID arrays died, I could\nget to my catalog for restores (If \"C:\" is on the same array with all\nthe other packs, this may not help much for a disk crash, but it is\nstill useful in case of a logical error, such as updating the RAID\npartition table by mistake.)\n\nOf course, if possible, have a \"RESCUE\" system, (a self contained IPL\npack that you can use to do recovery processing.) Explaining \"RESCUE\"\n(from the CBT tape) is outside the scope of the subject here, but\nworth mentioning, as if you have a problem that prevents an IPL, you\ncan recover quickly.\n\nFourth tip:  Speed up paging, even unavoidable paging that occurs\nduring IPL by using dedicated page packs (see tip two, above, as\nwell).\n\nYour goal should be that your P390 does not page at any time but IPL.\nWith only one virtual CHPID, paging is very, very expensive, though\nthe RSM  (Real Storage Manager) rules still apply, and at IPL you can\nbet those page datasets are getting beaten badly!\n\nIf you rightsize a page pack with absolutely nothing on it but the\nPLPA, Common, and one Local page dataset,  (my version of the P390 has\nonly one virtual CHPID, so all of them on one pack works fine.  There\nmay be some advantage to creating the Local page on another pack, if\nyou have multiple RAID arrays and have a newer box.  The tests done\nhere did not show any difference, but of course my P390 non-S/90\nprocessor is a Intel P-90.) The important note here is to have no\nother datasets (or at the least no open datasets) on that pack,  RSM\n(Real Storage Manager) will chop down the code path to read and write\nby about 80%!\n\nWhy, you may ask?  The reason being that RSM can control the \"arm\" of\nthe disk pack by  itself.  If there is nothing on the page pack but\npage datasets,  it will not issue arm positioning commands. Being the\nonly user, it \"knows\" the arm is where it left it. The other added\nfeature is that instead of using the operating system to do\ninput/output, it does its own direct CCW (Channel Command Word)\nprograms.\n\nThis one tip sliced 10 minutes off the IPL.\n\nFifth tip:  Split like data across multiple physical RAID arrays.  (If\nyou have them)\n\nSplit like types of packs across all arrays on your server, i.e.\n\"ping-pong\" them. (This idea is not of any real use if you only have\none physical RAID, though.)\n\nI have \"D\" and \"E\" (D is one disk array, E is the other disk array)\n\nD - Work  pack #1\nE - Work pack #2\nD - Programmer pack #1\nE - Programmer pack #2, etc.\n\nSixth tip:  Stop wasting space - GET FDR for the P390.\n\nIt may not be well known,. but Innovation Data Processing (the company\nthat makes FDR) offers flat rate pricing to all P390 users, the FDR\nproduct for $400 a year, ABR is another $1200 a year.  This is a great\nvalue,  Fast Compaktor by itself is worth the price!\n\nThe IBM products for working with disk packs are not as useful in some\ncases, as some of them have problems with \"odd sized\" packs. (Odd\nsized being a pack not the same size as a \"real\" device of that type.\nAn example of this with be a 3380 pack with 300 cylinders instead of\n885 cylinders.)\n\nWith FDR I recovered almost 1500 cylinders (a bit over 1 gigabyte) by\nresizing the RES pack, the DLIB pack, etc.  and FDR does not have any\nproblems with odd sized disks (my smallest pack is 8 cylinders.)  The\nanswer is \"FDR can do it.  What was the question?\"   I hope it is\nclear that the resizing was done with packs that were not \"active\"\nyet, as of course you cannot resize an active RES pack without making\nit inactive first.\n\nIn summary, the P390 is an amazing little box, even the company I work\nfor is amazed how much faster it is now,  as they really did not\nexpect this kind of performance from such a small box.  The details on\nthe P390 boxes of the future suggest that these small work horses will\nfill an improtant role in testing products, or even a small production\nsystem, as they are reasonably priced, and small enough to require no\nspecial cooling or electricity needs, and can in fact run any of the\nmainframe operating systems with reasonable ease.\n\nSo don't be surprised if you see a P390 system in your future, if your\nneeds are simple (say 50 or so TSO users) this could be the box for\nyou.  Just remember, tuning still counts!\n\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@FILE338": {"ttr": 526, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04U\\x00$\\x01\\x12%\\x7f\\x01\\x12%\\x7f!\\x02\\x00\\x1b\\x00\\x1b\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf8\\xf5@@@'", "ispf": {"version": "04.85", "flags": 0, "createdate": "2012-09-13T00:00:00", "modifydate": "2012-09-13T21:02:24", "lines": 27, "newlines": 27, "modlines": 0, "user": "CBT-485"}, "text": "//***FILE 338 is from Gilbert Saint-flour and contains programs     *   FILE 338\n//*           and enhancements for running a P390 system.           *   FILE 338\n//*                                                                 *   FILE 338\n//*     Gilbert's programs are now being supported by Carlos        *   FILE 338\n//*      Aguilera and Sam Golob:                                    *   FILE 338\n//*                                                                 *   FILE 338\n//*     email:        carlos@gsf-soft.com                           *   FILE 338\n//*     web page:     http://www.gsf-soft.com/Freeware              *   FILE 338\n//*                                                                 *   FILE 338\n//*     email:        sbgolob@cbttape.org                           *   FILE 338\n//*                                                                 *   FILE 338\n//*                 CONTENTS OF P390IPL.PDS                         *   FILE 338\n//*                 -------- -- -----------                         *   FILE 338\n//*                                                                 *   FILE 338\n//*     CANCELU  -  CANCEL YOUR OWN TSO SESSION (possibly from      *   FILE 338\n//*                  a remote location)                             *   FILE 338\n//*                                                                 *   FILE 338\n//*     HASP373  -  SHOW ACTIVE JOBS AND TSO USERS ON               *   FILE 338\n//*                 MASTER CONSOLE                                  *   FILE 338\n//*                                                                 *   FILE 338\n//*     $LWILTIP -  TIPS FROM LARRY WILLIAMS ON IMPROVING THE       *   FILE 338\n//*                 P390'S PERFORMANCE                              *   FILE 338\n//*                                                                 *   FILE 338\n//*     P390IPL  -  AUTOMATE MVS IPL AND SHUTDOWN ON THE P390       *   FILE 338\n//*                                                                 *   FILE 338\n//*     SHUTDOWN -  AUTOMATE MVS SHUTDOWN PROCEDURE ON THE P390     *   FILE 338\n//*                                                                 *   FILE 338\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CANCELU": {"ttr": 528, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x02\\x00\\x00\\x00\\x89\\x06/\\x00\\x99\\x03/\\x17\\x05\\x01v\\x00\\x89\\x00\\x88\\xc9\\xc2\\xd4\\xe4\\xe2\\xc5\\xd9@@@'", "ispf": {"version": "02.02", "flags": 0, "createdate": "1989-03-03T00:00:00", "modifydate": "1999-02-01T17:05:00", "lines": 374, "newlines": 137, "modlines": 136, "user": "IBMUSER"}, "text": "//IBMUSERK JOB (ACCT#),CANCELU,\n// NOTIFY=&SYSUID,\n// CLASS=A,MSGCLASS=X,COND=(0,NE)\n//ASMH EXEC PGM=IEV90,PARM=(OBJECT,NODECK,NOESD,NORLD,NOXREF)\n***********************************************************************\n*                                                                     *\n* MODULE NAME = CANCELU                                               *\n*                                                                     *\n* DESCRIPTIVE NAME = Cancel your own TSO session                      *\n*                                                                     *\n* STATUS = R202                                                       *\n*                                                                     *\n* FUNCTION = This TSO command can be used in conjunction with a       *\n*            public TSO userid to allow remote users to cancel their  *\n*            own TSO session after the connection hangs or drops.     *\n*                                                                     *\n* AUTHOR = Gilbert Saint-flour                                        *\n*                                                                     *\n* ENVIRONMENT = SEE BELOW                                             *\n*                                                                     *\n*    DEPENDENCIES: MVS/ESA V5 OR OS/390                               *\n*                  STRING Macro R504                                  *\n*                                                                     *\n* MODULE TYPE = PROCEDURE, (CSECT TYPE)                               *\n*                                                                     *\n*    PROCESSOR = IBM HIGH LEVEL ASSEMBLER/MVS                         *\n*                                                                     *\n*    MODULE SIZE = 2K                                                 *\n*                                                                     *\n*    ATTRIBUTES = NON-REUSABLE, RMODE 24, AMODE 31,                   *\n*                 APF-AUTHORIZED                                      *\n*                                                                     *\n* OPERATION = See Below                                               *\n*                                                                     *\n*    1. Issue the STTMPMD macro to inactivate the ATTN and PA1 keys.  *\n*                                                                     *\n*    2. Issue the ESTAE macro to LOGOFF in case of an ABEND.          *\n*                                                                     *\n*    3. Prompt the user for a userid and a password                   *\n*                                                                     *\n*    4. Issue RACROUTE REQUEST=VERIFY to validate the userid and      *\n*       the password.  If RACROUTE fails, issue LOGOFF.               *\n*                                                                     *\n*    5. Scan active address spaces to determine if the userid's       *\n*       TSO session is still active. If not found, exit to the        *\n*       LOGON panel.                                                  *\n*                                                                     *\n*    6. Scan OREs for outstanding replies for the userid's TSO        *\n*       session.  Issue a message if one is found, as this may        *\n*       prevent the CANCEL command from being successful.             *\n*                                                                     *\n*    7. Invoke the System-Initiated Cancel routine (SIC) to           *\n*       cancel the userid's TSO session.                              *\n*                                                                     *\n*    8. Wait until the cancelled address space terminates,            *\n*       or for 10 seconds, whichever comes first.                     *\n*                                                                     *\n*    9. Exit to the LOGON screen                                      *\n*                                                                     *\n* INSTALLATION = See below                                            *\n*                                                                     *\n*    1. Link-edit CANCELU into an APF-Authorized library.             *\n*                                                                     *\n*    2. Add CANCELU to the AUTHCMD table in IKJTSOnn                  *\n*                                                                     *\n*    3. Define the CANCELU user in RACF and TSO                       *\n*                                                                     *\n*       ADDUSER +                                                     *\n*             CANCELU +                                               *\n*             NAME(CANCELU-CANCELME) +                                *\n*             DFLTGRP(TEST) +                                         *\n*             PASSWORD(CANCELME) +                                    *\n*             TSO(PROC(CANCELU))                                      *\n*                                                                     *\n*    4. Create the CANCELU LOGON procedure:                           *\n*                                                                     *\n*         //CANCELU EXEC PGM=IKJEFT01,PARM=CANCELU                    *\n*         //STEPLIB DD DSN=<APF-authorized library>,DISP=SHR          *\n*                                                                     *\n* PARAMETERS = None                                                   *\n*                                                                     *\n* RETURN-CODES = None                                                 *\n*                                                                     *\n* CHANGE ACTIVITY                                                     *\n*                                                                     *\n*  $100 First release                                                 *\n*  $101 Replace CANCEL command with CALL to the SIC routine           *\n*  $202 Replace IKJPARSE with full-screen TGET/TPUT                   *\n*                                                                     *\n***********************************************************************\nCANCELU  CSECT\nCANCELU  AMODE 31                      TPUT\n         DC    C'GSF Utilities - CANCELU R202 ',0H'0'\nBEGIN    BALR  R12,0                   BASE REGISTER\n         USING *,R12\n         LR    R11,R1                  POINT AT CPPL.\n         USING CPPL,R11\n         ESTAE RECOVERY,CT             INTERCEPT ABENDS\n*\n*        Retrieve ACEE addr and terminal name\n*\n         L     R4,PSAAOLD-PSA          MY ASCB\n         USING ASCB,R4\n         L     R5,ASCBASXB             MY ASXB\n         USING ASXB,R5\n         MVC   USERID,ASXBUSER         TSO USERID\n         L     R6,ASXBSENV             MY ACEE\n         USING ACEE,R6\n         MVC   TERMNAME,ACEETRID       terminal name\n         DROP  R4,R5,R6\n*\n         STAX  DEFER=YES               IGNORE ATTENTIONS\n         STSIZE LINE=24,SIZE=80        3270 MODEL-2\n***      STFSMODE ON,INITIAL=YES       Switch to full-screen mode\n         STTMPMD ON,KEYS=ALL           TRAP CLEAR AND PA1 KEYS\n***********************************************************************\n*        Issue full-screen TPUT, get answer                           *\n***********************************************************************\n*loop\nLOOP1    TPUT  SCREEN,SCREENL,FULLSCR\n         LTR   R1,R15                  any error?\n         BNZ   ABEND16                 YES, ABEND\n         MVC   INBUF,BLANKS            clear input area\n         TGET  INBUF,L'INBUF           READ REPLY\n         LTR   R1,R15                  any error?\n         BNZ   ABEND16                 YES, ABEND\n         TCLEARQ INPUT\n CLI INBUF+L'USERID,X'11'    SBA?\n BNE *+10                    no, jump\n MVC INBUF+L'USERID(L'PASSWORD),INBUF+L'USERID+3\n         OC    INBUF,BLANKS            UPPER CASE THE INPUT\n         CLC   INBUF,BLANKS            any data entered?\n         BE    LOOP1                   NO, RESHOW SCREEN\n*endloop\n         STLINENO LINE=10,CLEAR=NO     MIDDLE OF SCREEN\n***********************************************************************\n*        PROCESS PASSED PARAMETERS                                    *\n***********************************************************************\n         STRING (INBUF,L'USERID,T),INTO=USERID\n         STC   R15,USERIDL             length of user-id\n         STRING (INBUF+L'USERID,L'PASSWORD,T),INTO=PASSWORD\n         STC   R15,PASSWRDL            length of password\n         CLI   USERIDL,0               USERID SPECIFIED?\n         BE    STACKCMD                NO, QUIT\n         CLI   PASSWRDL,0              PASSWORD SPECIFIED?\n         BE    STACKCMD                NO, QUIT\n***********************************************************************\n*        CHECK USERID/PASSWORD                                        *\n***********************************************************************\n         RACROUTE REQUEST=VERIFY,                                      X\n               MF=(E,RACVFYL)\n         LTR   R4,R15                  SAF RC\n         BZ    PSWDOK                  ZERO, CONTINUE\nSAFERROR LM    R5,R6,RACVFYL           RACF RC,RSN\n         STRING ((R4),,X),1X,((R5),,X),1X,((R6),,X),INTO=WORK512\n         TPUT  WORK512,(R15)\n         B     STACKCMD\nRACVFYL  RACROUTE REQUEST=VERIFY,                                      X\n               ENVIR=CREATE,                                           X\n               USERID=USERIDL,                                         X\n               PASSWRD=PASSWRDL,                                       X\n               TERMID=TERMNAME,        Terminal name                   X\n               WORKA=WORK512,                                          X\n               MF=L\n*\n*        RECOVERY ROUTINE\n*\nRECOVERY LA    R15,STACKCMD-RECOVERY(,R15) RETRY ADDRESS\n         SETRP RETADDR=(R15),RC=4,FRESDWA=YES,RETREGS=YES\n         BR    R14\n***********************************************************************\n*        ISSUE \"CANCEL U=USERID\" COMMAND                              *\n***********************************************************************\nPSWDOK   STRING 'LOGON ',USERID,INTO=LIST1CMD\n         STTMPMD OFF                   ALLOW CLEAR AND PA1 KEYS\n*\n         L     R3,CVTPTR               CVT ADDRESS\n         USING CVTMAP,R3\n         LA    R4,2                    FIRST ASID\n         L     R5,CVTASVT              POINT TO ASVT\n         L     R5,ASVTMAXU-ASVT(,R5)   MAX ASID\n*LOOP\nLOOP2    LOCASCB ASID=(R4)\n         LTR   R15,R15                 ASCB active?\n         BNZ   LOOP2NXT                no, ignore\n         LR    R7,R1\n         USING ASCB,R7\n         IAZXJSAB READ,ASCB=(R7),JOBNAME=JOBNAME,JOBID=JOBID\n         LTR   R15,R15\n         BNZ   LOOP2NXT\n         CLI   JOBID,C'T'              TSO ADDRESS SPACE?\n         BNE   LOOP2NXT                no, ignore\n         CLC   JOBNAME,USERID          MY USERID?\n         BE    ASIDF99                 YES, EXIT\nLOOP2NXT LA    R4,1(,R4)               NEXT ASID\n         BCT   R5,LOOP2                NEXT ASID\n*ENDLOOP\n         STRING 'USER ',(USERID,,T),' NOT LOGGED ON',INTO=WORK512\n         TPUT  WORK512,(R15)\n         B     STACKCMD\nASIDF99  EQU   *\n         STRING 'USERID(',(USERID,,T),') ACTIVE IN ASID(',             X\n               (ASCBASID,,X),')',INTO=WORK512\n         TPUT  WORK512,(R15)\n***********************************************************************\n*        LOOK FOR OUTSTANDING WTORS                                   *\n***********************************************************************\n         L     R4,CVTCUCB              UCM\n         ICM   R5,B'1111',UCMRPYQ-UCM(R4) FIRST ORE\n         BZ    WTOR99                  NO OUTSTANDING REPLIES, EXIT\n         USING OREF,R5\n         MODESET KEY=ZERO\n*LOOP\nWTOR11   CLC   OREASID,ASCBASID        WTOR FOR MY USERID?\n         BE    WTOR21                  YES, REPLY RETRY\n         ICM   R4,B'1111',ORELKP       NEXT ORE\n         BNZ   WTOR11                  LOOP\n*ENDLOOP\n         MODESET KEY=NZERO\n         B     WTOR99                  EXIT\nWTOR21   EQU   *\n         MODESET KEY=NZERO\n         STRING 'USER ',(USERID,,T),' HAS OUTSTANDING REPLIES',        X\n               INTO=WORK512\n         TPUT  WORK512,(R15)\nWTOR99   EQU   *\n***********************************************************************\n*        Invoke the \"System-Initiated Cancel\" routine (SIC)           *\n***********************************************************************\nSIC      MODESET KEY=ZERO,MODE=SUP\n         SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,REGS=STDSAVE\n         SETLOCK OBTAIN,TYPE=CMS,MODE=UNCOND,REGS=STDSAVE\n         LA    R0,X'222'               abend code\n         LA    R1,ASCB                 ASCB address\n         L     R15,CVTSIC              system-initiated CANCEL\n         BALR  R14,R15              <- CANCEL\n         SETLOCK RELEASE,TYPE=ALL,REGS=STDSAVE\n         MODESET KEY=NZERO,MODE=PROB   KEY=PROB\n***********************************************************************\n*        LOOP UNTIL ADDRESS SPACE TERMINATES                          *\n***********************************************************************\n         STRING 'CANCEL COMMAND ISSUED FOR USERID(',(USERID,,T),')',   X\n               INTO=WORK512\n         TPUT  WORK512,(R15)\n         LA    R3,20                   20 STIMER ITERATIONS\n*LOOP\nWAIT5    STIMER WAIT,BINTVL=HALFASEC   WAIT FOR HALF A SECOND\n         IAZXJSAB READ,ASCB=(R7),JOBNAME=JOBNAME,JOBID=JOBID\n         LTR   R15,R15\n         BNZ   WAIT5X\n         STRING 'WAITING FOR ADDRESS-SPACE TO TERMINATE',              X\n               INTO=WORK512\n         TPUT  WORK512,(R15)\n         BCT   R3,WAIT5\n*ENDLOOP\nWAIT5X   EQU   *\n***********************************************************************\n*        STACK A \"LOGOFF\" OR A \"LOGON\" COMMAND                        *\n***********************************************************************\nSTACKCMD EQU   *\n         GETMAIN R,LV=LIST1L,SP=78\n         LR    R2,R1                   ADDRESS OF THE LSD\n         MVC   0(LIST1L,R2),LIST1      MOVE TO SP78\n         LA    R3,16(,R2)              POINT TO IN-STORAGE LIST\n         ST    R3,0(,R2)               STORE INTO LSD\n         ST    R3,8(,R2)               STORE INTO LSD\n         L     R3,CPPLUPT              UPT\n         L     R4,CPPLECT              ECT\n         STACK PARM=STACKL,UPT=(R3),ECT=(R4),ECB=DYNECB,               X\n               STORAGE=((R2),PROCN),MF=(E,DYNPPL)\n         LTR   R0,R15\n         BNZ   ABEND16\n         SVC   3                       EXIT\n*\nABEND16  ABEND 16,DUMP,STEP,REASON=(15)\n*\nLIST1    DC    A(*-*,L'LIST1CMD+4,*-*,0)\n         DC    Y(L'LIST1CMD+4,0)\nLIST1CMD DC    C'LOGOFF        '\nLIST1L   EQU   *-LIST1\nSTACKL   STACK MF=L\nHALFASEC DC    F'50'                   HALF A SECOND\n*--------------------------------------*\n*  3270 SCREEN BUFFER                  *\n*--------------------------------------*\nSCREEN   DC    X'27F5'                  ESC, ERASE WRITE STD\n         DC    X'C1'                    WCC:\n*        F3270 ROW=24,COL=80,MODEL=2    SPF START\n         DC    X'115D7F'                SBA\n*        F3270 ROW=1,COL=1              ...\n         DC    X'114040'                SBA\n*        F3270 ROW=1,COL=1,RA=00        CLEAR WHOLE SCREEN\n         DC    X'3C4040',X'00'          RA\n*        F3270 ROW=3,COL=1\n         DC    X'11C260'                SBA\n*        F3270 ATTR=(SF,PROT,NORM),INITIAL='Cancel a TSO User-ID'\n         DC    X'1D60'                  SF\n         DC    C'Cancel a TSO User-ID'\n*        F3270 ROW=5,COL=3,INITIAL='  Userid '\n         DC    X'11C5C2'                SBA\n         DC    C'  Userid '             DATA\n*        F3270 ATTR=(SF,PROT,BRIGHT),INITIAL='===>'\n         DC    X'1DE8'                  SF\n         DC    C'===>'                  DATA\n*        F3270 ATTR=(SF,UNPROT),LENGTH=8\n         DC    X'1D40'                  SF\n         DC    CL8' '                   User-id\n*        F3270 ATTR=(SF,PROT,NORM,ASKIP)\n         DC    X'1DF0'                  SF\n*        F3270 ROW=6,COL=3,INITIAL='Password '\n         DC    X'11C6D2'                SBA\n         DC    C'Password '             DATA\n*        F3270 ATTR=(SF,PROT,BRIGHT),INITIAL='===>'\n         DC    X'1DE8'                  SF\n         DC    C'===>'                  DATA\n*        F3270 ATTR=(SF,NDISP,UNPROT),LENGTH=8\n         DC    X'1D4C'                  SF\n         DC    CL8' '                   Password\n*        F3270 ATTR=(SF,PROT,NORM)\n         DC    X'1D60'                  SF\n*        F3270 ROW=5,COL=18\n         DC    X'11C5D1'                SBA\n         DC    X'13'                    IC\nSCREENL  EQU   *-SCREEN\nBLANKS   DC    CL(L'INBUF)' '          blanks\n*\nDYNPPL   DS    8F                      PPL FOR USE WITH PARSE\nDYNECB   DS    F                       ECB FOR USE WITH PARSE\nTERMNAME DS    CL8                     Terminal name\nUSERIDL  DS    FL1'7'                  actual length of user-id\nUSERID   DS    CL8                     User-ID and job-name\nPASSWRDL DS    AL1(L'PASSWORD)         length of password\nPASSWORD DS    CL8                     password\nJOBNAME  DS    CL8                     FROM JSAB\nJOBID    DS    CL8                     FROM JSAB\nINBUF    DS    CL24                    FROM TGET\n         DS    0D\nWORK512  DS    CL512\n         PRINT NOGEN\n         IKJCPPL                       COMMAND PROCESSOR PARM LIST\n         IHAPSA                        PREFIXED STORAGE AREA\n         CVT   DSECT=YES               COMMUNICATION VECTOR TABLE\n         IHAASCB                       ADDRESS SPACE CONTROL BLOCK\n         IHAASXB                       ADDRESS SPACE EXTENSION BLOCK\n         IHAACEE                       ACCESSOR ENVIRONMENT ELEMENT\n         IHAASSB                       ADDRESS SPACE SECONDARY BLOCK\n         IHAASVT                       ADDRESS SPACE VECTOR TABLE\n         IAZJSAB                       JOB SCHEDULER ASCB\n         IEECUCM DSECT=YES             UNIT CONTROL MODULE\n         IHAORE DSECT=YES              OPERATOR REPLY ELEMENT\n         IHASDWA DSECT=YES,VRAMAP=NO   SDWA\n         STRING GENERATE\n         YREGS\n         END   BEGIN\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//         DD DISP=SHR,DSN=IBMUSER.P390IPL.PDS           (STRING)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,5)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200\n//*\n//LKED    EXEC PGM=LINKLLA,PARM='MAP,AC=1'\n//SYSLIN   DD DSN=*.ASMH.SYSLIN,DISP=(OLD,DELETE)\n//SYSLMOD  DD DISP=SHR,DSN=SYS1.P390.LINKLIB(CANCELU)\n//SYSPRINT DD SYSOUT=*\n//\n//\n//GO      EXEC PGM=IKJEFT01,REGION=2M\n//STEPLIB  DD DISP=SHR,DSN=*.LKED.SYSLMOD\n//SYSTSIN  DD *\nCANCELU\n//SYSTSPRT DD SYSOUT=*\n//ABNLIGNR DD DUMMY\n//SYSUDUMP DD SYSOUT=*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "FTCHKPWD": {"ttr": 772, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x02\\x00\\x00\\x00\\x97\\x04\\x9f\\x00\\x98'_\\x19X\\x00\\x8f\\x00'\\x00I\\xc9\\xc2\\xd4\\xe4\\xe2\\xc5\\xd9@@@\"", "ispf": {"version": "01.02", "flags": 0, "createdate": "1997-02-18T00:00:00", "modifydate": "1998-10-02T19:58:00", "lines": 143, "newlines": 39, "modlines": 73, "user": "IBMUSER"}, "text": "//IBMUSERX JOB (ACCT#),FTCHKPWD,\n// NOTIFY=&SYSUID,\n// CLASS=A,MSGCLASS=X,COND=(0,NE)\n//ASMH EXEC PGM=IEV90,PARM=(OBJECT,NODECK,NOESD,NORLD,NOXREF)\n***********************************************************************\n*                                                                     *\n* MODULE NAME = FTCHKPWD                                              *\n*                                                                     *\n* DESCRIPTIVE NAME = \"CHECK PASSWORD\" EXIT FOR FTP                    *\n*                                                                     *\n* STATUS = R102                                                       *\n*                                                                     *\n* FUNCTION = This user exit controls which user-ids can               *\n*            access the FTP server.                                   *\n*                                                                     *\n* AUTHOR = Gilbert Saint-flour                                        *\n*                                                                     *\n* ENVIRONMENT = See below                                             *\n*                                                                     *\n*    DEPENDENCIES: TCP/IP V3R1                                        *\n*                                                                     *\n* MODULE TYPE = PROCEDURE, (CSECT TYPE)                               *\n*                                                                     *\n*    PROCESSOR = IBM HIGH LEVEL ASSEMBLER/MVS                         *\n*                                                                     *\n*    MODULE SIZE = 1K                                                 *\n*                                                                     *\n*    ATTRIBUTES = Reenterable, RMODE ANY, AMODE 31,                   *\n*                 Problem State, Key 8                                *\n*                                                                     *\n* OPERATION = See TCP/IP Customization Guide                          *\n*                                                                     *\n* INSTALLATION = See Below                                            *\n*                                                                     *\n*    1. Link-edit FTCHKPWD into an APF-authorized link-list           *\n*       library and refresh LLA.                                      *\n*                                                                     *\n*    2. Stop the FTP server and restart it.                           *\n*                                                                     *\n* PARAMETERS = See documentation for FTCHKPWD                         *\n*                                                                     *\n* RETURN-CODES = 0          User allowed to access FTP                *\n*                16         User not allowed to access FTP            *\n*                                                                     *\n* CHANGE ACTIVITY                                                     *\n*                                                                     *\n*  $100 Initial version                                               *\n*  $101 Add list of authorized user-ids                               *\n*  $102 Authorize users defined with TSO(USERDATA(8000))              *\n*                                                                     *\n***********************************************************************\nFTCHKPWD CSECT\nFTCHKPWD RMODE ANY\n         BAKR  R14,0\n         LR    R12,R15                 BASE REG\n         USING FTCHKPWD,R12\n*\n         LM    R4,R7,0(R1)             LOAD PARAMETERS\n         USING RETURN_CODE,R4\n         USING USERID,R6\n         USING PASSWORD,R7\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Check for special users which don't have a RACF TSO segment  *\n*                                                                     *\n*---------------------------------------------------------------------*\n         BAL   R2,PUB2                 branch around the list\n         DC    CL8'PUB'                Anonymous\n         DC    CL8'IBMUSER'            gsf\n         DC    CL8'P390'               Kal\n*loop\nPUB2     CLC   USERID(8),0(R2)         this user authorised?\n         BE    RC0                     yes, exit with rc=0\n         LA    R2,8(,R2)               next entry in the table\n         CLC   PUB2,0(R2)              end of table?\n         BNE   PUB2                    no, check next entry\n*endloop\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Not a special user, check for TSO(USERDATA(8000))            *\n*                                                                     *\n*---------------------------------------------------------------------*\n         GETMAIN R,LV=RACXTRTLL,SP=229\n         LR    R9,R1\n         USING RACXTRTL,R9\n         MVC   RACXTRTL(RACXTRTLL),RACXTRTM\n         RACXTRT TYPE=EXTRACT,                                         X\n               ENTITY=USERID,                                          X\n               RELEASE=1.8,                                            X\n               MF=(E,RACXTRTL)\n         LTR   R7,R15                  PASS/SAVE RC\n         BNZ   FREEM2                  RACF FAILED, EXIT\n         LH    R2,4(,R1)               OFFSET TO DATA RETURNED\n         LA    R3,0(R2,R1)             POINT AT LENGTH OF DATA RETURNED\n         CLC   =F'2',0(R3)             Two bytes of data returned?\n         BNE   NOTUDATA                No, error\n         TM    4(R3),X'80'             USERDATA(8000) ?\n         BO    FREEM1                  yes, jump\nNOTUDATA LA    R7,8                    No, RC=8\n*\nFREEM1   L     R0,0(,R1)               SP,LENGTH\n         FREEMAIN R,LV=(0),A=(1)       FREE MEMORY\n*\nFREEM2   FREEMAIN R,LV=RACXTRTLL,SP=229,A=(R9)\n*\n         LTR   R7,R7                   any error?\n         BNZ   RC16                    yes, exit with rc=16\n*\nRC0      XC    RETURN_CODE,RETURN_CODE RC=0 (user is authorized)\n         PR                            GOBACK\n*\nRC16     LA    R15,16                  RC=16 (user not authorized)\n         ST    R15,RETURN_CODE         PASS RETURN_CODE\n         PR                            GOBACK\n*\nRACXTRTM RACXTRT TYPE=EXTRACT,                                         X\n               ENTITY=*-*,                                             X\n               FIELDS=FLDLIST,                                         X\n               SEGMENT=SEGNAME,                                        X\n               SUBPOOL=229,                                            X\n               RELEASE=1.8,                                            X\n               MF=L\nSEGNAME  DC    CL8'TSO '\nFLDLIST  DC    AL4(1),CL8'TUDATA'\n*\nRETURN_CODE DSECT\nUSERID      DSECT\nPASSWORD    DSECT\n*\nDYNAM    DSECT\nRACXTRTL RACXTRT TYPE=EXTRACT,RELEASE=1.8,MF=L\nRACXTRTLL EQU *-RACXTRTL\n         YREGS\n         END\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200\n//*\n//LKED    EXEC PGM=LINKLLA,PARM=RENT\n//SYSLIN   DD DSN=*.ASMH.SYSLIN,DISP=(OLD,DELETE)\n//SYSLMOD  DD DISP=SHR,DSN=SYS1.P390.LINKLIB(FTCHKPWD)\n//SYSPRINT DD SYSOUT=*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "HASP373": {"ttr": 776, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x97\\x01\\x1f\\x00\\x98\\x05_\\x11\\x04\\x00\\xf8\\x00`\\x00a\\xc9\\xc2\\xd4\\xe4\\xe2\\xc5\\xd9@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1997-01-11T00:00:00", "modifydate": "1998-02-24T11:04:00", "lines": 248, "newlines": 96, "modlines": 97, "user": "IBMUSER"}, "text": "//IBMUSERI JOB (ACCT#),HASP373,\n// NOTIFY=&SYSUID,REGION=5M,\n// CLASS=A,MSGCLASS=X,COND=(0,NE)\n//ASMH EXEC PGM=ASMA90,PARM=(NODECK,OBJECT,NOESD,NORLD,NOXREF)\n***********************************************************************\n*                                                                     *\n* MODULE NAME = HASP373                                               *\n*                                                                     *\n* DESCRIPTIVE NAME = Show active jobs and TSO users on master console.*\n*                                                                     *\n* STATUS = R102                                                       *\n*                                                                     *\n* FUNCTION = This MPF exit is invoked for the following messages:     *\n*                                                                     *\n*              1. $HASP373 jobname  STARTED                           *\n*              2. $HASP395 jobname  ENDED                             *\n*              3. $HASP310 tsuname  TERMINATED                        *\n*                                                                     *\n*            It marks HASP373 messages issued for batch jobs          *\n*            and TSO users non-deletable on the master console        *\n*            until the job ends or until the TSO user logs off.       *\n*            For TSO users, this exit also adds the terminal ID       *\n*            and the user name to the text of the HASP373 message.    *\n*                                                                     *\n*            The HASP373 message is processed as follows:             *\n*              1. for a batch job, the message is shortened to fit    *\n*                 on a single line.                                   *\n*              2. for a TSO user, the terminal name and the user      *\n*                 name (as defined to RACF) are added to the text of  *\n*                 the message which then looks like the following:    *\n*                 $HASP373 JOHNDOE  STARTED  L902  JOHN DOE           *\n*              3. the message is made non-deletable (DESC=2)          *\n*              4. the message's color is changed to turquoise (TSO    *\n*                 user) or yellow (batch job).                        *\n*              5. the message number is \"remembered\" using the        *\n*                 CREATE function of the name/token service.          *\n*                                                                     *\n*            When the program is invoked for the HASP310 or HASP395   *\n*            messages it retrieves the message number of the HASP373  *\n*            message and issues DOM to delete it.                     *\n*                                                                     *\n*            As a result of this processing, the HASP373 message      *\n*            for every TSO user appears in turquoise on the master    *\n*            console until the user logs off, and shows, in addition  *\n*            to the user-id, the terminal id and user name.           *\n*                                                                     *\n* AUTHOR = Gilbert Saint-flour                                        *\n*                                                                     *\n* ENVIRONMENT = See below                                             *\n*                                                                     *\n*    DEPENDENCIES: MVS/ESA 4.2.2 or OS/390                            *\n*                                                                     *\n* MODULE TYPE = PROCEDURE, (CSECT TYPE)                               *\n*                                                                     *\n*    PROCESSOR = IBM HIGH LEVEL ASSEMBLER/MVS                         *\n*                                                                     *\n*    MODULE SIZE = 1K                                                 *\n*                                                                     *\n*    ATTRIBUTES = Reenterable, RMODE ANY, AMODE 31,                   *\n*                 Supervisor State, Key 0                             *\n*                                                                     *\n* OPERATION = See documentation for IEAVMXIT                          *\n*                                                                     *\n* INSTALLATION = See Below                                            *\n*                                                                     *\n*    1. Link-edit HASP373 into an APF-authorized link-list            *\n*       library and refresh LLA.                                      *\n*                                                                     *\n*    2. Add the following lines to the active MPFLSTnn                *\n*       member in SYS1.PARMLIB:                                       *\n*                                                                     *\n*         $HASP310,SUP(NO),RETAIN(NO),USEREXIT(HASP373)               *\n*         $HASP373,SUP(NO),RETAIN(NO),USEREXIT(HASP373)               *\n*         $HASP395,SUP(NO),RETAIN(NO),USEREXIT(HASP373)               *\n*                                                                     *\n*    3. Issue the SET MPF=nn command to activate HASP373.             *\n*                                                                     *\n* PARAMETERS = See documentation for IEAVMXIT                         *\n*                                                                     *\n* RETURN-CODES = NONE                                                 *\n*                                                                     *\n* CHANGE ACTIVITY                                                     *\n*                                                                     *\n*  $101 Use Name/Token services to store id of HASP373 message        *\n*       Process \"HASP310 userid terminated at end of memory\" message  *\n*  $102 Adjust user's name to prevent line overflow                   *\n*                                                                     *\n***********************************************************************\nHASP373  RSECT\nHASP373  RMODE ANY\n         BAKR  R14,0                   save registers\n         LR    R10,R15\n         USING HASP373,R10\n         L     R11,0(,R1)              CTXT PARM LIST\n         USING CTXT,R11\n         L     R12,CTXTTXPJ            TEXT MAJOR POINTER\n         USING CTXTATTR,R12\n         CLC   =C'HASP310 ',CTXTTMSG+1 \"$HASP310 TSOuser  terminated\"\n         BE    HASP395\n         CLC   =C'HASP373 ',CTXTTMSG+1 \"$HASP373 TSOuser  STARTED\"\n         BE    HASP373$\n         CLC   =C'HASP395 ',CTXTTMSG+1 \"$HASP395 TSOuser  ENDED\"\n         BE    HASP395\n         PR\n*---------------------------------------------------------------------*\n*        Add termid and name to $HASP373 message                      *\n*---------------------------------------------------------------------*\nHASP373$ L     R4,X'224'               MY ASCB (PSAAOLD)\n         USING ASCB,R4\n         L     R5,ASCBASXB             MY ASXB\n         USING ASXB,R5\n         ICM   R5,B'1111',ASXBSENV     MY ACEE\n         BNP   HASP373J                no, exit\n         USING ACEE,R5\n         CLI   ACEETRID,C' '           TERMINAL ID?\n         BNH   HASP373J                no, exit\n         ICM   R6,B'1111',ACEEUNAM     NAME\n         BNP   HASP373J                no, exit\n         SLR   R7,R7\n         IC    R7,0(,R6)               LENGTH+1 OF NAME\n         BCTR  R7,0                    LENGTH OF NAME\n         STRING (CTXTTMSG,,T),1X,ACEETRID,1X,(1(R6),(R7),T),           X\n               INTO=CTXTTMSG\n         STH   R15,CTXTTLEN            adjust length\n         OI    CTXTCOLR,CTXTTURQ       COLOR=TURQUOISE\n         B     DESC2\n*\n*        Shorten HASP373 JOB1 STARTED - INIT A - CLASS A - SYS P390\n*\nHASP373J EQU   *\n         LA    R0,50                   max text len on 1st line\n         CH    R0,CTXTTLEN             too long?\n         BNL   HASP373X                no, exit\n         STH   R0,CTXTTLEN             adjust length\n         OI    CTXTCOLR,CTXTYELO       COLOR=YELLOW\n*\n*        set DESC=2 to make the message non-deletable\n*\nDESC2    EQU   *\n*\n         OI    CTXTRFB1,CTXTRCMT       CHANGE THE MESSAGE TEXT\n         OI    CTXTERF1,CTXTEMCO       CHANGE THE COLOR\n*\n         L     R5,CTXTDCP              Descriptor codes\n         USING CTXTDESC,R5\n         OI    CTXTDC1,CTXTDC01        DESC=2\n         OI    CTXTRFB1,CTXTRCDC       CHANGE THE DESCRIPTOR CODES\n*\n         OI    CTXTERF1,CTXTEMIN       CHANGE THE INTENSITY\n         OI    CTXTINTN,CTXTINOR       INTENSITY=NORMAL\n*\n*        Invoke name/token services to store the message number\n*        for later retrieval when HASP395 is processed.\n*\n         STORAGE OBTAIN,LENGTH=DYNAML,SP=241\n         LR    R5,R1\n         USING DYNAM,R5\n         MVC   NT_NAME,CTXTTMSG+1      HASP373 TSOuser\n*\n*        If the job is restarting after a $E, issue DOM for\n*        previous HASP373 message and delete existing N/T pair\n*\n         CALL  IEANTRT,                RETRIEVE A NAME/TOKEN PAIR      X\n               (=A(IEANT_SYSTEM_LEVEL),                                X\n               NT_NAME,                HASP373 TSOuser (name)          X\n               NT_TOKEN,               msg number (token)              X\n               RETCODE),                                               X\n               MF=(E,SIXWORDS)\n         LTR   R15,R15                 N/T found?\n         BNZ   HASP373R                no, create\n         ICM   R2,B'1111',NT_TOKEN     MSG ID (from CTXTSEQN)\n         DOM   MSG=(R2)                delete the message\n         CALL  IEANTDL,                DELETE A NAME/TOKEN PAIR        X\n               (=A(IEANT_SYSTEM_LEVEL),                                X\n               NT_NAME,                HASP373 TSOuser (name)          X\n               RETCODE),                                               X\n               MF=(E,SIXWORDS)\nHASP373R EQU   *\n*\n*        create N/T pair\n*\n         CALL  IEANTCR,                CREATE A NAME/TOKEN PAIR        X\n               (=A(IEANT_SYSTEM_LEVEL),                                X\n               NT_NAME,                HASP373 TSOuser (name)          X\n               CTXTSEQN,               msg number (token)              X\n               =A(IEANT_PERSIST),      PERSIST OPTION                  X\n               RETCODE),                                               X\n               MF=(E,SIXWORDS)\n         STORAGE RELEASE,LENGTH=DYNAML,SP=241,ADDR=(R5)\nHASP373X PR\n*---------------------------------------------------------------------*\n*        Delete corresponding $HASP373 message                        *\n*---------------------------------------------------------------------*\nHASP395  STORAGE OBTAIN,LENGTH=DYNAML,SP=241\n         LR    R5,R1\n         USING DYNAM,R5\n         MVC   NT_NAME,CTXTTMSG+1      HASP373 TSOuser\n         MVI   NT_NAME+5,C'7'          HASP395->HASP373\n         MVI   NT_NAME+6,C'3'          HASP395->HASP373\n         CALL  IEANTRT,                RETRIEVE A NAME/TOKEN PAIR      X\n               (=A(IEANT_SYSTEM_LEVEL),                                X\n               NT_NAME,                HASP373 TSOuser (name)          X\n               NT_TOKEN,               msg number (token)              X\n               RETCODE),                                               X\n               MF=(E,SIXWORDS)\n         ICM   R2,B'1111',NT_TOKEN     MSG ID (from CTXTSEQN)\n         DOM   MSG=(R2)                delete the message\n         CALL  IEANTDL,                DELETE A NAME/TOKEN PAIR        X\n               (=A(IEANT_SYSTEM_LEVEL),                                X\n               NT_NAME,                HASP373 TSOuser (name)          X\n               RETCODE),                                               X\n               MF=(E,SIXWORDS)\n         STORAGE RELEASE,LENGTH=DYNAML,SP=241,ADDR=(R5)\nHASP395X PR\n*---------------------------------------------------------------------*\n*        Work Area for N/T Service                                    *\n*---------------------------------------------------------------------*\nDYNAM    DSECT\nSIXWORDS DS    6F\nRETCODE  DS    1F\nNT_NAME  DS    CL16'HASP373 12345678'  N/T Name\nNT_TOKEN DS    XL16                    N/T Token\nDYNAML   EQU   *-DYNAM\n*---------------------------------------------------------------------*\n*        DSECTs for MVS control blocks                                *\n*---------------------------------------------------------------------*\n         PRINT NOGEN\nPRINT    OPSYN ANOP\n         IEZVX100                      CTXT PARM LIST\n         IHAASCB\n         IHAASXB\n         IHAACEE\n         STRING GENERATE\n         IEANTASM                      NAME/TOKEN EQUATES\n         YREGS                         REGISTER EQUATES\n         END\n//SYSLIB   DD DISP=SHR,DSN=IBMUSER.TRIMMAC               (STRING)\n//         DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200\n//*\n//LINKLLA EXEC PGM=LINKLLA,PARM=RENT\n//SYSLIN   DD DSN=*.ASMH.SYSLIN,DISP=(OLD,PASS)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.CSSLIB            Callable Services\n//SYSLMOD  DD DISP=SHR,DSN=SYS1.P390.LINKLIB(HASP373)\n//SYSPRINT DD SYSOUT=*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IEEZB816": {"ttr": 781, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91 ?\\x00\\x91 ?\\x12X\\x00v\\x00v\\x00\\x00\\xc8\\xc2\\xc2\\xf4\\xf4\\xf1\\xf0@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-07-22T00:00:00", "modifydate": "1991-07-22T12:58:00", "lines": 118, "newlines": 118, "modlines": 0, "user": "HBB4410"}, "text": "*        %GOTO GENX1;  /*\n         MACRO\n         IEEZB816 &DSECT=YES\n*                                                                    */\n*%GENX1 : ;\n*/********************************************************************/\n*/*                                                                  */\n*/* MACRO NAME - IEEZB816                                            */\n*/*                                                                  */\n*/* DESCRIPTIVE NAME - GENERAL WTO USER EXIT TABLE                   */\n*/*                                                                  */\n*/* PROPRIETARY STATEMENT =                                  @ZA81658*/\n*/*                                                          @ZA81658*/\n*/*    LICENSED MATERIALS - PROPERTY OF IBM                      @L1C*/\n*/*    THIS MODULE IS \"RESTRICTED MATERIALS OF IBM\"          @ZA81658*/\n*/*    5695-047 (C) COPYRIGHT IBM CORP.  1979, 1990              @L1C*/\n*/*    SEE COPYRIGHT INSTRUCTIONS.                           @ZA81658*/\n*/*                                                                  */\n*/* STATUS = HBB4410                                             @L1C*/\n*/*                                                                  */\n*/* FUNCTION   - CONTAINS INFORMATION RELATIVE TO THE                */\n*/*              GENERAL WTO USER EXIT (IEAVMXIT)                    */\n*/*                                                                  */\n*/* INVOCATION - PL/S - SPECIFY: %INCLUDE SYSLIB(IEEZB816)           */\n*/*                                                                  */\n*/*                    THE DEFAULT FOR THIS STRUCTURE IS BASED.      */\n*/*                    IT IS BASED ON THE POINTER GENXPTR.           */\n*/*                    IF THE STRUCTURE IS NOT TO BE BASED, DECLARE  */\n*/*                    A MACRO VARIABLE CALLED %GENXVAL AND SET IT   */\n*/*                    EQUAL TO 'NONE' BEFORE THE MACRO IS           */\n*/*                    INCLUDED.                                     */\n*/*                                                                  */\n*/*              BAL - SPECIFY: IEEZB816                             */\n*/*                    IF A DSECT IS NOT WANTED, SPECIFY DSECT=NO    */\n*/*                    ON THE MACRO INVOCATION                       */\n*/*                                                                  */\n*/* CREATED-BY - IEEMB819                                    @ZA81658*/\n*/*                                                                  */\n*/* LOCATION   - SUBPOOL 241, ABOVE THE 16M LINE.                    */\n*/*                                                                  */\n*/* POINTED-TO-BY - UCMGENXP IN THE UCM BASE.                        */\n*/*                                                                  */\n*/* Serialization =                                              @01A*/\n*/*    The GENX table is serialized on via an ENQ on the         @01A*/\n*/*    SYSZMCS.MPFTABLE resource.  An exclusive ENQ is required  @01A*/\n*/*    to change or delete the table.                            @01A*/\n*/*                                                                  */\n*/* CHANGE ACTIVITY -                                                */\n*/* $L0=MRREXITS, JBB2125,  830420, PDE8: COMM TASK USER EXITS       */\n*/*                   ZA81658                                @ZA81658*/\n*/* $01=OY46704,  JBB2220,  910722, PDBD: MPF/GENX Table             */\n*/*                                       Serialization              */\n*/* $L1=OPSSI,    HBB4410,  880104, PDFI: OPSSI EXIT ANCHOR          */\n*/*                                                                  */\n*/********************************************************************/\n* %GOTO GENXPLS; /*\n.* Removed use count                                               @01A\n.* ADD GENXCWKP, GENXRSV1, GENXCUDA                                @L1A\n         AIF   ('&DSECT' EQ 'NO').GENX000\nGENX     DSECT                         GENERAL WTO USER EXIT TABLE\n         AGO   .GENX010\n.GENX000 ANOP\nGENX     DS    0F                      GENERAL WTO USER EXIT TABLE\n.GENX010 ANOP\nGENXACRN DS    CL4                     ACRONYM 'GENX'\nGENXVRSN DS    X                       VERSION LEVEL\nGENXS212 EQU   1                       LEVEL OF OS/VS2 JBB2125\nGENXS410 EQU   2                       LEVEL OF OS/VS2 HBB4410     @L1A\nGENXVERN EQU   GENXS410                CURRENT VERSION LEVEL       @L1C\nGENXSP   EQU   241                     SUBPOOL WHERE GENX RESIDES\n         EJECT\nGENXFLGS DS    B                       ENTRY FLAGS\nGENXACTV EQU   X'80'                   IEAVMXIT IS ACTIVE\nGENXABND EQU   X'40'                   IEAVMXIT HAS ABENDED\n*        EQU   X'20'-X'01'             RESERVED\nGENXRSVD DS    XL6                     RESERVED                    @01C\nGENXENTY DS    A                       ENTRY POINT ADDRESS OF IEAVMXIT\nGENXCECB DS    0F                      K M,UEXIT= COMMAND ECB  @ZA81658\n         DS    B                       BITS PORTION OF ECB     @ZA81658\nGENXPCOD DS    FL3                     POST CODE               @ZA81658\nGENXCWKP DS    A                       POINTER TO 8-BYTE COMMON DATA\n*                                      AREA                        @L1A\nGENXRSV1 DS    CL8                     RESERVED                    @L1A\nGENXCUDA DS    CL8                     IEAVMXIT DATA AREA          @L1A\n         MEND\n*                 */\n* %GENXPLS : ;\n* %IF GENXVAL = 'NONE' %THEN %GOTO GENXPLS1;\n*DCL 1 GENX BASED(GENXPTR) BDY(WORD),/* GENERAL WTO USER EXIT TABLE  */\n* %GOTO GENXPLS2;\n* %GENXPLS1 : ;\n*DCL 1 GENX BDY(WORD),              /* GENERAL WTO USER EXIT TABLE   */\n* %GENXPLS2 : ;\n*      3 GENXACRN     CHAR(4),      /* ACRONYM 'GENX'                */\n*      3 GENXVRSN     FIXED(8),     /* VERSION LEVEL                 */\n*      3 GENXFLGS,                  /* ENTRY FLAGS                   */\n*        5 GENXACTV   BIT(1),       /* IEAVMXIT IS ACTIVE            */\n*        5 GENXABND   BIT(1),       /* IEAVMXIT HAS ABENDED          */\n*        5 *          BIT(6),       /* RESERVED                      */\n*      3 GENXRSVD     CHAR(6),      /* RESERVED                  @01C*/\n*      3 GENXENTY     PTR(31),      /* ENTRY POINT ADDRESS OF\n*                                      IEAVMXIT                      */\n*      3 GENXCECB     FIXED(31),    /* K M,UEXIT= COMMAND ECB\n*                                                            @ZA81658*/\n*       4 *           CHAR(1),      /* BITS PORTION OF ECB   @ZA81658*/\n*       4 GENXPCOD    FIXED(24),    /* POST CODE                 @L1C*/\n*      3 GENXCWKP     PTR(31),      /* POINTER TO 8-BYTE COMMON\n*                                      DATA AREA                 @L1A*/\n*      3 GENXRSV1     CHAR(8),      /* RESERVED                  @L1A*/\n*      3 GENXCUDA     CHAR(8);      /* IEAVMXIT DATA AREA        @L1A*/\n* @EJECT;\n*     /* THE ACRONYM AND THE VERSION NUMBER TO BE PLACED IN THE\n*        MAPPING OF THE GENX TABLE.                                  */\n*DCL GENXNAME CHAR(4)  CONSTANT('GENX'),/* ACRONYM                   */\n*    GENXS212 FIXED(8) CONSTANT(1), /* LEVEL OS/VS2 JBB2125          */\n*    GENXS410 FIXED(8) CONSTANT(2), /* LEVEL OS/VS2 HBB4410      @L1A*/\n* GENXVERN FIXED(8) CONSTANT(GENXS410),/* CURRENT VERSION LEVEL  @L1C*/\n*    GENXSP FIXED(8) CONSTANT(241);  /* SUBPOOL WHERE GENX RESIDES   */\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "P390IPL": {"ttr": 1027, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x965_\\x00\\x97\\t\\x0f!4\\x00\\xcb\\x00\\x0f\\x00<\\xc9\\xc2\\xd4\\xe4\\xe2\\xc5\\xd9@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1996-12-20T00:00:00", "modifydate": "1997-03-31T21:34:00", "lines": 203, "newlines": 15, "modlines": 60, "user": "IBMUSER"}, "text": "//IBMUSERI JOB (CCMVS),P390IPL,\n// NOTIFY=&SYSUID,REGION=5M,\n// CLASS=A,MSGCLASS=X,COND=(0,NE)\n//ASMH EXEC PGM=ASMA90,PARM=(NODECK,OBJECT,NOESD,NORLD,NOXREF)\n***********************************************************************\n*                                                                     *\n* MODULE NAME = P390IPL                                               *\n*                                                                     *\n* DESCRIPTIVE NAME = Automate MVS IPL and shutdown on the P390        *\n*                                                                     *\n* STATUS = R102                                                       *\n*                                                                     *\n* FUNCTION = This program is a multi-function MPF exit                *\n*            which does the following:                                *\n*                                                                     *\n*            1. Replies to the JES2 startup and TCAS IKT003D          *\n*               messages.                                             *\n*                                                                     *\n*            2. Invokes the SHUTDOWN program as a sub-task            *\n*               of the CONSOLE address-space when the operator        *\n*               enters the SHUTDOWN command.                          *\n*                                                                     *\n* AUTHOR = Gilbert Saint-flour                                        *\n*                                                                     *\n* ENVIRONMENT = See below                                             *\n*                                                                     *\n*    DEPENDENCIES: MVS/ESA V5 or OS/390                               *\n*                  SHUTDOWN utility                                   *\n*                                                                     *\n* MODULE TYPE = PROCEDURE, (CSECT TYPE)                               *\n*                                                                     *\n*    PROCESSOR = IBM HIGH LEVEL ASSEMBLER/MVS                         *\n*                                                                     *\n*    MODULE SIZE = 2K                                                 *\n*                                                                     *\n*    ATTRIBUTES = Reenterable, RMODE ANY, AMODE 31,                   *\n*                 Supervisor State, Key 0                             *\n*                                                                     *\n* OPERATION = See documentation for IEAVMXIT                          *\n*                                                                     *\n* INSTALLATION = See Below                                            *\n*                                                                     *\n*    1. Link-edit P390IPL into an APF-authorized link-list            *\n*       library and refresh LLA.                                      *\n*                                                                     *\n*    2. Add the following lines to the active MPFLSTnn                *\n*       member in SYS1.PARMLIB:                                       *\n*                                                                     *\n*         IEE305I,SUP(NO),RETAIN(NO),USEREXIT(P390IPL)                *\n*         IST020I,SUP(NO),RETAIN(NO),USEREXIT(P390IPL)                *\n*         $HASP426,SUP(NO),RETAIN(NO),USEREXIT(P390IPL)               *\n*         $HASP441,SUP(NO),RETAIN(NO),USEREXIT(P390IPL)               *\n*         $HASP454,SUP(NO),RETAIN(NO),USEREXIT(P390IPL)               *\n*                                                                     *\n*    3. Issue the SET MPF=nn command to activate P390IPL.             *\n*                                                                     *\n* PARAMETERS = See documentation for IEAVMXIT                         *\n*                                                                     *\n* RETURN-CODES = NONE                                                 *\n*                                                                     *\n* CHANGE ACTIVITY                                                     *\n*                                                                     *\n*  $101 $HASP441                                                      *\n*  $102 Fix loop in IST020I section                                   *\n*       Provide actual reply number for $HASP426\n*                                                                     *\n***********************************************************************\nP390IPL  CSECT\nP390IPL  RMODE ANY\n         BAKR  R14,0                   save registers\n         LR    R10,R15\n         USING P390IPL,R10\n         L     R11,0(,R1)              CTXT PARM LIST\n         USING CTXT,R11\n         L     R12,CTXTTXPJ            TEXT MAJOR POINTER\n         USING CTXTATTR,R12\n         USING SAVEAREA,R13\n*\n         CLC   =C'$HASP426 ',CTXTTMSG  \"specify options\"\n         BE    HASP426\n         CLC   =C'$HASP441 ',CTXTTMSG  \"reply Y to continue init\"\n         BE    REPLY_Y\n         CLC   =C'$HASP454 ',CTXTTMSG  \"bypass MAS integrity lock\"\n         BE    REPLY_Y\n         CLC   =C'IST020I ',CTXTTMSG   VTAM INITIALIZATION COMPLETE\n         BE    IST020I\n         CLC   =C'IEE305I SHUTDOWN COMMAND INVALID',CTXTTMSG\n         BE    SHUTDOWN\n         PR\n*---------------------------------------------------------------------*\n*        Reply NOREQ to $HASP426 message                              *\n*---------------------------------------------------------------------*\nHASP426  L     R0,CTXTRPYB             REPLY ID (BINARY)\n         CVD   R0,DWD                  REPLY ID (DECIMAL)\n         OI    DWD+7,X'0F'             no sign\n         UNPK  HASP426R+6(2),DWD       REPLY ID\n         LA    R1,HASP426R             addr of the command\n         BAL   R14,SENDCMD             issue the command\n         PR\nHASP426R WTO   'R 01,NOREQ',MF=L\n*---------------------------------------------------------------------*\n*        Reply Y to $HASP454 message                                  *\n*---------------------------------------------------------------------*\nREPLY_Y  L     R0,CTXTRPYB             REPLY ID (BINARY)\n         CVD   R0,DWD                  REPLY ID (DECIMAL)\n         OI    DWD+7,X'0F'             no sign\n         UNPK  HASP454R+6(2),DWD       REPLY ID\n         LA    R1,HASP454R             addr of the command\n         BAL   R14,SENDCMD             issue the command\n         PR\nHASP454R WTO   'R 02,Y',MF=L           JES2 CHKPT ERROR\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Start TCAS when VTAM is ready                                *\n*                                                                     *\n*        If there is an ORE for TCAS, it must be IKT003D TCAS         *\n*        UNABLE TO ACCEPT LOGON.  In this case, reply RETRY.          *\n*        Otherwise, issue the START TCAS command.                     *\n*                                                                     *\n*---------------------------------------------------------------------*\nIST020I  L     R3,CVTPTR               POINT AT CVT\n         L     R4,CVTCUCB-CVTMAP(,R3)  UCM\n         ICM   R5,B'1111',UCMRPYQ-UCM(R4) FIRST ORE\n         BZ    IST020M                 NO OUTSTANDING REPLIES, EXIT\n         USING OREF,R5\n*LOOP\nIST020L  CLC   =C'ORE ',ORECBID        Am I lost?\n         BNE   IST020M                 Yes, exit loop\n         CLC   =C'TCAS ',OREWTORU      USERID=TCAS ?\n         BE    IST020R                 yes, reply RETRY\n         ICM   R5,B'1111',ORELKP       NEXT ORE\n         BNZ   IST020L                 LOOP\n*ENDLOOP\nIST020M  SR    R0,R0                   CN(0)\n         MGCR  IST020S                 SEND COMMAND\n         PR\nIST020S  WTO   'S TCAS',MF=L\n*\nIST020R  MVC   IST020RR+6(2),OREID     REPLY ID\n         SR    R0,R0                   CN(0)\n         MGCR  IST020RR                SEND COMMAND\n         PR\nIST020RR WTO   'R 00,RETRY',MF=L\n*---------------------------------------------------------------------*\n*        Issue a REPLY command                                        *\n*---------------------------------------------------------------------*\nSENDCMD  BAKR  R14,0\n         ST    R1,DWD                  addr of the command\n         STIMERM SET,                                                  X\n               EXIT=SENDCMDX,          exit rtne                       X\n               BINTVL=ONESEC,          INTERVAL                        X\n               PARM=DWD,               ECB/CIB POINTERS                X\n               ID=DWD+4,               token                           X\n               MF=(E,STIMER_L)\n         PR\nONESEC   DC    AL4(100)                one second\n*---------------------------------------------------------------------*\n*        ATTACH the SHUTDOWN utility when the SHUTDOWN                *\n*        command is issued.                                           *\n*---------------------------------------------------------------------*\nSHUTDOWN L     R2,CTXTFCNP             GET ADDR OF CONSOLE ID\n         L     R1,0(,R2)               PASS CONSOLE ID TO SUB-TASK\n         ATTACH EP=SHUTDOWN,           ATTACH SHUTDOWN PGM             X\n               JSTCB=YES               PREVENT RC=X'18'\n         OI    CTXTRFB2,CTXTRDTM       SUPPRESS IEE305I MESSAGE\n         PR\n         DROP\n*---------------------------------------------------------------------*\n*        TIMER EXIT                                                   *\n*---------------------------------------------------------------------*\nSENDCMDX BAKR  R14,0\n         L     R2,4(,R1)               parm (addr of the command)\n         SR    R0,R0                   CN(0)\n         MGCR  (R2)                    SEND COMMAND\n         PR\n*\n*        work area for CVD routine\n*\nSAVEAREA DSECT\n         DS    2F\nDWD      DS    D\nSTIMER_L STIMERM SET,MF=L\n         DS    CL(SAVEAREA+72-*)       length check\n*\n         PRINT NOGEN\nPRINT    OPSYN ANOP\n         YREGS\n         IEZVX100                      CTXT PARM LIST\n         IHAORE DSECT=YES              OPERATOR REPLY ELEMENT\n         IEECUCM DSECT=YES             UNIT CONTROL MODULE\n         CVT   DSECT=YES\n         END\n//SYSLIB   DD DISP=SHR,DSN=IBMUSER.TRIMMAC               (optional)\n//         DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200\n//*\n//LINKLLA EXEC PGM=LINKLLA,PARM=RENT\n//SYSLIN   DD DSN=*.ASMH.SYSLIN,DISP=(OLD,PASS)\n//SYSLMOD  DD DISP=SHR,DSN=SYS1.P390.LINKLIB(P390IPL)\n//SYSPRINT DD SYSOUT=*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SHUTDOWN": {"ttr": 1031, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x965_\\x00\\x99\\x05O\\x11$\\x01q\\x00\\x0f\\x00?\\xc9\\xc2\\xd4\\xe4\\xe2\\xc5\\xd9@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1996-12-20T00:00:00", "modifydate": "1999-02-23T11:24:00", "lines": 369, "newlines": 15, "modlines": 63, "user": "IBMUSER"}, "text": "//IBMUSERW JOB (ACCT#),SHUTDOWN,\n// NOTIFY=&SYSUID,REGION=5M,\n// CLASS=A,MSGCLASS=X,COND=(0,NE)\n//ASMH EXEC PGM=ASMA90,PARM=(NODECK,OBJECT,NOESD,NORLD,NOXREF)\n***********************************************************************\n*                                                                     *\n* MODULE NAME = SHUTDOWN                                              *\n*                                                                     *\n* DESCRIPTIVE NAME = Automate MVS shutdown procedure on the P390      *\n*                                                                     *\n* STATUS = R103                                                       *\n*                                                                     *\n* FUNCTION = The SHUTDOWN program stops all active jobs, started      *\n*            tasks and TSO address spaces, then issues $PJES2, Z EOD  *\n*            and QUIESCE.  To ensure the system comes down properly,  *\n*            SHUTDOWN installs itself as a WTO exit and monitors      *\n*            termination messages of critical sub-systems.            *\n*            SHUTDOWN executes as a sub-task of the CONSOLE address   *\n*            space.  It is ATTACHed by the P390IPL MPF exit when the  *\n*            SHUTDOWN command has been entered by the operator.       *\n*                                                                     *\n* AUTHOR = Gilbert Saint-flour                                        *\n*                                                                     *\n* ENVIRONMENT = SEE BELOW                                             *\n*                                                                     *\n*    DEPENDENCIES: MVS/ESA V5 or OS/390                               *\n*                  P390IPL utility                                    *\n*                  STRING macro                                       *\n*                                                                     *\n* MODULE TYPE = PROCEDURE, (CSECT TYPE)                               *\n*                                                                     *\n*    PROCESSOR = IBM HIGH LEVEL ASSEMBLER/MVS                         *\n*                                                                     *\n*    MODULE SIZE = 2K                                                 *\n*                                                                     *\n*    ATTRIBUTES = RMODE ANY, AMODE 31,                                *\n*                 Supervisor State, Key 0                             *\n*                                                                     *\n* OPERATION = See comments in source code.                            *\n*                                                                     *\n* INSTALLATION = SHUTDOWN must be link-edited in an APF-authorized    *\n*                link-list library.                                   *\n*                                                                     *\n*                NOTE: you must have a module called IEAVMXIT in your *\n*                system libraries.  If you don't, you can make one up *\n*                by copying IEFBR14 under the name IEAVMXIT into any  *\n*                library concatenated to the LINKLIB or the LPALIB.   *\n*                                                                     *\n* PARAMETERS = R1 on entry contains the console ID on                 *\n*              which the SHUTDOWN command was entered.                *\n*                                                                     *\n* RETURN-CODES = NONE                                                 *\n*                                                                     *\n* CHANGE ACTIVITY                                                     *\n*                                                                     *\n*  $101 Shut Down RACF (OW16573/UW24421)                              *\n*  $102 Shut Down BPXOINIT                                            *\n*  $103 Cancel remaining Jobs and STCs                                *\n*                                                                     *\n***********************************************************************\nSHUTDOWN CSECT\nSHUTDOWN RMODE ANY\n         BAKR  R14,0                   save registers\n         LR    R10,R15\n         USING SHUTDOWN,R10\n         LR    R11,R1                  CONSOLE ID\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Move IEAVMXIT code to ECSA                                   *\n*                                                                     *\n*---------------------------------------------------------------------*\n         STORAGE OBTAIN,SP=241,KEY=0,LENGTH=DYNAML\n         LR    R12,R1                  A(DYNAM)\n         USING IEAVMXIT,R12\n         L     R14,=A(IEAVMXIT)        FROM\n         LA    R15,DYNAML\n         LA    R0,IEAVMXIT             TO\n         LA    R1,DYNAML\n         MVCL  R0,R14                  MOVE IEAVMXIT\n         MVC   ASCB099,PSAAOLD-PSA     OWN ASCB\n*---------------------------------------------------------------------*\n*                                                                     *\n*        SET-UP IEAVMXIT                                              *\n*                                                                     *\n*---------------------------------------------------------------------*\n         L     R3,CVTPTR\n         USING CVTMAP,R3\n         L     R4,CVTCUCB              UNIT CONTROL MODULE (UCM)\n         USING UCM,R4\n         L     R5,UCMBFEXT             ADDR OF FIXED EXTENSION BASE\n         USING UCMFEXTA,R5\n         ICM   R6,B'1111',UCMGENXP     GENERAL WTO EXIT TABLE\n         BNZ   GOTGENX                 OK, JUMP\n         STRING 'K M,UEXIT=Y',INTO=WTO1TXT\n         LR    R0,R11                  CN(0)\n         MGCR  WTO1L                   ACTIVATE IEAVMXIT\n         STIMER WAIT,BINTVL==F'100'    WAIT FOR 1 SECOND\n         ICM   R6,B'1111',UCMGENXP     GENERAL WTO EXIT TABLE\nGOTGENX  EQU   *\n         USING GENX,R6\n         BSM   R12,0                   SET AMODE\n         ST    R12,GENXENTY            STORE A(IEAVMXIT)\n         MVI   GENXFLGS,GENXACTV       IEAVMXIT IS ACTIVE\n*---------------------------------------------------------------------*\n*                                                                     *\n*        STOP JES INITIATORS AND VTAM                                 *\n*                                                                     *\n*---------------------------------------------------------------------*\n         STRING '$PI',INTO=WTO1TXT     STOP INITIATORS\n         BAL   R14,MGCR                ISSUE COMMAND\n         STRING 'Z NET,QUICK',INTO=WTO1TXT STOP VTAM\n         BAL   R14,MGCR                ISSUE COMMAND\n*---------------------------------------------------------------------*\n*                                                                     *\n*        STOP ALL ACTIVE JOBS, STCS, TSUS                             *\n*                                                                     *\n*---------------------------------------------------------------------*\n         LA    R4,2                    FIRST ASID\n         L     R5,CVTASVT              POINT TO ASVT\n         L     R5,ASVTMAXU-ASVT(,R5)   MAX ASID\n*LOOP\nLOOP1    LOCASCB ASID=(R4)\n         LTR   R15,R15                 ASCB active?\n         BNZ   LOOP1NXT                no, ignore\n         LR    R7,R1\n         USING ASCB,R7\n         L     R1,ASCBJBNS             JOB NAME\n         MVC   JOBNAME,0(R1)           move job name\n         CLC   =C'BPXOINIT',JOBNAME    OMVS INITIATOR?\n         BE    LOOP1BPX                YES, STOP BPXAS\n         IAZXJSAB READ,ASCB=(R7),JOBNAME=JOBNAME\n         LTR   R15,R15\n         BNZ   LOOP1NXT\n         CLC   =C'INIT ',JOBNAME       JES2 INITIATOR?\n         BE    LOOP1NXT                YES, IGNORE\n         CLC   =C'ASCHINT ',JOBNAME    APPC INITIATOR?\n         BE    LOOP1ASC                YES, CANCEL ASCH\n         CLC   =C'RACF ',JOBNAME       RACF address space?\n         BE    LOOP1RAC                YES, STOP RACF\n         STRING 'P ',JOBNAME,INTO=WTO1TXT\n         BAL   R14,MGCR                ISSUE COMMAND\n         B     LOOP1NXT                YES, IGNORE\nLOOP1BPX STRING 'F BPXOINIT,SHUTDOWN=FORKINIT',INTO=WTO1TXT\n         BAL   R14,MGCR                ISSUE COMMAND\n         B     LOOP1NXT\nLOOP1ASC NOP   LOOP1NXT                ONCE ONLY\n         OI    *-3,X'F0'               ONCE ONLY\n         STRING 'C APPC',INTO=WTO1TXT\n         BAL   R14,MGCR                ISSUE COMMAND\n         STRING 'C ASCH',INTO=WTO1TXT\n         BAL   R14,MGCR                ISSUE COMMAND\n         B     LOOP1NXT\n*        RACF doesn't have to be stopped if OW16573/UW24421 is applied\nLOOP1RAC STRING '#STOP',INTO=WTO1TXT\n         BAL   R14,MGCR                ISSUE COMMAND\nLOOP1NXT LA    R4,1(,R4)               NEXT ASID\n         BCT   R5,LOOP1                NEXT ASID\n*ENDLOOP\n         BAL   R14,WAITASEC            WAIT FOR A WHILE\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Display active JOBs/STCs/TSUs                                *\n*                                                                     *\n*---------------------------------------------------------------------*\n         LA    R4,2                    FIRST ASID\n         L     R5,CVTASVT              POINT TO ASVT\n         L     R5,ASVTMAXU-ASVT(,R5)   MAX ASID\n*LOOP\nLOOP2    LOCASCB ASID=(R4)\n         LTR   R15,R15                 ASCB active?\n         BNZ   LOOP2NXT                no, ignore\n         LR    R7,R1\n         USING ASCB,R7\n         IAZXJSAB READ,ASCB=(R7),                                      X\n               USERID=USERID,JOBNAME=JOBNAME,JOBID=JOBID\n         LTR   R15,R15\n         BNZ   LOOP2NXT\n         STRING 'JOB=',JOBNAME,' USER=',USERID,' JOBID=',JOBID,        X\n               ' ASID=',(ASCBASID,,X),                                 X\n               INTO=WTO1TXT\n         WTO   MF=(E,WTO1L)\nLOOP2NXT LA    R4,1(,R4)               NEXT ASID\n         BCT   R5,LOOP2                NEXT ASID\n*ENDLOOP\n         BAL   R14,WAITASEC            WAIT FOR A WHILE\n*---------------------------------------------------------------------*\n*                                                                     *\n*        Cancel remaining JOBs/STCs                                   *\n*                                                                     *\n*---------------------------------------------------------------------*\n         LA    R4,2                    FIRST ASID\n         L     R5,CVTASVT              POINT TO ASVT\n         L     R5,ASVTMAXU-ASVT(,R5)   MAX ASID\n*LOOP\nLOOP3    LOCASCB ASID=(R4)\n         LTR   R15,R15                 ASCB active?\n         BNZ   LOOP3NXT                no, ignore\n         LR    R7,R1\n         USING ASCB,R7\n         IAZXJSAB READ,ASCB=(R7),                                      X\n               USERID=USERID,JOBNAME=JOBNAME,JOBID=JOBID\n         LTR   R15,R15\n         BNZ   LOOP3NXT\n         CLI   JOBID,C'T'              TSU ?\n         BE    LOOP3NXT                yes, skip it\n         STRING 'CANCEL ',(JOBNAME,,T),                                X\n               ',A=',(ASCBASID,,X),                                    X\n               INTO=WTO1TXT\n         BAL   R14,MGCR                ISSUE COMMAND\nLOOP3NXT LA    R4,1(,R4)               NEXT ASID\n         BCT   R5,LOOP3                NEXT ASID\n*ENDLOOP\n*---------------------------------------------------------------------*\n*                                                                     *\n*        STOP JES2                                                    *\n*                                                                     *\n*---------------------------------------------------------------------*\nPJES2    LA    R1,=CL10'$HASP099'      \"ALL AVAILABLE FUNCTIONS COMPL\"\n         BAL   R14,WAIT4MSG            WAIT FOR MESSAGE\n*\n         STRING '$PJES2',INTO=WTO1TXT\n         BAL   R14,MGCR                ISSUE COMMAND\n*\n         LA    R1,=CL10'$HASP085'      \"JES2 TERMINATION COMPLETE\"\n         BAL   R14,WAIT4MSG            WAIT FOR MESSAGE\n*---------------------------------------------------------------------*\n*                                                                     *\n*        HALT EOD                                                     *\n*                                                                     *\n*---------------------------------------------------------------------*\nZEOD     STRING 'Z EOD',INTO=WTO1TXT\n         BAL   R14,MGCR                ISSUE COMMAND\n*\n         LA    R1,=CL10'IEE334I'       \"HALT EOD SUCCESSFUL\"\n         BAL   R14,WAIT4MSG            WAIT FOR MESSAGE\n*\nUEXITN   STRING 'K M,UEXIT=N',INTO=WTO1TXT\n         BAL   R14,MGCR                ISSUE COMMAND\n*\n         BAL   R14,WAITASEC            WAIT FOR A WHILE\n*\nQUIESCE  STRING 'QUIESCE',INTO=WTO1TXT\n         BAL   R14,MGCR                ISSUE COMMAND\n         PR                            EXIT\n*---------------------------------------------------------------------*\n*        ISSUE A COMMAND                                              *\n*---------------------------------------------------------------------*\nMGCR     BAKR  R14,0\n         LR    R0,R11                  CONSOLE ID\n         MGCR  WTO1L                   SEND COMMAND\n*ORG *-2 MGCR->WTO\n*SVC 35  MGCR->WTO\n         PR\n*---------------------------------------------------------------------*\n*        WAIT FOR A MESSAGE                                           *\n*---------------------------------------------------------------------*\nWAIT4MSG BAKR  R14,0\n         STRING '>>> Waiting for ',((R1),10,T),' message <<<',         X\n               INTO=(WTO4L+4,40)\n         MVI   ECB099,0\n         WTO   MF=(E,WTO4L)            ISSUE MESSAGE\n         LR    R2,R1                   SAVE MSG ID\n         WAIT  ECB=ECB099              ECB IS POSTED BY IEAVMXIT\n         DOM   MSG=(R2)                DELETE MESSAGE\n         PR\nWTO4L    WTO   '                                                     ',X\n               DESC=2,ROUTCDE=1,MF=L\n*---------------------------------------------------------------------*\n*        WAIT FOR A FEW SECONDS                                       *\n*---------------------------------------------------------------------*\nWAITASEC BAKR  R14,0\n         STIMER WAIT,BINTVL=AWHILE\n         PR\n*\nAWHILE   DC    AL4(10*100)             WAIT A FEW SECONDS\n         LTORG\n         DROP\n***********************************************************************\n*                                                                     *\n*        IEAVMXIT                                                     *\n*                                                                     *\n*        This code executes from the ECSA and must be                 *\n*        self-relocatable.  It replies to TCAS WTORs and              *\n*        monitors selected messages to notify the mainline            *\n*        of termination messages from critical sub-systems.           *\n*                                                                     *\n*        Unlike the mainline which executes in the CONSOLE            *\n*        address space, IEAVMXIT executes in the address              *\n*        space of the issuer of the WTO.                              *\n*                                                                     *\n***********************************************************************\nIEAVMXIT CSECT\nIEAVMXIT RMODE ANY\n         BAKR  R14,0\n         LR    R12,R15\n         USING IEAVMXIT,R12\n         L     R10,0(,R1)              A(CTXT)\n         USING CTXT,R10\n         L     R11,CTXTTXPJ            TEXT MAJOR POINTER\n         USING CTXTATTR,R11\n         CLC   =C'IKT010D ',CTXTTMSG   \"TSO USERS ACTIVE\"\n         BE    IKT010D\n         CLC   =C'IKT012D ',CTXTTMSG   \"TCAS TERMINATION IN PROGRESS\"\n         BE    IKT012D\n         CLC   =C'$HASP099 ',CTXTTMSG  \"ALL AVAILABLE FUNCTIONS COMPLT\"\n*CLC =C'IEE136I ',CTXTTMSG   \"D T\"\n         BE    HASP099\n         CLC   =C'$HASP085 ',CTXTTMSG  \"JES2 TERMINATION COMPLETE\"\n         BE    HASP099\n         CLC   =C'IEE334I ',CTXTTMSG   \"HALT EOD SUCCESSFUL\"\n         BE    HASP099\n         PR                            IGNORE ALL OTHER MESSAGES\n*\n*        REPLY TO TCAS MESSAGES\n*\nIKT010D  MVC   IKTREPLY+9(3),=C'SIC'\nIKT012D  L     R0,CTXTRPYB             REPLY ID\n         CVD   R0,DWD                  MAKE IT DECIMAL\n         OI    DWD+7,15                NO SIGN\n         UNPK  IKTREPLY+6(2),DWD       REPLY ID\n         SLR   R0,R0                   CN(0)\n         MGCR  IKTREPLY\n         PR\nIKTREPLY WTO   'R XX,U  ',MF=L\n*\n*        XPOST MAIN-LINE\n*\nHASP099  L     R2,ASCB099              GET ASCB ADDRESS\n         POST  ECB099,0,                                               X\n               ASCB=(R2),ECBKEY=0,ERRET=HASP099X,                      X\n               LINKAGE=SYSTEM\nHASP099X PR\n         LTORG\nDWD      DS    D\nWTO1L    DC    Y(116,0)                CMD PREFIX\nWTO1TXT  DS    CL112                   COMMAND\nUSERID   DS    CL8                     XJSAB\nJOBNAME  DS    CL8                     XJSAB\nJOBID    DS    CL8                     XJSAB\nECB099   DS    F                       MSG WAIT\nASCB099  DS    A(ASCB)                 ASCB OF CONSOLE ADDRESS SPACE\nDYNAML   EQU   *-IEAVMXIT\n*\n         PRINT NOGEN\nPRINT    OPSYN ANOP\n         YREGS\n         STRING GENERATE\n         CVT   DSECT=YES\n         IHAPSA\n         IHAASCB\n         IHAASSB\n         IHAASVT\n         IAZJSAB\n         IEECUCM DSECT=YES             UNIT CONTROL MODULE\nGENX     IEEZB816                      GENERAL WTO USER EXIT TABLE\n         IEZVX100                      CTXT\n         END\n//SYSLIB   DD DISP=SHR,DSN=IBMUSER.TRIMMAC               (optional)\n//         DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//         DD DISP=SHR,DSN=IBMUSER.P390IPL.PDS           (IEEZB816)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200\n//*\n//LINKLLA EXEC PGM=LINKLLA,PARM=NOREUS\n//SYSLIN   DD DSN=*.ASMH.SYSLIN,DISP=(OLD,PASS)\n//SYSLMOD  DD DISP=SHR,DSN=SYS1.P390.LINKLIB(SHUTDOWN)\n//SYSPRINT DD SYSOUT=*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "STRING": {"ttr": 1283, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x06\\x00\\x00\\x00x#\\x9f\\x01\\x01\\x02\\x9f\\x12\\x10\\x04\\xbe\\x00\\x19\\x00\\xff\\xe6\\xe2\\xc2\\xc7@@@@@@'", "ispf": {"version": "05.06", "flags": 0, "createdate": "1978-08-27T00:00:00", "modifydate": "2001-01-29T12:10:00", "lines": 1214, "newlines": 25, "modlines": 255, "user": "WSBG"}, "text": "*/IBMUSERM JOB (ACCT#),STRING,\n*/ NOTIFY=&SYSUID,\n*/ CLASS=A,MSGCLASS=X,COND=(0,NE)\n*/ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,\n*/ NOXREF)\n***********************************************************************\n*                                                                     *\n* MACRO NAME = STRING                                                 *\n*                                                                     *\n* DESCRIPTIVE NAME = STRING MACRO INSTRUCTION.                        *\n*                                                                     *\n* FUNCTION = PROVIDE CAPABILITIES SIMILAR TO PUT EDIT (OF PL/I)       *\n*            OR STRING (OF COBOL) TO ASSEMBLER PROGRAMS.              *\n*                                                                     *\n* STATUS = R505                                                       *\n*                                                                     *\n* AUTHOR = GILBERT SAINT-FLOUR <carlos@gsf-soft.com>                  *\n*                                                                     *\n* ENVIRONMENT = SEE BELOW                                             *\n*                                                                     *\n*     AMODE = ANY                                                     *\n*     SCP   = MVS/ESA OR OS/390                                       *\n*     KEY   = ANY                                                     *\n*     MODE  = ANY                                                     *\n*     APF   = OFF                                                     *\n*                                                                     *\n* OPERATION = SEE DOCUMENTATION AT THE END OF THIS FILE               *\n*                                                                     *\n* INVOCATION = SEE DOCUMENTATION AT THE END OF THIS FILE              *\n*                                                                     *\n* NOTES = SEE DOCUMENTATION AT THE END OF THIS FILE                   *\n*                                                                     *\n* CHANGE ACTIVITY                                                     *\n*                                                                     *\n*  $301  FIX BUGS WITH (XYZ,,L8) AND INTO=((R1),(R2))                 *\n*  $302  GENERATE $DEBUG BOOT-STRAP IN FINAL_CALL INVOCATION          *\n*  $303  REPLACE @STRPAD WITH @STRBLANKS                              *\n*  $304  USE @00-@15 INSTEAD OF R0-R15 FOR REGISTER EQUATES           *\n*  $306  TAILOR @STRING CSECT TO PROGRAM'S REQUIREMENTS               *\n*        LITERALS CAN BE CODED AS 'ABC' OR C'ABC' OR X'C1C2C3'        *\n*        USE L'PSATOLD AS IMPLICIT LENGTH FOR (PSATOLD-PSA,,X)        *\n*  $307  FINAL_CALL OPTION CHANGED TO GENERATE                        *\n*        ADD NOCSECT AND LOCTR OPTIONS TO GENERATE CALL               *\n*  $308  USE L'RBCDE AS IMPLICIT LENGTH FOR (PRB.RBCDE,,X)            *\n*        PREVENT S0C4 WHEN ADDR IS BAD AND LENGTH IS ZERO             *\n*  $400  REORG THE CODE TO SIMPLIFY FEATURE SELECTION                 *\n*        BLANKS NO LONGER USED OR GENERATED                           *\n*  $401  GENERATE @STRHEXT WHEN ((REG),,X) ONLY HEX FIELD             *\n*  $502  @STRING ROUTINE REWRITTEN FOR MVS/ESA:                       *\n*        -  USE LINKAGE STACK TO STORE CALLER'S REGISTERS             *\n*        -  ADD SUPPORT FOR AR MODE                                   *\n*  $503  DATE CONVERSION TO YYYY-MM-DD FORMAT (ISO STANDARD)          *\n*        IMPROVE SUPPORT FOR AR MODE                                  *\n*  $504  SET &STRBLANKS TO 10 WHEN PROCESSING DATES                   *\n*  $505  Allow for 128K-offset                                        *\n***********************************************************************\n         MACRO\n&NAME    STRING &INTO=,&PRINT=NOGEN\n         GBLC  &STRING_MACRO_VERSION\n&STRING_MACRO_VERSION SETC '505'       current version\n         AIF   ('&PRINT' EQ 'NOGEN').NOGEN\n         PUSH  PRINT\n         PRINT GEN\n.NOGEN   GBLA  &$_LIT\n         GBLB  &$_FEAT(16)             FEATURES\n.*                                       1 LITERALS\n.*                                       2 REGISTER (BIN)\n.*                                       3 REGISTER (HEX)\n.*                                       4 PACKED\n.*                                       5 JDATE\n.*                                       6 BINARY\n.*                                       7 HEX\n.*                                       8 NUMERIC\n.*                                       9 LEFT JUST (NUMERIC)\n.*                                       10 LEADING ZEROES\n.*                                       11 TRUNCATE (CHAR STRING)\n.*                                       12 %TIME\n         GBLC  &$_LITS(9999)           LITERALS\n         LCLA  &I,&J,&N\n         AIF   (N'&SYSLIST EQ 1 AND '&SYSLIST(1)' EQ 'GENERATE'        X\n               AND T'&INTO EQ 'O').GENL\n         AIF   (N'&SYSLIST EQ 2 AND '&SYSLIST(1)' EQ 'GENERATE'        X\n               AND '&SYSLIST(2)' EQ 'FULL' AND T'&INTO EQ 'O').GENL\n         AIF   (N'&SYSLIST EQ 2 AND '&SYSLIST(1)' EQ 'GENERATE'        X\n               AND '&SYSLIST(2)' EQ 'LOCTR' AND T'&INTO EQ 'O').GENL\n         AIF   (N'&SYSLIST EQ 2 AND '&SYSLIST(1)' EQ 'GENERATE'        X\n               AND '&SYSLIST(2)' EQ 'NOCSECT' AND T'&INTO EQ 'O').GENL\n&LABEL   SETC  'IHB&SYSNDX'            STEM FOR LOCAL LABELS\n&LQ      SETC  'L'''                   LENGTH ATTRIBUTE\n&STR     SETC  '  R&STRING_MACRO_VERSION'\n&NAME    BAS   R14,$STRING&STR         CALL @STRING SUB-ROUTINE\n         AIF   (N'&SYSLIST EQ 0).ERR1  NO POSITIONAL OPERANDS, ERROR\n         AIF   (T'&INTO EQ 'O').ERR2   NO RECEIVING FIELD, ERROR\n         AIF   (N'&INTO GT 2).ERR2     INTO=(A,32,BLURB)\n         DC    AL2((&LABEL.P-*)/2)     OFFSET TO FIELD DESCRIPTORS\n         AIF   (D'$LITERAL).LOCTR2     NOT FIRST TIME, JUMP\n$LTORG   LOCTR                         ADDRESSABLE CONSTANTS\n$FARRTNE LOCTR                         FAR ROUTINES\n.LOCTR2  ANOP\n$LITERAL LOCTR                         NON-ADDRESSABLE CONSTANTS\n&TO1     SETC  '&INTO(1)'\n&TO2     SETC  '&LQ&INTO'\n         AIF   (N'&INTO EQ 1).PUNTO8            JUMP IF INTO=XXX\n         AIF   ('&INTO(1)'(1,1) NE '(').PUNTO3  JUMP IF INTO=(XXX,44)\n&TO1     SETC  '0&INTO(1)'                              INTO=((R3),44)\n.PUNTO3  ANOP\n&TO2     SETC  '&INTO(2)'                               INTO=(XXX,LL)\n         AIF   ('&INTO(2)'(1,1) NE '(').PUNTO8  JUMP IF INTO=(XXX,44)\n&TO2     SETC  '0&INTO(2)'                              INTO=(XXX,(R1))\n.PUNTO8  ANOP\n&LABEL.P DC    S(&TO1,&TO2)\n.*--------------------------------------------------------------------*\n.*-------      FIELDS       ------------------------------------------*\n.*--------------------------------------------------------------------*\n         LCLB  &LAST,&BIN,&HEX,&REG,&PACKED,&LEFT,&ZERO,&TRUNC\n&I       SETA  1\n.*LOOP\n.LOOP1   ANOP\n         AIF   (N'&SYSLIST(&I) GT 3).FLD990   TOO MANY SUB-OPERANDS\n&LAST    SETB  (&I EQ N'&SYSLIST)                LOOP\n         AIF   ('&SYSLIST(&I)'(1,1) EQ '''').LIT00\n         AIF   ('&SYSLIST(&I)'(K'&SYSLIST(&I),1) EQ '''').LIT01\n.*--------------------------------------------------------------------*\n.*       PROCESS FIRST SUBPARAMETER (ADDRESS)                         *\n.*--------------------------------------------------------------------*\n&P1S     SETC  '&SYSLIST(&I,1)'\n&P2L     SETC  '0'                     INPUT LENGTH\n&P3L     SETC  '0'                     OUTPUT LENGTH\n         AIF   ('&SYSLIST(&I)'(1,1) GE '0').FLD180 SPACES\n         AIF   ('&SYSLIST(&I)' EQ '%TIME').FLD190 %TIME\n         AIF   ('&SYSLIST(&I,1)'(1,1) NE '(').FLD115 (R2)\n         AIF   (T'&SYSLIST(&I,2) EQ 'O').FLD250\n&P1S     SETC  '0&SYSLIST(&I,1)'       CHANGE (R1) TO 0(R1)\n.FLD115  ANOP\n.*\n.*       EXTRACT RBCDE FROM PRB.RBCDE (HLASM)\n.*\n&L       SETA  1\n.*--LOOP\n.FLD131  AIF   ('&P1S'(&L,1) EQ '.').FLD133\n&L       SETA  &L+1\n         AIF   (&L LT K'&P1S).FLD131\n.*--ENDLOOP\n&P2L     SETC  '&P1S'                    ABCDEF FROM ABCDEF\n         AGO   .FLD134\n.FLD133  ANOP\n&P2L     SETC  '&P1S'(&L+1,K'&P1S-&L)    RBCDE FROM PRB.RBCDE\n.FLD134  ANOP\n.*\n         AIF   (T'&SYSLIST(&I,2) NE 'O').FLD200\n.*\n         AIF   (NOT D'&P2L).FLD140\n&P2C     SETC  T'&P2L\n.*MNOTE *,'&P1 &P2C'\n         AIF   ('&P2C' EQ 'F' OR '&P2C' EQ 'H' OR '&P2C' EQ 'P').FLD220\n         AIF   ('&P2C' EQ 'G').FLD210  FL2\n.FLD140  ANOP\n.*\n.*       EXTRACT PSATOLD FROM PSATOLD-PSA\n.*\n&L       SETA  1\n.*--LOOP\n.FLD141  AIF   ('&P2L'(&L,1) EQ '-').FLD143\n         AIF   ('&P2L'(&L,1) EQ '+').FLD143\n&L       SETA  &L+1\n         AIF   (&L LT K'&P2L).FLD141\n.*--ENDLOOP\n&P2L     SETC  '&LQ&P2L'               L'ABCDEF\n         AGO   .FLD300\n.FLD143  ANOP\n&P2L     SETC  '&LQ'.'&P2L'(1,&L-1)    L'PSATOLD FROM PSATOLD-PSA\n         AGO   .FLD300\n.*\n.FLD180  AIF   ('&SYSLIST(&I)'(K'&SYSLIST(&I),1) NE 'X').FLD800\n&P2L     SETC  '&SYSLIST(&I)'(1,K'&SYSLIST(&I)-1) 12\n&J       SETA  X'4000'+&LAST*X'8000'\n         DC    AL2(0,&P2L,&J)          BLANKS\n&$_FEAT(1) SETB 1                      LITERAL\n         AGO   .LIT99\n.*\n.FLD190  ANOP                          %TIME\n&P1S     SETC  '1(14)'                 %TIME\n&$_FEAT(12) SETB 1                     %TIME\n         AGO   .FLD800\n.*--------------------------------------------------------------------*\n.*       PROCESS SECOND SUBPARAMETER (LENGTH/TYPE)                    *\n.*--------------------------------------------------------------------*\n.FLD200  AIF   (T'&SYSLIST(&I,2) EQ 'O').FLD300 NO LENGTH SPECIFIED\n&P2C     SETC  '&SYSLIST(&I,2)'\n         AGO   .FLD220\n.*T'&P1=G\n.FLD210  ANOP\n&L       SETA  L'&SYSLIST(&I)          T'&P1 = 'G'\n&P2C     SETC  'FL&L'                  T'&P1 = 'G'\n.*\n.FLD220  ANOP\n&P2L     SETC  '0&P2C'                 (R2) LENGTH\n         AIF   ('&P2C'(1,1) EQ '(').FLD300\n&P2L     SETC  '&P2C'                  3(R2) LENGTH\n         AIF   ('&P2C'(K'&P2C,1) EQ ')').FLD300\n&P2L     SETC  '0'\n&PACKED  SETB  ('&P2C' EQ 'P')\n         AIF   (&PACKED).FLD300\n&P2L     SETC  '1'\n         AIF   ('&P2C' EQ 'FL1').FLD240\n&P2L     SETC  '3'\n         AIF   ('&P2C' EQ 'FL2' OR '&P2C' EQ 'H').FLD240\n&P2L     SETC  '7'\n         AIF   ('&P2C' EQ 'FL3').FLD240\n&P2L     SETC  '15'\n         AIF   ('&P2C' EQ 'F').FLD240\n&P2L     SETC  '&P2C'                  IMMEDIATE LENGTH, FIELD\n         AGO   .FLD300\n.*\n.FLD240  ANOP                          BINARY VARIABLE\n&BIN     SETB  1\n         AGO   .FLD300\n.*\n.FLD250  ANOP                          REGISTER CONTENT\n&REG     SETB  1\n.*--------------------------------------------------------------------*\n.*       PROCESS THIRD SUBPARAMETER (OUTPUT FORMAT)                   *\n.*--------------------------------------------------------------------*\n.FLD300  AIF   (T'&SYSLIST(&I,3) EQ 'O').FLD800\n&HEX     SETB  ('&SYSLIST(&I,3)' EQ 'X') HEXADECIMAL\n&TRUNC   SETB  ('&SYSLIST(&I,3)' EQ 'T') TRUNCATE\n         AIF   (&HEX OR &TRUNC).FLD800\n.*\n&P3C     SETC  '&SYSLIST(&I,3)'\n&P3L     SETC  '248'\n         AIF   ('&P3C' EQ 'YYYY-MM-DD' AND &PACKED).FLD308\n&P3L     SETC  '249'\n         AIF   ('&P3C' EQ 'YYYYMMDD' AND &PACKED).FLD308\n&P3L     SETC  '250'\n         AIF   ('&P3C' EQ 'YY/MM/DD' AND &PACKED).FLD308\n&P3L     SETC  '251'\n         AIF   ('&P3C' EQ 'DD/MM/YY' AND &PACKED).FLD308\n&P3L     SETC  '252'\n         AIF   ('&P3C' EQ 'MM/DD/YY' AND &PACKED).FLD308\n&P3L     SETC  '253'\n         AIF   ('&P3C' EQ 'YYMMDD'   AND &PACKED).FLD308\n&P3L     SETC  '0'\n         AIF   (T'&SYSLIST(&I,2) NE 'N').FLD310\n         MNOTE 8,'EDIT PATTERN NOT ALLOWED WITH CHARACTER STRING'\n         AGO   .FLD310\n.FLD308  ANOP\n&$_FEAT(5) SETB 1                      JDATE\n         AGO   .FLD800\n.*--LOOP\n.FLD310  AIF   ('&P3C'(1,1) EQ 'R').FLD318       DEFAULT\n         AIF   ('&P3C'(1,1) EQ 'B').FLD318       DEFAULT\n         AIF   ('&P3C'(1,1) NE 'L').FLD311\n&LEFT    SETB  1\n         AGO   .FLD318\n.FLD311  AIF   ('&P3C'(1,1) NE 'Z').FLD312\n&ZERO    SETB  1\n         AGO   .FLD318\n.FLD312  AIF   ('&P3C'(1,1) LT '0').FLD993\n&P3L     SETC  '&P3L'.'&P3C'(1,1)\n.FLD318  ANOP\n.*MNOTE *,'&SYSLIST(&I) P3C=/&P3C/ P3L=/&P3L/'\n&P3C     SETC  '&P3C'(2,K'&P3C-1)     STRIP OFF FIRST CHARACTER\n         AIF   (K'&P3C GT 0).FLD310\n.*--ENDLOOP\n.*--------------------------------------------------------------------*\n.FLD800  ANOP\n&NUMERIC SETB  (&BIN OR &PACKED OR (&REG AND NOT &HEX))\n&TRUNC   SETB  (&TRUNC OR (&LEFT AND NOT &NUMERIC))\n&LEFT    SETB  (&LEFT AND &NUMERIC)\n         AIF   (NOT &NUMERIC).FLD810\n         AIF   (&LEFT OR '&P3L' NE '0').FLD810\n&P3L     SETC  '7'                     DEFAULT OUTPUT LENGTH ((R3))\n         AIF   (&REG).FLD810\n&P3L     SETC  '3'                     DEFAULT OUTPUT LENGTH\n         AIF   ('&P2C' EQ 'FL1').FLD810\n&P3L     SETC  '5'                     DEFAULT OUTPUT LENGTH\n         AIF   ('&P2C' EQ 'H' OR '&P2C' EQ 'FL2').FLD810\n&P3L     SETC  '7'                     DEFAULT OUTPUT LENGTH\n.FLD810  ANOP\n&FLAG    SETA  &LAST*128+&HEX*8+&BIN*4+&PACKED*2+&REG*1\n&LEN2    SETA  &TRUNC*128+&LEFT*128+&ZERO*64+&P3L\n         DC    S(&P1S,&P2L),AL1(&FLAG,&LEN2)\n&$_FEAT(2) SETB (&$_FEAT(2) OR (&REG AND NOT &HEX))   REGISTER (BIN)\n&$_FEAT(3) SETB (&$_FEAT(3) OR (&REG AND &HEX))       REGISTER (HEX)\n&$_FEAT(4) SETB (&$_FEAT(4) OR &PACKED)               PACKED\n&$_FEAT(6) SETB (&$_FEAT(6) OR &BIN)                  BINARY\n&$_FEAT(7) SETB (&$_FEAT(7) OR (&HEX AND NOT &REG))   HEX\n&$_FEAT(8) SETB (&$_FEAT(8) OR &NUMERIC)              BIN,PACKED\n&$_FEAT(9) SETB (&$_FEAT(9) OR (&LEFT AND &NUMERIC))\n&$_FEAT(10) SETB (&$_FEAT(10) OR &ZERO)\n&$_FEAT(11) SETB (&$_FEAT(11) OR &TRUNC)\n&BIN     SETB  0                    RESET FLAGS\n&HEX     SETB  0                    RESET FLAGS\n&REG     SETB  0                    RESET FLAGS\n&PACKED  SETB  0                    RESET FLAGS\n&LEFT    SETB  0                    RESET FLAGS\n&ZERO    SETB  0                    RESET FLAGS\n&TRUNC   SETB  0                    RESET FLAGS\n         AGO   .LIT99\n.FLD990  MNOTE 12,'OPERAND &I HAS TOO MANY SUB-OPERANDS'\n         AGO   .LIT99\n.FLD993  MNOTE 8,'THIRD SUBPARAMETER IS INVALID: ''&SYSLIST(&I,3)'''\n         AGO   .LIT99\n.*--------------------------------------------------------------------*\n.*------------ LITERALS ----------------------------------------------*\n.*--------------------------------------------------------------------*\n.LIT00   ANOP\n&LIT     SETC  'C&SYSLIST(&I)'\n         AGO   .LIT09\n.LIT01   ANOP\n&LIT     SETC  '&SYSLIST(&I)'\n.LIT09   AIF   (&$_LIT EQ 0).LIT50\n&N       SETA  1\n         ACTR  &$_LIT*3+200\n.LIT10   AIF   (&N GT &$_LIT).LIT50                  LOOP\n&L       SETA  &N+1000                               LOOP\n         AIF   ('&LIT' EQ '&$_LITS(&N)').LIT80 LOOP\n&N       SETA  &N+1                                  LOOP\n         AGO   .LIT10                                LOOP\n.LIT50   ANOP\n&$_LIT   SETA  &$_LIT+1\n&$_LITS(&$_LIT) SETC '&LIT'\n&L       SETA  &$_LIT+1000\n.LIT80   ANOP\n&J       SETA  X'4000'+&LAST*X'8000'\n         DC    AL2($LIT&L-*,&LQ.$LIT&L,&J)\n&$_FEAT(1) SETB 1                      LITERAL\n.LIT99   ANOP\n.*--------------------------------------------------------------------*\n&I       SETA  1+&I                              LOOP\n         AIF   (&I LE N'&SYSLIST).LOOP1          LOOP\n.*ENDLOOP\n&SYSLOC  LOCTR\n         AGO   .MEND\n.ERR1    MNOTE 12,'AT LEAST ONE INPUT FIELD MUST BE SPECIFIED'\n         AGO   .MEND\n.ERR2    MNOTE 12,'INVALID OUTPUT AREA SPECIFICATION'\n         AGO   .MEND\n.**********************************************************************\n.*       GENERATE: GENERATE LITERALS AND PROCESSING ROUTINE           *\n.**********************************************************************\n.GENL    ANOP\n&STRBLANKS SETA 2\n         AIF   ('&SYSLIST(2)' NE 'FULL').GENL1F\n&$_FEAT(1) SETB 1,1,1,1,1,1,1,1,1,1,1,1\n.GENL1F  ANOP\n&ALLFEAT SETC  '&$_FEAT(1)&$_FEAT(2)&$_FEAT(3)&$_FEAT(4)'\n&ALLFEAT SETC  '&ALLFEAT&$_FEAT(5)&$_FEAT(7)&$_FEAT(6)&$_FEAT(8)'\n&ALLFEAT SETC  '&ALLFEAT&$_FEAT(9)&$_FEAT(10)&$_FEAT(11)&$_FEAT(12)'\n&STR     SETC  '&STRING_MACRO_VERSION'\n         MNOTE *,'STRING/ESA R&STR - FEATURES GENERATED: &ALLFEAT'\n         AIF   (&$_LIT EQ 0).GENL3\n$LITERAL LOCTR\n.GENL2   ANOP                                LOOP\n&N       SETA  &N+1                          LOOP\n&I       SETA  &N+1000                       LOOP\n$LIT&I   DC    &$_LITS(&N)\n         AIF   (&N LT &$_LIT).GENL2          LOOP\n.GENL3   ANOP\n         AIF   ('&SYSLIST(2)' EQ 'NOCSECT').GENL8\n.**********************************************************************\n.*                                                                    *\n.*       STRING SUB-ROUTINE                                           *\n.*                                                                    *\n.*             CAUTION: BYTES 49-72 OF THE CALLER'S SAVE AREA         *\n.*                      (R7-R12 SLOTS) ARE USED AS WORK SPACE         *\n.*                                                                    *\n.**********************************************************************\n         AIF   ('&SYSLIST(2)' EQ 'LOCTR').GENL4L\n@STRING  CSECT\n@STRING  RMODE ANY\n         AGO   .GENL4X\n.GENL4L  PUSH  USING                   GENERATE,LOCTR\n         DROP\n@STRING@ LOCTR\n@STRING  DS    0H                      ALIGNMENT\n.GENL4X  ANOP\n@00      EQU   0                       WORK REGISTER\n@01      EQU   1                       WORK REGISTER\n@02      EQU   2                       WORK REGISTER\n@03      EQU   3                       WORK REGISTER\n@04      EQU   4                       WORK REGISTER\n@05      EQU   5                       WORK REGISTER\n@06      EQU   6                       WORK REGISTER\n@07      EQU   7                       WORK REGISTER\n@08      EQU   8                       WORK REGISTER\n@09      EQU   9                       WORK REGISTER\n@10      EQU   10                      WORK REGISTER\n@11      EQU   11                      WORK REGISTER\n@12      EQU   12                      WORK REGISTER\n@13      EQU   13                      CALLER'S SAVE AREA\n@14      EQU   14                      WORK REGISTER\n@15      EQU   15                      BASE REG\n         USING @STRING,@15\n         USING @STRSAVE,@13\n         B     @STR003                 BRANCH AROUND EYE-CATCHER\n         DC    C'@STRING R&STRING_MACRO_VERSION &ALLFEAT',0H'0'\n@STR002  DC    H'2'\n@STR003  STM   @14,@12,12(@13)         SAVE REGS (DEBUGGING ONLY)\n         AH    @14,@STR002-@STRING(@15) POINT PARM PARM-LIST OFFSET\n         BAKR  @14,0                   SAVE REGS AND RETURN ADDRESS\n         BCTR  @14,0                   ADJUST ADDR OF PARM LIST OFFSET\n         BCTR  @14,0                   ADJUST ADDR OF PARM LIST OFFSET\n         LAE   @06,0                   R6=0 AR6=0\n         CPYA  @14,@06                 AR14=0\n         CPYA  @15,@06                 AR15=0\n         ICM   @06,B'0011',0(@14)      PICK UP PARM-LIST 1/2 OFFSET\n         ALR   @06,@06                 PICK UP PARM-LIST OFFSET\n         ALR   @06,@14                 R6 NOW POINTS TO PARM LIST\n         USING @STRPARM,@06\n         LAE   @02,@STRSCON            RESOLVE FIRST SCON (ADDR)\n         BAL   @14,@STRS2A             GET ADDRESS IN R2\n         LAE   @04,0(,@02)             KEEP ADDRESS OF \"INTO\" FIELD\n         EREG  @14,@14                 RESTORE ADDR OF STRING MACRO\n         OI    0(@04),0                GET CLEAN S0C4 IF ADDRESS IS BAD\n         LAE   @02,@STRFLEN            RESOLVE SECOND S-CON (LEN)\n         BAL   @14,@STRS2A             GET LENGTH IN R2\n         LR    @05,@02                 KEEP LENGTH OF \"INTO\" FIELD\n         CR    @05,@04                 END ADDRESS?\n         BL    @STR282                 NO, JUMP\n         SR    @05,@04                 CALCULATE LENGTH\n@STR282  MSTA  @04                     SAVE R4,R5 ON LINKAGE STACK\n.*SLAC   DC    X'B247,0040'            SLAC assembler error\n.**********************************************************************\n.*       MOVE FIELDS TO OUTPUT AREA                                   *\n.**********************************************************************\n         LAE   @06,@STRFLAG            POINT TO 1ST FIELD DESC\n.*LOOP\n@STR310  EQU   *\n         AIF   (NOT &$_FEAT(1)).FEAT1A\n         TM    @STRFLAG,@STRLIT        IS THIS A LITERAL?\n         BO    @STR372                 YES, JUMP\n.FEAT1A  ANOP\n         AIF   (NOT &$_FEAT(2) AND NOT &$_FEAT(3)).FEAT23A\n         TM    @STRFLAG,@STRREG        REGISTER?\n         BO    @STR323                 YES, JUMP\n.FEAT23A ANOP\n         AIF   (NOT &$_FEAT(12)).FEAT12A\n         CLI   @STRSCON,X'E0'          IS IT %TIME ?\n         BE    @STR378                 YES, JUMP\n.FEAT12A ANOP\n.*\n.*       IT'S A FIELD (SCON)\n.*\n         LAE   @02,@STRFLEN            RESOLVE SECOND S-CON (LEN)\n         BAL   @14,@STRS2A             GET LENGTH IN R2\n         AIF   (&$_FEAT(9)).FEAT9E1    (LEFT JUSTIFICATION, NUMERIC)\n         LTR   @03,@02                 KEEP/TEST LENGTH\n         BZ    @STR398                 ZERO LENGTH, DO NOT EDIT\n         AGO   .FEAT9E2\n.FEAT9E1 LTR   @03,@02                 KEEP/TEST LENGTH\n         BP    @STR313                 LENGTH POSITIVE, JUMP\n         TM    @STRLEN2,@STRLEFT       LEFT JUSTIFICATION?\n         BNO   @STR398                 NO, ZERO LENGTH IS NOT OK\n@STR313  EQU   *\n.FEAT9E2 ANOP\n         LAE   @02,@STRSCON            RESOLVE FIRST SCON (ADDR)\n         BAL   @14,@STRS2A             GET ADDRESS IN R2\n         EREG  @14,@14                 RESTORE ADDR OF STRING MACRO\n         CLI   0(@02),0                GET CLEAN S0C4 IF ADDRESS IS BAD\n         CR    @03,@02                 END ADDRESS?\n         BL    @STR314                 NO, JUMP\n         LA    @00,X'0080'             PSA ADDRESS\n         CLR   @02,@00                 PSA REFERENCE?\n         BL    @STR314                 YES, JUMP\n         SR    @03,@02                 CALCULATE LENGTH\n@STR314  EQU   *\n         AIF   (NOT &$_FEAT(6)).FEAT6A\n         TM    @STRFLAG,@STRBIN        BINARY FIELD?\n         BO    @STR328                 YES, JUMP\n.FEAT6A  ANOP\n         AIF   (NOT &$_FEAT(4)).FEAT4A\n         TM    @STRFLAG,@STRPACK       PACKED FIELD?\n         BO    @STR351                 YES, JUMP\n.FEAT4A  ANOP\n         AIF   (NOT &$_FEAT(7)).FEAT7A\n         TM    @STRFLAG,@STRHEX        EDIT IN HEX?\n         BO    @STR376                 YES, JUMP\n.FEAT7A  ANOP\n.*\n.*       TRUNCATE CHARACTER STRING\n.*\n         AIF   (NOT &$_FEAT(11)).FEAT11A\n         CLI   @STRLEN2,@STRLEFT       CHECK JUSTIFICATION, OUTPUT LEN\n         BNE   @STR390                 NO STRING TRUNCATION, JUMP\n         LAE   @01,0(@03,@02)          FIRST BYTE AFTER FIELD\n@STR318  BCTR  @01,0                   DOWN 1 BYTE                 LOOP\n         CLI   0(@01),C' '             IS IT A SPACE ?             LOOP\n         BNE   @STR390                 LAST NON-BLANK BYTE         LOOP\n         BCT   @03,@STR318             LOOP UNTIL 1ST NON-BLANK    LOOP\n         B     @STR398                 BLANK FIELD, DO NOT EDIT\n         AGO   .FEAT11B\n.FEAT11A ANOP\n         AIF (&$_FEAT(2)+&$_FEAT(3)+&$_FEAT(4)+&$_FEAT(6) EQ 0).FEAT11B\n         B     @STR390                 EDIT\n.FEAT11B ANOP\n.*\n.*       REGISTER (R0-R13)\n.*\n         AIF   (NOT &$_FEAT(2) AND NOT &$_FEAT(3)).FEAT23B\n@STR323  LH    @01,@STRSCON            REG NUMBER IN BITS 28-31\n         CLI   @STRSCON+1,@06          IS THIS R7-R13?\n         BH    @STR323R                YES, JUMP\n         LR    @07,@01                 SAVE R1 (R)\n         LAE   @10,0(,@04)             SAVE R4\n         LR    @11,@05                 SAVE R5\n         LAE   @12,0(,@06)             SAVE R6\n         EREG  @00,@06                 RELOAD CALLER'S R0-R6\n         EX    @07,@STR323L            COPY R0-R6 VALUE\n         LAE   @04,0(,@10)             RESTORE R4\n         LR    @05,@11                 RESTORE R5\n         LAE   @06,0(,@12)             RESTORE R6\n         B     @STR323T\n@STR323L LR    @00,*-*                 COPY VALUE FOR EDIT\n@STR323R EQU   *\n         EREG  @07,@12                 RESTORE CALLER'S R7-R12\n         EX    @01,@STR323L            COPY R7-R13 INTO R0\n@STR323T EQU   *\n         AIF   (NOT &$_FEAT(3)).FEAT3R REG,HEX\n         AIF   (NOT &$_FEAT(2)).FEAT2H REG,BIN\n         TM    @STRFLAG,@STRHEX        EDIT IN HEX?\n         BNO   @STR330                 NO, EDIT FWD\n.FEAT2H  ANOP\n         STCM  @00,B'1111',@STRDWD-1   STORE IT FOR CVD/UNPK\n         LA    @03,8                   OUTPUT LENGTH\n         B     @STR376X                EDIT IN HEX\n.FEAT3R  ANOP\n         AIF   (NOT &$_FEAT(6)).FEAT23B\n         B     @STR330                 EDIT R0\n.FEAT23B ANOP\n.*\n.*       BINARY VARIABLE: @03 CONTAINS THE ICM MASK (1 3 7 F)\n.*\n         AIF   (NOT &$_FEAT(6)).FEAT6B\n@STR328M ICM   @00,*-*,0(@02)          **EXECUTED INSTRUCTION**\n@STR328  SLR   @00,@00\n         EX    @03,@STR328M            LOAD THE BINARY VARIABLE\n.FEAT6B  ANOP\n.*\n         AIF   (NOT &$_FEAT(2) AND NOT &$_FEAT(6)).FEAT6C\n@STR330  CVD   @00,@STRDWD             CONVERT VALUE TO DECIMAL\n         AIF   (NOT &$_FEAT(4)).FEAT6C\n         B     @STR361                 EDIT DWD\n.FEAT6C  ANOP\n.*\n.*       PACKED FIELD\n.*\n         AIF   (NOT &$_FEAT(4)).FEAT4B\n@STRZAP  ZAP   @STRDWD,0(*-*,@02)      MOVE TO @STRDWD\n@STR351  LAE   @03,0(,@02)             FIRST BYTE OF PACKED FIELD\n         BALR  @14,0\n         TM    0(@03),X'0C'            IS THIS THE SIGN BYTE?\n         LA    @03,1(,@03)              (NEXT BYTE)\n         BNOR  @14                     NO, LOOP MORE\n         SLR   @03,@02                 GET LENGTH OF PACKED FIELD\n         BCTR  @03,0\n         EX    @03,@STRZAP             EXECUTE ZAP\n         AIF   (NOT &$_FEAT(5)).FEAT4B\n         CLI   @STRLEN2,248            JULIAN-TO-YYMMDD CONV?\n         BNL   @STR375                 YES, JUMP\n.FEAT4B  ANOP                          PACKED\n.*\n.*       EDIT @STRDWD (BIN, REG, PACKED)\n.*\n         AIF   (NOT &$_FEAT(8)).FEAT8B\n@STR361  IC    @00,@STRLEN2            OUTPUT LENGTH\n         LA    @03,X'003F'             MASK FOR \"AND\"\n         NR    @03,@00                 OUTPUT LENGTH\n         MVC   @STRWK16(16),@STRMASK   EDIT MASK\n.*\n.*       LEFT-JUSTIFICATION (NUMERIC)\n.*\n         AIF   (NOT &$_FEAT(9)).FEAT9B\n         TM    @STRLEN2,@STRLEFT       LEFT JUSTIFICATION?\n         BNO   @STR367                 NO, JUMP\n         LAE   @01,@STRWK16+15         PREVENT BAD R1\n         EDMK  @STRWK16(16),@STRDWD    ZONED DECIMAL\n         LAE   @02,0(,@01)             FIRST STRING POSITION\n         LTR   @03,@03                 CHECK OUTPUT LENGTH\n         BNZ   @STR363                 JUMP IF NOT ZERO\n.*       L0    (LEFT JUSTIFIED, NO PADDING)\n         LAE   @03,@STRWK16+16         FIRST POSITION AFTER STRING\n         SR    @03,@02                 COMPUTE STRING LENGTH\n         B     @STR390                 MOVE FIELD TO OUTPUT LINE\n.*       L1-L63 (LEFT JUSTIFIED, PADDING)\n@STR363  CR    @03,@05                 COMPARE LENGTH TO REMAINING LEN\n         BNH   @STR364                 LARGE ENOUGH, JUMP\n         LR    @03,@05                 TOO BIG, TRUNCATE TO REM. LEN.\n@STR364  SR    @05,@03                 COMPUTE REMAINING LENGTH\n         LAE   @08,0(,@04)             POINTER IN OUTPUT LINE\n         LR    @09,@03                 LENGTH WITH PADDING\n         LA    @03,@STRWK16+16         FIRST POSITION AFTER STRING\n         SR    @03,@02                 COMPUTE STRING LENGTH\n         B     @STR392                 MOVE FIELD TO OUTPUT LINE\n@STR367  EQU   *\n.FEAT9B  ANOP\n         AIF   (NOT &$_FEAT(10)).FEAT10B\n         TM    @STRLEN2,@STRZERO       LEADING ZEROES REQ'D?\n         BNO   @STR368                 NO, JUMP\n         MVI   @STRWK16,C'0'           YES, CHANGE X'40' TO C'0'\n@STR368  EQU   *\n.FEAT10B ANOP\n         ED    @STRWK16(16),@STRDWD    ZONED DECIMAL\n         LAE   @02,@STRWK16+16         FIRST POSITION AFTER STRING\n         SR    @02,@03                 FIRST STRING POSITION\n.FEAT8B  ANOP\n.*\n.*       LITERAL (@STRSCON IS A 16-BIT OFFSET)\n.*       BLANKS  (@STRSCON=ZERO)\n.*\n         AIF   (NOT &$_FEAT(1)).FEAT1B\n         B     @STR390                 MOVE STRING TO OUTPUT LINE\n@STR372  SLR   @02,@02\n         SAR   @02,@02                 AR2=0\n         ICM   @02,B'0011',@STRSCON    LOAD LITERAL OFFSET\n         BZ    @STR372L                BLANKS, JUMP\n         LAE   @02,@STRSCON(@02)       CONVERT OFFSET TO FULL ADDRESS\n@STR372L LH    @03,@STRFLEN            GET LITERAL LENGTH\n.FEAT1B  ANOP\n.*\n.*       CONVERT JULIAN DATE TO YYMMDD\n.*\n         AIF   (NOT &$_FEAT(5)).FEAT5F\n         B     @STR390                 MOVE STRING TO OUTPUT LINE\n@STR375  LA    @00,248                 MASK FOR 'SLR'\n         SLR   @01,@01\n         IC    @01,@STRLEN2            248-255\n         SLR   @01,@00                 000-007\n         LA    @00,12                  L'@STR375W\n         MR    @00,@00                 COMPUTE OFFSET\n         LAE   @01,@STR375W(@01)       ENTRY IN \"TR\" MASK TABLE\n         SLR   @03,@03\n         IC    @03,0(,@01)             LENGTH OF DATE (6, 8 OR 10)\n         ZAP   @STRDWD,@STRDWD         DATE=0000000?               @JDT\n         BNZ   @STR375B                NO, JUMP                    @JDT\n@STR375Z LAE   @02,@STRBLANKS          WORK AREA\n&STRBLANKS SETA 10                     WE NEED AT LEAST 10 BLANKS\n         B     @STR390                 MOVE FIELD TO OUTPUT LINE\n@STR375W DC    AL1(10,C'-',0,1,2,3,8,4,5,8,6,7) YYYY-MM-DD   248\n         DC    AL1(8,C' ',0,1,2,3,4,5,6,7,8,8)  YYYYMMDD//   249\n         DC    AL1(8,C'/',2,3,8,4,5,8,6,7,8,8)  YY/MM/DD//   250\n         DC    AL1(8,C'/',6,7,8,4,5,8,2,3,8,8)  DD/MM/YY//   251\n         DC    AL1(8,C'/',4,5,8,6,7,8,2,3,8,8)  MM/DD/YY//   252\n         DC    AL1(6,C' ',2,3,4,5,6,7,8,8,8,8)  YYMMDD       253\n.*       DC    AL1(6,C' ',6,7,4,5,2,3,8,8,8,8)  DDMMYY       254\n.*       DC    AL1(6,C' ',4,5,6,7,2,3,8,8,8,8)  MMDDYY       255\n@STR375T DC    P'59,31,29,31,30,31,30,31,31,30,31,30,31'\n@STR375B CLI   @STRDWD+4,X'01'         YEAR 2000 OR ABOVE?\n         BH    @STR375C                CC>01, JUMP (MUST BE 19 OR 20)\n         MVI   @STRDWD+4,X'20'         CC=01, CHANGE TO CC=20\n         BE    @STR375C                CC=01, USE CC=20\n         CLI   @STRDWD+4+1,X'50'       YY<50?\n         BL    @STR375C                YES, USE CC=20\n         MVI   @STRDWD+4,X'19'         NO, FORCE CC=19\n@STR375C UNPK  @STRWK16(5),@STRDWD+4(3) CCYY?\n         ZAP   @STRDWD+1(2),@STR375T+9(1) INIT MONTH COUNTER\n         LAE   @02,@STR375T            TABLE OF MONTHS (NUMBER OF DAYS)\n         TM    @STRDWD+4+1,X'01'       ODD YEARS\n         BO    @STR375N                  AREN'T LEAP YEARS\n         TM    @STRDWD+4+1,X'12'       ZEROES IN 1980, ALL ONES IN 1992\n         BNM   @STR375L                MIXED IN 1982/1990\n.*       IF IT'S NOT A LEAP YEAR AND DDD>59, THEN ADD 1 TO DDD\n@STR375N CP    @STRDWD+4+2(2),@STR375T ARE WE PAST FEB 28 (DDD>59) ?\n         BNH   @STR375L                NO, JUMP\n         AP    @STRDWD+4+2(2),@STR375T+3(1) ADD 1 (FROM 31) TO DDD\n.*--LOOP WHILE DDD > 0\n@STR375L AP    @STRDWD+1(2),@STR375T+3(1)   ADD 1 (FROM 31) TO MONTH\n         LA    @02,2(,@02)             NEXT ENTRY IN \"MONTHS\" TABLE\n         SP    @STRDWD+4+2(2),0(2,@02) SUB DAYS-IN-MONTH FROM DDD\n         BP    @STR375L\n.*--ENDLOOP\n         AP    @STRDWD+4+2(2),0(2,@02) UNDO LAST \"SP\" INSTRUCTION\n         UNPK  @STRWK16+4(2),@STRDWD+1(2) FYFYFYFY,FMCM??\n         UNPK  @STRWK16+6(2),@STRDWD+6(2) FYFYFYFY,FMCMFDCD\n         MVZ   @STRWK16+1(7),@STRWK16     FYFYFYFY,FMCMFDCD\n         MVC   @STRWK16+8(1),1(@01)    SEPARATOR\n         LAE   @02,@STRWK16+9          WORK AREA\n         MVC   0(10,@02),2(@01)        MOVE CORRESPONDING MASK\n         TR    0(10,@02),@STRWK16      CONVERT DATE TO THE RIGHT FORMAT\n.FEAT5F  ANOP                          JDATE\n.*\n.*       HEX STRING\n.*\n         AIF   (NOT &$_FEAT(7)).FEAT7B\n         B     @STR390                 MOVE STRING TO OUTPUT LINE\n@STR376M MVC   @STRDWD-1(*-*),0(@02)   PREVENT S0C4 IN UNPK\n@STR376  LA    @00,8                   MAX LENGTH\n         CLR   @03,@00                 CHECK LENGTH\n         BNH   @STR376B                JUMP IF LE 8\n         LR    @03,@00                 TRUNCATE TO MAXIMUM LENGTH\n@STR376B LR    @01,@03                 INPUT LENGTH\n         BCTR  @01,0\n         EX    @01,@STR376M            MOVE DATA TO SAFE STORAGE\n         ALR   @03,@03                 OUTPUT LENGTH\n         AGO   .FEAT37B\n.FEAT7B  ANOP\n         AIF   (NOT &$_FEAT(3)).FEAT37C\n         B     @STR390                 MOVE STRING TO OUTPUT LINE\n.FEAT37B ANOP\n@STR376X LAE   @02,@STRWK16            WORK AREA\n         UNPK  0(9,@02),@STRDWD-1(5)   EXPAND SOURCE BYTES FOR \"TR\"\n         UNPK  8(9,@02),@STRDWD+3(5)   EXPAND SOURCE BYTES FOR \"TR\"\n         TR    0(16,@02),@STRHEXT-240  =C'0123456789ABCDEF'\n.FEAT37C ANOP\n.*\n.*       %TIME\n.*\n         AIF   (NOT &$_FEAT(12)).FEAT12B\n         B     @STR390                 MOVE STRING TO OUTPUT LINE\n@STRTIME DC    X'4021207A20207A20207A20204000'    0X.XX.XX.XX\n@STR378  TIME  DEC                     GET HHMMSSHH\n         EREG  @14,@15                 RESTORE BASE REG\n         CPYA  @15,@06                 AR15=0\n         ST    @00,@STRDWD             STORE HHMMSSHH\n         MVC   @STRWK16(13),@STRTIME   MOVE EDIT MASK\n         ED    @STRWK16(13),@STRDWD    EDIT HH:MM:SS:HH\n         LAE   @02,@STRWK16+1          WORK AREA\n         LA    @03,12                  HH:MM:SS:HH+ SPACE\n.FEAT12B ANOP\n.*MOVE\n@STR390  CR    @03,@05                 COMPARE LENGTH TO REMAINING LEN\n         BNH   @STR391                 LARGE ENOUGH, JUMP\n         LR    @03,@05                 TOO BIG, TRUNCATE TO REM. LEN.\n@STR391  SR    @05,@03                 COMPUTE REMAINING LENGTH\n         LAE   @08,0(,@04)             POINTER IN OUTPUT LINE\n         LR    @09,@03                 PASS REMAINING LENGTH\n         LTR   @02,@02                 BLANKS?\n         BNZ   @STR392                 NO, JUMP\n         SLR   @03,@03                 YES, ZERO LENGTH\n@STR392  ICM   @03,B'1000',@STRBLANKS  PAD WITH BLANKS\n         MVCL  @08,@02                 MOVE FIELD TO OUTPUT LINE\n         LR    @04,@08                 NEW POINTER IN OUTPUT LINE\n@STR398  TM    @STRFLAG,@STRLAST       TEST LAST-ENTRY INDICATOR\n         LA    @06,@STRNEXT            BUMP UP TO NEXT ENTRY\n         BNO   @STR310                 PROCESS NEXT ENTRY\n.*ENDLOOP\n.*\n.*       END-OF-LINE PROCESSING - PAD WITH BLANKS\n.*\n         SLR   @01,@01                 SET UP R1 FOR PADDING\n         ICM   @01,B'1000',@STRBLANKS  SET UP R1 FOR PADDING\n.***     DROP  @06,@13,@15\n         LA    @15,3                   MODIFIABLE AREA\n         ESTA  @14,@15                 R14 = START OF OUTPUT AREA\n         LR    @15,@04                 END OF OUTPUT AREA\n         SR    @15,@14                 R15 = LENGTH USED IN OUTPUT AREA\n         MVCL  @04,@00                 PAD WITH BLANKS\n         EREG  @00,@14                 RESTORE WORK REGISTERS\n         STM   @14,@12,12(@13)         MAKE SAVE AREA LOOK NORMAL\n         OI    15(@13),1               SIMULATE \"T\" OPTION OF RETURN\n         PR                            RETURN TO CALLER\n.*\n         AIF   (NOT (&$_FEAT(3) OR &$_FEAT(7))).FEAT37T\n@STRHEXT DC    C'0123456789ABCDEF'     HEX-TO-EBCDIC CONVERSION\n.FEAT37T ANOP\n         AIF   (NOT &$_FEAT(8)).FEAT8T\n@STRMASK DC    X'4020202020202020,2020202020202120'\n.FEAT8T  ANOP\n.**********************************************************************\n.*       CONVERT S-CON TO 31-BIT ADDRESS (RESULT RETURNED IN R2)      *\n.**********************************************************************\n@STRS2A  SLR   @00,@00\n         ICM   @00,B'0011',0(@02)      R0 = 0000BDDD\n         SRDL  @00,12                  R0 = 0000000B, R1= DDD.....\n         SRL   @01,20                  R1 = 00000DDD (DISPLACEMENT)\n         SLL   @00,2                   MULT BY 4\n         CLI   0(@02),@07*16           R7-R13?\n         BNL   @STRS2A7                YES, JUMP\n.*BASE REG IS R0-R6\n@STRS2A4 LTR   @02,@00                 IS R0 THE BASE REG?\n         BNZ   @STRS2A5                NO, JUMP\n         LTR   @02,@01                 IS THIS A PSA ADDRESS?\n         BNZR  @14                     YES, GOBACK\n         EREG  @00,@00                 POP R0\n         SAR   @02,@02                 AR2=0\n         LR    @02,@00                 PASS R0 VALUE\n         LA    @02,0(,@02)             CLEAN UP\n         BR    @14                     GOBACK\n@STRS2A5 LR    @07,@00                 SAVE R0 (B*4)\n         LR    @08,@01                 SAVE R1 (DDD)\n         LR    @09,@03                 SAVE R3\n         LAE   @10,0(,@04)             SAVE R4\n         LR    @11,@05                 SAVE R5\n         LAE   @12,0(,@06)             SAVE R6\n         EREG  @01,@06                 RELOAD CALLER'S R1-R6\n         EX    0,@STRS2A9-4(@07)       ADD BASE REG VALUE TO DISPL\n         LR    @03,@09                 RESTORE R3\n         LAE   @04,0(,@10)             RESTORE R4\n         LR    @05,@11                 RESTORE R5\n         LAE   @06,0(,@12)             RESTORE R6\n         BR    @14                     GOBACK\n.*BASE REG IS R7-R13\n@STRS2A7 LR    @02,@00                 R2= 0000000B (BASE REG NUMBER)\n         EREG  @07,@12                 RESTORE CALLER'S R7-R12\n         EX    0,@STRS2A9-4(@02)       ADD BASE REG VALUE TO DISPL\n         BR    R14                     GOBACK\n@STRS2A9 LAE   @02,0(@08,@01)          ADD BASE REG VALUE TO DISPL\n         LAE   @02,0(@08,@02)          ADD BASE REG VALUE TO DISPL\n         LAE   @02,0(@08,@03)          ADD BASE REG VALUE TO DISPL\n         LAE   @02,0(@08,@04)          ADD BASE REG VALUE TO DISPL\n         LAE   @02,0(@08,@05)          ADD BASE REG VALUE TO DISPL\n         LAE   @02,0(@08,@06)          ADD BASE REG VALUE TO DISPL\n         LAE   @02,0(@01,@07)          ADD BASE REG VALUE TO DISPL\n         LAE   @02,0(@01,@08)          ADD BASE REG VALUE TO DISPL\n         LAE   @02,0(@01,@09)          ADD BASE REG VALUE TO DISPL\n         LAE   @02,0(@01,@10)          ADD BASE REG VALUE TO DISPL\n         LAE   @02,0(@01,@11)          ADD BASE REG VALUE TO DISPL\n         LAE   @02,0(@01,@12)          ADD BASE REG VALUE TO DISPL\n         LAE   @02,0(@01,@13)          ADD BASE REG VALUE TO DISPL\n&STR     SETC  '&STRBLANKS'\n         AIF   ('&SYSLIST(2)' EQ 'LOCTR').GENL7L\n@STRBLANKS DC  CL((((*+&STRBLANKS+7-@STRING)/8)*8)-(*-@STRING))' '\n         AGO   .GENL7X\n.GENL7L  ANOP\n@STRBLANKS DC  CL&STRBLANKS.' '\n.GENL7X  ANOP\n@STRING_SIZE EQU *-@STRING             SIZE OF GENERATED CSECT\n.**********************************************************************\n.*       WORK AREA (CALLER'S SAVE AREA)                               *\n.**********************************************************************\n@STRSAVE DSECT                         24-BYTE WORK AREA\n         DS    A(0,@STRSAVE,@STRSAVE,14,15,0,1,2,3,4,5,6)\n@STRWK16 DS    F'7,8,9,10'             WORK AREA\n@STRDWD  DS    D'1112'                 WORK AREA\n@STRPARM DSECT\n@STRSCON DS    S                   +0  FIELD ADDRESS\n@STRFLEN DS    S                   +2  FIELD LENGTH\n@STRFLAG DS    B                   +4  FORMAT, FLAGS\n@STRLAST EQU   X'80'                     LAST ENTRY\n@STRLIT  EQU   X'40'                     LITERAL, @STRSCON IS AN OFFSET\n@STRJDT  EQU   X'20'                     JULIAN DATE\n.*             X'3F'                   CONVERSION REQUIRED\n@STRHEX  EQU   X'08'                     HEXADECIMAL\n@STRBIN  EQU   X'04'                     BINARY\n@STRPACK EQU   X'02'                     PACKED\n@STRREG  EQU   X'01'                     REGISTER\n@STRLEN2 DS    B                   +5  FORMAT, OUTPUT LENGTH\n@STRLEFT EQU   X'80'                     LEFT JUSTIFICATION\n@STRZERO EQU   X'40'                     LEADING ZEROES\n.*             X'3F'                     OUTPUT LENGTH, 0 MEANS TRUNC.\n@STRNEXT EQU   *                   +6\n$LTORG   LOCTR\n         AIF   ('&SYSLIST(2)' EQ 'LOCTR').GENL9L\n         CNOP  0,4\n$STRING  BALR  @15,0                   LOCAL BASE\n         L     @15,6(@15,0)            ROUTINE ADDRESS           00\n         BR    @15                     GO TO @STRING             04\n         AGO   .GENL9\n.GENL8   ANOP                          GENERATE,NOCSECT\n$LTORG   LOCTR\n         CNOP  0,4\n$STRING  BALR  R15,0                   LOCAL BASE\n         L     R15,6(R15,0)            ROUTINE ADDRESS           00\n         BR    R15                     GO TO @STRING             04\n.GENL9   ANOP\n         DC    V(@STRING)              ROUTINE ADDRESS           06\n         AGO   .MEND\n.GENL9L  POP   USING                   GENERATE,LOCTR\n$STRING  BAL   R15,=X'4AFF,0000,07FF'\n         DC    Y(@STRING-*)            OFFSET TO @STRING ROUTINE\n.MEND    AIF   ('&PRINT' EQ 'NOGEN').MEND99\n         POP   PRINT\n.MEND99  MEND\n         EJECT\n**********************************************************************\n**********************************************************************\n********* TEST PROGRAM FOR THE 'STRING' MACRO ************************\n**********************************************************************\n**********************************************************************\nTESTPGM  START X'027000'\n         BALR  R12,0\n         USING *,R12\n LOAD EP=SYSDEBUG\n LR R15,R0\n BASSM R14,R15\n*STRING 1X,INTO=XXX\n         OPEN  (SYSPRINT,OUTPUT)\nRBPREFIX EQU   *\nRBINTCOD EQU   *+6,2,C'H'\nASCBASID EQU   *+8,2,C'X'\n         L     R1,PSATOLD-PSA\n         L     R1,0(,R1)               TCBRBP\n         STRING 'SVC',(RBINTCOD-RBPREFIX(R1),H,R3Z),                   X\n               1X,(WWWW,,T),' - ',     VV.MM OF SVC RTNE               X\n               ((R8),,X),1X,           COM-REG ADDR                    X\n               (ASCBASID,,X),1X,       ASID                            X\n               PARM1,1X,               MAIN PGM NAME                   X\n               INTO=XXX\n         PUT   SYSPRINT,XXX\n*\n         LA    R2,XXX\n         STRING 1X,INTO=((R2),8)\n         MACRO                                       JDATE MACRO\n        @JDATE &DATE                                 JDATE MACRO\n         LA    R1,=P'&DATE'                          JDATE MACRO\n*** STRING ((R1),P),2X,((R1),P),INTO=XXX\n         STRING ((R1),P),2X,((R1),P,YYMMDD),INTO=XXX,                  X\n               3X,((R1),P,YY/MM/DD),                                   X\n               3X,((R1),P,DD/MM/YY),                                   X\n               3X,((R1),P,MM/DD/YY),                                   X\n               3X,((R1),P,YYYYMMDD),                                   X\n               3X,((R1),P,YYYY-MM-DD)\n         PUT   SYSPRINT,XXX                          JDATE MACRO\n         MEND                                        JDATE MACRO\n        @JDATE 90058\n        @JDATE 91059\n        @JDATE 93060\n        @JDATE 94365\n        @JDATE 80058\n        @JDATE 84059\n        @JDATE 88060\n        @JDATE 92061\n        @JDATE 00366\n         LA    R2,1234\n         STRING 'CVTPTR=X''',(CVTPTR,4,X),'''',INTO=XXX,               X\n               ' 1234=',((R2),,R4Z)\n         PUT   SYSPRINT,XXX\n         L     R1,CVTPTR\n         STRING 'CVTDATE=',(56(R1),P,YYMMDD),INTO=XXX\n         PUT   SYSPRINT,XXX\n         LA    R0,1000\n         LA    R3,0033\n         STRING 'D1=/',D1,'/,WWWW=/',WWWW,'/',                         X\n               ((R3),,L),'/',((R3),,X),'/',((R0),,L),'/',              X\n               ((R3),,R9B),'/',INTO=XXX\n         LR    R4,R15                   LENGTH USED\n         PUT   SYSPRINT,XXX\n         STRING WWWW,                                                  X\n               (4(R13),4,X),'''',(4(R13),F),'''',                      X\n               (4(R13),F,L),'''',                                      X\n               (4(R13),F,L11),'''',                                    X\n               (4(R13),F,Z9),'''',                                     X\n               8X,'R4=',((R4),,L),      LENGTH USED                    X\n               INTO=XXX\n         PUT   SYSPRINT,XXX\n         STRING %TIME,D1,'B12345678B',5X,(CTR1,P),1X,PARM1,1X,PARM2,   X\n               INTO=XXX\n         PUT   SYSPRINT,XXX\n         LA    R3,22\n         STRING INTO=XXX,'CCC1234A',(D1,(R3)),'.',(CTR1,P,R7Z)\n         PUT   SYSPRINT,XXX\n         STRING C'DDN2(',(D1,,T),')',X'40C1C2C3C4',                    +\n               ' PSATOLD=',(PSATOLD-PSA,,X),                           +\n               INTO=XXX\n         PUT   SYSPRINT,XXX\n         AIF   ('&SYSPARM' NE 'HLASM').HLASM99\nPSABASE  USING PSA,R0\n         STRING 'PSATOLD=',(PSABASE.PSATOLD,,X),                       +\n               ' PSATOLD=',(PSATOLD-PSA,,X),                           +\n               INTO=XXX\n         PUT   SYSPRINT,XXX\n.HLASM99 ANOP\n         BALR  R0,0\n         STRING 'R0=',((R0),,X),'   16(R0)=',(16(R0),4,X),INTO=XXX\n         PUT   SYSPRINT,XXX\n*\nAMODE31  LA    R12,0(,R12)             BALR->BASR\n         L     R15,=A(*+X'80000006')   AMODE=31\n         BSM   0,R15                   AMODE=31\n         DSPSERV CREATE,                                               X\n               NAME==CL8'STRING00',    C'STRING00'                     X\n               BLOCKS=HDRBLKS,         SIZE IN PAGES                   X\n               STOKEN=DSPCSTKN,                                        X\n               ORIGIN=DSPCORG\n         ALESERV ADD,STOKEN=DSPCSTKN,ALET=DSPCALET\n         LAM   R8,R8,DSPCALET          POINT TO THE DATA SPACE\n         L     R8,DSPCORG              SPACE ORIGIN (0 OR 4096)\n         SAC   512                     MODE=AR\n LAM R14,R6,TESTPGM+40                 S0E0-28\n         STRING WWWW,INTO=(2048(R8),100)\n*\n.EXIT    SLR   R15,R15\n         SVC   3                       GOBACK\nD1       DC    C'D1-----D1    '\nWWWW     DC    C'WWWW'\nCTR1     DC    P'1'\nPARM1    DC    C'<-PARM1->'\nPARM2    DC    C'<-PARM2->'\nXXX      DS    CL132\nDSPCSTKN DS    XL8                  0  AS TOKEN\nDSPCALET DS    F                    8  ALET\nDSPCORG  DS    F                   12  ORIGIN\nHDRBLKS  DC    F'100'\nCVTPTR   EQU   0016,4,C'A'\nSYSPRINT DCB   DSORG=PS,DDNAME=SYSPRINT,MACRF=PM,RECFM=FB,LRECL=121\nXYZ      DSECT\n         STRING GENERATE,LOCTR\n**       STRING GENERATE\n         YREGS\nPSA      DSECT\nPSATOLD  EQU   *+X'21C',4,C'A'\n         END\n//SYSPRINT DD SYSOUT=*\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200\n//*\n//GO      EXEC PGM=LOADER,PARM=NOPRINT\n//SYSLIN   DD DSN=*.ASMH.SYSLIN,DISP=(OLD,DELETE)\n//SYSPRINT DD SYSOUT=*\n//ABNLTERM DD SYSOUT=*\n//ABNLIGNR DD DUMMY\n//SYSDEBUG DD SYSOUT=*\n//SYSUDUMP DD SYSOUT=*\n\n          +----------------------------------------+\n          +                                        +\n          +   Documentation for the STRING macro   +\n          +                                        +\n          +       Last update: 09 Sep 1996         +\n          +----------------------------------------+\n\n  The STRING macro is functionally similar to the COBOL DISPLAY\n  or PL/I PUT EDIT instructions.\n\n  Using STRING, you can concatenate any number of fields, edit\n  each of them if necessary, and get the result in the work area\n  you specify.\n\n  Formats:\n\n    (1) label  STRING {field_specification1}\n                      {,field_specification2}...\n                      ,INTO=workarea|(workarea,length)\n                      {,PRINT=GEN|NOGEN}\n\n    (2) label  STRING GENERATE\n                      {,PRINT=GEN|NOGEN}\n\n\n  field_specification\n\n    Each field to be printed is described as a positional\n    operand.  Each operand specifies the field address, its\n    length, and its formatting requirements.\n\n    Four field description formats are supported:\n\n      1.   symbol\n      2.   (symbol,length,format)\n      3.   (d(r)|(r),length,format)\n      4.   ((r),,format)\n      5.   'character string'\n\n  Symbol specifies the field address.  It must be an\n    S-type (relocatable) address.\n\n  d(r) may be used to specify the field address in S/370\n    base-displacement format.  If d is zero, it may be omitted.\n    If d(r) or (r) is used, length must also be specified.  R14\n    and R15 may not be used.  If d(0) is used, it is handled the\n    way the assembler does, i.e. R0 as a base register is assumed\n    to contain zero: 16(0) is equivalent to 16, CVTPTR or, X'10'.\n\n  ((r),,format) specifies that (r) contains the value\n    itself, not an address.  R14 and R15 may not be used.\n\n  'character string' specifies a literal enclosed in single quotes\n    as specified in a DC instruction.  Hex strings or character\n    strings are supported.  The following expressions are equivalent:\n    'ABC' C'ABC' X'C1C2C3'\n\n  Length specifies the length and/or the type of the input field.\n    It may be specified as an integer, a symbol, a register, or a\n    constant.  When used with symbol, it overrides the assembled\n    length and/or type.  Length is required if field is specified\n    as d(r) or (r).  If a zero length is specified, the field is\n    ignored.\n\n        nn   field length in bytes\n        H    half-word\n        F    full-word\n        FL1  1-byte binary integer\n        FL3  3-byte binary integer\n        P    packed field\n        (r)  length of character string (R0 thru R12)\n        d(r) length of character string (R1 thru R12)\n\n  Notes:  If the field address is specified as a symbol that\n          has been defined previously in the program, the symbol\n          type is known and there is no need to specify it.\n\n          If the length is specified as (r) or d(r) and the value\n          is greater than the address itself, (r) or d(r) is\n          considered to be the end address +1 instead of the length.\n\n          The length is not specified for packed fields.  The\n          @STRING subroutine scans the field left-to-right until it\n          finds a byte with a valid sign in the low-order 4 bits.\n\n          If symbol is an arithmetic expression and no length is coded,\n          the implicit length will be that of the first symbol in the\n          expression;  for example, if symbol is coded as PSATOLD-PSA,\n          then the implicit length will be L'PSATOLD.\n\n          All numeric items are assumed positive.\n\n  format  optionally indicates editing options that must\n          be applied to a field.\n\n      L        left justified\n      R        right justified\n      nn       output length\n      0        adjust length\n      Z        leading zeroes\n      B        leading/trailing blanks\n      T        truncate character string after last non-blank\n      X        display in hexadecimal\n      YYMMDD   convert julian date to YYMMDD\n      YY/MM/DD convert julian date to YY/MM/DD\n      DD/MM/YY convert julian date to DD/MM/YY\n      MM/DD/YY convert julian date to MM/DD/YY\n      YYYYMMDD convert julian date to YYYYMMDD\n      YYYY-MM-DD convert julian date to YYYY-MM-DD\n\n    The default format depends on the field type:\n\n        Type                   Default Format\n\n        character string             L\n        FL1                          R3B\n        H or FL2                     R5B\n        other numeric fields         R7B\n\n    Note: L0 and T are equivalent for character strings.\n\n  'character string' is any character string enclosed in\n  single quotes.  Blank spaces may be specified as nnX,\n  where nn is the number of X'40' bytes you want to be\n  inserted in the output line.  %TIME may be specified to\n  obtain the current time in hh.mm.ss.hh format.\n\nINTO=workarea|(workarea,length)\n\n  INTO indicates the address and length of the output work area\n  into which the result of the concatenation should be placed\n  (left justified).  If the work area is too small, truncation\n  will occur.  If it is too large, it is padded with blanks.\n\n  The address may be a symbol, d(r) (S-type address) or (r).\n\n  The length may be specified as an integer, a symbol, a register,\n  or a constant; it is required if the address is coded as d(r) or\n  (r).  If length is not specified for a symbol-type address, the\n  assembled length of the symbol is used.\n\n  Upon return from STRING, R15 contains the length actually used\n  in the output work area (before padding).\n\nPRINT=GEN|NOGEN\n\n  This operand allows you to temporarily override the PRINT\n  specification (GEN or NOGEN).\n\nGENERATE (format 2)\n\n  The GENERATE format must be specified once at the end of the\n  program.  It generates the literals used in previous invocations\n  and the @STRING sub-routine.\n\n  The @STRING CSECT contains optional functions (such as %TIME or\n  julian date conversion) that are only generated if they have\n  been specified in the previous invocations of the STRING macro.\n  Specifying GENERATE,FULL on the final invocation of STRING\n  ensures generation of a @STRING CSECT that supports all\n  optional functions.\n\nExamples:\n\n     STRING 'ERROR===>',LINE1,'<=== POS ',((R6),,L0),INTO=WORKAREA\n\n     STRING 8X,C'ERRORS FOUND: ',(ERRORS,,L0),INTO=((R7),44)\n\n     STRING 'CVT ADDR IS ',(CVTPTR,4,X),X'40C1C2C3C4',INTO=LINE\n\n     LA    R5,WORK+16              end addr +1\n     STRING 'R4=',((R4),,X),INTO=(WORK,(R5)),PRINT=GEN\n\n     STRING '//JOBLIB DD DSN=',(DSN1,,T),',DISP=SHR',INTO=((R2),72)\n\n     PUT31 SYSLIN\n     LH    R0,SYSLIN+82            LRECL\n     STRING '   NAME  ',(4(R3),8,T),'(R)',INTO=((R1),(R0))\n\n     STRING GENERATE         Generate literals and sub-routine\n\n\nProgramming Notes:\n\n  A STRING macro generates only 6 bytes that need to be covered by\n  base registers.  More code is generated at the end of the\n  current CSECT (using LOCTR pseudo instruction), but this code\n  does not require addressability.  This is particularly useful\n  when STRING calls specify a large number of literals.\n\n  Additionally, STRING does not use A-type constants (ACON), but\n  S-type constants (SCON) which require symbols to be addressable\n  at the point in the program where STRING is issued.\n\n  While this reduces the number of base registers required to\n  cover the program's code and makes it easier to write reentrant\n  programs, it will produce assembly errors in the following\n  situations:\n\n  a.  STRING is used in more than one CSECT in the same assembly\n\n  b.  the CSECT in which STRING is used is longer than 64K\n\n  c.  symbols are not addressable at the point in the program\n      where STRING is issued\n\n  d.  the $STRING symbol (generated in the $LTORG LOCTR during the\n      GENERATE invocation of the STRING macro) is not addressable\n      in some of the STRING calls.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT338/FILE338.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT338", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}