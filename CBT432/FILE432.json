{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012017000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 3115658, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 15, "INMDSNAM": "CBT.V500.FILE432.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 3115658, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 3115658, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE432.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x001\\n'", "DS1TRBAL": "b']\\xa2'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x03\\x1b\\x00\\x0c\\x03\\x1f\\x00\\x01\\x002'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04Z\\x00Q\\x01\\x15\\x02\\x1f\\x01\\x15\\x02\\x1f\\x161\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf0@@@'", "ispf": {"version": "04.90", "flags": 0, "createdate": "2015-01-21T00:00:00", "modifydate": "2015-01-21T16:31:51", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-490"}, "text": "REGULAR CBT TAPE - VERSION 490    FILE:  432\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT490.FILE432\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 56 MEMBERS COUNTED; CUMULATIVE SIZE IS 28,873 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   01/21/15    16:31:51    UTC-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$DOC": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x01\\x004\\x7f\\x01\\x004\\x7f\\x16Q\\x00]\\x00]\\x00\\x00\\xe4\\xd7\\xc4\\xf2\\xf0\\xf0\\xf0@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2000-12-12T00:00:00", "modifydate": "2000-12-12T16:51:00", "lines": 93, "newlines": 93, "modlines": 0, "user": "UPD2000"}, "text": "  THE AUTHOR'S NOTE\n  =================\n\n  I HAVE TRIED NOT TO DROWN YOU WITH OBSOLETE, OLD OR USELESS MATERIAL.\n  SO HERE YOU HAVE A (HOPEFULLY) CLEVER SELECTION OF ALL THE STUFF\n  I HAVE WRITTEN.\n  THESE ARE PC-DOS OR WINDOWS UTILITIES : MGDOS MGWIN PTKT.\n\n  STANDARD DISCLAIMER\n  ===================\n\n  NEITHER THIERRY FALISSARD NOR ANY COMPANY ASSOCIATED WITH HIM EXPRESS\n  OR IMPLY ANY WARRANTY AS TO THE FITNESS OF THESE COMPUTER PROGRAMS\n  FOR ANY FUNCTION. THE USE OF THESE PROGRAMS OR THE RESULTS THEREOF\n  IS ENTIRELY AT THE RISK OF THE USER.\n\n  THESE PROGRAMS ARE DONATED TO THE PUBLIC DOMAIN AND MAY BE FREELY COPIED.\n  THEY MAY BE FREELY DISTRIBUTED TO ANY OTHER PARTY ON CONDITION THAT\n  NO INDUCEMENT BEYOND REASONABLE HANDLING COSTS BE OFFERED OR ACCEPTED\n  FOR SUCH DISTRIBUTION.\n\n  SOME PROGRAMS WERE PUBLISHED IN XEPHON'S MVS UPDATE OR RACF UPDATE.\n  SINCE XEPHON OFFER THEM FOR FREE ON THEIR WEBSITE (WWW.XEPHON.COM),\n  I CONSIDER THEM AS PUBLIC.\n\n  THESE PROGRAMS MAY BE MODIFIED IN ANY WAY THE USER THINKS FIT BECAUSE\n  USE OF THESE PROGRAMS IS ENTIRELY AT THE RISK OF THE USER ANYWAY.\n  I WOULD BE INTERESTED TO HEAR OF SIGNIFICANT ENHANCEMENTS OR INSTANCES\n  WHERE THESE PROGRAMS HAVE BEEN OF MAJOR BENEFIT (OR OTHERWISE), CONTACT :\n\n           THIERRY FALISSARD\n           TFALISSARD@COMPUSERVE.COM\n           HTTP://OS390-MVS.HYPERMART.NET\n\n  LANGUAGE PROBLEMS\n  =================\n\n THE PROGRAMS ARE DELIVERED WITH COMMENTS IN EITHER ONE OF 3 LANGUAGES :\n ENGLISH, FRENCH AND FRENGLISH (BAD ENGLISH SPOKEN BY A FRENCHIE).\n SO... \"PARDON MY FRENCH\"...\n\n NOTE : SAM GOLOB EXPLAINED ME THAT THIS EXPRESSION (MEANING \"SORRY THAT\n I AM USING FOUL LANGUAGE\", FOR YOU OUTSIDE THE ANGLO-SAXON WORLD)\n WAS NOT UNFRIENDLY TOWARD FRENCH LANGUAGE, BUT PEOPLE PICKED FRENCH\n BECAUSE IT WAS MORE FUNNY THAN, SAY, SPANISH - FRENCH BEING REGARDED\n SOME DECADES AGO IN THE US AS A HIGH-CLASS LANGUAGE. IT MAY EASE YOU TO\n KNOW THAT FRENCH-SPEAKING PEOPLE CAN ALSO USE VERY FOUL LANGUAGE...\n\n  CONTENTS\n  ========\n\nALLSTOP  - A TOOL TO STOP ALL RUNNING ADDRESS-SPACES\nASCBS    - REXX TO LIST ALL ADDRESS-SPACES (FRENCH COMMENTS)\nCONSOLE  - BRINGING THE MVS MASTER CONSOLE UNDER ISPF (USES SVC 235 ; \"LAST\n           COMMAND\" INFORMATION PROBABLY FALSE ; DON'T CALL THE LOAD \"CONSOLE\"|\nCONSOLEP - ISPF PANEL FOR \"CONSOLE\" PROGRAM\nCONVERT  - MACRO - CONVERTS FROM PACKED/DECIMAL/BINARY TO PACKED/DECIMAL/BINARY\nCONVRTP  - REXX TO CONVERT CATALOG ENTRIES FROM 3480 TO 3490  - FRENCH COMMENTS\nERASETP  - PROGRAM TO ERASE TAPE DATA (FOR SECURITY OR TO EVAL. TAPE CAPACITY)\nEXP      - REXX TO COMPUTE EXPONENTIAL FUNCTION (FRENGLISH COMMENTS)\nEXTEND   - MACRO - EXTENDS A BINARY ZONE TO DECIMAL\nEXEMPLES - EXAMPLES OF ASSEMBLER CODING (EDUCATIONAL PURPOSE) - FRENCH COMMENTS\nICHPWX01 - RACF NEW PASSWORD EXIT - FRENCH COMMENTS\nIGGPRE00 - DADSM PRE-PROCESSING EXIT, CONTROLS ACCESS TO VOLUME VIA\n           A DEDICATED \"ALLOC\" RACF CLASS - FRENCH COMMENTS\nINTERCPT - MPF EXIT - USED TO REPLY TO MESSAGES, TO ISSUE MVS COMMANDS\n           OR TO SEND MESSAGES  - FRENCH COMMENTS\nIRA200E  - THIS MEMORY ZAP ALLOWS YOU TO CHANGE THE 70% AND 85 % THRESHOLDS\nJESLESS  - JESLESS IN A NUTSHELL (HOW TO HAVE A LOGON TSO WITHOUT JES).\nLISTSMS  - LISTING THE SMS CONFIGURATION\nMGDOS    - SHAREWARE \"MEGACRYPT/DOS\" - COPY IT TO PC AND RENAME IT MGDOS.ZIP\nMGWIN    - SHAREWARE \"MEGACRYPT/WINDOWS\" - COPY IT TO PC AND RENAME IT MGWIN.ZIP\n    NOTE : MGDOS AND MGWIN ARE FREE PARTS OF A LICENSED PRODUCT : MEGACRYPT/MVS\nMINISYST - THE JCL I USE FOR CREATING AN MVS MINI SYSTEM (OS/390 V2R5)\nMVSCMD   - PROGRAM TO ISSUE ANY MVS OR JES2 IN BATCH - A CLASSICAL - FRENCH\nPREMIER  - PRIME NUMBER TESTING (EDUCATIONAL PURPOSE) - FRENCH COMMENTS\nPRINTHX  - MACRO FOR CONVERSION TO HEX - FRENCH COMMENTS\nPROLOG   - MACRO TO ENTER THE PROGRAM - NOT CLEVER, BUT UNAVOIDABLE - FRENCH\nPTKT     - SHAREWARE \"PTKTGEN\" - COPY IT TO PC AND RENAME IT PTKT.ZIP\n           (IT IS A RACF PASSTICKET GENERATOR FOR PC/DOS)\nSHOWLPAR - DISPLAYS THE CURRENT PR/SM CONFIGURATION (SEE \"A BIT OF HISTORY\")\nSHOWMVS  - JCL : MY WAY TO RUN SHOWMVS IN BATCH - SHOWMVS R623D IN OBJ FORMAT\nSMFJOBS  - LIST ALL JOBS (BASED ON SMF TYPE 30 RECORDS) - FRENCH COMMENTS\nSRMSHOW  - DISPLAYS CURRENT AND THRESHOLD VALUES OF MAJOR SRM PARAMETERS  MVS/XA\nSUSEC    - LISTING PROCESSORS IN THE COMPLEX AND THE MIPS (MSU) AVAILABLE - REXX\nSVC235   - YES, A MAGIC SVC | BUT WITH SOME BASIC CONTROLS...\nTPUTXMAS - FOR THE FUN - XMAS TREE DISPLAY ON TSO FOR THE YEAR'S END...\nVTOCR1   - PANEL USED BY VTOCREAD (SEE VTOCZAP)\nVTOCZAP  - JCL TO INSTALL \"VTOCREAD\". ENABLES YOU TO ZAP THE VTOC THRU ISPF\n           (NOT DIRECTLY, AN AMASPZAP JCL IS GENERATED). SOURCE OF VTOCREAD LOST\nWEAKPASS - DISPLAYING RACF USERIDS WITH WEAK D.E.S. PASSWORD (XEPHON)\nWTOPUT   - MACRO - ISSUES A WTO WITH MIXED LITTERALS AND DATA ZONES\nXTOD     - MACRO - CONVERTS HUNDREDTHS OF SECOND INTO 'HH:MM'\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$XEPHON": {"ttr": 521, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x005\\x01\\t5\\x7f\\x01\\t5\\x7f!\\x01\\x00\\r\\x00\\r\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2009-12-23T00:00:00", "modifydate": "2009-12-23T21:01:35", "lines": 13, "newlines": 13, "modlines": 0, "user": "SBGOLOB"}, "text": "                          XEPHON Materials\n\nThomas Publications, which acquired all rights for the Xephon materials\nfrom www.xephon.com, has given support rights for all the materials,\nup to the year 2005 (and possibly beyond), per later instructions, to\nwww.cbttape.org.  This is as of May 2008.\n\nTherefore, XEPHON materials republished here, certainly have a right\nto be here, so you don't have to worry about using them.\n\nSam Golob (12-2009)\n\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$UPD2000": {"ttr": 523, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x00\\x01\\x004\\x7f\\x01\\x004\\x7f\\x17\\x11\\x00\\x12\\x00\\x12\\x00\\x00\\xe4\\xd7\\xc4\\xf2\\xf0\\xf0\\xf0@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2000-12-12T00:00:00", "modifydate": "2000-12-12T17:11:00", "lines": 18, "newlines": 18, "modlines": 0, "user": "UPD2000"}, "text": "December 2000 Update\n\nNew members :\n\nANALJCL  : JCL TO ANALYZE JCL LIBRARIES\nANALJCLR : REXX TO ANALYZE JCL LIBRARIES\nLISTVT   : REXX exec to analyze a DCOLLECT output\nLISTVTOC : JCL to list VTOCs from a DCOLLECT output\nMINIFRAN : rename of MINISYST\nPADS     : REXX exec to initialize RACF PADS mode\nRACFCHCK : assembler subroutine to RACHECK a resource\nRACFMOVE : JCL to move the RACF database from a disk to another.\n\nUpdated members :\n\nALLSTOP\nMINISYST : new JCL to create a mini-system. Comments in English.\nSUSEC\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@FILE432": {"ttr": 525, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04Z\\x00A\\x01\\x15\\x02\\x1f\\x01\\x15\\x02\\x1f\\x161\\x00\\xa9\\x00\\xa9\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf0@@@'", "ispf": {"version": "04.90", "flags": 0, "createdate": "2015-01-21T00:00:00", "modifydate": "2015-01-21T16:31:41", "lines": 169, "newlines": 169, "modlines": 0, "user": "CBT-490"}, "text": "//***FILE 432 is from Thierry Falissard of Paris, France, and       *   FILE 432\n//*           it contains a selection from things he has written    *   FILE 432\n//*           over many years.  We hope you enjoy it.               *   FILE 432\n//*                                                                 *   FILE 432\n//*       THE AUTHOR'S NOTE                                         *   FILE 432\n//*       =================                                         *   FILE 432\n//*                                                                 *   FILE 432\n//*       I HAVE TRIED NOT TO DROWN YOU WITH OBSOLETE, OLD OR       *   FILE 432\n//*       USELESS MATERIAL.  SO HERE YOU HAVE A (HOPEFULLY)         *   FILE 432\n//*       CLEVER SELECTION OF ALL THE STUFF I HAVE WRITTEN.         *   FILE 432\n//*                                                                 *   FILE 432\n//*       THESE ARE PC-DOS OR WINDOWS UTILITIES : MGDOS MGWIN       *   FILE 432\n//*       PTKT.                                                     *   FILE 432\n//*                                                                 *   FILE 432\n//*       I WOULD BE INTERESTED TO HEAR OF SIGNIFICANT              *   FILE 432\n//*       ENHANCEMENTS OR INSTANCES WHERE THESE PROGRAMS HAVE       *   FILE 432\n//*       BEEN OF MAJOR BENEFIT (OR OTHERWISE), CONTACT :           *   FILE 432\n//*                                                                 *   FILE 432\n//*        Thierry Falissard                                        *   FILE 432\n//*        tfalissard@compuserve.com                                *   FILE 432\n//*        http://os390-mvs.hypermart.net                           *   FILE 432\n//*        or                                                       *   FILE 432\n//*        http://ourworld.compuserve.com/homepages/tfalissard      *   FILE 432\n//*                                                                 *   FILE 432\n//*       STANDARD DISCLAIMER                                       *   FILE 432\n//*       ===================                                       *   FILE 432\n//*                                                                 *   FILE 432\n//*       NEITHER THIERRY FALISSARD NOR ANY COMPANY ASSOCIATED      *   FILE 432\n//*       WITH HIM EXPRESS OR IMPLY ANY WARRANTY AS TO THE          *   FILE 432\n//*       FITNESS OF THESE COMPUTER PROGRAMS FOR ANY FUNCTION.      *   FILE 432\n//*       THE USE OF THESE PROGRAMS OR THE RESULTS THEREOF IS       *   FILE 432\n//*       ENTIRELY AT THE RISK OF THE USER.                         *   FILE 432\n//*                                                                 *   FILE 432\n//*       THESE PROGRAMS ARE DONATED TO THE PUBLIC DOMAIN AND       *   FILE 432\n//*       MAY BE FREELY COPIED.  THEY MAY BE FREELY DISTRIBUTED     *   FILE 432\n//*       TO ANY OTHER PARTY ON CONDITION THAT NO INDUCEMENT        *   FILE 432\n//*       BEYOND REASONABLE HANDLING COSTS BE OFFERED OR            *   FILE 432\n//*       ACCEPTED FOR SUCH DISTRIBUTION.                           *   FILE 432\n//*                                                                 *   FILE 432\n//*       SOME PROGRAMS WERE PUBLISHED IN XEPHON'S MVS UPDATE       *   FILE 432\n//*       OR RACF UPDATE.  SINCE XEPHON OFFERS THEM FOR FREE ON     *   FILE 432\n//*       THEIR WEBSITE (WWW.XEPHON.COM), I CONSIDER THEM AS        *   FILE 432\n//*       PUBLIC.                                                   *   FILE 432\n//*                                                                 *   FILE 432\n//*       Note:  Xephon programs are now supported here, at         *   FILE 432\n//*              www.cbttape.org, ever since Xephon, transferred    *   FILE 432\n//*              to Thomas Publishing, stopped publishing their     *   FILE 432\n//*              journals.  So Thierry's stuff certainly belongs    *   FILE 432\n//*              here.  (S.Golob - 12/2009)                         *   FILE 432\n//*                                                                 *   FILE 432\n//*              The CBT Tape website is now the support location   *   FILE 432\n//*              for almost all Xephon materials.                   *   FILE 432\n//*                                                                 *   FILE 432\n//*       THESE PROGRAMS MAY BE MODIFIED IN ANY WAY THE USER        *   FILE 432\n//*       THINKS FIT BECAUSE USE OF THESE PROGRAMS IS ENTIRELY      *   FILE 432\n//*       AT THE RISK OF THE USER ANYWAY.                           *   FILE 432\n//*                                                                 *   FILE 432\n//*       LANGUAGE PROBLEMS                                         *   FILE 432\n//*       =================                                         *   FILE 432\n//*                                                                 *   FILE 432\n//*      THE PROGRAMS ARE DELIVERED WITH COMMENTS IN EITHER ONE     *   FILE 432\n//*      OF 3 LANGUAGES :  ENGLISH, FRENCH AND FRENGLISH (BAD       *   FILE 432\n//*      ENGLISH SPOKEN BY A FRENCHIE).  SO... \"EXCUSE MY           *   FILE 432\n//*      FRENCH\"...                                                 *   FILE 432\n//*                                                                 *   FILE 432\n//*     December 2000 Update                                        *   FILE 432\n//*                                                                 *   FILE 432\n//*     New members :                                               *   FILE 432\n//*                                                                 *   FILE 432\n//*     ANALJCL  : JCL TO ANALYZE JCL LIBRARIES                     *   FILE 432\n//*     ANALJCLR : REXX TO ANALYZE JCL LIBRARIES                    *   FILE 432\n//*     LISTVT   : REXX exec to analyze a DCOLLECT output           *   FILE 432\n//*     LISTVTOC : JCL to list VTOCs from a DCOLLECT output         *   FILE 432\n//*     MINIFRAN : rename of MINISYST                               *   FILE 432\n//*     PADS     : REXX exec to initialize RACF PADS mode           *   FILE 432\n//*     RACFCHCK : assembler subroutine to RACHECK a resource       *   FILE 432\n//*     RACFMOVE : JCL to move the RACF database from a disk to     *   FILE 432\n//*                another.                                         *   FILE 432\n//*                                                                 *   FILE 432\n//*     Updated members :                                           *   FILE 432\n//*                                                                 *   FILE 432\n//*     ALLSTOP    Added 3 new members from Gilbert Saint-flour     *   FILE 432\n//*                to help run this utility better.                 *   FILE 432\n//*     ASCBS    - REXX TO LIST ALL ADDRESS-SPACES (FRENCH          *   FILE 432\n//*     MINISYST : new JCL to create a mini-system. Comments in     *   FILE 432\n//*                English.                                         *   FILE 432\n//*     SUSEC                                                       *   FILE 432\n//*                                                                 *   FILE 432\n//*                                                                 *   FILE 432\n//*       CONTENTS                                                  *   FILE 432\n//*       ========                                                  *   FILE 432\n//*                                                                 *   FILE 432\n//*     ALLSTOP  - A TOOL TO STOP ALL RUNNING ADDRESS-SPACES        *   FILE 432\n//*                Added 3 new members from Gilbert Saint-flour     *   FILE 432\n//*                to help run this utility better.                 *   FILE 432\n//*     ASCBS    - REXX TO LIST ALL ADDRESS-SPACES (FRENCH          *   FILE 432\n//*                COMMENTS)                                        *   FILE 432\n//*     CONSOLE  - BRINGING THE MVS MASTER CONSOLE UNDER ISPF       *   FILE 432\n//*                (USES SVC 235 ; \"LAST COMMAND\" INFORMATION       *   FILE 432\n//*                PROBABLY FALSE ; DON'T CALL THE LOAD             *   FILE 432\n//*                \"CONSOLE\"                                        *   FILE 432\n//*     CONSOLEP - ISPF PANEL FOR \"CONSOLE\" PROGRAM                 *   FILE 432\n//*     CONVERT  - MACRO - CONVERTS FROM PACKED/DECIMAL/BINARY      *   FILE 432\n//*                TO PACKED/DECIMAL/BINARY                         *   FILE 432\n//*     CONVRTP  - REXX TO CONVERT CATALOG ENTRIES FROM 3480 TO     *   FILE 432\n//*                3490  - FRENCH COMMENTS                          *   FILE 432\n//*     ERASETP  - PROGRAM TO ERASE TAPE DATA (FOR SECURITY OR      *   FILE 432\n//*                TO EVAL. TAPE CAPACITY)                          *   FILE 432\n//*     EXP      - REXX TO COMPUTE EXPONENTIAL FUNCTION             *   FILE 432\n//*                (FRENGLISH COMMENTS)                             *   FILE 432\n//*     EXTEND   - MACRO - EXTENDS A BINARY ZONE TO DECIMAL         *   FILE 432\n//*     EXEMPLES - EXAMPLES OF ASSEMBLER CODING (EDUCATIONAL        *   FILE 432\n//*                PURPOSE) - FRENCH COMMENTS                       *   FILE 432\n//*     ICHPWX01 - RACF NEW PASSWORD EXIT - FRENCH COMMENTS         *   FILE 432\n//*     IGGPRE00 - DADSM PRE-PROCESSING EXIT, CONTROLS ACCESS       *   FILE 432\n//*                TO VOLUME VIA A DEDICATED \"ALLOC\" RACF CLASS     *   FILE 432\n//*                - FRENCH COMMENTS                                *   FILE 432\n//*     INTERCPT - MPF EXIT - USED TO REPLY TO MESSAGES, TO         *   FILE 432\n//*                ISSUE MVS COMMANDS OR TO SEND MESSAGES  -        *   FILE 432\n//*                FRENCH COMMENTS                                  *   FILE 432\n//*     IRA200E  - THIS MEMORY ZAP ALLOWS YOU TO CHANGE THE 70%     *   FILE 432\n//*                AND 85 % THRESHOLDS                              *   FILE 432\n//*     JESLESS  - JESLESS IN A NUTSHELL (HOW TO HAVE A LOGON       *   FILE 432\n//*                TSO WITHOUT JES).                                *   FILE 432\n//*     LISTSMS  - LISTING THE SMS CONFIGURATION                    *   FILE 432\n//*     MGDOS    - SHAREWARE \"MEGACRYPT/DOS\" - COPY IT TO PC        *   FILE 432\n//*                AND RENAME IT MGDOS.ZIP                          *   FILE 432\n//*     MGWIN    - SHAREWARE \"MEGACRYPT/WINDOWS\" - COPY IT TO       *   FILE 432\n//*                PC AND RENAME IT MGWIN.ZIP                       *   FILE 432\n//*         NOTE : MGDOS AND MGWIN ARE FREE PARTS OF A LICENSED     *   FILE 432\n//*         PRODUCT : MEGACRYPT/MVS                                 *   FILE 432\n//*     MINISYST - THE JCL I USE FOR CREATING AN MVS MINI           *   FILE 432\n//*                SYSTEM (OS/390 V2R5)                             *   FILE 432\n//*     MVSCMD   - PROGRAM TO ISSUE ANY MVS OR JES2 IN BATCH -      *   FILE 432\n//*                A CLASSICAL - FRENCH                             *   FILE 432\n//*     PREMIER  - PRIME NUMBER TESTING (EDUCATIONAL PURPOSE) -     *   FILE 432\n//*                FRENCH COMMENTS                                  *   FILE 432\n//*     PRINTHX  - MACRO FOR CONVERSION TO HEX - FRENCH COMMENTS    *   FILE 432\n//*     PROLOG   - MACRO TO ENTER THE PROGRAM - NOT CLEVER, BUT     *   FILE 432\n//*                UNAVOIDABLE - FRENCH                             *   FILE 432\n//*     PTKT     - SHAREWARE \"PTKTGEN\" - COPY IT TO PC AND          *   FILE 432\n//*                RENAME IT PTKT.ZIP (IT IS A RACF PASSTICKET      *   FILE 432\n//*                GENERATOR FOR PC/DOS)                            *   FILE 432\n//*     SHOWLPAR - DISPLAYS THE CURRENT PR/SM CONFIGURATION         *   FILE 432\n//*                (SEE \"A BIT OF HISTORY\")                         *   FILE 432\n//*     SHOWMVS  - JCL : MY WAY TO RUN SHOWMVS IN BATCH -           *   FILE 432\n//*                SHOWMVS R623D IN OBJ FORMAT                      *   FILE 432\n//*     SMFJOBS  - LIST ALL JOBS (BASED ON SMF TYPE 30 RECORDS)     *   FILE 432\n//*                - FRENCH COMMENTS                                *   FILE 432\n//*     SRMSHOW  - DISPLAYS CURRENT AND THRESHOLD VALUES OF         *   FILE 432\n//*                MAJOR SRM PARAMETERS  MVS/XA                     *   FILE 432\n//*     SUSEC    - LISTING PROCESSORS IN THE COMPLEX AND THE        *   FILE 432\n//*                MIPS (MSU) AVAILABLE - REXX                      *   FILE 432\n//*     SVC235   - YES, A MAGIC SVC | BUT WITH SOME BASIC           *   FILE 432\n//*                CONTROLS...                                      *   FILE 432\n//*     TPUTXMAS - FOR THE FUN - XMAS TREE DISPLAY ON TSO FOR       *   FILE 432\n//*                THE YEAR'S END...                                *   FILE 432\n//*     VTOCR1   - PANEL USED BY VTOCREAD (SEE VTOCZAP)             *   FILE 432\n//*     VTOCZAP  - JCL TO INSTALL \"VTOCREAD\". ENABLES YOU TO        *   FILE 432\n//*                ZAP THE VTOC THRU ISPF (NOT DIRECTLY, AN         *   FILE 432\n//*                AMASPZAP JCL IS GENERATED). SOURCE OF            *   FILE 432\n//*                VTOCREAD LOST                                    *   FILE 432\n//*     WEAKPASS - DISPLAYING RACF USERIDS WITH WEAK D.E.S.         *   FILE 432\n//*                PASSWORD (XEPHON)                                *   FILE 432\n//*     WTOPUT   - MACRO - ISSUES A WTO WITH MIXED LITTERALS        *   FILE 432\n//*                AND DATA ZONES                                   *   FILE 432\n//*     XTOD     - MACRO - CONVERTS HUNDREDTHS OF SECOND            *   FILE 432\n//*                INTO 'HH:MM'                                     *   FILE 432\n//*                                                                 *   FILE 432\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ALLSTOP": {"ttr": 529, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x004\\x7f\\x01\\x004\\x7f\\x16Q\\x01\\xf5\\x01\\xf5\\x00\\x00\\xe4\\xd7\\xc4\\xf2\\xf0\\xf0\\xf0@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2000-12-12T00:00:00", "modifydate": "2000-12-12T16:51:00", "lines": 501, "newlines": 501, "modlines": 0, "user": "UPD2000"}, "text": "* PUBLISHED IN XEPHON - MVS UPDATE - JULY 1993\n*\n*    \"ALLSTOP\", AN AUTOMATED TOOL TO STOP ALL RUNNING ADDRESS-SPACES\n*    ---------------------------------------------------------------\n*    I WROTE THIS PROGRAM FOR THOSE WHO STILL HAVE NOT AN AUTOMATE AT\n*  THEIR DISPOSAL TO TRIGGER AUTOMATICALLY SOME ACTIONS REQUIRING A\n*  CONSIDERABLE NUMBER OF MVS OR JES COMMANDS TO BE ISSUED. IT WAS\n*  ORIGINALLY DEDICATED TO STOPPING ALL ACTIVE TASKS BEFORE IPLING,\n*  RELIEVING BY THIS WAY OUR OPERATORS FROM THE IRKSOMENESS OF SEEKING\n*  OUTSTANDING REPLY NUMBERS, ORDERLY TYPING SCORES OF COMMANDS, ETC.\n*  THIS PROGRAM CAN ALSO BE USED TO STOP AND RESTART \"ON THE FLY\"\n*  CRITICAL ADDRESS-SPACES, LIKE VTAM OR JES, WITHOUT EVEN HAVING TO GO\n*  TO THE CONSOLE ROOM (BEING HOPEFUL THAT ALL IS GOING OK...). ALLSTOP\n* READS PARAMETERS FROM THE SYSIN FILE, VERIFY WHETHER THE ADDR-SPACE\n*  (FIRST PARAMETER) IS ACTIVE, SHOULD SUCH BE THE CASE A JES OR MVS\n*  COMMAND (2ND PARAMETER), WHICH CAN BE A REPLY, IS ISSUED IN ORDER TO\n*  STOP THE JOB OR THE STC. THE KEYWORD \"WAIT\" MAKES ALLSTOP WAIT FOR A\n*  WHILE, \"PJES2\" INSTRUCTS IT TO STOP JES2 (IF THERE IS NO ACTIVE JOB\n*  ANY MORE) AND WITH THE \"MVS\" KEYWORD THE LAST COMMAND \"Z EOD\" IS\n*  ISSUED PROVIDED THAT JES HAS STOPPED.\n*\n*      THE OPERATORS CAN MONITOR THE EVENTS AS THEY HAPPEN, FOR THE\n*  PROGRAM SENDS THEM HIGH-INTENSITY MESSAGES WHICH ARE ROLLED-UP\n*  AS THE STOPPING IS GOING FORWARD.\n*\n*   THE JCL PROCEDURE TO IMPLEMENT ALLSTOP MAY LOOK LIKE THIS :\n*   //*\n*   //*  COMMAND TO STOP ALL PRODUCTS :\n*   //*\n*   //*  -  S ALLSTOP,SUB=MSTR,M=STOPMVS\n*   //*\n*   //*  COMMAND TO STOP AND RESTART JES :\n*   //*\n*   //*  -  S ALLSTOP,SUB=MSTR,M=STOPJES,P=BYPASS  (NO WTOR TO CONFIRM)\n*   //*\n*   //ALLSTOP PROC M=ALLSTOP,P=\n*   //ALLSTOP EXEC PGM=ALLSTOP,TIME=1440,PARM=&P\n*   //SYSIN   DD DISP=SHR,DSN=SYS1.PARMLIB(&M)\n*\n*   AN EXAMPLE OF PARAMETER MEMBERS IS SHOWN BELOW :\n*  *===============================================================\n*  * 1) SYS1.PARMLIB(STOPJES) : TO STOP AND RESTART JES2\n*  *\n*  * JES2 IS STOPPED \"ON THE FLY\" AND HOT-STARTED, SO ARE OTHER A.S.\n*  * THAT ARE CLOSELY LINKED TO JES2\n*  *\n*  * - S ALLSTOP,M=STOPJES\n*  *\n*  CADSDISP REPLY 99STOPCADS\n*  JES328X P JES328X\n*  SPOOLMAN P SPOOLMAN\n*  *\n*  * CANCEL ALL PRESENTLY RUNNING AFP PRINTINGS ...\n*  *\n*  FSS0 C FSS0\n*  FSS1 C FSS1\n*  FSS2 C FSS2\n*  FSS3 C FSS3\n*  FSS4 C FSS4\n*  FSS5 C FSS5\n*  FSS6 C FSS6\n*  FSS7 C FSS7\n*  FSS8 C FSS8\n*  FSS9 C FSS9\n*  * WAIT TILL EVERYONE STOPS\n*  CADSDISP WAIT\n*  JES328X WAIT\n*  SPOOLMAN WAIT\n*  * IMMEDIATE SHUTDOWN OF JES2\n*  ALLSTOP $PJES2,ABEND\n*  ALLSTOP WAIT 05\n*  JES2 REPLY EXIT\n*  * WAIT FOR JES2 TO STOP\n*  JES2 WAIT\n*  *\n*  * OF COURSE PROGRAM \"ALLSTOP\" CAN BE USED TO START TASKS,\n*  * NOT ONLY TO STOP THEM ...\n*  *\n*  * RESTART JES2\n*  ALLSTOP S JES2,PARM='WARM,NOREQ'\n*  * RESTART THE OTHER SOFTS\n*  ALLSTOP S CADSDISP\n*  ALLSTOP S JES328X\n*  ALLSTOP S SPOOLMAN\n*  ALLSTOP C ALLSTOP                 SUICIDE SINCE OUR JOB IS DONE\n*  *=================================================================\n*\n* PROGRAM \"ALLSTOP\"\n*\n* THIS PROGRAM MAY STOP ALL JOBS AND STCS CURRENTLY ACTIVE\n* ACCORDING TO PARAMETERS YOU INDICATE (DDNAME SYSIN)\n*\n* MUST BE LINK-EDITED WITH AC=1\n*\nR0       EQU 0\nR1       EQU 1\nR2       EQU 2\nR3       EQU 3\nR4       EQU 4\nR5       EQU 5\nR6       EQU 6\nR7       EQU 7\nR8       EQU 8\nR9       EQU 9\nR10      EQU 10\nR11      EQU 11\nR12      EQU 12\nR13      EQU 13\nR14      EQU 14\nR15      EQU 15\n*---------------------------------------------------*\n* \"SPACES\" MACRO SETS A ZONE TO ALL SPACES          *\n*---------------------------------------------------*\n         MACRO\n&NLA     SPACES  &ZONE\n         MVI   &ZONE,C' '                  FIRST BYTE SET TO SPACE\n         MVC   &ZONE+1(L'&ZONE-1),&ZONE    PROPAGATE TO ALL BYTES\n         MEND\n*-----------------------------------------------------------------*\n* \"SYSJOB\" MACRO VERIFIES WHETHER A JOB IS ACTIVE                 *\n*-----------------------------------------------------------------*\n         MACRO\n&NLA     SYSJOB  &JOBNAME=\n&NLA     DS    0H\n.*\n.* IF JOB IS ACTIVE, WE OBTAIN ITS ASCB ADDRESS IN REG 1, AND ITS\n.* ASID NUMBER IN REG 0 (RIGHT HALFWORD)\n.*\n          STM   R5,R8,SVRG&SYSNDX   SAVE REGISTERS 5 THROUGH 8\n          L     R15,16              CVT ADDRESS\n          PUSH  USING\n          USING CVT,R15\n          L     R6,CVTASVT          LOAD ASVT ADDRESS\n          DROP  R15\n          USING ASVT,R6\n          L     R5,ASVTMAXU\n          LA    R6,ASVTENTY-4       R6=ADDRESS OF 1ST ASCB MINUS 4\nLSVT&SYSNDX DS  0H\n          LTR   R5,R5               MAXUSER = 0 ?\n          BZ    NTFN&SYSNDX         YES, ASVT LOOKUP ENDED ->NOT FOUND\n          BCTR  R5,0                MAXUSER - 1\n          LA    R6,4(R6)            NEXT ASVT ENTRY\n          USING ASCB,R7\n          L     R7,0(R6)            R7=ASCB ADDRESS\n          TM    0(R6),X'80'         AVAILABLE ASID ?\n          BO    LSVT&SYSNDX         ASID NOT AVAILABLE, LET'S SEE NEXT\n          CLC   =C'ASCB',ASCBASCB   VERIFYING ACRONYM\n          BNE   LSVT&SYSNDX\n          L     R1,ASCBJBNI         LOAD ADDRESS OF JOBNAME\n          LTR   R1,R1\n          BNZ   LJBN&SYSNDX\n          L     R1,ASCBJBNS         LOAD ADDRESS OF STC\nLJBN&SYSNDX CLC 0(8,R1),&JOBNAME    IS IT THAT JOB ?\n          BNE   LSVT&SYSNDX\n.* JOB WAS FOUND\n          LH    R0,ASCBASID         LOAD ASID NUMBER\n          LR    R1,7                PUT ASCB ADDRESS IN REG 1\n          XR    R15,R15             RETURN CODE = 0\n          B     XSVT&SYSNDX\nNTFN&SYSNDX DS  0H\n          LA    R15,12              RETURN CODE = 12, JOB DOESN'T EXIST\n          B     XSVT&SYSNDX\n.* JOB WAS NOT FOUND\nSVRG&SYSNDX DS 4F                   4 WORDS TO SAVE REGISTERS 5,6,7,8\nXSVT&SYSNDX DS 0H\n          LM    R5,R8,SVRG&SYSNDX\n          DROP  R6,R7\n          POP   USING\n          MEND\n*-----------------------------------------------------------------*\n* \"$MVSCMD\" MACRO ISSUES AN MVS COMMAND                           *\n*-----------------------------------------------------------------*\n         MACRO\n.*\n&NLA     $MVSCMD  &CMD\n&NLA     DS   0H\n         LA   1,L'&CMD\n         MVC  MGCRCMD(L'&CMD),&CMD\n         STH  1,MGCRLEN\n         MODESET MODE=SUP,KEY=ZERO\n         LA   1,MGCRLEN\n         XR   0,0\n         SVC  34                  MGCR MACRO TO ADD COMMAND IN QUEUE\n         MODESET MODE=PROB,KEY=NZERO\n         MEXIT\n         MEND\n*---------------------------------------------------------------------*\n* $REPLY MACRO GETS THE REPLY NUMBER OF THE WTOR ASSOCIATED TO A JOB  *\n*---------------------------------------------------------------------*\n         MACRO\n.*\n.*  ASID    = BINARY WORD CONTAINING THE ASID NUMBER OF THE ADDRESS-\n.*            SPACE ASSOCIATED TO THE REPLY NUMBER  (INPUT)\n.*  REPLYID = 2 CHAR-ZONE THAT WILL GET THE REPLY NUMBER  (OUTPUT)\n.*\n.*  CHAINING OF CONTROL BLOCKS : CVT -> UCMBASE -> ORE -> ORE -> ...\n.*\n&NLA     $REPLY &REPLYID=,&ASID=\n.*\n&NLA     DS    0H\n         MNOTE '** THIS MACRO USES REG 1, 2, AND DSECTS CVT,UCM,ORE **'\n         PUSH  USING\n         L    R1,16               LOAD ADDRESS OF CVT\n         USING CVT,R1\n         L    R1,CVTCUCB          LOAD ADDRESS OF UCM BASE\n         DROP R1\n         USING UCM,R1\n         LTR  R1,R1\n         BZ   BAD&SYSNDX          ADDRESS OF UCM BASE = 0\n         L    R2,UCMRPYQ          LOAD ADDRESS OF 1ST ORE\n         DROP R1\n         USING OREF,R2\n         LTR  R2,R2               ADDRESS OF  ORE = 0 ?\n         BZ   BAD&SYSNDX\n         MODESET MODE=SUP,KEY=ZERO\nLOOP&SYSNDX  DS  0H               LOOPING\n         CLC  OREASID,&ASID+2     OUR ASID ?\n         BE   YESB&SYSNDX         YES, QUIT THE LOOP\n         L    R2,ORELKP           TAKE ADDRESS OF NEXT ORE\n         LTR  R2,R2               ADDRESS OF NEXT ORE = 0 ?\n         BZ   NOTF&SYSNDX         YES, AT END IN CHAIN OF ORES\n         B    LOOP&SYSNDX\nYESB&SYSNDX  DS  0H               FOUND\n         MVC  &REPLYID.(2),OREID       KEEP REPLY NUMBER\n         MODESET MODE=PROB,KEY=NZERO\n         XR   R15,R15\n         B    END&SYSNDX\nNOTF&SYSNDX  DS  0H               NOT FOUND\n         MODESET MODE=PROB,KEY=NZERO\nBAD&SYSNDX  DS  0H                UNHAPPY END\n         LA   R15,16\nEND&SYSNDX DS 0H               END\n         DROP R2\n         POP  USING\n         MEND\n*-----------------------------------------------------------------*\n* DSECTS NEEDED                                                   *\n*-----------------------------------------------------------------*\n         CVT  DSECT=YES                ,    CVT\n         IHAASCB                       ,    ASCB\n         IHAASVT                       ,    ASVT\n         IHAORE                        ,    OPERATOR REPLY ELEMENT\n         IEECUCM                       ,    UCM\n         DCBD    DSORG=PS,DEVD=DA           DCB\n*\nALLSTOP  CSECT\n* HOUSEKEEPING\n         STM  R14,R12,12(R13)     SAVE REGISTERS\n         LR   R12,R15\n         USING ALLSTOP,R12        R12 IS BASE REGISTER\n         ST   R13,SAVE+4\n         LA   R13,SAVE\n* IF PARAMETER \"BYPASS\" WAS CODED, THEN NO WTOR WILL BE ISSUED\n         L    R5,0(R1)\n         CLC  0(2,R5),=H'6'       ONLY \"BYPASS\" IS SUPPORTED\n         BNE  NOPARM\n         CLC  =C'BYPASS',2(R5)\n         BNE  NOPARM\n         B    CONFIRM             \"BYPASS\" WAS CODED, NO WTOR\nNOPARM   DS   0H\n* REPLY TO CONFIRM\nWTOR1    XC   ECB,ECB\n         LA   R6,REPLY\n         LA   R8,1                LENGTH OF REPLY ZONE = 1 CHARACTER\n         WTOR '** STOPPING ALL PRODUCTS BEFORE IPLING, ENTER C TO CONFIX\n               RM, T TO TERMINATE',(6),(8),ECB\n         WAIT ECB=ECB\n* ANALYZING THE REPLY\n         CLI  REPLY,C'C'          R XX,C : STOPPING MUST BE DONE\n         BE   CONFIRM\n         CLI  REPLY,C'T'          R XX,T : EXIT\n         BE   THEEND\n         WTO  '** INVALID REPLY, PLEASE REENTER **'\n         B    WTOR1\nCONFIRM  DS   0H\n         LA   R11,TABNOSTP        TABLE OF JOBS/TASKS NOT TO BE STOPPED\n* VERIFY IF //SYSIN WAS ALREADY OPENED\n         LA   R1,SYSIN\n         USING IHADCB,R1\n         TM   DCBOFLGS,DCBOFOPN   SYSIN ALREADY OPEN ?\n         BO   ALREOPEN\n         DROP R1\n         OPEN (SYSIN,(INPUT))     OPEN //SYSIN FILE\nALREOPEN DS   0H\nLOOPIN   GET  SYSIN,ZONE\n* ANALYZE PARAMETERS\n         SPACES  REPLZONE\n         CLI  ZONE,C'*'           LINE OF COMMENTS ?\n         BE   LOOPIN\n         CLC  =C'NOSTOP ',ZONE    \"DON'T STOP\" JOB ?\n         BE   NOSTOPT\n         CLC  =C'WAIT ',ZONE      MUST WE WAIT A WHILE ?\n         BE   WAITTIME\n         CLC  ZONE(6),$PJES2      MUST WE ALREADY STOP JES2 ?\n         BE   TRTJES2\n         CLC  =C'MVS ',ZONE       MUST WE ISSUE \"Z EOD\" ?\n         BE   TRTMVS\n* PROCESSING A JOBNAME (IN ORDER TO STOP IT CORRECTLY)\n         SPACES JOBNAME           SET TO SPACES\n         LA   R2,JOBNAME\n         LA   R1,ZONE\n* LOOP TO GET THE NAME OF THE JOB OR THE STC TO BE STOPPED\nLOOPTR   CLI  0(R1),C' '          BLANK ?\n         BE   ENDOFZON            YES, END OF ZONE\n         MVC  0(1,R2),0(R1)       GET ONE CHARACTER OF JOBNAME\n         LA   R1,1(0,R1)          NEXT CHARACTER IN ZONE\n         LA   R2,1(0,R2)          NEXT CHARACTER IN OUTPUT ZONE\n         B    LOOPTR\nENDOFZON DS   0H\n         CLI  JOBNAME,C' '        BLANK PARAMETER\n         BE   LOOPIN\n* PROCESS ONE JOB\n         LA   R1,1(0,R1)\n         MVC  REPLZONE(60),0(R1)\n         CLC  =C'REPLY ',0(R1)    JOB CAN BE STOPPED VIA REPLY\n         BE   SENDREPL\n*-----------------------------------------------------------------*\n* THE JOB CAN BE STOPPED BY AN MVS COMMAND\n*-----------------------------------------------------------------*\n         SYSJOB  JOBNAME=JOBNAME\n         LTR  R15,R15\n         BNZ  NOJOB\n         ST   R0,ASID\n* IF  \"JOBNAME WAIT\" WAS CODED, AND JOB IS ACTIVE, LET'S WAIT\nLABEL31  CLC  =C'WAIT ',REPLZONE\n         BNE  LABEL11\n* IF  \"JOBNAME WAIT NN\" WAS CODED, LET'S WAIT 'NN' SECONDS\n         CLC  =C'WAIT  ',REPLZONE\n         BE   WAITPURE                'JOBNAME WAIT'\n         MVC  INT+4(2),REPLZONE+5     WAIT TIME\n         B    PREPWAIT\n* WAITING FOR EVER, UNTIL THE JOB STOPS\nWAITPURE BAL  R9,WAITJOBS\n         B    LOOPIN\n* ISSUE A COMMAND TO STOP THE JOB\nLABEL11  $MVSCMD REPLZONE\n         B    LOOPIN\n*-----------------------------------------------------------------*\n* THE JOB MUST BE STOPPED BY ISSUING A REPLY\n*-----------------------------------------------------------------*\nSENDREPL DS   0H\n         SPACES REPLZONE\n         MVC  REPLZONE(40),6(R1)\n         SYSJOB  JOBNAME=JOBNAME\n         LTR  R15,R15\n         BNZ  NOJOB\n         ST   R0,ASID\n* SET ADDRESSING MODE TO 31 BITS (SOME BLOCKS ARE ABOVE THE LINE)\n         L    R1,AMODE31A\n         BSM  0,R1             GET INTO 31-BITS ADDRESSING MODE\nAMODE31A DC   A(AMODE31B+X'80000000')\nRETC1    DC   F'0'\nAMODE31B DS   0H\n         $REPLY REPLYID=RR,ASID=ASID   WHAT REPLY IS PENDING FOR JOB?\n         ST   R15,RETC1\n* SET ADDRESSING MODE BACK TO 24 BITS\n         LA   R1,AMODE24\n         BSM  0,R1\nAMODE24  DS   0H\n         L    R15,RETC1\n         LTR  R15,R15\n         BNZ  NOREPLY\n* ISSUE THE REPLY COMMAND\n         SPACES  COMMAND                      BLANKING OUT COMMAND ZONE\n         MVC  COMMAND(2),=C'R '                      \"R\n         MVC  COMMAND+2(2),RR                           NN\n         MVI  COMMAND+4,C','                              ,\n         MVC  COMMAND+5(L'REPLZONE),REPLZONE               XXXXXXXX\"\n         $MVSCMD COMMAND\n         B    LOOPIN\n*---------------------------------------------------------------------*\n* STORE IN A TABLE THE NAMES OF THE ADDRESS-SPACES NEVER TO BE STOPPED\n*---------------------------------------------------------------------*\nNOSTOPT  DS   0H\n         CLI  0(R11),X'FF'\n         BE   ENDNOSTP\n         MVC  0(8,R11),ZONE+7           STORE JOBNAME\n         LA   R11,8(0,R11)              NEXT ENTRY IN TABLE\nENDNOSTP B    LOOPIN\n* JOB NOT FOUND (WARNING MESSAGE)\nNOJOB    MVC  WTO4+24(8),JOBNAME\nWTO4     WTO  '**ALLSTOP - JOB ???????? IS NOT ACTIVE'\n         B    LOOPIN\n* REPLY NOT FOUND (WARNING MESSAGE)\nNOREPLY  MVC  WTO5+24(8),JOBNAME\nWTO5     WTO  '**ALLSTOP - JOB ???????? HAS NO REPLY PENDING'\n         B    LOOPIN\n* ENTERING WAIT STATE\nWAITTIME DS   0H\n         MVC  INT+4(2),ZONE+5\nPREPWAIT MVC  WTO1+36(2),INT+4\nWTO1     WTO '**ALLSTOP -  WAITING DURING ?? SECONDS **',DESC=(11)\n         ST   R1,MSGIDWTO\n         STIMER WAIT,,DINTVL=INT        WAITING...\nNOSTIM1  L    R1,MSGIDWTO\n         LTR  R1,R1\n         BZ   LOOPIN\n         DOM  MSG=(1)                   SUPPRESS THE MESSAGE\n         B    LOOPIN\n*-----------------------------------------------------------------*\n* BEFORE STOPPING JES2, WE VERIFY THAT NO JOB IS STILL RUNNING    *\n*-----------------------------------------------------------------*\nTRTJES2  DS   0H\n         L    R15,16              CVT ADDRESS\n         USING CVT,R15\n         L    R6,CVTASVT          LOAD ASVT ADDRESS\n         DROP R15\n         USING ASVT,R6\n         L    R5,ASVTMAXU         R5=MAXUSER\n         LA   R6,ASVTENTY-4       R6=ADDRESS OF 1ST ASCB MIMUS 4\nLSVT1    DS   0H\n         LTR  R5,R5               MAXUSER = 0 ?\n         BZ   NTFN1               YES, AT END IN ASVT -> NOT FOUND\n         BCTR R5,0                MAXUSER - 1\n         LA   R6,4(R6)            NEXT ASVT ENTRY\n         USING ASCB,R7\n         L    R7,0(R6)            R7=ASCB ADDRESS\n         TM   0(R6),X'80'         AVAILABLE ASID ?\n         BO   LSVT1               ASID NOT AVAILABLE, SKIP IT\n         L    R1,ASCBJBNI         LOADING ADDRESS OF JOBNAME\n         LTR  R1,R1\n         BNZ  LJBN1\n         L    R1,ASCBJBNS         LOADING ADDRESS OF STCNAME\nLJBN1    DS   0H\n* VERIFY WHETHER THIS JOB MUST BE STOPPED\n         CLC  JES,0(R1)           JES IS NOT YET TO BE STOPPED...\n         BE   LSVT1\n         LA   R10,TABNOSTP\nLOOP1    CLI  0(R10),X'FF'\n         BE   NOTALL\n         CLC  0(8,R1),0(R10)      JOBNAME FOUND IN TABLE ?\n         BE   LSVT1               YES, SKIP IT\n         LA   R10,8(0,R10)\n         B    LOOP1\n* NOW WE ARE SURE ALL JOBS REQUIRED WERE STOPPED, JES2 MAY BE STOPPED\nNTFN1    DS   0H\n         $MVSCMD $PJES2           STOPPING JES2 ITSELF\n         B    LOOPIN\n         DROP R6,R7\n* ALL JOBS REQUIRED WERE NOT STOPPED, WE MUST WAIT FOR THEM\nNOTALL   DS   0H\n         MVC  WTO2+43(8),0(R1)\nWTO2     WTO  '**ALLSTOP WILL NOT STOP JES2 WHILE ???????? IS ACTIVE'\n         BAL  R9,WAITJOBS\n         B    TRTJES2             LET'S TRY AND STOP JES AGAIN\n*-----------------------------------------------------------------*\n* BEFORE ISSUING Z EOD, WE VERIFY THAT JES HAS BEEN STOPPED       *\n*-----------------------------------------------------------------*\nTRTMVS   DS   0H\n         SYSJOB  JOBNAME=JES\n         LTR  R15,R15\n         BNZ  ZEOD\n         WTO  '**ALLSTOP - Z EOD WILL NOT BE DONE WHILE JES IS ACTIVE'\nENDIN    CLOSE (SYSIN)\n         B    WTOR1\nZEOD     DS   0H\n         WTO  '**ALLSTOP PROCEDURE COMPLETED (Z EOD) **',DESC=(11)\n         $MVSCMD HALTEOD\n         CLOSE (SYSIN)\nTHEEND   L    R13,4(R13)\n         RETURN  (14,12),T,RC=0\n*-----------------------------------------------------------------*\n* WAITING TILL A JOB HAS STOPPED\n*-----------------------------------------------------------------*\nWAITJOBS DS   0H\n         MVC  WTO3+36(8),JOBNAME\nWTO3     WTO  '**ALLSTOP - WAITING FOR JOB ???????? TO STOP',DESC=(11)\n         ST   R1,MSGIDWTO\nLOOPWAI  STIMER WAIT,,DINTVL=INTWAIT\n         SYSJOB JOBNAME=JOBNAME\n         LTR  R15,R15\n         BZ   LOOPWAI        JOB STILL ACTIVE, WAITING AGAIN...\nNOSTIM2  L    R1,MSGIDWTO\n         LTR  R1,R1\n         BZ   ENDWAITJ\n         DOM  MSG=(1)        THE MESSAGE CAN BE ROLLED\nENDWAITJ BR R9\n*\nINTWAIT  DC   C'00000500'    WAIT INTERVAL (5 SECONDS)\nMSGIDWTO DC   F'0'           ID OF MESSAGE AFTER WTO\nSAVE     DS   18F            SAVE AREA\nJES      DC   CL8'JES2'\nHALTEOD  DC   CL80'Z EOD'\nREPLY    DS   X'00'\nRR       DS   CL2            REPLY NUMBER\nINT      DC   C'00000000'    WAIT INTERVAL (VARIABLE)\nECB      DS   F\nASID     DS   F\nSYSIN    DCB  DDNAME=SYSIN,EODAD=ENDIN,MACRF=GM,DSORG=PS\nREPLZONE DS   CL80\nZONE     DS   CL80\nTABNOSTP DC   30CL8' '      TB OF ADDRESS-SPACES THAT NEED NOT BE STOPD\n         DC   X'FF'         END INDICATOR\nJOBNAME  DC   CL8' '\n$PJES2   DC   CL80'$PJES2'\nCOMMAND  DC   CL80' '\nMGCRLEN  DC   H'0'          LENGTH\n         DC   H'0'          ROUTCODE\nMGCRCMD  DC   CL80' '       COMMAND\n         LTORG\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ALLSTOPG": {"ttr": 775, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00W\\x00\\x965o\\x01\\x15\\x02\\x1f\\x11\\x13\\x01U\\x01j\\x00\\x01\\xc7\\xc9\\xd3\\xc2\\xc5\\xd9\\xe3@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1996-12-21T00:00:00", "modifydate": "2015-01-21T11:13:57", "lines": 341, "newlines": 362, "modlines": 1, "user": "GILBERT"}, "text": "//GILBERTQ JOB (ACCT#),ALLSTOP,\n// NOTIFY=&SYSUID,REGION=5M,\n// CLASS=A,MSGCLASS=X,COND=(0,NE)\n//ASMH EXEC PGM=ASMA90,PARM=(NODECK,OBJECT,NOESD,NORLD,NOXREF)\n*--- This program can stop all jobs and stcs currently active  ---*\n*    according to parameters you indicate (ddname SYSIN)          *\n*    ===> IT MUST BE LINK-EDITED WITH AC=1                        *\n*--- \"SPACES\" MACRO SETS A ZONE TO ALL SPACES                  ---*\n         MACRO\n&NLA     SPACES  &ZONE\n         MVI   &ZONE,C' '                  FIRST BYTE SET TO SPACE\n         MVC   &ZONE+1(L'&ZONE-1),&ZONE    PROPAGATE TO ALL BYTES\n         MEND\n* \"SYSJOB\" MACRO VERIFIES WHETHER A JOB IS ACTIVE                 *\n         MACRO\n&NLA     SYSJOB  &JOBNAME=\n&NLA     DS    0H\n.* IF JOB IS ACTIVE, WE OBTAIN ITS ASCB ADDRESS IN REG 1, AND ITS\n.* ASID NUMBER IN REG 0 (RIGHT HALFWORD)\n          STM   R5,R8,SVRG&SYSNDX   SAVE REGISTERS 5 THROUGH 8\n          L     R15,16              CVT ADDRESS\n          PUSH  USING\n          USING CVT,R15\n          L     R6,CVTASVT          LOAD ASVT ADDRESS\n          DROP  R15\n          USING ASVT,R6\n          L     R5,ASVTMAXU\n          LA    R6,ASVTENTY-4       R6=ADDRESS OF 1ST ASCB MINUS 4\nLSVT&SYSNDX DS  0H\n          LTR   R5,R5               MAXUSER = 0 ?\n          BZ    NTFN&SYSNDX         YES, ASVT LOOKUP ENDED ->NOT FOUND\n          BCTR  R5,0                MAXUSER - 1\n          LA    R6,4(R6)            NEXT ASVT ENTRY\n          USING ASCB,R7\n          L     R7,0(R6)            R7=ASCB ADDRESS\n          TM    0(R6),X'80'         AVAILABLE ASID ?\n          BO    LSVT&SYSNDX         ASID NOT AVAILABLE, LET'S SEE NEXT\n          CLC   =C'ASCB',ASCBASCB   VERIFYING ACRONYM\n          BNE   LSVT&SYSNDX\n          L     R1,ASCBJBNI         LOAD ADDRESS OF JOBNAME\n          LTR   R1,R1\n          BNZ   LJBN&SYSNDX\n          L     R1,ASCBJBNS         LOAD ADDRESS OF STC\nLJBN&SYSNDX CLC 0(8,R1),&JOBNAME    IS IT THAT JOB ?\n          BNE   LSVT&SYSNDX\n.* JOB WAS FOUND\n          LH    R0,ASCBASID         LOAD ASID NUMBER\n          LR    R1,7                PUT ASCB ADDRESS IN REG 1\n          XR    R15,R15             RETURN CODE = 0\n          B     XSVT&SYSNDX\nNTFN&SYSNDX DS  0H\n          LA    R15,12              RETURN CODE = 12, JOB DOESN'T EXIST\n          B     XSVT&SYSNDX\n.* JOB WAS NOT FOUND\nSVRG&SYSNDX DS 4F                   4 WORDS TO SAVE REGISTERS 5,6,7,8\nXSVT&SYSNDX DS 0H\n          LM    R5,R8,SVRG&SYSNDX\n          DROP  R6,R7\n          POP   USING\n          MEND\n* \"$MVSCMD\" MACRO ISSUES AN MVS COMMAND                           *\n         MACRO\n.*\n&NLA     $MVSCMD  &CMD\n&NLA     DS   0H\n         LA   1,L'&CMD\n         MVC  MGCRCMD(L'&CMD),&CMD\n         STH  R1,MGCRLEN\n         MODESET EXTKEY=ZERO\n         XR   R0,R0\n         LA   R1,MGCRLEN\n         SVC  34                  MGCR MACRO TO ADD COMMAND IN QUEUE\n         MODESET KEY=NZERO\n         MEXIT\n         MEND\nALLSTOP  CSECT\nALLSTOP  AMODE 31                 ORE\n* HOUSEKEEPING\n         STM  R14,R12,12(R13)     SAVE REGISTERS\n         LR   R12,R15\n         USING ALLSTOP,R12        R12 IS BASE REGISTER\n         ST   R13,SAVE+4\n         LA   R13,SAVE\n* IF PARAMETER \"BYPASS\" WAS CODED, THEN NO WTOR WILL BE ISSUED\n         L    R5,0(R1)\n         MODESET MODE=SUP\n         CLC  0(2,R5),=H'6'       ONLY \"BYPASS\" IS SUPPORTED\n         BNE  NOPARM\n         CLC  =C'BYPASS',2(R5)\n         BNE  NOPARM\n         B    CONFIRM             \"BYPASS\" WAS CODED, NO WTOR\nNOPARM   DS   0H\n* REPLY TO CONFIRM\nWTOR1    XC   ECB,ECB\n         LA   R6,REPLY\n         LA   R8,1                LENGTH OF REPLY ZONE = 1 CHARACTER\n         WTOR '** STOPPING ALL PRODUCTS BEFORE IPLING, ENTER C TO CONFIX\n               RM, T TO TERMINATE',(6),(8),ECB\n         WAIT ECB=ECB\n* ANALYZING THE REPLY\n         CLI  REPLY,C'C'          R XX,C : STOPPING MUST BE DONE\n         BE   CONFIRM\n         CLI  REPLY,C'T'          R XX,T : EXIT\n         BE   THEEND\n         WTO  '** INVALID REPLY, PLEASE REENTER **'\n         B    WTOR1\nCONFIRM  DS   0H\n         LA   R11,TABNOSTP        TABLE OF JOBS/TASKS NOT TO BE STOPPED\n* VERIFY IF //SYSIN WAS ALREADY OPENED\n         LA   R1,SYSIN\n         USING IHADCB,R1\n         TM   DCBOFLGS,DCBOFOPN   SYSIN ALREADY OPEN ?\n         BO   ALREOPEN\n         DROP R1\n         OPEN (SYSIN,(INPUT))     OPEN //SYSIN FILE\nALREOPEN DS   0H\nLOOPIN   GET  SYSIN,ZONE\n* ANALYSE PARAMETERS\n         SPACES  REPLZONE\n         CLI  ZONE,C'*'           LINE OF COMMENTS ?\n         BE   LOOPIN\n         CLC  =C'NOSTOP ',ZONE    \"DON'T STOP\" JOB ?\n         BE   NOSTOPT\n         CLC  =C'WAIT ',ZONE      MUST WE WAIT A WHILE ?\n         BE   WAITTIME\n         CLC  ZONE(6),$PJES2      MUST WE ALREADY STOP JES2 ?\n         BE   TRTJES2\n         CLC  =C'MVS ',ZONE       MUST WE ISSUE \"Z EOD\" ?\n         BE   TRTMVS\n* PROCESSING A JOBNAME (IN ORDER TO STOP IT CORRECTLY)\n         SPACES JOBNAME           SET TO SPACES\n         LA   R2,JOBNAME\n         LA   R1,ZONE\n* LOOP TO GET THE NAME OF THE JOB OR THE STC TO BE STOPPED\nLOOPTR   CLI  0(R1),C' '          BLANK ?\n         BE   ENDOFZON            YES, END OF ZONE\n         MVC  0(1,R2),0(R1)       GET ONE CHARACTER OF JOBNAME\n         LA   R1,1(0,R1)          NEXT CHARACTER IN ZONE\n         LA   R2,1(0,R2)          NEXT CHARACTER IN OUTPUT ZONE\n         B    LOOPTR\nENDOFZON DS   0H\n         CLI  JOBNAME,C' '        BLANK PARAMETER\n         BE   LOOPIN\n* PROCESS ONE JOB\n         LA   R1,1(0,R1)\n         MVC  REPLZONE(60),0(R1)\n         CLC  =C'REPLY ',0(R1)    JOB CAN BE STOPPED VIA REPLY\n         BE   SENDREPL\n* THE JOB CAN BE STOPPED BY AN MVS COMMAND\n         SYSJOB  JOBNAME=JOBNAME\n         LTR  R15,R15\n         BNZ  NOJOB\n         ST   R0,ASID\n* IF  \"JOBNAME WAIT\" WAS CODED, AND JOB IS ACTIVE, LET'S WAIT\nLABEL31  CLC  =C'WAIT ',REPLZONE\n         BNE  LABEL11\n* IF  \"JOBNAME WAIT NN\" WAS CODED, LET'S WAIT 'NN' SECONDS\n         CLC  =C'WAIT  ',REPLZONE\n         BE   WAITPURE                'JOBNAME WAIT'\n         MVC  INT+4(2),REPLZONE+5     WAIT TIME\n         B    PREPWAIT\n* WAITING FOR EVER, UNTIL THE JOB STOPS\nWAITPURE BAL  R9,WAITJOBS\n         B    LOOPIN\n* ISSUE A COMMAND TO STOP THE JOB\nLABEL11  $MVSCMD REPLZONE\n         B    LOOPIN\n* THE JOB MUST BE STOPPED BY ISSUING A REPLY\nSENDREPL DS   0H\n         SPACES REPLZONE\n         MVC  REPLZONE(40),6(R1)\n         SYSJOB  JOBNAME=JOBNAME\n         LTR  R15,R15\n         BNZ  NOJOB\n         ST   R0,ASID\n*        find number of outstanding reply\n         L    R1,16               LOAD ADDRESS OF CVT\n         L    R1,CVTCUCB-CVT(,R1) LOAD ADDRESS OF UCM BASE\n         L    R2,UCMRPYQ-UCM(,R1) LOAD ADDRESS OF 1ST ORE\n         USING OREF,R2\n         LTR  R2,R2               ADDRESS OF  ORE = 0 ?\n         BZ   NOREPLY\n         MODESET EXTKEY=ZERO\nLOOP3    CLC  OREASID,ASID+2      OUR ASID ?\n         BE   FOUNDORE            YES, QUIT THE LOOP\n         L    R2,ORELKP           TAKE ADDRESS OF NEXT ORE\n         LTR  R2,R2               ADDRESS OF NEXT ORE = 0 ?\n         BNZ  LOOP3               NO, LOOP\n         MODESET KEY=NZERO\n         B    NOREPLY             YES, AT END IN CHAIN OF ORES\nFOUNDORE MVC  RR,OREID            KEEP REPLY NUMBER\n         MODESET KEY=NZERO\n         DROP R2                  ORE\n* ISSUE THE REPLY COMMAND\n         SPACES  COMMAND                      BLANKING OUT COMMAND ZONE\n         MVC  COMMAND(2),=C'R '                      \"R\n         MVC  COMMAND+2(2),RR                           NN\n         MVI  COMMAND+4,C','                              ,\n         MVC  COMMAND+5(L'REPLZONE),REPLZONE               XXXXXXXX\"\n         $MVSCMD COMMAND\n         B    LOOPIN\n* STORE IN A TABLE THE NAMES OF THE ADDRESS SPACES NEVER TO BE STOPPED\nNOSTOPT  DS   0H\n         CLI  0(R11),X'FF'\n         BE   ENDNOSTP\n         MVC  0(8,R11),ZONE+7           STORE JOBNAME\n         LA   R11,8(0,R11)              NEXT ENTRY IN TABLE\nENDNOSTP B    LOOPIN\n* JOB NOT FOUND (WARNING MESSAGE)\nNOJOB    MVC  WTO4+24(8),JOBNAME\nWTO4     WTO  '**ALLSTOP - JOB ???????? IS NOT ACTIVE'\n         B    LOOPIN\n* REPLY NOT FOUND (WARNING MESSAGE)\nNOREPLY  MVC  WTO5+24(8),JOBNAME\nWTO5     WTO  '**ALLSTOP - JOB ???????? HAS NO REPLY PENDING'\n         B    LOOPIN\n* ENTERING WAIT STATE\nWAITTIME DS   0H\n         MVC  INT+4(2),ZONE+5\nPREPWAIT MVC  WTO1+36(2),INT+4\nWTO1     WTO '**ALLSTOP -  WAITING DURING ?? SECONDS **',DESC=(11)\n         ST   R1,MSGIDWTO\n         STIMER WAIT,,DINTVL=INT        WAITING...\nNOSTIM1  L    R1,MSGIDWTO\n         LTR  R1,R1\n         BZ   LOOPIN\n         DOM  MSG=(1)                   SUPPRESS THE MESSAGE\n         B    LOOPIN\n* BEFORE STOPPING JES2, WE VERIFY THAT NO JOB IS STILL RUNNING    *\nTRTJES2  DS   0H\n         L    R15,16              CVT ADDRESS\n         USING CVT,R15\n         L    R6,CVTASVT          LOAD ASVT ADDRESS\n         DROP R15\n         USING ASVT,R6\n         L    R5,ASVTMAXU         R5=MAXUSER\n         LA   R6,ASVTENTY-4       R6=ADDRESS OF 1ST ASCB MINUS 4\nLSVT1    DS   0H\n         LTR  R5,R5               MAXUSER = 0 ?\n         BZ   NTFN1               YES, AT END IN ASVT -> NOT FOUND\n         BCTR R5,0                MAXUSER - 1\n         LA   R6,4(R6)            NEXT ASVT ENTRY\n         USING ASCB,R7\n         L    R7,0(R6)            R7=ASCB ADDRESS\n         TM   0(R6),X'80'         AVAILABLE ASID ?\n         BO   LSVT1               ASID NOT AVAILABLE, SKIP IT\n         L    R1,ASCBJBNI         LOADING ADDRESS OF JOBNAME\n         LTR  R1,R1\n         BNZ  LJBN1\n         L    R1,ASCBJBNS         LOADING ADDRESS OF STCNAME\nLJBN1    DS   0H\n* VERIFY WHETHER THIS JOB MUST BE STOPPED\n         CLC  JES,0(R1)           JES IS NOT YET TO BE STOPPED...\n         BE   LSVT1\n         LA   R10,TABNOSTP\nLOOP1    CLI  0(R10),X'FF'\n         BE   NOTALL\n         CLC  0(8,R1),0(R10)      JOBNAME FOUND IN TABLE ?\n         BE   LSVT1               YES, SKIP IT\n         LA   R10,8(0,R10)\n         B    LOOP1\n* NOW WE ARE SURE ALL JOBS REQUIRED WERE STOPPED, JES2 MAY BE STOPPED\nNTFN1    DS   0H\n         $MVSCMD $PJES2           STOPPING JES2 ITSELF\n         B    LOOPIN\n         DROP R6,R7\n* ALL JOBS REQUIRED WERE NOT STOPPED, WE MUST WAIT FOR THEM\nNOTALL   DS   0H\n         MVC  WTO2+43(8),0(R1)\nWTO2     WTO  '**ALLSTOP WILL NOT STOP JES2 WHILE ???????? IS ACTIVE'\n         BAL  R9,WAITJOBS\n         B    TRTJES2             LET'S TRY AND STOP JES AGAIN\n* BEFORE ISSUING Z EOD, WE VERIFY THAT JES HAS BEEN STOPPED       *\nTRTMVS   DS   0H\n         SYSJOB  JOBNAME=JES\n         LTR  R15,R15\n         BNZ  ZEOD\n         WTO  '**ALLSTOP - Z EOD WILL NOT BE DONE WHILE JES IS ACTIVE'\nENDIN    CLOSE (SYSIN)\n         B    WTOR1\nZEOD     DS   0H\n         WTO  '**ALLSTOP PROCEDURE COMPLETED (Z EOD) **',DESC=(11)\n         $MVSCMD HALTEOD\n         CLOSE (SYSIN)\nTHEEND   L    R13,4(R13)\n         RETURN  (14,12),T,RC=0\n* WAITING TILL A JOB HAS STOPPED\nWAITJOBS DS   0H\n         MVC  WTO3+36(8),JOBNAME\nWTO3     WTO  '**ALLSTOP - WAITING FOR JOB ???????? TO STOP',DESC=(11)\n         ST   R1,MSGIDWTO\nLOOPWAI  STIMER WAIT,,DINTVL=INTWAIT\n         SYSJOB JOBNAME=JOBNAME\n         LTR  R15,R15\n         BZ   LOOPWAI        JOB STILL ACTIVE, WAITING AGAIN...\nNOSTIM2  L    R1,MSGIDWTO\n         LTR  R1,R1\n         BZ   ENDWAITJ\n         DOM  MSG=(1)        THE MESSAGE CAN BE ROLLED\nENDWAITJ BR R9\nINTWAIT  DC   C'00000500'    WAIT INTERVAL (5 SECONDS)\nMSGIDWTO DC   F'0'           ID OF MESSAGE AFTER WTO\nSAVE     DS   18F            SAVE AREA\nJES      DC   CL8'JES2'\nHALTEOD  DC   CL80'Z EOD'\nREPLY    DS   X'00'\nRR       DS   CL2            REPLY NUMBER\nINT      DC   C'00000000'    WAIT INTERVAL (VARIABLE)\nECB      DS   F\nASID     DS   F\nSYSIN    DCB  DDNAME=SYSIN,EODAD=ENDIN,MACRF=GM,DSORG=PS\nREPLZONE DS   CL80\nZONE     DS   CL80\nTABNOSTP DC   30CL8' '      TB OF ADDRESS SPACES THAT NEED NOT BE STOPD\n         DC   X'FF'         END INDICATOR\nJOBNAME  DC   CL8' '\n$PJES2   DC   CL80'$PJES2'\nCOMMAND  DC   CL80' '\nMGCRLEN  DC   H'0'          LENGTH\n         DC   H'0'          ROUTCODE\nMGCRCMD  DC   CL80' '       COMMAND\n* DSECTS NEEDED                                                   *\n         CVT  DSECT=YES                ,    CVT\n         IHAASCB                       ,    ASCB\n         IHAASVT                       ,    ASVT\n         IHAORE                        ,    OPERATOR REPLY ELEMENT\n         IEECUCM                       ,    UCM\n         DCBD    DSORG=PS,DEVD=DA           DCB\n         YREGS\n         END\n//SYSLIB   DD DISP=SHR,DSN=GILBERT.TRIMMAC\n//         DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200\n//*\n//LINKLLA EXEC PGM=LINKLLA,PARM='AC=1'\n//SYSLIN   DD DSN=*.ASMH.SYSLIN,DISP=(OLD,PASS)\n//SYSLMOD  DD DISP=SHR,DSN=SYS1.P390.LINKLIB(ALLSTOP)\n//SYSPRINT DD SYSOUT=*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ALLSTOPJ": {"ttr": 1027, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x03\\x00\\x965o\\x01\\x15\\x02\\x1f\\x11\\x14\\x00S\\x00\\x04\\x00\\x00\\xc7\\xc9\\xd3\\xc2\\xc5\\xd9\\xe3@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "1996-12-21T00:00:00", "modifydate": "2015-01-21T11:14:03", "lines": 83, "newlines": 4, "modlines": 0, "user": "GILBERT"}, "text": "//GILBERTQ JOB (ACCT#),ALLSTOP,\n// NOTIFY=&SYSUID,REGION=5M,\n// CLASS=A,MSGCLASS=X,COND=(0,NE)\n//ALLSTOP EXEC PGM=ALLSTOP\n* SYS1.PARMLIB(STOPMVS) : TO STOP ALL JOBS/STCS THAT ARE RUNNING NOW\n* EXAMPLE IS GIVEN WITH JES2, MVS/ESA 3.1.3 (+ IDMS, + CICS, ETC.)\n* WARNING : ALL PARAMETERS ON A LINE MUST BE SEPARATED BY 1 BLANK\n*           (AND ONLY ONE)\n*=======================================================================\n* LIST OF STATEMENTS (THEY MUST BEGIN AT COLUMN 1) :                   =\n* *                  -> COMMENT LINE (IGNORED)                         =\n* NOSTOP XXXX        -> NO NEED TO STOP 'XXXX' BEFORE STOPPING JES2    =\n* JJJJJ REPLY ZZZZ   -> ISSUE 'REPLY NN,ZZZZ' TO STOP JOB JJJJJ        =\n* JJJJJ YYYY         -> ISSUE THE MVS COMMAND 'YYYY' TO STOP JOB JJJJJ =\n*                    -> (IF JJJJJ NOT FOUND, THE COMMAND IS NOT ISSUED)=\n* JJJJJ WAIT         -> IF JOB JJJJJ IS STILL ACTIVE, WAIT FOR IT TO   =\n*                    -> STOP (IF IT IS NOT ACTIVE, STATEMENT IGNORED)  =\n* JJJJJ WAIT NN      -> IF JOB JJJJJ IS STILL ACTIVE, WAIT NN SECONDS  =\n*                    -> (IF IT IS NOT ACTIVE, THE STATEMENT IS IGNORED)=\n* WAIT NN            -> WAIT NN SECONDS BEFORE GOING ON                =\n* $PJES2             -> ISSUE $P JES2 (PROVIDED THERE IS NO ACTIVE JOB =\n*                    ->   EXCEPT JOBS KEPT IN THE 'NOSTOP' LIST)       =\n* MVS                -> ISSUE Z EOD (PROVIDED JES2 HAS BEEN STOPPED)   =\n*=======================================================================\n* LIST OF TASKS THAT WON'T STOP, AND NEED NOT (SYSTEM ADDRESS SPACES)\nNOSTOP *MASTER*\nNOSTOP ALLOCAS\nNOSTOP ANTMAIN\nNOSTOP CATALOG\nNOSTOP CONSOLE\nNOSTOP DUMPSRV\nNOSTOP GRS\nNOSTOP IOSAS\nNOSTOP JESXCF\nNOSTOP JES2\nNOSTOP PCAUTH\nNOSTOP RACF\nNOSTOP RASP\nNOSTOP SMF\nNOSTOP SMS\nNOSTOP SMXC\nNOSTOP SYSBMAS\nNOSTOP TNF\nNOSTOP TRACE\nNOSTOP VLF\nNOSTOP VMCF\nNOSTOP WLM\nNOSTOP XCFAS\nNOSTOP IBMUSERQ                                   <== OWN JOB\nNOSTOP VTAM                                       <== OWN JOB\n* STOP ALL INITS, IF THERE IS ONE STILL ACTIVE\nINIT $PI\n* WARN TSO USERS\nTCAS SE '** ATTENTION, MVS IS STOPPING ... **'\nTCAS F TCAS,USERMAX=0\n*  STOP THE REMAINING PRODUCTS\nPCOMMAND C PCOMMAND\nDFHSM F DFHSM,STOP\nRMF P RMF\nDLF P DLF\nLLA P LLA\nVLF P VLF\n*  STOP TSO\nTCAS SE '** TSO WILL BE OFF IN 10 SECONDS EXACTLY **'\nTCAS WAIT 10\nTCAS SE '** ATTENTION, IMMEDIATE SHUTDOWN OF TSO **'\nTCAS P TCAS\nTCAS WAIT 03\nTCAS REPLY FSTOP\nTCAS WAIT 03\nTCAS REPLY U\nTCAS WAIT 02\nTCAS WAIT        <-- WAIT TILL TSO STOPS\nCONSOLE P GTF\nOMS P OMS\n* NOW WE CAN STOP THE NETWORK\nVTAM Z NET,QUICK\nVTAM WAIT          <-- WAIT FOR VTAM TO STOP\n*  STOPPING JES2\n$PJES2                    <=== STOPPING JES2 IF NO JOB STILL ACTIVE\n*JES2 WAIT\n*  THE END\nMVS                       <=== Z EOD IF JES2 HAS BEEN STOPPED\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ALLSTOP6": {"ttr": 1030, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x08\\x00\\x965o\\x01\\x15\\x02\\x1f\\x11\\x14\\x02X\\x02X\\x00\\x00\\xc7\\xc9\\xd3\\xc2\\xc5\\xd9\\xe3@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1996-12-21T00:00:00", "modifydate": "2015-01-21T11:14:08", "lines": 600, "newlines": 600, "modlines": 0, "user": "GILBERT"}, "text": "An automated tool to stop address spaces\n\nI wrote the following program for those who still do not have\nautomated operations software at their disposal to trigger\nautomatically actions requiring a considerable number of MVS\nor JES commands to be issued. It was originally dedicated to\nstopping all active tasks before IPLing, relieving our operators\nfrom the chore of searching for outstanding reply numbers,\nentering scores of commands in the correct order, etc.\n\nThis program can also be used to stop and restart critical\naddress spaces like VTAM or JES 'on the fly' without even\nhaving to go to the console room. The program reads\nparameters from the SYSIN file and verifies whether the\naddress space (first parameter) is active - should this be the\ncase a JES or MVS command (second parameter), which can\nbe a reply, is issued in order to stop the job or the started task.\nThe keyword 'WAIT' makes ALLSTOP wait for a while,\n'PJES2' instructs it to stop JES2 (if there are no active jobs),\nand the 'MVS' keyword issues the 'Z EOD' command\nprovided that JES has stopped.\n\nThe operators can monitor events as they happen, for the\nprogram sends them high-intensity messages which are rolled\nup as the stopping proceeds.\n\n\nJCL procedure to implement ALLSTOP\n\n//*  Command to stop all products :\n//*  -  S ALLSTOP,SUB=MSTR,M=STOPMVS\n//*  Command to stop and restart JES :\n//*  -  S ALLSTOP,SUB=MSTR,M=STOPJES,P=BYPASS  (NO WTOR TO CONFIRM)\n//ALLSTOP PROC M=ALLSTOP,P=\n//ALLSTOP EXEC PGM=ALLSTOP,TIME=1440,PARM=&P\n//SYSIN   DD DISP=SHR,DSN=SYS1.PARMLIB(&M)\n\n\nSTOPJES EXAMPLE\n\n* 1) SYS1.PARMLIB(STOPJES) : TO STOP AND RESTART JES2\n* JES2 is stopped \"on the fly\" and hot-started, so is other software\n* that is closely linked to JES2\n* - S ALLSTOP,M=STOPJES\nCADSDISP REPLY 99STOPCADS\nJES328X P JES328X\nSPOOLMAN P SPOOLMAN\n* Cancel all presently running AFP prints ...\nFSS0 C FSS0\nFSS1 C FSS1\n   etc\nFSS9 C FSS9\n* Wait till everyone stops\nCADSDISP WAIT\nJES328X WAIT\nSPOOLMAN WAIT\n* Immediate shutdown of JES2\nALLSTOP $PJES2,ABEND\nALLSTOP WAIT 05\nJES2 REPLY EXIT\n* Wait for JES2 to stop\nJES2 WAIT\n* Of course program \"ALLSTOP\" can be used to start tasks,\n* not only to stop them ...\n* Restart JES2\nALLSTOP S JES2,PARM='WARM,NOREQ'\n* Restart the other software\nALLSTOP S CADSDISP\nALLSTOP S JES328X\nALLSTOP S SPOOLMAN\nALLSTOP C ALLSTOP                 SUICIDE SINCE OUR JOB IS DONE\n\n\nSTOPMVS EXAMPLE\n\n* 2) SYS1.PARMLIB(STOPMVS) : TO STOP ALL JOBS/STCS THAT ARE RUNNING NOW\n* EXAMPLE IS GIVEN WITH JES2, MVS/ESA 3.1.3 (+ IDMS, + CICS, ETC.)\n* warning : all parameters on a line must be separated by 1 blank\n*           (and only one)\n*=======================================================================\n* LIST OF STATEMENTS (THEY MUST BEGIN AT COLUMN 1) :                   =\n* *                  -> comment line (ignored)                         =\n* NOSTOP xxxx        -> no need to stop 'xxxx' before stopping JES2    =\n* jjjjj REPLY zzzz   -> issue 'REPLY nn,zzzz' to stop job jjjjj        =\n* jjjjj yyyy         -> issue the MVS command 'yyyy' to stop job jjjjj =\n*                    -> (if jjjjj not found, the command is not issued)=\n* jjjjj WAIT         -> if job jjjjj is still active, wait for it to   =\n*                    -> stop (if it is not active, statement ignored)  =\n* jjjjj WAIT nn      -> if job jjjjj is still active, wait nn seconds  =\n*                    -> (if it is not active, the statement is ignored)=\n* WAIT nn            -> wait nn seconds before going on                =\n* $PJES2             -> issue $p JES2 (provided there is no active job =\n*                    ->   except jobs kept in the 'NOSTOP' list)       =\n* MVS                -> issue Z EOD (provided JES2 has been stopped)   =\n*=======================================================================\n* List of tasks that won't stop, and need not (system address spaces)\nNOSTOP *MASTER*\nNOSTOP CATALOG\nNOSTOP PCAUTH\nNOSTOP TRACE\nNOSTOP GRS\nNOSTOP DUMPSRV\nNOSTOP CONSOLE\nNOSTOP ALLOCAS\nNOSTOP SMF\nNOSTOP LLA\nNOSTOP VLF\nNOSTOP DLF\nNOSTOP SMS\nNOSTOP ALLSTOP\nNOSTOP JESL\nNOSTOP INIT\nNOSTOP RASP\nNOSTOP IOSAS\nNOSTOP SMXC\nNOSTOP SYSBMAS\n* stop all inits, if there is one still active\nINIT $PI\n* warn TSO users\nTSO SE '** ATTENTION, MVS IS STOPPING ... **'\nTSO F TSO,USERMAX=0\n* route all messages to the MVS master console\nCONSOLE V 005,CONSOLE,ROUT=ALL\nCONSOLE K S,DEL=RD,L=01\nCONSOLE K S,DEL=RD,L=02\n* deactivation of 3990-3 cache controller\nCONSOLE S SETCACHE,M=INACT320\n* draining DLF (hiperbatch)\nDLF F DLF,MODE=D\n*  STOP ALL IDMS\nIDMS06 REPLY SHUTDOWN\nIDMS30 REPLY SHUTDOWN\nIDMS50 REPLY SHUTDOWN\nIDMS80 REPLY SHUTDOWN\nIDMS1 REPLY SHUTDOWN\n*  STOP ALL CICS\nCICS1 F CICS1,CEMT P SHUT\nCICB F CICB,CEMT P SHUT\nCICM F CICM,CEMT P SHUT\nCICX F CICX,CEMT P SHUT\nCICSTES F CICSTES,CEMT P SHUT\nCICSTST2 F CICSTST2,CEMT P SHUT\nCICSMVS F CICSMVS,CEMT P SHUT\nCICSPRD1 F CICSPRD1,CEMT P SHUT\n*  STOP THE REMAINING PRODUCTS\nJES2 $PLINE(1-*)\nTMONLINE P TMONLINE\nPDSMAN P PDSMAN\nTELEX REPLY P LINE ALL\nCADSDISP REPLY 99STOPCADS\nCADSTEST REPLY 99STOPCADS\nVCSS1 P VCSS1\nVCSS2 P VCSS2\nTEMPUS P TEMPUS\nNPMV1R4 P NPMV1R4\nEPILOGC P EPILOGC\nCSFIA P CSFIA\nGTMOSIB P GTMOSIB\nGTMOSIC P GTMOSIC\nCSFIF P CSFIF\nRESOLVE P R\nSDSI P SDSI\nMIM P MIM\nDFHSM F DFHSM,STOP\nDFHSMTST F DFHSMTST,STOP\nCMF P CMF\nOMS P OMS\nDLF P DLF\nJ328X P J328X\nJ328XTST P J328XTST\nCLCONF P CLCONF\nCICSM P CICSM\nOPCW P OPCW\nOPCA P OPCA\nFS00 P FS00\nFS01 P FS01\nFS02 P FS02\nFS03 P FS03\nFS04 P FS04\nFS05 P FS05\nFS06 P FS06\nFS07 P FS07\nFS08 P FS08\nASCCT C ASCCT\n* may we insist ...? (shutting down test CICS immediately)\nCICSTES F CICSTES,CEMT P SHUT IMM\nCICSTST2 F CICSTST2,CEMT P SHUT IMM\n*  STOP THE SESSION MANAGER\nCLVTAM SE '** CLVTAM WILL STOP WITHIN 10 SECONDS **'\nCLVTAM WAIT 10\nCLVTAM P CLVTAM\nTELEX WAIT 02\nTELEX REPLY P PGM\n* RETRY STOPPING IT, IN CASE IT IS RELUCTANT...\nCLVTAM WAIT 5\nCLVTAM P CLVTAM\n*  STOP TSO\nTSO SE '** TSO WILL BE OFF IN 10 SECONDS EXACTLY **'\nTSO WAIT 10\nTSO SE '** ATTENTION, IMMEDIATE SHUTDOWN OF TSO **'\nTSO P TSO\nTSO WAIT 03\nTSO REPLY FSTOP\nTSO WAIT 03\nTSO REPLY U\nTSO WAIT 02\nTSO WAIT         <-- WAIT TILL TSO STOPS\nANONETV REPLY CLOSE IMMED\nACONETV REPLY CLOSE IMMED\nFSS0 C FSS0\nFSS1 C FSS1\n   etc\nFSS20 C FSS20\nCICS1 WAIT       <--- WAIT FOR THIS CICS TO STOP\nCICB WAIT        <--- WAIT FOR THIS CICS TO STOP\nCICM WAIT        <--- WAIT FOR THIS CICS TO STOP\nCICX WAIT        <--- WAIT FOR THIS CICS TO STOP\nCICSTES WAIT     <--- WAIT FOR THIS CICS TO STOP\nCICSMVS WAIT     <--- WAIT FOR THIS CICS TO STOP\nCICSTST2 WAIT    <--- WAIT FOR THIS CICS TO STOP\nCICSPRD1 WAIT    <--- WAIT FOR THIS CICS TO STOP\nANONVSSI C ANONVSSI\nACONVSSI C ACONVSSI\nCONSOLE P GTF\nMIM REPLY LOCAL\nOMS P OMS\n* NOW WE CAN STOP THE NETWORK\nNET Z NET,CANCEL\nNET WAIT          <-- WAIT FOR VTAM TO STOP\n*  STOPPING JES2\n$PJES2                    <=== STOPPING JES2 IF NO JOB STILL ACTIVE\nJES2 WAIT\n*  THE END\nMVS                       <=== Z EOD IF JES2 HAS BEEN STOPPED\n\n\nPROGRAM ALLSTOP\n\n*--- This program can stop all jobs and stcs currently active  ---*\n*    according to parameters you indicate (ddname SYSIN)          *\n*    ===> IT MUST BE LINK-EDITED WITH AC=1                        *\n*--- \"SPACES\" MACRO SETS A ZONE TO ALL SPACES                  ---*\n         MACRO\n&NLA     SPACES  &ZONE\n         MVI   &ZONE,C' '                  FIRST BYTE SET TO SPACE\n         MVC   &ZONE+1(L'&ZONE-1),&ZONE    PROPAGATE TO ALL BYTES\n         MEND\n* \"SYSJOB\" MACRO VERIFIES WHETHER A JOB IS ACTIVE                 *\n         MACRO\n&NLA     SYSJOB  &JOBNAME=\n&NLA     DS    0H\n.* IF JOB IS ACTIVE, WE OBTAIN ITS ASCB ADDRESS IN REG 1, AND ITS\n.* ASID NUMBER IN REG 0 (RIGHT HALFWORD)\n          STM   R5,R8,SVRG&SYSNDX   SAVE REGISTERS 5 THROUGH 8\n          L     R15,16              CVT ADDRESS\n          PUSH  USING\n          USING CVT,R15\n          L     R6,CVTASVT          LOAD ASVT ADDRESS\n          DROP  R15\n          USING ASVT,R6\n          L     R5,ASVTMAXU\n          LA    R6,ASVTENTY-4       R6=ADDRESS OF 1ST ASCB MINUS 4\nLSVT&SYSNDX DS  0H\n          LTR   R5,R5               MAXUSER = 0 ?\n          BZ    NTFN&SYSNDX         YES, ASVT LOOKUP ENDED ->NOT FOUND\n          BCTR  R5,0                MAXUSER - 1\n          LA    R6,4(R6)            NEXT ASVT ENTRY\n          USING ASCB,R7\n          L     R7,0(R6)            R7=ASCB ADDRESS\n          TM    0(R6),X'80'         AVAILABLE ASID ?\n          BO    LSVT&SYSNDX         ASID NOT AVAILABLE, LET'S SEE NEXT\n          CLC   =C'ASCB',ASCBASCB   VERIFYING ACRONYM\n          BNE   LSVT&SYSNDX\n          L     R1,ASCBJBNI         LOAD ADDRESS OF JOBNAME\n          LTR   R1,R1\n          BNZ   LJBN&SYSNDX\n          L     R1,ASCBJBNS         LOAD ADDRESS OF STC\nLJBN&SYSNDX CLC 0(8,R1),&JOBNAME    IS IT THAT JOB ?\n          BNE   LSVT&SYSNDX\n.* JOB WAS FOUND\n          LH    R0,ASCBASID         LOAD ASID NUMBER\n          LR    R1,7                PUT ASCB ADDRESS IN REG 1\n          XR    R15,R15             RETURN CODE = 0\n          B     XSVT&SYSNDX\nNTFN&SYSNDX DS  0H\n          LA    R15,12              RETURN CODE = 12, JOB DOESN'T EXIST\n          B     XSVT&SYSNDX\n.* JOB WAS NOT FOUND\nSVRG&SYSNDX DS 4F                   4 WORDS TO SAVE REGISTERS 5,6,7,8\nXSVT&SYSNDX DS 0H\n          LM    R5,R8,SVRG&SYSNDX\n          DROP  R6,R7\n          POP   USING\n          MEND\n* \"$MVSCMD\" MACRO ISSUES AN MVS COMMAND                           *\n         MACRO\n.*\n&NLA     $MVSCMD  &CMD\n&NLA     DS   0H\n         LA   1,L'&CMD\n         MVC  MGCRCMD(L'&CMD),&CMD\n         STH  1,MGCRLEN\n         MODESET MODE=SUP,KEY=ZERO\n         LA   1,MGCRLEN\n         XR   0,0\n         SVC  34                  MGCR MACRO TO ADD COMMAND IN QUEUE\n         MODESET MODE=PROB,KEY=NZERO\n         MEXIT\n         MEND\n* $REPLY MACRO GETS THE REPLY NUMBER OF THE WTOR ASSOCIATED TO A JOB  *\n         MACRO\n.*\n.*  ASID    = BINARY WORD CONTAINING THE ASID NUMBER OF THE ADDRESS-\n.*            SPACE ASSOCIATED TO THE REPLY NUMBER  (INPUT)\n.*  REPLYID = 2 CHAR-ZONE THAT WILL GET THE REPLY NUMBER  (OUTPUT)\n.*\n.*  CHAINING OF CONTROL BLOCKS : CVT -> UCMBASE -> ORE -> ORE -> ...\n.*\n&NLA     $REPLY &REPLYID=,&ASID=\n.*\n&NLA     DS    0H\n         MNOTE '** THIS MACRO USES REG 1, 2, AND DSECTS CVT,UCM,ORE **'\n         PUSH  USING\n         L    R1,16               LOAD ADDRESS OF CVT\n         USING CVT,R1\n         L    R1,CVTCUCB          LOAD ADDRESS OF UCM BASE\n         DROP R1\n         USING UCM,R1\n         LTR  R1,R1\n         BZ   BAD&SYSNDX          ADDRESS OF UCM BASE = 0\n         L    R2,UCMRPYQ          LOAD ADDRESS OF 1ST ORE\n         DROP R1\n         USING OREF,R2\n         LTR  R2,R2               ADDRESS OF  ORE = 0 ?\n         BZ   BAD&SYSNDX\n         MODESET MODE=SUP,KEY=ZERO\nLOOP&SYSNDX  DS  0H               LOOPING\n         CLC  OREASID,&ASID+2     OUR ASID ?\n         BE   YESB&SYSNDX         YES, QUIT THE LOOP\n         L    R2,ORELKP           TAKE ADDRESS OF NEXT ORE\n         LTR  R2,R2               ADDRESS OF NEXT ORE = 0 ?\n         BZ   NOTF&SYSNDX         YES, AT END IN CHAIN OF ORES\n         B    LOOP&SYSNDX\nYESB&SYSNDX  DS  0H               FOUND\n         MVC  &REPLYID.(2),OREID       KEEP REPLY NUMBER\n         MODESET MODE=PROB,KEY=NZERO\n         XR   R15,R15\n         B    END&SYSNDX\nNOTF&SYSNDX  DS  0H               NOT FOUND\n         MODESET MODE=PROB,KEY=NZERO\nBAD&SYSNDX  DS  0H                UNHAPPY END\n         LA   R15,16\nEND&SYSNDX DS 0H               END\n         DROP R2\n         POP  USING\n         MEND\n* DSECTS NEEDED                                                   *\n         CVT  DSECT=YES                ,    CVT\n         IHAASCB                       ,    ASCB\n         IHAASVT                       ,    ASVT\n         IHAORE                        ,    OPERATOR REPLY ELEMENT\n         IEECUCM                       ,    UCM\n         DCBD    DSORG=PS,DEVD=DA           DCB\nALLSTOP  CSECT\n* HOUSEKEEPING\n         STM  R14,R12,12(R13)     SAVE REGISTERS\n         LR   R12,R15\n         USING ALLSTOP,R12        R12 IS BASE REGISTER\n         ST   R13,SAVE+4\n         LA   R13,SAVE\n* IF PARAMETER \"BYPASS\" WAS CODED, THEN NO WTOR WILL BE ISSUED\n         L    R5,0(R1)\n         CLC  0(2,R5),=H'6'       ONLY \"BYPASS\" IS SUPPORTED\n         BNE  NOPARM\n         CLC  =C'BYPASS',2(R5)\n         BNE  NOPARM\n         B    CONFIRM             \"BYPASS\" WAS CODED, NO WTOR\nNOPARM   DS   0H\n* REPLY TO CONFIRM\nWTOR1    XC   ECB,ECB\n         LA   R6,REPLY\n         LA   R8,1                LENGTH OF REPLY ZONE = 1 CHARACTER\n         WTOR '** STOPPING ALL PRODUCTS BEFORE IPLING, ENTER C TO CONFIX\n               RM, T TO TERMINATE',(6),(8),ECB\n         WAIT ECB=ECB\n* ANALYZING THE REPLY\n         CLI  REPLY,C'C'          R XX,C : STOPPING MUST BE DONE\n         BE   CONFIRM\n         CLI  REPLY,C'T'          R XX,T : EXIT\n         BE   THEEND\n         WTO  '** INVALID REPLY, PLEASE REENTER **'\n         B    WTOR1\nCONFIRM  DS   0H\n         LA   R11,TABNOSTP        TABLE OF JOBS/TASKS NOT TO BE STOPPED\n* VERIFY IF //SYSIN WAS ALREADY OPENED\n         LA   R1,SYSIN\n         USING IHADCB,R1\n         TM   DCBOFLGS,DCBOFOPN   SYSIN ALREADY OPEN ?\n         BO   ALREOPEN\n         DROP R1\n         OPEN (SYSIN,(INPUT))     OPEN //SYSIN FILE\nALREOPEN DS   0H\nLOOPIN   GET  SYSIN,ZONE\n* ANALYSE PARAMETERS\n         SPACES  REPLZONE\n         CLI  ZONE,C'*'           LINE OF COMMENTS ?\n         BE   LOOPIN\n         CLC  =C'NOSTOP ',ZONE    \"DON'T STOP\" JOB ?\n         BE   NOSTOPT\n         CLC  =C'WAIT ',ZONE      MUST WE WAIT A WHILE ?\n         BE   WAITTIME\n         CLC  ZONE(6),$PJES2      MUST WE ALREADY STOP JES2 ?\n         BE   TRTJES2\n         CLC  =C'MVS ',ZONE       MUST WE ISSUE \"Z EOD\" ?\n         BE   TRTMVS\n* PROCESSING A JOBNAME (IN ORDER TO STOP IT CORRECTLY)\n         SPACES JOBNAME           SET TO SPACES\n         LA   R2,JOBNAME\n         LA   R1,ZONE\n* LOOP TO GET THE NAME OF THE JOB OR THE STC TO BE STOPPED\nLOOPTR   CLI  0(R1),C' '          BLANK ?\n         BE   ENDOFZON            YES, END OF ZONE\n         MVC  0(1,R2),0(R1)       GET ONE CHARACTER OF JOBNAME\n         LA   R1,1(0,R1)          NEXT CHARACTER IN ZONE\n         LA   R2,1(0,R2)          NEXT CHARACTER IN OUTPUT ZONE\n         B    LOOPTR\nENDOFZON DS   0H\n         CLI  JOBNAME,C' '        BLANK PARAMETER\n         BE   LOOPIN\n* PROCESS ONE JOB\n         LA   R1,1(0,R1)\n         MVC  REPLZONE(60),0(R1)\n         CLC  =C'REPLY ',0(R1)    JOB CAN BE STOPPED VIA REPLY\n         BE   SENDREPL\n* THE JOB CAN BE STOPPED BY AN MVS COMMAND\n         SYSJOB  JOBNAME=JOBNAME\n         LTR  R15,R15\n         BNZ  NOJOB\n         ST   R0,ASID\n* IF  \"JOBNAME WAIT\" WAS CODED, AND JOB IS ACTIVE, LET'S WAIT\nLABEL31  CLC  =C'WAIT ',REPLZONE\n         BNE  LABEL11\n* IF  \"JOBNAME WAIT NN\" WAS CODED, LET'S WAIT 'NN' SECONDS\n         CLC  =C'WAIT  ',REPLZONE\n         BE   WAITPURE                'JOBNAME WAIT'\n         MVC  INT+4(2),REPLZONE+5     WAIT TIME\n         B    PREPWAIT\n* WAITING FOR EVER, UNTIL THE JOB STOPS\nWAITPURE BAL  R9,WAITJOBS\n         B    LOOPIN\n* ISSUE A COMMAND TO STOP THE JOB\nLABEL11  $MVSCMD REPLZONE\n         B    LOOPIN\n* THE JOB MUST BE STOPPED BY ISSUING A REPLY\nSENDREPL DS   0H\n         SPACES REPLZONE\n         MVC  REPLZONE(40),6(R1)\n         SYSJOB  JOBNAME=JOBNAME\n         LTR  R15,R15\n         BNZ  NOJOB\n         ST   R0,ASID\n         $REPLY REPLYID=RR,ASID=ASID   WHAT REPLY IS PENDING FOR JOB?\n         LTR  R15,R15\n         BNZ  NOREPLY\n* ISSUE THE REPLY COMMAND\n         SPACES  COMMAND                      BLANKING OUT COMMAND ZONE\n         MVC  COMMAND(2),=C'R '                      \"R\n         MVC  COMMAND+2(2),RR                           NN\n         MVI  COMMAND+4,C','                              ,\n         MVC  COMMAND+5(L'REPLZONE),REPLZONE               XXXXXXXX\"\n         $MVSCMD COMMAND\n         B    LOOPIN\n* STORE IN A TABLE THE NAMES OF THE ADDRESS SPACES NEVER TO BE STOPPED\nNOSTOPT  DS   0H\n         CLI  0(R11),X'FF'\n         BE   ENDNOSTP\n         MVC  0(8,R11),ZONE+7           STORE JOBNAME\n         LA   R11,8(0,R11)              NEXT ENTRY IN TABLE\nENDNOSTP B    LOOPIN\n* JOB NOT FOUND (WARNING MESSAGE)\nNOJOB    MVC  WTO4+24(8),JOBNAME\nWTO4     WTO  '**ALLSTOP - JOB ???????? IS NOT ACTIVE'\n         B    LOOPIN\n* REPLY NOT FOUND (WARNING MESSAGE)\nNOREPLY  MVC  WTO5+24(8),JOBNAME\nWTO5     WTO  '**ALLSTOP - JOB ???????? HAS NO REPLY PENDING'\n         B    LOOPIN\n* ENTERING WAIT STATE\nWAITTIME DS   0H\n         MVC  INT+4(2),ZONE+5\nPREPWAIT MVC  WTO1+36(2),INT+4\nWTO1     WTO '**ALLSTOP -  WAITING DURING ?? SECONDS **',DESC=(11)\n         ST   R1,MSGIDWTO\n         STIMER WAIT,,DINTVL=INT        WAITING...\nNOSTIM1  L    R1,MSGIDWTO\n         LTR  R1,R1\n         BZ   LOOPIN\n         DOM  MSG=(1)                   SUPPRESS THE MESSAGE\n         B    LOOPIN\n* BEFORE STOPPING JES2, WE VERIFY THAT NO JOB IS STILL RUNNING    *\nTRTJES2  DS   0H\n         L    R15,16              CVT ADDRESS\n         USING CVT,R15\n         L    R6,CVTASVT          LOAD ASVT ADDRESS\n         DROP R15\n         USING ASVT,R6\n         L    R5,ASVTMAXU         R5=MAXUSER\n         LA   R6,ASVTENTY-4       R6=ADDRESS OF 1ST ASCB MINUS 4\nLSVT1    DS   0H\n         LTR  R5,R5               MAXUSER = 0 ?\n         BZ   NTFN1               YES, AT END IN ASVT -> NOT FOUND\n         BCTR R5,0                MAXUSER - 1\n         LA   R6,4(R6)            NEXT ASVT ENTRY\n         USING ASCB,R7\n         L    R7,0(R6)            R7=ASCB ADDRESS\n         TM   0(R6),X'80'         AVAILABLE ASID ?\n         BO   LSVT1               ASID NOT AVAILABLE, SKIP IT\n         L    R1,ASCBJBNI         LOADING ADDRESS OF JOBNAME\n         LTR  R1,R1\n         BNZ  LJBN1\n         L    R1,ASCBJBNS         LOADING ADDRESS OF STCNAME\nLJBN1    DS   0H\n* VERIFY WHETHER THIS JOB MUST BE STOPPED\n         CLC  JES,0(R1)           JES IS NOT YET TO BE STOPPED...\n         BE   LSVT1\n         LA   R10,TABNOSTP\nLOOP1    CLI  0(R10),X'FF'\n         BE   NOTALL\n         CLC  0(8,R1),0(R10)      JOBNAME FOUND IN TABLE ?\n         BE   LSVT1               YES, SKIP IT\n         LA   R10,8(0,R10)\n         B    LOOP1\n* NOW WE ARE SURE ALL JOBS REQUIRED WERE STOPPED, JES2 MAY BE STOPPED\nNTFN1    DS   0H\n         $MVSCMD $PJES2           STOPPING JES2 ITSELF\n         B    LOOPIN\n         DROP R6,R7\n* ALL JOBS REQUIRED WERE NOT STOPPED, WE MUST WAIT FOR THEM\nNOTALL   DS   0H\n         MVC  WTO2+43(8),0(R1)\nWTO2     WTO  '**ALLSTOP WILL NOT STOP JES2 WHILE ???????? IS ACTIVE'\n         BAL  R9,WAITJOBS\n         B    TRTJES2             LET'S TRY AND STOP JES AGAIN\n* BEFORE ISSUING Z EOD, WE VERIFY THAT JES HAS BEEN STOPPED       *\nTRTMVS   DS   0H\n         SYSJOB  JOBNAME=JES\n         LTR  R15,R15\n         BNZ  ZEOD\n         WTO  '**ALLSTOP - Z EOD WILL NOT BE DONE WHILE JES IS ACTIVE'\nENDIN    CLOSE (SYSIN)\n         B    WTOR1\nZEOD     DS   0H\n         WTO  '**ALLSTOP PROCEDURE COMPLETED (Z EOD) **',DESC=(11)\n         $MVSCMD HALTEOD\n         CLOSE (SYSIN)\nTHEEND   L    R13,4(R13)\n         RETURN  (14,12),T,RC=0\n* WAITING TILL A JOB HAS STOPPED\nWAITJOBS DS   0H\n         MVC  WTO3+36(8),JOBNAME\nWTO3     WTO  '**ALLSTOP - WAITING FOR JOB ???????? TO STOP',DESC=(11)\n         ST   R1,MSGIDWTO\nLOOPWAI  STIMER WAIT,,DINTVL=INTWAIT\n         SYSJOB JOBNAME=JOBNAME\n         LTR  R15,R15\n         BZ   LOOPWAI        JOB STILL ACTIVE, WAITING AGAIN...\nNOSTIM2  L    R1,MSGIDWTO\n         LTR  R1,R1\n         BZ   ENDWAITJ\n         DOM  MSG=(1)        THE MESSAGE CAN BE ROLLED\nENDWAITJ BR R9\nINTWAIT  DC   C'00000500'    WAIT INTERVAL (5 SECONDS)\nMSGIDWTO DC   F'0'           ID OF MESSAGE AFTER WTO\nSAVE     DS   18F            SAVE AREA\nJES      DC   CL8'JES2'\nHALTEOD  DC   CL80'Z EOD'\nREPLY    DS   X'00'\nRR       DS   CL2            REPLY NUMBER\nINT      DC   C'00000000'    WAIT INTERVAL (VARIABLE)\nECB      DS   F\nASID     DS   F\nSYSIN    DCB  DDNAME=SYSIN,EODAD=ENDIN,MACRF=GM,DSORG=PS\nREPLZONE DS   CL80\nZONE     DS   CL80\nTABNOSTP DC   30CL8' '      TB OF ADDRESS SPACES THAT NEED NOT BE STOPD\n         DC   X'FF'         END INDICATOR\nJOBNAME  DC   CL8' '\n$PJES2   DC   CL80'$PJES2'\nCOMMAND  DC   CL80' '\nMGCRLEN  DC   H'0'          LENGTH\n         DC   H'0'          ROUTCODE\nMGCRCMD  DC   CL80' '       COMMAND\n         LTORG\n         END\n\n\nThierry Falissard\nSystems Engineer\nBanque La Henin (France)                              c Xephon 1993\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ANALJCL": {"ttr": 1285, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x004\\x7f\\x01\\x004\\x7f\\x17\\x11\\x00\\x1f\\x00\\x1f\\x00\\x00\\xe4\\xd7\\xc4\\xf2\\xf0\\xf0\\xf0@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-12-12T00:00:00", "modifydate": "2000-12-12T17:11:00", "lines": 31, "newlines": 31, "modlines": 0, "user": "UPD2000"}, "text": "//ANALJCL  JOB 1,ANALJCL,MSGLEVEL=(1,1),MSGCLASS=H,CLASS=A,\n//    NOTIFY=&SYSUID,COND=(4,LT),REGION=8000K,\n//    TIME=NOLIMIT RESTART=ANALJCL\n//*\n//* QUICK JCL ANALYSIS - USEFUL FOR CROSS-REFERENCES\n//*\n//   SET PROCLIB='MY.LIBRARY.JCL'  PROCLIB OR JCL LIBRARY TO ANALYZE\n//   SET REXXLIB='ETIC2.CBTTF.PDS' THIS PDS\n//*\n//*********************************************************************\n//* UNLOADING THE JCL LIBRARY ONTO A SEQUENTIAL FILE\n//*********************************************************************\n//IEBPTPCH EXEC  PGM=IEBPTPCH\n//SYSOUT   DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  DSN=&PROCLIB,DISP=SHR  <--- LIBRARY\n//SYSUT2   DD  DISP=(NEW,PASS),DSN=&&JCLS,\n// UNIT=SYSALLDA,LRECL=133,RECFM=FB,DSORG=PS,\n// SPACE=(CYL,(100,15),RLSE)\n//SYSIN    DD  *\n PRINT TYPORG=PO,MAXFLDS=1\n RECORD FIELD=(80)\n//*********************************************************************\n//*   ANALYZING JCLS                                                  *\n//*   DD SYSTSPRT WILL CONTAIN AN IMAGE OF ALL DD CARDS USED          *\n//*********************************************************************\n//ANALJCL  EXEC PGM=IRXJCL,PARM='ANALJCLR'\n//SYSEXEC  DD DISP=SHR,DSN=&REXXLIB\n//JCLIN    DD DISP=SHR,DSN=&&JCLS\n//SYSTSPRT DD  SYSOUT=*            <--- RESULT\n//SYSTSIN  DD  DUMMY\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ANALJCLR": {"ttr": 1287, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x004\\x7f\\x01\\x004\\x7f\\x17\\x11\\x01w\\x01w\\x00\\x00\\xe4\\xd7\\xc4\\xf2\\xf0\\xf0\\xf0@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-12-12T00:00:00", "modifydate": "2000-12-12T17:11:00", "lines": 375, "newlines": 375, "modlines": 0, "user": "UPD2000"}, "text": "  /* REXX                                                          */\n  /*       J C L    A N A L Y S I S                                */\n\n  /*\nJCL ELEMENTS CROSS-REFERENCE\n----------------------------\n\nPUBLISHED IN XEPHON - MVS UPDATE  (FEB 1997)\n\nAS I RECENTLY HAD TO MANAGE A SMS MIGRATION PROJECT, I HAD TO ADDRESS\nSPECIFIC QUESTIONS AS : WHICH JOBS USE A GIVEN FILE ? WHAT PROGRAMS\nUSED IN THESE JOBS ARE IBM UTILITIES, OR ARE SITE SPECIFIC ? IS THAT\nFILE RECREATED EVERY DAY, OR IS IT READ BEFORE BEING REWRITTEN ? (THAT\nWAS A BASE FOR DISTINGUISHING TEMPORARY AND PERMANENT FILES).\nTHE IDEA WAS THEN TO BUILD A LIST OF ALL FILES USED IN DD CARDS. THE\nLIST COULD BE FURTHER ANALYSED THROUGH SORTS OR OTHER PROGRAMS.\nTHE ANALYSIS OF THE JCL CARD IS VERY ROUGH, BUT SHOULD BE CONVENIENT FOR\nMOST CASES. NOTE THAT REFER-BACKS ARE SUPPORTED PAR ANALJCL. THE INPUT DATA\nCOMES FROM IEBPTPCH, THE OUTPUT IS WRITTEN ON SYSTSPRT.\n  */\n\n\n  /*   G E N E R A L      O P T I O N S                            */\n\n  SEL_MBR = ''       /* SELECT ONLY MEMBERS BEGINNING WITH...      */\n  SEL_DSN = ''       /* SELECT ONLY DSNAMES BEGINNING WITH...      */\n  SUPPORT_REFERBACK = 'Y'   /* SUPPORT  DSN=*.DDN  DSN=*.STEPN.DDN */\n\n  /*   T I T L E    L I N E                                        */\n\n   SAY '--------------  DSNAME  --------------------'   ,\n       'JOBNAME ' '-MEMBER-' 'STEPNAME' 'STP' '-PROGRAM'  ,\n       '-DDNAME-' 'VOLSER' '--UNIT--' '--- DISP --' ,\n       '----- SPACE -----' ,\n       'RECFM' 'DSORG' 'LRECL' 'BLKSZ'\n\n  OLD_MBR = ''\n  TOTLIN_MBR = 0\n  CARD = ''     /* EXTENDED JCL CARD CONTAINS NO DATA FOR THE MOMENT */\n  MBR_NB = 0      /* COUNT OF PROCESSED MEMBERS     */\n\n  DO FOREVER\n  'EXECIO 1 DISKR JCLIN   (STEM REC.  '    /* READING    JCLIN     */\n  IF RC > 0 THEN DO              /* END OF FILE     */\n                 CALL END_MBR\n                 EXIT\n                 END\n\n  SAUT = SUBSTR(REC.1,1,1)\n\n  /*   A NEW MEMBER IS TO BE PROCESSED                               */\n  IF SAUT = '1' THEN DO\n                     'EXECIO 1 DISKR JCLIN (STEM REC. ' /* NEXT LINE */\n                     IF RC > 0 THEN EXIT\n                     IF SUBSTR(REC.1,2,13) = 'MEMBER NAME  ' ,\n                     THEN  DO\n                           MBR_NAME = SUBSTR(REC.1,15,8)\n                           /* IF A NEW MEMBER IS ARRIVING ...     */\n                           IF MBR_NAME \\= OLD_MBR THEN DO\n                                CALL END_MBR  /* PROCESS OLD_MBR  */\n                                CALL NEW_MBR\n                                ITERATE\n                                END\n                                                  ELSE ITERATE\n                           END\n                     ELSE  DO\n                           SAY '** ERROR, MEMBER NAME WAS EXPECTED'\n                           SAY REC.1\n                           EXIT\n                           END\n                     END\n\n  /*   NO MEMBER CHANGE, CONTINUE PROCESSING OF CURRENT MEMBER    */\n\n                           /* ELIMINATE IF MEMBER NOT SELECTED    */\n  IF SEL_MBR \\= '' & POS(SEL_MBR,MBR_NAME) \\= 1 THEN ITERATE\n\n\n  X = SUBSTR(REC.1,2,72)     /* 71 FIRST BYTES                    */\n  TOTLIN_MBR = TOTLIN_MBR + 1\n\n  /*   ANALYZE    STATEMENT                                       */\n  IF X ='//' THEN ITERATE   /* END OF JOB */\n  IF SUBSTR(X,1,2) \\= '//' THEN ITERATE       /* NOT A JCL CARD   */\n  IF SUBSTR(X,1,3) = '//*' THEN ITERATE       /* COMMENT CARD     */\n  NAME = WORD(X,1)    /* 1ST WORD IS // OR //NAME                 */\n  NAME = SUBSTR(NAME,3,LENGTH(NAME)-2)        /* CARD NAME        */\n\n  /*   NEW STATEMENT              (DD EXEC JOB PROC ...)          */\n  IF  NAME \\= '' THEN DO\n        TYPE = WORD(X,2)       /* 2ND WORD : DD EXEC JOB PROC ... */\n        CALL END_STAT /* PREVIOUS STATEMENT IN \"CARD\" ZONE TERMINATED*/\n        CARD = WORD(X,3)     /* INITIALIZE \"CARD\" WITH REMAINING DATA*/\n        CALL NEW_STAT\n        ITERATE\n\n        END\n\n  /*   STATEMENT WITH NO CARD NAME                                */\n  /*   (CONTINUATION, DD WITHOUT DDNAME, ETC.)                    */\n\n  TYPE = WORD(X,2)\n  IF  TYPE = 'DD' | TYPE = 'EXEC' | TYPE = 'JOB' ,\n                  | TYPE = 'PROC' | TYPE = 'PEND' THEN DO\n                  CALL END_STAT\n                 CARD = WORD(X,3) /* INIT. \"CARD\" WITH REMAINING DATA*/\n                  IF TYPE = 'DD' THEN          /* DD CONCATENATION */ ,\n                                 NAME = OLD_NAME\n                  CALL NEW_STAT\n                  ITERATE\n                  END\n  /*                         CONTINUATION        CARD             */\n        IF FLAG_CONT = 1 THEN  DO\n                               CARD = CARD||WORD(X,2)\n                               CALL NEW_STAT\n                               END\n                         ELSE  DO       /* IGNORE THE CARD */\n                               ITERATE\n                               END\n\n  END       /* END OF RECORD PROCESSING (DO FOREVER)  */\n  EXIT\n\n  /*  MEMBER CALLED OLD_MBR TERMINATED                            */\nEND_MBR :\n  IF TOTLIN_MBR = 0 THEN RETURN\n  SAY 'END OF MEMBER' OLD_MBR TOTLIN_MBR 'LINES'\n  CALL END_STAT\n  TOTLIN_MBR = 0\n  RETURN\n\n  /* BEGINNING PROCESSING OF MEMBER \"MBR_NAME\"                    */\nNEW_MBR :\n  OLD_MBR = MBR_NAME\n  MBR_NB = MBR_NB + 1\n  SAY 'MEMBER'  MBR_NAME 'NUMBER' MBR_NB\n  CARD = ''\n  NAME  = ''\n  TYPE  = ''\n  STEPNO = 0\n  JOB_NAME = ''\n  EXEC_NAME = ''\n  FLAG_CONT = 0\n  RETURN\n  EXIT\n\n  /* END OF STATEMENT \"CARD\", TYPE \"OLD_TYPE\", NAME \"OLD_NAME\"     */\n  /*                                 IN  PDS MEMBER \"OLD_MBR\"      */\nEND_STAT :\n  FLAG_CONT = 0\n  IF CARD = '' THEN RETURN\n\n  /*  JOB CARD           */\n\n  IF OLD_TYPE = 'JOB'  THEN DO\n      JOB_NAME = OLD_NAME\n      OLD_NAME = ''\n      END\n\n  /*  EXEC CARD          */\n\n  IF OLD_TYPE = 'EXEC'  THEN DO\n      EXEC_NAME = OLD_NAME\n      OLD_NAME = ''\n      PGM_NAME = ''\n      PGM_NAME = SCAN_PARM('PGM=',CARD)\n      STEPNO = STEPNO + 1\n      END\n\n  /*  DD  CARD           */\n\n  IF OLD_TYPE = 'DD'  THEN DO\n      DD_NAME = OLD_NAME\n  /*      CARD   DD          SEEKING  DISP                      */\n      DISP    = SCAN_PARM('DISP=',CARD)\n      DISP1   = GIVE_PARM(DISP,1)\n      IF  DISP1 = '?' THEN DISP1 = 'NEW'\n      DISP2   = GIVE_PARM(DISP,2)\n      IF  DISP2 = '?' & DISP1 = 'NEW'    THEN DISP2 = 'DELETE'\n      IF  DISP2 = '?' & DISP1 \\= 'NEW'   THEN DISP2 = 'KEEP'\n      DISP3   = GIVE_PARM(DISP,3)\n      IF  DISP3 = '?' & DISP1 = 'NEW' THEN DISP3 = 'DELETE'\n  /*      CARD   DD          SEEKING  DSN                       */\n      DS_NAME = SCAN_PARM('DSN=',CARD)\n      IF DS_NAME = '' THEN ,\n                      DS_NAME = SCAN_PARM('DSNAME=',CARD)\n      IF DS_NAME  = '' THEN DS_NAME = '?'\n  /*      CARD   DD          SEEKING  VOL=SER                   */\n      VOL_SER = SCAN_PARM('SER=',CARD,'S')\n      IF VOL_SER  = '' THEN VOL_SER = '?'\n  /*      CARD   DD          SEEKING  RECFM                     */\n      DD_RECFM= SCAN_PARM('RECFM=',CARD,'S')\n      IF DD_RECFM = '' THEN DD_RECFM= '?'\n  /*      CARD   DD          SEEKING  DSORG                     */\n      DD_DSORG= SCAN_PARM('DSORG=',CARD,'S')\n      IF DD_DSORG = '' THEN DD_DSORG= '?'\n  /*      CARD   DD          SEEKING  LRECL                     */\n      DD_LRECL= SCAN_PARM('LRECL=',CARD,'S')\n      IF DD_LRECL = '' THEN DD_LRECL= '?'\n  /*      CARD   DD          SEEKING  BLKSIZE                   */\n      DD_BLK  = SCAN_PARM('BLKSIZE=',CARD,'S')\n      IF DD_BLK   = '' THEN DD_BLK  = '?'\n  /*      CARD   DD          SEEKING  UNIT                      */\n      DD_UNT  = SCAN_PARM('UNIT=',CARD)\n      IF DD_UNT   = '' THEN DD_UNT  = '?'\n                       ELSE DD_UNT  = GIVE_PARM(DD_UNT,1)\n  /*      CARD   DD          SEEKING  SPACE                     */\n      SPACE   = SCAN_PARM('SPACE=',CARD)\n      SPACE1  = GIVE_PARM(SPACE,1)\n      SPACE2  = GIVE_PARM(SPACE,2)\n\n  /*  SUPPORT OF REFERBACK  DSN=*.DDN  DSN=*.STEPN.DDN          */\n  /*  PREPARE IN ADVANCE VARIABLES #_DDN OU #_STEPN_DDN         */\n  /*    FOR SOLVING FUTURE REFERBACKS                           */\n      IF  SUPPORT_REFERBACK = 'Y'   THEN  DO\n          VARN = '#_'||DD_NAME\n          INTERPRET VARN||'='''||DS_NAME||''''\n          IF EXEC_NAME \\= '' THEN DO\n             VARN = '#_'||EXEC_NAME||'_'||DD_NAME\n             INTERPRET VARN||'='''||DS_NAME||''''\n             END\n  /*  SOLVING THE REFERBACK WITH THE PREPARED VARIABLE          */\n          IF  SUBSTR(DS_NAME,1,2) = '*.' THEN DO\n              VARN = DS_NAME\n              VARN  = TRANSLATE(VARN,'#','*')\n              VARN  = TRANSLATE(VARN,'_','.')\n              INTERPRET 'TMP='||VARN\n              SAY 'SUBSTITUTION:'  DS_NAME 'BECOMES' TMP\n              DS_NAME=TMP\n              END\n          END\n\n\n  /*  ALL INFORMATIONS ARE BEING PUT OUT                        */\n\n                   /* ELIMINATE IF DSNAME NOT TO BE SELECTED    */\n  IF (SEL_DSN \\= '' & POS(SEL_DSN,DS_NAME) \\= 1) ,\n         THEN RETURN\n\n   SAY  SUBSTR(DS_NAME,1,44) ,\n        SUBSTR(JOB_NAME,1,8) ,\n        SUBSTR(OLD_MBR,1,8) ,\n        SUBSTR(EXEC_NAME,1,8) ,\n        FORMAT(STEPNO,3)      ,\n        SUBSTR(PGM_NAME,1,8) ,\n        SUBSTR(DD_NAME,1,8) ,\n        SUBSTR(VOL_SER,1,6) ,\n        SUBSTR(DD_UNT,1,8) ,\n        SUBSTR(DISP1,1,3) ,\n        SUBSTR(DISP2,1,3) ,\n        SUBSTR(DISP3,1,3) ,\n        SUBSTR(SPACE1,1,3) ,\n        SUBSTR(SPACE2,1,15) ,\n        SUBSTR(DD_RECFM,1,5) ,\n        SUBSTR(DD_DSORG,1,5) ,\n        SUBSTR(DD_LRECL,1,5) ,\n        SUBSTR(DD_BLK,1,5)\n  /*                                                            */\n      END\n  DISP1 = ''\n  DISP2 = ''\n  DISP3 = ''\n  SPACE1 = ''\n  SPACE2 = ''\n  RETURN\n\n  /* BEGINNING NEW STATEMENT TYPE \"TYPE\" NAME \"NAME\"              */\n  /* USEFUL INFORMATIONS ARE KEPT IN \"CARD\" ZONE                  */\nNEW_STAT :\n  CARD = STRIP(CARD)       /* STRIP LEADING AND TRAILING BLANKS   */\n  IF FLAG_CONT = 0 THEN DO\n           OLD_TYPE = TYPE\n           OLD_NAME = NAME\n           END\n  IF RIGHT(CARD,1) = ','    /* CONTINUATION EXPECTED   */   ,\n     THEN FLAG_CONT = 1\n     ELSE FLAG_CONT = 0\n  RETURN\n\n  /* SEND BACK KEYWORD VALUE                                       */\n  /* VALUE IS RETURNED WITHOUT LEADING NOR TRAILING PARENTHESIS    */\n  /* FOR EXAMPLE : SPACE=(TRK,(1,1),RLSE)  ->  TRK,(1,1),RLSE      */\n\nSCAN_PARM: PROCEDURE\n  ARG SUB_STR,CARD,TYPE_PARM\n      /* 1ST PARAMETER     -> SUBSTRING LIKE 'DSN=': (SCAN CRITERIA)*/\n      /* 2ND PARAMETER     -> JCL CARD TO BE SCANNED                */\n      /* 3RD PARAMETER     -> ='S' IF SUBPARAMETER                  */\n      P= POS(SUB_STR,CARD)   /* GO AFTER KEYWORD VALUE              */\n      CHAINE = ''\n      IF P=0 THEN RETURN ''     /* NOT FOUND  */\n\n   /* SEEKING DELIMITER FOR END OF PARAMETER                        */\n\n   /* ENDING COMMA COULD BE A DELIMITER                             */\n   Q1 = POS(',',SUBSTR(CARD,P+LENGTH(SUB_STR)))\n   /* ENDING BLANK COULD BE A DELIMITER                             */\n   Q2 = POS(' ',SUBSTR(CARD,P+LENGTH(SUB_STR)))\n   /* ENDING PARENTHESIS  COULD BE A DELIMITER                      */\n   /* (NOT ALWAYS A DELIMITER FOR KEYWORD VALUE, EX : DSN=X(M)      */\n   IF TYPE_PARM = 'S' THEN ,\n   Q3 = POS(')',SUBSTR(CARD,P+LENGTH(SUB_STR)))\n                      ELSE Q3 = 999999\n\n      /* THE LEAST NOT NULL VALUE GIVES THE REAL DELIMITER          */\n   Q = MIN(Q1,Q2,Q3)\n   IF Q1 = 0 THEN Q = MIN(Q2,Q3)\n   IF Q2 = 0 THEN Q = MIN(Q1,Q3)\n   IF Q3 = 0 THEN Q = MIN(Q2,Q1)\n   IF Q1=0 & Q3=0 THEN Q = Q2\n   IF Q2=0 & Q3=0 THEN Q = Q1\n   IF Q1=0 & Q2=0 THEN Q = Q3\n   IF Q = 999999 THEN Q=0\n   IF Q=0 THEN              /* THE WHOLE CARD IS CONSIDERED */  ,\n   CHAINE  =  SUBSTR(CARD,P+LENGTH(SUB_STR))\n          ELSE ,\n   CHAINE  =  SUBSTR(CARD,P+LENGTH(SUB_STR),Q-1)\n   IF LEFT(CHAINE,1) \\= '(' THEN RETURN CHAINE\n\n   /* PARAMETER WITH MULTIPLE PARENTHESIS                        */\n   CT = 1\n   J = P+LENGTH(SUB_STR)+1 /* 1ST CHARACTER AFTER KEYWORD=       */\n   DO WHILE CT \\= 0\n      IF SUBSTR(CARD,J,1) = '(' THEN CT = CT+1\n      IF SUBSTR(CARD,J,1) = ')' THEN CT = CT-1\n      J = J + 1\n      IF J>LENGTH(CARD) THEN LEAVE  /* MAX EXCEEDED - AVOID LOOP */\n      END\n   IF CT \\= 0 THEN DO      /* AS MANY \"(\" AS \")\" ? IF NOT, ERROR */\n      SAY '** JCL ERROR WHEN ANALYZING' SUB_STR\n      SAY '** CARD IN ERROR : ' CARD\n      RETURN ''\n      END\n\n   CHAINE = SUBSTR(CARD,P+LENGTH(SUB_STR)+1,J-P-LENGTH(SUB_STR)-2)\n\n  RETURN CHAINE\n\n  /* RETURN VALUE OF A POSITIONAL PARAMETER, ACCORDING TO ITS      */\n  /* POSITION : FOR EX., THE 2ND VALUE OF \"TRK,(1,1),RLSE\" WILL BE */\n  /* (1,1)                                                         */\n\nGIVE_PARM: PROCEDURE\n  ARG CARD,NB              /* PARAMETER VALUE, PARAMETER POSITION  */\n  IF CARD = '' THEN RETURN '?'\n  CHAINE = CARD\n\n   /* RETURN \"?\" FOR MISSING PARAMETERS                          */\n   IF SUBSTR(CARD,1,1) = ',' THEN CHAINE = '?'||CARD\n   IF SUBSTR(CARD,LENGTH(CARD),1) = ',' THEN CHAINE = CHAINE||'?'\n   J = 1\n   DO WHILE J < LENGTH(CHAINE)\n   IF SUBSTR(CHAINE,J,1) = ',' & ,\n      SUBSTR(CHAINE,J+1,1) = ',' THEN ,\n         CHAINE = LEFT(CHAINE,J)||'?'|| ,\n         SUBSTR(CHAINE,J+1,LENGTH(CHAINE)-J)\n      J = J + 1\n      END\n\n\n   /* REPLACE COMMAS BY BLANKS IN ORDER TO SEPARATE WORDS        */\n   CT = 0\n   J = 1\n   DO WHILE J < LENGTH(CHAINE)+1\n      IF SUBSTR(CHAINE,J,1) = '(' THEN CT = CT+1\n      IF SUBSTR(CHAINE,J,1) = ')' THEN CT = CT-1\n      /* REPLACE COMMA SITUATED OUT OF PARENTHESIS          */\n      IF SUBSTR(CHAINE,J,1) = ',' & CT = 0 THEN DO\n         CHAINE = LEFT(CHAINE,J-1)||' '|| ,\n         SUBSTR(CHAINE,J+1,LENGTH(CHAINE)-J)\n         END\n      J = J + 1\n      END\n  IF WORDS(CHAINE) < NB THEN RETURN '?'\n  RETURN WORD(CHAINE,NB)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ASCBS": {"ttr": 1537, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x991_\\x00\\x991_\\x11P\\x00\\x9f\\x00\\x9f\\x00\\x00\\xe3\\xc8\\xc9\\xc5\\xd9\\xd9\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-11-11T00:00:00", "modifydate": "1999-11-11T11:50:00", "lines": 159, "newlines": 159, "modlines": 0, "user": "THIERRY"}, "text": "/*------------------------------ Rexx -------------------------------*/\n/*       Liste des ASCBs                                             */\n/* option='s' (liste des STCs)                                       */\n/* option='t' (liste des TSUs)                                       */\n/* option='j' (liste des JOBs)                                       */\n/* option='a' (liste de tous)                                        */\n/* option=' ' (statistiques globales)                                */\n/*-------------------------------------------------------------------*/\n  arg opt\n  upper opt\n\n  say '            Liste de tous les postes ASCB en ASVT'\n  if opt = '' then say 'Utilisez l''option' ,\n  ' S pour stcs, T pour tsus, J pour jobs, A pour tous'\n  say ' '\n\n\n  asidn = 1\n  ctrnonr = 0\n  ctrtsu = 0\n  ctrjob = 0\n  ctrstc = 0\n  ctrind = 0\n  ctrfree = 0\n\n  cvt  = storage(10,4)                   /* cvt address in memory */\n                                         /*                       */\n  asvt   = storage(d2x(556+c2d(cvt)),4)  /* adresse asvt          */\n  ascb1  = storage(d2x(528+c2d(asvt)),4)   /* ASCB de *MASTER*  */\n\n\n  acro   = storage(d2x(512+c2d(asvt)),4)  /* acronyme \"ASVT\"       */\n  maxu   = storage(d2x(516+c2d(asvt)),4)  /* asvtmaxu (maxi esp.ad)*/\n  max =  c2d(maxu)\n  if  acro \\= 'ASVT' then do\n      say '** Erreur d adressage, ASVT non trouvee'\n      exit (8)\n      end\n\n  do forever\n    job = getjbn(asidn)               /* job actif dans le   syst}me */\n    if job=0 then leave\n    if job='' then ctrfree = ctrfree + 1\n    end\n\n  say ' '\n  say 'TOTAL : ' ctrstc 'started tasks,' ,\n  ctrtsu 'users TSO,' ctrjob 'jobs.'\n  if ctrind \\= 0 then say '        ' ctrind 'job/stc/tsu \"STARTING\"'\n  if ctrnonr \\= 0 then say '        ' ctrnonr 'non-reusable asvt' ,\n     'entries'\n  tot = ctrstc + ctrtsu + ctrjob + ctrind\n  say '        ' tot 'espaces-adresses utilises sur un maxi de' max ,\n      ', ' ctrfree 'postes libres'\n  exit(0)\n\n\n/*------------------------------ Rexx -------------------------------*/\n/* Cette proc{dure donne le job suivant dans le syst}me              */\n/*-------------------------------------------------------------------*/\ngetjbn: procedure expose asidn  ctrtsu ctrjob ctrstc ctrnonr ,\n                         cvt asvt max ctrind opt ascb1\n\n  if asidn > max  then return 0   /* fin de liste des jobs */\n  offset = 4*asidn-4\n  asvten =  d2x(offset+528+c2d(asvt))\n  ascb   = storage(d2x(offset+528+c2d(asvt)),4)\n  asidn = asidn + 1\n\n  /* ASCBs non reutilisables          */\n  if substr(c2x(ascb),1,1) = '8' then do    /* poste asvt non pris */\n         if substr(c2x(ascb),2,7) =  substr(c2x(ascb1),2,7) then do\n            ctrnonr = ctrnonr + 1\n  say 'asid=' asidn-1 '  asidx=' d2x(asidn-1) '  NON-REUSABLE ' ,\n        '  asvt entry=' asvten\n            end\n    /*   say 'asid=' asidn-1  ' ascb=' c2x(ascb)     */\n         return ''       /*   asid libre */\n         end\n\n  /* D{tection anomalie (ascb a zero) */\n  if substr(c2x(ascb),2,7) = '0000000' then do\n     say ' ** ANOMALIE dans l''asvt, poste a zero en ' asvten ,\n           ' asid' asidn-1 '(dec)'\n     end\n\n  ascbjbni   = storage(d2x(172+c2d(ascb)),4)\n  ascbjbns   = storage(d2x(176+c2d(ascb)),4)\n  jobname = 'STARTING'\n  typ = '   '      /* type ind{termin{ par d{faut */\n\n  /* Cas d'une STC ou d'un user TSO                  */\n\n  if c2x(ascbjbns) \\= 0 then do\n               jobname = storage(c2x(ascbjbns),8)\n               typ = 'stc'\n               ctrstc = ctrstc + 1\n               tsb = storage(d2x(60+c2d(ascb)),4)\n               if c2x(tsb) \\= 0 then do\n                                typ = 'tsu'\n                                ctrstc = ctrstc - 1\n                                ctrtsu = ctrtsu + 1\n                                end\n               end\n\n  /* Cas d'un JOB                                    */\n\n  if c2x(ascbjbni) \\= 0 then do\n               jobname = storage(c2x(ascbjbni),8)\n               ctrjob = ctrjob + 1\n               ctrstc = ctrstc - 1\n               typ = 'job'\n               end\n\n  /* type ind{termin{ (starting) */\n\n  if typ = '   ' then ctrind = ctrind + 1\n\n  /* consommations CPU                               TF 22-4-97 */\n\n  ascbejst   = storage(d2x(64+c2d(ascb)),8)    /* temps TCB     */\n  ascbsrbt   = storage(d2x(200+c2d(ascb)),8)   /* temps SRB     */\n  numeric digits 20  /* necessaire sinon le x2d plante   */\n  tcbtime = x2d(substr(c2x(ascbejst),1,13))  /* tcb en millioniemes  */\n  srbtime = x2d(substr(c2x(ascbsrbt),1,13))  /* tcb en millioniemes  */\n  tcbtime = FORMAT(tcbtime/1000000,,2)    /* temps TCB secondes   */\n  srbtime = FORMAT(srbtime/1000000,,2)  /* temps SRB secondes   */\n\n  /* consommations en I/Os                           TF 22-4-97 */\n\n  ascbiosc   = storage(d2x(320+c2d(ascb)),4)    /* nombre d'IOs  */\n  ios        = c2d(ascbiosc)\n\n\n  /* Infos generales tq STEPNAME tirees du CSCB      TF 22-4-97 */\n  /* NB : le CSCB est insuffisant pour les jobs      TF 22-4-97 */\n  /*      il faut passer par ASCBJBNI                TF 22-4-97 */\n\n  if    typ  = 'job'  then do\n             cscb       = storage(d2x(c2d(ascbjbni)+8),4)\n             stepname   = storage(d2x(64+c2d(cscb)),8)\n             end\n                      else do\n             cscb       = storage(d2x(56+c2d(ascb)),4)\n             stepname   = storage(d2x(16+c2d(cscb)),8)\n             end\n\n  /* Affichage */\n\n  if ( opt = 'S' & typ = 'stc' ) |  ,\n     ( opt = 'T' & typ = 'tsu' ) |  ,\n     ( opt = 'J' & typ = 'job' ) |  ,\n     ( typ = '   ')              |  ,\n     ( opt = 'A')    then ,\n  say 'asid'||asidn-1 '('||d2x(asidn-1)||') '||typ||'='||jobname ,\n   'ascb='||c2x(ascb) 'asvt='||asvten ,\n    'TCB='||tcbtime||'s' 'SRB='||srbtime||'s' 'IO='||ios  ,\n    stepname\n  return jobname\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CONSOLE": {"ttr": 1541, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x991_\\x00\\x991_\\x11P\\x01\\xa3\\x01\\xa3\\x00\\x00\\xe3\\xc8\\xc9\\xc5\\xd9\\xd9\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-11-11T00:00:00", "modifydate": "1999-11-11T11:50:00", "lines": 419, "newlines": 419, "modlines": 0, "user": "THIERRY"}, "text": "* WARNING : DON'T CALL THE LOAD-MODULE \"CONSOLE\", THIS NAME IS ALREADY\n* USED BY IBM FOR THE \"CONSOLE\" COMMAND PROCESSOR.\n*\n* PUBLISHED IN XEPHON - MVS UPDATE - DECEMBER 1990\n*\n*     BRINGING THE MVS MASTER CONSOLE UNDER ISPF\n*\n*SOMETIMES IT MIGHT BE INTERESTING TO INSPECT THE PRESENT\n*CONTENTS OF THE MVS CONSOLE DISPLAY AS THEY APPEAR TO THE\n*OPERATOR.  WITH THE FOLLOWING PROGRAM, CONSOLE, YOU CAN\n*MONITOR THE RETAINED MESSAGES (EG PENDING MOUNT REQUESTS,\n*WTORS, ETC); ISSUE MVS OR JES COMMANDS, OBSERVING THEIR\n*EFFECTS AS IF YOU WERE SAT IN FRONT OF THE REAL MVS CONSOLE; TRAP\n*THE LAST COMMAND ENTERED BY THE OPERATOR; AND SEND HIM A HIGH-\n*INTENSITY MESSAGE.  YOU CAN ALSO STOP AND HOT-RESTART JES\n*WITHOUT HAVING TO GO INTO THE CONSOLE ROOM (YOU CAN'T DO THIS\n*WITH SDSF AS JES IS NOT RUNNING).  OF COURSE, THE PROGRAM\n*DOES NOT GIVE YOU COMPLETE AUTHORITY LIKE A REAL MVS MASTER\n*CONSOLE (EG YOU WON'T HAVE SUFFICIENT AUTHORITY TO ISSUE THE\n*FORCE COMMAND) ALTHOUGH IN SOME CASES IT MAY PROVE TO BE\n*MORE USEFUL (ALTHOUGH LESS TALKATIVE) THAN THE SDSF LOG\n*DISPLAY.\n*THE PROGRAM OBTAINS THE CONSOLE DISPLAY FROM THE CONSOLE\n*ADDRESS SPACE.  IT ISSUES THE MVS COMMANDS YOU ENTER,\n*KEEPING IN MEMORY THE LAST FOUR, WHICH YOU CAN RECALL BY\n*ENTERING '&', '&1', '&2', OR '&3' AS APPROPRIATE.  YOU SEND A\n*MESSAGE TO THE OPERATOR BY PRECEDING IT WITH 'WTO'.  HITTING\n*ENTER WITHOUT ANY DATA REFRESHES THE SCREEN WITH THE\n*MESSAGES THAT HAVE APPEARED ON THE CONSOLE MOST RECENTLY.\n*THE PROGRAM LISTS THE LAST 20 LINES DISPLAYED ON THE MVS\n*MASTER CONSOLE.  IT ASSUMES YOU HAVE AN AUTHORIZATION SVC\n*(SVC 235 IN THIS CASE) INSTALLED TO RESET THE JSCBAUTH FLAG\n*WHEN NECESSARY.\n*THIS PROGRAM HAS BEEN SUCCESSFULLY TESTED UNDER MVS/XA 2.2\n*AND MVS/ESA 3.1.3.  IN ADDITION, I THINK THERE ARE SOME\n*TECHNIQUES USED IN THE PROGRAM THAT WILL INTEREST THE NOVICE\n*SYSTEMS PROGRAMMER.  FOR EXAMPLE:\n*   -  AN ISPEXEC MACRO WHICH SIMULATES THE ISPEXEC CLIST COMMAND.\n*   -  CROSS-MEMORY ACCESS TO ANOTHER ADDRESS SPACE.\n*   -  ADDRESS MODE SWITCHING.\n*   -  THE USE OF THE MGCR MACRO.\n*---------------------------------------------------*\n* THIS MACRO CONVERTS A BINARY HALFWORD TO DECIMAL  *\n*---------------------------------------------------*\n         MACRO\n         EXTEND  &BIN,&ETEND\n         LCLA  &LEN\n         AIF   (T'&ETEND NE 'U').FOLLOW\n         B     EXPR&SYSNDX\n&ETEND   DC    CL6'0'               CREATE THE ZONE IF IT DOESN'T EXIST\n.FOLLOW  ANOP\nEXPR&SYSNDX    DS  0H\n         XR    R1,R1                SET REGISTER TO ZERO\n         ICM   R1,3,&BIN            LOAD BINARY ZONE\n         CVD   R1,DBLEWORD          CONVERT TO DECIMAL\n         MVC   &ETEND,MASK1         LOAD MASK FOR ED INSTRUCTION\n         ED    &ETEND.(6),PACKED3   CONVERSION FROM PACKED TO DECIMAL\n         MEND\n*-----------------------------------------*\n* THIS MACRO INVOKES ISPLINK INTERFACE    *\n*-----------------------------------------*\n         MACRO\n&LABEL   ISPEXEC   &FONC\n.*\n.* 1ST  PARAMETER IS NAME OF SERVICE TO BE INVOKED\n.*      OTHERS ARE PARAMETERS TO BE PASSED TO IT\n.*\n         LCLA  &NBR\n         LCLA  &N\n         LCLC  &ADRE\n&LABEL   DS   0H\n&NBR     SETA  N'&SYSLIST\n         CNOP 0,4\n         BAL  1,ISPX&SYSNDX              ADRESSABILITY OF PARAMETERS\n         AIF (&NBR GT 1).PARM2\n.*\n.* ONLY 1 PARAMETER : FUNCTION NAME\n.*\n         DC   B'10000000'\n         DC   AL3(FCTI&SYSNDX)\n         AGO .APPEL\n.*\n.* MORE THAN 1 PARAMETER\n.*\n.PARM2   ANOP\n         DC   A(FCTI&SYSNDX)              1ST PARAMETER : FUNCTION\n&N       SETA  2\n.LOOP    ANOP                            LOOP\n         AIF (&N LT &NBR).CONT\n         DC   X'80',AL3(&SYSLIST(&N))     ADRESSE OF LAST PARAMETER\n         AGO .APPEL\n.CONT    ANOP\n         DC   A(&SYSLIST(&N))             ADRESSE OF PARAMETER\n&N       SETA &N+1\n         AGO  .LOOP\n.*\n.* CALLING ISPEXEC PROCESSOR\n.*\n.APPEL   ANOP\nFCTI&SYSNDX  DC CL8'&FONC'               ISPEXEC FUNCTION NAME\nISPX&SYSNDX  DS  0H\n         L   15,=V(ISPLINK)              LOAD ADDRESS OF ISPLINK\n         BALR  14,15                     CALL ISPLINK\n         MEXIT\n         MEND\n*---------------------------------------------------*\n* THIS MACRO SETS A ZONE TO ALL SPACES              *\n*---------------------------------------------------*\n         MACRO\n&NLA     SPACES  &ZONE\n         MVI   &ZONE,C' '                  FIRST BYTE SET TO SPACE\n         MVC   &ZONE+1(L'&ZONE-1),&ZONE    PROPAGATE TO ALL BYTES\n         MEND\n*\n* DSECTS NEEDED\n*\n        CVT   DSECT=YES\n        IEECUCM\n        IEECDCM\n*======================================================================\n*\n* MVS MASTER CONSOLE SIMULATION UNDER TSO      TESTED UNDER MVS/XA 2.2\n*                                                           MVS/ESA 3.1\n*\n* CONTROL BLOCKS CHAINING TO GET THE IMAGE OF THE MVS MASTER CONSOLE :\n* CVT -> UCM BASE -> UCM PREFIX -> UCME OF MSTCONS -> RDCM -> TDCM\n*\n* NB : RDCM & TDCM ARE IN LSQA OF ADDRESS-SPACE 'CONSOLE'\n*      WE GET THEM BY CROSS-MEMORY INSTRUCTION \"MVCP\"\n*      RDCM & TDCM ARE DESCRIBED IN 'DEBUGGING HANDBOOK, DATA AREAS'\n*\n* BEWARE : WE USE AN \"AUTHORIZATION\" SVC (SVC 235) TO GET AUTHORIZED\n* UNDER TSO/ISPF (BY TURNING 'JSCBAUTH' FLAG)\n*\n*======================================================================\nR0  EQU 0\nR1  EQU 1\nR2  EQU 2\nR3  EQU 3\nR4  EQU 4\nR5  EQU 5\nR6  EQU 6\nR7  EQU 7\nR8  EQU 8\nR9  EQU 9\nR10 EQU 10\nR11 EQU 11\nR12 EQU 12\nR13 EQU 13\nR14 EQU 14\nR15 EQU 15\nCONSOLE  CSECT\n         SAVE (14,12),,CONSOLE-&SYSDATE-&SYSTIME\n         LR   R12,R15\n         USING CONSOLE,R12       R12 BASE REGISTER\n         ST   R13,SAVE+4         SAVE OLD R13\n         LA   R13,SAVE           R13 POINTS TO OUR SAVE AREA\n* FIND THE TSO/ISPF USERID\n         ISPEXEC VDEFINE,LIST0,USERID,CHAR,L7    DEFINE THE ZUSER VAR\n         LTR  R15,R15            CALL TO ISPEXEC SUCCESSFUL ?\n         BNZ  THEEND             NO, PROBABLY WE WERE NOT UNDER ISPF\n         ISPEXEC VGET,LIST0,SHARED               GET USERID NAME\n         ISPEXEC CONTROL,ERRORS,RETURN           DON'T STOP IF ERRORS\n* DEFINE ALL THE ISPF VARIABLES\n         ISPEXEC VDEFINE,LISTVAR,SCREEN,CHAR,L80\n* ACCESS TO CVT\n         L    R1,CVTPTR          ADDRESS OF CVT\n         USING CVT,R1            CVT ADDRESSABILITY\n         L    R1,CVTCUCB         POINTS TO UCM BASE\n         DROP R1\n* ACCESS TO UCM BASE\n         USING UCM,R1            UCM BASE ADDRESSABILITY\n         LH   R2,UCMCTID         TAKE ASID OF 'CONSOLE' ADDRESS-SPACE\n         ST   R2,ASID            STORE IN OUR PROGRAM\n         DROP R1\n* ACCESS TO UCM PREFIX\n         SH   R1,=H'4'           4 BYTES BACK\n         L    R1,0(R1)           TO TAKE ADDRESS OF THE UCM MCS PREFIX\n         L    R1,0(R1)           AND OF UCM MASTERCONS (UCMMCENT)\n* ACCESS TO UCME OF MASTER CONSOLE (\"UCM INDIVIDUAL DEVICE ENTRY MAP\")\n         USING UCMECB,R1\n         L    R4,UCMXB           TAKE RDCM ADDRESS\n         DROP R1\n* ACCESS TO RDCM IN \"CONSOLE\" ADDRESS-SPACE\n         BAL  R10,CROSS1         SET CROSS-MEMORY LINKAGE\n         XR   R2,R2              R2 = 0\n         LA   R2,4               4 BYTES TO MOVE\n         XR   R1,R1              R1 = 0\n         MVCP ADDRTDCM(R2),0(R4),R1     TAKE ADDRESS OF TDCM\n         BAL  R10,CROSS2         DELETE CROSS-MEMORY LINKAGE\n         B    GOON\n* DISPLAY ISPF PANEL\nLOOPPAN  DS   0H\n         ISPEXEC DISPLAY,PANEL   DISPLAY ISPF PANEL SHOWING CONSOLE\n         LTR  R15,R15            PFK3 OR OTHER\n         BNZ  THEEND             THEN TERMINATE\n* SET SCREEN ZONE TO ALL SPACES\n         LA   R8,SCREEN\n         LA   R9,1600            20 LINES X 80 CHARACTERS\n         XR   R0,R0\n         XR   R1,R1\n         IC   R1,=C' '           FILL TO ALL SPACES\n         SLL  R1,24              SHIFT 24 BITS LEFT\n         MVCL R8,R0              FILL TO SPACES\n* RE-DISPLAY LAST USER COMMAND (THE 4 LAST COMMANDS ARE KEPT IN MEMORY)\n         CLC  =X'5040',CMDUSER   '&'  RE-DISPLAY LAST COMMAND ?\n         BNE  NORAP0\n         MVC  CMDUSER,OLDCMD\n         B    GOON\nNORAP0   CLC  =X'50F1',CMDUSER   '&1' RE-DISPLAY COMMAND -1\n         BNE  NORAP1\n         MVC  CMDUSER,OLDCMD1\n         B    GOON\nNORAP1   CLC  =X'50F2',CMDUSER   '&2' RE-DISPLAY COMMAND -2\n         BNE  NORAP2\n         MVC  CMDUSER,OLDCMD2\n         B    GOON\nNORAP2   CLC  =X'50F3',CMDUSER   '&3' RE-DISPLAY COMMAND -3\n         BNE  TRAITCMD\n         MVC  CMDUSER,OLDCMD3\n         B    GOON\n* MANAGE USER COMMAND\nTRAITCMD DS   0H\n         CLI  CMDUSER,X'00'      IF 1ST CHARACTER OF USER COMMAND ZONE\n         BE   GOON\n         CLI  CMDUSER,C' '       IS BINARY ZERO, OR SPACE, OR '*'\n         BE   GOON\n         CLI  CMDUSER,C'*'       THEN, WE DON'T TAKE IT INTO ACCOUNT\n         BE   GOON\n* CONTROLLING THE COMMAND\n         CLI  CMDUSER,C'Z'       WE DON'T PERMIT 'HALT' COMMANDS\n         BE   REFUSE\n         CLC  =C'HALT ',CMDUSER\n         BE   REFUSE\n* CONTROLLING USERID AUTHORITY TO ISSUE MVS COMMANDS : EXAMPLE\n*        CLC  =C'SY',USERID          ONLY SYSTEMS GROUP USERS PERMITTED\n*        BE   PERMITTD\n*        B    REFUSE                 OTHER USERS MAY NOT ISSUE COMMANDS\n* KEEP TRACK OF OLD COMMANDS ENTERED BY THE USER\nPERMITTD DS   0H\n         MVC  OLDCMD3,OLDCMD2        KEEP IN MEMORY PREVIOUS COMMANDS\n         MVC  OLDCMD2,OLDCMD1        KEEP IN MEMORY PREVIOUS COMMANDS\n         MVC  OLDCMD1,OLDCMD         KEEP IN MEMORY PREVIOUS COMMANDS\n         MVC  OLDCMD,CMDUSER         KEEP IN MEMORY LAST COMMAND\n         CLC  =C'WTO',CMDUSER        WTO COMMAND ENTERED ?\n         BNE  NORMAL\n* SEND A HIGH INTENSITY MESSAGE TO THE OPERATOR CONSOLE\n         MVC  WTO2M+8(75),CMDUSER+5  OVERLAYING WTO CODE WITH THE MSG\nWTO2M    WTO  '                                                        *\n                                                            ',DESC=(11)\n         SPACES CMDUSER\n         B    GOON\n* ISSUE THE MVS COMMAND\nNORMAL   DS   0H\n         LA   R0,1              AUTHORIZE MY TSO SESSION\n         SVC  235               CALL AUTHORIZATION SVC\n         MODESET KEY=ZERO,MODE=SUP   GET INTO KEY 0, SUPERVISOR MODE\n         LA   R1,MGCRPARM       ADDRESSING SVC PARAMETERS\n         XR   R0,R0             R0 = 0\n         MVC  CMDUSER2,CMDUSER  MOVE MVS COMMAND\n         MGCR MGCRPARM          CALL SVC 34 TO ADD COMMAND IN QUEUE\n         MODESET KEY=NZERO,MODE=PROB  RETURN INTO KEY 8, PROBLEM MODE\n         XR   R0,R0             RESET AUTHORIZATION\n         SVC  235               CALL AUTHORIZATION SVC\n         SPACES CMDUSER\n         B    GOON\nREFUSE   MVC  CMDUSER,PROHIBE\n*-----------------------------------------------------*\n* ROUTINELY EXECUTED CODE ON EVERY \"ENTER\"            *\n* TO GET THE IMAGE OF THE MVS MASTER CONSOLE          *\n*-----------------------------------------------------*\nGOON     DS   0H\n* GET % CPU UTILIZATION FROM \"CCT\" CONTROL BLOCK\n* SET ADDRESSING MODE TO 31 BITS (SOME BLOCKS ARE ABOVE THE LINE)\n         L    R1,AMODE31A\n         BSM  0,R1             GET INTO 31-BITS ADDRESSING MODE\nAMODE31A DC   A(AMODE31B+X'80000000')\nAMODE31B DS   0H\n         L    R1,CVTPTR        LOAD CVT ADDRESS\n         USING CVT,R1\n         L    R1,CVTOPCTP      LOAD RMCT (SRM CONTROL TABLE) ADDRESS\n         DROP R1\n         L    R1,4(R1)         LOAD CPU CONTROL TABLE (CCT) ADDRESS\n         MVC  CPUUSE,102(R1)   MOVE CPU UTILIZATION\n* SET ADDRESSING MODE BACK TO 24 BITS\n         LA   R1,AMODE24\n         BSM  0,R1\nAMODE24  DS   0H\n         EXTEND CPUUSE,CPUUTIL\n* ACCESS TO TDCM IN CONSOLE ADDRESS-SPACE\n         BAL  R10,CROSS1        CREATE CROSS-MEMORY LINK\n         L    R5,ADDRTDCM       TDCM ADDRESS IN CONSOLE ADDRESS-SPACE\n* GET IN 'TDCM' BLOCK ALL THE LINES DISPLAYED UPON CONSOLE\n         LA   R2,4              AN ADDRESS IS ALWAYS 4 BYTES LONG\n         XR   R1,R1\n         MVCP ADDR2(R2),X'34'(R5),R1      COPY ADDRESS OF LAST LINE\n         LA   R2,4              AN ADDRESS IS ALWAYS 4 BYTES LONG\n         XR   R1,R1             R1 = 0\n         MVCP ADDR1(R2),X'30'(R5),R1      COPY ADDRESS OF 1ST LINE\n         LA   R2,2              HALFWORD TO BE COPIED\n         XR   R1,R1             R1 = 0\n         MVCP LINELEN(R2),X'104'(R5),R1   COPY LENGTH OF 1 LINE\n* LOOP TO GET OTHER LINES OF DISPLAY CONSOLE\n         LA   R8,SCREEN         BEGINNING OF SCREEN ON ISPF PANEL\n         LA   R7,20             20 LINES TO BE SET\n         L    R6,ADDR1          ADDRESS OF 1ST LINE OF SCREEN\n         SH   R6,LINELEN        GET BACK IN THE BUFFER\n         SH   R8,=H'80'         GET BACK IN MY ISPF SCREEN\nLOOPLINE DS   0H\n         AH   R6,LINELEN        GET FORWARD IN THE BUFFER\n         LA   R8,80(0,R8)       GET FORWARD IN MY SCREEN\n         LA   R2,80             LINE WITH 80 CHARACTERS\n         XR   R1,R1             R1 = 0\n         C    R6,ADDR2          END LINE PASSED ?\n         BH   ENDCONSL          YES, ALL LINES COPIED\n         MVCP 0(R2,R8),4(R6),R1 COPY ONE LINE OF DATA\n         BCT  R7,LOOPLINE       LOOP TO GET REMAINING LINES\n* GET LAST COMMAND ISSUED BY THE CONSOLE OPERATOR\nENDCONSL DS   0H\n         LA   R2,128            LENGTH OF COMMAND\n         XR   R1,R1             R1 = 0\n         MVCP LASTCMD(R2),640(R5),R1    COPY LAST ISSUED COMMAND\n* BOTTOM LINE OF CONSOLE DISPLAY       (IEE163I MODE = RD ...)\n         LA   R2,4              AN ADDRESS IS ALWAYS 4 BYTES LONG\n         XR   R1,R1             R1 = 0\n         MVCP ADDR3(R2),X'210'(R5),R1    COPY ADDRESS OF BOTTOM LINE\n         LA   R2,80             LENGTH OF LINE\n         XR   R1,R1             R1 = 0\n         L    R7,ADDR3\n         MVCP LINE0000(R2),0(R7),R1    COPY LAST LINE\n         BAL  R10,CROSS2        DELETE CROSS-MEMORY LINKAGE\n* INSERT % CPU UTILIZATION IN BOTTOM LINE\n         MVC  LINE0000+70(3),CPUUTIL+3     CPU UTILIZATION\n         MVC  LINE0000+73(6),=C' % CPU'    '% CPU'\n         B    LOOPPAN\n*\nTHEEND   L       R13,4(R13)\n         RETURN  (14,12),T,RC=0\n*-----------------------------------------------------------*\n* CROSS-MEMORY ROUTINE 1 :                                  *\n* ESTABLISH CROSS-MEMORY LINK WITH \"CONSOLE\" ADDRESS-SPACE  *\n*-----------------------------------------------------------*\nCROSS1   DS    0H\n         LA    R0,1              AUTHORIZE MY TSO SESSION\n         SVC   235               CALL AUTHORIZATION SVC\n         MODESET KEY=ZERO,MODE=SUP   GET INTO KEY 0, SUPERVISOR MODE\n         XR    R2,R2\n         ESAR  R2                OBTAIN OUR ASID\n         ST    R2,MYASID         KEEP IT\n         LA    R2,1\n         AXSET AX=(R2)           ADDRESS-SPACE AUTORISATION\n         L     R2,ASID\n         SSAR  R2                ESTABLISH A SECONDARY ADDRESS-SPACE\n         BR    R10\n*--------------------------*\n* CROSS-MEMORY ROUTINE 2 : *\n* DELETE CROSS-MEMORY LINK *\n*--------------------------*\nCROSS2   L     R2,MYASID\n         SSAR  R2\n         XR    R2,R2\n         AXSET AX=(R2)           ADDRESS-SPACE AUTORISATION\n         MODESET KEY=NZERO,MODE=PROB  RETURN INTO KEY 8, PROBLEM MODE\n         XR    R0,R0             RESET AUTHORIZATION\n         SVC   235               CALL AUTHORIZATION SVC\n         BR    R10\n*\nUSERID   DC   CL7'USERID'        TSO/ISPF USERID\nCPUUSE   DC   H'0'               % CPU UTILIZATION\nLINELEN  DC   H'0'               LONGUEUR LIGNE SCREEN\nASID     DC   F'0'               ASID OF \"CONSOLE\" ADDRESS-SPACE\nMYASID   DC   F'0'               ASID NUMBER OF OUR ADDRESS-SPACE\nADDRTDCM DC   F'0'               ADDRESS OF TDCM\nADDR1    DC   F'0'               ADDRESS OF FIRST LINE OF SCREEN\nADDR2    DC   F'0'               ADDRESS OF LAST LINE OF SCREEN\nADDR3    DC   F'0'               ADDRESS OF BOTTOM LINE (MODE=RD)\nSHARED   DC   CL8'SHARED'        ISPF KEYWORD\nCHAR     DC   CL8'CHAR'          ISPF KEYWORD\nDISPLAY  DC   CL8'DISPLAY'       ISPF KEYWORD\nRETURN   DC   CL8'RETURN'        ISPF KEYWORD\nERRORS   DC   CL8'ERRORS'        ISPF KEYWORD\nOLDCMD3  DC   CL80' ** COMMAND NOT FOUND **'\nOLDCMD2  DC   CL80' ** COMMAND NOT FOUND **'\nOLDCMD1  DC   CL80' ** COMMAND NOT FOUND **'\nOLDCMD   DC   CL80' ** LAST COMMAND NOT FOUND **'\nPROHIBE DC    CL80' ** YOU CANNOT ISSUE THIS MVS COMMAND **'\n*\nMGCRPARM DS   0F                 PARAMETERS FOR MGCR\n         DC   H'80'              COMMAND 80 CHARACTERS LONG\n         DC   H'00'              FLAGS\nCMDUSER2 DS   CL80               MVS COMMAND\nL80      DC   F'80'\nL7       DC   F'7'\nPANEL    DC   CL8'CONSOLE'       NAME OF ISPF PANEL SIMULATING CONSOLE\n* ISPF VARIABLE NAMES\nLIST0    DC   C'(ZUSER) '\nLISTVAR  DC   C'(CNSL1 CNSL2 CNSL3 CNSL4 CNSL5 CNSL6 CNSL7 CNSL8       *\n               CNSL9 CNSL10 CNSL11 CNSL12 CNSL13 CNSL14 CNSL15         *\n               CNSL16 CNSL17 CNSL18 CNSL19 CNSL20 CNSL00 CNSLCM        *\n               CNSLCMD)  '\nSAVE     DS   18F                SAVE AREA\n* WORK ZONES FOR 'EXTEND' MACRO\nMASK1    DC   X'402020202020'    MASK FOR PACKED LENGTH 3\nDBLEWORD DS   D                  DOUBLE WORD FOR INSTRUCTION CVD\n         ORG  DBLEWORD+5\nPACKED3  DS   PL3\n         LTORG\n* FOLLOWING ARE ISPF DATA MAPPING 'LISTVAR' VARIABLES,\n* DO NOT CHANGE THE ORDER\nSCREEN   DS   CL1600             20 LINES X 80 CHARACTERS\nLINE0000 DS   CL80               SCREEN BOTTOM LINE\nCMDUSER  DS   CL80               MVS COMMAND\n         ORG  CMDUSER            DEFAULT DISPLAY WHEN FIRST ACCESS\n         DC   C' ** ENTER A MVS/JES2 COMMAND OR ',X'50',C' TO RECALL TH*\n               E LAST ONE'\n         ORG\nLASTCMDD DS   0CL80\nLASTCMD  DS   CL128              LAST COMMAND ISSUED BY THE OPERATOR\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CONSOLEP": {"ttr": 1548, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x991_\\x00\\x991_\\x11P\\x00!\\x00!\\x00\\x00\\xe3\\xc8\\xc9\\xc5\\xd9\\xd9\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-11-11T00:00:00", "modifydate": "1999-11-11T11:50:00", "lines": 33, "newlines": 33, "modlines": 0, "user": "THIERRY"}, "text": ")ATTR DEFAULT(%+_)\n  /  TYPE(TEXT)  INTENS(HIGH)  COLOR(YELLOW)\n  !  TYPE(TEXT)  INTENS(LOW)   COLOR(PINK)\n  |  TYPE(TEXT)  INTENS(LOW)   COLOR(BLUE)  HILITE(USCORE)\n  \u00a2  TYPE(TEXT)  INTENS(LOW)   COLOR(GREEN) HILITE(BLINK)\n)BODY\n/&ZUSER +-----------% M V S   M a s t e r    C o n s o l e  +----/&ZJDATE &ZTIME\n+ &CNSL1                                                                    +\n+ &CNSL2                                                                    +\n+ &CNSL3                                                                    +\n+ &CNSL4                                                                    +\n+ &CNSL5                                                                    +\n+ &CNSL6                                                                    +\n+ &CNSL7                                                                    +\n+ &CNSL8                                                                    +\n+ &CNSL9                                                                    +\n+ &CNSL10                                                                   +\n+ &CNSL11                                                                   +\n+ &CNSL12                                                                   +\n+ &CNSL13                                                                   +\n+ &CNSL14                                                                   +\n+ &CNSL15                                                                   +\n+ &CNSL16                                                                   +\n+ &CNSL17                                                                   +\n+ &CNSL18                                                                   +\n+ &CNSL19                                                                   +\n| &CNSL20                                                                   +\n+ LAST COMMAND :!&CNSLCMD\n\u00a2>_CNSLCM                                                                      <\n/&CNSL00\n)INIT\n)PROC\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CONVERT": {"ttr": 1794, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x991_\\x00\\x991_\\x11P\\x00\\xe7\\x00\\xe7\\x00\\x00\\xe3\\xc8\\xc9\\xc5\\xd9\\xd9\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-11-11T00:00:00", "modifydate": "1999-11-11T11:50:00", "lines": 231, "newlines": 231, "modlines": 0, "user": "THIERRY"}, "text": "         MACRO\n&NLA     CONVERT  &FROMP=,&FROMZ=,&FROMB=,                             X\n               &TOP=,&TOZ=,&TOB=,&RENT=NO,                             X\n               &FROMLEN=,&TOLEN=,&WORKREG=0,                           X\n               &LZERO=ZERO\n.*\n.* FROMP= ZONE PACKEE ORIGINE, A CONVERTIR        *\n.* FROMZ= ZONE DEC ZONEE ORIGINE, A CONVERTIR     * MUTUELMT EXCLUSIFS\n.* FROMB= ZONE BINAIRE ORIGINE, A CONVERTIR       *\n.* TOP=   ZONE PACKEE RECEPTRICE             *\n.* TOZ=   ZONE DEC ZONEE RECEPTRICE          * MUTUELLEMENT EXCLUSIFS\n.* TOB=   ZONE BINAIRE RECEPTRICE            *\n.*\n.*        LES PARAMETRES QUI SUIVENT SONT FACULTATIFS :\n.* FROMLEN= LONGUEUR ZONE ORIGINE\n.* TOLEN=   LONGUEUR ZONE DESTINATION RECEPTRICE\n.* WORKREG= REGISTRE DE TRAVAIL\n.* LZERO=   ZERO OU BLANK SELON QUE RESULTAT DECIMAL ZONE AVEC ZEROS OU\n.*          BLANCS EN-TETE (UNIQUEMENT SI PARAMETRE TOZ UTILISE)\n.* RENT=    NO OU YES SELON QUE ZONES DE TRAVAIL CREEES OU FOURNIES\n.*        SI REENTRANCE SOUHAITEE, CREER UNE DSECT CONTENANT LES ZONES:\n.*                    MSKPZTMP    DS    CL16 (INSTRUCTION ED)\n.*                    DBLEWRK$    DS    D    (CVB ET CVD)\n.*\n.*\n.* LIMITATIONS : ZONES BINAIRES<=4C    PACKEES<=8C     DEC ZONEES<=16C\n.*\n.*\n.*\n&NLA     DS    0H\n         LCLC  &FL,&TL       LONGUEUR FROM ET TO\n.*\n.* OBTENIR LONGUEURS ZONES : ZONE ORIGINE\n.*\n         AIF   ('&FROMLEN' NE '').NOFL\n&FL      SETC  'L''&FROMP&FROMZ&FROMB'     LONGUEUR EN OCTETS ZONE\n         AGO   .NOFL2\n.NOFL    ANOP\n&FL      SETC   '&FROMLEN'\n.NOFL2   ANOP\n.*\n.* OBTENIR LONGUEURS ZONES : ZONE DESTINATION\n.*\n         AIF   ('&TOLEN' NE '').NOTL\n&TL      SETC  'L''&TOP&TOZ&TOB'        LONGUEUR EN OCTETS ZONE\n         AGO   .NOTL2\n.NOTL    ANOP\n&TL      SETC   '&TOLEN'\n.NOTL2   ANOP\n.*\n.* CONTROLER QU'IL N'Y AIT PAS TROP DE PARAMETRES FROM INDIQUES\n.*\n         AIF  ('&FROMP' NE '' AND '&FROMZ' NE '').ERR1\n         AIF  ('&FROMP' NE '' AND '&FROMB' NE '').ERR1\n         AIF  ('&FROMZ' NE '' AND '&FROMB' NE '').ERR1\n.*\n.* CONTROLER QU'IL N'Y AIT PAS TROP DE PARAMETRES TO INDIQUES\n.*\n         AIF  ('&TOP' NE '' AND '&TOZ' NE '').ERR2\n         AIF  ('&TOP' NE '' AND '&TOB' NE '').ERR2\n         AIF  ('&TOZ' NE '' AND '&TOB' NE '').ERR2\n.*\n.* CONTROLER COHERENCE FROM ET TO\n.*\n         AIF  ('&FROMP' NE '' AND '&TOP' NE '').ERR4\n         AIF  ('&FROMZ' NE '' AND '&TOZ' NE '').ERR4\n         AIF  ('&FROMB' NE '' AND '&TOB' NE '').ERR4\n.*\n.* CONTROLER VALEUR DE &LZERO\n.*\n         AIF  ('&LZERO' NE 'ZERO' AND '&LZERO' NE 'BLANK').ERR3\n.*\n.* CONTROLER VALEUR DE &RENT\n.*\n         AIF  ('&RENT' NE 'YES' AND '&RENT' NE 'NO').ERR5\n.*--------------------------------------------------------------*\n.* FROMP TOZ      PACKE 8C -> DECIMAL ZONE 16C                  *\n.*--------------------------------------------------------------*\n         AIF  ('&FROMP' EQ '' OR '&TOZ' EQ '').NOTPZ\n         AIF  ('&LZERO' EQ 'BLANK').PZ001\n         UNPK  &TOZ.(&TL),&FROMP.(&FL)      UNPACK PACKED DATA\n         OI    &TOZ+&TL-1,X'F0'             SIGN TO BE NORMALIZED\n         AGO   .PZ002\n.PZ001   ANOP\n         MNOTE '         ** LEADING ZEROES WILL BECOME BLANKS **'\n         AIF   (T'MSKPZ010 NE 'U').MSKDEF\n         B     DFMK&SYSNDX\nMSKPZ010 DC    X'40202020202020202020202020202020'   MASK FOR ED INSTR.\n         AIF   ('&RENT' EQ 'YES').RENT1\nMSKPZTMP DC    CL16' '     TEMPORARY ZONE FOR ED INSTRUCTION\n.RENT1   ANOP\nDFMK&SYSNDX  DS  0H\n.MSKDEF  ANOP\n         MVC   MSKPZTMP,MSKPZ010           MOVE MASK FOR ED INSTRUCTION\n         ED    MSKPZTMP(&FL+&FL),&FROMP     UNPACK BY EDIT\n     MNOTE '         ** BEWARE, &TOZ MUST BE DOUBLE-LENGTH OF &FROMP'\n         MVC   &TOZ.(&TL),MSKPZTMP         MOVE RESULT IN \"TO\" ZONE\n.PZ002   ANOP\n         AGO   .END\n.*\n.NOTPZ   ANOP\n.*--------------------------------------------------------------*\n.* FROMP TOB      PACKE <=8C -> BINAIRE <= 4C                   *\n.*--------------------------------------------------------------*\n         AIF  ('&FROMP' EQ '' OR '&TOB' EQ '').NOTPB\n         AIF   ('&RENT' EQ 'YES').RENT2\n         AIF   (T'DBLEWRK$ NE 'U').DBLDEF\n         B     DFTM&SYSNDX\nDBLEWRK$ DC    D'0'        TEMPORARY ZONE FOR CVB/CVD\nDFTM&SYSNDX  DS  0H\n.DBLDEF  ANOP\n.RENT2   ANOP\n         XC    DBLEWRK$,DBLEWRK$           SET TEMP DOUBLE-WORD TO 0\n         MVC   DBLEWRK$+8-&FL.(&FL),&FROMP  MOVE FROM ZONE (PACKED)\n         MNOTE '         ** WORK REGISTER IS NUMBER &WORKREG **'\n         CVB   &WORKREG,DBLEWRK$           CONVERT TO BINARY\n         ST    &WORKREG,DBLEWRK$           STORE RESULT IN 1ST WORD\n         XC    &TOB.(&TL),&TOB             DESTINATION ZONE SET TO 0\n         MVC   &TOB.(&TL),DBLEWRK$+4-&TL   MOVE RESULT\n         AGO   .END\n.NOTPB   ANOP\n.*--------------------------------------------------------------*\n.* FROMZ TOP      ZONE 16C   -> PACKE  8C                       *\n.*--------------------------------------------------------------*\n         AIF  ('&FROMZ' EQ '' OR '&TOP' EQ '').NOTZP\n         AIF   ('&RENT' EQ 'YES').RENT3\n         AIF   (T'DBLEWRK$ NE 'U').DBLDEF2\n         B     DFTM&SYSNDX\nDBLEWRK$ DC    D'0'        TEMPORARY ZONE FOR CVB/CVD\nDFTM&SYSNDX  DS  0H\n.DBLDEF2 ANOP\n.RENT3   ANOP\n         PACK  DBLEWRK$(8),&FROMZ.(&FL)    PACK INTO DOUBLE-WORD\n         ZAP   &TOP.(&TL),DBLEWRK$(8)      MOVE TO ZONE (PACKED)\n         AGO   .END\n.NOTZP   ANOP\n.*--------------------------------------------------------------*\n.* FROMZ TOB      ZONE 16C   -> BINAIRE 4C                      *\n.*--------------------------------------------------------------*\n         AIF  ('&FROMZ' EQ '' OR '&TOB' EQ '').NOTZB\n         AIF   ('&RENT' EQ 'YES').RENT4\n         AIF   (T'DBLEWRK$ NE 'U').DBLDEF3\n         B     DFTM&SYSNDX\nDBLEWRK$ DC    D'0'        TEMPORARY ZONE FOR CVB/CVD\nDFTM&SYSNDX  DS  0H\n.DBLDEF3 ANOP\n.RENT4   ANOP\n         PACK  DBLEWRK$(8),&FROMZ.(&FL)    PACK INTO DOUBLE-WORD\n         MNOTE '         ** WORK REGISTER IS NUMBER &WORKREG **'\n         CVB   &WORKREG,DBLEWRK$           CONVERT TO BINARY\n         ST    &WORKREG,DBLEWRK$           STORE RESULT IN 1ST WORD\n         XC    &TOB.(&TL),&TOB             DESTINATION ZONE SET TO 0\n         MVC   &TOB.(&TL),DBLEWRK$+4-&TL   MOVE RESULT\n         AGO   .END\n.NOTZB   ANOP\n.*--------------------------------------------------------------*\n.* FROMB TOP      BINAIRE 4C   -> PACKE 8C\n.*--------------------------------------------------------------*\n         AIF  ('&FROMB' EQ '' OR '&TOP' EQ '').NOTBP\n         AIF   ('&RENT' EQ 'YES').RENT5\n         AIF   (T'DBLEWRK$ NE 'U').DBLDEF4\n         B     DFTM&SYSNDX\nDBLEWRK$ DC    D'0'        TEMPORARY ZONE FOR CVB/CVD\nDFTM&SYSNDX  DS  0H\n.RENT5   ANOP\n.DBLDEF4 ANOP\n         XC    DBLEWRK$,DBLEWRK$           RESET TO BINARY ZEROES\n         MVC   DBLEWRK$+4-&FL.(&FL),&FROMB MOVE BINARY ZONE IN WORK\n         MNOTE '         ** WORK REGISTER IS NUMBER &WORKREG **'\n         ICM   &WORKREG,15,DBLEWRK$        LOAD BINARY NUMBER IN REG\n         CVD   &WORKREG,DBLEWRK$           CONVERT TO PACKED\n         ZAP   &TOP,DBLEWRK$               MOVE RESULT\n         AGO   .END\n.NOTBP   ANOP\n.*--------------------------------------------------------------*\n.* FROMB TOZ      BINAIRE 4C   -> ZONE 16C\n.*--------------------------------------------------------------*\n         AIF  ('&FROMB' EQ '' OR '&TOZ' EQ '').NOTBZ\n         AIF   ('&RENT' EQ 'YES').RENT6\n         AIF   (T'DBLEWRK$ NE 'U').DBLDEF5\n         B     DFTM&SYSNDX\nDBLEWRK$ DC    D'0'        TEMPORARY ZONE FOR CVB/CVD\nDFTM&SYSNDX  DS  0H\n.RENT6   ANOP\n.DBLDEF5 ANOP\n         XC    DBLEWRK$,DBLEWRK$           RESET TO BINARY ZEROES\n         MVC   DBLEWRK$+4-&FL.(&FL),&FROMB MOVE BINARY ZONE IN WORK\n         MNOTE '         ** WORK REGISTER IS NUMBER &WORKREG **'\n         ICM   &WORKREG,15,DBLEWRK$        LOAD BINARY NUMBER IN REG\n         CVD   &WORKREG,DBLEWRK$           CONVERT TO PACKED\n.*\n         AIF  ('&LZERO' EQ 'BLANK').BZ001\n         UNPK  &TOZ.(&TL),DBLEWRK$         UNPACK PACKED DATA\n         OI    &TOZ+&TL-1,X'F0'            SIGN TO BE NORMALIZED\n         AGO   .BZ002\n.BZ001   ANOP\n         MNOTE '         ** LEADING ZEROES WILL BECOME BLANKS **'\n         AIF   (T'MSKPZ010 NE 'U').MSKDEF2\n         B     DFMK&SYSNDX\nMSKPZ010 DC    X'40202020202020202020202020202020'   MASK FOR ED INSTR.\n         AIF   ('&RENT' EQ 'YES').RENT7\nMSKPZTMP DC    CL16' '     TEMPORARY ZONE FOR ED INSTRUCTION\n.RENT7   ANOP\nDFMK&SYSNDX  DS  0H\n.MSKDEF2 ANOP\n         MVC   MSKPZTMP,MSKPZ010           MOVE MASK FOR ED INSTRUCTION\n         ED    MSKPZTMP,DBLEWRK$           UNPACK BY EDIT\n         MVC   &TOZ.(&TL),MSKPZTMP+16-&TL  MOVE RESULT IN \"TO\" ZONE\n.BZ002   ANOP\n         AGO   .END\n.NOTBZ   ANOP\n         MNOTE 8,'** NOT ENOUGH PARAMETERS, NO CODE GENERATED **'\n.*\n.END     ANOP\n.* NORMAL END OF MACRO\n         MEXIT\n.*\n.*--------------------------------------------------------------*\n.* ERREURS\n.*--------------------------------------------------------------*\nERR1     MNOTE 8,'** TOO MANY FROM= PARAMETERS'\n         MEXIT\nERR2     MNOTE 8,'** TOO MANY TO= PARAMETERS'\n         MEXIT\nERR3     MNOTE 8,'** LZERO=&LZERO INCORRECT, MUST BE ZERO OR BLANK'\n         MEXIT\nERR4     MNOTE 8,'** UNABLE TO CONVERT FROM A FORMAT TO SAME FORMAT |'\n         MEXIT\nERR5     MNOTE 8,'** RENT=&RENT INCORRECT, MUST BE YES OR NO'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CONVRTP": {"ttr": 1799, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x991_\\x00\\x991_\\x11P\\x00\\xbb\\x00\\xbb\\x00\\x00\\xe3\\xc8\\xc9\\xc5\\xd9\\xd9\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-11-11T00:00:00", "modifydate": "1999-11-11T11:50:00", "lines": 187, "newlines": 187, "modlines": 0, "user": "THIERRY"}, "text": "  /* REXX                                                          */\n  /*                                                               */\n  /*  *--------------------------------------------------------*   */\n  /*  * CONVERSION DES ENTREES CATALOGUE 3480 3480X EN 3490    *   */\n  /*  * (NECESSAIRE POUR PASSAGE EN 7490E OU 3490E)            *   */\n  /*  *--------------------------------------------------------*   */\n  /*                                                               */\n  /*     CARTES DD NECESSAIRES POUR EXEC BATCH DE CET EXEC REXX :  */\n  /*                                                               */\n  /* //LISTCAT  RESULTAT D'UN LISTCAT BATCH NONVSAM    : INPUT     */\n  /* //OLDDEF   PRODUIT LES DEFINE NONVSAM 3480 (IDEM) : OUTPUT    */\n  /* //NEWDEF   PRODUIT LES DEFINE NONVSAM 3490        : OUTPUT    */\n  /*                                                               */\n  /*     VOIR L'EXEMPLE DE JCL QUI SE TROUVE A LA FIN              */\n  /*                                                               */\n  /* LIMITE MAXIMALE DU NOMBRE DE VOLSERS PAR FICHIERS : CF LIMV   */\n  /*                                                               */\n\n  /*                                                               */\n  /*    P A R A M E T R E S    (M O D I F I A B L E S)             */\n  /*                                                               */\n  LIMV = 17    /* PAS PLUS DE 17 VOLUMES POUR 1 FICHIER CASSETTE   */\n  OWNER = '7490E'      /* POUR REPERER LES ENTREES CONVERTIES      */\n\n  'EXECIO * DISKR LISTCAT (STEM REC. FINIS'\n\n  /* ETABLIR LA BORNE DROITE DES ORDRES IDCAMS */\n  RIGHT = LIMV*7 + 9\n  SAY '** LES FICHIERS OLDDEF ET NEWDEF DEVRAIENT AVOIR UN LRECL >' ,\n      1+RIGHT\n\n  /*                        */\n  /* SUPPRIMER LE CODE SAUT */\n  /*                        */\n  ARG OPT\n  I = 1\n  DO WHILE I \\> REC.0\n     L = LENGTH(REC.I)\n     IF L > 1 THEN REC.I = SUBSTR(REC.I,2,L-1)   /* DEL CODE SAUT */\n     I = I+1\n     END\n  BLANC24 =     '                        '\n  TIRET24 =     '------------------------'\n  TOT = 0\n  TOTLU = 0\n  TOTMI = 0\n  NBERR = 0\n  I = 0\n  DS = ''\n  NN = 1\n  OLD.1 = '  PARM MARGINS(2 '||RIGHT||') '\n  NEW.1 = OLD.1\n\n  DO WHILE I  <  REC.0\n  I  = I  + 1\n  IF WORDS(REC.I) = 0 THEN ITERATE\n  IF WORD(REC.I,1) = 'NONVSAM'         THEN DO   /* NOUVEAU FICHIER */\n\n        /* TRAITER FICH PRECEDENT */\n          IF N > 0 & DS \\= '' THEN DO\n          NN = NN+1\n          TOT = TOT+1\n          OLD.NN = '   DELETE  ' DS '  NSCR'\n          NEW.NN = OLD.NN\n          NN = NN+1\n          OLD.NN = '   DEF NVSAM ( NAME (' DS ') -'\n          NEW.NN = OLD.NN\n          K = 1\n          VOLUMES = ''\n          DEVT    = ''\n          DEVTO   = ''\n          FSEQN   = ''\n          IF N > LIMV THEN DO\n             SAY 'CONVRTP - ** ERREUR : PLUS DE' LIMV 'VOLUMES POUR' DS\n                  Z = LIMV\n                  DO WHILE Z < N\n                  Z=Z+1\n                  SAY 'CONVRTP -**           VOLUME IGNORE : ' V.Z\n                  END\n             NBERR = NBERR + 1\n             N = LIMV   /* FORCER A LA LIMITE */\n             END\n          DO WHILE K \\> N\n             VOLUMES = VOLUMES V.K\n             DEVT    = DEVT    '3490'\n             DEVTO   = DEVTO   D.K\n          /* CONTROLE DU FSEQN : VALEUR 0 NON SUPPORTEE PAR IDCAMS */\n             IF F.K = 0 THEN DO\n                SAY '** FSEQN = 0 NON SUPPORTE POUR' DS ', CHANGE EN 1'\n                F.K = 1\n                END\n             FSEQN   = FSEQN   F.K\n             K = K+1\n             END\n          NN = NN+1\n          OLD.NN = ' VOL('||VOLUMES||') -'\n          NEW.NN = OLD.NN\n          NN = NN+1\n          OLD.NN = ' DEVT    ('  DEVTO   ') -'\n          NEW.NN = ' DEVT    ('  DEVT    ') -'\n                  IF OWNER \\= '' THEN DO\n                  NN = NN+1\n                  OLD.NN = ' OWNER   ('  OWNER   ') -'\n                  NEW.NN = OLD.NN\n                  END\n          NN = NN+1\n          OLD.NN = ' FSEQN   ('  FSEQN   '))'\n          NEW.NN = OLD.NN\n          END\n        /* FIN TRAITEMENT FICHIER PRECEDENT */\n\n        IF  WORD(REC.I,3) = '' THEN ITERATE /* STATS FINAL LISTC*/\n        TOTLU = TOTLU+1\n\n        DS = WORD(REC.I,3)\n        IF OPT = 'DEBUG' THEN SAY DS\n        N = 0                       /* NBRE DE VOLUMES */\n        F = 1\n        END\n\n  IF LENGTH(REC.I) < 6 THEN ITERATE\n\n  IF SUBSTR(WORD(REC.I,1),1,6) = 'VOLSER'  & DS \\= ''  THEN DO\n        N = N+1\n        V  = WORD(REC.I,1)   /*  VOLSER    */\n        D  = WORD(REC.I,2)   /*  DEVTYPE   */\n        F  = WORD(REC.I,3)   /*  FSEQN     */\n        V  = TRANSLATE(V,BLANC24,TIRET24)\n        D  = TRANSLATE(D,BLANC24,TIRET24)\n        F  = TRANSLATE(F,BLANC24,TIRET24)\n        V = WORD(V,2)\n        D = WORD(D,2)\n        IF  D = 'X''78008080''' THEN D = '3480'\n        IF  D = 'X''78048080''' THEN D = '3480X'\n        F = WORD(F,2)\n        IF OPT = 'DEBUG' THEN SAY V D F\n\n        /* NE PAS GARDER LES MIGRATES */\n        IF  V = 'MIGRAT' THEN DO\n             DS = ''\n             TOTMI=TOTMI+1\n             ITERATE\n             END\n\n        /* NE GARDER QUE 3480 ET 3480X */\n        IF  D \\= '3480' & D \\= '3480X' THEN DS = ''\n        ELSE DO\n             V.N = V\n             D.N = D\n             F.N = F\n             END\n     END\n  END\n  'EXECIO * DISKW OLDDEF  (STEM OLD. FINIS'\n  'EXECIO * DISKW NEWDEF  (STEM NEW. FINIS'\n  SAY 'CONVRTP ** ' TOTLU 'FICHIERS AU CATALOGUE'\n  SAY 'CONVRTP ** ' TOTMI 'FICHIERS MIGRES (NON TRAITES)'\n  SAY 'CONVRTP ** ' TOT 'ENTREES CATALOGUES TRAITEES POUR CONVERSION'\n  IF NBERR > 0 THEN ,\n  SAY 'CONVRTP **   DONT' NBERR 'EN ERREUR (PLUS DE' LIMV 'VOLUMES)'\n  EXIT(NBERR)\n  /*                                                               */\n  /*     EXEMPLE DE JCL POUR EXPLOITER CET EXEC REXX :             */\n  /*                                                               */\n  /* //# LISTER LES ENTREES A CONVERTIR                            */\n  /* //LISTCAT EXEC  PGM=IDCAMS                                    */\n  /* //SYSPRINT  DD  DISP=(NEW,CATLG),UNIT=3390,SPACE=(CYL,(4,4)), */\n  /* //  LRECL=125,RECFM=VBA,DSN=SY02.CONVRTP.PRINT                */\n  /* //SYSIN     DD  *                                             */\n  /*      LISTC NVSAM ALL    CAT(CATALOG.MVSICF.VMVS132)           */\n  /*      LISTC NVSAM ALL    CAT(CATALOG.MVSICF.VEXPP01)           */\n  /*      LISTC NVSAM ALL  LVL(KES6)                               */\n  /* //#                                                           */\n  /* //PROCESS EXEC  PGM=IKJEFT01,PARM='%CONVRTP'                  */\n  /* //SYSPROC   DD  DISP=SHR,DSN=SY02.MVS.CLIST                   */\n  /* //LISTCAT   DD  DISP=SHR,DSN=SY02.CONVRTP.PRINT               */\n  /* //OLDDEF    DD  DISP=(NEW,CATLG),UNIT=3390,SPACE=(CYL,(4,4)), */\n  /* //  LRECL=133,RECFM=FB,DSN=SY02.CONVRTP.OLDDEF                */\n  /* //NEWDEF    DD  DISP=(NEW,CATLG),UNIT=3390,SPACE=(CYL,(4,4)), */\n  /* //  LRECL=133,RECFM=FB,DSN=SY02.CONVRTP.NEWDEF                */\n  /* //SYSTSPRT  DD  SYSOUT=*                                      */\n  /* //SYSTSIN   DD  DUMMY                                         */\n  /* //#                                                           */\n  /* //# PASSER LES ORDRES IDCAMS DE CONVERSION                    */\n  /* //CONVERT EXEC  PGM=IDCAMS                                    */\n  /* //SYSPRINT  DD  SYSOUT=*                                      */\n  /* //SYSIN     DD  DISP=SHR,DSN=*.PROCESS.NEWDEF                 */\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ERASETP": {"ttr": 1803, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x991_\\x00\\x991_\\x11P\\x00{\\x00{\\x00\\x00\\xe3\\xc8\\xc9\\xc5\\xd9\\xd9\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-11-11T00:00:00", "modifydate": "1999-11-11T11:50:00", "lines": 123, "newlines": 123, "modlines": 0, "user": "THIERRY"}, "text": "* PROGRAM TO ERASE TAPE DATA.\n*\n* //ERASE    EXEC PGM=ERASETP\n* //STEPLIB  DD DISP=SHR,DSN=MY.LOAD\n* //SYSPRINT DD SYSOUT=*\n* //TAPE     DD DISP=(NEW,KEEP),DSN=TEST.ERASE.WRITTAPE,VOL=SER=TTTTTT,\n* //         UNIT=3480,LABEL=(1,SL,EXPDT=98000),DCB=TRTCH=NOCOMP\n*\n*\nERASETP CSECT\n      PROLOG BASEREG=12,REQUATE=YES\n      XR   R0,R0\n      L    R1,=F'65526'\n      LA   R2,ZONE999\n      LR   R3,R1\n      MVCL R2,R0                    CLEAR IO ZONE\n* AT CCW1+6(2) : WISHED DATA LENGTH\n* MOVE THE BLKSIZE VALUE\n      MVC  LON,=CL5'65535'          64K BLOCKS\n      PACK  LONP,LON\n      CVB  R3,LONP\n      STCM  R3,3,CCW1+6             SET BLOCKSIZE IN CCW\n      XR   R7,R7\n*\n      LA   R1,ZONEIO\n      LR   R5,R1\n      ST   R5,CCW1    DATA ADDRESS\n      MVI  CCW1,X'01'  COMMAND CODE :  ** WRITE **\n*\n      XC   ECB,ECB\n      XC   IOB1,IOB1\n      LA   R1,ECB\n      ST   R1,IOBECB\n      LA   R1,CCW1\n      ST   R1,IOBSTART\n      LA   R1,TAPEOUT\n      ST   R1,IOBDCB\n      OPEN  (TAPEOUT,(OUTPUT))\n      OPEN  (SYSPRINT,(OUTPUT))\nLOOP  DS    0H\n      EXCP  IOB1\n      WAIT ECB=ECB\n      TM   ECB,X'7F'                TEST IO-ERROR\n      BO   NOERROR\n* PROCESS IO-ERROR\n      PRINTHX IOBCSW,CSWHEX\n      PRINTHX IOBECB,ECBHEX\n      PRINTHX IOBSENS0,IOBS0\n      PRINTHX IOBSENS1,IOBS1\n      PUT  SYSPRINT,M1\n      B    FINLECT\nNOERROR DS  0H\n      LA   R7,1(0,R7)  COMPTEUR\n      B  LOOP\nFINLECT  CLOSE (TAPEOUT)\n         CLOSE (SYSPRINT)\n       ST  R7,MOT\n       CONVERT FROMB=MOT,TOZ=COMPT\n       WTOPUT '** TAPE HAS BEEN ERASED, 64K-BLOCKS WRITTEN : ',COMPT\n*\n       L   R7,MOT\n       XR  R6,R6\n       M   R6,=F'65535'         CALCUL EN OCTETS\n       D   R6,=F'1000000'       CALCUL EN MILLIONS D'OCTETS\n       ST  R7,MILLION\n       CONVERT FROMB=MILLION,TOZ=COMPT\n       WTOPUT '**         CAPACITY = ',COMPT,' MILLIONS OF BYTES'\n*\n       L   R7,MOT\n       XR  R6,R6\n       M   R6,=F'65535'         CALCUL EN OCTETS\n       D   R6,=F'1048576'       CALCUL EN MEGABYTES  (1024*1024)\n       ST  R7,MEGABYTE\n       CONVERT FROMB=MEGABYTE,TOZ=COMPT\n       WTOPUT '**               OR = ',COMPT,' MEGABYTES'\n*\nRET       L       R13,4(R13)\n          RETURN  (14,12),T,RC=0\nTAPEOUT DCB MACRF=(E),OPTCD=Z,DDNAME=TAPE,DSORG=PS,                    *\n               DEVD=TA   IOB=IOB1\nSYSPRINT DCB  MACRF=PM,DSORG=PS,DDNAME=SYSPRINT,LRECL=133,BLKSIZE=13300\nMEGABYTE DS   F\nMILLION  DS   F\nMETRES   DS   F\nMOT      DS   F\nCOMPT    DS   CL8\nECB      DS   F\nLON      DS   CL5\n    CNOP 0,8\nLONP     DC   PL8'0'\nZONE133  DS   0CL133\n         DC   C' '\n         DC   CL80' '\n         DC   CL(133-81)' '\nM1       DS   0CL133\n         DC   C' ** I/O ERROR, CSW = X'''\nCSWHEX   DS   CL14\n         DC   C''', ECB=X'''\nECBHEX   DS   CL8\n         DC   C''', IOBSENS0=X'''\nIOBS0    DS   CL2\n         DC   C''', IOBSENS1=X'''\nIOBS1    DS   CL2\n         DC   CL(M1+L'M1-*)'''   '\nBIDON  DS  0H\nCCW1     CCW  X'01',BIDON,X'20',80   WRITE ZONE\n         CNOP 0,4\nIOB1     DS   0CL32\nIOBFLAG1 DS   CL1\nIOBFLAG2 DS   CL1\nIOBSENS0 DS   CL1\nIOBSENS1 DS   CL1\nIOBECB   DS   F\nIOBFLAG3 DS   CL1\nIOBCSW   DS   CL7\nIOBSTART DS   F\nIOBDCB   DS   F\n         DS   CL12  THE REMAINING BYTES\n  LTORG\nZONEIO   DS  0CL1\n         DC   CL10'* ERASED *'\nZONE999  DS   CL65526\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EXEMPLES": {"ttr": 2049, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x991_\\x00\\x991_\\x11P\\x01\\xb7\\x01\\xb7\\x00\\x00\\xe3\\xc8\\xc9\\xc5\\xd9\\xd9\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-11-11T00:00:00", "modifydate": "1999-11-11T11:50:00", "lines": 439, "newlines": 439, "modlines": 0, "user": "THIERRY"}, "text": "  Exemples de programmes assembleurs extraits\n  du livre \"Le syst}me MVS\", T.Falissard, EYROLLES\n\n1) Exemple 1 : programme utilisant le cross-memory\n2) Exemple 2 : programme utilisant l'interface sous-syst}me\n3) Exemple 3 : programme avec SCHEDULE de SRB\n4) Exemple 4 : programme effectuant des EXCPs\n5) Exemple 5 : programme invoquant la m{thode d'acc}s BSAM pour un PDS\n6) Exemple 6 : programme cr{ant un dataspace ESA\n\n\n* BUT DU PROGRAMME : AFFICHER LA DERNIERE COMMANDE ENTREE A LA CONSOLE\n* PAR LE PUPITREUR ; IL FAUT POUR CELA CHERCHER L'INFORMATION DANS\n* L'ESPACE-ADRESSE MVS \"CONSOLE\" PAR CROSS-MEMORY\n*     (RDCM ET TDCM SONT DANS LA LSQA DE L'ESPACE-ADRESSE 'CONSOLE')\n* CVT -> UCM BASE -> UCM PREFIX -> UCME MASTER CONSOLE -> RDCM -> TDCM\nEXEMPLE1 CSECT\n         SAVE (14,12),,EXEMPLE1-&SYSDATE-&SYSTIME\n         LR   R12,R15          R12 = R15 = ADRESSE POINT ENTREE\n         USING EXEMPLE1,R12    R12 EST LE REGISTRE DE BASE DE LA CSECT\n         LR   R9,R13           SAUVEGARDER LE R13 INITIAL\n         LA   R13,SAVE         MAINTENANT R13 POINTE SUR NOTRE SAVE\n         ST   R13,8(R9)        ADRESSE DE NOTRE SAVE MISE CHEZ APPELANT\n         ST   R9,4(R13)        ADRESSE SAVE APPELANT MISE CHEZ NOUS\n* ACCES @ LA CVT\n         L    R1,CVTPTR         PRENDRE L'ADRESSE DE LA CVT\n         USING CVT,R1           ADRESSER LA CVT\n         L    R1,CVTCUCB        POINTER VERS UCM BASE\n* ACCES @ L'UCM BASE\n         DROP R1                R1 N'EST PLUS UTILISE POUR L'ADRESSAGE\n         USING UCM,R1           ADRESSER UCM BASE\n         LH   R2,UCMCTID        PRENDRE ASID ADDRESS-SPACE CONSOLE\n         ST   R2,ASIDF          LE STOCKER CHEZ NOUS\n         DROP R1                R1 N'EST PLUS UTILISE POUR L'ADRESSAGE\n* ACCES @ L'UCM PREFIX\n         SH   R1,=H'4'          RECULER DE 4 OCTETS\n         L    R1,0(R1)          POUR PRENDRE ADRESSE UCM MCS PREFIX\n         L    R1,0(R1)          PRENDRE ADRESSE UCM MASTERCONS UCMMCENT\n* ACCES @ L'UCME DE LA MASTER (UCM INDIVIDUAL DEVICE ENTRY MAP)\n         USING UCMECB,R1        ADRESSER L'UCME\n         L    R4,UCMXB          PRENDRE ADRESSE DU RDCM\n         DROP R1                R1 N'EST PLUS UTILISE POUR L'ADRESSAGE\n* ACCES AU RDCM QUI EST DANS L'A.S. \"CONSOLE\"\n         MODESET KEY=ZERO,MODE=SUP   PASSER EN MODE SUPERVISEUR CLE 0\n         ESAR R2                OBTENIR L'ASID DE NOTRE ESPACE-ADRESSE\n         ST   R2,NOTRASID       LE SAUVER\n         LA   R2,1              AUTORISATION INDEX DE 1 (TOUT PERMIS)\n         AXSET AX=(2)           AUTORISER NOTRE ESPACE-ADRESSE\n         L    R2,ASIDF          PRENDRE L'ASID DE L'ESPACE-ADRESSE VIS{\n         SSAR R2                L'ETABLIR COMME ESPACE-ADR. SECONDAIRE\n* ACCES AUX DONNEES DE L'AUTRE ESPACE-ADRESSE\n         XR   R2,R2             R2 = 0\n         LA   R2,4              4 OCTETS A MOUVEMENTER\n         XR   R1,R1             R1 = 0\n         MVCP ADDR1(R2),0(R4),R1    PRENDRE ADRESSE DU TDCM\n* ACCES AU TDCM DANS L'A.S. CONSOLE\n         L    R5,ADDR1          ADRESSE TDCM DANS A.S. CONSOLE\n         LA   R2,128            LONGUEUR DE LA COMMANDE\n         XR   R1,R1             R1 = 0\n         MVCP LASTCMD(R2),640(R5),R1    COPIER  DERNIERE COMMANDE\n* SORTIR DU MODE CROSS-MEMORY\n         L    R2,NOTRASID       PRENDRE ASID DE NOTRE ESPACE-ADRESSE\n         SSAR R2\n         XR   R2,R2             R2 = 0\n         AXSET AX=(2)\n         MODESET KEY=NZERO,MODE=PROB      REPASSER EN MODE PROBLEME\n* AFFICHER LES 30 PREMIERS CARACTERES\n         MVC  WTO1+8(30),LASTCMD  INDIQUER LA ZONE A AFFICHER\nWTO1     WTO  '                                        ',ROUTCDE=11\nFIN      L       R13,4(R13)     REPRENDRE ADRESSE SAVE DE L'APPELANT\n         RETURN  (14,12),T,RC=0\nSAVE     DS   18F    18 MOTS DE SAVE AREA\nNOTRASID DC   F'0'   NUMERO DE NOTRE ESPACE-ADRESSE\nASIDF    DC   F'0'   NUMERO D'ESPACE-ADRESSE VISE\nADDR1    DC   F'0'   ADRESSE TDCM\nLASTCMD  DS   CL128  DERNIERE COMMANDE PASSEE PAR LE PUPITREUR\n         CVT   DSECT=YES\n         IEECUCM\n         IEECDCM\n         END\n\n\n*\n* EXEMPLE D'APPEL DE L'INTERFACE SOUS-SYSTEME\n* LISTER TOUS LES JOBS COMMENCANT PAR LE NOM D'UN USER\n*\n         IEFJESCT\n         CVT  DSECT=YES\nEXEMPLE2 CSECT\n         SAVE (14,12),,EXEMPLE2-&SYSDATE-&SYSTIME\n         LR   R12,R15          R12 = R15 = ADRESSE POINT ENTREE\n         USING EXEMPLE2,R12    R12 EST LE REGISTRE DE BASE DE LA CSECT\n         LR   R9,R13           SAUVEGARDER LE R13 INITIAL\n         LA   R13,SAVE         MAINTENANT R13 POINTE SUR NOTRE SAVE\n         ST   R13,8(R9)        ADRESSE DE NOTRE SAVE MISE CHEZ APPELANT\n         ST   R9,4(R13)        ADRESSE SAVE APPELANT MISE CHEZ NOUS\n* PRENDRE LE PARAMETRE PASSE AU PROGRAMME : EXEC PGM=EXEMPLE2,PARM=ZZZZ\n         L    R1,0(R1)\n         LH   R2,0(R1)         PRENDRE LA LONGUEUR DU PARAMETRE\n         BCTR R2,0             R2 - 1 POUR INSTRUCTION EXECUTE (MOVE)\n         EX   R2,MOVE          FAIRE UN MOVE DE LONGUEUR VARIABLE\n*\n         MODESET MODE=SUP,KEY=ZERO\n         LA    R1,PARAM        ADRESSER LE PARAMETRE\n         OI    PARAM,X'80'     SIGNER L'ADRESSE\n         IEFSSREQ              APPEL DU SSI\n         ST    R15,RETCODE     STOCKER LE CODE RETOUR\n         MODESET MODE=PROB,KEY=NZERO\n*\n         L       R13,4(R13)\n         RETURN  (14,12),T,RC=0\n*\nMOVE     MVC  SSCSJOBN(1),2(R1)   MOVE USERID INDIQUE EN PARAMETRE\nRETCODE  DC  F'0'\nPARAM    DC  A(SSOB)\n*\nSSOB     DS  0F\nSSOBID   DC  C'SSOB'   IDENTIFIEUR DU BLOC DE CONTROLE SSOB\nSSOBLEN  DC  H'20'     LONGUEUR DU SSOB\nSSOBFUNC DC  H'3'      FONCTION DEMANDEE : STATUS\nSSOBSSIB DC  F'0'      ADRESSE DE SSIB = 0\nSSOBRETN DC  F'0'      CODE RETOUR SOUS-SYSTEME\n* RC=4  JOBNAME NOT FOUND     RC=8   INVALID JOBNAME/JOBID COMBINAISON\n* RC=12 JOB NOT CANCELLED     RC=16  ARRAY TOO SMALL\nSSOBINDV DC  A(SSCS)   ADRESSE EXTENSION\n         DC  D'0'      2 MOTS DE TRAVAIL SSI\n*\nSSCS     DS  0F        EXTENSION DU SSOB POUR FONCTION CANCEL/STATUS\nSSCSLEN  DC  H'184'    LONGUEUR DU SSCS\nSSCSFLGS DC  X'80'     FLAG : USERID IS IN JOBNAME FIELD\nSSCSULEN DC  X'07'     LONGUEUR DU USERID\nSSCSJOBN DC  CL8' '    JOBNAME\nSSCSJOBI DC  CL8' '    JOBID\nSSCSDIMP DC  H'160'    TAILLE DE TABLE MISE A DISPOSITION DU SSI\nSSCSDIMR DC  H'0'      POSITIONNE PAR SSI POUR DIRE SI TAILLE SUFFIT\nSSCSARAY DS  0CL160    16*10\nARAY1    DS  CL80\nARAY2    DS  CL80\nSAVE     DS  18F\n         LTORG\n         END\n\n\n\n\n* CE PGM REND UN ESP.-ADR. NON SWAPPABLE (SCHEDULE DE SRB, APPEL A SRM)\n         CVT   DSECT=YES\n         IHASRB\nEXEMPLE3 CSECT\n         SAVE (14,12),,EXEMPLE3-&SYSDATE-&SYSTIME\n         LR   R12,R15          R12 = R15 = ADRESSE POINT ENTREE\n         USING EXEMPLE3,R12    R12 EST LE REGISTRE DE BASE DE LA CSECT\n         LR   R9,R13           SAUVEGARDER LE R13 INITIAL\n         LA   R13,SAVE         MAINTENANT R13 POINTE SUR NOTRE SAVE\n         ST   R13,8(R9)        ADRESSE DE NOTRE SAVE MISE CHEZ APPELANT\n         ST   R9,4(R13)        ADRESSE SAVE APPELANT MISE CHEZ NOUS\n* LE PROGRAMME  RECOIT DANS R1 LE NUMERO D'ASID DE L'ESPACE-ADRESSE\n         ST   R1,THEASCB       STOCKER L'ASID NUMBER\n         USING SRBSECT,R5      ADRESSER LE SRB, COMMENCER A LE PREPARER\n         LA   R5,MYSRB\n         XC   MYSRB,MYSRB      MISE DU SRB A ZERO BINAIRE\n         MVC  SRBID,=CL4'SRB'  ACRONYME\n         MVC  SRBASCB,THEASCB  ASCB DE L'A.S. VISE POUR EXEC SRB\n* ACQUISITION UNE PAGE EN SQA  (POUR SRB ET ROUTINE SRB)\n         MODESET MODE=SUP,KEY=ZERO         PASSAGE MODE SUPERVISEUR\n         GETMAIN  RC,LV=4096,BNDRY=PAGE,SP=226   GETMAIN EN SQA\n         LR   R8,R1            ADRESSE DE LA ZONE EN SQA\n         ST   R8,ADDSRB        LA SAUVEGARDER\n         LA   R1,(ENTREE-PAGE) LONGUEUR DU SRB\n         AR   R1,R8            ADRESSE ROUTINE SRB\n         ST   R1,SRBEP         ENTRY POINT\n         NI   SRBEP,B'01111111'   1ER BIT FORCE A ZERO (AMODE 24)\n* MOVE DU SRB ET DE LA ROUTINE SRB EN SQA\n         L    R9,=F'4096'      LONGUEUR DE ZONE A MOUVEMENTER\n         LR   R11,R9           EGALE LONGUEUR ZONE EMETTRICE\n         LA   R10,PAGE         ADRESSE ZONE ORIGINE\n         MVCL R8,R10           'MOVE CHARACTERS' LONG : MOVE CODE + SRB\n         L    R8,ADDSRB        RESTAURER R8\n* ENVOI DU SRB AU DISPATCHER\n         SCHEDULE SRB=(8),SCOPE=GLOBAL,LLOCK=YES,FRR=NO\n         MODESET MODE=PROB,KEY=NZERO       RETOUR MODE PROBLEME\nFIN      L       R13,4(R13)\n         RETURN  (14,12),T,RC=0\nADDSRB   DS   F                ADRESSE DU SRB EN SQA\nTHEASCB  DS   F                ASCB DE L'A.S. A METTRE NON SWAPPABLE\nPAGE     DS   CL4096           DEFINIR L'IMAGE SRB + ROUTINE SUR 1 PAGE\n         ORG  PAGE\nMYSRB    DS   CL(SRBSIZE)      ********   S  R  B   *******\nENTREE   DS   0F               ** R O U T I N E    S R B **\n* A L'ENTREE DANS LA ROUTINE SRB, LES REGISTRES SONT UTILISES AINSI :\n* R0 = ADRESSE DU SRB, R1 = USER DATA, R14 = RETURN ADD, R15 = ENTREE\n         USING ENTREE,R7       R7 REGISTRE DE BASE\n         LR   R6,R0            SAUVER R0\n         LR   R7,R15           SAUVER ADRESSE D'ENTREE DE LA ROUTINE\n         LR   R8,R14           SAUVER ADRESSE DE RETOUR\n         XR   R0,R0            R0 = 0\n         ICM  R0,3,CODE        CODE POUR LE SYSEVENT DE TRANSWAP\n         XR   R1,R1            R1 = 0  (PAS DE ECB)\n         L    R15,CVTPTR       ADRESSE DE LA CVT\n         L    R15,CVTOPTE-CVT(,R15)   SRM ENTRY\n* APPEL SRM\n         LA   R13,SAVEAREA     SAVE AREA DE 72 OCTETS POUR SYSEVENT\n         BALR R14,R15          ON INVOQUE L'INTERFACE SRM\n         FREEMAIN R,LV=4096,A=(6),BRANCH=YES,SP=226  LIBERER MEMOIRE\n         BR   R8               RETOUR APPELANT\nSAVEAREA DS   18F              SAVE AREA POUR SRM\nCODE     DC   X'000E'          TRANSWAP SYSEVENT\nLONGROUT EQU  *-ENTREE         LONGUEUR DE LA ROUTINE SRB\n         ORG\n         LTORG\n         END\n\n\n\n*  CE PROGRAMME LIT UN BLOC D'UN FICHIER BANDE (EXCP)\nEXEMPLE4 CSECT\n         SAVE (14,12),,EXEMPLE4-&SYSDATE-&SYSTIME\n         LR   R12,R15          R12 = R15 = ADRESSE POINT ENTREE\n         USING EXEMPLE4,R12    R12 EST LE REGISTRE DE BASE DE LA CSECT\n         LR   R9,R13           SAUVEGARDER LE R13 INITIAL\n         LA   R13,SAVE         MAINTENANT R13 POINTE SUR NOTRE SAVE\n         ST   R13,8(R9)        ADRESSE DE NOTRE SAVE MISE CHEZ APPELANT\n         ST   R9,4(R13)        ADRESSE SAVE APPELANT MISE CHEZ NOUS\n* OBTENIR UNE ZONE MEMOIRE DE LONGUEUR = BLKSIZE (AU MOINS)\n         LH   R3,MAXCNT        NOMBRE D'OCTETS A OBTENIR\n         GETMAIN  RU,LV=(3)    NB: ON NE FERA PAS DE FREEMAIN\n         LR   R5,R1            PRENDRE ADRESSE DE LA ZONE OBTENUE\n         ST   R5,CCW1          DATA ADDRESS\n         MVI  CCW1,X'02'       COMMAND CODE : LECTURE\n         OPEN (TAPEIN,(INPUT)) OUVRIR LE FICHIER\n         MVC  CCW1CNT,MAXCNT   MAXIMUM A TRANSFERER\n         EXCP IOB1             DECLENCHER L'EXCP\n         WAIT ECB=ECB          ATTENDRE LA FIN DE L'OPERATION\n         TM   ECB,X'7F'        TESTER SI IO-ERROR\n         BO   NOERROR          PAS D'ERREUR, ON CONTINUE\n         ABEND 99,DUMP         SI ERREUR, ON FAIT ABEND\nNOERROR  DS   0H\n         CLOSE (TAPEIN)\n* NOMBRE D'OCTETS TRANSFERES = X'7FFF' MOINS LE \"RESIDUAL COUNT\"\n         LH   R15,MAXCNT       R15 = X'7FFF'\n         LH   R2,IOBCSWBC      R2 = RESIDUAL BYTE COUNT DU CSW\n         SR   R15,R2           MAX - RESIDUAL BYTE COUNT DU CSW\nRET      L    R13,4(R13)\n         RETURN  (14,12),T,RC=(15)   CODE RETOUR DANS LE REGISTRE 15\n*\nTAPEIN   DCB  MACRF=(E),DDNAME=TAPEIN,DSORG=PS\nECB      DC   F'0'\nBIDON    DS   0D\nCCW1     CCW  X'02',BIDON,X'20',80   LECTURE BANDE/ZONE POINTEE PAR R5\n         ORG  CCW1             ** CCW DE FORMAT 0 **\nCCW1CMD  DS   CL1              CCW - COMMAND CODE\nCCW1ADDR DS   CL3              CCW - DATA ADDRESS\nCCW1FLAG DS   CL1              CCW - FLAGS\nCCW1RES  DS   CL1              CCW - INUTILISE\nCCW1CNT  DS   H                CCW - BYTE COUNT\n         ORG\n         CNOP 0,4\nIOB1     DS   0CL32            ** IOB **\nIOBFLAG1 DS   CL1\nIOBFLAG2 DS   CL1\nIOBSENS0 DS   CL1\nIOBSENS1 DS   CL1\nIOBECB   DC   A(ECB)           ADRESSE DE L'ECB\nIOBFLAG3 DS   CL1\nIOBCSW   DS   0CL7             CHANNEL STATUS WORD (7 DERNIERS OCTETS)\n         DS   CL5\nIOBCSWBC DS   CL2              CSW : RESIDUAL BYTE COUNT\nIOBSTART DC   A(CCW1)          ADRESSE DU CCW\nIOBDCB   DC   A(TAPEIN)        ADRESSE DU DCB\n         DS   CL12             LE RESTE DE L'IOB\nMAXCNT   DC   H'32767'         MAXIMUM BLOCKSIZE POSSIBLE SUR 2 OCTETS\nSAVE     DS   18F\n         LTORG\n         END\n\n\n\n* CE PROGRAMME LIT UN FICHIER PARTITIONNE MEMBRE PAR MEMBRE\n* IL AFFICHE (SOUS TSO) LE NOM DU MEMBRE, LA LONGUEUR\n* ET LES PREMIERS OCTETS DE CHAQUE BLOC DE MEMBRE\n* LE PDS DOIT ETRE ALLOUE EN SYSLIB\nEXEMPLE5 CSECT\n         SAVE (14,12),,EXEMPLE5-&SYSDATE-&SYSTIME\n         LR    R12,R15          R12 = R15 = ADRESSE POINT ENTREE\n         USING EXEMPLE5,R12     R12 EST LE REGISTRE DE BASE DE LA CSECT\n         LR    R9,R13           SAUVEGARDER LE R13 INITIAL\n         LA    R13,SAVE         MAINTENANT R13 POINTE SUR NOTRE SAVE\n         ST    R13,8(R9)        ADRESSE NOTRE SAVE MISE CHEZ APPELANT\n         ST    R9,4(R13)        ADRESSE SAVE APPELANT MISE CHEZ NOUS\n         USING IHADCB,R5\n         LA    R5,SYSLIB        DCB DU PDS\n         OPEN  (SYSLIB,,LIB)    OUVRIR LES FICHIERS\n* OBTENIR DYNAMIQUEMENT UNE ZONE DE MEMOIRE (POUR UN BLOC D'UN MEMBRE)\n         L     R6,LONG\n         GETMAIN RU,LV=(6)      DEMANDE DE MEMOIRE\n         ST    R1,BUFAD         STOCKER ADRESSE DE LA ZONE OBTENUE\nNEXTMBR  DS    0H\n         XC    TTRN,TTRN\n         CLC   LONGBLK,OFFSET   COMPARER TOTAL AVEC COMPTEUR\n         BH    TRAITER          BLOC DE DIRECTORY DEJA LU, L'EXPLOITER\n* LIRE UN BLOC DE DIRECTORY\n         GET   LIB,DIRZONE      LECTURE\n         LA    R1,DIRZONE       POINTER DEBUT ZONE\n         MVC   LONGBLK,0(1)     MOVE LONGUEUR TOTALE UTILE DU BLOC\n         MVC   OFFSET,=H'2'     OFFSET = 2 OCTETS A CAUSE COUNT\n* EXPLOITER UNE ENTREE DU BLOC DE DIRECTORY\nTRAITER  DS    0H               EXPLOITATION BLOC DE DIRECTORY\n         LA    R1,DIRZONE       POINTER DEBUT ZONE\n         LH    R0,OFFSET        CHARGER COMPTEUR\n         AR    R1,R0            ACCEDER MEMBRE SUIVANT\n         MVC   MBRNAME(8),0(R1) ** NOM DU MEMBRE **\n         MVC   TTRN(3),8(R1)    ** TTR DU MEMBRE **\n         XR    R0,R0            REG 0 = 0\n         IC    R0,11(R1)        CHARGER LONGUEUR USER DATA EN 1/2 MOTS\n         N     R0,=X'0000001F'  GARDER LES 5 DERNIERS BITS\n         SLL   R0,1             R0*2 = NOMBRE D'OCTETS DE USER DATA\n         LR    R1,R0            LONGUEUR DES USER DATA\n         LA    R1,12(0,R1)      +12 OCTETS : NAME, TTR, LONGUEUR UDATA\n         LH    R0,OFFSET        CHARGER COMPTEUR ANCIEN\n         AR    R1,R0            AJOUTER OFFSET\n         STH   R1,OFFSET        STOCKER COMPTEUR NOUVEAU\n         CLC   FF,MBRNAME\n         BE    CLOSE\n         POINT SYSLIB,TTRN         POSITIONNEMENT SUR LE MEMBRE\n         L     R6,BUFAD            CHARGER ADRESSE BUFFER PREVU\n* LIRE UN BLOC DU MEMBRE : R6 POINTE SUR LE BLOC\nNEXTBLK  READ  DECB1,SF,SYSLIB,(6),'S'   LIRE UN BLOC\n         CHECK DECB1               ATTENDRE LA FIN DE L'E/S\n         LH    R1,DCBBLKSI         BLOCKSIZE\n         L     R2,DECB1+16         IOB ADDRESS\n         SH    R1,14(R2)           BLKSIZE-RESIDUAL COUNT=LONGUEUR\n         ST    R1,LONGBLOC         LONGUEUR UTILE DE CE BLOC\n         CVD   R1,DBLEWORD         CONVERTIR LONGUEUR EN PACKE\n         UNPK  LONGBL,DBLEWORD     PUIS EN DECIMAL ZONE\n         OI    LONGBL+L'LONGBL-1,X'F0'    NORMALISER LE SIGNE\n         MVC   DEBUTBL,0(R6)       COPIER LE DEBUT DU BLOC POUR INFO\n         TPUT  MESSAGE,L'MESSAGE   AFFICHER A L'ECRAN TSO LES INFOS\n         B     NEXTBLK             LIRE LE BLOC SUIVANT\nFINMEMBR DS    0H\n         B     NEXTMBR             PASSER AU MEMBRE SUIVANT\nCLOSE    DS    0H\n         CLOSE (SYSLIB)\n         CLOSE (LIB)\nFIN      L     R13,4(R13)\n         RETURN  (14,12),T,RC=0\nDBLEWORD DS    D\nSAVE     DS    18F\nTTRN     DS    CL4\nLONG     DC    F'32767'         LONGUEUR MAXIMALE D'UN BLOC DE FICHIER\nLONGBLOC DC    F'0'             LONGUEUR UTILE DU BLOC DE MEMBRE\nBUFAD    DC    F'0'\nOFFSET   DC    H'99'            OFFSET MBR DEPUIS DEBUT BLOC DIRECTORY\nLONGBLK  DC    H'0'             LONGUEUR DU BLOC DE DIRECTORY (BINAIRE)\nDIRZONE  DS    CL256            ZONE IO BLOC DIRECTORY\nLIB      DCB   DDNAME=SYSLIB,MACRF=GM,BLKSIZE=256,                     X\n               RECFM=F,DSORG=PS,LRECL=256\nSYSLIB   DCB   DDNAME=SYSLIB,MACRF=R,DSORG=PO,EODAD=FINMEMBR\nFF       DC    X'FFFFFFFFFFFFFFFF'  MARQUE DE FIN DE DIRECTORY\n*\nMESSAGE  DS    0CL70\n         DC    C'MEMBRE '\nMBRNAME  DS    CL8              NOM DU MEMBRE\n         DC    C'  BLOC DE LONGUEUR '\nLONGBL   DC    CL5' '           LONGUEUR DU BLOC DE MEMBRE\n         DC    C' '             BLANC SEPARATEUR\nDEBUTBL  DC    CL(70-*+MESSAGE)' '   DEBUT DONNEES DU BLOC\n*\n         LTORG\n         DCBD  DSORG=PS\n         END\n\n\n\n\n* CE PROGRAMME CREE UN DATASPACE ESA, Y ACCEDE, PUIS LE DETRUIT\nEXEMPLE6 CSECT\nEXEMPLE6 AMODE 31\nEXEMPLE6 RMODE ANY\n         SAVE (14,12),,EXEMPLE6-&SYSDATE-&SYSTIME\n         LR   R12,R15          R12 = R15 = ADRESSE POINT ENTREE\n         USING EXEMPLE6,R12    R12 EST LE REGISTRE DE BASE DE LA CSECT\n         LR   R9,R13           SAUVEGARDER LE R13 INITIAL\n         LA   R13,SAVE         MAINTENANT R13 POINTE SUR NOTRE SAVE\n         ST   R13,8(R9)        ADRESSE DE NOTRE SAVE MISE CHEZ APPELANT\n         ST   R9,4(R13)        ADRESSE SAVE APPELANT MISE CHEZ NOUS\n* CREER UN DATA SPACE\n         DSPSERV   CREATE,         CREATION D'UN DATASPACE             *\n               NAME=NOM,           NOM DU DATASPACE                    *\n               BLOCKS=TAILLE,      TAILLE EN NOMBRE DE BLOCS           *\n               ORIGIN=ORIGINE,     OU COMMENCE-T-IL (A RETOURNER)      *\n               SCOPE=SINGLE,       DATASPACE A USAGE PRIVE             *\n               STOKEN=JETON        JETON POUR Y ACCEDER (A RETOURNER)\n         LTR  R15,R15          CREATION EFFECTUEE ?\n         BNZ  FIN\n         WTO  'DSPSERV CREATE SUCCESSFUL',ROUTCDE=11\n* RENDRE ACCESSIBLE LE DATASPACE PAR MISE A JOUR DE NOTRE ACCESS-LIST\n         ALESERV   ADD,            AJOUTER UNE ENTREE EN ACCESS-LIST   *\n               ALET=ALET,          ALET (A RETOURNER)                  *\n               STOKEN=JETON        JETON DE L'ESPACE-ADRESSE\n         LTR  R15,R15\n         BNZ  FIN\n         WTO  'ALESERV ADD SUCCESSFUL',ROUTCDE=11\n* PASSAGE A L'\"ACCESS MODE REGISTER\" POUR ACCES AU DATASPACE (VIA R4)\n         SAC  512               PASSAGE A L'AR MODE\n         LAM  R4,R4,ALET        CHARGER L'ACCESS-REGISTER 4\n         L    R4,ORIGINE        DEBUT DU DATA-SPACE\n         L    R5,TAILLE         TAILLE EN BLOCS DE 4K\n         SLL  R5,12             X (2 PUISSANCE 12) C'EST-A-DIRE X 4096\n         XR   R0,R0             PAS DE DONNEES ORIGINE\n         XR   R1,R1             PAS DE DONNEES ORIGINE\n         MVCL R4,R0             REMISE A ZERO DE TOUT LE DATA-SPACE\n* ACCEDER AU DATASPACE (LES 500 PREMIERES PAGES)\n         LA   R9,500\nLOOP     OC   0(8,R4),0(R4)     DONNEES INCHANGEES\n         LA   R4,4095(0,R4)     PAGE SUIVANTE\n         LA   R4,1(0,R4)\n         BCT  R9,LOOP\n* SORTIE DE L'\"ACCESS MODE REGISTER\"\n         SAC  0                 RETOUR AU PRIMARY MODE\n* SUPPRIMER LES DONNEES QUE CONTIENT LE DATASPACE (= MVCL)\n         DSPSERV   RELEASE,                                            *\n               BLOCKS=TAILLE,                                          *\n               STOKEN=JETON,                                           *\n               START=ORIGINE\n* SUPPRIMER LE DATASPACE\n         DSPSERV   DELETE,                                             *\n               STOKEN=JETON\n         XR   R15,R15\n*\nFIN      L       R13,4(R13)\n         RETURN  (14,12),T,RC=(15)\nSAVE     DS   18F               SAVE AREA\nNOM      DC   CL8'TSTDATSP'     NOM DU DATA-SPACE\nTAILLE   DC   F'400000'         TAILLE = 400000 BLOCS DE 4K = 1600M\nALET     DC   F'0'\n* ZONES RENVOYEES PAR DSPSERV (ADD) :\nORIGINE  DC   F'0'\nJETON    DS   CL8\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "EXP": {"ttr": 2057, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x991_\\x00\\x991_\\x11P\\x00$\\x00$\\x00\\x00\\xe3\\xc8\\xc9\\xc5\\xd9\\xd9\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-11-11T00:00:00", "modifydate": "1999-11-11T11:50:00", "lines": 36, "newlines": 36, "modlines": 0, "user": "THIERRY"}, "text": " /* rexx                                                   */\n /* Calcul de l'exponentielle du nombre x                  */\n /* On utilise le developpement limite classique :         */\n /* EXP(X) = 1 + X + (X)2/2| + ... + (X)n/n|               */\n /* Attention : ne convient pas pour les nombres negatifs  */\n\n  numeric digits 15\n  say exp(10) exp(0.1) exp(1)\n  exit\n\nexp: procedure\n  arg x\n\n /* Initialize                                             */\n\n  n =   1\n  exp = 1\n  num = 1\n  den = 1\n  /* arret quand increment/total < precision */\n  precision = 1/1000000000\n\n /* Computational loop                                     */\n\n  do forever\n  num = num*x        /* numerateur   */\n  den = den*n        /* denominateur */\n  quot = num/den     /* quotient = increment  */\n  exp = exp + quot\n  n = n + 1\n  if quot/exp < precision then leave\n  end\n\n /* say 'EXP('||x||') = '||exp 'after' n 'iterations'     */\n return exp\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "EXTEND": {"ttr": 2059, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x991_\\x00\\x991_\\x11P\\x00B\\x00B\\x00\\x00\\xe3\\xc8\\xc9\\xc5\\xd9\\xd9\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-11-11T00:00:00", "modifydate": "1999-11-11T11:50:00", "lines": 66, "newlines": 66, "modlines": 0, "user": "THIERRY"}, "text": "         MACRO\n&NLA     EXTEND  &BIN,&ETEND,&REG\n*EXTEND A BINARY ZONE (1ST PARAM) INTO AN EXTENDED (2ND) USING WORK REG\n.* LA ZONE BINAIRE DOIT ETRE DE 2, 3 OU 4 OCTETS\n.* LE RESULTAT EST DONNE EN VALEUR ABSOLUE (IL REPRESENTE UN NOMBRE\n.* POSITIF OU NEGATIF SELON QUE LE DERNIER BIT A GAUCHE DU NOMBRE BIN\n.* EST 0 OU 1. SI ON CONSIDERE QUE LE NBRE BIN EST NON SIGNE, IL FAUT\n.* FAIRE  :  NI  ZONEBIN,B'01111111' AVANT EXTEND\n.* POUR FORCER LE SIGNE A +\n         LCLA  &REGIS\n         LCLA  &NBR\n         LCLA  &LEN\n         LCLA  &ZZ\n         LCLA  &MASK\n&NLA     DS    0H\n&LEN     SETA  L'&BIN\n         AIF (&LEN GT 4).ERR1\n         AGO   .FOL0\n.ERR1    ANOP\n         MNOTE 8,'** LENGTH OF &BIN EXCEEDS 4 BYTES, CANNOT EXTEND'\n         MEXIT\n.FOL0    ANOP\n         AIF (T'&ETEND NE 'U').FOLLOW\n&LEN     SETA  (L'&BIN*2)+2    LONGUEUR DE LA ZONE ETENDUE\n         B    EXPR&SYSNDX\n&ETEND   DC   CL&LEN'0'\n.FOLLOW  ANOP\n&NBR     SETA  N'&SYSLIST\n        AIF  (&NBR EQ 2).SUIT1\n        AIF  (&NBR EQ 3).SUIT2\n        MNOTE 8,' ** NUMBER OF PARAMETERS MUST BE 2 OR 3'\n        MEXIT\n.SUIT1  ANOP\n&REGIS  SETA   1        USE REGISTER 1 FOR WORKING ZONE\n        AGO  .SUIT3\n.SUIT2  ANOP\n&REGIS  SETA     &REG\n.SUIT3  ANOP\nEXPR&SYSNDX   DS  0H\n        XR    &REGIS,&REGIS            SET REGISTER TO ZERO\n.*      CNOP 0,4                       ALIGN ON WORD\n&LEN    SETA  L'&BIN\n.*\n.* CALCUL DU MASQUE DE CHARGEMENT DE LA ZONE\n&ZZ     SETA  1\n&MASK   SETA  1\n.LOPM   ANOP\n        AIF   (&ZZ GT &LEN).FINM\n&MASK   SETA  2*&MASK\n&ZZ     SETA  &ZZ+1\n        AGO   .LOPM\n.FINM   ANOP\n&MASK   SETA  &MASK-1     MASQUE POUR CHARGER ZONE BIN 1 2 3 OU 4 BYTES\n        ICM   &REGIS,&MASK,&BIN            LOAD BINARY ZONE\n.*\n.*\n        CNOP 0,8                       ALIGN ON DOUBLE WORD\n        CVD   &REGIS,EXTD&SYSNDX       CONVERT TO DECIMAL\n        UNPK  &ETEND,EXTD&SYSNDX.(8)   UNPACK WORK ZONE\n&LEN    SETA  L'&ETEND\n        OI    &ETEND+(&LEN-1),X'F0'    LAST BYTE ALSO TO EXTEND\n        B     EXTF&SYSNDX              CONTINUE\n        CNOP 0,8                       ALIGN ON DOUBLE WORD\nEXTD&SYSNDX DC     FL8'0'                WORKING ZONE ON TWO WORDS\nEXTF&SYSNDX DS 0H\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ICHPWX01": {"ttr": 2305, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x991_\\x00\\x991_\\x11P\\x01\\x9a\\x01\\x9a\\x00\\x00\\xe3\\xc8\\xc9\\xc5\\xd9\\xd9\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-11-11T00:00:00", "modifydate": "1999-11-11T11:50:00", "lines": 410, "newlines": 410, "modlines": 0, "user": "THIERRY"}, "text": "*\n* EXIT RACF DE CONTROLE DU NEW PASSWORD             - REENTRANT, LPA\n* (INTERVIENT LORS DE TOUT CHANGEMENT DE PASSWORD)\n*\n* POUR SA PRISE EN COMPTE PAR LE SYSTEME, 2 POSSIBILITES :\n*   * COPIE EN SYS1.LPALIB ET IPL CLPA\n*   * CHARGEMENT DU MODULE EN CSA (PAR RESOLVE, COMMANDE \"LOADLPA,ADD\")\n*     ET ZAPPER EN MEMOIRE EN RCVT + X'EC' POUR METTRE SON ADRESSE\n*      NB : L'ADRESSE DE LA RCVT EST EN CVT+X'3E0', LE CHAINAGE EST :\n*         - CVT+3E0 DONNE : CVTRAC (ADRESSE RCVT)\n*         - RCVT+EC DONNE : ADRESSE DE CHARGEMENT DE ICHPWX01\n*     METTRE LE MOT EN RCVT+EC A ZERO REVIENT A DESACTIVER L'EXIT\n*\n* LES WTOS PERMETTENT D'EXAMINER LA LOG MVS POUR VOIR LA CAUSE DE REJET\n*\n         ICHPWXP    ,      ZONE PARAMETRE DE L'EXIT\n*        IHAACEE    ,      ACEE\nR0       EQU 0\nR1       EQU 1\nR2       EQU 2          TRAVAIL\nR3       EQU 3          ZONE USERID\nR4       EQU 4          ZONE NOUVEAU MOT DE PASSE\nR5       EQU 5          LONGUEUR USERID\nR6       EQU 6          LONGUEUR NOUVEAU MOT DE PASSE\nR7       EQU 7\nR8       EQU 8          TRAVAIL\nR9       EQU 9          PARAMETRES EN ENTREE DE L'EXIT\nR10      EQU 10         ZONE DE TRAVAIL\nR11      EQU 11\nR12      EQU 12         REGISTRE DE BASE\nR13      EQU 13         ** NE PAS LE MODIFIER **\nR14      EQU 14\nR15      EQU 15\nICHPWX01 CSECT\nICHPWX01 AMODE  31\nICHPWX01 RMODE  ANY\n         SAVE   (14,12),,ICHPWX01.ETIC.&SYSDATE..&SYSTIME\n         LR     R12,R15          R12 EST LE REGISTRE DE BASE\n         USING  ICHPWX01,R12\n* POUR DESACTIVER L'EXIT : CHANGER LE \"NOP\" QUI SUIT EN \"B\"\n         NOP    QUICKEND\n         LR     R9,R1            POINTONS SUR LE PARAMETRE\n         USING  PWXPL,R9\n*\n* LE TYPE D'APPEL 'ALTUSER' N'EST PAS CONTROLE\n* (LE GESTIONNAIRE RACF PEUT IMPOSER UN NEW PWD TEMPORAIRE QUELCONQUE)\n*\n         L    R1,PWXCALLR      CALLER ADDRESS\n         LTR  R1,R1            RENSEIGNE ?\n         BZ   NOCALLR\n         CLI  0(R1),PWXALTUS   ALTUSER COMMAND ?\n         BE   RET0             OUI, NO CONTROL\n*\nNOCALLR  DS   0H\n         L    R3,PWXUSRID      ADRESSE ZONE USERID\n         L    R4,PWXNEWPW      ADRESSE NEW PASSWORD\n         LTR  R4,R4\n         BZ   RET0             PAS DE NEW PASSWORD, PAS DE CONTROLE\n         LTR  R3,R3\n         BZ   RET0             PAS DE USER, ANORMAL, MAIS TANT PIS\n         XR   R5,R5\n         IC   R5,0(R3)         LONGUEUR DU USERID\n         XR   R6,R6\n         IC   R6,0(R4)         LONGUEUR DU NOUVEAU PASSWORD\n         LTR  R6,R6\n         BZ   RET0             PAS DE NEW PASSWORD, PAS DE CONTROLE\n* OBTENTION ZONE DE TRAVAIL\n         LA   R2,WORKLONG\n         GETMAIN  R,LV=(2)\n         LR   R10,R1           SAUVER ADRESSE DE LA ZONE OBTENUE\n         LTR  R15,R15\n         BNZ  RET0\n         USING WORKZONE,R10\n         ST   R5,LONGUSER      LONGUEUR ZONE USER\n         ST   R6,LONGPASS      LONGUEUR ZONE NEW PASSWORD\n         LA   R3,1(0,R3)       ACCES A ZONE USER (ON SAUTE LA LONGUEUR)\n         ST   R3,ADDUSER       ADRESSE ZONE USER\n         LA   R4,1(0,R4)       ACCES A ZONE PSWD (ON SAUTE LA LONGUEUR)\n         ST   R4,ADDPASS       ADRESSE ZONE PSWD\n*\n*---------------------------------------------------------------------*\n* CONTROLE 0 : LE NEW PASSWORD NE DOIT PAS CONTENIR 'ETIC'\n*---------------------------------------------------------------------*\n*\nCONTROL0 DS   0H\n         L    R4,ADDPASS       ADRESSE ZONE PSWD\n         L    R6,LONGPASS      LONGUEUR ZONE NEW PASSWORD\n         C    R6,=F'4'         SI PAS >= 4\n         BL   ENDCTRL0         PAS DE CONTROLE\n         S    R6,=F'3'         - 4\nLOOPCTR0 CLC  0(4,R4),=CL4'ETIC'        CONTIENT \"ETIC\"\n         BE   CHECK0\n         LA   R4,1(0,R4)\n         LTR  R6,R6            = 0 ?\n         BZ   ENDCTRL0         CONTROLE FINI\n         BCT  R6,LOOPCTR0\n         B    ENDCTRL0         CONTROLE FINI\nCHECK0   DS   0H\n         WTO  'ICHPWX01Y- PASSWORD INCORRECT, NE DOIT PAS CONTENIR LA CX\n               HAINE DE CARACTERES ETIC',ROUTCDE=11\n         B    REJECT           NEW PASSWORD INVALIDE\nENDCTRL0 DS   0H\n*\n*---------------------------------------------------------------------*\n* CONTROLE 1 : LE NEW PASSWORD NE DOIT PAS CONTENIR PLUS DE 3C\n*            CONSECUTIFS DU USERID\n*---------------------------------------------------------------------*\n*\nCONTROL1 DS   0H\n* POUR DESACTIVER LE CONTROLE : CHANGER LE \"NOP\" QUI SUIT EN \"B\"\n         NOP  CONTROL2\n*\n*             COPIER USERID ET PASSWORD EN ZONE DE TRAVAIL\n*\n         L    R3,ADDUSER       ADRESSE ZONE USER\n         L    R4,ADDPASS       ADRESSE ZONE PSWD\n         L    R5,LONGUSER      LONGUEUR ZONE USER\n         L    R6,LONGPASS      LONGUEUR ZONE NEW PASSWORD\n         MVI  USERID,X'00'     INIT DE LA ZONE USERID DE TRAVAIL\n         MVC  USERID+1(7),USERID\n         MVI  PASSWORD,X'FF'   INIT DE LA ZONE NEW PASSWORD DE TRAVAIL\n         MVC  PASSWORD+1(7),PASSWORD\n         BCTR R5,0             LONGUEUR USERID - 1 POUR EXECUTE\n         BCTR R6,0             LONGUEUR PASSWORD - 1 POUR EXECUTE\n         EX   R5,MOVUSER       COPIER ZONE USERID\n         EX   R6,MOVPASS       COPIER ZONE PASSWORD\n*\n*             BOUCLE DE COMPARAISON DES CARACTERES 3 @ 3\n*\n         CLC  LONGPASS,=F'2'   CONTROLE IMPOSSIBLE SI LE PASSWORD ...\n         BNH  CONTROL2         ... A MOINS DE 3 CARACTERES\n         LA   R3,USERID        ADRESSE DU USERID EN WORK\n         LA   R2,6             6 COMPARAISONS SUR LE USERID\nLOOP1A   LA   R4,PASSWORD      ADRESSE DU PASSWORD EN WORK\n         LA   R1,6             6 COMPARAISONS SUR LE PASSWORD\nLOOP1B   CLC  0(3,R3),0(R4)    COMPARE 3 C. USER AVEC 3 C. PASSWORD\n         BE   CHECK1           EGALITE, REFUS\n         LA   R4,1(0,R4)       CARACTERES SUIVANTS DU PASSWORD\n         BCT  R1,LOOP1B\n         LA   R3,1(0,R3)       CARACTERES SUIVANTS DU USERID\n         BCT  R2,LOOP1A\n         B    CONTROL2         CONTROLE PASSE AVEC SUCCES\nCHECK1   DS   0H\n         WTO  'ICHPWX01A- PASSWORD INCORRECT, NE DOIT PAS COMPORTER PLUX\n               S DE 3 LETTRES CONSECUTIVES DU USERID',ROUTCDE=11\n         B    REJECT           NEW PASSWORD INVALIDE\nMOVUSER  MVC  USERID(1),0(R3)    COPIER ZONE USERID\nMOVPASS  MVC  PASSWORD(1),0(R4)  COPIER ZONE PASSWORD\n*\n*---------------------------------------------------------------------*\n* CONTROLE 2 : LE NEW PASSWORD NE DOIT PAS CONTENIR LES 3 PREMIERES\n*            LETTRES D'UN MOIS DE L'ANNEE (JAN, FEV, ETC)\n*---------------------------------------------------------------------*\n*\nCONTROL2 DS   0H\n* POUR DESACTIVER LE CONTROLE : CHANGER LE \"NOP\" QUI SUIT EN \"B\"\n         NOP  CONTROL3\n         CLC  LONGPASS,=F'2'   CONTROLE IMPOSSIBLE SI LE PASSWORD ...\n         BNH  CONTROL3         ... A MOINS DE 3 CARACTERES\n         LA   R1,MOISFRAN      LIBELLES MOIS EN FRANCAIS\n         LA   R2,12            12 COMPARAISONS\nLOOP2A   L    R4,ADDPASS       ADRESSE ZONE PSWD\n         L    R6,LONGPASS      LONGUEUR ZONE NEW PASSWORD\n         S    R6,=F'2'         ENLEVER 2\nLOOP2B   CLC  0(3,R1),0(R4)    COMPARER LIBELLE MOIS AVEC PASSWORD\n         BE   CHECK2\n         LA   R4,1(0,R4)       CARACTERE SUIVANT PASSWORD\n         BCT  R6,LOOP2B        AVANCER DANS LE PASSWORD\n         LA   R1,3(0,R1)       MOIS SUIVANT\n         BCT  R2,LOOP2A        AVANCER DANS LES MOIS\n* MEME CONTROLE AVEC LES MOIS EN ANGLAIS\n         LA   R1,MOISANGL      LIBELLES MOIS EN ANGLAIS\n         LA   R2,12            12 COMPARAISONS\nLOOP2C   L    R4,ADDPASS       ADRESSE ZONE PSWD\n         L    R6,LONGPASS      LONGUEUR ZONE NEW PASSWORD\n         S    R6,=F'2'         ENLEVER 2\nLOOP2D   CLC  0(3,R1),0(R4)    COMPARER LIBELLE MOIS AVEC PASSWORD\n         BE   CHECK2\n         LA   R4,1(0,R4)       CARACTERE SUIVANT PASSWORD\n         BCT  R6,LOOP2D        AVANCER DANS LE PASSWORD\n         LA   R1,3(0,R1)       MOIS SUIVANT\n         BCT  R2,LOOP2C        AVANCER DANS LES MOIS\n         B    CONTROL3         CONTROLE PASSE AVEC SUCCES\nCHECK2   DS   0H\n         WTO  'ICHPWX01B- PASSWORD INCORRECT, NE DOIT PAS COMPORTER LE X\n               DEBUT D''UN NOM DE MOIS',ROUTCDE=11\n         B    REJECT           NEW PASSWORD INVALIDE\n*\n*---------------------------------------------------------------------*\n* CONTROLE 3 : LE NEW PASSWORD NE DOIT PAS CONTENIR LE NUMERO DU MOIS\n*            EN COURS (01, 02, ETC)\n*---------------------------------------------------------------------*\n*\n* OBTENIR LE NUMERO DU MOIS EN COURS\n*\nCONTROL3 DS   0H\n* POUR DESACTIVER LE CONTROLE : CHANGER LE \"NOP\" QUI SUIT EN \"B\"\n         NOP  CONTROL4\n         CLC  LONGPASS,=F'1'   CONTROLE IMPOSSIBLE SI LE PASSWORD ...\n         BNH  CONTROL4         ... A MOINS DE 2 CARACTERES\n         MVC  MOISTB,MOISREF    TABLE DES NOMBRES DE JOUR/MOIS (WORK)\n         LA   R1,2              TIME SOUS FORME DECIMALE\n         SVC  11                TIME SVC\n         XC   DATE1,DATE1       RAZ AVANT CVB\n         ST   R1,DATE           DATE DU JOUR SOUS FORME AAQQQ\n         CVB  R1,DATE1\n         XR   R0,R0             R0 = 0 POUR LA DIVISION\n         D    R0,=F'1000'       CALCULER L'ANNEE AA\n         ST   R1,ANNEE          ANNEE AA\n         ST   R0,QUANTIEM       QUANTIEME QQQ\n         SLL  R1,2              DIVISER PAR 4 POUR VOIR SI BISSEXTILE\n         SRL  R1,2              MULTIPLIER PAR 4\n         C    R1,ANNEE          COMPARER, SI EGALITE, BISSEXTILE\n         BNE  NONBISSX          ANNEE NON BISSEXTILE\n         MVC  MOISTB+2(2),=H'29'    BISSEXTILE, FEVRIER A 29 JOURS\nNONBISSX DS   0H\n         LA   R1,1              1ER MOIS = JOANVIER (01)\n         LA   R2,MOISTB         TABLE DES MOIS\n         LA   R3,12             12 MOIS MAXIMUM\n         L    R8,QUANTIEM       QQQ (DE 1 A 365/366)\nLOOP3A   SH   R8,0(R2)          QQQ - NOMBRE DE JOURS DU MOIS\n         BNP  FINMOIS           SI <=0 C'EST FINI\n         LA   R1,1(0,R1)        + 1 SUR NOTRE NUMERO DE MOIS\n         LA   R2,2(0,R2)        NOMBRE DE JOURS DU MOIS SUIVANT\n         BCT  R3,LOOP3A\nFINMOIS  ST   R1,MOIS           ** NUMERO DU MOIS COURANT (1 @ 12) **\n         CVD  R1,MOISPACK       CONVERSION EN PACKE\n         UNPK NUMMOIS,MOISPACK+6(2)    CONVERSION SOUS FORME MM\n         OI   NUMMOIS+1,X'F0'   NORMALISER LE SIGNE\n*\n* FAIRE LE CONTROLE\n*\n         L    R4,ADDPASS       ADRESSE ZONE PSWD\n         L    R6,LONGPASS      LONGUEUR ZONE NEW PASSWORD\n         S    R6,=F'1'         ENLEVER 1\nLOOP3B   CLC  NUMMOIS,0(R4)    COMPARER NUMERO MOIS AVEC PASSWORD\n         BE   CHECK3\n         LA   R4,1(0,R4)       CARACTERE SUIVANT PASSWORD\n         BCT  R6,LOOP3B        AVANCER DANS LE PASSWORD\n         B    CONTROL4         CONTROLE PASSE AVEC SUCCES\nCHECK3   DS   0H\n         WTO  'ICHPWX01C- PASSWORD INCORRECT, NE DOIT PAS COMPORTER LE X\n               NUMERO DU MOIS COURANT',ROUTCDE=11\n         B    REJECT           NEW PASSWORD INVALIDE\n*\n*---------------------------------------------------------------------*\n* CONTROLE 4 : LE NEW PASSWORD NE DOIT PAS CONTENIR PLUS DE 3 FOIS\n*            DE SUITE LE MEME CARACTERE\n*---------------------------------------------------------------------*\n*\nCONTROL4 DS   0H\n* POUR DESACTIVER LE CONTROLE : CHANGER LE \"NOP\" QUI SUIT EN \"B\"\n         NOP  CONTROL5\n         CLC  LONGPASS,=F'2'   CONTROLE IMPOSSIBLE SI LE PASSWORD ...\n         BNH  CONTROL5         ... A MOINS DE 3 CARACTERES\n         L    R4,ADDPASS       ADRESSE ZONE PSWD\n         L    R6,LONGPASS      LONGUEUR ZONE NEW PASSWORD\n         S    R6,=F'2'         ENLEVER 2\nLOOP4    CLC  0(1,R4),1(R4)    COMPARER CARACTERE AVEC LE SUIVANT\n         BNE  NEXT4\n         CLC  1(1,R4),2(R4)    COMPARER LE SUIVANT AVEC SON SUIVANT\n         BE   CHECK4\nNEXT4    LA   R4,1(0,R4)       CARACTERE SUIVANT PASSWORD\n         BCT  R6,LOOP4         AVANCER DANS LE PASSWORD\n         B    CONTROL5         CONTROLE PASSE AVEC SUCCES\nCHECK4   DS   0H\n         WTO  'ICHPWX01D- PASSWORD INCORRECT, NE DOIT PAS COMPORTER PLUX\n               S DE 3 CARACTERES IDENTIQUES CONSECUTIFS',ROUTCDE=11\n         B    REJECT           NEW PASSWORD INVALIDE\n*\n*---------------------------------------------------------------------*\n* CONTROLE 5 : LE NEW PASSWORD NE DOIT PAS CONTENIR PLUS DE 2 CARACT.\n*            CONSECUTIFS D'UNE TABLE DE CARACTERES ETIC (SITUES A\n*            PROXIMITE LES UNS DES AUTRES SUR LE CLAVIER)\n*---------------------------------------------------------------------*\n*\nCONTROL5 DS   0H\n* POUR DESACTIVER LE CONTROLE : CHANGER LE \"NOP\" QUI SUIT EN \"B\"\n         NOP  CONTROL6\n         CLC  LONGPASS,=F'2'   CONTROLE IMPOSSIBLE SI LE PASSWORD ...\n         BNH  CONTROL6         ... A MOINS DE 3 CARACTERES\n         L    R4,ADDPASS       ADRESSE ZONE PSWD\n         L    R6,LONGPASS      LONGUEUR ZONE NEW PASSWORD\n         S    R6,=F'2'         ENLEVER 2\nLOOP5A   LA   R8,TBETIC        TABLE SPECIALE\n         LA   R2,LTBETIC       LONGUEUR DE LA TABLE SPECIALE\n         S    R2,=F'2'         ENLEVER 2\nLOOP5B   CLC  0(1,R4),0(R8)    COMPARER CARACTERE AVEC CARACT TABLE\n         BNE  NEXT5B\n         CLC  1(1,R4),1(R8)    COMPARER CARACT. SUIVANT AVEC SUIVANT TB\n         BNE  NEXT5B\n         CLC  2(1,R4),2(R8)    COMPARER CARACT. SUIVANT AVEC SUIVANT TB\n         BE   CHECK5\nNEXT5B   LA   R8,1(0,R8)       CARACTERE SUIVANT EN TABLE SPECIALE\n         BCT  R2,LOOP5B\n         LA   R4,1(0,R4)       CARACTERE SUIVANT PASSWORD\n         BCT  R6,LOOP5A        AVANCER DANS LE PASSWORD\n         B    CONTROL6         CONTROLE PASSE AVEC SUCCES\nCHECK5   DS   0H\n         WTO  'ICHPWX01E- PASSWORD INCORRECT, NE DOIT PAS COMPORTER 3 CX\n               ARACTERES PROCHES LES UNS DES AUTRES SUR LE CLAVIER',   X\n               ROUTCDE=11\n         B    REJECT           NEW PASSWORD INVALIDE\n*\n*---------------------------------------------------------------------*\n* CONTROLE 6 : LE NEW PASSWORD NE DOIT PAS CONTENIR PLUS DE 3 CARACT.\n*            CONSECUTIFS DU MOT DE PASSE PRECEDENT\n*---------------------------------------------------------------------*\n*\nCONTROL6 DS   0H\n* POUR DESACTIVER LE CONTROLE : CHANGER LE \"NOP\" QUI SUIT EN \"B\"\n         NOP  CONTROL7\n         L    R4,PWXCURPW      ADRESSE CURRENT PASSWORD\n         LTR  R4,R4\n         BZ   CONTROL7         PAS DE PASSWORD, PAS DE CONTROLE\n         XR   R6,R6\n         IC   R6,0(R4)         LONGUEUR DU CURRENT PASSWORD\n         LTR  R6,R6\n         BZ   CONTROL7         PAS DE PASSWORD, PAS DE CONTROLE\n         LA   R4,1(0,R4)       SAUTER LA LONGUEUR\n         ST   R4,ADDPASSC      ADRESSE ZONE PSWD CURRENT\n         ST   R6,LONGPASC      LONGUEUR ZONE PASSWORD\n*\n         CLC  LONGPASC,=F'3'   CONTROLE IMPOSSIBLE SI LE PASSWORD ...\n         BNH  CONTROL7         ... A MOINS DE 4 CARACTERES\n         CLC  LONGPASS,=F'3'   CONTROLE IMPOSSIBLE SI LE PASSWORD ...\n         BNH  CONTROL7         ... A MOINS DE 4 CARACTERES\n         MVI  PASSCURR,X'00'   INIT DE LA ZONE PASSCURR DE TRAVAIL\n         MVC  PASSCURR+1(7),PASSCURR\n         BCTR R6,0             LONGUEUR PASSWORD - 1 POUR EXECUTE\n         EX   R6,MOVPASSC      COPIER ZONE PASSWORD\n         LA   R3,PASSCURR      ADRESSE DU CURRENT PASSWORD EN WORK\n         LA   R2,5             5 COMPARAISONS SUR LE PASSCURR\nLOOP6A   LA   R4,PASSWORD      ADRESSE DU NEW PASSWORD EN WORK\n         LA   R1,5             5 COMPARAISONS SUR LE PASSWORD\nLOOP6B   CLC  0(4,R3),0(R4)    COMPARE 4 C. PASSWORD AVEC 4 C. PASSWORD\n         BE   CHECK6           EGALITE, REFUS\n         LA   R4,1(0,R4)       CARACTERES SUIVANTS DU PASSWORD NOUVEAU\n         BCT  R1,LOOP6B\n         LA   R3,1(0,R3)       CARACTERES SUIVANTS DU PASSWORD COURANT\n         BCT  R2,LOOP6A\n         B    CONTROL7         CONTROLE PASSE AVEC SUCCES\nCHECK6   DS   0H\n         WTO  'ICHPWX01F- PASSWORD INCORRECT, NE DOIT PAS COMPORTER PLUX\n               S DE 3 CARACTERES CONSECUTIFS DU PASSWORD PRECEDENT',   X\n               ROUTCDE=11\n         B    REJECT           NEW PASSWORD INVALIDE\nMOVPASSC MVC  PASSCURR(1),0(R4)  COPIER ZONE PASSWORD\n*\nCONTROL7 DS   0H\n         B    ACCEPT\n*\n* REFUS\n*\nREJECT   DS   0H\n         LA   R2,WORKLONG\n         FREEMAIN  R,LV=(2),A=(10)\n         LA   R15,4             ** REFUS DU NEW PASSWORD **\n         B    FIN\n*\n* ACCEPTATION\n*\nACCEPT   DS   0H\n         LA   R2,WORKLONG\n         FREEMAIN  R,LV=(2),A=(10)\nRET0     DS   0H\n         WTO  'ICHPWX01Z- MODIFICATION DU MOT DE PASSE',ROUTCDE=11\n*\n* FIN\n*\nQUICKEND XR   R15,R15\nFIN      ST   R15,16(R13)      METTRE CODE RETOUR DANS SAVE AREA\n         LM   R14,R12,12(R13)\n         BR   R14              RETOUR A L'APPELANT\n*\n* DONNEES FIXES\n*\nMOISFRAN DC   C'JANFEVMARAVRMAIJUIJUIAOUSEPOCTNOVDEC'\nMOISANGL DC   C'JANFEBMARAPRMAYJUNJULAUGSEPOCTNOVDEC'\nMOISREF  DC   H'31',H'28',H'31',H'30',H'31',H'30'\n         DC   H'31',H'31',H'30',H'31',H'30',H'31'\nTBETIC   DC   C'1234567890AZERTYUIOPQSDFGHJKLMWXCVBN'\n         DC   C'1AQW2ZSX3EDC4RFV5TGB6YHN7UJ8IK9OL0PM'\nLTBETIC  EQU  *-TBETIC\n         LTORG\n*\n* ZONE DE TRAVAIL\n*\nWORKZONE DSECT\nMOISPACK DS   D                MOIS EN COURS (PACKE)\nDATE1    DS   0D\n         DS   F\nDATE     DS   F                DATE DU JOUR AAQQQ\nMOISTB   DS   0CL24\n         DS   12H              TABLE DES NOMBRES DE JOURS PAR MOIS\nLONGUSER DS   F                LONGUEUR EN C. DE LA ZONE USERID\nLONGPASS DS   F                LONGUEUR EN C. DE LA ZONE NEW PASSWORD\nLONGPASC DS   F                LONGUEUR EN C. DE LA ZONE CUR PASSWORD\nADDUSER  DS   F                ADRESSE DE LA ZONE USERID\nADDPASS  DS   F                ADRESSE DE LA ZONE NEW PASSWORD\nADDPASSC DS   F                ADRESSE DE LA ZONE CURRENT PASSWORD\nUSERID   DS   CL8              USERID\nPASSWORD DS   CL8              ZONE NEW PASSWORD\nPASSCURR DS   CL8              ZONE CURRENT PASSWORD\nANNEE    DS   F                ANNEE AA\nQUANTIEM DS   F                QUANTIEME QQQ\nMOIS     DS   F                MOIS EN COURS (BINAIRE)\nNUMMOIS  DS   CL2              MOIS EN COURS (NUM DISPLAY)\nWORKLONG EQU  *-WORKZONE\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IGGPRE00": {"ttr": 2312, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x991_\\x00\\x991_\\x11P\\x01\\xce\\x01\\xce\\x00\\x00\\xe3\\xc8\\xc9\\xc5\\xd9\\xd9\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-11-11T00:00:00", "modifydate": "1999-11-11T11:50:00", "lines": 462, "newlines": 462, "modlines": 0, "user": "THIERRY"}, "text": "***********************************************************************\n*                                                                     *\n*             DADSM PRE-PROCESSING EXIT (IGGPRE00) :                  *\n*                                                                     *\n* - CET EXIT EST APPELE EN MODE SUPERVISEUR, CLE DE PROTECTION 0      *\n* - CET EXIT EST APPELE APRES CONTROLE DE VALIDITE DES PARAMETRES ET  *\n* AVANT MISE A JOUR DE LA VTOC POUR LES FONCTIONS : ALLOCATE, EXTEND, *\n* SCRATCH, PARTIAL RELEASE, RENAME. UN CODE RETOUR 0 INDIQUE A L'APPE-*\n* LANT QUE LA FONCTION DADSM EST AUTORISEE ET PEUT COMMENCER.         *\n* - SEULES LES FONCTIONS ALLOCATE ET EXTEND SONT TRAITEES PAR L'EXIT. *\n* - L'ACCES EST PERMIS SI USER A L'ACCES UPDATE SUR LA RESSOURCE RACF *\n* VOLUME, CLASSE ALLOC.                                               *\n*                                                                     *\n*             EMPLOI DES REGISTRES :                                  *\n*                                                                     *\n*  R2   = TRAVAIL (ADRESSAGE DE CERTAINS BLOCS DE CONTROLE)           *\n*  R3   DISPONIBLE                                                    *\n*  R4   = TRAVAIL (ADRESSE DE RETOUR)                                 *\n*  R5   = REASON CODE DU REJET :                                      *\n*              1 : RESSOURCE INCONNUE DE RACF ET USER NON OPERATIONS  *\n*              2 : ACCES INTERDIT PAR RACF POUR CETTE RESSOURCE       *\n*              3 : CODE RETOUR APRES RACHECK DIFFERENT DE 0, 4, 8     *\n*              4 : GETMAIN POUR ZONE DE TRAVAIL A ECHOUE              *\n*                                                                     *\n*  R6   DISPONIBLE                                                    *\n*  R7   DISPONIBLE                                                    *\n*  R8   DISPONIBLE                                                    *\n*                                                                     *\n*  R9   = CODE RETOUR POUR LE PROGRAMME APPELANT :                    *\n*   1)ALLOC    0 : ALLOCATION AUTORISEE                               *\n*     -----    4 : ALLOCATION REFUSEE POUR CE VOLUME (X'B4')          *\n*              8 : ALLOCATION REFUSEE (INCONDITIONNELLEMENT) (X'B0')  *\n*   2)EXTEND   SI R9 <> 0, REFUSEE                                    *\n*     ------                                                          *\n*                                                                     *\n*  R10  DISPONIBLE                                                    *\n*  R11  = ADRESSE ZONE PARAMETRE PASSEE A L'EXIT, MACRO IECIEXPL      *\n*  R12  = REGISTRE DE BASE POUR LA CSECT                              *\n*  R13  = ADRESSE ZONE TRAVAIL OBTENUE PAR GETMAIN POUR RE-ENTRANCE   *\n*                                                                     *\n*                                                                     *\n*  NOTES DE PROGRAMMATION :                                           *\n*  ----------------------                                             *\n*                                                                     *\n*  CE MODULE SERA EN PLPA -> RE-ENTRANCE ABSOLUMENT NECESSAIRE        *\n*     CE QUI IMPLIQUE :                                               *\n*  1) UTILISATION DES MACROS SOUS FORME MF=L ET MF=(E,XX)             *\n*     (INUTILE SI MACRO INVARIANTES, COMME WTO D'UN MESSAGE FIGE)     *\n*  2) LA PLPA EST CONSTITUEE DE PAGES QUI SONT **READ-ONLY **         *\n*     PAS QUESTION DE STOCKER DES DONNEES DANS CE MODULE, ON DOIT     *\n*     STOCKER LES DONNEES DANS L'ESPACE WORK OBTENU PAR GETMAIN (ET   *\n*     QUI EST EN FAIT DANS LA PRIVATE DE L'ESPACE-ADRESSE APPELANT).  *\n*                                                                     *\n*                                                                     *\n*  CET EXIT ET  R A C F :                                             *\n*  --------------------                                               *\n*                                                                     *\n*  L'EXIT VERIFIE, POUR LES FONCTIONS : ALLOCATION , EXTEND ,         *\n*     QUE LE USER EST AUTORISE EN UPDATE SUR LA RESSOURCE VOLSER      *\n*     CLASSE ALLOC.                                                   *\n*  CETTE VERIFICATION EST EFFECTUEE PAR LA MACRO : RACROUTE,          *\n*     QUI UTILISE L'INTERFACE SAF (SYSTEM AUTHORIZATION FACILITY)     *\n*     LE ROUTER MVS PASSE LE CONTROLE AU ROUTER RACF (ICHRFR00)       *\n*     QUI SE BASE SUR LA RACF ROUTER TABLE (ICHRFR01) POUR TRAITER    *\n*     LA DEMANDE -> ICHRFR01 ET ICHRRCDE DOIVENT ETRE A NIVEAU...     *\n*                                                                     *\n*  CAS PARTICULIERS ET DECISIONS DE L'EXIT :                          *\n*  ---------------------------------------                            *\n*                                                                     *\n*     SAF  INACTIF -> TOUT EST PERMIS                                 *\n*     RACF INACTIF -> TOUT EST PERMIS                                 *\n*     CLASSE ALLOC INACTIVE -> TOUT EST PERMIS                        *\n*                                                                     *\n***********************************************************************\n*\n         EJECT\n         LCLC  &WTO\n&WTO     SETC  'NO'       WTO A ENVOYER A CHAQUE ANOMALIE\n* CODER AUTRE CHOSE QUE 'YES' PERMET DE SUPPRIMER TOUS LES MESSAGES\n         TITLE '**    IGGPRE00 - DADSM PRE-PROCESSING EXIT    **'\nIGGPRE00 CSECT\n         PRINT  ON,NOGEN\n         SAVE  (14,12),,IGGPRE00-&SYSDATE-&SYSTIME\n         SPACE\n         LR    R12,R15             REGISTRE DE BASE = R12\n         USING IGGPRE00,R12        ADRESSABILITE DE LA CSECT\n         SPACE\n         LR    R11,R1              LISTE DE PARAMETRES IECIEXPL\n         USING PREPL,R11           ADRESSEE PAR R11\n         USING WORK,R13            ADRESSABILITE ZONE DE TRAV. RACHECK\n         SPACE\n         SR    R5,R5               REASON CODE 0 A PRIORI\n         SR    R9,R9               CODE RETOUR 0 A PRIORI\n         TM    IEXFLAG,IEXVIO      VIO   DATA SET ?\n         BO    EXIT                OUI - FIN , TOUT EST PERMIS\n         SPACE\n         CLI   IEXFUNC,IEXALL      FONCTION ALLOCATE ?\n         BNE   EXIT                NON ==>\n         SPACE\n*\n*    A L L O C A T E\n*\nALLOCFCT BAL   R4,SETUP            PREPARER LA ZONE WORK\n         TM    INDICE,JFCTEMP      FICHIER ALLOUE EN TEMPORAIRE ?\n         BO    RTNTOCLR            OUI, AUTORISE\n         TM    FLAGSMS,UCBSMS      VOLUME SMS ?    RAJOUT TF 03-10-1990\n         BO    RTNTOCLR            OUI, AUTORISE             03-10-1990\n         BAL   R4,CHECKS           DIVERSES VERIFS SUR L'ETAT DE RACF\n         LTR   R15,R15\n         BZ    RTNTOCLR            AUTORISE INCONDITIONNELLEMENT\n         SPACE\n         TM    FLAG1,OPER          USER OPERATIONS ?\n         BO    RTNTOCLR            OUI, ON L'AUTORISE\n         SPACE\n         BAL   R14,ISSUERAC        RACHECK VIA RACROUTE ==> R15\n         B     RTNTOCLR            ET RETOUR\n         SPACE\n*\n*    F  I  N\n*\nRTNTOCLR DS    0H\n         SPACE\n         STH   R5,IEXREASN         POSITIONNER LE REJECT REASON CODE\n         SPACE\n         LR    R1,R13              ADRESSER LA ZONE DE WORK\n         SPACE\n         L     R13,4(,R1)          RESTAURE ADRESSE SAVE AREA APPELANT\n         SPACE\n         LA    R0,WKEND-WKSTART    LONGUEUR ZONE DE TRAVAIL\n         FREEMAIN RU,LV=(0),A=(1)  LIBERER ZONE MEMOIRE ALLOUEE A WORK\nEXIT     DS    0H\n         LR    R15,R9              RESTAURE CODE RETOUR\n         SPACE\n         RETURN (14,12),RC=(15)    RETOUR APPELANT\n         EJECT\n*\n***********************************************************************\n* 1) VERIFIER QUE LE ROUTER MVS SAF EST PRESENT POUR RACROUTE         *\n* 2) VERIFIER QUE LA CLASSE ALLOC EST ACTIVE ET DEFINIE               *\n*    VERIFIER QUE RACF EST ACTIF                                      *\n* A RENVOYER : R15=0 SI AUTORISATION INCONDITIONNELLE (CAR ANOMALIE)  *\n*              R15=4 SI RACROUTE NORMAL A EFFECTUER                   *\n***********************************************************************\n*\nCHECKS   DS    0H\n         L     R2,CVTPTR           CHARGER ADRESSE DE LA CVT\n         USING CVT,R2\n         ICM   R2,B'1111',CVTSAF   ADRESSE ROUTER VECTOR TABLE\n         DROP  R2\n         BNZ   SAFACTIF\n* SAF INACTIF : LE RACROUTE RENVERRA SYSTEMATIQUEMENT R15=4\n         AIF   ('&WTO' NE 'YES').L1\n         WTO   'IGGPRE00-001  SAF ROUTER INDISPONIBLE, ACCES AUTORISE',*\n               ROUTCDE=11          ENVOI MESSAGE AU PROGRAMMEUR\n.L1      ANOP\n         XR    R15,R15             ACCES PERMIS INCONDITIONNELLEMENT\n         B     FINCHEK\n*\nSAFACTIF DS    0H                  SAF ROUTER PRESENT=RACROUTE POSSIBLE\n* VERIFIER LE STATUS DE RACF\n         MVC   WKRACSTA(RACSTL),RACSTAT\n         RACSTAT  CLASS=ALLOC,MF=(E,WKRACSTA)\n         LTR   R15,R15\n         BNZ   CHENOT0\n         LA    R15,4               POURSUIVRE LES CONTROLES NORMALEMENT\n         B     FINCHEK\n*      R15=0 : RACF ACTIF CLASSE ACTIVE\nCHENOT0  DS    0H\n         C     R15,CON4\n         BNE   CHENOT4\n*      R15=4 : RACF ACTIF, CLASSE INACTIVE\n         AIF   ('&WTO' NE 'YES').L2\n         WTO   'IGGPRE00-002  CLASSE ALLOC INACTIVE, ACCES AUTORISE',  *\n               ROUTCDE=11          ENVOI MESSAGE AU PROGRAMMEUR\n.L2      ANOP\n         XR    R15,R15             ACCES PERMIS INCONDITIONNELLEMENT\n         B     FINCHEK\nCHENOT4  DS    0H\n         C     R15,CON8\n         BNE   CHENOT8\n*      R15=8 : RACF ACTIF, CLASSE NON DEFINIE\n         AIF   ('&WTO' NE 'YES').L3\n         WTO   'IGGPRE00-003  CLASSE ALLOC INCONNUE, ACCES AUTORISE',  *\n               ROUTCDE=11          ENVOI MESSAGE AU PROGRAMMEUR\n.L3      ANOP\n         XR    R15,R15             ACCES PERMIS INCONDITIONNELLEMENT\n         B     FINCHEK\nCHENOT8  DS    0H\n*      R15>=12 : RACF INACTIF\n         AIF   ('&WTO' NE 'YES').L4\n         WTO   'IGGPRE00-004  RACF INACTIF, ACCES AUTORISE',           *\n               ROUTCDE=11          ENVOI MESSAGE AU PROGRAMMEUR\n.L4      ANOP\n         XR    R15,R15             ACCES PERMIS INCONDITIONNELLEMENT\n*\nFINCHEK  BR    R4\n         EJECT\n*\n***********************************************************************\n*    FONCTION   ALLOCATE                                              *\n*        FAIRE RACHECK VIA RACROUTE -                                 *\n*        SI CODE RETOUR 0 - C'EST PERMIS                              *\n*        SI CODE RETOUR 4 - RESSOURCE INCONNUE, REJET SAUF SI         *\n*                           USER A L'ATTRIBUT OPERATIONS              *\n*        SI CODE RETOUR 8 - ACCES INTERDIT PAR RACF -> REJET          *\n*        AUTRE CODE RETOUR -> REJET                                   *\n*                                                                     *\n* CE PARAGRAPHE DOIT RETOURNER :                                      *\n*        R5 -> REASON CODE  (=0 PAR DEFAUT)                           *\n*        R9 -> CODE RETOUR  (=0 PAR DEFAUT, =8 SI REJET)              *\n*                                                                     *\n***********************************************************************\n*\nISSUERAC DS    0H\n         ST    R14,ISSUER14        SAUVER L'ADRESSE DE RETOUR\n         SPACE\n         MVC   WKRACK(RACKLEN),RACK1   PREPARE RACHECK LOG=ASIS\n         SPACE\nISSU0010 DS    0H\n*        RACHECK\n         RACROUTE REQUEST=AUTH,                                        *\n               ENTITY=(VOLSER),                                        *\n               MF=(E,WKRACK),                                          *\n               WORKA=RACWORK\n* RAJOUTER INSTLN=INST POUR ADRESSE INSTALLATION DATA POUR EXIT RACHECK\n         SPACE 3\n*---------------------------------------------------------------------*\n* CODE RETOUR = 0      --->   LE USER EST AUTORISE                    *\n*---------------------------------------------------------------------*\n         LTR   R15,R15             ACCES AUTORISE  ?\n         BZ    AUTHOK              OUI - RETURN ==>\n         SPACE\nNOTAUTH  DS    0H\n         C     R15,CON4            CODE 4 , RESSOURCE INCONNUE\n         BNE   NOTAUTH1\n         SPACE 3\n*---------------------------------------------------------------------*\n* CODE RETOUR = 4      --->   LA RESSOURCE N'EXISTE PAS               *\n*---------------------------------------------------------------------*\n         B     AUTHEND       ** VOLUME INCONNU DE RACF -> PERMIS\n         SPACE\nNOTAUTH1 DS    0H\n         C     R15,CON8            ACCES INTERDIT ?\n         BNE   NOTAUTH2            NO ==>\n         SPACE 3\n*---------------------------------------------------------------------*\n* CODE RETOUR = 8      --->   LE USER NON AUTORISE A LA RESSOURCE     *\n*---------------------------------------------------------------------*\n**TF     AIF   ('&WTO' NE 'YES').L7\n         WTO   'IGGPRE00-006 ALLOCATION INTERDITE SUR CE VOLUME',      *\n               ROUTCDE=11          ENVOI MESSAGE AU PROGRAMMEUR\n         BAL   R4,MESSVOL          ENVOI MESSAGE INDIQUANT VOLUME\n.L7      ANOP\n         LA    R9,REJREQ           REJECT THE REQUEST\n         LA    R5,ACU              ACCES INTERDIT\n         B     AUTHEND             END ==>\n         SPACE 3\n*---------------------------------------------------------------------*\n* AUTRE CODE RETOUR    --->   ON REFUSE L'ACCES                       *\n*---------------------------------------------------------------------*\nNOTAUTH2 DS    0H\n         LA    R9,REJREQ           REJECT THE REQUEST\n         LA    R5,BADRC            CODE RETOUR RACHECK SURPRENANT\n         B     AUTHEND             END ==>\n         SPACE\nAUTHOK   DS    0H\n         XR    R9,R9              CODE RETOUR = 0\n         SPACE\nAUTHEND  DS    0H\n         L     R14,ISSUER14        RESTORE RETURN REG\n         BR    R14                 RETURN ==>\n         EJECT\n*\n*\n*\n***********************************************************************\n*                                                                     *\n*        ENVOI DU MESSAGE SIGNALANT LE VOLUME QUI POSE DES PBS        *\n*                                                                     *\n***********************************************************************\n*\nMESSVOL  DS    0H\n         MVC   WTO1(WTOLONG),WTOLIST\n         MVC   WTOVOL(6),VOLSER\n         MVC   WTODSNAM(44),DSNAME\n         WTO   MF=(E,WTO1)         ** ENVOI MESSAGE A L'ECRAN **\n         BR    R4                  RETOUR\n*\n***********************************************************************\n*                                                                     *\n*        SUBROUTINE TO GET AND INITIALISE THE WORK AREA               *\n*                                                                     *\n* CE PARAGRAPHE DOIT RENVOYER :                                       *\n*        FLAG1  : FLAG USER OPERATIONS                                *\n*        VOLSER : VOLUME CONCERNE PAR ALLOCATE/EXTEND                 *\n*        R13 ->  POINTE SUR ZONE TEMPORAIRE                           *\n***********************************************************************\n*\nSETUP    DS    0H\n         SPACE\n         LA    R0,WKEND-WKSTART    LONGUEUR ZONE WORK  (SUBPOOL 0)\n         GETMAIN RU,LV=(0)         ACQUERIR ZONE DE TRAVAIL\n         LTR   R15,R15\n         BZ    CONTIN\n* PB LORS DU GETMAIN -> ACCES REFUSE\n         AIF   ('&WTO' NE 'YES').L5\n         WTO   'IGGPRE00-008 UNABLE TO GET STORAGE FOR RXF-DADSM EXIT',*\n               ROUTCDE=11          ENVOI MESSAGE AU PROGRAMMEUR\n.L5      ANOP\n         LA    R5,4\n         STH   R5,IEXREASN         REASON CODE 4\n         LA    R9,4\n         B     EXIT                RETOUR DIRECT PGM APPELANT\n         SPACE\n* CHAINAGE DES SAVE AREAS :\nCONTIN   DS    0H\n         ST    R1,8(0,R13)         ADRESSE DE MA S.A. -> S.A. APPELANT\n         ST    R13,4(0,R1)         ADRESSE S.A. APPELANT -> MA S.A.\n         SPACE\n         LR    R13,R1              ADRESSER LA ZONE WORK PAR R13\n         SPACE\n         MVI   FLAG1,X'00'         FLAG PAR DEFAUT : USER NON OPERATION\n         SPACE\n         USING PSA,R0              PSA ADRESSABILITE BIDON (ADRESSE 0)\n         L     R2,PSAANEW          ASCB POINTEUR\n         DROP  R0\n         USING ASCB,R2             ASCB ADRESSABILITE\n         L     R2,ASCBASXB         ASXB POINTEUR\n         DROP  R2\n         USING ASXB,R2             ASXB ADRESSABILITE\n         L     R2,ASXBSENV         ACEE POINTEUR\n         DROP  R2\n         USING ACEE,R2             ACEE ADRESSABILITE\n         TM    ACEEFLG1,ACEEOPER   USER A L'ATTRIBUT OPERATIONS ?\n         BNO   SETU0010            NON ==>\n         OI    FLAG1,OPER          METTONS FLAG OPERATIONS\n         DROP  R2\n         SPACE\nSETU0010 DS    0H\n         SPACE\n* RECUPERER LE VOLSER OU EST TENTEE L'ALLOCATION\n         L     R2,IEXUCB           UCB POINTEUR\n         USING UCBCMSEG,R2         ADRESSABILITE DE L'UCB\n         MVC   VOLSER,UCBVOLI      SAUVER LE VOLSER\n* RAJOUT TF 03-10-1990 : PAS DE CONTROLE SI VOLUME SMS\n         MVC   FLAGSMS,UCBFL5      VOLUME SMS ?    RAJOUT TF 03-10-1990\n         DROP  R2\n* RECUPERER LE DSNAME\n         L     R2,IEXDSN           DSN POINTEUR\n         MVC   DSNAME,0(R2)        LE STOCKER CHEZ NOUS\n* RECUPERER LE JFCB POUR SAVOIR SI ALLOC DE FICHIER TEMPORAIRE\n         L     R6,IEXPTR1          JFCB\n         USING INFMJFCB,R6\nAMODSUIT DS    0H                                            13-2-89\n*     ACCEDER AU JFCB                                        13-2-89\n         MVC   INDICE,JFCBIND2     MOVE INDICATEUR\n         DROP  R6\n         SPACE\n         BR    R4                  RETURN ==>\n         EJECT\n*\n*  - RACHECK SOUS FORME LISTE AVEC LOG=ASIS (VALEUR PAR DEFAUT) :\n*       LES ACCES SONT ENREGISTRES DANS LES FICHIERS SMF\n*       SELON CE QUI A ETE SPECIFIE LORS DE ADDSD/ALTDSD/RDEFINE/RALTER\n*\nRACK1    RACROUTE REQUEST=AUTH,ENTITY=(0),CLASS='ALLOC',ATTR=UPDATE,   *\n               LOG=ASIS,MF=L\n         SPACE 3\n*\n*  - RACSTAT SOUS FORME LISTE\n*\nRACSTAT  RACSTAT  CLASS='ALLOC',MF=L\n*\n*  - WTO     SOUS FORME LISTE\n*\nWTOLIST  WTO   'IGGPRE00-009 VVVVVV DDDDDDDD.DDDDDDDD.DDDDDDDD.DDDDDDDD*\n               .DDDDDDDD           ',ROUTCDE=11,MF=L  SIGNALER VOL-DSN\n         CNOP  2,4\nCON4     DC    F'4'\nCON8     DC    F'8'\nALLOC    DC    CL8'ALLOC'\n         LTORG\n         TITLE '***** IGGPRE00 - EQUATES *****'\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 4\nRNK      EQU   1                   RESSOURCE INCONNUE\nACU      EQU   2                   ACCES INTERDIT\nBADRC    EQU   3                   BAD RC FROM RACHECK\nREJREQ   EQU   4       20-6-89     REJECT THE REQUEST POUR CE VOLUME\n         TITLE '***** IGGPRE00 - DATA AREAS *****'\nPATCHES  DC    0A(PATCHES),40S(*)\n TITLE '* DSECT DE TRAVAIL POUR RE-ENT. : Y METTRE ZONES TEMPORAIRES '\nWORK     DSECT ,\nWKSTART  EQU   *\nWKSAVE   DS    18F                 OS SAVE AREA , DOIT RESTER EN 1ER\n         SPACE 2\n*\nISSUER14 DS    F                   ADRESSE DE RETOUR\nEXTENR14 DS    F                   ADRESSE DE RETOUR\n         SPACE 2\n*\nVOLSER   DS    CL6                 VOLUME SERIAL NUMBER\nDSNAME   DS    CL44                DATA SET NAME\nINDICE   DS    CL1                 INDICATEUR JFCB\nFLAGSMS  DS    CL1            FLAG VOLUME SMS      RAJOUT TF 03-10-1990\n*\n* ZONES DE TRAVAIL POUR RACHECK\n*\nWKRACK   DS    0H       ZONE BIDON INITIALISEE AVANT RACHECK\n*\n         RACROUTE REQUEST=AUTH,ENTITY=(R3),CLASS='ALLOC',ATTR=UPDATE,  *\n               LOG=ASIS,WORKA=RACWORK,MF=L\n*              INSTLN=INST  ADRESSE INSTALLATION DATA POUR EXIT RACHECK\nRACKLEN  EQU   *-WKRACK\n         SPACE 2\n*\n*  - RACSTAT SOUS FORME LISTE\n*\nWKRACST1 DS    0H\nWKRACSTA RACSTAT  CLASS='ALLOC',MF=L\nRACSTL   EQU   *-WKRACST1\n*\n*\n*  - WTO     SOUS FORME LISTE\n*\nWTODEBUT DS    0H\nWTO1     WTO   'IGGPRE00-009 VVVVVV DDDDDDDD.DDDDDDDD.DDDDDDDD.DDDDDDDD*\n               .DDDDDDDD           ',ROUTCDE=11,MF=L  SIGNALER VOL-DSN\nWTOVOL   EQU   WTO1+17     ADRESSE OU ECRIRE LE NOM DU VOLUME\nWTODSNAM EQU   WTO1+24     ADRESSE OU ECRIRE LE NOM DU FICHIER\nWTOLONG  EQU   *-WTODEBUT\n*\n         SPACE 3\nRACWORK  DS    XL512               WORK AREA FOR RACROUTE\nFLAG1    DS    X\nOPER     EQU   X'40'               USER A L'ATTRIBUT OPERATIONS\nWKEND    DS    0D\n         IECIEXPL ,                EXIT PARM LIST\n         IEFUCBOB   LIST=YES       UCB\n         IHAPSA   ,                PSA\n         IHAASCB  ,                ASCB\n         IHAASXB  ,                ASXB\n         IHAACEE  ,                ACEE\nIEFJFCBN DSECT\n         IEFJFCBN ,                JFCB\n         CVT   DSECT=YES           CVT\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "INTERCPT": {"ttr": 2566, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x991_\\x00\\x991_\\x11P\\x02\\xf9\\x02\\xf9\\x00\\x00\\xe3\\xc8\\xc9\\xc5\\xd9\\xd9\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-11-11T00:00:00", "modifydate": "1999-11-11T11:50:00", "lines": 761, "newlines": 761, "modlines": 0, "user": "THIERRY"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "IRA200E": {"ttr": 2824, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x991_\\x00\\x991_\\x11P\\x00\\x19\\x00\\x19\\x00\\x00\\xe3\\xc8\\xc9\\xc5\\xd9\\xd9\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-11-11T00:00:00", "modifydate": "1999-11-11T11:50:00", "lines": 25, "newlines": 25, "modlines": 0, "user": "THIERRY"}, "text": "//*\n//* THIS MEMORY ZAP ALLOWS YOU TO CHANGE THE 70% AND 85 % THRESHOLDS\n//* TO MORE AGGRESSIVE VALUES : 90% AND 95 %.\n//*\n//* IT IS DESTINED TO B&B RESOLVE CUSTOMERS, BUT ANY OTHER MONITOR\n//* COULD DO IT.\n//*\n//* IRA200E AUXILIARY STORAGE SHORTAGE\n//* 70% OF ALL AVAILABLE SLOTS IN THE SYSTEM ARE IN USE\n//* THE SYSTEM REJECTS LOGON, MOUNT, AND START COMMANDS UNTIL THE\n//* SHORTAGE IS RELIEVED\n//*\n//* IRA201E CRITICAL AUXILIARY STORAGE SHORTAGE\n//* 85% OF ALL AVAILABLE SLOTS IN THE SYSTEM ARE IN USE\n//*\n//* ISRDDN COMMAND TO DISPLAY THE VALUE : B 0.+10?+25C?+C?+68\n//*\n//RESOLVE  EXEC PGM=RESOLVE,REGION=8M,TIME=1440,PARM=BATCH\n//STEPLIB  DD DISP=SHR,DSN=RESOLVE.LINK\n//BBHELP   DD DISP=SHR,DSN=RESOLVE.HELP\n//SYSPRINT DD SYSOUT=*\n//SYSIN    DD *\nDU,10%+25C?+C?+68,4\nZAP,*,004B0055,005A005F\nDU,10%+25C?+C?+68,4\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JESLESS": {"ttr": 2826, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x991_\\x00\\x991_\\x11P\\x00&\\x00&\\x00\\x00\\xe3\\xc8\\xc9\\xc5\\xd9\\xd9\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-11-11T00:00:00", "modifydate": "1999-11-11T11:50:00", "lines": 38, "newlines": 38, "modlines": 0, "user": "THIERRY"}, "text": "  JESLESS IN A NUTSHELL...\n\nTHIS IS THE PROCEDURE TO PREPARE FOR RUNNING TSO WITHOUT JES2 OR JES3.\n\n1) RUN THIS JOB\n\n//DUMPT     EXEC PGM=AMASPZAP\n//SYSPRINT  DD SYSOUT=*\n//SYSLIB    DD DSN=SYS1.LPALIB,DISP=SHR\n//SYSIN     DD *\n DUMPT IKJEFLA1 IKJEFLB\n\n2) IN THE OUTPUT, SEARCH FOR '009D'. NOTE THE OFFSET.\n\n3) RUN A AMASPZAP JOB WHICH CHANGES THE '009D' INTO '009F'.\n\nFOR EXAMPLE, WITH OS/390 V2R5 THIS WOULD BE :\n\n//DUMPT     EXEC PGM=AMASPZAP\n//SYSPRINT  DD SYSOUT=*\n//SYSLIB    DD DSN=SYS1.LPALIB,DISP=SHR\n//SYSIN     DD *\n NAME IKJEFLA1 IKJEFLB\n VER 0920 0000009D          <-- CHECK THE OFFSET |\n REP 0920 0000009F\n\n4) UPDATE SYS1.PROCLIB. YOU NEED AT LEAST 3 PROCEDURES THAT WILL RUN\n   AS SUBSYSTEMS (USE 4-DIGIT PROCEDURE NAMES)\n- VTAM PROC\n- TSO PROC\n- TSO USER LOGON PROC\n\nCHECK THEY CAN REALLY RUN AS SUBSYSTEMS (DATASETS CATALOGED IN MASTERCAT\nOR UNIT=,VOL=SER= SPECIFIED ; TIME=NOLIMIT, ETC)\n\n5) DECLARE THE 3 SUBSYSTEM NAMES IN YOUR PARMLIB\n\n6) ASSOCIATE A USERID WITH THE TSO LOGON PROC\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LISTSMS": {"ttr": 2828, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x991_\\x00\\x991_\\x11P\\x03\\xf3\\x03\\xf3\\x00\\x00\\xe3\\xc8\\xc9\\xc5\\xd9\\xd9\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-11-11T00:00:00", "modifydate": "1999-11-11T11:50:00", "lines": 1011, "newlines": 1011, "modlines": 0, "user": "THIERRY"}, "text": "*\n*        LISTING THE SMS CONFIGURATION\n* PUBLISHED BY XEPHON - MVS UPDATE - OCTOBER 1995\n*\n*THIS PROGRAM ENABLES YOU TO LIST THE ONLINE SMS CONFIGURATION USING A\n*BATCH JOB. PRESENTLY, THE ONLY METHOD TO GET A DETAILED DISPLAY OF\n*YOUR CURRENT SMS PARAMETERS IS THROUGH ISMF UNDER TSO ; THE MVS\n*COMMAND \"DISPLAY SMS\" GIVES ALSO SOME BASIC INFORMATION. BUT TO GET IT\n*FROM A USER PROGRAM OR TO SEND ALL THIS TO A PRINTER IS STILL A\n*BIG PROBLEM |\n*A DESCRIPTION OF THE CURRENT SMS CONFIGURATION CAN BE FOUND IN THE SMS\n*ADDRESS-SPACE IN EXTENDED PRIVATE, BUT THE STANDARD WAY TO GET IT IS\n*THROUGH THE SSI INTERFACE.  THIS PROGRAM OBTAINS ALL INFORMATION ABOUT\n*THE BASE CONFIGURATION, DATA CLASSES, STORAGE CLASSES, MANAGEMENT\n*CLASSES AND STORAGE GROUPS. IT WAS WRITTEN IN A DFP 3.2 ENVIRONMENT\n*(DATA RELATED TO OAM IN STORAGE GROUPS WAS NEGLECTED). DSECTS IGDBCD,\n*IGDDCD, IGDSCD, IGDMCD, IGDSGD DESCRIBING THE SMS CONSTRUCTS HAD BEEN\n*PROVIDED BY IBM WITH DFP 3.1, BUT NOW EVERY ONE IS \"OCO\" (YOU SHOULD\n*TRY AND GET FROM IBM AN OLD PTF, UY42039, SHOULD YOU WANT THE\n*ORIGINAL DSECTS).\n*THE PROGRAM CAN BE FURTHER ADAPTED FOR MORE RECENT DFP\n*RELEASES, BY CODING AN ABEND AFTER THE IEFSSREQ CALL AND EXAMINING THE\n*BUFFER POINTED BY REGISTER 7 ; THEN YOU SHALL TRY AND GUESS WHAT DO\n*THE NEW FIELDS MEAN.\n*\n*\n* LIST THE SMS CONFIGURATION, DATA / STOR / MGMT CLASSES, STORGROUPS\n* JCL :  //LISTSMS  EXEC  PGM=LISTSMS           <--- MUST BE AUTHORIZED\n*        //SYSPRINT DD SYSOUT=*,LRECL=80,RECFM=FB\n*\n         IEFSSSA  ,                 SSOB EXTENSION FOR SMS SSI REQUESTS\n         IEFJESCT ,                 MANDATORY FOR IEFSSREQ REQUEST\n         CVT   DSECT=YES            MANDATORY FOR IEFSSREQ REQUEST\n* THIS MACRO CONVERTS A BINARY FULLWORD TO DECIMAL\n         MACRO\n         EXTENDW &BIN,&ETEND\n         XR    R1,R1                SET REGISTER TO ZERO\n         ICM   R1,15,&BIN           LOAD BINARY ZONE\n         CVD   R1,DBLEWORD          CONVERT TO DECIMAL\n         MVC   &ETEND.(10),MASK2    LOAD MASK FOR ED INSTRUCTION\n         ED    &ETEND.(10),PACKED5  CONVERSION FROM PACKED TO DECIMAL\n         MEND\n* THIS MACRO CONVERTS A BINARY HALFWORD TO DECIMAL\n         MACRO\n         EXTEND  &BIN,&ETEND\n         XR    R1,R1                SET REGISTER TO ZERO\n         ICM   R1,3,&BIN            LOAD BINARY ZONE\n         CVD   R1,DBLEWORD          CONVERT TO DECIMAL\n         MVC   &ETEND.(6),MASK1     LOAD MASK FOR ED INSTRUCTION\n         ED    &ETEND.(6),PACKED3   CONVERSION FROM PACKED TO DECIMAL\n         MEND\n* THIS MACRO PERFORMS A MOVE CONDITIONAL, BASED ON VALUES OF &TEST ZONE\n         MACRO\n&NLA     MVCCASE &TO=,&TEST=,&TSTCOD=CLI,&FAILCOD=BNE,&IF=,&MOVE=\n&NLA     DS    0H\n         LCLA  &NBR,&I\n&NBR     SETA  N'&IF                 HOW MANY VALUES TO TEST ?\n&I       SETA  1\n.LOOP    &TSTCOD  &TEST,&IF(&I)      TEST FOR VALUE\n         &FAILCOD NO&SYSNDX.&I\n         MVC   &TO,&MOVE(&I)         MATCH, MOVE THE VALUE\n         B     ENDM&SYSNDX           AND GO OUT\nNO&SYSNDX.&I   DS    0H\n&I       SETA  &I+1\n         AIF   (&I LE &NBR).LOOP\nENDM&SYSNDX    DS    0H\n         MEXIT\n         MEND\n*\nLISTSMS  CSECT\n* BASE REGISTERS : 12 11 6\n         STM   R14,R12,12(R13)        SAVE REGISTERS\n         LR    R12,R15\n         LA    R11,4095(0,R15)\n         LA    R11,1(0,R11)\n         LA    R6,4095(0,R11)\n         LA    R6,1(0,R6)\n         USING LISTSMS,R12,R11,R6   R12 + R11 + R6 = BASE REGISTERS\n         ST    R13,SAVE+4\n         LA    R13,SAVE\n* GET A BUFFER FOR THE SSI ; OPEN SYSPRINT\n         L     R9,SIZE              SIZE OF SMS BUFFER\n         GETMAIN  R,LV=(9)\n         LR    R7,R1                SAVE ADDRESS OF ACQUIRED ZONE\n         ST    R7,ADDZONE           SAVE ADDRESS OF ACQUIRED ZONE\n         OPEN  (SYSPRINT,(OUTPUT))\n         LA    R8,EXTE\n         USING IEFSSSA,R8\n* TITLE OF THE REPORT\n         MVC   RECORD,TITLE\n         BAL   R10,PUTREC\n         MVC   RECORD,$SPACES\n         MVI   RECORD,C'*'\n         BAL   R10,PUTREC\n*----------------------------------------------------------------*\n* SMS CONFIGURATION ('IGDBCD' BLOCK)                             *\n*----------------------------------------------------------------*\n         MVI   SSSA1TYP,SSSA1CON    RETURN THE CONFIGURATION\n         BAL   R10,CALLSSI\n         CLC   =CL8'IGDBCD',0(R7)   BCDPID ID IS CORRECT ?\n         BNE   ERROR5\n* BASE CONFIG : PRINT THE TITLE\n         MVC   RECORD,$SPACES\n         MVC   RECTITLE,=CL30' BASE CONFIGURATION           '\n         BAL   R10,PUTREC\n* BASE CONFIG : PRINT SCDS\n         MVC   RECTITLE,=CL30'   CDS NAME=                 '\n         MVC   RECDATA+2(44),X'150'(R7)    BCDSCDSN (NAME OF SCDS)\n         BAL   R10,PUTREC\n* BASE CONFIG : PRINT SCDS STATUS\n         MVC   RECTITLE,=CL30'   CDS STATUS=               '\n         MVC   RECDATA+2(8),=CL8'      ??'\n         MVCCASE TEST=268(R7),TO=RECDATA+2(8),IF=(1,2,3),              X\n               MOVE=(=C'   VALID',=C' INVALID',=C' UNKNOWN')  BCDSTAT\n         BAL   R10,PUTREC\n* BASE CONFIG : PRINT THE DESCRIPTION\n         MVC   RECTITLE,=CL20'   DESCRIPTION=     '\n         MVC   RECORD+20(60),88(R7)      BCDFDESC\n         BAL   R10,PUTREC\n         MVC   RECORD,$SPACES\n         MVC   RECORD+20(60),148(R7)     BCDFDESC+60\n         BAL   R10,PUTREC\n* BASE CONFIG : PRINT DEFAULT MANAGEMENT CLASS\n         MVC   BCMGMT,$SPACES\n         LH    R1,212(R7)              BCDMCLEN   LENGTH OF CLASS\n         BCTR  R1,0\n         EX    R1,MOVDMC\n         MVC   RECTITLE,=CL30'   DEFAULT MANAGEMENT CLASS=  '\n         MVC   RECDATA+2(L'BCMGMT),BCMGMT\n         BAL   R10,PUTREC\n* BASE CONFIG : PRINT DEFAULT UNIT\n         MVC   RECTITLE,=CL30'   DEFAULT UNIT=              '\n         MVC   RECDATA+2(8),252(R7)    BCDDUNIT\n         BAL   R10,PUTREC\n* BASE CONFIG : PRINT TRACK SIZE\n         EXTENDW 244(R7),BCTRKSZ       BCDTRKSZ  TRACK SIZE IN BYTES\n         MVC   RECTITLE,=CL30'   DEFAULT TRACK SIZE (BYTES)='\n         MVC   RECDATA(L'BCTRKSZ),BCTRKSZ\n         BAL   R10,PUTREC\n* BASE CONFIG : PRINT TRACKS/CYLINDER\n         EXTENDW 248(R7),BCCYLCP       BCDCYLCP  CYL CAPACITY (TRK/CYL)\n         MVC   RECTITLE,=CL30'   DEFAULT TRACKS / CYLINDER= '\n         MVC   RECDATA(L'BCCYLCP),BCCYLCP\n         BAL   R10,PUTREC\n* BASE CONFIG : PRINT SYSTEMS\n         MVC   BCSYST,$SPACES\n         LA    R1,BCSYST\n         LA    R2,X'110'(R7)            BCDFSYSN  SYSTEM NAMES\n         LA    R3,8                     8 SYSTEMS\nLOOPBCSY MVC   0(8,R1),=CL8'       -'\n         CLC   0(8,R2),$SPACES\n         BE    BCSYS1\n         CLC   0(8,R2),$ZEROES\n         BE    BCSYS1\n         MVC   0(8,R1),0(R2)\nBCSYS1   LA    R1,9(0,R1)               NEXT SYSTEM\n         LA    R2,8(0,R2)               NEXT SYSTEM\n         BCT   R3,LOOPBCSY\n         MVC   RECTITLE,=CL30'   SYSTEMS=                   '\n         MVC   RECDATA+2(L'BCSYST),BCSYST\n         BAL   R10,PUTREC\n* BASE CONFIG : PRINT LAST UPDATE  INFORMATION\n         LA    R7,24(,R7)                SKIP FOR LAST MOD. INFORMATION\n         BAL   R4,LASTMOD                PRINT LAST MOD. INFORMATION\n* PRINT SEPARATOR\n         MVI   RECORD,C'*'\n         BAL   R10,PUTREC\n*----------------------------------------------------------------*\n* SMS DATA CLASSES ('IGDDCD' BLOCK)                              *\n*----------------------------------------------------------------*\n         MVI   SSSA1TYP,SSSA1DCL    RETURN ALL DATA CLASSES\n         BAL   R10,CALLSSI\n         CLC   =CL8'IGDDCD',0(R7)   DCDPID  ID IS CORRECT ?\n         BNE   ERROR1\n         L     R5,12(R7)            DCDPCNT HOW MANY CLASSES ?\n         MVC   ELGTH,20(R7)         DCDPLEN LENGTH OF AN ENTRY\n         LA    R7,24(0,R7)          SKIP PREFIX,  ACCESS TO 1ST ENTRY\n* PROCESS ONE ENTRY IN DATA CLASS TABLE\nLOOPDC   MVC   DCNAME,$SPACES\n         LH    R1,0(R7)             DCDNMLEN  LENGTH NAME OF CLASS\n         BCTR  R1,0\n         EX    R1,MOVDCN\n* DATA CLASS : SPACE INFORMATION (PRIMARY SPACE, SECONDARY, DIRECTORY)\n         MVC   SPPRIM,=C'         -'    TEST DCDSPEC :\n         TM    188(R7),B'00000001'      SPACE PRIMARY SPECIFIED ?\n         BNO   NOSPPRIM                 NO\n         EXTENDW 196(R7),SPPRIM     DCDSPPRI SPACE PRIMARY\nNOSPPRIM MVC   SPSECO,=C'         -'    TEST DCDSPEC+1 :\n         TM    189(R7),B'10000000'      SPACE SECONDARY SPECIFIED ?\n         BNO   NOSPSEC                  NO\n         EXTENDW 200(R7),SPSECO     DCDSPSEC SPACE SECONDARY\nNOSPSEC  MVC   SPDIR,=C'         -'\n         TM    189(R7),B'01000000'      SPACE DIRECTORY SPECIFIED ?\n         BNO   NOSPDIR                 NO\n         EXTENDW 204(R7),SPDIR      DCDDIBLK SPACE BLOCKS OF DIRECTORY\n* DATA CLASS : AVGREC\nNOSPDIR  MVI   AVGREC,C'-'\n         TM    189(R7),B'00010000'     AVGREC SPECIFIED ?\n         BNO   NOAVGR                    NO\n         MVI   AVGREC,C'?'\n         MVCCASE TEST=208(R7),TO=AVGREC,TSTCOD=TM,FAILCOD=BNO,         X\n               IF=(1,2,3),MOVE=(=C'U',=C'K',=C'M')\n* RECORG\nNOAVGR   MVC   RECORG,=C' -'\n         MVCCASE TEST=184(R7),TO=RECORG,        TEST DCDRCORG          X\n               IF=(1,2,4,8),MOVE=(=C'KS',=C'ES',=C'LS',=C'RR')\n* PDS / LIBRARY\n         MVC   TYPEDS,=C'      -'\n         MVCCASE TEST=239(R7),TO=TYPEDS,        TEST DCDDSTYP          X\n               IF=(1,2),MOVE=(=C'    PDS',=C'LIBRARY')\n* DATA CLASS, INDEX OPTIONS : IMBED, REPLICATE\nGOODTYP  MVI   IMBED,C'-'\n         TM    190(R7),B'00100000'     IMBED OPTION SPECIFIED ?\n         BNO   NOIMBD\n         MVI   IMBED,C'Y'\n         TM    234(R7),X'80'             DCDVINDX  IMBED = Y ?\n         BO    NOIMBD\n         MVI   IMBED,C'N'\nNOIMBD   MVI   REPLI,C'-'\n         TM    190(R7),B'00010000'     REPLICATE OPTION SPECIFIED ?\n         BNO   NOREPLI\n         MVI   REPLI,C'Y'\n         TM    234(R7),X'40'             DCDVINDX  REPLICATE = Y ?\n         BO    NOREPLI\n         MVI   REPLI,C'N'\n* DATA CLASS, CARRIAGE CONTROL : ANSI, MACHINE\nNOREPLI  MVI   RECFM2,C' '               CARRIAGE CONTROL: TEST DCDCNTL\n         MVCCASE TEST=187(R7),TO=RECFM2,IF=(1,2),MOVE=(=C'A',=C'M')\n* RECFM\nGOODCC   MVC   RECFM,=C'  -'\n         TM    188(R7),B'00100000'       RECFM SPECIFIED ?\n         BNO   GOODRECF\n         MVC   RECFM,=C'???'             TEST DCDRECFM\n         MVCCASE TEST=185(R7),TO=RECFM,IF=(1,2,3,4,5,6,7,8,9),         X\n               MOVE=(=C'  U',=C'  V',=C' VS',=C' VB',=C'VBS',          X\n               =C'  F',=C' FS',=C' FB',=C'FBS')\nGOODRECF MVC   AVGVAL,=C'         -'\n         TM    189(R7),B'00100000'       AVGVALUE SPECIFIED ?\n         BNO   NOAVGV\n         EXTENDW 212(R7),AVGVAL          DCDAUNIT AVERAGE VALUE\nNOAVGV   MVC   LRECL,=C'         -'\n         TM    188(R7),B'01000000'       LRECL SPECIFIED ?\n         BNO   NOLRECL\n         EXTENDW 220(R7),LRECL           DCDLRECL LRECL\nNOLRECL  MVC   VOLCT,=C'     -'\n         TM    189(R7),B'00001000'       VOL COUNT SPECIFIED ?\n         BNO   NOVOLCT\n         EXTEND 236(R7),VOLCT            DCDVOLCT VOL COUNT\nNOVOLCT  MVC   KEYOFF,=C'     -'\n         TM    188(R7),B'00001000'       KEYOFF SPECIFIED ?\n         BNO   NOKEYOFF\n         EXTEND 192(R7),KEYOFF           DCDKOFF  KEY OFFSET\nNOKEYOFF MVC   FREECI,=C'     -'\n         TM    189(R7),B'00000010'       CI % SPECIFIED ?\n         BNO   NOFREECI\n         EXTEND 228(R7),FREECI           DCDCIPCT FREE SPACE CI %\nNOFREECI MVC   FREECA,=C'     -'\n         TM    189(R7),B'00000001'       CA % SPECIFIED ?\n         BNO   NOFREECA\n         EXTEND 230(R7),FREECA           DCDCAPCT FREE SPACE CA %\nNOFREECA MVC   CISIZE,=C'         -'\n         TM    189(R7),B'00000100'       CISIZE SPECIFIED ?\n         BNO   NOCISIZE\n         EXTENDW 224(R7),CISIZE          DCDCISZ  CI SIZE\nNOCISIZE MVC   RETPD2,=C'     -'\n         TM    188(R7),B'00000010'       RETPD SPECIFIED ?\n         BNO   NORETPD2\n         EXTEND 242(R7),RETPD2           DCDEXPDY RETPD\n         B     NORETPD1\nNORETPD2 MVC   RETPD1,=C'      '\n         TM    188(R7),B'00000100'       EXPDT SPECIFIED ?\n         BNO   NORETPD1\n         EXTEND 240(R7),RETPD1           DCDEXPYR EXPDT YEAR\n         EXTEND 242(R7),RETPD2           DCDEXPDY EXPDT DAY OF YEAR\nNORETPD1 MVC   KEYLEN,=C'     -'\n         TM    188(R7),B'00010000'       KEYLEN SPECIFIED ?\n         BNO   NOKEYLEN\n         XC    HALFWORD,HALFWORD         ZEROISE HALFWORD\n         MVC   HALFWORD+1,194(R7)        DCDKLEN        KEYLEN\n         EXTEND HALFWORD,KEYLEN          KEYLEN\nNOKEYLEN MVI   SHR2,C'-'\n         TM    190(R7),B'10000000'       SHROPT CROSS-REGION SPECIFIED?\n         BNO   NOSHRXR\n         MVC   SHR2,233(R7)              DCDXREG              SHROPT\n         OI    SHR2,X'F0'                SHROPT CHANGED TO DECIMAL\nNOSHRXR  MVI   SHR1,C'-'\n         TM    190(R7),B'01000000'     SHROPT CROSS-SYSTEM SPECIFIED?\n         BNO   NOSHRXS\n         MVC   SHR1,232(R7)              DCDXSYS              SHROPT\n         OI    SHR1,X'F0'                SHROPT CHANGED TO DECIMAL\n* DATA CLASS : PRINT ALL INFORMATION\nNOSHRXS  MVC   RECTITLE,=CL30' DATA CLASS=                  '\n         MVC   RECDATA(L'DCNAME),DCNAME\n         BAL   R10,PUTREC\n         MVC   RECTITLE,=CL20' DESCRIPTION=       '\n         MVC   RECORD+20(60),64(R7)                 DCDDESC\n         BAL   R10,PUTREC\n         MVC   RECORD,$SPACES\n         MVC   RECORD+20(60),124(R7)                DCDDESC+60\n         BAL   R10,PUTREC\n         MVC   RECTITLE,=CL30'   RECORG=                    '\n         MVC   RECDATA+8(L'RECORG),RECORG\n         BAL   R10,PUTREC\n         MVC   RECTITLE,=CL30'   RECFM=                     '\n         MVC   RECDATA+7(L'RECFM),RECFM\n         MVC   RECDATA+L'RECFM+7(L'RECFM2),RECFM2\n         BAL   R10,PUTREC\n         MVC   RECTITLE,=CL30'   LRECL=                     '\n         MVC   RECDATA(L'LRECL),LRECL\n         BAL   R10,PUTREC\n         MVC   RECTITLE,=CL30'   KEYLEN=                    '\n         MVC   RECDATA+4(L'KEYLEN),KEYLEN\n         BAL   R10,PUTREC\n         MVC   RECTITLE,=CL30'   KEYOFF=                    '\n         MVC   RECDATA+4(L'KEYOFF),KEYOFF\n         BAL   R10,PUTREC\n         MVC   RECTITLE,=CL30'   AVGREC=                    '\n         MVC   RECDATA+9(L'AVGREC),AVGREC\n         BAL   R10,PUTREC\n         MVC   RECTITLE,=CL30'   AVERAGE VALUE=             '\n         MVC   RECDATA(L'AVGVAL),AVGVAL\n         BAL   R10,PUTREC\n         MVC   RECTITLE,=CL30'   SPACE PRIMARY=             '\n         MVC   RECDATA(L'SPPRIM),SPPRIM\n         BAL   R10,PUTREC\n         MVC   RECTITLE,=CL30'   SPACE SECONDARY=           '\n         MVC   RECDATA(L'SPSECO),SPSECO\n         BAL   R10,PUTREC\n         MVC   RECTITLE,=CL30'   SPACE DIRECTORY=           '\n         MVC   RECDATA(L'SPDIR),SPDIR\n         BAL   R10,PUTREC\n         MVC   RECTITLE,=CL30'   DATASET NAME TYPE=         '\n         MVC   RECDATA+3(L'TYPEDS),TYPEDS\n         BAL   R10,PUTREC\n         MVC   RECTITLE,=CL30'   RETPD / EXPDT=             '\n         MVC   RECDATA-2(L'RETPD1),RETPD1\n         MVC   RECDATA+L'RETPD1-2(L'RETPD2),RETPD2\n         BAL   R10,PUTREC\n         MVC   RECTITLE,=CL30'   VOLUME COUNT=              '\n         MVC   RECDATA+4(L'VOLCT),VOLCT\n         BAL   R10,PUTREC\n         MVC   RECTITLE,=CL30'   IMBED=                     '\n         MVC   RECDATA+9(L'IMBED),IMBED\n         BAL   R10,PUTREC\n         MVC   RECTITLE,=CL30'   REPLICATE=                 '\n         MVC   RECDATA+9(L'REPLI),REPLI\n         BAL   R10,PUTREC\n         MVC   RECTITLE,=CL30'   CI SIZE DATA=              '\n         MVC   RECDATA(L'CISIZE),CISIZE\n         BAL   R10,PUTREC\n         MVC   RECTITLE,=CL30'   % FREE SPACE CI=           '\n         MVC   RECDATA+4(L'FREECI),FREECI\n         BAL   R10,PUTREC\n         MVC   RECTITLE,=CL30'   % FREE SPACE CA=           '\n         MVC   RECDATA+4(L'FREECA),FREECA\n         BAL   R10,PUTREC\n         MVC   RECTITLE,=CL30'   SHARE XREGION=             '\n         MVC   RECDATA+9(L'SHR2),SHR2\n         BAL   R10,PUTREC\n         MVC   RECTITLE,=CL30'   SHARE XSYSTEM=             '\n         MVC   RECDATA+9(L'SHR1),SHR1\n         BAL   R10,PUTREC\n         BAL   R4,LASTMOD                PRINT LAST MOD. INFORMATION\n         MVI   RECORD,C'*'\n         BAL   R10,PUTREC\n         A     R7,ELGTH                  ACCESS NEXT DATA CLASS ENTRY\n         BCT   R5,LOOPDC\n*----------------------------------------------------------------*\n* SMS STORAGE CLASSES ('IGDSCD' BLOCK)                           *\n*----------------------------------------------------------------*\n         MVI   SSSA1TYP,SSSA1SCL    RETURN ALL STORAGE CLASSES\n         BAL   R10,CALLSSI\n         CLC   =CL8'IGDSCD',0(R7)        SCDPID ID IS CORRECT ?\n         BNE   ERROR2\n         L     R5,12(R7)                 SCDPCNT NUMBER OF CLASSES\n         MVC   ELGTH,20(R7)              SCDPLEN LGTH OF 1 DEFINITION\n         LA    R7,24(0,R7)               ACCESS 1ST ENTRY\n* PROCESS ONE ENTRY IN STORAGE CLASS TABLE\nLOOPSC   MVC   SCNAME,$SPACES\n         LH    R1,0(R7)                  SCDNMLEN  LENGTH OF NAME\n         BCTR  R1,0\n         EX    R1,MOVSCN                 GET NAME OF CLASS\n* STORAGE CLASS : DIRECT MSR\n         MVC   DIRMSR,=C'         -'\n         TM    184(R7),B'00100000'       DIRECT MSR SPECIFIED ?\n         BNO   NODIRMSR\n         EXTENDW X'BC'(R7),DIRMSR        SCDDIRR  DIRECT MSR\n* STORAGE CLASS : SEQUENTIAL MSR\nNODIRMSR MVC   SEQMSR,=C'         -'\n         TM    184(R7),B'00001000'       SEQ MSR SPECIFIED ?\n         BNO   NOSEQMSR\n         EXTENDW X'C0'(R7),SEQMSR        SCDSEQR  SEQUENTIAL MSR\n* STORAGE CLASS : INIT ACCESS RESPONSE\nNOSEQMSR MVC   INIMSR,=C'         -'\n         TM    184(R7),B'00000001' ?     INIT ACCESS RESP SPECIFIED ?\n         BNO   NOINIMSR\n         EXTENDW X'C8'(R7),INIMSR        SCDINITM INIT ACCESS MSR\n* STORAGE CLASS : DIRECT BIAS\nNOINIMSR MVI   DIRBIAS,C'-'\n         TM    184(R7),B'00010000'       DIRECT BIAS SPECIFIED ?\n         BNO   DIRBGOOD\n         MVI   DIRBIAS,C'?'              TEST SCDDIRB\n         MVCCASE TEST=X'C5'(R7),TO=DIRBIAS,IF=(1,2),MOVE=(=C'R',=C'W')\n* STORAGE CLASS : SEQUENTIAL BIAS\nDIRBGOOD MVI   SEQBIAS,C'-'\n         TM    184(R7),B'00000100'       SEQ BIAS SPECIFIED ?\n         BNO   SEQBGOOD\n         MVI   SEQBIAS,C'?'              TEST SCDSEQB\n         MVCCASE TEST=X'C6'(R7),TO=SEQBIAS,IF=(1,2),MOVE=(=C'R',=C'W')\n* STORAGE CLASS : AVAILABILITY (CONTINUOUS,STANDARD)\nSEQBGOOD MVC   AVAIL,=C'??????????'\n         MVCCASE TEST=X'C4'(R7),TO=AVAIL,IF=(1,2),   TEST SCDAVAIL     X\n               MOVE=(=C'  STANDARD',=C'CONTINUOUS')\n* STORAGE CLASS : FLAGS GUARANTEED SPACE & GUARANTEED SYNCHRONOUS WRITE\nAVAILGD  MVI   GARSPA,C'Y'\n         TM    184(R7),B'10000000'\n         BO    GARSPAGD\n         MVI   GARSPA,C'N'\nGARSPAGD MVI   GARSYW,C'Y'\n         TM    184(R7),B'00000010'\n         BO    GARSYWGD\n         MVI   GARSYW,C'N'\n* STORAGE CLASS : PRINT ALL INFORMATION\nGARSYWGD MVC   RECTITLE,=CL30' STORAGE CLASS=               '\n         MVC   RECDATA(L'SCNAME),SCNAME\n         BAL   R10,PUTREC\n         MVC   RECTITLE,=CL20'   DESCRIPTION=     '\n         MVC   RECORD+20(60),64(R7)             SCDDESC\n         BAL   R10,PUTREC\n         MVC   RECORD,$SPACES\n         MVC   RECORD+20(60),124(R7)            SCDDESC+60\n         BAL   R10,PUTREC\n         MVC   RECTITLE,=CL30'   DIRECT RESPONSE (MSEC)=    '\n         MVC   RECDATA(L'DIRMSR),DIRMSR\n         BAL   R10,PUTREC\n         MVC   RECTITLE,=CL30'   DIRECT BIAS=               '\n         MVC   RECDATA+9(L'DIRBIAS),DIRBIAS\n         BAL   R10,PUTREC\n         MVC   RECTITLE,=CL30'   SEQUENTIAL RESPONSE (MSEC)='\n         MVC   RECDATA(L'SEQMSR),SEQMSR\n         BAL   R10,PUTREC\n         MVC   RECTITLE,=CL30'   SEQUENTIAL BIAS=           '\n         MVC   RECDATA+9(L'SEQBIAS),SEQBIAS\n         BAL   R10,PUTREC\n         MVC   RECTITLE,=CL30'   INIT ACC RESPONSE=         '\n         MVC   RECDATA(L'INIMSR),INIMSR\n         BAL   R10,PUTREC\n         MVC   RECTITLE,=CL30'   AVAILABILITY=              '\n         MVC   RECDATA(L'AVAIL),AVAIL\n         BAL   R10,PUTREC\n         MVC   RECTITLE,=CL30'   GUARANTEED SPACE=          '\n         MVC   RECDATA+9(L'GARSPA),GARSPA\n         BAL   R10,PUTREC\n         MVC   RECTITLE,=CL30'   GUARANTEED SYNC WRITE=     '\n         MVC   RECDATA+9(L'GARSYW),GARSYW\n         BAL   R10,PUTREC\n         BAL   R4,LASTMOD                PRINT LAST MOD. INFORMATION\n         MVI   RECORD,C'*'\n         BAL   R10,PUTREC\n         A     R7,ELGTH                  ACCESS NEXT STORCLASS ENTRY\n         BCT   R5,LOOPSC\n*----------------------------------------------------------------*\n* SMS MANAGEMENT CLASSES ('IGDMCD' BLOCK)                        *\n*----------------------------------------------------------------*\n         MVI   SSSA1TYP,SSSA1MCL    RETURN ALL MANAGEMENT CLASSES\n         BAL   R10,CALLSSI\n         CLC   =CL8'IGDMCD',0(R7)        MCDPID ID IS CORRECT ?\n         BNE   ERROR3\n         L     R5,12(R7)                 MCDPCNT NUMBER OF CLASSES\n         MVC   ELGTH,20(R7)              MCDPLEN LGTH OF 1 DEFINITION\n         LA    R7,24(0,R7)               ACCESS 1ST ENTRY\n* PROCESS ONE ENTRY IN MANAGEMENT CLASS TABLE\nLOOPMC   MVC   MCNAME,$SPACES\n         LH    R1,0(R7)                  MCDNMLEN LENGTH OF NAME\n         BCTR  R1,0\n         EX    R1,MOVMCN                 GET NAME OF CLASS\n* MANAGEMENT CLASS : EXPIRE NON-USAGE\n         MVC   EXPNOUS,=C'   NOLIMIT'\n         TM    X'CC'(R7),B'10000000'     EXPIRE NON-USAGE = NOLIMIT ?\n         BO    NOEXPDYU                  YES, FINISHED WITH IT\n         MVC   EXPNOUS,=C'         -'\n         TM    X'B9'(R7),B'00000100'     EXPIRE NON-USAGE SPECIFIED ?\n         BNO   NOEXPDYU                  NO, NO VALUE SPECIFIED\n         EXTENDW X'D0'(R7),EXPNOUS       MCDEXPDY EXP. AFTER DAYS NOUSE\n* MANAGEMENT CLASS : EXPIRE DATE / DAYS\nNOEXPDYU MVC   EXPMYEAR,=C'   NOLIMIT'\n         MVC   EXPMDAY,=C'      '\n         TM    X'CC'(R7),B'01000000'     EXPIRE = NOLIMIT ?\n         BO    NOEXPDY                   YES, FINISHED WITH IT\n         MVC   EXPMYEAR,=C'         -'\n         TM    X'B9'(R7),B'00001000'     EXPIRE DATE/DAYS SPECIFIED ?\n         BNO   NOEXPDY                   NO, NO VALUE SPECIFIED\n         TM    205(R7),1                 VALUE IS A DATE ?\n         BNO   YEXPDAT                   NO\n         EXTEND 214(R7),EXPMYEAR+4       MCDEYEAR - EXPIRE DATE YYYYDDD\n         EXTEND 212(R7),EXPMYEAR         MCDEYEAR - EXPIRE DATE YYYYDDD\n         MVI   EXPMYEAR+6,C'/'           FORMAT YYYY/DDD\n         B     NOEXPDY                   GO ON\nYEXPDAT  TM    205(R7),2                 VALUE IS A NUMBER OF DAYS ?\n         BNO   NOEXPDY                   UNKNOWN FORMAT\n         EXTEND  214(R7),EXPMDAY         MCDEDAY - EXPIRE AFTER DAYS\n         XC    EXPMYEAR,EXPMYEAR         NO DATE SPECIFIED\n* MANAGEMENT CLASS : RETENTION LIMIT\nNOEXPDY  MVC   RETLIMT,=C'   NOLIMIT'\n         TM    X'F0'(R7),B'10000000'     MCDMRETF  RETLIMIT = NOLIMIT ?\n         BO    NORETLIM                  YES, FINISHED WITH IT\n         MVC   RETLIMT,=C'          '\n         EXTEND  X'F2'(R7),RETLIMT2      MDCMRTDY - RETENTION LIMIT\n* MANAGEMENT CLASS : PARTIAL RELEASE   ?? Y / COND/ Y IMM /COND IMM/NO\nNORETLIM MVC   PARTREL,=C'        NO'    TEST MCDFLAGS\n         MVCCASE TEST=X'B8'(R7),TO=PARTREL,TSTCOD=TM,FAILCOD=BNO,      X\n               IF=(B'10100000',B'01100000',B'01000000',B'10000000'),   X\n               MOVE=(=C' YES_IMMED',=C'COND_IMMED',=C'CONDITIONL',     X\n               =C'       YES')\n* MANAGEMENT CLASS : PRIMARY DAYS\n         MVC   PRIMDAYS,=C'     -'\n         TM    X'B9'(R7),B'00000010'     PRIMARY DAYS SPECIFIED ?\n         BNO   NOPRIMDY                  NO, NO VALUE SPECIFIED\n         EXTEND X'BE'(R7),PRIMDAYS       MCDPRDY - PRIMARY DAYS\n* MANAGEMENT CLASS : LEVEL 1 DAYS\nNOPRIMDY MVC   L1DAYS,=C'     -'\n         TM    X'BA'(R7),B'10000000'     LEVEL 1 DAYS SPECIFIED ?\n         BNO   NOL1DY                    NO, NO VALUE SPECIFIED\n         EXTEND X'C0'(R7),L1DAYS         MCDL1DY - LEVEL 1 DAYS\n* MANAGEMENT CLASS : CMD/AUTO MIGRATE\nNOL1DY   MVC   CMAUMIG,=C'        ??'\n         MVCCASE TEST=X'C2'(R7),TO=CMAUMIG,IF=(0,1,2),   TEST MCDCMAU  X\n               MOVE=(=C'      NONE',=C'   COMMAND',=C'      BOTH')\n* MANAGEMENT CLASS : # GDG ON PRIMARY\n         MVC   NGDGPRIM,=C'     -'\n         TM    X'BA'(R7),B'00100000'     GDG ON PRIMARY SPECIFIED ?\n         BNO   NOGDGPR                   NO, NO VALUE SPECIFIED\n         EXTEND X'C6'(R7),NGDGPRIM       MCDPELEM - GDG ELTS ON PRIM\n* MANAGEMENT CLASS : ROLLED-OFF GDG ACTION\nNOGDGPR  MVC   ROFFGDG,=C'         -'\n         TM    X'BA'(R7),B'01000000'     ROLLED-OFF GDG ACT SPECIFIED ?\n         BNO   NOROFFGD\n         MVC   ROFFGDG,=C'    EXPIRE'\n         TM    X'C4'(R7),B'10000000'   ROLLED-OFF GDG ACTION = MIGRATE\n         BNO   NOROFFGD                  (MCDGDGFL)\n         MVC   ROFFGDG,=C'   MIGRATE'\n* MANAGEMENT CLASS : BACKUP FREQUENCY\nNOROFFGD MVC   BKUPFREQ,=C'     -'\n         TM    X'BA'(R7),B'00010000'     BACKUP FREQUENCY SPECIFIED ?\n         BNO   NOBKFREQ\n         EXTEND X'DC'(R7),BKUPFREQ       MCDBKFQ - BACKUP FREQUENCY\n* MANAGEMENT CLASS : # BACKUP VERSIONS (DS EXISTS)\nNOBKFREQ MVC   BKUPVERS,=C'     -'\n         TM    X'B9'(R7),B'10000000'     BACKUP VERSIONS SPECIFIED ?\n         BNO   NOBKVERS\n         EXTEND X'DE'(R7),BKUPVERS       MCDBKVS - BACKUP FREQUENCY\n* MANAGEMENT CLASS : # BACKUP VERSIONS (DS DELETED)\nNOBKVERS MVC   BKUPVRD,=C'     -'\n         TM    X'B9'(R7),B'01000000'     BACKUP VERSIONS SPECIFIED ?\n         BNO   NOBKVRD\n         EXTEND X'E0'(R7),BKUPVRD        MCDBVRD - BACKUP FREQUENCY\n* MANAGEMENT CLASS : RETAIN DAYS ONLY BACKUP\nNOBKVRD  MVC   BKUPRDOB,=C'   NOLIMIT'   TEST MCDBKUPF\n         TM    X'D8'(R7),B'10000000'    RETAIN DAYS ONLY BK = NOLIMIT ?\n         BO    NOBKRDOB\n         MVC   BKUPRDOB,=C'         -'\n         TM    X'B9'(R7),B'00010000'    RETAIN DAYS ONLY BK SPECIFIED ?\n         BNO   NOBKRDOB\n         MVC   BKUPRDOB,=C'          '\n         EXTEND X'E4'(R7),BKUPRDO2       MCDBKNP - RET DAYS ONLY BACKUP\n* MANAGEMENT CLASS : RETAIN DAYS EXTRA BACKUP\nNOBKRDOB MVC   BKUPRDEB,=C'   NOLIMIT'  TEST MCDBKUPF\n         TM    X'D8'(R7),B'01000000'    RETAIN DAYS EXTRA BK= NOLIMIT ?\n         BO    NOBKRDEB\n         MVC   BKUPRDEB,=C'         -'\n         TM    X'B9'(R7),B'00100000'    RETAIN DAYS EXTRA BK SPECIFIED?\n         BNO   NOBKRDEB\n         MVC   BKUPRDEB,=C'          '\n         EXTEND X'E2'(R7),BKUPRDE2      MCDBKDY - RET DAYS EXTRA BACKUP\n* MANAGEMENT CLASS : ADM/USER BACKUP\nNOBKRDEB MVC   ADUSBKUP,=C'        ??'\n         MVCCASE TEST=X'E6'(R7),TO=ADUSBKUP,IF=(0,1,2),   TEST MCDBADU X\n               MOVE=(=C'      NONE',=C'     ADMIN',=C'      BOTH')\n* MANAGEMENT CLASS : AUTO BACKUP\n         MVC   BKUPAUTO,=C'        NO'\n         TM    X'D8'(R7),B'00010000'     AUTO BACKUP ?\n         BNO   NOBKAUTO\n         MVC   BKUPAUTO,=C'       YES'\n* MANAGEMENT CLASS : PRINT ALL INFORMATION\nNOBKAUTO MVC   RECTITLE,=CL30' MANAGEMENT CLASS=            '\n         MVC   RECDATA(L'MCNAME),MCNAME\n         BAL   R10,PUTREC\n         MVC   RECTITLE,=CL20'   DESCRIPTION=     '\n         MVC   RECORD+20(60),64(R7)              MCDDESC\n         BAL   R10,PUTREC\n         MVC   RECORD,$SPACES\n         MVC   RECORD+20(60),124(R7)             MCDDESC+60\n         BAL   R10,PUTREC\n         MVC   RECTITLE,=CL30'   EXPIRE NON-USAGE=          '\n         MVC   RECDATA(L'EXPNOUS),EXPNOUS\n         BAL   R10,PUTREC\n         MVC   RECTITLE,=CL30'   EXPIRE DATE/DAYS=          '\n         OC    EXPMYEAR,EXPMYEAR                 EXPIRE DATE ?\n         BZ    NOXPY                             NO\n         MVC   RECDATA(L'EXPMYEAR),EXPMYEAR      EXPIRE DATE\n         B     PUTEXPD\nNOXPY    MVC   RECDATA+4(L'EXPMDAY),EXPMDAY        EXPIRE DAYS\nPUTEXPD  BAL   R10,PUTREC\n         MVC   RECTITLE,=CL30'   RETENTION LIMIT=           '\n         MVC   RECDATA(L'RETLIMT),RETLIMT\n         BAL   R10,PUTREC\n         MVC   RECTITLE,=CL30'   PARTIAL RELEASE=           '\n         MVC   RECDATA(L'PARTREL),PARTREL\n         BAL   R10,PUTREC\n         MVC   RECTITLE,=CL30'   PRIMARY DAYS=              '\n         MVC   RECDATA+4(L'PRIMDAYS),PRIMDAYS\n         BAL   R10,PUTREC\n         MVC   RECTITLE,=CL30'   LEVEL 1 DAYS=              '\n         MVC   RECDATA+4(L'L1DAYS),L1DAYS\n         BAL   R10,PUTREC\n         MVC   RECTITLE,=CL30'   CMD/AUTO MIGRATE=          '\n         MVC   RECDATA(L'CMAUMIG),CMAUMIG\n         BAL   R10,PUTREC\n         MVC   RECTITLE,=CL30'   # GDG ON PRIMARY=          '\n         MVC   RECDATA+4(L'NGDGPRIM),NGDGPRIM\n         BAL   R10,PUTREC\n         MVC   RECTITLE,=CL30'   ROLLED-OFF GDS ACTION=     '\n         MVC   RECDATA(L'ROFFGDG),ROFFGDG\n         BAL   R10,PUTREC\n         MVC   RECTITLE,=CL30'   BACKUP FREQUENCY=          '\n         MVC   RECDATA+4(L'BKUPFREQ),BKUPFREQ\n         BAL   R10,PUTREC\n         MVC   RECTITLE,=CL30'   # BACKUPS (DS EXISTS)=     '\n         MVC   RECDATA+4(L'BKUPVERS),BKUPVERS\n         BAL   R10,PUTREC\n         MVC   RECTITLE,=CL30'   # BACKUPS (DS DELETED)=    '\n         MVC   RECDATA+4(L'BKUPVRD),BKUPVRD\n         BAL   R10,PUTREC\n         MVC   RECTITLE,=CL30'   RETAIN DAYS ONLY BACKUP=   '\n         MVC   RECDATA(L'BKUPRDOB),BKUPRDOB\n         BAL   R10,PUTREC\n         MVC   RECTITLE,=CL30'   RETAIN DAYS EXTRA BACKUP=  '\n         MVC   RECDATA(L'BKUPRDEB),BKUPRDEB\n         BAL   R10,PUTREC\n         MVC   RECTITLE,=CL30'   ADM/USER BACKUP=           '\n         MVC   RECDATA(L'ADUSBKUP),ADUSBKUP\n         BAL   R10,PUTREC\n         MVC   RECTITLE,=CL30'   AUTO BACKUP=               '\n         MVC   RECDATA(L'BKUPAUTO),BKUPAUTO\n         BAL   R10,PUTREC\n         BAL   R4,LASTMOD                PRINT LAST MOD. INFORMATION\n         MVI   RECORD,C'*'\n         BAL   R10,PUTREC\n         A     R7,ELGTH                  ACCESS NEXT MGMTCLASS ENTRY\n         BCT   R5,LOOPMC\n*----------------------------------------------------------------*\n* SMS STORAGE GROUPS     ('IGDSGD' BLOCK)                        *\n*----------------------------------------------------------------*\n         MVI   SSSA1TYP,SSSA1SGL    RETURN ALL STORAGE GROUPS\n         BAL   R10,CALLSSI\n         CLC   =CL8'IGDSGD',0(R7)        SGDPID ID IS CORRECT ?\n         BNE   ERROR4\n         L     R5,12(R7)                 SGDPCNT NUMBER OF CLASSES\n         MVC   ELGTH,20(R7)              SGDPLEN LGTH OF 1 DEFINITION\n         LA    R7,24(0,R7)               ACCESS 1ST ENTRY\n* PROCESS ONE ENTRY IN STORAGE GROUP TABLE\nLOOPSG   MVC   SGNAME,$SPACES\n         LH    R1,0(R7)                  SGDNMLEN LENGTH OF NAME\n         BCTR  R1,0\n         EX    R1,MOVSGN                 GET NAME OF GROUP\n* STORAGE GROUP : TYPE\n         MVC   SGTYPE,=CL13'           ??'\n         MVCCASE TEST=X'B9'(R7),TO=SGTYPE,IF=(0,1,2,3,4), TST SGDFTYPE X\n               MOVE=(=C'         POOL',=C'          VIO',              X\n               =C'        DUMMY',=C'       OBJECT',=C'OBJECT BACKUP')\n* STORAGE GROUP : VIO MAXSIZE\n         MVC   SGVIOM,=CL10'         -'\n         MVC   SGVIOU,=CL4'   -'\n         CLI   X'B9'(R7),X'01'           SGDFTYPE - SG TYPE = VIO ?\n         BNE   NOSGVIOM\n         EXTENDW X'BC'(R7),SGVIOM        SGDFVMAX - VIO MAXSIZE\n         MVC   SGVIOU,X'C0'(R7)          SGDFVUNT - VIO UNIT\n* STORAGE GROUP : AUTO MIGRATE\nNOSGVIOM MVC   SGAUTM,=CL10'         -'\n         CLI   X'B9'(R7),X'01'           SGDFTYPE - SG TYPE = VIO ?\n         BE    NOSGAUTM\n         CLI   X'B9'(R7),X'02'           SGDFTYPE - SG TYPE = DUMMY ?\n         BE    NOSGAUTM\n         MVC   SGAUTM,=CL10'  INTERVAL'\n         TM    X'B8'(R7),B'00000010' SGDFLAGS AUTO MIGRATE = INTERVAL ?\n         BO    NOSGAUTM\n         MVC   SGAUTM,=CL10'       YES'\n         TM    X'B8'(R7),B'01000000' SGDFLAGS AUTO MIGRATE = YES ?\n         BO    NOSGAUTM\n         MVC   SGAUTM,=CL10'        NO'\n* STORAGE GROUP : AUTO MIGRATE SYSTEM\nNOSGAUTM MVC   SGAUTMS,=CL8'       -'\n         CLC   X'106'(8,R7),$SPACES      TEST SGDAMSYS\n         BE    NOSGAUTS\n         MVC   SGAUTMS,X'106'(R7)\n* STORAGE GROUP : AUTO BACKUP\nNOSGAUTS MVC   SGAUTB,=CL10'         -'\n         CLI   X'B9'(R7),X'01'           SGDFTYPE - SG TYPE = VIO ?\n         BE    NOSGAUTB\n         CLI   X'B9'(R7),X'02'           SGDFTYPE - SG TYPE = DUMMY ?\n         BE    NOSGAUTB\n         MVC   SGAUTB,=CL10'       YES'\n         TM    X'B8'(R7),B'10000000' SGDFLAGS AUTO BACKUP = YES ?\n         BO    NOSGAUTB\n         MVC   SGAUTB,=CL10'        NO'\n* STORAGE GROUP : AUTO BACKUP SYSTEM\nNOSGAUTB MVC   SGAUTBS,=CL8'       -'\n         CLC   X'F6'(8,R7),$SPACES      TEST SGDABSYS\n         BE    NOSGAUBS\n         MVC   SGAUTBS,X'F6'(R7)\n* STORAGE GROUP : AUTO DUMP\nNOSGAUBS MVC   SGAUTD,=CL10'         -'\n         CLI   X'B9'(R7),X'01'           SGDFTYPE - SG TYPE = VIO ?\n         BE    NOSGAUTD\n         CLI   X'B9'(R7),X'02'           SGDFTYPE - SG TYPE = DUMMY ?\n         BE    NOSGAUTD\n         MVC   SGAUTD,=CL10'       YES'\n         TM    X'B8'(R7),B'00100000' SGDFLAGS AUTO DUMP = YES ?\n         BO    NOSGAUTD\n         MVC   SGAUTD,=CL10'        NO'\n* STORAGE GROUP : AUTO DUMP SYSTEM\nNOSGAUTD MVC   SGAUTDS,=CL8'       -'\n         CLC   X'FE'(8,R7),$SPACES      TEST SGDADSYS\n         BE    NOSGAUDS\n         MVC   SGAUTDS,X'FE'(R7)\n* STORAGE GROUP : HIGH AND LOW THRESHOLDS\nNOSGAUDS MVC   SGHIGH,=CL6'     -'\n         MVC   SGLOW,=CL6'     -'\n         TM    X'B8'(R7),B'00010000'    SGDFLAGS THRESHOLDS SPECIFIED ?\n         BNO   NOSGTHRE\n         XC    HALFWORD,HALFWORD\n         MVC   HALFWORD+1,X'C4'(R7)      SGDFHTHR - HIGH THRESHOLD\n         EXTEND HALFWORD,SGHIGH\n         XC    HALFWORD,HALFWORD\n         MVC   HALFWORD+1,X'C5'(R7)      SGDFLTHR - LOW  THRESHOLD\n         EXTEND HALFWORD,SGLOW\n* STORAGE GROUP : DUMP CLASSES\nNOSGTHRE MVC   SGDUMP,$SPACES\n         LA    R1,SGDUMP\n         LA    R2,X'C6'(R7)             SGDDMPCL - DUMP CLASSES\n         LA    R3,5                     5 DUMP CLASSES\nLOOPSGDM MVC   0(8,R1),=CL8'       -'\n         CLC   0(8,R2),$SPACES\n         BE    SGDMP1\n         CLC   0(8,R2),$ZEROES\n         BE    SGDMP1\n         MVC   0(8,R1),0(R2)\nSGDMP1   LA    R1,9(0,R1)               NEXT DUMP CLASS\n         LA    R2,8(0,R2)               NEXT DUMP CLASS\n         BCT   R3,LOOPSGDM\n* STORAGE GROUP : STATUS ON EACH PROCESSOR\n         MVC   SGSTATUS,$SPACES\n         LA    R1,SGSTATUS\n         LA    R2,X'EE'(R7)            SGDFPRST STATUS ON 8 PROCESSORS\n         LA    R3,8                     8 STATUS\nLOOPSGST MVC   0(6,R1),=CL6'    ??'\n         MVCCASE TEST=0(R2),TO=0(6,R1),IF=(0,1,2,3,4,5),               X\n               MOVE=(=C'     -',=C'ENABLE',=C'QUIALL',                 X\n               =C'QUINEW',=C'DISALL',=C'DISNEW')\nSGNEXTST LA    R1,7(0,R1)                NEXT STATUS\n         LA    R2,1(0,R2)                NEXT STATUS\n         BCT   R3,LOOPSGST\n* STORAGE GROUP : GUARANTEED BACKUP FREQ\n         MVC   SGBAKFR,=C'   NOLIMIT'\n         TM    X'B8'(R7),B'00000100' SGDFLAGS BACKUP FREQ = NOLIMIT ?\n         BO    NOSGBKFR                  YES, FINISHED WITH IT\n         MVC   SGBAKFR,=C'         -'\n         TM    X'B8'(R7),B'00001000' SGDFLAGS BACKUP FREQ SPECIFIED ?\n         BNO   NOSGBKFR                  NO, FINISHED WITH IT\n         EXTENDW X'120'(R7),SGBAKFR        SGDGBKUF  GUAR. BKUP FREQ\n* STORAGE GROUP : PRINT ALL INFORMATION\nNOSGBKFR MVC   RECTITLE,=CL30' STORAGE GROUP=               '\n         MVC   RECDATA(L'SGNAME),SGNAME\n         BAL   R10,PUTREC\n         MVC   RECTITLE,=CL20'   DESCRIPTION=     '\n         MVC   RECORD+20(60),64(R7)          SGDFDESC\n         BAL   R10,PUTREC\n         MVC   RECORD,$SPACES\n         MVC   RECORD+20(60),124(R7)         SGDFDESC+60\n         BAL   R10,PUTREC\n         MVC   RECTITLE,=CL30'   SG TYPE=                   '\n         MVC   RECDATA-3(L'SGTYPE),SGTYPE\n         BAL   R10,PUTREC\n         MVC   RECTITLE,=CL30'   VIO MAXSIZE (KILOBYTES)=   '\n         MVC   RECDATA(L'SGVIOM),SGVIOM\n         BAL   R10,PUTREC\n         MVC   RECTITLE,=CL30'   VIO UNIT=                  '\n         MVC   RECDATA+6(L'SGVIOU),SGVIOU\n         BAL   R10,PUTREC\n         MVC   RECTITLE,=CL30'   AUTO MIGRATE=              '\n         MVC   RECDATA(L'SGAUTM),SGAUTM\n         BAL   R10,PUTREC\n         MVC   RECTITLE,=CL30'   AUTO MIGRATE SYSTEM=       '\n         MVC   RECDATA+6(L'SGAUTMS),SGAUTMS\n         BAL   R10,PUTREC\n         MVC   RECTITLE,=CL30'   AUTO BACKUP=               '\n         MVC   RECDATA(L'SGAUTB),SGAUTB\n         BAL   R10,PUTREC\n         MVC   RECTITLE,=CL30'   AUTO BACKUP SYSTEM=        '\n         MVC   RECDATA+6(L'SGAUTBS),SGAUTBS\n         BAL   R10,PUTREC\n         MVC   RECTITLE,=CL30'   AUTO DUMP=                 '\n         MVC   RECDATA(L'SGAUTD),SGAUTD\n         BAL   R10,PUTREC\n         MVC   RECTITLE,=CL30'   AUTO DUMP SYSTEM=          '\n         MVC   RECDATA+6(L'SGAUTDS),SGAUTDS\n         BAL   R10,PUTREC\n         MVC   RECTITLE,=CL30'   MIGRATION HIGH (%)=        '\n         MVC   RECDATA+4(L'SGHIGH),SGHIGH\n         BAL   R10,PUTREC\n         MVC   RECTITLE,=CL30'   MIGRATION LOW (%)=         '\n         MVC   RECDATA+4(L'SGLOW),SGLOW\n         BAL   R10,PUTREC\n         MVC   RECTITLE,=CL30'   DUMP CLASSES=              '\n         MVC   RECDATA+2(L'SGDUMP),SGDUMP\n         BAL   R10,PUTREC\n         MVC   RECTITLE,=CL30'   GUARANTEED BACKUP FREQ=    '\n         MVC   RECDATA(L'SGBAKFR),SGBAKFR\n         BAL   R10,PUTREC\n         MVC   RECTITLE,=CL30'   STATUS ON ALL SYSTEMS=     '\n         MVC   RECDATA+4(L'SGSTATUS),SGSTATUS\n         BAL   R10,PUTREC\n         BAL   R4,LASTMOD                PRINT LAST MOD. INFORMATION\n         MVI   RECORD,C'*'\n         BAL   R10,PUTREC\n         A     R7,ELGTH                  ACCESS NEXT STORGROUP ENTRY\n         BCT   R5,LOOPSG\nTHEEND   CLOSE   (SYSPRINT)                                   01-06-93\n         L     R10,ADDZONE\n         L     R9,SIZE\n         FREEMAIN  R,LV=(9),A=(10)\n         L       R13,4(R13)\n         RETURN  (14,12),T,RC=0\nERROR1   ABEND 1,DUMP         NO \"IGDDCD\" BLOCK ENCOUNTERED\nERROR2   ABEND 2,DUMP         NO \"IGDSCD\" BLOCK ENCOUNTERED\nERROR3   ABEND 3,DUMP         NO \"IGDMCD\" BLOCK ENCOUNTERED\nERROR4   ABEND 4,DUMP         NO \"IGDSGD\" BLOCK ENCOUNTERED\nERROR5   ABEND 5,DUMP         NO \"IGDBCD\" BLOCK ENCOUNTERED\n*\n* SUBROUTINE TO PUT A RECORD\nPUTREC   PUT   SYSPRINT,RECORD\n         MVC   RECORD,$SPACES\n         BR    R10\n*\n* SUBROUTINE TO GET LAST MODIF INFO (USERID, DATE, TIME)\nLASTMOD  MVC   RECTITLE,=CL30'   LAST MOD. USERID=          '\n         MVC   RECDATA+3(8),32(R7)               *CDUSER\n         BAL   R10,PUTREC\n         MVC   RECTITLE,=CL30'   LAST MOD. DATE=            '\n         MVC   RECDATA(10),40(R7)                *CDDATE\n         BAL   R10,PUTREC\n         MVC   RECTITLE,=CL30'   LAST MOD. TIME=            '\n         MVC   RECDATA+5(8),56(R7)               *CDTIME\n         BAL   R10,PUTREC\n         BR    R4\n*\n* SUBROUTINE TO CALL SSI TO GET REQUIRED SMS INFORMATION\nCALLSSI  MVC   SSSALEN,=H'1000'\n         MVC   SSSAID,=CL4'SSSA'         IDENTIFIER\n         MVC   SSSASFN,=H'1'             SUBFUNCTION CODE (SSSAACTV)\n         MVC   SSOBFUNC,=H'55'           FUNCTION CODE (SSOBSSSM)\n         MVC   SSSAVER,=H'1'             VERSION       (SSOBSSVR)\n* TELL SSI WHERE REQUIRED DATA CAN BE PUT\n         MVC   SSSA1LEN,SIZE             LENGTH OF AREA\n         L     R7,ADDZONE                SAVE ADDRESS OF ACQUIRED ZONE\n         ST    R7,SSSA1PTR               ADDRESS OF AREA\n         L     R2,ADDZONE\n         L     R3,SIZE\n         XR    R0,R0\n         XR    R1,R1\n         MVCL  R2,R0                     ERASE THE GETMAINED ZONE\n         MODESET MODE=SUP,KEY=ZERO\n         LA    R1,PARAM\n         OI    PARAM,X'80'\n         IEFSSREQ                        CALL SUBSYSTEM INTERFACE\n         ST    R15,RETCODE\n         MODESET MODE=PROB,KEY=NZERO\n         CLC   RETCODE,=F'0'             SSI REQUEST SUCCESSFUL ?\n         BER   R10\n* THE CALL TO THE SSI INTERFACE WAS UNSUCCESSFUL\n         EXTENDW  RETCODE,RC\n         MVC   WTO1+32(10),RC\n         EXTENDW  SSOBRETN,RC\n         MVC   WTO1+53(10),RC\n         EXTENDW  SSSARSN,RC\n         MVC   WTO1+74(10),RC\nWTO1     WTO  'LISTSMS- SSI ERROR, R15=XXXXXXXXXX, SSOBRETN=XXXXXXXXXX,X\n               , SSSARSN=XXXXXXXXXX'\n         ABEND 999,DUMP\nADDZONE  DC    F'0'           ADDRESS OF GETMAINED ZONE\nRETCODE  DC    F'0'\nELGTH    DC    F'0'           LENGTH OF 1 ENTRY\nPARAM    DC    A(SSOB)\nRC       DC    CL10' '        RETURN CODE DECIMAL\nSYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=PM\nMOVDMC   MVC   BCMGMT(1),X'D6'(R7)       BCDMCNAM   DEFAULT MC\nMOVDCN   MVC   DCNAME(1),2(R7)           DCDNAME    NAME OF DC\nMOVSGN   MVC   SGNAME(1),2(R7)           SGDFNAME   NAME OF SG\nMOVMCN   MVC   MCNAME(1),2(R7)           MCDNAME    NAME OF MC\nMOVSCN   MVC   SCNAME(1),2(R7)           SCDNAME    NAME OF SC\nSSOB     DS    0F\n         DC    C'SSOB',H'20'  IDENTIFIER FOR SSOB + LENGTH OF SSOB\nSSOBFUNC DC    H'0'           FUNCTION\nSSOBSSIB DC    A(SSIB)        SSIB ADDRESS\nSSOBRETN DC    F'0'           SUBSYSTEM RETURN CODE\n         DC    A(EXTE),D'0'   EXTENSION ADDRESS + 2 WORK WORDS FOR SSI\n* DATA FOR ONE DATA CLASS\nDCNAME   DS    CL30\nSPPRIM   DS    CL10\nSPSECO   DS    CL10\nSPDIR    DS    CL10\nAVGREC   DS    CL1\nVOLCT    DS    CL6\nFREECI   DS    CL6\nFREECA   DS    CL6\nKEYOFF   DS    CL6\nKEYLEN   DS    CL6\nRETPD1   DS    CL6\nRETPD2   DS    CL6\nAVGVAL   DS    CL10\nLRECL    DS    CL10\nCISIZE   DS    CL10\nRECORG   DS    CL2\nTYPEDS   DS    CL7\nSHR1     DS    CL1\nSHR2     DS    CL1\nRECFM    DS    CL3\nRECFM2   DS    CL1\nREPLI    DS    CL1\nIMBED    DS    CL1\n* DATA FOR ONE STORAGE CLASS\nSCNAME   DS    CL30\nDIRBIAS  DS    CL1\nSEQBIAS  DS    CL1\nGARSPA   DS    CL1\nGARSYW   DS    CL1\nDIRMSR   DS    CL10\nSEQMSR   DS    CL10\nINIMSR   DS    CL10\nAVAIL    DC    C'??????????'\n* DATA FOR ONE MANAGEMENT CLASS\nMCNAME   DS    CL30\nEXPNOUS  DS    CL10\nEXPMYEAR DS    CL10\nEXPMDAY  DS    CL6\nRETLIMT  DS   0CL10\n         DS    CL4\nRETLIMT2 DS    CL6\nPARTREL1 DS   0CL2\nPARTREL  DS    CL10\nPRIMDAYS DS    CL6\nL1DAYS   DS    CL6\nCMAUMIG  DS    CL10\nNGDGPRIM DS    CL6\nROFFGDG  DS    CL10\nBKUPFREQ DS    CL6\nBKUPVERS DS    CL6\nBKUPVRD  DS    CL6\nBKUPRDOB DS   0CL10\n         DS    CL4\nBKUPRDO2 DS    CL6\nBKUPRDEB DS   0CL10\n         DS    CL4\nBKUPRDE2 DS    CL6\nADUSBKUP DS    CL10\nBKUPAUTO DS    CL10\n* DATA FOR ONE STORAGE GROUP\nSGNAME   DS    CL30\nSGTYPE   DS    CL13\nSGVIOM   DS    CL10\nSGVIOU   DS    CL4\nSGAUTM   DS    CL10\nSGAUTMS  DS    CL8\nSGAUTB   DS    CL10\nSGAUTBS  DS    CL8\nSGAUTD   DS    CL10\nSGAUTDS  DS    CL8\nSGHIGH   DS    CL6\nSGLOW    DS    CL6\nSGDUMP   DS    CL44\nSGSTATUS DS    CL55\nSGBAKFR  DS    CL10\n* DATA FOR BASE CONFIGURATION\nBCMGMT   DS    CL30\nBCTRKSZ  DS    CL10\nBCCYLCP  DS    CL10\nBCSYST   DS    CL72\n*\nSIZE     DC    F'200000'           200 K FOR THE BUFFER\nSSIB     DC    CL4'SSIB',AL2(36),X'0000',C'SMS ',CL8'SMS',CL8' ',2F'0'\n* WORK ZONES\nDBLEWORD DS    D                   DOUBLE WORD FOR INSTRUCTION CVD\n         ORG   DBLEWORD+5\nPACKED3  DS    PL3\n         ORG   DBLEWORD+3\nPACKED5  DS    PL5\nHALFWORD DS    H\n* SAVE AREA\nSAVE     DS    18F                 MY SAVE AREA\nMASK1    DC    X'402020202121'              MASK FOR PACKED LENGTH 3\nMASK2    DC    X'40202020202020202121'      MASK FOR PACKED LENGTH 5\n$SPACES  DC    CL80' '\n$ZEROES  DC    X'0000000000000000'\nTITLE    DC    CL80'*             - LIST OF DEFINED SMS CONSTRUCTS -'\nRECORD   DS    0CL80\nRECTITLE DS    CL30\nRECDATA  DS    CL50\n         LTORG\n         DS    0F\nEXTE     DS    CL1000              SSOB EXTENSION FOR SMS FUNCTIONS\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "LISTVT": {"ttr": 3335, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x004\\x7f\\x01\\x004\\x7f\\x16Q\\x00\\x92\\x00\\x92\\x00\\x00\\xe4\\xd7\\xc4\\xf2\\xf0\\xf0\\xf0@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-12-12T00:00:00", "modifydate": "2000-12-12T16:51:00", "lines": 146, "newlines": 146, "modlines": 0, "user": "UPD2000"}, "text": "  /* REXX          (C) COPYRIGHT : THIERRY FALISSARD               */\n  /* SYS1.MACLIB(IDCDOUT) */\n\n  CTRV = 0\n  CTRD = 0\n\n  TITRE = '-------------- D S N A M E ----------------- SMS DSORG '\n  TITRE = TITRE||'RECFM BLKSIZE '\n  TITRE = TITRE||'LRECL ALLOCATED     USED   CREATION   EXPIR. '\n  TITRE = TITRE||'LASTREF. SEQ XT '\n  TITRE = TITRE||'VOLSER DATACLAS   STORCLAS   MGMTCLAS   STORGRP'\n\n  DO FOREVER\n  'EXECIO 1 DISKR DCOL    (STEM REC.  '    /* READING //DCOL */\n  IF RC > 0 THEN DO\n                 SAY '**' CTRV 'VOLUMES,' CTRD 'FILES WERE PROCESSED'\n                 EXIT\n                 END\n  TYPE  = SUBSTR(REC.1,5,1)\n  /*                                                            */\n  /*  RECORD TYPE IS : VOLUME                                   */\n  /*                                                            */\n  IF   TYPE  =   'V'   THEN   DO\n       CTRV = CTRV + 1\n       IF CTRV//10 = 0 THEN DO\n          SAY 'ALREADY' CTRV 'VOLUMES PROCESSED, AND' ,\n          CTRD 'FILES'\n          END\n       VOLSER     = SUBSTR(REC.1,25,6)\n       FLAG1      = SUBSTR(REC.1,31,1)\n       INDXVT     = 'NO VTOCIX   '\n       IF (BITAND(FLAG1,'40'X) = '40'X) THEN ,\n                 INDXVT  = 'ACT VTOCIX  '\n                 ELSE IF (BITAND(FLAG1,'80'X) = '80'X) THEN ,\n                         INDXVT  = 'INACT VTOCIX'\n       DEVICE     = SUBSTR(REC.1,69,8)\n       DEVICENUM  = C2X(SUBSTR(REC.1,77,2))\n       SGNAME     = SUBSTR(REC.1,83,10)\n       POURCFREE  = FORMAT(C2D(SUBSTR(REC.1,36,1)),3)||'% FREE'\n       KFREE      = FORMAT(C2D(SUBSTR(REC.1,37,4)),9)||'K FREE'\n       KALLOC     = FORMAT(C2D(SUBSTR(REC.1,41,4)),9)||'K ALLOCATED'\n       KCAPAC     = FORMAT(C2D(SUBSTR(REC.1,45,4)),9)||'K CAPACITY'\n       RECO.1 = ,\n           '** VOLUME' VOLSER DEVICENUM SGNAME DEVICE INDXVT '-' ,\n                  POURCFREE '-' KCAPAC '-' KFREE '-' KALLOC\n  'EXECIO 1 DISKW DCOLOUT (STEM RECO. '    /* WRITING RECORD VOLUME*/\n\n  /* AUTRES INFOS                TF 17-7-95         */\n       ERCODE     =     SUBSTR(REC.1,32,1)\n       IF  ERCODE =  '00'X THEN ERCODE = '  '\n                           ELSE DO\n                                ERCODE = 'ERROR CODE' C2X(ERCODE)\n                                SAY '** VOLUME' VOLSER ERCODE\n                                END\n       FRAGIDX    = FORMAT(C2D(SUBSTR(REC.1,49,4)),9)\n       LARGEXT    = FORMAT(C2D(SUBSTR(REC.1,53,4)),9)\n       NFREEXT    = FORMAT(C2D(SUBSTR(REC.1,57,4)),9)\n       NFREEDSCB  = FORMAT(C2D(SUBSTR(REC.1,61,4)),9)\n       NFREEVIR   = FORMAT(C2D(SUBSTR(REC.1,65,4)),9)\n       RECO.1 = ,\n         '          FRAGIDX='||FRAGIDX ,\n                  '      LARGEST EXTENT='||LARGEXT||'K' ,\n                  '      FREE EXTENTS='||NFREEXT ,\n                  '      FREE DSCBS='||NFREEDSCB ,\n                  '      FREE VIRS='||NFREEVIR  ERCODE\n  'EXECIO 1 DISKW DCOLOUT (STEM RECO. '    /* WRITING RECORD VOLUME*/\n\n   RECO.1 = TITRE\n  'EXECIO 1 DISKW DCOLOUT (STEM RECO. '    /* WRITING HEADER       */\n       END\n  /*                                                            */\n  /*  RECORD TYPE IS : DATASET                                  */\n  /*                                                            */\n  IF   TYPE  =   'D'   THEN   DO\n       CTRD = CTRD + 1\n       DSN        = SUBSTR(REC.1,25,44)\n       FLAG1      = SUBSTR(REC.1,70,1)\n       FLAG2      = SUBSTR(REC.1,71,1)\n\n       CATL       = 'NO  '\n       IF (BITAND(FLAG2,'20'X) = '20'X) THEN ,\n                 CATL    = '    '\n\n       INFO       = '    '\n       IF (BITAND(FLAG1,'40'X) = '40'X) THEN ,\n                 INFO    = 'SMS '\n       IF (BITAND(FLAG1,'10'X) = '10'X) THEN ,\n                 INFO    = 'PDSE'\n\n       INFDSORG   = '   ?'\n       DSORG      = SUBSTR(REC.1,75,1)\n       DSORG2     = SUBSTR(REC.1,76,1)\n       IF (BITAND(DSORG,'80'X) = '80'X) THEN   INFDSORG  = 'ISAM'\n       IF (BITAND(DSORG,'40'X) = '40'X) THEN   INFDSORG  = '  PS'\n       IF (BITAND(DSORG,'20'X) = '20'X) THEN   INFDSORG  = '  DA'\n       IF (BITAND(DSORG2,'08'X) = '08'X) THEN  INFDSORG  = 'VSAM'\n       IF (BITAND(DSORG,'02'X) = '02'X) THEN   INFDSORG  = '  PO'\n       INFDSORG2  = ' '\n       IF (BITAND(DSORG,'01'X) = '01'X) THEN   INFDSORG2 = 'U'\n\n       INFRECFM   = ' '\n       RECFM      = SUBSTR(REC.1,77,1)\n       IF (BITAND(RECFM,'80'X) = '80'X) THEN   INFRECFM  = 'F'\n       IF (BITAND(RECFM,'40'X) = '40'X) THEN   INFRECFM  = 'V'\n       IF (BITAND(RECFM,'C0'X) = 'C0'X) THEN   INFRECFM  = 'U'\n       IF (BITAND(RECFM,'10'X) = '10'X) THEN   INFRECFM  = INFRECFM||,\n                       'B'\n       IF (BITAND(RECFM,'08'X) = '08'X) THEN   INFRECFM  = INFRECFM||,\n                       'S'\n       IF (BITAND(RECFM,'04'X) = '04'X) THEN   INFRECFM  = INFRECFM||,\n                       'A'\n       IF (BITAND(RECFM,'02'X) = '02'X) THEN   INFRECFM  = INFRECFM||,\n                       'M'\n       INFRECFM   = SUBSTR(INFRECFM||'        ',1,4)\n\n       BLKSIZE    = FORMAT(C2D(SUBSTR(REC.1,85,2)),5)\n       LRECL      = FORMAT(C2D(SUBSTR(REC.1,87,2)),5)\n       ALLOCSP    = FORMAT(C2D(SUBSTR(REC.1,89,4)),9)\n       USEDSP     = FORMAT(C2D(SUBSTR(REC.1,93,4)),9)\n       SECONDSP   = FORMAT(C2D(SUBSTR(REC.1,97,4)),9)\n       CREDT      = C2X(SUBSTR(REC.1,105,4))\n       CREDT      = SUBSTR(CREDT,1,4)||'/'SUBSTR(CREDT,5,3)\n       EXPDT      = C2X(SUBSTR(REC.1,109,4))\n       EXPDT      = SUBSTR(EXPDT,1,4)||'/'SUBSTR(EXPDT,5,3)\n       LASTREF    = C2X(SUBSTR(REC.1,113,4))\n       LASTREF    = SUBSTR(LASTREF,1,4)||'/'SUBSTR(LASTREF,5,3)\n       EXTENTS    = FORMAT(C2D(SUBSTR(REC.1,78,1)),3)\n       VOLSEQ     = FORMAT(C2D(SUBSTR(REC.1,123,2)),2)\n  /*   LASTBKUP   = C2X(SUBSTR(REC.1,125,8))                    */\n  /*   IF LASTBKUP = '0000000000000000' THEN ,                  */\n  /*              LASTBKUP = '                '                 */\n\n       DATACLAS   = SUBSTR(REC.1,135,10)\n       STORCLAS   = SUBSTR(REC.1,167,10)\n       MGMTCLAS   = SUBSTR(REC.1,199,10)\n       STORGRP    = SUBSTR(REC.1,231,10)\n       VOLSER2    = SUBSTR(REC.1,79,6)\n\n       RECO.1 = ,\n           DSN INFO INFDSORG INFDSORG2 INFRECFM BLKSIZE LRECL ,\n            ALLOCSP||'K' USEDSP||'K' CREDT EXPDT LASTREF ,\n          VOLSEQ EXTENTS VOLSER2 DATACLAS STORCLAS MGMTCLAS STORGRP ,\n            CATL\n  'EXECIO 1 DISKW DCOLOUT (STEM RECO. '    /* WRITING //DCOLOUT */\n       END\n  END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LISTVTOC": {"ttr": 3339, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x01\\x004\\x7f\\x01\\x004\\x7f\\x16Q\\x00\\x1e\\x00\\x1e\\x00\\x00\\xe4\\xd7\\xc4\\xf2\\xf0\\xf0\\xf0@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2000-12-12T00:00:00", "modifydate": "2000-12-12T16:51:00", "lines": 30, "newlines": 30, "modlines": 0, "user": "UPD2000"}, "text": "//LISTVTOC JOB 1,'DCOLLECT + LISTVTOC',MSGLEVEL=(1,1),\n//    MSGCLASS=H,CLASS=A,\n//    NOTIFY=&SYSUID,COND=(4,LT),REGION=8000K\n//*\n//* PARAMETERS\n//*\n//   SET  OUTFILE='PROD.LISTVTOC.ALL'           OUTPUT FILE\n//   SET  REXXLIB='ETIC2.CBTTF.PDS'             THIS PDS\n//*---------------------------------------------------------------------\n//DCOLLECT  EXEC PGM=IDCAMS\n//*---------------------------------------------------------------------\n//SYSPRINT  DD SYSOUT=*\n//OUT       DD DISP=(NEW,PASS),DSN=&&OUTLIST,SPACE=(CYL,(10,10),RLSE),\n//          UNIT=SYSALLDA,LRECL=900,RECFM=VB,DSORG=PS\n//SYSIN     DD *\n  /*                                                               */\n  /*  LISTING ALL FILES ON ALL DASD VOLUMES                        */\n  /*                                                               */\n   DCOLLECT  OUTFILE(OUT) VOLUME(*)\n//*\n//*---------------------------------------------------------------------\n//LISTVOL   EXEC PGM=IRXJCL,PARM='LISTVT'    FORMATTING DCOLLECT OUTPUT\n//*---------------------------------------------------------------------\n//SYSEXEC   DD  DISP=SHR,DSN=&REXXLIB\n//SYSTSPRT  DD  SYSOUT=*\n//DCOL      DD  DISP=SHR,DSN=*.DCOLLECT.OUT\n//DCOLOUT   DD  DSN=&OUTFILE,DISP=(MOD,CATLG,DELETE),\n//         SPACE=(CYL,(10,10),RLSE,,ROUND),\n//         RECFM=FB,LRECL=200,DSORG=PS,\n//         UNIT=SYSALLDA\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MGDOS": {"ttr": 3341, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x991_\\x00\\x991_\\x11P\\x03j\\x03j\\x00\\x00\\xe3\\xc8\\xc9\\xc5\\xd9\\xd9\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-11-11T00:00:00", "modifydate": "1999-11-11T11:50:00", "lines": 874, "newlines": 874, "modlines": 0, "user": "THIERRY"}, "mimetype": "application/zip", "datatype": "binary", "extension": ".zip"}, "MGWIN": {"ttr": 3845, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x004\\x7f\\x01\\x004\\x7f\\x12\\x06&\\xc8&\\xc8\\x00\\x00\\xd7\\xc3`\\xc4\\xd6\\xe2@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-12-12T00:00:00", "modifydate": "2000-12-12T12:06:00", "lines": 9928, "newlines": 9928, "modlines": 0, "user": "PC-DOS"}, "mimetype": "application/zip", "datatype": "binary", "extension": ".zip"}, "MINIFRAN": {"ttr": 7939, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x01\\x004\\x7f\\x01\\x004\\x7f\\x16Q\\x02O\\x02O\\x00\\x00\\xe4\\xd7\\xc4\\xf2\\xf0\\xf0\\xf0@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2000-12-12T00:00:00", "modifydate": "2000-12-12T16:51:00", "lines": 591, "newlines": 591, "modlines": 0, "user": "UPD2000"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "MINISYST": {"ttr": 8195, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x01\\x004\\x7f\\x01\\x004\\x7f\\x16Q\\x02X\\x02X\\x00\\x00\\xe4\\xd7\\xc4\\xf2\\xf0\\xf0\\xf0@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2000-12-12T00:00:00", "modifydate": "2000-12-12T16:51:00", "lines": 600, "newlines": 600, "modlines": 0, "user": "UPD2000"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "MVSCMD": {"ttr": 8451, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x991_\\x00\\x991_\\x11P\\x00B\\x00B\\x00\\x00\\xe3\\xc8\\xc9\\xc5\\xd9\\xd9\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-11-11T00:00:00", "modifydate": "1999-11-11T11:50:00", "lines": 66, "newlines": 66, "modlines": 0, "user": "THIERRY"}, "text": "* AN AGELESS BOX-OFFICE SUCCESS, USED TO ISSUE ANY MVS OR JES2 COMMAND\n*(JUST TRY TO ISSUE THE $TA COMMAND BELOW IN BATCH BY ANOTHER MEANS...)\n*\n* //S0 EXEC PGM=MVSCMD,PARM='D T'\n* //S1 EXEC PGM=MVSCMD\n* //SYSIN DD *\n* $TA,I=200,T=12.05,'$VS,''S MAINT'''\n*\n*\nMVSCMD   CSECT\n         PROLOG BASEREG=11,REQUATE=YES,AUTHOR=TF\n         L    R10,0(R1)\n         USING PARAM,R10\n         CLC  LL,=H'0'\n         BNE  PARMYES\n* PAS DE PARAMETRES, OUVERTURE SYSIN\n         OPEN (SYSIN,(INPUT))\nLOOPGET  GET  SYSIN,CMD\nEMETTRE  MODESET MODE=SUP,KEY=ZERO\n         LA   R1,CMDLEN\n         XR   R0,R0\n         SVC  34\n         MODESET MODE=PROB,KEY=NZERO\n         B    LOOPGET\nENDSYS   CLOSE (SYSIN)\n         B    FIN\nPARMYES  DS   0H       PARM=  SPECIFIE\n         MVI  CMD,C' '\n         MVC  CMD+1(L'CMD-1),CMD      REMISE A BLANC ZONE CMD\n         XR   R3,R3\n         LH   R3,LL\n         BCTR R3,0   MOINS 1 POUR MVC\n         EX   R3,MOVE\n* CHANGER LES X'00' EN BLANCS\n*\n         LA   R5,CMD\n         LA   R6,CMD\n         LA   R6,L'CMD(0,R6)    ADRESSE DE FIN\nLOOP     CLI  0(R5),X'00'\n         BNE  SUIT\n         MVI  0(R5),C' '\nSUIT     LA   R5,1(0,R5)\n         CR   R5,R6\n         BNL  FINI\n         B    LOOP\nFINI     DS   0H\n         MODESET MODE=SUP,KEY=ZERO\n         LA   R1,CMDLEN\n         XR   R0,R0\n         SVC  34\n         MODESET MODE=PROB,KEY=NZERO\nFIN      L       R13,4(R13)\n         RETURN  (14,12),T,RC=0\nMOVE     MVC  CMD(1),COMMANDE\n         CNOP 0,8\nCMDLEN   DC   H'80'\n         DC   H'0'\nCMD      DS   CL256\nREG3     DC   CL8' '\nMOT      DS   F\nSYSIN    DCB  DDNAME=SYSIN,MACRF=GM,EODAD=ENDSYS,DSORG=PS,LRECL=80\n         LTORG\nPARAM    DSECT\nLL       DS   H\nCOMMANDE DS   CL256\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PADS": {"ttr": 8453, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x004\\x7f\\x01\\x004\\x7f\\x16Q\\x00\\x86\\x00\\x86\\x00\\x00\\xe4\\xd7\\xc4\\xf2\\xf0\\xf0\\xf0@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-12-12T00:00:00", "modifydate": "2000-12-12T16:51:00", "lines": 134, "newlines": 134, "modlines": 0, "user": "UPD2000"}, "text": " /* REXX EXEC TO HELP ENABLE PADS MODE                               */\n /* (pads = program access to data sets)                             */\n /*                                                                  */\n /* This exec may be used to install PADS mdoe access to a dataset.  */\n /* It must be adapted.                                              */\n /*                                                                  */\n /* It was built originally for Consul/RACF to access the RACF DB    */\n /* in PADS mode from ISPF.                                          */\n /* The big \"plus\" of this exec is that it defines all link-list     */\n /* libraries in the \"*\" profile of class PROGRAM.                   */\n\n /*------------------------------------------------------------------*/\n /* PARAMETERS TO BE SET                                             */\n /* The file \"myfile\" is to be accessed by user \"padsusr\" only       */\n /* using program \"mypgm\" from loadlib \"loadlib\" on disk \"loadlibv\". */\n /*------------------------------------------------------------------*/\n\n LOADLIB  = 'P390.LOADLIB'                 /* LOADLIB LIBRARY DSNAME */\n LOADLIBV = 'OS39M1'                       /* LOADLIB LIBRARY VOLSER */\n                                           /* LOADLIBV = '' IF SMS   */\n MYFILE   = 'IBMUSER.MYFILE'  /* GENERIC PROFILE FOR RACF DB         */\n MYPGM    = 'MYPROGM'         /* program used in pads mode           */\n PADSUSR  = 'P390A'           /* USER OR GROUP TO USE     PADS MODE  */\n catlged  = 'Y'               /* 'Y' if datasets in link-list        */\n                              /* are cataloged, any other value if   */\n                              /* you are unsure.                     */\n\n say 'RACF version is' sysvar(syslracf)\n\n if sysvar(syslracf) >= '2040' then do\n        LOADLIBV = ''       /* no volser needed for RACF v2.4       */\n        end\n /*------------------------------------------------------------------*/\n /* PRELIMINARY RACF ACTIONS (supposing there is already a profile   */\n /*  covering MYFILE).                                               */\n /*  - Make sure default access to MYFILE is 'none'                  */\n /*  - Make sure RACF program control is active                      */\n /*------------------------------------------------------------------*/\n\n IF 1 = 1 THEN DO\n ADDRESS TSO \"ADDSD '\"MYFILE\"'  GENERIC  UACC(NONE)\"\n say 'Addsd of dataset' myfile 'resulted in rc=' rc\n ADDRESS TSO \"ALD '\"MYFILE\"'  GENERIC  UACC(NONE)\"\n say 'Altdsd of dataset' myfile 'resulted in rc=' rc\n say 'Uacc of file' myfile 'set to none, rc=' rc\n /* ACTIVATE PROGRAM CONTROL                                 */\n ADDRESS TSO \"SETROPTS WHEN(PROGRAM)\"\n SAY     \"SETROPTS WHEN(PROGRAM)    RC=\" RC\n end\n\n /*------------------------------------------------------------------*/\n /* DEFINE PROGRAM PROFILES                                          */\n /*------------------------------------------------------------------*/\n IF 1 = 1 THEN DO\n         ADDRESS TSO \"RDEF  PROGRAM \" mypgm ,\n                 \"ADDMEM('\"||LOADLIB||\"'/\"||LOADLIBV||\"/PADCHK)\"\n         SAY     \"RDEF PROGRAM\" mypgm \"RC=\" RC\n\n        END\n\n /*------------------------------------------------------------------*/\n /* USER-SPECIFIC ACTIONS                                            */\n /* 1) permit use of program                                         */\n /* 2) permit access to MYFILE in pads mode                          */\n /*------------------------------------------------------------------*/\n IF 1 = 1 THEN DO\n /* 1) PERMIT USE OF PROGRAM                                         */\n         ADDRESS TSO ,\n         \"PE\" mypgm \"CLASS(PROGRAM) ID(\"PADSUSR\") ACCESS(READ)\"\n         SAY \"PERMIT PROGRAM\" mypgm \"TO USER/GROUP\" PADSUSR \"RC=\"RC\n /* 2) PERMIT ACCESS TO MYFILE IN PADS MODE                          */\n         /* GRANT PERMIT IN PADS MODE TO THE USER/GROUP              */\n         ADDRESS TSO \"PE '\"MYFILE\"' GENERIC\" ,\n         \"WHEN(PROGRAM(\"mypgm\")) ID(\"PADSUSR\")\"\n         SAY     \"PERMIT\" MYFILE \"TO USER/GROUP\" PADSUSR \"RC=\"RC\n         ADDRESS TSO \"SETR REFRESH GENERIC(DATASET)\"\n        END\n\n CMD = 'RALTER '      /* No need to RDEFine * in PROGRAM further on  */\n /*------------------------------------------------------------------*/\n /* DELETE THE GENERIC ENTRY '*' IN CLASS PROGRAM                    */\n /*------------------------------------------------------------------*/\n\n IF 1 = 0 THEN DO           /* 1 = 0 : we suppose the entry exists   */\n        ADDRESS TSO \"RDEL PROGRAM *\"\n        SAY         \"RDEL PROGRAM *   RC=\" RC\n        CMD = 'RDEFINE'      /* RDEFine must be done further on      */\n        END\n\n /*------------------------------------------------------------------*/\n /* REBUILD THE GENERIC ENTRY '*' IN CLASS PROGRAM                   */\n /* RACF-AUTHORIZE ACCESS TO LINKLIST IN ORDER                       */\n /* NOT TO LOAD A 'DIRTY' (NON-CONTROLLED) MODULE                    */\n /*------------------------------------------------------------------*/\n\n sysres = MVSVAR('SYMDEF','SYSR1')          /* system resident volume*/\n                        /* sysres name will be replaced by '******'  */\n\n say\n IF 1 = 1 THEN DO\n     CVT  = STORAGE(10,4)                   /* CVT ADDRESS IN MEMORY */\n                                            /* CVT+4DC=CVTLLTA       */\n     LLT    = STORAGE(D2X(1244+C2D(CVT)),4) /* LINKLIST TABLE address*/\n     NB     = STORAGE(D2X(4+C2D(LLT)),4)    /* Number of entries     */\n     NBR    = C2D(NB)                       /* Number of entries     */\n     I = 0\n     O = 9\n     DO WHILE I < NBR\n     DSN    = STORAGE(D2X(O+C2D(LLT)),44)   /* DSN of library       */\n     dsn    = strip(dsn)\n     X      = LISTDSI(DSN)  /* GET DATASET INFORMATION (VOLUME)     */\n     SAY  \"LINK-LIST:\" DSN sysvolume\n     vol    = sysvolume\n     if     vol = sysres  then vol = \"'******'\"\n     /* Beginning with RACF 2.4, volser may be omitted              */\n     if sysvar(syslracf) >= '2040' & catlged = 'Y' then do\n        vol = ''            /* no volser needed for RACF            */\n        end\n     I = I+1\n     O = O+45\n     /* FIRST PASS may be used to CREATE '*' ENTRY IN PROGRAM CLASS */\n     IF   I  >  1  THEN   CMD = 'RALTER '\n     /* TAKE INTO ACCOUNT THIS LINK-LIST LIBRARY                    */\n     ADDRESS TSO  CMD  \"PROGRAM  * \" ,\n     \"ADDMEM('\"||DSN||\"'/\"||VOL||\"/NOPADCHK) UACC(READ)\"\n     SAY CMD \"PROGRAM * FOR DSN=\" DSN \"(\"VOL\") RC=\" RC\n     END\n     END\n\n\n /*------------------------------------------------------------------*/\n /* REFRESH PROGRAM PROFILES TO ACTIVATE CHANGES                     */\n /*------------------------------------------------------------------*/\n ADDRESS TSO \"SETROPTS REFRESH WHEN(PROGRAM)\"\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PREMIER": {"ttr": 8456, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x991_\\x00\\x991_\\x11P\\x00^\\x00^\\x00\\x00\\xe3\\xc8\\xc9\\xc5\\xd9\\xd9\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-11-11T00:00:00", "modifydate": "1999-11-11T11:50:00", "lines": 94, "newlines": 94, "modlines": 0, "user": "THIERRY"}, "text": "*\n* CE PROGRAMME VERIFIE SI UN NOMBRE DE 10 CHIFFRES EST PREMIER\n* APPEL EN BATCH :   //  EXEC PGM=PREMIER,PARM=NNNNNNNNNN\n*\nPREMIER  CSECT\n*\n* INSTRUCTIONS DE CHAINAGE APPELANT/APPELE\n*\n        USING   *,R15     R15 REGISTRE DE BASE TEMPORAIRE\n        SAVE (14,12),,PREMIER-&SYSDATE-&SYSTIME-FALISSARD\n        DROP R15          R15 N'EST PLUS REGISTRE DE BASE\n        LR   R12,R15      INITIALISER R12 REGISTRE DE BASE\n        USING PREMIER,R12\n        LR   R11,R13      R11 POINTE SUR SAVE AREA DE L'APPELANT\n        LA   R13,SAVE     R13 POINTE SUR NOTRE SAVE AREA\n        ST   R13,8(R11)   SAUVER ADRESSE DE NOTRE SAVE CHEZ L'APPELANT\n        ST   R11,4(R13)   SAUVER ADRESSE SAVE DE L'APPELANT CHEZ NOUS\n*\n* CONTROLE SUR LE NOMBRE (10 CHIFFRES) ET CONVERSION EN BINAIRE\n*\n        L    R2,0(R1)     RECUPERER LE PARAMETRE PASSE EN PARM= DU JCL\n        MVC  NOMBRE,2(R2) NOTER LE NOMBRE (SAUTER 2 OCTETS DE LONGUEUR)\n        CLC  NOMBRE,MAXI  VERIFIER SI NOMBRE PAS TROP GRAND\n        BH   FIN          SI OUI, FINI\n        PACK NBREP,NOMBRE CONVERSION DECIMAL ETENDU -> PACKE\n        CVB  R4,NBREP     CONVERSION PACKE -> BINAIRE\n        ST   R4,NBRE      MEMORISER DANS \"NBRE\"\n*\n        LA   R6,2         PREMIER DIVISEUR A TESTER : 2\n*\n* BOUCLE POUR TESTER LA DIVISIBILITE\n* ON TESTE TOUS LES DIVISEURS POSSIBLES, DE 2 JUSQU'A RACINE DU NOMBRE\n*\nLOOP    DS   0H\n* VERIFIER GRANDEUR DU DIVISEUR\n        XR   R8,R8        FORCER R8 A 0\n        LR   R9,R6        CHARGER LE DIVISEUR\n        MR   R8,R6        LE MULTIPLIER PAR LUI-MEME\n        C    R9,NBRE      CARRE DU DIVISEUR DOIT ETRE < NOMBRE\n        BH   PREM         SINON TERMINE, LE NOMBRE EST PREMIER\n*\n        XR   R4,R4        FORCER R4 A 0\n        L    R5,NBRE      CHARGER LE NOMBRE\n        DR   R4,R6        DIVISER\n        LTR  R4,R4        RESTE DE LA DIVISION = 0 ?\n        BZ   NONPREM      OUI, NON PREMIER\n        LA   R6,1(0,R6)   DIVISEUR SUIVANT (ON AJOUTE 1 A R6)\n        B    LOOP         TESTER LE DIVISEUR SUIVANT\n*\n* NOMBRE NON PREMIER,ON A TROUVE UN DIVISEUR, ON L'AFFICHE A LA CONSOLE\n*\nNONPREM DS   0H\n        CVD  R6,NBREP     CONVERSION BINAIRE -> PACKE\n        UNPK NOMBRE,NBREP CONVERSION EN DECIMAL ETENDU\n        OI   NOMBRE+L'NOMBRE-1,X'F0' NORMALISER LE SIGNE\n        WTO  '** NOMBRE NON PREMIER, UN DIVISEUR EST :',ROUTCDE=11\n        MVC  WTO001+8(10),NOMBRE    METTRE LE NOMBRE DANS LE MESSAGE\nWTO001  WTO '                                           ',ROUTCDE=11\n*\n* FIN D'EXECUTION\n*\nFIN     L    R13,4(R13)\n        RETURN   (14,12),T,RC=0\n*\n* NOMBRE PREMIER, ON N'A PAS TROUVE DE DIVISEUR\n*\nPREM    WTO  '** LE NOMBRE EST PREMIER **',ROUTCDE=11\n        B    FIN\n*\n* DONNEES\n*\nNOMBRE  DC   CL10' '              NOMBRE RECU EN PARAMETRE\nMAXI    DC   CL10'2147483647'     CONTENU MAXI D'UN MOT BINAIRE\nNBRE    DC   F'0'                 NOMBRE EN BINAIRE\n        CNOP 0,8                 FRONTIERE DE DOUBLE-MOT\nNBREP   DC   PL8'0'               NOMBRE EN DECIMAL PACKE\nSAVE    DS   18F                  SAVE AREA 18 MOTS\nR0      EQU  0\nR1      EQU  1\nR2      EQU  2\nR3      EQU  3\nR4      EQU  4\nR5      EQU  5\nR6      EQU  6\nR7      EQU  7\nR8      EQU  8\nR9      EQU  9\nR10     EQU  10\nR11     EQU  11\nR12     EQU  12\nR13     EQU  13\nR14     EQU  14\nR15     EQU  15\n        END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PRINTHX": {"ttr": 8459, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x991_\\x00\\x991_\\x11P\\x00\\x1d\\x00\\x1d\\x00\\x00\\xe3\\xc8\\xc9\\xc5\\xd9\\xd9\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-11-11T00:00:00", "modifydate": "1999-11-11T11:50:00", "lines": 29, "newlines": 29, "modlines": 0, "user": "THIERRY"}, "text": "         MACRO\n&NLA     PRINTHX  &BIN,&DISPL\n&NLA     DS    0H\n.*\n.* CONVERSION D'UNE CHAINE BINAIRE EN CARACTERES HEXA\n.* EX.      1 MOT CONTENANT X'80103444'  -> C'80103444'\n.*       REGISTRES UTILISES : AUCUN\n.*\n.* RESTRICTIONS :\n.*\n.* - LA CHAINE BINAIRE &BIN NE PEUT DEPASSER 7C\n.* - L'OCTET SUIVANT LA CHAINE BINAIRE &BIN EST LU...\n.* - ON SUPPOSE (SANS LE VERIFIER) QUE &DISPL EST AU MOINS\n.*     2 FOIS PLUS LONGUE QUE &BIN (+ 1 OCTET QUI SERA ECRASE)\n.*\n         LCLA  &LB,&LD,&LB1,&LD1     LONGUEURS ZONES\n&LB      SETA  L'&BIN\n&LB1     SETA  &LB+1\n&LD      SETA  L'&DISPL\n&LD1     SETA  &LD+1\n&LD      SETA  2*&LB1-1\n&LB      SETA  &LB*2\n.*\n         UNPK    &DISPL.(&LD),&BIN.(&LB1)   ETENDRE : X'1D'->X'F1FD'\n         NC      &DISPL.(&LB),=XL&LB'0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F' X\n               SUPPRIMER DEMI-OCTET A F DANS LE X'F?': X'F1FD'->X'010D'\n         TR      &DISPL.(&LB),=C'0123456789ABCDEF' VALEURS HEXA FINALES\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PROLOG": {"ttr": 8461, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x991_\\x00\\x991_\\x11P\\x00f\\x00f\\x00\\x00\\xe3\\xc8\\xc9\\xc5\\xd9\\xd9\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-11-11T00:00:00", "modifydate": "1999-11-11T11:50:00", "lines": 102, "newlines": 102, "modlines": 0, "user": "THIERRY"}, "text": "         MACRO\n.* PARTICULARITES   :\n.* MACROS INVOQUEES : SAVE GETMAIN\n&NLA  PROLOG &AUTHOR=,&BASEREG=,&RENT=NO,&REQUATE=NO,                  *\n               &COMMENT=' '\n.* CETTE MACRO ETABLIT LE CHAINAGE DES SAVES, INITIALISE LES REGISTRES\n.* DE BASE, CREE LA SAVE AREA DU PROGRAMME.       PARAMETRES :\n.*           AUTHOR : CARACTERES QUELCONQUES, GENERE 'AUTHOR=...'\n.*           BASEREG=(...,...,) : LISTE DES REGISTRES DE BASE\n.*           RENT : YES OU NO SELON QUE PGM RE-ENTRANT OU PAS\n.*           REQUATE : YES POUR AVOIR EQUIVALENCE R1<->1 ETC.\n.*\n.* EXEMPLE : PROLOG AUTHOR=A.B.,BASEREG=(12,11),REQUATE=YES,\n.*             COMMENT='PROGRAMME DE TEST'\n.*\n        LCLA    &I,&D\n        LCLC    &CH,&MONTH(12),&MOIS,&JOUR,&AN,&M\n&MONTH(1) SETC 'JANVIER','FEVRIER','MARS'\n&MONTH(4) SETC  'AVRIL','MAI','JUIN','JUILLET'\n&MONTH(8) SETC 'AOUT','SEPTEMBRE','OCTOBRE','NOVEMBRE','DECEMBRE'\n&JOUR       SETC  '&SYSDATE'(4,2)\n&AN         SETC  '&SYSDATE'(7,2)\n&M          SETC  '&SYSDATE'(1,2)\n&MOIS       SETC  '&MONTH(&M)'\n.*\n        AIF     ('&REQUATE' NE 'YES').DEB\n&I      SETA    0\n.INCR   ANOP\nR&I     EQU     &I\n&I      SETA    &I+1\n        AIF     (&I LT 16).INCR\n.DEB    ANOP\n MNOTE '*--------------------------------------------------------*'     '*\n MNOTE '* CSECT               : &SYSECT'\n MNOTE '* RE-ENTRANT (YES/NO) : &RENT'\n MNOTE '* DATE  ASSEMBLAGE    : &JOUR &MOIS 19&AN'\n MNOTE '* HEURE ASSEMBLAGE    : &SYSTIME'\n MNOTE '* AUTEUR              : &AUTHOR'\n MNOTE '* PARAMETRES (SYSPARM): &SYSPARM'\n MNOTE '* REGISTRE(S) DE BASE : &BASEREG'\n MNOTE '*--------------------------------------------------------*'\n TITLE &COMMENT\n        USING *,15\n&NLA    SAVE    (14,12),,&SYSECT-&SYSDATE-&SYSTIME-&AUTHOR\n        AIF     ('&RENT' EQ 'NO').LOAD\n        AIF     ('&RENT' NE 'YES').ERR1\n        GETMAIN R,LV=72  GET 72 BYTES OF VIRTUAL STORAGE\n        ST      13,4(1)  STORE ADDRESS OF OLD SAVE AREA\n        ST      1,8(13)  STORE ADDRESS OF NEW SAVE AREA\n        LR      13,1     R13 CONTAINS ADDRESS OF NEW SAVE (FOR SUBPGMS)\n        L       1,4(1)   LOAD ADDRESS OF OLD SAVE AREA\n        L       15,16(1) RESTAURER REG15 TO ENTRY POINT ADDRESS\n        L       1,24(1)  RESTAURE REG1 FROM REG1 IN OLD SAVE\n        AGO     .LOAD\n.*\n.LOAD   ANOP\n        DROP    15\n.* CONSTRUCTION \"USING\" DES REGISTRES DE BASE\n&CH     SETC    '&BASEREG(1)'\n&I      SETA     2\n.T1     AIF     (&I GT N'&BASEREG).SUIT1\n&CH     SETC    '&CH'.','.'&BASEREG(&I)'\n&I      SETA    &I+1\n        AGO     .T1\n.SUIT1  ANOP\n        LR      &BASEREG(1),15\n.*      LA      &BASEREG(1),0(&BASEREG(1))\n        USING   &SYSECT,&CH\n.* CONSTRUCTION CHARGEMENT DES REGISTRES DE BASE\n&I      SETA    2\n.T2     AIF     (&I GT N'&BASEREG).SUIT2\n        CNOP    0,4\n        B       *+8\n        DC      F'4096'    REPRESENTS 4 K (SIZE COVERED BY 1 BASE REG)\n        L       0,*-4          LOAD 4096\n.T3     AIF     (&I GT N'&BASEREG).SUIT2\n        AR      15,0\n        LR      &BASEREG(&I),15    1ST BASE REG CONTAINS ENTRY ADDRESS\n.**     LA      &BASEREG(&I),0(&BASEREG(&I))\n&I      SETA    &I+1\n        AGO     .T3\n.SUIT2  ANOP\n        AIF     ('&RENT' EQ 'NO').NORENT\n        MEXIT\n.*\n.* CHAINAGE DES SAVE AREAS EN NON RE-ENTRANT\n.NORENT ANOP\n        B       PRLG&SYSNDX\n        DC      C'SAVEAREA'\n        CNOP    0,4\nSAVE&SYSNDX     DS   18F    MY SAVE AREA (NO RE-ENTERABLE PGM)\n        DC      C'END'\nPRLG&SYSNDX     DS   0H\n        ST      13,SAVE&SYSNDX+4   ADDRESS OF CALLER SAVE AREA IN MINE\n        LA      15,SAVE&SYSNDX     ADDRESS OF MY SAVE AREA\n        ST      15,8(0,13)            IS SAVED IN CALLER SAVE AREA\n        LR      13,15              ADDRESSING NOW MY SAVE AREA\n        MEXIT\n.ERR1   ANOP\n        MNOTE 8,'RENT PARAMETER MUST BE YES OR NO'\n        MEXIT\n        MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PTKT": {"ttr": 8464, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x991_\\x00\\x991_\\x11P\\n\\xf1\\n\\xf1\\x00\\x00\\xe3\\xc8\\xc9\\xc5\\xd9\\xd9\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-11-11T00:00:00", "modifydate": "1999-11-11T11:50:00", "lines": 2801, "newlines": 2801, "modlines": 0, "user": "THIERRY"}, "mimetype": "application/zip", "datatype": "binary", "extension": ".zip"}, "RACFCHCK": {"ttr": 9734, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x004\\x7f\\x01\\x004\\x7f\\x16Q\\x00w\\x00w\\x00\\x00\\xe4\\xd7\\xc4\\xf2\\xf0\\xf0\\xf0@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-12-12T00:00:00", "modifydate": "2000-12-12T16:51:00", "lines": 119, "newlines": 119, "modlines": 0, "user": "UPD2000"}, "text": "*\n* THIS PROGRAM \"RACHECK-ES\" A DATASET OR A GENERAL RESOURCE\n*\n* RETURN CODE : 0 = AUTHORIZED\n*               4 = RACF DOES NOT KNOW THIS RESOURCE\n*               8 = NOT AUTHORIZED\n*\n* EXAMPLE 1 :\n*\n*          CALL  RACFCHCK,(PARAM),VL\n* PARAM    DS    0F\n* LENGTH   DC    AL1(8)                    1 B = LENGTH OF CLASS\n* CLASS    DC    CL8'FACILITY'             8 C = NAME OF RACF CLASS\n* RESOURCE DC    CL256'ZZZZ.ABCD'          VAR LENGTH : RESOURCE NAME\n*\n* EXAMPLE 2 :\n*\n*          CALL  RACFCHCK,(PARAM),VL\n* PARAM    DS    0F\n* LENGTH   DC    AL1(7)                    1 B = LENGTH OF CLASS\n* CLASS    DC    CL8'DATASET'              8 C = NAME OF RACF CLASS\n* RESOURCE DC    CL256'SYS1.RACFDS'        VAR LENGTH : RESOURCE NAME\n*\n**********************************************************************\n* START OF PROGRAM                                                   *\n**********************************************************************\nRACFCHCK CSECT\nRACFCHCK AMODE 31\nRACFCHCK RMODE ANY\n         BAKR  R14,0                  ESTABLISH A BASE REGISTER\n         LR    R12,R15                REG BASE\n         USING RACFCHCK,R12\n         B     START\n         DC    C'RACFCHCK-&SYSDATC-&SYSTIME-(C)TH-FALISSARD, 2000'\nSTART    DS    0H\n* OBTAIN WORK STORAGE\n         L     R4,0(R1)               SAVE PARM POINTER\n         USING ZONEPARM,R4\n         STORAGE OBTAIN,LENGTH=WORKAREALEN GET SOME STORAGE\n         LR    R10,R1                  SET WORK REG\n         USING WORKAREA,R10\n*\n* RACHECK ON DATATSET CLASS : AVOID DISCRETE PROFILE CASE\n*\n         CLI   ZPLCLASS,X'07'            LENGTH OF RACF CLASS >= 7 ?\n         BL    NOTDS                     NO, NOT A DATASET\n         CLC   ZPCLASSE(7),=CL7'DATASET'  DATASET CLASS ?\n         BNE   NOTDS                     NO, NOT A DATASET\n         MVC   RAC_E_UP(RAC_L_UPL),RAC_L_UP    COPY RACROUTE SKELETON\n         RACROUTE REQUEST=AUTH,ATTR=READ,                              X\n               ENTITY=ZPPROFIL,                RACF PROFILE            X\n               CLASS=ZPLCLASS,                 RACF CLASS              X\n               RELEASE=1.9.2,                                          X\n               WORKA=WORKA,MF=(E,RAC_E_UP),DSTYPE=M   (MODEL PROFILE)\n         LR    R6,R15                      SAVE RETURN CODE\n         B     FREE\n*\n* RACHECK ON GENERAL RESOURCE\n*\nNOTDS    DS    0H\n         MVC   RAC_E_UP(RAC_L_UPL),RAC_L_UP    COPY RACROUTE SKELETON\n         RACROUTE REQUEST=AUTH,ATTR=READ,                              X\n               ENTITY=ZPPROFIL,                RACF PROFILE            X\n               CLASS=ZPLCLASS,                 RACF CLASS              X\n               RELEASE=1.9.2,                                          X\n               WORKA=WORKA,MF=(E,RAC_E_UP)\n         LR    R6,R15                      SAVE RETURN CODE\n         B     FREE\n*\n* FREE OUR WORK ZONE\n*\nFREE     DS    0H\n         LR    R1,R10                  POINT TO WORKAREA\n         STORAGE RELEASE,ADDR=(R1),LENGTH=WORKAREALEN\n         LR    R15,R6                  SET RETURN CODE\n         PR    ,                       RESTORE REGS AND RETURN\n*        .\nRAC_L_UP RACROUTE REQUEST=AUTH,MF=L,ATTR=READ,RELEASE=1.9.2\nRAC_L_UPL EQU *-RAC_L_UP\n*\n         LTORG\n*\n* DSECTS\n*\nZONEPARM DSECT\nZPLCLASS DS    CL1           LENGTH OF CLASS OF RESOURCES\n*                            (FOR EXAMPLE X'08' FOR 'FACILITY')\nZPCLASSE DS    CL8           CLASS OF RESOURCES\nZPPROFIL DS    CL40          RACF PROFILE, PADDED WITH BLANKS\n*\n* WORK AREA\n*\nWORKAREA DSECT\nRAC_E_UP RACROUTE REQUEST=AUTH,MF=L,ATTR=UPDATE,RELEASE=1.9.2\nEXITCODE DS  F                         EXIT CODE\n*    DATA AREAS\nWORKA    DS    0F\n         DS    CL512        LENGTH OF WORK AREA.\n         DS    CL100        SUPPLEMENT\nWEND     EQU   *             END OF WORK AREA.\nWORKAREALEN EQU   *-WORKAREA\n*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RACFMOVE": {"ttr": 9737, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x004\\x7f\\x01\\x004\\x7f\\x16Q\\x00E\\x00E\\x00\\x00\\xe4\\xd7\\xc4\\xf2\\xf0\\xf0\\xf0@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2000-12-12T00:00:00", "modifydate": "2000-12-12T16:51:00", "lines": 69, "newlines": 69, "modlines": 0, "user": "UPD2000"}, "text": "//*\n//* MOVE A PRIMARY RACF DATABASE FROM DASD SYS001 TO DASD SYS004\n//* THE DEFAULT RVARY PASSWORD IS \"YES\".\n//*\n//* RACF PRIMARY DB : SYS1.RACF\n//* RACF BACKUP  DB : SYS1.RACF.BACKUP\n//*\n//DELETE EXEC PGM=IEFBR14\n//BACK  DD DISP=(MOD,DELETE),DSN=SYS1.RACF,VOL=SER=SYS004,\n//  UNIT=SYSALLDA,\n//  SPACE=(CYL,35,,CONTIG),\n//  DCB=(RECFM=F,LRECL=4096,BLKSIZE=4096,DSORG=PSU)\n//*\n//ALLOC EXEC PGM=IEFBR14\n//BACK  DD DISP=(NEW,KEEP),DSN=SYS1.RACF,VOL=SER=SYS004,\n//  UNIT=SYSALLDA,\n//  SPACE=(CYL,35,,CONTIG),\n//  DCB=(RECFM=F,LRECL=4096,BLKSIZE=4096,DSORG=PSU)\n//*\n//*\n//* SWITCH\n//* BACKUP BECOMES PRIMARY\n//*\n//SWITCH1   EXEC  PGM=IKJEFT01\n//SYSPRINT  DD   SYSOUT=*\n//SYSOUT    DD   SYSOUT=*\n//SYSTSPRT  DD   SYSOUT=*\n//SYSTSIN   DD   *\n  RVARY SWITCH\n//*\n//* COPY PRIMARY DB ONTO NEW PRIMARY DB\n//*\n//IRRUT400  EXEC PGM=IRRUT400,PARM='NOLOCKINPUT,FREESPACE(20)'\n//SYSPRINT  DD  SYSOUT=*\n//INDD1     DD  DISP=SHR,DSN=SYS1.RACF,VOL=SER=SYS001,     INPUT\n//          UNIT=SYSALLDA\n//OUTDD1    DD  DISP=OLD,DSN=SYS1.RACF,VOL=SER=SYS004,     OUTPUT\n//          UNIT=SYSALLDA\n//*\n//* RACF DB VERIFICATION UTILITY PROGRAM\n//*\n//IRRUT200 EXEC PGM=IRRUT200\n//SYSRACF   DD  DISP=OLD,DSN=SYS1.RACF,VOL=SER=SYS004,\n//          UNIT=SYSALLDA\n//SYSPRINT DD   SYSOUT=*\n//SYSUT2   DD   SYSOUT=*\n//SYSUT1   DD   UNIT=VIO,SPACE=(CYL,(5,5))\n//SYSIN    DD   *\n  INDEX\n  MAP\n  END\n//*---------------------------------------------------------------------\n//IDCAMS    EXEC PGM=IDCAMS       RECATALOG PRIMARY RACF DB\n//*---------------------------------------------------------------------\n//SYSPRINT  DD SYSOUT=*\n//SYSIN     DD *\n   DEL  SYS1.RACF  NSCR\n   DEF  NVSAM(NAME(SYS1.RACF) DEVT(3390)  VOLUME(SYS004))\n//*\n//* SWITCH TO GO BACK TO PRIMARY\n//*\n//SWITCH2   EXEC  PGM=IKJEFT01\n//SYSPRINT  DD   SYSOUT=*\n//SYSOUT    DD   SYSOUT=*\n//SYSTSPRT  DD   SYSOUT=*\n//SYSTSIN   DD   *\n  RVARY ACTIVE DATASET(SYS1.RACF)\n  RVARY SWITCH\n  RVARY ACTIVE DATASET(SYS1.RACF.BACKUP)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SHOWLPAR": {"ttr": 9739, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x991_\\x00\\x991_\\x11P\\x01\\xe1\\x01\\xe1\\x00\\x00\\xe3\\xc8\\xc9\\xc5\\xd9\\xd9\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-11-11T00:00:00", "modifydate": "1999-11-11T11:50:00", "lines": 481, "newlines": 481, "modlines": 0, "user": "THIERRY"}, "text": "*\n*         DISPLAYING THE PR/SM CONFIGURATION UNDER TSO\n*             XEPHON - MVS UPDATE - NOVEMBER 1992\n*\n* A BIT OF HISTORY ABOUT THIS PROGRAM : I WAS ABLE TO WRITE IT BECAUSE\n* I GOT INFORMATION \"UNDER THE COVER\"... IN 1992, WE USED CMF FROM\n* BOOLE AND BABBAGE, AND OUR COMPUTER WAS A HITACHI DATA SYSTEMS\n* MACHINE. WHEN WE ACTIVATED MLPF (HDS'S VERSION OF PR/SM), CMF\n* DISPLAYED ERRONEOUS DATA. THE B&B LAB ASKED US MORE INFORMATION,\n* AND THIS IS HOW I COULD LEARN HOW THE PRSM INFORMATION WAS GATHERED...\n* (HDS'S MICROCODE WAS PUTTING BAD DATA IN THE BUFFER AFTER DIAG 0204).\n*\n* I WAS VERY PROUD OF THIS PROGRAM, BECAUSE NOBODY ELSE AT THE TIME\n* (EXCEPT THE LABS) COULD SHOW THIS INFORMATION. AFTERWARDS, OTHER\n* CLEVER GUYS (LIKE GILBERT SAINT-FLOUR) SUCCESSFULLY REUSED THE IDEA...\n*\n*\n*THIS PROGRAM DISPLAYS THE PR/SM MAIN PARAMETERS, THE\n*MAJORITY OF WHICH ARE ENTERED (BEFORE IML) BY THE OPERATOR ON\n*SYSTEMS FRAMES TO DEFINE THE LPAR CONFIGURATION. THE\n*PARAMETERS CONSIST OF: THE NAMES OF THE PARTITIONS, THEIR CURRENT\n*STATUS (IE ACTIVE OR INACTIVE), WHICH LOGICAL PROCESSORS ARE\n*ATTACHED TO THEM, MODE OF OPERATION (IE DEDICATED OR SHARED),\n*WHETHER THE WAIT ASSIST BIT IS TURNED ON OR OFF (SIGNIFYING THE\n*PARTITION KEEPS RUNNING ALL ALONG ITS TIME SLICE, OR NOT, IN CASE\n*NO WORK IS TO BE DONE), THE WEIGHT OF A PROCESSOR (WHICH\n*DETERMINES ITS PRIORITY FOR PR/SM), AND THE PROPORTION OF TIME A\n*LOGICAL PROCESSOR WAS REALLY DISPATCHED ON A PHYSICAL PROCESSOR\n*(THE DISPATCH PERCENTAGE). BY THE WAY, I WAS UNABLE TO ACCOUNT\n*FOR MY DISPATCH PERCENTAGES EXCEEDING 100% (PLEASE, COULD\n*SOME PR/SM GURU GIVE SOME HELP?).\n*THE PROGRAM USES DIAGNOSE CODE 204, WHICH ALLOWS PR/SM TO\n*FILL A BUFFER DESCRIBING THE PARTITIONS (RMF AND CMF DO IT IN\n*THE SAME WAY). BECAUSE OF IBM'S OCO POLICY, I HAD TO\n*INTERPRET ALL THE DATA RETURNED. THE PROGRAMMING LOGIC CAN BE\n*EXPLOITED IN YOUR OWN PROGRAMS TO OBTAIN THE NAME OF THE\n*PARTITION IN WHICH YOUR JOB IS EXECUTING, TO VERIFY WHETHER A\n*GIVEN PARTITION IS ACTIVE OR NOT, TO MONITOR DISPATCH TIMES IN\n*ORDER TO ASCERTAIN SOME FUNCTIONS (LIKE CAPPING) ARE EFFECTIVE,\n*AND SO ON. IN ALL CASES, APF AUTHORIZATION IS MANDATORY.\n*THIS PROGRAM HAS BEEN SUCCESSFULLY TESTED UNDER IBM'S PR/SM\n*AND HITACHI'S MLPF (VERSION 5), UNDER MVS/SP 3.1.3 AND\n*4.2.0 (SOME FEEDBACK FROM AMDAHL'S MDF USERS WOULD BE\n*WELCOME).\n*\n* THAT PROGRAM DISPLAYS THE CURRENT PR/SM CONFIGURATION\n*\n* IT USES AN AUTHORIZATION SVC (SVC 235), BUT YOU CAN GET RID OF\n* SVC AUTHORIZATION CALL BY CREATING AN ENTRY FOR SHOWLPAR IN\n* IKJTSOXX TABLE (PARAMETER AUTHCMD OR AUTHPGM)\n*\n* THIS AN EXAMPLE OF THE DISPLAY YOU WILL GET :\n*\n*\n*---------------------------------------------------------------------\n*| 03 PARTITIONS, 04 PHYSICAL PROCESSORS, CURRENT PARTITION IS MVSTEST\n*| DISPATCH TIMES WERE EVALUATED ON A 1001 MILLISECONDS INTERVAL     |\n*|                                                                   |\n*|  MVSLOCA  : PARTITION NUMBER 01, 01 LOGICAL PROCESSORS            |\n*|      CP    -WEIGHT-    W/A    DISPATCH                            |\n*|      01      500       NO       17.0 %                            |\n*|                                                                   |\n*|  MVSPROD  : PARTITION NUMBER 02, 03 LOGICAL PROCESSORS            |\n*|      CP    -WEIGHT-    W/A    DISPATCH                            |\n*|      01      DED       YES      99.1 %                            |\n*|      02      DED       YES     101.7 %                            |\n*|      03      DED       YES      99.5 %                            |\n*|                                                                   |\n*|  MVSTEST  : PARTITION NUMBER 03, 01 LOGICAL PROCESSORS            |\n*|      CP    -WEIGHT-    W/A    DISPATCH                            |\n*|      01      500       NO        1.8 %                            |\n*---------------------------------------------------------------------\n*\n         MACRO\n&NLA     SUBDW  &D1,&D2\n&NLA     DS     0H\n.*\n.* THIS MACRO SUBTRACTS 2 UNSIGNED DOUBLE-WORDS D1, D2\n.* (D1 MUST BE >= D2)\n.* RETURNS D1=D1-D2\n.*\n         MNOTE  '** THIS MACRO USES REGS 0 - 1 **'\n         L      0,&D1        1ST DOUBLE-WORD\n         L      1,&D2        2ND DOUBLE-WORD\n         SLR    0,1          SUBTRACT\n         ST     0,&D1        STORE THE RESULT\n         L      0,&D1+4      1ST DOUBLE-WORD\n         L      1,&D2+4      2ND DOUBLE-WORD\n         SLR    0,1          SUBTRACT\n         CLC    &D1+4(4),&D2+4     COMPARE\n         BNL    DIFP&SYSNDX                                8-11-93\n         L      1,&D1        THE 1ST RESULT WAS TOO BIG\n         S      1,=F'1'      DECREMENT\n         ST     1,&D1        STORE AGAIN 1ST RESULT\nDIFP&SYSNDX     DS  0H\n         ST     0,&D1+4\n         MEND\n*\nR0       EQU 0\nR1       EQU 1\nR2       EQU 2\nR3       EQU 3\nR4       EQU 4\nR5       EQU 5\nR6       EQU 6\nR7       EQU 7\nR8       EQU 8\nR9       EQU 9\nR10      EQU 10\nR11      EQU 11\nR12      EQU 12\nR13      EQU 13\nR14      EQU 14\nR15      EQU 15\nSHOWLPAR CSECT\n         SAVE   (14,12),,SHOWLPAR-&SYSDATE-&SYSTIME\n         LR     R12,R15\n         USING  SHOWLPAR,R12\n         LR     R9,R13\n         LA     R13,SAVE\n         ST     R13,8(R9)\n         ST     R9,4(R13)\n*\n* OBTAIN 1 PAGE AND FIX IT (FOR THE PRSM BUFFER)\n*\n         LA     R0,1                   AUTHORIZATION SVC : AUTH ON\n         SVC    235                    AUTHORIZATION SVC : AUTH ON\n         MODESET  MODE=SUP,KEY=ZERO\n         GETMAIN  RU,LV=4096,BNDRY=PAGE     GETMAIN 1 PAGE\n         LR     R8,R1                  KEEP ADDRESS OF PAGE\n         L      R7,=F'4096'\n         AR     R7,R8                  END ADDRESS\n         PGFIX  R,A=(R8),ECB=0,EA=(R7) FIX THE PAGE FOR DIAGNOSE\n         ST     R15,RETCODE\n         MODESET  MODE=PROB,KEY=NZERO\n         XR     R0,R0                  AUTHORIZATION SVC : AUTH OFF\n         SVC    235                    AUTHORIZATION SVC : AUTH OFF\n         L      R1,RETCODE             TEST RC FROM FIX\n         LTR    R1,R1\n         BZ     FIX0\n         TPUT   =C'** BAD RETURN CODE AFTER PGFIX **',33\n         B      END0\n*\n* ISSUE DIAGNOSE INSTRUCTION TO GET PRSM DATA (FIRST PASS)\n*\nFIX0     DS     0H\n         LA     R0,1                   AUTHORIZATION SVC : AUTH ON\n         SVC    235                    AUTHORIZATION SVC : AUTH ON\n         MODESET  MODE=SUP,KEY=ZERO\n         LRA    R1,0(R8,0)             LOAD REAL ADDRESS OF BUFFER\n         LA     R0,4                   GET INFORMATION FROM PRSM\n         DC     X'83',X'10',X'0204'    DIAGNOSE CODE 0204\n         LTR    R0,R0                  EXECUTION CORRECT ?\n         BNZ    ITSBAD                 NO\n         MODESET  MODE=PROB,KEY=NZERO\n*        ABEND  1,DUMP\n         XR     R0,R0                  AUTHORIZATION SVC : AUTH OFF\n         SVC    235                    AUTHORIZATION SVC : AUTH OFF\n*\n* STORE CPU DISPATCH TIMES IN THE TABLE\n*\n         LR     R5,R8\n         USING  PRSMBUF,R5\n* PROCESS 1 PARTITION\n         XR     R9,R9\n         IC     R9,PRNBPART            HOW MANY PARTITIONS ?\n         LTR    R9,R9\n         BZ     END0                   NO PARTITION\n         MVC    DW1,PRTOD\n         LR     R4,R5\n         LA     R4,(PRPRFLEN)(0,R4)    ACCESS TO 1ST PARTITION\n         DROP   R5\n         USING  PRSMPART,R4\n         LA     R9,1(0,R9)  # OF PART+1 FOR \"PHYSICAL\" PARTITION 4-1-95\nLOPPART0 DS     0H\n         IC     R1,PRNOPART            PARTITION NUMBER\n         STC    R1,PARTNO              STORE\n* PROCESS 1 LOGICAL PROCESSOR IN 1 PARTITION\n         XR     R3,R3\n         IC     R3,PRNBPRLO            HOW MANY PROCESSORS ?\n*4-1-95 :\n         LA     R4,(PRPALENG)(0,R4)    ACCESS 1ST PROC. IN PARTITION\n         LTR    R3,R3                  NONE ?\n         BZ     NXTPART                YES, PARTITION DESACTIVATED\n*4-1-95  LA     R4,(PRPALENG)(0,R4)    ACCESS 1ST PROC. IN PARTITION\n         DROP   R4\n         USING  PRSMPARP,R4\nLOPPROC0 DS     0H\n* STORE DISPATCH TIMES IN THE TABLE\n         LA     R2,TABLE\n         XR     R1,R1\n         IC     R1,PRNBPRLN            PROCESSOR NUMBER\n         SLL    R1,3                   X8 (SIZE OF AN ENTRY)\n         AR     R2,R1                  + ADDRESS OF TOP OF TABLE\n         XR     R1,R1                  CLEAR R1\n         IC     R1,PARTNO              PARTITION NUMBER\n         SLL    R1,7                   X8 X16 (16 PROC. MAXIMUM)\n         AR     R2,R1                  + ADDRESS\n         MVC    0(8,R2),PRDISP         DISPATCH TIME COPIED IN TABLE\n*\n         LA     R4,(PRPRLENG)(0,R4)    ACCESS TO NEXT PROCESSOR ENTRY\n         BCT    R3,LOPPROC0            PROCESS NEXT PROCESSOR\nNXTPART  BCT    R9,LOPPART0            PROCESS NEXT PARTITION\n*\n* WAIT 1 SECOND BEFORE GETTING NEW STATISTICS\n*\n         STIMER WAIT,,DINTVL=INT\n*\n* RE-ISSUE DIAGNOSE INSTRUCTION (SECOND PASS)\n*\n         LA     R0,1                   AUTHORIZATION SVC : AUTH ON\n         SVC    235                    AUTHORIZATION SVC : AUTH ON\n         MODESET  MODE=SUP,KEY=ZERO\n         LRA    R1,0(R8,0)             LOAD REAL ADDRESS\n         LA     R0,4\n         DC     X'83',X'10',X'0204'    DIAGNOSE CODE 0204\n         LTR    R0,R0\n         BNZ    ITSBAD\n         MODESET  MODE=PROB,KEY=NZERO\n         XR     R0,R0                  AUTHORIZATION SVC : AUTH OFF\n         SVC    235                    AUTHORIZATION SVC : AUTH OFF\n*\n* SECOND PASS, PROCESS DATA IN THE BUFFER\n*\n         LR     R5,R8\n         USING  PRSMBUF,R5\n         MVC    DW2,PRTOD\n* COMPUTE THE EXACT LENGTH OF THE TIME INTERVAL\n         SUBDW  DW2,DW1            SUBTRACT THE 2 DOUBLE-WORDS\n         LM     R0,R1,DW2\n         SRDL   R0,12              GET TIME IN MICROSECONDS\n         D      R0,=F'1000'        THEN IN MILLISECONDS\n         ST     R1,INTREAL         STORE TIME INTERVAL LENGTH\n         CVD    R1,DW1             CONVERSION TO PACKED DECIMAL\n         UNPK   OUT,DW1            AND TO DECIMAL ZONED\n         OI     OUT+L'OUT-1,X'F0'  NORMALIZE THE SIGN\n* HOW MANY PARTITIONS ?\n         XR     R0,R0\n         IC     R0,PRNBPART        LOAD NUMBER OF PARTITIONS\n         CVD    R0,DW1             CONVERSION TO PACKED DECIMAL\n         UNPK   NBPART,DW1         AND TO DECIMAL ZONED\n         OI     NBPART+L'NBPART-1,X'F0'   NORMALIZE THE SIGN\n* HOW MANY PHYSICAL PROCESSORS ?\n         XR     R0,R0\n         IC     R0,PRNBPROC        LOAD NUMBER OF PARTITIONS\n         CVD    R0,DW1             CONVERSION TO PACKED DECIMAL\n         UNPK   NBPROC,DW1         AND TO DECIMAL ZONED\n         OI     NBPROC+L'NBPROC-1,X'F0'   NORMALIZE THE SIGN\n*\n         LR     R4,R5\n         AH     R4,PROFFCUR        OFFSET TO CURRENT PARTITION\n         MVC    PARTCUR,(PRNAME-PRSMPART)(R4)         NAME OF PARTITION\n         TPUT   MSG1,LMSG1         HOW MANY PARTITIONS AND PROCESSORS\n         TPUT   MSG2,LMSG2         HOW LONG IS THE TIME INTERVAL ?\n*\n* PROCESS 1 PARTITION\n*\n         XR     R9,R9\n         IC     R9,PRNBPART        NUMBER OF PARTITIONS\n         LTR    R9,R9\n         BZ     END0               NO PARTITION\n         LR     R4,R5\n         LA     R4,(PRPRFLEN)(0,R4)    ACCESS TO 1ST PARTITION\n         DROP   R5\n         USING  PRSMPART,R4\n         LA     R9,1(0,R9)  # OF PART+1 FOR \"PHYSICAL\" PARTITION 4-1-95\nLOPPART  DS     0H\n* WHAT IS THE PARTITION NUMBER ?\n         XR     R0,R0\n         IC     R0,PRNOPART        PARTITION NUMBER\n         CVD    R0,DW1             CONVERSION TO PACKED DECIMAL\n         UNPK   NPART,DW1          AND TO DECIMAL ZONED\n         OI     NPART+L'NPART-1,X'F0'   NORMALIZE THE SIGN\n* HOW MANY LOGICAL PROCESSORS FOR THIS PARTITION ?\n         XR     R0,R0\n         IC     R0,PRNBPRLO        PROCESSORS\n         CVD    R0,DW1             CONVERSION TO PACKED DECIMAL\n         UNPK   NPROC,DW1          AND TO DECIMAL ZONED\n         OI     NPROC+L'NPROC-1,X'F0'   NORMALIZE THE SIGN\n* STATUS OF THE PARTITION (ACTIVE / INACTIVE)\n         MVC    STATUS,=C'               '\n         CLI    PRNBPRLO,X'00'     NO PROCESSOR ?\n         BNE    PROCNONE\n         MVC    STATUS,=C' ** INACTIVE **'\nPROCNONE DS     0H\n         MVC    PARTN,PRNAME       NAME OF PARTITION\n         TPUT   =C' ',1            SKIP 1 LINE\n         TPUT   MSG3,LMSG3\n         IC     R1,PRNOPART        PARTITION NUMBER\n         STC    R1,PARTNO          STORED\n*\n* PROCESS 1 PROCESSOR FOR 1 PARTITION\n*\n         XR     R3,R3\n         IC     R3,PRNBPRLO        HOW MANY PROCESSORS ?\n*4-1-95 :\n         LA     R4,(PRPALENG)(0,R4)  ACCESS 1ST PROCESSOR IN PARTITION\n         LTR    R3,R3              NONE ?\n         BZ     NEXTPART           YES, PARTITION WAS DESACTIVATED\n         TPUT   =C'       CP    -WEIGHT-    W/A    DISPATCH',40\n*4-1-95  LA     R4,(PRPALENG)(0,R4)  ACCESS 1ST PROCESSOR IN PARTITION\n         DROP   R4\n         USING  PRSMPARP,R4\nLOPPROC  DS     0H\n* LOGICAL PROCESSOR NUMBER\n         XR     R1,R1              R1 = 0\n         IC     R1,PRNBPRLN        LOGICAL PROCESSOR NUMBER\n         CVD    R1,DW1             CONVERT TO PACKED\n         UNPK   NOPROC,DW1         AND TO DECIMAL ZONED\n         OI     NOPROC+L'NOPROC-1,X'F0'     NORMALIZE THE SIGN\n* WEIGHT OF THE PROCESSOR\n         LH     R1,PRWEIGHT        WEIGHT OF THIS PROCESSOR\n         CVD    R1,DW1             CONVERT TO PACKED\n         MVC    WEIGHT,=X'4020202020202020'    MASK FOR INSTRUCTION ED\n         ED     WEIGHT,WORD        CONVERT TO DECIMAL ZONED\n* WAIT ASSIST\n         MVC    ASSIST,=CL3'NO'\n         TM     PRPRFLAG,X'80'     WAIT ASSIST=YES?\n         BNO    NOWASST            NO\n         MVC    ASSIST,=CL3'YES'   YES\nNOWASST  DS     0H\n* DISPATCH TIME PERCENTAGE\n         MVC    DISPPC,=CL5'?????' PERCENT DISPATCH TIME UNKNOWN\n* WEIGHT OF THE PROCESSOR\n         CLC    PRWEIGHT,=H'-1'    WEIGHT = X'FFFF' ?\n         BNE    NOTDEDIC                 NO\n         MVC    WEIGHT,=CL8'     DED'    YES : DEDICATED PROCESSOR\nNOTDEDIC DS     0H\n* COMPUTE CPU UTILIZATION FROM TABLE\n         LA     R2,TABLE\n         XR     R1,R1\n         IC     R1,PRNBPRLN        PROCESSOR NUMBER\n         SLL    R1,3               X 8\n         AR     R2,R1              + BEGINNING OF TABLE\n         XR     R1,R1\n         IC     R1,PARTNO          PARTITION NUMBER\n         SLL    R1,7               X 8   X 16\n         AR     R2,R1              + BEGINNING OF TABLE\n         MVC    DW1,0(R2)          LAST DISPATCH TIME\n         MVC    DW2,PRDISP         PRESENT DISPATCH TIME\n*\n         CLC    DW1,DW2            COMPARE OLD AND NEW DISPATCH TIMES\n*8-11-93 BNL    NOCALC             IF OLD > NEW, ABNORMAL\n         BH     NOCALC             IF OLD > NEW, ABNORMAL\n         SUBDW  DW2,DW1            SUBTRACT THEM\n*\n         LM     R0,R1,DW2          LOAD MICROSECONDS\n         D      R0,INTREAL         DIVIDE BY TIME INTERVAL LENGTH\n         CVD    R1,DW1             CONVERT TO PACKED\n         UNPK   DISPP,DW1          AND TO DECIMAL ZONED\n         OI     DISPP+L'DISPP-1,X'F0'     NORMALIZE THE SIGN\n         MVC    DISPPC(3),DISPP               100\n         MVI    DISPPC+3,C'.'                    .\n         MVC    DISPPC+4(1),DISPP+3               0\n         CLI    DISPPC,C'0'        REPLACE LEADING ZEROES ...\n         BNE    NOCALC\n         MVI    DISPPC,C' '                              ... BY BLANKS\n         CLI    DISPPC+1,C'0'      REPLACE LEADING ZEROES ...\n         BNE    NOCALC\n         MVI    DISPPC+1,C' '                            ... BY BLANKS\nNOCALC   DS     0H\n*\n* DISPLAY AN INFORMATION LINE ABOUT THE PROCESSOR USED BY THE PARTITION\n*\n         TPUT   MSG4,LMSG4\n*\n         LA     R4,(PRPRLENG)(0,R4)    NEXT PROCESSOR\n         BCT    R3,LOPPROC\nNEXTPART BCT    R9,LOPPART\n*\n         B      END0\n*\nITSBAD DS       0H\n         MODESET  MODE=PROB,KEY=NZERO\n         XR     R0,R0                  AUTHORIZATION SVC : AUTH OFF\n         SVC    235                    AUTHORIZATION SVC : AUTH OFF\n         TPUT   =C'** ERROR AFTER DIAGNOSE **',26\n*\nEND0     DS     0H\n* FREE THE ALLOCATED PAGE\n         LA     R0,1                   AUTHORIZATION SVC : AUTH ON\n         SVC    235                    AUTHORIZATION SVC : AUTH ON\n         MODESET  MODE=SUP,KEY=ZERO\n         L      R7,=F'4096'\n         AR     R7,R8                       END ADDRESS\n         PGFREE R,A=(R8),ECB=0,EA=(R7)      UNFIX PAGE IN MEMORY\n         FREEMAIN   RC,LV=4096,A=(8)\n         MODESET  MODE=PROB,KEY=NZERO\n         XR     R0,R0                  AUTHORIZATION SVC : AUTH OFF\n         SVC    235                    AUTHORIZATION SVC : AUTH OFF\n*\nEND      DS     0H\n*\n         L      R13,4(R13)\n         RETURN (14,12),T,RC=0\n         LTORG\nINT      DC     CL8'00000100'          WAIT INTERVAL : 1 SECOND\nRETCODE  DS     F                      RETURN CODE FROM PGFIX\n*\nMSG1     DC     CL2' '\nNBPART   DS     CL2\n         DC     C' PARTITIONS, '\nNBPROC   DS     CL2\n         DC     C' PHYSICAL PROCESSORS, CURRENT PARTITION IS '\nPARTCUR  DS     CL8\nLMSG1    EQU    *-MSG1\n*\nMSG2     DC     C'  DISPATCH TIMES WERE EVALUATED ON A '\nOUT      DS     CL4\n         DC     C' MILLISECONDS INTERVAL'\nLMSG2    EQU    *-MSG2\n*\nMSG3     DC     CL3' '\nPARTN    DS     CL8\n         DC     C' : PARTITION NUMBER '\nNPART    DS     CL2\n         DC     C', '\nNPROC    DS     CL2\n         DC     C' LOGICAL PROCESSORS     '\nSTATUS   DC     CL15' '\nLMSG3    EQU    *-MSG3\n*\nMSG4     DC     CL7' '\nNOPROC   DS     CL2\n         DC     C' '\nWEIGHT   DS     CL8\n         DC     CL7' '\nASSIST   DS     CL3\n         DC     CL5' '\nDISPPC   DS     CL5     % DISPATCH TIME FROM 000.0 TO 100.0 (OR MORE)\n         DC     C' %'\nLMSG4    EQU    *-MSG4\n* WORK ZONES\nINTREAL  DS     F       TIME INTERVAL LENGTH\nPARTNO   DS     CL1\nDISPP    DS     CL4     % DISPATCH TIME FROM 0000 TO 1000 (OR MORE...)\nDW1      DS     D       DOUBLE-WORD FOR WORK\n         ORG    DW1+4\nWORD     DS     F\nDW2      DS     D       DOUBLE-WORD FOR WORK\n* WE STORE PROCESSOR DISPATCH TIMES IN THIS TABLE\nTABLE    DS     0CL2048          16 PARTITIONS X 16 PROCESSORS X 8C\n         DC     2048X'00'        16 PARTITIONS X 16 PROCESSORS X 8C\nSAVE     DS     16F\n*\n* THIS DSECT DESCRIBES THE CONTENTS OF THE PR/SM BUFFER (OCO)\n* RETURNED BY THE DIAGNOSE X'204' INSTRUCTION\n*\nPRSMBUF  DSECT\n*\n* HEADER   (16C)\n*\nPRNBPART DS     CL1     HOW MANY PARTITIONS\n         DS     CL4\nPRNBPROC DS     CL1     HOW MANY PHYSICAL PROCESSORS\nPROFFCUR DS     H       OFFSET TO ENTRY FOR CURRENT PARTITION\nPRTOD    DS     D       TOD\nPRPRFLEN EQU    (*-PRSMBUF)\n*\n* ENTRY FOR PARTITION  (16C)\n*\nPRSMPART DS     0F\nPRNOPART DS     CL1     PARTITION NUMBER\nPRNBPRLO DS     CL1     HOW MANY LOGICAL PROCESSORS FOR THIS PARTITION\n         DS     CL6\nPRNAME   DS     CL8     NAME OF THE PARTITION\nPRPALENG EQU    (*-PRSMPART)\n*\n* ENTRY FOR LOGICAL PROCESSOR IN USE BY THE PARTITION (24C)\n*\nPRSMPARP DS     0F\n         DS     CL1\nPRNBPRLN DS     CL1     LOGICAL PROCESSOR NUMBER\n         DS     CL3\nPRPRFLAG DS     CL1     FLAG (WAIT ASSIST, ETC)\nPRWEIGHT DS     H       WEIGHT OF PARTITION\nPRDISP   DS     D       TIME A LOGICAL PROC. WAS DISPATCHED ON A PHYS.\n         DS     CL8\nPRPRLENG EQU    (*-PRSMPARP)\n*\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SHOWMVS": {"ttr": 9990, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x991_\\x00\\x991_\\x11P\\x0b\\xc4\\x0b\\xc4\\x00\\x00\\xe3\\xc8\\xc9\\xc5\\xd9\\xd9\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-11-11T00:00:00", "modifydate": "1999-11-11T11:50:00", "lines": 3012, "newlines": 3012, "modlines": 0, "user": "THIERRY"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "SMFJOBS": {"ttr": 11269, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x991_\\x00\\x991_\\x11P\\x00\\xbb\\x00\\xbb\\x00\\x00\\xe3\\xc8\\xc9\\xc5\\xd9\\xd9\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-11-11T00:00:00", "modifydate": "1999-11-11T11:50:00", "lines": 187, "newlines": 187, "modlines": 0, "user": "THIERRY"}, "text": "*\n* LIST ALL JOBS (BASED ON SMF TYPE 30 RECORDS)\n*\n* //S1       EXEC PGM=SMFJOBS\n* //STEPLIB  DD DISP=SHR,DSN=ETIC.LOAD\n* //SYSUDUMP DD SYSOUT=*\n* //SYSPRINT DD SYSOUT=*\n* //SYSSMF   DD DISP=SHR,DSN=ETIC.DUMPSMF\n*\n        PRINT ON,GEN\n        IFASMFR    30   RECORD TYPE  30\n        PRINT ON,NOGEN\nR0       EQU 0\nR1       EQU 1\nR2       EQU 2\nR3       EQU 3\nR4       EQU 4\nR5       EQU 5\nR6       EQU 6\nR7       EQU 7\nR8       EQU 8\nR9       EQU 9\nR10      EQU 10\nR11      EQU 11\nR12      EQU 12\nR13      EQU 13\nR14      EQU 14\nR15      EQU 15\nSMFJOBS  CSECT\n         PRINT ON,NOGEN\n         STM   R14,R12,12(R13)        SAVE CALLER'S REGISTERS\n         LR    R12,R15                LOAD BASE REGISTER\n         USING SMFJOBS,R12            ESTABLISH ADDRESSABILITY\n         ST    R13,SAVE+4             BACK CHAIN\n         LA    R15,SAVE               NEW SAVE AREA\n         ST    R15,8(,R13)            FORWARD CHAIN\n         LR    R13,R15                LOAD PROGRAM'S SAVE AREA ADDRESS\n*\nSUITEIN DS    0H\n* OUVERTURE FICHIER SYSPRINT\n        OPEN  (SYSPRINT,(OUTPUT))\n        PUT   SYSPRINT,TITLE\n* OUVERTURE FICHIER VBS  DES RECORDS SMF     *VBS\n* MAIS D'ABORD ACQUISITION ZONE IO DE 40000 OCTETS\n        L     R3,=F'200000'\n        GETMAIN  R,LV=(3)\n        LR    R5,R1        R5 POINTE SUR LA ZONE\n        OPEN  (SYSSMF,(INPUT))               *VBS\n* LECTURE DU FICHIER\nSUITE1  DS    0H\n        GET   SYSSMF,(5)                     *VBS\n* ANALYSE DU RECORD\nANALREC AP    CTR,=PL4'1'\n        USING SMFRCD30+4,R5                  *VBS\n        CLI   SMF30RTY,X'1E'  RECORD DU TYPE VOULU ??\n        BNE   SUITE1\n        CLC   SMF30STP,=X'0005'   NE GARDER QUE LE SUBTYPE 5\n        BNE   SUITE1\n* END-TIME PRIS EGAL AU TIME RECORD WAS MOVED IN SMF BUFFER\n*\n        XTOD  SMF30TME,ZTME    TIME\n* EXPLOITER IDENTIFICATION SECTION\n        LR    R3,R5\n        A     R3,SMF30IOF      AJOUTER OFFSET VERS LA SECTION\n        S     R3,QUATRE\n*       DROP  R3\n        USING SMF30ID,R3\n        MVC   ZJBN,SMF30JBN    MOVE JOBNAME\n        MVC   ZJNM,SMF30JNM    MOVE JOB ID\n        MVC   ZCLS,SMF30CLS    MOVE JOB CLASS\n        MVC   ZUSR,SMF30USR    MOVE PROGRAMMER'S NAME\n        XTOD  SMF30SIT,ZSIT    TIME SELECTED\n        PRINTHX  SMF30STD,WORK8\n        MVC   ZSTD,WORK8+2     DATE SELECTED\n        MVC   ZRUD,SMF30RUD    MOVE RACF USER\n* EXPLOITER I/O ACTIVITY   SECTION\n*\n        LR    R3,R5\n        A     R3,SMF30UOF      AJOUTER OFFSET VERS LA SECTION\n        S     R3,QUATRE\n        DROP  R3\n        USING SMF30URA,R3\n        CONVERT FROMB=SMF30TEP,TOZ=WORK10\n        MVC   ZTEP,WORK10+2    MOVE EXCP COUNT\n* EXPLOITER COMPLETION     SECTION\n        LR    R3,R5\n        A     R3,SMF30TOF      AJOUTER OFFSET VERS LA SECTION\n        S     R3,QUATRE\n        DROP  R3\n        USING SMF30CMP,R3\n        PRINTHX   SMF30SCC,ZSCC\n* EXPLOITER PROCESSOR ACCT SECTION\n        LR    R3,R5\n        A     R3,SMF30COF      AJOUTER OFFSET VERS LA SECTION\n        S     R3,QUATRE\n        DROP  R3\n        USING SMF30CAS,R3\n        CONVERT FROMB=SMF30CPT,TOZ=WORK10\n        MVC   ZCPT,WORK10+2\n        CONVERT FROMB=SMF30CPS,TOZ=WORK10\n        MVC   ZCPS,WORK10+2\n* ECRITURE DU RECORD\nWRITEEN       DS  0H\n        PUT   SYSPRINT,ZONEOUT\n        MVI   ZONEOUT,C' '\n        MVC   ZONEOUT+1(L'ZONEOUT-1),ZONEOUT\n        B     SUITE1\n*\n*\nRETOUR    DS   0H\n        CLOSE (SYSSMF)\n        CLOSE (SYSPRINT)\n        L       R13,4(R13)\n        RETURN  (14,12),T,RC=0\n*\n*\nSAVE      DS   18F\nSYSSMF    DCB DDNAME=SYSSMF,MACRF=GD,RECFM=VBS,DSORG=PS,EODAD=RETOUR\nSYSPRINT  DCB  DDNAME=SYSPRINT,RECFM=FBA,MACRF=PM,LRECL=133,           *\n               BLKSIZE=1330,DSORG=PS\nZONEOUT  DS   0CL133\n*        DC   CL133' '\n         DC   C' '     CODE SAUT\nZJBN     DC   CL8' '   JOBNAME\n         DC   C' '\nZJNM     DC   CL8' '   JES JOB ID\n         DC   C' '\nZCLS     DC   CL1' '   JES JOB CLASS\n         DC   C' '\nZSTD     DC   CL5' '   DATE INITIATOR SELECTED THIS JOB\n         DC   C' '\nZSIT     DC   CL5' '   TIME INITIATOR SELECTED THIS JOB\n         DC   C' '\nZTME     DC   CL5' '   TIME RECORD MOVED IN BUFFER\n         DC   C' '\nZUSR     DC   CL20' '  PROGRAMMER'S NAME\n         DC   C' '\nZRUD     DC   CL8' '   RACF USER ID\n         DC   C' '\nZTEP     DC   CL10' '  EXCP COUNT\n         DC   C' '\nZCPT     DC   CL10' '  STEP CPU TIME TCB\n         DC   C' '\nZCPS     DC   CL10' '  STEP CPU TIME SRB\n         DC   C' '\nZSCC     DC   CL4' '   STEP COMPLETION CODE\n         DC   CL(ZONEOUT+L'ZONEOUT-*)' '\n*\n*\nTITLE    DS   0CL133\n*        DC   CL133' '\n         DC   C' '     CODE SAUT\n         DC   CL8'JOBNAME'\n         DC   C' '\n         DC   CL8'JOBID'\n         DC   C' '\n         DC   CL1'C'   JES JOB CLASS\n         DC   C' '\n         DC   CL5'DATE' DATE INITIATOR SELECTED THIS JOB\n         DC   C' '\n         DC   CL5'STIME'   TIME INITIATOR SELECTED THIS JOB\n         DC   C' '\n         DC   CL5'ETIME'   TIME SMF RECORD MOVED INTO BUFFER\n         DC   C' '\n         DC   CL20' PROGRAMMER''S NAME'\n         DC   C' '\n         DC   CL8'USER' RACF USER ID\n         DC   C' '\n         DC   CL10'EXCP '  EXCP COUNT\n         DC   C' '\n         DC   CL10'CPU TCB'  STEP CPU TIME TCB CENTIEMES DE SECONDES\n         DC   C' '\n         DC   CL10'CPU SRB'  STEP CPU TIME SRB\n         DC   C' '\n         DC   CL4'CC'   STEP COMPLETION CODE\n         DC   CL(TITLE+L'TITLE-*)' '\n*\nWORK6    DS  0CL6\nWORK4    DS  0CL4\nWORK5    DS  0CL5\nWORK8    DS  0CL8\nWORK10   DS  CL10\nDEMIMOT  DC   H'0'\nCTR      DC   PL4'0'\nQUATRE   DC   F'4'\n         LTORG\n        END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SRMSHOW": {"ttr": 11273, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x991_\\x00\\x991_\\x11P\\x01\\x9e\\x01\\x9e\\x00\\x00\\xe3\\xc8\\xc9\\xc5\\xd9\\xd9\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-11-11T00:00:00", "modifydate": "1999-11-11T11:50:00", "lines": 414, "newlines": 414, "modlines": 0, "user": "THIERRY"}, "text": "*\n* SRMSHOW\n*\n* THIS PROGRAM DISPLAYS THE CURRENT AND THRESHOLD VALUES OF MAJOR\n* SRM PARAMETERS.\n* SIMPLY USE IT UNDER TSO BY CALLING IT. APF-AUTHORIZATION NOT REQUIRED\n* MVS-XA220 - ASSEMBLER H\n* XEPHON - MVS UPDATE - FEBRUARY 1990\n*\n* DISPLAYING MAJOR SRM PARAMETERS UNDER TSO\n* THE FOLLOWING PROGRAM EXTRACTS CURRENT AND THRESHOLD VALUES OF\n* SRM PARAMETERS FROM THE FOLLOWING SRM CONTROL BLOCKS:\n* RMCT (SRM CONTROL TABLE), LSCT (LOGICAL SWAP CONTROL\n* TABLE), RCT (SRM RESOURCE CONTROL TABLE), AND ICT (I/O\n* MANAGEMENT CONTROL TABLE).  THIS INFORMATION IS MORE ACCURATE\n* THAN THAT OBTAINED FROM RMF II.  YOU GET THE SO-CALLED 'HAPPY\n* RANGES' (LOW AND HIGH THRESHOLDS), THE CURRENT VALUE OF THE\n* PARAMETER (PAGING RATE, CPU UTILISATION, ETC), AND A COMMENT\n* OF 'GOOD' OR 'BAD' (NO COMMENT SIGNIFIES THAT THE VALUE IS IN\n* THE HAPPY RANGE).\n* FOR EXAMPLE, YOU CAN EXAMINE HOW SRM ADAPTS THE USER THINK\n* TIME (GRACE PERIOD FOR LOGICAL SWAP BEFORE PHYSICAL SWAP)\n* DEPENDING ON THE AFQ AND THE UIC (SRM ADDS 0.5 SECONDS\n* WHEN ALL IS RIGHT, SUBTRACTS 1 SECOND IF NOT).  FIGURE 1 SHOWS AN\n* EXAMPLE OF THE DISPLAY YOU GET AFTER CALLING SRMSHOW.  SUCH\n* A DISPLAY CAN PINPOINT SOME CRITICAL BOTTLENECKS - FOR EXAMPLE,\n* WHY IS THE PAGE DELAY SO BAD (280 MILLISECONDS)?  YOU MAY\n* DISCOVER THAT SOME PAGE DATASETS ARE NOT ISOLATED FROM\n* PRODUCTION FILES.\n* THE AFQ AND CPU UTILISATIONS HELP YOU DETERMINE WHETHER\n* YOUR MACHINE IS STORAGE- OR CPU-CONSTRAINED AT THE INSTANT YOU\n* LOOK AT IT.  THE CURRENT VALUES OF PAGING RATES MAY SUGGEST THAT\n* YOU CHANGE THE PAGE FAULT RATE THRESHOLDS (RCCPTRT) IN\n* IEAOPTXX TO TAKE INTO ACCOUNT THE INFLUENCE OF PAGE-FAULTING\n* FOR IMPACTING THE TARGET MPL.\n*\n*---------------------------------------------------*\n* THIS MACRO CONVERTS A BINARY HALFWORD TO DECIMAL  *\n*---------------------------------------------------*\n         MACRO\n         EXTEND  &BIN,&ETEND\n         LCLA  &LEN\n         AIF   (T'&ETEND NE 'U').FOLLOW\n         B     EXPR&SYSNDX\n&ETEND   DC    CL6'0'               CREATE THE ZONE IF IT DOESN'T EXIST\n.FOLLOW  ANOP\nEXPR&SYSNDX    DS  0H\n         XR    R1,R1                SET REGISTER TO ZERO\n         ICM   R1,3,&BIN            LOAD BINARY ZONE\n         CVD   R1,DBLEWORD          CONVERT TO DECIMAL\n         MVC   &ETEND,MASK1         LOAD MASK FOR ED INSTRUCTION\n         ED    &ETEND.(6),PACKED3   CONVERSION FROM PACKED TO DECIMAL\n         MEND\n*---------------------------------------------------*\n* THIS MACRO CONVERTS A BINARY FULLWORD TO DECIMAL  *\n*---------------------------------------------------*\n         MACRO\n         EXTENDW &BIN,&ETEND\n         LCLA  &LEN\n         AIF   (T'&ETEND NE 'U').FOLLOW\n         B     EXPR&SYSNDX\n&ETEND   DC    CL10'0'              CREATE THE ZONE IF IT DOESN'T EXIST\n.FOLLOW  ANOP\nEXPR&SYSNDX    DS  0H\n         XR    R1,R1                SET REGISTER TO ZERO\n         ICM   R1,15,&BIN           LOAD BINARY ZONE\n         CVD   R1,DBLEWORD          CONVERT TO DECIMAL\n         MVC   &ETEND,MASK2         LOAD MASK FOR ED INSTRUCTION\n         ED    &ETEND.(10),PACKED5  CONVERSION FROM PACKED TO DECIMAL\n         MEND\n*---------------------------------------------------*\n* THIS MACRO SETS A ZONE TO ALL SPACES              *\n*---------------------------------------------------*\n         MACRO\n&NLA     SPACES  &ZONE\n         MVI   &ZONE,C' '                  FIRST BYTE SET TO SPACE\n         MVC   &ZONE+1(L'&ZONE-1),&ZONE    PROPAGATE TO ALL BYTES\n         MEND\n*---------------------------------------------------*\n         CVT   DSECT=YES\nSRMSHOW  CSECT\nR0  EQU 0\nR1  EQU 1\nR2  EQU 2\nR3  EQU 3\nR4  EQU 4\nR5  EQU 5\nR6  EQU 6\nR7  EQU 7\nR8  EQU 8\nR9  EQU 9\nR10 EQU 10  RETURN ADDRESS\nR11 EQU 11\nR12 EQU 12  BASE REGISTER\nR13 EQU 13\nR14 EQU 14\nR15 EQU 15\n         STM R14,R12,12(R13)     SAVE REGISTERS\n         LR  R12,R15\n         USING SRMSHOW,R12       R12 BASE REGISTER\n         ST  R13,SAVE+4\n         LA  R13,SAVE\n* SET ADDRESSING MODE TO 31 BITS\n         L   R1,AMODE31A\n         BSM 0,R1                GET INTO 31-BITS ADDRESSING MODE\nAMODE31A DC  A(AMODE31B+X'80000000')\nAMODE31B DS  0H\n*\n         L   R2,CVTPTR           ADDRESS OF CVT\n         USING CVT,R2\n         L   R2,CVTOPCTP         ADDRESS OF RMCT  (SRM MAJOR TABLE)\n         MVC TRAP,RMCT\n         CLC RMCT,0(R2)\n         BNE NOBLOC\n         DROP R2\n         L   R3,60(R2)           ADDRESS OF LSCT (LOGICAL SWAP CTRL TB)\n         MVC TRAP,LSCT\n         CLC LSCT,0(R3)\n         BNE NOBLOC\n         L   R4,228(R2)          ADDRESS OF RCT (SRM RESOURCE CTRL TB)\n         MVC TRAP,RCT\n         CLC RCT,0(R4)\n         BNE NOBLOC\n         L   R5,8(R2)            ADDRESS OF ICT  (SRM I/O MGT CTRL TB)\n         MVC TRAP,ICT\n         CLC ICT,0(R5)\n         BNE NOBLOC\n* INFORMATIONS FROM LSCT (LOGICAL SWAP)\n         MVC LSUICL(2),4(R3)     UIC LOW FOR LOGICAL SWAP\n         MVC LSUICH(2),6(R3)     UIC HIGH FOR LOGICAL SWAP\n         MVC UIC(2),54(R4)       UIC CURRENT (INFORMATION FROM RCT)\n*\n         MVC LSTH(4),36(R3)      LOGICAL SWAP CURRENT USER THINK TIME\n         MVC LSLTH(4),16(R3)     LOGICAL SWAP LOW USER THINK TIME\n         MVC LSHTH(4),20(R3)     LOGICAL SWAP HIGH USER THINK TIME\n         MVC LSUSERS(4),40(R3)   NUMBER OF USERS IN LOGICAL SWAP\n         MVC AFQL(2),12(R3)      AFQ LOW FOR LOGICAL SWAP\n         MVC AFQH(2),14(R3)      AFQ HIGH FOR LOGICAL SWAP\n* INFORMATIONS FROM RCT\n         MVC UICTL(2),4(R4)      UIC LOW\n         MVC UICTH(2),6(R4)      UIC HIGH\n         LH  R1,8(R4)\n         SRL R1,4                DIVIDE BY 16\n         STH R1,CPUTL            CPU LOW\n         LH  R1,10(R4)\n         SRL R1,4                DIVIDE BY 16\n         STH R1,CPUTH            CPU HIGH\n         LH  R1,56(R4)\n         SRL R1,4                DIVIDE BY 16\n         STH R1,CPU              CPU UTILIZATION CURRENT\n         MVC PAGTL(2),12(R4)     PAGE FAULT RATE LOW\n         MVC PAGTH(2),14(R4)     PAGE FAULT RATE HIGH\n         MVC PAG(2),64(R4)       PAGE FAULT RATE CURRENT\n         MVC DPGTL(2),20(R4)     PAGE DEMAND RATE LOW\n         MVC DPGTH(2),22(R4)     PAGE DEMAND RATE HIGH\n         MVC DPG(2),66(R4)       PAGE DEMAND RATE CURRENT\n         MVC ASMTL(2),16(R4)     ASM QUEUE LOW\n         MVC ASMTH(2),18(R4)     ASM QUEUE HIGH\n         MVC ASM(2),62(R4)       ASM QUEUE CURRENT\n         MVC PDLTL(2),28(R4)     PAGE DELAY TIME LOW\n         MVC PDLTH(2),30(R4)     PAGE DELAY TIME HIGH\n         MVC PDL(2),70(R4)       PAGE DELAY TIME CURRENT\n         MVC AFQ(2),60(R4)       AFQ CURRENT\n         MVC PGTOT(2),68(R4)     TOTAL PAGING RATE\n         MVC FIXED(2),128(R4)    % OF FIXED FRAMES\n         MVC FIXEDL(2),120(R4)   % OF FIXED FRAMES LOW\n         MVC FIXEDH(2),122(R4)   % OF FIXED FRAMES HIGH\n         MVC FIXEDB(2),130(R4)   % OF FIXED FRAMES BELOW 16 MEGS\n         MVC FIXEDBL(2),124(R4)  % OF FIXED FRAMES BELOW 16 MEGS LOW\n         MVC FIXEDBH(2),126(R4)  % OF FIXED FRAMES BELOW 16 MEGS HIGH\n* INFORMATIONS ICT   (IO SRM)\n         MVC TPILOW(2),30(R5)    % OF I/O VIA TPI INSTRUCTION LOW\n         MVC TPIHIGH(2),32(R5)   % OF I/O VIA TPI INSTRUCTION HIGH\n         MVC TPI(2),68(R5)       % OF I/O VIA TPI INSTRUCTION CURRENT\n* PROCESS ALL DATA COLLECTED\n* SET ADDRESSING MODE BACK TO 24 BITS\n         LA  R1,AMODE24\n         BSM 0,R1\nAMODE24  DS  0H\n*   UIC FOR LOGICAL SWAP\n         EXTEND LSUICL,ZL\n         EXTEND LSUICH,ZH\n         EXTEND UIC,Z\n         TPUT   L0,65            FIRST LINE\n         SPACES L1\n         MVC L1P,LIBUICL\n         BAL R10,COMPARE2\n         BAL R10,SEND\n*  USER THINK TIME\n         EXTENDW LSTH,M\n         EXTENDW LSLTH,ML\n         EXTENDW LSHTH,MH\n         MVC L1P,LIBTHINK\n         MVC L1V,M\n         MVC L1L,ML\n         MVC L1H,MH\n         MVC L1GOOD,C\n         TPUT   L1,65   **\n         SPACES L1\n*  AVAILABLE FRAME QUEUE\n         EXTEND AFQL,ZL           LOW THRESHOLD FROM BINARY TO DECIMAL\n         EXTEND AFQH,ZH           HIGH THRESHOLD FROM BINARY TO DECIMAL\n         EXTEND AFQ,Z             CURRENT VALUE FROM BINARY TO DECIMAL\n         MVC L1P,LIBAFQ           INDICATE WHAT KIND OF PARAMETER\n         BAL R10,COMPARE2         COMPARE WITH THRESHOLDS, GOOD OR BAD?\n         BAL R10,SEND             DISPLAY ONTO SCREEN\n*  NUMBER OF USERS LOGICALLY SWAPPED\n         EXTENDW LSUSERS,M        FROM BINARY FULLWORD TO DECIMAL\n         MVC L1V,M\n         MVC L1P,LIBUSERS\n         TPUT   L1,65\n         SPACES L1\n*  UIC\n         EXTEND UICTL,ZL          LOW THRESHOLD FROM BINARY TO DECIMAL\n         EXTEND UICTH,ZH          HIGH THRESHOLD FROM BINARY TO DECIMAL\n         EXTEND UIC,Z             CURRENT VALUE FROM BINARY TO DECIMAL\n         BAL R10,COMPARE2         COMPARE WITH THRESHOLDS, GOOD OR BAD?\n         MVC L1P,LIBUIC           INDICATE WHAT KIND OF PARAMETER\n         BAL R10,SEND             DISPLAY ONTO SCREEN\n*  CPU\n         EXTEND CPUTL,ZL          LOW THRESHOLD FROM BINARY TO DECIMAL\n         EXTEND CPUTH,ZH          HIGH THRESHOLD FROM BINARY TO DECIMAL\n         EXTEND CPU,Z             CURRENT VALUE FROM BINARY TO DECIMAL\n         BAL R10,COMPARE          COMPARE WITH THRESHOLDS, GOOD OR BAD?\n         MVC L1P,LIBCPU           INDICATE WHAT KIND OF PARAMETER\n         BAL R10,SEND             DISPLAY ONTO SCREEN\n*  PAGINATION (PAGE FAULTS)\n         EXTEND PAGTL,ZL          LOW THRESHOLD FROM BINARY TO DECIMAL\n         EXTEND PAGTH,ZH          HIGH THRESHOLD FROM BINARY TO DECIMAL\n         EXTEND PAG,Z             CURRENT VALUE FROM BINARY TO DECIMAL\n         BAL R10,COMPARE          COMPARE WITH THRESHOLDS, GOOD OR BAD?\n         MVC L1P,LIBPAG           INDICATE WHAT KIND OF PARAMETER\n         BAL R10,SEND             DISPLAY ONTO SCREEN\n*  PAGINATION (DEMAND PAGING)\n         EXTEND DPGTL,ZL          LOW THRESHOLD FROM BINARY TO DECIMAL\n         EXTEND DPGTH,ZH          HIGH THRESHOLD FROM BINARY TO DECIMAL\n         EXTEND DPG,Z             CURRENT VALUE FROM BINARY TO DECIMAL\n         BAL R10,COMPARE          COMPARE WITH THRESHOLDS, GOOD OR BAD?\n         MVC L1P,LIBDPG           INDICATE WHAT KIND OF PARAMETER\n         BAL R10,SEND             DISPLAY ONTO SCREEN\n*  ASM QUEUE\n         EXTEND ASMTL,ZL          LOW THRESHOLD FROM BINARY TO DECIMAL\n         EXTEND ASMTH,ZH          HIGH THRESHOLD FROM BINARY TO DECIMAL\n         EXTEND ASM,Z             CURRENT VALUE FROM BINARY TO DECIMAL\n         BAL R10,COMPARE          COMPARE WITH THRESHOLDS, GOOD OR BAD?\n         MVC L1P,LIBASM           INDICATE WHAT KIND OF PARAMETER\n         BAL R10,SEND             DISPLAY ONTO SCREEN\n*  PAGE DELAY\n         EXTEND PDLTL,ZL          LOW THRESHOLD FROM BINARY TO DECIMAL\n         EXTEND PDLTH,ZH          HIGH THRESHOLD FROM BINARY TO DECIMAL\n         EXTEND PDL,Z             CURRENT VALUE FROM BINARY TO DECIMAL\n         BAL R10,COMPARE          COMPARE WITH THRESHOLDS, GOOD OR BAD?\n         MVC L1P,LIBPGD           INDICATE WHAT KIND OF PARAMETER\n         BAL R10,SEND             DISPLAY ONTO SCREEN\n*  TPI\n         EXTEND TPILOW,ZL         LOW THRESHOLD FROM BINARY TO DECIMAL\n         EXTEND TPIHIGH,ZH        HIGH THRESHOLD FROM BINARY TO DECIMAL\n         EXTEND TPI,Z             CURRENT VALUE FROM BINARY TO DECIMAL\n         BAL R10,COMPARE          COMPARE WITH THRESHOLDS, GOOD OR BAD?\n         MVC L1P,LIBTPI           INDICATE WHAT KIND OF PARAMETER\n         BAL R10,SEND             DISPLAY ONTO SCREEN\n*  FIXED FRAMES %\n         EXTEND FIXEDL,ZL         LOW THRESHOLD FROM BINARY TO DECIMAL\n         EXTEND FIXEDH,ZH         HIGH THRESHOLD FROM BINARY TO DECIMAL\n         EXTEND FIXED,Z           CURRENT VALUE FROM BINARY TO DECIMAL\n         BAL R10,COMPARE          COMPARE WITH THRESHOLDS, GOOD OR BAD?\n         MVC L1P,LIBFIX           INDICATE WHAT KIND OF PARAMETER\n         BAL R10,SEND             DISPLAY ONTO SCREEN\n*  FIXED FRAMES % BELOW 16 MEGS\n         EXTEND FIXEDBL,ZL        LOW THRESHOLD FROM BINARY TO DECIMAL\n         EXTEND FIXEDBH,ZH        HIGH THRESHOLD FROM BINARY TO DECIMAL\n         EXTEND FIXEDB,Z          CURRENT VALUE FROM BINARY TO DECIMAL\n         BAL R10,COMPARE          COMPARE WITH THRESHOLDS, GOOD OR BAD?\n         MVC L1P,LIBFIXB          INDICATE WHAT KIND OF PARAMETER\n         BAL R10,SEND             DISPLAY ONTO SCREEN\n*  TOTAL PAGING\n         EXTEND PGTOT,Z\n         MVC L1P,LIBPGTOT\n         BAL R10,SEND\n*\nENDOFPGM L       R13,4(R13)\n         RETURN  (14,12),T,RC=0\n*\n* SUBROUTINES\n*\nCOMPARE  DS 0H   ** COMPARE CURRENT VALUE WITH LOW AND HIGH THRESHOLD\n         SPACES C\n         CLC Z,ZL\n         BNL LABEL1\n         MVC C,GOOD               GOOD, LOWER THAN LOW THRESHOLD\nLABEL1   DS  0H\n         CLC Z,ZH\n         BNH LABEL2\n         MVC C,BAD                BAD, HIGHER THAN HIGH THRESHOLD\nLABEL2   DS  0H\n         BR  R10\n*\nCOMPARE2 DS 0H   ** COMPARE CURRENT VALUE WITH LOW AND HIGH THRESHOLD\n         SPACES C\n         CLC Z,ZL\n         BNL LABEL3\n         MVC C,BAD                BAD, LOWER THAN LOW THRESHOLD\nLABEL3   DS  0H\n         CLC Z,ZH\n         BNH LABEL4\n         MVC C,GOOD               GOOD, HIGHER THAN HIGH THRESHOLD\nLABEL4   DS  0H\n         BR  R10\n         BR  R10\n*\nSEND     DS  0H           ** SEND LINE OF INFORMATION TO SCREEN **\n         MVC L1V+4(6),Z\n         MVC L1L+4(6),ZL\n         MVC L1H+4(6),ZH\n         MVC L1GOOD,C\n         TPUT  L1,65\n         SPACES L1\n         SPACES ZL\n         SPACES ZH\n         SPACES Z\n         SPACES C\n         BR  R10\n*\nC        DS  CL15\nNOBLOC   DS 0H            ** EYE-CATCHER MISMATCH **\n         MVC  ERRMSG+24(4),TRAP\n         TPUT ERRMSG,80\n         B   ENDOFPGM\nERRMSG   DC  CL80'** EYE-CATCHER OF BLOCK XXXX NOT FOUND **'\nGOOD     DC  CL15'         GOOD  '\nBAD      DC  CL15'      ** BAD **'\nTRAP     DC  C'NONE'\nRMCT     DC  C'RMCT'\nICT      DC  C'ICT '\nRCT      DC  C'RCT '\nLSCT     DC  C'LSCT'\n*\nL0       DS  0CL65                  ** HEAD LINE **\n         DC  CL20'   P A R A M E T E R'\n         DC  CL10'     VALUE'\n         DC  CL10'       LOW'\n         DC  CL10'      HIGH'\n         DC  CL15'          '\nL1       DS  0CL65                  ** CURRENT LINE **\nL1P      DC  CL20' '\nL1V      DC  CL10' '\nL1L      DC  CL10' '\nL1H      DC  CL10' '\nL1GOOD   DC  CL15' '\n*\nLIBUICL  DC  CL20'UIC FOR LOGICAL SWAP'\nLIBTHINK DC  CL20'THINK TIME (MS)     '\nLIBUSERS DC  CL20'USERS IN LOGIC. SWAP'\nLIBUIC   DC  CL20'UIC                 '\nLIBCPU   DC  CL20'% CPU UTILIZATION   '\nLIBPAG   DC  CL20'PAGE FAULTS         '\nLIBDPG   DC  CL20'PAGING (DEMAND)     '\nLIBPGTOT DC  CL20'TOTAL PAGING        '\nLIBASM   DC  CL20'ASM QUEUE           '\nLIBPGD   DC  CL20'PAGE DELAY (MS)     '\nLIBTPI   DC  CL20'% I/O VIA TPI       '\nLIBAFQ   DC  CL20'AFQ FOR LOGICAL SWAP'\nLIBFIX   DC  CL20'% FIXED FRAMES      '\nLIBFIXB  DC  CL20'% FIXED FRAMES < 16M'\n*\nUICTL    DS  H     RCT ->   UIC LOW\nUICTH    DS  H     RCT ->   UIC HIGH\nUIC      DS  H     RCT ->   UIC\nCPUTL    DS  H     RCT ->   CPU LOW\nCPUTH    DS  H     RCT ->   CPU HIGH\nCPU      DS  H     RCT ->   CPU\nPAGTL    DS  H     RCT ->   PAGING LOW\nPAGTH    DS  H     RCT ->   PAGING HIGH\nPAG      DS  H     RCT ->   PAGING\nDPGTL    DS  H     RCT ->   DEMAND PAGING LOW\nDPGTH    DS  H     RCT ->   DEMAND PAGING HIGH\nDPG      DS  H     RCT ->   DEMAND PAGING\nASMTL    DS  H     RCT ->   ASM QUEUE LOW\nASMTH    DS  H     RCT ->   ASM QUEUE HIGH\nASM      DS  H     RCT ->   ASM QUEUE\nPDLTL    DS  H     RCT ->   PAGE DELAY LOW\nPDLTH    DS  H     RCT ->   PAGE DELAY HIGH\nPDL      DS  H     RCT ->   PAGE DELAY\nAFQ      DS  H     RCT ->   AVAILABLE FRAME QUEUE\nAFQL     DS  H     RCT ->   AVAILABLE FRAME QUEUE LOW\nAFQH     DS  H     RCT ->   AVAILABLE FRAME QUEUE HIGH\nPGTOT    DS  H     RCT ->   TOTAL PAGING\nFIXED    DS  H     RCT -> % FRAMES FIXED\nFIXEDL   DS  H     RCT -> % FRAMES FIXED LOW\nFIXEDH   DS  H     RCT -> % FRAMES FIXED HIGH\nFIXEDB   DS  H     RCT -> % FRAMES FIXED BELOW 16 M\nFIXEDBL  DS  H     RCT -> % FRAMES FIXED BELOW 16 M LOW\nFIXEDBH  DS  H     RCT -> % FRAMES FIXED BELOW 16 M HIGH\nLSUICL   DS  H     LOGICAL SWAP UIC LOW\nLSUICH   DS  H     LOGICAL SWAP UIC HIGH\nLSTH     DS  F     LOGICAL SWAP THINK TIME\nLSLTH    DS  F     LOGICAL SWAP THINK TIME LOW\nLSHTH    DS  F     LOGICAL SWAP THINK TIME HIGH\nLSUSERS  DS  F     LOGICAL SWAP NBRE DE USERS\nTPILOW   DS  H     %IO TPI LOW\nTPIHIGH  DS  H     %IO TPI HIGH\nTPI      DS  H     %IO TPI\n* SAVE AREA\nSAVE     DS  18F   MY SAVE AREA\nMASK1    DC  X'402020202020'              MASK FOR PACKED LENGTH 3\nMASK2    DC  X'40202020202020202020'      MASK FOR PACKED LENGTH 5\n* WORK ZONES\nDBLEWORD DS  D     DOUBLE WORD FOR INSTRUCTION CVD\n         ORG DBLEWORD+5\nPACKED3  DS  PL3\n         ORG DBLEWORD+3\nPACKED5  DS  PL5\n         LTORG\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SUSEC": {"ttr": 11524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x01\\x004\\x7f\\x01\\x004\\x7f\\x16Q\\x004\\x004\\x00\\x00\\xe4\\xd7\\xc4\\xf2\\xf0\\xf0\\xf0@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2000-12-12T00:00:00", "modifydate": "2000-12-12T16:51:00", "lines": 52, "newlines": 52, "modlines": 0, "user": "UPD2000"}, "text": "  /*           REXX                                                  */\n  /* LISTING ACTIVE PROCESSORS IN THE COMPLEX AND THE MIPS AVAILABLE */\n  CVT      = STORAGE(10,4)\n  SAY 'CVT AT' C2X(CVT)\n  /* ACCESSING RMCT                                                  */\n  RMCT = STORAGE(D2X(C2D(CVT)+604),4)\n  SAY 'RMCT AT' C2X(RMCT)\n  /* COMPUTING THE SU/SEC FACTOR                                     */\n  SU   = STORAGE(D2X(C2D(RMCT)+64),4)\n  SU   = 16000000/C2D(SU)\n  SAY  'SU/SEC FACTOR IS' SU ,\n      '(1 CPU SECOND EQUALS' SU 'SERVICE UNITS)'\n  /* ACCESSING PCCA VECTOR TABLE                                     */\n  CVTPCCAT = STORAGE(D2X(C2D(CVT)+764),4)\n  SAY 'PCCA VECTOR TABLE AT' C2X(CVTPCCAT)\n  I = 0                         /*    PROCESSOR NUMBER               */\n  P = 0                         /*    TOTAL NUMBER OF PROCESSORS     */\n  SAY '----------------------------------------'\n  SAY ' PROC   VERSION  CPUID   MODEL    PCCA  '\n  SAY 'NUMBER    CODE                   ADDRESS'\n  SAY '----------------------------------------'\n  /* PROCESSING EVERY PCCA FOR EVERY PROCESSOR                       */\n  DO WHILE I < 16\n  PCCA     = STORAGE(D2X(C2D(CVTPCCAT)+I*4),4)\n  IF     PCCA  \\= '00000000'X THEN DO       /* PROCESSOR EXISTS      */\n     PCCAPCCA = STORAGE(D2X(C2D(PCCA)),4)\n     PCCAVC   = STORAGE(D2X(C2D(PCCA)+4),2)\n     PCCACPID = STORAGE(D2X(C2D(PCCA)+6),6)\n     PCCAMDL  = STORAGE(D2X(C2D(PCCA)+12),4)\n     IF PCCAPCCA = 'PCCA' THEN DO           /* PCCA SEEMS CORRECT    */\n        SAY ' ' I '     ' PCCAVC '   ' PCCACPID ,\n            ' '||PCCAMDL ' ' C2X(PCCA)\n        P = P + 1\n        END\n     END\n  I = I + 1\n  END\n  SAY\n  IF P > 1 THEN PROCS = 'PROCESSORS'\n           ELSE PROCS = 'PROCESSOR'\n  SAY\n  SAY P PROCS 'IN THIS COMPLEX'\n  /* ESTIMATING MIPS POWER OF THE COMPLEX                            */\n  MIPS = SU/48.5\n  SAY\n  SAY '** TOTAL EVALUATED MIPS         :' MIPS*P\n  IF P > 1 THEN SAY '** EQUIVALENT UNIPROCESSOR MIPS :' MIPS\n  /*                                           */\n  /*  MSU EVALUATION                           */\n  /*                                           */\n  MSU = SU*P*3600/1000000\n  SAY FORMAT(MSU,,0) 'MSU (USED FOR PSLC PRICING)'\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SVC235": {"ttr": 11526, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x991_\\x00\\x991_\\x11P\\x00K\\x00K\\x00\\x00\\xe3\\xc8\\xc9\\xc5\\xd9\\xd9\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-11-11T00:00:00", "modifydate": "1999-11-11T11:50:00", "lines": 75, "newlines": 75, "modlines": 0, "user": "THIERRY"}, "text": "* \"MAGIC SVC\" THAT MODIFIES THE JSCBAUTH BIT ACCORDING TO R0 VALUE\n* SOME PRELIMINARY CONTROLS ARE DONE NOT TO ENABLE EVERYBODY TO USE\n* THIS SVC (THIS WOULD BE A ** VERY SERIOUS ** INTEGRITY EXPOSURE).\n*\nIGC0023E   CSECT\n         SPLEVEL SET=2\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         BALR  R12,0\n         USING *,R12\n         B     DEBUT\n         DC    CL8'IGC0023E'\n         DC    CL8'&SYSDATE'\n         DC    CL8'&SYSTIME'\n*\n* AUTORISATION ACCORDEE DANS LES CAS SUIVANTS :\n* - PAS D'ACEE\n* - USER OPERATIONS\n* - USER SYSTEME (SYXX)\n*\nDEBUT    SR    R4,R4\n         USING PSA,R4\n         L     R3,PSAANEW         POINTER SUR L'ASCB\n         USING ASCB,R3\n         L     R3,ASCBASXB        POINTER SUR L'ASXB\n         DROP  R3\n         USING ASXB,R3\n         L     R3,ASXBSENV        POINTER SUR L'ACEE\n         DROP  R3\n         USING ACEE,R3\n         LTR   R3,R3              ACEE PRESENT ?\n         BZ    GOON               NON, PAS DE RACF, TOUT PERMIS\n         TM    ACEEFLG1,ACEEOPER  USER RACF AVEC ATTRIBUT OPERATIONS ?\n         BO    GOON               OUI, PERMIS\n         CLC   =C'SY',ACEEUSRI    USERID SYSTEME ?\n         BNE   RETURN8            NON, ON NE FAIT RIEN\n*\n* ETABLIR L'AUTORISATION APF (R0=1) OU L'ENLEVER (R0=0)\n*\nGOON     SR    R4,R4\n         L     R4,PSATOLD                  LOAD CURRENT TCB ADDRESS\n         LA    R5,TCBPXLEN                 LENGTH OF TCB PREFIX\n         SR    R4,R5                       POINT TO REAL TCB ADDRESS\n         USING TCBFIX,R4\n         L     R2,TCBJSCB                  CALLER JSCB\n         USING IEZJSCB,R2\n         BCT   R0,AUTHOFF                  R0=1 REQU AUTH ON\nAUTHON   OI    JSCBOPTS,JSCBAUTH            SET JSCBAUTH\n         B     RETURN\nAUTHOFF  NI    JSCBOPTS,255-JSCBAUTH       RESET JSCBAUTH\nRETURN   XR    R15,R15\n         BR    R14\nRETURN8  LA    R15,8\n         BR    R14\n         IKJTCB\n         IHAASCB\n         IHAASXB\n         IHAACEE\n         IEZJSCB\n         IHAPSA\n         END   IGC0023E\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TPUTXMAS": {"ttr": 11529, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x991_\\x00\\x991_\\x11P\\x00\\xa1\\x00\\xa1\\x00\\x00\\xe3\\xc8\\xc9\\xc5\\xd9\\xd9\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-11-11T00:00:00", "modifydate": "1999-11-11T11:50:00", "lines": 161, "newlines": 161, "modlines": 0, "user": "THIERRY"}, "text": "* THIS DISPLAYS A SCREEN WITH A BLINKING CHRISTMAS TREE\n* AND A SPARKLING CHAMPAGNE GLASS... FOR THE FUN.\n*\nTPUTXMAS CSECT\nR0       EQU 0\nR1       EQU 1\nR2       EQU 2\nR3       EQU 3\nR4       EQU 4\nR5       EQU 5\nR6       EQU 6\nR7       EQU 7\nR8       EQU 8\nR9       EQU 9\nR10      EQU 10\nR11      EQU 11\nR12      EQU 12\nR13      EQU 13\nR14      EQU 14\nR15      EQU 15\n         STM   R14,R12,12(R13)        SAVE CALLER'S REGISTERS\n         LR    R12,R15                LOAD BASE REGISTER\n         USING TPUTXMAS,R12,11,10,9   ESTABLISH ADDRESSABILITY\n         ST    R13,SAVE+4             BACK CHAIN\n         LA    R15,SAVE               NEW SAVE AREA\n         ST    R15,8(,R13)            FORWARD CHAIN\n         LR    R13,R15                LOAD PROGRAM'S SAVE AREA ADDRESS\n         LR  R11,R12\n         LA  R11,4095(,R11)\n         LA  R11,1(,R11)\n         LR  R10,R11\n         LA  R10,4095(,R10)\n         LA  R10,1(,R10)\n         LR  R9,R10\n         LA  R9,4095(,R9)\n         LA  R9,1(,R9)\n         LA  R7,5       <---- HOW MANY BLINKS ?\n         XR  R6,R6\n          LA   1,BUFERASE\n          LA   0,LBUFER\n          LA   15,3\n          SLL  15,24\n          OR   1,15\n          TPUT (1),(0),R\nLOOP     DS  0H\n         LA  R6,1(0,R6)\n         CR  R6,R7\n         BH  FIN\n         TPUT BUF,1920,FULLSCR,,,,HIGHP\n         STIMER WAIT,,DINTVL=I\n         TPUT BUF2,1920,FULLSCR,,,,HIGHP\n         STIMER WAIT,,DINTVL=I\n         B LOOP\nFIN      DS  0H\n          L       R13,4(R13)\n          RETURN  (14,12),T,RC=0\nSAVE      DS 18F\nBUFERASE  DC   X'40115D7E1140403CC760003C'\n          DC   X'4F40003CD660003C40400013'\nLBUFER    EQU  *-BUFERASE\nI DC CL8'00000050'\nBUF DS 0F\n   DC CL50'                         '\n    DC  CL30'    _       x            _    '\n   DC CL50'                       <I>'\n    DC  CL30'    I           x     x  I    '\n   DC CL50'                    <<< I >>>'\n    DC  CL30'    I  x           x     I    '\n   DC CL50'                <<<      I   >>>'\n    DC  CL30'    I____________________I    '\n   DC CL50'             <<<        -O-     >>>'\n    DC  CL30'    II      x           II    '\n   DC CL50'          <<          I  II         >>'\n    DC  CL30'     I        x    x    I     '\n   DC CL50'       <<      I      I   I            >>'\n    DC  CL30'      I   x            I      '\n   DC CL50'          <<  -O-     I   I   I     >> '\n    DC  CL30'      I         x      I      '\n   DC CL50'       <<      I      I   I  -O-       >>'\n    DC  CL30'       I   x          I       '\n   DC CL50'     <<    I          I   I   I          >>'\n    DC  CL30'       I      x    x  I       '\n   DC CL50'   <<     -O-         I   I                >>'\n    DC  CL30'        I        x   I        '\n   DC CL50' <<        I    <     I   I    >             >>'\n    DC  CL30'        I      x     I        '\n   DC CL50'   <<<<<<<<<<<<       I   I      >>>>>>>>>>>>'\n    DC  CL30'         I  x       I         '\n   DC CL50'           <          I   I         >             '\n    DC  CL30'         I      x   I         '\n   DC CL50'         <            I   I           >           '\n    DC  CL30'          I     x  I          '\n   DC CL50'       <              I   I             >         '\n    DC  CL30'          I   x    I          '\n   DC CL50'    <          ______ I   I  ____          >      '\n    DC  CL30'           I x    I           '\n   DC CL50'  <            I      I   I     I            >    '\n    DC  CL30'           I    x I           '\n   DC CL50'  <<<<<<<<<<<< I                I >>>>>>>>>>>>    '\n    DC  CL30'            I x  I            '\n   DC CL50'               I  H A P P Y     I                 '\n    DC  CL30'             IIII             '\n   DC CL50'               I                I                 '\n    DC  CL30'              II              '\n   DC CL50'               I                I                 '\n    DC  CL30'             IIII             '\n   DC CL50'               I________________I                 '\n    DC  CL30'        IIIIIIIIIIIII         '\n   DC CL50'   '\n    DC  CL30'                              '\nCLEAR DC 1920X'0'\nBUF2 DS 0F\n   DC CL50'                        O'\n    DC  CL30'    _                x   _    '\n   DC CL50'                       <I>'\n    DC  CL30'    I     x       x    x I    '\n   DC CL50'                    <<< I >>>'\n    DC  CL30'    I    x     x    x    I    '\n   DC CL50'                <<<  .....   >>>'\n    DC  CL30'    I____________________I    '\n   DC CL50'             <<<I   .        I  >>>'\n    DC  CL30'    II  x      x        II    '\n   DC CL50'          <<   -O-  . I   I -O-     >>'\n    DC  CL30'     I      x    x    x I     '\n   DC CL50'       <<    -  I    .I. .I. I  I      >>'\n    DC  CL30'      I      x         I      '\n   DC CL50'          <<         .I   I .  -O-  >> '\n    DC  CL30'      I   x        x   I      '\n   DC CL50'       <<    I     .  I I I  .  I      >>'\n    DC  CL30'       I       x      I       '\n   DC CL50'     <<     -O-  .    I-O-I  .          I>>'\n    DC  CL30'       I   x       x  I       '\n   DC CL50'   <<        I .      I I I .          -O- >>'\n    DC  CL30'        I   x        I        '\n   DC CL50' <<         ..  <     I   I.   >        I    >>'\n    DC  CL30'        I      x     I        '\n   DC CL50'   <<<<<<<<<<<<       I . I  I   >>>>>>>>>>>>'\n    DC  CL30'         I    x   x I         '\n   DC CL50'           <     I    I.  I -O-     >             '\n    DC  CL30'         I  x       I         '\n   DC CL50'         <      -O-  .I   I  I   I    >           '\n    DC  CL30'          I x x  x I          '\n   DC CL50'       <    I    I    I.  I     -O-    I>         '\n    DC  CL30'          I  x   x I          '\n   DC CL50'    <  I   -O- ______ I  .I  ____I    -O-  >      '\n    DC  CL30'           I   x  I           '\n   DC CL50'  <   -O-   I  I      I   I     I      I     >    '\n    DC  CL30'           I  x x I           '\n   DC CL50'  <<<<<<<<<<<< I                I >>>>>>>>>>>>    '\n    DC  CL30'            I  x I            '\n   DC CL50'               I                I                 '\n    DC  CL30'             IIII             '\n   DC CL50'               I                I                 '\n    DC  CL30'              II              '\n   DC CL50'               I N E W  Y E A R I                 '\n    DC  CL30'             IIII             '\n   DC CL50'               I________________I                 '\n    DC  CL30'        IIIIIIIIIIIII         '\n   DC CL50'   '\n    DC  CL30'                              '\n  END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VTOCR": {"ttr": 11533, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00E\\x01\\x15\\x02\\x1f\\x01\\x15\\x02\\x1f\\x15)\\x00\\x06\\x00\\x06\\x00\\x00\\xc3\\xd3\\xc9\\xe2\\xe3@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2015-01-21T00:00:00", "modifydate": "2015-01-21T15:29:45", "lines": 6, "newlines": 6, "modlines": 0, "user": "CLIST"}, "text": "PROC 0\nISPEXEC LIBDEF ISPPLIB DATASET ID('SBGOLOB.PANELS')     /*yours*/\nISPEXEC LIBDEF ISPLLIB DATASET ID('SYS1.W$$.LINKLIB')   /*yours*/\nISPEXEC SELECT PGM(VTOCREAD)\nISPEXEC LIBDEF ISPPLIB\nISPEXEC LIBDEF ISPLLIB\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "VTOCR$$": {"ttr": 11535, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00(\\x01\\x15\\x02\\x1f\\x01\\x15\\x02\\x1f\\x16\\x07\\x000\\x00\\x10\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2015-01-21T00:00:00", "modifydate": "2015-01-21T16:07:28", "lines": 48, "newlines": 16, "modlines": 0, "user": "SBGOLOB"}, "text": "               Some notes on VTOCREAD\n               ---- ----- -- --------\n\nThis is a semi-automated VTOC zapping tool.\n\nThe VTOCREAD program is AMODE=24, RMODE=24, and does not have\nto be APF-authorized.\n\nThis program VTOCREAD appears to work fine on z/OS 2.1.\n\nObject deck for the VTOCREAD program from member VTOCZAP has been\ndisassembled to produce the VTOCREAD \"source\" member that can be\nassembled using the VTOCREA$ JCL member.\n\nYou copy the panel member called VTOCR1 to a library in your\nISPPLIB concatenation.\n\nYou modify the CLIST member VTOCR to fit your own installation\nrequirements, and copy it into your SYSPROC concatenation.\n\nYou run the CLIST:  VTOCR.\n\nEnter the fully qualified dataset name into the panel and press\nENTER.  The VTOCREAD program will fill in all of the particulars\nof your dataset's VTOC entry.  You change whatever quantities\nyou want to, and exit the panel according to the supplied\ninstructions.\n\nAfter dealing with the panel, this program, which does not have\nto be authorized, generates AMASPZAP JCL to change whatever\nquantities you specified in the panel (member VTOCR1).\n\nI changed the generated JCL's JOBCARD to say CLASS=A instead of\nCLASS=T.  Just look in the source for CLASS= (not MSGCLASS=).\nIt is easier to change some generated JCL from the \"source\"\nmember, than it is to change the object deck or to zap the\nload module directly.\n\nWhen you run the generated JCL to actually zap the VTOC, you must\nissue a console reply for the AMASPZAP job to complete.\n\n    Sam Golob - 2015/01/21 - sbgolob@cbttape.org\n\nThere are easier programs to use for this purpose, such as the\nCDSCB TSO command from CBT File 300.  However this method is safer,\nin that there are more steps involved before you actually change\nthe quantities in the FORMAT 1 VTOC entry for the dataset.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "VTOCREA$": {"ttr": 11537, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x11\\x00#\\x01\\x05\\x13_\\x01\\x15\\x02\\x1f\\x15#\\x00!\\x00\\x1d\\x00\\x00\\xc1\\xe2\\xd4\\xd1\\xc3\\xd3@@@@'", "ispf": {"version": "01.17", "flags": 0, "createdate": "2005-05-15T00:00:00", "modifydate": "2015-01-21T15:23:23", "lines": 33, "newlines": 29, "modlines": 0, "user": "ASMJCL"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//* ------------------------------------------- *//\n//*  ASM LINKEDIT FROM SOURCE ASM FOR VTOCREAD  *//\n//* ------------------------------------------- *//\n//ASMH EXEC PGM=ASMA90,\n//     PARM='OBJECT,NODECK,ESD,RLD,BATCH'\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT490.FILE432(VTOCREAD)\n//SYSUT1   DD UNIT=SYSALLDA,SPACE=(CYL,(2,2))\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=SYSALLDA,SPACE=(CYL,(4,4)),DISP=(,PASS),\n//            DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//ISPLOAD  DD  DISP=SHR,DSN=ISP.SISPLOAD\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n INCLUDE ISPLOAD(ISPLINK)\n ENTRY   VTOCREAD\n SETSSI  CB490432\n SETCODE AC(0)\n NAME    VTOCREAD(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VTOCREAD": {"ttr": 11777, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00%\\x01\\x15\\x02\\x1f\\x01\\x15\\x02\\x1f\\x15\\x19\\x06O\\x06I\\x00\\x00\\xe2\\xd6\\xe4\\xd9\\xc3\\xc5@@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "2015-01-21T00:00:00", "modifydate": "2015-01-21T15:19:25", "lines": 1615, "newlines": 1609, "modlines": 0, "user": "SOURCE"}, "text": "VTOCREAD CSECT\nVTOCREAD RMODE 24\nVTOCREAD AMODE 24\n         YREGS\n         B     30(,R15)                47F0 F01E        *.00.*\n         DC    X'18',C'V'              18E5             *.V*\n         DC    C'TOCREAD-'             E3D6C3D9C5C1C460 *TOCREAD-*\n         DC    C'04/04/96'             F0F461F0F461F9F6 *04/04/96*\n         DC    C'-12.38-',X'00'        60F1F24BF3F86000 *-12.38-.*\n         STM   R14,R12,12(R13)         90EC D00C        *..}.*\n         LR    R12,R15                 18CF             *..*\n         B     44(,R12)                47F0 C02C        *.0{.*\n         DC    X'0000'                 0000             *..*\n         LPR   R0,R0                   1000             *..*\n         L     R0,40(,R12)             5800 C028        *..{.*\n         AR    R15,R0                  1AF0             *.0*\n         LR    R11,R15                 18BF             *..*\n         AR    R15,R0                  1AF0             *.0*\n         LR    R10,R15                 18AF             *..*\n         B     144(,R12)               47F0 C090        *.0{.*\n         DC    C'SAVEAREA'             E2C1E5C5C1D9C5C1 *SAVEAREA*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    C'END',X'00'            C5D5C400         *END.*\n         ST    R13,72(,R12)            50D0 C048        *&}{.*\n         LA    R15,68(,R12)            41F0 C044        *.0{.*\n         ST    R15,8(,R13)             50F0 D008        *&0}.*\n         LR    R13,R15                 18DF             *..*\n         B     168(,R12)               47F0 C0A8        *.0{y*\n         DC    X'0000'                 0000             *..*\n         DC    VL4(ISPLINK)            00000000         *....*\n         DC    X'4510C0',C'H'          4510C0C8         *..{H*\n         DC    AL4(A0000C0)            000000C0         *...{*\n         DC    AL4(A0017F1)            000017F1         *...1*\n         DC    AL4(A0012E6)            000012E6         *...W*\n         DC    AL4(A0018F0)            000018F0         *...0*\n         DC    X'80'                   80               *.*\n         DC    AL3(A001A08)            001A08           *...*\nA0000C0  DC    C'VDEFINE '             E5C4C5C6C9D5C540 *VDEFINE *\n         L     R15,164(,R12)           58F0 C0A4        *.0{u*\n         BALR  R14,R15                 05EF             *..*\n         B     214(,R12)               47F0 C0D6        *.0{O*\n         NOPR  R0                      0700             *..*\n         DC    X'0000'                 0000             *..*\n         STH   R15,212(,R12)           40F0 C0D4        * 0{M*\n         NOPR  R0                      0700             *..*\n         BAL   R1,252(,R12)            4510 C0FC        *..{.*\n         DC    AL4(A0000F4)            000000F4         *...4*\n         DC    AL4(A001803)            00001803         *....*\n         DC    AL4(A00131C)            0000131C         *....*\n         DC    AL4(A0018F0)            000018F0         *...0*\n         DC    X'80'                   80               *.*\n         DC    AL3(A0019F8)            0019F8           *..8*\nA0000F4  DC    C'VDEFINE '             E5C4C5C6C9D5C540 *VDEFINE *\n         L     R15,164(,R12)           58F0 C0A4        *.0{u*\n         BALR  R14,R15                 05EF             *..*\n         STH   R15,212(,R12)           40F0 C0D4        * 0{M*\n         NOPR  R0                      0700             *..*\n         BAL   R1,296(,R12)            4510 C128        *..A.*\n         DC    AL4(A000120)            00000120         *....*\n         DC    AL4(A0017F9)            000017F9         *...9*\n         DC    AL4(A001681)            00001681         *...a*\n         DC    AL4(A0018F0)            000018F0         *...0*\n         DC    X'80'                   80               *.*\n         DC    AL3(A001A20)            001A20           *...*\nA000120  DC    C'VDEFINE '             E5C4C5C6C9D5C540 *VDEFINE *\n         L     R15,164(,R12)           58F0 C0A4        *.0{u*\n         BALR  R14,R15                 05EF             *..*\n         STH   R15,212(,R12)           40F0 C0D4        * 0{M*\n         NOPR  R0                      0700             *..*\n         BAL   R1,340(,R12)            4510 C154        *..A.*\n         DC    AL4(A00014C)            0000014C         *...<*\n         DC    AL4(A00180C)            0000180C         *....*\n         DC    AL4(A0012AA)            000012AA         *....*\n         DC    AL4(A0018F0)            000018F0         *...0*\n         DC    X'80'                   80               *.*\n         DC    AL3(A0019F8)            0019F8           *..8*\nA00014C  DC    C'VDEFINE '             E5C4C5C6C9D5C540 *VDEFINE *\n         L     R15,164(,R12)           58F0 C0A4        *.0{u*\n         BALR  R14,R15                 05EF             *..*\n         STH   R15,212(,R12)           40F0 C0D4        * 0{M*\n         NOPR  R0                      0700             *..*\n         BAL   R1,384(,R12)            4510 C180        *..A.*\n         DC    AL4(A000178)            00000178         *....*\n         DC    AL4(A001817)            00001817         *....*\n         DC    AL4(A0012D6)            000012D6         *...O*\n         DC    AL4(A0018F0)            000018F0         *...0*\n         DC    X'80'                   80               *.*\n         DC    AL3(A001A04)            001A04           *...*\nA000178  DC    C'VDEFINE '             E5C4C5C6C9D5C540 *VDEFINE *\n         L     R15,164(,R12)           58F0 C0A4        *.0{u*\n         BALR  R14,R15                 05EF             *..*\n         STH   R15,212(,R12)           40F0 C0D4        * 0{M*\n         NOPR  R0                      0700             *..*\n         BAL   R1,428(,R12)            4510 C1AC        *..A.*\n         DC    AL4(A0001A4)            000001A4         *...u*\n         DC    AL4(A001820)            00001820         *....*\n         DC    AL4(A001554)            00001554         *....*\n         DC    AL4(A0018F0)            000018F0         *...0*\n         DC    X'80'                   80               *.*\n         DC    AL3(A0019FC)            0019FC           *...*\nA0001A4  DC    C'VDEFINE '             E5C4C5C6C9D5C540 *VDEFINE *\n         L     R15,164(,R12)           58F0 C0A4        *.0{u*\n         BALR  R14,R15                 05EF             *..*\n         STH   R15,212(,R12)           40F0 C0D4        * 0{M*\n         NOPR  R0                      0700             *..*\n         BAL   R1,472(,R12)            4510 C1D8        *..AQ*\n         DC    AL4(A0001D0)            000001D0         *...}*\n         DC    AL4(A001828)            00001828         *....*\n         DC    AL4(A001572)            00001572         *....*\n         DC    AL4(A0018F0)            000018F0         *...0*\n         DC    X'80'                   80               *.*\n         DC    AL3(A0019FC)            0019FC           *...*\nA0001D0  DC    C'VDEFINE '             E5C4C5C6C9D5C540 *VDEFINE *\n         L     R15,164(,R12)           58F0 C0A4        *.0{u*\n         BALR  R14,R15                 05EF             *..*\n         STH   R15,212(,R12)           40F0 C0D4        * 0{M*\n         NOPR  R0                      0700             *..*\n         BAL   R1,516(,R12)            4510 C204        *..B.*\n         DC    AL4(A0001FC)            000001FC         *....*\n         DC    AL4(A001830)            00001830         *....*\n         DC    AL4(A001574)            00001574         *....*\n         DC    AL4(A0018F0)            000018F0         *...0*\n         DC    X'80'                   80               *.*\n         DC    AL3(A0019FC)            0019FC           *...*\nA0001FC  DC    C'VDEFINE '             E5C4C5C6C9D5C540 *VDEFINE *\n         L     R15,164(,R12)           58F0 C0A4        *.0{u*\n         BALR  R14,R15                 05EF             *..*\n         STH   R15,212(,R12)           40F0 C0D4        * 0{M*\n         NOPR  R0                      0700             *..*\n         BAL   R1,560(,R12)            4510 C230        *..B.*\n         DC    AL4(A000228)            00000228         *....*\n         DC    AL4(A001838)            00001838         *....*\n         DC    AL4(A0015A0)            000015A0         *....*\n         DC    AL4(A0018F0)            000018F0         *...0*\n         DC    X'80'                   80               *.*\n         DC    AL3(A0019FC)            0019FC           *...*\nA000228  DC    C'VDEFINE '             E5C4C5C6C9D5C540 *VDEFINE *\n         L     R15,164(,R12)           58F0 C0A4        *.0{u*\n         BALR  R14,R15                 05EF             *..*\n         STH   R15,212(,R12)           40F0 C0D4        * 0{M*\n         NOPR  R0                      0700             *..*\n         BAL   R1,604(,R12)            4510 C25C        *..B**\n         DC    AL4(A000254)            00000254         *....*\n         DC    AL4(A001854)            00001854         *....*\n         DC    AL4(A0015B0)            000015B0         *....*\n         DC    AL4(A0018F0)            000018F0         *...0*\n         DC    X'80'                   80               *.*\n         DC    AL3(A0019FC)            0019FC           *...*\nA000254  DC    C'VDEFINE '             E5C4C5C6C9D5C540 *VDEFINE *\n         L     R15,164(,R12)           58F0 C0A4        *.0{u*\n         BALR  R14,R15                 05EF             *..*\n         STH   R15,212(,R12)           40F0 C0D4        * 0{M*\n         NOPR  R0                      0700             *..*\n         BAL   R1,648(,R12)            4510 C288        *..Bh*\n         DC    AL4(A000280)            00000280         *....*\n         DC    AL4(A00185B)            0000185B         *...$*\n         DC    AL4(A0015B6)            000015B6         *....*\n         DC    AL4(A0018F0)            000018F0         *...0*\n         DC    X'80'                   80               *.*\n         DC    AL3(A0019FC)            0019FC           *...*\nA000280  DC    C'VDEFINE '             E5C4C5C6C9D5C540 *VDEFINE *\n         L     R15,164(,R12)           58F0 C0A4        *.0{u*\n         BALR  R14,R15                 05EF             *..*\n         STH   R15,212(,R12)           40F0 C0D4        * 0{M*\n         NOPR  R0                      0700             *..*\n         BAL   R1,692(,R12)            4510 C2B4        *..B.*\n         DC    AL4(A0002AC)            000002AC         *....*\n         DC    AL4(A001863)            00001863         *....*\n         DC    AL4(A001562)            00001562         *....*\n         DC    AL4(A0018F0)            000018F0         *...0*\n         DC    X'80'                   80               *.*\n         DC    AL3(A001A00)            001A00           *...*\nA0002AC  DC    C'VDEFINE '             E5C4C5C6C9D5C540 *VDEFINE *\n         L     R15,164(,R12)           58F0 C0A4        *.0{u*\n         BALR  R14,R15                 05EF             *..*\n         STH   R15,212(,R12)           40F0 C0D4        * 0{M*\n         NOPR  R0                      0700             *..*\n         BAL   R1,736(,R12)            4510 C2E0        *..B\\*\n         DC    AL4(A0002D8)            000002D8         *...Q*\n         DC    AL4(A00186B)            0000186B         *...,*\n         DC    AL4(A0015A8)            000015A8         *...y*\n         DC    AL4(A0018F0)            000018F0         *...0*\n         DC    X'80'                   80               *.*\n         DC    AL3(A001A00)            001A00           *...*\nA0002D8  DC    C'VDEFINE '             E5C4C5C6C9D5C540 *VDEFINE *\n         L     R15,164(,R12)           58F0 C0A4        *.0{u*\n         BALR  R14,R15                 05EF             *..*\n         STH   R15,212(,R12)           40F0 C0D4        * 0{M*\n         NOPR  R0                      0700             *..*\n         BAL   R1,780(,R12)            4510 C30C        *..C.*\n         DC    AL4(A000304)            00000304         *....*\n         DC    AL4(A001878)            00001878         *....*\n         DC    AL4(A0015B2)            000015B2         *....*\n         DC    AL4(A0018F0)            000018F0         *...0*\n         DC    X'80'                   80               *.*\n         DC    AL3(A001A00)            001A00           *...*\nA000304  DC    C'VDEFINE '             E5C4C5C6C9D5C540 *VDEFINE *\n         L     R15,164(,R12)           58F0 C0A4        *.0{u*\n         BALR  R14,R15                 05EF             *..*\n         STH   R15,212(,R12)           40F0 C0D4        * 0{M*\n         NOPR  R0                      0700             *..*\n         BAL   R1,824(,R12)            4510 C338        *..C.*\n         DC    AL4(A000330)            00000330         *....*\n         DC    AL4(A00187E)            0000187E         *...=*\n         DC    AL4(A0015C6)            000015C6         *...F*\n         DC    AL4(A0018F0)            000018F0         *...0*\n         DC    X'80'                   80               *.*\n         DC    AL3(A001A00)            001A00           *...*\nA000330  DC    C'VDEFINE '             E5C4C5C6C9D5C540 *VDEFINE *\n         L     R15,164(,R12)           58F0 C0A4        *.0{u*\n         BALR  R14,R15                 05EF             *..*\n         STH   R15,212(,R12)           40F0 C0D4        * 0{M*\n         NOPR  R0                      0700             *..*\n         BAL   R1,868(,R12)            4510 C364        *..C.*\n         DC    AL4(A00035C)            0000035C         *...**\n         DC    AL4(A001886)            00001886         *...f*\n         DC    AL4(A001566)            00001566         *....*\n         DC    AL4(A0018F0)            000018F0         *...0*\n         DC    X'80'                   80               *.*\n         DC    AL3(A001A04)            001A04           *...*\nA00035C  DC    C'VDEFINE '             E5C4C5C6C9D5C540 *VDEFINE *\n         L     R15,164(,R12)           58F0 C0A4        *.0{u*\n         BALR  R14,R15                 05EF             *..*\n         STH   R15,212(,R12)           40F0 C0D4        * 0{M*\n         NOPR  R0                      0700             *..*\n         BAL   R1,912(,R12)            4510 C390        *..C.*\n         DC    AL4(A000388)            00000388         *...h*\n         DC    AL4(A001894)            00001894         *...m*\n         DC    AL4(A001592)            00001592         *...k*\n         DC    AL4(A0018F0)            000018F0         *...0*\n         DC    X'80'                   80               *.*\n         DC    AL3(A001A04)            001A04           *...*\nA000388  DC    C'VDEFINE '             E5C4C5C6C9D5C540 *VDEFINE *\n         L     R15,164(,R12)           58F0 C0A4        *.0{u*\n         BALR  R14,R15                 05EF             *..*\n         STH   R15,212(,R12)           40F0 C0D4        * 0{M*\n         NOPR  R0                      0700             *..*\n         BAL   R1,956(,R12)            4510 C3BC        *..C.*\n         DC    AL4(A0003B4)            000003B4         *....*\n         DC    AL4(A00189B)            0000189B         *....*\n         DC    AL4(A001598)            00001598         *...q*\n         DC    AL4(A0018F0)            000018F0         *...0*\n         DC    X'80'                   80               *.*\n         DC    AL3(A001A08)            001A08           *...*\nA0003B4  DC    C'VDEFINE '             E5C4C5C6C9D5C540 *VDEFINE *\n         L     R15,164(,R12)           58F0 C0A4        *.0{u*\n         BALR  R14,R15                 05EF             *..*\n         STH   R15,212(,R12)           40F0 C0D4        * 0{M*\n         NOPR  R0                      0700             *..*\n         BAL   R1,1000(,R12)           4510 C3E8        *..CY*\n         DC    AL4(A0003E0)            000003E0         *...\\*\n         DC    AL4(A0018A4)            000018A4         *...u*\n         DC    AL4(A0015C0)            000015C0         *...{*\n         DC    AL4(A0018F0)            000018F0         *...0*\n         DC    X'80'                   80               *.*\n         DC    AL3(A001A04)            001A04           *...*\nA0003E0  DC    C'VDEFINE '             E5C4C5C6C9D5C540 *VDEFINE *\n         L     R15,164(,R12)           58F0 C0A4        *.0{u*\n         BALR  R14,R15                 05EF             *..*\n         STH   R15,212(,R12)           40F0 C0D4        * 0{M*\n         NOPR  R0                      0700             *..*\n         BAL   R1,1044(,R12)           4510 C414        *..D.*\n         DC    AL4(A00040C)            0000040C         *....*\n         DC    AL4(A0018AC)            000018AC         *....*\n         DC    AL4(A0015B8)            000015B8         *....*\n         DC    AL4(A0018F0)            000018F0         *...0*\n         DC    X'80'                   80               *.*\n         DC    AL3(A001A08)            001A08           *...*\nA00040C  DC    C'VDEFINE '             E5C4C5C6C9D5C540 *VDEFINE *\n         L     R15,164(,R12)           58F0 C0A4        *.0{u*\n         BALR  R14,R15                 05EF             *..*\n         STH   R15,212(,R12)           40F0 C0D4        * 0{M*\n         NOPR  R0                      0700             *..*\n         BAL   R1,1088(,R12)           4510 C440        *..D *\n         DC    AL4(A000438)            00000438         *....*\n         DC    AL4(A0018B4)            000018B4         *....*\n         DC    AL4(A00160A)            0000160A         *....*\n         DC    AL4(A0018F0)            000018F0         *...0*\n         DC    X'80'                   80               *.*\n         DC    AL3(A001A0C)            001A0C           *...*\nA000438  DC    C'VDEFINE '             E5C4C5C6C9D5C540 *VDEFINE *\n         L     R15,164(,R12)           58F0 C0A4        *.0{u*\n         BALR  R14,R15                 05EF             *..*\n         STH   R15,212(,R12)           40F0 C0D4        * 0{M*\n         NOPR  R0                      0700             *..*\n         BAL   R1,1132(,R12)           4510 C46C        *..D%*\n         DC    AL4(A000464)            00000464         *....*\n         DC    AL4(A0018BC)            000018BC         *....*\n         DC    AL4(A0012DC)            000012DC         *....*\n         DC    AL4(A0018F0)            000018F0         *...0*\n         DC    X'80'                   80               *.*\n         DC    AL3(A001A0C)            001A0C           *...*\nA000464  DC    C'VDEFINE '             E5C4C5C6C9D5C540 *VDEFINE *\n         L     R15,164(,R12)           58F0 C0A4        *.0{u*\n         BALR  R14,R15                 05EF             *..*\n         STH   R15,212(,R12)           40F0 C0D4        * 0{M*\n         NOPR  R0                      0700             *..*\n         BAL   R1,1176(,R12)           4510 C498        *..Dq*\n         DC    AL4(A000490)            00000490         *....*\n         DC    AL4(A0018C7)            000018C7         *...G*\n         DC    AL4(A001556)            00001556         *....*\n         DC    AL4(A0018F0)            000018F0         *...0*\n         DC    X'80'                   80               *.*\n         DC    AL3(A001A14)            001A14           *...*\nA000490  DC    C'VDEFINE '             E5C4C5C6C9D5C540 *VDEFINE *\n         L     R15,164(,R12)           58F0 C0A4        *.0{u*\n         BALR  R14,R15                 05EF             *..*\n         STH   R15,212(,R12)           40F0 C0D4        * 0{M*\n         NOPR  R0                      0700             *..*\n         BAL   R1,1220(,R12)           4510 C4C4        *..DD*\n         DC    AL4(A0004BC)            000004BC         *....*\n         DC    AL4(A0018CE)            000018CE         *....*\n         DC    AL4(A001578)            00001578         *....*\n         DC    AL4(A0018F0)            000018F0         *...0*\n         DC    X'80'                   80               *.*\n         DC    AL3(A001A1C)            001A1C           *...*\nA0004BC  DC    C'VDEFINE '             E5C4C5C6C9D5C540 *VDEFINE *\n         L     R15,164(,R12)           58F0 C0A4        *.0{u*\n         BALR  R14,R15                 05EF             *..*\n         STH   R15,212(,R12)           40F0 C0D4        * 0{M*\n         NOPR  R0                      0700             *..*\n         BAL   R1,1264(,R12)           4510 C4F0        *..D0*\n         DC    AL4(A0004E8)            000004E8         *...Y*\n         DC    AL4(A0018D6)            000018D6         *...O*\n         DC    AL4(A0013C2)            000013C2         *...B*\n         DC    AL4(A0018F0)            000018F0         *...0*\n         DC    X'80'                   80               *.*\n         DC    AL3(A001A10)            001A10           *...*\nA0004E8  DC    C'VDEFINE '             E5C4C5C6C9D5C540 *VDEFINE *\n         L     R15,164(,R12)           58F0 C0A4        *.0{u*\n         BALR  R14,R15                 05EF             *..*\n         STH   R15,212(,R12)           40F0 C0D4        * 0{M*\n         NOPR  R0                      0700             *..*\n         BAL   R1,1308(,R12)           4510 C51C        *..E.*\n         DC    AL4(A000514)            00000514         *....*\n         DC    AL4(A0018DF)            000018DF         *....*\n         DC    AL4(A0015CE)            000015CE         *....*\n         DC    AL4(A0018F0)            000018F0         *...0*\n         DC    X'80'                   80               *.*\n         DC    AL3(A001A18)            001A18           *...*\nA000514  DC    C'VDEFINE '             E5C4C5C6C9D5C540 *VDEFINE *\n         L     R15,164(,R12)           58F0 C0A4        *.0{u*\n         BALR  R14,R15                 05EF             *..*\n         STH   R15,212(,R12)           40F0 C0D4        * 0{M*\n         NOPR  R0                      0700             *..*\n         BAL   R1,1344(,R12)           4510 C540        *..E *\n         DC    AL4(A000538)            00000538         *....*\n         DC    AL4(A001803)            00001803         *....*\n         DC    X'80'                   80               *.*\n         DC    AL3(A0018F8)            0018F8           *..8*\nA000538  DC    C'VGET    '             E5C7C5E340404040 *VGET    *\n         L     R15,164(,R12)           58F0 C0A4        *.0{u*\n         BALR  R14,R15                 05EF             *..*\n         STH   R15,212(,R12)           40F0 C0D4        * 0{M*\n         NOPR  R0                      0700             *..*\n         BAL   R1,1380(,R12)           4510 C564        *..E.*\n         DC    AL4(A00055C)            0000055C         *...**\n         DC    AL4(A0017F1)            000017F1         *...1*\n         DC    X'80'                   80               *.*\n         DC    AL3(A0018F8)            0018F8           *..8*\nA00055C  DC    C'VGET    '             E5C7C5E340404040 *VGET    *\n         L     R15,164(,R12)           58F0 C0A4        *.0{u*\n         BALR  R14,R15                 05EF             *..*\n         STH   R15,212(,R12)           40F0 C0D4        * 0{M*\n         NOPR  R0                      0700             *..*\n         BAL   R1,1416(,R12)           4510 C588        *..Eh*\n         DC    AL4(A000580)            00000580         *....*\n         DC    AL4(A00180C)            0000180C         *....*\n         DC    X'80'                   80               *.*\n         DC    AL3(A001900)            001900           *...*\nA000580  DC    C'VGET    '             E5C7C5E340404040 *VGET    *\n         L     R15,164(,R12)           58F0 C0A4        *.0{u*\n         BALR  R14,R15                 05EF             *..*\n         STH   R15,212(,R12)           40F0 C0D4        * 0{M*\n         NOPR  R0                      0700             *..*\n         BAL   R1,1452(,R12)           4510 C5AC        *..E.*\n         DC    AL4(A0005A4)            000005A4         *...u*\n         DC    AL4(A001817)            00001817         *....*\n         DC    X'80'                   80               *.*\n         DC    AL3(A001900)            001900           *...*\nA0005A4  DC    C'VGET    '             E5C7C5E340404040 *VGET    *\n         L     R15,164(,R12)           58F0 C0A4        *.0{u*\n         BALR  R14,R15                 05EF             *..*\n         STH   R15,212(,R12)           40F0 C0D4        * 0{M*\n         CLI   682(R11),C' '           9540 B2AA        *n ..*\n         BNE   1512(,R12)              4770 C5E8        *..EY*\n         NOPR  R0                      0700             *..*\n         BAL   R1,1492(,R12)           4510 C5D4        *..EM*\n         DC    AL4(A0005CC)            000005CC         *....*\n         DC    X'80'                   80               *.*\n         DC    AL3(A001678)            001678           *...*\nA0005CC  DC    C'DISPLAY '             C4C9E2D7D3C1E840 *DISPLAY *\n         L     R15,164(,R12)           58F0 C0A4        *.0{u*\n         BALR  R14,R15                 05EF             *..*\n         STH   R15,212(,R12)           40F0 C0D4        * 0{M*\n         CLC   212(2,R12),3736(R11)    D501 C0D4 BE98   *N.{M.q*\n         BNE   3854(,R12)              4770 CF0E        *....*\n         LA    R1,682(,R11)            4110 B2AA        *....*\n         LA    R0,44                   4100 002C        *....*\n         CLI   0(R1),X'81'             9581 1000        *na..*\n         BL    1540(,R12)              4740 C604        *. F.*\n         CLI   0(R1),X'A9'             95A9 1000        *nz..*\n         BH    1540(,R12)              4720 C604        *..F.*\n         OI    0(R1),C' '              9640 1000        *o ..*\n         LA    R1,1(,R1)               4110 1001        *....*\n         BCTR  R0,R0                   0600             *..*\n         LTR   R0,R0                   1200             *..*\n         BNZ   1520(,R12)              4770 C5F0        *..E0*\n         LA    R1,726(,R11)            4110 B2D6        *...O*\n         LA    R0,6                    4100 0006        *....*\n         CLI   0(R1),X'81'             9581 1000        *na..*\n         BL    1580(,R12)              4740 C62C        *. F.*\n         CLI   0(R1),X'A9'             95A9 1000        *nz..*\n         BH    1580(,R12)              4720 C62C        *..F.*\n         OI    0(R1),C' '              9640 1000        *o ..*\n         LA    R1,1(,R1)               4110 1001        *....*\n         BCTR  R0,R0                   0600             *..*\n         LTR   R0,R0                   1200             *..*\n         BNZ   1560(,R12)              4770 C618        *..F.*\n         CLC   682(44,R11),632(R11)    D52B B2AA B278   *N.....*\n         BNE   3110(,R12)              4770 CC26        *....*\n         CLC   726(6,R11),676(R11)     D505 B2D6 B2A4   *N..O.u*\n         BNE   3110(,R12)              4770 CC26        *....*\n         CLC   1364(2,R11),1084(R11)   D501 B554 B43C   *N.....*\n         BE    1676(,R12)              4780 C68C        *..F.*\n         MVI   2392(R11),C' '          9240 B958        *k ..*\n         MVC   2393(79,R11),2392(R11)  D24E B959 B958   *K+....*\n         MVC   2392(8,R11),3160(R11)   D207 B958 BC58   *K.....*\n         MVC   2400(2,R11),1084(R11)   D201 B960 B43C   *K..-..*\n         MVI   2472(R11),C' '          9240 B9A8        *k .y*\n         MVC   2473(79,R11),2472(R11)  D24E B9A9 B9A8   *K+.z.y*\n         MVC   2472(8,R11),3168(R11)   D207 B9A8 BC60   *K..y.-*\n         MVC   2480(2,R11),1364(R11)   D201 B9B0 B554   *K.....*\n         MVC   2482(32,R11),3176(R11)  D21F B9B2 BC68   *K.....*\n         BAL   R14,4064(,R12)          45E0 CFE0        *.\\.\\*\n         CLC   1366(12,R11),1086(R11)  D50B B556 B43E   *N.....*\n         BE    1740(,R12)              4780 C6CC        *..F.*\n         MVI   2392(R11),C' '          9240 B958        *k ..*\n         MVC   2393(79,R11),2392(R11)  D24E B959 B958   *K+....*\n         MVC   2392(8,R11),3208(R11)   D207 B958 BC88   *K....h*\n         MVC   2400(12,R11),1086(R11)  D20B B960 B43E   *K..-..*\n         MVI   2472(R11),C' '          9240 B9A8        *k .y*\n         MVC   2473(79,R11),2472(R11)  D24E B9A9 B9A8   *K+.z.y*\n         MVC   2472(8,R11),3216(R11)   D207 B9A8 BC90   *K..y..*\n         MVC   2480(12,R11),1366(R11)  D20B B9B0 B556   *K.....*\n         MVC   2492(30,R11),3738(R11)  D21D B9BC BE9A   *K.....*\n         BAL   R14,4064(,R12)          45E0 CFE0        *.\\.\\*\n         CLC   1378(4,R11),1098(R11)   D503 B562 B44A   *N....\u00a2*\n         BE    1804(,R12)              4780 C70C        *..G.*\n         MVI   2392(R11),C' '          9240 B958        *k ..*\n         MVC   2393(79,R11),2392(R11)  D24E B959 B958   *K+....*\n         MVC   2392(8,R11),3224(R11)   D207 B958 BC98   *K....q*\n         MVC   2400(4,R11),1098(R11)   D203 B960 B44A   *K..-.\u00a2*\n         MVI   2472(R11),C' '          9240 B9A8        *k .y*\n         MVC   2473(79,R11),2472(R11)  D24E B9A9 B9A8   *K+.z.y*\n         MVC   2472(8,R11),3232(R11)   D207 B9A8 BCA0   *K..y..*\n         MVC   2480(4,R11),1378(R11)   D203 B9B0 B562   *K.....*\n         MVC   2484(25,R11),88(R10)    D218 B9B4 A058   *K.....*\n         BAL   R14,4064(,R12)          45E0 CFE0        *.\\.\\*\n         CLC   1382(6,R11),1102(R11)   D505 B566 B44E   *N....+*\n         BE    1868(,R12)              4780 C74C        *..G<*\n         MVI   2392(R11),C' '          9240 B958        *k ..*\n         MVC   2393(79,R11),2392(R11)  D24E B959 B958   *K+....*\n         MVC   2392(8,R11),3240(R11)   D207 B958 BCA8   *K....y*\n         MVC   2400(6,R11),1102(R11)   D205 B960 B44E   *K..-.+*\n         MVI   2472(R11),C' '          9240 B9A8        *k .y*\n         MVC   2473(79,R11),2472(R11)  D24E B9A9 B9A8   *K+.z.y*\n         MVC   2472(8,R11),3248(R11)   D207 B9A8 BCB0   *K..y..*\n         MVC   2480(6,R11),1382(R11)   D205 B9B0 B566   *K.....*\n         MVC   2486(22,R11),3768(R11)  D215 B9B6 BEB8   *K.....*\n         BAL   R14,4064(,R12)          45E0 CFE0        *.\\.\\*\n         CLC   1388(6,R11),1108(R11)   D505 B56C B454   *N..%..*\n         BE    1932(,R12)              4780 C78C        *..G.*\n         MVI   2392(R11),C' '          9240 B958        *k ..*\n         MVC   2393(79,R11),2392(R11)  D24E B959 B958   *K+....*\n         MVC   2392(8,R11),3256(R11)   D207 B958 BCB8   *K.....*\n         MVC   2400(6,R11),1108(R11)   D205 B960 B454   *K..-..*\n         MVI   2472(R11),C' '          9240 B9A8        *k .y*\n         MVC   2473(79,R11),2472(R11)  D24E B9A9 B9A8   *K+.z.y*\n         MVC   2472(8,R11),3264(R11)   D207 B9A8 BCC0   *K..y.{*\n         MVC   2480(6,R11),1388(R11)   D205 B9B0 B56C   *K....%*\n         MVC   2486(24,R11),3272(R11)  D217 B9B6 BCC8   *K....H*\n         BAL   R14,4064(,R12)          45E0 CFE0        *.\\.\\*\n         CLC   1394(2,R11),1114(R11)   D501 B572 B45A   *N....!*\n         BE    1996(,R12)              4780 C7CC        *..G.*\n         MVI   2392(R11),C' '          9240 B958        *k ..*\n         MVC   2393(79,R11),2392(R11)  D24E B959 B958   *K+....*\n         MVC   2392(8,R11),3296(R11)   D207 B958 BCE0   *K....\\*\n         MVC   2400(2,R11),1114(R11)   D201 B960 B45A   *K..-.!*\n         MVI   2472(R11),C' '          9240 B9A8        *k .y*\n         MVC   2473(79,R11),2472(R11)  D24E B9A9 B9A8   *K+.z.y*\n         MVC   2472(8,R11),3304(R11)   D207 B9A8 BCE8   *K..y.Y*\n         MVC   2480(2,R11),1394(R11)   D201 B9B0 B572   *K.....*\n         MVC   2482(26,R11),3790(R11)  D219 B9B2 BECE   *K.....*\n         BAL   R14,4064(,R12)          45E0 CFE0        *.\\.\\*\n         CLC   1396(2,R11),1116(R11)   D501 B574 B45C   *N....**\n         BE    2060(,R12)              4780 C80C        *..H.*\n         MVI   2392(R11),C' '          9240 B958        *k ..*\n         MVC   2393(79,R11),2392(R11)  D24E B959 B958   *K+....*\n         MVC   2392(8,R11),3312(R11)   D207 B958 BCF0   *K....0*\n         MVC   2400(2,R11),1116(R11)   D201 B960 B45C   *K..-.**\n         MVI   2472(R11),C' '          9240 B9A8        *k .y*\n         MVC   2473(79,R11),2472(R11)  D24E B9A9 B9A8   *K+.z.y*\n         MVC   2472(8,R11),3320(R11)   D207 B9A8 BCF8   *K..y.8*\n         MVC   2480(2,R11),1396(R11)   D201 B9B0 B574   *K.....*\n         MVC   2482(38,R11),3816(R11)  D225 B9B2 BEE8   *K....Y*\n         BAL   R14,4064(,R12)          45E0 CFE0        *.\\.\\*\n         CLC   1400(26,R11),1120(R11)  D519 B578 B460   *N....-*\n         BE    2124(,R12)              4780 C84C        *..H<*\n         MVI   2392(R11),C' '          9240 B958        *k ..*\n         MVC   2393(79,R11),2392(R11)  D24E B959 B958   *K+....*\n         MVC   2392(8,R11),3328(R11)   D207 B958 BD00   *K.....*\n         MVC   2400(26,R11),1120(R11)  D219 B960 B460   *K..-.-*\n         MVI   2472(R11),C' '          9240 B9A8        *k .y*\n         MVC   2473(79,R11),2472(R11)  D24E B9A9 B9A8   *K+.z.y*\n         MVC   2472(8,R11),3336(R11)   D207 B9A8 BD08   *K..y..*\n         MVC   2480(26,R11),1400(R11)  D219 B9B0 B578   *K.....*\n         MVC   2506(18,R11),3854(R11)  D211 B9CA BF0E   *K.....*\n         BAL   R14,4064(,R12)          45E0 CFE0        *.\\.\\*\n         CLC   1426(6,R11),1146(R11)   D505 B592 B47A   *N..k.:*\n         BE    2188(,R12)              4780 C88C        *..H.*\n         MVI   2392(R11),C' '          9240 B958        *k ..*\n         MVC   2393(79,R11),2392(R11)  D24E B959 B958   *K+....*\n         MVC   2392(8,R11),3344(R11)   D207 B958 BD10   *K.....*\n         MVC   2400(6,R11),1146(R11)   D205 B960 B47A   *K..-.:*\n         MVI   2472(R11),C' '          9240 B9A8        *k .y*\n         MVC   2473(79,R11),2472(R11)  D24E B9A9 B9A8   *K+.z.y*\n         MVC   2472(8,R11),3352(R11)   D207 B9A8 BD18   *K..y..*\n         MVC   2480(6,R11),1426(R11)   D205 B9B0 B592   *K....k*\n         MVC   2486(29,R11),113(R10)   D21C B9B6 A071   *K.....*\n         BAL   R14,4064(,R12)          45E0 CFE0        *.\\.\\*\n         CLC   1440(2,R11),1160(R11)   D501 B5A0 B488   *N....h*\n         BE    2252(,R12)              4780 C8CC        *..H.*\n         MVI   2392(R11),C' '          9240 B958        *k ..*\n         MVC   2393(79,R11),2392(R11)  D24E B959 B958   *K+....*\n         MVC   2392(8,R11),3360(R11)   D207 B958 BD20   *K.....*\n         MVC   2400(2,R11),1160(R11)   D201 B960 B488   *K..-.h*\n         MVI   2472(R11),C' '          9240 B9A8        *k .y*\n         MVC   2473(79,R11),2472(R11)  D24E B9A9 B9A8   *K+.z.y*\n         MVC   2472(8,R11),3368(R11)   D207 B9A8 BD28   *K..y..*\n         MVC   2480(2,R11),1440(R11)   D201 B9B0 B5A0   *K.....*\n         MVC   2482(26,R11),3872(R11)  D219 B9B2 BF20   *K.....*\n         BAL   R14,4064(,R12)          45E0 CFE0        *.\\.\\*\n         CLC   1442(2,R11),1162(R11)   D501 B5A2 B48A   *N..s..*\n         BE    2316(,R12)              4780 C90C        *..I.*\n         MVI   2392(R11),C' '          9240 B958        *k ..*\n         MVC   2393(79,R11),2392(R11)  D24E B959 B958   *K+....*\n         MVC   2392(8,R11),3376(R11)   D207 B958 BD30   *K.....*\n         MVC   2400(2,R11),1162(R11)   D201 B960 B48A   *K..-..*\n         MVI   2472(R11),C' '          9240 B9A8        *k .y*\n         MVC   2473(79,R11),2472(R11)  D24E B9A9 B9A8   *K+.z.y*\n         MVC   2472(8,R11),3384(R11)   D207 B9A8 BD38   *K..y..*\n         MVC   2480(2,R11),1442(R11)   D201 B9B0 B5A2   *K....s*\n         MVC   2482(26,R11),3898(R11)  D219 B9B2 BF3A   *K.....*\n         BAL   R14,4064(,R12)          45E0 CFE0        *.\\.\\*\n         CLC   1444(2,R11),1164(R11)   D501 B5A4 B48C   *N..u..*\n         BE    2380(,R12)              4780 C94C        *..I<*\n         MVI   2392(R11),C' '          9240 B958        *k ..*\n         MVC   2393(79,R11),2392(R11)  D24E B959 B958   *K+....*\n         MVC   2392(8,R11),3392(R11)   D207 B958 BD40   *K.... *\n         MVC   2400(2,R11),1164(R11)   D201 B960 B48C   *K..-..*\n         MVI   2472(R11),C' '          9240 B9A8        *k .y*\n         MVC   2473(79,R11),2472(R11)  D24E B9A9 B9A8   *K+.z.y*\n         MVC   2472(8,R11),3400(R11)   D207 B9A8 BD48   *K..y..*\n         MVC   2480(2,R11),1444(R11)   D201 B9B0 B5A4   *K....u*\n         MVC   2482(14,R11),3924(R11)  D20D B9B2 BF54   *K.....*\n         BAL   R14,4064(,R12)          45E0 CFE0        *.\\.\\*\n         CLC   1446(2,R11),1166(R11)   D501 B5A6 B48E   *N..w..*\n         BE    2444(,R12)              4780 C98C        *..I.*\n         MVI   2392(R11),C' '          9240 B958        *k ..*\n         MVC   2393(79,R11),2392(R11)  D24E B959 B958   *K+....*\n         MVC   2392(8,R11),3408(R11)   D207 B958 BD50   *K....&*\n         MVC   2400(2,R11),1166(R11)   D201 B960 B48E   *K..-..*\n         MVI   2472(R11),C' '          9240 B9A8        *k .y*\n         MVC   2473(79,R11),2472(R11)  D24E B9A9 B9A8   *K+.z.y*\n         MVC   2472(8,R11),3416(R11)   D207 B9A8 BD58   *K..y..*\n         MVC   2480(2,R11),1446(R11)   D201 B9B0 B5A6   *K....w*\n         MVC   2482(20,R11),3616(R11)  D213 B9B2 BE20   *K.....*\n         BAL   R14,4064(,R12)          45E0 CFE0        *.\\.\\*\n         CLC   1448(4,R11),1168(R11)   D503 B5A8 B490   *N..y..*\n         BE    2508(,R12)              4780 C9CC        *..I.*\n         MVI   2392(R11),C' '          9240 B958        *k ..*\n         MVC   2393(79,R11),2392(R11)  D24E B959 B958   *K+....*\n         MVC   2392(8,R11),3424(R11)   D207 B958 BD60   *K....-*\n         MVC   2400(4,R11),1168(R11)   D203 B960 B490   *K..-..*\n         MVI   2472(R11),C' '          9240 B9A8        *k .y*\n         MVC   2473(79,R11),2472(R11)  D24E B9A9 B9A8   *K+.z.y*\n         MVC   2472(8,R11),3432(R11)   D207 B9A8 BD68   *K..y..*\n         MVC   2480(4,R11),1448(R11)   D203 B9B0 B5A8   *K....y*\n         MVC   2484(19,R11),142(R10)   D212 B9B4 A08E   *K.....*\n         BAL   R14,4064(,R12)          45E0 CFE0        *.\\.\\*\n         CLC   1452(4,R11),1172(R11)   D503 B5AC B494   *N....m*\n         BE    2572(,R12)              4780 CA0C        *....*\n         MVI   2392(R11),C' '          9240 B958        *k ..*\n         MVC   2393(79,R11),2392(R11)  D24E B959 B958   *K+....*\n         MVC   2392(8,R11),3440(R11)   D207 B958 BD70   *K.....*\n         MVC   2400(4,R11),1172(R11)   D203 B960 B494   *K..-.m*\n         MVI   2472(R11),C' '          9240 B9A8        *k .y*\n         MVC   2473(79,R11),2472(R11)  D24E B9A9 B9A8   *K+.z.y*\n         MVC   2472(8,R11),3448(R11)   D207 B9A8 BD78   *K..y..*\n         MVC   2480(4,R11),1452(R11)   D203 B9B0 B5AC   *K.....*\n         MVC   2484(22,R11),3938(R11)  D215 B9B4 BF62   *K.....*\n         BAL   R14,4064(,R12)          45E0 CFE0        *.\\.\\*\n         CLC   1458(4,R11),1178(R11)   D503 B5B2 B49A   *N.....*\n         BE    2636(,R12)              4780 CA4C        *...<*\n         MVI   2392(R11),C' '          9240 B958        *k ..*\n         MVC   2393(79,R11),2392(R11)  D24E B959 B958   *K+....*\n         MVC   2392(8,R11),3456(R11)   D207 B958 BD80   *K.....*\n         MVC   2400(4,R11),1178(R11)   D203 B960 B49A   *K..-..*\n         MVI   2472(R11),C' '          9240 B9A8        *k .y*\n         MVC   2473(79,R11),2472(R11)  D24E B9A9 B9A8   *K+.z.y*\n         MVC   2472(8,R11),3464(R11)   D207 B9A8 BD88   *K..y.h*\n         MVC   2480(4,R11),1458(R11)   D203 B9B0 B5B2   *K.....*\n         MVC   2484(30,R11),3960(R11)  D21D B9B4 BF78   *K.....*\n         BAL   R14,4064(,R12)          45E0 CFE0        *.\\.\\*\n         CLC   1462(2,R11),1182(R11)   D501 B5B6 B49E   *N.....*\n         BE    2700(,R12)              4780 CA8C        *....*\n         MVI   2392(R11),C' '          9240 B958        *k ..*\n         MVC   2393(79,R11),2392(R11)  D24E B959 B958   *K+....*\n         MVC   2392(8,R11),3472(R11)   D207 B958 BD90   *K.....*\n         MVC   2400(2,R11),1182(R11)   D201 B960 B49E   *K..-..*\n         MVI   2472(R11),C' '          9240 B9A8        *k .y*\n         MVC   2473(79,R11),2472(R11)  D24E B9A9 B9A8   *K+.z.y*\n         MVC   2472(8,R11),3480(R11)   D207 B9A8 BD98   *K..y.q*\n         MVC   2480(2,R11),1462(R11)   D201 B9B0 B5B6   *K.....*\n         MVC   2482(26,R11),3990(R11)  D219 B9B2 BF96   *K....o*\n         BAL   R14,4064(,R12)          45E0 CFE0        *.\\.\\*\n         CLC   1464(8,R11),1184(R11)   D507 B5B8 B4A0   *N.....*\n         BE    2764(,R12)              4780 CACC        *....*\n         MVI   2392(R11),C' '          9240 B958        *k ..*\n         MVC   2393(79,R11),2392(R11)  D24E B959 B958   *K+....*\n         MVC   2392(8,R11),3488(R11)   D207 B958 BDA0   *K.....*\n         MVC   2400(8,R11),1184(R11)   D207 B960 B4A0   *K..-..*\n         MVI   2472(R11),C' '          9240 B9A8        *k .y*\n         MVC   2473(79,R11),2472(R11)  D24E B9A9 B9A8   *K+.z.y*\n         MVC   2472(8,R11),3496(R11)   D207 B9A8 BDA8   *K..y.y*\n         MVC   2480(8,R11),1464(R11)   D207 B9B0 B5B8   *K.....*\n         MVC   2488(29,R11),161(R10)   D21C B9B8 A0A1   *K....~*\n         BAL   R14,4064(,R12)          45E0 CFE0        *.\\.\\*\n         CLC   1472(6,R11),1192(R11)   D505 B5C0 B4A8   *N..{.y*\n         BE    2828(,R12)              4780 CB0C        *....*\n         MVI   2392(R11),C' '          9240 B958        *k ..*\n         MVC   2393(79,R11),2392(R11)  D24E B959 B958   *K+....*\n         MVC   2392(8,R11),3504(R11)   D207 B958 BDB0   *K.....*\n         MVC   2400(6,R11),1192(R11)   D205 B960 B4A8   *K..-.y*\n         MVI   2472(R11),C' '          9240 B9A8        *k .y*\n         MVC   2473(79,R11),2472(R11)  D24E B9A9 B9A8   *K+.z.y*\n         MVC   2472(8,R11),3512(R11)   D207 B9A8 BDB8   *K..y..*\n         MVC   2480(6,R11),1472(R11)   D205 B9B0 B5C0   *K....{*\n         MVC   2486(30,R11),4016(R11)  D21D B9B6 BFB0   *K.....*\n         BAL   R14,4064(,R12)          45E0 CFE0        *.\\.\\*\n         CLC   1478(4,R11),1198(R11)   D503 B5C6 B4AE   *N..F..*\n         BE    2892(,R12)              4780 CB4C        *...<*\n         MVI   2392(R11),C' '          9240 B958        *k ..*\n         MVC   2393(79,R11),2392(R11)  D24E B959 B958   *K+....*\n         MVC   2392(8,R11),3520(R11)   D207 B958 BDC0   *K....{*\n         MVC   2400(4,R11),1198(R11)   D203 B960 B4AE   *K..-..*\n         MVI   2472(R11),C' '          9240 B9A8        *k .y*\n         MVC   2473(79,R11),2472(R11)  D24E B9A9 B9A8   *K+.z.y*\n         MVC   2472(8,R11),3528(R11)   D207 B9A8 BDC8   *K..y.H*\n         MVC   2480(4,R11),1478(R11)   D203 B9B0 B5C6   *K....F*\n         MVC   2484(31,R11),190(R10)   D21E B9B4 A0BE   *K.....*\n         BAL   R14,4064(,R12)          45E0 CFE0        *.\\.\\*\n         CLC   1486(20,R11),1206(R11)  D513 B5CE B4B6   *N.....*\n         BE    2956(,R12)              4780 CB8C        *....*\n         MVI   2392(R11),C' '          9240 B958        *k ..*\n         MVC   2393(79,R11),2392(R11)  D24E B959 B958   *K+....*\n         MVC   2392(8,R11),3536(R11)   D207 B958 BDD0   *K....}*\n         MVC   2400(20,R11),1206(R11)  D213 B960 B4B6   *K..-..*\n         MVI   2472(R11),C' '          9240 B9A8        *k .y*\n         MVC   2473(79,R11),2472(R11)  D24E B9A9 B9A8   *K+.z.y*\n         MVC   2472(8,R11),3544(R11)   D207 B9A8 BDD8   *K..y.Q*\n         MVC   2480(20,R11),1486(R11)  D213 B9B0 B5CE   *K.....*\n         MVC   2500(28,R11),3636(R11)  D21B B9C4 BE34   *K..D..*\n         BAL   R14,4064(,R12)          45E0 CFE0        *.\\.\\*\n         CLC   1506(20,R11),1226(R11)  D513 B5E2 B4CA   *N..S..*\n         BE    3020(,R12)              4780 CBCC        *....*\n         MVI   2392(R11),C' '          9240 B958        *k ..*\n         MVC   2393(79,R11),2392(R11)  D24E B959 B958   *K+....*\n         MVC   2392(8,R11),3552(R11)   D207 B958 BDE0   *K....\\*\n         MVC   2400(20,R11),1226(R11)  D213 B960 B4CA   *K..-..*\n         MVI   2472(R11),C' '          9240 B9A8        *k .y*\n         MVC   2473(79,R11),2472(R11)  D24E B9A9 B9A8   *K+.z.y*\n         MVC   2472(8,R11),3560(R11)   D207 B9A8 BDE8   *K..y.Y*\n         MVC   2480(20,R11),1506(R11)  D213 B9B0 B5E2   *K....S*\n         MVC   2500(28,R11),3664(R11)  D21B B9C4 BE50   *K..D.&*\n         BAL   R14,4064(,R12)          45E0 CFE0        *.\\.\\*\n         CLC   1526(20,R11),1246(R11)  D513 B5F6 B4DE   *N..6..*\n         BE    3084(,R12)              4780 CC0C        *....*\n         MVI   2392(R11),C' '          9240 B958        *k ..*\n         MVC   2393(79,R11),2392(R11)  D24E B959 B958   *K+....*\n         MVC   2392(8,R11),3568(R11)   D207 B958 BDF0   *K....0*\n         MVC   2400(20,R11),1246(R11)  D213 B960 B4DE   *K..-..*\n         MVI   2472(R11),C' '          9240 B9A8        *k .y*\n         MVC   2473(79,R11),2472(R11)  D24E B9A9 B9A8   *K+.z.y*\n         MVC   2472(8,R11),3576(R11)   D207 B9A8 BDF8   *K..y.8*\n         MVC   2480(20,R11),1526(R11)  D213 B9B0 B5F6   *K....6*\n         MVC   2500(28,R11),3692(R11)  D21B B9C4 BE6C   *K..D.%*\n         BAL   R14,4064(,R12)          45E0 CFE0        *.\\.\\*\n         MVC   1084(256,R11),1364(R11) D2FF B43C B554   *K.....*\n         MVI   1665(R11),C' '          9240 B681        *k .a*\n         MVC   1666(69,R11),1665(R11)  D244 B682 B681   *K..b.a*\n         MVC   1665(59,R11),221(R10)   D23A B681 A0DD   *K..a..*\n         B     1470(,R12)              47F0 C5BE        *.0E.*\n         CLI   726(R11),C' '           9540 B2D6        *n .O*\n         BE    3130(,R12)              4780 CC3A        *....*\n         CLI   726(R11),X'00'          9500 B2D6        *n..O*\n         BE    3130(,R12)              4780 CC3A        *....*\n         B     3210(,R12)              47F0 CC8A        *.0..*\n         LA    R1,1752(,R11)           4110 B6D8        *...Q*\n         SVC   26      CATALOG         0A1A             *..*\n         LTR   R15,R15                 12FF             *..*\n         BZ    3204(,R12)              4780 CC84        *...d*\n         ST    R15,1644(,R11)          50F0 B66C        *&0.%*\n         MVI   1665(R11),C' '          9240 B681        *k .a*\n         MVC   1666(69,R11),1665(R11)  D244 B682 B681   *K..b.a*\n         MVC   1665(45,R11),280(R10)   D22C B681 A118   *K..a~.*\n         MVI   1364(R11),C' '          9240 B554        *k ..*\n         MVC   1365(139,R11),1364(R11) D28A B555 B554   *K.....*\n         MVI   1504(R11),C' '          9240 B5E0        *k .\\*\n         MVC   1505(139,R11),1504(R11) D28A B5E1 B5E0   *K....\\*\n         XC    632(44,R11),632(R11)    D72B B278 B278   *P.....*\n         XC    676(6,R11),676(R11)     D705 B2A4 B2A4   *P..u.u*\n         MVC   726(6,R11),4046(R11)    D205 B2D6 BFCE   *K..O..*\n         B     1470(,R12)              47F0 C5BE        *.0E.*\n         MVC   726(6,R11),1774(R11)    D205 B2D6 B6EE   *K..O..*\n         LA    R1,1736(,R11)           4110 B6C8        *...H*\n         SVC   27      OBTAIN          0A1B             *..*\n         LTR   R15,R15                 12FF             *..*\n         BZ    3508(,R12)              4780 CDB4        *....*\n         MVI   1364(R11),C' '          9240 B554        *k ..*\n         MVC   1365(139,R11),1364(R11) D28A B555 B554   *K.....*\n         MVI   1504(R11),C' '          9240 B5E0        *k .\\*\n         MVC   1505(139,R11),1504(R11) D28A B5E1 B5E0   *K....\\*\n         XC    632(44,R11),632(R11)    D72B B278 B278   *P.....*\n         XC    676(6,R11),676(R11)     D705 B2A4 B2A4   *P..u.u*\n         ST    R15,1644(,R11)          50F0 B66C        *&0.%*\n         CLC   1644(4,R11),3720(R11)   D503 B66C BE88   *N..%.h*\n         BNE   3300(,R12)              4770 CCE4        *...U*\n         MVI   1665(R11),C' '          9240 B681        *k .a*\n         MVC   1666(69,R11),1665(R11)  D244 B682 B681   *K..b.a*\n         MVC   1665(10,R11),4052(R11)  D209 B681 BFD4   *K..a.M*\n         MVC   1675(6,R11),726(R11)    D205 B68B B2D6   *K....O*\n         MVC   1681(24,R11),3584(R11)  D217 B691 BE00   *K..j..*\n         B     1470(,R12)              47F0 C5BE        *.0E.*\n         CLC   1644(4,R11),3724(R11)   D503 B66C BE8C   *N..%..*\n         BNE   3330(,R12)              4770 CD02        *....*\n         MVI   1665(R11),C' '          9240 B681        *k .a*\n         MVC   1666(69,R11),1665(R11)  D244 B682 B681   *K..b.a*\n         MVC   1665(38,R11),4062(R11)  D225 B681 BFDE   *K..a..*\n         B     1470(,R12)              47F0 C5BE        *.0E.*\n         CLC   1644(4,R11),3728(R11)   D503 B66C BE90   *N..%..*\n         BNE   3360(,R12)              4770 CD20        *....*\n         MVI   1665(R11),C' '          9240 B681        *k .a*\n         MVC   1666(69,R11),1665(R11)  D244 B682 B681   *K..b.a*\n         MVC   1665(54,R11),4(R10)     D235 B681 A004   *K..a..*\n         B     1470(,R12)              47F0 C5BE        *.0E.*\n         LA    R1,1644(,R11)           4110 B66C        *...%*\n         LA    R1,4(,R1)               4110 1004        *....*\n         ST    R1,3448(,R12)           5010 CD78        *&...*\n         LA    R1,1644(,R11)           4110 B66C        *...%*\n         LA    R2,1648(,R11)           4120 B670        *....*\n         C     R1,3448(,R12)           5910 CD78        *....*\n         BNL   3470(,R12)              47B0 CD8E        *....*\n         MVC   3452(1,R12),0(R1)       D200 CD7C 1000   *K..@..*\n         MVC   3453(1,R12),0(R1)       D200 CD7D 1000   *K..'..*\n         NI    3452(R12),X'0F'         940F CD7C        *m..@*\n         SR    R0,R0                   1B00             *..*\n         IC    R0,3453(,R12)           4300 CD7D        *...'*\n         SRL   R0,4                    8800 0004        *h...*\n         STC   R0,3453(,R12)           4200 CD7D        *...'*\n         MVC   0(1,R2),3453(R12)       D200 2000 CD7D   *K....'*\n         LA    R2,1(,R2)               4120 2001        *....*\n         MVC   0(1,R2),3452(R12)       D200 2000 CD7C   *K....@*\n         LA    R1,1(,R1)               4110 1001        *....*\n         LA    R2,1(,R2)               4120 2001        *....*\n         B     3380(,R12)              47F0 CD34        *.0..*\n         NOPR  R0                      0700             *..*\n         DC    X'000000000000'         000000000000     *......*\n         DC    C'01234567'             F0F1F2F3F4F5F6F7 *01234567*\n         DC    C'89ABCDEF'             F8F9C1C2C3C4C5C6 *89ABCDEF*\n         TR    1648(8,R11),3454(R12)   DC07 B670 CD7E   *.....=*\n         MVI   1665(R11),C' '          9240 B681        *k .a*\n         MVC   1666(69,R11),1665(R11)  D244 B682 B681   *K..b.a*\n         MVC   1665(27,R11),325(R10)   D21A B681 A145   *K..a~.*\n         MVC   1692(8,R11),1648(R11)   D207 B69C B670   *K.....*\n         MVC   1700(3,R11),352(R10)    D202 B6A4 A160   *K..u~-*\n         B     1470(,R12)              47F0 C5BE        *.0E.*\n         MVI   840(R11),C'0'           92F0 B348        *k0..*\n         MVI   842(R11),C'0'           92F0 B34A        *k0.\u00a2*\n         LA    R1,944(,R11)            4110 B3B0        *....*\n         LA    R1,70(,R1)              4110 1046        *....*\n         ST    R1,3604(,R12)           5010 CE14        *&...*\n         LA    R1,944(,R11)            4110 B3B0        *....*\n         LA    R2,1364(,R11)           4120 B554        *....*\n         C     R1,3604(,R12)           5910 CE14        *....*\n         BNL   3610(,R12)              47B0 CE1A        *....*\n         MVC   3608(1,R12),0(R1)       D200 CE18 1000   *K.....*\n         MVC   3609(1,R12),0(R1)       D200 CE19 1000   *K.....*\n         NI    3608(R12),X'0F'         940F CE18        *m...*\n         SR    R0,R0                   1B00             *..*\n         IC    R0,3609(,R12)           4300 CE19        *....*\n         SRL   R0,4                    8800 0004        *h...*\n         STC   R0,3609(,R12)           4200 CE19        *....*\n         MVC   0(1,R2),3609(R12)       D200 2000 CE19   *K.....*\n         LA    R2,1(,R2)               4120 2001        *....*\n         MVC   0(1,R2),3608(R12)       D200 2000 CE18   *K.....*\n         LA    R1,1(,R1)               4110 1001        *....*\n         LA    R2,1(,R2)               4120 2001        *....*\n         B     3536(,R12)              47F0 CDD0        *.0.}*\n         NOPR  R0                      0700             *..*\n         DC    X'000000000000'         000000000000     *......*\n         TR    1364(140,R11),3454(R12) DC8B B554 CD7E   *.....=*\n         LA    R1,1014(,R11)           4110 B3F6        *...6*\n         LA    R1,70(,R1)              4110 1046        *....*\n         ST    R1,3704(,R12)           5010 CE78        *&...*\n         LA    R1,1014(,R11)           4110 B3F6        *...6*\n         LA    R2,1504(,R11)           4120 B5E0        *...\\*\n         C     R1,3704(,R12)           5910 CE78        *....*\n         BNL   3710(,R12)              47B0 CE7E        *...=*\n         MVC   3708(1,R12),0(R1)       D200 CE7C 1000   *K..@..*\n         MVC   3709(1,R12),0(R1)       D200 CE7D 1000   *K..'..*\n         NI    3708(R12),X'0F'         940F CE7C        *m..@*\n         SR    R0,R0                   1B00             *..*\n         IC    R0,3709(,R12)           4300 CE7D        *...'*\n         SRL   R0,4                    8800 0004        *h...*\n         STC   R0,3709(,R12)           4200 CE7D        *...'*\n         MVC   0(1,R2),3709(R12)       D200 2000 CE7D   *K....'*\n         LA    R2,1(,R2)               4120 2001        *....*\n         MVC   0(1,R2),3708(R12)       D200 2000 CE7C   *K....@*\n         LA    R1,1(,R1)               4110 1001        *....*\n         LA    R2,1(,R2)               4120 2001        *....*\n         B     3636(,R12)              47F0 CE34        *.0..*\n         NOPR  R0                      0700             *..*\n         DC    X'000000000000'         000000000000     *......*\n         TR    1504(140,R11),3454(R12) DC8B B5E0 CD7E   *...\\.=*\n         LA    R1,1040(,R11)           4110 B410        *....*\n         LA    R1,5(,R1)               4110 1005        *....*\n         ST    R1,3804(,R12)           5010 CEDC        *&...*\n         LA    R1,1040(,R11)           4110 B410        *....*\n         LA    R2,732(,R11)            4120 B2DC        *....*\n         C     R1,3804(,R12)           5910 CEDC        *....*\n         BNL   3810(,R12)              47B0 CEE2        *...S*\n         MVC   3808(1,R12),0(R1)       D200 CEE0 1000   *K..\\..*\n         MVC   3809(1,R12),0(R1)       D200 CEE1 1000   *K.....*\n         NI    3808(R12),X'0F'         940F CEE0        *m..\\*\n         SR    R0,R0                   1B00             *..*\n         IC    R0,3809(,R12)           4300 CEE1        *....*\n         SRL   R0,4                    8800 0004        *h...*\n         STC   R0,3809(,R12)           4200 CEE1        *....*\n         MVC   0(1,R2),3809(R12)       D200 2000 CEE1   *K.....*\n         LA    R2,1(,R2)               4120 2001        *....*\n         MVC   0(1,R2),3808(R12)       D200 2000 CEE0   *K....\\*\n         LA    R1,1(,R1)               4110 1001        *....*\n         LA    R2,1(,R2)               4120 2001        *....*\n         B     3736(,R12)              47F0 CE98        *.0.q*\n         NOPR  R0                      0700             *..*\n         DC    X'000000000000'         000000000000     *......*\n         TR    732(10,R11),3454(R12)   DC09 B2DC CD7E   *.....=*\n         MVC   1084(256,R11),1364(R11) D2FF B43C B554   *K.....*\n         MVC   676(6,R11),726(R11)     D205 B2A4 B2D6   *K..u.O*\n         MVC   632(44,R11),682(R11)    D22B B278 B2AA   *K.....*\n         MVI   1665(R11),C' '          9240 B681        *k .a*\n         MVC   1666(69,R11),1665(R11)  D244 B682 B681   *K..b.a*\n         MVC   1665(30,R11),58(R10)    D21D B681 A03A   *K..a..*\n         B     1470(,R12)              47F0 C5BE        *.0E.*\n         NOPR  R0                      0700             *..*\n         BAL   R1,3872(,R12)           4510 CF20        *....*\n         DC    X'80'                   80               *.*\n         DC    AL3(A000F18)            000F18           *...*\nA000F18  DC    C'VRESET  '             E5D9C5E2C5E34040 *VRESET  *\n         L     R15,164(,R12)           58F0 C0A4        *.0{u*\n         BALR  R14,R15                 05EF             *..*\n         STH   R15,212(,R12)           40F0 C0D4        * 0{M*\n         CLI   841(R11),C'1'           95F1 B349        *n1..*\n         BNE   4046(,R12)              4770 CFCE        *....*\n         NOPR  R0                      0700             *..*\n         BAL   R1,3900(,R12)           4510 CF3C        *....*\n         DC    X'80'                   80               *.*\n         DC    AL3(A00134C)            00134C           *..<*\n         SVC   20      CLOSE           0A14             *..*\n         NOPR  R0                      0700             *..*\n         BAL   R1,3960(,R12)           4510 CF78        *....*\n         DC    X'80'                   80               *.*\n         DC    AL3(A000F48)            000F48           *...*\nA000F48  NR    R0,R2                   1402             *..*\n         LPR   R0,R0                   1000             *..*\n         DC    X'00000000'             00000000         *....*\n         DC    AL4(A000F5C)            00000F5C         *...**\n         DC    X'0000000000000000'     0000000000000000 *........*\nA000F5C  DC    X'00'                   00               *.*\n         DC    AL3(A000F64)            000F64           *...*\n         DC    X'80'                   80               *.*\n         DC    AL3(A000F72)            000F72           *...*\nA000F64  DC    X'000100010003'         000100010003     *......*\n         DC    C'OUT     '             D6E4E34040404040 *OUT     *\nA000F72  DC    X'00070000'             00070000         *....*\n         NOPR  R0                      0700             *..*\n         SVC   99      DYNALLOC        0A63             *..*\n         B     3970(,R12)              47F0 CF82        *.0.b*\n         NOPR  R0                      0700             *..*\n         DC    X'0000'                 0000             *..*\n         MVC   212(2,R12),3916(R12)    D201 C0D4 CF4C   *K.{M.<*\n         MVC   3968(2,R12),3918(R12)   D201 CF80 CF4E   *K....+*\n         MVC   751(45,R11),796(R11)    D22C B2EF B31C   *K.....*\n         LA    R1,751(,R11)            4110 B2EF        *....*\n         CLI   0(R1),C' '              9540 1000        *n ..*\n         BNE   4008(,R12)              4770 CFA8        *...y*\n         MVI   0(R1),C''''             927D 1000        *k'..*\n         B     4016(,R12)              47F0 CFB0        *.0..*\n         LA    R1,1(,R1)               4110 1001        *....*\n         B     3992(,R12)              47F0 CF98        *.0.q*\n         BAL   R1,4036(,R12)           4510 CFC4        *...D*\n         DC    AL4(A000FBC)            00000FBC         *....*\n         DC    X'80'                   80               *.*\n         DC    AL3(A0012EE)            0012EE           *...*\nA000FBC  DC    C'EDIT    '             C5C4C9E340404040 *EDIT    *\n         L     R15,164(,R12)           58F0 C0A4        *.0{u*\n         BALR  R14,R15                 05EF             *..*\n         STH   R15,212(,R12)           40F0 C0D4        * 0{M*\n         L     R13,4(R13)              58DD 0004        *....*\n         LM    R14,R12,12(R13)         98EC D00C        *q.}.*\n         OI    15(R13),X'01'           9601 D00F        *o.}.*\n         LA    R15,0                   41F0 0000        *.0..*\n         BR    R14                     07FE             *..*\n         ST    R14,628(,R11)           50E0 B274        *&\\..*\n         CLI   841(R11),C'1'           95F1 B349        *n1..*\n         BE    282(,R11)               4780 B11A        *....*\n         MVC   48(44,R11),796(R11)     D22B B030 B31C   *K.....*\n         NOPR  R0                      0700             *..*\n         BAL   R1,104(,R11)            4510 B068        *....*\n         DC    X'80'                   80               *.*\n         DC    AL3(A000FFC)            000FFC           *...*\nA000FFC  DC    X'1401080000000000'     1401080000000000 *........*\n         DC    AL4(A001010)            00001010         *....*\n         DC    X'0000000000000000'     0000000000000000 *........*\nA001010  DC    X'00'                   00               *.*\n         DC    AL3(A00101C)            00101C           *...*\n         DC    X'00'                   00               *.*\n         DC    AL3(A00102A)            00102A           *...*\n         DC    X'80'                   80               *.*\n         DC    AL3(A00105C)            00105C           *..**\nA00101C  DC    X'000100010003'         000100010003     *......*\n         DC    C'OUT     '             D6E4E34040404040 *OUT     *\nA00102A  DC    X'00020001002C'         00020001002C     *......*\n         DC    C'        '             4040404040404040 *        *\n         DC    C'        '             4040404040404040 *        *\n         DC    C'        '             4040404040404040 *        *\n         DC    C'        '             4040404040404040 *        *\n         DC    C'        '             4040404040404040 *        *\n         DC    C'    '                 40404040         *    *\nA00105C  DC    X'0004000100010800'     0004000100010800 *........*\n         DC    X'00000000'             00000000         *....*\n         SVC   99      DYNALLOC        0A63             *..*\n         MVC   212(2,R12),0(R11)       D201 C0D4 B000   *K.{M..*\n         MVC   3968(2,R12),2(R11)      D201 CF80 B002   *K.....*\n         CLC   212(2,R12),3736(R11)    D501 C0D4 BE98   *N.{M.q*\n         BE    266(,R11)               4780 B10A        *....*\n         LA    R1,212(,R12)            4110 C0D4        *..{M*\n         LA    R1,2(,R1)               4110 1002        *....*\n         ST    R1,216(,R11)            5010 B0D8        *&..Q*\n         LA    R1,212(,R12)            4110 C0D4        *..{M*\n         LA    R2,1644(,R11)           4120 B66C        *...%*\n         C     R1,216(,R11)            5910 B0D8        *...Q*\n         BNL   222(,R11)               47B0 B0DE        *....*\n         MVC   220(1,R11),0(R1)        D200 B0DC 1000   *K.....*\n         MVC   221(1,R11),0(R1)        D200 B0DD 1000   *K.....*\n         NI    220(R11),X'0F'          940F B0DC        *m...*\n         SR    R0,R0                   1B00             *..*\n         IC    R0,221(,R11)            4300 B0DD        *....*\n         SRL   R0,4                    8800 0004        *h...*\n         STC   R0,221(,R11)            4200 B0DD        *....*\n         MVC   0(1,R2),221(R11)        D200 2000 B0DD   *K.....*\n         LA    R2,1(,R2)               4120 2001        *....*\n         MVC   0(1,R2),220(R11)        D200 2000 B0DC   *K.....*\n         LA    R1,1(,R1)               4110 1001        *....*\n         LA    R2,1(,R2)               4120 2001        *....*\n         B     148(,R11)               47F0 B094        *.0.m*\n         NOPR  R0                      0700             *..*\n         DC    X'000000000000'         000000000000     *......*\n         TR    1644(4,R11),3454(R12)   DC03 B66C CD7E   *...%.=*\n         MVI   1665(R11),C' '          9240 B681        *k .a*\n         MVC   1666(69,R11),1665(R11)  D244 B682 B681   *K..b.a*\n         MVC   1665(15,R11),355(R10)   D20E B681 A163   *K..a~.*\n         MVC   1680(44,R11),796(R11)   D22B B690 B31C   *K.....*\n         MVC   1724(4,R11),3732(R11)   D203 B6BC BE94   *K....m*\n         MVC   1728(4,R11),1644(R11)   D203 B6C0 B66C   *K..{.%*\n         B     1470(,R12)              47F0 C5BE        *.0E.*\n         NOPR  R0                      0700             *..*\n         BAL   R1,276(,R11)            4510 B114        *....*\n         DC    X'8F'                   8F               *.*\n         DC    AL3(A00134C)            00134C           *..<*\n         SVC   19      OPEN            0A13             *..*\n         MVI   841(R11),C'1'           92F1 B349        *k1..*\n         CLI   842(R11),C'1'           95F1 B34A        *n1.\u00a2*\n         BE    444(,R11)               4780 B1BC        *....*\n         MVI   842(R11),C'1'           92F1 B34A        *k1.\u00a2*\n         MVC   3061(6,R11),726(R11)    D205 BBF5 B2D6   *K..5.O*\n         MVC   2598(8,R11),742(R11)    D207 BA26 B2E6   *K....W*\n         MVC   2686(8,R11),742(R11)    D207 BA7E B2E6   *K..=.W*\n         LA    R1,844(,R11)            4110 B34C        *...<*\n         LA    R0,2596(,R11)           4100 BA24        *....*\n         L     R15,48(,R1)             58F0 1030        *.0..*\n         BALR  R14,R15                 05EF             *..*\n         LA    R1,844(,R11)            4110 B34C        *...<*\n         LA    R0,2676(,R11)           4100 BA74        *....*\n         L     R15,48(,R1)             58F0 1030        *.0..*\n         BALR  R14,R15                 05EF             *..*\n         LA    R1,844(,R11)            4110 B34C        *...<*\n         LA    R0,2756(,R11)           4100 BAC4        *...D*\n         L     R15,48(,R1)             58F0 1030        *.0..*\n         BALR  R14,R15                 05EF             *..*\n         MVI   2836(R11),C' '          9240 BB14        *k ..*\n         MVC   2837(79,R11),2836(R11)  D24E BB15 BB14   *K+....*\n         MVC   2836(5,R11),370(R10)    D204 BB14 A172   *K...~.*\n         MVC   2841(44,R11),682(R11)   D22B BB19 B2AA   *K.....*\n         MVC   2885(9,R11),375(R10)    D208 BB45 A177   *K...~.*\n         MVC   2894(6,R11),726(R11)    D205 BB4E B2D6   *K..+.O*\n         LA    R1,844(,R11)            4110 B34C        *...<*\n         LA    R0,2836(,R11)           4100 BB14        *....*\n         L     R15,48(,R1)             58F0 1030        *.0..*\n         BALR  R14,R15                 05EF             *..*\n         LA    R1,844(,R11)            4110 B34C        *...<*\n         LA    R0,2916(,R11)           4100 BB64        *....*\n         L     R15,48(,R1)             58F0 1030        *.0..*\n         BALR  R14,R15                 05EF             *..*\n         LA    R1,844(,R11)            4110 B34C        *...<*\n         LA    R0,2996(,R11)           4100 BBB4        *....*\n         L     R15,48(,R1)             58F0 1030        *.0..*\n         BALR  R14,R15                 05EF             *..*\n         LA    R1,844(,R11)            4110 B34C        *...<*\n         LA    R0,3076(,R11)           4100 BC04        *....*\n         L     R15,48(,R1)             58F0 1030        *.0..*\n         BALR  R14,R15                 05EF             *..*\n         CLI   840(R11),C'1'           95F1 B348        *n1..*\n         BE    590(,R11)               4780 B24E        *...+*\n         MVI   2312(R11),C' '          9240 B908        *k ..*\n         MVC   2313(79,R11),2312(R11)  D24E B909 B908   *K+....*\n         LA    R1,1040(,R11)           4110 B410        *....*\n         LA    R1,5(,R1)               4110 1005        *....*\n         ST    R1,548(,R11)            5010 B224        *&...*\n         LA    R1,1040(,R11)           4110 B410        *....*\n         LA    R2,732(,R11)            4120 B2DC        *....*\n         C     R1,548(,R11)            5910 B224        *....*\n         BNL   554(,R11)               47B0 B22A        *....*\n         MVC   552(1,R11),0(R1)        D200 B228 1000   *K.....*\n         MVC   553(1,R11),0(R1)        D200 B229 1000   *K.....*\n         NI    552(R11),X'0F'          940F B228        *m...*\n         SR    R0,R0                   1B00             *..*\n         IC    R0,553(,R11)            4300 B229        *....*\n         SRL   R0,4                    8800 0004        *h...*\n         STC   R0,553(,R11)            4200 B229        *....*\n         MVC   0(1,R2),553(R11)        D200 2000 B229   *K.....*\n         LA    R2,1(,R2)               4120 2001        *....*\n         MVC   0(1,R2),552(R11)        D200 2000 B228   *K.....*\n         LA    R1,1(,R1)               4110 1001        *....*\n         LA    R2,1(,R2)               4120 2001        *....*\n         B     482(,R11)               47F0 B1E2        *.0.S*\n         DC    X'000000000000'         000000000000     *......*\n         TR    732(10,R11),3454(R12)   DC09 B2DC CD7E   *.....=*\n         MVC   2312(8,R11),3608(R11)   D207 B908 BE18   *K.....*\n         MVC   2320(10,R11),732(R11)   D209 B910 B2DC   *K.....*\n         MVI   840(R11),C'1'           92F1 B348        *k1..*\n         LA    R1,844(,R11)            4110 B34C        *...<*\n         LA    R0,2312(,R11)           4100 B908        *....*\n         L     R15,48(,R1)             58F0 1030        *.0..*\n         BALR  R14,R15                 05EF             *..*\n         LA    R1,844(,R11)            4110 B34C        *...<*\n         LA    R0,2392(,R11)           4100 B958        *....*\n         L     R15,48(,R1)             58F0 1030        *.0..*\n         BALR  R14,R15                 05EF             *..*\n         LA    R1,844(,R11)            4110 B34C        *...<*\n         LA    R0,2472(,R11)           4100 B9A8        *...y*\n         L     R15,48(,R1)             58F0 1030        *.0..*\n         BALR  R14,R15                 05EF             *..*\n         L     R14,628(,R11)           58E0 B274        *.\\..*\n         LA    R14,0(,R14)             41E0 E000        *.\\\\.*\n         BR    R14                     07FE             *..*\n         DC    X'00000000'             00000000         *....*\n         DC    C'        '             4040404040404040 *        *\n         DC    C'        '             4040404040404040 *        *\n         DC    C'        '             4040404040404040 *        *\n         DC    C'        '             4040404040404040 *        *\n         DC    C'        '             4040404040404040 *        *\n         DC    C'        '             4040404040404040 *        *\n         DC    C'  '                   4040             *  *\nA0012AA  DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'00000000'             00000000         *....*\nA0012D6  DC    X'000000000000'         000000000000     *......*\nA0012DC  DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000'                 0000             *..*\nA0012E6  DC    X'0000000000000000'     0000000000000000 *........*\nA0012EE  DC    C'''',X'00'             7D00             *'.*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'00000000'             00000000         *....*\nA00131C  DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'00000000'             00000000         *....*\n         DC    C'000',X'00'            F0F0F000         *000.*\nA00134C  DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000001'     0000000000000001 *........*\n         DC    X'0000'                 0000             *..*\n         DC    C' ',X'00'              4000             * .*\n         DC    X'0000000100000001'     0000000100000001 *........*\n         DC    X'00000000'             00000000         *....*\n         DC    C'OUT     '             D6E4E34040404040 *OUT     *\n         DC    X'0200005000000001'     0200005000000001 *...&....*\n         DC    X'0000000100000000'     0000000100000000 *........*\n         DC    X'0000000000000001'     0000000000000001 *........*\n         DC    X'0000000100000001'     0000000100000001 *........*\n         DC    X'0000000000000001'     0000000000000001 *........*\n         DC    X'0000000000000001'     0000000000000001 *........*\n         NOPR  R0                      0700             *..*\n         NOPR  R0                      0700             *..*\nA0013B0  DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000'                 0000             *..*\nA0013C2  DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000'                 0000             *..*\nA001554  DC    X'0000'                 0000             *..*\nA001556  DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'00000000'             00000000         *....*\nA001562  DC    X'00000000'             00000000         *....*\nA001566  DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'00000000'             00000000         *....*\nA001572  DC    X'0000'                 0000             *..*\nA001574  DC    X'00000000'\nA001578  DC    X'00000000'             0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'000000000000'         000000000000     *......*\nA001592  DC    X'000000000000'         000000000000     *......*\nA001598  DC    X'0000000000000000'     0000000000000000 *........*\nA0015A0  DC    X'0000000000000000'     0000000000000000 *........*\nA0015A8  DC    X'0000000000000000'     0000000000000000 *........*\nA0015B0  DC    X'0000'                 0000             *..*\nA0015B2  DC    X'00000000'\nA0015B6  DC    X'0000'                 000000000000     *......*\nA0015B8  DC    X'0000000000000000'     0000000000000000 *........*\nA0015C0  DC    X'000000000000'         000000000000     *......*\nA0015C6  DC    X'0000000000000000'     0000000000000000 *........*\nA0015CE  DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'00000000'             00000000         *....*\nA00160A  DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'000000000000'         000000000000     *......*\n         DC    C'        '             4040404040404040 *        *\nA001678  DC    C'VTOCR1  '             E5E3D6C3D9F14040 *VTOCR1  *\n         DC    C' '                    40               * *\nA001681  DC    C'** ENTE'              5C5C40C5D5E3C5   *** ENTE*\n         DC    C'R DATASE'             D940C4C1E3C1E2C5 *R DATASE*\n         DC    C'T NAME, '             E340D5C1D4C56B40 *T NAME, *\n         DC    C'OPTIONAL'             D6D7E3C9D6D5C1D3 *OPTIONAL*\n         DC    C'LY  THE '             D3E84040E3C8C540 *LY  THE *\n         DC    C'VOLSER *'             E5D6D3E2C5D9405C *VOLSER **\n         DC    C'*       '             5C40404040404040 **       *\n         DC    C'        '             4040404040404040 *        *\n         DC    C'      '               404040404040     *      *\n         DC    C' ',X'00'              4000             * .*\n         DC    C'A',X'00'              C100             *A.*\n         DC    X'0000'                 0000             *..*\n         DC    AL4(A0012AA)            000012AA         *....*\n         DC    AL4(A0012D6)            000012D6         *...O*\n         DC    AL4(A0013B0)            000013B0         *....*\n         DC    X'44000000'             44000000         *....*\n         DC    AL4(A0012AA)            000012AA         *....*\n         DC    X'00000000'             00000000         *....*\n         DC    AL4(A0016E8)            000016E8         *...Y*\nA0016E8  DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'00'                   00               *.*\nA0017F1  DC    C'(ZUSER)'              4DE9E4E2C5D95D   *(ZUSER)*\n         DC    C' '                    40               * *\nA0017F9  DC    C'(VTOCMS'              4DE5E3D6C3D4E2   *(VTOCMS*\n         DC    C'G) '                  C75D40           *G) *\nA001803  DC    C'(ZTEMPF'              4DE9E3C5D4D7C6   *(ZTEMPF*\n         DC    C') '                   5D40             *) *\nA00180C  DC    C'(VTOCRDS'             4DE5E3D6C3D9C4E2 *(VTOCRDS*\n         DC    C'N) '                  D55D40           *N) *\nA001817  DC    C'(VTOCVS'              4DE5E3D6C3E5E2   *(VTOCVS*\n         DC    C') '                   5D404DC6D4E3C9C4 *) (FMTID*\nA001820  DC    C'(FMTID'\n         DC    C') '                   5D40             *) *\nA001828  DC    C'(NOEPV) '             4DD5D6C5D7E55D40 *(NOEPV) *\nA001830  DC    C'(NOBDB) '             4DD5D6C2C4C25D40 *(NOBDB) *\nA001838  DC    C'(DSORG1 '             4DC4E2D6D9C7F140 *(DSORG1 *\n         DC    C'DSORG2 R'             C4E2D6D9C7F240D9 *DSORG2 R*\n         DC    C'ECFM OPT'             C5C3C6D440D6D7E3 *ECFM OPT*\n         DC    C'CD) '                 C3C45D40         *CD) *\nA001854  DC    C'(KEYL) '              4DD2C5E8D35D40   *(KEYL) *\nA00185B  DC    C'(DSIND)'              4DC4E2C9D5C45D   *(DSIND)*\n         DC    C' '                    40               * *\nA001863  DC    C'(VOLSQ)'              4DE5D6D3E2D85D   *(VOLSQ)*\n         DC    C' '                    40               * *\nA00186B  DC    C'(BLKL L'              4DC2D3D2D340D3   *(BLKL L*\n         DC    C'RECL) '               D9C5C3D35D40     *RECL) *\nA001878  DC    C'(RKP) '               4DD9D2D75D40     *(RKP) *\nA00187E  DC    C'(TRBAL) '             4DE3D9C2C1D35D40 *(TRBAL) *\nA001886  DC    C'(CREDT E'             4DC3D9C5C4E340C5 *(CREDT E*\n         DC    C'XPDT) '               E7D7C4E35D40     *XPDT) *\nA001894  DC    C'(REFD) '              4DD9C5C6C45D40   *(REFD) *\nA00189B  DC    C'(SMSRES'              4DE2D4E2D9C5E2   *(SMSRES*\n         DC    C') '\nA0018A4  DC    C'(LSTAR'               5D404DD3E2E3C1D9 *) (LSTAR*\n         DC    C') '                   5D40             *) *\nA0018AC  DC    C'(SCALO) '             4DE2C3C1D3D65D40 *(SCALO) *\nA0018B4  DC    C'(PTRDS) '             4DD7E3D9C4E25D40 *(PTRDS) *\nA0018BC  DC    C'(CCHHDSC'             4DC3C3C8C8C4E2C3 *(CCHHDSC*\n         DC    C'B) '                  C25D40           *B) *\nA0018C7  DC    C'(DSSN) '              4DC4E2E2D55D40   *(DSSN) *\nA0018CE  DC    C'(SYSCD) '             4DE2E8E2C3C45D40 *(SYSCD) *\nA0018D6  DC    C'(SYSCD2)'             4DE2E8E2C3C4F25D *(SYSCD2)*\n         DC    C' '                    40               * *\nA0018DF  DC    C'(EXT1 E'              4DC5E7E3F140C5   *(EXT1 E*\n         DC    C'XT2 EXT3'             E7E3F240C5E7E3F3 *XT2 EXT3*\n         DC    C') '                   5D40             *) *\nA0018F0  DC    C'CHAR    '             C3C8C1D940404040 *CHAR    *\nA0018F8  DC    C'SHARED  '             E2C8C1D9C5C44040 *SHARED  *\nA001900  DC    C'PROFILE '             D7D9D6C6C9D3C540 *PROFILE *\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\n         DC    X'0000000000000000'     0000000000000000 *........*\nA0019F8  DC    X'0000002C'             0000002C         *....*\nA0019FC  DC    X'00000002'             00000002         *....*\nA001A00  DC    X'00000004'             00000004         *....*\nA001A04  DC    X'00000006'             00000006         *....*\nA001A08  DC    X'00000008'             00000008         *....*\nA001A0C  DC    X'0000000A'             0000000A         *....*\nA001A10  DC    X'0000000D'             0000000D         *....*\nA001A14  DC    X'0000000C'             0000000C         *....*\nA001A18  DC    X'00000014'             00000014         *....*\nA001A1C  DC    X'0000001A'             0000001A         *....*\nA001A20  DC    X'00000046'             00000046         *....*\n         DC    C'//XXXXXX'             6161E7E7E7E7E7E7 *//XXXXXX*\n         DC    C'XX JOB ('             E7E740D1D6C2404D *XX JOB (*\n         DC    C'VTOCZAP)'             E5E3D6C3E9C1D75D *VTOCZAP)*\n         DC    C',ZAP,MSG'             6BE9C1D76BD4E2C7 *,ZAP,MSG*\n         DC    C'CLASS=X,'             C3D3C1E2E27EE76B *CLASS=X,*\n         DC    C'CLASS=A,'             C3D3C1E2E27EE36B *CLASS=T,*\n         DC    C'        '             4040404040404040 *        *\n         DC    C'        '             4040404040404040 *        *\n         DC    C'        '             4040404040404040 *        *\n         DC    C'        '             4040404040404040 *        *\n         DC    C'// NOTIF'             616140D5D6E3C9C6 *// NOTIF*\n         DC    C'Y=      '             E87E404040404040 *Y=      *\n         DC    C'        '             4040404040404040 *        *\n         DC    C'        '             4040404040404040 *        *\n         DC    C'        '             4040404040404040 *        *\n         DC    C'        '             4040404040404040 *        *\n         DC    C'        '             4040404040404040 *        *\n         DC    C'        '             4040404040404040 *        *\n         DC    C'        '             4040404040404040 *        *\n         DC    C'        '             4040404040404040 *        *\n         DC    C'//ZAPVTO'             6161E9C1D7E5E3D6 *//ZAPVTO*\n         DC    C'C  EXEC '             C34040C5E7C5C340 *C  EXEC *\n         DC    C' PGM=AMA'             40D7C7D47EC1D4C1 * PGM=AMA*\n         DC    C'SPZAP,RE'             E2D7E9C1D76BD9C5 *SPZAP,RE*\n         DC    C'GION=2M '             C7C9D6D57EF2D440 *GION=2M *\n         DC    C'        '             4040404040404040 *        *\n         DC    C'        '             4040404040404040 *        *\n         DC    C'        '             4040404040404040 *        *\n         DC    C'        '             4040404040404040 *        *\n         DC    C'        '             4040404040404040 *        *\n         DC    C'//*     '             61615C4040404040 *//*     *\n         DC    C'        '             4040404040404040 *        *\n         DC    C'        '             4040404040404040 *        *\n         DC    C'        '             4040404040404040 *        *\n         DC    C'        '             4040404040404040 *        *\n         DC    C'        '             4040404040404040 *        *\n         DC    C'        '             4040404040404040 *        *\n         DC    C'        '             4040404040404040 *        *\n         DC    C'        '             4040404040404040 *        *\n         DC    C'        '             4040404040404040 *        *\n         DC    C'//SYSPRI'             6161E2E8E2D7D9C9 *//SYSPRI*\n         DC    C'NT DD   '             D5E340C4C4404040 *NT DD   *\n         DC    C' SYSOUT='             40E2E8E2D6E4E37E * SYSOUT=*\n         DC    C'*       '             5C40404040404040 **       *\n         DC    C'        '             4040404040404040 *        *\n         DC    C'        '             4040404040404040 *        *\n         DC    C'        '             4040404040404040 *        *\n         DC    C'        '             4040404040404040 *        *\n         DC    C'        '             4040404040404040 *        *\n         DC    C'        '             4040404040404040 *        *\n         DC    C'//SYSLIB'             6161E2E8E2D3C9C2 *//SYSLIB*\n         DC    C'   DD   '             404040C4C4404040 *   DD   *\n         DC    C' DISP=SH'             40C4C9E2D77EE2C8 * DISP=SH*\n         DC    C'R,DSN=FO'             D96BC4E2D57EC6D6 *R,DSN=FO*\n         DC    C'RMAT4.DS'             D9D4C1E3F44BC4E2 *RMAT4.DS*\n         DC    C'CB,UNIT='             C3C26BE4D5C9E37E *CB,UNIT=*\n         DC    C'SYSALLDA'             E2E8E2C1D3D3C4C1 *SYSALLDA*\n         DC    C',VOL=SER'             6BE5D6D37EE2C5D9 *,VOL=SER*\n         DC    C'=       '             7E40404040404040 *=       *\n         DC    C'        '             4040404040404040 *        *\n         DC    C'//SYSIN '             6161E2E8E2C9D540 *//SYSIN *\n         DC    C'   DD   '             404040C4C4404040 *   DD   *\n         DC    C' *      '             405C404040404040 * *      *\n         DC    C'        '             4040404040404040 *        *\n         DC    C'        '             4040404040404040 *        *\n         DC    C'        '             4040404040404040 *        *\n         DC    C'        '             4040404040404040 *        *\n         DC    C'        '             4040404040404040 *        *\n         DC    C'        '             4040404040404040 *        *\n         DC    C'        '             4040404040404040 *        *\n         DC    X'00000000'             00000000         *....*\n         DC    C' VER 2C '             40E5C5D940F2C340 * VER 2C *\n         DC    C' REP 2C '             40D9C5D740F2C340 * REP 2C *\n         DC    C' REPLACE'             40D9C5D7D3C1C3C5 * REPLACE*\n         DC    C' FORMAT '             40C6D6D9D4C1E340 * FORMAT *\n         DC    C'ID **DAN'             C9C4405C5CC4C1D5 *ID **DAN*\n         DC    C'GEROUS**'             C7C5D9D6E4E25C5C *GEROUS***\n         DC    C' VER 2D '             40E5C5D940F2C440 * VER 2D *\n         DC    C' REP 2D '             40D9C5D740F2C440 * REP 2D *\n         DC    C' VER 33 '             40E5C5D940F3F340 * VER 33 *\n         DC    C' REP 33 '             40D9C5D740F3F340 * REP 33 *\n         DC    C' VER 35 '             40E5C5D940F3F540 * VER 35 *\n         DC    C' REP 35 '             40D9C5D740F3F540 * REP 35 *\n         DC    C' VER 38 '             40E5C5D940F3F840 * VER 38 *\n         DC    C' REP 38 '             40D9C5D740F3F840 * REP 38 *\n         DC    C' REPLACE'             40D9C5D7D3C1C3C5 * REPLACE*\n         DC    C' EXPIRAT'             40C5E7D7C9D9C1E3 * EXPIRAT*\n         DC    C'ION DATE'             C9D6D540C4C1E3C5 *ION DATE*\n         DC    C' VER 3B '             40E5C5D940F3C240 * VER 3B *\n         DC    C' REP 3B '             40D9C5D740F3C240 * REP 3B *\n         DC    C' VER 3C '             40E5C5D940F3C340 * VER 3C *\n         DC    C' REP 3C '             40D9C5D740F3C340 * REP 3C *\n         DC    C' VER 3E '             40E5C5D940F3C540 * VER 3E *\n         DC    C' REP 3E '             40D9C5D740F3C540 * REP 3E *\n         DC    C' VER 4B '             40E5C5D940F4C240 * VER 4B *\n         DC    C' REP 4B '             40D9C5D740F4C240 * REP 4B *\n         DC    C' VER 52 '             40E5C5D940F5F240 * VER 52 *\n         DC    C' REP 52 '             40D9C5D740F5F240 * REP 52 *\n         DC    C' VER 53 '             40E5C5D940F5F340 * VER 53 *\n         DC    C' REP 53 '             40D9C5D740F5F340 * REP 53 *\n         DC    C' VER 54 '             40E5C5D940F5F440 * VER 54 *\n         DC    C' REP 54 '             40D9C5D740F5F440 * REP 54 *\n         DC    C' VER 55 '             40E5C5D940F5F540 * VER 55 *\n         DC    C' REP 55 '             40D9C5D740F5F540 * REP 55 *\n         DC    C' VER 56 '             40E5C5D940F5F640 * VER 56 *\n         DC    C' REP 56 '             40D9C5D740F5F640 * REP 56 *\n         DC    C' VER 58 '             40E5C5D940F5F840 * VER 58 *\n         DC    C' REP 58 '             40D9C5D740F5F840 * REP 58 *\n         DC    C' VER 5B '             40E5C5D940F5C240 * VER 5B *\n         DC    C' REP 5B '             40D9C5D740F5C240 * REP 5B *\n         DC    C' VER 5D '             40E5C5D940F5C440 * VER 5D *\n         DC    C' REP 5D '             40D9C5D740F5C440 * REP 5D *\n         DC    C' VER 5E '             40E5C5D940F5C540 * VER 5E *\n         DC    C' REP 5E '             40D9C5D740F5C540 * REP 5E *\n         DC    C' VER 62 '             40E5C5D940F6F240 * VER 62 *\n         DC    C' REP 62 '             40D9C5D740F6F240 * REP 62 *\n         DC    C' VER 65 '             40E5C5D940F6F540 * VER 65 *\n         DC    C' REP 65 '             40D9C5D740F6F540 * REP 65 *\n         DC    C' VER 69 '             40E5C5D940F6F940 * VER 69 *\n         DC    C' REP 69 '             40D9C5D740F6F940 * REP 69 *\n         DC    C' VER 73 '             40E5C5D940F7F340 * VER 73 *\n         DC    C' REP 73 '             40D9C5D740F7F340 * REP 73 *\n         DC    C' VER 7D '             40E5C5D940F7C440 * VER 7D *\n         DC    C' REP 7D '             40D9C5D740F7C440 * REP 7D *\n         DC    C' UNKNOWN'             40E4D5D2D5D6E6D5 * UNKNOWN*\n         DC    C' OR NOT '             40D6D940D5D6E340 * OR NOT *\n         DC    C'MOUNTED*'             D4D6E4D5E3C5C45C *MOUNTED**\n         DC    C'  CCHHR '             4040C3C3C8C8D940 *  CCHHR *\n         DC    C' REPLACE'             40D9C5D7D3C1C3C5 * REPLACE*\n         DC    C' OPTION '             40D6D7E3C9D6D540 * OPTION *\n         DC    C'CODE REP'             C3D6C4C540D9C5D7 *CODE REP*\n         DC    C'LACE EXT'             D3C1C3C540C5E7E3 *LACE EXT*\n         DC    C'ENT1 DES'             C5D5E3F140C4C5E2 *ENT1 DES*\n         DC    C'CRIPTION'             C3D9C9D7E3C9D6D5 *CRIPTION*\n         DC    C' REPLACE'             40D9C5D7D3C1C3C5 * REPLACE*\n         DC    C' EXTENT2'             40C5E7E3C5D5E3F2 * EXTENT2*\n         DC    C' DESCRIP'             40C4C5E2C3D9C9D7 * DESCRIP*\n         DC    C'TION REP'             E3C9D6D540D9C5D7 *TION REP*\n         DC    C'LACE EXT'             D3C1C3C540C5E7E3 *LACE EXT*\n         DC    C'ENT3 DES'             C5D5E3F340C4C5E2 *ENT3 DES*\n         DC    C'CRIPTION'             C3D9C9D7E3C9D6D5 *CRIPTION*\n         DC    X'0000000400000008'     0000000400000008 *........*\n         DC    X'0000000C'             0000000C         *....*\n         DC    C' RC='                 40D9C37E         * RC=*\n         DC    X'0000'                 0000             *..*\n         DC    C' REPLACE'             40D9C5D7D3C1C3C5 * REPLACE*\n         DC    C' DATASET'             40C4C1E3C1E2C5E3 * DATASET*\n         DC    C' SERIAL '             40E2C5D9C9C1D340 * SERIAL *\n         DC    C'NUMBER R'             D5E4D4C2C5D940D9 *NUMBER R*\n         DC    C'EPLACE C'             C5D7D3C1C3C540C3 *EPLACE C*\n         DC    C'REATION '             D9C5C1E3C9D6D540 *REATION *\n         DC    C'DATE REP'             C4C1E3C540D9C5D7 *DATE REP*\n         DC    C'LACE NUM'             D3C1C3C540D5E4D4 *LACE NUM*\n         DC    C'BER OF E'             C2C5D940D6C640C5 *BER OF E*\n         DC    C'XTENTS R'             E7E3C5D5E3E240D9 *XTENTS R*\n         DC    C'EPLACE N'             C5D7D3C1C3C540D5 *EPLACE N*\n         DC    C'B OF BYT'             C240D6C640C2E8E3 *B OF BYT*\n         DC    C'ES IN LA'             C5E240C9D540D3C1 *ES IN LA*\n         DC    C'ST DIR B'             E2E340C4C9D940C2 *ST DIR B*\n         DC    C'LOCK REP'             D3D6C3D240D9C5D7 *LOCK REP*\n         DC    C'LACE SYS'             D3C1C3C540E2E8E2 *LACE SYS*\n         DC    C'T CODE R'             E340C3D6C4C540D9 *T CODE R*\n         DC    C'EPLACE 1'             C5D7D3C1C3C540F1 *EPLACE 1*\n         DC    C'ST BYTE '             E2E340C2E8E3C540 *ST BYTE *\n         DC    C'OF DSORG'             D6C640C4E2D6D9C7 *OF DSORG*\n         DC    C' REPLACE'             40D9C5D7D3C1C3C5 * REPLACE*\n         DC    C' 2ND BYT'             40F2D5C440C2E8E3 * 2ND BYT*\n         DC    C'E OF DSO'             C540D6C640C4E2D6 *E OF DSO*\n         DC    C'RG REPLA'             D9C740D9C5D7D3C1 *RG REPLA*\n         DC    C'CE RECFM'             C3C540D9C5C3C6D4 *CE RECFM*\n         DC    C' REPLACE'             40D9C5D7D3C1C3C5 * REPLACE*\n         DC    C' RECORD '             40D9C5C3D6D9C440 * RECORD *\n         DC    C'LENGTH R'             D3C5D5C7E3C840D9 *LENGTH R*\n         DC    C'EPLACE R'             C5D7D3C1C3C540D9 *EPLACE R*\n         DC    C'ELATIVE '             C5D3C1E3C9E5C540 *ELATIVE *\n         DC    C'KEY POSI'             D2C5E840D7D6E2C9 *KEY POSI*\n         DC    C'TION REP'             E3C9D6D540D9C5D7 *TION REP*\n         DC    C'LACE DAT'             D3C1C3C540C4C1E3 *LACE DAT*\n         DC    C'ASET IND'             C1E2C5E340C9D5C4 *ASET IND*\n         DC    C'ICATOR R'             C9C3C1E3D6D940D9 *ICATOR R*\n         DC    C'EPLACE L'             C5D7D3C1C3C540D3 *EPLACE L*\n         DC    C'AST USED'             C1E2E340E4E2C5C4 *AST USED*\n         DC    C' TRK + B'             40E3D9D2404E40C2 * TRK + B*\n         DC    C'LOCK????'             D3D6C3D26F6F6F6F *LOCK????*\n         DC    C'??** VOL'             6F6F5C5C40E5D6D3 *??** VOL*\n         DC    C'UME ** F'             E4D4C5405C5C40C6 *UME ** F*\n         DC    C'ILE WAS '             C9D3C540E6C1E240 *ILE WAS *\n         DC    C'NOT FOUN'             D5D6E340C6D6E4D5 *NOT FOUN*\n         DC    C'D ON THE'             C440D6D540E3C8C5 *D ON THE*\n         DC    C' VOLUME '             40E5D6D3E4D4C540 * VOLUME *\n         DC    C'**** I/O'             5C5C5C5C40C961D6 ***** I/O*\n         DC    C' ERROR O'             40C5D9D9D6D940D6 * ERROR O*\n         DC    C'N THE VT'             D540E3C8C540E5E3 *N THE VT*\n         DC    C'OC OR TY'             D6C340D6D940E3E8 *OC OR TY*\n         DC    C'PE 1 DSC'             D7C540F140C4E2C3 *PE 1 DSC*\n         DC    C'B IS INV'             C240C9E240C9D5E5 *B IS INV*\n         DC    C'ALID  **'             C1D3C9C440405C5C *ALID  ***\n         DC    C'** ENTER'             5C5C40C5D5E3C5D9 *** ENTER*\n         DC    C' YOUR MO'             40E8D6E4D940D4D6 * YOUR MO*\n         DC    C'DIFICATI'             C4C9C6C9C3C1E3C9 *DIFICATI*\n         DC    C'ONS ** R'             D6D5E2405C5C40D9 *ONS ** R*\n         DC    C'EPLACE V'             C5D7D3C1C3C540E5 *EPLACE V*\n         DC    C'OL. SEQ.'             D6D34B40E2C5D84B *OL. SEQ.*\n         DC    C' NUMBER '             40D5E4D4C2C5D940 * NUMBER *\n         DC    C'REPLACE '             D9C5D7D3C1C3C540 *REPLACE *\n         DC    C'LAST REF'             D3C1E2E340D9C5C6 *LAST REF*\n         DC    C'ERENDED '             C5D9C5D5C4C5C440 *ERENDED *\n         DC    C'DATE REP'             C4C1E3C540D9C5D7 *DATE REP*\n         DC    C'LACE BLO'             D3C1C3C540C2D3D6 *LACE BLO*\n         DC    C'CK SIZE '             C3D240E2C9E9C540 *CK SIZE *\n         DC    C'REPLACE '             D9C5D7D3C1C3C540 *REPLACE *\n         DC    C'SECONDAR'             E2C5C3D6D5C4C1D9 *SECONDAR*\n         DC    C'Y ALLOCA'             E840C1D3D3D6C3C1 *Y ALLOCA*\n         DC    C'TION REP'             E3C9D6D540D9C5D7 *TION REP*\n         DC    C'LACE BYT'             D3C1C3C540C2E8E3 *LACE BYT*\n         DC    C'ES ON LA'             C5E240D6D540D3C1 *ES ON LA*\n         DC    C'ST TRK U'             E2E340E3D9D240E4 *ST TRK U*\n         DC    C'SED** YO'             E2C5C45C5C40E8D6 *SED** YO*\n         DC    C'UR DATA '             E4D940C4C1E3C140 *UR DATA *\n         DC    C'IS SAVED'             C9E240E2C1E5C5C4 *IS SAVED*\n         DC    C', ENTER '             6B40C5D5E3C5D940 *, ENTER *\n         DC    C'NEW DSN/'             D5C5E640C4E2D561 *NEW DSN/*\n         DC    C'VOLSER O'             E5D6D3E2C5D940D6 *VOLSER O*\n         DC    C'R PF3 TO'             D940D7C6F340E3D6 *R PF3 TO*\n         DC    C' END****'             40C5D5C45C5C5C5C * END*****\n         DC    C' FILE IS'             40C6C9D3C540C9E2 * FILE IS*\n         DC    C' NOT ACA'             40D5D6E340C1C3C1 * NOT ACA*\n         DC    C'TALOGED,'             E3C1D3D6C7C5C46B *TALOGED,*\n         DC    C' SPECIFY'             40E2D7C5C3C9C6E8 * SPECIFY*\n         DC    C' VOLSER '             40E5D6D3E2C5D940 * VOLSER *\n         DC    C' **** MA'             405C5C5C5C40D4C1 * **** MA*\n         DC    C'CRO OBTA'             C3D9D640D6C2E3C1 *CRO OBTA*\n         DC    C'IN FAILE'             C9D540C6C1C9D3C5 *IN FAILE*\n         DC    C'D, RC= *'             C46B40D9C37E405C *D, RC= **\n         DC    C'*** ALLO'             5C5C5C40C1D3D3D6 **** ALLO*\n         DC    C'C ERROR '             C340C5D9D9D6D940 *C ERROR *\n         DC    C'//** , V'             61615C5C406B40E5 *//** , V*\n         DC    C'OLSER='               D6D3E2C5D97E     *OLSER=*\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "VTOCR1": {"ttr": 12296, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x991_\\x00\\x991_\\x11P\\x00;\\x00;\\x00\\x00\\xe3\\xc8\\xc9\\xc5\\xd9\\xd9\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-11-11T00:00:00", "modifydate": "1999-11-11T11:50:00", "lines": 59, "newlines": 59, "modlines": 0, "user": "THIERRY"}, "text": ")ATTR DEFAULT(\u00a2\u00ac_)\n \u00a2 TYPE(TEXT) INTENS(HIGH) PAD(' ') JUST(LEFT)\n \u00ac TYPE(TEXT) INTENS(LOW)  PAD(' ') JUST(LEFT)\n)BODY\n\u00ac=====Semi-interactive\u00a2VTOC Zap\u00ac (generates a JCL) ====== &ZJDATE &ZTIME &ZSYSID\n\u00ac ===>_ZCMD\n\u00a2             &VTOCMSG\n\u00ac  DSN ====> _VTOCRDSN                                       \u00acVOLSER => _VTOCVS\u00ac\n\u00ac +2C _Z \u00ac           :Format DSCB identifier   CCHHR of that DSCB : &CCHHDSCB\n\u00ac +2D _DSSN        \u00ac :Data set serial number\n\u00ac +33 _Z   \u00ac         :Volume sequence number\n\u00ac +35 _CREDT \u00ac       :Creation date           +38 _EXPDT \u00ac  :Expiration date\n\u00ac +3B _Z \u00ac           :Extents on volume       +3C _Z \u00ac   :Bytes in last dir blk\n\u00ac +3E _SYSCD                     \u00ac   :S y s t e m    c o d e:  &SYSCD2\n\u00ac +4B _REFD  \u00ac       :Date last referenced\n\u00ac +4E  &SMSRES :SMS flags: X'80'=SMS file X'40'=uncatal  X'20'=SDB  X'08'=PDSE\n\u00ac +52 _Z \u00ac      :Dsorg 1st byte: X'80'=ISAM X'40'=PS X'20'=DA X'02'=PO X'01'=UN\n\u00ac +53 _Z \u00ac      :Dsorg 2nd byte: X'08'=VSAM\n\u00ac +54 _Z \u00ac      :Recfm: X'C0'=U  X'80'=F  X'40'=V  X'10'=B  X'08'=S  X'04'=A\n\u00ac +55 _Z \u00ac      :Option code\n\u00ac +56 _BLKL\u00ac    :Blocksize                    +5A _Z   \u00ac  :Record length\n\u00ac +5B _Z   \u00ac    :Relative key position\n\u00ac +5D _Z \u00ac      :Indicator: X'80'=last volume         X'40'=RACF-defined\n\u00ac      X'10'=PSWD required  X'04'=PSWD req to write   X'02'=opened not for input\n\u00ac +5E _SCALO   \u00ac:Secondary alloc\n\u00ac +69 _Z                   \u00ac  :First extent description         C C H H-C C H H\n\u00ac +73 _Z                   \u00ac  :Second and Third extent +7D _EXT3\n\u00ac          C C H H-C C H H          Lstar : &LSTAR     Trbal : &TRBAL\n)INIT\n .CURSOR    =   VTOCRDSN\n .ZVARS     =   '(FMTID,VOLSQ,NOEPV,NOBDB,DSORG1,DSORG2,RECFM,OPTCD, +\n   LRECL,RKP,DSIND,EXT1,EXT2)'\n)PROC\n     VER    ( &VTOCRDSN , NONBLANK)\n/*   VER    ( &VTOCVS , NONBLANK)\n/*   VER    ( &VTOCRDSN , DSNAME  )\n     VER    ( &VTOCVS , NAME      )\n     VER    ( &FMTIF    , HEX     )\n     VER    ( &DSSN     , HEX     )\n     VER    ( &VOLSQ    , HEX     )\n     VER    ( &CREDT    , HEX     )\n     VER    ( &EXPDT    , HEX     )\n     VER    ( &NOEPV    , HEX     )\n     VER    ( &NOBDB    , HEX     )\n     VER    ( &SYSCD    , HEX     )\n     VER    ( &REFD     , HEX     )\n     VER    ( &DSORG    , HEX     )\n     VER    ( &DSORG    , HEX     )\n     VER    ( &RECFM    , HEX     )\n     VER    ( &OPTCD    , HEX     )\n     VER    ( &BLKL     , HEX     )\n     VER    ( &LRECL    , HEX     )\n     VER    ( &RKP      , HEX     )\n     VER    ( &DSIND    , HEX     )\n     VER    ( &SCALO    , HEX     )\n     VER    ( &EXT1     , HEX     )\n     VER    ( &EXT2     , HEX     )\n     VER    ( &EXT3     , HEX     )\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "VTOCZAP": {"ttr": 12298, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x991_\\x00\\x991_\\x11P\\x00\\xa9\\x00\\xa9\\x00\\x00\\xe3\\xc8\\xc9\\xc5\\xd9\\xd9\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-11-11T00:00:00", "modifydate": "1999-11-11T11:50:00", "lines": 169, "newlines": 169, "modlines": 0, "user": "THIERRY"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "WEAKPASS": {"ttr": 12545, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x991_\\x00\\x991_\\x11P\\x00\\xe2\\x00\\xe2\\x00\\x00\\xe3\\xc8\\xc9\\xc5\\xd9\\xd9\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-11-11T00:00:00", "modifydate": "1999-11-11T11:50:00", "lines": 226, "newlines": 226, "modlines": 0, "user": "THIERRY"}, "text": "* DISPLAYING RACF USERIDS WITH WEAK D.E.S. PASSWORD\n*\n* XEPHON - RACF UPDATE (NOV 1995)\n*\n* LINK-EDIT WITH AC=1 IN AN APF-AUTHORIZED LIBRARY\n* THIS PROGRAMS DISPLAYS ALL USERIDS WITH A WEAK PASSWORD, 3 TYPES :\n*   TYPE 1 : PASSWORD=GROUP  (DEFAULT PASSWORD AFTER ADDUSER COMMAND)\n*   TYPE 2 : PASSWORD=USERID\n*   TYPE 3 : PASSWORD= A WORD FROM A SPECIFIC LIST\n* //SYSIN    : LIST OF USERS\n* //SYSPRINT : OUTPUT FROM WEAKPASS\nWEAKPASS CSECT\nR0       EQU 0\nR1       EQU 1\nR2       EQU 2\nR3       EQU 3\nR4       EQU 4\nR5       EQU 5\nR6       EQU 6\nR7       EQU 7\nR8       EQU 8\nR9       EQU 9\nR10      EQU 10\nR11      EQU 11\nR12      EQU 12\nR13      EQU 13\nR14      EQU 14\nR15      EQU 15\n         STM   R14,R12,12(R13)      SAVE CALLER'S REGISTERS\n         LR    R12,R15              LOAD BASE REGISTER\n         USING WEAKPASS,R12         ESTABLISH ADDRESSABILITY\n         ST    R13,SAVE+4           BACK CHAIN\n         LA    R15,SAVE             NEW SAVE AREA\n         ST    R15,8(,R13)          FORWARD CHAIN\n         LR    R13,R15              LOAD PROGRAM'S SAVE AREA ADDRESS\n         OPEN  (SYSIN,(INPUT))\n         OPEN  (SYSPRINT,(OUTPUT))\n         PUT   SYSPRINT,TITLE\nLOOP     DS    0H\n         GET   SYSIN,ZONEIN         READ A RECORD TO OBTAIN AN USERID\n* INITIALIZE DATA\n         MVC   USERID,ZONEIN\n         MVC   GROUP,=CL8'????????' NO GROUP BY DEFAULT\n         MVC   PGMR,=CL20'????????????????????'     NO NAME BY DEFAULT\n         MVI   FLAG2,X'00'          BY DEFAULT, NOT SPECIAL\n         MVI   FLAG3,X'00'          BY DEFAULT, NOT OPERATIONS\n         MVI   FLAG4,X'00'          BY DEFAULT, NOT REVOKED\n* GET ENCRYPTED PASSWORD\n         MODESET MODE=SUP,KEY=ZERO\n         RACXTRT TYPE=EXTRACT,ENTITY=USERID,FIELDS=LISTXTRT,RELEASE=1.8\n         LTR   R15,R15\n         BZ    GOOD1\n* ERROR, GET RETURN CODE AND REASON CODE\n         ST    R15,WORD\n         ST    R0,REG0\n         MODESET MODE=PROB,KEY=NZERO\n         MVC   OUTMSG,MSG2          ERROR MESSAGE\n         LH    R1,WORD+2            LOAD BINARY ZONE\n         CVD   R1,DBLEWORD          CONVERT TO DECIMAL\n         MVC   WORK6,MASK1          LOAD MASK FOR ED INSTRUCTION\n         ED    WORK6,PACKED3        CONVERSION FROM PACKED TO DECIMAL\n         MVC   OUTMSG+19(6),WORK6   RETURN CODE\n         LH    R1,REG0+2            LOAD BINARY ZONE\n         CVD   R1,DBLEWORD          CONVERT TO DECIMAL\n         MVC   WORK6,MASK1          LOAD MASK FOR ED INSTRUCTION\n         ED    WORK6,PACKED3        CONVERSION FROM PACKED TO DECIMAL\n         MVC   OUTMSG+34(6),WORK6   REASON CODE\n         B     PRINTALL\n* STORE ENCRYPTED PASSWORD AND OTHER RACF INFORMATION\nGOOD1    DS    0H\n         XR    R3,R3\n         ICM   R3,B'0011',4(R1)     OFFSET TO PASSWORD IN BUFFER\n         MVC   GROUP,32(R1)\n         AR    R1,R3\n         LA    R1,4(0,R1)           SKIP LENGTH FIELD\n         MVC   PASSW,0(R1)          PASSWORD\n         LA    R1,12(0,R1)          SKIP PASSWORD + LENGTH FIELD\n         MVC   PGMR,0(R1)           PROGRAMMER'S NAME\n         LA    R1,24(0,R1)          SKIP PROG NAME + LENGTH FIELD\n         MVC   FLAG2,0(R1)          SPECIAL FLAG\n         LA    R1,5(0,R1)           SKIP FLAG + LENGTH FIELD\n         MVC   FLAG3,0(R1)          OPERATIONS FLAG\n         LA    R1,5(0,R1)           SKIP FLAG + LENGTH FIELD\n         MVC   FLAG4,0(R1)          REVOKE FLAG\n         MODESET MODE=PROB,KEY=NZERO\n* IS PASSWORD EQUAL TO USERID ?\n         MVC   PASS3,USERID         USERID\n         MVI   TYPE,C'2'            USERID\n         BAL   R10,TRIAL\n         CLC   RC,=F'0'             WEAK PASSWORD ?\n         BNE   ITSWEAK              YES\n* IS PASSWORD EQUAL TO GROUP ?\n         MVC   PASS3,GROUP          GROUP\n         MVI   TYPE,C'1'            GROUP\n         BAL   R10,TRIAL\n         CLC   RC,=F'0'             WEAK PASSWORD ?\n         BNE   ITSWEAK              YES\n* IS PASSWORD EQUAL TO AN ITEM FROM OUR LIST ?\n         LA    R8,LIST\n         MVI   TYPE,C'3'            LIST\nLOOPLIST CLI   0(R8),X'FF'          END OF LIST ?\n         BE    LISTEND\n         MVC   PASS3,0(R8)          TRIAL PASSWORD\n         BAL   R10,TRIAL\n         CLC   RC,=F'0'             WEAK PASSWORD ?\n         BNE   ITSWEAK              YES\n         LA    R8,8(0,R8)           NEXT ITEM\n         B     LOOPLIST\nLISTEND  DS    0H\n* NO ERROR FOR THIS USER\n         MVI   OUTMSG,C' '          BLANK ERROR MESSAGE\n         MVC   OUTMSG+1(L'OUTMSG-1),OUTMSG\n         B     PRINTALL\n* WEAK PASSWORD\nITSWEAK  DS    0H\n         MVC   OUTMSG,MSG1          ERROR MESSAGE\n         MVC   OUTMSG+31(1),TYPE    TYPE OF WEAK PASSWORD\n* PRINT ALL INFORMATION\nPRINTALL MVC   OUTUSER,USERID       USERID\n         MVC   OUTGROUP,GROUP       GROUP\n         MVC   OUTPGMR,PGMR         PROGRAMMER'S NAME\n         MVI   OUTFLAG2,C' '        DEFAULT FLAG\n         MVI   OUTFLAG3,C' '        DEFAULT FLAG\n         MVI   OUTFLAG4,C' '        DEFAULT FLAG\n         CLI   FLAG2,X'00'          SPECIAL FLAG\n         BE    NOTSPEC              NOT SPECIAL\n         MVI   OUTFLAG2,C'S'        SPECIAL FLAG\nNOTSPEC  CLI   FLAG3,X'00'          OPER FLAG\n         BE    NOTOPER              NOT OPERATIONS\n         MVI   OUTFLAG3,C'O'        OPER FLAG\nNOTOPER  CLI   FLAG4,X'00'          REVOKE FLAG\n         BE    NOTREVOK             NOT REVOKED\n         MVI   OUTFLAG4,C'R'        REVOKED FLAG\nNOTREVOK DS    0H\n         PUT   SYSPRINT,ZONEOUT\n         B     LOOP\nENDREAD  CLOSE (SYSIN)\n         CLOSE (SYSPRINT)\n         L     R13,4(R13)\n         RETURN  (14,12),T,RC=0\n* SUBROUTINE FOR ENCRYPTING TRIAL PASSWORD ; RETURNS RC=0 IF NO MATCH\nTRIAL    DS    0H\n         XC    RC,RC                BY DEFAULT, NO PROBLEM\n         MVI   ZONE,X'08'           8 BYTES TO ENCRYPT\n         MODESET MODE=SUP,KEY=ZERO\n         RACXTRT TYPE=ENCRYPT,ENTITY=USERID,ENCRYPT=(ZONE,DES)\n         LTR   R15,R15\n         BZ    GOOD2\n* ERROR, GET RETURN CODE\n         ST    R15,WORD\n         MODESET MODE=PROB,KEY=NZERO\n         MVC   OUTMSG,MSG3          ERROR MESSAGE\n         LH    R1,WORD+2            LOAD BINARY ZONE\n         CVD   R1,DBLEWORD          CONVERT TO DECIMAL\n         MVC   WORK6,MASK1          LOAD MASK FOR ED INSTRUCTION\n         ED    WORK6,PACKED3        CONVERSION FROM PACKED TO DECIMAL\n         MVC   OUTMSG+19(6),WORK6   RETURN CODE\n         B     PRINTALL\nGOOD2    MODESET MODE=PROB,KEY=NZERO\n* VERIFYING ENCRYPTED PASSWORDS : IF IDENTICAL, IT IS A WEAK PASSWORD\n         CLC   PASS3,PASSW\n         BNE   ENDTRIAL\n         MVC   RC,=F'8'             ** WEAK PASSWORD **\nENDTRIAL BR    R10\n* HARD-CODED LIST OF WEAK PASSWORDS\nLIST     DS    0H\n         DC    CL8'SYSTEME'\n         DC    CL8'BANQUE'\n         DC    CL8'CREDIT'\n         DC    CL8'BLH'\n         DC    X'FF'                END OF LIST FLAG\nSAVE     DS    18F\nMASK1    DC    X'402020202121'      MASK FOR PACKED LENGTH 3\nSYSIN    DCB   DDNAME=SYSIN,MACRF=GM,EODAD=ENDREAD,DSORG=PS\nSYSPRINT DCB   DDNAME=SYSPRINT,MACRF=PM,DSORG=PS,LRECL=133,RECFM=F\nZONEIN   DS    CL80\nTITLE    DC    CL133' -USERID- -GROUP-- -PROGRAMMER''S NAME-- SOR -----*\n               ------------ E R R O R    M E S S A G E ---------------'\nZONEOUT  DS   0CL133\n         DC    C' '\nOUTUSER  DS    CL8\n         DC    C' '\nOUTGROUP DS    CL8\n         DC    C' '\nOUTPGMR  DS    CL20\n         DC    C' '\nOUTFLAG2 DS    CL1\nOUTFLAG3 DS    CL1\nOUTFLAG4 DS    CL1\n         DC    C' '\nOUTMSG   DS    CL60\n         DC    CL(ZONEOUT+L'ZONEOUT-*)' '\nMSG1     DC    CL60' ** WEAK D.E.S. PASSWORD (TYPE X) **'\nMSG2     DC    CL60' EXTRACT ERROR, RC=NNNNNN, REASON=NNNNNN (DEC)'\nMSG3     DC    CL60' ENCRYPT ERROR, RC=NNNNNN (DEC)'\nTYPE     DC    C' '\n*\nGROUP    DC    CL8' '               RACF GROUP\nUSERID   DC    CL8' '\nREG0     DC    F'0'\nPGMR     DC    CL20' '              PROGRAMMER'S NAME\nPASSW    DC    CL8' '               ENCRYPTED USER'S PASSWORD\nFLAG2    DS    CL1                  SPECIAL FLAG\nFLAG3    DS    CL1                  OPERATIONS FLAG\nFLAG4    DS    CL1                  REVOKE FLAG\nWORD     DC    F'0'\n* FIELD LIST FOR RACXTRT EXTRACT\nLISTXTRT DC    F'5'                 5 FIELDS :\n         DC    CL8'PASSWORD'        ENCRYPTED PASSWORD\n         DC    CL8'PGMRNAME'        PROGRAMMER'S NAME\n         DC    CL8'FLAG2'           \"SPECIAL\" FLAG\n         DC    CL8'FLAG3'           \"OPERATIONS\" FLAG\n         DC    CL8'FLAG4'           \"REVOKE\" FLAG\nZONE     DS    0CL9\n         DC    CL1' '\nPASS3    DC    CL8' '\nRC       DS    F\n* WORK ZONES\nDBLEWORD DS    D                    DOUBLE WORD FOR INSTRUCTION CVD\n         ORG   DBLEWORD+5\nPACKED3  DS    PL3\n         ORG   DBLEWORD+3\nPACKED5  DS    PL5\nWORK6    DS    CL6\n         LTORG\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "WTOPUT": {"ttr": 12550, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x991_\\x00\\x991_\\x11P\\x00I\\x00I\\x00\\x00\\xe3\\xc8\\xc9\\xc5\\xd9\\xd9\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-11-11T00:00:00", "modifydate": "1999-11-11T11:50:00", "lines": 73, "newlines": 73, "modlines": 0, "user": "THIERRY"}, "text": "         MACRO\n.*\n&NLA     WTOPUT &DESC=\n&NLA     DS    0H\n.*   DISPLAY ON CONSOLE\n         LCLA  &NBR             NOMBRE D'OPERANDES\n         LCLA  &N               INDEX OPERANDES\n         LCLA  &LEN             LONGUEUR ZONE\n         LCLA  &A               ADRESS FOR MVC\n         LCLA  &TEMP\n         LCLC  &TEMPA\n         LCLC  &NAMZN\n&NAMZN   SETC  'WPPLCZNE'       ZONE ECRITURE MESSAGE\n         AIF   (T'&NAMZN NE 'U').DEFZN\n         B     TPTZ&SYSNDX\n&NAMZN   DC    CL120' '\nTPTZ&SYSNDX  DS  0H\n.DEFZN   ANOP\n&NBR     SETA  N'&SYSLIST\n.PROC    ANOP\n         MVI   &NAMZN,C' '          RESET ZONE TO SPACES\n         MVC   &NAMZN+1(L'&NAMZN-1),&NAMZN    RESET ZONE TO SPACES\n&N       SETA  0\n         AIF   (&NBR EQ 0).FIN   MOVE A BLANC SI PAS DE PARAMETRES\n.LOOP    ANOP                   BOUCLE DE TRAITEMENT 1 PARAMETRE\n&N       SETA  &N+1\n         AIF   (&N GT &NBR).FIN\n&TEMPA   SETC  '&SYSLIST(&N))'(1,1)\n         AIF   ('&TEMPA' EQ '''').QUOTE\n&TEMPA   SETC  '&SYSLIST(&N)'\n.* 31-10-95 : SORTIR SI PARAMETRE VIDE                      31-10-95\n         AIF   ('&TEMPA' EQ '').FIN\n.*\n.*   MOVE AVEC ZONE FROM SYMBOLIQUE\n.*\n&LEN     SETA   L'&SYSLIST(&N)\n         AIF   (&LEN GT 255).ERR3\n&TEMP    SETA  &A+&LEN\n         AIF   (&TEMP GT 120).ERR4\n         MVC   &NAMZN+&A.(&LEN),&SYSLIST(&N)\n&A       SETA  &TEMP\n         AGO   .LOOP\n.*\n.*   MOVE AVEC ZONE FROM LITTERALE ENTRE APOSTROPHES\n.*\n.QUOTE   ANOP                      EXPRESSION ENTRE APOSTROPHES\n&TEMPA   SETC  '&SYSLIST(&N))'(K'&SYSLIST(&N),1)\n         AIF   ('&TEMPA' NE '''').ERR2\n&TEMPA   SETC '=C'.'&SYSLIST(&N)'\n&LEN     SETA  K'&SYSLIST(&N)-2\n&TEMP    SETA  &A+&LEN\n         AIF   (&TEMP GT 120).ERR4\n         MVC   &NAMZN+&A.(&LEN),&TEMPA\n&A       SETA  &TEMP\n         AGO   .LOOP\n.*\n.ERR2    ANOP\n         MNOTE 8,' ** END QUOTE MISSING'\n         MEXIT\n.ERR3    ANOP\n         MNOTE 8,' ** &SYSLIST(&N) IS TOO LONG, CANNOT BE USED'\n         MEXIT\n.ERR4    ANOP\n         MNOTE 4,' ** EXPRESSION EXCEEDS 120 BYTES, WILL BE TRONCATED'\n         MEXIT\n.FIN     ANOP\n         MVC  WTOY&SYSNDX+8(L'&NAMZN),&NAMZN\nWTOY&SYSNDX WTO '                                                      *\n                                                                       *\n                         ',DESC=&DESC       ,ROUTCDE=11\n         MEXIT\n.EXIT    ANOP\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "XTOD": {"ttr": 12553, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x991_\\x00\\x991_\\x11P\\x00+\\x00+\\x00\\x00\\xe3\\xc8\\xc9\\xc5\\xd9\\xd9\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-11-11T00:00:00", "modifydate": "1999-11-11T11:50:00", "lines": 43, "newlines": 43, "modlines": 0, "user": "THIERRY"}, "text": "        MACRO\n        XTOD   &TOD,&TIME\n.*              CL4   CL5\n.* TRANSFORMER UN TOD CONTENANT DES 100EMES DE SECONDES EN HEURE\n.* EN ENTREE  &TOD  (CL4)\n.* EN SORTIE ON DONNE &TIME (CL5) SOUS FORME HH:MN\n.*\n         AIF (L'&TOD LT 4).ERR1\n         AIF (L'&TIME LT 5).ERR2\n         B  XTO4&SYSNDX\nXTO3&SYSNDX DC CL6' '\nXTO1&SYSNDX DC H'0'\nXTO2&SYSNDX DC H'0'\nXTO4&SYSNDX DS 0H\n         XR  0,0\n         ICM 1,15,&TOD\n         D   0,=F'360000'  (R0,R1)/100/3600\n         STH 1,XTO1&SYSNDX HEURE EN BINAIRE\n*\n         XR  0,0\n         ICM 1,15,&TOD\n         D   0,=F'6000'  R1 = &TOD EN MINUTES\n         STH 1,XTO2&SYSNDX\n*\n         LH  1,XTO1&SYSNDX\n         XR  0,0\n         M   0,=F'60'    HEURE * 60 = MINUTES\n         LH  0,XTO2&SYSNDX\n         SR  R0,R1        -> MINUTES\n         STH R0,XTO2&SYSNDX\n.*\n         EXTEND XTO2&SYSNDX,XTO3&SYSNDX\n         MVC &TIME+3(2),XTO3&SYSNDX+4\n.*\n         EXTEND XTO1&SYSNDX,XTO3&SYSNDX\n         MVC &TIME.(2),XTO3&SYSNDX+4\n         MVI &TIME+2,C':'    HH:MN\n         MEXIT\n.ERR1    MNOTE 8,'** &TOD MUST BE AT LEAST 4 BYTES LONG **'\n         MEXIT\n.ERR2    MNOTE 8,'** &TIME MUST BE AT LEAST 5 BYTES LONG **'\n         MEXIT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT432/FILE432.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT432", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}