{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012301000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 1469650, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 38, "INMDSNAM": "CBT.V500.FILE532.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 1469650, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 1469650, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE532.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x1a\\x08'", "DS1TRBAL": "b'_\\xa0'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x03\\xed\\x00\\x0e\\x03\\xef\\x00\\n\\x00\\x1b'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x010?\\x01\\x010?\\t1\\x00\\x0c\\x00\\x0c\\x00\\x00\\xe2\\xc8\\xc9\\xd7\\xc4\\xc1\\xe3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-10-30T00:00:00", "modifydate": "2001-10-30T09:31:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "SHIPDAT"}, "text": "REGULAR CBT TAPE - VERSION 439    FILE:  532\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT439.FILE532\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    8000    PO\n\n   PDS117I 196 MEMBERS COUNTED; CUMULATIVE SIZE IS 12,763 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   10/30/01    09:31:46    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$$NOTES": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00W\\x01\\x010?\\x01\\x010?\\t0\\x00(\\x00(\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-10-30T00:00:00", "modifydate": "2001-10-30T09:30:57", "lines": 40, "newlines": 40, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject: [Fwd: Re: CBT Tape Submission]\nDate: Mon, 15 Oct 2001 11:43:13 -0400\nFrom: CHARLES.S.HOTTEL@customs.treas.gov\nTo: sbgolob@attglobal.net\nCC: chottel@cpcug.org\n\nSam,\n\nRPF stands for Roscoe Programming Facility.  An Rpf is\nanalogous to a Rexx exec and a Tso/Ispf edit macro.\nFrom the manual:\n\nRoscoe programming Facility is a high-level, interactive\nstructured programming language that supports full\narithmetic capability, built-in functions and a variety\nof different types of variables.  It supports all\nCA-Roscoe commands and facilities. etc.\n\nMost of what I sent to you is for compiling and working\nwith Cobol/CICS/DatacomDB programs and for searching\nRoscoe libraries, Librarian libraries and PDS libraries.\n\nI would suggest something like: \"File # 532 Roscoe\nProgramming Facility programs\".\n\nIf this is not what you need just let me know.  Thanks.\n\nCharles S Hottel\n301-809-4201\n----- Forwarded by CHARLES S HOTTEL/NE/USCS on 10/15/01 11:26 AM -----\n Charles Hottel\n <chottel@cpcug.org>\n To:     Charles Hottel US Customs\n         <Charles.S.Hottel@customs.treas.gov>\n 10/14/01 11:35 PM\n\n--\nCharlie Hottel\nchottel@cpcug.org\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$CBTDOC": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00\\x00\\x01\\x01&\\x1f\\x01\\x01(/\\x11\\x17\\x05\\xa2\\x05r\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "2001-09-18T00:00:00", "modifydate": "2001-10-09T11:17:00", "lines": 1442, "newlines": 1394, "modlines": 0, "user": "EGHF3PY"}, "text": "*---------------------------------------------------------------------*\n*     AB                    RPF ATTACH BOTTOM                         *\n*---------------------------------------------------------------------*\n\nAB is used to look at the bottom of the AWS.  Does not work correctly in\nsplit screen mode, but gets you within one page forward of the bottom.\n\n*---------------------------------------------------------------------*\n*     ACC                   RPF ACC ACS COMPILE RPF                   *\n*---------------------------------------------------------------------*\n\nBACKGROUND\n\nThis RPF was written by Hugh Mealy and generates JCL to do compiles\nand assemblies.  It can provide a standard way to do this resulting\nin less maintenance when procedures, datasets, and compiler options\nchange. It is panel driven for ease of use.\n\nThis RPF is tailored to an environment where the source code is kept\nin Librarian libraries and the DBMS is Datacomm/DB.\n\nUSING THE ACC RPF (HELP AVAILABLE FROM FIRST SCREEN VIA PF1)\n\nThe first time that you invoke ACC use PF2 to set up your defaults.\n\n This is the entry point screen for the ACC (Compiles) RPF. ACC enables\n a user to generate the JCL necessary to compile most programs commonly\n found at xxxxxxx, namely CICS assembler maps, CICS COBOL programs, and\n batch COBOL programs with and without DataCom.\n\n If you read this help screen carefully, you should have little trouble\n with the remaining screens and concepts.\n\n After entering ACC, fill in the fields found on this screen as follows:\n\n OPTION:  Enter \"A\" to assemble a CICS map\n                \"B\" to compile a batch COBOL program\n                \"C\" to compile a CICS COBOL program.\n          Enter \"\\ \"  to enable two additional options\n                \"P\" to assemble a CICS ASSEMBLER\n                \"T\" to assemble a CICS TABLE.\n\n MEMBER:  Enter the name of the member to be compiled, with or without\n          the version number.  The version number will be automatically\n          filled in when only one version exists on the source library.\n          When more than one version exists, the user will be presented\n          with a selection list.\n          Entry of an \"L\" here invokes list processing in which ACC will\n          compile/assemble all programs in a list.\n\n REPLACE: Entry of a \"Y\" here indicates to ACC that the user wishes to\n          replace the selected Library member with the content of one\n          of his Roscoe members.\n\n SUBMIT:  Entry of a \"Y\" here indicates to ACC that the JCL is to be\n          submitted immediately, without showing any more screens, if\n          there are no problems with the information entered.\n\n This screen can be bypassed entirely by making an entry on the Roscoe\n command line of the following form:\n  ACC option member <REP> <SUB>    (<...> indicates an optional entry)\n       where option is the entry for OPTION above (A, B, or C)\n             member is the entry for MEMBER above\n             REP sets the REPLACE option to \"Y\"       (REP and SUB are\n             SUB sets the SUBMIT option to \"Y\"         interchangeable)\n\n Example: ACC C CPP185 REP SUB\n     will submit CPP185vv for CICS COBOL compile, replacing the module\n     on Librarian from a Roscoe member, submitting the job without\n     presenting a screen if there are no problems.\n\nINSTALLATION AND MAINTANENCE\n\nThis RPF is tailored to an environment where the source code is kept\nin Librarian libraries and the DBMS is Datacomm/DB. To use it in your\nenvironment you need to adapt it to use your JCL procedures etc.\nAs delivered it uses \"PFX\" as the Roscoe prefix of the Roscoe library\nwhere the RPF members are located. You will need to change this\nto the actual Roscoe prefix used.  The SCANACC RPF or the SCANROS RPF\ncan help you find all members containing the string \"PFX.\".\n\nAlso look for members where job names, job accounting information,\ndataset names, etc. need to be changed.  Scanning for strings with\n\"HLQ.\", \"JOBNAME\", \"ACCTINFO\", and \"Your Company Name Here\" should help.\n\nBelow is a hierarchy chart showing the relationships (what calls what)\nbetween key components (those most often changed or which need to be\nadapted to your environment). Member CCHLPSHO is called from many\nplaces but I have shown it only once for simplicity.  Also CCHLPSHO\nrefers to some members that were never written. This does not cause\na problem but generates a \"help is not available\" message.\n\nacc\n  $cc\n    ccsesset\n    $$cclist\n    ccxxxpan -> acc option panel\n    $cca     -> assemble map (see below)\n    $ccb     -> batch compile (see below)\n    $ccc     -> CICS compile (see below)\n    $ccp     -> assemble CICS program (see below)\n    $cct     -> assemble CICS table (see below)\n    ccdefset\n      ccsesset\n      $$chdefs -> default options\n      ccdefpan -> options panel\n      cchlpsho\n        ccalxhlp -> missing\n        ccaxxhlp\n        ccblxhlp -> missing\n        ccbxxhlp\n        ccclxhlp -> missing\n        cccxxhlp\n        ccdefhlp\n        ccmemhlp -> missing\n        ccroshlp -> missing\n        ccurthlp -> missing\n        ccxxxhlp\n\nBelow is a hierarchy/structure chart for the five major options.  I\nam presenting this information in several pieces to make it less\ncomplex than a single chart.\n\n$cca - assemble a map\n  ccsesset\n  ccaxxpan\n  ccdefset\n  ccdefget\n  ccjobJCL\n  ccacxJCL -> copy CICS symbolic map\n  ccasxJCL -> -INC symbolic map\n  ccmemsel\n  ccrossel\n\n$ccb - batch cobol compile\n  ccsesset\n  ccdefget\n  ccurtsel\n  ccbxxpan\n  ccdefset\n  ccjobJCL\n  ccbdiJCL -> JCL proc batch Intertest with database\n  ccbxiJCL -> JCL proc batch Intertest no database\n  ccbdxJCL -> JCL proc batch with database\n  ccbxxJCL -> JCL proc batch no database\n  ccmemsel\n  ccrossel\n\n$ccc - CICS compile\n  ccsesset\n  cccxxpan\n  ccdefget\n  ccjobJCL\n  cccxiJCL -> with Intertest\n  cccxxJCL -> no Intertest\n  ccmemsel\n  ccrossel\n\n$ccp - assemble CICS program\n  ccpxxpan\n  ccdefset\n  ccdefget\n  ccjobJCL\n  ccpxxJCL -> JCL proc\n  ccmemsel\n  ccrossel\n\n$cct - aassemble CICS table\n  ccsesset\n  cctxxpan\n  ccdefset\n  ccdefget\n  ccjobJCL\n  cctxxJCL -> JCL proc\n  ccmemsel\n  ccrossel\n\nI hope this is enough to get you started.  If it is any consolation\nI had to figure this all out on my own.  Some of the other RPFs in\nthis collection helped me to do this. This is the most complex RPF in\nthe collection.  Feel free to email me at home if you have any\nquestions: chottel@cpcug.org\n\nONE FINAL NOTE.\n\nWe decided to use ACC during our Y2K project because we had many new\ncontractors and Hugh Mealy had already written it for another division.\nI simply adapted it for my own division. During the time of the Y2K\nproject we placed all Y2K compliant source code in a new Librarian\nlibrary which eventually became our new development library. Until\nthe Y2K conversion was completed we still had to use the original\nLibrarian library to make fixes to programs in production.  I developed\nthe PFIX RPF to provide a standardized way of doing this.  PFIX is\nactually ACC with a different interface.  Once the Y2K project ended\nthe original Librarian source code library was no longer used so PFIX\nand ACC now are basically the same.  I have included PFIX so that\nyou can see how to adapt ACC to another environment and for those users\nthat work in multiple environments. One example would be a situation\nwhere there are both short term development libraries and long term\ndevelopment libraries.\n\n*---------------------------------------------------------------------*\n*     ACCEXP                RPF ACC ACC EXPORT                        *\n*---------------------------------------------------------------------*\n\nExport the ACC members to a partition dataset.  Used to backup before\nmaking any changes.  That way if your changes break the RPF you can\nrestore a working version.  Using this depends upon the extent of the\nchanges that you are making and your judgement and confidence in making\nthose changes.\n\n*---------------------------------------------------------------------*\n*     ACSDEST               DEST USED BY ACC RPF                      *\n*---------------------------------------------------------------------*\n\nOptional JES2 destination information to control job separator page\nprinted information.  This JCL is copied into the compile JCL.\n\n*---------------------------------------------------------------------*\n*     AF                    RPF ATTACH FILE                           *\n*---------------------------------------------------------------------*\n\nUse \"AF n\" to display file n of your already attached job.\n\nAJ (Attach Job), DJ (Detach Job), SDJ (Set Display Job),\nSJ (Status Job), AF (Attach File), NF (Next File),\nPAF (Print All Files), and PF (Print File) all work together to\nmake viewing and manipulating job output easier.\n\n*---------------------------------------------------------------------*\n*     AJ                    RPF ATTACH JOB                            *\n*---------------------------------------------------------------------*\n\nAttach a job by job number or job name.\n\nAJ (Attach Job), DJ (Detach Job), SDJ (Set Display Job),\nSJ (Status Job), AF (Attach File), NF (Next File),\nPAF (Print All Files), and PF (Print File) all work together to\nmake viewing and manipulating job output easier.\n\n*---------------------------------------------------------------------*\n*     AL                    RPF ATTACH LINKAGE                        *\n*---------------------------------------------------------------------*\n\nDisplay Cobol source in active work space starting at \"LINKAGE SECTION\".\n\n*---------------------------------------------------------------------*\n*     ALL                   RPF ALTERNATE LIBRARY LIST                *\n*---------------------------------------------------------------------*\n\nGet a list of Roscoe members in an alternate library into the active\nwork space using the prefix for that library: \"ALL PFX\".\n\n*---------------------------------------------------------------------*\n*     AP                    RPF ATTACH PROCEDURE DIVISION             *\n*---------------------------------------------------------------------*\n\nDisplay Cobol source in active work space starting at\n\"PROCEDURE DIVISION\".\n\n*---------------------------------------------------------------------*\n*     ASMTAB                RPF SET TABS FOR ASSEMBLER PROGRAM        *\n*---------------------------------------------------------------------*\n\nSet up tab positions for an assembler program.\n\n*---------------------------------------------------------------------*\n*     AW                    RPF ATTACH WORKING                        *\n*---------------------------------------------------------------------*\n\nDisplay Cobol source in active work space starting at\n\"WORKING-STORAGE SECTION\".\n\n\n*---------------------------------------------------------------------*\n*     BCOB2C                RPF BATCH COBOL2 COMPILE ONLY             *\n*---------------------------------------------------------------------*\n\nBCOB2C program-name\n\nA simple batch Cobol compile only (i.e. no link).  This is an alternative\nto one function of ACC.  Up side is it is much simpler than ACC.  Down\nside is that you need one of these for each function of ACC and when\ndatasets or procedures change, all of them must be updated.  Of course\nif each user uses this method then all of them must update all of their\nRPFs with the needed change.  If everyone uses ACC then only ACC needs\nto receive the required change.\n\nThis RPF illustrates a technique that I use to keep the RPF and it's\nrelated data together.  I use line 1 to 99 for the RPF itself and all\nother lines contain the data that it uses.  This way everything is kept\nin one Roscoe member. Do NOT RENUMBER the member.  If you do you will\nbreak it.\n\n*---------------------------------------------------------------------*\n*     BCOB2CL               RPF BATCH COBOL2 COMPILE AND LINK         *\n*---------------------------------------------------------------------*\n\nBCOB2CL program-name\n\nA simple batch Cobol compile and link edit.  This is an alternative\nto one function of ACC.  Up side is it is much simpler than ACC.  Down\nside is that you need one of these for each function of ACC and when\ndatasets or procedures change, all of them must be updated.  Of course\nif each user uses this method then all of them must update all of their\nRPFs with the needed change.  If everyone uses ACC then only ACC needs\nto receive the required change.\n\nThis RPF illustrates a technique that I use to keep the RPF and it's\nrelated data together.  I use line 1 to 99 for the RPF itself and all\nother lines contain the data that it uses.  This way everything is kept\nin one Roscoe member. Do NOT RENUMBER the member.  If you do you will\nbreak it.\n\n*---------------------------------------------------------------------*\n*     BCOB2ROS              RPF COB2 COMPILE FROM ROSCOE              *\n*---------------------------------------------------------------------*\n\nBCOB2ROS Roscoe-member-name\n\nA simple batch Cobol compile from Roscoe instead of from Librarian.\n\nThis RPF illustrates a technique that I use to keep the RPF and it's\nrelated data together.  I use line 1 to 99 for the RPF itself and all\nother lines contain the data that it uses.  This way everything is kept\nin one Roscoe member. Do NOT RENUMBER the member.  If you do you will\nbreak it.\n\n*---------------------------------------------------------------------*\n*     BDAY                  RPF BIRTHDAYS                             *\n*---------------------------------------------------------------------*\nMy signon RPF executes this  and it notifies me when any birthdays etc.\nare going to occur within 10 days or less.  The list of birthdays etc.\nare kept in PFX.BDAYS one per line: \"mm/dd/yy name\". It does not display\nindividual lines but instead if any one line falls within the 10 day\nperiod then it displays the entire Roscoe member.\n\n*---------------------------------------------------------------------*\n*     BFILL16               RPF BLANK FILL COLS 1 - 6                 *\n*---------------------------------------------------------------------*\n\nRemove line number from columns 1 to 6 of a Cobol program that is in\nthe active work space.\n\n*---------------------------------------------------------------------*\n*     BLANKFIL              RPF BLANK FILL 73-255                     *\n*---------------------------------------------------------------------*\n\nFill active work space columns 72 to 255 with spaces.  I use this to\nremove Librarian line numbers.\n\n*---------------------------------------------------------------------*\n*     BLKTAPE               RPF BLOCK SIZE TAPE                       *\n*---------------------------------------------------------------------*\n\nGiven a record size it suggests some legal block sizes. Useful before\nadvent of system determined block size feature.\n\n*---------------------------------------------------------------------*\n*     BLK3390               RPF BLOCK SIZE 3390                       *\n*---------------------------------------------------------------------*\n\nGiven a record size it suggests some legal block sizes. Useful before\nadvent of system determined block size feature.\n\n*---------------------------------------------------------------------*\n*     BMI                   RPF BODY MASS INDEX                       *\n*     BMI1                  RPF BODY MASS INDEX                       *\n*---------------------------------------------------------------------*\n\nCompute your body mass index. \"BMI height weight\".\n\nThere are 2 versions because each one is based upon a different\nnewspaper article with a slightly different formula.\n\n*---------------------------------------------------------------------*\n*     CALS                  RPF                                       *\n*---------------------------------------------------------------------*\n\n\"CALS weight\" will display the minimum number of calories needed to\nmaintain that weight (for a man).\n\n*---------------------------------------------------------------------*\n*     CICSCOB               RPF CICS COBOL2 COMPILE ONLY WITH INTERTEST\n*---------------------------------------------------------------------*\n\nCICSCOB program-name\n\nA simple CICS Cobol compile with Intertest.\n\nThis RPF illustrates a technique that I use to keep the RPF and it's\nrelated data together.  I use line 1 to 99 for the RPF itself and all\nother lines contain the data that it uses.  This way everything is kept\nin one Roscoe member. Do NOT RENUMBER the member.  If you do you will\nbreak it.\n\n*---------------------------------------------------------------------*\n*     CICSCOBL              RPF CICS COBOL2 COMPILE LINK              *\n*---------------------------------------------------------------------*\n\nCICSCOBL program-name\n\nA simple CICS Cobol compile and link edit with Intertest.\n\nThis RPF illustrates a technique that I use to keep the RPF and it's\nrelated data together.  I use line 1 to 99 for the RPF itself and all\nother lines contain the data that it uses.  This way everything is kept\nin one Roscoe member. Do NOT RENUMBER the member.  If you do you will\nbreak it.\n\n*---------------------------------------------------------------------*\n*     CICSCOMP              RPF CICS COMPILE AND LINK                 *\n*---------------------------------------------------------------------*\n\nCICSCOMP program-name\n\nA simple CICS Cobol compile and link edit with Intertest. With this\nJCL setup you do NOT need to move your copy members to the long term\ndevelopment environment.\n\nThis RPF illustrates a technique that I use to keep the RPF and it's\nrelated data together.  I use line 1 to 99 for the RPF itself and all\nother lines contain the data that it uses.  This way everything is kept\nin one Roscoe member. Do NOT RENUMBER the member.  If you do you will\nbreak it.\n\n*---------------------------------------------------------------------*\n*     CICSMAP               RPF ASSEMBLE CICS MAP                     *\n*---------------------------------------------------------------------*\n\nCICSMAP map-name\n\nA simple assembly of a CICS map.\n\nThis RPF illustrates a technique that I use to keep the RPF and it's\nrelated data together.  I use line 1 to 99 for the RPF itself and all\nother lines contain the data that it uses.  This way everything is kept\nin one Roscoe member. Do NOT RENUMBER the member.  If you do you will\nbreak it.\n\n*---------------------------------------------------------------------*\n*     CLEANROS              RPF DELETE MISCELLANEOUS FILES            *\n*---------------------------------------------------------------------*\n\nDeletes some commonly created temporary files.  My signon RPF sets up\nthe PA2 key to run this RPF and then signoff.\n\n*---------------------------------------------------------------------*\n*     DATE                  RPF JULIAN DATE FROM GREGORIAN            *\n*---------------------------------------------------------------------*\n\nDATE 'MM/DD/YY' will display the corresponding Julian date.\n\n*---------------------------------------------------------------------*\n*     DCOB2C                RPF DB COBOL2 COMPILE                     *\n*---------------------------------------------------------------------*\n\nDCOB2C program-name\n\nA Cobol compile with Datacom/DB.\n\nThis RPF illustrates a technique that I use to keep the RPF and it's\nrelated data together.  I use line 1 to 99 for the RPF itself and all\nother lines contain the data that it uses.  This way everything is kept\nin one Roscoe member. Do NOT RENUMBER the member.  If you do you will\nbreak it.\n\n*---------------------------------------------------------------------*\n*     DCOB2CL               RPF DB COBOL2 COMPILE LINK                *\n*---------------------------------------------------------------------*\n\nDCOB2CL program-name\n\nA Cobol compile with Datacom/DB.\n\nThis RPF illustrates a technique that I use to keep the RPF and it's\nrelated data together.  I use line 1 to 99 for the RPF itself and all\nother lines contain the data that it uses.  This way everything is kept\nin one Roscoe member. Do NOT RENUMBER the member.  If you do you will\nbreak it.\n\n*---------------------------------------------------------------------*\n*     DD                    RPF DETACH DSN                            *\n*---------------------------------------------------------------------*\n\nDETACH DSN to exit DSN mode.\n\n*---------------------------------------------------------------------*\n*     DDD                   RPF DELETE NO VERIFICATION                *\n*---------------------------------------------------------------------*\n\nDelete a Roscoe member without any request for confirmation.\n\n*---------------------------------------------------------------------*\n*     DECTOHEX              RPF DECIMAL TO HEXADECIMAL                *\n*---------------------------------------------------------------------*\n\nDECTOHEX decimal-number\n\nDisplay hexadecimal equivalent to decimal number.\n\n*---------------------------------------------------------------------*\n*     DEDUP                 RPF DEDUP AWS                             *\n*---------------------------------------------------------------------*\n\nDEDUP start-column end-column\n\nRemove duplicate lines from the active work space.\n\n*---------------------------------------------------------------------*\n*     DELDUPS               RPF ACC DELETE DUPLICATES                 *\n*---------------------------------------------------------------------*\n\nDELDUPS start-column length\n\nRemove duplicate lines from the active work space.\n\n*---------------------------------------------------------------------*\n*     DIR                   RPF DIRECTORY LIST                        *\n*---------------------------------------------------------------------*\n\nDIR with no parameter simply displays your directory.\n\n\"DIR >\" places the directory list into your active work space.  This\nprovides a way to obtain member names for searching.\n\n\n*---------------------------------------------------------------------*\n*     DJ                    RPF DETACH JOB                            *\n*---------------------------------------------------------------------*\n\nDETACH JOB (the job output goes away).\n\nAJ (Attach Job), DJ (Detach Job), SDJ (Set Display Job),\nSJ (Status Job), AF (Attach File), NF (Next File),\nPAF (Print All Files), and PF (Print File) all work together to\nmake viewing and manipulating job output easier.\n\n*---------------------------------------------------------------------*\n*     DJN                   RPF DETACH JOB NOACT                      *\n*---------------------------------------------------------------------*\n\nDETACH JOB NOACT (the job remains in the output queue).\n\n*---------------------------------------------------------------------*\n*     DL                    RPF DETACH LIBRARY                        *\n*---------------------------------------------------------------------*\n\nDETACH LIBRARY\n\n*---------------------------------------------------------------------*\n*     DOCC                  RPF MARK COBOL 1-6                        *\n*---------------------------------------------------------------------*\n\nDOCC Version-number Begin-line-number End-line-number\n\nI use this to mark the lines of a Cobol program when I make changes to\nthem or to mark new lines that I have inserted.  I place a modification\nlog at the beginning of the program that documents the changes that are\nbeing made. The mark consists of the first letter of my last name and a\ntwo digit version number. For example \"DOCC 06 1000 1010\" places \"H06\"\nin columns 1 to 3 of lines 1000 through 10010.\n\n*---------------------------------------------------------------------*\n*     ECHO                  RPF ECHO KEY TYPED                        *\n*---------------------------------------------------------------------*\n\nUsed mainly to see how PF keys are being interpreted.\nEnter \"STOP\" to exit the RPF.\n\n*---------------------------------------------------------------------*\n*     EXGET                 RPF                                       *\n*---------------------------------------------------------------------*\n\nImport a Librarian member from long term development.  Used by GETLNG\nRPF.\n\n*---------------------------------------------------------------------*\n*     FINDPGM               RPF                                       *\n*---------------------------------------------------------------------*\n\nSearch multiple Librarian libraries for a program or for all programs\nthat begin with a string of characters.  You enter the program name\nor partial name on a panel that is displayed.\n\n*---------------------------------------------------------------------*\n*     FS                    RPF DIS AWS ON SCREEN                     *\n*---------------------------------------------------------------------*\n\nFull screen display of active work space. \"Enter\" will scroll forward.\n\"Clear\" will exit. \"PA1\" starts display from previous page.\n\n*---------------------------------------------------------------------*\n*     FS1                   RPF DIS AWS ON SCREEN                     *\n*---------------------------------------------------------------------*\n\nFull screen display of active work space. \"Enter\" will scroll forward.\n\"Clear\" will exit.\n\n*---------------------------------------------------------------------*\n*     GENDATA               RPF GENERATE DATA                         *\n*---------------------------------------------------------------------*\n\nAn example of using an RPF to generate data in the active work space.\n\n*---------------------------------------------------------------------*\n*     GETJCL                RPF GET JCL FROM A LIBRARY                *\n*---------------------------------------------------------------------*\n\nImport a member from a partioned data set containing JCL.\n\n*---------------------------------------------------------------------*\n*     GETLNG                RPF GET LONGTERM PGM                      *\n*---------------------------------------------------------------------*\n\nImport a Librarian member from long term development.\n\n*---------------------------------------------------------------------*\n*     GETY2K                RPF GET Y2K PGM                           *\n*---------------------------------------------------------------------*\n\nImport a Librarian member from one of the Y2K libraries.\n\n*---------------------------------------------------------------------*\n*     HEXTODEC              RPF HEXADECIMAL TO DECIMAL                *\n*---------------------------------------------------------------------*\n\nHEXTODEC hexadecimal-number\n\nDisplay decimal equivalent to hexadecimal number.\n\n*---------------------------------------------------------------------*\n*     IMPEXAML              RPF IMPORT EXAMPLE                        *\n*---------------------------------------------------------------------*\n\nThis is an example of an IMPORT with the INCLUDE option.  For example\nif you have a file with several different record types and if each type\nis identified by a character in the first position, you can import the\nrecords of just one type at a time.\n\n*---------------------------------------------------------------------*\n*     KEEPALL               RPF KEEP ALL ROSCOE MEMBERS               *\n*---------------------------------------------------------------------*\n\nThis RPF builds another RPF that updates the \"last update date\" of\nall of your Roscoe members so that they are not archived. Since a\nrunning RPF cannot be updated the KEEPALL RPF excludes itself and you\nmust do a \"FETCH KEEPALL\" followed by an \"UPDATE *\" to manually\nprevent it from being archived.\n\nI would strongly suggest study of this RPF because the techniques used\nare very useful.  Once you have the names of the members that you wish\nto process ( e.g. update or search ) and a pattern (the series of Roscoe\ncommands that constitute the process) then these techniques allow you to\nquickly build an RPF to perfrom the process on all of the members.\n\n*---------------------------------------------------------------------*\n*     LIBLOOK               RPF LIBRARIAN LOOK                        *\n*---------------------------------------------------------------------*\n\nSearch multiple Librarian libraries for a program or for all programs\nthat begin with a string of characters.  You enter the program name\nor partial name on a panel that is displayed.\n\n*---------------------------------------------------------------------*\n*     LOUP                  RPF LOWERCASE TO UPPERCASE                *\n*---------------------------------------------------------------------*\n\n\"LOUP Start-line-number  End-line-number\" converts lines in active work\nspace from uppercase letters to lowercase letters.\n\n*---------------------------------------------------------------------*\n*     LS                    RPF ROSCOE LIBRARY SEARCH                 *\n*---------------------------------------------------------------------*\n\nLS with no parameters will display a list of your Roscoe members\nin share (SHR) status.  This is most useful when only the members that\nyou are currently working on are in share status.\n\n\"LS string\" will display a list of your Rocoe members which contain\nthe string in thier name, description, related dates or access status.\nFor example \"LS .t\" displays all members that start with the letter\n\"t\".  \"LS print\" displays all members with \"print\" in either their name\nor description.\n\n*---------------------------------------------------------------------*\n*     MHR                   RPF MAXIMUM HEART RANGE                   *\n*     MHR1                  RPF MAXIMUM HEART RANGE                   *\n*---------------------------------------------------------------------*\n\n\"MHR age\" displays information on heart ranges for exercise. MHR1\nperforms a slighly different calculation.\n\n*---------------------------------------------------------------------*\n*     MIXCASE               RPF MIXED UPPER LOWER CASE                *\n*---------------------------------------------------------------------*\n\nDoes a \"SET MODE XTENDED\" to allow you to enter uppercase and/or\nlowercase letters into the active work space.\n\n*---------------------------------------------------------------------*\n*     MSG                   RPF SEND MESSAGE                          *\n*---------------------------------------------------------------------*\n\n\"MSG Pfx 'text of message'\" send a short message to thr Roscoe user\nwhose prefix id is 'Pfx'.\n\n*---------------------------------------------------------------------*\n*     MYDSN                 RPF DSN FOR USERID                        *\n*---------------------------------------------------------------------*\n\nDisplay all datasets whose high level qualifier is \"USERID\".  The\n\"USERID\" is hardcoded into the RPF.\n\n*---------------------------------------------------------------------*\n*     NAMEIT                RPF UPDATE MEMBER WITH NAME               *\n*---------------------------------------------------------------------*\n\n\"NAMEIT Pfx.Member\" fetches the member into the active work space and\nadds three lines to the top that contain the \"Pfx.Member\" name.\n\n*---------------------------------------------------------------------*\n*     NF                    RPF NEXT FILE                             *\n*---------------------------------------------------------------------*\n\nWhen viewing attached job output, NF, causes the next file to be\ndisplayed.\n\nAJ (Attach Job), DJ (Detach Job), SDJ (Set Display Job),\nSJ (Status Job), AF (Attach File), NF (Next File),\nPAF (Print All Files), and PF (Print File) all work together to\nmake viewing and manipulating job output easier.\n\n*---------------------------------------------------------------------*\n*     NOROSCOM              RPF NO ROSCOE COMMENT                     *\n*---------------------------------------------------------------------*\n\nPlace a list of all Roscoe members that do not have a descriptive\ncomment into the active work space.\n\n*---------------------------------------------------------------------*\n*     NOSEQALL              RPF NOSEQ ALL MEMBERS                     *\n*---------------------------------------------------------------------*\n\nMake all Roscoe members have NOSEQ attribute.\n\n*---------------------------------------------------------------------*\n*     N1R6                  RPF ROUTE PRINT TO N1R6                   *\n*---------------------------------------------------------------------*\n\nRoute all files of an attached job to destination N1R6 in class A.\n\n*---------------------------------------------------------------------*\n*     PAF                   RPF PRINT ALL FILES                       *\n*---------------------------------------------------------------------*\n\n\"PAF Class\" sends all job output to 'Class'.  Usually one class, A, is\nfor regular output and another class, Z, is for laser printer output.\nYou probably will need to change the destination.\n\nAJ (Attach Job), DJ (Detach Job), SDJ (Set Display Job),\nSJ (Status Job), AF (Attach File), NF (Next File),\nPAF (Print All Files), and PF (Print File) all work together to\nmake viewing and manipulating job output easier.\n\n*---------------------------------------------------------------------*\n*     PAFL                  RPF PRINT ALL FILES LOCAL                 *\n*---------------------------------------------------------------------*\n\nSame as PAF except the destination is 'LOCAL'.\n\n*---------------------------------------------------------------------*\n*     PARA                  RPF DISPLAY PGM PARAGRAPHS                *\n*---------------------------------------------------------------------*\n\nIf you have a Cobol program in your active work space and if you have\ncoded all of your paragraph names in the format: 'nnnn-paragraph-name'\nstarting in column 8 (i.e. with a dash in column 12) then PARA will\ndelete all lines except those with paragraph names.\n\nYou could save the result, retaining the original line numbers in a\nRoscoe member, say named 'T1'. You could repeat this process doing a\nDELETEX on /PERFORM/, /GOTO/, /CALL/, /LINK/, /XCTL/, etc. each time\nsaving the results with the original line numbers. Then with a\n\"MERGE T1 T2 T3 T4 T5 T6\" you would quickly assemble all the data you\nneed to create a structure chart of what calls what.\n\n*---------------------------------------------------------------------*\n*     PF                    RPF PRINT FILE                            *\n*---------------------------------------------------------------------*\n\n\"PF File-Number Class\" will change the status of a file in an attached\njob so that when you \"DJ\" (detach job) it will be sent to print in\n'Class'.  For example \"PF 8 Z\" sets file 8 to print in job class Z.\n\nAJ (Attach Job), DJ (Detach Job), SDJ (Set Display Job),\nSJ (Status Job), AF (Attach File), NF (Next File),\nPAF (Print All Files), and PF (Print File) all work together to\nmake viewing and manipulating job output easier.\n\n*---------------------------------------------------------------------*\n*     PFIX                  RPF PFIX (PRODUCTION FIX)                 *\n*---------------------------------------------------------------------*\n\nINTRODUCTION.\n\nSee the documentation for RPF, ACC.  PFIX now transfers to $CC\nand works the same as ACC.  Prior to the completion of Y2K PFIX\ntransfered to $DD which offered four options:\n\n    A - Y2K BATCH COMPILE\n    B - Y2K CICS COMPILE\n    C - NON-Y2K BATCH COMPILE\n    D - NON-Y2K CICS COMPILE\n\nPFIX is included to show how to develop an alternate interface for ACC\nand it also highlights the essential RPF members that must be changed.\nPFIX originally transfered to $DD but was changed to transfer to $CC\nto make it work the same as ACC.\n\nBelow is a hierarchy chart showing the relationships (what calls what)\nbetween key components (those most often changed or which need to be\nadapted to your environment). Member CCHLPSHO is called from many\nplaces but I have shown it only once for simplicity.  Also CCHLPSHO\nrefers to some members that were never written. This does not cause\na problem but generates a \"help is not available\" message.\n\nThis chart shows $DD but the current PFIX uses $CC.  See documentation\nfor ACC to see hierarchy under $CC. An asterisk marks the members that\nare new in PFIX (i.e. not in ACC).  The \"*\" is not part of the member\nname.\n\n*pfix\n  *$dd\n    ccsesset\n    $$cclist\n   *ddxxxpan -> acc option panel\n   *$dda     -> batch compile from y2k\n   *$ddb     -> CICS compile from y2k\n   *$ddc     -> batch compile from non-y2k\n   *$ddd     -> CICS compile from non-y2k\n    ccdefset\n      ccsesset\n      $$chdefs -> default options\n      ccdefpan -> options panel\n      cchlpsho\n        ccalxhlp -> missing\n        ccaxxhlp\n        ccblxhlp -> missing\n        ccbxxhlp\n        ccclxhlp -> missing\n        cccxxhlp\n        ccdefhlp\n        ccmemhlp -> missing\n        ccroshlp -> missing\n        ccurthlp -> missing\n        ccxxxhlp\n\nBelow is a hierarchy/structure chart for the four major options.  I\nam presenting this information in several pieces to make it less\ncomplex than a single chart.\n\n*$dda - batch cobol compile from y2k\n  ccsesset\n  ccdefget\n  ccurtsel\n  ccbxxpan\n  ccdefset\n  ccjobJCL\n *ddadiJCL -> JCL proc batch Intertest with database\n *ddaxiJCL -> JCL proc batch Intertest no database\n *ddadxJCL -> JCL proc batch with database\n *ddaxxJCL -> JCL proc batch no database\n  ccmemsel\n  ccrossel\n\n*$ddb - CICS compile from y2k\n  ccsesset\n  cccxxpan\n  ccdefget\n  ccjobJCL\n *ddbxiJCL -> with Intertest\n *ddbxxJCL -> no Intertest\n  ccmemsel\n  ccrossel\n\n*$ddc - batch cobocl compile from non-y2k\n  ccsesset\n  ccdefget\n  ccurtsel\n  ccbxxpan\n  ccdefset\n  ccjobJCL\n *ddcdiJCL -> JCL proc batch Intertest with database\n *ddcxiJCL -> JCL proc batch Intertest no database\n *ddcdxJCL -> JCL proc batch with database\n *ddcxxJCL -> JCL proc batch no database\n  ccmemsel\n  ccrossel\n\n*$ddd - CICS compile from non-y2k\n  ccsesset\n  cccxxpan\n  ccdefget\n  ccjobJCL\n *dddxiJCL -> with Intertest\n *dddxxJCL -> no Intertest\n  ccmemsel\n  ccrossel\n\n*---------------------------------------------------------------------*\n*     PH                    RPF TELEPHONE NUMBERS                     *\n*---------------------------------------------------------------------*\n\n\"PH Name\" chains several Roscoe members containing telephone numbers\ninto the active work space and seaches for 'Name' and displays any\nlines that match.\n\n*---------------------------------------------------------------------*\n*     PJCL                  RPF IMP PROD JCL MEMBER                   *\n*---------------------------------------------------------------------*\n\nImport a member from the production JCL library.\n\n*---------------------------------------------------------------------*\n*     PRINTIT               RPF PRINT AWS                             *\n*---------------------------------------------------------------------*\n\nCopy JCL to top of active work space and submit job to print it.  Data\nin active work space must be 80 character or less in length, otherwise\nit will be truncated.  For longer data create a file, export your data\nto it, and use another utility program (e.g. IDCAMS) to print it.\n\n*---------------------------------------------------------------------*\n*     PRINTIT1              RPF PRINT AWS                             *\n*---------------------------------------------------------------------*\n\nSimiliar to PRINTIT but does not destroy the contents of the current\nactive work space.\n\n*---------------------------------------------------------------------*\n*     PROCLOOK              RPF PROCLIB LOOK                          *\n*---------------------------------------------------------------------*\n\nSearch several JCL libraries for a member name or a partial member\nname. You need to change the JCL library names.  A screen is displayed\nto allow you to enter the member name that you are searching for.\n\n*---------------------------------------------------------------------*\n*     PROSMEM               RPF PRINT ROSCOE MEMBER                   *\n*---------------------------------------------------------------------*\n\n\"PROSMEM 'Member' 'Description'\" can be used to collect Roscoe\nmembers with their names and descriptions in a member named @TEMP,\nwhich can then be printed or exported for backup. These days it is\nmore useful for collecting members for printing as there are better\nways to backup, but in the very early days of Roscoe their was no\nbackup and I used this to carry my Roscoe RPFs on paper to a new job.\nYou can use the DIR RPF and DELETEX commands to obtain the list of\nmember names and descriptions.\n\n*---------------------------------------------------------------------*\n*     PUTJCL                RPF EXPORT JCL TO USER PROCLIB            *\n*---------------------------------------------------------------------*\n\nExport JCL from active work space to user procedure library.  The\nlibrary name is hardcode in the RPF.  A screen is displayed to allow\nyou to enter the member name that you want the JCL saved under.\n\n*---------------------------------------------------------------------*\n*     QP                    RPF QUERY PRINT QUEUE                     *\n*---------------------------------------------------------------------*\n\nQuery number of jobs and status of print queue.\n\n*---------------------------------------------------------------------*\n*     RESET                 RPF ACC RESET ROSCOE OPTIONS              *\n*---------------------------------------------------------------------*\n\nReset some Roscoe options to the way you normally want them to be.\n\n*---------------------------------------------------------------------*\n*     ROSREST               RPF ROSCOE RESTORE                        *\n*---------------------------------------------------------------------*\n\nRestore Roscoe members from backup.  You will need to change the\ndataset names for your environment.\n\n*---------------------------------------------------------------------*\n*     SCANACC               RPF SCAN ACC MEMBERS                      *\n*---------------------------------------------------------------------*\n\nScan the members of the ACC RPF for a string.  This RPF uses the\nSCANRMEM (Scan Roscoe Member) RPF which places it's results in the\n@TEMP member.  You should check to see if the @TEMP member exists\nbefore you run this RPF.  You may need to manually delete @TEMP or\nrename it. The @TEMP member is never automatically deleted by any of\nmy RPFs because I want complete control and do NOT want to lose the\nresults of a search.  Scans of large partition data sets or large\nLibrarian libraries may take a long time and you do NOT want to have to\nrepeat them unnecessarily.\n\n\"SCANACC JOBNAME\" will find all members of ACC that contain the string\n'JOBNAME'.\n\n*---------------------------------------------------------------------*\n*     SCANLIB               RPF MAKE SCAN LIBRARIAN RANGE             *\n*---------------------------------------------------------------------*\n\n\"SCANLIB 'LibrarianDatasetName' String RpfName Range\" builds an\nRPF named 'Rpfname' that searches for 'String' in Librarian library\nmembers whose name begins with 'Range'.  The results are placed in the\n@TEMP member.  You should check to see if the @TEMP member exists\nbefore you run this RPF.  You may need to manually delete @TEMP or\nrename it. The @TEMP member is never automatically deleted by any of\nmy RPFs because I want complete control and do NOT want to lose the\nresults of a search.  Scans of large partition data sets or large\nLibrarian libraries may take a long time and you do NOT want to have to\nrepeat them unnecessarily.\n\nThis RPF uses the SCANLMEM RPF.\n\n\"SCANLIB 'DVL.LIBMAST' '-INC' MIST CPPX\" creates an RPF named 'MIST'\nwhich you can execute to find all members of 'DVL.LIBMAST' whose names\nstart with 'CPPX' and contain the string '-INC'.\n\n*---------------------------------------------------------------------*\n*     SCANLMEM              RPF SCAN LIBRARIAN MEMBER                 *\n*---------------------------------------------------------------------*\n\nUsed by SCANLIB to search one Librarian member for a string and place\nthe results in @TEMP.\n\n*---------------------------------------------------------------------*\n*     SCANMEM               RPF SCAN PDS MEMBER FOR STRING            *\n*---------------------------------------------------------------------*\n\nUsed by SCANPDS to search one partitioned dataset member for a\nstring and place the results in @TEMP.\n\n*---------------------------------------------------------------------*\n*     SCANPDS               RPF MAKE SCAN PDS FOR STRING              *\n*---------------------------------------------------------------------*\n\n\"SCANPDS 'PDSDatasetName' String RpfName\" builds an RPF\nnamed 'Rpfname' that searches for 'String' in a PDS library.\nThe results are placed in the @TEMP member.  You should check to\nsee if the @TEMP member exists before you run this RPF.  You may\nneed to manually delete @TEMP or rename it. The @TEMP member is never\nautomatically deleted by any of my RPFs because I want complete\ncontrol and do NOT want to lose the results of a search.  Scans of large\nPDS libraries may take a long time and you do NOT want to have to\nrepeat them unnecessarily.\n\nThis RPF uses the SCANMEM RPF.\n\n\"SCANPDS 'SYS1.MACLIB' SVC MIST\" creates an RPF named 'MIST'\nwhich you can execute to find all members of 'SYS1.MACLIB'\nwhich contain the string 'SVC'.\n\nOne limitation is that the PDS member may be larger that the maximum\nsize active work space. I have only had this happen with some members\nin SYS1.MACLIB.\n\n*---------------------------------------------------------------------*\n*     SCANPFIX              RPF SCAN PFIX                             *\n*---------------------------------------------------------------------*\n\nScan the members of the PFIX RPF for a string.  This RPF uses the\nSCANRMEM (Scan Roscoe Member) RPF which places it's results in the\n@TEMP member.  You should check to see if the @TEMP member exists\nbefore you run this RPF.  You may need to manually delete @TEMP or\nrename it. The @TEMP member is never automatically deleted by any of\nmy RPFs because I want complete control and do NOT want to lose the\nresults of a search.  Scans of large partition data sets or large\nLibrarian libraries may take a long time and you do NOT want to have to\nrepeat them unnecessarily.\n\n\"SCANPFIX JOBNAME\" will find all members of PFIX that contain the\nstring 'JOBNAME'.\n\n*---------------------------------------------------------------------*\n*     SCANRMEM              RPF SCAN ROSCOE MEM                       *\n*---------------------------------------------------------------------*\n\nUsed by SCANROS to search one Roscoe member for a\nstring and place the results in @TEMP.\n\n*---------------------------------------------------------------------*\n*     SCANROS               RPF MAKE SCAN ROS FOR STRING              *\n*---------------------------------------------------------------------*\n\n\"SCANROS 'RoscoePrefix' String RpfName\" builds an RPF\nnamed 'Rpfname' that searches for 'String' in a Roscoe library.\nThe results are placed in the @TEMP member.  You should check to\nsee if the @TEMP member exists before you run this RPF.  You may\nneed to manually delete @TEMP or rename it. The @TEMP member is never\nautomatically deleted by any of my RPFs because I want complete\ncontrol and do NOT want to lose the results of a search.  Scans of large\nPDS libraries may take a long time and you do NOT want to have to\nrepeat them unnecessarily.\n\nThis RPF uses the SCARMEM RPF.\n\n\"SCANPDS 'R$' JOB MIST\" creates an RPF named 'MIST'\nwhich you can execute to find all members of the 'R$' Roscoe library\nwhich contain the string 'JOB'.\n\n*---------------------------------------------------------------------*\n*     SD                    RPF SET DISPLAY COLUMNS                   *\n*---------------------------------------------------------------------*\n\n\"SD StartColumn EndColumn\" sets which columns are displayed.\n\"SD 40 133\" will start displaying at column 40 and will display up to\nthe maximum amount that the screen can display i.e. you do NOT have to\nworry about counting columns.\n\n*---------------------------------------------------------------------*\n*     SDJ                   RPF SET DISPLAY COLUMNS JOB               *\n*---------------------------------------------------------------------*\n\n\"SDJ StartColumn EndColumn\" sets which columns are displayed.\n\"SDJ 40 133\" will start displaying at column 40 and will display up to\nthe maximum amount that the screen can display i.e. you do NOT have to\nworry about counting columns.\n\nAJ (Attach Job), DJ (Detach Job), SDJ (Set Display Job),\nSJ (Status Job), AF (Attach File), NF (Next File),\nPAF (Print All Files), and PF (Print File) all work together to\nmake viewing and manipulating job output easier.\n\n*---------------------------------------------------------------------*\n*     SHAREACC              RPF ACC                                   *\n*---------------------------------------------------------------------*\n\nSet some members of the ACC RPF to execute only.\n\n*---------------------------------------------------------------------*\n*     SHAREALL              RPF                                       *\n*---------------------------------------------------------------------*\n\nSet all members of Roscoe library 'PFX' to share mode, but use\nSHAREACC to keep some members of ACC in execute only mode.\n\n*---------------------------------------------------------------------*\n*     SIGNON                RPF SIGNON                                *\n*---------------------------------------------------------------------*\n\nThis RPF is executed when you logon to Roscoe and is used to\ncustomize the Roscoe environment, including setting up program\nfunction keys, tabs, etc.  It uses the BDAY RPF to notify me of\nupcoming birthdays etc.  It uses TSOCHK, TSODAT, AND TSOSAVE to\ncheck if it is necessary to submit a job to stop certain datasets\nfrom being migrated from disk storage to tape.\n\n*---------------------------------------------------------------------*\n*     SJ                    RPF STATUS JOB                            *\n*---------------------------------------------------------------------*\n\nShow the status of the files of an attached job.\n\nAJ (Attach Job), DJ (Detach Job), SDJ (Set Display Job),\nSJ (Status Job), AF (Attach File), NF (Next File),\nPAF (Print All Files), and PF (Print File) all work together to\nmake viewing and manipulating job output easier.\n\n*---------------------------------------------------------------------*\n*     TEMP80                RPF EXP/IMP TO/FROM TEMP80                *\n*---------------------------------------------------------------------*\n\"TEMP80 EXP\" exports the active work space to dataset HLQ.TEMP80 and\n\"TEMP80 IMP\" imports dataset HLQ.TEMP80 into the active work space.\nI use this dataset frequently for uploading and downloading from/to\na personal computer.\n\n*---------------------------------------------------------------------*\n*     TSOCHK                RPF RUN TSOSAVE ONCE PER DAY              *\n*---------------------------------------------------------------------*\n\nIf TSODAT contains today's date then do nothing, otherwise submit\njob TSOSAVE to stop datatset migration and run the TSODATE RPF to\nset TSODAT to today's date.\n\n*---------------------------------------------------------------------*\n*     TSODATE               RPF SAVE TODAY DATE IN TSODAT             *\n*---------------------------------------------------------------------*\n\n Used by TSOCHK to set TSODAT to today's date.\n\n*---------------------------------------------------------------------*\n*     TSOSAVE               JCL JOB PREVENT MIGRATE TSO DATASETS      *\n*---------------------------------------------------------------------*\n\nJob submitted by TSOCHK to prevent dataset migration from disk to tape.\n\n*---------------------------------------------------------------------*\n*     UPLO                  RPF UPPERCASE TO LOWERCASE                *\n*---------------------------------------------------------------------*\n\n\"UPLO Start-line-number  End-line-number\" converts lines in active work\nspace from lowercase letters to uppercase letters.\n\n*---------------------------------------------------------------------*\n*     UPPERCAS              RPF UPPER CASE                            *\n*---------------------------------------------------------------------*\n\nDoes a \"SET MODE BASIC\" to make all the characters that you enter\nuppercase (see MIXCASE).\n\n*---------------------------------------------------------------------*\n*     VALIDPFX              RPF GENERATE VALID ROS PREFIX & USERIDS   *\n*---------------------------------------------------------------------*\n\nCreates a list of valid Roscoe prefixes and user ids in the active\nwork space.\n\n*---------------------------------------------------------------------*\n*     X                     RPF FETCH AND ATTACH                      *\n*---------------------------------------------------------------------*\n\n\"X RoscoeMember\" does a FETCH and ATTACH of the Roscoe member.\n\n*---------------------------------------------------------------------*\n*     XREF                  RPF FIND LINK AND XCTL                    *\n*---------------------------------------------------------------------*\n\nImport a CICS program from a Librarian library and search for\nCICS LINK and CICS XCTL. Leaves result in active work space.\n\n*---------------------------------------------------------------------*\n*     XREFFPF               RPF CROSS REF FPF PGMS                    *\n*---------------------------------------------------------------------*\n\nUses XREF RPF on multiple programs.\n\n*---------------------------------------------------------------------*\n*     Y2KCODE               RPF Y2K COBOL GENERATOR                   *\n*---------------------------------------------------------------------*\n\nY2KCODE is a panel driven RPF that generates Cobol code which packs\nand unpacks dates. A three letter code is used to designate the\nDatacom/DB table name.  Four date formats are supported: YYMMDD,\nYYMM, YY, YYDDD.  See Y2KFLDS for the WORKING-STORAGE field\ndefinitions that are used.  See PACKZZZ and UNPKZZZ for examples\nof the generated code.\n\n*---------------------------------------------------------------------*\n* APPENDIX: LIST OF MEMBERS\n*---------------------------------------------------------------------*\n\n$$CBTDOC\n$$CCHELP\n$$CHDEFS\n$$CHHELP\n$$JCARDS\n$$JCNVRT\n$$JSETUP\n$CC\n$CCA\n$CCAL\n$CCB\n$CCBL\n$CCC\n$CCCL\n$CCP\n$CCT\n$CCXL\n$DD\n$DDA\n$DDB\n$DDC\n$DDD\nAB\nACC\nACCEXP\nACSDEST\nAF\nAJ\nAL\nALL\nAP\nAW\nBCOB2C\nBCOB2CL\nBCOB2ROS\nBDAY\nBFILL16\nBLANKFIL\nBLKTAPE\nBLK3390\nBMI\nBMI1\nCALS\nCBL2USER\nCC\nCCA\nCCACXJCL\nCCAL\nCCALXPAN\nCCASXJCL\nCCAXXHLP\nCCAXXPAN\nCCB\nCCBDIJCL\nCCBDXJCL\nCCBL\nCCBLXPAN\nCCBXIJCL\nCCBXXHLP\nCCBXXJCL\nCCBXXPAN\nCCC\nCCCL\nCCCLXPAN\nCCCXIJCL\nCCCXXHLP\nCCCXXJCL\nCCCXXPAN\nCCDEFGET\nCCDEFHLP\nCCDEFPAN\nCCDEFSET\nCCHLPPAN\nCCHLPSHO\nCCJOBBLD\nCCJOBJCL\nCCLIBMEM\nCCMEMPAN\nCCMEMSEL\nCCPXXJCL\nCCPXXPAN\nCCROSPAN\nCCROSSEL\nCCSESSET\nCCSETPAN\nCCTXXJCL\nCCTXXPAN\nCCURTPAN\nCCURTSEL\nCCXLXPAN\nCCXXXHLP\nCCXXXPAN\nCICSCOB\nCICSCOBL\nCICSCOMP\nCICSMAP\nCLEANROS\nCSHCSH\nDATE\nDCOB2C\nDCOB2CL\nDD\nDDADIJCL\nDDADXJCL\nDDAXIJCL\nDDAXXJCL\nDDBXIJCL\nDDBXXJCL\nDDCDIJCL\nDDCDXJCL\nDDCXIJCL\nDDCXXJCL\nDDD\nDDDXIJCL\nDDDXXJCL\nDDXXXPAN\nDECTOHEX\nDEDUP\nDELDUPS\nDIR\nDJ\nDJN\nDL\nDOCC\nECHO\nEXGET\nFINDPGM\nFS\nFS1\nGENDATA\nGETJCL\nGETLNG\nGETY2K\nHEXTODEC\nIMPEXAML\nIN\nKEEPALL\nLIBLOOK\nLOUP\nLS\nMHR\nMHR1\nMIXCASE\nMSG\nMYDSN\nNAMEIT\nNF\nNOROSCOM\nNOSEQALL\nN1R6\nPACKZZZ\nPAF\nPAFL\nPARA\nPF\nPFIX\nPH\nPJCL\nPRINT\nPRINTIT\nPROCLOOK\nPROSMEM\nPUTJCL\nQP\nRESET\nROSREST\nSCANACC\nSCANLIB\nSCANLMEM\nSCANMEM\nSCANPFIX\nSCANRMEM\nSCANROS\nSD\nSDJ\nSHAREACC\nSHAREALL\nSIGNON\nSJ\nTEMP80\nTSOCHK\nTSODATE\nTSOSAVE\nUNPKZZZ\nUPLO\nUPPERCAS\nURTLOOK\nVALIDPFX\nX\nXREF\nXREFFPF\nY2KCODE\nY2KFLDS\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$CCHELP": {"ttr": 1031, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x00\\x01\\x01$\\x1f\\x01\\x01$\\x7f\\x16X\\x00-\\x00\\x01\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2001-08-29T00:00:00", "modifydate": "2001-09-04T16:58:00", "lines": 45, "newlines": 1, "modlines": 0, "user": "EGHF3PY"}, "text": " This is the entry point screen for the{ACC}(Compiles) RPF. ACC enables\n a user to generate the JCL necessary to compile most programs commonly\n found at xxxxxxx, namely CICS assembler maps, CICS COBOL programs, and\n batch COBOL programs with and without DataCom.\n\n If you read this help screen carefully, you should have little trouble\n with the remaining screens and concepts.\n\n After entering ACC, fill in the fields found on this screen as follows:\n\n OPTION:  Enter{\"A\"}to{assemble}a CICS map\n               {\"B\"}to compile a{batch}COBOL program\n               {\"C\"}to compile a{CICS}COBOL program.\n          Enter{\"\\\"}to enable two additional options\n               {\"P\"}to assemble a{CICS}ASSEMBLER\n               {\"T\"}to assemble a{CICS}TABLE.\n\n MEMBER:  Enter the{name of the member to be compiled,}with or without\n          the version number.  The version number will be automatically\n          filled in when only one version exists on the source library.\n          When more than one version exists, the user will be presented\n          with a selection list.\n          Entry of an{\"L\"}here invokes list processing in which ACC will\n          compile/assemble all programs in a list.\n\n REPLACE: Entry of a{\"Y\"}here indicates to ACC that the user wishes to\n         {replace the selected Library member}with the content of one\n          of his Roscoe members.\n\n SUBMIT:  Entry of a{\"Y\"}here indicates to ACC that the JCL is to be\n         {submitted immediately,}without showing any more screens, if\n          there are no problems with the information entered.\n\n{This screen can be bypassed entirely}by making an entry on the Roscoe\n command line of the following form:\n{ ACC option member <REP> <SUB>}   (<...> indicates an optional entry)\n       where option is the entry for OPTION above (A, B, or C)\n             member is the entry for MEMBER above\n             REP sets the REPLACE option to \"Y\"       (REP and SUB are\n             SUB sets the SUBMIT option to \"Y\"         interchangeable)\n\n Example:  ACC C CPP185 REP SUB\n     will submit CPP185vv for CICS COBOL compile, replacing the module\n     on Librarian from a Roscoe member, submitting the job without\n     presenting a screen if there are no problems.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$CHDEFS": {"ttr": 1033, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01$\\x1f\\x01\\x01$\\x1f\\x14\\x01\\x00\\x1a\\x00\\x1a\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-08-29T00:00:00", "modifydate": "2001-08-29T14:01:00", "lines": 26, "newlines": 26, "modlines": 0, "user": "EGHF3PY"}, "text": "APID = ACS\nENVR = DVL\nSRCE = HLQ.XXX.DVL.LIBMAST\nSQLS = N\nMAPC = HLQ.XXX.DVL.ONLMAP\nURTS = HLQ.XXX.DVL.URTMAST\nOLNK = HLQ.XXX.DVL.ONLLOAD\nITST = Y\nBLNK = HLQ.XXX.DVL.BATLOAD\nBTST = N\nURTL = HLQ.XXX.DVL.BATLOAD\nACBK = C\nALOP =\nAMOP = AMODE=31,RMODE=ANY\nBCOP = OPT,NOADV,NOSEQ,NOOFFSET,NOLIST\nBLOP =\nBMOP = AMODE=31,RMODE=ANY\nCCOP = OPT,NOADV,NOSEQ,OFFSET,NOLIST\nCLOP =\nCMOP = AMODE=31,RMODE=ANY\nJNAM = JOBNAME\nACCT = ACCTCODE\nROOM = XXXX-NNN\nUNAM = YOURNAME\nMSGC = S\nREMT = LOCAL\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$CHHELP": {"ttr": 1035, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x00\\x01\\x01$\\x1f\\x01\\x01$\\x7f\\x17\\x00\\x00-\\x004\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2001-08-29T00:00:00", "modifydate": "2001-09-04T17:00:00", "lines": 45, "newlines": 52, "modlines": 0, "user": "EGHF3PY"}, "text": " This is the entry point screen for the{ACC}(Compiles) RPF. ACC enables\n a user to generate the JCL necessary to compile most programs commonly\n found at xxxxxxx, namely CICS assembler maps, CICS COBOL programs, and\n batch COBOL programs with and without DataCom.\n\n If you read this help screen carefully, you should have little trouble\n with the remaining screens and concepts.\n\n After entering ACC, fill in the fields found on this screen as follows:\n\n OPTION:  Enter{\"A\"}to{assemble}a CICS map\n               {\"B\"}to compile a{batch}COBOL program\n               {\"C\"}to compile a{CICS}COBOL program.\n          Enter{\"\\\"}to enable two additional options\n               {\"P\"}to assemble a{CICS}ASSEMBLER\n               {\"T\"}to assemble a{CICS}TABLE.\n\n MEMBER:  Enter the{name of the member to be compiled,}with or without\n          the version number.  The version number will be automatically\n          filled in when only one version exists on the source library.\n          When more than one version exists, the user will be presented\n          with a selection list.\n          Entry of an{\"L\"}here invokes list processing in which ACC will\n          compile/assemble all programs in a list.\n\n REPLACE: Entry of a{\"Y\"}here indicates to ACC that the user wishes to\n         {replace the selected Library member}with the content of one\n          of his Roscoe members.\n\n SUBMIT:  Entry of a{\"Y\"}here indicates to ACC that the JCL is to be\n         {submitted immediately,}without showing any more screens, if\n          there are no problems with the information entered.\n\n{This screen can be bypassed entirely}by making an entry on the Roscoe\n command line of the following form:\n{ ACC option member <REP> <SUB>}   (<...> indicates an optional entry)\n       where option is the entry for OPTION above (A, B, or C)\n             member is the entry for MEMBER above\n             REP sets the REPLACE option to \"Y\"       (REP and SUB are\n             SUB sets the SUBMIT option to \"Y\"         interchangeable)\n\n Example: ACC C CPP185 REP SUB\n     will submit CPP185vv for CICS COBOL compile, replacing the module\n     on Librarian from a Roscoe member, submitting the job without\n     presenting a screen if there are no problems.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$JCARDS": {"ttr": 1037, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01$\\x1f\\x01\\x01$\\x1f\\x13)\\x00\\x02\\x00\\x02\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-08-29T00:00:00", "modifydate": "2001-08-29T13:29:00", "lines": 2, "newlines": 2, "modlines": 0, "user": "EGHF3PY"}, "text": "//?JNAM JOB (?ACCT,?ROOM),'?UNAM?JDES',MSGCLASS=?MCLS,CLASS=?CLAS\n/*ROUTE  PRINT ?PRTR\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$JCNVRT": {"ttr": 1039, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x01$\\x1f\\x01\\x01&/\\x14Q\\x00*\\x00*\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2001-08-29T00:00:00", "modifydate": "2001-09-19T14:51:00", "lines": 42, "newlines": 42, "modlines": 0, "user": "EGHF3PY"}, "text": "<<JCNVRT>>\nPUSH\nDECLARE CARD1 CARD2 CARD3 CARD4\nCREATE AWS JCNVRT NONRECOVERABLE LEVEL\nSELECT AWS JCNVRT\nTRAP\nFETCH $$JPARMS\nIF TC NE 0\n    TRAP\n    FETCH CBL2USER\n    TRAP OFF\n    IF TC NE 0\n        1                LOCAL\n        2 DVL.SOURCE.LIBMAST                       ASD\n        3 CICS.OMS.APPLOAD                             31 ANY OPT\n        4 HLQ.ACS.DVL.BATLOAD                             31 ANY OPT\n    ENDIF\n    READ AWS 1 CARD1\n    READ AWS 2 CARD2\n    READ AWS 3 CARD3\n    READ AWS 4 CARD4\n    DELETE\n    %01 JNAM = D%SUBSTR(CARD1 1 4)%\n    %02 ACCT = %SUBSTR(CARD1 6 4)%\n    %03 ROOM = %SUBSTR(CARD1 11 5)%\n    %04 UNAM = %SUBSTR(CARD1 25 11)%\n     05 MCLS = S\n    %06 PRTR = %SUBSTR(CARD1 16 8)%\n    %07 DIVN = %SUBSTR(CARD2 42 3)%\n    %08 SRCE = %SUBSTR(CARD2 1 34)%\n    %09 CCOP = %SUBSTR(CARD3 53 20)%\n    %10 BCOP = %SUBSTR(CARD4 53 20)%\n    %11 CLNK = %SUBSTR(CARD3 1 34)%\n    %12 BLNK = %SUBSTR(CARD4 1 34)%\n    %13 CLOP = AMODE=%SUBSTR(CARD3 45 2)%,RMODE=%SUBSTR(CARD3 49 3)%\n    %14 BLOP = AMODE=%SUBSTR(CARD4 45 2)%,RMODE=%SUBSTR(CARD4 49 3)%\nENDIF\nRENUMBER 1 1\nUPDATE $$JPARMS\nDISCARD AWS JCNVRT\nPOP\nRETURN\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$JSETUP": {"ttr": 1041, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01$\\x1f\\x01\\x01$\\x1f\\x139\\x01l\\x01l\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-08-29T00:00:00", "modifydate": "2001-08-29T13:39:00", "lines": 364, "newlines": 364, "modlines": 0, "user": "EGHF3PY"}, "text": "<<JSETUP>> : A1=<NON BLANK = NO SCREEN DISPLAY IF CORRECT>\nPUSH\nDECLARE CARD PROJ SENDPFX ERRFLD PF6OK PTR MCLS --\n        CAMODE CRMODE BAMODE BRMODE CCOP BCOP HOLD\nEXEC PFX.RESET\nLET SENDPFX = ERRFLD = PF6OK = ''\nEXEC PFX.$$JCNVRT\nCREATE AWS JSETUP NONRECOVERABLE LEVEL\nSELECT AWS JSETUP\nFETCH $$JPARMS\nRENUMBER 1 1\nPANEL ACTIVATE *\nSTARTDEF\nTAG ! S\nTAG @ SH\nTAG \\ UMH JNAM ACCT ROOM UNAM PRTR DIVN SRCE CLNK BLNK\nTAG % SH  MSG\n!                       @GATHER BASIC USER INFORMATION!\n\n                  @(RUN THIS ANYTIME BY EXECUTING \"$$JSETUP\")!\n\n\n!        JOB NAME:\\________!     (default \"DXXX....\", XXX=Roscoe prefix)\n\n!    ACCOUNT CODE:\\____!         (first entry in the job accounting area)\n\n!     ROOM NUMBER:\\________!     (second entry in the job accounting area)\n\n!       USER NAME:\\___________!  (to appear in name area of job card)\n\n!PREFERRED REMOTE:\\________!     (to appear on the ROUTE card)\n\n!        DIVISION:\\___!          (e.g., ASD, ACS, etc.)\n\n!  LIBRARIAN NAME:\\__________________________________!\n\n!  ONLINE LINKLIB:\\__________________________________!\n\n!   BATCH LINKLIB:\\__________________________________!\n\n%                                                                      !\nENDDEF\nSET BOUNDS AWS 1 4\nPOINT AWS LINE 1\nTRAP\nFIND /JNAM/\nIF TC EQ 0\n    %READ AWS %SEQ% CARD\n    LET PROJ = TRIM(SUBSTR(CARD 9 4))\nELSE\n    LET PROJ = ''\nENDIF\nIF PROJ EQ ''\n    LET PROJ = S.PREFIX\nENDIF\nIF LENGTH(PROJ) LT 3\n    LET PROJ = PAD(PROJ 2 'X')\nENDIF\nIF LENGTH(PROJ) LT 4\n    LET PROJ = PAD(PROJ 4 '.')\nENDIF\n%LET P.JNAM = PAD('D%PROJ%' 8 '.')\nPOINT AWS LINE 1\nTRAP\nFIND /ACCT/\nIF TC EQ 0\n    %READ AWS %SEQ% CARD\n    LET HOLD = SUBSTR(CARD 8 4)\nELSE\n    LET HOLD = ''\nENDIF\nLET P.ACCT = HOLD\nPOINT AWS LINE 1\nTRAP\nFIND /ROOM/\nIF TC EQ 0\n    %READ AWS %SEQ% CARD\n    LET HOLD = SUBSTR(CARD 8 8)\nELSE\n    LET HOLD = ''\nENDIF\nLET P.ROOM = HOLD\nPOINT AWS LINE 1\nTRAP\nFIND /UNAM/\nIF TC EQ 0\n    %READ AWS %SEQ% CARD\n    LET HOLD = TRIM(SUBSTR(CARD 8))\nELSE\n    LET HOLD = ''\nENDIF\nIF HOLD EQ ''\n    LET HOLD = SUBSTR(FORMLKEY INDEX(FORMLKEY '.')+1 11)\n    IF INDEX(HOLD '.') GT 0\n        LET HOLD = SUBSTR(HOLD 1 INDEX(HOLD '.')-1)\n    ENDIF\nENDIF\nLET P.UNAM = HOLD\nPOINT AWS LINE 1\nTRAP\nFIND /PRTR/\nIF TC EQ 0\n    %READ AWS %SEQ% CARD\n    LET HOLD = SUBSTR(CARD 8)\nELSE\n    LET HOLD = ''\nENDIF\nLET P.PRTR = HOLD\nPOINT AWS LINE 1\nTRAP\nFIND /SRCE/\nIF TC EQ 0\n    %READ AWS %SEQ% CARD\n    LET HOLD  = SUBSTR(CARD 8)\nELSE\n    LET HOLD  = ''\nENDIF\nLET P.SRCE  = HOLD\nPOINT AWS LINE 1\nTRAP\nFIND /DIVN/\nIF TC EQ 0\n    %READ AWS %SEQ% CARD\n    LET HOLD = SUBSTR(CARD 8)\nELSE\n    LET HOLD = ''\nENDIF\nIF LENGTH(HOLD) NE 3\n    LET HOLD = 'ASD'\nENDIF\nLET P.DIVN = HOLD\nPOINT AWS LINE 1\nTRAP\nFIND /CLNK/\nIF TC EQ 0\n    %READ AWS %SEQ% CARD\n    LET HOLD  = SUBSTR(CARD 8)\nELSE\n    LET HOLD  = ''\nENDIF\nLET P.CLNK  = HOLD\nPOINT AWS LINE 1\nTRAP\nFIND /BLNK/\nIF TC EQ 0\n    %READ AWS %SEQ% CARD\n    LET HOLD  = SUBSTR(CARD 8)\nELSE\n    LET HOLD  = ''\nENDIF\nLET P.BLNK  = HOLD\nPOINT AWS LINE 1\nTRAP\nFIND /MCLS/\nIF TC EQ 0\n    %READ AWS %SEQ% CARD\n    LET MCLS  = SUBSTR(CARD 8)\nELSE\n    LET MCLS  = 'S'\nENDIF\nPOINT AWS LINE 1\nTRAP\nFIND /CCOP/\nIF TC EQ 0\n    %READ AWS %SEQ% CARD\n    LET CCOP  = SUBSTR(CARD 8)\nELSE\n    LET CCOP  = 'OPT'\nENDIF\nPOINT AWS LINE 1\nTRAP\nFIND /BCOP/\nIF TC EQ 0\n    %READ AWS %SEQ% CARD\n    LET BCOP  = SUBSTR(CARD 8)\nELSE\n    LET BCOP  = 'OPT'\nENDIF\nPOINT AWS LINE 1\nTRAP\nFIND /CLOP/\nIF TC EQ 0\n    %READ AWS %SEQ% CARD\n    LET CAMODE  = SUBSTR(CARD 14 2)\n    LET CRMODE  = SUBSTR(CARD 23)\nENDIF\nIF CAMODE NE '31' AND CAMODE NE '24'\n    LET CAMODE = '31'\nENDIF\nIF CRMODE EQ 'ANY'\n    IF CAMODE NE '31'\n        LET CRMODE = '24'\n    ENDIF\nELSE\n    IF CRMODE NE '24'\n        IF CAMODE EQ '31'\n            LET CRMODE = 'ANY'\n        ELSE\n            LET CRMODE = '24'\n        ENDIF\n    ENDIF\nENDIF\nPOINT AWS LINE 1\nTRAP\nFIND /BLOP/\nIF TC EQ 0\n    %READ AWS %SEQ% CARD\n    LET BAMODE  = SUBSTR(CARD 14 2)\n    LET BRMODE  = SUBSTR(CARD 23)\nENDIF\nIF BAMODE NE '31' AND BAMODE NE '24'\n    LET BAMODE = '31'\nENDIF\nIF BRMODE EQ 'ANY'\n    IF BAMODE NE '31'\n        LET BRMODE = '24'\n    ENDIF\nELSE\n    IF BRMODE NE '24'\n        IF BAMODE EQ '31'\n            LET BRMODE = 'ANY'\n        ELSE\n            LET BRMODE = '24'\n        ENDIF\n    ENDIF\nENDIF\n<<DOEDITS>>\nLET P.JNAM = LTRIM(TRIM(TRIM(TRIM(P.JNAM '.') '_')))\nIF LENGTH(P.JNAM) LT 1\n    LET P.JNAM = 'D'\nENDIF\nIF LENGTH(P.JNAM) LT 3\n    %LET P.JNAM = '%P.JNAM%%S.PREFIX%'\nENDIF\nIF LENGTH(P.JNAM) LT 8\n    LET P.JNAM = PAD(P.JNAM 8 '.')\nENDIF\nIF SUBSTR(P.JNAM 1 1) NE 'D'\n    LET P.MSG = 'JOB NAME MUST BEGIN WITH \"D\" (DEVELOPMENT)'\n    LET ERRFLD   = 'P.JNAM'\n    GOTO <<PANSEND>>\nENDIF\nLET PROJ = UPCASE(SUBSTR(P.JNAM 2 4))\nIF NOT CONFORM(SUBSTR(PROJ 1 2) 'AN')\n    LET P.MSG = 'JOB NAME CHARACTERS 2 TO 3 MUST BE ALPHANUMERIC'\n    LET ERRFLD   = 'P.JNAM'\n    GOTO <<PANSEND>>\nENDIF\nLET P.ACCT = LTRIM(TRIM(TRIM(P.ACCT '_')))\nIF LENGTH(P.ACCT) NE 4\n    LET P.ACCT = PAD(P.ACCT 4 '_')\n    LET P.MSG = 'ACCOUNT CODE MISSING OR INCOMPLETE'\n    LET ERRFLD   = 'P.ACCT'\n    GOTO <<PANSEND>>\nENDIF\nLET P.ROOM = LTRIM(TRIM(TRIM(P.ROOM '_')))\nIF LENGTH(P.ROOM) EQ 0\n    LET P.MSG = 'ROOM NUMBER MISSING'\n    LET ERRFLD   = 'P.ROOM'\n    GOTO <<PANSEND>>\nENDIF\nLET P.UNAM = LTRIM(TRIM(TRIM(P.UNAM '_')))\nIF P.UNAM EQ ''\n    LET P.UNAM = SUBSTR(FORMLKEY INDEX(FORMLKEY '.')+1 11)\n    IF INDEX(P.UNAM '.') GT 0\n        LET P.UNAM = SUBSTR(P.UNAM 1 INDEX(P.UNAM '.')-1)\n    ENDIF\nENDIF\nLET P.PRTR = LTRIM(TRIM(TRIM(P.PRTR '_')))\nIF LENGTH(P.PRTR) EQ 0\n    LET P.MSG = 'REMOTE PRINTER ID MISSING'\n    LET ERRFLD   = 'P.PRTR'\n    GOTO <<PANSEND>>\nENDIF\nLET P.DIVN = LTRIM(TRIM(TRIM(P.DIVN '_')))\nIF LENGTH(P.DIVN) EQ 0\n    LET P.DIVN = 'ASD'\nELSE\n    IF LENGTH(P.DIVN) NE 3\n        LET P.MSG = 'DIV MUST BE 3 CHARACTERS (XXX, YYY, ETC)'\n        LET ERRFLD   = 'P.DIVN'\n        GOTO <<PANSEND>>\n    ENDIF\nENDIF\nLET P.SRCE = LTRIM(TRIM(TRIM(P.SRCE '_')))\nIF P.SRCE EQ 'D'\n    LET P.SRCE = 'DVL.SOURCE.LIBMAST'\nENDIF\nIF P.SRCE EQ 'S'\n    LET P.SRCE = 'HLQ.SOURCE.LIBMAST'\nENDIF\nIF P.SRCE EQ 'P'\n    LET P.SRCE = 'HLQ.XXX.PRD.LIBMAST'\nENDIF\nIF LENGTH(P.SRCE) EQ 0\n    LET P.MSG = 'SOURCE LIBRARY NAME MISSING (D=DVL, S=SAT, P=PROD)'\n    LET ERRFLD   = 'P.SRCE'\n    GOTO <<PANSEND>>\nENDIF\nLET P.CLNK = LTRIM(TRIM(TRIM(P.CLNK '_')))\nIF LENGTH(P.CLNK) EQ 0\n    LET P.MSG = 'ONLINE LINK LIBRARY NAME MISSING'\n    LET ERRFLD   = 'P.CLNK'\n    GOTO <<PANSEND>>\nENDIF\nLET P.BLNK = LTRIM(TRIM(TRIM(P.BLNK '_')))\nIF LENGTH(P.BLNK) EQ 0\n    LET P.MSG = 'BATCH LINK LIBRARY NAME MISSING'\n    LET ERRFLD   = 'P.BLNK'\n    GOTO <<PANSEND>>\nENDIF\nIF A1 EQ ''\n    IF AID EQ 'PF6' AND PF6OK EQ 'YES'\n        GOTO <<SAVEALL>>\n    ENDIF\n    LET P.MSG = 'PRESS \"PF6\" TO SAVE ABOVE ENTRIES, \"CLEAR\" TO DISCARD'\n    LET PF6OK = 'YES'\n    LET ERRFLD = ''\nELSE\n    GOTO <<SAVEALL>>\nENDIF\n<<PANSEND>>\nLET P.ACCT = PAD(P.ACCT 4 '_')\nLET P.ROOM = PAD(P.ROOM 8 '_')\nLET P.UNAM = PAD(P.UNAM 11 '_')\nLET P.PRTR = PAD(P.PRTR 8 '_')\nLET P.SRCE = PAD(P.SRCE 34 '_')\nLET P.CLNK = PAD(P.CLNK 34 '_')\nLET P.BLNK = PAD(P.BLNK 34 '_')\nIF ERRFLD EQ ''\n    LET ERRFLD = 'P.JNAM'\nELSE\n    LET PF6OK = 'NO'\nENDIF\n%PANEL %SENDPFX%SEND CURSOR %ERRFLD%\nIF AID EQ 'CLEAR'\n    GOTO <<RETURN>>\nENDIF\nLET ERRFLD = ''\nLET SENDPFX = 'RE'\nLET P.MSG = ' '\nGOTO <<DOEDITS>>\n<<SAVEALL>>\nDELETE\n%01 JNAM = %TRIM(P.JNAM '.')%\n%02 ACCT = %P.ACCT%\n%03 ROOM = %P.ROOM%\n%04 UNAM = %P.UNAM%\n%05 MCLS = %MCLS%\n%06 PRTR = %P.PRTR%\n%07 DIVN = %P.DIVN%\n%08 SRCE = %P.SRCE%\n%09 CCOP = %CCOP%\n%10 BCOP = %BCOP%\n%11 CLNK = %P.CLNK%\n%12 BLNK = %P.BLNK%\n%13 CLOP = AMODE=%CAMODE%,RMODE=%CRMODE%\n%14 BLOP = AMODE=%BAMODE%,RMODE=%BRMODE%\nUPDATE $$JPARMS\n<<RETURN>>\nDELETE\nDISCARD AWS JSETUP\nPOP\nRETURN\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$CC": {"ttr": 1287, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01$\\x1f\\x01\\x01$\\x1f\\x13B\\x00\\xc1\\x00\\xc1\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-08-29T00:00:00", "modifydate": "2001-08-29T13:42:00", "lines": 193, "newlines": 193, "modlines": 0, "user": "EGHF3PY"}, "text": "<<$CC>>  A1=A/B/C, A2=L/MEMNAME, A3=REP/SUB, A4=REP/SUB\n  SET STMTCNT MAX\n  PUSH\n  EXEC PFX.CCSESSET\n  DECLARE OPTION MEMBER REPLACE SUBMIT ERRS<4>\n  LET REPLACE = 'N'\n  LET SUBMIT = 'N'\n  DECLARE NMSG PMSG PTR CURPOS FLD NLIST LIST REPL SUBM SHOWEX\n  EXEC PFX.CCDEFSET 'NO DISPLAY IF OK'\n  CREATE AWS CCLIST NONRECOVERABLE LEVEL\n  LET NLIST = 0\n  TRAP\n  DELETE $$CCMSGS\n  TRAP OFF\n  LET PTR = 2\n  SELECT FIRST\n    WHEN A1 EQ '='\n      LET LIST = A2\n    WHEN A1 EQ 'L'\n      LET LIST = A2\n      LET MEMBER = 'L'\n    WHEN LENGTH(A1) EQ 1\n      LET OPTION = A1\n      LET MEMBER = A2\n      IF A2 EQ 'L'\n          LET LIST = A3\n          LET PTR = 3\n      ENDIF\n    WHEN NONE\n      LET MEMBER = A1\n      LET PTR = 1\n  ENDSEL\n  IF A<PTR+1> EQ 'REP' OR A<PTR+2> EQ 'REP'\n      LET REPL = 'REP'\n      LET REPLACE = 'Y'\n  ENDIF\n  IF A<PTR+1> EQ 'SUB' OR A<PTR+2> EQ 'SUB'\n      LET SUBM = 'SUB'\n      LET SUBMIT = 'Y'\n  ENDIF\n  IF A1 EQ '='\n     %FETCH %LIST%\n      RENUMBER 1 1\n      UPDATE $$CCLIST\n  ELSE\n      LOOP\n          DO <<EDITS>>\n        UNTIL NMSG EQ 0\n          PANEL ACTIVATE PFX.CCXXXPAN\n          DO <<PANPUT>>\n         %PANEL SEND CURSOR P.%CURPOS%\n          IF AID EQ 'CLEAR'\n              POP\n              STOP\n          ELSE\n              DO <<PANGET>>\n              SELECT FIRST\n                WHEN AID EQ 'PF1'\n                  EXEC PFX.CCHLPSHO 'CCXXX'\n                  SELECT AWS CCLIST\n                WHEN AID EQ 'PF2'\n                  EXEC PFX.CCDEFSET\n                  SELECT AWS CCLIST\n              ENDSEL\n          ENDIF\n      ENDLOOP\n      IF MEMBER EQ 'L'\n         %EXEC PFX.$CC%OPTION%L LIST REPL SUBM\n          SELECT AWS CCLIST\n      ELSE\n          DELETE\n         %1 %PAD(MEMBER 9)%%OPTION%\n          UPDATE $$CCLIST\n      ENDIF\n  ENDIF\n  FETCH $$CCLIST\n  LET NLIST = AWSCOUNT\n  LOOP PTR FROM 1 TO NLIST BY 1\n     %READ AWS %PTR% MEMBER\n      LET OPTION = SUBSTR(MEMBER 10 1)\n      LET MEMBER = TRIM(SUBSTR(MEMBER 1 8))\n      SELECT AWS ROS1\n     %EXEC PFX.$CC%OPTION% MEMBER REPL SUBM '%NLIST-PTR%'\n    UNTIL PTR EQ NLIST\n      SELECT AWS CCLIST\n  ENDLOOP\n  IF AID NE 'PF8'\n      TRAP\n      FIND $$CCMSGS\n      TRAP OFF\n      IF TC EQ 0\n          DELETE\n          COPY $$CCMSGS T\n          DELETE $$CCMSGS\n      ENDIF\n  ENDIF\n  IF AWSCOUNT GT 0\n      ATTACH\n  ENDIF\n  POP\n  RETURN\n<<PANGET>> PROC\n  LET OPTION  = TRIM(TRIM(P.OPTION '_'))\n  LET MEMBER  = TRIM(TRIM(P.MEMBER '_'))\n  LET REPLACE = TRIM(TRIM(P.REPLACE '_'))\n  LET SUBMIT  = TRIM(TRIM(P.SUBMIT '_'))\nENDPROC\n<<PANPUT>> PROC\n  LET PMSG = 0\n  LET CURPOS = ''\n  LET P.OPTION  = PAD(OPTION MAXLEN(P.OPTION) '_')\n  LET P.MEMBER  = PAD(MEMBER MAXLEN(P.MEMBER) '_')\n  LET P.REPLACE = PAD(REPLACE MAXLEN(P.REPLACE) '_')\n  LET P.SUBMIT  = PAD(SUBMIT MAXLEN(P.SUBMIT) '_')\n  IF SHOWEX EQ '\\'\n     %LOOP PTR FROM 1 TO %HBOUND(P.XTRA)% BY 1\n          LET A.XTRA<PTR> = 'S'\n      ENDLOOP\n  ENDIF\n  LOOP PTR FROM 1 TO 4 BY 1\n      IF ERRS<PTR> NE ''\n          LET PMSG = PMSG + 1\n          IF PMSG LT 4\n             %LET P.MSG<%3-NMSG+PMSG%> = ERRS<PTR>\n          ENDIF\n          LET FLD = SUBSTR('OPTION MEMBER REPLACESUBMIT ' PTR*7-6 7)\n          LET FLD = TRIM(FLD)\n         %LET A.%FLD% = 'UHM'\n          IF CURPOS EQ ''\n              LET CURPOS = FLD\n          ENDIF\n          LET ERRS<PTR> = ''\n      ENDIF\n  ENDLOOP\nENDPROC\n<<EDITS>> PROC\n  LET NMSG = 0\n  IF OPTION EQ '\\'\n      LET SHOWEX = '\\'\n      LET OPTION = ' '\n  ENDIF\n  IF OPTION EQ 'A'\n  ELSE\n  IF OPTION EQ 'B'\n  ELSE\n  IF OPTION EQ 'C'\n  ELSE\n  IF OPTION EQ 'P' AND SHOWEX EQ '\\'\n  ELSE\n  IF OPTION EQ 'T' AND SHOWEX EQ '\\'\n  ELSE\n  IF OPTION EQ ''\n      LET ERRS<1> = 'MAKE A SELECTION FROM THE MENU ABOVE'\n      LET NMSG = NMSG + 1\n  ELSE\n      LET ERRS<1> = 'INVALID SELECTION - MUST BE ONE OF THOSE ABOVE'\n      LET NMSG = NMSG + 1\n  ENDIF\n  ENDIF\n  ENDIF\n  ENDIF\n  ENDIF\n  ENDIF\n  IF MEMBER EQ ''\n      LET ERRS<2> = 'ENTER THE NAME OF THE LIBRARY MEMBER TO BE'\n      LET ERRS<2> = ERRS<2> | ' COMPILED, OR \"L\" TO PROCESS A LIST'\n      LET NMSG = NMSG + 1\n  ENDIF\n  SELECT FIRST\n    WHEN REPLACE EQ ''\n      LET REPLACE = 'N'\n      LET REPL = ''\n    WHEN REPLACE EQ 'N'\n      LET REPL = ''\n    WHEN REPLACE EQ 'Y'\n      LET REPL = 'REP'\n    WHEN NONE\n      LET ERRS<3> = 'REPLACE MUST BE \"Y\" OR \"N\" (YES OR NO)'\n      LET NMSG = NMSG + 1\n  ENDSEL\n  SELECT FIRST\n    WHEN SUBMIT EQ ''\n      LET SUBMIT = 'N'\n      LET SUBM = ''\n    WHEN SUBMIT EQ 'N'\n      LET SUBM = ''\n    WHEN SUBMIT EQ 'Y'\n      LET SUBM = 'SUB'\n    WHEN NONE\n      LET ERRS<3> = 'SUBMIT MUST BE \"Y\" OR \"N\" (YES OR NO)'\n      LET NMSG = NMSG + 1\n  ENDSEL\nENDPROC\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$CCA": {"ttr": 1291, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x01$\\x1f\\x01\\x01$\\x1f\\x13R\\x01\\x86\\x01\\x86\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2001-08-29T00:00:00", "modifydate": "2001-08-29T13:52:00", "lines": 390, "newlines": 390, "modlines": 0, "user": "EGHF3PY"}, "text": "<<$CCA>> : A1=MEMBER  <A2=REP/SUB>  <A3=REP/SUB> A4=LAST?(YES=0)\n  EXEC PFX.CCSESSET\n  SET STMTCNT MAX\n  DECLARE MEMBER REPLACE ROSMEM SUBMIT SAVE<3> EMSG<3>\n  DECLARE NVAR PTR CARD CURPOS NMSG RETINFO<5>\n  LET MEMBER = A1\n  IF A2 EQ 'REP' OR A3 EQ 'REP'\n      LET REPLACE = 'Y'\n  ELSE\n      LET REPLACE = 'N'\n  ENDIF\n  IF A2 EQ 'SUB' OR A3 EQ 'SUB'\n      LET SUBMIT = 'Y'\n  ELSE\n      LET SUBMIT = 'N'\n  ENDIF\n  DECLARE VARS<14> DESC<14> MSGS<14>\n  LET NVAR = 14                     : NUMBER OF VARIABLE NAMES IN PANEL\n  LET VARS<01> = 'SRCE'\n  LET VARS<02> = 'MAPC'\n  LET VARS<03> = 'OLNK'\n  LET VARS<04> = 'APID'\n  LET VARS<05> = 'ENVR'\n  LET VARS<06> = 'ACBK'\n  LET VARS<07> = 'ALOP'\n  LET VARS<08> = 'AMOP'\n  LET VARS<09> = 'JNAM'\n  LET VARS<10> = 'ACCT'\n  LET VARS<11> = 'ROOM'\n  LET VARS<12> = 'UNAM'\n  LET VARS<13> = 'MSGC'\n  LET VARS<14> = 'REMT'\n  DO <<GETDEFS>>\n  DO <<EDITS>>\n  LOOP\n    UNTIL NMSG EQ 0 AND SUBMIT NE 'N'\n      PANEL ACTIVATE PFX.CCAXXPAN\n      DO <<PUTPAN>>\n     %PANEL SEND CURSOR P.%CURPOS%\n      LET CURPOS = ''\n      IF AID EQ 'CLEAR'\n          LET NMSG = 0\n          LET SUBMIT = 'Q'\n      ELSE\n          DO <<GETPAN>>\n          DO <<EDITS>>\n          SELECT FIRST\n            WHEN AID EQ 'PF1'\n              EXEC PFX.CCHLPSHO 'CCAXX'\n              SELECT AWS ROS1\n            WHEN AID EQ 'PF2'\n              EXEC PFX.CCDEFSET\n              DO <<GETDEFS>>\n          ENDSEL\n          SELECT FIRST\n            WHEN NMSG NE 0\n              RELOOP\n            WHEN AID EQ 'PF9'\n              LET SUBMIT = 'Y'\n            WHEN AID EQ 'PF8'\n              LET SUBMIT = 'A'\n          ENDSEL\n      ENDIF\n  ENDLOOP\n  SELECT FIRST\n    WHEN SUBMIT EQ 'Y'\n      DO <<BUILDJCL>>\n      SET MSGLEVEL ERROR\n      SUBMIT\n      LET PTR = INDEX(LASTERR ' <')\n      IF PTR LE 0\n          LET PTR = LENGTH(LASTERR)\n      ENDIF\n     %LET CARD = SUBSTR(LASTERR 1 %PTR%)\n      CREATE AWS CCMSGS NONRECOVERABLE LEVEL\n      TRAP\n      FETCH $$CCMSGS\n      TRAP OFF\n      %%AWSCOUNT+1% %CARD%\n      UPDATE $$CCMSGS\n    WHEN SUBMIT EQ 'A'\n      DO <<BUILDJCL>>\n      ATTACH\n      IF A4 GT 0\n          RESPONSE 'WHEN READY TO CONTINUE, ENTER \"GO\"'\n          PAUSE\n      ENDIF\n    WHEN NONE\n      DELETE\n  ENDSEL\n  RETURN\n<<GETDEFS>> PROC\n  LOOP PTR FROM 1 TO NVAR BY 1\n      EXEC PFX.CCDEFGET VARS<PTR>\n      LET DESC<PTR> = R1\n  ENDLOOP\n  SELECT AWS ROS1\nENDPROC\n<<BUILDJCL>> PROC\n  SELECT AWS ROS1\n  DELETE\n  COPY PFX.CCJOBJCL T\n:::::::::::::: INSERT ACS DESTINATION INFO\n  TRAP ON\n  COPY ACSDEST B\n  %EDIT /&TITLE1/%MEMBER%/\n  TRAP OFF\n  LOOP PTR FROM 1 TO NVAR BY 1\n    UNTIL VARS<PTR> EQ 'ACBK'\n  ENDLOOP\n %COPY PFX.CCA%DESC<PTR>%XJCL B\n  IF DESC<PTR> EQ 'S'\n      LOOP PTR FROM 1 TO NVAR BY 1\n        UNTIL VARS<PTR> EQ 'APID'\n      ENDLOOP\n      IF DESC<PTR> EQ 'ACS'\n          EDIT /?LNAMD/?MEMB/\n          EDIT /CLASS=J/CLASS=K/\n      ENDIF\n  ENDIF\n  TRAP\n  LET CARD = ''\n  LOOP PTR FROM 1 TO NVAR BY 1\n      SELECT FIRST\n        WHEN VARS<PTR> EQ 'APID'\n          IF TRIM(DESC<PTR>) EQ 'ACS'\n:*--------------------------------------------------------------------*\n:*            FIND /AUXINC1/                                          *\n:*           %EDIT /HHLQ?APID.SAT.LIBMAST/PROD.SOURCE.LIBMAST/%SEQ%  *\n:*            FIND /AUXINC3/                                          *\n:*           %EDIT /DUMMY/DSN=HHLQ?APID.?ENVR.LIBMAST,DISP=SHR/%SEQ% *\n:*--------------------------------------------------------------------*\n              FIND /AUXINC2/\n             %EDIT /DSN=HHLQ?APID.?ENVR.LIBMAST,DISP=SHR/DUMMY/%SEQ%\n              EDIT /CLASS=J/CLASS=K/\n          ENDIF\n         %EDIT `?%VARS<PTR>%`%DESC<PTR>%`\n        WHEN VARS<PTR> EQ 'UNAM'\n          LET NMSG = NMSG + 1\n          LET CARD = DESC<PTR>\n        WHEN NONE\n         %EDIT `?%VARS<PTR>%`%DESC<PTR>%`\n      ENDSEL\n  ENDLOOP\n %EDIT `?PSWD`%RETINFO<1>%`\n %EDIT `?LNAM`%RETINFO<4>%`\n  EDIT /MEM='CMC/MEM='CMK/\n  EDIT /PPTNAME='CMC/PPTNAME='CMK/\n %EDIT `?MEMB`%MEMBER%`\n %EDIT `?JPRO`%TRIM(SUBSTR(CARD|' '|MEMBER 1 20))%`\n  POINT AWS LINE T\n  FIND /-REP ALL/\n  IF REPLACE EQ 'Y' AND ROSMEM NE '$$CANCEL' AND ROSMEM NE ''\n      %COPY %ROSMEM% %SEQ%\n      TRAP\n     %FIND /*       LIB ASM /%SEQ% 999999\n      IF TC EQ 0\n          %READ AWS %SEQ% CARD\n          LET RETINFO<2> = SUBSTR(CARD 26 15)\n          LET RETINFO<3> = SUBSTR(CARD 42)\n      ENDIF\n  ELSE\n      %DELETE %SEQ%\n  ENDIF\n  LOOP PTR FROM 1 TO NVAR BY 1\n    UNTIL VARS<PTR> EQ 'ACBK'\n  ENDLOOP\n  IF DESC<PTR> EQ 'S'\n      POINT\n     %FIND /-ADD / 1 %HIGHSEQ%\n      LOOP PTR FROM 1 TO NVAR BY 1\n        UNTIL VARS<PTR> EQ 'APID'\n      ENDLOOP\n      IF DESC<PTR> EQ 'ACS'\n          TRAP\n         %EDIT /-ADD CMC/-ADD CMK/%SEQ%\n          TRAP OFF\n      ENDIF\n      IF RETINFO<5> EQ 'DSECT'\n          %EDIT /-ADD /-SEL /%SEQ%\n          %EDIT /PSWD=//%SEQ%\n      ENDIF\n     %FIND /-REP ALL/%SEQ% %HIGHSEQ%\n      IF RETINFO<5> EQ 'NODSECT'\n          %DELETE %SEQ%\n      ENDIF\n      FIND /      * LIB COB /\n     %READ AWS %SEQ% CARD\n      LET CARD = MODIFY(PAD(CARD 72) RETINFO<4> 17)\n      LET CARD = MODIFY(PAD(CARD 72) RETINFO<2> 26)\n      LET CARD = MODIFY(PAD(CARD 72) RETINFO<3> 42)\n     %%SEQ% %CARD%\n  ENDIF\n %EDIT `?PGMR`%RETINFO<2>%`\n %EDIT `?DESC`%RETINFO<3>%`\n  TRAP OFF\nENDPROC\n<<GETPAN>> PROC\n  LET MEMBER  = TRIM(TRIM(P.MEMBER '_'))\n  LET REPLACE = TRIM(TRIM(P.REPLACE '_'))\n  LET ROSMEM  = TRIM(TRIM(P.ROSMEM '_'))\n  LOOP PTR FROM 1 TO NVAR BY 1\n     %LET CARD = TRIM(TRIM(P.%VARS<PTR>% '_'))\n      IF CARD NE DESC<PTR>\n          LET DESC<PTR> = CARD\n      ENDIF\n  ENDLOOP\n  LET CARD = ''\nENDPROC\n<<PUTPAN>> PROC\n  LET NMSG = 0\n  LET P.MEMBER = PAD(MEMBER MAXLEN(P.MEMBER) '_')\n  IF EMSG<1> NE ''\n      LET NMSG = NMSG + 1\n      LET P.MSG<NMSG> = EMSG<1>\n      LET A.MEMBER = 'UHM'\n      LET CURPOS = 'MEMBER'\n  ENDIF\n  LET P.REPLACE = PAD(REPLACE MAXLEN(P.REPLACE) '_')\n  IF EMSG<2> NE ''\n      LET NMSG = NMSG + 1\n      LET P.MSG<NMSG> = EMSG<2>\n      LET A.REPLACE = 'UHM'\n      LET CURPOS = 'REPLACE'\n  ENDIF\n  IF REPLACE EQ 'Y'\n      LET A.ROSLIT = 'SL'\n      LET P.ROSMEM = PAD(ROSMEM MAXLEN(P.ROSMEM) '_')\n      IF EMSG<3> NE ''\n          LET NMSG = NMSG + 1\n          LET P.MSG<NMSG> = EMSG<3>\n          IF INDEX(EMSG<3> 'CANCELLED') GT 0\n              LET A.ROSMEM = 'ULM'\n          ELSE\n              LET CURPOS = 'ROSMEM'\n              LET A.ROSMEM = 'UHM'\n          ENDIF\n      ELSE\n          LET A.ROSMEM = 'ULM'\n      ENDIF\n  ELSE\n      LET A.ROSLIT = 'SI'\n      LET A.ROSMEM = 'SIM'\n  ENDIF\n  LOOP PTR FROM 1 TO NVAR BY 1\n     %LET P.%VARS<PTR>% = PAD(DESC<PTR> MAXLEN(P.%VARS<PTR>%) '_')\n      IF MSGS<PTR> NE ''\n          LET NMSG = NMSG + 1\n          IF NMSG LT 4\n              LET P.MSG<NMSG> = MSGS<PTR>\n          ENDIF\n          IF INDEX(MSGS<PTR> 'DEFAULT' 1) LE 0\n             %LET A.%VARS<PTR>% = 'UHM'\n              IF CURPOS EQ ''\n                  LET CURPOS = VARS<PTR>\n              ENDIF\n          ENDIF\n      ENDIF\n  ENDLOOP\n  IF NMSG EQ 0\n      LET P.MSG<1> = 'PRESS \"PF8\" TO EDIT JCL IN YOUR AWS,'\n      LET P.MSG<1> = P.MSG<1> | ' \"PF9\" TO SUBMIT THE JOB'\n  ENDIF\n  IF CURPOS EQ ''\n      LET CURPOS = 'MEMBER'\n  ENDIF\nENDPROC\n<<EDITS>> PROC\n  LET NMSG = 0\n  LET EMSG<1> = EMSG<2> = EMSG<3> = ''\n  LOOP PTR FROM 1 TO NVAR BY 1\n    UNTIL VARS<PTR> EQ 'SRCE'\n  ENDLOOP\n  IF LENGTH(MEMBER) EQ 0\n      LET EMSG<1> = 'A LIBRARIAN MEMBER NAME IS REQUIRED'\n      LET NMSG = NMSG + 1\n  ELSE\n      IF MEMBER NE SAVE<1>\n          IF LENGTH(DESC<PTR>) EQ 0\n              EXEC PFX.CCDEFGET VARS<PTR>\n              SELECT AWS ROS1\n              LET DESC<PTR> = R1\n          ENDIF\n          EXEC PFX.CCMEMSEL MEMBER DESC<PTR>\n          SELECT AWS ROS1\n          IF R1 EQ ''\n              LET EMSG<1> = 'SELECTED MEMBER NAME HAS NO MATCH'\n              LET EMSG<1> = EMSG<1> | ' ON LIBRARIAN'\n              LET NMSG = NMSG + 1\n          ELSE\n              LET MEMBER     = R1\n              LET RETINFO<1> = R2\n              LET RETINFO<2> = R3\n              LET RETINFO<3> = R4\n              LET RETINFO<4> = R5\n              LET RETINFO<5> = R6\n          ENDIF\n      ENDIF\n  ENDIF\n  SELECT FIRST\n    WHEN REPLACE EQ 'N'\n      LET ROSMEM = ''\n    WHEN REPLACE EQ 'Y'\n      IF ROSMEM NE SAVE<3> OR ROSMEM EQ ''\n          IF ROSMEM EQ ''\n              LET ROSMEM = MEMBER\n          ENDIF\n          EXEC PFX.CCROSSEL ROSMEM\n          SELECT AWS ROS1\n          SELECT FIRST\n            WHEN R1 EQ ''\n              LET EMSG<3> = 'SELECTED ROSCOE MEMBER NAME HAS NO MATCH'\n              LET EMSG<3> = EMSG<3> | ' IN YOUR ROSCOE LIBRARY'\n              LET NMSG = NMSG + 1\n            WHEN R1 EQ '$$CANCEL'\n              LET EMSG<3> = 'LIBRARY MEMBER REPLACEMENT FROM ROSCOE'\n              LET EMSG<3> = EMSG<3> | ' HAS BEEN CANCELLED'\n              LET NMSG = NMSG + 1\n              LET REPLACE = 'N'\n              LET ROSMEM = ''\n            WHEN NONE\n              LET ROSMEM = R1\n          ENDSEL\n      ENDIF\n    WHEN NONE\n      LET EMSG<2> = '\"REPLACE\" MUST BE \"Y\"(YES) OR \"N\"(NO)'\n      LET NMSG = NMSG + 1\n  ENDSEL\n  LOOP PTR FROM 1 TO NVAR BY 1\n      IF LENGTH(DESC<PTR>) EQ 0\n          EXEC PFX.CCDEFGET VARS<PTR>\n          SELECT AWS ROS1\n          LET DESC<PTR> = R1\n      ENDIF\n      LET MSGS<PTR> = ''\n      SELECT FIRST\n        WHEN VARS<PTR> EQ 'APID'\n          IF LENGTH(DESC<PTR>) EQ 0\n              LET MSGS<PTR> = 'APPLICATION ID IS MISSING'\n          ENDIF\n        WHEN VARS<PTR> EQ 'ACBK'\n          IF DESC<PTR> NE 'C' AND DESC<PTR> NE 'S'\n              LET MSGS<PTR> = 'COPYBOOK DESTINATION MUST BE \"C\" (COPY'\n              LET MSGS<PTR> = MSGS<PTR> | 'LIB) OR \"S\" (SOURCE LIB)'\n          ENDIF\n        WHEN VARS<PTR> EQ 'JNAM'\n          SELECT FIRST\n:*--------------------------------------------------------------------*\n:*          WHEN SUBSTR(DESC<PTR> 1 1) NE 'D'                         *\n:*            LET MSGS<PTR> = 'JOB NAME STUB MUST BEGIN WITH'         *\n:*            LET MSGS<PTR> = MSGS<PTR> | ' \"D\" FOR DEVELOPMENT'      *\n:*--------------------------------------------------------------------*\n            WHEN LENGTH(DESC<PTR>) LT 3\n              LET MSGS<PTR> = 'JOB NAME MUST BE AT LEAST'\n              LET MSGS<PTR> = MSGS<PTR> | ' 3 CHARACTERS LONG'\n            WHEN NOT CONFORM(DESC<PTR> 'AN')\n              LET MSGS<PTR> = 'CHARACTERS IN JOB NAME MUST'\n              LET MSGS<PTR> = MSGS<PTR> | ' BE ALPHANUMERIC'\n            WHEN NONE\n              EXEC PFX.CCDEFGET 'JNAM'\n              IF SUBSTR(DESC<PTR> 1 LENGTH(R1)) EQ R1\n                  LET CARD = PAD(SAVE<1> 6)\n                  LET CARD = SUBSTR(CARD LENGTH(R1)-1 8-LENGTH(R1))\n                  LET CARD = TRIM(CARD)\n                  SELECT FIRST\n                    WHEN DESC<PTR> EQ R1\n                    WHEN TRIM(SUBSTR(DESC<PTR> LENGTH(R1)+1)) EQ CARD\n                    WHEN ANY\n                      LET CARD = PAD(MEMBER 6)\n                      LET CARD = SUBSTR(CARD LENGTH(R1)-1 8-LENGTH(R1))\n                      LET DESC<PTR> = R1|CARD\n                  ENDSEL\n              ENDIF\n          ENDSEL\n        WHEN VARS<PTR> EQ 'ACCT'\n          IF LENGTH(DESC<PTR>) NE 4\n              LET MSGS<PTR> = 'ACCOUNT CODE MUST CONTAIN 4 CHARACTERS'\n          ENDIF\n      ENDSEL\n      IF MSGS<PTR> NE ''\n          LET NMSG = NMSG + 1\n      ENDIF\n  ENDLOOP\n  IF EMSG<1> EQ ''\n      LET SAVE<1> = MEMBER\n  ENDIF\n  IF EMSG<3> EQ ''\n      LET SAVE<3> = ROSMEM\n  ENDIF\nENDPROC\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$CCAL": {"ttr": 1543, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01$\\x1f\\x01\\x01$\\x1f\\x13F\\x00\\x95\\x00\\x95\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-08-29T00:00:00", "modifydate": "2001-08-29T13:46:00", "lines": 149, "newlines": 149, "modlines": 0, "user": "EGHF3PY"}, "text": "<<$CCAL>> : A1=LISTNAME  <A2=REP/SUB>  <A3=REP/SUB>\n  EXEC PFX.RESET\n  DECLARE LISTNAME SAVENAME MEMB EMSG TOPPTR REPL SUBM\n  DECLARE NSLOTS NMEMBS PTR CARD CURPOS NMSG RETINFO<4>\n  TRAP\n  DELETE $$CCLIST\n  TRAP OFF\n  LET TOPPTR = 0\n  LET LISTNAME = A1\n  IF A2 EQ 'REP' OR A3 EQ 'REP'\n      LET REPL = 'Y'\n  ELSE\n      LET REPL = 'N'\n  ENDIF\n  IF A2 EQ 'SUB' OR A3 EQ 'SUB'\n      LET SUBM = 'Y'\n  ELSE\n      LET SUBM = 'N'\n  ENDIF\n  DO <<EDITS>>\n  LOOP\n    UNTIL NMSG EQ 0 AND AID EQ 'PF6'\n      DO <<PUTPAN>>\n     %PANEL SEND CURSOR P.%CURPOS%\n      LET CURPOS = ''\n      IF AID EQ 'CLEAR'\n          POP\n          STOP\n      ELSE\n          DO <<GETPAN>>\n          DO <<EDITS>>\n          SELECT FIRST\n            WHEN AID EQ 'PF1'\n              EXEC PFX.CCHLPSHO 'CCALX'\n              SELECT AWS ROS1\n            WHEN AID EQ 'PF2'\n              EXEC PFX.CCDEFSET\n              SELECT AWS ROS1\n            WHEN AID EQ 'PF7'\n              LET TOPPTR = TOPPTR - NSLOTS\n              IF TOPPTR LT 0\n                  LET TOPPTR = 0\n              ENDIF\n            WHEN AID EQ 'PF8'\n              LET TOPPTR = TOPPTR + NSLOTS\n              IF TOPPTR GE NMEMBS\n                  LET TOPPTR = NMEMBS - 1\n              ENDIF\n          ENDSEL\n      ENDIF\n  ENDLOOP\n  RETURN\n<<GETPAN>> PROC\n  LET LISTNAME = TRIM(TRIM(P.LISTNAME '_'))\n  DELETE\n  TRAP\n  FETCH $$CCLIST\n  TRAP OFF\n %LOOP PTR FROM 1 TO %NSLOTS% BY 1\n      LET MEMB = TRIM(TRIM(P.MEMB<PTR> '_'))\n      IF MEMB EQ ''\n          TRAP\n         %DELETE %TOPPTR+PTR%\n          TRAP OFF\n      ELSE\n         %%TOPPTR+PTR% %MEMB%\n      ENDIF\n  ENDLOOP\n  IF AWSCOUNT GT 0\n      DO <<PREPLIST>>\n      UPDATE $$CCLIST\n  ENDIF\nENDPROC\n<<PUTPAN>> PROC\n  TRAP\n  FETCH $$CCLIST\n  TRAP OFF\n  PANEL ACTIVATE PFX.CCALXPAN\n  LET NSLOTS = HBOUND(P.MEMB)\n  LET P.LISTNAME = PAD(LISTNAME 8 '_')\n  LOOP PTR FROM 1 TO NSLOTS BY 1\n    UNTIL TOPPTR+PTR GT AWSCOUNT\n     %READ AWS %TOPPTR+PTR% CARD\n      LET P.MEMB<PTR> = PAD(TRIM(SUBSTR(PAD(CARD 8) 1 8)) 8 '_')\n  ENDLOOP\n  IF NMSG EQ 0\n      LET P.MSG = 'PRESS \"PF6\" TO CONFIRM WHEN MEMBER LIST IS COMPLETE'\n  ELSE\n      LET P.MSG = EMSG\n      LET EMSG = ''\n      LET A.LISTNAME = 'UHM'\n      LET CURPOS = 'LISTNAME'\n      IF NMSG EQ 2\n          LET A.MEMB<1> = 'UHM'\n      ENDIF\n  ENDIF\n  IF CURPOS EQ ''\n      LET CURPOS = 'LISTNAME'\n  ENDIF\nENDPROC\n<<EDITS>> PROC\n  LET NMSG = 0\n  IF LISTNAME EQ ''\n      TRAP\n      FETCH $$CCLIST\n      TRAP OFF\n      IF TC NE 0\n          LET EMSG = 'ENTER EITHER A LIST NAME OR AT LEAST '\n          LET EMSG = EMSG | 'ONE MEMBER NAME TO BE COMPILED'\n          LET NMSG = 2\n          LET CURPOS = 'LISTNAME'\n      ENDIF\n  ELSE\n      IF LISTNAME NE SAVENAME\n          TRAP\n         %FIND %LISTNAME%\n          TRAP OFF\n          IF TC EQ 0\n              TRAP\n              FETCH $$CCLIST\n              TRAP OFF\n             %COPY %LISTNAME% B\n              LET SAVENAME = LISTNAME\n          ELSE\n             %LET EMSG = 'ROSCOE MEMBER \"%LISTNAME%\" NOT FOUND'\n              LET NMSG = 1\n              LET CURPOS = 'LISTNAME'\n          ENDIF\n      ENDIF\n  ENDIF\n  IF AWSCOUNT GT 0\n      DO <<PREPLIST>>\n      UPDATE $$CCLIST\n  ENDIF\nENDPROC\n<<PREPLIST>> PROC\n  FILL 81 255 / /\n  RENUMBER 1 1\n  IF AWSCOUNT GT 1\n     %EXEC PFX.IN 81 86 '000001' 1 1 %AWSCOUNT%\n      SORT SORT FIELDS=(1,9,CH,A)\n      EXEC PFX.DELDUPS 1 9\n      SORT SORT FIELDS=(81,6,CH,A)\n      FILL 81 86 / /\n      RENUMBER 1 1\n  ENDIF\n  FILL 10 10 /A/\n  LET NMEMBS = AWSCOUNT\nENDPROC\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$CCB": {"ttr": 1547, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01$\\x1f\\x01\\x01$\\x1f\\x13P\\x01\\xba\\x01\\xba\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-08-29T00:00:00", "modifydate": "2001-08-29T13:50:00", "lines": 442, "newlines": 442, "modlines": 0, "user": "EGHF3PY"}, "text": "<<$CCB>> : A1=MEMBER  <A2=REP/SUB>  <A3=REP/SUB> A4=LAST?(YES=0)\n  EXEC PFX.CCSESSET\n  SET STMTCNT MAX\n  DECLARE MEMBER ROSVAR<2> URTVAR<2> SUBMIT SAVE<5> EMSG<5>\n  DECLARE NVAR PTR CARD CURPOS NMSG RETINFO<4>\n  LET MEMBER = A1\n  IF A2 EQ 'REP' OR A3 EQ 'REP'\n      LET ROSVAR<1> = 'Y'\n  ELSE\n      LET ROSVAR<1> = 'N'\n  ENDIF\n  IF A2 EQ 'SUB' OR A3 EQ 'SUB'\n      LET SUBMIT = 'Y'\n  ELSE\n      LET SUBMIT = 'N'\n  ENDIF\n  DECLARE VARS<15> DESC<15> MSGS<15>\n  LET NVAR = 15                     : NUMBER OF VARIABLE NAMES IN PANEL\n  LET VARS<01> = 'SRCE'\n  LET VARS<02> = 'URTL'\n  LET VARS<03> = 'BLNK'\n  LET VARS<04> = 'BTST'\n  LET VARS<05> = 'APID'\n  LET VARS<06> = 'ENVR'\n  LET VARS<07> = 'BCOP'\n  LET VARS<08> = 'BLOP'\n  LET VARS<09> = 'BMOP'\n  LET VARS<10> = 'JNAM'\n  LET VARS<11> = 'ACCT'\n  LET VARS<12> = 'ROOM'\n  LET VARS<13> = 'UNAM'\n  LET VARS<14> = 'MSGC'\n  LET VARS<15> = 'REMT'\n  DO <<GETDEFS>>\n  SELECT FIRST\n    WHEN LENGTH(MEMBER) EQ 0\n      LET URTVAR<1> = ''\n    WHEN LENGTH(MEMBER) GT 5\n      LET URTVAR<1> = SUBSTR(MEMBER 1 6)|'RT'\n    WHEN LENGTH(MEMBER) GT 5\n      LET URTVAR<1> = MEMBER|'URTVAR<1>'\n  ENDSEL\n  IF URTVAR<1> NE ''\n      EXEC PFX.CCDEFGET 'URTL'\n      EXEC PFX.CCURTSEL URTVAR<1> R1\n      IF R1 EQ ''\n          LET URTVAR<1> = ''\n      ELSE\n          LET URTVAR<1> = R1\n      ENDIF\n  ENDIF\n  IF URTVAR<1> EQ ''\n      LET URTVAR<2> = 'N'\n  ELSE\n      LET URTVAR<2> = 'Y'\n  ENDIF\n  LET SAVE<4> = URTVAR<1>\n  LET SAVE<5> = URTVAR<2>\n  DO <<EDITS>>\n  LOOP\n    UNTIL NMSG EQ 0 AND SUBMIT NE 'N'\n      PANEL ACTIVATE PFX.CCBXXPAN\n      DO <<PUTPAN>>\n     %PANEL SEND CURSOR P.%CURPOS%\n      LET CURPOS = ''\n      IF AID EQ 'CLEAR'\n          LET NMSG = 0\n          LET SUBMIT = 'Q'\n      ELSE\n          DO <<GETPAN>>\n          DO <<EDITS>>\n          SELECT FIRST\n            WHEN AID EQ 'PF1'\n              EXEC PFX.CCHLPSHO 'CCBXX'\n              SELECT AWS ROS1\n            WHEN AID EQ 'PF2'\n              EXEC PFX.CCDEFSET\n              DO <<GETDEFS>>\n          ENDSEL\n          SELECT FIRST\n            WHEN NMSG NE 0\n              RELOOP\n            WHEN AID EQ 'PF9'\n              LET SUBMIT = 'Y'\n            WHEN AID EQ 'PF8'\n              LET SUBMIT = 'A'\n          ENDSEL\n      ENDIF\n  ENDLOOP\n  SELECT FIRST\n    WHEN SUBMIT EQ 'Y'\n      DO <<BUILDJCL>>\n      SET MSGLEVEL ERROR\n      SUBMIT\n      LET PTR = INDEX(LASTERR ' <')\n      IF PTR LE 0\n          LET PTR = LENGTH(LASTERR)\n      ENDIF\n     %LET CARD = SUBSTR(LASTERR 1 %PTR%)\n      CREATE AWS CCMSGS NONRECOVERABLE LEVEL\n      TRAP\n      FETCH $$CCMSGS\n      TRAP OFF\n      %%AWSCOUNT+1% %CARD%\n      UPDATE $$CCMSGS\n    WHEN SUBMIT EQ 'A'\n      DO <<BUILDJCL>>\n      ATTACH\n      IF A4 GT 0\n          RESPONSE 'WHEN READY TO CONTINUE, ENTER \"GO\"'\n          PAUSE\n      ENDIF\n    WHEN NONE\n      DELETE\n  ENDSEL\n  RETURN\n<<GETDEFS>> PROC\n  LOOP PTR FROM 1 TO NVAR BY 1\n      EXEC PFX.CCDEFGET VARS<PTR>\n      LET DESC<PTR> = R1\n  ENDLOOP\n  SELECT AWS ROS1\nENDPROC\n<<BUILDJCL>> PROC\n  LOOP PTR FROM 1 TO NVAR BY 1\n    UNTIL VARS<PTR> EQ 'BTST'\n  ENDLOOP\n  SELECT AWS ROS1\n  DELETE\n  COPY PFX.CCJOBJCL T\n:::::::::::::: INSERT ACS DESTINATION INFO\n  TRAP ON\n  COPY ACSDEST B\n  %EDIT /&TITLE1/%MEMBER%/\n  TRAP OFF\n  IF DESC<PTR> EQ 'Y'\n      IF URTVAR<1> NE ''\n          COPY PFX.CCBDIJCL B\n         +EDIT /?USERID/+GETKEY(S.PREFIX)+/\n      ELSE\n          COPY PFX.CCBXIJCL B\n         +EDIT /?USERID/+GETKEY(S.PREFIX)+/\n      ENDIF\n  ELSE\n      IF URTVAR<1> NE ''\n          COPY PFX.CCBDXJCL B\n      ELSE\n          COPY PFX.CCBXXJCL B\n      ENDIF\n  ENDIF\n  TRAP\n  LET CARD = ''\n  LOOP PTR FROM 1 TO NVAR BY 1\n      SELECT FIRST\n        WHEN VARS<PTR> EQ 'APID'\n          IF TRIM(DESC<PTR>) EQ 'ACS'\n:*--------------------------------------------------------------------*\n:*            FIND /AUXINC1/                                          *\n:*           %EDIT /HHLQ.?APID.SAT.LIBMAST/PROD.SOURCE.LIBMAST/%SEQ%  *\n:*            FIND /AUXINC2/                                          *\n:*           %EDIT /HHLQ.?APID.?ENVR.LIBMAST/PROD.SOURCE.LIBMAST/%SEQ%*\n:*            FIND /AUXINC3/                                          *\n:*           %EDIT /DUMMY/DSN=HHLQ.?APID.?ENVR.LIBMAST,DISP=SHR/%SEQ% *\n:*--------------------------------------------------------------------*\n              FIND /AUXINC2/\n             %EDIT /DSN=HHLQ.?APID.?ENVR.LIBMAST,DISP=SHR/DUMMY/%SEQ%\n              EDIT /CLASS=J/CLASS=K/\n          ENDIF\n        WHEN VARS<PTR> EQ 'BMOP'\n          LET NMSG = NMSG + 1\n          IF INDEX(DESC<PTR> 'RMODE=24') GT 0\n              EDIT /?DLEN/24/\n          ELSE\n              EDIT /?DLEN/31/\n          ENDIF\n        WHEN VARS<PTR> EQ 'UNAM'\n          LET NMSG = NMSG + 1\n          LET CARD = DESC<PTR>\n      ENDSEL\n     %EDIT `?%VARS<PTR>%`%DESC<PTR>%`\n  ENDLOOP\n %EDIT `?PSWD`%RETINFO<1>%`\n %EDIT `?PGMR`%RETINFO<2>%`\n %EDIT `?DESC`%RETINFO<3>%`\n %EDIT `?LNAM`%RETINFO<4>%`\n %EDIT `?MEMB`%MEMBER%`\n %EDIT `?URTN`%URTVAR<1>%`\n %EDIT `?JPRO`%TRIM(SUBSTR(CARD|' '|MEMBER 1 20))%`\n  POINT AWS LINE T\n  FIND /-REP ALL/\n  IF ROSVAR<1> EQ 'Y' AND ROSVAR<2> NE '$$CANCEL' AND ROSVAR<2> NE ''\n      %COPY %ROSVAR<2>% %SEQ%\n  ELSE\n      %DELETE %SEQ%\n  ENDIF\n  TRAP OFF\nENDPROC\n<<GETPAN>> PROC\n  LET MEMBER  = TRIM(TRIM(P.MEMBER  '_'))\n  LET ROSVAR<1> = TRIM(TRIM(P.REPLACE '_'))\n  LET ROSVAR<2> = TRIM(TRIM(P.ROSMEM  '_'))\n  LET URTVAR<1> = TRIM(TRIM(P.URT     '_'))\n  LET URTVAR<2> = TRIM(TRIM(P.DATACOM '_'))\n  LOOP PTR FROM 1 TO NVAR BY 1\n     %LET CARD = TRIM(TRIM(P.%VARS<PTR>% '_'))\n      IF CARD NE DESC<PTR>\n          LET DESC<PTR> = CARD\n      ENDIF\n  ENDLOOP\n  LET CARD = ''\nENDPROC\n<<PUTPAN>> PROC\n  LET NMSG = 0\n  LET P.MEMBER = PAD(MEMBER MAXLEN(P.MEMBER) '_')\n  IF EMSG<1> NE ''\n      LET NMSG = NMSG + 1\n      LET P.MSG<NMSG> = EMSG<1>\n      LET A.MEMBER = 'UHM'\n      LET CURPOS = 'MEMBER'\n  ENDIF\n  LET P.REPLACE = PAD(ROSVAR<1> MAXLEN(P.REPLACE) '_')\n  IF EMSG<2> NE ''\n      LET NMSG = NMSG + 1\n      LET P.MSG<NMSG> = EMSG<2>\n      LET A.REPLACE = 'UHM'\n      LET CURPOS = 'REPLACE'\n  ENDIF\n  IF ROSVAR<1> EQ 'Y'\n      LET A.ROSLIT = 'SL'\n      LET P.ROSMEM = PAD(ROSVAR<2> MAXLEN(P.ROSMEM) '_')\n      IF EMSG<3> NE ''\n          LET NMSG = NMSG + 1\n          LET P.MSG<NMSG> = EMSG<3>\n          IF INDEX(EMSG<3> 'CANCELLED') GT 0\n              LET A.ROSMEM = 'ULM'\n          ELSE\n              LET CURPOS = 'ROSMEM'\n              LET A.ROSMEM = 'UHM'\n          ENDIF\n      ELSE\n          LET A.ROSMEM = 'ULM'\n      ENDIF\n  ELSE\n      LET A.ROSLIT = 'SI'\n      LET A.ROSMEM = 'SIM'\n  ENDIF\n  LET P.URT = PAD(URTVAR<1> MAXLEN(P.URT) '_')\n  IF EMSG<4> NE ''\n      LET NMSG = NMSG + 1\n      LET P.MSG<NMSG> = EMSG<4>\n      LET A.URT = 'UHM'\n      LET CURPOS = 'URT'\n  ENDIF\n  LET P.DATACOM = PAD(URTVAR<2> MAXLEN(P.DATACOM) '_')\n  IF EMSG<5> NE ''\n      LET NMSG = NMSG + 1\n      LET P.MSG<NMSG> = EMSG<5>\n      LET A.DATACOM = 'UHM'\n      LET CURPOS = 'DATACOM'\n  ENDIF\n  LOOP PTR FROM 1 TO NVAR BY 1\n     %LET P.%VARS<PTR>% = PAD(DESC<PTR> MAXLEN(P.%VARS<PTR>%) '_')\n      IF MSGS<PTR> NE ''\n          LET NMSG = NMSG + 1\n          IF NMSG LT 4\n              LET P.MSG<NMSG> = MSGS<PTR>\n          ENDIF\n          IF INDEX(MSGS<PTR> 'DEFAULT' 1) LE 0\n             %LET A.%VARS<PTR>% = 'UHM'\n              IF CURPOS EQ ''\n                  LET CURPOS = VARS<PTR>\n              ENDIF\n          ENDIF\n      ENDIF\n  ENDLOOP\n  IF NMSG EQ 0\n      LET P.MSG<1> = 'PRESS \"PF8\" TO EDIT JCL IN YOUR AWS,'\n      LET P.MSG<1> = P.MSG<1> | ' \"PF9\" TO SUBMIT THE JOB'\n  ENDIF\n  IF CURPOS EQ ''\n      LET CURPOS = 'MEMBER'\n  ENDIF\nENDPROC\n<<EDITS>> PROC\n  LET NMSG = 0\n  LET EMSG<1> = EMSG<2> = EMSG<3> = EMSG<4> = EMSG<5> = ''\n  LOOP PTR FROM 1 TO NVAR BY 1\n    UNTIL VARS<PTR> EQ 'SRCE'\n  ENDLOOP\n  IF LENGTH(MEMBER) EQ 0\n      LET EMSG<1> = 'A LIBRARIAN MEMBER NAME IS REQUIRED'\n      LET NMSG = NMSG + 1\n  ELSE\n      IF MEMBER NE SAVE<1>\n          IF LENGTH(DESC<PTR>) EQ 0\n              EXEC PFX.CCDEFGET VARS<PTR>\n              SELECT AWS ROS1\n              LET DESC<PTR> = R1\n          ENDIF\n          EXEC PFX.CCMEMSEL MEMBER DESC<PTR>\n          SELECT AWS ROS1\n          IF R1 EQ ''\n              LET EMSG<1> = 'SELECTED MEMBER NAME HAS NO MATCH'\n              LET EMSG<1> = EMSG<1> | ' ON LIBRARIAN'\n              LET NMSG = NMSG + 1\n          ELSE\n              LET MEMBER     = R1\n              LET RETINFO<1> = R2\n              LET RETINFO<2> = R3\n              LET RETINFO<3> = R4\n              LET RETINFO<4> = R5\n          ENDIF\n      ENDIF\n  ENDIF\n  SELECT FIRST\n    WHEN ROSVAR<1> EQ 'N'\n      LET ROSVAR<2> = ''\n    WHEN ROSVAR<1> EQ 'Y'\n      IF ROSVAR<2> NE SAVE<3> OR ROSVAR<2> EQ ''\n          IF ROSVAR<2> EQ ''\n              LET ROSVAR<2> = MEMBER\n          ENDIF\n          EXEC PFX.CCROSSEL ROSVAR<2>\n          SELECT AWS ROS1\n          SELECT FIRST\n            WHEN R1 EQ ''\n              LET EMSG<3> = 'SELECTED ROSCOE MEMBER NAME HAS NO MATCH'\n              LET EMSG<3> = EMSG<3> | ' IN YOUR ROSCOE LIBRARY'\n              LET NMSG = NMSG + 1\n            WHEN R1 EQ '$$CANCEL'\n              LET EMSG<3> = 'LIBRARY MEMBER REPLACEMENT FROM ROSCOE'\n              LET EMSG<3> = EMSG<3> | ' HAS BEEN CANCELLED'\n              LET ROSVAR<2> = R1\n            WHEN NONE\n              LET ROSVAR<2> = R1\n          ENDSEL\n      ENDIF\n    WHEN NONE\n      LET EMSG<2> = '\"REPLACE\" MUST BE \"Y\"(YES) OR \"N\"(NO)'\n      LET NMSG = NMSG + 1\n  ENDSEL\n  IF URTVAR<2> EQ 'Y' AND URTVAR<1> EQ ''\n      LET URTVAR<1> = SUBSTR(MEMBER 1 6)|'RT'\n  ENDIF\n  IF URTVAR<2> EQ 'N'\n      IF URTVAR<1> NE ''\n          SELECT FIRST\n            WHEN URTVAR<1> EQ SAVE<4>\n              LET URTVAR<1> = ''\n            WHEN URTVAR<2> EQ SAVE<5>\n              LET URTVAR<2> = 'Y'\n            WHEN NONE\n              LET EMSG<4> = 'EXISTENCE OF A URT IS INCONSISTENT'\n              LET EMSG<4> = EMSG<4>|' WITH DATACOM = \"N\"'\n          ENDSEL\n      ENDIF\n  ENDIF\n  IF URTVAR<2> EQ 'Y'\n      IF URTVAR<1> NE SAVE<4> OR URTVAR<2> NE SAVE<5>\n          LOOP PTR FROM 1 TO NVAR BY 1\n            UNTIL VARS<PTR> EQ 'URTL'\n          ENDLOOP\n          EXEC PFX.CCURTSEL URTVAR<1> DESC<PTR>\n          SELECT AWS ROS1\n          IF R1 EQ ''\n              LET EMSG<4> = 'SELECTED URT NAME HAS NO MATCH'\n              LET EMSG<4> = EMSG<4> | ' IN THE URT LIBRARY'\n              LET NMSG = NMSG + 1\n          ELSE\n              LET URTVAR<1> = R1\n          ENDIF\n      ENDIF\n  ELSE\n      IF URTVAR<2> NE 'N'\n          LET EMSG<5> = '\"DATACOM\" MUST BE \"Y\"(YES) OR \"N\"(NO)'\n          LET NMSG = NMSG + 1\n      ENDIF\n  ENDIF\n  LOOP PTR FROM 1 TO NVAR BY 1\n      IF LENGTH(DESC<PTR>) EQ 0\n          EXEC PFX.CCDEFGET VARS<PTR>\n          SELECT AWS ROS1\n          LET DESC<PTR> = R1\n      ENDIF\n      LET MSGS<PTR> = ''\n      SELECT FIRST\n        WHEN VARS<PTR> EQ 'BTST'\n          SELECT FIRST\n::::::::::::WHEN DESC<PTR> EQ 'Y'\n::::::::::::::LET MSGS<PTR> = 'INTERTEST FOR BATCH NOT YET AVAILABLE'\n            WHEN DESC<PTR> NE 'Y' AND DESC<PTR> NE 'N'\n              LET MSGS<PTR> = 'INTERTEST SELECTION MUST BE \"Y\" OR \"N\"'\n          ENDSEL\n        WHEN VARS<PTR> EQ 'APID'\n          IF LENGTH(DESC<PTR>) EQ 0\n              LET MSGS<PTR> = 'APPLICATION ID IS MISSING'\n          ENDIF\n        WHEN VARS<PTR> EQ 'JNAM'\n          SELECT FIRST\n:*--------------------------------------------------------------------*\n:*          WHEN SUBSTR(DESC<PTR> 1 1) NE 'D'                         *\n:*            LET MSGS<PTR> = 'JOB NAME STUB MUST BEGIN WITH'         *\n:*            LET MSGS<PTR> = MSGS<PTR> | ' \"D\" FOR DEVELOPMENT'      *\n:*--------------------------------------------------------------------*\n            WHEN LENGTH(DESC<PTR>) LT 3\n              LET MSGS<PTR> = 'JOB NAME MUST BE AT LEAST'\n              LET MSGS<PTR> = MSGS<PTR> | ' 3 CHARACTERS LONG'\n            WHEN NOT CONFORM(DESC<PTR> 'AN')\n              LET MSGS<PTR> = 'CHARACTERS IN JOB NAME MUST'\n              LET MSGS<PTR> = MSGS<PTR> | ' BE ALPHANUMERIC'\n            WHEN NONE\n              EXEC PFX.CCDEFGET 'JNAM'\n              IF SUBSTR(DESC<PTR> 1 LENGTH(R1)) EQ R1\n                  LET CARD = PAD(SAVE<1> 6)\n                  LET CARD = SUBSTR(CARD LENGTH(R1)-1 8-LENGTH(R1))\n                  LET CARD = TRIM(CARD)\n                  SELECT FIRST\n                    WHEN DESC<PTR> EQ R1\n                    WHEN TRIM(SUBSTR(DESC<PTR> LENGTH(R1)+1)) EQ CARD\n                    WHEN ANY\n                      LET CARD = PAD(MEMBER 6)\n                      LET CARD = SUBSTR(CARD LENGTH(R1)-1 8-LENGTH(R1))\n                      LET DESC<PTR> = R1|CARD\n                  ENDSEL\n              ENDIF\n          ENDSEL\n        WHEN VARS<PTR> EQ 'ACCT'\n          IF LENGTH(DESC<PTR>) NE 4\n              LET MSGS<PTR> = 'ACCOUNT CODE MUST CONTAIN 4 CHARACTERS'\n          ENDIF\n      ENDSEL\n      IF MSGS<PTR> NE ''\n          LET NMSG = NMSG + 1\n      ENDIF\n  ENDLOOP\n  IF EMSG<1> EQ ''\n      LET SAVE<1> = MEMBER\n  ENDIF\n  IF EMSG<3> EQ ''\n      LET SAVE<3> = ROSVAR<2>\n  ENDIF\nENDPROC\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$CCBL": {"ttr": 1799, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01$\\x1f\\x01\\x01$\\x1f\\x13U\\x00\\x95\\x00\\x95\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-08-29T00:00:00", "modifydate": "2001-08-29T13:55:00", "lines": 149, "newlines": 149, "modlines": 0, "user": "EGHF3PY"}, "text": "<<$CCBL>> : A1=LISTNAME  <A2=REP/SUB>  <A3=REP/SUB>\n  EXEC PFX.RESET\n  DECLARE LISTNAME SAVENAME MEMB EMSG TOPPTR REPL SUBM\n  DECLARE NSLOTS NMEMBS PTR CARD CURPOS NMSG RETINFO<4>\n  TRAP\n  DELETE $$CCLIST\n  TRAP OFF\n  LET TOPPTR = 0\n  LET LISTNAME = A1\n  IF A2 EQ 'REP' OR A3 EQ 'REP'\n      LET REPL = 'Y'\n  ELSE\n      LET REPL = 'N'\n  ENDIF\n  IF A2 EQ 'SUB' OR A3 EQ 'SUB'\n      LET SUBM = 'Y'\n  ELSE\n      LET SUBM = 'N'\n  ENDIF\n  DO <<EDITS>>\n  LOOP\n    UNTIL NMSG EQ 0 AND AID EQ 'PF6'\n      DO <<PUTPAN>>\n     %PANEL SEND CURSOR P.%CURPOS%\n      LET CURPOS = ''\n      IF AID EQ 'CLEAR'\n          POP\n          STOP\n      ELSE\n          DO <<GETPAN>>\n          DO <<EDITS>>\n          SELECT FIRST\n            WHEN AID EQ 'PF1'\n              EXEC PFX.CCHLPSHO 'CCBLX'\n              SELECT AWS ROS1\n            WHEN AID EQ 'PF2'\n              EXEC PFX.CCDEFSET\n              SELECT AWS ROS1\n            WHEN AID EQ 'PF7'\n              LET TOPPTR = TOPPTR - NSLOTS\n              IF TOPPTR LT 0\n                  LET TOPPTR = 0\n              ENDIF\n            WHEN AID EQ 'PF8'\n              LET TOPPTR = TOPPTR + NSLOTS\n              IF TOPPTR GE NMEMBS\n                  LET TOPPTR = NMEMBS - 1\n              ENDIF\n          ENDSEL\n      ENDIF\n  ENDLOOP\n  RETURN\n<<GETPAN>> PROC\n  LET LISTNAME = TRIM(TRIM(P.LISTNAME '_'))\n  DELETE\n  TRAP\n  FETCH $$CCLIST\n  TRAP OFF\n %LOOP PTR FROM 1 TO %NSLOTS% BY 1\n      LET MEMB = TRIM(TRIM(P.MEMB<PTR> '_'))\n      IF MEMB EQ ''\n          TRAP\n         %DELETE %TOPPTR+PTR%\n          TRAP OFF\n      ELSE\n         %%TOPPTR+PTR% %MEMB%\n      ENDIF\n  ENDLOOP\n  IF AWSCOUNT GT 0\n      DO <<PREPLIST>>\n      UPDATE $$CCLIST\n  ENDIF\nENDPROC\n<<PUTPAN>> PROC\n  TRAP\n  FETCH $$CCLIST\n  TRAP OFF\n  PANEL ACTIVATE PFX.CCBLXPAN\n  LET NSLOTS = HBOUND(P.MEMB)\n  LET P.LISTNAME = PAD(LISTNAME 8 '_')\n  LOOP PTR FROM 1 TO NSLOTS BY 1\n    UNTIL TOPPTR+PTR GT AWSCOUNT\n     %READ AWS %TOPPTR+PTR% CARD\n      LET P.MEMB<PTR> = PAD(TRIM(SUBSTR(PAD(CARD 8) 1 8)) 8 '_')\n  ENDLOOP\n  IF NMSG EQ 0\n      LET P.MSG = 'PRESS \"PF6\" TO CONFIRM WHEN MEMBER LIST IS COMPLETE'\n  ELSE\n      LET P.MSG = EMSG\n      LET EMSG = ''\n      LET A.LISTNAME = 'UHM'\n      LET CURPOS = 'LISTNAME'\n      IF NMSG EQ 2\n          LET A.MEMB<1> = 'UHM'\n      ENDIF\n  ENDIF\n  IF CURPOS EQ ''\n      LET CURPOS = 'LISTNAME'\n  ENDIF\nENDPROC\n<<EDITS>> PROC\n  LET NMSG = 0\n  IF LISTNAME EQ ''\n      TRAP\n      FETCH $$CCLIST\n      TRAP OFF\n      IF TC NE 0\n          LET EMSG = 'ENTER EITHER A LIST NAME OR AT LEAST '\n          LET EMSG = EMSG | 'ONE MEMBER NAME TO BE COMPILED'\n          LET NMSG = 2\n          LET CURPOS = 'LISTNAME'\n      ENDIF\n  ELSE\n      IF LISTNAME NE SAVENAME\n          TRAP\n         %FIND %LISTNAME%\n          TRAP OFF\n          IF TC EQ 0\n              TRAP\n              FETCH $$CCLIST\n              TRAP OFF\n             %COPY %LISTNAME% B\n              LET SAVENAME = LISTNAME\n          ELSE\n             %LET EMSG = 'ROSCOE MEMBER \"%LISTNAME%\" NOT FOUND'\n              LET NMSG = 1\n              LET CURPOS = 'LISTNAME'\n          ENDIF\n      ENDIF\n  ENDIF\n  IF AWSCOUNT GT 0\n      DO <<PREPLIST>>\n      UPDATE $$CCLIST\n  ENDIF\nENDPROC\n<<PREPLIST>> PROC\n  FILL 81 255 / /\n  RENUMBER 1 1\n  IF AWSCOUNT GT 1\n     %EXEC PFX.IN 81 86 '000001' 1 1 %AWSCOUNT%\n      SORT SORT FIELDS=(1,9,CH,A)\n      EXEC PFX.DELDUPS 1 9\n      SORT SORT FIELDS=(81,6,CH,A)\n      FILL 81 86 / /\n      RENUMBER 1 1\n  ENDIF\n  FILL 10 10 /B/\n  LET NMEMBS = AWSCOUNT\nENDPROC\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$CCC": {"ttr": 1803, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01$\\x1f\\x01\\x01$\\x1f\\x13W\\x01f\\x01f\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-08-29T00:00:00", "modifydate": "2001-08-29T13:57:00", "lines": 358, "newlines": 358, "modlines": 0, "user": "EGHF3PY"}, "text": "<<$CCC>> : A1=MEMBER  <A2=REP/SUB>  <A3=REP/SUB> A4=LAST?(YES=0)\n  EXEC PFX.CCSESSET\n  SET STMTCNT MAX\n  DECLARE MEMBER REPLACE ROSMEM SUBMIT SAVE<3> EMSG<3>\n  DECLARE NVAR PTR CARD CURPOS NMSG RETINFO<4>\n  LET MEMBER = A1\n  IF A2 EQ 'REP' OR A3 EQ 'REP'\n      LET REPLACE = 'Y'\n  ELSE\n      LET REPLACE = 'N'\n  ENDIF\n  IF A2 EQ 'SUB' OR A3 EQ 'SUB'\n      LET SUBMIT = 'Y'\n  ELSE\n      LET SUBMIT = 'N'\n  ENDIF\n  DECLARE VARS<15> DESC<15> MSGS<15>\n  LET NVAR = 15                     : NUMBER OF VARIABLE NAMES IN PANEL\n  LET VARS<01> = 'SRCE'\n  LET VARS<02> = 'MAPC'\n  LET VARS<03> = 'OLNK'\n  LET VARS<04> = 'ITST'\n  LET VARS<05> = 'APID'\n  LET VARS<06> = 'ENVR'\n  LET VARS<07> = 'CCOP'\n  LET VARS<08> = 'CLOP'\n  LET VARS<09> = 'CMOP'\n  LET VARS<10> = 'JNAM'\n  LET VARS<11> = 'ACCT'\n  LET VARS<12> = 'ROOM'\n  LET VARS<13> = 'UNAM'\n  LET VARS<14> = 'MSGC'\n  LET VARS<15> = 'REMT'\n  DO <<GETDEFS>>\n  DO <<EDITS>>\n  LOOP\n    UNTIL NMSG EQ 0 AND SUBMIT NE 'N'\n      PANEL ACTIVATE PFX.CCCXXPAN\n      DO <<PUTPAN>>\n     %PANEL SEND CURSOR P.%CURPOS%\n      LET CURPOS = ''\n      SELECT FIRST\n        WHEN AID EQ 'CLEAR'\n          POP\n          STOP\n        WHEN AID EQ 'PF5'\n          LET SUBMIT = 'Q'\n        WHEN NONE\n          DO <<GETPAN>>\n          DO <<EDITS>>\n          SELECT FIRST\n            WHEN AID EQ 'PF1'\n              EXEC PFX.CCHLPSHO 'CCCXX'\n              SELECT AWS ROS1\n            WHEN AID EQ 'PF2'\n              EXEC PFX.CCDEFSET\n              DO <<GETDEFS>>\n          ENDSEL\n          SELECT FIRST\n            WHEN NMSG NE 0\n              RELOOP\n            WHEN AID EQ 'PF9'\n              LET SUBMIT = 'Y'\n            WHEN AID EQ 'PF8'\n              LET SUBMIT = 'A'\n          ENDSEL\n      ENDSEL\n  ENDLOOP\n  SELECT FIRST\n    WHEN SUBMIT EQ 'Y'\n      DO <<BUILDJCL>>\n      SET MSGLEVEL ERROR\n      SUBMIT\n      LET PTR = INDEX(LASTERR ' <')\n      IF PTR LE 0\n          LET PTR = LENGTH(LASTERR)\n      ENDIF\n     %LET CARD = SUBSTR(LASTERR 1 %PTR%)\n    WHEN SUBMIT EQ 'A'\n      DO <<BUILDJCL>>\n      ATTACH\n      IF A4 GT 0\n          RESPONSE 'WHEN READY TO CONTINUE, ENTER \"GO\"'\n          PAUSE\n      ENDIF\n     %LET CARD = 'JCL FOR %MEMBER% SENT TO AWS'\n    WHEN NONE\n     %LET CARD = '%MEMBER% NOT SUBMITTED'\n  ENDSEL\n  CREATE AWS CCMSGS NONRECOVERABLE LEVEL\n  TRAP\n  FETCH $$CCMSGS\n  TRAP OFF\n  %%AWSCOUNT+1% %CARD%\n  UPDATE $$CCMSGS\n  RETURN\n<<GETDEFS>> PROC\n  LOOP PTR FROM 1 TO NVAR BY 1\n      EXEC PFX.CCDEFGET VARS<PTR>\n      LET DESC<PTR> = R1\n  ENDLOOP\n  SELECT AWS ROS1\nENDPROC\n<<BUILDJCL>> PROC\n  LOOP PTR FROM 1 TO NVAR BY 1\n    UNTIL VARS<PTR> EQ 'ITST'\n  ENDLOOP\n  SELECT AWS ROS1\n  DELETE\n  COPY PFX.CCJOBJCL T\n:::::::::::::: INSERT ACS DESTINATION INFO\n  TRAP ON\n  COPY ACSDEST B\n  %EDIT /&TITLE1/%MEMBER%/\n  TRAP OFF\n  IF DESC<PTR> EQ 'Y'\n      COPY PFX.CCCXIJCL B\n  ELSE\n      COPY PFX.CCCXXJCL B\n  ENDIF\n  TRAP\n  LET CARD = ''\n  LOOP PTR FROM 1 TO NVAR BY 1\n      SELECT FIRST\n        WHEN VARS<PTR> EQ 'APID'\n          IF TRIM(DESC<PTR>) EQ 'ACS'\n:*--------------------------------------------------------------------*\n:*            FIND /AUXINC1/                                          *\n:*           %EDIT /HHLQ.?APID.SAT.LIBMAST/PROD.SOURCE.LIBMAST/%SEQ%  *\n:*            FIND /AUXINC2/                                          *\n:*           %EDIT /HHLQ.?APID.?ENVR.LIBMAST/PROD.SOURCE.LIBMAST/%SEQ%*\n:*            FIND /AUXINC3/                                          *\n:*           %EDIT /DUMMY/DSN=HHLQ.?APID.?ENVR.LIBMAST,DISP=SHR/%SEQ% *\n:*--------------------------------------------------------------------*\n              FIND /AUXINC2/\n             %EDIT /DSN=HHLQ.?APID.?ENVR.LIBMAST,DISP=SHR/DUMMY/%SEQ%\n              EDIT /AAFX='?APIDDY2AA',//\n              EDIT /CLASS=J/CLASS=K/\n          ENDIF\n        WHEN VARS<PTR> EQ 'CMOP'\n          LET NMSG = NMSG + 1\n          IF INDEX(DESC<PTR> 'RMODE=24') GT 0\n              EDIT /?DLEN/24/\n          ELSE\n              EDIT /?DLEN/31/\n          ENDIF\n        WHEN VARS<PTR> EQ 'UNAM'\n          LET NMSG = NMSG + 1\n          LET CARD = DESC<PTR>\n      ENDSEL\n     %EDIT `?%VARS<PTR>%`%DESC<PTR>%`\n  ENDLOOP\n %EDIT `?PSWD`%RETINFO<1>%`\n %EDIT `?PGMR`%RETINFO<2>%`\n %EDIT `?DESC`%RETINFO<3>%`\n %EDIT `?LNAM`%RETINFO<4>%`\n %EDIT `?MEMB`%MEMBER%`\n %EDIT `?JPRO`%TRIM(SUBSTR(CARD|' '|MEMBER 1 20))%`\n  POINT AWS LINE T\n  FIND /-REP ALL/\n  IF REPLACE EQ 'Y' AND ROSMEM NE '$$CANCEL' AND ROSMEM NE ''\n      %COPY %ROSMEM% %SEQ%\n  ELSE\n      %DELETE %SEQ%\n  ENDIF\n  TRAP OFF\nENDPROC\n<<GETPAN>> PROC\n  LET MEMBER  = TRIM(TRIM(P.MEMBER '_'))\n  LET REPLACE = TRIM(TRIM(P.REPLACE '_'))\n  LET ROSMEM  = TRIM(TRIM(P.ROSMEM '_'))\n  LOOP PTR FROM 1 TO NVAR BY 1\n     %LET CARD = TRIM(TRIM(P.%VARS<PTR>% '_'))\n      IF CARD NE DESC<PTR>\n          LET DESC<PTR> = CARD\n      ENDIF\n  ENDLOOP\n  LET CARD = ''\nENDPROC\n<<PUTPAN>> PROC\n  LET NMSG = 0\n  LET P.MEMBER = PAD(MEMBER MAXLEN(P.MEMBER) '_')\n  IF EMSG<1> NE ''\n      LET NMSG = NMSG + 1\n      LET P.MSG<NMSG> = EMSG<1>\n      LET A.MEMBER = 'UHM'\n      LET CURPOS = 'MEMBER'\n  ENDIF\n  LET P.REPLACE = PAD(REPLACE MAXLEN(P.REPLACE) '_')\n  IF EMSG<2> NE ''\n      LET NMSG = NMSG + 1\n      LET P.MSG<NMSG> = EMSG<2>\n      LET A.REPLACE = 'UHM'\n      LET CURPOS = 'REPLACE'\n  ENDIF\n  IF REPLACE EQ 'Y'\n      LET A.ROSLIT = 'SL'\n      LET P.ROSMEM = PAD(ROSMEM MAXLEN(P.ROSMEM) '_')\n      IF EMSG<3> NE ''\n          LET NMSG = NMSG + 1\n          LET P.MSG<NMSG> = EMSG<3>\n          IF INDEX(EMSG<3> 'CANCELLED') GT 0\n              LET A.ROSMEM = 'ULM'\n          ELSE\n              LET CURPOS = 'ROSMEM'\n              LET A.ROSMEM = 'UHM'\n          ENDIF\n      ELSE\n          LET A.ROSMEM = 'ULM'\n      ENDIF\n  ELSE\n      LET A.ROSLIT = 'SI'\n      LET A.ROSMEM = 'SIM'\n  ENDIF\n  LOOP PTR FROM 1 TO NVAR BY 1\n     %LET P.%VARS<PTR>% = PAD(DESC<PTR> MAXLEN(P.%VARS<PTR>%) '_')\n      IF MSGS<PTR> NE ''\n          LET NMSG = NMSG + 1\n          IF NMSG LT 4\n              LET P.MSG<NMSG> = MSGS<PTR>\n          ENDIF\n          IF INDEX(MSGS<PTR> 'DEFAULT' 1) LE 0\n             %LET A.%VARS<PTR>% = 'UHM'\n              IF CURPOS EQ ''\n                  LET CURPOS = VARS<PTR>\n              ENDIF\n          ENDIF\n      ENDIF\n  ENDLOOP\n  IF NMSG EQ 0\n      LET P.MSG<1> = 'PRESS \"PF8\" TO EDIT JCL IN YOUR AWS,'\n      LET P.MSG<1> = P.MSG<1> | ' \"PF9\" TO SUBMIT THE JOB'\n  ENDIF\n  IF CURPOS EQ ''\n      LET CURPOS = 'MEMBER'\n  ENDIF\nENDPROC\n<<EDITS>> PROC\n  LET NMSG = 0\n  LET EMSG<1> = EMSG<2> = EMSG<3> = ''\n  LOOP PTR FROM 1 TO NVAR BY 1\n    UNTIL VARS<PTR> EQ 'SRCE'\n  ENDLOOP\n  IF LENGTH(MEMBER) EQ 0\n      LET EMSG<1> = 'A LIBRARIAN MEMBER NAME IS REQUIRED'\n      LET NMSG = NMSG + 1\n  ELSE\n      IF MEMBER NE SAVE<1>\n          IF LENGTH(DESC<PTR>) EQ 0\n              EXEC PFX.CCDEFGET VARS<PTR>\n              SELECT AWS ROS1\n              LET DESC<PTR> = R1\n          ENDIF\n          EXEC PFX.CCMEMSEL MEMBER DESC<PTR>\n          SELECT AWS ROS1\n          IF R1 EQ ''\n              LET EMSG<1> = 'SELECTED MEMBER NAME HAS NO MATCH'\n              LET EMSG<1> = EMSG<1> | ' ON LIBRARIAN'\n              LET NMSG = NMSG + 1\n          ELSE\n              LET MEMBER     = R1\n              LET RETINFO<1> = R2\n              LET RETINFO<2> = R3\n              LET RETINFO<3> = R4\n              LET RETINFO<4> = R5\n          ENDIF\n      ENDIF\n  ENDIF\n  SELECT FIRST\n    WHEN REPLACE EQ 'N'\n      LET ROSMEM = ''\n    WHEN REPLACE EQ 'Y'\n      IF ROSMEM NE SAVE<3> OR ROSMEM EQ ''\n          IF ROSMEM EQ ''\n              LET ROSMEM = MEMBER\n          ENDIF\n          EXEC PFX.CCROSSEL ROSMEM\n          SELECT AWS ROS1\n          SELECT FIRST\n            WHEN R1 EQ ''\n              LET EMSG<3> = 'SELECTED ROSCOE MEMBER NAME HAS NO MATCH'\n              LET EMSG<3> = EMSG<3> | ' IN YOUR ROSCOE LIBRARY'\n              LET NMSG = NMSG + 1\n            WHEN R1 EQ '$$CANCEL'\n              LET EMSG<3> = 'LIBRARY MEMBER REPLACEMENT FROM ROSCOE'\n              LET EMSG<3> = EMSG<3> | ' HAS BEEN CANCELLED'\n              LET NMSG = NMSG + 1\n              LET REPLACE = 'N'\n              LET ROSMEM = ''\n            WHEN NONE\n              LET ROSMEM = R1\n          ENDSEL\n      ENDIF\n    WHEN NONE\n      LET EMSG<2> = '\"REPLACE\" MUST BE \"Y\"(YES) OR \"N\"(NO)'\n      LET NMSG = NMSG + 1\n  ENDSEL\n  LOOP PTR FROM 1 TO NVAR BY 1\n      IF LENGTH(DESC<PTR>) EQ 0\n          EXEC PFX.CCDEFGET VARS<PTR>\n          SELECT AWS ROS1\n          LET DESC<PTR> = R1\n      ENDIF\n      LET MSGS<PTR> = ''\n      SELECT FIRST\n        WHEN VARS<PTR> EQ 'ITST'\n          IF DESC<PTR> NE 'Y' AND DESC<PTR> NE 'N'\n              LET MSGS<PTR> = 'INTERTEST SELECTION MUST BE \"Y\" OR \"N\"'\n          ENDIF\n        WHEN VARS<PTR> EQ 'APID'\n          IF LENGTH(DESC<PTR>) EQ 0\n              LET MSGS<PTR> = 'APPLICATION ID IS MISSING'\n          ENDIF\n        WHEN VARS<PTR> EQ 'JNAM'\n          SELECT FIRST\n:*--------------------------------------------------------------------*\n:*          WHEN SUBSTR(DESC<PTR> 1 1) NE 'D'                         *\n:*            LET MSGS<PTR> = 'JOB NAME STUB MUST BEGIN WITH'         *\n:*            LET MSGS<PTR> = MSGS<PTR> | ' \"D\" FOR DEVELOPMENT'      *\n:*--------------------------------------------------------------------*\n            WHEN LENGTH(DESC<PTR>) LT 3\n              LET MSGS<PTR> = 'JOB NAME MUST BE AT LEAST'\n              LET MSGS<PTR> = MSGS<PTR> | ' 3 CHARACTERS LONG'\n            WHEN NOT CONFORM(DESC<PTR> 'AN')\n              LET MSGS<PTR> = 'CHARACTERS IN JOB NAME MUST'\n              LET MSGS<PTR> = MSGS<PTR> | ' BE ALPHANUMERIC'\n            WHEN NONE\n              EXEC PFX.CCDEFGET 'JNAM'\n              IF SUBSTR(DESC<PTR> 1 LENGTH(R1)) EQ R1\n                  LET CARD = PAD(SAVE<1> 6)\n                  LET CARD = SUBSTR(CARD LENGTH(R1)-1 8-LENGTH(R1))\n                  LET CARD = TRIM(CARD)\n                  SELECT FIRST\n                    WHEN DESC<PTR> EQ R1\n                    WHEN TRIM(SUBSTR(DESC<PTR> LENGTH(R1)+1)) EQ CARD\n                    WHEN ANY\n                      LET CARD = PAD(MEMBER 6)\n                      LET CARD = SUBSTR(CARD LENGTH(R1)-1 8-LENGTH(R1))\n                      LET DESC<PTR> = R1|CARD\n                  ENDSEL\n              ENDIF\n          ENDSEL\n        WHEN VARS<PTR> EQ 'ACCT'\n          IF LENGTH(DESC<PTR>) NE 4\n              LET MSGS<PTR> = 'ACCOUNT CODE MUST CONTAIN 4 CHARACTERS'\n          ENDIF\n      ENDSEL\n      IF MSGS<PTR> NE ''\n          LET NMSG = NMSG + 1\n      ENDIF\n  ENDLOOP\n  IF EMSG<1> EQ ''\n      LET SAVE<1> = MEMBER\n  ENDIF\n  IF EMSG<3> EQ ''\n      LET SAVE<3> = ROSMEM\n  ENDIF\nENDPROC\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$CCCL": {"ttr": 2054, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01$\\x1f\\x01\\x01$\\x1f\\x13X\\x00\\x95\\x00\\x95\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-08-29T00:00:00", "modifydate": "2001-08-29T13:58:00", "lines": 149, "newlines": 149, "modlines": 0, "user": "EGHF3PY"}, "text": "<<$CCCL>> : A1=LISTNAME  <A2=REP/SUB>  <A3=REP/SUB>\n  EXEC PFX.RESET\n  DECLARE LISTNAME SAVENAME MEMB EMSG TOPPTR REPL SUBM\n  DECLARE NSLOTS NMEMBS PTR CARD CURPOS NMSG RETINFO<4>\n  TRAP\n  DELETE $$CCLIST\n  TRAP OFF\n  LET TOPPTR = 0\n  LET LISTNAME = A1\n  IF A2 EQ 'REP' OR A3 EQ 'REP'\n      LET REPL = 'Y'\n  ELSE\n      LET REPL = 'N'\n  ENDIF\n  IF A2 EQ 'SUB' OR A3 EQ 'SUB'\n      LET SUBM = 'Y'\n  ELSE\n      LET SUBM = 'N'\n  ENDIF\n  DO <<EDITS>>\n  LOOP\n    UNTIL NMSG EQ 0 AND AID EQ 'PF6'\n      DO <<PUTPAN>>\n     %PANEL SEND CURSOR P.%CURPOS%\n      LET CURPOS = ''\n      IF AID EQ 'CLEAR'\n          POP\n          STOP\n      ELSE\n          DO <<GETPAN>>\n          DO <<EDITS>>\n          SELECT FIRST\n            WHEN AID EQ 'PF1'\n              EXEC PFX.CCHLPSHO 'CCCLX'\n              SELECT AWS ROS1\n            WHEN AID EQ 'PF2'\n              EXEC PFX.CCDEFSET\n              SELECT AWS ROS1\n            WHEN AID EQ 'PF7'\n              LET TOPPTR = TOPPTR - NSLOTS\n              IF TOPPTR LT 0\n                  LET TOPPTR = 0\n              ENDIF\n            WHEN AID EQ 'PF8'\n              LET TOPPTR = TOPPTR + NSLOTS\n              IF TOPPTR GE NMEMBS\n                  LET TOPPTR = NMEMBS - 1\n              ENDIF\n          ENDSEL\n      ENDIF\n  ENDLOOP\n  RETURN\n<<GETPAN>> PROC\n  LET LISTNAME = TRIM(TRIM(P.LISTNAME '_'))\n  DELETE\n  TRAP\n  FETCH $$CCLIST\n  TRAP OFF\n %LOOP PTR FROM 1 TO %NSLOTS% BY 1\n      LET MEMB = TRIM(TRIM(P.MEMB<PTR> '_'))\n      IF MEMB EQ ''\n          TRAP\n         %DELETE %TOPPTR+PTR%\n          TRAP OFF\n      ELSE\n         %%TOPPTR+PTR% %MEMB%\n      ENDIF\n  ENDLOOP\n  IF AWSCOUNT GT 0\n      DO <<PREPLIST>>\n      UPDATE $$CCLIST\n  ENDIF\nENDPROC\n<<PUTPAN>> PROC\n  TRAP\n  FETCH $$CCLIST\n  TRAP OFF\n  PANEL ACTIVATE PFX.CCCLXPAN\n  LET NSLOTS = HBOUND(P.MEMB)\n  LET P.LISTNAME = PAD(LISTNAME 8 '_')\n  LOOP PTR FROM 1 TO NSLOTS BY 1\n    UNTIL TOPPTR+PTR GT AWSCOUNT\n     %READ AWS %TOPPTR+PTR% CARD\n      LET P.MEMB<PTR> = PAD(TRIM(SUBSTR(PAD(CARD 8) 1 8)) 8 '_')\n  ENDLOOP\n  IF NMSG EQ 0\n      LET P.MSG = 'PRESS \"PF6\" TO CONFIRM WHEN MEMBER LIST IS COMPLETE'\n  ELSE\n      LET P.MSG = EMSG\n      LET EMSG = ''\n      LET A.LISTNAME = 'UHM'\n      LET CURPOS = 'LISTNAME'\n      IF NMSG EQ 2\n          LET A.MEMB<1> = 'UHM'\n      ENDIF\n  ENDIF\n  IF CURPOS EQ ''\n      LET CURPOS = 'LISTNAME'\n  ENDIF\nENDPROC\n<<EDITS>> PROC\n  LET NMSG = 0\n  IF LISTNAME EQ ''\n      TRAP\n      FETCH $$CCLIST\n      TRAP OFF\n      IF TC NE 0\n          LET EMSG = 'ENTER EITHER A LIST NAME OR AT LEAST '\n          LET EMSG = EMSG | 'ONE MEMBER NAME TO BE COMPILED'\n          LET NMSG = 2\n          LET CURPOS = 'LISTNAME'\n      ENDIF\n  ELSE\n      IF LISTNAME NE SAVENAME\n          TRAP\n         %FIND %LISTNAME%\n          TRAP OFF\n          IF TC EQ 0\n              TRAP\n              FETCH $$CCLIST\n              TRAP OFF\n             %COPY %LISTNAME% B\n              LET SAVENAME = LISTNAME\n          ELSE\n             %LET EMSG = 'ROSCOE MEMBER \"%LISTNAME%\" NOT FOUND'\n              LET NMSG = 1\n              LET CURPOS = 'LISTNAME'\n          ENDIF\n      ENDIF\n  ENDIF\n  IF AWSCOUNT GT 0\n      DO <<PREPLIST>>\n      UPDATE $$CCLIST\n  ENDIF\nENDPROC\n<<PREPLIST>> PROC\n  FILL 81 255 / /\n  RENUMBER 1 1\n  IF AWSCOUNT GT 1\n     %EXEC PFX.IN 81 86 '000001' 1 1 %AWSCOUNT%\n      SORT SORT FIELDS=(1,9,CH,A)\n      EXEC PFX.DELDUPS 1 9\n      SORT SORT FIELDS=(81,6,CH,A)\n      FILL 81 86 / /\n      RENUMBER 1 1\n  ENDIF\n  FILL 10 10 /C/\n  LET NMEMBS = AWSCOUNT\nENDPROC\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$CCP": {"ttr": 2058, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01$\\x1f\\x01\\x01$\\x1f\\x14\\x00\\x01D\\x01D\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-08-29T00:00:00", "modifydate": "2001-08-29T14:00:00", "lines": 324, "newlines": 324, "modlines": 0, "user": "EGHF3PY"}, "text": "<<$CCP>> : A1=MEMBER  <A2=REP/SUB>  <A3=REP/SUB> A4=LAST?(YES=0)\n  EXEC PFX.CCSESSET\n  SET STMTCNT MAX\n  DECLARE MEMBER REPLACE ROSMEM SUBMIT SAVE<3> EMSG<3>\n  DECLARE NVAR PTR CARD CURPOS NMSG RETINFO<4>\n  LET MEMBER = A1\n  IF A2 EQ 'REP' OR A3 EQ 'REP'\n      LET REPLACE = 'Y'\n  ELSE\n      LET REPLACE = 'N'\n  ENDIF\n  IF A2 EQ 'SUB' OR A3 EQ 'SUB'\n      LET SUBMIT = 'Y'\n  ELSE\n      LET SUBMIT = 'N'\n  ENDIF\n  DECLARE VARS<11> DESC<11> MSGS<11>\n  LET NVAR = 11                     : NUMBER OF VARIABLE NAMES IN PANEL\n  LET VARS<01> = 'SRCE'\n  LET VARS<02> = 'OLNK'\n  LET VARS<03> = 'APID'\n  LET VARS<04> = 'ENVR'\n  LET VARS<05> = 'ACOP'\n  LET VARS<06> = 'JNAM'\n  LET VARS<07> = 'ACCT'\n  LET VARS<08> = 'ROOM'\n  LET VARS<09> = 'UNAM'\n  LET VARS<10> = 'MSGC'\n  LET VARS<11> = 'REMT'\n  DO <<GETDEFS>>\n  DO <<EDITS>>\n  LOOP\n    UNTIL NMSG EQ 0 AND SUBMIT NE 'N'\n      PANEL ACTIVATE PFX.CCPXXPAN\n      DO <<PUTPAN>>\n     %PANEL SEND CURSOR P.%CURPOS%\n      LET CURPOS = ''\n      IF AID EQ 'CLEAR'\n          LET NMSG = 0\n          LET SUBMIT = 'Q'\n      ELSE\n          DO <<GETPAN>>\n          DO <<EDITS>>\n          SELECT FIRST\n            WHEN AID EQ 'PF1'\n              EXEC PFX.CCHLPSHO 'CCTXX'\n              SELECT AWS ROS1\n            WHEN AID EQ 'PF2'\n              EXEC PFX.CCDEFSET\n              DO <<GETDEFS>>\n          ENDSEL\n          SELECT FIRST\n            WHEN NMSG NE 0\n              RELOOP\n            WHEN AID EQ 'PF9'\n              LET SUBMIT = 'Y'\n            WHEN AID EQ 'PF8'\n              LET SUBMIT = 'A'\n          ENDSEL\n      ENDIF\n  ENDLOOP\n  SELECT FIRST\n    WHEN SUBMIT EQ 'Y'\n      DO <<BUILDJCL>>\n      SET MSGLEVEL ERROR\n      SUBMIT\n      LET PTR = INDEX(LASTERR ' <')\n      IF PTR LE 0\n          LET PTR = LENGTH(LASTERR)\n      ENDIF\n     %LET CARD = SUBSTR(LASTERR 1 %PTR%)\n      CREATE AWS CCMSGS NONRECOVERABLE LEVEL\n      TRAP\n      FETCH $$CCMSGS\n      TRAP OFF\n      %%AWSCOUNT+1% %CARD%\n      UPDATE $$CCMSGS\n    WHEN SUBMIT EQ 'A'\n      DO <<BUILDJCL>>\n      ATTACH\n      IF A4 GT 0\n          RESPONSE 'WHEN READY TO CONTINUE, ENTER \"GO\"'\n          PAUSE\n      ENDIF\n    WHEN NONE\n      DELETE\n  ENDSEL\n  RETURN\n<<GETDEFS>> PROC\n  LOOP PTR FROM 1 TO NVAR BY 1\n      EXEC PFX.CCDEFGET VARS<PTR>\n      LET DESC<PTR> = R1\n  ENDLOOP\n  SELECT AWS ROS1\nENDPROC\n<<BUILDJCL>> PROC\n  SELECT AWS ROS1\n  DELETE\n  COPY PFX.CCJOBJCL T\n:::::::::::::: INSERT ACS DESTINATION INFO\n  TRAP ON\n  COPY ACSDEST B\n  %EDIT /&TITLE1/%MEMBER%/\n  TRAP OFF\n  COPY PFX.CCPXXJCL B\n  LET CARD = ''\n  LOOP PTR FROM 1 TO NVAR BY 1\n      SELECT FIRST\n        WHEN VARS<PTR> EQ 'UNAM'\n          LET NMSG = NMSG + 1\n          LET CARD = DESC<PTR>\n        WHEN NONE\n         %EDIT `?%VARS<PTR>%`%DESC<PTR>%`\n      ENDSEL\n  ENDLOOP\n %EDIT `?MEMB`%MEMBER%`\n %EDIT `?JPRO`%TRIM(SUBSTR(CARD|' '|MEMBER 1 20))%`\n  POINT AWS LINE T\n  FIND /-REP ALL/\n  IF REPLACE EQ 'Y' AND ROSMEM NE '$$CANCEL' AND ROSMEM NE ''\n      %COPY %ROSMEM% %SEQ%\n      TRAP\n      FIND /*       LIB ASM /\n      IF TC EQ 0\n          %READ AWS %SEQ% CARD\n          LET RETINFO<2> = SUBSTR(PAD(CARD 72) 26 15)\n          LET RETINFO<3> = SUBSTR(PAD(CARD 72) 42 32)\n      ENDIF\n  ELSE\n      %DELETE %SEQ%\n  ENDIF\n  TRAP OFF\n %EDIT `?PSWD`%RETINFO<1>%`\n %EDIT `?PGMR`%RETINFO<2>%`\n %EDIT `?DESC`%RETINFO<3>%`\n %EDIT `?LNAM`%RETINFO<4>%`\nENDPROC\n<<GETPAN>> PROC\n  LET MEMBER  = TRIM(TRIM(P.MEMBER '_'))\n  LET REPLACE = TRIM(TRIM(P.REPLACE '_'))\n  LET ROSMEM  = TRIM(TRIM(P.ROSMEM '_'))\n  LOOP PTR FROM 1 TO NVAR BY 1\n     %LET CARD = TRIM(TRIM(P.%VARS<PTR>% '_'))\n      IF CARD NE DESC<PTR>\n          LET DESC<PTR> = CARD\n      ENDIF\n  ENDLOOP\n  LET CARD = ''\nENDPROC\n<<PUTPAN>> PROC\n  LET NMSG = 0\n  LET P.MEMBER = PAD(MEMBER MAXLEN(P.MEMBER) '_')\n  IF EMSG<1> NE ''\n      LET NMSG = NMSG + 1\n      LET P.MSG<NMSG> = EMSG<1>\n      LET A.MEMBER = 'UHM'\n      LET CURPOS = 'MEMBER'\n  ENDIF\n  LET P.REPLACE = PAD(REPLACE MAXLEN(P.REPLACE) '_')\n  IF EMSG<2> NE ''\n      LET NMSG = NMSG + 1\n      LET P.MSG<NMSG> = EMSG<2>\n      LET A.REPLACE = 'UHM'\n      LET CURPOS = 'REPLACE'\n  ENDIF\n  IF REPLACE EQ 'Y'\n      LET A.ROSLIT = 'SL'\n      LET P.ROSMEM = PAD(ROSMEM MAXLEN(P.ROSMEM) '_')\n      IF EMSG<3> NE ''\n          LET NMSG = NMSG + 1\n          LET P.MSG<NMSG> = EMSG<3>\n          IF INDEX(EMSG<3> 'CANCELLED') GT 0\n              LET A.ROSMEM = 'ULM'\n          ELSE\n              LET CURPOS = 'ROSMEM'\n              LET A.ROSMEM = 'UHM'\n          ENDIF\n      ELSE\n          LET A.ROSMEM = 'ULM'\n      ENDIF\n  ELSE\n      LET A.ROSLIT = 'SI'\n      LET A.ROSMEM = 'SIM'\n  ENDIF\n  LOOP PTR FROM 1 TO NVAR BY 1\n     %LET P.%VARS<PTR>% = PAD(DESC<PTR> MAXLEN(P.%VARS<PTR>%) '_')\n      IF MSGS<PTR> NE ''\n          LET NMSG = NMSG + 1\n          IF NMSG LT 4\n              LET P.MSG<NMSG> = MSGS<PTR>\n          ENDIF\n          IF INDEX(MSGS<PTR> 'DEFAULT' 1) LE 0\n             %LET A.%VARS<PTR>% = 'UHM'\n              IF CURPOS EQ ''\n                  LET CURPOS = VARS<PTR>\n              ENDIF\n          ENDIF\n      ENDIF\n  ENDLOOP\n  IF NMSG EQ 0\n      LET P.MSG<1> = 'PRESS \"PF8\" TO EDIT JCL IN YOUR AWS,'\n      LET P.MSG<1> = P.MSG<1> | ' \"PF9\" TO SUBMIT THE JOB'\n  ENDIF\n  IF CURPOS EQ ''\n      LET CURPOS = 'MEMBER'\n  ENDIF\nENDPROC\n<<EDITS>> PROC\n  LET NMSG = 0\n  LET EMSG<1> = EMSG<2> = EMSG<3> = ''\n  LOOP PTR FROM 1 TO NVAR BY 1\n    UNTIL VARS<PTR> EQ 'SRCE'\n  ENDLOOP\n  IF LENGTH(MEMBER) EQ 0\n      LET EMSG<1> = 'A LIBRARIAN MEMBER NAME IS REQUIRED'\n      LET NMSG = NMSG + 1\n  ELSE\n      IF MEMBER NE SAVE<1>\n          IF LENGTH(DESC<PTR>) EQ 0\n              EXEC PFX.CCDEFGET VARS<PTR>\n              SELECT AWS ROS1\n              LET DESC<PTR> = R1\n          ENDIF\n          EXEC PFX.CCMEMSEL MEMBER DESC<PTR>\n          SELECT AWS ROS1\n          IF R1 EQ ''\n              LET EMSG<1> = 'SELECTED MEMBER NAME HAS NO MATCH'\n              LET EMSG<1> = EMSG<1> | ' ON LIBRARIAN'\n              LET NMSG = NMSG + 1\n          ELSE\n              LET MEMBER     = R1\n              LET RETINFO<1> = R2\n              LET RETINFO<2> = R3\n              LET RETINFO<3> = R4\n              LET RETINFO<4> = R5\n          ENDIF\n      ENDIF\n  ENDIF\n  SELECT FIRST\n    WHEN REPLACE EQ 'N'\n      LET ROSMEM = ''\n    WHEN REPLACE EQ 'Y'\n      IF ROSMEM NE SAVE<3> OR ROSMEM EQ ''\n          IF ROSMEM EQ ''\n              LET ROSMEM = MEMBER\n          ENDIF\n          EXEC PFX.CCROSSEL ROSMEM\n          SELECT AWS ROS1\n          SELECT FIRST\n            WHEN R1 EQ ''\n              LET EMSG<3> = 'SELECTED ROSCOE MEMBER NAME HAS NO MATCH'\n              LET EMSG<3> = EMSG<3> | ' IN YOUR ROSCOE LIBRARY'\n              LET NMSG = NMSG + 1\n            WHEN R1 EQ '$$CANCEL'\n              LET EMSG<3> = 'LIBRARY MEMBER REPLACEMENT FROM ROSCOE'\n              LET EMSG<3> = EMSG<3> | ' HAS BEEN CANCELLED'\n              LET NMSG = NMSG + 1\n              LET REPLACE = 'N'\n              LET ROSMEM = ''\n            WHEN NONE\n              LET ROSMEM = R1\n          ENDSEL\n      ENDIF\n    WHEN NONE\n      LET EMSG<2> = '\"REPLACE\" MUST BE \"Y\"(YES) OR \"N\"(NO)'\n      LET NMSG = NMSG + 1\n  ENDSEL\n  LOOP PTR FROM 1 TO NVAR BY 1\n      IF LENGTH(DESC<PTR>) EQ 0\n          EXEC PFX.CCDEFGET VARS<PTR>\n          SELECT AWS ROS1\n          LET DESC<PTR> = R1\n      ENDIF\n      LET MSGS<PTR> = ''\n      SELECT FIRST\n        WHEN VARS<PTR> EQ 'APID'\n          IF LENGTH(DESC<PTR>) EQ 0\n              LET MSGS<PTR> = 'APPLICATION ID IS MISSING'\n          ENDIF\n        WHEN VARS<PTR> EQ 'JNAM'\n          SELECT FIRST\n:*--------------------------------------------------------------------*\n:*          WHEN SUBSTR(DESC<PTR> 1 1) NE 'D'                         *\n:*            LET MSGS<PTR> = 'JOB NAME STUB MUST BEGIN WITH'         *\n:*            LET MSGS<PTR> = MSGS<PTR> | ' \"D\" FOR DEVELOPMENT'      *\n:*--------------------------------------------------------------------*\n            WHEN LENGTH(DESC<PTR>) LT 3\n              LET MSGS<PTR> = 'JOB NAME MUST BE AT LEAST'\n              LET MSGS<PTR> = MSGS<PTR> | ' 3 CHARACTERS LONG'\n            WHEN NOT CONFORM(DESC<PTR> 'AN')\n              LET MSGS<PTR> = 'CHARACTERS IN JOB NAME MUST'\n              LET MSGS<PTR> = MSGS<PTR> | ' BE ALPHANUMERIC'\n            WHEN NONE\n              EXEC PFX.CCDEFGET 'JNAM'\n              IF SUBSTR(DESC<PTR> 1 LENGTH(R1)) EQ R1\n                  LET CARD = PAD(SAVE<1> 6)\n                  LET CARD = SUBSTR(CARD LENGTH(R1)-1 8-LENGTH(R1))\n                  LET CARD = TRIM(CARD)\n                  SELECT FIRST\n                    WHEN DESC<PTR> EQ R1\n                    WHEN TRIM(SUBSTR(DESC<PTR> LENGTH(R1)+1)) EQ CARD\n                    WHEN ANY\n                      LET CARD = PAD(MEMBER 6)\n                      LET CARD = SUBSTR(CARD LENGTH(R1)-1 8-LENGTH(R1))\n                      LET DESC<PTR> = R1|CARD\n                  ENDSEL\n              ENDIF\n          ENDSEL\n        WHEN VARS<PTR> EQ 'ACCT'\n          IF LENGTH(DESC<PTR>) NE 4\n              LET MSGS<PTR> = 'ACCOUNT CODE MUST CONTAIN 4 CHARACTERS'\n          ENDIF\n      ENDSEL\n      IF MSGS<PTR> NE ''\n          LET NMSG = NMSG + 1\n      ENDIF\n  ENDLOOP\n  IF EMSG<1> EQ ''\n      LET SAVE<1> = MEMBER\n  ENDIF\n  IF EMSG<3> EQ ''\n      LET SAVE<3> = ROSMEM\n  ENDIF\nENDPROC\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$CCT": {"ttr": 2308, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01$\\x1f\\x01\\x01$\\x1f\\x14\\x07\\x01F\\x01F\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-08-29T00:00:00", "modifydate": "2001-08-29T14:07:00", "lines": 326, "newlines": 326, "modlines": 0, "user": "EGHF3PY"}, "text": "<<$CCT>> : A1=MEMBER  <A2=REP/SUB>  <A3=REP/SUB> A4=LAST?(YES=0)\n  EXEC PFX.CCSESSET\n  SET STMTCNT MAX\n  DECLARE MEMBER REPLACE ROSMEM SUBMIT SAVE<3> EMSG<3>\n  DECLARE NVAR PTR CARD CURPOS NMSG RETINFO<4>\n  LET MEMBER = A1\n  IF A2 EQ 'REP' OR A3 EQ 'REP'\n      LET REPLACE = 'Y'\n  ELSE\n      LET REPLACE = 'N'\n  ENDIF\n  IF A2 EQ 'SUB' OR A3 EQ 'SUB'\n      LET SUBMIT = 'Y'\n  ELSE\n      LET SUBMIT = 'N'\n  ENDIF\n  DECLARE VARS<13> DESC<13> MSGS<13>\n  LET NVAR = 13                     : NUMBER OF VARIABLE NAMES IN PANEL\n  LET VARS<01> = 'SRCE'\n  LET VARS<02> = 'OLNK'\n  LET VARS<03> = 'APID'\n  LET VARS<04> = 'ENVR'\n  LET VARS<05> = 'ACOP'\n  LET VARS<06> = 'ALOP'\n  LET VARS<07> = 'CMOP'\n  LET VARS<08> = 'JNAM'\n  LET VARS<09> = 'ACCT'\n  LET VARS<10> = 'ROOM'\n  LET VARS<11> = 'UNAM'\n  LET VARS<12> = 'MSGC'\n  LET VARS<13> = 'REMT'\n  DO <<GETDEFS>>\n  DO <<EDITS>>\n  LOOP\n    UNTIL NMSG EQ 0 AND SUBMIT NE 'N'\n      PANEL ACTIVATE PFX.CCTXXPAN\n      DO <<PUTPAN>>\n     %PANEL SEND CURSOR P.%CURPOS%\n      LET CURPOS = ''\n      IF AID EQ 'CLEAR'\n          LET NMSG = 0\n          LET SUBMIT = 'Q'\n      ELSE\n          DO <<GETPAN>>\n          DO <<EDITS>>\n          SELECT FIRST\n            WHEN AID EQ 'PF1'\n              EXEC PFX.CCHLPSHO 'CCTXX'\n              SELECT AWS ROS1\n            WHEN AID EQ 'PF2'\n              EXEC PFX.CCDEFSET\n              DO <<GETDEFS>>\n          ENDSEL\n          SELECT FIRST\n            WHEN NMSG NE 0\n              RELOOP\n            WHEN AID EQ 'PF9'\n              LET SUBMIT = 'Y'\n            WHEN AID EQ 'PF8'\n              LET SUBMIT = 'A'\n          ENDSEL\n      ENDIF\n  ENDLOOP\n  SELECT FIRST\n    WHEN SUBMIT EQ 'Y'\n      DO <<BUILDJCL>>\n      SET MSGLEVEL ERROR\n      SUBMIT\n      LET PTR = INDEX(LASTERR ' <')\n      IF PTR LE 0\n          LET PTR = LENGTH(LASTERR)\n      ENDIF\n     %LET CARD = SUBSTR(LASTERR 1 %PTR%)\n      CREATE AWS CCMSGS NONRECOVERABLE LEVEL\n      TRAP\n      FETCH $$CCMSGS\n      TRAP OFF\n      %%AWSCOUNT+1% %CARD%\n      UPDATE $$CCMSGS\n    WHEN SUBMIT EQ 'A'\n      DO <<BUILDJCL>>\n      ATTACH\n      IF A4 GT 0\n          RESPONSE 'WHEN READY TO CONTINUE, ENTER \"GO\"'\n          PAUSE\n      ENDIF\n    WHEN NONE\n      DELETE\n  ENDSEL\n  RETURN\n<<GETDEFS>> PROC\n  LOOP PTR FROM 1 TO NVAR BY 1\n      EXEC PFX.CCDEFGET VARS<PTR>\n      LET DESC<PTR> = R1\n  ENDLOOP\n  SELECT AWS ROS1\nENDPROC\n<<BUILDJCL>> PROC\n  SELECT AWS ROS1\n  DELETE\n  COPY PFX.CCJOBJCL T\n:::::::::::::: INSERT ACS DESTINATION INFO\n  TRAP ON\n  COPY ACSDEST B\n  %EDIT /&TITLE1/%MEMBER%/\n  TRAP OFF\n  COPY PFX.CCTXXJCL B\n  LET CARD = ''\n  LOOP PTR FROM 1 TO NVAR BY 1\n      SELECT FIRST\n        WHEN VARS<PTR> EQ 'UNAM'\n          LET NMSG = NMSG + 1\n          LET CARD = DESC<PTR>\n        WHEN NONE\n         %EDIT `?%VARS<PTR>%`%DESC<PTR>%`\n      ENDSEL\n  ENDLOOP\n %EDIT `?MEMB`%MEMBER%`\n %EDIT `?JPRO`%TRIM(SUBSTR(CARD|' '|MEMBER 1 20))%`\n  POINT AWS LINE T\n  FIND /-REP ALL/\n  IF REPLACE EQ 'Y' AND ROSMEM NE '$$CANCEL' AND ROSMEM NE ''\n      %COPY %ROSMEM% %SEQ%\n      TRAP\n      FIND /*       LIB ASM /\n      IF TC EQ 0\n          %READ AWS %SEQ% CARD\n          LET RETINFO<2> = SUBSTR(PAD(CARD 72) 26 15)\n          LET RETINFO<3> = SUBSTR(PAD(CARD 72) 42 32)\n      ENDIF\n  ELSE\n      %DELETE %SEQ%\n  ENDIF\n  TRAP OFF\n %EDIT `?PSWD`%RETINFO<1>%`\n %EDIT `?PGMR`%RETINFO<2>%`\n %EDIT `?DESC`%RETINFO<3>%`\n %EDIT `?LNAM`%RETINFO<4>%`\nENDPROC\n<<GETPAN>> PROC\n  LET MEMBER  = TRIM(TRIM(P.MEMBER '_'))\n  LET REPLACE = TRIM(TRIM(P.REPLACE '_'))\n  LET ROSMEM  = TRIM(TRIM(P.ROSMEM '_'))\n  LOOP PTR FROM 1 TO NVAR BY 1\n     %LET CARD = TRIM(TRIM(P.%VARS<PTR>% '_'))\n      IF CARD NE DESC<PTR>\n          LET DESC<PTR> = CARD\n      ENDIF\n  ENDLOOP\n  LET CARD = ''\nENDPROC\n<<PUTPAN>> PROC\n  LET NMSG = 0\n  LET P.MEMBER = PAD(MEMBER MAXLEN(P.MEMBER) '_')\n  IF EMSG<1> NE ''\n      LET NMSG = NMSG + 1\n      LET P.MSG<NMSG> = EMSG<1>\n      LET A.MEMBER = 'UHM'\n      LET CURPOS = 'MEMBER'\n  ENDIF\n  LET P.REPLACE = PAD(REPLACE MAXLEN(P.REPLACE) '_')\n  IF EMSG<2> NE ''\n      LET NMSG = NMSG + 1\n      LET P.MSG<NMSG> = EMSG<2>\n      LET A.REPLACE = 'UHM'\n      LET CURPOS = 'REPLACE'\n  ENDIF\n  IF REPLACE EQ 'Y'\n      LET A.ROSLIT = 'SL'\n      LET P.ROSMEM = PAD(ROSMEM MAXLEN(P.ROSMEM) '_')\n      IF EMSG<3> NE ''\n          LET NMSG = NMSG + 1\n          LET P.MSG<NMSG> = EMSG<3>\n          IF INDEX(EMSG<3> 'CANCELLED') GT 0\n              LET A.ROSMEM = 'ULM'\n          ELSE\n              LET CURPOS = 'ROSMEM'\n              LET A.ROSMEM = 'UHM'\n          ENDIF\n      ELSE\n          LET A.ROSMEM = 'ULM'\n      ENDIF\n  ELSE\n      LET A.ROSLIT = 'SI'\n      LET A.ROSMEM = 'SIM'\n  ENDIF\n  LOOP PTR FROM 1 TO NVAR BY 1\n     %LET P.%VARS<PTR>% = PAD(DESC<PTR> MAXLEN(P.%VARS<PTR>%) '_')\n      IF MSGS<PTR> NE ''\n          LET NMSG = NMSG + 1\n          IF NMSG LT 4\n              LET P.MSG<NMSG> = MSGS<PTR>\n          ENDIF\n          IF INDEX(MSGS<PTR> 'DEFAULT' 1) LE 0\n             %LET A.%VARS<PTR>% = 'UHM'\n              IF CURPOS EQ ''\n                  LET CURPOS = VARS<PTR>\n              ENDIF\n          ENDIF\n      ENDIF\n  ENDLOOP\n  IF NMSG EQ 0\n      LET P.MSG<1> = 'PRESS \"PF8\" TO EDIT JCL IN YOUR AWS,'\n      LET P.MSG<1> = P.MSG<1> | ' \"PF9\" TO SUBMIT THE JOB'\n  ENDIF\n  IF CURPOS EQ ''\n      LET CURPOS = 'MEMBER'\n  ENDIF\nENDPROC\n<<EDITS>> PROC\n  LET NMSG = 0\n  LET EMSG<1> = EMSG<2> = EMSG<3> = ''\n  LOOP PTR FROM 1 TO NVAR BY 1\n    UNTIL VARS<PTR> EQ 'SRCE'\n  ENDLOOP\n  IF LENGTH(MEMBER) EQ 0\n      LET EMSG<1> = 'A LIBRARIAN MEMBER NAME IS REQUIRED'\n      LET NMSG = NMSG + 1\n  ELSE\n      IF MEMBER NE SAVE<1>\n          IF LENGTH(DESC<PTR>) EQ 0\n              EXEC PFX.CCDEFGET VARS<PTR>\n              SELECT AWS ROS1\n              LET DESC<PTR> = R1\n          ENDIF\n          EXEC PFX.CCMEMSEL MEMBER DESC<PTR>\n          SELECT AWS ROS1\n          IF R1 EQ ''\n              LET EMSG<1> = 'SELECTED MEMBER NAME HAS NO MATCH'\n              LET EMSG<1> = EMSG<1> | ' ON LIBRARIAN'\n              LET NMSG = NMSG + 1\n          ELSE\n              LET MEMBER     = R1\n              LET RETINFO<1> = R2\n              LET RETINFO<2> = R3\n              LET RETINFO<3> = R4\n              LET RETINFO<4> = R5\n          ENDIF\n      ENDIF\n  ENDIF\n  SELECT FIRST\n    WHEN REPLACE EQ 'N'\n      LET ROSMEM = ''\n    WHEN REPLACE EQ 'Y'\n      IF ROSMEM NE SAVE<3> OR ROSMEM EQ ''\n          IF ROSMEM EQ ''\n              LET ROSMEM = MEMBER\n          ENDIF\n          EXEC PFX.CCROSSEL ROSMEM\n          SELECT AWS ROS1\n          SELECT FIRST\n            WHEN R1 EQ ''\n              LET EMSG<3> = 'SELECTED ROSCOE MEMBER NAME HAS NO MATCH'\n              LET EMSG<3> = EMSG<3> | ' IN YOUR ROSCOE LIBRARY'\n              LET NMSG = NMSG + 1\n            WHEN R1 EQ '$$CANCEL'\n              LET EMSG<3> = 'LIBRARY MEMBER REPLACEMENT FROM ROSCOE'\n              LET EMSG<3> = EMSG<3> | ' HAS BEEN CANCELLED'\n              LET NMSG = NMSG + 1\n              LET REPLACE = 'N'\n              LET ROSMEM = ''\n            WHEN NONE\n              LET ROSMEM = R1\n          ENDSEL\n      ENDIF\n    WHEN NONE\n      LET EMSG<2> = '\"REPLACE\" MUST BE \"Y\"(YES) OR \"N\"(NO)'\n      LET NMSG = NMSG + 1\n  ENDSEL\n  LOOP PTR FROM 1 TO NVAR BY 1\n      IF LENGTH(DESC<PTR>) EQ 0\n          EXEC PFX.CCDEFGET VARS<PTR>\n          SELECT AWS ROS1\n          LET DESC<PTR> = R1\n      ENDIF\n      LET MSGS<PTR> = ''\n      SELECT FIRST\n        WHEN VARS<PTR> EQ 'APID'\n          IF LENGTH(DESC<PTR>) EQ 0\n              LET MSGS<PTR> = 'APPLICATION ID IS MISSING'\n          ENDIF\n        WHEN VARS<PTR> EQ 'JNAM'\n          SELECT FIRST\n:*--------------------------------------------------------------------*\n:*          WHEN SUBSTR(DESC<PTR> 1 1) NE 'D'                         *\n:*            LET MSGS<PTR> = 'JOB NAME STUB MUST BEGIN WITH'         *\n:*            LET MSGS<PTR> = MSGS<PTR> | ' \"D\" FOR DEVELOPMENT'      *\n:*--------------------------------------------------------------------*\n            WHEN LENGTH(DESC<PTR>) LT 3\n              LET MSGS<PTR> = 'JOB NAME MUST BE AT LEAST'\n              LET MSGS<PTR> = MSGS<PTR> | ' 3 CHARACTERS LONG'\n            WHEN NOT CONFORM(DESC<PTR> 'AN')\n              LET MSGS<PTR> = 'CHARACTERS IN JOB NAME MUST'\n              LET MSGS<PTR> = MSGS<PTR> | ' BE ALPHANUMERIC'\n            WHEN NONE\n              EXEC PFX.CCDEFGET 'JNAM'\n              IF SUBSTR(DESC<PTR> 1 LENGTH(R1)) EQ R1\n                  LET CARD = PAD(SAVE<1> 6)\n                  LET CARD = SUBSTR(CARD LENGTH(R1)-1 8-LENGTH(R1))\n                  LET CARD = TRIM(CARD)\n                  SELECT FIRST\n                    WHEN DESC<PTR> EQ R1\n                    WHEN TRIM(SUBSTR(DESC<PTR> LENGTH(R1)+1)) EQ CARD\n                    WHEN ANY\n                      LET CARD = PAD(MEMBER 6)\n                      LET CARD = SUBSTR(CARD LENGTH(R1)-1 8-LENGTH(R1))\n                      LET DESC<PTR> = R1|CARD\n                  ENDSEL\n              ENDIF\n          ENDSEL\n        WHEN VARS<PTR> EQ 'ACCT'\n          IF LENGTH(DESC<PTR>) NE 4\n              LET MSGS<PTR> = 'ACCOUNT CODE MUST CONTAIN 4 CHARACTERS'\n          ENDIF\n      ENDSEL\n      IF MSGS<PTR> NE ''\n          LET NMSG = NMSG + 1\n      ENDIF\n  ENDLOOP\n  IF EMSG<1> EQ ''\n      LET SAVE<1> = MEMBER\n  ENDIF\n  IF EMSG<3> EQ ''\n      LET SAVE<3> = ROSMEM\n  ENDIF\nENDPROC\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$CCXL": {"ttr": 2314, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01$\\x1f\\x01\\x01$\\x1f\\x14\\x17\\x00\\xa0\\x00\\xa0\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-08-29T00:00:00", "modifydate": "2001-08-29T14:17:00", "lines": 160, "newlines": 160, "modlines": 0, "user": "EGHF3PY"}, "text": "<<$CCXL>> : A1=OPTION  A2=LISTNAME  <A3=REP/SUB>  <A4=REP/SUB>\n  EXEC PFX.RESET\n  DECLARE LISTNAME SAVENAME MEMB EMSG TOPPTR REPL SUBM\n  DECLARE NSLOTS NMEMBS PTR CARD CURPOS NMSG RETINFO<4>\n  TRAP\n  DELETE $$CCLIST\n  TRAP OFF\n  LET TOPPTR = 0\n  LET LISTNAME = A2\n  IF A3 EQ 'REP' OR A4 EQ 'REP'\n      LET REPL = 'Y'\n  ELSE\n      LET REPL = 'N'\n  ENDIF\n  IF A3 EQ 'SUB' OR A4 EQ 'SUB'\n      LET SUBM = 'Y'\n  ELSE\n      LET SUBM = 'N'\n  ENDIF\n  DO <<EDITS>>\n  LOOP\n    UNTIL NMSG EQ 0 AND AID EQ 'PF6'\n      DO <<PUTPAN>>\n     %PANEL SEND CURSOR P.%CURPOS%\n      LET CURPOS = ''\n      IF AID EQ 'CLEAR'\n          POP\n          STOP\n      ELSE\n          DO <<GETPAN>>\n          DO <<EDITS>>\n          SELECT FIRST\n            WHEN AID EQ 'PF1'\n              EXEC PFX.CCHLPSHO 'CCXLX'\n              SELECT AWS ROS1\n            WHEN AID EQ 'PF2'\n              EXEC PFX.CCDEFSET\n              SELECT AWS ROS1\n            WHEN AID EQ 'PF7'\n              LET TOPPTR = TOPPTR - NSLOTS\n              IF TOPPTR LT 0\n                  LET TOPPTR = 0\n              ENDIF\n            WHEN AID EQ 'PF8'\n              LET TOPPTR = TOPPTR + NSLOTS\n              IF TOPPTR GE NMEMBS\n                  LET TOPPTR = NMEMBS - 1\n              ENDIF\n          ENDSEL\n      ENDIF\n  ENDLOOP\n  RETURN\n<<GETPAN>> PROC\n  LET LISTNAME = TRIM(TRIM(P.LISTNAME '_'))\n  DELETE\n  TRAP\n  FETCH $$CCLIST\n  TRAP OFF\n %LOOP PTR FROM 1 TO %NSLOTS% BY 1\n      LET MEMB = TRIM(TRIM(P.MEMB<PTR> '_'))\n      IF MEMB EQ ''\n          TRAP\n         %DELETE %TOPPTR+PTR%\n          TRAP OFF\n      ELSE\n         %%TOPPTR+PTR% %MEMB%\n      ENDIF\n  ENDLOOP\n  IF AWSCOUNT GT 0\n      DO <<PREPLIST>>\n      UPDATE $$CCLIST\n  ENDIF\nENDPROC\n<<PUTPAN>> PROC\n  TRAP\n  FETCH $$CCLIST\n  TRAP OFF\n  PANEL ACTIVATE PFX.CCXLXPAN\n  SELECT FIRST\n    WHEN A1 EQ 'A'\n      LET P.TITLE = '   BMS MAP ASSEMBLE LIST PROCESSOR'\n    WHEN A1 EQ 'B'\n      LET P.TITLE = ' BATCH COBOL COMPILE LIST PROCESSOR'\n    WHEN A1 EQ 'C'\n      LET P.TITLE = '  CICS COBOL COMPILE LIST PROCESSOR'\n    WHEN NONE\n      LET P.TITLE = ' LIST PROCESSOR FOR UNKNOWN REASONS'\n  ENDSEL\n  LET NSLOTS = HBOUND(P.MEMB)\n  LET P.LISTNAME = PAD(LISTNAME 8 '_')\n  LOOP PTR FROM 1 TO NSLOTS BY 1\n    UNTIL TOPPTR+PTR GT AWSCOUNT\n     %READ AWS %TOPPTR+PTR% CARD\n      LET P.MEMB<PTR> = PAD(TRIM(SUBSTR(PAD(CARD 8) 1 8)) 8 '_')\n  ENDLOOP\n  IF NMSG EQ 0\n      LET P.MSG = 'PRESS \"PF6\" TO CONFIRM WHEN MEMBER LIST IS COMPLETE'\n  ELSE\n      LET P.MSG = EMSG\n      LET EMSG = ''\n      LET A.LISTNAME = 'UHM'\n      LET CURPOS = 'LISTNAME'\n      IF NMSG EQ 2\n          LET A.MEMB<1> = 'UHM'\n      ENDIF\n  ENDIF\n  IF CURPOS EQ ''\n      LET CURPOS = 'LISTNAME'\n  ENDIF\nENDPROC\n<<EDITS>> PROC\n  LET NMSG = 0\n  IF LISTNAME EQ ''\n      TRAP\n      FETCH $$CCLIST\n      TRAP OFF\n      IF TC NE 0\n          LET EMSG = 'ENTER EITHER A LIST NAME OR AT LEAST '\n          LET EMSG = EMSG | 'ONE MEMBER NAME TO BE COMPILED'\n          LET NMSG = 2\n          LET CURPOS = 'LISTNAME'\n      ENDIF\n      LET SAVENAME = LISTNAME\n  ELSE\n      IF LISTNAME NE SAVENAME\n          TRAP\n         %FIND %LISTNAME%\n          TRAP OFF\n          IF TC EQ 0\n              TRAP\n              FETCH $$CCLIST\n              TRAP OFF\n             %COPY %LISTNAME% B\n              LET SAVENAME = LISTNAME\n          ELSE\n             %LET EMSG = 'ROSCOE MEMBER \"%LISTNAME%\" NOT FOUND'\n              LET NMSG = 1\n              LET CURPOS = 'LISTNAME'\n          ENDIF\n      ENDIF\n  ENDIF\n  IF AWSCOUNT GT 0\n      DO <<PREPLIST>>\n      UPDATE $$CCLIST\n  ENDIF\nENDPROC\n<<PREPLIST>> PROC\n  FILL 81 255 / /\n  RENUMBER 1 1\n  IF AWSCOUNT GT 1\n     %EXEC PFX.IN 81 86 '000001' 1 1 %AWSCOUNT%\n      SORT SORT FIELDS=(1,9,CH,A)\n      EXEC PFX.DELDUPS 1 9\n      SORT SORT FIELDS=(81,6,CH,A)\n      FILL 81 86 / /\n      RENUMBER 1 1\n  ENDIF\n  FILL 10 10 /C/\n  LET NMEMBS = AWSCOUNT\nENDPROC\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$DD": {"ttr": 2561, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01$\\x1f\\x01\\x01$\\x1f\\x14\\x18\\x00\\xc4\\x00\\xc4\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-08-29T00:00:00", "modifydate": "2001-08-29T14:18:00", "lines": 196, "newlines": 196, "modlines": 0, "user": "EGHF3PY"}, "text": "<<$DD>>  A1=A/B/C/D, A2=L/MEMNAME, A3=REP/SUB, A4=REP/SUB\n  SET STMTCNT MAX\n  PUSH\n  EXEC PFX.CCSESSET\n  DECLARE OPTION MEMBER REPLACE SUBMIT ERRS<4>\n  LET REPLACE = 'N'\n  LET SUBMIT = 'N'\n  DECLARE NMSG PMSG PTR CURPOS FLD NLIST LIST REPL SUBM SHOWEX\n  EXEC PFX.CCDEFSET 'NO DISPLAY IF OK'\n  CREATE AWS CCLIST NONRECOVERABLE LEVEL\n  LET NLIST = 0\n  TRAP\n  DELETE $$CCMSGS\n  TRAP OFF\n  LET PTR = 2\n  SELECT FIRST\n    WHEN A1 EQ '='\n      LET LIST = A2\n    WHEN A1 EQ 'L'\n      LET LIST = A2\n      LET MEMBER = 'L'\n    WHEN LENGTH(A1) EQ 1\n      LET OPTION = A1\n      LET MEMBER = A2\n      IF A2 EQ 'L'\n          LET LIST = A3\n          LET PTR = 3\n      ENDIF\n    WHEN NONE\n      LET MEMBER = A1\n      LET PTR = 1\n  ENDSEL\n  IF A<PTR+1> EQ 'REP' OR A<PTR+2> EQ 'REP'\n      LET REPL = 'REP'\n      LET REPLACE = 'Y'\n  ENDIF\n  IF A<PTR+1> EQ 'SUB' OR A<PTR+2> EQ 'SUB'\n      LET SUBM = 'SUB'\n      LET SUBMIT = 'Y'\n  ENDIF\n  IF A1 EQ '='\n     %FETCH %LIST%\n      RENUMBER 1 1\n      UPDATE $$CCLIST\n  ELSE\n      LOOP\n          DO <<EDITS>>\n        UNTIL NMSG EQ 0\n          PANEL ACTIVATE PFX.DDXXXPAN\n          DO <<PANPUT>>\n         %PANEL SEND CURSOR P.%CURPOS%\n          IF AID EQ 'CLEAR'\n              POP\n              STOP\n          ELSE\n              DO <<PANGET>>\n              SELECT FIRST\n                WHEN AID EQ 'PF1'\n                  EXEC PFX.CCHLPSHO 'CCXXX'\n                  SELECT AWS CCLIST\n                WHEN AID EQ 'PF2'\n                  EXEC PFX.CCDEFSET\n                  SELECT AWS CCLIST\n              ENDSEL\n          ENDIF\n      ENDLOOP\n      IF MEMBER EQ 'L'\n         %EXEC PFX.$DD%OPTION%L LIST REPL SUBM\n          SELECT AWS CCLIST\n      ELSE\n          DELETE\n         %1 %PAD(MEMBER 9)%%OPTION%\n          UPDATE $$CCLIST\n      ENDIF\n  ENDIF\n  FETCH $$CCLIST\n  LET NLIST = AWSCOUNT\n  LOOP PTR FROM 1 TO NLIST BY 1\n     %READ AWS %PTR% MEMBER\n      LET OPTION = SUBSTR(MEMBER 10 1)\n      LET MEMBER = TRIM(SUBSTR(MEMBER 1 8))\n      SELECT AWS ROS1\n     %EXEC PFX.$DD%OPTION% MEMBER REPL SUBM '%NLIST-PTR%'\n    UNTIL PTR EQ NLIST\n      SELECT AWS CCLIST\n  ENDLOOP\n  IF AID NE 'PF8'\n      TRAP\n      FIND $$CCMSGS\n      TRAP OFF\n      IF TC EQ 0\n          DELETE\n          COPY $$CCMSGS T\n          DELETE $$CCMSGS\n      ENDIF\n  ENDIF\n  IF AWSCOUNT GT 0\n      ATTACH\n  ENDIF\n  POP\n  RETURN\n<<PANGET>> PROC\n  LET OPTION  = TRIM(TRIM(P.OPTION '_'))\n  LET MEMBER  = TRIM(TRIM(P.MEMBER '_'))\n  LET REPLACE = TRIM(TRIM(P.REPLACE '_'))\n  LET SUBMIT  = TRIM(TRIM(P.SUBMIT '_'))\nENDPROC\n<<PANPUT>> PROC\n  LET PMSG = 0\n  LET CURPOS = ''\n  LET P.OPTION  = PAD(OPTION MAXLEN(P.OPTION) '_')\n  LET P.MEMBER  = PAD(MEMBER MAXLEN(P.MEMBER) '_')\n  LET P.REPLACE = PAD(REPLACE MAXLEN(P.REPLACE) '_')\n  LET P.SUBMIT  = PAD(SUBMIT MAXLEN(P.SUBMIT) '_')\n::IF SHOWEX EQ '\\'\n:::::%LOOP PTR FROM 1 TO %HBOUND(P.XTRA)% BY 1\n::::::::::LET A.XTRA<PTR> = 'S'\n::::: ENDLOOP\n::ENDIF\n  LOOP PTR FROM 1 TO 4 BY 1\n      IF ERRS<PTR> NE ''\n          LET PMSG = PMSG + 1\n          IF PMSG LT 4\n             %LET P.MSG<%3-NMSG+PMSG%> = ERRS<PTR>\n          ENDIF\n          LET FLD = SUBSTR('OPTION MEMBER REPLACESUBMIT ' PTR*7-6 7)\n          LET FLD = TRIM(FLD)\n         %LET A.%FLD% = 'UHM'\n          IF CURPOS EQ ''\n              LET CURPOS = FLD\n          ENDIF\n          LET ERRS<PTR> = ''\n      ENDIF\n  ENDLOOP\nENDPROC\n<<EDITS>> PROC\n  LET NMSG = 0\n::IF OPTION EQ '\\'\n::::::LET SHOWEX = '\\'\n::::::LET OPTION = ' '\n::ENDIF\n  IF OPTION EQ 'A'\n  ELSE\n  IF OPTION EQ 'B'\n  ELSE\n  IF OPTION EQ 'C'\n  ELSE\n  IF OPTION EQ 'D'\n  ELSE\n  IF OPTION EQ 'P' AND SHOWEX EQ '\\'\n  ELSE\n  IF OPTION EQ 'T' AND SHOWEX EQ '\\'\n  ELSE\n  IF OPTION EQ ''\n      LET ERRS<1> = 'MAKE A SELECTION FROM THE MENU ABOVE'\n      LET NMSG = NMSG + 1\n  ELSE\n      LET ERRS<1> = 'INVALID SELECTION - MUST BE ONE OF THOSE ABOVE'\n      LET NMSG = NMSG + 1\n  ENDIF\n  ENDIF\n  ENDIF\n  ENDIF\n  ENDIF\n  ENDIF\n  ENDIF\n  IF MEMBER EQ ''\n      LET ERRS<2> = 'ENTER THE NAME OF THE LIBRARY MEMBER TO BE'\n      LET ERRS<2> = ERRS<2> | ' COMPILED, OR \"L\" TO PROCESS A LIST'\n      LET NMSG = NMSG + 1\n  ENDIF\n  SELECT FIRST\n    WHEN REPLACE EQ ''\n      LET REPLACE = 'N'\n      LET REPL = ''\n    WHEN REPLACE EQ 'N'\n      LET REPL = ''\n    WHEN REPLACE EQ 'Y'\n      LET REPL = 'REP'\n    WHEN NONE\n      LET ERRS<3> = 'REPLACE MUST BE \"Y\" OR \"N\" (YES OR NO)'\n      LET NMSG = NMSG + 1\n  ENDSEL\n  SELECT FIRST\n    WHEN SUBMIT EQ ''\n      LET SUBMIT = 'N'\n      LET SUBM = ''\n    WHEN SUBMIT EQ 'N'\n      LET SUBM = ''\n    WHEN SUBMIT EQ 'Y'\n      LET SUBM = 'SUB'\n    WHEN NONE\n      LET ERRS<3> = 'SUBMIT MUST BE \"Y\" OR \"N\" (YES OR NO)'\n      LET NMSG = NMSG + 1\n  ENDSEL\nENDPROC\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$DDA": {"ttr": 2565, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01$\\x1f\\x01\\x01$\\x1f\\x14\\x19\\x01\\xba\\x01\\xba\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-08-29T00:00:00", "modifydate": "2001-08-29T14:19:00", "lines": 442, "newlines": 442, "modlines": 0, "user": "EGHF3PY"}, "text": "<<$DDA>> : A1=MEMBER  <A2=REP/SUB>  <A3=REP/SUB> A4=LAST?(YES=0)\n  EXEC PFX.CCSESSET\n  SET STMTCNT MAX\n  DECLARE MEMBER ROSVAR<2> URTVAR<2> SUBMIT SAVE<5> EMSG<5>\n  DECLARE NVAR PTR CARD CURPOS NMSG RETINFO<4>\n  LET MEMBER = A1\n  IF A2 EQ 'REP' OR A3 EQ 'REP'\n      LET ROSVAR<1> = 'Y'\n  ELSE\n      LET ROSVAR<1> = 'N'\n  ENDIF\n  IF A2 EQ 'SUB' OR A3 EQ 'SUB'\n      LET SUBMIT = 'Y'\n  ELSE\n      LET SUBMIT = 'N'\n  ENDIF\n  DECLARE VARS<15> DESC<15> MSGS<15>\n  LET NVAR = 15                     : NUMBER OF VARIABLE NAMES IN PANEL\n  LET VARS<01> = 'SRCE'\n  LET VARS<02> = 'URTL'\n  LET VARS<03> = 'BLNK'\n  LET VARS<04> = 'BTST'\n  LET VARS<05> = 'APID'\n  LET VARS<06> = 'ENVR'\n  LET VARS<07> = 'BCOP'\n  LET VARS<08> = 'BLOP'\n  LET VARS<09> = 'BMOP'\n  LET VARS<10> = 'JNAM'\n  LET VARS<11> = 'ACCT'\n  LET VARS<12> = 'ROOM'\n  LET VARS<13> = 'UNAM'\n  LET VARS<14> = 'MSGC'\n  LET VARS<15> = 'REMT'\n  DO <<GETDEFS>>\n  SELECT FIRST\n    WHEN LENGTH(MEMBER) EQ 0\n      LET URTVAR<1> = ''\n    WHEN LENGTH(MEMBER) GT 5\n      LET URTVAR<1> = SUBSTR(MEMBER 1 6)|'RT'\n    WHEN LENGTH(MEMBER) GT 5\n      LET URTVAR<1> = MEMBER|'URTVAR<1>'\n  ENDSEL\n  IF URTVAR<1> NE ''\n      EXEC PFX.CCDEFGET 'URTL'\n      EXEC PFX.CCURTSEL URTVAR<1> R1\n      IF R1 EQ ''\n          LET URTVAR<1> = ''\n      ELSE\n          LET URTVAR<1> = R1\n      ENDIF\n  ENDIF\n  IF URTVAR<1> EQ ''\n      LET URTVAR<2> = 'N'\n  ELSE\n      LET URTVAR<2> = 'Y'\n  ENDIF\n  LET SAVE<4> = URTVAR<1>\n  LET SAVE<5> = URTVAR<2>\n  DO <<EDITS>>\n  LOOP\n    UNTIL NMSG EQ 0 AND SUBMIT NE 'N'\n      PANEL ACTIVATE PFX.CCBXXPAN\n      DO <<PUTPAN>>\n     %PANEL SEND CURSOR P.%CURPOS%\n      LET CURPOS = ''\n      IF AID EQ 'CLEAR'\n          LET NMSG = 0\n          LET SUBMIT = 'Q'\n      ELSE\n          DO <<GETPAN>>\n          DO <<EDITS>>\n          SELECT FIRST\n            WHEN AID EQ 'PF1'\n              EXEC PFX.CCHLPSHO 'CCBXX'\n              SELECT AWS ROS1\n            WHEN AID EQ 'PF2'\n              EXEC PFX.CCDEFSET\n              DO <<GETDEFS>>\n          ENDSEL\n          SELECT FIRST\n            WHEN NMSG NE 0\n              RELOOP\n            WHEN AID EQ 'PF9'\n              LET SUBMIT = 'Y'\n            WHEN AID EQ 'PF8'\n              LET SUBMIT = 'A'\n          ENDSEL\n      ENDIF\n  ENDLOOP\n  SELECT FIRST\n    WHEN SUBMIT EQ 'Y'\n      DO <<BUILDJCL>>\n      SET MSGLEVEL ERROR\n      SUBMIT\n      LET PTR = INDEX(LASTERR ' <')\n      IF PTR LE 0\n          LET PTR = LENGTH(LASTERR)\n      ENDIF\n     %LET CARD = SUBSTR(LASTERR 1 %PTR%)\n      CREATE AWS CCMSGS NONRECOVERABLE LEVEL\n      TRAP\n      FETCH $$CCMSGS\n      TRAP OFF\n      %%AWSCOUNT+1% %CARD%\n      UPDATE $$CCMSGS\n    WHEN SUBMIT EQ 'A'\n      DO <<BUILDJCL>>\n      ATTACH\n      IF A4 GT 0\n          RESPONSE 'WHEN READY TO CONTINUE, ENTER \"GO\"'\n          PAUSE\n      ENDIF\n    WHEN NONE\n      DELETE\n  ENDSEL\n  RETURN\n<<GETDEFS>> PROC\n  LOOP PTR FROM 1 TO NVAR BY 1\n      EXEC PFX.CCDEFGET VARS<PTR>\n      LET DESC<PTR> = R1\n  ENDLOOP\n  SELECT AWS ROS1\nENDPROC\n<<BUILDJCL>> PROC\n  LOOP PTR FROM 1 TO NVAR BY 1\n    UNTIL VARS<PTR> EQ 'BTST'\n  ENDLOOP\n  SELECT AWS ROS1\n  DELETE\n  COPY PFX.CCJOBJCL T\n:::::::::::::: INSERT ACS DESTINATION INFO\n  TRAP ON\n  COPY ACSDEST B\n  %EDIT /&TITLE1/%MEMBER%/\n  TRAP OFF\n  IF DESC<PTR> EQ 'Y'\n      IF URTVAR<1> NE ''\n          COPY PFX.DDADIJCL B\n         +EDIT /?USERID/+GETKEY(S.PREFIX)+/\n      ELSE\n          COPY PFX.DDAXIJCL B\n         +EDIT /?USERID/+GETKEY(S.PREFIX)+/\n      ENDIF\n  ELSE\n      IF URTVAR<1> NE ''\n          COPY PFX.DDADXJCL B\n      ELSE\n          COPY PFX.DDAXXJCL B\n      ENDIF\n  ENDIF\n  TRAP\n  LET CARD = ''\n  LOOP PTR FROM 1 TO NVAR BY 1\n      SELECT FIRST\n        WHEN VARS<PTR> EQ 'APID'\n          IF TRIM(DESC<PTR>) EQ 'ACS'\n:*--------------------------------------------------------------------*\n:*            FIND /AUXINC1/                                          *\n:*           %EDIT /HHLQ.?APID.SAT.LIBMAST/PROD.SOURCE.LIBMAST/%SEQ%  *\n:*            FIND /AUXINC2/                                          *\n:*           %EDIT /HHLQ.?APID.?ENVR.LIBMAST/PROD.SOURCE.LIBMAST/%SEQ%*\n:*            FIND /AUXINC3/                                          *\n:*           %EDIT /DUMMY/DSN=HHLQ.?APID.?ENVR.LIBMAST,DISP=SHR/%SEQ% *\n:*--------------------------------------------------------------------*\n              FIND /AUXINC2/\n             %EDIT /DSN=HHLQ.?APID.?ENVR.LIBMAST,DISP=SHR/DUMMY/%SEQ%\n              EDIT /CLASS=J/CLASS=K/\n          ENDIF\n        WHEN VARS<PTR> EQ 'BMOP'\n          LET NMSG = NMSG + 1\n          IF INDEX(DESC<PTR> 'RMODE=24') GT 0\n              EDIT /?DLEN/24/\n          ELSE\n              EDIT /?DLEN/31/\n          ENDIF\n        WHEN VARS<PTR> EQ 'UNAM'\n          LET NMSG = NMSG + 1\n          LET CARD = DESC<PTR>\n      ENDSEL\n     %EDIT `?%VARS<PTR>%`%DESC<PTR>%`\n  ENDLOOP\n %EDIT `?PSWD`%RETINFO<1>%`\n %EDIT `?PGMR`%RETINFO<2>%`\n %EDIT `?DESC`%RETINFO<3>%`\n %EDIT `?LNAM`%RETINFO<4>%`\n %EDIT `?MEMB`%MEMBER%`\n %EDIT `?URTN`%URTVAR<1>%`\n %EDIT `?JPRO`%TRIM(SUBSTR(CARD|' '|MEMBER 1 20))%`\n  POINT AWS LINE T\n  FIND /-REP ALL/\n  IF ROSVAR<1> EQ 'Y' AND ROSVAR<2> NE '$$CANCEL' AND ROSVAR<2> NE ''\n      %COPY %ROSVAR<2>% %SEQ%\n  ELSE\n      %DELETE %SEQ%\n  ENDIF\n  TRAP OFF\nENDPROC\n<<GETPAN>> PROC\n  LET MEMBER  = TRIM(TRIM(P.MEMBER  '_'))\n  LET ROSVAR<1> = TRIM(TRIM(P.REPLACE '_'))\n  LET ROSVAR<2> = TRIM(TRIM(P.ROSMEM  '_'))\n  LET URTVAR<1> = TRIM(TRIM(P.URT     '_'))\n  LET URTVAR<2> = TRIM(TRIM(P.DATACOM '_'))\n  LOOP PTR FROM 1 TO NVAR BY 1\n     %LET CARD = TRIM(TRIM(P.%VARS<PTR>% '_'))\n      IF CARD NE DESC<PTR>\n          LET DESC<PTR> = CARD\n      ENDIF\n  ENDLOOP\n  LET CARD = ''\nENDPROC\n<<PUTPAN>> PROC\n  LET NMSG = 0\n  LET P.MEMBER = PAD(MEMBER MAXLEN(P.MEMBER) '_')\n  IF EMSG<1> NE ''\n      LET NMSG = NMSG + 1\n      LET P.MSG<NMSG> = EMSG<1>\n      LET A.MEMBER = 'UHM'\n      LET CURPOS = 'MEMBER'\n  ENDIF\n  LET P.REPLACE = PAD(ROSVAR<1> MAXLEN(P.REPLACE) '_')\n  IF EMSG<2> NE ''\n      LET NMSG = NMSG + 1\n      LET P.MSG<NMSG> = EMSG<2>\n      LET A.REPLACE = 'UHM'\n      LET CURPOS = 'REPLACE'\n  ENDIF\n  IF ROSVAR<1> EQ 'Y'\n      LET A.ROSLIT = 'SL'\n      LET P.ROSMEM = PAD(ROSVAR<2> MAXLEN(P.ROSMEM) '_')\n      IF EMSG<3> NE ''\n          LET NMSG = NMSG + 1\n          LET P.MSG<NMSG> = EMSG<3>\n          IF INDEX(EMSG<3> 'CANCELLED') GT 0\n              LET A.ROSMEM = 'ULM'\n          ELSE\n              LET CURPOS = 'ROSMEM'\n              LET A.ROSMEM = 'UHM'\n          ENDIF\n      ELSE\n          LET A.ROSMEM = 'ULM'\n      ENDIF\n  ELSE\n      LET A.ROSLIT = 'SI'\n      LET A.ROSMEM = 'SIM'\n  ENDIF\n  LET P.URT = PAD(URTVAR<1> MAXLEN(P.URT) '_')\n  IF EMSG<4> NE ''\n      LET NMSG = NMSG + 1\n      LET P.MSG<NMSG> = EMSG<4>\n      LET A.URT = 'UHM'\n      LET CURPOS = 'URT'\n  ENDIF\n  LET P.DATACOM = PAD(URTVAR<2> MAXLEN(P.DATACOM) '_')\n  IF EMSG<5> NE ''\n      LET NMSG = NMSG + 1\n      LET P.MSG<NMSG> = EMSG<5>\n      LET A.DATACOM = 'UHM'\n      LET CURPOS = 'DATACOM'\n  ENDIF\n  LOOP PTR FROM 1 TO NVAR BY 1\n     %LET P.%VARS<PTR>% = PAD(DESC<PTR> MAXLEN(P.%VARS<PTR>%) '_')\n      IF MSGS<PTR> NE ''\n          LET NMSG = NMSG + 1\n          IF NMSG LT 4\n              LET P.MSG<NMSG> = MSGS<PTR>\n          ENDIF\n          IF INDEX(MSGS<PTR> 'DEFAULT' 1) LE 0\n             %LET A.%VARS<PTR>% = 'UHM'\n              IF CURPOS EQ ''\n                  LET CURPOS = VARS<PTR>\n              ENDIF\n          ENDIF\n      ENDIF\n  ENDLOOP\n  IF NMSG EQ 0\n      LET P.MSG<1> = 'PRESS \"PF8\" TO EDIT JCL IN YOUR AWS,'\n      LET P.MSG<1> = P.MSG<1> | ' \"PF9\" TO SUBMIT THE JOB'\n  ENDIF\n  IF CURPOS EQ ''\n      LET CURPOS = 'MEMBER'\n  ENDIF\nENDPROC\n<<EDITS>> PROC\n  LET NMSG = 0\n  LET EMSG<1> = EMSG<2> = EMSG<3> = EMSG<4> = EMSG<5> = ''\n  LOOP PTR FROM 1 TO NVAR BY 1\n    UNTIL VARS<PTR> EQ 'SRCE'\n  ENDLOOP\n  IF LENGTH(MEMBER) EQ 0\n      LET EMSG<1> = 'A LIBRARIAN MEMBER NAME IS REQUIRED'\n      LET NMSG = NMSG + 1\n  ELSE\n      IF MEMBER NE SAVE<1>\n          IF LENGTH(DESC<PTR>) EQ 0\n              EXEC PFX.CCDEFGET VARS<PTR>\n              SELECT AWS ROS1\n              LET DESC<PTR> = R1\n          ENDIF\n          EXEC PFX.CCMEMSEL MEMBER DESC<PTR>\n          SELECT AWS ROS1\n          IF R1 EQ ''\n              LET EMSG<1> = 'SELECTED MEMBER NAME HAS NO MATCH'\n              LET EMSG<1> = EMSG<1> | ' ON LIBRARIAN'\n              LET NMSG = NMSG + 1\n          ELSE\n              LET MEMBER     = R1\n              LET RETINFO<1> = R2\n              LET RETINFO<2> = R3\n              LET RETINFO<3> = R4\n              LET RETINFO<4> = R5\n          ENDIF\n      ENDIF\n  ENDIF\n  SELECT FIRST\n    WHEN ROSVAR<1> EQ 'N'\n      LET ROSVAR<2> = ''\n    WHEN ROSVAR<1> EQ 'Y'\n      IF ROSVAR<2> NE SAVE<3> OR ROSVAR<2> EQ ''\n          IF ROSVAR<2> EQ ''\n              LET ROSVAR<2> = MEMBER\n          ENDIF\n          EXEC PFX.CCROSSEL ROSVAR<2>\n          SELECT AWS ROS1\n          SELECT FIRST\n            WHEN R1 EQ ''\n              LET EMSG<3> = 'SELECTED ROSCOE MEMBER NAME HAS NO MATCH'\n              LET EMSG<3> = EMSG<3> | ' IN YOUR ROSCOE LIBRARY'\n              LET NMSG = NMSG + 1\n            WHEN R1 EQ '$$CANCEL'\n              LET EMSG<3> = 'LIBRARY MEMBER REPLACEMENT FROM ROSCOE'\n              LET EMSG<3> = EMSG<3> | ' HAS BEEN CANCELLED'\n              LET ROSVAR<2> = R1\n            WHEN NONE\n              LET ROSVAR<2> = R1\n          ENDSEL\n      ENDIF\n    WHEN NONE\n      LET EMSG<2> = '\"REPLACE\" MUST BE \"Y\"(YES) OR \"N\"(NO)'\n      LET NMSG = NMSG + 1\n  ENDSEL\n  IF URTVAR<2> EQ 'Y' AND URTVAR<1> EQ ''\n      LET URTVAR<1> = SUBSTR(MEMBER 1 6)|'RT'\n  ENDIF\n  IF URTVAR<2> EQ 'N'\n      IF URTVAR<1> NE ''\n          SELECT FIRST\n            WHEN URTVAR<1> EQ SAVE<4>\n              LET URTVAR<1> = ''\n            WHEN URTVAR<2> EQ SAVE<5>\n              LET URTVAR<2> = 'Y'\n            WHEN NONE\n              LET EMSG<4> = 'EXISTENCE OF A URT IS INCONSISTENT'\n              LET EMSG<4> = EMSG<4>|' WITH DATACOM = \"N\"'\n          ENDSEL\n      ENDIF\n  ENDIF\n  IF URTVAR<2> EQ 'Y'\n      IF URTVAR<1> NE SAVE<4> OR URTVAR<2> NE SAVE<5>\n          LOOP PTR FROM 1 TO NVAR BY 1\n            UNTIL VARS<PTR> EQ 'URTL'\n          ENDLOOP\n          EXEC PFX.CCURTSEL URTVAR<1> DESC<PTR>\n          SELECT AWS ROS1\n          IF R1 EQ ''\n              LET EMSG<4> = 'SELECTED URT NAME HAS NO MATCH'\n              LET EMSG<4> = EMSG<4> | ' IN THE URT LIBRARY'\n              LET NMSG = NMSG + 1\n          ELSE\n              LET URTVAR<1> = R1\n          ENDIF\n      ENDIF\n  ELSE\n      IF URTVAR<2> NE 'N'\n          LET EMSG<5> = '\"DATACOM\" MUST BE \"Y\"(YES) OR \"N\"(NO)'\n          LET NMSG = NMSG + 1\n      ENDIF\n  ENDIF\n  LOOP PTR FROM 1 TO NVAR BY 1\n      IF LENGTH(DESC<PTR>) EQ 0\n          EXEC PFX.CCDEFGET VARS<PTR>\n          SELECT AWS ROS1\n          LET DESC<PTR> = R1\n      ENDIF\n      LET MSGS<PTR> = ''\n      SELECT FIRST\n        WHEN VARS<PTR> EQ 'BTST'\n          SELECT FIRST\n::::::::::::WHEN DESC<PTR> EQ 'Y'\n::::::::::::::LET MSGS<PTR> = 'INTERTEST FOR BATCH NOT YET AVAILABLE'\n            WHEN DESC<PTR> NE 'Y' AND DESC<PTR> NE 'N'\n              LET MSGS<PTR> = 'INTERTEST SELECTION MUST BE \"Y\" OR \"N\"'\n          ENDSEL\n        WHEN VARS<PTR> EQ 'APID'\n          IF LENGTH(DESC<PTR>) EQ 0\n              LET MSGS<PTR> = 'APPLICATION ID IS MISSING'\n          ENDIF\n        WHEN VARS<PTR> EQ 'JNAM'\n          SELECT FIRST\n:*--------------------------------------------------------------------*\n:*          WHEN SUBSTR(DESC<PTR> 1 1) NE 'D'                         *\n:*            LET MSGS<PTR> = 'JOB NAME STUB MUST BEGIN WITH'         *\n:*            LET MSGS<PTR> = MSGS<PTR> | ' \"D\" FOR DEVELOPMENT'      *\n:*--------------------------------------------------------------------*\n            WHEN LENGTH(DESC<PTR>) LT 3\n              LET MSGS<PTR> = 'JOB NAME MUST BE AT LEAST'\n              LET MSGS<PTR> = MSGS<PTR> | ' 3 CHARACTERS LONG'\n            WHEN NOT CONFORM(DESC<PTR> 'AN')\n              LET MSGS<PTR> = 'CHARACTERS IN JOB NAME MUST'\n              LET MSGS<PTR> = MSGS<PTR> | ' BE ALPHANUMERIC'\n            WHEN NONE\n              EXEC PFX.CCDEFGET 'JNAM'\n              IF SUBSTR(DESC<PTR> 1 LENGTH(R1)) EQ R1\n                  LET CARD = PAD(SAVE<1> 6)\n                  LET CARD = SUBSTR(CARD LENGTH(R1)-1 8-LENGTH(R1))\n                  LET CARD = TRIM(CARD)\n                  SELECT FIRST\n                    WHEN DESC<PTR> EQ R1\n                    WHEN TRIM(SUBSTR(DESC<PTR> LENGTH(R1)+1)) EQ CARD\n                    WHEN ANY\n                      LET CARD = PAD(MEMBER 6)\n                      LET CARD = SUBSTR(CARD LENGTH(R1)-1 8-LENGTH(R1))\n                      LET DESC<PTR> = R1|CARD\n                  ENDSEL\n              ENDIF\n          ENDSEL\n        WHEN VARS<PTR> EQ 'ACCT'\n          IF LENGTH(DESC<PTR>) NE 4\n              LET MSGS<PTR> = 'ACCOUNT CODE MUST CONTAIN 4 CHARACTERS'\n          ENDIF\n      ENDSEL\n      IF MSGS<PTR> NE ''\n          LET NMSG = NMSG + 1\n      ENDIF\n  ENDLOOP\n  IF EMSG<1> EQ ''\n      LET SAVE<1> = MEMBER\n  ENDIF\n  IF EMSG<3> EQ ''\n      LET SAVE<3> = ROSVAR<2>\n  ENDIF\nENDPROC\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$DDB": {"ttr": 2819, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01$\\x1f\\x01\\x01$\\x1f\\x14 \\x01f\\x01f\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-08-29T00:00:00", "modifydate": "2001-08-29T14:20:00", "lines": 358, "newlines": 358, "modlines": 0, "user": "EGHF3PY"}, "text": "<<$DDB>> : A1=MEMBER  <A2=REP/SUB>  <A3=REP/SUB> A4=LAST?(YES=0)\n  EXEC PFX.CCSESSET\n  SET STMTCNT MAX\n  DECLARE MEMBER REPLACE ROSMEM SUBMIT SAVE<3> EMSG<3>\n  DECLARE NVAR PTR CARD CURPOS NMSG RETINFO<4>\n  LET MEMBER = A1\n  IF A2 EQ 'REP' OR A3 EQ 'REP'\n      LET REPLACE = 'Y'\n  ELSE\n      LET REPLACE = 'N'\n  ENDIF\n  IF A2 EQ 'SUB' OR A3 EQ 'SUB'\n      LET SUBMIT = 'Y'\n  ELSE\n      LET SUBMIT = 'N'\n  ENDIF\n  DECLARE VARS<15> DESC<15> MSGS<15>\n  LET NVAR = 15                     : NUMBER OF VARIABLE NAMES IN PANEL\n  LET VARS<01> = 'SRCE'\n  LET VARS<02> = 'MAPC'\n  LET VARS<03> = 'OLNK'\n  LET VARS<04> = 'ITST'\n  LET VARS<05> = 'APID'\n  LET VARS<06> = 'ENVR'\n  LET VARS<07> = 'CCOP'\n  LET VARS<08> = 'CLOP'\n  LET VARS<09> = 'CMOP'\n  LET VARS<10> = 'JNAM'\n  LET VARS<11> = 'ACCT'\n  LET VARS<12> = 'ROOM'\n  LET VARS<13> = 'UNAM'\n  LET VARS<14> = 'MSGC'\n  LET VARS<15> = 'REMT'\n  DO <<GETDEFS>>\n  DO <<EDITS>>\n  LOOP\n    UNTIL NMSG EQ 0 AND SUBMIT NE 'N'\n      PANEL ACTIVATE PFX.CCCXXPAN\n      DO <<PUTPAN>>\n     %PANEL SEND CURSOR P.%CURPOS%\n      LET CURPOS = ''\n      SELECT FIRST\n        WHEN AID EQ 'CLEAR'\n          POP\n          STOP\n        WHEN AID EQ 'PF5'\n          LET SUBMIT = 'Q'\n        WHEN NONE\n          DO <<GETPAN>>\n          DO <<EDITS>>\n          SELECT FIRST\n            WHEN AID EQ 'PF1'\n              EXEC PFX.CCHLPSHO 'CCCXX'\n              SELECT AWS ROS1\n            WHEN AID EQ 'PF2'\n              EXEC PFX.CCDEFSET\n              DO <<GETDEFS>>\n          ENDSEL\n          SELECT FIRST\n            WHEN NMSG NE 0\n              RELOOP\n            WHEN AID EQ 'PF9'\n              LET SUBMIT = 'Y'\n            WHEN AID EQ 'PF8'\n              LET SUBMIT = 'A'\n          ENDSEL\n      ENDSEL\n  ENDLOOP\n  SELECT FIRST\n    WHEN SUBMIT EQ 'Y'\n      DO <<BUILDJCL>>\n      SET MSGLEVEL ERROR\n      SUBMIT\n      LET PTR = INDEX(LASTERR ' <')\n      IF PTR LE 0\n          LET PTR = LENGTH(LASTERR)\n      ENDIF\n     %LET CARD = SUBSTR(LASTERR 1 %PTR%)\n    WHEN SUBMIT EQ 'A'\n      DO <<BUILDJCL>>\n      ATTACH\n      IF A4 GT 0\n          RESPONSE 'WHEN READY TO CONTINUE, ENTER \"GO\"'\n          PAUSE\n      ENDIF\n     %LET CARD = 'JCL FOR %MEMBER% SENT TO AWS'\n    WHEN NONE\n     %LET CARD = '%MEMBER% NOT SUBMITTED'\n  ENDSEL\n  CREATE AWS CCMSGS NONRECOVERABLE LEVEL\n  TRAP\n  FETCH $$CCMSGS\n  TRAP OFF\n  %%AWSCOUNT+1% %CARD%\n  UPDATE $$CCMSGS\n  RETURN\n<<GETDEFS>> PROC\n  LOOP PTR FROM 1 TO NVAR BY 1\n      EXEC PFX.CCDEFGET VARS<PTR>\n      LET DESC<PTR> = R1\n  ENDLOOP\n  SELECT AWS ROS1\nENDPROC\n<<BUILDJCL>> PROC\n  LOOP PTR FROM 1 TO NVAR BY 1\n    UNTIL VARS<PTR> EQ 'ITST'\n  ENDLOOP\n  SELECT AWS ROS1\n  DELETE\n  COPY PFX.CCJOBJCL T\n:::::::::::::: INSERT ACS DESTINATION INFO\n  TRAP ON\n  COPY ACSDEST B\n  %EDIT /&TITLE1/%MEMBER%/\n  TRAP OFF\n  IF DESC<PTR> EQ 'Y'\n      COPY PFX.DDBXIJCL B\n  ELSE\n      COPY PFX.DDBXXJCL B\n  ENDIF\n  TRAP\n  LET CARD = ''\n  LOOP PTR FROM 1 TO NVAR BY 1\n      SELECT FIRST\n        WHEN VARS<PTR> EQ 'APID'\n          IF TRIM(DESC<PTR>) EQ 'ACS'\n:*--------------------------------------------------------------------*\n:*            FIND /AUXINC1/                                          *\n:*           %EDIT /HHLQ.?APID.SAT.LIBMAST/PROD.SOURCE.LIBMAST/%SEQ%  *\n:*            FIND /AUXINC2/                                          *\n:*           %EDIT /HHLQ.?APID.?ENVR.LIBMAST/PROD.SOURCE.LIBMAST/%SEQ%*\n:*            FIND /AUXINC3/                                          *\n:*           %EDIT /DUMMY/DSN=HHLQ.?APID.?ENVR.LIBMAST,DISP=SHR/%SEQ% *\n:*--------------------------------------------------------------------*\n              FIND /AUXINC2/\n             %EDIT /DSN=HHLQ.?APID.?ENVR.LIBMAST,DISP=SHR/DUMMY/%SEQ%\n              EDIT /AAFX='?APIDDY2AA',//\n              EDIT /CLASS=J/CLASS=K/\n          ENDIF\n        WHEN VARS<PTR> EQ 'CMOP'\n          LET NMSG = NMSG + 1\n          IF INDEX(DESC<PTR> 'RMODE=24') GT 0\n              EDIT /?DLEN/24/\n          ELSE\n              EDIT /?DLEN/31/\n          ENDIF\n        WHEN VARS<PTR> EQ 'UNAM'\n          LET NMSG = NMSG + 1\n          LET CARD = DESC<PTR>\n      ENDSEL\n     %EDIT `?%VARS<PTR>%`%DESC<PTR>%`\n  ENDLOOP\n %EDIT `?PSWD`%RETINFO<1>%`\n %EDIT `?PGMR`%RETINFO<2>%`\n %EDIT `?DESC`%RETINFO<3>%`\n %EDIT `?LNAM`%RETINFO<4>%`\n %EDIT `?MEMB`%MEMBER%`\n %EDIT `?JPRO`%TRIM(SUBSTR(CARD|' '|MEMBER 1 20))%`\n  POINT AWS LINE T\n  FIND /-REP ALL/\n  IF REPLACE EQ 'Y' AND ROSMEM NE '$$CANCEL' AND ROSMEM NE ''\n      %COPY %ROSMEM% %SEQ%\n  ELSE\n      %DELETE %SEQ%\n  ENDIF\n  TRAP OFF\nENDPROC\n<<GETPAN>> PROC\n  LET MEMBER  = TRIM(TRIM(P.MEMBER '_'))\n  LET REPLACE = TRIM(TRIM(P.REPLACE '_'))\n  LET ROSMEM  = TRIM(TRIM(P.ROSMEM '_'))\n  LOOP PTR FROM 1 TO NVAR BY 1\n     %LET CARD = TRIM(TRIM(P.%VARS<PTR>% '_'))\n      IF CARD NE DESC<PTR>\n          LET DESC<PTR> = CARD\n      ENDIF\n  ENDLOOP\n  LET CARD = ''\nENDPROC\n<<PUTPAN>> PROC\n  LET NMSG = 0\n  LET P.MEMBER = PAD(MEMBER MAXLEN(P.MEMBER) '_')\n  IF EMSG<1> NE ''\n      LET NMSG = NMSG + 1\n      LET P.MSG<NMSG> = EMSG<1>\n      LET A.MEMBER = 'UHM'\n      LET CURPOS = 'MEMBER'\n  ENDIF\n  LET P.REPLACE = PAD(REPLACE MAXLEN(P.REPLACE) '_')\n  IF EMSG<2> NE ''\n      LET NMSG = NMSG + 1\n      LET P.MSG<NMSG> = EMSG<2>\n      LET A.REPLACE = 'UHM'\n      LET CURPOS = 'REPLACE'\n  ENDIF\n  IF REPLACE EQ 'Y'\n      LET A.ROSLIT = 'SL'\n      LET P.ROSMEM = PAD(ROSMEM MAXLEN(P.ROSMEM) '_')\n      IF EMSG<3> NE ''\n          LET NMSG = NMSG + 1\n          LET P.MSG<NMSG> = EMSG<3>\n          IF INDEX(EMSG<3> 'CANCELLED') GT 0\n              LET A.ROSMEM = 'ULM'\n          ELSE\n              LET CURPOS = 'ROSMEM'\n              LET A.ROSMEM = 'UHM'\n          ENDIF\n      ELSE\n          LET A.ROSMEM = 'ULM'\n      ENDIF\n  ELSE\n      LET A.ROSLIT = 'SI'\n      LET A.ROSMEM = 'SIM'\n  ENDIF\n  LOOP PTR FROM 1 TO NVAR BY 1\n     %LET P.%VARS<PTR>% = PAD(DESC<PTR> MAXLEN(P.%VARS<PTR>%) '_')\n      IF MSGS<PTR> NE ''\n          LET NMSG = NMSG + 1\n          IF NMSG LT 4\n              LET P.MSG<NMSG> = MSGS<PTR>\n          ENDIF\n          IF INDEX(MSGS<PTR> 'DEFAULT' 1) LE 0\n             %LET A.%VARS<PTR>% = 'UHM'\n              IF CURPOS EQ ''\n                  LET CURPOS = VARS<PTR>\n              ENDIF\n          ENDIF\n      ENDIF\n  ENDLOOP\n  IF NMSG EQ 0\n      LET P.MSG<1> = 'PRESS \"PF8\" TO EDIT JCL IN YOUR AWS,'\n      LET P.MSG<1> = P.MSG<1> | ' \"PF9\" TO SUBMIT THE JOB'\n  ENDIF\n  IF CURPOS EQ ''\n      LET CURPOS = 'MEMBER'\n  ENDIF\nENDPROC\n<<EDITS>> PROC\n  LET NMSG = 0\n  LET EMSG<1> = EMSG<2> = EMSG<3> = ''\n  LOOP PTR FROM 1 TO NVAR BY 1\n    UNTIL VARS<PTR> EQ 'SRCE'\n  ENDLOOP\n  IF LENGTH(MEMBER) EQ 0\n      LET EMSG<1> = 'A LIBRARIAN MEMBER NAME IS REQUIRED'\n      LET NMSG = NMSG + 1\n  ELSE\n      IF MEMBER NE SAVE<1>\n          IF LENGTH(DESC<PTR>) EQ 0\n              EXEC PFX.CCDEFGET VARS<PTR>\n              SELECT AWS ROS1\n              LET DESC<PTR> = R1\n          ENDIF\n          EXEC PFX.CCMEMSEL MEMBER DESC<PTR>\n          SELECT AWS ROS1\n          IF R1 EQ ''\n              LET EMSG<1> = 'SELECTED MEMBER NAME HAS NO MATCH'\n              LET EMSG<1> = EMSG<1> | ' ON LIBRARIAN'\n              LET NMSG = NMSG + 1\n          ELSE\n              LET MEMBER     = R1\n              LET RETINFO<1> = R2\n              LET RETINFO<2> = R3\n              LET RETINFO<3> = R4\n              LET RETINFO<4> = R5\n          ENDIF\n      ENDIF\n  ENDIF\n  SELECT FIRST\n    WHEN REPLACE EQ 'N'\n      LET ROSMEM = ''\n    WHEN REPLACE EQ 'Y'\n      IF ROSMEM NE SAVE<3> OR ROSMEM EQ ''\n          IF ROSMEM EQ ''\n              LET ROSMEM = MEMBER\n          ENDIF\n          EXEC PFX.CCROSSEL ROSMEM\n          SELECT AWS ROS1\n          SELECT FIRST\n            WHEN R1 EQ ''\n              LET EMSG<3> = 'SELECTED ROSCOE MEMBER NAME HAS NO MATCH'\n              LET EMSG<3> = EMSG<3> | ' IN YOUR ROSCOE LIBRARY'\n              LET NMSG = NMSG + 1\n            WHEN R1 EQ '$$CANCEL'\n              LET EMSG<3> = 'LIBRARY MEMBER REPLACEMENT FROM ROSCOE'\n              LET EMSG<3> = EMSG<3> | ' HAS BEEN CANCELLED'\n              LET NMSG = NMSG + 1\n              LET REPLACE = 'N'\n              LET ROSMEM = ''\n            WHEN NONE\n              LET ROSMEM = R1\n          ENDSEL\n      ENDIF\n    WHEN NONE\n      LET EMSG<2> = '\"REPLACE\" MUST BE \"Y\"(YES) OR \"N\"(NO)'\n      LET NMSG = NMSG + 1\n  ENDSEL\n  LOOP PTR FROM 1 TO NVAR BY 1\n      IF LENGTH(DESC<PTR>) EQ 0\n          EXEC PFX.CCDEFGET VARS<PTR>\n          SELECT AWS ROS1\n          LET DESC<PTR> = R1\n      ENDIF\n      LET MSGS<PTR> = ''\n      SELECT FIRST\n        WHEN VARS<PTR> EQ 'ITST'\n          IF DESC<PTR> NE 'Y' AND DESC<PTR> NE 'N'\n              LET MSGS<PTR> = 'INTERTEST SELECTION MUST BE \"Y\" OR \"N\"'\n          ENDIF\n        WHEN VARS<PTR> EQ 'APID'\n          IF LENGTH(DESC<PTR>) EQ 0\n              LET MSGS<PTR> = 'APPLICATION ID IS MISSING'\n          ENDIF\n        WHEN VARS<PTR> EQ 'JNAM'\n          SELECT FIRST\n:*--------------------------------------------------------------------*\n:*          WHEN SUBSTR(DESC<PTR> 1 1) NE 'D'                         *\n:*            LET MSGS<PTR> = 'JOB NAME STUB MUST BEGIN WITH'         *\n:*            LET MSGS<PTR> = MSGS<PTR> | ' \"D\" FOR DEVELOPMENT'      *\n:*--------------------------------------------------------------------*\n            WHEN LENGTH(DESC<PTR>) LT 3\n              LET MSGS<PTR> = 'JOB NAME MUST BE AT LEAST'\n              LET MSGS<PTR> = MSGS<PTR> | ' 3 CHARACTERS LONG'\n            WHEN NOT CONFORM(DESC<PTR> 'AN')\n              LET MSGS<PTR> = 'CHARACTERS IN JOB NAME MUST'\n              LET MSGS<PTR> = MSGS<PTR> | ' BE ALPHANUMERIC'\n            WHEN NONE\n              EXEC PFX.CCDEFGET 'JNAM'\n              IF SUBSTR(DESC<PTR> 1 LENGTH(R1)) EQ R1\n                  LET CARD = PAD(SAVE<1> 6)\n                  LET CARD = SUBSTR(CARD LENGTH(R1)-1 8-LENGTH(R1))\n                  LET CARD = TRIM(CARD)\n                  SELECT FIRST\n                    WHEN DESC<PTR> EQ R1\n                    WHEN TRIM(SUBSTR(DESC<PTR> LENGTH(R1)+1)) EQ CARD\n                    WHEN ANY\n                      LET CARD = PAD(MEMBER 6)\n                      LET CARD = SUBSTR(CARD LENGTH(R1)-1 8-LENGTH(R1))\n                      LET DESC<PTR> = R1|CARD\n                  ENDSEL\n              ENDIF\n          ENDSEL\n        WHEN VARS<PTR> EQ 'ACCT'\n          IF LENGTH(DESC<PTR>) NE 4\n              LET MSGS<PTR> = 'ACCOUNT CODE MUST CONTAIN 4 CHARACTERS'\n          ENDIF\n      ENDSEL\n      IF MSGS<PTR> NE ''\n          LET NMSG = NMSG + 1\n      ENDIF\n  ENDLOOP\n  IF EMSG<1> EQ ''\n      LET SAVE<1> = MEMBER\n  ENDIF\n  IF EMSG<3> EQ ''\n      LET SAVE<3> = ROSMEM\n  ENDIF\nENDPROC\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$DDC": {"ttr": 2826, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01$\\x1f\\x01\\x01$\\x1f\\x14!\\x01\\xbc\\x01\\xbc\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-08-29T00:00:00", "modifydate": "2001-08-29T14:21:00", "lines": 444, "newlines": 444, "modlines": 0, "user": "EGHF3PY"}, "text": "<<$DDC>> : A1=MEMBER  <A2=REP/SUB>  <A3=REP/SUB> A4=LAST?(YES=0)\n  EXEC PFX.CCSESSET\n  SET STMTCNT MAX\n  DECLARE MEMBER ROSVAR<2> URTVAR<2> SUBMIT SAVE<5> EMSG<5>\n  DECLARE NVAR PTR CARD CURPOS NMSG RETINFO<4>\n  LET MEMBER = A1\n  IF A2 EQ 'REP' OR A3 EQ 'REP'\n      LET ROSVAR<1> = 'Y'\n  ELSE\n      LET ROSVAR<1> = 'N'\n  ENDIF\n  IF A2 EQ 'SUB' OR A3 EQ 'SUB'\n      LET SUBMIT = 'Y'\n  ELSE\n      LET SUBMIT = 'N'\n  ENDIF\n  DECLARE VARS<15> DESC<15> MSGS<15>\n  LET NVAR = 15                     : NUMBER OF VARIABLE NAMES IN PANEL\n  LET VARS<01> = 'SRCE'\n  LET VARS<02> = 'URTL'\n  LET VARS<03> = 'BLNK'\n  LET VARS<04> = 'BTST'\n  LET VARS<05> = 'APID'\n  LET VARS<06> = 'ENVR'\n  LET VARS<07> = 'BCOP'\n  LET VARS<08> = 'BLOP'\n  LET VARS<09> = 'BMOP'\n  LET VARS<10> = 'JNAM'\n  LET VARS<11> = 'ACCT'\n  LET VARS<12> = 'ROOM'\n  LET VARS<13> = 'UNAM'\n  LET VARS<14> = 'MSGC'\n  LET VARS<15> = 'REMT'\n  DO <<GETDEFS>>\n  SELECT FIRST\n    WHEN LENGTH(MEMBER) EQ 0\n      LET URTVAR<1> = ''\n    WHEN LENGTH(MEMBER) GT 5\n      LET URTVAR<1> = SUBSTR(MEMBER 1 6)|'RT'\n    WHEN LENGTH(MEMBER) GT 5\n      LET URTVAR<1> = MEMBER|'URTVAR<1>'\n  ENDSEL\n  IF URTVAR<1> NE ''\n      EXEC PFX.CCDEFGET 'URTL'\n      EXEC PFX.CCURTSEL URTVAR<1> R1\n      IF R1 EQ ''\n          LET URTVAR<1> = ''\n      ELSE\n          LET URTVAR<1> = R1\n      ENDIF\n  ENDIF\n  IF URTVAR<1> EQ ''\n      LET URTVAR<2> = 'N'\n  ELSE\n      LET URTVAR<2> = 'Y'\n  ENDIF\n  LET SAVE<4> = URTVAR<1>\n  LET SAVE<5> = URTVAR<2>\n  DO <<EDITS>>\n  LOOP\n    UNTIL NMSG EQ 0 AND SUBMIT NE 'N'\n      PANEL ACTIVATE PFX.CCBXXPAN\n      DO <<PUTPAN>>\n     %PANEL SEND CURSOR P.%CURPOS%\n      LET CURPOS = ''\n      IF AID EQ 'CLEAR'\n          LET NMSG = 0\n          LET SUBMIT = 'Q'\n      ELSE\n          DO <<GETPAN>>\n          DO <<EDITS>>\n          SELECT FIRST\n            WHEN AID EQ 'PF1'\n              EXEC PFX.CCHLPSHO 'CCBXX'\n              SELECT AWS ROS1\n            WHEN AID EQ 'PF2'\n              EXEC PFX.CCDEFSET\n              DO <<GETDEFS>>\n          ENDSEL\n          SELECT FIRST\n            WHEN NMSG NE 0\n              RELOOP\n            WHEN AID EQ 'PF9'\n              LET SUBMIT = 'Y'\n            WHEN AID EQ 'PF8'\n              LET SUBMIT = 'A'\n          ENDSEL\n      ENDIF\n  ENDLOOP\n  SELECT FIRST\n    WHEN SUBMIT EQ 'Y'\n      DO <<BUILDJCL>>\n      SET MSGLEVEL ERROR\n      SUBMIT\n      LET PTR = INDEX(LASTERR ' <')\n      IF PTR LE 0\n          LET PTR = LENGTH(LASTERR)\n      ENDIF\n     %LET CARD = SUBSTR(LASTERR 1 %PTR%)\n      CREATE AWS CCMSGS NONRECOVERABLE LEVEL\n      TRAP\n      FETCH $$CCMSGS\n      TRAP OFF\n      %%AWSCOUNT+1% %CARD%\n      UPDATE $$CCMSGS\n    WHEN SUBMIT EQ 'A'\n      DO <<BUILDJCL>>\n      ATTACH\n      IF A4 GT 0\n          RESPONSE 'WHEN READY TO CONTINUE, ENTER \"GO\"'\n          PAUSE\n      ENDIF\n    WHEN NONE\n      DELETE\n  ENDSEL\n  RETURN\n<<GETDEFS>> PROC\n  LOOP PTR FROM 1 TO NVAR BY 1\n      EXEC PFX.CCDEFGET VARS<PTR>\n      LET DESC<PTR> = R1\n  ENDLOOP\n  LET DESC<01> = 'DVL.SOURCE.LIBMAST'\n  LET DESC<03> = 'HHLQ.ACS.DVL.BATLOAD'\n  SELECT AWS ROS1\nENDPROC\n<<BUILDJCL>> PROC\n  LOOP PTR FROM 1 TO NVAR BY 1\n    UNTIL VARS<PTR> EQ 'BTST'\n  ENDLOOP\n  SELECT AWS ROS1\n  DELETE\n  COPY PFX.CCJOBJCL T\n:::::::::::::: INSERT ACS DESTINATION INFO\n  TRAP ON\n  COPY ACSDEST B\n  %EDIT /&TITLE1/%MEMBER%/\n  TRAP OFF\n  IF DESC<PTR> EQ 'Y'\n      IF URTVAR<1> NE ''\n          COPY PFX.DDCDIJCL B\n         +EDIT /?USERID/+GETKEY(S.PREFIX)+/\n      ELSE\n          COPY PFX.DDCXIJCL B\n         +EDIT /?USERID/+GETKEY(S.PREFIX)+/\n      ENDIF\n  ELSE\n      IF URTVAR<1> NE ''\n          COPY PFX.DDCDXJCL B\n      ELSE\n          COPY PFX.DDCXXJCL B\n      ENDIF\n  ENDIF\n  TRAP\n  LET CARD = ''\n  LOOP PTR FROM 1 TO NVAR BY 1\n      SELECT FIRST\n        WHEN VARS<PTR> EQ 'APID'\n          IF TRIM(DESC<PTR>) EQ 'ACS'\n:*--------------------------------------------------------------------*\n:*            FIND /AUXINC1/                                          *\n:*           %EDIT /HHLQ.?APID.SAT.LIBMAST/PROD.SOURCE.LIBMAST/%SEQ%  *\n:*            FIND /AUXINC2/                                          *\n:*           %EDIT /HHLQ.?APID.?ENVR.LIBMAST/PROD.SOURCE.LIBMAST/%SEQ%*\n:*            FIND /AUXINC3/                                          *\n:*           %EDIT /DUMMY/DSN=HHLQ.?APID.?ENVR.LIBMAST,DISP=SHR/%SEQ% *\n:*--------------------------------------------------------------------*\n              FIND /AUXINC2/\n             %EDIT /DSN=HHLQ.?APID.?ENVR.LIBMAST,DISP=SHR/DUMMY/%SEQ%\n              EDIT /CLASS=J/CLASS=K/\n          ENDIF\n        WHEN VARS<PTR> EQ 'BMOP'\n          LET NMSG = NMSG + 1\n          IF INDEX(DESC<PTR> 'RMODE=24') GT 0\n              EDIT /?DLEN/24/\n          ELSE\n              EDIT /?DLEN/31/\n          ENDIF\n        WHEN VARS<PTR> EQ 'UNAM'\n          LET NMSG = NMSG + 1\n          LET CARD = DESC<PTR>\n      ENDSEL\n     %EDIT `?%VARS<PTR>%`%DESC<PTR>%`\n  ENDLOOP\n %EDIT `?PSWD`%RETINFO<1>%`\n %EDIT `?PGMR`%RETINFO<2>%`\n %EDIT `?DESC`%RETINFO<3>%`\n %EDIT `?LNAM`%RETINFO<4>%`\n %EDIT `?MEMB`%MEMBER%`\n %EDIT `?URTN`%URTVAR<1>%`\n %EDIT `?JPRO`%TRIM(SUBSTR(CARD|' '|MEMBER 1 20))%`\n  POINT AWS LINE T\n  FIND /-REP ALL/\n  IF ROSVAR<1> EQ 'Y' AND ROSVAR<2> NE '$$CANCEL' AND ROSVAR<2> NE ''\n      %COPY %ROSVAR<2>% %SEQ%\n  ELSE\n      %DELETE %SEQ%\n  ENDIF\n  TRAP OFF\nENDPROC\n<<GETPAN>> PROC\n  LET MEMBER  = TRIM(TRIM(P.MEMBER  '_'))\n  LET ROSVAR<1> = TRIM(TRIM(P.REPLACE '_'))\n  LET ROSVAR<2> = TRIM(TRIM(P.ROSMEM  '_'))\n  LET URTVAR<1> = TRIM(TRIM(P.URT     '_'))\n  LET URTVAR<2> = TRIM(TRIM(P.DATACOM '_'))\n  LOOP PTR FROM 1 TO NVAR BY 1\n     %LET CARD = TRIM(TRIM(P.%VARS<PTR>% '_'))\n      IF CARD NE DESC<PTR>\n          LET DESC<PTR> = CARD\n      ENDIF\n  ENDLOOP\n  LET CARD = ''\nENDPROC\n<<PUTPAN>> PROC\n  LET NMSG = 0\n  LET P.MEMBER = PAD(MEMBER MAXLEN(P.MEMBER) '_')\n  IF EMSG<1> NE ''\n      LET NMSG = NMSG + 1\n      LET P.MSG<NMSG> = EMSG<1>\n      LET A.MEMBER = 'UHM'\n      LET CURPOS = 'MEMBER'\n  ENDIF\n  LET P.REPLACE = PAD(ROSVAR<1> MAXLEN(P.REPLACE) '_')\n  IF EMSG<2> NE ''\n      LET NMSG = NMSG + 1\n      LET P.MSG<NMSG> = EMSG<2>\n      LET A.REPLACE = 'UHM'\n      LET CURPOS = 'REPLACE'\n  ENDIF\n  IF ROSVAR<1> EQ 'Y'\n      LET A.ROSLIT = 'SL'\n      LET P.ROSMEM = PAD(ROSVAR<2> MAXLEN(P.ROSMEM) '_')\n      IF EMSG<3> NE ''\n          LET NMSG = NMSG + 1\n          LET P.MSG<NMSG> = EMSG<3>\n          IF INDEX(EMSG<3> 'CANCELLED') GT 0\n              LET A.ROSMEM = 'ULM'\n          ELSE\n              LET CURPOS = 'ROSMEM'\n              LET A.ROSMEM = 'UHM'\n          ENDIF\n      ELSE\n          LET A.ROSMEM = 'ULM'\n      ENDIF\n  ELSE\n      LET A.ROSLIT = 'SI'\n      LET A.ROSMEM = 'SIM'\n  ENDIF\n  LET P.URT = PAD(URTVAR<1> MAXLEN(P.URT) '_')\n  IF EMSG<4> NE ''\n      LET NMSG = NMSG + 1\n      LET P.MSG<NMSG> = EMSG<4>\n      LET A.URT = 'UHM'\n      LET CURPOS = 'URT'\n  ENDIF\n  LET P.DATACOM = PAD(URTVAR<2> MAXLEN(P.DATACOM) '_')\n  IF EMSG<5> NE ''\n      LET NMSG = NMSG + 1\n      LET P.MSG<NMSG> = EMSG<5>\n      LET A.DATACOM = 'UHM'\n      LET CURPOS = 'DATACOM'\n  ENDIF\n  LOOP PTR FROM 1 TO NVAR BY 1\n     %LET P.%VARS<PTR>% = PAD(DESC<PTR> MAXLEN(P.%VARS<PTR>%) '_')\n      IF MSGS<PTR> NE ''\n          LET NMSG = NMSG + 1\n          IF NMSG LT 4\n              LET P.MSG<NMSG> = MSGS<PTR>\n          ENDIF\n          IF INDEX(MSGS<PTR> 'DEFAULT' 1) LE 0\n             %LET A.%VARS<PTR>% = 'UHM'\n              IF CURPOS EQ ''\n                  LET CURPOS = VARS<PTR>\n              ENDIF\n          ENDIF\n      ENDIF\n  ENDLOOP\n  IF NMSG EQ 0\n      LET P.MSG<1> = 'PRESS \"PF8\" TO EDIT JCL IN YOUR AWS,'\n      LET P.MSG<1> = P.MSG<1> | ' \"PF9\" TO SUBMIT THE JOB'\n  ENDIF\n  IF CURPOS EQ ''\n      LET CURPOS = 'MEMBER'\n  ENDIF\nENDPROC\n<<EDITS>> PROC\n  LET NMSG = 0\n  LET EMSG<1> = EMSG<2> = EMSG<3> = EMSG<4> = EMSG<5> = ''\n  LOOP PTR FROM 1 TO NVAR BY 1\n    UNTIL VARS<PTR> EQ 'SRCE'\n  ENDLOOP\n  IF LENGTH(MEMBER) EQ 0\n      LET EMSG<1> = 'A LIBRARIAN MEMBER NAME IS REQUIRED'\n      LET NMSG = NMSG + 1\n  ELSE\n      IF MEMBER NE SAVE<1>\n          IF LENGTH(DESC<PTR>) EQ 0\n              EXEC PFX.CCDEFGET VARS<PTR>\n              SELECT AWS ROS1\n              LET DESC<PTR> = R1\n          ENDIF\n          EXEC PFX.CCMEMSEL MEMBER DESC<PTR>\n          SELECT AWS ROS1\n          IF R1 EQ ''\n              LET EMSG<1> = 'SELECTED MEMBER NAME HAS NO MATCH'\n              LET EMSG<1> = EMSG<1> | ' ON LIBRARIAN'\n              LET NMSG = NMSG + 1\n          ELSE\n              LET MEMBER     = R1\n              LET RETINFO<1> = R2\n              LET RETINFO<2> = R3\n              LET RETINFO<3> = R4\n              LET RETINFO<4> = R5\n          ENDIF\n      ENDIF\n  ENDIF\n  SELECT FIRST\n    WHEN ROSVAR<1> EQ 'N'\n      LET ROSVAR<2> = ''\n    WHEN ROSVAR<1> EQ 'Y'\n      IF ROSVAR<2> NE SAVE<3> OR ROSVAR<2> EQ ''\n          IF ROSVAR<2> EQ ''\n              LET ROSVAR<2> = MEMBER\n          ENDIF\n          EXEC PFX.CCROSSEL ROSVAR<2>\n          SELECT AWS ROS1\n          SELECT FIRST\n            WHEN R1 EQ ''\n              LET EMSG<3> = 'SELECTED ROSCOE MEMBER NAME HAS NO MATCH'\n              LET EMSG<3> = EMSG<3> | ' IN YOUR ROSCOE LIBRARY'\n              LET NMSG = NMSG + 1\n            WHEN R1 EQ '$$CANCEL'\n              LET EMSG<3> = 'LIBRARY MEMBER REPLACEMENT FROM ROSCOE'\n              LET EMSG<3> = EMSG<3> | ' HAS BEEN CANCELLED'\n              LET ROSVAR<2> = R1\n            WHEN NONE\n              LET ROSVAR<2> = R1\n          ENDSEL\n      ENDIF\n    WHEN NONE\n      LET EMSG<2> = '\"REPLACE\" MUST BE \"Y\"(YES) OR \"N\"(NO)'\n      LET NMSG = NMSG + 1\n  ENDSEL\n  IF URTVAR<2> EQ 'Y' AND URTVAR<1> EQ ''\n      LET URTVAR<1> = SUBSTR(MEMBER 1 6)|'RT'\n  ENDIF\n  IF URTVAR<2> EQ 'N'\n      IF URTVAR<1> NE ''\n          SELECT FIRST\n            WHEN URTVAR<1> EQ SAVE<4>\n              LET URTVAR<1> = ''\n            WHEN URTVAR<2> EQ SAVE<5>\n              LET URTVAR<2> = 'Y'\n            WHEN NONE\n              LET EMSG<4> = 'EXISTENCE OF A URT IS INCONSISTENT'\n              LET EMSG<4> = EMSG<4>|' WITH DATACOM = \"N\"'\n          ENDSEL\n      ENDIF\n  ENDIF\n  IF URTVAR<2> EQ 'Y'\n      IF URTVAR<1> NE SAVE<4> OR URTVAR<2> NE SAVE<5>\n          LOOP PTR FROM 1 TO NVAR BY 1\n            UNTIL VARS<PTR> EQ 'URTL'\n          ENDLOOP\n          EXEC PFX.CCURTSEL URTVAR<1> DESC<PTR>\n          SELECT AWS ROS1\n          IF R1 EQ ''\n              LET EMSG<4> = 'SELECTED URT NAME HAS NO MATCH'\n              LET EMSG<4> = EMSG<4> | ' IN THE URT LIBRARY'\n              LET NMSG = NMSG + 1\n          ELSE\n              LET URTVAR<1> = R1\n          ENDIF\n      ENDIF\n  ELSE\n      IF URTVAR<2> NE 'N'\n          LET EMSG<5> = '\"DATACOM\" MUST BE \"Y\"(YES) OR \"N\"(NO)'\n          LET NMSG = NMSG + 1\n      ENDIF\n  ENDIF\n  LOOP PTR FROM 1 TO NVAR BY 1\n      IF LENGTH(DESC<PTR>) EQ 0\n          EXEC PFX.CCDEFGET VARS<PTR>\n          SELECT AWS ROS1\n          LET DESC<PTR> = R1\n      ENDIF\n      LET MSGS<PTR> = ''\n      SELECT FIRST\n        WHEN VARS<PTR> EQ 'BTST'\n          SELECT FIRST\n::::::::::::WHEN DESC<PTR> EQ 'Y'\n::::::::::::::LET MSGS<PTR> = 'INTERTEST FOR BATCH NOT YET AVAILABLE'\n            WHEN DESC<PTR> NE 'Y' AND DESC<PTR> NE 'N'\n              LET MSGS<PTR> = 'INTERTEST SELECTION MUST BE \"Y\" OR \"N\"'\n          ENDSEL\n        WHEN VARS<PTR> EQ 'APID'\n          IF LENGTH(DESC<PTR>) EQ 0\n              LET MSGS<PTR> = 'APPLICATION ID IS MISSING'\n          ENDIF\n        WHEN VARS<PTR> EQ 'JNAM'\n          SELECT FIRST\n:*--------------------------------------------------------------------*\n:*          WHEN SUBSTR(DESC<PTR> 1 1) NE 'D'                         *\n:*            LET MSGS<PTR> = 'JOB NAME STUB MUST BEGIN WITH'         *\n:*            LET MSGS<PTR> = MSGS<PTR> | ' \"D\" FOR DEVELOPMENT'      *\n:*--------------------------------------------------------------------*\n            WHEN LENGTH(DESC<PTR>) LT 3\n              LET MSGS<PTR> = 'JOB NAME MUST BE AT LEAST'\n              LET MSGS<PTR> = MSGS<PTR> | ' 3 CHARACTERS LONG'\n            WHEN NOT CONFORM(DESC<PTR> 'AN')\n              LET MSGS<PTR> = 'CHARACTERS IN JOB NAME MUST'\n              LET MSGS<PTR> = MSGS<PTR> | ' BE ALPHANUMERIC'\n            WHEN NONE\n              EXEC PFX.CCDEFGET 'JNAM'\n              IF SUBSTR(DESC<PTR> 1 LENGTH(R1)) EQ R1\n                  LET CARD = PAD(SAVE<1> 6)\n                  LET CARD = SUBSTR(CARD LENGTH(R1)-1 8-LENGTH(R1))\n                  LET CARD = TRIM(CARD)\n                  SELECT FIRST\n                    WHEN DESC<PTR> EQ R1\n                    WHEN TRIM(SUBSTR(DESC<PTR> LENGTH(R1)+1)) EQ CARD\n                    WHEN ANY\n                      LET CARD = PAD(MEMBER 6)\n                      LET CARD = SUBSTR(CARD LENGTH(R1)-1 8-LENGTH(R1))\n                      LET DESC<PTR> = R1|CARD\n                  ENDSEL\n              ENDIF\n          ENDSEL\n        WHEN VARS<PTR> EQ 'ACCT'\n          IF LENGTH(DESC<PTR>) NE 4\n              LET MSGS<PTR> = 'ACCOUNT CODE MUST CONTAIN 4 CHARACTERS'\n          ENDIF\n      ENDSEL\n      IF MSGS<PTR> NE ''\n          LET NMSG = NMSG + 1\n      ENDIF\n  ENDLOOP\n  IF EMSG<1> EQ ''\n      LET SAVE<1> = MEMBER\n  ENDIF\n  IF EMSG<3> EQ ''\n      LET SAVE<3> = ROSVAR<2>\n  ENDIF\nENDPROC\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$DDD": {"ttr": 3078, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01$\\x1f\\x01\\x01$\\x1f\\x14\"\\x01h\\x01h\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-08-29T00:00:00", "modifydate": "2001-08-29T14:22:00", "lines": 360, "newlines": 360, "modlines": 0, "user": "EGHF3PY"}, "text": "<<$DDD>> : A1=MEMBER  <A2=REP/SUB>  <A3=REP/SUB> A4=LAST?(YES=0)\n  EXEC PFX.CCSESSET\n  SET STMTCNT MAX\n  DECLARE MEMBER REPLACE ROSMEM SUBMIT SAVE<3> EMSG<3>\n  DECLARE NVAR PTR CARD CURPOS NMSG RETINFO<4>\n  LET MEMBER = A1\n  IF A2 EQ 'REP' OR A3 EQ 'REP'\n      LET REPLACE = 'Y'\n  ELSE\n      LET REPLACE = 'N'\n  ENDIF\n  IF A2 EQ 'SUB' OR A3 EQ 'SUB'\n      LET SUBMIT = 'Y'\n  ELSE\n      LET SUBMIT = 'N'\n  ENDIF\n  DECLARE VARS<15> DESC<15> MSGS<15>\n  LET NVAR = 15                     : NUMBER OF VARIABLE NAMES IN PANEL\n  LET VARS<01> = 'SRCE'\n  LET VARS<02> = 'MAPC'\n  LET VARS<03> = 'OLNK'\n  LET VARS<04> = 'ITST'\n  LET VARS<05> = 'APID'\n  LET VARS<06> = 'ENVR'\n  LET VARS<07> = 'CCOP'\n  LET VARS<08> = 'CLOP'\n  LET VARS<09> = 'CMOP'\n  LET VARS<10> = 'JNAM'\n  LET VARS<11> = 'ACCT'\n  LET VARS<12> = 'ROOM'\n  LET VARS<13> = 'UNAM'\n  LET VARS<14> = 'MSGC'\n  LET VARS<15> = 'REMT'\n  DO <<GETDEFS>>\n  DO <<EDITS>>\n  LOOP\n    UNTIL NMSG EQ 0 AND SUBMIT NE 'N'\n      PANEL ACTIVATE PFX.CCCXXPAN\n      DO <<PUTPAN>>\n     %PANEL SEND CURSOR P.%CURPOS%\n      LET CURPOS = ''\n      SELECT FIRST\n        WHEN AID EQ 'CLEAR'\n          POP\n          STOP\n        WHEN AID EQ 'PF5'\n          LET SUBMIT = 'Q'\n        WHEN NONE\n          DO <<GETPAN>>\n          DO <<EDITS>>\n          SELECT FIRST\n            WHEN AID EQ 'PF1'\n              EXEC PFX.CCHLPSHO 'CCCXX'\n              SELECT AWS ROS1\n            WHEN AID EQ 'PF2'\n              EXEC PFX.CCDEFSET\n              DO <<GETDEFS>>\n          ENDSEL\n          SELECT FIRST\n            WHEN NMSG NE 0\n              RELOOP\n            WHEN AID EQ 'PF9'\n              LET SUBMIT = 'Y'\n            WHEN AID EQ 'PF8'\n              LET SUBMIT = 'A'\n          ENDSEL\n      ENDSEL\n  ENDLOOP\n  SELECT FIRST\n    WHEN SUBMIT EQ 'Y'\n      DO <<BUILDJCL>>\n      SET MSGLEVEL ERROR\n      SUBMIT\n      LET PTR = INDEX(LASTERR ' <')\n      IF PTR LE 0\n          LET PTR = LENGTH(LASTERR)\n      ENDIF\n     %LET CARD = SUBSTR(LASTERR 1 %PTR%)\n    WHEN SUBMIT EQ 'A'\n      DO <<BUILDJCL>>\n      ATTACH\n      IF A4 GT 0\n          RESPONSE 'WHEN READY TO CONTINUE, ENTER \"GO\"'\n          PAUSE\n      ENDIF\n     %LET CARD = 'JCL FOR %MEMBER% SENT TO AWS'\n    WHEN NONE\n     %LET CARD = '%MEMBER% NOT SUBMITTED'\n  ENDSEL\n  CREATE AWS CCMSGS NONRECOVERABLE LEVEL\n  TRAP\n  FETCH $$CCMSGS\n  TRAP OFF\n  %%AWSCOUNT+1% %CARD%\n  UPDATE $$CCMSGS\n  RETURN\n<<GETDEFS>> PROC\n  LOOP PTR FROM 1 TO NVAR BY 1\n      EXEC PFX.CCDEFGET VARS<PTR>\n      LET DESC<PTR> = R1\n  ENDLOOP\n  LET DESC<01> = 'DVL.SOURCE.LIBMAST'\n  LET DESC<03> = 'CICS.CONVER.APPLOAD'\n  SELECT AWS ROS1\nENDPROC\n<<BUILDJCL>> PROC\n  LOOP PTR FROM 1 TO NVAR BY 1\n    UNTIL VARS<PTR> EQ 'ITST'\n  ENDLOOP\n  SELECT AWS ROS1\n  DELETE\n  COPY PFX.CCJOBJCL T\n:::::::::::::: INSERT ACS DESTINATION INFO\n  TRAP ON\n  COPY ACSDEST B\n  %EDIT /&TITLE1/%MEMBER%/\n  TRAP OFF\n  IF DESC<PTR> EQ 'Y'\n      COPY PFX.DDDXIJCL B\n  ELSE\n      COPY PFX.DDDXXJCL B\n  ENDIF\n  TRAP\n  LET CARD = ''\n  LOOP PTR FROM 1 TO NVAR BY 1\n      SELECT FIRST\n        WHEN VARS<PTR> EQ 'APID'\n          IF TRIM(DESC<PTR>) EQ 'ACS'\n:*--------------------------------------------------------------------*\n:*            FIND /AUXINC1/                                          *\n:*           %EDIT /HHLQ.?APID.SAT.LIBMAST/PROD.SOURCE.LIBMAST/%SEQ%  *\n:*            FIND /AUXINC2/                                          *\n:*           %EDIT /HHLQ.?APID.?ENVR.LIBMAST/PROD.SOURCE.LIBMAST/%SEQ%*\n:*            FIND /AUXINC3/                                          *\n:*           %EDIT /DUMMY/DSN=HHLQ.?APID.?ENVR.LIBMAST,DISP=SHR/%SEQ% *\n:*--------------------------------------------------------------------*\n              FIND /AUXINC2/\n             %EDIT /DSN=HHLQ.?APID.?ENVR.LIBMAST,DISP=SHR/DUMMY/%SEQ%\n              EDIT /AAFX='?APIDDY2AA',//\n              EDIT /CLASS=J/CLASS=K/\n          ENDIF\n        WHEN VARS<PTR> EQ 'CMOP'\n          LET NMSG = NMSG + 1\n          IF INDEX(DESC<PTR> 'RMODE=24') GT 0\n              EDIT /?DLEN/24/\n          ELSE\n              EDIT /?DLEN/31/\n          ENDIF\n        WHEN VARS<PTR> EQ 'UNAM'\n          LET NMSG = NMSG + 1\n          LET CARD = DESC<PTR>\n      ENDSEL\n     %EDIT `?%VARS<PTR>%`%DESC<PTR>%`\n  ENDLOOP\n %EDIT `?PSWD`%RETINFO<1>%`\n %EDIT `?PGMR`%RETINFO<2>%`\n %EDIT `?DESC`%RETINFO<3>%`\n %EDIT `?LNAM`%RETINFO<4>%`\n %EDIT `?MEMB`%MEMBER%`\n %EDIT `?JPRO`%TRIM(SUBSTR(CARD|' '|MEMBER 1 20))%`\n  POINT AWS LINE T\n  FIND /-REP ALL/\n  IF REPLACE EQ 'Y' AND ROSMEM NE '$$CANCEL' AND ROSMEM NE ''\n      %COPY %ROSMEM% %SEQ%\n  ELSE\n      %DELETE %SEQ%\n  ENDIF\n  TRAP OFF\nENDPROC\n<<GETPAN>> PROC\n  LET MEMBER  = TRIM(TRIM(P.MEMBER '_'))\n  LET REPLACE = TRIM(TRIM(P.REPLACE '_'))\n  LET ROSMEM  = TRIM(TRIM(P.ROSMEM '_'))\n  LOOP PTR FROM 1 TO NVAR BY 1\n     %LET CARD = TRIM(TRIM(P.%VARS<PTR>% '_'))\n      IF CARD NE DESC<PTR>\n          LET DESC<PTR> = CARD\n      ENDIF\n  ENDLOOP\n  LET CARD = ''\nENDPROC\n<<PUTPAN>> PROC\n  LET NMSG = 0\n  LET P.MEMBER = PAD(MEMBER MAXLEN(P.MEMBER) '_')\n  IF EMSG<1> NE ''\n      LET NMSG = NMSG + 1\n      LET P.MSG<NMSG> = EMSG<1>\n      LET A.MEMBER = 'UHM'\n      LET CURPOS = 'MEMBER'\n  ENDIF\n  LET P.REPLACE = PAD(REPLACE MAXLEN(P.REPLACE) '_')\n  IF EMSG<2> NE ''\n      LET NMSG = NMSG + 1\n      LET P.MSG<NMSG> = EMSG<2>\n      LET A.REPLACE = 'UHM'\n      LET CURPOS = 'REPLACE'\n  ENDIF\n  IF REPLACE EQ 'Y'\n      LET A.ROSLIT = 'SL'\n      LET P.ROSMEM = PAD(ROSMEM MAXLEN(P.ROSMEM) '_')\n      IF EMSG<3> NE ''\n          LET NMSG = NMSG + 1\n          LET P.MSG<NMSG> = EMSG<3>\n          IF INDEX(EMSG<3> 'CANCELLED') GT 0\n              LET A.ROSMEM = 'ULM'\n          ELSE\n              LET CURPOS = 'ROSMEM'\n              LET A.ROSMEM = 'UHM'\n          ENDIF\n      ELSE\n          LET A.ROSMEM = 'ULM'\n      ENDIF\n  ELSE\n      LET A.ROSLIT = 'SI'\n      LET A.ROSMEM = 'SIM'\n  ENDIF\n  LOOP PTR FROM 1 TO NVAR BY 1\n     %LET P.%VARS<PTR>% = PAD(DESC<PTR> MAXLEN(P.%VARS<PTR>%) '_')\n      IF MSGS<PTR> NE ''\n          LET NMSG = NMSG + 1\n          IF NMSG LT 4\n              LET P.MSG<NMSG> = MSGS<PTR>\n          ENDIF\n          IF INDEX(MSGS<PTR> 'DEFAULT' 1) LE 0\n             %LET A.%VARS<PTR>% = 'UHM'\n              IF CURPOS EQ ''\n                  LET CURPOS = VARS<PTR>\n              ENDIF\n          ENDIF\n      ENDIF\n  ENDLOOP\n  IF NMSG EQ 0\n      LET P.MSG<1> = 'PRESS \"PF8\" TO EDIT JCL IN YOUR AWS,'\n      LET P.MSG<1> = P.MSG<1> | ' \"PF9\" TO SUBMIT THE JOB'\n  ENDIF\n  IF CURPOS EQ ''\n      LET CURPOS = 'MEMBER'\n  ENDIF\nENDPROC\n<<EDITS>> PROC\n  LET NMSG = 0\n  LET EMSG<1> = EMSG<2> = EMSG<3> = ''\n  LOOP PTR FROM 1 TO NVAR BY 1\n    UNTIL VARS<PTR> EQ 'SRCE'\n  ENDLOOP\n  IF LENGTH(MEMBER) EQ 0\n      LET EMSG<1> = 'A LIBRARIAN MEMBER NAME IS REQUIRED'\n      LET NMSG = NMSG + 1\n  ELSE\n      IF MEMBER NE SAVE<1>\n          IF LENGTH(DESC<PTR>) EQ 0\n              EXEC PFX.CCDEFGET VARS<PTR>\n              SELECT AWS ROS1\n              LET DESC<PTR> = R1\n          ENDIF\n          EXEC PFX.CCMEMSEL MEMBER DESC<PTR>\n          SELECT AWS ROS1\n          IF R1 EQ ''\n              LET EMSG<1> = 'SELECTED MEMBER NAME HAS NO MATCH'\n              LET EMSG<1> = EMSG<1> | ' ON LIBRARIAN'\n              LET NMSG = NMSG + 1\n          ELSE\n              LET MEMBER     = R1\n              LET RETINFO<1> = R2\n              LET RETINFO<2> = R3\n              LET RETINFO<3> = R4\n              LET RETINFO<4> = R5\n          ENDIF\n      ENDIF\n  ENDIF\n  SELECT FIRST\n    WHEN REPLACE EQ 'N'\n      LET ROSMEM = ''\n    WHEN REPLACE EQ 'Y'\n      IF ROSMEM NE SAVE<3> OR ROSMEM EQ ''\n          IF ROSMEM EQ ''\n              LET ROSMEM = MEMBER\n          ENDIF\n          EXEC PFX.CCROSSEL ROSMEM\n          SELECT AWS ROS1\n          SELECT FIRST\n            WHEN R1 EQ ''\n              LET EMSG<3> = 'SELECTED ROSCOE MEMBER NAME HAS NO MATCH'\n              LET EMSG<3> = EMSG<3> | ' IN YOUR ROSCOE LIBRARY'\n              LET NMSG = NMSG + 1\n            WHEN R1 EQ '$$CANCEL'\n              LET EMSG<3> = 'LIBRARY MEMBER REPLACEMENT FROM ROSCOE'\n              LET EMSG<3> = EMSG<3> | ' HAS BEEN CANCELLED'\n              LET NMSG = NMSG + 1\n              LET REPLACE = 'N'\n              LET ROSMEM = ''\n            WHEN NONE\n              LET ROSMEM = R1\n          ENDSEL\n      ENDIF\n    WHEN NONE\n      LET EMSG<2> = '\"REPLACE\" MUST BE \"Y\"(YES) OR \"N\"(NO)'\n      LET NMSG = NMSG + 1\n  ENDSEL\n  LOOP PTR FROM 1 TO NVAR BY 1\n      IF LENGTH(DESC<PTR>) EQ 0\n          EXEC PFX.CCDEFGET VARS<PTR>\n          SELECT AWS ROS1\n          LET DESC<PTR> = R1\n      ENDIF\n      LET MSGS<PTR> = ''\n      SELECT FIRST\n        WHEN VARS<PTR> EQ 'ITST'\n          IF DESC<PTR> NE 'Y' AND DESC<PTR> NE 'N'\n              LET MSGS<PTR> = 'INTERTEST SELECTION MUST BE \"Y\" OR \"N\"'\n          ENDIF\n        WHEN VARS<PTR> EQ 'APID'\n          IF LENGTH(DESC<PTR>) EQ 0\n              LET MSGS<PTR> = 'APPLICATION ID IS MISSING'\n          ENDIF\n        WHEN VARS<PTR> EQ 'JNAM'\n          SELECT FIRST\n:*--------------------------------------------------------------------*\n:*          WHEN SUBSTR(DESC<PTR> 1 1) NE 'D'                         *\n:*            LET MSGS<PTR> = 'JOB NAME STUB MUST BEGIN WITH'         *\n:*            LET MSGS<PTR> = MSGS<PTR> | ' \"D\" FOR DEVELOPMENT'      *\n:*--------------------------------------------------------------------*\n            WHEN LENGTH(DESC<PTR>) LT 3\n              LET MSGS<PTR> = 'JOB NAME MUST BE AT LEAST'\n              LET MSGS<PTR> = MSGS<PTR> | ' 3 CHARACTERS LONG'\n            WHEN NOT CONFORM(DESC<PTR> 'AN')\n              LET MSGS<PTR> = 'CHARACTERS IN JOB NAME MUST'\n              LET MSGS<PTR> = MSGS<PTR> | ' BE ALPHANUMERIC'\n            WHEN NONE\n              EXEC PFX.CCDEFGET 'JNAM'\n              IF SUBSTR(DESC<PTR> 1 LENGTH(R1)) EQ R1\n                  LET CARD = PAD(SAVE<1> 6)\n                  LET CARD = SUBSTR(CARD LENGTH(R1)-1 8-LENGTH(R1))\n                  LET CARD = TRIM(CARD)\n                  SELECT FIRST\n                    WHEN DESC<PTR> EQ R1\n                    WHEN TRIM(SUBSTR(DESC<PTR> LENGTH(R1)+1)) EQ CARD\n                    WHEN ANY\n                      LET CARD = PAD(MEMBER 6)\n                      LET CARD = SUBSTR(CARD LENGTH(R1)-1 8-LENGTH(R1))\n                      LET DESC<PTR> = R1|CARD\n                  ENDSEL\n              ENDIF\n          ENDSEL\n        WHEN VARS<PTR> EQ 'ACCT'\n          IF LENGTH(DESC<PTR>) NE 4\n              LET MSGS<PTR> = 'ACCOUNT CODE MUST CONTAIN 4 CHARACTERS'\n          ENDIF\n      ENDSEL\n      IF MSGS<PTR> NE ''\n          LET NMSG = NMSG + 1\n      ENDIF\n  ENDLOOP\n  IF EMSG<1> EQ ''\n      LET SAVE<1> = MEMBER\n  ENDIF\n  IF EMSG<3> EQ ''\n      LET SAVE<3> = ROSMEM\n  ENDIF\nENDPROC\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@FILE532": {"ttr": 3085, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00H\\x01\\x01\\x02_\\x01\\x01(\\x7f\"\\x15\\x00\\x08\\x00\\x02\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2001-01-25T00:00:00", "modifydate": "2001-10-14T22:15:48", "lines": 8, "newlines": 2, "modlines": 0, "user": "SBGOLOB"}, "text": "//***FILE 532 is from Charles Hottel and contains an extensive      *   FILE 532\n//*           collection of Roscoe RPFs.                            *   FILE 532\n//*                                                                 *   FILE 532\n//*           A detailed description of the use of these RPFs       *   FILE 532\n//*           may be found in member $$CBTDOC in this file.         *   FILE 532\n//*                                                                 *   FILE 532\n//*       email:   chottel@cpcug.org                                *   FILE 532\n//*                                                                 *   FILE 532\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AB": {"ttr": 3330, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01$\\x1f\\x01\\x01$\\x1f\\x14\"\\x00\\x06\\x00\\x06\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-08-29T00:00:00", "modifydate": "2001-08-29T14:22:00", "lines": 6, "newlines": 6, "modlines": 0, "user": "EGHF3PY"}, "text": "<<AB>>\nPUSH\nSET ATTACH NOPAUSE\nBOTTOM\nA *-16 ,,\nPOP\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ACC": {"ttr": 3332, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01$\\x1f\\x01\\x01$\\x1f\\x14%\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-08-29T00:00:00", "modifydate": "2001-08-29T14:25:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "EGHF3PY"}, "text": "<<ACC>> : COMPILERS RPF\n:*--------------------------------------------------------------------*\n:*  A1 = COMPILER (A=ASSEMBLE MAP, B=BATCH COBOL, C=CICS COBOL)       *\n:*  A2 = MEMBER NAME OR \"L\" FOR LIST                                  *\n:*  A3 = LIST NAME OR INSTRUCTION WORD                                *\n:*  A4 = INSTRUCTION WORD                                             *\n:*  A5 = INSTRUCTION WORD                                             *\n:*       ALLOWABLE INSTRUCTION WORDS:                                 *\n:*           REP = REPLACE LIBRARY MEMBER FROM ROSCOE MEMBER          *\n:*           SUB = SUBMIT WITHOUT SHOWING SCREEN IF ALL EDITS PASS    *\n:*--------------------------------------------------------------------*\n  TRANSFER PFX.$CC A1 A2 A3 A4 A5 A6 A7 A8\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ACCEXP": {"ttr": 3334, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x01$\\x9f\\x01\\x01&/\\x14\\x00\\x00\\xd0\\x00\\xd0\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2001-09-06T00:00:00", "modifydate": "2001-09-19T14:00:00", "lines": 208, "newlines": 208, "modlines": 0, "user": "EGHF3PY"}, "text": "<<ACCEXP>>\nFETCH PFX.$$CCHELP\nEXP DSN=HLQ.ACCRPF.BACKUP($$CCHELP)\n:\nFETCH PFX.$$CHDEFS\nEXP DSN=HLQ.ACCRPF.BACKUP($$CHDEFS)\n:\nFETCH PFX.$$CHHELP\nEXP DSN=HLQ.ACCRPF.BACKUP($$CHHELP)\n:\nFETCH PFX.$$CHLIST\nEXP DSN=HLQ.ACCRPF.BACKUP($$CHLIST)\n:\nFETCH PFX.$$JCARDS\nEXP DSN=HLQ.ACCRPF.BACKUP($$JCARDS)\n:\nFETCH PFX.$$JCNVRT\nEXP DSN=HLQ.ACCRPF.BACKUP($$JCNVRT)\n:\nFETCH PFX.$$JSETUP\nEXP DSN=HLQ.ACCRPF.BACKUP($$JSETUP)\n:\nFETCH PFX.$CC\nEXP DSN=HLQ.ACCRPF.BACKUP($CC)\n:\nFETCH PFX.$CCA\nEXP DSN=HLQ.ACCRPF.BACKUP($CCA)\n:\nFETCH PFX.$CCAL\nEXP DSN=HLQ.ACCRPF.BACKUP($CCAL)\n:\nFETCH PFX.$CCB\nEXP DSN=HLQ.ACCRPF.BACKUP($CCB)\n:\nFETCH PFX.$CCBL\nEXP DSN=HLQ.ACCRPF.BACKUP($CCBL)\n:\nFETCH PFX.$CCC\nEXP DSN=HLQ.ACCRPF.BACKUP($CCC)\n:\nFETCH PFX.$CCCL\nEXP DSN=HLQ.ACCRPF.BACKUP($CCCL)\n:\nFETCH PFX.$CCXL\nEXP DSN=HLQ.ACCRPF.BACKUP($CCXL)\n:\nFETCH PFX.ACC\nEXP DSN=HLQ.ACCRPF.BACKUP(ACC)\n:\nFETCH PFX.ACCBACK\nEXP DSN=HLQ.ACCRPF.BACKUP(ACCBACK)\n:\nFETCH PFX.ACCEXP\nEXP DSN=HLQ.ACCRPF.BACKUP(ACCEXP)\n:\nFETCH PFX.ACCLIST\nEXP DSN=HLQ.ACCRPF.BACKUP(ACCLIST)\n:\nFETCH PFX.CC\nEXP DSN=HLQ.ACCRPF.BACKUP(CC)\n:\nFETCH PFX.CCA\nEXP DSN=HLQ.ACCRPF.BACKUP(CCA)\n:\nFETCH PFX.CCACXJCL\nEXP DSN=HLQ.ACCRPF.BACKUP(CCACXJCL)\n:\nFETCH PFX.CCAL\nEXP DSN=HLQ.ACCRPF.BACKUP(CCAL)\n:\nFETCH PFX.CCALXPAN\nEXP DSN=HLQ.ACCRPF.BACKUP(CCALXPAN)\n:\nFETCH PFX.CCASXJCL\nEXP DSN=HLQ.ACCRPF.BACKUP(CCASXJCL)\n:\nFETCH PFX.CCAXXHLP\nEXP DSN=HLQ.ACCRPF.BACKUP(CCAXXHLP)\n:\nFETCH PFX.CCAXXPAN\nEXP DSN=HLQ.ACCRPF.BACKUP(CCAXXPAN)\n:\nFETCH PFX.CCB\nEXP DSN=HLQ.ACCRPF.BACKUP(CCB)\n:\nFETCH PFX.CCBDXJCL\nEXP DSN=HLQ.ACCRPF.BACKUP(CCBDXJCL)\n:\nFETCH PFX.CCBL\nEXP DSN=HLQ.ACCRPF.BACKUP(CCBL)\n:\nFETCH PFX.CCBLXPAN\nEXP DSN=HLQ.ACCRPF.BACKUP(CCBLXPAN)\n:\nFETCH PFX.CCBXXHLP\nEXP DSN=HLQ.ACCRPF.BACKUP(CCBXXHLP)\n:\nFETCH PFX.CCBXXJCL\nEXP DSN=HLQ.ACCRPF.BACKUP(CCBXXJCL)\n:\nFETCH PFX.CCBXXPAN\nEXP DSN=HLQ.ACCRPF.BACKUP(CCBXXPAN)\n:\nFETCH PFX.CCC\nEXP DSN=HLQ.ACCRPF.BACKUP(CCC)\n:\nFETCH PFX.CCCL\nEXP DSN=HLQ.ACCRPF.BACKUP(CCCL)\n:\nFETCH PFX.CCCLXPAN\nEXP DSN=HLQ.ACCRPF.BACKUP(CCCLXPAN)\n:\nFETCH PFX.CCCXIJCL\nEXP DSN=HLQ.ACCRPF.BACKUP(CCCXIJCL)\n:\nFETCH PFX.CCCXXHLP\nEXP DSN=HLQ.ACCRPF.BACKUP(CCCXXHLP)\n:\nFETCH PFX.CCCXXJCL\nEXP DSN=HLQ.ACCRPF.BACKUP(CCCXXJCL)\n:\nFETCH PFX.CCCXXPAN\nEXP DSN=HLQ.ACCRPF.BACKUP(CCCXXPAN)\n:\nFETCH PFX.CCDEFGET\nEXP DSN=HLQ.ACCRPF.BACKUP(CCDEFGET)\n:\nFETCH PFX.CCDEFHLP\nEXP DSN=HLQ.ACCRPF.BACKUP(CCDEFHLP)\n:\nFETCH PFX.CCDEFPAN\nEXP DSN=HLQ.ACCRPF.BACKUP(CCDEFPAN)\n:\nFETCH PFX.CCDEFSET\nEXP DSN=HLQ.ACCRPF.BACKUP(CCDEFSET)\n:\nFETCH PFX.CCHLPPAN\nEXP DSN=HLQ.ACCRPF.BACKUP(CCHLPPAN)\n:\nFETCH PFX.CCHLPSHO\nEXP DSN=HLQ.ACCRPF.BACKUP(CCHLPSHO)\n:\nFETCH PFX.CCJOBBLD\nEXP DSN=HLQ.ACCRPF.BACKUP(CCJOBBLD)\n:\nFETCH PFX.CCJOBJCL\nEXP DSN=HLQ.ACCRPF.BACKUP(CCJOBJCL)\n:\nFETCH PFX.CCLIBMEM\nEXP DSN=HLQ.ACCRPF.BACKUP(CCLIBMEM)\n:\nFETCH PFX.CCMEMPAN\nEXP DSN=HLQ.ACCRPF.BACKUP(CCMEMPAN)\n:\nFETCH PFX.CCMEMSEL\nEXP DSN=HLQ.ACCRPF.BACKUP(CCMEMSEL)\n:\nFETCH PFX.CCPXXJCL\nEXP DSN=HLQ.ACCRPF.BACKUP(CCPXXJCL)\n:\nFETCH PFX.CCROSPAN\nEXP DSN=HLQ.ACCRPF.BACKUP(CCROSPAN)\n:\nFETCH PFX.CCROSSEL\nEXP DSN=HLQ.ACCRPF.BACKUP(CCROSSEL)\n:\nFETCH PFX.CCSESSET\nEXP DSN=HLQ.ACCRPF.BACKUP(CCSESSET)\n:\nFETCH PFX.CCSETPAN\nEXP DSN=HLQ.ACCRPF.BACKUP(CCSETPAN)\n:\nFETCH PFX.CCTXXJCL\nEXP DSN=HLQ.ACCRPF.BACKUP(CCTXXJCL)\n:\nFETCH PFX.CCURTPAN\nEXP DSN=HLQ.ACCRPF.BACKUP(CCURTPAN)\n:\nFETCH PFX.CCURTSEL\nEXP DSN=HLQ.ACCRPF.BACKUP(CCURTSEL)\n:\nFETCH PFX.CCXLXPAN\nEXP DSN=HLQ.ACCRPF.BACKUP(CCXLXPAN)\n:\nFETCH PFX.CCXXXHLP\nEXP DSN=HLQ.ACCRPF.BACKUP(CCXXXHLP)\n:\nFETCH PFX.CCXXXPAN\nEXP DSN=HLQ.ACCRPF.BACKUP(CCXXXPAN)\n:\nFETCH PFX.DELDUPS\nEXP DSN=HLQ.ACCRPF.BACKUP(DELDUPS)\n:\nFETCH PFX.GETCC\nEXP DSN=HLQ.ACCRPF.BACKUP(GETCC)\n:\nFETCH PFX.IN\nEXP DSN=HLQ.ACCRPF.BACKUP(IN)\n:\nFETCH PFX.RESET\nEXP DSN=HLQ.ACCRPF.BACKUP(RESET)\n:\nFETCH PFX.SCANACC\nEXP DSN=HLQ.ACCRPF.BACKUP(SCANACC)\n:\nFETCH PFX.SHAREACC\nEXP DSN=HLQ.ACCRPF.BACKUP(SHAREACC)\n:\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ACSDEST": {"ttr": 3338, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x01$\\x9f\\x01\\x01&/\\x13R\\x00\\x07\\x00\\x07\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2001-09-06T00:00:00", "modifydate": "2001-09-19T13:52:00", "lines": 7, "newlines": 7, "modlines": 0, "user": "EGHF3PY"}, "text": "//MANIFEST OUTPUT DEFAULT=Y,JESDS=ALL,\n// BUILDING='xx xxxxxxx, xxxx',\n// DEPT='aaa/bbb/ccccccccccc',\n// ROOM='dddd-nnn',\n// NAME='First   Last   eee-fff-gggg',\n// ADDRESS=('nnnn hhhhhh hhhh,','city       , st nnnnn'),\n// TITLE=&TITLE1\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "AF": {"ttr": 3340, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x01\\x01$\\x9f\\x01\\x01$\\x9f\\x156\\x00\\x07\\x02\\xbc\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2001-09-06T00:00:00", "modifydate": "2001-09-06T15:36:00", "lines": 7, "newlines": 700, "modlines": 0, "user": "EGHF3PY"}, "text": "<<AF>>\nPUSH\nSET CURSOR HOME\nSET ATTACH NOPAUSE\n+A JOB * FILE +A1+\nPOP\nRETURN\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AJ": {"ttr": 3342, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01$\\x9f\\x01\\x01$\\x9f\\x157\\x00\\x12\\x00\\x12\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-06T00:00:00", "modifydate": "2001-09-06T15:37:00", "lines": 18, "newlines": 18, "modlines": 0, "user": "EGHF3PY"}, "text": "<<AJ>>\n:\n: A1 = JOBNAME\n: A2 = JOBNUMBER\n:\nPUSH\nSET CURSOR HOME\nSET MODE NONUM\nSET JOBCNT MAX\nTRAP ON\n+ATTACH JOB +A1+ +A2+ FILE 1\nATTACH JOB *\nTRAP OFF\nIF (S.TC NE 0)\n+ RESPONSE 'JOB +A1+ +A2+ NOT FOUND'\nENDIF\nSET CURSOR DATA\nPOP\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AL": {"ttr": 3344, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01$\\x9f\\x01\\x01$\\x9f\\x159\\x00\\x05\\x00\\x05\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-06T00:00:00", "modifydate": "2001-09-06T15:39:00", "lines": 5, "newlines": 5, "modlines": 0, "user": "EGHF3PY"}, "text": "<<AL>>\nPUSH\nSET ATTACH NOPAUSE\nATTACH /LINKAGE/\nPOP\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ALL": {"ttr": 3346, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01$\\x9f\\x01\\x01$\\x9f\\x15H\\x00\\x0b\\x00\\x0b\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-06T00:00:00", "modifydate": "2001-09-06T15:48:00", "lines": 11, "newlines": 11, "modlines": 0, "user": "EGHF3PY"}, "text": "<<ALL>>\nPUSH\nSET ATTACH NOPAUSE\nDELETE\n+ATTACH LIB +A1+.\nCOPY LIB 1 9999 T FULL\nDELETE 100 300\nLSHIFT 3\nDETACH LIB\nPOP\nRETURN\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AP": {"ttr": 3348, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01$\\x9f\\x01\\x01$\\x9f\\x15P\\x00\\x05\\x00\\x05\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-06T00:00:00", "modifydate": "2001-09-06T15:50:00", "lines": 5, "newlines": 5, "modlines": 0, "user": "EGHF3PY"}, "text": "<<AP>>\nPUSH\nSET ATTACH NOPAUSE\nATTACH /PROCEDURE DIV/\nPOP\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AW": {"ttr": 3350, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01$\\x9f\\x01\\x01$\\x9f\\x15S\\x00\\x05\\x00\\x05\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-06T00:00:00", "modifydate": "2001-09-06T15:53:00", "lines": 5, "newlines": 5, "modlines": 0, "user": "EGHF3PY"}, "text": "<<AW>>\nPUSH\nSET ATTACH NOPAUSE\nATTACH /WORKING/\nPOP\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BCOB2C": {"ttr": 3352, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01$\\x9f\\x01\\x01$\\x9f\\x16\\x01\\x00\\x1b\\x00\\x1b\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-06T00:00:00", "modifydate": "2001-09-06T16:01:00", "lines": 27, "newlines": 27, "modlines": 0, "user": "EGHF3PY"}, "text": "<<BCOB2C>>\nF BCOB2C\n+E /XXXXXXXX/+A1+/ 100 ,,\nLET L1 = SUBSTR(A1 1 4)\n+E /YYYY/+L1+/ 800\nLET L1 = SUBSTR(A1 1 6)\n+E /ZZZZZZ/+L1+/ 1600\nDEL 1 99\nRETURN\n:\n//JOBNAME  JOB (ACCTINFO),'PGMR XXXXXXXX',MSGCLASS=S,CLASS=K\n//PROCLIB JCLLIB ORDER=HLQ.DVL.PROC\n//        SET TITLE1='PFX.XXXXXXXX'\n//OUTPUT INCLUDE MEMBER=DESTCH\n//*-------------------------------------------------------------------*\n//*        COBOL II COMPILE                                           *\n//*-------------------------------------------------------------------*\n//STEP02   EXEC  COB3CLE,LIBRARY='DVL.SOURCE.LIBMAST',\n//    LOPT='AMODE=31,RMODE=ANY'\n//UPDATE.SYSIN DD  *\n-SEL XXXXXXXX,YYYY,NOLIST,EXEC,COPYDD,VAR\n-END\n//LKED.SYSLIB  DD\n//             DD\n//             DD DSN=HLQ.DVL.BATLOAD,DISP=SHR\n//LKED.SYSIN DD *\n  NAME ZZZZZZ(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BCOB2CL": {"ttr": 3354, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01$\\x9f\\x01\\x01$\\x9f\\x16\\x19\\x00\\x1c\\x00\\x1c\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-06T00:00:00", "modifydate": "2001-09-06T16:19:00", "lines": 28, "newlines": 28, "modlines": 0, "user": "EGHF3PY"}, "text": "<<BCOB2CL>>\nF BCOB2CL\n+E /XXXXXXXX/+A1+/ 100 ,,\nLET L1 = SUBSTR(A1 1 4)\n+E /YYYY/+L1+/ 800\nLET L1 = SUBSTR(A1 1 6)\n+E /ZZZZZZ/+L1+/ 1600\nDEL 1 99\nRETURN\n:\n//JOBNAME  JOB (ACCTINFO),'PGMR XXXXXXXX',MSGCLASS=S,CLASS=K\n//PROCLIB JCLLIB ORDER=HLQ.DVL.PROC\n//        SET TITLE1='PFX.XXXXXXXX'\n//OUTPUT INCLUDE MEMBER=DESTCH\n//*-------------------------------------------------------------------*\n//*        COBOL II COMPILE AND LINK EDIT                             *\n//*-------------------------------------------------------------------*\n//STEP02   EXEC  COB3CLE,LIBRARY='DVL.SOURCE.LIBMAST',\n//    LOPT='AMODE=31,RMODE=ANY'\n//UPDATE.SYSIN DD  *\n-SEL XXXXXXXX,YYYY,NOLIST,EXEC,COPYDD,VAR\n-END\n//LKED.SYSLIB  DD\n//             DD\n//             DD DSN=HLQ.DVL.BATLOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=HLQ.DVL.BATLOAD,DISP=SHR\n//LKED.SYSIN DD *\n  NAME ZZZZZZ(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BCOB2ROS": {"ttr": 3356, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01$\\x9f\\x01\\x01$\\x9f\\x16$\\x00\\x18\\x00\\x18\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-06T00:00:00", "modifydate": "2001-09-06T16:24:00", "lines": 24, "newlines": 24, "modlines": 0, "user": "EGHF3PY"}, "text": "<<BCOB2ROS>>\nF BCOB2ROS\n+E /XXXXXXXX/+A1+/ 100 ,,\nLET L1 = SUBSTR(A1 1 6)\n+E /ZZZZZZ/+L1+/ 1600\n+COPY +A1+ 700\nDEL 1 99\nRETURN\n:\n//JOBNAME  JOB (ACCTIBFO),'PGMR XXXXXXXX',MSGCLASS=S,CLASS=K\n//PROCLIB JCLLIB ORDER=HLQ.DVL.PROC\n//        SET TITLE1='PFX.XXXXXXXX'\n//OUTPUT INCLUDE MEMBER=DESTCH\n//*-------------------------------------------------------------------*\n//*        COBOL II COMPILE                                           *\n//*-------------------------------------------------------------------*\n//STEP02   EXEC  COB3CLE,LIBRARY='DVL.SOURCE.LIBMAST',PROG=IEFBR14,\n//    LOPT='AMODE=31,RMODE=ANY'\n//COMP.SYSIN DD  *\n//LKED.SYSLIB  DD\n//             DD\n//             DD DSN=HLQ.DVL.BATLOAD,DISP=SHR\n//LKED.SYSIN DD *\n  NAME ZZZZZZ(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BDAY": {"ttr": 3358, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01$\\x9f\\x01\\x01$\\x9f\\x16(\\x00\\x19\\x00\\x19\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-06T00:00:00", "modifydate": "2001-09-06T16:28:00", "lines": 25, "newlines": 25, "modlines": 0, "user": "EGHF3PY"}, "text": "<<BDAY>>\nPUSH\nLET L1 = DATEFUN('AC')\nLET L5 = SUBSTR(L1 7 2)\nFETCH  PFX.BDAYS\nRENUMBER 1,1\n+FILL 7 8 /+L5+/\nPOINT\nTRAP ON\nLOOP S.HIGHSEQ TIMES\n    READ AWS * L2\n    LET L3 = SUBSTR(L2 1 8)\n    +LET L4 = DATEFUN('DRAA' '+L1+' '+L3+')\n    IF (L4 LT 11) AND (L4 GT 0)\n        ESCAPE\n    ENDIF\n    POINT *+1\nENDLOOP\nTRAP OFF\nPOP\nDELETE\nIF (L4 LT 11) AND (L4 GT 0)\n    ATTACH PFX.BDAYS\nENDIF\nRETURN\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BFILL16": {"ttr": 3360, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01$\\x9f\\x01\\x01$\\x9f\\x165\\x00\\x1a\\x00\\x1a\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-06T00:00:00", "modifydate": "2001-09-06T16:35:00", "lines": 26, "newlines": 26, "modlines": 0, "user": "EGHF3PY"}, "text": "<<BFILL16>>\nPUSH\nSET ATTACH NOPAUSE\nSET STMTCNT MAX\nTOP\nREAD AWS * L1\n<<LOOP>>\nLET L4 = SEQ\n:+RESPONSE 'L4=+L4+'\nLET L2 = SUBSTR(L1 1 6)\nIF (CONFORM(L2 'N')  EQ 1)\n+  FILL 1 6 /      / +L4+\nELSE\n+ ATTACH +L4+\nENDIF\n<<READ>>\nLET L5 = SEQ+1\nIF (L5 LE HIGHSEQ) THEN\n   READ AWS *+1 L1\n   GOTO <<LOOP>>\nENDIF\n<<END>>\nPOP\nTOP\nATTACH\nRETURN\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BLANKFIL": {"ttr": 3362, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01$\\x9f\\x01\\x01$\\x9f\\x167\\x00\\x06\\x00\\x06\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-06T00:00:00", "modifydate": "2001-09-06T16:37:00", "lines": 6, "newlines": 6, "modlines": 0, "user": "EGHF3PY"}, "text": "<<BLANKFIL>>\nPUSH\nSET MODE XTENDED\nNOTRACE EDIT\nFILL 73 255 / /\nPOP\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BLKTAPE": {"ttr": 3585, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01$\\x9f\\x01\\x01$\\x9f\\x16C\\x00(\\x00(\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-06T00:00:00", "modifydate": "2001-09-06T16:43:00", "lines": 40, "newlines": 40, "modlines": 0, "user": "EGHF3PY"}, "text": "<<BLKTAPE>>\n:\n:COMPUTE BLOCK SIZES FOR TAPE\n:\nIF (A1 EQ '')\n   RESPONSE 'BLKTAPE recsize'\n   RETURN\nENDIF\nDECLARE L1 BLK\nDECLARE L2 MAX\nDECLARE L3 REC\nDECLARE L4 TXT <3>\nLET REC = A1\n:\nLET MAX = 32760\nIF (REC GT MAX)\n   GOTO <<WRITE>>\nENDIF\nLET BLK = (MAX / REC) * REC\nLET TXT <1> = BLK\n:\nLET MAX = 16384\nIF (REC GT MAX)\n   GOTO <<WRITE>>\nENDIF\nLET BLK = (MAX / REC) * REC\nLET TXT <2> = BLK\n:\nLET MAX = 8192\nIF (REC GT MAX)\n   GOTO <<WRITE>>\nENDIF\nLET BLK = (MAX / REC) * REC\nLET TXT <3> = BLK\n<<WRITE>>\nWRITE\n' LARGE BLOCK SIZE: '|TXT <1>\n'MEDIUM BLOCK SIZE: '|TXT <2>\n' SMALL BLOCK SIZE: '|TXT <3>\nENDWRITE\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "BLK3390": {"ttr": 3587, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01$\\x9f\\x01\\x01$\\x9f\\x16C\\x003\\x003\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-06T00:00:00", "modifydate": "2001-09-06T16:43:00", "lines": 51, "newlines": 51, "modlines": 0, "user": "EGHF3PY"}, "text": "<<BLK3390>>\n:\n:COMPUTE BLOCK SIZES FOR 3390\n:\nIF (A1 EQ '')\n   RESPONSE 'BLK3390 RECSIZE'\n   RETURN\nENDIF\nIF (A1 GT 32760)\n   RESPONSE 'MVS MAXIMUM BLOCK SIZE IS 32760'\n   RETURN\nENDIF\n::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\n LET L1 = 27998 / A1 * A1\n LET L2 = 10796 / A1 * A1\n RESPONSE 'BLKSIZE='|L1|'***FIVEBLOCKS='|L2\n RETURN\n::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\nDECLARE L1 BLK\nDECLARE L2 WRK\nDECLARE L3 PTK\nDECLARE L4 REC\nDECLARE L5 TXT <12>\nIF (A1 GT 27998)\n   LET TXT <1> = A1\n   GOTO <<WRITE>>\nENDIF\nLET REC  = A1\nLOOP PTK FROM 1 TO 12 BY 1\n   LET WRK = (((1790 / PTK) - 20) * 32) - 2\n   IF (WRK LT REC)\n      GOTO <<WRITE>>\n   ENDIF\n   LET BLK = (WRK / REC) * REC\n   LET TXT <PTK> = BLK\nENDLOOP\n<<WRITE>>\nWRITE\n'    FULL TRACK BLOCK SIZE: '|TXT <1>\n'    HALF TRACK BLOCK SIZE: '|TXT <2>\n'   THIRD TRACK BLOCK SIZE: '|TXT <3>\n' QUARTER TRACK BLOCK SIZE: '|TXT <4>\n'   FIFTH TRACK BLOCK SIZE: '|TXT <5>\n'   SIXTH TRACK BLOCK SIZE: '|TXT <6>\n' SEVENTH TRACK BLOCK SIZE: '|TXT <7>\n'   EIGTH TRACK BLOCK SIZE: '|TXT <8>\n'   NINTH TRACK BLOCK SIZE: '|TXT <9>\n'   TENTH TRACK BLOCK SIZE: '|TXT <10>\n'ELEVENTH TRACK BLOCK SIZE: '|TXT <11>\n' TWELFTH TRACK BLOCK SIZE: '|TXT <12>\nENDWRITE\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BMI": {"ttr": 3589, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01$\\x9f\\x01\\x01$\\x9f\\x16D\\x00\\x17\\x00\\x17\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-06T00:00:00", "modifydate": "2001-09-06T16:44:00", "lines": 23, "newlines": 23, "modlines": 0, "user": "EGHF3PY"}, "text": "<<BMI>>\n:4 JUN 1998 NEW GUIDLINES\n: 25 TO 29.9 OVERWEIGHT\n:\n: COMPUTE BODY MASS INDEX - 19 TO 25 IS HEALTHY\n: BMI = (WEIGHT IN KILOGRAMS)/(HEIGHT IN METERS SQUARED)\n:       1 POUND = 0.45 KILOGRAMS\n:       1 INCH = .0254 METERS\n:\nIF (A1 EQ '')\n   RESPONSE 'BMI HEIGHT WEIGHT'\n   RETURN\nENDIF\nIF (A2 EQ '')\n   RESPONSE 'BMI HEIGHT WEIGHT'\n   RETURN\nENDIF\n::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\n LET L1 = A1 * 0.0254\n LET L2 = A2 * 0.45\n LET L3 = L2 / (L1 * L1)\n RESPONSE 'BMI='|L3|'*****19-25 IS HEALTHY'\n RETURN\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BMI1": {"ttr": 3591, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01$\\x9f\\x01\\x01$\\x9f\\x16D\\x00\\x15\\x00\\x15\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-06T00:00:00", "modifydate": "2001-09-06T16:44:00", "lines": 21, "newlines": 21, "modlines": 0, "user": "EGHF3PY"}, "text": "<<BMI>>\n:4 JUN 1998 NEW GUIDLINES\n: 25 TO 29.9 OVERWEIGHT\n:\n: COMPUTE BODY MASS INDEX - 19 TO 25 IS HEALTHY\n: BMI = (WEIGHT IN LBS * 704.5)/(HEIGHT IN INCHES SQUARED)\n:\nIF (A1 EQ '')\n   RESPONSE 'BMI HEIGHT WEIGHT'\n   RETURN\nENDIF\nIF (A2 EQ '')\n   RESPONSE 'BMI HEIGHT WEIGHT'\n   RETURN\nENDIF\n::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\n LET L1 = A1\n LET L2 = A2 * 704.5\n LET L3 = L2 / (L1 * L1)\n RESPONSE 'BMI='|L3|'*****19-25 IS HEALTHY'\n RETURN\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CALS": {"ttr": 3593, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01$\\x9f\\x01\\x01$\\x9f\\x16H\\x00\\x13\\x00\\x13\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-06T00:00:00", "modifydate": "2001-09-06T16:48:00", "lines": 19, "newlines": 19, "modlines": 0, "user": "EGHF3PY"}, "text": "<<CALS>>\n:\n:COMPUTE CALORIES TO MAINTAIN WEIGHT\n:A DEFICIT OF 3500 CALORIES GIVE A WEIGHT LOSS OF 1 LB\n:\nIF (A1 EQ '')\n   RESPONSE 'CALS LBS'\n   RETURN\nENDIF\nIF (A1 LT 121)\n   RESPONSE 'MINIMUM LBS IS 121'\n   RETURN\nENDIF\nLET L1 = A1\nLET L2 = L1 - 121\nLET L3 = 2000 + (L2 * 10)\n+RESPONSE 'IT TAKES +L3+ CALORIES TO MAINTAIN +L1+ LBS'\n<<END>>\nRETURN\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CBL2USER": {"ttr": 3595, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01$\\x1f\\x01\\x01$\\x1f\\x132\\x00\\x04\\x00\\x04\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-08-29T00:00:00", "modifydate": "2001-08-29T13:32:00", "lines": 4, "newlines": 4, "modlines": 0, "user": "EGHF3PY"}, "text": "____ ____ ____ ________ ___________ NY\nDVL.SOURCE.LIBMAST                       ASD\nCICS.OMS.APPLOAD                             31 ANY\nDVL.OPER.LOADLIB                             31 ANY NOMAP,NOXREF\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CC": {"ttr": 3597, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x01$\\x9f\\x01\\x01&/\\x14P\\x00\\x0f\\x00\\x11\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2001-09-06T00:00:00", "modifydate": "2001-09-19T14:50:00", "lines": 15, "newlines": 17, "modlines": 0, "user": "EGHF3PY"}, "text": "RESPONSE 'USE ACC'\nRETURN\n<<CC>> : COMPILERS RPF FOR ASD (NOT YET READY)\n:*--------------------------------------------------------------------*\n:*--------------------------------------------------------------------*\n:*  A1 = COMPILER (A=ASSEMBLE MAP, B=BATCH COBOL, C=CICS COBOL)       *\n:*  A2 = MEMBER NAME OR \"L\" FOR LIST                                  *\n:*  A3 = LIST NAME OR INSTRUCTION WORD                                *\n:*  A4 = INSTRUCTION WORD                                             *\n:*  A5 = INSTRUCTION WORD                                             *\n:*       ALLOWABLE INSTRUCTION WORDS:                                 *\n:*           REP = REPLACE LIBRARY MEMBER FROM ROSCOE MEMBER          *\n:*           SUB = SUBMIT WITHOUT SHOWING SCREEN IF ALL EDITS PASS    *\n:*--------------------------------------------------------------------*\n  TRANSFER PFX.$CC A1 A2 A3 A4 A5 A6 A7 A8\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CCA": {"ttr": 3599, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01$\\x9f\\x01\\x01$\\x9f\\x170\\x00\\x06\\x00\\x06\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-06T00:00:00", "modifydate": "2001-09-06T17:30:00", "lines": 6, "newlines": 6, "modlines": 0, "user": "EGHF3PY"}, "text": "<<CCA>> : A1=MEMBER  <A2=REP/SUB>  <A3=REP/SUB>\n:*--------------------------------------------------------------------*\n:*ASSEMBLE MAPS                                                       *\n:*--------------------------------------------------------------------*\n  EXEC PFX.ACC 'A' A1 A2 A3 A4 A5 A6 A7\n  RETURN\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CCACXJCL": {"ttr": 3601, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01$\\x9f\\x01\\x01$\\x9f\\x171\\x00\\x14\\x00\\x14\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-06T00:00:00", "modifydate": "2001-09-06T17:31:00", "lines": 20, "newlines": 20, "modlines": 0, "user": "EGHF3PY"}, "text": "//LIBRARY  EXEC  LIBACS,LIBRARY='?SRCE',\n//         ENV='?APID',PLATFORM='?ENVR'\n//STEPLIB DD DSN=DATACOM.?APID.?ENVR.DBLOAD,DISP=SHR\n//UPDATE.AUXINC1  DD  DSN=HLQ.?APID.SAT.LIBMAST,DISP=SHR\n//UPDATE.AUXINC2  DD  DSN=HLQ.?APID.PRD.LIBMAST,DISP=SHR\n//UPDATE.AUXINC3  DD  DSN=HLQ.?APID.SAT.LIBMAST,DISP=SHR\n//UPDATE.SYSIN    DD  *\n-SEL ?MEMB,?PSWD,NOLIST,EXEC,COPYDDOFF\n-PGMR ?PGMR\n-DESC ?DESC\n-REP ALL\n-END\n//MAPASM   EXEC  CICSMAPN,\n//           MEM='?LNAM',LIB='?MAPC',\n//           INDEX='CICS.APP'\n//*\n//*\n//LINK     EXEC  CICSLNKM,COND=(5,LT),\n//           LOAD='?OLNK',PPTNAME='?LNAM',\n//           MODE='?AMOP',LOPT='?ALOP'\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CCAL": {"ttr": 3603, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01$\\x9f\\x01\\x01$\\x9f\\x172\\x00\\x03\\x00\\x03\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-06T00:00:00", "modifydate": "2001-09-06T17:32:00", "lines": 3, "newlines": 3, "modlines": 0, "user": "EGHF3PY"}, "text": "<<CCAL>> : INVOKE CC RPF FOR ASSEMBLER LIST PROCESSOR\n  EXEC PFX.ACC 'A' 'L' A1 A2 A3 A4 A5 A6\n  RETURN\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CCALXPAN": {"ttr": 3605, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01$\\x9f\\x01\\x01$\\x9f\\x173\\x00\\x1f\\x00\\x1f\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-06T00:00:00", "modifydate": "2001-09-06T17:33:00", "lines": 31, "newlines": 31, "modlines": 0, "user": "EGHF3PY"}, "text": "STARTDEF\nTAG ! S\nTAG @ SH\nTAG $ SH  TITLE\nTAG \\ UM  LISTNAME MEMB\nTAG % SH  MSG\n!                       @Your Company Name Here       !\n                    $     MAP ASSEMBLY LIST PROCESSOR     !\n\n\n                             !List Name:\\________!\n\n\\________!\\________!\\________!\\________!\\________!\\________!\\________!\\________!\n\\________!\\________!\\________!\\________!\\________!\\________!\\________!\\________!\n\\________!\\________!\\________!\\________!\\________!\\________!\\________!\\________!\n\\________!\\________!\\________!\\________!\\________!\\________!\\________!\\________!\n\\________!\\________!\\________!\\________!\\________!\\________!\\________!\\________!\n\\________!\\________!\\________!\\________!\\________!\\________!\\________!\\________!\n\\________!\\________!\\________!\\________!\\________!\\________!\\________!\\________!\n\\________!\\________!\\________!\\________!\\________!\\________!\\________!\\________!\n\\________!\\________!\\________!\\________!\\________!\\________!\\________!\\________!\n\\________!\\________!\\________!\\________!\\________!\\________!\\________!\\________!\n\\________!\\________!\\________!\\________!\\________!\\________!\\________!\\________!\n\\________!\\________!\\________!\\________!\\________!\\________!\\________!\\________!\n\\________!\\________!\\________!\\________!\\________!\\________!\\________!\\________!\n\\________!\\________!\\________!\\________!\\________!\\________!\\________!\\________!\n\n%                                                                              !\n%                                                                              !\n%PF1-Help     2-Set Defaults      7-Backward      8-Forward     CLEAR-Terminate\nENDDEF\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CCASXJCL": {"ttr": 3607, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01$\\x9f\\x01\\x01$\\x9f\\x174\\x00 \\x00 \\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-06T00:00:00", "modifydate": "2001-09-06T17:34:00", "lines": 32, "newlines": 32, "modlines": 0, "user": "EGHF3PY"}, "text": "//LIBRARY  EXEC  LIBACS,LIBRARY='?SRCE',\n//         ENV='?APID',PLATFORM='?ENVR'\n//STEPLIB DD DSN=DATACOM.?APID.?ENVR.DBLOAD,DISP=SHR\n//UPDATE.AUXINC1  DD  DSN=HLQ.?APID.SAT.LIBMAST,DISP=SHR\n//UPDATE.AUXINC2  DD  DSN=HLQ.?APID.PRD.LIBMAST,DISP=SHR\n//UPDATE.AUXINC3  DD  DSN=HLQ.?APID.SAT.LIBMAST,DISP=SHR\n//UPDATE.SYSIN    DD  *\n-SEL ?MEMB,?PSWD,NOLIST,EXEC,COPYDDOFF\n-PGMR ?PGMR\n-DESC ?DESC\n-REP ALL\n-END\n//MAPASM   EXEC  CICSMAPN,\n//           MEM='?LNAM',LIB='?MAPC',\n//           INDEX='CICS.APP'\n//DSECT.SYSPUNCH DD DSN=&&COPYBOOK,DISP=(,PASS),SPACE=(TRK,(5,5)),\n//           UNIT=SYSDA,DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//LINK     EXEC  CICSLNKM,COND=(5,LT),\n//           LOAD='?OLNK',PPTNAME='?LNAM',\n//           MODE='?AMOP',LOPT='?ALOP'\n//SAVEBOOK EXEC  LIBACS,LIBRARY='?SRCE',\n//           ENV='?APID',PLATFORM='?ENVR'\n//STEPLIB DD DSN=DATACOM.?APID.?ENVR.DBLOAD,DISP=SHR\n//UPDATE.SYSIN  DD  *\n-ADD ?LNAMD,PSWD=?PSWD,SEQ=/81,6,10,10/,NOEXEC,NOLIST\n-PGMR ?PGMR\n-DESC ?DESC\n-REP ALL\n      * LIB COB ?LNAMD\n-AUX COPYBOOK\n-END\n//COPYBOOK  DD  DSN=&&COPYBOOK,DISP=(OLD,DELETE)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CCAXXHLP": {"ttr": 3609, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01$\\x9f\\x01\\x01$\\x9f\\x176\\x00/\\x00/\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-06T00:00:00", "modifydate": "2001-09-06T17:36:00", "lines": 47, "newlines": 47, "modlines": 0, "user": "EGHF3PY"}, "text": " This screen is used to set up the JCL for an assembly of a BMS macro\n for a CICS map.  Fill in the screen fields as follows:\n\n Member: ________\n     The name of the map to be assembled.  You may enter either the\n     first 6 characters of the name (e.g. CMA123), or all 8 characters\n     including the version number. The{ACC}processor will determine the\n     correct version number.  If more than one map resides on the\n     source library with the same base name, a list of such maps will\n     be presented to the user from which to select.  For example, if\n     both CMA12301 and CMA12302 are on the library,{ACC}allows the user\n     to pick the one she wishes to assemble.\n\n Replace?: _ (y/n)\n     An answer of Yes tells{ACC}to replace the source module on Library\n     with a like named Roscoe member.  For example, if Roscoe member\n     CMA123 contains modifications you just made to map CMA123 and you\n     now wish to replace the version on Library before assembling it,\n     enter a \"Y\" in this field. {ACC}then inserts the contents of Roscoe\n     member CMA123 into the JCL to replace the current contents of\n     Library member CMA123vv.  If it is unclear which Roscoe member to\n     use, the user is presented with a selection list.  For example, if\n     you are assembling map CMA12302 and there are Roscoe members\n     CMA123 and CMA12302, the user will be given the choice of which\n     Roscoe member to use for replacement.\n\n from Roscoe Member: ________\n     The name of the Roscoe member to be used to replace the source\n     map program on Library when Replace? is \"Y\".\n\n\n All other options shown on this screen are taken from the values set\n up on the default options screen.  Any of these may be changed on this\n screen.  However, any such changes are only for this run; the defaults\n are not changed.\n\n\n PF2-Set Defaults:  make permanent changes to the default options.\n\n PF5-Skip:  skip the assembly of the currently named map.  This is\n     useful primarily when processing a list of maps and you wish to\n     bypass a map but continue processing the remainer of the list.\n\n PF8-Edit JCL:  Produce the JCL and put it in the Roscoe AWS without\n     submitting it.\n\n PF9-Submit:  Produce the JCL and submit it.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CCAXXPAN": {"ttr": 3611, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01$\\x9f\\x01\\x01$\\x9f\\x177\\x00 \\x00 \\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-06T00:00:00", "modifydate": "2001-09-06T17:37:00", "lines": 32, "newlines": 32, "modlines": 0, "user": "EGHF3PY"}, "text": "STARTDEF\nTAG ! S\nTAG @ SH\nTAG \\ UM  MEMBER REPLACE SRCE MAPC OLNK APID ENVR ACBK ALOP AMOP\nTAG \\ UM  JNAM ACCT ROOM UNAM MSGC REMT\nTAG $ SI  ROSLIT ROSMEM\nTAG % SH  MSG\n!                       @Your Compnay Name Here       !\n                              @CICS MAP ASSEMBLY!\n\n\n!        Member:\\________!     Replace?:\\_!(y/n)$  from Roscoe Member:$________!\n\n!    Source Lib:\\____________________________________!\n!  Map Copy Lib:\\____________________________________!\n!      Load Lib:\\____________________________________!\n!                                Application ID:\\____!        Environment:\\____!\n\n!   Options:\n!     Assembler: (preset)       Map CopyBook in CopyLib or Source Lib?:\\ !(C/S)!\n!          Link:\\____________________________________! Mode:\\__________________!\n\n!      Job Name:\\________!             Account:\\____!        Room/Bin:\\________!\n!     User Name:\\___________!         Msgclass:\\_!             Remote:\\________!\n\n\n\n%                                                                              !\n%                                                                              !\n%                                                                              !\n% PF1-Help   2-Set Defaults   5-Skip   8-Edit JCL   9-Submit   CLEAR-Terminate\nENDDEF\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CCB": {"ttr": 3613, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01$\\x9f\\x01\\x01$\\x9f\\x177\\x00\\x03\\x00\\x03\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-06T00:00:00", "modifydate": "2001-09-06T17:37:00", "lines": 3, "newlines": 3, "modlines": 0, "user": "EGHF3PY"}, "text": "<<CCB>> : A1=MEMBER  <A2=REP/SUB>  <A3=REP/SUB>\n  EXEC PFX.ACC 'B' A1 A2 A3 A4 A5 A6 A7\n  RETURN\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CCBDIJCL": {"ttr": 3615, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01$\\x9f\\x01\\x01$\\x9f\\x178\\x00\\x16\\x00\\x16\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-06T00:00:00", "modifydate": "2001-09-06T17:38:00", "lines": 22, "newlines": 22, "modlines": 0, "user": "EGHF3PY"}, "text": "//  EXEC  COB3INT,USERID='?USERID',MODULE=?LNAM\n//UPDATE.STEPLIB DD DSN=DATACOM.?APID.?ENVR.DBLOAD,DISP=SHR\n//UPDATE.MASTER   DD  DSN=?SRCE,DISP=SHR\n//UPDATE.AUXINC1  DD  DSN=HLQ.?APID.SAT.LIBMAST,DISP=SHR\n//UPDATE.AUXINC2  DD  DSN=HLQ.?APID.PRD.LIBMAST,DISP=SHR\n//UPDATE.AUXINC3  DD  DSN=HLQ.PRD.LIBMAST,DISP=SHR\n//UPDATE.AUXINC4  DD  DSN=HLQ.?APID.SAT.LIBMAST,DISP=SHR\n//UPDATE.SYSIN    DD  *\n-SEL ?MEMB,?PSWD,NOLIST,EXEC,COPYDD,VAR\n-PGMR ?PGMR\n-DESC ?DESC\n-REP ALL\n-END\n//LKED.SYSLIB DD DSN=SYS1.SCEELKED,DISP=SHR\n//            DD DSN=?BLNK,DISP=SHR\n//            DD DSN=SYS2.LINKLIB,DISP=SHR\n//            DD DSN=HLQ.DVL.BATLOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=?BLNK,DISP=SHR\n//LKED.SYSIN DD *\n  INCLUDE FTBLOBJ(?URTN)\n  ENTRY BEGIN\n  NAME ?LNAM(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CCBDXJCL": {"ttr": 3617, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01$\\x9f\\x01\\x01$\\x9f\\x17@\\x00\\x18\\x00\\x18\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-06T00:00:00", "modifydate": "2001-09-06T17:40:00", "lines": 24, "newlines": 24, "modlines": 0, "user": "EGHF3PY"}, "text": "//  EXEC  COB3CLE,LIBRARY='?SRCE',\n//        LVL=?ENVR,DIV=?APID,\n//        OPT='DATA(?DLEN),?BCOP',\n//        LOPT='?BMOP,?BLOP'\n//STEPLIB DD DSN=DATACOM.?APID.?ENVR.DBLOAD,DISP=SHR\n//UPDATE.AUXINC1  DD  DSN=HLQ.?APID.SAT.LIBMAST,DISP=SHR\n//UPDATE.AUXINC2  DD  DSN=HLQ.?APID.PRD.LIBMAST,DISP=SHR\n//UPDATE.AUXINC3  DD  DSN=HLQ.PRD.LIBMAST,DISP=SHR\n//UPDATE.SYSIN    DD  *\n-SEL ?MEMB,?PSWD,NOLIST,EXEC,COPYDD,VAR\n-PGMR ?PGMR\n-DESC ?DESC\n-REP ALL\n-END\n//LKED.SYSLIB DD DSN=SYS1.SCEELKED,DISP=SHR\n//            DD DSN=SYS1.SIGYCOMP,DISP=SHR\n//            DD DSN=?BLNK,DISP=SHR\n//            DD DSN=SYS2.LINKLIB,DISP=SHR\n//            DD DSN=HLQ.DVL.BATLOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=?BLNK,DISP=SHR\n//LKED.SYSIN DD *\n  INCLUDE FTBLOBJ(?URTN)\n  ENTRY BEGIN\n  NAME ?LNAM(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CCBL": {"ttr": 3619, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x01$\\x9f\\x01\\x01$\\x9f\\x18\\x06\\x00\\x03\\x00\\x03\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2001-09-06T00:00:00", "modifydate": "2001-09-06T18:06:00", "lines": 3, "newlines": 3, "modlines": 0, "user": "EGHF3PY"}, "text": "<<CCBL>> : INVOKE CC RPF FOR BATCH COBOL LIST PROCESSOR\n  EXEC PFX.ACC 'B' 'L' A1 A2 A3 A4 A5 A6\n  RETURN\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CCBLXPAN": {"ttr": 3841, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01$\\x9f\\x01\\x01$\\x9f\\x18\\x07\\x00\\x1f\\x00\\x1f\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-06T00:00:00", "modifydate": "2001-09-06T18:07:00", "lines": 31, "newlines": 31, "modlines": 0, "user": "EGHF3PY"}, "text": "STARTDEF\nTAG ! S\nTAG @ SH\nTAG $ SH  TITLE\nTAG \\ UM  LISTNAME MEMB\nTAG % SH  MSG\n!                       @Your Company Name Here       !\n                    $    BATCH COMPILE LIST PROCESSOR     !\n\n\n                             !List Name:\\________!\n\n\\________!\\________!\\________!\\________!\\________!\\________!\\________!\\________!\n\\________!\\________!\\________!\\________!\\________!\\________!\\________!\\________!\n\\________!\\________!\\________!\\________!\\________!\\________!\\________!\\________!\n\\________!\\________!\\________!\\________!\\________!\\________!\\________!\\________!\n\\________!\\________!\\________!\\________!\\________!\\________!\\________!\\________!\n\\________!\\________!\\________!\\________!\\________!\\________!\\________!\\________!\n\\________!\\________!\\________!\\________!\\________!\\________!\\________!\\________!\n\\________!\\________!\\________!\\________!\\________!\\________!\\________!\\________!\n\\________!\\________!\\________!\\________!\\________!\\________!\\________!\\________!\n\\________!\\________!\\________!\\________!\\________!\\________!\\________!\\________!\n\\________!\\________!\\________!\\________!\\________!\\________!\\________!\\________!\n\\________!\\________!\\________!\\________!\\________!\\________!\\________!\\________!\n\\________!\\________!\\________!\\________!\\________!\\________!\\________!\\________!\n\\________!\\________!\\________!\\________!\\________!\\________!\\________!\\________!\n\n%                                                                              !\n%                                                                              !\n%PF1-Help     2-Set Defaults      7-Backward      8-Forward     CLEAR-Terminate\nENDDEF\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CCBXIJCL": {"ttr": 3843, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01$\\x9f\\x01\\x01$\\x9f\\x18\\x08\\x00\\x14\\x00\\x14\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-06T00:00:00", "modifydate": "2001-09-06T18:08:00", "lines": 20, "newlines": 20, "modlines": 0, "user": "EGHF3PY"}, "text": "//  EXEC  COB3INT,USERID='?USERID',MODULE=?LNAM\n//UPDATE.STEPLIB DD DSN=DATACOM.?APID.?ENVR.DBLOAD,DISP=SHR\n//UPDATE.MASTER   DD  DSN=?SRCE,DISP=SHR\n//UPDATE.AUXINC1  DD  DSN=HLQ.?APID.SAT.LIBMAST,DISP=SHR\n//UPDATE.AUXINC2  DD  DSN=HLQ.?APID.PRD.LIBMAST,DISP=SHR\n//UPDATE.AUXINC3  DD  DSN=HLQ.PRD.LIBMAST,DISP=SHR\n//UPDATE.AUXINC4  DD  DSN=HLQ.?APID.SAT.LIBMAST,DISP=SHR\n//UPDATE.SYSIN    DD  *\n-SEL ?MEMB,?PSWD,NOLIST,EXEC,COPYDD,VAR\n-PGMR ?PGMR\n-DESC ?DESC\n-REP ALL\n-END\n//LKED.SYSLIB DD DSN=SYS1.SCEELKED,DISP=SHR\n//            DD DSN=?BLNK,DISP=SHR\n//            DD DSN=SYS2.LINKLIB,DISP=SHR\n//            DD DSN=HLQ.DVL.BATLOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=?BLNK,DISP=SHR\n//LKED.SYSIN DD *\n  NAME ?LNAM(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CCBXXHLP": {"ttr": 3845, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01$\\x9f\\x01\\x01$\\x9f\\x18\\x10\\x00>\\x00>\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-06T00:00:00", "modifydate": "2001-09-06T18:10:00", "lines": 62, "newlines": 62, "modlines": 0, "user": "EGHF3PY"}, "text": " This screen is used to set up the JCL for a batch COBOL compile.  Fill\n in the screen fields as follows:\n\n Member: ________\n     The name of the program to be compiled.  You may enter either the\n     first 6 characters of the name (e.g. BATC01), or all 8 characters\n     including the version number.  The{ACC}processor will determine the\n     correct version number.  If more than one program resides on the\n     source library with the same base name, a list of such programs\n     will be presented to the user from which to select.  For example,\n     if both BATC0101 and BATC0102 are on the library,{ACC}allows the\n     user to pick the one she wishes to compile.\n\n Replace?: _ (y/n)\n     An answer of Yes tells{ACC}to replace the source module on Library\n     with a like named Roscoe member.  For example, if Roscoe member\n     BATC01 contains modifications you just made to program BATC01 and\n     you now wish to replace the version on Library before compiling\n     it, enter a \"Y\" in this field. {ACC}then inserts the contents of\n     Roscoe member BATC01 into the JCL to replace the current contents\n     of Library member BATC01vv.  If it is unclear which Roscoe member\n     to use, the user is presented with a selection list.  For example,\n     if you are compiling program BATC0102 and there are Roscoe members\n     BATC01 and BATC0102, the user will be given the choice of which\n     Roscoe member to use for replacement.\n\n from Roscoe Member: ________\n     The name of the Roscoe member to be used to replace the source\n     program on Library.  This appears only when Replace? is \"Y\".\n\n URT: ________\n     The name of the URT to use when compiling a batch program which\n     uses DataCom (i.e., has calls to DBNTRY).  The{ACC}RPF uses the\n     program name supplied in Member to search the URT library to see\n     if a URT exists for this program.  If it does, then the URT name\n     is entered and the program is assumed to be a DataCom program.\n     If no URT is found, the program is assumed to contain no DBNTRY\n     calls.  If the assumption is incorrect, then you may change the\n     \"Y\" or \"N\" in DataCom to its opposite value.\n\n DataCom?: _ (y/n)\n     Use this field to indicate whether or not the program contains\n     calls to DBNTRY.\n\n\n All other options shown on this screen are taken from the values set\n up on the default options screen.  Any of these may be changed on this\n screen.  However, any such changes are only for this run; the defaults\n are not changed.\n\n\n PF2-Set Defaults:  make permanent changes to the default options.\n\n PF5-Skip:  skip the compile of the currently named program.  This is\n     useful primarily when processing a list of programs and you wish\n     to bypass a program while continuing processing the remainer of\n     the list.\n\n PF8-Edit JCL:  Produce the JCL and put it in the Roscoe AWS without\n     submitting it.\n\n PF9-Submit:  Produce the JCL and submit it.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CCBXXJCL": {"ttr": 3847, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01$\\x9f\\x01\\x01$\\x9f\\x18\\x11\\x00\\x16\\x00\\x16\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-06T00:00:00", "modifydate": "2001-09-06T18:11:00", "lines": 22, "newlines": 22, "modlines": 0, "user": "EGHF3PY"}, "text": "//  EXEC  COB3CLE,LIBRARY='?SRCE',\n//        LVL=?ENVR,DIV=?APID,\n//        OPT='DATA(?DLEN),?BCOP',\n//        LOPT='?BMOP,?BLOP'\n//STEPLIB DD DSN=DATACOM.?APID.?ENVR.DBLOAD,DISP=SHR\n//UPDATE.AUXINC1  DD  DSN=HLQ.?APID.SAT.LIBMAST,DISP=SHR\n//UPDATE.AUXINC2  DD  DSN=HLQ.?APID.PRD.LIBMAST,DISP=SHR\n//UPDATE.AUXINC3  DD  DSN=HLQ.PRD.LIBMAST,DISP=SHR\n//UPDATE.SYSIN    DD  *\n-SEL ?MEMB,?PSWD,NOLIST,EXEC,COPYDD,VAR\n-PGMR ?PGMR\n-DESC ?DESC\n-REP ALL\n-END\n//LKED.SYSLIB DD DSN=SYS1.SCEELKED,DISP=SHR\n//            DD DSN=SYS1.SIGYCOMP,DISP=SHR\n//            DD DSN=?BLNK,DISP=SHR\n//            DD DSN=SYS2.LINKLIB,DISP=SHR\n//            DD DSN=HLQ.DVL.BATLOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=?BLNK,DISP=SHR\n//LKED.SYSIN DD *\n  NAME ?LNAM(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CCBXXPAN": {"ttr": 3849, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01$\\x9f\\x01\\x01$\\x9f\\x18\\x11\\x00\\x1f\\x00\\x1f\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-06T00:00:00", "modifydate": "2001-09-06T18:11:00", "lines": 31, "newlines": 31, "modlines": 0, "user": "EGHF3PY"}, "text": "STARTDEF\nTAG ! S\nTAG @ SH\nTAG \\ UM  MEMBER REPLACE URT DATACOM SRCE URTL BLNK BTST APID ENVR\nTAG \\ UM  BCOP BLOP BMOP JNAM ACCT ROOM UNAM MSGC REMT\nTAG $ SI  ROSLIT ROSMEM\nTAG % SH  MSG\n!                       @Your Company Name Here       !\n                             @BATCH COBOL COMPILE!\n\n\n!        Member:\\________!     Replace?:\\_!(y/n)$  from Roscoe member:$________!\n!           URT:\\________!     DataCom?:\\_!(y/n)!\n\n!    Source Lib:\\____________________________________!\n!   URT LoadLib:\\____________________________________!\n! Batch LoadLib:\\____________________________________!\n!    Intertest?:\\_!(y/n) !       Application ID:\\____!        Environment:\\____!\n\n!   Options:\n!       Compile:\\______________________________________________________________!\n!          Link:\\____________________________________! Mode:\\__________________!\n\n!      Job Name:\\________!             Account:\\____!        Room/Bin:\\________!\n!     User Name:\\___________!         Msgclass:\\_!             Remote:\\________!\n\n%                                                                              !\n%                                                                              !\n%                                                                              !\n% PF1-Help   2-Set Defaults   5-Skip   8-Edit JCL   9-Submit   CLEAR-Terminate\nENDDEF\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CCC": {"ttr": 3851, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%?\\x01\\x01%?\\x13\\x01\\x00\\x03\\x00\\x03\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-10T00:00:00", "modifydate": "2001-09-10T13:01:00", "lines": 3, "newlines": 3, "modlines": 0, "user": "EGHF3PY"}, "text": "<<CCC>> : A1=MEMBER  <A2=REP/SUB>  <A3=REP/SUB>\n  TRANSFER PFX.ACC 'C' A1 A2 A3 A4 A5 A6 A7\n  RETURN\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CCCL": {"ttr": 3853, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%?\\x01\\x01%?\\x13\\x02\\x00\\x03\\x00\\x03\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-10T00:00:00", "modifydate": "2001-09-10T13:02:00", "lines": 3, "newlines": 3, "modlines": 0, "user": "EGHF3PY"}, "text": "<<CCCL>> : INVOKE CC RPF FOR CICS COBOL LIST PROCESSOR\n  EXEC PFX.ACC 'C' 'L' A1 A2 A3 A4 A5 A6\n  RETURN\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CCCLXPAN": {"ttr": 3855, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%?\\x01\\x01%?\\x13\\x03\\x00\\x1f\\x00\\x1f\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-10T00:00:00", "modifydate": "2001-09-10T13:03:00", "lines": 31, "newlines": 31, "modlines": 0, "user": "EGHF3PY"}, "text": "STARTDEF\nTAG ! S\nTAG @ SH\nTAG $ SH  TITLE\nTAG \\ UM  LISTNAME MEMB\nTAG % SH  MSG\n!                       @Your Company Name Here       !\n                    $     CICS COMPILE LIST PROCESSOR     !\n\n\n                             !List Name:\\________!\n\n\\________!\\________!\\________!\\________!\\________!\\________!\\________!\\________!\n\\________!\\________!\\________!\\________!\\________!\\________!\\________!\\________!\n\\________!\\________!\\________!\\________!\\________!\\________!\\________!\\________!\n\\________!\\________!\\________!\\________!\\________!\\________!\\________!\\________!\n\\________!\\________!\\________!\\________!\\________!\\________!\\________!\\________!\n\\________!\\________!\\________!\\________!\\________!\\________!\\________!\\________!\n\\________!\\________!\\________!\\________!\\________!\\________!\\________!\\________!\n\\________!\\________!\\________!\\________!\\________!\\________!\\________!\\________!\n\\________!\\________!\\________!\\________!\\________!\\________!\\________!\\________!\n\\________!\\________!\\________!\\________!\\________!\\________!\\________!\\________!\n\\________!\\________!\\________!\\________!\\________!\\________!\\________!\\________!\n\\________!\\________!\\________!\\________!\\________!\\________!\\________!\\________!\n\\________!\\________!\\________!\\________!\\________!\\________!\\________!\\________!\n\\________!\\________!\\________!\\________!\\________!\\________!\\________!\\________!\n\n%                                                                              !\n%                                                                              !\n%PF1-Help     2-Set Defaults      7-Backward      8-Forward     CLEAR-Terminate\nENDDEF\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CCCXIJCL": {"ttr": 3857, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%?\\x01\\x01%?\\x13\\x05\\x00&\\x00&\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-10T00:00:00", "modifydate": "2001-09-10T13:05:00", "lines": 38, "newlines": 38, "modlines": 0, "user": "EGHF3PY"}, "text": "//LIBRARY  EXEC  LIBACS,LIBRARY='?SRCE',\n//         ENV='?APID',PLATFORM='?ENVR'\n//STEPLIB DD DSN=DATACOM.?APID.?ENVR.DBLOAD,DISP=SHR\n//UPDATE.AUXINC1  DD  DSN=HLQ.?APID.SAT.LIBMAST,DISP=SHR\n//UPDATE.AUXINC2  DD  DSN=HLQ.?APID.PRD.LIBMAST,DISP=SHR\n//UPDATE.AUXINC3  DD  DSN=HLQ.PRD.LIBMAST,DISP=SHR\n//UPDATE.SYSIN  DD  *\n-SEL ?MEMB,?PSWD,NOLIST,EXEC,COPYDD,VAR\n-PGMR ?PGMR\n-DESC ?DESC\n-REP ALL\n-END\n//COBOL  EXEC  CICSCOBI,AAFX='?APIDDY2AA',\n//         ULIB2='CICS.EDI.MONITOR.APPLIB',\n//         ULIB3='CICS.EDI.MONITOR.SOURCE',\n//         ULIB6='HLQ.DVL.ONLMAP',\n//         INTVER='V54.',\n//         INDEX='CICS.APP',\n//         PLATFORM='?ENVR',ENV='',\n//         CUTPRT=',CUTPRINT=MAP',PLIST='NOLIST',\n//         PPTNAME='?LNAM',ULIB='?MAPC',\n//         OPT='DATA(?DLEN),?CCOP'\n//GENPARM.STEPLIB DD DSN=INTRCICS.ALIAS.DVL.ACS.LOADLIB,DISP=SHR\n//LISTER.STEPLIB DD DSN=INTRCICS.ALIAS.DVL.ACS.LOADLIB,DISP=SHR\n//LINK   EXEC  CICSLNKC,COND=(5,LT,COBOL.COMP),\n//         INDEX='CICS.APP',\n//         PLATFORM='?ENVR',PPTNAME='?LNAM',\n//         MODE='?CMOP',LOPT='?CLOP'\n//LKED.SYSLIB  DD\n//             DD DSN=HLQ.DVL.ONLLOAD,DISP=SHR\n//             DD\n//             DD\n//             DD DSN=HLQ.DVL.BATLOAD,DISP=SHR\n//             DD DSN=HLQ.DVL.BATLOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=?OLNK,DISP=SHR\n//LKED.SYSIN DD *\n  INCLUDE DBLOAD(DBCSVPR)\n  NAME ?LNAM(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CCCXXHLP": {"ttr": 3859, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%?\\x01\\x01%?\\x13\\x08\\x000\\x000\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-10T00:00:00", "modifydate": "2001-09-10T13:08:00", "lines": 48, "newlines": 48, "modlines": 0, "user": "EGHF3PY"}, "text": " This screen is used to set up the JCL for a CICS COBOL compile.  Fill\n in the screen fields as follows:\n\n Member: ________\n     The name of the program to be compiled.  You may enter either the\n     first 6 characters of the name (e.g. CPP123), or all 8 characters\n     including the version number.  The{ACC}processor will determine the\n     correct version number.  If more than one program resides on the\n     source library with the same base name, a list of such programs\n     will be presented to the user from which to select.  For example,\n     if both CPP12301 and CPP12302 are on the library,{ACC}allows the\n     user to pick the one she wishes to compile.\n\n Replace?: _ (y/n)\n     An answer of Yes tells{ACC}to replace the source module on Library\n     with a like named Roscoe member.  For example, if Roscoe member\n     CPP123 contains modifications you just made to program CPP123 and\n     you now wish to replace the version on Library before compiling\n     it, enter a \"Y\" in this field. {ACC}then inserts the contents of\n     Roscoe member CPP123 into the JCL to replace the current contents\n     of Library member CPP123vv.  If it is unclear which Roscoe member\n     to use, the user is presented with a selection list.  For example,\n     if you are compiling program CPP12302 and there are Roscoe members\n     CPP123 and CPP12302, the user will be given the choice of which\n     Roscoe member to use for replacement.\n\n from Roscoe Member: ________\n     The name of the Roscoe member to be used to replace the source\n     program on Library when Replace? is \"Y\".\n\n\n All other options shown on this screen are taken from the values set\n up on the default options screen.  Any of these may be changed on this\n screen.  However, any such changes are only for this run; the defaults\n are not changed.\n\n\n PF2-Set Defaults:  make permanent changes to the default options.\n\n PF5-Skip:  skip the compile of the currently named program.  This is\n     useful primarily when processing a list of programs and you wish\n     to bypass a program while continuing processing the remainer of\n     the list.\n\n PF8-Edit JCL:  Produce the JCL and put it in the Roscoe AWS without\n     submitting it.\n\n PF9-Submit:  Produce the JCL and submit it.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CCCXXJCL": {"ttr": 3861, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%?\\x01\\x01%?\\x13\\x06\\x00\\x1e\\x00\\x1e\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-10T00:00:00", "modifydate": "2001-09-10T13:06:00", "lines": 30, "newlines": 30, "modlines": 0, "user": "EGHF3PY"}, "text": "//LIBRARY  EXEC  LIBACS,LIBRARY='?SRCE',\n//         ENV='?APID',PLATFORM='?ENVR'\n//STEPLIB DD DSN=DATACOM.?APID.?ENVR.DBLOAD,DISP=SHR\n//UPDATE.AUXINC1  DD  DSN=HLQ.?APID.SAT.LIBMAST,DISP=SHR\n//UPDATE.AUXINC2  DD  DSN=HLQ.?APID.PRD.LIBMAST,DISP=SHR\n//UPDATE.AUXINC3  DD  DSN=HLQ.PRD.LIBMAST,DISP=SHR\n//UPDATE.SYSIN  DD  *\n-SEL ?MEMB,?PSWD,NOLIST,EXEC,COPYDD,VAR\n-PGMR ?PGMR\n-DESC ?DESC\n-REP ALL\n-END\n//COBOL  EXEC  CICSCOB,AAFX='?APIDDY2AA',\n//         INDEX='CICS.APP',\n//         PLIST='NOLIST',ULIB='?MAPC',\n//         OPT='DATA(?DLEN),?CCOP'\n//LINK   EXEC  CICSLNKC,COND=(5,LT,COBOL.COMP),\n//         INDEX='CICS.APP',\n//         PLATFORM='?ENVR',PPTNAME='?LNAM',\n//         MODE='?CMOP',LOPT='?CLOP'\n//LKED.SYSLIB  DD\n//             DD DSN=HLQ.DVL.ONLLOAD,DISP=SHR\n//             DD\n//             DD\n//             DD DSN=HLQ.DVL.BATLOAD,DISP=SHR\n//             DD DSN=HLQ.DVL.BATLOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=?OLNK,DISP=SHR\n//LKED.SYSIN DD *\n  INCLUDE DBLOAD(DBCSVPR)\n  NAME ?LNAM(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CCCXXPAN": {"ttr": 3863, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%?\\x01\\x01%?\\x13\\t\\x00 \\x00 \\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-10T00:00:00", "modifydate": "2001-09-10T13:09:00", "lines": 32, "newlines": 32, "modlines": 0, "user": "EGHF3PY"}, "text": "STARTDEF\nTAG ! S\nTAG @ SH\nTAG \\ UM  MEMBER REPLACE SRCE MAPC OLNK ITST APID ENVR CCOP CLOP CMOP\nTAG \\ UM  JNAM ACCT ROOM UNAM MSGC REMT\nTAG $ SI  ROSLIT ROSMEM\nTAG % SH  MSG\n!                       @Your Company Name Here       !\n                             @CICS COBOL COMPILE!\n\n\n!        Member:\\________!     Replace?:\\_!(y/n)$  from Roscoe Member:$________!\n\n!    Source Lib:\\____________________________________!\n!  Map Copy Lib:\\____________________________________!\n!      Load Lib:\\____________________________________!\n!    Intertest?:\\_!(y/n) !       Application ID:\\____!        Environment:\\____!\n\n!   Options:\n!       Compile:\\______________________________________________________________!\n!          Link:\\____________________________________! Mode:\\__________________!\n\n!      Job Name:\\________!             Account:\\____!        Room/Bin:\\________!\n!     User Name:\\___________!         Msgclass:\\_!             Remote:\\________!\n\n\n\n%                                                                              !\n%                                                                              !\n%                                                                              !\n% PF1-Help   2-Set Defaults   5-Skip   8-Edit JCL   9-Submit   CLEAR-Terminate\nENDDEF\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CCDEFGET": {"ttr": 3865, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%?\\x01\\x01%?\\x13\\x12\\x00\\x13\\x00\\x13\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-10T00:00:00", "modifydate": "2001-09-10T13:12:00", "lines": 19, "newlines": 19, "modlines": 0, "user": "EGHF3PY"}, "text": "<<CCDEFGET>> : A1=PARM NAME\n  PUSH\n  DECLARE CARD PTR V<8>\n  ATTACH AWS CCDEFS\n  SET BOUNDS AWS 1 4\n  LOOP PTR FROM 1 TO 8 BY 1\n    UNTIL A<PTR> EQ ''\n      TRAP\n     %FIND /%A<PTR>%/\n      IF TC EQ 0\n         %READ AWS %SEQ% CARD\n          LET V<PTR> = TRIM(SUBSTR(CARD 8))\n      ENDIF\n  ENDLOOP\n  TRAP OFF\n  SET BOUNDS AWS 1 72\n  DETACH\n  POP\n  RETURN V<1> V<2> V<3> V<4> V<5> V<6> V<7> V<8>\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CCDEFHLP": {"ttr": 3867, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x01\\x01%?\\x01\\x01&/\\x15\\x03\\x00k\\x00k\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2001-09-10T00:00:00", "modifydate": "2001-09-19T15:03:00", "lines": 107, "newlines": 107, "modlines": 0, "user": "EGHF3PY"}, "text": " This screen allows the user to change the default parameters used to\n control{ACC.} The parameters have the following meanings:\n\n Application ID: XXX_ (XXX, YYY, ...)\n     The application group for whom you work.  For example, XXX is the\n     Administrative Systems group.\n\n Environment: DVL_\n     The environment level in which you are working, DVL, SAT, PROD.\n     Currently only DVL is available.\n\n Source Lib: HLQ.XXX.DVL.LIBMAST________________\n     The library where your source code will reside.  Blank out the\n     field to obtain the default.\n\n Look for SQL?: N (Y/N)\n     This parameter directs{ACC}to look for SQL code in your programs\n     and to insert the SQL translator in your JCL when necessary.\n     NOT YET IMPLEMENTED.\n\n Map Copy Lib: HLQ.XXX.DVL.ONLMAP_________________\n     The library into which to put the map copybook which results from\n     the assembly of a BMS map.  Blank to obtain default.\n\n URT Source Lib: HLQ.XXX.DVL.URTMAST________________\n     The library in which to look to obtain the source code for batch\n     User Requirements Tables.  Blank to obtain default.\n\n Online LoadLib: HLQ.XXX.DVL.ONLLOAD________________\n     The library into which to put the load modules of online programs.\n     Blank to obtain default.\n\n w/ Intertest?: Y (Y/N)\n     This parameter tells{ACC}whether or not to include the JCL needed\n     for Intertest.  Intertest does not in any way alter the resultant\n     load module, but simply builds the tables necessary to debug your\n     online program.\n\n Batch LoadLib: HLQ.XXX.DVL.BATLOAD________________\n     The library into which to place the load modules for your batch\n     programs.  Blank to obtain default.\n\n w/ Intertest?: N (Y/N)\n     Tells{ACC}whether to include JCL to provide for the batch version\n     of Intertest.  NOT YET AVAILABLE.\n\n URT LoadLib: HLQ.XXX.DVL.BATLOAD________________\n     The library in which to find the load modules of the user's URTs.\n     Blank to obtain default.\n\n Assembler Options\n     The options to use in assembling BMS macros for CICS maps.  These\n     are preset to the necessary values.\n\n Map CopyBook in CopyLib or Source Lib?: S (C/S)\n     The copybook produced by a BMS map assembly can be stored either\n     in the \"Map Copy Lib\" named above, or as an include module in the\n     \"Source Lib\" named above.\n\n Assembler Link Options:\n     The options to use in the link step of a map assembly.  Defaults\n     are LIST,LET,XREF.\n\n Assembler Mode Options: AMODE=31,RMODE=ANY\n     An addressing mode of 31 bits and a residence mode of ANY should\n     always be used except under extraordinary conditions.\n\n Batch Compile Options: OPT,DYNAM\n     The COBOL compile options to use for batch compiles.\n\n Batch Link Options.\n     The link options to use for batch COBOL program compiles.\n\n Batch Mode Options: AMODE=31,RMODE=ANY\n     An addressing mode of 31 bits and a residence mode of ANY should\n     always be used except under extraordinary conditions.\n\n CICS Compile Options: OPT\n     The COBOL compile options to use for CICS COBOL compiles.\n\n CICS Link Options.\n     The link options to use for CICS COBOL program compiles.\n\n CICS Mode Options: AMODE=31,RMODE=ANY\n     An addressing mode of 31 bits and a residence mode of ANY should\n     always be used except under extraordinary conditions.\n\n Job Name: DPFX____\n     The first 3 to 5 characters of your job name.  The default is a\n     \"D\" for development followed by your ROSCOE prefix.  The remainder\n     of the job name is taken from the program being compiled.\n\n Account: ____\n     The account code to be charged for the work you do.\n\n Room/Bin: ________\n     The bin number into which to place the printed output from your\n     compiles, or the room number to which it should be delivered.\n\n User Name: ___________\n     The information to appear in the user name area of the JOB card.\n\n Msgclass: S\n     The MSGCLASS parameter for the JOB card.\n\n Remote: ________\n     The remote printer ID at which to print your output, or LOCAL.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CCDEFPAN": {"ttr": 4098, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%?\\x01\\x01%?\\x13\\x16\\x00 \\x00 \\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-10T00:00:00", "modifydate": "2001-09-10T13:16:00", "lines": 32, "newlines": 32, "modlines": 0, "user": "EGHF3PY"}, "text": "STARTDEF\nTAG ! S\nTAG @ SH\nTAG \\ UM  APID ENVR SRCE SQLS MAPC URTS OLNK ITST BLNK BTST URTL\nTAG \\ UM  ACBK ALOP AMOP BCOP BLOP BMOP CCOP CLOP CMOP\nTAG \\ UM  JNAM ACCT ROOM UNAM MSGC REMT\nTAG % SH  MSG\n!                       @Your Company Name Here       !\n             @SET DEFAULTS FOR PROGRAM COMPILES AND MAP ASSEMBLIES!\n\n!Application ID:\\    !(XXX, YYY, ...)                     Environment:\\    !\n!    Source Lib:\\                                    !   Look for SQL?:\\ !(Y/N)!\n!  Map Copy Lib:\\                                    !\n!URT Source Lib:\\                                    !\n!Online LoadLib:\\                                    !   w/ Intertest?:\\ !(Y/N)!\n! Batch LoadLib:\\                                    !   w/ Intertest?:\\ !(Y/N)!\n!   URT LoadLib:\\                                    !\n!Options:\n!     Assembler: (preset)                        Map CopyBook in CopyLib:\\ !(C)!\n!          Link:\\                                    ! Mode:\\                  !\n! Batch Compile:\\                                                              !\n!          Link:\\                                    ! Mode:\\                  !\n!  CICS Compile:\\                                                              !\n!          Link:\\                                    ! Mode:\\                  !\n\n!      Job Name:\\        !             Account:\\    !        Room/Bin:\\        !\n!     User Name:\\           !         Msgclass:\\ !             Remote:\\        !\n\n%                                                                              !\n%                                                                              !\n%PF1-Help             PF6-Save Above Entries             CLEAR-Discard Changes!\nENDDEF\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CCDEFSET": {"ttr": 4100, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%?\\x01\\x01%?\\x13 \\x01\\x80\\x01\\x80\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-10T00:00:00", "modifydate": "2001-09-10T13:20:00", "lines": 384, "newlines": 384, "modlines": 0, "user": "EGHF3PY"}, "text": "<<CCDEFSET>> : A1=<NON BLANK = NO SCREEN DISPLAY IF EDITS OK>\n  PUSH\n  EXEC PFX.CCSESSET\n  DECLARE NVAR NAWS PTR CARD CURPOS NMSG APID ENVR DONE STAT\n  DECLARE VARS<26> DESC<26> MSGS<26> DEFS<26>\n  LET NVAR = 26                     : NUMBER OF VARIABLE NAMES IN PANEL\n  LET VARS<01> = 'APID'\n  LET VARS<02> = 'ENVR'\n  LET VARS<03> = 'SRCE'\n  LET VARS<04> = 'SQLS'\n  LET VARS<05> = 'MAPC'\n  LET VARS<06> = 'URTS'\n  LET VARS<07> = 'OLNK'\n  LET VARS<08> = 'ITST'\n  LET VARS<09> = 'BLNK'\n  LET VARS<10> = 'BTST'\n  LET VARS<11> = 'URTL'\n  LET VARS<12> = 'ACBK'\n  LET VARS<13> = 'ALOP'\n  LET VARS<14> = 'AMOP'\n  LET VARS<15> = 'BCOP'\n  LET VARS<16> = 'BLOP'\n  LET VARS<17> = 'BMOP'\n  LET VARS<18> = 'CCOP'\n  LET VARS<19> = 'CLOP'\n  LET VARS<20> = 'CMOP'\n  LET VARS<21> = 'JNAM'\n  LET VARS<22> = 'ACCT'\n  LET VARS<23> = 'ROOM'\n  LET VARS<24> = 'UNAM'\n  LET VARS<25> = 'MSGC'\n  LET VARS<26> = 'REMT'\n  TRAP\n  SELECT AWS CCDEFS\n  TRAP OFF\n  IF TC NE 0\n      CREATE AWS CCDEFS NONRECOVERABLE RPF EXPLICIT\n  ENDIF\n  FETCH PFX.$$CHDEFS\n  DELETES 1 6 /      /\n  RENUMBER 1 1\n  LOOP PTR FROM 1 TO NVAR BY 1\n      LET CARD = VARS<PTR> | ' ='\n      TRAP\n     %FIND '%CARD%' 1 %AWSCOUNT%\n      IF TC EQ 0\n         %READ AWS %SEQ% CARD\n          LET DEFS<PTR> = TRIM(SUBSTR(CARD 8))\n      ENDIF\n  ENDLOOP\n  TRAP\n  FETCH $$CCDEFS\n  TRAP OFF\n  RENUMBER 1 1\n  LET NAWS = AWSCOUNT\n  SET BOUNDS AWS 1 6\n  LOOP PTR FROM 1 TO NVAR BY 1\n      LET CARD = VARS<PTR> | ' ='\n      TRAP\n     %FIND '%CARD%' 1 %NAWS%\n      IF TC EQ 0\n         %READ AWS %SEQ% CARD\n          LET DESC<PTR> = TRIM(SUBSTR(CARD 8))\n      ELSE\n          LET NAWS = NAWS + 1\n          %%NAWS% %VARS<PTR>%\n      ENDIF\n  ENDLOOP\n  TRAP OFF\n  SET BOUNDS AWS 1 72\n  DO <<EDITS>>\n  LET DONE = 'N'\n  IF NMSG EQ 0\n      LET STAT = 'OK'\n      IF A1 NE ''\n          LET DONE = 'Y'\n      ENDIF\n  ELSE\n      LET STAT = 'NOT OK'\n  ENDIF\n  LOOP\n    UNTIL DONE EQ 'Y'\n      PANEL ACTIVATE PFX.CCDEFPAN\n      DO <<PUTPAN>>\n      IF CURPOS EQ ''\n          LET CURPOS = 'APID'\n      ENDIF\n     %PANEL SEND CURSOR P.%CURPOS%\n      LET CURPOS = ''\n      IF AID EQ 'CLEAR'\n          LET DONE = 'Y'\n      ELSE\n          DO <<GETPAN>>\n          DO <<EDITS>>\n          SELECT FIRST\n            WHEN AID EQ 'PF6' AND NMSG EQ 0\n              LOOP PTR FROM 1 TO NVAR BY 1\n                  TRAP\n                 %FIND '%VARS<PTR>%' 1 %NAWS%\n                  IF TC NE 0\n                      LET NAWS = NAWS + 1\n                     %POINT AWS LINE %NAWS%\n                  ENDIF\n                 %%SEQ% %VARS<PTR>% = %DESC<PTR>%\n              ENDLOOP\n              TRAP OFF\n              UPDATE $$CCDEFS /COMPILER DEFAULTS FOR CC/\n              LET STAT = 'OK'\n              LET DONE = 'Y'\n            WHEN AID EQ 'PF1'\n              EXEC PFX.CCHLPSHO 'CCDEF'\n              SELECT AWS CCDEFS\n          ENDSEL\n      ENDIF\n  ENDLOOP\n  POP\n  IF STAT EQ 'OK'\n      RETURN\n  ELSE\n      RESPONSE 'ERRORS EXIST IN COMPILE OPTIONS;  CANNOT CONTINUE'\n      DELETE\n      DISCARD AWS CCDEFS\n      SELECT AWS ROS1\n      STOP\n  ENDIF\n<<GETPAN>> PROC\n  LOOP PTR FROM 1 TO NVAR BY 1\n     %LET CARD = P.%VARS<PTR>%\n      LET CARD = TRIM(TRIM(CARD '_'))\n:*--------------------------------------------------------------------*\n:*    SELECT FIRST                                                    *\n:*      WHEN VARS<PTR> EQ 'SRCE'                                      *\n:*       %IF CARD EQ 'HLQ.%APID%.%ENVR%.LIBMAST'                      *\n:*            LET CARD = ''                                           *\n:*        ENDIF                                                       *\n:*      WHEN VARS<PTR> EQ 'URTS'                                      *\n:*       %IF CARD EQ 'HLQ.%APID%.%ENVR%.URTMAST'                     *\n:*            LET CARD = ''                                           *\n:*        ENDIF                                                       *\n:*      WHEN VARS<PTR> EQ 'OLNK'                                      *\n:*       %IF CARD EQ 'HLQ.%APID%.%ENVR%.ONLLOAD'                     *\n:*            LET CARD = ''                                           *\n:*        ENDIF                                                       *\n:*      WHEN VARS<PTR> EQ 'BLNK'                                      *\n:*       %IF CARD EQ 'HLQ.%APID%.%ENVR%.BATLOAD'                     *\n:*            LET CARD = ''                                           *\n:*        ENDIF                                                       *\n:*    ENDSEL                                                          *\n:*--------------------------------------------------------------------*\n      LET DESC<PTR> = CARD\n  ENDLOOP\n  LET CARD = ''\nENDPROC\n<<PUTPAN>> PROC\n  LET NMSG = 0\n  LOOP PTR FROM 1 TO NVAR BY 1\n     %LET P.%VARS<PTR>% = PAD(DESC<PTR> MAXLEN(P.%VARS<PTR>%) '_')\n      IF MSGS<PTR> NE ''\n          LET NMSG = NMSG + 1\n          IF NMSG LE HBOUND(P.MSG)\n              LET P.MSG<NMSG> = MSGS<PTR>\n          ENDIF\n          IF INDEX(MSGS<PTR> 'DEFAULT' 1) LE 0\n             %LET A.%VARS<PTR>% = 'UHM'\n              IF CURPOS EQ ''\n                  LET CURPOS = VARS<PTR>\n              ENDIF\n          ENDIF\n      ENDIF\n  ENDLOOP\n  IF NMSG EQ 0\n      LET P.MSG<1> = 'PRESS \"PF6\" TO CONFIRM ABOVE INFORMATION,'\n      LET P.MSG<1> = P.MSG<1> | ' \"CLEAR\" TO DISCARD ANY CHANGES'\n  ENDIF\n  IF CURPOS EQ ''\n      LET CURPOS = VARS<1>\n  ENDIF\nENDPROC\n<<EDITS>> PROC\n  LOOP PTR FROM 1 TO NVAR BY 1\n      LET MSGS<PTR> = ''\n      SELECT FIRST\n        WHEN VARS<PTR> EQ 'SRCE'\n          SELECT FIRST\n           %WHEN DESC<PTR> EQ 'HLQ.%APID%.%ENVR%.LIBMAST'\n              LET DESC<PTR> = ''\n            WHEN DESC<PTR> EQ ''\n              LET MSGS<PTR> = 'SOURCE LIBRARY DEFAULTED'\n          ENDSEL\n        WHEN VARS<PTR> EQ 'MAPC'\n          SELECT FIRST\n           %WHEN DESC<PTR> EQ 'HLQ.%APID%.%ENVR%.ONLMAP'\n              LET DESC<PTR> = ''\n            WHEN DESC<PTR> EQ ''\n              LET MSGS<PTR> = 'MAP COPYBOOK LIBRARY DEFAULTED'\n          ENDSEL\n        WHEN VARS<PTR> EQ 'URTS'\n          SELECT FIRST\n           %WHEN DESC<PTR> EQ 'HLQ.%APID%.%ENVR%.URTMAST'\n              LET DESC<PTR> = ''\n            WHEN DESC<PTR> EQ ''\n              LET MSGS<PTR> = 'URT SOURCE LIBRARY DEFAULTED'\n          ENDSEL\n        WHEN VARS<PTR> EQ 'OLNK'\n          SELECT FIRST\n           %WHEN DESC<PTR> EQ 'HLQ.%APID%.%ENVR%.ONLLOAD'\n              LET DESC<PTR> = ''\n            WHEN DESC<PTR> EQ ''\n              LET MSGS<PTR> = 'ONLINE LOAD LIBRARY DEFAULTED'\n          ENDSEL\n        WHEN VARS<PTR> EQ 'BLNK'\n          SELECT FIRST\n           %WHEN DESC<PTR> EQ 'HLQ.%APID%.%ENVR%.BATLOAD'\n              LET DESC<PTR> = ''\n            WHEN DESC<PTR> EQ ''\n              LET MSGS<PTR> = 'BATCH LOAD LIBRARY DEFAULTED'\n          ENDSEL\n        WHEN VARS<PTR> EQ 'URTL'\n          SELECT FIRST\n           %WHEN DESC<PTR> EQ 'HLQ.%APID%.%ENVR%.BATLOAD'\n              LET DESC<PTR> = ''\n            WHEN DESC<PTR> EQ ''\n              LET MSGS<PTR> = 'URT LOAD LIBRARY DEFAULTED'\n          ENDSEL\n      ENDSEL\n  ENDLOOP\n  LET NMSG = 0\n  LET APID = ENVR = ''\n  LOOP PTR FROM 1 TO NVAR BY 1\n      SELECT FIRST\n        WHEN VARS<PTR> EQ 'APID'\n          IF LENGTH(DESC<PTR>) EQ 0\n              LET DESC<PTR> = DEFS<PTR>\n              LET MSGS<PTR> = 'APPLICATION ID DEFAULTED'\n          ENDIF\n          IF INDEX('YYY XXX ' DESC<PTR>) GT 0\n              LET APID = DESC<PTR>\n          ELSE\n              LET MSGS<PTR> = 'APPLICATION ID MUST BE \"YYY\" OR \"XXX\"'\n          ENDIF\n        WHEN VARS<PTR> EQ 'ENVR'\n          IF LENGTH(DESC<PTR>) EQ 0\n              LET DESC<PTR> = DEFS<PTR>\n              LET MSGS<PTR> = 'ENVIRONMENT DEFAULTED'\n          ENDIF\n          IF DESC<PTR> EQ 'DVL'\n              LET ENVR = DESC<PTR>\n          ELSE\n              LET MSGS<PTR> = 'ONLY AN ENVIRONMENT OF \"DVL\" IS'\n              LET MSGS<PTR> = MSGS<PTR> | ' CURRENTLY SUPPORTED'\n          ENDIF\n        WHEN VARS<PTR> EQ 'SRCE'\n          IF DESC<PTR> EQ '' AND APID NE '' AND ENVR NE ''\n             %LET DESC<PTR> = 'HLQ.%APID%.%ENVR%.LIBMAST'\n          ENDIF\n        WHEN VARS<PTR> EQ 'SQLS'\n          SELECT FIRST\n            WHEN LENGTH(DESC<PTR>) EQ 0\n              LET DESC<PTR> = DEFS<PTR>\n              LET MSGS<PTR> = 'LOOK FOR SQL IN SOURCE DEFAULTED'\n            WHEN DESC<PTR> NE 'Y' AND DESC<PTR> NE 'N'\n              LET MSGS<PTR> = 'LOOK FOR SQL IN SOURCE'\n              LET MSGS<PTR> = MSGS<PTR> | ' MUST BE \"Y\" OR \"N\"'\n          ENDSEL\n        WHEN VARS<PTR> EQ 'MAPC'\n          IF DESC<PTR> EQ '' AND APID NE '' AND ENVR NE ''\n             %LET DESC<PTR> = 'HLQ.%APID%.%ENVR%.ONLMAP'\n          ENDIF\n        WHEN VARS<PTR> EQ 'URTS'\n          IF DESC<PTR> EQ '' AND APID NE '' AND ENVR NE ''\n             %LET DESC<PTR> = 'HLQ.%APID%.%ENVR%.URTMAST'\n          ENDIF\n        WHEN VARS<PTR> EQ 'OLNK'\n          IF DESC<PTR> EQ '' AND APID NE '' AND ENVR NE ''\n             %LET DESC<PTR> = 'HLQ.%APID%.%ENVR%.ONLLOAD'\n          ENDIF\n        WHEN VARS<PTR> EQ 'ITST'\n          SELECT FIRST\n            WHEN LENGTH(DESC<PTR>) EQ 0\n              LET DESC<PTR> = DEFS<PTR>\n              LET MSGS<PTR> = 'ONLINE INTERTEST SELECTION DEFAULTED'\n            WHEN DESC<PTR> NE 'Y' AND DESC<PTR> NE 'N'\n              LET MSGS<PTR> = 'ONLINE INTERTEST SELECTION'\n              LET MSGS<PTR> = MSGS<PTR> | ' MUST BE \"Y\" OR \"N\"'\n          ENDSEL\n        WHEN VARS<PTR> EQ 'BLNK'\n          IF DESC<PTR> EQ '' AND APID NE '' AND ENVR NE ''\n             %LET DESC<PTR> = 'HLQ.%APID%.%ENVR%.BATLOAD'\n          ENDIF\n        WHEN VARS<PTR> EQ 'BTST'\n          SELECT FIRST\n            WHEN LENGTH(DESC<PTR>) EQ 0\n              LET DESC<PTR> = DEFS<PTR>\n              LET MSGS<PTR> = 'BATCH INTERTEST SELECTION DEFAULTED'\n            WHEN DESC<PTR> NE 'N'\n              LET MSGS<PTR> = 'BATCH INTERTEST IS NOT YET AVAILABLE'\n            WHEN DESC<PTR> NE 'Y' AND DESC<PTR> NE 'N'\n              LET MSGS<PTR> = 'BATCH INTERTEST SELECTION'\n              LET MSGS<PTR> = MSGS<PTR> | ' MUST BE \"Y\" OR \"N\"'\n          ENDSEL\n        WHEN VARS<PTR> EQ 'URTL'\n          IF DESC<PTR> EQ '' AND APID NE '' AND ENVR NE ''\n             %LET DESC<PTR> = 'HLQ.%APID%.%ENVR%.BATLOAD'\n          ENDIF\n        WHEN VARS<PTR> EQ 'ACBK'\n          SELECT FIRST\n            WHEN LENGTH(DESC<PTR>) EQ 0\n              LET DESC<PTR> = DEFS<PTR>\n              LET MSGS<PTR> = 'MAP COPYBOOK DESTINATION DEFAULTED'\n:971009:::::WHEN DESC<PTR> NE 'S' AND DESC<PTR> NE 'C'\n            WHEN DESC<PTR> NE 'C'\n              LET MSGS<PTR> = 'MAP COPYBOOK DESTINATION MUST BE'\n              LET MSGS<PTR> = MSGS<PTR> | ' \"C\" (COPYLIB)   '\n:971009:::::::LET MSGS<PTR> = MSGS<PTR> | ' \"S\" (SOURCE LIB)'\n          ENDSEL\n        WHEN VARS<PTR> EQ 'AMOP'\n          IF LENGTH(DESC<PTR>) EQ 0\n              LET DESC<PTR> = DEFS<PTR>\n              LET MSGS<PTR> = 'ASSEMBLER MODE OPTIONS DEFAULTED'\n          ENDIF\n        WHEN VARS<PTR> EQ 'BMOP'\n          IF LENGTH(DESC<PTR>) EQ 0\n              LET DESC<PTR> = DEFS<PTR>\n              LET MSGS<PTR> = 'BATCH COMPILE MODE OPTIONS DEFAULTED'\n          ENDIF\n        WHEN VARS<PTR> EQ 'CMOP'\n          IF LENGTH(DESC<PTR>) EQ 0\n              LET DESC<PTR> = DEFS<PTR>\n              LET MSGS<PTR> = 'CICS COMPILE MODE OPTIONS DEFAULTED'\n          ENDIF\n        WHEN VARS<PTR> EQ 'JNAM'\n          SELECT FIRST\n            WHEN LENGTH(DESC<PTR>) EQ 0\n             %LET DESC<PTR> = 'D%S.PREFIX%'\n              LET MSGS<PTR> = 'JOB NAME STUB DEFAULTED TO'\n              LET MSGS<PTR> = MSGS<PTR> | ' \"D\" PLUS ROSCOE PREFIX'\n            WHEN SUBSTR(DESC<PTR> 1 1) NE 'D'\n              LET MSGS<PTR> = 'JOB NAME STUB MUST BEGIN WITH'\n              LET MSGS<PTR> = MSGS<PTR> | ' \"D\" FOR DEVELOPMENT'\n            WHEN LENGTH(DESC<PTR>) LT 3\n              LET MSGS<PTR> = 'JOB NAME STUB MUST BE AT LEAST'\n              LET MSGS<PTR> = MSGS<PTR> | ' 3 CHARACTERS LONG'\n            WHEN NOT CONFORM(DESC<PTR> 'AN')\n              LET MSGS<PTR> = 'CHARACTERS IN JOB NAME MUST'\n              LET MSGS<PTR> = MSGS<PTR> | ' BE ALPHANUMERIC'\n          ENDSEL\n        WHEN VARS<PTR> EQ 'ACCT'\n          SELECT FIRST\n:*--------------------------------------------------------------------*\n:*          %WHEN DESC<PTR> NE 'Y%APID%' AND APID EQ 'XXX'            *\n:*           %LET DESC<PTR> = 'Y%APID%'                               *\n:*           %LET MSGS<PTR> = 'ACCOUNT CODE DEFAULTED TO \"Y%APID%\"'   *\n:*--------------------------------------------------------------------*\n            WHEN LENGTH(DESC<PTR>) NE 4\n              LET MSGS<PTR> = 'ACCOUNT CODE MUST CONTAIN 4 CHARACTERS'\n          ENDSEL\n        WHEN VARS<PTR> EQ 'ROOM'\n          IF LENGTH(DESC<PTR>) EQ 0\n              LET MSGS<PTR> = 'ROOM/BIN NUMBER IS MISSING'\n          ENDIF\n        WHEN VARS<PTR> EQ 'UNAM'\n          IF LENGTH(DESC<PTR>) EQ 0\n              LET CARD = SUBSTR(FORMLKEY INDEX(FORMLKEY '.')+1 11)\n              IF INDEX(CARD '.') GT 0\n                  LET CARD = SUBSTR(CARD 1 INDEX(CARD '.')-1)\n              ENDIF\n              LET DESC<PTR> = CARD\n              LET MSGS<PTR> = 'USER NAME PARAMETER DEFAULTED'\n          ENDIF\n        WHEN VARS<PTR> EQ 'MSGC'\n          IF LENGTH(DESC<PTR>) EQ 0\n              LET DESC<PTR> = DEFS<PTR>\n              LET MSGS<PTR> = 'MSGCLASS DEFAULTED'\n          ENDIF\n        WHEN VARS<PTR> EQ 'REMT'\n          IF LENGTH(DESC<PTR>) EQ 0\n              LET MSGS<PTR> = 'REMOTE PRINTER ID MISSING'\n          ENDIF\n      ENDSEL\n      IF MSGS<PTR> NE ''\n          LET NMSG = NMSG + 1\n      ENDIF\n  ENDLOOP\nENDPROC\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CCHLPPAN": {"ttr": 4107, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%?\\x01\\x01%?\\x13!\\x00\\x1f\\x00\\x1f\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-10T00:00:00", "modifydate": "2001-09-10T13:21:00", "lines": 31, "newlines": 31, "modlines": 0, "user": "EGHF3PY"}, "text": "STARTDEF\nTAG ` S\nTAG ~ SH\nTAG { SH\nTAG } S\nTAG # SH  MSG\n`                       ~Your Company Name Here       `\n                      ~Program Compile and Map Assembly`\n                                    ~HELP`\n\n}                                                                              }\n}                                                                              }\n}                                                                              }\n}                                                                              }\n}                                                                              }\n}                                                                              }\n}                                                                              }\n}                                                                              }\n}                                                                              }\n}                                                                              }\n}                                                                              }\n}                                                                              }\n}                                                                              }\n}                                                                              }\n}                                                                              }\n}                                                                              }\n}                                                                              }\n}                                                                              }\n`\n#PF7-Page Back                  8-Page Forward                  CLEAR-Terminate\nENDDEF\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CCHLPSHO": {"ttr": 4109, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%?\\x01\\x01%?\\x13\"\\x00/\\x00/\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-10T00:00:00", "modifydate": "2001-09-10T13:22:00", "lines": 47, "newlines": 47, "modlines": 0, "user": "EGHF3PY"}, "text": "<<CCHLPSHO>>\n  DECLARE PTRLO PTRHI PTRMAX\n  CREATE AWS CCHELP NONRECOVERABLE LEVEL\n  EDIT 1 80\n  TRAP\n %FETCH PFX.%A1%HLP\n  TRAP OFF\n  IF TC NE 0\n      1 HELP IS NOT YET AVAILABLE FOR THIS SCREEN\n  ENDIF\n  RENUMBER 1 1\n  UPDATE $$CCHELP\n  LET PTRMAX = AWSCOUNT\n  LET PTRLO = 1\n  LOOP\n      LET PTRHI = PTRLO + 17\n      IF PTRHI GT PTRMAX\n          LET PTRHI = PTRMAX\n      ENDIF\n      FETCH PFX.CCHLPPAN\n      RENUMBER 1 1\n     %DELETE 11 %11+PTRHI-PTRLO%\n     %COPY $$CCHELP %PTRLO% %PTRHI% 11\n     %RSHIFT 4 11 %11+PTRHI-PTRLO%\n     %FILL  1  1 /}/ 11 %11+PTRHI-PTRLO%\n     %FILL 80 80 /}/ 11 %11+PTRHI-PTRLO%\n      PANEL EXECUTE AWS\n      SELECT FIRST\n        WHEN AID EQ 'CLEAR'\n          DELETE\n          DISCARD AWS CCHELP\n          RETURN\n        WHEN AID EQ 'PF7'\n          LET PTRLO = PTRLO - 17\n          IF PTRLO LT 1\n              LET PTRLO = 1\n          ENDIF\n        WHEN AID EQ 'PF8'\n          IF PTRHI LT PTRMAX\n              LET PTRLO = PTRLO + 17\n              IF PTRLO GT PTRMAX\n                  LET PTRLO = PTRMAX\n              ENDIF\n          ENDIF\n      ENDSEL\n  ENDLOOP\n  DELETE $$CCHELP\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CCJOBBLD": {"ttr": 4111, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%?\\x01\\x01%?\\x13#\\x00\\xa1\\x00\\xa1\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-10T00:00:00", "modifydate": "2001-09-10T13:23:00", "lines": 161, "newlines": 161, "modlines": 0, "user": "EGHF3PY"}, "text": "<<JBUILD>> : ARGUMENTS AS FOLLOWS:\n           : A1 = JOBNAME         A5 = JOB CARD DESCRIPTION\n           : A2 = ACCOUNT         A6 = MSGCLASS\n           : A3 = ROOM            A7 = CLASS\n           : A4 = USER NAME       A8 = REMOTE\nDECLARE CARD PARM<8> DIVN SRCE CCOP BCOP CLNK BLNK CLOP BLOP\nPUSH\nEXEC PFX.CCSESSET\nCOPY PFX.$$JCARDS T\nEXEC PFX.$$JSETUP 'NO DISPLAY IF EDITS OK'\nCREATE AWS PARMS NONRECOVERABLE LEVEL\nFETCH $$JPARMS\nSET BOUNDS AWS 1 4\nIF A1 EQ '' OR SUBSTR(A1 1 1) EQ '+'\n    POINT AWS LINE 1\n    FIND /JNAM/\n    %READ AWS %SEQ% CARD\n    LET PARM<1> = TRIM(SUBSTR(CARD 8))\n    IF A1 NE ''\n        LET CARD = LENGTH(PARM<1>) + LENGTH(A1) - 7\n        IF CARD LT 2\n            LET CARD = 2\n        ENDIF\n        %LET CARD = SUBSTR(A1 %CARD%)\n        %LET PARM<1> = '%PARM<1>%%CARD%'\n    ENDIF\nELSE\n    LET PARM<1> = A1\nENDIF\nLET PARM<1> = SUBSTR(PAD(PARM<1> 8) 1 8)\nIF A2 EQ ''\n    POINT AWS LINE 1\n    FIND /ACCT/\n    %READ AWS %SEQ% CARD\n    LET PARM<2> = TRIM(SUBSTR(CARD 8))\nELSE\n    LET PARM<2> = A2\nENDIF\nLET PARM<2> = TRIM(SUBSTR(PAD(PARM<2> 4) 1 4))\nIF A3 EQ ''\n    POINT AWS LINE 1\n    FIND /ROOM/\n    %READ AWS %SEQ% CARD\n    LET PARM<3> = TRIM(SUBSTR(CARD 8))\nELSE\n    LET PARM<3> = A3\nENDIF\nLET PARM<3> = SUBSTR(PAD(PARM<3> 4 '0') 1 4)\nIF A4 EQ ''\n    POINT AWS LINE 1\n    FIND /UNAM/\n    %READ AWS %SEQ% CARD\n    LET PARM<4> = TRIM(SUBSTR(CARD 8))\nELSE\n    LET PARM<4> = A4\nENDIF\nIF A5 EQ ''\n    LET PARM<5> = ''\nELSE\n    LET PARM<5> = A5\nENDIF\nIF LENGTH(PARM<4>)+LENGTH(PARM<5>) GT 18\n    IF LENGTH(A4) GT 0\n        IF LENGTH(PARM<4>) GT 18\n            LET PARM<4> = TRIM(SUBSTR(PARM<4> 1 20))\n            LET PARM<5> = ''\n        ELSE\n            LET PARM<5> = LPAD(SUBSTR(PARM<5> 1 19-LENGTH(PARM<4>)) 1)\n        ENDIF\n    ELSE\n        LET PARM<4> = ''\n        LET PARM<5> = TRIM(SUBSTR(PAD(PARM<5> 20) 1 20))\n    ENDIF\nELSE\n    IF LENGTH(PARM<4>) GT 0\n        LET PARM<5> = LPAD(PARM<5> LENGTH(PARM<5>)+1 ' ')\n    ENDIF\nENDIF\nIF A6 EQ ''\n    POINT AWS LINE 1\n    FIND /MCLS/\n    %READ AWS %SEQ% CARD\n    LET PARM<6> = TRIM(SUBSTR(CARD 8))\nELSE\n    LET PARM<6> = A6\nENDIF\nLET PARM<6> = SUBSTR(PAD(PARM<6> 1) 1 1)\nIF A7 EQ ''\n    LET PARM<7> = ''\nELSE\n    LET PARM<7> = SUBSTR(PAD(A7 1) 1 1)\nENDIF\nIF A8 EQ ''\n    POINT AWS LINE 1\n    FIND /PRTR/\n    %READ AWS %SEQ% CARD\n    LET PARM<8> = TRIM(SUBSTR(CARD 8))\nELSE\n    LET PARM<8> = A8\nENDIF\nLET PARM<8> = SUBSTR(PAD(PARM<8> 8) 1 8)\nPOINT AWS LINE 1\nFIND /DIVN/\n%READ AWS %SEQ% CARD\nLET DIVN = TRIM(SUBSTR(CARD 8))\nPOINT AWS LINE 1\nFIND /SRCE/\n%READ AWS %SEQ% CARD\nLET SRCE = TRIM(SUBSTR(CARD 8))\nPOINT AWS LINE 1\nFIND /CCOP/\n%READ AWS %SEQ% CARD\nLET CCOP = TRIM(SUBSTR(CARD 8))\nPOINT AWS LINE 1\nFIND /BCOP/\n%READ AWS %SEQ% CARD\nLET BCOP = TRIM(SUBSTR(CARD 8))\nPOINT AWS LINE 1\nFIND /CLNK/\n%READ AWS %SEQ% CARD\nLET CLNK = TRIM(SUBSTR(CARD 8))\nPOINT AWS LINE 1\nFIND /BLNK/\n%READ AWS %SEQ% CARD\nLET BLNK = TRIM(SUBSTR(CARD 8))\nPOINT AWS LINE 1\nFIND /CLOP/\n%READ AWS %SEQ% CARD\nLET CLOP = TRIM(SUBSTR(CARD 8))\nPOINT AWS LINE 1\nFIND /BLOP/\n%READ AWS %SEQ% CARD\nLET BLOP = TRIM(SUBSTR(CARD 8))\nDISCARD AWS PARMS\nATTACH\nSET BOUNDS AWS 1 80\nTRAP\n%EDIT /?JNAM/%PARM<1>%/\n%EDIT /?ACCT/%PARM<2>%/\n%EDIT /?ROOM/%PARM<3>%/\n%EDIT /?UNAM/%PARM<4>%/\n%EDIT /?JDES/%PARM<5>%/\n%EDIT /?MCLS/%PARM<6>%/\nIF PARM<7> EQ ''\n    EDIT /,CLASS=?CLAS//\nELSE\n    %EDIT /?CLAS/%PARM<7>%/\nENDIF\n%EDIT /?PRTR/%PARM<8>%/\n%EDIT /?DIVN/%DIVN%/\n%EDIT /?SRCE/%SRCE%/\n%EDIT /?CCOP/%CCOP%/\n%EDIT /?BCOP/%BCOP%/\n%EDIT /?CLNK/%CLNK%/\n%EDIT /?BLNK/%BLNK%/\n%EDIT /?CLOP/%CLOP%/\n%EDIT /?BLOP/%BLOP%/\nTRAP OFF\nRENUMBER 1 1\nPOP\nRETURN PARM<1> PARM<2> PARM<3> PARM<4> PARM<5> PARM<6> PARM<7> PARM<8>\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CCJOBJCL": {"ttr": 4356, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%?\\x01\\x01%?\\x13#\\x00\\x02\\x00\\x02\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-10T00:00:00", "modifydate": "2001-09-10T13:23:00", "lines": 2, "newlines": 2, "modlines": 0, "user": "EGHF3PY"}, "text": "//?JNAM JOB (?ACCT,?ROOM),'?JPRO',MSGCLASS=?MSGC,CLASS=J\n/*ROUTE  PRINT ?REMT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CCLIBMEM": {"ttr": 4358, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%?\\x01\\x01%?\\x13%\\x00;\\x00;\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-10T00:00:00", "modifydate": "2001-09-10T13:25:00", "lines": 59, "newlines": 59, "modlines": 0, "user": "EGHF3PY"}, "text": "<<CCLIBMEM>> : A1=BASE NAME,  A2=LIB\nPUSH\nDECLARE PSWD PGMR DESC NAME VERS VERSERR PTR CARD LIBR ERRLVL\nCREATE AWS LIBDATA NONRECOVERABLE LEVEL\nIF A2 EQ ''\n    LET LIBR = 'DVL.SOURCE.LIBMAST'\nELSE\n    LET LIBR = A2\nENDIF\nLET CARD = ' '\nLET VERS = ''\nLET VERSERR = ''\nSET MONTRAP ON\n%IMPORT DSN=%LIBR%,RANGE='%TRIM(A1)%,%PAD(A1 8 '9')%',LIBRARIAN-I\nIF TC EQ 0 AND AWSCOUNT GT 1\n    IF AWSCOUNT EQ 2\n        READ AWS 2 CARD\n    ELSE\n        LOOP PTR FROM HIGHSEQ TO 2 BY -1\n            %READ AWS %PTR% CARD\n          UNTIL LENGTH(A1) EQ 6 AND CONFORM(SUBSTR(CARD 7 2) 'N')\n            LET CARD = ' '\n        ENDLOOP\n        IF CARD EQ ' '\n            LOOP PTR FROM HIGHSEQ TO 2 BY -1\n                %READ AWS %PTR% CARD\n              UNTIL TRIM(SUBSTR(CARD 1 8)) EQ A1\n                LET CARD = ' '\n            ENDLOOP\n            IF LENGTH(A1) EQ 6\n                LET VERSERR = 'VERSIONS '\n                LOOP PTR FROM HIGHSEQ TO 2 BY -1\n                    %READ AWS %PTR% CARD\n                    LET VERSERR = VERSERR | SUBSTR(CARD 7 2) | ' '\n                    LET CARD = ' '\n                ENDLOOP\n    LET VERS = SUBSTR(CARD 7 2)\n    EDIT 1 8\n    TRAP\n    %FIND /%PAD(A1 8)%/\n    TRAP OFF\n    IF TC EQ 0\n        %READ AWS %SEQ% CARD\n    ELSE\n        LOOP PTR FROM HIGHSEQ TO 2 BY -1\n            %READ AWS %PTR% CARD\n        UNTIL SUBSTR(CARD 1 6) EQ A1 AND CONFORM(SUBSTR(CARD 7 2) 'N')\n            LET CARD = ' '\n        ENDLOOP\n    ENDIF\nENDIF\nLET CARD = PAD(CARD 80)\nLET NAME = TRIM(SUBSTR(CARD 1 8))\nLET PSWD = TRIM(SUBSTR(CARD 11 4))\nLET PGMR = SUBSTR(CARD 33 15)\nLET DESC = SUBSTR(CARD 49 30)\nDELETE\nPOP\nRETURN PSWD PGMR DESC NAME VERS VERSERR\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CCMEMPAN": {"ttr": 4360, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%?\\x01\\x01%?\\x13&\\x00\"\\x00\"\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-10T00:00:00", "modifydate": "2001-09-10T13:26:00", "lines": 34, "newlines": 34, "modlines": 0, "user": "EGHF3PY"}, "text": "STARTDEF\nTAG ! S\nTAG @ SH\nTAG # UM  SEL\nTAG $ S   MEM\nTAG ~ S   UPD\nTAG \\ S   PGMR\nTAG ` S   DESC\nTAG % SH  MSG\n!                       @Your Company Name Here       !\n                         @LIBRARIAN MEMBER SELECTION!\n\n\n! The following LIBRARY members match the member you selected on the previous\n! screen.  Press ENTER to select the member at the top of the list, or select\n! any member by placing an \"S\" or an \"X\" to its left.\n\n  !  Member    Last-Update  Programmer       Description\n  #_$________!~___________!\\_______________!`________________________________!\n  #_$________!~___________!\\_______________!`________________________________!\n  #_$________!~___________!\\_______________!`________________________________!\n  #_$________!~___________!\\_______________!`________________________________!\n  #_$________!~___________!\\_______________!`________________________________!\n  #_$________!~___________!\\_______________!`________________________________!\n  #_$________!~___________!\\_______________!`________________________________!\n  #_$________!~___________!\\_______________!`________________________________!\n  #_$________!~___________!\\_______________!`________________________________!\n  #_$________!~___________!\\_______________!`________________________________!\n  #_$________!~___________!\\_______________!`________________________________!\n\n%                                                                              !\n%                                                                              !\n%PF1-Help                    ENTER-Continue                    CLEAR-Terminate\nENDDEF\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CCMEMSEL": {"ttr": 4362, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%?\\x01\\x01%?\\x13)\\x00\\x8f\\x00\\x8f\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-10T00:00:00", "modifydate": "2001-09-10T13:29:00", "lines": 143, "newlines": 143, "modlines": 0, "user": "EGHF3PY"}, "text": "<<CCMEMSEL>> : A1=MEMBER NAME,  A2=LIB\n  DECLARE PTR SEL PSWD PGMR DESC NAME BASE CARD LIBR SHOWPAN DSECT\n  CREATE AWS LIBDATA NONRECOVERABLE LEVEL\n  LET NAME = A1\n  IF LENGTH(NAME) EQ 8 AND CONFORM(SUBSTR(NAME 7 2) 'N')\n      LET BASE = SUBSTR(NAME 1 6)\n  ELSE\n      LET BASE = NAME\n  ENDIF\n  DO <<GETLIST>>\n  IF AWSCOUNT GT 0\n      LET SEL = 1\n      IF AWSCOUNT GT 1 OR SHOWPAN EQ 'Y'\n          DO <<SHOLIST>>\n      ENDIF\n      FETCH $$CCTEMP\n     %READ AWS %SEL% CARD\n      DELETE $$CCTEMP\n  ELSE\n      LET CARD = ''\n  ENDIF\n  LET CARD = PAD(CARD 80)\n  LET NAME = TRIM(SUBSTR(CARD 1 8))\n  LET PSWD = TRIM(SUBSTR(CARD 11 4))\n  LET PGMR = SUBSTR(CARD 33 15)\n  LET DESC = SUBSTR(CARD 49 30)\n  IF LENGTH(NAME) EQ 8 AND CONFORM(SUBSTR(NAME 7 2) 'N')\n      LET BASE = SUBSTR(NAME 1 6)\n  ELSE\n      LET BASE = NAME\n  ENDIF\n  DELETE\n  RETURN NAME PSWD PGMR DESC BASE DSECT\n<<GETLIST>> PROC\n  LET LIBR = A2\n  LET CARD = ' '\n  LET SHOWPAN = 'N'\n  SET MONTRAP ON\n %IMPORT DSN=%LIBR%,RANGE='%NAME%,%PAD(NAME 8 '9')%',LIB-I\n  IF TC NE 0 AND LENGTH(BASE) EQ 6\n      SET MONTRAP ON\n     %IMPORT DSN=%LIBR%,RANGE='%BASE%,%PAD(BASE 8 '9')%',LIB-I\n  ENDIF\n  SET MONTRAP OFF\n  LET SEL = 0\n  LET DSECT = 'NODSECT'\n  IF TC EQ 0\n      DELETE 1\n      SORT SORT FIELDS=(1,8,CH,D)\n      RENUMBER 1 1\n      UPDATE $$CCTEMP\n      LOOP PTR FROM 1 TO HIGHSEQ BY 1\n         %READ AWS %PTR% CARD\n          LET CARD = SUBSTR(CARD 1 8)\n          IF CARD EQ BASE|'D '\n              LET DSECT = 'DSECT'\n          ENDIF\n          IF NOT CONFORM(SUBSTR(CARD 7 2) 'N') AND CARD NE PAD(A1 8)\n             %DELETE %PTR%\n          ENDIF\n      ENDLOOP\n      IF AWSCOUNT EQ 0\n          LET SHOWPAN = 'Y'\n          FETCH $$CCTEMP\n      ENDIF\n      RENUMBER 2 1\n      EDIT 1 8\n      TRAP\n     %FIND /%PAD(A1 8)%/\n      TRAP OFF\n      IF TC EQ 0\n         %COPY %SEQ% 1\n         %DELETE %SEQ%\n      ENDIF\n      RENUMBER 1 1\n      UPDATE $$CCTEMP\n      LET SEL = 1\n  ENDIF\nENDPROC\n<<SHOLIST>> PROC\n  PANEL ACTIVATE PFX.CCMEMPAN\n %LOOP PTR FROM 1 TO %HBOUND(P.SEL)% BY 1\n    UNTIL PTR GT AWSCOUNT\n     %READ AWS %PTR% CARD\n      LET P.MEM<PTR>  = SUBSTR(CARD 1 8)\n      LET P.UPD<PTR>  = SUBSTR(CARD 18 11)\n      LET P.PGMR<PTR> = SUBSTR(CARD 33 15)\n      LET P.DESC<PTR> = SUBSTR(CARD 49 30)\n  ENDLOOP\n  PANEL SEND CURSOR P.SEL<1>\n  LOOP\n    UNTIL AID EQ 'PF1' OR AID EQ 'CLEAR' OR AID EQ 'ENTER'\n      LET P.MSG<1> = 'INVALID PF KEY - TRY AGAIN'\n      PANEL RESEND CURSOR P.SEL<1>\n      LET P.MSG<1> = ''\n  ENDLOOP\n  SELECT FIRST\n    WHEN AID EQ 'PF1'\n      EXEC PFX.CCHLPSHO 'CCMEM'\n      SELECT AWS LIBDATA\n      RELOOP\n    WHEN AID EQ 'CLEAR'\n      POP\n      STOP\n  ENDSEL\n  LET SEL = 0\n  LOOP\n    UNTIL SEL GT 0\n     %LOOP PTR FROM 1 TO %HBOUND(P.SEL)% BY 1\n        UNTIL PTR GT AWSCOUNT\n          LET A.SEL<PTR> = 'UALM'\n          LET CARD = TRIM(TRIM(P.SEL<PTR> '_'))\n          IF CARD NE ''\n              IF CARD EQ 'S' OR CARD EQ 'X'\n                  IF SEL NE 0\n                      LET P.MSG<2> = 'ONLY ONE MEMBER MAY BE SELECTED'\n                      LET A.SEL<PTR> = 'UAHM'\n                  ENDIF\n              ELSE\n                  LET P.MSG<2> = 'SELECTION CHARACTER MUST'\n                  LET P.MSG<2> = P.MSG<2>|' BE \"S\" OR \"X\"'\n                  LET A.SEL<PTR> = 'UAHM'\n              ENDIF\n              LET SEL = PTR\n          ENDIF\n      ENDLOOP\n      IF SEL GT 0\n          IF A.SEL<SEL> EQ 'UAHM'\n              PANEL RESEND CURSOR P.SEL<SEL>\n              LOOP\n                UNTIL AID EQ 'PF1' OR AID EQ 'CLEAR' OR AID EQ 'ENTER'\n                  LET P.MSG<1> = 'INVALID PF KEY - TRY AGAIN'\n                  PANEL RESEND CURSOR P.SEL<SEL>\n                  LET P.MSG<1> = ''\n              ENDLOOP\n              LET P.MSG<1> = P.MSG<2> = ''\n              LET SEL = 0\n          ENDIF\n      ELSE\n          LET SEL = 1\n      ENDIF\n  ENDLOOP\nENDPROC\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CCPXXJCL": {"ttr": 4366, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%?\\x01\\x01%?\\x131\\x00\\x15\\x00\\x15\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-10T00:00:00", "modifydate": "2001-09-10T13:31:00", "lines": 21, "newlines": 21, "modlines": 0, "user": "EGHF3PY"}, "text": "//LIBRARY  EXEC  LIBACS,LIBRARY='?SRCE',\n//         ENV='?APID',PLATFORM='?ENVR'\n//STEPLIB DD DSN=DATACOM.?APID.?ENVR.DBLOAD,DISP=SHR\n//UPDATE.AUXINC1  DD  DSN=HLQ.?APID.SAT.LIBMAST,DISP=SHR\n//UPDATE.AUXINC2  DD  DSN=HLQ.?APID.PRD.LIBMAST,DISP=SHR\n//UPDATE.AUXINC3  DD  DSN=HLQ.?APID.SAT.LIBMAST,DISP=SHR\n//UPDATE.SYSIN  DD  *\n-SEL ?MEMB,?PSWD,NOLIST,EXEC,COPYDD,VAR\n-PGMR ?PGMR\n-DESC ?DESC\n-REP ALL\n-END\n//ASM    EXEC  CICSASMN,\n//         PARM.PREP='NOLIST,SP',\n//         PARM.ASM='DECK,NOOBJECT,LIST,XREF(SHORT),ALIGN,?ACOP'\n//LINK   EXEC  CICSLNKA,COND=(5,LT,ASM.ASM),\n//         INDEX='CICS.APP'\n//LKED.SYSLMOD DD DSN=?OLNK,DISP=SHR\n//LKED.SYSIN DD *\n INCLUDE DBLOAD(DBCSVPR)\n NAME ?LNAM(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CCPXXPAN": {"ttr": 4368, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%?\\x01\\x01%?\\x138\\x00 \\x00 \\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-10T00:00:00", "modifydate": "2001-09-10T13:38:00", "lines": 32, "newlines": 32, "modlines": 0, "user": "EGHF3PY"}, "text": "STARTDEF\nTAG ! S\nTAG @ SH\nTAG \\ UM  MEMBER REPLACE SRCE OLNK APID ENVR ACOP CLOP CMOP\nTAG \\ UM  JNAM ACCT ROOM UNAM MSGC REMT\nTAG $ SI  ROSLIT ROSMEM\nTAG % SH  MSG\n!                       @Your Company Name Here       !\n                            @CICS PROGRAM ASSEMBLY!\n\n\n!        Member:\\________!     Replace?:\\_!(y/n)$  from Roscoe Member:$________!\n\n!    Source Lib:\\____________________________________!\n!      Load Lib:\\____________________________________!\n!\n!                                Application ID:\\____!        Environment:\\____!\n\n!   Options:\n!     Assembler:\\____________________________________!\n!          Link:\\____________________________________! Mode:\\__________________!\n\n!      Job Name:\\________!             Account:\\____!        Room/Bin:\\________!\n!     User Name:\\___________!         Msgclass:\\_!             Remote:\\________!\n\n\n\n%                                                                              !\n%                                                                              !\n%                                                                              !\n% PF1-Help   2-Set Defaults   5-Skip   8-Edit JCL   9-Submit   CLEAR-Terminate\nENDDEF\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CCROSPAN": {"ttr": 4370, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%?\\x01\\x01%?\\x139\\x00!\\x00!\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-10T00:00:00", "modifydate": "2001-09-10T13:39:00", "lines": 33, "newlines": 33, "modlines": 0, "user": "EGHF3PY"}, "text": "STARTDEF\nTAG ! S\nTAG @ SH\nTAG # UM  SEL\nTAG $ S   MEM\nTAG ~ S   LINES\nTAG ` S   DESC\nTAG % SH  MSG\n!                       @Your Company Name Here       !\n                           @ROSCOE MEMBER SELECTION!\n\n\n! The following members of your ROSCOE library match the member you selected\n! on the previous screen.  Press ENTER to select the entry on the first line,\n! or select another entry by placing an \"S\" or an \"X\" to its left.\n!\n  !  Member    Lines  Description\n  #_$________!~_____!`________________________________!\n  #_$________!~_____!`________________________________!\n  #_$________!~_____!`________________________________!\n  #_$________!~_____!`________________________________!\n  #_$________!~_____!`________________________________!\n  #_$________!~_____!`________________________________!\n  #_$________!~_____!`________________________________!\n  #_$________!~_____!`________________________________!\n  #_$________!~_____!`________________________________!\n  #_$________!~_____!`________________________________!\n  #_$________!~_____!`________________________________!\n\n%                                                                              !\n%                                                                              !\n%PF1-Help                ENTER-Continue                CLEAR-Cancel Replacement\nENDDEF\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CCROSSEL": {"ttr": 4372, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%?\\x01\\x01%?\\x13A\\x00\\x81\\x00\\x81\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-10T00:00:00", "modifydate": "2001-09-10T13:41:00", "lines": 129, "newlines": 129, "modlines": 0, "user": "EGHF3PY"}, "text": "<<CCROSSEL>> : A1=MEMBER NAME,\n  DECLARE PTR SEL DESC NAME BASE CARD LIBR\n  CREATE AWS ROSDATA NONRECOVERABLE LEVEL\n  IF A1 EQ '$$CANCEL'\n      LET CARD = '$$CANCEL               REPLACEMENT CANCELLED'\n  ELSE\n      LET NAME = A1\n      DO <<GETLIST>>\n      IF AWSCOUNT GT 0\n          LET SEL = 1\n          IF AWSCOUNT GT 1\n              DO <<SHOLIST>>\n          ENDIF\n          IF SEL NE 999999\n              FETCH $$CCTEMP\n             %READ AWS %SEL% CARD\n          ENDIF\n          DELETE $$CCTEMP\n      ELSE\n          LET CARD = ''\n      ENDIF\n  ENDIF\n  LET CARD = PAD(CARD 80)\n  LET NAME = TRIM(SUBSTR(CARD 1 8))\n  LET DESC = SUBSTR(CARD 24 30)\n  DELETE\n  RETURN NAME DESC\n<<GETLIST>> PROC\n  IF LENGTH(NAME) EQ 8 AND CONFORM(SUBSTR(NAME 7 2) 'N')\n      LET BASE = SUBSTR(NAME 1 6)\n  ELSE\n      LET BASE = NAME\n  ENDIF\n  DELETE\n  TRAP\n %ATTACH LIB %PREFIX%.%BASE%*\n  TRAP OFF\n  LET SEL = 0\n  IF TC EQ 0\n      COPY LIB T\n      DETACH LIB\n      RENUMBER 1 1\n      DELETE 1 3\n      RENUMBER 1 1\n::::::LSHIFT 6\n      READ AWS 1 CARD\n      %LSHIFT %INDEX(CARD '.')%\n      SORT SORT FIELDS=(1,8,CH,D)\n      RENUMBER 1 1\n      UPDATE $$CCTEMP\n      LOOP PTR FROM 1 TO HIGHSEQ BY 1\n         %READ AWS %PTR% CARD\n          LET CARD = SUBSTR(CARD 1 8)\n          IF CARD NE PAD(NAME 8) AND CARD NE PAD(BASE 8)\n             %DELETE %PTR%\n          ENDIF\n      ENDLOOP\n      IF AWSCOUNT EQ 0\n          FETCH $$CCTEMP\n      ENDIF\n      RENUMBER 1 1\n      UPDATE $$CCTEMP\n      LET SEL = 1\n  ENDIF\nENDPROC\n<<SHOLIST>> PROC\n  PANEL ACTIVATE PFX.CCROSPAN\n %LOOP PTR FROM 1 TO %HBOUND(P.SEL)% BY 1\n    UNTIL PTR GT AWSCOUNT\n     %READ AWS %PTR% CARD\n      LET P.MEM<PTR>   = SUBSTR(CARD 1 8)\n      LET P.LINES<PTR> = SUBSTR(CARD 57 5)\n      LET P.DESC<PTR>  = SUBSTR(CARD 24 30)\n  ENDLOOP\n  PANEL SEND CURSOR P.SEL<1>\n  LOOP\n    UNTIL AID EQ 'PF1' OR AID EQ 'CLEAR' OR AID EQ 'ENTER'\n      LET P.MSG<1> = 'INVALID PF KEY - TRY AGAIN'\n      PANEL RESEND CURSOR P.SEL<1>\n      LET P.MSG<1> = ''\n  ENDLOOP\n  SELECT FIRST\n    WHEN AID EQ 'PF1'\n      EXEC PFX.CCHLPSHO 'CCROS'\n      SELECT AWS ROSDATA\n      RELOOP\n    WHEN AID EQ 'CLEAR'\n      LET SEL = 999999\n      LET CARD = '$$CANCEL               REPLACEMENT CANCELLED'\n    WHEN NONE\n      LET SEL = 0\n  ENDSEL\n  LOOP\n    UNTIL SEL GT 0\n     %LOOP PTR FROM 1 TO %HBOUND(P.SEL)% BY 1\n        UNTIL PTR GT AWSCOUNT\n          LET A.SEL<PTR> = 'UALM'\n          LET CARD = TRIM(TRIM(P.SEL<PTR> '_'))\n          IF CARD NE ''\n              IF CARD EQ 'S' OR CARD EQ 'X'\n                  IF SEL NE 0\n                      LET P.MSG<2> = 'ONLY ONE MEMBER MAY BE SELECTED'\n                      LET A.SEL<PTR> = 'UAHM'\n                  ENDIF\n              ELSE\n                  LET P.MSG<2> = 'SELECTION CHARACTER MUST'\n                  LET P.MSG<2> = P.MSG<2>|' BE \"S\" OR \"X\"'\n                  LET A.SEL<PTR> = 'UAHM'\n              ENDIF\n              LET SEL = PTR\n          ENDIF\n      ENDLOOP\n      IF SEL GT 0\n          IF A.SEL<SEL> EQ 'UAHM'\n              PANEL RESEND CURSOR P.SEL<SEL>\n              LOOP\n                UNTIL AID EQ 'PF1' OR AID EQ 'CLEAR' OR AID EQ 'ENTER'\n                  LET P.MSG<1> = 'INVALID PF KEY - TRY AGAIN'\n                  PANEL RESEND CURSOR P.SEL<SEL>\n                  LET P.MSG<1> = ''\n              ENDLOOP\n              LET P.MSG<1> = P.MSG<2> = ''\n              LET SEL = 0\n          ENDIF\n      ELSE\n          LET SEL = 1\n      ENDIF\n  ENDLOOP\nENDPROC\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CCSESSET": {"ttr": 4611, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%?\\x01\\x01%?\\x13B\\x00\\x15\\x00\\x15\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-10T00:00:00", "modifydate": "2001-09-10T13:42:00", "lines": 21, "newlines": 21, "modlines": 0, "user": "EGHF3PY"}, "text": "<<CCSESSET>>\nSET ;\nNOSEQ\nSET BOUNDS AWS 1 72\nDETACH LIB\nSET ATTACH NOPAUSE\nSET EDITCHNG OFF\nSET DSNCNT MAX\nSET DSNEMPTY ON\nSET DISPLAY 1 72\nSET SUBMIT NOSEQ\nSET SUBMIT NOINCLUDE\nSET MSGLEVEL INFO\nSET PFKTRAP ON\nSET MODE BASIC\nSET MODE NUMX\nSET AUTOFF MAX\nSET MASTER OFF\nSET HEX OFF\nSET FILL NULL\nRETURN\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CCSETPAN": {"ttr": 4613, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%?\\x01\\x01%?\\x13C\\x00\\x1e\\x00\\x1e\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-10T00:00:00", "modifydate": "2001-09-10T13:43:00", "lines": 30, "newlines": 30, "modlines": 0, "user": "EGHF3PY"}, "text": "STARTDEF\nTAG ! S\nTAG @ SH\nTAG \\ UMH JNAM ACCT ROOM UNAM PRTR DIVN SRCE CLNK BLNK\nTAG % SH  MSG\n!                       @GATHER BASIC USER INFORMATION!\n\n                  @(RUN THIS ANYTIME BY EXECUTING \"$$JSETUP\")!\n\n\n!        JOB NAME:\\________!     (default \"DXXX....\", XXX=Roscoe prefix)\n\n!    ACCOUNT CODE:\\____!         (first entry in the job accounting area)\n\n!     ROOM NUMBER:\\________!     (second entry in the job accounting area)\n\n!       USER NAME:\\___________!  (to appear in name area of job card)\n\n!PREFERRED REMOTE:\\________!     (to appear on the ROUTE card)\n\n!        DIVISION:\\___!          (e.g., ASD, ACS, etc.)\n\n!  LIBRARIAN NAME:\\__________________________________!\n\n!  ONLINE LINKLIB:\\__________________________________!\n\n!   BATCH LINKLIB:\\__________________________________!\n\n%                                                                      !\nENDDEF\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CCTXXJCL": {"ttr": 4615, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%?\\x01\\x01%?\\x13D\\x00\\x13\\x00\\x13\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-10T00:00:00", "modifydate": "2001-09-10T13:44:00", "lines": 19, "newlines": 19, "modlines": 0, "user": "EGHF3PY"}, "text": "//LIBRARY  EXEC  LIBACS,LIBRARY='?SRCE',\n//         ENV='?APID',PLATFORM='?ENVR'\n//STEPLIB DD DSN=DATACOM.?APID.?ENVR.DBLOAD,DISP=SHR\n//UPDATE.AUXINC1  DD  DSN=HLQ.?APID.SAT.LIBMAST,DISP=SHR\n//UPDATE.AUXINC2  DD  DSN=HLQ.?APID.PRD.LIBMAST,DISP=SHR\n//UPDATE.AUXINC3  DD  DSN=HLQ.?APID.SAT.LIBMAST,DISP=SHR\n//UPDATE.SYSIN  DD  *\n-SEL ?MEMB,?PSWD,NOLIST,EXEC,COPYDD,VAR\n-PGMR ?PGMR\n-DESC ?DESC\n-REP ALL\n-END\n//         EXEC  ASM$CL,\n//         AOPT='?ACOP',\n//         LOPT='?CMOP,?ALOP'\n//ASM.SYSIN     DD  DSN=&&SOURCE,DISP=(OLD,PASS)\n//LKED.SYSLMOD  DD  DSN=?OLNK,DISP=SHR\n//LKED.SYSIN    DD  *\n  NAME ?LNAM(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CCTXXPAN": {"ttr": 4617, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%?\\x01\\x01%?\\x13E\\x00 \\x00 \\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-10T00:00:00", "modifydate": "2001-09-10T13:45:00", "lines": 32, "newlines": 32, "modlines": 0, "user": "EGHF3PY"}, "text": "STARTDEF\nTAG ! S\nTAG @ SH\nTAG \\ UM  MEMBER REPLACE SRCE OLNK APID ENVR ACOP ALOP CMOP\nTAG \\ UM  JNAM ACCT ROOM UNAM MSGC REMT\nTAG $ SI  ROSLIT ROSMEM\nTAG % SH  MSG\n!                       @Your Company Name Here       !\n                             @CICS TABLE ASSEMBLY!\n\n\n!        Member:\\________!     Replace?:\\_!(y/n)$  from Roscoe Member:$________!\n\n!    Source Lib:\\____________________________________!\n!      Load Lib:\\____________________________________!\n!\n!                                Application ID:\\____!        Environment:\\____!\n\n!   Options:\n!     Assembler:\\____________________________________!\n!          Link:\\____________________________________! Mode:\\__________________!\n\n!      Job Name:\\________!             Account:\\____!        Room/Bin:\\________!\n!     User Name:\\___________!         Msgclass:\\_!             Remote:\\________!\n\n\n\n%                                                                              !\n%                                                                              !\n%                                                                              !\n% PF1-Help   2-Set Defaults   5-Skip   8-Edit JCL   9-Submit   CLEAR-Terminate\nENDDEF\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CCURTPAN": {"ttr": 4619, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%?\\x01\\x01%?\\x13F\\x00\"\\x00\"\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-10T00:00:00", "modifydate": "2001-09-10T13:46:00", "lines": 34, "newlines": 34, "modlines": 0, "user": "EGHF3PY"}, "text": "STARTDEF\nTAG ! S\nTAG @ SH\nTAG # UM  SEL\nTAG $ S   URT\nTAG ~ S   UPD\nTAG \\ S   PGMR\nTAG ` S   DESC\nTAG % SH  MSG\n!                       @Your Company Name Here       !\n                             @URT NAME SELECTION!\n\n\n! The following URT names match the URT specification entered on the previous\n! screen.  Press ENTER to select the URT at the top of the list, or select any\n! URT by placing an \"S\" or an \"X\" to its left.\n\n  !  URT Name  Last-Update  Programmer       Description\n  #_$________!~___________!\\_______________!`________________________________!\n  #_$________!~___________!\\_______________!`________________________________!\n  #_$________!~___________!\\_______________!`________________________________!\n  #_$________!~___________!\\_______________!`________________________________!\n  #_$________!~___________!\\_______________!`________________________________!\n  #_$________!~___________!\\_______________!`________________________________!\n  #_$________!~___________!\\_______________!`________________________________!\n  #_$________!~___________!\\_______________!`________________________________!\n  #_$________!~___________!\\_______________!`________________________________!\n  #_$________!~___________!\\_______________!`________________________________!\n  #_$________!~___________!\\_______________!`________________________________!\n\n%                                                                              !\n%                                                                              !\n%PF1-Help                    ENTER-Continue                    CLEAR-Terminate\nENDDEF\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CCURTSEL": {"ttr": 4621, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%?\\x01\\x01%?\\x13G\\x00e\\x00e\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-10T00:00:00", "modifydate": "2001-09-10T13:47:00", "lines": 101, "newlines": 101, "modlines": 0, "user": "EGHF3PY"}, "text": "<<CCURTSEL>> : A1=URT NAME,  A2=LIB\n  DECLARE PTR SEL NAME BASE CARD LIBR\n  CREATE AWS LIBDATA NONRECOVERABLE LEVEL\n  LET NAME = A1\n  IF LENGTH(NAME) GT 5\n      LET BASE = SUBSTR(NAME 1 6)\n  ELSE\n      LET BASE = NAME\n  ENDIF\n  DO <<GETLIST>>\n  IF AWSCOUNT GT 0\n      LET SEL = 1\n      IF AWSCOUNT GT 1\n          DO <<SHOLIST>>\n      ENDIF\n      FETCH $$CCTEMP\n     %READ AWS %SEL% CARD\n      DELETE $$CCTEMP\n  ELSE\n      LET CARD = ''\n  ENDIF\n  LET CARD = PAD(CARD 80)\n  LET NAME = TRIM(SUBSTR(CARD 1 8))\n  DELETE\n  RETURN NAME\n<<GETLIST>> PROC\n  LET LIBR = A2\n  LET CARD = ' '\n  SET MONTRAP ON\n %IMPORT DSN=%LIBR%(*),RANGE='%BASE%,%PAD(BASE 8 '9')%'\n  SET MONTRAP OFF\n  LET SEL = 0\n  IF TC EQ 0\n      TRAP ON\n      DELETEX 1 9 /RT /\n      TRAP OFF\n      IF AWSCOUNT GT 0\n          RENUMBER 1 1\n          UPDATE $$CCTEMP\n          LET SEL = 1\n      ENDIF\n  ENDIF\nENDPROC\n<<SHOLIST>> PROC\n  PANEL ACTIVATE PFX.CCURTPAN\n %LOOP PTR FROM 1 TO %HBOUND(P.SEL)% BY 1\n    UNTIL PTR GT AWSCOUNT\n     %READ AWS %PTR% CARD\n      LET P.URT<PTR>  = SUBSTR(CARD 1 8)\n      LET P.UPD<PTR>  = SUBSTR(CARD 18 11)\n      LET P.PGMR<PTR> = SUBSTR(CARD 33 15)\n      LET P.DESC<PTR> = SUBSTR(CARD 49 30)\n  ENDLOOP\n  PANEL SEND CURSOR P.SEL<1>\n  SELECT FIRST\n    WHEN AID EQ 'PF1'\n      EXEC PFX.CCHLPSHO 'CCURT'\n      SELECT AWS LIBDATA\n      RELOOP\n    WHEN AID EQ 'CLEAR'\n      POP\n      STOP\n  ENDSEL\n  LET SEL = 0\n  LOOP\n    UNTIL SEL GT 0\n     %LOOP PTR FROM 1 TO %HBOUND(P.SEL)% BY 1\n        UNTIL PTR GT AWSCOUNT\n          LET A.SEL<PTR> = 'UALM'\n          LET CARD = TRIM(TRIM(P.SEL<PTR> '_'))\n          SELECT FIRST\n            WHEN CARD EQ 's'\n              LET CARD = 'S'\n            WHEN CARD EQ 'x'\n              LET CARD = 'X'\n          ENDSEL\n          IF CARD NE ''\n              IF CARD EQ 'S' OR CARD EQ 'X'\n                  IF SEL NE 0\n                      LET P.MSG<2> = 'ONLY ONE URT MAY BE SELECTED'\n                      LET A.SEL<PTR> = 'UAHM'\n                  ENDIF\n              ELSE\n                  LET P.MSG<2> = 'SELECTION CHARACTER MUST'\n                  LET P.MSG<2> = P.MSG<2>|' BE \"S\" OR \"X\"'\n                  LET A.SEL<PTR> = 'UAHM'\n              ENDIF\n              LET SEL = PTR\n          ENDIF\n      ENDLOOP\n      IF SEL GT 0\n          IF A.SEL<SEL> EQ 'UAHM'\n              PANEL RESEND CURSOR P.SEL<SEL>\n              LET P.MSG<1> = P.MSG<2> = ''\n              LET SEL = 0\n          ENDIF\n      ELSE\n          LET SEL = 1\n      ENDIF\n  ENDLOOP\nENDPROC\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CCXLXPAN": {"ttr": 4624, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%?\\x01\\x01%?\\x13H\\x00\\x1f\\x00\\x1f\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-10T00:00:00", "modifydate": "2001-09-10T13:48:00", "lines": 31, "newlines": 31, "modlines": 0, "user": "EGHF3PY"}, "text": "STARTDEF\nTAG ! S\nTAG @ SH\nTAG $ SH  TITLE\nTAG \\ UM  LISTNAME MEMB\nTAG % SH  MSG\n!                       @Your Company Name Here       !\n                    $                                     !\n\n\n                             !List Name:\\________!\n\n\\________!\\________!\\________!\\________!\\________!\\________!\\________!\\________!\n\\________!\\________!\\________!\\________!\\________!\\________!\\________!\\________!\n\\________!\\________!\\________!\\________!\\________!\\________!\\________!\\________!\n\\________!\\________!\\________!\\________!\\________!\\________!\\________!\\________!\n\\________!\\________!\\________!\\________!\\________!\\________!\\________!\\________!\n\\________!\\________!\\________!\\________!\\________!\\________!\\________!\\________!\n\\________!\\________!\\________!\\________!\\________!\\________!\\________!\\________!\n\\________!\\________!\\________!\\________!\\________!\\________!\\________!\\________!\n\\________!\\________!\\________!\\________!\\________!\\________!\\________!\\________!\n\\________!\\________!\\________!\\________!\\________!\\________!\\________!\\________!\n\\________!\\________!\\________!\\________!\\________!\\________!\\________!\\________!\n\\________!\\________!\\________!\\________!\\________!\\________!\\________!\\________!\n\\________!\\________!\\________!\\________!\\________!\\________!\\________!\\________!\n\\________!\\________!\\________!\\________!\\________!\\________!\\________!\\________!\n\n%                                                                              !\n%                                                                              !\n%PF1-Help     2-Set Defaults      7-Backward      8-Forward     CLEAR-Terminate\nENDDEF\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CCXXXHLP": {"ttr": 4626, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%?\\x01\\x01%?\\x13I\\x00-\\x00-\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-10T00:00:00", "modifydate": "2001-09-10T13:49:00", "lines": 45, "newlines": 45, "modlines": 0, "user": "EGHF3PY"}, "text": " This is the entry point screen for the{ACC}(Compiles) RPF. ACC enables\n a user to generate the JCL necessary to compile most programs commonly\n found at xxxxxxx, namely CICS assembler maps, CICS COBOL programs, and\n batch COBOL programs with and without DataCom.\n\n If you read this help screen carefully, you should have little trouble\n with the remaining screens and concepts.\n\n After entering ACC, fill in the fields found on this screen as follows:\n\n OPTION:  Enter{\"A\"}to{assemble}a CICS map\n               {\"B\"}to compile a{batch}COBOL program\n               {\"C\"}to compile a{CICS}COBOL program.\n          Enter{\"\\\"}to enable two additional options\n               {\"P\"}to assemble a{CICS}ASSEMBLER\n               {\"T\"}to assemble a{CICS}TABLE.\n\n MEMBER:  Enter the{name of the member to be compiled,}with or without\n          the version number.  The version number will be automatically\n          filled in when only one version exists on the source library.\n          When more than one version exists, the user will be presented\n          with a selection list.\n          Entry of an{\"L\"}here invokes list processing in which ACC will\n          compile/assemble all programs in a list.\n\n REPLACE: Entry of a{\"Y\"}here indicates to ACC that the user wishes to\n         {replace the selected Library member}with the content of one\n          of his Roscoe members.\n\n SUBMIT:  Entry of a{\"Y\"}here indicates to ACC that the JCL is to be\n         {submitted immediately,}without showing any more screens, if\n          there are no problems with the information entered.\n\n{This screen can be bypassed entirely}by making an entry on the Roscoe\n command line of the following form:\n{ ACC option member <REP> <SUB>}   (<...> indicates an optional entry)\n       where option is the entry for OPTION above (A, B, or C)\n             member is the entry for MEMBER above\n             REP sets the REPLACE option to \"Y\"       (REP and SUB are\n             SUB sets the SUBMIT option to \"Y\"         interchangeable)\n\n Example: ACC C CPP185 REP SUB\n     will submit CPP185vv for CICS COBOL compile, replacing the module\n     on Librarian from a Roscoe member, submitting the job without\n     presenting a screen if there are no problems.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CCXXXPAN": {"ttr": 4628, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%?\\x01\\x01%?\\x13P\\x00\\x1f\\x00\\x1f\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-10T00:00:00", "modifydate": "2001-09-10T13:50:00", "lines": 31, "newlines": 31, "modlines": 0, "user": "EGHF3PY"}, "text": "STARTDEF\nTAG ! S\nTAG ` SI  XTRA\nTAG @ SH\nTAG $ UM  OPTION MEMBER REPLACE SUBMIT\nTAG % SH  MSG\n@                        Your Company Name Here\n                    @PROGRAM COMPILE AND MAP ASSEMBLY MENU\n\n\n\n                         !A.   Assemble CICS Map\n\n                         !B.   Batch Program Compile\n\n                         !C.   CICS Program Compile\n                         `P.   Assemble CICS Program\n                         `T.   Assemble CICS Table\n\n                 !Option:$_!        Member:$________!\n\n                                 !Replace?:$_!(y/n)\n                                  !Submit?:$_!(y/n)\n\n\n\n%\n%\n%\n%PF1-Help                    2-Set Defaults                    CLEAR-Terminate\nENDDEF\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CICSCOB": {"ttr": 4630, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%?\\x01\\x01%?\\x13R\\x00\\x16\\x00\\x16\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-10T00:00:00", "modifydate": "2001-09-10T13:52:00", "lines": 22, "newlines": 22, "modlines": 0, "user": "EGHF3PY"}, "text": "<<CICSCOB>>\nF CICSCOB\n+E /XXXXXXXX/+A1+/ 100 ,,\nLET L1 = SUBSTR(A1 1 4)\nDEL 1 99\nRETURN\n:\n//JOBNAME  JOB (ACCTINFO),'PGMR XXXXXXXX',MSGCLASS=S,CLASS=K\n//PROCLIB JCLLIB ORDER=USERID.DVL.PROC\n//        SET TITLE1='PFX.XXXXXXXX'\n//OUTPUT INCLUDE MEMBER=DESTCH\n//*-------------------------------------------------------------------*\n//*        EXTRACT SOURCE                                             *\n//*-------------------------------------------------------------------*\n//STEP1    EXEC LIBACS,LIBRARY='DVL.SOURCE.LIBMAST'\n//UPDATE.SYSIN DD  *\n-SEL XXXXXXXX,BYPP,NOLIST,EXEC,COPYDD,VAR\n-END\n//*-------------------------------------------------------------------*\n//*        CICS COBOL COMPILE WITH INTERTEST                          *\n//*-------------------------------------------------------------------*\n//STEP02   EXEC CICSCOB,OPT='NOADV'\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CICSCOBL": {"ttr": 4632, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%?\\x01\\x01%?\\x14\\x01\\x00#\\x00#\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-10T00:00:00", "modifydate": "2001-09-10T14:01:00", "lines": 35, "newlines": 35, "modlines": 0, "user": "EGHF3PY"}, "text": "<<CICSCOBL>>\nF CICSCOBL\n+E /XXXXXXXX/+A1+/ 100 ,,\nLET L1 = SUBSTR(A1 1 4)\n+E /YYYY/+L1+/ 406\nLET L1 = SUBSTR(A1 1 6)\n+E /ZZZZZZ/+L1+/ 500\n+E /ZZZZZZ/+L1+/ 504\n+E /ZZZZZZ/+L1+/ 2300\nDEL 1 99\nRETURN\n:\n//JOBNAME  JOB (ACCTINFO),'PGMR XXXXXXXX',MSGCLASS=S,CLASS=K\n//PROCLIB JCLLIB ORDER=USERID.DVL.PROC\n//        SET TITLE1='PFX.XXXXXXXX'\n//OUTPUT INCLUDE MEMBER=DESTCH\n//*-------------------------------------------------------------------*\n//*        EXTRACT SOURCE                                             *\n//*-------------------------------------------------------------------*\n//STEP01   EXEC LIBACS,LIBRARY='DVL.SOURCE.LIBMAST'\n//UPDATE.SYSIN DD  *\n-SEL XXXXXXXX,YYYY,NOLIST,EXEC,COPYDD,VAR\n-END\n//*-------------------------------------------------------------------*\n//*        CICS COBOL COMPILE WITH INTERTEST                          *\n//*-------------------------------------------------------------------*\n//STEP02   EXEC CICSCOBI,OPT='NOADV',PPTNAME=ZZZZZZ\n//*-------------------------------------------------------------------*\n//*        LINK EDIT                                                  *\n//*-------------------------------------------------------------------*\n//STEP03   EXEC CICSLNKC,PPTNAME=ZZZZZZ,COND.LKED=(5,LT,STEP02.COMP)\n//LKED.SYSLMOD DD DSN=HLQ..DVL.ONLLOAD(&PPTNAME),DISP=SHR\n//LKED.SYSIN DD *\n  INCLUDE DBLOAD(DBCSVPR)\n  NAME ZZZZZZ(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CICSCOMP": {"ttr": 4865, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%?\\x01\\x01%?\\x14\\t\\x00X\\x00X\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-10T00:00:00", "modifydate": "2001-09-10T14:09:00", "lines": 88, "newlines": 88, "modlines": 0, "user": "EGHF3PY"}, "text": "<<CICSCOMP>>\nF CICSCOMP\n+E /XXXXXXXX/+A1+/ 100 ,,\nLET L1 = SUBSTR(A1 1 4)\n+E /YYYY/+L1+/ 100 ,,\nLET L1 = SUBSTR(A1 1 6)\n+E /ZZZZZZ/+L1+/ 100 ,,\nDEL 1 99\nRETURN\n:\n//JOBNAME  JOB (ACCTINFO),'PGMR XXXXXXXX',\n//   CLASS=X,MSGCLASS=S,MSGLEVEL=(1,1)\n/*ROUTE  PRINT LOCAL\n//MANIFEST OUTPUT DEFAULT=Y,JESDS=ALL,\n// BUILDING='XX XXXXXXX, XXXX',\n// DEPT='XXX/XXX/XXXXXXXXXXX',\n// ROOM='AAAA-NNN',\n// NAME='AAAAAAA AAAAAA NNN-NNN-NNNN',\n// ADDRESS=('NNNN AAAAAA AAAAA','AAAAAAAAAAA, AA NNNNN'),\n// TITLE=AAAAAAAA\n//STEPADDC EXEC PGM=IDCAMS\n//SYSPRINT DD SYSOUT=*\n//INFILE   DD *\n-SEL XXXXXXXX,PSWD=YYYY,NOLIST,EXEC,COPYDD,VAR\n-REP ALL,NOAUDIT\n/*\n//OUTFILE  DD DSN=&&TEMP,DISP=(NEW,PASS,DELETE),\n//            UNIT=SYSDA,SPACE=(CYL,(2,1),RLSE),\n//            DCB=(LRECL=80,RECFM=FB,BLKSIZE=27200)\n//SYSIN     DD *\n REPRO INFILE (INFILE) OUTFILE(OUTFILE)\n/*\n//LIBRARY  EXEC  LIBACS,LIBRARY='HLQ.DVLCOLL.LIBMAST',\n//         ENV='MMM',PLATFORM='DVL'\n//STEPLIB DD DSN=DATACOM.MMM.DVL.TY2K.DBLOAD,DISP=SHR\n//UPDATE.AUXINC1  DD  DSN=HLQ.SATCOLL.LIBMAST,DISP=SHR\n//UPDATE.AUXINC2  DD  DSN=HLQ.PRD.LIBMAST,DISP=SHR\n//UPDATE.AUXINC3  DD  DUMMY\n//UPDATE.OSJOB  DD DSN=&&TEMP,DISP=(MOD,KEEP,KEEP)\n//UPDATE.SYSIN  DD  *\n-OPT UTILITY\n-EXTRACT XXXXXXXX\n-END\n//STEPENDC EXEC PGM=IDCAMS\n//SYSPRINT  DD SYSOUT=*\n//INFILE    DD *\n-END\n/*\n//OUTFILE  DD DSN=&&TEMP,DISP=(MOD,KEEP,KEEP)\n//SYSIN     DD *\n REPRO INFILE (INFILE) OUTFILE(OUTFILE)\n/*\n//LIBRARY  EXEC  LIBACS,LIBRARY='HLQ.DVLCOLL.LIBMAST',\n//         ENV='ACS',PLATFORM='DVL'\n//STEPLIB DD DSN=DATACOM.MMM.DVL.TY2K.DBLOAD,DISP=SHR\n//UPDATE.AUXINC1  DD  DSN=HLQ.SATCOLL.LIBMAST,DISP=SHR\n//UPDATE.AUXINC2  DD  DSN=HLQ.PRD.LIBMAST,DISP=SHR\n//UPDATE.AUXINC3  DD  DUMMY\n//UPDATE.SYSIN  DD DSN=&&TEMP,DISP=OLD\n//COBOL  EXEC  CICSCOBI,\n//         ULIB2='CICS.EDI.MONITOR.APPLIB',\n//         ULIB3='CICS.EDI.MONITOR.SOURCE',\n//         ULIB6='HLQ.DVL.ONLMAP',\n//         INTVER='V54.',\n//         INDEX='CICS.APP',\n//         PLATFORM='DVLACS',ENV='',\n//         CUTPRT=',CUTPRINT=MAP',PLIST='NOLIST',\n//         PPTNAME='ZZZZZZ',ULIB='HLQ.DVL.ONLMAP',\n//         OPT='DATA(31),OPT,NOADV,NOSEQ,LIST,NOOFFSET'\n//GENPARM.STEPLIB DD DSN=INTRCICS.ALIAS.DVL.MMM.LOADLIB,DISP=SHR\n//LISTER.STEPLIB DD DSN=INTRCICS.ALIAS.DVL.MMM.LOADLIB,DISP=SHR\n//LINK   EXEC  CICSLNKC,COND=(5,LT,COBOL.COMP),\n//         INDEX='CICS.APP',\n//         PLATFORM='DVL',PPTNAME='CPPA1D',\n//         MODE='AMODE=31,RMODE=ANY',LOPT=''\n//LKED.SYSLIB  DD DSN=SYS1.SCEECICS,DISP=SHR\n//             DD DSN=HLQ.DVLCOLL.ONLLOAD,DISP=SHR\n//             DD DSN=CICS.APP.SDFHLOAD,DISP=SHR\n//             DD DSN=SYS1.SCEELKED,DISP=SHR\n//             DD DSN=HLQ.DVLCOLL.BATLOAD,DISP=SHR\n//             DD DSN=HLQ.PRD.BATLOAD,DISP=SHR\n//             DD DSN=HLQ.PRD.ONLLOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=HLQ.DVLCOLL.ONLLOAD,DISP=SHR\n//LKED.SYSIN DD *\n  INCLUDE DBLOAD(DBCSVPR),CSQSTUB(CSQCSTUB)\n  NAME ZZZZZZ(R)\n/*\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CICSMAP": {"ttr": 4868, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x01%?\\x01\\x01&/\\x13S\\x00K\\x00K\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2001-09-10T00:00:00", "modifydate": "2001-09-19T13:53:00", "lines": 75, "newlines": 75, "modlines": 0, "user": "EGHF3PY"}, "text": "<<CICSMAP>>\n:\n:CICSMAP SOURCE-NAME\n:CICSMAP CMCX5601\n:\n:\nPUSH\nF CICSMAP\n+EDIT /XXXXXXXX/+A1+/\nLET L1 = SUBSTR(A1 1 4)\n+EDIT /XXXX/+L1+/\nLET L9 = A1\nLET L9 = MODIFY(L9 'K' 3)\n+EDIT /YYYYYYYY/+L9+/\nLET L2 = SUBSTR(L9 1 4)\n+EDIT /YYYY/+L2+/\nLET L3 = SUBSTR(L9 1 6)\n+EDIT /ZZZZZZZZ/+L3+/\nLET L4 = SUBSTR(A1 1 6)\nDEL 1 99\nSET ATTACH NOPAUSE\nA /????????/\n:+UPDATE +L4+JC\nPOP\nRETURN\n//JOBNAME  JOB  (ACCTINFO),'PGMR - XXXXXXXX ',CLASS=K,MSGCLASS=S\n//          MSGLEVEL=(1,1)\n//PROCLIB JCLLIB ORDER=USERID.DVL.PROC\n//        SET TITLE1='PFX.XXXXXXXX'\n//OUTPUT INCLUDE MEMBER=DESTCH\n//JOBLIB    DD DSN=DATACOM.MMM.DVL.DBLOAD,DISP=SHR\n//*-------------------------------------------------------------------*\n//* STEP 1 - LOAD BMS STATEMENTS TO A TEMP DATA SET (SOURCE)          *\n//*-------------------------------------------------------------------*\n//STEP1     EXEC LIBACS,LIBRARY='DVL.SOURCE.LIBMAST'\n//SYSIN    DD  *\n-OPT EXEC\n-SEL XXXXXXXX,XXXX,COPYDD,SEQ=/81,6,10,10/,TEMP\n-END\n/*\n//*-------------------------------------------------------------------*\n//* STEP 2 - TWO ASSEMBLIES                                           *\n//*          CREATE MAP DSECT TO  CICS.APPLIB(ZZZZZZZZ)               *\n//*          CREATE MAP LOAD MODULE TO &&LOADSET                      *\n//*-------------------------------------------------------------------*\n//STEP2    EXEC  CICSMAPN,LIB='CICS.APPLIB',MEM=ZZZZZZZZ\n//*-------------------------------------------------------------------*\n//* STEP 3 - LINK MAP LOAD MODULE                                     *\n//*-------------------------------------------------------------------*\n//STEP3    EXEC CICSLNKM,COND.LKED=(5,LT,STEP2.MAP),\n//         LOAD='HLQ.MMM.DVL.ONLLOAD',PPTNAME=ZZZZZZZZ\n//*-------------------------------------------------------------------*\n//* STEP 4 - WRITE MAP DSECT TO LIBRARIAN                             *\n//*-------------------------------------------------------------------*\n//STEP4     EXEC PGM=LIBRPROG,PARM='NRJS,NJTA,IEX=ADDCHK',REGION=1024K\n//SYSPRINT  DD SYSOUT=*\n//SYSABEND  DD SYSOUT=*\n//INDEX     DD SYSOUT=*\n//LIST      DD SYSOUT=*\n//MASTER    DD DSN=DVL.SOURCE.LIBMAST,DISP=SHR\n//OSJOB     DD DSN=&&SOURCE,DISP=(,PASS),SPACE=(CYL,(5,1)),\n//             UNIT=SYSDA,DCB=(RECFM=FB,LRECL=80)\n//SYSIN    DD  DDNAME=SYSC1\n//         DD  DSN=CICS.APPLIB(ZZZZZZZZ),DISP=SHR\n//         DD  *\n-END\n/*\n//SYSC1    DD  *\n-OPT EXEC\n-DLM YYYYYYYY,PSWD=YYYY\n-ADD YYYYYYYY,PSWD=YYYY,SEQ=/73,7,1,1/\n-PGMR FIRST-LAST\n-DESC ????????\n-LANG COB\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CLEANROS": {"ttr": 4871, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%?\\x01\\x01%?\\x14\\x18\\x00\\x1c\\x00\\x1c\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-10T00:00:00", "modifydate": "2001-09-10T14:18:00", "lines": 28, "newlines": 28, "modlines": 0, "user": "EGHF3PY"}, "text": "<<CLEANROS>>\nPUSH\nTRAP ON\nDELETE ZZZZZMSG\nDELETE ZZZZZDIR\nDELETE ZZZZZLOC\nDELETE ZZZZZSTA\nDELETE ZZZZZLC5\nDELETE ZZZZLC15\nDELETE ZZZZLC54\nDELETE SAVAWS\nDELETE SAVAWS2\nDELETE SAVAWS01\nDELETE SAVAWS02\nDELETE SAVAWS03\nDELETE SAVAWS04\nDELETE SAVAWS05\nDELETE SAVAWS06\nDELETE SAVAWS07\nDELETE $$SAVAWS\nDELETE LIBUPD\nDELETE XSAVUT02\nDELETE UT2HITS\nDELETE $$DBINFO\nDELETE $$CCMSGS\nDELETE\nTRAP OFF\nPOP\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CSHCSH": {"ttr": 4873, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01\\x15\\x8f\\x01\\x01\\x15\\x8f\\x13X\\x00\\x01\\x00\\x01\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-06-07T00:00:00", "modifydate": "2001-06-07T13:58:00", "lines": 1, "newlines": 1, "modlines": 0, "user": "EGHF3PY"}, "text": "CSHCSH\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DATE": {"ttr": 4875, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%?\\x01\\x01%?\\x14$\\x00\\x18\\x00\\x18\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-10T00:00:00", "modifydate": "2001-09-10T14:24:00", "lines": 24, "newlines": 24, "modlines": 0, "user": "EGHF3PY"}, "text": "<<DATE>>\n:\n:   DATE 'MM/DD/YY'\n:\nIF (A1 EQ '')\n   LET L1 = DATEFUN('AC')\n   LET L2 = DATEFUN('JC')\n   +RESPONSE '+L1+   +L2+'\n   RETURN\nENDIF\nIF (LENGTH(A1) LT 8)\n    GOTO <<JDATE>>\nENDIF\nLET L1 = A1\n+LET L2 = DATEFUN('JCA' '+A1+')\n+RESPONSE '+L1+   +L2+'\nRETURN\n<<JDATE>>\n:\n:   DATE 'YY/DDD'\n:\nLET L1 = A1\n+LET L2 = DATEFUN('ACJ' '+A1+')\n+RESPONSE '+L1+   +L2+'\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DCOB2C": {"ttr": 4877, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%?\\x01\\x01%?\\x14(\\x00\\x1f\\x00\\x1f\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-10T00:00:00", "modifydate": "2001-09-10T14:28:00", "lines": 31, "newlines": 31, "modlines": 0, "user": "EGHF3PY"}, "text": "<<DCOB2C>>\nF DCOB2C\n+E /XXXXXXXX/+A1+/ 100 ,,\nLET L1 = SUBSTR(A1 1 4)\n+E /YYYY/+L1+/ 800\nLET L1 = SUBSTR(A1 1 6)\n+E /ZZZZZZ/+L1+/ 1500\nLET L1 = SUBSTR(A1 1 6)\n+E /WWWWWW/+L1+/ 1700\nDEL 1 99\nRETURN\n:\n//JOBNAME  JOB (ACCTINFO),'PGMR   XXXXXXXX',MSGCLASS=S,CLASS=K\n//PROCLIB JCLLIB ORDER=USERID.DVL.PROC\n//        SET TITLE1='PFX.XXXXXXXX'\n//OUTPUT INCLUDE MEMBER=DESTCH\n//*-------------------------------------------------------------------*\n//*        DATA BASE COBOL II COMPILE                                 *\n//*-------------------------------------------------------------------*\n//STEP01   EXEC  COB3CLE,LIBRARY='DVL.SOURCE.LIBMAST',\n//        LOPT='AMODE=31,RMODE=ANY'\n//UPDATE.SYSIN DD  *\n-SEL XXXXXXXX,YYYY,NOLIST,EXEC,COPYDD,VAR\n-END\n//LKED.SYSLIB  DD\n//             DD\n//             DD DSN=HLQ.DVL.BATLOAD,DISP=SHR\n//LKED.SYSIN DD *\n  INCLUDE FTBLOBJ(ZZZZZZRT)\n  ENTRY BEGIN\n  NAME WWWWWW(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DCOB2CL": {"ttr": 4879, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%?\\x01\\x01%?\\x14P\\x00 \\x00 \\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-10T00:00:00", "modifydate": "2001-09-10T14:50:00", "lines": 32, "newlines": 32, "modlines": 0, "user": "EGHF3PY"}, "text": "<<DCOB2CL>>\nF DCOB2CL\n+E /XXXXXXXX/+A1+/ 100 ,,\nLET L1 = SUBSTR(A1 1 4)\n+E /YYYY/+L1+/ 800\nLET L1 = SUBSTR(A1 1 6)\n+E /ZZZZZZ/+L1+/ 1500\nLET L1 = SUBSTR(A1 1 6)\n+E /WWWWWW/+L1+/ 1700\nDEL 1 99\nRETURN\n:\n//JOBNAME  JOB (ACCTINFO),'PGMR   XXXXXXXX',MSGCLASS=S,CLASS=K\n//PROCLIB JCLLIB ORDER=USERID.DVL.PROC\n//        SET TITLE1='PFX.XXXXXXXX'\n//OUTPUT INCLUDE MEMBER=DESTCH\n//STEP01   EXEC  COB3CLE,LIBRARY='DVL.SOURCE.LIBMAST',\n//*-------------------------------------------------------------------*\n//*        DATA BASE COBOL II COMPILE AND LINK EDIT                   *\n//*-------------------------------------------------------------------*\n//        LOPT='AMODE=31,RMODE=ANY'\n//UPDATE.SYSIN DD  *\n-SEL XXXXXXXX,YYYY,NOLIST,EXEC,COPYDD,VAR\n-END\n//LKED.SYSLIB  DD\n//             DD\n//             DD DSN=HLQ.DVL.BATLOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=HLQ.DVL.BATLOAD,DISP=SHR\n//LKED.SYSIN DD *\n  INCLUDE FTBLOBJ(ZZZZZZRT)\n  ENTRY BEGIN\n  NAME WWWWWW(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DD": {"ttr": 4881, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%?\\x01\\x01%?\\x15\\x00\\x00\\x02\\x00\\x02\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-10T00:00:00", "modifydate": "2001-09-10T15:00:00", "lines": 2, "newlines": 2, "modlines": 0, "user": "EGHF3PY"}, "text": "<<DD>>\nDETACH DSN\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DDADIJCL": {"ttr": 4883, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%?\\x01\\x01%?\\x15\\x04\\x00\\x16\\x00\\x16\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-10T00:00:00", "modifydate": "2001-09-10T15:04:00", "lines": 22, "newlines": 22, "modlines": 0, "user": "EGHF3PY"}, "text": "//  EXEC  COB3INT,USERID='?USERID',MODULE=?LNAM\n//UPDATE.STEPLIB DD DSN=DATACOM.?APID.?ENVR.DBLOAD,DISP=SHR\n//UPDATE.MASTER   DD  DSN=?SRCE,DISP=SHR\n//UPDATE.AUXINC1  DD  DSN=HLQ.?APID.SAT.LIBMAST,DISP=SHR\n//UPDATE.AUXINC2  DD  DSN=HLQ.?APID.PRD.LIBMAST,DISP=SHR\n//UPDATE.AUXINC3  DD  DSN=HLQ.PRD.LIBMAST,DISP=SHR\n//UPDATE.AUXINC4  DD  DSN=HLQ.?APID.SAT.LIBMAST,DISP=SHR\n//UPDATE.SYSIN    DD  *\n-SEL ?MEMB,?PSWD,NOLIST,EXEC,COPYDD,VAR\n-PGMR ?PGMR\n-DESC ?DESC\n-REP ALL\n-END\n//LKED.SYSLIB DD DSN=SYS1.SCEELKED,DISP=SHR\n//            DD DSN=?BLNK,DISP=SHR\n//            DD DSN=SYS2.LINKLIB,DISP=SHR\n//            DD DSN=HLQ.DVL.BATLOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=?BLNK,DISP=SHR\n//LKED.SYSIN DD *\n  INCLUDE FTBLOBJ(?URTN)\n  ENTRY BEGIN\n  NAME ?LNAM(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DDADXJCL": {"ttr": 4885, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%?\\x01\\x01%?\\x15\\x05\\x00\\x18\\x00\\x18\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-10T00:00:00", "modifydate": "2001-09-10T15:05:00", "lines": 24, "newlines": 24, "modlines": 0, "user": "EGHF3PY"}, "text": "//  EXEC  COB3CLE,LIBRARY='?SRCE',\n//        LVL=?ENVR,DIV=?APID,\n//        OPT='DATA(?DLEN),?BCOP',\n//        LOPT='?BMOP,?BLOP'\n//STEPLIB DD DSN=DATACOM.?APID.?ENVR.DBLOAD,DISP=SHR\n//UPDATE.AUXINC1  DD  DSN=HLQ.?APID.SAT.LIBMAST,DISP=SHR\n//UPDATE.AUXINC2  DD  DSN=HLQ.?APID.PRD.LIBMAST,DISP=SHR\n//UPDATE.AUXINC3  DD  DSN=HLQ.PRD.LIBMAST,DISP=SHR\n//UPDATE.SYSIN    DD  *\n-SEL ?MEMB,?PSWD,NOLIST,EXEC,COPYDD,VAR\n-PGMR ?PGMR\n-DESC ?DESC\n-REP ALL\n-END\n//LKED.SYSLIB DD DSN=SYS1.SCEELKED,DISP=SHR\n//            DD DSN=SYS1.SIGYCOMP,DISP=SHR\n//            DD DSN=?BLNK,DISP=SHR\n//            DD DSN=SYS2.LINKLIB,DISP=SHR\n//            DD DSN=HLQ.DVL.BATLOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=?BLNK,DISP=SHR\n//LKED.SYSIN DD *\n  INCLUDE FTBLOBJ(?URTN)\n  ENTRY BEGIN\n  NAME ?LNAM(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DDAXIJCL": {"ttr": 4887, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x01%?\\x01\\x01%?\\x15\\x06\\x00\\x14\\x00\\x14\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2001-09-10T00:00:00", "modifydate": "2001-09-10T15:06:00", "lines": 20, "newlines": 20, "modlines": 0, "user": "EGHF3PY"}, "text": "//  EXEC  COB3INT,USERID='?USERID',MODULE=?LNAM\n//UPDATE.STEPLIB DD DSN=DATACOM.?APID.?ENVR.DBLOAD,DISP=SHR\n//UPDATE.MASTER   DD  DSN=?SRCE,DISP=SHR\n//UPDATE.AUXINC1  DD  DSN=HLQ.?APID.SAT.LIBMAST,DISP=SHR\n//UPDATE.AUXINC2  DD  DSN=HLQ.?APID.PRD.LIBMAST,DISP=SHR\n//UPDATE.AUXINC3  DD  DSN=HLQ.PRD.LIBMAST,DISP=SHR\n//UPDATE.AUXINC4  DD  DSN=HLQ.?APID.SAT.LIBMAST,DISP=SHR\n//UPDATE.SYSIN    DD  *\n-SEL ?MEMB,?PSWD,NOLIST,EXEC,COPYDD,VAR\n-PGMR ?PGMR\n-DESC ?DESC\n-REP ALL\n-END\n//LKED.SYSLIB DD DSN=SYS1.SCEELKED,DISP=SHR\n//            DD DSN=?BLNK,DISP=SHR\n//            DD DSN=SYS2.LINKLIB,DISP=SHR\n//            DD DSN=HLQ.DVL.BATLOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=?BLNK,DISP=SHR\n//LKED.SYSIN DD *\n  NAME ?LNAM(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DDAXXJCL": {"ttr": 4889, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%?\\x01\\x01%?\\x15\\x07\\x00\\x16\\x00\\x16\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-10T00:00:00", "modifydate": "2001-09-10T15:07:00", "lines": 22, "newlines": 22, "modlines": 0, "user": "EGHF3PY"}, "text": "//  EXEC  COB3CLE,LIBRARY='?SRCE',\n//        LVL=?ENVR,DIV=?APID,\n//        OPT='DATA(?DLEN),?BCOP',\n//        LOPT='?BMOP,?BLOP'\n//STEPLIB DD DSN=DATACOM.?APID.?ENVR.DBLOAD,DISP=SHR\n//UPDATE.AUXINC1  DD  DSN=HLQ.?APID.SAT.LIBMAST,DISP=SHR\n//UPDATE.AUXINC2  DD  DSN=HLQ.?APID.PRD.LIBMAST,DISP=SHR\n//UPDATE.AUXINC3  DD  DSN=HLQ.PRD.LIBMAST,DISP=SHR\n//UPDATE.SYSIN    DD  *\n-SEL ?MEMB,?PSWD,NOLIST,EXEC,COPYDD,VAR\n-PGMR ?PGMR\n-DESC ?DESC\n-REP ALL\n-END\n//LKED.SYSLIB DD DSN=SYS1.SCEELKED,DISP=SHR\n//            DD DSN=SYS1.SIGYCOMP,DISP=SHR\n//            DD DSN=?BLNK,DISP=SHR\n//            DD DSN=SYS2.LINKLIB,DISP=SHR\n//            DD DSN=HLQ.DVL.BATLOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=?BLNK,DISP=SHR\n//LKED.SYSIN DD *\n  NAME ?LNAM(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DDBXIJCL": {"ttr": 4891, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%?\\x01\\x01%?\\x15\\t\\x00&\\x00&\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-10T00:00:00", "modifydate": "2001-09-10T15:09:00", "lines": 38, "newlines": 38, "modlines": 0, "user": "EGHF3PY"}, "text": "//LIBRARY  EXEC  LIBACS,LIBRARY='?SRCE',\n//         ENV='?APID',PLATFORM='?ENVR'\n//STEPLIB DD DSN=DATACOM.?APID.?ENVR.DBLOAD,DISP=SHR\n//UPDATE.AUXINC1  DD  DSN=HLQ.?APID.SAT.LIBMAST,DISP=SHR\n//UPDATE.AUXINC2  DD  DSN=HLQ.?APID.PRD.LIBMAST,DISP=SHR\n//UPDATE.AUXINC3  DD  DSN=HLQ.PRD.LIBMAST,DISP=SHR\n//UPDATE.SYSIN  DD  *\n-SEL ?MEMB,?PSWD,NOLIST,EXEC,COPYDD,VAR\n-PGMR ?PGMR\n-DESC ?DESC\n-REP ALL\n-END\n//COBOL  EXEC  CICSCOBI,AAFX='?APIDDY2AA',\n//         ULIB2='CICS.EDI.MONITOR.APPLIB',\n//         ULIB3='CICS.EDI.MONITOR.SOURCE',\n//         ULIB6='HLQ.DVL.ONLMAP',\n//         INTVER='V54.',\n//         INDEX='CICS.APP',\n//         PLATFORM='?ENVR',ENV='',\n//         CUTPRT=',CUTPRINT=MAP',PLIST='NOLIST',\n//         PPTNAME='?LNAM',ULIB='?MAPC',\n//         OPT='DATA(?DLEN),?CCOP'\n//GENPARM.STEPLIB DD DSN=INTRCICS.ALIAS.DVL.ACS.LOADLIB,DISP=SHR\n//LISTER.STEPLIB DD DSN=INTRCICS.ALIAS.DVL.ACS.LOADLIB,DISP=SHR\n//LINK   EXEC  CICSLNKC,COND=(5,LT,COBOL.COMP),\n//         INDEX='CICS.APP',\n//         PLATFORM='?ENVR',PPTNAME='?LNAM',\n//         MODE='?CMOP',LOPT='?CLOP'\n//LKED.SYSLIB  DD\n//             DD DSN=HLQ.DVL.ONLLOAD,DISP=SHR\n//             DD\n//             DD\n//             DD DSN=HLQ.DVL.BATLOAD,DISP=SHR\n//             DD DSN=HLQ.DVL.BATLOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=?OLNK,DISP=SHR\n//LKED.SYSIN DD *\n  INCLUDE DBLOAD(DBCSVPR)\n  NAME ?LNAM(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DDBXXJCL": {"ttr": 4893, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%?\\x01\\x01%?\\x15\\x10\\x00\\x1e\\x00\\x1e\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-10T00:00:00", "modifydate": "2001-09-10T15:10:00", "lines": 30, "newlines": 30, "modlines": 0, "user": "EGHF3PY"}, "text": "//LIBRARY  EXEC  LIBACS,LIBRARY='?SRCE',\n//         ENV='?APID',PLATFORM='?ENVR'\n//STEPLIB DD DSN=DATACOM.?APID.?ENVR.DBLOAD,DISP=SHR\n//UPDATE.AUXINC1  DD  DSN=HLQ.?APID.SAT.LIBMAST,DISP=SHR\n//UPDATE.AUXINC2  DD  DSN=HLQ.?APID.PRD.LIBMAST,DISP=SHR\n//UPDATE.AUXINC3  DD  DSN=HLQ.PRD.LIBMAST,DISP=SHR\n//UPDATE.SYSIN  DD  *\n-SEL ?MEMB,?PSWD,NOLIST,EXEC,COPYDD,VAR\n-PGMR ?PGMR\n-DESC ?DESC\n-REP ALL\n-END\n//COBOL  EXEC  CICSCOB,AAFX='?APIDDY2AA',\n//         INDEX='CICS.APP',\n//         PLIST='NOLIST',ULIB='?MAPC',\n//         OPT='DATA(?DLEN),?CCOP'\n//LINK   EXEC  CICSLNKC,COND=(5,LT,COBOL.COMP),\n//         INDEX='CICS.APP',\n//         PLATFORM='?ENVR',PPTNAME='?LNAM',\n//         MODE='?CMOP',LOPT='?CLOP'\n//LKED.SYSLIB  DD\n//             DD DSN=HLQ.DVL.ONLLOAD,DISP=SHR\n//             DD\n//             DD\n//             DD DSN=HLQ.DVL.BATLOAD,DISP=SHR\n//             DD DSN=HLQ.DVL.BATLOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=?OLNK,DISP=SHR\n//LKED.SYSIN DD *\n  INCLUDE DBLOAD(DBCSVPR)\n  NAME ?LNAM(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DDCDIJCL": {"ttr": 4895, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%?\\x01\\x01%?\\x15\\x10\\x00\\x16\\x00\\x16\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-10T00:00:00", "modifydate": "2001-09-10T15:10:00", "lines": 22, "newlines": 22, "modlines": 0, "user": "EGHF3PY"}, "text": "//  EXEC  COB3INT,USERID='?USERID',MODULE=?LNAM\n//UPDATE.STEPLIB DD DSN=DATACOM.?APID.?ENVR.DBLOAD,DISP=SHR\n//UPDATE.MASTER   DD  DSN=DVL.SOURCE.LIBMAST,DISP=SHR\n//UPDATE.AUXINC1  DD  DSN=SAT.SOURCE.LIBMAST,DISP=SHR\n//UPDATE.AUXINC2  DD  DSN=HLQ.?APID.PRD.LIBMAST,DISP=SHR\n//UPDATE.AUXINC3  DD  DSN=HLQ.PRD.LIBMAST,DISP=SHR\n//UPDATE.SYSIN    DD  *\n-SEL ?MEMB,?PSWD,NOLIST,EXEC,COPYDD,VAR\n-PGMR ?PGMR\n-DESC ?DESC\n-REP ALL\n-END\n//LKED.SYSLIB DD\n//            DD\n//            DD\n//            DD DSN=HLQ.DVL.BATLOAD,DISP=SHR\n//            DD DSN=?BLNK,DISP=SHR\n//LKED.SYSLMOD DD DSN=HLQ.DVL.BATLOAD,DISP=SHR\n//LKED.SYSIN DD *\n  INCLUDE FTBLOBJ(?URTN)\n  ENTRY BEGIN\n  NAME ?LNAM(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DDCDXJCL": {"ttr": 5122, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%?\\x01\\x01%?\\x15\\x11\\x00\\x18\\x00\\x18\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-10T00:00:00", "modifydate": "2001-09-10T15:11:00", "lines": 24, "newlines": 24, "modlines": 0, "user": "EGHF3PY"}, "text": "//  EXEC  COB3CLE,LIBRARY='DVL.SOURCE.LIBMAST',\n//        LVL=?ENVR,DIV=?APID,\n//        OPT='DATA(?DLEN),?BCOP',\n//        LOPT='?BMOP,?BLOP'\n//STEPLIB DD DSN=DATACOM.?APID.?ENVR.DBLOAD,DISP=SHR\n//UPDATE.AUXINC1  DD  DSN=SAT.SOURCE.LIBMAST,DISP=SHR\n//UPDATE.AUXINC2  DD  DSN=HLQ.?APID.PRD.LIBMAST,DISP=SHR\n//UPDATE.AUXINC3  DD  DSN=HLQ.PRD.LIBMAST,DISP=SHR\n//UPDATE.SYSIN    DD  *\n-SEL ?MEMB,?PSWD,NOLIST,EXEC,COPYDD,VAR\n-PGMR ?PGMR\n-DESC ?DESC\n-REP ALL\n-END\n//LKED.SYSLIB DD\n//            DD\n//            DD\n//            DD DSN=HLQ.DVL.BATLOAD,DISP=SHR\n//            DD DSN=?BLNK,DISP=SHR\n//LKED.SYSLMOD DD DSN=HLQ.DVL.BATLOAD,DISP=SHR\n//LKED.SYSIN DD *\n  INCLUDE FTBLOBJ(?URTN)\n  ENTRY BEGIN\n  NAME ?LNAM(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DDCXIJCL": {"ttr": 5124, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%?\\x01\\x01%?\\x15\\x11\\x00\\x14\\x00\\x14\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-10T00:00:00", "modifydate": "2001-09-10T15:11:00", "lines": 20, "newlines": 20, "modlines": 0, "user": "EGHF3PY"}, "text": "//  EXEC  COB3INT,USERID='?USERID',MODULE=?LNAM\n//UPDATE.STEPLIB DD DSN=DATACOM.?APID.?ENVR.DBLOAD,DISP=SHR\n//UPDATE.MASTER   DD  DSN=DVL.SOURCE.LIBMAST,DISP=SHR\n//UPDATE.AUXINC1  DD  DSN=SAT.SOURCE.LIBMAST,DISP=SHR\n//UPDATE.AUXINC2  DD  DSN=HLQ.?APID.PRD.LIBMAST,DISP=SHR\n//UPDATE.AUXINC3  DD  DSN=HLQ.PRD.LIBMAST,DISP=SHR\n//UPDATE.SYSIN    DD  *\n-SEL ?MEMB,?PSWD,NOLIST,EXEC,COPYDD,VAR\n-PGMR ?PGMR\n-DESC ?DESC\n-REP ALL\n-END\n//LKED.SYSLIB DD\n//            DD\n//            DD\n//            DD DSN=HLQ.DVL.BATLOAD,DISP=SHR\n//            DD DSN=?BLNK,DISP=SHR\n//LKED.SYSLMOD DD DSN=HLQ.DVL.BATLOAD,DISP=SHR\n//LKED.SYSIN DD *\n  NAME ?LNAM(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DDCXXJCL": {"ttr": 5126, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%?\\x01\\x01%?\\x15\\x12\\x00\\x16\\x00\\x16\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-10T00:00:00", "modifydate": "2001-09-10T15:12:00", "lines": 22, "newlines": 22, "modlines": 0, "user": "EGHF3PY"}, "text": "//  EXEC  COB3CLE,LIBRARY='DVL.SOURCE.LIBMAST',\n//        LVL=?ENVR,DIV=?APID,\n//        OPT='DATA(?DLEN),?BCOP',\n//        LOPT='?BMOP,?BLOP'\n//STEPLIB DD DSN=DATACOM.?APID.?ENVR.DBLOAD,DISP=SHR\n//UPDATE.AUXINC1  DD  DSN=SAT.SOURCE.LIBMAST,DISP=SHR\n//UPDATE.AUXINC2  DD  DSN=HLQ.?APID.PRD.LIBMAST,DISP=SHR\n//UPDATE.AUXINC3  DD  DSN=HLQ.PRD.LIBMAST,DISP=SHR\n//UPDATE.SYSIN    DD  *\n-SEL ?MEMB,?PSWD,NOLIST,EXEC,COPYDD,VAR\n-PGMR ?PGMR\n-DESC ?DESC\n-REP ALL\n-END\n//LKED.SYSLIB DD\n//            DD\n//            DD\n//            DD DSN=HLQ.DVL.BATLOAD,DISP=SHR\n//            DD DSN=?BLNK,DISP=SHR\n//LKED.SYSLMOD DD DSN=HLQ.DVL.BATLOAD,DISP=SHR\n//LKED.SYSIN DD *\n  NAME ?LNAM(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DDD": {"ttr": 5128, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%?\\x01\\x01%?\\x15\\x16\\x00\\x07\\x00\\x07\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-10T00:00:00", "modifydate": "2001-09-10T15:16:00", "lines": 7, "newlines": 7, "modlines": 0, "user": "EGHF3PY"}, "text": "<<DDD>>\n   IF (A1 EQ '')\n      RESPONSE 'DD MEMBERNAME'\n      RETURN\n   ENDIF\n   +DELETE +A1+\n   +RESPONSE '+A1+ DELETED'\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DDDXIJCL": {"ttr": 5130, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%?\\x01\\x01%?\\x15\\x19\\x00%\\x00%\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-10T00:00:00", "modifydate": "2001-09-10T15:19:00", "lines": 37, "newlines": 37, "modlines": 0, "user": "EGHF3PY"}, "text": "//LIBRARY  EXEC  LIBACS,LIBRARY='DVL.SOURCE.LIBMAST',\n//         ENV='?APID',PLATFORM='?ENVR'\n//STEPLIB DD DSN=DATACOM.?APID.?ENVR.DBLOAD,DISP=SHR\n//UPDATE.AUXINC1  DD  DSN=SAT.SOURCE.LIBMAST,DISP=SHR\n//UPDATE.AUXINC2  DD  DSN=HLQ.?APID.PRD.LIBMAST,DISP=SHR\n//UPDATE.AUXINC3  DD  DSN=HLQ.PRD.LIBMAST,DISP=SHR\n//UPDATE.SYSIN  DD  *\n-SEL ?MEMB,?PSWD,NOLIST,EXEC,COPYDD,VAR\n-PGMR ?PGMR\n-DESC ?DESC\n-REP ALL\n-END\n//COBOL  EXEC  CICSCOBI,AAFX='?APIDDY2AA',\n//         ULIB2='CICS.EDI.MONITOR.APPLIB',\n//         ULIB3='CICS.EDI.MONITOR.SOURCE',\n//         INTVER='V54.',\n//         INDEX='CICS.APP',\n//         PLATFORM='?ENVR',ENV='',\n//         CUTPRT=',CUTPRINT=MAP',PLIST='NOLIST',\n//         PPTNAME='?LNAM',ULIB='?MAPC',\n//         OPT='DATA(?DLEN),?CCOP'\n//GENPARM.STEPLIB DD DSN=INTRCICS.ALIAS.DVL.ACS.LOADLIB,DISP=SHR\n//LISTER.STEPLIB DD DSN=INTRCICS.ALIAS.DVL.ACS.LOADLIB,DISP=SHR\n//LINK   EXEC  CICSLNKC,COND=(5,LT,COBOL.COMP),\n//         INDEX='CICS.APP',\n//         PLATFORM='?ENVR',PPTNAME='?LNAM',\n//         MODE='?CMOP',LOPT='?CLOP'\n//LKED.SYSLIB  DD\n//             DD\n//             DD\n//             DD\n//             DD DSN=HLQ.DVL.BATLOAD,DISP=SHR\n//             DD DSN=HLQ.DVL.BATLOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=HLQ.DVL.ONLLOAD,DISP=SHR\n//LKED.SYSIN DD *\n  INCLUDE DBLOAD(DBCSVPR)\n  NAME ?LNAM(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DDDXXJCL": {"ttr": 5132, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%?\\x01\\x01%?\\x15\\x19\\x00\\x1e\\x00\\x1e\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-10T00:00:00", "modifydate": "2001-09-10T15:19:00", "lines": 30, "newlines": 30, "modlines": 0, "user": "EGHF3PY"}, "text": "//LIBRARY  EXEC  LIBACS,LIBRARY='DVL.SOURCE.LIBMAST',\n//         ENV='?APID',PLATFORM='?ENVR'\n//STEPLIB DD DSN=DATACOM.?APID.?ENVR.DBLOAD,DISP=SHR\n//UPDATE.AUXINC1  DD  DSN=SAT.SOURCE.LIBMAST,DISP=SHR\n//UPDATE.AUXINC2  DD  DSN=HLQ.?APID.PRD.LIBMAST,DISP=SHR\n//UPDATE.AUXINC3  DD  DSN=HLQ.PRD.LIBMAST,DISP=SHR\n//UPDATE.SYSIN  DD  *\n-SEL ?MEMB,?PSWD,NOLIST,EXEC,COPYDD,VAR\n-PGMR ?PGMR\n-DESC ?DESC\n-REP ALL\n-END\n//COBOL  EXEC  CICSCOB,AAFX='?APIDDY2AA',\n//         INDEX='CICS.APP',\n//         PLIST='NOLIST',ULIB='?MAPC',\n//         OPT='DATA(?DLEN),?CCOP'\n//LINK   EXEC  CICSLNKC,COND=(5,LT,COBOL.COMP),\n//         INDEX='CICS.APP',\n//         PLATFORM='?ENVR',PPTNAME='?LNAM',\n//         MODE='?CMOP',LOPT='?CLOP'\n//LKED.SYSLIB  DD\n//             DD\n//             DD\n//             DD\n//             DD DSN=HLQ.DVL.BATLOAD,DISP=SHR\n//             DD DSN=HLQ.DVL.BATLOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=HLQ.DVL.ONLLOAD,DISP=SHR\n//LKED.SYSIN DD *\n  INCLUDE DBLOAD(DBCSVPR)\n  NAME ?LNAM(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DDXXXPAN": {"ttr": 5134, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%?\\x01\\x01%?\\x15!\\x00\\x1f\\x00\\x1f\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-10T00:00:00", "modifydate": "2001-09-10T15:21:00", "lines": 31, "newlines": 31, "modlines": 0, "user": "EGHF3PY"}, "text": "STARTDEF\nTAG ! S\nTAG ` SI  XTRA\nTAG @ SH\nTAG $ UM  OPTION MEMBER REPLACE SUBMIT\nTAG % SH  MSG\n@                        Your Company Name Here\n                         @PRODUCTION FIX COMPILE MENU\n\n@Year 2000 Renovated Modules:\n\n                         !A.   Batch Program Compile\n\n                         !B.   CICS Program Compile\n\n@      Non-Year 2000 Modules:\n\n                         !C.   Batch Program Compile\n\n                         !D.   CICS Program Compile\n\n                 !Option:$_!        Member:$________!\n\n                                 !Replace?:$_!(y/n)\n                                  !Submit?:$_!(y/n)\n\n%\n%\n%\n%PF1-Help                    2-Set Defaults                    CLEAR-Terminate\nENDDEF\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DECTOHEX": {"ttr": 5136, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%?\\x01\\x01%?\\x15\"\\x00\\x0f\\x00\\x0f\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-10T00:00:00", "modifydate": "2001-09-10T15:22:00", "lines": 15, "newlines": 15, "modlines": 0, "user": "EGHF3PY"}, "text": "<<DECTOHEX>>\nPUSH\nLET L1=A1\nLET P16=''\n<<LOOP1>>\nLET L2=L1/16\nLET L3=L1 - (L2 * 16)\nLET P16=SUBSTR('0123456789ABCDEF' L3+1 1) | P16\nIF (L2 GT 0)\n   LET L1=L2\n   GOTO <<LOOP1>>\nENDIF\n+RESPONSE '+A1+=+P16+'\nPOP\nRETURN\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DEDUP": {"ttr": 5138, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%?\\x01\\x01%?\\x15%\\x00\\x1a\\x00\\x1a\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-10T00:00:00", "modifydate": "2001-09-10T15:25:00", "lines": 26, "newlines": 26, "modlines": 0, "user": "EGHF3PY"}, "text": "<<DEDUP>>\n:\n: DEDUP STARTCOL ENDCOL\n:\nPUSH\nTOP\nTRAP ON\nSET ATTACH NOPAUSE\nREAD AWS * L1                             : L1 IS COPY OF LINE\nLET L2 = A2 - A1 + 1                      : L2 IS LENGTH\n<<LOOP>>\n+LET L3 = SUBSTR(L1 +A1+ +L2+)            : L3 IS SUBSTR OF LINE\nLET L4 = SEQ\nLET L5 = SEQ + 1\nIF (L5 LE HIGHSEQ) THEN\n+  DELETES +A1+ +A2+ /+L3+/ +L5+ ,,\n+  ATTACH +L4+\n   READ AWS *+1 L1\n   GOTO <<LOOP>>\nENDIF\n<<END>>\nTOP\nATTACH\nTRAP OFF\nPOP\nRETURN\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DELDUPS": {"ttr": 5140, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%?\\x01\\x01%?\\x150\\x00\\x1d\\x00\\x1d\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-10T00:00:00", "modifydate": "2001-09-10T15:30:00", "lines": 29, "newlines": 29, "modlines": 0, "user": "EGHF3PY"}, "text": "<<DELDUPS>> : A1=COL, A2=LEN\nIF A1 EQ ''\n    WRITE ' '\n    WRITE 'ENTER COMPARE COLUMN'\n    READ L4\nELSE\n    LET L4 = A1\nENDIF\nIF A2 EQ ''\n    WRITE ' '\n    WRITE 'ENTER COMPARE LENGTH'\n    READ L5\nELSE\n    LET L5 = A2\nENDIF\nSET STMTCNT MAX\nRENUMBER 1 1\nREAD AWS 1 L3\nLET L2 = TRIM(SUBSTR(L3 L4 L5))\nLOOP L1 FROM 2 TO HIGHSEQ BY 1\n  +READ AWS +L1+ L3\n  LET L3 = TRIM(SUBSTR(L3 L4 L5))\n  IF L2 EQ L3\n      +DELETE +L1+\n  ELSE\n      LET L2 = L3\n  ENDIF\nENDLOOP\nRETURN\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DIR": {"ttr": 5142, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%?\\x01\\x01%?\\x152\\x00\\x0f\\x00\\x0f\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-10T00:00:00", "modifydate": "2001-09-10T15:32:00", "lines": 15, "newlines": 15, "modlines": 0, "user": "EGHF3PY"}, "text": "<<DIR>>\nIF A1 EQ ''\n    ATTACH LIB +\n    RETURN\nENDIF\nPUSH\nSET ATTACH NOPAUSE\nDELETE\nATTACH LIB +\nCOPY LIB 1 9999 T FULL\nDELETE 100 300\nLSHIFT 3\nDETACH LIB\nPOP\nRETURN\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DJ": {"ttr": 5144, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x01%?\\x01\\x01%?\\x15B\\x00\\x03\\x00\\x03\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2001-09-10T00:00:00", "modifydate": "2001-09-10T15:42:00", "lines": 3, "newlines": 3, "modlines": 0, "user": "EGHF3PY"}, "text": "<<DJ>>\n+DETACH JOB +A1+\nSET CURSOR DATA\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DJN": {"ttr": 5146, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%?\\x01\\x01%?\\x15B\\x00\\x03\\x00\\x03\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-10T00:00:00", "modifydate": "2001-09-10T15:42:00", "lines": 3, "newlines": 3, "modlines": 0, "user": "EGHF3PY"}, "text": "<<DJN>>\nDETACH JOB NOACT\nSET CURSOR DATA\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DL": {"ttr": 5148, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%?\\x01\\x01%?\\x15B\\x00\\x02\\x00\\x02\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-10T00:00:00", "modifydate": "2001-09-10T15:42:00", "lines": 2, "newlines": 2, "modlines": 0, "user": "EGHF3PY"}, "text": "<<DL>>\nDETACH LIB\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DOCC": {"ttr": 5150, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%?\\x01\\x01%?\\x15D\\x00\\t\\x00\\t\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-10T00:00:00", "modifydate": "2001-09-10T15:44:00", "lines": 9, "newlines": 9, "modlines": 0, "user": "EGHF3PY"}, "text": "<<DOCC>>\n::DOCC VERSION FROMNBR TONBR\n:\nLET L1 = A1\nLET L2 = LENGTH(L1)\nIF (L2 EQ 1)\n   LET L1 = '0'|L1\nENDIF\n+FILL 1 3 /H+L1+/ +A2+ +A3+\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ECHO": {"ttr": 5152, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%?\\x01\\x01%?\\x15V\\x00\\x11\\x00\\x11\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-10T00:00:00", "modifydate": "2001-09-10T15:56:00", "lines": 17, "newlines": 17, "modlines": 0, "user": "EGHF3PY"}, "text": "<<ECHO>>\nWRITE 'HIT ONE KEY OR TYPE STOP'\nREAD L1\nIF L1 NE '' THEN\n   GOTO <<NOTPF>>\nENDIF\nLET L2=AID\nRESPONSE L2\nGOTO <<ECHO>>\n<<NOTPF>>\nIF L1 EQ 'STOP' THEN\n   GOTO <<END>>\nENDIF\nRESPONSE L1\nGOTO <<ECHO>>\n<<END>>\nSTOP\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EXGET": {"ttr": 5154, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%?\\x01\\x01%?\\x16\\x00\\x00:\\x00:\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-10T00:00:00", "modifydate": "2001-09-10T16:00:00", "lines": 58, "newlines": 58, "modlines": 0, "user": "EGHF3PY"}, "text": "<<EXGET>>\n:L1 MEMBER NAME\n  PUSH\n  DELETE\n  SET MODE NUMX\n  PANEL ACTIVATE *\n  STARTDEF\n  TAG ! S\n   TAG % UH MEM LIB1 LIB2 LIB3\n   CURSOR MEM\n!\n!                         IMPORT A Y2K MEMBER\n!                      FROM HLQ.DVLCOLL.LIBMAST\n!\n!             ENTER PDS MEMBER NAME: %________!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n  ENDDEF\n  PANEL SEND\n  SET MODE BASIC\n\n<<READ>>\n  IF AID EQ 'CLEAR'\n     GOTO <<END>>\n  ENDIF\n  LET L1 = TRIM(TRIM(P.MEM) '_')\n  IF L1 EQ ' '\n    GOTO <<END>>\n  ENDIF\n+IMPORT DSN=HLQ.DVLCOLL.LIBMAST(+L1+)\n <<ENDIT>>\n  SET ATTACH NOPAUSE\n  ATTACH\n  NOSEQ\n  POP\n  STOP\n <<END>>\n  WRITE '     GETY2K EXITED   '\n  NOSEQ\n  POP\n  STOP\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FINDPGM": {"ttr": 5156, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%?\\x01\\x01%?\\x16\\t\\x00\\x98\\x00\\x98\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-10T00:00:00", "modifydate": "2001-09-10T16:09:00", "lines": 152, "newlines": 152, "modlines": 0, "user": "EGHF3PY"}, "text": "<<FINDPGM>> :RANGE SEARCH RPF FOR ALL LIBRARIES\n:L1 RANGE SEARCH STRING\n  PUSH\n  DELETE\n  SET MODE NUMX\n  PANEL ACTIVATE *\n  STARTDEF\n  TAG ! S\n  TAG % UH MEM\n  TAG \u00a2 (SH RED)\n  TAG # (SH YELLOW)\n   CURSOR MEM\n!***********************************************************************\n!**                        #RANGE SEARCH!                             **\n!**                  #D V L  &  S A T   &  P R O D!                   **\n!**                             #FOR!                                 **\n!**                     \u00a2NON-Y2K & Y2K & ENDEVOR!                     **\n!***********************************************************************\n!\n!                    PLEASE SPECIFY PROGRAM NAME\n!                     (ALL OR PART OF THE NAME)\n!                                OR\n!                        PRESS CLEAR TO EXIT\n!\n!\n!                #MODULE NAME! =====> %________!\n!\n!\n!\n!\n  ENDDEF\n  PANEL SEND\n  SET MODE BASIC\n\n<<READ>>\n  IF AID EQ 'CLEAR'\n     GOTO <<END>>\n  ENDIF\n  LET L1 = TRIM(TRIM(P.MEM) '_')\n  IF L1 EQ ' '\n    GOTO <<FINDPGM>>\n    ENDIF\n  SET MONTRAP ON\n  +IMPORT DSN=DVL.SOURCE.LIBMAST(*),RANGE='+L1+'\n   WRITE AWS T '*******  NON-Y2K DEVELOPMENT *******'\n   WRITE AWS T '                                    '\n   WRITE AWS T '============   NON-Y2K MASTER FILES  ============'\n  SAVE DEVAWS\n  DELETE\n  +IMPORT DSN=SAT.SOURCE.LIBMAST(*),RANGE='+L1+'\n  WRITE AWS T '*******  NON-Y2K S.A.T.      *******'\n  SAVE SATAWS\n  DELETE\n  +IMPORT DSN=ASD.SAT.SOURCE.LIBMAST(*),RANGE='+L1+'\n  WRITE AWS T '*******  NON-Y2K S.A.T.ADMIN *******'\n  SAVE SADAWS\n  DELETE\n  +IMPORT DSN=PROD.SOURCE.LIBMAST(*),RANGE='+L1+'\n  WRITE AWS T '*******  NON-Y2K PRODUCTION  *******'\n  SAVE PRDAWS\n  DELETE\n  +IMPORT DSN=HLQ.DVL.LIBMAST(*),RANGE='+L1+'\n  WRITE AWS T '*******  ACS Y2K DEVELOPMENT *******'\n  WRITE AWS T '                                    '\n  WRITE AWS T '============   Y2K MASTER FILES      ============'\n  WRITE AWS T '                                    '\n  SAVE ACDAWS\n  DELETE\n  +IMPORT DSN=HLQ.SAT.LIBMAST(*),RANGE='+L1+'\n  WRITE AWS T '*******  ACS Y2K S.A.T.      *******'\n  SAVE ACSAWS\n  DELETE\n  +IMPORT DSN=HLQ.PRD.LIBMAST(*),RANGE='+L1+'\n  WRITE AWS T '*******  ACS Y2K PRODUCTION  *******'\n  SAVE ACPAWS\n  DELETE\n  +IMPORT DSN=HLQ.ADM.DVL.LIBMAST(*),RANGE='+L1+'\n  WRITE AWS T '*******  ADM Y2K DEVELOPMENT *******'\n  SAVE ADDAWS\n  DELETE\n  +IMPORT DSN=HLQ.ADM.SAT.LIBMAST(*),RANGE='+L1+'\n  WRITE AWS T '*******  ADM Y2K S.A.T.      *******'\n  SAVE ADSAWS\n  DELETE\n  +IMPORT DSN=HLQ.ADM.PRD.LIBMAST(*),RANGE='+L1+'\n  WRITE AWS T '*******  ADM Y2K PRODUCTION  *******'\n  SAVE ADPAWS\n  DELETE\n  +IMPORT DSN=BSDENDV.DVLMUNT.LIBMAST(*),RANGE='+L1+'\n  WRITE AWS T '*******  ENDEVOR STAGE 8 DVLMUNT *******'\n  WRITE AWS T '                                    '\n  WRITE AWS T '============   ENDEVOR MASTER FILES  ============'\n  WRITE AWS T '                                    '\n  SAVE MUNTAWS\n  DELETE\n  +IMPORT DSN=BSDENDV.DVLMSYS.LIBMAST(*),RANGE='+L1+'\n  WRITE AWS T '*******  ENDEVOR STAGE 7 DVLMSYS *******'\n  SAVE MSYSAWS\n  DELETE\n  +IMPORT DSN=BSDENDV.SATMSTG.LIBMAST(*),RANGE='+L1+'\n  WRITE AWS T '*******  ENDEVOR STAGE 6 SATMSTG *******'\n  SAVE MSTGAWS\n  DELETE\n  +IMPORT DSN=BSDENDV.SATMTST.LIBMAST(*),RANGE='+L1+'\n  WRITE AWS T '*******  ENDEVOR STAGE 5 SATMTST *******'\n  SAVE MTSTAWS\n  DELETE\n  +IMPORT DSN=BSDENDV.PRDPRD.LIBMAST(*),RANGE='+L1+'\n  WRITE AWS T '*******  ENDEVOR STAGE 1 PRDPRD  *******'\n  SAVE PRDPAWS\n  DELETE\n  SET MONTRAP OFF\n  COPY DEVAWS 1 999999 T\n  COPY SATAWS 1 999999 B\n  COPY SADAWS 1 999999 B\n  COPY PRDAWS 1 999999 B\n  COPY ACDAWS 1 999999 B\n  COPY ACSAWS 1 999999 B\n  COPY ACPAWS 1 999999 B\n  COPY ADDAWS 1 999999 B\n  COPY ADSAWS 1 999999 B\n  COPY ADPAWS 1 999999 B\n  COPY MUNTAWS 1 999999 B\n  COPY MSYSAWS 1 999999 B\n  COPY MSTGAWS 1 999999 B\n  COPY MTSTAWS 1 999999 B\n  COPY PRDPAWS 1 999999 B\n  DELETE DEVAWS\n  DELETE SATAWS\n  DELETE SADAWS\n  DELETE PRDAWS\n  DELETE ACDAWS\n  DELETE ACSAWS\n  DELETE ACPAWS\n  DELETE ADDAWS\n  DELETE ADSAWS\n  DELETE ADPAWS\n  DELETE MUNTAWS\n  DELETE MSYSAWS\n  DELETE MSTGAWS\n  DELETE MTSTAWS\n  DELETE PRDPAWS\n  SET ATTACH NOPAUSE\n  ATTACH\n  NOSEQ\n  POP\n  STOP\n <<END>>\n  WRITE '     LIBRARY SEARCH EXITED   '\n  NOSEQ\n  POP\n  STOP\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FS": {"ttr": 5380, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%?\\x01\\x01%?\\x16\\x13\\x00C\\x00C\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-10T00:00:00", "modifydate": "2001-09-10T16:13:00", "lines": 67, "newlines": 67, "modlines": 0, "user": "EGHF3PY"}, "text": "<<FS>>\nTOP\nPANEL ACTIVATE *\nSTARTDEF\nTAG # UH LINE\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\nENDDEF\nDECLARE PTR PTRLINE ENDSW FRSTTIME PF\nLET ENDSW = FRSTTIME = 0\nLOOP\n    UNTIL ENDSW EQ 1\n    IF (S.AID EQ 'CLEAR')\n       STOP\n    ENDIF\n    IF (S.AID NE 'ENTER')\n       IF (S.AID EQ 'PA1')\n          POINT *-48\n       ELSE\n          LET PF = 24 - SUBSTR(S.AID 3)\n         +POINT *-+PF+\n       ENDIF\n    ENDIF\n    LOOP PTR FROM 1 TO 24 BY 1\n        READ AWS * PTRLINE\n        LET P.LINE<PTR> = SUBSTR(PTRLINE 1 79)\n        IF S.SEQ LT S.HIGHSEQ\n              POINT *+1\n        ELSE\n            LOOP\n                UNTIL (PTR EQ 24) OR (FRSTTIME EQ 0)\n                LET PTR = PTR + 1\n                LET P.LINE<PTR> = ' '\n            ENDLOOP\n            LET ENDSW = 1\n            ESCAPE\n        ENDIF\n    ENDLOOP\n    IF FRSTTIME EQ 0\n        LET FRSTTIME = 1\n        PANEL SEND\n    ELSE\n        PANEL RESEND\n    ENDIF\nENDLOOP\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FS1": {"ttr": 5382, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%?\\x01\\x01%?\\x16\\x16\\x00.\\x00.\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-10T00:00:00", "modifydate": "2001-09-10T16:16:00", "lines": 46, "newlines": 46, "modlines": 0, "user": "EGHF3PY"}, "text": "<<FS1>>\nTOP\nDECLARE PTR AWSLINE\nREAD AWS * AWSLINE\nTRAP ON\nLOOP\n    UNTIL TC NE 0  OR  S.AID EQ 'CLEAR'\n    PANEL ACTIVATE *\nSTARTDEF\nTAG # S LINE\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\nENDDEF\n    LOOP PTR FROM 1 TO 24 BY 1\n        LET P.LINE<PTR> = SUBSTR(AWSLINE 1 79)\n        POINT *+1\n        IF TC NE 0\n            ESCAPE\n        ENDIF\n        READ AWS * AWSLINE\n    ENDLOOP\n    PANEL SEND\nENDLOOP\nTRAP OFF\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "GENDATA": {"ttr": 5384, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%?\\x01\\x01%?\\x16!\\x00\\x07\\x00\\x07\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-10T00:00:00", "modifydate": "2001-09-10T16:21:00", "lines": 7, "newlines": 7, "modlines": 0, "user": "EGHF3PY"}, "text": "<<GENDATA>>\nLOOP L1 FROM 1 TO 300 BY 1\n+  LET L2 = LPAD(+L1+ 5 '0')\n+  LET L3 = 'MOVE ''909900+L2+'' TO ENP01-CASE-NUMBER.'\n+  +L1+ +L3+\nENDLOOP\nRSHIFT 11\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "GETJCL": {"ttr": 5386, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%?\\x01\\x01%?\\x16$\\x00:\\x00:\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-10T00:00:00", "modifydate": "2001-09-10T16:24:00", "lines": 58, "newlines": 58, "modlines": 0, "user": "EGHF3PY"}, "text": "<<GETJCL>>\n:L1 MEMBER NAME\n  PUSH\n  DELETE\n  SET MODE NUMX\n  PANEL ACTIVATE *\n  STARTDEF\n  TAG ! S\n   TAG % UH MEM LIB1 LIB2 LIB3\n   CURSOR MEM\n!\n!                         IMPORT A MEMBER\n!                      FROM HLQ.DVL.JCLLIB\n!\n!             ENTER PDS MEMBER NAME: %________!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n  ENDDEF\n  PANEL SEND\n  SET MODE BASIC\n\n<<READ>>\n  IF AID EQ 'CLEAR'\n     GOTO <<END>>\n  ENDIF\n  LET L1 = TRIM(TRIM(P.MEM) '_')\n  IF L1 EQ ' '\n    GOTO <<END>>\n  ENDIF\n+IMPORT DSN=HLQ.DVL.JCLLIB(+L1+)\n <<ENDIT>>\n  SET ATTACH NOPAUSE\n  ATTACH\n  NOSEQ\n  POP\n  STOP\n <<END>>\n  WRITE '     GETJCL EXITED   '\n  NOSEQ\n  POP\n  STOP\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "GETLNG": {"ttr": 5388, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%?\\x01\\x01%?\\x16&\\x00\\x02\\x00\\x02\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-10T00:00:00", "modifydate": "2001-09-10T16:26:00", "lines": 2, "newlines": 2, "modlines": 0, "user": "EGHF3PY"}, "text": "<<GETLNG>>\nEXEC  PFX.EXGET\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "GETY2K": {"ttr": 5390, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%?\\x01\\x01%?\\x160\\x00E\\x00E\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-10T00:00:00", "modifydate": "2001-09-10T16:30:00", "lines": 69, "newlines": 69, "modlines": 0, "user": "EGHF3PY"}, "text": "<<GETY2K>>\n:L1 MEMBER NAME\n  PUSH\n  DELETE\n  SET MODE NUMX\n  PANEL ACTIVATE *\n  STARTDEF\n  TAG ! S\n   TAG % UH MEM LIB1 LIB2 LIB3\n   CURSOR MEM\n!\n!                     IMPORT A Y2K MEMBER\n!\n!\n!             ENTER MEMBER NAME: %________!\n!\n!\n!             PLACE AN 'X' BESIDE DESIRED FILE\n!\n!\n!             HLQ.DVL.LIBMAST: %_!\n!             HLQ.SAT.LIBMAST: %_!\n!             HLQ.PRD.LIBMAST: %_!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n  ENDDEF\n  PANEL SEND\n  SET MODE BASIC\n\n<<READ>>\n  IF AID EQ 'CLEAR'\n     GOTO <<END>>\n  ENDIF\n  LET L1 = TRIM(TRIM(P.MEM) '_')\n  IF L1 EQ ' '\n    GOTO <<END>>\n  ENDIF\n  IF (P.LIB1 EQ 'X')\n     +IMPORT DSN=HLQ.DVL.LIBMAST(+L1+)\n      GOTO <<ENDIT>>\n  ENDIF\n  IF (P.LIB2 EQ 'X')\n     +IMPORT DSN=HLQ.SAT.LIBMAST(+L1+)\n      GOTO <<ENDIT>>\n  ENDIF\n  IF (P.LIB3 EQ 'X')\n     +IMPORT DSN=HLQ.PRD.LIBMAST(+L1+)\n      GOTO <<ENDIT>>\n  ENDIF\n <<ENDIT>>\n  SET ATTACH NOPAUSE\n  ATTACH\n  NOSEQ\n  POP\n  STOP\n <<END>>\n  WRITE '     GETY2K EXITED   '\n  NOSEQ\n  POP\n  STOP\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "HEXTODEC": {"ttr": 5392, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%?\\x01\\x01%?\\x163\\x00\\x0e\\x00\\x0e\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-10T00:00:00", "modifydate": "2001-09-10T16:33:00", "lines": 14, "newlines": 14, "modlines": 0, "user": "EGHF3PY"}, "text": "<<HEXTODEC>>\nPUSH\nLET L1=LENGTH(A1)\nLET P16=0\nLET L3=1\n<<LOOP1>>\nLET P16=(P16 * 16) + INDEX('0123456789ABCDEF' SUBSTR(A1 L3 1)) - 1\nIF (L3 LT L1)\n   LET L3=L3+1\n   GOTO <<LOOP1>>\nENDIF\n+RESPONSE '+A1+=+P16+'\nPOP\nRETURN\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IMPEXAML": {"ttr": 5394, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%?\\x01\\x01%?\\x168\\x00\\x06\\x00\\x06\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-10T00:00:00", "modifydate": "2001-09-10T16:38:00", "lines": 6, "newlines": 6, "modlines": 0, "user": "EGHF3PY"}, "text": "<<MIST1>>\n:+IMP DSN=USERID.TEMP80,INCLUDE=(NOT,/+A1+/1,1,AND,NOT,/+A2+/1,1,AND,NOT,\n/+A3+/1,1,AND,NOT,/+A4+/1,1),ASIS\n+IMP DSN=USERID.TEMP80,INCLUDE=(/+A1+/1,1)\n:EXEC AB\nRETURN\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IN": {"ttr": 5396, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%?\\x01\\x01%?\\x16D\\x00>\\x00>\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-10T00:00:00", "modifydate": "2001-09-10T16:44:00", "lines": 62, "newlines": 62, "modlines": 0, "user": "EGHF3PY"}, "text": "<<IN>> : A1=FRCOL, A2=TOCOL, A3='START LIT', A4=INCR, A5=FR, A6=TO\n:*--------------------------------------------------------------------*\n:*  EXAMPLE:  IN 6 7 '01' 1 10 20                                     *\n:*            WILL NUMBER CARDS 10 THRU 20 WITH 01, 02, 03...         *\n:*            IN COLS 6-7                                             *\n:*--------------------------------------------------------------------*\nSET STMTCNT MAX\nLET L1 = A1\nLET L2 = A2 - A1 + 1\nIF SUBSTR(LPAD(A3 L2) 1 1) EQ ' '\n    LET L10 = ' '\nELSE\n    IF SUBSTR(A3 LENGTH(A3) 1) EQ ' '\n        LET L10 = '1'\n    ELSE\n        LET L10 = '0'\n    ENDIF\nENDIF\nLET L3 = INTEGER(A3)\nLET L4 = A4\nIF A5 EQ ''\n    LET L5 = 1\n    LET L6 = HIGHSEQ\nELSE\n    LET L5 = INTEGER(A5)\n    IF A6 EQ '' OR A6 GT HIGHSEQ\n        LET L6 = HIGHSEQ\n    ELSE\n        LET L6 = INTEGER(A6)\n    ENDIF\nENDIF\nIF A7 EQ ''\n    LET L7 = 1\nELSE\n    LET L7 = INTEGER(A7)\nENDIF\n<<LOOP>>\nIF L5 GT L6\n    RETURN\nENDIF\nTRAP\n+READ AWS +L5+ L8\nTRAP OFF\nIF TC NE 0\n    LET L5 = L5 + L7\n    GOTO <<LOOP>>\nENDIF\nLET L8 = PAD(L8 100)\nIF L10 EQ '1'\n    LET L9 = PAD(L3 L2)\nELSE\n    +LET L9 = LPAD(L3 L2 '+L10+')\nENDIF\nIF LENGTH(L9) GT L2\n    LET L9 = SUBSTR(L9 2)\n    LET L3 = INTEGER(L9)\nENDIF\nLET L8 = MODIFY(L8 L9 L1)\n++L5+ +L8+\nLET L3 = L3 + L4\nLET L5 = L5 + L7\nGOTO <<LOOP>>\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "KEEPALL": {"ttr": 5398, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%?\\x01\\x01%?\\x16F\\x00\\x1b\\x00\\x1b\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-10T00:00:00", "modifydate": "2001-09-10T16:46:00", "lines": 27, "newlines": 27, "modlines": 0, "user": "EGHF3PY"}, "text": "<<KEEPALL>>\nEXEC DIR '>'\nFILL 13 255 / /\nDELETES /KEEPALL/\nPREFIX /FETCH /\nR 1,3\nSAVE T1\n:\nFILL 2 255 / /\nE /F/UPDATE */\nR 2,3\nSAVE T2\n:\nFILL 2 255 / /\nE /U/:/\nR 3,3\nSAVE T3\nDELETE\nMERGE T1 T2 T3\nRENUMBER\n1 <<MIST>>\nSAVE MIST\nEXEC MIST\nDEL T1\nDEL T2\nDEL T3\nDEL MIST\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LIBLOOK": {"ttr": 5400, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%o\\x01\\x01%o\\x12\\x18\\x00H\\x00H\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-13T00:00:00", "modifydate": "2001-09-13T12:18:00", "lines": 72, "newlines": 72, "modlines": 0, "user": "EGHF3PY"}, "text": "<<RANDVL>> :RANGE SEARCH RPF FOR DVL.SOURCE.LIBMAST\n:L1 RANGE SEARCH STRING\n  PUSH\n  DELETE\n  SET MODE NUMX\n  PANEL ACTIVATE *\n  STARTDEF\n  TAG ! S\n   TAG % UH MEM\n   CURSOR MEM\n!***********************************************************************\n!**                          S E A R C H                              **\n!**                                                                   **\n!**                        L I B R A R I E S                          **\n!***********************************************************************\n!\n!                  PLEASE SPECIFY SEARCH CRITERIA\n!                                OR\n!                        PRESS CLEAR TO EXIT\n!\n!\n!                 MEMBER ===========> %________!\n!\n!\n!\n!***********************************************************************\n  ENDDEF\n  PANEL SEND\n  SET MODE BASIC\n\n<<READ>>\n  IF AID EQ 'CLEAR'\n     GOTO <<END>>\n  ENDIF\n  LET L1 = TRIM(TRIM(P.MEM) '_')\n  IF L1 EQ ' '\n    GOTO <<RANDVL>>\n    ENDIF\n  +IMPORT DSN=DVL.SOURCE.LIBMAST(*),RANGE='+L1+'\n  WRITE AWS T '************ DEVELOPMENT ************'\n  SAVE DEVAWS\n  DELETE\n  +IMPORT DSN=SAT.SOURCE.LIBMAST(*),RANGE='+L1+'\n  WRITE AWS T '************ S.A.T.************'\n  SAVE SATAWS\n  DELETE\n  +IMPORT DSN=PROD.SOURCE.LIBMAST(*),RANGE='+L1+'\n  WRITE AWS T '************ PROD ************'\n  SAVE PRDAWS\n  DELETE\n::+IMPORT DSN=SYS1.MVS.LIBMAST(*),RANGE='+L1+'\n  WRITE AWS T '************ SYS1 ************'\n  SAVE SY1AWS\n  DELETE\n  COPY DEVAWS 1 999999 T\n  COPY SATAWS 1 999999 B\n  COPY PRDAWS 1 999999 B\n  COPY SY1AWS 1 999999 B\n  DELETE DEVAWS\n  DELETE SATAWS\n  DELETE PRDAWS\n  DELETE SY1AWS\n  SET ATTACH NOPAUSE\n  ATTACH\n  NOSEQ\n  POP\n  STOP\n <<END>>\n  WRITE '     LIBRARY SEARCH EXITED   '\n  NOSEQ\n  POP\n  STOP\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LOUP": {"ttr": 5635, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%o\\x01\\x01%o\\x12\\'\\x00\"\\x00\"\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-13T00:00:00", "modifydate": "2001-09-13T12:27:00", "lines": 34, "newlines": 34, "modlines": 0, "user": "EGHF3PY"}, "text": "<<LOUP>>\n:\n: LOUP STARTLINE ENDLINE\n:\nPUSH\nIF (A1 EQ '')\n   RESPONSE 'LOUP START END'\n   RETURN\nENDIF\nIF (A2 EQ '')\n   RESPONSE 'LOUP START END'\n   RETURN\nENDIF\nSET ATTACH NOPAUSE\nLET L16 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\nLET L15 = 'abcdefghijklmnopqrstuvwxyz'\n+ATTACH +A1+,,\n+IF (+A2+ LT SEQ)\n    RETURN\n ENDIF\nREAD AWS * L1\n<<LOOP>>\nLET L4 = SEQ\nLET L2 = XLATE(L1 L15 L16)\n+ +L4+ +L2+\n<<READ>>\nLET L5 = SEQ + 1\n+IF (L5 LE +A2+) THEN\n   READ AWS *+1 L1\n   GOTO <<LOOP>>\nENDIF\n<<END>>\nPOP\nRETURN\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "LS": {"ttr": 5637, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%o\\x01\\x01%o\\x121\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-13T00:00:00", "modifydate": "2001-09-13T12:31:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "EGHF3PY"}, "text": "<<LS>>\nPUSH\nSET ATTACH NOPAUSE\nATTACH LIB +\n:SET ATTACH PAUSE\nLET L1 = A1\nIF L1 EQ '' THEN\n   INCL LIB 70 72 /SHR/\nELSE\n+  INCL LIB /+A1+/\nENDIF\nPOP\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MHR": {"ttr": 5639, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%o\\x01\\x01%o\\x12@\\x00\\x13\\x00\\x13\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-13T00:00:00", "modifydate": "2001-09-13T12:40:00", "lines": 19, "newlines": 19, "modlines": 0, "user": "EGHF3PY"}, "text": "<<MHR>>\nIF (A1 EQ '')\n    RESPONSE 'MHR AGE'\nENDIF\n+LET L1 = 220 - +A1+\n LET L2 = L1 * .85\n LET L3 = L1 * .65\n LET L4 = L1 * .55\nWRITE\n' '\n' '\n'MAXIMUM HEART RATE: '|L1\n' '\n'               85%: '|L2\n'AEROBIC ZONE'\n'               65%: '|L3\n'FAT BURN ZONE'\n'               55%: '|L4\nENDWRITE\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MHR1": {"ttr": 5641, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%o\\x01\\x01%o\\x12A\\x00\\x16\\x00\\x16\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-13T00:00:00", "modifydate": "2001-09-13T12:41:00", "lines": 22, "newlines": 22, "modlines": 0, "user": "EGHF3PY"}, "text": "<<MHR1>>\nIF (A1 EQ '')\n    RESPONSE 'MHR AGE'\nENDIF\n+LET L1 = 205 - (+A1+ / 2.0)\n LET L2 = L1 * .90\n LET L3 = L1 * .85\n LET L4 = L1 * .70\n LET L5 = L1 * .60\nWRITE\n' '\n' '\n'MAXIMUM HEART RATE: '|L1\n' '\n'IMPROVE        90%: '|L2\n' '\n'               85%: '|L3\n' '\n'MAINTAIN       70%: '|L4\n' '\n'               60%: '|L5\nENDWRITE\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MIXCASE": {"ttr": 5643, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%o\\x01\\x01%o\\x12G\\x00\\x02\\x00\\x02\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-13T00:00:00", "modifydate": "2001-09-13T12:47:00", "lines": 2, "newlines": 2, "modlines": 0, "user": "EGHF3PY"}, "text": "<<MIXCASE>>\nSET MODE XTENDED\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MSG": {"ttr": 5645, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%o\\x01\\x01%o\\x14%\\x00\\x02\\x00\\x02\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-13T00:00:00", "modifydate": "2001-09-13T14:25:00", "lines": 2, "newlines": 2, "modlines": 0, "user": "EGHF3PY"}, "text": "<<MSG>>\n+SEND PFX=+A1+ '+A2+' NOW\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MYDSN": {"ttr": 5647, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%o\\x01\\x01%o\\x14(\\x00\\x06\\x00\\x06\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-13T00:00:00", "modifydate": "2001-09-13T14:28:00", "lines": 6, "newlines": 6, "modlines": 0, "user": "EGHF3PY"}, "text": "<<MYDSN>>\nPUSH\nSET ATTACH PAUSE\nATTACH DSN USERID.**\nDETACH DSN\nPOP\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "NAMEIT": {"ttr": 5649, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%o\\x01\\x01%o\\x140\\x00\\x08\\x00\\x08\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-13T00:00:00", "modifydate": "2001-09-13T14:30:00", "lines": 8, "newlines": 8, "modlines": 0, "user": "EGHF3PY"}, "text": "<<NAMEIT>>\n+F +A1+\nR\n1\n+2 +A1+ +A2+\n3\nU *\nRETURN\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "NF": {"ttr": 5651, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%o\\x01\\x01%o\\x143\\x00\\x02\\x00\\x02\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-13T00:00:00", "modifydate": "2001-09-13T14:33:00", "lines": 2, "newlines": 2, "modlines": 0, "user": "EGHF3PY"}, "text": "<<NF>>\nNEXT JOB FILE\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "NOROSCOM": {"ttr": 5653, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%o\\x01\\x01%o\\x145\\x00\\x03\\x00\\x03\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-13T00:00:00", "modifydate": "2001-09-13T14:35:00", "lines": 3, "newlines": 3, "modlines": 0, "user": "EGHF3PY"}, "text": "<<NOC>>\nDIR '>'\nDELETEX 27 27 / /\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "NOSEQALL": {"ttr": 5655, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x01%o\\x01\\x01&/\\x14\\x01\\x00\\x11\\x00\\x11\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2001-09-13T00:00:00", "modifydate": "2001-09-19T14:01:00", "lines": 17, "newlines": 17, "modlines": 0, "user": "EGHF3PY"}, "text": "<<NOSEQALL>>\nPUSH\nEXEC DIR 'PFX'\nDELX 96 100 /073,8/\nFILL 14 144 / /\nE 1 80\nRSHIFT 2\nFILL 1 6 /ALTER /\nSUF / NOSEQ/\nR\n1 <<ZZZNOSEQ>>\nU ZZZNOSEQ\nZZZNOSEQ\nDEL ZZZNOSEQ\nDEL\nRESPONSE 'All library members are now noseq.'\nPOP\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "N1R6": {"ttr": 5657, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%o\\x01\\x01%o\\x14A\\x00\\x02\\x00\\x02\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-13T00:00:00", "modifydate": "2001-09-13T14:41:00", "lines": 2, "newlines": 2, "modlines": 0, "user": "EGHF3PY"}, "text": "<<N1R6>>\nALTER JOB ALL PRINT CLASS A DEST N1R6\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PACKZZZ": {"ttr": 5659, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01&\\x1f\\x01\\x01&\\x1f\\x16)\\x00F\\x00F\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-18T00:00:00", "modifydate": "2001-09-18T16:29:00", "lines": 70, "newlines": 70, "modlines": 0, "user": "EGHF3PY"}, "text": "       9000-PACK-ZZZ-DATES.\n      *--------------------------------------------------------------*\n      * INCLUDE FILE:  PACK-ZZZ-DATES                                *\n      *--------------------------------------------------------------*\n      * THIS PROCEDURE PACKS Y2K DATES IN THE ZZZ RECORD.            *\n      *--------------------------------------------------------------*\n      *--------------------------------------------------------------*\n      * THIS PROCEDURE WILL BE PERFORMED EACH TIME THE PROGRAM WRITES*\n      * A ZZZ RECORD.  IT MOVES EACH DATE IN THE ZZZ RECORD TO A     *\n      * WORK AREA.  PERFORMS THE Y2K DATE CONVERSION, WHICH RETURNS  *\n      * RETURNS A STANDARD ACS SIX CHARACTER PACKED DATE.  THEN IT   *\n      * OVERLAYS THE DATE IN THE ZZZ RECORD WITH THE PACKED DATE.    *\n      *--------------------------------------------------------------*\n      *--------------------------------------------------------------*\n      * PACK SIX CHARACTER DATE: (YYMMDD)                            *\n      *--------------------------------------------------------------*\n      * PACK: ZZZ01-DATE1                                              *\n      *--------------------------------------------------------------*\n           MOVE ZZZ01-DATE1 TO Y2K-UNPACKED-YMD.\n           IF Y2K-YEAR\n              MOVE HIGH-VALUES       TO Y2K-CHECK-BYTE\n              MOVE THE-21ST-CENTURY  TO Y2K-UNPACKED-CENTURY\n              MOVE Y2K-UNPACKED-DATE TO Y2K-PACKED-CYMD\n              MOVE Y2K-PACKED-DATE   TO ZZZ01-DATE1\n           END-IF.\n\n      *--------------------------------------------------------------*\n      * PACK FOUR CHARACTER DATES (YYMM)                             *\n      *--------------------------------------------------------------*\n      * PACK: ZZZ01-DATE2                                              *\n      *--------------------------------------------------------------*\n           MOVE ZZZ01-DATE2 TO Y2K-UNPACKED-YM.\n           IF Y2K-4DIG-YEAR\n               MOVE HIGH-VALUES       TO Y2K-4DIG-CHECK\n               SET Y2K-4DIG-CENTURY   TO TRUE\n               MOVE Y2K-4DIG-UNPACKED TO Y2K-4DIG-PACKED\n               MOVE Y2K-4-DIGIT       TO ZZZ01-DATE2\n           END-IF.\n\n      *--------------------------------------------------------------*\n      * PACK Y2K YEAR: (YY)                                          *\n      *--------------------------------------------------------------*\n      * PACK: ZZZ01-DATE3                                              *\n      *--------------------------------------------------------------*\n           MOVE ZZZ01-DATE3 TO DB-FY-BYTES.\n           IF FY-1STCHAR = '0'\n             SET 1ST-DECADE TO TRUE.\n           IF FY-1STCHAR = '1'\n             SET 2ND-DECADE TO TRUE.\n           IF FY-1STCHAR = '2'\n             SET 3RD-DECADE TO TRUE.\n           IF FY-1STCHAR = '3'\n             SET 4TH-DECADE TO TRUE.\n           MOVE DB-FY-BYTES TO ZZZ01-DATE3.\n\n      *--------------------------------------------------------------*\n      * PACK FIVE CHARACTER DATES: (YYDDD)                           *\n      *--------------------------------------------------------------*\n      * PACK: ZZZ01-DATE4                                              *\n      *--------------------------------------------------------------*\n           MOVE ZZZ01-DATE4 TO Y2K-UNPACKED-YYDDD.\n           IF Y2K-5DIG-YEAR\n              MOVE HIGH-VALUES       TO Y2K-5DIG-CHECK\n              SET Y2K-5DIG-CENTURY   TO TRUE\n              MOVE Y2K-5DIG-UNPACKED TO Y2K-5DIG-PACKED\n              MOVE Y2K-5-DIGIT       TO ZZZ01-DATE4\n           END-IF.\n\n       9000-PACK-ZZZ-DATES-EXIT.\n           EXIT.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PAF": {"ttr": 5661, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%o\\x01\\x01%o\\x14C\\x00\\x02\\x00\\x02\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-13T00:00:00", "modifydate": "2001-09-13T14:43:00", "lines": 2, "newlines": 2, "modlines": 0, "user": "EGHF3PY"}, "text": "<<PAF>>\n+ALTER JOB ALL PRINT CLASS +A1+ DEST N2R1612\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PAFL": {"ttr": 5663, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%o\\x01\\x01%o\\x14F\\x00\\x02\\x00\\x02\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-13T00:00:00", "modifydate": "2001-09-13T14:46:00", "lines": 2, "newlines": 2, "modlines": 0, "user": "EGHF3PY"}, "text": "<<PAFL>>\n+ALTER JOB ALL PRINT CLASS +A1+ DEST LOCAL\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PARA": {"ttr": 5665, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x01\\x01%o\\x01\\x01&?\\x15I\\x00\\x02\\x00\\x02\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2001-09-13T00:00:00", "modifydate": "2001-09-20T15:49:00", "lines": 2, "newlines": 2, "modlines": 0, "user": "EGHF3PY"}, "text": "<<PARA>>\nDELETEX 12 12 /-/\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PF": {"ttr": 5667, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%o\\x01\\x01%o\\x15\\x05\\x00\\x02\\x00\\x02\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-13T00:00:00", "modifydate": "2001-09-13T15:05:00", "lines": 2, "newlines": 2, "modlines": 0, "user": "EGHF3PY"}, "text": "<<PF>>\n+ALTER JOB FILE +A1+ PRINT CLASS +A2+\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PFIX": {"ttr": 5669, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%o\\x01\\x01%o\\x15\\x10\\x00\\r\\x00\\r\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-13T00:00:00", "modifydate": "2001-09-13T15:10:00", "lines": 13, "newlines": 13, "modlines": 0, "user": "EGHF3PY"}, "text": "<<PFIX>> :\n:*--------------------------------------------------------------------*\n:*  A1 = COMPILER (A=Y2K BATCH COBOL, B=Y2K CICS COBOL,               *\n:*                 C=NON-Y2K BATCH COBOL, D=NON-Y2K CICS COBOL)       *\n:*  A2 = MEMBER NAME OR \"L\" FOR LIST                                  *\n:*  A3 = LIST NAME OR INSTRUCTION WORD                                *\n:*  A4 = INSTRUCTION WORD                                             *\n:*  A5 = INSTRUCTION WORD                                             *\n:*       ALLOWABLE INSTRUCTION WORDS:                                 *\n:*           REP = REPLACE LIBRARY MEMBER FROM ROSCOE MEMBER          *\n:*           SUB = SUBMIT WITHOUT SHOWING SCREEN IF ALL EDITS PASS    *\n:*--------------------------------------------------------------------*\n  TRANSFER PFX.$CC A1 A2 A3 A4 A5 A6 A7 A8\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PH": {"ttr": 5671, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%o\\x01\\x01%o\\x15$\\x00\\x0b\\x00\\x0b\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-13T00:00:00", "modifydate": "2001-09-13T15:24:00", "lines": 11, "newlines": 11, "modlines": 0, "user": "EGHF3PY"}, "text": "<<PHONE>>\nPUSH\nSET ATTACH NOPAUSE\nCHAIN PFX.PHONE1 PFX.PHONE2 PFX.PHONE3 PFX.PHONE4 PFX.NTEU\nIF A1 EQ '' THEN\n:  SET ATTACH PAUSE\n   A\nELSE\n+  SEA /+A1+/\nENDIF\nPOP\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PJCL": {"ttr": 5673, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%o\\x01\\x01%o\\x15T\\x00\\x02\\x00\\x02\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-13T00:00:00", "modifydate": "2001-09-13T15:54:00", "lines": 2, "newlines": 2, "modlines": 0, "user": "EGHF3PY"}, "text": "<<PJCL>>\n+IMP DSN=SCHD.CA7.HLQ.PRODJCL(+A1+)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PRINT": {"ttr": 5675, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x01%o\\x01\\x01&/\\x13T\\x00\\x0f\\x00\\x0f\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2001-09-13T00:00:00", "modifydate": "2001-09-19T13:54:00", "lines": 15, "newlines": 15, "modlines": 0, "user": "EGHF3PY"}, "text": "//JOBNAME  JOB (ACCTINFO),PGMR,CLASS=A,MSGCLASS=S\n//PROCLIB JCLLIB ORDER=USERID.DVL.PROC\n//        SET TITLE1='PFX.PRINT'\n//OUTPUT INCLUDE MEMBER=DESTCH\n//*-------------------------------------------------------------------*\n//*        IEBPTPCH                                                   *\n//*-------------------------------------------------------------------*\n//STEP1    EXEC PGM=IEBPTPCH\n//SYSPRINT DD SYSOUT=*\n//SYSUT2   DD SYSOUT=*\n//SYSIN    DD    *\n     PRINT   TYPORG=PS,MAXFLDS=99\n     RECORD  FIELD=(80)\n/*\n//SYSUT1    DD    DATA,DLM='\u00ac!'\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PRINTIT": {"ttr": 5677, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x01\\x01%o\\x01\\x01%o\\x165\\x00\\x18\\x00\\x05\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2001-09-13T00:00:00", "modifydate": "2001-09-13T16:35:00", "lines": 24, "newlines": 5, "modlines": 0, "user": "EGHF3PY"}, "text": "<<PRINTIT1>>\nPUSH\nCREATE AWS $DANA$\nSELECT AWS $DANA$\nCOPY PRINTIT1 100 1600 T\n+COPY +A1+ B\nSET MASTER OFF\nSUB\nSET MASTER ON\nDISCARD AWS $DANA$\nPOP\nRETURN\n//JOBNAME  JOB (ACCTINFO),'PGMR',CLASS=A,MSGCLASS=S\n//*-------------------------------------------------------------------*\n//*        IEBPTPCH                                                   *\n//*-------------------------------------------------------------------*\n//STEP1    EXEC PGM=IEBPTPCH\n//SYSPRINT DD SYSOUT=*\n//SYSUT2   DD SYSOUT=*\n//SYSIN    DD    *\n     PRINT   TYPORG=PS,MAXFLDS=99\n     RECORD  FIELD=(80)\n/*\n//SYSUT1    DD    DATA,DLM='\u00ac!'\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PROCLOOK": {"ttr": 5889, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%o\\x01\\x01%o\\x16I\\x00x\\x00x\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-13T00:00:00", "modifydate": "2001-09-13T16:49:00", "lines": 120, "newlines": 120, "modlines": 0, "user": "EGHF3PY"}, "text": "<<RANDVL>>\n:L1 RANGE SEARCH STRING\n  PUSH\n  DELETE\n  SET MODE NUMX\n  PANEL ACTIVATE *\n  STARTDEF\n  TAG ! S\n   TAG % UH MEM\n   CURSOR MEM\n!***********************************************************************\n!**                          S E A R C H                              **\n!**              D V L  S A T  P R O D  S Y S 1 A N D S Y S 2         **\n!**              P R O C   L I B R A R I E S                          **\n!***********************************************************************\n!\n!                  PLEASE SPECIFY SEARCH CRITERIA\n!                                OR\n!                        PRESS CLEAR TO EXIT\n!\n!\n!                 MEMBER ===========> %________!\n!\n!\n!\n!***********************************************************************\n  ENDDEF\n  PANEL SEND\n  SET MODE BASIC\n  TRAP ON\n  DELETE DEVAWS\n  DELETE SATAWS\n  DELETE PRDAWS\n  DELETE SY1AWS\n  DELETE SY2AWS\n  DELETE SY2AWS1\n  DELETE SY1AWS1\n  DELETE SATAWS2\n  DELETE SY3AWS\n  DELETE USCAWS\n  TRAP OFF\n\n<<READ>>\n  IF AID EQ 'CLEAR'\n     GOTO <<END>>\n  ENDIF\n  LET L1 = TRIM(TRIM(P.MEM) '_')\n  IF L1 EQ ' '\n    GOTO <<RANDVL>>\n    ENDIF\n  +IMPORT DSN=SYS3.DVL.PROCLIB(*),RANGE='+L1+'\n  WRITE AWS T '************ DEVELOPMENT ************'\n  SAVE DEVAWS\n  DELETE\n  +IMPORT DSN=SYS3.SAT.PROCLIB(*),RANGE='+L1+'\n  WRITE AWS T '************ S.A.T.************'\n  SAVE SATAWS\n  DELETE\n::+IMPORT DSN=SYS3.PROD.PROCLIB(*),RANGE='+L1+'\n  WRITE AWS T '************ PROD ************'\n  SAVE PRDAWS\n  DELETE\n::+IMPORT DSN=SYS1.JCLLIB(*),RANGE='+L1+'\n  WRITE AWS T '********SYS1.JCLLIB***********'\n  SAVE SY1AWS\n  DELETE\n::+IMPORT DSN=SYS2.MVS.PROCLIB(*),RANGE='+L1+'\n  WRITE AWS T '********SYS2.MVS.PROCLIB******'\n  SAVE SY2AWS\n  DELETE\n  +IMPORT DSN=SYS2.PROCLIB(*),RANGE='+L1+'\n  WRITE AWS T '********SYS2.PROCLIB**********'\n  SAVE SY2AWS1\n  DELETE\n  +IMPORT DSN=SYS1.PROCLIB(*),RANGE='+L1+'\n  WRITE AWS T '********SYS1.PROCLIB**********'\n  SAVE SY1AWS1\n  DELETE\n  +IMPORT DSN=SYS2.SAT.PROCLIB(*),RANGE='+L1+'\n  WRITE AWS T '********SYS2.SAT.PROCLIB**********'\n  SAVE SATAWS2\n  DELETE\n  +IMPORT DSN=SYS3.PROCLIB(*),RANGE='+L1+'\n  WRITE AWS T '********SYS3.PROCLIB**********'\n  SAVE SY3AWS\n  DELETE\n  +IMPORT DSN=HLQ.PROD.PROCLIB(*),RANGE='+L1+'\n  WRITE AWS T '********HLQ.PROD.PROCLIB**********'\n  SAVE USCAWS\n  DELETE\n  COPY DEVAWS 1 999999 T\n  COPY SATAWS 1 999999 B\n  COPY PRDAWS 1 999999 B\n  COPY SY1AWS 1 999999 B\n  COPY SY2AWS 1 999999 B\n  COPY SY2AWS1 1 999999 B\n  COPY SY1AWS1 1 999999 B\n  COPY SATAWS2 1 999999 B\n  COPY SY3AWS 1 999999 B\n  COPY USCAWS 1 999999 B\n  DELETE DEVAWS\n  DELETE SATAWS\n  DELETE PRDAWS\n  DELETE SY1AWS\n  DELETE SY2AWS\n  DELETE SY2AWS1\n  DELETE SY1AWS1\n  DELETE SATAWS2\n  DELETE SY3AWS\n  DELETE USCAWS\n  SET ATTACH NOPAUSE\n  ATTACH\n  NOSEQ\n  POP\n  STOP\n <<END>>\n  WRITE '     LIBRARY SEARCH EXITED   '\n  NOSEQ\n  POP\n  STOP\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PROSMEM": {"ttr": 5892, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%o\\x01\\x01%o\\x17\\x14\\x00\\x16\\x00\\x16\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-13T00:00:00", "modifydate": "2001-09-13T17:14:00", "lines": 22, "newlines": 22, "modlines": 0, "user": "EGHF3PY"}, "text": "<<PROSMEM>>\nPUSH\nTRAP ON\nDELETE\n1\n2\n3\n4\n+5 +A1+ +A2+\n6\n7\n+COPY +A1+ B\n:RSHIFT 10 1 7\n:RSHIFT 12 8 ,,\nCOPY @TEMP B\nIF (TC EQ 4)\n   SAVE @TEMP\nELSE\n   UPDATE @TEMP\nENDIF\nTRAP OFF\nPOP\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PUTJCL": {"ttr": 5894, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%o\\x01\\x01%o\\x17\"\\x009\\x009\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-13T00:00:00", "modifydate": "2001-09-13T17:22:00", "lines": 57, "newlines": 57, "modlines": 0, "user": "EGHF3PY"}, "text": "<<PUTJCL>>\n:L1 MEMBER NAME\n  PUSH\n  SET MODE NUMX\n  PANEL ACTIVATE *\n  STARTDEF\n  TAG ! S\n   TAG % UH MEM LIB1 LIB2 LIB3\n   CURSOR MEM\n!\n!                         EXPORT A MEMBER\n!                        TO HLQ.DVL.JCLLIB\n!\n!             ENTER PDS MEMBER NAME: %________!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n!\n  ENDDEF\n  PANEL SEND\n  SET MODE BASIC\n\n<<READ>>\n  IF AID EQ 'CLEAR'\n     GOTO <<END>>\n  ENDIF\n  LET L1 = TRIM(TRIM(P.MEM) '_')\n  IF L1 EQ ' '\n    GOTO <<END>>\n  ENDIF\n+EXPORT DSN=HLQ.ACS.DVL.JCLLIB(+L1+)\n <<ENDIT>>\n  SET ATTACH NOPAUSE\n  ATTACH\n  NOSEQ\n  POP\n  STOP\n <<END>>\n  WRITE '     PUTJCL EXITED   '\n  NOSEQ\n  POP\n  STOP\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "QP": {"ttr": 5896, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%o\\x01\\x01%o\\x17(\\x00\\x03\\x00\\x03\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-13T00:00:00", "modifydate": "2001-09-13T17:28:00", "lines": 3, "newlines": 3, "modlines": 0, "user": "EGHF3PY"}, "text": "<<QP>>\nDIS QUEUE N1.R7\nDIS NAME N1.R7\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RESET": {"ttr": 5898, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%o\\x01\\x01%o\\x171\\x00\"\\x00\"\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-13T00:00:00", "modifydate": "2001-09-13T17:31:00", "lines": 34, "newlines": 34, "modlines": 0, "user": "EGHF3PY"}, "text": "<<RESET>> : A1=EDIT LENGTH\nIF A1 EQ ''\n    LET L1 = 72\nELSE\n    LET L1 = A1\nENDIF\nSET ;\nNOSEQ\n%SET BOUNDS AWS 1 %L1%\nDETACH LIB\nSET ATTACH NOPAUSE\nSET EDITCHNG OFF\nSET USERID OFF\n: SET CMDLINES 2 1 CLEAR\nSET DSNCNT MAX\nSET DSNEMPTY ON\nSET PFKDELIM ;\nSET TLOCK OFF\nSET DISPLAY 1 72\nSET SUBMIT NOSEQ\nSET SUBMIT NOINCLUDE\nSET MSGLEVEL INFO\nSET PFKTRAP ON\nSET MODE BASIC\nSET MODE NUMX\nSET AUTOFF MAX\nSET DDI OFF\nSET MASTER OFF\nSET SCROLL FULL\nSET EOF DELETE1\nSET HEX OFF\nSET FILL NULL\n: SET JOBCNT MAX\nRETURN\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ROSREST": {"ttr": 5900, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01%o\\x01\\x01%o\\x174\\x00\\xf1\\x00\\xf1\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-13T00:00:00", "modifydate": "2001-09-13T17:34:00", "lines": 241, "newlines": 241, "modlines": 0, "user": "EGHF3PY"}, "text": "<<ROSREST>>\nPUSH\nSET ATTACH NOPAUSE\nTRAP ON\nDELETE\nWRITE AWS T\n'//ROSREST  JOB (DBSY,231),''CA SERVICES'',MSGLEVEL=(1,1),             '\n'//         CLASS=A,MSGCLASS=Q                                         '\n'//*ROUTE XEQ N3                                                       '\n'//RESTORE   EXEC  PGM=LIBUTIL,PARM=SELREST                            '\n'//STEPLIB   DD  DSN=ROSCOE.HLQ.RO60LIB,DISP=SHR                       '\n'//SYSPRINT  DD  SYSOUT=*                                              '\n'//ROSLIB00  DD  DSN=ROSCOE.HLQ.PRD.ROSLIB00,DISP=SHR                  '\n'//ROSLIB01  DD  DSN=ROSCOE.HLQ.PRD.ROSLIB01,DISP=SHR                  '\n'//ROSLIB02  DD  DSN=ROSCOE.HLQ.PRD.ROSLIB02,DISP=SHR                  '\n'//ROSLIB03  DD  DSN=ROSCOE.HLQ.PRD.ROSLIB03,DISP=SHR                  '\n'//ROSLIB04  DD  DSN=ROSCOE.HLQ.PRD.ROSLIB04,DISP=SHR                  '\n'//BACKUP    DD  DSN=ROSCOE.HLQ.$DATE$.BACKUP(-$GDG$),DISP=OLD         '\n'//SYSIN     DD  *                                                     '\nENDWRITE\n<<PANEL>>\nPANEL EXECUTE *\nSTARTDEF\nTAG $ (S TURQUOISE)\nTAG ? (SH RED)\nTAG \u00ac (SH BLUE)\nTAG + (SH YELLOW)\nTAG \u00a2 (SH GREEN)\nTAG & M PREFIX MEMBER GDG DATE\nTAG | (SH RED) MSG\n\u00ac******************************************************************************\n *                                                                            *\n *                   ?ROSCOE SELECTIVE RESTORE RPF\u00ac                           *\n *                                                                            *\n *                                                                            *\n *                                                                            *\n *                                                                            *\n * $ENTER THE ROSCOE PREFIX &___\u00ac      \u00a2(IF BLANK, DEFAULTS TO YOURS)\u00ac        *\n *                                                                            *\n * $ENTER THE MEMBER NAME &________\u00ac                                          *\n *                                                                            *\n * $ENTER THE GENERATION NUMBER &0\u00ac    \u00a2(I.E. 0 = LAST NIGHTS/WEEKS BACKUP)\u00ac  *\n *                                     \u00a2(     1 = PREVIOUS NIGHT/WEEK BACKUP)\u00ac*\n *                                                                            *\n *                                                                            *\n * $ENTER RESTORE FROM DAILY OR WEEKLY &D\u00ac \u00a2( D=DAILY,W=WEEKLY,A=ARCHIVE)\u00ac    *\n *                                                                            *\n *                                                                            *\n *                                                                            *\n *  $ PRESS <ENTER> AFTER FILLING IN THE PANEL    PRESS CLEAR TO CANCEL  \u00ac    *\n *                    $PRESS <PF1> FOR THE HELP SCREEN\u00ac                     \u00ac *\n *  |                                                         \u00ac               *\n ******************************************************************************\nENDDEF\n<<PROCESS>>\n IF AID EQ 'CLEAR' THEN                  :JOB CANCELLED, DELETE MEMBERS\n      RESPONSE 'ROSCOE SELECTIVE RESTORE CANCELLED'\n      GOTO <<RETURN>>\n ENDIF\n IF AID EQ 'PF1' THEN\n   GOTO <<SHOWHELP>>\n ENDIF\n LET L1 = TRIM(P.PREFIX '_')\n IF (L1 EQ '') OR (L1 EQ '___')\n   LET L1 = PREFIX\n ENDIF\n LET L2 = TRIM(P.MEMBER '_')\n IF (CONFORM(L2 'R') NE 1)   :VALIDATE MEMBER NAME\n   LET P.MSG = 'YOU MUST ENTER A VALID MEMBER NAME'\n   PANEL RESEND CURSOR P.MEMBER\n   GOTO <<PROCESS>>\n ENDIF\n LET L5 = P.GDG\n IF (L5 EQ '') OR (L5 EQ '_')\n   LET P.MSG = 'YOU MUST ENTER THE GENERATION DATA SET NUMBER'\n   PANEL RESEND CURSOR P.GDG\n   GOTO <<PROCESS>>\n ELSE\n   IF (CONFORM(L5 'N')) NE 1 THEN\n     LET P.MSG = 'GENERATION DATA SET NUMBER INVALID - REENTER'\n     PANEL RESEND CURSOR P.GDG\n     GOTO <<PROCESS>>\n   ENDIF\n ENDIF\n LET L6 = P.DATE\n IF (L6 EQ '') OR (L6 EQ '_')\n   LET P.MSG = 'YOU MUST ENTER \"D\", \"W\" OR \"A\" FOR THE TYPE OF RESTORE'\n   PANEL RESEND CURSOR P.DATE\n   GOTO <<PROCESS>>\n ELSE\n   IF (L6 NE 'D') AND (L6 NE 'W') AND (L6 NE 'A') THEN\n     LET P.MSG = 'RESTORE TYPE INVALID - REENTER'\n     PANEL RESEND CURSOR P.DATE\n     GOTO <<PROCESS>>\n   ENDIF\n ENDIF\n IF S.PREFIX NE L1\n    WRITE AWS B\n      L1|'.'|L2|','|S.PREFIX|'.'|L2\n      '/*'\n      '//'\n    ENDWRITE\n ELSE\n    WRITE AWS B\n      L1|'.'|L2\n      '/*'\n      '//'\n    ENDWRITE\n ENDIF\n +EDIT /$GDG$/+L5+/\n IF (L6 EQ 'D') THEN\n   EDIT /$DATE$/DAILY/\n ELSE\n   IF (L6 EQ 'W') THEN\n     EDIT /$DATE$/WEEKLY/\n   ELSE\n     EDIT /$DATE$/ARCHIVE/\n   ENDIF\n ENDIF\n :PAUSE\n:SUBMIT\nRETURN\n +WRITE  'JOB ROSREST HAS BEEN SUBMITTED TO RESTORE MEMBER 'L1|'.'|L2\n ENDWRITE\n<<RETURN>>\n POP\n DEL\n TRAP OFF\n RETURN\n:\n<<SHOWHELP>>\nPANEL EXECUTE *\nSTARTDEF\nTAG $ (S TURQUOISE)\nTAG ? (SH RED)\nTAG \u00ac (SH BLUE)\nTAG + (SH YELLOW)\nTAG \u00a2 (SH GREEN)\nTAG & M MEMBER GDG DATE\nTAG | (SH RED) MSG\n\u00ac******************************************************************************\n *                                                                            *\n *                   ?ROSCOE SELECTIVE RESTORE HELP SCREEN\u00ac                   *\n *                                                                            *\n *  THE ROSCOE BACKUPS ARE DONE IN THE FOLLOWING MANNER:                      *\n *                                                                            *\n *  THE DAILY BACKUPS ARE MADE UP OF\u00a2ONLY\u00acTHOSE ROSCOE MEMBERS THAT HAVE      *\n *  BEEN MODIFIED SINCE THE LAST DAILY OR WEEKLY BACKUP.  THE WEEKLY BACKUPS  *\n *  ARE MADE UP OF\u00a2ALL\u00acROSCOE MEMBERS.  FOLLOWING ARE A FEW EXAMPLES ON HOW   *\n *  TO USE THIS RPF:                                                          *\n *                                                                            *\n *  IT'S WEDNESDAY, AND YOU WANT TO RESTORE A MODULE LAST UPDATED ON MONDAY,  *\n *  YOU WOULD ENTER THE MODULE NAME, A\u00a21\u00acFOR GENERATION, TO GET THE NIGHT BE- *\n *  FORE LASTS BACKUP, AND\u00a2D\u00acFOR DAILY BACKUPS.                               *\n *                                                                            *\n *  IT'S MONDAY, AND YOU WANT TO RESTORE A MODULE FROM LAST FRIDAY, YOU WOULD *\n *  ENTER THE MODULE NAME, A\u00a20\u00acFOR GENERATION, TO GET THE WEEKENDS FULL BACK- *\n *  UP, AND\u00a2W\u00acFOR WEEKLY BACKUPS.                                             *\n *                                                                            *\n *  USUALLY, TUESDAY THRU SATURDAY, YOU WANT TO USE\u00a2DAILY\u00acBACKUPS(IF THE MOD- *\n *  ULE HAS BEEN UPDATED), ELSE USE\u00a2WEEKLY\u00acBACKUPS                            *\n *  +PF8 = NEXT PAGE     ANY OTHER KEY = MAIN MENU                            *\n ******************************************************************************\nENDDEF\nIF AID EQ 'ENTER'\n  GOTO <<PANEL>>\nELSE\nPANEL EXECUTE *\nSTARTDEF\nTAG $ (S TURQUOISE)\nTAG ? (SH RED)\nTAG \u00ac (SH BLUE)\nTAG + (SH YELLOW)\nTAG \u00a2 (SH GREEN)\nTAG & M MEMBER GDG DATE\nTAG | (SH RED) MSG\n\u00ac******************************************************************************\n *                                                                            *\n *                   ?ROSCOE SELECTIVE RESTORE HELP SCREEN\u00ac                   *\n *                                                                            *\n *  THE ROSCOE ARCHIVES ARE DONE IN THE FOLLOWING MANNER:                     *\n *                                                                            *\n *  ARCHIVING OF ROSCOE MEMBERS IS PERFORMED THROUGHOUT THE YEAR TO MAINTAIN  *\n *  OPTIMUM SPACE UTILIZATION AND ROSCOE PERFORMANCE.  MEMBERS NOT ACCESSED   *\n *  IN OVER 1 YEAR ARE ELIGIBLE FOR ARCHIVING. THESE ARCHIVED MEMBERS ARE     *\n *  AVAILABLE TO BE RESTORED IN THE SAME MANNER AS MEMBERS BACKED UP ON A     *\n *  DAILY AND WEEKLY BASIS.                                                   *\n *                                                                            *\n *  TO RESTORE A MEMBER WHICH WAS ARCHIVED DURING THE LATEST ARCHIVE PROCESS, *\n *  YOU WOULD ENTER THE PREFIX OF THE USER WHO ACTUALLY OWNED THE MEMBER (THE *\n *  DEFAULT IS YOUR PREFIX), THE MEMBER NAME TO BE RESTORED, \u00a20\u00ac FOR THE      *\n *  ARCHIVE TAPE AND 'A' TO INDICATE THAT THE REQUEST IS FOR AN ARCHIVED      *\n *  MEMBER.                                                                   *\n *                                                                            *\n *  THE FOLLOWING ARE THE CREATION DATES OF THE CURRENT ARCHIVE TAPES:        *\n *  05/13/00 = 0   09/25/99 = 1  05/06/99 = 2   06/11/98 = 3   12/07/97 = 4   *\n *                                                                            *\n *                                                                            *\n *  +PF8 = MEMBER INFORMATION    ANY OTHER KEY = MAIN MENU\u00ac                   *\n ******************************************************************************\nENDDEF\n  IF AID EQ 'PF8'\n     GOTO <<MEMLIST>>\n  ENDIF\nGOTO <<PANEL>>\n<<MEMLIST>>\nPANEL EXECUTE *\nSTARTDEF\nTAG $ (S TURQUOISE)\nTAG ? (SH RED)\nTAG \u00ac (SH BLUE)\nTAG + (SH YELLOW)\nTAG \u00a2 (SH GREEN)\nTAG & M MEMBER GDG DATE\nTAG | (SH RED) MSG\n\u00ac******************************************************************************\n *                                                                            *\n *                   ?ROSCOE SELECTIVE RESTORE HELP SCREEN\u00ac                   *\n *                                                                            *\n *  TO OBTAIN A LIST OF MEMBERS FROM THE CURRENT ARCHIVE TAPES, IMPORT        *\n *  ONE OF THE FOLLOWING DATASETS:                                            *\n *                                                                            *\n *  FOR DATE 05/12/00    USE DATASET    ROSCOE.HLQ.ARCHIVE.LIST.D00134        *\n *           09/25/99                   ROSCOE.HLQ.ARCHIVE.LIST.D99268        *\n *           05/06/99                   ROSCOE.HLQ.ARCHIVE.LIST.D99126        *\n *           06/11/98                   ROSCOE.HLQ.ARCHIVE.LIST.D98162        *\n *           12/07/97                   ROSCOE.HLQ.ARCHIVE.LIST.D97341        *\n *           02/25/97                   ROSCOE.HLQ.ARCHIVE.LIST.D97050        *\n *                                                                            *\n *                                                                            *\n *                                                                            *\n *                                                                            *\n *                                                                            *\n *                                                                            *\n *                                                                            *\n *                                                                            *\n *                                                                            *\n *  +PRESS ANY KEY TO RETURN TO THE MAIN MENU \u00ac                         \u00ac     *\n ******************************************************************************\nENDDEF\nGOTO <<PANEL>>\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SCANACC": {"ttr": 5905, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x01\\x01%o\\x01\\x01&\\x1f\\x141\\x00G\\x00C\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2001-09-13T00:00:00", "modifydate": "2001-09-18T14:31:00", "lines": 71, "newlines": 67, "modlines": 0, "user": "EGHF3PY"}, "text": "<<SCANACC>>\n+EXEC SCANRMEM 'PFX.$$CCLIST' '+A1+'\n+EXEC SCANRMEM 'PFX.$$CHDEFS' '+A1+'\n+EXEC SCANRMEM 'PFX.$$CHHELP' '+A1+'\n+EXEC SCANRMEM 'PFX.$$JCARDS' '+A1+'\n+EXEC SCANRMEM 'PFX.$$JCNVRT' '+A1+'\n+EXEC SCANRMEM 'PFX.$$JSETUP' '+A1+'\n+EXEC SCANRMEM 'PFX.$CC' '+A1+'\n+EXEC SCANRMEM 'PFX.$CCA' '+A1+'\n+EXEC SCANRMEM 'PFX.$CCAL' '+A1+'\n+EXEC SCANRMEM 'PFX.$CCB' '+A1+'\n+EXEC SCANRMEM 'PFX.$CCBL' '+A1+'\n+EXEC SCANRMEM 'PFX.$CCC' '+A1+'\n+EXEC SCANRMEM 'PFX.$CCCL' '+A1+'\n+EXEC SCANRMEM 'PFX.$CCP' '+A1+'\n+EXEC SCANRMEM 'PFX.$CCT' '+A1+'\n+EXEC SCANRMEM 'PFX.$CCXL' '+A1+'\n+EXEC SCANRMEM 'PFX.ACC' '+A1+'\n+EXEC SCANRMEM 'PFX.ACCEXP' '+A1+'\n+EXEC SCANRMEM 'PFX.CBL2USER' '+A1+'\n+EXEC SCANRMEM 'PFX.CC' '+A1+'\n+EXEC SCANRMEM 'PFX.CCA' '+A1+'\n+EXEC SCANRMEM 'PFX.CCACXJCL' '+A1+'\n+EXEC SCANRMEM 'PFX.CCAL' '+A1+'\n+EXEC SCANRMEM 'PFX.CCALXPAN' '+A1+'\n+EXEC SCANRMEM 'PFX.CCASXJCL' '+A1+'\n+EXEC SCANRMEM 'PFX.CCAXXHLP' '+A1+'\n+EXEC SCANRMEM 'PFX.CCAXXPAN' '+A1+'\n+EXEC SCANRMEM 'PFX.CCB' '+A1+'\n+EXEC SCANRMEM 'PFX.CCBDIJCL' '+A1+'\n+EXEC SCANRMEM 'PFX.CCBDXJCL' '+A1+'\n+EXEC SCANRMEM 'PFX.CCBL' '+A1+'\n+EXEC SCANRMEM 'PFX.CCBLXPAN' '+A1+'\n+EXEC SCANRMEM 'PFX.CCBXIJCL' '+A1+'\n+EXEC SCANRMEM 'PFX.CCBXXHLP' '+A1+'\n+EXEC SCANRMEM 'PFX.CCBXXJCL' '+A1+'\n+EXEC SCANRMEM 'PFX.CCBXXPAN' '+A1+'\n+EXEC SCANRMEM 'PFX.CCC' '+A1+'\n+EXEC SCANRMEM 'PFX.CCCL' '+A1+'\n+EXEC SCANRMEM 'PFX.CCCLXPAN' '+A1+'\n+EXEC SCANRMEM 'PFX.CCCXIJCL' '+A1+'\n+EXEC SCANRMEM 'PFX.CCCXXHLP' '+A1+'\n+EXEC SCANRMEM 'PFX.CCCXXJCL' '+A1+'\n+EXEC SCANRMEM 'PFX.CCCXXPAN' '+A1+'\n+EXEC SCANRMEM 'PFX.CCDEFGET' '+A1+'\n+EXEC SCANRMEM 'PFX.CCDEFHLP' '+A1+'\n+EXEC SCANRMEM 'PFX.CCDEFPAN' '+A1+'\n+EXEC SCANRMEM 'PFX.CCDEFSET' '+A1+'\n+EXEC SCANRMEM 'PFX.CCHLPPAN' '+A1+'\n+EXEC SCANRMEM 'PFX.CCHLPSHO' '+A1+'\n+EXEC SCANRMEM 'PFX.CCJOBBLD' '+A1+'\n+EXEC SCANRMEM 'PFX.CCJOBJCL' '+A1+'\n+EXEC SCANRMEM 'PFX.CCLIBMEM' '+A1+'\n+EXEC SCANRMEM 'PFX.CCMEMPAN' '+A1+'\n+EXEC SCANRMEM 'PFX.CCMEMSEL' '+A1+'\n+EXEC SCANRMEM 'PFX.CCPXXJCL' '+A1+'\n+EXEC SCANRMEM 'PFX.CCPXXPAN' '+A1+'\n+EXEC SCANRMEM 'PFX.CCROSPAN' '+A1+'\n+EXEC SCANRMEM 'PFX.CCROSSEL' '+A1+'\n+EXEC SCANRMEM 'PFX.CCSESSET' '+A1+'\n+EXEC SCANRMEM 'PFX.CCSETPAN' '+A1+'\n+EXEC SCANRMEM 'PFX.CCTXXJCL' '+A1+'\n+EXEC SCANRMEM 'PFX.CCTXXPAN' '+A1+'\n+EXEC SCANRMEM 'PFX.CCURTPAN' '+A1+'\n+EXEC SCANRMEM 'PFX.CCURTSEL' '+A1+'\n+EXEC SCANRMEM 'PFX.CCXLXPAN' '+A1+'\n+EXEC SCANRMEM 'PFX.CCXXXHLP' '+A1+'\n+EXEC SCANRMEM 'PFX.CCXXXPAN' '+A1+'\n+EXEC SCANRMEM 'PFX.DELDUPS' '+A1+'\n+EXEC SCANRMEM 'PFX.IN' '+A1+'\n+EXEC SCANRMEM 'PFX.RESET' '+A1+'\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SCANLIB": {"ttr": 6145, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01&\\x0f\\x01\\x01&\\x0f\\x163\\x00\\x16\\x00\\x16\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-17T00:00:00", "modifydate": "2001-09-17T16:33:00", "lines": 22, "newlines": 22, "modlines": 0, "user": "EGHF3PY"}, "text": "<<SCANLIB>>\n:\n:SCANLIB LIBNAME SEARCHSTRING SAVENAME RANGE\n:SCANLIB 'PROD.SOURCE.LIBMAST' STRING MIST CPPX\n:        'DVL.SOURCE.LIBMAST'\n:        'SAT.SOURCE.LIBMAST'\n:        'SYS1.MVS.LIBMAST'\n:\nPUSH\n+IMPORT DSN=+A1+(*),RANGE='+A4+'\nDELETES /LAST-UPDATE/\nFILL 11 255 / /\nLET L1 = LENGTH(A1)\nIF (L1 EQ 2)\n   LSHIFT 1\nENDIF\nSORT SORT FIELDS=(1,12,CH,D)\n+SUFFIX /)' '+A2+'/\n+PREFIX /EXEC SCANLMEM '+A1+(/\nRENUMBER\n+1 <<+A3+>>\n+SAVE +A3+\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SCANLMEM": {"ttr": 6147, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01&\\x1f\\x01\\x01&\\x1f\\x14\\x02\\x00\\x18\\x00\\x18\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-18T00:00:00", "modifydate": "2001-09-18T14:02:00", "lines": 24, "newlines": 24, "modlines": 0, "user": "EGHF3PY"}, "text": "<<SCANLMEM>>\n:\n: SCANLMEM 'LIBNAME( MEMNAME)' SEARCHSTRING\n:\n:\nPUSH\nTRAP ON\nDELETE\n+IMPORT DSN=+A1+\n+DELETEX  /+A2+/\nIF (AWSCOUNT GT 0)\n   RENUMBER\n   RSHIFT 5\n   +1 +A1+\n   COPY @TEMP B\n   IF (TC EQ 4)\n      SAVE @TEMP\n   ELSE\n      UPDATE @TEMP\n   ENDIF\nENDIF\nTRAP OFF\nPOP\nRETURN\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SCANMEM": {"ttr": 6149, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01&\\x1f\\x01\\x01&\\x1f\\x14\\x05\\x00\\x1a\\x00\\x1a\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-18T00:00:00", "modifydate": "2001-09-18T14:05:00", "lines": 26, "newlines": 26, "modlines": 0, "user": "EGHF3PY"}, "text": "<<SCANMEM>>\n:\n: SCANMEM LIBNAME MEMNAME SEARCHSTRING\n:\n: YOU CAN USE RPF 'SCANPDS' TO BUILD ANOTHER RPF THAT CAN THEN BE USED\n: IN CONJUNCTION WITH THIS ONE TO SCAN A PDS FOR A SEARCH STRING\n:\nPUSH\nTRAP ON\nDELETE\n+IMPORT DSN=+A1+(+A2+),ASIS\n+DELETEX /+A3+/\nIF (AWSCOUNT GT 0)\n   RENUMBER\n   RSHIFT 5\n   +1 +A1+(+A2+)\n   COPY @TEMP B\n   IF (TC EQ 4)\n      SAVE @TEMP\n   ELSE\n      UPDATE @TEMP\n   ENDIF\nENDIF\nTRAP OFF\nPOP\nRETURN\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SCANPFIX": {"ttr": 6151, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01&\\x1f\\x01\\x01&\\x1f\\x141\\x00\\x14\\x00\\x14\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-18T00:00:00", "modifydate": "2001-09-18T14:31:00", "lines": 20, "newlines": 20, "modlines": 0, "user": "EGHF3PY"}, "text": "<<SCANPFIX>>\n+EXEC SCANRMEM 'PFX.$DD'      '+A1+'\n+EXEC SCANRMEM 'PFX.$DDA'     '+A1+'\n+EXEC SCANRMEM 'PFX.$DDB'     '+A1+'\n+EXEC SCANRMEM 'PFX.$DDC'     '+A1+'\n+EXEC SCANRMEM 'PFX.$DDD'     '+A1+'\n+EXEC SCANRMEM 'PFX.DDADIJCL' '+A1+'\n+EXEC SCANRMEM 'PFX.DDADXJCL' '+A1+'\n+EXEC SCANRMEM 'PFX.DDAXIJCL' '+A1+'\n+EXEC SCANRMEM 'PFX.DDAXXJCL' '+A1+'\n+EXEC SCANRMEM 'PFX.DDBXIJCL' '+A1+'\n+EXEC SCANRMEM 'PFX.DDBXXJCL' '+A1+'\n+EXEC SCANRMEM 'PFX.DDCDIJCL' '+A1+'\n+EXEC SCANRMEM 'PFX.DDCDXJCL' '+A1+'\n+EXEC SCANRMEM 'PFX.DDCXIJCL' '+A1+'\n+EXEC SCANRMEM 'PFX.DDCXXJCL' '+A1+'\n+EXEC SCANRMEM 'PFX.DDDXIJCL' '+A1+'\n+EXEC SCANRMEM 'PFX.DDDXXJCL' '+A1+'\n+EXEC SCANRMEM 'PFX.DDXXXPAN' '+A1+'\n+EXEC SCANRMEM 'PFX.PFIX'     '+A1+'\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SCANRMEM": {"ttr": 6153, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01&\\x1f\\x01\\x01&\\x1f\\x145\\x00\\x1a\\x00\\x1a\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-18T00:00:00", "modifydate": "2001-09-18T14:35:00", "lines": 26, "newlines": 26, "modlines": 0, "user": "EGHF3PY"}, "text": "<<SCANRMEM>>\n:\n: SCANRMEM 'LIBNAME. MEMNAME' SEARCHSTRING\n:\n: YOU CAN USE RPF 'SCANPDS' TO BUILD ANOTHER RPF THAT CAN THEN BE USED\n: IN CONJUNCTION WITH THIS ONE TO SCAN A PDS FOR A SEARCH STRING\n:\nPUSH\nTRAP ON\nDELETE\n+FETCH +A1+\n+DELETEX %+A2+%\nIF (AWSCOUNT GT 0)\n   RENUMBER\n   RSHIFT 5\n   +1 +A1+\n   COPY @TEMP B\n   IF (TC EQ 4)\n      SAVE @TEMP\n   ELSE\n      UPDATE @TEMP\n   ENDIF\nENDIF\nTRAP OFF\nPOP\nRETURN\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SCANROS": {"ttr": 6155, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x01&\\x1f\\x01\\x01&/\\x14\\x01\\x00\\x11\\x00\\x11\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2001-09-18T00:00:00", "modifydate": "2001-09-19T14:01:00", "lines": 17, "newlines": 17, "modlines": 0, "user": "EGHF3PY"}, "text": "<<SCANROS>>\n:\n:SCANROS LIBNAME SEARCHSTRING SAVENAME\n:\nPUSH\n+EXEC ALL '+A1+'\nFILL 13 255 / /\n:::LET L1 = LENGTH(A1)\n:::IF (L1 EQ 2)\n:::   LSHIFT 1\n:::ENDIF\nSORT SORT FIELDS=(1,12,CH,D)\n+SUFFIX %' '+A2+'%\nPREFIX /EXEC PFX.SCANRMEM '/\nRENUMBER\n+1 <<+A3+>>\n+SAVE +A3+\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SD": {"ttr": 6157, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01&\\x1f\\x01\\x01&\\x1f\\x14R\\x00\\x02\\x00\\x02\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-18T00:00:00", "modifydate": "2001-09-18T14:52:00", "lines": 2, "newlines": 2, "modlines": 0, "user": "EGHF3PY"}, "text": "<<SD>>\n+SET DISPLAY +A1+ +A2+\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SDJ": {"ttr": 6159, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01&\\x1f\\x01\\x01&\\x1f\\x14V\\x00\\x02\\x00\\x02\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-18T00:00:00", "modifydate": "2001-09-18T14:56:00", "lines": 2, "newlines": 2, "modlines": 0, "user": "EGHF3PY"}, "text": "<<SDJ>>\n+SET DISPLAY JOB +A1+ +A2+\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SHAREACC": {"ttr": 6161, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01&\\x1f\\x01\\x01&\\x1f\\x15\\x01\\x00 \\x00 \\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-18T00:00:00", "modifydate": "2001-09-18T15:01:00", "lines": 32, "newlines": 32, "modlines": 0, "user": "EGHF3PY"}, "text": "<<SHAREACC>>\nALTER PFX.$$JCNVRT      E\nALTER PFX.$$JSETUP      E\nALTER PFX.$CC           E\nALTER PFX.$CCA          E\nALTER PFX.$CCAL         E\nALTER PFX.$CCB          E\nALTER PFX.$CCBL         E\nALTER PFX.$CCC          E\nALTER PFX.$CCCL         E\nALTER PFX.$CCP          E\nALTER PFX.$CCT          E\nALTER PFX.$CCXL         E\nALTER PFX.ACC           E\nALTER PFX.CCA           E\nALTER PFX.CCAL          E\nALTER PFX.CCB           E\nALTER PFX.CCBL          E\nALTER PFX.CCC           E\nALTER PFX.CCCL          E\nALTER PFX.CCDEFGET      E\nALTER PFX.CCDEFSET      E\nALTER PFX.CCHLPSHO      E\nALTER PFX.CCJOBBLD      E\nALTER PFX.CCLIBMEM      E\nALTER PFX.CCMEMSEL      E\nALTER PFX.CCROSSEL      E\nALTER PFX.CCSESSET      E\nALTER PFX.CCURTSEL      E\nALTER PFX.DELDUPS       E\nALTER PFX.IN            E\nALTER PFX.RESET         E\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SHAREALL": {"ttr": 6163, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01&\\x1f\\x01\\x01&\\x1f\\x15\\x03\\x00\\x0b\\x00\\x0b\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-18T00:00:00", "modifydate": "2001-09-18T15:03:00", "lines": 11, "newlines": 11, "modlines": 0, "user": "EGHF3PY"}, "text": "<<SHAREALL>>\nEXEC DIR 'PFX'\nFILL 14 255 / /\nPREFIX /ALTER /\nSUFFIX / S/\nRENUMBER\n1 <<MIST>>\nSAVE MIST\nEXEC MIST\nDEL MIST\nEXEC SHAREACC\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SIGNON": {"ttr": 6165, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01&\\x1f\\x01\\x01&\\x1f\\x15\\x10\\x003\\x003\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-18T00:00:00", "modifydate": "2001-09-18T15:10:00", "lines": 51, "newlines": 51, "modlines": 0, "user": "EGHF3PY"}, "text": "<<SIGNON>>\n   NOSEQ\n   TAB 8 12 16 20\n   TAB \\\n   EDIT 1 255\n:::SET MASTER HLQ.DVL.LIBMAST\n   SET MASTER OFF\n   SET DSNRECALL NOWAIT\n   SET STMTCNT MAX\n   SET CMDLINES 3 3\n   SET CURSOR DATA\n   SET JOBCNT MAX\n   SET DSNCNT MAX\n   SET MONLEVEL ERROR\n   SET SUBMIT NOSEQ\n   SET TLOCK OFF\n:::SET SEND OPER\n   SET EDITCHNG OFF\n   SET AUTOINSERT  OFF\n   SET AUTOINDENT  OFF\n   LET AWS.PA2  = 'EXEC CLEANROS&OFF'\n   LET AWS.PF4  = '+'\n   LET AWS.PF12 = 'UPDATE *&RESPONSE ''MEMBER UPDATED'''\n   LET AWS.PF13 = 'DISPLAY'\n   LET AWS.PF14 = 'SET DISPLAY AWS FLIP NUMX NUM'\n   LET AWS.PF15 = 'SET MODE NONUM'\n   LET AWS.PF16 = 'EXEC R$.LIBCTL'\n   LET AWS.PF17 = 'EXEC R$.GETMEM'\n   LET AWS.PF18 = 'EXEC PFX.PUTMEM'\n   LET AWS.PF19 = 'EXEC R$.FINDPGM'\n   LET AWS.PF20 = 'COPY PRINT T&SUB'\n   LET LIB.PF13 = 'DISPLAY'\n   LET JOB.PF13 = 'FIRST JOB FILE'\n   LET JOB.PF14 = 'ATTACH JOB * FILE 2'\n   LET JOB.PF15 = 'ATTACH JOB * FILE 3&INCL !- COND CODE!'\n   LET JOB.PF16 = 'ATTACH JOB * FILE 9'\n   LET JOB.PF17 = 'STATUS JOB'\n   LET JOB.PF18 = 'EXEC PAFL Z&EXEC DJ'\n   LET JOB.PF19 = 'PREV JOB FILE'\n   LET JOB.PF20 = 'NEXT JOB FILE'\n   LET JOB.PF21 = 'EXEC N2R1612&EXEC DJ'\n:::LET JOB.PF21 = 'EXEC N1R7&EXEC DJ'\n:::LET JOB.PF21 = 'EXEC N1R4484&EXEC DJ'\n:::LET JOB.PF21 = 'EXEC N1R4593&EXEC DJ'\n   EXEC PFX.BDAY\n   PUSH\n   TRAP ON\n   LIST ZZZZZMSG\n   EXEC TSOCHK\n   TRAP OFF\n   POP\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SJ": {"ttr": 6167, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01&\\x1f\\x01\\x01&\\x1f\\x15 \\x00\\x06\\x00\\x06\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-18T00:00:00", "modifydate": "2001-09-18T15:20:00", "lines": 6, "newlines": 6, "modlines": 0, "user": "EGHF3PY"}, "text": "<<SJ>>\nPUSH\nSET CURSOR HOME\nSTATUS JOB\nPOP\nRETURN\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TEMP80": {"ttr": 6169, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01&\\x1f\\x01\\x01&\\x1f\\x15$\\x00\\x02\\x00\\x02\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-18T00:00:00", "modifydate": "2001-09-18T15:24:00", "lines": 2, "newlines": 2, "modlines": 0, "user": "EGHF3PY"}, "text": "<<TEMP80>>\n+ +A1+ DSN=HLQ.TEMP80\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TSOCHK": {"ttr": 6171, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01&\\x1f\\x01\\x01&\\x1f\\x151\\x00\\x11\\x00\\x11\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-18T00:00:00", "modifydate": "2001-09-18T15:31:00", "lines": 17, "newlines": 17, "modlines": 0, "user": "EGHF3PY"}, "text": "<<TSOCHK>>\nPUSH\nLET L1 = DATEFUN('AC')\nFETCH  PFX.TSODAT\nRENUMBER 1,1\nPOINT\nTRAP ON\nREAD AWS * L2\nLET L3 = SUBSTR(L2 1 8)\nDELETE\nIF (L1 NE L3)\n    SUBMIT PFX.TSOSAVE\n    EXEC TSODATE\nENDIF\nTRAP OFF\nPOP\nRETURN\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TSODATE": {"ttr": 6173, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01&\\x1f\\x01\\x01&\\x1f\\x155\\x00\\x06\\x00\\x06\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-18T00:00:00", "modifydate": "2001-09-18T15:35:00", "lines": 6, "newlines": 6, "modlines": 0, "user": "EGHF3PY"}, "text": "<<TSODATE>>\nDELETE\nLET L1 = DATEFUN('AC')\n+=1 +L1+\nU TSODAT\nRETURN\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TSOSAVE": {"ttr": 6175, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x01&\\x1f\\x01\\x01&\\x1f\\x15A\\x00\\xc7\\x00\\xc7\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2001-09-18T00:00:00", "modifydate": "2001-09-18T15:41:00", "lines": 199, "newlines": 199, "modlines": 0, "user": "EGHF3PY"}, "text": "//JOBNAME  JOB (ACCTINFO),PGMR,CLASS=A,MSGCLASS=D\n//PROCLIB JCLLIB ORDER=HLQ.DVL.PROC\n//        SET TITLE1='PFX.TSOSAVE'\n//OUTPUT INCLUDE MEMBER=DESTCH\n//*-------------------------------------------------------------------*\n//*        IEBPTPCH                                                   *\n//*-------------------------------------------------------------------*\n//STEP1    EXEC PGM=IEBPTPCH\n//SYSPRINT DD SYSOUT=*\n//SYSUT1   DD DSN=HLQ.ISPPROF,DISP=SHR\n//SYSUT2   DD SYSOUT=*\n//SYSIN    DD    *\n   PRINT   TYPORG=PO,MAXNAME=999,MAXFLDS=999\n   MEMBER NAME=ISFPROF\n   RECORD FIELD=(80)\n//*-------------------------------------------------------------------*\n//*        IEBPTPCH                                                   *\n//*-------------------------------------------------------------------*\n//STEP2    EXEC PGM=IEBPTPCH\n//SYSPRINT DD SYSOUT=*\n//SYSUT1   DD DSN=HLQ.CMDS,DISP=SHR\n//SYSUT2   DD SYSOUT=*\n//SYSIN    DD    *\n   PRINT   TYPORG=PO,MAXNAME=999,MAXFLDS=999\n   MEMBER NAME=ISPCMDS\n   RECORD FIELD=(80)\n//*-------------------------------------------------------------------*\n//*        IEBPTPCH                                                   *\n//*-------------------------------------------------------------------*\n//STEP3    EXEC PGM=IEBPTPCH\n//SYSPRINT DD SYSOUT=*\n//SYSUT1   DD DSN=HLQ.ISPPLIB,DISP=SHR\n//SYSUT2   DD SYSOUT=*\n//SYSIN    DD    *\n   PRINT   TYPORG=PO,MAXNAME=999,MAXFLDS=999\n   MEMBER NAME=FS\n   RECORD FIELD=(80)\n//*-------------------------------------------------------------------*\n//*        IEBPTPCH                                                   *\n//*-------------------------------------------------------------------*\n//STEP4    EXEC PGM=IEBPTPCH\n//SYSPRINT DD SYSOUT=*\n//SYSUT1   DD DSN=HLQ.REXX,DISP=SHR\n//SYSUT2   DD SYSOUT=*\n//SYSIN    DD    *\n   PRINT   TYPORG=PO,MAXNAME=999,MAXFLDS=999\n   MEMBER NAME=FS\n   RECORD FIELD=(80)\n//*-------------------------------------------------------------------*\n//*        IEBPTPCH                                                   *\n//*-------------------------------------------------------------------*\n//STEP5    EXEC PGM=IEBPTPCH\n//SYSPRINT DD SYSOUT=*\n//SYSUT1   DD DSN=HLQ.CLIST,DISP=SHR\n//SYSUT2   DD SYSOUT=*\n//SYSIN    DD    *\n   PRINT   TYPORG=PO,MAXNAME=999,MAXFLDS=999\n   MEMBER NAME=TRB\n   RECORD FIELD=(80)\n//*-------------------------------------------------------------------*\n//*        IEBGENER                                                   *\n//*-------------------------------------------------------------------*\n//STEP6    EXEC PGM=IEBGENER\n//SYSPRINT DD SYSOUT=*\n//SYSUT1   DD DSN=HLQ.TEMP80,DISP=SHR\n//SYSUT2   DD SYSOUT=*\n//SYSIN    DD    DUMMY\n//*-------------------------------------------------------------------*\n//*        IEBGENER                                                   *\n//*-------------------------------------------------------------------*\n//*STEP7    EXEC PGM=IEBGENER\n//*SYSPRINT DD SYSOUT=*\n//*SYSUT1   DD DSN=HLQ.TEMP81,DISP=SHR\n//*SYSUT2   DD SYSOUT=*\n//*SYSIN    DD    DUMMY\n//*-------------------------------------------------------------------*\n//*        IEBGENER                                                   *\n//*-------------------------------------------------------------------*\n//*STEP8    EXEC PGM=IEBGENER\n//*SYSPRINT DD SYSOUT=*\n//*SYSUT1   DD DSN=HLQ.TEMP90,DISP=SHR\n//*SYSUT2   DD SYSOUT=*\n//*SYSIN    DD    DUMMY\n//*-------------------------------------------------------------------*\n//*        IEBGENER                                                   *\n//*-------------------------------------------------------------------*\n//STEP9    EXEC PGM=IEBGENER\n//SYSPRINT DD SYSOUT=*\n//SYSUT1   DD DSN=HLQ.TEMP132,DISP=SHR\n//SYSUT2   DD SYSOUT=*\n//SYSIN    DD    DUMMY\n//*-------------------------------------------------------------------*\n//*        IEBGENER                                                   *\n//*-------------------------------------------------------------------*\n//STEP10   EXEC PGM=IEBGENER\n//SYSPRINT DD SYSOUT=*\n//SYSUT1   DD DSN=HLQ.T1,DISP=SHR\n//SYSUT2   DD SYSOUT=*\n//SYSIN    DD    DUMMY\n//*-------------------------------------------------------------------*\n//*        IEBGENER                                                   *\n//*-------------------------------------------------------------------*\n//STEP11   EXEC PGM=IEBGENER\n//SYSPRINT DD SYSOUT=*\n//SYSUT1   DD DSN=HLQ.T2,DISP=SHR\n//SYSUT2   DD SYSOUT=*\n//SYSIN    DD    DUMMY\n//*-------------------------------------------------------------------*\n//*        IEBPTPCH                                                   *\n//*-------------------------------------------------------------------*\n//STEP12   EXEC PGM=IEBPTPCH\n//SYSPRINT DD SYSOUT=*\n//SYSUT1   DD DSN=HLQ.BOOKMGR.PROFILE,DISP=SHR\n//SYSUT2   DD SYSOUT=*\n//SYSIN    DD    *\n   PRINT   TYPORG=PO,MAXNAME=999,MAXFLDS=999\n   MEMBER NAME=ISPSPROF\n   RECORD FIELD=(80)\n//*-------------------------------------------------------------------*\n//*        IEBPTPCH                                                   *\n//*-------------------------------------------------------------------*\n//STEP13   EXEC PGM=IEBPTPCH\n//SYSPRINT DD SYSOUT=*\n//SYSUT1   DD DSN=HLQ.QUICKREF.PROFILE,DISP=SHR\n//SYSUT2   DD SYSOUT=*\n//SYSIN    DD    *\n   PRINT   TYPORG=PO,MAXNAME=999,MAXFLDS=999\n   MEMBER NAME=ISPSPROF\n   RECORD FIELD=(80)\n//*-------------------------------------------------------------------*\n//*        IEBPTPCH                                                   *\n//*-------------------------------------------------------------------*\n//STEP14   EXEC PGM=IEBPTPCH\n//SYSPRINT DD SYSOUT=*\n//SYSUT1   DD DSN=HLQ.SOURCE,DISP=SHR\n//SYSUT2   DD SYSOUT=*\n//SYSIN    DD    *\n   PRINT   TYPORG=PO,MAXNAME=999,MAXFLDS=999\n   MEMBER NAME=CPPQ80\n   RECORD FIELD=(80)\n//*-------------------------------------------------------------------*\n//*        IEBPTPCH                                                   *\n//*-------------------------------------------------------------------*\n//STEP15   EXEC PGM=IEBPTPCH\n//SYSPRINT DD SYSOUT=*\n//SYSUT1   DD DSN=HLQ.DVL.PROC,DISP=SHR\n//SYSUT2   DD SYSOUT=*\n//SYSIN    DD    *\n   PRINT   TYPORG=PO,MAXNAME=999,MAXFLDS=999\n   MEMBER NAME=DESTCH\n   RECORD FIELD=(80)\n//*-------------------------------------------------------------------*\n//*        IEBPTPCH                                                   *\n//*-------------------------------------------------------------------*\n//STEP16   EXEC PGM=IEBPTPCH\n//SYSPRINT DD SYSOUT=*\n//SYSUT1   DD DSN=HLQ.ACCRPF.BACKUP,DISP=SHR\n//SYSUT2   DD SYSOUT=*\n//SYSIN    DD    *\n   PRINT   TYPORG=PO,MAXNAME=999,MAXFLDS=999\n   MEMBER NAME=$$CCHELP\n   RECORD FIELD=(80)\n//*-------------------------------------------------------------------*\n//*        IEBPTPCH                                                   *\n//*-------------------------------------------------------------------*\n//STEP17   EXEC PGM=IEBPTPCH\n//SYSPRINT DD SYSOUT=*\n//SYSUT1   DD DSN=HLQ.MACLIB,DISP=SHR\n//SYSUT2   DD SYSOUT=*\n//SYSIN    DD    *\n   PRINT   TYPORG=PO,MAXNAME=999,MAXFLDS=999\n   MEMBER NAME=MODULE\n   RECORD FIELD=(80)\n//*-------------------------------------------------------------------*\n//*        IEBGENER                                                   *\n//*-------------------------------------------------------------------*\n//STEP18   EXEC PGM=IEBGENER\n//SYSPRINT DD SYSOUT=*\n//SYSUT1   DD DSN=HLQ.TOOLS.LOAD(COPYFILE),DISP=SHR\n//SYSUT2   DD DSN=&&TEMP,DISP=(,DELETE,DELETE),\n//            SPACE=(CYL,(1,1),RLSE),UNIT=SYSDA\n//SYSIN    DD    DUMMY\n//*-------------------------------------------------------------------*\n//*        IEBGENER                                                   *\n//*-------------------------------------------------------------------*\n//STEP19   EXEC PGM=IEBGENER\n//SYSPRINT DD SYSOUT=*\n//SYSUT1   DD DSN=HLQ.CBT(CSHCSH),DISP=SHR\n//SYSUT2   DD DSN=&&TEMP,DISP=(,DELETE,DELETE),\n//            SPACE=(CYL,(1,1),RLSE),UNIT=SYSDA\n//SYSIN    DD    DUMMY\n//*-------------------------------------------------------------------*\n//*        IEBGENER                                                   *\n//*-------------------------------------------------------------------*\n//STEP20   EXEC PGM=IEBGENER\n//SYSPRINT DD SYSOUT=*\n//SYSUT1   DD DSN=HLQ.CBTDOC,DISP=SHR\n//SYSUT2   DD SYSOUT=*\n//SYSIN    DD    DUMMY\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "UNPKZZZ": {"ttr": 6403, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01&\\x1f\\x01\\x01&\\x1f\\x16)\\x00@\\x00@\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-18T00:00:00", "modifydate": "2001-09-18T16:29:00", "lines": 64, "newlines": 64, "modlines": 0, "user": "EGHF3PY"}, "text": "       9000-UNPACK-ZZZ-DATES.\n      *--------------------------------------------------------------*\n      * INCLUDE FILE:  UNPACK-ZZZ-DATES                              *\n      *--------------------------------------------------------------*\n      * THIS PROCEDURE UNPACKS Y2K DATES IN THE ZZZ RECORD.          *\n      *--------------------------------------------------------------*\n      *--------------------------------------------------------------*\n      * THIS PROCEDURE WILL BE PERFORMED EACH TIME THE PROGRAM READS *\n      * A ZZZ RECORD.  IT MOVES EACH DATE IN THE ZZZ RECORD A WORK   *\n      * AREA.  PERFORMS THE Y2K DATE CONVERSION, WHICH RETURNS A     *\n      * STANDARD ACS SIX CHARACTER DATE (YYMMDD). THEN IT OVERLAYS   *\n      * THE Y2K DATE IN THE ZZZ RECORD WITH THE UNPACKED DATE.       *\n      *--------------------------------------------------------------*\n      *--------------------------------------------------------------*\n      * UNPACK SIX CHARACTER DATE: (YYMMDD)                          *\n      *--------------------------------------------------------------*\n      * UNPACK: ZZZ01-DATE1                                            *\n      *--------------------------------------------------------------*\n           IF ZZZ01-DATE1(1:1) = HIGH-VALUES\n               MOVE ZZZ01-DATE1 TO Y2K-PACKED-DATE\n               MOVE Y2K-PACKED-CYMD TO Y2K-UNPACKED-DATE\n               MOVE Y2K-UNPACKED-YMD TO ZZZ01-DATE1\n           END-IF.\n\n      *--------------------------------------------------------------*\n      * UNPACK FOUR CHARACTER DATE: (YYMM)                           *\n      *--------------------------------------------------------------*\n      * UNPACK: ZZZ01-DATE2                                            *\n      *--------------------------------------------------------------*\n           IF ZZZ01-DATE2(1:1) = HIGH-VALUES\n               MOVE ZZZ01-DATE2 TO Y2K-4-DIGIT\n               MOVE Y2K-4DIG-PACKED TO Y2K-4DIG-UNPACKED\n               MOVE Y2K-UNPACKED-YM TO ZZZ01-DATE2\n           END-IF.\n\n      *--------------------------------------------------------------*\n      * UNPACK Y2K YEAR: (YY)                                        *\n      *--------------------------------------------------------------*\n      * UNPACK: ZZZ01-DATE3                                            *\n      *--------------------------------------------------------------*\n           MOVE ZZZ01-DATE3 TO DB-FY-BYTES.\n           IF 1ST-DECADE\n             MOVE '0' TO FY-1STCHAR.\n           IF 2ND-DECADE\n             MOVE '1' TO FY-1STCHAR.\n           IF 3RD-DECADE\n             MOVE '2' TO FY-1STCHAR.\n           IF 4TH-DECADE\n             MOVE '3' TO FY-1STCHAR.\n           MOVE DB-FY-BYTES TO ZZZ01-DATE3.\n\n      *--------------------------------------------------------------*\n      * UNPACK FIVE CHARACTER DATES: (YYDDD)                         *\n      *--------------------------------------------------------------*\n      * UNPACK: ZZZ01-DATE4                                            *\n      *--------------------------------------------------------------*\n           IF ZZZ01-DATE4(1:1) = HIGH-VALUES\n               MOVE ZZZ01-DATE4       TO Y2K-5-DIGIT\n               MOVE Y2K-5DIG-PACKED TO Y2K-5DIG-UNPACKED\n               MOVE Y2K-UNPACKED-YYDDD TO ZZZ01-DATE4\n           END-IF.\n\n       9000-UNPACK-ZZZ-DATES-EXIT.\n           EXIT.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "UPLO": {"ttr": 6405, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01&\\x1f\\x01\\x01&\\x1f\\x15D\\x00\"\\x00\"\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-18T00:00:00", "modifydate": "2001-09-18T15:44:00", "lines": 34, "newlines": 34, "modlines": 0, "user": "EGHF3PY"}, "text": "<<UPLO>>\n:\n: UPLO STARTLINE ENDLINE\n:\nPUSH\nIF (A1 EQ '')\n   RESPONSE 'UPLO START END'\n   RETURN\nENDIF\nIF (A2 EQ '')\n   RESPONSE 'UPLO START END'\n   RETURN\nENDIF\nSET ATTACH NOPAUSE\nLET L15 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\nLET L16 = 'abcdefghijklmnopqrstuvwxyz'\n+ATTACH +A1+,,\n+IF (+A2+ LT SEQ)\n    RETURN\n ENDIF\nREAD AWS * L1\n<<LOOP>>\nLET L4 = SEQ\nLET L2 = XLATE(L1 L15 L16)\n+ +L4+ +L2+\n<<READ>>\nLET L5 = SEQ + 1\n+IF (L5 LE +A2+) THEN\n   READ AWS *+1 L1\n   GOTO <<LOOP>>\nENDIF\n<<END>>\nPOP\nRETURN\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "UPPERCAS": {"ttr": 6407, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01&\\x1f\\x01\\x01&\\x1f\\x15G\\x00\\x02\\x00\\x02\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-18T00:00:00", "modifydate": "2001-09-18T15:47:00", "lines": 2, "newlines": 2, "modlines": 0, "user": "EGHF3PY"}, "text": "<<UPPER>>\nSET MODE BASIC\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "URTLOOK": {"ttr": 6409, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01&\\x1f\\x01\\x01&\\x1f\\x15Q\\x00B\\x00B\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-18T00:00:00", "modifydate": "2001-09-18T15:51:00", "lines": 66, "newlines": 66, "modlines": 0, "user": "EGHF3PY"}, "text": "<<RANDVL>> :RANGE SEARCH RPF FOR DVL.SOURCE.URTMAST\n:L1 RANGE SEARCH STRING\n  PUSH\n  DELETE\n  SET MODE NUMX\n  PANEL ACTIVATE *\n  STARTDEF\n  TAG ! S\n   TAG % UH MEM\n   CURSOR MEM\n!***********************************************************************\n!**                          S E A R C H                              **\n!**              D V L  S A T  P R O D                                **\n!**                        L I B R A R I E S                          **\n!***********************************************************************\n!\n!                  PLEASE SPECIFY SEARCH CRITERIA\n!                                OR\n!                        PRESS CLEAR TO EXIT\n!\n!\n!                 MEMBER ===========> %________!\n!\n!\n!\n!***********************************************************************\n  ENDDEF\n  PANEL SEND\n  SET MODE BASIC\n\n<<READ>>\n  IF AID EQ 'CLEAR'\n     GOTO <<END>>\n  ENDIF\n  LET L1 = TRIM(TRIM(P.MEM) '_')\n  IF L1 EQ ' '\n    GOTO <<RANDVL>>\n    ENDIF\n  +IMPORT DSN=HLQ.DVL.URTMAST(*),RANGE='+L1+'\n  WRITE AWS T '************ DEVELOPMENT ************'\n  SAVE DEVAWS\n  DELETE\n  +IMPORT DSN=HLQ.SAT.URTMAST(*),RANGE='+L1+'\n  WRITE AWS T '************ S.A.T.************'\n  SAVE SATAWS\n  DELETE\n  +IMPORT DSN=HLQ.PRD.URTMAST(*),RANGE='+L1+'\n  WRITE AWS T '************ PROD ************'\n  SAVE PRDAWS\n  DELETE\n  COPY DEVAWS 1 999999 T\n  COPY SATAWS 1 999999 B\n  COPY PRDAWS 1 999999 B\n  DELETE DEVAWS\n  DELETE SATAWS\n  DELETE PRDAWS\n  SET ATTACH NOPAUSE\n  ATTACH\n  NOSEQ\n  POP\n  STOP\n <<END>>\n  WRITE '     LIBRARY SEARCH EXITED   '\n  NOSEQ\n  POP\n  STOP\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VALIDPFX": {"ttr": 6411, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x01&\\x1f\\x01\\x01&?\\x168\\x00\\x1c\\x00\\x1a\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2001-09-18T00:00:00", "modifydate": "2001-09-20T16:38:00", "lines": 28, "newlines": 26, "modlines": 0, "user": "EGHF3PY"}, "text": "<<USERS>>\nDECLARE RKEY FKEY DMT CNT1 CNT2 CNT3 LETTER1 LETTER2 LETTER3 USER\nDECLARE ARRAY1 ARRAY2 ARRAY3\nCREATE AWS VALIDPFX ACTIVE NREC SESSION\nLET ARRAY1 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789$@#% '\nLET ARRAY2 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789$@#% '\nLET ARRAY3 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789$@#% '\nLOOP CNT1 FROM 1 TO 30 BY 1\n    LOOP CNT2 FROM 1 TO 30 BY 1\n        LOOP CNT3 FROM 1 TO 41 BY 1\n+           LET LETTER1 = SUBSTR (ARRAY1 +CNT1+ 1)\n+           LET LETTER2 = SUBSTR (ARRAY2 +CNT2+ 1)\n+           LET LETTER3 = SUBSTR (ARRAY3 +CNT3+ 1)\n+           LET USER    = '+LETTER1++LETTER2++LETTER3+'\n            TRAP ON\n+           LET FKEY = GETFKEY ('+USER+')\n+           LET RKEY = GETKEY ('+USER+')\n+           LET P1 = '+USER+========+FKEY+'\n            LET DMT = PAD(P1 40 '=')\n            TRAP OFF\n            IF TC EQ 0\n+              WRITE AWS B '+DMT++RKEY+'\n            ENDIF\n        ENDLOOP\n    ENDLOOP\nENDLOOP\nU VPREFIX\nDISCARD AWS VALIDPFX\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "X": {"ttr": 6413, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01&\\x1f\\x01\\x01&\\x1f\\x16\\x05\\x00\\x11\\x00\\x11\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-18T00:00:00", "modifydate": "2001-09-18T16:05:00", "lines": 17, "newlines": 17, "modlines": 0, "user": "EGHF3PY"}, "text": "<<X>>\nPUSH\n    IF  A1 EQ ''\n        RESPONSE 'CMD13 INSUFFICIENT NUMBER OF OPERANDS SPECIFIED'\n    ELSE\n        TRAP ON\n            +FETCH +A1+\n        TRAP OFF\n        IF  TC NE 0\n            RESPONSE 'LIB06 ' | A1 | ' MEMBER NOT FOUND'\n        ELSE\n            SET ATTACH NOPAUSE\n            ATTACH\n        ENDIF\n    ENDIF\nPOP\nRETURN\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "XREF": {"ttr": 6415, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01&\\x1f\\x01\\x01&\\x1f\\x16\\x07\\x00\\x15\\x00\\x15\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-18T00:00:00", "modifydate": "2001-09-18T16:07:00", "lines": 21, "newlines": 21, "modlines": 0, "user": "EGHF3PY"}, "text": "<<XREF>>\n+IMP DSN=DVL.SOURCE.LIBMAST(+A1+)\nU T3\nDELETEX /COMM-SFUNCT/\nIF (AWSCOUNT LT 1)\n1\nENDIF\nU T1\nF T3\nDELETEX /PROGRAM/\nIF (AWSCOUNT LT 1)\n1\nENDIF\nU T2\nDEL\nMERGE T1 T2\n::LET L1 = SUBSTR(A1 4 3)\n::IF (AWSCOUNT GT 0)\n::+  U +L1+\n::ENDIF\nRETURN\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "XREFFPF": {"ttr": 6417, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01&\\x1f\\x01\\x01&\\x1f\\x16\\x14\\x00\\x1d\\x00\\x1d\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-18T00:00:00", "modifydate": "2001-09-18T16:14:00", "lines": 29, "newlines": 29, "modlines": 0, "user": "EGHF3PY"}, "text": "<<XREFFPF>>\nXREF 'PROG7301'\nXREF 'PROG7401'\nXREF 'PROG7501'\nXREF 'PROG7601'\nXREF 'PROG7701'\nXREF 'PROG7801'\nXREF 'PROG7901'\nXREF 'PROG8901'\nXREF 'PROG9001'\nXREF 'PROG9301'\nXREF 'PROG9401'\nXREF 'PROG9501'\nXREF 'PROG9601'\nXREF 'PROG9701'\nXREF 'PROGA001'\nXREF 'PROGA101'\nXREF 'PROGA201'\nXREF 'PROGA301'\nXREF 'PROGA401'\nXREF 'PROGA701'\nXREF 'PROGA801'\nXREF 'PROGB001'\nXREF 'PROGB901'\nXREF 'PROGF001'\nXREF 'PROGF201'\nXREF 'PROGF401'\nXREF 'PROGF501'\nXREF 'PROGF801'\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "Y2KCODE": {"ttr": 6419, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01&\\x1f\\x01\\x01&\\x1f\\x16&\\x01x\\x01x\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-18T00:00:00", "modifydate": "2001-09-18T16:26:00", "lines": 376, "newlines": 376, "modlines": 0, "user": "EGHF3PY"}, "text": "<<Y2KCODE>>\n::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\n:   VARIABLE USAGE\n:       L1 - HOLDS 3 CHARACRTER DATABASE TABLE NAME\n:       L2 - HOLDS DATE FIELD NAME\n:       L3 - HOLDS ROSCOE MEMBER NAME TO SAVE OUTPUT UNDER\n:       L4 - HOLDS PANEL FIELD NAME FOR CURSOR POSITIONING\n::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\n  PUSH\n  DO <<PARANAME>>\n<<MAINLOOP>>\n  DO <<PANEL>>\n<<MAINLOP1>>\n::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\n:   CLEAR AWS AND EXIT\n::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\nIF (S.AID EQ 'PF3')\n    DELETE\n    DELETE @UNPK\n    DELETE @PACK\n    GOTO <<END>>\nENDIF\n::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\n:   MAKE PARAGRAPH EXIT, CREATE MEMBER, STARTOVER\n::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\nIF (S.AID EQ 'PF4')\n    DO <<MAKEXIT>>\n    GOTO <<MAINLOOP>>\nENDIF\n::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\n: CHECK IF INVALID KEY PRESSED\n::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\nIF (S.AID NE 'ENTER')\n    GOTO <<MAINLOOP>>\nENDIF\n::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\n: MUST BE THE ENTER KEY, MAKE AN IF STATEMENT\n::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\nLET L4 = 'DATFORM'\nIF (P.DATFORM LT '1') OR (P.DATFORM GT '4')\n+   PANEL RESEND CURSOR P.+L4+\n    GOTO <<MAINLOP1>>\nENDIF\n<<CONT1>>\nLET L4 = 'DATFLD'\nIF (S.AID EQ 'ENTER')\n    DO <<MAKEIF>>\n    LET P.DATFLD = '__________________________________'\n+   PANEL RESEND CURSOR P.+L4+\n    GOTO <<MAINLOP1>>\nENDIF\n<<END>>\nPOP\nRETURN\n:\n:\n::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\n:\n<<MAKEIF>> PROC      : MAKE AN IF STATEMENT AT BOTTOM OF AWS\n    IF (P.DATFORM EQ '1')\n        DO <<YYMMDD>>\n    ENDIF\n    IF (P.DATFORM EQ '2')\n        DO <<YYMM>>\n    ENDIF\n    IF (P.DATFORM EQ '3')\n        DO <<YY>>\n    ENDIF\n    IF (P.DATFORM EQ '4')\n        DO <<YYDDD>>\n    ENDIF\nENDPROC\n:\n:\n::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\n:\n<<MAKEXIT>> PROC     : MAKE A PARAGRAPH EXIT BOTTOM OF AWS\n:                      ONE FOR UNPACK, ONE FOR PACK\n    FETCH @UNPK\n    WRITE AWS B\n'       9000-UNPACK-###-DATES-EXIT.'\n'           EXIT.'\n    ENDWRITE\n    LET L1 = TRIM(P.DBTBL '_')\n+   EDIT /###/+L1+/\n+   LET L3 = 'UNPK+L1+'\n+   UPDATE +L3+\n:\n    FETCH @PACK\n    WRITE AWS B\n'       9000-PACK-###-DATES-EXIT.'\n'           EXIT.'\n    ENDWRITE\n    LET L1 = TRIM(P.DBTBL '_')\n+   EDIT /###/+L1+/\n+   LET L3 = 'PACK+L1+'\n+   UPDATE +L3+\n    DEL @UNPK\n    DEL @PACK\n    DO <<PARANAME>>\nENDPROC\n::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\n:\n<<PANEL>> PROC       : DISPLAY THE PANEL\n    PANEL ACTIVATE *\n    STARTDEF\n    TAG # (S GREEN)\n    TAG & (UM RED) DBTBL DATFORM DATFLD\n    TAG @ (S BLUE)\n    TAG % (S YELLOW)\n#      COBOL CODE GENERATOR FOR PACKING AND UNPACKING YEAR 2000 DATES\n#\n#\n#        DATABASE TABLE NAME:&___#\n#\n#   ENTER DATE FORMAT NUMBER:&_#\n#\n@                             1 - YYMMDD\n@                             2 - YYMM\n@                             3 - YY\n@                             4 - YYDDD\n#\n#            DATE FIELD NAME:&__________________________________#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#\n#   %PF3=EXIT    %PF4=SAVE CODE      %ENTER=GENERATE CODE\n    ENDDEF\n    LET P.DBTBL = '___'\n    LET P.DATFLD = '__________________________________'\n    LET P.DATFORM = '1'\n    PANEL SEND\nENDPROC\n::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\n<<PARANAME>> PROC    : PUT THE FIRST PART IN THE AWS\n:                      ONE FOR UNPACK, ONE FOR PACK\n    DEL\n    WRITE AWS T\n'       9000-UNPACK-###-DATES.'\n'      *--------------------------------------------------------------*'\n'      * INCLUDE FILE:  UNPACK-###-DATES                              *'\n'      *--------------------------------------------------------------*'\n'      * THIS PROCEDURE UNPACKS Y2K DATES IN THE ### RECORD.          *'\n'      *--------------------------------------------------------------*'\n'      *--------------------------------------------------------------*'\n'      * THIS PROCEDURE WILL BE PERFORMED EACH TIME THE PROGRAM READS *'\n'      * A ### RECORD.  IT MOVES EACH DATE IN THE ### RECORD A WORK   *'\n'      * AREA.  PERFORMS THE Y2K DATE CONVERSION, WHICH RETURNS A     *'\n'      * STANDARD ACS SIX CHARACTER DATE (YYMMDD). THEN IT OVERLAYS   *'\n'      * THE Y2K DATE IN THE ### RECORD WITH THE UNPACKED DATE.       *'\n'      *--------------------------------------------------------------*'\n    ENDWRITE\n    UPDATE @UNPK\n:\n    DEL\n    WRITE AWS T\n'       9000-PACK-###-DATES.'\n'      *--------------------------------------------------------------*'\n'      * INCLUDE FILE:  PACK-###-DATES                                *'\n'      *--------------------------------------------------------------*'\n'      * THIS PROCEDURE PACKS Y2K DATES IN THE ### RECORD.            *'\n'      *--------------------------------------------------------------*'\n'      *--------------------------------------------------------------*'\n'      * THIS PROCEDURE WILL BE PERFORMED EACH TIME THE PROGRAM WRITES*'\n'      * A ### RECORD.  IT MOVES EACH DATE IN THE ### RECORD TO A     *'\n'      * WORK AREA.  PERFORMS THE Y2K DATE CONVERSION, WHICH RETURNS  *'\n'      * RETURNS A STANDARD ACS SIX CHARACTER PACKED DATE.  THEN IT   *'\n'      * OVERLAYS THE DATE IN THE ### RECORD WITH THE PACKED DATE.    *'\n'      *--------------------------------------------------------------*'\n    ENDWRITE\n    UPDATE @PACK\n    DEL\nENDPROC\n:\n:\n::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\n:\n<<YYMMDD>> PROC      : MAKE AN IF STATEMENT AT BOTTOM OF AWS\n    FETCH @UNPK\n    WRITE AWS B\n'      *--------------------------------------------------------------*'\n'      * UNPACK SIX CHARACTER DATE: (YYMMDD)                          *'\n'      *--------------------------------------------------------------*'\n'      * UNPACK: ###01-@@@                                            *'\n'      *--------------------------------------------------------------*'\n'           IF ###01-@@@(1:1) = HIGH-VALUES'\n'               MOVE ###01-@@@ TO Y2K-PACKED-DATE'\n'               MOVE Y2K-PACKED-CYMD TO Y2K-UNPACKED-DATE'\n'               MOVE Y2K-UNPACKED-YMD TO ###01-@@@'\n'           END-IF.'\n' '\n    ENDWRITE\n    LET L1 = TRIM(P.DBTBL '_')\n    LET L2 = TRIM(P.DATFLD '_')\n+   EDIT /###/+L1+/\n+   EDIT /@@@/+L2+/\n    UPDATE @UNPK\n:\n    FETCH @PACK\n    WRITE AWS B\n'      *--------------------------------------------------------------*'\n'      * PACK SIX CHARACTER DATE: (YYMMDD)                            *'\n'      *--------------------------------------------------------------*'\n'      * PACK: ###01-@@@                                              *'\n'      *--------------------------------------------------------------*'\n'           MOVE ###01-@@@ TO Y2K-UNPACKED-YMD.'\n'           IF Y2K-YEAR'\n'              MOVE HIGH-VALUES       TO Y2K-CHECK-BYTE'\n'              MOVE THE-21ST-CENTURY  TO Y2K-UNPACKED-CENTURY'\n'              MOVE Y2K-UNPACKED-DATE TO Y2K-PACKED-CYMD'\n'              MOVE Y2K-PACKED-DATE   TO ###01-@@@'\n'           END-IF.'\n' '\n    ENDWRITE\n    LET L1 = TRIM(P.DBTBL '_')\n    LET L2 = TRIM(P.DATFLD '_')\n+   EDIT /###/+L1+/\n+   EDIT /@@@/+L2+/\n    UPDATE @PACK\nENDPROC\n:\n:\n::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\n:\n<<YYMM>> PROC      : MAKE AN IF STATEMENT AT BOTTOM OF AWS\n    FETCH @UNPK\n    WRITE AWS B\n'      *--------------------------------------------------------------*'\n'      * UNPACK FOUR CHARACTER DATE: (YYMM)                           *'\n'      *--------------------------------------------------------------*'\n'      * UNPACK: ###01-@@@                                            *'\n'      *--------------------------------------------------------------*'\n'           IF ###01-@@@(1:1) = HIGH-VALUES'\n'               MOVE ###01-@@@ TO Y2K-4-DIGIT'\n'               MOVE Y2K-4DIG-PACKED TO Y2K-4DIG-UNPACKED'\n'               MOVE Y2K-UNPACKED-YM TO ###01-@@@'\n'           END-IF.'\n' '\n    ENDWRITE\n    LET L1 = TRIM(P.DBTBL '_')\n    LET L2 = TRIM(P.DATFLD '_')\n+   EDIT /###/+L1+/\n+   EDIT /@@@/+L2+/\n    UPDATE @UNPK\n:\n    FETCH @PACK\n    WRITE AWS B\n'      *--------------------------------------------------------------*'\n'      * PACK FOUR CHARACTER DATES (YYMM)                             *'\n'      *--------------------------------------------------------------*'\n'      * PACK: ###01-@@@                                              *'\n'      *--------------------------------------------------------------*'\n'           MOVE ###01-@@@ TO Y2K-UNPACKED-YM.'\n'           IF Y2K-4DIG-YEAR'\n'               MOVE HIGH-VALUES       TO Y2K-4DIG-CHECK'\n'               SET Y2K-4DIG-CENTURY   TO TRUE'\n'               MOVE Y2K-4DIG-UNPACKED TO Y2K-4DIG-PACKED'\n'               MOVE Y2K-4-DIGIT       TO ###01-@@@'\n'           END-IF.'\n' '\n    ENDWRITE\n    LET L1 = TRIM(P.DBTBL '_')\n    LET L2 = TRIM(P.DATFLD '_')\n+   EDIT /###/+L1+/\n+   EDIT /@@@/+L2+/\n    UPDATE @PACK\nENDPROC\n:\n:\n::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\n:\n<<YY>> PROC      : MAKE AN IF STATEMENT AT BOTTOM OF AWS\n    FETCH @UNPK\n    WRITE AWS B\n'      *--------------------------------------------------------------*'\n'      * UNPACK Y2K YEAR: (YY)                                        *'\n'      *--------------------------------------------------------------*'\n'      * UNPACK: ###01-@@@                                            *'\n'      *--------------------------------------------------------------*'\n'           MOVE ###01-@@@ TO DB-FY-BYTES.'\n'           IF 1ST-DECADE'\n'             MOVE ''0'' TO FY-1STCHAR.'\n'           IF 2ND-DECADE'\n'             MOVE ''1'' TO FY-1STCHAR.'\n'           IF 3RD-DECADE'\n'             MOVE ''2'' TO FY-1STCHAR.'\n'           IF 4TH-DECADE'\n'             MOVE ''3'' TO FY-1STCHAR.'\n'           MOVE DB-FY-BYTES TO ###01-@@@.'\n' '\n    ENDWRITE\n    LET L1 = TRIM(P.DBTBL '_')\n    LET L2 = TRIM(P.DATFLD '_')\n+   EDIT /###/+L1+/\n+   EDIT /@@@/+L2+/\n    UPDATE @UNPK\n:\n    FETCH @PACK\n    WRITE AWS B\n'      *--------------------------------------------------------------*'\n'      * PACK Y2K YEAR: (YY)                                          *'\n'      *--------------------------------------------------------------*'\n'      * PACK: ###01-@@@                                              *'\n'      *--------------------------------------------------------------*'\n'           MOVE ###01-@@@ TO DB-FY-BYTES.'\n'           IF FY-1STCHAR = ''0'''\n'             SET 1ST-DECADE TO TRUE.'\n'           IF FY-1STCHAR = ''1'''\n'             SET 2ND-DECADE TO TRUE.'\n'           IF FY-1STCHAR = ''2'''\n'             SET 3RD-DECADE TO TRUE.'\n'           IF FY-1STCHAR = ''3'''\n'             SET 4TH-DECADE TO TRUE.'\n'           MOVE DB-FY-BYTES TO ###01-@@@.'\n' '\n    ENDWRITE\n    LET L1 = TRIM(P.DBTBL '_')\n    LET L2 = TRIM(P.DATFLD '_')\n+   EDIT /###/+L1+/\n+   EDIT /@@@/+L2+/\n    UPDATE @PACK\nENDPROC\n:\n:\n::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\n:\n<<YYDDD>> PROC      : MAKE AN IF STATEMENT AT BOTTOM OF AWS\n    FETCH @UNPK\n    WRITE AWS B\n'      *--------------------------------------------------------------*'\n'      * UNPACK FIVE CHARACTER DATES: (YYDDD)                         *'\n'      *--------------------------------------------------------------*'\n'      * UNPACK: ###01-@@@                                            *'\n'      *--------------------------------------------------------------*'\n'           IF ###01-@@@(1:1) = HIGH-VALUES'\n'               MOVE ###01-@@@       TO Y2K-5-DIGIT'\n'               MOVE Y2K-5DIG-PACKED TO Y2K-5DIG-UNPACKED'\n'               MOVE Y2K-UNPACKED-YYDDD TO ###01-@@@'\n'           END-IF.'\n' '\n    ENDWRITE\n    LET L1 = TRIM(P.DBTBL '_')\n    LET L2 = TRIM(P.DATFLD '_')\n+   EDIT /###/+L1+/\n+   EDIT /@@@/+L2+/\n    UPDATE @UNPK\n:\n    FETCH @PACK\n    WRITE AWS B\n'      *--------------------------------------------------------------*'\n'      * PACK FIVE CHARACTER DATES: (YYDDD)                           *'\n'      *--------------------------------------------------------------*'\n'      * PACK: ###01-@@@                                              *'\n'      *--------------------------------------------------------------*'\n'           MOVE ###01-@@@ TO Y2K-UNPACKED-YYDDD.'\n'           IF Y2K-5DIG-YEAR'\n'              MOVE HIGH-VALUES       TO Y2K-5DIG-CHECK'\n'              SET Y2K-5DIG-CENTURY   TO TRUE'\n'              MOVE Y2K-5DIG-UNPACKED TO Y2K-5DIG-PACKED'\n'              MOVE Y2K-5-DIGIT       TO ###01-@@@'\n'           END-IF.'\n' '\n    ENDWRITE\n    LET L1 = TRIM(P.DBTBL '_')\n    LET L2 = TRIM(P.DATFLD '_')\n+   EDIT /###/+L1+/\n+   EDIT /@@@/+L2+/\n    UPDATE @PACK\nENDPROC\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "Y2KFLDS": {"ttr": 6661, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01&\\x1f\\x01\\x01&\\x1f\\x16&\\x00\\xba\\x00\\xba\\x00\\x00\\xc5\\xc7\\xc8\\xc6\\xf3\\xd7\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-09-18T00:00:00", "modifydate": "2001-09-18T16:26:00", "lines": 186, "newlines": 186, "modlines": 0, "user": "EGHF3PY"}, "text": "       01 Y2K-PROCESSING-FIELDS.\n      ****************************************************************\n      * WORKING STORAGE FIELDS FOR YEAR 2000 PROCESSING              *\n      ****************************************************************\n\n          05 Y2KSUB                    PIC S9(04) COMP SYNC.\n\n          05 Y2K-DATE-WORK-AREA.\n             10 THE-21ST-CENTURY                  PIC 9(2) VALUE 20.\n             10 THE-20TH-CENTURY                  PIC 9(2) VALUE 19.\n      *\n      ****************************************************************\n      *  FIELDS FOR STORING AND MANIPULATING THE 6-DIGIT YEAR FIELD. *\n      *  YEAR IS STORED AS SIX DIGITS ON THE DATABASE. FOR ALL 20TH  *\n      *  CENTURY DATES THEY WILL BE STORED AS SIX DIGITS E.G., 991201*\n      *  BEGINNING WITH 1 JAN 2000, ALL DATES WILL BE STORED IN A    *\n      *  COMP-3 FIELD COMPRISING THE LAST 5 BYTES OF THE STORED      *\n      *  DATABASE FIELD. THE FIRST BYTE WILL CONTAIN HIGH VALUES FOR *\n      *  A Y2K DATE. A DATE OF 1 DEC 2000 WILL BE STORED FF020001201F*\n      ****************************************************************\n      *\n             10 DB-DATE-BYTES                     PIC X(6).\n             10 Y2K-PACKED-DATE REDEFINES DB-DATE-BYTES.\n                15 Y2K-CHECK-BYTE                 PIC X.\n                15 Y2K-PACKED-CYMD                PIC 9(8) COMP-3.\n      *\n             10 Y2K-UNPACKED-DATE                 PIC 9(8).\n             10 FILLER REDEFINES Y2K-UNPACKED-DATE.\n                15 Y2K-UNPACKED-CENTURY           PIC 9(2).\n                   88 Y2K-CENTURY                VALUE 20.\n                   88 NOT-Y2K-CENTURY            VALUE 19.\n                15 Y2K-UNPACKED-YMD.\n                   20 Y2K-UNPACKED-YEAR           PIC 9(2).\n                      88 Y2K-YEAR                VALUE 00 THRU 39.\n                      88 NOT-Y2K-YEAR            VALUE 40 THRU 99.\n                   20 Y2K-UNPACKED-MONTH          PIC 9(2).\n                      88 VALID-MONTH             VALUE 01 THRU 12.\n                   20 Y2K-UNPACKED-DAY            PIC 9(2).\n                      88 VALID-DAY               VALUE 01 THRU 31.\n      *\n      ****************************************************************\n      *  FIELDS FOR STORING AND MANIPULATING THE 4-DIGIT YEAR FIELD. *\n      *  YEAR IS STORED AS FOUR DIGITS ON THE DATABASE. FOR ALL 20TH *\n      *  CENTURY DATES THEY WILL BE STORED AS 4 DIGITS E.G., 9912    *\n      *  BEGINNING WITH 1 JAN 2000, ALL DATES WILL BE STORED IN A    *\n      *  COMP-3 FIELD COMPRISING THE LAST 3 BYTES OF THE STORED      *\n      *  DATABASE FIELD. THE FIRST BYTE WILL CONTAIN HIGH VALUES FOR *\n      *  A Y2K DATE. A DATE OF JAN 2000 WILL BE STORED FF20012F      *\n      ****************************************************************\n      *\n             10 DB-DATE                           PIC X(4).\n             10 Y2K-4-DIGIT REDEFINES DB-DATE.\n                15 Y2K-4DIG-CHECK                 PIC X.\n                15 Y2K-4DIG-PACKED                PIC 9(5) COMP-3.\n      *\n             10 Y2K-4DIG-UNPACKED                 PIC 9(5).\n             10 FILLER REDEFINES Y2K-4DIG-UNPACKED.\n                15 Y2K-4DIG-CNTURY               PIC 9.\n                   88 Y2K-4DIG-CENTURY           VALUE 2.\n                   88 NOT-Y2K-4DIG-CENTURY       VALUE 1.\n                15 Y2K-UNPACKED-YM.\n                   20 Y2K-UNPACKED-4DIG-YEAR     PIC 9(2).\n                      88 Y2K-4DIG-YEAR           VALUE 00 THRU 39.\n                      88 NOT-Y2K-4DIG-YEAR       VALUE 40 THRU 99.\n                   20 Y2K-UNPACKED-4DIG-MONTH    PIC 9(2).\n                      88 VALID-4DIG-MONTH        VALUE 01 THRU 12.\n      *\n      ****************************************************************\n      *  FIELDS FOR STORING AND MANIPULATING THE 5-DIGIT YEAR FIELD. *\n      *  YEAR IS STORED AS FIVE DIGITS ON THE DATABASE. FOR ALL 20TH *\n      *  CENTURY DATES THEY WILL BE STORED AS 5 DIGITS E.G., 99123   *\n      *  BEGINNING WITH 1 JAN 2000, ALL DATES WILL BE STORED IN A    *\n      *  COMP-3 FIELD COMPRISING THE LAST 4 BYTES OF THE STORED      *\n      *  DATABASE FIELD. THE FIRST BYTE WILL CONTAIN HIGH VALUES FOR *\n      *  A Y2K DATE. A DATE OF JAN 2000 WILL BE STORED FF2000123F    *\n      ****************************************************************\n      *\n             10 DB-DATE5                          PIC X(5).\n             10 Y2K-5-DIGIT REDEFINES DB-DATE5.\n                15 Y2K-5DIG-CHECK                 PIC X.\n                15 Y2K-5DIG-PACKED                PIC 9(7) COMP-3.\n      *\n             10 Y2K-5DIG-UNPACKED                 PIC 9(7).\n             10 FILLER REDEFINES Y2K-5DIG-UNPACKED.\n                15 Y2K-5DIG-CNTURY               PIC 9(2).\n                   88 Y2K-5DIG-CENTURY           VALUE 20.\n                   88 NOT-Y2K-5DIG-CENTURY       VALUE 19.\n                15 Y2K-UNPACKED-YYDDD.\n                   20 Y2K-UNPACKED-5DIG-YEAR     PIC 9(2).\n                      88 Y2K-5DIG-YEAR           VALUE 00 THRU 39.\n                      88 NOT-Y2K-5DIG-YEAR       VALUE 40 THRU 99.\n                   20 Y2K-UNPACKED-5DIG-DDD      PIC 9(3).\n                      88 VALID-5DIG-DDD          VALUE 001 THRU 366.\n      *\n      ****************************************************************\n      *  FIELDS FOR STORING AND MANIPULATING THE FISCAL YEAR FIELD.  *\n      *  FISCAL YEAR IS STORED AS TWO DIGITS ON THE DATABASE. FOR THE*\n      *  20TH CENTURY IT WILL BE STORED AS TWO DIGITS E.G. 97,98,99. *\n      *  BEGINNING WITH FY 2000, IT WILL BE STORED WITH A HEX VALUE  *\n      *  IN THE 1ST DIGIT REPRESENTING THE DECADE,                   *\n      *  I.E. 'FA' = 2000-2009, 'FB' = '2010-2019', 'FC' ='2020-2029,*\n      *  'FD' = '2030-2039'.                                         *\n      ****************************************************************\n      *\n             10 DB-FY-BYTES.\n                15 FY-1STCHAR                     PIC X.\n                   88 20TH-CENTURY-FY     VALUE '4' THRU '9'.\n                   88 Y2K-FY              VALUE X'FA' THRU X'FD'.\n                   88 1ST-DECADE          VALUE X'FA'.\n                   88 2ND-DECADE          VALUE X'FB'.\n                   88 3RD-DECADE          VALUE X'FC'.\n                   88 4TH-DECADE          VALUE X'FD'.\n                15 FY-2NDCHAR                     PIC X.\n                   88 VALID-CHAR          VALUE '0' THRU '9'.\n      *\n      ****************************************************************\n      * USE THESE FIELDS TO COMPARE TWO DATES FOR GREATER THAN, LESS *\n      * THAN OR EQUAL TO CONDITIONS. MOVE SIX, FOUR OR TWO DIGIT DATE*\n      * INTO THESE FIELDS, DETERMINE THE CENTURY, AND COMPARE.       *\n      ****************************************************************\n      *\n       01  COMPARE-DATES.\n           05 COMPARE1.\n              10 COMPARE-CCYY1           PIC 9(4).\n              10 FILLER REDEFINES COMPARE-CCYY1.\n                 15 COMPARE-CC1          PIC 9(2).\n                    88 20TH-CENTURY-CC1      VALUE 19.\n                    88 21ST-CENTURY-CC1      VALUE 20.\n                 15 COMPARE-YY1          PIC 9(2).\n                    88 20TH-CENTURY-YY1      VALUE 40 THRU 99.\n                    88 21ST-CENTURY-YY1      VALUE 00 THRU 39.\n              10 COMPARE-MMDD1.\n                 15 COMPARE-MM1          PIC 9(2).\n                 15 COMPARE-DD1          PIC 9(2).\n           05 FILLER REDEFINES COMPARE1.\n              10 FILLER                  PIC X(2).\n              10 COMPARE-DATE1           PIC X(6).\n      *\n           05 COMPARE2.\n              10 COMPARE-CCYY2           PIC 9(4).\n              10 FILLER REDEFINES COMPARE-CCYY2.\n                 15 COMPARE-CC2          PIC 9(2).\n                    88 20TH-CENTURY-CC2      VALUE 19.\n                    88 21ST-CENTURY-CC2      VALUE 20.\n                 15 COMPARE-YY2          PIC 9(2).\n                    88 20TH-CENTURY-YY2      VALUE 40 THRU 99.\n                    88 21ST-CENTURY-YY2      VALUE 00 THRU 39.\n              10 COMPARE-MMDD2.\n                 15 COMPARE-MM2          PIC 9(2).\n                 15 COMPARE-DD2          PIC 9(2).\n           05 FILLER REDEFINES COMPARE2.\n              10 FILLER                  PIC X(2).\n              10 COMPARE-DATE2           PIC X(6).\n      *\n           05 COMPARE3.\n              10 COMPARE-CCYY3           PIC 9(4).\n              10 FILLER REDEFINES COMPARE-CCYY3.\n                 15 COMPARE-CC3          PIC 9(2).\n                    88 20TH-CENTURY-CC3      VALUE 19.\n                    88 21ST-CENTURY-CC3      VALUE 20.\n                 15 COMPARE-YY3          PIC 9(2).\n                    88 20TH-CENTURY-YY3      VALUE 40 THRU 99.\n                    88 21ST-CENTURY-YY3      VALUE 00 THRU 39.\n              10 COMPARE-MMDD3.\n                 15 COMPARE-MM3          PIC 9(2).\n                 15 COMPARE-DD3          PIC 9(2).\n           05 FILLER REDEFINES COMPARE3.\n              10 FILLER                  PIC X(2).\n              10 COMPARE-DATE3           PIC X(6).\n      *\n           05 COMPARE4.\n              10 COMPARE-CCYY4           PIC 9(4).\n              10 FILLER REDEFINES COMPARE-CCYY4.\n                 15 COMPARE-CC4          PIC 9(2).\n                    88 20TH-CENTURY-CC4      VALUE 19.\n                    88 21ST-CENTURY-CC4      VALUE 20.\n                 15 COMPARE-YY4          PIC 9(2).\n                    88 20TH-CENTURY-YY4      VALUE 40 THRU 99.\n                    88 21ST-CENTURY-YY4      VALUE 00 THRU 39.\n              10 COMPARE-MMDD4.\n                 15 COMPARE-MM4          PIC 9(2).\n                 15 COMPARE-DD4          PIC 9(2).\n           05 FILLER REDEFINES COMPARE4.\n              10 FILLER                  PIC X(2).\n              10 COMPARE-DATE4           PIC X(6).\n      *\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT532/FILE532.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT532", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}