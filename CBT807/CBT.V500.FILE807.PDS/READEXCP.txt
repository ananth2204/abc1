         TITLE 'SUPER FAST READ'
*****   CODE FOR DIFFERENT RECFM F,V,U (VBS??)
*****   DECIDE WHAT KIND OF DEVICE DASD, TAPE, UNIT RECORD
*  REGS  R0=PASSES RELATIVE TRACK ADDRESS TO CONVERT RTN IN FORM TTRN
*           & PASSES THE PARAMETER XXKR TO SECTOR CALC RTN
*        R1=UPON ENTRY CONTAINS DCB ADDRESS OF FILE TO BE READ
*        R1=PASSES ADDRESS OF DEB TO CONVERT RTN (ALSO WORK REG)
*        R2=PASS ADDRESS OF IOB AREA (ECB+36) TO GET ABSOLUTE TRK ADDR
*           & SECTOR PARM (UCB TYPE & ADDR OF SECTOR VALUE)
*        R3=BASE REGISTER
*        R4=DCB ADDR
*        R5=..........
*        R6=..........
*        R7=..........
*        R8=.........
*        R9=RELATIVE TRACK COUNTER (RESET TO 0 AT EOV)
*       R10=REMAINING NUMBER OF BYTES IN BLOCK INDICATOR
*        R11=BUFFER POINTER IN BUFAREA (BUFFER IS SEARCHED BACKWARD)
*        R12=BLOCK COUNTER ON TRACK (SET FROM TRKCALC MACRO)
*        R13=UNUSED (EXCEPT BY ABS ADDR CNVRT RTN)
*        R14=RETURN FROM CONVERT RTN, R15=ADDR OF CONVERT RTN & RC
         PRINT NOGEN
READEXCP START 0
         USING *,R15
         STM   R14,R12,12(R13)      SAVE CALLERS REGS
         ST    R13,SAVEAREA+4
         CNOP  0,4
         BAL   R3,JUMPSAVE
SAVEAREA DS    18F
JUMPSAVE ST    R3,8(R13)
         LR    R13,R3       LOAD SAVEAREA ADDR INTO R13
         USING SAVEAREA,R3  ESTABLISH R3 AS BASE REGS
         DROP  R15
         SPACE 1
         LM    R10,R11,SAVEINFO    RESTORE BUFFER PTR AND LENGTH
SETUP    NOP   PTNXTREC        SET TO BR -TO GET NEXT RECORD
         MVI   SETUP+1,X'F0'   SET TO BRANCH AFTER FIRST TIME
         LR    R4,R1        SAVE DCB ADDR PASSED FROM CALLING PGM
         USING IHADCB,R4
         LH    R0,DCBBLKSI LOAD BLKSIZE INTO R0 FOR STORAGE FOR BUFFR
         STH   R0,BLKSIZE  MOVE BLKSIZE INTO BLKSIZE OF XXKR
         TM    DCBRECFM,X'80'    IS RECFM=F
         BNO   RC4               NO
         L     R1,16   GET ADDR OF CVT (COMMUN VECTOR TABL) AT LOC 16
         L     R1,28(R1)  GET ADDR OF CVTPCNVT AT DISPLAC 28
         ST    R1,CNVRTRTN  TO CONVERT RELATIVE ADDRESSES TO ABSOLUTE
         L     R1,44(R4)      GET DEB ADDR AT OFFSET 44 OF DCB
         L     R1,32(R1)  GET UCB ADDR OF DATA SET AT OFFSET 32 IN DEB
         CLI   18(R1),X'20'   IS IT A DASD DEVICE
         BNE   RC4                NO - RETURN
         MVC   UCBTYPE(1),19(R1)  GET UCB DEVICE TYPE FOR SECTOR CNVRT
         TM    17(R1),X'10'  IS RPS VALID FOR DEVICE-BIT 3 AT OFFSET 17
         BNO   SKPRPS  NO -DONT TAKE DEFAULT XDAP WITH SECTOR OPTION
         L     R1,16   GET ADDR OF CVT (COMMUN VECTOR TABL) AT LOC 16
         L     R15,232(R1) GET ADDR OF CVT0SCR1 AT DISPL 232
         L     R2,SECTPARM LOAD UCB TYPE AND ADDR OF SECTOR VALUE RETRN
         L     R0,XXKR  LOAD BLKSIZE AND RECORD NUMBER IN FORM XXKR
         BALR  R14,R15    EXECUTE SECTOR CONVERT RTN
         B     TRKCALC
         SPACE 1
SKPRPS   MVI   ECB+44,X'03' CHNG SET SECTOR CCW TO NOP CONTROL CCW
         OI    ECB+48,X'20' SET SLI FLAG FOR NOP OPERATION
TRKCALC  TRKCALC FUNCTN=TRKCAP,TYPE=UCBTYPE,R=1,K=0,DD=BLKSIZE,        X
               REGSAVE=YES
*        COMPUTE THE MAXIMUM NUMBER OF RECORDS (BLOCKS) ON A TRACK
         LTR   R15,R15   SUCESSFUL COMPLETION
         BNZ   BLKERR
         ST    R0,NUMREC  R0 IS RETURNED WITH MAX NUMBER OF RECS
         ST    R0,BLKPRCYL IF DOING TRK READ - #BLKS/TRK
         RDJFCB ((R4))      R4=DCB ADDR
         CLI   JFCBSPTN,X'00'  WAS DATASET ALLOCATED AS SPLIT CYL
         BNE   TRKREAD               YES - BYPASS CYL READ
         CLC   JFCBSBNM(3),=X'000000'  IS THIS A SUBALLOCATED DS
         BNE   TRKREAD      YES- BYPASS CYL READ
         TM    JFCBCTRI,JFCBCYL   WAS DS ALLOCATED IN CYL
         BNO   TRKREAD      NO - BYPASS CYL READ
         DEVTYPE DEVDDNAM,DEVAREA,DEVTAB  GET NUMB OF TRKS/CYL & DEVTYP
         L     R1,NUMREC    PUT #BLKS/TRKS IN R1
         MH    R1,TRKPRCYL  MULTIPLY TO GET #BLKS/CYL
         ST    R1,BLKPRCYL
TRKREAD  CLOSE ((R4))       CLOSE FILE AS MACRF=G
         OPEN  (SYSUT1)     OPEN FILE AS  MACRF=E
         L     R1,BLKPRCYL  PUT #BLKS/CYL(TRK) IN R1
         MH    R1,BLKSIZE   MULTIPLY TO GET #BYTES/CYL(TRK)
         LR    R0,R1
         ST    R0,CYLSIZE
         ST    R0,FREBUFSZ  SAVE FOR FREEMAIN
         GETMAIN R,LV=(0)   GET BUFFER FOR FULL CYLINDER READ
         ST    R1,BUFADDR   PUT ADDR OF OBTAINED BUFFER IN BUFADDR
         L     R1,BLKPRCYL  GET SPACE FOR DISK CCW
         LA    R1,3(R1)     BUT NEED AN ADDITIONAL 3 CCW'S
         SLA   R1,3         MULTIPLY BY 8
         LR    R0,R1
         ST    R0,FRECCWSZ
         GETMAIN R,LV=(0)
         ST    R1,ECB+20     MOVE ADDR OF 1ST CCW INTO DISK IOB
         MVC   0(24,R1),ECB+44  MOVE 1ST 3 XDAP CCW'S INTO DISK CCWAREA
         LA    R2,8(R1)  LOAD ADDR OF 2ND CCW IN R2
         STCM  R2,7,17(R1)  AND STORE IN THE THIRD CCW WHICH IS A TIC
         LA    R1,24(R1)    POINT 3 CCW'S BEYOND IN DISK CCW AREA
*        SET UP LOOP TO FILL CCW'S
         ST    R1,DSKCCWAD  STORE NEW DISK CCW ADDRESS
         LR    R7,R1        PUT DISK CCW ADDR IN R7
         L     R2,BUFADDR
         L     R5,BLKPRCYL
         LH    R6,BLKSIZE
LOOP     ST    R2,0(R7)     PUT BUFFER ADDR IN CCW FOR DISK
         MVI   0(R7),X'8E'  PUT IN OPCODE FOR DISK READ-MULTI-TRACK
         MVI   4(R7),X'40'  SET COMMAND CHAIN FLAG FOR DISK (BIT 33)
         STH   R6,6(R7)     SET LENGTH OF BLOCK FOR DISK
         LA    R2,0(R6,R2)  SET BUFFER ADDR TO NEXT BLOCK
         LA    R7,8(R7)     POINT TO NEXT DISK CCW
         BCT   R5,LOOP      LOOP UNTIL EVERY CCW FOR ALL BLOCKS
*        IN THE CYL ARE SET
         S     R7,=F'8'  POINT BACK TO LAST CCW
         MVI   4(R7),X'00'  TURN OFF CHAIN COMMAND FOR DISK
*        SET REGISTERS FOR THE REST OF THE PROGRAM
         LA    R9,0    TRACK COUNTER
         LH    R1,JFCLRECL  GET MAX LRECL FROM JFCB
         LTR   R1,R1       IS LRECL=0 (RECFM=U)
         BNZ   SAVLRECL     NO
         LH    R1,BLKSIZE  YES - USE BLKSIZE AS LRECL
SAVLRECL ST    R1,RECLEN      SAVE MAX LRECL IN RECLEN
*        TM    JFCRECFM,X'40'   IS RECFM=V
*        BNO   RD1                 NO
*        MVI   RECFMV1+1,SETNOP    YES
*        MVI   RECFMV2+1,SETNOP
RD1      L     R1,SYSUT1+44  PLACE DEB ADDRESS IN R1
         LA    R2,ECB+36 HAVE ABS ADDR (MBBCCHHR) PUT IN IOB OF XDAP
         L     R0,TTRN    LOAD R0 WITH TTRN
         STM   R9,R13,SAVEREGS   SAVE R9 THRU R13 (USED IN CONVERT RTN)
         L     R15,CNVRTRTN      LOAD ADDR OF CONVERT RTN INTO R15
         BALR  R14,R15    BRANCH TO CONVERT RTN WITH RETURN ADDR IN R14
         LM    R9,R13,SAVEREGS RESTOR R9 THRU R13
         LTR   R15,R15   IS ABSOLUTE ADDR OUTSIDE THE DS EXTENTS
         BNZ   EOVRTN    YES - DO THE END-OF-VOLUME ROUTINE
*
         XDAP  ECB,,,,,,,,MF=E  EXECUTE CHANNEL PGM SET UP BY LIST XDAP
*        ALL PARAMETERS MUST BE SUPPLIED INTO LIST PRIOR TO EXECUTE
         WAIT  ECB=ECB
         CLI   ECB,X'7F'   WERE THERE ANY ERROR ON THE EXCP
         BE    SETBUFPT  NO- CONTINUE PROC
         CLI   ECB,X'42'  WAS EOE CONDITION ENCOUNTERED
         BNE   BLKERR    NO - ERROR
         L     R1,ECB+12 YES-GET CURRENT CCW ADDR FROM DISK CSW(IOB+8)
         S     R1,DSKCCWAD  GET LENGTH OF CCWS ALREADY EXECUTED
         SRA   R1,3   DIVIDE BY 8 TO GET NUMBER OF CCWS
         ST    R1,BLKPRCYL   ADJUST BLKPRCYL FOR LAST ADD TO #BLKS
         MH    R1,BLKSIZE    GET NEW LENGTH OF BUFFER
         SH    R1,ECB+18 <=SUBTRACT RESIDUAL LENGTH IN CSW(IOB ADDR+14)
         ST    R1,CYLSIZE    ADJUST CYLSIZE FOR LAST SEARCH THRU BUFFER
*
SETBUFPT L     R10,CYLSIZE    LOAD LENGTH OF BUFFER
         L     R11,BUFADDR    LOAD BUFFER ADDR INTO R11
         SPACE 1
PTNXTREC S     R10,RECLEN
         BM    NXTREAD     R10 IS NEGATIVE, THE BUFFR HAS BEEN EXHAUSTD
         LR    R1,R11           PUT RECORD ADDR IN R1 FOR CALLING PGM
         A     R11,RECLEN       SET PTR UP TO NEXT RECORD
         STM   R10,R11,SAVEINFO    RESTORE BUFFER PTR AND LENGTH
         B     QUIT          RETURN TO PROCESS REC
         SPACE 2
NXTREAD  AH    R9,TRKPRCYL  ADD 1 TO RELATIVE TRACK NUMBER
         STH   R9,TT        STORE RELATIVE TRACK NUMBER IN TT
         B     RD1          RETURN TO RD1
RC4      MVI   SETRC+3,X'04'    SET RC=4  DO NOT RETURN
         B     QUIT
RC8      MVI   SETRC+3,X'08'    SET RC=8  EODAD
         CLOSE (SYSUT1)
         L     R0,FREBUFSZ
         FREEMAIN R,LV=(0),A=BUFADDR  FREE BUFFERS
         L     R0,FRECCWSZ
         FREEMAIN R,LV=(0),A=ECB+20    FREE CCW CHAIN
QUIT     L     R13,SAVEAREA+4
         LM    R14,R0,12(R13)   RESTORE R14-R0
         LM    R2,R12,28(R13)   RESTORE R2-R12  DO NOT RESTORE R1
SETRC    LA    R15,0            0=SUCCESSFUL RETURN CODE
         BR    R14
         SPACE 1
BLKERR   ABEND 99,DUMP,STEP GET DUMP TO SEE WHATS WRONG & RTN TO SYSTEM
         SPACE 5
EOVRTN   EOV   SYSUT1    DO VOLUME SWITCHING OR GO TO EODAD
         LA    R9,0      RESET RELATIVE TRACK COUNTER
         STH   R9,TT
         B     RD1
         SPACE 5
EXLSTRTN DS    0F      EXLST ROUTINE ADDRESS
         DC    X'87',AL3(INFMJFCB)    DEFINE JFCB EXIT
XXKR     DS    0F   FULLWORD LOADED INTO R0 FOR SECTOR CONVERT RTN
BLKSIZE  DC    H'0'     BLKSIZE
         DC    X'00'       BINARY 0
         DC    X'01'  RELATIVE BLOCK NUMBER ON TRACK
*
TTRN     DS    0F   FULLWORD LOADED INTO R0 FOR ABSOLUTE TRK CONV RTN
TT       DC    H'0'  RELATIVE TRK NUMBER
         DC    X'01'  RELATIVE BLOCK NUMBER ON TRACK
         DC    X'00'
*
SECTPARM DS    0F    FULL WORD LOADED INTO R2 FOR SECTOR CONVERSION
UCBTYPE  DS    X     UCB DEVICE TYPE
         DC    AL3(SECTVAL)   ADDRESS OF SECTOR VALUE
*
DVCTYPE  DS    2F              USE FOR DEVTYPE MACRO FRO DEVICE TYPE
DEVDDNAM DC    CL8'SYSUT1  '   USE FOR DEVTYPE MACRO TO #TRKS/CYL
DEVAREA  DS    2F,H
TRKPRCYL DC    H'1'  INITIAL TO 1 FOR TRK READ
         DS    2F
*
RECLEN   DS    H        SAVE THE LRECL
NUMREC   DS    F    TRKCALC RETURNS THE MAX NUMBER OF BLOCKS HERE
CNVRTRTN DS    F     CONVERT ROUTINE ADDRESS FOR ABSOLUTE TRACK ADDR
SAVEREGS DS    5F  SAVE AREA FOR REGISTERS R9-R13
SAVEINFO DS    2F  SAVE AREA FOR REGS R10,R11-BUFFER LEN AND ADDR
DSKCCWAD DS    F   ADDR OF 1STT CCW FOR DISK
BUFADDR  DS    F   ADDR OF DATA BUFFER
BLKPRCYL DS    F   SET TO #BLKS/TRK FOR TRK READS
CYLSIZE  DS    F   NUMBER OF BYTES IN A CYLINDER
FREBUFSZ DS    F   BUF SIZE FOR FREEMAIN
FRECCWSZ DS    F   CCW CHAIN AREA SIZE FOR FREEMAIN
SECTVAL  DS    X     SECTOR VALUE PLACED HERE BY SECTOR CALC ROUT
         LTORG
         SPACE 2
SYSUT1   DCB   DSORG=PS,MACRF=(E),DDNAME=SYSUT1,EODAD=RC8,DEVD=DA,     X
               EXLST=EXLSTRTN
         SPACE 1
         IEFJFCBN     JFCB AREA
         SPACE 1
         PRINT GEN
*        THE FOLLOWING XDAP LIST MACRO GENERATES AN ECB (4 BYTES), AN
*        IOB (40 BYTES) AND A CHANNEL PROGRAM (4 CCW'S OF 8 BYTES EA)
*        TO READ ONE BLOCK FROM DISK. THE PARAMETERS SPECIFIED ARE:
*    1.  ECB- AN ECB SYMBOL WHICH GENERATES 'ECB' AS THE ECB LABEL
*    2.  RI - THE READ IDENTIFY FUNCTION (READ NOT BY KEY) FOR CCW OPCD
*    3.  SYSUT1 - THE INPUT DATA SET DCB PLACED IN IOB
*    4.  BUFAREA- A DUMMY AREA CONTAINING THE INPUT BUFFER ADDRESS
*                 WHICH MUST BE SUPPLIED BY A GETMAIN MACRO TO THE LIST
*                 AND IS PLACED INTO THE 4TH CCW
*    5.  BUFLEN - A DUMMY QUANTITY SPECIFYING THE BUFFER LENGT SET TO 0
*                 WHICH MUST BE OBTAINED FROM THE DCBBLKSI FIELD OF
*                 THE DCB AND IS PLACED INTO THE 4TH CCW
*    6.  ECB+36 - THE AREA IN THE LIST INTO WHICH THE ABSOLUTE SEEK
*                ADDRESS (MBBCCHHR) IS PLACED (IN THE IOB) BY CNVRT RTN
*    7.  SECTVAL- THE ADDRESS OF THE SECTOR VALUE FOR RPS DEVICES
*                 WHICH IS PLACED INTO THE 1ST CCW
         XDAP  ECB,RI,SYSUT1,BUFAREA,0,,ECB+36,SECTVAL,MF=L
BUFAREA  DS    X   A DUMMY AREA WHOSE ADDR IS USED IN ABOVE XDAP
         SPACE 1
         PRINT NOGEN
         DCBD  DSORG=(PS,XE)    GET DCB MAPPING MACRO
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
RECFMV1  B     COMPREC      CHANGED TO NOP IF RECFM=V
         LH    R5,0(R11)    GET BLKSIZE FROM BLOCK DISCRIPTOR WORD
         SH    R5,=H'4'     SUBTRACT 4 FROM BLKSIZE FOR THE BDW
         LA    R11,4(R11)   POINT TO RECORD DISCRIPTOR WORD
         MVC   RECLEN,0(R11)    STORE LRECL IN RECLEN
         B     PROCESSRTN
COMPREC  LH    R5,CYLSIZE LOAD INPUT CYL(BLK?) LENG WHEN RECFM=F OR U
         SH    R5,IOB+14 <=?SUBTRACT RESIDUAL LENGTH(IOB ADDR+14)
         B     PROCESSRTN
         SPACE 2
BLKED    SH    R5,RECLEN    SUBTRACT LOG. REC FROM BLKSIZE
         BNP   RDPDS IF 0 (OR NEGATIVE FOR RECFM=U), READ NEXT BLOCK
         AH    R11,RECLEN        LOAD ADDR OF NEXT LOGICAL REC
RECFMV2  B     RETURN3       CHANGED TO NOP IF RECFM=V
         MVC   RECLEN,0(R11)     STORE THE LRECL FROM THE RDW IN RECLEN
         B     RETURN3
