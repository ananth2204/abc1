







           HH  HH  FFFFFF   SSSS   EEEEEE  LL      EEEEEE   CCCC   TTTTTT
           HH  HH  FFFFFF  SSSSSS  EEEEEE  LL      EEEEEE  CCCCCC  TTTTTT
           HH  HH  FF      SS   S  EE      LL      EE      CC   C    TT
           HH  HH  FF      SS      EE      LL      EE      CC        TT
           HH  HH  FF      SS      EE      LL      EE      CC        TT
           HHHHHH  FFFFFF   SS     EEEEEE  LL      EEEEEE  CC        TT
           HHHHHH  FFFFFF    SS    EEEEEE  LL      EEEEEE  CC        TT
           HH  HH  FF         SS   EE      LL      EE      CC        TT
           HH  HH  FF         SS   EE      LL      EE      CC        TT
           HH  HH  FF     S   SS   EE      LL      EE      CC   C    TT
           HH  HH  FF     SSSSSS   EEEEEE  LLLLLL  EEEEEE  CCCCCC    TT
           HH  HH  FF      SSSS    EEEEEE  LLLLLL  EEEEEE   CCCC     TT

           EEEEEE  XX  XX AAAAAAA  MMM  MM PPPPPP  LL      EEEEEE   SSSS
           EEEEEE  XX  XX AAAAAAA  MMMMMMM PPPPPP  LL      EEEEEE  SSSSSS
           EE       XXXX  AA   AA  MM M MM PP   P  LL      EE      SS   S
           EE       XXXX  AA   AA  MM   MM PP   P  LL      EE      SS
           EE        XX   AA   AA  MM   MM PPPPPP  LL      EE      SS
           EEEEEE    XX   AAAAAAA  MM   MM PPPPP   LL      EEEEEE   SS
           EEEEEE    XX   AAAAAAA  MM   MM PP      LL      EEEEEE    SS
           EE       XXXX  AA   AA  MM   MM PP      LL      EE         SS
           EE       XXXX  AA   AA  MM   MM PP      LL      EE         SS
           EE      XX XX  AA   AA  MM   MM PP      LL      EE     S   SS
           EEEEEE  XX  XX AA   AA  MM   MM PP      LLLLLL  EEEEEE SSSSSS
           EEEEEE  XX  XX AA   AA  MM   MM PP      LLLLLL  EEEEEE  SSSS




                                                      RELEASE  4.3  07/12/93

                                                               MORRIS KARLIN
                                                              NORMAN LINDNER

                                                        EDITED BY L. KAUFMAN


     (C) COPYRIGHT SEPT 1981 BY M. KARLIN, N. LINDNER, I. EISENSTEIN



                                  HFSELECT
                                                         FUNCTIONS   i

                HFSELECT OPTIONS TO USE FOR VARIOUS FILE FUNCTIONS

                                                               OPTION

            To compare fields in a record                      A

            To compare the same numbered records
            in two files                                       A

            To select records between ranges of keys           B  P  G

            To select records on IF THEN ELSE logic            C

            To select records about a given key for
            debugging a program                                D

            To search for given character strings in
            records or parts of records                        E

            To replace character strings in records
            or parts of records                                E

            To unduplicate a file                              F

            To create a frequency listing of keys              F

            To select records between ranges of integer keys   G

            To select complete groups of records on keys       K

            To select records from two files on key matches    A  M  T

            To select records from a file on OR logic          O

            To select records on key class                     C  D  O  S

            To check a file for sequence                       Q

            To copy a file completely or skipping records      R

            To create a test file by random selection          R

            To select records on a single key or key class     S

            To find data sets/members by VTOC searches         V

            To find data sets/members by CATALOG searches      V

            To find data sets/members and then call
            programs using the found data sets/members
            as input files                                     V


                                  HFSELECT
                                                         FUNCTIONS  ii

               HFSELECT SUBOPTIONS

            Permit long keys in some options                   L

            Reverse selection logic                            M

            Read tape or VSAM input files backwards            W

               HFSELECT USER EXITS

            Call programs to modify records before             I1-4,Im
            HFSELECT processing

            Call programs to modify records after
            HFSELECT processing before outputing to file       O1-2

            Modify HFSELECT program defaults                   X0



                                 HFSELECT                       CONTENTS  ii

                           TABLE OF EXAMPLES
                                                                               PAGE

       A1- Select records if field A is greater than field B                   A-1
       A2- Select changed records from an updated file                         A-1
       A3- Copy a file and also print the records (in one step)                A-1
       A4- Select records if date X (mmddyy) is earlier or same as date y      A-2
                  (yymmdd)
       A5- Match two files, record for record, and output matching and         A-2
                  non-matching records of both files
       A6-Create a sequential copy of a PDS with a member name appended to     A-3
                  each record
       A1- Copy two separate files in a single step                            A-4
       B1- Select records within ranges of dates                               B-1
       B2- Select records within ranges of numbers                             B-1
       B3- Select records not in ranges of numbers                             B-2
       B4- Select records on ranges defined by two different fields            B-2
       C1- Select records if (field A equals X) or (field A  equals Y and      C-1
                  field B equals Z)
       C2- Select records if (field A equals X and field B equals Y) or        C-1
                  (field A does not equal X and field C equals Z)
       C3- Select records if (field A is numeric and field B equals Y) or      C-2
                  (field A is not numeric and field B equals Z)
       C4- Select records if field A is not equal to X and field C equals Y    C-2
       C5- Select records if field A equals X (the length of field A is        C-3
                  greater than 20)
       D1- Select records  around  A  record with non-numerics in a numeric    D-1
                  field
       D2- Select records after a specific packed key                          D-1
       D3- Select records before a specific hex key                            D-1
       D4- Select all records after a given key (near the end of the file)     D-2
       E1- Separate JCL from data in a library containing JCL members          E-1
       E2- Select records containing certain keys anywhere  in  a specified    E-1
                  area of the record
       E3- Find all 'GO TO' statements in a COBOL program                      E-2
       E4- Search a documentation data set for all lines that extend beyond    E-2
                  margins
       E5- Produce a directory listing of the members in a source library      E-2
                  that are COBOL programs
       E6- Perform a string replacement in a file                              E-3
       E7- Perform a string replacement in all members of a PDS                E-3
       E8- Perform a string replacement only on selected records in a PDS      E-4
       E9- Perform an in-place string replacement in members of a PDS          E-4
       F1- Unduplicate a file on case number                                   F-1
       F2- Generate a two-dimensional statistical cross table by sex and       F-1
                  year of birth
       F3- Unduplicate a  file or list the number of occurrences of each key   F-2
                  in a file. This example contains outputs of the F option
                  using various values of n in the J=n parameter
       F4- Unduplicate a descending ordered tape file on a key field larger    F-3
                  than 20 bytes


                                 HFSELECT                       CONTENTS  ii

                           TABLE OF EXAMPLES
                                                                               PAGE

       F5- Generate a frequency report on a frequency listing                  F-3
       F6- Convert a variable length file to fixed format to produce           F-4
                  a frequency list of RDWs
       F7- Encrypt a field on every record of a file                           F-5
       G1- Select 5 records for each MANHATTAN zip code (10000 thru 10099)     G-1
       G2- Select case numbers within ranges and print frequency               G-1
                  distribution  of case numbers
       G3- Same as  example G2 but the case numbers are not zero filled        G-2
       G4- Generate a key file                                                 G-2
       K1- Generate a test file of 30 groups of master/slave records, each     K-1
                  group having the same key
       K2- Group select with B=begin  and E=end parameters                     K-1
       M1- Select records against a key file                                   M-1
       M2- Select a given number of records that do not match any key in a     M-1
                  key file
       M3- Select all records not matching keys in a key file                  M-1
       M4- Select from  two  files, records  that match on specified fields    M-2
       M5- Match two files on a selected field. select n records for each key. M-3
                 this example has a list of outputs for various values of n
       M6- Match an ISAM file against a variable record length file on         M-4
                  several fields. Begin and end the match at selected
                  numbered records
       M7- Match two files on numeric fields where one field is packed and     M-4
                  the other is zoned
       M8- Match two files and produce a merged matched output file            M-5
       O1- Select records if any one of three fields match a specified key     O-1
                  for that field
       O2- Select records on a class type in one field or with a given key     O-1
                  in a second field
       O3- Select records on 'nand' logic in three separate fields             O-1
       O4- Select records if any one of three fields matches a key specified   O-2
                  for that field
       P1- Select records with a mmddyy date field having values between       P-1
                  giveen ranges of dates
       P2- Select records with a field having values between multiple          P-1
                  ranges
       P3- Select records  with  a  field  not in specified ranges             P-2
       P4- Encrypt a field on every record of a file                           P-2
       Q1- Check for ascending sequence of a file on concatenated fields       Q-1
       Q2- Check for descending sequence of a file on a field longer than 20   Q-1
                  bytes. Output the in-sequence and out-of-sequence records
       Q3- Same as example Q2 except output the records in ascending order     Q-1
       Q4- Check for ascending sequence of a file. Change   the collating      Q-1
                  sequence  of certain characters while checking
       Q5- Check for ascending sequence of a file. A listing of the two        Q-2
                  output files is shown for a given input file
       R1- Select every  kth record in range one, every lth record in range    R-1
                  two and every mth record in range three


                                 HFSELECT                       CONTENTS iii

                           TABLE OF EXAMPLES
                                                                               PAGE

       R2- Select records with a different skip factor in each of three        R-1
                  ranges
       R3- Select records from a file by their relative record numbers         R-2
       R4- Copy a file                                                         R-2
       R5- Select records at random using the default seed supplied by the     R-2
                  program
       R6- Select records  at random using a user specified seed               R-3
       R7- Delete every nth record from a file                                 R-3
       R8- Convert a non-sequential file to a sequential file                  R-3
       R9- Select the  last n records from a tape file                         R-4
       R10- Count the number of records in a file                              R-4
       R11- Generate a table of random numbers                                 R-4
       R12- Copy selected PDS members to a PDS file                            R-5
       R13- Convert a sequential/ISAM file to VSAM                             R-5
       R14- Select the first and last record of a file                         R-5
       S1- Select records that do not have zero in a given field               S-1
       S2- Select records  that  have  any one of five  different characters   S-1
                  in a given 1-byte field
       S3- Select records that have non-alphabetic characters in a given       S-1
                  field
       S4- Select records that have binary zeros in three fields               S-2
       S5- Delete records  with  high values in a given field                  S-2
       S6- Count all records with a given value in one field  and another      S-2
                  specified value in a second field
       S7- Select all records with a specified number in a binary/packed       S-3
                  field
       S8- Select records with values in a packed field greater than a         S-3
                  specified number
       S9- Select records based on four  or  more select fields                S-3
       T1- Select records with any of  five different values in a given        T-1
                  field
       T2- Select records by multiple and/or logic                             T-1
       T3- Select records that do not have any of several different values     T-2
       T4- Select records from one file that match any record in another file  T-2
       V1- List all user01 files on volume applda                              V-1
       V2- List all SOURCE.COBOL files on multiple volumes                     V-1
       V3- List member directories of multiple PDSs, selecting members         V-1
                  created after a given date
       V4- List all dataset names prefixed with USERxx on all volumes that     V-2
                  start with WORK
       V5- Create a file of 100 names each of:                                 V-2
                  datasets with prefix USERxx
                  names of files that contain the string 'SOURCE'
       V6- Create a file containing the names of every dataset and every       V-2
                  member of every PDS on every mounted volume in the system
       V7- List members of a PDS that have aliases                             V-3


                                 HFSELECT                       CONTENTS  iv

                           TABLE OF EXAMPLES
                                                                               PAGE

       V8- List all catalogued datasets with the prefix USER001, or            V-3
                  beginning with PROD.HFS
       V9- List all statements containing a given string in multiple PDSs      V-4
       V10- List all SORTOUT JCL statements together with the four records     V-4
                   following each occurrence in multiple libraries
       V11- List members with specified names in multiple libraries via a      V-4
                   VTOC search
       V12- List members with specified names in multiple libraries via a      V-4
                   catalog search
       V13- Create a file containing the first n records from each member of   V-5
                   a pds
       V14- Copy all non-VSAM data sets from one DASD to another               V-5
       V15- Copy non-VSAM data sets with specified generic names to            V-6
            another pack. Catalog the new data sets and uncatalog the
            old
       V16- Compress all data sets with given prefixes                         V-6
       V17- Copy six data sets on a volume with a generic prefix and           V-7
            an LRECL=80
       V18- Copy all PDS data sets with given prefixes to another              V-7
            volume using the IBM utility IEBCOPY
       TSO1- Copy a file                                                     TSO-1
       TSO2- Perform  example M5 on-line                                     TSO-1
         X1- Invoke an input and an output user exit                           X-1
         X2- Sample COBOL exit program - fixed length records                  X-1
         X3- Sample COBOL exit program - variable length records               X-2
         X4- Sample ASSEMBLER exit program                                     X-2

                                HFSELECT EXAMPLES               Preface    v

           All  examples coded  in  this  manual  are  assumed  to  use  the
           following PROC:

           //HFSELECT PROC
           //S1     EXEC  HFSELECT
           //SYSPRINT  DD  SYSOUT=*,DCB=BLKSIZE=133   PROGRAM MESSAGES
           //SYSOUT    DD  SYSOUT=*                   SYSTEM MESSAGES
           //SYSOUX    DD  SYSOUT=*                   RANDOM NUMBER TABLES

                The following examples demonstrate the various options
           of HFSELECT. See the HFSELECT Reference Guide  for complete
           descriptions of the HFSELECT options.


                                HFSELECT EXAMPLES                   PAGE A-1

           EXAMPLE A1

           Select  all records from TEST.FILE1 whose six position date field
           starting  in  position 10 is greater than the date field starting
           in data position 30. The file is on tape.

           //STEPA1 EXEC  HFSELECT,PARM='A,J=GT,V=(6,30),6,10'
           //SYSUT1  DD  DSN=TEST.FILE1,UNIT=T6250,DISP=OLD,VOL=SER=111111
           //SYSUT2  DD  DSN=TEST.FILE2,UNIT=T6250,DISP=(,KEEP)

           Note:  the  JCL  is  identical  for  fixed and for variable RECFM
           files.  Also, since we are comparing a file against itself, SYSIN
           has not been coded.

           EXAMPLE A2

           A  disk file has been updated by incrementing a 50 position field
           starting  in position 200. Print the changed records from the new
           file  in character  and  HEX format and put out the corresponding
           records  from  the old file. Start the selection at record 10 and
           end the selection at record 500.

           //STEPA2 EXEC HFSELECT,PARM='AL,E=500,B=9,J=NE,V=(50,200),50,200'
           //*A2 EXEC HFSELECT,PARM='ANL,B=9,E=500,V=(50,200),50,200'
           //*  THE TWO EXEC STATEMENTS ARE EQUIVALENT SINCE THE
           //*  J= DEFAULT WITH THE N SUBOPTION IS NE.
           //SYSUT1  DD  DSN=DISK.FILE1,DISP=SHR          OLD FILE
           //SYSIN   DD  DSN=DISK.FILE2,DISP=SHR          NEW FILE
           //SYSUT2  DD  DSN=DISK.FILE3,parameters   OUTPUT FROM OLD FILE
           //SYSUT4  DD  SYSOUT=*,DCB=RECFM=A  PRINT IN CHARACTER AND HEX
           //*                                        FROM NEW FILE

           The L suboption must be used since the selection field is greater
           than  20 characters long. B=9 starts the selection at record pair
           10  and  E=500  stops  the selection at record 500. Since neither
           SYSUT3  nor  SYSUT5 were coded, the program stops after the 500th
           record pair is tested.

           EXAMPLE A3

           Copy  a  disk  file  to  tape  and  also print out the records in
           character and HEX format.

           //STEPA3  EXEC HFSELECT,PARM='A,J=EQ,V=(1,1),1,1'
           //*STEP2 EXEC HFSELECT,PARM='A,V=(1,1),1,1'
           //* THE TWO EXEC STATEMENTS GIVE THE SAME RESULT SINCE
           //* THE J= DEFAULT IS EQ.
           //*STEP3 EXEC HFSELECT,PARM='A,J=**,V=(1,1),1,1'
           //* THIS ALSO GIVES THE SAME RESULT SINCE ** FORCES ALL RECORDS OUT
           //SYSUT1   DD  DSN=DISKFILE,DISP=SHR
           //SYSIN    DD  DSN=*.SYSUT1,DISP=SHR
           //SYSUT2   DD  DSN=TAPEFILE,UNIT=T6250,DISP=(,KEEP)
           //*            THIS IS THE TAPE OUTPUT FILE.
           //SYSUT4   DD  SYSOUT=*,DCB=RECFM=A
           //*            THIS IS THE PRINTOUT OF THE FILE

                                HFSELECT EXAMPLES                   PAGE A-2


           Note:  SYSIN  was coded even though it is the  same  data  set as
           SYSUT1,  in order to produce the SYSUT4 file. Since the same file
           is  used  for SYSUT1 and SYSIN, specifying the same record select
           fields  for  each  file causes a match to occur automatically for
           each  record.  Only  the  first  byte  of each record was used to
           maximize  efficiency. SYSUT2 and SYSUT4  are  identical as SYSUT3
           and SYSUT5 would be if they were coded.


           EXAMPLE A4

           Select from a file all records whose date in field A is less than
           or  equal to the date in field B. The format of field A is MMDDYY
           starting in byte 150. The format of field B is YYMMDD starting in
           byte 8000.

           //STEPA4 EXEC HFSELECT,PARM='A,J=LE,V=(6,8000),2,154,2,150,2,152'
           //SYSUT1 DD DSN=SAMEFILE,DISP=SHR
           //SYSUT2 DD DSN=OUTFILE,DISP=(NEW,KEEP),SPACE=(TRK,30),UNIT=SYSDA


           EXAMPLE A5

           Two  payroll  files  are  to  be compared, record for record, for
           equality  on the first 100 bytes. The first file is fixed blocked
           sequential  with  an  LRECL  of  100. The second file is variable
           blocked  ISAM.  Output the matching and non-matching records from
           ISAMFILE  to  SYSUT2 and SYSUT3 respectively. Output the matching
           and   non-matching  records  from  SYSIN  to  SYSUT4  and  SYSUT5
           respectively.

           //STEPA5 EXEC HFSELECT,PARM='AL,V=(100,1),100,1'
           //ISAMFILE DD DSN=ISAMPAY,UNIT=SYSDA,DISP=(OLD,KEEP),
           //  DCB=(RECFM=VB,LRECL=124,BLKSIZE=12960)
           //SYSIN    DD DSN=SEQPAY,UNIT=T6250,DISP=(OLD,KEEP),
           //   DCB=(RECFM=FB,LRECL=100,BLKSIZE=30000)
           //SYSUT2  DD  DSN=MATCHED.PAY,DISP=(NEW,KEEP),UNIT=SYSDA,
           //   DCB=(RECFM=V,LRECL=124,BLKSIZE=128),
           //   SPACE=(CYL,(5,1),RLSE,)
           //SYSUT3  DD  DSN=NONMATCH.PAY,DISP=(,CATLG,DELETE),
           //   DCB=(RECFM=VB,LRECL=124,BLKSIZE=24804),
           //   UNIT=TAPE9,LABEL=(,SL,RETPD=60)
           //SYSUT4  DD  DSN=MATCHED.SYSIN,DISP=(MOD,KEEP),UNIT=DISK,
           //   DCB=(RECFM=F,LRECL=100,BLKSIZE=100),
           //   SPACE=(TRK,(100,10),RLSE)
           //SYSUT5   DD DSN=NONMATCH.SYSIN,DISP=(NEW,KEEP),
           //   DCB=(RECFM=FBS,LRECL=100,BLKSIZE=13000),
           //   UNIT=3330,SPACE=(CYL,(3,1))

                                HFSELECT EXAMPLES                   PAGE A-3


                All  four  output files are sequential datasets  even though
           the  primary  input file is ISAM. The LRECL and the record format
           type (F,V) of each output file must be the same as the input file
           from which it was created. The BLKSIZE of the output files may be
           any value which meets the operating system requirements.

                Input  file DCB information is not required in the JCL if it
           can  be  obtained from any other source. Output file DCB is never
           required  unless  the BLKSIZE is to differ from that of the input
           file  from  which  it  is  derived  which may require a change in
           RECFM (from F to FB, VB to V, etc).

                The L suboption is used  since  the  record  select field is
           greater than 20 bytes.

           EXAMPLE A6

           Create a sequential copy of  a  PDS and append to each record its
           member name. The PDS LRECL=80.

           //STEPA6A EXEC HFSELECT,PARM='R,1,1'
           //* first create a file containing only member names for each
           //* record in the PDS
           //LIBFILE  DD  DSN=FILE.PDS,DISP=SHR
           //MEMBNAME DD  DSN=&&MEMBNAME,DISP=(,PASS),SPACE=(TRK,5),
           //  DCB=BLKSIZE=800,UNIT=SYSDA
           //*
           //STEPA6B EXEC HFSELECT,PARM='A,J=**,V=(1,1),1,1'
           //* merge the PDS with the corresponding member name
           //LIBFILE  DD  DSN=FILE.PDS,DISP=SHR
           //SYSIN    DD  DSN=&&MEMBNAME,DISP=(OLD,DELETE)
           //MERGE    DD  DSN=MERGED.FILE,DCB=(LRECL=88,BLKSIZE=8800)

           NOTE: The J=** parameter is used in STEPA6B  to  cause records on
           the LIBFILE and SYSIN  file  to  be  selected regardless of their
           relationship. The position and length parameters must be coded in
           the PARM only because the  syntax  of the A option requires them.
           Coding 1,1 for the  l,p pairs  maximizes  the  efficiency  of the
           program when J=** is coded.

                                HFSELECT EXAMPLES                        A-4


           EXAMPLE A7

           Make copies of two separate files in one step. The output files
           are preallocated.

           //STEPA7 EXEC HFSELECT,PARM='A,J=**.V=(1,1),1,1'
           //SYSUT1   DD DSN=INFILE1,DISP=SHR
           //SYSUT2   DD DSN=OUTFILE1,DISP=OLD     COPY OF INFILE1
           //SYSIN    DD DSN=INFILE2, DISP=SHR
           //SYSUT4   DD DSN=OUTFILE2,DISP=OLD     COPY OF OUTFILE2


                                HFSELECT EXAMPLES                        B-1


           EXAMPLE B1

           Select all records with values in a date field that are less than
           Dec  21,1976,  or  are  between June 16,1978 and September 5,l978
           inclusive, or are equal to or greater than March 4,l980. The date
           field  is  in the format yymmdd starting in position 25. The file
           is  in  EBCDIC order on this field. Skip the first 49 records and
           stop  selecting  after  the  2000th record. The output file is to
           have the same DCB as the input file.

           //STEPB1 EXEC HFSELECT,PARM='B,B=49,E=2000,6,25,6,25'
           //SYSUT1   DD DSN=INFILE,DISP=SHR
           //SYSUT2   DD DSN=OUTFILE,DISP=(NEW,KEEP),UNIT=T6250,
           //            LABEL=RETPD=60
           //SYSIN    DD *
           LOW VALUES
           761220
           780616
           780905
           800304
           /*

           Note  that  no  DCB  need  be specified for SYSUT2. A key of high
           values,  of length 6, is appended to SYSIN since SYSIN has an odd
           number of keys.


           EXAMPLE B2

           Select from the input file records whose key select field (length
           5 starting in position 15) is in the following ranges:

                          10 ð select field ð 200

                         350 ð select field < 3000

                            5000 ð select field

           Select 50 records for each range. The file is ISAM.

           //STEPB2 EXEC  HFSELECT,PARM='B,J=50,5,15,5,15'
           //ISAMFILE DD  DSN=ISFILEIN,DISP=SHR
           //SYSUT2 DD DSN=SEQOUT,DISP=(,KEEP),UNIT=SYSDA,SPACE=(TRK,(5,2))
           //SYSIN  DD   *,DCB=BLKSIZE=80
           00010
           00200
           00350
           02999
           05000
           /*

           A key of high values of length 5 is appended to SYSIN.

                                HFSELECT EXAMPLES                   PAGE B-2


           EXAMPLE B3

           Select  from  the  input  file all records whose key select field
           (length  5  starting  in  position  15)  is  NOT in the following
           ranges:

                          10 < select field  < 200
                         350 < select field ð 3000
                        5000 ð select field

           //STEPB3 EXEC  HFSELECT,PARM='BN,5,15,5,15'
           //SYSUT1 DD DSN=INFILE,DISP=SHR
           //SYSUT2 DD DSN=FILOUT,DISP=(,KEEP),UNIT=SYSDA,SPACE=(TRK,(5,2))
           //SYSIN  DD   *,DCB=BLKSIZE=80
           00011
           00199
           00351
           03000
           05000
           /*

           A key of high values of length 5 is appended to SYSIN.

                                HFSELECT EXAMPLES                   PAGE B-3

           EXAMPLE B4

           Select  all  persons  from  an employee file whose age is greater
           than  20  and  whose  salary is less than $20,000, and also those
           whose  age  is  greater  than  45  and  whose salary is less than
           $40,000.  Age  is in bytes 10 and 11 and salary begins in byte 50
           for a length of 5 bytes.

           The employee file must be sorted on salary within age.

           //STEPB4 EXEC  HFSELECT,PARM='B,2,10,5,50'
           //SYSUT1  DD   DSN=EMPLOYEE.FILE,DISP=SHR
           //SYSUT2  DD   DSN=OUTFILE,DISP=(NEW,KEEP),UNIT=T6250,LABEL=RETPD
           //SYSIN   DD   *
           20
           20000
           45
           40000
           /*
           //

           In  this  example,  no high values key is appended to SYSIN since
           SYSIN has an even number of keys.

           NOTE: Although in the examples for the B option, all the keys  in
           SYSIN are listed as numerals, they are treated as characters.  The
           comparison utilizes the  8-bit binary sequence from '00000000'  to
           '11111111'.


                                HFSELECT EXAMPLES                   PAGE C-1

                EXAMPLE C1

                Select  all records with 01 in positions 1 and 2, or with 00
           in  positions  1  and 2 and JAN80 in positions 10 through 14. The
           JCL is

           //STEPC1  EXEC  HFSELECT,PARM='C,2,1,5,10,2,1'
           //SYSUT1    DD  Input file
           //SYSUT2    DD  Output file of selected records
           //SYSIN     DD  *,DCB=BLKSIZE=80
           00
           JAN80
           01
           /*

           EXAMPLE C2

                Select from an input file all records that are inactive with
           a  closing date of Jan 1,1981, or that are active with an opening
           date of December 31,1980. The file is VSAM.

                The  activity  indicator  is one byte in position 50 and the
           code  for 'active' = 1. The opening date is a 6 byte field of the
           form  MMDDYY  starting  in  position 272. The closing date is a 6
           byte  field  of the form MMDDYY starting in position 280. The JCL
           required is

           //STEPC2 EXEC  HFSELECT,PARM='C,1,50,6,272,6,280'
           //STEPCAT  DD  DSN=catalog,DISP=SHR
           //VSAMFILE DD  DSN=VSAMFILE,DISP=SHR
           //SYSUT2   DD  DSN=OUTPUT,DCB=(RECFM=VB,LRECL=input file lrecl+4,
           //      BLKSIZE=10*lrecl),parameters
           //*  NOTE THAT SYSUT2 IS A SEQUENTIAL FILE
           //SYSIN    DD   *
           1
           123180
           010181
           /*


                                HFSELECT EXAMPLES                   PAGE C-2


           EXAMPLE C3

                A  personnel  file  contains  records of both managerial and
           non-managerial employees. The managerial employees are designated
           by  a  two  digit  zoned  decimal  number in bytes 10 and 11. The
           non-managerial  employees  are  designated  by  a  two  character
           alphabetic  code in these positions. A work location code for all
           employees  is  in  bytes  50  through  53.  Select all managerial
           employees  in  location  A641 and all non-managerial employees in
           location B371.

           //STEPC3  EXEC  HFSELECT,PARM='C,2,11,4,50,4,50'
           //SYSUT1    DD  DSN=PERSONEL.FILE,DISP=SHR
           //SYSUT2    DD  DSN=PERSONEL.OUTPUT,DISP=OLD
           //SYSIN     DD  *
           CLASS=N
           A641
           B371
           /*
           //

           The  length  2,  position  11  refers  to the class key type.

           EXAMPLE C4

           Select  from  the  primary input file all records that have 05 in
           positions 1 and 2 and do not have F in position 100.

           //STEPC4  EXEC HFSELECT,PARM='C,1,100,1,100,2,1'
           //SYSUT1    DD Input file
           //SYSUT2    DD Output file of selected records
           //SYSIN     DD *
           F                          KEY A
           Z                          KEY B
           05                         KEY C
           /*

                                                     _
           Note that the logic of the C option is AB+AC ((A AND B) OR (NOT A
           AND  C)).  If  keys  A  and  B  refer  to the same field but have
           different  values,  AB  (A AND B) can never be true since a field
           cannot  have two values at the same time. Therefore, selection is
           on (NOT A AND C) only.


                                HFSELECT EXAMPLES                   PAGE C-3


           EXAMPLE C5

           Select  all  records  with  an  address  of 124-126 EAST HAVILAND
           STREET  in  an address field beginning in byte 51 for a length of
           40.

           //STEPC5   EXEC HFSELECT,PARM='C,20,51,20,71,20,51'
           //SYSUT1     DD Input address file
           //SYSUT2     DD Selected address file
           //SYSIN      DD *
           124-126 EAST HAVILAN
           D STREET
           124-126 EAST HAVILAN
           /*

                                                                _
           The  basic  logic  of  the  C  option, which is AB + AC, has been
           changed  to  AB  by  setting key C equal to key A and referencing
           them  to  the same field, thus preventing (NOT A AND C) from ever
           being  true.  Since each key in this option can be 20 bytes long,
           the effective key length for selection can be up to 40 characters
           by concatenating keys A and B. This is equivalent to the S option
           with  2  L,P pairs, but with a total select field length extended
           to 40 characters (instead of 20).


                                HFSELECT EXAMPLES                   PAGE D-1


                EXAMPLE D1

                Find the first occurrence, if any, of a non-numeric value in
           a  field defined as numeric. The field is of length 4 starting in
           byte  50.  Print  in character and HEX format five records before
           the  non-numeric  record, the record itself, and the five records
           after the record.

                The field is zoned numeric signed or unsigned.

           //STEPD11  EXEC  HFSELECT,PARM='DN,C=N,J=5,4,50'
           //SYSUT1     DD  Input file
           //SYSUT2     DD  SYSOUT=*,DCB=RECFM=A

                The field is packed numeric.

           //STEPD12  EXEC  HFSELECT,PARM='DN,C=P,J=5,4,50'
           //SYSUT1     DD  Input file
           //SYSUT2     DD  SYSOUT=*,DCB=RECFM=A


                EXAMPLE D2

                Select  the  fifth  occurrence  of  a record with the number
           -21376.42  in  a  packed field, and print this record and the ten
           records  following this record in character and HEX. The field is
           of length 5 starting in position 15.

           //STEPD2  EXEC  HFSELECT,PARM='D,P=-2137642,J=+10,5,15'
           //SYSUT1    DD  Input file
           //SYSUT2    DD  SYSOUT=*,DCB=RECFM=A
           //EXITS     DD  *
           X0
            DOPTION=OPTIMIZE,5
           //

           Note: See Appendix  D.2.9  for  a  description  of  the  DOPTION
                 parameter of the X0 initialization exit to begin selection
                 processing at other than the first key matched record.

                EXAMPLE D3

                Select  the  first  occurrence of the hexstring 9496
           and  the five records preceeding it. The field starts in position
           30 for a length of six bytes. Print out the records.

           //STEPD3 EXEC HFSELECT,PARM='D,X=949699998982,J=-5,6,30'
           //SYSUT1   DD Input file
           //SYSUT2   DD SYSOUT=*,DCB=RECFM=M

                The  records  will  be printed  out with ruler lines.


                                HFSELECT EXAMPLES                   PAGE D-2


                EXAMPLE D4

                Select from  a  tape  file  of  1,000,000 records, with keys
           numbered sequentially from 000001 to 1000000, the record with key
           999940  and the remaining records in the file. The keys are zoned
           numeric,  unsigned,  starting  in  position  1 with a length of 7
           bytes.

           //STPD41 EXEC HFSELECT,PARM='DW,K=0999940,J=-65,7,1'
           //*              OR
           //*STPD42 EXEC HFSELECT,PARM='DW,N=999940,J=-70,7,1'
           //*              OR
           //*STPD43 EXEC HFSELECT,PARM='D,K=0999940,J=+60,7,1'
           //SYSUT1    DD  Input file
           //SYSUT2    DD  Output file
           //

                The  three  EXECute  statements above all select the same 61
           records. The first two use the W suboption, reading the tape file
           backwards for speed of execution since the desired records are at
           the  end  of  the  file. The records for these two statements are
           output in reverse order from the input file order.

                The  minus  sign  is  used in the J= parameter for these two
           statements since the end of file records occur before the desired
           record in the backwards read.

                A  count  of  60  or  greater  ensures  that  records 999941
           through  1000000  which follow the desired record are put out.

                If K= is used, a character compare is done by the program so
           the  leading  zero  must be included in the key. If N= is used, a
           numeric comparison is performed so no leading zero is necessary.

                In all cases of the D option, all records of the input file,
           from the first record on the file up to the record preceding  the
           first one output to SYSUT2, are output to SYSUT3 if it is coded.


                                HFSELECT EXAMPLES                   PAGE E-1


                EXAMPLE E1

                Select and print out from a TSO data set all the JCL records
           except the data delimiters. Print to SYSUT3 all the data records.
           Put  the delimiters in SYSUT3 so that the separation of the  data
           groups is shown.

           //STEPE1 EXEC HFSELECT,PARM='E,1,9'
           //LIBFILE  DD DSN=SO11NJL.TSO,DISP=SHR
           //SYSUT2   DD SYSOUT=*    JCL PRINTOUT
           //SYSUT3   DD SYSOUT=* DATA AND DELIMITER PRINTOUT
           //SYSIN    DD *
           A//A
           C/*ROUTEC
           X/*OUTPUTX
           !/*JOBPARM!
           B/*MESSAGEB
           A/*SETUPA
           /*

           /* in the first two columns, if followed by certain keywords such
           as  ROUTE,  SETUP,  etc.,  are  HASP  (JES) control cards and are
           considered JCL in this example.


                EXAMPLE E2

                Select  from  a  sequential  file all records with the names
           SMITH,  JONES,  or  DOE  in  the  fifteen  byte field starting in
           position 10.

           //STEPE2  EXEC  HFSELECT,PARM='E,10,24'
           //SYSUT1    DD  Input file
           //SYSUT2    DD  Output file
           //SYSIN     DD  *
           DSMITHD
           DJONESD
           XDOEX
           /*


                                HFSELECT EXAMPLES                   PAGE E-2


                EXAMPLE E3

                Search  a  COBOL  program,  presumably written in structured
           format, for any line containing 'GO TO'.

           //STEPE3  EXEC HFSELECT,PARM=E
           //SYSUT1    DD DSN=SOURCE.COBOL(PROGRAM),DISP=SHR
           //SYSUT2    DD SYSOUT=*
           //SYSIN     DD *
           X GO X
           /*

                Since   GO   is  a  reserved  word  in  COBOL  a  string  of
           blankGOblank  will find all examples of GO TO, no matter how many
           blanks are between GO and TO.

                EXAMPLE E4

                Documentation was to have been written with ten blank spaces
           at  either margin.  Find any lines with fewer than ten spaces (no
           blanks)  at  the  margins.  The  data  set  is 80 character fixed
           length.

           //STEPE4  EXEC HFSELECT,PARM='EN,1,10,71,80'
           //SYSUT1    DD Documentation file
           //SYSUT2    DD SYSOUT=*        bad lines
           //SYSIN     DD *
           A A
           /*

                The  JCL above will select lines that do not have a blank in
           any column from 1 to 10 and from 71 to 80.

                EXAMPLE E5

                Produce a directory listing  of  the  members  of  a  source
           library which are COBOL programs.

           //STEPE5  EXEC HFSELECT,PARM='E,8,72'
           //LIBFILE   DD DSN=LIB.SOURCE,DISP=SHR
           //MEMBNAME  DD SYSOUT=*
           //SYSIN     DD *
           *PROGRAM-ID.*
           //


                                HFSELECT EXAMPLES                   PAGE E-3


           EXAMPLE E6

                Change every occurrence of the string UNIT=3330 to UNIT=3350
           in  member  U3330 in the JCL dataset JCLPDS01. Name the resultant
           member  U3350.  Also  count  the  number  of  records  containing
           UNIT=SYSDA.

           //STEPE6  EXEC HFSELECT,PARM='E,4,71'
           //SYSUT1   DD  DSN=JCLPDS01(U3330),DISP=SHR
           //SYSUT2   DD  DSN=JCLPDS01(U3350),DISP=SHR
           //CONVERT  DD  *
           @UNIT=3350
           /*
           //SYSIN    DD  *
           XUNIT=3330X
           *UNIT=SYSDA*
           /*
           //

                Note:  This  example  will  create  member U3350 in JCLPDS01
           identical  to  member  U3330  except  that all references to 3330
           units  will  be  changed  to  3350 units. SYSUT2 will contain all
           records that occur in member U3330. The column ranges of 4 and 71
           were  specified  since  JCL  parameters  must occur between these
           column  values.  This is more efficient than searching the entire
           80 byte record by specifying PARM='E'.

                A   message   will   be  generated  listing  the  number  of
           occurrences   of  the  string  UNIT=3330  that  were  changed  to
           UNIT=3350. Messages will also be generated listing   the   number
           of  records  containing  the  string  UNIT=3330  and  the  number
           containing the string UNIT=SYSDA.

           EXAMPLE E7

                Change  every  occurrence  of the string PGM=IEBGENER to the
           string  PGM=HFSELECT  in  the  library  PDS.PROCLIB.  Output  the
           changed  file  as  PDS.PROCLIB1.  This  job  assumes that all the
           IEBGENER steps in PDS.PROCLIB are pure copy functions.

           //STEPE7  EXEC HFSELECT,PARM='E,4,71'
           //LIBFILE  DD  DSN=PDS.PROCLIB,DISP=SHR
           //LIBOUT   DD  DSN=PDS.PROCLIB1,DISP=SHR
           //CONVERT  DD  *
           @PGM=HFSELECT
           /*
           //SYSIN    DD  *
           XPGM=IEBGENERX
           //
                Note: This example creates a library file that is  an  exact
           copy of the input library, but with all references to the program
           IEBGENER changed to HFSELECT. The example assumes that space  and
           directory blocks had been preallocated to PDS.PROCLIB1.


                                HFSELECT EXAMPLES                   PAGE E-4


           EXAMPLE E8

                Perform  a  test  run on EXAMPLE E7, routing the output to a
           print file. The test run will print out only the records changed.

           //STEPE8  EXEC HFSELECT,PARM='E,4,71'
           //LIBFILE  DD  DSN=PDS.PROCLIB,DISP=SHR
           //SYSUT2   DD  SYSOUT=*
           //CONVERT  DD  *
           $PGM=HFSELECT
           /*
           //SYSIN    DD  *
           XPGM=IEBGENERX
           /*
           //

                Note:  The  SYSUT2 print file will contain only records that
           had the string PGM=IEBGENER. This will prevent the entire library
           from being printed.

           EXAMPLE E9

                Change, in place, every occurrence of the string TEST.ABC to
           the string PROD.ABC in the library PDS.PROCLIB.

           //STEPE7  EXEC HFSELECT,PARM='E,4,71'
           //LIBFILE  DD  DSN=PDS.PROCLIB,DISP=SHR
           //LIBOUT   DD  DSN=PDS.PROCLIB,DISP=SHR
           //MEMSYSIN DD  *
           *(R)             THIS ALLOWS ALL MEMBERS TO BE UPDATED IN PLACE
           //SYSIN    DD  *
           XPROD.ABCX
           //CONVERT  DD  *
           @TEST.ABC
           //


                                HFSELECT EXAMPLES                   PAGE F-1


           EXAMPLE F1

           A  file is given in case number order. It is known that there are
           duplicate  records  in  the  file  and  it  is desired that these
           duplicates  be deleted from the file. It is also desired that the
           duplicate  case  records  be  output  to  a second file. The case
           number is of length 10 and is in position 1 of the record.

           //STEPF1 EXEC HFSELECT,PARM='F,J=1,10,1'
           //SYSUT1   DD DSN=TEST.INPUTFILE,DISP=SHR
           //SYSUT2   DD DSN=TEST.UNDUP.FILE,UNIT=T6250,DISP=(,KEEP)
           //SYSUT3   DD DSN=TEST.DUPLI.FILE,UNIT=T6250,DISP=(,PASS)

           EXAMPLE F2

           It is desired to generate the crosstab statistics for a file. The
           statistics required are the sex and year of birth on each record.
           The  sex  is a one character field in position 18 and the date of
           birth  is a six character field starting in position 35 (YYMMDD).
           The file is in ascending sort order on date of birth within sex.

           //STEPF2 EXEC HFSELECT',PARM='F,J=0,1,18,2,35'
           //SYSUT1   DD DSN=TEST.INFILE,DISP=SHR


                                HFSELECT EXAMPLES                   PAGE F-2


           EXAMPLE F3

           It  is  desired  to  print  the first n records of each unique ID
           contained in a file. The ID is of length 1 and starts in position
           1 of the record. Print out the remaining records in SYSUT3.

           //STEPF3 EXEC HFSELECT,PARM='F,J=n,1,1'  n coded as shown below
           //SYSUT2   DD SYSOUT=*
           //SYSUT3   DD SYSOUT=*
           //SYSUT1   DD input file

           The  outputs for the input file keys listed below and for various
           values of n in the J= parameter are as follows:


                           n=1               n=2               n=3

           SYSUT1     SYSUT2 SYSUT3     SYSUT2 SYSUT3     SYSUT2 SYSUT3

             1          1                 1                 1
             1                 1          1                 1
             2          2                 2                 2
             3          3                 3                 3
             3                 3          3                 3
             3                 3                 3          3
             3                 3                 3                 3
             4          4                 4                 4
             4                 4          4                 4
             4                 4                 4          4
             4                 4                 4                 4
             4                 4                 4                 4
             5          5                 5                 5
             7          7                 7                 7
             8          8                 8                 8
             9          9                 9                 9
             9                 9          9                 9

           If n=0 the following messages would be printed:

           KEY= 1   NUMBER OF RECORDS SELECTED = 2
           KEY= 2   NUMBER OF RECORDS SELECTED = 1
           KEY= 3   NUMBER OF RECORDS SELECTED = 4
           KEY= 4   NUMBER OF RECORDS SELECTED = 5
           KEY= 5   NUMBER OF RECORDS SELECTED = 1
           KEY= 7   NUMBER OF RECORDS SELECTED = 1
           KEY= 8   NUMBER OF RECORDS SELECTED = 1
           KEY= 9   NUMBER OF RECORDS SELECTED = 2

           and SYSUT2 would contain all the records of the input file.


                                HFSELECT EXAMPLES                   PAGE F-3


           EXAMPLE F4

           It  is  desired  to  unduplicate  a  tape  file.  The  file is in
           descending order on a 100 byte key which starts in position 1.

           //STEPF4 EXEC HFSELECT,PARM='FWL,J=1,100,1'
           //SYSUT1   DD  DSN=TAPEFILE,UNIT=T6250,DISP=(OLD,KEEP),
           //             VOL=SER=001234
           //SYSUT2   DD  DSN=UNDUP.FILE,UNIT=T6250,DISP=(,CATLG)

           The  W  suboption is used because reading the file backwards puts
           it in ascending order on the key. The L suboption is used because
           the key length is greater than 20 bytes.

           EXAMPLE F5

           A file is sorted by social security number which is in position 5
           of the record. Produce a frequency report of the number of social
           security numbers that are on the file  once,  twice, three times,
           etc.

           //STEPF5A EXEC HFSELECT,PARM='F,J=0,9,5'
           //* create frequency on social security number
           //* and send sysprint data set to disk to be passed
           //SYSPRINT DD  DSN=&&SSNFREQ,UNIT=SYSDA,DISP=(,PASS),
           //             SPACE=(TRK,(50,5)),
           //             DCB=(RECFM=FBA,LRECL=133,BLKSIZE=1330)
           //SYSUT1   DD  DSN=SSNFILE,UNIT=T6250,DISP=(OLD,KEEP),
           //             VOL=SER=001234
           //*
           //STEPF5B EXEC HFSELECT,PARM='S,K=SEL021,6,2'
           //* select frequency messages SEL021 only
           //SYSUT1   DD  DSN=&&SSNFREQ,DISP=(OLD,DELETE)
           //SYSUT2   DD  DSN=&&MSGS,DISP=(,PASS),UNIT=SYSDA,
           //             SPACE=(TRK,(50,5))
           //*
           //STEPF5C EXEC PGM=SORT
           //* sort on frequency count in SEL021 messages
           //* the count is in position 63 for a length of 10 in SEL021
           //* this step groups the keys by number of occurrences
           //SYSOUT   DD  SYSOUT=*
           //SORTIN   DD  DSN=&&MSGS,DISP=(OLD,DELETE),
           //SORTOUT  DD  DSN=&&SORTMSGS,UNIT=SYSDA,DISP=(,PASS),
           //             SPACE=(TRK,(50,5))
           //SYSIN    DD  *
             SORT FIELDS=(63,10,A,CH)
           //*
           //STEPF5D EXEC HFSELECT,PARM='F,J=0,10,63'
           //* count the number of keys with each number of occurrences
           //SYSUT1   DD  DSN=&&SORTMSGS,DISP=(OLD,DELETE)


                                HFSELECT EXAMPLES                   PAGE F-4


           EXAMPLE F6

           Read  a  variable length file  and report on the sizes of records
           found and how many of each size were on the file.

           //STEPF6A EXEC HFSELECT
           //* convert variable length file to fixed format and truncate
           //* to retain RDW portion of record only (by using OPTCD=U)
           //SYSUT1   DD  DSN=variable.file,DISP=OLD
           //SYSUT2   DD  DSN=&&RDWS,DISP=(,PASS),UNIT=SYSDA,
           //             SPACE=(TRK,(50,5)),
           //             DCB=(RECFM=FB,LRECL=4,BLKSIZE=4000,OPTCD=U)
           //*
           //STEPF6B EXEC PGM=SORT    SORT ON RDWs
           //SYSOUT   DD  sysout=*
           //SORTIN   DD  DSN=&&RDWS,DISP=(OLD,DELETE),
           //SORTOUT  DD  DSN=&&SORTRDWS,UNIT=SYSDA,DISP=(,PASS),
           //             SPACE=(TRK,(50,5))
           //SYSIN    DD  *
             SORT FIELDS=(1,4,A,BI)
           //*
           //STEPF6C EXEC HFSELECT,PARM='F,J=0,4,1'
           //* produce frequency count on RDWs.
           //* frequency report is output to a disk file, since the RDW
           //*    key is in non-printable binary
           //SYSPRINT DD  DSN=RDW.FREQ,UNIT=SYSDA,DISP=(,KEEP),
           //             SPACE=(TRK,(50,5),RLSE)
           //SYSUT1   DD  DSN=&&SORTRDWS,DISP=(OLD,DELETE)


                                HFSELECT EXAMPLES                   PAGE F-5


           EXAMPLE F7

                Encrypt  the  social  security  number  on every record of a
           personnel  file.  The  SSN is in zoned decimal format in position
           50.  Use  the  following encryption algorithm: n ---> n+3 mod 10;
           i.e. add 3 to each number, with no carryover into the ten's place.

           //STEPF7  EXEC HFSELECT,PARM='F,9,50'
           //SYSUT1   DD  DSN=PERSFILE,DISP=SHR
           //SYSUT2   DD  DSN=CRYPTFLE,UNIT=T6250,DISP=(,KEEP)
           //CONVERT  DD  *
           *03
           *14
           *25
           *36
           *47
           *58
           *69
           *70
           *81
           *92
           /*
           //

                Note:  The  F  option was used to copy the entire input file
           (rather  than  the  more  customary R option) because a key field
           must  be specified for encryption. Normally, the F option is only
           useful  when the file is sorted on the key field(s) specified. If
           the  file  is not sorted on the key field(s), and no J= parameter
           is coded, the entire file is output to SYSUT2.


                                HFSELECT EXAMPLES                   PAGE G-1


           EXAMPLE G1

           A  file  contains  a  list  of New York City residents with their
           addresses and ZIP codes. It is desired that 5 residents from each
           Manhattan  ZIP  code be selected. The ZIP code starts in position
           45  for  a length of 5. Note that all residential  Manhattan  ZIP
           codes fall in the range between 10001 and 10099.

           //STEPG1  EXEC  HFSELECT,PARM='G,J=5,5,45'
           //SYSUT1    DD  DSN=TEST.NYC.FILE,DISP=SHR
           //SYSUT2    DD  DSN=TEST.MANHTN.ZIP,DISP=SHR
           //SYSIN     DD  *
           10001
           10099
           /*


           EXAMPLE G2

           It  is  desired to select a range of cases from a file with seven
           digit  case  numbers.  The  ranges  are  cases between 0 and 500,
           between 12000 and 12050, and between 1,000,678 and 1,001,000. The
           case numbers are in the first seven bytes of the records.

           //STEPG2  EXEC HFSELECT,PARM='G,7,1'
           //ISAMFILE  DD DSN=TEST.CASES,DISP=SHR
           //SYSUT2    DD DSN=output file
           //SYSIN     DD *
           0000000
           0000500
           0012000
           0012050
           1000678
           1001000
           /*


                                HFSELECT EXAMPLES                   PAGE G-2


           EXAMPLE G3

           If  the  input file in the EXAMPLE G2 did not have leading zeroes
           in  the  case  number  field,  but  instead had leading blanks or
           leading   low-values   (HEX'00'),  the  JCL  for  that  selection
           requirement would be:

           //STEPG3  EXEC HFSELECT,PARM='G,Y=F04000,7,1'
           //ISAMFILE  DD DSN=TEST.CASES,DISP=SHR
           //SYSUT2    DD DSN=output file
           //SYSIN     DD *
           0000000
           0000500
           1000678
           1001000
           0012000
           0012050
           /*

           The  Y=F04000  parameter  equates,  for  selection  purposes, all
           blanks  (HEX'40')  and  low-values  (HEX('00') in the case number
           field  to  the  EBCDIC  representation  of an unsigned zoned zero
           (HEX'F0').  Note also that the pairs of keys in SYSIN need not be
           in order.


                                HFSELECT EXAMPLES                   PAGE G-3


           EXAMPLE G4

           Generate  a  file  of  keys  containing  all  the  values  in the
           following      ranges:      4113274-4113320,     4118121-4118126,
           4159800-4159820, 4183641-4183641.

           //STEPG4A EXEC  HFSELECT,PARM='G,7,1'
           //procstepname.SYSPRINT  DD  DSN=&&MSGS,DISP=(,PASS),
           //          SPACE=(TRK,5,RLSE),UNIT=SYSDA
           //SYSUT1    DD  DUMMY,DCB=BLKSIZE=20
           //SYSIN     DD  *
           4113274
           4113320
           4118121
           4118126
           4159800
           4159820
           4183641
           4183641
           /*
           //STEPG4B  EXEC  HFSELECT,PARM='S,K=SEL021I,7,2'
           //SYSUT1     DD  DSN=&&MSGS,DISP=(OLD,DELETE)
           //SYSUT2     DD  DSN=KEYFILE,DISP=(,KEEP),UNIT=SYSDA,
           //           SPACE=(TRK,5,RLSE)

           Note:  SYSPRINT  is normally the HFSELECT print file in which the
           keys  to be selected and the number selected, together with other
           messages,   are   printed.   The   attributes   of  SYSPRINT  are
           RECFM=FBA,LRECL=133,BLSIZE=1330. The form of the key messages are
           SEL021I  KEY=  xxxxxxx NUMBER OF RECORDS SELECTED= nnn. Since, in
           this  example,  SYSPRINT  is  defined as a disk data set, all the
           values  in the ranges listed in SYSIN will be written to the disk
           data  set  in  the  form of the above message, e.g., SEL021I KEY=
           4113274  NUMBER  OF RECORDS SELECTED= 0. The SYSPRINT data set is
           edited  in  the  second  step  of  the job (STEPG4B), using the S
           option (see section 7.14), to eliminate any records which contain
           messages  other  than SEL021I KEY= xxx. The first character is  a
           carriage control; SEL021I begins in column 2 and  the  actual key
           begins in column 15.

           Note  also that a primary input file is not necessary to generate
           these key values, and therefore SYSUT1 has been DUMMYed.


                                HFSELECT EXAMPLES                   PAGE K-1


           EXAMPLE K1

           It  is  desired  to make a test file of 30 groups of master/slave
           records  from a production file. The record keys are of length 16
           starting  in  position 1 of the variable length records. The file
           is  stored on tape.

           //STEPK1  EXEC HFSELECT,PARM='K,J=30,16,1'
           //SYSUT1    DD DSN=PROD.ABC425T1,UNIT=TAPE9,DISP=OLD,
           //             VOL=SER=010453,LABEL=(1,BLP)
           //SYSUT2    DD DSN=TEST.ABC425T1,UNIT=SYSDA,DISP=(,CATLG),
           //             SPACE=(TRK,(19,5),RLSE)

           EXAMPLE K2

           Using the SYSUT1 file from EXAMPLE M5 in section 7.9, if
                     PARM='K,B=4,E=11,1,4' is coded
           the seventh thru  the  twelfth record of SYSUT1 will be selected.


                                HFSELECT EXAMPLES                   PAGE M-1


           EXAMPLE M1

           Select from an input file all records matching keys in an ordered
           SYSIN file. The keys are in the first fifteen positions of SYSIN.
           The  record  select  fields  are  positions  1  through 10 and 22
           through  26.

           //STEPM1  EXEC  HFSELECT,PARM='M,10,1,5,22'
           //SYSUT1    DD  Ordered input file
           //SYSUT2    DD  Output file with desired records from SYSUT1
           //SYSUT3    DD  Output file with rejected records from SYSUT1
           //SYSIN     DD  Ordered key file


           EXAMPLE M2

           Select  from  an input file records that do not match the keys in
           example M1. Only the first four non-matching records for each key
           are desired. There are 20 keys in SYSIN.

           //STEPM2  EXEC  HFSELECT,PARM='MN,J=4,10,1,5,22'
           //SYSUT1    DD  Ordered input file
           //SYSUT2    DD  Output file with selected records
           //SYSIN     DD  Ordered key file

           In  this example, up to four  records  are output for each key in
           SYSIN.  After  the last key, four more records are output (if the
           end  of the input file is not reached) due to the appended key of
           HEX'FF...FF'.  A  maximum  of 84 records could be selected (4 for
           each key and four after the last key).

           EXAMPLE M3

           Select from the input file all records that do not match the keys
           in  SYSIN. The last key in SYSIN is less than the last key in the
           input  file.  Note that if HEX'FF...FF' key were not appended  to
           SYSIN, selection  would stop before the end of the input file and
           the non-matching records with keys that were higher than the last
           key in SYSIN would not be put out to SYSUT2.

           //STEPM3  EXEC  HFSELECT,PARM='MN,10,1,5,22'
           //ISAMFILE  DD  Ordered input file
           //SYSUT2    DD  Ordered sequential output file from ISAMFILE
           //SYSIN     DD  Ordered key file


                                HFSELECT EXAMPLES                   PAGE M-2


           EXAMPLE M4

           Select  from  the  primary  input file all records that match the
           secondary  file records on last name. Both files are in ascending
           order on last name. The last name field starts in position 10 for
           a  length of 25 in the primary file. It starts in position 20 for
           a length of 25 in the secondary file. In both files the last name
           is  left  justified in the fields. Also output to print all names
           from the secondary file that have a match on the primary file.

           //STEPM4  EXEC  HFSELECT,PARM='ML,V=(25,20),25,10'
           //SYSUT1    DD  Primary input file
           //SYSIN     DD  Secondary input file
           //SYSUT2    DD  Selected records from the primary file
           //SYSUT4    DD  sysout=*   Records of the secondary file
                                      that contain a last name that has a
                                      match on the primary file

           The L suboption is used since the fields to be matched are longer
           than 20 characters.


                                HFSELECT EXAMPLES                   PAGE M-3


           EXAMPLE M5

           Match  a  primary  input file against a secondary input file. The
           select  field  in  the  primary input file is in position 4 for a
           length  of  1. The select field in the secondary input file is in
           position  9  for  a length of 1. Select n records for each key in
           the secondary input file SYSIN. Note: in the JCL, n must have  an
           numerical value.

           //STEPM5 EXEC HFSELECT,PARM='M,J=n,V=(1,9),1,4'
           //* WHERE n IS CODED AS SHOWN BELOW
           //SYSUT1   DD Ordered primary input file          (S1)
           //SYSIN    DD Ordered secondary input file        (SI)
           //SYSUT2   DD Selected output file from SYSUT1    (S2)
           //SYSUT3   DD Rejected output file from SYSUT1    (S3)
           //SYSUT4   DD Selected output file from SYSIN     (S4)
           //SYSUT5   DD Rejected output file from SYSIN     (S5)

           The  outputs  of  the  primary and secondary input files, for the
           contents  of the record select fields shown below, are listed for
           various values of n and for the count default.

                  count default        n=1            n=2            n=3

           S1 SI    S2 S3 S4 S5    S2 S3 S4 S5    S2 S3 S4 S5    S2 S3 S4 S5

            1  1     1     1        1     1        1     1        1     1
            1  2     1     2           1  2        1     2        1     2
            2  3     2     3        2     3        2     3        2     3
            3  3     3        3     3     3        3     3        3        3
            3  4     3     4        3     4        3     4        3     4
            3  4     3        4        3  4        3     4        3     4
            4  4     4        4     4     4        4        4     4        4
            4  6     4     6        4     6        4     6        4     6
            4  6     4        6     4        6     4        6     4        6
            4  7     4     7           4  7        4     7        4     7
            5  8        5     8        5     8        5     8        5     8
            5  9        5  9           5  9           5  9           5  9
            6  9     6        9     6     9        6     9        6        9
            7        7              7              7              7
            7        7                 7           7              7
            7        7                 7              7           7
            9        9              9              9              9
            9        9              9              9              9
            9        9                 9           9              9


           Note  that  no  detail  messages,  KEY=nnn,  will  be  printed in
           SYSPRINT  when  the V= parameter is coded. The only message to be
           printed will be: nnn RECORDS PASSED, mmm RECORDS OUTPUT.


                                HFSELECT EXAMPLES                   PAGE M-4


           EXAMPLE M6

           Select  from  the  primary  input file all records that match the
           records  in the secondary input file on the following fields. The
           primary  file fields are 10 bytes starting in position 1, 4 bytes
           starting  in position 5, and 2 bytes starting in position 50. The
           secondary file fields are 15 bytes starting in position 150 and 1
           byte  starting  in  position  6000.  The primary file  is a fixed
           format  ISAM file  with  an LRECL of 76.  The secondary file is a
           variable format  sequential file with an LRECL of 12960.  Records
           in this file can be smaller  than  6000.  Begin  record selection
           after record 10 and end record selection after record 1000 in the
           primary input file.

           //STEPM6  EXEC HFSELECT,PARM=(M,'V=(15,150,1,6000),B=10,E=1000',
           //             10,1,4,5,2,50)
           //ISAMFILE  DD DSN=TEST.ISAM,UNIT=SYSDA,DISP=OLD,
           //             DCB=(RECFM=FB,LRECL=76,BLKSIZE=7600,DSORG=IS)
           //SYSIN     DD DSN=TEST.SEQNTL1,UNIT=T6250,DISP=OLD,
           //             DCB=(RECFM=VB,LRECL=12960,BLKSIZE=32000),
           //             VOL=SER=013456
           //SYSUT2    DD DSN=SEQNTL.OUTPUT.FROM.ISAM,DISP=(,KEEP),
           //             UNIT=T6250,DCB=DSORG=PS

           Note  that the two files are of different data set organizations,
           have  different  record  formats  and logical record lengths, and
           that  the  number  of  L,P  pairs  differs from the number of l,p
           pairs. Note also that the output file(s) are always sequential.


           EXAMPLE M7

           Select from a master file ordered on a packed decimal case number
           all records that match a  transaction  file ordered  on  a  zoned
           decimal case  number. The master file case number is 5 bytes long
           (9 digits followed by a sign half-byte)  starting  in  position 3
           and the transaction case number is a 9 byte field in position 2.

           //STEPM7  EXEC HFSELECT,PARM='M,VP=(9,2),5,3'
           //SYSUT1    DD DSN=MAST.FILE,DISP=OLD
           //SYSIN     DD DSN=TRAN.FILE,DISP=OLD
           //SYSUT2    DD DSN=MATCH.FILE,DISP=OLD

           Note: the VP parameter will ensure that the SYSIN key is a valid
           zoned numeric field and then pack it. It  will  also ensure that
           the SYSUT1 key is a valid packed numeric  field and then compare
           the keys algebraically. Note also that  the lengths  of the keys
           need not be equal.


                                HFSELECT EXAMPLES                   PAGE M-5


           EXAMPLE M8

           Match  a  transaction  file  against  a  master personnel file on
           personnel key of length 9. The key is in position 3 of the master
           file and position  5 of the transaction file.  Output the matched
           personnel records  concatenated  with  their matching transaction
           records.  The  master  file  has  a  variable  LRECL,  while  the
           transaction file has a fixed length LRECL.

           //STEPM8  EXEC HFSELECT,PARM='M,V=(9,5),9,3'
           //SYSUT1    DD Ordered sequential master file,
           //             DCB=(RECFM=VB,LRECL=604,BLKSIZE=6044)
           //SYSIN     DD Ordered sequential transaction file,
           //             DCB=(RECFM=FB,LRECL=80,BLKSIZE=8000)
           //MERGE     DD Matched master file records with
           //             matching SYSIN records concatenated,
           //             DCB=BLKSIZE=15000,SPACE=(space),etc.

           Note: only a BLKSIZE need be  specified  for  the MERGE file.  In
           this example, the RECFM defaults to VB, and the LRECL defaults to
           684.


                                HFSELECT EXAMPLES                   PAGE O-1

           EXAMPLE O1

           Select  from  an  input  file a total of 100 records that contain
           either  379 in positions 1 through 3, or JONES starting in 20 for
           a  length of 7, or SAMUEL starting in position 30 for a length of
           6.

           //STEPO1  EXEC  HFSELECT,PARM='O,J=100,3,1,7,20,6,30'
           //SYSUT1    DD  Input file
           //SYSUT2    DD  Output file of selected records
           //SYSIN     DD  *
           379
           JONES   NOTE THAT TWO BLANKS AFTER JONES ARE PART OF THE KEY
           SAMUEL
           /*


           EXAMPLE O2

           Select  from  the  input  file  all records that have either high
           values, low values, or numeric keys in positions 1 through 10  or
           have 030779 in positions 20 through 25. Output all other  records
           of SYSUT1 into SYSUT3.

           //STEPO2  EXEC  HFSELECT,PARM='O,10,1,6,20'
           //SYSUT1    DD  Input file
           //SYSUT2    DD  Selected output file
           //SYSUT3    DD  All non-selected records from SYSUT1
           //SYSIN     DD  *
           CLASS=NHL
           030779
           /*


           EXAMPLE O3

           Select from the input file 500 records that do not have the start
           date  010179  in positions 1 through 6 nor the end date 010879 in
           positions  10 through 15, nor the report date 010579 in positions
           50 through 55.

           //STEPO3  EXEC  HFSELECT,PARM='ON,J=500,6,1,6,10,6,50'
           //SYSUT1    DD  Input file
           //SYSUT2    DD  Selected output file
           //SYSIN     DD  *
           010179
           010879
           010579
           /*


                                HFSELECT EXAMPLES                   PAGE O-2


           EXAMPLE O4

           Delete from the input file all records that have B24 in positions
           1  through  3  or  'EDWARD  SMITH'  starting in position 20 for a
           length  of  12  or  '124 NORFOLK AV.' in positions 50 through 64.
           Output the rest of the file and also print the deleted records in
           HEX for inspection.

           //STEPO4  EXEC  HFSELECT,PARM='O,3,1,12,20,15,50'
           //SYSUT1    DD  Input file
           //SYSUT2    DD  SYSOUT=*,DCB=RECFM=A DELETED RECORDS IN HEX
           //SYSUT3    DD  Output file without deleted records
           //SYSIN     DD  *
           B24
           EDWARD SMITH
           124 NORFOLK AV.
           /*


                                HFSELECT EXAMPLES                   PAGE P-1


           EXAMPLE P1

           Select  from the input file all records with a start date earlier
           than  December  24,  1975 or between January 1, 1977 and June 15,
           1978 inclusive or after May 17, 1980. The start date field begins
           in position 50, has a length of 6 and is in the format mmddyy.

           //STEPP1  EXEC HFSELECT,PARM='P,2,54,2,50,2,52'
           //SYSUT1    DD Input file
           //SYSUT2    DD Selected records
           //SYSIN     DD *    KEYS WILL BE ENTERED AS yymmdd
           LOW VALUES      this pair selects  records
           751223               earlier than 12/24/75
           770101          this pair selects  records
           780615               between 1/1/77 and 6/15/78 inclusive
           800518          this record paired with an appended
           /*                   high values selects records
           //*                  later than 5/17/80


           EXAMPLE P2

           Select from the input file ten records from each of the following
           ranges   of   case   numbers:  0-100,  500-1,000,  10,000-20,000,
           21,000-23,000. The case number is a seven position numeric  field
           starting in byte 1.

           //STEPP2  EXEC HFSELECT,PARM='P,J=10,7,1'
           //SYSUT1  DD Input file
           //SYSUT2  DD Output file
           //SYSIN   DD *
           0021000
           0023000
           0000000
           0000100
           0010000
           0020000
           0000500
           0001000
           /*

           Note  that the key pairs need not be entered in range order, also
           that  the  numbers  must  be  zero-filled  so that the key is the
           length of the select field(s) specified in the PARM.

                                HFSELECT EXAMPLES                   PAGE P-2

           EXAMPLE P3

           Select from the input file 500 records that have end dates before
           January 1, 1979 or after than December 31, 1980. The end  date is
           a six position field starting in byte 45. The format is yymmdd.

           //STEPP3  EXEC HFSELECT,PARM='PN,J=500,6,45'
           //SYSUT1    DD Input file
           //SYSUT2    DD Selected records
           //SYSIN     DD *
           790101
           801231
           /*

           Note that while all the examples use numbers in SYSIN, the  keys
           are actually treated as characters, and  ranges  of names  could
           have been used just as well as ranges of dates.

           EXAMPLE P4

                Create  a file of personnel whose salaries are over $30,000.
           Encrypt  the  name, address and salary on this selected file. The
           salary  is  of  length 6 (zoned decimal) starting in position 40.
           The  name  has a length of 26 starting in position 10 and address
           has a length of 40 starting in position 60. Use RANDOM encryption
           for  name and address and the algorithm in example F7  for salary
           encryption.

           //STEPP4A EXEC HFSELECT,PARM='P,6,40'
           //SYSUT1   DD  DSN=PERSFILE,DISP=SHR
           //SYSUT2   DD  DSN=&&FILE1,UNIT=SYSDA,DISP=(,PASS),
           //         SPACE=(CYL,1)
           //SYSIN    DD  *
           30000
           //CONVERT  DD  *
           *03
           *14
           F2F5             NOTE THAT HEX AND CHARACTER CONTROL STATEMENTS
           F3F6             MAY BE MIXED IN THE CONVERT FILE
           *47
           *58
           F6F9
           F7F0
           *81
           *92
           //STEPP4B EXEC HFSELECT,PARM='FL,26,10,40,60'
           //SYSUT1   DD  DSN=&&FILE1,DISP=(OLD,DELETE)
           //SYSUT2   DD  DSN=CRYPTFLE,UNIT=T6250,DISP=(,KEEP)
           //CONVERT  DD  *
           RANDOM=PICKIT       see description of random in R option
           //

                Note:  The  first  step  of the job selects the records with
           salaries  greater  than 30000 and then encrypts the salary field.
           The  second  step  then  encrypts  the  name  and  address of the
           selected  file.  The random encryption table of step 2 is printed
           out in reverse order in SYSOUX.


                                HFSELECT EXAMPLES                   PAGE Q-1


           EXAMPLE Q1

           Test an input file for ascending sequence on case number and line
           number  within  case number. The case number starts in position 1
           for  a length of 16 and the line number starts in position 21 for
           a length of 4.

           //STEPQ1  EXEC HFSELECT,PARM='Q,16,1,4,21'
           //SYSUT1  DD  DSN=PROD.ABC425T1,UNIT=T6250,DISP=OLD,
           //        DCB=(RECFM=VB,LRECL=604,BLKSIZE=12960),
           //        VOL=SER=001265

           EXAMPLE Q2

           Test  an  input  file  for  descending order on a name field that
           starts  in position 20 for a length of 28. Output the in-sequence
           records and the out-of-sequence records. Print  messages  for the
           first 100 out-sequence records.

           //STEPQ2  EXEC HFSELECT,PARM='QNL,J=100,28,20'
           //SYSUT1    DD Input file
           //SYSUT2    DD In-sequence records from SYSUT1
           //SYSUT3    DD Out-of-sequence records from SYSUT1

           The L suboption is required because the name field is longer than
           20 bytes. The N suboption is used because a descending order test
           is required.

           EXAMPLE Q3

           Test  a tape input file for descending order on a name field that
           starts  in position 20 for a length of 28. Output the in-sequence
           records and the out-of-sequence records in ascending order.

           //STEPQ3  EXEC HFSELECT,PARM='QWL,28,20'
           //SYSUT1    DD Input file on tape
           //SYSUT2    DD In-sequence records from SYSUT1 in ascending order
           //SYSUT3    DD Out-of-sequence records from SYSUT1

           The L suboption is required because the name field is longer than
           20 bytes. Since the input file is on tape, the W suboption may be
           used  to  read  the  file  in  reverse  order,  thus  testing and
           outputting a descending ordered file in ascending order.

           EXAMPLE Q4

           Test  an  input  file  for  ascending  order.  Treat  zoned zeros
           (X'F0'),  low  values (X'00') and asterisks (X'5C') as equivalent
           characters  for  sequence  testing  purposes  and  have  them all
           collating  as  zoned  zeros. The field to be tested on is 6 bytes
           long beginning in position 70.

           //STEPQ4  EXEC  HFSELECT,PARM='Q,Y=F0005C,6,70'
           //SYSUT1    DD  Input file


                                HFSELECT EXAMPLES                   PAGE Q-2


           EXAMPLE Q5

           Sequence  test an input file for ascending order on the first two
           bytes  of the record. Output both the in-sequence records and the
           out-of-sequence records.

           //STEPQ5  EXEC  HFSELECT,PARM='Q,2,1'
           //SYSUT1    DD  Input file
           //SYSUT2    DD  Output file of in-sequence records
           //SYSUT3    DD  Output file of out-of-sequence records

           The  following list shows the outputs that would be obtained from
           the listed input file.

                input file   in-sequence  out-of-sequence
                  SYSUT1       SYSUT2        SYSUT3

                   01            01
                   02            02
                   03            03
                   05            05
                   15            15
                   25            25
                   11                          11
                   12                          12
                   17                          17
                   27            27
                   29            29


                                HFSELECT EXAMPLES                   PAGE R-1


                EXAMPLE R1

           Select  every third record from the input file starting the count
           at  the  tenth record, then every fifth record starting the count
           at  the 80th record, and every 100th record starting the count at
           the  4000th  record.  Select  a  total  of  20  records  for each
           interval.

           //STEPR1  EXEC  HFSELECT,PARM='R,J=20,10,3,80,5,4000,100'
           //SYSUT1    DD  Input file
           //SYSUT2    DD  Selected records output file

           Records selected; 12,15,18,...,84,89,94,...,4099,4199,4299,...


           EXAMPLE R2

           Select  every  third  record  from  the  input  file starting the
           selection  at  the tenth record, then every fifth record starting
           selection  at  the  80th  record, and every 100th record starting
           selection  at the 4000th record. Select a total of 20 records for
           each interval.

           //STEPR2  EXEC  HFSELECT,PARM='R,J=20,8,3,76,5,3901,100'
           //SYSUT1    DD  Input file
           //SYSUT2    DD  Selected records output file

           Since  the  tenth record is desired, the start of the first count
           must be 8. For the 80th record, the start of the count must be 76
           and for the 4000 record the start must me 3901.

           Records selected: 10,13,16,...,80,85,90,...,4000,4100,4200,...


                                HFSELECT EXAMPLES                   PAGE R-2


           EXAMPLE R3

           Delete from the input file the records listed in SYSIN.  Copy the
           non-deleted  records  to  tape.  Print out the deleted records in
           HEX format. Start the selection at the 10th record.

           //STEPR3  EXEC  HFSELECT,PARM='R,B=9'
           //SYSUT1    DD  Input file
           //SYSUT2    DD  SYSOUT=*,DCB=RECFM=A  Deleted records in HEX
           //SYSUT3    DD  Non-deleted records in file (between 10 and 1000)
           //SYSIN     DD  *,DCB=BLKSIZE=80
           1     invalid number  < (B+1)          record not selected
           25      valid number                    record 25 selected
           0045    valid number                    record 45 selected
           467     valid number                   record 467 selected
           321   invalid number (out of sequence) record not selected
           45R   invalid number (not numeric)     record not selected
           475 9   valid number (9 ignored)       record 475 selected
           475     valid number (duplicate number)record was selected
           LAST    to select the last record in the file
           /*

           EXAMPLE R4

           Copy an input file from tape to disk.

           //STEPR4   EXEC  HFSELECT,PARM='R,1,1'
           //*STEPR4  EXEC  HFSELECT
           //SYSUT1     DD  DSN=INPUT.FILE,UNIT=T1600,DISP=OLD,
           //         VOL=SER=005645
           //SYSUT2     DD  DSN=OUTPUT.FILE,UNIT=SYSDA,DISP=(NEW,KEEP),
           //         SPACE=(CYL,(2,1),RLSE)
           //*  THE DCB WILL BE COPIED FROM THE INPUT FILE

           The 1,1 coded in the N,K pair indicates that the selection should
           be  every  single  record  starting  from the first record in the
           file. The commented EXEC statement is the same, since 'R,1,1'  is
           the default PARM.


           EXAMPLE R5

           Select 2000 records at random from a file of 100,000 records.

           //STEPR5  EXEC HFSELECT,PARM='R,J=2000,E=100000'
           //SYSUT1     DD Input file
           //SYSUT2     DD Output file of approximately 2000 records
           //SYSIN      DD *
           RANDOM
           /*

           The  seed  used  is  the  default  seed, 8193. The first 5 random
           records selected are: 46,235,414,438 and 464.


                                HFSELECT EXAMPLES                   PAGE R-3


           EXAMPLE R6

           Select 2000 records at random from a file of 100,000 records. Use
           a  seed  of 12479 to select different records from those selected
           in EXAMPLE R5.

           //STEPR6  EXEC HFSELECT,PARM='R,J=2000,E=100000'
           //SYSUT1     DD Input file
           //SYSUT2     DD Output file of approximately 2000 records
           //SYSIN      DD *
           RANDOM=12479
           /*

           The first 5 random records selected are: 30,57,59,64 and 74.


           EXAMPLE R7

           Delete every third record from an input file.

           //STEPR7  EXEC HFSELECT,PARM='RN,1,3'
           //SYSUT1    DD Input file
           //SYSUT2    DD Output file with every third record deleted
           //SYSUT3    DD Every deleted third record

           The first 10 records selected are: 1,2,4,5,7,8,10,11,13 and 14.


           EXAMPLE R8

           Convert an ISAM/VSAM/Partitioned file to a sequential file with
           the same data set attributes.

           //STEPR8  EXEC  HFSELECT,PARM='R,1,1'
           //inddnam   DD  DSN=INPUT,DISP=OLD,UNIT=SYSDA
           //SYSUT2    DD  DSN=OUTPUT.SEQU,UNIT=T6250,DISP=(,KEEP)

           Note: if the input is an ISAM file inddnam  should  be  coded  as
           ISAMFILE. If the input is a VSAM file  inddnam  may  be  coded as
           VSAMFILE (a STEPCAT DD statement  may also  be  needed).  If  the
           input is a partitioned  data  set  (library)  inddnam  should  be
           coded as LIBFILE. See section 6.3  for  more detailed information
           on the use of these ddnames. See section 6.8 for more information
           on the attributes of SYSUT2 when the input file is VSAM.


                                HFSELECT EXAMPLES                   PAGE R-4


           EXAMPLE R9

           Create  a  test file by selecting the last 50 records from a VSAM
           file.

           //STEPR9  EXEC  HFSELECT,PARM='RW,J=50,1,1'
           //VSAMFILE  DD  Input VSAM file
           //SYSUT2    DD  Selected records

           Because the W suboption opens the input file backwards the output
           file,  SYSUT2,  will  contain the last 50 records file in reverse
           order.


           EXAMPLE R10

           Count the number of records in a file.

           //STEPR10  EXEC  HFSELECT,PARM='R,1,1'
           //SYSUT1     DD  Input file


           EXAMPLE R11

           Generate (print) a table of 10000 random numbers, in the range of
           1 to 99.

           //STEPR11  EXEC  HFSELECT,PARM='R,E=99,J=10000'
           //SYSIN      DD  *
           RANDOM=PICKIT    a randomly chosen seed is requested
           /*
           //EXITS      DD  *
           X0
            NOINPUT
            RANDOMCNT=10000
           /*

           Note:  The  10000  random  numbers  will print on the SYSOUX file
           which is coded in the HFSELECT PROC as SYSOUT=*.  Note  also that
           no  primary  input  file  is  necessary  since  a NOINPUT control
           statement was  coded  in  the  X0 initialization exit. Since more
           than  the  default  maximum of 5000  random numbers was required,
           the RANDOMCNT control statement was also necessary in the X0 exit
           (see Appendix D.2.5 and D.2.6 for details.)


                                HFSELECT EXAMPLES                   PAGE R-5


           EXAMPLE R12

           Copy all members of a PDS whose names begin with IEB to an output
           PDS. Also copy members ALPHA1 and SORTX.

           //STEPR12  EXEC  HFSELECT
           //LIBFILE    DD  DSN=INPDS,DISP=SHR
           //LIBOUT     DD  DSN=OUTPDS,DISP=SHR
           //MEMSYSIN   DD  *
           ALPHA1
           IEB*
           SORTX
           /*

           Note:  If no MEMSYSIN had been coded,  all members  of the input
           PDS would be copied to the output PDS.  Also,  since  no PARM is
           coded, the default  PARM='R,1,1'  is used.  Member names must be
           specified in ascending sequence.

           EXAMPLE R13

           Convert a sequential/ISAM file to a VSAM file.

           //STEPR13 EXEC  HFSELECT,PARM='R,1,1'
           //inddnam   DD  DSN=INPUT,DISP=OLD,UNIT=SYSDA
           //VSAMOUT   DD  DSN=OUTPUT.VSAM,DISP=SHR

           Note: If the input is a sequential file, inddnam should be coded
           as SYSUT1. If the input is an ISAM file, inddnam should be coded
           as ISAMFILE. The input files must be  in  sorted  order  on  the
           predefined VSAMOUT key.


           EXAMPLE R14

           Print out the first and last record of a file.

           //STEPR14  EXEC  HFSELECT,PARM='R'
           //SYSUT1     DD  Input file
           //SYSUT2     DD  SYSOUT=*
           //SYSIN      DD  *
           1
           LAST
           /*


                                HFSELECT EXAMPLES                   PAGE S-1


              EXAMPLE S1

              Select  100 records from an input file beginning from the 50th
              record  of  the file, with budget code numbers not equal to 0.
              The  budget  code  is a 4-byte zoned numeric field starting in
              byte 21.

              //STEPS1  EXEC  HFSELECT,PARM='SN,N=0,J=100,B=49,4,21'
              //SYSUT1    DD  Input file
              //SYSUT2    DD  Selected records


              EXAMPLE S2

              Select all records from a personnel file with an employee code
              of A, B, Q, S or V. The employee code is in byte 105. The file
              is a VSAM file whose key is employee code. Create a VSAM  file
              of the output records.

              //STEPS2  EXEC  HFSELECT,PARM='S,K=A,Y=C1C2D8E2E5,1,105'
              //STEPCAT   DD  DSN=CATALOG,DISP=SHR
              //VSAMKEY   DD  DSN=VSAM.FILE,DISP=SHR
              //VSAMOUT   DD  DSN=VSAMOUT.FILE,DISP=SHR

              Note: the Y= equate symbol parameter equates A, B, Q, S and V.
              Hence, by  coding  the  key K=A, i.e., specifying that records
              with  an  employee  code of A are to be selected, records with
              any of the desired employee codes will be selected.


              EXAMPLE S3

              Select  all  records from a personnel file with non-alphabetic
              employee  codes. End selection processing after record 10,000.
              The employee code is a 1-byte field in position 105. Print all
              the rejected records in hex format.

              //STEPS3  EXEC  HFSELECT,PARM='SN,C=A,E=10000,1,105'
              //SYSUT1    DD  Input file
              //SYSUT2    DD  Selected records
              //SYSUT3    DD  SYSOUT=*,DCB=RECFM=A


                                HFSELECT EXAMPLES                   PAGE S-2


              EXAMPLE S4

              Select  all records from a welfare case history file where the
              number of children in a family between the ages of 0 and 5, 10
              and  15,  and  over  16 are all zero. The three fields are all
              2-byte  binary  fields  and  begin  in  bytes  20,  25  and 30
              respectively.

              //STEPS4  EXEC  HFSELECT,PARM='S,C=L,2,20,2,25,2,30'
              //SYSUT1    DD  Input file
              //SYSUT2    DD  Selected records

              Note: C=L denotes a key of low values which is binary zeros.


              EXAMPLE S5

              A  sequential  master  file  was created with a last record of
              high  values in its first 20 bytes to indicate end-of-file. It
              is  now  desired  to  add more records to this master file and
              hence  as  a  first step to remove the high values record. The
              JCL required is:

              //STEPS5  EXEC  HFSELECT,PARM='S,C=H,20,1'
              //SYSUT1    DD  Input master file
              //SYSUT3    DD  master file with high values record deleted


              EXAMPLE S6

              Count  all records in a personnel file that have an M sex code
              (male) and a D employment code (temporarily disabled). The sex
              code is in byte 80 and the employment code is in byte 335.

              //STEPS6  EXEC  HFSELECT,PARM='S,K=MD,1,80,1,335'
              //SYSUT1    DD  Input file

              Note:  no  output  files  will  be  created;  only  statistics
              indicating  the  number  of  records  satisfying the selection
              criteria will be generated.


                                HFSELECT EXAMPLES                   PAGE S-3


              EXAMPLE S7

              Select  from  a welfare file all clients whose rent is $150.50
              per  month. The rent field is a 4-byte field beginning in byte
              30.

              If the rent field is binary:

              //STEPS7A  EXEC  HFSELECT,PARM='S,X=00003ACA,4,30'
              //SYSUT1     DD  Input file
              //SYSUT2     DD  Selected records

              Note: 00003ACA is the hexadecimal equivalent of 15050.

              If the rent field is packed:

              //STEPS7A  EXEC  HFSELECT,PARM='S,P=+15050,4,30'
              //SYSUT1     DD  Input file
              //SYSUT2     DD  Selected records

              Note:  the  +  in  P=+15050  is  not  necessary since + is the
              default.

              EXAMPLE S8

              Select  from  a welfare file all clients whose rent is greater
              than $150.50 per  month. The rent field  is  a  4-byte  packed
              field beginning in byte 30.

              //STEPS8   EXEC  HFSELECT,PARM='S,P=>15050,4,30'
              //SYSUT1     DD  Input file
              //SYSUT2     DD  Selected records

              EXAMPLE S9

              It is necessary to staff a project with 5 people  who  satisfy
              the following criteria: they must be managers,  have  computer
              skills, know the COBOL language, and speak Spanish.  To choose
              these people, four fields in an employee file must be searched
              for specific values:

                 TITLE field    - length of 1 in position 10, value M,
                 SKILL field    - length of 2 in position 20, value 'C ',
                 SOFTWARE field - length of 3 in position 25, value COB,
                 LANGUAGE field - length of 1 in position 45, value S.

              Four selection fields have been specified but only 3 L,P pairs
              may be coded in the HFSELECT PARM. An input  record processing
              exit may be written so that at least two fields are contiguous
              prior to HFSELECT processing of the  record.  In this example,
              all four fields will be made contiguous in the last 7 bytes of
              the record and only one L,P pair  need  be  coded.  The  input
              record processing exit may be written in COBOL as follows:


                                HFSELECT EXAMPLES                   PAGE S-4


           ID DIVISION.
           PROGRAM-ID. REFORMAT.
           ENVIRONMENT DIVISION.
           DATA DIVISION.
           LINKAGE SECTION.
           01  INPUT-RECORD.
               05  FILLER            PIC X(09).
               05  TITLE-FIELD       PIC X(01).
               05  FILLER            PIC X(09).
               05  SKILL-FIELD       PIC X(02).
               05  FILLER            PIC X(03).
               05  SOFTWARE-FIELD    PIC X(02).
               05  FILLER            PIC X(18).
               05  LANGUAGE-FIELD    PIC X(01).
               05  FILLER            PIC X(28)
               05  CONTIG-FIELD.
                   10 CONTIG-TITLE   PIC X(01).
                   10 CONTIG-SKILL   PIC X(02).
                   10 CONTIG-SOFTW   PIC X(03).
                   10 CONTIG-LANG    PIC X(01).
           PROCEDURE DIVISION USING INPUT-RECORD.
               MOVE TITLE-FIELD     TO CONTIG-TITLE.
               MOVE SKILL-FIELD     TO CONTIG-SKILL.
               MOVE SOFTWARE-FIELD  TO CONTIG-SOFTW.
               MOVE LANGUAGE-FIELD  TO CONTIG-LANG.
               MOVE 0 TO RETURN-CODE.
               GOBACK.

               The above COBOL program is then compiled and link-edited into
               a load library, EXIT.LOADLIB, with the member name  REFORMAT.
               The following JCL will then perform the requested  selection,
               with the selected records printed in HEX format.

              //STEPS9  EXEC  HFSELECT,PARM='S,K=MC COBS,J=5,7,74'
              //SYSUT1    DD  input file
              //SYSUT2    DD  SYSOUT=*
              //EXITMOD   DD  DSN=EXIT.LOADLIB,DISP=SHR
              //EXITS     DD  *
              I1=REFORMAT,EXITMOD
              X0
               FORMAT=HEX
              //

              The S option key is now coded as a single L,P pair with length
              seven in position 74. Refer to Appendix  D  for  a explanation
              of the EXITS and EXITMOD DD statements  and  for  the  control
              statements contained in the EXITS file.


                                HFSELECT EXAMPLES                   PAGE T-1


           EXAMPLE T1

           Select  5  records  for each of the following Manhattan zip codes
           from a Manhattan address file: 10023, 10010, 10033, 10099, 10072,
           10053. The zip code starts in byte 51.

           //STEPT1  EXEC  HFSELECT,PARM='T,J=5,5,51'
           //SYSUT1    DD  Input file
           //SYSUT2    DD  Selected records
           //SYSIN     DD  *
           10023
           10010
           10033
           10099
           10072
           10053
           /*

           Note  that  neither  the  input  file nor the key file need be in
           sequence.

           EXAMPLE T2

           Select all records from a personnel file that have a D employment
           code (temporary disabled) AND an R status code (regular) AND an O
           salary  code  (overtime  allowed)  OR  have  an O employment code
           (on-leave)  AND a P status code (provisional) AND a C salary code
           (compensatory-time   allowed)   OR  have  an  H  employment  code
           (half-time) AND a C status code (consultant) AND an N salary code
           (no overtime). The three  fields  are located in bytes 23, 77 and
           91 respectively.

           //STEPT2  EXEC  HFSELECT,PARM='T,1,23,1,77,1,91'
           //SYSUT1    DD  Input file
           //SYSUT2    DD  Selected records
           //SYSIN     DD  *
           DRO
           OPC
           HCN
           /*


                                HFSELECT EXAMPLES                   PAGE T-2


           EXAMPLE T3

           Select 10,000 records, from a Manhattan address file, that do not
           contain  the  zip  codes  10011,  10017,  10027, 10039, 10045 and
           10068. The zip code starts in byte 51.

           //STEPT3  EXEC  HFSELECT,PARM='TN,J=10000,5,51'
           //SYSUT1    DD  Input file
           //SYSUT2    DD  Selected records
           //SYSIN     DD  *
           10011
           10017
           10027
           10039
           10045
           10068
           /*

           EXAMPLE T4

           A   5000-record   disk   file  contains  validation  information,
           including  valid 25-byte budget line codes which start in byte 10
           of the record, against which a transaction file is to be matched.
           Those  transaction records with valid budget line codes are to be
           selected, with  all  others  to  be put out to a reject file. The
           budget  line  codes  in  the  transaction  file start in byte 21.
           Neither file is necessarily sorted by budget line code.

           //STEPT4  EXEC  HFSELECT,PARM='TL,V=(25,10),25,21'
           //SYSUT1    DD  transaction file
           //SYSIN     DD  5000 record disk file
           //SYSUT2    DD  Selected records from the transaction file
           //SYSUT3    DD  Rejected records from the transaction file
           //EXITS     DD  *
           X0
            TABLESIZE=145000
           //

           The V=(25,10)  parameter gives the length and position of the key
           in the SYSIN file.
           Since the number of keys in the SYSIN file  exceeds  the  default
           maximum  (24000 / (25 + 4) = 827)  the  TABLESIZE  initialization
           control statement in the X0 exit must be used. See section  D.2.4
           for details.


                                HFSELECT EXAMPLES                   PAGE V-1


           EXAMPLE V1

           Create a file of all data set names belonging to USER01 on volume
           APPLDA.

           //STEPV1  EXEC HFSELECT,PARM='V'
           //VREPORT1  DD DSN=USER01.DATALIST,DISP=(,CATLG),UNIT=SYSDA,
           //             SPACE=(TRK,(1,1)),DCB=BLKSIZE=23400
           //VSYSIN    DD *
           VOL=APPLDA
           USER01.*
           /*

           VREPORT1  will  contain  one  record  for each data set on APPLDA
           whose high order qualifier is USER01.

           EXAMPLE V2

           List  all  userid.SOURCE.COBOL  data  sets  on volumes VOL001 and
           VOL002.

           //STEPV2  EXEC HFSELECT,PARM='V'
           //VREPORT1  DD SYSOUT=*,DCB=BLKSIZE=8000
           //VSYSIN    DD *
           VOL=VOL001,VOL002
           %SOURCE.COBOL
           /*

           Note  that  the  percent  sign  is a wild card that automatically
           matches all high order qualifiers.

           EXAMPLE V3

           Create a member list from PDSs USER01.PROCLIB  and USER02.PROCLIB
           of all members created after January, 1986 on volume MYVOL1.

           //STEPV3  EXEC HFSELECT,PARM='V,N=>86032,5,64'
           //VREPORT1  DD SYSOUT=*,DCB=BLKSIZE=100
           //VSYSIN    DD *
           VOL=MYVOL1
           USER01.PROCLIB(*)
           USER02.PROCLIB(*)
           /*

           Note  that  an  asterisk in the first position of the member name
           requests  all  members  of the library. The creation date is a  5
           byte numeric field starting in position 64 of the output record.


                                HFSELECT EXAMPLES                   PAGE V-2


           EXAMPLE V4

           Create  a  file  with  the names of all data sets with the prefix
           USERxx on all work volumes WORKnn.

           //STEPV4  EXEC HFSELECT,PARM='V'
           //VREPORT1  DD DSN=USER01.DATALIST,DISP=(,CATLG),UNIT=SYSDA,
           //             SPACE=(TRK,(5,1)),
           //             DCB=BLKSIZE=3200
           //VSYSIN    DD *
           VOL=WORK*
           USER++.*
           /*

           EXAMPLE V5

           Create  a  file  with  the  first 100 names of data sets with the
           prefix  USERxx and the  first  100  names  of  data  sets  having
           the character string SOURCE anywhere in their dsn on all volumes.

           //STEPV5  EXEC HFSELECT,PARM='V,J=100'
           //VREPORT1  DD DSN=USER01.DATALIST,DISP=(,CATLG),UNIT=SYSDA,
           //             SPACE=(TRK,(5,1)),
           //             DCB=BLKSIZE=3200
           //VSYSIN    DD *
           VOL=*
           USER++.*
           !SOURCE!
           /*

           Note that the J=100 means that up to 100 names will be output for
           each  dsn VSYSIN record. VOL=* requests a search of every on-line
           DASD   volume.  The  output  file  will  not  necessarily  be  in
           alphabetical order by dsn.

           EXAMPLE V6

           Create  a file containing every member name of every PDS on every
           volume,  and  also  with  every  data  set  name on every volume.
           Suppress printing the catalog indicator to improve performance.

           //STEPV6  EXEC HFSELECT,PARM=V
           //VREPORT1  DD DSN=USER01.DATALIST,DISP=(,CATLG),UNIT=SYSDA,
           //             SPACE=(CYL,(50,10),RLSE),
           //             DCB=BLKSIZE=23400
           //VSYSIN    DD *
           VOL=*
           *(*)
           *
           /*
           //EXITS    DD *
           X0
            NOCATCK
           //


                                HFSELECT EXAMPLES                   PAGE V-3


           EXAMPLE V7

           Create a file containing names of members of PDS TEST.LOADLIB, on
           volume TEST01, that have aliases.

           //STEPV7  EXEC HFSELECT,PARM='V,K=1,1,59'
           //VREPORT1  DD DSN=SELECT,DISP=(,KEEP),UNIT=SYSDA,
           //             SPACE=(CYL,(5,1),RLSE),
           //             DCB=BLKSIZE=19000
           //VREPORT2  DD DSN=REJECT,DISP=(,KEEP),UNIT=SYSDA,
           //             SPACE=(CYL,(5,1),RLSE),
           //             DCB=BLKSIZE=19000
           //VSYSIN    DD *
           VOL=TEST01
           TEST.LOADLIB(*)
           /*
           //

           This job first creates the record in the  output format for  each
           dsn that satisfies the criteria in VSYSIN. It outputs this record
           to VREPORT1 if it meets the key criteria in the  PARM and outputs
           the rejected records to VREPORT2. Note that an alias is indicated
           by a 1 in position 59 of the created record.

                            V OPTION - Catalog search EXAMPLES

           EXAMPLE V8

           Create  a  file  containing names of all catalogued datasets with
           the prefix  USER001  and  all cataloged production datasets whose
           second order qualifier is 8 characters beginning with HFS.

           //STEPV8  EXEC HFSELECT,PARM='V'
           //VREPORT1  DD DSN=SELECT,DISP=(,KEEP),UNIT=SYSDA,
           //             SPACE=(CYL,(5,1),RLSE),
           //             DCB=BLKSIZE=19000
           //VSYSIN    DD *
           USER001.*
           PROD.HFS+++++.*
           /*
           //


                                HFSELECT EXAMPLES                   PAGE V-4


           EXAMPLE V9

           List all statements containing UNIT=3350 in   procedure libraries
           with the format xxx.PROCLIB.  Precede  each  print group with its
           PDS library name.

           //STEPV9  EXEC HFSELECT,PARM='V',REGION=3000K
           //VREPORT1  DD SYSOUT=*,DCB=BLKSIZE=100
           //VSYSIN    DD *
           'E,4,71'      this is the sub-task parm field
           VOL=*
           %PROCLIB
           /*
           //SYSIN    DD *
           XUNIT=3350X
           //

           EXAMPLE V10

           List the first statement with the ddname  SORTOUT,  together with
           the 4 records following the  statement in all members of all proc
           libraries xxx.PROCLIB in the system.  Break on member name.

           //STEPV10 EXEC HFSELECT,PARM='V',REGION=3000K
           //VSYSIN    DD *
           'D,K=SORTOUT,J=+4,7,3'
           VOL=*
           %PROCLIB(*)
           /*


           EXAMPLE V11

           Find and print out all members MYMEMB  and YOURMEMB in all of  my
           libraries on VOL001 and VOL002.

           //STEPV11 EXEC HFSELECT,PARM='V',REGION=3000K
           //VREPORT1  DD SYSOUT=*,DCB=BLKSIZE=100
           //VSYSIN    DD *
           'R,1,1'
           VOL=VOL001,VOL002
           MYUSERID.*
           /*
           //MEMSYSIN  DD *
           MYMEMB
           YOURMEMB
           /*


                                HFSELECT EXAMPLES                   PAGE V-5


           EXAMPLE V12

           Find and print out all members MYMEMB  and YOURMEMB in all of  my
           catalogued libraries.

           //STEPV12 EXEC HFSELECT,PARM='V',REGION=3000K
           //VREPORT1  DD SYSOUT=*,DCB=BLKSIZE=100
           //VSYSIN    DD *
           'R,1,1'
           MYUSERID.*
           /*
           //MEMSYSIN  DD *
           MYMEMB
           YOURMEMB
           /*

           EXAMPLE V13

           Create  a  data  set  containing the  first three records of each
           member of a catalogued library.

           //STEPV13 EXEC HFSELECT,PARM='V',REGION=3000K
           //VREPORT1  DD SYSOUT=*,DCB=BLKSIZE=100
           //SYSUT2    DD DSN=MYUSERID.JOBCARDS,DISP=MOD
           //VSYSIN    DD *
           'R,J=3,1,1'
           MYUSERID.PDS(*)
           //

           NOTE:  VREPORT1 will contain the output  from the  V option  main
           task only. The  SYSUT2 DD data set will contain the output of the
           attached subtasks; the first three records of each member of  the
           PDS.  DISP=MOD  must  be  coded  on the SYSUT2 DD as each subtask
           reopens the data set.

           EXAMPLE V14

           Copy  all  non-VSAM  data  sets  on  DASD volume IBM100 to volume
           IBM200.

           //STEP14  EXEC HFSELECT,PARM=V,REGION=3000K
           //SYSPRINT  DD SYSOUT=*
           //DISK      DD UNIT=SYSDA,DISP=SHR,VOL=SER=IBM200
           //VREPORT1  DD SYSOUT=*,DCB=BLKSIZE=100
           //VSYSIN  DD  *
           ''
           VOL=IBM100
           *
           /*

           Note: The  data sets will be created and copied on volume IBM200.
                 They  will  have  the same DSNs and  formats  as  those  on
                 volume  IBM100.   DSNs  already existing on IBM200 will not
                 be overlaid. The output data sets will not be catalogued.


                                HFSELECT EXAMPLES                   PAGE V-6


           EXAMPLE V15

           Copy all non-VSAM data sets  on DASD volume  IBM100 that have the
           prefix USERID1 and a second qualifier  beginning with S to volume
           IBM200.  None of the PDSs have more than 50 members.  Catalog the
           newly created data sets and uncatalog the old.

           //STEP14  EXEC HFSELECT,PARM=V,REGION=3000K
           //SYSPRINT  DD SYSOUT=*
           //DISK      DD UNIT=SYSDA,DISP=SHR,VOL=SER=IBM200
           //VREPORT1  DD SYSOUT=*,DCB=BLKSIZE=100
           //EXITS  DD  *
           X0
            VDIRBLKS=10
            RECAT
           /*
           //VSYSIN  DD  *
           ''
           VOL=IBM100
           USERID1.S*
           /*

           Note: Since the PDSs copied have less than 50 members an exit has
                 been  coded  that  reduces  the default number of directory
                 blocks (100) to 10. RECAT causes the required cataloging.


           EXAMPLE V16

           Compress all catalogued PDSs with prefixes USERID1, USERID2,  and
           USERID3.

           //STEP1   EXEC HFSELECT,PARM='V,K=P,1,59',REGION=3000K
           //SYSPRINT  DD SYSOUT=*
           //SYSPRIN2  DD SYSOUT=*
           //VREPORT1  DD SYSOUT=*,DCB=BLKSIZE=100
           //VSYSIN  DD  *
           ''/IEBCOPY
           USERID1.*
           USERID2.*
           USERID3.*
           /*
           //SYSIN  DD  *
            COPY I=LIBFILE,O=LIBFILE
           /*

           Note: This example calls the IBM Utility Program IEBCOPY for  the
                 attached  subtasks.  SYSPRIN2   will  contain  the  IEBCOPY
                 messages. Note that  each  PDS selected is allocated by the
                 primary task to a DDname LIBFILE.


                                HFSELECT EXAMPLES                   PAGE V-7

           EXAMPLE V17

           Copy  the  first  six data sets on volume DISK01 whose high order
           qualifiers begin  with  USER  and  whose LRECL=80, whether PDS or
           Sequential.

           //STEP1   EXEC HFSELECT,PARM='V,N=80,J=6,5,63',REGION=3000K
           //SYSPRINT  DD SYSOUT=*
           //VREPORT1  DD SYSOUT=*,DCB=BLKSIZE=100
           //LIBV0001  DD DSN=USER001.PDS,DISP=SHR
           //LIBV0002  DD DSN=USER002.PDS,DISP=SHR
           //LIBV0003  DD DSN=USER003.PDS,DISP=SHR
           //LIBV0004  DD DSN=USER004.PDS,DISP=SHR
           //LIBV0005  DD DSN=USER005.PDS,DISP=SHR
           //LIBV0006  DD DSN=USER006.PDS,DISP=SHR
           //SYSV0001  DD DSN=USER001.SEQ,DISP=SHR
           //SYSV0002  DD DSN=USER002.SEQ,DISP=SHR
           //SYSV0003  DD DSN=USER003.SEQ,DISP=SHR
           //SYSV0004  DD DSN=USER004.SEQ,DISP=SHR
           //SYSV0005  DD DSN=USER005.SEQ,DISP=SHR
           //SYSV0006  DD DSN=USER006.SEQ,DISP=SHR
           //SYSIN  DD  DUMMY
           //VSYSIN  DD  *
           ''
           VOL=DISK01
           USER*
           /*
           //

           EXAMPLE V18

           Copy  all  catalogued  PDSs  with  prefixes USERID1, USERID2, and
           USERID3 to volume IBM200 using the IBM utility IEBCOPY.

           //STEP1   EXEC HFSELECT,PARM='V,K=P,1,59',REGION=3000K
           //SYSPRINT  DD SYSOUT=*
           //VREPORT1  DD SYSOUT=*,DCB=BLKSIZE=100
           //DISK      DD UNIT=SYSDA,DISP=SHR,VOL=SER=IBM200
           //VSYSIN  DD  *
           ''/IEBCOPY
           USERID1.*
           USERID2.*
           USERID3.*
           /*
           //SYSIN  DD  *
            COPY I=LIBFILE,O=LIBV0000
           /*

           Note: This example calls the IBM Utility Program IEBCOPY  for the
                 attached  subtasks.  SYSPRIN2 will be dynamically allocated
                 and  will  contain the IEBCOPY messages. Note that each PDS
                 selected  is  allocated  by  the  primary  task to a DDname
                 LIBFILE and the output PDS are allocated to the DDname
                 LIBV0000.


                                HFSELECT EXAMPLES                 PAGE TSO-1

           In the  following examples it is assumed that the CLIST described
           in the HFSELECT REFERENCE GUIDE, Appendix C, is in member  SELECT
           of the PDS USER.CLIST and that the program load module resides in
           the library LOADLIB under the name HFSELECT. It is  also  assumed
           that the PARM field prompt Ý14¨ is  ENTER  PARM FIELD,  that  the
           DISPositions of all the output data sets  are coded  OLD and that
           the library USER.CLIST has been ALLOCated to the ddname SYSPROC.

           EXAMPLE TSO1

           Copy  every  tenth  record  from  the  ISAM  file ALLCASES to the
           sequential disk file userid.TESTCASE.

            SELECT   INPUTDSN('''ALLCASES''')       +
                     SYSUT2(TESTCASE),INPUTYPE(ISAMFILE)

           When  the  prompt  ENTER  PARM  FIELD  appears on the screen type
           'R,1,10' and press the ENTER key.


           EXAMPLE TSO2

           Perform EXAMPLE M5 using TSO, with n=10

                SELECT   INPUTDSN('''ALLCASES''')        +
                         SYSUT2('''SELECTED.OUTPUT.RECORDS''')    +
                         SYSUT3('''REJECTED.OUTPUT.RECORDS''')    +
                         SYSUT4('''SYSIN.MATCHED.RECORDS''')      +
                         SYSUT5('''SYSIN.NOTMTCHD.RECORDS''')     +
                         SYSIN('''INPUT2.FILE''')

           When    ENTER   PARM   FIELD   appears   on   the   screen   type
           'M,V=(1,9),J=10,1,4' and press the ENTER key.


                                HFSELECT EXAMPLES                 PAGE   X-1

           EXAMPLE X1

                Following is the additional JCL for HFSELECT to invoke
           record processing input and output exits:

                            //EXITS    DD *
                            O1=EXITSEL1,LOADLIB1
                            O3=EXITSEL3,LOADLIB1
                            O2=EXITSEL1
                            OM=EXITM,LOADLIB4
                            O4=EXITSEL4,LOADLIB4
                            I1=EXITSEL0
                            //LOADLIB1 DD DSN=loadlib1,DISP=SHR
                            //LOADLIB4 DD DSN=loadlib4,DISP=SHR

           EXAMPLE X2

                The following is an example  of  a COBOL exit program with a
           fixed length record file.

           ID DIVISION.
           PROGRAM-ID. EXITESTC.
           ENVIRONMENT DIVISION.
           DATA DIVISION.
           LINKAGE SECTION.
           01  SELECTED-RECORD.
               05  FIRST-FOUR-BYTES  PIC X(4).
               05  NEXT-FOUR-BYTES   PIC X(4).
               05  FILLER            PIC X(72).
           PROCEDURE DIVISION USING SELECTED-RECORD.
               MOVE NEXT-FOUR-BYTES TO FIRST-FOUR-BYTES.
               MOVE 0 TO RETURN-CODE.
               GOBACK.


                                HFSELECT EXAMPLES                 PAGE   X-2

           EXAMPLE X3

                The  following  is an example of a COBOL output exit program
           processing  a  variable  length record.  This program removes the
           last four bytes from the record, by reducing the binary RDW by 4.
           The record length is thus  changed from 84 to 80. Any record that
           has less than 5 data bytes (9 bytes including  RDW)  is  deleted.
           Note that the LRECL defined in the JCL need not be changed.

           ID DIVISION.
           PROGRAM-ID. EXITESTV.
           ENVIRONMENT DIVISION.
           DATA DIVISION.
           LINKAGE SECTION.
           01  SELECTED-RECORD.
               05  RECORD-RDW         PIC 9(4)  COMP.
               05  FILLER-REST-OF-RDW PIC X(2).
               05  FILLER             PIC X(76).
               05  LAST-FOUR-BYTES    PIC X(4).
           PROCEDURE DIVISION USING SELECTED-RECORD.
               IF RECORD-RDW LESS THAN 9
                  MOVE 4 TO RETURN-CODE
                  ELSE
                    SUBTRACT 4 FROM RECORD-RDW
                    MOVE 0 TO RETURN-CODE.
               GOBACK.

           EXAMPLE X4

                The following is an example of an ASSEMBLER exit program.
           This program copies bytes 3 and 4 of each record into positions 1
           and 2.

           EXITEST  CSECT
                    USING *,12          ASSIGN BASE REGISTER
                    STM   14,12,12(13)  SAVE REGISTERS
                    LR    12,15         LOAD BASE REGISTER
                    ST    13,SAVEAREA+4 *
                    LR    11,13         *
                    LA    13,SAVEAREA   * SAVE AREA CHAINING
                    ST    13,8(11)      *
                    L     1,0(1)
                    LR    3,1           RECORD ADDR
                    MVC   0(2,3),2(3)   MOVE BYTES 3 AND 4 TO POS. 1 AND 2
                    L     13,SAVEAREA+4 RESTORE R13
                    RETURN (14,12),RC=0 RELOAD REGS AND RETURN TO HFSELECT
           SAVEAREA DS    18F
                    END
