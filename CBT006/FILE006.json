{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011034000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 470288, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 13, "INMDSNAM": "CBT.V500.FILE006.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 470288, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 470288, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE006.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\t\\x0e'", "DS1TRBAL": "b'`\\x06'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x00\\x15\\x00\\x0b\\x00\\x16\\x00\\x05\\x00\\n'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x00\\x00A\\x01 5?\\x01 5?\\x14\\x10\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf5\\xf0\\xf0@@@'", "ispf": {"version": "05.00", "flags": 0, "createdate": "2020-12-18T00:00:00", "modifydate": "2020-12-18T14:10:41", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-500"}, "text": "REGULAR CBT TAPE - VERSION 500    FILE:  006\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT500.FILE006\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 42 MEMBERS COUNTED; CUMULATIVE SIZE IS 4,108 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   12/18/20    14:10:41    UTC-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@FILE006": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x00\\x006\\x01 5?\\x01 5?\\x14\\x10\\x00u\\x00u\\x00\\x00\\xc3\\xc2\\xe3`\\xf5\\xf0\\xf0@@@'", "ispf": {"version": "05.00", "flags": 0, "createdate": "2020-12-18T00:00:00", "modifydate": "2020-12-18T14:10:36", "lines": 117, "newlines": 117, "modlines": 0, "user": "CBT-500"}, "text": "//***FILE 006 CONTAINS SEVERAL PROGRAMS USED FOR MANIPULATION OF    *   FILE 006\n//*           THE CBT TAPE AND CBT OVERFLOW TAPE DOCUMENTATION.     *   FILE 006\n//*                                                                 *   FILE 006\n//*           The program called CBTUPD is for the purpose of       *   FILE 006\n//*           introducing appropriately named ./ ADD NAME= cards    *   FILE 006\n//*           into strategic places of the CBT Tape Documentation.  *   FILE 006\n//*           The CBT Tape doc can then be conveniently broken      *   FILE 006\n//*           up into a pds.  The member names of the pds are       *   FILE 006\n//*           in collating sequence order (EBCDIC), so that the     *   FILE 006\n//*           members can be put back together as a sequential      *   FILE 006\n//*           file, in their proper order.                          *   FILE 006\n//*                                                                 *   FILE 006\n//*           The program called DOCFILE is from Arnold Casinghino  *   FILE 006\n//*           and it puts the indicators in columns 73-80 of the    *   FILE 006\n//*           CBT Tape documentation, to indicate your current      *   FILE 006\n//*           position within the documentation.                    *   FILE 006\n//*                                                                 *   FILE 006\n//*           The original idea of the DOCFILE program is from      *   FILE 006\n//*           a COBOL program written by Sam Barr of Northrop.      *   FILE 006\n//*                                                                 *   FILE 006\n//*           DOCFILE has been updated by Sam Golob (03/99) to      *   FILE 006\n//*           take into account the fact that there may be lower    *   FILE 006\n//*           case characters in the CBT Tape Documentation         *   FILE 006\n//*           nowadays.                                             *   FILE 006\n//*                                                                 *   FILE 006\n//*           To more easily run DOCFILE, so as to make sure that   *   FILE 006\n//*           columns 73-80 in the File 001 documentation are       *   FILE 006\n//*           correct, I have added 3 clists:  DOCFIL, DOCFILA,     *   FILE 006\n//*           and DOCFILN.  DOCFIL checks columns 73-80 in          *   FILE 006\n//*           the @FILEnnn member that is in the staging pds,       *   FILE 006\n//*           which is named 'userid.CBTver.FILEnnn'.  DOCFILN      *   FILE 006\n//*           does the same for the @FILEnnn member of the          *   FILE 006\n//*           'userid.CBTDOC.PDS' dataset.  DOCFILA reads an        *   FILE 006\n//*           arbitrary FILE001-format pds member, and writes       *   FILE 006\n//*           an arbitrary FILE001-format member which has been     *   FILE 006\n//*           fixed in columns 73-80.  I now use DOCFILX which      *   FILE 006\n//*           was converted to REXX from the CLIST called DOCFILN.  *   FILE 006\n//*                                                                 *   FILE 006\n//*           This file was moved from File 130 and the former      *   FILE 006\n//*           File 006 was moved to File 130.  The reason for       *   FILE 006\n//*           that, was that this file should be near the           *   FILE 006\n//*           beginning of the CBT Tape, since it is used to        *   FILE 006\n//*           process the CBT Tape Documentation File.              *   FILE 006\n//*                                                                 *   FILE 006\n//*           (Actually both of them are.  I just put this file     *   FILE 006\n//*           more \"forward\", because I think more people are       *   FILE 006\n//*           going to use it.  File 130 is for loading the         *   FILE 006\n//*           CBT documentation into an INFO/MVS database.          *   FILE 006\n//*           I don't know how many people use the INFO/MVS         *   FILE 006\n//*           anymore.)                                             *   FILE 006\n//*                                                                 *   FILE 006\n//*           I've included the OSTARXMT package in this file       *   FILE 006\n//*           to make it more available.  Documentation for         *   FILE 006\n//*           running this package is in File 365.  The load        *   FILE 006\n//*           module for the OSTAREDC assembler program to          *   FILE 006\n//*           speed up error checking, is in File 035.  If you      *   FILE 006\n//*           get CBT Tape files in OSTARXMT format (LRECL=88),     *   FILE 006\n//*           the presence of the OSTARREC exec here, will make     *   FILE 006\n//*           it easier for you to handle this format.  Just        *   FILE 006\n//*           copy OSTARREC into your SYSPROC or SYSEXEC library    *   FILE 006\n//*           and invoke it, against your .XMT files.               *   FILE 006\n//*                                                                 *   FILE 006\n//*    Note:  This file also contains copies of the ISPF Edit       *   FILE 006\n//*           Macros  CBTUPDTE  and  COVUPDTE, which are used       *   FILE 006\n//*           to introduce ./ ADD NAME= cards into the CBT Tape     *   FILE 006\n//*           and CBT Overflow Tape documentation files.  That      *   FILE 006\n//*           will allow them to be converted into partitioned      *   FILE 006\n//*           datasets, using IEBUPDTE ,PARM=NEW , or PDSLOAD       *   FILE 006\n//*           programs.                                             *   FILE 006\n//*                                                                 *   FILE 006\n//*           However, the CBTUPD assembler program supersedes      *   FILE 006\n//*           these two edit macros, because it is more accurate    *   FILE 006\n//*           in checking where to insert the ./ ADD cards,         *   FILE 006\n//*           and is less prone to some other errors.               *   FILE 006\n//*                                                                 *   FILE 006\n//*           As of CBTUPD Version 1.3 (or higher), the changes     *   FILE 006\n//*           for each version of the tape are separated out as     *   FILE 006\n//*           distinct members, sorted in reverse order.  None of   *   FILE 006\n//*           the edit macros did that job, so CBTUPD is distinctly *   FILE 006\n//*           better than the CBTUPDTE edit macro.                  *   FILE 006\n//*                                                                 *   FILE 006\n//*           Version 1.3 of the CBTUPD program was developed and   *   FILE 006\n//*           tested on the IBM PC using the Tachyon Cross          *   FILE 006\n//*           Assembler and the Tachyon Operating System.  This     *   FILE 006\n//*           is a vendor product from Tachyon Software, Denver     *   FILE 006\n//*           Colorado, 1-303-722-1341.                             *   FILE 006\n//*                www.tachyonsoft.com/tachyon                      *   FILE 006\n//*           This product allows you to develop MVS assembler      *   FILE 006\n//*           programs on an IBM PC, test them on the PC, and       *   FILE 006\n//*           port them to MVS.  The object deck produced by        *   FILE 006\n//*           the Tachyon Assembler is compatible with HLASM.       *   FILE 006\n//*                                                                 *   FILE 006\n//*           Added GENDAT and GENDATE clists to place a time and   *   FILE 006\n//*           date stamp into each CBT Tape File pds, before it     *   FILE 006\n//*           is shipped.  GENCOV does the same, for files on the   *   FILE 006\n//*           CBT Overflow Tape.                                    *   FILE 006\n//*                                                                 *   FILE 006\n//*           Add Ron Tansky's program CBTCOPY which copies CBT     *   FILE 006\n//*           File 001 into a VB dataset in order to save space.    *   FILE 006\n//*           Nowadays it's debatable if this program is really     *   FILE 006\n//*           needed.  But it's there for the coding example, and   *   FILE 006\n//*           maybe it might be useful for someone.  This program   *   FILE 006\n//*           occupied CBT File 013, which has now been freed up.   *   FILE 006\n//*                                                                 *   FILE 006\n//*           Gabriel Gargiulo converted the GENDAT clist to REXX.  *   FILE 006\n//*           It is a little better, in that it finds the PDS117    *   FILE 006\n//*           message even if it is \"in the wrong place\".  Thanks,  *   FILE 006\n//*           Gabe.  The new REXX is called GENDATR.  GENDATR is    *   FILE 006\n//*           what I personally use now, as well as DOCFILX.        *   FILE 006\n//*                                                                 *   FILE 006\n//*  Note.    Since we are pushing 1000 files on this tape, I am    *   FILE 006\n//*           trying to consolidate files which took up file slots  *   FILE 006\n//*           in the past.  I don't like to delete anything, so     *   FILE 006\n//*           I put the contents of File 042 and File 043 into      *   FILE 006\n//*           this file, as members KEYWORDS and KEYWORDH,          *   FILE 006\n//*           respectively.                                         *   FILE 006\n//*                                                                 *   FILE 006\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ASMLK": {"ttr": 521, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x98\\x16o\\x00\\x99\\x10O\\x16\\x13\\x00\\x1b\\x00\\x1b\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1998-06-15T00:00:00", "modifydate": "1999-04-14T16:13:00", "lines": 27, "newlines": 27, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=A,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,NOXREF)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//         DD DISP=SHR,DSN=SBGOLOB.B.ASM\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.B.ASM(CBTUPD)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWLKED,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SBGOLOB.LOAD\n//SYSLMOD  DD  DISP=SHR,DSN=SBGOLOB.LOAD\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n NAME    CBTUPD(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CBTCOPY": {"ttr": 523, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x15\\x00\\x862\\x0f\\x00\\x862\\x0f!E\\x00T\\x00T\\x00\\x00\\xd9\\xe3\\xc1\\xd5\\xe2\\xd2\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1986-11-16T00:00:00", "modifydate": "1986-11-16T21:45:15", "lines": 84, "newlines": 84, "modlines": 0, "user": "RTANSKY"}, "text": "*          DATA SET CBT1708    AT LEVEL 001 AS OF 11/16/86\n TITLE '              COPY CBT FILE 1 TO A VB DATASET, MINIMIZING SIZE' 00001\nCBTCOPY  CSECT                                                          00002\n*                                                                       00003\n*  RON TANSKY                                                           00004\n*                                                                       00005\n*    THIS PROGRAM SQUEEZES THE CBT INDEX.  IT IS DESIGNED FOR THOSE     00006\n*  WHO WISH TO PUT IT INTO A DISK DATSET AND USE THE MINIMUM AMOUNT     00007\n*  OF SPACE.  IT GETS RID OF THE LEADING '//* ', IT CHOPS OFF THE       00008\n*  TRAILING '*' AND SEQUENCE NUMBER FIELDS, AND IT TURNS THE FILE       00009\n*  INTO A VB FORMAT.  THE SPACE DIFFERENCE IS SIGNIFICANT.              00010\n*                                                                       00011\n*  REGISTER USAGE                                                       00012\n*                                                                       00013\n*        3     BASE                                                     00014\n*        4     HOLDS A CONSTANT 5 (LENGTH FIELD + 1)                    00015\n*        5     POINTER TO INPUT FILE                                    00016\n*        6     POINTER TO OUTPUT FILE                                   00017\n*        7     POINTER INTO RECORD BEING PROCESSED                      00018\n*        8     COUNTER TO SHOW LENGTH OF RECORD                         00019\n*                                                                       00020\n         USING *,3                                                      00021\n         SAVE  (14,12)                                                  00022\n         LR    R3,R15                                                   00023\n         ST    R13,SAVE+4                                               00024\n         LA    R15,SAVE                                                 00025\n         ST    R15,8(R13)                                               00026\n         LR    R13,R15                                                  00027\n         LA    R5,IN                                                    00028\n         LA    R6,OUT                                                   00029\n         LA    R4,4                                                     00030\n         OPEN  ((R5),(INPUT),(R6),(OUTPUT))                             00031\nMAINLOOP GET   (R5)                                                     00032\n         MVC   DATA,4(R1)      SKIP THE FIRST 4 BYTES OF INPUT          00033\n         LA    R8,ENDDATA-DATA                                          00034\n         LA    R7,ENDDATA                                               00035\n*                                                                       00036\n* SQUEEZE OUT TRAILING BLANKS                                           00037\n*                                                                       00038\nSQUEEZE  CLI   0(R7),C' '                                               00039\n         BNE   SQDONE                                                   00040\n         BCTR  R7,0                                                     00041\n         BCT   R8,SQUEEZE                                               00042\nSQDONE   AR    R8,R4            ADD 4 TO LENGTH FIELD                   00043\n         STH   R8,OUTLEN                                                00044\n         CLC   DATA(6),=C'&&$%&&$%'  STOP AT ADDITIONS SECTION          00045\n         BE    EOF                                                      00046\n         PUT   (R6),OUTREC                                              00047\n         B     MAINLOOP                                                 00048\n         SPACE                                                          00049\nEOF      CLOSE ((R5),,(R6))                                             00050\n         L     R13,4(R13)                                               00051\n         RETURN (14,12),RC=0                                            00052\n         SPACE                                                          00053\nOUTREC   DS    0CL70                                                    00054\nOUTLEN   DC    H'0'                                                     00055\n         DC    H'0'                                                     00056\nDATA     DS    CL66                                                     00057\nENDDATA  EQU   *-1                                                      00058\n         SPACE                                                          00059\nSAVE     DS    9D                                                       00060\n         SPACE                                                          00061\nIN       DCB   DSORG=PS,MACRF=GL,EODAD=EOF,DDNAME=SYSUT1                00062\nOUT      DCB   DSORG=PS,MACRF=PM,RECFM=VB,LRECL=80,DDNAME=SYSUT2        00063\n         SPACE                                                          00064\nR0       EQU   0                                                        00065\nR1       EQU   1                                                        00066\nR2       EQU   2                                                        00067\nR3       EQU   3                                                        00068\nR4       EQU   4                                                        00069\nR5       EQU   5                                                        00070\nR6       EQU   6                                                        00071\nR7       EQU   7                                                        00072\nR8       EQU   8                                                        00073\nR9       EQU   9                                                        00074\nR10      EQU   10                                                       00075\nR11      EQU   11                                                       00076\nR12      EQU   12                                                       00077\nR13      EQU   13                                                       00078\nR14      EQU   14                                                       00079\nR15      EQU   15                                                       00080\n#PAN$AUD CSECT                                                          000804\n$PAN#AUD DC    CL21'001CBT1708   11/16/86'                              000805\n         END   CBTCOPY                                                  00081\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CBTCOPY$": {"ttr": 526, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x01\\x01\\x16$_\\x01\\x16$_!Q\\x00\\x1b\\x00\\x1b\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2016-09-01T00:00:00", "modifydate": "2016-09-01T21:51:01", "lines": 27, "newlines": 27, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,RLD)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT493.FILE006(CBTCOPY)\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,20)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=SYSDA,SPACE=(TRK,30),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=IEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=(OLD,PASS),DSN=&&TEMP\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLIN   DD  *\n INCLUDE SYSLIB\n ORDER   CBTCOPY\n SETSSI  CB493013\n ENTRY   CBTCOPY\n NAME    CBTCOPY(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CBTCOPY@": {"ttr": 528, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x08\\x01\\x16$_\\x01\\x16$_!Q\\x00\\x07\\x00\\x07\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2016-09-01T00:00:00", "modifydate": "2016-09-01T21:51:08", "lines": 7, "newlines": 7, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBZ JOB ,'SAM GOLOB',CLASS=B,\n//    MSGCLASS=X,NOTIFY=&SYSUID\n//*\n//SQUEEZE EXEC PGM=CBTCOPY\n//STEPLIB  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSUT1   DD  DISP=SHR,DSN=SBGOLOB.CBT.EDIT(FILE001)\n//SYSUT2   DD  DISP=SHR,DSN=SBGOLOB.VB.CBTDOC(FILE001)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CBTUPD": {"ttr": 530, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\"\\x00\\x99\\x11/\\x01\\x170/\\x14\\x14\\x01\\xd2\\x01\\x9d\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "1999-04-22T00:00:00", "modifydate": "2017-10-29T14:14:22", "lines": 466, "newlines": 413, "modlines": 0, "user": "SBGOLOB"}, "text": "**********************************************************************\n*                                                                    *\n*  CBTUPD - PROGRAM TO INSERT ./ ADD NAME= CARDS INTO THE CBT MVS    *\n*           UTILITIES TAPE DOCUMENTATION.  THIS PROGRAM WILL WORK    *\n*           FOR BOTH THE CBT MVS TAPE DOC AND THE CBT OVERFLOW       *\n*           TAPE DOC.  THIS PROGRAM SUPERSEDES THE TWO EDIT MACROS   *\n*           THAT ARE CALLED CBTUPDTE AND COVUPDTE.                   *\n*                                                                    *\n*   AUTHOR :   SAM GOLOB                                             *\n*   VERSION:   1.6                                                   *\n*   DATE   :   JUL 01, 99                                            *\n*                                                                    *\n*   UPDATE :   OCT 29, 17                                            *\n*                                                                    *\n*  SAMPLE JCL TO RUN THIS PROGRAM:                                   *\n*                                                                    *\n*   //CBTUPDX   JOB (ACCT#),S-GOLOB,                                 *\n*   // NOTIFY=&SYSUID,                                               *\n*   // CLASS=B,MSGCLASS=X                                            *\n*   //*                                                              *\n*   //INSERT EXEC PGM=CBTUPD                                         *\n*   //STEPLIB DD DISP=SHR,DSN=SBGOLOB.LOAD                           *\n*   //INPUT  DD  DISP=SHR,DSN=SBGOLOB.CBT.EDIT(FILE001)              *\n*   //OUTPUT DD  DISP=SHR,DSN=SBGOLOB.CBTDOC.TEST(FILE001I)          *\n*                                                                    *\n*  CHANGE LOG:                                                       *\n*                                                                    *\n*   1.6 - 17/10/29 - ADD SUPPORT FOR FOUR-DIGIT FILE NUMBERS.        *\n*                    FOR >=1000, ./ADD NAME=@FILNNNN                 *\n*                    TEST STRING IS THEN //***FILENNNN .             *\n*                    AND THE NNNN IS COPIED INTO @FILNNNN,           *\n*                    TO MAKE THE NEW PDS MEMBER NAME.                *\n*                    IF THERE ARE LESS THAN 4 DIGITS, THERE          *\n*                    IS A BLANK IN THE MEMBER NAME: @FIL NNN         *\n*                    SO IN THAT CASE WE FILL IN THE \"E\" AND          *\n*                    MAKE THE MEMBER NAME @FILENNN AS BEFORE.        *\n*                                                                    *\n*   1.5 - 99/07/01 - CONVERT DATA TO UPPERCASE BEFORE TESTING.       *\n*                                                                    *\n*   1.4 - 99/05/06 - SUPPORT FOR DISCLAIM SECTION IN OVERFLOW TAPE.  *\n*                                                                    *\n*   1.3 - 99/04/20 - INSERT ./ ADD NAME CARDS TO SEPARATE THE        *\n*                    //***SECTION V-### SECTION                      *\n*                    PIECES FROM EACH OTHER, FOR EACH VERSION'S      *\n*                    CHANGES.  THE NAMES WERE SORTED IN REVERSE      *\n*                    OF THEIR NUMERIC ORDER THROUGH THE USE OF A     *\n*                    TRANSLATE TABLE THAT CHANGES 0123456789 TO      *\n*                    XWVUTSRQPO, WHICH BECOMES A PREFIX TO THE       *\n*                    VERSION NUMBER IN THE MEMBER NAME.              *\n*                                                                    *\n*                    THIS CHANGE WAS DEVELOPED AND TESTED ON THE     *\n*                    IBM PC PLATFORM USING THE TACHYON ASSEMBLER     *\n*                    AND OPERATING SYSTEM FROM DAVID BOND,           *\n*                    1-303-722-1341,  WWW.TACHYONSOFT.COM .          *\n*                                                                    *\n*   1.2 - 99/04/15 - FIXED PROGRAM SO IT DOESN'T ALWAYS PUT THE      *\n*                    $$$$$$$$ MEMBER UNCONDITIONALLY WITHOUT         *\n*                    READING THE FILE.  THIS ALLOWS THAT IF THE      *\n*                    MEMBERS WERE PUT TOGETHER FROM THE WRONG        *\n*                    ORDER, ALMOST ALL OF THE ./ ADD CARDS WILL      *\n*                    STILL BE CORRECT.  YOU WILL JUST PROBABLY       *\n*                    HAVE TO RENAME 2 MEMBERS AT THE MOST, TO        *\n*                    STRAIGHTEN THE DOC FILE OUT.                    *\n*                                                                    *\n**********************************************************************\n********************************************************************\n***      START OF MACRO DEFINITIONS                              ***\n********************************************************************\n         MACRO\n&NAME    SAVEALL    &RENT,&REG=3,&EQU=YES\n         GBLB  &SAVRENT\n         GBLB  &REGSW\n         GBLB  &TIME\n         GBLC  &SAVNDX\n&SAVNDX  SETC  '&SYSNDX'\n&NAME    CSECT\n         AIF   ('&SAVRENT' EQ '1').NOTFREE\n         AIF   ('&REGSW' EQ '1').NOEQU\n         AIF   ('&EQU' NE 'YES').NOEQU\n&REGSW   SETB  1\n         SPACE 2\n***********************************************************************\n********           DEFINITION OF GENERAL REGISTERS             ********\n***********************************************************************\nR0       EQU   0    GENERAL REGISTER ZERO\nR1       EQU   1    GENERAL REGISTER ONE\nR2       EQU   2    GENERAL REGISTER TWO\nR3       EQU   3    GENERAL REGISTER THREE\nR4       EQU   4    GENERAL REGISTER FOUR\nR5       EQU   5    GENERAL REGISTER FIVE\nR6       EQU   6    GENERAL REGISTER SIX\nR7       EQU   7    GENERAL REGISTER SEVEN\nR8       EQU   8    GENERAL REGISTER EIGHT\nR9       EQU   9    GENERAL REGISTER NINE\nR10      EQU   10   GENERAL REGISTER TEN\nR11      EQU   11   GENERAL REGISTER ELEVEN\nR12      EQU   12   GENERAL REGISTER TWELVE\nR13      EQU   13   GENERAL REGISTER THIRTEEN\nR14      EQU   14   GENERAL REGISTER FOURTEEN\nR15      EQU   15   GENERAL REGISTER FIFTEEN\n         SPACE 1\nRA       EQU   10   GENERAL REGISTER TEN\nRB       EQU   11   GENERAL REGISTER ELEVEN\nRC       EQU   12   GENERAL REGISTER TWELVE\nRD       EQU   13   GENERAL REGISTER THIRTEEN\nRE       EQU   14   GENERAL REGISTER FOURTEEN\nRF       EQU   15   GENERAL REGISTER FIFTEEN\n***********************************************************************\n********             END OF REGISTER DEFINITIONS               ********\n***********************************************************************\n         SPACE 2\n.NOEQU   ANOP\n         SAVE  (14,12),,*\n         AIF   ('&REG' EQ '').MESS\n         BALR  &REG(1),0\n         AIF   (N'&REG EQ 1).A\n         AIF   (N'&REG EQ 2).B\n         AIF   (N'&REG EQ 3).C\n         AIF   (N'&REG EQ 4).D\n         AIF   (N'&REG EQ 5).E\n         MNOTE *****,'EXCESSIVE BASE REGISTERS -- 5 ASSUMED *****'\n         AGO   .E\n.MESS    MNOTE 12,'***** NO BASE REGISTER SPECIFIED *****'\n         MEXIT\n.NOTFREE MNOTE 12,'***** ENDALL NOT ISSUED PRIOR TO NEW SAVEALL *****'\n         MEXIT\n.E       USING *,&REG(1),&REG(2),&REG(3),&REG(4),&REG(5)\nQ&SYSNDX L     &REG(2),=A(Q&SYSNDX+4096)     LOAD BASE REGISTERS\n         L     &REG(3),=A(Q&SYSNDX+8192)\n         L     &REG(4),=A(Q&SYSNDX+12288)\n         L     &REG(5),=A(Q&SYSNDX+16384)\n         AGO   .END\n.D       USING *,&REG(1),&REG(2),&REG(3),&REG(4)\nQ&SYSNDX L     &REG(2),=A(Q&SYSNDX+4096)     LOAD BASE REGISTERS\n         L     &REG(3),=A(Q&SYSNDX+8192)\n         L     &REG(4),=A(Q&SYSNDX+12288)\n         AGO   .END\n.C       USING *,&REG(1),&REG(2),&REG(3)\nQ&SYSNDX L     &REG(2),=A(Q&SYSNDX+4096)     LOAD BASE REGISTERS\n         L     &REG(3),=A(Q&SYSNDX+8192)\n         AGO   .END\n.B       USING *,&REG(1),&REG(2)\nQ&SYSNDX L     &REG(2),=A(Q&SYSNDX+4096)     LOAD BASE REGISTER\n         AGO   .END\n.A       USING *,&REG(1)\n.END     ANOP\n         AIF   ('&RENT' NE 'RENT').NORENT\n&SAVRENT SETB  1\n         GETMAIN    R,LV=72        GET STORAGE FOR SAVE AREA\n         ST    13,4(1)             SET UP FORWARD CHAIN\n         ST    1,8(13)             SET UP BACKWARD CHAIN\n         L     0,20(0,13)          RESET REGISTER 0\n         L     1,24(0,13)          RESET REGISTER 1\n         L     13,8(0,13)          LOAD SAVE AREA ADDRESS\n         AGO   .RENT\n.NORENT  ANOP\n&TIME    SETB  1\n         ST    13,SAVE&SYSNDX+4    SET UP FORWARD CHAIN\n         LA    1,SAVE&SYSNDX\n         ST    1,8(0,13)           SET UP BACKWARD CHAIN\n         L     1,24(0,13)          RESET REGISTER 1\n         LA    13,SAVE&SYSNDX\n         B     J&SYSNDX           BRANCH AROUND BASE REGISTER CONST\nSAVE&SYSNDX DC 18F'0'\n.RENT    ANOP\n         LTORG\nJ&SYSNDX DS    0H\n         EJECT\n         MEND\n         MACRO\n&NAME    ENDALL &CODE=\n         GBLB  &TIME\n         GBLB  &SAVRENT\n         GBLC  &SAVNDX\n         AIF   ('&CODE' GT '4095').MESS1\n&NAME    DS    0H\n         AIF   (NOT &SAVRENT).NOTRENT\n&SAVRENT SETB  0\n         LR    1,13                LOAD SAVE AREA ADDRESS\n         L     13,4(0,13)          RE-LOAD REGISTER 13\n         LA    0,72                LOAD NUMBER OF BYTES TO BE FREED\n         FREEMAIN   R,LV=(0),A=(1) FREE SAVE AREA STORAGE\n         AGO   .RENT\n.NOTRENT ANOP\n         AIF   (NOT &TIME).NOSAVE\n&TIME    SETB  0\n         L     13,SAVE&SAVNDX+4    RE-LOAD REGISTER 13\n.RENT    ANOP\n         AIF   ('&CODE' EQ '(15)').ENDIT\n         AIF   ('&CODE' EQ '').COND1\n         LA    15,&CODE           LOAD CODE TO REG 15\n         AGO   .ENDIT\n.MESS1   MNOTE 12,'***** RETURN CODE PASSED GREATER THAN 4095 *****'\n         MEXIT\n.NOSAVE  MNOTE 12,'***** SAVEALL NOT ISSUED PRIOR TO ENDALL *****'\n         MEXIT\n.COND1   LA    15,0               LOAD ZERO (NO CODE) TO REG 15\n.ENDIT   ANOP\n         RETURN     (14,12),T,RC=(15)\n         MEND\n********************************************************************\n***      END OF MACRO DEFINITIONS                                ***\n********************************************************************\nCBTUPD   SAVEALL REG=2             SAVE THE REGISTERS\n         OPEN  (INPUT,(INPUT))     OPEN THE INPUT\n         OPEN  (OUTPUT,(OUTPUT))   OPEN THE OUTPUT\n********************************************************************\n***   THIS PROGRAM CHECKS EVERY LINE IN THE CBT TAPE DOC FOR     ***\n***   CERTAIN STRINGS THAT ./ ADD NAME= CARDS ARE INSERTED       ***\n***   BEFORE.                                                    ***\n***                                                              ***\n***   THIS PROGRAM READS THE CBT DOC FILE SEQUENTIALLY, AND      ***\n***   SAVES 2 PREVIOUS CARDS.  YOU CAN WRITE THE ./ ADD CARD     ***\n***   IN BACK OF THE CURRENT CARD, OR THE ONE PREVIOUS, OR       ***\n***   IN BACK OF TWO PREVIOUS.                                   ***\n***                                                              ***\n***   HOW FAR BACK YOU WANT TO WRITE THE ./ ADD CARD, IS         ***\n***   INDICATED BY THE FLAG IN FRONT OF EACH STRING THAT IS      ***\n***   SEARCHED FOR:  1 MEANS BEHIND THE CURRENT CARD, 2 MEANS    ***\n***   BEHIND THE PREVIOUS CARD, AND 3 MEANS BEHIND TWO PREVIOUS  ***\n***   CARDS.                                                     ***\n***                                                              ***\n***   THE 2 TABLES, TESTDATA AND ADDNAMES CORRESPOND.  EACH      ***\n***   STRING IN TESTDATA CORRESPONDS TO THE NAME OF AN ./ ADD    ***\n***   NAME=  CARD, THAT IS THE CORRESPONDING ENTRY IN THE        ***\n***   ADDNAMES TABLE.  FOR EASE OF MATCHING, I HAVE INCLUDED     ***\n***   NUMBERED LABELS IN EACH TABLE ENTRY FOR THE TWO TABLES.    ***\n***                                                              ***\n***   OUR FIRST STEP IS TO INITIALIZE THE WORK AREAS, AND TO PUT ***\n***   OUT THE FIRST ./ ADD CARD THAT GOES TO THE TOP OF THE      ***\n***   OUTPUT FILE.                                               ***\n********************************************************************\nINIT     MVC   AREA(80),BLANKS\n         MVC   AREA1(80),BLANKS    INITIALIZE CARD AREAS\n         MVC   AREA2(80),BLANKS\n         MVC   AREA3(80),BLANKS\n         MVC   AREA4(80),BLANKS\n         MVC   AREATEST(80),BLANKS\n         MVC   OUTFILE(80),BLANKS\n         GET   INPUT,AREA          PRIME\n         BAL   R9,READMOVE               THE TWO\n         GET   INPUT,AREA          BUFFER\n         BAL   R9,READMOVE               AREAS\n         MVC   AREA2(20),=C'./ ADD NAME=$$$$$$$$'\n         BAL   R9,TESTCARD         TEST FOR INITIAL STRING\n********************************************************************\n***    \"READ\" IS THE MAIN PROCESSING LOOP, ENDING AT EOJ.        ***\n********************************************************************\nREAD     GET   INPUT,AREA          READ A RECORD\n         BAL   R9,READMOVE         MOVE DATA TO SAVE PREV 2 LINES\n         BAL   R9,TESTCARD         TEST FOR TELLTALE STRING\n         BAL   R9,WRITESTR         DO OUTPUT OF 1 OR MORE LINES\n         B     READ                DO ANOTHER READ TILL EOF\n********************************************************************\nREADMOVE DS    0H                  MOVE DATA TO PROPER AREAS\n         MVC   AREA1(80),AREA2\n         MVC   AREA2(80),AREA3\n         MVC   AREA3(80),AREA4\n         MVC   AREA4(80),BLANKS\n         MVC   AREA4(80),AREA\n         BR    R9                  RETURN TO CALLER\n********************************************************************\nTESTCARD DS    0H                  TEST CARD IF IT NEEDS INSERT\n         LA    R7,TESTDATA         LOAD ADDRESS OF TEST DATA\n         LA    R8,ADDNAMES         LOAD ADDRESS OF NAME= NAMES\nTESTLOOP CLI   0(R7),X'FF'         END OF FIRST TABLE?\n         BE    TENDTBL             YES. TRY NEXT STUFF\n         MVC   MOVEFLAG(1),0(R7)   LOAD MOVE FLAG\n         LA    R7,1(,R7)           BUMP UP TO TEST DATA\n         MVC   AREATEST(80),AREA4    LOAD TESTING AREA        SBG 07/99\n         OC    AREATEST(80),BLANKS   UPPERCASE TEST AREA      SBG 07/99\n         CLC   AREATEST(25),0(R7)  IS THE NEW CARD SPECIAL?\n         BE    TESTYES             YES. FOUND A MATCH.\n         LA    R7,25(,R7)          BUMP TO NEXT TEST DATA\n         LA    R8,8(,R8)           BUMP TO NEXT ADD NAME\n         B     TESTLOOP            LOOP AGAIN THRU TABLES\nTESTYES  CLI   MOVEFLAG,C'3'       GO BACK BEFORE 2 LINES?\n         BE    WRITBEF2\n         CLI   MOVEFLAG,C'2'       GO BACK BEFORE 1 LINE?\n         BE    WRITBEF1\n         CLI   MOVEFLAG,C'1'       WRITE BEFORE CURRENT LINE?\n         BE    WRITBEF\nTENDTBL  DS    0H                  HANDLE INDIVIDUAL FILE DOCS.\n*  FOR >=1000 FILE NUMBER, THE FILE 001 HEADER WILL READ:\n*  //***FILE****  (4 DIGITS THERE, WITH NO SPACE BEFORE THEM)\n*  FOR  <1000 FILE NUMBER, THE FILE 001 HEADER WILL READ:\n*  //***FILE ***  (3 DIGITS THERE, AND A SPACE BEFORE THEM)\n         CLC   =C'//***FILE',AREATEST     CHECK INDIVIDUAL FILES\n         BNE   TESTVER\n*  FOR >=1000 FILE NUMBER, THE ADDED MEMBER NAME WILL READ:\n*  @FIL****.\n*  FOR  <1000 FILE NUMBER, THE ADDED MEMBER NAME WILL READ:\n*  @FILE***.\n*  WE ARE COUNTING ON EBCDIC, WHERE NUMBERS SORT HIGHER THAN LETTERS.\n*  SO WE HAVE TO ADJUST OUR PROCEDURE TO ADAPT TO THIS.\n         MVC   FILELIT+4(4),AREA4+9       CREATE MEMBER NAME FROM\n*                                         4 DIGITS, OR 3 DIGITS\n*                                         WITH ITS PREVIOUS BLANK,\n*                                         LEAVING @FIL W/O THE E.\n         CLI   FILELIT+4,C' '             IF WE ARE BEFORE 4 DIGITS,\n         BNE   TESTESKP                   IT SAYS @FIL WITH BLANK\n         MVI   FILELIT+4,C'E'             SO YOU HAVE TO ADD THE E.\nTESTESKP DS    0H\n         LA    R8,FILELIT\n         B     WRITBEF\nTESTVER  DS    0H\n         CLC   =C'//***SECTION V-',AREATEST VERSION CHANGE PIECE?\n         BNE   TESTCEND\n         MVC   FILEVVAR(6),BLANKS         INITIALIZE VAR AREA\n         MVC   FILEVNUM(3),AREA4+15       MOVE VERSION NUMBER\n         MVC   FILEVSRT(3),AREA4+15       MOVE NUMBER FOR TRANSLATION\n         TR    FILEVSRT(3),TRTABLE        CHANGE FIELD TO SORT BKWDS\n         LA    R8,FILEVER\n         B     WRITBEF\nWRITBEF2 MVC   AREA1(80),AREA2     SAVE CURRENT CARD -2\n         MVC   AREA2(80),BLANKS    INITIALIZE AREA\n         MVC   AREA2(12),ADDNME    ./ ADD CARD\n         MVC   AREA2+12(8),0(R8)   LITERAL NAME\n         MVC   OUTFILE(80),AREA2\n         PUT   OUTPUT,OUTFILE\n         MVC   AREA2(80),AREA1     RESTORE CURRENT CARD -2\n         B     TESTCEND\nWRITBEF1 MVC   AREA1(80),AREA2     SAVE CURRENT CARD -2\n         MVC   AREA2(80),BLANKS    INITIALIZE AREA\n         MVC   AREA2(12),ADDNME    ./ ADD CARD\n         MVC   AREA2+12(8),0(R8)   LITERAL NAME\n         MVC   OUTFILE(80),AREA1   GET RID OF CURRENT - 2\n         PUT   OUTPUT,OUTFILE\nWB1SKIP  B     TESTCEND\nWRITBEF  MVC   AREA1(80),AREA2     SAVE CURRENT -2\n         MVC   AREA2(80),AREA3     SAVE CURRENT -1\n         MVC   AREA3(80),BLANKS    INITIALIZE AREA\n         MVC   AREA3(12),ADDNME    ./ ADD CARD\n         MVC   AREA3+12(8),0(R8)   LITERAL NAME\n         MVC   OUTFILE(80),AREA1    OUTPUT CURRENT -2\n         PUT   OUTPUT,OUTFILE\nTESTCEND MVI   MOVEFLAG,C'0'       RESET MOVE FLAG\n         BR    R9                  RETURN TO CALLER\n********************************************************************\nWRITESTR DS    0H                  WRITE OUT APPROPRIATE RECORDS\n         MVC   OUTFILE(80),AREA2\n         PUT   OUTPUT,OUTFILE\n         BR    R9                  RETURN TO CALLER\n********************************************************************\nEOJ      MVC   OUTFILE(80),AREA3   EMPTY\n         PUT   OUTPUT,OUTFILE        OUT\n         MVC   OUTFILE(80),AREA4       THE\n         PUT   OUTPUT,OUTFILE            BUFFERS\n         CLOSE OUTPUT              CLOSE THE INPUT\n         CLOSE INPUT               CLOSE THE OUTPUT\n         ENDALL\n********************************************************************\n***      DATA AREAS                                              ***\n********************************************************************\nINPUT    DCB   DSORG=PS,DDNAME=INPUT,MACRF=GM,EODAD=EOJ\nOUTPUT   DCB   DSORG=PS,DDNAME=OUTPUT,MACRF=PM,                        X\n               LRECL=80,RECFM=FB\nBLANKS   DC    CL80' '\nADDNAMES DS    0D\nADDN00   DC    CL8'$$$$$$$#'\nADDN01   DC    CL8'$$$CBT'\nADDN02   DC    CL8'$$DISCLM'\nADDN03   DC    CL8'$$DUPTAP'\nADDN04   DC    CL8'$$DWNLOD'\nADDN05   DC    CL8'$$EWSBUL'\nADDN05A  DC    CL8'$$FILDES'\nADDN06   DC    CL8'$$FIRST '\nADDN07   DC    CL8'$$HOWUSE'\nADDN08   DC    CL8'$$INF '\nADDN09   DC    CL8'$$KORDER'\nADDN10   DC    CL8'$$NEWS '\nADDN11   DC    CL8'$$PURGE '\nADDN12   DC    CL8'$INTERNT'\nADDN13   DC    CL8'$MODTAPE'\nADDN14   DC    CL8'$MULTMAT'\nADDN15   DC    CL8'$NOSPLA '\nADDN16   DC    CL8'$NTAJES2'\nADDN17   DC    CL8'$NTAJES3'\nADDN18   DC    CL8'$OVERSEA'\nADDN19   DC    CL8'$PDSAPAR'\nADDN20   DC    CL8'$UPDATES'\nADDN21   DC    CL8'$UZCHANG'\nADDN21A  DC    CL8'#DISCLAM'\nADDN22   DC    CL8'#FILSTAT'\nADDN23   DC    CL8'#OFFLOAD'\nADDN24   DC    CL8'#PEMPTY '\nADDN25   DC    CL8'#QUEUE '\nADDN26   DC    CL8'#VERSION'\nADDN27   DC    CL8'#XREF '\nADDN28   DC    CL8'@FDOCSEC'\nADDN29   DC    CL8'@FZADDIT'\nADDN30   DC    CL8'@GAADDIT'\n         DC    X'FFFF'\nTESTDATA DS    0D\nTEST00   DC    C'2',CL25'// REGION=512K,PERFORM=12'\nTEST01   DC    C'3',CL25'//* FILE 01 IS RECFM=FB,L'\nTEST02   DC    C'2',CL25'//***SECTION DISCLAIMER S'\nTEST03   DC    C'2',CL25'//***TAPE DUPLICATION SEC'\nTEST04   DC    C'2',CL25'//***UPLOAD DOWNLOAD SECT'\nTEST05   DC    C'2',CL25'//***NEWS BULLETIN SECTIO'\nTEST05A  DC    C'2',CL25'//***SECTION FILE DESCRIP'                     DOC FILE\nTEST06   DC    C'2',CL25'//*** WHAT TO DO WITH THI'\nTEST07   DC    C'2',CL25'//***USING THIS TAPE SECT'\nTEST08   DC    C'2',CL25'//***REGULAR NEWS SECTION'\nTEST09   DC    C'2',CL25'//***TAPE ORDER SECTION  '\nTEST10   DC    C'3',CL25'//***SECTION INFORMATION '\nTEST11   DC    C'2',CL25'//***SECTION PURGE AND RE'\nTEST12   DC    C'2',CL25'//***SECTION INTERNET SEC'\nTEST13   DC    C'2',CL25'//***SECTION MODIFICATION'\nTEST14   DC    C'2',CL25'//***SECTION DUPLICATED M'\nTEST15   DC    C'1',CL25'//***SECTION SPLA TAPE MO'\nTEST16   DC    C'2',CL25'//***SECTION JES2 MODIFIC'\nTEST17   DC    C'2',CL25'//***SECTION JES3 MODIFIC'\nTEST18   DC    C'2',CL25'//***SECTION OVERSEAS TAP'\nTEST19   DC    C'2',CL25'//***SECTION PDS ENQUEUE '\nTEST20   DC    C'2',CL25'//***SECTION FILE UPDATE '\nTEST21   DC    C'2',CL25'//***SECTION CHANGE SECTI'\nTEST21A  DC    C'2',CL25'//***SECTION DISCLAIM SEC'\nTEST22   DC    C'2',CL25'//***SECTION FILE STATUS '\nTEST23   DC    C'2',CL25'//***SECTION OFFLOAD SECT'\nTEST24   DC    C'2',CL25'//***SECTION EMPTY FILE S'\nTEST25   DC    C'2',CL25'//***SECTION JES2 QUE COM'\nTEST26   DC    C'2',CL25'//***SECTION VERSION SECT'\nTEST27   DC    C'2',CL25'//***SECTION CROSS XREF S'\nTEST28   DC    C'2',CL25'//***SECTION DOCUMENTATIO'\nTEST29   DC    C'1',CL25'//***SECTION ADDITION SEC'\nTEST30   DC    C'2',CL25'//***SECTION JCL SECTION '\n         DC    X'FFFF'\nTESTFIL  DC    C'//***FILE '\nADDNME   DC    CL12'./ ADD NAME='\nTESTEND  EQU   *-TESTDATA\nTRTABLE  DC    X'000102030405060708090A0B0C0D0E0F'\n         DC    X'101112131415161718191A1B1C1D1E1F'\n         DC    X'202122232425262728292A2B2C2D2E2F'\n         DC    X'303132333435363738393A3B3C3D3E3F'\n         DC    X'404142434445464748494A4B4C4D4E4F'\n         DC    X'505152535455565758595A5B5C5D5E5F'\n         DC    X'606162636465666768696A6B6C6D6E6F'\n         DC    X'707172737475767778797A7B7C7D7E7F'\n         DC    X'808182838485868788898A8B8C8D8E8F'\n         DC    X'909192939495969798999A9B9C9D9E9F'\n         DC    X'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'\n         DC    X'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'\n         DC    X'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'\n         DC    X'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'\n         DC    X'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'\n         DC    X'E7E6E5E4E3E2D9D8D7D6FAFBFCFDFEFF'\nDYNAREA  DS    0D\nAREA     DS    CL80\nAREA1    DS    CL80\nAREA2    DS    CL80\nAREA3    DS    CL80\nAREA4    DS    CL80\nAREATEST DS    CL80\nOUTFILE  DS    0CL80\nOUT      DS    CL80\nFILELIT  DC    CL8'@FILE   '\nFILEVER  DS    0CL8\nFILEVLIT DC    CL2'$V'\nFILEVVAR DS    0CL6\nFILEVSRT DC    CL3'   '\nFILEVNUM DC    CL3'   '\nMOVEFLAG DC    C'0'\n         DS    0D                  ALIGN\nDYNLNTH  EQU   *-DYNAREA\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CBTUPD$": {"ttr": 774, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0b\\x00U\\x00\\x98\\x16o\\x01 \\x15/ \\x08\\x00\\x1f\\x00\\x1b\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.11", "flags": 0, "createdate": "1998-06-15T00:00:00", "modifydate": "2020-05-31T20:08:55", "lines": 31, "newlines": 27, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=A,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,NOXREF)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//         DD DISP=SHR,DSN=SBGOLOB.CBT500.FILE006\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT500.FILE006(CBTUPD)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SBGOLOB.LOAD\n//SYSLMOD  DD  DISP=SHR,DSN=SBGOLOB.LOAD\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n ENTRY   CBTUPD\n SETSSI  CB500006\n SETCODE AC(0)\n NAME    CBTUPD(R)\n/*\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CBTUPDTE": {"ttr": 776, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0c\\x00\\x00\\x00\\x99\\x08?\\x00\\x99\\x10O\\x125\\x01\\x1b\\x00\\x10\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.12", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-04-14T12:35:00", "lines": 283, "newlines": 16, "modlines": 0, "user": "SBGOLOB"}, "text": "/*  ISPF EDIT MACRO  -  CBTUPDTE  -  CLIST FORMAT                    */\n/*                                                                   */\n/*  PURPOSE:  INTRODUCE ./ ADD NAME= CARDS INTO CBT TAPE DOC FILE    */\n/*                                                                   */\n/*  TO USE THIS MACRO, COPY IT INTO YOUR SYSPROC ISPF LIBRARY        */\n/*  CONCATENATION.  THEN EDIT FILE 001 OF THE CBT TAPE, MAKE SURE    */\n/*  YOU'RE AT THE TOP OF THE FILE, AND THEN INVOKE THE COMMAND       */\n/*  %CBTUPDTE (WHICH IS THIS EDIT MACRO).  THIS MACRO WILL ADD       */\n/*  ./ ADD NAME=  CARDS IN ALL THE RIGHT PLACES IN FILE 001, SO      */\n/*  THAT FILE 001 WILL BE BROKEN UP INTO THE SAME PARTITIONED DATA   */\n/*  SET THAT I USE TO MAINTAIN FILE 001.                             */\n/*                                                                   */\n/*    USE OFFLOADW AND PDSLOADW FROM FILE 093, OR ANY EQUIVALENT     */\n/*    PROGRAMS, TO PERFORM THE SEPARATION INTO PDS MEMBERS, AND      */\n/*    THE SUBSEQUENT COMBINATION INTO A SEQUENTIAL FILE.    SG-03/99 */\n/*                                                                   */\nISREDIT MACRO  NOPROCESS\n ISREDIT FIND '//MVSMODS' 1 FIRST\n ISREDIT (ROW,COL) = CURSOR\n ISREDIT LOCATE &ROW\n ISREDIT LINE_BEFORE &ROW =  \"./ ADD NAME=$$$$$$$$\"\n TOP01: +\n ISREDIT FIND '// REGION'  1\n ISREDIT (ROW,COL) = CURSOR\n ISREDIT LINE_AFTER  &ROW =  \"./ ADD NAME=$$$CBT\"\n    SET &ROW = &ROW + 2\n ISREDIT LOCATE &ROW\n TOP02: +\n ISREDIT FIND '//***SECTION DISCLAIMER' 1\n ISREDIT (ROW,COL) = CURSOR\n    SET &ROW = &ROW - 1\n ISREDIT LOCATE &ROW\n ISREDIT LINE_BEFORE &ROW =  \"./ ADD NAME=$$DISCLM\"\n    SET &ROW = &ROW + 3\n ISREDIT LOCATE &ROW\n TOP03: +\n ISREDIT FIND '//***TAPE DUPLICATION'   1\n ISREDIT (ROW,COL) = CURSOR\n    SET &ROW = &ROW - 1\n ISREDIT LOCATE &ROW\n ISREDIT LINE_BEFORE &ROW =  \"./ ADD NAME=$$DUPTAP\"\n    SET &ROW = &ROW + 3\n ISREDIT LOCATE &ROW\n TOP04: +\n ISREDIT FIND '//***UPLOAD DOWNLOAD'    1\n ISREDIT (ROW,COL) = CURSOR\n    SET &ROW = &ROW - 1\n ISREDIT LOCATE &ROW\n ISREDIT LINE_BEFORE &ROW =  \"./ ADD NAME=$$DWNLOD\"\n    SET &ROW = &ROW + 3\n ISREDIT LOCATE &ROW\n TOP05: +\n ISREDIT FIND '//***NEWS BULLETIN S'    1\n ISREDIT (ROW,COL) = CURSOR\n    SET &ROW = &ROW - 1\n ISREDIT LOCATE &ROW\n ISREDIT LINE_BEFORE &ROW =  \"./ ADD NAME=$$EWSBUL\"\n    SET &ROW = &ROW + 3\n ISREDIT LOCATE &ROW\n TOP06: +\n ISREDIT FIND '//*** WHAT TO DO WITH'   1\n ISREDIT (ROW,COL) = CURSOR\n    SET &ROW = &ROW - 1\n ISREDIT LOCATE &ROW\n ISREDIT LINE_BEFORE &ROW =  \"./ ADD NAME=$$FIRST \"\n    SET &ROW = &ROW + 3\n ISREDIT LOCATE &ROW\n TOP07: +\n ISREDIT FIND '//***USING THIS TAPE '   1\n ISREDIT (ROW,COL) = CURSOR\n    SET &ROW = &ROW - 1\n ISREDIT LOCATE &ROW\n ISREDIT LINE_BEFORE &ROW =  \"./ ADD NAME=$$HOWUSE\"\n    SET &ROW = &ROW + 3\n ISREDIT LOCATE &ROW\n TOP08: +\n ISREDIT FIND '//***REGULAR NEWS SEC'   1\n ISREDIT (ROW,COL) = CURSOR\n    SET &ROW = &ROW - 1\n ISREDIT LOCATE &ROW\n ISREDIT LINE_BEFORE &ROW =  \"./ ADD NAME=$$INF   \"\n    SET &ROW = &ROW + 3\n ISREDIT LOCATE &ROW\n TOP09: +\n ISREDIT FIND '//***TAPE ORDER SECTI'   1\n ISREDIT (ROW,COL) = CURSOR\n    SET &ROW = &ROW - 1\n ISREDIT LOCATE &ROW\n ISREDIT LINE_BEFORE &ROW =  \"./ ADD NAME=$$KORDER\"\n    SET &ROW = &ROW + 3\n ISREDIT LOCATE &ROW\n TOP10: +\n ISREDIT FIND '//***SECTION INFORMATION' 1\n ISREDIT (ROW,COL) = CURSOR\n    SET &ROW = &ROW - 2\n ISREDIT LOCATE &ROW\n ISREDIT LINE_BEFORE &ROW =  \"./ ADD NAME=$$NEWS  \"\n    SET &ROW = &ROW + 4\n ISREDIT LOCATE &ROW\n TOP11: +\n ISREDIT FIND '//***SECTION PURGE AND R' 1\n ISREDIT (ROW,COL) = CURSOR\n    SET &ROW = &ROW - 1\n ISREDIT LOCATE &ROW\n ISREDIT LINE_BEFORE &ROW =  \"./ ADD NAME=$$PURGE \"\n    SET &ROW = &ROW + 3\n ISREDIT LOCATE &ROW\n TOP12: +\n ISREDIT FIND '//***SECTION INTERNET SE' 1\n ISREDIT (ROW,COL) = CURSOR\n    SET &ROW = &ROW - 1\n ISREDIT LOCATE &ROW\n ISREDIT LINE_BEFORE &ROW =  \"./ ADD NAME=$INTERNT\"\n    SET &ROW = &ROW + 3\n ISREDIT LOCATE &ROW\n TOP13: +\n ISREDIT FIND '//***SECTION MODIFICATIO' 1\n ISREDIT (ROW,COL) = CURSOR\n    SET &ROW = &ROW - 1\n ISREDIT LOCATE &ROW\n ISREDIT LINE_BEFORE &ROW =  \"./ ADD NAME=$MODTAPE\"\n    SET &ROW = &ROW + 3\n ISREDIT LOCATE &ROW\n TOP14: +\n ISREDIT FIND '//***SECTION DUPLICATED ' 1\n ISREDIT (ROW,COL) = CURSOR\n    SET &ROW = &ROW - 1\n ISREDIT LOCATE &ROW\n ISREDIT LINE_BEFORE &ROW =  \"./ ADD NAME=$MULTMAT\"\n    SET &ROW = &ROW + 3\n ISREDIT LOCATE &ROW\n TOP15: +\n ISREDIT FIND '//***SECTION SPLA TAPE M' 1\n ISREDIT (ROW,COL) = CURSOR\n    SET &ROW = &ROW\n ISREDIT LOCATE &ROW\n ISREDIT LINE_BEFORE &ROW =  \"./ ADD NAME=$NOSPLA \"\n    SET &ROW = &ROW + 2\n ISREDIT LOCATE &ROW\n TOP16: +\n ISREDIT FIND '//***SECTION JES2 MODIFI' 1\n ISREDIT (ROW,COL) = CURSOR\n    SET &ROW = &ROW - 1\n ISREDIT LOCATE &ROW\n ISREDIT LINE_BEFORE &ROW =  \"./ ADD NAME=$NTAJES2\"\n    SET &ROW = &ROW + 3\n ISREDIT LOCATE &ROW\n TOP17: +\n ISREDIT FIND '//***SECTION JES3 MODIFI' 1\n ISREDIT (ROW,COL) = CURSOR\n    SET &ROW = &ROW - 1\n ISREDIT LOCATE &ROW\n ISREDIT LINE_BEFORE &ROW =  \"./ ADD NAME=$NTAJES3\"\n    SET &ROW = &ROW + 3\n ISREDIT LOCATE &ROW\n TOP18: +\n ISREDIT FIND '//***SECTION OVERSEAS TA' 1\n ISREDIT (ROW,COL) = CURSOR\n    SET &ROW = &ROW - 1\n ISREDIT LOCATE &ROW\n ISREDIT LINE_BEFORE &ROW =  \"./ ADD NAME=$OVERSEA\"\n    SET &ROW = &ROW + 3\n ISREDIT LOCATE &ROW\n TOP19: +\n ISREDIT FIND '//***SECTION PDS ENQUEUE' 1\n ISREDIT (ROW,COL) = CURSOR\n    SET &ROW = &ROW - 1\n ISREDIT LOCATE &ROW\n ISREDIT LINE_BEFORE &ROW =  \"./ ADD NAME=$PDSAPAR\"\n    SET &ROW = &ROW + 3\n ISREDIT LOCATE &ROW\n TOP20: +\n ISREDIT FIND '//***SECTION FILE UPDATE' 1\n ISREDIT (ROW,COL) = CURSOR\n    SET &ROW = &ROW - 1\n ISREDIT LOCATE &ROW\n ISREDIT LINE_BEFORE &ROW =  \"./ ADD NAME=$UPDATES\"\n    SET &ROW = &ROW + 3\n ISREDIT LOCATE &ROW\n TOP21: +\n ISREDIT FIND '//***SECTION CHANGE SECT' 1\n ISREDIT (ROW,COL) = CURSOR\n    SET &ROW = &ROW - 1\n ISREDIT LOCATE &ROW\n ISREDIT LINE_BEFORE &ROW =  \"./ ADD NAME=$ZCHANGE\"\n    SET &ROW = &ROW + 3\n ISREDIT LOCATE &ROW\n TOP22: +\n ISREDIT FIND '//***SECTION FILE STATUS' 1\n ISREDIT (ROW,COL) = CURSOR\n    SET &ROW = &ROW\n ISREDIT LOCATE &ROW\n ISREDIT LINE_BEFORE &ROW =  \"./ ADD NAME=#FILSTAT\"\n    SET &ROW = &ROW + 2\n ISREDIT LOCATE &ROW\n TOP23: +\n ISREDIT FIND '//***SECTION OFFLOAD SEC' 1\n ISREDIT (ROW,COL) = CURSOR\n    SET &ROW = &ROW\n ISREDIT LOCATE &ROW\n ISREDIT LINE_BEFORE &ROW =  \"./ ADD NAME=#OFFLOAD\"\n    SET &ROW = &ROW + 2\n ISREDIT LOCATE &ROW\n TOP24: +\n ISREDIT FIND '//***SECTION EMPTY FILE ' 1\n ISREDIT (ROW,COL) = CURSOR\n    SET &ROW = &ROW\n ISREDIT LOCATE &ROW\n ISREDIT LINE_BEFORE &ROW =  \"./ ADD NAME=#PEMPTY \"\n    SET &ROW = &ROW + 2\n ISREDIT LOCATE &ROW\n TOP25: +\n ISREDIT FIND '//***SECTION JES2 QUE CO' 1\n ISREDIT (ROW,COL) = CURSOR\n    SET &ROW = &ROW\n ISREDIT LOCATE &ROW\n ISREDIT LINE_BEFORE &ROW =  \"./ ADD NAME=#QUEUE  \"\n    SET &ROW = &ROW + 2\n ISREDIT LOCATE &ROW\n TOP26: +\n ISREDIT FIND '//***SECTION VERSION SEC' 1\n ISREDIT (ROW,COL) = CURSOR\n    SET &ROW = &ROW - 1\n ISREDIT LOCATE &ROW\n ISREDIT LINE_BEFORE &ROW =  \"./ ADD NAME=#VERSION\"\n    SET &ROW = &ROW + 3\n ISREDIT LOCATE &ROW\n TOP27: +\n ISREDIT FIND '//***SECTION CROSS XREF ' 1\n ISREDIT (ROW,COL) = CURSOR\n    SET &ROW = &ROW - 1\n ISREDIT LOCATE &ROW\n ISREDIT LINE_BEFORE &ROW =  \"./ ADD NAME=#XREF   \"\n    SET &ROW = &ROW + 3\n ISREDIT LOCATE &ROW\n TOP28: +\n ISREDIT FIND '//***SECTION DOCUMENTATION' 1\n ISREDIT (ROW,COL) = CURSOR\n    SET &ROW = &ROW - 1\n ISREDIT LOCATE &ROW\n ISREDIT LINE_BEFORE &ROW =  \"./ ADD NAME=@FILE001\"\n    SET &ROW = &ROW + 3\n ISREDIT LOCATE &ROW\n ISREDIT FIND '//***FILE 001' 1\n ISREDIT (ROW,COL) = CURSOR\n ISREDIT LOCATE &ROW\n    SET &ROW = &ROW + 2\n ISREDIT LOCATE &ROW\n /*   FILE SEARCH          */\n    SET &ROW = &ROW + 2\n ISREDIT LOCATE &ROW\n    SET &NOMB = 2\n    SET &NOMBR = &STR(00&NOMB)\nGETNOMB: +\n    IF &NOMB < 10                       THEN GOTO SET0\n    IF &NOMB < 100                      THEN GOTO SET1\n    IF &NOMB < 1000                     THEN GOTO SET2\nSET0: +\n    SET &NOMBR = &STR(00&NOMB)\n    GOTO DOFIL\nSET1: +\n    SET &NOMBR = &STR(0&NOMB)\n    GOTO DOFIL\nSET2: +\n    SET &NOMBR = &STR(&NOMB)\nDOFIL: +\n ISREDIT FIND '//***FILE '  1\n ISREDIT (ROW,COL) = CURSOR\n ISREDIT LINE_BEFORE &ROW =  \"./ ADD NAME=@FILE&NOMBR\"\n    SET &ROW = &ROW + 2\n ISREDIT LOCATE &ROW\n    SET &NOMB = &NOMB + 1\n    IF &NOMB > 500 THEN GOTO MD\n    GOTO GETNOMB\nMD: +\n ISREDIT FIND '//***SECTION ADDITION S' 1\n ISREDIT (ROW,COL) = CURSOR\n    SET &ROW = &ROW\n ISREDIT LOCATE &ROW\n ISREDIT LINE_BEFORE &ROW =  \"./ ADD NAME=@FZADDIT\"\n    SET &ROW = &ROW + 2\n ISREDIT LOCATE &ROW\nEXIT\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "COVUPDTE": {"ttr": 1025, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0c\\x00\\x00\\x00\\x99\\x08?\\x00\\x99\\x10O\\x126\\x00\\xe4\\x00\\x10\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.12", "flags": 0, "createdate": "1999-03-24T00:00:00", "modifydate": "1999-04-14T12:36:00", "lines": 228, "newlines": 16, "modlines": 0, "user": "SBGOLOB"}, "text": "/*  ISPF EDIT MACRO  -  COVUPDTE  -  CLIST FORMAT                    */\n/*                                                                   */\n/*  PURPOSE:  INTRODUCE ./ ADD NAME= CARDS INTO CBT OVERFLOW TAPE    */\n/*            DOCUMENTATION FILE.                                    */\n/*                                                                   */\n/*  TO USE THIS MACRO, COPY IT INTO YOUR SYSPROC ISPF LIBRARY        */\n/*  CONCATENATION.  THEN EDIT FILE 001 OF THE CBT TAPE, MAKE SURE    */\n/*  YOU'RE AT THE TOP OF THE FILE, AND THEN INVOKE THE COMMAND       */\n/*  %CBTUPDTE (WHICH IS THIS EDIT MACRO).  THIS MACRO WILL ADD       */\n/*  ./ ADD NAME=  CARDS IN ALL THE RIGHT PLACES IN FILE 001, SO      */\n/*  THAT FILE 001 WILL BE BROKEN UP INTO THE SAME PARTITIONED DATA   */\n/*  SET THAT I USE TO MAINTAIN FILE 001.                             */\n/*                                                                   */\n/*    USE OFFLOADW AND PDSLOADW FROM FILE 093, OR ANY EQUIVALENT     */\n/*    PROGRAMS, TO PERFORM THE SEPARATION INTO PDS MEMBERS, AND      */\n/*    THE SUBSEQUENT COMBINATION INTO A SEQUENTIAL FILE.    SG-03/99 */\n/*                                                                   */\nISREDIT MACRO  NOPROCESS\n ISREDIT FIND '//MVSMODS' 1 FIRST\n ISREDIT (ROW,COL) = CURSOR\n ISREDIT LOCATE &ROW\n ISREDIT LINE_BEFORE &ROW =  \"./ ADD NAME=$$$$$$$$\"\n TOP01: +\n ISREDIT FIND '// REGION'  1\n ISREDIT (ROW,COL) = CURSOR\n ISREDIT LINE_AFTER  &ROW =  \"./ ADD NAME=$$$CBT\"\n    SET &ROW = &ROW + 2\n ISREDIT LOCATE &ROW\n TOP02: +\n ISREDIT FIND '//***SECTION DISCLAIMER' 1\n ISREDIT (ROW,COL) = CURSOR\n    SET &ROW = &ROW - 1\n ISREDIT LOCATE &ROW\n ISREDIT LINE_BEFORE &ROW =  \"./ ADD NAME=$$DISCLM\"\n    SET &ROW = &ROW + 3\n ISREDIT LOCATE &ROW\n TOP03: +\n ISREDIT FIND '//***TAPE DUPLICATION'   1\n ISREDIT (ROW,COL) = CURSOR\n    SET &ROW = &ROW - 1\n ISREDIT LOCATE &ROW\n ISREDIT LINE_BEFORE &ROW =  \"./ ADD NAME=$$DUPTAP\"\n    SET &ROW = &ROW + 3\n ISREDIT LOCATE &ROW\n TOP04: +\n ISREDIT FIND '//***UPLOAD DOWNLOAD'    1\n ISREDIT (ROW,COL) = CURSOR\n    SET &ROW = &ROW - 1\n ISREDIT LOCATE &ROW\n ISREDIT LINE_BEFORE &ROW =  \"./ ADD NAME=$$DWNLOD\"\n    SET &ROW = &ROW + 3\n ISREDIT LOCATE &ROW\n TOP05: +\n ISREDIT FIND '//***NEWS BULLETIN S'    1\n ISREDIT (ROW,COL) = CURSOR\n    SET &ROW = &ROW - 1\n ISREDIT LOCATE &ROW\n ISREDIT LINE_BEFORE &ROW =  \"./ ADD NAME=$$EWSBUL\"\n    SET &ROW = &ROW + 3\n ISREDIT LOCATE &ROW\n TOP07: +\n ISREDIT FIND '//***USING THIS TAPE '   1\n ISREDIT (ROW,COL) = CURSOR\n    SET &ROW = &ROW - 1\n ISREDIT LOCATE &ROW\n ISREDIT LINE_BEFORE &ROW =  \"./ ADD NAME=$$HOWUSE\"\n    SET &ROW = &ROW + 3\n ISREDIT LOCATE &ROW\n TOP08: +\n ISREDIT FIND '//***REGULAR NEWS SEC'   1\n ISREDIT (ROW,COL) = CURSOR\n    SET &ROW = &ROW - 1\n ISREDIT LOCATE &ROW\n ISREDIT LINE_BEFORE &ROW =  \"./ ADD NAME=$$INF   \"\n    SET &ROW = &ROW + 3\n ISREDIT LOCATE &ROW\n TOP09: +\n ISREDIT FIND '//***TAPE ORDER SECTI'   1\n ISREDIT (ROW,COL) = CURSOR\n    SET &ROW = &ROW - 1\n ISREDIT LOCATE &ROW\n ISREDIT LINE_BEFORE &ROW =  \"./ ADD NAME=$$KORDER\"\n    SET &ROW = &ROW + 3\n ISREDIT LOCATE &ROW\n TOP10: +\n ISREDIT FIND '//***SECTION INFORMATION' 1\n ISREDIT (ROW,COL) = CURSOR\n    SET &ROW = &ROW - 2\n ISREDIT LOCATE &ROW\n ISREDIT LINE_BEFORE &ROW =  \"./ ADD NAME=$$NEWS  \"\n    SET &ROW = &ROW + 4\n ISREDIT LOCATE &ROW\n TOP13: +\n ISREDIT FIND '//***SECTION MODIFICATIO' 1\n ISREDIT (ROW,COL) = CURSOR\n    SET &ROW = &ROW - 1\n ISREDIT LOCATE &ROW\n ISREDIT LINE_BEFORE &ROW =  \"./ ADD NAME=$MODTAPE\"\n    SET &ROW = &ROW + 3\n ISREDIT LOCATE &ROW\n TOP14: +\n ISREDIT FIND '//***SECTION DUPLICATED ' 1\n ISREDIT (ROW,COL) = CURSOR\n    SET &ROW = &ROW - 1\n ISREDIT LOCATE &ROW\n ISREDIT LINE_BEFORE &ROW =  \"./ ADD NAME=$MULTMAT\"\n    SET &ROW = &ROW + 3\n ISREDIT LOCATE &ROW\n TOP15: +\n ISREDIT FIND '//***SECTION SPLA TAPE M' 1\n ISREDIT (ROW,COL) = CURSOR\n    SET &ROW = &ROW\n ISREDIT LOCATE &ROW\n ISREDIT LINE_BEFORE &ROW =  \"./ ADD NAME=$NOSPLA \"\n    SET &ROW = &ROW + 2\n ISREDIT LOCATE &ROW\n TOP16: +\n ISREDIT FIND '//***SECTION JES2 MODIFI' 1\n ISREDIT (ROW,COL) = CURSOR\n    SET &ROW = &ROW - 1\n ISREDIT LOCATE &ROW\n ISREDIT LINE_BEFORE &ROW =  \"./ ADD NAME=$NTAJES2\"\n    SET &ROW = &ROW + 3\n ISREDIT LOCATE &ROW\n TOP17: +\n ISREDIT FIND '//***SECTION JES3 MODIFI' 1\n ISREDIT (ROW,COL) = CURSOR\n    SET &ROW = &ROW - 1\n ISREDIT LOCATE &ROW\n ISREDIT LINE_BEFORE &ROW =  \"./ ADD NAME=$NTAJES3\"\n    SET &ROW = &ROW + 3\n ISREDIT LOCATE &ROW\n TOP20: +\n ISREDIT FIND '//***SECTION FILE UPDATE' 1\n ISREDIT (ROW,COL) = CURSOR\n    SET &ROW = &ROW - 1\n ISREDIT LOCATE &ROW\n ISREDIT LINE_BEFORE &ROW =  \"./ ADD NAME=$UPDATES\"\n    SET &ROW = &ROW + 3\n ISREDIT LOCATE &ROW\n TOP21: +\n ISREDIT FIND '//***SECTION CHANGE SECT' 1\n ISREDIT (ROW,COL) = CURSOR\n    SET &ROW = &ROW - 1\n ISREDIT LOCATE &ROW\n ISREDIT LINE_BEFORE &ROW =  \"./ ADD NAME=$ZCHANGE\"\n    SET &ROW = &ROW + 3\n ISREDIT LOCATE &ROW\n TOP22: +\n ISREDIT FIND '//***SECTION FILE STATUS' 1\n ISREDIT (ROW,COL) = CURSOR\n    SET &ROW = &ROW\n ISREDIT LOCATE &ROW\n ISREDIT LINE_BEFORE &ROW =  \"./ ADD NAME=#FILSTAT\"\n    SET &ROW = &ROW + 2\n ISREDIT LOCATE &ROW\n TOP23: +\n ISREDIT FIND '//***SECTION OFFLOAD SEC' 1\n ISREDIT (ROW,COL) = CURSOR\n    SET &ROW = &ROW\n ISREDIT LOCATE &ROW\n ISREDIT LINE_BEFORE &ROW =  \"./ ADD NAME=#OFFLOAD\"\n    SET &ROW = &ROW + 2\n ISREDIT LOCATE &ROW\n TOP24: +\n ISREDIT FIND '//***SECTION EMPTY FILE ' 1\n ISREDIT (ROW,COL) = CURSOR\n    SET &ROW = &ROW\n ISREDIT LOCATE &ROW\n ISREDIT LINE_BEFORE &ROW =  \"./ ADD NAME=#PEMPTY \"\n    SET &ROW = &ROW + 2\n ISREDIT LOCATE &ROW\n TOP26: +\n ISREDIT FIND '//***SECTION VERSION SEC' 1\n ISREDIT (ROW,COL) = CURSOR\n    SET &ROW = &ROW - 1\n ISREDIT LOCATE &ROW\n ISREDIT LINE_BEFORE &ROW =  \"./ ADD NAME=#VERSION\"\n    SET &ROW = &ROW + 3\n ISREDIT LOCATE &ROW\n TOP28: +\n ISREDIT FIND '//***SECTION DOCUMENTATION' 1\n ISREDIT (ROW,COL) = CURSOR\n    SET &ROW = &ROW - 1\n ISREDIT LOCATE &ROW\n ISREDIT LINE_BEFORE &ROW =  \"./ ADD NAME=@FILE001\"\n    SET &ROW = &ROW + 3\n ISREDIT LOCATE &ROW\n ISREDIT FIND '//***FILE 001' 1\n ISREDIT (ROW,COL) = CURSOR\n ISREDIT LOCATE &ROW\n    SET &ROW = &ROW + 2\n ISREDIT LOCATE &ROW\n /*   FILE SEARCH          */\n    SET &ROW = &ROW + 2\n ISREDIT LOCATE &ROW\n    SET &NOMB = 2\n    SET &NOMBR = &STR(00&NOMB)\nGETNOMB: +\n    IF &NOMB < 10                       THEN GOTO SET0\n    IF &NOMB < 100                      THEN GOTO SET1\n    IF &NOMB < 1000                     THEN GOTO SET2\nSET0: +\n    SET &NOMBR = &STR(00&NOMB)\n    GOTO DOFIL\nSET1: +\n    SET &NOMBR = &STR(0&NOMB)\n    GOTO DOFIL\nSET2: +\n    SET &NOMBR = &STR(&NOMB)\nDOFIL: +\n ISREDIT FIND '//***FILE '  1\n ISREDIT (ROW,COL) = CURSOR\n ISREDIT LINE_BEFORE &ROW =  \"./ ADD NAME=@FILE&NOMBR\"\n    SET &ROW = &ROW + 2\n ISREDIT LOCATE &ROW\n    SET &NOMB = &NOMB + 1\n    IF &NOMB > 500 THEN GOTO MD\n    GOTO GETNOMB\nMD: +\n ISREDIT FIND '//***SECTION ADDITION S' 1\n ISREDIT (ROW,COL) = CURSOR\n    SET &ROW = &ROW\n ISREDIT LOCATE &ROW\n ISREDIT LINE_BEFORE &ROW =  \"./ ADD NAME=@FZADDIT\"\n    SET &ROW = &ROW + 2\n ISREDIT LOCATE &ROW\nEXIT\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DOCCOV": {"ttr": 1030, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01 \\x00\\x13\\x01\\x02(\\x1f\\x01 \\x15/ \\x08\\x00\\x1e\\x00\\x06\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.32", "flags": 0, "createdate": "2002-10-08T00:00:00", "modifydate": "2020-05-31T20:08:13", "lines": 30, "newlines": 6, "modlines": 0, "user": "SBGOLOB"}, "text": "PROC 1 FNUM PREF(SBGOLOB) OUTPUT(X) NUMB(500) CBT(COV) FLE(@FILE) -\n       DSNM(COVDOC.PDS)\n/* ------------------------------------------------------------- */\n/* CLIST TO FIX COLUMNS 73-80 IN THE COV DOCUMENTATION, FOR A    */\n/* SPECIFIC FILE NUMBER.  DATASET IN WHICH THE MEMBER IS FIXED,  */\n/* IS THE STAGING DATASET FOR THAT COV TAPE FILE.                */\n/* ------------------------------------------------------------- */\n     SET &FILVER = &STR(COV&NUMB)\n     SET &FILNAM = &STR(&FILVER..FILE&FNUM)\n     SET &DATAST = &STR(&PREF..&FILNAM)\n     SET &VER    = &SUBSTR(1:1,&NUMB)\n     SET &MODIF  = &SUBSTR(2:3,&NUMB)\n     WRITE ISPF STATS:  VERSION    IS &VER\n     WRITE ISPF STATS:  MODIF LVL  IS &MODIF\n     ALLOC F(INPUT)  SH REUSE DA('&DATAST(&FLE&FNUM)')\n     ALLOC F(OUTPUT) SH REUSE DA('&DATAST(&OUTPUT)')\n     WRITE FIXING COLUMNS 73-80 FOR COVDOC IN MEMBER &FLE&FNUM\n     WRITE DATASET BEING FIXED:  &DATAST\n     WRITE OUTPUT MEMBER NAME :  &OUTPUT\n     CALL 'SBGOLOB.LOAD(DOCFILE)'\n     WRITE PDS86 BEING CALLED TO RENAME OUTPUT MEMBER\n     PDS86 '&DATAST' XISPM\n     ATTRIB &OUTPUT ADDSTATS ID(&CBT-&NUMB) VER(&VER) MOD(&MODIF)\n     RENAME &OUTPUT &FLE&FNUM SWAP\n     DELETE &OUTPUT\n     END\n     WRITE MEMBER &FLE&FNUM SUCCESSFULLY RENAMED\n     FREE FI(INPUT OUTPUT)\n     WRITE INPUT AND OUTPUT FILES FREED\n     WRITE DOCFIL EXECUTION COMPLETED WITH RETURN CODE &LASTCC\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DOCFIL": {"ttr": 1032, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x1d\\x00\\x13\\x01\\x02(\\x1f\\x01 \\x15/ \\x08\\x00\\x1e\\x00\\x06\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.29", "flags": 0, "createdate": "2002-10-08T00:00:00", "modifydate": "2020-05-31T20:08:13", "lines": 30, "newlines": 6, "modlines": 0, "user": "SBGOLOB"}, "text": "PROC 1 FNUM PREF(SBGOLOB) OUTPUT(X) NUMB(500) CBT(CBT) FLE(@FILE) -\n       DSNM(CBTDOC.PDS)\n/* ------------------------------------------------------------- */\n/* CLIST TO FIX COLUMNS 73-80 IN THE CBT DOCUMENTATION, FOR A    */\n/* SPECIFIC FILE NUMBER.  DATASET IN WHICH THE MEMBER IS FIXED,  */\n/* IS THE STAGING DATASET FOR THAT CBT TAPE FILE.                */\n/* ------------------------------------------------------------- */\n     SET &FILVER = &STR(CBT&NUMB)\n     SET &FILNAM = &STR(&FILVER..FILE&FNUM)\n     SET &DATAST = &STR(&PREF..&FILNAM)\n     SET &VER    = &SUBSTR(1:1,&NUMB)\n     SET &MODIF  = &SUBSTR(2:3,&NUMB)\n     WRITE ISPF STATS:  VERSION    IS &VER\n     WRITE ISPF STATS:  MODIF LVL  IS &MODIF\n     ALLOC F(INPUT)  SH REUSE DA('&DATAST(&FLE&FNUM)')\n     ALLOC F(OUTPUT) SH REUSE DA('&DATAST(&OUTPUT)')\n     WRITE FIXING COLUMNS 73-80 FOR CBTDOC IN MEMBER &FLE&FNUM\n     WRITE DATASET BEING FIXED:  &DATAST\n     WRITE OUTPUT MEMBER NAME :  &OUTPUT\n     CALL 'SBGOLOB.LOAD(DOCFILE)'\n     WRITE PDS86 BEING CALLED TO RENAME OUTPUT MEMBER\n     PDS86 '&DATAST' XISPM\n     ATTRIB &OUTPUT ADDSTATS ID(&CBT-&NUMB) VER(&VER) MOD(&MODIF)\n     RENAME &OUTPUT &FLE&FNUM SWAP\n     DELETE &OUTPUT\n     END\n     WRITE MEMBER &FLE&FNUM SUCCESSFULLY RENAMED\n     FREE FI(INPUT OUTPUT)\n     WRITE INPUT AND OUTPUT FILES FREED\n     WRITE DOCFIL EXECUTION COMPLETED WITH RETURN CODE &LASTCC\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DOCFILA": {"ttr": 1034, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01!\\x00\\x13\\x01\\x02(\\x1f\\x01 \\x15/ \\x08\\x00%\\x00\\x06\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.33", "flags": 0, "createdate": "2002-10-08T00:00:00", "modifydate": "2020-05-31T20:08:13", "lines": 37, "newlines": 6, "modlines": 0, "user": "SBGOLOB"}, "text": "PROC 0 FNUM PREF(SBGOLOB) OUTPUT(X) NUMB(500) CBT(CBT)            -\n       DSNM(CBT.EDIT)\n/* ------------------------------------------------------------- */\n/* CLIST TO FIX COLUMNS 73-80 IN THE CBT DOCUMENTATION, FOR      */\n/* THE ENTIRE FILE 001.                                          */\n/* ------------------------------------------------------------- */\n     WRITE INPUT DATASET NAME WITHOUT THE PREFIX &PREF\n     READ &INPTDSN\n     WRITE INPUT MEMBER NAME\n     READ &INPTMEM\n     SET &INPT = &STR(&&PREF..&INPTDSN(&INPTMEM))\n     WRITE INPUT TO DOCFILE PROGRAM IS &INPT\n     WRITE OUTPUT DATASET NAME WITHOUT THE PREFIX &PREF\n     SET &VER    = &SUBSTR(1:1,&NUMB)\n     SET &MODIF  = &SUBSTR(2:3,&NUMB)\n     READ &OTPTDSN\n     WRITE OUTPUT MEMBER NAME\n     READ &OTPTMEM\n     SET &OTPT = &STR(&PREF..&OTPTDSN(&OTPTMEM))\n     WRITE OUTPUT OF DOCFILE PROGRAM IS &OTPT\n     SET &FILVER = &STR(CBT&NUMB)\n     SET &FILNAM = &STR(&FILVER..FILE&FNUM)\n     ALLOC F(INPUT)  SH REUSE DA('&INPT')\n     ALLOC F(OUTPUT) SH REUSE DA('&OTPT')\n     WRITE FIXING COLUMNS 73-80 FOR CBTDOC IN DATASET &INPT\n     WRITE OUTPUT DATASET NAME :  &OTPT\n     CALL 'SBGOLOB.LOAD(DOCFILE)'\n     WRITE PDS86 BEING CALLED TO ADD ISPF STATS\n     WRITE ISPF STATS:  VERSION    IS &VER\n     WRITE ISPF STATS:  MODIF LVL  IS &MODIF\n     PDS86 '&PREF..&OTPTDSN' XISPM\n     ATTRIB &OTPTMEM ADDSTATS ID(&CBT-&NUMB) VER(&VER) MOD(&MODIF)\n     END\n     WRITE MEMBER &OTPTMEM STATISTICS ADDED\n     FREE FI(INPUT OUTPUT)\n     WRITE INPUT AND OUTPUT FILES FREED\n     WRITE DOCFIL EXECUTION COMPLETED WITH RETURN CODE &LASTCC\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DOCFILE": {"ttr": 1036, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00\\x03\\x00\\x99\\x08o\\x01\\x170/\\x17H\\x00/\\x00 \\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "1999-03-27T00:00:00", "modifydate": "2017-10-29T17:48:03", "lines": 47, "newlines": 32, "modlines": 0, "user": "SBGOLOB"}, "text": "*          DATA FILE 006 OF CBT MVS UTILITIES TAPE.  PGM=DOCFILE.\n*             UPDATED 10/29/2017 BY SAM GOLOB.\n*          DATA SET CBT1892    AT LEVEL 010 AS OF 03/27/99\n*          DATA SET CBT1892    AT LEVEL 009 AS OF 07/20/89\n*   CHANGE THE COMMENTS IN COLUMNS 72-80 FOR THE DOC FILE  AXC 07/89\n*   TAKE THE POSSIBILITY OF LOWER CASE INTO ACCOUNT.       SBG 03/99\n*   UPDATED FOR 4-DIGIT FILE NUMBERS.              .       SBG 10/17\nCBT1892  SAVEALL REG=2             SAVE THE REGISTERS\n         OPEN  (INPUT,(INPUT))     OPEN THE INPUT\n         OPEN  (OUTPUT,(OUTPUT))   OPEN THE OUTPUT\nREAD     GET   INPUT,AREA          READ A RECORD\n         MVC   OUT(72),AREA        MOVE 1ST BYTES TO OUTPUT\n         MVC   OUTWK(10),AREA      MOVE 10 BYTES TO WKAREA SBG 03/99\n         OC    OUTWK(10),=C'          '  UPPERCASE THEM    SBG 03/99\n         MVC   OUTWK2(10),AREA+13        THIS AREA IS TELLTALE\n         OC    OUTWK2(10),=C'          ' UPPERCASE IT\n         CLC   =C'//***FILE',OUTWK   CHECK FOR FILE CHANGE SBG 10/17\n         BE    MOVE                YES A FILE CHANGE\n         CLC   =C'ADDITION S',OUTWK2 CHECK FOR BACK END    SBG 10/17\n         BE    FILE000             YES BACK TO FILE 000\n         CLC   =C'JCL SECTIO',OUTWK2 CHECK FOR BACK END    SBG 10/17\n         BE    FILE000             YES BACK TO FILE 000\n         B     WRITE               GO WRITE THE RECORD\nMOVE     MVC   FILE(5),=C'FILE '   MOVE FILE CONSTANT      SBG 10/17\n         MVC   NUMBER(4),AREA+9    MOVE FILE NUMBER        AXC 07/89\nWRITE    MVC   OUTWK(10),=C'          '  BLANK WKAREA      SBG 03/99\n         MVC   OUTWK2(10),=C'          ' BLANK WKAREA      SBG 10/17\n         PUT   OUTPUT,OUTFILE      WRITE OUT THE NUMBER\n         B     READ                GET A NEW RECORD\nFILE000  MVC   FILE(8),=C'JCL FILE' SET TO JCL FILE        AXC 07/89\n         B     WRITE               GO WRITE THE RECORD\nEOJ      CLOSE OUTPUT              CLOSE THE INPUT\n         CLOSE INPUT               CLOSE THE OUTPUT\n         ENDALL\nINPUT    DCB   DSORG=PS,DDNAME=INPUT,MACRF=GM,EODAD=EOJ\nOUTPUT   DCB   DSORG=PS,DDNAME=OUTPUT,MACRF=PM,                        X\n               LRECL=80,RECFM=FB\nAREA     DS    CL80\nOUTFILE  DS    0CL80\nOUT      DS    CL72\nFILE     DC    CL4'DOC '                                   SBG 10/17\nNUMBER   DC    CL4'FILE'                                   SBG 10/17\nOUTWK    DS    0CL10               DEFINE 10 BYTE WKAREA   SBG 03/99\nOUTINIT  DC    CL10' '             INIT WKAREA TO BLANKS   SBG 03/99\nOUTWK2   DS    0CL10               DEFINE 10 BYTE WKAREA   SBG 10/17\nOUTINI2  DC    CL10' '             INIT WKAREA TO BLANKS   SBG 10/17\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DOCFILE$": {"ttr": 1038, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0b\\x00%\\x01\\x00\\x17O\\x01 \\x15/ \\x08\\x00\\x1d\\x00\\x1f\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.11", "flags": 0, "createdate": "2000-06-22T00:00:00", "modifydate": "2020-05-31T20:08:25", "lines": 29, "newlines": 31, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//         DD DISP=SHR,DSN=SBGOLOB.CBT500.FILE006\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.B.ASM(DOCFILE)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(CYL,2),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SBGOLOB.LOAD\n//SYSLMOD  DD  DISP=SHR,DSN=SBGOLOB.LOAD\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETSSI  CB500006\n SETCODE AC(0)\n NAME    DOCFILE(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DOCFILE#": {"ttr": 1040, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x07\\x00\\x99\\x08\\x7f\\x01\\x17(O\\x00Q\\x00\\x08\\x00\\x08\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1999-03-28T00:00:00", "modifydate": "2017-10-11T00:51:07", "lines": 8, "newlines": 8, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBP  JOB (ACCT#),S-GOLOB,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X\n//*\n//COL7380 EXEC PGM=DOCFILE\n//STEPLIB  DD  DISP=SHR,DSN=SBGOLOB.LOAD\n//INPUT    DD  DISP=SHR,DSN=SBGOLOB.CBT.EDIT(FILE001$)\n//OUTPUT   DD  DISP=SHR,DSN=SBGOLOB.CBT.EDIT(FILE001#)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DOCFILE@": {"ttr": 1042, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x99\\x08\\x7f\\x00\\x99\\x08\\x7f\\tR\\x00\\x08\\x00\\x08\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-03-28T00:00:00", "modifydate": "1999-03-28T09:52:00", "lines": 8, "newlines": 8, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBP  JOB (ACCT#),S-GOLOB,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X\n//*\n//COL7380 EXEC PGM=DOCFILE\n//STEPLIB  DD  DISP=SHR,DSN=SBGOLOB.LOAD\n//INPUT    DD  DISP=SHR,DSN=SBGOLOB.CBTDOC.PDS(FILE001)\n//OUTPUT   DD  DISP=SHR,DSN=SBGOLOB.CBTDOC.PDS(FILE001B)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DOCFILN": {"ttr": 1044, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x1e\\x00\\x13\\x01\\x02(\\x1f\\x01 \\x15/ \\x08\\x00\\x1e\\x00\\x06\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.30", "flags": 0, "createdate": "2002-10-08T00:00:00", "modifydate": "2020-05-31T20:08:13", "lines": 30, "newlines": 6, "modlines": 0, "user": "SBGOLOB"}, "text": "PROC 1 FNUM PREF(SBGOLOB) OUTPUT(X) NUMB(500) CBT(CBT) FLE(@FILE) -\n       DSNM(CBTDOC.PDS)\n/* ------------------------------------------------------------- */\n/* CLIST TO FIX COLUMNS 73-80 IN THE CBT DOCUMENTATION, FOR A    */\n/* SPECIFIC FILE NUMBER.  DATASET IN WHICH THE MEMBER IS FIXED,  */\n/* IS THE CBT TAPE DOCUMENTATION PARTITIONED DATASET.            */\n/* ------------------------------------------------------------- */\n     SET &FILVER = &STR(CBT&NUMB)\n     SET &FILNAM = &STR(&FILVER..FILE&FNUM)\n     SET &DATAST = &STR(&PREF..&DSNM)\n     SET &VER    = &SUBSTR(1:1,&NUMB)\n     SET &MODIF  = &SUBSTR(2:3,&NUMB)\n     WRITE ISPF STATS:  VERSION    IS &VER\n     WRITE ISPF STATS:  MODIF LVL  IS &MODIF\n     ALLOC F(INPUT)  SH REUSE DA('&DATAST(&FLE&FNUM)')\n     ALLOC F(OUTPUT) SH REUSE DA('&DATAST(&OUTPUT)')\n     WRITE FIXING COLUMNS 73-80 FOR CBTDOC IN MEMBER &FLE&FNUM\n     WRITE DATASET BEING FIXED:  &DATAST\n     WRITE OUTPUT MEMBER NAME :  &OUTPUT\n     CALL 'SBGOLOB.LOAD(DOCFILE)'\n     WRITE PDS86 BEING CALLED TO RENAME OUTPUT MEMBER\n     PDS86 '&DATAST' XISPM\n     ATTRIB &OUTPUT ADDSTATS ID(&CBT-&NUMB) VER(&VER) MOD(&MODIF)\n     RENAME &OUTPUT &FLE&FNUM SWAP\n     DELETE &OUTPUT\n     END\n     WRITE MEMBER &FLE&FNUM SUCCESSFULLY RENAMED\n     FREE FI(INPUT OUTPUT)\n     WRITE INPUT AND OUTPUT FILES FREED\n     WRITE DOCFIL EXECUTION COMPLETED WITH RETURN CODE &LASTCC\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DOCFILX": {"ttr": 1046, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01(\\x009\\x01\\x02(\\x1f\\x01 \\x15/ \\x08\\x00F\\x00\\x06\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.40", "flags": 0, "createdate": "2002-10-08T00:00:00", "modifydate": "2020-05-31T20:08:39", "lines": 70, "newlines": 6, "modlines": 0, "user": "SBGOLOB"}, "text": "/* REXX */\n/* CLS2REXXed by SBGOLOB on 28 Aug 2003 at 08:34:35  */\n/* This REXX requires the CLS2REXX and TSOPROC REXXes on File 646.  */\n/* This REXX was converted from the DOCFIL CLIST, with adjustments. */\n/* With 4-digit numbers, you have to execute with FLE(@FIL) .       */\nSignal On NoValue\nParse source opsys . exec_name .\n\nParse upper arg argument_list\nCall TSOPROC argument_list,,\n  'PROC 1 FNUM PREF(SBGOLOB) OUTPU(X) NUMB(500) CBT(CBT) FLE(@FILE)\n         DSNM(CBTDOC.PDS)'\nInterpret Result\nIf RC \u00ac= 0\n  Then\n    Do\n    Say tsoproc_msg\n    Exit RC\n    End\n/* ------------------------------------------------------------- */\n/* CLIST TO FIX COLUMNS 73-80 IN THE CBT DOCUMENTATION, FOR A    */\n/* SPECIFIC FILE NUMBER.  DATASET IN WHICH THE MEMBER IS FIXED,  */\n/* IS THE STAGING DATASET FOR THAT CBT TAPE FILE.                */\n/* ------------------------------------------------------------- */\nfilver = \"CBT\"numb\nfilnam = filver\".FILE\"fnum\ndatast = pref\".\"filnam\nvers = substrc(1,1,numb)\nmodif = substrc(2,3,numb)\nSay \"ISPF STATS:  VERSION    IS\" vers\nSay \"ISPF STATS:  MODIF LVL  IS\" modif\nAddress TSO \"ALLOC F(INPUT)  SH REUSE DA('\"datast\"(\"fle||fnum\")')\"\nAddress TSO \"ALLOC F(OUTPUT) SH REUSE DA('\"datast\"(\"outpu\")')\"\nSay \"FIXING COLUMNS 73-80 FOR CBTDOC IN MEMBER\" fle||fnum\nSay \"DATASET BEING FIXED:\"  datast\nSay \"OUTPUT MEMBER NAME :\"  outpu\nAddress TSO \"CALL 'SBGOLOB.LOAD(DOCFILE)'\"\nSay \"PDS86 BEING CALLED TO RENAME OUTPUT MEMBER\"\n line01 = ' AT 'outpu' AD  ID(CBT-'numb') VER('vers') MOD('modif') '\n   QUEUE line01\n line02 = ' RENAME 'outpu' 'fle||fnum'  SWAP '\n   QUEUE line02\n line03 = ' DELETE 'outpu' '\n   QUEUE line03\n line04 = ' END '\n   QUEUE line04\nAddress TSO \"PDS86 '\"datast\"' XISPM\"\nSay \"Current Return Code \" rc\nSay \"MEMBER\" fle||fnum \"SUCCESSFULLY RENAMED\"\nAddress TSO \"FREE FI(INPUT OUTPUT)\"\nSay \"INPUT AND OUTPUT FILES FREED\"\nSay \"DOCFIL EXECUTION COMPLETED WITH RETURN CODE\" rc\nExit 0\n\nsubstrc: Procedure\n If arg(3) = ''\n   Then\n     Do\n     s = Arg(1)\n     l = 1\n     v = arg(2)\n     End\n   Else\n     Do\n     s = arg(1)\n     l = arg(2)-arg(1)+1\n     v = arg(3)\n     End\n  Return substr(v,s,l)\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DOCFIL01": {"ttr": 1281, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x99\\x08o\\x00\\x99\\x08o##\\x00%\\x00 \\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1999-03-27T00:00:00", "modifydate": "1999-03-27T23:23:00", "lines": 37, "newlines": 32, "modlines": 0, "user": "SBGOLOB"}, "text": "*          DATA SET CBT1892    AT LEVEL 010 AS OF 03/27/99\n*          DATA SET CBT1892    AT LEVEL 009 AS OF 07/20/89\n*   CHANGE THE COMMENTS IN COLUMNS 72-80 FOR THE DOC FILE  AXC 07/89    00001\n*   TAKE THE POSSIBILITY OF LOWER CASE INTO ACCOUNT.       SBG 03/99\nCBT1892  SAVEALL REG=2             SAVE THE REGISTERS                   00002\n         OPEN  (INPUT,(INPUT))     OPEN THE INPUT                       00003\n         OPEN  (OUTPUT,(OUTPUT))   OPEN THE OUTPUT                      00004\nREAD     GET   INPUT,AREA          READ A RECORD                        00005\n         MVC   OUT(72),AREA        MOVE 1ST BYTES TO OUTPUT             00006\n         MVC   OUTWK(10),AREA      MOVE 10 BYTES TO WKAREA SBG 03/99    00006\n         OC    OUTWK(10),=C'          '  UPPERCASE THEM    SBG 03/99\n         CLC   =C'//***FILE ',OUTWK  CHECK FOR FILE CHANGE SBG 03/99    00007\n         BE    MOVE                YES A FILE CHANGE                    00008\n         CLC   =C'//PANPAN',OUTWK  CHECK FOR BACK END      SBG 03/99    00009\n         BE    FILE000             YES BACK TO FILE 000                 00010\n         B     WRITE               GO WRITE THE RECORD                  00011\nMOVE     MVC   FILE,=C'FILE '      NOVE FILE CONSTANT      AXC 07/89    00012\n         MVC   NUMBER(3),AREA+10   NOVE FILE NUMBER        AXC 07/89    00013\nWRITE    MVC   OUTWK(10),=C'          '  BLANK WKAREA      SBG 03/99\n         PUT   OUTPUT,OUTFILE      WRITE OUT THE NUMBER                 00014\n         B     READ                GET A NEW RECORD                     00015\nFILE000  MVC   FILE(8),=C'JCL FILE' SET TO JCL FILE        AXC 07/89    00016\n         B     WRITE               GO WRITE THE RECORD                  00017\nEOJ      CLOSE OUTPUT              CLOSE THE INPUT                      00018\n         CLOSE INPUT               CLOSE THE OUTPUT                     00019\n         ENDALL                                                         00020\nINPUT    DCB   DSORG=PS,DDNAME=INPUT,MACRF=GM,EODAD=EOJ                 00021\nOUTPUT   DCB   DSORG=PS,DDNAME=OUTPUT,MACRF=PM,                        X00022\n               LRECL=80,RECFM=FB                                        00023\nAREA     DS    CL80                                                     00024\nOUTFILE  DS    0CL80                                                    00025\nOUT      DS    CL72                                                     00026\nFILE     DC    CL5'DOC F'                                  AXC 07/89    00027\nNUMBER   DC    CL3'ILE'                                    AXC 07/89    00028\nOUTWK    DS    0CL10               DEFINE 10 BYTE WKAREA   SBG 03/99\nOUTINIT  DC    CL10' '             INIT WKAREA TO BLANKS   SBG 03/99\n         END                                                            00029\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ENDALL": {"ttr": 1283, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x92!?\\x00\\x92!?\\x08\\x05\\x00\\x1f\\x00\\x1f\\x00\\x00\\xc3\\xd5\\xc2\\xd5\\xe3\\xd9\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-07-31T00:00:00", "modifydate": "1992-07-31T08:05:00", "lines": 31, "newlines": 31, "modlines": 0, "user": "CNBNTRS"}, "text": "         MACRO\n&NAME    ENDALL &CODE=\n         GBLB  &TIME\n         GBLB  &SAVRENT\n         GBLC  &SAVNDX\n         AIF   ('&CODE' GT '4095').MESS1\n&NAME    DS    0H\n         AIF   (NOT &SAVRENT).NOTRENT\n&SAVRENT SETB  0\n         LR    1,13                LOAD SAVE AREA ADDRESS\n         L     13,4(0,13)          RE-LOAD REGISTER 13\n         LA    0,72                LOAD NUMBER OF BYTES TO BE FREED\n         FREEMAIN   R,LV=(0),A=(1) FREE SAVE AREA STORAGE\n         AGO   .RENT\n.NOTRENT ANOP\n         AIF   (NOT &TIME).NOSAVE\n&TIME    SETB  0\n         L     13,SAVE&SAVNDX+4    RE-LOAD REGISTER 13\n.RENT    ANOP\n         AIF   ('&CODE' EQ '(15)').ENDIT\n         AIF   ('&CODE' EQ '').COND1\n         LA    15,&CODE           LOAD CODE TO REG 15\n         AGO   .ENDIT\n.MESS1   MNOTE 12,'***** RETURN CODE PASSED GREATER THAN 4095 *****'\n         MEXIT\n.NOSAVE  MNOTE 12,'***** SAVEALL NOT ISSUED PRIOR TO ENDALL *****'\n         MEXIT\n.COND1   LA    15,0               LOAD ZERO (NO CODE) TO REG 15\n.ENDIT   ANOP\n         RETURN     (14,12),T,RC=(15)\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "GENCOV": {"ttr": 1285, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01c\\x00\\x13\\x01\\x01\\x01/\\x01 \\x15/ \\x08\\x00;\\x00\\x04\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.99", "flags": 0, "createdate": "2001-01-12T00:00:00", "modifydate": "2020-05-31T20:08:13", "lines": 59, "newlines": 4, "modlines": 0, "user": "SBGOLOB"}, "text": "PROC 1 FNUM PREF(SBGOLOB) OUTPUT($$$#DATE) NUMB(500) CBT(COV) FLE(FILE)\n  SET SYSOUTTRAP EQ 0\n     ALLOC F(OUT) DA('&PREF..&CBT&NUMB..&FLE&FNUM(&OUTPUT)') SH KEEP\n     OPENFILE OUT OUTPUT\n  SET SYSOUTTRAP EQ 20\n  PDS86 '&PREF..&CBT&NUMB..&FLE&FNUM' XISPM\n  VER :\n  END\n  LISTD '&PREF..&CBT&NUMB..&FLE&FNUM'\n  SET &OUT = &STR(CBT OVERFLOW TAPE - VERSION &NUMB    FILE:  &FNUM  )\n  WRITE &OUT\n  PUTFILE OUT\n  SET &OUT = &STR(    )\n  WRITE &OUT\n  PUTFILE OUT\n  SET &OUT = &STR(    ORIGINAL DSNAME:  &SYSOUTLINE1)\n  WRITE &OUT\n  PUTFILE OUT\n  SET &OUT = &STR(    ---------------               )\n  WRITE &OUT\n  PUTFILE OUT\n  SET &OUT = &STR(                    &SYSOUTLINE2)\n  WRITE &OUT\n  PUTFILE OUT\n  SET &OUT = &STR(                    &SYSOUTLINE3)\n  WRITE &OUT\n  PUTFILE OUT\n  SET &OUT = &STR(                  )\n  WRITE &OUT\n  PUTFILE OUT\n  SET &OUT = &STR(   &SYSOUTLINE12  )\n  WRITE &OUT\n  PUTFILE OUT\n  SET &OUT = &STR(   &SYSOUTLINE13  )\n  WRITE &OUT\n  PUTFILE OUT\n  SET &OUT = &STR(    )\n  WRITE &OUT\n  PUTFILE OUT\n  SET &OUT = &STR(TIME THIS PDS WAS SHIPPED:   &SYSDATE    &SYSTIME -\n   UTC-5:00   )\n  WRITE &OUT\n  PUTFILE OUT\n  SET &OUT = &STR(    )\n  WRITE &OUT\n  PUTFILE OUT\n  CLOSFILE OUT\n  FREE F(OUT)\n  SET SYSOUTTRAP EQ 0\n     SET &VER    = &SUBSTR(1:1,&NUMB)\n     SET &MODIF  = &SUBSTR(2:3,&NUMB)\n     WRITE ADDING ISPF STATS: VERSION   IS &VER\n     WRITE ADDING ISPF STATS: MODIF LVL IS &MODIF\n     WRITE\n  SET &CBTSTR = &STR(&CBT-&NUMB)\n  PDS86 '&PREF..&CBT&NUMB..&FLE&FNUM' XISPM\n  ATTRIB &OUTPUT ADDSTATS ID(&CBTSTR) VER(&VER) MOD(&MODIF)\n  END\n  SET SYSOUTTRAP EQ 0\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "GENDAT": {"ttr": 1287, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01c\\x00\\x13\\x01\\x01\\x01/\\x01 \\x15/ \\x08\\x00;\\x00\\x04\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.99", "flags": 0, "createdate": "2001-01-12T00:00:00", "modifydate": "2020-05-31T20:08:13", "lines": 59, "newlines": 4, "modlines": 0, "user": "SBGOLOB"}, "text": "PROC 1 FNUM PREF(SBGOLOB) OUTPUT($$$#DATE) NUMB(500) CBT(CBT) FLE(FILE)\n  SET SYSOUTTRAP EQ 0\n     ALLOC F(OUT) DA('&PREF..&CBT&NUMB..&FLE&FNUM(&OUTPUT)') SH KEEP\n     OPENFILE OUT OUTPUT\n  SET SYSOUTTRAP EQ 20\n  PDS86 '&PREF..&CBT&NUMB..&FLE&FNUM' XISPM\n  VER :\n  END\n  LISTD '&PREF..&CBT&NUMB..&FLE&FNUM'\n  SET &OUT = &STR(REGULAR CBT TAPE - VERSION &NUMB    FILE:  &FNUM  )\n  WRITE &OUT\n  PUTFILE OUT\n  SET &OUT = &STR(    )\n  WRITE &OUT\n  PUTFILE OUT\n  SET &OUT = &STR(    ORIGINAL DSNAME:  &SYSOUTLINE1)\n  WRITE &OUT\n  PUTFILE OUT\n  SET &OUT = &STR(    ---------------               )\n  WRITE &OUT\n  PUTFILE OUT\n  SET &OUT = &STR(                    &SYSOUTLINE2)\n  WRITE &OUT\n  PUTFILE OUT\n  SET &OUT = &STR(                    &SYSOUTLINE3)\n  WRITE &OUT\n  PUTFILE OUT\n  SET &OUT = &STR(                  )\n  WRITE &OUT\n  PUTFILE OUT\n  SET &OUT = &STR(   &SYSOUTLINE12  )\n  WRITE &OUT\n  PUTFILE OUT\n  SET &OUT = &STR(   &SYSOUTLINE13  )\n  WRITE &OUT\n  PUTFILE OUT\n  SET &OUT = &STR(    )\n  WRITE &OUT\n  PUTFILE OUT\n  SET &OUT = &STR(TIME THIS PDS WAS SHIPPED:   &SYSDATE    &SYSTIME -\n   UTC-5:00   )\n  WRITE &OUT\n  PUTFILE OUT\n  SET &OUT = &STR(    )\n  WRITE &OUT\n  PUTFILE OUT\n  CLOSFILE OUT\n  FREE F(OUT)\n  SET SYSOUTTRAP EQ 0\n     SET &VER    = &SUBSTR(1:1,&NUMB)\n     SET &MODIF  = &SUBSTR(2:3,&NUMB)\n     WRITE ADDING ISPF STATS: VERSION   IS &VER\n     WRITE ADDING ISPF STATS: MODIF LVL IS &MODIF\n     WRITE\n  SET &CBTSTR = &STR(&CBT-&NUMB)\n  PDS86 '&PREF..&CBT&NUMB..&FLE&FNUM' XISPM\n  ATTRIB &OUTPUT ADDSTATS ID(&CBTSTR) VER(&VER) MOD(&MODIF)\n  END\n  SET SYSOUTTRAP EQ 0\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "GENDATE": {"ttr": 1289, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01c\\x00\\x13\\x01\\x01\\x01/\\x01 \\x15/ \\x08\\x00=\\x00\\x04\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.99", "flags": 0, "createdate": "2001-01-12T00:00:00", "modifydate": "2020-05-31T20:08:13", "lines": 61, "newlines": 4, "modlines": 0, "user": "SBGOLOB"}, "text": "PROC 0 PREF(SBGOLOB) OUTPUT($$$#DATE) NUMB(500) CBT(CBT) FLE(FILE)\n   WRITENR ENTER FILE NUMBER:\n   READ &FNUM\n  SET SYSOUTTRAP EQ 0\n     ALLOC F(OUT) DA('&PREF..&CBT&NUMB..&FLE&FNUM(&OUTPUT)') SH KEEP\n     OPENFILE OUT OUTPUT\n  SET SYSOUTTRAP EQ 20\n  PDS86 '&PREF..&CBT&NUMB..&FLE&FNUM' XISPM\n  VER :\n  END\n  LISTD '&PREF..&CBT&NUMB..&FLE&FNUM'\n  SET &OUT = &STR(REGULAR CBT TAPE - VERSION &NUMB    FILE:  &FNUM  )\n  WRITE &OUT\n  PUTFILE OUT\n  SET &OUT = &STR(    )\n  WRITE &OUT\n  PUTFILE OUT\n  SET &OUT = &STR(    ORIGINAL DSNAME:  &SYSOUTLINE1)\n  WRITE &OUT\n  PUTFILE OUT\n  SET &OUT = &STR(    ---------------               )\n  WRITE &OUT\n  PUTFILE OUT\n  SET &OUT = &STR(                    &SYSOUTLINE2)\n  WRITE &OUT\n  PUTFILE OUT\n  SET &OUT = &STR(                    &SYSOUTLINE3)\n  WRITE &OUT\n  PUTFILE OUT\n  SET &OUT = &STR(                  )\n  WRITE &OUT\n  PUTFILE OUT\n  SET &OUT = &STR(   &SYSOUTLINE12  )\n  WRITE &OUT\n  PUTFILE OUT\n  SET &OUT = &STR(   &SYSOUTLINE13  )\n  WRITE &OUT\n  PUTFILE OUT\n  SET &OUT = &STR(    )\n  WRITE &OUT\n  PUTFILE OUT\n  SET &OUT = &STR(TIME THIS PDS WAS SHIPPED:   &SYSDATE    &SYSTIME -\n   UTC-5:00   )\n  WRITE &OUT\n  PUTFILE OUT\n  SET &OUT = &STR(    )\n  WRITE &OUT\n  PUTFILE OUT\n  CLOSFILE OUT\n  FREE F(OUT)\n  SET SYSOUTTRAP EQ 0\n     SET &VER    = &SUBSTR(1:1,&NUMB)\n     SET &MODIF  = &SUBSTR(2:3,&NUMB)\n     WRITE ADDING ISPF STATS: VERSION   IS &VER\n     WRITE ADDING ISPF STATS: MODIF LVL IS &MODIF\n     WRITE\n  SET &CBTSTR = &STR(&CBT-&NUMB)\n  PDS86 '&PREF..&CBT&NUMB..&FLE&FNUM' XISPM\n  ATTRIB &OUTPUT ADDSTATS ID(&CBTSTR) VER(&VER) MOD(&MODIF)\n  END\n  SET SYSOUTTRAP EQ 0\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "GENDATN": {"ttr": 1291, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01c\\x00\\x13\\x01\\x01\\x01/\\x01 \\x15/ \\x08\\x008\\x00\\x04\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.99", "flags": 0, "createdate": "2001-01-12T00:00:00", "modifydate": "2020-05-31T20:08:13", "lines": 56, "newlines": 4, "modlines": 0, "user": "SBGOLOB"}, "text": "PROC 1 FNUM PREF(SBGOLOB) OUTPUT($$$#DATE) NUMB(500) CBT(CBT) FLE(FILE)\n  SET SYSOUTTRAP EQ 0\n     ALLOC F(OUT) DA('&PREF..&CBT&NUMB..&FLE&FNUM(&OUTPUT)') SH KEEP\n     OPENFILE OUT OUTPUT\n  SET SYSOUTTRAP EQ 20\n  PDS86 '&PREF..&CBT&NUMB..&FLE&FNUM' XISPM\n  VER :\n  END\n  LISTD '&PREF..&CBT&NUMB..&FLE&FNUM'\n  SET &OUT = &STR(REGULAR CBT TAPE - VERSION &NUMB    FILE:  &FNUM  )\n  WRITE &OUT\n  PUTFILE OUT\n  SET &OUT = &STR(    )\n  WRITE &OUT\n  PUTFILE OUT\n  SET &OUT = &STR(    ORIGINAL DSNAME:  &SYSOUTLINE1)\n  WRITE &OUT\n  PUTFILE OUT\n  SET &OUT = &STR(    ---------------               )\n  WRITE &OUT\n  PUTFILE OUT\n  SET &OUT = &STR(                    &SYSOUTLINE2)\n  WRITE &OUT\n  PUTFILE OUT\n  SET &OUT = &STR(                    &SYSOUTLINE3)\n  WRITE &OUT\n  PUTFILE OUT\n  SET &OUT = &STR(                  )\n  WRITE &OUT\n  PUTFILE OUT\n  SET &OUT = &STR(   &SYSOUTLINE12  )\n  WRITE &OUT\n  PUTFILE OUT\n  SET &OUT = &STR(   &SYSOUTLINE13  )\n  WRITE &OUT\n  PUTFILE OUT\n  SET &OUT = &STR(   &SYSOUTLINE14  )\n  WRITE &OUT\n  PUTFILE OUT\n  SET &OUT = &STR(    )\n  WRITE &OUT\n  PUTFILE OUT\n  SET &OUT = &STR(TIME THIS PDS WAS SHIPPED:   &SYSDATE    &SYSTIME -\n   UTC-5:00   )\n  WRITE &OUT\n  PUTFILE OUT\n  SET &OUT = &STR(    )\n  WRITE &OUT\n  PUTFILE OUT\n  CLOSFILE OUT\n  FREE F(OUT)\n  SET SYSOUTTRAP EQ 0\n  PDS86 '&PREF..&CBT&NUMB..&FLE&FNUM' XISPM\n  AT &OUTPUT AD ID(SHIPDAT)\n  END\n  SET SYSOUTTRAP EQ 0\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "GENDATR": {"ttr": 1293, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01'\\x005\\x01\\x14\\tO\\x01 \\x15/ \\x08\\x00\\xf2\\x00\\xa5\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@\"", "ispf": {"version": "01.39", "flags": 0, "createdate": "2014-04-04T00:00:00", "modifydate": "2020-05-31T20:08:35", "lines": 242, "newlines": 165, "modlines": 0, "user": "SBGOLOB"}, "text": "/* REXX GENDATR*/\n/* TO TEST: TSO GENDATR 221R NUMB(500) PREF(GABRIEL)*/\n/* OBTAIN MEMBER INFORMATION ABOUT A PDS,\n   UPDATE A MEMBER IN THAT PDS NAMED $$$#DATE\n   WITH THAT INFORMATION.\n   1 PARAMETER REQUIRED TO BE ENTERED ON THE COMMAND LINE:\n   FNUM, THE NUMBER OF THE CBT FILE INVOLVED.\n   OPTIONAL PARAMETERS THAT MAY BE ENTERED ON THE COMMAND LINE,\n   AFTER THE REQUIRED FIRST PARAMETER:\n   OUTPUT: THE MEMBER NAME TO BE UPDATED\n   NUMB: THE NUMBER OF THE FILE\n   FLE: THE LITERAL STRING \"FILE\"\n   PREF: THE HIGH LEVEL QUALIFIER OF THE PDS\n\n   EXAMPLE OF COMMANDS PASSED TO PDS86:\n   \"PDS86 'GABRIEL.CBT500.FILE221R' XISPM \"\n   \"VER :\"\n   \"END  \"\n\n   THEN LATER:\n   \"PDS86 'GABRIEL.CBT500.FILE221R' XISPM \"\n   \"ATTRIB $$$#DATE  ADDSTATS ID(CBT-500) VER(4) MOD(97)\"\n   \"END\"\n\n   WRITTEN BY GABRIEL F. GARGIULO, APRIL 17, 2014\n*/\n\nARG FIRST_PARAMETER REST_OF_PARAMETERS\nDEBUG = \"YES\"                    /* YES OR NO */\nCALL GET_INPUT /* PROCESS COMMAND LINE */\nVER   = SUBSTR(NUMB, 1, 1)\nMODIF = SUBSTR(NUMB, 2, 2)\n\n/* INITIALIZE VARIABLES */\nMEMBER_LINE = \" \" /* SOMETIMES PDS86 DOESN'T PRODUCE THIS LINE */\n\n/* VERIFY DSN */\nPDS             = \"'\"PREF\".\"CBT\"\"NUMB\".\"FILE\"\"FNUM\"'\"\nPDS_PLUS_MEMBER = \"'\"PREF\".\"CBT\"\"NUMB\".\"FILE\"\"FNUM\"(\"OUTPUT\")'\"\nIF SYSDSN(PDS) = \"OK\" THEN NOP\nELSE SIGNAL BAD_DSN\n\n/* CAPTURE OUTPUT OF PDS86, THEN LISTDS, THEN PDS86 AGAIN */\nCALL OUTTRAP \"PDS86LINE.\",\"*\"\n\n/* PUT PDS86 COMMANDS IN STACK. PDS86 WILL READ THEM\n   AFTER IT STARTS UP */\n\"PROFILE MSGID\"\nQUEUE \"VER :\"\nQUEUE \"END\"\n\"PDS86\" PDS_PLUS_MEMBER \"XISPM\"\n/*\"PDS86 '\"PREF\".\"CBT\"\"NUMB\".\"FILE\"\"FNUM\"(\"OUTPUT\")' XISPM\"*/\nCALL OUTTRAP \"OFF\"\n\nCALL OUTTRAP \"LISTDLINE.\",\"*\"\n\"LISTDS\" PDS\n/* \"LISTDS '\"PREF\".\"CBT\"\"NUMB\".\"FILE\"\"FNUM\"'\" */\nCALL OUTTRAP \"OFF\"\nIF DEBUG = \"YES\" THEN CALL DISPLAY_PDS86LINE_ARRAY\nIF DEBUG = \"YES\" THEN CALL DISPLAY_LISTDLINE_ARRAY\n\n/* PUT SOME LINES INTO A STEM VARIABLE.\n   THEY WILL BE WRITTEN LATER TO THE MEMBER\n\n   EXCILINE.0 HAS NUMBER OF LINES IN THE STEM VAR\n   WE ARE GOING TO WRITE,\n   WE NEED TO COUNT THE LINES,\n   AND WHEN WE FINISH ADDING LINES,\n   SET EXCILINE.0 TO THE NEW NUMBER OF LINES IN THE STEM VAR\n   */\nLINE_COUNTER = 0 /* DO THIS ONLY ONCE */\n\nLINE_COUNTER = LINE_COUNTER + 1\nEXCILINE.0   = LINE_COUNTER\nEXCILINE.LINE_COUNTER =,\n\"REGULAR CBT TAPE - VERSION \"NUMB\"    FILE:  \"FNUM\n\nLINE_COUNTER = LINE_COUNTER + 1\nEXCILINE.0   = LINE_COUNTER\nEXCILINE.LINE_COUNTER =,\n\" \"\n\nORIGINAL_DSNAME = LISTDLINE.1\nLINE_COUNTER = LINE_COUNTER + 1\nEXCILINE.0   = LINE_COUNTER\nEXCILINE.LINE_COUNTER =,\n\"    ORIGINAL DSNAME:  \"ORIGINAL_DSNAME\n\nLINE_COUNTER = LINE_COUNTER + 1\nEXCILINE.0   = LINE_COUNTER\nEXCILINE.LINE_COUNTER =,\n\"    ---------------               \"\n\nRECFM_DISPLAY   = LISTDLINE.2\nLINE_COUNTER = LINE_COUNTER + 1\nEXCILINE.0   = LINE_COUNTER\nEXCILINE.LINE_COUNTER =,\n\"                    \"RECFM_DISPLAY /* MAY NEED SUBSTR*/\n\nVB_255_DISPLAY   = LISTDLINE.3\nLINE_COUNTER = LINE_COUNTER + 1\nEXCILINE.0   = LINE_COUNTER\nEXCILINE.LINE_COUNTER =,\n\"                    \"VB_255_DISPLAY/* MAY NEED SUBSTR*/\n\nLINE_COUNTER = LINE_COUNTER + 1\nEXCILINE.0   = LINE_COUNTER\nEXCILINE.LINE_COUNTER =,\n\" \"\n\nCALL FIND_LINE_WITH_DESIRED_INFO\n\nIF DEBUG = \"YES\" THEN SAY \"MEMBER LINE  RETRIEVED IS\" MEMBER_LINE\nLINE_COUNTER = LINE_COUNTER + 1\nEXCILINE.0   = LINE_COUNTER\nEXCILINE.LINE_COUNTER =,\n\"   \"MEMBER_LINE\n\nLINE_COUNTER = LINE_COUNTER + 1\nEXCILINE.0   = LINE_COUNTER\nEXCILINE.LINE_COUNTER =,\n\" \"\n\nLINE_COUNTER = LINE_COUNTER + 1\nEXCILINE.0   = LINE_COUNTER\nEXCILINE.LINE_COUNTER =,\n\" \"\n\nLINE_COUNTER = LINE_COUNTER + 1\nEXCILINE.0   = LINE_COUNTER\nEXCILINE.LINE_COUNTER =,\n\"TIME THIS PDS WAS SHIPPED:   \"DATE(USA)\"    \"TIME()\"    UTC-5:00\"\n\nLINE_COUNTER = LINE_COUNTER + 1\nEXCILINE.0   = LINE_COUNTER\nEXCILINE.LINE_COUNTER =,\n\" \"\n\nCBTSTR = CBT\"-\"NUMB\nIF DEBUG = \"YES\" THEN SAY \"CBTSTR \" CBTSTR\nQUEUE ,\n\"PDS86 '\"PREF\".\"CBT\"\"NUMB\".\"FILE\"\"FNUM\"' XISPM\"\nQUEUE \"ATTRIB\" OUTPUT \" ADDSTATS ID(\"CBTSTR\") VER(\"VER\") MOD(\"MODIF\")\"\nQUEUE \"END\"\n\nIF DEBUG = \"YES\" THEN CALL DISPLAY_EXCILINE_ARRAY\nCALL WRITE_TO_FILE\nEXIT   /* LOGICAL END OF PROGRAM */\n\nWRITE_TO_FILE:\nDATASET_NAME = \"'\"PREF\".\"CBT\"\"NUMB\".\"FILE\"\"FNUM\"(\"OUTPUT\")'\"\nIF DEBUG = \"YES\" THEN TRACE C\n\"ALLOCATE DDNAME(OUT) DSNAME(\"DATASET_NAME\") SHR REUSE\"\nIF DEBUG = \"YES\" THEN SAY \"GOING TO WRITE \" EXCILINE.0 \" RECORDS\"\n\"EXECIO \" EXCILINE.0 \"DISKW OUT (STEM EXCILINE. FINIS)\"\nIF DEBUG = \"YES\" THEN SAY \"RETURN CODE FROM EXECIO \" RC\n\"FREE     DDNAME(OUT)\"\nRETURN\n\nGET_INPUT:\n/* TRYING TO SIMULATE WHAT CLIST DOES */\n/* FNUM IS A CLIST POSITIONAL PARAMETER, NOT OPTIONAL */\nIF FIRST_PARAMETER = \"\" THEN DO\n   SAY \"ENTER FNUM. 3 DIGIT FILE NUMBER \"\n   PULL FNUM\n   IF FNUM = \"\" THEN DO\n      SAY \"NOTHING ENTERED, ENDING\"\n      EXIT\n      END /* NO FNUM SECOND TIME */\n   END /* FNUM NOT ENTERED ON COMMAND LINE */\n   ELSE DO  /* FIRST_PARAMETER IS NOT BLANK */\n      FNUM = FIRST_PARAMETER\n      END\n\n/* SET DEFAULTS FOR NON-REQUIRED */\nOUTPUT = \"$$$#DATE\"\nNUMB   = 500\nCBT    = \"CBT\"\nFLE    = \"FILE\"\nPREF   = \"SBGOLOB\"\n\nIF POS(\"OUTPUT(\",REST_OF_PARAMETERS) > 0\nTHEN PARSE UPPER VAR REST_OF_PARAMETERS \"OUTPUT(\"OUTPUT\")\"\n\nIF POS(\"NUMB(\",REST_OF_PARAMETERS) > 0\nTHEN PARSE UPPER VAR REST_OF_PARAMETERS \"NUMB(\"NUMB\")\"\n\nIF POS(\"CBT(\",REST_OF_PARAMETERS) > 0\nTHEN PARSE UPPER VAR REST_OF_PARAMETERS \"CBT(\"CBT\")\"\n\nIF POS(\"FLE(\",REST_OF_PARAMETERS) > 0\nTHEN PARSE UPPER VAR REST_OF_PARAMETERS \"FLE(\"FLE\")\"\n\nIF POS(\"PREF(\",REST_OF_PARAMETERS) > 0\nTHEN PARSE UPPER VAR REST_OF_PARAMETERS \"PREF(\"PREF\")\"\nIF DEBUG = \"YES\" THEN CALL DISPLAY_INPUT\nRETURN\n\nDISPLAY_INPUT:\nSAY \"INPUT RECEIVED FROM COMMAND LINE WAS\"\nSAY \"FNUM   \" FNUM\nSAY \"OUTPUT \" OUTPUT\nSAY \"NUMB   \" NUMB\nSAY \"CBT    \" CBT\nSAY \"FLE    \" FLE\nSAY \"PREF   \" PREF\nRETURN\n\nBAD_DSN:\nSAY \"DSN NOT FOUND \" PDS\nEXIT\n\nFIND_LINE_WITH_DESIRED_INFO:\n/* WE DON'T KNOW EXACTLY WHICH LINE #\n   THE \"MEMBERS COUNTED; CUMULATIVE SIZE\" INFO IS ON\n   BUT WE KNOW SOME OF THE INFORMATION THAT IS ON THE LINE\n   NAMELY: PDS117I  AND CUMULATIVE SIZE\n*/\nDO J = 1 TO PDS86LINE.0\n   IF POS(\"PDS117I\",PDS86LINE.J)         > 0 &,\n      POS(\"CUMULATIVE SIZE\",PDS86LINE.J) > 0\n         THEN MEMBER_LINE = PDS86LINE.J\nEND J\nRETURN\n\nDISPLAY_PDS86LINE_ARRAY:\nDO I = 1 TO PDS86LINE.0\n   SAY \"TRAPPED PDS86\" I PDS86LINE.I\nEND I\nRETURN\n\nDISPLAY_LISTDLINE_ARRAY:\nDO I = 1 TO LISTDLINE.0\n   SAY \"TRAPPED LISTD\" I LISTDLINE.I\nEND I\nRETURN\n\nDISPLAY_EXCILINE_ARRAY:\nDO I = 1 TO EXCILINE.0\n   SAY \"FULL ARY  EXECILINE \" I EXCILINE.I\nEND I\nRETURN\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "GENDESC": {"ttr": 1298, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x01\\x01\\x02\\x16\\x0f\\x01\\x02\\x16\\x0f\\x101\\x00\\x13\\x00\\x01\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2002-06-09T00:00:00", "modifydate": "2002-06-09T10:31:01", "lines": 19, "newlines": 1, "modlines": 0, "user": "SBGOLOB"}, "text": "PROC 0 LIST SYMLIST CONLIST  OUTPUT(DES700) +\n        DSN(CBT.CNTL)\n\n        IF &SYMLIST \u00ac= THEN CONTROL SYM\n        IF &CONLIST \u00ac= THEN CONTROL CON\n        IF &LIST    \u00ac= THEN CONTROL LIST\n            FREE FILE(OUT)\n            WRITE GENERATING JCL IN &DSN(&OUTPUT).\n            ALLOC F(OUT) DA(&DSN(&OUTPUT)) SH  REU\n            OPENFILE OUT OUTPUT\n        SET &FL = 601\n        DO UNTIL &FL = 801\n            SET &OUT = &STR(//*+FILE )&FL&STR(:  EMPTY                 -\n                               *   DOC FILE)\n            PUTFILE OUT\n            SET &FL = &FL + 1\n        END\n            CLOSFILE OUT\n            FREE FILE(OUT)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "GENFILE": {"ttr": 1538, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01,\\x00\\x16\\x00\\x85\\x03\\x1f\\x01\\x02\\x16\\x0f\\x10\\x08\\x00\\x1a\\x001\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.44", "flags": 0, "createdate": "1985-01-31T00:00:00", "modifydate": "2002-06-09T10:08:16", "lines": 26, "newlines": 49, "modlines": 0, "user": "SBGOLOB"}, "text": "PROC 0 LIST SYMLIST CONLIST  OUTPUT(NEW700) +\n        DSN(CBT.CNTL)\n\n        IF &SYMLIST \u00ac= THEN CONTROL SYM\n        IF &CONLIST \u00ac= THEN CONTROL CON\n        IF &LIST    \u00ac= THEN CONTROL LIST\n            FREE FILE(OUT)\n            WRITE GENERATING JCL IN &DSN(&OUTPUT).\n            ALLOC F(OUT) DA(&DSN(&OUTPUT)) SH  REU\n            OPENFILE OUT OUTPUT\n        SET &FL = 601\n        DO UNTIL &FL = 801\n            SET &OUT = &STR(./ ADD NAME=@FILE&FL 0100-02160-02160-1200--\n00002-00002-00000-CBT449)\n            PUTFILE OUT\n            SET &HYT = &STR(FILE &FL)\n            SET &OUT = &STR(//***)&HYT&STR( IS CURRENTLY EMPTY         -\n                           *   )&HYT\n            PUTFILE OUT\n            SET &OUT = &STR(//*                                        -\n                         *   )&HYT\n            PUTFILE OUT\n            SET &FL = &FL + 1\n        END\n            CLOSFILE OUT\n            FREE FILE(OUT)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "GENJCL7": {"ttr": 1540, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x15\\x01\\x02\\x16\\x0f\\x01\\x02\\x16\\x0f\\x12\\x13\\x00\\x13\\x00\\x01\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2002-06-09T00:00:00", "modifydate": "2002-06-09T12:13:15", "lines": 19, "newlines": 1, "modlines": 0, "user": "SBGOLOB"}, "text": "PROC 0 LIST SYMLIST CONLIST  OUTPUT(JCL700) +\n        DSN(CBT.CNTL)\n\n        IF &SYMLIST \u00ac= THEN CONTROL SYM\n        IF &CONLIST \u00ac= THEN CONTROL CON\n        IF &LIST    \u00ac= THEN CONTROL LIST\n            FREE FILE(OUT)\n            WRITE GENERATING JCL IN &DSN(&OUTPUT).\n            ALLOC F(OUT) DA(&DSN(&OUTPUT)) SH  REU\n            OPENFILE OUT OUTPUT\n        SET &FL = 601\n        DO UNTIL &FL = 701\n            SET &OUT = &STR(//S)&FL&STR( EXEC NULL,N=)&FL&STR(,TO='FILE-\n0)&FL&STR(')\n            PUTFILE OUT\n            SET &FL = &FL + 1\n        END\n            CLOSFILE OUT\n            FREE FILE(OUT)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "GENJCL8": {"ttr": 1542, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00E\\x01\\x02\\x16\\x0f\\x01\\x02\\x16\\x0f\\x12\\x13\\x00\\x13\\x00\\x01\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2002-06-09T00:00:00", "modifydate": "2002-06-09T12:13:45", "lines": 19, "newlines": 1, "modlines": 0, "user": "SBGOLOB"}, "text": "PROC 0 LIST SYMLIST CONLIST  OUTPUT(JCL800) +\n        DSN(CBT.CNTL)\n\n        IF &SYMLIST \u00ac= THEN CONTROL SYM\n        IF &CONLIST \u00ac= THEN CONTROL CON\n        IF &LIST    \u00ac= THEN CONTROL LIST\n            FREE FILE(OUT)\n            WRITE GENERATING JCL IN &DSN(&OUTPUT).\n            ALLOC F(OUT) DA(&DSN(&OUTPUT)) SH  REU\n            OPENFILE OUT OUTPUT\n        SET &FL = 701\n        DO UNTIL &FL = 801\n            SET &OUT = &STR(//S)&FL&STR( EXEC NULL,N=)&FL&STR(,TO='FILE-\n0)&FL&STR(')\n            PUTFILE OUT\n            SET &FL = &FL + 1\n        END\n            CLOSFILE OUT\n            FREE FILE(OUT)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "GENSTAT": {"ttr": 1544, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00G\\x01\\x02\\x16\\x0f\\x01\\x02\\x16\\x0f\\x10\\x18\\x00\\x13\\x00\\x01\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2002-06-09T00:00:00", "modifydate": "2002-06-09T10:18:47", "lines": 19, "newlines": 1, "modlines": 0, "user": "SBGOLOB"}, "text": "PROC 0 LIST SYMLIST CONLIST  OUTPUT(STA700) +\n        DSN(CBT.CNTL)\n\n        IF &SYMLIST \u00ac= THEN CONTROL SYM\n        IF &CONLIST \u00ac= THEN CONTROL CON\n        IF &LIST    \u00ac= THEN CONTROL LIST\n            FREE FILE(OUT)\n            WRITE GENERATING JCL IN &DSN(&OUTPUT).\n            ALLOC F(OUT) DA(&DSN(&OUTPUT)) SH  REU\n            OPENFILE OUT OUTPUT\n        SET &FL = 601\n        DO UNTIL &FL = 801\n            SET &OUT = &STR(//* EMPTY            )&FL&STR( N/A        1-\n     .0 06-09-02      080 YES  *   DOC FILE)\n            PUTFILE OUT\n            SET &FL = &FL + 1\n        END\n            CLOSFILE OUT\n            FREE FILE(OUT)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "KEYWORD": {"ttr": 1546, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0b\\x00\\x03\\x01 5/\\x01 5/\\x13\\x14\\x00\\x05\\x00\\x06\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf4\\xf3@@@'", "ispf": {"version": "01.11", "flags": 0, "createdate": "2020-12-17T00:00:00", "modifydate": "2020-12-17T13:14:03", "lines": 5, "newlines": 6, "modlines": 0, "user": "FILE043"}, "text": "PROC 0\n/*  THIS IS TO RECONSTRUCT FORMER CBT FILE 043. )   */\n/*  AT THE PROMPT, ENTER DSN('YOUR.DATASET.NAME')   */\nCONTROL PROMPT\nRECEIVE INDS('CBT.CBT500.FILE006.PDS(KEYWORDH)'\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "KEYWORDH": {"ttr": 1548, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x001\\x01 5/\\x01 5/\\x12T\\x00\\x15\\x00\\x15\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf4\\xf3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2020-12-17T00:00:00", "modifydate": "2020-12-17T12:54:31", "lines": 21, "newlines": 21, "modlines": 0, "user": "FILE043"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "KEYWORDS": {"ttr": 1550, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x01\\x01 )\\x0f\\x01 )\\x0f\\x11Y\\x02y\\x02r\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf0\\xf4\\xf2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2020-10-16T00:00:00", "modifydate": "2020-10-16T11:59:01", "lines": 633, "newlines": 626, "modlines": 0, "user": "FILE042"}, "text": "./ ADD NAME=$$ARNIE  0100-20290-82165-1158-00006-00006-00000-FILE042 00\nTHIS MEMBER IS THE OLD CBT FILE 042 WHICH ARNIE HAD USED TO DO SOME\nOF HIS HOUSEKEEPING.  SINCE I NEEDED THE FILE SLOT (FILE 042) FOR\nANOTHER FILE, AND THIS FILE HAS TO DO WITH CBT TAPE MAINTENANCE, I\nDECIDED TO PUT THIS FILE HERE FOR SAFEKEEPING.  MAYBE SOMEBODY (OR I)\nMIGHT FIND IT USEFUL.  I DON'T EVER WANT TO THROW GOOD PROGRAMMMING\nAWAY.  (SG-OCT 2020)\n./ ADD NAME=$DOC     0100-20290-82165-1856-00005-00005-00000-FILE042 00\n$DOC ....... THIS FILE\nJCL ........ THE JCL I USE AT CBT TO RUN\nKEYWORDS ... A FILE CONTAINING WORDS THAT SHOULD NOT BE KEYWORDED\nPROGRAM .... THE ACTUAL CODE TO FORMAT FILE 001 INTO THE PROPER\n             FORMAT\n./ ADD NAME=JCL      0100-82122-82165-1856-00092-00092-00000-FILE042 00\n//TS155007 JOB 527TSO000S0008,ARNIE,CLASS=J,MSGCLASS=5,NOTIFY=TS15500,\n// REGION=1024K\n//*\n//* THIS IS THE JCL I USE TO LOAD AT CBT\n//* IF YOU HAVE PROBLEMS CALL ME - ARNOLD  (203)-244-5495\n//*\n//STEP00 EXEC PGM=CBT299              /* PGM TO DELETE DATASETS */\nTEC.CBT.INFO\nTEC.CBT.OZB\n//STEP01 EXEC PAN,SO=5               /* GET FILE ONE OUT OF PAN */\n++WRITE WORK,MVSMODS1                /* OR FROM YOUR FILE 001   */\n//*\n//*  CONVERT IT TO BE PROCESSED BY INFO\n//*\n//STEP02    EXEC PGM=CBT1342,REGION=4096K            /* HNB PGM      */\n//SYSIN     DD   DSN=TS15500.CBT1342K.DATA,DISP=SHR  /* KEYWORDS     */\n//FILEIN    DD   DSN=&&WORK,DISP=(OLD,DELETE,DELETE) /* FILE ONE     */\n//FILEOUT   DD   DSN=TEC.CBT.INFO,DISP=(,CATLG),     /* OUT FILE FOR */\n//          UNIT=SYSDA,SPACE=(CYL,(20,5)),           /* NEXT STEP    */\n//          DCB=(RECFM=VB,LRECL=255,BLKSIZE=3120,DSORG=PS)\n//SYSUDUMP  DD   SYSOUT=5                            /* DUMP         */\n//*\n//STEP03    EXEC PGM=IEBGENER                        /* MERGE HEADER */\n//SYSIN     DD   DUMMY                               /* DUMMY        */\n//SYSPRINT  DD   SYSOUT=5                            /* SYSPRINT     */\n//SYSUT2    DD   DSN=TEC.CBT.INFO,DISP=MOD           /* OUT OF PGM 1 */\n//SYSUT1    DD   DSN=TEC.ARNIE.INFO.G3,DISP=SHR      /* FILE 5 OF TAPE *\n//*\n//*  LET INFO DO SOME STUFF TO IT\n//*\n//STEP04    EXEC PGM=BLGOZB                          /* LET OZ DO IT */\n//FILE      DD   DSN=TEC.CBT.INFO,DISP=SHR           /* INPUT TO STEP*/\n//SORTMSG   DD   SYSOUT=5                            /* MESSAGES     */\n//SYSPRINT  DD   SYSOUT=5                            /* SYSPRINT     */\n//SYSOUT    DD   SYSOUT=5                            /* SYSOUT       */\n//SORTLIB   DD   DSN=SYS1.SORTLIB,DISP=SHR           /* SORTLIB      */\n//SORTIN    DD   UNIT=SYSDA,SPACE=(CYL,(10,10))      /* SORTIN       */\n//SORTOUT   DD   UNIT=SYSDA,SPACE=(CYL,(10,10))      /* SORTOUT      */\n//SORTWK01  DD   UNIT=SYSDA,SPACE=(CYL,(10,10))      /* SORTWORK     */\n//SORTWK02  DD   UNIT=SYSDA,SPACE=(CYL,(10,10))      /* SORTWORK     */\n//SORTWK03  DD   UNIT=SYSDA,SPACE=(CYL,(10,10))      /* SORTWORK     */\n//TAPE      DD   DSN=TEC.CBT.OZB,DISP=(,CATLG),      /* OUT FROM STEP*/\n//          UNIT=SYSDA,SPACE=(CYL,(20,5)),\n//          DCB=(RECFM=VB,LRECL=255,BLKSIZE=3120,DSORG=PS)\n//*\n//STEP05 EXEC VSAMLIST,SO=5,CAT=VSM02CAT                   /* LIST VSAM\n//*\n//*  LOAD IT TO DATABASE\n//*\n//STEP06    EXEC PGM=BLGOZC                          /* RELOAD D.B.  */\n//TAPE      DD   DSN=TEC.CBT.OZB,DISP=SHR            /* INPUT FILE   */\n//OZVSAM    DD   DSN=VSAM02.CBTMODS.OZ,DISP=OLD      /* OUTPUT FILE  */\n//SYSPRINT  DD   SYSOUT=5                            /* SYSPRINT     */\n//SYSIN     DD   *                                   /* SELECT CARD  */\n$SELECT *\n//*\n//STEP07 EXEC PGM=CBT299                             /* DELETE PGM  */\nTEC.CBT.INFO\nTEC.CBT.OZB\n/*\n//\n//\n//\n//\n//TXXXXXXX JOB 527TSO000S0008,ARNIE,CLASS==,MSGCLASS=A,NOTIFY=TS15500,\n// REGION=1024K\n//*\n//* THIS IS A DUMMY JOB FOR ME TO ADD SOME ADDITIONAL STEPS HERE\n//*\n//*  ALLOCATE THE DATABASE - AT LEAST FOR THE FIRST TIME ANYWAYS\n//*\n//IDCAMS#4  EXEC PGM=IDCAMS,REGION=1024K\n//SYSPRINT  DD   SYSOUT=1\n//SYSIN     DD   *\n DELETE VSAM02.CBTMODS.OZ CLUSTER\n DEFINE CLUSTER(NAME('VSAM02.CBTMODS.OZ') VOL(DAV002) IXD -\n                KEYS(14 0) CYL(5 1) RECSZ(600 814) -\n                CISZ(4096) SHR(3 3) REUSE SPEED ) -\n        DATA   (NAME('VSAM02.CBTMODS.OZ.DATA')) -\n        INDEX  (NAME('VSAM02.CBTMODS.OZ.INDEX'))\n/*\n//*\n//*\n//* REPRO THE HELP OVER  FROM IBMS INFO\n//* CAN NOT SEND THIS SINCE IT IS COPYRIGHTED\n//*\n//IDCAMS#6  EXEC PGM=IDCAMS,REGION=1024K\n//SYSPRINT  DD   SYSOUT=1\n//SYSIN     DD   *\n REPRO IDS(VSAM02.BLGOZS.VSAM) ODS(VSAM02.CBTMODS.OZ) -\n FROMKEY(HH0000000000) TOKEY(HH9999999999)\n//*\n./ ADD NAME=KEYWORDS 0100-82122-82165-1856-00012-00012-00000-FILE042 00\nA\nAND\nTHE\nTHAT\nIS\nARE\nALL\nWILL\nGIVE\nYOU\nON\nENDTABLE\n./ ADD NAME=PROGRAM  0100-82122-82165-1856-00513-00513-00000-FILE042 00\n*          DATA SET CBT1342    AT LEVEL 003 AS OF 06/14/82\n*          DATA SET CBT1342    AT LEVEL 002 AS OF 06/09/82              00001\n*          DATA SET DED121     AT LEVEL 006 AS OF 06/09/82              00002\n*                                                                       00003\n*  MODIFIED 06/14/82 BY HNB VIA CBT TO INCREASE THE GETMAIN FOR THE     00004\n*  KEYWORD TABLE (FROM 4096 TO 16364)                                   00005\n*                                                                       00006\n         MACRO                                                          00007\n&NAME    SAVEALL &RENT,&REG=3,&EQU=YES,&ID=NO                           00008\n         GBLB  &SAVRENT                                                 00009\n         GBLB  &REGSW                                                   00010\n         GBLB  &TIME                                                    00011\n         GBLC  &SAVNDX                                                  00012\n&SAVNDX  SETC  '&SYSNDX'                                                00013\n&NAME    CSECT                                                          00014\n         AIF   ('&SAVRENT' EQ '1').NOTFREE                              00015\n         AIF   ('&REGSW' EQ '1').NOEQU                                  00016\n         AIF   ('&EQU' NE 'YES').NOEQU                                  00017\n&REGSW   SETB  1                                                        00018\n         SPACE                                                          00019\n*********************************************************************** 00020\n********           DEFINITION OF GENERAL REGISTERS             ******** 00021\n*********************************************************************** 00022\nR0       EQU   0    GENERAL REGISTER ZERO                               00023\nR1       EQU   1    GENERAL REGISTER ONE                                00024\nR2       EQU   2    GENERAL REGISTER TWO                                00025\nR3       EQU   3    GENERAL REGISTER THREE                              00026\nR4       EQU   4    GENERAL REGISTER FOUR                               00027\nR5       EQU   5    GENERAL REGISTER FIVE                               00028\nR6       EQU   6    GENERAL REGISTER SIX                                00029\nR7       EQU   7    GENERAL REGISTER SEVEN                              00030\nR8       EQU   8    GENERAL REGISTER EIGHT                              00031\nR9       EQU   9    GENERAL REGISTER NINE                               00032\nR10      EQU   10   GENERAL REGISTER TEN                                00033\nR11      EQU   11   GENERAL REGISTER ELEVEN                             00034\nR12      EQU   12   GENERAL REGISTER TWELVE                             00035\nR13      EQU   13   GENERAL REGISTER THIRTEEN                           00036\nR14      EQU   14   GENERAL REGISTER FOURTEEN                           00037\nR15      EQU   15   GENERAL REGISTER FIFTEEN                            00038\n         SPACE                                                          00039\nRA       EQU   10   GENERAL REGISTER TEN                                00040\nRB       EQU   11   GENERAL REGISTER ELEVEN                             00041\nRC       EQU   12   GENERAL REGISTER TWELVE                             00042\nRD       EQU   13   GENERAL REGISTER THIRTEEN                           00043\nRE       EQU   14   GENERAL REGISTER FOURTEEN                           00044\nRF       EQU   15   GENERAL REGISTER FIFTEEN                            00045\n*********************************************************************** 00046\n********             END OF REGISTER DEFINITIONS               ******** 00047\n*********************************************************************** 00048\n         SPACE                                                          00049\n.NOEQU   ANOP                                                           00050\n         SAVE  (14,12)                                                  00051\n         AIF   ('&REG' EQ '').MESS                                      00052\n         BALR  &REG(1),0                                                00053\n         AIF   (N'&REG EQ 1).A                                          00054\n         AIF   (N'&REG EQ 2).B                                          00055\n         AIF   (N'&REG EQ 3).C                                          00056\n         AIF   (N'&REG EQ 4).D                                          00057\n         AIF   (N'&REG EQ 5).E                                          00058\n         MNOTE *****,'EXCESSIVE BASE REGISTERS -- 5 ASSUMED *****'      00059\n         AGO   .E                                                       00060\n.MESS    MNOTE 12,'***** NO BASE REGISTER SPECIFIED *****'              00061\n         MEXIT                                                          00062\n.NOTFREE MNOTE 12,'***** ENDALL NOT ISSUED PRIOR TO NEW SAVEALL *****'  00063\n         MEXIT                                                          00064\n.E       USING *,&REG(1),&REG(2),&REG(3),&REG(4),&REG(5)                00065\nQ&SYSNDX L     &REG(2),=A(Q&SYSNDX+4096)     LOAD BASE REGISTERS        00066\n         L     &REG(3),=A(Q&SYSNDX+8192)                                00067\n         L     &REG(4),=A(Q&SYSNDX+12288)                               00068\n         L     &REG(5),=A(Q&SYSNDX+16384)                               00069\n         AGO   .END                                                     00070\n.D       USING *,&REG(1),&REG(2),&REG(3),&REG(4)                        00071\nQ&SYSNDX L     &REG(2),=A(Q&SYSNDX+4096)     LOAD BASE REGISTERS        00072\n         L     &REG(3),=A(Q&SYSNDX+8192)                                00073\n         L     &REG(4),=A(Q&SYSNDX+12288)                               00074\n         AGO   .END                                                     00075\n.C       USING *,&REG(1),&REG(2),&REG(3)                                00076\nQ&SYSNDX L     &REG(2),=A(Q&SYSNDX+4096)     LOAD BASE REGISTERS        00077\n         L     &REG(3),=A(Q&SYSNDX+8192)                                00078\n         AGO   .END                                                     00079\n.B       USING *,&REG(1),&REG(2)                                        00080\nQ&SYSNDX L     &REG(2),=A(Q&SYSNDX+4096)     LOAD BASE REGISTER         00081\n         AGO   .END                                                     00082\n.A       USING *,&REG(1)                                                00083\n.END     ANOP                                                           00084\n         AIF   ('&RENT' NE 'RENT').NORENT                               00085\n&SAVRENT SETB  1                                                        00086\n         GETMAIN R,LV=4096         GET STORAGE FOR SAVE AREA            00087\n         ST    13,4(1)             SET UP FORWARD CHAIN                 00088\n         ST    1,8(13)             SET UP BACKWARD CHAIN                00089\n         L     0,20(0,13)          RESET REGISTER 0                     00090\n         L     1,24(0,13)          RESET REGISTER 1                     00091\n         L     13,8(0,13)          LOAD SAVE AREA ADDRESS               00092\n         B     J&SYSNDX           BRANCH AROUND LTORG                   00093\n         AGO   .RENT                                                    00094\n.NORENT  ANOP                                                           00095\n&TIME    SETB  1                                                        00096\n         ST    13,SAVE&SYSNDX+4    SET UP FORWARD CHAIN                 00097\n         LA    1,SAVE&SYSNDX                                            00098\n         ST    1,8(0,13)           SET UP BACKWARD CHAIN                00099\n         L     1,24(0,13)          RESET REGISTER 1                     00100\n         LA    13,SAVE&SYSNDX                                           00101\n         B     J&SYSNDX           BRANCH AROUND BASE REGISTER CONST     00102\nSAVE&SYSNDX DC 18F'0'                                                   00103\n.RENT    ANOP                                                           00104\n         LTORG                                                          00105\n         AIF   ('&ID' NE 'YES').NOID                                    00106\n         DC    CL8'&SYSDATE'                                            00107\n         DC    CL8'&SYSTIME'                                            00108\n.NOID    ANOP                                                           00109\nJ&SYSNDX DS    0H                                                       00110\n         MEND                                                           00111\n         MACRO                                                          00112\n&NAME    ENDALL &CODE=                                                  00113\n         GBLB  &TIME                                                    00114\n         GBLB  &SAVRENT                                                 00115\n         GBLC  &SAVNDX                                                  00116\n         LCLA  &LEN                                                     00117\n         LCLC  &REG                                                     00118\n         AIF   ('&CODE' GT '4095').INVRET                               00119\n&NAME    DS    0H                                                       00120\n         AIF   (K'&CODE LE 0).CHKRENT                                   00121\n         AIF   ('&CODE'(1,1) NE '(').CHKRENT                            00122\n         AIF   ('&CODE' EQ '(13)' OR '&CODE' EQ '(14)').INVREG          00123\n         AIF   ('&CODE' EQ '(0)' OR '&CODE' EQ '(1)').INVREG            00124\n         AIF   ('&CODE' NE '(15)').CHKRENT                              00125\n         LR    2,15               SAVE REG 15 RETURN CODE               00126\n.CHKRENT AIF   (NOT &SAVRENT).NOTRENT                                   00127\n&SAVRENT SETB  0                                                        00128\n         LR    1,13               LOAD SAVE AREA ADDRESS                00129\n         L     13,4(0,13)         RE-LOAD REGISTER 13                   00130\n         FREEMAIN R,LV=4096,A=(1) FREE SAVE AREA STORAGE                00131\n         AGO   .RENT                                                    00132\n.NOTRENT ANOP                                                           00133\n         AIF   (NOT &TIME).NOSAVE                                       00134\n&TIME    SETB  0                                                        00135\n         L     13,SAVE&SAVNDX+4   RE-LOAD REGISTER 13                   00136\n.RENT    ANOP                                                           00137\n         AIF   ('&CODE' EQ '').COND1                                    00138\n         AIF   ('&CODE' NE '(15)').CHKREG                               00139\n         LR    15,2               GET RETURN CODE BACK FROM R2          00140\n         AGO   .ENDIT                                                   00141\n.CHKREG  AIF   ('&CODE'(1,1) NE '(').NOTREG                             00142\n&LEN     SETA  K'&CODE-2                                                00143\n&REG     SETC  '&CODE'(2,&LEN)                                          00144\n         LR    15,&REG            GET RETURN CODE                       00145\n         AGO   .ENDIT                                                   00146\n.NOTREG  ANOP                                                           00147\n         LA    15,&CODE           LOAD CODE TO REG 15                   00148\n         AGO   .ENDIT                                                   00149\n.INVRET  MNOTE 12,'***** RETURN CODE PASSED GREATER THAN 4095 *****'    00150\n         MEXIT                                                          00151\n.NOSAVE  MNOTE 12,'***** SAVEALL NOT ISSUED PRIOR TO ENDALL *****'      00152\n         MEXIT                                                          00153\n.INVREG  MNOTE 12,'***** INVALID REGISTER USED FOR RETURN CODE \"&CODE\"' 00154\n         MEXIT                                                          00155\n.COND1   LA    15,0               LOAD ZERO (NO CODE) TO REG 15         00156\n.ENDIT   ANOP                                                           00157\n         RETURN     (14,12),T,RC=(15)                                   00158\n         MEND                                                           00159\nCBTINFO  SAVEALL REG=(3,12)                                             00160\n         EJECT                                                          00161\n         OPEN  (SYSIN,(INPUT),FILEIN,(INPUT),FILEOUT,(OUTPUT))          00162\n         SPACE                                                          00163\n         GETMAIN R,LV=16364             GET STOR FOR NON-KEYW TBL CBT   00164\n*        GETMAIN R,LV=4096              GET STOR FOR NON-KEYW TBL CBT   00165\n         SPACE                                                          00166\n         LR    R4,R1                    POINT AT IT                     00167\n         USING NOKWTBL,R4               ADDR TO IT                      00168\n         ST    R4,SAVENOKW              SAVE PTR TO BEGINNING OF IT     00169\n         SPACE                                                          00170\n         GETMAIN R,LV=98304             GET STOR FOR KEYW USED TBL      00171\n         SPACE                                                          00172\n         LR    R6,R1                    POINT AT IT                     00173\n         ST    R6,SAVETABL              AND SAVE ADDRESS                00174\n         ST    R6,NEXTENTR              AND SAVE ADDRESS                00175\n         USING KWTBL,R6                 ADDR TO IT                      00176\n         EJECT                                                          00177\nGETLP    GET   SYSIN,NOKW               GET A KEYWORD                   00178\n         CLC   0(8,R4),ENDTABLE         END OF TABLE                    00179\n         BE    ENDREAD                      YES...END OF KEYWORD DS     00180\n         LA    R4,30(R4)                    NO MAX KEYWORD LENGTH=30    00181\n         B     GETLP                        AND LOOP                    00182\n         SPACE                                                          00183\nENDREAD  SR    R10,R10                  INIT REG                        00184\n         AH    R10,ONE                  SET THIS IS FIRST TOPIC         00185\n         SPACE                                                          00186\nSTARTUP  MVC   INREC(255),BLANK255      CLEAN OUT ENTRY FIRST           00187\n         GET   FILEIN,INREC             GET A RECORD                    00188\n         TR    INREC(255),TRTABLE       SET TO UPPER CASE               00189\n         CLC   INREC(12),SECTION        START OF A TOPIC?               00190\n         BNE   STARTUP                     NO..CONTINUE                 00191\n         SPACE                                                          00192\nFIRSTONE MVC   TOPIC(58),INREC+5        SAVE TOPIC NAME                 00193\n         LA    R2,TABLE                 START OF TABLE                  00194\n         MVC   0(253,R2),INREC+2        MOVE TO TABLE                   00195\n         MVC   70(185,R2),BLANK255      MOVE BLANKS TO REST OF RECORD   00196\n         SPACE                                                          00197\nLOOP1    MVC   INREC(255),BLANK255      CLEAN OUT ENTRY FIRST           00198\n         GET   FILEIN,INREC             GET A RECORD                    00199\n         TR    INREC(255),TRTABLE       SET TO UPPER CASE               00200\n         CLC   INREC(12),SECTION        START OF A TOPIC?               00201\n         BE    ISNEW                       YES                          00202\n         CLC   INREC(9),NEWFILE         START OF A TOPIC?               00203\n         BE    ISNEW                       YES                          00204\n         LA    R2,255(R2)               BUMP TABLE POINTER              00205\n         MVC   0(253,R2),INREC+2        MOVE TO TABLE                   00206\n         MVC   70(185,R2),BLANK255      MOVE BLANKS TO REST OF RECORD   00207\n         B     LOOP1                                                    00208\n         SPACE                                                          00209\nISNEW    LA    R2,255(R2)               BUMP POINTER                    00210\n         MVC   0(255,R2),BLANK255       CLEAN OUT ENTRY FIRST           00211\n         MVC   0(72,R2),$EOMLINE        MOVE $EOM TO END OF ENTRY       00212\n         CVD   R10,DWORK                CONVERT COUNTER TO DECIMAL      00213\n         UNPK  TOPIC#,DWORK             UNPACK IT                       00214\n         OI    TOPIC#+5,X'F0'           FIX IT UP                       00215\n         MVC   TTOPIC(58),TOPIC         MOVE TOPIC TO TITLE LINE        00216\n         MVC   KTOPIC(58),TOPIC         MOVE TOPIC TO KEYWORD LINE      00217\n         PUT   FILEOUT,HEADER           MOVE HEADER TO OUTPUT           00218\n         PUT   FILEOUT,TITLE            MOVE TITLE  TO OUTPUT           00219\n         PUT   FILEOUT,KEYWORD          MOVE KEYWORD TO OUTPUT          00220\n         LA    R2,TABLE                 POINT TO BEGINNING OF TABLE     00221\n         SR    R11,R11                  INIT REG                        00222\n         LH    R11,=H'4'                INITIALIZE AS 4TH LINE          00223\n         SPACE                                                          00224\n         B     DOKEYW                   GO DO KEYWORDING OF 'L' LINES   00225\n         EJECT                                                          00226\nENDKW    MVC   OUTREC(72),BLANKL        MOVE BLANKLINE TO OUTPUT        00227\n         MVC   OUTREC+4(8),BLANK255     INIT SEQ # WITH BLANKS          00228\n         CVD   R11,DWORK                CONVERT SEQ # TO DECIMAL        00229\n         UNPK  OUTREC+4(8),DWORK        UNPACK IT INTO LINE             00230\n         OI    OUTREC+11,X'F0'          FIX IT UP                       00231\n         PUT   FILEOUT,OUTREC           MOVE LINE TO OUTPUT             00232\n         AH    R11,ONE                  ADD ONE TO SEQ NUMBER           00233\n         LA    R2,TABLE                 POINT TO BEGINNING OF ENTRY TBL 00234\n         SPACE                                                          00235\nLOOP2    CLC   0(4,R2),=C'$EOM'         IS IT END OF ENTRY?             00236\n         BE    ENDENTRY                      YES                        00237\n         MVC   OUTREC+12(243),0(R2)     MOVE A LINE TO OUTPUT REC,      00238\n*                                       MAKE ROOM FOR SEQ # + RDW       00239\n         MVC   OUTREC(4),RDW            MOVE IN DEFAULT RDW             00240\n         MVC   OUTREC+4(8),BLANK255     INIT SEQ # WITH BLANKS          00241\n         CVD   R11,DWORK                CONVERT SEQ # TO DECIMAL        00242\n         UNPK  OUTREC+4(8),DWORK        UNPACK IT INTO LINE             00243\n         OI    OUTREC+11,X'F0'          FIX IT UP                       00244\n         PUT   FILEOUT,OUTREC           MOVE LINE TO OUTPUT             00245\n         LA    R2,255(R2)               BUMP POINTER                    00246\n         AH    R11,ONE                  ADD ONE TO SEQ NUMBER           00247\n         B     LOOP2                         AND LOOP                   00248\n         SPACE                                                          00249\nENDENTRY MVC   OUTREC+12(243),0(R2)     MOVE A $EOM LINE TO OUTPUT AND  00250\n*                                       MAKE ROOM FOR SEQ # + RDW       00251\n         MVC   OUTREC(4),RDW            MOVE IN DEFAULT RDW             00252\n         MVC   OUTREC+4(8),BLANK255     INIT SEQ # WITH BLANKS          00253\n         CVD   R11,DWORK                CONVERT SEQ # TO DECIMAL        00254\n         UNPK  OUTREC+4(8),DWORK        UNPACK IT INTO LINE             00255\n         OI    OUTREC+11,X'F0'          FIX IT UP                       00256\n         PUT   FILEOUT,OUTREC           MOVE LINE TO OUTPUT             00257\n         CLI   ENDSW,C'1'               WAS THIS THE LAST ENTRY?        00258\n         BE    ENDIT                        YES DO FINAL PROCESSING     00259\n         LA    R2,TABLE                 POINT TO BEGINNING OF TABLE     00260\n         AH    R10,ONE                  SET NEXT TOPIC NUMBER           00261\n         MVC   0(253,R2),INREC+2        MOVE TO TABLE                   00262\n         MVC   70(185,R2),BLANK255      MOVE BLANKS TO REST OF RECORD   00263\n         MVC   TOPIC(58),INREC+5        SAVE TOPIC NAME                 00264\n         LA    R2,255(R2)               BUMP TABLE POINTER              00265\n         B     LOOP1                    AND CONTINUE                    00266\n         EJECT                                                          00267\nDOKEYW   LA    R2,TABLE                 POINT TO BEGINNING OF TABLE     00268\n         MVC   NEXTENTR,SAVETABL        RESET NEXT ENTRY POINTER        00269\n         SPACE                                                          00270\nMAINLP   BAL   R14,FINDWORD             GO GET A WORD                   00271\n         CLC   0(5,R7),=C'$EOM '        END OF ENTRY?                   00272\n         BE    BLDL                         YES... BUILD 'L' KW LINES   00273\n         BAL   R14,TESTTBL              IS IN TBL OF BAD WORDS?         00274\n         LTR   R15,R15                  TEST RETURN CODE                00275\n         BNZ   MAINLP                       IN TABLE, GET NEXT WORD     00276\n         BAL   R14,CHKWORD              ADD TO TABLE IF NOT USED        00277\n         B     MAINLP                   LOOP TILL END OF DOCUMENT       00278\n         EJECT                                                          00279\nEOFILE   MVI   ENDSW,C'1'               THIS IS THE END                 00280\n         B     ISNEW                    DO IT ONE MORE TIME             00281\n         SPACE                                                          00282\nENDIT    L     R4,SAVENOKW              ADDRESS OF NOKEYWORD TABLE      00283\n         SPACE                                                          00284\n         FREEMAIN R,LV=16364,A=(R4)      FREE STORAGE     CBT           00285\n*        FREEMAIN R,LV=4096,A=(R4)       FREE STORAGE     CBT           00286\n         SPACE 2                                                        00287\n         L     R6,SAVETABL              ADDRESS OF KEYWD USED TABLE     00288\n         SPACE                                                          00289\n         FREEMAIN R,LV=98304,A=(R6)     FREE STORAGE                    00290\n         EJECT                                                          00291\n         CLOSE (FILEIN,,FILEOUT,,SYSIN)                                 00292\n         SPACE                                                          00293\n         ENDALL                                                         00294\n         EJECT                                                          00295\nFINDWORD CLI   0(R2),C' '               IS IT A BLANK?                  00296\n         BNE   FINDEND                       NO.... WE HAVE A SOMETHING 00297\nFINDBMP1 LA    R2,1(R2)                      BUMP                       00298\n         B     FINDWORD                      AND LOOP                   00299\n         SPACE                                                          00300\nFINDEND  LR    R7,R2                    SAVE PTR TO BEGINNING OF WORD   00301\n         SR    R8,R8                    GET READY TO GET LENGTH OF WORD 00302\n         AH    R8,ONE                   SET LENGTH TO ONE               00303\nFINDBL   CLI   0(R2),C' '               BLANK?                          00304\n         BER   R14                           YES.. HAVE END OF WORD     00305\n         LA    R2,1(R2)                      NO... BUMP                 00306\n         AH    R8,ONE                        ADD 1 TO LENGTH            00307\n         B     FINDBL                        AND LOOP                   00308\n         EJECT                                                          00309\nTESTTBL  L     R4,SAVENOKW              PT TO BEGIN OF BAD KEYWORDS     00310\n         BCTR  R8,0                     DECREMENT FOR EX INSTR          00311\n         SR    R15,R15                  RC = 0                          00312\nTESTLP   CLC   0(8,R4),ENDTABLE         IS THIS END OF TABLE?           00313\n         BER   R14                           YES.. CONTINUE             00314\n         EX    R8,CLC                   IN TBL OF WORDS NOT TO BE USED? 00315\n         BE    BADWORD                       YES.. DON'T USE IT         00316\n         LA    R4,30(R4)                     NO... BUMP                 00317\n         B     TESTLP                              AND LOOP             00318\n         SPACE                                                          00319\nBADWORD  LA    R15,4                    RC = 4..WORD IS N.G.            00320\n         BR    R14                      AND RETURN                      00321\n         EJECT                                                          00322\nCHKWORD  L     R6,SAVETABL              PT TO BEGIN OF USED KEYWORDS    00323\nCHKWDLP  C     R6,NEXTENTR              END OF USED ENTRIES?            00324\n         BNL   TBLADD                        YES.. ADD WORD TO TBL      00325\n         EX    R8,CLCUSED               WAS WORD USED YET?              00326\n         BER   R14                           YES.. DONT ADD             00327\n         LA    R6,30(R6)                BUMP                            00328\n         B     CHKWDLP                  AND LOOP                        00329\n         SPACE                                                          00330\nTBLADD   MVC   0(30,R6),BLANK255        BLANK OUT SPOT IN TABLE FIRST   00331\n         EX    R8,MVC                   NEW WORD ADD TO TBL             00332\n         LA    R6,30(R6)                BUMP TABLE POINTER              00333\n         ST    R6,NEXTENTR              AND SAVE FOR LATER              00334\n         BR    R14                      RETURN TO MAINLINE              00335\n         EJECT                                                          00336\nBLDL     L     R6,SAVETABL              PT TO BEGINNING OF USED WORDS   00337\n         SR    R8,R8                    CLEAR A REG                     00338\nBLDLLP   C     R6,NEXTENTR              END OF TABLE?                   00339\n         BE    CHKLASTL                      YES... SEE IF ONE MORE KW  00340\n         CH    R8,TWO                   TWO WORDS THIS LINE?            00341\n         BE    PUTLCARD                      YES... DONE THIS LINE      00342\n         CH    R8,ONE                   ONE WORD THIS LINE?             00343\n         BE    DOLKW2                        YES... DONE THIS LINE      00344\nLMOVE1   MVC   LKW1(28),0(R6)           MOVE KEYWORD TO LINE            00345\nLBUMP    AH    R8,ONE                   ADD ONE TO COUNTER              00346\n         LA    R6,30(R6)                     BUMP                       00347\n         B     BLDLLP                        AND LOOP                   00348\nDOLKW2   MVC   LKW2(28),0(R6)           MOVE IN 2ND KEYWORD THIS LINE   00349\n         B     LBUMP                         AND BUMP                   00350\n         SPACE                                                          00351\nPUTLCARD MVC   LSEQ(8),BLANK255         INIT SEQ # WITH BLANKS          00352\n         CVD   R11,DWORK                CONVERT SEQ # TO DECIMAL        00353\n         UNPK  LSEQ(8),DWORK            UNPACK IT INTO LINE             00354\n         OI    LSEQ+7,X'F0'             FIX IT UP                       00355\n         MVC   OUTREC(255),BLANK255     CLEAR OUT OUTPUT WORKAREA       00356\n         MVC   OUTREC(72),LLINE         MOVE LLINE TO OUTPUT            00357\n         PUT   FILEOUT,OUTREC           WRITE IT OUT                    00358\n         AH    R11,ONE                  ADD ONE TO SEQ NUMBER           00359\n         MVC   LKW1(28),BLANK255        CLEAR OUT 1ST KEYWORD           00360\n         MVC   LKW2(28),BLANK255        CLEAR OUT 2ND KEYWORD           00361\n         SR    R8,R8                    RESET COUNTER                   00362\n         B     LMOVE1                   AND CONTINUE                    00363\n         SPACE                                                          00364\nCHKLASTL CLC   LKW1(28),BLANK255        IS THE KEYWORD BLANK?           00365\n         BE    ENDKW                          YES... DONE KWD'ING       00366\n         MVC   LSEQ(8),BLANK255         INIT SEQ # WITH BLANKS          00367\n         CVD   R11,DWORK                CONVERT SEQ # TO DECIMAL        00368\n         UNPK  LSEQ(8),DWORK            UNPACK IT INTO LINE             00369\n         OI    LSEQ+7,X'F0'             FIX IT UP                       00370\n         MVC   OUTREC(255),BLANK255     CLEAR OUT OUTPUT WORKAREA       00371\n         MVC   OUTREC(72),LLINE         MOVE LLINE TO OUTPUT            00372\n         PUT   FILEOUT,OUTREC           WRITE IT OUT                    00373\n         AH    R11,ONE                  ADD ONE TO SEQ NUMBER           00374\n         B     ENDKW                    NOW DONE KWD'ING                00375\n         EJECT                                                          00376\n*                                                                       00377\n*   HEADER RECORD FORMAT                                                00378\n*                                                                       00379\nHEADER   DS    0CL72                                                    00380\nHRDW     DC    X'00480000'                                              00381\nHSEQ     DC    C'00000001'                                              00382\nH        DC    C'H'                                                     00383\n         DC    C' '                                                     00384\nFILENAME DC    C'E'                                                     00385\nTOPIC#   DS    CL6                                                      00386\n         DC    C' S=MVS C=G'                                            00387\n         DC    CL59' '                                                  00388\n*                                                                       00389\n*   TITLE LINE  FORMAT                                                  00390\n*                                                                       00391\nTITLE    DS    0CL72                                                    00392\nTRDW     DC    X'00480000'                                              00393\nTSEQ     DC    C'00000002'                                              00394\nT        DC    C'T'                                                     00395\n         DC    C' '                                                     00396\nTTOPIC   DS    CL58                                                     00397\n         DC    CL20' '                                                  00398\n         SPACE                                                          00399\n*                                                                       00400\n*   KEYWORD LINE FORMAT                                                 00401\n*                                                                       00402\nKEYWORD  DS    0CL72                                                    00403\nKRDW     DC    X'00480000'                                              00404\nKSEQ     DC    C'00000003'                                              00405\nK        DC    C'K'                                                     00406\n         DC    C' '                                                     00407\nKTOPIC   DS    CL58                                                     00408\n         DC    CL20' '                                                  00409\n         SPACE                                                          00410\n*                                                                       00411\n* L KEYWORD LINE FORMAT                                                 00412\n*                                                                       00413\nLLINE    DS    0CL72                                                    00414\nLRDW     DC    X'00480000'                                              00415\nLSEQ     DS    CL8                                                      00416\nL        DC    C'L'                                                     00417\n         DC    C' '                                                     00418\nLKW1     DS    CL28                                                     00419\n         DC    C' '                                                     00420\nLKW2     DS    CL28                                                     00421\n         DC    C' '                                                     00422\n         SPACE                                                          00423\n*                                                                       00424\n*   BLANK LINE FORMAT                                                   00425\n*                                                                       00426\nBLANKL   DS    0CL72                                                    00427\nBRDW     DC    X'00480000'                                              00428\nBSEQ     DS    CL8                                                      00429\n         DC    CL70' '                                                  00430\n*                                                                       00431\n*   $EOM LINE FORMAT                                                    00432\n*                                                                       00433\n$EOMLINE DS    0CL72                                                    00434\n         DC    CL4'$EOM'                                                00435\n         DC    CL68' '                                                  00436\n         SPACE                                                          00437\n         EJECT                                                          00438\nSYSIN    DCB   DDNAME=SYSIN,DSORG=PS,EODAD=ENDREAD,                    X00439\n               LRECL=80,                                               X00440\n               MACRF=(GM),RECFM=FB                                      00441\n         EJECT                                                          00442\n         SPACE                                                          00443\nFILEIN   DCB   DDNAME=FILEIN,DSORG=PS,EODAD=EOFILE,                    X00444\n               MACRF=(GM)                                               00445\n         EJECT                                                          00446\nFILEOUT  DCB   BLKSIZE=3120,DDNAME=FILEOUT,DSORG=PS,                   X00447\n               LRECL=255,                                              X00448\n               MACRF=(PM),RECFM=VB                                      00449\n         EJECT                                                          00450\n         LTORG                                                          00451\n         EJECT                                                          00452\n*                                                                       00453\n* INPUT OUTPUT WORK AREA                                                00454\n*                                                                       00455\n         DS   0D                        FORCE DOUBLE WORD ALIGNMENT     00456\nDWORK    DC    D'0'                                                     00457\nSAVENOKW DC    F'0'                                                     00458\nSAVETABL DC    F'0'                                                     00459\nSAVEENTR DC    F'0'                                                     00460\nNEXTENTR DC    F'0'                                                     00461\nONE      DC    H'1'                                                     00462\nTWO      DC    H'2'                                                     00463\nRDW      DC    X'00540000'              DEFAULT RDW 84 BYTE RECORD      00464\nENDTABLE DC    C'ENDTABLE'                                              00465\nNEWFILE  DC    C'//***FILE'                                             00466\nSECTION  DC    C'//***SECTION'                                          00467\nBLANK255 DC    255C' '                                                  00468\n         SPACE                                                          00469\nCLC      CLC   0(1,R4),0(R7)            IS THIS WORD NOT TO BE USED?    00470\nCLCUSED  CLC   0(1,R6),0(R7)            WAS WORD USED YET?              00471\nMVC      MVC   0(1,R6),0(R7)            ADD WORD TO USED TABLE          00472\n         SPACE                                                          00473\nENDSW    DS    CL1                                                      00474\nSAVEPARM DS    CL3                                                      00475\nUNPKWORK DS    CL6                                                      00476\nTOPIC    DS    CL58                                                     00477\nINREC    DS    CL255                                                    00478\nOUTREC   DS    CL255                                                    00479\n         SPACE                                                          00480\nTRTABLE  DC    CL255' '                                                 00481\n         ORG   TRTABLE+X'40'                                            00482\n         DC    C'          \u00a2.<(+|&&         !$*);\u00ac-/        \u00a6,%_>?'     00483\n         ORG   TRTABLE+X'70'                                            00484\n         DC    C'         `:#@''=\" '                                    00485\n         ORG   TRTABLE+X'81'                                            00486\n         DC    C'ABCDEFGHI       '                                      00487\n         ORG   TRTABLE+X'91'                                            00488\n         DC    C'JKLMNOPQR       ~'                                     00489\n         ORG   TRTABLE+X'A2'                                            00490\n         DC    C'STUVWXYZ                      {'                       00491\n         ORG   TRTABLE+C'A'                                             00492\n         DC    C'ABCDEFGHI      }'                                      00493\n         ORG   TRTABLE+C'J'                                             00494\n         DC    C'JKLMNOPQR      \\ '                                     00495\n         ORG   TRTABLE+C'S'                                             00496\n         DC    C'STUVWXYZ      '                                        00497\n         ORG   TRTABLE+C'0'                                             00498\n         DC    C'0123456789      '                                      00499\n         ORG                                                            00500\n         SPACE                                                          00501\nTABLE    DS    3000CL255                 MAX 3000 LINES PER ENTRY       00502\n         EJECT                                                          00503\nNOKWTBL  DSECT                                                          00504\nNOKW     DS    CL16364            ABOUT 800 KEYWORDS      CBT           00505\n*OKW     DS    CL4096             ABOUT 800 KEYWORDS      CBT           00506\n         EJECT                                                          00507\nKWTBL    DSECT                                                          00508\nKW       DS    CL49152                                                  00509\n#PAN$AUD CSECT                                                          005094\n$PAN#AUD DC    CL21'003CBT1342   06/14/82'                              005095\n         END                                                            00510\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "OSTAREDC": {"ttr": 1798, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x99\\x07_\\x00\\x99\\x07\\x7f\\x17\\x10\\x01\\\\\\x01]\\x00\\x00\\xd9\\xd4\\xc3\\xf2\\xf0@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1999-03-16T00:00:00", "modifydate": "1999-03-18T17:10:00", "lines": 348, "newlines": 349, "modlines": 0, "user": "RMC20"}, "text": "OSTAREDC TITLE 'A PROGRAM TO ADD/ CHECK ERROR DETECTION BYTES'\n*\n*    This software is supplied by Amdahl Corp. for the transmission\n* of materials between ObjectStar support and it's customers. Any\n* other use of this software is at the user's discretion and is not\n* supported in any way by Amdahl Corp.\n*\n*   The software is supplied as 'freeware' and may be used/modified\n* by anyone provided they do not then sell it on for profit or\n* expect support from Amdahl Corp.\n*\n*   Limited support MAY in some cases be available from the author.\n*\nR15      EQU   15\nR14      EQU   14\nRSAV     EQU   13\nRBASE    EQU   12\nRLINK    EQU   11\nRWORK    EQU   10\nRCOUNT   EQU   9\nR8       EQU   8\nR7       EQU   7\nR6       EQU   6\nR5       EQU   5\nR4       EQU   4\nR3       EQU   3\nR2       EQU   2\nR1       EQU   1\nR0       EQU   0\n         TITLE 'INITIALISE PROGRAM'\nOSTAREDC CSECT\nOSTAREDC AMODE 24\nOSTAREDC RMODE 24\n         PRINT DATA\n         USING OSTAREDC,R15\n         B     OSTARED1\n         DC    C'OSTAREDC V1.01 &SYSDATE'\n*        V2.01 - ADD DISCLAIMER.\nOSTARED1 DS    0H\n         PRINT NODATA\n         PRINT NOGEN\n         DROP  R15\n         STM   14,12,12(RSAV)\n         LR    RBASE,R15\n         USING OSTAREDC,RBASE\n         L     R15,SAVEADDR\n         ST    R15,8(RSAV)\n         ST    RSAV,4(R15)\n         LR    RSAV,R15\n         USING SAVEAREA,RSAV\n         L     RWORK,0(R1)               SAVE PARM POINTER\n         OPEN  (SYSOUT,OUTPUT)\n         LA    R1,SYSOUT\n         USING IHADCB,R1\n         TM    DCBOFLGS,DCBOFOPN\n         DROP  R1\n         BNO   ERROR1\n         CLC   PARMLEN,0(RWORK)          CORECT PARM LENGTH?\n         BNE   ERROR2\n         MVC   PARMS,2(RWORK)            SAVE PARMS\n         PACK  DWORD,PARMDSNS\n         CVB   R1,DWORD\n         STH   R1,PARMDSNS\n*        MVC   PARMDSNS,=H'1'            DEBUG\n         CLI   PARMMODE,C'A'\n         BE    ADD\n         CLI   PARMMODE,C'U'\n         BE    CHECK\n         B     ERROR3\n         TITLE 'ADD EDC MAINLINE'\nADD      DS    0H\n         OPEN  (FB88FILE,OUTPUT)\n         LA    R1,FB88FILE\n         BAL   RLINK,OPENCHK\n         LA    RCOUNT,1                 ALLOW FOR HEADER RECORD\n         RDJFCB FB88FILE\n         BAL   RLINK,JFCBCHK\n         MVC   SAVELEN,=H'80'            SET LRECL FOR OTHER DS\nADDDSLP  DS    0H                        DATASET LOOP\n         LH    R1,DSNS\n         LA    R1,1(R1)                  ADD 1 TO DATASETS PROCESSED\n         STH   R1,DSNS\n         CH    R1,PARMDSNS               ARE WE FINISHED?\n         BH    ADDEND                    YES - BRANCH\n         CVD   R1,DWORD\n         UNPK  DWORD(5),DWORD+6(2)\n         OI    DWORD+4,C'0'              GET DATASET NUMBER\n         LA    R1,FB80FILE\n         USING IHADCB,R1\n         MVC   DCBDDNAM+5(3),DWORD+2     MOVE TO DDNAME OSTARNNN\n         MVC   SAVEDDN,DCBDDNAM          MOVE TO DDNAME OSTARNNN\n         OPEN  (FB80FILE,INPUT)          OPEN INPUT FILE\n         LA    R1,FB80FILE\n         BAL   RLINK,OPENCHK\n         RDJFCB FB80FILE\n         BAL   RLINK,JFCBCHK\n         MVC   FILTOKEN,PARMTOK          INITIALISE FILE EDC\nADDRDLP  DS    0H\n         GET   FB80FILE,RECFB80          READ NEXT RECORD\n         XC    FILTOKEN,RECFB80          MODIFY FILE EDC\n         XC    FILTOKEN,RECFB80+40       MODIFY FILE EDC\n         MVC   RECTOKEN,RECFB80          INITIALISE RECORD EDC\n         LA    R1,RECFB80+8\n         LA    R0,9\nADDEDCLP DS    0H\n         XC    RECTOKEN,0(R1)\n         LA    R1,8(R1)\n         BCT   R0,ADDEDCLP\n         PUT   FB88FILE,RECFB88\n         LA    RCOUNT,1(RCOUNT)\n         B     ADDRDLP\n         SPACE\nADDRDLPE DS    0H                        END OF FILE ON READ\n         MVC   RECFB88(40),PARMTOK\n         MVC   RECFB88+40(40),FILTOKEN\n         XC    RECTOKEN,RECTOKEN\n         PUT   FB88FILE,RECFB88\n         LA    RCOUNT,1(RCOUNT)\n         CLOSE (FB80FILE)\n         B     ADDDSLP\n         SPACE\n         TITLE 'CHECK EDC MAINLINE'\nCHECK    DS    0H\n         OPEN  (FB88FILE,INPUT)\n         LA    R1,FB88FILE\n         BAL   RLINK,OPENCHK\n         RDJFCB FB88FILE\n         BAL   RLINK,JFCBCHK\n         MVC   SAVELEN,=H'80'            SET LRECL FOR OTHER DS\n         GET   FB88FILE,RECFB88          IGNORE HEADER\n         LA    RCOUNT,1                  # OF RECORS READ\nCHKDSLP  DS    0H                        DATASET LOOP\n         LH    R1,DSNS\n         LA    R1,1(R1)                  ADD 1 TO DATASETS PROCESSED\n         STH   R1,DSNS\n         CH    R1,PARMDSNS               ARE WE FINISHED?\n         BH    CHKEND                    YES - BRANCH\n         CVD   R1,DWORD\n         UNPK  DWORD(5),DWORD+6(2)\n         OI    DWORD+4,C'0'              GET DATASET NUMBER\n         LA    R1,FB80FILE\n         USING IHADCB,R1\n         MVC   DCBDDNAM+5(3),DWORD+2     MOVE TO DDNAME OSTARNNN\n         MVC   SAVEDDN,DCBDDNAM          MOVE TO DDNAME OSTARNNN\n         DROP  R1\n         OPEN  (FB80FILE,OUTPUT)         OPEN INPUT FILE\n         LA    R1,FB80FILE\n         BAL   RLINK,OPENCHK\n         RDJFCB FB80FILE\n         BAL   RLINK,JFCBCHK\n         MVC   FILTOKEN,PARMTOK          INITIALISE FILE EDC\nCHKRDLP  DS    0H\n         GET   FB88FILE,RECFB88          READ NEXT RECORD\n         LA    RCOUNT,1(RCOUNT)\n         CLC   PARMTOK,RECFB88           END OF INPUT FILE\n         BE    CHKRDLPE                  YES BRANCH\n         XC    FILTOKEN,RECFB80          MODIFY FILE EDC\n         XC    FILTOKEN,RECFB80+40       MODIFY FILE EDC\n         MVC   DWORD,RECFB80             INITIALISE RECORD EDC\n         LA    R2,RECFB80+8\n         LA    R3,9\nCHKEDCLP DS    0H\n         XC    DWORD,0(R2)\n         LA    R2,8(R2)\n         BCT   R3,CHKEDCLP\n         CLC   DWORD,RECTOKEN\n         BNE   CHKEDCER\nCHKPUT   DS    0H\n         PUT   FB80FILE,RECFB80\n         B     CHKRDLP\nCHKEDCER DS    0H                        CHECKSUM ERROR\n         L     R1,ERRORS\n         LA    R1,1(R1)\n         ST    R1,ERRORS\n         MVC   PLINE(32),=C'CORRUPT DATA DETECTED IN RECORD '\n         CVD   RCOUNT,DWORD\n         UNPK  PLINE+32(15),DWORD\n         OI    PLINE+46,C'0'\n         BAL   RLINK,PRINT\n         B     CHKPUT\n         SPACE\nCHKRDLPE DS    0H                        END OF FILE ON READ\n         CLC   FILTOKEN,RECFB80+40\n         BE    CHRDCLOS\n         L     R1,ERRORS\n         LA    R1,1(R1)\n         ST    R1,ERRORS\n         MVC   PLINE(32),=C'CORRUPT FILE DETECTED AT RECORD '\n         CVD   RCOUNT,DWORD\n         UNPK  PLINE+32(15),DWORD\n         OI    PLINE+46,C'0'\n         BAL   RLINK,PRINT\nCHRDCLOS DS    0H\n         CLOSE (FB80FILE)\n         B     CHKDSLP\n         TITLE 'END OF INPUT IN BOTH MODES'\nADDEND   DS    0H                        END OF JOB\nCHKEND   DS    0H                        END OF JOB\n         CLOSE (FB88FILE)\n         MVC   PLINE(21),=C'Records in XMT file :'\n         MVC   PLINE+21(L'EDMASK),EDMASK\n         CVD   RCOUNT,DWORD\n         ED    PLINE+21(L'EDMASK),DWORD\n         BAL   RLINK,PRINT\n         MH    RCOUNT,=H'88'\n         MVC   PLINE(21),=C'Bytes in XMT file   :'\n         MVC   PLINE+21(L'EDMASK),EDMASK\n         CVD   RCOUNT,DWORD\n         ED    PLINE+21(L'EDMASK),DWORD\n         BAL   RLINK,PRINT\n         SR    R0,R0\n         LR    R1,RCOUNT\n         D     R0,=F'1024'\n         MVC   PLINE(21),=C'Kbytes in XMT file  :'\n         MVC   PLINE+21(L'EDMASK),EDMASK\n         CVD   R1,DWORD\n         ED    PLINE+21(L'EDMASK),DWORD\n         BAL   RLINK,PRINT\n         CLOSE (SYSOUT)\n         L     R15,ERRORS\n         LTR   R15,R15\n         BZ    RETURN\n         LA    R15,16\nRETURN   DS    0H\n         L     RSAV,4(RSAV)\n         L     14,12(RSAV)\n         LM    0,12,20(RSAV)\n         BR    R14\n         TITLE 'PRINT ERROR MESSAGE, CLOSE ANY OPEN FILES, EXIT RC=16'\nERROR    DS    0H\n         BAL   RLINK,PRINT\n         LA    R1,FB80FILE\n         USING IHADCB,R1\n         TM    DCBOFLGS,DCBOFOPN\n         DROP  R1\n         BNO   ERRCONT1\n         CLOSE (FB80FILE)\nERRCONT1 DS    0H\n         LA    R1,FB88FILE\n         USING IHADCB,R1\n         TM    DCBOFLGS,DCBOFOPN\n         DROP  R1\n         BNO   ERRCONT2\n         CLOSE (FB80FILE)\nERRCONT2 DS    0H\n         CLOSE (SYSOUT)\n         LA    R15,16\n         B     RETURN\n         TITLE 'SUBROUTINES'\nOPENCHK  DS    0H\n         USING IHADCB,R1                R1 POINTS TO DCB\n         TM    DCBOFLGS,DCBOFOPN\n         BNO   ERROROPN\n         BR    RLINK\n         DROP  R1\nJFCBCHK  DS    0H\n         LTR   R15,R15\n         BNZ   ERRORJFC\n         LA    R1,JFCBDATA\n         USING JFCBLK,R1\n         TM    JFCRECFM,X'80'\n         BNO   ERRORRFM\n         CLC   SAVELEN,JFCLRECL\n         BNE   ERRORRLN\n         BR    RLINK\n         DROP  R1\nPRINT    DS    0H\n         PUT   SYSOUT,PLINE-1\n         MVC   PLINE,PLINE-1\n         BR    RLINK\n         TITLE 'ERROR ROUTINES'\nERROR1   DS    0H\n         WTO   'ERROR: UNABLE TO OPEN SYSOUT DD.',ROUTCDE=11\n         ABEND 0001\n         B     ERROR\nERROR2   DS    0H\n         MVC   PLINE(L'MSG2),MSG2\n         B     ERROR\nERROR3   DS    0H\n         MVC   PLINE(L'MSG3),MSG3\n         B     ERROR\nERROROPN DS    0H\n         MVC   PLINE(L'MSG5),MSG5\n         MVC   PLINE+3(8),SAVEDDN\n         B     ERROR\nERRORRFM DS    0H\n         MVC   PLINE(L'MSG6),MSG6\n         MVC   PLINE+3(8),SAVEDDN\n         B     ERROR\nERRORRLN DS    0H\n         MVC   PLINE(L'MSG7),MSG7\n         MVC   PLINE+3(8),SAVEDDN\n         B     ERROR\nFB88EOF  DS    0H  END OF FILE ENCOUNTERED ON FB88 FILE\n         MVC   PLINE(L'MSG8),MSG8\n         B     ERROR\nERRORJFC DS    0H\n         MVC   PLINE(L'MSG9),MSG9\n         MVC   PLINE+3(8),SAVEDDN\n         B     ERROR\nMSG2     DC    C'ERROR2: INVALID INPUT PARM LENGTH'\nMSG3     DC    C'ERROR3: MODE IS NOT ADD OR CHECK.'\nMSG5     DC    C'DD XXXXXXXX - OPEN ERROR.'\nMSG6     DC    C'DD XXXXXXXX - INVALID RECFM.'\nMSG7     DC    C'DD XXXXXXXX - INVALID LRECL.'\nMSG8     DC    C'ERROR8: PREMATURE EOF ON INPUT FILE.'\nMSG9     DC    C'DD XXXXXXXX - UNABLE TO READ JFCB.'\nEDMASK   DC    X'402020206B2020206B2020206B2020206B20202040'\n         TITLE ' WORKING STORAGE'\n         LTORG\nSAVEADDR DC    A(WORKSTOR)\n         DROP  RBASE\nWORKSTOR CSECT\nSAVEAREA DS    18F\nERRORS   DS    F'0'\nDWORD    DS    D\nSAVEDDN  DC    CL8'OSTARXMT'\nSAVELEN  DC    H'88'\nDSNS     DC    H'0'\n         DS    0H\nPARMS    DS    0XL45\nPARMDSNS DS    CL3\nPARMMODE DS    CL2\nPARMTOK  DS    CL40\nPARMLEN  DC    H'45'\nFILTOKEN DS    XL40\nRECFB88  DS    0XL88\nRECFB80  DS    XL80\nRECTOKEN DS    XL8\n         PRINT NOGEN\nSYSOUT   DCB   DDNAME=SYSOUT,MACRF=(PM),DSORG=PS\nFB80FILE DCB   DDNAME=OSTARXXX,MACRF=(GM,PM),DSORG=PS,EODAD=ADDRDLPE,  X\n               LRECL=80,RECFM=FB,EXLST=JFCB1\nFB88FILE DCB   DDNAME=OSTARXMT,MACRF=(GM,PM),DSORG=PS,                 X\n               LRECL=88,RECFM=FB,EXLST=JFCB1,EODAD=FB88EOF\n         DC    CL1' '  BYTE USED TO CLEAR MSG\nPLINE    DC    CL80' '\n         DC    CL52' '\n         DS    0F\nJFCB1    DC    X'07',AL3(JFCBDATA)\n         DC    X'80',AL3(0)\nJFCBDATA DS    XL512\n         TITLE 'DSECTS'\n         DCBD  DSORG=PS\nJFCBLK   DSECT\n         IEFJFCBN\n         TITLE 'END OF PROGRAM'\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "OSTARREC": {"ttr": 2049, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x13\\x00\\x00\\x00\\x99\\x06/\\x00\\x99\\x07\\x7f\\x17\\x11\\x01.\\x01\\r\\x00\\x00\\xd9\\xd4\\xc3\\xf2\\xf2@@@@@'", "ispf": {"version": "01.19", "flags": 0, "createdate": "1999-03-03T00:00:00", "modifydate": "1999-03-18T17:11:00", "lines": 302, "newlines": 269, "modlines": 0, "user": "RMC22"}, "text": "/* * Rexx proc: OSTARREC ** Author: RMC20 ***** Date: 7 Mar 1997 *** */\n/* ----------------------------------------------------------------- */\n/* Purpose: Uncompress multiple datasets from a dataset created by   */\n/* OSTARXMT for internet transmission.                               */\n/* ----------------------------------------------------------------- */\n/*                                                                   */\n/*    This software is supplied by Amdahl Corp. for the transmission */\n/* of materials between ObjectStar support and it's customers. Any   */\n/* other use of this software is at the user's discretion and is not */\n/* supported in any way by Amdahl Corp.                              */\n/*                                                                   */\n/*   The software is supplied as 'freeware' and may be used/modified */\n/* by anyone provided they do not then sell it on for profit or      */\n/* expect support from Amdahl Corp.                                  */\n/*                                                                   */\n/*   Limited support MAY in some cases be available from the author. */\n/*                                                                   */\n/* ----------------------------------------------------------------- */\n/*  V 1.02 remove chars which won't ascii transmit.                  */\n/*  V 1.03 Make work file same size as input file.                   */\n/*  V 1.04 Improve performance by better blocking workfile.          */\n/*  V 1.05 Add diagnostic info on error checking failure.            */\n/*  V 1.06 Correct SYSUT2 allocation if inputfile in blocks.         */\n/*  V 1.07 Correct record counts.                                    */\n/*  V 1.08 Provide error message if input truncated.                 */\n/*  V 1.09 Allow proc to continue after checksum error.              */\n/*  V 1.0A Allow allow use of TRSMAIN PAK files.                     */\n/*  V 1.0B Add support for XM1 & XM2 files.                          */\n/*  V 1.0C Simplify detection of different input formats.            */\n/*  V 1.0D Add autoname option and improve help.                     */\n/*  V 1.0E remove | characters, x'4f', which don't translate well.   */\n/*  V 1.0F Add fast edc assembler program OSTAREDC.                  */\n/*  V 1.0G Add disclaimer.                                           */\n/* ----------------------------------------------------------------- */\n/* Usage: Add OSTARREC member to a dataset in sysexec/sysproc concat */\n/*  then type OSTARREC against a .XM? format dataset in ISPF 3.4.    */\n/*  User is prompted, via TSO RECEIVE, for output DSN(s).            */\n/* ----------------------------------------------------------------- */\n/* Parameter(s): InputDataset autoname                               */\n/* ***************************************************************** */\nTRSMAIN = \"'CSUPP.SHARED.LOADLIB(TRSMAIN)'\" /* MODIFY IF AVAILABLE */\nOSTAREDC = \"'CSUPP.SHARED.LOADLIB(OSTAREDC)'\" /* MODIFY IF AVAILABLE */\nADDRESS \"TSO\"\nARG INDSN P1 .\nIF INDSN = \"\"  THEN CALL HELP\nIF INDSN = \"?\" THEN CALL HELP\nIF ABBREV(\"AUTONAME\",P1,4)\nTHEN AUTONAME = 1\nELSE AUTONAME = 0\nRECS = 0\n/* PHASE 1 - EVALUATE INPUT */\nIF SYSDSN(INDSN) <> \"OK\"\nTHEN CALL ERROR \"unable to find dataset\" INDSN \"Please respecify.\"\nX = LASTPOS('.',INDSN)\nSFX = SUBSTR(INDSN,X+1)\nPFX = SUBSTR(INDSN,1,X-1)\nIF SUBSTR(PFX,1,1) = \"'\"\nTHEN DO\n     QUOTES = 1\n     X = LENGTH(SFX)\n     SFX = SUBSTR(SFX,1,X-1)\n     PFX = SUBSTR(PFX,2)\n     END\nELSE QUOTES = 0\nX = PROMPT(\"ON\")\nX = LISTDSI(INDSN)\nSELECT\n  WHEN SFX = \"XMT\"\n  THEN IF SYSLRECL <> 88\n       THEN CALL ERROR \"Invalid LRECL=\"SYSLRECL\" for file with sfx=\"SFX\".\"\n  WHEN SFX = \"XM1\"\n  THEN IF SYSLRECL <> 1024\n       THEN CALL ERROR \"Invalid LRECL=\"SYSLRECL\" for file with sfx=\"SFX\".\"\n  WHEN SFX = \"XM2\"\n  THEN IF SYSLRECL <> 1024\n       THEN CALL ERROR \"Invalid LRECL=\"SYSLRECL\" for file with sfx=\"SFX\".\"\n  OTHERWISE\n  CALL ERROR \"Dsname\" INDSN \"suffix\" SFX \"is not XMT, XM1, or XM2.\"\n  END\nIF SYSUNITS = \"BLOCK\" THEN SYSUNITS = \"\"\n/* PHASE 2 - DECOMPRESS IF POSSIBLE */\nIF SFX <> \"XMT\"\nTHEN DO\n     IF SYSDSN(TRSMAIN) <> \"OK\"\n     THEN CALL ERROR \"TRSMAIN not available. Cannot decompress data.\"\n     X = LASTPOS('.',INDSN)\n     IF SFX = \"XM2\"\n     THEN DO\n          XM2 = 1\n          ODSN = SUBSTR(INDSN,1,X-1)\".XMX1\"\n          IF SUBSTR(ODSN,1,1) = \"'\" THEN ODSN = ODSN\"'\"\n          END\n     ELSE DO\n          XM2 = 0\n          ODSN = \"OSTARREC.WORKFILE\"\n          END\n     IF SYSDSN(ODSN) = \"OK\"\n     THEN CALL ERROR \"Dataset\" ODSN \"already exists. Please delete it.\"\n     SAY \"Uncompressing\" INDSN \"into\" ODSN\".\"\n     SELECT\n       WHEN SYSUNIT = \"3390\" THEN WORK = \"27984\"\n       OTHERWISE\n       WORK = 0\n       END\n     \"ALLOCATE FI(SYSPRINT) DA(*) SHR REUSE\"\n     \"ALLOCATE FI(INFILE) DA(\"INDSN\") SHR REUSE\"\n     IF RC <> 0 THEN CALL ERROR \"Unable to allocate\" INDSN\".\"\n     \"ALLOCATE FI(OUTFILE) DA(\"ODSN\") NEW REUSE TRACKS\",\n           \"SPACE(\"SYSALLOC*5\",\"SYSALLOC*5\")\" SYSUNITS \"CATALOG\"\n     IF RC <> 0 THEN CALL ERROR \"Unable to allocate\" ODSN\".\"\n     \"CALL\" TRSMAIN \"'UNPACK'\"\n     IF RC <> 0\n     THEN CALL ERROR \"Unable to uncompress\" INDSN\". RC=\"RC\".\"\n     \"FREE FI(INFILE,OUTFILE)\"\n     IF XM2\n     THEN EXIT 0\n     INDSN = ODSN\n     END\n/* PHASE 3 - UNPACKAGE XMT FILE */\n\"ALLOCATE FI(OSTARXMT) DA(\"INDSN\") SHR REUSE\"\nIF RC = 0\nTHEN X = LISTDSI(INDSN)\nELSE CALL ERROR \"Unable to allocate file\" INDSN\nSELECT\n  WHEN SYSUNIT = \"3390\" THEN WORK = \"27920\"\n  WHEN SYSUNIT = \"3380\" THEN WORK = \"23440\"\n  OTHERWISE\n  WORK = 0\n  END\nEXECIO \"1 DISKR OSTARXMT ( STEM IN\"\nPARSE VAR IN1 HEADER VERS DSNS DATE TIME .\nIF HEADER = COPIES(\"OSTARXMT10\",4)\nTHEN NOP\nELSE CALL ERROR \"Invalid input dsn\" INDSN\". Invalid header.\"\nIF SUBSTR(VERS,1,4) = \"V1.0\"\nTHEN NOP\nELSE CALL ERROR \"Input file is\" VERS\". You need a new version of 'OSTARREC'.\"\nTOKEN = HEADER\nRECS = 1\nRCVC = 0\nSAY \"Now processing input file\" INDSN\".\"\nSAY \"Created on\" DATE \"at\" TIME\", containing\" DSNS \"dataset(s).\"\nIF SYSDSN(OSTAREDC) = \"OK\"\nTHEN DO\n     EXECIO \"0 DISKR OSTARXMT ( FINIS\"\n     DO I = 1 TO DSNS\n        DDN.I = \"OSTAR\"RIGHT(I,3,\"0\")\n        \"ALLOCATE FI(\"DDN.I\") NEW DELETE REUSE\",\n               \"SPACE(\"SYSALLOC\",\"SYSALLOC%10\")\" SYSUNITS ,\n               \"LRECL(80) RECFM(F B) BLKSIZE(\"WORK\")\"\n        END\n     PARMS = \"'\"RIGHT(DSNS,3,\"0\")\"UN\"HEADER\"'\"\n     \"ALLOCATE FI(SYSOUT) DA(*) SHR\"\n     \"CALL\" OSTAREDC PARMS\n     EDCRC = RC\n     IF EDCRC = 0\n     THEN NOP\n     ELSE CALL ERROR \"Record/file level error checking failed.\"\n     DO I = 1 TO DSNS\n        IF AUTONAME\n        THEN DO\n             IF QUOTES\n             THEN PUSH \"DA('\"PFX\".XMX\"I\"')\"\n             ELSE PUSH \"DA(\"PFX\".XMX\"I\")\"\n             END\n       \"RECEIVE INDD(\"DDN.I\") NODISPLAY\"\n       \"FREE FI(\"DDN.I\")\"\n        END\n     \"FREE FI(OSTARXMT)\"\n     END\nELSE DO\n     SAY \"Fast error detection program, OSTAREDC, not available.\"\n     \"ALLOCATE FI(SYSUT2) NEW DELETE REUSE\",\n          \"SPACE(\"SYSALLOC\",\"SYSALLOC%10\")\" SYSUNITS ,\n               \"LRECL(80) RECFM(F B) BLKSIZE(\"WORK\")\"\n     IF RC = 0\n     THEN NOP\n     ELSE CALL ERROR \"Error allocating work file\"\n     DO FOREVER\n        EXECIO \"1 DISKR OSTARXMT (STEM IN\"\n        IF RC = 2 THEN LEAVE\n        IF RC = 0\n        THEN RECS = RECS + 1\n        ELSE CALL ERROR \"Read error on input file.\"\n        IF SUBSTR(IN1,1,40) = HEADER\n        THEN DO\n             EXECIO \"0 DISKW SYSUT2 (FINIS\"\n             IF TOKEN = SUBSTR(IN1,41,40)\n             THEN TOKEN = HEADER\n             ELSE DO\n                  TOKEN = HEADER\n                  CALL ERROR \"File level error checking failed.\"\n                  END\n             RCVC = RCVC + 1\n             IF AUTONAME\n             THEN DO\n                  IF QUOTES\n                  THEN PUSH \"DA('\"PFX\".XMX\"RCVC\"')\"\n                  ELSE PUSH \"DA(\"PFX\".XMX\"RCVC\")\"\n                  END\n             \"RECEIVE INDD(SYSUT2) NODISPLAY\"\n             ITERATE\n             END\n        ELSE DO\n             TOKEN2 = SUBSTR(IN1,1,8)\n             DO I = 9 TO 73 BY 8\n                TOKEN2 = BITXOR(TOKEN2,SUBSTR(IN1,I,8))\n                END\n             IF TOKEN2 = SUBSTR(IN1,81,8)\n             THEN OUT1 = SUBSTR(IN1,1,80)\n             ELSE DO\n                  OUT1 = SUBSTR(IN1,1,80)\n                  CALL ERROR \"Record level error checking failed.\"\n                  END\n             END\n        TOKEN = BITXOR(TOKEN,SUBSTR(IN1,1,40))\n        TOKEN = BITXOR(TOKEN,SUBSTR(IN1,41,40))\n        EXECIO \"1 DISKW SYSUT2 (STEM OUT\"\n        IF RC = 0\n        THEN NOP\n        ELSE CALL ERROR \"Write error to temp file\"\n        END\n     EXECIO \"0 DISKR OSTARXMT (FINIS\"\n     EXECIO \"0 DISKW SYSUT2 (FINIS\"\n     \"FREE FI(OSTARXMT,SYSUT2)\"\n     IF SUBSTR(IN1,1,40) = HEADER\n     THEN NOP\n     ELSE CALL ERROR \"Incomplete XMT file. End of file record not found.\"\n     END\nIF INDSN = \"OSTARREC.WORKFILE\" THEN \"DELETE OSTARREC.WORKFILE\"\nEXIT 0\nERROR: PROCEDURE EXPOSE RC RECS\nPARSE ARG MSG\nSAY \" \"\nSAY \"====>\" MSG \"<====\"\nSAY \" \"\nSAY \"====> Error occurred processing record\" RECS \"<====\"\nSAY \" \"\nIF WORD(MSG,2) = 'level'\nTHEN DO\n     SAY \"Do you wish to continue after this checksum error? (Y,N)\"\n     PULL CONT\n     IF ABBREV(\"YES\",CONT,1)\n     THEN DO\n          SAY\n          SAY \"********************************************************\"\n          SAY \"*    WARNING: The file being rebuilt is corrupted.     *\"\n          SAY \"*                                                      *\"\n          SAY \"*    Do NOT use it for purposes other than diagnosis.  *\"\n          SAY \"*    ================================================  *\"\n          SAY \"********************************************************\"\n          RETURN\n          END\n     END\nEXIT 16\nHelp: procedure\nSAY \"The OSTARREC REXX procedure is used to reconstruct datasets\"\nSAY \"created by the OSTARXMT procedure.\"\nSAY \"\"\nSAY \"OSTARXMT creates 3 possible formats of file.\"\nSAY \"\"\nSAY \" An XMT file is a single MVS FB LRECL=88 file containing 1 or more\"\nSAY \"MVS sequential or partitioned datasets with error detection data\"\nSAY \"added.\"\nSAY \"\"\nSAY \" An XM1 file is a compressed version of an XMT file to allow\"\nSAY \"faster data transmission over the internet.  It has RECFM=FB and\"\nSAY \"LRECL=1024.\"\nSAY \"\"\nSAY \" An XM2 file is a HIGHLY compressed version of a single large\"\nSAY \"seqential dataset, e.g. a dump. It is quick to create and send\"\nSAY \"via the internet but has no error detection information.  It has\"\nSAY \"RECFM=FB and LRECL=1024.\"\nSAY \"\"\nSAY \"To restore files with OSTARREC do as follows :-\"\nSAY \"\"\nSAY \"1) Upload the file, using BINARY transmission, to a seqential\"\nSAY \"  dataset with RECFM=FB.\"\nSAY \"  For XMT format the file should end in .XMT and have LRECL=88.\"\nSAY \"  For XM1 format the file should end in .XM1 and have LRECL=1024.\"\nSAY \"  For XM2 format the file should end in .XM2 and have LRECL=1024.\"\nSAY \"\"\nSAY \"3) Find the uploaded dataset with ISPF 3.4 and type OSTARREC\"\nSAY \"  against it to recreate the original datasets. For XMT and XM1\"\nSAY \"  files you will be prompted to provide dataset names for each\"\nSAY \"  input file in the dataset. Press enter to select the original\"\nSAY \"  name with the high level qualifier changed to your userid as per\"\nSAY \"  the TSO RECEIVE command.\"\nSAY \"\"\nSAY \"  For any of the three formats the dataset may be large and you\"\nSAY \" may want to run the job under batch TSO. You can then add the\"\nSAY \" AUTONAME parameter, eg %OSTARREC 'my.dataset.XM1' AUTONAME, which\"\nSAY \" will cause the datasets to be named 'my.dataset.XMXnnn' where nnn\"\nSAY \" is the file number within the XMT or XM1 file.\"\nSAY \"\"\nSAY \" For info on how to create OSTARXMT files from MVS files see the\"\nSAY \"OSTARXMT help via the '%OSTARXMT ?' command.\"\nSAY \"\"\nSAY \" If you have any problems, or encounter error messages you don't\"\nSAY \"understand then contact the Support Centre.\"\nSAY \"\"\nexit 0\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "OSTARXMT": {"ttr": 2055, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x011\\x00\\x00\\x00\\x99\\x05\\x7f\\x00\\x99\\x07\\x7f\\x17\\x11\\x01\\x86\\x01o\\x00\\x00\\xd9\\xd4\\xc3\\xf2\\xf2@@@@@'", "ispf": {"version": "01.49", "flags": 0, "createdate": "1999-02-26T00:00:00", "modifydate": "1999-03-18T17:11:00", "lines": 390, "newlines": 367, "modlines": 0, "user": "RMC22"}, "text": "/* * Rexx proc: OSTARXMT ** Author: RMC20 ***** Date: 7 Mar 1997 *** */\n/* ----------------------------------------------------------------- */\n/* Purpose: Compress multiple datasets into a format suitable for    */\n/* transmission via pc, internet, etc, and reconstitution via        */\n/* OSTARREC procedure.                                               */\n/* ----------------------------------------------------------------- */\n/*                                                                   */\n/*    This software is supplied by Amdahl Corp. for the transmission */\n/* of materials between ObjectStar support and it's customers. Any   */\n/* other use of this software is at the user's discretion and is not */\n/* supported in any way by Amdahl Corp.                              */\n/*                                                                   */\n/*   The software is supplied as 'freeware' and may be used/modified */\n/* by anyone provided they do not then sell it on for profit or      */\n/* expect support from Amdahl Corp.                                  */\n/*                                                                   */\n/*   Limited support MAY in some cases be available from the author. */\n/*                                                                   */\n/* ----------------------------------------------------------------- */\n/* V 1.02 remove chars which won't ascii transmit.                   */\n/* V 1.03 remove chars which won't ascii transmit.                   */\n/* V 1.04 Allow single dataset quick option.                         */\n/* V 1.05 Fix bug introduced by 1.04.                                */\n/* V 1.06 Add data counts.                                           */\n/* V 1.07 Remove excessive trailing blanks in dsnames.               */\n/* V 1.08 Improve dataset size & blocking calculations.              */\n/* V 1.09 remove #s from dataset names.                              */\n/* V 1.0A Add support for TRSMAIN program and PAK files.             */\n/* V 1.0B Add support for XM1 & XM2 files.                           */\n/* V 1.0C Correct error in PHASE11 (compression) process.            */\n/* V 1.0D Allow XM2 format only for PS files not PO and add help.    */\n/* V 1.0E IMPROVE PERFORMANCE VIA OSTAREDC MODULE.                   */\n/* V 1.0F Synchonize versions with ostarrec. (no change)             */\n/* V 1.0G Add disclaimer.                                            */\n/*                                                                   */\n/* ***************************************************************** */\n/* Phase 1 - Identify environment and input                          */\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nTRSMAIN = \"'CSUPP.SHARED.LOADLIB(TRSMAIN)'\" /* MODIFY IF AVAILABLE */\nOSTAREDC  = \"'CSUPP.SHARED.LOADLIB(OSTAREDC)'\" /* MODIFY IF AVAILABLE */\nIF SYSDSN(TRSMAIN) = \"OK\"\nTHEN DO\n     COMPRESS = 1\n     \"ALLOCATE FI(SYSPRINT) DA(*) SHR\"\n     END\nELSE DO\n     COMPRESS = 0\n     SAY \"Compression not available.\"\n     END\nIF SYSDSN(OSTAREDC) = \"OK\"\nTHEN DO\n     EDC = 1\n     \"ALLOCATE FI(SYSOUT) DA(*) SHR\"\n     END\nELSE DO\n     EDC = 0\n     SAY \"OSTAREDC program not available.\"\n     END\nARG DSN .\nADDRESS \"TSO\"\nHEADER = COPIES(\"OSTARXMT10\",4)\nVERSION = \"V1.0C\"\nIF DSN = \"?\" THEN CALL HELP\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n/* Phase 2 - Identify datasets                                       */\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nMAXRC = 0\nIF SYSDSN(DSN) = \"OK\"\nTHEN DO\n     WORK = LISTDSI(DSN \"DIRECTORY\")\n     \"ALLOCATE FI(SYSUT1) DA(\"DSN\") SHR REUSE\"\n     IF SYSDSORG = \"PO\" & POS(\"(\",DSN) = 0\n     THEN NOP\n     ELSE EXECIO \"1 DISKR SYSUT1 ( STEM IN. FINIS\"\n     IF IN.1 = \"OSTARXMT CONTROL\"\n     THEN DO\n          SAY \"Processing\" DSN \"as a control file.\"\n          EXECIO \"* DISKR SYSUT1 ( STEM IN. FINIS\"\n          ODSN = WORD(IN.2,1)\n          DSNS = 0\n          DO I = 3 TO IN.0\n             X = I-2\n             WORK = WORD(IN.I,1)\n             IF SYSDSN(WORK) = \"OK\"\n             THEN DO\n                  DSNS = DSNS+1\n                  DSN.DSNS = WORK\n                  SAY WORK \"accepted.\"\n                  END\n             ELSE DO\n                  CALL WARN WORK \"not found. Rejected.\"\n                  IF MAXRC < 8 THEN MAXRC = 8\n                  END\n             END\n          END\n     ELSE DO\n          SAY \"Processing\" DSN \"as a single input file.\"\n          DSNS = 1\n          DSN.1 = DSN\n          X = LASTPOS('.',DSN)\n          ODSN = SUBSTR(DSN,1,X-1)\".XMT\"\n          IF SUBSTR(ODSN,1,1) = \"'\" THEN ODSN = ODSN\"'\"\n          IF POS(\"#\",ODSN) > 0\n          THEN DO\n               ODSN = TRANSLATE(ODSN,\"P\",\"#\")\n               SAY \"Output dataset renamed to \"ODSN\".\"\n               END\n          END\n     CALL CHK_ODSNS\n     DROP IN.\n     END\nELSE DO\n     SAY \"\";SAY \"\";SAY \"\"\n     SAY \"Enter output dataset name.\"\n     PULL ODSN\n     CALL CHK_ODSNS\n     SAY ODSN \"accepted.\"\n     DSNS = 0\n     DO FOREVER\n        SAY \"Enter input DSN, 'QUIT' to abort, or null to end list.\"\n        PULL DSN .\n        IF DSN = \"\" THEN LEAVE\n        IF DSN = \"QUIT\" THEN EXIT 4\n        IF SYSDSN(DSN) = \"OK\"\n        THEN DO\n             DSNS = DSNS+1\n             DSN.DSNS = DSN\n             SAY DSN \"accepted.\"\n             END\n        ELSE CALL WARN DSN \"not found. Rejected.\"\n        END\n     END\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n/* Phase 3 - allocate work file and output file(s)                   */\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nIF DSNS = 1\nTHEN SAY \"1 dataset accepted.\"\nELSE SAY DSNS \"datasets accepted.\"\nTOTSIZE = 0\nMAXSIZE = 0\nDO I = 1 TO DSNS\n   X = LISTDSI(DSN.I)\n   SELECT\n     WHEN SYSUNITS = \"CYLINDER\" THEN X = SYSUSED*SYSTRKSCYL\n     WHEN SYSUNITS = \"TRACK\" THEN X = SYSUSED\n     WHEN SYSUNITS = \"BLOCK\" THEN X = SYSUSED%SYSBLKSTRK+1\n     OTHERWISE\n     CALL ERROR \"Invalid space units for file\" DSN.I\".\"\n     END\n   SIZE.I = X\n   TOTSIZE = TOTSIZE + X\n   IF X > MAXSIZE THEN MAXSIZE = X\n   END\nIF DSNS = 1 & TOTSIZE > 300  & COMPRESS & SYSDSORG = \"PS\"\nTHEN SIGNAL PHASE11\n\"ALLOCATE FI(OSTARXMT) DA(\"ODSN\") NEW REUSE TRACKS\",\n       \"SPACE(\"TOTSIZE\",\"TOTSIZE%10+1\")\",\n       \"CATALOG\"\nIF RC = 0\nTHEN DO\n     WORK = LISTDSI(ODSN)\n     SELECT\n       WHEN SYSUNIT = \"3390\" THEN WORK = \"27984\"\n       WHEN SYSUNIT = \"3380\" THEN WORK = \"23408\"\n       OTHERWISE\n       WORK = 0\n       END\n     \"ALLOCATE FI(OSTARXMT) DA(\"ODSN\") MOD REUSE\",\n       \"LRECL(88) RECFM(F B) BLKSIZE(\"WORK\") RELEASE\"\n     END\nIF RC = 0\nTHEN SAY ODSN \"Allocated, tracks=\"TOTSIZE\", blksize=\"WORK\", DISP=NEW.\"\nELSE CALL ERROR \"Unable to allocate file\" ODSN \"with DISP=NEW.\"\nSELECT\n  WHEN SYSUNIT = \"3390\" THEN WORK = \"27920\"\n  WHEN SYSUNIT = \"3380\" THEN WORK = \"23440\"\n  OTHERWISE\n  WORK = 0\n  END\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n/* Phase 4 - create XMT file.                                        */\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nOUT1 = HEADER VERSION DSNS DATE(\"S\") TIME()\nEXECIO \"1 DISKW OSTARXMT ( STEM OUT\"\nIF RC = 0\nTHEN RECS = 1\nELSE CALL ERROR \"error writing to\" ODSN\".\"\nIF EDC\nTHEN DO\n     EXECIO \"0 DISKW OSTARXMT ( FINIS\"\n     DO I = 1 TO DSNS\n        CALL XMITDSNE I DSN.I SIZE.I WORK\n        END\n     \"ALLOCATE FI(SYSUT2) DUMMY\"\n     PARMS = \"'\"RIGHT(DSNS,3,\"0\")\"AD\"HEADER\"'\"\n     \"CALL\" OSTAREDC PARMS\n     IF RC = 0\n     THEN NOP\n     ELSE CALL ERROR \"Failure adding EDC INFO. rc=\"RC\n     DO I = 1 TO DSNS\n        \"FREE FI(OSTAR\"RIGHT(I,3,\"0\")\")\"\n        END\n     END\nELSE DO\n     \"ALLOCATE FI(SYSUT2) NEW DELETE REUSE TRACKS\",\n           \"SPACE(\"MAXSIZE\",\"MAXSIZE%10+1\")\",\n           \"LRECL(80) RECFM(F B) BLKSIZE(\"WORK\")\"\n     IF RC = 0\n     THEN SAY \"Workfile allocated, tracks=\"MAXSIZE\", blksize=\"WORK\".\"\n     ELSE CALL ERROR \"Workfile 'SYSUT2' allocation failure.\"\n     DO I = 1 TO DSNS\n        TOKEN = XMITDSN(DSN.I HEADER)\n        OUT1 = OVERLAY(TOKEN,HEADER,41)\n        EXECIO \"1 DISKW OSTARXMT ( STEM OUT\"\n        IF RC = 0\n        THEN RECS = RECS + 1\n        ELSE CALL ERROR \"error writing to\" ODSN\".\"\n        END\n     SAY \"XMT file\" ODSN \"contains\" RECS \"records,\",\n          RECS*88%1024 \"KiloBytes.\"\n     END\nEXECIO \"0 DISKW OSTARXMT (FINIS\"\nADDRESS \"TSO\" \"FREE FI(OSTARXMT,SYSUT2,SYSUT1)\"\nIF MAXRC = 8\nTHEN CALL WARN \"All datasets were not processed but\" ODSN \"is valid.\"\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n/* Phase 5 - create PAK file.                                        */\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nIF COMPRESS\nTHEN DO\n     SAY \"Compressing\" ODSN \"into\" PDSN\".\"\n     \"ALLOCATE FI(INFILE) DA(\"ODSN\") SHR REUSE\"\n     IF RC <> 0 THEN CALL ERROR \"ERROR RE-ALLOCATING XMT FILE\" ODSN\".\"\n     \"ALLOCATE FI(OUTFILE) DA(\"PDSN\") NEW REUSE TRACKS\",\n           \"SPACE(\"TOTSIZE%3+1\",\"TOTSIZE%10+1\")\",\n            \"CATALOG\"\n     \"CALL\" TRSMAIN \"'PACK'\"\n     IF RC > MAXRC THEN MAXRC = RC\n     IF RC = 0\n     THEN SAY \"Dataset\" PDSN \"contains a compressed version of\" ODSN\".\"\n     \"FREE FI(INFILE,OUTFILE)\"\n     END\nEXIT MAXRC\nXMITDSNE: PROCEDURE\nARG COUNT INDSN TRACKS BLKSIZE .\nSAY \"Processing\" INDSN\".\"\nDDNAME = \"OSTAR\"RIGHT(COUNT,3,\"0\")\n\"ALLOCATE FI(\"DDNAME\") NEW DELETE REUSE TRACKS\",\n           \"SPACE(\"TRACKS\",\"TRACKS%10+1\")\",\n           \"LRECL(80) RECFM(F B) BLKSIZE(\"BLKSIZE\")\"\nIF RC = 0\nTHEN SAY \"Workfile allocated, tracks=\"TRACKS\", blksize=\"BLKSIZE\".\"\nELSE CALL ERROR \"Workfile 'SYSUT2' allocation failure.\"\nADDRESS \"TSO\"\n\"TRANSMIT COMPLEX2.\"USERID() \"DATASET(\"INDSN\") NOLOG\",\n                               \"NONOTIFY OUTDD(\"DDNAME\")\"\nIF RC = 0\nTHEN NOP\nELSE CALL ERROR \"Unable to copy\" INDSN \"to workfile.\"\nRETURN 0\nXMITDSN: PROCEDURE EXPOSE RECS\nARG INDSN TOKEN .\nSAY \"Processing\" INDSN\".\"\nADDRESS \"TSO\"\n\"TRANSMIT COMPLEX2.\"USERID() \"DATASET(\"INDSN\") NOLOG\",\n                               \"NONOTIFY OUTDD(SYSUT2)\"\nIF RC = 0\nTHEN NOP\nELSE CALL ERROR \"Unable to copy\" INDSN \"to workfile.\"\nSAY \"Now adding error detection info for\" INDSN\". Please be patient.\"\nDO FOREVER\n   EXECIO \"1 DISKR SYSUT2 (STEM IN\"\n   IF RC = 2 THEN LEAVE\n   IF RC = 0\n   THEN NOP\n   ELSE CALL ERROR \"Read error on temp file.\"\n   TOKEN = BITXOR(TOKEN,SUBSTR(IN1,1,40))\n   TOKEN = BITXOR(TOKEN,SUBSTR(IN1,41,40))\n   TOKEN2 = SUBSTR(IN1,1,8)\n   DO I = 9 TO 73 BY 8\n      TOKEN2 = BITXOR(TOKEN2,SUBSTR(IN1,I,8))\n      END\n   OUT1 = OVERLAY(TOKEN2,IN1,81)\n   EXECIO \"1 DISKW OSTARXMT (STEM OUT\"\n   IF RC = 0\n   THEN RECS = RECS + 1\n   ELSE CALL ERROR \"error writing to output file.\"\n   END\nEXECIO \"0 DISKR SYSUT2 (FINIS\"\nRETURN TOKEN\nWARN: PROCEDURE\nPARSE ARG MSG\nSAY \"!! WARNING !! -\" MSG\nSAY \"Press 'ENTER' to continue.\"\nPULL .\nRETURN 0\nERROR: PROCEDURE EXPOSE RC\nPARSE ARG MSG\nSAY \" \"\nSAY \"                           !! ERROR !! \"\nSAY \"====>\" MSG \"<====\"\nSAY \" \"\nIF RC = \"RC\" THEN EXIT 16\nEXIT RC\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n/* Phase 11 - Create a xm2 file.                                     */\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nPHASE11:\nSAY \"Compressing\" DSN.1 \"into\" QDSN\".\"\n\"ALLOCATE FI(INFILE) DA(\"DSN.1\") SHR REUSE\"\nIF RC <> 0 THEN CALL ERROR \"ERROR ALLOCATING DATASET\" DSN.1\".\"\n\"ALLOCATE FI(OUTFILE) DA(\"QDSN\") NEW REUSE TRACKS\",\n      \"SPACE(\"TOTSIZE%3+1\",\"TOTSIZE%10+1\")\",\n       \"CATALOG\"\n\"CALL\" TRSMAIN \"'SPACK'\"\nIF RC > MAXRC THEN MAXRC = RC\nIF RC = 0\nTHEN SAY \"Dataset\" QDSN \"contains a compressed version of\" DSN.1\".\"\n\"FREE FI(INFILE,OUTFILE)\"\nEXIT MAXRC\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\n/* Subroutin to ensure output datasets do not exit.                  */\n/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */\nCHK_ODSNS: PROCEDURE EXPOSE ODSN PDSN QDSN COMPRESS\nIF SYSDSN(ODSN) = \"OK\"\nTHEN CALL ERROR \"Dataset\" ODSN \"already exists.\"\nIF COMPRESS = 0 THEN RETURN 0\nX = LASTPOS('.',ODSN)\nPDSN = SUBSTR(ODSN,1,X-1)\".XM1\"\nIF SUBSTR(PDSN,1,1) = \"'\" THEN PDSN = PDSN\"'\"\nIF SYSDSN(PDSN) = \"OK\"\nTHEN CALL ERROR \"Dataset\" PDSN \"already exists.\"\nQDSN = SUBSTR(ODSN,1,X-1)\".XM2\"\nIF SUBSTR(QDSN,1,1) = \"'\" THEN QDSN = QDSN\"'\"\nIF SYSDSN(QDSN) = \"OK\"\nTHEN CALL ERROR \"Dataset\" QDSN \"already exists.\"\nRETURN 0\nHELP: PROCEDURE\nSAY \"The OSTARXMT REXX procedure combines 1 or more MVS sequential or\"\nSAY \"partitioned datasets into a single file for simple tranmission \"\nSAY \"over the internet.\"\nSAY \"\"\nSAY \"OSTARXMT creates 3 possible formats of file.\"\nSAY \"\"\nSAY \" An XMT file is a single MVS FB LRECL=88 file containing 1 or more\"\nSAY \"MVS sequential or partitioned datasets with error detection data\"\nSAY \"added.\"\nSAY \"\"\nSAY \" An XM1 file is a compressed version of an XMT file to allow\"\nSAY \"faster data transmission over the internet.  It has RECFM=FB and\"\nSAY \"LRECL=1024.\"\nSAY \"\"\nSAY \" An XM2 file is a HIGHLY compressed version of a single large\"\nSAY \"seqential dataset, e.g. a dump. It is quick to create and send\"\nSAY \"via the internet but has no error detection information.  It has\"\nSAY \"RECFM=FB and LRECL=1024.\"\nSAY \"\"\nSAY \"OSTARXMT can be envoked in 3 ways :-\"\nSAY \"\"\nSAY \"1) With no parameters at any TSO command or READY prompt. You will\"\nSAY \"  be prompted firstly for an output dataset which must not exist,\"\nSAY \"  and then for an input datset. The input dataset prompt will be\"\nSAY \"  repeated until you reply a blank line.\"\nSAY \"\"\nSAY \"2) With as single parameter which is the name of a sequential file\"\nSAY \"  or PDS member containing a control file of the format -\"\nSAY \"  OSTARXMT CONTROL   - line 1 indicates a control file.\"\nSAY \"  data.set.name      - line 2 names the output file.\"\nSAY \"  data.set.name      - line 3 names an  input  file.\"\nSAY \"            repeat line 3 as required for multiple input files.\"\nSAY \"\"\nSAY \"3) With as single parameter which is the name of a sequential file\"\nSAY \"  or PDS  to be formated. The output file name will be the same as\"\nSAY \"  the input file but with the last qualifier changed to reflect \"\nSAY \"  the OSTARXMT format.\"\nSAY \"\"\nSAY \" Options 2 or 3 can be run in batch under TSO if large files are\"\nSAY \"involved which would tie up your session for a long time.\"\nSAY \"\"\nSAY \" If you specify a single large sequential file AND compression is\"\nSAY \"enabled then an XM2 file is created. Otherwise an XMT file will\"\nSAY \"be produced and also an XM1 file if compression is enabled.\"\nSAY \"\"\nSAY \" For info on how to rebuild the original files from the OSTARXMT\"\nSAY \"file see the OSTARREC help via the '%OSTARREC ?' command.\"\nSAY \"\"\nSAY \" If you have any problems, or encounter error messages you don't\"\nSAY \"understand then contact the Support Centre.\"\nSAY \"\"\nexit 0\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SAVEALL": {"ttr": 2308, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x92!?\\x00\\x92!?\\x08\\x05\\x00e\\x00e\\x00\\x00\\xc3\\xd5\\xc2\\xd5\\xe3\\xd9\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-07-31T00:00:00", "modifydate": "1992-07-31T08:05:00", "lines": 101, "newlines": 101, "modlines": 0, "user": "CNBNTRS"}, "text": "         MACRO\n&NAME    SAVEALL    &RENT,&REG=3,&EQU=YES\n         GBLB  &SAVRENT\n         GBLB  &REGSW\n         GBLB  &TIME\n         GBLC  &SAVNDX\n&SAVNDX  SETC  '&SYSNDX'\n&NAME    CSECT\n         AIF   ('&SAVRENT' EQ '1').NOTFREE\n         AIF   ('&REGSW' EQ '1').NOEQU\n         AIF   ('&EQU' NE 'YES').NOEQU\n&REGSW   SETB  1\n         SPACE 2\n***********************************************************************\n********           DEFINITION OF GENERAL REGISTERS             ********\n***********************************************************************\nR0       EQU   0    GENERAL REGISTER ZERO\nR1       EQU   1    GENERAL REGISTER ONE\nR2       EQU   2    GENERAL REGISTER TWO\nR3       EQU   3    GENERAL REGISTER THREE\nR4       EQU   4    GENERAL REGISTER FOUR\nR5       EQU   5    GENERAL REGISTER FIVE\nR6       EQU   6    GENERAL REGISTER SIX\nR7       EQU   7    GENERAL REGISTER SEVEN\nR8       EQU   8    GENERAL REGISTER EIGHT\nR9       EQU   9    GENERAL REGISTER NINE\nR10      EQU   10   GENERAL REGISTER TEN\nR11      EQU   11   GENERAL REGISTER ELEVEN\nR12      EQU   12   GENERAL REGISTER TWELVE\nR13      EQU   13   GENERAL REGISTER THIRTEEN\nR14      EQU   14   GENERAL REGISTER FOURTEEN\nR15      EQU   15   GENERAL REGISTER FIFTEEN\n         SPACE 1\nRA       EQU   10   GENERAL REGISTER TEN\nRB       EQU   11   GENERAL REGISTER ELEVEN\nRC       EQU   12   GENERAL REGISTER TWELVE\nRD       EQU   13   GENERAL REGISTER THIRTEEN\nRE       EQU   14   GENERAL REGISTER FOURTEEN\nRF       EQU   15   GENERAL REGISTER FIFTEEN\n***********************************************************************\n********             END OF REGISTER DEFINITIONS               ********\n***********************************************************************\n         SPACE 2\n.NOEQU   ANOP\n         SAVE  (14,12),,*\n         AIF   ('&REG' EQ '').MESS\n         BALR  &REG(1),0\n         AIF   (N'&REG EQ 1).A\n         AIF   (N'&REG EQ 2).B\n         AIF   (N'&REG EQ 3).C\n         AIF   (N'&REG EQ 4).D\n         AIF   (N'&REG EQ 5).E\n         MNOTE *****,'EXCESSIVE BASE REGISTERS -- 5 ASSUMED *****'\n         AGO   .E\n.MESS    MNOTE 12,'***** NO BASE REGISTER SPECIFIED *****'\n         MEXIT\n.NOTFREE MNOTE 12,'***** ENDALL NOT ISSUED PRIOR TO NEW SAVEALL *****'\n         MEXIT\n.E       USING *,&REG(1),&REG(2),&REG(3),&REG(4),&REG(5)\nQ&SYSNDX L     &REG(2),=A(Q&SYSNDX+4096)     LOAD BASE REGISTERS\n         L     &REG(3),=A(Q&SYSNDX+8192)\n         L     &REG(4),=A(Q&SYSNDX+12288)\n         L     &REG(5),=A(Q&SYSNDX+16384)\n         AGO   .END\n.D       USING *,&REG(1),&REG(2),&REG(3),&REG(4)\nQ&SYSNDX L     &REG(2),=A(Q&SYSNDX+4096)     LOAD BASE REGISTERS\n         L     &REG(3),=A(Q&SYSNDX+8192)\n         L     &REG(4),=A(Q&SYSNDX+12288)\n         AGO   .END\n.C       USING *,&REG(1),&REG(2),&REG(3)\nQ&SYSNDX L     &REG(2),=A(Q&SYSNDX+4096)     LOAD BASE REGISTERS\n         L     &REG(3),=A(Q&SYSNDX+8192)\n         AGO   .END\n.B       USING *,&REG(1),&REG(2)\nQ&SYSNDX L     &REG(2),=A(Q&SYSNDX+4096)     LOAD BASE REGISTER\n         AGO   .END\n.A       USING *,&REG(1)\n.END     ANOP\n         AIF   ('&RENT' NE 'RENT').NORENT\n&SAVRENT SETB  1\n         GETMAIN    R,LV=72        GET STORAGE FOR SAVE AREA\n         ST    13,4(1)             SET UP FORWARD CHAIN\n         ST    1,8(13)             SET UP BACKWARD CHAIN\n         L     0,20(0,13)          RESET REGISTER 0\n         L     1,24(0,13)          RESET REGISTER 1\n         L     13,8(0,13)          LOAD SAVE AREA ADDRESS\n         AGO   .RENT\n.NORENT  ANOP\n&TIME    SETB  1\n         ST    13,SAVE&SYSNDX+4    SET UP FORWARD CHAIN\n         LA    1,SAVE&SYSNDX\n         ST    1,8(0,13)           SET UP BACKWARD CHAIN\n         L     1,24(0,13)          RESET REGISTER 1\n         LA    13,SAVE&SYSNDX\n         B     J&SYSNDX           BRANCH AROUND BASE REGISTER CONST\nSAVE&SYSNDX DC 18F'0'\n.RENT    ANOP\n         LTORG\nJ&SYSNDX DS    0H\n         EJECT\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VBCLIST$": {"ttr": 2311, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00A\\x01\\x02\\x16\\x0f\\x01\\x02\\x16\\x0f\\x10G\\x00\\n\\x00\\x05\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2002-06-09T00:00:00", "modifydate": "2002-06-09T10:47:41", "lines": 10, "newlines": 5, "modlines": 0, "user": "SBGOLOB"}, "text": "The VBCLISTS member is an XMIT-format VB-255 CLIST library, which\ngenerates null members for the CBTDOC.PDS , for new files.\n\nAfter executing the GENFILE CLIST in this library, use the PDSLOAD\nprogram to load the new members into the CBTDOC.PDS .\n\nGENDESC is to add blank entries to the $$FILDES member of CBTDOC.PDS\n\nGENSTAT is to add blank entries to the #FILSTAT member of CBTDOC.PDS\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "VBCLISTS": {"ttr": 2313, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x02\\x16\\x0f\\x01\\x02\\x16\\x0f\\x12 \\x00>\\x00>\\x00\\x00\\xe7\\xd4\\xc9\\xe3@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-06-09T00:00:00", "modifydate": "2002-06-09T12:20:00", "lines": 62, "newlines": 62, "modlines": 0, "user": "XMIT"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "VTT2DISK": {"ttr": 2315, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01c\\x00B\\x01\\x00%O\\x01\\x014_\\x10\\x02\\x00\\t\\x00\\x14\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.99", "flags": 0, "createdate": "2000-09-10T00:00:00", "modifydate": "2001-12-11T10:02:42", "lines": 9, "newlines": 20, "modlines": 0, "user": "SBGOLOB"}, "text": "   TITLE 'VTT2DISK -- READ A REAL TAPE AND CREATE FB-80 AWS FILE'\n**************************************************************\n**************************************************************\n**                                                          **\n**    You can find up-to-date versions of this code         **\n**    on File 533 of the CBT Tape.                          **\n**                                                          **\n**************************************************************\n**************************************************************\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "VTT2TAPE": {"ttr": 2317, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01c\\x000\\x01\\x00%O\\x01\\x014_\\x10\\x03\\x00\\t\\x00\\x14\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.99", "flags": 0, "createdate": "2000-09-10T00:00:00", "modifydate": "2001-12-11T10:03:30", "lines": 9, "newlines": 20, "modlines": 0, "user": "SBGOLOB"}, "text": "*  TITLE 'VTT2TAPE -- COPY AWS FORMAT FILE TO A REAL TAPE'\n**************************************************************\n**************************************************************\n**                                                          **\n**    You can find up-to-date versions of this code         **\n**    on File 533 of the CBT Tape.                          **\n**                                                          **\n**************************************************************\n**************************************************************\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT006/FILE006.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT006", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}