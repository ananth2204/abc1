{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011619000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 293930, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE266.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 293930, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 293930, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE266.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x06\\x04'", "DS1TRBAL": "b'\\xcc\\xee'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x01\\xd7\\x00\\r\\x01\\xd8\\x00\\x04\\x00\\x07'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x04V\\x006\\x01\\x125O\\x01\\x125O\\x14'\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf8\\xf6@@@\"", "ispf": {"version": "04.86", "flags": 0, "createdate": "2012-12-19T00:00:00", "modifydate": "2012-12-19T14:27:36", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-486"}, "text": "REGULAR CBT TAPE - VERSION 486    FILE:  266\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT486.FILE266\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 7 MEMBERS COUNTED; CUMULATIVE SIZE IS 2,432 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   12/19/12    14:27:36    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$NOTE01": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x96\"_\\x01\\x00)\\x9f\\x114\\x00\\x11\\x00\\t\\x00\\x00\\xe6\\xe2\\xc2\\xc7@@@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1996-08-12T00:00:00", "modifydate": "2000-10-25T11:34:00", "lines": 17, "newlines": 9, "modlines": 0, "user": "WSBG"}, "text": "NOTE FOR SS0104 PROGRAM (A TAPE MAPPING PROGRAM FROM FLORIDA POWER)\n\n  This is an ancient tape mapping program from Florida Power Company\n  which is used to measure the footages on the CBT Tapes.  All footages\n  from any tape or cartridge are considered as if they were 6250 bpi.\n  This is a change I made for my convenience.  To fix the code properly,\n  see label EXCP in the code.\n                                          S. Golob    08/12/96\n\n  P.S. See File 299 TAPEMAP program for code to measure footages\n       on 3480 cartridges (as if uncompressed).\n\n  If you've made proper fixes, kindly send the code to me, so I can\n  update this file in your name.  Thank you.\n\n  Sam Golob, P.O. Box 906, Tallman, NY 10982-0906\n     email: sbgolob@attglobal.net                 845-362-5843 fax\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$$NOTE02": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00%\\x01\\x125\\x1f\\x01\\x125O\\x123\\x00\\x1a\\x00\\t\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2012-12-16T00:00:00", "modifydate": "2012-12-19T12:33:25", "lines": 26, "newlines": 9, "modlines": 0, "user": "SBGOLOB"}, "text": "Fix for 10000 feet.\n\n  Total footage of over 10000 feet was not being recorded.\n  File  footage of over 10000 feet was not being recorded.\n\n  Problem fixed, Dec. 16, 2012.  (File footage: Dec. 19, 2012.)\n\nFix for \"time and date\" routine.\n\n  This problem resulted from my first fix, it seems.\n\n  I found that the execution time for the program was being\n  reported wrong.  So instead of fixing the WKDATE routine, I\n  replaced it with a routine that I knew was working correctly.\n  This was the TODAY routine, which I lifted from the TAPEMAP\n  program on CBT Tape File 299.\n\n  Actually, the TODAY routine also reports the Julian date, which\n  the WKDATE routine didn't report.  So there's an improvement.\n\n  Problem fixed, Dec. 18, 2012.\n\nS.Golob       sbgolob@cbttape.org\n              sbgolob@attglobal.com\n\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@FILE266": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x04V\\x001\\x01\\x125O\\x01\\x125O\\x14'\\x00\\x1e\\x00\\x1e\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf8\\xf6@@@\"", "ispf": {"version": "04.86", "flags": 0, "createdate": "2012-12-19T00:00:00", "modifydate": "2012-12-19T14:27:31", "lines": 30, "newlines": 30, "modlines": 0, "user": "CBT-486"}, "text": "//***FILE 266 is from Sam Golob, who updated the tape mapping       *   FILE 266\n//*           program called SS0104 from Florida Power Corporation. *   FILE 266\n//*           This code is used to measure the footages of files    *   FILE 266\n//*           on the CBT Tape, as though they were on a 6250 bpi    *   FILE 266\n//*           tape reel.  As is, that is what this code is used     *   FILE 266\n//*           for, but it can be used for other purposes.  The      *   FILE 266\n//*           report is quite excellent for showing, in general,    *   FILE 266\n//*           what is on a tape.                                    *   FILE 266\n//*                                                                 *   FILE 266\n//*           If you fix this code, for use with any density        *   FILE 266\n//*           tape, and with cartridge, please send it to me to     *   FILE 266\n//*           test, so I can update this file in your name.         *   FILE 266\n//*           Thanks.  (S.Golob - 08/96).                           *   FILE 266\n//*                                                                 *   FILE 266\n//*           Note:  Fixed to avoid the CNTRL FSM invocation that   *   FILE 266\n//*                  was causing I/O errors on some MVS systems.    *   FILE 266\n//*                  (05/28/04 - SBG)                               *   FILE 266\n//*           Note:  Fixed to record over 10000 total feet.         *   FILE 266\n//*                  (12/16/12 - SBG)                               *   FILE 266\n//*           Note:  Fixed to replace WKDATE routine with TODAY     *   FILE 266\n//*                  routine. (12/18/12 - SBG)                      *   FILE 266\n//*                                                                 *   FILE 266\n//*           I want to acknowledge the big help of one of the      *   FILE 266\n//*           original authors, Gordon P. West.  Thanks, Gordon.    *   FILE 266\n//*                                                                 *   FILE 266\n//*           email:  sbgolob@attglobal.net                         *   FILE 266\n//*                   sbgolob@cbttape.org                           *   FILE 266\n//*                                                                 *   FILE 266\n//*           email:  gordon@westgp.us                              *   FILE 266\n//*                                                                 *   FILE 266\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SS0104": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01+\\x00T\\x00\\x96\"_\\x01\\x125O\\x10@\\x08\\xff\\t\\x05\\x08\\xdb\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.43", "flags": 0, "createdate": "1996-08-12T00:00:00", "modifydate": "2012-12-19T10:40:54", "lines": 2303, "newlines": 2309, "modlines": 2267, "user": "SBGOLOB"}, "text": "         TITLE 'DISCLAIMER - INSTALLATION INSTRUCTIONS'\n***********************************************************************\n*                                                                     *\n*     THIS PROGRAM, DEVELOPED AT FPL OR SUPPLIED BY OTHER USERS       *\n*     ON A NON-RESTRICTIVE BASIS, IS OF GENERAL INTEREST              *\n*     SUBMITTED FOR UNRESTRICTED DISTRIBUTION.  THIS PROGRAM          *\n*     HAS MET A BASIC SET OF PROGRAMMING AND DOCUMENTATION            *\n*     STANDARDS, BUT MAY NOT HAVE BEEN PROGRAM TESTED IN ANY          *\n*     FORMAL FASHION BY FPL.  THE USER IS EXPECTED TO MAKE THE        *\n*     FINAL EVALUATION AS TO THE USEFULLNESS IN HIS OWN               *\n*     ENVIRONMENT.                                                    *\n*                                                                     *\n*     FPL MAKES NO WARRANTY, EXPRESSED OR IMPLIED, INCLUDING, BUT     *\n*     NOT LIMITED TO, THE IMPLIED WARRANTIES OR MERCHANTABILITY AND   *\n*     FITNESS FOR A PARTICULAR PUTPOSE AS TO THE DOCUMENTATION,       *\n*     FUNCTION, OR PERFORMANCE OF THESE PROGRAMS.                     *\n*                                                                     *\n*     ACCEPTANCE AND USE OF THIS PROGRAM CONSTITUTES A RELEASE        *\n*     FROM LIABILITY OF FPL FOR ANY PROBLEMS USE OF THE PROGRAM       *\n*     MAY CAUSE AT THE USER'S INSTALLATION.                           *\n*                                                                     *\n*     USERS ARE INVITED TO SUBMIT SUGGESTIONS OR ERROR DOCUMENTATION  *\n*     TO FPL, HOWEVER, NO PROMISE CAN BE MADE THAT SUCH SUGGESTIONS   *\n*     WILL BE IMPLEMENTED OR ERRORS CORRECTED.  SUBMIT COMMENTS TO:   *\n*              COORDINATOR OF TECHNICAL SYSTEMS                       *\n*              COMPUTER OPERATIONS DEPARTMENT                         *\n*              FLORIDA POWER & LIGHT COMPANY - GENERAL OFFICE         *\n*              P. O. BOX  529100                                      *\n*              MIAMI, FLORIDA  33152                                  *\n*                                                                     *\n*     THIS PROGRAM IS MADE AVAILABLE BY FPL WITHOUT CHARGE OR         *\n*     CONSIDERATION.  RECIPIENTS ARE FREE TO MAKE THIS PROGRAM        *\n*     AVAILABLE TO OTHERS IN LIKE MANNER.  IT MAY NOT BE SOLD.        *\n*                                                                     *\n*     FIXED A BIT BY SAM GOLOB:  DECEMBER 18, 2012                    *\n*                                                                     *\n*       1.  INCREASED TOTAL FOOTAGE TO READ FIVE DIGITS (10000.0 FT)  *\n*           ALSO INCREASE FILE FOOTAGE SIMILARLY.                     *\n*                                                                     *\n*       2.  SUBSTITUTED \"TODAY\" ROUTINE FOR \"WKDATE\" ROUTINE.         *\n*           WKDATE DID NOT GIVE THE CORRECT TIME AFTER MY FIRST FIX.  *\n*           BUT \"TODAY\" IS BETTER, BECAUSE IT ADDITIONALLY REPORTS    *\n*           THE JULIAN DATE.                                          *\n*                                                                     *\n***********************************************************************\nTAPEMAP  TITLE 'TAPE MAPPING PROGRAM'\n***********************************************************************\n*                                                                     *\n* NAME         SS0104 ALIAS TAPEMAP                                   *\n*                                                                     *\n* FUNCTION     LIST THE CONTENTS OF A STANDARD OR NON-LABELLED TAPE.  *\n*              INFORMATION PROVIDED CONSISTS OF:                      *\n*                                                                     *\n*               1.  FILE NUMBER.                                      *\n*               2.  DATA SET NAME (SL ONLY).                          *\n*               3.  RECORD FORMAT.                                    *\n*               4.  RECORD LENGTH (SL ONLY).                          *\n*               5.  BLOCK SIZE.                                       *\n*               6.  NUMBER OF BLOCKS.                                 *\n*               7.  USER LABEL COUNT (SL ONLY).                       *\n*               8.  RECORDING DENSITY.                                *\n*               9.  LENGTH OF FILE (IN FEET).                         *\n*              10.  CUMULATIVE TAPE LENGTH (IN FEET).                 *\n*              11.  FILE CREATION DATE (SL ONLY).                     *\n*              12.  FILE EXPIRATION DATE (SL ONLY).                   *\n*              13.  NAME OF JOB WHICH CREATED FILE (SL ONLY).         *\n*              14.  NAME OF STEP WHICH CREATED FILE (SL ONLY).        *\n*              15.  SECURITY CODE (SL ONLY).                          *\n*              16.  VOLUME SEQUENCE NUMBER (SL ONLY).                 *\n*                                                                     *\n*              ITEMS INDICATED WITH SL ONLY ARE DISPLAYED ONLY FOR    *\n*              STANDARD LABEL TAPES.                                  *\n*                                                                     *\n* DESCRIPTION  THE TAPE IS PROCESSED BY THE PROGRAM AS BLP.  IF THE   *\n*              FIRST RECORD IS A VOL1 HEADER, THE TAPE IS CONSIDERED  *\n*              STANDARD LABEL, OTHERWISE, IT IS CONSIDERED            *\n*              NON-LABELLED.                                          *\n*                                                                     *\n*              FOR STANDARD LABEL TAPES, ALL INFORMATION DISPLAYED    *\n*              FOR EACH FILE IS TAKEN FROM THE LABELS.  THE VOLUME    *\n*              SERIAL IS TAKEN FROM THE VOL1 HEADER RECORD, AND THE   *\n*              DENSITY DISPLAYED IN THE HEADER IS THE TRUE TAPE       *\n*              RECORDING DENSITY.  A CHECK IS MADE TO SEE IF THE FILE *\n*              SEQUENCE NUMBER AND DENSITY CODE TAKEN FROM THE LABEL  *\n*              ARE CORRECT.  IF NOT, THEY ARE BRACKETED BY ><.  THE   *\n*              DATA SET NAME FIELD CONTAINS ONLY 17 CHARACTERS.  THEY *\n*              ARE THE LAST 17 CHARACTERS OF THE DATA SET NAME        *\n*              SPECIFIED WHEN THE TAPE WAS CREATED.                   *\n*                                                                     *\n*              FOR NON-LABELLED TAPES, THE PROGRAM ATTEMPTS TO        *\n*              IDENTIFY THE RECORD FORMAT AND BLKSIZE AS FOLLOWS:     *\n*                                                                     *\n*                   THE RECORD FORMAT IS DISPLAYED AS V IF THE FIRST  *\n*                   HALFWORD OF EACH BLOCK IS EQUAL TO THE LENGTH OF  *\n*                   THE BLOCK.  IF NOT, BUT ALL RECORDS ARE THE SAME  *\n*                   LENGTH, OR ONLY THE LAST BLOCK IS SHORT, THE      *\n*                   RECORD FORMAT IS INDICATED AS F (THIS IS ACTUALLY *\n*                   FS FORMAT).  THE RECORD FORMAT IS DISPLAYED AS U  *\n*                   IF THE ABOVE CONTIDIONS ARE NOT MET.              *\n*                                                                     *\n*                   BLKSIZE IS GIVEN AS THE LARGEST BLOCK READ.       *\n*                                                                     *\n*              FOR BOTH STANDARD AND NON-LABELLED TAPES, THE FOOTAGE  *\n*              CALCULATIONS ARE BASED ON THE MAXIMUM BLOCK SIZE,      *\n*              NOMINAL INTERBLOCK GAP LENGTH, AND THE TRUE TAPE       *\n*              DENSITY.                                               *\n*                                                                     *\n*              PROCESSING IS TERMINATED BY A DOUBLE TAPE MARK.        *\n*                                                                     *\n* ENVIRONMENT  OS/VS2, OS/MVT                                         *\n*              APF AUTHORIZED (MVS)                                   *\n*              BACKGROUND                                             *\n*                                                                     *\n* INPUT        THE ONLY INPUT SOURCE IS THE TAPE TO BE MAPPED.        *\n*                                                                     *\n* OUTPUT       OUTPUT CONSISTS OF A LISTING OF THE TAPE CONTENTS.     *\n*                                                                     *\n*              FIELD DESCRIPTIONS (HEADER)                            *\n*                                                                     *\n*                   VOLUME SERIAL - THE VOLUME SERIAL OF THE TAPE     *\n*                        BEING MAPPED.  FOR STANDARD LABEL TAPES, THE *\n*                        SERIAL IS OBTAINED FROM THE VOL1 HEADER      *\n*                        RECORD.  FOR NON-LABELLED TAPES, IT IS THE   *\n*                        SERIAL NUMBER SPECIFIED IN THE TAPE DD       *\n*                        STATEMENT.                                   *\n*                                                                     *\n*                   DENSITY - THIS IS THE TRUE TAPE RECORDING DENSITY *\n*                        EXPRESSED AS BOTH A CODE (0-4) AND AS BPI.   *\n*                                                                     *\n*                   LABEL TYPE - DEFINES THE LABEL TYPE OF THE TAPE.  *\n*                        IT IS EITHER STANDARD, NON-LABELLED, OR LTM. *\n*                        LTM INDICATES A NON-LABELLED TAPE WITH A     *\n*                        LEADING TAPE MARK.                           *\n*                                                                     *\n*                   OWNER ID - THE OWNER ID IS TAKEN FROM THE VOL1    *\n*                        HEADER OF A STANDARD LABEL TAPE.  IT IS      *\n*                        BLANK FOR A NON-LABELLED TAPE.               *\n*                                                                     *\n*              FIELD DESCRIPTIONS (DATA LINES)                        *\n*                                                                     *\n*                   FILE NUMBER - THE FILE SEQUENCE NUMBER.  FOR      *\n*                        STANDARD LABEL TAPES IT IS OBTAINED FROM THE *\n*                        HDR1 LABEL.  IF THIS VALUE DOES NOT AGREE    *\n*                        WITH THE COUNT KEPT BY THE PROGRAM, IT IS    *\n*                        BRACKETED BY ><.                             *\n*                                                                     *\n*                   DATA SET NAME - THE LAST 17 CHARACTERS OF THE     *\n*                        DATA SET NAME SPECIFIED WHEN THE DATA SET    *\n*                        WAS CREATED.  IT IS OBTAINED FROM THE HDR1   *\n*                        RECORD OF A STANDARD LABEL TAPE AND IS NOT   *\n*                        PRINTED FOR NON-LABELLED TAPES.              *\n*                                                                     *\n*                   RECFM - RECORD FORMAT.  FOR STANDARD LABEL TAPES, *\n*                        THIS VALUE IS OBTAINED FROM THE HDR2 LABEL.  *\n*                        FOR NON-LABELLED TAPES, IT IS V IF THE FIRST *\n*                        HALFWORD OR EACH RECORD EQUALS THE LENGTH OF *\n*                        THE RECORD.  IF NOT, IT IS F IF ALL BLOCKS   *\n*                        ARE THE SAME LENGTH OR ALL BLOCKS ARE THE    *\n*                        SAME LENGTH EXCEPT THE LAST BLOCK WHICH IS   *\n*                        SHORTER.  IT IS U IF THE ABOVE CONDITIONS    *\n*                        ARE NOT MET.                                 *\n*                                                                     *\n*                   LRECL - LOGICAL RECORD LENGTH.  FOR STANDARD      *\n*                        LABEL TAPES THIS VALUE IS OBTAINED FROM THE  *\n*                        HDR2 LABEL.  IT IS NOT PROVIDED FOR          *\n*                        NON-LABELLED TAPES.                          *\n*                                                                     *\n*                   BLKSIZE - MAXIMUM BLOCK (PHYSICAL RECORD) SIZE.   *\n*                        FOR STANDARD LABEL TAPES, THIS VALUE IS      *\n*                        OBTAINED FROM THE HDR2 LABEL.  FOR           *\n*                        NON-LABELLED TAPES, IT IS THE SIZE OF THE    *\n*                        LARGEST BLOCK READ.                          *\n*                                                                     *\n*                   BLOCKS - THE NUMBER OF BLOCKS IN THE FILE.  FOR   *\n*                        STANDARD LABEL TAPES, THIS VALUE IS OBTAINED *\n*                        FROM THE EOF1 OR EOV1 LABEL.  FOR            *\n*                        NON-LABELLED TAPES, IT IS THE NUMBER OF      *\n*                        BLOCKS READ.                                 *\n*                                                                     *\n*                   UL - USER LABEL COUNT.  THIS VALUE IS NOT PRINTED *\n*                        FOR NON-LABELLED TAPES.                      *\n*                                                                     *\n*                   DEN - TAPE DENSITY.  FOR STANDARD LABEL TAPES,    *\n*                        THIS VALUE IS OBTAINED FROM THE HDR2 LABEL.  *\n*                        IF IT DOES NOT AGREE WITH THE TRUE TAPE      *\n*                        DENSITY AS SHOWN IN THE HEADER LINE, IT IS   *\n*                        BRACKETED BY ><.  FOR NON-LABELLED TAPES,    *\n*                        THIS IS THE TRUE DENSITY.                    *\n*                                                                     *\n*                   F.  FT.  - NUMBER OF FEET IN THE FILE.  THIS      *\n*                        VALUE IS BASED ON THE TRUE DENSITY, BLOCK    *\n*                        COUNT, MAXIMUM BLOCK SIZE, AND NOMINAL       *\n*                        INTERBLOCK GAP SIZES.                        *\n*                                                                     *\n*                   R.  FT.  - ACCUMULATED REEL FOOTAGE.              *\n*                                                                     *\n*                   CR.  DATE - THE DATE THE FILE WAS CREATED.  THIS  *\n*                        VALUE IS OBTAINED FROM THE HDR1 LABEL AND IS *\n*                        NOT PROVIDED FOR NON-LABELLED TAPES.         *\n*                                                                     *\n*                   EX.  DATE - THE EXPIRATION DATE.  THIS VALUE IS   *\n*                        OBTAINED FROM THE HDR1 LABEL AND IS NOT      *\n*                        PROVIDED FOR NON-LABELLED TAPES.             *\n*                                                                     *\n*                   JOBNAME - NAME OF THE JOB WHICH CREATED THE FILE. *\n*                        THIS VALUE IS OBTAINED FROM THE HDR2 LABEL   *\n*                        AND IS NOT PROVIDED FOR NON-LABELLED TAPES.  *\n*                                                                     *\n*                   STEPNAME - THE NAME OF THE STEP WHICH CREATED THE *\n*                        FILE.  THIS VALUE IS OBTAINED FROM THE HDR2  *\n*                        LABEL AND IS NOT PROVIDED FOR NON-LABELLED   *\n*                        TAPES.                                       *\n*                                                                     *\n*                   SEC - SECURITY INDICATOR.  THIS VALUE IS OBTAINED *\n*                        FROM THE HDR1 LABEL AND IS NOT PROVIDED FOR  *\n*                        NON-LABELLED TAPES.THE MEANING OF THE CODES  *\n*                        ARE:                                         *\n*                        0 - NO SECURITY.                             *\n*                        1 - READ, WRITE, DELETE SECURITY.            *\n*                        3 - WRITE AND DELETE SECURITY.               *\n*                                                                     *\n*                   VSEQ - VOLUME SEQUENCE NUMBER.  THIS VALUE IS     *\n*                        OBTAINED FROM THE HDR1 LABEL AND IS THE      *\n*                        ORDER OF THE VOLUME WITHIN A MULTI-VOLUME    *\n*                        GROUP CREATED AT THE SAME TIME.              *\n*                                                                     *\n* CONSIDERATIONS                                                      *\n*                                                                     *\n*              ABEND CODES:                                           *\n*                                                                     *\n*                   U1000 - SYSPRINT DD STATEMENT MISSING (NO DUMP).  *\n*                                                                     *\n*                   U1001 - PROCESSING ERROR.  THIS ABEND WILL BE     *\n*                        PRECEEDED BY AN ERROR MESSAGE TO SYSPRINT    *\n*                        AND WILL PRODUCE A DUMP.                     *\n*                                                                     *\n*              ERROR MESSAGES:                                        *\n*                                                                     *\n*                   UNABLE TO OPEN TAPE DD STATEMENT                  *\n*                        THE TAPE DD STATEMENT FAILED TO OPEN.  THE   *\n*                        RUN TERMINATES WITH CONDITION CODE 16.  NO   *\n*                        DUMP IS PRODUCED.                            *\n*                                                                     *\n*                   PERMANENT I/O ERROR:  XXXXXXXXXX                  *\n*                        A PERMANENT I/O ERROR WAS DETECTED.  THE     *\n*                        DATA REPRESENTED BY XXXXXXXXXX IS PROVIDED   *\n*                        BY THE SYNAD ROUTINE.  SEE THE SYNADAF MACRO *\n*                        DESCRIPTION FOR A DESCRIPTION OF THIS DATA.  *\n*                        THIS MESSAGE IS FOLLOWED BY A U1001 ABEND.   *\n*                                                                     *\n*                   TAPE MARK EXPECTED, NOT FOUND                     *\n*                        A TAPE MARK WAS EXPECTED AT THE END OF THE   *\n*                        DATA FILE, BUT WAS NOT DETECTED.  THIS       *\n*                        MESSAGE IS FOLLOWED BY A U1001 ABEND.        *\n*                                                                     *\n*                   UNEXPECTED TAPE MARK ENCOUNTERED ATTEMPTING TO    *\n*                   READ XXXX RECORD                                  *\n*                        DURING PROCESSING OF A STANDARD LABEL TAPE,A *\n*                        TAPE MARK WAS DETECTED DURING AN ATTEMPT TO  *\n*                        READ THE RECORD TYPE DEFINED BY XXXX.  THIS  *\n*                        MESSAGE IS FOLLOWED BY A U1001 ABEND.        *\n*                                                                     *\n*                   XXXX RECORD TYPE EXPECTED, NOT FOUND              *\n*                        DURING PROCESSING OF A STANDARD LABEL TAPE,  *\n*                        RECORD TYPE XXXX WAS EXPECTED, BUT WAS NOT   *\n*                        FOUND.  THIS MESSAGE IS FOLLOWED BY A U1001  *\n*                        ABEND.                                       *\n*                                                                     *\n* PARAMETERS   THIS PROGRAM USES NO PARAMETERS.                       *\n*                                                                     *\n* EXECUTION    DDNAMES                                                *\n*                                                                     *\n*              TAPE     DEFINES THE TAPE TO BE MAPPED.  ONLY UNIT AND *\n*                       VOLUME SERIAL ARE REQUIRED.  THE VOLUME       *\n*                       SERIAL IS USED IN THE MESSAGE TO THE OPERATOR *\n*                       TO MOUNT THE TAPE.  IF A FILE NUMBER OTHER    *\n*                       THAN 1 IS SPECIFIED, MAPPING BEGINS AT THE    *\n*                       FILE SPECIFIED AND THE TAPE IS TREATED AS     *\n*                       NON-LABELLED.                                 *\n*                                                                     *\n*              SYSPRINT DEFINES THE OUTPUT LISTING DATA SET.          *\n*                                                                     *\n* EXAMPLE                                                             *\n*                                                                     *\n*              //TMAP   EXEC  PGM=TAPEMAP                             *\n*              //SYSPRINT DD  SYSOUT=*                                *\n*              //TAPE     DD  UNIT=TAPE,VOL=SER=VOLSER                *\n*              //SYSUDUMP DD  SYSOUT=*                                *\n*                                                                     *\n* FPL MACROS USED  (IN MAINLINE OR SUBROUTINES)                       *\n*              $ENTER   - ENTRY LINKAGE                               *\n*              $RTRN    - RETURN LINKAGE                              *\n*              $CALL    - INVOKE A SUBROUTINE                         *\n*                                                                     *\n* IBM MACROS USED  (IN MAINLINE OR SUBROUTINES)                       *\n*              ABEND    - ABNORMAL TERMINATE                          *\n*              CHECK    - WAIT FOR I/O COMPLETION                     *\n*              CLOSE    - CLOSE A DATA FILE                           *\n*              CNTRL    - POSITION TAPE                               *\n*              DCB      - DEFINE A DATA CONTROL BLOCK                 *\n*              EXCP     - EXECUTE CHANNEL PROGRAM (PHYSICAL I/O)      *\n*              EXTRACT  - OBTAIN TIOT ADDRESS                         *\n*              OPEN     - OPEN A DATA FILE                            *\n*              PUT      - PRINT A DATA RECORD                         *\n*              RDJFCB   - READ JOB FILE CONTROL BLOCK                 *\n*              READ     - READ A BLOCK FROM TAPE                      *\n*              SYNADAF  - ANALYZE SYNAD ERROR                         *\n*              SYNALRLS - RELEASE SYNAD WORK AREA                     *\n*              TIME     - TIME                                        *\n*              WAIT     - WAIT                                        *\n*                                                                     *\n* AUTHOR       THIS PROGRAM WAS BASED ON A PROGRAM WRITTEN BY         *\n*              C. L. TURNER (UMSL) AND RECEIVED FROM LSU.             *\n*              THE ORIGINAL PROGRAM INCLUDED MODIFICATIONS BY         *\n*              R. NESTOR,  P. J. CAUDLL,  E. R. VANCE, (UMSL),        *\n*              AND ERIC STRATMANN (LSU DEPT OF EXP. STAT.).           *\n*                                                                     *\n*              IT WAS RE-WRITTEN BY GORDON P. WEST OF FLORIDA         *\n*              POWER & LIGHT COMPANY TO INCLUDE ADDITIONAL COMMENTS,  *\n*              MNEMONIC REGISTER NOTATION, 6250 BPI SUPPORT,          *\n*              LTM SUPPORT, REVISED OUTPUT FORMAT, CONSOLIDATION OF   *\n*              NL AND SL SUBROUTINES, AUTOMATIC BLP SPECIFICATION     *\n*              (IF NOT SPECIFIED IN JCL), AND A FEW OTHER MINOR       *\n*              GOODIES.                                               *\n*                                                                     *\n* REGISTER USAGE                                                      *\n*                                                                     *\n*              R0  - LINKAGE                                          *\n*              R1  - LINKAGE                                          *\n*              R2  - FILE COUNTER                                     *\n*              R3  - LINE COUNTER                                     *\n*              R4  - NUMBER OF BLOCK SIZE CHANGES (NL TAPES)          *\n*              R5  - BLOCK COUNT (NL TAPES) / USER LABEL COUNT (SL)   *\n*              R6  - NOT USED                                         *\n*              R7  - NOT USED                                         *\n*              R8  - NOT USED                                         *\n*              R9  - NOT USED                                         *\n*              R10 - LINE INCREMENT                                   *\n*              R11 - LINE LIMIT                                       *\n*              R12 - PROGRAM BASE REGISTER                            *\n*              R13 - SAVE AREA ADDRESS - DATA BASE REGISTER           *\n*              R14 - LINKAGE                                          *\n*              R15 - LINKAGE                                          *\n*                                                                     *\n***********************************************************************\n         SPACE 2\n***********************************************************************\n*                                                                     *\n* UPDATE LOG                                                          *\n*                                                                     *\n* 03/07/78     EOD AFTER VOL1 WILL NOW RESULT IN UNEXPECTED TAPE      *\n*              MARK                                                   *\n*                                                                     *\n* 05/28/04     GOT RID OF THE CNTRL MACRO FOR SL TAPES, AND READ      *\n*              THROUGH THE DATA AT NORMAL SPEED INSTEAD.  IN SOME     *\n*              MVS SYSTEMS, THIS USAGE OF THE CNTRL MACRO CAUSED      *\n*              AN I/O ERROR.  I FIGURED THAT MODERN TAPE DRIVES       *\n*              ARE FASTER, ANYWAY.  (SAM GOLOB)                       *\n*                                                                     *\n*              ALSO, ONLY MEASURE FOOTAGES AS THOUGH THE TAPE IS      *\n*              6250 BPI, NO MATTER WHAT KIND OF TAPE YOU PUT INTO     *\n*              THE TAPE DRIVE.  THIS STANDARDIZES THE MEASUREMENT.    *\n*                                                                     *\n* 12/18/12     FIXED FOOTAGES TO SHOW OVER 10000 FEET.  IN THE        *\n*              PROCESS, I MAY HAVE MESSED UP THE CALCULATION OF       *\n*              THE EXECUTION TIME, IN THE HEADERS.  TO FIX THAT,      *\n*              I SUBSTITUTED A BETTER \"DATE/TIME CALCULATION\"         *\n*              ROUTINE, CALLED \"TODAY\" (INSTEAD OF THE ONE CALLED     *\n*              WKDATE).  THIS ROUTINE \"TODAY\" INCLUDES THE JULIAN     *\n*              DATE AS WELL AS DAY OF WEEK AND FULL DATE.  \"TODAY\"    *\n*              WAS FIXED FOR Y2K BY JOEL C. EWING AND RON TANSKY,     *\n*              AND IT APPEARS TO BE WORKING CORRECTLY. (SAM GOLOB)    *\n*                                                                     *\n***********************************************************************\n         TITLE 'INLINE MACROS'\n         MACRO\n&NAME    $CALL &EP=,&EPLOC=,&PARAM=,&PARMLOC=\n         MNOTE *,'       $CALL     VERSION 001 06/06/75  06/06/75  GPW'\n.**********************************************************************\n.*                                                                    *\n.* $CALL                                                              *\n.*                                                                    *\n.* FUNCTION       GENERATE CODE REQUIRED TO PASS CONTROL TO ANOTHER   *\n.*                CSECT AND PASS PARAMETERS IF REQUIRED.              *\n.*                                                                    *\n.* DESCRIPTION    STANDARD IBM LINKAGE CODE IS GENERATED BY THE MACRO *\n.*                TO PASS CONTROL TO A SPECIFIED LOAD MODULE.  A LIST *\n.*                OF PARAMETERS MAY ALSO BE CONSTRUCTED.              *\n.*                                                                    *\n.*                A FULLWORD NO-OP CONTAINING AN IDENTIFICATION       *\n.*                NUMBER WILL BE PLACED AFTER THE BALR USED TO        *\n.*                TRANSFER CONTROL.  THIS VALUE WILL BE DISPLAYED IN  *\n.*                DUMPS.  THE STARTING VALUE IS 10 AND IS INCREMENTED *\n.*                BY 10 FOR EACH CALL.  THE VALUE IS DEFINED BY THE   *\n.*                GLOBAL SYMBOL $CALLID.                              *\n.*                                                                    *\n.* SYNTAX         NAME     $CALL     EP=SYM1                          *\n.*                                   EPLOC=SYM2                       *\n.*                                                                    *\n.*                                   PARAM=(SYM-LIST)                 *\n.*                                   PARMLOC=SYM3                     *\n.*                                                                    *\n.*                                                                    *\n.*                NAME   - A SYMBOLIC TAG ASSIGNED TO THE FIRST       *\n.*                         INSTRUCTION GENERATED.                     *\n.*                                                                    *\n.*                EP     - THE NAME OF THE CSECT TO WHICH CONTROL IS  *\n.*                         TO BE TRANSFERRED.  A V TYPE ADDRESS       *\n.*                         CONSTANT WILL BE GENERATED.                *\n.*                                                                    *\n.*                EPLOC  - THE NAME OF A FULLWORD CONTAINING THE      *\n.*                         ADDRESS OF THE CSECT TO WHICH CONTROL IS   *\n.*                         TO BE TRANSFERRED.                         *\n.*                                                                    *\n.*                         NOTE - IF EP IS SPECIFIED, EPLOC IS        *\n.*                                IGNORED.                            *\n.*                                                                    *\n.*                PARAM  - A LIST OF SYMBOLIC NAMES OF PARAMETERS TO  *\n.*                         BE PASSED TO THE CALLED ROUTINE.  AN       *\n.*                         IN-LINE PARAMETER LIST WILL BE GENERATED.  *\n.*                         THE ADDRESS OF THE LIST WILL BE PLACED IN  *\n.*                         REGISTER 1.  THE HIGH ORDER BIT OF THE     *\n.*                         LAST WORD IN THE LIST WILL BE SET TO 1.    *\n.*                                                                    *\n.*                PARMLOC- THE NAME OF THE FIRST WORD OF A USER       *\n.*                         SUPPLIED PARAMETER LIST.                   *\n.*                                                                    *\n.*                         NOTE - IF PARAM IS SPECIFIED, PARMLOC IS   *\n.*                                IGNORED.                            *\n.*                                                                    *\n.* ERRORS         EP OR EPLOC MUST BE SPECIFIED.  IF NEITHER VALUE    *\n.*                IS PROVIDED, AN ERROR MESSAGE WILL BE GENERATED.    *\n.*                THE ERROR IS SEVERITY CODE 8.                       *\n.*                                                                    *\n.* EXAMPLE        EX1      $CALL EP=GDATE,PARAM=DATE                  *\n.*                              .                                     *\n.*                              .                                     *\n.*                              .                                     *\n.*                DATE     DC    CL12' '                              *\n.*                                                                    *\n.*                                                                    *\n.*                EX2      $CALL EPLOC=SUBRADR,PARMLOC=PARMLIST       *\n.*                              .                                     *\n.*                              .                                     *\n.*                              .                                     *\n.*                SUBRADR  DC    V(GDATE)                             *\n.*                PARMLIST DC    A(DATE)                              *\n.*                              .                                     *\n.*                              .                                     *\n.*                              .                                     *\n.*                DATE     DC    CL12' '                              *\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                NAME     TYPE  USE                                  *\n.*                                                                    *\n.*                &$CALLID   A   USED TO GENERATE AN IDENTIFICATION   *\n.*                               NUMBER IN A NO-OP FOLLOWING THE BALR *\n.*                               USED TO TRANSFER CONTROL.  THE VALUE *\n.*                               IS INCREMENTED BY 10 FOLLOWING EACH  *\n.*                               CALL.  THIS VALUE WILL BE DISPLAYED  *\n.*                               IN THE TRACEBACK PROVIDED WITH       *\n.*                               DUMPS.                               *\n.* MACROS CALLED                                                      *\n.*                                                                    *\n.*                NONE                                                *\n.*                                                                    *\n.**********************************************************************\n.*\n         GBLA  &$CALLID\n.*\n         LCLA  &COUNT\n         LCLC  &ID\n.*\n&ID      SETC  '&NAME'\n.*-------DO I SET UP PARM LIST?\n         AIF   ('&PARAM' EQ '').PARMADR\n         AIF   ('&PARAM' EQ '(R1)').PARMADR\n         CNOP  0,4                      ALIGN TO FULL WORD\n&COUNT   SETA  4*N'&PARAM+4\n&ID      BAL   R1,*+&COUNT              BRANCH AROUND LIST\n&ID      SETC  ''\n&COUNT   SETA  1\n.LOOP    ANOP\n         AIF   (&COUNT EQ N'&PARAM).LAST\n         DC    A(&PARAM(&COUNT))        PARAMETER &COUNT\n&COUNT   SETA  &COUNT+1\n         AGO   .LOOP\n.LAST    DC    X'80',AL3(&PARAM(&COUNT)) LAST PARAMETER\n         AGO   .ENTRY\n.*-------SET UP PARM ADDR\n.PARMADR AIF   ('&PARMLOC' EQ '').ENTRY\n&ID      LA    R1,&PARMLOC              LOAD PARM LIST ADDRESS\n&ID      SETC  ''\n.*-------SET UP ENTRY POINT\n.ENTRY   AIF   ('&EP' EQ '').EPLOC\n&ID      L     R15,=V(&EP)              LOAD ENTRY ADDRESS    120475SH\n         AGO   .BALR\n.*-------SET UP ENTRY POINT\n.EPLOC   AIF   ('&EPLOC' EQ '').BAD\n&ID      L     R15,&EPLOC               LOAD ENTRY POINT ADDRESS\n.*-------BRANCH TO SUBROUTINE\n.BALR    BALR  R14,R15                  BRANCH TO SUBROUTINE\n&$CALLID SETA  &$CALLID+10\n         DC    X'4700',AL2(&$CALLID)    NO-OP, ID\n         MEXIT\n.*-------NO ENTRY POINT\n.BAD     MNOTE 8,'*** ERROR - NO ENTRY POINT SPECIFIED'\n         MEND\n         MACRO\n&NAME    $ENTER &BASE=R3,&CSECT=YES,&SAVE=,&RENT=,&SP=1,&SPM=YES,      +\n               &CHAIN=YES\n         MNOTE *,'       $ENTER    VERSION 003 05/07/75  04/29/76  GPW'\n.**********************************************************************\n.*                                                                    *\n.* $ENTER                                                             *\n.*                                                                    *\n.* FUNCTION       PROVIDE ENTRY CODING TO ESTABLISH BASE REGISTERS,   *\n.*                ALLOCATE AND CHAIN SAVE AREAS, SET PROGRAM MASK,    *\n.*                AND OBTAIN WORK AREA FOR RE-ENTRANT PROGRAMS.       *\n.*                                                                    *\n.* DESCRIPTION    THE MACRO WILL GENERATE CODE TO ESTABLISH ONE OR    *\n.*                MORE BASE REGISTERS.  IT IS ASSUMED THAT STANDARD   *\n.*                IBM LINKAGE CONVENTIONS HAVE BEEN FOLLOWED AND THAT *\n.*                REGISTER 15 CONTAINS THE ADDRESS OF THE ENTRY       *\n.*                POINT.  USER SPECIFIED OR DEFAULT BASE REGISTERS    *\n.*                ARE INITIALIZED.  THE FIRST BASE REGISTER CONTAINS  *\n.*                THE ADDRESS OF THE ENTRY POINT, AND SUCCESSIVE BASE *\n.*                REGISTER ADDRESSES ARE INCREMENTED BY 4096.  THE    *\n.*                DEFAULT BASE REGISTER IS REGISTER 3.  IF REGISTER 2 *\n.*                IS SPECIFIED AS A BASE REGISTER, IT WILL BE         *\n.*                ALLOWED, BUT A WARNING MESSAGE WILL BE DISPLAYED.   *\n.*                REGISTERS 0, 1, 13, 14, AND 15 MAY NOT BE           *\n.*                SPECIFIED AS BASE REGISTERS.  ALL REGISTER          *\n.*                SPECIFICATIONS MUST BE MADE AS MNEMONICS (EG,       *\n.*                REGISTER 3 IS R3).                                  *\n.*                                                                    *\n.*                IDENTIFICATION CONSTANTS SPECIFYING THE DATE AND    *\n.*                TIME OF ASSEMBLY ARE CONSTRUCTED IN THE ENTRY       *\n.*                CODING.  THESE VALUES ARE DISPLAYED IN DUMPS AND    *\n.*                MAY BE USED TO VERIFY THAT THE PROPER VERSION OF    *\n.*                THE ROUTINE HAS BEEN USED.                          *\n.*                                                                    *\n.*                ALL BITS OF THE PROGRAM MASK ARE SET.  IBM          *\n.*                TRANSFERS CONTROL TO THE USER PROGRAM WITH ALL      *\n.*                PROGRAM MASK BITS OFF.  IF SPM=NO IS SPECIFIED,     *\n.*                THE PROGRAM MASK WILL BE UNALTERED.                 *\n.*                                                                    *\n.*                THE USER MAY SPECIFY THE NAME OF A WORK AREA OF 18  *\n.*                FULLWORDS TO BE USED AS A SAVE AREA.  IF A USER     *\n.*                AREA IS NOT SUPPLIED, AN 18 FULLWORD AREA IS        *\n.*                ALLOCATED AND INITIALIZED TO ZERO.  THE ADDRESS OF  *\n.*                THE SAVE AREA IS LOADED INTO REGISTER 13 AND IT IS  *\n.*                CHAINED TO THE SAVE AREA OF THE CALLING PROGRAM.    *\n.*                                                                    *\n.*                THE USER MAY SPECIFY THAT THE MACRO IS NOT TO       *\n.*                OBTAIN A SAVE AREA OR CHAIN SAVE AREAS BY           *\n.*                SPECIFYING CHAIN=NO.  THE USER IS THEN              *\n.*                RESPONSIBLE FOR SAVE AREA CHAINING.                 *\n.*                                                                    *\n.*                REGISTER EQUIVALENCES (R0  EQU  0, ETC.) ARE        *\n.*                GENERATED FOR THE FIRST USAGE OF THE MACRO.         *\n.*                                                                    *\n.*                A CSECT DEFINITION WILL BE GENERATED UNLESS         *\n.*                CSECT=NO IS SPECIFIED.  IF CSECT=NO IS SPECIFIED,   *\n.*                AN ENTRY STATEMENT WILL BE GENERATED.               *\n.*                                                                    *\n.*                RE-ENTRANT CODING IS SUPPORTED.  FOR RE-ENTRANT     *\n.*                CODING, THE USER MUST SPECIFY THE LENGTH OF A       *\n.*                WORK AREA.  THE WORK AREA IS OBTAINED FROM SUBPOOL  *\n.*                1 UNLESS OTHERWISE SPECIFIED.  THE FIRST 18 WORDS   *\n.*                OF THE WORK AREA ARE USED FOR THE SAVE AREA.        *\n.*                                                                    *\n.* SYNTAX         NAME     $ENTER    BASE=(REG1,...,REGN)             *\n.*                                   CSECT=NO                         *\n.*                                   SAVE=SYM                         *\n.*                                   RENT=LEN                         *\n.*                                   SP=NUMBER                        *\n.*                                   SPM=NO                           *\n.*                                   CHAIN=NO                         *\n.*                                                                    *\n.*                NAME   - A SYMBOLIC TAG ASSIGNED TO THE FIRST       *\n.*                         INSTRUCTION GENERATED.                     *\n.*                                                                    *\n.*                BASE   - THE REGISTERS TO BE USED AS BASE           *\n.*                         REGISTERS.  THE DEFAULT IS R3.  THE FIRST  *\n.*                         REGISTER SPECIFIED WILL CONTAIN THE        *\n.*                         ADDRESS OF THE ENTRY POINT, AND SUCCEEDING *\n.*                         BASE VALUES WILL BE INCREMENTED BY 4096.   *\n.*                         REGISTERS 0, 1, 13, 14, AND 15 MAY NOT BE  *\n.*                         SPECIFIED AS BASE REGISTERS.  REGISTERS    *\n.*                         MUST BE SPECIFIED IN MNEMONIC FORM (EG,    *\n.*                         R3 FOR REGISTER 3).                        *\n.*                                                                    *\n.*                CSECT  - CSECT=NO SPECIFIES THAT CODING FOR AN      *\n.*                         ENTRY POINT RATHER THAN A CSECT IS TO BE   *\n.*                         GENERATED.                                 *\n.*                                                                    *\n.*                SAVE   - SPECIFIES THE NAME OF A USER DEFINED 18    *\n.*                         WORD SAVE AREA TO BE USED INSTEAD OF       *\n.*                         GENERATING AN IN-LINE SAVE AREA.  IF RENT  *\n.*                         IS SPECIFIED, SAVE MUST SPECIFY THE NAME   *\n.*                         ASSIGNED TO THE FIRST 18 WORDS IN THE      *\n.*                         WORK AREA.                                 *\n.*                                                                    *\n.*                RENT   - SPECIFIES THAT RE-ENTRANT CODE IS TO BE    *\n.*                         GENERATED.  LEN IS THE LENGTH OF A WORK    *\n.*                         AREA TO BE OBTAINED BY A GETMAIN.          *\n.*                                                                    *\n.*                SP     - SPECIFIES THE SUBPOOL FROM WHICH THE WORK  *\n.*                         AREA FOR RE-ENTRANT CODING IS TO BE        *\n.*                         OBTAINED.  DEFAULT IS SUBPOOL 1.           *\n.*                                                                    *\n.*                SPM    - SPM=NO SPECIFIES THAT THE PROGRAM MASK IS  *\n.*                         NO TO BE ALTERED.                          *\n.*                                                                    *\n.*                CHAIN  - CHAIN=NO SPECIFIES THAT SAVE AREA ARE NOT  *\n.*                         TO BE CHAINED.  THIS OPTION IS INTENDED    *\n.*                         FOR USE ONLY BY HIGH ACTIVITY RE-ENTRANT   *\n.*                         MODULES WHERE THE OVERHEAD OF              *\n.*                         GETMAIN/FREEMAIN IS TO BE AVOIDED.         *\n.*                                                                    *\n.* ERRORS         THE NAME FIELD MUST BE SPECIFIED.  IF IT IS NOT, A  *\n.*                GENERATED NAME, $ENTNNNN WILL BE GENERATED AND A    *\n.*                SEVERITY 8 MNOTE IS GENERATED.  IF NO CODE WERE     *\n.*                GENERATED AND NO BASE REGISTER DEFINED, THE ERROR   *\n.*                LISTING WOULD BE LARGE.  TO REDUCE THE SIZE OF THE  *\n.*                ERROR LISTING AND ALLOW OTHER ERRORS TO BE FOUND,   *\n.*                THE MACRO WILL EXPAND.                              *\n.*                                                                    *\n.*                                                                    *\n.* EXAMPLE        EX1      $ENTER                                     *\n.*                                                                    *\n.*                EX2      $ENTER CSECT=NO                            *\n.*                                                                    *\n.*                EX3      $ENTER BASE=(R3,R4,R5)                     *\n.*                                                                    *\n.*                EX4      $ENTER BASE=R12,RENT=DSECTLEN,SAVE=SAVEAREA*\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                NAME     TYPE  USE                                  *\n.*                                                                    *\n.*                &ENCOUNT   A   SET TO 1 AFTER REGISTER EQUIVALENCES *\n.*                               GENERATED TO PREVENT EQUIVALENCES    *\n.*                               FROM BEING GENERATED FOR LATER USES. *\n.*                                                                    *\n.* MACROS USED                                                        *\n.*                                                                    *\n.*                GETMAIN                                             *\n.*                                                                    *\n.* UPDATE SUMMARY                                                     *\n.*                                                                    *\n.*      VERSION   DATE     CHANGE                                     *\n.*                                                                    *\n.*        003   04/29/76   CHAIN KEYWORD ADDED                        *\n.*                                                                    *\n.*                                                                    *\n.**********************************************************************\n.*\n         GBLA  &ENCOUNT\n.*\n         LCLA  &PARMNO,&REGNO\n         LCLC  &REG,&CHAR,&LAST,&USING,&TEMP,&ID,&FIRST\n.*\n&ID      SETC  '&NAME'\n         AIF   ('&NAME' NE '').CKCSECT\n&ID      SETC  '$ENT&SYSNDX'\n         MNOTE 8,'NAME OPERAND REQUIRED, NOT SPECIFIED. &ID WILL BE USE+\n               D.'\n.CKCSECT AIF   ('&CSECT' NE 'NO').CSECT\n         AIF   ('&SYSECT' NE '').CKEQU\n         MNOTE 8,'ENTRY POINT SPECIFIED, BUT NO CSECT DEFINED'\n.CSECT   ANOP\n         SPACE\n&ID      CSECT\n.CKEQU   AIF   (&ENCOUNT EQ 1).SKIPEQU\n         SPACE\n***********************************************************************\n*                                                                     *\n*                      REGISTER EQUIVALENCES                          *\n*                                                                     *\n***********************************************************************\n         SPACE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n.*\n&ENCOUNT SETA  1\n         SPACE\n.SKIPEQU AIF   ('&CSECT' NE 'NO').CSECT2\n         AIF   ('&SYSECT' EQ '').CSECT2\n.*-------ENTRY POINT\n         ENTRY &ID\n         USING &ID,R15                  DEFINE BASE REGISTER\n&ID      B     14(R15)                  BRANCH AROUND ID\n         DC    AL1(8)                   IDENTIFIER LENGTH\n         DC    CL8'&ID'                 ENTRY POINT NAME\n         DC    CL1' '                   SPACER\n         AGO   .STREGS\n.*-------CSECT\n.CSECT2  USING &ID,R15                  DEFINE BASE REGISTER\n         B     28(0,R15)                BRANCH AROUND ID\n         DC    AL1(23)                  IDENTIFIER LENGTH\n         DC    CL8'&ID'                 CSECT NAME\n         DC    CL1' '                   SPACER\n         DC    CL8'&SYSDATE'            DATE OF ASSEMBLY\n         DC    CL1' '                   SPACER\n         DC    CL5'&SYSTIME'            TIME OF ASSEMBLY\n.STREGS  STM   R14,R12,12(R13)          SAVE REGISTERS\n&PARMNO  SETA  1                        INITIALIZE COUNTER\n.CKBASE  ANOP\n&REG     SETC  '&BASE(&PARMNO)'(1,3)\n         AIF   ('&REG'(1,1) NE 'R').SKIPBAS\n&TEMP    SETC  '&REG'(2,2)\n&REGNO   SETA  &TEMP\n         AIF   (&REGNO LT 2).BADBASE\n         AIF   (&REGNO GT 12).BADBASE\n         AIF   (&REGNO NE 2).SETBASE\n         MNOTE 0,'*** WARNING - R2 IS A BASE REGISTER. TRANSLATE AND TE+\n               ST INSTRUCTION WILL DESTROY CONTENTS.'\n.SETBASE ANOP\n         AIF   ('&FIRST' NE '').SETBAS2\n         LR    &REG,R15                 LOAD BASE ADDRESS\n&FIRST   SETC  '&REG'                   SAVE REGISTER\n         AGO   .SETLAST\n.SETBAS2 LA    &REG,4095(&LAST)         ADD 4095 TO LAST BASE\n         LA    &REG,1(&REG)             ADD 1 MORE\n.SETLAST ANOP\n&LAST    SETC  '&REG'\n&USING   SETC  '&USING.,&REG'\n         AGO   .NEXTBAS\n.SKIPBAS MNOTE 8,'*&REG* IS AN INVALID REGISTER FORM, IGNORED'\n         AGO   .NEXTBAS\n.BADBASE MNOTE 8,'*&REG* IS AN INVALID BASE REGISTER, IGNORED'\n.NEXTBAS ANOP\n&PARMNO  SETA  &PARMNO+1\n         AIF   (&PARMNO LE N'&BASE).CKBASE\n         DROP  R15                      DISCONTINUE R15 BASE\n         USING &ID.&USING               DEFINE BASE REGISTERS\n.*-------SEE IF PROGRAM MASK IS TO BE SET\n         AIF   ('&SPM' EQ 'NO').NOSPM\n         LA    R15,15                   LOAD PGM MASK SETTING\n         SLA   R15,24                   SHIFT TO BITS 4-7\n         SPM   R15                      SET PGM MASK AND COND\n.NOSPM   AIF   ('&CHAIN' EQ 'NO').DONE\n         AIF   ('&RENT' NE '').GETMAIN\n         LR    R15,R13                  SAVE OLD SAVEAREA ADDR\n         AIF   ('&SAVE' NE '').LOADSAV\n         CNOP  0,4                      FULL WORD ALIGNMENT\n         BAL   R13,*+76                 LOAD SAVEAREA ADDR\n         DC    18F'0'                   SAVE AREA\n         AGO   .CHAIN\n.LOADSAV LA    R13,&SAVE                LOAD NEW SAVEAREA ADDR\n         AGO   .CHAIN\n.GETMAIN MNOTE *,' GETMAIN R,LV=&RENT,SP=&SP'\n         GETMAIN R,LV=&RENT,SP=&SP      GET STORAGE\n* END OF GETMAIN - $ENTER\n         LR    R15,R13                  SAVE OLD SAVEAREA ADDR\n         LR    R13,R1                   LOAD STORAGE ADDRESS\n         USING &SAVE,R13                DEFINE BASE REGISTER\n         L     R1,24(R15)               RESTORE REG 1 CONTENTS\n.CHAIN   ST    R15,4(R13)               CHAIN SAVE AREAS\n         ST    R13,8(R15)\n.DONE    ANOP\n         MEND\n         MACRO\n&NAME    $RTRN &RC=0,&RENT=,&SP=1,&SPM=YES,&REST01=YES\n         MNOTE *,'       $RTRN     VERSION 002 05/07/75  04/29/76  GPW'\n.**********************************************************************\n.*                                                                    *\n.* $RTRN                                                              *\n.*                                                                    *\n.* FUNCTION       GENERATE CODE REQUIRED TO RETURN CONTROL TO THE     *\n.*                CALLING PROGRAM.                                    *\n.*                                                                    *\n.* DESCRIPTION    STANDARD IBM LINKAGE CODE IS GENERATED BY THE MACRO *\n.*                TO RETURN CONTROL TO THE CALLING PROGRAM.  THE USER *\n.*                MAY SPECIFY THE RETURN CODE TO BE RETURNED.         *\n.*                RE-ENTRANT CODE IS SUPPORTED.                       *\n.*                                                                    *\n.*                REGISTERS 0 THROUGH 14 (OR OPTIONALLY, REGISTERS    *\n.*                2 THROUGH 14) WILL BE RESTORED TO THEIR STATUS      *\n.*                UPON ENTRY TO THE ROUTINE.  REGISTER 15 WILL BE     *\n.*                USED FOR A DEFAULT OR USER SPECIFIED RETURN CODE.   *\n.*                AN X'FF' WILL BE PLACED IN THE HIGH ORDER BYTE OF   *\n.*                WORD 4 OF THE OLD SAVE AREA TO INDICATE THAT        *\n.*                CONTROL HAS BEEN RETURNED TO THE CALLING PROGRAM    *\n.*                                                                    *\n.*                CODE IS ALSO GENERATED TO RESTORE THE PROGRAM MASK  *\n.*                TO ITS STATUS UPON ENTRY TO THE ROUTINE.  THE       *\n.*                VALUE OF THE MASK IS OBTAINED FROM THE HIGH ORDER   *\n.*                BYTE OF REGISTER 14.  THE ASSUMPTION IS MADE THAT   *\n.*                STANDARD LINKAGE WAS USED TO INVOKE THE ROUTINE,    *\n.*                THAT IS, THAT ENTRY WAS MADE BY A  BALR  R14,R15.   *\n.*                IF THIS IS NOT TRUE, THE PROGRAM MASK WILL BE       *\n.*                RESTORED INCORRECTLY.  IF SPM=NO IS SPECIFIED, THE  *\n.*                PROGRAM MASK WILL NOT BE ALTERED.                   *\n.*                                                                    *\n.*                IF RE-ENTRANT CODE IS BEING GENERATED, A DROP R2    *\n.*                STATEMENT IS GENERATED, SO THE USER SHOULD NOT USE  *\n.*                REGISTER 2 AS A BASE REGISTER.                      *\n.*                                                                    *\n.* SYNTAX         NAME     $RTRN     RC=NUM1                          *\n.*                                      (R15)                         *\n.*                                   RENT=LEN                         *\n.*                                   SP=NUM2                          *\n.*                                   SPM=NO                           *\n.*                                   REST01=NO                        *\n.*                                                                    *\n.*                NAME   - A SYMBOLIC TAG ASSIGNED TO THE FIRST       *\n.*                         INSTRUCTION GENERATED.                     *\n.*                                                                    *\n.*                RC     - SPECIFIES THE RETURN CODE TO BE PLACED IN  *\n.*                         REGISTER 15.  A NUMBER MAY BE SPECIFIED,   *\n.*                         OR (R15) INDICATES THAT THE RETURN CODE    *\n.*                         HAS ALREADY BEEN PLACED IN REGISTER 15 BY  *\n.*                         THE USER.  THE DEFAULT RETURN CODE IS 0.   *\n.*                                                                    *\n.*                RENT   - INDICATES THAT THE WORK AREA OBTAINED BY   *\n.*                         $ENTER IS TO BE FREED.  LEN SPECIFIES THE  *\n.*                         LENGTH OF THE AREA.  THE ADDRESS IS        *\n.*                         OBTAINED FROM REGISTER 13.                 *\n.*                                                                    *\n.*                SP     - SPECIFIES THE SUBPOOL OF THE WORK AREA.    *\n.*                         IT MUST AGREE WITH THE SUBPOOL SPECIFIED   *\n.*                         IN $ENTER.  THE DEFAULT IS 1.              *\n.*                                                                    *\n.*                SPM    - SPM=NO SPECIFIES THAT THE PROGRAM MASK     *\n.*                         IS NOT TO BE ALTERED.                      *\n.*                                                                    *\n.*                REST01 - REST01=NO SPECIFIES THAT THE CONTENTS      *\n.*                         OF REGISTERS 0 AND 1 ARE NOT TO BE         *\n.*                         RESTORED.  THIS OPTION SHOULD BE           *\n.*                         SPECIFIED WHEN DATA IS TO BE PASSED        *\n.*                         BACK TO THE CALLING PROGRAM IN             *\n.*                         REGISTERS 0 AND 1.                         *\n.*                                                                    *\n.* ERRORS         NO ERROR MESSAGES ARE GENERATED                     *\n.*                                                                    *\n.* EXAMPLE        EX1      $RTRN                                      *\n.*                                                                    *\n.*                EX2      $RTRN  RC=4                                *\n.*                                                                    *\n.*                EX3      $RTRN  RC=(R15),RENT=DSECTLEN              *\n.*                                                                    *\n.* GLOBAL SYMBOLS                                                     *\n.*                                                                    *\n.*                NONE                                                *\n.*                                                                    *\n.* MACROS CALLED                                                      *\n.*                                                                    *\n.*                FREEMAIN                                            *\n.*                                                                    *\n.* UPDATE SUMMARY                                                     *\n.*                                                                    *\n.*      VERSION   DATE     CHANGE                                     *\n.*                                                                    *\n.*        002   04/29/76   REST01 KEYWORD ADDED                       *\n.*                                                                    *\n.**********************************************************************\n.*\n         AIF   ('&RENT' EQ '').REGULAR\n&NAME    LR    R1,R13                   LOAD STORAGE ADDRESS\n         BALR  R2,0                     ESTABLISH BASE REG\n         USING *,R2                     DEFINE BASE REGISTER\n         L     R3,4(R13)                SAVE OLD SAVEAREA ADDR\n         LR    R4,R15                   SAVE RETURN CODE\n.FREE    MNOTE *,' FREEMAIN R,LV=&RENT,A=(1),SP=&SP'\n         FREEMAIN R,LV=&RENT,A=(1),SP=&SP FREE STORAGE\n* END FREEMAIN - $RTRN\n         AIF   ('&RC' NE '(R15)').RESSAV\n         LR    R15,R4                   RESTORE RETURN CODE\n.RESSAV  LR    R13,R3                   RESTORE OLD SAVEAREA\n         DROP  R2\n         AGO   .COMMON\n.REGULAR ANOP\n&NAME    L     R13,4(R13)               RESTORE OLD SAVEAREA\n.COMMON  AIF   ('&RC' EQ '(R15)').RES14\n         LA    R15,&RC                  SET RETURN CODE\n.RES14   L     R14,12(R13)              RESTORE RETURN ADDRESS\n         AIF   ('&REST01' EQ 'NO').REST2\n         LM    R0,R12,20(R13)           RESTORE REGS 0 - 12\n         AGO   .SETFLAG\n.REST2   LM    R2,R12,28(R13)           RESTORE REGS 2 - 12\n.SETFLAG MVI   12(R13),X'FF'            SET RETURNED FLAG\n.*-------TEST FOR SPM RESET\n         AIF   ('&SPM' EQ 'NO').NOSPM\n         SPM   R14                      RESTORE PROGRAM MASK\n.NOSPM   BR    R14                      RETURN\n         MEND\n         TITLE 'LINKAGE EDITOR CONTROL RECORDS'\n***********************************************************************\n*                                                                     *\n*        THE FOLLOWING PUNCH STATEMENT(S) CAUSE LINKAGE EDITOR        *\n*        CONTROL STATEMENTS TO BE INCLUDED IN THE OBJECT OUTPUT.      *\n*                                                                     *\n*        IF MESSAGE IEW0731 IS GENERATED (ALIAS NAME MATCHES MEMBER   *\n*        NAME) IT MAY BE IGNORED'                                     *\n*                                                                     *\n***********************************************************************\n*\n         PUNCH '  SETCODE AC(1)            REMOVE IF NOT MVS'\n         TITLE 'ENTRY LINKAGE'\nSS0104   $ENTER BASE=R12,                                              +\n               SAVE=SAVE\n         USING SAVE,R13\n         TITLE 'OPEN FILES'\n***********************************************************************\n*                                                                     *\n*        OPEN FILES                                                   *\n*                                                                     *\n***********************************************************************\n         SPACE\n         OPEN  (SYSPRINT,OUTPUT)       OPEN PRINT FILE\n         TM    SYSPRINT+48,X'10'       TEST FOR SUCCESSFUL OPEN\n         BO    GETDEN\n         ABEND 1000\nGETDEN   $CALL EP=DENTAPE,             GET TRUE TAPE DENSITY           +\n               PARAM=(DENSITY,FILENO)\n         LTR   R15,R15                 TEST RETURN CODE\n         BZ    OPENTAPE\n         PUT   SYSPRINT,NOTAPE         DISPLAY ERROR MESSAGE\n         CLOSE SYSPRINT\n         LA    R15,16                  SET CONDITION CODE 16\n         B     RETURN\nOPENTAPE OPEN  (TAPE,INPUT)            OPEN TAPE TO BE MAPPED\n         TITLE 'INITIALIZATION'\n***********************************************************************\n*                                                                     *\n*        INITIALIZATION                                               *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LA    R3,99                   LINE COUNT - FORCE NEW PAGE\n         LA    R10,1                   LINE COUNT INCREMENT\n         LA    R11,50                  DATA LINE LIMIT\n         LH    R2,FILENO               INITIALIZE FILE NUMBER\n*  ROUTINE TODAY WAS SUBSTITUTED FOR ROUTINE WKDATE, WHICH DID NOT\n*   GIVE THE CORRECT TIME.  THE TODAY ROUTINE WAS LIFTED FROM THE\n*   TAPEMAP PROGRAM ON CBT TAPE FILE 299, AND APPEARS TO WORK FINE.\n         $CALL EP=TODAY,               GET CURRENT DATE AND TIME       +\n               PARAM=(TTL1DATE,TTL1DAY,TTL1TIME)\n         XC    CUMTOTAL,CUMTOTAL       ZERO OUT CUMTOTAL\n         XC    USERLBLS,USERLBLS       ZERO OUT USER LABEL COUNT\n         MVC   DEN,DENSITY             COPY DENSITY TO HEADER\n         SR    R1,R1                   SET BPI CODE\n         IC    R1,DENSITY\n         N     R1,=X'0000000F'         ISOLATE DIGIT\n         SLA   R1,2                    MULTIPLY BY 4\n         LA    R1,DENTABLE(R1)         POINT TO DENSITY IN BPI\n         MVC   BPI,0(R1)               COPY INTO TITLE\n         TITLE 'VOL1 HEADER PROCESSING'\n***********************************************************************\n*                                                                     *\n*        VOL1 HEADER PROCESSING                                       *\n*                                                                     *\n*             VOLUME SERIAL                                           *\n*             OWNER ID                                                *\n*                                                                     *\n***********************************************************************\n         SPACE\n         MVC   EODAD,=AL3(LTM)         SET EOD ADDRESS\n         READ  TAPEIN,                 READ VOL1 HEADER                +\n               SF,                                                     +\n               MF=E\n         CHECK TAPEDECB                WAIT FOR COMPLETION\n         LH    R1,DCBLRECL             LOAD RECORD LENGTH\n         ST    R1,RECLEN               SAVE IT\n         CLC   RECLEN,=F'80'           TEST FOR 80 BYTE RECORD\n         BNE   NONLABEL\n         CLC   VOLID,=C'VOL1'          TEST FOR VOL1 HEADER\n         BNE   NONLABEL\n         MVI   LABELTYP,C'S'           INDICATE STANDARD LABEL\n         MVC   LABEL,=CL12'  STANDARD  '\n         MVC   OUTVOL,VOLSER           COPY VOLUME SERIAL\n         MVC   OUTOWNER,VOLOWNER       COPY OWNER ID\n         TITLE 'HDR1 PROCESSING'\n***********************************************************************\n*                                                                     *\n*        HDR1 PROCESSING                                              *\n*                                                                     *\n*             FILE SEQUENCE NUMBER                                    *\n*             DSNAME                                                  *\n*             VOLUME SEQUENCE NUMBER                                  *\n*             CREATION DATE                                           *\n*             EXPIRATION DATE                                         *\n*             SECURITY CODE                                           *\n*             VOLUME SEQUENCE NUMBER                                  *\n*                                                                     *\n***********************************************************************\n         SPACE\n         MVC   EODAD,=AL3(UTM)         RESET EOD ADDRESS AFTER VOL1\nREADHDR1 MVC   RECTYPE,=C'HDR1'        SET RECORD TYPE EXPECTED\n         READ  TAPEIN,                 READ HDR1 RECORD                +\n               SF,                                                     +\n               MF=E\n         CHECK TAPEDECB                WAIT FOR COMPLETION\n         MVC   EODAD,=AL3(UTM)         RESET EOD ADDRESS\n         CLC   HDRID,RECTYPE           TEST FOR HDR1\n         BNE   BADREC\n         MVC   OUTDSN,DSNAME           MOVE THE DSN\n         MVC   OUTVSEQN,VOLSEQ         MOVE VOL.SEQ. #\n         PACK  WORK,DSSEQ\n         CVB   R1,DWORK                CONVERT FILE NUMBER TO BINARY\n         STH   R1,FILENO               STORE IN FOOTAGE WORK AREA\n         MVC   VORK,PATTRN\n         ED    VORK,WORK\n         MVC   OUTFILE,VORK+4          MOVE FILE #\n         CR    R1,R2                   COMPARE FILE # IN LABEL TO COUNT\n         BE    GETCRDAT\n         MVI   OUTFILE-1,C'>'          CALL ATTENTION TO DIFFERENCE\n         MVI   OUTFILE+4,C'<'\nGETCRDAT PACK  DATEWORK,CRDATE+1(5)    PACK CREATION DATE\n         BAL   R14,GDATE               CONVERT TO MM/DD/YY\n         MVC   OUTCRDAT,MMDDYY         COPY TO OUTPUT LINE\n         PACK  DATEWORK,EXDATE+1(5)    PACK EXPIRATION DATE\n         BAL   R14,GDATE               CONVERT TO MM/DD/YY\n         MVC   OUTEXDAT,MMDDYY         COPY TO OUTPUT LINE\n         MVC   OUTSEC,SECURITY         COPY SECURITY INDICATOR\n         TITLE 'HDR2 PROCESSING'\n***********************************************************************\n*                                                                     *\n*        HDR2 PROCESSING                                              *\n*                                                                     *\n*             RECFM                                                   *\n*             LRECL                                                   *\n*             BLKSIZE                                                 *\n*             JOBNAME                                                 *\n*             STEPNAME                                                *\n*                                                                     *\n***********************************************************************\n         SPACE\n         MVC   RECTYPE,=C'HDR2'        INDICATE RECORD TYPE EXPECTED\n         READ  TAPEIN,                 READ HDR2 RECORD                +\n               SF,                                                     +\n               MF=E\n         CHECK TAPEDECB                WAIT FOR COMPLETION\n         CLC   HDRID,RECTYPE           TEST FOR HDR2\n         BNE   BADREC\n         MVC   OUTDEN,DENLABEL         COPY DENSITY FROM LABEL\n         CLC   DEN,DENLABEL            SEE IF IT IS CORRECT\n         BE    PACKBLK\n         MVI   OUTDEN-1,C'>'           CALL ATTENTION TO DIFFERENCE\n         MVI   OUTDEN+1,C'<'\nPACKBLK  PACK  WORK,BLKSIZE            BLOCK SIZE\n         CVB   R1,DWORK                CONVERT TO BINARY\n         ST    R1,BLKSZE               SAVE IN FOOTAGE WORK AREA\n         MVC   VORK,PATTRN\n         ED    VORK,WORK\n         MVC   OUTBLOCK,VORK+3         MOVE BLOCKSIZE\n         PACK  WORK,LRECL              LRECL\n         MVC   VORK,PATTRN\n         ED    VORK,WORK\n         MVC   OUTLRECL,VORK+3         MOVE LRECL\n         MVC   OUTJOBN,JOBNAME         COPY JOBNAME\n         MVC   OUTSTEP,STEPNAME        COPY STEPNAME\n         SPACE\n         LA    R1,OUTRECFM             LOAD THE ADDR OF RECFM\n         MVC   0(1,R1),RECFM           MOVE IN THE FORMAT\n         LA    R1,1(R1)                INCREMENT OUTPUT POINTER\n         CLI   BLOCKING,C'B'           TEST FOR BLOCKED\n         BNE   GBS\n         MVI   0(R1),C'B'              INDICATE BLOCKED\n         LA    R1,1(R1)                INCREMENT OUTPUT POINTER\n         B     GBA\nGBS      CLI   BLOCKING,C'S'           TEST FOR SPANNED OR STANDARD\n         BNE   GBR\n         MVI   0(R1),C'S'              INDICATE SPANNED OR STANDARD\n         LA    R1,1(R1)                INCREMENT OUTPUT POINTER\n         B     GBA\nGBR      CLI   BLOCKING,C'R'           TEST FOR B AND S\n         BNE   GBA\n         MVC   0(2,R1),=C'BS'          INDICATE BS\n         LA    R1,2(R1)                INCREMENT OUTPUT POINTER\nGBA      MVC   0(1,R1),CC              CONTROL CHAR TYPE, IF ANY\n         TITLE 'READ PAST USER HEADER LABELS IF ANY'\n***********************************************************************\n*                                                                     *\n*        READ THROUGH USER LABELS IF ANY ARE PRESENT                  *\n*                                                                     *\n***********************************************************************\n         SPACE\n         MVC   EODAD,=AL3(CNTRL)       RESET EOD ADDRESS\n         SR    R5,R5                   ZERO USER LABEL COUNT\nREADUHL  READ  TAPEIN,                 READ THROUGH USER LABELS        +\n               SF,                                                     +\n               MF=E\n         CHECK TAPEDECB                WAIT FOR COMPLETION\n         LA    R5,1(R5)                COUNT A USER LABEL\n         B     READUHL\n         TITLE 'FORWARD SPACE PAST DATA RECORDS'\n***********************************************************************\n*                                                                     *\n*        FORWARD SPACE PAST DATA RECORDS                              *\n*                                                                     *\n***********************************************************************\n         SPACE\nCNTRL    ST    R5,USERLBLS             SAVE USER LABEL COUNT\n         CVD   R5,DWORK                CONVERT TO DECIMAL\n         MVC   VORK,PATTRN             MOVE IN EDIT PATTERN\n         ED    VORK,WORK               EDIT UL COUNT\n         MVC   OUTUL,VORK+7            COPY TO OUTPUT LINE\n* ------------------------------------------------------------------- *\n*        CNTRL TAPE,           (DON'T) HIGH SPEED PAST THE DATA        +\n               FSM\n*                              BUT RATHER DO READS AND GO THROUGH IT\n*                              AT THE REGULAR SPEED.\n* ------------------------------------------------------------------- *\n         MVC   EODAD,=AL3(READEOF)     RESET EOD ADDRESS\nREADDATA DS    0H                                                   SBG\n         READ  TAPEIN,                 READ ALL THE FILE DATA          +\n               SF,                                                     +\n               MF=E\n         CHECK TAPEDECB                WAIT FOR COMPLETION\n         B     READDATA                LOOP THRU DATA NORMALLY      SBG\n* ------------------------------------------------------------------- *\n* -- WHEN YOU GET TO THE TAPE MARK, YOU'LL GO TO THE EODAD, WHICH IS  *\n* -- THE READEOF ROUTINE.  THIS STUFF WHICH FOLLOWS, SHOULDN'T HAVE   *\n* -- TO BE EXECUTED.                                                  *\n* ------------------------------------------------------------------- *\n         PUT   SYSPRINT,NULINE         PRINT WHAT DATA WE'VE GOT\n         PUT   SYSPRINT,NOTMK          INDICATE NO TAPE MARK\n         B     ABEND                   QUIT\n         TITLE 'COMPLETE OUTPUT LINE AND PRINT'\n***********************************************************************\n*                                                                     *\n*        COMPLETE OUTPUT LINE AND PRINT                               *\n*                                                                     *\n***********************************************************************\n         SPACE\nREADEOF  MVC   EODAD,=AL3(UTM)         RESET EOD ADDRESS\n         MVC   RECTYPE,=C'EOF1'        INDICATE RECORD EXPECTED\n         READ  TAPEIN,                 READ EOF1                       +\n               SF,                                                     +\n               MF=E\n         CHECK TAPEDECB                WAIT FOR COMPLETION\n         CLC   HDRID,RECTYPE           TEST FOR EOF1\n         BE    EOF1REC\n         CLC   HDRID,=C'EOV1'          IT MIGHT BE AN EOV INSTEAD\n         BNE   BADREC\nEOF1REC  PACK  WORK,BLKCOUNT           CONVERT NUMBER OF BLOCKS\n         CVB   R1,DWORK\n         ST    R1,NUMBLKS              SAVE BLOCK COUNT\n         MVC   VORK,PATTRN\n         ED    VORK,WORK\n         MVC   OUTNUMBL,VORK+2         COPY TO OUTPUT LINE\n         $CALL EP=FOOTAGE,             GET FILE AND REEL FOOTAGE       +\n               PARAM=LABELTYP\n         MVC   OUTFFT,FILEFT+2         COPY IN FILE FOOTAGE\n         MVC   OUTRFT,REELFT+2         COPY IN REEL FOOTAGE\n         BXLE  R3,R10,PUTLINE          INCREMENT LINE COUNT AND TEST\n         AP    PAGENO,=P'1'            INCREMENT PAGE NUMBER\n         MVC   PAGE,=X'40202120'       MOVE IN EDIT MASK\n         ED    PAGE,PAGENO             EDIT IN PATE NUMBER\n         PUT   SYSPRINT,HEADER1        PRINT HEADERS\n         PUT   SYSPRINT,HEADER2\n         PUT   SYSPRINT,LINE1\n         PUT   SYSPRINT,HEADER3\n         LA    R3,1                    RESET LINE COUNT\n         MVI   NULINE,C'0'             MAKE IT DOUBLE SPACE FIRST LINE\nPUTLINE  PUT   SYSPRINT,NULINE         WRITE OUT LINE W/ TAPE FILE INFO\n         MVI   NULINE,C' '             BLANK OUT OUTPUT LINE\n         MVC   NULINE+1(132),NULINE\n         LA    R2,1(R2)                INCREMENT FILE COUNTER\n         CLC   DATA(4),=C'EOV1'        IS LABEL EOV1 ?\n         BNE   READEOF2                IF NOT THEN READ NEW RECORD\n         PUT   SYSPRINT,MULTVOL        IF SO THEN TELL THE USER\n         B     EOV                     FORCE END OF VOLUME\nREADEOF2 MVC   EODAD,=AL3(EOF)         RESET EOD ADDRESS\n         TITLE 'PASS THROUGH TRAILER RECORDS'\n***********************************************************************\n*                                                                     *\n*        PASS THROUGH TRAILER RECORDS                                 *\n*                                                                     *\n***********************************************************************\n         SPACE\nREADEND  READ  TAPEIN,                 READ TO TAPE MARK               +\n               SF,                                                     +\n               MF=E\n         CHECK TAPEDECB                WAIT FOR COMPLETION\n         B     READEND\n         SPACE\nEOF      MVC   EODAD,=AL3(EOV)         RESET EOD ADDRESS\n         B     READHDR1                GO TO READ HDR1\n         TITLE 'LEADING TAPE MARK PROCESSING'\n***********************************************************************\n*                                                                     *\n*        LEADING TAPE MARK                                            *\n*                                                                     *\n*        FILE 1 HAS NO RECORDS, TREAT AS NON-LABELLED                 *\n*                                                                     *\n***********************************************************************\n         SPACE\nLTM      MVI   LABELTYP,C'N'           TREAT AS NON-LABELLED\n         MVC   LABEL,=CL12'    LTM     '\n         $CALL EP=TAPEVOL,             GET TAPE SERIAL                 +\n               PARAM=OUTVOL\n         SR    R4,R4                   NO BLOCK SIZE CHANGES\n         SR    R5,R5                   BLOCK COUNT\n         XC    BLKSZE,BLKSZE           BLOCK SIZE\n         B     ENDFILE                 JOIN NON-LABELLED PROCESSING\n         TITLE 'NON-LABELLED TAPE PROCESSING'\n***********************************************************************\n*                                                                     *\n*        NON-LABELLED TAPE PROCESSING                                 *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nNONLABEL MVI   LABELTYP,C'N'           INDICATE NON LABELLED\n         MVC   LABEL,=CL12'NON-LABELLED'\n         $CALL EP=TAPEVOL,             GET VOLUME SERIAL FROM UCB      +\n               PARAM=OUTVOL\n         B     SKIPREC1                RECORD 1 ALREADY READ\n         SPACE\nNEXTFILE READ  TAPEIN,                 READ FIRST RECORD IN FILE       +\n               SF,                                                     +\n               MF=E\n         CHECK TAPEDECB                WAIT FOR COMPLETION\n         LH    R1,DCBLRECL             LOAD BLOCK LENGTH\n         ST    R1,RECLEN\n         SPACE\nSKIPREC1 MVC   BLKSZE,RECLEN           SET UP RECORD LENGTH\n         SR    R4,R4                   ZERO CHANGE COUNTER\n         LA    R5,1                    INITIALIZE BLOCK COUNTER\n         MVC   EODAD,=AL3(ENDFILE)     SET UP EOD ADDRESS\n         MVI   VAR,C'Y'                INDICATE POSSIBLE V RECFM\n         CLC   DCBLRECL,DATA           SEE IF FIRST HALFWORD = LENGTH\n         BE    LOOP\n         MVI   VAR,C'N'                CAN'T BE VARIABLE\nLOOP     READ  TAPEIN,                 READ A BLOCK                    +\n               SF,                                                     +\n               MF=E\n         CHECK TAPEDECB                WAIT FOR COMPLETION\n         LH    R1,DCBLRECL             LOAD RECORD LENGTH\n         ST    R1,RECLEN\n         LA    R5,1(R5)                COUNT RECORD\n         CLC   DCBLRECL,DATA           SEE IF FIRST HALFWORD = LENGTH\n         BE    TESTF\n         MVI   VAR,C'N'                IF NOT, CAN'T BE VARIABLE\nTESTF    MVI   LAST,C'N'\n         CLC   BLKSZE,RECLEN           COMPARE RECORD LENGTH\n         BE    LOOP\n         LA    R4,1(R4)                COUNT A BLOCK LENGTH CHANGE\n         MVI   LAST,C'Y'\n         BH    LOOP\n         MVI   LAST,C'N'\n         MVC   BLKSZE,RECLEN           SAVE NEW MAX BLOCK LENGTH\n         B     LOOP\n         TITLE 'END OF DATA'\n***********************************************************************\n*                                                                     *\n*        END OF DATA - SET UP OUTPUT                                  *\n*                                                                     *\n***********************************************************************\n         SPACE 2\nENDFILE  STH   R2,FILENO               SAVE FILE NUMBER\n         CVD   R2,DWORK                CONVERT FILE NUMBER\n         MVC   VORK,PATTRN             MOVE IN EDIT PATTERN\n         ED    VORK,WORK               EDIT FILE NUMBER\n         MVC   OUTFILE,VORK+4          COPY FILE NUMBER\n         MVC   OUTDEN,DENSITY          COPY DENSITY\n         ST    R5,NUMBLKS              SAVE BLOCK COUNT\n         CVD   R5,DWORK                CONVERT BLOCK COUNT\n         MVC   VORK,PATTRN             MOVE IN EDIT PATTERN\n         ED    VORK,WORK               EDIT BLOCK COUNT\n         MVC   OUTNUMBL,VORK+2         COPY INTO OUTPUT LINE\n         L     R5,BLKSZE               SET UP MAX BLOCK SIZE\n         CVD   R5,DWORK                CONVERT BLOCK SIZE\n         MVC   VORK,PATTRN             MOVE IN EDIT PATTERN\n         ED    VORK,WORK               EDIT BLOCK SIZE\n         MVC   OUTBLOCK,VORK+3         COPY INTO OUTPUT LINE\n         MVI   OUTRECFM,C'V'           SET UP RECFM\n         CLI   VAR,C'Y'                SEE IF VARIABLE OK\n         BE    GETFEET2\n         MVI   OUTRECFM,C'F'           SET UP RECFM\n         C     R4,=F'1'                TEST NUMBER OF BLKSIZE CHANGES\n         BL    GETFEET2                0  - RECFM=F\n         BH    RECFMU                  >1 - RECFM=U\n         CLI   LAST,C'Y'               =1 - WAS LAST RECORD SHORT?\n         BE    GETFEET2                YES - RECFM=F\nRECFMU   MVI   OUTRECFM,C'U'           NO  - RECFM=U\nGETFEET2 $CALL EP=FOOTAGE,             GET FOOTAGE                     +\n               PARAM=LABELTYP\n         MVC   OUTFFT,FILEFT+2         COPY FOOTAGE TO OUTPUT LINE\n         MVC   OUTRFT,REELFT+2\n         TITLE 'PRINT OUTPUT LINE'\n***********************************************************************\n*                                                                     *\n*        PRINT OUTPUT LINE                                            *\n*                                                                     *\n***********************************************************************\n         SPACE\n         BXLE  R3,R10,PUTLINE2         TEST LINE COUNT\n         AP    PAGENO,=P'1'            INCREMENT PAGE NUMBER\n         MVC   PAGE,=X'40202120'       MOVE IN EDIT MASK\n         ED    PAGE,PAGENO             EDIT IN PATE NUMBER\n         PUT   SYSPRINT,HEADER1        PRINT HEADERS\n         PUT   SYSPRINT,HEADER2\n         PUT   SYSPRINT,LINE1\n         PUT   SYSPRINT,HEADER3\n         LA    R3,1                    RESET LINE COUNT\n         MVI   NULINE,C'0'             DOUBLE SPACE FIRST LINE\nPUTLINE2 PUT   SYSPRINT,NULINE         PRINT DATA LINE\n         MVI   NULINE,C' '             BLANK OUT LINE\n         MVC   NULINE+1(132),NULINE\n         LA    R2,1(R2)                INCREMENT FILE NUMBER\n         MVC   EODAD,=AL3(EOV)         RESET EOD ADDRESS\n         B     NEXTFILE\n         TITLE 'END OF TAPE'\n***********************************************************************\n*                                                                     *\n*        END OF TAPE REACHED                                          *\n*                                                                     *\n***********************************************************************\n         SPACE\nEOV      PUT   SYSPRINT,GOODBY\n         CLOSE (TAPE,DISP,SYSPRINT)\n         SR    R15,R15\n         SPACE 2\nRETURN   $RTRN RC=(R15)\n         TITLE 'ERROR ROUTINES'\n***********************************************************************\n*                                                                     *\n*        ERROR ROUTINES                                               *\n*                                                                     *\n***********************************************************************\n         SPACE\n*--------UNEXPECTED TAPE MARK DETECTED\nUTM      MVC   UTMMSG+53(4),RECTYPE    SET UP MESSAGE\n         PUT   SYSPRINT,UTMMSG         PRINT MESSAGE\n         B     ABEND\n         SPACE\n*--------WRONG RECORD READ\nBADREC   MVC   BADRECMG+1(4),RECTYPE   SET UP MESSAGE\n         PUT   SYSPRINT,BADRECMG       PRINT MESSAGE\n         B     ABEND\n         SPACE\n*--------SYNAD ERROR\nSYNAD    SYNADAF  ACSMETH=BSAM\n         MVC   NL+38(78),50(R1)        MOVE MESSAGE TO PRINT AREA\n         SYNADRLS\n         PUT   SYSPRINT,NL\n         SPACE\n*--------TERMINATE WITH DUMP\nABEND    ABEND 1001,DUMP               GET A DUMP\n         SPACE\n*--------DCB ABEND ROUTINE\nDCBABEND TM    3(R1),X'04'             TEST \"IGNORE\" OPTION BIT\n         BZ    HOPE                    IF ZERO THEN ABEND\n         MVI   3(R1),X'04'             IGNORE THE ABEND\nHOPE     BR    R14                     RETURN & HOPE FOR THE BEST\n         TITLE 'DATE CONVERSION SUBROUTINE'\n***********************************************************************\n*                                                                     *\n*              CONVERT JULIAN DATE TO MM/DD/YY FORM                   *\n*              ADAPTED FROM SUBROUTINE GDATE                          *\n*              DATE IS RETURNED AS MM/DD/YYJJJB                       *\n*                                                                     *\n***********************************************************************\n         SPACE\nGDATE    LA    R1,MMDDYY               LOAD OUTPUT AREA ADDRESS\n         USING OUTPUT,R1\n         CP    DATE,=PL3'0'\n         BE    NODATE\n         UNPK  JULIAN,DATE             UNPACK DATE\n         OI    JULDAY+2,X'F0'          SET ZONE\n         MVI   BLANK,C' '              SET BLANK\n         MVC   TARGET,=PL3'0'          00 00 0C\n         MVO   YEAR2,YEAR              00 0Y YC\n         DP    TARGET,=P'4'            0Q QC RC\n         CP    REM,=P'0'               TEST REMAINDER\n         BE    LEAP\n         CP    DAY,=P'59'              TEST FOR BEFORE FEB 29\n         BNH   LEAP\n         AP    DAY,=P'1'               ADJUST TO LEAP YEAR\nLEAP     LA    R15,TABLE               LOAD TABLE ADDRESS\n         USING CALENDAR,R15            SET BASE ADDRESS\n         ZAP   MONTHP,=P'1'            SET MONTH TO 1\nLOOP1    CP    DAY,DAYS                SEE IF MORE DAYS THAN THIS MNTH\n         BNH   DATERTRN\n         SP    DAY,DAYS                SUBTRACT DAYS IN THIS MONTH\n         AP    MONTHP,=P'1'            ADD 1 TO MONTH\n         LA    R15,LEN(R15)            INCREMENT TO NEXT MONTH\n         B     LOOP1\nDATERTRN UNPK  MO,MONTHP               UNPACK MONTH\n         OI    MO+1,X'F0'              SET ZONE\n         UNPK  DA,DAY                  UNPACK DAY\n         OI    DA+1,X'F0'              SET ZONE\n         MVI   SLASH1,C'/'             SET SLASH\n         MVI   SLASH2,C'/'             SET SLASH\n         BR    R14                     RETURN\nNODATE   MVC   MMDDYY,=CL12' '         BLANK DATE FIELD\n         BR    R14                     RETURN\n         SPACE\n         DROP  R1,R15\n         TITLE 'DATA AREA'\n***********************************************************************\n*                                                                     *\n*        DATA AREA                                                    *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LTORG\n         SPACE 3\nSAVE     DS    18F                     SAVE AREA\nPATTRN   DC    XL8'4020202020202120'\n         DS    0D\nDWORK    DC    F'0'\nWORK     DS    1F\nVORK     DS    1D\nRECLEN   DS    F                       RECORD LENGTH\nRECTYPE  DS    CL4                     RECORD TYPE TO BE READ\nDENTABLE DC    C' 200'                 0\n         DC    C' 556'                 1\n         DC    C' 800'                 2\n         DC    C'1600'                 3\n         DC    C'6250'                 4\nLAST     DS    C\nVAR      DS    C                       Y IF POSSIBLE RECFM = V\nPAGENO   DC    PL2'0'                  PAGE NUMBER\n         SPACE\nTAPEIN   READ  TAPEDECB,               READ A TAPE RECORD              +\n               SF,                                                     +\n               TAPE,                                                   +\n               DATA,                                                   +\n               'S',                                                    +\n               MF=L\n         EJECT\n*--------FOLLOWING IS A WORK AREA FOR FOOTAGE ROUTINE\nLABELTYP DS    C                       LABEL TYPE\nDENSITY  DS    C                       DENSITY CODE\nFILENO   DS    H                       FILE SEQUENCE NUMBER IN BINARY\nBLKSZE   DS    F                       BLOCK SIZE IN BINARY\nNUMBLKS  DS    F                       NUMBER OF BLOCKS IN BINARY\nUSERLBLS DS    F                       USER LABELS IN BINARY\nCUMTOTAL DS    F                       CUMULATIVE REEL TOTAL\nFILEFT   DS    CL10                    FILE FOOTAGE IN EBCDIC\nREELFT   DS    CL10                    REEL FOOTAGE IN EBCDIC\n*--------END OF FOOTAGE ROUTINE PARAMETERS\n         SPACE 3\n*--------MESSAGES\n         SPACE\nMULTVOL  DC    CL133'0       THIS DATASET IS CONTINUED ON ANOTHER TAPE'\n         SPACE\nHEADER1  DC    CL133'1                                            SYSTE+\n               M SUPPORT UTILITIES - TAPE MAP PROGRAM'\n         SPACE\nHEADER2  DC    CL133'0VOLUME SERIAL  ---DENSITY--  -LABEL TYPE-  -OWNER+\n                ID-  -------------------DATE-------------------'\n         SPACE\nLINE1    DC    CL133' '\n         ORG   LINE1\n         DC    CL4' '\nOUTVOL   DC    CL6' '                  VOLUME SERIAL\n         DC    CL6' '\nDEN      DC    C' '                    DENSITY CODE\n         DC    C' ('\nBPI      DC    CL4' '                  BITS PER INCH\n         DC    C' BPI)  '\nLABEL    DC    CL12' '\n         DC    CL2' '\nOUTOWNER DC    CL10' '                 OWNER ID\n         DC    CL2' '\nOUTDATE  DC    0CL42' '                CURRENT DATE AND TIME\nTTL1DATE DC    CL22' '\n         DC    CL2' '\nTTL1DAY  DC    CL9' '\nTTL1TIME DC    CL9' '\n         DC    C'               PAGE'\nPAGE     DC    CL4' '                  PAGE NUMBER\n         ORG\n         SPACE 2\nHEADER3  DC    CL133'0 FILE  --DATA SET NAME-- RECFM LRECL BLKSIZE BLOC+\n               KS UL DEN   F. FT.  R. FT. CR. DATE EX. DATE JOBNAME  ST+\n               EPNAME SEC VSEQ'\n         SPACE 2\nNULINE   DC    CL133' '\n         ORG   NULINE\n         DC    C'  '                   CARRIAGE CONTROL\nOUTFILE  DC    CL4' '                  FILE SEQUENCE NUMBER\n         DC    C'  '\nOUTDSN   DC    CL17' '                 DATA SET NAME\n         DC    CL2' '\nOUTRECFM DC    CL3' '                  RECORD FORMAT\n         DC    CL2' '\nOUTLRECL DC    CL5' '                  LOGICAL RECORD LENGTH\n         DC    CL2' '\nOUTBLOCK DC    CL5' '                  BLOCK SIZE\n         DC    CL2' '\nOUTNUMBL DC    CL6' '                  NUMBER OF BLOCKS\n         DC    CL2' '\nOUTUL    DC    C' '                    NUMBER OF USER LABELS\n         DC    CL2' '\nOUTDEN   DC    C' '                    DENSITY FROM LABEL\n         DC    CL2' '\nOUTFFT   DC    CL8' '                  FILE FOOTAGE\n*        DC    C' '\nOUTRFT   DC    CL8' '                  REEL FOOTAGE\n         DC    C' '\nOUTCRDAT DC    CL8' '                  CREATION DATE\n         DC    C' '\nOUTEXDAT DC    CL8' '                  EXPIRATION DATE\n         DC    C' '\nOUTJOBN  DC    CL8' '                  JOB NAME\n         DC    C' '\nOUTSTEP  DC    CL8' '                  STEP NAME\n         DC    CL2' '\nOUTSEC   DC    C' '                    SECURITY INDICATOR\n         DC    CL2' '\nOUTVSEQN DC    CL4' '                  VOUME SEQUENCE NUMBER\n         ORG\n         SPACE 2\nGOODBY   DC    CL133'-       END OF UTILITY - TAPE IS MAPPED'\nNOTAPE   DC    CL133'-UNABLE TO OPEN TAPE DD STATEMENT.'\nNL       DC    CL133'-PERMANENT I/O ERROR READING LABELS:'\nNOTMK    DC    CL133'0TAPE MARK EXPECTED, NOT FOUND'\nUTMMSG   DC    CL133'-UNEXPECTED TAPE MARK ENCOUNTERED ATTEMPTING TO RE+\n               AD ____ RECORD.'\nBADRECMG DC    CL133'-____ RECORD TYPE EXPECTED, NOT FOUND'\n         EJECT\nTAPE     DCB   DDNAME=TAPE,            DDNAME                          +\n               DSORG=PS,               DATA SET ORGANIZATION           +\n               MACRF=RC,               MACRO FORM                      +\n               EODAD=LTM,              END OF DATA ADDRESS             +\n               EXLST=RANOFF,           EXIT LIST ADDRESS               +\n               RECFM=U,                RECORD FORMAT                   +\n               BLKSIZE=32760,          MAXIMUM BLOCK SIZE              +\n               DEVD=TA,                TAPE DATA SET                   +\n               SYNAD=SYNAD,            SYNAD ROUTINE ADDRESS           +\n               BUFNO=1                 ONE BUFFER\n         SPACE\nEODAD    EQU   TAPE+33,3               END OF DATA ADDRESS\nDCBLRECL EQU   TAPE+82,2               RECORD LENGTH\n         SPACE\nRANOFF   DS    0F                      FULL WORD ALIGNMENT FOR EXLST\n         DC    X'11'                   CODE FOR DCB ABEND\n         DC    AL3(DCBABEND)           ADDRESS OF OFF-THE-END ROUTINE\n         DC    X'80000000'             END OF EXLST\n         EJECT\nSYSPRINT DCB   DDNAME=SYSPRINT,                                        +\n               DSORG=PS,                                               +\n               MACRF=PM,                                               +\n               RECFM=FBA,                                              +\n               LRECL=133,                                              +\n               BLKSIZE=133\n         EJECT\n***********************************************************************\n*                                                                     *\n*        CALENDAR TABLE - NUMBER OF DAYS IN EACH MONTH (LEAP YEAR)    *\n*                                                                     *\n***********************************************************************\n         SPACE\nTABLE    DC    PL2'31'                  JANUARY\n         DC    PL2'29'                  FEBRUARY\n         DC    PL2'31'                  MARCH\n         DC    PL2'30'                  APRIL\n         DC    PL2'31'                  MAY\n         DC    PL2'30'                  JUNE\n         DC    PL2'31'                  JULY\n         DC    PL2'31'                  AUGUST\n         DC    PL2'30'                  SEPTEMBER\n         DC    PL2'31'                  OCTOBER\n         DC    PL2'30'                  NOVEMBER\n         DC    PL2'31'                  DECEMBER\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        WORK AREA                                                    *\n*                                                                     *\n***********************************************************************\n         SPACE\nDATEWORK DS    0F                       DATE\n         DS    C                        FILLER\nDATE     DS    0CL3                     JULIAN DATE - PACKED DECIMAL\nYEAR     DS    C                        YEAR - NO SIGN\nDAY      DS    CL2                      DD DS\nMONTHP   DS    PL2                      0M MS\nTARGET   DS    0CL3                     00 0Y YS  -  0Q QS RS\n         DS    C                        0Q         PART OF QUOTIENT\nYEAR2    DS    0PL2                     0Y YS      YEAR AND SIGN\n         DS    C                        QS         QUOTIENT AND SIGN\nREM      DS    C                        RS         REMAINDER AND SIGN\n         DS    0F                       FULLWORD ALIGNMENT\nMMDDYY   DC    CL12' '                  WORK AREA FOR FINAL DATE\n         EJECT\nDATA     DS    CL32760\n         SPACE 2\n         ORG   DATA\nVOLID    DS    CL4                     VOL1\nVOLSER   DS    CL6                     VOLUME SERIAL\n         DS    CL31\nVOLOWNER DS    CL10                    OWNER ID\n         SPACE 2\n         ORG   DATA\nHDRID    DS    CL4                     HDR1, EOF1, OR EOV1\nDSNAME   DS    CL17                    DATA SET NAME\n         DS    CL6                     DATA SET SERIAL NUMBER\nVOLSEQ   DS    CL4                     VOLUME SEQUENCE NUMBER\nDSSEQ    DS    CL4                     DATA SET SEQUENCE NUMBER\n         DS    CL4                     GENERATION NUMBER\n         DS    CL2                     VERSION NUMBER\nCRDATE   DS    CL6                     CREATION DATE\nEXDATE   DS    CL6                     EXPIRATION DATE\nSECURITY DS    CL1                     SECURITY CODE\nBLKCOUNT DS    CL6                     BLOCK COUNT\n         DS    CL13                    SYSTEM CODE\n         DS    CL7                     RESERVED\n         SPACE 2\n         ORG   DATA\n         DS    CL4                     HDR2, EOF2, OR EOV2\nRECFM    DS    CL1                     RECFM\nBLKSIZE  DS    CL5                     BLKSIZE\nLRECL    DS    CL5                     LRECL\nDENLABEL DS    CL1                     DEN\n         DS    CL1                     DATA SET POSITION\nJOBNAME  DS    CL8                     JOBNAME\n         DS    CL1                     /\nSTEPNAME DS    CL8                     STEPNAME\nTECH     DS    CL2                     RECORDING TECHNIQUE\nCC       DS    CL1                     CONTROL CHARACTER\n         DS    CL1                     RESERVED\nBLOCKING DS    CL1                     BLOCK ATTRIBUTE\n         DS    CL41                    RESERVED\n         EJECT\n***********************************************************************\n*                                                                     *\n*        CALENDAR TABLE DSECT                                         *\n*                                                                     *\n***********************************************************************\n         SPACE\nCALENDAR DSECT\nDAYS     DS    PL2                      DAYS IN MONTH\nLEN      EQU   *-DAYS                   LENGTH OF ENTRY\n         SPACE 2\n***********************************************************************\n*                                                                     *\n*        OUTPUT AREA DSECT                                            *\n*                                                                     *\n***********************************************************************\n         SPACE\nOUTPUT   DSECT                          OUTPUT DSECT\nMO       DS    CL2                      MONTH\nSLASH1   DS    C                        SLASH\nDA       DS    CL2                      DAY\nSLASH2   DS    C                        SLASH\nJULIAN   DS    0CL5                     JULIAN DATE - EBCDIC\nYR       DS    CL2                      YEAR\nJULDAY   DS    CL3                      JULIAN DAY\nBLANK    DS    C                        BLANK\n         TITLE 'TAPEMAP - TAPE MAPPING PROGRAM - SUBROUTINE FOOTAGE'\n***********************************************************************\n*                                                                     *\n* NAME             FOOTAGE                                            *\n*                                                                     *\n* FUNCTION         CALCULATE FOOTAGE FOR A FILE AND ACCUMULATE        *\n*                  REEL FOOTAGE.                                      *\n*                                                                     *\n* DESCRIPTION      FOOTAGE IS CALLED FROM THE MAPPING ROUTINES AND    *\n*                  IS PROVIDED WITH A WORK AREA.  THE FOOTAGE FOR     *\n*                  THE FILE (BASED ON BLKSIZE, NUMBER OF BLOCKS,      *\n*                  AND TAPE DENSITY IS CALCULATED AND MOVED INTO      *\n*                  THE OUTPUT AREA.  TOTAL REEL LENGTH IS ALSO        *\n*                  CALCULATED AND MOVED INTO THE OUTPUT AREA.         *\n*                                                                     *\n* PARAMETERS       FOOTAGE IS PASSED THE ADDRESS OF A WORK AREA       *\n*                  WHICH CONTAINS INPUT DATA AND IS UPDATED BY        *\n*                  FOOTAGE.  THE WORK AREA INCLUDES -                 *\n*                                                                     *\n*                  TAPE LABEL TYPE INDICATOR (STANDARD, NON-LABELLED) *\n*                  DENSITY CODE                                       *\n*                  RECORD LENGTH                                      *\n*                  NUMBER OF RECORDS                                  *\n*                  NUMBER OF USER LABELS                              *\n*                  CUMULATIVE REEL COUNT   (UPDATED)                  *\n*                  FILE FOOTAGE IN EBCDIC  (UPDATED)                  *\n*                  REEL FOOTAGE IN EBCDIC  (UPDATED)                  *\n*                                                                     *\n* REGISTER USAGE   R0  - LINKAGE                                      *\n*                  R1  - LINKAGE                                      *\n*                  R2  - POINTER TO DENSITY CONSTANTS                 *\n*                  R3  - NOT USED                                     *\n*                  R4  - FOOTAGE CALCULATION WORK                     *\n*                  R5  - FOOTAGE CALCULATION WORK                     *\n*                  R6  - NOT USED                                     *\n*                  R7  - NOT USED                                     *\n*                  R8  - NOT USED                                     *\n*                  R9  - NOT USED                                     *\n*                  R10 - NOT USED                                     *\n*                  R11 - WORK AREA BASE                               *\n*                  R12 - PROGRAM BASE                                 *\n*                  R13 - SAVE AREA                                    *\n*                  R14 - LINKAGE                                      *\n*                  R15 - LINKAGE                                      *\n*                                                                     *\n***********************************************************************\n         TITLE 'ENTRY CODING'\nFOOTAGE  $ENTER BASE=R12\n         L     R11,0(R1)               LOAD WORK AREA ADDRESS\n         USING LABELTYP,R11            WORK AREA ADDRESSABILITY\n         B     CALC6250        ONLY CALCULATE AS 6250 FOR ALL TAPES.\n         CLI   DEN,C'4'                TEST FOR 6250 BPI\n         BE    CALC6250\n         CLI   DEN,C'3'                TEST FOR 1600 BPI\n         BE    CALC1600\n         CLI   DEN,C'2'                TEST FOR 800 BPI\n         BNE   FOOTRTRN\n         TITLE 'FOOTAGE CALCULATIONS FOR 800 BPI, NRZI'\n***********************************************************************\n*                                                                     *\n*        FOOTAGE CALCULATIONS FOR 800 BPI, NRZI                       *\n*                                                                     *\n*        (BYTES/800 + .6IN)*BLOCKS = (BYTES+480)*BLOCKS/800           *\n*                                                                     *\n*        LABEL = ((UL+2)*80/800 + (UL+2)(.6IN))*2                     *\n*              = (UL+2)*(1120)/800                                    *\n*                                                                     *\n*        VOLUME LABEL = 80/800 + .6IN = 560/800                       *\n*                                                                     *\n*        FULL REEL COUNT = 13,440,000                                 *\n*                                                                     *\n***********************************************************************\n         SPACE\n         SR    R4,R4                   CLEAR FOR DIVIDE\n         L     R5,BLKSZE               LOAD BLOCKSIZE\n         A     R5,=F'480'              ADD 480 FOR .6 IN IBG\n         M     R4,NUMBLKS              MULTIPLY BY BLOCKSIZE\n         CLI   LABELTYP,C'S'           TEST FOR STANDARD LABELS\n         BNE   SAVE800\n         L     R1,USERLBLS             LOAD USER LABEL COUNT\n         LA    R1,2(R1)                ADD 2 FOR STANDARD LABELS\n         MH    R1,=H'1120'             MULTIPLY BY 1120\n         AR    R5,R1                   ADD TO COUNTER\n         CLC   =H'1',FILENO            TEST FOR FIRST FILE\n         BNE   SAVE800\n         A     R5,=F'560'              ADD 560 FOR LABEL\nSAVE800  LA    R2,DATA800              ADDRESS OF 800 BPI CONSTANTS\n         B     FOOTEDIT\n         TITLE 'FOOTAGE CALCULATIONS FOR 1600 BPI, PE'\n***********************************************************************\n*                                                                     *\n*        FOOTAGE CALCULATIONS FOR 1600 BPI, PE                        *\n*                                                                     *\n*        ((BYTES+82)/1600 + .6IN)*BLOCKS = (BYTES+1042)*BLOCKS/1600   *\n*                                                                     *\n*        LABEL = ((UL+2)*162/1600 + (UL+2)(.6IN))*2                   *\n*              = (UL+2)*(2244)/1600                                   *\n*                                                                     *\n*        VOLUME LABEL = (80+82)/1600 + .6IN = 1122/1600               *\n*                                                                     *\n*        FULL REEL COUNT = 26,880,000                                 *\n*                                                                     *\n***********************************************************************\n         SPACE\nCALC1600 SR    R4,R4                   CLEAR FOR DIVIDE\n         L     R5,BLKSZE               LOAD BLOCKSIZE\n         A     R5,=F'1042'             ADD 1042 FOR .6 IN IBG\n         M     R4,NUMBLKS              MULTIPLY BY BLOCKSIZE\n         CLI   LABELTYP,C'S'           TEST FOR STANDARD LABELS\n         BNE   SAVE1600\n         L     R1,USERLBLS             LOAD USER LABEL COUNT\n         LA    R1,2(R1)                ADD 2 FOR STANDARD LABELS\n         MH    R1,=H'2244'             MULTIPLY BY 2244\n         AR    R5,R1                   ADD TO COUNTER\n         CLC   =H'1',FILENO            TEST FOR FIRST FILE\n         BNE   SAVE1600\n         A     R5,=F'1122'             ADD 1122 FOR LABEL\nSAVE1600 LA    R2,DATA1600             ADDRESS OF 1600 BPI CONSTANTS\n         B     FOOTEDIT\n         TITLE 'FOOTAGE CALCULATIONS FOR 6250 BPI, GCR'\n***********************************************************************\n*                                                                     *\n*        FOOTAGE CALCULATIONS FOR 6250 BPI, GCR                       *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*        FULL REEL COUNT = 260,409,600                                *\n*                                                                     *\n***********************************************************************\n         SPACE\nCALC6250 SR    R4,R4                   CLEAR FOR DIVIDE\n         L     R5,BLKSZE               LOAD BLOCKSIZE\n         D     R4,=F'1106'             DIVIDE BY 1106\n         LR    R1,R4                   SAVE REMAINDER\n         M     R4,=F'1600'             FOR EVERY 1106, 1580 + 20 RESYNC\n         SR    R0,R0\n         D     R0,=F'7'                7 BYTE GROUPS\n         LA    R1,1(R1)                ADD 1 TO QUOTIENT\n         MH    R1,=H'10'               FOR EVERY 7, YOU GET 10\n         AR    R5,R1                   ADD IT TO TOTAL\n         A     R5,=F'2898'             ADD 2898 FOR IBG AND CONTROL\n         M     R4,NUMBLKS              MULTIPLY BY NUMBER OF BLOCKS\n         CLI   LABELTYP,C'S'           TEST FOR STANDARD LABELS\n         BNE   SAVE6250\n         L     R1,USERLBLS             LOAD USER LABEL COUNT\n         LA    R1,2(R1)                ADD 2 FOR STANDARD LABELS\n         MH    R1,=H'6036'             MULTIPLY BY 6036\n         AR    R5,R1                   ADD TO TOTAL\n         CLC   =H'1',FILENO            TEST FOR FIRST FILE\n         BNE   SAVE6250\n         A     R5,=F'3018'             ADD 3018 FOR VOL LABEL\nSAVE6250 LA    R2,DATA6250             ADDRESS OF 6250 BPI CONSTANTS\n         TITLE 'CONVERT THE BIT COUNTS TO FEET AND EDIT'\n***********************************************************************\n*                                                                     *\n*        CONVERT THE BIT COUNTS TO FEET AND EDIT                      *\n*                                                                     *\n***********************************************************************\n         SPACE\nFOOTEDIT LR    R1,R5                   COPY\n         A     R1,CUMTOTAL             ADD PREVIOUS TOTAL\n         ST    R1,CUMTOTAL             STORE NEW TOTAL\n         A     R5,0(R2)                ROUND OFF\n         D     R4,4(R2)                DIVIDE BY (BPI/10)*12\n         CVD   R5,PACKDEC              CONVERT TO DECIMAL\n         MVC   FILEFT,=X'40402020202021204B20'  MOVE IN MASK\n         ED    FILEFT,PACKDEC+4        EDIT IT\n         LR    R5,R1                   COPY CUMULATIVE TOTAL\n         SR    R4,R4\n         A     R5,0(R2)                ROUND OFF\n         D     R4,4(R2)                DIVIDE BY (BPI/10)*12\n         CVD   R5,PACKDEC              CONVERT TO DECIMAL\n         MVC   REELFT,=X'40402020202021204B20'  MOVE IN MASK\n         ED    REELFT,PACKDEC+4\nFOOTRTRN $RTRN RC=0                    RETURN\n         TITLE 'DATA AREAS'\n***********************************************************************\n*                                                                     *\n*        DATA AREAS                                                   *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LTORG\n         SPACE\nDATA800  DC    F'480'\n         DC    F'960'                  800/10*12 (BITS PER FOOT/10)\nDATA1600 DC    F'960'\n         DC    F'1920'                 1600/10*12 (BITS PER FOOT/10)\nDATA6250 DC    F'5425'\n         DC    F'10850'                9042/10*12 (BITS PER FOOT/10)\nPACKDEC  DS    D\n         TITLE 'TAPEVOL SUBROUTINE - GET VOLUME SERIAL'\n***********************************************************************\n*                                                                     *\n* NAME         TAPEVOL                                                *\n*                                                                     *\n* FUNCTION     OBTAIN VOLUME SERIAL OF TAPE TO BE MAPPED.             *\n*                                                                     *\n* DESCRIPTION  OBTAIN THE VOLUME SERIAL FROM THE UCB.  EXTRACT IS     *\n*              USED TO OBTAIN THE TIOT ADDRESS.  THE TIOT IS          *\n*              SEARCHED TO FIND THE ENTRY FOR THE TAPE DDNAME.        *\n*              THE TIOT ENTRY IS USED TO LOCATE THE UCB, AND THE      *\n*              VOLUME SERIAL IS EXTRACTED FROM THE UCB.               *\n*                                                                     *\n* PARAMETERS   VOLSER   - THE ADDRESS OF A 6 BYTE FIELD TO RECEIVE    *\n*                         THE VOLUME SERIAL.                          *\n*                                                                     *\n* FPL MACROS USED - SEE COMMENTS IN MAINLINE ROUTINE                  *\n*                                                                     *\n* IBM MACROS USED - SEE COMMENTS IN MAINLINE ROUTINE                  *\n*                                                                     *\n* AUTHOR       ED VANCE  (UMSL)                                       *\n*                                                                     *\n* MODIFICATIONS                                                       *\n*              ERIC STRATMANN, LSU DEPT OF EXP. STAT.    08/15/76     *\n*              GORDON WEST, FLORIDA POWER & LIGHT CO.    12/01/77     *\n*                   ADDED COMMENTS                                    *\n*                   ADDED FPL MACROS                                  *\n*                   ADDED REGISTER NOTATION                           *\n*                                                                     *\n* REGISTER USAGE                                                      *\n*                                                                     *\n*              R0  - LINKAGE                                          *\n*              R1  - LINKAGE                                          *\n*              R2  - PARM ADDRESS                                     *\n*              R3  - TIOT/UCB ENTRY POINTER                           *\n*              R4  - LENGTH OF TIOT DD ENTRY                          *\n*              R5  - NOT USED                                         *\n*              R6  - NOT USED                                         *\n*              R7  - NOT USED                                         *\n*              R8  - NOT USED                                         *\n*              R9  - NOT USED                                         *\n*              R10 - NOT USED                                         *\n*              R11 - NOT USED                                         *\n*              R12 - PROGRAM BASE                                     *\n*              R13 - SAVE AREA                                        *\n*              R14 - LINKAGE                                          *\n*              R15 - LINKAGE                                          *\n*                                                                     *\n***********************************************************************\n         TITLE 'ENTRY LINKAGE'\nTAPEVOL  $ENTER BASE=R12\n         SPACE\n         L     R2,0(R1)               LOAD PARAMETER ADDRESS\n         SPACE\n*--------GET TIOT ADDRESS\n         EXTRACT ADRTIOT,FIELDS=(TIOT)\n         L     R3,ADRTIOT              GET TIOT ADDRESS\n         LA    R3,24(R3)               INCREMENT TO FIRST DD ENTRY\n         SR    R4,R4                   ZERO R4 FOR IC\n*--------FIND TIOT ENTRY FOR TAPE DDNAME\nTIOTLOOP IC    R4,0(R3)                INSERT LENGTH OF DD ENTRY\n         LTR   R4,R4                   END OF LIST ?\n         BZ    NOTFOUND                DDNAME NOT THERE\n         CLC   =CL8'TAPE',4(R3)        ELSE IS DDNAME = TAPE ?\n         BE    GETUCB                  IF SO THEN GET UCB\n         AR    R3,R4                   ELSE INCREMENT TO NEXT DD ENTRY\n         B     TIOTLOOP                EXAMINE NEXT DD ENTRY\n*--------GET UCB ADDRESS AND SERIAL FROM UCB\nGETUCB   LA    R3,16(R3)               INCREMENT TO UCB ADDRESS FIELD\n         L     R3,0(R3)                GET UCB ADDRESS INTO R3\n         MVC   0(6,R2),28(R3)          MOVE VOLSER TO PARAMETER\n         $RTRN RC=0                    NORMAL RETURN\n         SPACE\nNOTFOUND $RTRN RC=4                    ERROR RETURN - DDNAME NOT FOUND\n         SPACE 3\n         LTORG\n         SPACE\nADRTIOT  DS    A                       TIOT ADDRESS FROM EXTRACT\n         TITLE 'TAPE MAPPING PROGRAM - SUBROUTINE DENTAPE - GET TAPE DE+\n               NSITY'\n***********************************************************************\n*                                                                     *\n* NAME         DENTAPE - SUBROUTINE OF TAPEMAP                        *\n*                                                                     *\n* FUNCTION     DETERMINE TAPE DENSITY                                 *\n*                                                                     *\n* DESCRIPTION  READ AN 80 BYTE RECORD FROM THE INPUT TAPE (DATA       *\n*              TRANSFER IS SUPPRESSED).  DETERMINE TAPE DENSITY       *\n*              BY CHECKING SENSE INFORMATION.  DENSITY INDICATED      *\n*              IN DCB IS NOT ACCURATE.                                *\n*                                                                     *\n*              A RETURN CODE OF 0 INDICATES THAT THE DENSITY WAS      *\n*              OBTAINED.  A RETURN CODE OF 16 INDICATES THAT          *\n*              THE TAPE DD FAILED TO OPEN.                            *\n*                                                                     *\n* PARAMETERS   A ONE BYTE FIELD TO CONTAIN THE DENSITY                *\n*              INDICATOR -                                            *\n*                   2 -  800 BPI (NRZI)                               *\n*                   3 - 1600 BPI (PE)                                 *\n*                   4 - 6250 BPI (GCR)                                *\n*                                                                     *\n* FPL MACROS USED - SEE COMMENTS IN MAINLINE                          *\n*                                                                     *\n* IBM MACROS USED - SEE COMMENTS IN MAINLINE                          *\n*                                                                     *\n* AUTHOR       UNKNOWN.  PROGRAM RECEIVED AS PART OF TAPEMAP          *\n*              PROGRAM FROM LSU (FROM UMSL).                          *\n*                                                                     *\n* MODIFICATIONS                                                       *\n*              GORDON P. WEST, FLORIDA POWER & LIGHT CO.   12/01/77   *\n*                   ADDED COMMENTS                                    *\n*                   ADDED FPL MACROS                                  *\n*                   ADDED 6250 BPI CHECK                              *\n*                   ADDED CHECK FOR SUCCESSFUL OPEN                   *\n*                   ADDED SET FILE TO 1 IF NOT SPECIFIED              *\n*                   ADDED SET TO BLP IF NOT SPECIFIED                 *\n*                                                                     *\n* REGISTER USAGE                                                      *\n*                                                                     *\n*              R0  - LINKAGE                                          *\n*              R1  - LINKAGE                                          *\n*              R2  - INITIAL FILE NUMBER                              *\n*              R3  - NOT USED                                         *\n*              R4  - NOT USED                                         *\n*              R5  - NOT USED                                         *\n*              R6  - NOT USED                                         *\n*              R7  - NOT USED                                         *\n*              R8  - NOT USED                                         *\n*              R9  - NOT USED                                         *\n*              R10 - NOT USED                                         *\n*              R11 - PARM LIST                                        *\n*              R12 - PROGRAM BASE                                     *\n*              R13 - SAVE AREA                                        *\n*              R14 - LINKAGE                                          *\n*              R15 - LINKAGE                                          *\n*                                                                     *\n***********************************************************************\n         TITLE 'ENTRY LINKAGE'\nDENTAPE  $ENTER BASE=R12\n         SPACE\n         L     R11,0(R1)               LOAD DENSITY ADDRESS\n         L     R2,4(R1)                LOAD INITIAL FILE NUMBER ADDRESS\n         SPACE\n***********************************************************************\n*                                                                     *\n*        SET FILE NUMBER TO 1 IF NOT SPECIFIED                        *\n*                                                                     *\n***********************************************************************\n         SPACE\n         RDJFCB TAPEDEN                READ JFCB\n         LH    R1,JFCBFLSQ             LOAD FILE NUMBER\n         LTR   R1,R1\n         BNZ   STFILENO\n         LA    R1,1                    SET FILE TO 1\n         STH   R1,JFCBFLSQ             STORE IN JFCB\n         OI    JFCBMASK,X'80'          REWRITE JFCB AT OPEN\nSTFILENO STH   R1,0(R2)                RETURN INITIAL FILE NUMBER\n         SPACE\n***********************************************************************\n*                                                                     *\n*        SET LABEL TYPE TO BLP IF NOT SPECIFIED                       *\n*                                                                     *\n*        ***** NOTE *****   IN MVS, APF AUTHORIZATION IS REQUIRED TO  *\n*                           CHANGE THE LABEL TYPE TO BLP.  IF BLP IS  *\n*                           SPECIFIED IN JCL, JFCB WILL NOT BE        *\n*                           CHANGED.                                  *\n*                                                                     *\n***********************************************************************\n         SPACE\n         TM    JFCBLTYP,JFCBLP         TEST FOR BLP\n         BO    OPENTAP\n         MVI   JFCBLTYP,JFCBLP         SET LABEL PROCESSING TO BLP\n         OI    JFCBMASK,X'80'          REWRITE JFCB AT OPEN\nOPENTAP  OPEN  (TAPEDEN,INPUT),TYPE=J  OPEN TAPE\n         TM    TAPEDEN+48,X'10'        TEST FOR SUCCESSFUL OPEN\n         BO    EXCP\n         LA    R15,16                  SET RETURN CODE\n         B     DENRTRN\nEXCP     EXCP  TAPEIOB                 EXECUTE READ\n         WAIT  ECB=TAPEECB             WAIT FOR COMPLETION OF READ\n         SPACE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  SBG\n*   WE DON'T HAVE LOW-DENSITY TAPES ANY MORE.  JUST PRETEND THEY'RE\n*   ALL 6250 BPI, INCLUDING CARTRIDGE.\n         MVI   0(R11),C'4'             SET DENSITY TO 4 FOR ALL  SBG\n         B     EXIT                    AND GET OUT               SBG\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  SBG\n         MVI   0(R11),C'3'             SET DENSITY TO 3\n         TM    SENSINFO+3,X'04'        TEST FOR PE MODE\n         BNZ   EXIT\n         MVI   0(R11),C'2'             SET DENSITY TO 2\n         L     R1,TAPEDEN+44           LOAD DEB ADDRESS\n         L     R1,32(R1)               LOAD UCB ADDRESS\n         CLI   19(R1),X'01'            TEST FOR 2400 SERIES DRIVE\n         BE    EXIT\n         TM    SENSINFO+6,X'08'        TEST FOR 3400-3, -5, OR -7\n         BZ    EXIT\n         MVI   0(R11),C'4'             SET DENSITY TO 4\nEXIT     CLOSE (TAPEDEN,REREAD)        CLOSE TAPE\n         SR    R15,R15                 ZERO RETURN CODE\nDENRTRN  $RTRN RC=(R15)                RETURN\n         TITLE 'DATA AREAS'\n***********************************************************************\n*                                                                     *\n*        DATA AREAS                                                   *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LTORG\n         SPACE\nSENSINFO DC    24X'00'                 SENSE INFORMATION\n         SPACE 2\nCHPGM    CCW   X'02',0,X'70',80        READ 80 BYTES (SUPPRESS DATA)\n         CCW   X'04',SENSINFO,X'20',24 SENSE\n         SPACE\nTAPEECB  DC    F'0'                    EVENT CONTROL BLOCK\n         SPACE\nTAPEIOB  DS    0F                      IOB MUST BE ON FULL-WORD BDRY\n         DC    X'02'                   FLAGS 1\n         DC    X'00'                   FLAGS 2\n         DC    X'0000'                 FIRST TWO SENSE BYTES\n         DC    X'00'                   ECB CODE\n         DC    AL3(TAPEECB)            ADDRESS OF ECB\n         DC    X'00'                   FLAGS 3\n         DC    7X'00'                  CHANNEL STATUS WORD\n         DC    X'00'                   SIO CODE\n         DC    AL3(CHPGM)              CHANNEL PGM ADDR\n         DC    X'00'                   RESERVED\n         DC    AL3(TAPEDEN)            DCB ADDR\n         DC    X'00'                   REPOSITION MODIFIER\n         DC    X'000000'               RESTART ADDRESS\n         DC    X'0000'                 BLOCK COUNT INCREMENT\n         DC    X'0000'                 ERROR COUNTS\n         EJECT\nTAPEDEN  DCB   DDNAME=TAPE,                                            +\n               MACRF=E,                                                +\n               DSORG=PS,                                               +\n               IOBAD=TAPEIOB,                                          +\n               DEVD=TA,                                                +\n               EXLST=TAPEEXIT\n         SPACE\nTAPEEXIT DC    X'87',AL3(JFCB)\n         SPACE\nJFCB     DS    0F\n         DS    XL176\nJFCBFLSQ EQU   JFCB+68,2               FILE SEQUENCE NUMBER\nJFCBMASK EQU   JFCB+72,8               DATA MANAGMENT MASK\nJFCBLTYP EQU   JFCB+66,1               LABEL TYPE FIELD\nJFCBLP   EQU   X'10'                   LABEL = BLP\n         SPACE\n***********************************************************************\n*                                                                     *\n*        DATA AREAS                                                   *\n*                                                                     *\n***********************************************************************\n         LTORG\nPACKDATE DS    0D\n         DC    XL4'00'\nTIMEDATE DS    F\nBINDAY   DS    F                       JULIAN DAY IN BINARY\nBINYEAR  DS    F                       YEAR IN BINARY\nTWORD    DS    F\n         EJECT\n***********************************************************************\n*                                                                     *\n*        PARAMETER LIST DESCRIPTION                                   *\n*                                                                     *\n***********************************************************************\n         SPACE\nPARMFLD  DSECT\nZDAY     DC    CL10' '                 DAY OF WEEK\n         DC    CL2' '\nZDATE    DC    CL2' '                  DATE\n         DC    CL1' '\nZMONTH   DC    CL9' '                  MONTH\n         DC    CL1' '\nZYEAR    DC    CL4' '                  YEAR\n         DC    CL2' '\nZTIME    DC    CL8' '                  TIME HH:MM:SS\n         DC    CL1' '\nZAPM     DC    CL2' '                  AM/PM\n         END\n         MACRO\n&NFS     MONTHS  &DUMMY                 04-19-77 LDW\n&NFS     DC    H'31',C'JAN '            THIRTY DAYS\n         DC    H'28',C'FEB '            HATH SEPTEMBER,\n         DC    H'31',C'MAR '            APRIL, JUNE,\n         DC    H'30',C'APR '            AND NOVEMBER.\n         DC    H'31',C'MAY '            ALL THE REST\n         DC    H'30',C'JUN '            HAVE THIRTY ONE,\n         DC    H'31',C'JUL '            EXCEPT FEBRUARY,\n         DC    H'31',C'AUG '            WHICH HAS ONLY 28.\n         DC    H'30',C'SEP '\n         DC    H'31',C'OCT '\n         DC    H'30',C'NOV '\n         DC    H'31',C'DEC '\n         SPACE 2\n         MEND\n         EJECT ,                                              09/84 DBC\n         MACRO\n&NFS     DAYS  &TYPE,&LEN=9                                04-19-77 LDW\n         AIF   ('&TYPE' EQ 'RIGHT').RIGHT\n&NFS     DC    CL&LEN'SUNDAY   '\n         DC    CL&LEN'MONDAY   '\n         DC    CL&LEN'TUESDAY  '\n         DC    CL&LEN'WEDNESDAY'\n         DC    CL&LEN'THURSDAY '\n         DC    CL&LEN'FRIDAY   '\n         DC    CL&LEN'SATURDAY '\n         AGO   .EXIT\n.RIGHT   ANOP\n&NFS     DC    CL&LEN'   SUNDAY'\n         DC    CL&LEN'   MONDAY'\n         DC    CL&LEN'  TUESDAY'\n         DC    CL&LEN'WEDNESDAY'\n         DC    CL&LEN' THURSDAY'\n         DC    CL&LEN'   FRIDAY'\n         DC    CL&LEN' SATURDAY'\n.EXIT    SPACE 2\n         MEND\n*************************************************************  1/93 RT\n*    TODAY CSECT                                            *  1/93 RT\n*                                                           *  1/93 RT\n*   PARAMETERS:                                             *  1/93 RT\n*     DATE FIELD (LEN 22)                                   *  1/93 RT\n*     DAY FIELD (LEN 9)                                     *  1/93 RT\n*     TIME FIELD (LEN 9)                                    *  1/93 RT\n*                                                           *  1/93 RT\n*   FIXED BY RON TANSKY AND JOEL C. EWING                   *  1/93 RT\n*                                                           *  1/93 RT\n*************************************************************  1/93 RT\nTODAY    CSECT                                                 1/93 RT\n         USING *,R15                                           1/93 RT\n         B     TODARND                                         1/93 RT\n         DC    AL1(25)                                         1/93 RT\n         DC    CL8'TODAY'                                      1/93 RT\n         DC    CL8'&SYSDATE'                                   1/93 RT\n         DC    CL8'&SYSTIME'                                   1/93 RT\nTODARND  DS    0H                                              1/93 RT\n         SAVE  (14,12)                                         1/93 RT\n         DROP  R15                                             1/93 RT\n         USING TODAY,R4                                        1/93 RT\n         LM    R5,R7,0(R1)          LOAD THE PARAMETER PTRS    1/93 RT\n         LR    R4,R15                                          1/93 RT\n         LA    R1,TODSAVE                                      1/93 RT\n         ST    R1,8(,R13)           FWD SAVE-AREA CHAIN PTR    1/93 RT\n         ST    R13,4(,R1)           BKWD SAVE-AREA CHAIN PTR   1/93 RT\n         LR    R13,R1               NEW SAVE-AREA ADDR         1/93 RT\n         TIME  DEC                      GET TIME\n         ST    R0,TODDWT                PUT TIME INTO WORK AREA\n         ST    R1,TODPDAT               PUT DATE INTO WORK AREA\n         MVC   TOD1DDT(40),TOD1DDT-1    BLANK THE DATE, DAY, TIME\n         AP    TODPDAT,=P'1900000'      CONVERT CCYY TO YYYY   6/03 JCE\n         UNPK  TOD1DATE+14(7),TODPDAT(4) UNPK THE DATE         6/03 JCE\n         OI    TOD1DATE+20,C'0'         FIX THE SIGN\n         MVC   TOD1DATE+8(4),TOD1DATE+14 SAVE YEAR YYYY        6/03 JCE\n         MVC   TOD1DATE+15(2),TOD1DATE+16   MOVE THE YEAR OVER 6/03 JCE\n         MVI   TOD1DATE+17,C'.'         PUT IN THE DOT\n         MVI   TOD1DATE+6,C','          PUT IN THE COMMA\n         MVI   TOD1DATE+21,C')'         PUT IN THE PARENTHESES\n         MVI   TOD1DATE+14,C'('\n*        LEAP YEAR DETERMINATION BELOW BREAKS IN 2100          6/03 JCE\n         TM    TODPDAT+1,X'01'          POSSIBLE LEAP YEAR?\n         BO    TODNOLP                   NO (ODD YEAR) - NOT LEAP\n         TM    TODPDAT+1,X'12'          DIVISIBLE BY 4?\n         BM    TODNOLP                   NO - NOT LEAP YEAR\n         MVI   MONTHS+7,29              FEB HAS 29 DAYS THIS YEAR\nTODNOLP  MVC   TODDWD+6(2),TODPDAT+2    COPY DDDF\n         XC    TODDWD(6),TODDWD         CLEAR BEGINNING\n         CVB   R0,TODDWD                GET DAY OF YEAR IN BINARY\n         LA    R15,MONTHS               POINT TO TABLE\nTODFINMO SH    R0,0(,R15)               SUB NUMBER OF DAYS THIS MONTH\n         BNP   TODGOTMO                 HAVE MONTH\n         LA    R15,6(,R15)              NEXT TABLE ENTRY\n         B     TODFINMO                 KEEP LOOKING\nTODGOTMO MVC   TOD1DATE(3),2(R15)       MOVE NAME OF MONTH\n         AH    R0,0(,R15)               GET BACK CORRECT RESIDUAL\n         CVD   R0,TODDWD\n         UNPK  TOD1DATE+4(2),TODDWD+6(2)  DAY OF MONTH\n         OI    TOD1DATE+5,C'0'          FIX SIGN\n         MVC   TOD1DATE+10(2),TOD1DATE+15 MOVE IN YEAR\n*        REWORK OF DAY-OF-WEEK CALC USING A SIMPLER, MORE      6/03 JCE\n*    OBVIOUS ALGORITHM BASED ON LILIAN DATES.                  6/03 JCE\n*    DAY 1 LILIAN = FRIDAY, THUS MOD(LILIANDAY+4,7) = 0...6    6/03 JCE\n*    CORRESPONDING TO SUN ... SAT                              6/03 JCE\n*     FOR DATE YYYY.DDD, IF X = YYYY-1201 THEN                 6/03 JCE\n*    LILIANDAY + 4 = FLOOR(X*365.25) - 139444                  6/03 JCE\n*                           - FLOOR(X/100)                     6/03 JCE\n*                           + FLOOR(X/400)   + DDD  + 4        6/03 JCE\n*    THE ABOVE FORMULA AND CODE IS BORROWED FROM A DATE        6/03 JCE\n*    CONVERSION ROUTINE D1MADRES WRITTEN BY J C EWING AT       6/03 JCE\n*    DATA-TRONICS CORP IN AUGUST 1991, AND IS A MATHEMATICAL   6/03 JCE\n*    SIMPLIFICATION OF THE ALGORITHM PUBLISHED BY B.G. OHMS IN 6/03 JCE\n*    'COMPUTER PROCESSING OF DATES OUTSIDE THE TWENTIETH       6/03 JCE\n*    CENTURY', IBM SYSTEMS JOURNAL, VOL 25 NO 2, 1986, P. 247. 6/03 JCE\n         ZAP   TODDWD,=P'0'                                    6/03 JCE\n         MVO   TODDWD,TODPDAT(2)  00 00 00 00 00 0Y YY YC      6/03 JCE\n         CVB   R1,TODDWD          YEAR IN BINARY               6/03 JCE\n         SH    R1,=H'1201'        YEAR - 1201                  6/03 JCE\n         LR    R15,R1                                          6/03 JCE\n         MH    R15,=AL2((36525*4)/100)  (Y-1201)*365.25*4      6/03 JCE\n         SRA   R15,2               R15= FLOOR((Y-1201)*365.25) 6/03 JCE\n         S     R15,=F'139440'      UNADJ DAYS + 4              6/03 JCE\n         SR    R0,R0               COMPUTE CENTURY ADJUSTMENT  6/03 JCE\n         D     R0,=F'100'          R1=CENTURY LEAP DAYS        6/03 JCE\n         SR    R15,R1              SUBTRACT CENTURY LEAP DAYS  6/03 JCE\n         SRA   R1,2                400-YR LEAP DAYS            6/03 JCE\n         AR    R15,R1              ADD BACK 400 YR LEAP DAYS   6/03 JCE\n         ZAP   TODDWD,TODPDAT+2(2) EXTRACT DDD                 6/03 JCE\n         CVB   R1,TODDWD           R1=DDD                      6/03 JCE\n         AR    R15,R1              DAYS FROM OCT 15, 1582 + 4  6/03 JCE\n* Z=MOD(D,7)+1\n         XR    R14,R14                  CLEAR FOR DIVIDE\n         D     R14,=F'7'                GET MOD(D,7) IN R4=Z\n         MH    R14,=Y(L'DAYS)           OFFSET INTO TABLE\n         LA    R14,DAYS(R14)            POINT TO DAY IN TABLE\n         MVC   TOD1DAY(L'DAYS),0(R14)   DAY TO OUTPUT LOCATION\n         OI    TODDWT+3,X'0F'           FIX THE SIGN\n         MVC   TOD1TIME(9),=X'4021207A20207A2020'    ' DD:DD:DD'\n         ED    TOD1TIME(9),TODDWT\n         MVC   0(22,R5),TOD1DATE                               1/93 RT\n         MVC   0(9,R6),TOD1DAY                                 1/93 RT\n         MVC   0(9,R7),TOD1TIME                                1/93 RT\n         L     R13,4(,R13)                                     1/93 RT\n         MVI   12(R13),X'FF'        INVALIDATE FWD-CHAIN       1/93 RT\n         RETURN (14,12),RC=0                                   1/93 RT\n         SPACE 1\nDAYS     DAYS  LEFT                                                 THO\n         SPACE 1                                                    THO\nMONTHS   MONTHS                                                     THO\n         LTORG\n         DROP  R4\nTODSAVE  DS    9D\nTODDWT   DS    D                    PACKED TIME\nTODDWD   DS    D                    PACKED DATE WORK FIELD\nTODPDAT  DS    F                    PACKED DATE\n         DC    CL8' '\nTOD1DDT  DS    0CL40          DATE, DAY, TIME TAKEN TOGETHER\nTOD1DATE DC    CL22' '\nTOD1DAY  DC    CL9' '\nTOD1TIME DC    CL9' '\n         DC    CL8' '\n         YREGS\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SS0104$": {"ttr": 1537, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\n\\x00\\x08\\x01\\x07\"_\\x01\\x125O\\x14\\x14\\x00\\x1b\\x00\\x0e\\x00\\x00\\xc1\\xe2\\xd4\\xd1\\xc3\\xd3@@@@'", "ispf": {"version": "01.10", "flags": 0, "createdate": "2007-08-13T00:00:00", "modifydate": "2012-12-19T14:14:08", "lines": 27, "newlines": 14, "modlines": 0, "user": "ASMJCL"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,RLD,FLAG(5))\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT486.FILE266(SS0104)\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,20)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=SYSDA,SPACE=(TRK,30),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=IEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=(OLD,PASS),DSN=&&TEMP\n//SYSLMOD  DD  DISP=SHR,DSN=SBGOLOB.LOAD\n//SYSLIN   DD  *\n INCLUDE SYSLIB\n ORDER   SS0104\n SETSSI  CB486226\n ENTRY   SS0104\n NAME    SS0104(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SS0104J1": {"ttr": 1539, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01+\\x00G\\x01\\x00(o\\x01\\x125O\\x121\\x00\\x11\\x00&\\x00\\x00\\xe2\\xc1\\xd4\\xd7\\xd1\\xc3\\xd3@@@'", "ispf": {"version": "01.43", "flags": 0, "createdate": "2000-10-12T00:00:00", "modifydate": "2012-12-19T12:31:47", "lines": 17, "newlines": 38, "modlines": 0, "user": "SAMPJCL"}, "text": "//SBGOLOB1  JOB (ACCT#),S-GOLOB,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X\n//***********************************************************\n//*      SAMPLE JOB TO READ A TAPE WITH SS0104              *\n//***********************************************************\n//*\n//MAPX  PROC  VOL=XXXXXX,DRIVE='563'\n//TESTA   EXEC PGM=SS0104\n//STEPLIB  DD  DSN=SBGOLOB.LOAD,DISP=SHR\n//SYSPRINT DD  SYSOUT=*\n//SYSABEND DD  SYSOUT=*\n//TAPE     DD  UNIT=&DRIVE,VOL=(PRIVATE,RETAIN,,,SER=(&VOL)),\n//             DISP=SHR,LABEL=(1,BLP,EXPDT=98000)\n//  PEND\n//TAPE01  EXEC MAPX,VOL=C485MU\n//*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT266/FILE266.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT266", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}