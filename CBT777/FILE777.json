{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012758000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 58786, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 6, "INMDSNAM": "CBT.V500.FILE777.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 58786, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 58786, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE777.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x02\\x0f'", "DS1TRBAL": "b'hd'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x05L\\x00\\x05\\x05L\\x00\\x07\\x00\\x03'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04K\\x00\\x00\\x01\\x075?\\x01\\x075?\"P\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf5@@@'", "ispf": {"version": "04.75", "flags": 0, "createdate": "2007-12-19T00:00:00", "modifydate": "2007-12-19T22:50:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-475"}, "text": "REGULAR CBT TAPE - VERSION 475    FILE:  777\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT475.FILE777\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 5 MEMBERS COUNTED; CUMULATIVE SIZE IS 252 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   12/19/07    22:50:30    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$NOTE1": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x15\\x01\\x075/\\x01\\x075/\\x10\\x07\\x00\\x16\\x00\\x16\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2007-12-18T00:00:00", "modifydate": "2007-12-18T10:07:15", "lines": 22, "newlines": 22, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject:    SPDISK : a new algorithm to filter dataset names with Rexx\nFrom:       Philippe Cochy <cochy@free.fr>\nDate:       Fri, 14 Dec 2007 17:28:38 +0100\nTo:         sbgolob@cbttape.org\n\nHi Sam.\n\nThis Rexx was requested by the production staff to survey the\ndisk space occupancy.  As input, it uses a dcollect and a list of\ndataset's masks using classical z/OS filtering rules.  As output,\nit gives the disk space occupancy in gigabytes for each mask.\nIt is interesting because of the dataset parsing algorithm.  It\nseems to me that it was never done with Rexx before.\n\nRegards,\nPhilippe COCHY\nLieu-dit Pecita\nHameau de Arba Mora\nFR-20138 Coti-Chiavari\n+33 953 05 12 00\n\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$SPDISK": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00Q\\x01\\x075?\\x01\\x075?\\x17C\\x004\\x004\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf5@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2007-12-19T00:00:00", "modifydate": "2007-12-19T17:43:51", "lines": 52, "newlines": 52, "modlines": 0, "user": "CBT-475"}, "text": "//SPDISKJ   JOB @ACCT,\n//             SPDISK,MSGCLASS=X,\n//             NOTIFY=&SYSUID,RESTART=DCOLREXX\n//********************************************************************\n//*                     DISK STORAGE OCCUPANCY                       *\n//*  ------------------------------------------------------------    *\n//*  CARE: REXX = HOT CPU                                            *\n//*  ------------------------------------------------------------    *\n//* AUTHOR: PHILIPPE COCHY                                           *\n//* REXX : SPDISK PARM1, PARM2                                       *\n//* PARM1 = DCOLLECT TYPE D DATASET, PARM2 = OUTPUT REPORT           *\n//* SYSIN: DATASET'S PATTERNS TO BE ANALYZED, 1 PATTERN BY LINE      *\n//*        (%, * AND ** CAN BE USED)                                 *\n//* OUTPUT REPORT: PATTERNS OF DATASETS, SPACE IN GIGABYTES          *\n//********************************************************************\n//STEP10   EXEC PGM=IDCAMS\n//SYSPRINT DD  SYSOUT=*\n DEL $$UAD.SPDISK.TYPD\n SET MAXCC = 0\n//STEP20   EXEC PGM=IDCAMS\n//SYSPRINT DD  SYSOUT=*\n//DCOUT    DD  DSN=&&DCOLLECT,\n//             DISP=(,PASS),SPACE=(264,(150,50),RLSE),\n//             DSORG=PS,RECFM=VB,LRECL=600,AVGREC=K\n DCOLLECT  -\n      OUTFILE(DCOUT)  -\n      SMSDATA(ACTIVE) -\n      VOLUMES(*)\n//SORTD    EXEC PGM=SORT\n//SORTIN   DD  DSN=*.STEP20.DCOUT,DISP=SHR\n//SORTOUT  DD  DSN=$$UAD.SPDISK.TYPD,\n//             DISP=(,CATLG),SPACE=(264,(150,50),RLSE),\n//             DSORG=PS,RECFM=VB,LRECL=600,AVGREC=K\n//SYSOUT   DD  SYSOUT=*\n//SORTMSG  DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n SORT FIELDS=(29,44,CH,A),DYNALLOC=(SYSDA,4),FILSZ=E120000\n INCLUDE COND=(9,2,CH,EQ,C'D ')\n//DCOLREXX EXEC PGM=IKJEFT1A,DYNAMNBR=100,\n//         REGION=6M,TIME=15\n//SYSTERM  DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSTSPRT DD  SYSOUT=*\n//SYSEXEC  DD  DISP=SHR,DSN=SBGOLOB.CBT475.FILE777\n//SYSTSIN  DD  *\n%SPDISK $$UAD.SPDISK.TYPD $$UAD.SPDISK.LIST\n//SYSIN     DD  *\n**.SPDISK\n**.SPDISK.L*\n$$U*D.SPDISK.L*\n$$U*D.SPDISK.LIS%.*\n*$U*D.SPDISK.L*.**\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@FILE777": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04K\\x00\\x00\\x01\\x075?\\x01\\x075?\"P\\x00\\x08\\x00\\x08\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf5@@@'", "ispf": {"version": "04.75", "flags": 0, "createdate": "2007-12-19T00:00:00", "modifydate": "2007-12-19T22:50:00", "lines": 8, "newlines": 8, "modlines": 0, "user": "CBT-475"}, "text": "//***FILE 777 is from Philippe Cochy and contains a REXX exec to    *   FILE 777\n//*           check disk space occupancy.  This REXX contains an    *   FILE 777\n//*           original algorithm to filter dataset names.  See      *   FILE 777\n//*           member $SPDISK to execute the SPDISK REXX exec in     *   FILE 777\n//*           batch.                                                *   FILE 777\n//*                                                                 *   FILE 777\n//*           email:  Philippe Cochy <cochy@free.fr>                *   FILE 777\n//*                                                                 *   FILE 777\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SPDISK": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00F\\x01\\x075?\\x01\\x075?\\x178\\x00\\x9e\\x00\\x9e\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2007-12-19T00:00:00", "modifydate": "2007-12-19T17:38:46", "lines": 158, "newlines": 158, "modlines": 0, "user": "CBT-475"}, "text": "/********************************************************************/\n/*                     DISK STORAGE OCCUPANCY                       */\n/*  ------------------------------------------------------------    */\n/*  CARE: REXX = HOT CPU                                            */\n/*  ------------------------------------------------------------    */\n/* AUTHOR: PHILIPPE COCHY                                           */\n/* REXX : SPDISK PARM1 PARM2                                        */\n/* PARM1 = DCOLLECT TYPE D DATASET, PARM2 = OUTPUT REPORT           */\n/* SYSIN: DATASET'S PATTERNS TO BE ANALYZED, 1 PATTERN BY LINE      */\n/* OUTPUT REPORT: \"PATTERNS OF DATASETS\"  \"SPACE IN GIGABYTES\"      */\n/********************************************************************/\nnumeric digits 18\n\ntrace N\nparse arg INDSN OUTDSN\n\"ALLOC DSNAME('\" || INDSN || \"') DDNAME(INDD) SHR\"\nFIRST_REC = 'YES'\n\"execio * diskr\" SYSIN     \"(finis stem PAT.\"\nOQP.0 = PAT.0\ndo M = 1 to PAT.0\n  parse var PAT.M PAT.M .\n  OQP.M = 0\nend\n\"execio 10000 diskr INDD (stem IN_REC.\"\ndo while IN_REC.0 > 0\n   do R = 1 TO IN_REC.0\n      parse VAR IN_REC.R 1 . 5 DCURCTYP 7 DCUVERS 9 DCUSYSID,\n         13 DCUTIME 17 DCUDATE 21 .\n      if FIRST_REC = 'YES' then do\n         SMFDATE = left(C2X(DCUDATE),7)\n         JULDATE = right(SMFDATE,5)\n         STDDATE = date('S',JULDATE,'J')\n         COLDATE = right(STDDATE,6)\n         FIRST_REC = 'NO'\n      end\n      if DCURCTYP = \"D \" then do\n         CALL DCDRECP\n         do M = 1 TO PAT.0\n           if MATCH(DCDDSNAM,PAT.M) then do\n             OQP.M = OQP.M + right(C2D(DCDALLSP),10)\n           end\n         end\n      end\n   end\n   \"execio 10000 diskr INDD (stem IN_REC.\"\nend\n\"execio 0 diskr INDD (finis\"\n\"free ddname(INDD)\"\ndo S = 1 TO OQP.0\n  GBYTES = OQP.S/1048576\n  PAT.S = left(PAT.S,44,' ') || format(GBYTES,6,3,0)\nend\n\"alloc dsname('\" || OUTDSN || \".D2\"||COLDATE||\"')\",\n    \"dsorg(ps) lrecl(80) recfm(f b) \",\n    \"cylinders space(300,50) release ddname(OUTDD)\"\n\"execio * diskw OUTDD (finis stem PAT.\"\n\"free ddname(OUTDD)\"\nexit\n\n/**********************************************************************/\n/* ROUTINE DE PARSE                                                   */\n/**********************************************************************/\nDCDRECP:\n  parse var IN_REC.R 1 . 25 DCDDSNAM 69 DCDERROR 70,\n    70 DCDFLAG1 71 DCDFLAG2 72 . 75 DCDDSORG 77 DCDRECRD,\n    78 DCDNMEXT 79 DCDVOLSR 85 DCDBKLNG 87 DCDLRECL,\n    89 DCDALLSP 93 DCDUSESP 97 DCDSCALL 101 DCDNMBLK,\n    105 DCDCREDT 109 DCDEXPDT 113 DCDLSTRF 117 DCDDSSER,\n    123 DCDVOLSQ 125 DCDLBKDT 133 . 135 DCDDATCL,\n    143 . 167 DCDSTGCL 175 . 199 DCDMGTCL,\n    207 . 231 DCDSTGRP 239 .\nreturn\n/**********************************************************************/\n/* ROUTINE DE TEST DU DSNAME                                          */\n/**********************************************************************/\nMATCH:\nparse arg DSN, PAT\nPAT = strip(PAT)\nif right(PAT,3) = '.**' then do\n  PAT = left(PAT,length(PAT)-3)\n  DSN = strip(DSN)\nend\nelse do\n  PAT = PAT || '&'\n  DSN = strip(DSN) || '&'\nend\nparse var DSN D.1 '.' D.2 '.' D.3 '.' D.4 '.' D.5 '.' D.6 '.' D.7 '.' .\ndo I = 1 to 7\n  if D.I = \"\" then leave\nend\nD.0 = I-1\nparse var PAT P.1 '.' P.2 '.' P.3 '.' P.4 '.' P.5 '.' .\ndo J = 1 to 5\n  if P.J = \"\" then leave\nend\nP.0 = J-1\nJ = 1\ndo I = 1 to D.0              /* Niveau qualifieur */\n  if J > P.0 then leave      /* plus de qual @ comparer */\n  if P.J = '**' then J = J+1 /* qual ** pattern ignore */\n  if J > P.0 then leave      /* plus de qual @ comparer */\n  Q = P.J\n  if D.I = Q then J = J+1    /* qual dsn = qual pattern : +1 I et J */\n  else do                    /* qual dsn /= qual pattern */\n    LEN = length(D.I)        /* caractere par caractere */\n    JC = 1\n    do IC = 1 to LEN\n      if JC > length(Q) then leave /* plus de car a comparer */\n      if substr(Q,JC,1) = '*' then JC = JC+1 /* car * pattern ignore */\n      if substr(Q,JC,1) = '%' then do        /* car joker */\n        parse var Q P1 '%' P2\n        Q = P1 || substr((D.I),IC,1) || P2   /* substitution car qual */\n        JC = JC+1            /* +1 IC et JC */\n        iterate\n      end\n      if substr(D.I,IC,1) = substr(Q,JC,1) then do\n        JC = JC+1            /* car dsn = car pattern : +1 IC et JC */\n        iterate\n      end\n    end                           /* fin de car par car */\n    if D.I /= Q then do\n/* transforme du qualifieur par * */\n      Q = '.' || Q || '.'\n      QD = '.' || D.I || '.'\n      parse var Q P1 '*' P2 '*' P3 '*' .\n      parse var QD D1 (P1) D2 (P2) D3 (P3) .\n      Q = D1 || P1 || D2 || P2 || D3 || P3\n/* fin de transforme par * */\n      if QD = Q then do\n        P.J = strip(Q,,'.')\n        J = J+1\n      end\n    end\n    else do\n      P.J = Q\n      J = J+1\n    end\n  end                        /* fin de qual dsn /= qual pattern */\nend                          /* boucle qual dsn suivant */\nPAT = P.1\ndo J = 2 to 5\n  if P.J = '' then leave\n  PAT = PAT || '.' || P.J\nend\n/* transforme du dsname par ** */\nparse var PAT P1 '**' P2 '**' P3 '**' .\nif P1='' then do\n  parse var DSN D1 (P2) D2 (P3) D3\n  PAT = D1 || P2 || D2 || P3 || D3\nend\nelse do\n  parse var DSN D1 (P1) D2 (P2) D3 (P3) .\n  PAT = P1 || D1 || P2 || D2 || P3 || D3\nend\n/* fin de transforme par ** */\nif DSN = PAT then RC = 1\nelse RC = 0\nreturn RC\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT777/FILE777.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT777", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}