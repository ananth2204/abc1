/********************************************************************/
/*                     DISK STORAGE OCCUPANCY                       */
/*  ------------------------------------------------------------    */
/*  CARE: REXX = HOT CPU                                            */
/*  ------------------------------------------------------------    */
/* AUTHOR: PHILIPPE COCHY                                           */
/* REXX : SPDISK PARM1 PARM2                                        */
/* PARM1 = DCOLLECT TYPE D DATASET, PARM2 = OUTPUT REPORT           */
/* SYSIN: DATASET'S PATTERNS TO BE ANALYZED, 1 PATTERN BY LINE      */
/* OUTPUT REPORT: "PATTERNS OF DATASETS"  "SPACE IN GIGABYTES"      */
/********************************************************************/
numeric digits 18

trace N
parse arg INDSN OUTDSN
"ALLOC DSNAME('" || INDSN || "') DDNAME(INDD) SHR"
FIRST_REC = 'YES'
"execio * diskr" SYSIN     "(finis stem PAT."
OQP.0 = PAT.0
do M = 1 to PAT.0
  parse var PAT.M PAT.M .
  OQP.M = 0
end
"execio 10000 diskr INDD (stem IN_REC."
do while IN_REC.0 > 0
   do R = 1 TO IN_REC.0
      parse VAR IN_REC.R 1 . 5 DCURCTYP 7 DCUVERS 9 DCUSYSID,
         13 DCUTIME 17 DCUDATE 21 .
      if FIRST_REC = 'YES' then do
         SMFDATE = left(C2X(DCUDATE),7)
         JULDATE = right(SMFDATE,5)
         STDDATE = date('S',JULDATE,'J')
         COLDATE = right(STDDATE,6)
         FIRST_REC = 'NO'
      end
      if DCURCTYP = "D " then do
         CALL DCDRECP
         do M = 1 TO PAT.0
           if MATCH(DCDDSNAM,PAT.M) then do
             OQP.M = OQP.M + right(C2D(DCDALLSP),10)
           end
         end
      end
   end
   "execio 10000 diskr INDD (stem IN_REC."
end
"execio 0 diskr INDD (finis"
"free ddname(INDD)"
do S = 1 TO OQP.0
  GBYTES = OQP.S/1048576
  PAT.S = left(PAT.S,44,' ') || format(GBYTES,6,3,0)
end
"alloc dsname('" || OUTDSN || ".D2"||COLDATE||"')",
    "dsorg(ps) lrecl(80) recfm(f b) ",
    "cylinders space(300,50) release ddname(OUTDD)"
"execio * diskw OUTDD (finis stem PAT."
"free ddname(OUTDD)"
exit

/**********************************************************************/
/* ROUTINE DE PARSE                                                   */
/**********************************************************************/
DCDRECP:
  parse var IN_REC.R 1 . 25 DCDDSNAM 69 DCDERROR 70,
    70 DCDFLAG1 71 DCDFLAG2 72 . 75 DCDDSORG 77 DCDRECRD,
    78 DCDNMEXT 79 DCDVOLSR 85 DCDBKLNG 87 DCDLRECL,
    89 DCDALLSP 93 DCDUSESP 97 DCDSCALL 101 DCDNMBLK,
    105 DCDCREDT 109 DCDEXPDT 113 DCDLSTRF 117 DCDDSSER,
    123 DCDVOLSQ 125 DCDLBKDT 133 . 135 DCDDATCL,
    143 . 167 DCDSTGCL 175 . 199 DCDMGTCL,
    207 . 231 DCDSTGRP 239 .
return
/**********************************************************************/
/* ROUTINE DE TEST DU DSNAME                                          */
/**********************************************************************/
MATCH:
parse arg DSN, PAT
PAT = strip(PAT)
if right(PAT,3) = '.**' then do
  PAT = left(PAT,length(PAT)-3)
  DSN = strip(DSN)
end
else do
  PAT = PAT || '&'
  DSN = strip(DSN) || '&'
end
parse var DSN D.1 '.' D.2 '.' D.3 '.' D.4 '.' D.5 '.' D.6 '.' D.7 '.' .
do I = 1 to 7
  if D.I = "" then leave
end
D.0 = I-1
parse var PAT P.1 '.' P.2 '.' P.3 '.' P.4 '.' P.5 '.' .
do J = 1 to 5
  if P.J = "" then leave
end
P.0 = J-1
J = 1
do I = 1 to D.0              /* Niveau qualifieur */
  if J > P.0 then leave      /* plus de qual @ comparer */
  if P.J = '**' then J = J+1 /* qual ** pattern ignore */
  if J > P.0 then leave      /* plus de qual @ comparer */
  Q = P.J
  if D.I = Q then J = J+1    /* qual dsn = qual pattern : +1 I et J */
  else do                    /* qual dsn /= qual pattern */
    LEN = length(D.I)        /* caractere par caractere */
    JC = 1
    do IC = 1 to LEN
      if JC > length(Q) then leave /* plus de car a comparer */
      if substr(Q,JC,1) = '*' then JC = JC+1 /* car * pattern ignore */
      if substr(Q,JC,1) = '%' then do        /* car joker */
        parse var Q P1 '%' P2
        Q = P1 || substr((D.I),IC,1) || P2   /* substitution car qual */
        JC = JC+1            /* +1 IC et JC */
        iterate
      end
      if substr(D.I,IC,1) = substr(Q,JC,1) then do
        JC = JC+1            /* car dsn = car pattern : +1 IC et JC */
        iterate
      end
    end                           /* fin de car par car */
    if D.I /= Q then do
/* transforme du qualifieur par * */
      Q = '.' || Q || '.'
      QD = '.' || D.I || '.'
      parse var Q P1 '*' P2 '*' P3 '*' .
      parse var QD D1 (P1) D2 (P2) D3 (P3) .
      Q = D1 || P1 || D2 || P2 || D3 || P3
/* fin de transforme par * */
      if QD = Q then do
        P.J = strip(Q,,'.')
        J = J+1
      end
    end
    else do
      P.J = Q
      J = J+1
    end
  end                        /* fin de qual dsn /= qual pattern */
end                          /* boucle qual dsn suivant */
PAT = P.1
do J = 2 to 5
  if P.J = '' then leave
  PAT = PAT || '.' || P.J
end
/* transforme du dsname par ** */
parse var PAT P1 '**' P2 '**' P3 '**' .
if P1='' then do
  parse var DSN D1 (P2) D2 (P3) D3
  PAT = D1 || P2 || D2 || P3 || D3
end
else do
  parse var DSN D1 (P1) D2 (P2) D3 (P3) .
  PAT = P1 || D1 || P2 || D2 || P3 || D3
end
/* fin de transforme par ** */
if DSN = PAT then RC = 1
else RC = 0
return RC
