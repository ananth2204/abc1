{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011714000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 529074, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 8, "INMDSNAM": "CBT.V500.FILE306.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 529074, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 529074, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE306.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\t\\x0b'", "DS1TRBAL": "b'#\\xfe'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x02(\\x00\\x0c\\x02)\\x00\\x06\\x00\\n'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$PROSE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x19\\x00\\x00\\x00\\x814O\\x00\\x91\\x12\\x7f\\x15\\x14\\x00M\\x00*\\x00\\x00\\xe2\\xf2\\xf1\\xf8@@@@@@'", "ispf": {"version": "01.25", "flags": 0, "createdate": "1981-12-10T00:00:00", "modifydate": "1991-05-07T15:14:00", "lines": 77, "newlines": 42, "modlines": 0, "user": "S218"}, "text": "        H F000094 D=MAY91\n        T FILE 94 - TIME SHARING SUBSYSTEM OPTION - US AIR FORCE\n        K TSO SUBSYSTEM AIR FORCE AIRFORCE V23 TSSO CONSOLE\n        K JIM MARSHALL 2ISG SADSC\n\n         **************************************************************\n         DSN=SHARE.FILE094.DATA RECFM=FB LRECL=80 BLKSIZE=6160 BLOCKS=78\n         **************************************************************\n\n         RELATED FILES: 31-33, 92, 94, 116-119, DOC  ALL FILES MEMBER $$PROSE\n\n\n           T I M E   S H A R I N G   S U B S Y S T E M   O P T I O N\n\n                          (  T   S   S   O  )\n\n                          REL  5.0   15  MAY  1991\n\n\n           THIS SET OF PGMS ALLOWS YOU TO BRING UP A TSO LIKE FUNCTION\n           WHEN DISASTER HAS STRUCK,  I/O ERROR IN  BROADCAST DATASET.\n           EVER TRY TO KEYPUNCH AND GET IT CORRECT(WHERE ARE THE\n           KEYPUNCHES ANYMORE) TSSO' ALLOWS YOU TO START A SUBSYSTEM\n           TO DO TSO COMMANDS FROM YOUR OPERATORS CONSOLE.\n           SEE THE MEMBER TSSODOC FOR MORE INFORMATION.\n\n           WOULD LIKE TO THANK BILL GODFREY OF PLANNING RESEARCH CORP.\n           (PRC) FOR THE CODE. THIS WAS DEVELOPED AT THE AIR FORCE\n           DATA SERVICES CENTER, PENTAGON, WASHINGTON DC WHEN I WORKED\n           THERE. IT WAS ONLY DEVELOPED BECAUSE BILL IS SUCH AS GENIUS\n           AND DID MORE THAN I COULD EVER DREAM COULD BE DONE.\n\n                                  JIM MARSHALL\n\n           CHANGE LOG:  18 MAY 81\n           STACK - TSO CMD UPDATED. COMMANDS NO LONGER IN PARENTHESIS.\n                   LIST KEYWORD CAN NOT BE SUPPORTED WITH NEW SYNTAX,\n                   USE OF STACKL ALIAS PROVIDES EQUAL RESULTS.\n                   DELIMITER PAIRS NO LONGER TREATED AS DELIMITERS\n                   BUT AS SINGLE CHARACTER THAT MATCHES THE DELIMITER.\n                   MAX LENGTH INCREASED FROM 256 TO 1024.\n\n            10 DEC 81\n\n            TSSO,TSSOSSM,TSSOWTO - CAN NOW TYPE IN 2ND COMMAND BEFORE\n                 THE 1ST ONE HAS COMPLETED. TSSO WILL QUEUE IT UNTIL\n                 THE FIRST COMMAND ENDS.\n\n            10 JAN 82\n\n            WE ARE UP ON MVS/SP1.1.0 AND TSSO WORKS FINE\n\n            11 JUN 82\n\n            NEW WAY TO START TSSO USING NEW PROGRAM TSSOUPSS, SO THAT\n            SYSOUT BANNER PAGES WILL SAY TSSO INSTEAD OF SYSOUT.\n            TSSO CHANGED TO SUPPORT ENVIRONMENT CREATED BY TSSOUPSS.\n            TSSOWTO CHANGED TO SUPPORT SKIPPING ON '.L' COMMAND.\n            TSSODOC REWRITTEN. SAMPLE PROCS IN TSSOPROC AND SSSOPROC.\n            NEW MEMBER TSSOGIDE IS DOCUMENTATION WITH LOWER CASE\n            LETTERS AND ASA CARRIAGE CONTROL. NEW EF COMMAND SYNTAX.\n            TSO COMMANDS MAY BE CONTINUED USING HYPHEN AT END OF LINE.\n            TSSO '.L' COMMAND MAY BE ENTERED AS JUST 'L', NO PERIOD.\n\n            3 OCT 83\n\n            MVS/XA SUPPORT FOR TSSO. NO REALLY THAT BIG CHANGE. RIC\n            WALFORD SENT ME THE ONE CHANGE YOU NEED TO MAKE IN THE\n            TSSO MODULE. THE ESTAE FOR MVS/XA HAS CHANGED AND HE FIXED\n            THE CODE SO IT WOULD ASSEMBLE CORRECTLY FOR MVS/XA OR NON\n            MVS/XA. THANKS TO RIC WHO IS FROM SIMPSON-SEARS LIMITED,\n            TORONTO, CANADA.\n\n            24 FEB 86\n\n            WE ARE UP ON MVS/SP1.3.3 AND TSSO WORKS FINE\n        $EOM\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$JCL": {"ttr": 519, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x04\\x00\\x00\\x00\\x82$/\\x00\\x85\\x01\\x1f\\x10'\\x00/\\x00*\\x00\\x00\\xe2\\xe2\\xf0\\xf2\\xd1\\xc4\\xd4@@@\"", "ispf": {"version": "01.04", "flags": 0, "createdate": "1982-08-30T00:00:00", "modifydate": "1985-01-11T10:27:00", "lines": 47, "newlines": 42, "modlines": 0, "user": "SS02JDM"}, "text": "//*-------------------------------------------------------------------*\n//*        INSTALL THE ' T S S O '  SUBSYSTEM. DO NOT FORGET TO PUT   *\n//*        THE PROCLIB IN SYS1.PROCLIB AND ZAP THE SUBSYSTEM NAME     *\n//*        TABLE FOR MVS/SP1.1  OR UPDATE PARMLIB FOR MVS/SP1.3       *\n//*-------------------------------------------------------------------*\n//TSSO     EXEC ASMHCL,PARM.ASM='TERM,OBJECT,BATCH',\n//         PARM.LKED='LIST,MAP'\n//SYSPRINT DD DUMMY\n//SYSTERM  DD SYSOUT=*\n//SYSIN    DD DISP=SHR,DSN=SSJDM.MVS.SHARE.TSSO(TSSO)\n//LKED.SYSPRINT DD SYSOUT=*\n//LKED.SYSLMOD DD DISP=SHR,DSN=SYS1.SADSC.CMDLIB\n//LKED.SYSIN  DD *\n SETCODE AC(1)\n NAME TSSO(R)\n/*\n//TSSOWTO  EXEC ASMHCL,PARM.ASM='TERM,OBJECT,BATCH',\n//         PARM.LKED='LIST,MAP,RENT',COND=(0,NE)\n//SYSPRINT DD DUMMY\n//SYSTERM  DD SYSOUT=*\n//SYSIN    DD DISP=SHR,DSN=SSJDM.MVS.SHARE.TSSO(TSSOWTO)\n//LKED.SYSPRINT DD SYSOUT=*\n//LKED.SYSLMOD DD DISP=SHR,DSN=SYS1.SADSC.CMDLIB\n//LKED.SYSIN  DD *\n NAME TSSOWTO(R)\n/*\n//TSSOUPSS EXEC ASMHCL,PARM.ASM='TERM,OBJECT,BATCH',\n//         PARM.LKED='LIST,MAP,RENT',COND=(0,NE)\n//SYSPRINT DD DUMMY\n//SYSTERM  DD SYSOUT=*\n//SYSIN    DD DISP=SHR,DSN=SSJDM.MVS.SHARE.TSSO(TSSOUPSS)\n//LKED.SYSPRINT DD SYSOUT=*\n//LKED.SYSLMOD DD DISP=SHR,DSN=SYS1.SADSC.CMDLIB\n//LKED.SYSIN  DD *\n SETCODE AC(1)\n NAME TSSOUPSS(R)\n/*\n//TSSOSSSM EXEC ASMHCL,PARM.ASM='TERM,OBJECT,BATCH',\n//         PARM.LKED='LIST,MAP,RENT',COND=(0,NE)\n//SYSPRINT DD DUMMY\n//SYSTERM  DD SYSOUT=*\n//SYSIN    DD DISP=SHR,DSN=SSJDM.MVS.SHARE.TSSO(TSSOSSSM)\n//LKED.SYSPRINT DD SYSOUT=*\n//LKED.SYSLMOD DD DISP=SHR,DSN=SYS1.SADSC.CMDLIB\n//LKED.SYSIN  DD *\n NAME TSSOSSSM(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EF": {"ttr": 521, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x82\\x16\\x1f\\x00\\x82\\x16\\x1f\\x15$\\x01\\xe0\\x01\\xe0\\x00\\x00\\xc1\\xe2\\xd4\\xc9\\xf0\\xf5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1982-06-10T00:00:00", "modifydate": "1982-06-10T15:24:00", "lines": 480, "newlines": 480, "modlines": 0, "user": "ASMI05"}, "text": "         TITLE '   E D I T F I L E   ( E F )   '\n***********************************************************************\n*                                                                     *\n*           'EF' TSO COMMAND                                          *\n*                                                                     *\n***********************************************************************\n         SPACE\n*        WRITTEN BY. BILL GODFREY, PLANNING RESEARCH CORPORATION.\n*        INSTALLATION. PRC COMPUTER CENTER, MCLEAN VA.\n*        DATE WRITTEN. APRIL 26 1977.\n*        DATE UPDATED. JUNE 10 1982.\n*        DESCRIPTION.\n*         THIS COMMAND STACKS A LIST OF EDIT SUBCOMMANDS TO BE\n*         EXECUTED AGAINST THE DATASET ALLOCATED TO F(EDITFILE).\n*\n*         THIS IS A MAJOR CHANGE TO THE 'EF' COMMAND.\n*         THE OLD SYNTAX WILL NOT WORK WITH THIS VERSION.\n*         THE NEW SYNTAX HAS NO PARENS AROUND THE STACKED\n*         SUBCOMMANDS, THUS ALLOWING UNBALANCED PARENS TO BE\n*         SPECIFIED IN SUBCOMMAND OPERANDS.\n*\n*         THE SUBCOMMANDS ARE SPECIFIED AS A LIST ON ONE LINE,\n*         WITH THE FIRST CHARACTER DEFINING THE DELIMITER THAT\n*         SEPARATES THE SUBCOMMANDS IN THE LIST.\n*         IF THE FIRST CHARACTER IS ALPHANUMERIC OR $, #, @, %\n*         IT IS NOT USED AS THE DELIMITER, BUT SEMICOLON (;) IS.\n*         THE FOUR CHARACTERS ($ # @ %) ARE SOMETIMES THE FIRST\n*         CHARACTERS OF A COMMAND NAME OR CLIST NAME, SO THEY\n*         ARE NOT ALLOWED AS DELIMITERS.\n*\n*         EXAMPLE: ALLOC FI(EDITFILE) DA(ABC.DEF.GHI.DATA) OLD\n*                  EF V;BOTTOM;INSERT END;SAVE\n*                  EF ,V,FIND /LOAD/ 10,DOWN\n*                  EF .V.BOTTOM.INSERT END.SAVE\n*\n*         IT WAS DESIGNED FOR A SUBSYSTEM (TSSO) WHERE TSO COMMANDS\n*         MAY BE ENTERED ON A CONSOLE, BUT THE SUBSYSTEM'S DESIGN\n*         REQUIRED ALL SUBCOMMANDS TO BE ON THE SAME LINE AS THE\n*         COMMAND.  THIS REQUIRED RE-TYPING THE EDIT COMMAND AND\n*         THE DATA SET NAME FOR EACH LINE, WHICH WAS TIRESOME AND\n*         DIDN'T LEAVE MUCH ROOM FOR THE SUBCOMMANDS.  THIS COMMAND\n*         BUILDS AN EDIT COMMAND FROM THE DATA SET NAME ALLOCATED\n*         TO THE FILENAME 'EDITFILE', STACKS IT, THEN STACKS THE\n*         SPECIFIED SUBCOMMANDS.\n*\n*         NOTE - INSTALLATIONS THAT HAVE THE PCF PRODUCT WILL\n*         NOTICE THAT IN A TSO SESSION PCF STRIPS OUT THE\n*         SEMICOLONS BEFORE THIS COMMAND EVER SEES THEM,\n*         BUT PCF SEEMS TO LEAVE THEM ALONE IN BACKGROUND\n*         MODE (SUCH AS THE SUBSYSTEM).\n*\n*         LOG OF CHANGES.\n*          10SEP80 - LAST CHANGE BEFORE 27MAY82.\n*          27MAY82 - NEW VERSION. SYNTAX CHANGED.\n*                    SYNTAX IS INCOMPATIBLE WITH OLD VERSION.\n*                    SUBCOMMANDS ARE NOT IN PARENS ANY MORE.\n*                    KEYWORDS NONUM, NEW, CAPS, ASIS, ARE DROPPED.\n*                    TO EDIT NONUM, INVOKE THE COMMAND\n*                    BY ITS ALIAS 'EFN'.\n*                    TO EDIT ASIS, INVOKE THE COMMAND BY ITS ALIAS\n*                    'EFNA' OR 'EFSA' IF IT HAS THOSE ALIASES.\n*                    WE HAVE NO NEED FOR IT SO WE DIDNT GIVE THE\n*                    COMMAND THOSE ALIASES.\n*                    THE ABILITY TO EDIT 'NEW' HAS BEEN DROPPED BECAUSE\n*                    THE SAVE SUBCOMMAND CAN CREATE NEW DATA SETS.\n*          28MAY82 - REPLACE IKJPARS WITH OUR OWN PARSING.\n*          01JUN82 - FIX BUG. WAS IGNORING 1-BYTE OPERAND LIKE 'EF L'.\n*          10JUN82 - REMOVE REFERENCES IN COMMENTS TO NAME 'EE'.\n*                    ISSUE MESSAGE IF EDITFILE IS NOT ALLOCATED.\n         SPACE\n         GBLB  &MVS\n&MVS     SETB  1                   1 - MVS   0 - SVS,MVT\n         SPACE\nEDITFILE START\n         USING *,12\n         B     @PROLOG-*(,15)\n         DC    AL1(11),CL11'EDITFILE'\n         DC    CL16' &SYSDATE &SYSTIME '\n@SIZE    DC    0F'0',AL1(1),AL3(@DATAL) SUBPOOL AND LENGTH\n@PROLOG  STM   14,12,12(13)\n         LR    12,15\n         LR    R2,R1\n         L     R0,@SIZE\n         GETMAIN R,LV=(0)\n         ST    13,4(,1)\n         ST    1,8(,13)\n         LR    13,1\n         LR    R1,R2               RESTORE CPPL POINTER\n         USING CPPL,$CPPL\n         USING @DATA,R13\n         SPACE 1\n*              IOPL --> STPB --> LSD --> LIST\n         SPACE\n$CPPL    EQU   1\n$IOPL    EQU   7\n$LSD     EQU   9\n         SPACE\n         XC    LINKAREA(8),LINKAREA\n         MVC   PUTPTPB(12),MODEL\n         SLR   R15,R15\n         ST    R15,PTRSTCK         ZERO IKJSTCK ADDRESS\n         STH   R15,NONKV           NUM\n         STH   R15,NEWKV           OLD\n         STH   R15,ASISKV          CAPS\n         L     R15,CPPLECT\n         USING ECT,R15\n         LA    R14,ECTPCMD         POINT TO NAME OF COMMAND\n         CLI   ECTSCMD,C' '        IS THERE A SUBCOMMAND\n         BE    *+8                 NO\n         LA    R14,ECTSCMD         YES, POINT TO THAT INSTEAD\n         CLI   2(R14),C'N'         IS THIS 'EFN'\n         BNE   *+8                 NO\n         MVI   NONKV+1,2           YES, SET SWITCH TO NONUM\n         CLI   3(R14),C'A'         IS THIS 'EFNA' OR 'EFSA'\n         BNE   *+8                 NO\n         MVI   ASISKV+1,2          YES, SET SWITCH TO ASIS\n         DROP  R15                 ECT\n         LA    $IOPL,MYIOPL\n         LA    R8,MYSTPB\n         SPACE\n         USING IOPL,$IOPL\n         USING LSD,$LSD\n         SPACE\n*                             INITIALIZE THE IOPL\n         L     R2,CPPLUPT\n         ST    R2,IOPLUPT\n         L     R2,CPPLECT\n         ST    R2,IOPLECT\n         LA    R2,MYECB\n         ST    R2,IOPLECB\n*              IOPLIOPB WILL BE INITIALIZED BY THE STACK MACRO\n         SPACE\n*        STPB WILL BE INITIALIZED BY THE STACK MACRO\n         SPACE\n************************************************************\n*                                                          *\n*         EXAMINE CBUF AND FILL IN A PARSE-LIKE PDE        *\n*                                                          *\n************************************************************\n         SPACE\n         XC    PARSPDE(8),PARSPDE\n         L     R1,CPPLCBUF\n         DROP  $CPPL\n         LH    R15,0(,R1)          LENGTH+4 OF CBUF\n         SH    R15,=H'4'           LENGTH OF CBUF\n         LA    R1,4(,R1)           ADDRESS OF FIRST BYTE\n         LA    R14,0(R15,R1)       ADDRESS OF LAST BYTE + 1\n         BCTR  R14,0               ADDRESS OF LAST BYTE\nSCAN1    CLI   0(R14),C' '         FIND LAST NONBLANK\n         BNE   SCAN2               BRANCH IF FOUND\n         BCTR  R14,0               BACK UP 1 BYTE\n         BCT   R15,SCAN1           REDUCE LENGTH BY 1 AND BRANCH\n         B     SCANX               WHOLE BUFFER BLANK (NEVER HAPPENS)\nSCAN2    CLI   0(R1),C' '          FIND FIRST NONBLANK\n         BNE   SCAN3\n         LA    R1,1(,R1)           FORWARD 1 BYTE\n         BCT   R15,SCAN2           REDUCE LENGTH BY 1 AND BRANCH\n         B     SCANX               NO COMMAND (NEVER HAPPENS)\nSCAN3    CLI   0(R1),C' '          FIND FIRST BLANK AFTER COMMAND\n         BE    SCAN4\n         LA    R1,1(,R1)\n         BCT   R15,SCAN3           REDUCE LENGTH BY 1 AND BRANCH\n         B     SCANX               NO OPERANDS\nSCAN4    CLI   0(R1),C' '          FIND FIRST NONBLANK\n         BNE   SCAN5\n         LA    R1,1(,R1)           FORWARD 1 BYTE\n         BCT   R15,SCAN4           REDUCE LENGTH BY 1 AND BRANCH\n         B     SCANX               NO OPERANDS\nSCAN5    ST    R1,PARSPDE\n         STH   R15,PARSPDE+4\n         OI    PARSPDE+6,X'80'     OPERAND IS PRESENT\nSCANX    EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*         GET THE DSNAME ALLOCATED TO EDITFILE             *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R2,EFDCBW\n         MVC   0(EFDCBL,R2),EFDCB\n         LA    R15,EXLEF\n         ST    R15,EXLST(,R2)\n         LA    R0,JFCB\n         ST    R0,0(,R15)\n         MVI   0(R15),X'87'\n         SPACE\n         LA    R1,OPEN\n         MVI   0(R1),X'80'\n         SPACE\n         RDJFCB ((R2)),MF=(E,(1))\n         SPACE\n         LTR   R15,R15\n         BZ    OKJFCB\n         SPACE\n         PUTLINE PARM=PUTPTPB,OUTPUT=(MSG01,DATA),MF=(E,MYIOPL)\n         SPACE\n         LA    R15,12\n         B     EXIT\nOKJFCB   EQU   *\n         SPACE\n*\n*              BUILD THE EDIT COMMAND\n*\n         LA    R15,EDITLINE\n         MVI   0(R15),C' '\n         MVC   1(L'EDITLINE-1,R15),0(R15)\n         MVC   0(4,R15),=C'EDIT'\n         MVI   5(R15),X'7D'\n         MVC   6(44,R15),JFCB\n         LA    R1,6(,R15)\n         LA    R0,44\nDSNLOOP  CLI   0(R1),X'40'\n         BE    DSNEND\n         LA    R1,1(,R1)\n         BCT   R0,DSNLOOP\nDSNEND   CLI   JFCB+44,X'40'       MEMBER NAME PRESENT?\n         BNH   QUOTEND             NO - BRANCH\n         MVI   0(R1),C'('          PARENS AROUND MEMBER\n         LA    R1,1(,R1)\n         LA    R0,44\n         MVC   0(8,R1),JFCB+44     MOVE MEMBER NAME\nMEMLOOP  CLI   0(R1),X'40'\n         BE    MEMEND\n         LA    R1,1(,R1)\n         BCT   R0,MEMLOOP\nMEMEND   MVI   0(R1),C')'          CLOSE PARENS\n         LA    R1,1(,R1)\nQUOTEND  MVI   0(R1),X'7D'\n*                       =C'DATA  OLD NUM   CAPS'\n         MVC   2(20,R1),=C'DATA  OLD           '\n         CLI   NEWKV+1,2\n         BNE   *+10\n         MVC   8(3,R1),=C'NEW'\n         CLI   NONKV+1,2\n         BNE   *+10\n         MVC   12(5,R1),=C'NONUM'\n         CLI   ASISKV+1,2\n         BNE   *+10\n         MVC   18(4,R1),=C'ASIS'\n         LA    R1,22(,R1)\n         SLR   R1,R15              LENGTH IN R1\n         LA    R1,4(,R1)           PLUS PREFIX LENGTH\n         STH   R1,TOTALL           INITIALIZE TOTALL\n         STH   R1,LIST             SET FIRST RECORD PREFIX\n         SLR   R0,R0\n         STH   R0,LIST+2\n         LA    R1,LIST(R1)         POINT TO NEXT RECORD\n         ST    R1,NEXTPTR          SAVE NEXT RECORD ADDRESS\n         SPACE\n*\n*              ISOLATE SUBCOMMANDS\n*\n         LA    R2,PARSPDE\n         TM    6(R2),X'80'         PRESENT?\n         BZ    SCX                 NO - BRANCH\n         L     R4,0(,R2)           POINT TO STRING\n         LH    R5,4(,R2)           GET LENGTH OF STRING\n         SPACE\n         MVI   DELIMITR,C';'       DEFAULT DELIMITER IS SEMICOLON\n         SLR   R1,R1\n         IC    R1,0(,R4)           GET FIRST CHARACTER\n         LA    R1,DELMTAB(R1)      POINT TO ASSOCIATED BYTE IN TABLE\n         CLI   0(R1),1             IS IT A SUBSTITUTE DELIMITER\n         BNE   GOTDELIM            NO, BRANCH\nALTDELIM MVC   DELIMITR(1),0(R4)   USE FIRST BYTE AS DELIMITER\n         LA    R4,1(,R4)           POINT PAST DELIMITER\n         BCT   R5,*+8              REDUCE LENGTH BY 1\n         B     EXIT0               BRANCH IF NOTHING REMAINS\nGOTDELIM MVC   DELIMITR+1(1),DELIMITR MAKE A PAIR\n         LA    R14,2               CONSTANT 2\nSCNEXT   L     R6,NEXTPTR\n         LA    R6,4(,R6)           POINT PAST 2 HALFWORDS\n         SLR   R1,R1\nSCLOOP   EQU   *\n         CR    R5,R14              ARE THERE AT LEAST 2 BYTES LEFT\n         BL    SCPAIRX             NO, BYPASS PAIR CHECK\n         CLC   0(2,R4),DELIMITR    DELIMITER PAIR?\n         BNE   SCPAIRX             NO, BRANCH\n         LA    R4,1(,R4)           YES, IGNORE FIRST\n         BCTR  R5,0                REDUCE LENGTH BY 1\n         B     SCNOTDLM            TREAT SECOND AS NON DELIMITER\nSCPAIRX  CLC   0(1,R4),DELIMITR    DELIMITER?\n         BE    SCSEMI              YES - BRANCH\nSCNOTDLM IC    R0,0(,R4)           PICK UP ONE CHARACTER\n         STC   R0,0(,R6)           PUT IT IN OUTPUT AREA\n         LA    R4,1(,R4)           POINT TO NEXT INPUT\n         LA    R6,1(,R6)           POINT TO NEXT OUTPUT\n         LA    R1,1(,R1)           COUNT BYTES\n         BCT   R5,SCLOOP           LOOP UNTIL DELIMITER FOUND\nSCSEMI   LTR   R1,R1               TWO DELIMITERS IN A ROW\n         BZ    SCNULL              YES, IGNORE\n         LA    R1,4(,R1)           ADD 4 TO LENGTH\n         L     R15,NEXTPTR         POINT TO FIRST BYTE MOVED\n         STH   R1,HALF             STORE LENGTH\n         MVC   0(2,R15),HALF         IN FIRST HALFWORD\n         XC    2(2,R15),2(R15)     ZERO SECOND HALFWORD\n         LA    R15,0(R1,R15)       POINT PAST LAST BYTE\n         ST    R15,NEXTPTR         SAVE ADDRESS FOR NEXT SEGMENT\nSCNULL   LA    R4,1(,R4)           POINT PAST DELIMITER\n         LTR   R5,R5               ANY MORE INPUT\n         BZ    SCX                 NO, BRANCH\n         BCT   R5,SCNEXT           YES, LOOP TO PROCESS NEXT SEGMENT\nSCX      LA    R14,LIST\n         L     R15,NEXTPTR\n         SLR   R15,R14             GET LENGTH\n         STH   R15,LISTOTLN\n         SPACE\n*                             GET AND INITIALIZE THE LSD\n         LH    0,LISTOTLN          GETMAIN FOR LIST\n         A     0,SP78                          AND LSD (16 BYTES)\n         GETMAIN R,LV=(0)\n         LR    $LSD,1\n         LA    R14,16(,1)          REG 14 --> LIST\n         ST    R14,LSDADATA\n         ST    R14,LSDANEXT\n         SR    R14,R14\n         STH   R14,LSDRCLEN\n         LH    R14,LISTOTLN\n         STH   R14,LSDTOTLN\n         SPACE\n         BCTR  R14,0               LENGTH FOR EX\n         EX    R14,MVLIST          MOVE LIST INTO SUBPOOL 78\n         LR    R1,$IOPL\n         SPACE\n         AIF   (NOT &MVS).SKIP2\n         L     R15,16              CVTPTR\n         TM    472(R15),X'80'      IS IKJSTCK IN LPA\n         BNO   *+12                NO, BRANCH TO LOAD\n         L     R15,472(,R15)       YES, LOAD CVTSTCK\n         B     SETSTCK             BRANCH AROUND LOAD\n.SKIP2   ANOP\n         LA    R0,=CL8'IKJSTCK'\n         LOAD  EPLOC=(0)\n         LR    R15,R0              GET ENTRY POINT ADDRESS\n         LA    R15,0(,R15)         ZERO HIGH ORDER BYTE\nSETSTCK  ST    R15,PTRSTCK         SAVE ADDRESS OF IKJSTCK\n         SPACE\n         STACK PARM=(R8),STORAGE=(($LSD),PROCL),ENTRY=(15),MF=(E,(1))\n         SPACE\n         LTR   R15,R15\n         BZ    EXIT0\n         L     R15,PTRSTCK\n         LR    R1,$IOPL\n         STACK PARM=(R8),DELETE=ALL,ENTRY=(15),MF=(E,(1))\n         SPACE\n         LA    0,L'STACKMSG\n         LA    1,STACKMSG\n         TPUT (1),(0),R\n         LA    R15,16\n         B     EXIT\nEXIT0    LA    15,0\nEXIT     LR    R2,R15\n         L     R15,PTRSTCK\n         LTR   R15,R15             WAS IKJSTCK LOADED\n         BNP   EXITX               NO, BRANCH\n         LA    R0,=CL8'IKJSTCK'\n         DELETE EPLOC=(0)\nEXITX    LR    R15,R2              RESTORE RETURN CODE\n         LR    1,13\n         L     0,@SIZE\n         L     13,4(,13)\n         LR    R2,R15\n         FREEMAIN R,A=(1),LV=(0)\n         LR    R15,R2\n         LM    0,12,20(13)\n         L     14,12(,13)\n         BR    14\n         SPACE 1\n************************************************************\n*                                                          *\n*        CONSTANTS                                         *\n*                                                          *\n************************************************************\n         SPACE\nMVLIST   MVC   16(0,1),LIST        MOVE LIST TO SUBPOOL 78 AFTER LSD\n         SPACE\nMODEL    PUTLINE OUTPUT=(1,TERM,SINGLE,DATA),                          X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\nMODELL   EQU   *-MODEL\n         SPACE\nMSG01    DC   0H'0',AL2(MSG01L,0),C'FILENAME EDITFILE IS NOT ALLOCATED'\nMSG01L   EQU   *-MSG01\n         SPACE\nSTACKMSG DC    CL28'STACK ERROR'\nSP78     DC    0F'0',AL1(78),AL3(16) SUBPOOL 78\nLYSTOTLN DC    0H'0',AL2(LYSTLEN)  T O T A L    L E N G T H\nLYST     DC   AL2(39+4,0),CL39'TERM LINES(26) LINESIZE(73) INPUT(ATTN)'\n*        DC   AL2(XX+4,0),CLXX'ANOTHER COMMAND CAN BE PLACED HERE'\n*        DC   AL2(YY+4,0),CLYY'AND OTHERS. LISTOTLN MAX IS 256'\nLYSTLEN  EQU   *-LYST\n         SPACE\n         PRINT NOGEN\nEFDCB    DCB   DDNAME=EDITFILE,MACRF=(GL),DSORG=PS,EXLST=0\nEFDCBL   EQU   *-EFDCB\n         PRINT GEN\n         SPACE\n         LTORG\nDELMTAB  DC    0D'0'\n         DC    129AL1(1)\n         DC    127AL1(0)           ALPHANUMERICS ARE NOT DELIMITERS\n         ORG   DELMTAB+X'40'\n         DC    AL1(0)              BLANK IS NOT A DELIMITER\n         ORG   DELMTAB+C'%'\n         DC    AL1(0)              PERCENT SIGN NOT A DELIMITER\n         ORG   DELMTAB+C'$'\n         DC    AL1(0)              DOLLAR SIGN NOT A DELIMITER\n         ORG   DELMTAB+C'@'\n         DC    AL1(0)              AT SIGN NOT A DELIMITER\n         ORG   DELMTAB+C'#'\n         DC    AL1(0)              POUND SIGN NOT A DELIMITER\n         ORG\nPATCH    DC    4D'0'               PATCH AREA\n         SPACE\nDDNAM    EQU   40                  DCB OFFSET\nEXLST    EQU   36                  DCB OFFSET\n         DC    0D'0'               END MAIN CSECT\n         SPACE\n************************************************************\n*                                                          *\n*        DSECTS                                            *\n*                                                          *\n************************************************************\n         SPACE\n@DATA    DSECT\n         DS    18F\nDOUBLE   DS    D\nHALF     EQU   DOUBLE,2\nLINKAREA DS    2F\nPTRSTCK  DS    F\nMYECB    DS    F\nOPEN     DS    F\nEFDCBW   DS    0D,(EFDCBL)X\nEXLEF    DS    F\nJFCB     DS    0D,176X\nMYIOPL   DS    4F\nMYSTPB   DS    8F\nTOTALL   DS    H\nLISTOTLN DS    H\nDELIMITR DS    C\nDELIMIT2 DS    C\nPARSPDE  DS    2F\nNONKV    DS    H\nNEWKV    DS    H\nASISKV   DS    H\nNEXTPTR  DS    F\nPUTPTPB  DS    3F\nLIST     DS    0D,F\nEDITLINE DS    CL82       4+1+1+44+10+1+1+5+1+3+1+5+1+4\n         DS    1024X\n         DS    0D\n@DATAL   EQU   *-@DATA\n         SPACE\n         IKJCPPL\n         SPACE 2\n         IKJIOPL\n         SPACE 2\n         IKJLSD\n         SPACE 2\n         IKJSTPB\n         SPACE 2\n         IKJECT\n         SPACE 2\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "EFOLD": {"ttr": 771, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x80%O\\x00\\x80%O\\x14\\x18\\x01\\x9c\\x01\\x9c\\x00\\x00\\xc1\\xe2\\xc6\\xc9\\xf0\\xf5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1980-09-10T00:00:00", "modifydate": "1980-09-10T14:18:00", "lines": 412, "newlines": 412, "modlines": 0, "user": "ASFI05"}, "text": "         TITLE '     E D I T F I L E   ( E F )                '\n************************************************************\n*                                                          *\n*           'EF' TSO COMMAND                               *\n*                                                          *\n************************************************************\n         SPACE\n*        WRITTEN BY. BILL GODFREY, PLANNING RESEARCH CORPORATION.\n*        INSTALLATION. PRC COMPUTER CENTER INC, MCLEAN VA.\n*        DATE WRITTEN. APRIL 26 1977.\n*        DATE UPDATED. SEPTEMBER 10 1980.\n*        DESCRIPTION.\n*            THIS COMMAND STACKS A LIST OF EDIT SUBCOMMANDS TO BE\n*            EXECUTED AGAINST THE DATASET ALLOCATED TO F(EDITFILE).\n*\n*            THE SUBCOMMANDS ARE SPECIFIED AS A LIST IN PARENTHESES,\n*            WITH THE FIRST CHARACTER DEFINING THE DELIMITER THAT\n*            SEPARATES THE SUBCOMMANDS IN THE LIST.\n*\n*            EXAMPLE: ALLOC FI(EDITFILE) DA(ABC.DEF.GHI.DATA) OLD\n*                     EF (,V,FIND /LOAD/ 10,DOWN)\n*                     EF (.V.BOTTOM.INSERT END.SAVE)\n*\n*            IT WAS DESIGNED FOR A SUBSYSTEM THAT ALLOWS TSO COMMANDS\n*            TO BE ENTERED ON A CONSOLE, BUT THE SUBSYSTEM'S DESIGN\n*            REQUIRED ALL SUBCOMMANDS TO BE ON THE SAME LINE AS THE\n*            COMMAND.  THIS REQUIRED RE-TYPING THE EDIT COMMAND AND\n*            THE DATA SET NAME FOR EACH LINE, WHICH WAS TIRESOME AND\n*            DIDN'T LEAVE MUCH ROOM FOR THE SUBCOMMANDS.  THIS COMMAND\n*            BUILDS AN EDIT COMMAND FROM THE DATA SET NAME ALLOCATED\n*            TO THE FILENAME 'EDITFILE', STACKS IT, THEN STACKS THE\n*            SPECIFIED SUBCOMMANDS.\n*\n*            NOTE - INSTALLATIONS THAT HAVE THE PCF PRODUCT CANNOT\n*            USE THE SEMICOLON IN THIS COMMAND, BECAUSE PCF WILL\n*            SEE IT AND STRIP IT OUT BEFORE THIS COMMAND SEES IT.\n         SPACE\n         GBLB  &MVS\n&MVS     SETB  1                   1 - MVS   0 - SVS,MVT\n         SPACE\nEDITFILE START\n         USING *,12\n         B     @PROLOG-*(,15)\n         DC    AL1(11),CL11'EDITFILE'\n         DC    CL16' &SYSDATE &SYSTIME '\n@SIZE    DC    0F'0',AL1(1),AL3(@DATAL) SUBPOOL AND LENGTH\n@PROLOG  STM   14,12,12(13)\n         LR    12,15\n         LR    R2,R1\n         L     R0,@SIZE\n         GETMAIN R,LV=(0)\n         ST    13,4(,1)\n         ST    1,8(,13)\n         LR    13,1\n         LR    R1,R2               RESTORE CPPL POINTER\n         USING @DATA,R13\n         SPACE 1\n*              IOPL --> STPB --> LSD --> LIST\n         SPACE\n$CPPL    EQU   1\n$IOPL    EQU   7\n$LSD     EQU   9\n         SPACE\n         XC    LINKAREA(8),LINKAREA\n         SLR   R15,R15\n         ST    R15,PTRSTCK         ZERO IKJSTCK ADDRESS\n         LA    $IOPL,MYIOPL\n         LA    R8,MYSTPB\n         SPACE\n         USING CPPL,$CPPL\n         USING IOPL,$IOPL\n         USING LSD,$LSD\n         SPACE\n*                             INITIALIZE THE IOPL\n         L     R2,CPPLUPT\n         ST    R2,IOPLUPT\n         L     R2,CPPLECT\n         ST    R2,IOPLECT\n         LA    R2,MYECB\n         ST    R2,IOPLECB\n*              IOPLIOPB WILL BE INITIALIZED BY THE STACK MACRO\n         SPACE\n*        STPB WILL BE INITIALIZED BY THE STACK MACRO\n         SPACE\n************************************************************\n*                                                          *\n*        SET UP PPL FOR PARSE                              *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R15,MYPPL\n         USING PPL,R15\n         MVC   PPLUPT(4),CPPLUPT\n         MVC   PPLECT(4),CPPLECT\n         LA    R0,MYECB\n         ST    R0,PPLECB\n         XC    MYECB,MYECB\n*        L     R0,=A(EFPCL)\n         LA    R0,PCLADDR\n         ST    R0,PPLPCL\n         LA    R0,MYANS\n         ST    R0,PPLANS\n         MVC   PPLCBUF(4),CPPLCBUF\n         ST    R13,PPLUWA\n         DROP  R15                 PPL\n         SPACE 1\n************************************************************\n*                                                          *\n*        CALL THE PARSE SERVICE ROUTINE                    *\n*                                                          *\n************************************************************\n         SPACE 1\n         LR    R1,R15              POINT TO PPL\n         AIF   (NOT &MVS).SKIP1\n         L     R15,16              CVTPTR\n         TM    524(R15),X'80'      IF HI ORDER BIT NOT ON\n         BNO   PARSELNK               THEN DO LINK, NOT CALL\n         L     R15,524(,R15)       CVTPARS\n         BALR  R14,R15             CALL IKJPARS\n         B     PARSEEXT            SKIP AROUND LINK\nPARSELNK EQU   *\n.SKIP1   ANOP\n         LINK  EP=IKJPARSE,SF=(E,LINKAREA)\nPARSEEXT EQU   *\n         SPACE 1\n         LTR   R15,R15\n         BZ    OKPARSE\n         LA    R15,12\n         B     EXIT\nOKPARSE  EQU   *\n         L     R3,MYANS\n         USING IKJPARMD,R3\n         SPACE\n         LA    R2,EFDCBW\n         MVC   0(EFDCBL,R2),EFDCB\n         LA    R15,EXLEF\n         ST    R15,EXLST(,R2)\n         LA    R0,JFCB\n         ST    R0,0(,R15)\n         MVI   0(R15),X'87'\n         SPACE\n         LA    R1,OPEN\n         MVI   0(R1),X'80'\n         SPACE\n         RDJFCB ((R2)),MF=(E,(1))\n         SPACE\n         LTR   R15,R15\n         BZ    OKJFCB\n         LA    R15,12\n         B     EXIT\nOKJFCB   EQU   *\n         SPACE\n*\n*              BUILD THE EDIT COMMAND\n*\n         LA    R15,EDITLINE\n         MVI   0(R15),C' '\n         MVC   1(L'EDITLINE-1,R15),0(R15)\n         MVC   0(4,R15),=C'EDIT'\n         MVI   5(R15),X'7D'\n         MVC   6(44,R15),JFCB\n         LA    R1,6(,R15)\n         LA    R0,44\nDSNLOOP  CLI   0(R1),X'40'\n         BE    DSNEND\n         LA    R1,1(,R1)\n         BCT   R0,DSNLOOP\nDSNEND   CLI   JFCB+44,X'40'       MEMBER NAME PRESENT?\n         BNH   QUOTEND             NO - BRANCH\n         MVI   0(R1),C'('          PARENS AROUND MEMBER\n         LA    R1,1(,R1)\n         LA    R0,44\n         MVC   0(8,R1),JFCB+44     MOVE MEMBER NAME\nMEMLOOP  CLI   0(R1),X'40'\n         BE    MEMEND\n         LA    R1,1(,R1)\n         BCT   R0,MEMLOOP\nMEMEND   MVI   0(R1),C')'          CLOSE PARENS\n         LA    R1,1(,R1)\nQUOTEND  MVI   0(R1),X'7D'\n*                       =C'DATA  OLD NUM   CAPS'\n         MVC   2(20,R1),=C'DATA  OLD           '\n         CLI   NEWKW+1,2\n         BNE   *+10\n         MVC   8(3,R1),=C'NEW'\n         CLI   NONKW+1,2\n         BNE   *+10\n         MVC   12(5,R1),=C'NONUM'\n         CLI   ASISKW+1,2\n         BNE   *+10\n         MVC   18(4,R1),=C'ASIS'\n         LA    R1,22(,R1)\n         SLR   R1,R15              LENGTH IN R1\n         LA    R1,4(,R1)           PLUS PREFIX LENGTH\n         STH   R1,TOTALL           INITIALIZE TOTALL\n         STH   R1,LIST             SET FIRST RECORD PREFIX\n         SLR   R0,R0\n         STH   R0,LIST+2\n         LA    R1,LIST(R1)         POINT TO NEXT RECORD\n         ST    R1,NEXTPTR          SAVE NEXT RECORD ADDRESS\n         SPACE\n*\n*              ISOLATE SUBCOMMANDS\n*\n         LA    R2,SUBCHAIN\n         TM    6(R2),X'80'         PRESENT?\n         BZ    SCX                 NO - BRANCH\n         LH    R5,4(,R2)           GET LENGTH\n         CH    R5,=H'2'            LENGTH AT LEAST 2?\n         BL    SCX                 NO - BRANCH\n         L     R4,0(,R2)           POINT TO STRING\n         MVC   DELIMITR(1),0(R4)   SAVE THE DELIMITER\n         LA    R4,1(,R4)           POINT PAST THE DELIMITER\n         BCTR  R5,0                REDUCE THE LENGTH BY 1\nSCNEXT   L     R6,NEXTPTR\n         LA    R6,4(,R6)\n         SLR   R1,R1\nSCLOOP   CLC   0(1,R4),DELIMITR    DELIMITER?\n         BE    SCSEMI              YES - BRANCH\n         IC    R0,0(,R4)\n         STC   R0,0(,R6)\n         LA    R4,1(,R4)\n         LA    R6,1(,R6)\n         LA    R1,1(,R1)\n         BCT   R5,SCLOOP\nSCSEMI   LTR   R1,R1\n         BZ    SCNULL\n         LA    R1,4(,R1)\n         L     R15,NEXTPTR\n         STH   R1,HALF\n         MVC   0(2,R15),HALF\n         XC    2(2,R15),2(R15)\n         LA    R15,0(R1,R15)\n         ST    R15,NEXTPTR\nSCNULL   LA    R4,1(,R4)\n         LTR   R5,R5\n         BZ    SCX\n         BCT   R5,SCNEXT\nSCX      LA    R14,LIST\n         L     R15,NEXTPTR\n         SLR   R15,R14             GET LENGTH\n         STH   R15,LISTOTLN\n         IKJRLSA MYANS\n         SPACE\n*                             GET AND INITIALIZE THE LSD\n         LH    0,LISTOTLN          GETMAIN FOR LIST\n         A     0,SP78                          AND LSD (16 BYTES)\n         GETMAIN R,LV=(0)\n         LR    $LSD,1\n         LA    R14,16(,1)          REG 14 --> LIST\n         ST    R14,LSDADATA\n         ST    R14,LSDANEXT\n         SR    R14,R14\n         STH   R14,LSDRCLEN\n         LH    R14,LISTOTLN\n         STH   R14,LSDTOTLN\n         SPACE\n         BCTR  R14,0               LENGTH FOR EX\n         EX    R14,MVLIST          MOVE LIST INTO SUBPOOL 78\n         LR    R1,$IOPL\n         SPACE\n         AIF   (NOT &MVS).SKIP2\n         L     R15,16              CVTPTR\n         TM    472(R15),X'80'      IS IKJSTCK IN LPA\n         BNO   *+12                NO, BRANCH TO LOAD\n         L     R15,472(,R15)       YES, LOAD CVTSTCK\n         B     SETSTCK             BRANCH AROUND LOAD\n.SKIP2   ANOP\n         LA    R0,=CL8'IKJSTCK'\n         LOAD  EPLOC=(0)\n         LR    R15,R0              GET ENTRY POINT ADDRESS\n         LA    R15,0(,R15)         ZERO HIGH ORDER BYTE\nSETSTCK  ST    R15,PTRSTCK         SAVE ADDRESS OF IKJSTCK\n         SPACE\n         STACK PARM=(R8),STORAGE=(($LSD),PROCL),ENTRY=(15),MF=(E,(1))\n         SPACE\n         LTR   R15,R15\n         BZ    EXIT0\n         L     R15,PTRSTCK\n         LR    R1,$IOPL\n         STACK PARM=(R8),DELETE=ALL,ENTRY=(15),MF=(E,(1))\n         SPACE\n         LA    0,L'STACKMSG\n         LA    1,STACKMSG\n         TPUT (1),(0),R\n         LA    R15,16\n         B     EXIT\nEXIT0    LA    15,0\nEXIT     LR    R2,R15\n         L     R15,PTRSTCK\n         LTR   R15,R15             WAS IKJSTCK LOADED\n         BNP   EXITX               NO, BRANCH\n         LA    R0,=CL8'IKJSTCK'\n         DELETE EPLOC=(0)\nEXITX    LR    R15,R2              RESTORE RETURN CODE\n         LR    1,13\n         L     0,@SIZE\n         L     13,4(,13)\n         LR    R2,R15\n         FREEMAIN R,A=(1),LV=(0)\n         LR    R15,R2\n         LM    0,12,20(13)\n         L     14,12(,13)\n         BR    14\n         SPACE 1\n************************************************************\n*                                                          *\n*        CONSTANTS                                         *\n*                                                          *\n************************************************************\n         SPACE\nMVLIST   MVC   16(0,1),LIST        MOVE LIST TO SUBPOOL 78 AFTER LSD\nSTACKMSG DC    CL28'STACK ERROR'\nSP78     DC    0F'0',AL1(78),AL3(16) SUBPOOL 78\nLYSTOTLN DC    0H'0',AL2(LYSTLEN)  T O T A L    L E N G T H\nLYST     DC   AL2(39+4,0),CL39'TERM LINES(26) LINESIZE(73) INPUT(ATTN)'\n*        DC   AL2(XX+4,0),CLXX'ANOTHER COMMAND CAN BE PLACED HERE'\n*        DC   AL2(YY+4,0),CLYY'AND OTHERS. LISTOTLN MAX IS 256'\nLYSTLEN  EQU   *-LYST\n         SPACE\n         PRINT NOGEN\nEFDCB    DCB   DDNAME=EDITFILE,MACRF=(GL),DSORG=PS,EXLST=0\nEFDCBL   EQU   *-EFDCB\n         PRINT GEN\n         SPACE\n         LTORG\nPATCH    DC    4D'0'               PATCH AREA\n         SPACE\nDDNAM    EQU   40                  DCB OFFSET\nEXLST    EQU   36                  DCB OFFSET\nPCLADDR  DC    0D'0'               END MAIN CSECT, BEGIN PCL CSECT\n         SPACE\n************************************************************\n*                                                          *\n*        PARSE PARAMETERS                                  *\n*                                                          *\n************************************************************\n         SPACE\n         PRINT NOGEN\nEFPCL    IKJPARM\nSUBCHAIN IKJPOSIT PSTRING\nNEWKW    IKJKEYWD\n         IKJNAME 'OLD'\n         IKJNAME 'NEW'\nNONKW    IKJKEYWD\n         IKJNAME 'NUM'\n         IKJNAME 'NONUM'\nASISKW   IKJKEYWD\n         IKJNAME 'CAPS'\n         IKJNAME 'ASIS'\n         IKJENDP\n         SPACE\n         PRINT GEN\n         SPACE\n************************************************************\n*                                                          *\n*        DSECTS                                            *\n*                                                          *\n************************************************************\n         SPACE\n@DATA    DSECT\n         DS    18F\nDOUBLE   DS    D\nHALF     EQU   DOUBLE,2\nLINKAREA DS    2F\nPTRSTCK  DS    F\nMYPPL    DS    7F\nMYANS    DS    F\nMYECB    DS    F\nOPEN     DS    F\nEFDCBW   DS    0D,(EFDCBL)X\nEXLEF    DS    F\nJFCB     DS    0D,176X\nMYIOPL   DS    4F\nMYSTPB   DS    8F\nTOTALL   DS    H\nLISTOTLN DS    H\nDELIMITR DS    C\nNEXTPTR  DS    F\nLIST     DS    0D,F\nEDITLINE DS    CL82       4+1+1+44+10+1+1+5+1+3+1+5+1+4\n         DS    256X\n         DS    0D\n@DATAL   EQU   *-@DATA\n         SPACE\n         IKJCPPL\n         SPACE 2\n         IKJIOPL\n         SPACE 2\n         IKJPPL\n         SPACE 2\n         IKJLSD\n         SPACE 2\n         IKJSTPB\n         SPACE 2\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SSSOPROC": {"ttr": 778, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x82\\x16/\\x00\\x82\\x16/\\x15\\x12\\x00\\x05\\x00\\x05\\x00\\x00\\xc1\\xe2\\xd4\\xc9\\xf0\\xf5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1982-06-11T00:00:00", "modifydate": "1982-06-11T15:12:00", "lines": 5, "newlines": 5, "modlines": 0, "user": "ASMI05"}, "text": "//SSSO    PROC BIT=1,S=1,NAME=TSSO\n//SSSO    EXEC PGM=TSSOUPSS,PARM='&BIT.&S.&NAME',TIME=1\n//*       THIS PROC SETS THE SSCTUPSS BIT ON OR OFF IN THE SSCT\n//*       OF THE TSSO SUBSYSTEM AND ISSUES 'S TSSO'.\n//*       IF S=0, IT DOES NOT ISSUE THE START COMMAND.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "STACK": {"ttr": 780, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x81\\x13/\\x00\\x81\\x13/\\x134\\x01\\xfa\\x01\\xfa\\x00\\x00\\xc1\\xe2\\xc6\\xc9\\xf0\\xf5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1981-05-12T00:00:00", "modifydate": "1981-05-12T13:34:00", "lines": 506, "newlines": 506, "modlines": 0, "user": "ASFI05"}, "text": "         TITLE '     S T A C K                '\n************************************************************\n*                                                          *\n*           'STACK' TSO COMMAND                            *\n*                                                          *\n************************************************************\n         SPACE\n*        WRITTEN BY. BILL GODFREY,  PLANNING RESEARCH CORPORATION.\n*        INSTALLATION. PRC COMPUTER CENTER INC, MCLEAN VA.\n*        DATE WRITTEN. APRIL 27 1977.\n*        DATE UPDATED. MAY 12 1981.\n*        DESCRIPTION.\n*         THIS COMMAND STACKS A LIST OF COMMANDS.\n*         THE LIST OF COMMANDS IS SPECIFIED AS AN OPERAND OF\n*         STACK, WITH THE COMMANDS SEPARATED BY A SEMICOLON.\n*         FOR EXAMPLE:\n*            STACK EDIT X DATA;V;FIND /ABC/;FIND /WXY/;DOWN;L *\n*\n*         NOTE: IF THIS COMMAND IS USED ON A SYSTEM THAT HAS THE 'PCF'\n*         PRODUCT, THEN TWO SEMICOLONS WOULD BE REQUIRED BECAUSE PCF\n*         MODIFIES THE COMMAND BUFFER BEFORE THIS COMMAND SEES IT.\n*         BUT THOSE WHO HAVE PCF DO NOT NEED TO USE THIS COMMAND.\n*\n*         IF THE COMMAND'S ALIAS 'STACKL' IS USED, EACH COMMAND\n*         WILL BE LISTED AS IT EXECUTES.\n*\n*         IF A COMMAND TO BE STACKED REQUIRES A SEMICOLON, CODE\n*         A PAIR OF SEMICOLONS OR USE A SUBSTITUTE DELIMITER.\n*         A PAIR OF SEMICOLONS WILL BE CHANGED TO ONE SEMICOLON\n*         AND WILL NOT BE TREATED AS A DELIMITER.\n*\n*         IF THE FIRST CHARACTER OF THE OPERAND IS A SUBSTITUTE\n*         DELIMITER CHARACTER, THAT CHARACTER WILL BE USED INSTEAD\n*         OF THE SEMICOLON TO SEPARATE THE COMMANDS.\n*         FOR EXAMPLE:\n*             STACK -EDIT X DATA-V-FIND /ABC/-DOWN\n*         THE SUBSTITUTE DELIMITER MAY BE ANY CHARACTER EXCEPT\n*          BLANK, ALPHANUMERIC, NATIONAL (POUND, AT, DOLLAR), PERCENT.\n*         LIKE THE SEMICOLON, A PAIR OF SUBSTITUTE DELIMITERS\n*         WILL BE CHANGED TO ONE AND NOT TREATED AS A DELIMITER.\n*\n*         AN EARLIER VERSION OF THIS COMMAND REQUIRED THE COMMANDS\n*         TO BE IN PARENTHESES. THIS VERSION ATTEMPTS TO RECOGNIZE\n*         THE OLD SYNTAX AND REMOVE THE PARENTHESES IF THEY ARE USED.\n*\n*        LOG OF CHANGES.\n*         11MAY81 - SYNTAX CHANGED: COMMANDS NO LONGER IN PARENTHESES.\n*                   (COMMAND WILL REMOVE PARENS IF PRESENT).\n*                   LIST KEYWORD CANNOT BE SUPPORTED WITH NEW SYNTAX,\n*                   BUT USE OF ALIAS STACKL PROVIDES EQUAL RESULTS.\n*         12MAY81 - DELIMITER PAIRS NO LONGER TREATED AS DELIMITERS BUT\n*                   AS A SINGLE CHARACTER THAT MATCHES THE DELIMITER.\n*                   MAX LENGTH INCREASED FROM 256 TO 1024.\n         SPACE\n         GBLB  &MVS\n&MVS     SETB  1                   1 - MVS   0 - SVS,MVT\n         SPACE\nSTACK    START\n         USING *,R12\n         B     @PROLOG-*(,15)\n         DC    AL1(11),CL11'STACK   '\n         DC    CL16' &SYSDATE &SYSTIME '\n@SIZE    DC    0F'0',AL1(1),AL3(@DATAL)\n@PROLOG  STM   14,12,12(13)\n         LR    R12,R15\n         LR    R2,R1\n         USING CPPL,R2\n         L     R0,@SIZE\n         GETMAIN R,LV=(0)\n         ST    13,4(,1)\n         ST    1,8(,13)\n         LR    13,1\n         USING @DATA,R13\n         SPACE 1\n*              IOPL --> STPB --> LSD --> LIST\n         SPACE\n$IOPL    EQU   7\n$LSD     EQU   9\n         SPACE\n         XC    LINKAREA(8),LINKAREA\n         SLR   R15,R15\n         ST    R15,PTRSTCK         ZERO IKJSTCK ADDRESS\n         ST    R15,MYANS           ZERO PDL ADDRESS FOR IKJRLSA\n         STC   R15,LISTOPT         NO LIST\n         L     R1,CPPLECT\n         USING ECT,R1\n         LA    R14,ECTPCMD         POINT TO NAME OF COMMAND\n         CLI   ECTSCMD,C' '        IS THERE A SUBCOMMAND\n         BE    *+8                 NO\n         LA    R14,ECTSCMD         YES, POINT TO THAT INSTEAD\n         CLC   0(8,R14),=CL8'STACKL' IS COMMAND STACKL\n         BNE   *+8                 NO\n         MVI   LISTOPT,1           YES, SET LIST SWITCH ON\n         DROP  R1                  ECT\n         LA    $IOPL,MYIOPL\n         LA    R8,MYSTPB\n         SPACE\n         USING IOPL,$IOPL\n         USING LSD,$LSD\n         SPACE\n*                             INITIALIZE THE IOPL\n         L     R0,CPPLUPT\n         ST    R0,IOPLUPT\n         L     R0,CPPLECT\n         ST    R0,IOPLECT\n         LA    R0,MYECB\n         ST    R0,IOPLECB\n*              IOPLIOPB WILL BE INITIALIZED BY THE STACK MACRO\n         SPACE\n*        STPB WILL BE INITIALIZED BY THE STACK MACRO\n         SPACE\n************************************************************\n*                                                          *\n*        SET CBUF OFFSET BACK ONE SPACE                    *\n*                                                          *\n************************************************************\n         SPACE\n*              THE PARSE SERVICE ROUTINE WILL NOT CORRECTLY HANDLE\n*              THE SITUATION WHERE THE FIRST POSITIONAL PARAMETER\n*              IS DEFINED WITH AN 'IKJIDENT SPACE' MACRO UNLESS THE\n*              CBUF OFFSET POINTS TO A LEADING SPACE OR COMMA.\n*              THIS OFFSET IS NORMALLY SET BY IKJSCAN TO POINT TO\n*              THE FIRST OPERAND, SO WE MUST BACK IT UP ONE BYTE.\n*              THE INSERT SUBCOMMAND (IKJEBEIS) OF EDIT, THE ONLY\n*              IBM CODE THAT HAS THIS SITUATION, ALSO RESETS THE\n*              CBUF OFFSET (THOUGH IT SETS IT BACK TO THE FIRST\n*              SPACE FOLLOWING THE SUBCOMMAND NAME).\n         SPACE\n         L     R1,CPPLECT\n         USING ECT,R1\n         TM    ECTSWS,ECTNOPD      ANY OPERAND?\n         BO    EXIT0               NO, BRANCH\n         DROP  R1                  ECT\n         SPACE\n         L     R1,CPPLCBUF\n         LA    R15,4(,R1)          POINT TO BUFFER\n         AH    R15,2(,R1)          POINT TO OPERAND\n         CLI   0(R15),C' '         IS IT A SPACE (NEVER IS)\n         BE    OFFSETOK            YES, LEAVE OFFSET UNCHANGED\n         BCTR  R15,0               BACK UP ONE\n         CLI   0(R15),C' '         IS IT PRECEDED BY A SPACE\n         BE    OFFBKUP             YES, GO BACK UP 1\n         CLI   0(R15),C','         IS IT PRECEDED BY A COMMA\n         BNE   OFFSETOK            NO, BRANCH\nOFFBKUP  LH    R15,2(,R1)          YES, GET THE OFFSET\n         BCTR  R15,0               REDUCE IT BY ONE\n         STH   R15,2(,R1)          REPLACE THE OFFSET\nOFFSETOK EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*        SET UP PPL FOR PARSE                              *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R15,MYPPL\n         USING PPL,R15\n         MVC   PPLUPT(4),CPPLUPT\n         MVC   PPLECT(4),CPPLECT\n         LA    R0,MYECB\n         ST    R0,PPLECB\n         XC    MYECB,MYECB\n*        L     R0,=A(STACKPCL)\n         LA    R0,PCLADDR\n         ST    R0,PPLPCL\n         LA    R0,MYANS\n         ST    R0,PPLANS\n         MVC   PPLCBUF(4),CPPLCBUF\n         ST    R13,PPLUWA\n         DROP  R15                 PPL\n         SPACE 1\n************************************************************\n*                                                          *\n*        CALL THE PARSE SERVICE ROUTINE                    *\n*                                                          *\n************************************************************\n         SPACE 1\n         LR    R1,R15              POINT TO PPL\n         AIF   (NOT &MVS).SKIP1\n         L     R15,16              CVTPTR\n         TM    524(R15),X'80'      IF HI ORDER BIT NOT ON\n         BNO   PARSELNK               THEN DO LINK, NOT CALL\n         L     R15,524(,R15)       CVTPARS\n         BALR  R14,R15             CALL IKJPARS\n         B     PARSEEXT            SKIP AROUND LINK\nPARSELNK EQU   *\n.SKIP1   ANOP\n         LINK  EP=IKJPARS,SF=(E,LINKAREA)\nPARSEEXT EQU   *\n         SPACE 1\n         LTR   R15,R15\n         BZ    OKPARSE\n         LA    R15,12\n         B     EXIT\nOKPARSE  EQU   *\n         L     R3,MYANS\n         USING IKJPARMD,R3\n         SPACE\n         LA    R1,LIST             POINT TO IN-STORAGE LIST\n         ST    R1,NEXTPTR          SAVE NEXT RECORD ADDRESS\n         SPACE\n*\n*              ISOLATE SUBCOMMANDS\n*\n         LA    R2,SUBCHAIN\n         TM    6(R2),X'80'         PRESENT?\n         BZ    EXIT0               NO - BRANCH\n         LH    R5,4(,R2)           GET LENGTH\n         LTR   R5,R5               IS THERE ANYTHING\n         BZ    EXIT0               NO - BRANCH\n         L     R4,0(,R2)           POINT TO STRING\n         SPACE\n         LR    R1,R4               THESE 6 INSTRUCTIONS ARE FOR COMMA\n         BCTR  R1,0                BACK UP 1\n         CLI   0(R1),C','          IS IT PRECEDED BY A COMMA\n         BNE   COMMAX              NO\n         LR    R4,R1               POINT TO COMMA\n         LA    R5,1(,R5)           INCREASE LENGTH BY 1\nCOMMAX   EQU   *\n         SPACE\n         CLI   0(R4),C'('          CHECK LEFT PAREN (OLD SYNTAX)\n         BNE   PARENX\n         BCT   R5,*+8              REDUCE LENGTH BY 1\n         B     EXIT0               BRANCH IF NOTHING REMAINS\n         LA    R1,0(R5,R4)         POINT TO LAST BYTE\n         LA    R4,1(,R4)           IGNORE LEFT PAREN\n         CLI   0(R1),C')'          CLOSING LEFT PAREN\n         BNE   PARENL              NO, BRANCH\n         MVI   0(R1),C' '          YES, ERASE IT\n         BCT   R5,*+8              REDUCE LENGTH BY 1\n         B     EXIT0               BRANCH IF NOTHING REMAINS\n         B     PARENX\nPARENL   SH    R1,=H'2'\n         CLI   0(R1),C')'\n         BNE   PARENLI\n         MVC   WORK(2),1(R1)\n         OI    WORK+1,X'40'        CAPS\n         CLC   WORK(2),=C' L'\n         BNE   PARENX\n         MVI   LISTOPT,1\n         MVC   0(3,R1),BLANKS      ERASE ') L'\n         SH    R5,=H'3'            REDUCE LENGTH BY 3\n         BP    PARENX\n         B     EXIT0\nPARENLI  SH    R1,=H'3'\n         CLI   0(R1),C')'\n         BNE   PARENX\n         MVC   WORK(5),1(R1)\n         OC    WORK+1(4),BLANKS    CAPS\n         CLC   WORK(5),=C' LIST'\n         BNE   PARENX\n         MVI   LISTOPT,1\n         MVC   0(6,R1),BLANKS      ERASE ') LIST'\n         SH    R5,=H'6'            REDUCE LENGTH BY 6\n         BP    PARENX\n         B     EXIT0\nPARENX   EQU   *\n         SPACE\n         MVI   DELIMITR,C';'       DEFAULT DELIMITER IS SEMICOLON\n         SLR   R1,R1\n         IC    R1,0(,R4)           GET FIRST CHARACTER\n         LA    R1,DELMTAB(R1)      POINT TO ASSOCIATED BYTE IN TABLE\n         CLI   0(R1),1             IS IT A SUBSTITUTE DELIMITER\n         BNE   GOTDELIM            NO, BRANCH\nALTDELIM MVC   DELIMITR(1),0(R4)   USE FIRST BYTE AS DELIMITER\n         LA    R4,1(,R4)           POINT PAST DELIMITER\n         BCT   R5,*+8              REDUCE LENGTH BY 1\n         B     EXIT0               BRANCH IF NOTHING REMAINS\nGOTDELIM MVC   DELIMITR+1(1),DELIMITR MAKE A PAIR\n         LA    R14,2               CONSTANT 2\nSCNEXT   L     R6,NEXTPTR\n         LA    R6,4(,R6)           POINT PAST 2 HALFWORDS\n         SLR   R1,R1\nSCLOOP   EQU   *\n         CR    R5,R14              ARE THERE AT LEAST 2 BYTES LEFT\n         BL    SCPAIRX             NO, BYPASS PAIR CHECK\n         CLC   0(2,R4),DELIMITR    DELIMITER PAIR?\n         BNE   SCPAIRX             NO, BRANCH\n         LA    R4,1(,R4)           YES, IGNORE FIRST\n         BCTR  R5,0                REDUCE LENGTH BY 1\n         B     SCNOTDLM            TREAT SECOND AS NON DELIMITER\nSCPAIRX  CLC   0(1,R4),DELIMITR    DELIMITER?\n         BE    SCSEMI              YES - BRANCH\nSCNOTDLM IC    R0,0(,R4)           PICK UP ONE CHARACTER\n         STC   R0,0(,R6)           PUT IT IN OUTPUT AREA\n         LA    R4,1(,R4)           POINT TO NEXT INPUT\n         LA    R6,1(,R6)           POINT TO NEXT OUTPUT\n         LA    R1,1(,R1)           COUNT BYTES\n         BCT   R5,SCLOOP           LOOP UNTIL DELIMITER FOUND\nSCSEMI   LTR   R1,R1               TWO DELIMITERS IN A ROW\n         BZ    SCNULL              YES, IGNORE\n         LA    R1,4(,R1)           ADD 4 TO LENGTH\n         L     R15,NEXTPTR         POINT TO FIRST BYTE MOVED\n         STH   R1,HALF             STORE LENGTH\n         MVC   0(2,R15),HALF         IN FIRST HALFWORD\n         XC    2(2,R15),2(R15)     ZERO SECOND HALFWORD\n         LA    R15,0(R1,R15)       POINT PAST LAST BYTE\n         ST    R15,NEXTPTR         SAVE ADDRESS FOR NEXT SEGMENT\nSCNULL   LA    R4,1(,R4)           POINT PAST DELIMITER\n         LTR   R5,R5               ANY MORE INPUT\n         BZ    SCX                 NO, BRANCH\n         BCT   R5,SCNEXT           YES, LOOP TO PROCESS NEXT SEGMENT\nSCX      LA    R14,LIST\n         C     R14,NEXTPTR         ANYTHING TO STACK?\n         BNE   OKSTRING            YES - BRANCH\n         LA    R15,12              NO - EXIT\n         B     EXIT\nOKSTRING EQU   *\n         L     R15,NEXTPTR\n         SLR   R15,R14             GET LENGTH\n         STH   R15,LISTOTLN\n         SPACE\n*                             GET AND INITIALIZE THE LSD\n         LH    0,LISTOTLN          GETMAIN FOR LIST\n         A     0,SP78                          AND LSD (16 BYTES)\n         GETMAIN R,LV=(0)\n         LR    $LSD,1\n         LA    R14,16(,1)          REG 14 --> LIST\n         ST    R14,LSDADATA\n         ST    R14,LSDANEXT\n         SR    R14,R14\n         STH   R14,LSDRCLEN\n         LH    R14,LISTOTLN\n         STH   R14,LSDTOTLN\n         SPACE\n*        BCTR  R14,0               LENGTH FOR EX\n*        MVC   16(0,1),LIST        MOVE LIST TO SUBPOOL 78 AFTER LSD\n*        EX    R14,*-6             MOVE LIST INTO SUBPOOL 78\n         SPACE\n         LA    R14,LIST            POINT TO DATA TO BE MOVED\n         LA    R15,16(,R1)         POINT TO RECEIVING AREA\n         LH    R1,LISTOTLN         GET LENGTH OF DATA\n         LA    R0,0(,R1)           CLEAR HIGH ORDER BYTE\n         SRDL  R0,8                DIVIDE BY 256\n         SRL   R1,24               ISOLATE REMAINDER\n         LTR   R0,R0               IS QUOTIENT ZERO\n         BZ    MOVER               YES, GO DO REMAINDER\nMOVEQ    MVC   0(256,R15),0(R14)   ZERO 256 BYTES\n         LA    R14,256(,R14)       INCREMENT ADDRESS\n         LA    R15,256(,R15)       INCREMENT ADDRESS\n         BCT   R0,MOVEQ            DECREMENT QUOTIENT AND BRANCH\nMOVER    LTR   R1,R1               IS REMAINDER ZERO?\n         BZ    MOVEX               YES, BRANCH TO EXIT\n         BCTR  R1,0                LENGTH MINUS 1 FOR EX\n         B     *+10                GO AROUND EXECUTED INST\n         MVC   0(0,R15),0(R14)     EXECUTED\n         EX    R1,*-6              DO THE ABOVE XC\nMOVEX    EQU   *\n         SPACE\n         AIF   (NOT &MVS).SKIP2\n         L     R15,16              CVTPTR\n         TM    472(R15),X'80'      IS IKJSTCK IN LPA\n         BNO   *+12                NO, BRANCH TO LOAD\n         L     R15,472(,R15)       YES, LOAD CVTSTCK\n         B     SETSTCK             BRANCH AROUND LOAD\n.SKIP2   ANOP\n         LA    R0,=CL8'IKJSTCK'\n         LOAD  EPLOC=(0)\n         LR    R15,R0              GET ENTRY POINT ADDRESS\n         LA    R15,0(,R15)         ZERO HIGH ORDER BYTE\nSETSTCK  ST    R15,PTRSTCK         SAVE ADDRESS OF IKJSTCK\n         SPACE\n         LR    R1,$IOPL\n         CLI   LISTOPT,1           'LIST' REQUESTED?\n         BE    LISTEM              YES - BRANCH\n         SPACE\n         STACK PARM=(R8),STORAGE=(($LSD),PROCN),ENTRY=(15),MF=(E,(1))\n         SPACE\n         B     STACKED\nLISTEM   EQU   *\n         SPACE\n         STACK PARM=(R8),STORAGE=(($LSD),PROCL),ENTRY=(15),MF=(E,(1))\n         SPACE\nSTACKED  LTR   R15,R15\n         BZ    EXIT0\n         L     R15,PTRSTCK\n         LR    R1,$IOPL\n         STACK PARM=(R8),DELETE=ALL,ENTRY=(15),MF=(E,(1))\n         SPACE\n         LA    0,L'STACKMSG\n         LA    1,STACKMSG\n         TPUT (1),(0),R\n         LA    R15,16\n         B     EXIT\nEXIT12   LA    R15,12\n         B     EXIT\nEXIT0    LA    15,0\nEXIT     LR    R2,R15              SAVE RETURN CODE\n         L     R15,PTRSTCK\n         LTR   R15,R15             WAS IKJSTCK LOADED\n         BNP   EXITNDEL            NO, BRANCH\n         LA    R0,=CL8'IKJSTCK'\n         DELETE EPLOC=(0)\nEXITNDEL EQU   *\n         IKJRLSA MYANS\n         LR    R15,R2              RESTORE RETURN CODE\n         LR    1,13\n         L     R0,@SIZE\n         L     13,4(,13)\n         LR    R2,R15\n         FREEMAIN R,A=(1),LV=(0)\n         LR    R15,R2\n         LM    0,12,20(13)\n         L     R14,12(,13)\n         BR    R14\n         SPACE 1\n************************************************************\n*                                                          *\n*        CONSTANTS                                         *\n*                                                          *\n************************************************************\n         SPACE\nSTACKMSG DC    CL28'STACK ERROR'\nSP78     DC    0F'0',AL1(78),AL3(16) SUBPOOL 78\n         LTORG\nBLANKS   DC    CL6' '\nDELMTAB  DC    0D'0'\n         DC    129AL1(1)\n         DC    127AL1(0)           ALPHANUMERICS ARE NOT DELIMITERS\n         ORG   DELMTAB+X'40'\n         DC    AL1(0)              BLANK IS NOT A DELIMITER\n         ORG   DELMTAB+C'%'\n         DC    AL1(0)              PERCENT SIGN NOT A DELIMITER\n         ORG   DELMTAB+C'$'\n         DC    AL1(0)              DOLLAR SIGN NOT A DELIMITER\n         ORG   DELMTAB+C'@'\n         DC    AL1(0)              AT SIGN NOT A DELIMITER\n         ORG   DELMTAB+C'#'\n         DC    AL1(0)              POUND SIGN NOT A DELIMITER\n         ORG\nPATCH    DC    4D'0'               PATCH AREA\n         SPACE\nDDNAM    EQU   40                  DCB OFFSET\nEXLST    EQU   36                  DCB OFFSET\nPCLADDR  DC    0D'0'               END MAIN CSECT, BEGIN PCL CSECT\n         SPACE\n************************************************************\n*                                                          *\n*        PARSE PARAMETERS                                  *\n*                                                          *\n************************************************************\n         SPACE\n         PRINT NOGEN\nSTACKPCL IKJPARM\nSPACE    IKJPOSIT SPACE\nSUBCHAIN IKJPOSIT STRING,ASIS\n         IKJENDP\n         PRINT GEN\n         SPACE\n************************************************************\n*                                                          *\n*        DSECTS                                            *\n*                                                          *\n************************************************************\n         SPACE\n@DATA    DSECT\n         DS    18F\nDOUBLE   DS    D\nHALF     EQU   DOUBLE,2\nLINKAREA DS    2F\nPTRSTCK  DS    F\nMYPPL    DS    7F\nMYANS    DS    F\nMYECB    DS    F\nMYIOPL   DS    4F\nMYSTPB   DS    8F\nDELIMITR DS    C\nDELIMIT2 DS    C\nWORK     DS    CL6\nLISTOTLN DS    H\nLISTOPT  DS    C\nNEXTPTR  DS    F\nLIST     DS    0D,F\n         DS    1024X\n         DS    0D\n@DATAL   EQU   *-@DATA\n         SPACE\n         IKJCPPL\n         SPACE 2\n         IKJECT\n         SPACE 2\n         IKJIOPL\n         SPACE 2\n         IKJPPL\n         SPACE 2\n         IKJLSD\n         SPACE 2\n         IKJSTPB\n         SPACE 2\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TSSO": {"ttr": 1033, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x01\\x00\\x00\\x00\\x82\\x16/\\x00\\x83'o\\x12Q\\x06\\xc6\\x06\\xc5\\x00\\x02\\xe2\\xe2\\xd1\\xc4\\xd4@@@@@\"", "ispf": {"version": "01.01", "flags": 0, "createdate": "1982-06-11T00:00:00", "modifydate": "1983-10-03T12:51:00", "lines": 1734, "newlines": 1733, "modlines": 2, "user": "SSJDM"}, "text": "         TITLE '   T S S O   '\n*$DOC@*****************************************************************\n*                                                                     *\n*        'TSSO' - TSO SUBSYSTEM FOR OPERATOR CONSOLES                 *\n*                                                                     *\n***********************************************************************\n         SPACE\n*  WRITTEN BY. BILL GODFREY, PLANNING RESEARCH CORPORATION, MCLEAN VA.\n*  INSTALLATION. PRC, MCLEAN VA.\n*  DATE WRITTEN. SEPTEMBER 1 1976.\n*  DATE UPDATED. JUNE 11 1982.\n*  ATTRIBUTES. NOT RE-ENTRANT.\n*   MUST BE LINK-EDITED WITH AC=1 IN AUTHORIZED LIBRARY.\n*   MUST BE EXECUTED AS A SUBSYSTEM. THAT IS, IT MUST RUN FROM AN\n*   OPERATOR 'START' COMMAND AND THE NAME OF THE PROC MUST BE IN\n*   THE SUBSYSTEM NAME TABLE (CSECT IEFJESNM IN MEMBER IEEVIPL).\n*  DESCRIPTION.\n*   THIS IS AN EXERCISE IN WRITING A SUBSYSTEM.\n*\n*   THIS SUBSYSTEM ALLOWS MOST TSO COMMANDS TO BE EXECUTED FROM\n*   AN OPERATOR'S CONSOLE.\n*\n*  LOG OF CHANGES.\n*   24JUL81 - INSTEAD OF PASSING COMMANDS TO THIS MODULE IN THE SSVT,\n*             SSSM NOW PLACES THEM IN A CIRCULAR QUEUE, AND THIS\n*             END OF THE SUBSYSTEM PICKS THEM OFF THE QUEUE.\n*             INSTEAD OF WAITING FOR EACH COMMAND, THIS MODULE\n*             ONLY WAITS IF THE QUEUE IS EMPTY.\n*   24JUL81 - TSSOWTO IS LOADED DURING INITIALIZATION,\n*             AND CALLED VIA 'BALR' INSTEAD OF VIA 'LINK'.\n*   08DEC81 - FIX 0C1 ABEND IN ESTAE EXIT (CHANGE ESTAEW FROM\n*             4 WORDS TO 5 WORDS.)\n*   12FEB82 - DOCUMENTATION CHANGE ONLY.\n*             COMMENTS ADDED TO DESCRIPTION OF 'EF' COMMAND\n*             TO SHOW HOW TO EDIT NONUM.\n*   03JUN82 - VERSION 1.4\n*             ALLOW TSO COMMANDS TO BE CONTINUED IF LAST CHARACTER\n*             ON A LINE IS A HYPHEN.  CONTINUATION MUST COME FROM\n*             SAME CONSOLE AS PREVIOUS LINE.  IF A COMMAND IS\n*             RECEIVED FROM A DIFFERENT CONSOLE WHILE THERE IS DATA\n*             IN THE CONTINUATION HOLD AREA, THE HOLD AREA IS ERASED\n*             AND A WARNING MESSAGE IS ISSUED TO THE CONSOLE USING\n*             THE CONTINUATION HOLD AREA.\n*             THERE ARE NOW 2 BASE REGISTERS (R11,R12).\n*             IF TSSO ALREADY UP, ISSUE MESSAGE 'TSSO ALREADY ACTIVE'.\n*   10JUN82 - VERSION 1.5\n*             CHANGES TO SUPPORT THE POSSIBILITY THAT WHEN TSSO WAS\n*             STARTED THE SSCTUPSS BIT IN THE TSSO SSCT WAS ON.\n*             IF IT WAS, THEN TSSO CAME UP UNDER JES2 WITH ITS OWN\n*             NAME INSTEAD OF SYSLOG, AND IT ALREADY HAS A JOB ID\n*             SO IT DOESNT HAVE TO REQUEST ONE.  ITS SYSOUT BANNER\n*             PAGES WILL SAY 'TSSO' INSTEAD OF 'SYSLOG'.\n*             IF THE SSCTUPSS BIT WAS OFF, WE RUN LIKE WE USED TO.\n*             NEW COMMAND &.S1 WILL SET SSCTUPSS ON.  USE IT, THEN\n*             &LOGOFF, THEN START TSSO AGAIN AND SEE THE DIFFERENCE.\n*             SEE NEW PROGRAM 'TSSOUPSS' FOR A NEW WAY TO START TSSO.\n*             IT WILL SET THE BIT ON (OR OFF) AND ISSUE 'S TSSO'.\n*             NEW FEATURE OF '.L' COMMAND ALLOWS SKIPPING LINES\n*             (MUST USE NEW TSSOWTO TO SUPPORT SKIPPING).\n*             DOCUMENTATION CHANGES:\n*              DESCRIPTIONS OF 'STACK' AND 'EF' CHANGED (NEW SYNTAX).\n*              DESCRIPTIONS OF BANNER PAGES.\n*             NOTE FOR POSSIBLE FUTURE CHANGE: OUR FAKE SSIB IS IN\n*             PAGEABLE CSA (SUBPOOL 241) AND IT SHOULD BE IN FIXED\n*             LSQA (SUBPOOL 255).  IT'S ONLY USED IF SSCTUPSS WAS\n*             OFF, AND NEVER CAUSED A PROBLEM, BUT SHOULD BE CHANGED.\n*   11JUN82 - ALLOW .L TO SPECIFY NUMBER OF LINES (.L/NN OR .L+NN/NN)\n*             .L COMMAND MAY BE ENTERED WITHOUT ITS LEADING PERIOD.\n*             ALLOW SECONDARY JES TO BE SPECIFIED IN PARM.\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*            OUTPUT FROM COMMANDS THAT USE 'PUTLINE'\n*            WILL BE SENT TO THE CONSOLE FROM WHICH THE\n*            COMMAND WAS ENTERED.  OUTPUT FROM COMMANDS\n*            THAT USE 'TPUT' OR ACCESS METHODS WILL NOT\n*            APPEAR ON THE CONSOLE.\n*\n*            A MAXIMUM OF 30 LINES OF OUTPUT WILL BE SENT TO THE\n*            CONSOLE, TO PREVENT WTO BUFFERS FROM FILLING UP.\n*            SEE THE .L COMMAND DESCRIBED LATER FOR A WAY TO\n*            HANDLE MORE THAN 30 LINES.\n*\n*            TO ENTER A TSO COMMAND ON A CONSOLE, TYPE IN\n*            AN AMPERSAND FOLLOWED BY THE COMMAND. FOR EXAMPLE:\n*               &LISTDS 'SYS1.BRODCAST'\n*\n*            TO STOP THE SUBSYSTEM, TYPE IN\n*               &LOGOFF\n*            OR\n*               &P\n*\n*            IF YOUR SYSTEM ALREADY USES THE AMPERSAND FOR\n*            ANOTHER PURPOSE, THERE IS A PARM KEYWORD THAT\n*            WILL MAKE TSSO LOOK FOR ANOTHER CHARACTER.\n*\n*            SINCE THIS IS A SUBSYSTEM, THE NAME OF THE\n*            PROC YOU USE TO START IT MUST BE IN THE SYSTEM\n*            SUBSYSTEM NAME TABLE.\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*            UNFORTUNATELY, EACH LINE ENTERED HAS NO RELATION\n*            TO THE LAST COMMAND ENTERED, SO IF YOU TYPE IN\n*            THE 'EDIT' COMMAND, THE NEXT COMMAND YOU TYPE\n*            WILL NOT BE IN 'EDIT' MODE, AND IF YOU TYPE IN\n*            THE 'PROFILE' COMMAND, THE NEW PROFILE WILL NOT BE\n*            PRESENT FOR THE NEXT COMMAND.\n*\n*            BUT IF YOU TYPE IN AN 'ALLOC' COMMAND, THE ALLOCATION\n*            WILL STILL BE THERE FOR SUBSEQUENT COMMANDS.\n*\n*            WE USE A COMMAND CALLED 'EF' TO EDIT DATA SETS\n*            FROM A CONSOLE.  ITS SYNTAX IS\n*               EF SUBCOMMAND;SUBCOMMAND;SUBCOMMAND...\n*            IT USES WHATEVER DATA SET IS CURRENTLY PRE-ALLOCATED\n*            TO THE FILENAME 'EDITFILE' AND BUILDS AN EDIT COMMAND\n*            AND STACKS THE EDIT COMMAND PLUS THE SPECIFIED\n*            SUBCOMMANDS.  FOR EXAMPLE,\n*               &ALLOC FI(EDITFILE) DA('SYS1.PARMLIB(LNKLST00)') SHR\n*               &EF V;C /SYS3/SYS4/ ALL;C /SYS2/SYS3/ ALL;SAVE\n*               &EF V;C /TESTLIB/USERLIB/ ALL;SAVE\n*            TO EDIT A DATA SET WITH NO SEQUENCE NUMBERS,\n*            USE THE 'EFN' COMMAND INSTEAD OF 'EF'.\n*\n*            WE USE A COMMAND CALLED 'STACK' TO ENTER MULTIPLE\n*            COMMANDS ON ONE LINE. THE SYNTAX IS:\n*               STACK COMMAND;COMMAND;COMMAND....\n*\n*            IN BOTH 'EF' AND 'STACK', IF YOU WANT THE SEMICOLON TO\n*            BE LEFT IN THE COMMAND AS TEXT, SPECIFY A PAIR OF SEMI-\n*            COLONS.  THEY WILL BE CONVERTED TO A SINGLE SEMICOLON\n*            AND NOT TREATED AS A SEPARATOR.\n*\n*            ON SYSTEMS THAT HAVE THE 'PCF' PRODUCT, 'STACK' AND\n*            'EF' MAY NOT WORK THE SAME UNDER A REAL TSO SESSION\n*            AS THEY DO UNDER TSSO, BECAUSE PCF HANDLES SEMICOLONS\n*            BEFORE 'STACK' AND 'EF' EVER GET CONTROL.\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*            SINCE THIS IS A SUBSYSTEM AND NOT JUST A STARTED TASK,\n*            IT WILL RUN FINE EVEN IF JES2 IS NOT UP, ALTHOUGH\n*            COMMANDS THAT USE SYSOUT WILL NOT WORK.  TSSO IS A\n*            HANDY TOOL FOR FIXING JES2 PROBLEMS WHEN JES2 IS DOWN,\n*            OR FIXING TCAM/TSO PROBLEMS WHEN TCAM/TSO IS DOWN.\n*            SOMETIMES JUST A 'RENAME' OR 'COPY' WILL FIX A PROBLEM,\n*            AND THATS EASILY DONE FROM TSSO.\n*\n*            MODULE 'IKJEFT01' (TERMINAL MONITOR PROGRAM)\n*            IS ATTACHED FOR EACH TSO COMMAND ENTERED.\n*            DDNAMES REQUIRED: SYSTSIN (DUMMY) AND\n*            SYSTSPRT (TEMPORARY SYSDA SPACE).\n*\n*            MODULE 'TSSOWTO' (COPY SYSTSPRT TO CONSOLE)\n*            IS CALLED AFTER EACH TSO COMMAND IS PROCESSED.\n*\n*            MODULE 'TSSOSSSM' IS LOADED AND COPIED INTO CSA.\n*            IT WAS ORIGINALLY REQUIRED TO BE IN LPA, BUT\n*            THAT MADE MODIFICATIONS AND TEST RUNS FEW AND FAR\n*            BETWEEN, SO THE CSA ROUTE WAS CHOSEN. TO RE-INSTATE\n*            THE LPA REQUIREMENT (AND BYPASS THE CSA GETMAIN, ETC)\n*            JUST CHANGE THE VALUE OF 'LPAOPT' FROM 'C' TO 'L'.\n*\n*            THE PARM FIELD (OR IF NO PARM, THE REPLY TO WTOR)\n*            MAY CONTAIN THE FOLLOWING KEYWORDS:\n*               U           -  NO ACTION, END OF PARMS\n*               TMP(NAME)   -  THE NAME OF THE TSO TMP TO BE INVOKED.\n*                              THE DEFAULT IS IKJEFT01.\n*               CC(XX)      -  THE COMMAND CHARACTER NAME.\n*                              THE DEFAULT IS CC(AM), AMPERSAND.\n*                              SEE CCTAB FOR VALID NAMES.\n*               JES         -  TSSO IS TO REQUEST A STARTED TASK\n*                              ID FROM JES2 SO IT CAN USE SYSOUT.\n*               NOJES       -  TSSO IS NOT TO REQUEST AN ID FROM JES2.\n*                              USE THIS IF JES2 IS NOT UP.\n*            IF MORE THAN 1 KEYWORD IS SPECIFIED, THEY MUST\n*            BE SEPARATED BY A COMMA.\n*            NULL STRINGS SUCH AS TMP() AND CC() ARE VALID AND\n*            CAUSE THE KEYWORD TO BE IGNORED. THUS YOUR PROC\n*            CAN HAVE PARM='TMP(&TMP.),CC(&CC.),&JES.JES&J.'\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*            IN ADDITION TO TSO COMMANDS, THE TSSO SUBSYSTEM HAS SOME\n*            COMMANDS OF ITS OWN.\n*            THE 'L' COMMAND IS USED TO REPEAT THE OUTPUT FROM THE LAST\n*            TSO COMMAND ENTERED.  THIS OUTPUT HAS BEEN STORED IN THE\n*            SYSTSPRT FILE.\n*            FOR EXAMPLE,\n*               &L\n*            WILL REPEAT THE OUTPUT (UP TO 30 LINES).\n*               &L+20\n*            WILL REPEAT THE OUTPUT BUT SKIP THE FIRST 20 LINES\n*            AND DISPLAY UP TO 30 MORE LINES.\n*               &L+20/10\n*            WILL REPEAT THE OUTPUT, SKIPPING THE FIRST 20 LINES\n*            AND DISPLAYING THE NEXT 10.\n*               &L=4\n*            WILL REPEAT THE OUTPUT, THIS TIME ON CONSOLE 4.\n*               &L+20,L=4\n*            WILL REPEAT THE OUTPUT, ON CONSOLE 4, SKIPPING\n*            THE FIRST 20 LINES.\n*               &L SYS1.PROCLIB(TSSO)\n*            WILL INVOKE THE 'L' TSO COMMAND BECAUSE TSSO CAN\n*            TELL BY THE PRESENCE OF A BLANK AND AN OPERAND\n*            THAT THIS MUST BE THE TSO COMMAND.\n*\n***********************************************************************\n*\n*            NOTES ABOUT SYSOUT\n*\n*            THE SSCTUPSS BIT IS A BIT IN EACH SUBSYSTEM'S SSCT THAT\n*            TELLS STARTED TASK CONTROL WHETHER THE SUBSYSTEM IS\n*            DEPENDENT ON THE PRIMARY SUBSYSTEM (JES2 OR JES3) FOR\n*            THINGS LIKE SYSOUT.  THE BIT IS NORMALLY OFF, AND TO USE\n*            IT YOU MUST HAVE A PROGRAM THAT WILL SET IT ON BEFORE\n*            THE START COMMAND IS ISSUED FOR THE SUBSYSTEM.\n*\n*            IF THE SSCTUPSS BIT WAS OFF WHEN TSSO STARTED\n*            AND YOU DID NOT SPECIFY JES=NO IN THE START COMMAND,\n*            SYSOUT DATA SETS WILL BE PRINTED UNDER THE BANNER\n*            'SYSLOG'.  THAT IS CONTROLLED BY JES2 AND CANNOT BE\n*            CHANGED BY TSSO.\n*\n*            IF THE SSCTUPSS BIT WAS OFF WHEN TSSO STARTED AND\n*            YOU SPECIFIED JES=NO IN THE START COMMAND, SYSOUT\n*            CANNOT BE USED (YOU WILL ABEND IF YOU TRY).\n*\n*            IF THE SSCTUPSS BIT WAS ON WHEN TSSO STARTED, SYSOUT\n*            WILL BE PRINTED UNDER THE BANNER 'TSSO' (THE PROC NAME).\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*            TO PREVENT 522 ABENDS (WAIT TIME EXCEEDED)\n*            A SUBTASK IS ATTACHED WHICH JUST WAITS FOR\n*            A TIMER INTERRUPT OVER AND OVER AGAIN.\n*\n*            SUGGESTED JCL PROC FOR TSSO\n*\n*               //TSSO PROC TMP=,CC=,JES=,J=\n*               //TSSO EXEC PGM=TSSO,REGION=384K,TIME=10,DYNAMNBR=20,\n*               //          PARM='TMP(&TMP),CC(&CC),&JES.JES&J.'\n*               //SYSTSIN  DD  DUMMY,DCB=(RECFM=FB,LRECL=80,BLKSIZE=80)\n*               //SYSTSPRT DD  UNIT=SYSDA,SPACE=(TRK,10),\n*               //             DCB=(RECFM=VBA,LRECL=137,BLKSIZE=4000)\n*               //SYSPROC  DD  DSN=SYS1.TSSOPROC,DISP=SHR  (OPTIONAL)\n*\n*            TO MAKE TSSO USE A SECONDARY JES (JESX FOR EXAMPLE),\n*            SET THE SSCTUPSS BIT OFF, THEN\n*               S TSSO,J=X\n*            NOW YOU CAN &SUBMIT A JOB TO SECONDARY JES.\n*\n*$DOC$*****************************************************************\n         EJECT\n         GBLC  &MID,&CHAR,&CHAT\n         SPACE\n&CHAR    SETC  '&&'\n&CHAT    SETC  '&&'\n&MID     SETC  '&&'\n         SPACE\nTSSO     START\n         USING *,R11,R12\n         B     @PROLOG-*(,R15)\n         DC    AL1(39),CL10'TSSO 1.5  '\n         DC    CL16' &SYSDATE &SYSTIME '\n         DC    CL13'PRC MCLEAN VA'\nSUBPOOL  DC    0F'0',AL1(1),AL3(@DATAL)\n@PROLOG  STM   14,12,12(13)\n         LR    R11,R15\n         LA    R15,1\n         LA    R12,4095(R15,R11)\n         LR    R2,R1\n         SPACE\n         L     R0,SUBPOOL\n         GETMAIN R,LV=(0)\n         SPACE\n         LR    R9,R1\n         XC    000(256,R9),000(R9)\n         XC    256(256,R9),256(R9)\n         XC    512(@DATAX-512,R9),512(R9)\n         SPACE\n         ST    R13,4(,R9)\n         ST    R9,8(,R13)\n         LR    R13,R9              NEW SAVEAREA POINTER\n         USING @DATA,R9\n         SPACE\n         MODESET KEY=ZERO\n         EJECT\n************************************************************\n*                                                          *\n*        SET DEFAULTS                                      *\n*                                                          *\n************************************************************\n         SPACE\n         MVI   CHARW,C'&CHAR.'\n         MVI   CHATW,C'&CHAT.'\n         MVI   OPTION,1            JES\n         SLR   R15,R15\n         ST    R15,TIMECTR\n         XC    HSSNM,HSSNM\n         MVC   IKJEFT01,=C'IKJEFT01'\n         MVC   MAXWTOS,MAXWTOV     RESET MAXWTOS\n         EJECT\n************************************************************\n*                                                          *\n*        COPY PARM                                         *\n*                                                          *\n************************************************************\n         SPACE\n         MVI   PARMAREA,X'FF'      FILL CHARACTER\n         MVC   PARMAREA+1(99),PARMAREA  PROPOGATE FF\n         L     R2,0(,R2)           SAVE PARM POINTER\n         LH    R3,0(,R2)           GET PARM LENGTH\n         LTR   R3,R3               TEST FOR PARM ABSENT\n         BZ    PARMWTOR            NO PARM - BYPASS MOVE\n         LR    R1,R3\n         BCTR  R1,0\n         B     *+10\n         MVC   PARMAREA(0),2(R2)\n         EX    R1,*-6\n         B     PARMGOT\n         SPACE\n************************************************************\n*                                                          *\n*        GET OPTIONS FROM PARM FIELD OR OPERATOR           *\n*                                                          *\n************************************************************\n         SPACE\nPARMWTOR EQU   *\n         LA    R6,PARMAREA\n         LA    R7,PARMECB\n         LA    R1,WTOW\n         MVC   0(WTOR1L,R1),WTOR1\n         WTOR  ,(R6),L'PARMAREA,(R7),MF=(E,(1))\n         SPACE\nPARMWAIT EQU   *\n         WAIT  ECB=PARMECB\nPARMGOT  EQU   *\n         EJECT\n************************************************************\n*                                                          *\n*              CHECK FOR VALID OPTIONS                     *\n*                                                          *\n************************************************************\n         SPACE\n         TR    PARMAREA,CAPS       UPPER CASE\n         LA    R1,PARMAREA\nPARMNEXT CLC   0(2,R1),=C'&CHAR.P'\n         BE    PARMRET             RETURN IMMEDIATELY\n         CLI   0(R1),C'U'          STOP SCAN\n         BE    PARMDONE            END OF PARM SCAN\n         CLC   0(4,R1),=C'TMP('    ALTERNATE TERMINAL MONITOR PGM\n         BE    PARMTMP\n         CLC   0(3,R1),=C'CC('     ALTERNATE COMMAND CHARACTER\n         BE    PARMCC\n         CLC   0(3,R1),=C'JES'     REQUEST STC ID FROM JES\n         BE    PARMJES\n         CLC   0(5,R1),=C'NOJES'   RUN WITHOUT JES\n         BE    PARMJESN\n         B     PARMERR\nPARMTMP  LA    R1,4(,R1)           POINT PAST PAREN\n         LA    R15,DOUBLE          POINT TO 8 BYTE WORKAREA\n         MVC   DOUBLE,=CL8' '      BLANK THE WORKAREA\n         LA    R0,8                MAX 8 CHARS TO COPY\nPARMTMPL CLI   0(R1),C')'          END OF NAME\n         BE    PARMTMPX            BRANCH IF END OF NAME\n         CLI   0(R1),X'FF'         END OF INPUT\n         BE    PARMERR             YES, MISSING CLOSE PARENS\n         CLI   0(R1),C' '          BLANK PRESENT\n         BE    PARMERR             YES, MISSING CLOSE PARENS\n         CLI   0(R1),C','          COMMA PRESENT\n         BE    PARMERR             YES, MISSING CLOSE PARENS\n         MVC   0(1,R15),0(R1)      COPY 1 CHARACTER OF NAME\n         LA    R1,1(,R1)           POINT TO NEXT CHARACTER\n         LA    R15,1(,R15)         POINT TO NEXT OUTPUT\n         BCT   R0,PARMTMPL         LOOP IF LESS THAN 8 CHARS\n         CLI   0(R1),C')'          IS 8TH CHAR FOLLOWED BY CLOSE PAREN\n         BNE   PARMERR             ERROR IF NOT\nPARMTMPX CLI   DOUBLE,C' '         WAS THERE ANYTHING IN PARENS\n         BE    *+10                IF NOT, LEAVE NAME UNCHANGED\n         MVC   IKJEFT01,DOUBLE     COPY TMP NAME FROM WORKAREA\n         LA    R1,1(,R1)           POINT PAST CLOSE PAREN\n         B     PARMMORE            GO CHECK FOR MORE KEYWORDS\nPARMCC   CLI   3(R1),C')'          IS IT CC(), NULL STRING\n         BNE   PARMCCP             NO, BRANCH\n         LA    R1,4(,R1)           YES, POINT PAST CLOSE PAREN\n         B     PARMMORE\nPARMCCP  CLI   5(R1),C')'          IS IT 2 CHARS IN PARENS\n         BNE   PARMERR             NO, ERROR\n         LA    R15,CCTAB           POINT TO TABLE OF CC NAMES\nPARMCCL  CLI   0(R15),X'FF'        END OF TABLE\n         BE    PARMERR             YES, NAME NOT FOUND\n         CLC   3(2,R1),0(R15)      DOES CC(XX) MATCH NAME IN TABLE\n         BE    PARMCCF             YES, FOUND IT\n         LA    R15,3(,R15)         POINT TO NEXT ENTRY IN TABLE\n         B     PARMCCL             LOOP TO COMPARE NEXT ENTRY\nPARMCCF  MVC   CHARW,2(R15)        SET NEW CHARACTER\n         MVC   CHATW,2(R15)        SET NEW CHARACTER\n         LA    R1,6(,R1)           POINT PAST CLOSE PAREN\n         B     PARMMORE            GO CHECK FOR MORE PARMS\nPARMJES  OI    OPTION,1            JES\n         LA    R1,3(,R1)           POINT PAST KEYWORD\n         CLI   0(R1),C'A'          IS IT JESA THRU Z OR 0 THRU 9\n         BL    PARMMORE            NO, BRANCH\n         CLI   0(R1),X'FF'         IS IT JUST JES\n         BE    PARMDONE            YES, BRANCH\n         MVC   ALTJES,0(R1)        YES, SAVE SECONDARY JES NAME\n         LA    R1,1(,R1)\n         B     PARMMORE            GO CHECK FOR MORE PARMS\nPARMJESN NI    OPTION,255-1        NOJES\n         LA    R1,5(,R1)           POINT PAST KEYWORD\nPARMMORE CLI   0(R1),C','          IS THERE MORE\n         BE    PARMCOMA            YES, BRANCH\n         CLI   0(R1),X'FF'         IS THIS END OF INPUT\n         BE    PARMDONE            PARM SCAN COMPLETE IF 'FF'\n         CLI   0(R1),X'40'         IS THIS END OF INPUT\n         BE    PARMDONE            PARM SCAN COMPLETE IF BLANK\n         B     PARMERR             INVALID CHARACTER AFTER CLOSE PAREN\nPARMCOMA LA    R1,1(,R1)           POINT PAST COMMA\n         B     PARMNEXT            GO DO NEXT KEYWORD\n         SPACE\nPARMERR  MVI   PARMAREA,X'FF'\n         MVC   PARMAREA+1(99),PARMAREA\n         MVI   PARMECB,0\n         LA    R6,PARMAREA\n         LA    R7,PARMECB\n         LA    R1,WTOW\n         MVC   0(WTOR2L,R1),WTOR2\n         WTOR  ,(R6),L'PARMAREA,(R7),MF=(E,(1))\n         B     PARMWAIT\n         SPACE\nPARMRET  LR    R2,R13\n         L     R13,4(,R13)\n         MODESET KEY=NZERO\n         LR    R1,R2\n         L     R0,SUBPOOL\n         FREEMAIN R,LV=(0),A=(1)\n         LM    14,12,12(R13)\n         SR    R15,R15\n         BR    R14\n         SPACE\nPARMDONE DC    0H'0'\n         EJECT\n************************************************************\n*                                                          *\n*        GET THE NAME OF THIS TASK                         *\n*                                                          *\n************************************************************\n         SPACE\n         L     R2,548              PSAAOLD-PSA  CURRENT ASCB\n         L     R0,60(,R2)          ASCBTSB\n         LTR   R0,R0               IS THIS A TSO SESSION\n         BNZ   ITSATSO             YES, ERROR\n         L     R3,172(,R2)         ASCBJBNI\n         LTR   R3,R3               IS THIS A JOB\n         BNZ   ITSAJOB             YES, USE THIS NAME\n         L     R3,176(,R2)         ASCBJBNS\nITSAJOB  CLI   4(R3),C' '          IS NAME LONGER THAN 4 CHARACTERS\n         BNE   LONGNAME            YES, ILLEGAL FOR SUBSYSTEM\n         MVC   JBID,0(R3)          SAVE SUBSYSTEM NAME\n         SPACE\n************************************************************\n*                                                          *\n*        FIND OUR SUBSYSTEM CVT (SSCT)                     *\n*                                                          *\n************************************************************\n         SPACE\n         L     R2,540              PSATOLD-PSA  CURRENT TCB\n         ST    R2,$HTCB            SAVE TCB ADDRESS\n         L     R2,180(,R2)         TCBJSCB-TCB(,R2)\n         L     R2,X'15C'(,R2)      JSCBSACT-JSCB(,R2)\n         L     R2,X'13C'(,R2)      JSCBSSIB-JSCB(,R2)\n         ST    R2,$SSIB\n         USING SSIB,R2\n         MVC   MSTR,SSIBSSNM       WILL BE 'MSTR' IF NOT UNDER JES\n         DROP  R2                  SSIB\n         L     R3,16               CVTPTR\n         USING CVT,R3\n         L     R4,CVTJESCT         JES CONTROL TABLE\n         USING JESCT,R4\n         SPACE\n         MVC   PRIMSSIB(36),MASKSSIB\n         MVC   PRIMSSIB+8(4),JESPJESN  MOVE IN JES2 OR JES3\n         CLI   ALTJES,0            WAS PARM=JESX SPECIFIED\n         BE    *+10                NO, JUST JES\n         MVC   PRIMSSIB+11(1),ALTJES  YES, CHANGE JES2 TO JESX\n         LA    R4,JESSSCT-(SSCTSCTA-SSCT) POINT TO SSCT HEAD\n         USING SSCT,R4\nISSCTL   ICM   R4,15,SSCTSCTA      POINT TO NEXT SSCT\n         BZ    INOSSCT             IF END, EXIT\n         CLC   SSCTSNAM,JBID       IS THIS OURS?\n         BNE   ISSCTL              NO - LOOP\n         EJECT\n************************************************************\n*                                                          *\n*        SET ESTAE EXIT TO CLEAN UP ABENDS                 *\n*                                                          *\n************************************************************\n         SPACE\n         STM   R11,R12,ESTAER12\n         SPACE\n         MVC   ESTAEW(ESTAEL),ESTAEM\n         LA    R6,ESTAEXIT\n         SPACE\n         ESTAE (R6),TERM=YES,PARAM=(R9),MF=(E,ESTAEW)\n         SPACE\n         LTR   R15,R15\n         BZ    OKESTAE\n         WTO   MF=(E,IM09)         NO ESTAE\n         B     EXITD\nOKESTAE  EQU   *\n         EJECT\n************************************************************\n*                                                          *\n*        OBTAIN THE SSVT (NEW OR OLD)                      *\n*                                                          *\n************************************************************\n         SPACE\n         USING SSVT,R2\n         ICM   R2,15,SSCTSSVT      IS OUR SSVT IN?\n         BNZ   IALREADY            BRANCH IF ALREADY IN\n         SPACE\n         L     R3,=A($SVTL+8)      SIZE OF SSVT\n         LR    R0,R3\n         O     R0,SP241            SUBPOOL 241\n         LR    R5,R0\n         SPACE\n         GETMAIN R,LV=(0)\n         SPACE\n         LR    R2,R1\n         SLR   R15,R15\n         MVCL  R2,R14              ZERO SSVT\n         SPACE\n         MVC   0(4,R1),=C'SSVT'\n         ST    R5,4(,R1)           STORE LENGTH & SUBPOOL\n         LA    R2,8(,R1)           GET ADDRESS OF ACTUAL SSVT\n         XC    $SVSTUS,$SVSTUS     ZERO STATUS BYTE\n         B     IHAVSSVT            SKIP SSVT CLAIM\n         SPACE\nIALREADY EQU   *\n         TM    $SVSTUS,$SVSTUST    TERMINATED?\n         BZ    INSTRTER            NO - TSSO IS ALREADY UP\n         SPACE\n         MVC   WTOW(IM03L),IM03\n         MVC   WTOW+4(1),$SVCHAR\n         LA    R1,WTOW\n         WTO   MF=(E,(1))          OLD SSVT FOUND\n         ST    R2,$SSVT            YES - REMOVE OLD TSSO FROM SYSTEM\n         ST    R4,$SSCT\n         DC    X'0000'             FORCE S0C1 - ESTAE TO CLEAN UP\n         SPACE\nIHAVSSVT ST    R2,$SSVT            SAVE SSVT ADDRESS\n         ST    R4,$SSCT            SAVE SSCT ADDRESS\n         EJECT\n************************************************************\n*                                                          *\n*        LOAD THE SUBSYSTEM MONITOR                        *\n*                                                          *\n************************************************************\n         SPACE\n         LA    0,=CL8'TSSOSSSM'\n         SPACE\n         LOAD  EPLOC=(0)\n         SPACE\n         ST    0,$SSSM\n         SPACE\n*              GETMAIN AN AREA IN CSA (SUBPOOL 241)\n*              THEN COPY TSSOSSSM TO CSA. STORE CSA ADDRESS\n*              IN $SSSM. THEN IT WILL NOT HAVE TO BE IN LPA.\n         SPACE\n         CLI   LPAOPT,C'L'         IS SSSM-IN-LPA OPTION\n         BE    NOCSA               YES, SKIP CSA\n         LR    R1,R0               GET ADDRESS OF LOADED SSSM\n         LH    R0,38(,R1)          LENGTH OF MODULE\n         LTR   R0,R0               IS IT VALID\n         BNP   NOCSA               NO, BRANCH\n         O     R0,SP241            SPECIFY SUBPOOL\n         ST    R0,CSAFREE          SAVE FOR FREEMAIN\n         GETMAIN R,LV=(0)\n         ST    R1,CSAFREE+4        SAVE FOR FREEMAIN\n         OI    $SVSTUS,$SVSTUSC    INDICATE CSA GOTTEN\n         LR    R14,R1              MVCL TO\n         LH    R15,CSAFREE+2       MVCL TO LEN\n         L     R0,$SSSM            MVCL FROM\n         LR    R1,R15              MVCL FROM LEN\n         ST    R14,$SSSM           NEW ADDRESS\n         MVCL  R14,R0              COPY SSSM TO CSA\nNOCSA    EQU   *\n         EJECT\n************************************************************\n*                                                          *\n*        BUILD THE SSVT (FUNCTION MATRIX FROM SSSM)        *\n*                                                          *\n************************************************************\n         SPACE\n         L     R1,$SSSM            POINT TO SSSM\n*              CAUTION. FIXED OFFSETS 40 42 44 46 48 FOLLOW.\n         LH    R15,48(,R1)         GET FNUM\n         STH   R15,SSVTFNUM\n         LH    R15,40(,R1)         GET FCOD COUNT\n         LTR   R15,R15\n         BZ    NOVECTOR\n         LH    R14,42(,R1)         GET OFFSET TO CODES\n         LA    R14,0(R1,R14)       ADD OFFSET AND R1 INTO R14\n         BCTR  R15,0\n         B     *+10\n         MVC   SSVTFCOD,0(R14)     MOVE FUNCTION CODES\n         EX    R15,*-6\nNOVECTOR EQU   *\n         SPACE\n         LH    R15,44(,R1)         GET FRTN COUNT\n         LTR   R15,R15\n         BZ    NOVECRTN\n         LH    R14,46(,R1)         GET OFFSET TO POINTERS\n         LA    R14,0(R1,R14)       ADD OFFSET AND R1 INTO R14\n*        SLL   R15,2               MULTIPLY BY 4\n*        BCTR  R15,0\n*        B     *+10\n*        MVC   SSVTFRTN,0(R14)     MOVE ROUTINE POINTERS\n*        EX    R15,*-6\n         LA    R6,SSVTFRTN\nRELOCATE L     R0,0(,R14)          GET OFFSET TO ROUTINE\n         ALR   R0,R1               RELOCATE IT\n         ST    R0,0(,R6)           STORE ADDRESS OF ROUTINE\n         LA    R6,4(,R6)\n         LA    R14,4(,R14)\n         BCT   R15,RELOCATE\nNOVECRTN EQU   *\n         SPACE\n         L     R15,X'0224'         PSAAOLD-PSA\n         ST    R15,$SVPASCB        ASCB ADDRESS\n         SPACE\n         MVC   $SVCHAR,CHARW\n         MVC   $SVCHAT,CHATW\n         SPACE\n         MVC   $SVOKWTO(10),OKWTO\n         MVC   $SVOKWTO+4(1),$SVCHAR\n         TM    OPTION,1            IS JES ID TO BE REQUESTED\n         BZ    *+8                 NO, SKIP NEXT INSTRUCTION\n         BAL   R14,REQJOBID        REQUEST JOB ID FROM JES\n         LOAD  EP=TSSOWTO          LOAD RE-ENTRANT WTO PROGRAM\n         ST    R0,ENTRYWTO         SAVE ENTRY POINT\n         EJECT\n************************************************************\n*                                                          *\n*         GETMAIN A COMMAND QUEUE AREA IN CSA              *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R1,10               ROOM FOR 10 COMMANDS\n         ST    R1,$SVQMAXQ         SAVE MAXIMUM QUEUE SIZE\n         M     R0,=A($QESIZE)      MULTIPLY BY LENGTH OF AN ENTRY\n         LR    R0,R1               SET R0 FOR FREEMAIN\n         O     R0,SP241            SPECIFY SUBPOOL\n         ST    R0,QUEFREE          SAVE FOR FREEMAIN\n         GETMAIN R,LV=(0)\n         ST    R1,QUEFREE+4        SAVE FOR FREEMAIN\n         OI    $SVSTUS,$SVSTUSQ    INDICATE CSA GOTTEN\n         ST    R1,$SVQADDR         SAVE ADDRESS OF QUEUE FOR THIS END\n         SR    R0,R0               INDICATE QUEUE IS EMPTY\n         STM   R0,R1,$SVQUEUE      SAVE ADDRESS OF QUEUE FOR SSSM\n         OI    $SVSTUS,$SVSTUSQ    INDICATE CSA GOTTEN\n         SPACE\n************************************************************\n*                                                          *\n*         CREATE A CIRCULAR CHAIN OF QUEUE ENTRIES         *\n*                                                          *\n************************************************************\n         SPACE\n         L     R15,$SVQMAXQ        GET MAXIMUM QUEUE SIZE\n         LR    R0,R1\nCIRCLE   LR    R1,R0               NEXT ENTRY NOW CURRENT\n         USING $QENTRY,R1\n         A     R0,=A($QESIZE)      POINT TO NEXT ENTRY\n         ST    R0,$QENEXT          STORE IN CURRENT ENTRY\n         BCT   R15,CIRCLE          LOOP UNTIL EACH ENTRY HAS A POINTER\n         L     R0,$SVQADDR         POINT TO FIRST ENTRY\n         ST    R0,$QENEXT          PUT ITS ADDRESS IN LAST ENTRY\n         DROP  R1                  $QENTRY\n         SPACE\n************************************************************\n*                                                          *\n*        CONNECT THE SSVT TO THE SSCT                      *\n*                                                          *\n************************************************************\n         SPACE\n*              NOTE - MUST BE IN KEY 0\n         ST    R2,SSCTSSVT         STORE SSVT ADDRESS IN SSCT\n         MVC   WTOW(IM04L),IM04\n         MVC   WTOW+4(1),$SVCHAR\n         LA    R1,WTOW\n         WTO   MF=(E,(1))          CONNECTED\n         SPACE\n************************************************************\n*                                                          *\n*        START THE TIMER TASK                              *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R0,=CL8'TSSOTIME'\n         LA    R1,TIMER\n         SPACE\n         IDENTIFY EPLOC=(0),ENTRY=(1)\n         SPACE\n         LA    R1,TIMEPARM\n         L     R15,=A(1*60*100)      1 MINUTE\n         ST    R15,INTERVAL\n         LA    R15,INTERVAL        ADDRESS OF INTERVAL\n         ST    R15,0(,R1)\n         LA    R15,ECBTIMER\n         ST    R15,4(,R1)          ADDRESS OF ECB\n         ST    R9,8(,R1)           ADDRESS OF @DATA\n         OI    8(R1),X'80'\n         XC    ATTCECB1,ATTCECB1\n         XC    ECBTIMER,ECBTIMER\n         LA    R6,ATTCECB1\n         SPACE\n         ATTACH EP=TSSOTIME,ECB=(R6),SHSPV=1\n         SPACE\n         ST    R1,ATTCTCB1\n         SPACE\n************************************************************\n*                                                          *\n*         SEE IF SSSM HAS QUEUED ANY COMMANDS              *\n*                                                          *\n************************************************************\n         SPACE\n         XC    TSOPARM(2),TSOPARM  ZERO TSO PARM LENGTH\n         MVC   CTUCMID,=X'77777777'\nNEXTCMD  EQU   *\n         L     R0,$SVQUEUE         GET NUMBER OF COMMANDS QUEUED\nNEXTCMD1 LR    R1,R0               COPY TO R0\n         BCTR  R1,0                DECREMENT BY 1\n         CS    R0,R1,$SVQUEUE      DECREMENT $SVQUEUE\n         BNZ   NEXTCMD1            TRY AGAIN IF SSSM CHANGED IT\n         LTR   R1,R1               TEST NEW VALUE\n         BNM   PROCESS             IF 0 OR GREATER, NO NEED TO WAIT\n         SPACE\n************************************************************\n*                                                          *\n*        WAIT FOR POST FROM SSSM                           *\n*                                                          *\n************************************************************\n         SPACE\nWAIT     EQU   *\n         TM    FLAG,X'01'          MONITORING?\n         BZ    NOMON1\n         WTO   MF=(E,IM10)         WAITING\nNOMON1   EQU   *\n         SPACE\n         NI    $SVFLAG,255-X'80'   ALLOW COMMANDS THRU\n         SPACE\n         LA    R1,$SVPOSTE\n         ST    R1,ECBLIST\n         LA    R1,ECBTIMER\n         ST    R1,ECBLIST+4\n         OI    ECBLIST+4,X'80'\n         SPACE\n         WAIT  ECBLIST=ECBLIST\n         SPACE\n         TM    ECBTIMER,X'40'      TIMER POST?\n         BO    TIMEPOST            YES - BRANCH\n         SPACE\n         OI    $SVFLAG,X'80'       REJECT ANY OTHER COMMANDS\n         SPACE\n         TM    FLAG,X'01'          MONITORING?\n         BZ    NOMON2\n         WTO   MF=(E,IM11)         POSTED\nNOMON2   EQU   *\n         SPACE\n         MVI   $SVPOSTE,0\n         SPACE\n************************************************************\n*                                                          *\n*         GET THE COMMAND FROM THE QUEUE                   *\n*                                                          *\n************************************************************\n         SPACE\nPROCESS  EQU   *\n         L     R8,$SVQADDR\n         USING $QENTRY,R8\n*\n*               $SVQADDR WAS INITIALLY SET TO POINT TO THE\n*               FIRST QUEUE ENTRY IN THE CIRCULAR CHAIN.\n*\n*               EACH TIME THIS END OF THE SUBSYSTEM PROCESSES\n*               A COMMAND, IT POINTS $SVQADDR TO THE NEXT ENTRY\n*               AFTER THE ONE POINTED TO BY $SVQADDR.\n*\n*               EACH TIME THE SSSM ADDS A COMMAND TO THE QUEUE,\n*               IT PUTS IT IN THE ENTRY POINTED TO BY $SVQUEUE+4\n*               AND THEN POINTS $SVQUEUE+4 TO THE NEXT ENTRY.\n*\n*               THE RESULT IS THAT EACH END OF THE SUBSYSTEM,\n*               RUNNING ASYNCHRONOUSLY, IS WALKING AROUND THE\n*               CIRCULAR CHAIN AT ITS OWN SPEED.\n*\n         L     R0,$QENEXT\n         ST    R0,$SVQADDR\n         SPACE\n************************************************************\n*                                                          *\n*         PROCESS THE COMMAND                              *\n*                                                          *\n************************************************************\n         SPACE\n         NI    FLAG,255-X'80'      DO NOT LIST THE OUTPUT\n         LH    R0,TSOPARM          IF PREVIOUS COMMAND\n         LTR   R0,R0                     IS\n         BZ    FRESH                     CONTINUED\n         CLC   $QEUCMID,CTUCMID       AND THIS IS FROM SAME SOURCE\n         BE    TSOCMD                 GO TO TSOCMD\n         MVC   WTOW(IM15L),IM15    NOTIFY\n         MVC   WTOW+4(1),$SVCHAR\n         L     R0,CTUCMID          OTHER SOURCE\n         WTO   MF=(E,WTOW)         THAT CONTINUATION BUFFER IS ERASED\n         XC    TSOPARM(2),TSOPARM  ZERO TSO PARM LENGTH\n         MVC   CTUCMID,=X'77777777'\nFRESH    LA    R1,$QECMND\n         CLC   0(1,R1),$SVCHAR\n         BNE   NEXTCMD              (SHOULD NEVER HAPPEN)\n         CLI   1(R1),C'.'           PERIOD COMMAND\n         BE    NONTSO               YES, BRANCH\n         CLC   1(6,R1),=C'LOGOFF'   EXCEPTION TO TSO SYNTAX\n         BE    STOP\n         CLC   1(6,R1),=C'P     '   EXCEPTION TO TSO SYNTAX\n         BE    STOP\n         CLC   1(6,R1),=C'L     '   TREAT SINGLE L LIKE .L\n         BE    REPEAT\n         CLC   1(2,R1),=C'L+'       L+ IS SAME AS .L+\n         BE    REPEAT\n         CLC   1(2,R1),=C'L/'       L/ IS SAME AS .L/\n         BE    REPEAT\n         CLC   1(2,R1),=C'L='       L= IS SAME AS .L=\n         BE    REPEAT\n         B     TSOCMD\nREPEAT   LA    R1,1(,R1)            POINT TO L\n         B     LISTTSO\nNONTSO   LA    R1,2(,R1)            POINT PAST TRIPLE CHAR\n         CLI   0(R1),C'P'           STOP\n         BE    STOP\n         CLI   0(R1),C'T'           TSO, NO REPLY\n         BE    TSO\n         CLI   0(R1),C'L'           LIST REPLY\n         BE    LISTTSO\n         CLI   0(R1),C'X'           STOP THE TIMER TASK\n         BE    STOPTIME\n         CLI   0(R1),C'M'           MONITOR, TURN ON DEBUG BIT\n         BE    MONITOR\n         CLI   0(R1),C'J'           REQUEST STC ID FROM JES\n         BE    STC\n         CLI   0(R1),C'S'           SET SSCTUPSS ON/OFF\n         BE    UPSS\nINVCMD   MVC   WTOW(IM05L),IM05\n         MVC   WTOW+4(1),$SVCHAR\n         L     R0,$QEUCMID         CONSOLE ID\n         WTO   MF=(E,WTOW)         'INVALID COMMAND'\n         B     NEXTCMD\n         SPACE\nSTC      TM    $SVSTUS,$SVSTUSI    DO WE HAVE AN ID ALREADY\n         BO    NEXTCMD             YES, DO NOTHING\n         BAL   R14,REQJOBID\n         B     NEXTCMD\n         SPACE\nSTOPTIME OI    FLAG,X'20'          TELL TIMER TO STOP\n         B     NEXTCMD\n         SPACE\nMONITOR  CLI   1(R1),C'0'\n         BE    MONOFF\n         CLI   1(R1),C'1'\n         BE    MONON\n         B     INVCMD\nMONON    OI    FLAG,X'01'          MONITOR ON\n         B     NEXTCMD\nMONOFF   NI    FLAG,255-X'01'      MONITOR OFF\n         B     NEXTCMD\n         SPACE\n************************************************************\n*                                                          *\n*         .S0 AND .S1 COMMAND                              *\n*                                                          *\n************************************************************\n         SPACE\nUPSS     CLI   1(R1),C'0'\n         BE    UPSS0\n         CLI   1(R1),C'1'\n         BE    UPSS1\n         B     INVCMD\nUPSS1    OI    SSCTFLG1,SSCTUPSS\n         B     NEXTCMD\nUPSS0    NI    SSCTFLG1,255-SSCTUPSS\n         B     NEXTCMD\n         SPACE\n************************************************************\n*                                                          *\n*         .L COMMAND                                       *\n*                                                          *\n************************************************************\n         SPACE\nLISTTSO  CLI   1(R1),C' '          JUST L\n         BE    LIST                YES, BRANCH\n         CLI   1(R1),C'+'          L+XX\n         BE    LISTSK0             BRANCH IF SKIP SPECIFIED\n         CLI   1(R1),C'/'          L/XX\n         BE    LISTMX0             BRANCH IF MAX SPECIFIED\n         CLI   1(R1),C'='          L=XX\n         BE    LISTID\n         B     LISTCOMA            CHECK FOR L,L=NN SAME AS JUST L=NN\nLISTSK0  CLI   2(R1),C'0'          IS IT NUMERIC\n         BL    LISTERR             NO, ERROR\n         LA    R15,3(,R1)          POINT PAST 1ST DIGIT\n         CLI   3(R1),C'0'          SECOND DIGIT\n         BL    LISTSK1             NO, PACK 1\n         LA    R15,1(,R15)         POINT PAST 2ND DIGIT\n         CLI   4(R1),C'0'          3RD DIGIT\n         BL    LISTSK2             NO, PACK 2\n         LA    R15,1(,R15)         POINT PAST 3RD DIGIT\n         CLI   5(R1),C'0'          4TH DIGIT\n         BL    LISTSK3             NO, PACK 3\n         LA    R15,1(,R15)         POINT PAST 4TH DIGIT\n         CLI   6(R1),C'0'          5TH DIGIT\n         BL    LISTSK4             NO, PACK 4\n         B     LISTERR             YES, BUT WE DONT ALLOW 5\nLISTSK4  PACK  DOUBLE,2(4,R1)\n         B     LISTSKX\nLISTSK3  PACK  DOUBLE,2(3,R1)\n         B     LISTSKX\nLISTSK2  PACK  DOUBLE,2(2,R1)\n         B     LISTSKX\nLISTSK1  PACK  DOUBLE,2(1,R1)\nLISTSKX  CVB   R0,DOUBLE\n         AH    R0,SKIPNUM\n         STH   R0,SKIPNUM\n         CLI   0(R15),C' '         FOLLOWED BY A BLANK\n         BE    LIST                YES, VALID\n         LR    R1,R15\n         BCTR  R1,0                POINT R1 TO LAST DIGIT\n         CLI   1(R1),C'+'          WANT TO CALCULATE +XX+YY\n         BE    LISTSK0             OK, WE CAN DO THAT\n         CLI   1(R1),C'/'          /MAX\n         BNE   LISTCOMA\nLISTMX0  CLI   2(R1),C'0'          IS IT NUMERIC\n         BL    LISTERR             NO, ERROR\n         LA    R15,3(,R1)          POINT PAST 1ST DIGIT\n         CLI   3(R1),C'0'          SECOND DIGIT\n         BL    LISTMX1             NO, PACK 1\n         LA    R15,1(,R15)         POINT PAST 2ND DIGIT\n         CLI   4(R1),C'0'          3RD DIGIT\n         BL    LISTMX2             NO, PACK 2\n         B     LISTERR             YES, ERROR\nLISTMX2  PACK  DOUBLE,2(2,R1)\n         B     LISTMXX\nLISTMX1  PACK  DOUBLE,2(1,R1)\nLISTMXX  CVB   R0,DOUBLE\n         LTR   R0,R0\n         BNZ   *+8\n         LA    R0,1                CANNOT ALLOW LESS THAN 1\n         CH    R0,=H'50'\n         BNH   *+8\n         LH    R0,=H'50'           CANNOT ALLOW MORE THAN 50\n         STH   R0,MAXWTOS\n         CLI   0(R15),C' '         FOLLOWED BY A BLANK\n         BE    LIST                YES, VALID\n         LR    R1,R15\n         BCTR  R1,0                POINT R1 TO LAST DIGIT\nLISTCOMA CLC   1(2,R1),=C',L'      FOLLOWED BY COMMA-L\n         BNE   LISTERR             NO, SYNTAX ERROR\n         LA    R1,2(,R1)           POINT R1 TO THE L\n         CLI   1(R1),C' '          JUST COMMA-L IS OK BUT\n         BE    LIST                 COULD HAVE BEEN LEFT OFF ALTOGETHER\nLISTID   CLI   1(R1),C'='\n         BNE   LISTERR\n         CLI   2(R1),C'0'\n         BL    LIST\n         CLI   3(R1),C'0'\n         BL    LISTID1\n         PACK  DOUBLE,2(2,R1)\n         B     *+10\nLISTID1  PACK  DOUBLE,2(1,R1)\n         CVB   R0,DOUBLE\n         LTR   R0,R0\n         BZ    LIST\n         B     LISTR0\nLISTERR  XC    SKIPNUM,SKIPNUM\n         B     INVCMD\n         SPACE\n************************************************************\n*                                                          *\n*        TIMER INTERRUPT                                   *\n*                                                          *\n************************************************************\n         SPACE\nTIMEPOST EQU   *\n         MVI   ECBTIMER,0\n         L     R1,TIMECTR\n         CH    R1,=H'10'\n         BH    WAIT\n*              ISSUE A MESSAGE AT FIRST 10 TIMER INTERRUPTS\n         LA    R1,1(,R1)\n         ST    R1,TIMECTR\n         TM    FLAG,X'01'          MONITORING\n         BZ    WAIT                NO, SKIP MESSAGE\n         MVC   WTOW(IM06L),IM06\n         MVC   WTOW+4(1),$SVCHAR\n         WTO   MF=(E,WTOW)         'TIME'\n         B     WAIT\n         SPACE\n************************************************************\n*                                                          *\n*        TSO COMMAND                                       *\n*                                                          *\n************************************************************\n         SPACE\nTSOCMD   OI    FLAG,X'80'          LIST THE OUTPUT\n         LA    R1,$QECMNDL+5       POINT TO COMMAND\n         LH    R15,$QECMNDL        GET LENGTH\n         SL    R15,=F'5'           REDUCE LENGTH BY 1 LEADING CHAR\n         B     TSOCOMM\nTSO      LA    R1,$QECMNDL+7       POINT TO COMMAND\n         LH    R15,$QECMNDL        GET LENGTH\n         SL    R15,=F'7'           REDUCE LENGTH BY 3 LEADING CHARS\nTSOCOMM  LH    R14,TSOPARM         GET CURRENT LENGTH OF TSO PARM\n         LA    R0,TSOPARM+2(R14)   POINT AFTER ANY EXISTING DATA\n         AR    R15,R14             COMBINE LENGTHS\n         LR    R14,R0              PREPARE TO MOVE\n         MVC   0(128,R14),0(R1)    COPY OR APPEND DATA TO PARM\n         STH   R15,TSOPARM         SET LENGTH OF PARM\n         LA    R15,TSOPARM+2(R15)  POINT PAST END OF COMMAND\nCONTIN1  BCTR  R15,0               BACK UP 1\n         CLI   0(R15),C' '         IS THIS A TRAILING BLANK\n         BE    CONTIN1             YES, IGNORE\n         CLI   0(R15),C'-'         IS LAST CHAR A HYPHEN\n         BNE   CONTINX             NO, EXIT\n         LA    R14,TSOPARM+2       YES, RESET LENGTH\n         SR    R15,R14             COMPUTE LENGTH EXCLUDING HYPHEN\n         BNP   CONTINX             MIGHT HAPPEN IF ALL BLANKS\n         STH   R15,TSOPARM         SET LENGTH OF PARM\n         MVC   CTUCMID,$QEUCMID    SAVE SOURCE UCMID\n         B     NEXTCMD             GO GET CONTINUATION\nCONTINX  LA    R14,TSOPARM         PUT ADDRESS OF PARM FIELD\n         LA    R1,TSOPARMP          IN A FULLWORD\n         ST    R14,0(,R1)            POINTED TO BY R1\n         OI    0(R1),X'80'            AND SET HIGH BIT ON\n         XC    ATTCECB2(4),ATTCECB2\n         LA    R6,IKJEFT01         POINT TO TMP NAME\n         LA    R7,ATTCECB2         POINT TO ECB\n         SPACE\n         ATTACH EPLOC=(R6),ECB=(R7),SZERO=NO\n         SPACE\n         ST    R1,ATTCTCB2\n         SPACE\n         WAIT  ECB=ATTCECB2\n         SPACE\n         LA    R1,ATTCTCB2\n         DETACH (1)\n         SPACE\n         XC    TSOPARM(2),TSOPARM  ZERO TSO PARM LENGTH\n         MVC   CTUCMID,=X'77777777'\n         SPACE\n         L     R1,540              PSATOLD\n         L     R1,180(,R1)         TCBJSCB\n         TM    236(R1),X'01'       JSCBAUTH BIT\n         BO    AUTHOK              BRANCH IF ON\n         OI    236(R1),X'01'       SET IT BACK ON\nAUTHOK   EQU   *\n         TM    FLAG,X'80'          OUTPUT TO BE LISTED\n         BO    LIST                YES, BRANCH\n         B     NEXTCMD\n         SPACE\n************************************************************\n*                                                          *\n*        LIST TSO OUTPUT                                   *\n*                                                          *\n************************************************************\n         SPACE\nLIST     LH    R0,$QEUCMID+2       CONSOLE ID OF SOURCE\nLISTR0   LA    R1,WTOCOPYP\n         LA    R15,6               PARM LENGTH\n         STH   R15,4(,R1)\n         LA    R15,4(,R1)          POINT TO NEW PARM FIELD\n         MVC   2(2,R15),MAXWTOS    MAX WTO'S\n         STH   R0,4(,R15)          CONSOLE ID\n         LH    R0,SKIPNUM\n         STH   R0,6(,R15)          SKIPNUM\n         ST    R15,0(,R1)          STORE PARM FIELD ADDRESS\n         OI    0(R1),X'80'\n*        LINK  EP=TSSOWTO\n         L     R15,ENTRYWTO\n         BALR  R14,R15\n         MVC   MAXWTOS,MAXWTOV     RESET MAXWTOS\n         XC    SKIPNUM,SKIPNUM     RESET SKIPNUM TO ZERO\n         B     NEXTCMD\n         EJECT\n************************************************************\n*                                                          *\n*        REQUEST JOB ID FROM PRIMARY SUBSYSTEM             *\n*                                                          *\n************************************************************\n         SPACE\nREQJOBID CLC   MSTR,=C'MSTR'       DID WE START UNDER JES\n         BNER  R14                 YES, RETURN\n         LR    R6,R14\n         LA    R5,$SVSSOB\n         USING SSOB,R5\n         MVC   SSOBID(4),=C'SSOB'\n         LA    R15,SSOBHSIZ\n         STH   R15,SSOBLEN\n         LA    R15,SSOBRQST\n         STH   R15,SSOBFUNC\n         LA    R15,$SVSSIB\n         MVC   0(36,R15),PRIMSSIB\n         ST    R15,SSOBSSIB\n         LA    R15,SSRRBGN\n         ST    R15,SSOBINDV\n         LA    R1,$SVSSOBA\n         ST    R5,0(,R1)\n         OI    0(R1),X'80'\n         LA    R15,8\n         STH   R15,SSRRLEN\n         LA    R15,$SVRRECB\n         ST    R15,SSRRSECB\n         DROP  R5                  SSOB\n         SPACE\n         LR    R5,R1\n         MODESET MODE=SUP\n         LR    R1,R5\n         SPACE\n         IEFSSREQ\n         SPACE\n         LR    R5,R15\n         MODESET MODE=PROB\n         LR    R15,R5\n         SPACE\n         LTR   R15,R15\n         BZ    OKREQ\n         MVC   WTOW(IM12L),IM12\n         MVC   WTOW+4(1),$SVCHAR\n         WTO   MF=(E,WTOW)         JOBID REQUEST FAILED\n         BR    R6\nOKREQ    OI    $SVSTUS,$SVSTUSI    WE HAVE A JOB ID\n*\n*              OPENING A SYSOUT DATA SET WILL CAUSE A 913-C0 ABEND\n*              UNLESS THE JSCB POINTS TO A JES2 SSIB.  WE COULD\n*              MODIFY THE SSIB, OR POINT THE JSCB TO A NEW SSIB.\n*              THE LATTER IS USED HERE.  THE OTHER METHOD HAS\n*              NOT BEEN TESTED.\n*\n         SPACE\n*        L     R1,$SSIB            POINT TO ORIGINAL SSIB\n*        USING SSIB,R1             ADDRESS ORIGINAL SSIB\n*        MVC   SSIBJBID,$SVSSIB+12 MODIFY THE ORIGINAL SSIB\n*        MVC   HSSNM,SSIBSSNM      SAVE ORIGINAL SSIBSSNM\n*        MVC   SSIBSSNM,PRIMSSIB+8 MODIFY THE ORIGINAL SSIB\n*        DROP  R1                  SSIB\n         SPACE\n         LA    R1,$SVSSIB          SSIB\n         L     R15,540             PSATOLD-PSA\n         L     R15,180(,R15)       TCBJSCB-TCB(,R15)\n         L     R15,X'15C'(,R15)    JSCBSACT-JSCB(,R15)\n         STCM  R1,7,X'13D'(R15)    JSCBSSIB-JSCB(,R15)\n         OI    $SVSTUS,$SVSTUSJ    INDICATE JSCB MODIFIED\n         SPACE\n*        MVC   JBIDM01A(8),$SVSSIB+12\n*        LA    R1,JBIDM01\n*        WTO   MF=(E,(1))\n         BR    R6\n         EJECT\n************************************************************\n*                                                          *\n*        RETURN JOB ID TO PRIMARY SUBSYSTEM                *\n*                                                          *\n************************************************************\n         SPACE\n*              IF THIS IS NOT DONE, JES2 ISSUES MESSAGE\n*              $HASP310 SYSLOG  TERMINATED AT END OF MEMORY\n         SPACE\nRETJOBID TM    $SVSTUS,$SVSTUSI    DO WE HAVE A JOB ID\n         BZR   R14                 NO, RETURN\n         LR    R6,R14              SAVE RETURN ADDRESS\n         LA    R5,$SVSSOB          SSOB\n         USING SSOB,R5\n         LA    R15,SSOBRTRN        RETURN JOB ID\n         STH   R15,SSOBFUNC\n         DROP  R5                  SSOB\n         PRINT NOGEN\n         SPACE\n         MODESET MODE=SUP\n         SPACE\n         LA    R1,$SVSSOBA\n         SPACE\n         IEFSSREQ\n         SPACE\n         MODESET MODE=PROB\n         SPACE\n         PRINT GEN\n         LR    R14,R6              RESTORE RETURN ADDRESS\n         BR    R14                 RETURN\n         EJECT\n************************************************************\n*                                                          *\n*        STOP - DISCONNECT THE SUBSYSTEM                   *\n*                                                          *\n************************************************************\n         SPACE\nSTOP     EQU   *\n         OI    $SVSTUS,$SVSTUST    TERMINATING\n         SLR   R15,R15\n         ST    R15,SSCTSSVT        DISCONNECT SSVT\n         MVC   WTOW(IM14L),IM14\n         MVC   WTOW+4(1),$SVCHAR\n         LA    R1,WTOW\n         WTO   MF=(E,(1))          DISCONNECTED\n         SPACE\n         BAL   R14,RETJOBID        RETURN JOB ID\n         SPACE\n         L     R15,HSSNM           ORIGINAL SSIBSSNM\n         L     R1,$SSIB            ORIGINAL SSIB\n         LTR   R15,R15             DID WE CHANGE THE NAME\n         BZ    *+8                 NO, SKIP NEXT INSTR\n         ST    R15,8(,R1)          YES, RESTORE ORIGINAL\n         SPACE\n         TM    $SVSTUS,$SVSTUSJ    HAS JSCBSSIB BEEN MODIFIED\n         BZ    OKJSCB              NO, BRANCH\n         L     R15,540             PSATOLD-PSA\n         L     R15,180(,R15)       TCBJSCB-TCB(,R15)\n         L     R15,X'15C'(,R15)    JSCBSACT-JSCB(,R15)\n         ST    R1,X'13C'(,R15)     JSCBSSIB-JSCB(,R15)\nOKJSCB   EQU   *\n         SPACE\n         TM    $SVSTUS,$SVSTUSQ    CSA TO BE FREED (QUEUE)\n         BZ    EXITQ               NO, SKIP FREEMAIN\n         LM    R0,R1,QUEFREE\n         FREEMAIN R,LV=(0),A=(1)\nEXITQ    EQU   *\n         SPACE\n         TM    $SVSTUS,$SVSTUSC    CSA TO BE FREED\n         BZ    EXITF               NO, BRANCH\n         LM    R0,R1,CSAFREE\n         FREEMAIN R,LV=(0),A=(1)\nEXITF    EQU   *\n         SL    R2,=F'8'            POINT TO SSVT PREFIX\n         LR    R1,R2               SET R1 FOR FREEMAIN\n         L     R0,4(,R1)           GET LENGTH OF SSVT\n         FREEMAIN R,LV=(0),A=(1)\n         SPACE\n         SLR   R15,R15\n         ST    R15,$SSVT\n         SPACE\n*        WTO   '&MID. SSVT FREED'\n         B     EXITD\n         SPACE\nINOSSCT  MVC   WTOW(IM01L),IM01\n         L     R1,540              PSATOLD\n         L     R1,12(,R1)          TCBTIOT\n         MVC   WTOW+IM01NAME(4),0(R1)\n         LA    R1,WTOW\n         B     EXITWTO\n         SPACE\nLONGNAME MVC   WTOW(IM17L),IM17\n         LA    R1,WTOW\n         B     EXITWTO\n         SPACE\nITSATSO  MVC   WTOW(IM16L),IM16\n         LA    R1,WTOW\n         B     EXITWTO\n         SPACE\nINSTRTER MVC   WTOW(IM02L),IM02\n         MVC   WTOW+4(1),$SVCHAR\n         MVC   WTOW+6(4),JBID      PUT SUBSYSTEM NAME IN MESSAGE\n         LA    R1,WTOW\n         WTO   MF=(E,(1))          TSSO IS ALREADY UP\n         B     EXIT0               JUST GO AWAY\nEXITWTO  EQU   *\n         WTO   MF=(E,(1))\nEXITFM   L     R2,$SSVT\n         LTR   R2,R2\n         BNZ   EXITF\n         SPACE\nEXITD    EQU   *\n         LA    R1,ATTCTCB1         TIMER TASK\n         CLC   0(4,R1),=F'0'       IS THERE A SUBTASK\n         BE    EXITNOD             NO, BYPASS DETACH\n         DETACH (1)\nEXITNOD  EQU   *\n         SPACE\nEXIT0    SR    15,15\n         LR    R2,R13              SAVE R13 FOR FREEMAIN\n         L     13,4(,13)           POINT TO PREVIOUS SAVE AREA\n         ST    15,16(,13)          SAVE R15 FOR LM\n         SPACE\n         MODESET KEY=NZERO\n         SPACE\n         LR    R1,R2               AREA TO BE FREEMAINED\n         L     R0,SUBPOOL\n         FREEMAIN R,LV=(0),A=(1)\n         LM    14,12,12(13)\n         BR    14\n         EJECT\n************************************************************\n*                                                          *\n*        ESTAE EXIT                                        *\n*                                                          *\n************************************************************\n         SPACE\nESTAEXIT DC    0H'0'\n         USING *,R15\n         CH    R0,ESTAE12\n         BNE   ESTASDWA\n         SPACE\n*              REG 0 IS 12\n*              STORAGE NOT AVAILABLE FOR SDWA\n*              REG  1  -  CONTAINS ABEND COMPLETION CODE\n*              REG  2  -  ADDRESS OF PARAM LIST FROM ESTAE MACRO\n*              REG 14  -  RETURN ADDRESS\n*              REG 15  -  ENTRY ADDRESS\n*              REGS 3-13  UNPREDICTABLE\n         SPACE\n         STM   14,12,ESTAESV+12-@DATA(R2)\n         LR    R9,R2               RESTORE R9\n         ST    R1,ESTABEND\n         MVI   ESTAESW,C'N'\n         B     ESTAEX\nESTAE12  DC    H'12'\n         SPACE\nESTASDWA EQU   *\n         SPACE\n*              REG  1  -  ADDRESS OF SDWA\n*              REG 13  -  ADDRESS OF 72 BYTE REGISTER SAVE AREA\n*              REG 14  -  RETURN ADDRESS\n*              REG 15  -  ENTRY ADDRESS\n*              REGS 2-12  UNPREDICTABLE\n         SPACE\n         STM   14,12,12(R13)\n         L     R9,0(,R1)           RESTORE R9\n         MVC   ESTABEND(4),4(R1)   SAVE ABEND CODE FROM SDWA\n         MVC   ESTAESV+12(60),12(R13)\n         MVI   ESTAESW,C'S'\n         ST    R1,ESTAESDW         SAVE SDWA ADDRESS\n         SPACE\n*              COMMON TO EITHER TYPE OF ENTRY.\n*              (AS LONG AS YOU DONT REFER TO SDWA)\n         SPACE\nESTAEX   EQU   *\n         LM    R11,R12,ESTAER12    RESTORE BASE REGISTER\n         DROP  R15                 ESTAE EXIT ENTRY\n         L     R2,$SSVT\n         LTR   R2,R2\n         BZ    *+8\n         OI    $SVSTUS,$SVSTUST    SET TERMINATION FLAG\n         L     R4,$SSCT\n         LTR   R4,R4\n         BNZ   ESTASSCT\n         WTO   MF=(E,IM21)         ESTAE SSCT NOT AVAILABLE\n         B     ESTASSVT\nESTASSCT L     R2,SSCTSSVT\n         LTR   R2,R2               SSVT CONNECTED?\n         BNZ   ESTADISC\n         WTO   MF=(E,IM22)         ESTAE SSVT WAS NOT CONNECTED\n         B     ESTASSVT\nESTADISC EQU   *\n         L     R15,HSSNM           ORIGINAL SSIBSSNM\n         L     R1,$SSIB            ORIGINAL SSIB\n         LTR   R15,R15             DID WE CHANGE THE NAME\n         BZ    *+8                 IF NOT, SKIP NEXT INSTR\n         ST    R15,8(,R1)          YES, PUT OLD NAME BACK\n         SPACE\n         TM    $SVSTUS,$SVSTUSJ    HAS JSCBSSIB BEEN MODIFIED\n         BZ    ESJSCB              NO, BRANCH\n         L     R15,540             PSATOLD-PSA\n         L     R15,180(,R15)       TCBJSCB-TCB(,R15)\n         L     R15,X'15C'(,R15)    JSCBSACT-JSCB(,R15)\n         ST    R1,X'13C'(,R15)     JSCBSSIB-JSCB(,R15)\nESJSCB   EQU   *\n         SPACE\n         SLR   R15,R15\n         ST    R15,SSCTSSVT        DISCONNECT SSVT\n         WTO   MF=(E,IM23)         ESTAE SSVT DISCONNECTED\n         SPACE\n         TM    $SVSTUS,$SVSTUSQ    CSA TO BE FREED (QUEUE)\n         BZ    ESTACSAQ            NO, SKIP FREEMAIN\n         LM    R0,R1,QUEFREE\n         FREEMAIN R,LV=(0),A=(1)\nESTACSAQ EQU   *\n         SPACE\n         TM    $SVSTUS,$SVSTUSC    CSA TO BE FREED (SSSM)\n         BZ    ESTACSAF            NO, SKIP FREEMAIN\n         LM    R0,R1,CSAFREE\n         FREEMAIN R,LV=(0),A=(1)\nESTACSAF EQU   *\nESTASSVT L     R2,$SSVT\n         LTR   R2,R2\n         BNZ   ESTAFREE\n         WTO   MF=(E,IM24)         ESTAE SSVT NOT AVAILABLE\n         B     ESTAEX00\nESTAFREE SL    R2,=F'8'\n         LA    R15,COPYSSVT        COPY OF SSVT FOR DUMP\n         MVC   0(256,R15),0(R2)\n         MVC   256(256,R15),256(R2)\n         MVC   512(256,R15),512(R2)\n         MVC   768(256,R15),768(R2)\n         LR    R1,R2\n         L     R0,4(,R1)\n         SPACE\n         FREEMAIN R,LV=(0),A=(1)\n         SPACE\n         WTO   MF=(E,IM25)         ESTAE SSVT FREED\n         SPACE\nESTAEX00 EQU   *\n         CLI   ESTAESW,C'S'        SDWA PRESENT?\n         BNE   ESTANOWA            NO - BRANCH\n         L     R1,ESTAESDW         YES, RESTORE SDWA ADDRESS\n         MVI   X'FC'(R1),0         SET SDWARCDE = 0\n         LM    14,12,12(13)\n         BR    R14\n         SPACE\nESTANOWA LM    14,12,ESTAESV+12\n         SLR   R15,R15             CONTINUE TERMINATION\n         BR    R14\n         DROP  R11,R12          MAIN BASE\n         EJECT\n************************************************************\n*                                                          *\n*        TIMER TASK                                        *\n*                                                          *\n************************************************************\n         SPACE\n         DC    0D'0'\n         USING *,R12            SUBTASK BASE\nTIMER    B     16(,R15)\n         DC    AL1(11),CL11'TSSOTIME'\n         STM   14,12,12(R13)\n         LR    R12,R15\n         LM    R6,R7,0(R1)         INTERVAL, ECB\n         L     R9,8(,R1)           WORK AREA\n*        WTO   MF=(E,IM07)\nTIMELOOP EQU   *\n         SPACE\n         STIMER WAIT,BINTVL=(R6)\n         SPACE\n         POST  (R7),X'111'\n         SPACE\n         TM    FLAG,X'20'          TIME TO STOP?\n         BZ    TIMELOOP            NO - BRANCH\n         SPACE\n         WTO   MF=(E,IM08)\n         LM    14,12,12(R13)\n         BR    R14\n         EJECT\n************************************************************\n*                                                          *\n*        CONSTANTS AND WORKAREAS                           *\n*                                                          *\n************************************************************\n         SPACE\nSP241    DC    0F'0',AL1(241,0,0,0)  SUBPOOL 241\n$SVTL    EQU   1024\n$SVTLEN  DC    A($SVTL+8)\nMAXWTOV  DC    H'30'               MAX WTO DEFAULT\nLPAOPT   DC    C'C'                LPA OR CSA OPTION\n         SPACE\n*              THIS IS THE TABLE OF VALID NAMES OF COMMAND\n*              CHARACTERS AND THE CHARACTER EACH REPRESENTS.\nCCTAB    DC    CL3'AM&&'           AM = AMPERSAND\n         DC    CL3'HY-'            HY = HYPHEN\n         DC    CL3'AT@'            AT = AT SIGN\n         DC    CL3'PO#'            PO = POUND SIGN\n         DC    CL3'CA,'            CA = COMMA\n         DC    CL3'PE.'            PE = PERIOD\n         DC    CL3'SL/'            SL = SLASH\n*              ON OUR KEYBOARDS THE FOLLOWING CHARACTERS ARE\n*              LESS CONVENIENT BECAUSE THEY NEED THE SHIFT KEY.\n         DC    CL3'EQ='            EQ = EQUAL\n         DC    CL3'LT<'            LT = LESS THAN\n         DC    CL3'SC;'            SC = SEMICOLON\n         DC    CL3'CN:'            CN = COLON\n         DC    CL3'PC%'            PC = PERCENT\n         DC    CL3'AP'''           AP = APOSTROPHE (QUOTE)\n         DC    CL3'GT>'            GT = GREATER THAN\n         DC    CL3'AS*'            AS = ASTERISK (JES3 USES THIS)\n         DC    CL3'LP('            LP = LEFT PAREN\n         DC    CL3'RP)'            RP = RIGHT PAREN\n         DC    CL3'UB_'            UB = UNDERLINE BAR\n         DC    CL3'PL+'            PL = PLUS\n         DC    CL3'NT\u00ac'            NT = NOT SIGN\n         DC    CL3'QM?'            QM = QUESTION MARK\n         DC    CL3'VB|'            VB = VERTICAL BAR\n         DC    CL3'EP!'            EP = EXCLAMATION POINT\n         DC    CL3'DQ\"'            DQ = DOUBLE QUOTES\n         DC    AL3(0)              RESERVED FOR ZAP\n         DC    XL3'FFFFFF'         END OF TABLE\n         SPACE\nIM01     WTO   '&MID. SUBSYSTEM NAME NOT DEFINED',ROUTCDE=(2),MF=L\nIM01L    EQU   *-IM01\nIM01NAME EQU   4+12                OFFSET\n         SPACE\nIM02     WTO   '&MID. TSSO IS ALREADY ACTIVE',ROUTCDE=(2),MF=L\nIM02L    EQU   *-IM02\n         SPACE\nIM03     WTO   '&MID. OLD SSVT FOUND',ROUTCDE=(2),MF=L\nIM03L    EQU   *-IM03\n         SPACE\nIM04     WTO   '&MID. CONNECTED',ROUTCDE=(2),MF=L\nIM04L    EQU   *-IM04\n         SPACE\nIM05     WTO   '&MID. INVALID COMMAND',                                X\n               DESC=(5),MCSFLAG=(REG0,NOCPY),MF=L\nIM05L    EQU   *-IM05\n         SPACE\nIM06     WTO   '&MID. TIME',ROUTCDE=(2),MF=L\nIM06L    EQU   *-IM06\n         SPACE\nIM07     WTO   '&MID. TIMER STARTING',ROUTCDE=(2),MF=L\nIM07L    EQU   *-IM07\n         SPACE\nIM08     WTO   '&MID. TIMER STOPPING',ROUTCDE=(2),MF=L\nIM08L    EQU   *-IM08\n         SPACE\nIM09     WTO   '&MID. NO ESTAE',ROUTCDE=(2),MF=L\n         SPACE\nIM10     WTO   '&MID. WAITING',ROUTCDE=(2),MF=L\n         SPACE\nIM11     WTO   '&MID. POSTED',ROUTCDE=(2),MF=L\n         SPACE\nIM12     WTO   '&MID. JOBID REQUEST FAILED',ROUTCDE=(2),MF=L\nIM12L    EQU   *-IM12\n         SPACE\nIM14     WTO   '&MID. DISCONNECTED',ROUTCDE=(2),MF=L\nIM14L    EQU   *-IM14\n         SPACE\nIM15     WTO   '&MID. CONTINUATION BUFFER ERASED, RE-ENTER',           X\n               DESC=(5),MCSFLAG=(REG0,NOCPY),MF=L\nIM15L    EQU   *-IM15\n         SPACE\nIM16     WTO   '&MID  TSSO FROM TSO',ROUTCDE=(2),MF=L\nIM16L    EQU   *-IM16\n         SPACE\nIM17     WTO   '&MID. JOBNAME EXCEEDS 4 CHARACTERS',ROUTCDE=(2),MF=L\nIM17L    EQU   *-IM17\n         SPACE\nIM21     WTO   '&MID. ESTAE SSCT NOT AVAILABLE',MF=L\nIM22     WTO   '&MID. ESTAE SSVT WAS NOT CONNECTED',MF=L\nIM23     WTO   '&MID. ESTAE SSVT DISCONNECTED',MF=L\nIM24     WTO   '&MID. ESTAE SSVT NOT AVAILABLE',MF=L\nIM25     WTO   '&MID. ESTAE SSVT FREED',MF=L\nJBIDM01  WTO   '&MID. JOBID IS XXXXXXXX',ROUTCDE=(2),MF=L\nJBIDM01A EQU   *-12,8\n         SPACE\nMASKSSIB DC    0F'0',C'SSIB',AL2(36,0),C'JES2',CL16' ',XL8'00'\n         SPACE\nWTOR1    WTOR  '&MID. SPECIFY TSSO OPTIONS',                           X\n               R6,L'PARMAREA,R7,MF=L\nWTOR1L   EQU   *-WTOR1\n         SPACE\nWTOR2    WTOR  '&MID. TSSO PARM OR OPTION ERROR - RESPECIFY',          X\n               R6,L'PARMAREA,R7,MF=L\nWTOR2L   EQU   *-WTOR2\n         SPACE\nESTAEM   ESTAE 0,MF=L\nESTAEL   EQU   *-ESTAEM\n         SPACE\nOKWTO    WTO   '&MID. OK',DESC=(5),MCSFLAG=(REG0,NOCPY),MF=L\n         SPACE\n         LTORG\n         DC    0D'0'\nCAPS     DC    129AL1(*-CAPS)      00-80\n         DC    9AL1(*-CAPS+X'40')  81-89 BECOME C1-C9\n         DC    7AL1(*-CAPS)        8A-90\n         DC    9AL1(*-CAPS+X'40')  91-99 BECOME D1-D9\n         DC    8AL1(*-CAPS)        9A-A1\n         DC    8AL1(*-CAPS+X'40')  A2-A9 BECOME E2-E9\n         DC    86AL1(*-CAPS)       AA-FF\n         SPACE\n         DC    0D'0'\nCOPYSSVT DC    256F'0'\n         SPACE\n************************************************************\n*                                                          *\n*        DSECTS                                            *\n*                                                          *\n************************************************************\n         SPACE\n@DATA    DSECT\n         DS    18F                 REGISTER SAVEAREA\nDOUBLE   DS    D\nIKJEFT01 DS    CL8\nPARMECB  DC    F'0'\nPARMAREA DC    XL100'00',X'00'\nALTJES   DS    CL1\n*\nWTOW     DS    0F,XL128\n$OPTSTAT DC    XL1'00'\n$OPTSTD  EQU   X'30'\nCHARW    DS    CL1\nCHATW    DS    CL1\nOPTION   DS    CL1\n$HTCB    DC    F'0'\n$SSVT    DC    F'0'\n$SSCT    DC    F'0'\n$SSSM    DC    F'0'\n$SSIB    DC    F'0'\nATTCECB1 DC    F'0'\nATTCTCB1 DC    F'0'\nATTCECB2 DC    F'0'\nATTCTCB2 DC    F'0'\nFLAG     DS    F\nWTOCOPYP DS    3F\nECBLIST  DS    2F\nECBTIMER DS    F\nTIMECTR  DS    F\nINTERVAL DS    F\nTIMEPARM DS    3F\nHSSNM    DS    F\nPRIMSSIB DS    9F  XL36\nCSAFREE  DS    2F\nQUEFREE  DS    2F\nENTRYWTO DS    F\nCTUCMID  DS    F                   UCMID OF LINE TO BE CONTINUED\nMSTR     DS    CL4                 MSTR IF NOT UNDER JES\nJBID     DS    CL4                 SUBSYSTEM NAME\nMAXWTOS  DS    H                   TSSOWTO MAX WTO'S\nSKIPNUM  DS    H                   TSSOWTO SKIP COUNT\n         DS    0F                  MVS/XA                  JDM\nESTAEW   DS    XL(ESTAEL)          MVS/XA                  JDM\nESTAER12 DS    3F\nESTAER2  DS    F\nESTAESW  DS    F\nESTABEND DS    F\nESTAESV  DS    18F\nESTAESDW DS    F\n         DS    0D\n@DATAX   EQU   *-@DATA\nTSOPARMP DS    F\nTSOPARM  DS    H,1024C\n         DS    0D\n@DATAL   EQU   *-@DATA\n         SPACE\n************************************************************\n*                                                          *\n*         MAP OF CVT                                       *\n*                                                          *\n************************************************************\n         SPACE\nCVTPTR   EQU   16\nCVT      DSECT\nCVTMAP   EQU   *\n         ORG   CVT+X'128'\nCVTJESCT DS    A\n         SPACE\n         IEFJESCT\n         SPACE 3\n         IEFJSCVT\n         SPACE 3\n         IEFJSSVT\n         SPACE\n************************************************************\n*                                                          *\n*         MAP OF SSVT AREA WE USE FOR OUR OWN PURPOSES     *\n*                                                          *\n************************************************************\n         SPACE\n         ORG   SSVTFRTN+(32*4)     ROOM FOR 32 RTN POINTERS\n$SVSTUS  DS    F\n$SVSTUSP EQU   X'80'\n$SVSTUST EQU   X'40'               TERMINATING\n$SVSTUSR EQU   X'20'\n$SVSTUSQ EQU   X'08'               QUEUE AREA IS GETMAINED\n$SVSTUSC EQU   X'04'               CSA SSSM AREA IS GETMAINED\n$SVSTUSI EQU   X'02'               JOB ID HAS BEEN REQUESTED FROM JES\n$SVSTUSJ EQU   X'01'               JSCB IS MODIFIED\n$SVCHAR  DS    CL1\n$SVCHAT  DS    CL1\n$SVFLAG  DS    BL2\n$SVPOSTP DS    F\n$SVPOSTE DS    F\n$SVPASCB DS    F\n$SVPOSTL DS    3F\n$SVACTIV DS    F\n$SVOKWTO DS    3F\n$SVQMAXQ DS    F                   MAXIMUM QUEUE SIZE\n$SVQUEUE DS    2F                  NUMBER OF COMMANDS QUEUED\n$SVQADDR DS    F                   ADDRESS OF NEXT COMMAND TO PROCESS\n$SVSSIB  DS    9F\n$SVSSOBA DS    F\n$SVSSOB  DS    5F,7F\n$SVRRECB DS    F\n$SVTSIZE EQU   *-SSVTFRTN          MUST NOT EXCEED 1024\n$SVTSIZR EQU   1024-$SVTSIZE       HOW CLOSE TO 1024 ARE WE\n         SPACE\n************************************************************\n*                                                          *\n*         MAP OF A QUEUE ENTRY                             *\n*                                                          *\n************************************************************\n         SPACE\n$QENTRY  DSECT\n$QENEXT  DS    F                   POINTER TO NEXT QUEUE ENTRY\n$QEUCMID DS    F\n$QECMNDL DS    F\n$QECMND  DS    CL140\n         DS    0F                  INSURE LENGTH IS MULTIPLE OF 4\n$QESIZE  EQU   *-$QENTRY           SIZE OF EACH QUEUE ENTRY\n         SPACE\n         IEFJSSIB\n         SPACE 3\n         IEFJSSOB (CM,RR),CONTIG=YES\n         SPACE 3\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TSSODOC": {"ttr": 1799, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x82\\x16/\\x00\\x82\\x16/\\x15\\x12\\x01\\x0e\\x01\\x0e\\x00\\x00\\xc1\\xe2\\xd4\\xc9\\xf0\\xf5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1982-06-11T00:00:00", "modifydate": "1982-06-11T15:12:00", "lines": 270, "newlines": 270, "modlines": 0, "user": "ASMI05"}, "text": "     ****************************************************************\n     *                                                              *\n     *         'TSSO' - TSO SUBSYSTEM FOR CONSOLES                  *\n     *                                                              *\n     ****************************************************************\n\n     WRITTEN BY BILL GODFREY, PLANNING RESEARCH CORPORATION, MCLEAN VA.\n\n     DATE OF LAST CHANGE: JUNE 11 1982.\n\n     THE TSSO SUBSYSTEM ALLOWS MOST TSO COMMANDS TO BE EXECUTED FROM AN\n     OPERATOR CONSOLE UNDER MVS, WHETHER JES IS UP OR NOT.\n\n     THIS DOCUMENT BRIEFLY DESCRIBES SOME OF THE FEATURES OF TSSO AND\n     HOW TO INSTALL IT.\n\n     TO ENTER A TSO COMMAND ON A CONSOLE, TYPE IN AN AMPERSAND FOLLOWED\n     BY THE COMMAND. FOR EXAMPLE:\n        &LISTDS 'SYS1.BRODCAST'\n\n     OUTPUT FROM COMMANDS THAT USE 'PUTLINE' WILL BE SENT TO THE\n     CONSOLE FROM WHICH THE COMMAND WAS ENTERED.  OUTPUT FROM COMMAMNDS\n     THAT USE 'TPUT' OR ACCESS METHODS WILL NOT APPEAR ON THE CONSOLE.\n\n     A MAXIMUM OF 30 LINES OF OUTPUT WILL BE SENT TO THE CONSOLE, TO\n     PREVENT WTO BUFFERS FROM FILLING UP.  SEE THE '.L' COMMAND,\n     DESCRIBED LATER, FOR A WAY TO HANDLE MORE THAN 30 LINES.\n\n     TO STOP THE SUBSYSTEM, TYPE IN\n        &LOGOFF\n     OR\n        &P\n\n     IF YOUR SYSTEM ALREADY HAS A SUBSYSTEM THAT USES THE AMPERSAND,\n     THERE IS A PARM KEYWORD THAT WILL MAKE TSSO USE ANOTHER CHARACTER.\n\n     SINCE THIS IS A SUBSYSTEM, THE NAME OF THE PROC YOU USE TO START\n     IT MUST BE IN THE SUBSYSTEM NAME TABLE (CSECT IEFJESNM IN IEEVIPL).\n\n     UNFORTUNATELY, EACH LINE ENTERED HAS NO RELATION TO THE LAST\n     COMMAND ENTERED, SO IF YOU TYPE IN THE 'EDIT' COMMAND, THE NEXT\n     COMMAND YOU TYPE WILL NOT BE IN 'EDIT' MODE.\n\n     BUT IF YOU TYPE IN AN 'ALLOC' COMMAND, THE ALLOCATION\n     WILL STILL BE THERE FOR SUBSEQUENT COMMANDS.\n\n     WE USE A COMMAND CALLED 'EF' TO EDIT DATA SETS\n     FROM A CONSOLE.  ITS SYNTAX IS\n        EF SUBCOMMAND;SUBCOMMAND;SUBCOMMAND...\n     IT USES WHATEVER DATA SET IS CURRENTLY PRE-ALLOCATED\n     TO THE FILENAME 'EDITFILE' AND BUILDS AN EDIT COMMAND\n     AND STACKS THE EDIT COMMAND PLUS THE SPECIFIED\n     SUBCOMMANDS.  FOR EXAMPLE,\n        &ALLOC FI(EDITFILE) DA('SYS1.PARMLIB(LNKLST00)') SHR\n        &EF V; C /SYS3/SYS4/ ALL;C /SYS2/SYS3/ ALL;SAVE\n        &EF V; C /TESTLIB/USERLIB/ ALL;SAVE\n     FOR UNNUMBERED DATA SETS, USE 'EFN' INSTEAD OF 'EF'\n\n     WE USE A COMMAND CALLED 'STACK' TO ENTER MULTIPLE\n     COMMANDS ON ONE LINE. THE SYNTAX IS:\n        STACK COMMAND;COMMAND;COMMAND....\n\n     IN BOTH 'EF' AND 'STACK', IF YOU WANT THE SEMICOLON TO\n     BE LEFT IN THE COMMAND AS TEXT, SPECIFY A PAIR OF SEMI-\n     COLONS.  THEY WILL BE CONVERTED TO A SINGLE SEMICOLON\n     AND NOT TREATED AS A SEPARATOR.\n\n     ON SYSTEMS THAT HAVE THE 'PCF' PRODUCT, 'STACK' AND\n     'EF' MAY NOT WORK THE SAME UNDER A REAL TSO SESSION\n     AS THEY DO UNDER TSSO, BECAUSE PCF HANDLES SEMICOLONS\n     BEFORE 'STACK' AND 'EF' EVER GET CONTROL.\n\n     SINCE THIS IS A SUBSYSTEM AND NOT JUST A STARTED TASK,\n     IT WILL RUN FINE EVEN IF JES2 IS NOT UP, ALTHOUGH\n     COMMANDS THAT USE SYSOUT WILL NOT WORK.  TSSO IS A\n     HANDY TOOL FOR FIXING JES2 PROBLEMS WHEN JES2 IS DOWN,\n     OR FIXING TCAM/TSO PROBLEMS WHEN TCAM/TSO IS DOWN.\n     SOMETIMES JUST A 'RENAME' OR 'COPY' WILL FIX A PROBLEM,\n     AND THATS EASILY DONE FROM TSSO.\n\n     MODULE 'IKJEFT01' (TERMINAL MONITOR PROGRAM)\n     IS ATTACHED FOR EACH TSO COMMAND ENTERED.\n     DDNAMES REQUIRED: SYSTSIN (DUMMY) AND\n     SYSTSPRT (TEMPORARY SYSDA SPACE).\n\n     MODULE 'TSSOWTO' (COPY SYSTSPRT TO CONSOLE)\n     IS CALLED AFTER EACH TSO COMMAND IS PROCESSED.\n\n     MODULE 'TSSOSSSM' IS LOADED AND COPIED INTO CSA.\n     IT WAS ORIGINALLY REQUIRED TO BE IN LPA, BUT\n     THAT MADE MODIFICATIONS AND TEST RUNS FEW AND FAR\n     BETWEEN, SO THE CSA ROUTE WAS CHOSEN. TO RE-INSTATE\n     THE LPA REQUIREMENT (AND BYPASS THE CSA GETMAIN, ETC)\n     JUST CHANGE THE VALUE OF 'LPAOPT' FROM 'C' TO 'L'.\n\n     THE PARM FIELD (OR IF NO PARM, THE REPLY TO WTOR)\n     MAY CONTAIN THE FOLLOWING KEYWORDS:\n        U           -  NO ACTION, END OF PARMS\n        TMP(NAME)   -  THE NAME OF THE TSO TMP TO BE INVOKED.\n                       THE DEFAULT IS IKJEFT01.\n        CC(XX)      -  THE COMMAND CHARACTER NAME.\n                       THE DEFAULT IS CC(AM), AMPERSAND.\n                       SEE CCTAB FOR VALID NAMES.\n        JES         -  TSSO IS TO REQUEST A STARTED TASK\n                       ID FROM JES2 SO IT CAN USE SYSOUT.\n        NOJES       -  TSSO IS NOT TO REQUEST AN ID FROM JES2.\n                       USE THIS IF JES2 IS NOT UP.\n     IF MORE THAN 1 KEYWORD IS SPECIFIED, THEY MUST\n     BE SEPARATED BY A COMMA.\n     NULL STRINGS SUCH AS TMP() AND CC() ARE VALID AND\n     CAUSE THE KEYWORD TO BE IGNORED. THUS YOUR PROC\n     CAN HAVE PARM='TMP(&TMP.),CC(&CC.),&JES.JES'\n\n     IN ADDITION TO TSO COMMANDS, TSSO REGOGNIZES COMMANDS\n     OF ITS OWN, SUCH AS THE 'L' COMMAND.\n     FOR EXAMPLE,\n        &L\n     WILL REPEAT THE OUTPUT FROM THE LAST COMMAND,\n     WHICH HAS BEEN SAVED IN THE SYSTSPRT FILE.\n        &L+30\n     WILL REPEAT THE OUTPUT FROM THE LAST COMMAND, BUT\n     SKIP THE FIRST 30 LINES TO DISPLAY THE NEXT 30.\n        &L=4\n     WILL REPEAT THE OUTPUT, THIS TIME ON CONSOLE 4.\n        &L+30,L=4\n     WILL REPEAT THE OUTPUT, ON CONSOLE 4, BUT WILL\n     SKIP THE FIRST 30 LINES AND SHOW THE NEXT 30.\n        &L SYS1.PROCLIB(JES2)\n     WILL INVOKE THE 'L' TSO COMMAND BECAUSE TSSO CAN TELL\n     BY THE BLANK AND THE OPERAND THAT YOU WANT THE TSO COMMAND\n     AND NOT THE INTERNAL L COMMAND.\n\n     NOTES ABOUT SYSOUT\n\n     THE SSCTUPSS BIT IS A BIT IN EACH SUBSYSTEM'S SSCT THAT\n     TELLS STARTED TASK CONTROL WHETHER THE SUBSYSTEM IS\n     DEPENDENT ON THE PRIMARY SUBSYSTEM (JES2 OR JES3) FOR\n     THINGS LIKE SYSOUT.  THE BIT IS NORMALLY OFF, AND TO USE\n     IT YOU MUST HAVE A PROGRAM THAT WILL SET IT ON BEFORE\n     THE START COMMAND IS ISSUED FOR THE SUBSYSTEM.\n\n     IF THE SSCTUPSS BIT WAS OFF WHEN TSSO STARTED\n     AND YOU DID NOT SPECIFY JES=NO IN THE START COMMAND,\n     SYSOUT DATA SETS WILL BE PRINTED UNDER THE BANNER\n     'SYSLOG'.  THAT IS CONTROLLED BY JES2 AND CANNOT BE\n     CHANGED BY TSSO.\n\n     IF THE SSCTUPSS BIT WAS OFF WHEN TSSO STARTED AND\n     YOU SPECIFIED JES=NO IN THE START COMMAND, SYSOUT\n     CANNOT BE USED (YOU WILL ABEND IF YOU TRY).\n\n     IF THE SSCTUPSS BIT WAS ON WHEN TSSO STARTED, SYSOUT\n     WILL BE PRINTED UNDER THE BANNER 'TSSO' (THE PROC NAME).\n\n     THERE IS A PROGRAM DISTRIBUTED WITH TSSO NAMED TSSOUPSS\n     WHICH WILL SET THE SSCTUPSS BIT ON OR OFF AND WILL ISSUE\n     A START COMMAND FOR TSSO.\n\n     TO PREVENT 522 ABENDS (WAIT TIME EXCEEDED)\n     A SUBTASK IS ATTACHED WHICH JUST WAITS FOR\n     A TIMER INTERRUPT OVER AND OVER AGAIN.\n\n     SUGGESTED JCL PROC FOR TSSO\n\n        //TSSO PROC TMP=,CC=,JES=\n        //TSSO EXEC PGM=TSSO,REGION=384K,TIME=10,DYNAMNBR=20,\n        //          PARM='TMP(&TMP),CC(&CC),&JES.JES'\n        //SYSTSIN  DD  DUMMY,DCB=(RECFM=FB,LRECL=80,BLKSIZE=80)\n        //SYSTSPRT DD  UNIT=SYSDA,SPACE=(TRK,10),\n        //             DCB=(RECFM=VBA,LRECL=137,BLKSIZE=4000)\n        //SYSPROC  DD  DSN=SYS1.TSSOPROC,DISP=SHR  (OPTIONAL)\n\n     SUGGESTED JCL PROC FOR SSSO (TO SET UPSS BIT ON AND START TSSO)\n\n        //SSSO PROC BIT=1,S=1,NAME=TSSO\n        //SSSO EXEC PGM=TSSOUPSS,PARM='&BIT.&S.&NAME'\n        //*         S=0 MEANS DONT ISSUE 'S TSSO'\n        //*         NAME IS THE NAME IF THE SUBSYSTEM WHOSE SSCTUPSS\n        //*         BIT IS TO BE SET, AND TO BE STARTED.\n\n     RECOMMEND YOU PUT SSSO IN SUBSYSTEM NAME TABLE TOO, BUT THAT\n     WOULD ONLY BE NECESSARY IF THE PRIMARY JES WAS DOWN AND THE\n     SSCTUPSS BIT WAS ON AND YOU NEEDED TO SET IT OFF (S SSSO,BIT=0)\n\n *********************************************************************\n\n     TO INSTALL TSSO,\n\n     1) ADD 'TSSO' (AND OPTIONALLY 'SSSO') TO THE SUBSYSTEM NAME\n        TABLE.  ONE WAY TO DO THIS IS TO ZAP CSECT IEFJESNM IN\n        MEMBER IEEVIPL IN SYS1.LINKLIB.  THERE ARE USUALLY SOME\n        BLANK ENTRIES AT THE END OF THE TABLE.  YOU MUST LEAVE\n        AT LEAST ONE BLANK ENTRY (4 BYTES) AT THE END OF THE TABLE.\n\n        NOTE: THERE IS NO CODE IN TSSO PROGRAMS THAT DEPENDS ON\n        THE SUBSYSTEM BEING NAMED TSSO, SO IF YOU WANT TO USE\n        A DIFFERENT NAME JUST PUT YOUR DIFFERENT NAME IN THE\n        SUBSYSTEM NAME TABLE AND NAME YOUR PROC WITH THAT NAME.\n\n        IF YOU ALREADY HAVE A NAME IN YOUR SUBSYSTEM NAME TABLE\n        THAT YOU ARE NOT CURRENTLY USING, YOU CAN USE IT FOR TSSO\n        AND SAVE AN IPL.\n\n        YOU MUST IPL THE SYSTEM FOR THE NEW SUBSYSTEM NAME TABLE\n        TO TAKE EFFECT.  CLPA IS NOT NECESSARY.\n\n     2) ASSEMBLE AND LINK THE FOLLOWING MODULES INTO A LINKLIST\n        LIBRARY (OR AN AUTHORIZED LIBRARY THAT YOU SPECIFY AS\n        A STEPLIB IN THE TSSO AND SSSO PROCS).\n\n        SOURCE MEMBER    LOAD MODULE MEMBER    LINKEDIT ATTRIBUTES\n         TSSO             TSSO                  AC=1\n         TSSOSSSM         TSSOSSSM              RENT\n         TSSOWTO          TSSOWTO               RENT\n         TSSOUPSS         TSSOUPSS              AC=1,RENT\n\n        THE TSSO PROGRAM LOADS 'TSSOSSSM' AND 'TSSOWTO', SO IF\n        YOU WANT YOUR LOAD MODULES TO HAVE DIFFERENT NAMES YOU\n        MUST CHANGE THE CODE IN 'TSSO'.\n\n     3) ADD THE 'TSSO' AND 'SSSO' PROCS TO 'SYS1.PROCLIB'. NO OTHER\n        PROCLIB WILL DO IF YOU NEED TO START TSSO WITHOUT JES.\n        THE PROCLIB FOR SUBSYSTEMS IS THE PROCLIB IN 'MSTRJCL'.\n        SAMPLE PROCS (TSSOPROC AND SSSOPROC) ARE PROVIDED BUT YOU\n        MAY WANT TO CHANGE THEM IF YOU DONT HAVE A UNIT NAME VIO\n        OR IF YOU WANT A DIFFERENT COMMAND CHARACTER. DONT NAME\n        THEM TSSOPROC AND SSSOPROC, JUST TSSO AND SSSO.\n\n     4) START TSSO\n        THERE ARE VARIOUS WAYS OF STARTING TSSO.\n        THE ONE YOU WILL PROBABLY USE MOST IS\n         S SSSO\n        THIS WILL SET THE SSCTUPSS BIT ON AND ISSUE A 'S TSSO' COMMAND.\n\n *********************************************************************\n\n     THIS IS THE TABLE OF VALID NAMES OF COMMAND CHARACTERS\n     AND THE CHARACTER EACH NAME STANDS FOR.\n\n     ONE OF THESE CAN BE SPECIFIED IN THE CC PARAMETER OF THE PARM\n     FIELD TO DEFINE THE COMMAND CHARACTER TO TSSO.\n\nCCTAB    DC    CL3'AM&&'           AM = AMPERSAND\n         DC    CL3'HY-'            HY = HYPHEN\n         DC    CL3'AT@'            AT = AT SIGN\n         DC    CL3'PO#'            PO = POUND SIGN\n         DC    CL3'CA,'            CA = COMMA\n         DC    CL3'PE.'            PE = PERIOD\n         DC    CL3'SL/'            SL = SLASH\n*              ON OUR KEYBOARDS THE FOLLOWING CHARACTERS ARE\n*              LESS CONVENIENT BECAUSE THEY NEED THE SHIFT KEY.\n         DC    CL3'EQ='            EQ = EQUAL\n         DC    CL3'LT<'            LT = LESS THAN\n         DC    CL3'SC;'            SC = SEMICOLON\n         DC    CL3'CN:'            CN = COLON\n         DC    CL3'PC%'            PC = PERCENT\n         DC    CL3'AP'''           AP = APOSTROPHE (QUOTE)\n         DC    CL3'GT>'            GT = GREATER THAN\n         DC    CL3'AS*'            AS = ASTERISK (JES3 USES THIS)\n         DC    CL3'LP('            LP = LEFT PAREN\n         DC    CL3'RP)'            RP = RIGHT PAREN\n         DC    CL3'UB_'            UB = UNDERLINE BAR\n         DC    CL3'PL+'            PL = PLUS\n         DC    CL3'NT\u00ac'            NT = NOT SIGN\n         DC    CL3'QM?'            QM = QUESTION MARK\n         DC    CL3'VB|'            VB = VERTICAL BAR\n         DC    CL3'EP!'            EP = EXCLAMATION POINT\n         DC    CL3'DQ\"'            DQ = DOUBLE QUOTES\n         DC    AL3(0)              RESERVED FOR ZAP\n         DC    XL3'FFFFFF'         END OF TABLE\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TSSOGIDE": {"ttr": 2049, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x82\\x16_\\x00\\x82\\x16_\\x13U\\x016\\x016\\x00\\x00\\xc1\\xe2\\xd4\\xc9\\xf0\\xf5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1982-06-14T00:00:00", "modifydate": "1982-06-14T13:55:00", "lines": 310, "newlines": 310, "modlines": 0, "user": "ASMI05"}, "text": "1\n\n\n\n\n\n\n\n\n                                TSSO User's Guide\n\n                                   Version 1.5\n\n                                  June 14, 1982\n\n\n\n\n                 Written by Bill Godfrey, Planning Research Corporation\n\n1\n\n\n     1.  Function\n\n         TSSO is a Subsystem for the MVS Operating System that allows\n         many TSO commands to be entered on an operator console.\n         The letters TSSO do not stand for anything but are\n         used because they are close to \"TSO\" and have a double \"S\"\n         for Sub-System.\n\n     2.  Starting TSSO\n\n         To start TSSO, enter the following command on a console:\n\n            S TSSO\n\n         If TSSO is was already started, the one you start will\n         detect that situation, issue a message to that effect,\n         and just go away.\n\n         When TSSO startup is complete, it will issue the following\n         message:\n\n            & CONNECTED\n\n         The ampersand (&) in front of the word 'CONNECTED' is the\n         \"Command Character\".  This means that any commands you\n         type in that are to be processed by TSSO must have this\n         character as the first character in the line.  We have\n         chosen the ampersand as the Command Character, and it will\n         be used in all examples.  The character can be changed\n         by a PARM field option in the TSSO JCL.\n\n     3.  Entering a TSO command on a console.\n\n         To enter a TSO command, type in an ampersand and then the\n         TSO command.  For example:\n\n            &LISTDS SYS1.HELP\n\n         The results of the command will appear on the console\n         from which the command was entered.\n\n         If there are more than 30 lines of output, only the\n         first 30 will appear on the console.  This restriction\n         is to prevent system WTO buffers from filling up.\n\n     4.  Stopping TSSO\n\n         To stop TSSO,  enter the following command on a console:\n\n            &LOGOFF\n         or\n            &P\n\n\n\n\n\n1\n\n\n         It is also safe to cancel TSSO, i.e.,\n\n            C TSSO\n\n         in which case an ESTAE exit will disconnect TSSO\n         from the subsystem interface.\n\n     5.  The PUTLINE restriction.\n\n         Not all TSO commands can be used under TSSO.  Commands\n         that write to the terminal using the TPUT macro will\n         not generate any output to the console. Nor will commands\n         that write to the terminal by an access method (using a DCB).\n         Since SPF uses TPUT, it cannot be used.\n         Only commands that use the PUTLINE macro will generate\n         output that TSSO can show on the console.  Most of IBM's\n         standard TSO commands use PUTLINE.\n\n     6.  The Problem of Isolation\n\n         Unfortunately there is an annoying limitation in the way\n         TSSO currently works: each line you type in operates in\n         almost complete isolation from any you typed in previously.\n         This problem is best shown by example.  If you type in\n         an EDIT command, you will not be in EDIT mode on the next\n         line.  If you type in a PROFILE PREFIX(XXXX) command,\n         your prefix will not be XXXX on the next line.\n         Fortunately, if you type in an ALLOC command, the allocation\n         will still be in effect for subsequent commands, so some\n         degree of sequential processing can be achieved.\n\n         Two TSO commands, STACK and EF, have been written to ease\n         this isolation problem somewhat.\n\n         The Internals section of this document gives a brief\n         explanation of the reason this problem exists.\n\n     7.  The STACK command\n\n         The STACK command allows more than 1 command to be typed\n         on a line. For example, to EDIT a data set and find\n         the first line containing the string \"ABC\"\n\n            &STACK EDIT 'USER.DATA' DATA;FIND /ABC/;LIST *\n\n         The semicolon is used to separate the commands.  If you\n         want to use a semicolon in a command, use two semicolons\n         in a row. The STACK command will convert a pair of semi-\n         colons to one semicolon and not treat it as a separator.\n\n         The STACKL command is like STACK but also lists the commands,\n         having the same effect as the LIST keyword of EXEC.\n\n\n\n\n\n1\n\n\n     8.  The EF command\n\n         If you are going to be editing a data set many times\n         it can get tiresome to have to type in the EDIT command\n         and the data set name over and over again.\n         That's why EF was written.  If you allocate to filename\n         EDITFILE the data set you want to edit, the EF command\n         will build an EDIT command containing the data set name\n         and will append edit subcommands to that edit command.\n\n         An example will show best how useful it is.  Lets say\n         you want to edit data set 'USER.DATA'.\n\n            &ALLOC FI(EDITFILE) DA(USER.DATA)\n\n         List the first line.\n\n            &EF LIST *\n\n         The EF command above built the following TSO commands:\n            EDIT 'USER.DATA' DATA OLD\n            LIST *\n\n         List the last line.\n\n            &EF BOTTOM;LIST *\n\n         The EF command above built the following TSO commands:\n            EDIT 'USER.DATA' DATA OLD\n            BOTTOM\n            LIST *\n\n         Find the first line that contains \"ABC\".\n\n            &EF F /ABC/;LIST *\n\n         Change that ABC to XYZ and save the change.\n\n            &EF VERIFY;F /ABC/;C /ABC/XYZ/;SAVE\n\n         Note that if you do not do the SAVE, the change will\n         not be saved, even if you do a SAVE on the next EF\n         because the next EF is not in the same EDIT mode\n         as the previous EF.\n\n         To edit a data set without sequence numbers (NONUM)\n         use the EFN command instead of EF.\n\n\n\n\n\n\n\n\n\n\n1\n\n\n     9.  Continuation\n\n         When typing in a long line of TSO commands, you can\n         continue a line by ending the line with a hyphen.\n         The next line you type in will be appended to the\n         line that ended with a hyphen.  For example\n\n            &listds sy-\n            &s1.hel-\n            &p\n\n         is the same as\n\n            &listds sys1.help\n\n         The continuation lines must all be typed in on the\n         same console.   If TSSO receives a command from any other\n         console while continuation is in progress, the continuation\n         will be lost and a warning message to that effect will\n         be issued.\n\n     10. Re-display\n\n         TSSO alway has access to a file containing the output\n         from the last TSO command processed.\n         To re-display that output without re-running the command,\n         type in the following:\n\n         &L\n\n         To redisplay the output on another console (such as a\n         hard-copy printer for example), type in\n\n         &L=n\n\n         Where n is the Console I.D.\n\n         Note: TSSO can tell when you are using the 'L' TSO command\n         (the alias of LIST) by the fact that the \"L\" is followed by\n         a space and then an operand.  For example,\n\n         &L SYS1.PROCLIB(TSSO)\n\n         Re-display is limited to a maximum of 30 lines of output,\n         but there may be more than 30 lines saved for re-display.\n         You can skip down past a specified number of lines and\n         display up to 30 more lines. For example,\n\n         &L+20     will list up to 30 lines starting at the 21st line.\n\n         If you only want to re-display a specific number of lines,\n\n         &L/2      will list only the first 2 lines.\n\n         &L+6/1    will list only the 7th line.\n\n\n1\n\n\n     11. Internals\n\n         This section, not required reading, briefly describes\n         what goes on inside TSSO.\n\n         TSSO runs as a subsystem under MVS.  Being a subsystem,\n         it can run even if the primary subsystem (usually JES2\n         or JES3) is not running.  This makes it a useful tool\n         for repairing JES problems when JES will not start.\n\n         Another advantage of being a subsystem is that it can\n         look at every command that is typed in on operator\n         consoles (or that is issued internally).  It ignores\n         commands that do not begin with it's special \"Command\n         Character\", and tells MVS that those commands that do\n         begin with the Command Character are not errors.\n\n         Each time TSSO sees one of its TSO commands typed in\n         on a console, it invokes IKJEFT01, the IBM TSO Terminal\n         Monitor Program, passing the TSO command in the PARM\n         field.  Since TSSO is not in a TSO address space,\n         IKJEFT01 sets up a background environment wherein it\n         reads TSO commands from DDNAME SYSTSIN (which is DUMMY)\n         and writes all PUTLINE output to DDNAME SYSTSPRT (which\n         is a temporary DASD or VIO data set).  IKJEFT01 executes\n         the command passed to it in the PARM field, and ends.\n         Then TSSO reads all the data in the SYSTSPRT file and\n         writes each line to the console that typed in the command.\n\n         Since IKJEFT01 is invoked for each line typed in (except\n         when continuation is used), things like EDIT and PROFILE\n         do not stay in effect from one line to the next.\n\n         Since TPUT's are no-ops in a background environment,\n         SPF and other commands that use TPUT will not work\n         under TSSO.\n\n         Bear in mind if you get annoyed by the limitations of TSSO\n         that the reason it was written was not to provide the function\n         of using consoles as TSO terminals. It was written as an\n         exercise in writing a subsystem, to see how the subsystem\n         console monitoring feature works.  It turned out to be\n         more useful than we expected.\n\n         TSSO was written by Bill Godfrey, of Planning Research\n         Corporation, Mclean, Virginia.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TSSOPROC": {"ttr": 2055, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x82\\x16/\\x00\\x82\\x16/\\x15\\x12\\x00\\x06\\x00\\x06\\x00\\x00\\xc1\\xe2\\xd4\\xc9\\xf0\\xf5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1982-06-11T00:00:00", "modifydate": "1982-06-11T15:12:00", "lines": 6, "newlines": 6, "modlines": 0, "user": "ASMI05"}, "text": "//TSSO    PROC T=5,TMP=,CC=,JES=,J=\n//TSSO    EXEC PGM=TSSO,DPRTY=(15,15),TIME=&T,REGION=384K,DYNAMNBR=20,\n//             PARM='TMP(&TMP),CC(&CC),&JES.JES&J.'\n//SYSTSIN   DD DUMMY,DCB=(RECFM=FB,LRECL=80,BLKSIZE=80)\n//SYSTSPRT  DD DSN=&&SYSTSPRT,UNIT=VIO,SPACE=(TRK,(30)),\n//             DCB=(RECFM=VBA,LRECL=137,BLKSIZE=2744,BUFNO=1)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TSSOSSNT": {"ttr": 2057, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x80)_\\x00\\x80)_\\x13\\x05\\x00\\x07\\x00\\x07\\x00\\x00\\xc1\\xe2\\xc6\\xc9\\xf0\\xf5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1980-10-21T00:00:00", "modifydate": "1980-10-21T13:05:00", "lines": 7, "newlines": 7, "modlines": 0, "user": "ASFI05"}, "text": "*\n* THIS ZAP ADDS THE NAME 'TSSO' TO THE SUBSYSTEM NAME TABLE\n* (ASSUMING THERE ARE CURRENTLY 4 NAMES IN THE TABLE).\n*\n NAME IEEVIPL IEFJESNM\n VER 10 00000000\n REP 10 E3E2E2D6\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TSSOSSSM": {"ttr": 2059, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x81 _\\x00\\x81 _\\x14Y\\x01\\t\\x01\\t\\x00\\x00\\xc1\\xe2\\xc6\\xc9\\xf0\\xf5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1981-07-24T00:00:00", "modifydate": "1981-07-24T14:59:00", "lines": 265, "newlines": 265, "modlines": 0, "user": "ASFI05"}, "text": "         TITLE '   T S S O S S S M  '\n***********************************************************************\n*                                                                     *\n*        'TSSOSSSM'                                                   *\n*                                                                     *\n***********************************************************************\n         SPACE\n*        WRITTEN BY. BILL GODFREY, PRC (PLANNING RESEARCH CORPORATION).\n*        INSTALLATION. PRC, MCLEAN VA\n*        DATE WRITTEN. SEPTEMBER 2 1976.\n*        DATE UPDATED. JULY 24 1981.\n*        ATTRIBUTES. RE-ENTRANT.\n*        DESCRIPTION.\n*            THIS IS THE SUBSYSTEM SUPPORT MODULE FOR TSSO.\n*            IT RESIDES IN THE LINK PACK AREA OR IS COPIED TO CSA.\n*            NOTE - THERE ARE NO ADDRESS CONSTANTS IN\n*            THIS CODE THAT NEED RELOCATION. THEREFORE\n*            THE MODULE CAN BE LOADED, THEN COPIED INTO CSA\n*            WITHOUT HAVING TO RELOCATE ANY ADDRESS CONSTANTS.\n*\n*            C A U T I O N\n*\n*            TSSO REFERENCES SPECIFIC OFFSETS IN THE FIRST\n*            50 BYTES OF THIS MODULE. DO NOT CHANGE THE LENGTHS\n*            OF ANY FIELDS IN THIS AREA UNLESS TSSO IS ALSO CHANGED.\n*\n*        LOG OF CHANGES.\n*         24JUL81 - INSTEAD OF PLACING EACH COMMAND IN THE SSVT\n*            AND REJECTING FURTHER COMMANDS UNTIL TSSO FINISHES\n*            PROCESSING THE COMMAND, WE NOW PLACE EACH COMMAND IN\n*            A CIRCULAR QUEUE, AND LET TSSO PROCESS THE QUEUE.\n*            IF THE QUEUE FILLS UP, WE REJECT THE COMMAND.\n*            INSTEAD OF POSTING TSSO FOR EACH COMMAND, WE ONLY\n*            ISSUE POST IF THE QUEUE COUNT WAS NEGATIVE BEFORE\n*            WE INCREMENTED IT, MEANING TSSO WAS IDLE.\n         SPACE\nTSSOSSSM START\n@ORIGIN  EQU   *\n         B     @PROLOG-*(,R15)\n         DC    AL1(29),CL13'TSSOSSSM 1.0 '\n         DC    CL16' &SYSDATE &SYSTIME '\n@PROLOG  SR    15,15\n         BR    14\n         DC    AL2(@END-@ORIGIN) LENGTH OF MODULE\n*              LENGTH USED BY TSSO TO GETMAIN CSA AND COPY SSSM.\n         SPACE\n************************************************************\n*                                                          *\n*        SUBSYSTEM INITIALIZATION CONSTANTS                *\n*                                                          *\n************************************************************\n         SPACE\n*              THE FOLLOWING CONSTANTS MUST BEGIN AT\n*              OFFSET 40 INTO SSSM. THE INITIALIZATION\n*              ROUTINE THAT LOADS SSSM DEPENDS ON IT.\n         SPACE\n         ORG   @ORIGIN+40\n         DC    AL2(VTFCODX-VTFCOD) NUMBER OF FCOD'S\n         DC    AL2(VTFCOD-@ORIGIN) OFFSET TO 1ST FCOD\n         DC    AL2((VTFRTNX-VTFRTN)/4) NUMBER OF FRTN'S\n         DC    AL2(VTFRTN-@ORIGIN) OFFSET TO 1ST FRTN\n         DC    AL2(1)              NUMBER OF FUNCTIONS\n         SPACE\n************************************************************\n*                                                          *\n*        SUBSYSTEM REQUEST FUNCTION CODE TABLE             *\n*                                                          *\n************************************************************\n         SPACE\nVTFCOD   DC    AL1(0)                  1 PROCESS SYSOUT\n         DC    AL1(0)                  2 TSO CANCEL\n         DC    AL1(0)                  3 TSO STATUS\n         DC    AL1(0)                  4 END OF TASK\n         DC    AL1(0)                  5 JOB SELECTION\n         DC    AL1(0)                  6 ALLOCATION\n         DC    AL1(0)                  7 UNALLOCATION\n         DC    AL1(0)                  8 END OF MEMORY\n         DC    AL1(0)                  9 WTO\n         DC    AL1((VTR10-VTR00)/4)   10 COMMAND PROCESSING\n         DC    AL1(0)                 11 USERID VALIDITY CHECK\n         DC    AL1(0)                 12 JOB DELETION\n         DC    AL1(0)                 13 RE-ENQUEUE JOB\n         DC    AL1(0)                 14 DOM\n         DC    AL1(0)                 15\n         DC    AL1(0)                 16 OPEN\n         DC    AL1(0)                 17 CLOSE\n         DC    AL1(0)                 18 CHECKPOINT\n         DC    AL1(0)                 19 RESTART\n         DC    AL1(0)                 20 REQUEST JOB ID\n         DC    AL1(0)                 21 RETURN JOB ID\nVTFCODX  EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*        SUPPORT ROUTINE POINTERS MOVED TO SSVT            *\n*                                                          *\n************************************************************\n         SPACE\nVTFRTN   DC    0F'0'\nVTR00    EQU   *-4\nVTR10    DC    A(TSSCMND-@ORIGIN)\nVTFRTNX  EQU   *\n         DC    0D'0'\n         SPACE\n************************************************************\n*                                                          *\n*        SVC 34 EXIT - COMMANDS                            *\n*                                                          *\n************************************************************\n         SPACE\nTSSCMND  DC    0D'0'\n         USING *,R12\n         B     12(,R15)\n         DC    CL8'TSSCMND'\n         STM   14,12,12(R13)\n         LR    R12,R15             BASE REGISTER\n         LR    R8,R0               POINT TO SSCVT\n         USING SSCT,R8\n         L     R11,SSCTSSVT        POINT TO SSVT\n         DROP  R8                  SSCT\n         USING SSVT,R11\n         LR    R10,R1              POINT TO SSOB\n         USING SSOB,R10\n         L     R9,SSOBINDV         POINT TO FUNCTION AREA\n         L     R4,SSCMBUFF-SSCMBGN(,R9) COMMAND BUFFER\n         SPACE\n         LH    R5,0(,R4)           GET LENGTH\n         CH    R5,=H'140'          OUTRAGEOUS LENGTH?\n         BH    S34OEXIT            YES - IGNORE IT\n         LTR   R5,R5               NON-POSITIVE LENGTH\n         BNP   S34OEXIT            YES - IGNORE\n         CLC   4(1,R4),$SVCHAR     MINE?\n         BNE   S34OEXIT            NO - IGNORE\n         TM    $SVSTUS,$SVSTUST    TERMINATING?\n         BO    S34OEXIT            YES - IGNORE\n         L     R0,SSCMSCID         GET CONSOLE UCMID\n         LR    R1,R0               COPY CONSOLE ID\n         SRL   R1,8                SHIFT CONSOLE ID OUT\n         LTR   R1,R1               ARE ALL OTHER BYTES ZERO\n         BNZ   S34OEXIT            NO, ITS NOT A CONSOLE ID\n*        TM    $SVFLAG,X'80'       BUSY WITH PREVIOUS CMD?\n*        BO    S34BUSY             YES - BRANCH\n*        OI    $SVFLAG,X'80'       CLOSE DOOR ON SUBSEQUENT CMD\n         LM    R0,R1,$SVQUEUE      GET NUMBER OF COMMANDS QUEUED\nCSLOOP   C     R0,$SVQMAXQ         IS QUEUE FILLED UP\n         BNL   S34BUSY             YES, REJECT THE COMMAND\n         LR    R2,R0               GET QUEUE NUMBER\n         LA    R2,1(,R2)           ADD 1 TO THE QUEUE NUMBER\n         L     R3,0(,R1)           POINT TO THE NEXT QUEUE ENTRY\n         CDS   R0,R2,$SVQUEUE      INCREMENT $SVQUEUE\n         BNZ   CSLOOP              TRY AGAIN IF SOMETHING SNUCK IN\n         LR    R8,R1               GET ADDRESS OF CURRENT QUEUE ENTRY\n         USING $QENTRY,R8\n         MVI   $QECMND,X'40'\n         MVC   $QECMND+1(139),$QECMND  BLANK THE COMMAND AREA\n         BCTR  R5,0                LENGTH MINUS 1 FOR EX\n         B     *+10                BRANCH AROUND MVC\n         MVC   $QECMND(0),4(R4)    (EXECUTED)\n         EX    R5,*-6              COPY THE COMMAND\n         MVC   $QECMNDL(4),0(R4)   COPY THE LENGTH\n         L     R0,SSCMSCID         GET CONSOLE UCMID\n         ST    R0,$QEUCMID         SAVE IT\n         TM    $SVFLAG,X'40'       IS 'OK' TO BE SUPPRESSED?\n         BO    S34NOACK            YES - BRANCH\n         SPACE\n         WTO   ,MF=(E,$SVOKWTO)    $ OK\n         SPACE\nS34NOACK EQU   *\n         LTR   R2,R2               WAS $SVQUEUE NEGATIVE BEFORE\n         BP    S34MEXIT            NO, BYPASS POST\n         LA    R5,$SVPOSTE\n         L     R6,$SVPASCB\n         LA    R7,S34ERRET\n         LA    R1,$SVPOSTL\n         SPACE\n         POST  (R5),X'111',ASCB=(R6),ERRET=(R7),MF=(E,(1))\n         SPACE\nS34MEXIT LA    R15,SSCMSUBC        MINE\n         B     S34EXIT\nS34OEXIT LA    R15,SSCMSCMD        NOT MINE\nS34EXIT  ST    R15,SSOBRETN\n         LM    14,12,12(R13)\n         LA    R15,SSRTOK\n         BR    R14\nS34BUSY  LA    R15,SSCMIMSG        COULD NOT EXECUTE\n         B     S34EXIT             ISSUE IEE707I 'TEXT' NOT EXECUTED\nS34ERRET BR    R14\n         SPACE\n************************************************************\n*                                                          *\n*        CONSTANTS                                         *\n*                                                          *\n************************************************************\n         SPACE\nPOSTL    POST  5,ASCB=6,ERRET=7,MF=L\n         LTORG\n@END     DC    0D'0'\n         SPACE\n************************************************************\n*                                                          *\n*        DSECTS                                            *\n*                                                          *\n************************************************************\n         SPACE\nCVTPTR   EQU   16\nCVT      DSECT\nCVTMAP   EQU   *\n         ORG   CVTMAP+X'0C4'\nCVTSMCA  DS    A\n         SPACE 3\n         IEFJSSVT\n         ORG   SSVTFRTN+(32*4)     ROOM FOR 32 RTN PTRS\n$SVSTUS  DS    F\n$SVSTUSP EQU   X'80'\n$SVSTUST EQU   X'40'\n$SVSTUSR EQU   X'20'\n$SVCHAR  DS    CL1\n$SVCHAT  DS    CL1\n$SVFLAG  DS    BL1\n         DS    BL1\n$SVPOSTP DS    F\n$SVPOSTE DS    F\n$SVPASCB DS    F\n$SVPOSTL DS    3F\n$SVACTIV DS    F\n$SVOKWTO DS    3F\n$SVQMAXQ DS    F\n$SVQUEUE DS    2F\n$SVQADDR DS    F\n$SVSSIB  DS    9F\n$SVSSOBA DS    F\n$SVSSOB  DS    5F,7F\n$SVRRECB DS    F\n$SVTSIZE EQU   *-SSVTFRTN          MUST NOT EXCEED 1024\n$SVTSIZR EQU   1024-$SVTSIZE       HOW CLOSE TO 1024 ARE WE\n         SPACE\n$QENTRY  DSECT\n$QENEXT  DS    F\n$QEUCMID DS    F\n$QECMNDL DS    F\n$QECMND  DS    CL140\n         DS    0F\n$QESIZE  EQU   *-$QENTRY\n         SPACE 3\n         IEFJSCVT\n         EJECT\n         IEFJSSOB (CM),CONTIG=YES\n         SPACE 3\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TSSOUPSS": {"ttr": 2305, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x82\\x16/\\x00\\x82\\x16/\\x15\\x12\\x01\\x1a\\x01\\x1a\\x00\\x00\\xc1\\xe2\\xd4\\xc9\\xf0\\xf5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1982-06-11T00:00:00", "modifydate": "1982-06-11T15:12:00", "lines": 282, "newlines": 282, "modlines": 0, "user": "ASMI05"}, "text": "         TITLE '   T S S O U P S S   '\n*$DOC@*****************************************************************\n*                                                                     *\n*        'TSSOUPSS' - SET SSCTUPSS BIT ON AND START TSSO              *\n*                                                                     *\n***********************************************************************\n         SPACE\n*  WRITTEN BY. BILL GODFREY, PLANNING RESEARCH CORPORATION, MCLEAN VA.\n*  INSTALLATION. PRC, MCLEAN VA.\n*  DATE WRITTEN. JUNE 10 1982.\n*  DATE UPDATED. JUNE 11 1982.\n*  ATTRIBUTES. RE-ENTRANT.\n*   MUST BE LINK-EDITED WITH AC=1 IN AUTHORIZED LIBRARY.\n*  DESCRIPTION.\n*   THIS PROGRAM SETS ON THE SSCTUPSS BIT IN THE TSSO SSCT,\n*   THEN ISSUES A START COMMAND TO START TSSO.\n*\n*   THIS ALLOWS TSSO TO BE REGOGNIZED BY JES2 UNDER ITS REAL\n*   IDENTITY.  SYSOUT SEPARATOR PAGES WILL HAVE THE JOBNAME 'TSSO'\n*   INSTEAD OF 'SYSLOG'.\n*\n*   AFTER INSTALLING THIS PROGRAM AND THE 'SSSO' PROC BELOW,\n*   THE NORMAL WAY TO START TSSO WHEN JES IS RUNNING WILL BE\n*       S SSSO\n*   INSTEAD OF\n*       S TSSO\n*\n*   THE PARM FIELD SPECIFIES THE NAME OF THE SUBSYSTEM WHOSE\n*   SSCT IS TO BE MODIFIED. IF THE PARM FIELD HAS NO SUBSYSTEM\n*   NAME THEN AN ERROR MESSAGE WILL BE ISSUED.\n*\n*   THE FIRST 2 CHARACTERS OF THE PARM ARE OPTION FLAGS.\n*   THE FIRST SHOULD BE A '1' IF SSCTUPSS IS TO BE SET ON\n*   OR A '0' IF SSCTUPSS IS TO BE SET OFF.\n*   THE SECOND SHOULD BE A '1' IF A START COMMAND IS TO BE\n*   AUTOMATICALLY ISSUED BY THIS PROGRAM, OR A '0' IF NOT.\n*\n*   THE NAME OF THE SUBSYSTEM STARTS AT THE THIRD CHARACTER\n*   OF THE PARM.\n*\n*   NOTES ABOUT THE SSCTUPSS BIT. IT STANDS FOR 'USE PRMARY SUBSYSTEM\n*    SERVICES' AND TELLS MVS SUBSYSTEM INITIALIZATION ROUTINES THAT\n*    THE SUBSYSTEM BEING STARTED IS DEPENDENT ON THE PRIMARY SUBSYSTEM\n*    (JES2 OR JES3) FOR ITS SYSOUT. IF THE BIT IS ON, THE SUBSYSTEM IS\n*    SUBMITTED TO JES ON THE STCINRDR INSTEAD OF STARTING INDEPENDENTLY\n*    OF JES. JES TREATS IT LIKE ANY OTHER STARTED TASK.\n*    IF THE SSCTUPSS BIT IS ON AND THE PRIMARY JES IS NOT RUNNING,\n*    STARTED TASK CONTROL WILL WAIT FOR JES TO START.\n*\n*   SUGGESTED PROC NAMED SSSO.\n*    //SSSO    PROC BIT=1,S=1,NAME=TSSO\n*    //SSSO    EXEC PGM=TSSOUPSS,PARM='&BIT.&START.&NAME'\n*\n*   SUGGEST YOU ADD SSSO TO THE SUBSYSTEM NAME TABLE, FOR\n*    THE FOLLOWING REASON.\n*\n*    YOU WANT TO BE ABLE TO START TSSO IF JES IS DOWN AND THE\n*    SSCTUPSS BIT IS ON. YOU HAVE TO SET THE SSCTUPSS BIT OFF SOMEHOW\n*    BEFORE YOU CAN START TSSO INDEPENDENTLY OF JES.\n*    IF SSSO IS IN YOUR SUBSYSTEM NAME TABLE, YOU CAN START IT WITH\n*              S SSSO,BIT=0,S=0\n*    THAT WILL SET THE BIT OFF.  THEN TYPE IN\n*              S TSSO,JES=NO\n*    NOTE THAT IF SSSO HAS NOT BEEN RUN SINCE IPL, THE SSCTUPSS\n*    BIT WILL BE OFF IN THE TSSO SSCT, AND YOU COULD JUST TYPE IN\n*              S TSSO,JES=NO\n*\n*    ANOTHER METHOD WOULD BE TO HAVE AN ALTERNATE TSSO PROC\n*    THAT LOOKS EXACTLY LIKE THE TSSO PROC BUT IS NAMED TSSX.\n*    TSSX WOULD BE IN THE SUBSYSTEM NAME TABLE TOO. THE\n*    SSCTUPSS BIT IN THE TSSX SSCT WOULD NEVER BE SET ON,\n*    SO YOU WOULD ALWAYS BE ABLE TO START IT WHEN JES IS DOWN.\n*    THE ONLY DISADVANTAGE OF THIS IS IF YOU HAVE SOME SECURITY\n*    EXITS THAT GIVE PRIVILEGES TO TSSO THEY WOULD ALSO HAVE\n*    TO GIVE PRIVILEGES TO TSSX.\n*\n*  LOG OF CHANGES.\n*   NONE.\n*\n*$DOC$*****************************************************************\n         SPACE\nTSSOUPSS START\n         USING *,R10\n         B     @PROLOG-*(,R15)\n         DC    AL1(26),CL10'TSSOUPSS'\n         DC    CL16' &SYSDATE &SYSTIME '\nSUBPOOL  DC    0F'0',AL1(1),AL3(@DATAL)\n@PROLOG  STM   14,12,12(13)\n         LR    R10,R15\n         LR    R2,R1\n         SPACE\n         L     R0,SUBPOOL\n         GETMAIN R,LV=(0)\n         SPACE\n         LR    R9,R1\n         USING @DATA,R9\n         SPACE\n         ST    R13,4(,R9)\n         ST    R9,8(,R13)\n         LR    R13,R9              NEW SAVEAREA POINTER\n         SPACE\n         MVI   OPTION,C'1'         DEFAULT TO SET BIT ON\n         SPACE\n         MODESET KEY=ZERO\n         SPACE\n************************************************************\n*                                                          *\n*        GET NAME OF SUBSYSTEM FROM PARM FIELD             *\n*                                                          *\n************************************************************\n         SPACE\n         L     R1,0(,R2)           POINT TO PARM\n         LH    R15,0(,R1)          GET LENGTH OF PARM\n         LTR   R15,R15             IS THERE A PARM\n         BZ    MISSING             NO, ERROR\n         MVC   OPTION(1),2(R1)\n         BCT   R15,*+8\n         B     MISSING\n         MVC   AUTOCMD(1),3(R1)\n         BCT   R15,*+8\n         B     MISSING\n         MVC   JBID,=CL4' '        FILL WITH BLANKS\n         CH    R15,=H'4'\n         BNH   *+8\n         LH    R15,=H'4'           SET LENGTH TO 4\n         BCTR  R15,0\n         B     *+10\n         MVC   JBID(0),4(R1)\n         EX    R15,*-6\n         SPACE\n************************************************************\n*                                                          *\n*        FIND THE SUBSYSTEM CVT (SSCT) FOR TSSO            *\n*                                                          *\n************************************************************\n         SPACE\n         L     R3,16               CVTPTR\n         USING CVT,R3\n         L     R4,CVTJESCT         JES CONTROL TABLE\n         USING JESCT,R4\n         SPACE\n         CLC   JBID,JESPJESN       IS SOMEBODY PLAYING DANGEROUS GAMES\n         BE    EXIT0               YES, WE DONT WANT TO DO THAT\n         SPACE\n         LA    R4,JESSSCT-(SSCTSCTA-SSCT) POINT TO SSCT HEAD\n         USING SSCT,R4\nISSCTL   ICM   R4,15,SSCTSCTA      POINT TO NEXT SSCT\n         BZ    NOTFOUND            IF END, EXIT\n         CLC   SSCTSNAM,JBID       IS THIS OURS?\n         BE    UPSS                YES - BRANCH\n         B     ISSCTL              NO - LOOP\n         SPACE\nNOTFOUND MVC   WTOW(IM01L),IM01\n         MVC   WTOW+4(4),JBID\n         WTO   MF=(E,WTOW)\n         B     EXIT0\n         SPACE\n************************************************************\n*                                                          *\n*        SET THE SSCTUPSS BIT ON OR OFF                    *\n*                                                          *\n************************************************************\n         SPACE\nUPSS     CLI   OPTION,C'0'\n         BE    UPSS0\nUPSS1    OI    SSCTFLG1,SSCTUPSS\n         B     STSSO\nUPSS0    NI    SSCTFLG1,255-SSCTUPSS\n         SPACE\n************************************************************\n*                                                          *\n*         ISSUE START COMMAND                              *\n*                                                          *\n************************************************************\n         SPACE\nSTSSO    EQU   *\n         CLI   AUTOCMD,C'0'\n         BE    EXIT0\n         SPACE\n         MVC   COMMANDW(COMMANDL),COMMAND\n         MVC   COMMANDW+6(4),JBID\n         SPACE\n         MODESET MODE=SUP\n         SPACE\n         LA    R0,0                CONSOLE ID\n         LA    R1,COMMANDW\n         SVC   34\n         SPACE\n         MODESET MODE=PROB\n         B     EXIT0\n         SPACE\n************************************************************\n*                                                          *\n*         TERMINATE                                        *\n*                                                          *\n************************************************************\n         SPACE\nMISSING  WTO   MF=(E,IM02)\n         LA    R15,12\n         B     *+6\nEXIT0    SR    R15,R15\n         LR    R2,R13              SAVE R13 FOR FREEMAIN\n         L     13,4(,13)           POINT TO PREVIOUS SAVE AREA\n         ST    15,16(,13)          SAVE R15 FOR LM\n         SPACE\n         MODESET KEY=NZERO\n         SPACE\n         LR    R1,R2               AREA TO BE FREEMAINED\n         L     R0,SUBPOOL\n         FREEMAIN R,LV=(0),A=(1)\n         LM    14,12,12(13)\n         BR    14\n         SPACE\n************************************************************\n*                                                          *\n*        CONSTANTS                                         *\n*                                                          *\n************************************************************\n         SPACE\nIM01     WTO   'XXXX SUBSYSTEM NAME NOT DEFINED',ROUTCDE=(2),MF=L\nIM01L    EQU   *-IM01\n         SPACE\nIM02     WTO   'SUBSYSTEM NAME NOT IN PARM FIELD',ROUTCDE=(2),MF=L\nIM02L    EQU   *-IM02\n         SPACE\nCOMMAND  DC    0H'0',AL2(COMMANDL,0)\n         DC    C'S XXXX'\nCOMMANDL EQU   *-COMMAND\n         DC    0D'0'\n         SPACE\n************************************************************\n*                                                          *\n*        DSECTS                                            *\n*                                                          *\n************************************************************\n         SPACE\n@DATA    DSECT\n         DS    18F                 REGISTER SAVEAREA\nDOUBLE   DS    D\nOPTION   DS    C\nAUTOCMD  DS    C\nJBID     DS    CL4                 SUBSYSTEM NAME\nCOMMANDW DS    0F,XL80             SUBSYSTEM NAME\nWTOW     DS    0F,XL128\n         DS    0D\n@DATAL   EQU   *-@DATA\n         SPACE\n************************************************************\n*                                                          *\n*         MAP OF CVT                                       *\n*                                                          *\n************************************************************\n         SPACE\nCVTPTR   EQU   16\nCVT      DSECT\nCVTMAP   EQU   *\n         ORG   CVT+X'128'\nCVTJESCT DS    A\n         SPACE\n         IEFJESCT\n         SPACE 3\n         IEFJSCVT\n         SPACE 3\n         IEFJSSVT\n         SPACE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TSSOWTO": {"ttr": 2311, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x82\\x16\\x1f\\x00\\x82\\x16\\x1f\\x147\\x00\\xe7\\x00\\xe7\\x00\\x00\\xc1\\xe2\\xd4\\xc9\\xf0\\xf5@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1982-06-10T00:00:00", "modifydate": "1982-06-10T14:37:00", "lines": 231, "newlines": 231, "modlines": 0, "user": "ASMI05"}, "text": "         TITLE '   T S S O W T O   '\n***********************************************************************\n*                                                                     *\n*        'TSSOWTO'                                                    *\n*                                                                     *\n***********************************************************************\n         SPACE\n*        WRITTEN BY. BILL GODFREY, PLANNING RESEARCH CORPORATION.\n*        INSTALLATION. PRC, MCLEAN VA.\n*        DATE WRITTEN. MAY 19 1976.\n*        DATE UPDATED. JUNE 10 1982.\n*        ATTRIBUTES. RE-ENTRANT.\n*        DESCRIPTION.\n*            THIS PROGRAM READS A DATASET AND WRITES EVERY\n*            RECORD ON THE OPERATOR'S CONSOLE.\n*\n*            IT IS INVOKED BY THE TSSO SUBSYSTEM, WHICH IS\n*            RUNNING IN SUPERVISOR STATE KEY ZERO, SO THERE\n*            IS SOME IRREGULAR CODE AT THE FREEPOOL MACRO.\n*\n*            ONLY THE FIRST 72 BYTES OF FIXED-LENGTH RECORDS\n*            ARE DISPLAYED. ONLY THE FIRST 72 BYTES OF VARIABLE\n*            LENGTH RECORDS ARE DISPLAYED. NO MORE THAN 50\n*            RECORDS ARE DISPLAYED.\n*            THE PARM FIELD CONTAINS 3 HALFWORDS AND A CHARACTER.\n*            1) THE MAXIMUM NUMBER OF RECORDS TO BE DISPLAYED.\n*               (CANNOT EXCEED 50).\n*            2) THE CONSOLE ID WHERE THE RECORDS ARE TO BE DISPLAYED.\n*            3) THE NUMBER OF RECORDS TO SKIP BEFORE DISPLAYING.\n*            4) DISPLAY ON TSO TERMINAL IF EXECUTED BY A SESSION\n*               (FOR TESTING PURPOSES). (SET T = 'T').\n*        LOG OF CHANGES.\n*         24JUL81 - IGNORE READY MESSAGE.\n*         10JUN82 - NEW PARAMETER ALLOWS SKIPPING RECORDS.\n         SPACE\nTSSOWTO  START\n         USING *,R12\n         B     @PROLOG-*(,15)\n         DC    AL1(11),CL11'TSSOWTO'\n         DC    CL16' &SYSDATE &SYSTIME '\n@SIZE    DC    0F'0',AL1(1),AL3(@DATAL)\n@PROLOG  STM   14,12,12(R13)\n         LR    R12,R15\n         LR    R2,R1\n         L     0,@SIZE\n         GETMAIN R,LV=(0)\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         LR    R1,R2     RESTORE R1\n         USING @DATA,R13\n         SPACE\n         XC    PARMAREA(7),PARMAREA DEFAULT CONSOLE 0\n         MVI   TERM,C'N'           DEFAULT TERM NO\n         SR    R4,R4               DEFAULT SKIPNUM\n         LA    R5,20               DEFAULT MAXIMUM LINES\n         L     R6,0(,R1)           POINT TO PARM FIELD\n         LH    R14,0(,R6)          LENGTH OF PARM\n         LTR   R14,R14             LENGTH ZERO?\n         BZ    PARMX               YES - USE DEFAULT\n         BCTR  R14,0               LENGTH MINUS 1\n         B     *+10\n         MVC   PARMAREA(0),2(R6)   MOVE PARM\n         EX    R14,*-6\n         LH    R5,PARMAREA         MAX LINES\n         CH    R5,MAX              GREATER THAN MAX?\n         BNH   *+8                 NO, SKIP NEXT INSTR\n         LH    R5,MAX              YES, USE MAX\n         LH    R4,SKIPNUM          NUMBER OF LINES TO SKIP\nPARMX    EQU   *\n         MVC   MAXLEN,MAXLENV\n         MVC   IDCB(IDCBL),IDCBMODL\n         LA    R2,IDCB\n         MVI   OPEN,X'80'\n         SPACE\n         OPEN  ((R2),INPUT),MF=(E,OPEN)\n         SPACE\n         TM    OFLGS(R2),X'10'     OPEN SUCCESSFUL?\n         BNO   EXIT16              NO - BRANCH\n         MVC   WTOW(12),WTOMR0\n         MVC   WTOL+2(2),WTOW+2\n         SPACE\nREADLOOP EQU   *\n         MVI   WORKA,C' '\n         MVC   WORKA+1(MAXL-1),WORKA\n         SPACE\n         GET   (R2),WORKA\n         SPACE\n         LTR   R4,R4               ARE WE SKIPPING RECORDS\n         BZ    SKIPX               NO, BRANCH\n         SPACE\n         BCTR  R4,0                REDUCE R4 BY 1\n         B     READLOOP            GO READ ANOTHER\n         SPACE\nSKIPX    EQU   *\n         TM    IDCB+RECFM,B'11000000'\n         BO    NOTV\n         TM    IDCB+RECFM,B'01000000'\n         BZ    NOTV\n         LH    R7,WORKA            GET LENGTH FROM VARIABLE RDW\n         TM    IDCB+RECFM,B'00000110' ASA OR MACHINE CHAR?\n         BZ    NOVCHAR             NEITHER - BRANCH\n         MVC   WORKA+4(100),WORKA+5\n         BCTR  R7,0\nNOVCHAR  EQU   *\n         MVC   WORKA(100),WORKA+4\n         CH    R7,MAXLEN           LENGTH GREATER THAN MAX?\n         BNH   WTOL7               NO - BRANCH\n         LH    R7,MAXLEN           YES - USE MAXIMUM\n         B     WTOL7\nNOTV     LA    R7,72+4             LENGTH\n         LA    R8,WORKA+71\n         LA    R0,70\nTRAILOOP CLI   0(R8),C' '          LAST NONBLANK FOUND?\n         BNE   TRAILXIT            YES - BRANCH\n         BCTR  R8,0                SUBTRACT 1 FROM POINTER\n         BCTR  R7,0                SUBTRACT 1 FROM LENGTH\n         BCT   R0,TRAILOOP         BRANCH 70 TIMES\nTRAILXIT EQU   *\nWTOL7    CLC   WORKA(7),READY      IS IT READY\n         BE    AFTERSVC            YES, SKIP IT\n         LA    R1,WTOL             POINT TO WTO MF=L\n         STH   R7,0(,R1)           SET LENGTH\n         CLI   TERM,C'T'\n         BE    TERMOUT\n         LH    R15,WTOW+2          GET MCS FLAGS FROM MODEL\n         STH   R15,2(,R1)          SET MCS FLAGS\n         LA    R14,0(R7,R1)        POINT TO END OF TEXT\n         MVC   0(4,R14),WTOW+8     APPEND ROUTING AND DESC FROM MODEL\n         LH    R0,CONSOLE          CONSOLE ID\n         SVC   35\n         SPACE\nAFTERSVC BCT   R5,READLOOP\n         B     EODAD\n         SPACE\nTERMOUT  LH    R0,0(,R1)\n         SH    R0,=H'4'\n         LA    R1,4(,R1)\n         SVC   93\n         B     AFTERSVC\n         SPACE\nEXIT16   LA    R15,16\n         B     EXIT\n         SPACE\nEODAD    MVI   OPEN,X'80'\n         SPACE\n         CLOSE ((R2)),MF=(E,OPEN)\n         SPACE\n         FREEPOOL (R2)\n         SPACE\n*               SEE MVS DATA MGMT SERVICES GUIDE, PAGE 77\n         ORG   *-2                 BACK UP TO SVC 10 IN FREEPOOL\n         LA    R15,252             SUBPOOL 252 FOR PROTECT KEY 0\n         SLL   R15,24              SHIFT 252 TO LEFTMOST BYTE\n         OR    R0,R15              CHANGE SUBPOOL TO 252\n         SVC   10                  FREEMAIN\n         SPACE\nEXIT0    SR    15,15\nEXIT     LR    1,13\n         L     0,@SIZE\n         L     13,4(,13)\n         ST    15,16(,13)\n         FREEMAIN R,A=(1),LV=(0)\n         LM    14,12,12(13)\n         BR    14\n         SPACE\n************************************************************\n*                                                          *\n*        CONSTANTS                                         *\n*                                                          *\n************************************************************\n         SPACE\nRECFM    EQU   36\nOFLGS    EQU   48\nMAXL     EQU   72\nMAXLENV  DC    0H'0',AL2(MAXL+4)\n         PRINT NOGEN\nIDCBMODL DCB   DDNAME=SYSTSPRT,DSORG=PS,MACRF=GM,EODAD=EODAD\nIDCBL    EQU   *-IDCBMODL\n         PRINT GEN\nREADY    DC    C'READY ',X'15'\nMAX      DC    H'50'\nWTOM     WTO   'TEST',DESC=(5),MF=L\nWTOML    EQU   *-WTOM\nWTOMR0   WTO   'TEST',DESC=(5),MCSFLAG=(REG0,RESP),MF=L\nWTOMR0N  WTO   'TEST',DESC=(5),MCSFLAG=(REG0,RESP,NOCPY),MF=L\n         LTORG\n         DC    0D'0'\n         SPACE\n************************************************************\n*                                                          *\n*        DSECTS                                            *\n*                                                          *\n************************************************************\n         SPACE\n@DATA    DSECT\n         DS    18F\nDOUBLE   DS    D\nOPEN     DS    F\nMAXLEN   DS    H\n*\nPARMAREA DS    0D\n         DS    H\nCONSOLE  DS    H\nSKIPNUM  DS    H\nTERM     DS    C\n*\nIDCB     DS    0D,XL(IDCBL)\nWTOW     DS    0D,XL12\nWTOL     DS    0D,2H\nWORKA    DS    260X\n         DS    0D\n@DATAL   EQU   *-@DATA\n         SPACE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT306/FILE306.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT306", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}