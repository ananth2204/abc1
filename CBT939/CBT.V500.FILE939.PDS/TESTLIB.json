{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "ZATLAS1", "INMTNODE": "A", "INMTUID": "ZATLAS1", "INMFTIME": "20200906020856000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 2469012, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 4096, "INMBLKSZ": 27998, "INMRECFM": "VB", "INMDIR": 8, "INMDSNAM": "ZATLAS1.PCRE2.TESTLIB", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 2469012, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 2469012, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"ZATLAS1.PCRE2.TESTLIB": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 27998, "DS1LRECL": 4096, "DS1RECFM": "VB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12304, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3000, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200246", "DS1SCEXT": "b'\\x80m^'", "DS1SCALO": "b'P\\x00\\x00\\x14'", "DS1LSTAR": "b'\\x00\\xad\\x02'", "DS1TRBAL": "b'\\xe0\\x0e'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x0c\\xd0\\x00\\x04z\\xd0`'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x0c\\xd0\\x00\\x04z\\xd0`'", "b'X|\\xf28\\x00\\x00\\x00\\xbd\\x00\\x00\\x00\\xd1\\x00\\x0c\\x019'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"GRPFLS": {"ttr": 10, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "\ntestdata/grepinputv\n\ntestdata/grepinputx\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "GRPIN": {"ttr": 12, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "\nThis is a file of miscellaneous text that is used as test data for checking\nthat the pcregrep command is working correctly. The file must be more than\n24KiB long so that it needs more than a single read() call to process it. New\nfeatures should be added at the end, because some of the tests involve the\noutput of line numbers, and we don't want these to change.\n\nPATTERN at the start of a line.\nIn the middle of a line, PATTERN appears.\n\nThis pattern is in lower case.\n\nHere follows a whole lot of stuff that makes the file over 24KiB long.\n\n-------------------------------------------------------------------------------\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n\nThe quick brown fox jumps over the lazy dog. The quick brown fox jumps over the\nlazy dog. The quick brown fox jumps over the lazy dog. The quick brown fox\njumps over the lazy dog. The quick brown fox jumps over the lazy dog. The quick\nbrown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n-------------------------------------------------------------------------------\n\naaaaa0\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\nbbbbbb\ncccccccccccccccccccccccccccccccccccccccccc\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\neeeee\naaaaa2\nffffffffff\n\nThis is a line before the binary zero.\nThis line contains a binary zero here >?< for testing.\nThis is a line after the binary zero.\n\nABOVE the elephant\nABOVE\nABOVE theatre\nAB.VE\nAB.VE the turtle\n\n0102\n\nmatch 1:\n a\nmatch 2:\n b\nmatch 3:\n c\nmatch 4:\n d\nmatch 5:\n e\nRhubarb\nCustard Tart\n\nPUT NEW DATA ABOVE THIS LINE.\n=============================\n\nCheck up on PATTERN near the end.\nThis is the last line of this file.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "GRPINV": {"ttr": 17, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "\nThe quick brown\nfox jumps\nover the lazy dog.\nThis time it jumps and jumps and jumps.\nThis line contains \\E and (regex) *meta* \u00ddcharacters\u00a8.\nThe word is cat in this line\nThe caterpillar sat on the mat\nThe snowcat is not an animal\nA buried feline in the syndicate\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "GRPINX": {"ttr": 258, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "\nThis is a second file of input for the pcregrep tests.\n\nHere is the pattern again.\n\nPattern\nThat time it was on a line by itself.\n\nTo pat or not to pat, that is the question.\n\ncomplete pair\nof lines\n\nThat was a complete pair\nof lines all by themselves.\n\ncomplete pair\nof lines\n\nAnd there they were again, to check line numbers.\n\none\ntwo\nthree\nfour\nfive\nsix\nseven\neight\nnine\nten\neleven\ntwelve\nthirteen\nfourteen\nfifteen\nsixteen\nseventeen\neighteen\nnineteen\ntwenty\n\nThis line contains pattern not on a line by itself.\nThis is the last line of this file.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "GRPIN3": {"ttr": 15, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "\ntriple:   t1_txt   s1_tag   s_txt   p_tag   p_txt   o_tag   o_txt\n\ntriple:   t2_txt   s1_tag   s_txt   p_tag   p_txt   o_tag\nLorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure do\nlor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\ntriple:   t3_txt   s2_tag   s_txt   p_tag   p_txt   o_tag   o_txt\n\ntriple:   t4_txt   s1_tag   s_txt   p_tag   p_txt   o_tag   o_txt\n\ntriple:   t5_txt   s1_tag   s_txt   p_tag   p_txt   o_tag\no_txt\n\ntriple:   t6_txt   s2_tag   s_txt   p_tag   p_txt   o_tag   o_txt\n\ntriple:   t7_txt   s1_tag   s_txt   p_tag   p_txt   o_tag   o_txt\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "GRPLS": {"ttr": 260, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "\nThis is a file of patterns for testing the -f option. Don't include any blank\nlines because they will match everything! This is no longer true, so have one.\n\npattern\nline by itself\n\nEnd of the list of patterns.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "GRPOT": {"ttr": 262, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "\n---------------------------- Test 1 ------------------------------\nPATTERN at the start of a line.\nIn the middle of a line, PATTERN appears.\nCheck up on PATTERN near the end.\nRC=0\n---------------------------- Test 2 ------------------------------\nPATTERN at the start of a line.\nRC=0\n---------------------------- Test 3 ------------------------------\n7:PATTERN at the start of a line.\n8:In the middle of a line, PATTERN appears.\n10:This pattern is in lower case.\n623:Check up on PATTERN near the end.\nRC=0\n---------------------------- Test 4 ------------------------------\n\nRC=0\n---------------------------- Test 5 ------------------------------\n./testdata/grepinput:7:PATTERN at the start of a line.\n./testdata/grepinput:8:In the middle of a line, PATTERN appears.\n./testdata/grepinput:10:This pattern is in lower case.\n./testdata/grepinput:623:Check up on PATTERN near the end.\n./testdata/grepinputx:3:Here is the pattern again.\n./testdata/grepinputx:5:Pattern\n./testdata/grepinputx:42:This line contains pattern not on a line by itself.\nRC=0\n---------------------------- Test 6 ------------------------------\n7:PATTERN at the start of a line.\n8:In the middle of a line, PATTERN appears.\n10:This pattern is in lower case.\n623:Check up on PATTERN near the end.\n3:Here is the pattern again.\n5:Pattern\n42:This line contains pattern not on a line by itself.\nRC=0\n---------------------------- Test 7 ------------------------------\n./testdata/grepinput\n./testdata/grepinputx\nRC=0\n---------------------------- Test 8 ------------------------------\n./testdata/grepinput\nRC=0\n---------------------------- Test 9 ------------------------------\nRC=0\n---------------------------- Test 10 -----------------------------\nRC=1\n---------------------------- Test 11 -----------------------------\n1:This is a second file of input for the pcregrep tests.\n2:\n4:\n5:Pattern\n6:That time it was on a line by itself.\n7:\n8:To pat or not to pat, that is the question.\n9:\n10:complete pair\n11:of lines\n12:\n13:That was a complete pair\n14:of lines all by themselves.\n15:\n16:complete pair\n17:of lines\n18:\n19:And there they were again, to check line numbers.\n20:\n21:one\n22:two\n23:three\n24:four\n25:five\n26:six\n27:seven\n28:eight\n29:nine\n30:ten\n31:eleven\n32:twelve\n33:thirteen\n34:fourteen\n35:fifteen\n36:sixteen\n37:seventeen\n38:eighteen\n39:nineteen\n40:twenty\n41:\n43:This is the last line of this file.\nRC=0\n---------------------------- Test 12 -----------------------------\nPattern\nRC=0\n---------------------------- Test 13 -----------------------------\nHere is the pattern again.\nThat time it was on a line by itself.\nseventeen\nThis line contains pattern not on a line by itself.\nRC=0\n---------------------------- Test 14 -----------------------------\n./testdata/grepinputx:To pat or not to pat, that is the question.\nRC=0\n---------------------------- Test 15 -----------------------------\npcre2grep: Error in command-line regex at offset 4: quantifier does not follow a repeatable item\nRC=2\n---------------------------- Test 16 -----------------------------\npcre2grep: Failed to open ./testdata/nonexistfile: No such file or directory\nRC=2\n---------------------------- Test 17 -----------------------------\nfeatures should be added at the end, because some of the tests involve the\noutput of line numbers, and we don't want these to change.\nRC=0\n---------------------------- Test 18 -----------------------------\n4:features should be added at the end, because some of the tests involve the\noutput of line numbers, and we don't want these to change.\n583:brown fox jumps over the lazy dog. The quick brown fox jumps over the lazy dog.\n-------------------------------------------------------------------------------\nRC=0\n---------------------------- Test 19 -----------------------------\nPattern\nRC=0\n---------------------------- Test 20 -----------------------------\n10:complete pair\nof lines\n16:complete pair\nof lines\nRC=0\n---------------------------- Test 21 -----------------------------\n24:four\n25-five\n26-six\n27-seven\n--\n34:fourteen\n35-fifteen\n36-sixteen\n37-seventeen\nRC=0\n---------------------------- Test 22 -----------------------------\n21-one\n22-two\n23-three\n24:four\n--\n31-eleven\n32-twelve\n33-thirteen\n34:fourteen\nRC=0\n---------------------------- Test 23 -----------------------------\none\ntwo\nthree\nfour\nfive\nsix\nseven\n--\neleven\ntwelve\nthirteen\nfourteen\nfifteen\nsixteen\nseventeen\nRC=0\n---------------------------- Test 24 -----------------------------\nfour\nfive\nsix\nseven\neight\nnine\nten\neleven\ntwelve\nthirteen\nfourteen\nfifteen\nsixteen\nseventeen\neighteen\nnineteen\ntwenty\n\nThis line contains pattern not on a line by itself.\nThis is the last line of this file.\nRC=0\n---------------------------- Test 25 -----------------------------\n15-\n16-complete pair\n17-of lines\n18-\n19-And there they were again, to check line numbers.\n20-\n21-one\n22-two\n23-three\n24:four\n25-five\n26-six\n27-seven\n28-eight\n29-nine\n30-ten\n31-eleven\n32-twelve\n33-thirteen\n34:fourteen\nRC=0\n---------------------------- Test 26 -----------------------------\n\ncomplete pair\nof lines\n\nAnd there they were again, to check line numbers.\n\none\ntwo\nthree\nfour\nfive\nsix\nseven\neight\nnine\nten\neleven\ntwelve\nthirteen\nfourteen\nfifteen\nsixteen\nseventeen\neighteen\nnineteen\ntwenty\n\nThis line contains pattern not on a line by itself.\nThis is the last line of this file.\nRC=0\n---------------------------- Test 27 -----------------------------\nfour\nfive\nsix\nseven\neight\nnine\nten\neleven\ntwelve\nthirteen\nfourteen\nfifteen\nsixteen\nseventeen\neighteen\nnineteen\ntwenty\n\nThis line contains pattern not on a line by itself.\nThis is the last line of this file.\nRC=0\n---------------------------- Test 28 -----------------------------\n14-of lines all by themselves.\n15-\n16-complete pair\n17-of lines\n18-\n19-And there they were again, to check line numbers.\n20-\n21-one\n22-two\n23-three\n24:four\n25-five\n26-six\n27-seven\n28-eight\n29-nine\n30-ten\n31-eleven\n32-twelve\n33-thirteen\n34:fourteen\nRC=0\n---------------------------- Test 29 -----------------------------\nof lines all by themselves.\n\ncomplete pair\nof lines\n\nAnd there they were again, to check line numbers.\n\none\ntwo\nthree\nfour\nfive\nsix\nseven\neight\nnine\nten\neleven\ntwelve\nthirteen\nfourteen\nfifteen\nsixteen\nseventeen\neighteen\nnineteen\ntwenty\n\nThis line contains pattern not on a line by itself.\nThis is the last line of this file.\nRC=0\n---------------------------- Test 30 -----------------------------\n./testdata/grepinput-4-features should be added at the end, because some of the tests involve the\n./testdata/grepinput-5-output of line numbers, and we don't want these to change.\n./testdata/grepinput-6-\n./testdata/grepinput:7:PATTERN at the start of a line.\n./testdata/grepinput:8:In the middle of a line, PATTERN appears.\n./testdata/grepinput-9-\n./testdata/grepinput:10:This pattern is in lower case.\n--\n./testdata/grepinput-620-PUT NEW DATA ABOVE THIS LINE.\n./testdata/grepinput-621-=============================\n./testdata/grepinput-622-\n./testdata/grepinput:623:Check up on PATTERN near the end.\n--\n./testdata/grepinputx-1-This is a second file of input for the pcregrep tests.\n./testdata/grepinputx-2-\n./testdata/grepinputx:3:Here is the pattern again.\n./testdata/grepinputx-4-\n./testdata/grepinputx:5:Pattern\n--\n./testdata/grepinputx-39-nineteen\n./testdata/grepinputx-40-twenty\n./testdata/grepinputx-41-\n./testdata/grepinputx:42:This line contains pattern not on a line by itself.\nRC=0\n---------------------------- Test 31 -----------------------------\n./testdata/grepinput:7:PATTERN at the start of a line.\n./testdata/grepinput:8:In the middle of a line, PATTERN appears.\n./testdata/grepinput-9-\n./testdata/grepinput:10:This pattern is in lower case.\n./testdata/grepinput-11-\n./testdata/grepinput-12-Here follows a whole lot of stuff that makes the file over 24KiB long.\n./testdata/grepinput-13-\n--\n./testdata/grepinput:623:Check up on PATTERN near the end.\n./testdata/grepinput-624-This is the last line of this file.\n--\n./testdata/grepinputx:3:Here is the pattern again.\n./testdata/grepinputx-4-\n./testdata/grepinputx:5:Pattern\n./testdata/grepinputx-6-That time it was on a line by itself.\n./testdata/grepinputx-7-\n./testdata/grepinputx-8-To pat or not to pat, that is the question.\n--\n./testdata/grepinputx:42:This line contains pattern not on a line by itself.\n./testdata/grepinputx-43-This is the last line of this file.\nRC=0\n---------------------------- Test 32 -----------------------------\n./testdata/grepinputx\nRC=0\n---------------------------- Test 33 -----------------------------\npcre2grep: Failed to open ./testdata/grepnonexist: No such file or directory\nRC=2\n---------------------------- Test 34 -----------------------------\nRC=2\n---------------------------- Test 35 -----------------------------\n./testdata/grepinput8\n./testdata/grepinputx\nRC=0\n---------------------------- Test 36 -----------------------------\n./testdata/grepinput3\n./testdata/grepinputx\nRC=0\n---------------------------- Test 37 -----------------------------\n24KiB long so that it needs more than a single read() call to process it. New\naaaaa0\naaaaa2\n0102\nRC=0\n======== STDERR ========\npcre2grep: pcre2_match() gave error -47 while matching this text:\n\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n\npcre2grep: pcre2_match() gave error -47 while matching this text:\n\naaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n\npcre2grep: Error -46, -47, -53 or -63 means that a resource limit was exceeded.\npcre2grep: Check your regex for nested unlimited loops.\n---------------------------- Test 38 ------------------------------\nThis line contains a binary zero here >?< for testing.\nRC=0\n---------------------------- Test 39 ------------------------------\nThis is a line before the binary zero.\nThis line contains a binary zero here >?< for testing.\nRC=0\n---------------------------- Test 40 ------------------------------\nThis line contains a binary zero here >?< for testing.\nThis is a line after the binary zero.\nRC=0\n---------------------------- Test 41 ------------------------------\nbefore the binary zero\nafter the binary zero\nRC=0\n---------------------------- Test 42 ------------------------------\n./testdata/grepinput:595:before the binary zero\n./testdata/grepinput:597:after the binary zero\nRC=0\n---------------------------- Test 43 ------------------------------\n595:before\n595:zero\n596:zero\n597:after\n597:zero\nRC=0\n---------------------------- Test 44 ------------------------------\n595:before\n595:zero\n596:zero\n597:zero\nRC=0\n---------------------------- Test 45 ------------------------------\n10:pattern\n595:binary\n596:binary\n597:binary\nRC=0\n---------------------------- Test 46 ------------------------------\npcre2grep: Error in 2nd command-line regex at offset 9: missing closing parenthesis\nRC=2\n---------------------------- Test 47 ------------------------------\nAB.VE\nRC=0\n---------------------------- Test 48 ------------------------------\nABOVE the elephant\nAB.VE\nAB.VE the turtle\nRC=0\n---------------------------- Test 49 ------------------------------\nABOVE the elephant\nAB.VE\nAB.VE the turtle\nPUT NEW DATA ABOVE THIS LINE.\nRC=0\n---------------------------- Test 50 ------------------------------\nRC=1\n---------------------------- Test 51 ------------------------------\nover the lazy dog.\nThis time it jumps and jumps and jumps.\nThis line contains \\E and (regex) *meta* \u00ddcharacters\u00a8.\nThe word is cat in this line\nThe caterpillar sat on the mat\nThe snowcat is not an animal\nA buried feline in the syndicate\nRC=0\n---------------------------- Test 52 ------------------------------\nfox \u001b\u00dd1;31mjumps\u001b\u00dd0m\nThis time it \u001b\u00dd1;31mjumps\u001b\u00dd0m and \u001b\u00dd1;31mjumps\u001b\u00dd0m and \u001b\u00dd1;31mjumps\u001b\u00dd0m.\nRC=0\n---------------------------- Test 53 ------------------------------\n36976,\n36994,\n37028,\n37070,\n37087,\nRC=0\n---------------------------- Test 54 ------------------------------\n595:15,6\n595:33,4\n596:28,4\n597:15,5\n597:32,4\nRC=0\n---------------------------- Test 55 -----------------------------\nHere is the \u001b\u00dd1;31mpattern\u001b\u00dd0m again.\nThat time it was on a \u001b\u00dd1;31mline by itself\u001b\u00dd0m.\nThis line contains \u001b\u00dd1;31mpattern\u001b\u00dd0m not on a \u001b\u00dd1;31mline by itself\u001b\u00dd0m.\nRC=0\n---------------------------- Test 56 -----------------------------\n./testdata/grepinput:456\n./testdata/grepinput3:0\n./testdata/grepinput8:0\n./testdata/grepinputM:0\n./testdata/grepinputv:1\n./testdata/grepinputx:0\nRC=0\n---------------------------- Test 57 -----------------------------\n./testdata/grepinput:456\n./testdata/grepinputv:1\nRC=0\n---------------------------- Test 58 -----------------------------\nPATTERN at the start of a line.\nIn the middle of a line, PATTERN appears.\nCheck up on PATTERN near the end.\nRC=0\n---------------------------- Test 59 -----------------------------\nPATTERN at the start of a line.\nIn the middle of a line, PATTERN appears.\nCheck up on PATTERN near the end.\nRC=0\n---------------------------- Test 60 -----------------------------\nPATTERN at the start of a line.\nIn the middle of a line, PATTERN appears.\nCheck up on PATTERN near the end.\nRC=0\n---------------------------- Test 61 -----------------------------\nPATTERN at the start of a line.\nIn the middle of a line, PATTERN appears.\nCheck up on PATTERN near the end.\nRC=0\n---------------------------- Test 62 -----------------------------\npcre2grep: pcre2_match() gave error -47 while matching text that starts:\n\nThis is a file of miscellaneous text that is used as test data for checking\nthat the pcregrep command is working correctly. The file must be more than\n24KiB long so that it needs more than a single re\n\npcre2grep: Error -46, -47, -53 or -63 means that a resource limit was exceeded.\npcre2grep: Check your regex for nested unlimited loops.\nRC=1\n---------------------------- Test 63 -----------------------------\npcre2grep: pcre2_match() gave error -53 while matching text that starts:\n\nThis is a file of miscellaneous text that is used as test data for checking\nthat the pcregrep command is working correctly. The file must be more than\n24KiB long so that it needs more than a single re\n\npcre2grep: Error -46, -47, -53 or -63 means that a resource limit was exceeded.\npcre2grep: Check your regex for nested unlimited loops.\nRC=1\n---------------------------- Test 64 ------------------------------\nappears\nRC=0\n---------------------------- Test 65 ------------------------------\npear\nRC=0\n---------------------------- Test 66 ------------------------------\nRC=0\n---------------------------- Test 67 ------------------------------\nRC=0\n---------------------------- Test 68 ------------------------------\npear\nRC=0\n---------------------------- Test 69 -----------------------------\n1:This is a second file of input for the pcregrep tests.\n2:\n4:\n5:Pattern\n6:That time it was on a line by itself.\n7:\n8:To pat or not to pat, that is the question.\n9:\n10:complete pair\n11:of lines\n12:\n13:That was a complete pair\n14:of lines all by themselves.\n15:\n16:complete pair\n17:of lines\n18:\n19:And there they were again, to check line numbers.\n20:\n21:one\n22:two\n23:three\n24:four\n25:five\n26:six\n27:seven\n28:eight\n29:nine\n30:ten\n31:eleven\n32:twelve\n33:thirteen\n34:fourteen\n35:fifteen\n36:sixteen\n37:seventeen\n38:eighteen\n39:nineteen\n40:twenty\n41:\n43:This is the last line of this file.\nRC=0\n---------------------------- Test 70 -----------------------------\n\u001b\u00dd1;31mtriple:   t1_txt   s1_tag   s_txt   p_tag   p_txt   o_tag   o_txt\n\n\u001b\u00dd0m\u001b\u00dd1;31mtriple:   t3_txt   s2_tag   s_txt   p_tag   p_txt   o_tag   o_txt\n\n\u001b\u00dd0m\u001b\u00dd1;31mtriple:   t4_txt   s1_tag   s_txt   p_tag   p_txt   o_tag   o_txt\n\n\u001b\u00dd0m\u001b\u00dd1;31mtriple:   t6_txt   s2_tag   s_txt   p_tag   p_txt   o_tag   o_txt\n\n\u001b\u00dd0mRC=0\n1:\u001b\u00dd1;31mtriple:   t1_txt   s1_tag   s_txt   p_tag   p_txt   o_tag   o_txt\n\n\u001b\u00dd0m6:\u001b\u00dd1;31mtriple:   t3_txt   s2_tag   s_txt   p_tag   p_txt   o_tag   o_txt\n\n\u001b\u00dd0m8:\u001b\u00dd1;31mtriple:   t4_txt   s1_tag   s_txt   p_tag   p_txt   o_tag   o_txt\n\n\u001b\u00dd0m13:\u001b\u00dd1;31mtriple:   t6_txt   s2_tag   s_txt   p_tag   p_txt   o_tag   o_txt\n\n\u001b\u00dd0mRC=0\ntriple:   t1_txt   s1_tag   s_txt   p_tag   p_txt   o_tag   o_txt\n\ntriple:   t3_txt   s2_tag   s_txt   p_tag   p_txt   o_tag   o_txt\n\ntriple:   t4_txt   s1_tag   s_txt   p_tag   p_txt   o_tag   o_txt\n\ntriple:   t6_txt   s2_tag   s_txt   p_tag   p_txt   o_tag   o_txt\n\nRC=0\n1:triple:   t1_txt   s1_tag   s_txt   p_tag   p_txt   o_tag   o_txt\n\n6:triple:   t3_txt   s2_tag   s_txt   p_tag   p_txt   o_tag   o_txt\n\n8:triple:   t4_txt   s1_tag   s_txt   p_tag   p_txt   o_tag   o_txt\n\n13:triple:   t6_txt   s2_tag   s_txt   p_tag   p_txt   o_tag   o_txt\n\nRC=0\n---------------------------- Test 71 -----------------------------\n\nRC=0\n---------------------------- Test 72 -----------------------------\n\u001b\u00dd1;31m01\u001b\u00dd0m02\nRC=0\n---------------------------- Test 73 -----------------------------\n\u001b\u00dd1;31m01\u001b\u00dd0m\nRC=0\n---------------------------- Test 74 -----------------------------\n\n\nRC=0\n---------------------------- Test 75 -----------------------------\n\u001b\u00dd1;31m01\u001b\u00dd0m\u001b\u00dd1;31m02\u001b\u00dd0m\nRC=0\n---------------------------- Test 76 -----------------------------\n\u001b\u00dd1;31m01\u001b\u00dd0m\n\u001b\u00dd1;31m02\u001b\u00dd0m\nRC=0\n---------------------------- Test 77 -----------------------------\n\n\nRC=0\n---------------------------- Test 78 -----------------------------\n\u001b\u00dd1;31m01\u001b\u00dd0m02\u001b\u00dd1;31m03\u001b\u00dd0m040506\nRC=0\n---------------------------- Test 79 -----------------------------\n\u001b\u00dd1;31m01\u001b\u00dd0m\n\u001b\u00dd1;31m03\u001b\u00dd0m\nRC=0\n---------------------------- Test 80 -----------------------------\n\nRC=0\n---------------------------- Test 81 -----------------------------\n\u001b\u00dd1;31m01\u001b\u00dd0m02\nRC=0\n---------------------------- Test 82 -----------------------------\n\u001b\u00dd1;31m01\u001b\u00dd0m\nRC=0\n---------------------------- Test 83 -----------------------------\npcre2grep: line 4 of file ./testdata/grepinput3 is too long for the internal buffer\npcre2grep: the maximum buffer size is 100\npcre2grep: use the --max-buffer-size option to change it\nRC=2\n---------------------------- Test 84 -----------------------------\ntestdata/grepinputv:fox jumps\ntestdata/grepinputx:complete pair\ntestdata/grepinputx:That was a complete pair\ntestdata/grepinputx:complete pair\ntestdata/grepinput3:triple:   t7_txt   s1_tag   s_txt   p_tag   p_txt   o_tag   o_txt\nRC=0\n---------------------------- Test 85 -----------------------------\n./testdata/grepinput3:Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequ\nat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\nRC=0\n---------------------------- Test 86 -----------------------------\nBinary file ./testdata/grepbinary matches\nRC=0\n---------------------------- Test 87 -----------------------------\nRC=1\n---------------------------- Test 88 -----------------------------\nBinary file ./testdata/grepbinary matches\nRC=0\n---------------------------- Test 89 -----------------------------\nRC=1\n---------------------------- Test 90 -----------------------------\nRC=1\n---------------------------- Test 91 -----------------------------\nThe quick brown f?x jumps over the lazy dog.\nRC=0\n---------------------------- Test 92 -----------------------------\nThe quick brown f?x jumps over the lazy dog.\nRC=0\n---------------------------- Test 93 -----------------------------\nThe quick brown f?x jumps over the lazy dog.\nRC=0\n---------------------------- Test 94 -----------------------------\n./testdata/grepinput8\n./testdata/grepinputx\nRC=0\n---------------------------- Test 95 -----------------------------\ntestdata/grepinputx:complete pair\ntestdata/grepinputx:That was a complete pair\ntestdata/grepinputx:complete pair\nRC=0\n---------------------------- Test 96 -----------------------------\n./testdata/grepinput3\n./testdata/grepinput8\n./testdata/grepinputx\nRC=0\n---------------------------- Test 97 -----------------------------\n./testdata/grepinput3\n./testdata/grepinputx\nRC=0\n---------------------------- Test 98 -----------------------------\n./testdata/grepinputx\nRC=0\n---------------------------- Test 99 -----------------------------\n./testdata/grepinput3\n./testdata/grepinputx\nRC=0\n---------------------------- Test 100 ------------------------------\n./testdata/grepinput:zerothe.\n./testdata/grepinput:zeroa\n./testdata/grepinput:zerothe.\nRC=0\n---------------------------- Test 101 ------------------------------\n./testdata/grepinput:\u001b\u00dd1;31m.\u001b\u00dd0m|\u001b\u00dd1;31mzero\u001b\u00dd0m|\u001b\u00dd1;31mthe\u001b\u00dd0m|\u001b\u00dd1;31m.\u001b\u00dd0m\n./testdata/grepinput:\u001b\u00dd1;31mzero\u001b\u00dd0m|\u001b\u00dd1;31ma\u001b\u00dd0m\n./testdata/grepinput:\u001b\u00dd1;31m.\u001b\u00dd0m|\u001b\u00dd1;31mzero\u001b\u00dd0m|\u001b\u00dd1;31mthe\u001b\u00dd0m|\u001b\u00dd1;31m.\u001b\u00dd0m\nRC=0\n---------------------------- Test 102 -----------------------------\n2:\n5:\n7:\n9:\n12:\n14:\nRC=0\n---------------------------- Test 103 -----------------------------\nRC=0\n---------------------------- Test 104 -----------------------------\n2:\n5:\n7:\n9:\n12:\n14:\nRC=0\n---------------------------- Test 105 -----------------------------\ntriple:   t1_txt   s1_tag   s_txt   p_tag   p_txt   o_tag   o_txt\n\ntriple:   t2_txt   s1_tag   s_txt   p_tag   p_txt   o_tag\nLorem \u001b\u00dd1;31mipsum\u001b\u00dd0m dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis au\nte irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\ntriple:   t3_txt   s2_tag   s_txt   p_tag   p_txt   o_tag   o_txt\n\ntriple:   t4_txt   s1_tag   s_txt   p_tag   p_txt   o_tag   o_txt\n\ntriple:   t5_txt   s1_tag   s_txt   p_tag   p_txt   o_tag\no_txt\n\ntriple:   t6_txt   s2_tag   s_txt   p_tag   p_txt   o_tag   o_txt\n\ntriple:   t7_txt   s1_tag   s_txt   p_tag   p_txt   o_tag   o_txt\nRC=0\n---------------------------- Test 106 -----------------------------\na\nRC=0\n---------------------------- Test 107 -----------------------------\n1:0,1\n2:0,1\n2:1,1\n2:2,1\n2:3,1\n2:4,1\nRC=0\n---------------------------- Test 108 ------------------------------\nRC=0\n---------------------------- Test 109 -----------------------------\nRC=0\n---------------------------- Test 110 -----------------------------\nmatch 1:\n a\n/1/a\nmatch 2:\n b\n/2/b\nmatch 3:\n c\n/3/c\nmatch 4:\n d\n/4/d\nmatch 5:\n e\n/5/e\nRC=0\n---------------------------- Test 111 -----------------------------\n607:0,12\n609:0,12\n611:0,12\n613:0,12\n615:0,12\nRC=0\n---------------------------- Test 112 -----------------------------\n37172,12\n37184,12\n37196,12\n37208,12\n37220,12\nRC=0\n---------------------------- Test 113 -----------------------------\n\nRC=0\n---------------------------- Test 114 -----------------------------\ntestdata/grepinput:469\ntestdata/grepinput3:0\ntestdata/grepinput8:0\ntestdata/grepinputM:2\ntestdata/grepinputv:3\ntestdata/grepinputx:6\nTOTAL:480\nRC=0\n---------------------------- Test 115 -----------------------------\ntestdata/grepinput:469\ntestdata/grepinputM:2\ntestdata/grepinputv:3\ntestdata/grepinputx:6\nTOTAL:480\nRC=0\n---------------------------- Test 116 -----------------------------\n\nRC=0\n---------------------------- Test 117 -----------------------------\n\n\n\n\n\n\n\nRC=0\n---------------------------- Test 118 -----------------------------\ntestdata/grepinput3\ntestdata/grepinput8\nRC=0\n---------------------------- Test 119 -----------------------------\n\n\n\n---\nabc\ndef\nxyz\n---\nRC=0\n---------------------------- Test 120 ------------------------------\n./testdata/grepinput:the binary zero.:zerothe.\n./testdata/grepinput:a binary zero:zeroa\n./testdata/grepinput:the binary zero.:zerothe.\nRC=0\n---------------------------- Test 121 -----------------------------\nThis line contains \\E and (regex) *meta* \u00ddcharacters\u00a8.\nRC=0\n---------------------------- Test 122 -----------------------------\nover the lazy dog.\nThe word is cat in this line\nRC=0\n---------------------------- Test 123 -----------------------------\nover the lazy dog.\nThe word is cat in this line\nRC=0\n---------------------------- Test 124 -----------------------------\n3:\u001b\u00dd1;31mstart end\u001b\u00dd0m in between \u001b\u00dd1;31mstart\nend\u001b\u00dd0m and following\n7:\u001b\u00dd1;31mstart end\u001b\u00dd0m in between \u001b\u00dd1;31mstart\nend\u001b\u00dd0m and following \u001b\u00dd1;31mstart\nend\u001b\u00dd0m other stuff\n11:\u001b\u00dd1;31mstart end\u001b\u00dd0m in between \u001b\u00dd1;31mstart\n\nend\u001b\u00dd0m\n16:\u001b\u00dd1;31mstart end\u001b\u00dd0m in between \u001b\u00dd1;31mstart\nend\u001b\u00dd0m\nRC=0\n3:\u001b\u00dd1;31mstart end\u001b\u00dd0m in between \u001b\u00dd1;31mstart\nend\u001b\u00dd0m and following\n5-Other stuff\n6-\n7:\u001b\u00dd1;31mstart end\u001b\u00dd0m in between \u001b\u00dd1;31mstart\nend\u001b\u00dd0m and following \u001b\u00dd1;31mstart\nend\u001b\u00dd0m other stuff\n10-\n11:\u001b\u00dd1;31mstart end\u001b\u00dd0m in between \u001b\u00dd1;31mstart\n\nend\u001b\u00dd0m\n14-\n15-** These two lines must be last.\n16:\u001b\u00dd1;31mstart end\u001b\u00dd0m in between \u001b\u00dd1;31mstart\nend\u001b\u00dd0m\nRC=0\n3:start end in between start\nend and following\n7:start end in between start\nend and following start\nend other stuff\n11:start end in between start\n\nend\n16:start end in between start\nend\nRC=0\n3:start end in between start\nend and following\n5-Other stuff\n6-\n7:start end in between start\nend and following start\nend other stuff\n10-\n11:start end in between start\n\nend\n14-\n15-** These two lines must be last.\n16:start end in between start\nend\nRC=0\n---------------------------- Test 125 -----------------------------\n\u001b\u00dd1;31ma\u001b\u00dd0m\u001b\u00dd1;31mb\u001b\u00dd0m\u001b\u00dd1;31mc\u001b\u00dd0m\u001b\u00dd1;31md\u001b\u00dd0m\nRC=0\n\u001b\u00dd1;31ma\u001b\u00dd0m\u001b\u00dd1;31mb\u001b\u00dd0m\u001b\u00dd1;31mc\u001b\u00dd0m\u001b\u00dd1;31md\u001b\u00dd0m\nRC=0\n\u001b\u00dd1;31ma\u001b\u00dd0mb\u001b\u00dd1;31mc\u001b\u00dd0md\nRC=0\n\u001b\u00dd1;31ma\u001b\u00dd0mb\u001b\u00dd1;31mc\u001b\u00dd0md\nRC=0\n---------------------------- Test 126 -----------------------------\nABC?XYZ\nRC=0\n---------------------------- Test 127 -----------------------------\npattern\nRC=0\n---------------------------- Test 128 -----------------------------\npcre2grep: Requested group 1 cannot be captured.\npcre2grep: Use --om-capture to increase the size of the capture vector.\nRC=2\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "GRPOTN": {"ttr": 265, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "\n---------------------------- Test N1 ------------------------------\n1:abc\r2:def\r---------------------------- Test N2 ------------------------------\n1:abc\rdef\n2:ghi\njkl\n---------------------------- Test N3 ------------------------------\n2:def\r3:\nghi\njkl\r---------------------------- Test N4 ------------------------------\n2:ghi\njkl\n---------------------------- Test N5 ------------------------------\n1:abc\r2:def\n3:ghi\n4:jkl\n---------------------------- Test N6 ------------------------------\n1:abc\r2:def\n3:ghi\n4:jkl\n---------------------------- Test N7 ------------------------------\n1:abcZERO2:defZERO\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "GRPPATN4": {"ttr": 267, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "\nxxx\njkl\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TEMPIN": {"ttr": 44113, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00S\\x01 \"?\\x01 \"?\\x074\\x00\\x02\\x00\\x02\\x00\\x00\\xe9\\xc1\\xe3\\xd3\\xc1\\xe2\\xf1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2020-08-10T00:00:00", "modifydate": "2020-08-10T07:34:53", "lines": 2, "newlines": 2, "modlines": 0, "user": "ZATLAS1"}, "text": "/(QUICK|JUMP)/i\n    THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TEMPOT": {"ttr": 44115, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "PCRE2 version 10.35 2020-05-09\n/(QUICK|JUMP)/i\n    THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.\n 0: QUICK\n 1: QUICK\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TSTINE1": {"ttr": 5123, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "\n/-- This set of tests is for features that are compatible with all versions of\n    Perl >= 5.10, in non-UTF-8 mode. It should run clean for the EBCDIC. --/\n\n< forbid 89?=ABCDEFfGILMNPTUWXZ<\n\n/-- 9 is \\371, not \\071 --/\n\n/abcd\\t\\n\\r\\f\\a\\e\\371\\x5e\\$\\\\\\?caxyz/\n    abcd\\t\\n\\r\\f\\a\\e9;\\$\\\\?caxyz\n\n/-- Should correctly fail.  \\c: is not supported in EBCDIC --/\n\n/\u00ac\\ca\\cA\\c\u00dd;\\c:/\n    \\x01\\x01\\e;z\n\n/-- Should correctly fail.  See EBCDIC replacement --/\n\n/\u00ac\u00dda-zA-Z\\d\u00a8\u00dda-zA-Z\\d\\-\u00a8*(\\.\u00dda-zA-Z\\d\u00a8\u00dda-zA-z\\d\\-\u00a8*)*\\.$/\n\n/\u00ac\u00dda-zA-Z\\d\u00a8\u00dda-zA-Z\\d\\-\u00a8*(\\.\u00dda-zA-Z\\d\u00a8\u00dda-zA-Z\\d\\-\u00a8*)*\\.$/\n    a.\n    Z.\n    2.\n    ab-c.pq-r.\n    sxk.zzz.ac.uk.\n    x-.y-.\n    *** Failers\n    -abc.peq.\n\n/\u00ac\u00dd\\w\u00a8\u00dd\\W\u00a8\u00dd\\s\u00a8\u00dd\\S\u00a8\u00dd\\d\u00a8\u00dd\\D\u00a8\u00dd\\b\u00a8\u00dd\\n\u00a8\u00dd\\c\u00a8\u00a8\u00dd\\022\u00a8/\n    a+ Z0+\\x16\\n\\x1d\\x12\n\n/-- I decided to not replicate the extremely complicate patterns that try to identify\n    email addresses.  They are peppered with ASCII only idioms such as:\n    \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8 and \u00dd\\000-\\037\u00a8\n    to represent extended ASCII and some other characters.  The pattern is hopelessly\n    complicated and is not worth it to translate to EBCDIC --/\n\n/-- first space \\100 instead of \\040 --/\n\n/\u00ac\\s/\n    \\100abc\n    \\x0cabc\n    \\nabc\n    \\rabc\n    \\tabc\n    *** Failers\n    abc\n\n/-- Here I had to change the order of the subject line rather then the pattern --/\n\n/\u00ac\u00ddw-C_\u00ac\u00a8+$/\n    wxy_\u00acABC\n    *** Failers\n    WXY\n\n/\u00ac\u00ddw-C_\u00ac\u00a8+$/i\n    WXY_\u00acabc\n    wxy_\u00acABC\n\n/\u00ac\u00dd\\xc1-\\xe9\\x6d\\x5f\u00a8+$/i\n    WXY_\u00acabc\n    wxy_\u00acABC\n\n\n/\\xe0/\n    \\\\\n\n/./\n    \\\\\n\n/\\x40Z/\n    the Zoo\n\n/(abc)\\242/\n    abc\\xa2\n\n/-- Only one example of that --/\n\n/(abc)\\220/\n    abc\\x90\n\n/(abc)\\1000/\n    abc\\x400\n    abc\\x40\\xf0\n    abc\\1000\n    abc\\100\\xf0\n    abc\\100\\360\n    abc\\100\\360\n\n/(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)(l)\\12\\342/\n    abcdefghijkllS\n\n/(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)\\12\\342/\n    abcdefghijk\\12S\n\n/\u00ac\u00dda-z\u00dd-\\\u00a8\\\\W-Z46\u00a8/\n    W46\u00a8789\n    Wall\n    Zebra\n    Xylophone\n\n    \u00ddabcd\u00a8\n    \u00a8abcd\u00dd\n    \\\\backslash\n    *** Failers\n    -46\u00a8789\n    well\n\n/\\?\u00a6\u00a5\u20ac\u00dd\\?-\\xFF\u00a8+/\n    ?\u00a6\u00a5\u20ac\n    ?\u00a6\u00a5\u20ac\u00bf\n    ?\u00a6\u00a5\u20ac\u00f8\n    ?\u00a6\u00a5\u20ac\u00c9\n\n/(?-x: )/x\n    A\\x40B\n\n/\u00ac\\c?/\n    ?\n    \\xff\n    \\x7f\n    \\x5f\n\n/\u00ac\\c\u00f8/\n\n/\\H\\h\\V\\v/\n    X X\\x15\n    X\\x05X\\x0b\n    ** Failers\n    \\x41 X\\x15\n\n/-- The failer herein does not fail, because I do not know\n    what to substitute for the non-breaking space \\x41 --/\n\n/\\H*\\h+\\V?\\v{3,4}/\n    \\x05\\x40\\x41X\\x15\\x0b\\x0c\\x0d\\x15\n    \\x05\\x40\\x41\\x15\\x0b\\x0c\\x0d\\x15\n    \\x05\\x40\\x41\\x15\\x0b\\x0c\n    ** Failers\n    \\x05\\x40\\x41\\x15\\x0b\n\n/\\v*X\\v?Y\\v+Z\\V*\\x15\\V+\\x0b\\V{2,3}\\x0c/\n    >XY\\x15Z\\x15A\\x0bNN\\x0c\n    >\\x15\\x0dX\\x15Y\\x15\\x0bZZZ\\x15AAA\\x0bNNN\\x0c\n\n/\u00ac.*$/s\n    >\\x15\\x0dX\\x15Y\\x15\\x0bZZZ\\x15AAA\\x0bNNN\\x0c\n\n/\\s/\n    \\x25\\\n    \\x40\\\n    \\x41\\\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TSTINE11": {"ttr": 5125, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "\n\n/-- Of all tests in tstin14, the only ones relevant are those that\ncaused some issues. --/\n\n/\u00dd\\p{L}\u00a8/8BM\n\n/\u00dd\\p{L}\u00a8/BM\n\n/\u00dd\\p{\u00acL}\u00a8/BM\n\n/\u00dd\\P{L}\u00a8/BM\n\n/\u00dd\\P{\u00acL}\u00a8/BM\n\n/\\p{L}/BM\n\n/\\p{L}/B\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TSTINE14": {"ttr": 5127, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "\n/-- This set of tests is run only with the 8-bit library. They do not require\n    UTF-8 or Unicode property support. The file starts with all the tests of\n    the POSIX interface, because that is supported only with the 8-bit library.\n    --/\n\n< forbid 8W\n\n/\\h/SI\n\n/\\v/SI\n\n/\\R/SI\n\n/\u00dd\\h\u00a8/BZ\n    >\\x05<\n    >\\x40<\n    >\\x41<\n    >\\x15<\n    >\\x25<\n    >\\x0b<\n    >\\x0c<\n    >\\x0d<\n\n/\u00dd\\H\u00a8/BZ\n\n/\u00dd\u00ac\\h\u00a8/BZ\n\n/\u00dd\\v\u00a8/BZ\n    >\\x05<\n    >\\x40<\n    >\\x41<\n    >\\x15<\n    >\\x25<\n    >\\x0b<\n    >\\x0c<\n    >\\x0d<\n\n/\u00dd\\V\u00a8/BZ\n\n/\u00dd\\x0a\\V\u00a8/BZ\n\n/\u00dd\\R\u00a8/BZ\n\n/\u00dd\\s\u00a8/BZ\n\n/\u00dd\u00dd:space:\u00a8\u00a8/BZ\n\n/\u00dd\\w\u00a8/BZ\n\n/\u00dd\u00dd:alpha:\u00a8\u00a8/BZ\n\n/\u00dda-z\u00a8/BZ\n\n/\u00ddA-Z\u00a8/BZ\n\n/\u00dda-zA-Z\u00a8/BZ\n\n/\u00dda-Z\u00a8/BZ\n\n/\u00dd\u00dd!xxx!\u00a8\u00a8/BZ\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TSTINE2": {"ttr": 5129, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "\n/-- This set of tests is not Perl-compatible. It checks on special features\n    of PCRE's API, error diagnostics, and the compiled code of some patterns.\n    It also checks the non-Perl syntax the PCRE supports (Python, .NET,\n    Oniguruma). Finally, there are some tests where PCRE and Perl differ,\n    either because PCRE can't be compatible, or there is a possible Perl\n    bug.\n\n    NOTE: This is a non-UTF set of tests. When UTF support is needed, use\n    test 5, and if Unicode Property Support is needed, use test 7. --/\n\n< forbid 8W\n\n/abc(?C)def/I\n    \\x83\\x0\\x81bcdef\n\n/\u00ac.*$/s\n    \\x83\\x0\\x81bcdef\n\n/abc/IS>SAVED.REGEX0\n<SAVED.REGEX0\n    abc\n    ** Failers\n    bca\n\n\n/abc/ISS>SAVED.REGEX1\n<SAVED.REGEX1\n    abc\n    ** Failers\n    bca\n\n/abc/IFS>SAVED.REGEX2\n<SAVED.REGEX2\n    abc\n    ** Failers\n    bca\n\n/abc/IFSS>SAVED.REGEX3\n<SAVED.REGEX3\n    abc\n    ** Failers\n    bca\n\n/(a|b)/IS>SAVED.REGEX4\n<SAVED.REGEX4\n    abc\n    ** Failers\n    def\n\n/(a|b)/ISS>SAVED.REGEX5\n<SAVED.REGEX5\n    abc\n    ** Failers\n    def\n\n/(a|b)/ISF>SAVED.REGEX6\n<SAVED.REGEX6\n    abc\n    ** Failers\n    def\n\n/(a|b)/ISSF>SAVED.REGEX7\n<SAVED.REGEX7\n    abc\n    ** Failers\n    def\n\n\n/\u00aca.b/<lf>\n    a\\rb\n    a\\nb\\<cr>\n    a\\x25b\\<anycrlf>\n    ** Failers\n    a\\nb\n    a\\nb\\<any>\n    a\\rb\\<cr>\n    a\\rb\\<any>\n    a\\x25b\\<any>\n    a\\rb\\<anycrlf>\n\n/\u00ac.*$/s\n    a\\x25b\\<any>\n\n/-- x25 is NEL.  I do not know how to mimic it --/\n\n/\u00acabc./mgx<any>\n    abc1 \\x15abc2 \\x0babc3xx \\x0cabc4 \\x0dabc5xx \\x0d\\x15abc6 \\x25abc7 JUNK\n\n/abc.$/mgx<any>\n    abc1\\x15 abc2\\x0b abc3\\x0c abc4\\x0d abc5\\x0d\\x0a abc6\\x25 abc7 abc9\n\n/a/<cr><any>\n\n/a/<any><crlf>\n\n/\u00aca\\Rb/<bsr_unicode>\n    a\\nb\n    a\\rb\n    a\\r\\nb\n    a\\x0bb\n    a\\x0cb\n    a\\x25b\n    ** Failers\n    a\\n\\rb\n\n/\u00aca\\R*b/<bsr_unicode>\n    ab\n    a\\nb\n    a\\rb\n    a\\r\\nb\n    a\\x0bb\n    a\\x0cb\n    a\\x25b\n    a\\n\\rb\n    a\\n\\r\\x25\\x0cb\n\n/\u00ac.*$/s\n    a\\n\\r\\x25\\x0cb\n\n/\u00aca\\R+b/<bsr_unicode>\n    a\\nb\n    a\\rb\n    a\\r\\nb\n    a\\x0bb\n    a\\x0cb\n    a\\x25b\n    a\\n\\rb\n    a\\n\\r\\x25\\x0cb\n    ** Failers\n    ab\n\n/\u00aca\\R{1,3}b/<bsr_unicode>\n    a\\nb\n    a\\n\\rb\n    a\\n\\r\\x25b\n    a\\r\\n\\r\\nb\n    a\\r\\n\\r\\n\\r\\nb\n    a\\n\\r\\n\\rb\n    a\\n\\n\\r\\nb\n    ** Failers\n    a\\n\\n\\n\\rb\n    a\\r\n\n/abc.$/mgx<anycrlf>\n    abc1\\x15 abc2\\x0b abc3\\x0c abc4\\x0d abc5\\x0d\\x15 abc6\\x25 abc9\n\n/\\V+\\x15/BZ\n\n/a\\Rb/I<bsr_unicode>\n    a\\rb\n    a\\nb\n    a\\r\\nb\n    a\\x25b\n    a\\x0bb\n    ** Failers\n    a\\x25b\\<bsr_anycrlf>\n    a\\x0bb\\<bsr_anycrlf>\n\n/a\\R?b/I<bsr_unicode>\n    a\\rb\n    a\\nb\n    a\\r\\nb\n    a\\x25b\n    a\\x0bb\n    ** Failers\n    a\\x25b\\<bsr_anycrlf>\n    a\\x0bb\\<bsr_anycrlf>\n\n/(*BSR_UNICODE)a\\Rb/I\n    a\\x25b\n\n/(*CRLF)(*BSR_UNICODE)a\\Rb/I\n    a\\x25b\n\n/(?&word)(?&element)(?(DEFINE)(?<element><\u00dd\u00acm\u00a8\u00dd\u00ac>\u00a8>\u00dd\u00ac<\u00a8)(?<word>\\w*+))/BZ\n\n/(?&word)(?&element)(?(DEFINE)(?<element><\u00dd\u00ac\\d\u00a8\u00dd\u00ac>\u00a8>\u00dd\u00ac<\u00a8)(?<word>\\w*+))/BZ\n\n/\\s*\\R/BZ\n    \\x40\\x15\n    \\x40\\x0d\n    \\x40\\x0d\\x15\n\n/\\S*\\R/BZ\n    a\\x15\n\n/X\\H+\\R/BZ\n    X\\x0d\\x15\n\n/\u00aca\\xc1z/<JS>\n    aAz\n    *** Failers\n    axc1z\n\n/\u00aca\u00ddm\\xc1\u00a8z/<JS>\n    aAz\n\n/\u00aca\\x1z/<JS>\n    ax1z\n\n/\u00aca\\u0041z/<JS>\n    aAz\n    *** Failers\n    au0041z\n\n/\u00dda-\u00dd!xxx!\u00a8\u00a8+/\n    A\u00a8\u00a8\u00a8\n\n/\u00ddA-\u00dd!xxx!\u00a8\u00a8+/\n    A\u00a8\u00a8\u00a8\n\n/\u00dd\u00dd!xxx!\u00a8-a\u00a8+/\n    A\u00a8\u00a8\u00a8\n\n/\u00dd\u00dd!xxx!\u00a8-A/\n    A\u00a8\u00a8\u00a8\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TSTIN1": {"ttr": 513, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "TSTIN15": {"ttr": 1028, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "\n# These are:\n#\n# (1) Tests of the match-limiting features. The results are different for\n# interpretive or JIT matching, so this test should not be run with JIT. The\n# same tests are run using JIT in test 17.\n\n# (2) Other tests that must not be run with JIT.\n\n/(a+)*zz/I\n  aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaazzbbbbbb\\=find_limits\n  aaaaaaaaaaaaaz\\=find_limits\n\n!((?:\\s|//.*\\\\n|/\u00dd*\u00a8(?:\\\\n|.)*?\u00dd*\u00a8/)*)!I\n   /* this is a C style comment */\\=find_limits\n\n/\u00ac(?>a)++/\n    aa\\=find_limits\n    aaaaaaaaa\\=find_limits\n\n/(a)(?1)++/\n    aa\\=find_limits\n    aaaaaaaaa\\=find_limits\n\n/a(?:.)*?a/ims\n    abbbbbbbbbbbbbbbbbbbbba\\=find_limits\n\n/a(?:.(*THEN))*?a/ims\n    abbbbbbbbbbbbbbbbbbbbba\\=find_limits\n\n/a(?:.(*THEN:ABC))*?a/ims\n    abbbbbbbbbbbbbbbbbbbbba\\=find_limits\n\n/\u00ac(?>a+)(?>b+)(?>c+)(?>d+)(?>e+)/\n     aabbccddee\\=find_limits\n\n/\u00ac(?>(a+))(?>(b+))(?>(c+))(?>(d+))(?>(e+))/\n     aabbccddee\\=find_limits\n\n/\u00ac(?>(a+))(?>b+)(?>(c+))(?>d+)(?>(e+))/\n     aabbccddee\\=find_limits\n\n/(*LIMIT_MATCH=12bc)abc/\n\n/(*LIMIT_MATCH=4294967290)abc/\n\n/(*LIMIT_DEPTH=4294967280)abc/I\n\n/(a+)*zz/\n\\= Expect no match\n    aaaaaaaaaaaaaz\n\\= Expect limit exceeded\n    aaaaaaaaaaaaaz\\=match_limit=3000\n\n/(a+)*zz/\n\\= Expect limit exceeded\n    aaaaaaaaaaaaaz\\=depth_limit=10\n\n/(*LIMIT_MATCH=3000)(a+)*zz/I\n\\= Expect limit exceeded\n    aaaaaaaaaaaaaz\n\\= Expect limit exceeded\n    aaaaaaaaaaaaaz\\=match_limit=60000\n\n/(*LIMIT_MATCH=60000)(*LIMIT_MATCH=3000)(a+)*zz/I\n\\= Expect limit exceeded\n    aaaaaaaaaaaaaz\n\n/(*LIMIT_MATCH=60000)(a+)*zz/I\n\\= Expect no match\n    aaaaaaaaaaaaaz\n\\= Expect limit exceeded\n    aaaaaaaaaaaaaz\\=match_limit=3000\n\n/(*LIMIT_DEPTH=10)(a+)*zz/I\n\\= Expect limit exceeded\n    aaaaaaaaaaaaaz\n\\= Expect limit exceeded\n    aaaaaaaaaaaaaz\\=depth_limit=1000\n\n/(*LIMIT_DEPTH=10)(*LIMIT_DEPTH=1000)(a+)*zz/I\n\\= Expect no match\n    aaaaaaaaaaaaaz\n\n/(*LIMIT_DEPTH=1000)(a+)*zz/I\n\\= Expect no match\n    aaaaaaaaaaaaaz\n\\= Expect limit exceeded\n    aaaaaaaaaaaaaz\\=depth_limit=10\n\n# These three have infinitely nested recursions.\n\n/((?2))((?1))/\n    abc\n\n/((?(R2)a+|(?1)b))()/\n    aaaabcde\n\n/(?(R)a*(?1)|((?R))b)/\n    aaaabcde\n\n# The allusedtext modifier does not work with JIT, which does not maintain\n# the leftchar/rightchar data.\n\n/abc(?=xyz)/allusedtext\n    abcxyzpqr\n    abcxyzpqr\\=aftertext\n\n/(?<=pqr)abc(?=xyz)/allusedtext\n    xyzpqrabcxyzpqr\n    xyzpqrabcxyzpqr\\=aftertext\n\n/a\\b/\n    a.\\=allusedtext\n    a\\=allusedtext\n\n/abc\\Kxyz/\n    abcxyz\\=allusedtext\n\n/abc(?=xyz(*ACCEPT))/\n    abcxyz\\=allusedtext\n\n/abc(?=abcde)(?=ab)/allusedtext\n    abcabcdefg\n\n#subject allusedtext\n\n/(?<=abc)123/\n    xyzabc123pqr\n    xyzabc12\\=ps\n    xyzabc12\\=ph\n\n/\\babc\\b/\n    +++abc+++\n    +++ab\\=ps\n    +++ab\\=ph\n\n/(?<=abc)def/\n    abc\\=ph\n\n/(?<=123)(*MARK:xx)abc/mark\n    xxxx123a\\=ph\n    xxxx123a\\=ps\n\n/(?<=(?<=a)b)c.*/I\n    abc\\=ph\n\\= Expect no match\n    xbc\\=ph\n\n/(?<=ab)c.*/I\n    abc\\=ph\n\\= Expect no match\n    xbc\\=ph\n\n/abc(?<=bc)def/\n    xxxabcd\\=ph\n\n/(?<=ab)cdef/\n    xxabcd\\=ph\n\n/(?<=(?<=(?<=a)b)c)./I\n    123abcXYZ\n\n/(?<=ab(cd(?<=...)))./I\n    abcdX\n\n/(?<=ab((?<=...)cd))./I\n    ZabcdX\n\n/(?<=((?<=(?<=ab).))(?1)(?1))./I\n    abxZ\n\n#subject\n# -------------------------------------------------------------------\n\n# These tests provoke recursion loops, which give a different error message\n# when JIT is used.\n\n/(?R)/I\n    abcd\n\n/(a|(?R))/I\n    abcd\n    defg\n\n/(ab|(bc|(de|(?R))))/I\n    abcd\n    fghi\n\n/(ab|(bc|(de|(?1))))/I\n    abcd\n    fghi\n\n/x(ab|(bc|(de|(?1)x)x)x)/I\n    xab123\n    xfghi\n\n/(?!\\w)(?R)/\n    abcd\n    =abc\n\n/(?=\\w)(?R)/\n    =abc\n    abcd\n\n/(?<!\\w)(?R)/\n    abcd\n\n/(?<=\\w)(?R)/\n    abcd\n\n/(a+|(?R)b)/\n    aaa\n    bbb\n\n/\u00dd\u00ac\\xff\u00a8((?1))/BI\n    abcd\n\n# These tests don't behave the same with JIT\n\n/\\w+(?C1)/BI,no_auto_possess\n    abc\\=callout_fail=1\n\n/(*NO_AUTO_POSSESS)\\w+(?C1)/BI\n    abc\\=callout_fail=1\n\n# This test breaks the JIT stack limit\n\n/(|\u00a8+){2,2452}/\n    (|\u00a8+){2,2452}\n\n/(*LIMIT_HEAP=21)\\\u00dd(a)\u00a8{60}/expand\n    \\\u00dda\u00a8{60}\n\n/b(?<!ax)(?!cx)/allusedtext\n    abc\n    abcz\n\n# End of testinput15\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TSTIN16": {"ttr": 1030, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "\n# This test is run only when JIT support is not available. It checks that an\n# attempt to use it has the expected behaviour. It also tests things that\n# are different without JIT.\n\n/abc/I,jit,jitverify\n\n/a*/I\n\n# End of testinput16\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TSTIN18": {"ttr": 1032, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "\n# This set of tests is run only with the 8-bit library. It tests the POSIX\n# interface, which is supported only with the 8-bit library. This test should\n# not be run with JIT (which is not available for the POSIX interface).\n\n#forbid_utf\n#pattern posix\n\n# Test some invalid options\n\n/abc/auto_callout\n\n/abc/\n   abc\\=find_limits\n\n/abc/\n  abc\\=partial_hard\n\n/a(())bc/parens_nest_limit=1\n\n/abc/allow_surrogate_escapes,max_pattern_length=2\n\n# Real tests\n\n/abc/\n    abc\n\n/\u00acabc|def/\n    abcdef\n    abcdef\\=notbol\n\n/.*((abc)$|(def))/\n    defabc\n    defabc\\=noteol\n\n/the quick brown fox/\n    the quick brown fox\n\\= Expect no match\n    The Quick Brown Fox\n\n/the quick brown fox/i\n    the quick brown fox\n    The Quick Brown Fox\n\n/(*LF)abc.def/\n\\= Expect no match\n    abc\\ndef\n\n/(*LF)abc$/\n    abc\n    abc\\n\n\n/(abc)\\2/\n\n/(abc\\1)/\n\\= Expect no match\n    abc\n\n/a*(b+)(z)(z)/\n    aaaabbbbzzzz\n    aaaabbbbzzzz\\=ovector=0\n    aaaabbbbzzzz\\=ovector=1\n    aaaabbbbzzzz\\=ovector=2\n\n/(*ANY)ab.cd/\n    ab-cd\n    ab=cd\n\\= Expect no match\n    ab\\ncd\n\n/ab.cd/s\n    ab-cd\n    ab=cd\n    ab\\ncd\n\n/a(b)c/posix_nosub\n    abc\n\n/a(?P<name>b)c/posix_nosub\n    abc\n\n/(a)\\1/posix_nosub\n    zaay\n\n/a?|b?/\n    abc\n\\= Expect no match\n    ddd\\=notempty\n\n/\\w+A/\n   CDAAAAB\n\n/\\w+A/ungreedy\n   CDAAAAB\n\n/\\Biss\\B/I,aftertext\n    Mississippi\n\n/abc/\\\n\n\"(?(?C)\"\n\n\"(?(?C))\"\n\n/abcd/substitute_extended\n\n/\\\u00ddA\u00a8{1000000}**/expand,regerror_buffsize=31\n\n/\\\u00ddA\u00a8{1000000}**/expand,regerror_buffsize=32\n\n//posix_nosub\n    \\=offset=70000\n\n/(?=(a\\K))/\n    a\n\n/\u00acd(e)$/posix\n    acdef\\=posix_startend=2:4\n    acde\\=posix_startend=2\n\\= Expect no match\n    acdef\n    acdef\\=posix_startend=2\n\n/\u00aca\\x{00}b$/posix\n    a\\x{00}b\\=posix_startend=0:3\n\n/\"A\" 00 \"B\"/hex\n    A\\x{00}B\\=posix_startend=0:3\n\n/ABC/use_length\n    ABC\n\n/a\\b(c/literal,posix\n    a\\\\b(c\n\n/a\\b(c/literal,posix,dotall\n\n/((a)(b)?(c))/posix\n    123ace\n    123ace\\=posix_startend=2:6\n\n# End of testdata/testinput18\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TSTIN2": {"ttr": 1281, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "TSTIN20": {"ttr": 1795, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "\n# This set of tests exercises the serialization/deserialization and code copy\n# functions in the library. It does not use UTF or JIT.\n\n#forbid_utf\n\n# Compile several patterns, push them onto the stack, and then write them\n# all to a file.\n\n#pattern push\n\n/(?<NAME>(?&NAME_PAT))\\s+(?<ADDR>(?&ADDRESS_PAT))\n  (?(DEFINE)\n  (?<NAME_PAT>\u00dda-z\u00a8+)\n  (?<ADDRESS_PAT>\\d+)\n  )/x\n/\u00ac(?:((.)(?1)\\2|)|((.)(?3)\\4|.))$/i\n\n#save testsaved1\n\n# Do it again for some more patterns.\n\n/(*MARK:A)(*SKIP:B)(C|X)/mark\n/(?:(?<n>foo)|(?<n>bar))\\k<n>/dupnames\n\n#save testsaved2\n#pattern -push\n\n# Reload the patterns, then pop them one by one and check them.\n\n#load testsaved1\n#load testsaved2\n\n#pop info\n    foofoo\n    barbar\n\n#pop mark\n    C\n\\= Expect no match\n    D\n\n#pop\n    AmanaplanacanalPanama\n\n#pop info\n    metcalfe 33\n\n# Check for an error when different tables are used.\n\n/abc/push,tables=1\n/xyz/push,tables=2\n#save testsaved1\n\n#pop\n    xyz\n\n#pop\n    abc\n\n#pop should give an error\n    pqr\n\n/abcd/pushcopy\n    abcd\n\n#pop\n    abcd\n\n#pop should give an error\n\n/abcd/push\n#popcopy\n    abcd\n\n#pop\n    abcd\n\n/abcd/push\n#save testsaved1\n#pop should give an error\n\n#load testsaved1\n#popcopy\n    abcd\n\n#pop\n    abcd\n\n#pop should give an error\n\n/abcd/pushtablescopy\n    abcd\n\n#popcopy\n    abcd\n\n#pop\n    abcd\n\n# Must only specify one of these\n\n//push,pushcopy\n\n//push,pushtablescopy\n\n//pushcopy,pushtablescopy\n\n# End of testinput20\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TSTIN21": {"ttr": 1797, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "\n# These are tests of \\C that do not involve UTF. They are not run when \\C is\n# disabled by compiling with --enable-never-backslash-C.\n\n/\\C+\\D \\C+\\d \\C+\\S \\C+\\s \\C+\\W \\C+\\w \\C+. \\C+\\R \\C+\\H \\C+\\h \\C+\\V \\C+\\v \\C+\\Z \\C+\\z \\C+$/Bx\n\n/\\D+\\C \\d+\\C \\S+\\C \\s+\\C \\W+\\C \\w+\\C .+\\C \\R+\\C \\H+\\C \\h+\\C \\V+\\C \\v+\\C a+\\C \\n+\\C \\C+\\C/Bx\n\n/ab\\Cde/never_backslash_c\n\n/ab\\Cde/info\n    abXde\n\n/(?<=ab\\Cde)X/\n    abZdeX\n\n# End of testinput21\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TSTIN9": {"ttr": 1799, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "\n# This set of tests is run only with the 8-bit library. They must not require\n# UTF-8 or Unicode property support. */\n\n#forbid_utf\n#newline_default lf any anycrlf\n\n/ab/\n\\= Expect error message (too big char) and no match\n    A\\x{123}B\n    A\\o{443}B\n\n/\\x{100}/I\n\n/\\o{400}/I\n\n/  (?: \u00dd\\040\\t\u00a8 |  \\(\n(?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  |  \\( (?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  )* \\)  )*\n\\)  )*                          # optional leading comment\n(?:    (?:\n\u00dd\u00ac(\\040)<>@,;:\".\\\\\\\u00dd\\\u00a8\\000-\\037\\x80-\\xff\u00a8+    # some number of atom characters...\n(?!\u00dd\u00ac(\\040)<>@,;:\".\\\\\\\u00dd\\\u00a8\\000-\\037\\x80-\\xff\u00a8) # ..not followed by something that could be part of an atom\n|\n\" (?:                      # opening quote...\n\u00dd\u00ac\\\\\\x80-\\xff\\n\\015\"\u00a8                #   Anything except backslash and quote\n|                     #    or\n\\\\ \u00dd\u00ac\\x80-\\xff\u00a8           #   Escaped something (something != CR)\n)* \"  # closing quote\n)                    # initial word\n(?:  (?: \u00dd\\040\\t\u00a8 |  \\(\n(?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  |  \\( (?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  )* \\)  )*\n\\)  )*  \\.  (?: \u00dd\\040\\t\u00a8 |  \\(\n(?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  |  \\( (?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  )* \\)  )*\n\\)  )*   (?:\n\u00dd\u00ac(\\040)<>@,;:\".\\\\\\\u00dd\\\u00a8\\000-\\037\\x80-\\xff\u00a8+    # some number of atom characters...\n(?!\u00dd\u00ac(\\040)<>@,;:\".\\\\\\\u00dd\\\u00a8\\000-\\037\\x80-\\xff\u00a8) # ..not followed by something that could be part of an atom\n|\n\" (?:                      # opening quote...\n\u00dd\u00ac\\\\\\x80-\\xff\\n\\015\"\u00a8                #   Anything except backslash and quote\n|                     #    or\n\\\\ \u00dd\u00ac\\x80-\\xff\u00a8           #   Escaped something (something != CR)\n)* \"  # closing quote\n)  )* # further okay, if led by a period\n(?: \u00dd\\040\\t\u00a8 |  \\(\n(?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  |  \\( (?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  )* \\)  )*\n\\)  )*  @  (?: \u00dd\\040\\t\u00a8 |  \\(\n(?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  |  \\( (?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  )* \\)  )*\n\\)  )*    (?:\n\u00dd\u00ac(\\040)<>@,;:\".\\\\\\\u00dd\\\u00a8\\000-\\037\\x80-\\xff\u00a8+    # some number of atom characters...\n(?!\u00dd\u00ac(\\040)<>@,;:\".\\\\\\\u00dd\\\u00a8\\000-\\037\\x80-\\xff\u00a8) # ..not followed by something that could be part of an atom\n|   \\\u00dd                         # \u00dd\n(?: \u00dd\u00ac\\\\\\x80-\\xff\\n\\015\\\u00dd\\\u00a8\u00a8 |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  )*    #    stuff\n\\\u00a8                        #           \u00a8\n)                           # initial subdomain\n(?:                                  #\n(?: \u00dd\\040\\t\u00a8 |  \\(\n(?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  |  \\( (?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  )* \\)  )*\n\\)  )*  \\.                        # if led by a period...\n(?: \u00dd\\040\\t\u00a8 |  \\(\n(?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  |  \\( (?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  )* \\)  )*\n\\)  )*   (?:\n\u00dd\u00ac(\\040)<>@,;:\".\\\\\\\u00dd\\\u00a8\\000-\\037\\x80-\\xff\u00a8+    # some number of atom characters...\n(?!\u00dd\u00ac(\\040)<>@,;:\".\\\\\\\u00dd\\\u00a8\\000-\\037\\x80-\\xff\u00a8) # ..not followed by something that could be part of an atom\n|   \\\u00dd                         # \u00dd\n(?: \u00dd\u00ac\\\\\\x80-\\xff\\n\\015\\\u00dd\\\u00a8\u00a8 |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  )*    #    stuff\n\\\u00a8                        #           \u00a8\n)                     #   ...further okay\n)*\n# address\n|                     #  or\n(?:\n\u00dd\u00ac(\\040)<>@,;:\".\\\\\\\u00dd\\\u00a8\\000-\\037\\x80-\\xff\u00a8+    # some number of atom characters...\n(?!\u00dd\u00ac(\\040)<>@,;:\".\\\\\\\u00dd\\\u00a8\\000-\\037\\x80-\\xff\u00a8) # ..not followed by something that could be part of an atom\n|\n\" (?:                      # opening quote...\n\u00dd\u00ac\\\\\\x80-\\xff\\n\\015\"\u00a8                #   Anything except backslash and quote\n|                     #    or\n\\\\ \u00dd\u00ac\\x80-\\xff\u00a8           #   Escaped something (something != CR)\n)* \"  # closing quote\n)             # one word, optionally followed by....\n(?:\n\u00dd\u00ac()<>@,;:\".\\\\\\\u00dd\\\u00a8\\x80-\\xff\\000-\\010\\012-\\037\u00a8  |  # atom and space parts, or...\n\\(\n(?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  |  \\( (?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  )* \\)  )*\n\\)       |  # comments, or...\n\n\" (?:                      # opening quote...\n\u00dd\u00ac\\\\\\x80-\\xff\\n\\015\"\u00a8                #   Anything except backslash and quote\n|                     #    or\n\\\\ \u00dd\u00ac\\x80-\\xff\u00a8           #   Escaped something (something != CR)\n)* \"  # closing quote\n# quoted strings\n)*\n<  (?: \u00dd\\040\\t\u00a8 |  \\(\n(?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  |  \\( (?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  )* \\)  )*\n\\)  )*                     # leading <\n(?:  @  (?: \u00dd\\040\\t\u00a8 |  \\(\n(?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  |  \\( (?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  )* \\)  )*\n\\)  )*    (?:\n\u00dd\u00ac(\\040)<>@,;:\".\\\\\\\u00dd\\\u00a8\\000-\\037\\x80-\\xff\u00a8+    # some number of atom characters...\n(?!\u00dd\u00ac(\\040)<>@,;:\".\\\\\\\u00dd\\\u00a8\\000-\\037\\x80-\\xff\u00a8) # ..not followed by something that could be part of an atom\n|   \\\u00dd                         # \u00dd\n(?: \u00dd\u00ac\\\\\\x80-\\xff\\n\\015\\\u00dd\\\u00a8\u00a8 |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  )*    #    stuff\n\\\u00a8                        #           \u00a8\n)                           # initial subdomain\n(?:                                  #\n(?: \u00dd\\040\\t\u00a8 |  \\(\n(?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  |  \\( (?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  )* \\)  )*\n\\)  )*  \\.                        # if led by a period...\n(?: \u00dd\\040\\t\u00a8 |  \\(\n(?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  |  \\( (?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  )* \\)  )*\n\\)  )*   (?:\n\u00dd\u00ac(\\040)<>@,;:\".\\\\\\\u00dd\\\u00a8\\000-\\037\\x80-\\xff\u00a8+    # some number of atom characters...\n(?!\u00dd\u00ac(\\040)<>@,;:\".\\\\\\\u00dd\\\u00a8\\000-\\037\\x80-\\xff\u00a8) # ..not followed by something that could be part of an atom\n|   \\\u00dd                         # \u00dd\n(?: \u00dd\u00ac\\\\\\x80-\\xff\\n\\015\\\u00dd\\\u00a8\u00a8 |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  )*    #    stuff\n\\\u00a8                        #           \u00a8\n)                     #   ...further okay\n)*\n\n(?:  (?: \u00dd\\040\\t\u00a8 |  \\(\n(?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  |  \\( (?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  )* \\)  )*\n\\)  )*  ,  (?: \u00dd\\040\\t\u00a8 |  \\(\n(?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  |  \\( (?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  )* \\)  )*\n\\)  )*  @  (?: \u00dd\\040\\t\u00a8 |  \\(\n(?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  |  \\( (?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  )* \\)  )*\n\\)  )*    (?:\n\u00dd\u00ac(\\040)<>@,;:\".\\\\\\\u00dd\\\u00a8\\000-\\037\\x80-\\xff\u00a8+    # some number of atom characters...\n(?!\u00dd\u00ac(\\040)<>@,;:\".\\\\\\\u00dd\\\u00a8\\000-\\037\\x80-\\xff\u00a8) # ..not followed by something that could be part of an atom\n|   \\\u00dd                         # \u00dd\n(?: \u00dd\u00ac\\\\\\x80-\\xff\\n\\015\\\u00dd\\\u00a8\u00a8 |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  )*    #    stuff\n\\\u00a8                        #           \u00a8\n)                           # initial subdomain\n(?:                                  #\n(?: \u00dd\\040\\t\u00a8 |  \\(\n(?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  |  \\( (?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  )* \\)  )*\n\\)  )*  \\.                        # if led by a period...\n(?: \u00dd\\040\\t\u00a8 |  \\(\n(?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  |  \\( (?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  )* \\)  )*\n\\)  )*   (?:\n\u00dd\u00ac(\\040)<>@,;:\".\\\\\\\u00dd\\\u00a8\\000-\\037\\x80-\\xff\u00a8+    # some number of atom characters...\n(?!\u00dd\u00ac(\\040)<>@,;:\".\\\\\\\u00dd\\\u00a8\\000-\\037\\x80-\\xff\u00a8) # ..not followed by something that could be part of an atom\n|   \\\u00dd                         # \u00dd\n(?: \u00dd\u00ac\\\\\\x80-\\xff\\n\\015\\\u00dd\\\u00a8\u00a8 |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  )*    #    stuff\n\\\u00a8                        #           \u00a8\n)                     #   ...further okay\n)*\n)* # further okay, if led by comma\n:                                # closing colon\n(?: \u00dd\\040\\t\u00a8 |  \\(\n(?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  |  \\( (?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  )* \\)  )*\n\\)  )*  )? #       optional route\n(?:\n\u00dd\u00ac(\\040)<>@,;:\".\\\\\\\u00dd\\\u00a8\\000-\\037\\x80-\\xff\u00a8+    # some number of atom characters...\n(?!\u00dd\u00ac(\\040)<>@,;:\".\\\\\\\u00dd\\\u00a8\\000-\\037\\x80-\\xff\u00a8) # ..not followed by something that could be part of an atom\n|\n\" (?:                      # opening quote...\n\u00dd\u00ac\\\\\\x80-\\xff\\n\\015\"\u00a8                #   Anything except backslash and quote\n|                     #    or\n\\\\ \u00dd\u00ac\\x80-\\xff\u00a8           #   Escaped something (something != CR)\n)* \"  # closing quote\n)                    # initial word\n(?:  (?: \u00dd\\040\\t\u00a8 |  \\(\n(?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  |  \\( (?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  )* \\)  )*\n\\)  )*  \\.  (?: \u00dd\\040\\t\u00a8 |  \\(\n(?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  |  \\( (?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  )* \\)  )*\n\\)  )*   (?:\n\u00dd\u00ac(\\040)<>@,;:\".\\\\\\\u00dd\\\u00a8\\000-\\037\\x80-\\xff\u00a8+    # some number of atom characters...\n(?!\u00dd\u00ac(\\040)<>@,;:\".\\\\\\\u00dd\\\u00a8\\000-\\037\\x80-\\xff\u00a8) # ..not followed by something that could be part of an atom\n|\n\" (?:                      # opening quote...\n\u00dd\u00ac\\\\\\x80-\\xff\\n\\015\"\u00a8                #   Anything except backslash and quote\n|                     #    or\n\\\\ \u00dd\u00ac\\x80-\\xff\u00a8           #   Escaped something (something != CR)\n)* \"  # closing quote\n)  )* # further okay, if led by a period\n(?: \u00dd\\040\\t\u00a8 |  \\(\n(?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  |  \\( (?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  )* \\)  )*\n\\)  )*  @  (?: \u00dd\\040\\t\u00a8 |  \\(\n(?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  |  \\( (?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  )* \\)  )*\n\\)  )*    (?:\n\u00dd\u00ac(\\040)<>@,;:\".\\\\\\\u00dd\\\u00a8\\000-\\037\\x80-\\xff\u00a8+    # some number of atom characters...\n(?!\u00dd\u00ac(\\040)<>@,;:\".\\\\\\\u00dd\\\u00a8\\000-\\037\\x80-\\xff\u00a8) # ..not followed by something that could be part of an atom\n|   \\\u00dd                         # \u00dd\n(?: \u00dd\u00ac\\\\\\x80-\\xff\\n\\015\\\u00dd\\\u00a8\u00a8 |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  )*    #    stuff\n\\\u00a8                        #           \u00a8\n)                           # initial subdomain\n(?:                                  #\n(?: \u00dd\\040\\t\u00a8 |  \\(\n(?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  |  \\( (?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  )* \\)  )*\n\\)  )*  \\.                        # if led by a period...\n(?: \u00dd\\040\\t\u00a8 |  \\(\n(?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  |  \\( (?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  )* \\)  )*\n\\)  )*   (?:\n\u00dd\u00ac(\\040)<>@,;:\".\\\\\\\u00dd\\\u00a8\\000-\\037\\x80-\\xff\u00a8+    # some number of atom characters...\n(?!\u00dd\u00ac(\\040)<>@,;:\".\\\\\\\u00dd\\\u00a8\\000-\\037\\x80-\\xff\u00a8) # ..not followed by something that could be part of an atom\n|   \\\u00dd                         # \u00dd\n(?: \u00dd\u00ac\\\\\\x80-\\xff\\n\\015\\\u00dd\\\u00a8\u00a8 |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  )*    #    stuff\n\\\u00a8                        #           \u00a8\n)                     #   ...further okay\n)*\n#       address spec\n(?: \u00dd\\040\\t\u00a8 |  \\(\n(?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  |  \\( (?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  )* \\)  )*\n\\)  )*  > #                  trailing >\n# name and address\n)  (?: \u00dd\\040\\t\u00a8 |  \\(\n(?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  |  \\( (?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  )* \\)  )*\n\\)  )*                       # optional trailing comment\n/Ix\n\n/\\h/I\n\n/\\H/I\n\n/\\v/I\n\n/\\V/I\n\n/\\R/I\n\n/\u00dd\\h\u00a8/B\n    >\\x09<\n\n/\u00dd\\h\u00a8+/B\n    >\\x09\\x20\\xa0<\n\n/\u00dd\\v\u00a8/B\n\n/\u00dd\\H\u00a8/B\n\n/\u00dd\u00ac\\h\u00a8/B\n\n/\u00dd\\V\u00a8/B\n\n/\u00dd\\x0a\\V\u00a8/B\n\n/\\777/I\n\n/(*:0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456\n789ABCDEF)XX/mark\n    XX\n\n/(*:0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456\n789ABCDEF)XX/mark,alt_verbnames\n    XX\n\n/(*:0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456\n789ABCDE)XX/mark\n    XX\n\n/(*:0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456\n789ABCDE)XX/mark,alt_verbnames\n    XX\n\n/\\u0100/alt_bsux,allow_empty_class,match_unset_backref,dupnames\n\n/\u00dd\\u0100-\\u0200\u00a8/alt_bsux,allow_empty_class,match_unset_backref,dupnames\n\n/\u00dd\u00ac\\x00-a\u00a8{12,}\u00dd\u00acb-\\xff\u00a8*/B\n\n/\u00dd\u00ac\\s\u00a8*\\s* \u00dd\u00ac\\W\u00a8+\\W+ \u00dd\u00ac\\d\u00a8*?\\d0 \u00dd\u00ac\\d\\w\u00a8{4,6}?\\w*A/B\n\n/(*MARK:a\\x{100}b)z/alt_verbnames\n\n/(*:*++++++++++++''''''''''''''''''''+''+++'+++x+++++++++++++++++++++++++++++++++++(++++++++++++++++++++:++++++%++:''''''''''''''''''''''''+++++++++++++++++++++++++++++++++++++++++++++++++++++-++++++++k+++++++''''+++'+++++++++++++++++++++++''''+++++++\n+++++':\u00c6\u00bf)/\n\n# End of testinput9\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TSTOO1": {"ttr": 5131, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "TSTOO15": {"ttr": 41506, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "PCRE2 version 10.35 2020-05-09\n# These are:\n#\n# (1) Tests of the match-limiting features. The results are different for\n# interpretive or JIT matching, so this test should not be run with JIT. The\n# same tests are run using JIT in test 17.\n\n# (2) Other tests that must not be run with JIT.\n\n/(a+)*zz/I\nCapture group count = 1\nStarting code units: a z\nLast code unit = 'z'\nSubject length lower bound = 2\n  aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaazzbbbbbb\\=find_limits\nMinimum heap limit = 0\nMinimum match limit = 7\nMinimum depth limit = 7\n 0: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaazz\n 1: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n  aaaaaaaaaaaaaz\\=find_limits\nMinimum heap limit = 0\nMinimum match limit = 20481\nMinimum depth limit = 30\nNo match\n\n!((?:\\s|//.*\\\\n|/\u00dd*\u00a8(?:\\\\n|.)*?\u00dd*\u00a8/)*)!I\nCapture group count = 1\nMay match empty string\nSubject length lower bound = 0\n   /* this is a C style comment */\\=find_limits\nMinimum heap limit = 0\nMinimum match limit = 64\nMinimum depth limit = 7\n 0: /* this is a C style comment */\n 1: /* this is a C style comment */\n\n/\u00ac(?>a)++/\n    aa\\=find_limits\nMinimum heap limit = 0\nMinimum match limit = 5\nMinimum depth limit = 3\n 0: aa\n    aaaaaaaaa\\=find_limits\nMinimum heap limit = 0\nMinimum match limit = 12\nMinimum depth limit = 3\n 0: aaaaaaaaa\n\n/(a)(?1)++/\n    aa\\=find_limits\nMinimum heap limit = 0\nMinimum match limit = 7\nMinimum depth limit = 5\n 0: aa\n 1: a\n    aaaaaaaaa\\=find_limits\nMinimum heap limit = 0\nMinimum match limit = 21\nMinimum depth limit = 5\n 0: aaaaaaaaa\n 1: a\n\n/a(?:.)*?a/ims\n    abbbbbbbbbbbbbbbbbbbbba\\=find_limits\nMinimum heap limit = 0\nMinimum match limit = 24\nMinimum depth limit = 3\n 0: abbbbbbbbbbbbbbbbbbbbba\n\n/a(?:.(*THEN))*?a/ims\n    abbbbbbbbbbbbbbbbbbbbba\\=find_limits\nMinimum heap limit = 0\nMinimum match limit = 66\nMinimum depth limit = 45\n 0: abbbbbbbbbbbbbbbbbbbbba\n\n/a(?:.(*THEN:ABC))*?a/ims\n    abbbbbbbbbbbbbbbbbbbbba\\=find_limits\nMinimum heap limit = 0\nMinimum match limit = 66\nMinimum depth limit = 45\n 0: abbbbbbbbbbbbbbbbbbbbba\n\n/\u00ac(?>a+)(?>b+)(?>c+)(?>d+)(?>e+)/\n     aabbccddee\\=find_limits\nMinimum heap limit = 0\nMinimum match limit = 7\nMinimum depth limit = 7\n 0: aabbccddee\n\n/\u00ac(?>(a+))(?>(b+))(?>(c+))(?>(d+))(?>(e+))/\n     aabbccddee\\=find_limits\nMinimum heap limit = 0\nMinimum match limit = 12\nMinimum depth limit = 12\n 0: aabbccddee\n 1: aa\n 2: bb\n 3: cc\n 4: dd\n 5: ee\n\n/\u00ac(?>(a+))(?>b+)(?>(c+))(?>d+)(?>(e+))/\n     aabbccddee\\=find_limits\nMinimum heap limit = 0\nMinimum match limit = 10\nMinimum depth limit = 10\n 0: aabbccddee\n 1: aa\n 2: cc\n 3: ee\n\n/(*LIMIT_MATCH=12bc)abc/\nFailed: error 160 at offset 17: (*VERB) not recognized or malformed\n\n/(*LIMIT_MATCH=4294967290)abc/\nFailed: error 160 at offset 24: (*VERB) not recognized or malformed\n\n/(*LIMIT_DEPTH=4294967280)abc/I\nCapture group count = 0\nDepth limit = 42\nFirst code unit = 'a'\nLast code unit = 'c'\nSubject length lower bound = 3\n\n/(a+)*zz/\n\\= Expect no match\n    aaaaaaaaaaaaaz\nNo match\n\\= Expect limit exceeded\n    aaaaaaaaaaaaaz\\=match_limit=3000\nFailed: error -47: match limit exceeded\n\n/(a+)*zz/\n\\= Expect limit exceeded\n    aaaaaaaaaaaaaz\\=depth_limit=10\nFailed: error -53: matching depth limit exceeded\n\n/(*LIMIT_MATCH=3000)(a+)*zz/I\nCapture group count = 1\nMatch limit = 3000\nStarting code units: a z\nLast code unit = 'z'\nSubject length lower bound = 2\n\\= Expect limit exceeded\n    aaaaaaaaaaaaaz\nFailed: error -47: match limit exceeded\n\\= Expect limit exceeded\n    aaaaaaaaaaaaaz\\=match_limit=60000\nFailed: error -47: match limit exceeded\n\n/(*LIMIT_MATCH=60000)(*LIMIT_MATCH=3000)(a+)*zz/I\nCapture group count = 1\nMatch limit = 3000\nStarting code units: a z\nLast code unit = 'z'\nSubject length lower bound = 2\n\\= Expect limit exceeded\n    aaaaaaaaaaaaaz\nFailed: error -47: match limit exceeded\n\n/(*LIMIT_MATCH=60000)(a+)*zz/I\nCapture group count = 1\nMatch limit = 60000\nStarting code units: a z\nLast code unit = 'z'\nSubject length lower bound = 2\n\\= Expect no match\n    aaaaaaaaaaaaaz\nNo match\n\\= Expect limit exceeded\n    aaaaaaaaaaaaaz\\=match_limit=3000\nFailed: error -47: match limit exceeded\n\n/(*LIMIT_DEPTH=10)(a+)*zz/I\nCapture group count = 1\nDepth limit = 10\nStarting code units: a z\nLast code unit = 'z'\nSubject length lower bound = 2\n\\= Expect limit exceeded\n    aaaaaaaaaaaaaz\nFailed: error -53: matching depth limit exceeded\n\\= Expect limit exceeded\n    aaaaaaaaaaaaaz\\=depth_limit=1000\nFailed: error -53: matching depth limit exceeded\n\n/(*LIMIT_DEPTH=10)(*LIMIT_DEPTH=1000)(a+)*zz/I\nCapture group count = 1\nDepth limit = 1000\nStarting code units: a z\nLast code unit = 'z'\nSubject length lower bound = 2\n\\= Expect no match\n    aaaaaaaaaaaaaz\nNo match\n\n/(*LIMIT_DEPTH=1000)(a+)*zz/I\nCapture group count = 1\nDepth limit = 1000\nStarting code units: a z\nLast code unit = 'z'\nSubject length lower bound = 2\n\\= Expect no match\n    aaaaaaaaaaaaaz\nNo match\n\\= Expect limit exceeded\n    aaaaaaaaaaaaaz\\=depth_limit=10\nFailed: error -53: matching depth limit exceeded\n\n# These three have infinitely nested recursions.\n\n/((?2))((?1))/\n    abc\nFailed: error -52: nested recursion at the same subject position\n\n/((?(R2)a+|(?1)b))()/\n    aaaabcde\nFailed: error -52: nested recursion at the same subject position\n\n/(?(R)a*(?1)|((?R))b)/\n    aaaabcde\nFailed: error -52: nested recursion at the same subject position\n\n# The allusedtext modifier does not work with JIT, which does not maintain\n# the leftchar/rightchar data.\n\n/abc(?=xyz)/allusedtext\n    abcxyzpqr\n 0: abcxyz\n       >>>\n    abcxyzpqr\\=aftertext\n 0: abcxyz\n       >>>\n 0+ xyzpqr\n\n/(?<=pqr)abc(?=xyz)/allusedtext\n    xyzpqrabcxyzpqr\n 0: pqrabcxyz\n    <<<   >>>\n    xyzpqrabcxyzpqr\\=aftertext\n 0: pqrabcxyz\n    <<<   >>>\n 0+ xyzpqr\n\n/a\\b/\n    a.\\=allusedtext\n 0: a.\n     >\n    a\\=allusedtext\n 0: a\n\n/abc\\Kxyz/\n    abcxyz\\=allusedtext\n 0: abcxyz\n    <<<\n\n/abc(?=xyz(*ACCEPT))/\n    abcxyz\\=allusedtext\n 0: abcxyz\n       >>>\n\n/abc(?=abcde)(?=ab)/allusedtext\n    abcabcdefg\n 0: abcabcde\n       >>>>>\n\n#subject allusedtext\n\n/(?<=abc)123/\n    xyzabc123pqr\n 0: abc123\n    <<<\n    xyzabc12\\=ps\nPartial match: abc12\n               <<<\n    xyzabc12\\=ph\nPartial match: abc12\n               <<<\n\n/\\babc\\b/\n    +++abc+++\n 0: +abc+\n    <   >\n    +++ab\\=ps\nPartial match: +ab\n               <\n    +++ab\\=ph\nPartial match: +ab\n               <\n\n/(?<=abc)def/\n    abc\\=ph\nPartial match: abc\n               <<<\n\n/(?<=123)(*MARK:xx)abc/mark\n    xxxx123a\\=ph\nPartial match, mark=xx: 123a\n                        <<<\n    xxxx123a\\=ps\nPartial match, mark=xx: 123a\n                        <<<\n\n/(?<=(?<=a)b)c.*/I\nCapture group count = 0\nMax lookbehind = 1\nFirst code unit = 'c'\nSubject length lower bound = 1\n    abc\\=ph\nPartial match: abc\n               <<\n\\= Expect no match\n    xbc\\=ph\nNo match\n\n/(?<=ab)c.*/I\nCapture group count = 0\nMax lookbehind = 2\nFirst code unit = 'c'\nSubject length lower bound = 1\n    abc\\=ph\nPartial match: abc\n               <<\n\\= Expect no match\n    xbc\\=ph\nNo match\n\n/abc(?<=bc)def/\n    xxxabcd\\=ph\nPartial match: abcd\n\n/(?<=ab)cdef/\n    xxabcd\\=ph\nPartial match: abcd\n               <<\n\n/(?<=(?<=(?<=a)b)c)./I\nCapture group count = 0\nMax lookbehind = 1\nSubject length lower bound = 1\n    123abcXYZ\n 0: abcX\n    <<<\n\n/(?<=ab(cd(?<=...)))./I\nCapture group count = 1\nMax lookbehind = 4\nSubject length lower bound = 1\n    abcdX\n 0: abcdX\n    <<<<\n 1: cd\n\n/(?<=ab((?<=...)cd))./I\nCapture group count = 1\nMax lookbehind = 4\nSubject length lower bound = 1\n    ZabcdX\n 0: ZabcdX\n    <<<<<\n 1: cd\n\n/(?<=((?<=(?<=ab).))(?1)(?1))./I\nCapture group count = 1\nMax lookbehind = 2\nSubject length lower bound = 1\n    abxZ\n 0: abxZ\n    <<<\n 1:\n\n#subject\n# -------------------------------------------------------------------\n\n# These tests provoke recursion loops, which give a different error message\n# when JIT is used.\n\n/(?R)/I\nCapture group count = 0\nMay match empty string\nSubject length lower bound = 0\n    abcd\nFailed: error -52: nested recursion at the same subject position\n\n/(a|(?R))/I\nCapture group count = 1\nMay match empty string\nSubject length lower bound = 0\n    abcd\n 0: a\n 1: a\n    defg\nFailed: error -52: nested recursion at the same subject position\n\n/(ab|(bc|(de|(?R))))/I\nCapture group count = 3\nMay match empty string\nSubject length lower bound = 0\n    abcd\n 0: ab\n 1: ab\n    fghi\nFailed: error -52: nested recursion at the same subject position\n\n/(ab|(bc|(de|(?1))))/I\nCapture group count = 3\nMay match empty string\nSubject length lower bound = 0\n    abcd\n 0: ab\n 1: ab\n    fghi\nFailed: error -52: nested recursion at the same subject position\n\n/x(ab|(bc|(de|(?1)x)x)x)/I\nCapture group count = 3\nFirst code unit = 'x'\nSubject length lower bound = 3\n    xab123\n 0: xab\n 1: ab\n    xfghi\nFailed: error -52: nested recursion at the same subject position\n\n/(?!\\w)(?R)/\n    abcd\nFailed: error -52: nested recursion at the same subject position\n    =abc\nFailed: error -52: nested recursion at the same subject position\n\n/(?=\\w)(?R)/\n    =abc\nFailed: error -52: nested recursion at the same subject position\n    abcd\nFailed: error -52: nested recursion at the same subject position\n\n/(?<!\\w)(?R)/\n    abcd\nFailed: error -52: nested recursion at the same subject position\n\n/(?<=\\w)(?R)/\n    abcd\nFailed: error -52: nested recursion at the same subject position\n\n/(a+|(?R)b)/\n    aaa\n 0: aaa\n 1: aaa\n    bbb\nFailed: error -52: nested recursion at the same subject position\n\n/\u00dd\u00ac\\xff\u00a8((?1))/BI\n------------------------------------------------------------------\n        Bra\n        \u00dd\u00ac\\x{ff}\u00a8\n        CBra 1\n        Recurse\n        Ket\n        Ket\n        End\n------------------------------------------------------------------\nCapture group count = 1\nSubject length lower bound = 1\n    abcd\nFailed: error -52: nested recursion at the same subject position\n\n# These tests don't behave the same with JIT\n\n/\\w+(?C1)/BI,no_auto_possess\n------------------------------------------------------------------\n        Bra\n        \\w+\n        Callout 1 8 0\n        Ket\n        End\n------------------------------------------------------------------\nCapture group count = 0\nOptions: no_auto_possess\nStarting code units: _ a b c d e f g h i j k l m n o p q r s t u v w x y\n  z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z 0 1 2 3 4 5 6 7 8 9\nSubject length lower bound = 1\n    abc\\=callout_fail=1\n--->abc\n  1 \u00ac  \u00ac    End of pattern\n  1 \u00ac \u00ac     End of pattern\n  1 \u00ac\u00ac      End of pattern\n  1  \u00ac \u00ac    End of pattern\n  1  \u00ac\u00ac     End of pattern\n  1   \u00ac\u00ac    End of pattern\nNo match\n\n/(*NO_AUTO_POSSESS)\\w+(?C1)/BI\n------------------------------------------------------------------\n        Bra\n        \\w+\n        Callout 1 26 0\n        Ket\n        End\n------------------------------------------------------------------\nCapture group count = 0\nCompile options: <none>\nOverall options: no_auto_possess\nStarting code units: _ a b c d e f g h i j k l m n o p q r s t u v w x y\n  z A B C D E F G H I J K L M N O P Q R S T U V W X Y Z 0 1 2 3 4 5 6 7 8 9\nSubject length lower bound = 1\n    abc\\=callout_fail=1\n--->abc\n  1 \u00ac  \u00ac    End of pattern\n  1 \u00ac \u00ac     End of pattern\n  1 \u00ac\u00ac      End of pattern\n  1  \u00ac \u00ac    End of pattern\n  1  \u00ac\u00ac     End of pattern\n  1   \u00ac\u00ac    End of pattern\nNo match\n\n# This test breaks the JIT stack limit\n\n/(|\u00a8+){2,2452}/\n    (|\u00a8+){2,2452}\n 0:\n 1:\n\n/(*LIMIT_HEAP=21)\\\u00dd(a)\u00a8{60}/expand\n    \\\u00dda\u00a8{60}\nFailed: error -63: heap limit exceeded\n\n/b(?<!ax)(?!cx)/allusedtext\n    abc\n 0: abc\n    < >\n    abcz\n 0: abcz\n    < >>\n\n# End of testinput15\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TSTOO16": {"ttr": 42275, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "PCRE2 version 10.35 2020-05-09\n# This test is run only when JIT support is not available. It checks that an\n# attempt to use it has the expected behaviour. It also tests things that\n# are different without JIT.\n\n/abc/I,jit,jitverify\nCapture group count = 0\nFirst code unit = 'a'\nLast code unit = 'c'\nSubject length lower bound = 3\nJIT support is not available in this version of PCRE2\n\n/a*/I\nCapture group count = 0\nMay match empty string\nSubject length lower bound = 0\n\n# End of testinput16\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TSTOO18": {"ttr": 42285, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "PCRE2 version 10.35 2020-05-09\n# This set of tests is run only with the 8-bit library. It tests the POSIX\n# interface, which is supported only with the 8-bit library. This test should\n# not be run with JIT (which is not available for the POSIX interface).\n\n#forbid_utf\n#pattern posix\n\n# Test some invalid options\n\n/abc/auto_callout\n** Ignored with POSIX interface: auto_callout\n\n/abc/\n   abc\\=find_limits\n** Ignored with POSIX interface: find_limits\n 0: abc\n\n/abc/\n  abc\\=partial_hard\n** Ignored with POSIX interface: partial_hard\n 0: abc\n\n/a(())bc/parens_nest_limit=1\n** Ignored with POSIX interface: parens_nest_limit\n\n/abc/allow_surrogate_escapes,max_pattern_length=2\n** Ignored with POSIX interface: allow_surrogate_escapes max_pattern_length\n\n# Real tests\n\n/abc/\n    abc\n 0: abc\n\n/\u00acabc|def/\n    abcdef\n 0: abc\n    abcdef\\=notbol\n 0: def\n\n/.*((abc)$|(def))/\n    defabc\n 0: defabc\n 1: abc\n 2: abc\n    defabc\\=noteol\n 0: def\n 1: def\n 2: <unset>\n 3: def\n\n/the quick brown fox/\n    the quick brown fox\n 0: the quick brown fox\n\\= Expect no match\n    The Quick Brown Fox\nNo match: POSIX code 17: match failed\n\n/the quick brown fox/i\n    the quick brown fox\n 0: the quick brown fox\n    The Quick Brown Fox\n 0: The Quick Brown Fox\n\n/(*LF)abc.def/\n\\= Expect no match\n    abc\\ndef\nNo match: POSIX code 17: match failed\n\n/(*LF)abc$/\n    abc\n 0: abc\n    abc\\n\n 0: abc\n\n/(abc)\\2/\nFailed: POSIX code 15: bad back reference at offset 6\n\n/(abc\\1)/\n\\= Expect no match\n    abc\nNo match: POSIX code 17: match failed\n\n/a*(b+)(z)(z)/\n    aaaabbbbzzzz\n 0: aaaabbbbzz\n 1: bbbb\n 2: z\n 3: z\n    aaaabbbbzzzz\\=ovector=0\nMatched without capture\n    aaaabbbbzzzz\\=ovector=1\n 0: aaaabbbbzz\n    aaaabbbbzzzz\\=ovector=2\n 0: aaaabbbbzz\n 1: bbbb\n\n/(*ANY)ab.cd/\n    ab-cd\n 0: ab-cd\n    ab=cd\n 0: ab=cd\n\\= Expect no match\n    ab\\ncd\nNo match: POSIX code 17: match failed\n\n/ab.cd/s\n    ab-cd\n 0: ab-cd\n    ab=cd\n 0: ab=cd\n    ab\\ncd\n 0: ab\\x15cd\n\n/a(b)c/posix_nosub\n    abc\nMatched with REG_NOSUB\n\n/a(?P<name>b)c/posix_nosub\n    abc\nMatched with REG_NOSUB\n\n/(a)\\1/posix_nosub\n    zaay\nMatched with REG_NOSUB\n\n/a?|b?/\n    abc\n 0: a\n\\= Expect no match\n    ddd\\=notempty\nNo match: POSIX code 17: match failed\n\n/\\w+A/\n   CDAAAAB\n 0: CDAAAA\n\n/\\w+A/ungreedy\n   CDAAAAB\n 0: CDA\n\n/\\Biss\\B/I,aftertext\n** Ignored with POSIX interface: info\n    Mississippi\n 0: iss\n 0+ issippi\n\n/abc/\\\nFailed: POSIX code 9: bad escape sequence at offset 4\n\n\"(?(?C)\"\nFailed: POSIX code 11: unbalanced () at offset 6\n\n\"(?(?C))\"\nFailed: POSIX code 3: pattern error at offset 6\n\n/abcd/substitute_extended\n** Ignored with POSIX interface: substitute_extended\n\n/\\\u00ddA\u00a8{1000000}**/expand,regerror_buffsize=31\nFailed: POSIX code 4: ? * + invalid at offset 100000\n** regerror() message truncated\n\n/\\\u00ddA\u00a8{1000000}**/expand,regerror_buffsize=32\nFailed: POSIX code 4: ? * + invalid at offset 1000001\n\n//posix_nosub\n    \\=offset=70000\n** Ignored with POSIX interface: offset\nMatched with REG_NOSUB\n\n/(?=(a\\K))/\n    a\nStart of matched string is beyond its end - displaying from end to start.\n 0: a\n 1: a\n\n/\u00acd(e)$/posix\n    acdef\\=posix_startend=2:4\n 0: de\n 1: e\n    acde\\=posix_startend=2\n 0: de\n 1: e\n\\= Expect no match\n    acdef\nNo match: POSIX code 17: match failed\n    acdef\\=posix_startend=2\nNo match: POSIX code 17: match failed\n\n/\u00aca\\x{00}b$/posix\n    a\\x{00}b\\=posix_startend=0:3\n 0: a\\x00b\n\n/\"A\" 00 \"B\"/hex\n    A\\x{00}B\\=posix_startend=0:3\n 0: A\\x00B\n\n/ABC/use_length\n    ABC\n 0: ABC\n\n/a\\b(c/literal,posix\n    a\\\\b(c\n 0: a\\b(c\n\n/a\\b(c/literal,posix,dotall\nFailed: POSIX code 16: bad argument at offset 0\n\n/((a)(b)?(c))/posix\n    123ace\n 0: ac\n 1: ac\n 2: a\n 3: <unset>\n 4: c\n    123ace\\=posix_startend=2:6\n 0: ac\n 1: ac\n 2: a\n 3: <unset>\n 4: c\n\n# End of testdata/testinput18\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TSTOO2": {"ttr": 22083, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "TSTOO20": {"ttr": 42776, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "PCRE2 version 10.35 2020-05-09\n# This set of tests exercises the serialization/deserialization and code copy\n# functions in the library. It does not use UTF or JIT.\n\n#forbid_utf\n\n# Compile several patterns, push them onto the stack, and then write them\n# all to a file.\n\n#pattern push\n\n/(?<NAME>(?&NAME_PAT))\\s+(?<ADDR>(?&ADDRESS_PAT))\n  (?(DEFINE)\n  (?<NAME_PAT>\u00dda-z\u00a8+)\n  (?<ADDRESS_PAT>\\d+)\n  )/x\n/\u00ac(?:((.)(?1)\\2|)|((.)(?3)\\4|.))$/i\n\n#save testsaved1\n** Failed to open 'testsaved1': EDC5047I An invalid file name was specified as a function parameter.\n** pcre2test run abandoned\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TSTOO21": {"ttr": 42791, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "PCRE2 version 10.35 2020-05-09\n# These are tests of \\C that do not involve UTF. They are not run when \\C is\n# disabled by compiling with --enable-never-backslash-C.\n\n/\\C+\\D \\C+\\d \\C+\\S \\C+\\s \\C+\\W \\C+\\w \\C+. \\C+\\R \\C+\\H \\C+\\h \\C+\\V \\C+\\v \\C+\\Z \\C+\\z \\C+$/Bx\n------------------------------------------------------------------\n        Bra\n        AllAny+\n        \\D\n        AllAny+\n        \\d\n        AllAny+\n        \\S\n        AllAny+\n        \\s\n        AllAny+\n        \\W\n        AllAny+\n        \\w\n        AllAny+\n        Any\n        AllAny+\n        \\R\n        AllAny+\n        \\H\n        AllAny+\n        \\h\n        AllAny+\n        \\V\n        AllAny+\n        \\v\n        AllAny+\n        \\Z\n        AllAny++\n        \\z\n        AllAny+\n        $\n        Ket\n        End\n------------------------------------------------------------------\n\n/\\D+\\C \\d+\\C \\S+\\C \\s+\\C \\W+\\C \\w+\\C .+\\C \\R+\\C \\H+\\C \\h+\\C \\V+\\C \\v+\\C a+\\C \\n+\\C \\C+\\C/Bx\n------------------------------------------------------------------\n        Bra\n        \\D+\n        AllAny\n        \\d+\n        AllAny\n        \\S+\n        AllAny\n        \\s+\n        AllAny\n        \\W+\n        AllAny\n        \\w+\n        AllAny\n        Any+\n        AllAny\n        \\R+\n        AllAny\n        \\H+\n        AllAny\n        \\h+\n        AllAny\n        \\V+\n        AllAny\n        \\v+\n        AllAny\n        a+\n        AllAny\n        \\x15+\n        AllAny\n        AllAny+\n        AllAny\n        Ket\n        End\n------------------------------------------------------------------\n\n/ab\\Cde/never_backslash_c\nFailed: error 183 at offset 4: using \\C is disabled by the application\n\n/ab\\Cde/info\nCapture group count = 0\nContains \\C\nFirst code unit = 'a'\nLast code unit = 'e'\nSubject length lower bound = 5\n    abXde\n 0: abXde\n\n/(?<=ab\\Cde)X/\n    abZdeX\n 0: X\n\n# End of testinput21\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TSTOO9": {"ttr": 41243, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "TSTOTE1": {"ttr": 42808, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "PCRE2 version 10.35 2020-05-09\n/-- This set of tests is for features that are compatible with all versions of\n    Perl >= 5.10, in non-UTF-8 mode. It should run clean for the EBCDIC. --/\n\n< forbid 89?=ABCDEFfGILMNPTUWXZ<\n** Invalid pattern delimiter '<' (x4c).\n\n/-- 9 is \\371, not \\071 --/\n\n/abcd\\t\\n\\r\\f\\a\\e\\371\\x5e\\$\\\\\\?caxyz/\n    abcd\\t\\n\\r\\f\\a\\e9;\\$\\\\?caxyz\n 0: abcd\\x05\\x15\\x0d\\x0c\\x2f\\x279;$\\?caxyz\n\n/-- Should correctly fail.  \\c: is not supported in EBCDIC --/\nFailed: error 168 at offset 30: \\c must be followed by a letter or one of \u00dd\\\u00a8\u00ac_?\n\n/\u00ac\\ca\\cA\\c\u00dd;\\c:/\nFailed: error 168 at offset 14: \\c must be followed by a letter or one of \u00dd\\\u00a8\u00ac_?\n    \\x01\\x01\\e;z\n\n/-- Should correctly fail.  See EBCDIC replacement --/\n\n/\u00ac\u00dda-zA-Z\\d\u00a8\u00dda-zA-Z\\d\\-\u00a8*(\\.\u00dda-zA-Z\\d\u00a8\u00dda-zA-z\\d\\-\u00a8*)*\\.$/\nFailed: error 108 at offset 43: range out of order in character class\n\n/\u00ac\u00dda-zA-Z\\d\u00a8\u00dda-zA-Z\\d\\-\u00a8*(\\.\u00dda-zA-Z\\d\u00a8\u00dda-zA-Z\\d\\-\u00a8*)*\\.$/\n    a.\n 0: a.\n    Z.\n 0: Z.\n    2.\n 0: 2.\n    ab-c.pq-r.\n 0: ab-c.pq-r.\n 1: .pq-r\n    sxk.zzz.ac.uk.\n 0: sxk.zzz.ac.uk.\n 1: .uk\n    x-.y-.\n 0: x-.y-.\n 1: .y-\n    *** Failers\nNo match\n    -abc.peq.\nNo match\n\n/\u00ac\u00dd\\w\u00a8\u00dd\\W\u00a8\u00dd\\s\u00a8\u00dd\\S\u00a8\u00dd\\d\u00a8\u00dd\\D\u00a8\u00dd\\b\u00a8\u00dd\\n\u00a8\u00dd\\c\u00a8\u00a8\u00dd\\022\u00a8/\n    a+ Z0+\\x16\\n\\x1d\\x12\n 0: a+ Z0+\\x16\\x15\\x1d\\x12\n\n/-- I decided to not replicate the extremely complicate patterns that try to identify\n    email addresses.  They are peppered with ASCII only idioms such as:\n    \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8 and \u00dd\\000-\\037\u00a8\n    to represent extended ASCII and some other characters.  The pattern is hopelessly\n    complicated and is not worth it to translate to EBCDIC --/\n\n/-- first space \\100 instead of \\040 --/\n\n/\u00ac\\s/\n    \\100abc\n 0:\n    \\x0cabc\n 0: \\x0c\n    \\nabc\n 0: \\x15\n    \\rabc\n 0: \\x0d\n    \\tabc\n 0: \\x05\n    *** Failers\nNo match\n    abc\nNo match\n\n/-- Here I had to change the order of the subject line rather then the pattern --/\n\n/\u00ac\u00ddw-C_\u00ac\u00a8+$/\n    wxy_\u00acABC\n 0: wxy_\u00acABC\n    *** Failers\nNo match\n    WXY\nNo match\n\n/\u00ac\u00ddw-C_\u00ac\u00a8+$/i\n    WXY_\u00acabc\n 0: WXY_\u00acabc\n    wxy_\u00acABC\n 0: wxy_\u00acABC\n\n/\u00ac\u00dd\\xc1-\\xe9\\x6d\\x5f\u00a8+$/i\n    WXY_\u00acabc\n 0: WXY_\u00acabc\n    wxy_\u00acABC\n 0: wxy_\u00acABC\n\n\n/\\xe0/\n    \\\\\n 0: \\\n\n/./\n    \\\\\n 0: \\\n\n/\\x40Z/\n    the Zoo\n 0:  Z\n\n/(abc)\\242/\n    abc\\xa2\n 0: abcs\n 1: abc\n\n/-- Only one example of that --/\n\n/(abc)\\220/\n    abc\\x90\n 0: abc\u00b0\n 1: abc\n\n/(abc)\\1000/\n    abc\\x400\n 0: abc 0\n 1: abc\n    abc\\x40\\xf0\n 0: abc 0\n 1: abc\n    abc\\1000\n 0: abc 0\n 1: abc\n    abc\\100\\xf0\n 0: abc 0\n 1: abc\n    abc\\100\\360\n 0: abc 0\n 1: abc\n    abc\\100\\360\n 0: abc 0\n 1: abc\n\n/(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)(l)\\12\\342/\n    abcdefghijkllS\n 0: abcdefghijkllS\n 1: a\n 2: b\n 3: c\n 4: d\n 5: e\n 6: f\n 7: g\n 8: h\n 9: i\n10: j\n11: k\n12: l\n\n/(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)\\12\\342/\n    abcdefghijk\\12S\n 0: abcdefghijk\\x0aS\n 1: a\n 2: b\n 3: c\n 4: d\n 5: e\n 6: f\n 7: g\n 8: h\n 9: i\n10: j\n11: k\n\n/\u00ac\u00dda-z\u00dd-\\\u00a8\\\\W-Z46\u00a8/\n    W46\u00a8789\n 0: W\n    Wall\n 0: W\n    Zebra\n 0: Z\n    Xylophone\n 0: X\n\n 0: 4\n    \u00ddabcd\u00a8\n 0: \u00dd\n    \u00a8abcd\u00dd\n 0: \u00a8\n    \\\\backslash\n 0: \\\n    *** Failers\nNo match\n    -46\u00a8789\nNo match\n    well\n 0: w\n\n/\\?\u00a6\u00a5\u20ac\u00dd\\?-\\xFF\u00a8+/\n    ?\u00a6\u00a5\u20ac\nNo match\n    ?\u00a6\u00a5\u20ac\u00bf\n 0: ?\u00a6\u00a5\u20ac\u00bf\n    ?\u00a6\u00a5\u20ac\u00f8\n 0: ?\u00a6\u00a5\u20ac\u00f8\n    ?\u00a6\u00a5\u20ac\u00c9\n 0: ?\u00a6\u00a5\u20ac\u00c9\n\n/(?-x: )/x\n    A\\x40B\n 0:\n\n/\u00ac\\c?/\n    ?\nNo match\n    \\xff\n 0: \\xff\n    \\x7f\nNo match\n    \\x5f\nNo match\n\n/\u00ac\\c\u00f8/\nFailed: error 168 at offset 4: \\c must be followed by a letter or one of \u00dd\\\u00a8\u00ac_?\n\n/\\H\\h\\V\\v/\n    X X\\x15\n 0: X X\\x15\n    X\\x05X\\x0b\n 0: X\\x05X\\x0b\n    ** Failers\nNo match\n    \\x41 X\\x15\nNo match\n\n/-- The failer herein does not fail, because I do not know\n    what to substitute for the non-breaking space \\x41 --/\n\n/\\H*\\h+\\V?\\v{3,4}/\n    \\x05\\x40\\x41X\\x15\\x0b\\x0c\\x0d\\x15\n 0: \\x05 \u00a0X\\x15\\x0b\\x0c\\x0d\n    \\x05\\x40\\x41\\x15\\x0b\\x0c\\x0d\\x15\n 0: \\x05 \u00a0\\x15\\x0b\\x0c\\x0d\n    \\x05\\x40\\x41\\x15\\x0b\\x0c\n 0: \\x05 \u00a0\\x15\\x0b\\x0c\n    ** Failers\nNo match\n    \\x05\\x40\\x41\\x15\\x0b\nNo match\n\n/\\v*X\\v?Y\\v+Z\\V*\\x15\\V+\\x0b\\V{2,3}\\x0c/\n    >XY\\x15Z\\x15A\\x0bNN\\x0c\n 0: XY\\x15Z\\x15A\\x0bNN\\x0c\n    >\\x15\\x0dX\\x15Y\\x15\\x0bZZZ\\x15AAA\\x0bNNN\\x0c\n 0: \\x15\\x0dX\\x15Y\\x15\\x0bZZZ\\x15AAA\\x0bNNN\\x0c\n\n/\u00ac.*$/s\n    >\\x15\\x0dX\\x15Y\\x15\\x0bZZZ\\x15AAA\\x0bNNN\\x0c\n 0: >\\x15\\x0dX\\x15Y\\x15\\x0bZZZ\\x15AAA\\x0bNNN\\x0c\n\n/\\s/\n    \\x25\\\nNo match\n    \\x40\\\n 0:\n    \\x41\\\nNo match\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TSTOTE11": {"ttr": 44036, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "PCRE2 version 10.35 2020-05-09\n\n/-- Of all tests in tstin14, the only ones relevant are those that\ncaused some issues. --/\n\n/\u00dd\\p{L}\u00a8/8BM\n** Unrecognized modifier '8' in '8BM'\n\n/\u00dd\\p{L}\u00a8/BM\n** Unrecognized modifier 'M' in 'BM'\n\n/\u00dd\\p{\u00acL}\u00a8/BM\n** Unrecognized modifier 'M' in 'BM'\n\n/\u00dd\\P{L}\u00a8/BM\n** Unrecognized modifier 'M' in 'BM'\n\n/\u00dd\\P{\u00acL}\u00a8/BM\n** Unrecognized modifier 'M' in 'BM'\n\n/\\p{L}/BM\n** Unrecognized modifier 'M' in 'BM'\n\n/\\p{L}/B\nFailed: error 145 at offset 2: this version of PCRE2 does not have support for \\P, \\p, or \\X\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TSTOTE14": {"ttr": 44054, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "PCRE2 version 10.35 2020-05-09\n/-- This set of tests is run only with the 8-bit library. They do not require\n    UTF-8 or Unicode property support. The file starts with all the tests of\n    the POSIX interface, because that is supported only with the 8-bit library.\n    --/\n\n< forbid 8W\n** Invalid pattern delimiter '<' (x4c).\n\n/\\h/SI\n** Unrecognized modifier 'S' in 'SI'\n\n/\\v/SI\n** Unrecognized modifier 'S' in 'SI'\n\n/\\R/SI\n** Unrecognized modifier 'S' in 'SI'\n\n/\u00dd\\h\u00a8/BZ\n** Unrecognized modifier 'Z' in 'BZ'\n    >\\x05<\n    >\\x40<\n    >\\x41<\n    >\\x15<\n    >\\x25<\n    >\\x0b<\n    >\\x0c<\n    >\\x0d<\n\n/\u00dd\\H\u00a8/BZ\n** Unrecognized modifier 'Z' in 'BZ'\n\n/\u00dd\u00ac\\h\u00a8/BZ\n** Unrecognized modifier 'Z' in 'BZ'\n\n/\u00dd\\v\u00a8/BZ\n** Unrecognized modifier 'Z' in 'BZ'\n    >\\x05<\n    >\\x40<\n    >\\x41<\n    >\\x15<\n    >\\x25<\n    >\\x0b<\n    >\\x0c<\n    >\\x0d<\n\n/\u00dd\\V\u00a8/BZ\n** Unrecognized modifier 'Z' in 'BZ'\n\n/\u00dd\\x0a\\V\u00a8/BZ\n** Unrecognized modifier 'Z' in 'BZ'\n\n/\u00dd\\R\u00a8/BZ\n** Unrecognized modifier 'Z' in 'BZ'\n\n/\u00dd\\s\u00a8/BZ\n** Unrecognized modifier 'Z' in 'BZ'\n\n/\u00dd\u00dd:space:\u00a8\u00a8/BZ\n** Unrecognized modifier 'Z' in 'BZ'\n\n/\u00dd\\w\u00a8/BZ\n** Unrecognized modifier 'Z' in 'BZ'\n\n/\u00dd\u00dd:alpha:\u00a8\u00a8/BZ\n** Unrecognized modifier 'Z' in 'BZ'\n\n/\u00dda-z\u00a8/BZ\n** Unrecognized modifier 'Z' in 'BZ'\n\n/\u00ddA-Z\u00a8/BZ\n** Unrecognized modifier 'Z' in 'BZ'\n\n/\u00dda-zA-Z\u00a8/BZ\n** Unrecognized modifier 'Z' in 'BZ'\n\n/\u00dda-Z\u00a8/BZ\n** Unrecognized modifier 'Z' in 'BZ'\n\n/\u00dd\u00dd!xxx!\u00a8\u00a8/BZ\n** Unrecognized modifier 'Z' in 'BZ'\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TSTOTE2": {"ttr": 43307, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "PCRE2 version 10.35 2020-05-09\n/-- This set of tests is not Perl-compatible. It checks on special features\n    of PCRE's API, error diagnostics, and the compiled code of some patterns.\n    It also checks the non-Perl syntax the PCRE supports (Python, .NET,\n    Oniguruma). Finally, there are some tests where PCRE and Perl differ,\n    either because PCRE can't be compatible, or there is a possible Perl\n    bug.\n\n    NOTE: This is a non-UTF set of tests. When UTF support is needed, use\n    test 5, and if Unicode Property Support is needed, use test 7. --/\n\n< forbid 8W\n** Invalid pattern delimiter '<' (x4c).\n\n/abc(?C)def/I\nCapture group count = 0\nFirst code unit = 'a'\nLast code unit = 'f'\nSubject length lower bound = 6\n    \\x83\\x0\\x81bcdef\n--->c\\x00abcdef\n  0      \u00ac  \u00ac       d\n 0: abcdef\n\n/\u00ac.*$/s\n    \\x83\\x0\\x81bcdef\n 0: c\\x00abcdef\n\n/abc/IS>SAVED.REGEX0\n** Unrecognized modifier 'S' in 'IS>SAVED.REGEX0'\n<SAVED.REGEX0\n    abc\n    ** Failers\n    bca\n\n\n/abc/ISS>SAVED.REGEX1\n** Unrecognized modifier 'S' in 'ISS>SAVED.REGEX1'\n<SAVED.REGEX1\n    abc\n    ** Failers\n    bca\n\n/abc/IFS>SAVED.REGEX2\n** Unrecognized modifier 'F' in 'IFS>SAVED.REGEX2'\n<SAVED.REGEX2\n    abc\n    ** Failers\n    bca\n\n/abc/IFSS>SAVED.REGEX3\n** Unrecognized modifier 'F' in 'IFSS>SAVED.REGEX3'\n<SAVED.REGEX3\n    abc\n    ** Failers\n    bca\n\n/(a|b)/IS>SAVED.REGEX4\n** Unrecognized modifier 'S' in 'IS>SAVED.REGEX4'\n<SAVED.REGEX4\n    abc\n    ** Failers\n    def\n\n/(a|b)/ISS>SAVED.REGEX5\n** Unrecognized modifier 'S' in 'ISS>SAVED.REGEX5'\n<SAVED.REGEX5\n    abc\n    ** Failers\n    def\n\n/(a|b)/ISF>SAVED.REGEX6\n** Unrecognized modifier 'S' in 'ISF>SAVED.REGEX6'\n<SAVED.REGEX6\n    abc\n    ** Failers\n    def\n\n/(a|b)/ISSF>SAVED.REGEX7\n** Unrecognized modifier 'S' in 'ISSF>SAVED.REGEX7'\n<SAVED.REGEX7\n    abc\n    ** Failers\n    def\n\n\n/\u00aca.b/<lf>\n** Unrecognized modifier '<' in '<lf>'\n    a\\rb\n    a\\nb\\<cr>\n    a\\x25b\\<anycrlf>\n    ** Failers\n    a\\nb\n    a\\nb\\<any>\n    a\\rb\\<cr>\n    a\\rb\\<any>\n    a\\x25b\\<any>\n    a\\rb\\<anycrlf>\n\n/\u00ac.*$/s\n    a\\x25b\\<any>\n 0: a\\x25b<any>\n\n/-- x25 is NEL.  I do not know how to mimic it --/\n\n/\u00acabc./mgx<any>\n** Unrecognized modifier '<' in 'mgx<any>'\n    abc1 \\x15abc2 \\x0babc3xx \\x0cabc4 \\x0dabc5xx \\x0d\\x15abc6 \\x25abc7 JUNK\n\n/abc.$/mgx<any>\n** Unrecognized modifier '<' in 'mgx<any>'\n    abc1\\x15 abc2\\x0b abc3\\x0c abc4\\x0d abc5\\x0d\\x0a abc6\\x25 abc7 abc9\n\n/a/<cr><any>\n** Unrecognized modifier '<' in '<cr><any>'\n\n/a/<any><crlf>\n** Unrecognized modifier '<' in '<any><crlf>'\n\n/\u00aca\\Rb/<bsr_unicode>\n** Unrecognized modifier '<' in '<bsr_unicode>'\n    a\\nb\n    a\\rb\n    a\\r\\nb\n    a\\x0bb\n    a\\x0cb\n    a\\x25b\n    ** Failers\n    a\\n\\rb\n\n/\u00aca\\R*b/<bsr_unicode>\n** Unrecognized modifier '<' in '<bsr_unicode>'\n    ab\n    a\\nb\n    a\\rb\n    a\\r\\nb\n    a\\x0bb\n    a\\x0cb\n    a\\x25b\n    a\\n\\rb\n    a\\n\\r\\x25\\x0cb\n\n/\u00ac.*$/s\n    a\\n\\r\\x25\\x0cb\n 0: a\\x15\\x0d\\x25\\x0cb\n\n/\u00aca\\R+b/<bsr_unicode>\n** Unrecognized modifier '<' in '<bsr_unicode>'\n    a\\nb\n    a\\rb\n    a\\r\\nb\n    a\\x0bb\n    a\\x0cb\n    a\\x25b\n    a\\n\\rb\n    a\\n\\r\\x25\\x0cb\n    ** Failers\n    ab\n\n/\u00aca\\R{1,3}b/<bsr_unicode>\n** Unrecognized modifier '<' in '<bsr_unicode>'\n    a\\nb\n    a\\n\\rb\n    a\\n\\r\\x25b\n    a\\r\\n\\r\\nb\n    a\\r\\n\\r\\n\\r\\nb\n    a\\n\\r\\n\\rb\n    a\\n\\n\\r\\nb\n    ** Failers\n    a\\n\\n\\n\\rb\n    a\\r\n\n/abc.$/mgx<anycrlf>\n** Unrecognized modifier '<' in 'mgx<anycrlf>'\n    abc1\\x15 abc2\\x0b abc3\\x0c abc4\\x0d abc5\\x0d\\x15 abc6\\x25 abc9\n\n/\\V+\\x15/BZ\n** Unrecognized modifier 'Z' in 'BZ'\n\n/a\\Rb/I<bsr_unicode>\n** Unrecognized modifier '<' in 'I<bsr_unicode>'\n    a\\rb\n    a\\nb\n    a\\r\\nb\n    a\\x25b\n    a\\x0bb\n    ** Failers\n    a\\x25b\\<bsr_anycrlf>\n    a\\x0bb\\<bsr_anycrlf>\n\n/a\\R?b/I<bsr_unicode>\n** Unrecognized modifier '<' in 'I<bsr_unicode>'\n    a\\rb\n    a\\nb\n    a\\r\\nb\n    a\\x25b\n    a\\x0bb\n    ** Failers\n    a\\x25b\\<bsr_anycrlf>\n    a\\x0bb\\<bsr_anycrlf>\n\n/(*BSR_UNICODE)a\\Rb/I\nCapture group count = 0\n\\R matches any Unicode newline\nFirst code unit = 'a'\nLast code unit = 'b'\nSubject length lower bound = 3\n    a\\x25b\n 0: a\\x25b\n\n/(*CRLF)(*BSR_UNICODE)a\\Rb/I\nCapture group count = 0\n\\R matches any Unicode newline\nForced newline is CRLF\nFirst code unit = 'a'\nLast code unit = 'b'\nSubject length lower bound = 3\n    a\\x25b\n 0: a\\x25b\n\n/(?&word)(?&element)(?(DEFINE)(?<element><\u00dd\u00acm\u00a8\u00dd\u00ac>\u00a8>\u00dd\u00ac<\u00a8)(?<word>\\w*+))/BZ\n** Unrecognized modifier 'Z' in 'BZ'\n\n/(?&word)(?&element)(?(DEFINE)(?<element><\u00dd\u00ac\\d\u00a8\u00dd\u00ac>\u00a8>\u00dd\u00ac<\u00a8)(?<word>\\w*+))/BZ\n** Unrecognized modifier 'Z' in 'BZ'\n\n/\\s*\\R/BZ\n** Unrecognized modifier 'Z' in 'BZ'\n    \\x40\\x15\n    \\x40\\x0d\n    \\x40\\x0d\\x15\n\n/\\S*\\R/BZ\n** Unrecognized modifier 'Z' in 'BZ'\n    a\\x15\n\n/X\\H+\\R/BZ\n** Unrecognized modifier 'Z' in 'BZ'\n    X\\x0d\\x15\n\n/\u00aca\\xc1z/<JS>\n** Unrecognized modifier '<' in '<JS>'\n    aAz\n    *** Failers\n    axc1z\n\n/\u00aca\u00ddm\\xc1\u00a8z/<JS>\n** Unrecognized modifier '<' in '<JS>'\n    aAz\n\n/\u00aca\\x1z/<JS>\n** Unrecognized modifier '<' in '<JS>'\n    ax1z\n\n/\u00aca\\u0041z/<JS>\n** Unrecognized modifier '<' in '<JS>'\n    aAz\n    *** Failers\n    au0041z\n\n/\u00dda-\u00dd!xxx!\u00a8\u00a8+/\n    A\u00a8\u00a8\u00a8\nNo match\n\n/\u00ddA-\u00dd!xxx!\u00a8\u00a8+/\nFailed: error 108 at offset 3: range out of order in character class\n    A\u00a8\u00a8\u00a8\n\n/\u00dd\u00dd!xxx!\u00a8-a\u00a8+/\n    A\u00a8\u00a8\u00a8\nNo match\n\n/\u00dd\u00dd!xxx!\u00a8-A/\n    A\u00a8\u00a8\u00a8\nNo match\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TSTOT1": {"ttr": 2049, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "TSTOT15": {"ttr": 2819, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "\n# These are:\n#\n# (1) Tests of the match-limiting features. The results are different for\n# interpretive or JIT matching, so this test should not be run with JIT. The\n# same tests are run using JIT in test 17.\n\n# (2) Other tests that must not be run with JIT.\n\n/(a+)*zz/I\nCapture group count = 1\nStarting code units: a z\nLast code unit = 'z'\nSubject length lower bound = 2\n  aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaazzbbbbbb\\=find_limits\nMinimum heap limit = 0\nMinimum match limit = 7\nMinimum depth limit = 7\n 0: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaazz\n 1: aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n  aaaaaaaaaaaaaz\\=find_limits\nMinimum heap limit = 0\nMinimum match limit = 20481\nMinimum depth limit = 30\nNo match\n\n!((?:\\s|//.*\\\\n|/\u00dd*\u00a8(?:\\\\n|.)*?\u00dd*\u00a8/)*)!I\nCapture group count = 1\nMay match empty string\nSubject length lower bound = 0\n   /* this is a C style comment */\\=find_limits\nMinimum heap limit = 0\nMinimum match limit = 64\nMinimum depth limit = 7\n 0: /* this is a C style comment */\n 1: /* this is a C style comment */\n\n/\u00ac(?>a)++/\n    aa\\=find_limits\nMinimum heap limit = 0\nMinimum match limit = 5\nMinimum depth limit = 3\n 0: aa\n    aaaaaaaaa\\=find_limits\nMinimum heap limit = 0\nMinimum match limit = 12\nMinimum depth limit = 3\n 0: aaaaaaaaa\n\n/(a)(?1)++/\n    aa\\=find_limits\nMinimum heap limit = 0\nMinimum match limit = 7\nMinimum depth limit = 5\n 0: aa\n 1: a\n    aaaaaaaaa\\=find_limits\nMinimum heap limit = 0\nMinimum match limit = 21\nMinimum depth limit = 5\n 0: aaaaaaaaa\n 1: a\n\n/a(?:.)*?a/ims\n    abbbbbbbbbbbbbbbbbbbbba\\=find_limits\nMinimum heap limit = 0\nMinimum match limit = 24\nMinimum depth limit = 3\n 0: abbbbbbbbbbbbbbbbbbbbba\n\n/a(?:.(*THEN))*?a/ims\n    abbbbbbbbbbbbbbbbbbbbba\\=find_limits\nMinimum heap limit = 0\nMinimum match limit = 66\nMinimum depth limit = 45\n 0: abbbbbbbbbbbbbbbbbbbbba\n\n/a(?:.(*THEN:ABC))*?a/ims\n    abbbbbbbbbbbbbbbbbbbbba\\=find_limits\nMinimum heap limit = 0\nMinimum match limit = 66\nMinimum depth limit = 45\n 0: abbbbbbbbbbbbbbbbbbbbba\n\n/\u00ac(?>a+)(?>b+)(?>c+)(?>d+)(?>e+)/\n     aabbccddee\\=find_limits\nMinimum heap limit = 0\nMinimum match limit = 7\nMinimum depth limit = 7\n 0: aabbccddee\n\n/\u00ac(?>(a+))(?>(b+))(?>(c+))(?>(d+))(?>(e+))/\n     aabbccddee\\=find_limits\nMinimum heap limit = 0\nMinimum match limit = 12\nMinimum depth limit = 12\n 0: aabbccddee\n 1: aa\n 2: bb\n 3: cc\n 4: dd\n 5: ee\n\n/\u00ac(?>(a+))(?>b+)(?>(c+))(?>d+)(?>(e+))/\n     aabbccddee\\=find_limits\nMinimum heap limit = 0\nMinimum match limit = 10\nMinimum depth limit = 10\n 0: aabbccddee\n 1: aa\n 2: cc\n 3: ee\n\n/(*LIMIT_MATCH=12bc)abc/\nFailed: error 160 at offset 17: (*VERB) not recognized or malformed\n\n/(*LIMIT_MATCH=4294967290)abc/\nFailed: error 160 at offset 24: (*VERB) not recognized or malformed\n\n/(*LIMIT_DEPTH=4294967280)abc/I\nCapture group count = 0\nDepth limit = 42\nFirst code unit = 'a'\nLast code unit = 'c'\nSubject length lower bound = 3\n\n/(a+)*zz/\n\\= Expect no match\n    aaaaaaaaaaaaaz\nNo match\n\\= Expect limit exceeded\n    aaaaaaaaaaaaaz\\=match_limit=3000\nFailed: error -47: match limit exceeded\n\n/(a+)*zz/\n\\= Expect limit exceeded\n    aaaaaaaaaaaaaz\\=depth_limit=10\nFailed: error -53: matching depth limit exceeded\n\n/(*LIMIT_MATCH=3000)(a+)*zz/I\nCapture group count = 1\nMatch limit = 3000\nStarting code units: a z\nLast code unit = 'z'\nSubject length lower bound = 2\n\\= Expect limit exceeded\n    aaaaaaaaaaaaaz\nFailed: error -47: match limit exceeded\n\\= Expect limit exceeded\n    aaaaaaaaaaaaaz\\=match_limit=60000\nFailed: error -47: match limit exceeded\n\n/(*LIMIT_MATCH=60000)(*LIMIT_MATCH=3000)(a+)*zz/I\nCapture group count = 1\nMatch limit = 3000\nStarting code units: a z\nLast code unit = 'z'\nSubject length lower bound = 2\n\\= Expect limit exceeded\n    aaaaaaaaaaaaaz\nFailed: error -47: match limit exceeded\n\n/(*LIMIT_MATCH=60000)(a+)*zz/I\nCapture group count = 1\nMatch limit = 60000\nStarting code units: a z\nLast code unit = 'z'\nSubject length lower bound = 2\n\\= Expect no match\n    aaaaaaaaaaaaaz\nNo match\n\\= Expect limit exceeded\n    aaaaaaaaaaaaaz\\=match_limit=3000\nFailed: error -47: match limit exceeded\n\n/(*LIMIT_DEPTH=10)(a+)*zz/I\nCapture group count = 1\nDepth limit = 10\nStarting code units: a z\nLast code unit = 'z'\nSubject length lower bound = 2\n\\= Expect limit exceeded\n    aaaaaaaaaaaaaz\nFailed: error -53: matching depth limit exceeded\n\\= Expect limit exceeded\n    aaaaaaaaaaaaaz\\=depth_limit=1000\nFailed: error -53: matching depth limit exceeded\n\n/(*LIMIT_DEPTH=10)(*LIMIT_DEPTH=1000)(a+)*zz/I\nCapture group count = 1\nDepth limit = 1000\nStarting code units: a z\nLast code unit = 'z'\nSubject length lower bound = 2\n\\= Expect no match\n    aaaaaaaaaaaaaz\nNo match\n\n/(*LIMIT_DEPTH=1000)(a+)*zz/I\nCapture group count = 1\nDepth limit = 1000\nStarting code units: a z\nLast code unit = 'z'\nSubject length lower bound = 2\n\\= Expect no match\n    aaaaaaaaaaaaaz\nNo match\n\\= Expect limit exceeded\n    aaaaaaaaaaaaaz\\=depth_limit=10\nFailed: error -53: matching depth limit exceeded\n\n# These three have infinitely nested recursions.\n\n/((?2))((?1))/\n    abc\nFailed: error -52: nested recursion at the same subject position\n\n/((?(R2)a+|(?1)b))()/\n    aaaabcde\nFailed: error -52: nested recursion at the same subject position\n\n/(?(R)a*(?1)|((?R))b)/\n    aaaabcde\nFailed: error -52: nested recursion at the same subject position\n\n# The allusedtext modifier does not work with JIT, which does not maintain\n# the leftchar/rightchar data.\n\n/abc(?=xyz)/allusedtext\n    abcxyzpqr\n 0: abcxyz\n       >>>\n    abcxyzpqr\\=aftertext\n 0: abcxyz\n       >>>\n 0+ xyzpqr\n\n/(?<=pqr)abc(?=xyz)/allusedtext\n    xyzpqrabcxyzpqr\n 0: pqrabcxyz\n    <<<   >>>\n    xyzpqrabcxyzpqr\\=aftertext\n 0: pqrabcxyz\n    <<<   >>>\n 0+ xyzpqr\n\n/a\\b/\n    a.\\=allusedtext\n 0: a.\n     >\n    a\\=allusedtext\n 0: a\n\n/abc\\Kxyz/\n    abcxyz\\=allusedtext\n 0: abcxyz\n    <<<\n\n/abc(?=xyz(*ACCEPT))/\n    abcxyz\\=allusedtext\n 0: abcxyz\n       >>>\n\n/abc(?=abcde)(?=ab)/allusedtext\n    abcabcdefg\n 0: abcabcde\n       >>>>>\n\n#subject allusedtext\n\n/(?<=abc)123/\n    xyzabc123pqr\n 0: abc123\n    <<<\n    xyzabc12\\=ps\nPartial match: abc12\n               <<<\n    xyzabc12\\=ph\nPartial match: abc12\n               <<<\n\n/\\babc\\b/\n    +++abc+++\n 0: +abc+\n    <   >\n    +++ab\\=ps\nPartial match: +ab\n               <\n    +++ab\\=ph\nPartial match: +ab\n               <\n\n/(?<=abc)def/\n    abc\\=ph\nPartial match: abc\n               <<<\n\n/(?<=123)(*MARK:xx)abc/mark\n    xxxx123a\\=ph\nPartial match, mark=xx: 123a\n                        <<<\n    xxxx123a\\=ps\nPartial match, mark=xx: 123a\n                        <<<\n\n/(?<=(?<=a)b)c.*/I\nCapture group count = 0\nMax lookbehind = 1\nFirst code unit = 'c'\nSubject length lower bound = 1\n    abc\\=ph\nPartial match: abc\n               <<\n\\= Expect no match\n    xbc\\=ph\nNo match\n\n/(?<=ab)c.*/I\nCapture group count = 0\nMax lookbehind = 2\nFirst code unit = 'c'\nSubject length lower bound = 1\n    abc\\=ph\nPartial match: abc\n               <<\n\\= Expect no match\n    xbc\\=ph\nNo match\n\n/abc(?<=bc)def/\n    xxxabcd\\=ph\nPartial match: abcd\n\n/(?<=ab)cdef/\n    xxabcd\\=ph\nPartial match: abcd\n               <<\n\n/(?<=(?<=(?<=a)b)c)./I\nCapture group count = 0\nMax lookbehind = 1\nSubject length lower bound = 1\n    123abcXYZ\n 0: abcX\n    <<<\n\n/(?<=ab(cd(?<=...)))./I\nCapture group count = 1\nMax lookbehind = 4\nSubject length lower bound = 1\n    abcdX\n 0: abcdX\n    <<<<\n 1: cd\n\n/(?<=ab((?<=...)cd))./I\nCapture group count = 1\nMax lookbehind = 4\nSubject length lower bound = 1\n    ZabcdX\n 0: ZabcdX\n    <<<<<\n 1: cd\n\n/(?<=((?<=(?<=ab).))(?1)(?1))./I\nCapture group count = 1\nMax lookbehind = 2\nSubject length lower bound = 1\n    abxZ\n 0: abxZ\n    <<<\n 1:\n\n#subject\n# -------------------------------------------------------------------\n\n# These tests provoke recursion loops, which give a different error message\n# when JIT is used.\n\n/(?R)/I\nCapture group count = 0\nMay match empty string\nSubject length lower bound = 0\n    abcd\nFailed: error -52: nested recursion at the same subject position\n\n/(a|(?R))/I\nCapture group count = 1\nMay match empty string\nSubject length lower bound = 0\n    abcd\n 0: a\n 1: a\n    defg\nFailed: error -52: nested recursion at the same subject position\n\n/(ab|(bc|(de|(?R))))/I\nCapture group count = 3\nMay match empty string\nSubject length lower bound = 0\n    abcd\n 0: ab\n 1: ab\n    fghi\nFailed: error -52: nested recursion at the same subject position\n\n/(ab|(bc|(de|(?1))))/I\nCapture group count = 3\nMay match empty string\nSubject length lower bound = 0\n    abcd\n 0: ab\n 1: ab\n    fghi\nFailed: error -52: nested recursion at the same subject position\n\n/x(ab|(bc|(de|(?1)x)x)x)/I\nCapture group count = 3\nFirst code unit = 'x'\nSubject length lower bound = 3\n    xab123\n 0: xab\n 1: ab\n    xfghi\nFailed: error -52: nested recursion at the same subject position\n\n/(?!\\w)(?R)/\n    abcd\nFailed: error -52: nested recursion at the same subject position\n    =abc\nFailed: error -52: nested recursion at the same subject position\n\n/(?=\\w)(?R)/\n    =abc\nFailed: error -52: nested recursion at the same subject position\n    abcd\nFailed: error -52: nested recursion at the same subject position\n\n/(?<!\\w)(?R)/\n    abcd\nFailed: error -52: nested recursion at the same subject position\n\n/(?<=\\w)(?R)/\n    abcd\nFailed: error -52: nested recursion at the same subject position\n\n/(a+|(?R)b)/\n    aaa\n 0: aaa\n 1: aaa\n    bbb\nFailed: error -52: nested recursion at the same subject position\n\n/\u00dd\u00ac\\xff\u00a8((?1))/BI\n------------------------------------------------------------------\n        Bra\n        \u00dd\u00ac\\x{ff}\u00a8\n        CBra 1\n        Recurse\n        Ket\n        Ket\n        End\n------------------------------------------------------------------\nCapture group count = 1\nSubject length lower bound = 1\n    abcd\nFailed: error -52: nested recursion at the same subject position\n\n# These tests don't behave the same with JIT\n\n/\\w+(?C1)/BI,no_auto_possess\n------------------------------------------------------------------\n        Bra\n        \\w+\n        Callout 1 8 0\n        Ket\n        End\n------------------------------------------------------------------\nCapture group count = 0\nOptions: no_auto_possess\nStarting code units: 0 1 2 3 4 5 6 7 8 9 A B C D E F G H I J K L M N O P\n  Q R S T U V W X Y Z _ a b c d e f g h i j k l m n o p q r s t u v w x y z\nSubject length lower bound = 1\n    abc\\=callout_fail=1\n--->abc\n  1 \u00ac  \u00ac    End of pattern\n  1 \u00ac \u00ac     End of pattern\n  1 \u00ac\u00ac      End of pattern\n  1  \u00ac \u00ac    End of pattern\n  1  \u00ac\u00ac     End of pattern\n  1   \u00ac\u00ac    End of pattern\nNo match\n\n/(*NO_AUTO_POSSESS)\\w+(?C1)/BI\n------------------------------------------------------------------\n        Bra\n        \\w+\n        Callout 1 26 0\n        Ket\n        End\n------------------------------------------------------------------\nCapture group count = 0\nCompile options: <none>\nOverall options: no_auto_possess\nStarting code units: 0 1 2 3 4 5 6 7 8 9 A B C D E F G H I J K L M N O P\n  Q R S T U V W X Y Z _ a b c d e f g h i j k l m n o p q r s t u v w x y z\nSubject length lower bound = 1\n    abc\\=callout_fail=1\n--->abc\n  1 \u00ac  \u00ac    End of pattern\n  1 \u00ac \u00ac     End of pattern\n  1 \u00ac\u00ac      End of pattern\n  1  \u00ac \u00ac    End of pattern\n  1  \u00ac\u00ac     End of pattern\n  1   \u00ac\u00ac    End of pattern\nNo match\n\n# This test breaks the JIT stack limit\n\n/(|\u00a8+){2,2452}/\n    (|\u00a8+){2,2452}\n 0:\n 1:\n\n/(*LIMIT_HEAP=21)\\\u00dd(a)\u00a8{60}/expand\n    \\\u00dda\u00a8{60}\nFailed: error -63: heap limit exceeded\n\n/b(?<!ax)(?!cx)/allusedtext\n    abc\n 0: abc\n    < >\n    abcz\n 0: abcz\n    < >>\n\n# End of testinput15\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TSTOT16": {"ttr": 2821, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "\n# This test is run only when JIT support is not available. It checks that an\n# attempt to use it has the expected behaviour. It also tests things that\n# are different without JIT.\n\n/abc/I,jit,jitverify\nCapture group count = 0\nFirst code unit = 'a'\nLast code unit = 'c'\nSubject length lower bound = 3\nJIT support is not available in this version of PCRE2\n\n/a*/I\nCapture group count = 0\nMay match empty string\nSubject length lower bound = 0\n\n# End of testinput16\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TSTOT18": {"ttr": 2823, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "\n# This set of tests is run only with the 8-bit library. It tests the POSIX\n# interface, which is supported only with the 8-bit library. This test should\n# not be run with JIT (which is not available for the POSIX interface).\n\n#forbid_utf\n#pattern posix\n\n# Test some invalid options\n\n/abc/auto_callout\n** Ignored with POSIX interface: auto_callout\n\n/abc/\n   abc\\=find_limits\n** Ignored with POSIX interface: find_limits\n 0: abc\n\n/abc/\n  abc\\=partial_hard\n** Ignored with POSIX interface: partial_hard\n 0: abc\n\n/a(())bc/parens_nest_limit=1\n** Ignored with POSIX interface: parens_nest_limit\n\n/abc/allow_surrogate_escapes,max_pattern_length=2\n** Ignored with POSIX interface: allow_surrogate_escapes max_pattern_length\n\n# Real tests\n\n/abc/\n    abc\n 0: abc\n\n/\u00acabc|def/\n    abcdef\n 0: abc\n    abcdef\\=notbol\n 0: def\n\n/.*((abc)$|(def))/\n    defabc\n 0: defabc\n 1: abc\n 2: abc\n    defabc\\=noteol\n 0: def\n 1: def\n 2: <unset>\n 3: def\n\n/the quick brown fox/\n    the quick brown fox\n 0: the quick brown fox\n\\= Expect no match\n    The Quick Brown Fox\nNo match: POSIX code 17: match failed\n\n/the quick brown fox/i\n    the quick brown fox\n 0: the quick brown fox\n    The Quick Brown Fox\n 0: The Quick Brown Fox\n\n/(*LF)abc.def/\n\\= Expect no match\n    abc\\ndef\nNo match: POSIX code 17: match failed\n\n/(*LF)abc$/\n    abc\n 0: abc\n    abc\\n\n 0: abc\n\n/(abc)\\2/\nFailed: POSIX code 15: bad back reference at offset 6\n\n/(abc\\1)/\n\\= Expect no match\n    abc\nNo match: POSIX code 17: match failed\n\n/a*(b+)(z)(z)/\n    aaaabbbbzzzz\n 0: aaaabbbbzz\n 1: bbbb\n 2: z\n 3: z\n    aaaabbbbzzzz\\=ovector=0\nMatched without capture\n    aaaabbbbzzzz\\=ovector=1\n 0: aaaabbbbzz\n    aaaabbbbzzzz\\=ovector=2\n 0: aaaabbbbzz\n 1: bbbb\n\n/(*ANY)ab.cd/\n    ab-cd\n 0: ab-cd\n    ab=cd\n 0: ab=cd\n\\= Expect no match\n    ab\\ncd\nNo match: POSIX code 17: match failed\n\n/ab.cd/s\n    ab-cd\n 0: ab-cd\n    ab=cd\n 0: ab=cd\n    ab\\ncd\n 0: ab\\x0acd\n\n/a(b)c/posix_nosub\n    abc\nMatched with REG_NOSUB\n\n/a(?P<name>b)c/posix_nosub\n    abc\nMatched with REG_NOSUB\n\n/(a)\\1/posix_nosub\n    zaay\nMatched with REG_NOSUB\n\n/a?|b?/\n    abc\n 0: a\n\\= Expect no match\n    ddd\\=notempty\nNo match: POSIX code 17: match failed\n\n/\\w+A/\n   CDAAAAB\n 0: CDAAAA\n\n/\\w+A/ungreedy\n   CDAAAAB\n 0: CDA\n\n/\\Biss\\B/I,aftertext\n** Ignored with POSIX interface: info\n    Mississippi\n 0: iss\n 0+ issippi\n\n/abc/\\\nFailed: POSIX code 9: bad escape sequence at offset 4\n\n\"(?(?C)\"\nFailed: POSIX code 11: unbalanced () at offset 6\n\n\"(?(?C))\"\nFailed: POSIX code 3: pattern error at offset 6\n\n/abcd/substitute_extended\n** Ignored with POSIX interface: substitute_extended\n\n/\\\u00ddA\u00a8{1000000}**/expand,regerror_buffsize=31\nFailed: POSIX code 4: ? * + invalid at offset 100000\n** regerror() message truncated\n\n/\\\u00ddA\u00a8{1000000}**/expand,regerror_buffsize=32\nFailed: POSIX code 4: ? * + invalid at offset 1000001\n\n//posix_nosub\n    \\=offset=70000\n** Ignored with POSIX interface: offset\nMatched with REG_NOSUB\n\n/(?=(a\\K))/\n    a\nStart of matched string is beyond its end - displaying from end to start.\n 0: a\n 1: a\n\n/\u00acd(e)$/posix\n    acdef\\=posix_startend=2:4\n 0: de\n 1: e\n    acde\\=posix_startend=2\n 0: de\n 1: e\n\\= Expect no match\n    acdef\nNo match: POSIX code 17: match failed\n    acdef\\=posix_startend=2\nNo match: POSIX code 17: match failed\n\n/\u00aca\\x{00}b$/posix\n    a\\x{00}b\\=posix_startend=0:3\n 0: a\\x00b\n\n/\"A\" 00 \"B\"/hex\n    A\\x{00}B\\=posix_startend=0:3\n 0: A\\x00B\n\n/ABC/use_length\n    ABC\n 0: ABC\n\n/a\\b(c/literal,posix\n    a\\\\b(c\n 0: a\\b(c\n\n/a\\b(c/literal,posix,dotall\nFailed: POSIX code 16: bad argument at offset 0\n\n/((a)(b)?(c))/posix\n    123ace\n 0: ac\n 1: ac\n 2: a\n 3: <unset>\n 4: c\n    123ace\\=posix_startend=2:6\n 0: ac\n 1: ac\n 2: a\n 3: <unset>\n 4: c\n\n# End of testdata/testinput18\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TSTOT2": {"ttr": 3073, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "TSTOT20": {"ttr": 4868, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "\n# This set of tests exercises the serialization/deserialization and code copy\n# functions in the library. It does not use UTF or JIT.\n\n#forbid_utf\n\n# Compile several patterns, push them onto the stack, and then write them\n# all to a file.\n\n#pattern push\n\n/(?<NAME>(?&NAME_PAT))\\s+(?<ADDR>(?&ADDRESS_PAT))\n  (?(DEFINE)\n  (?<NAME_PAT>\u00dda-z\u00a8+)\n  (?<ADDRESS_PAT>\\d+)\n  )/x\n/\u00ac(?:((.)(?1)\\2|)|((.)(?3)\\4|.))$/i\n\n#save testsaved1\n\n# Do it again for some more patterns.\n\n/(*MARK:A)(*SKIP:B)(C|X)/mark\n** Ignored when compiled pattern is stacked with 'push': mark\n/(?:(?<n>foo)|(?<n>bar))\\k<n>/dupnames\n\n#save testsaved2\n#pattern -push\n\n# Reload the patterns, then pop them one by one and check them.\n\n#load testsaved1\n#load testsaved2\n\n#pop info\nCapture group count = 2\nMax back reference = 2\nNamed capture groups:\n  n\n  n\nOptions: dupnames\nStarting code units: b f\nSubject length lower bound = 6\n    foofoo\n 0: foofoo\n 1: foo\n    barbar\n 0: barbar\n 1: <unset>\n 2: bar\n\n#pop mark\n    C\n 0: C\n 1: C\nMK: A\n\\= Expect no match\n    D\nNo match, mark = A\n\n#pop\n    AmanaplanacanalPanama\n 0: AmanaplanacanalPanama\n 1: <unset>\n 2: <unset>\n 3: AmanaplanacanalPanama\n 4: A\n\n#pop info\nCapture group count = 4\nNamed capture groups:\n  ADDR          2\n  ADDRESS_PAT   4\n  NAME          1\n  NAME_PAT      3\nOptions: extended\nSubject length lower bound = 3\n    metcalfe 33\n 0: metcalfe 33\n 1: metcalfe\n 2:\n\n# Check for an error when different tables are used.\n\n/abc/push,tables=1\n/xyz/push,tables=2\n#save testsaved1\nSerialization failed: error -30: patterns do not all use the same character tables\n\n#pop\n    xyz\n 0: xyz\n\n#pop\n    abc\n 0: abc\n\n#pop should give an error\n** Can't pop off an empty stack\n    pqr\n\n/abcd/pushcopy\n    abcd\n 0: abcd\n\n#pop\n    abcd\n 0: abcd\n\n#pop should give an error\n** Can't pop off an empty stack\n\n/abcd/push\n#popcopy\n    abcd\n 0: abcd\n\n#pop\n    abcd\n 0: abcd\n\n/abcd/push\n#save testsaved1\n#pop should give an error\n** Can't pop off an empty stack\n\n#load testsaved1\n#popcopy\n    abcd\n 0: abcd\n\n#pop\n    abcd\n 0: abcd\n\n#pop should give an error\n** Can't pop off an empty stack\n\n/abcd/pushtablescopy\n    abcd\n 0: abcd\n\n#popcopy\n    abcd\n 0: abcd\n\n#pop\n    abcd\n 0: abcd\n\n# Must only specify one of these\n\n//push,pushcopy\n** Not allowed together: push pushcopy\n\n//push,pushtablescopy\n** Not allowed together: push pushtablescopy\n\n//pushcopy,pushtablescopy\n** Not allowed together: pushcopy pushtablescopy\n\n# End of testinput20\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TSTOT21": {"ttr": 4870, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "\n# These are tests of \\C that do not involve UTF. They are not run when \\C is\n# disabled by compiling with --enable-never-backslash-C.\n\n/\\C+\\D \\C+\\d \\C+\\S \\C+\\s \\C+\\W \\C+\\w \\C+. \\C+\\R \\C+\\H \\C+\\h \\C+\\V \\C+\\v \\C+\\Z \\C+\\z \\C+$/Bx\n------------------------------------------------------------------\n        Bra\n        AllAny+\n        \\D\n        AllAny+\n        \\d\n        AllAny+\n        \\S\n        AllAny+\n        \\s\n        AllAny+\n        \\W\n        AllAny+\n        \\w\n        AllAny+\n        Any\n        AllAny+\n        \\R\n        AllAny+\n        \\H\n        AllAny+\n        \\h\n        AllAny+\n        \\V\n        AllAny+\n        \\v\n        AllAny+\n        \\Z\n        AllAny++\n        \\z\n        AllAny+\n        $\n        Ket\n        End\n------------------------------------------------------------------\n\n/\\D+\\C \\d+\\C \\S+\\C \\s+\\C \\W+\\C \\w+\\C .+\\C \\R+\\C \\H+\\C \\h+\\C \\V+\\C \\v+\\C a+\\C \\n+\\C \\C+\\C/Bx\n------------------------------------------------------------------\n        Bra\n        \\D+\n        AllAny\n        \\d+\n        AllAny\n        \\S+\n        AllAny\n        \\s+\n        AllAny\n        \\W+\n        AllAny\n        \\w+\n        AllAny\n        Any+\n        AllAny\n        \\R+\n        AllAny\n        \\H+\n        AllAny\n        \\h+\n        AllAny\n        \\V+\n        AllAny\n        \\v+\n        AllAny\n        a+\n        AllAny\n        \\x0a+\n        AllAny\n        AllAny+\n        AllAny\n        Ket\n        End\n------------------------------------------------------------------\n\n/ab\\Cde/never_backslash_c\nFailed: error 183 at offset 4: using \\C is disabled by the application\n\n/ab\\Cde/info\nCapture group count = 0\nContains \\C\nFirst code unit = 'a'\nLast code unit = 'e'\nSubject length lower bound = 5\n    abXde\n 0: abXde\n\n/(?<=ab\\Cde)X/\n    abZdeX\n 0: X\n\n# End of testinput21\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TSTOT23": {"ttr": 4872, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "\n# This test is run when PCRE2 has been built with --enable-never-backslash-C,\n# which disables the use of \\C. All we can do is check that it gives the\n# correct error message.\n\n/a\\Cb/\nFailed: error 185 at offset 3: using \\C is disabled in this PCRE2 library\n\n# End of testinput23\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TSTOT9": {"ttr": 5121, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "\n# This set of tests is run only with the 8-bit library. They must not require\n# UTF-8 or Unicode property support. */\n\n#forbid_utf\n#newline_default lf any anycrlf\n\n/ab/\n\\= Expect error message (too big char) and no match\n    A\\x{123}B\n** Character \\x{123} is greater than 255 and UTF-8 mode is not enabled.\n** Truncation will probably give the wrong result.\nNo match\n    A\\o{443}B\n** Character \\x{123} is greater than 255 and UTF-8 mode is not enabled.\n** Truncation will probably give the wrong result.\nNo match\n\n/\\x{100}/I\nFailed: error 134 at offset 6: character code point value in \\x{} or \\o{} is too large\n\n/\\o{400}/I\nFailed: error 134 at offset 6: character code point value in \\x{} or \\o{} is too large\n\n/  (?: \u00dd\\040\\t\u00a8 |  \\(\n(?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  |  \\( (?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  )* \\)  )*\n\\)  )*                          # optional leading comment\n(?:    (?:\n\u00dd\u00ac(\\040)<>@,;:\".\\\\\\\u00dd\\\u00a8\\000-\\037\\x80-\\xff\u00a8+    # some number of atom characters...\n(?!\u00dd\u00ac(\\040)<>@,;:\".\\\\\\\u00dd\\\u00a8\\000-\\037\\x80-\\xff\u00a8) # ..not followed by something that could be part of an atom\n|\n\" (?:                      # opening quote...\n\u00dd\u00ac\\\\\\x80-\\xff\\n\\015\"\u00a8                #   Anything except backslash and quote\n|                     #    or\n\\\\ \u00dd\u00ac\\x80-\\xff\u00a8           #   Escaped something (something != CR)\n)* \"  # closing quote\n)                    # initial word\n(?:  (?: \u00dd\\040\\t\u00a8 |  \\(\n(?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  |  \\( (?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  )* \\)  )*\n\\)  )*  \\.  (?: \u00dd\\040\\t\u00a8 |  \\(\n(?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  |  \\( (?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  )* \\)  )*\n\\)  )*   (?:\n\u00dd\u00ac(\\040)<>@,;:\".\\\\\\\u00dd\\\u00a8\\000-\\037\\x80-\\xff\u00a8+    # some number of atom characters...\n(?!\u00dd\u00ac(\\040)<>@,;:\".\\\\\\\u00dd\\\u00a8\\000-\\037\\x80-\\xff\u00a8) # ..not followed by something that could be part of an atom\n|\n\" (?:                      # opening quote...\n\u00dd\u00ac\\\\\\x80-\\xff\\n\\015\"\u00a8                #   Anything except backslash and quote\n|                     #    or\n\\\\ \u00dd\u00ac\\x80-\\xff\u00a8           #   Escaped something (something != CR)\n)* \"  # closing quote\n)  )* # further okay, if led by a period\n(?: \u00dd\\040\\t\u00a8 |  \\(\n(?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  |  \\( (?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  )* \\)  )*\n\\)  )*  @  (?: \u00dd\\040\\t\u00a8 |  \\(\n(?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  |  \\( (?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  )* \\)  )*\n\\)  )*    (?:\n\u00dd\u00ac(\\040)<>@,;:\".\\\\\\\u00dd\\\u00a8\\000-\\037\\x80-\\xff\u00a8+    # some number of atom characters...\n(?!\u00dd\u00ac(\\040)<>@,;:\".\\\\\\\u00dd\\\u00a8\\000-\\037\\x80-\\xff\u00a8) # ..not followed by something that could be part of an atom\n|   \\\u00dd                         # \u00dd\n(?: \u00dd\u00ac\\\\\\x80-\\xff\\n\\015\\\u00dd\\\u00a8\u00a8 |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  )*    #    stuff\n\\\u00a8                        #           \u00a8\n)                           # initial subdomain\n(?:                                  #\n(?: \u00dd\\040\\t\u00a8 |  \\(\n(?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  |  \\( (?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  )* \\)  )*\n\\)  )*  \\.                        # if led by a period...\n(?: \u00dd\\040\\t\u00a8 |  \\(\n(?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  |  \\( (?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  )* \\)  )*\n\\)  )*   (?:\n\u00dd\u00ac(\\040)<>@,;:\".\\\\\\\u00dd\\\u00a8\\000-\\037\\x80-\\xff\u00a8+    # some number of atom characters...\n(?!\u00dd\u00ac(\\040)<>@,;:\".\\\\\\\u00dd\\\u00a8\\000-\\037\\x80-\\xff\u00a8) # ..not followed by something that could be part of an atom\n|   \\\u00dd                         # \u00dd\n(?: \u00dd\u00ac\\\\\\x80-\\xff\\n\\015\\\u00dd\\\u00a8\u00a8 |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  )*    #    stuff\n\\\u00a8                        #           \u00a8\n)                     #   ...further okay\n)*\n# address\n|                     #  or\n(?:\n\u00dd\u00ac(\\040)<>@,;:\".\\\\\\\u00dd\\\u00a8\\000-\\037\\x80-\\xff\u00a8+    # some number of atom characters...\n(?!\u00dd\u00ac(\\040)<>@,;:\".\\\\\\\u00dd\\\u00a8\\000-\\037\\x80-\\xff\u00a8) # ..not followed by something that could be part of an atom\n|\n\" (?:                      # opening quote...\n\u00dd\u00ac\\\\\\x80-\\xff\\n\\015\"\u00a8                #   Anything except backslash and quote\n|                     #    or\n\\\\ \u00dd\u00ac\\x80-\\xff\u00a8           #   Escaped something (something != CR)\n)* \"  # closing quote\n)             # one word, optionally followed by....\n(?:\n\u00dd\u00ac()<>@,;:\".\\\\\\\u00dd\\\u00a8\\x80-\\xff\\000-\\010\\012-\\037\u00a8  |  # atom and space parts, or...\n\\(\n(?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  |  \\( (?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  )* \\)  )*\n\\)       |  # comments, or...\n\n\" (?:                      # opening quote...\n\u00dd\u00ac\\\\\\x80-\\xff\\n\\015\"\u00a8                #   Anything except backslash and quote\n|                     #    or\n\\\\ \u00dd\u00ac\\x80-\\xff\u00a8           #   Escaped something (something != CR)\n)* \"  # closing quote\n# quoted strings\n)*\n<  (?: \u00dd\\040\\t\u00a8 |  \\(\n(?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  |  \\( (?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  )* \\)  )*\n\\)  )*                     # leading <\n(?:  @  (?: \u00dd\\040\\t\u00a8 |  \\(\n(?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  |  \\( (?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  )* \\)  )*\n\\)  )*    (?:\n\u00dd\u00ac(\\040)<>@,;:\".\\\\\\\u00dd\\\u00a8\\000-\\037\\x80-\\xff\u00a8+    # some number of atom characters...\n(?!\u00dd\u00ac(\\040)<>@,;:\".\\\\\\\u00dd\\\u00a8\\000-\\037\\x80-\\xff\u00a8) # ..not followed by something that could be part of an atom\n|   \\\u00dd                         # \u00dd\n(?: \u00dd\u00ac\\\\\\x80-\\xff\\n\\015\\\u00dd\\\u00a8\u00a8 |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  )*    #    stuff\n\\\u00a8                        #           \u00a8\n)                           # initial subdomain\n(?:                                  #\n(?: \u00dd\\040\\t\u00a8 |  \\(\n(?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  |  \\( (?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  )* \\)  )*\n\\)  )*  \\.                        # if led by a period...\n(?: \u00dd\\040\\t\u00a8 |  \\(\n(?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  |  \\( (?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  )* \\)  )*\n\\)  )*   (?:\n\u00dd\u00ac(\\040)<>@,;:\".\\\\\\\u00dd\\\u00a8\\000-\\037\\x80-\\xff\u00a8+    # some number of atom characters...\n(?!\u00dd\u00ac(\\040)<>@,;:\".\\\\\\\u00dd\\\u00a8\\000-\\037\\x80-\\xff\u00a8) # ..not followed by something that could be part of an atom\n|   \\\u00dd                         # \u00dd\n(?: \u00dd\u00ac\\\\\\x80-\\xff\\n\\015\\\u00dd\\\u00a8\u00a8 |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  )*    #    stuff\n\\\u00a8                        #           \u00a8\n)                     #   ...further okay\n)*\n\n(?:  (?: \u00dd\\040\\t\u00a8 |  \\(\n(?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  |  \\( (?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  )* \\)  )*\n\\)  )*  ,  (?: \u00dd\\040\\t\u00a8 |  \\(\n(?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  |  \\( (?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  )* \\)  )*\n\\)  )*  @  (?: \u00dd\\040\\t\u00a8 |  \\(\n(?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  |  \\( (?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  )* \\)  )*\n\\)  )*    (?:\n\u00dd\u00ac(\\040)<>@,;:\".\\\\\\\u00dd\\\u00a8\\000-\\037\\x80-\\xff\u00a8+    # some number of atom characters...\n(?!\u00dd\u00ac(\\040)<>@,;:\".\\\\\\\u00dd\\\u00a8\\000-\\037\\x80-\\xff\u00a8) # ..not followed by something that could be part of an atom\n|   \\\u00dd                         # \u00dd\n(?: \u00dd\u00ac\\\\\\x80-\\xff\\n\\015\\\u00dd\\\u00a8\u00a8 |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  )*    #    stuff\n\\\u00a8                        #           \u00a8\n)                           # initial subdomain\n(?:                                  #\n(?: \u00dd\\040\\t\u00a8 |  \\(\n(?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  |  \\( (?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  )* \\)  )*\n\\)  )*  \\.                        # if led by a period...\n(?: \u00dd\\040\\t\u00a8 |  \\(\n(?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  |  \\( (?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  )* \\)  )*\n\\)  )*   (?:\n\u00dd\u00ac(\\040)<>@,;:\".\\\\\\\u00dd\\\u00a8\\000-\\037\\x80-\\xff\u00a8+    # some number of atom characters...\n(?!\u00dd\u00ac(\\040)<>@,;:\".\\\\\\\u00dd\\\u00a8\\000-\\037\\x80-\\xff\u00a8) # ..not followed by something that could be part of an atom\n|   \\\u00dd                         # \u00dd\n(?: \u00dd\u00ac\\\\\\x80-\\xff\\n\\015\\\u00dd\\\u00a8\u00a8 |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  )*    #    stuff\n\\\u00a8                        #           \u00a8\n)                     #   ...further okay\n)*\n)* # further okay, if led by comma\n:                                # closing colon\n(?: \u00dd\\040\\t\u00a8 |  \\(\n(?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  |  \\( (?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  )* \\)  )*\n\\)  )*  )? #       optional route\n(?:\n\u00dd\u00ac(\\040)<>@,;:\".\\\\\\\u00dd\\\u00a8\\000-\\037\\x80-\\xff\u00a8+    # some number of atom characters...\n(?!\u00dd\u00ac(\\040)<>@,;:\".\\\\\\\u00dd\\\u00a8\\000-\\037\\x80-\\xff\u00a8) # ..not followed by something that could be part of an atom\n|\n\" (?:                      # opening quote...\n\u00dd\u00ac\\\\\\x80-\\xff\\n\\015\"\u00a8                #   Anything except backslash and quote\n|                     #    or\n\\\\ \u00dd\u00ac\\x80-\\xff\u00a8           #   Escaped something (something != CR)\n)* \"  # closing quote\n)                    # initial word\n(?:  (?: \u00dd\\040\\t\u00a8 |  \\(\n(?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  |  \\( (?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  )* \\)  )*\n\\)  )*  \\.  (?: \u00dd\\040\\t\u00a8 |  \\(\n(?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  |  \\( (?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  )* \\)  )*\n\\)  )*   (?:\n\u00dd\u00ac(\\040)<>@,;:\".\\\\\\\u00dd\\\u00a8\\000-\\037\\x80-\\xff\u00a8+    # some number of atom characters...\n(?!\u00dd\u00ac(\\040)<>@,;:\".\\\\\\\u00dd\\\u00a8\\000-\\037\\x80-\\xff\u00a8) # ..not followed by something that could be part of an atom\n|\n\" (?:                      # opening quote...\n\u00dd\u00ac\\\\\\x80-\\xff\\n\\015\"\u00a8                #   Anything except backslash and quote\n|                     #    or\n\\\\ \u00dd\u00ac\\x80-\\xff\u00a8           #   Escaped something (something != CR)\n)* \"  # closing quote\n)  )* # further okay, if led by a period\n(?: \u00dd\\040\\t\u00a8 |  \\(\n(?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  |  \\( (?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  )* \\)  )*\n\\)  )*  @  (?: \u00dd\\040\\t\u00a8 |  \\(\n(?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  |  \\( (?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  )* \\)  )*\n\\)  )*    (?:\n\u00dd\u00ac(\\040)<>@,;:\".\\\\\\\u00dd\\\u00a8\\000-\\037\\x80-\\xff\u00a8+    # some number of atom characters...\n(?!\u00dd\u00ac(\\040)<>@,;:\".\\\\\\\u00dd\\\u00a8\\000-\\037\\x80-\\xff\u00a8) # ..not followed by something that could be part of an atom\n|   \\\u00dd                         # \u00dd\n(?: \u00dd\u00ac\\\\\\x80-\\xff\\n\\015\\\u00dd\\\u00a8\u00a8 |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  )*    #    stuff\n\\\u00a8                        #           \u00a8\n)                           # initial subdomain\n(?:                                  #\n(?: \u00dd\\040\\t\u00a8 |  \\(\n(?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  |  \\( (?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  )* \\)  )*\n\\)  )*  \\.                        # if led by a period...\n(?: \u00dd\\040\\t\u00a8 |  \\(\n(?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  |  \\( (?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  )* \\)  )*\n\\)  )*   (?:\n\u00dd\u00ac(\\040)<>@,;:\".\\\\\\\u00dd\\\u00a8\\000-\\037\\x80-\\xff\u00a8+    # some number of atom characters...\n(?!\u00dd\u00ac(\\040)<>@,;:\".\\\\\\\u00dd\\\u00a8\\000-\\037\\x80-\\xff\u00a8) # ..not followed by something that could be part of an atom\n|   \\\u00dd                         # \u00dd\n(?: \u00dd\u00ac\\\\\\x80-\\xff\\n\\015\\\u00dd\\\u00a8\u00a8 |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  )*    #    stuff\n\\\u00a8                        #           \u00a8\n)                     #   ...further okay\n)*\n#       address spec\n(?: \u00dd\\040\\t\u00a8 |  \\(\n(?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  |  \\( (?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  )* \\)  )*\n\\)  )*  > #                  trailing >\n# name and address\n)  (?: \u00dd\\040\\t\u00a8 |  \\(\n(?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  |  \\( (?:  \u00dd\u00ac\\\\\\x80-\\xff\\n\\015()\u00a8  |  \\\\ \u00dd\u00ac\\x80-\\xff\u00a8  )* \\)  )*\n\\)  )*                       # optional trailing comment\n/Ix\nCapture group count = 0\nContains explicit CR or LF match\nOptions: extended\nStarting code units: \\x09 \\x20 ! \" # $ % & ' ( * + - / 0 1 2 3 4 5 6 7 8\n  9 = ? A B C D E F G H I J K L M N O P Q R S T U V W X Y Z \u00ac _ ` a b c d e\n  f g h i j k l m n o p q r s t u v w x y z { | } ~ \\x7f\nSubject length lower bound = 3\n\n/\\h/I\nCapture group count = 0\nStarting code units: \\x09 \\x20 \\xa0\nSubject length lower bound = 1\n\n/\\H/I\nCapture group count = 0\nSubject length lower bound = 1\n\n/\\v/I\nCapture group count = 0\nStarting code units: \\x0a \\x0b \\x0c \\x0d \\x85\nSubject length lower bound = 1\n\n/\\V/I\nCapture group count = 0\nSubject length lower bound = 1\n\n/\\R/I\nCapture group count = 0\nStarting code units: \\x0a \\x0b \\x0c \\x0d \\x85\nSubject length lower bound = 1\n\n/\u00dd\\h\u00a8/B\n------------------------------------------------------------------\n        Bra\n        \u00dd\\x09 \\xa0\u00a8\n        Ket\n        End\n------------------------------------------------------------------\n    >\\x09<\n 0: \\x09\n\n/\u00dd\\h\u00a8+/B\n------------------------------------------------------------------\n        Bra\n        \u00dd\\x09 \\xa0\u00a8++\n        Ket\n        End\n------------------------------------------------------------------\n    >\\x09\\x20\\xa0<\n 0: \\x09 \\xa0\n\n/\u00dd\\v\u00a8/B\n------------------------------------------------------------------\n        Bra\n        \u00dd\\x0a-\\x0d\\x85\u00a8\n        Ket\n        End\n------------------------------------------------------------------\n\n/\u00dd\\H\u00a8/B\n------------------------------------------------------------------\n        Bra\n        \u00dd\\x00-\\x08\\x0a-\\x1f!-\\x9f\\xa1-\\xff\u00a8\n        Ket\n        End\n------------------------------------------------------------------\n\n/\u00dd\u00ac\\h\u00a8/B\n------------------------------------------------------------------\n        Bra\n        \u00dd\\x00-\\x08\\x0a-\\x1f!-\\x9f\\xa1-\\xff\u00a8 (neg)\n        Ket\n        End\n------------------------------------------------------------------\n\n/\u00dd\\V\u00a8/B\n------------------------------------------------------------------\n        Bra\n        \u00dd\\x00-\\x09\\x0e-\\x84\\x86-\\xff\u00a8\n        Ket\n        End\n------------------------------------------------------------------\n\n/\u00dd\\x0a\\V\u00a8/B\n------------------------------------------------------------------\n        Bra\n        \u00dd\\x00-\\x0a\\x0e-\\x84\\x86-\\xff\u00a8\n        Ket\n        End\n------------------------------------------------------------------\n\n/\\777/I\nFailed: error 151 at offset 4: octal value is greater than \\377 in 8-bit non-UTF-8 mode\n\n/(*:0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456\n789ABCDEF)XX/mark\nFailed: error 176 at offset 259: name is too long in (*MARK), (*PRUNE), (*SKIP), or (*THEN)\n    XX\n\n/(*:0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456\n789ABCDEF)XX/mark,alt_verbnames\nFailed: error 176 at offset 259: name is too long in (*MARK), (*PRUNE), (*SKIP), or (*THEN)\n    XX\n\n/(*:0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456\n789ABCDE)XX/mark\n    XX\n 0: XX\nMK: 0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456\n789ABCDE\n\n/(*:0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456\n789ABCDE)XX/mark,alt_verbnames\n    XX\n 0: XX\nMK: 0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456789ABCDEF0123456\n789ABCDE\n\n/\\u0100/alt_bsux,allow_empty_class,match_unset_backref,dupnames\nFailed: error 177 at offset 6: character code point value in \\u.... sequence is too large\n\n/\u00dd\\u0100-\\u0200\u00a8/alt_bsux,allow_empty_class,match_unset_backref,dupnames\nFailed: error 177 at offset 7: character code point value in \\u.... sequence is too large\n\n/\u00dd\u00ac\\x00-a\u00a8{12,}\u00dd\u00acb-\\xff\u00a8*/B\n------------------------------------------------------------------\n        Bra\n        \u00ddb-\\xff\u00a8 (neg){12,}+\n        \u00dd\\x00-a\u00a8 (neg)*+\n        Ket\n        End\n------------------------------------------------------------------\n\n/\u00dd\u00ac\\s\u00a8*\\s* \u00dd\u00ac\\W\u00a8+\\W+ \u00dd\u00ac\\d\u00a8*?\\d0 \u00dd\u00ac\\d\\w\u00a8{4,6}?\\w*A/B\n------------------------------------------------------------------\n        Bra\n        \u00dd\\x00-\\x08\\x0e-\\x1f!-\\xff\u00a8 (neg)*+\n        \\s*\n\n        \u00dd0-9A-Z_a-z\u00a8++\n        \\W+\n\n        \u00dd\\x00-/:-\\xff\u00a8 (neg)*+\n        \\d\n        0\n        \u00dd\\x00-/:-@\u00dd-\u00ac`{-\\xff\u00a8 (neg){4,6}+\n        \\w*\n        A\n        Ket\n        End\n------------------------------------------------------------------\n\n/(*MARK:a\\x{100}b)z/alt_verbnames\nFailed: error 134 at offset 14: character code point value in \\x{} or \\o{} is too large\n\n/(*:*++++++++++++''''''''''''''''''''+''+++'+++x+++++++++++++++++++++++++++++++++++(++++++++++++++++++++:++++++%++:''''''''''''''''''''''''+++++++++++++++++++++++++++++++++++++++++++++++++++++-++++++++k+++++++''''+++'+++++++++++++++++++++++''''+++++++\n+++++':\u00c6\u00bf)/\nFailed: error 176 at offset 259: name is too long in (*MARK), (*PRUNE), (*SKIP), or (*THEN)\n\n# End of testinput9\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT939/CBT.V500.FILE939.PDS/TESTLIB.xmi", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT939/CBT.V500.FILE939.PDS", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}