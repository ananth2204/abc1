{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "ZATLAS1", "INMTNODE": "A", "INMTUID": "ZATLAS1", "INMFTIME": "20200906020753000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 676249, "INMDSORG": "PO", "INMTYPE": "Data Library", "INMLRECL": 80, "INMBLKSZ": 32720, "INMRECFM": "FB", "INMDIR": 1, "INMDSNAM": "ZATLAS1.PCRE2.JCLLIB", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 676249, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 676249, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"ZATLAS1.PCRE2.JCLLIB": {"COPYR1": {"type": "PDSE", "DS1DSORG": 512, "DS1BLKL": 32720, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 8, "DVACLASS": 32, "DVAUNIT": 0, "DVAMAXRC": 32760, "DVACYL": 256, "DVATRK": 256, "DVATRKLN": 65535, "DVAOVHD": 0, "num_header_records": 0}, "COPYR2": {"deb": "b'\\x03\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x00\\x00\\x00\\x04\\x00\\x00\\x00'", "extents": ["b'\\x03\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x00\\x00\\x00\\x04\\x00\\x00\\x00'", "b'\\x00\\rXH\\x00\\x00\\x00\\x00\\x00\\x00\\x00~\\x00\\xff\\x7f\\x00'", "b'\\x00\\rXH\\x00\\x00\\x00\\x7f\\x00\\x00\\x00\\xfd\\x00\\xff\\x7f\\x00'", "b'\\x00\\rXH\\x00\\x00\\x00\\xfe\\x00\\x00\\x00\\xff\\x00\\xff\\x02\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"ADDASM": {"ttr": 9, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00F\\x01\\x17\\x12\\x0f\\x01\\x17\\x12\\x0f!R\\x00\\x18\\x00\\x18\\x00\\x00\\xe9\\xc1\\xe3\\xd3\\xc1\\xe2\\xf1@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2017-04-30T00:00:00", "modifydate": "2017-04-30T21:52:46", "lines": 24, "newlines": 24, "modlines": 0, "user": "ZATLAS1"}, "text": "//ZATLAS1R JOB (12345678),ZATLAS1,MSGCLASS=H,\n//        MSGLEVEL=(1,1),CLASS=A,NOTIFY=&SYSUID\n//***************************************************************\n//***************JCL CREATED BY ZEEV ATLAS  *********************\n//***************************************************************\n//*\n// SET PARMHLQ=ZATLAS1\n// SET PARMMLQ=PCRE2\n// SET PARMLLQ=ASM\n// SET IFILE=&PARMHLQ..ZOS.ASM\n//UPDTE EXEC PGM=IEBUPDTE\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  DSNAME=&PARMHLQ..&PARMMLQ..&PARMLLQ,DISP=SHR <== MODIFY\n//SYSUT2   DD  DSNAME=&PARMHLQ..&PARMMLQ..&PARMLLQ,DISP=SHR <== MODIFY\n//SYSIN    DD  DSN=&IFILE,DISP=SHR\n// SET PARMMLQ=C14\n// SET PARMLLQ=MACLIB\n// SET IFILE=&PARMHLQ..C14.IEB\n//UPDTE EXEC PGM=IEBUPDTE\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  DSNAME=&PARMHLQ..&PARMMLQ..&PARMLLQ,DISP=SHR <== MODIFY\n//SYSUT2   DD  DSNAME=&PARMHLQ..&PARMMLQ..&PARMLLQ,DISP=SHR <== MODIFY\n//SYSIN    DD  DSN=&IFILE,DISP=SHR\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ADDCNTL": {"ttr": 11, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//ZATLAS1R JOB (12345678),ZATLAS1,MSGCLASS=H,\n//        MSGLEVEL=(1,1),CLASS=A,NOTIFY=&SYSUID\n//***************************************************************\n//***************JCL CREATED BY ZEEV ATLAS  *********************\n//***************************************************************\n//*\n// SET PARMHLQ=ZATLAS1\n// SET PARMMLQ=PCRE2\n// SET PARMLLQ=CNTLLIB\n// SET IFILE=ZATLAS1.ZOS.LKED\n//UPDTE EXEC PGM=IEBUPDTE\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  DSNAME=&PARMHLQ..&PARMMLQ..&PARMLLQ,DISP=SHR <== MODIFY\n//SYSUT2   DD  DSNAME=&PARMHLQ..&PARMMLQ..&PARMLLQ,DISP=SHR <== MODIFY\n//SYSIN    DD  DSN=&IFILE,DISP=SHR\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ADDCOB": {"ttr": 13, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//ZATLAS1R JOB (12345678),ZATLAS1,MSGCLASS=H,\n//        MSGLEVEL=(1,1),CLASS=A,NOTIFY=&SYSUID\n//***************************************************************\n//***************JCL CREATED BY ZEEV ATLAS  *********************\n//***************************************************************\n//*\n// SET PARMHLQ=ZATLAS1\n// SET PARMMLQ=PCRE2\n// SET PARMLLQ=COB\n// SET IFILE=ZATLAS1.ZOS.COB\n//UPDTE EXEC PGM=IEBUPDTE\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  DSNAME=&PARMHLQ..&PARMMLQ..&PARMLLQ,DISP=SHR <== MODIFY\n//SYSUT2   DD  DSNAME=&PARMHLQ..&PARMMLQ..&PARMLLQ,DISP=SHR <== MODIFY\n//SYSIN    DD  DSN=&IFILE,DISP=SHR\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ADDJCL": {"ttr": 15, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x009\\x01\\x15&\\x7f\\x01\\x18\\x03_\\x183\\x00\\x0f\\x00\\x19\\x00\\x00\\xe9\\xc1\\xe3\\xd3\\xc1\\xe2\\xf1@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2015-09-24T00:00:00", "modifydate": "2018-02-04T18:33:39", "lines": 15, "newlines": 25, "modlines": 0, "user": "ZATLAS1"}, "text": "//ZATLAS1R JOB (12345678),ZATLAS1,MSGCLASS=H,\n//        MSGLEVEL=(1,1),CLASS=A,NOTIFY=&SYSUID\n//***************************************************************\n//***************JCL CREATED BY ZEEV ATLAS  *********************\n//***************************************************************\n//*\n// SET PARMHLQ=ZATLAS1\n// SET PARMMLQ=PCRE2\n// SET PARMLLQ=JCLLIB\n// SET IFILE=ZATLAS1.ZOS.JCLLIB\n//UPDTE EXEC PGM=IEBUPDTE\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  DSNAME=&PARMHLQ..&PARMMLQ..&PARMLLQ,DISP=SHR <== MODIFY\n//SYSUT2   DD  DSNAME=&PARMHLQ..&PARMMLQ..&PARMLLQ,DISP=SHR <== MODIFY\n//SYSIN    DD  DSN=&IFILE,DISP=SHR\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ADDMEM": {"ttr": 17, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x02\\x00'\\x01\\x18\\x07\\x0f\\x01\\x18\\x07?\\x00\\x00\\x00\\x16\\x00\\x16\\x00\\x00\\xe9\\xc1\\xe3\\xd3\\xc1\\xe2\\xf1@@@\"", "ispf": {"version": "01.02", "flags": 0, "createdate": "2018-03-11T00:00:00", "modifydate": "2018-03-14T00:00:27", "lines": 22, "newlines": 22, "modlines": 0, "user": "ZATLAS1"}, "text": "//ZATLAS1R JOB (12345678),ZATLAS1,MSGCLASS=H,\n//        MSGLEVEL=(1,1),CLASS=A,NOTIFY=&SYSUID\n//***************************************************************\n//***************JCL CREATED BY ZEEV ATLAS  *********************\n//***************************************************************\n//*\n// SET PARM1=ZATLAS1.ZOS.LOAD\n// SET PARM2=ZATLAS1.PCRE2.SRCE\n// SET EXEHLQ=ZATLAS1\n// SET EXEMLQ=PCRE2\n// SET EXELLQ=CNTLLIB\n//TSOBATCH EXEC PGM=IKJEFT1A,DYNAMNBR=200,\n//  PARM='ADDMEM &PARM1 &PARM2'\n//SYSEXEC  DD DSN=&EXEHLQ..&EXEMLQ..&EXELLQ,DISP=SHR <== MODIFY\n//SYSPRINT DD SYSOUT=*\n//SYSTSPRT DD SYSOUT=*\n//SYSTSIN  DD DUMMY\n//TRANSLAT DD *                     <== OR DUMMY\n'B0'X '5F'X\n'05'X '40'X\n/*\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ADDREXX": {"ttr": 19, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00'\\x01\\x18\\tO\\x01\\x18\\tO\\x180\\x00\\x0f\\x00\\x0f\\x00\\x00\\xe9\\xc1\\xe3\\xd3\\xc1\\xe2\\xf1@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "2018-04-04T00:00:00", "modifydate": "2018-04-04T18:30:27", "lines": 15, "newlines": 15, "modlines": 0, "user": "ZATLAS1"}, "text": "//ZATLAS1R JOB (12345678),ZATLAS1,MSGCLASS=H,\n//        MSGLEVEL=(1,1),CLASS=A,NOTIFY=&SYSUID\n//***************************************************************\n//***************JCL CREATED BY ZEEV ATLAS  *********************\n//***************************************************************\n//*\n// SET PARMHLQ=ZATLAS1\n// SET PARMMLQ=PCRE2\n// SET PARMLLQ=CNTLLIB\n// SET IFILE=ZATLAS1.ZOS.REXX\n//UPDTE EXEC PGM=IEBUPDTE\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  DSNAME=&PARMHLQ..&PARMMLQ..&PARMLLQ,DISP=SHR <== MODIFY\n//SYSUT2   DD  DSNAME=&PARMHLQ..&PARMMLQ..&PARMLLQ,DISP=SHR <== MODIFY\n//SYSIN    DD  DSN=&IFILE,DISP=SHR\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ADDTEST": {"ttr": 21, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x04\\x01\\x18\\x10/\\x01\\x18\\x10/#\\x13\\x00\\x13\\x00\\x13\\x00\\x00\\xe9\\xc1\\xe3\\xd3\\xc1\\xe2\\xf1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2018-04-12T00:00:00", "modifydate": "2018-04-12T23:13:04", "lines": 19, "newlines": 19, "modlines": 0, "user": "ZATLAS1"}, "text": "//ZATLAS1R JOB (12345678),ZATLAS1,MSGCLASS=H,\n//        MSGLEVEL=(1,1),CLASS=A,NOTIFY=&SYSUID\n//***************************************************************\n//***************JCL CREATED BY ZEEV ATLAS  *********************\n//***************************************************************\n//*\n// SET PARM1=ZATLAS1.ZOS.TEST\n// SET PARM2=ZATLAS1.PCRE2.TESTLIB\n// SET EXEHLQ=ZATLAS1\n// SET EXEMLQ=PCRE2\n// SET EXELLQ=CNTLLIB\n//TSOBATCH EXEC PGM=IKJEFT1A,DYNAMNBR=200,\n//  PARM='ADDMEM &PARM1 &PARM2'\n//SYSEXEC  DD DSN=&EXEHLQ..&EXEMLQ..&EXELLQ,DISP=SHR <== MODIFY\n//SYSPRINT DD SYSOUT=*\n//SYSTSPRT DD SYSOUT=*\n//SYSTSIN  DD DUMMY\n//TRANSLAT DD *                 <== OR DUMMY\n'B0'X '5F'X\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ALLOCPDS": {"ttr": 23, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00T\\x01\\x17\\x12\\x1f\\x01\\x18&/#\\x17\\x00A\\x00A\\x00\\x00\\xe9\\xc1\\xe3\\xd3\\xc1\\xe2\\xf1@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2017-05-01T00:00:00", "modifydate": "2018-09-19T23:17:54", "lines": 65, "newlines": 65, "modlines": 0, "user": "ZATLAS1"}, "text": "//ZATLAS1A JOB (12345678),ZATLAS1,MSGCLASS=H,\n//        MSGLEVEL=(1,1),CLASS=A,NOTIFY=&SYSUID\n// SET PARMHLQ=ZATLAS1\n// SET PARMMLQ=PCRE2\n// SET VER=\n//* SET PARMLLQ=SOMETHING\n//**********************************************************\n//**           CREATE THE PDSE/PDS FOR PCRE               **\n//**********************************************************\n//STEP10  EXEC PGM=IEFBR14\n//DD0      DD DSN=&PARMHLQ..&PARMMLQ&VER..LOADLIB,\n//             DISP=(NEW,CATLG,DELETE),\n//             UNIT=3390,SPACE=(TRK,(75,15,60)),\n//             DCB=(BLKSIZE=27998,DSORG=PO,RECFM=U),\n//             DSNTYPE=LIBRARY\n//DD1      DD DSN=&PARMHLQ..&PARMMLQ&VER..CNTLLIB,\n//             DISP=(NEW,CATLG,DELETE),\n//             UNIT=3390,SPACE=(TRK,(5,2,60)),\n//             DCB=(DSORG=PO,RECFM=FB,LRECL=80,BLKSIZE=0),\n//             DSNTYPE=LIBRARY\n//DD2      DD DSN=&PARMHLQ..&PARMMLQ&VER..JCLLIB,\n//             DISP=(NEW,CATLG,DELETE),\n//             UNIT=3390,SPACE=(TRK,(5,2,60)),\n//             DCB=(DSORG=PO,RECFM=FB,LRECL=80,BLKSIZE=0),\n//             DSNTYPE=LIBRARY\n//*DD3      DD DSN=&PARMHLQ..&PARMMLQ&VER..PLI,\n//*             DISP=(NEW,CATLG,DELETE),\n//*             UNIT=3390,SPACE=(TRK,(5,5,60)),\n//*             DCB=(DSORG=PO,RECFM=FB,LRECL=80,BLKSIZE=0),\n//*             DSNTYPE=LIBRARY\n//DD4      DD DSN=&PARMHLQ..&PARMMLQ&VER..COB,\n//             DISP=(NEW,CATLG,DELETE),\n//             UNIT=3390,SPACE=(TRK,(5,5,60)),\n//             DCB=(DSORG=PO,RECFM=FB,LRECL=80,BLKSIZE=0),\n//             DSNTYPE=LIBRARY\n//DD5      DD DSN=&PARMHLQ..&PARMMLQ&VER..SRCE,\n//            DISP=(NEW,CATLG,DELETE),\n//            SPACE=(TRK,(75,15,60)),\n//            UNIT=3390,\n//            DCB=(DSORG=PO,RECFM=VB,LRECL=255,BLKSIZE=0)\n//DD6      DD DSN=&PARMHLQ..&PARMMLQ&VER..TESTLIB,\n//            DISP=(NEW,CATLG,DELETE),\n//            SPACE=(TRK,(75,15,60)),\n//            UNIT=3390,\n//            DCB=(DSORG=PO,RECFM=VB,LRECL=4014,BLKSIZE=0)\n//DD7      DD DSN=&PARMHLQ..&PARMMLQ&VER..SYSOUT,\n//            DISP=(NEW,CATLG,DELETE),\n//            SPACE=(TRK,(300,15,60)),\n//            UNIT=3390,\n//            DCB=(DSORG=PO,RECFM=FBA,LRECL=133,BLKSIZE=0)\n//DD8      DD DSN=&PARMHLQ..&PARMMLQ&VER..STDOUT,\n//            DISP=(NEW,CATLG,DELETE),\n//            SPACE=(TRK,(15,5,60)),\n//            UNIT=3390,\n//            DCB=(DSORG=PO,RECFM=VB,LRECL=31000,BLKSIZE=0)\n//DD9      DD DSN=&PARMHLQ..&PARMMLQ&VER..ASM,\n//             DISP=(NEW,CATLG,DELETE),\n//             UNIT=3390,SPACE=(TRK,(5,5,60)),\n//             DCB=(DSORG=PO,RECFM=FB,LRECL=80,BLKSIZE=0),\n//             DSNTYPE=LIBRARY\n//DD10     DD DSN=&PARMHLQ..C14.MACLIB,\n//             DISP=(NEW,CATLG,DELETE),\n//             UNIT=3390,SPACE=(TRK,(5,5,60)),\n//             DCB=(DSORG=PO,RECFM=FB,LRECL=80,BLKSIZE=0),\n//             DSNTYPE=LIBRARY\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "COMPAPI": {"ttr": 119, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00G\\x01\\x194\\x9f\\x01\\x194\\x9f!8\\x00\\x1e\\x00\\t\\x00\\x00\\xe9\\xc1\\xe3\\xd3\\xc1\\xe2\\xf1@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2019-12-15T00:00:00", "modifydate": "2019-12-15T21:38:47", "lines": 30, "newlines": 9, "modlines": 0, "user": "ZATLAS1"}, "text": "//ZATLAS1C JOB (12345678),ZATLAS1,MSGCLASS=H,\n//        MSGLEVEL=(1,1),CLASS=A,NOTIFY=&SYSUID\n//* AUTOMATICALLY GENERATED JCL AS PART AS PCRE2 PORT TO NATIVE Z/OS\n// SET PCREHLQ=ZATLAS1\n// SET PCREMLQ=PCRE2\n// SET PCRESRC=SRCE\n// SET PCREJCL=JCLLIB\n// SET PCREPRM=CNTLLIB\n// SET PCRELOAD=LOADLIB\n// SET MEMBER=PCRZFUNC\n//STEP07 EXEC EDCCL,CPARM2='OPTFILE(DD:OPTFILE) ARCH(8) TUNE(8)',\n//      CPARM3=CSECT(&MEMBER)\n//COMPILE.SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC(&MEMBER),DISP=SHR\n//USERLIB  DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC,DISP=SHR\n//COMPILE.SYSCRPT DD SYSOUT=*\n//OPTFILE DD DSN=&PCREHLQ..&PCREMLQ..&PCREJCL(OPTFILE),DISP=SHR\n//LKED.SYSLIB  DD\n//        DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD(&MEMBER),DISP=SHR\n// SET MEMBER=PCOBAPI2\n//STEP33 EXEC EDCCL,CPARM2='OPTFILE(DD:OPTFILE) ARCH(8) TUNE(8)',\n//      CPARM3=CSECT(&MEMBER)\n//COMPILE.SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC(&MEMBER),DISP=SHR\n//USERLIB  DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC,DISP=SHR\n//COMPILE.SYSCRPT DD SYSOUT=*\n//OPTFILE DD DSN=&PCREHLQ..&PCREMLQ..&PCREJCL(OPTFILE),DISP=SHR\n//LKED.SYSLIB  DD\n//        DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD(&MEMBER),DISP=SHR\n//SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCREPRM(&MEMBER),DISP=SHR\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "COMPART": {"ttr": 69, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\n\\x00\\x02\\x01\\x16\"\\x7f\\x01\\x19\\x11_\\x10\\x05\\x01x\\x01(\\x00\\x00\\xe9\\xc1\\xe3\\xd3\\xc1\\xe2\\xf1@@@'", "ispf": {"version": "01.10", "flags": 0, "createdate": "2016-08-14T00:00:00", "modifydate": "2019-04-25T10:05:02", "lines": 376, "newlines": 296, "modlines": 0, "user": "ZATLAS1"}, "text": "//ZATLAS1C JOB (12345678),ZATLAS1,MSGCLASS=H,\n//        MSGLEVEL=(1,1),CLASS=A,NOTIFY=&SYSUID\n//* AUTOMATICALLY GENERATED JCL AS PART AS PCRE2 PORT TO NATIVE Z/OS\n// SET PCREHLQ=ZATLAS1\n// SET PCREMLQ=PCRE2\n// SET PCRESRC=SRCE\n// SET PCREJCL=JCLLIB\n// SET PCREPRM=CNTLLIB\n// SET PCRELOAD=LOADLIB\n// SET MEMBER=DFTABLES\n//STEP1 EXEC EDCCL,CPARM2='OPTFILE(DD:OPTFILE)',\n//      CPARM3=CSECT(&MEMBER)\n//COMPILE.SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC(&MEMBER),DISP=SHR\n//USERLIB  DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC,DISP=SHR\n//COMPILE.SYSCRPT DD SYSOUT=*\n//OPTFILE DD DSN=&PCREHLQ..&PCREMLQ..&PCREJCL(OPTFILE),DISP=SHR\n//LKED.SYSLIB  DD\n//        DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD(&MEMBER),DISP=SHR\n//*******************************************************************\n//**** DFTABLES HAS TO RUN TO GENERATE THE NEXT MEMBER TO COMPILE:\n//*******************************************************************\n//DFTBL EXEC PGM=DFTABLES,\n//  PARM='PCRE2.SRCE(CHARTAB2)'\n//STEPLIB DD DSN=ZATLAS1.PCRE2.LOADLIB,DISP=SHR\n//SYSPRINT DD SYSOUT=*\n// SET MEMBER=CHARTAB2\n//STEP1 EXEC EDCCL,CPARM2='OPTFILE(DD:OPTFILE)',\n//      CPARM3=CSECT(&MEMBER)\n//COMPILE.SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC(&MEMBER),DISP=SHR\n//USERLIB  DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC,DISP=SHR\n//COMPILE.SYSCRPT DD SYSOUT=*\n//OPTFILE DD DSN=&PCREHLQ..&PCREMLQ..&PCREJCL(OPTFILE),DISP=SHR\n//LKED.SYSLIB  DD\n//        DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD(&MEMBER),DISP=SHR\n//* SET MEMBER=EXTUNI2\n//*STEP1 EXEC EDCCL,CPARM2='OPTFILE(DD:OPTFILE)',\n//*     CPARM3=CSECT(&MEMBER)\n//*COMPILE.SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC(&MEMBER),DISP=SHR\n//*USERLIB DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC,DISP=SHR\n//*COMPILE.SYSCRPT DD SYSOUT=*\n//*OPTFILE DD DSN=&PCREHLQ..&PCREMLQ..&PCREJCL(OPTFILE),DISP=SHR\n//*LKED.SYSLIB DD\n//*       DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD,DISP=SHR\n//*LKED.SYSLMOD DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD(&MEMBER),DISP=SHR\n// SET MEMBER=ERROR2\n//STEP1 EXEC EDCCL,CPARM2='OPTFILE(DD:OPTFILE)',\n//      CPARM3=CSECT(&MEMBER)\n//COMPILE.SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC(&MEMBER),DISP=SHR\n//USERLIB  DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC,DISP=SHR\n//COMPILE.SYSCRPT DD SYSOUT=*\n//OPTFILE DD DSN=&PCREHLQ..&PCREMLQ..&PCREJCL(OPTFILE),DISP=SHR\n//LKED.SYSLIB  DD\n//        DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD(&MEMBER),DISP=SHR\n// SET MEMBER=JITCOMP2\n//STEP1 EXEC EDCCL,CPARM2='OPTFILE(DD:OPTFILE)',\n//      CPARM3=CSECT(&MEMBER)\n//COMPILE.SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC(&MEMBER),DISP=SHR\n//USERLIB  DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC,DISP=SHR\n//COMPILE.SYSCRPT DD SYSOUT=*\n//OPTFILE DD DSN=&PCREHLQ..&PCREMLQ..&PCREJCL(OPTFILE),DISP=SHR\n//LKED.SYSLIB  DD\n//        DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD(&MEMBER),DISP=SHR\n// SET MEMBER=MAKETAB2\n//STEP1 EXEC EDCCL,CPARM2='OPTFILE(DD:OPTFILE)',\n//      CPARM3=CSECT(&MEMBER)\n//COMPILE.SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC(&MEMBER),DISP=SHR\n//USERLIB  DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC,DISP=SHR\n//COMPILE.SYSCRPT DD SYSOUT=*\n//OPTFILE DD DSN=&PCREHLQ..&PCREMLQ..&PCREJCL(OPTFILE),DISP=SHR\n//LKED.SYSLIB  DD\n//        DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD(&MEMBER),DISP=SHR\n// SET MEMBER=NEWLINE2\n//STEP1 EXEC EDCCL,CPARM2='OPTFILE(DD:OPTFILE)',\n//      CPARM3=CSECT(&MEMBER)\n//COMPILE.SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC(&MEMBER),DISP=SHR\n//USERLIB  DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC,DISP=SHR\n//COMPILE.SYSCRPT DD SYSOUT=*\n//OPTFILE DD DSN=&PCREHLQ..&PCREMLQ..&PCREJCL(OPTFILE),DISP=SHR\n//LKED.SYSLIB  DD\n//        DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD(&MEMBER),DISP=SHR\n// SET MEMBER=ORD2UTF2\n//STEP1 EXEC EDCCL,CPARM2='OPTFILE(DD:OPTFILE)',\n//      CPARM3=CSECT(&MEMBER)\n//COMPILE.SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC(&MEMBER),DISP=SHR\n//USERLIB  DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC,DISP=SHR\n//COMPILE.SYSCRPT DD SYSOUT=*\n//OPTFILE DD DSN=&PCREHLQ..&PCREMLQ..&PCREJCL(OPTFILE),DISP=SHR\n//LKED.SYSLIB  DD\n//        DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD(&MEMBER),DISP=SHR\n// SET MEMBER=PCRZFUNC\n//STEP1 EXEC EDCCL,CPARM2='OPTFILE(DD:OPTFILE)',\n//      CPARM3=CSECT(&MEMBER)\n//COMPILE.SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC(&MEMBER),DISP=SHR\n//USERLIB  DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC,DISP=SHR\n//COMPILE.SYSCRPT DD SYSOUT=*\n//OPTFILE DD DSN=&PCREHLQ..&PCREMLQ..&PCREJCL(OPTFILE),DISP=SHR\n//LKED.SYSLIB  DD\n//        DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD(&MEMBER),DISP=SHR\n// SET MEMBER=STRINGU2\n//STEP1 EXEC EDCCL,CPARM2='OPTFILE(DD:OPTFILE)',\n//      CPARM3=CSECT(&MEMBER)\n//COMPILE.SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC(&MEMBER),DISP=SHR\n//USERLIB  DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC,DISP=SHR\n//COMPILE.SYSCRPT DD SYSOUT=*\n//OPTFILE DD DSN=&PCREHLQ..&PCREMLQ..&PCREJCL(OPTFILE),DISP=SHR\n//LKED.SYSLIB  DD\n//        DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD(&MEMBER),DISP=SHR\n// SET MEMBER=TABLES2\n//STEP1 EXEC EDCCL,CPARM2='OPTFILE(DD:OPTFILE)',\n//      CPARM3=CSECT(&MEMBER)\n//COMPILE.SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC(&MEMBER),DISP=SHR\n//USERLIB  DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC,DISP=SHR\n//COMPILE.SYSCRPT DD SYSOUT=*\n//OPTFILE DD DSN=&PCREHLQ..&PCREMLQ..&PCREJCL(OPTFILE),DISP=SHR\n//LKED.SYSLIB  DD\n//        DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD(&MEMBER),DISP=SHR\n// SET MEMBER=UCD2\n//STEP1 EXEC EDCCL,CPARM2='OPTFILE(DD:OPTFILE)',\n//      CPARM3=CSECT(&MEMBER)\n//COMPILE.SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC(&MEMBER),DISP=SHR\n//USERLIB  DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC,DISP=SHR\n//COMPILE.SYSCRPT DD SYSOUT=*\n//OPTFILE DD DSN=&PCREHLQ..&PCREMLQ..&PCREJCL(OPTFILE),DISP=SHR\n//LKED.SYSLIB  DD\n//        DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD(&MEMBER),DISP=SHR\n// SET MEMBER=VALIDUT2\n//STEP1 EXEC EDCCL,CPARM2='OPTFILE(DD:OPTFILE)',\n//      CPARM3=CSECT(&MEMBER)\n//COMPILE.SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC(&MEMBER),DISP=SHR\n//USERLIB  DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC,DISP=SHR\n//COMPILE.SYSCRPT DD SYSOUT=*\n//OPTFILE DD DSN=&PCREHLQ..&PCREMLQ..&PCREJCL(OPTFILE),DISP=SHR\n//LKED.SYSLIB  DD\n//        DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD(&MEMBER),DISP=SHR\n// SET MEMBER=XCLASS2\n//STEP1 EXEC EDCCL,CPARM2='OPTFILE(DD:OPTFILE)',\n//      CPARM3=CSECT(&MEMBER)\n//COMPILE.SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC(&MEMBER),DISP=SHR\n//USERLIB  DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC,DISP=SHR\n//COMPILE.SYSCRPT DD SYSOUT=*\n//OPTFILE DD DSN=&PCREHLQ..&PCREMLQ..&PCREJCL(OPTFILE),DISP=SHR\n//LKED.SYSLIB  DD\n//        DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD(&MEMBER),DISP=SHR\n// SET MEMBER=AUTOPOS2\n//STEP1 EXEC EDCCL,CPARM2='OPTFILE(DD:OPTFILE)',\n//      CPARM3=CSECT(&MEMBER)\n//COMPILE.SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC(&MEMBER),DISP=SHR\n//USERLIB  DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC,DISP=SHR\n//COMPILE.SYSCRPT DD SYSOUT=*\n//OPTFILE DD DSN=&PCREHLQ..&PCREMLQ..&PCREJCL(OPTFILE),DISP=SHR\n//LKED.SYSLIB  DD\n//        DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD(&MEMBER),DISP=SHR\n// SET MEMBER=CONFIG2\n//STEP1 EXEC EDCCL,CPARM2='OPTFILE(DD:OPTFILE)',\n//      CPARM3=CSECT(&MEMBER)\n//COMPILE.SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC(&MEMBER),DISP=SHR\n//USERLIB  DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC,DISP=SHR\n//COMPILE.SYSCRPT DD SYSOUT=*\n//OPTFILE DD DSN=&PCREHLQ..&PCREMLQ..&PCREJCL(OPTFILE),DISP=SHR\n//LKED.SYSLIB  DD\n//        DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD(&MEMBER),DISP=SHR\n// SET MEMBER=CONTEXT2\n//STEP1 EXEC EDCCL,CPARM2='OPTFILE(DD:OPTFILE)',\n//      CPARM3=CSECT(&MEMBER)\n//COMPILE.SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC(&MEMBER),DISP=SHR\n//USERLIB  DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC,DISP=SHR\n//COMPILE.SYSCRPT DD SYSOUT=*\n//OPTFILE DD DSN=&PCREHLQ..&PCREMLQ..&PCREJCL(OPTFILE),DISP=SHR\n//LKED.SYSLIB  DD\n//        DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD(&MEMBER),DISP=SHR\n// SET MEMBER=PATTERN2\n//STEP1 EXEC EDCCL,CPARM2='OPTFILE(DD:OPTFILE)',\n//      CPARM3=CSECT(&MEMBER)\n//COMPILE.SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC(&MEMBER),DISP=SHR\n//USERLIB  DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC,DISP=SHR\n//COMPILE.SYSCRPT DD SYSOUT=*\n//OPTFILE DD DSN=&PCREHLQ..&PCREMLQ..&PCREJCL(OPTFILE),DISP=SHR\n//LKED.SYSLIB  DD\n//        DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD(&MEMBER),DISP=SHR\n// SET MEMBER=FINDBRA2\n//STEP1 EXEC EDCCL,CPARM2='OPTFILE(DD:OPTFILE)',\n//      CPARM3=CSECT(&MEMBER)\n//COMPILE.SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC(&MEMBER),DISP=SHR\n//USERLIB  DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC,DISP=SHR\n//COMPILE.SYSCRPT DD SYSOUT=*\n//OPTFILE DD DSN=&PCREHLQ..&PCREMLQ..&PCREJCL(OPTFILE),DISP=SHR\n//LKED.SYSLIB  DD\n//        DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD(&MEMBER),DISP=SHR\n// SET MEMBER=MATCHDA2\n//STEP1 EXEC EDCCL,CPARM2='OPTFILE(DD:OPTFILE)',\n//      CPARM3=CSECT(&MEMBER)\n//COMPILE.SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC(&MEMBER),DISP=SHR\n//USERLIB  DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC,DISP=SHR\n//COMPILE.SYSCRPT DD SYSOUT=*\n//OPTFILE DD DSN=&PCREHLQ..&PCREMLQ..&PCREJCL(OPTFILE),DISP=SHR\n//LKED.SYSLIB  DD\n//        DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD(&MEMBER),DISP=SHR\n// SET MEMBER=MATCH2\n//STEP1 EXEC EDCCL,CPARM2='OPTFILE(DD:OPTFILE)',\n//      CPARM3=CSECT(&MEMBER)\n//COMPILE.SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC(&MEMBER),DISP=SHR\n//USERLIB  DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC,DISP=SHR\n//COMPILE.SYSCRPT DD SYSOUT=*\n//OPTFILE DD DSN=&PCREHLQ..&PCREMLQ..&PCREJCL(OPTFILE),DISP=SHR\n//LKED.SYSLIB  DD\n//        DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD(&MEMBER),DISP=SHR\n// SET MEMBER=SERIALI2\n//STEP1 EXEC EDCCL,CPARM2='OPTFILE(DD:OPTFILE)',\n//      CPARM3=CSECT(&MEMBER)\n//COMPILE.SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC(&MEMBER),DISP=SHR\n//USERLIB  DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC,DISP=SHR\n//COMPILE.SYSCRPT DD SYSOUT=*\n//OPTFILE DD DSN=&PCREHLQ..&PCREMLQ..&PCREJCL(OPTFILE),DISP=SHR\n//LKED.SYSLIB  DD\n//        DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD(&MEMBER),DISP=SHR\n// SET MEMBER=SUBSTRI2\n//STEP1 EXEC EDCCL,CPARM2='OPTFILE(DD:OPTFILE)',\n//      CPARM3=CSECT(&MEMBER)\n//COMPILE.SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC(&MEMBER),DISP=SHR\n//USERLIB  DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC,DISP=SHR\n//COMPILE.SYSCRPT DD SYSOUT=*\n//OPTFILE DD DSN=&PCREHLQ..&PCREMLQ..&PCREJCL(OPTFILE),DISP=SHR\n//LKED.SYSLIB  DD\n//        DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD(&MEMBER),DISP=SHR\n// SET MEMBER=DFAMATC2\n//STEP1 EXEC EDCCL,CPARM2='OPTFILE(DD:OPTFILE)',\n//      CPARM3=CSECT(&MEMBER)\n//COMPILE.SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC(&MEMBER),DISP=SHR\n//USERLIB  DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC,DISP=SHR\n//COMPILE.SYSCRPT DD SYSOUT=*\n//OPTFILE DD DSN=&PCREHLQ..&PCREMLQ..&PCREJCL(OPTFILE),DISP=SHR\n//LKED.SYSLIB  DD\n//        DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD(&MEMBER),DISP=SHR\n// SET MEMBER=STUDY2\n//STEP1 EXEC EDCCL,CPARM2='OPTFILE(DD:OPTFILE)',\n//      CPARM3=CSECT(&MEMBER)\n//COMPILE.SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC(&MEMBER),DISP=SHR\n//USERLIB  DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC,DISP=SHR\n//COMPILE.SYSCRPT DD SYSOUT=*\n//OPTFILE DD DSN=&PCREHLQ..&PCREMLQ..&PCREJCL(OPTFILE),DISP=SHR\n//LKED.SYSLIB  DD\n//        DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD(&MEMBER),DISP=SHR\n// SET MEMBER=COMPILE2\n//STEP1 EXEC EDCCL,CPARM2='OPTFILE(DD:OPTFILE)',\n//      CPARM3=CSECT(&MEMBER)\n//COMPILE.SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC(&MEMBER),DISP=SHR\n//USERLIB  DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC,DISP=SHR\n//COMPILE.SYSCRPT DD SYSOUT=*\n//OPTFILE DD DSN=&PCREHLQ..&PCREMLQ..&PCREJCL(OPTFILE),DISP=SHR\n//LKED.SYSLIB  DD\n//        DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD(&MEMBER),DISP=SHR\n// SET MEMBER=SUBSTIT2\n//STEP1 EXEC EDCCL,CPARM2='OPTFILE(DD:OPTFILE)',\n//      CPARM3=CSECT(&MEMBER)\n//COMPILE.SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC(&MEMBER),DISP=SHR\n//USERLIB  DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC,DISP=SHR\n//COMPILE.SYSCRPT DD SYSOUT=*\n//OPTFILE DD DSN=&PCREHLQ..&PCREMLQ..&PCREJCL(OPTFILE),DISP=SHR\n//LKED.SYSLIB  DD\n//        DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD(&MEMBER),DISP=SHR\n// SET MEMBER=PCR2GREP\n//STEP1 EXEC EDCCL,CPARM2='OPTFILE(DD:OPTFILE)',\n//      CPARM3=CSECT(&MEMBER)\n//COMPILE.SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC(&MEMBER),DISP=SHR\n//USERLIB  DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC,DISP=SHR\n//COMPILE.SYSCRPT DD SYSOUT=*\n//OPTFILE DD DSN=&PCREHLQ..&PCREMLQ..&PCREJCL(OPTFILE),DISP=SHR\n//LKED.SYSLIB  DD\n//        DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD(&MEMBER),DISP=SHR\n// SET MEMBER=PC2POSIX\n//STEP1 EXEC EDCCL,CPARM2='OPTFILE(DD:OPTFILE)',\n//      CPARM3=CSECT(&MEMBER)\n//COMPILE.SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC(&MEMBER),DISP=SHR\n//USERLIB  DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC,DISP=SHR\n//COMPILE.SYSCRPT DD SYSOUT=*\n//OPTFILE DD DSN=&PCREHLQ..&PCREMLQ..&PCREJCL(OPTFILE),DISP=SHR\n//LKED.SYSLIB  DD\n//        DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD(&MEMBER),DISP=SHR\n// SET MEMBER=PCR2TEST\n//STEP1 EXEC EDCCL,CPARM2='OPTFILE(DD:OPTFILE)',\n//      CPARM3=CSECT(&MEMBER)\n//COMPILE.SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC(&MEMBER),DISP=SHR\n//USERLIB  DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC,DISP=SHR\n//COMPILE.SYSCRPT DD SYSOUT=*\n//OPTFILE DD DSN=&PCREHLQ..&PCREMLQ..&PCREJCL(OPTFILE),DISP=SHR\n//LKED.SYSLIB  DD\n//        DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD(&MEMBER),DISP=SHR\n// SET MEMBER=PCR2DEMO\n//STEP1 EXEC EDCCL,CPARM2='OPTFILE(DD:OPTFILE)',\n//      CPARM3=CSECT(&MEMBER)\n//COMPILE.SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC(&MEMBER),DISP=SHR\n//USERLIB  DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC,DISP=SHR\n//COMPILE.SYSCRPT DD SYSOUT=*\n//OPTFILE DD DSN=&PCREHLQ..&PCREMLQ..&PCREJCL(OPTFILE),DISP=SHR\n//LKED.SYSLIB  DD\n//        DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD(&MEMBER),DISP=SHR\n// SET MEMBER=PCOBAPI2\n//STEP1 EXEC EDCCL,CPARM2='OPTFILE(DD:OPTFILE)',\n//      CPARM3=CSECT(&MEMBER)\n//COMPILE.SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC(&MEMBER),DISP=SHR\n//USERLIB  DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC,DISP=SHR\n//COMPILE.SYSCRPT DD SYSOUT=*\n//OPTFILE DD DSN=&PCREHLQ..&PCREMLQ..&PCREJCL(OPTFILE),DISP=SHR\n//LKED.SYSLIB  DD\n//        DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD(&MEMBER),DISP=SHR\n// SET MEMBER=ECHO\n//STEP1 EXEC EDCCL,CPARM2='OPTFILE(DD:OPTFILE)',\n//      CPARM3=CSECT(&MEMBER)\n//COMPILE.SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC(&MEMBER),DISP=SHR\n//USERLIB  DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC,DISP=SHR\n//COMPILE.SYSCRPT DD SYSOUT=*\n//OPTFILE DD DSN=&PCREHLQ..&PCREMLQ..&PCREJCL(OPTFIL1),DISP=SHR\n//LKED.SYSLIB  DD\n//        DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD(&MEMBER),DISP=SHR\n// SET MEMBER=CONVERT2\n//STEP1 EXEC EDCCL,CPARM2='OPTFILE(DD:OPTFILE)',\n//      CPARM3=CSECT(&MEMBER)\n//COMPILE.SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC(&MEMBER),DISP=SHR\n//USERLIB  DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC,DISP=SHR\n//COMPILE.SYSCRPT DD SYSOUT=*\n//OPTFILE DD DSN=&PCREHLQ..&PCREMLQ..&PCREJCL(OPTFIL1),DISP=SHR\n//LKED.SYSLIB  DD\n//        DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD(&MEMBER),DISP=SHR\n// SET MEMBER=FUZZSUP2\n//STEP1 EXEC EDCCL,CPARM2='OPTFILE(DD:OPTFILE)',\n//      CPARM3=CSECT(&MEMBER)\n//COMPILE.SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC(&MEMBER),DISP=SHR\n//USERLIB  DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC,DISP=SHR\n//COMPILE.SYSCRPT DD SYSOUT=*\n//OPTFILE DD DSN=&PCREHLQ..&PCREMLQ..&PCREJCL(OPTFIL1),DISP=SHR\n//LKED.SYSLIB  DD\n//        DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD(&MEMBER),DISP=SHR\n// SET MEMBER=SCRIPTR2\n//STEP1 EXEC EDCCL,CPARM2='OPTFILE(DD:OPTFILE)',\n//      CPARM3=CSECT(&MEMBER)\n//COMPILE.SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC(&MEMBER),DISP=SHR\n//USERLIB  DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC,DISP=SHR\n//COMPILE.SYSCRPT DD SYSOUT=*\n//OPTFILE DD DSN=&PCREHLQ..&PCREMLQ..&PCREJCL(OPTFIL1),DISP=SHR\n//LKED.SYSLIB  DD\n//        DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD(&MEMBER),DISP=SHR\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "COMPCRE2": {"ttr": 71, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x16\\x00@\\x01\\x155o\\x01\\x19\\x11_\\x11C\\x01\\x8d\\x01Y\\x00\\x00\\xe9\\xc1\\xe3\\xd3\\xc1\\xe2\\xf1@@@'", "ispf": {"version": "01.22", "flags": 0, "createdate": "2015-12-22T00:00:00", "modifydate": "2019-04-25T11:43:40", "lines": 397, "newlines": 345, "modlines": 0, "user": "ZATLAS1"}, "text": "//ZATLAS1C JOB (12345678),ZATLAS1,MSGCLASS=H,\n//        MSGLEVEL=(1,1),CLASS=A,NOTIFY=&SYSUID\n//* AUTOMATICALLY GENERATED JCL AS PART AS PCRE2 PORT TO NATIVE Z/OS\n// SET PCREHLQ=ZATLAS1\n// SET PCREMLQ=PCRE2\n// SET PCRESRC=SRCE\n// SET PCREJCL=JCLLIB\n// SET PCREPRM=CNTLLIB\n// SET PCRELOAD=LOADLIB\n// SET MEMBER=DFTABLES\n//STEP01 EXEC EDCCL,CPARM2='OPTFILE(DD:OPTFILE) ARCH(8) TUNE(8)',\n//      CPARM3=CSECT(&MEMBER)\n//COMPILE.SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC(&MEMBER),DISP=SHR\n//USERLIB  DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC,DISP=SHR\n//COMPILE.SYSCRPT DD SYSOUT=*\n//OPTFILE DD DSN=&PCREHLQ..&PCREMLQ..&PCREJCL(OPTFILE),DISP=SHR\n//LKED.SYSLIB  DD\n//        DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD(&MEMBER),DISP=SHR\n//*******************************************************************\n//**** DFTABLES HAS TO RUN TO GENERATE THE NEXT MEMBER TO COMPILE:\n//*******************************************************************\n//DFTBL EXEC PGM=DFTABLES,\n//  PARM='PCRE2.SRCE(CHARTAB2)'\n//STEPLIB DD DSN=ZATLAS1.PCRE2.LOADLIB,DISP=SHR\n//SYSPRINT DD SYSOUT=*\n// SET MEMBER=CHARTAB2\n//STEP02 EXEC EDCCL,CPARM2='OPTFILE(DD:OPTFILE) ARCH(8) TUNE(8)',\n//      CPARM3=CSECT(&MEMBER)\n//COMPILE.SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC(&MEMBER),DISP=SHR\n//USERLIB  DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC,DISP=SHR\n//COMPILE.SYSCRPT DD SYSOUT=*\n//OPTFILE DD DSN=&PCREHLQ..&PCREMLQ..&PCREJCL(OPTFILE),DISP=SHR\n//LKED.SYSLIB  DD\n//        DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD(&MEMBER),DISP=SHR\n//* SET MEMBER=EXTUNI2\n//*STEP03A EXEC EDCCL,CPARM2='OPTFILE(DD:OPTFILE) ARCH(8) TUNE(8)',\n//*     CPARM3=CSECT(&MEMBER)\n//*COMPILE.SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC(&MEMBER),DISP=SHR\n//*USERLIB DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC,DISP=SHR\n//*COMPILE.SYSCRPT DD SYSOUT=*\n//*OPTFILE DD DSN=&PCREHLQ..&PCREMLQ..&PCREJCL(OPTFILE),DISP=SHR\n//*LKED.SYSLIB DD\n//*       DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD,DISP=SHR\n//*LKED.SYSLMOD DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD(&MEMBER),DISP=SHR\n// SET MEMBER=ERROR2\n//STEP03 EXEC EDCCL,CPARM2='OPTFILE(DD:OPTFILE) ARCH(8) TUNE(8)',\n//      CPARM3=CSECT(&MEMBER)\n//COMPILE.SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC(&MEMBER),DISP=SHR\n//USERLIB  DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC,DISP=SHR\n//COMPILE.SYSCRPT DD SYSOUT=*\n//OPTFILE DD DSN=&PCREHLQ..&PCREMLQ..&PCREJCL(OPTFILE),DISP=SHR\n//LKED.SYSLIB  DD\n//        DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD(&MEMBER),DISP=SHR\n// SET MEMBER=JITCOMP2\n//STEP04 EXEC EDCCL,CPARM2='OPTFILE(DD:OPTFILE) ARCH(8) TUNE(8)',\n//      CPARM3=CSECT(&MEMBER)\n//COMPILE.SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC(&MEMBER),DISP=SHR\n//USERLIB  DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC,DISP=SHR\n//COMPILE.SYSCRPT DD SYSOUT=*\n//OPTFILE DD DSN=&PCREHLQ..&PCREMLQ..&PCREJCL(OPTFILE),DISP=SHR\n//LKED.SYSLIB  DD\n//        DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD(&MEMBER),DISP=SHR\n// SET MEMBER=NEWLINE2\n//STEP05 EXEC EDCCL,CPARM2='OPTFILE(DD:OPTFILE) ARCH(8) TUNE(8)',\n//      CPARM3=CSECT(&MEMBER)\n//COMPILE.SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC(&MEMBER),DISP=SHR\n//USERLIB  DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC,DISP=SHR\n//COMPILE.SYSCRPT DD SYSOUT=*\n//OPTFILE DD DSN=&PCREHLQ..&PCREMLQ..&PCREJCL(OPTFILE),DISP=SHR\n//LKED.SYSLIB  DD\n//        DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD(&MEMBER),DISP=SHR\n// SET MEMBER=ORD2UTF2\n//STEP06 EXEC EDCCL,CPARM2='OPTFILE(DD:OPTFILE) ARCH(8) TUNE(8)',\n//      CPARM3=CSECT(&MEMBER)\n//COMPILE.SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC(&MEMBER),DISP=SHR\n//USERLIB  DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC,DISP=SHR\n//COMPILE.SYSCRPT DD SYSOUT=*\n//OPTFILE DD DSN=&PCREHLQ..&PCREMLQ..&PCREJCL(OPTFILE),DISP=SHR\n//LKED.SYSLIB  DD\n//        DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD(&MEMBER),DISP=SHR\n// SET MEMBER=PCRZFUNC\n//STEP07 EXEC EDCCL,CPARM2='OPTFILE(DD:OPTFILE) ARCH(8) TUNE(8)',\n//      CPARM3=CSECT(&MEMBER)\n//COMPILE.SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC(&MEMBER),DISP=SHR\n//USERLIB  DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC,DISP=SHR\n//COMPILE.SYSCRPT DD SYSOUT=*\n//OPTFILE DD DSN=&PCREHLQ..&PCREMLQ..&PCREJCL(OPTFILE),DISP=SHR\n//LKED.SYSLIB  DD\n//        DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD(&MEMBER),DISP=SHR\n// SET MEMBER=STRINGU2\n//STEP08 EXEC EDCCL,CPARM2='OPTFILE(DD:OPTFILE) ARCH(8) TUNE(8)',\n//      CPARM3=CSECT(&MEMBER)\n//COMPILE.SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC(&MEMBER),DISP=SHR\n//USERLIB  DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC,DISP=SHR\n//COMPILE.SYSCRPT DD SYSOUT=*\n//OPTFILE DD DSN=&PCREHLQ..&PCREMLQ..&PCREJCL(OPTFILE),DISP=SHR\n//LKED.SYSLIB  DD\n//        DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD(&MEMBER),DISP=SHR\n// SET MEMBER=TABLES2\n//STEP09 EXEC EDCCL,CPARM2='OPTFILE(DD:OPTFILE) ARCH(8) TUNE(8)',\n//      CPARM3=CSECT(&MEMBER)\n//COMPILE.SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC(&MEMBER),DISP=SHR\n//USERLIB  DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC,DISP=SHR\n//COMPILE.SYSCRPT DD SYSOUT=*\n//OPTFILE DD DSN=&PCREHLQ..&PCREMLQ..&PCREJCL(OPTFILE),DISP=SHR\n//LKED.SYSLIB  DD\n//        DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD(&MEMBER),DISP=SHR\n// SET MEMBER=UCD2\n//STEP10 EXEC EDCCL,CPARM2='OPTFILE(DD:OPTFILE) ARCH(8) TUNE(8)',\n//      CPARM3=CSECT(&MEMBER)\n//COMPILE.SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC(&MEMBER),DISP=SHR\n//USERLIB  DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC,DISP=SHR\n//COMPILE.SYSCRPT DD SYSOUT=*\n//OPTFILE DD DSN=&PCREHLQ..&PCREMLQ..&PCREJCL(OPTFILE),DISP=SHR\n//LKED.SYSLIB  DD\n//        DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD(&MEMBER),DISP=SHR\n// SET MEMBER=VALIDUT2\n//STEP11 EXEC EDCCL,CPARM2='OPTFILE(DD:OPTFILE) ARCH(8) TUNE(8)',\n//      CPARM3=CSECT(&MEMBER)\n//COMPILE.SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC(&MEMBER),DISP=SHR\n//USERLIB  DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC,DISP=SHR\n//COMPILE.SYSCRPT DD SYSOUT=*\n//OPTFILE DD DSN=&PCREHLQ..&PCREMLQ..&PCREJCL(OPTFILE),DISP=SHR\n//LKED.SYSLIB  DD\n//        DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD(&MEMBER),DISP=SHR\n// SET MEMBER=XCLASS2\n//STEP12 EXEC EDCCL,CPARM2='OPTFILE(DD:OPTFILE) ARCH(8) TUNE(8)',\n//      CPARM3=CSECT(&MEMBER)\n//COMPILE.SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC(&MEMBER),DISP=SHR\n//USERLIB  DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC,DISP=SHR\n//COMPILE.SYSCRPT DD SYSOUT=*\n//OPTFILE DD DSN=&PCREHLQ..&PCREMLQ..&PCREJCL(OPTFILE),DISP=SHR\n//LKED.SYSLIB  DD\n//        DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD(&MEMBER),DISP=SHR\n// SET MEMBER=SCRIPTR2\n//STEP12A EXEC EDCCL,CPARM2='OPTFILE(DD:OPTFILE) ARCH(8) TUNE(8)',\n//      CPARM3=CSECT(&MEMBER)\n//COMPILE.SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC(&MEMBER),DISP=SHR\n//USERLIB  DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC,DISP=SHR\n//COMPILE.SYSCRPT DD SYSOUT=*\n//OPTFILE DD DSN=&PCREHLQ..&PCREMLQ..&PCREJCL(OPTFILE),DISP=SHR\n//LKED.SYSLIB  DD\n//        DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD(&MEMBER),DISP=SHR\n// SET MEMBER=AUTOPOS2\n//STEP13 EXEC EDCCL,CPARM2='OPTFILE(DD:OPTFILE) ARCH(8) TUNE(8)',\n//      CPARM3=CSECT(&MEMBER)\n//COMPILE.SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC(&MEMBER),DISP=SHR\n//USERLIB  DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC,DISP=SHR\n//COMPILE.SYSCRPT DD SYSOUT=*\n//OPTFILE DD DSN=&PCREHLQ..&PCREMLQ..&PCREJCL(OPTFILE),DISP=SHR\n//LKED.SYSLIB  DD\n//        DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD(&MEMBER),DISP=SHR\n//SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCREPRM(&MEMBER),DISP=SHR\n// SET MEMBER=CONFIG2\n//STEP14 EXEC EDCCL,CPARM2='OPTFILE(DD:OPTFILE) ARCH(8) TUNE(8)',\n//      CPARM3=CSECT(&MEMBER)\n//COMPILE.SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC(&MEMBER),DISP=SHR\n//USERLIB  DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC,DISP=SHR\n//COMPILE.SYSCRPT DD SYSOUT=*\n//OPTFILE DD DSN=&PCREHLQ..&PCREMLQ..&PCREJCL(OPTFILE),DISP=SHR\n//LKED.SYSLIB  DD\n//        DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD(&MEMBER),DISP=SHR\n//SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCREPRM(&MEMBER),DISP=SHR\n// SET MEMBER=CONTEXT2\n//STEP15 EXEC EDCCL,CPARM2='OPTFILE(DD:OPTFILE) ARCH(8) TUNE(8)',\n//      CPARM3=CSECT(&MEMBER)\n//COMPILE.SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC(&MEMBER),DISP=SHR\n//USERLIB  DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC,DISP=SHR\n//COMPILE.SYSCRPT DD SYSOUT=*\n//OPTFILE DD DSN=&PCREHLQ..&PCREMLQ..&PCREJCL(OPTFILE),DISP=SHR\n//LKED.SYSLIB  DD\n//        DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD(&MEMBER),DISP=SHR\n//SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCREPRM(&MEMBER),DISP=SHR\n// SET MEMBER=CONVERT2\n//STEP16 EXEC EDCCL,CPARM2='OPTFILE(DD:OPTFILE) ARCH(8) TUNE(8)',\n//      CPARM3=CSECT(&MEMBER)\n//COMPILE.SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC(&MEMBER),DISP=SHR\n//USERLIB  DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC,DISP=SHR\n//COMPILE.SYSCRPT DD SYSOUT=*\n//OPTFILE DD DSN=&PCREHLQ..&PCREMLQ..&PCREJCL(OPTFILE),DISP=SHR\n//LKED.SYSLIB  DD\n//        DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD(&MEMBER),DISP=SHR\n//SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCREPRM(&MEMBER),DISP=SHR\n// SET MEMBER=PATTERN2\n//STEP17 EXEC EDCCL,CPARM2='OPTFILE(DD:OPTFILE) ARCH(8) TUNE(8)',\n//      CPARM3=CSECT(&MEMBER)\n//COMPILE.SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC(&MEMBER),DISP=SHR\n//USERLIB  DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC,DISP=SHR\n//COMPILE.SYSCRPT DD SYSOUT=*\n//OPTFILE DD DSN=&PCREHLQ..&PCREMLQ..&PCREJCL(OPTFILE),DISP=SHR\n//LKED.SYSLIB  DD\n//        DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD(&MEMBER),DISP=SHR\n//SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCREPRM(&MEMBER),DISP=SHR\n// SET MEMBER=FINDBRA2\n//STEP18 EXEC EDCCL,CPARM2='OPTFILE(DD:OPTFILE) ARCH(8) TUNE(8)',\n//      CPARM3=CSECT(&MEMBER)\n//COMPILE.SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC(&MEMBER),DISP=SHR\n//USERLIB  DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC,DISP=SHR\n//COMPILE.SYSCRPT DD SYSOUT=*\n//OPTFILE DD DSN=&PCREHLQ..&PCREMLQ..&PCREJCL(OPTFILE),DISP=SHR\n//LKED.SYSLIB  DD\n//        DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD(&MEMBER),DISP=SHR\n//SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCREPRM(&MEMBER),DISP=SHR\n// SET MEMBER=MATCHDA2\n//STEP19 EXEC EDCCL,CPARM2='OPTFILE(DD:OPTFILE) ARCH(8) TUNE(8)',\n//      CPARM3=CSECT(&MEMBER)\n//COMPILE.SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC(&MEMBER),DISP=SHR\n//USERLIB  DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC,DISP=SHR\n//COMPILE.SYSCRPT DD SYSOUT=*\n//OPTFILE DD DSN=&PCREHLQ..&PCREMLQ..&PCREJCL(OPTFILE),DISP=SHR\n//LKED.SYSLIB  DD\n//        DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD(&MEMBER),DISP=SHR\n//SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCREPRM(&MEMBER),DISP=SHR\n// SET MEMBER=MATCH2\n//STEP20 EXEC EDCCL,CPARM2='OPTFILE(DD:OPTFILE) ARCH(8) TUNE(8)',\n//      CPARM3=CSECT(&MEMBER)\n//COMPILE.SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC(&MEMBER),DISP=SHR\n//USERLIB  DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC,DISP=SHR\n//COMPILE.SYSCRPT DD SYSOUT=*\n//OPTFILE DD DSN=&PCREHLQ..&PCREMLQ..&PCREJCL(OPTFILE),DISP=SHR\n//LKED.SYSLIB  DD\n//        DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD(&MEMBER),DISP=SHR\n//SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCREPRM(&MEMBER),DISP=SHR\n// SET MEMBER=SERIALI2\n//STEP21 EXEC EDCCL,CPARM2='OPTFILE(DD:OPTFILE) ARCH(8) TUNE(8)',\n//      CPARM3=CSECT(&MEMBER)\n//COMPILE.SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC(&MEMBER),DISP=SHR\n//USERLIB  DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC,DISP=SHR\n//COMPILE.SYSCRPT DD SYSOUT=*\n//OPTFILE DD DSN=&PCREHLQ..&PCREMLQ..&PCREJCL(OPTFILE),DISP=SHR\n//LKED.SYSLIB  DD\n//        DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD(&MEMBER),DISP=SHR\n//SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCREPRM(&MEMBER),DISP=SHR\n// SET MEMBER=MAKETAB2\n//STEP22 EXEC EDCCL,CPARM2='OPTFILE(DD:OPTFILE) ARCH(8) TUNE(8)',\n//      CPARM3=CSECT(&MEMBER)\n//COMPILE.SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC(&MEMBER),DISP=SHR\n//USERLIB  DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC,DISP=SHR\n//COMPILE.SYSCRPT DD SYSOUT=*\n//OPTFILE DD DSN=&PCREHLQ..&PCREMLQ..&PCREJCL(OPTFILE),DISP=SHR\n//LKED.SYSLIB  DD\n//        DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD(&MEMBER),DISP=SHR\n//*SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCREPRM(&MEMBER),DISP=SHR\n// SET MEMBER=SUBSTRI2\n//STEP23 EXEC EDCCL,CPARM2='OPTFILE(DD:OPTFILE) ARCH(8) TUNE(8)',\n//      CPARM3=CSECT(&MEMBER)\n//COMPILE.SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC(&MEMBER),DISP=SHR\n//USERLIB  DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC,DISP=SHR\n//COMPILE.SYSCRPT DD SYSOUT=*\n//OPTFILE DD DSN=&PCREHLQ..&PCREMLQ..&PCREJCL(OPTFILE),DISP=SHR\n//LKED.SYSLIB  DD\n//        DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD(&MEMBER),DISP=SHR\n//SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCREPRM(&MEMBER),DISP=SHR\n// SET MEMBER=DFAMATC2\n//STEP24 EXEC EDCCL,CPARM2='OPTFILE(DD:OPTFILE) ARCH(8) TUNE(8)',\n//      CPARM3=CSECT(&MEMBER)\n//COMPILE.SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC(&MEMBER),DISP=SHR\n//USERLIB  DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC,DISP=SHR\n//COMPILE.SYSCRPT DD SYSOUT=*\n//OPTFILE DD DSN=&PCREHLQ..&PCREMLQ..&PCREJCL(OPTFILE),DISP=SHR\n//LKED.SYSLIB  DD\n//        DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD(&MEMBER),DISP=SHR\n//SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCREPRM(&MEMBER),DISP=SHR\n// SET MEMBER=STUDY2\n//STEP25 EXEC EDCCL,CPARM2='OPTFILE(DD:OPTFILE) ARCH(8) TUNE(8)',\n//      CPARM3=CSECT(&MEMBER)\n//COMPILE.SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC(&MEMBER),DISP=SHR\n//USERLIB  DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC,DISP=SHR\n//COMPILE.SYSCRPT DD SYSOUT=*\n//OPTFILE DD DSN=&PCREHLQ..&PCREMLQ..&PCREJCL(OPTFILE),DISP=SHR\n//LKED.SYSLIB  DD\n//        DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD(&MEMBER),DISP=SHR\n//SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCREPRM(&MEMBER),DISP=SHR\n// SET MEMBER=COMPILE2\n//STEP26 EXEC EDCCL,CPARM2='OPTFILE(DD:OPTFILE) ARCH(8) TUNE(8)',\n//      CPARM3=CSECT(&MEMBER)\n//COMPILE.SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC(&MEMBER),DISP=SHR\n//USERLIB  DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC,DISP=SHR\n//COMPILE.SYSCRPT DD SYSOUT=*\n//OPTFILE DD DSN=&PCREHLQ..&PCREMLQ..&PCREJCL(OPTFILE),DISP=SHR\n//LKED.SYSLIB  DD\n//        DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD(&MEMBER),DISP=SHR\n//SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCREPRM(&MEMBER),DISP=SHR\n// SET MEMBER=FUZZSUP2\n//STEP27 EXEC EDCCL,CPARM2='OPTFILE(DD:OPTFILE) ARCH(8) TUNE(8)',\n//      CPARM3=CSECT(&MEMBER)\n//COMPILE.SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC(&MEMBER),DISP=SHR\n//USERLIB  DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC,DISP=SHR\n//COMPILE.SYSCRPT DD SYSOUT=*\n//OPTFILE DD DSN=&PCREHLQ..&PCREMLQ..&PCREJCL(OPTFILE),DISP=SHR\n//LKED.SYSLIB  DD\n//        DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD(&MEMBER),DISP=SHR\n//SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCREPRM(&MEMBER),DISP=SHR\n// SET MEMBER=SUBSTIT2\n//STEP28 EXEC EDCCL,CPARM2='OPTFILE(DD:OPTFILE) ARCH(8) TUNE(8)',\n//      CPARM3=CSECT(&MEMBER)\n//COMPILE.SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC(&MEMBER),DISP=SHR\n//USERLIB  DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC,DISP=SHR\n//COMPILE.SYSCRPT DD SYSOUT=*\n//OPTFILE DD DSN=&PCREHLQ..&PCREMLQ..&PCREJCL(OPTFILE),DISP=SHR\n//LKED.SYSLIB  DD\n//        DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD(&MEMBER),DISP=SHR\n//SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCREPRM(&MEMBER),DISP=SHR\n// SET MEMBER=PCR2GREP\n//STEP29 EXEC EDCCL,CPARM2='OPTFILE(DD:OPTFILE) ARCH(8) TUNE(8)',\n//      CPARM3=CSECT(&MEMBER)\n//COMPILE.SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC(&MEMBER),DISP=SHR\n//USERLIB  DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC,DISP=SHR\n//COMPILE.SYSCRPT DD SYSOUT=*\n//OPTFILE DD DSN=&PCREHLQ..&PCREMLQ..&PCREJCL(OPTFILE),DISP=SHR\n//LKED.SYSLIB  DD\n//        DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD(&MEMBER),DISP=SHR\n//SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCREPRM(&MEMBER),DISP=SHR\n// SET MEMBER=PC2POSIX\n//STEP30 EXEC EDCCL,CPARM2='OPTFILE(DD:OPTFILE) ARCH(8) TUNE(8)',\n//      CPARM3=CSECT(&MEMBER)\n//COMPILE.SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC(&MEMBER),DISP=SHR\n//USERLIB  DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC,DISP=SHR\n//COMPILE.SYSCRPT DD SYSOUT=*\n//OPTFILE DD DSN=&PCREHLQ..&PCREMLQ..&PCREJCL(OPTFILE),DISP=SHR\n//LKED.SYSLIB  DD\n//        DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD(&MEMBER),DISP=SHR\n//SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCREPRM(&MEMBER),DISP=SHR\n// SET MEMBER=PCR2TEST\n//STEP31 EXEC EDCCL,CPARM2='OPTFILE(DD:OPTFILE) ARCH(8) TUNE(8)',\n//      CPARM3=CSECT(&MEMBER)\n//COMPILE.SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC(&MEMBER),DISP=SHR\n//USERLIB  DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC,DISP=SHR\n//COMPILE.SYSCRPT DD SYSOUT=*\n//OPTFILE DD DSN=&PCREHLQ..&PCREMLQ..&PCREJCL(OPTFILE),DISP=SHR\n//LKED.SYSLIB  DD\n//        DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD(&MEMBER),DISP=SHR\n//SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCREPRM(&MEMBER),DISP=SHR\n// SET MEMBER=PCR2DEMO\n//STEP32 EXEC EDCCL,CPARM2='OPTFILE(DD:OPTFILE) ARCH(8) TUNE(8)',\n//      CPARM3=CSECT(&MEMBER)\n//COMPILE.SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC(&MEMBER),DISP=SHR\n//USERLIB  DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC,DISP=SHR\n//COMPILE.SYSCRPT DD SYSOUT=*\n//OPTFILE DD DSN=&PCREHLQ..&PCREMLQ..&PCREJCL(OPTFILE),DISP=SHR\n//LKED.SYSLIB  DD\n//        DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD(&MEMBER),DISP=SHR\n//SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCREPRM(&MEMBER),DISP=SHR\n// SET MEMBER=PCOBAPI2\n//STEP33 EXEC EDCCL,CPARM2='OPTFILE(DD:OPTFILE) ARCH(8) TUNE(8)',\n//      CPARM3=CSECT(&MEMBER)\n//COMPILE.SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC(&MEMBER),DISP=SHR\n//USERLIB  DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC,DISP=SHR\n//COMPILE.SYSCRPT DD SYSOUT=*\n//OPTFILE DD DSN=&PCREHLQ..&PCREMLQ..&PCREJCL(OPTFILE),DISP=SHR\n//LKED.SYSLIB  DD\n//        DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD(&MEMBER),DISP=SHR\n//SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCREPRM(&MEMBER),DISP=SHR\n// SET MEMBER=ECHO\n//STEP34 EXEC EDCCL,CPARM2='OPTFILE(DD:OPTFILE) ARCH(8) TUNE(8)',\n//      CPARM3=CSECT(&MEMBER)\n//COMPILE.SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC(&MEMBER),DISP=SHR\n//USERLIB  DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC,DISP=SHR\n//COMPILE.SYSCRPT DD SYSOUT=*\n//OPTFILE DD DSN=&PCREHLQ..&PCREMLQ..&PCREJCL(OPTFILE),DISP=SHR\n//LKED.SYSLIB  DD\n//        DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD(&MEMBER),DISP=SHR\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "COMPIBMS": {"ttr": 75, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\n\\x00\\x08\\x01\\x16\\x00_\\x01\\x19\\x12/#\\x07\\x00\\x1a\\x00\\x15\\x00\\x00\\xe9\\xc1\\xe3\\xd3\\xc1\\xe2\\xf1@@@'", "ispf": {"version": "01.10", "flags": 0, "createdate": "2016-01-05T00:00:00", "modifydate": "2019-05-02T23:07:08", "lines": 26, "newlines": 21, "modlines": 0, "user": "ZATLAS1"}, "text": "//ZATLAS1C JOB (12345678),ZATLAS1,MSGCLASS=H,\n//        MSGLEVEL=(1,1),CLASS=A,NOTIFY=&SYSUID\n//* AUTOMATICALLY GENERATED JCL AS PART AS PCRE2 PORT TO NATIVE Z/OS\n// SET PCREHLQ=ZATLAS1\n// SET PCREMLQ=PCRE2\n// SET PCRESRC=SRCE\n// SET PCREJCL=JCLLIB\n// SET PCREPRM=CNTLLIB\n// SET PCRELOAD=LOADLIB\n// SET MEMBER=IBMSAMPL\n//STEP1 EXEC EDCCL,CPARM2='OPTFILE(DD:OPTFILE)',\n//      CPARM3=CSECT(&MEMBER)\n//COMPILE.SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC(&MEMBER),DISP=SHR\n//USERLIB  DD DSN=&PCREHLQ..&PCREMLQ..&PCRESRC,DISP=SHR\n//COMPILE.SYSCRPT DD SYSOUT=*\n//* BOTH OPTFILES DEFAULT TO NO NATIVE POSIX IN PCOBAPI2\n//* OPTFIL1 DEFAULTS TO PCRE2 POSIX IN IBMSAMPL BY USING\n//* UNDEF(COMPILE_WITH_PCRE2)\n//* DEF(COMPILE_WITH_PCRE2) AS IN OPTFILE WILL TURN IBMSAMPL TO NATIVE\n//* POSIX\n//*OPTFILE DD DSN=&PCREHLQ..&PCREMLQ..&PCREJCL(OPTFILE),DISP=SHR\n//OPTFILE DD DSN=&PCREHLQ..&PCREMLQ..&PCREJCL(OPTFIL1),DISP=SHR\n//LKED.SYSLIB  DD\n//        DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD,DISP=SHR\n//LKED.SYSLMOD DD DSN=&PCREHLQ..&PCREMLQ..&PCRELOAD(&MEMBER),DISP=SHR\n//SYSIN DD DSN=&PCREHLQ..&PCREMLQ..&PCREPRM(&MEMBER),DISP=SHR\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "COMPREGX": {"ttr": 31, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//TSOUSERZ JOB (ACCT,ROOM),'PROGRAMMER',\n//             CLASS=A,MSGCLASS=X,NOTIFY=&SYSUID\n//*\n//JCLLIB   JCLLIB ORDER=SYS1.IGY.SIGYPROC\n//*\n//****************************************************************\n//* COMPILE, LINK AND EXECUTE COBOL PROGRAM WITH ENTERPRISE COBOL\n//****************************************************************\n//* DO NOT TRY DYNAM.  This needs static linkage for the C functions\n//* Note, the PROC has SCEELKED as LKED SYSLIB, providing static link\n//* of \"regxxxxx\" modules into the load module.\n//COMP EXEC IGYWCL,PARM.COBOL='OFFSET,MAP,LIB,PGMNAME(LONGMIXED)',\n//      PARM.LKED='MAP,LET,LIST'\n//*SYSLIB DD DSN=ZATLAS1.PCRE.COB,DISP=SHR  <== not needed\n//SYSIN DD DSN=ZATLAS1.PCRE2.COB(REGEX1),DISP=SHR\n//*LKED.SYSLIB DD                           <== not needed\n//* DD DISP=SHR,DSN=ZATLAS1.PCRE2.LOADLIB    <== not needed\n//LKED.SYSLMOD DD DSN=ZATLAS1.PCRE2.LOADLIB(REGEX1),DISP=SHR\n//LKED.SYSIN    DD  DUMMY\n//*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "EXPTPCH": {"ttr": 33, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x0e\\x00I\\x01\\x15'?\\x01\\x17\\x12/\\x00\\x06\\x00-\\x00\\x0e\\x00\\x00\\xe9\\xc1\\xe3\\xd3\\xc1\\xe2\\xf1@@@\"", "ispf": {"version": "01.14", "flags": 0, "createdate": "2015-09-30T00:00:00", "modifydate": "2017-05-02T00:06:49", "lines": 45, "newlines": 14, "modlines": 0, "user": "ZATLAS1"}, "text": "//ZATLAS1R JOB (12345678),ZATLAS1,MSGCLASS=H,\n//        MSGLEVEL=(1,1),CLASS=A,NOTIFY=&SYSUID\n//***************************************************************\n//***************JCL CREATED BY ZEEV ATLAS  *********************\n//***************************************************************\n//*\n// SET PARMHLQ=ZATLAS1\n// SET PARMMLQ=PCRE2\n//*SET PARMLLQ=COB\n//*SET PARMLLQ=ASM\n// SET PARMLLQ=JCLLIB\n//*SET PARMLLQ=CNTLLIB\n// SET EXELLQ=CNTLLIB\n// SET OFILE=&PARMHLQ..&PARMMLQ..&PARMLLQ..SPLIT\n// SET IFILE=&PARMHLQ..&PARMMLQ..&PARMLLQ..PUNCH\n// SET ODSN=&PARMMLQ..&PARMLLQ..SPLIT\n// SET IDSN=&PARMMLQ..&PARMLLQ..PUNCH\n//STEP0    EXEC PGM=IEFBR14\n//D1       DD   DSN=&OFILE,DISP=(MOD,DELETE),SPACE=(1,1)\n//D2       DD   DSN=&IFILE,DISP=(MOD,DELETE),SPACE=(1,1)\n//STEP1    EXEC PGM=IEBPTPCH\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  DSNAME=&PARMHLQ..&PARMMLQ..&PARMLLQ,DISP=SHR <== MODIFY\n//SYSUT2   DD  DSN=&IFILE,\n//             DISP=(NEW,CATLG,DELETE),\n//             SPACE=(TRK,(5,5),RLSE),\n//             UNIT=3390,VOL=SER=VPWRKB,\n//             DCB=(RECFM=FBM,LRECL=81,BLKSIZE=0)\n//SYSIN    DD  *\n PUNCH TYPORG=PO\n/*\n//STEPX    EXEC PGM=IEFBR14\n//D2       DD   DSN=&OFILE,\n//             DISP=(NEW,CATLG,DELETE),\n//             SPACE=(TRK,(5,5),RLSE),\n//             UNIT=3390,VOL=SER=VPWRKB,\n//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=0)\n//TSOBATCH EXEC PGM=IKJEFT1A,DYNAMNBR=200,\n//  PARM='PCH2UPDT &IDSN &ODSN'\n//SYSEXEC  DD DSN=&PARMHLQ..&PARMMLQ..&EXELLQ,DISP=SHR <== MODIFY\n//SYSPRINT DD SYSOUT=*\n//SYSTSPRT DD SYSOUT=*\n//SYSTSIN  DD DUMMY\n//STEPY    EXEC PGM=IEFBR14\n//D2       DD   DSN=&IFILE,DISP=(MOD,DELETE),SPACE=(1,1)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LICENCE": {"ttr": 35, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "\nPCRE2 LICENCE\n\n------------\nPCRE2 is a library of functions to support regular expressions whose\nsyntax and semantics are as close as possible to those of the Perl 5\nlanguage.\n\nRelease 10.xx of PCRE2 is distributed under the terms of the \"BSD\"\nlicence, as specified below. The documentation for PCRE2, supplied in\nthe \"JCLLIB\" directory, is distributed under the same terms as the\nsoftware itself.\n\nThe basic library functions are written in C and are freestanding.\nThe C++ wrapper that was available in the previous version (PCRE 8.xx)\nis not available any more.  The just-in-time compiler that can be used\nto optimize pattern matching is not available in z/OS. When available,\nthese are both optional features that can be omitted when the library\nis built.\n\nPlease look at the LICENSE file that acompanies the original PCRE2\npackage.\n\nThat original license file is in full effect.  The license file you are\nreading now is an addition to the original file in that it adds my name\nand copyright for the specific z/OS related code and documentation that\nI have written.\n\nTHE z/OS specific modifications\n-------------------------------\n\nContributed by:   Ze'ev Atlas.\n\nCopyright \u00a9 2012, 2013, 2014, 2015 Ze'ev Atlas\nAll rights reserved.\n\nTHE \"BSD\" LICENCE\n-----------------\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n\n\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in\n      the documentation and/or other materials provided with the\n      distribution.\n\n    * Neither the name of the University of Cambridge nor the name of\n      Google Inc. nor the names of their contributors may be used to\n      endorse or promote products derived from this software without\n      specific prior written permission.\n\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THEIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\nPARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nEnd\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "OPTFILE": {"ttr": 37, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00&\\x01\\x16\\x00_\\x01\\x16\\x00o\\x00V\\x00\\x0b\\x00\\x0b\\x00\\x00\\xe9\\xc1\\xe3\\xd3\\xc1\\xe2\\xf1@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2016-01-05T00:00:00", "modifydate": "2016-01-06T00:56:26", "lines": 11, "newlines": 11, "modlines": 0, "user": "ZATLAS1"}, "text": "SOURCE,LONGNAME,GOFF,LANGLVL(EXTC99)\nDEF(HAVE_CONFIG_H)\nDEF(HAVE_STDINT_H)\nDEF(_XOPEN_SOURCE)\nDEF(_POSIX_SOURCE)\nUNDEF(__cplusplus)\nDEF(PCRE2_CODE_UNIT_WIDTH=8)\nDEF(NATIVE_ZOS=1)\nDEF(EBCDIC=1)\nUNDEF(SUPPORT_JIT)\nUNDEF(NATIVE_ZOS_POSIX)\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "OPTFIL1": {"ttr": 39, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00V\\x01\\x16\\x00_\\x01\\x16\\x00_\\x00E\\x00\\x0b\\x00\\x0b\\x00\\x00\\xe9\\xc1\\xe3\\xd3\\xc1\\xe2\\xf1@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2016-01-05T00:00:00", "modifydate": "2016-01-05T00:45:56", "lines": 11, "newlines": 11, "modlines": 0, "user": "ZATLAS1"}, "text": "SOURCE,LONGNAME,GOFF,LANGLVL(EXTC99)\nDEF(HAVE_CONFIG_H)\nDEF(HAVE_STDINT_H)\nDEF(_XOPEN_SOURCE)\nDEF(_POSIX_SOURCE)\nUNDEF(__cplusplus)\nDEF(PCRE2_CODE_UNIT_WIDTH=8)\nDEF(NATIVE_ZOS=1)\nDEF(EBCDIC=1)\nUNDEF(SUPPORT_JIT)\nDEF(COMPILE_WITH_PCRE2=1)\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PCRE2DOC": {"ttr": 275, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00E\\x01\\x195_\\x01 $\\x9f\"\\x01\\x07s\\x07Y\\x00\\x00\\xe9\\xc1\\xe3\\xd3\\xc1\\xe2\\xf1@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2019-12-21T00:00:00", "modifydate": "2020-09-05T22:01:45", "lines": 1907, "newlines": 1881, "modlines": 0, "user": "ZATLAS1"}, "text": "PCRE2 Native z/OS Port\n----------------------\nCopyright  \u00a9 2012 - 2019 Ze'ev Atlas\nCopyright  \u00a9 2017 - 2019 John Gateley \u00ddfor the Rexx API.\u00a8\n\nPCRE2 version 10.35 2020-05-09\nCompiled with\n  EBCDIC code support: LF is 0x15\n  EBCDIC code page IBM1140 or similar\n  8-bit support\n  No Unicode support\n  No just-in-time compiler support\n  Default newline sequence is LF\n  \\R matches all Unicode newlines\n  \\C is supported\n  Internal link size = 2\n  Parentheses nest limit = 250\n  Default heap limit = 20000000 kibibytes\n  Default match limit = 10000000\n  Default depth limit = 10000000\n  pcre2test has neither libreadline nor libedit support\n\nWhat's new\n----------\n10.35a\nThis is an interim release with some bugfixes to the Rexx API.\nA very interesting new development as of 8/21/2020; IBM contacted the\nPCRE development team and published this contribution that is aimed\nto:\n?Enable PCRE2 JIT on Linux on IBMz (s390x-linux) and optimize to\nachieve equivalent speedup over non-JIT code as x86_64.  Goal is full\nfunctionality and passing test suite with JIT enabled.\nAn unfinished port of PCRE2 JIT to s390x exists in the Linux-on-IBM-z\nGithub account and can be used as a starting point.  IBM will\ncontribute the code as necessary.?\nIn other words, IBM is endorsing the PCRE2 library on IBMz systems.\nI will probably attempt to incorporate the JIT version as soon as it\nbecomes available.\nOn 9/29/2020 I will present the Rexx API in RexxLa Symposium.  The\ndistribution now includes the document that was submitted to that\nsymposium\n\n10.35\nThis is a maintenance release:\nBugfixes, tidies, and a few new enhancements.\n1. Capturing groups that contain recursive backreferences to themselves\n  are no longer automatically atomic, because the restriction is no\n  longer necessary as a result of the 10.30 restructuring.\n2. Several new options for pcre2_substitute().\n\nThe z/Os version is now clean.  Both LE and Rexx API work smoothly.\n\n10.34a\nThis interim release represents some changes in the z/OS side while\nthe core PCRE2 library is unchanged.\n\nFixed some bugs in the z/OS specific functions:\n    pcrz_space_to_null_term_str  ZSPC2NUL\n    pcrz_null_to_space_term_str  ZNUL2SPC\nThese bugs produced an incorrect length that was the root cause of the\nbug mentioned in 10.33 that had been incorrectly attributed to the\nCOBOL program.\n\nBrought some of the COBOL copybooks up to date.\n\nAdded a demo program to demonstrate the usage of\npcre2_substitute  SUBSTIT2\nPlease see some additional, COBOL specific documetation in the COB\nlibrary.\n\nAdded the substitute functionality to the Rexx API.  Please see the\nModified Rexx API documentation herein and in the ASM library.\n\nAdded three more functions to deal with conversion back and forth\nbetween IBM-1047 and user's codeset to help with the substitute\nfunctionality:\n    pcrz_codeset_init_substitute              ZCSINIS\n    pcrz_codeset_convert_replacement          ZCSCONVR\n    pcrz_codeset_convert_substitute_back      ZCSCONVB\n\n10.34\nThere is nothing new in the z/OS port.\n\nNon-atomic positive lookarounds are implemented in the pcre2_match()\ninterpreter, but not in JIT (i.e. it is included in the z/OS port.)\n\n10.33\nAs usual, see ChangeLog for full details of changes.\n\nOf note are changes in pcre2test, implementation of Perl 5.28\nexperimental alphabetic names for atomic groups and lookaround\nassertions and many other fancy changes.\n\nApperently, fixed two typos in EBCDIC special handling for ranges such\nas a-z in EBCDIC environments. The original code probably never worked,\nthough there were no bug reports.  I must admit that it wasn't me who\ncaught the issue.\n\nI have fixed a bug in the PCOBDEM2 program that caused a perfect match\nto be ignored if it coincided with the end of the subject string.\n\nI have got a wind that IBM is actually working on a JIT version of\nPCRE2, but in the Linux context with no immediate plans for EBCDIC.\nI assume that they would eventually deal with EBCDIC, but native z/OS\ndoes not seem to be a priority.\n\nThe most significant change was something that I had dealt with in the\nz/OS port, assuming that all other implementations do not have that\nissue.  Many z/OS programmers may not have any say on the order in\nwhich the link libraries are ordered and using the POSIX names regcomp,\nregexec, regerror and regfree in PCRE2 context may bind to the wrong\ninstance.  I used alternative names and it so happened that The Debian\nimplementation had similar solution.\nThe POSIX functions are now all called pcre2_regcomp() etc., with\nwrapper functions that use the standard POSIX names. However, in\npcre2posix.h the POSIX names are defined as macros. This should help\navoid linking with the wrong library in some environments while still\nexporting the POSIX names for pre-existing programs that use them. (The\nDebian alternative names are also defined as macros, but not\ndocumented.)\nThis change required some work on my side, to undo my special handling\nwhile preserving my alternative names for whomever was using them.\nOn one hand PC2PSXAP.h was simplified with no need for special #pragma.\nOn the other hand PCOBAPI2.C now provides support for my alternative\nnames.  However, for any new implementation my alternative names are\ndeprecated and should not be used!  Instead, use the POSIX names and\nPC2PSXAP.h header and provide DEF(COMPILE_WITH_PCRE2) as compile option\nif you want the PCRE2 version\n\n10.32\nThis is mainly a bugfix and tidying release (see ChangeLog for full\ndetails).  However, there are some minor enhancements.\nThere are no real changes on the z/OS side as well except of an\nimportant bugfix.  There was a bug in the TRIMIT macro and some\nchanges in some other macros.\n\nUsers of the REXX API should use the new version of that API to\nbenefit from the aforementioned bugfix\n\n10.31\nThis is mainly a bugfix and tidying release (see ChangeLog for full\ndetails).  However, there are some minor enhancements.\nIn the z/OS side we have some development that continue in the interim\nrelease spirit.\nI have started an effort to put my scripts, those that do the porting,\nin GIT-HUB.  Unfortunately, due to sickness in the family, I did not\nhave time to finish that.  You may find the incomplete (and somewhat\nolder version) in https://github.com/zatlas1/PCRE2forZOS.  I hope to\nfinalize that effort for the next release.  I do not intnd to abandon\nthe CBTTAPE distribution venue as it is geared towards EBCDIC files in\nXMI format.  The GIT-HUB is more for the behind the scene porting\neffort, while CBTTAPE is more for the final product.\n\n1. John Gateley and I were busy introducing the second version of the\n   REXX API.  The first version was pretty much experimental, while\n   the current version is more general and allows reuse of compiled\n   patterns.\n\n   Remember that the Rexx API provide access to the main functionality\n   of PCRE2 (i.e. pattern matching) but it hides all the gory details\n   and thus do not give access to all the library flexibility and\n   options.  Also, by not persisting the environment (it does not use\n   CEEPIPI), usage of the library for heavy load could be expensive as\n   every call repeats the pattern compile process.\n\n2. While developing that API we have come to fully understand the\n   effects of what I call the EBCDIC horror on using EBCDIC in any\n   generalized coherent way.  To counter those effects I've developed\n   an interface to IBM's iconv() function.  This interface aims to\n   hide the gory details as much as possible away from the user.\n   This interface is distributed as part of the package and is fully\n   implemented in the REXX API.\n\n3. Several sections of this document were incorrect or misleading\n   because of the lack of full understanding of the EBCDIC horror.  I\n   tried to find all those sections and rewrite or update them.\n   However I ask anybody to point me to any error, unclear explanation,\n   typo, inconsistency or bad style that might be present in this\n   document and I promise to do my best to correct or improve in the\n   next release.\n\n4. This was available since 10.30:\n   The main interpreter, pcre2_match(), has been refactored into a new\n   version that does not use recursive function calls (and therefore\n   the system stack) for remembering backtracking positions. This makes\n   --disable-stack-for-recursion a NOOP. The new implementation allows\n   backtracking into recursive group calls in patterns, making it more\n   compatible with Perl, and also fixes some other previously\n   hard-to-do issues. For patterns that have a lot of backtracking, the\n   heap is now used, and there is explicit limit on the amount,\n   settable by pcre2_set_heap_limit() or (*LIMIT_HEAP=xxx). The\n   \"recursion limit\" is retained, but is renamed as \"depth limit\"\n   (though the old names remain for compatibility).\n\n   There is also a change in the way callouts from pcre2_match() are\n   handled. The offset_vector field in the callout block is no longer a\n   pointer to the actual ovector that was passed to the matching\n   function in the match data block. Instead it points to an internal\n   ovector of a size large enough to hold all possible captured\n   substrings in the pattern.\n\n5. We now take compatibility issues into account and compile the C and\n   assembler in fairly low hardware level.\n\n6. I have not yet developed PL/I 'include' modules similar to the\n   available COBOL copybooks.  Being that C is an LE language, the\n   library functions could be called from PL/I.  What is not provided\n   are the structures used by the functions and the equivalent of the\n   pcre2.h header.\n\n7. Sharp-eyed users would notice a new component in both the SRCE and\n   LOADLIB libraries: EXTUNI2 (pcre2_extuni.c).  This component is part\n   of what is defined to the automated process as needed.  However, in\n   reality this component is not needed.  It will be removed on the\n   next release.\n\nA lot of thanks to John Gateley who worked on the Rexx interface and\nincorporated the dealing with code pages in it.\n\nMachine and z/OS compatibility\n------------------------------\nAs I became more aware about compatibility issues, the distributed\nlibrary would be catered to somewhat older combination of hardware and\nOS, older than the current IBM latest.  Since the distribution contains\nthe source code and JCL, one could compile for the latest and greatest\nor conversly for an older combination, if one posses a license for the\nIBM C/C++ compiler.\n\nOne may tell the C/C++ compiler both the minimum supported hardware and\nthe most typical hardware used. So the compiler uses only instructions\navailable on that minimum hardware and optimizes with instructions that\nwork best on the typical hardware.  Based on my z/OS 2.2 installation\ndefault, I chose ARCH(8) TUNE(8) however, there should not be a problem\nto go down to ARCH(7) TUNE(7) or up to current level (on my 2.3 system\nthe default is already TUNE(10) ARCH(10).)\n\nThe assembler parts are assembled and work fine in ZS-4.  According to\nJohn, we may, if required, get it down to ZS-1 as there are only three\ninstructions that need the higher level (MVHHI, CFI and CLHHSI) and\nthey are relatively easy to replace.\n\n(The C ARCH numbers are two behind the marketing numbers: a z13 is\nARCH(11). The HLASM MACHINE numbers are four behind: a z13 is ZS-9.)\n\nOne may also tell the C/C++ compiler and the binder the minimum level\nof LE to target. Based on the aforementioned installation we tell the\ncompiler TARG(LE,current) but we can go down to something like\nzOSV1R13, or whatever.\n\nPreamble. License\n-----------------\nThe software described herein is a direct port of the open source PCRE2\npackage to a new platform (i.e. z/OS) and thus is distributed under the\nsame BSD license with the addition of John Gateley's and my name as\ncontributors.  This license covers each and every file in this package,\nincluding this document.\n\nThe original PCRE package was contributed by the various contributors\nmentioned in the LICENCE document.  Please refer to the document named\nLICENCE in the original package for details about the various\ncontributors and their corresponding copyrights.  Please refer to the\ndocument named LICENCE in the JCLLIB to see my specific copyright.\n\nCopyright \u00a9 1997 - 2018\n\nTHE z/OS specific modifications\n-------------------------------\n\nContributed by:  Ze'ev Atlas.\n\nCopyright  \u00a9 2012, 2013, 2014, 2015, 2016, 2017, 2018 Ze'ev Atlas\nAll rights reserved.\n\nREXX API\n--------\n\nContributed by: John Gateley\n\nCopyright  \u00a9 2017, 2018 John Gateley\nAll rights reserved.\n\nTHE \"BSD\" LICENCE\n-----------------\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in\n      the documentation and/or other materials provided with the\n      distribution.\n\n    * Neither the name of the University of Cambridge nor the name of\n      Google Inc. nor the names of their contributors may be used to\n      endorse or promote products derived from this software without\n      specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THEIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\nPARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n-----------------------------------------------------------------------\n\nRoadmap:\n1. GREP functionality is not yet fully tested (see GREP discussion for\n   details.)\n2. The old PCRE is now stuck in 8.39.  I will not maintain the old PCRE\n   any more.\n\n!!! ALERT - z/OS and EBCDIC annoyance factors !!!\n-------------------------------------------------\nThere are few issues that I've coined as z/OS annoyance factors that\nmust not be ignored.  Here is an enumeration of the main known issues.\n1. In order to avoid some of EBCDIC annoyance, my development system\n   is set to IBM-1047.  However, even that did not resolve all upload\n   issues.  My emulator assumes that the workstation code page is 1252\n   which is Windows.  It insists on changing the Chevron to X'B0' ( ^)\n   instead of X'5F'.  I use my ADDMEM utility to alleviate the issue.\n2. The Tab character (X'05') causes the C compiler to fail.  I do not\n   know which character to use instead, so I replaced all Tabs with\n   Spaces in the source code.  This should not affect patterns as we\n   rarely deal with Tab character as is.  I believe that it is\n   recognized as white space as it should, but farther testing is\n   needed.\n3. The character y umlaut (officially known in Unicode as 'Latin small\n   letter y with diaeresis' and looks like y with two dots above it, is\n   mapped to X'FF' in ASCII.  X'FF' in EBCDIC is EO (i.e. EOT End of\n   Transmission).  This may and would, cause issues when uploading\n   ASCII files that contain that character to the mainframe.\n4. When entering pattern via the PARM in the JCL, please remember that\n   any Back Slash character must be doubled.  This is a requirement of\n   the C compiler as far as I can tell.  Surprisingly, this annoyance\n   factor is not unique to z/OS but may be seen in the Unix/Linux\n   environment as well.\n   Example:\n   to run pcredemo to find all digits in the input string, one must\n   code:\n   //STEP1 EXEC PGM=PCRE2DEM,PARM='-g \\\\d 123'\n   and not\n   //STEP1 EXEC PGM=PCRE2DEM,PARM='-g \\d 123'\n\n\n0. Documentation\n----------------\nThis document attempts to explain the port of PCRE2 into z/OS,\nincluding installation.  It does not attempt to be a full documentation\nof PCRE2 as PCRE2 is fully documented.  See\nhttp://www.pcre.org/current/doc/html/ or http://www.pcre.org/pcre2.txt\nfor full documentation in html or text forms.\nThe previous incarnation of the PCRE2 library was called PCRE.  I\nported the 8.xx series to z/OS in similar manner and that port is still\navailable separately.  The old PCRE is on maintenance mode and it is\nrecommended NOT to use it for any new development.  Therefore, and\nbecause of my limited resources, I dropped support for the old PCRE.\nInstead, please use this current incarnation, PCRE2 and its port.\n\n1. Rationale\n------------\nThe purpose of this port is to bring Perl-style Regular Expressions\ninto the classic z/OS world.  PCRE2 - Perl Compatible Regular\nExpressions \u00ddhttp://www.pcre.org/\u00a8 is a mature and quite popular open\nsource package that provides this functionality.\nThe intended use of this package would be by traditional mainframe\nprogrammers using traditional mainframe LE languages such as COBOL\nwithin the classic native z/OS framework and file system without the\nneed to use USS.\nThe intended audience of this port are people who are working on the\nclassic native z/OS with LE languages, mainly COBOL.  Those people, if\nthey at all, have permission to load open source, would be bound to\ncompile it using JCL inside the classic native z/OS environment,\npotentially with Sysprog mandated (i.e. written on stone) compile\noptions.  They may not even have access to any C compiler.  Their\ntarget language (usually COBOL) uses LE and does not consider it to be\na bloat.  In short, my audience is the poor souls who maintain the\nlegacy code and would never care for the glory of the new brave world.\nNote that z/OS C provides the standard Posix compliant Regular\nExpression functions that could be used as is. However, PCRE2 provides\nfor the more robust Perl compatibility.\nThe main exception to the LE languages is the usage of the TSO-REXX\nscripting language.  That language creates its own environment.  John\nGateley and I have developed a standard REXX API to accommodate REXX\nusage.\n\n2. Limitations of the z/OS Port and of the current Release\n----------------------------------------------------------\n* The current release intends to provide the use of the core PCRE2\n  functionality in native z/OS environment, using the available API in\n  C.\n* In addition, this version provides a COBOL API that allows calling\n  the various functionalities using traditional z/OS short (and\n  upper-case) names.\n* The port was compiled and tested under EBCDIC code-page IBM-1047.\n* We rely on the standard IBM C and not on the Gnu C (GCC).  GCC\n  availability on z/OS is not clear.  And I do not have the expertise\n  to even try to install it, let alone use it.  Moreover, IBM C is\n  fully compatible with the intended usage.  Therefore, I have no\n  intention to ever switch to any other variant of C.\n* REXX is now supported via Assembler modules that were supplied by\n  John Gateley.  It is limited in nature by not providing the use of\n  the whole API, however it provides for persisting the environment and\n  reuse of compiled patterns.\n* C++ is not supported.\n* Also, this port does not, and will not support the JIT of the\n  original package!\n* This port is strictly EBCDIC (IBM-1047), to the exclusion of ASCII,\n  UTF (all of them), any IBM DBCS, and any other character set one may\n  imagine!  This limitation is built in and the port will never support\n  any of the aforementioned character sets.\n* However the port now supports all standard EBCDIC code-pages via an\n  interface to the IBM iconv() facility.  Note that while the iconv()\n  facility supports ASCII, various UTF and IBM DBCS character sets,\n  this port still does not support and will not support them.\n* The documentation is still somewhat sparse and leave a lot to be\n  desired :)\n* Special warning about the Posix compliant module of PCRE2:\n  IBM supplies Posix compliant functions that share the same names of\n  the Posix compliant functions in PCRE2.  To prevent any conflict I\n  changed the names of the PCRE2 functions.  However, C programmers are\n  advised to use either the IBM native Posix functions or the PCRE2\n  equivalents and never mix them in the same program.  Specifically, if\n  you intend to use the PCRE2 functions then do not issue\n  #include <regex.h>.\n  See what's new in 10.33 for changes on that matter.\n* The provided LE API (PCOBAPI2.C module) would normally compile\n  without support to the native IBM supplied POSIX and any call to the\n  PCRE2 specific POSIX routine names will refer to PCRE2.  Support for\n  compiling PCOBAPI2.C with the directive\n  #define  NATIVE_ZOS_POSIX\n  has been dropped since PCRE2 10.22.  (It was supposed to mask the\n  PCRE2 names and cause the program to use the native POSIX routines:\n  regcomp, regexec, regerror and regfree.)\n* All API functions are now supported including some that were\n  mistakenly missing in previous release.\n\n3. Porting Process\n------------------\nThe porting is done by Perl scripts that automatically handle most\nissues:\n1. Source module names changed in controlled manner to reflect z/OS' 8\n   character member name limitation.  (some names were later tweaked\n   manually)\n2. All #include changed to refer to the above transformed names.\n3. All references to external module source names are resolved by using\n   automatically created #pragma directive statements (i.e. internal\n   calls for long names functions have NOT been changed.)\n4. Internal long function names were automatically resolved in linkage\n   time without the need for such #pragma directives.\n5. For all internal function names, there are also traditional z/OS\n   aliases (8 character upper case) provided via dedicated COBOL API\n   module.\n6. All fopen are changed to avoid binary files (i.e. \"r\" or \"w\" instead\n   of \"wb\" or \"rb\".\n7. The character y umlaut (officially known in Unicode as 'Latin small\n   letter y with diaeresis' and looks like y with two dots above it is\n   changed to \\xFF to prevent z/OS' FTP failure.  \u00ddThe character is\n   ASCII \\xFF and is understood by the mainframe's file load as sort of\n   EOT or EOF.  I am not sure about the official reason, but the bottom\n   line is that the transmission is cut.  This document is basically an\n   ASCII document, but since it is uploaded to the mainframe into the\n   JCLLIB, I refrained from putting the actual character in this\n   document.\u00a8\n8. all \\t changed to 4 spaces as the mainframe C compiler does not like\n   tabs in the source code.\n9. Some code is added to enforce usage of config.h.  The supplied z/OS\n   compatible config.h was manually adjusted.  One important definition\n   in that config.h is the line\n   #define NATIVE_ZOS 1\n   which is used to recognize the z/OS environment.  However, there are\n   other required #define statements which are introduced via compile\n   time option file.  The difference is that those #define are not z/OS\n   specific and could be used in other contexts as well.\n10. All C #include files are (at least for now) considered local.\n   Therefore #include <pcre2.h> is changed to #include \"PCRE2.H\".\n11. In addition to the core PCRE2 modules, this package provides a few\n   additional modules:\n11.1. pcrzfunc.c provides some text manipulation functions to deal with\n   null terminated and non-null terminated strings in the mixed C/COBOL\n   environment.  While the Enterprise COBOL supports PIC Z character\n   strings which are essentially null terminated strings, most\n   traditional COBOL programs use the old, fixed length PIC X strings.\n   The functions herein come to help you manipulate such strings.\n   In addition, this module contains the functions that allow PCRE2 to\n   manipulate the various EBCDIC code-pages transparently in behind-\n   teh-scene manner.\n11.2. pcrzconh.h is used to provide structures for the iconv()\n   interface.\n11.3. pcobapi2.c provides the COBOL/LE API.\n11.4. pcrzosfs.h is used internally by the pcre2grep utility to handle\n   PDS files as if they were directories.\n11.5. pcrzoscs.h is used internally by the pcre2test utility to\n   approximate the EBCDIC code page.\n11.6. echo.c is an implementation of the Unix echo.\n11.7. ibmsampl.c explained elsewhere to demonstrate Posix usage.\n11.8. pc2psxap.h is used to provide C structures for Posix usage.\n11.9. pcrprgma.h provide pragma statements to map long C names to short\n   PDS memeber names.\n13. The package includes a port of the demo program pcre2demo.c into\n   COBOL as PCOBDEM2 and a library of necessary copybooks, some are\n   ports of the native PCRE2 header files and some are new copybooks\n   providing well defined structures to handle various aspects of the\n   API in more bearable way then what is provided by C.\n14. I am working on availability of this package in Github. As part of\n  this availability, I intend to provide the Perl scripts and the\n  manual scripts on how to run them.\n\n4. Available Files\n------------------\n1. ADDJCL.JCL   - JCL to load the JCL, ADDMEM\n2. ADDMEM.REX   - a REXX utility to load VB members to VB source\n   library\n3. zos.jcl.txt  - the supplied installation JCL\n4. zos.load.txt - the supplied source code\n5. zos.lked.txt - the supplied Binder parameters and REXX modules.\n6. zos.test.txt - the supplied test suite\n7. zos.cob.txt  - the supplied COBOL components\n8. zos.asm.txt  - assembler modules for REXX support\n9. C14_MACRO.ieb - assembler macro needed for #8\n10. pcre2doc.txt - this file\n11. readme.txt - the readme file that accompanied the GIT HUB version.\nNote that the LICENCE file, the readme file and the pcre2doc file are\navailable as part of the JCLLIB.\n12. XMI files representing the various z/OS side installed libraries\n   corresponding to the files above.  The XMI libraries are in EBCDIC,\n   IBM-1047, and should be uploaded in binary mode.\n* PCRE2.CNTLLIB.XMI\n* PCRE2.COB.XMI\n* PCRE2.JCLLIB.XMI\n* PCRE2.LOADLIB.XMI\n* PCRE2.SRCE.XMI\n* PCRE2.TESTLIB.XMI\n* PCRE2.ASM.XMI\n* PCRE2.C14.MACLIB.XMI - strictly speaking this is not a part of the\n  port, but a set of macros from John Gateley that are available\n  elsewhere.  It is supplied here because it is necessary for compiling\n  the assembler for REXX support.\n13. LICENCE.ebc  - License file in EBCDIC.\n14. PCRE2DOC.ebc - This document in EBCDIC.\n15. readme.ebc - readme file in EBCDIC.\nNote that the distribution on the CBTTAPE site (www.cbttape.org)\ncontains only the files mentioned in #11 through #13 as it is EBCDIC\nonly distribution.\n\n5. installation:\n----------------\n0. You may use the supplied XMIT libraries and save the installation\n   process if you are on IBM-1047 code-page.\n1. create libraries:\nUse your own high level qualifier instead of HLQ\nHLQ.PCRE2.CNTLLIB - regular source library - LRECL=80,RECFM=FB; caps\n   off\nHLQ.PCRE2.JCLLIB  - regular source library - LRECL=80,RECFM=FB; caps\n   off\nHLQ.PCRE2.LOADLIB - load module library, must be a PDSE -\n   BLKSIZE=27998,RECFM=U\nHLQ.PCRE2.SRCE    - source library - but LRECL=255,RECFM=VB; caps off\nHLQ.PCRE2.TESTLIB - source library - but LRECL=4096,RECFM=VB; caps\n   off\nHLQ.PCRE2.COB     - PDSE library - LRECL=80,RECFM=FB; caps off\nHLQ.PCRE2.ASM     - regular source library - LRECL=80,RECFM=FB; caps\n   off\nHLQ.C14.MACLIB    - regular source library - LRECL=80,RECFM=FB; caps\n   off\n\nOptional HLQ.PCRE2.SYSOUT  - a library to store test results -\n                  - LRECL=133,RECFM=FBA\nOptional HLQ.PCRE2.STDOUT  - a library to store test results -\n                  - LRECL=31000,RECFM=VB\n\nHere is the relevant allocation sizes information on my system\n                                                   Tracks %Used\n---------------------------------------------------------------\nZATLAS1.C14.MACLIB                                     15   73\nZATLAS1.PCRE2.ASM                                      10  100\nZATLAS1.PCRE2.CNTLLIB                                   3  100\nZATLAS1.PCRE2.COB                                       8   55\nZATLAS1.PCRE2.JCLLIB                                   16   93\nZATLAS1.PCRE2.LOADLIB                                 127   93\nZATLAS1.PCRE2.SRCE                                     70   78\nZATLAS1.PCRE2.SYSOUT                                  495   59\nZATLAS1.PCRE2.TESTLIB                                 161  100\n------\nThe member ALLOCPDS in the HLQ.PCRE2.JCLLIB is a sample of how to\ncreate those libraries in batch, but using ISPF 3.2 works as well.\n2. Load all files starting with zos, ADDJCL.JCL and addmem.rex to the\n   mainframe.  My convention, reflected in the JCL, is to drop the txt\n   suffix, so, for example, zos.jcl.txt will become HLQ.ZOS.JCL.\n   Important:\n   addmem.rex, addjcl.jcl, zos.jcl.txt, zos.cob.txt, and zos.lked.txt\n   should be uploaded with attributes LRECL 80, FB;\n   zos.load.txt should to be uploaded with attributes LRECL 255, VB;\n   zos.test.txt should be uploaded with attributes LRECL 4014, VB;\n3. Use the ADDJCL.JCL IEBUPDTE job in this package to load the\n   HLQ.ZOS.JCL to the HLQ.PCRE2.JCLLIB and the HLQ.ADDMEM.REX to the\n   HLQ.PCRE2.CNTLLIB.\n4. Adjust the various JCL to point to the above libraries.  The JCL\n   members contain // SET statements after the JOB statement.  Locate\n   those that deal with the high level qualifiers and change them to\n   your own.\n5. Run HLQ.PCRE2.JCLLIB(ADDMEM) to load zos.load into HLQ.PCRE2.SRCE.\n   Loading zos.load is pretty slow process.  (see below a note for the\n   usage of ADDMEM.)\n6. Run HLQ.PCRE2.JCLLIB(ADDCNTL) to load zos.lked into\n   HLQ.PCRE2.CNTLLIB.\n7. Run HLQ.PCRE.JCLLIB(ADDTEST) to load zos.test into\n   HLQ.PCRE2.TESTLIB.\n8. Run HLQ.PCRE.JCLLIB(ADDCOB) to load zos.cob into HLQ.PCRE2.COB.\n9. Run HLQ.PCRE.JCLLIB(COMPCRE2) to compile and link the whole package.\n10. Run HLQ.PCRE.JCLLIB(ZCOBCL) to compile and link the PCOBDEMO, COBOL\n   demo program.\n11. You may now modify and run HLQ.PCRE2.JCLLIB(TESTPCRE) to see test\n   results.  Some of the run options are irrelevant for z/OS.\n   Similarly, you may run HLQ.PCRE.JCLLIB(TESTPCOB) and\n   HLQ.PCRE.JCLLIB(TESTDEMO), to see demo results in both COBOL and C.\n12. Run HLQ.PCRE2.JCLLIB(ADDASM) to load zos.asm into HLQ.PCRE2.ASM and\n   C14_MACRO.ieb to HLQ.C14.MACLIB.\n13. Run HLQ.PCRE2.JCLLIB(RXPCRE2) to compile the RXPCRE2 module, and support\n   modules, which are the REXX API.\n\nNote for loading ASCII text to EBCDIC environment, FTP parameters and\nthe usage of the ADDMEM utility with the TRANSLAT option:\n-----------------------------------------------------------------------\nThe ADDMEM utility mimics simple IEBUPDTE ./ ADD operation for FB/VB\nand whatever LRECL input/output on a z/OS/TSO environment.  This\nutility is very limited in nature and there was no attempt to optimize\nits operation.  The utility supports only the ./ ADD NAME=member\noperation of IEBUPDTE.  It assumes that the output library is\npre-allocated and is the same format as the input file.  It intends to\nsupport only RECFM=F|FB|V|VB.\nThere are two reasons for this utility.  The fact that IEBUPDTE appears\nnot to support anything that is not RECFM=FB,LRECL=80 while this\npackage core programs are in RECFM=VB,LRECL=255, and the ASCII to\nEBCDIC transformations.  There are other solutions for the first\nproblem including free programs on cbttape (file 182), however I did\nnot want to rely on any external package and I needed the TRANSLAT\noption.\nLoading ASCII text into an EBCDIC environment could be challenging.  In\nmany cases you do not have any control on the code-page, no use of FTP\nor other issues.  I for example, had to use the venerable IND$FILE with\nwhatever defaults set by the System Programmer to whom I had no access.\nIf you have access to FTP, you could try using something like:\nSbdataconn=(ibm-1047,iso8859-1)\nwhich is the preferable setting and should be the go to setting, or\nSbdataconn=(ibm-037,iso8859-1)\nwhere the ibm-xxxx denotes your specific IBM code-page.  However this\nmay not resolve all the issues.\nThe main issue I'd encountered was the fact that the C compiler on z/OS\nassumes IBM-1047 while many installations use IBM-037.  Thus the\ncompiler appears to be using logical not instead of circumflex.  If you\nmust use something different than IBM-1047 for uploading you may\nresolve it by adding the TRANSLAT option to the ADDMEM utility.  It is\nused by changing the TRANSLAT DD from DUMMY to '*' and adding input\ninstructions like:\n'B0'X '5F'X\n'05'X '40'X\n/*\nThese are instructions for ADDMEM to translate any, let's say x'B0' to\nx'5F', etc.  In particular these may be needed in order to change all\noccurrences of the \"circumflex\" sign '\u00ac' (x'B0') with the IBM version\n\"logical not\" sign ' ^' (x'5F') which is what the IBM C compiler wants,\nand the tab character (x'05') which the C compiler does not like, with\nspace (x'40').  IBM C compiler defaults to IBM-1047 and that is what\nmy environment is set to, so I do not need these transformations.\nHowever, one could set addmem to ignore the aforementioned translation\nfor source lines that are tagged with '<TAG> somewhere in the line.\n\n6. Usage\n--------\nThis port is based on the PCRE2 library (see the beginning of the\ndocument to determine exactly which version.)  A version of COBOL API\nis provided.  Please refer to the table below for a list of available,\nspecifically unavailable and maybe available functionalities.\n1. Jit specific functions, were not and will not be available and not\n  even mentioned.\n2. The functions may be available by their long, case sensitive name.\n  These functions are available in C, providing that the 'Located in'\n  module is bound.  These functions have the same signatures as\n  described in PCRE2 documentation.  These names are also available in\n  COBOL, providing that the using program is compiled with\n  PGMNAME(LONGMIXED) compile option.\n2. In PCRE2 there is a short, upper case name alias for all functions.\n  That name is available via the COBOL API module PCOBAPI2.  Those new\n  names are mentioned immediately following the word 'same', with same\n  signatures as described in PCRE2 documentation.\n3. VERY IMPORTANT - JIT functions are unavailable.  They might be\n  available in the code but calling them would produce unpredictable\n  results.  See below a discussion about JIT unavailability.  Thus,\n  there might be source code members which are not compiled in the\n  installation JCL.  Please do not attempt to compile or run any of\n  those pieces.\n4. Very important - Only tstin1, tstin2, tstin15, testin16, testin18,\n  testin20 and tstin21 members in the original test suite are currently\n  of any relevance.  This list may change! Be aware that all available\n  test suites are ASCII oriented and your results will differ from the\n  published PCRE2 results.\n4. I added some specialized EBCDIC oriented tests and their results\n  (see discussion about the test suite.)\n6. The PCRE2 documentation discusses various forms of 'newline'\n  processing.  For COBOL, all this is irrelevant as there is no such\n  concept in COBOL.  In C a 'newline' (x'15') character is added and in\n  text files (at least from the SYSIN \u00ddstandard input\u00a8) the trailing\n  spaces are chopped.  This is done internally by the C i/o and is not\n  controlled by PCRE2.\n7. JCL PARM= in C context adheres with C semantics, so in PCR2DEMO, if\n  the pattern (or the subject) contains a backslash (\\) it will be\n  considered as an escape character.  If one actually wants a\n  backslash, then double it (\\\\).  COBOL does not have this problem.\n8. Make sure that the library HLQ.PCRE2.LOADLIB appears in the correct\n  concatenation order in your runtime '//STEPLIB DD' statement and in\n  bind (linkedit) time in the '//SYSLMOD DD' statement.\n  Make sure that the HLQ.PCRE2.SRCE library appears in your\n  //USERLIB DD or ahead of all other C libraries in //SYSLIB when\n  compiling in C.\n  Make sure that HLQ.PCRE2.COB appears in //SYSLIB DD when compiling in\n  COBOL.\n  Please add INCLUDE SYSLIB(PCOBAPI2) to the binder to use the short\n  names.\n  Please add INCLUDE SYSLIB(PCRZFUNC) to the binder to use the pcrz\n  functions if you are not including the PCOBAPI2 above.\n\nFunction                                New name    Located in\n--------                                --------    ----------\npcre2_code_copy                         CODECOPY    COMPILE2\npcre2_code_copy_with_tables             CODECOPT    COMPILE2\npcre2_code_free                         CODEFREE    COMPILE2\npcre2_compile                           COMPILE2    COMPILE2\npcre2_match                             MATCH2      MATCH2\npcre2_dfa_match                         DFAMATC2    DFAMATC2\npcre2_match_data_create                 MATCHDCR    MATCHDA2\npcre2_match_data_create_from_pattern    MATCDCFP    MATCHDA2\npcre2_match_data_free                   MATCHDFR    MATCHDA2\npcre2_get_match_data_size               GETMTCSZ    MATCHDA2\npcre2_get_mark                          GETMARK     MATCHDA2\npcre2_get_ovector_count                 GETOVECN    MATCHDA2\npcre2_get_ovector_pointer               GETOVEPT    MATCHDA2\npcre2_get_startchar                     GETSTART    MATCHDA2\npcre2_general_context_create            GENCNTCR    CONTEXT2\npcre2_general_context_copy              GENCNTCP    CONTEXT2\npcre2_general_context_free              GENCNTFR    CONTEXT2\npcre2_compile_context_create            CMPCNTCR    CONTEXT2\npcre2_compile_context_copy              CMPCNTCP    CONTEXT2\npcre2_compile_context_free              CMPCNTFR    CONTEXT2\npcre2_convert_context_copy              CNVCTXCP    CONTEXT2\npcre2_convert_context_create            CNVCTXCR    CONTEXT2\npcre2_convert_context_free              CNVCTXFR    CONTEXT2\npcre2_set_bsr                           SETBSR      CONTEXT2\npcre2_set_character_tables              SETCHRTB    CONTEXT2\npcre2_set_newline                       SETNEWLN    CONTEXT2\npcre2_set_parens_nest_limit             SETPRNLM    CONTEXT2\npcre2_set_compile_extra_options         SETCEXOP    CONTEXT2\npcre2_set_compile_recursion_guard       SETCMRCG    CONTEXT2\npcre2_set_depth_limit                   SETDEPLM    CONTEXT2\npcre2_set_glob_escape                   SETGLBES    CONTEXT2\npcre2_set_glob_separator                SETGLBSP    CONTEXT2\npcre2_set_heap_limit                    SETHEPLM    CONTEXT2\npcre2_match_context_create              MTCCNTCR    CONTEXT2\npcre2_match_context_copy                MTCCNTCP    CONTEXT2\npcre2_match_context_free                MTCCNTFR    CONTEXT2\npcre2_set_callout                       SETCALOT    CONTEXT2\npcre2_set_match_limit                   SETMTCLM    CONTEXT2\npcre2_set_recursion_limit               SETRCNLM    CONTEXT2\npcre2_set_offset_limit                  SETOFFLM    CONTEXT2\npcre2_set_max_pattern_length            SETMXPLN    CONTEXT2\npcre2_set_recursion_memory_management   SETRCNMM    CONTEXT2\npcre2_converted_pattern_free            CNVPATFR    CONVERT2\npcre2_pattern_convert                   PATTCONV    CONVERT2\npcre2_substring_copy_byname             SUBCPNAM    SUBSTRI2\npcre2_substring_copy_bynumber           SUBCPNUM    SUBSTRI2\npcre2_substring_free                    SUBSTFR     SUBSTRI2\npcre2_substring_get_byname              SUBGTNAM    SUBSTRI2\npcre2_substring_get_bynumber            SUBGTNUM    SUBSTRI2\npcre2_substring_length_byname           SUBLNNAM    SUBSTRI2\npcre2_substring_length_bynumber         SUBLNNUM    SUBSTRI2\npcre2_substring_nametable_scan          SUBNMSCN    SUBSTRI2\npcre2_substring_number_from_name        SUBNMFNM    SUBSTRI2\npcre2_substring_list_free               SUBLSTFR    SUBSTRI2\npcre2_substring_list_get                SUBLSTGT    SUBSTRI2\npcre2_substitute                        SUBSTIT2    SUBSTIT2\npcre2_jit_compile                       JITCOMP2    JITCOMP2\npcre2_jit_match                         JITMATC2    JITMATC2\npcre2_serialize_decode                  SERIADCD    SERIALI2\npcre2_serialize_encode                  SERIAENC    SERIALI2\npcre2_serialize_free                    SERIAFR     SERIALI2\npcre2_serialize_get_number_of_codes     SERGTNMC    SERIALI2\npcre2_get_error_message                 GETERROR    ERROR2\npcre2_maketables                        MAKETAB2    MAKETAB2\npcre2_maketables_free                   MAKETABF    MAKETAB2\npcre2_pattern_info                      PATTERN2    PATTERN2\npcre2_callout_enumerate                 CALOTENM    PATTERN2\npcre2_config                            CONFIG2     CONFIG2\npcre2_script_run                        SCRIPTR2    SCRIPTR2\nfree(***)                               FREEMAIN\nmalloc(***)                             GETMAIN\npcrz_what_term_str(*)                   ZWHTTRM     pcrzfunc\npcrz_is_space_term_str(*)               ZISSPTRM    pcrzfunc\npcrz_is_null_term_str(*)                ZISNLTRM    pcrzfunc\npcrz_space_to_null_term_str(*)          ZSPC2NUL    pcrzfunc\npcrz_null_to_space_term_str(*)          ZNUL2SPC    pcrzfunc\npcrz_codeset_init(****)                 ZCSINIT     pcrzfunc\npcrz_codeset_convert_pattern(****)      ZCSCONVP    pcrzfunc\npcrz_codeset_convert_subject(****)      ZCSCONVS    pcrzfunc\npcrz_codeset_init_substitute(****)      ZCSINIS     pcrzfunc\npcrz_codeset_convert_replacement(****)  ZCSCONVR    pcrzfunc\npcrz_codeset_convert_substitute_back    ZCSCONVB    pcrzfunc\npcrz_codeset_release(****)              ZCSRLSE     pcrzfunc\nregcomp(**)                             PREGCOMP    PC2POSIX\nregexec(**)                             PREGEXEC    PC2POSIX\nregerror(**)                            PREGERR     PC2POSIX\nregfree(**)                             PREGFREE    PC2POSIX\n\n(*) indicates supporting functionality, not available in the original\n  PCRE2 package and was added to support the COBOL environment.\n{**) Posix - the old name could be used.  See comments about the API\n  elsewhere in this document.  Use of these alternative names is\n  deprecated.  Instead, use the native POSIX names in conjunction with\n  PC2PSXAP.h header and provide DEF(COMPILE_WITH_PCRE2) compile option.\n(***) indicates that the new name is not implemented as a port, but as\n  a new functionality, available in PCOBAPI2 only\n(****) codeset manipulation functions used to convert internally EBCDIC\n  strings (patterns and subject strings) of all code-pages to IBM-1047.\n  See EBCDIC Horror bellow.\n\n7. Calling the PCRE2 functions from COBOL\n-----------------------------------------\nI urge anyone who wants to interface between COBOL and C to read the\nexcellent Share paper \"What is ILC and how to use it-COBOL, PL/I and\nC/C++\" by Mr. Tom Ross, Share Session 8239, August, 2003. The paper\ncould be found here:\nhttp://www-01.ibm.com/support/docview.wss?uid=swg27003846&aid=1\nI opted to use the pragma-less option and call the C modules in the\nmost native way because the C modules potentially, need to interact\nwith other C modules and not only with COBOL.\nI assume that practically everybody working in z/OS nowadays uses\nEnterprise COBOL version 3 and up and up and almost nobody would try to\nretrofit older programs to use PCRE.  Thus, the assumption is that the\nuser may call any module using BY VALUE, BY REFERENCE and RETURNING\nclauses in COBOL.  If there would be enough popular demand I may opt to\nwrite a special COBOL API module that could be used without the\nRETURNING clause.\nThe most important point is that when C function parameter list\nrequires a pointer (char * variable), the preferred way to mention that\nparameter would be to use a pointer rather then allow the parameter\nlist to implicitly provide that pointer.  Theoretically, one could use:\nCALL 'function' USING BY REFERENCE VARIABLE\ninstead of:\nCALL 'function' USING BY VALUE SOMEPOINTER\nwhere the pointer SOMEPOINTER points to VARIABLE, but if that variable\nis the last in the parameter list, then, by z/OS calling sequence\nconvention the highest bit is on in the last reference of the parameter\nlist and this would cause issues with C's pointer arithmetic.\nPlease refer to the PCOBDEM2 program, port of the pcr2demo.c for\nexamples of such calls.  The example herein is taken from that program\n    call 'COMPILE2' using\n         by value     pcrews-pattern-ptr\n         BY VALUE     PCRE2-ZERO-TERMINATED\n         BY VALUE 0\n         BY reference PCREWS-errornumber\n         BY reference pcrews-erroroffset\n         BY VALUE pcrews-null-ptr\n         RETURNING PCREWS-RE-PTR\n    end-call\nThe C definition of this module is:\n    pcre2_code *pcre2_compile(PCRE2_SPTR pattern, PCRE2_SIZE length,\n         uint32_t options, int *errorcode, PCRE2_SIZE *erroroffset,\n         pcre2_compile_context *ccontext);\n* The C module pcre_compile has become COMPILE2.\n* The returned value of type pointer to type pcre2_code is mentioned in\n  the RETURNING clause.  PCREWS-RE-PTR is defined in COBOL as USAGE\n  POINTER.\n* The first parameter is of type pointer to a character string and is\n  pointed to by pcrews-pattern-ptr, also defined as USAGE POINTER and\n  is pointing to pcrews-pattern, a character string.\n* The next parameter is a constant of type integer is passed by value.\n* The next parameter of type integer is passed by value (0).\n* The next two parameters, pointers to integers demonstrate the ability\n  to use BY REFERENCE and avoid a pointer.\n* The last parameter, a pointer to a character string is a passed by\n  value as discussed above.  In that case, that pointer points nowhere\n  (contains NULL value.\n\n8. COBOL copybooks\n-----------------------------\nSome of the publicly available C #include modules were ported, broken\nand adapted to COBOL.  See the PCOBDEM2 programs for demonstration on\nhow to use some of them:\nPCRCMPCN - implementation of pcre2-compile-context.\nPCRECAL2 - implementation of pcre2-callout-block and\n   pcre2-callout-enumerate-block.\nPCRECODE - implementation of pcre2-code.\nPCREWS2  - useful working-storage section variables to be used by most\n   COBOL programs.\nPCRE2    - a port of the public header (pcre2.h).\nPCRGENCN - implementation of pcre2-general-context.\nPCRECTXT - implementation of pcre2_convert_context\nPCRMECTL - implementation of pcre2-memctl.\nPCRMTCCN - implementation of pcre2-match-context.\nPCRMTCDA - implementation of pcre2-match-data.\nDUMPMEM  - a function, implemented as sub program, to dump memory for\n   test purposes.\n\n8. EBCDIC Horror\n----------------\nAs many of you know, EBCDIC is NOT one code page but actually several\ndistinct code pages.  The most common difference between one version\nof EBCDIC to another is language specific where Greek, Turkish, Hebrew,\nCyrillic, Arabic, etc. characters have to be supported in EBCDIC for\nthe various locales that use IBM mainframes.  Famous examples are:\nIBM-037 - USA/Canada - CECP\nIBM-273 - Germany F.R./Austria - CECP\nIBM-276 - Canada (French) - 94\nIBM-277 - Denmark, Norway - CECP\nIBM-297 - France - CECP\nIBM-284 - Spain/Latin America - CECP\nIBM-285 - United Kingdom - CECP\nIBM-423 - Greece - 183\nIBM-424 - Israel (Hebrew)\nIBM-425 - Arabic/Latin for OS/390 Open Edition\nIBM-1025 - Cyrillic, Multilingual\nIBM-1026 - Latin #5 - Turkey\nIBM-1047 - Latin 1/Open Systems\n(see https://www-01.ibm.com/software/globalization/cp/cp_cpgid.html\nfor an extensive list, including non-EBCDIC and multi-byte codes.\nNote that the discussion inhere assumes only eight bits code sets!)\nThe fact of multi-EBCDIC code pages unto itself should not be a problem\nfor any regular expression engine (or any other software).  The real\nproblem is IBM's (mis)handling of some special characters! Specifically\nthe characters $,\u00ac,\u00dd,\u00a8,# (and others) may occupay totally different\ncode points between one code page to the other.  And these are some of\nthe most prominent special characters that are used to express regular\nexpressions.\nI admit not being fully aware about the situation and not fully\nhandling it in the versions of PCRE/PCRE2 for z/OS prior to the current\nversion.  So much so that I will have to rewrite parts of the\ndocumentation and slightly change my automated process.  However, I\nwould like to push this version, with the proper remedy for the issue,\nout of the door immediately and than go back and redo the process and\nthe documentation.\n\n8.1. Solution for PCRE2\n-----------------------\nIn devising a solution for the EBCDIC Horror I had these design goals\nin mind:\n1. Users of PCRE2 are interested in applying regular expressions to\n   their subject strings and not in performing cumbersome code-page\n   conversions.\n2. The most reliable way to handle code page differences must be a\n   tried and true method, preferably from the vendor (IBM) and not\n   some new development.\n3. For most users, but not all, the native (locale) code-page is also\n   the code page that they see on their emulator.  Those users should\n   not be bothered with the code page specifics.\nIn essence I wanted to provide a minimal API that would hide as much of\nthe gory details from the user.\nIBM has settled on IBM-1047 as the best option and is using it as the\nbase code page.  The IBM C compiler is specifically geared to work in\nIBM-1047 as its native code page.  Thus, if you work with IBM-1047 and\nonly with IBM-1047, you may use the PCRE2 in this distribution as is\nand not bother with the rest of this document.\nIBM also supply a set of standard conversion function that are\navailable to all in their C/C++ Runtime Library.  These are the\niconv(), iconv_open() and iconv_close() functions which when are\ncoupled with the setlocale() and nl_langinfo() functions and with the\nlanginfo.h, locale.h and iconv.h header files could help to correctly\nconvert any EBCDIC string between any pairs of EBCDIC (and to some\nextent, non-EBCDIC) code pages.\nThe new version of PCRE2 for z/OS provides a front end for using this\nconversion functionality in tandem with PCRE2 while hiding the gory\ndetails from the user who is interested in using regular expressions,\nnot in string conversions, memory allocations, etc.  In essence, the\nuser calls these API functions and pass the results to PCRE2.  BUT the\nuser should NEVER look directly at the results of of these functions.\nRather, the user should stick with his/her own original regular\nexpressions and subject strings in their original code page.\nHere is the API, described in C.  Whenever the parameter to the\nfunction is described with **, it is the same as 'by reference' and\nprovides a value returned to the user.\nThe basic usage of this API is a one time initialization of the\nconversion process and then convert the input regular expression and\ninput subject string.  The converted strings are then to be supplied\nto the PCRE2 in the usual way.\nThe output 'ovector' is a vector of offsets.  These are valid offsets\nagainst the original unconverted input, so there is no need to\nconvert back.  The user has to just use the original subject with the\n'ovector'.  The names of named captured patterns in the ovector are\nlimited to \u00ddA-Za-z0-9_\u00a8.  As far as I know, these are not really a\nsubject for the EBCDIC horror, so there should be no conversion back\non those as well.\n\n/*  pcrz_codeset_init <=> ZCSINIT  */\nint pcrz_codeset_init (ZCSSTRCT ** handle_ptr,  /* returned handle */\n   char * codeset_name,  /* input codeset name e.g. IBM-037\n       or NULL if locale codeset is to be used */\n   size_t codeset_name_size, /* codeset name size - actual size or:\n                            -1 for null terminated\n                            -2 for space terminated */\n   size_t pattern_size,  /* maximum anticipated regex size or 0 for\n                            default */\n   size_t subject_size); /* maximum anticipated subject string size\n       or 0 for default */\n\n1. Determines the native (or use supplied) input CODESET.  If a codeset\n   name is not supplied (NULL), the function will use the locale\n   information.\n2. Initialize conversion from that codeset into IBM-1047.\n3. Allocate two blocks of memory for the IBM-1047 intermediate\n   strings, one for the pattern and one for the subject string.\nWarning: you may run on a machine with one native codest while you\nview it as another (a common scenario would be running on a standard\nIBM-1047 installation while your 3270 emulator is set to, let's say,\nIBM-285 because you are in the UK.)  In such cases you have to override\nthe locale by supplying your emulator codeset.\nNote that the internal CODESET is always IBM1-1047 which is the IBM\nC/C++ compiler default and the way the binaries are distributed.\npattern_size and subject_size are the estimated maximum sizes for\nthe largest pattern and largest subject string, default to 2048 and\n8192 correspondingly when the user specifies 0 value.\nThe returned handle should be preserved.\nThe function returns -1 in case of failure, 0 in case of success and 1\nwhen no conversion is necessary.  The user should not bother with the\ndistinction between rc 0 and 1 as the other sunctions know how to\nhandle both situations.\n\n/*  pcrz_codeset_init_substitute <=> ZCSINIS         */\nint pcrz_codeset_init_substitute (ZCSSTRCT * handle_ptr, /* handle\n                      returned from ZCSINIT */\n    size_t replacement_size, /* maximum anticipated replacement string\n                      size or 0 for default */\n    size_t substitute_size); /* maximum anticipated substituted result\n                      stringsize or 0 for default */\n\nWhen using the substitute functionality we need to supply two more\ncomponents, the replacement string/pattern and the budder for the\nresult substituded string.\n\n/*  pcrz_codeset_convert_pattern <=> ZCSCONVP */\nint pcrz_codeset_convert_pattern (ZCSSTRCT *zcsstrct_ptr, /* handle\n                      returned from ZCSINIT */\n    char * input_pattern,  /* pointer to input regex */\n    size_t pattern_length, /* regex size or 0 for null\n                      terminated string */\n    char ** output_pattern, /* handle for converted regex to be\n                      supplied to PCRE2 compile function */\n    size_t ** out_pattern_length);    /* converted regex size */\n/*  pcrz_codeset_convert_subject <=> ZCSCONVS */\nint pcrz_codeset_convert_subject (ZCSSTRCT *zcsstrct_ptr, /* handle\n                      returned from ZCSINIT */\n    char * input_subject,  /* pointer to input subject string */\n    size_t subject_length, /* subject string size or 0 for null\n                      terminated string */\n    char ** output_subject, /* handle for converted subject string\n                      to be supplied to PCRE2 execute function */\n    size_t ** out_subject_length); /* converted subject string\n                      size */\n/*  pcrz_codeset_convert_replacement <=> ZCSCONVR */\nint pcrz_codeset_convert_replacement (ZCSSTRCT *zcsstrct_ptr,\n                      /* handle returned from ZCSINIT */\n    char * input_replacement,  /* pointer to input replacement\n                      string */\n    size_t replacement_length, /* replacement string size or 0\n                      for null terminated string */\n    char ** output_replacement, /* handle for converted replacement\n                      string to be supplied to PCRE2 sunbstitute\n                      function */\n    size_t ** out_replacement_length); /* converted subject string\n                      size */\n/*  pcrz_codeset_convert_substitute_back <=> ZCSCONVB */\nint pcrz_codeset_convert_substitute_back (ZCSSTRCT *zcsstrct_ptr,\n                      /* handle returned from ZCSINIT */\n    char * input_substitute,  /* pointer to input substitute\n                      string - this one has to be converted back to\n                      the original coceset*/\n    size_t substitute_length, /* substituted string size or 0\n                      for null terminated string */\n    char ** output_substitute, /* handle for converted back\n                      substituded string for the user */\n    size_t ** out_substitute_length); /* converted substitute string\n                      size */\n\nThese are front end conversion functions, converting pattern, subject\nstrings or replacement string (for substitution) from the local codeset\nto IBM-1047.  This is done via three distinct functions to avoid user\ndirect interaction with the gory details:\nThe functions return pointer to converted string and its size.  If size\nis not supplied (value 0) the function will assume a zero terminated\ninput string and will calculate the length.\nThe functions returns -1 in case of failure and 0 in case of success\n\nNote that the last function is slightly different.  Its result is not\nfor internal use as this returns to the user the actual converted back\n(to user's codest) result string.\n\n/*  pcrz_codeset_release <=> ZCSRLSE          */\nextern void pcrz_codeset_release (ZCSSTRCT *zcsstrct_ptr);\n                            /* handle returned from ZCSINIT */\n\nReleasing the formerly initialized environment and deallocating any\nallocated memory.\n\n8.2 Usage (brief description)\n-----------------------------\nZCSINIT - To be called first.  it returns a handle for a structure to\nmanage all allocated memory.  This handle is used by all other\nfunctions.  Note that every pattern requires its own ZCSINIT and\nhandle.  Provide codeset name, max pattern (or zero for default size)\nand max subject size (or zero.)\n\nNow, unless the native codest is IBM-1047, call ZCSCONVP to convert\nthe pattern and ZCSCONVS to convert the subject to IBM-1047.  Provide\nthe handle from ZCSINIT and other parameters (see above.)\n\nFor match, this is it, no more initialization is required.\n\nFor substitution, one should call the ZCSINIS using the handle from\nZCSINIT, max size of the replacement (or zero for defaults size) and\nmax size of the substitute output (or zero.)\n\nNow call the ZCSCONVR to convert the replacement string. Same\nparameters as all other conversion functions\n\nAfter calling the substitute function, call the ZCSCONVB, where the\ninput is the output of the substitute (in IBM-1047) and the output will\nbe a pointer to the converted back string (or same string if no\nconversion is needed.)\n\nOnce done, call ZCSRLSE to get release all allocated memory.\nNote about ZCSRLSE:  This function releases all blocks of memory that\nwere acquired by ZCSINIT and ZCSINIS for a specific pattern/subject\npait.  The user is still responsible for releasing memory acquired by\nthe core library functions.  Use the below functions as appropriate:\n    pcre2_code_free                CODEFREE\n    pcre2_match_data_free          MATCHDFR\n    pcre2_general_context_free     GENCNTFR\n    pcre2_compile_context_free     CMPCNTFR\n    pcre2_convert_context_free     CNVCTXFR\n    pcre2_match_context_free       MTCCNTFR\n    pcre2_converted_pattern_free   CNVPATFR\n    pcre2_substring_free           SUBSTFR\n    pcre2_substring_list_free      SUBLSTFR\n    pcre2_serialize_free           SERIAFR\n    pcre2_maketables_free          MAKETABF\n    regfree                        PREGFREE\n\nReturn codes\n-1 is a failure, 0 is success\nZCSRLSE does not return any value\n\nDefault sizes\n#define PCRZ_MAX_PATTERN_SIZE 2048\n#define PCRZ_MAX_SUBJECT_SIZE 8192\n#define PCRZ_MAX_REPLACEMENT_SIZE 1024\n#define PCRZ_MAX_SUBSTITUTE_SIZE 16384\n#define PCRZ_MAX_CODESET_SIZE 16\nMAX_NUM_COMPILES     EQU   12   max simultaneous compiles\n______________________________________________________________________\nList of available error messages:\n\nZCSINIT-001: failed to allocate ZCSSTRCT block\nZCSINIT-002: CODESET name length %d too large\nZCSINIT-003: CODESET name too long\nZCSINIT-004: CODESET name size %d too large\nZCSINIT-005: Cannot open converter from %s to %s\nZCSINIT-006: failed to allocate space for converted pattern\nZCSINIT-007: failed to allocate space for converted subject\nZCSINIT-008: Cannot open converter from %s to %s\nZCSINIT-010: failed to allocate space for converted replacement\nZCSINIT-011: failed to allocate space for converted substitute\nZCSINIT-012: failed to allocate space for converted substitute back\nZCSCONVx-001: target length gt allocated block\nZCSCONVx-002: Error in converting subject string\nZCSCONVx-003: Unknown supplied function %s\n\n9. REXX API\n-----------\nNotice that the this section is John Gateley's documentation which I\nhad modified only slightly.\n______________________________________________________________________\n\n RXPCRE2 - interface between the Rexx language on z/OS and the\n PCRE2 - regex processing library on same platform.\n REXPCRE - same interface for non-representative calls.\n\n Version 0.3\n Contributed by:   John Gateley  November 2017.\n Copyright (c) 2017, John Gateley.\n All rights reserved.\n______________________________________________________________________\n\n This interface was written by John Gateley in September 2017 and is\n designed to be used with the  z/OS port of 'PCRE2 - Perl Compatible\n Regular Expressions' which was  ported by Ze'ev Atlas.\n\n To assemble these programs you will need the supplied macros and will\n also need to assemble modules STRINGIT which is used in STRING macro\n and TRIMIT which is used by the TRIM macro.  Please refer to the\n JCLLIB that comes with the PCRE2 package for the appropriate JCL.\n______________________________________________________________________\n\nThis code uses the following functions for the C environment\n\n  EDCXHOTL    create C environment with library functions\n  EDCXHOTU    call a C routine\n  EDCXHOTT    terminate C environment\n\nThis method was chosen because the only example that I could find of\nREXX calling C via assembler used this.\nCEEPIPI may also work, and is recommended by IBM.  We may look at it\nin subsequent releases.\n\nSee:-\nArticle \"Calling C functions from Assembler - revisited\"\nby A Rudd printed in issue 208 of Xephon magazine of January 2004\nhttp://www.cbttape.org/xephon/xephonm/mvs0401.pdf\n______________________________________________________________________\n\nIt was thought that there were two distinct scenarios that the\nuse of PCRE from REXX would follow.\n\n1, Parsing a value such as an argument to the REXX program or a\n   single record in a control file.\n2, Performing a regular expression on every record from a file.\n\nTo easily enable these two scenarios two versions of the interface\nbetween REXX and PCRE were developed.\n\nSee #REXPCRE below for details of REXXPCRE.  For code example, see the\n    #REXPCRE document in the PCRE2.ASM library in the distribution.\nSee #RXPCRE2 below for details of RXPCRE2.  For code example, see the\n    #REXPCR2 document in the PCRE2.ASM library in the distribution.\n\nThe two main REXX functions are\n\nREXXPCRE   -  the rexx function for single execution of the REGEX\n              returns 0 - no matches\n                      1 - matches\n                      an error message\n\n\nRXPCRE2    -  the rexx function for multiple executes of the REGEX\n              this is the program which should be called from a\n              rexx program to handle perl compatible regular\n              expressions.\n              It gets the rexx arguments and passes them to RXPCRE2A\n              which is a separate load module which also contains\n              the C code.\n              On first call it loads RXPCRE2A into memory and returns\n              the load address to the calling rexx function so that\n              subsequent calls to this module can use the same\n              version that was previously loaded.\n              Returns from this function depend on the command given\n              Any error messages from the program are written using\n              a call to IRXSAY which is the 'SAY' callable function.\n\n    'CONNECT'    connect to the C environment\n                 returns eight bytes of environment information\n                 or RC=8\n    'COMPILE'    compile a regular expression\n                 returns 19 bytes of compile information\n                 or RC=8\n    'EXECUTE'    run the regex using the input string, output\n                 will go to the specified stem variable\n                 returns 0 - no matches\n                         1 - matches\n                         8 - error\n    'RELEASE'    remove the specified regex compilation\n                 returns 0 - OK\n                         8 - error\n    'DISCONNECT' terminate the C environment\n                 returns 0 - OK\n                         8 - error\n\nThere are an additional four programs that are used by the above\n\nRXPCRE2A   -  the sub-routine used by RXPCRE2 which contains the\n              calls to all the C code and should only be called by\n              RXPCRE2 as it uses the rexx environment that exists\n              in that module.\n\nPROCSTEM   -  a sub-routine that manipulates rexx stem variables on\n              behalf of the calling program.\n              Macro PRGSTEM should be used in the calling program\n              to define the interface storage.\n              This also makes use of the rexx environment.\n\nSTRINGIT   -  used by the STRING macro - acts like COBOL STRING.\n\nTRIMIT     -  used by the TRIM macro to remove excess spaces.\n______________________________________________________________________\n#REXPCRE\n\n How REXXPCRE works.\n\n   INPUT ARGUMENTS\n     1, the PERL regular expression.\n     2, the string to be worked on.\n     3, a STEM name which will be populated with the output\n     4, an optional OPTION\n                    'g'  -  match all\n                    'i'  -  ignore case\n                    'x'  -  exclude white space\n     5, an optional code-page - e.g.  'IBM-285'\n        if omitted the default local page is used\n     6, 'debug' if debugging required. Needs PCREDUMP DD name.\n\n   OUTPUT\n        if   successfull\n             RC=1    matched  - stem contains output\n             RC=0    no match - stem.0 will be '0'\n        else\n             RC='error message text'\n        endif\n\n   STEM variables output\n        stem.0             count of stem variables\n        stem.STRING.?      matched substrings\n        stem.POS.?         position and length of matches e.g. 3,4\n        stem.NAME.?        named substrings ' ' if none\n\n   DEBUGGING can be done by specifying 'debug' as argument 6.\n             You will also need to allocate the DD name PCREDUMP\n             with DISP=MOD if more than one call to REXXPCRE\n             because each call is a separate unit of work which\n             includes opening and closing the dataset.\n\nA brief discussion about code pages:\nVarious EBCDIC code pages place the dollar symbol in different code\npoints. In IBM-037 the dollar is x'5B' but in IBM-285 (UK) this is\nthe currency symbol for GBP and the dollar is at x'4A' which is the\ncent symbol in IBM-037. Confusing!\nInternally PCRE2 uses IBM-1047 so to use the dollar symbol in the\nregex we pass a fifth argument which is the code page name we are\nactually using.  This causes PCRE to convert the regex internally\nfrom IBM-285 to IBM-1047 before it is compiled, similarly the string\nis converted before the match is done.\n\nNOTE - this argument is only required if you use a code page in your\nterminal emulator which is NOT the same as the default local code page.\nNormal processing by PCRE is to convert the REGEX and string from the\ndefault local code page to IBM-1047.  IBM-1047 is used by the mainframe\nC compiler.\n*______________________________________________________________________\n*\n#RXPCRE2\n  How RXPCRE2 works.\n\n  This program RXPCRE2 is a rexx function and RXPCRE2A is a helper.\n  On the 'connect' call RXPCRE2A is loaded into memory and the\n  address of the program is returned, this enables the program to\n  be found on subsequent calls.\n  The 'disconnect' function terminates the C environment and deletes\n  RXPCRE2A from memory.\n\n\n  There are 5 calls to the function\n\n\n  1, CONNECT\n     Establish the C environment with or without debug.\n     If OK returns an eight byte environment handle which should\n     be used in subsequent calls to the function.\n     An optional third parameter is the code page that is being used,\n     this defaults to a z/OS environment variable but can be set\n     byt the user.\n     If DEBUG is specified then the DDNAME PCREDUMP must be allocated\n     with DISP=MOD as the dataset will be opened and closed on\n     every call.\n\n     Returns 0 if OK\n             8 if failed - an error message will be writen using IRXSAY\n\n       r_c     = RXPCRE2('connect','pcre_env')\n       r_c     = RXPCRE2('connect','pcre_env',,'debug')\n       r_c     = RXPCRE2('connect','pcre_env','IBM-285')\n       r_c     = RXPCRE2('connect','pcre_env','IBM-285','debug')\n\n       if  r_c  > 0 then exit\n\n\n  2, COMPILE (alias COMP)\n     Compile a PCRE regular expression.\n     This returns an nineteen byte compile handle which should\n     be used in subsequent calls to the function.\n     Options can be specified\n                  'g'  repeat search\n                  'i'  ignore case\n                  'x'  exclude white space\n     Note that multiple regular expressions can be compiled and\n     then executed in turn.\n\n     Returns 0 if OK\n             8 if failed - an error message will be writen using IRXSAY\n\n       reg_ex  = \"(?<char>A)\\g<char>\"\n\n       r_c     = RXPCRE2('compile',pcre_env,reg_ex,'pcre_comp','g')\n\n       if  r_c  > 0 then exit\n\n\n  3, EXECUTE or MATCH (alias EXEC)\n     Process the compiled expression, repeat this call as required.\n     The STEM name is used as the first part of the output\n     'WANG' will give  WANG.0         the count of matches\n                       WANG_STRING.?  the sub-strings\n                       WANG_POS.?     the positions within the string\n                       WANG_NAME.?    named sub-strings (blank if none)\n\n     returns  0     no match - stem.string.0 will be '0'\n              1     matched  - stem.string.? contains output\n              8     an error message will be writen using IRXSAY\n\n       the_str   = \"AN_AARDWARK_JAKE_AND_AARDWARK_JACK\"\n       my_stem   = \"WANG\"\n\n       r_c = RXPCRE2('execute',pcre_env,pcre_comp,the_str,my_stem)\n\n     This call can be repeated as many times as required.\n\n\n  4, SUBSTITUTE - alias SUBS\n     This is similar to EXECUTE but uses the routine SUBSTIT2\n     instead of MATCH2 and requires an additional input containing\n     the substitute string.\n     The variable name is used to contain the output string\n\n     returns  0     no match - rexx variable not set\n              1     matched  - rexx variable contains output string\n              8     an error message will be writen using IRXSAY\n\n       reg_ex      \"cat|dog\"\n       the_str     \"the dog sat on the cat's dog\"\n       subs_str    \"horse\"\n       my_var    = \"WANG\"\n\n       r_c = RXPCRE2('substitute',pcre_env,pcre_comp,the_str,,\n                     my_var,subs_str)\n\n     This call can be repeated as many times as required.\n\n\n  5, RELEASE\n     Release the compile storage\n     Returns 0 if successfull.\n             8 if failed - an error message will be writen using IRXSAY\n\n       re_lease  = RXPCRE2('release',pcre_env,pcre_comp)\n\n\n  6, DISCONNECT\n     Terminate the C environment.\n     Returns 0 if successfull.\n             8 if failed - an error message will be writen using IRXSAY\n\n       r_c     = RXPCRE2('disconnect',pcre_env)\n\n\n  NOTE if any call fails then all storage and compile handles will\n       be released and the C environment will be terminated.\n       Do not attempt to continue after this.\n*______________________________________________________________________\n*\n     STEM variables output\n          stem.0             count of stem variables\n          stem_STRING.?      matched substrings\n          stem_POS.?         position and length of matches e.g. 3,4\n          stem_NAME.?        named substrings ' ' if none\n\n     these stem values will contain the same as stem.0\n          stem_STRING.0\n          stem_POS.0\n          stem_NAME.0\n*______________________________________________________________________\n*\n          PCRELIB\n\n   When running in batch the LOAD macro will try to find the requested\n   module/program object in the STEPLIB or JOBLIB concatenation\n   which will contain the PDSE library containing RXPCRE2A. This works.\n\n   In ISPF the library would be concatenated to ISPLLIB which will\n   allow RXPCRE2 to be loaded, however, when this tries to load\n   RXPCRE2A the STEPLIB would be used and would fail.\n   It should be possible to put the program library in the ISPLLIB\n   concatenation and amend all references to PCRELIB to ISPLLIB\n   but this will not work when ISPLLIB is modified using LIBDEF as\n   the library is not added to the actual ISPLLIB but to another\n   DDNAME which is logically concatenated by ISPF.\n\n   For the above reasons PCRELIB is used. If it is not present in the\n   task IO table the program will not attempt to use it.\n\n       /* allow RXPCRE2 to be loaded by REXX */\n       \"ISPEXEC LIBDEF ISPLLIB DATASET ID ('SDJRG.LOADLIB.POBJ')\"\n       if rc /= 0 then do\n          say 'allocation to ispllib failed.'\n          exit\n       end\n       /* allow RXPCRE2A to be loaded by RXPCRE2A */\n       \"ALLOC FI(PCRELIB)  DA('?????.LOADLIB.POBJ') SHR\"\n       if rc /= 0 then do\n          say 'allocation to PCRELIB failed.'\n          exit\n       end\n\n       ...\n\n       \"FREE FILE(PCRELIB)\"\n       \"ISPEXEC LIBDEF ISPLLIB \"\n_____________________________________________________________________\n List of available error messages:\n (We will come with detailed explanations in subsequent releases)\n\nRXPCRE2-001 - Error in set environment handle RC=\nRXPCRE2-002 - Error in set compile handle RC=\nRXPCRE2-003 - Could not find RXPCRE2A in PRCELIB\nRXPCRE2-004 - Could not open PCRELIB\nRXPCRE2-005 - Could not find RXPCRE2A\nRXPCRE2-006 - Return code on SAY=\nRXPCRE2-007 - invalid command specified\nRXPCRE2-008 - command not specified\nRXPCRE2-009 - command length was 0\nRXPCRE2-010 - command greater than 20 bytes\nRXPCRE2-011 - environment not specified as argument 2\nRXPCRE2-012 - environment length was not 8 bytes\nRXPCRE2-013 connect - debug command not 'debug'\nRXPCRE2-014 compile - regex not specified\nRXPCRE2-015 compile - regex length was 0\nRXPCRE2-016 compile - regex not null terminated\nRXPCRE2-017 compile - options > 20 bytes\nRXPCRE2-018 compile - options were null terminated\nRXPCRE2-019 compile - options not recognised\nRXPCRE2-020 execute - argument compile result not passed\nRXPCRE2-021 execute - argument compile result invalid\nRXPCRE2-022 execute - string to test is missing\nRXPCRE2-023 execute - string to test has zero length\nRXPCRE2-024 execute - stem name not available\nRXPCRE2-025 execute - stem name has 0 length\nRXPCRE2-026 execute - stem name > 20 bytes\nRXPCRE2-027 release - compile result not passed\nRXPCRE2-028 release - compile result invalid length\nRXPCRE2-029 connect - env handle not specified\nRXPCRE2-030 connect - env handle length was 0\nRXPCRE2-031 connect - env handle > 20 bytes\nRXPCRE2-032 connect - env handle was DEBUG\nRXPCRE2-033 connect - comp handle not specified\nRXPCRE2-034 connect - comp handle length was 0\nRXPCRE2-035 connect - comp handle > 20 bytes\nRXPCRE2-036 connect - comp handle was DEBUG\nRXPCRE2-037 subst - argument compile result not passed\nRXPCRE2-038 subst - argument compile result invalid\nRXPCRE2-039 subst - string to test is missing\nRXPCRE2-040 subst - string to test has zero length\nRXPCRE2-041 subst - variable name not available\nRXPCRE2-042 subst - variable name has 0 length\nRXPCRE2-043 subst - variable name > 20 bytes\nRXPCRE2-044 subst - subs string not available\nRXPCRE2-045 subst - subs string has 0 length\nRXPCRE2-nnn - unknown error, RC=\nRXPCRE2A-001 - Return code on SAY=\nRXPCRE2A-002 - debug specified but DD name PCREDUMP not allocated\nRXPCRE2A-003 - Invalid command\nRXPCRE2A-004 - Max compiles exceeded\nRXPCRE2A-011 - Ovector not big enough\nRXPCRE2A-012 - Ovector not big enough\nRXPCRE2A-013 - PCRE2 compilation failed at offset ...\nRXPCRE2A-014 - Code page failure\nRXPCRE2A-nnn - Unknown error, RC=\nREXXPCRE-001 - REGEX (argument 1) not supplied'\nREXXPCRE-002 - REGEX (argument 1) was zero length'\nREXXPCRE-003 - STRING (argument 2) not supplied'\nREXXPCRE-004 - STRING (argument 2) was zero length'\nREXXPCRE-005 - STEM NAME (argument 3) not supplied'\nREXXPCRE-006 - STEM NAME (argument 3) was zero length'\nREXXPCRE-007 - STEM NAME (argument 3) > 20 bytes'\nREXXPCRE-008 - OPTIONS (argument 4) > 20 bytes'\nREXXPCRE-009 - OPTIONS (argument 4) not recognised'\nREXXPCRE-010 - DEBUG (argument 6) <> 5 bytes'\nREXXPCRE-011 - Output value longer than 2048'\nREXXPCRE-012 - Return code on SAY='\nREXXPCRE-013 - Matching error '\nREXXPCRE-014 - PCRE2 compilation failed at offset '\nREXXPCRE-015 - Code page failure (argument 5)'\nREXXPCRE-016 - Debug specified but DD name PCREDUMP not allocated'\nREXXPCRE-017 - Ovector not big enough'\n______________________________________________________________________\n\n10. Support functions\n---------------------\nThe functions described here do not use Reg Exp because Reg Exp is not\nyet available.  They help to prepare COBOL fixed length character\nstrings for Reg Exp manipulation.  COBOL character strings are\nfundamentally different from C (and thus also C++, Java, C# and\nvirtually any other language) character strings in that they are fixed\nlength or length terminated (i.e. the length of the string is known\neither in compile time or in run time via some variable.)  That length\nis retrievable by means of querying the prefix variable or using the\nLENGTH OF special register.  There is no terminator character (null or\notherwise.)  COBOL notion of fixed length or length terminated\ncharacter strings relates directly to the notion of fixed length\nrecords - record length is pre-defined and known in similar manner and\nthere is no record terminator character.\nMost other languages use the null terminated notation (i.e. the\nend-of-string is signaled by the null character.  Regular Expression as\ndefined and implemented by Perl, Posix and PCRE depend on the string\nbeing null terminated.  To add to the complication, C on z/OS adds\nrecord terminator to the end of the record even on fixed length\nrecords, but on text records, at least from the standard input, the\nlast spaces are chopped.  I coined that type as space terminated\nrecords and strings.  Enterprise COBOL supports PIC Z strings which are\nessentialy null terminated strings.\nThe functions herein provide the means to query a character string and\nconvert it to the desired format.  Note that to make a length\nterminated string into null terminated one may use COBOL technique of\nconcatenating the sting with null:\n           STRING YOUR-LENGTH-TERMINATED_STRING, LOW-VALUE\n                  DELIMITED BY SIZE INTO YOUR-TARGET-STRING\nCurrently, these functions compile only under NATIVE_ZOS as I suspect\nthat nobody else will want or need them, however, it is pretty simple\nto remove this limitation.\n\nint pcrz_what_term_str (char * str, int maxlen); -\n  Examines the string str for max length of maxlen and returns -1 if it\n  is a null terminated, -2 if space terminated and -3 if length\n  terminated.\nint pcrz_is_space_term_str (char * str, int maxlen); -\n  Examines the string str for max length of maxlen and returns -1 if it\n  is a null terminated, -3 if length terminated and the actual\n  significant length (i.e. sans the trailing spaces) if space\n  terminated.\nint pcrz_is_null_term_str (char * str, int maxlen); -\n  Examines the string str for max length of maxlen and returns -2 if it\n  is a space terminated, -3 if length terminated and the actual length\n  if null terminated.\nint pcrz_space_to_null_term_str (char * str, int maxlen); -\n  Examines the string str for max length of maxlen.  If it is already\n  null terminated, only the null terminated string part is examined\n  farther.  The function looks for the last non-space character, marks\n  the next character as null and returns the actual length of the null\n  terminated string.  If the last non-space character is the last\n  character (no room for null character, then the function will return\n  -3 for length terminated.\n  Note: maxlen is one more then the null terminated string length to\n  allow for the null terminator.\nint pcrz_null_to_space_term_str (char * str, int maxlen); -\n  Examines  the string str for max length of maxlen.  If it is null\n  terminated, the null character and all characters after it to maxlen\n  are replaced by spaces.  The function then looks for the last\n  non-space character and returns the actual length of the space\n  terminated string.  If the last non-space character is the last\n  character, then the function will return -3 for length terminated.\nNote these two functions:\nvoid FREEMAIN (void* ptr);\nvoid * GETMAIN (size_t size); - GETMAIN and FREEMAIN are holdovers from\n   PCRE.  The names were chosen because of the mainframe programmers\n   familiarity with those names (as implemented in CICS) and because\n   they are new development rather then an implementation of the PCRE\n   functions (themselves meant as front ends for user implemented\n   functionality.)\n   GETMAIN and FREEMAIN are just front ends to the native C functions\n   malloc and free.\n\n11. GREP functionality\n----------------------\nGREP functionality is available through the pcr2grep module and is\nworking with added functionality not available in other OSes.  pcr2grep\nfor z/OS recognizes a PDS or PDSE as such and deal with it as if it was\na Unix directory.  All members are examined individually for the\nsearched pattern.  HFS and ZFS file systems are interpreted as they\nshould - as Unix file systems.\nFor some reason the z/OS Language Environment (LE) runtime is prompting\nfor its own runtime options.  Put '/' in the beginning of the\nPARM='/... field to signal to LE runtime that it is not supplied with\nany options.\nApparently, there is a difference in the way runtime options are\nimplemented in pcr2grep as opposing to, for example, pcr2test that does\nnot have this problem, but I have not yet find that difference.\nThere is a TESTGREP JCL member to demonstrate usage of pcregrep.\nNote: #define NATIVE_ZOS_OFF\n   Using this macro allows confining the effects of NATIVE_ZOS within\n   the config.h so the rest of the program would compile without it.\n   The main use of that is in PCR2GREP, if we want to ignore the\n   effects of the z/OS specific file system and use it as pure Unix, or\n   as a primitive OS if we also do not configure DEF(HAVE_SYS_STAT_H),\n   DEF(HAVE_DIRENT_H) and DEF(HAVE_SYS_TYPES_H).\nTesting of the full GREP functionality in z/OS/EBCDIC environment is\nnot complete (as of 10.22.544.) I will try to complete it for later\nrelease.\n\n12. Why isn't JIT Supported\n---------------------------\nThis is a quote from Philip's email to me:\nThe JIT compiler compiles native machine code for the host it is\nrunning on.  Zolt\u00e1n has access to, and has provided code generators\nfor, several common non-mainframe architectures:\n\n  ARM v5, v7, and Thumb2\n  Intel x86 32-bit and 64-bit\n  MIPS 32-bit\n  Power PC 32-bit and 64-bit\n  SPARC 32-bit (experimental)\n\nInternally, the SLJIT compiler uses a generalized machine language that\ncombines the common elements of common architectures: this is then\nrefined for the actual architecture in use. I do not know whether it\nwould be possible to make it generate code for a mainframe, but that is\nnot really the point: the maintainer would have to have access to (and\nfamiliarity with) a mainframe in order to implement it, and I very much\ndoubt that he has, or will ever have, this.\n------\nIf any of you has the required expertise, you are welcome to join and\ncontribute.  Until then, JIT is not supported.\n\nBTW, Philip was a mainframe programmer years ago and he still has no\nintention to go for it :(\n\n13. POSIX API in PCRE2\n----------------------\nSupport for the POSIX API in PCRE2 was never meant to support the regex\nmodel of POSIX, just to provide the user with the familiar API, but\nwith the PCRE2 (Perl Compatibility) regex model.  In order to prevent\nundue conflicts in the binding (linkedit) step, I've decided to change\nthe API by providing PCRE2 specific names for the four POSIX functions.\nThe user is advised, of course, never to use the regex.h header in\nconjunction with PCRE2 in order to prevent conflict in compile time\n(for C.)\nUsers may, obviously, use the provided PCRE2 function names (and\ninclude the POSIX module PC2POSIX in the binding step,) as is done\ninternally in PCRE2 for z/OS.  However to give the user the full beauty\nof this functionality, the user may include the provided header file\nPC2PSXAP.h (of four pragma map statements,) and continue to use the\nnative POSIX function names.  Remember that you need also the posixh.h\nand the pcre2.h header files.  The provided IBMSAMPL.c program\ndemonstrates how to compile such programs with option to use either the\noriginal POSIX functionality \u00ddUNDEF(COMPILE_WITH_PCRE2=1)\u00a8 or the PCRE2\nfunctionality \u00ddDEF(COMPILE_WITH_PCRE2=1)\u00a8.  See the provided output\nsnippets below to demonstrate the difference.  For languages that do\nnot have pragma map or any equivalent, just use the PCRE2 function\nnames.  Use COMPIBMS in JCLLIB to compile IBMSAMPL either way.\nNote that the provided API program, PCOBAPI2.c had a section that tried\nto deal with the issue.  This section is now commented out and the\ncompile option UNDEF(NATIVE_ZOS_POSIX) does nothing.\n\nOutput snippets\n---------------\n+++ COMPILE WITH PCRE2 oneself\nWith the whole expression, a matched substring \"oneself\" is found at...\nWith the sub-expression, a matched substring \"self\" is found at...\n\n+++ COMPILE WITH POSIX oneselfsufficient\nWith the whole expression, a matched substring \"oneselfsufficient\"...\nWith the sub-expression, a matched substring \"selfsufficient\" is...\n\n14. Test Suite\n--------------\n1. While developing the test suite for EBCDIC we've corrected some bugs\n   in the core PCRE2 regarding EBCDIC.  Only significant bugs and\n   issues are mentioned.\n   1.1 \\c is now behaving as described in the perlebcdic document.\n   1.2 \\a and \\e are translated across the board to 0x2f and 0x27\n      rather than to the ASCII designations 0x07 and 0x1b.\n2. There are some differences in between ASCII and EBCDIC.\n   2.1 The aforementioned \\c is limited to 32 characters only (see\n      Perlebcdic).\n   2.2 The \\h meta-character includes 0x09 (tab), 0x20 (space) and 0xa0\n      (non-breaking space).  In EBCDIC \\h now includes the parallel\n      0x05 (tab), 0x40 (space) and 0x41 (non-breaking space).\n   2.3 The \\R, \\v meta-characters include 0x0a, 0x0b, 0x0c, 0x0d and\n      0x85, which corresponds perfectly with the EBCDIC equivalents,\n      0x0b, 0x0c, 0x0d, 0x15 and 0x25, but the latter misbehaves.  OTH\n      most people would never use 0x25 for nothing so it is a moot\n      issue.\n   2.4 Perl recognizes the \u00ddA-Z\u00a8 and \u00dda-z\u00a8 as special cases that\n      include the letters a-z and A-Z only, without the EBCDIC gaps.\n      This is implemented in PCRE2 only.\n3. Test suites\n   In developing the EBCDIC test suite, I used this Methodology:\n   3.1 We are interested only in testinput1, testinput2, testinput15,\n      testinput16, testinput18, testinput20 and testinput21.  In the\n      past we were interested partially in the old testinput11 and\n      testinput14.\n   3.2 I Compared pcr2test results from the provided standard test\n      suite to the z/OS EBCDIC results (after converting to ASCII.)\n   3.3 I ignored all same results or where the differences were obvious\n      (0x0a vs. 0x15, Caret vs. logical not) and where the EBCDIC\n      results are matching correctly, if different.\n   3.4 For all remaining issues, I've developed a small test suite that\n      either demonstrates how to code the pattern so that it would\n      match, demonstrates significant point of difference, or overcome\n      issues such as  different file name scheme (for saved regexes),\n      etc.\n   3.5 The provided files are ASCII images of the actual EBCDIC files.\n      The original EBCDIC files would be available on the EBCDIC\n      distribution on the PCRE2.TESTLIB library.\n      TSTINE1 - derived from issues in testinput1.\n      TSTINE2 - derived from issues in testinput2.\n      TSTINE11 - derived from issues in testinput11.\n      TSTINE14 - derived from issues in testinput14.\n      TSTOTE1 - pcretest z/OS output for TSTINE1.\n      TSTOTE2 - pcretest z/OS output for TSTINE2.\n      TSTOTE11 - pcretest z/OS output for TSTINE11.\n      TSTOTE14 - pcretest z/OS output for TSTINE14.\n      All in addition to the existing :\n      TSTIN1 - EBCDIC for testinput1.\n      TSTIN2 - EBCDIC for testinput2.\n      TSTIN15 - EBCDIC for testinput15.\n      TSTIN16 - EBCDIC for testinput16.\n      TSTIN18 - EBCDIC for testinput18.\n      TSTIN20 - EBCDIC for testinput20.\n      TSTIN21 - EBCDIC for testinput21.\n      TSTOT1 - EBCDIC images of the original (ASCII) test outputs.\n      TSTOT2\n      TSTOT15\n      TSTOT16\n      TSTOT18\n      TSTOT20\n      TSTOT21\n      TSTOO1 - EBCDIC test outputs from the PCRE2 for z/OS.\n      TSTOO15\n      TSTOO16\n      TSTOO18\n      TSTOO2\n      TSTOO20\n      TSTOO21\n      Note: the output compiled patterns are not provided.  This\n         decision may change if there is some popular demand :)\n      Note: TSTIN20 fails because it tries to save patterns Unix style.\n      Changing the file names from testsevedn to test.savedn\n   corrects it.\n      This facility is also tested in TSTINE2/TSTOTE2.\n\n15. Excerpts from previous versions comments\n--------------------------------------------\n1. Posix compatibility is now available, but the routine names are NOT\n   the standard Posix routine name to prevent any conflict.\n2. The COBOL library contains a COBOL module, REGEX1 that demonstrate\n   how to use the standard IBM supplied Posix routines.  This module\n   was adapted to COBOL by Mr. Frank Swarbrick and is published here\n   with his permission.  To compile this program use COMPREGX in\n   JCLLIB.\n3. The C compiler options are supplied in the JCL via OPTFILE file.\n   This allows of controlling user supplied compile time options by\n   using something like DEF(SOME_DEFINITION) akin to -D in Unix.  Using\n   this option reduced significantly the need to perform source code\n   changes which might be tricky even if performed by an automated\n   process.\n4. This version does not (yet) know how to take a pattern (wildcard)\n   for filename or membername.\n5. While a few people have expressed interest in the PL/I interface and\n   some tried to give me useful advice, I've found that with my limited\n   time and resources, I cannot do it.  Hence, PL/I support is\n   officially dropped and will not be renewed unless there would be a\n   volunteer who is both capable in working with PL/I and its\n   interfaces, and is ready to devote time for this project.\n6. REXX seemed to me to be a perfect fit for PCRE.  It is analogous to\n   Perl in the native z/OS ecosystem and is doing similar (though much\n   more primitive) pattern matching.  However, the REXX interface is\n   extremely involved and working with it requires expertise that I do\n   not posses and do not have the time to acquire, and that despite of\n   useful advice from some people.  Hence, no REXX support is planned\n   unless there would be a volunteer who is both capable in working\n   with REXX and its interfaces, and is ready to devote time for this\n   project.\n7. A message to users who choose to download from CBTTAPE:\n   You do not need the full installation package (which is in ASCII) if\n   your installation is using IBM-037.\n   Filexxx is a full version of the PCRE2 port, all in EBCDIC and\n   PDS/E, intended to save the end user the hassle of uploading ASCII\n   files while converting to EBCDIC and the hassle of creating the\n   appropriate libraries.  Once you upload FILExxx.XMI (in binary\n   mode),    perform the necessary 'RECEIVE' of the installation\n   library and then    the RECEIVE for the various libraries, you have\n   the full source code    and even the LOADLIB (if you use IBM-037).\n   If you want the ASCII version for whatever reason, you may download\n   it from www.zaconsultants.net.\n------------\n16. Why separate POSIX routine names:\n-------------------------------------\nThe build (compile and link or bind) on the mainframe is much more\nprimitive then what you have on either Unix/Linux or Windows.  I\ncreated my own process that compiles the modules twice, first time\ndeliberately with no dependency resolution.  Then I take the compile\noutput (SYSOUT:) and analyze it to create dependency resolutions\nbased on 'missing' and 'found' names, before I compile to\ncompletion.\n\nThis works fine, but I forgot that the POSIX routine names are standard\nand thus available at the lowest level of  dependency resolution,\nunless I integrate the PCRE library in the system available libraries\nahead of the standard run-time libraries, which I forgot to do (even\nthough I put a glaring warning in my own documentation months ago!)\n\nJudging from my own error, I assume that others would do it as well.\nI decided to add the Posix routine names to those names that I change\nanyway (upper case. 8 characters only, no underscore.)  I thus\nseparated the standard Posix routine from PCRE Posix routines names.\nFor the people and culture around z/OS, this is probably the best\nsolution.  This required basically changing few parameters in my data\n(and very minor adjustment in a couple of scripts) and wasn't that\nhard.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PRIVTEST": {"ttr": 261, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\'\\x01 \"?\\x01 \"?\\x077\\x00\\x15\\x00@\\x00\\x00\\xe9\\xc1\\xe3\\xd3\\xc1\\xe2\\xf1@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2020-08-10T00:00:00", "modifydate": "2020-08-10T07:37:27", "lines": 21, "newlines": 64, "modlines": 0, "user": "ZATLAS1"}, "text": "//ZATLAS1T JOB (12345678),ZATLAS1,MSGCLASS=H,\n//        MSGLEVEL=(1,1),CLASS=A,NOTIFY=&SYSUID\n//***************************************************************\n//***************JCL CREATED BY ZEEV ATLAS  *********************\n//***************************************************************\n//PTEST PROC TEST='-C'\n//TEST8 EXEC PGM=PCR2TEST,\n// PARM=&TEST\n//STEPLIB DD DSN=ZATLAS1.PCRE2.LOADLIB,DISP=SHR\n//SYSPRINT DD SYSOUT=*\n//STDOUT   DD SYSOUT=*   ,LRECL=31000,RECFM=VB,BLKSIZE=31004\n//SYSOUT   DD SYSOUT=*\n//STDERR   DD SYSOUT=*\n//SYSTERM  DD SYSOUT=*\n//SYSERR   DD SYSOUT=*\n//MSGFILE  DD SYSOUT=*\n//SYSPRINT DD SYSOUT=*\n//SYSIN  DD DUMMY        ZATLAS1.TEST.INPUT1\n// PEND\n// EXEC PTEST,\n// TEST='''PCRE2.TESTLIB(TEMPIN) PCRE2.TESTLIB(TEMPOT)'''\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PRIVTES1": {"ttr": 267, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00A\\x01 \"?\\x01 \"?\\x19)\\x00\\x0b\\x00\\x13\\x00\\x00\\xe9\\xc1\\xe3\\xd3\\xc1\\xe2\\xf1@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2020-08-10T00:00:00", "modifydate": "2020-08-10T19:29:41", "lines": 11, "newlines": 19, "modlines": 0, "user": "ZATLAS1"}, "text": "//ZATLAS1C JOB (12345678),ZATLAS1,MSGCLASS=H,\n//        MSGLEVEL=(1,1),CLASS=A,NOTIFY=&SYSUID\n//***************************************************************\n//***************JCL CREATED BY ZEEV ATLAS  *********************\n//***************************************************************\n//STEP1 EXEC PGM=PCOBDEM2,PARM='-g'\n//STEPLIB DD DSN=ZATLAS1.PCRE2.LOADLIB,DISP=SHR\n//SYSPRINT DD SYSOUT=*\n//SYSIN  DD  *\n(?:QUICK|JUMP)\nTHE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "REXXAPI": {"ttr": 215, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00$\\x01 \\x04/\\x01 \\x13\\x8f I\\x021\\x02.\\x00\\x00\\xe9\\xc1\\xe3\\xd3\\xc1\\xe2\\xf1@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2020-02-11T00:00:00", "modifydate": "2020-05-17T20:49:24", "lines": 561, "newlines": 558, "modlines": 0, "user": "ZATLAS1"}, "text": "______________________________________________________________________\n\n RXPCRE2 - interface between the Rexx language on z/OS and the\n PCRE2 - regex processing library on same platform.\n REXPCRE - same inerface for non-repeatative calls.\n\n Version 0.3\n Contributed by:   John Gateley  November 2017.\n Copyright (c) 2017, 2020 John Gateley.\n All rights reserved.\n______________________________________________________________________\n\n Redistribution and use in source and binary forms, with or\n without modification, are permitted provided that the following\n conditions are met:\n\n  1. Redistributions of source code must retain the above\n  copyright notice, this list of conditions and the following\n  disclaimer.\n\n  2. Redistributions in binary form must reproduce the above\n  copyright notice, this list of conditions and the following\n  disclaimer in the documentation and/or other materials\n  provided with the distribution.\n\n  3. Neither the name of the University of Cambridge nor the\n  names of its contributors may be used to endorse or promote\n  products derived from this software without specific prior\n  written permission.\n\n THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND\n CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR\n OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n______________________________________________________________________\n\n This interface was written by John Gateley in September 2017 and is\n designed to be used with the  z/OS port of 'PCRE2 - Perl Compatible\n Regular Expressions' which was  ported by Ze'ev Atlas.\n\n To assemble these programs you will need the supplied macros and will\n also need to assemble modules STRINGIT which is used in STRING macro\n and TRIMIT which is used by the TRIM macro.  Please refer to the\n JCLLIB that comes with the PCRE2 package for the appropriate JCL.\n______________________________________________________________________\n\nThis code uses the following functions for the C environment\n\n  EDCXHOTL    create C environment with library functions\n  EDCXHOTU    call a C routine\n  EDCXHOTT    terminate C environment\n\nThis method was chosen because the only example that I could find of\nREXX calling C via assembler used this.\nCEEPIPI may also work, and is recommended by IBM.  We may look at it\nin subsequent releases.\n\nSee:-\nArticle \"Calling C functions from Assembler - revisited\"\nby A Rudd printed in issue 208 of Xephon magazine of January 2004\nhttp://www.cbttape.org/xephon/xephonm/mvs0401.pdf\n*______________________________________________________________________\n*\nIt was thought that there were two distinct scenarios that the\nuse of PCRE from REXX would follow.\n\n1, Parsing a value such as an argument to the REXX program or a\n   single record in a control file.\n2, Performing a regular expression on every record from a file.\n\nTo easily enable these two scenarios two versions of the interface\nbetween REXX and PCRE were developed.\n\nSee #REXPCRE below for details of REXXPCRE.  For code example, see the\n    #REXPCRE document in the PCRE2.ASM library in the distribution.\nSee #RXPCRE2 below for details of RXPCRE2.  For code example, see the\n    #REXPCR2 document in the PCRE2.ASM library in the distribution.\n\nThe two main REXX functions are\n\nREXXPCRE   -  the rexx function for single execution of the REGEX\n              this combines connect, compile, match, release and\n              disconnect in a single call. It does not do substitute\n              processing.\n              returns 0 - no matches\n                      1 - matches\n                      an error message\n\n\nRXPCRE2    -  the rexx function for multiple executes of the REGEX\n              this is the program which should be called from a\n              rexx program to handle perl compatible regular\n              expressions.\n              It gets the rexx arguments and passes them to RXPCRE2A\n              which is a separate load module which also contains\n              the C code.\n              On first call it loads RXPCRE2A into memory and returns\n              the load address to the calling rexx function so that\n              subsequent calls to this module can use the same\n              version that was previously loaded.\n              Returns from this function depend on the command given\n              Any error messages from the program are written using\n              a call to IRXSAY which is the 'SAY' callable function.\n\n    'CONNECT'    connect to the C environment\n                 returns eight bytes of environment information\n                 or RC=8\n    'COMPILE'    compile a regular expression\n                 returns 19 bytes of compile information\n                 or RC=8\n    'MATCH', 'EXEC'\n    'EXECUTE'    run the regex using the input string, output\n                 will go to the specified stem variable\n                 returns 0 - no matches\n                         1 - matches\n                         8 - error\n    'SUBSTITUTE', 'SUBS'\n                 run the regex and substitute matches with\n                 replacement that could be a string or pattern.\n                 The variable name is used to contain\n                 the output string\n                 returns 0 - no match - rexx variable not set\n                         1 - matched  - rexx variable contains output\n                             string\n                         8 - an error message will be writen using\n                             IRXSAY\n    'RELEASE'    remove the specified regex compilation\n                 returns 0 - OK\n                         8 - error\n    'DISCONNECT' terminate the C environment\n                 returns 0 - OK\n                         8 - error\n\nThere are an additional four programs that are used by the above\n\nRXPCRE2A   -  the sub-routine used by RXPCRE2 which contains the\n              calls to all the C code and should only be called by\n              RXPCRE2 as it uses the rexx environment that exists\n              in that module.\n\nPROCSTEM   -  a sub-routine that manipulates rexx stem variables on\n              behalf of the calling program.\n              Macro PRGSTEM should be used in the calling program\n              to define the interface storage.\n              This also makes use of the rexx environment.\n\nSTRINGIT   -  used by the STRING macro - acts like COBOL STRING.\n\nTRIMIT     -  used by the TRIM macro to remove excess spaces.\n\nA new optional supporting function was added to produce option words.\n\nRXPCRE2O   - used to create option integers for the processing in\n             RXPCRE2.\n______________________________________________________________________\n#REXPCRE\n\n How REXXPCRE works.\n\n   INPUT ARGUMENTS\n     1, the PERL regular expression.\n     2, the string to be worked on.\n     3, a STEM name which will be populated with the output\n     4, an optional OPTION\n                    'g'  -  match all\n                    'i'  -  ignore case\n                    'x'  -  exclude white space\n     5, an optional code-page - e.g.  'IBM-285'\n        if omitted the default local page is used\n     6, 'debug' if debugging required. Needs PCREDUMP DD name.\n\n   OUTPUT\n        if   successfull\n             RC=1    matched  - stem contains output\n             RC=0    no match - stem.0 will be '0'\n        else\n             RC='error message text'\n        endif\n\n   STEM variables output\n        stem.0             count of stem variables\n        stem.STRING.?      matched substrings\n        stem.POS.?         position and length of matches e.g. 3,4\n        stem.NAME.?        named substrings ' ' if none\n\n   DEBUGGING can be done by specifying 'debug' as argument 6.\n             You will also need to allocate the DD name PCREDUMP\n             with DISP=MOD if more than one call to REXXPCRE\n             because each call is a separate unit of work which\n             includes opening and closing the dataset.\n\nA brief discussion about code pages:\nVarious EBCDIC code pages place the dollar symbol in different code\npoints. In IBM-037 the dollar is x'5B' but in IBM-285 (UK) this is\nthe currency symbol for GBP and the dollar is at x'4A' which is the\ncent symbol in IBM-037. Confusing!\nInternally PCRE2 uses IBM-1047 so to use the dollar symbol in the\nregex we pass a fifth argument which is the code page name we are\nactually using.  This causes PCRE to convert the regex internally\nfrom IBM-285 to IBM-1047 before it is compiled, similarly the string\nis converted before the match is done.\n\nNOTE - this argument is only required if you use a code page in your\nterminal emulator which is NOT the same as the default local code page.\nNormal processing by PCRE is to convert the REGEX and string from the\ndefault local code page to IBM-1047.  IBM-1047 is used by the mainframe\nC compiler.\n*______________________________________________________________________\n*\n#RXPCRE2\n  How RXPCRE2 works.\n\n  This program RXPCRE2 is a rexx function and RXPCRE2A is a helper.\n  On the 'connect' call RXPCRE2A is loaded into memory and the\n  address of the program is returned, this enables the program to\n  be found on subsequent calls.\n  The 'disconnect' function terminates the C environment and deletes\n  RXPCRE2A from memory.\n\n\n There are 6 calls to the function\n\n\n  1, CONNECT\n     Establish the C environment with or without debug.\n     If OK returns an eight byte environment handle which should\n     be used in subsequent calls to the function.\n     An optional third parameter is the code page that is being used,\n     this defaults to a z/OS environment variable but can be set\n     byt the user.\n     If DEBUG is specified then the DDNAME PCREDUMP must be allocated\n     with DISP=MOD as the dataset will be opened and closed on\n     every call.\n\n     Returns 0 if OK\n             8 if failed - an error message will be writen using IRXSAY\n\n       r_c     = RXPCRE2('connect','pcre_env')\n       r_c     = RXPCRE2('connect','pcre_env',,'debug')\n       r_c     = RXPCRE2('connect','pcre_env','IBM-285')\n       r_c     = RXPCRE2('connect','pcre_env','IBM-285','debug')\n\n       if  r_c  > 0 then exit\n\n\n  2, COMPILE (alias COMP)\n     Compile a PCRE regular expression.\n     This returns an nineteen byte compile handle which should\n     be used in subsequent calls to the function.\n    Note that the reg_ex must be null terminated.\n     Options can be specified\n                  'g'  repeat search\n                  'i'  ignore case\n                  'x'  exclude white space\n     Note that multiple regular expressions can be compiled and\n     then executed in turn.\n\n     Returns 0 if OK\n             8 if failed - an error message will be writen using IRXSAY\n\n      reg_ex  = \"(?<char>A)\\g<char>\"||'00'x\n\n       r_c     = RXPCRE2('compile',pcre_env,reg_ex,'pcre_comp','g',,\n                 op_wrdc)\n\n       if  r_c  > 0 then exit\n\n\n  3, EXECUTE or MATCH (alias EXEC)\n     Process the compiled expression, repeat this call as required.\n     The STEM name is used as the first part of the output\n     'WANG' will give  WANG.0         the count of matches\n                       WANG_STRING.?  the sub-strings\n                       WANG_POS.?     the positions within the string\n                       WANG_NAME.?    named sub-strings (blank if none)\n\n     returns  0     no match - stem.string.0 will be '0'\n              1     matched  - stem.string.? contains output\n              8     an error message will be writen using IRXSAY\n\n       the_str   = \"AN_AARDWARK_JAKE_AND_AARDWARK_JACK\"\n       my_stem   = \"WANG\"\n\n       r_c = RXPCRE2('execute',pcre_env,pcre_comp,the_str,my_stem,,\n                 op_wrd1)\n\n     This call can be repeated as many times as required.\n\n\n  4, SUBSTITUTE - alias SUBS\n     This is similar to EXECUTE but uses the routine SUBSTIT2\n     instead of MATCH2 and requires an additional input containing\n     the substitute string.\n     The variable name is used to contain the output string\n\n     returns  0     no match - rexx variable not set\n              1     matched  - rexx variable contains output string\n              8     an error message will be writen using IRXSAY\n\n       reg_ex      \"cat|dog\"\n       the_str     \"the dog sat on the cat's dog\"\n       subs_str    \"horse\"\n       my_var    = \"WANG\"\n\n       r_c = RXPCRE2('substitute',pcre_env,pcre_comp,the_str,,\n                     my_var,subs_str,op_wrd1)\n\n     This call can be repeated as many times as required.\n\n\n  5, RELEASE\n     Release the compile storage\n     Returns 0 if successfull.\n             8 if failed - an error message will be writen using IRXSAY\n\n       re_lease  = RXPCRE2('release',pcre_env,pcre_comp)\n\n\n  6, DISCONNECT\n     Terminate the C environment.\n     Returns 0 if successfull.\n             8 if failed - an error message will be writen using IRXSAY\n\n       r_c     = RXPCRE2('disconnect',pcre_env)\n\n\n  NOTE if any call fails then all storage and compile handles will\n       be released and the C environment will be terminated.\n       Do not attempt to continue after this.\n*______________________________________________________________________\n*\n  This program acts as a REXX function and is designed to be used\n  with the z/OS port of 'PCRE2 - Perl Compatible Regular Expressions'\n  which was created by Ze'ev Atlas.\n\n  This program was written by John Gateley in January 2020.\n\n  To assemble these programs you will need to supplied macros and will\n  also need to assemble modules STRINGIT which is used in STRING macro\n  and TRIMIT which is used by the TRIM macro.\n*______________________________________________________________________\n*\n How it works.\n\n This program RXPCRE2O is a rexx function and is used to create\n option integers for the processing in RXPCRE2.\n\n\n There is one call to the function\n\n      r_c     = RXPCRE2O('OP_T','VAR_NAM')\n\n    OP_T      the name of a stem variable which contains the options\n              to be used.\n    VAR_NAME  the name of a rexx variable which will contain the\n              resulting option bit values.\n              This will be 8 bytes of hexadecimal display\n\n    op_t.1 = 'PCRE2_DOLLAR_ENDONLY'\n    op_t.2 = 'PCRE2_DOTALL'\n    op_t.3 = 'PCRE2_DUPNAMES'\n    op_t.0 = '3'\n\n    Returns 0 if OK\n            8 if failed - an error message will be writen using IRXSAY\n______________________________________________________________________\n     STEM variables output\n          stem.0             count of stem variables\n          stem_STRING.?      matched substrings\n          stem_POS.?         position and length of matches e.g. 3,4\n          stem_NAME.?        named substrings ' ' if none\n\n     these stem values will contain the same as stem.0\n          stem_STRING.0\n          stem_POS.0\n          stem_NAME.0\n*______________________________________________________________________\n*\n          PCRELIB\n\n   When running in batch the LOAD macro will try to find the requested\n   module/program object in the STEPLIB or JOBLIB concatenation\n   which will contain the PDSE library containing RXPCRE2A. This works.\n\n   In ISPF the library would be concatenated to ISPLLIB which will\n   allow RXPCRE2 to be loaded, however, when this tries to load\n   RXPCRE2A the STEPLIB would be used and would fail.\n   It should be possible to put the program library in the ISPLLIB\n   concatenation and amend all references to PCRELIB to ISPLLIB\n   but this will not work when ISPLLIB is modified using LIBDEF as\n   the library is not added to the actual ISPLLIB but to another\n   DDNAME which is logically concatenated by ISPF.\n\n   For the above reasons PCRELIB is used. If it is not present in the\n   task IO table the program will not attempt to use it.\n\n       /* allow RXPCRE2 to be loaded by REXX */\n       \"ISPEXEC LIBDEF ISPLLIB DATASET ID ('SDJRG.LOADLIB.POBJ')\"\n       if rc /= 0 then do\n          say 'allocation to ispllib failed.'\n          exit\n       end\n       /* allow RXPCRE2A to be loaded by RXPCRE2A */\n       \"ALLOC FI(PCRELIB)  DA('?????.LOADLIB.POBJ') SHR\"\n       if rc /= 0 then do\n          say 'allocation to PCRELIB failed.'\n          exit\n       end\n\n       ...\n\n       \"FREE FILE(PCRELIB)\"\n       \"ISPEXEC LIBDEF ISPLLIB \"\n_____________________________________________________________________\n List of available error messages:\n (We will come with detailed explanations in subsequent releases)\n\nRXPCRE2-001 - Error in set environment handle RC=\nRXPCRE2-002 - Error in set compile handle RC=\nRXPCRE2-003 - Could not find RXPCRE2A in PRCELIB\nRXPCRE2-004 - Could not open PCRELIB\nRXPCRE2-005 - Could not find RXPCRE2A\nRXPCRE2-006 - Return code on SAY=\nRXPCRE2-007 - invalid command specified\nRXPCRE2-008 - command not specified\nRXPCRE2-009 - command length was 0\nRXPCRE2-010 - command greater than 20 bytes\nRXPCRE2-011 - environment not specified as argument 2\nRXPCRE2-012 - environment length was not 8 bytes\nRXPCRE2-013 connect - debug command not 'debug'\nRXPCRE2-014 compile - regex not specified\nRXPCRE2-015 compile - regex length was 0\nRXPCRE2-016 compile - regex not null terminated\nRXPCRE2-017 compile - options > 20 bytes\nRXPCRE2-018 compile - options were null terminated\nRXPCRE2-019 compile - options not recognised\nRXPCRE2-020 execute - argument compile result not passed\nRXPCRE2-021 execute - argument compile result invalid\nRXPCRE2-022 execute - string to test is missing\nRXPCRE2-023 execute - string to test has zero length\nRXPCRE2-024 execute - stem name not available\nRXPCRE2-025 execute - stem name has 0 length\nRXPCRE2-026 execute - stem name > 20 bytes\nRXPCRE2-027 release - compile result not passed\nRXPCRE2-028 release - compile result invalid length\nRXPCRE2-029 connect - env handle not specified\nRXPCRE2-030 connect - env handle length was 0\nRXPCRE2-031 connect - env handle > 20 bytes\nRXPCRE2-032 connect - env handle was DEBUG\nRXPCRE2-033 connect - comp handle not specified\nRXPCRE2-034 connect - comp handle length was 0\nRXPCRE2-035 connect - comp handle > 20 bytes\nRXPCRE2-036 connect - comp handle was DEBUG\nRXPCRE2-037 subst - argument compile result not passed\nRXPCRE2-038 subst - argument compile result invalid\nRXPCRE2-039 subst - string to test is missing\nRXPCRE2-040 subst - string to test has zero length\nRXPCRE2-041 subst - variable name not available\nRXPCRE2-042 subst - variable name has 0 length\nRXPCRE2-043 subst - variable name > 20 bytes\nRXPCRE2-044 subst - subs string not available\nRXPCRE2-045 subst - subs string has 0 length\nRXPCRE2-080 option input is not 8 bytes long\nRXPCRE2-nnn - unknown error, RC=\n\nRXPCRE2A-001 - Return code on SAY=\nRXPCRE2A-002 - debug specified but DD name PCREDUMP not allocated\nRXPCRE2A-003 - Invalid command\nRXPCRE2A-004 - Max compiles exceeded\nRXPCRE2A-011 - Ovector not big enough\nRXPCRE2A-012 - Ovector not big enough\nRXPCRE2A-013 - PCRE2 compilation failed at offset ...\nRXPCRE2A-014 - Code page failure\nRXPCRE2A-015 - init subs failure\nRXPCRE2A-016 - PCRE2 substitute failed ...\nRXPCRE2A-nnn - Unknown error, RC=\n\nREXXPCRE-001 - REGEX (argument 1) not supplied\nREXXPCRE-002 - REGEX (argument 1) was zero length\nREXXPCRE-003 - STRING (argument 2) not supplied\nREXXPCRE-004 - STRING (argument 2) was zero length\nREXXPCRE-005 - STEM NAME (argument 3) not supplied\nREXXPCRE-006 - STEM NAME (argument 3) was zero length\nREXXPCRE-007 - STEM NAME (argument 3) > 20 bytes\nREXXPCRE-008 - OPTIONS (argument 4) > 20 bytes\nREXXPCRE-009 - OPTIONS (argument 4) not recognised\nREXXPCRE-010 - DEBUG (argument 6) <> 5 bytes\nREXXPCRE-011 - Output value longer than 2048\nREXXPCRE-012 - Return code on SAY=\nREXXPCRE-013 - Matching error\nREXXPCRE-014 - PCRE2 compilation failed at offset\nREXXPCRE-015 - Code page failure (argument 5)\nREXXPCRE-016 - Debug specified but DD name PCREDUMP not allocated\nREXXPCRE-017 - Ovector not big enough\n\nRXPCRE2O-001 - stem name not specified\nRXPCRE2O-002 - stem name length was 0\nRXPCRE2O-003 - stem name greater than 20 bytes\nRXPCRE2O-004 - variable name not specified\nRXPCRE2O-005 - variable name length was 0\nRXPCRE2O-006 - variable name greater than 20 bytes\nRXPCRE2O-007 - Return code on SAY=\nRXPCRE2O-008 - option not valid -\nRXPCRE2O-009 - option not valid on z/OS -\nRXPCRE2O-010 - do not mix compile options with run time\nRXPCRE2O-nnn - unknown error, RC=\n______________________________________________________________________\nAvailable options in z/OS\n\nPCRE2_ANCHORED                       CMD  Z\nPCRE2_NO_UTF_CHECK                   CMD  Z\nPCRE2_ENDANCHORED                    CMD  Z\nPCRE2_ALLOW_EMPTY_CLASS              C    Z\nPCRE2_ALT_BSUX                       C    Z\nPCRE2_AUTO_CALLOUT                   C    Z\nPCRE2_CASELESS                       C    Z\nPCRE2_DOLLAR_ENDONLY                 C    Z\nPCRE2_DOTALL                         C    Z\nPCRE2_DUPNAMES                       C    Z\nPCRE2_EXTENDED                       C    Z\nPCRE2_FIRSTLINE                      C    Z\nPCRE2_MATCH_UNSET_BACKREF            C    Z\nPCRE2_MULTILINE                      C    Z\nPCRE2_NEVER_UCP                      C    Z\nPCRE2_NEVER_UTF                      C    Z\nPCRE2_NO_AUTO_CAPTURE                C    Z\nPCRE2_NO_AUTO_POSSESS                C    Z\nPCRE2_NO_DOTSTAR_ANCHOR              C    Z\nPCRE2_NO_START_OPTIMIZE              C    Z\nPCRE2_UNGREEDY                       C    Z\nPCRE2_NEVER_BACKSLASH_C              C    Z\nPCRE2_ALT_CIRCUMFLEX                 C    Z\nPCRE2_ALT_VERBNAMES                  C    Z\nPCRE2_USE_OFFSET_LIMIT               C    Z\nPCRE2_EXTENDED_MORE                  C    Z\nPCRE2_LITERAL                        C    Z\nPCRE2_NOTBOL                          MDS Z\nPCRE2_NOTEOL                          MDS Z\nPCRE2_NOTEMPTY                        MDS Z\nPCRE2_NOTEMPTY_ATSTART                MDS Z\nPCRE2_PARTIAL_SOFT                    MDS Z\nPCRE2_PARTIAL_HARD                    MDS Z\nPCRE2_SUBSTITUTE_GLOBAL                 S Z\nPCRE2_SUBSTITUTE_EXTENDED               S Z\nPCRE2_SUBSTITUTE_UNSET_EMPTY            S Z\nPCRE2_SUBSTITUTE_UNKNOWN_UNSET          S Z\nPCRE2_SUBSTITUTE_OVERFLOW_LENGTH        S Z\nPCRE2_NO_JIT                          M S Z\nPCRE2_COPY_MATCHED_SUBJECT            MDS Z\nPCRE2_SUBSTITUTE_LITERALARSTAR          S Z\nPCRE2_SUBSTITUTE_MATCHEDARSTAR          S Z\nPCRE2_SUBSTITUTE_REPLACEMENT_ONLY       S Z\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "REXXPCRN": {"ttr": 163, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x11\\x00\\x16\\x01\\x17\\x02\\x9f\\x01\\x195_\"!\\x008\\x00,\\x00\\x00\\xe9\\xc1\\xe3\\xd3\\xc1\\xe2\\xf1@@@'", "ispf": {"version": "01.17", "flags": 0, "createdate": "2017-01-29T00:00:00", "modifydate": "2019-12-21T22:21:16", "lines": 56, "newlines": 44, "modlines": 0, "user": "ZATLAS1"}, "text": "//ZATLAS1C JOB (12345678),ZATLAS1,MSGCLASS=H,REGION=0M,\n//        MSGLEVEL=(1,1),CLASS=A,NOTIFY=&SYSUID\n//*******************************************************\n//DELETE  EXEC PGM=IDCAMS\n//SYSPRINT DD  DUMMY\n//SYSIN    DD  *\n DELETE  (ZATLAS1.REXX.OUTPUTO)\n DELETE  (ZATLAS1.REXX.OUTPUT1)\n DELETE  (ZATLAS1.REXX.OUTPUT2)\n DELETE  (ZATLAS1.REXX.OUTPUT3)\n SET MAXCC = 0\n//*******************************************************\n//CREATE  EXEC PGM=IEFBR14\n//DCBOUTO  DD  DSN=ZATLAS1.REXX.OUTPUTO,\n//             DISP=(NEW,CATLG,DELETE),\n//             DCB=(DSORG=PS,RECFM=FB,LRECL=80),\n//             UNIT=SYSDA,SPACE=(TRK,(5,5))\n//DCBOUT1  DD  DSN=ZATLAS1.REXX.OUTPUT1,\n//             DISP=(NEW,CATLG,DELETE),\n//             DCB=(DSORG=PS,RECFM=FB,LRECL=80),\n//             UNIT=SYSDA,SPACE=(TRK,(5,5))\n//DCBOUT2  DD  DSN=ZATLAS1.REXX.OUTPUT2,\n//             DISP=(NEW,CATLG,DELETE),\n//             DCB=(DSORG=PS,RECFM=FB,LRECL=80),\n//             UNIT=SYSDA,SPACE=(TRK,(5,5))\n//DCBOUT3  DD  DSN=ZATLAS1.REXX.OUTPUT3,\n//             DISP=(NEW,CATLG,DELETE),\n//             DCB=(DSORG=PS,RECFM=FB,LRECL=80),\n//             UNIT=SYSDA,SPACE=(TRK,(5,5))\n//*******************************************************\n//RUNIT1O EXEC PGM=IRXJCL,PARM='RXPCRE2B',COND=(0,NE)\n//STEPLIB  DD  DISP=SHR,DSN=ZATLAS1.PCRE2.LOADLIB\n//SYSEXEC  DD  DISP=SHR,DSN=ZATLAS1.PCRE2.CNTLLIB\n//SYSIN    DD  *\n//SYSPRINT DD  SYSOUT=*\n//SYSTSPRT DD  SYSOUT=*\n//PCREDUMP DD  DISP=MOD,DSN=ZATLAS1.REXX.OUTPUTO\n//*******************************************************\n//RUNIT2  EXEC PGM=IRXJCL,PARM='RXPCREMB',COND=(0,NE)\n//STEPLIB  DD  DISP=SHR,DSN=ZATLAS1.PCRE2.LOADLIB\n//         DD  DISP=SHR,DSN=ZATLAS1.PCRE2.LOADLIB\n//SYSEXEC  DD  DISP=SHR,DSN=ZATLAS1.PCRE2.CNTLLIB\n//SYSIN    DD  *\n//SYSPRINT DD  SYSOUT=*\n//SYSTSPRT DD  SYSOUT=*\n//PCREDUMP DD  DISP=MOD,DSN=ZATLAS1.REXX.OUTPUT2\n//*******************************************************\n//*******************************************************\n//RUNIT3  EXEC PGM=IRXJCL,PARM='RXPCSUB',COND=(0,NE)\n//STEPLIB  DD  DISP=SHR,DSN=ZATLAS1.PCRE2.LOADLIB\n//         DD  DISP=SHR,DSN=ZATLAS1.PCRE2.LOADLIB\n//SYSEXEC  DD  DISP=SHR,DSN=ZATLAS1.PCRE2.CNTLLIB\n//SYSIN    DD  *\n//SYSPRINT DD  SYSOUT=*\n//SYSTSPRT DD  SYSOUT=*\n//PCREDUMP DD  DISP=MOD,DSN=ZATLAS1.REXX.OUTPUT3\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RXPCRE2": {"ttr": 251, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x17\\x000\\x01\\x195?\\x01 \"/\\x142\\x00p\\x00x\\x00\\x00\\xe9\\xc1\\xe3\\xd3\\xc1\\xe2\\xf1@@@'", "ispf": {"version": "01.23", "flags": 0, "createdate": "2019-12-19T00:00:00", "modifydate": "2020-08-09T14:32:30", "lines": 112, "newlines": 120, "modlines": 0, "user": "ZATLAS1"}, "text": "//ZATLAS1S JOB (12345678),ZATLAS1,MSGCLASS=H,\n//        MSGLEVEL=(1,1),CLASS=A,NOTIFY=&SYSUID\n//*******************************************************\n//OBJ      EXEC PGM=IEFBR14\n//DDOBJ    DD  DISP=(NEW,PASS),DSN=&&OBJLIB,SPACE=(TRK,(5,5,10)),\n//         UNIT=3390,VOL=SER=VPWRKC,\n//         DCB=(LRECL=80,RECFM=FB,DSORG=PO,BLKSIZE=0)\n//*******************************************************\n//ASM01  EXEC PGM=ASMA90,PARM='MACHINE(ZS-4)'\n//SYSLIB  DD  DISP=SHR,DSN=ZATLAS1.C14.MACLIB\n//        DD  DISP=SHR,DSN=SYS1.MACLIB\n//        DD  DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN   DD  DISP=SHR,DSN=ZATLAS1.C14.MACLIB(STRINGIT)  <== NOTE LIB\n//SYSLIN  DD  DSN=&&OBJLIB(STRINGIT),DISP=(OLD,PASS)\n//SYSPRINT DD SYSOUT=*\n//*******************************************************\n//ASM02 EXEC PGM=ASMA90,PARM='MACHINE(ZS-4)'\n//SYSLIB DD  DISP=SHR,DSN=ZATLAS1.C14.MACLIB\n//       DD  DISP=SHR,DSN=SYS1.MACLIB\n//       DD  DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN  DD  DISP=SHR,DSN=ZATLAS1.C14.MACLIB(TRIMIT)  <== NOTE LIB\n//SYSLIN DD  DSN=&&OBJLIB(TRIMIT),DISP=(OLD,PASS)\n//SYSPRINT DD SYSOUT=*\n//*******************************************************\n//ASM1    EXEC PGM=ASMA90,PARM='MACHINE(ZS-4)'\n//SYSLIB   DD  DISP=SHR,DSN=ZATLAS1.C14.MACLIB\n//         DD  DISP=SHR,DSN=SYS1.MACLIB\n//         DD  DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD  DISP=SHR,DSN=ZATLAS1.PCRE2.ASM(RXPCRE2)\n//SYSLIN   DD  DSN=&&OBJLIB(RXPCRE2),DISP=(OLD,PASS)\n//SYSPRINT DD  SYSOUT=*\n//*******************************************************\n//ASM2    EXEC PGM=ASMA90,PARM='MACHINE(ZS-4)'\n//SYSLIB   DD  DISP=SHR,DSN=ZATLAS1.C14.MACLIB\n//         DD  DISP=SHR,DSN=SYS1.MACLIB\n//         DD  DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD  DISP=SHR,DSN=ZATLAS1.PCRE2.ASM(RXPCRE2A)\n//SYSLIN   DD  DSN=&&OBJLIB(RXPCRE2A),DISP=(OLD,PASS)\n//SYSPRINT DD  SYSOUT=*\n//*******************************************************\n//ASM4    EXEC PGM=ASMA90,PARM='MACHINE(ZS-4)'\n//SYSLIB   DD  DISP=SHR,DSN=ZATLAS1.C14.MACLIB\n//         DD  DISP=SHR,DSN=SYS1.MACLIB\n//         DD  DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD  DISP=SHR,DSN=ZATLAS1.PCRE2.ASM(PROCSTEM)\n//SYSLIN   DD  DSN=&&OBJLIB(PROCSTEM),DISP=(OLD,PASS)\n//SYSPRINT DD  SYSOUT=*\n//*******************************************************\n//LINK1   EXEC PGM=HEWL,PARM='CALL,LIST,MAP,XREF,LET',COND=(0,NE)\n//SYSLIB   DD  DISP=(OLD,PASS),DSN=&&OBJLIB\n//SYSLIN   DD  *\n    INCLUDE SYSLIB(RXPCRE2)\n    ENTRY   RXPCRE2\n    NAME    RXPCRE2(R)\n//SYSLMOD  DD  DISP=SHR,DSN=ZATLAS1.PCRE2.LOADLIB(RXPCRE2)\n//SYSPRINT DD  SYSOUT=*\n//*******************************************************\n//LINK3   EXEC PGM=HEWL,PARM='CALL,LIST,MAP,XREF,LET',COND=(0,NE)\n//SYSLIB   DD  DISP=(OLD,PASS),DSN=&&OBJLIB\n//         DD  DISP=SHR,DSN=ZATLAS1.PCRE2.LOADLIB\n//         DD  DISP=SHR,DSN=CEE.SCEELKED\n//         DD  DISP=SHR,DSN=CEE.SCEESPC\n//SYSLIN   DD  *\n    INCLUDE SYSLIB(RXPCRE2A)\n    INCLUDE SYSLIB(PCOBAPI2)\n    INCLUDE SYSLIB(PCRZFUNC)\n    ENTRY   RXPCRE2A\n    NAME    RXPCRE2A(R)\n//SYSLMOD  DD  DISP=SHR,DSN=ZATLAS1.PCRE2.LOADLIB(RXPCRE2A)\n//SYSPRINT DD  SYSOUT=*\n//*******************************************************\n//ASM     EXEC PGM=ASMA90,PARM='MACHINE(ZS-4)'\n//SYSLIB   DD  DISP=SHR,DSN=ZATLAS1.C14.MACLIB\n//         DD  DISP=SHR,DSN=ZATLAS1.PCRE2.ASM\n//         DD  DISP=SHR,DSN=SYS1.MACLIB\n//         DD  DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD  DISP=SHR,DSN=ZATLAS1.PCRE2.ASM(RXPCRE2O)\n//SYSLIN   DD  DSN=&&OBJLIB(RXPCRE2O),DISP=(OLD,PASS)\n//SYSPRINT DD  SYSOUT=*\n//*******************************************************\n//LINK    EXEC PGM=HEWL,PARM='CALL,LIST,MAP,XREF,LET',COND=(0,NE)\n//SYSLIB   DD  DISP=(OLD,PASS),DSN=&&OBJLIB\n//SYSLIN   DD  *\n    INCLUDE SYSLIB(RXPCRE2O)\n    ENTRY   RXPCRE2O\n    NAME    RXPCRE2O(R)\n//SYSLMOD  DD  DISP=SHR,DSN=ZATLAS1.PCRE2.LOADLIB(RXPCRE2O)\n//SYSPRINT DD  SYSOUT=*\n//*******************************************************\n//ASME    EXEC PGM=ASMA90,PARM='MACHINE(ZS-4)'\n//SYSLIB   DD  DISP=SHR,DSN=ZATLAS1.C14.MACLIB\n//         DD  DISP=SHR,DSN=ZATLAS1.PCRE2.ASM\n//         DD  DISP=SHR,DSN=SYS1.MACLIB\n//         DD  DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD  DISP=SHR,DSN=ZATLAS1.PCRE2.ASM(REXXPCRE)\n//SYSLIN   DD  DSN=&&OBJLIB(REXXPCRE),DISP=(OLD,PASS)\n//SYSPRINT DD  SYSOUT=*\n//*******************************************************\n//LINK    EXEC PGM=HEWL,PARM='CALL,LIST,MAP,XREF,LET',COND=(0,NE)\n//SYSLIB   DD  DISP=(OLD,PASS),DSN=&&OBJLIB\n//         DD  DISP=SHR,DSN=ZATLAS1.PCRE2.LOADLIB\n//         DD  DISP=SHR,DSN=CEE.SCEELKED\n//         DD  DISP=SHR,DSN=CEE.SCEESPC\n//SYSLIN   DD  *\n    INCLUDE SYSLIB(PCOBAPI2)\n    INCLUDE SYSLIB(PCRZFUNC)\n    INCLUDE SYSLIB(REXXPCRE)\n    ENTRY   REXXPCRE\n    NAME    REXXPCRE(R)\n//SYSLMOD  DD  DISP=SHR,DSN=ZATLAS1.PCRE2.LOADLIB(RXPCRE2O)\n//SYSPRINT DD  SYSOUT=*\n//*******************************************************\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SPLITLIB": {"ttr": 103, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\r\\x00C\\x01\\x156\\x1f\\x01\\x193\\x8f\"\\x10\\x00\\x1a\\x00\\x16\\x00\\x00\\xe9\\xc1\\xe3\\xd3\\xc1\\xe2\\xf1@@@'", "ispf": {"version": "01.13", "flags": 0, "createdate": "2015-12-27T00:00:00", "modifydate": "2019-12-04T22:10:43", "lines": 26, "newlines": 22, "modlines": 0, "user": "ZATLAS1"}, "text": "//ZATLAS1R JOB (12345678),ZATLAS1,MSGCLASS=H,\n//        MSGLEVEL=(1,1),CLASS=A,NOTIFY=&SYSUID\n//***************************************************************\n//***************JCL CREATED BY ZEEV ATLAS  *********************\n//***************************************************************\n//*\n//* USE EXPTPCH INSTEAD\n// SET PARM1=PCRE2.ASM\n//*SET PARM1=PCRE2.CNTLLIB\n//*SET PARM1=PCRE2.COB\n//*SET PARM1=PCRE2.JCLLIB\n//*SET PARM1=PCRE2.SRCE\n//*SET PARM1=PCRE2.TESTLIB\n// SET EXEHLQ=ZATLAS1\n// SET EXEMLQ=PCRE2\n// SET EXELLQ=CNTLLIB\n//D EXEC PGM=IEFBR14\n//D1 DD DSN=&EXEHLQ..&PARM1..SPLIT,DISP=(MOD,DELETE),SPACE=(1,1)\n//TSOBATCH EXEC PGM=IKJEFT1A,DYNAMNBR=200,\n//  PARM='SPLITLIB &PARM1'\n//SYSEXEC  DD DSN=&EXEHLQ..&EXEMLQ..&EXELLQ,DISP=SHR <== MODIFY\n//SYSPRINT DD SYSOUT=*\n//SYSTSPRT DD SYSOUT=*\n//SYSTSIN  DD DUMMY\n/*\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SUPERC": {"ttr": 229, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x08\\x01 \\x14O\\x01 \\x14O#\\x14\\x00,\\x000\\x00\\x00\\xe9\\xc1\\xe3\\xd3\\xc1\\xe2\\xf1@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2020-05-23T00:00:00", "modifydate": "2020-05-23T23:14:08", "lines": 44, "newlines": 48, "modlines": 0, "user": "ZATLAS1"}, "text": "//ZATLAS1R JOB (12345678),ZATLAS1,MSGCLASS=H,\n//        MSGLEVEL=(1,1),CLASS=A,NOTIFY=&SYSUID\n//***************************************************************\n//***************JCL CREATED BY ZEEV ATLAS  *********************\n//***************************************************************\n//*\n// SET PCREHLQ=ZATLAS1\n// SET PCREMLQ=PCRE2\n// SET PCRETST=TESTLIB\n// SET PREVHLQ=ZATLAS\n// SET PREVMLQ=PCRE1034   <===\n// SET MEMBER=TSTOTE1\n//SUPERC  EXEC PGM=ISRSUPC,REGION=4M,\n//            PARM=(DELTAL,LINECM,IM)\n//NEWDD  DD DISP=SHR,DSN=&PCREHLQ..&PCREMLQ..&PCRETST(&MEMBER)\n//OLDDD  DD DISP=SHR,DSN=&PREVHLQ..&PREVMLQ..&PCRETST(&MEMBER)\n//OUTDD  DD SYSOUT=*\n//SYSOUT DD SYSOUT=*\n//SYSIN  DD  DUMMY\n// SET MEMBER=TSTOTE2\n//SUPERC  EXEC PGM=ISRSUPC,REGION=4M,\n//            PARM=(DELTAL,LINECM,IM)\n//NEWDD  DD DISP=SHR,DSN=&PCREHLQ..&PCREMLQ..&PCRETST(&MEMBER)\n//OLDDD  DD DISP=SHR,DSN=&PREVHLQ..&PREVMLQ..&PCRETST(&MEMBER)\n//OUTDD  DD SYSOUT=*\n//SYSOUT DD SYSOUT=*\n//SYSIN  DD  DUMMY\n// SET MEMBER=TSTOTE11\n//SUPERC  EXEC PGM=ISRSUPC,REGION=4M,\n//            PARM=(DELTAL,LINECM,IM)\n//NEWDD  DD DISP=SHR,DSN=&PCREHLQ..&PCREMLQ..&PCRETST(&MEMBER)\n//OLDDD  DD DISP=SHR,DSN=&PREVHLQ..&PREVMLQ..&PCRETST(&MEMBER)\n//OUTDD  DD SYSOUT=*\n//SYSOUT DD SYSOUT=*\n//SYSIN  DD  DUMMY\n// SET MEMBER=TSTOTE14\n//SUPERC  EXEC PGM=ISRSUPC,REGION=4M,\n//            PARM=(DELTAL,LINECM,IM)\n//NEWDD  DD DISP=SHR,DSN=&PCREHLQ..&PCREMLQ..&PCRETST(&MEMBER)\n//OLDDD  DD DISP=SHR,DSN=&PREVHLQ..&PREVMLQ..&PCRETST(&MEMBER)\n//OUTDD  DD SYSOUT=*\n//SYSOUT DD SYSOUT=*\n//SYSIN  DD  DUMMY\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TESTDEMO": {"ttr": 89, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00A\\x01\\x19\\x13\\x7f\\x01\\x19\\x13\\x7f\\x12\\x02\\x00\\r\\x00\\r\\x00\\x00\\xe9\\xc1\\xe3\\xd3\\xc1\\xe2\\xf1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2019-05-17T00:00:00", "modifydate": "2019-05-17T12:02:41", "lines": 13, "newlines": 13, "modlines": 0, "user": "ZATLAS1"}, "text": "//ZATLAS1C JOB (12345678),ZATLAS1,MSGCLASS=H,\n//        MSGLEVEL=(1,1),CLASS=A,NOTIFY=&SYSUID\n//***************************************************************\n//***************JCL CREATED BY ZEEV ATLAS  *********************\n//***************************************************************\n//STEP1 EXEC PGM=PCR2DEMO,\n//*PARM='-g (?<char>A)\\\\g<char> AN_AARDWARK_JAKE_AND_AARDWARK'\n//*PARM='-g \\l ABCDEFG'\n//*PARM='\\L ABCDEFG'\n// PARM='-g dog|cat thedogsatonthecat'\n//STEPLIB DD DSN=ZATLAS1.PCRE2.LOADLIB,DISP=SHR\n//SYSPRINT DD SYSOUT=*\n//SYSIN  DD  DUMMY\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TESTEBCD": {"ttr": 53, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00I\\x01\\x17\\x12\\x7f\\x01\\x17\\x12\\x7f\\x005\\x00#\\x00#\\x00\\x00\\xe9\\xc1\\xe3\\xd3\\xc1\\xe2\\xf1@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2017-05-07T00:00:00", "modifydate": "2017-05-07T00:35:49", "lines": 35, "newlines": 35, "modlines": 0, "user": "ZATLAS1"}, "text": "//ZATLAS1T JOB (12345678),ZATLAS1,MSGCLASS=H,                           JOB04244\n//        MSGLEVEL=(1,1),CLASS=A,NOTIFY=&SYSUID\n//JOBLIB  DD DSN=ZATLAS1.PCRE2.LOADLIB,DISP=SHR\n//*fail this jcl - review input/output\n//***************************************************************\n//***************JCL CREATED BY ZEEV ATLAS  *********************\n//***************************************************************\n//* RUN THE WHOLE EBCDIC TEST SUITE (SEE DOCUMENTATION.)\n//TEST8 EXEC PGM=PCR2TEST,\n//  PARM='-q PCRE2.TESTLIB(TSTIN1) PCRE2.TESTLIB(TSTOO1)'\n//SYSPRINT DD SYSOUT=*\n//STDOUT   DD SYSOUT=*   ,LRECL=31000,RECFM=VB,BLKSIZE=31004\n//SYSOUT   DD SYSOUT=*\n//STDERR   DD SYSOUT=*\n//SYSTERM  DD SYSOUT=*\n//SYSERR   DD SYSOUT=*\n//MSGFILE  DD SYSOUT=*\n//SYSPRINT DD SYSOUT=*\n//SYSIN  DD DUMMY        ZATLAS1.TEST.INPUT1\n//TEST8A EXEC PGM=PCR2TEST,\n//  PARM='-q PCRE2.TESTLIB(TSTIN2) PCRE2.TESTLIB(TSTOO2)'\n//*TEST8B EXEC PGM=PCR2TEST,\n//*  PARM='-q PCRE2.TESTLIB(TSTIN11) PCRE2.TESTLIB(TSTOO11)'\n//*TEST8C EXEC PGM=PCR2TEST,\n//*  PARM='-q PCRE2.TESTLIB(TSTIN14) PCRE2.TESTLIB(TSTOO14)'\n//TEST8D EXEC PGM=PCR2TEST,\n//  PARM='-q PCRE2.TESTLIB(TSTINE1) PCRE2.TESTLIB(TSTOTE1)'\n//TEST8E EXEC PGM=PCR2TEST,\n//  PARM='-q PCRE2.TESTLIB(TSTINE2) PCRE2.TESTLIB(TSTOTE2)'\n//TEST8F EXEC PGM=PCR2TEST,\n//  PARM='-q PCRE2.TESTLIB(TSTINE11) PCRE2.TESTLIB(TSTOTE11)'\n//TEST8G EXEC PGM=PCR2TEST,\n//  PARM='-q PCRE2.TESTLIB(TSTINE14) PCRE2.TESTLIB(TSTOTE14)'\n//*TEST8H EXEC PGM=PCR2TEST,\n//*  PARM='-q PCRE2.TESTLIB(TSTINEBC) PCRE2.TESTLIB(TSTOOE)'\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TESTECHO": {"ttr": 55, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00R\\x01\\x16\\x10\\x0f\\x01\\x16\\x10\\x0f#3\\x00\\n\\x00\\t\\x00\\x00\\xe9\\xc1\\xe3\\xd3\\xc1\\xe2\\xf1@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2016-04-09T00:00:00", "modifydate": "2016-04-09T23:33:52", "lines": 10, "newlines": 9, "modlines": 0, "user": "ZATLAS1"}, "text": "//ZATLAS1C JOB (12345678),ZATLAS1,MSGCLASS=H,\n//        MSGLEVEL=(1,1),CLASS=A,NOTIFY=&SYSUID\n//***************************************************************\n//***************JCL CREATED BY ZEEV ATLAS  *********************\n//***************************************************************\n//STEP1 EXEC PGM=ECHO,PARM='ABC'\n//STEPLIB DD DSN=ZATLAS1.PCRE2.LOADLIB,DISP=SHR\n//SYSPRINT DD SYSOUT=*\n//STDOUT   DD SYSOUT=*\n//SYSIN  DD  *\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TESTGREP": {"ttr": 57, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//ZATLAS1G JOB (12345678),ZATLAS1,MSGCLASS=H,\n//        MSGLEVEL=(1,1),CLASS=A,NOTIFY=&SYSUID\n//***************************************************************\n//***************JCL CREATED BY ZEEV ATLAS  *********************\n//***************************************************************\n//TEST8 EXEC PGM=PCR2GREP,\n//  PARM='--help'\n//* PARM='/-v'\n//* PARM='/-C 3 .\\\\.\\\\/\\\\s+ADD ZOS.LKED'\n//* PARM='/-C 3 IDENTIF ZOS.COB'\n//* PARM='/-C 2 FROM GDG02.G0001V00 NOSQL.VSAM'\n//* PARM='/-C 2 GLOBALS PCRE.CNTLLIB'\n//* PARM='/-C 2 JOB\\\\s\\\\( PCRE.JCLLIB'\n//* PARM='/-C 3 IDENTIF ''ZATLAS1.PCRE.COB'''\n//* PARM='/-C 2 a /u/zatlas1/mytest.txt'\n//*Usage: pcre2grep .OPTION.... .PATTERN. .FILE1 FILE2 ....\n//*Search for PATTERN in each FILE or standard input.\n//*PATTERN must be present if neither -e nor -f is used.\n//*\"-\" can be used as a file name to mean STDIN.\n//*All files are read as plain files, without any interpretation.\n//*Example: pcre2grep -i 'hello.*world' menu.h main.c\n//*Options:\n//*      --                       terminate options\n//*      --help                   display this help and exit\n//*  -A, --after-context=number   set number of following context\n//*        lines\n//*  -a, --text                   treat binary files as text\n//*  -B, --before-context=number  set number of prior context lines\n//*      --binary-files=word      set treatment of binary files\n//*      --buffer-size=number     set processing buffer size parameter\n//*      --color=option           matched text color option\n//*      --colour=option          matched text colour option\n//*  -C, --context=number         set number of context lines, before\n//*        & after\n//*  -c, --count                  print only a count of matching lines\n//*        per FILE\n//*  -D, --devices=action         how to handle devices, FIFOs, and\n//*        sockets\n//*  -d, --directories=action     how to handle directories\n//*  -e, --regex(p)=pattern       specify pattern (may be used more\n//*        than once)\n//*  -F, --fixed-strings          patterns are sets of\n//*        newline-separated strings\n//*  -f, --file=path              read patterns from file\n//*      --file-list=path         read files to search from file\n//*      --file-offsets           output file offsets, not text\n//*  -H, --with-filename          force the prefixing filename on\n//*        output\n//*  -h, --no-filename            suppress the prefixing filename on\n//*        output\n//*  -I                           treat binary files as not matching\n//*        (ignore)\n//*  -i, --ignore-case            ignore case distinctions\n//*      --no-jit                 ignored: this pcre2grep does not\n//*        support JIT\n//*  -l, --files-with-matches     print only FILE names containing\n//*        matches\n//*  -L, --files-without-match    print only FILE names not containing\n//*        matches\n//*      --label=name             set name for standard input\n//*      --line-buffered          use line buffering\n//*      --line-offsets           output line numbers and offsets, not\n//*        text\n//*      --locale=locale          use the named locale\n//*      --match-limit=number     set PCRE match limit option\n//*      --recursion-limit=number set PCRE match recursion limit\n//*        option\n//*  -M, --multiline              run in multiline mode\n//*  -N, --newline=type           set newline type (CR, LF, CRLF,\n//*        ANYCRLF or ANY)\n//*  -n, --line-number            print line number with output lines\n//*  -o, --only-matching=n        show only the part of the line that\n//*        matched\n//*      --om-separator=text      set separator for multiple -o output\n//*  -q, --quiet                  suppress output, just set return\n//*        code\n//*  -r, --recursive              recursively scan sub-directories\n//*      --exclude=pattern        exclude matching files when\n//*        recursing\n//*      --include=pattern        include matching files when\n//*        recursing\n//*      --exclude-dir=pattern    exclude matching directories when\n//*        recursing\n//*      --include-dir=pattern    include matching directories when\n//*        recursing\n//*      --exclude-from=path      read exclude list from file\n//*      --include-from=path      read include list from file\n//*  -s, --no-messages            suppress error messages\n//*  -u, --utf                    use UTF mode\n//*  -V, --version                print version information and exit\n//*  -v, --invert-match           select non-matching lines\n//*  -w, --word-regex(p)          force patterns to match only as\n//*        words\n//*  -x, --line-regex(p)          force patterns to match only whole\n//*        lines\n//*Numbers may be followed by K or M, e.g. --buffer-size=100K.\n//*The default value for --buffer-size is 20480.\n//*When reading patterns or file names from a file, trailing white\n//*space is removed and blank lines are ignored.\n//*The maximum size of any pattern is 8192 bytes.\n//*With no FILEs, read standard input. If fewer than two FILEs given,\n//*assume -h.\n//*Exit status is 0 if any matches, 1 if no matches, and 2 if trouble.\n//STEPLIB DD DSN=ZATLAS1.PCRE2.LOADLIB,DISP=SHR\n//SYSPRINT DD SYSOUT=*\n//STDOUT   DD SYSOUT=*\n//SYSOUT   DD SYSOUT=*\n//STDERR   DD SYSOUT=*\n//SYSTERM  DD SYSOUT=*\n//SYSERR   DD SYSOUT=*\n//MSGFILE  DD SYSOUT=*\n//SYSIN  DD DUMMY        ZATLAS1.TEST.INPUT1\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TESTIBMS": {"ttr": 59, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x01\\x00\\x14\\x01\\x16\\x00_\\x01\\x16\\x00_\\x00'\\x00\\t\\x00\\t\\x00\\x00\\xe9\\xc1\\xe3\\xd3\\xc1\\xe2\\xf1@@@\"", "ispf": {"version": "01.01", "flags": 0, "createdate": "2016-01-05T00:00:00", "modifydate": "2016-01-05T00:27:14", "lines": 9, "newlines": 9, "modlines": 0, "user": "ZATLAS1"}, "text": "//ZATLAS1C JOB (12345678),ZATLAS1,MSGCLASS=H,\n//        MSGLEVEL=(1,1),CLASS=A,NOTIFY=&SYSUID\n//***************************************************************\n//***************JCL CREATED BY ZEEV ATLAS  *********************\n//***************************************************************\n//STEP1 EXEC PGM=IBMSAMPL\n//STEPLIB DD DSN=ZATLAS1.PCRE2.LOADLIB,DISP=SHR\n//SYSPRINT DD SYSOUT=*\n//SYSIN  DD  *\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TESTPCOA": {"ttr": 219, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//ZATLAS1C JOB (12345678),ZATLAS1,MSGCLASS=H,\n//        MSGLEVEL=(1,1),CLASS=A,NOTIFY=&SYSUID\n//***************************************************************\n//***************JCL CREATED BY ZEEV ATLAS  *********************\n//***************************************************************\n//STEP1 EXEC PGM=PCOBDEMA,PARM='-g'\n//STEPLIB DD DSN=ZATLAS1.PCRE2.LOADLIB,DISP=SHR\n//SYSPRINT DD SYSOUT=*\n//SYSIN  DD  *\ncat|dog\nthe dog sat on the cat's dog\nhorse\n/*\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TESTPCOB": {"ttr": 105, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x01\\x19\\x13\\x1f\\x01\\x194O#%\\x00\\x13\\x00\\x0e\\x00\\x00\\xe9\\xc1\\xe3\\xd3\\xc1\\xe2\\xf1@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2019-05-11T00:00:00", "modifydate": "2019-12-10T23:25:00", "lines": 19, "newlines": 14, "modlines": 0, "user": "ZATLAS1"}, "text": "//ZATLAS1C JOB (12345678),ZATLAS1,MSGCLASS=H,\n//        MSGLEVEL=(1,1),CLASS=A,NOTIFY=&SYSUID\n//***************************************************************\n//***************JCL CREATED BY ZEEV ATLAS  *********************\n//***************************************************************\n//STEP1 EXEC PGM=PCOBDEM2,PARM='-g'\n//STEPLIB DD DSN=ZATLAS1.PCRE2.LOADLIB,DISP=SHR\n//SYSPRINT DD SYSOUT=*\n//SYSIN  DD  *\ncat|dog\nthe dog sat on the cat's dog\n/*\n//STEP1 EXEC PGM=PCOBDEM2,PARM='-g cat|dog a_dog_and_a_cat'\n//STEPLIB DD DSN=ZATLAS1.PCRE2.LOADLIB,DISP=SHR\n//SYSPRINT DD SYSOUT=*\n//SYSIN  DD  DUMMY\n//\n(?<char>A)\\g<char>\nAN_AARDWARK_JAKE_AND_AARDWARK_JACK\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TESTPCO1": {"ttr": 175, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00Q\\x01\\x194O\\x01\\x196_\\x14$\\x00\\x13\\x00\\x0c\\x00\\x00\\xe9\\xc1\\xe3\\xd3\\xc1\\xe2\\xf1@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2019-12-10T00:00:00", "modifydate": "2019-12-31T14:24:51", "lines": 19, "newlines": 12, "modlines": 0, "user": "ZATLAS1"}, "text": "//ZATLAS1C JOB (12345678),ZATLAS1,MSGCLASS=H,\n//        MSGLEVEL=(1,1),CLASS=A,NOTIFY=&SYSUID\n//***************************************************************\n//***************JCL CREATED BY ZEEV ATLAS  *********************\n//***************************************************************\n//*STEP1 EXEC PGM=PCOBDEMA,PARM='-g'\n//STEP1 EXEC PGM=PCOBDEA1,PARM='-g'\n//STEPLIB DD DSN=ZATLAS1.PCRE2.LOADLIB,DISP=SHR\n//SYSPRINT DD SYSOUT=*\n//SYSIN DD DISP=SHR,DSN=ZATLAS1.PCRE2.CNTLLIB(TESTIN1)\n//\n//SYSIN  DD  *\n(\\d)\\.(\\d)\n100.05 one hundred.zero five 217.35 two hundred seventeen.three five\n${1},${2}\ncat|dog\nthe dog sat on the cat's dog\nhorse\n/*\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TESTPCRE": {"ttr": 63, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00E\\x01\\x156\\x0f\\x01\\x18(\\x0f\\x01\\x02\\x00V\\x00T\\x00\\x00\\xe9\\xc1\\xe3\\xd3\\xc1\\xe2\\xf1@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "2015-12-26T00:00:00", "modifydate": "2018-10-07T01:02:45", "lines": 86, "newlines": 84, "modlines": 0, "user": "ZATLAS1"}, "text": "//ZATLAS1T JOB (12345678),ZATLAS1,MSGCLASS=H,\n//        MSGLEVEL=(1,1),CLASS=A,NOTIFY=&SYSUID\n//***************************************************************\n//***************JCL CREATED BY ZEEV ATLAS  *********************\n//***************************************************************\n//PTEST PROC TEST='-C'\n//TEST8 EXEC PGM=PCR2TEST,\n// PARM=&TEST\n//*Usage:     pcre2test \u00ddoptions\u00a8 \u00dd<input file> \u00dd<output file>\u00a8\u00a8\n//*Input and output default to stdin and stdout.\n//*This version of pcre2test is not linked with readline().\n//*Options:\n//*  -8            use the 8-bit library\n//*  -ac           set default pattern modifier PCRE2_AUTO_CALLOUT\n//*  -AC           as -ac, but also set subject 'callout_extra' modifier\n//*  -b            set default pattern modifier 'fullbincode'\n//*  -C            show PCRE2 compile-time options and exit\n//*  -C arg        show a specific compile-time option and exit with its\n//*                  value if numeric (else 0). The arg can be:\n//*     backslash-C    use of \\C is enabled \u00dd0, 1\u00a8\n//*     bsr            \\R type \u00ddANYCRLF, ANY\u00a8\n//*     ebcdic         compiled for EBCDIC character code \u00dd0,1\u00a8\n//*     ebcdic-nl      NL code if compiled for EBCDIC\n//*     jit            just-in-time compiler supported \u00dd0, 1\u00a8\n//*     linksize       internal link size \u00dd2, 3, 4\u00a8\n//*     newline        newline type \u00ddCR, LF, CRLF, ANYCRLF, ANY, NUL\u00a8\n//*     pcre2-8        8 bit library support enabled \u00dd0, 1\u00a8\n//*     pcre2-16       16 bit library support enabled \u00dd0, 1\u00a8\n//*     pcre2-32       32 bit library support enabled \u00dd0, 1\u00a8\n//*     unicode        Unicode and UTF support enabled \u00dd0, 1\u00a8\n//*  -d            set default pattern modifier 'debug'\n//*  -dfa          set default subject modifier 'dfa'\n//*  -error <n,m,..>  show messages for error numbers, then exit\n//*  -help         show usage information\n//*  -i            set default pattern modifier 'info'\n//*  -jit          set default pattern modifier 'jit'\n//*  -jitverify    set default pattern modifier 'jitverify'\n//*  -LM           list pattern and subject modifiers, then exit\n//*  -q            quiet: do not output PCRE2 version number at start\n//*  -pattern <s>  set default pattern modifier fields\n//*  -subject <s>  set default subject modifier fields\n//*  -S <n>        set stack size to <n> megabytes\n//*  -t \u00dd<n>\u00a8      time compilation and execution, repeating <n> times\n//*  -tm \u00dd<n>\u00a8     time execution (matching) only, repeating <n> times\n//*  -T            same as -t, but show total times at the end\n//*  -TM           same as -tm, but show total time at the end\n//*  -version      show PCRE2 version and exit\n//STEPLIB DD DSN=ZATLAS1.PCRE2.LOADLIB,DISP=SHR\n//SYSPRINT DD SYSOUT=*\n//STDOUT   DD SYSOUT=*   ,LRECL=31000,RECFM=VB,BLKSIZE=31004\n//SYSOUT   DD SYSOUT=*\n//STDERR   DD SYSOUT=*\n//SYSTERM  DD SYSOUT=*\n//SYSERR   DD SYSOUT=*\n//MSGFILE  DD SYSOUT=*\n//SYSPRINT DD SYSOUT=*\n//SYSIN  DD DUMMY        ZATLAS1.TEST.INPUT1\n// PEND\n//******************\n// EXEC PTEST,TEST='''-C'''\n//*EXEC PTEST,TEST='''-help'''\n//\n// EXEC PTEST,\n// TEST='''PCRE2.TESTLIB(TSTIN1) PCRE2.TESTLIB(TSTOO1)'''\n// EXEC PTEST,\n// TEST='''PCRE2.TESTLIB(TSTIN2) PCRE2.TESTLIB(TSTOO2)'''\n// EXEC PTEST,\n// TEST='''PCRE2.TESTLIB(TSTIN9) PCRE2.TESTLIB(TSTOO9)'''\n// EXEC PTEST,\n// TEST='''PCRE2.TESTLIB(TSTIN15) PCRE2.TESTLIB(TSTOO15)'''\n// EXEC PTEST,\n// TEST='''PCRE2.TESTLIB(TSTIN16) PCRE2.TESTLIB(TSTOO16)'''\n// EXEC PTEST,\n// TEST='''PCRE2.TESTLIB(TSTIN18) PCRE2.TESTLIB(TSTOO18)'''\n// EXEC PTEST,\n// TEST='''PCRE2.TESTLIB(TSTIN20) PCRE2.TESTLIB(TSTOO20)'''\n// EXEC PTEST,\n// TEST='''PCRE2.TESTLIB(TSTIN21) PCRE2.TESTLIB(TSTOO21)'''\n// EXEC PTEST,\n// TEST='''PCRE2.TESTLIB(TSTINE1) PCRE2.TESTLIB(TSTOTE1)'''\n// EXEC PTEST,\n// TEST='''PCRE2.TESTLIB(TSTINE2) PCRE2.TESTLIB(TSTOTE2)'''\n// EXEC PTEST,\n// TEST='''PCRE2.TESTLIB(TSTINE11) PCRE2.TESTLIB(TSTOTE11)'''\n// EXEC PTEST,\n// TEST='''PCRE2.TESTLIB(TSTINE14) PCRE2.TESTLIB(TSTOTE14)'''\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TESTPCRO": {"ttr": 65, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00I\\x01\\x18\\x10o\\x01\\x18\\x10o\\x00\\x19\\x00@\\x00@\\x00\\x00\\xe9\\xc1\\xe3\\xd3\\xc1\\xe2\\xf1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2018-04-16T00:00:00", "modifydate": "2018-04-16T00:19:49", "lines": 64, "newlines": 64, "modlines": 0, "user": "ZATLAS1"}, "text": "//ZATLAS1T JOB (12345678),ZATLAS1,MSGCLASS=H,\n//        MSGLEVEL=(1,1),CLASS=A,NOTIFY=&SYSUID\n//***************************************************************\n//***************JCL CREATED BY ZEEV ATLAS  *********************\n//***************************************************************\n//PTEST PROC TEST='-C'\n//TEST8 EXEC PGM=PCR2TEST,\n// PARM=&TEST\n//*Usage:     pcre2test \u00ddoptions\u00a8 \u00dd<input file> \u00dd<output file>\u00a8\u00a8\n//*Input and output default to stdin and stdout.\n//*This version of pcre2test is not linked with readline().\n//*Options:\n//*  -8            use the 8-bit library\n//*  -ac           set default pattern modifier PCRE2_AUTO_CALLOUT\n//*  -AC           as -ac, but also set subject 'callout_extra' modifier\n//*  -b            set default pattern modifier 'fullbincode'\n//*  -C            show PCRE2 compile-time options and exit\n//*  -C arg        show a specific compile-time option and exit with its\n//*                  value if numeric (else 0). The arg can be:\n//*     backslash-C    use of \\C is enabled \u00dd0, 1\u00a8\n//*     bsr            \\R type \u00ddANYCRLF, ANY\u00a8\n//*     ebcdic         compiled for EBCDIC character code \u00dd0,1\u00a8\n//*     ebcdic-nl      NL code if compiled for EBCDIC\n//*     jit            just-in-time compiler supported \u00dd0, 1\u00a8\n//*     linksize       internal link size \u00dd2, 3, 4\u00a8\n//*     newline        newline type \u00ddCR, LF, CRLF, ANYCRLF, ANY, NUL\u00a8\n//*     pcre2-8        8 bit library support enabled \u00dd0, 1\u00a8\n//*     pcre2-16       16 bit library support enabled \u00dd0, 1\u00a8\n//*     pcre2-32       32 bit library support enabled \u00dd0, 1\u00a8\n//*     unicode        Unicode and UTF support enabled \u00dd0, 1\u00a8\n//*  -d            set default pattern modifier 'debug'\n//*  -dfa          set default subject modifier 'dfa'\n//*  -error <n,m,..>  show messages for error numbers, then exit\n//*  -help         show usage information\n//*  -i            set default pattern modifier 'info'\n//*  -jit          set default pattern modifier 'jit'\n//*  -jitverify    set default pattern modifier 'jitverify'\n//*  -LM           list pattern and subject modifiers, then exit\n//*  -q            quiet: do not output PCRE2 version number at start\n//*  -pattern <s>  set default pattern modifier fields\n//*  -subject <s>  set default subject modifier fields\n//*  -S <n>        set stack size to <n> megabytes\n//*  -t \u00dd<n>\u00a8      time compilation and execution, repeating <n> times\n//*  -tm \u00dd<n>\u00a8     time execution (matching) only, repeating <n> times\n//*  -T            same as -t, but show total times at the end\n//*  -TM           same as -tm, but show total time at the end\n//*  -version      show PCRE2 version and exit\n//STEPLIB DD DSN=ZATLAS1.PCRE2.LOADLIB,DISP=SHR\n//SYSPRINT DD SYSOUT=*\n//STDOUT   DD SYSOUT=*   ,LRECL=31000,RECFM=VB,BLKSIZE=31004\n//SYSOUT   DD SYSOUT=*\n//STDERR   DD SYSOUT=*\n//SYSTERM  DD SYSOUT=*\n//SYSERR   DD SYSOUT=*\n//MSGFILE  DD SYSOUT=*\n//SYSPRINT DD SYSOUT=*\n//SYSIN  DD DUMMY        ZATLAS1.TEST.INPUT1\n// PEND\n//******************\n//*EXEC PTEST,TEST='''-C'''\n//*EXEC PTEST,TEST='''-help'''\n//*\n// EXEC PTEST,\n// TEST='''PCRE2.TESTLIB(TSTIN20) PCRE2.TESTLIB(TSTOO20)'''\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TESTREXX": {"ttr": 189, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x004\\x01 \\x02\\x0f\\x01 \\x02\\x0f!(\\x00\\x0b\\x00\\x0b\\x00\\x00\\xe9\\xc1\\xe3\\xd3\\xc1\\xe2\\xf1@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2020-01-20T00:00:00", "modifydate": "2020-01-20T21:28:34", "lines": 11, "newlines": 11, "modlines": 0, "user": "ZATLAS1"}, "text": "//ZATLAS1C JOB (12345678),ZATLAS1,MSGCLASS=H,REGION=0M,\n//        MSGLEVEL=(1,1),CLASS=A,NOTIFY=&SYSUID\n//*******************************************************\n//RUNIT1O EXEC PGM=IRXJCL,PARM='RXPCSUBA',COND=(0,NE)\n//STEPLIB  DD  DISP=SHR,DSN=ZATLAS1.PCRE2.LOADLIB\n//SYSEXEC  DD  DISP=SHR,DSN=ZATLAS1.PCRE2.CNTLLIB\n//SYSIN    DD  *\n//SYSPRINT DD  SYSOUT=*\n//SYSTSPRT DD  SYSOUT=*\n//PCREDUMP DD  SYSOUT=*\n//*PCREDUMP DD  DISP=MOD,DSN=ZATLAS1.REXX.OUTPUTO\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TESTREX1": {"ttr": 273, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\t\\x00#\\x01 \"/\\x01 \"O#!\\x00\\x0b\\x00\\x0b\\x00\\x00\\xe9\\xc1\\xe3\\xd3\\xc1\\xe2\\xf1@@@'", "ispf": {"version": "01.09", "flags": 0, "createdate": "2020-08-09T00:00:00", "modifydate": "2020-08-11T23:21:23", "lines": 11, "newlines": 11, "modlines": 0, "user": "ZATLAS1"}, "text": "//ZATLAS1C JOB (12345678),ZATLAS1,MSGCLASS=H,REGION=0M,\n//        MSGLEVEL=(1,1),CLASS=A,NOTIFY=&SYSUID\n//*******************************************************\n//RUNIT1O EXEC PGM=IRXJCL,PARM='RXPRSNT1',COND=(0,NE)\n//STEPLIB  DD  DISP=SHR,DSN=ZATLAS1.PCRE2.LOADLIB\n//SYSEXEC  DD  DISP=SHR,DSN=ZATLAS1.PCRE2.CNTLLIB\n//SYSIN    DD  *\n//SYSPRINT DD  SYSOUT=*\n//SYSTSPRT DD  SYSOUT=*\n//PCREDUMP DD  SYSOUT=*\n//*PCREDUMP DD  DISP=MOD,DSN=ZATLAS1.REXX.OUTPUTO\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ZCOBCL": {"ttr": 209, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00G\\x01\\x16\\x01\\x7f\\x01 \\x13\\x8f B\\x00\\x15\\x00\\x15\\x00\\x00\\xe9\\xc1\\xe3\\xd3\\xc1\\xe2\\xf1@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "2016-01-17T00:00:00", "modifydate": "2020-05-17T20:42:47", "lines": 21, "newlines": 21, "modlines": 0, "user": "ZATLAS1"}, "text": "//ZATLAS1C JOB (12345678),ZATLAS1,MSGCLASS=H,\n//        MSGLEVEL=(1,1),CLASS=A,NOTIFY=&SYSUID\n//***************************************************************\n//***************JCL CREATED BY ZEEV ATLAS  *********************\n//***************************************************************\n//COMP EXEC IGYWCL,PARM.COBOL='OFFSET,MAP,LIB,PGMNAME(LONGMIXED)'\n//* PARM.COBOL='OFFSET,MAP,LIB,PGMNAME(LONGMIXED),TRUNC(BIN)',\n//*COBOL.STEPLIB  DD  DSNAME=IGY620.SIGYCOMP,DISP=SHR\n//SYSLIB DD DSN=ZATLAS1.PCRE2.COB,DISP=SHR\n//SYSIN DD DSN=ZATLAS1.PCRE2.COB(PCOBDEM2),DISP=SHR\n//LKED.SYSLIB DD\n// DD\n// DD DISP=SHR,DSN=ZATLAS1.PCRE2.LOADLIB\n//SYSLMOD DD DSN=ZATLAS1.PCRE2.LOADLIB(PCOBDEM2),DISP=SHR\n//LKED.SYSIN DD *\n INCLUDE SYSLIB(COMPILE2)\n INCLUDE SYSLIB(MATCH2)\n INCLUDE SYSLIB(PATTERN2)\n INCLUDE SYSLIB(PCOBAPI2)\n//* INCLUDE SYSLIB(DUMPMEM)\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ZCOBOA1": {"ttr": 211, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x18\\x01\\x196?\\x01 \\x13\\x8f C\\x00\\x16\\x00\\x1d\\x00\\x00\\xe9\\xc1\\xe3\\xd3\\xc1\\xe2\\xf1@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2019-12-29T00:00:00", "modifydate": "2020-05-17T20:43:18", "lines": 22, "newlines": 29, "modlines": 0, "user": "ZATLAS1"}, "text": "//ZATLAS1C JOB (12345678),ZATLAS1,MSGCLASS=H,\n//        MSGLEVEL=(1,1),CLASS=A,NOTIFY=&SYSUID\n//***************************************************************\n//***************JCL CREATED BY ZEEV ATLAS  *********************\n//***************************************************************\n//COMP EXEC IGYWCL,PARM.COBOL='OFFSET,MAP,LIB,PGMNAME(LONGMIXED)'\n//* PARM.COBOL='OFFSET,MAP,LIB,PGMNAME(LONGMIXED),TRUNC(BIN)',\n//*COBOL.STEPLIB  DD  DSNAME=IGY620.SIGYCOMP,DISP=SHR\n//SYSLIB DD DSN=ZATLAS1.PCRE2.COB,DISP=SHR\n//SYSIN DD DSN=ZATLAS1.PCRE2.COB(PCOBDEA1),DISP=SHR\n//LKED.SYSLIB DD\n// DD\n// DD DISP=SHR,DSN=ZATLAS1.PCRE2.LOADLIB\n//SYSLMOD DD DSN=ZATLAS1.PCRE2.LOADLIB(PCOBDEA1),DISP=SHR\n//LKED.SYSIN DD *\n INCLUDE SYSLIB(COMPILE2)\n INCLUDE SYSLIB(MATCH2)\n INCLUDE SYSLIB(PATTERN2)\n INCLUDE SYSLIB(PCOBAPI2)\n INCLUDE SYSLIB(SUBSTIT2)\n//* INCLUDE SYSLIB(DUMPMEM)\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ZCOBOL1": {"ttr": 223, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x17\\x01 \\x13\\x9f\\x01 \\x13\\x9f\\x12V\\x00\\x16\\x00\\x16\\x00\\x00\\xe9\\xc1\\xe3\\xd3\\xc1\\xe2\\xf1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2020-05-18T00:00:00", "modifydate": "2020-05-18T12:56:17", "lines": 22, "newlines": 22, "modlines": 0, "user": "ZATLAS1"}, "text": "//ZATLAS1C JOB (12345678),ZATLAS1,MSGCLASS=H,\n//        MSGLEVEL=(1,1),CLASS=A,NOTIFY=&SYSUID\n//***************************************************************\n//***************JCL CREATED BY ZEEV ATLAS  *********************\n//***************************************************************\n//COMP EXEC IGYWCL,PARM.COBOL='OFFSET,MAP,LIB,PGMNAME(LONGMIXED)'\n//* PARM.COBOL='OFFSET,MAP,LIB,PGMNAME(LONGMIXED),TRUNC(BIN)',\n//*COBOL.STEPLIB  DD  DSNAME=IGY620.SIGYCOMP,DISP=SHR\n//SYSLIB DD DSN=ZATLAS1.PCRE2.COB,DISP=SHR\n//SYSIN DD DSN=ZATLAS1.PCRE2.COB(PCOBDEMA),DISP=SHR\n//LKED.SYSLIB DD\n// DD\n// DD DISP=SHR,DSN=ZATLAS1.PCRE2.LOADLIB\n//SYSLMOD DD DSN=ZATLAS1.PCRE2.LOADLIB(PCOBDEMA),DISP=SHR\n//LKED.SYSIN DD *\n INCLUDE SYSLIB(COMPILE2)\n INCLUDE SYSLIB(MATCH2)\n INCLUDE SYSLIB(PATTERN2)\n INCLUDE SYSLIB(PCOBAPI2)\n INCLUDE SYSLIB(SUBSTIT2)\n//* INCLUDE SYSLIB(DUMPMEM)\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT939/CBT.V500.FILE939.PDS/JCL.xmi", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT939/CBT.V500.FILE939.PDS", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}