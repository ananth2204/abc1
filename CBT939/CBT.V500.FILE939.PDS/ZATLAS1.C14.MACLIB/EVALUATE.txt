         MACRO
&LAB     EVALUATE &OPCODE,&OPER1,&OPER2
.*
.* THIS MACRO IS ONE OF A RELATED SET OF MACROS WHICH ENGINEER THE
.* SELECTED EXECUTION OF CODE DEPENDING ON THE CONTENTS OF A FIELD.
.*
.* THE GENERAL STRUCTURE IS AS FOLLOWS -
.*    EVALUATE OPCODE,OP1(,OP2.REP.TYPE.LTH)
.*      WHEN   OP2REST,OP2REST
.*      WHEN   OP2REST-OP2REST,OP2REST
.*      OTHERWSE
.*    ENDEVAL
.*
.* OPCODE FOR EACH POSSIBLE TYPE
         GBLC  &OP(16)
.*
.* COMPONENTS OF OP1 FOR EACH POSSIBLE DEPTH
         GBLC  &OP1(16)
.*
.* OP2.REP.TYPE.LTH FOR EACH POSSIBLE DEPTH
         GBLC  &OP2(16)
.*
.* CURRENT LABEL GENERATION NUMBER FOR EACH POSSIBLE DEPTH
         GBLA  &ON(16)
.*
.* CURRENT END LABEL NUMBER FOR EACH POSSIBLE DEPTH
         GBLA  &OE(16)
.*
.* CURRENT DEPTH OF OPTION NESTING (1 TO 16)
         GBLA  &OD
.*
.* IMMEDIATE INDICATOR FOR EACH POSSIBLE DEPTH
         GBLB  &OI(16)
.*
.* QUOTES INDICATOR FOR EACH POSSIBLE DEPTH
         GBLB  &OQ(16)
.*
.* OPTION INDICATOR FOR EACH POSSIBLE DEPTH
         GBLB  &OPTN(16)
.*
.* STATUS INDICATOR FOR EACH POSSIBLE DEPTH
         GBLB  &OS(16)
.*
.* LOCAL WORK FIELDS
         LCLA  &A
         LCLC  &C1,&C2,&C3,&C4,&C5,&C6,&C7,&C8
.*
.IF0     AIF   (T'&LAB EQ 'O').END0
&LAB     EQU   *
.END0    ANOP
.IF0A    AIF   (&OD EQ 0).END0A
.IF0B    AIF   ((&OPTN(&OD)) EQ (0)).END0B
         MNOTE 16,'DUPLICATE OPTION'
&OS(&OD) SETB  (1)
         MEXIT
.END0B   ANOP
.END0A   ANOP
.* INCREMENT COUNT OF DEPTH OF NESTING
&OD      SETA  &OD+1
.IF1     AIF   (&OD LE 16).END1
         MNOTE 16,'MAX OPTION NESTING OF 16 EXCEEDED'
         MEXIT
.END1    ANOP
.* SET OPTION INDICATOR FOR THIS DEPTH (1= OPTION MACRO LAST MET)
&OPTN(&OD) SETB (1)
.* ZEROISE STATUS INDICATOR FOR THIS DEPTH (1= OPTION STATEMENT ERROR)
&OS(&OD) SETB  (0)
.* ZEROISE IMMEDIATE INDICATOR FOR THIS DEPTH (1= CLI OPCODE)
&OI(&OD) SETB  (0)
.* ZEROISE QUOTES INDICATOR FOR THIS DEPTH (1= QUOTES EXPECTED)
&OQ(&OD) SETB  (0)
.* INCREMENT LABEL GENERATION NUMBER FOR THIS DEPTH
&ON(&OD) SETA  &ON(&OD)+1
.* SAVE LABEL GENERATION NUMBER FOR END LABEL FOR THIS DEPTH
&OE(&OD) SETA  &ON(&OD)
.* INCREMENT LABEL GENERATION NUMBER FOR THIS DEPTH
&ON(&OD) SETA  &ON(&OD)+1
.IF2A    AIF  (K'&OPCODE GT 0).END2A
         MNOTE 16,'NO OPCODE SPECIFIED'
&OS(&OD) SETB  (1)
         AGO   .MEND
.END2A   ANOP
.OKOLTH  AIF   ('&OPCODE'(1,1) EQ 'C').OKC
         MNOTE 16,'INVALID OPCODE'
&OS(&OD) SETB  (1)
         AGO   .MEND
.OKC     AIF   ('&OPCODE' NE 'CLI').END2AA
&OI(&OD) SETB  (1)
.END2AA  ANOP
&OP(&OD) SETC  '&OPCODE'
.IF2B    AIF   (T'&OPER1 NE 'O').END2B
         MNOTE 16,'NO FIRST OPERAND SPECIFIED'
&OS(&OD) SETB  (1)
         AGO   .MEND
.END2B   ANOP
&OP1(&OD) SETC '&OPER1'
.IF3     AIF   (T'&OPER2 NE 'O').ELS3
&OQ(&OD) SETB  (0)
&OP2(&OD) SETC ''
         AGO   .END3
.ELS3    ANOP
.IF3A    AIF   (K'&OPER2 LE 8).END3A
         MNOTE 16,'THIRD PARAMETER OVERLONG'
&OS(&OD) SETB  (1)
         AGO   .MEND
.END3A   ANOP
         AIF   ('&OPER2'(1,1) NE '=').TRYI
         AIF   ((&OI(&OD)) EQ (0)).TRYSOLO
         MNOTE 16,'ILLEGAL IMMEDIATE OPERAND'
&OS(&OD) SETB  (1)
         AGO   .MEND
.TRYSOLO AIF   (K'&OPER2 NE 1).OKOP2
&OQ(&OD) SETB  (0)
&OP2(&OD) SETC '&OPER2'
         AGO   .END3
.TRYI    AIF   ((&OI(&OD)) EQ (1)).OKOP2
         MNOTE 16,'ILLEGAL LITERAL'
&OS(&OD) SETB  (1)
         AGO   .MEND
.OKOP2   ANOP
&OQ(&OD) SETB  (1)
&OP2(&OD) SETC '&OPER2'
.END3    ANOP
.MEND    ANOP
         BRU   @D&OD.N&ON(&OD)
         MEXIT
.*
.*  EXAMPLES OF USING EVALUATE
.*
.*  EVALUATE
.*
.*  EVALUATE is used to select which of several pieces of code is to
.*  be executed when that selection depends upon the value of a
.*  particular field.  In such cases, EVALUATE is more elegant, more
.*  readable, and more logical than the overused ELSEIF.
.*  The general format is:
.*
.*               EVALUATE opcode,op1(,op2)
.*                 WHEN op2value
.*                   code
.*                 WHEN op2value1-op2value2
.*                   code
.*                 WHEN op2value1-op2value2,op2value
.*                   code
.*                 OTHERWSE
.*                   code
.*               ENDOPT
.*
.*  where: 'opcode' is one of - CLC, CLI, CP, CH, C, CLR, CL, CR;
.*         'op1' is the address of the determinant field;
.*         'op2' is the constant type and length (if this is common
.*               to all the WHEN values).
.*
.*  The EVALUATE macro declares the type of comparison to be done on
.*  the determinant field.  It is followed by a series of WHEN clauses,
.*  each of which specifies a list of values and/or ranges, and heads
.*  the lines of code to be executed if that WHEN is selected. Only
.*  one WHEN clause, the first to satisfy the test, will be executed.
.*  OPTELSE, if coded, should follow the final WHEN (and will often
.*  head a 'value not found' error procedure).  The OTHERWSE code will
.*  be executed if none of the WHEN values matches the determinant;
.*  if there is no match and no OTHERWSE clause, processing continues
.*  normally, without any of the WHEN clauses having been executed.
.*  ENDOPT terminates the EVALUATE block.
.*
.*  Processing will be most efficient when the WHEN clauses are written
.*  in order of decreasing probability of selection, and when the
.*  values within each WHEN are in order of decreasing probability of
.*  occurrence.
.*  EVALUATE blocks can be nested to a maximum depth of 16.
.*  No registers are corrupted by OPTION.
.*
.*  The following examples illustrate OPTION's commoner modes of use.
.*
.*  1.  EVALUATE CP,COUNT,=P
.*        WHEN '1'
.*          code
.*        WHEN '2'
.*          code
.*        WHEN '3','4','5'
.*          code
.*        WHEN '6'-'99'
.*          code
.*        OTHERWSE
.*          code
.*      ENDOPT
.*
.*  2.  EVALUATE CP,TAX(3)
.*        WHEN =P'0'
.*          code
.*        WHEN =P'1',=P'1000'
.*          code
.*        WHEN PFLDA(3)-PFLDB(5),0(5,R6)
.*          code
.*        WHEN PHIGH
.*          code
.*      ENDOPT
.*
.*  3.  EVALUATE CLI,BDETCRR3,C
.*        WHEN 'A'
.*          ZAP ACUSELDS,=P'-5'
.*        WHEN 'B'
.*          ZAP ACUSELDS,=P'-4'
.*        WHEN 'D'
.*          ZAP ACUSELDS,=P'-2'
.*        WHEN 'E'
.*          ZAP ACUSELDS,=P'-1'
.*        OTHERWSE
.*          PERFORM ERRSCORE
.*      ENDOPT
.*
.*  4.  EVALUATE CLI,BDETDKCN,X           SELECT BY COMPANY
.*        WHEN '53'                       COUNTRY GARDEN
.*          PERFORM CGPOST
.*        WHEN '26'                       SHOWCASE
.*          MVI OSNOPPCH,C'0'             NOT YET CHARGED
.*          ZAP OSNOPANP,=P'150'          POST AND PACK CHARGE
.*        WHEN '63'                       SHOPPING SENSE
.*          MVI OSNOPPCH,C'0'             NOT YET CHARGED
.*          ZAP OSNOPANP,=P'195'          POST AND PACK CHARGE
.*        OTHERWSE
.*          IF (CLC,CUSTNO(3),E,=C'184')  BARGAIN BASEMENT
.*            MVI OSNOPPCH,C'0'           NOT YET CHARGED
.*            ZAP OSNOPANP,=P'200'        POST AND PACK CHARGE
.*          ELSE
.*            IF (CLC,CUSTNO(3),E,=C'183')  NEW HORIZONS
.*              PERFORM NHPOST
.*            ENDIF
.*          ENDIF
.*      ENDOPT
.*
.*  5.  EVALUATE CH,R2,=H
.*        WHEN '0'
.*          PERFORM READPBDF
.*        WHEN '4'
.*          L R5,0(R1)
.*          ST R5,PARMADDR
.*          .
.*          .
.*          .
.*        WHEN '12'
.*          IF (CLI,FIRSTSW,E,C'Y')
.*            MVI FIRSTSW,C'N'
.*          ENDIF
.*          PERFORM READPBCF
.*      ENDOPT
.*
.*  6.  EVALUATE CLC,ACUSCLUS,=CL2
.*        WHEN '04','13','14','27'
.*          MVC C200PRCI,=C'20'
.*        WHEN '19','24'-'26'
.*          MVC C200PRCI,=C'30'
.*        WHEN '10','11','16'-'18','22','29'
.*          MVC C200PRCI,=C'40'
.*        WHEN '01','03','07','08','12'
.*          MVC C200PRCI,=C'50'
.*        WHEN '05','06','09','15','20','21','23','28','30'
.*          MVC C200PRCI,=C'60'
.*        OTHERWSE
.*          MVC C200PRCI,=C'70'
.*      ENDOPT
.*
.*  In the above example, since the implicit length of ACUSCLUS is
.*  two bytes, 'OPTION CLC,ACUSCLUS,=C' could have been coded;
.*  or even 'OPTION CLC,ACUSCLUS' with 'OPT =C'04',=C'13'...'.
.*
.*  7.  EVALUATE C,R2
.*        WHEN =F'0',0(R3)
.*          code
.*        WHEN 4(R3)-8(R3)
.*          code
.*        WHEN FWORD1-FWORD2
.*          code
.*        WHEN =F'4000'-FWORD3
.*          code
.*        WHEN =4X'FF'
.*          code
.*      ENDOPT
.*
.*  8.  EVALUATE CR,R2
.*        WHEN R6-R7,R8
.*          code
.*        WHEN R9
.*          code
.*      ENDOPT
.*
         MEND
