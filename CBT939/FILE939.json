{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220013518000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 18929092, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 9, "INMDSNAM": "CBT.V500.FILE939.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 18929092, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 18929092, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE939.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x01 \\x02'", "DS1TRBAL": "b'\\xd2\\xe8'"}, "COPYR2": {"deb": "b'\\x02\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xb0\\x00\\x04\\x9a\\xc0\\xc8'", "extents": ["b'\\x02\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xb0\\x00\\x04\\x9a\\xc0\\xc8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\t\\x94\\x00\\x03\\t\\xa4\\x00\\x02\\x00\\xf0'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\t\\xa4\\x00\\x03\\t\\xa7\\x00\\x06\\x001'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x00\\x00C\\x01 %/\\x01 %/\\x15P\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf5\\xf0\\xf0@@@'", "ispf": {"version": "05.00", "flags": 0, "createdate": "2020-09-08T00:00:00", "modifydate": "2020-09-08T15:50:43", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-500"}, "text": "REGULAR CBT TAPE - VERSION 500    FILE:  939\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT500.FILE939\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    8000    PO\n\n   PDS117I 19 MEMBERS COUNTED; CUMULATIVE SIZE IS 179,794 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   09/08/20    15:50:43    UTC-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$NOTE00": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00G\\x01\\x16\\x01\\x8f\\x01\\x16\\x01\\x8f\\x18B\\x00\\x1d\\x00\\x1d\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2016-01-18T00:00:00", "modifydate": "2016-01-18T18:42:47", "lines": 29, "newlines": 29, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject:  File939 --->Re: A question about new CBT file\nFrom:     Ze'ev Atlas <zatlas1@yahoo.com>\nDate:     1/17/2016 10:41 PM\nTo:       Sam Golob <sbgolob@cbttape.org>\n\nHi Sam\n\nPerl Compatible Regular Expressions library PCRE2, now release 10.21.\n\nPCRE2 is the new version of PCRE.  The relations between the old\nPCRE and the new PCRE2 are analogous to the relations between\nz/OS 1.n and z/OS 2.n and therefore it requires a new CBT file,\nFile 939.\n\nThis is a full implementation of PCRE2 release 10.21 in native\nclassic z/OS.  The included XMI files are binary images of all\nrequired libraries.  There is a document member and a license\nmember in the JCLLIB library.  You would notice that this open\nsource software is distributed under the BSD license and thus it\nis business and corporate friendly.\n\nWith the advent of PCRE2, the old PCRE (File 882) is superseded.\nWhile there would be some bug fixes, any new development would be\ndone in PCRE2.  I believe that there are not too many\ninstallations that use the old PCRE and they are encouraged to\nmove to PCRE2.\n\nZe'ev Atlas\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$$NOTE01": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00B\\x01\\x16\\x01\\x8f\\x01\\x16\\x01\\x8f\"W\\x00.\\x00.\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2016-01-18T00:00:00", "modifydate": "2016-01-18T22:57:42", "lines": 46, "newlines": 46, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject:  Clarification for other EBCDIC code pages\nFrom:     Ze'ev Atlas <zatlas1@yahoo.com>\nDate:     1/18/2016 9:56 PM\nTo:       Sam Golob <sbgolob@cbttape.org>\n\nAs per Sam's request, I'll try to clarify the code page issue a\nbit farther.  There are two, related but not totally connected\nissues.\n\n1. IBM set their C compiler to work with IBM1047, however all the\n   machines that I have access to seem to be set to IBM1140 which\n   is the old '037' code page.  I had to do some acrobatics and\n   replace the caret sign with the IBM logical not (which is the\n   caret in IBM1047) for the thing to work.\n\n2. Other languages' EBCDIC code pages issue.\n\n2.1. Originally, I thought to set some switch in the config.h\n   header file, in order to allow some logic for various\n   languages and code pages.  This was proven to be unnecessary,\n   but I did not remove the switches from the header in case I\n   will need them sometime in the future.  You should ignore\n   those switches.\n\n2.2. OTH, since the only machines that I have access to are in\n   the USA, I could not compile or test other languages.  Therefore,\n   the supplied LOADLIB is for USA English.  If you want to work\n   with other languages like Russian, Hebrew or Turkish, you must\n   compile your own version of the LOADLIB.\n\nThe good news is that if you run the COMPCRE2 member in the\nJCLLIB and all is compiled and bound with RC=4 or less, then you\nare good.  The first step builds the correct character table for\nyour machine and the second step compiles it.\n\nThe bad news is that if your caret is in the other place, you\nwill have to transform it all over the place, especially in the\nSRCE and TESTLIB libraries.\n\nNote that there is one line in the source code, in the PCRZOSCS\nheader file that is marked with '<tag>'.  The caret sign in that\nline must stay as caret in the source code.\n\nZe'ev Atlas\n\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$$NOTE06": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x02\\x01\\x19\\x14\\x0f\\x01\\x19\\x14\\x0f\\x12\\x08\\x00 \\x00 \\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2019-05-20T00:00:00", "modifydate": "2019-05-20T12:08:02", "lines": 32, "newlines": 32, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject:  PCRE2 for z/OS release 10.33\nFrom:     Ze'ev Atlas <zatlas1@yahoo.com>\nDate:     5/20/2019, 12:11 AM\nTo:       Sam Golob <sbgolob@cbttape.org>\n\nHi Sam\n\nPCRE2 for z/OS release 10.33 is ready.\n\nHere is the readme for release 10.33\n------------------------------------\nThere is a change in the way the PCRE2 library is distributed\nThis change is not reflected in the doc.\u00a0 The doc should be modified\nfor next release.  You may find the doc in the JCLLIB in EBCDIC and\nit is also the only ASCII file that is provided with the current\ndistro.\n\nI came to recognize that most users would not actually build the\npackage from the ASCII files but rather would use the provided EBCDIC\nXMI files.  I will not provide the ASCII load files with the distro\nany more, unless specifically asked to.\u00a0 Rather, I intend to expand\nthe use of my GIT site and provide a version of the ASCII files there.\n\nI hope to be ready with the GIT site and publish it for the next\nrelease.\n\nIf you really need the ASCII files, please contact me via emsil:\nzatlas1@yahoo.com\n\n\nZe'ev Atlas\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$$NOTE07": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00A\\x01\\x194\\x0f\\x01\\x194\\x0f\\x14\\x01\\x00\\x03\\x00\\x03\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2019-12-06T00:00:00", "modifydate": "2019-12-06T14:01:41", "lines": 3, "newlines": 3, "modlines": 0, "user": "SBGOLOB"}, "text": "\nPCRE2 for z/OS, version 10.34 is now ready!\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$$NOTE08": {"ttr": 526, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x008\\x01\\x195\\x7f\\x01\\x195\\x7f\\x13\\x14\\x00\\x08\\x00\\x08\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2019-12-23T00:00:00", "modifydate": "2019-12-23T13:14:38", "lines": 8, "newlines": 8, "modlines": 0, "user": "SBGOLOB"}, "text": "Notes for Release 10.34a\n\nMember PCRE2DOC now contains zipped documentation in ASCII format.\nTo read it, download this member in BINARY to a PC and unzip it.\n\nFor the same documentation in EBCDIC format, please see the member\ncalled PCRE2DOC in the JCL library.\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$EBCDIC": {"ttr": 528, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\n \\x00Y\\x01\\x174\\x7f\\x01\\x174\\x7f\\x14\\x04\\x00\\xbe\\x00\\xbe\\x00\\x00\\xd7\\xc3\\xd9\\xf1\\xf0\\xf3\\xf0\\xc1@@'", "ispf": {"version": "10.32", "flags": 0, "createdate": "2017-12-13T00:00:00", "modifydate": "2017-12-13T14:04:59", "lines": 190, "newlines": 190, "modlines": 0, "user": "PCR1030A"}, "text": "EBCDIC Horror\n-------------\nAs many of you know, EBCDIC is NOT one code page but actually several\ndistinct code pages.  The most common difference between one version\nof EBCDIC to another is language specific where Greek, Turkish, Hebrew,\nCyrillic, Arabic, etc. charcters have to be supported in EBCDIC for the\nvarious locales that use IBM mainframes.  Famous examples are:\nIBM-037 - USA/Canada - CECP\nIBM-273 - Germany F.R./Austria - CECP\nIBM-276 - Canada (French) - 94\nIBM-277 - Denmark, Norway - CECP\nIBM-297 - France - CECP\nIBM-284 - Spain/Latin America - CECP\nIBM-285 - United Kingdom - CECP\nIBM-423 - Greece - 183\nIBM-424 - Israel (Hebrew)\nIBM-425 - Arabic/Latin for OS/390 Open Edition\nIBM-1025 - Cyrillic, Multilingual\nIBM-1026 - Latin #5 - Turkey\nIBM-1047 - Latin 1/Open Systems\n\n(see https://www-01.ibm.com/software/globalization/cp/cp_cpgid.html\nfor an extensive list, including non-EBCDIC and multi-byte codes.\nNote that the discussion inhere assumes only eight bits code sets!)\n\nThe fact of multi-EBCDIC code pages unto itself should not be a problem\nfor any regular expression engine (or any other software).  The real\nproblem is IBM's (mis)handling of some special characters! Specifically\nthe charcters $,^,[,],# (and others) may occupay totally different code\npoints between one code page to the other.  And these are some of the\nmost prominent special characters that are used to express regular\nexpressions.\n\nI admit not being fully aware about the situation and not fully\nhandling it in the versions of PCRE/PCRE2 for z/OS prior to the current\nversion.  So much so that I will have to rewrite parts of the\ndocumentation and slightly change my automated process.  However, I\nwould like to push this version, with the proper remedy for the issue,\nout of the door immediately and than go back and redo the process and\nthe documentation.\n\nSolution for PCRE2\n------------------\nIn devising a solution for the EBCDIC Horror I had these design goals\nin mind:\n1. Users of PCRE2 are interested in applying regular expressions to\n   their subject strings and not in performing cumbersome codepage\n   conversions.\n2. The most reliable way to handle code page differences must be a\n   tried and true method, prefferably from the vendor (IBM) and not\n   some new development.\n3. For most users, but not all, the native (locale) codpage is also\n   the code page that they see on their emulator.  Those users should\n   not be bothered with the code page specifics.\nIn essence I wanted to provide a minimal API that would hide as much of\nthe gory details from the user.\n\nIBM has settled on IBM-1047 as the best option and is using it as the\nbase code page.  The IBM C compiler is specifically geared to work in\nIBM-1047 as its native code page.  Thus, if you work with IBM-1047 and\nonly with IBM-1047, you may use the PCRE2 in this ditribution as is and\nnot bother with the rest of this document.\n\nIBM also supply a set of standard conversiobn function that are\navailable to all in their C/C++ Runtime Library.  These are the\niconv(), iconv_open() and iconv_close() functions which when are\ncoupled with the setlocale() and nl_langinfo() functions and with the\nlanginfo.h, locale.h and iconv.h header files could help to correctly\nconvert any EBCDIC string between any pairs of EBCDIC (and to some\nextent, non-EBCDIC) code pages.\n\nThe new version of PCRE2 for z/OS provides a front end for using this\nconversion functionality in tandem with PCRE2 while hiding the gory\ndetails from the user who is interested in using regular expressions,\nnot in string conversions, memory allocations, etc.  In essence, the\nuser calls these API functions and pass the results to PCRE2.  BUT the\nuser should NEVER look directly at the results of of these functions.\nRather, the user should stick with his/her own original regular\nexpressions and subject strings in their original code page.\n\nHere is the API, described in C.  Whenever the parameter to the\nfunction is described with **, it is the same as 'by reference' and\nprovides a value returned to the user.\n\nThe basic usage of this API is a one time initialization of the\nconversion process and then convert the input regular expression and\ninput subject string.  The converted strings are then to be supplied\nto the PCRE2 in the usual way.\n\nThe output ovector is a vector of offsets.  These are valid offsets\nagainst the original unconvertyed input, so there is no need to\nconvert back.  The user has to just use the original subject with the\novector.  The names of named captured patterns in the ovector are\nlimited to [A-Za-z0-9_].  As far as I know, these are not really a\nsubject for the EBCDIC horror, so there should be no conversion back\non those as well.\n\n/*  pcrz_codeset_init <=> ZCSINIT             */\nint ZCSINIT (ZCSSTRCT ** handle_ptr,        /* returned handle */\n                      char * codeset_name,  /* input codeset name\n                                               e.g. IBM-037\n              or NULL if locale\n              codeset is to be used */\n                      size_t codeset_name_size, /* codeset name size -\n                                               actual size or any of:\n                                               -1 for null terminated\n                                               -2 for space terminated\n                                               */\n                      size_t pattern_size,  /* maximum anticipated\n                                               regex size\n              or 0 for default */\n                      size_t subject_size); /* maximum anticipated\n                                               subject string size\n              or 0 for default */\n\n1. Determines the native (or use supplied) input CODESET.  If a codeset\n   name is not supplied (NULL), the function will use the locale\n   information.\n2. Initializie conversion from that codeset into IBM-1047.\n3. Allocate two blocks of memory for the IBM-1047 intermediate\n   strings, one for the pattern and one for the subject string.\nWarning: you may run on a mchine with one native codest while you\nview it as another (a common scenario would be running on a standard\nIBM-1047 installation while your 3270 emulator is set to, let's say,\nIBM-285 because you are in the UK.)  In such cases you have to override\nthe locale by supplying your emulator codeset.\nNote that the internal CODESET is always IBM1-1047 which is the IBM\nC/C++ compiler default and the way the binaries are distributed.\npattern_size and subject_size are the estimated max sizes for\nthe largest pattern and largest subject string, default to 2048 and\n8192 correspondingly when the user specifies 0 value.\nThe returned handle should be preserved.\nThe function returns -1 in case of failure, 0 in case of success and 1\nwhen no conversion is necessary.  The user should not bother with the\ndistinction between rc 0 and 1 as the other sunctions know how to\nhandle both situations.\n\n/*  pcrz_codeset_convert_pattern <=> ZCSCONVP */\nint ZCSCONVP (ZCSSTRCT *zcsstrct_ptr,      /* handle returned from\n                                              ZCSINIT */\n         char * input_pattern,             /* pointer to input regex */\n   size_t pattern_length,            /* regex size or 0 for null\n                                        terminated string */\n         char ** output_pattern,           /* handle for converted\n                                        regex to be supplied to\n             PCRE2 compile function */\n   size_t ** out_pattern_length);    /* converted regex size */\n/*  pcrz_codeset_convert_subject <=> ZCSCONVS */\nint ZCSCONVS (ZCSSTRCT *zcsstrct_ptr,      /* handle returned from\n                                              ZCSINIT */\n         char * input_subject,             /* pointer to input subject\n                                        string */\n   size_t subject_length,            /* subject string size or 0\n                                        for nullterminated\n             string */\n         char ** output_subject,           /* handle for converted\n                                        subject string to be\n             supplied to PCRE2 execute\n             function */\n   size_t ** out_subject_length);    /* converted subject string\n                                        size */\n\nThese are front end conversion functions, converting pattern or subject\nstrings from the local codeset to IBM-1047.  This is done via two\ndistinct functions (to avoid user direct interaction with the gory\ndetails:\nThe functions return pointer to converted string and its size.  If size\nis not supplied (value 0) the function will assume a zero terminated\ninput string and will calculate the length.\nThe functions returns -1 in case of failure and 0 in case of success\n\n/*  pcrz_codeset_release <=> ZCSRLSE          */\nextern void ZCSRLSE (ZCSSTRCT *zcsstrct_ptr); /* handle returned from\n                                                 ZCSINIT */\n\nReleasing the formerly initialized environment and deallocating any\nallocated memory.\n______________________________________________________________________\n List of available error messages:\n (We will come with detailed explanations in subsequent releases)\n\nZCSINIT-001: failed to allocate ZCSSTRCT block\nZCSINIT-002: CODESET name length %d too large\nZCSINIT-003: CODESET name too long\nZCSINIT-004: CODESET name size %d too large\nZCSINIT-005: Cannot open converter from %s to %s\nZCSINIT-006: failed to allocate space for converted pattern\nZCSINIT-007: failed to allocate space for converted subject\nZCSCONVx-001: target length gt allocated block\nZCSCONVx-001: Error in converting subject string\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@FILE939": {"ttr": 532, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x00\\x007\\x01 %/\\x01 %/\\x15P\\x00M\\x00M\\x00\\x00\\xc3\\xc2\\xe3`\\xf5\\xf0\\xf0@@@'", "ispf": {"version": "05.00", "flags": 0, "createdate": "2020-09-08T00:00:00", "modifydate": "2020-09-08T15:50:37", "lines": 77, "newlines": 77, "modlines": 0, "user": "CBT-500"}, "text": "//***FILE 939 is from Ze'ev Atlas and contains a port of the        *   FILE 939\n//*           PCRE2 (Perl-Compatible Regular Expressions) product   *   FILE 939\n//*           to z/OS, a later release of PCRE.                     *   FILE 939\n//*                                                                 *   FILE 939\n//*       - - - - - - - - - - - - - - - - - - - - - - - - - - - -   *   FILE 939\n//*                                                                 *   FILE 939\n//*          (This note pertains to PCRE release 10.35)             *   FILE 939\n//*                                                                 *   FILE 939\n//*          Please see the documents:                              *   FILE 939\n//*          EBCDIC_Horror.txt    member $EBCDIC                    *   FILE 939\n//*          REXXAPI.txt          member REXXAPI                    *   FILE 939\n//*                                                                 *   FILE 939\n//*       - - - - - - - - - - - - - - - - - - - - - - - - - - - -   *   FILE 939\n//*                                                                 *   FILE 939\n//*        This distribution is an interim release of PCRE 10.35.   *   FILE 939\n//*                                                                 *   FILE 939\n//*       - - - - - - - - - - - - - - - - - - - - - - - - - - - -   *   FILE 939\n//*                                                                 *   FILE 939\n//*           If you are using code-page 1047 (common in the        *   FILE 939\n//*           U.S.), a quick install is being presented here, in    *   FILE 939\n//*           the form of 6 XMIT-format files.  These need to be    *   FILE 939\n//*           RECEIVE'd under TSO, and they will be almost ready    *   FILE 939\n//*           to go.  You still need to read the documentation      *   FILE 939\n//*           on the PC (and the member PCRE2DOC).                  *   FILE 939\n//*                                                                 *   FILE 939\n//*           It is very important to read member $$NOTE01, which   *   FILE 939\n//*           will explain what to do if you need other code pages. *   FILE 939\n//*                                                                 *   FILE 939\n//*           Port is of PCRE Version 10.35, known as PCRE2.        *   FILE 939\n//*                                                                 *   FILE 939\n//*           Current release is marked with ISPF statistics        *   FILE 939\n//*                as 10.35A.                                       *   FILE 939\n//*                                                                 *   FILE 939\n//*           Please read all members named $$NOTE**                *   FILE 939\n//*                                                                 *   FILE 939\n//*           email:  zatlas1@yahoo.com                             *   FILE 939\n//*                                                                 *   FILE 939\n//*           web site:  http://www.zaconsultants.net               *   FILE 939\n//*                                                                 *   FILE 939\n//*           PCRE info:  http://www.pcre.org  (please go there)    *   FILE 939\n//*                                                                 *   FILE 939\n//*     File Member Names:  (correspond to unzipped named files)    *   FILE 939\n//*     ---- ------ -----                                           *   FILE 939\n//*                                                                 *   FILE 939\n//*     @FILE939 -  this file                                       *   FILE 939\n//*     $$NOTE00 -  general introduction                            *   FILE 939\n//*     $$NOTE01 -  what to do if you need other code pages         *   FILE 939\n//*     $$NOTE06 -  note about release 10.34                        *   FILE 939\n//*     PCRE2DOC -  text documentation for the package (EBCDIC)     *   FILE 939\n//*     ASM      -  pcre2.asmlib.xmi                                *   FILE 939\n//*     CNTL     -  pcre2.cntllib.xmi                               *   FILE 939\n//*     COB      -  pcre2.cob.xmi                                   *   FILE 939\n//*     JCL      -  pcre2.jcllib.xmi                                *   FILE 939\n//*     LICENCE  -  licence.txt                                     *   FILE 939\n//*     LOADLIB  -  pcre2.loadlib.xmi                               *   FILE 939\n//*     SRCE     -  pcre2.srce.xmi                                  *   FILE 939\n//*     TESTLIB  -  pcre2.testlib.xmi                               *   FILE 939\n//*                                                                 *   FILE 939\n//*     Short description:                                          *   FILE 939\n//*     ----- -----------                                           *   FILE 939\n//*     Regular Expressions is a technology that allows text        *   FILE 939\n//*     search and manipulation in ways that go above and           *   FILE 939\n//*     beyond what is known even to extreme Rexx programmers.      *   FILE 939\n//*     The lack of Regular Expressions in COBOL contrasts with     *   FILE 939\n//*     their availability in Perl and Java and is always           *   FILE 939\n//*     frustrating to me.  Thus, I decided to port a Regular       *   FILE 939\n//*     Expressions library and make it available on native         *   FILE 939\n//*     z/OS.  I chose the pcre2 which is considered to be the      *   FILE 939\n//*     best publicly available such library in that it is          *   FILE 939\n//*     compatible with the standard bearer, Perl.  pcre2 is        *   FILE 939\n//*     used in PHP and other projects.                             *   FILE 939\n//*                                                                 *   FILE 939\n//*     This is the fifteenth version and is compatible with        *   FILE 939\n//*     pcre2 10.35. The package is distributed as Open Source,     *   FILE 939\n//*     as is with no warranty and under the BSD license that       *   FILE 939\n//*     is pretty open and non-limiting.                            *   FILE 939\n//*                                                                 *   FILE 939\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ASM": {"ttr": 535, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\n#\\x00P\\x01 %/\\x01 %/\\x15'\\x19\\x06\\x19\\x06\\x00\\x00\\xd7\\xc3\\xd9\\xf1\\xf0\\xf3\\xf5\\xc1@@\"", "ispf": {"version": "10.35", "flags": 0, "createdate": "2020-09-08T00:00:00", "modifydate": "2020-09-08T15:27:50", "lines": 6406, "newlines": 6406, "modlines": 0, "user": "PCR1035A"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "CNTL": {"ttr": 3331, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\n#\\x00#\\x01 %/\\x01 %/\\x15)\\x07[\\x07[\\x00\\x00\\xd7\\xc3\\xd9\\xf1\\xf0\\xf3\\xf5\\xc1@@'", "ispf": {"version": "10.35", "flags": 0, "createdate": "2020-09-08T00:00:00", "modifydate": "2020-09-08T15:29:23", "lines": 1883, "newlines": 1883, "modlines": 0, "user": "PCR1035A"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "COB": {"ttr": 4099, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\n#\\x00E\\x01 %/\\x01 %/\\x150\\x0eO\\x0eO\\x00\\x00\\xd7\\xc3\\xd9\\xf1\\xf0\\xf3\\xf5\\xc1@@'", "ispf": {"version": "10.35", "flags": 0, "createdate": "2020-09-08T00:00:00", "modifydate": "2020-09-08T15:30:45", "lines": 3663, "newlines": 3663, "modlines": 0, "user": "PCR1035A"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "C14MACLB": {"ttr": 5633, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\n#\\x00\\x04\\x01 %/\\x01 %/\\x156\\x13N\\x13N\\x00\\x00\\xd7\\xc3\\xd9\\xf1\\xf0\\xf3\\xf5\\xc1@@'", "ispf": {"version": "10.35", "flags": 0, "createdate": "2020-09-08T00:00:00", "modifydate": "2020-09-08T15:36:04", "lines": 4942, "newlines": 4942, "modlines": 0, "user": "PCR1035A"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "JCL": {"ttr": 7434, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\n#\\x004\\x01 %/\\x01 %/\\x157\\x12\\x10\\x12\\x10\\x00\\x00\\xd7\\xc3\\xd9\\xf1\\xf0\\xf3\\xf5\\xc1@@'", "ispf": {"version": "10.35", "flags": 0, "createdate": "2020-09-08T00:00:00", "modifydate": "2020-09-08T15:37:34", "lines": 4624, "newlines": 4624, "modlines": 0, "user": "PCR1035A"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "LICENCE": {"ttr": 9477, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\n#\\x00V\\x01\\x17\\x12\\x8f\\x01\\x18\\x11o\\x15!\\x00\\x04\\x00G\\x00\\x00\\xd7\\xc3\\xd9\\xf1\\xf0\\xf3\\xf5@@@'", "ispf": {"version": "10.35", "flags": 0, "createdate": "2017-05-08T00:00:00", "modifydate": "2018-04-26T15:21:56", "lines": 4, "newlines": 71, "modlines": 0, "user": "PCR1035"}, "text": "\nThere is a copy of the license in the LICENCE member of the JCL library\nin this pds.  Please look there.\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "LOADLIB": {"ttr": 9479, "alias": false, "halfwords": 40, "notes": 0, "parms": "b'\\n# \"\\x01 %/\\x01 %/\\x159\\xff\\xff\\xff\\xff\\x00\\x00\\xd7\\xc3\\xd9\\xf1\\xf0\\xf3\\xf5\\xc1\\x00\\x01B,\\x00\\x01B,\\x00\\x00\\x00\\x00'", "ispf": {"version": "10.35", "flags": 32, "createdate": "2020-09-08T00:00:00", "modifydate": "2020-09-08T15:39:22", "lines": 65535, "newlines": 65535, "modlines": 0, "user": "PCR1035A"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "PCRE2DOC": {"ttr": 43013, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\n#\\x00H\\x01 %/\\x01 %/\\x15B:\\x7f:\\x7f\\x00\\x00\\xe9\\xc9\\xd7\\xd7\\xc4\\xc6\\xe3@@@'", "ispf": {"version": "10.35", "flags": 0, "createdate": "2020-09-08T00:00:00", "modifydate": "2020-09-08T15:42:48", "lines": 14975, "newlines": 14975, "modlines": 0, "user": "ZIPPDFT"}, "mimetype": "application/zip", "datatype": "binary", "extension": ".zip"}, "REXXAPI": {"ttr": 49155, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\n \\x003\\x01\\x174\\x7f\\x01\\x174\\x7f\\x14\\x00\\x01\\x9b\\x01\\x9b\\x00\\x00\\xd7\\xc3\\xd9\\xf1\\xf0\\xf3\\xf0\\xc1@@'", "ispf": {"version": "10.32", "flags": 0, "createdate": "2017-12-13T00:00:00", "modifydate": "2017-12-13T14:00:33", "lines": 411, "newlines": 411, "modlines": 0, "user": "PCR1030A"}, "text": "______________________________________________________________________\n\n RXPCRE2 - interface between the Rexx language on z/OS and the\n PCRE2 - regex processing library on same platform.\n REXPCRE - same inerface for non-repeatative calls.\n\n Version 0.3\n Contributed by:   John Gateley  November 2017.\n Copyright (c) 2017, John Gateley.\n All rights reserved.\n______________________________________________________________________\n\n Redistribution and use in source and binary forms, with or\n without modification, are permitted provided that the following\n conditions are met:\n\n  1. Redistributions of source code must retain the above\n  copyright notice, this list of conditions and the following\n  disclaimer.\n\n  2. Redistributions in binary form must reproduce the above\n  copyright notice, this list of conditions and the following\n  disclaimer in the documentation and/or other materials\n  provided with the distribution.\n\n  3. Neither the name of the University of Cambridge nor the\n  names of its contributors may be used to endorse or promote\n  products derived from this software without specific prior\n  written permission.\n\n THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND\n CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES,\n INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR\n OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n______________________________________________________________________\n\n This interface was written by John Gateley in September 2017 and is\n designed to be used with the  z/OS port of 'PCRE2 - Perl Compatible\n Regular Expressions' which was  ported by Ze'ev Atlas.\n\n To assemble these programs you will need the supplied macros and will\n also need to assemble modules STRINGIT which is used in STRING macro\n and TRIMIT which is used by the TRIM macro.  Please refer to the\n JCLLIB that comes with the PCRE2 package for the appropriate JCL.\n______________________________________________________________________\n\nThis code uses the following functions for the C environment\n\n  EDCXHOTL    create C environment with library functions\n  EDCXHOTU    call a C routine\n  EDCXHOTT    terminate C environment\n\nThis method was chosen because the only example that I could find of\nREXX calling C via assembler used this.\nCEEPIPI may also work, and is recommended by IBM.  We may look at it\nin subsequent releases.\n\nSee:-\nArticle \"Calling C functions from Assembler - revisited\"\nby A Rudd printed in issue 208 of Xephon magazine of January 2004\nhttp://www.cbttape.org/xephon/xephonm/mvs0401.pdf\n______________________________________________________________________\n\nIt was thought that there were two distinct scenarios that the\nuse of PCRE from REXX would follow.\n\n1, Parsing a value such as an argument to the REXX program or a\n   single record in a control file.\n2, Performing a regular expression on every record from a file.\n\nTo easily enable these two scenarios two versions of the interface\nbetween REXX and PCRE were developed.\n\nSee #REXPCRE below for details of REXXPCRE.  For code example, see the\n    #REXPCRE document in the PCRE2.ASM library in the distribution.\nSee #RXPCRE2 below for details of RXPCRE2.  For code example, see the\n    #REXPCR2 document in the PCRE2.ASM library in the distribution.\n\nThe two main REXX functions are\n\nREXXPCRE   -  the rexx function for single execution of the REGEX\n              returns 0 - no matches\n                      1 - matches\n                      an error message\n\n\nRXPCRE2    -  the rexx function for multiple executes of the REGEX\n              this is the program which should be called from a\n              rexx program to handle perl compatible regular\n              expressions.\n              It gets the rexx arguments and passes them to RXPCRE2A\n              which is a separate load module which also contains\n              the C code.\n              On first call it loads RXPCRE2A into memory and returns\n              the load address to the calling rexx function so that\n              subsequent calls to this module can use the same\n              version that was previously loaded.\n              Returns from this function depend on the command given\n              Any error messages from the program are written using\n              a call to IRXSAY which is the 'SAY' callable function.\n\n    'CONNECT'    connect to the C environment\n                 returns eight bytes of environment information\n                 or RC=8\n    'COMPILE'    compile a regular expression\n                 returns 19 bytes of compile information\n                 or RC=8\n    'EXECUTE'    run the regex using the input string, output\n                 will go to the specified stem variable\n                 returns 0 - no matches\n                         1 - matches\n                         8 - error\n    'RELEASE'    remove the specified regex compilation\n                 returns 0 - OK\n                         8 - error\n    'DISCONNECT' terminate the C environment\n                 returns 0 - OK\n                         8 - error\n\nThere are an additional four programs that are used by the above\n\nRXPCRE2A   -  the sub-routine used by RXPCRE2 which contains the\n              calls to all the C code and should only be called by\n              RXPCRE2 as it uses the rexx environment that exists\n              in that module.\n\nPROCSTEM   -  a sub-routine that manipulates rexx stem variables on\n              behalf of the calling program.\n              Macro PRGSTEM should be used in the calling program\n              to define the interface storage.\n              This also makes use of the rexx environment.\n\nSTRINGIT   -  used by the STRING macro - acts like COBOL STRING.\n\nTRIMIT     -  used by the TRIM macro to remove excess spaces.\n______________________________________________________________________\n#REXPCRE\n\n How REXXPCRE works.\n\n   INPUT ARGUMENTS\n     1, the PERL regular expression.\n     2, the string to be worked on.\n     3, a STEM name which will be populated with the output\n     4, an optional OPTION\n                    'g'  -  match all\n                    'i'  -  ignore case\n                    'x'  -  exclude white space\n     5, an optional code-page - e.g.  'IBM-285'\n        if omitted the default local page is used\n     6, 'debug' if debugging required. Needs PCREDUMP DD name.\n\n   OUTPUT\n        if   successfull\n             RC=1    matched  - stem contains output\n             RC=0    no match - stem.0 will be '0'\n        else\n             RC='error message text'\n        endif\n\n   STEM variables output\n        stem.0             count of stem variables\n        stem.STRING.?      matched substrings\n        stem.POS.?         position and length of matches e.g. 3,4\n        stem.NAME.?        named substrings ' ' if none\n\n   DEBUGGING can be done by specifying 'debug' as argument 6.\n             You will also need to allocate the DD name PCREDUMP\n             with DISP=MOD if more than one call to REXXPCRE\n             because each call is a separate unit of work which\n             includes opening and closing the dataset.\n\nA brief discussion about code pages:\nVarious EBCDIC code pages place the dollar symbol in different code\npoints. In IBM-037 the dollar is x'5B' but in IBM-285 (UK) this is\nthe currency symbol for GBP and the dollar is at x'4A' which is the\ncent symbol in IBM-037. Confusing!\nInternally PCRE2 uses IBM-1047 so to use the dollar symbol in the\nregex we pass a fifth argument which is the code page name we are\nactually using.  This causes PCRE to convert the regex internally\nfrom IBM-285 to IBM-1047 before it is compiled, similarly the string\nis converted before the match is done.\n\nNOTE - this argument is only required if you use a code page in your\nterminal emulator which is NOT the same as the default local code page.\nNormal processing by PCRE is to convert the REGEX and string from the\ndefault local code page to IBM-1047.  IBM-1047 is used by the mainframe\nC compiler.\n*______________________________________________________________________\n*\n#RXPCRE2\n  How RXPCRE2 works.\n\n  This program RXPCRE2 is a rexx function and RXPCRE2A is a helper.\n  On the 'connect' call RXPCRE2A is loaded into memory and the\n  address of the program is returned, this enables the program to\n  be found on subsequent calls.\n  The 'disconnect' function terminates the C environment and deletes\n  RXPCRE2A from memory.\n\n\n  There are 5 calls to the function\n\n\n  1, CONNECT\n     Establish the C environment with or without debug.\n     If OK returns an eight byte environment handle which should\n     be used in subsequent calls to the function.\n     An optional third parameter is the code page that is being used,\n     this defaults to a z/OS environment variable but can be set\n     byt the user.\n     If DEBUG is specified then the DDNAME PCREDUMP must be allocated\n     with DISP=MOD as the dataset will be opened and closed on\n     every call.\n\n     Returns 0 if OK\n             8 if failed - an error message will be writen using IRXSAY\n\n       r_c     = RXPCRE2('connect','pcre_env')\n       r_c     = RXPCRE2('connect','pcre_env',,'debug')\n       r_c     = RXPCRE2('connect','pcre_env','IBM-285')\n       r_c     = RXPCRE2('connect','pcre_env','IBM-285','debug')\n\n       if  r_c  > 0 then exit\n\n\n  2, COMPILE\n     Compile a PCRE regular expression.\n     This returns an nineteen byte compile handle which should\n     be used in subsequent calls to the function.\n     Options can be specified\n                  'g'  repeat search\n                  'i'  ignore case\n                  'x'  exclude white space\n     Note that multiple regular expressions can be compiled and\n     then executed in turn.\n\n     Returns 0 if OK\n             8 if failed - an error message will be writen using IRXSAY\n\n       reg_ex  = \"(?<char>A)\\g<char>\"\n\n       r_c     = RXPCRE2('compile',pcre_env,reg_ex,'pcre_comp','g')\n\n       if  r_c  > 0 then exit\n\n\n  3, EXECUTE\n     Process the compiled expression, repeat this call as required.\n     The STEM name is used as the first part of the output\n     'WANG' will give  WANG.0         the count of matches\n                       WANG_STRING.?  the sub-strings\n                       WANG_POS.?     the positions within the string\n                       WANG_NAME.?    named sub-strings (blank if none)\n\n     returns  0     no match - stem.string.0 will be '0'\n              1     matched  - stem.string.? contains output\n              8     an error message will be writen using IRXSAY\n\n       the_str   = \"AN_AARDWARK_JAKE_AND_AARDWARK_JACK\"\n       my_stem   = \"WANG\"\n\n       r_c = RXPCRE2('execute',pcre_env,pcre_comp,the_str,my_stem)\n\n     This call can be repeated as many times as required.\n\n\n  4, RELEASE\n     Release the compile storage\n     Returns 0 if successfull.\n             8 if failed - an error message will be writen using IRXSAY\n\n       re_lease  = RXPCRE2('release',pcre_env,pcre_comp)\n\n\n  5, DISCONNECT\n     Terminate the C environment.\n     Returns 0 if successfull.\n             8 if failed - an error message will be writen using IRXSAY\n\n       r_c     = RXPCRE2('disconnect',pcre_env)\n\n\n  NOTE if any call fails then all storage and compile handles will\n       be released and the C environment will be terminated.\n       Do not attempt to continue after this.\n*______________________________________________________________________\n*\n     STEM variables output\n          stem.0             count of stem variables\n          stem_STRING.?      matched substrings\n          stem_POS.?         position and length of matches e.g. 3,4\n          stem_NAME.?        named substrings ' ' if none\n\n     these stem values will contain the same as stem.0\n          stem_STRING.0\n          stem_POS.0\n          stem_NAME.0\n*______________________________________________________________________\n*\n          PCRELIB\n\n   When running in batch the LOAD macro will try to find the requested\n   module/program object in the STEPLIB or JOBLIB concatenation\n   which will contain the PDSE library containing RXPCRE2A. This works.\n\n   In ISPF the library would be concatenated to ISPLLIB which will\n   allow RXPCRE2 to be loaded, however, when this tries to load\n   RXPCRE2A the STEPLIB would be used and would fail.\n   It should be possible to put the program library in the ISPLLIB\n   concatenation and amend all references to PCRELIB to ISPLLIB\n   but this will not work when ISPLLIB is modified using LIBDEF as\n   the library is not added to the actual ISPLLIB but to another\n   DDNAME which is logically concatenated by ISPF.\n\n   For the above reasons PCRELIB is used. If it is not present in the\n   task IO table the program will not attempt to use it.\n\n       /* allow RXPCRE2 to be loaded by REXX */\n       \"ISPEXEC LIBDEF ISPLLIB DATASET ID ('SDJRG.LOADLIB.POBJ')\"\n       if rc /= 0 then do\n          say 'allocation to ispllib failed.'\n          exit\n       end\n       /* allow RXPCRE2A to be loaded by RXPCRE2A */\n       \"ALLOC FI(PCRELIB)  DA('?????.LOADLIB.POBJ') SHR\"\n       if rc /= 0 then do\n          say 'allocation to PCRELIB failed.'\n          exit\n       end\n\n       ...\n\n       \"FREE FILE(PCRELIB)\"\n       \"ISPEXEC LIBDEF ISPLLIB \"\n_____________________________________________________________________\n List of available error messages:\n (We will come with detailed explanations in subsequent releases)\n\nRXPCRE2-001 - Error in set environment handle RC=\nRXPCRE2-002 - Error in set compile handle RC=\nRXPCRE2-003 - Could not find RXPCRE2A in PRCELIB\nRXPCRE2-004 - Could not open PCRELIB\nRXPCRE2-005 - Could not find RXPCRE2A\nRXPCRE2-006 - Return code on SAY=\nRXPCRE2-007 - invalid command specified\nRXPCRE2-008 - command not specified\nRXPCRE2-009 - command length was 0\nRXPCRE2-010 - command greater than 20 bytes\nRXPCRE2-011 - environment not specified as argument 2\nRXPCRE2-012 - environment length was not 8 bytes\nRXPCRE2-013 connect - debug command not 'debug'\nRXPCRE2-014 compile - regex not specified\nRXPCRE2-015 compile - regex length was 0\nRXPCRE2-016 compile - regex not null terminated\nRXPCRE2-017 compile - options > 20 bytes\nRXPCRE2-018 compile - options were null terminated\nRXPCRE2-019 compile - options not recognised\nRXPCRE2-020 execute - argument compile result not passed\nRXPCRE2-021 execute - argument compile result invalid\nRXPCRE2-022 execute - string to test is missing\nRXPCRE2-023 execute - string to test has zero length\nRXPCRE2-024 execute - stem name not available\nRXPCRE2-025 execute - stem name has 0 length\nRXPCRE2-026 execute - stem name > 20 bytes\nRXPCRE2-027 release - compile result not passed\nRXPCRE2-028 release - compile result invalid length\nRXPCRE2-029 connect - env handle not specified\nRXPCRE2-030 connect - env handle length was 0\nRXPCRE2-031 connect - env handle > 20 bytes\nRXPCRE2-032 connect - env handle was DEBUG\nRXPCRE2-033 connect - comp handle not specified\nRXPCRE2-034 connect - comp handle length was 0\nRXPCRE2-035 connect - comp handle > 20 bytes\nRXPCRE2-036 connect - comp handle was DEBUG\nRXPCRE2-nnn - unknown error, RC=\nRXPCRE2A-001 - Return code on SAY=\nRXPCRE2A-002 - debug specified but DD name PCREDUMP not allocated\nRXPCRE2A-003 - Invalid command\nRXPCRE2A-011 - Ovector not big enough\nRXPCRE2A-012 - Ovector not big enough\nRXPCRE2A-013 - PCRE2 compilation failed at offset ...\nRXPCRE2A-014 - Code page failure\nRXPCRE2A-nnn - Unknown error, RC=\nREXXPCRE-001 - REGEX (argument 1) not supplied'\nREXXPCRE-002 - REGEX (argument 1) was zero length'\nREXXPCRE-003 - STRING (argument 2) not supplied'\nREXXPCRE-004 - STRING (argument 2) was zero length'\nREXXPCRE-005 - STEM NAME (argument 3) not supplied'\nREXXPCRE-006 - STEM NAME (argument 3) was zero length'\nREXXPCRE-007 - STEM NAME (argument 3) > 20 bytes'\nREXXPCRE-008 - OPTIONS (argument 4) > 20 bytes'\nREXXPCRE-009 - OPTIONS (argument 4) not recognised'\nREXXPCRE-010 - DEBUG (argument 6) <> 5 bytes'\nREXXPCRE-011 - Output value longer than 2048'\nREXXPCRE-012 - Return code on SAY='\nREXXPCRE-013 - Matching error '\nREXXPCRE-014 - PCRE2 compilation failed at offset '\nREXXPCRE-015 - Code page failure (argument 5)'\nREXXPCRE-016 - Debug specified but DD name PCREDUMP not allocated'\nREXXPCRE-017 - Ovector not big enough'\n______________________________________________________________________\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SRCE": {"ttr": 49162, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\n#\\x00\\x06\\x01 %/\\x01 %/\\x15H\\x8e\\x1d\\x8e\\x1d\\x00\\x00\\xd7\\xc3\\xd9\\xf1\\xf0\\xf3\\xf5\\xc1@@'", "ispf": {"version": "10.35", "flags": 0, "createdate": "2020-09-08T00:00:00", "modifydate": "2020-09-08T15:48:06", "lines": 36381, "newlines": 36381, "modlines": 0, "user": "PCR1035A"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "TESTLIB": {"ttr": 64007, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\n#\\x000\\x01 %/\\x01 %/\\x15I\\\\P\\\\P\\x00\\x00\\xd7\\xc3\\xd9\\xf1\\xf0\\xf3\\xf5\\xc1@@'", "ispf": {"version": "10.35", "flags": 0, "createdate": "2020-09-08T00:00:00", "modifydate": "2020-09-08T15:49:30", "lines": 23632, "newlines": 23632, "modlines": 0, "user": "PCR1035A"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT939/FILE939.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT939", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}