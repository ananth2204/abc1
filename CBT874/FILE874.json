{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220013150000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 3585946, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 18, "INMDSNAM": "CBT.V500.FILE874.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 3585946, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 3585946, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE874.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x009\\n'", "DS1TRBAL": "b'w\\x88'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x07y\\x00\\x00\\x07|\\x00\\x0c\\x00:'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x00\\x00W\\x01 \\x17O\\x01 \\x17O\\x10\\x12\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf5\\xf0\\xf0@@@'", "ispf": {"version": "05.00", "flags": 0, "createdate": "2020-06-22T00:00:00", "modifydate": "2020-06-22T10:12:57", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-500"}, "text": "REGULAR CBT TAPE - VERSION 500    FILE:  874\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT500.FILE874\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    6160    PO\n\n   PDS117I 67 MEMBERS COUNTED; CUMULATIVE SIZE IS 33,687 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   06/22/20    10:12:56    UTC-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$INDEX": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\t\\x007\\x01\\x12 \\x8f\\x01\\x19\\x12\\x0f #\\x00C\\x004\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.09", "flags": 0, "createdate": "2012-07-26T00:00:00", "modifydate": "2019-04-30T20:23:37", "lines": 67, "newlines": 52, "modlines": 0, "user": "SBGOLOB"}, "text": "NAME      VER.MOD    CREATED       LAST MODIFIED  SIZE XSTAT ID\n $$INDEX   01.07  2012/07/26 2016/05/02 11:51:11    51     SBGOLOB\n $HEL      46.01  2016/01/14 2016/01/14 17:00:21  5849     LOADLIB\n ABEND     05.00  1986/07/31 1993/02/17 14:30:00  2307     FILE134\n ADDTO     01.00  2000/02/27 2000/02/27 15:37:03    32     FILE452\n ADIS      01.02  2008/05/15 2008/05/15  1:53:00    26     FILE185\n BLKDISK   01.02  2004/12/30 2012/07/26 14:31:04   334     FILE296\n BLKSPTRK  01.00  1999/05/06 1999/05/06  8:32:34   195     FILE199\n BURN      01.02  2012/11/01 2012/11/01 12:54:48    96     FILE878\n CATL      01.00  2000/02/27 2000/02/27 15:37:05    36     FILE452\n CDSCB     01.01  1998/11/24 1999/07/13  0:19:00    58     FILE134\n CINMX     01.05  2005/12/12 2006/01/02 14:00:53    61     FILE731\n CNCLPG    01.19  2011/11/06 2016/01/15  2:35:03   110     FILE826\n COPYFILE  01.17  1982/05/22 2005/11/20 10:39:41   289     FILE229\n COPYMODS  00.87  2012/06/07 2012/06/10 17:06:01   487     FILE229\n CPSCB     01.03  1981/11/09 2005/04/19 10:53:33    49     FILE300\n DSAT      01.00  2012/07/26 2012/07/26 14:25:00   278     FILE296\n DSMF      01.00  2019/04/23 2019/04/23 16:32:30    15     FILE300\n DSPACE    01.01  2003/05/27 2003/05/27 10:49:00    36     FILE633\n DTEST     01.03  2008/06/03 2019/04/24  2:23:43    38     FILE731\n DVAT      01.04  2008/06/03 2019/04/24  2:39:21    35     FILE731\n DVOL      01.00  2003/06/29 2003/06/29 10:24:39    56     FILE296\n EESCB     01.03  2005/12/12 2006/01/02 14:03:11    24     FILE731\n FSH       ALIAS\n FSHELP    48.03  1986/08/06 2018/08/19 17:34:50   920     FILE134\n HEL       ALIAS\n ICH       01.55  2004/09/15 2010/01/16 16:46:10   327     FILE819\n IEBANTP   01.00  1989/04/12 1989/04/12 11:59:00   238     FILE455\n IKJEEPTR  01.12  2005/11/28 2016/01/15  1:51:57    71     FILE731\n INMXD     01.06  2005/12/12 2019/04/24  9:17:48    46     FILE731\n JCLSET    01.01  2009/07/06 2009/07/06 10:33:42    81     FILE452\n KMBAPFLB  01.00  2019/04/30 2019/04/30 20:06:59    23     FILE566\n KONCAT    01.00  1998/05/22 1998/05/22 13:15:00    44     FILE355\n LDS       01.00  2000/02/27 2000/02/27 15:37:35    19     FILE452\n LOCATE    01.12  2015/01/05 2015/01/05 15:27:06    27     FILE612\n LOGOPTS   01.09  1981/11/09 2016/05/02 11:49:35   110     FILE731\n LPSCB     01.04  1981/11/09 2005/04/19 11:00:00    17     FILE300\n LWATMGR   01.00  2008/11/21 2008/11/21 21:10:59    63     FILE797\n PDS86     86.17  1997/09/25 2019/04/05 14:21:09 10078     FILE182\n RELEASE   01.00  2007/04/04 2007/04/04 23:20:14    23     FILE296\n REV       ALIAS\n REVED     ALIAS\n REVEDIT   48.03  2004/03/13 2018/08/19 17:33:43  1834     FILE134\n REVIEW    48.03  1984/08/24 2018/08/19 17:35:32  2228     FILE134\n REVLEV    48.05  2010/03/15 2019/01/27 23:32:38   767     FILE134\n REVOUT    48.03  2009/01/18 2018/08/19 17:28:03   454     FILE134\n REVPDS    48.05  2004/05/02 2019/01/27 23:12:38   806     FILE134\n REVPDSE   48.05  2004/05/09 2019/01/27 23:13:40   558     FILE134\n REVTSO    48.03  2010/03/15 2018/08/19 17:26:30   312     FILE134\n REVUNIX   48.05  2004/05/14 2019/01/27 23:15:03   577     FILE134\n REVVSAM   ALIAS\n RFE       48.03  2010/03/15 2018/08/19 17:32:35   436     FILE134\n RGENR     01.02  2008/06/03 2019/04/23 21:02:16    35     FILE836\n RPFHELP   01.71  2019/04/23 2019/04/23 15:14:57   808     FILE415\n RXJCL     01.00  2007/03/15 2007/03/15 15:34:06   348     FILE756\n STEPLIB   01.03  2011/05/23 2016/05/02 11:35:45   118     FILE452\n TSUB      01.01  2019/04/24 2019/04/24  9:40:26   368     FILE797\n TSUBQUIK  01.38  2009/12/10 2019/04/24  9:52:30    27     FILE797\n UCBDASD   01.02  2012/12/16 2012/12/16 12:23:11    42     FILE731\n UKEYCSA   01.01  2008/06/03 2019/04/24  9:54:44    26     FILE264\n ULUDASD   01.03  2012/12/16 2012/12/16 12:23:22    45     FILE873\n ULUTAPE   01.07  2012/11/01 2012/12/16 12:34:27    78     FILE873\n USERINFO  01.02  2012/08/01 2012/08/01 13:44:03    59     FILE452\n VSAMANAL  00.87  1984/03/25 2012/12/24 21:59:16   267     FILE294\n WHEREIS   01.00  2019/04/23 2019/04/23 15:50:51    10     FILE836\n WHOSGOT   01.00  2000/02/27 2000/02/27 15:37:00    17     FILE452\n XEQ       01.00  2007/04/04 2007/04/04 23:26:23    35     FILE296\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$HEL": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'.\\x01\\x00!\\x01\\x16\\x01O\\x01\\x16\\x01O\\x17\\x00\\x16\\xd9\\x16\\xd9\\x00\\x00\\xd3\\xd6\\xc1\\xc4\\xd3\\xc9\\xc2@@@'", "ispf": {"version": "46.01", "flags": 0, "createdate": "2016-01-14T00:00:00", "modifydate": "2016-01-14T17:00:21", "lines": 5849, "newlines": 5849, "modlines": 0, "user": "LOADLIB"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "@FILE874": {"ttr": 2823, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x00\\x00P\\x01 \\x17O\\x01 \\x17O\\x10\\x12\\x00p\\x00p\\x00\\x00\\xc3\\xc2\\xe3`\\xf5\\xf0\\xf0@@@'", "ispf": {"version": "05.00", "flags": 0, "createdate": "2020-06-22T00:00:00", "modifydate": "2020-06-22T10:12:50", "lines": 112, "newlines": 112, "modlines": 0, "user": "CBT-500"}, "text": "//***FILE 874 is from Sam Golob, and contains HELP members for      *   FILE 874\n//*           many utilities on the CBT Tape which he, himself,     *   FILE 874\n//*           finds useful.                                         *   FILE 874\n//*                                                                 *   FILE 874\n//*           Included is a member called $HEL, which is an XMIT    *   FILE 874\n//*           of a load library containing the REVIEW TSO command   *   FILE 874\n//*           from Greg Price (File 134, 135) whose aliases called  *   FILE 874\n//*           HEL and FSH and FSHELP (full screen help) can be      *   FILE 874\n//*           used to browse these members in full screen mode.     *   FILE 874\n//*           (You can scroll inside them, up and down, even from   *   FILE 874\n//*           TSO READY mode.)                                      *   FILE 874\n//*                                                                 *   FILE 874\n//*           Concatenate this file (the pds for CBT File 874)      *   FILE 874\n//*           into the SYSHELP concatenation for your TSO session.  *   FILE 874\n//*                                                                 *   FILE 874\n//*           You can also use this file to decide which new tools  *   FILE 874\n//*           from the CBT Tape that you might like to install and  *   FILE 874\n//*           use for yourself.  The HELP members can show you      *   FILE 874\n//*           what each tool does, and you might want to have that  *   FILE 874\n//*           capability available if needed.                       *   FILE 874\n//*                                                                 *   FILE 874\n//*           When this pds is concatenated with your SYSHELP       *   FILE 874\n//*           DD name, you can simply say HELP member, and you      *   FILE 874\n//*           will get the help.  If the load modules for REVIEW,   *   FILE 874\n//*           FSH, FSHELP, and HEL are installed, you can say       *   FILE 874\n//*           (for example)   HEL member   or   FSH member          *   FILE 874\n//*           and you will see the help member in full screen mode, *   FILE 874\n//*           scrollable up and down.                               *   FILE 874\n//*                                                                 *   FILE 874\n//*           The ISPF statistics for each member of this pds       *   FILE 874\n//*           will tell you which CBT Tape file, that program       *   FILE 874\n//*           (described by the HELP member) came from.             *   FILE 874\n//*                                                                 *   FILE 874\n//*           email:   sbgolob@cbttape.org                          *   FILE 874\n//*                                                                 *   FILE 874\n//*        Some members of this PDS:                                *   FILE 874\n//*                                                                 *   FILE 874\n//*      NAME     VER.MOD     LAST MODIFIED    SIZE   ID            *   FILE 874\n//*      ----     -------   -----------------  ----   --            *   FILE 874\n//*      $$$#DATE  04.98  2019/06/20 11:16:41    12  CBT-498        *   FILE 874\n//*      $$INDEX   01.09  2019/04/30 20:23:37    67  SBGOLOB        *   FILE 874\n//*      $HEL      46.01  2016/01/14 17:00:21  5849  LOADLIB        *   FILE 874\n//*      @FILE874  04.98  2019/06/20 11:16:34   107  CBT-498        *   FILE 874\n//*      ABEND     05.00  1993/02/17 14:30:00  2307  FILE134        *   FILE 874\n//*      ADDTO     01.00  2000/02/27 15:37:03    32  FILE452        *   FILE 874\n//*      ADIS      01.02  2008/05/15  1:53:00    26  FILE185        *   FILE 874\n//*      APFLIST   01.04  2019/06/02 11:46:13    44  FILE566        *   FILE 874\n//*      BLKDISK   01.02  2012/07/26 14:31:04   334  FILE296        *   FILE 874\n//*      BLKSPTRK  01.00  1999/05/06  8:32:34   195  FILE199        *   FILE 874\n//*      BURN      01.02  2012/11/01 12:54:48    96  FILE878        *   FILE 874\n//*      CATL      01.00  2000/02/27 15:37:05    36  FILE452        *   FILE 874\n//*      CCAT      01.03  2019/01/27 17:41:47   129  FILE535        *   FILE 874\n//*      CDSCB     01.01  1999/07/13  0:19:00    58  FILE134        *   FILE 874\n//*      CINMX     01.05  2006/01/02 14:00:53    61  FILE731        *   FILE 874\n//*      CNCLPG    01.10  2019/05/21  0:00:46   350  FILE826        *   FILE 874\n//*      COPYFILE  01.17  2005/11/20 10:39:41   289  FILE229        *   FILE 874\n//*      COPYMODS  00.87  2012/06/10 17:06:01   487  FILE229        *   FILE 874\n//*      CPSCB     01.03  2005/04/19 10:53:33    49  FILE300        *   FILE 874\n//*      DSAT      01.00  2012/07/26 14:25:00   278  FILE296        *   FILE 874\n//*      DSMF      01.00  2019/04/23 16:32:30    15  FILE300        *   FILE 874\n//*      DSPACE    01.01  2003/05/27 10:49:00    36  FILE633        *   FILE 874\n//*      DTEST     01.03  2019/04/24  2:23:43    38  FILE731        *   FILE 874\n//*      DVAT      01.04  2019/04/24  2:39:21    35  FILE731        *   FILE 874\n//*      DVOL      01.00  2003/06/29 10:24:39    56  FILE296        *   FILE 874\n//*      EESCB     01.03  2006/01/02 14:03:11    24  FILE731        *   FILE 874\n//*      FSH       ALIAS                                            *   FILE 874\n//*      FSHELP    48.03  2018/08/19 17:34:50   920  FILE134        *   FILE 874\n//*      HEL       ALIAS                                            *   FILE 874\n//*      ICH       01.55  2010/01/16 16:46:10   327  FILE819        *   FILE 874\n//*      IEBANTP   01.00  1989/04/12 11:59:00   238  FILE455        *   FILE 874\n//*      IKJEEPTR  01.12  2016/01/15  1:51:57    71  FILE731        *   FILE 874\n//*      INMXD     01.06  2019/04/24  9:17:48    46  FILE731        *   FILE 874\n//*      JCLSET    01.01  2009/07/06 10:33:42    81  FILE452        *   FILE 874\n//*      KMBAPFLB  01.00  2019/04/30 20:06:59    23  FILE566        *   FILE 874\n//*      KONCAT    01.00  1998/05/22 13:15:00    44  FILE355        *   FILE 874\n//*      LDS       01.00  2000/02/27 15:37:35    19  FILE452        *   FILE 874\n//*      LOADTEST  01.06  2019/06/20 11:14:50   250  FILE731        *   FILE 874\n//*      LOCATE    01.12  2015/01/05 15:27:06    27  FILE612        *   FILE 874\n//*      LOGOPTS   01.09  2016/05/02 11:49:35   110  FILE731        *   FILE 874\n//*      LPSCB     01.04  2005/04/19 11:00:00    17  FILE300        *   FILE 874\n//*      LWATMGR   01.00  2008/11/21 21:10:59    63  FILE797        *   FILE 874\n//*      PDS86     86.17  2019/04/05 14:21:09 10078  FILE182        *   FILE 874\n//*      PGLITE    01.26  2019/07/22 14:23:56    73  FILE182        *   FILE 874\n//*      RELEASE   01.00  2007/04/04 23:20:14    23  FILE296        *   FILE 874\n//*      REV       ALIAS                                            *   FILE 874\n//*      REVED     ALIAS                                            *   FILE 874\n//*      REVEDIT   48.03  2018/08/19 17:33:43  1834  FILE134        *   FILE 874\n//*      REVIEW    48.03  2018/08/19 17:35:32  2228  FILE134        *   FILE 874\n//*      REVLEV    48.05  2019/01/27 23:32:38   767  FILE134        *   FILE 874\n//*      REVOUT    48.03  2018/08/19 17:28:03   454  FILE134        *   FILE 874\n//*      REVPDS    48.05  2019/01/27 23:12:38   806  FILE134        *   FILE 874\n//*      REVPDSE   48.05  2019/01/27 23:13:40   558  FILE134        *   FILE 874\n//*      REVTSO    48.03  2018/08/19 17:26:30   312  FILE134        *   FILE 874\n//*      REVUNIX   48.05  2019/01/27 23:15:03   577  FILE134        *   FILE 874\n//*      REVVSAM   ALIAS                                            *   FILE 874\n//*      RFE       48.03  2018/08/19 17:32:35   436  FILE134        *   FILE 874\n//*      RGENR     01.02  2019/04/23 21:02:16    35  FILE836        *   FILE 874\n//*      RPFHELP   01.71  2019/04/23 15:14:57   808  FILE415        *   FILE 874\n//*      RXJCL     01.00  2007/03/15 15:34:06   348  FILE756        *   FILE 874\n//*      STEPLIB   01.03  2016/05/02 11:35:45   118  FILE452        *   FILE 874\n//*      TSUB      01.01  2019/04/24  9:40:26   368  FILE797        *   FILE 874\n//*      TSUBQUIK  01.38  2019/04/24  9:52:30    27  FILE797        *   FILE 874\n//*      UCBDASD   01.03  2019/05/20 21:35:25    43  FILE731        *   FILE 874\n//*      UKEYCSA   01.01  2019/04/24  9:54:44    26  FILE264        *   FILE 874\n//*      ULUDASD   01.04  2019/05/20 21:33:29    46  FILE797        *   FILE 874\n//*      ULUTAPE   01.07  2012/12/16 12:34:27    78  FILE873        *   FILE 874\n//*      USERINFO  01.02  2012/08/01 13:44:03    59  FILE452        *   FILE 874\n//*      VSAMANAL  00.88  2019/05/21  2:06:37   269  FILE294        *   FILE 874\n//*      WHEREIS   01.00  2019/04/23 15:50:51    10  FILE836        *   FILE 874\n//*      WHOSGOT   01.00  2000/02/27 15:37:00    17  FILE452        *   FILE 874\n//*      XEQ       01.00  2007/04/04 23:26:23    35  FILE296        *   FILE 874\n//*                                                                 *   FILE 874\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ABEND": {"ttr": 2826, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x00\\x00\\x00\\x00\\x86!/\\x00\\x93\\x04\\x8f\\x140\\t\\x03\\x05\\xef\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf3\\xf4@@@'", "ispf": {"version": "05.00", "flags": 0, "createdate": "1986-07-31T00:00:00", "modifydate": "1993-02-17T14:30:00", "lines": 2307, "newlines": 1519, "modlines": 0, "user": "FILE134"}, "text": ")F FUNCTION -\n   ABEND IS NOT A COMMAND, BUT IS A LIST OF SOME OF THE MORE COMMON\n   ABEND CODES.  THE DESCRIPTIONS PROVIDED HERE ARE NOT CLAIMED TO\n   EXPLAIN ALL POSSIBLE CAUSES OF THE PROBLEM.  IF YOU REQUIRE MORE\n   INFORMATION, REFER TO THE OS/VS MESSAGE LIBRARY PUBLICATIONS:\n     GC38-1008  VS2 SYSTEM CODES\n     GC38-1002  VS2 SYSTEM MESSAGES\n     GC26-3920  VS2 MVS UTILITIES MESSAGES\n     GC28-1157  MVS/XA MESSAGE LIBRARY: SYSTEM CODES\n     GC28-1376  MVS/XA MESSAGE LIBRARY: SYSTEM MESSAGES VOLUME 1\n     GC28-1377  MVS/XA MESSAGE LIBRARY: SYSTEM MESSAGES VOLUME 2\n     GC28-1815  MVS/ESA MESSAGE LIBRARY: SYSTEM CODES\n     GC28-1812  MVS/ESA MESSAGE LIBRARY: SYSTEM MESSAGES VOLUME 1\n     GC28-1813  MVS/ESA MESSAGE LIBRARY: SYSTEM MESSAGES VOLUME 2\n     GC28-1664  MVS/ESA SYSTEM CODES\n     GC28-1656  MVS/ESA SYSTEM MESSAGES, VOLUME 1  ADY-IDC\n     GC28-1657  MVS/ESA SYSTEM MESSAGES, VOLUME 2  IEA-IEE\n     GC28-1658  MVS/ESA SYSTEM MESSAGES, VOLUME 3  IEF-IXP\n)X SYNTAX -\n   HELP ABEND OPERAND(ABEND-CODE)\n\n   REQUIRED - ABEND\n   DEFAULTS - NONE - IF NO OPERAND SPECIFIED, ALL ABEND CODES LISTED.\n     NOTE --- BOTH THE SYSTEM AND YOUR PROGRAM CAN ISSUE ABEND CODES.\n              IN YOUR REQUEST YOU MUST INDICATE THE SOURCE OF THE CODE\n              BY THE FIRST CHARACTER: S FOR SYSTEM, U FOR USER.\n              SYSTEM CODES ARE ALWAYS 3 CHARACTERS (KEEP LEADING ZEROS)\n              USER CODES ARE 1 TO 4 CHARACTERS (DROP LEADING ZEROS)\n   EXAMPLES - HELP ABEND OPERAND(S013)     HELP ABEND OPERAND(U20)\n)O OPERANDS\n))S001 - AN INPUT/OUTPUT ERROR CONDITION WAS ENCOUNTERED DURING\n     EXECUTION OF A CHECK/GET/PUT MACRO INSTRUCTION.  EITHER NO SYNAD\n     ROUTINE WAS PROVIDED TO HANDLE THE ERROR, OR DCB=EROPT=ABE WAS\n     SPECIFIED OR DEFAULTED.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S001 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S001-RC)**\n   --POSSIBLE CAUSE--\n     INPUT RECORD DESCRIBED INCORRECTLY, LENGTH ERROR\n     TRIED TO READ AFTER ENCOUNTERING END OF FILE\n     RECFM V IS INCOMPATIBLE WITH TRTCH ET\n     TRIED TO WRITE ON AN INPUT FILE\n     READ INTO A TABLE WHOSE SUBSCRIPT WAS ZERO\n     INCORRECT LABEL PARAMETER\n     TRTCH PARM WAS WRONG\n     TAPE BEING READ IN WRONG DENSITY\n     DIRECTORY OF PDS WAS OVERWRITTEN\n     NSL LABEL HAD INCORRECT DSNAME, OPERATOR CANCELLED\n     TRUE I/O FAILURE, UCB SHOW REDUNDANCY\n     HARDWARE ERROR - BAD TAPE OR TAPE DRIVE\n     SECONDARY SPACE ALLOCATION FOR DASD OUTPUT FILE TOO SMALL\n        (SEE SB37)\n     COBOL - INCORRECT USE OF BLOCK CONTAINS CLAUSE\n           - HAD RECORDING MODE F WHEN GENERATED, BUT NOT WHEN READ\n))S001-01 - AN I/O ERROR OCCURRED DURING BDAM CREATE, BSAM, BISAM,\n     QSAM, OR BDAM AND NO SYNAD EXIT WAS SPECIFIED BY THE USER.\n))S001-02 - AN ERROR WAS ENCOUNTERED WHILE ATTEMPTING TO CLOSE\n     THE DATASET.\n))S001-03 - FOR QSAM, AN ERROR WAS ENCOUNTERED THAT COULD NOT BE\n     ACCEPTED.\n))S001-04 - FOR QSAM, ABE OR AN INVALID VALUE FOR EROPT PARAMETER IN\n     THE DCB AND/OR NO ERROR HANDLING (SYNAD) EXIT WAS SPECIFIED.\n))S001-05 - FOR QSAM, A GET WAS ISSUED AFTER END-OF-FILE.\n))S002 - RECORD IS GREATER THAN 32,768 BYTES, EXCEEDS MAXIMUM TRACK\n         LENGTH OR STATED BLOCKSIZE, COULD NOT BE CONTAINED IN ONE\n         EXTENT, OR TOO MANY TRACKS SPECIFIED FOR CYLINDER OVERFLOW.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S002 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S002-RC)**\n   --POSSIBLE CAUSE--\n     DCB HAD THE WRONG BLOCK SIZE\n     IEHMOVE - ATTEMPT TO RENAME DATA SET WHEN NEW NAME ALREADY EXISTS\n     WRONG RECORD FORMAT SPECIFIED IN JCL\n))S002-04 - AN INVALID RECORD WAS ENCOUNTERED ON A GET OPERATION.\n     THE LENGTH FIELD OF A RECORD DESCRIPTOR WORD (RDW) FOR A VARIABLE\n     LENGTH RECORD SPECIFIES A VALUE LESS THAN 4.\n))S002-08 - AN INVALID RECORD WAS ENCOUNTERED ON A PUT OR WRITE\n     OPERATION.  THE RECORD OR BLOCK LENGTH PLUS THE KEY LENGTH AND\n     REQUIRED OVERHEAD ADD UP TO MORE THAN 32,767 BYTES.\n))S002-0C - AN INVALID RECORD WAS ENCOUNTERED ON A PUT OR WRITE\n     OPERATION.  THE RECORD OR BLOCK LENGTH PLUS THE KEY LENGTH AND\n     REQUIRED OVERHEAD IS GREATER THAN THE DASD TRACK CAPACITY.\n))S002-10 - AN INVALID RECORD WAS ENCOUNTERED ON A PUT OPERATION;\n     THE DATASET USES THE TRACK OVERFLOW FEATURE.  THE RDW FOR A\n     VARIABLE LENGTH RECORD SPECIFIES A LENGTH GREATER THAN 32,752.\n))S002-14 - AN INVALID RECORD WAS ENCOUNTERED ON A PUT OR WRITE\n     OPERATION.  THE RECORD LENGTH IS GREATER THAN THE BLOCKSIZE\n     SPECIFIED IN THE DCB.\n))S002-18 - AN INVALID RECORD WAS ENCOUNTERED ON A PUT OPERATION;\n     THE DATASET USES THE VARIABLE RECORD FORMAT.  THE LENGTH VALUE OF\n     THE RDW IS EITHER: LESS THAN 4, GREATER THAN 32,767, GREATER THAN\n     THE BLOCKSIZE SPECIFIED IN THE DCB, OR LESS THAN 5 IF ASA CONTROL\n     CHARACTERS ARE BEING USED.\n))S002-1C - THE ERROR OCCURRED DURING THE CREATION OF A DIRECT DATASET.\n     A WRITE MACRO WAS ISSUED FOR A RECORD LARGER THAN THE TRACK\n     CAPACITY, AND THE RECORD FORMAT DOES NOT USE THE TRACK OVERFLOW\n     FEATURE.\n))S002-20 - THE ERROR OCCURRED DURING THE CREATION OF A DIRECT DATASET.\n     A WRITE MACRO WAS ISSUED CAUSING A SECONDARY EXTENT TO BE OBTAINED.\n     THE BLOCK WILL NOT FIT ON THE AMOUNT OF SPACE ALLOCATED FOR THE\n     SECONDARY EXTENT.\n))S002-24 - THE ERROR OCCURRED DURING THE CREATION OF A DIRECT DATASET.\n     A WRITE MACRO WAS ISSUED TO WRITE OUT A BLOCK LARGER THAN THE\n     PRIMARY EXTENT ON THE PREALLOCATED DATASET.  THIS COULD ALSO OCCUR\n     IF ALLOCATION OF THE PRIMARY EXTENT WAS NON-CONTIGUOUS AND ANY\n     OF THE SECONDARY EXTENTS WERE SMALLER THAN THE BLOCK.\n))S002-28 - THE ERROR OCCURRED DURING THE CREATION OF A DIRECT DATASET.\n     DURING THE EXECUTION OF OPEN IT WAS DETECTED THAT THE BLOCKSIZE\n     WAS LARGER THAN THE PRIMARY EXTENT.\n))S002-2C - THE ERROR OCCURRED WHILE OPENING AN ISAM DATASET.\n     TOO MANY TRACKS WERE SPECIFIED FOR CYLINDER OVERFLOW.\n))S002-30 - ONE OF THE FOLLOWING IS TRUE:\n     - A READ WAS ISSUED BUT THE LENGTH TO BE READ WAS ZERO.\n     - A QSAM PUT WITH MOVE MODE WAS ISSUED FOR RECFM=F, FB OR U\n       BUT DCBLRECL CONTAINED A NON-POSITIVE VALUE.\n))S002-34 - A READ MACRO WAS ISSUED FOR AN OUTPUT-ONLY DASD DATA SET.\n))S002-3C - PDSE MEMBER CREATION WAS PREVENTED BECAUSE THE PDSE\n     ALREADY HAD THE MAXIMUM NUMBER OF MEMBERS (2**19 - 2).\n))S002-50 - SERIALIZATION OF AN INTERNAL SAM CONTROL BLOCK (SACB)\n     USED FOPR PROCESSING HAS BEEN VIOLATED.\n))S002-54 - DEBCHK FAILURE DURING PDSE PROCESSING.\n))S002-58 - AN INTERNAL SAM CONTROL BLOCK (SACB) USED FOR PROCESSING\n     PDSE REQUESTS IS INCORRECT.\n))S002-5C - AN INTERNAL SAM CONTROL BLOCK (FRQ) USED FOR QUEUING\n     PDSE REQUESTS IS INCORRECT.\n))S002-60 - NON-ZERO KEYLENGTH SPECIFIED FOR OUTPUT PDSE MEMBER.\n))S002-64 - FOR BSAM, THE READ OR WRITE REQUEST COULD NOT BE ACCEPTED\n     BECAUSE THE VALUE OF NCP INT THE DCB HAD ALREADY BEEN REACHED.\n))S002-68 - INCORRECT BLOCKSIZE SPECIFIED.\n))S002-6C - UNABLE TO CREATE A PDSE MEMBER.\n))S002-70 - UNABLE TO UPDATE AN INTERNAL SAM CONTROL BLOCK (PACB)\n     USED FOR PDSE PROCESSING WITH INFORMATION CONCERNING THE MEMBER\n     BEING ACCESSED.\n))S002-74 - AN INTERNAL SAM CONTROL BLOCK (PACB) USED FOR STORING\n     PDSE DIRECTORY AND MEMBER INFORMATION IS INCORRECT.\n))S002-78 - ERROR RETURN FROM IGWFMPCR WHEN ATTEMPTING TO GIVE CONTROL\n     TO A ROUTINE TO PROCESS PDSE REQUESTS.\n))S002-7C - POINT DETECTED THAT INFORMATION CONCERNING THE MEMBER\n     BEING ACCESSED IS NOT FOUND IN THE PACB.\n))S002-80 - POINT DETECTED AN ERROR WHILE ATTEMPTING TO SYNCHRONIZE\n     DATA ON OUTPUT.\n))S002-84 - POINT DETECTED AN ERROR WHILE ATTEMPTING TO RECONNECT TO\n     A PDSE MEMBER FOR HOLD.\n))S002-88 - POINT DETECTED AN ERROR WHILE ATTEMPTING TO RECONNECT TO\n     A PDSE MEMBER FOR I/O.\n))S002-8C - POINT DETECTED AN ERROR WHILE ATTEMPTING TO DISCONNECT\n     FROM A PDSE MEMBER.\n))S002-90 - POINT DETECTED AN ERROR WHILE ATTEMPTING TO CONNECT TO\n     A PDSE MEMBER.\n))S002-94 - INCORRECT ATTEMPT TO CREATE A PDSE MEMBER SINCE THE\n     MAXIMUM NUMBER OF MEMBERS HAVE ALREADY BEEN CREATED.\n))S002-98 - UNABLE TO COMPLETE A WRITE REQUEST ISSUED WITHIN A\n     PDSE MEMBER.\n))S002-9C - INCORRECT UPDATE WRITE DETECTED.  ALL OUTSTANDING READS\n     HAD NOT BEEN CHECKED PRIOR TO THE WRITE.\n))S002-A0 - INCORRECT ATTEMPT TO ACCESS A PDSE DIRECTORY.  EITHER:\n     - WRITE ATTEMPTED TO THE DIRECTORY OF A PDSE.\n     - READ ATTEMPTED TO THE DIRECTORY OF A PDSE AND EITHER THE\n       RECFM WAS NOT F WITH BLKSIZE >= 256    ==OR==\n       RECFM WAS NOT U WITH BLKSIZE >= 256.\n))S002-A4 - UNABLE TO COMPLETE THE READ AGAINST THE PDSE DIRECTORY\n     DUE TO AN ERROR RETURN CODE FROM AN SMS SERVICE USED TO OBTAIN\n     DIRECTORY INFORMATION.\n))S002-A8 - MAXIMUM NUMBER OF RECORDS IN MEMBER HAS BEEN EXCEEDED.\n))S002-AC - BAD BUFFER FORMAT DETECTED FOR VARIABLE LENGTH RECORDS.\n     EITHER:\n     - RDW LENGTH IS LESS THAN 4.\n     - LENGTH OF SPANNED RECORD IS GREATER THAN 32760.\n     - THE SUM OF THE LENGTHS IN THE RDWS PLUS 4 DOES NOT EQUAL THE\n       LENGTH SPECIFIED IN THE BDW.\n     - RECFM DOES NOT SPECIFY BLOCKED BUT MORE THAN 1 RDW IN BUFFER.\n))S002-B0 - EITHER RECFM=F AND DCBBLKSI DOES NOT EQUAL DCBLRECL,\n     OR RECFM=FB AND DCBBLKSI IS NOT A MULTIPLE OF DCBLRECL.\n))S003 - THE ERROR OCCURED DURING END-OF-BLOCK PROCESSING USING EITHER\n         BSAM OR QSAM.  THE ERROR OCURRED BECAUSE THE I/O MACRO\n         INSTRUCTIONS FOR A 3525-ASSOCIATED DATA SET WERE NOT EXECUTED\n         IN THE PROPER SEQUENCE.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S003 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S003-RC)**\n))S003-01 - THE ERROR WAS A READ SEQUENCE ERROR.\n))S003-02 - THE ERROR WAS A PUNCH SEQUENCE ERROR.\n))S003-03 - THE ERROR WAS A PRINT SEQUENCE ERROR.\n))S004 - THE ERROR OCCURED DURING OPEN PROCESSING USING EITHER BSAM OR\n         QSAM BECAUSE A CONFLICTING OR INVALID DCB PARAMETER (FUNC OR\n         RELATED PARAMETER) IS SPECIFIED.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S004 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S004-RC)**\n))S004-01 - INVALID DCB FUNC PARAMETER SPECIFIED.\n))S004-02 - INVALID COMBINATION OF DCB FUNC PARAMETER AND CNTRL MACRO\n            SPECIFIED.\n))S004-03 - CONFLICTING ACCESS METHODS SPECIFIED.\n))S004-04 - INVALID DCB SPECIFIED FOR 3505 OR 3525.\n))S004-05 - INVALID FORMAT CARD OR AN INVALID DEVICE SPECIFIED WITH\n            OPTICAL MARK READ (OMR).\n))S004-06 - DATA PROTECTION IMAGE NOT FOUND IN THE SYS1.IMAGELIB\n            DATA SET, VOLUME CONTAINING SYS1.IMAGELIB NOT MOUNTED,\n            OR SYS1.IMAGELIB NOT CATALOGED.\n))S005 - THE ERROR OCCURRED BECAUSE OF AN INVALID DECB DURING READ\n         PROCESSING USING BSAM.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S005 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S005-RC)**\n))S005-04 - A REQUIRED ADDRESS WAS NOT SPECIFIED IN THE DECB.  THIS\n            CAN BE EITHER THE HEADER ADDRESS AND/OR THE AREA ADDRESS.\n))S005-08 - THE RBL TYPE OF READ WAS NOT USED FOR THE 3886.\n))S006 - THE PROGRAM HAD AN INCORRECT AUTHORIZATION TO RUN A 1419.\n))S008 - THE ERROR OCCURRED DURING EXECUTION OF A SYNAD ROUTINE.  THE\n         ROUTINE WAS GIVEN CONTROL FOLLOWING EXECUTION OF A BSAM CHECK\n         MACRO INSTRUCTION.\n))S013 - CONFLICTING OR UNSUPPORTED PARAMETERS IN DCB; MEMBER NAME\n         SPECIFIED IN DD NOT FOUND; NO DIRECTORY ALLOCATION\n         SUBPARAMETER IN DD.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S013 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S013-RC)**\n   --POSSIBLE CAUSE--\n     DCB PARAMETERS CONFLICT, NO BLKSIZE OR NOT VALID MULTIPLE OF LRECL\n     MISSING OR MISPLACED SYSIN DD CARD\n     PARTITIONED DATA SET MEMBER NOT FOUND\n     MERGE - SORTIN01 DOES NOT CONTAIN THE MAXIMUM BLOCKSIZE\n     JCL - TRIED TO CREATE A PDS WITHOUT ALLOCATING DIRECTORY BLOCKS\n))S013-04 - AMERICAN NATIONAL STANDARD LABELS WERE SPECIFIED IN THE\n     LABEL PARAMETER OF THE DD STATEMENT, BUT ARE NOT SUPPORTED BY\n     THE SYSTEM. CORRECT THE LABEL PARAMETER.\n          - OPTCD=Q WAS SPECIFIED BUT IS NOT SUPPORTED BY THE SYSTEM.\n     CORRECT THE DCB OPTCD OPTION.\n))S013-08 - AMERICAN NATIONAL STANDARD LABELS WERE SPECIFIED IN THE\n     LABEL PARAMETER OF THE DD STATEMENT, BUT THE UNIT PARAMETER\n     SPECIFIED A 7-TRACK TAPE DRIVE.  ANSI LABELS A VALID ONLY FOR\n     9-TRACK UNITS.\n))S013-0C - A BUFFER LENGTH OF 0 WAS SPECIFIED FOR A BDAM DATASET\n     FOR WHICH DYNAMIC BUFFERING WAS REQUESTED.\n))S013-10 - AN OPEN MACRO WAS ISSUED FOR A NULL DATASET AND BLKSIZE\n     AND BUFL ARE BOTH 0. SPECIFY ONE OR THE OTHER AS NON-ZERO.\n))S013-14 - AN OPEN MACRO WAS ISSUED WITH OUTPUT OR OUTIN SPECIFIED.\n     DCB SPECIFIES DSORG=PO, BUT THE DSCB INDICATES THE DATASET IS\n     NOT PARTITIONED. CHANGE DSORG TO PS, OR CREATE DATASET AS PDS.\n          - AN OPEN MACRO WAS ISSUED WITH INPUT SPECIFIED.  THE DSCB\n     INDICATES THAT DSORG=PO, BUT THE DCB SPECIFIES NEITHER DSORG=PO\n     NOR PS.\n))S013-18 - AN OPEN WAS ISSUED FOR A PARTITIONED DATASET.  THE\n     SPECIFIED MEMBER NAME WAS NOT FOUND IN THE DATASET.\n))S013-1C - AN OPEN MACRO WAS ISSUED FOR A PARTITIONED DATASET,\n     BUT AN I/O ERROR WAS ENCOUNTERED SEARCHING THE DIRECTORY.\n))S013-20 - AN OPEN MACRO WAS ISSUED FOR A SEQUENTIAL DATASET USING\n     THE QUEUED ACCESS TECHNIQUE WITH RECFM=FB, BUT BLKSIZE IS NOT\n     A MULTIPLE OF LRECL, OR FOR VARIABLE-LENGTH RECORDS, BLKSIZE\n     IS NOT 4 BYTES GREATER THAN THE LRECL.\n))S013-24 - AN OPEN WAS ISSUED WITH INPUT, INOUT, RDBACK, OR UPDAT\n     SPECIFIED, BUT THE DCB MACRF DID NOT SPECIFY EXCP, GET, OR READ.\n))S013-28 - AN OPEN MACRO WAS ISSUED WITH OUTPUT OR OUTIN SPECIFIED,\n     BUT THE DCB DID NOT SPECIFY A MACRF OF EXCP, PUT, OR WRITE.\n))S013-2C - A SEQUENTIAL DATASET USING THE QUEUED ACCESS TECHNIQUE WITH\n     EXCHANGE BUFFERING WAS OPENED FOR INPUT, BUT THE BUFFER CONTROL\n     BLOCK ADDRESS WAS 0.\n))S013-30 - A SEQUENTIAL DATASET USING THE QUEUED ACCESS TECHNIQUE WITH\n     EXCHANGE BUFFERING WAS OPENED FOR OUTPUT, BUT THE BUFFER CONTROL\n     BLOCK ADDRESS (DCBBUFCB) WAS 0.\n))S013-34 - ONE OF THE FOLLOWING WAS DETECTED:\n     - AN OPEN MACRO WAS ISSUED FOR A DATASET WITH BLKSIZE AND\n     BUFL EQUAL TO 0.  THE SYSTEM DETERMINED THAT IT HAD TO OBTAIN\n     BUFFERS BUT WAS UNABLE TO DO SO.\n     - RECFM WAS SPECIFIED WITH BOTH A AND M ATTRIBUTES.\n     - QSAM, LRECL=0 AND RECFM WAS NOT V OR VB.\n     - RECFM=V OR VB AND LRECL > (BLKSIZE-4).\n     - QSAM AND BLKSIZE=0.\n     - RECFM NOT VARIABLE OR UNDEFINED AND LRECL > BLKSIZE.\n     - BFTEK=A,LRECL=0,RECFM=VBS.\n))S013-38 - AN OPEN MACRO WAS ISSUED FOR A SEQUENTIAL DATASET ON A\n     DIRECT ACCESS DEVICE WITH TRACK OVERFLOW, BUT THE BUFFER\n     CONTROL BLOCK ADDRESS WAS ZERO.  THIS TYPE OF ERROR OFTEN\n     OCCURS IF A DCB IS SHARED BY TWO OR MORE TASKS, OR IS\n     OPENED AND CLOSED SEVERAL TIMES WITHIN ONE JOB STEP.\n))S013-3C - A SEQUENTIAL DATASET WAS OPENED FOR INPUT OR OUTPUT,\n     BUT THE BUFFER CONTROL BLOCK ADDRESS WAS 0.  THIS TYPE OF ERROR\n     OFTEN OCCURS IF A DCB IS SHARED BY TWO OR MORE TASKS, OR IS\n     OPENED AND CLOSED SEVERAL TIMES WITHIN ONE JOB STEP.\n))S013-40 - A SEQUENTIAL OR DIRECT DATASET WAS OPENED FOR INPUT,\n     BUT THE BUFFER CONTROL BLOCK ADDRESS WAS 0.\n))S013-44 - AN OPEN MACRO WAS ISSUED FOR A DATASET ON A DIRECT ACCESS\n     DEVICE FOR WHICH CHAINED SCHEDULING WAS SPECIFIED, BUT THE BUFFER\n     CONTROL BLOCK ADDRESS WAS 0.\n))S013-48 - AN OPEN MACRO WAS ISSUED FOR A SEQUENTIAL DATASET USING THE\n     QUEUED ACCESS TECHNIQUE, BUT THE BUFFER CONTROL BLOCK ADDRESS WAS\n     ZERO.\n))S013-4C - AN OPEN MACRO WAS ISSUED FOR A SEQUENTIAL DATASET USING THE\n     QUEUED ACCESS TECHNIQUE.  THE SYSTEM DETERMINED THAT A BUFFER\n     POOL EXISTED FOR THIS DATASET AND MADE THE APPROPIATE TEST SHOWN\n     BELOW WITH UNSATISFACTORY RESULTS:\n     - IF THE DATA WAS TO BE SENT DIRECTLY TO A UNIT RECORD DEVICE (NO\n       SPOOLING), THE BUFFER LENGTH VALUE IN THE BUFFER CONTROL BLOCK\n       HAD TO BE EQUAL TO OR GREATER THAN THE VALUE SPECIFIED IN THE\n       DCB FOR LOGICAL RECORD LENGTH (LRECL).\n     - OTHERWISE, THE BUFFER LENGTH VALUE IN THE BUFFER CONTROL BLOCK\n       HAD TO BE EQUAL TO OR GREATER THAN THE VALUE SPECIFIED IN THE\n       DCB FOR BLKSIZE.\n))S013-50 - AN OPEN MACRO ISSUED FOR A DATASET ALLOCATED TO A PRINTER\n     DID NOT HAVE OUTPUT SPECIFIED AS AN OPEN OPTION.\n))S013-54 - NO SECONDARY CONTROL UNIT COULD NOT BE FOUND FOR A 1419.\n))S013-58 - AN OPEN MACRO WAS ISSUED FOR A PAPER TAPE DATASET AND\n     CONCATENATION WITH UNLIKE ATTRIBUTES WAS SPECIFIED.\n))S013-5C - AN OPEN MACRO WAS ISSUED FOR A SEQUENTIAL DATASET USING THE\n     QUEUED ACCESS TECHNIQUE.  THE DATASET CONTAINED SPANNED VARIABLE\n     LENGTH RECORDS LARGER THAN 32,756 BUT GET LOCATE MODE WAS NOT USED.\n     ALTERNATIVELY, BFTEK=A WAS SPECIFIED WITH MACRF=GM OR MACRF=PM.\n))S013-60 - AN OPEN MACRO WAS ISSUED FOR A DATASET WITH A DCB\n     SPECIFYING RECFM=F, AND BLKSIZE WAS NOT EQUAL TO LRECL.  CORRECT\n     THE RECFM TO FB, OR MAKE LRECL AND BLKSIZE EQUAL.\n))S013-64 - AN OPEN MACRO WAS ISSUED FOR A NULL DATASET USING AN\n     ACCESS METHOD OTHER THAN QSAM OR BSAM. THIS IS A NO-NO.\n))S013-68 - AN OPEN WAS ISSUED FOR A DATASET WHOSE DCB SPECIFIED\n     BLKSIZE GREATER THAN 32,767, WHICH IS THE MAXIMUM ALLOWED.\n))S013-6C - AN OPEN MACRO WAS ISSUED FOR A DATASET WITH RECFM=T IN THE\n     DCB, REQUESTING TRACK OVERFLOW, BUT THE DIRECT ACCESS DEVICE\n     DOES NOT SUPPORT TRACK OVERFLOW.\n))S013-70 - AN OPEN MACRO WAS ISSUED FOR A DATASET ON MAGNETIC TAPE.\n     A CONFLICT EXISTS AMONG LABEL PARAMETERS ON THE DD STATEMENT,\n     AND DCBRECFM, DCBOPTCD, DCBBUFOF, AND DCBUSASI GIVE THE APPEARANCE\n     OF MIXED USASI AND EBCDIC ATTRIBUTES TO THE DATASET; OR OPTCD=Q\n     WAS SPECIFIED FOR A DATASET ON A DEVICE OTHER THAN MAGNETIC TAPE.\n))S013-74 - AN OPEN MACRO WAS ISSUED FOR AN OPTICAL CHARACTER READER\n     DATASET, BUT THE OPEN OPTION DID NOT SPECIFY INPUT.\n))S013-78 - AN OPEN MACRO WAS ISSUED FOR AN OPTICAL CHARACTER READER\n     DATASET. THE BUFL PARAMETER IN THE DCB WAS SPECIFIED AS ZERO.\n))S013-7C - AN OPEN MACRO WAS ISSUED FOR AN OPTICAL CHARACTER READER\n     DATASET, BUT THE LRECL PARAMETER IN THE DCB WAS ZERO.\n))S013-80 - AN OPEN MACRO WAS ISSUED FOR AN OPTICAL CHARACTER READER\n     DATASET, BUT THE BUFL WAS LESS THAN THE LRECL.\n))S013-84 - AN OPEN MACRO WAS ISSUED FOR AN OPTICAL CHARACTER READER\n     DATASET.  THE NUMBER OF BUFFERS SPECIFIED IN THE BUFFER POOL\n     CONTROL BLOCK IS NOT THE SAME AS THAT SPECIFIED IN THE DCBBUFNO.\n))S013-88 - AN OPEN MACRO WAS ISSUED FOR A TELECOMMUNICATIONS DEVICE\n     BUT THE DCBDSORG DID NOT SPECIFY TSO.\n))S013-8C - AN OPEN MACRO WAS ISSUED FOR A DIRECT ORGANIZATION DATASET\n     (BDAM) BUT THE DCBRECFM PARAMETER WAS NOT SPECIFIED.\n))S013-A4 - A DCB WAS OPENED FOR A SYSIN OR SYSOUT DATASET BUT THE\n     DSORG WAS NOT SPECIFIED AS PS.\n))S013-A8 - AN INVALID RECORD FORMAT WAS REQUESTED FOR A SYSIN OR\n     SYSOUT DATASET.  (RECFM=D, VS, OR VBS ARE INVALID FOR SYSIN)\n))S013-AC - A QSAM OPEN WAS ISSUED WITH A NON-ZERO KEYLENGTH IN THE DCB\n     WHICH IS NOT SUPPORTED.  (NOW SUPPORTED, BUT WITH INPUT ONLY.)\n))S013-B0 - AN OPEN MACRO WAS ISSUED WITH THE RDBACK OPTION FOR A DCB\n     SPECIFYING A RECORD FORMAT OF VARIABLE SPANNED RECORDS.  THESE\n     ARE CONFLICTING PARAMETERS.\n))S013-B4 - AN OPEN MACRO WAS ISSUED WITH THE INOUT/OUTIN OPTION FOR\n     A DCB SPECIFYING THE QSAM MACRF VALUES; THESE ARE CONFLICTING\n     PARAMETERS.\n))S013-B8 - AN OPEN MACRO WAS ISSUED FOR THE 3890 DOCUMENT PROCESSOR\n     AND DCBHDR WAS NOT SPECIFIED IN THE DCB.\n))S013-BC - A SYSIN OR SYSOUT DCB WAS OPENED WITH INVALID OPTIONS.\n     EITHER OPEN SPECIFIED UPDAT OR RDBACK, OR THE POINT MACRO\n     FUNCTION WAS SPECIFIED IN MACRF=RP OR WP.  REPOSITIONING OR\n     UPDATING A SPOOLED DATASET IS NOT PERMITTED.\n))S013-C0 - A SYSIN OR SYSOUT DATASET COULD NOT BE OPENED BY A JOB\n     ENTRY SUBSYSTEM.  THE FAILING DCB IS NOT OPENED, HOWEVER THE TASK\n     IS NOT TERMINATED. PROCESSING CONTINUES FOR OTHER DCBS OPENED.\n))S013-C4 - DURING THE CREATION OF A DIRECT DATASET, THE OPEN ROUTINE\n     FOUND THAT THE DCB SPECIFIED READ(R) OR GET(G) IN THE MACRF FIELD.\n     ONLY WRITE LOAD (WL) IS ALLOWED.\n))S013-C8 - THE OPEN SUBSYSTEM EXECUTOR MODULE WAS PASSED AN ERROR\n     RETURN CODE IN REGISTER 15 AFTER ISSUING THE IEFSSREQ MACRO TO\n     CONNECT THE USER'S ACB TO THE SUBSYSTEM.  THIS INDICATES THE\n     SUBSYSTEM WAS NOT OPERATING.\n))S013-CC - SETPRT PROCESSING FAILED TO SET UP THE DEVICE DURING AN\n     OPEN FOR THE IBM 3800 PRINTING SUBSYSTEM.\n))S013-D0 - AN INVALID RECORD FORMAT OF FBS OR FS WAS SPECIFIED FOR A\n     PARTITIONED DATA SET.\n))S013-D0 - A DB/DBS RECORD FORMAT WAS SPECIFIED FOR QSAM LOCATE MODE,\n     BUT THE LOGICAL RECORD INTERFACE IS NOT PRESENT IN THE ASSOCIATED\n     BUFFER CONTROL BLOCK; IE. SEGMENT MODE IS IMPLIED.\n))S013-D8 - A CONFLICT HAS OCCURRED FOR THE SPANNED RECORD FORMAT\n     EXTENDED LOGICAL RECORD INTERFACE (XLRI).\n     BUFFER CONTROL BLOCK; IE. SEGMENT MODE IS IMPLIED.\n))S013-E4 - THE LIMIT OF 123 EXTENTS FOR A CONCATENATED PARTITIONED\n     DATA SET HAS BEEN EXCEEDED.  (USED TO BE 256 EXTENTS?)\n))S013-E8 - THE OPEN VERIFICATION FUNCTION OF THE IEFSSREQ MACRO\n     RETURNED AN ERROR CODE IN REGISTER 15.\n))S014-04 - (04 IS THE ONLY POSSIBLE RETURN CODE ASSOCIATED WITH S014)\n     THE TASK WHICH ISSUED A CLOSE FOR A DASD DATA SET WAS NOT\n     THE TASK WHICH OPENED THE DATA SET.\n))S016 - AN ERROR OCCURRED IN SAM SIO/PAGE FIX OR DASD END-OF-BLOCK\n     MODULES BECAUSE OF ONE OF THE FOLLOWING:\n     - THE DASD END-OF-BLOCK MODULES ISSUED AN EXCPVR SVC REQUEST ON\n       BEHALF OF A USER REQUEST, BUT A PREVIOUS EXCPVR SVC REQUEST\n       HAD NOT COMPLETED.  ONE OF THE FOLLOWINF OCCURRED:\n       - A DATA EXTENT CONTROL BLOCK (DECB) WAS USED TWICE.\n       - MULTIPLE READS OR WRITES WERE ISSUED, BUT ONLY THE LAST\n         READ OR WRITE WAS CHECKED.\n     - AN EXCPVR SVC REQUEST ON BEHALF OF A USER REQUEST WAS GOING TO\n       BE ISSUED TO READ A DATA SET THAT IS EXECUTE ACCESS PROTECTED,\n       BUT THE USER IS NOT IN SUPERVISOR STATE.\n       (THE SAM SIO APPENDAGE ISSUED THIS ABEND.)\n))S020 - DURING AN OPEN FOR A BDAM DATA SET THE CONTROL PROGRAM FOUND\n     THAT DCBMACRF DID NOT CONTAIN AN A, K OR I (RC=04), OR THE BDAM\n     DATA SET CONTAINED ZERO EXTENTS (RC=08).\n))S021 - A CALLER OF THE ASCBCHAP ROUTINE PASSED TO ASCBCHAP AN ASCB\n     ADDRESS THAT HAD BITS SET TO ONE IN ITS HIGH ORDER BYTE.\n))S022 - THE VPSS ENCOUNTERED A MISSING DEVICE END ON CONTROL PORT 0.\n))S023 - LNKLST LOOKASIDE (LLA) COULD NOT OBTAIN ALL THE LNKLST\n     DIRECTORY ENTRIES.\n))S024 - AN ABNORMAL TERMINATION OCCURRED IN PRINT SERVICES FACILITY.\n))S027 - AN ABNORMAL TERMINATION OCCURRED IN PRINT SERVICES FACILITY.\n))S028 - A PAGING OPERATION HAS NOT COMPLETED SUCCESSFULLY DUE TO ONE\n     OF THE FOLLOWING:\n     - A PERMANENT I/O ERROR OCCURRED WHILE ATTEMPTING A PAGE-IN OR\n       SWAP-IN OPERATION. THE DATA BEING PAGED IN OR SWAPPED IN IS LOST.\n     - A REAL STORAGE MANAGEMENT ROUTINE OR ANOTHER SYSTEM ROUTINE\n       PERFORMING A SERVICE FOR RSM SUFFERED AN INTERMEDIATE ERROR.\n       THE FUNCTION PERFORMED IS TERMINATED.\n     - A AUXILIARY STORAGE MANAGEMENT ROUTINE SUFFERED A TRANSLATION\n       ERROR WHILE USING THE CONTROL REGISTER OF ANOTHER ADDRESS SPACE\n       TO UPDATE THAT ADDRESS SPACE'S LSQA.\n))S029 - AN INVALID VIO REQUEST WAS DETECTED BY THE PAGE OPERATIONS\n     STARTER ROUTINE OF ASM.  THE SYS1.LOGREC ERROR RECORD CONTAINS\n     A HEXADECIMAL REASON CODE.\n))S02A - JES2 FOUND THAT DATA MANAGEMENT CONTROL BLOCKS OR THE JES2\n     UBUF CONTROL BLOCK WAS NO LONGER VALID DURING EXECUTION OF A DATA\n     MANAGEMENT REQUEST FOR A SPOOL DATA SET.\n))S02B - A USER EXIT ROUTINE ISSUED A RETURN CODE GREATER THAN THAT\n     SPECIFIED IN THE &MAXRC PARAMETER OF THE $EXIT### MACRO.\n))S02C - AN ERROR OCCURRED IN JES2 SUPPORT OF AN FSS ADDRESS SPACE.\n))S02D - THE JES2 MAIN TASK WAS ABENDED BY THE OPERATOR OR A\n     CATASTROPHIC ERROR.\n))S030 - DURING A BISAM OR QISAM OPEN DCBMACRF DID NOT INDICATE A\n     VALID MODE OF OPERATION.\n))S031 - A QISAM I/O ERROR OCCURRED.\n))S032 - DURING A BISAM OR QISAM OPEN DCBMACRF WAS NOT VALID FOR ISAM.\n))S03B - ISAM DATASET TO BE PROCESSED, BUT NOT CREATED OR ITS DCB\n         NOT CLOSED AFTER CREATION.\n   --POSSIBLE CUASE--\n     DATASET WAS TO BE WRITTEN ON BUT WAS OPENED AS INPUT\n     LRECL/BLKSIZE PROBLEM EXISTS - INVALID VALUES OR NOT MULTIPLES\n))S03D - THE ERROR OCCURRED DURING THE EXECUTION OF A QISAM OR BISAM OR\n     BDAM MACRO INSTRUCTION.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S03D OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S03D-RC)**\n))S03D-04 - AN OPEN MACRO WAS ISSUED FOR AN INDEXED SEQUENTIAL OR\n     DIRECT DATASET.  THE VOLUME SERIAL NUMBERS ON THE DD STATEMENT\n     WERE NOT SPECIFIED IN THE SAME ORDER THAT THE DATASET WAS CREATED.\n))S03D-08 - AN OPEN MACRO WAS ISSUED FOR AN INDEXED SEQUENTIAL DATASET.\n     THE FIRST VOLUME OF THE DATASET DOE NOT HAVE A FORMAT2 DSCB.\n))S03D-0C - AN OPEN MACRO WAS ISSUED FOR A DIRECT DATASET.  THE DATASET\n     HAS AN INDEXED SEQUENTIAL ORGANIZATION.\n))S047 - AN UNAUTHORIZED PROGRAM REQUESTED A RESTRICTED SVC.\n))S04B - AN INVALID OPERATION CODE WAS PASSED TO A TSO LINKAGE ASSIST\n     ROUTINE (LAR).\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S04B OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S04B-RC)**\n))S04B-04 - THE LAR (IKJEFTSL) FOR THE TERMINAL MONITOR PROGRAM (TMP)\n     RECEIVED AN INVALID FUNCTION NUMBER.\n))S04B-08 - THE SERVICE ROUTINE'S LAR (IKJTSLAR) WAS INVOKED AT\n     IKJTSLAR, WHICH IS AN INVALID SERVICE ROUTINE ENTRY POINT.\n))S04C - THE TERMINAL MONITOR PROGRAM (TMP) WAS INVOKED AT ENTRY POINT\n     IKJEFT1A AND THE TMP DETACHED A PROGRAM THAT COMPLETED WITH\n     A NON-ZERO COMPLETION CODE (WHICH IS IN REGISTER 15).\n))S04E - INTERNAL IBM DATABASE 2 (DB2) ERROR.\n))S04F - DB2 ABNORMAL TERMINATION TO AVOID DATA INTEGRITY PROBLEMS.\n))S052 - A PROGRAM MADE AN INVALID PC/AUTH REQUEST.  CHECK THE CODE IN\n     REGISTER 15.\n))S053 - A PROGRAM MADE A PC/AUTH REQUEST BUT AN ERROR PREVENTED\n     NORMAL COMPLETION. CHECK THE CODE IN REGISTER 15.\n))S064 - AN ADDRESS SPACE THAT HOLDS A CROSS MEMORY LOCAL LOCK (CML\n     LOCK) TERMINATED ABNORMALLY BEFORE IT FREED THE LOCK.\n))S071 - THE OPERATOR PRESSED THE RESTART KEY TO ACTIVATE THE SYSTEM'S\n     RECOVERY AND TERMINATION PROCESS.  THE PROGRAM RUNNING AT THE\n     TIME THE OPERATOR PRESSED THE RESTART BUTTON WAS SENT THROUGH\n     ABEND PROCESSING BECAUSE THE OPERATOR DETERMINED IT WAS IN A\n     NONCANCELABLE LOOP OR WAIT STATE.\n))S078 - RCT (REGION CONTROL TASK) PROCESSING HAS RECEIVED AN\n     UNACCEPTABLE RETURN CODE FROM AN INVOKED ROUTINE AND CANNOT\n     CONTINUE PROCESSING.  RCT RECOVERY RECORDS THE ERROR IN\n     SYS1.LOGREC, PERFORMS RESOURCE CLEAN-UP, REQUESTS A SYS1.DUMP OF\n     THE ADDRESS SPACE AND THEN REQUESTS ADDRESS TERMINATION.\n))S079 - RCT (REGION CONTROL TASK) ATTENTION EXIT PROCESSING HAS\n     RECEIVED AN UNACCEPTABLE RETURN CODE FROM AN INVOKED ROUTINE AND\n     CANNOT CONTINUE PROCESSING.  RCT RECOVERY RECORDS THE ERROR IN\n     SYS1.LOGREC, PERFORMS RESOURCE CLEAN-UP, REQUESTS A SYS1.DUMP OF\n     THE ADDRESS SPACE AND THEN REQUESTS ADDRESS TERMINATION.\n))S07C - SUPERVISOR CONTROL RECOVERY HAS DETECTED AN ERROR WHICH\n     REQUIRES THAT THE CURRENT TASK BE TERMINATED OR THAT THE CURRENT\n     ADDRESS SPACE BE TERMINATED.\n))S07F - DURING RECOVERY, VERIFICATION OF THE TCB QUEUE ASSOCIATED WITH\n     THE TERMINATED ADDRESS SPACE RESULTED IN AN EMPTY TCB QUEUE.\n     THE ADDRESS SPACE OR JOB IS TERMINATED. RESUBMIT THE JOB.\n))S0A7 - DURING Z NET,CANCEL COMMAND PROCESSING, VTAM FOUND THAT A USER\n     HAD NOT SPECIFIED A TPEND EXIT ROUTINE, OR VTAM COULD NOT SCHEDULE\n     A USER'S TPEXIT ROUTINE.\n))S0A8 - VTAM DETECTED AN ERROR DURING EXECUTION OF AN APPLICATION\n     PROGRAM.  THE TWO LOW-ORDER BYTES OF REGISTER 15 CONTAIN A\n     HEXADECIMAL REASON CODE.\n        2101--A VTAM VALIDITY CHECK OF THE USER'S RPL FAILED BECAUSE\n              THE RPL DOES NOT HAVE THE SAM PROTECTION KEY AS THE\n              APPLICATION PROGRAM'S TCB.\n        7001--THE USER'S RPL OR ECB IS INVALID.\n))S0A9 - EITHER A HALT NET,CANCEL COMMAND WAS ENTERED OR AN ERROR\n     OCCURRED DURING EXECUTION OF A VTAM MODULE.  THE TWO\n     LOW-ORDER BYTES OF REGISTER-15 CONTAIN A HEXIDECIMAL\n     REASON CODE.\n        0000--A HALT NET,CANCEL COMMAND HAS BEEN PROCESSED.\n        10F1--THE ACF/VTAM STAE RETRY ROUTINE ISSUED AN ABEND\n              0A9 IN ORDER TO GIVE CONTROL TO THE USER RECOVERY\n              ROUTINE (STAE EXIT ROUTINE).\n        3100--THERE ARE NOT ENOUGH I/O BUFFERS TO SATISFY A\n              VTAM STORAGE REQUEST.\n        3111--A VTAM MODULE FINISHED PROCESSING BEFORE IT\n              RELEASED A LOCK.\n        3141--A VTAM DESTINATION VECTOR TABLE (DVT) ENTRY\n              IS INVALID FOR THE DEFINED ATTACHMENT.\n        7002--A VTAM REQUEST FOR STORAGE FAILED\n        7003--A VTAM REQUEST TO RELEASE STORAGE FAILED BECAUSE\n              THE STORAGE HAD ALREADY BEEN RELEASED.\n        7004--VTAM COULD NOT OBTAIN A LOCAL MEMORY LOCK.\n        7009--VTAM WAS UNABLE TO RESTORE ITS REGISTERS AFTER A\n              USER EXIT ROUTINE RETURNED CONTROL TO VTAM.\n        7071--A RELSTORE WAS ISSUED FOR A PREVIOSLY FREED BUFFER.\n        7141--CONTROL CANNOT BE PASSED TO THE PROPER VTAM MODULE.\n              EITHER A VTAM DESTINATION VECTOR TABLE ENTRY IS INVALID\n        FOR THE DEFINED ATTACHMENT OR VTAM STOARGE HAS BEEN ALTERED.\n))S0AA - AN ABEND CONDITION OCCURRED DURING EXECUTION OF VTAM.\n         THE ERROR COULD NOT BE ASSOCIATED WITH ANY PARTICULAR TCB.\n         ALL TASKS IN THE ADDRESS SPACE ARE ABNORMALLY TERMINATED.\n))S0AE - IOS SUPPORT OF SYSTEM RESTART PROCESSING FOUND THAT THE I/O\n         PURGE MODULE (IGC0001F) WAITING FOR THE COMPLETION OF AN I/O\n         REQUEST.  THE SYSTEM ABNORMALLY TERMINATES ALL TASKS IN THE\n         ADDRESS SPACE, THEN THE SYSTEM TERMINATES THE ADDRESS SPACE.\n))S0B0 - AN UNCORRECTABLE ERROR WAS DETECTED BY THE SWA MANAGER.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S0B0 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S0B0-RC)**\n))S0B0-04 - INVALID FUNCTION REQUESTED.\n))S0B0-08 - INVALID SVA (DOES NOT POINT TO THE BEGINNING OF A SWA\n     PREFIX OR THE SWA PREFIX HAS BEEN DESTROYED).\n))S0B0-0C - ATTEMPTING TO READ A BLOCK NOT YET WRITTEN.\n))S0B0-10 - INVALID LENGTH (0 OR NEGATIVE FOR ASSIGN LOCATE OR\n     ATTEMPTING TO READ OR WRITE A RECORD, WHICH IS NOT 176 BYTES, IN\n     MOVE MODE).\n))S0B0-14 - INVALID COUNT FIELD (0 FOR READ, WRITE, ASSIGN OR 00 FOR\n     WRITE AND ASSIGN).\n))S0B0-18 - QMNGRIO MACRO WAS ISSUED WITH BOTH OR NEITHER OF THE READ\n     AND WRITE BITS SET.\n))S0B0-1C - INVALID ID (THE CALLER ATTEMPTED TO WRITE A BLOCK FOR THE\n     FIRST TIME AND HAS EITHER PASSED A NON-EXISTING ID OR HAS FAILED\n     TO PASS ONE AND THE BLOCK DOES NOT HAVE AN IMBEDDED ID).\n))S0B0-20 - INVALID BLOCK POINTER (WRITE LOCATE IS ATTEMPTING TO WRITE\n     AND IS PASSING A BLOCK POINTER WHICH IS NOT VALID FOR THE SVA\n     REQUESTED).\n))S0C1 - OPERATION EXCEPTION - AN OPERATION CODE IS NOT ON THE MACHINE\n   --POSSIBLE CAUSE--\n     SUBSCRIPT ERROR - CLOBBERED CODE\n     TRIED TO READ A FILE THAT WAS NOT OPEN\n     MISSPELLED DDNAME\n     ERROR IN PARAMETERS PASSED TO SUBROUTINES\n     MISSING DD CARD\n     RECORDING MODE WAS WRONG, OR DENSITY WAS INCORRECT\n     BAD LOAD MODULE, POSSIBLE BAD OBJECT DECK OR MISSING SUBROUTINE\n     FORTRAN - MISSING DIMENSION STATEMENT, SAME NAME FOR ARRAY AND A\n             SUBROUTINE\n     COBOL - SUBROUTINE PROG ID WAS THE SAME AS THE ENTRY NAME\n     COBOL - TRIED TO CALL WITHIN COBOL F SORT INPUT/OUTPUT PROCEDURE\n     COBOL - TRIED TO CALL A SUBROUTINE WHICH COULD NOT BE FOUND\n     COBOL - INCOMPLETE DCB FOR SORTIN\n     COBOL - USING SORT VERB, DDNAME WAS NOT SORTOUT WHEN THE GIVING\n             OPTION WAS USED.\n     COBOL - EXECUTING SORT-USING AFTER OPENING SORTIN\n))S0C2 - PRIVILEGED OPERATION EXCEPTION\n   --POSSIBLE CAUSE--\n     UNINTENTIONAL BRANCH TO INVALID INSTRUCTION DUE TO SUBSCRIPT ERROR\n     COBOL - MISSING PERIOD AT END OF PARAGRAPH OR PARAGRAPH NAMES\n           - MISSING GOBACK AFTER SORT VERB - LOGIC FELL INTO INPUT\n                PROCEDURE\n           - ACCEPT VERB EXECUTED WHEN NO SYSIN DD WAS AVAILABLE.\n))S0C3 - EXECUTION EXCEPTION - THE SUBJECT INSTRUCTION OF EXECUTE\n         IS ANOTHER EXECUTE.\n   --POSSIBLE CAUSE--\n     UNINTENTIONAL BRANCH, LOSS OF ADDRESSABILITY.\n))S0C4 - PROTECTION EXCEPTION - A VIRTUAL ADDRESS COULD NOT BE\n         TRANSLATED INTO A REAL ADDRESS.\n   --POSSIBLE CAUSE--\n     INVALID ADDRESS WAS REFERENCED DUE TO SUBSCRIPT ERROR OR BAD PARMS\n     THE KEY OF AN INSTRUCTION OR AN OPERAND IN STORAGE DOES NOT\n          MATCH THE PROTECTION KEY IN THE PSW (INTERRUPT CODE 4)\n     THE VIRTUAL SEGMENT OR PAGE WAS NEVER ALLOCATED\n          (INTERRUPT CODE 10 OR 11, RESPECTIVELY)\n     THE PAGE WAS PAGED OUT AND THE ROUTINE REQUESTING THE CODE WAS\n          DISABLED FOR I/O INTERRUPTS (INTERRUPT CODE 11)\n     COBOL - IN GROUP MOVE, RECEIVING RECORD VARIABLE LENGTH DEFINED\n                WRONG\n           - TRIED MOVING VAR. LENGTH REC. LARGER THAN TARGET FIELD MAX\n           - TRIED TO READ OR WRITE A FILE WHICH WAS NOT OPEN\n           - USED DD DUMMY AND LOGIC SAYS AT END MOVE HIGH VALUES TO FD\n           - TRIED TO CALL WITHIN COBOL F SORT INPUT/OUTPUT PROCEDURE\n           - U WITH SORT - TRIED TO GOBACK IN THE OUTPUT PROCEDURE\n))S0C5 - ADDRESSING EXCEPTION - AN ADDRESS BEYOND THE AVAILABLE REAL\n             STORAGE WAS REQUESTED\n   --POSSIBLE CAUSE--\n     SEE S0C1 FOR MORE INFORMATION\n     SUBSCRIPT ERROR - REFERENCED BEYOND TABLE IN PROGRAM RUNNING V=R\n     COBOL - PERFORMED PROCEDURE NOT EXITED PROPERLY\n           - RECORD DESCRIBED TOO SHORT\n           - REFERENCED A RECORD WITHOUT GIVING A READ\n           - TRIED TO USE WRITE WITHOUT FROM OPTION ON APPLY WRITE\n                ONLY FILE\n))S0C6 - SPECIFICATION EXCEPTION - AN INCORRECT BOUNDARY WAS SPECIFIED.\n     USUALLY CAUSED BY UNINTENTIONAL BRANCH TO INVALID INSTRUCTION.\n))S0C7 - DATA EXCEPTION - DECIMAL DATA IS INCORRECT OR IMPROPERLY\n            OVERLAPPED OR NOT VALIDLY INITIALIZED.\n   --POSSIBLE CAUSE--\n     SUBSCRIPT ERROR, REFERENCED BEYOND TABLE\n     COBOL - WORKING STORAGE NOT INITIALIZED\n           - BAD DATA, SHOULD CHECK DATA FOR ERRORS\n           - GARBAGE IN A FIELD BEING TESTED OR DISPLAYED\n           - MOVE ZEROES TO GROUP LEVEL IS DISPLAY, HAD SUBLEVELS\n                THAT WERE NOT\n           - PERIOD MISSING AFTER IMPERATIVE STATEMENTS WITHIN AT END\n                CLAUSE\n           - BINARY FIELD IN AN ARITHMETIC OPERATION IS NOT LARGE\n                ENOUGH TO ACCEPT RESULT\n     (FOR MORE INFORMATION, SEE DESCRIPTION OF S0C1)\n))S0C8 - FIXED POINT OVERFLOW EXCEPTION\n     NOTE - MASKED BY FORTRAN\n))S0C9 - FIXED POINT DIVIDE EXCEPTION\n     NOTE - MASKED BY FORTRAN\n))S0CA - DECIMAL OVERFLOW EXCEPTION\n     THE DESTINATION FIELD IS TOO SMALL TO CONTAIN THE RESULT FIELD\n         IN A DECIMAL OPERATION.\n))S0CB - DECIMAL DIVIDE EXCEPTION\n     A QUOTIENT EXCEEDS THE SPECIFIED DATA FIELD SIZE.\n))S0CC - EXPONENT OVERFLOW EXCEPTION\n     A FLOATING POINT NUMBER EXCEEDS THE MAXIMUM SIZE.\n     NOTE - THIS ERROR IS DETECTED AND FIXED IN FORTRAN\n))S0CD - EXPONENT UNDERFLOW EXCEPTION\n     A FLOATING POINT NUMBER IS SMALLER THAN THE MINIMUM.\n     NOTE - FORTRAN WILL SET THE RESULT TO ZERO AND CONTINUE PROCESSING\n))S0CE - SIGNIFICANCE EXCEPTION\n     A FLOATING POINT ADDITION OR SUBTRACTION RESULTS IN AN ALL ZERO\n         FRACTION\n     NOTE - THIS IS MASKED IN FORTRAN\n))S0CF - FLOATING POINT DIVIDE EXCEPTION - DIVIDE BY ZERO\n     NOTE - THIS ERROR IS DETECTED AND NOTED BY FORTRAN\n))S0D2 - A PROGRAM CHECK WAS DETECTED; AN INTERRUPTION CODE OF 18\n     X'12' (TRANSLATION SPECIFICATION EXCEPTION) HAS OCCURRED.  THERE\n     IS INVALID DATA IN EITHER CONTROL REGISTERS ZERO OR ONE, OR A\n     SEGMENT OR PAGE TABLE.  THE ERROR IS THE RESULT OF A HARDWARE\n     ERROR OR A PROGRAM RUNNING IN KEY ZERO HAS CAUSED DATA DAMAGE.\n))S0D3 - A PROGRAM CHECK, INTERRUPTION CODE 19 X'13' (SPECIAL OPERATION\n     ERROR) HAS OCCURRED.  A PRIVILEGED PROGRAM ISSUED A SET SYSTEM\n     MASK. THIS INSTRUCTION IS NOT VALID IN OS/VS2 (SINCE RELEASE 2).\n))S0D9 - A PROGRAM CHECK, INTERRUPTION CODE 38 (PAGE FAULT ASSIST\n     ERROR) HAS OCCURRED.  EITHER A HARDWARE ERROR OCCURRED OR A\n     PROGRAM RUNNING IN KEY ZERO CAUSED DATA DAMAGE.\n))S0E0 - AN INVALID OR UNRECOGNIZED PROGRAM INTERRRUPT OCCURRED.\n   --POSSIBLE CAUSE--\n     THIS LEVEL OF MVS IS NOT THE CORRECT ONE FOR THE HARDWARE,\n     ESPECIALLY IF THE INTERRUPT CODE IS UNKNOWN.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S0E0 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S0E0-RC)**\n))S0E0-1D - A SQUARE ROOT EXECEPTION OCCURED.\n))S0E0-1E - AN UNNORMALIZED OPERAND EXECEPTION OCCURED.\n))S0E0-28 - RESERVED BIT POSITIONS IN AN ALET WERE NON-ZERO.\n))S0E0-29 - AN ALET SPECIFIED AN INVALID ACCESS LIST ENTRY.\n))S0E0-2A - AN ALET SPECIFIED A PREVIOUSLY DELETED ACCESS LIST ENTRY.\n))S0E0-2B - AN ACCESS LIST ENTRY SPECIFIED AN INVALID DATA SPACE.\n))S0E0-2C - THE SEQUENCE NUMBER IN THE ASTE THAT THE ACCESS LIST ENTRY\n     REFERS TO IS NOT EQUAL TO THE NUMBER IN THE ACCESS LIST ENTRY.\n))S0E0-2D - A PRIVATE ACCESS LIST ENTRY IS SPECIFIED, AND THE CURRENT\n     EAX IS NOT AUTHORIZED TO THE TARGET ADDRESS SPACE.\n))S0E0-30 - A STACKING INTRUCTION WAS ISSUED WHEN THE LINKAGE STACK\n     WAS FULL.\n))S0E0-31 - AN UNSTACKING INTRUCTION WAS ISSUED WHEN THE LINKAGE STACK\n     HAS NO STACK ENTRIES.\n))S0E0-32 - A LINKAGE STACK SPECIFICATION INTERRUPT OCCURED.\n))S0E0-33 - AN INVALID LINKAGE STACK ENTRY (LSE) TYPE WAS ENCOUNTERED\n     BY THE HARDWARE OR BY AN UNSTACKING OPERATION.\n))S0E0-34 - A PR INSTRUCTION WAS ISSUED AGAINST A LINKAGE STACK ENTRY\n     THAT HAS THE UNSTACK SUPPRESSION BIT SET.  MVS SETS THIS BIT IN\n     A LINKAGE STACK ENTRY TO PREVENT SVC ROUTINES FROM UNSTACKING\n     ENTRIES THEY DID NOT ADD TO THE STACK.\n))S0E1 - THE ERROR OCCURRED WHILE PROCESSING THE FIRST EXCP OF A VIO\n     DATASET. PLEASE REPORT THIS PROBLEM TO THE SYSTEMS GROUP.\n))S0E2 - THE ERROR OCCURRED WHILE PROCESSING THE FIRST EXCP OF A VIO\n     DATASET.  THE SYSTEM WAS UNABLE TO ASSIGN, LOCATE, FIX, FREE, OR\n     ACCESS VIO PAGES FOR THE DATASET.  PLEASE REPORT THIS PROBLEM\n     TO THE SYSTEMS GROUP.\n))S0E3 - THE ERROR OCCURRED WHILE PROCESSING A VIO DATASET.  THE SYSTEM\n     WAS UNABLE TO ASSIGN, LOCATE, FIX, FREE, OR ACCESS VIO PAGES FOR\n     THE DATASET. PLEASE REPORT THIS PROBLEM TO THE SYSTEMS GROUP.\n))S0E4 - THE ERROR OCCURRED WHILE TRYING TO SCRATCH A VIO DATASET.\n     PLEASE REPORT THIS PROBLEM TO THE SYSTEMS GROUP.\n))S0E5 - UNABLE TO DISCONNECT THE VIRTUAL TRACK BUFFER FORM THE VIO\n     DATASET. PLEASE REPORT THIS PROBLEM TO THE SYSTEMS GROUP.\n))S0E6 - UNABLE TO PROCESS A DATA SET THAT HAS ALREADY BEEN SCRATCHED.\n))S0F0 - AN ERROR OCCURRED WHILE PROCESSING A MACHINE CHECK\n     INTERRUPTION.  IN AN ATTEMPT TO RECOVER THE SYSTEM THE INTERRUPTED\n     TASK WAS TERMINATED.\n))S0F1 - PROGRAM INTERRUPTION IN I/O INTERRUPTION HANDLER\n     RECORD DESCRIBED AS WRONG LENGTH\n))S0F2 - I/O INTERRUPT PROCESSING ERROR. I/O RECOVERY ROUTINE FAILED.\n     CLOBBERED IOB OR OTHER SVC PARAMETERS - SEE S0C1\n))S0F3 - MACHINE CHECK INTERRUPTION\n     DISK I/O FAILURE OR MACHINE TROUBLE\n))S0F8 - THE ISSUER OF AN SVC WAS EITHER IN SRB MODE, HELD A LOCK,\n         WAS DISABLED, OR WAS IN CROSS MEMORY MODE.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S0F8 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S0F8-RC)**\n))S0F8-04 - THE SVC ISSUER WAS NOT IN TCB MODE.\n))S0F8-08 - THE SVC ISSUER HELD A LOCK.\n))S0F8-0C - THE SVC ISSUER WAS DISABLED.\n))S0F8-10 - THE SVC ISSUER WAS IN CROSS MEMORY MODE.\n))S0F8-14 - THE SVC ISSUER HAD AN ENABLED UNLOCKED TASK MODE FRR.\n            IE. EUT=YES WAS SPECIFIED ON THE SETFRR MACRO.\n))S0F8-18 - THE SVC ISSUER WAS IN AR ADDRESS SPACE CONTROL MODE\n            FOR AN SVC WHICH DOES NOT ALLOW THIS.\n))S0F8-1C - THE SVC ISSUER WAS NOT AUTHORIZED FOR SVC MICROCODE ASSIST.\n))S0F9 - THE ERROR OCCURRED WHILE TRYING TO ACQUIRE OR RELEASE AN SVRB.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S0F9 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S0F9-RC)**\n))S0F9-00 - LSQA HAS BEEN EXHAUSTED AND AN SVRB CANNOT BE CREATED TO\n   HONOUR AN SVC REQUEST IN THE ADDRESS SPACE.\n))S0F9-04 - AN SVRB BEING FREED MAY NOT BELONG TO THE SVRB POOL.\n))S0FB - A TRANSLATION EXCEPTION HAS OCCURRED.  INVALID CONTENTS\n         WERE DETECTED IN CONTROL REGISTER 0.\n))S0FC - A TRANSLATION ERROR OCCURRED WHILE REFERENCING DATA NOT IN\n         THE HOME ADDRESS SPACE. BAD DAT TABLES OR WRONG STO ADDRESS.\n))S0FD - A TYPE 6 SVC REQUESTED THE SVC FIRST LEVEL INTERRUPT HANDLER\n         (FLIH) TO SCHEDULE A CROSS MEMORY SRB.\n         T6EXIT MACRO POINTS TO SRB WHERE SRBASCB IS NOT HOME ASCB.\n))S0FE - AN ERROR WAS DETECTED WHILE RMF WAS SAMPLING DATA ABOUT\n         THE STATE OF THE SYSTEM.\n))S100 - A DEVICE TO BE USED WAS NOT OPERATIONAL OR A PSEUDO DEVICE\n         PREVIOUSLY ALLOCATED HAS BEEN REALLOCATED.\n))S101 - DURING EXECUTION OF A WAIT MACRO, THE PROBLEM PROGRAM\n         SPECIFIED MORE EVENTS THAN THERE WERE ECBS.\n))S102 - THE ERROR OCCURRED DURING EXECUTION OF A POST MACRO\n   INSTRUCTION.  THE CONTROL PROGRAM FOUND AN INVALID EVENT CONTROL\n   BLOCK ADDRESS, OR THE ECB WAS IN A STORAGE AREA WITH A PROTECTION\n   KEY DIFFERENT FROM THAT OF THE TASK ISSUING THE MACRO.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S102 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S102-RC)**\n))S102-00 - INVALID ECB FOR POST IN THE USER'S KEY.\n))S102-04 - INVALID ECB FOR AN XMPOST (CROSS MEMORY POST).\n))S102-08 - INVALID ECB FOR BRANCH ENTRY POST IN THE USER'S KEY.\n))S102-0C - INVALID ECB FOR BRANCH ENTRY XMPOST.\n))S104 - GETMAIN ERROR.  AN AUTHORIZED PROGRAM REQUESTED VIRTUAL\n     STORAGE THAT REQUIRES MORE REAL STORAGE THAN IS AVAILABLE.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S104 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S104-RC)**\n))S104-04 - NOT ENOUGH REAL STORAGE FOR SPACE IN SQA SUBPOOL.\n))S104-08 - NOT ENOUGH REAL STORAGE FOR SPACE IN FIXED CSA SUBPOOL.\n))S104-0C - NOT ENOUGH REAL STORAGE FOR SPACE IN LSQA SUBPOOL.\n))S104-1C - LSQA REQUEST FAILED - PAGE TABLE PAGED OUT.\n))S104-20 - AUTHORIZED PRIVATE REQUEST FAILED - PAGE TABLE PAGED OUT.\n))S106 - AN ERROR WAS DETECTED BY THE CONTROL PROGRAM WHEN IT ATTEMPTED\n     TO FETCH THE REQUESTED PROGRAM INTO VIRTUAL STORAGE.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S106 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S106-RC)**\n   --POSSIBLE CAUSE--\n     PREVIOUS LKED STEP FAILED TO OUTPUT A SYSLMOD, NEEDS LARGER SIZE=\n     I/O ERROR - MACHINE TROUBLE OR DISK FAILURE\n))S106-0B - A PROGRAM CHECK OR LOOP OCCURRED IN FETCH.\n))S106-0C - NOT ENOUGH STORAGE WAS AVAILABLE FOR FETCH TO DO A GETMAIN\n     FOR THE MODULE OR CONTROL BLOCKS.  CHECK REGISTER 0:\n          04 - NO STORAGE FOR DATD.\n          08 - NO STORAGE FOR DEB.\n          0C - NO STORAGE FOR IOSB.\n          10 - NO STORAGE FOR EXLIST.\n          14 - NO STORAGE FOR MODULE.\n          18 - UNABLE TO FIX STORAGE.\n))S106-0D - THE CONTROL PROGRAM FOUND AN INVALID RECORD TYPE IN THE\n     LOAD MODULE.\n))S106-0E - THE CONTROL PROGRAM FOUND AN INVALID ADDRESS IN THE LOAD\n     MODULE.  CHECK REGISTER 0:\n          20 - ERROR CONVERTING TTR.\n          24 - BLOCK IS OUTSIDE OF THE MODULE.\n          28 - AN ADCON LOCATION IS INVALID.\n))S106-0F - AN UNCORRECTABLE INPUT/OUTPUT ERROR OCCURRED, THE LOAD\n     MODULE HAD AN ERROR WHICH CAUSED THE CHANNEL PROGRAM TO FAIL,\n     OR A LINKLIST LIBRARY EXPANDED INTO ANOTHER EXTENT SINCE IPL.\n     CHECK REGISTER 0:\n          40 - I/O ERROR ON A PDS.\n          44 - ERROR ON A VIRTUAL DS.\n          48 - SEEK ADDRESS OUTSIDE EXTENT.\n))S106-10 - THE CONTROL PROGRAM DETECTED A RELOCATION ERROR IN THE\n     LOAD MODULE.\n))S10A - GETMAIN ERROR.  A PROGRAM REQUESTED VIRTUAL STORAGE THAT\n     REQUIRES MORE REAL STORAGE THAN IS AVAILABLE.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S10A OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S10A-RC)**\n))S10A-04 - NOT ENOUGH REAL STORAGE FOR SPACE IN SQA SUBPOOL.\n))S10A-08 - NOT ENOUGH REAL STORAGE FOR SPACE IN FIXED CSA SUBPOOL.\n))S10A-0C - NOT ENOUGH REAL STORAGE FOR SPACE IN LSQA SUBPOOL.\n))S10A-1C - LSQA REQUEST FAILED - PAGE TABLE PAGED OUT.\n))S10A-20 - AUTHORIZED PRIVATE REQUEST FAILED - PAGE TABLE PAGED OUT.\n))S10B - TIME SERVICE ROUTINE ERROR - ERROR IN INPUT PARAMETERS.\n))S10D - JOBSTEP TASK ABENDED WHEN A SUBTASK THAT IS ALSO A JOBSTEP\n         TASK IS IN STEP-MUST-COMPLETE STATUS.\n))S10E - SPIE MACRO ERROR. THE PICA ADDRESS IS INVALID.\n))S112 - INVALID INPUT WAS PASSED TO SVC 18 BY THE BLDL OR FIND MACRO.\n     REQUIRES MORE REAL STORAGE THAN IS AVAILABLE.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S112 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S112-RC)**\n   --POSSIBLE CAUSE--\n     THE DCB HAS BEEN OVERLAID, ESPECIALLY DCBDEBAD OR DCBPOINT.\n))S112-01 - PARAMETER LIST NOT IN CALLER'S STORAGE.\n))S112-02 - DCB NOT IN CALLER'S STORAGE.\n))S112-03 - DCB DOES NOT POINT TO A VALID DEB.\n))S112-04 - PROGRAM CHECK OCCURRED IN THE POINT ROUTINE.\n))S112-13 - DCB DOES NOT POINT TO A VALID DEB. DCB DUMPED TO GTF.\n))S112-14 - PROGRAM CHECK OCCURRED IN THE POINT ROUTINE.\n   THE DCB IS DUMPED TO THE GTF DATA SET.\n))S113 - AN ERROR OCCURRED DURING AN OPEN WITH A TYPE=J OPERAND.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S113 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S113-RC)**\n))S113-08 - A JFCB EXTENSION BLOCK WAS NEEDED FOR PROCESSING A\n   PHYSICAL SEQUENTIAL DATA SET BUT NONE WAS AVAILABLE.\n))S113-0C - AN OPEN TYPE=J WAS ISSUED, BUT NO JFCB EXIT WAS FOUND IN\n   THE DCB EXIT LIST.  SPECIFY A JFCB EXIT, SUPPLY THE JFCB.\n))S113-18 - A JFCB EXTENSION BLOCK WAS NEEDED FOR PROCESSING A DIRECT\n   OR INDEX SEQUENTIAL DATA SET.\n))S113-20 - END-OF-VOLUME ENCOUNTERED FOR A VSAM DATA SET.\n   MULTI-VOLUME VSAM FILES CANNOT BE OPENED WITH A DCB.\n))S113-24 - OPEN ISSUED TO A MULTI-VOLUME VSAM DATA SET.\n   MULTI-VOLUME VSAM FILES CANNOT BE OPENED WITH A DCB.\n))S113-28 - OPEN ATTEMPT FOR CONCATENATED VSAM USING A DCB.\n))S113-2C - OPEN ATTEMPT FOR VSAM USING A DCB WHEN THE CALLER\n   WAS NOT APF AUTHORIZED OR IN SUPERVISOR STATE.\n))S113-30 - INVALID JCL DISPOSITION DETECTED FOR VSAM OPENED WITH A\n   DCB.  ONLY ALLOWED (OLD,KEEP,KEEP) OR (SHR,KEEP,KEEP).\n))S113-34 - AN UNSUPPORTED DCB OPTION WAS SPECIFIED FOR A VSAM DATA\n   SET OPENED WITH A DCB.  ONLY VALID OPTIONS ARE INPUT AND UPDAT.\n))S113-38 - AN OPEN WAS ISSUED FOR A VSAM DATA SET WITH A DCB,\n   BUT THE VTOC DOES NOT INDICATE THAT IT IS A VSAM DATA SET.\n))S115 - SVC 21 (STOW) ERROR.  THE DCB DID NOT POINT TO A VALID DEB,\n   OR THE DEB DID NOT POINT BACK TO THE DCB.\n))S117 - AN I/O ERROR OCCURRED DURING A BSAM CLOSE TYPE=T MACRO.\n))S118 - INVALID PARAMETERS WERE PASSED TO DEVTYPE (SVC 24).\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S118 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S118-RC)**\n))S118-01 - THE DDNAME (ADDRESS IN GPR 1) WAS NOT IN CALLER'S REGION.\n))S118-02 - OUTPUT AREA (ADDRESS IN GPR 0) WAS NOT IN CALLER'S REGION.\n))S11A - A PROTECTION CHECK OCCURRED WHEN THE SYSTEM TRIED TO STORE\n     INTO A USER SUPPLIED OS/VS CAMLST WORK AREA.\n))S121 - A MODULE ISSUED SVC 33 (IOHALT) WITH THE LOW ORDER BIT OF\n     GPR1 OFF, WHICH INDICATES THE PRE-XA (2-BYTE UCB ADDR) INTERFACE.\n))S122 - EITHER THE OPERATOR OR THE JOB ENTRY SUBSYSTEM CANCELLED THE\n     JOB, REQUESTING A DUMP. CHECK THE JOB LOG LISTING FOR MORE INFO.\n))S128 - AN INVALID ADDRESS LIST WAS SPECIFIED FOR AN EXTRACT MACRO.\n     LIST NOT ON A FULLWORD BOUNDARY OR NOT IN JOB STEP'S STORAGE.\n))S12D - INVALID SEGMENT TABLE IN AN OVERLAY PROGRAM\n     SEE S0C1\n))S12E - ERROR FOUND IN INPUT PARAMETERS TO TTIMER SERVICE ROUTINE.\n))S130 - THE DEQ MACRO SPECIFIED A RESOURCE NOT PREVIOUSLY SPECIFIED BY\n     BY AN ENQ MACRO.  THAT IS, THE PROGRAM HAD NOT REQUESTED CONTROL\n     OF A RESOURCE IT WAS ATTEMPTING TO RELEASE.\n))S137 - I/O ERROR IN END OF VOLUME LABEL PROCESSING ON MAGNETIC TAPE.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S137 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S137-RC)**\n))S137-04 - AN I/O ERROR OCCURRED WHILE WRITING AN END OF VOLUME\n     LABEL OR TAPE MARK.\n))S137-08 - AN I/O ERROR OCCURRED WHILE POSITIONING THE TAPE IN\n     PREPARATION FOR LABEL PROCESSING.\n))S137-0C - AN I/O ERROR OCCURRED READING A TRAILER LABEL FOR A\n     DATASET OPENED WITH THE INPUT OR INOUT OPTION, OR READING THE\n     HEADER LABEL FOR A DATASET OPENED WITH THE RDBACK OPTION.\n))S137-10 - AN I/O ERROR OCCURRED WHILE POSITIONING A MAGNETIC\n     TAPE AT THE END OF THE DATASET.\n))S137-14 - AN I/O ERROR OCCURRED READING HEADER LABELS FOR A DATASET\n     OPENED FOR INPUT OR INOUT, OR READING THE TRAILER LABEL FOR A\n     DATASET OPENED FOR RDBACK.\n))S137-18 - AN I/O ERROR OCCURRED WHILE POSITIONING A MAGNETIC TAPE\n     DATASET AT THE FIRST DATA RECORD, OR ON A READ BLOCK ID COMMAND\n     USED TO ESTABLISH THE TAPE POSITION.\n))S137-1C - AN INVALID TRAILER LABEL WAS READ DURING END OF VOLUME.\n))S137-20 - AN INVALID HEADER LABEL WAS READ DURING END OF VOLUME.\n))S137-24 - A SPECIFIC VOLUME SERIAL NUMBER WAS SPECIFIED FOR THE\n     SECOND OR SUBSEQUENT VOLUME OF AN OUTPUT DATASET ON MAGNETIC\n     TAPE.  DURING EOV PROCESSING, IT WAS DISCOVERED THAT THE\n     EXPIRATION DATE (FROM THE HDR1 LABEL OF THE FIRST DATASET\n     CURRENTLY ON THE SPECIFIED VOLUME) HAD NOT PASSED.  WHEN\n     REQUESTED TO SPECIFY WHETHER THE VOLUME COULD BE USED IN SPITE\n     OF THE EXPIRATION DATE, THE OPERATOR DID NOT REPLY 'U'.\n     ASK THE OPERATOR TO REPLY 'U' OR SPECIFY ANOTHER VOLUME SERIAL.\n))S137-28 - THE OPERATOR REPLIED 'M' (REJECT VOL1 LABEL REWRITE)\n     TO MESSAGE IEC704A.\n))S137-2C - THE INPUT VOLUME CONTAINS AN ISCII/ASCII VOLUME LABEL WITH\n     A STANDARD VERSION LABEL THAT IS NOT 1 OR 3.\n))S137-30 - A LABEL VIOLATED THE PUBLISHED STANDARD FOR THE LABEL, AND\n     THE LABEL VALIDATION EXIT REQUESTED OPEN/EOV TO REJECT THE VOLUME.\n))S137-38 - AN I/O ERROR OCCURRED WHILE PROCESSING A READ BLOCK ID TO\n     ESTABLISH THE TAPE POSITION.\n))S138 - THE ERROR OCCURRED DURING THE EXECUTION OF AN ENQ MACRO.\n     TWO ENQ MACROS WERE ISSUED FOR THE SAME RESOURCE IN THE SAME TASK\n     WITHOUT AN INTERVENING DEQ MACRO.  THE SECOND ENQ MACRO DID NOT\n     SPECIFY TEST, USE, OR HAVE IN ITS RET OPERAND.\n))S13E - THE TASK WHICH CREATED A SUBTASK HAS ISSUED A DETACH FOR\n     THAT SUBTASK, SPECIFYING STAE=NO, BEFORE THAT SUBTASK HAS\n     TERMINATED.\n))S14F - THE ROUTINE ATTEMPTED TO EXECUTE THE STATUS MACRO INSTRUCTION\n     FOR OTHER THAN THE STOP, STOP SYNCH, OR START FUNCTION AND WAS NOT\n     IN SUPERVISOR KEY (0-7).\n))S16E - THE CONTROL PROGRAM REQUESTED THAT A DEBCHK FUNCTION BE\n     PERFORMED ON A DATA EXTENT BLOCK OBTAINED FROM THE DCB PASSED BY\n     THE PROGRAM. THAT FUNCTION COULD NOT BE COMPLETED.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S16E OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S16E-RC)**\n))S16E-04 - THE INDICATED DEB POINTER IS NOT IN THE DEB TABLE.  A DEB\n     WHOSE ADDRESS IS NOT IN THE DEB TABLE CANNOT BE VERIFIED,\n     DELETED, OR PURGED.\n))S16E-08 - INVALID TYPE SPECIFIED (MACRO NOT ISSUED).  ACCEPTABLE\n     TYPES ARE ADD, DELETE, VERIFY, AND PURGE.\n))S16E-10 - DEBDCBAD DOES NOT POINT TO DCB.  IT IS NORMALLY ASSUMED\n     THAT THE DCBDEBAD FIELD OF THE DCB POINTES TO THE DEB, BUT THE\n     DEBDCBAD FIELD OF THE DEB MUST POINT TO THE DCB WHEN TYPE=VERIFY,\n     ADD, OR DELETE.\n))S16E-14 - AM VALUE DOES NOT EQUAL DEBAMTYP VALUE.  WHEN A DEB POINTER\n     IS ADDED TO THE TABLE, THE ACCESS METHOD POINTER (AM) VALUE, IF\n     GIVEN IS PLACED IN THE DEBAMTYP FIELD OF THE DEB.  IF NO AM VALUE\n     IS CODED, A 0 IS INSERTED IN THE FIELD.  SUBSEQUENT DEBCHKS ISSUED\n     TO VERIFY OR DELETE THAT DEB POINTER MUST EITHER SPECIFY THE SAME\n     AM VALUE OR OMIT THE OPERAND.  WHEN THE OPERAND IS OMITTED, NO\n     COMPARISON IS MADE.\n))S16E-18 - DEB NOT ON TCB CHAIN FOR TYPE = ADD.  BEFORE THE DEB\n     POINTER CAN BE ADDED TO THE TABLE, THE DEB ITSELF MUST BE QUEUED\n     ON THE CURRENT TCB DEB CHAIN.\n))S16E-1C - DEBAMTYP OR DEBTBLOF = 0 FOR TYPE = ADD.  VALUES OTHER THAN\n     0 INDICATE A POINETR TO THIS DEB ALREADY EXISTS IN THE DEB TABLE.\n))S16E-20 - DEB TABLE CONTAINS 32760 BYTES AND TYPE = ADD. THE CURRENT\n     DEB TABLE DOES NOT HAVE SPACE FOR THIS NEW DEB POINTER.  TO\n     INCREASE THE TABLE SIZE BY THE REQUIRED INCREMENT OF 24 WOULD\n     CAUSE THE TABLE TO EXCEED ITS MAXIMUM SIZE.\n))S171 - THE REAL STORAGE MANAGER WAS INVOKED WITH A REQUEST FOR A\n     PGFIX, PGFREE, PGLOAD, OR PGOUT SERVICE AND THE REQUEST WAS\n     ILLEGAL OR INVALID.  THE REQUEST IS CONSIDERED TO BE ILLEGAL IF\n     THE STORAGE RANGE SPECIFIED BY THE INPUT PARAMETERS DOES NOT\n     EXIST (A GETMAIN WAS NOT ISSUED FOR IT).\n     NOTE: THE MEANINGS OF THE CONTENTS OF GENERAL REGISTERS 11,\n           12, 13, AND 14 ARE PROVIDED FOR DIAGNOSTIC PURPOSES IN THE\n           FULL DESCRIPTION OF THIS ABEND IN THE SYSTEM CODES MANUAL.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S171 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S171-RC)**\n   --POSSIBLE CAUSE--\n     INPUT PARAMETER ERROR IN VIRTUAL SUBAREA LIST (VSL):\n      - VSL NOT ON A FULLWORD BOUNDARY.\n      - VSL NOT IN FIXED STORAGE.\n      - UNDEFINED OR CONFLICTING OPTION FLAGS.\n     END ADDRESS OF RANGE NOT GREATER THAN BEGINNING ADDRESS.\n     AN OPTION WAS SPECIFIED WHICH IS NOT SUPPORTED BY MVS.  THESE ARE\n       RSAOPT AND ECBIND.\n      - VSL IS STORE PROTECTED FROM THE CALLER.\n     INPUT PARAMETER ERROR ON ECB:\n      - ECB NOT ON FULLWORD BOUNDARY.\n      - ECB IS STORE-PROTECTED FROM CALLER.\n      - ECB NOT SPECIFIED FOR PGFIX.\n      - ECB SPECIFIED FOR PGOUT.\n))S171-04 - THE ERROR WAS DETECTED BY THE PAGE SERVICES ROUTINE.  THIS\n     GENERALLY INDICATES THAT THE CALLER DID NOT OWN THE VIRTUAL\n     STORAGE DEFINED BY THE VSL LIST ENTRY.\n))S171-16 - THE INPUT VSL OR ECB FAILED TO PASS THE PAGE SERVICES\n     INTERFACE VALIDITY CHECK.\n))S178 - GETMAIN ERROR.  AN AUTHORIZED PROGRAM REQUESTED VIRTUAL\n     STORAGE THAT REQUIRES MORE REAL STORAGE THAN IS AVAILABLE.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S178 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S178-RC)**\n))S178-04 - NOT ENOUGH REAL STORAGE FOR SPACE IN SQA SUBPOOL.\n))S178-08 - NOT ENOUGH REAL STORAGE FOR SPACE IN FIXED CSA SUBPOOL.\n))S178-0C - NOT ENOUGH REAL STORAGE FOR SPACE IN LSQA SUBPOOL.\n))S178-1C - LSQA REQUEST FAILED - PAGE TABLE PAGED OUT.\n))S178-20 - AUTHORIZED PRIVATE REQUEST FAILED - PAGE TABLE PAGED OUT.\n))S201 - THE WAIT MACRO EXPANSION CONTAINED AN INVALID EVENT CONTROL\n   BLOCK (ECB) ADDRESS OR THE PROGRAM IS NOT IN THE SAME KEY AS THE ECB.\n))S202 - THE POST MACRO INSTRUCTION ENCOUNTERED AN ERROR WHILE\n   PROCESSING AN EVENT CONTROL BLOCK (ECB).\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S202 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S202-RC)**\n))S202-00 - THE CONTROL PROGRAM FOUND AN INVALID REQUEST BLOCK (RB)\n   ADDRESS IN THE 3 LOW-ORDER BYTES OF THE ECB SPECIFIED IN A WAIT\n   MACRO. THE RB ADDRESS MUST REMAIN IN THE ECB UNTIL A POST IS ISSUED.\n))S202-04 - THE WAITING RB IS NOT ENABLED FOR INTERRUPTS.\n))S202-08 - FOR A POST IN A USER KEY AND A WAIT IN A SYSTEM KEY,\n   THE ECB TO BE POSTED DOES NOT MATCH ANY ECB BEING WAITED ON.\n))S202-0C - FOR A WAIT IN A USER KEY, THE ECB ADDRESS IS INVALID.\n))S204-00 - (00 IS THE ONLY POSSIBLE RETURN CODE ASSOCIATED WITH S204)\n   GETMAIN ERROR.  NOT ENOUGH REAL STORAGE AVAILABLE TO BACK A MINIMUM\n   NUMBER OF VSM CELLS (IN LSQA) DURING LOCAL CELL POOL EXPANSION.\n))S205-00 - (00 IS THE ONLY POSSIBLE RETURN CODE ASSOCIATED WITH S205)\n   GETMAIN ERROR.  NOT ENOUGH REAL STORAGE AVAILABLE TO BACK A MINIMUM\n   NUMBER OF VSM CELLS (IN LSQA) DURING LOCAL CELL POOL EXPANSION.\n))S206 - THE ADDRESS OF THE PARAMETER LIST, OR ONE OF THE PARAMETERS\n   PASSED TO A LINK, LOAD, XCTL, OR DELETE MACRO WAS INVALID.\n))S20A-00 - (00 IS THE ONLY POSSIBLE RETURN CODE ASSOCIATED WITH S20A)\n   GETMAIN ERROR.  NOT ENOUGH REAL STORAGE AVAILABLE TO BACK A MINIMUM\n   NUMBER OF VSM CELLS (IN LSQA) DURING LOCAL CELL POOL EXPANSION.\n))S213 - DSCB NOT FOUND; I/O ERROR IN READING OR WRITING DSCB.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S213 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S213-RC)**\n   --POSSIBLE CAUSE--\n     THE DATA SET IS NOT ON THE SPECIFIED VOLUME\n     DISP = MOD IS NOT COMPATIBLE WITH A VOLUME REFERENCE\n     INCORRECT TAPE POSITIONING\n))S213-04 - AN I/O ERROR OCCURRED READING THE FORMAT-1 DSCB, OR THE\n     FORMAT-1 DSCB COULD NOT BE FOUND ON THE FIRST VOLUME SPECIFIED\n     BY THE DD STATEMENT VOLUME SERIAL FIELD.\n))S213-08 - AN OPEN MACRO WAS ISSUED FOR A PASSWORD PROTECTED DATASET\n     BUT THE SYSTEM WAS UNABLE TO LOCATE THE PASSWORD DATASET.\n))S213-0C - AN I/O ERROR OCCURRED READING A FORMAT-1 DSCB FOR A DIRECT\n     OR INDEXED SEQUENTIAL DATASET, OR THE FORMAT-1 DSCB COULD NOT BE\n     FOUND ON THE VOLUME SPECIFIED BY THE DD STATEMENT.\n))S213-18 - AN I/O ERROR OCCURRED WRITING BACK A FORMAT-1 DSCB.\n))S213-20 - DURING AN OPEN, A VOLUME CONTAINED MORE THAN 16 EXTENTS\n     OF THE INDICATED DATASET.  GOOD LUCK FIGURING THIS ONE OUT!\n     (SAM ACCESS OF AN ICF VSAM COMPONENT, PERHAPS?)\n))S213-24 - DURING AN OPEN, A VOLUME HAD A TYPE OF SPLIT CYLINDER\n     ALLOCATION NOT SUPPORTED UNDER OS.  POSSIBLE DOS VOLUME.\n))S213-28 - AN OPEN MACRO WAS ISSUED FOR A DIRECT ACCESS DATASET\n     SPECIFING UNIT=SYSDA, BUT THE UNIT ALREADY CONTAINED 127 USERS,\n     WHICH IS THE MAXIMUM NUMBER ALLOWED.\n))S213-2C - THE FORMAT-1 DSCB NOT FOUND INSTALLATION EXIT MODULE\n     ENCOUNTERED AN ERROR.\n))S213-30 - AN ATTEMPT WAS MADE TO OPEN A PDS FOR OUTPUT,DISP=SHR.\n     THE PDS IS ALREADY OPEN IN THIS CONDITION.\n))S213-38 - WHEN OPENING A PDSE THE KEYLENGTH WAS NOT ZERO (0), OR THE\n     KEYLENGTH WAS NOT ZERO (0) OR EIGHT (8) FOR DIRECTORY INPUT.\n))S213-3C - WHEN OPENING A PDSE THE RECFM IN THE DCB WAS DIFFERENT\n     FROM THE RECFM ALREADY IN THE FORMAT-1 DSCB IN THE VTOC.\n))S213-40 - WHEN OPENING A PDSE, MACRF=(E) WAS SPECIFIED.  ACCESS OF\n     A PDSE BY EXCP IS NOT SUPPORTED.\n))S213-48 - OPEN DETECTED A BAD RETURN CODE FROM THE EXTENDED CACHE\n     ATTRIBUTE FACILITY.\n))S213-4C - WHEN OPENING A PDSE\n     DSORG=PS WAS SPECIFIED, BUT NO MEMBER WAS SPECIFIED.\n))S213-50 - OPEN DETECTED AN ERROR RETURN CODE FROM AN SMS SERVICE\n     WHILE PROCESSING A PDSE.\n))S213-58 - AN ATTEMPT WAS MADE TO CHANGE THE DSORG OF AN SMS-MANAGED\n   DATA SET TO UNMOVEABLE WHICH IS NOT ALLOWED ON SMS-MANAGED VOLUMES.\n))S213-60 - OPEN DETECTED AN ERROR RETURN CODE FROM THE RESIDENT\n   CONVERT ROUTINE WHILE PROCESSING A PDSE DATA SET.\n))S213-64 - AN INCORRECT OPEN OPTION WAS SPECIFIED FOR A PDSE DATA SET.\n))S213-68 - AN OPEN FOR A PDSE WAS ISSUED WITH RECFM=FB AND LRECL=0.\n))S213-6C - AN OPEN FOR A PDSE WAS ISSUED REQUESTING QSAM UPDATE\n   BUT LOCATE MODE WAS NOT SPECIFIED IN MACRF.\n))S213-70 - OPEN DETECTED A CROSS SYSTEM SHARE CONFLICT FOR THE PDSE.\n))S214 - I/O ERROR IN TAPE POSITIONING OR VOLUME DISPOSITION\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S214 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S214-RC)**\n))S214-04 - AN I/O ERROR OCCURRED READING A USER LABEL ON MAGNETIC TAPE.\n))S214-08 - AN I/O ERROR POSITIONING A MAGNETIC TAPE VOLUME DURING\n     EXECUTION OF A CLOSE MACRO.\n))S214-0C - AN I/O ERROR OCCURRED WHILE PROCESSING A READ BLOCK ID\n     COMMAND TO ESTABLISH THE TAPE POSITION.\n))S214-10 - THE NUMBER OF BLOCKS PROCESSED ACCORDING TO THE TAPE\n     POSITION DOES NOT MATCH THE DCB BLOCK COUNT.\n))S222 - EITHER THE OPERATOR OR THE JOB ENTRY SUBSYSTEM CANCELLED THE\n     JOB.  CHECK THE JOB LOG LISTING FOR MORE INFORMATION.  IF THERE IS\n     NO APPARENT EXPLANATION, CONTACT OPERATIONS BEFORE RESUBMITTING.\n   --POSSIBLE CAUSE--\n     LINE OR CARD ESTIMATE EXCEEDED\n     JCL ERROR CAUSED MOUNT REQUEST FOR INVALID OR NON-EXISTING VOLUME\n     REQUESTED DEVICES NOT CURRENTLY AVAILABLE (JOB MAY BE REQUEUED)\n))S233 - INVALID PARAMETERS HAVE BEEN PASSED TO SVC DUMP.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S233 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S233-RC)**\n))S233-04 - THE ADDRESS OF THE PARAMETER LIST IS ZERO.\n))S233-08 - THE PARAMETER LIST IS NOT A VALID SVC DUMP OR SNAP\n     PARAMETER LIST FOR MVS.\n))S233-0C - THE CALLER-SUPPLIED DATASET IS ON AN UNSUPPORTED DEVICE.\n))S233-10 - IN A USER-SUPPLIED STORAGE RANGE, THE START ADDRESS IS\n     GREATER THAN THE END ADDRESS.\n))S233-14 - THE USER-SUPPLIED DATA (FOR HDR= OR HDRAD=) IS GREATER\n     THAN 100 CHARACTERS.\n))S233-18 - THE 4K SQA BUFFER HAS BEEN REQUESTED (BUFFER=YES) BUT IT\n     IS NOT SERIALIZED (BY SETTING ON THE HIGH ORDER BIT IN CVTSDBF)\n))S233-1C - THE PARAMETER LIST OR WHAT IT POINTS TO IS IN THE 4K\n     SQA BUFFER.\n))S233-20 - THE USER SUPPLIED A DCB ADDRESS AND THE DCB IS NOT OPEN,\n     OR THE DCB ADDRESS IS INVALID.\n))S233-24 - THE SPECIFIED ASID PARAMETER WAS SYNTACTICALLY INVALID.\n     THE ASID WAS LESS THAN ZERO, OR GREATER THAN THE MAXIMUM VALUE.\n))S233-28 - AN ASID SPECIFIED IN THE ASID LIST POINTED TO BY THE\n     ASIDLST PARAMETER WAS SYNTACTICALLY INVALID.  THE ASID WAS LESS\n     THAN ZERO, OR GREATER THAN THE MAXIMUM VALUE.\n))S233-2C - THE ASIDLST ADDRESS IS ZERO, OR POINTS TO AN AREA THAT\n     THE USER CANNOT REFERENCE.\n))S233-38 - THE CALLER SPECIFIED THE 4K SQA BUFFER (BUFFER=YES) BUT\n     AN SVC DUMP WAS ALREADY IN PROGRESS.\n))S237 - THE ERROR OCCURRED DURING END-OF-VOLUME LABEL VERIFICATION.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S237 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S237-RC)**\n   --POSSIBLE CAUSE--\n     INCORRECT VOLUME SERIAL\n     INCORRECT VOLUME MOUNTED\n     INCORRECT LABELS\n))S237-04 - THE BLOCK COUNT IN THE DCB DOES NOT MATCH THAT IN THE\n     TRAILER LABEL. A BLOCK OF DATA HAS BEEN MISSED OR SKIPPED.\n))S237-08 - THE DSNAME IN A HEADER LABEL DOES NOT MATCH THAT IN THE\n     JFCB ON THE SECOND OR SUBSEQUENT VOLUME OF A MAGNETIC TAPE DATASET.\n     VERIFY THAT THE CORRECT VOLUME AND DSNAME WERE SPECIFIED.\n))S237-0C - THE NUMBER OF BLOCKS PROCESSED, WHICH IS DETERMINED BY THE\n     POSITION OF THE TAPE, DOES NOT MATCH THE DCB BLOCK COUNT.\n))S23E - THE ERROR WAS DETECTED DURING EXECUTION OF A DETACH MACRO\n     INSTRUCTION.  EITHER 1) THE PARAMETER PASSED TO DETACH IN REGISTER\n     1 WAS NOT A FULLWORD ADDRESS, 2) THE STORAGE KEY OF THAT ADDRESS\n     DID NOT MATCH THAT OF THE ISSUER OF THE DETACH, OR 3) THE\n     PARAMETER CONTAINED IN THE ADDRESSED FULLWORD OF THE ISSUER WAS\n     NOT THE ADDRESS OF A SUBTASK OF THE ISSUER OF THE DETACH.\n))S240 - AN ERROR OCCURRED DURING EXECUTION OF A RDJFCB MACRO.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S240 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S240-RC)**\n))S240-04 - A RDJFCB MACRO INSTRUCTION WAS ISSUED, BUT THE DCB DID NOT\n     CONTAIN A FOUNDATION EXTENSION BLOCK.\n))S240-08 - A RDJFCB MACRO INSTRUCTION WAS ISSUED, BUT NO EXLST ADDRESS\n     WAS FOUND IN THE DCB.\n))S240-0C - A RDJFCB MACRO INSTRUCTION WAS ISSUED, BUT NO JFCB EXIT\n     WAS SPECIFIED IN THE DCB EXIT LIST.\n))S240-10 - A RDJFCB MACRO INSTRUCTION WAS ISSUED, BUT THE JFCB BUFFER\n     IS NOT WITHIN THE USER'S STORAGE.\n))S278-00 - (00 IS THE ONLY POSSIBLE RETURN CODE ASSOCIATED WITH S278)\n   GETMAIN ERROR.  NOT ENOUGH REAL STORAGE AVAILABLE TO BACK A MINIMUM\n   NUMBER OF VSM CELLS (IN LSQA) DURING LOCAL CELL POOL EXPANSION.\n))S2F3 - JOB WAS BEING EXECUTED WHEN SYSTEM FAILURE OCCURRED -\n           A SYSTEM RESTART WAS PERFORMED\n))S300 - AN ERROR WAS DETECTED WHEN AN I/O OPERATION WAS REQUESTED;\n  *  EITHER THE IOBM FIELD IN THE I/O BLOCK (IOB) IS HIGHER THAN THE\n     MAXIMUM EXTENT COUNT (DEBNMEXT) IN THE DATA EXTENT BLOCK (DEB) OR\n  *  THE STORAGE PROTECTION KEY OF THE DATA EXTENT BLOCK WAS NOT ZERO\n     OR THE DEB VALIDITY CHECK ROUTINE RETURNED TO EXCP WITH A NON\n     ZERO RETURN CODE.  IN THE ABNORMAL TERMINATION DUMP, THE TCB FIELD\n     TCBEXCPD (AT OFFSET C0) POINTS TO THE EXCP PROBLEM DETERMINATION\n     AREA.  THE ITEMS IN THE PROBLEM DETERMINATION AREA OF GREATEST\n     INTEREST TO YOU ARE: (ALL OFFSETS IN HEX)\n      - OFFSET 10 CONTAINS A COPY OF THE REGISTERS WHEN EXCP DETERMINED\n        THE ERROR CONDITION.\n      - OFFSET 50 CONTAINS THE CONTENTS OF THE REQUEST QUEUE ELEMENT\n        (RQE) IF ALLOCATED, WHEN THE PROGRAM CHECK OCCURRED.\n     POSSIBLE CAUSES OF A NON-ZERO RETURN CODE FROM IFGDEBCK ARE:\n      - THE DEBTABLE DOES NOT EXIST.\n      - THE DEBTBLOF VALUE IN THE DEB IS LESS THAN ONE OR GREATER THAN\n        THE NUMBER OF ENTRIES IN THE DEBTABLE.\n      - THE DEB ADDRESS FROM THE DCB DOES NOT MATCH ANY DEBTABLE ENTRY.\n))S301 - AN ECB SPECIFIED IN A WAIT MACRO ALREADY HAD ITS WAIT FLAG ON.\n))S305 - THE ERROR OCCURRED DURING EXECUTION OF A FREEMAIN MACRO:\n     - THE SPECIFIED SUBPOOL COULD NOT BE FOUND.\n     - THE SP PARAMETER WAS SPECIFIED BUT THE VIRTUAL STORAGE AREA\n       TO BE RELEASED WAS NOT WITHIN THE SUBPOOL SPECIFIED.\n     - THE SP PARAMETER WAS NOT SPECIFIED BUT THE VIRTUAL STORAGE\n       AREA TO BE RELEASED WAS NOT WITHIN SUBPOOL ZERO.\n     - THE SP PARAMETER WAS SPECIFIED CORRECTLY, BUT THE BOUNDARIES\n       OF THE STORAGE AREAS TO BE FREED WERE NOT COMPLETELY DESCRIBED\n       BY A DESCRIPTOR QUEUE ELEMENT.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S305 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S305-RC)**\n))S305-08 - SQA STORAGE IS NOT IN THE SUBPOOL SPECIFIED.\n))S305-0C - CSA STORAGE IS NOT IN THE SUBPOOL SPECIFIED.\n))S305-10 - LSQA STORAGE IS NOT IN THE SUBPOOL SPECIFIED.\n))S305-18 - PRIVATE AREA SUBPOOL NOT FOUND.\n))S305-1C - ZERO LENGTH WAS NOT SPECIFIED ON A SUBPOOL FREEMAIN.\n))S306 - THE ERROR OCCURRED DURING THE EXECUTION OF THE LINK, XCTL,\n     ATTACH, OR LOAD SERVICE ROUTINES. THE AUTHORIZED ROUTINE REQUESTED\n     A MODULE WHICH COULD NOT BE FOUND ON AN AUTHORIZED LIBRARY, BUT A\n     COPY OF THE MODULE MAY HAVE BEEN FOUND ON A NONAUTHORIZED LIBRARY.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S306 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S306-RC)**\n))S306-04 - THE REQUESTED PROGRAM WAS NOT FOUND IN THE INDICATED SOURCE.\n     THAT IS, IT WAS FOUND IN AN UNAUTHORIZED LIBRARY.\n))S306-08 - AN UNCORRECTABLE I/O ERROR OCCURRED WHEN THE CONTROL\n     PROGRAM ATTEMPTED TO SEARCH THE DIRECTORY OF THE LIBRARY\n     CONTAINING THE MODULE, OR THE MODULE IS NOT RE-ENTRANT.\n))S306-0C - THE MODULE COULD NOT BE FOUND IN THE LPA OR IN THE LPA\n     DIRECTORY OR AN AUTHORIZED LIBRARY.\n))S306-10 - A LOAD MACRO REQUESTED A MODULE REQUIRING PAGE ALIGNMENT\n     WITH  GLOBAL=(YES,F)  SPECIFIED.\n))S306-20 - A JOB STEP MODULE WAS FOUND IN AN UNAUTHORIZED LNKLST\n     LIBRARY WHEN AN APF AUTHORIZED MODULE WAS REQUIRED.\n))S306-24 - AN AUTHORIZED SERVICE ATTEMPTED TO ACCESS A NON-REENTRANT\n     LOAD MODULE WHICH WAS LOADED FROM AN AUTHORIZED LIBRARY BY AN\n     UNAUTHORIZED CALLER.  ANOTHER COPY OF THE MODULE COULD NOT BE\n     FOUND.\n))S306-30 - THE USER WAS DENIED ACCESS TO THE PROGRAM BY THE\n     SYSTEM AUTHORIZATION FACILITY.\n))S306-34 - THE USER ATTEMPTED TO USE A PROGRAM WHILE A\n     PROGRAM-ACCESSED DATA SET WAS OPEN.\n))S30A - THE ERROR OCCURRED DURING EXECUTION OF AN R-FORM FREEMAIN\n     MACRO FOR ONE OF THE FOLLOWING REASONS:\n     - A FREEMAIN FOR AN ENTIRE SUBPOOL WAS REQUESTED (REGISTER 1 WAS\n       ZERO) BUT THE LENGTH IN REGISTER 0 WAS NOT SET TO ZERO.\n     - THE SPECIFIED SUBPOOL COULD NOT BE FOUND.\n     - THE SP PARAMETER WAS SPECIFIED, BUT THE VIRTUAL STORAGE AREA TO\n       BE RELEASED WAS NOT WITHIN THE SUBPOOL SPECIFIED.\n     - THE SP PARAMETER WAS NOT SPECIFIED, BUT THE VIRTUAL STORAGE AREA\n       TO BE RELEASED WAS NOT WITHIN SUBPOOL ZERO.\n     - THE SP PARAMETER WAS SPECIFIED CORRECTLY, BUT THE BOUNDARIES OF\n       THE STORAGE AREAS TO BE FREED WERE NOT COMPLETELY DESCRIBED BY\n       A DECSRIPTOR QUEUE ELEMENT (DQE).\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S30A OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S30A-RC)**\n))S30A-08 - SQA STORAGE IS NOT IN THE SUBPOOL SPECIFIED.\n))S30A-0C - CSA STORAGE IS NOT IN THE SUBPOOL SPECIFIED.\n))S30A-10 - LSQA STORAGE IS NOT IN THE SUBPOOL SPECIFIED.\n))S30A-14 - PRIVATE STORAGE IS NOT IN THE SUBPOOL SPECIFIED.\n))S30A-18 - PRIVATE AREA SUBPOOL NOT FOUND.\n))S30A-1C - ZERO LENGTH WAS NOT SPECIFIED ON A SUBPOOL FREEMAIN.\n))S30A-20 - FOR A CSA STORAGE FREEMAIN, THE AREA TO BE FREED IS\n   LARGER THAN WAS SPECIFIED ON THE ORIGINAL GETMAIN,\n   OR THE FREEMAIN START ADDRESS IS NOT VALID.\n))S30A-24 - FOR A PRIVATE STORAGE FREEMAIN, THE AREA TO BE FREED IS\n   LARGER THAN WAS SPECIFIED ON THE ORIGINAL GETMAIN,\n   OR THE FREEMAIN START ADDRESS IS NOT VALID.\n))S313 - AN ABEND OCCURRED WHILE OPENING A DASD DATA SET BECAUSE\n   OF A VTOC I/O ERROR OR A SYSTEM LOGIC ERROR.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S313 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S313-RC)**\n))S313-04 - AN I/O ERROR OCCURRED READING A FORMAT-2 OR FORMAT-3 DSCB\n     DURING THE EXECUTION OF AN OPEN MACRO.\n))S313-08 - OPEN RECEIVED A NON-ZERO RETURN CODE FROM DASD CALCULATION\n     SERVICES (DCS) WHILE TRYING TO GET A SYSTEM-DETERMINED BLOCKSIZE.\n))S314 - I/O ERROR IN READING DSCB\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S314 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S314-RC)**\n   --POSSIBLE CAUSE--\n     SORTIN JCL GAVE WRONG BLOCK SIZE FOR A VARIABLE RECORD\n))S314-04 - AN I/O ERROR OCCURRED READING A DSCB FOR A DATASET ON A\n     DIRECT ACCESS DEVICE DURING EXECUTION OF A CLOSE MACRO.\n))S314-08 - AN I/O ERROR OCCURRED READING A FORMAT-1 DSCB DURING\n     EXECUTION OF A CLOSE MACRO AND STANDARD USER LABELS WERE SPECIFIED.\n))S317 - AN OCCURRED DURING A BSAM CLOSE TYPE=T MACRO FOR A DASD FILE.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S317 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S317-RC)**\n))S317-04 - AN I/O ERROR OCCURRED READING A FORMAT-1 DSCB DURING\n     EXECUTION OF A BSAM CLOSE TYPE=T MACRO INSTRUCTION.\n))S317-08 - THE DSCB READ DURING EXECUTION OF A BSAM CLOSE TYPE=T\n     MACRO INSTRUCTION DID NOT HAVE THE EXPECTED FORMAT-1 OR FORMAT-4\n     FORMAT ID.\n))S322 - JOB OR STEP TIME EXCEEDED THE SPECIFIED LIMIT\n     PROGRAM IS IN A LOOP\n     INSUFFICIENT TIME PARAMETER ON JOB OR EXEC CARD\n))S32D - ADDRESS IN SEGMENT TABLE OR ENTRY TABLE OUTSIDE OF STORAGE\n         FOR JOB STEP\n     AN OVERLAY PROGRAM WAS FOUND TO CONTAIN A RECORD OF INCORRECT\n         LENGTH, OR AN I/O ERROR WAS ENCOUNTERED - RE-LINKEDIT IT\n))S337 - THE ERROR OCCURRED WHEN THE END OF A DATA SET WAS REACHED.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S337 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S337-RC)**\n   --POSSIBLE CAUSE--\n     NO END OF DATA ROUTINE WAS PROVIDED\n     TRIED TO READ PAST END OF FILE\n     TRIED TO WRITE ON A TAPE DEFINED AS INPUT\n))S337-04 - THE END OF DATASET WAS REACHED, BUT NO END-OF-DATASET\n     ROUTINE (EODAD) WAS SPECIFIED IN THE DCB.\n))S337-08 - NO END-OF-DATASET ROUTINE (EODAD) SPECIFIED IN THE DCB FOR\n     DD DUMMY DATASET.\n))S338 - AN UNAUTHORIZED TASK ATTEMPTED TO USE AUTHORIZED OPTIONS OF\n     THE ENQ MACRO INSTRUCTION.\n))S33E - A DETACH MACRO INSTRUCTION SPECIFYING THE STAE=YES OPERAND\n     HAS BEEN ISSUED BY THE ORIGINATING TASK, BUT THE SPECIFIED\n     SUBTASK HAS NOT COMPLETED EXECUTION.\n   --POSSIBLE CAUSE--\n     THIS MAY OR MAY NOT BE AN ERROR.  IF YOU INTEND FOR THE SUBTASK\n          TO COMPLETE PROCESSING BEFORE IT IS DETACHED, USE THE ECB\n          OR EXTR OPERAND ON THE ATTACH MACRO INSTRUCTION THAT\n          CREATES THE SUBTASK TO ACHEIVE SYNCHRONIZATION.\n))S378 - THE ERROR OCCURRED DURING EXECUTION OF AN RC OR RU FORM\n     FREEMAIN MACRO.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S378 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S378-RC)**\n   --POSSIBLE CAUSE--\n     A FREEMAIN FOR AN ENTIRE SUBPOOL WAS REQUESTED (REGISTER 1 WAS\n          ZERO) BUT THE LENGTH IN REGISTER 0 WAS NOT SET TO ZERO.\n     THE SPECIFIED SUBPOOL COULD NOT BE FOUND.\n     THE SP PARAMETER WAS SPECIFIED, BUT THE VIRTUAL STORAGE AREA TO BE\n          RELEASED WAS NOT WITHIN THE SUBPOOL SPECIFIED.\n     THE SP PARAMETER WAS NOT SPECIFIED, BUT THE VIRTUAL STORAGE AREA\n          TO BE RELEASED WAS NOT WITHIN SUBPOOL ZERO.\n     THE SP PARAMETER WAS SPECIFIED CORRECTLY, BUT THE BOUNDARIES OF\n          THE STORAGE AREA TO BE FREED WERE NOT COMPLETELY DESCRIBED\n          BY THE DESCRIPTOR QUEUE ELEMENT (DQE).\n))S378-08 - SQA STORAGE IS NOT IN THE SUBPOOL SPECIFIED.\n))S378-0C - CSA STORAGE IS NOT IN THE SUBPOOL SPECIFIED.\n))S378-10 - LSQA STORAGE IS NOT IN THE SUBPOOL SPECIFIED.\n))S378-14 - PRIVATE AREA STORAGE IS NOT IN THE SUBPOOL SPECIFIED.\n))S378-18 - PRIVATE AREA SUBPOOL NOT FOUND.\n))S378-1C - ZERO LENGTH WAS NOT SPECIFIED ON A SUBPOOL FREEMAIN.\n))S400 - THE DCB IN THE DEB DOES NOT EQUAL THE DCB ADDRESS IN THE IOB.\n     IN THE ABNORMAL TERMINATION DUMP, THE TCB FIELD TCBEXCPD (AT\n     OFFSET C0) POINTS TO THE EXCP PROBLEM DETERMINATION AREA.  THE\n     ITEMS IN THE PROBLEM DETERMINATION AREA OF GREATEST INTEREST TO\n     YOU ARE: (ALL OFFSETS IN HEX)\n      - OFFSET 10 CONTAINS A COPY OF THE REGISTERS WHEN EXCP DETERMINED\n        THE ERROR CONDITION.\n      - OFFSET 50 CONTAINS THE CONTENTS OF THE REQUEST QUEUE ELEMENT\n        (RQE) IF ALLOCATED, WHEN THE PROGRAM CHECK OCCURRED.\n))S402 - THE EVENTS POST MACRO INSTRUCTION ENCOUNTERED AN ERROR WHILE\n   PROCESSING AN EVENT CONTROL BLOCK (ECB).\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S402 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S402-RC)**\n))S402-00 - THE CONTROL PROGRAM FOUND AN INVALID EVENTS TABLE ADDRESS\n   IN THE 3 LOW-ORDER BYTES OF THE ECB SPECIFIED.\n))S402-04 - THE WAITING RB IS NOT ENABLED FOR INTERRUPTS.\n))S402-08 - FOR A WAIT OR POST IN A USER KEY, THE ECB ADDRESS IS\n   INVALID.\n))S406 - THE REQUESTED LOAD MODULE WAS MARKED BY THE LINKAGE EDITOR\n         AS ONLY LOADABLE.\n))S40A - AN R-FORM FREEMAIN MACRO IS ATTEMPTING TO FREE AN ENTIRE\n     SUBPOOL THAT SHOULD NOT BE FREEMAINED.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S40A OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S40A-RC)**\n))S40A-04 - ATTEMPTING TO FREEMAIN A SUBPOOL THAT CANNOT BE SUBPOOL\n     FREEMAINED.\n))S40A-08 - A  PROBLEM PROGRAM IS TRYING TO FREE SUBPOOL ZERO.\n))S40D - THIS COMPLETION CODE IS FOUND ONLY IN ASCBS.  BECAUSE OF\n     RECURSIVE ERRORS TRYING TO TERMINATE A TASK IT BECAME NECESSARY\n     TO TERMINATE THE MEMORY. THE RTM ATTEMPTS TO TERMINATE THE ADDRESS\n     SPACE. A DUMP MAY HAVE BEEN TAKEN TO THE SYS1.DUMP DATASET.\n))S413 - INPUT, INOUT, OR RDBACK SPECIFIED, BUT NO VOL SER IN DD; I/O\n         ERROR IN READING VOLUME LABEL; COULD NOT MOUNT VOLUME ON\n         DEVICE; VOLUMES SPECIFIED LESS THAN DEVICES ALLOCATED.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S413 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S413-RC)**\n   --POSSIBLE CAUSE--\n     FORGOTTEN VOLUME SERIAL FOR INPUT TAPE\n     HAD DISP NEW WHEN SHOULD HAVE HAD OLD\n     GENERATED AS NL, TRIED TO READ AS SL\n     MISSING OR INCONSISTENT DCB INFORMATION\n     VOLUME COULD NOT BE MOUNTED, OPERATOR MOUNTED SCRATCH\n     ERROR READING LABEL\n     OPENED A FILE AS INPUT WITHOUT FIRST GENERATING THE FILE\n     TRIED TO CLOSE A FILE WITHOUT OPENING IT\n     TRIED TO OPEN SECOND DATA SET ON A TAPE WITHOUT CLOSING THE FIRST\n     THE REQUESTED DRIVE WAS SWITCHED OFF\n     SORT VERB BLEW DUE TO SD NOT MATCHING FD WITH USING OR GIVING\n))S413-04 - NO UNIT IS AVAILABLE FOR MOUNTING THE VOLUME FOR THE\n     DATASET BEING OPENED.  THE VOLUME ALREADY ON THE ALLOCATED UNIT AS\n     SPECIFIED BY THE VOL=SER IS EITHER PERMANENTLY RESIDENT OR\n     RESERVED. IT COULD NOT BE DEMOUNTED IN ORDER TO MOUNT THE REQUIRED\n     VOLUME, OR THE VOLUME CANNOT BE DEMOUNTED BECAUSE ANOTHER DCB IS\n     OPEN ON THAT DEVICE OR THE DEVICE TYPE IS INCOMPATIBLE WITH THE\n     DSORG IN THE DCB. THIS ERROR MAY BE DUE TO A PREVIOUS ABNORMAL\n     TERMINATION ASSOCIATED WITH THE SAME UNIT IN THE SAME STEP.\n))S413-08 - AN I/O ERROR OCCURRED POSITIONING A MAGNETIC TAPE VOLUME.\n))S413-0C - AN I/O ERROR OCCURRED READING THE VOLUME LABEL ON A\n     MAGNETIC TAPE VOLUME.\n))S413-10 - AN I/O ERROR OCCURRED WRITING A TAPE MARK.\n))S413-18 - THE SPECIFIED DATASET WAS OPENED FOR INPUT, BUT NO VOLUME\n     SERIAL NUMBER WAS SPECIFIED ON THE DD STATEMENT.\n))S413-1C - AN OPEN MACRO WAS ISSUED FOR A DATASET, BUT THE VOLUME\n     SEQUENCE NUMBER ON THE ASSOCIATED DD STATEMENT WAS GREATER THAN\n     THE NUMBER OF VOLUMES CONTAINING THE DATASET.\n))S413-20 - AN I/O ERROR OCCURRED READING THE VOLUME LABEL OR FORMAT-4\n     DSCB ON A DIRECT ACCESS VOLUME.\n))S413-24 - AN OPEN MACRO WAS ISSUED FOR A DATASET ON MAGNETIC TAPE.\n     A DENSITY WAS SPECIFIED IN THE DCB DEN PARAMETER WHICH WAS\n     INCOMPATIBLE WITH THE RECORDING DENSITY OF THE DRIVE ALLOCATED\n     TO THE DATASET.\n))S413-28 - NON-ZERO RETURN CODE FROM OPEN DAVV (DIRECT ACCESS VOLUME\n     VERIFICATION) MODULE AFTER A IEFSSREQ MACRO INSTRUCTION.  THIS\n     CODE INDICATES THE SUBSYSTEM DISCOVERED A FUNCTIONAL OR LOGICAL\n     ERROR THAT IT COULD NOT PROCESS.\n))S413-2C - ERROR DURING MSS MOUNT, DEMOUNT, ACQUIRE OR RELINQUISH.\n))S413-30 - THE MSS HARDWARE MOUNTED THE WRONG VIRTUAL VOLUME.\n))S413-34 - LABEL=(N) WAS SPECIFIED, WHERE N IS GREATER THAN 1, AND\n     VOL=SER WAS NOT SPECIFIED FOR A TAPE DATASET.\n))S413-38 - DURING A READ BLOCK ID COMMAND TO ESTABLISH THE TAPE\n     POSITION, AN ERROR OCCURRED.\n))S413-40 - THE DEVICE DOES NOT SUPPORT THE RECORDING MODE REQUESTED\n     BY THE USER OR DETERMINED BY THE SYSTEM.\n))S413-44 - THE TAPE VOLUME DOES NOT CONFORM TO THE SINGLE RECORDING\n     MODE RULES.  FOR INPUT, THE VIOLATION OCCURRED WHEN THE TAPE\n     WAS WRITTEN WHEN THE RULES COULD NOT BE ENFORCED.  FOR OUTPUT,\n     THE ABEND PREVENTS ANY VIOLATION FROM HAPPENING.\n))S414 - AN ERROR OCCURRED DURING CLOSE PROCESSING FOR A DATASET ON A\n     DIRECT ACCESS DEVICE.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S414 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S414-RC)**\n))S414-04 - AN I/O ERROR OCCURRED WRITING A DSCB DURING CLOSE OF A\n     DASD FILE.\n))S414-08 - FOR A QSAM DATA SET EITHER AN I/O ERROR OCCURRED WHILE\n     FLUSHING THE BUFFERS DURING CLOSE PROCESSING, OR A CLOSE WAS\n     ISSUED IN THE CALLER'S SYNAD ROUTINE.\n))S417-04 - (04 IS THE ONLY POSSIBLE RETURN CODE ASSOCIATED WITH S417)\n     AN I/O ERROR OCCURRED WRITING AN UPDATED FORMAT-1 DSCB DURING\n     THE EXECUTION OF A BSAM CLOSE TYPE=T MACRO INSTRUCTION.\n))S437 - AN ERROR OCCURRED DURING END-OF-VOLUME.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S437 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S437-RC)**\n))S437-08 - WHEN FEOV WAS ISSUED, THE DCB POINTER WAS INVALID.\n))S437-0C - DEB NOT IN DEB TABLE.\n))S478 - AN RC-FORM OR RU-FORM FREEMAIN MACRO IS ATTEMPTING TO FREE AN\n     ENTIRE SUBPOOL THAT SHOULD NOT BE FREEMAINED.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S478 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S478-RC)**\n))S478-04 - ATTEMPTING TO FREEMAIN A SUBPOOL THAT CANNOT BE SUBPOOL\n     FREEMAINED.\n))S478-08 - A  PROBLEM PROGRAM IS TRYING TO FREE SUBPOOL ZERO.\n))S502 - DURING EXECUTION OF A POST MACRO INSTRUCTION, THE CONTROL\n   PROGRAM FOUND THAT THE EVENTS TABLE SPECIFIED IN THE ECB HAD NO\n   AVAILABLE ENTRIES TO CONTAIN THE POSTED ECB ADDRESS.\n))S504-04 - (04 IS THE ONLY POSSIBLE RETURN CODE ASSOCIATED WITH S504)\n     AT LEAST ONE OVERLAP AMONGST LENGTH LIST, ADDRESS LIST AND\n     PARAMETER LIST AT GETMAIN EXECUTION TIME.\n))S505-04 - (04 IS THE ONLY POSSIBLE RETURN CODE ASSOCIATED WITH S505)\n     AT LEAST ONE OVERLAP AMONGST LENGTH LIST, ADDRESS LIST AND\n     PARAMETER LIST AT FREEMAIN EXECUTION TIME.\n))S513 - THE ERROR OCCURRED DURING EXECUTION OF AN OPEN MACRO\n     INSTRUCTION FOR A DATA SET ON MAGNETIC TAPE.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S513 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S513-RC)**\n))S513-04 - AN OPEN MACRO WAS ISSUED FOR A MAGNETIC TAPE DATASET\n     ALLOCATED TO A DEVICE THAT ALREADY HAS AN OPEN DATASET ON IT.\n))S513-08 - A LABEL VIOLATED THE PUBLISHED STANDARD FOR THAT LABEL, AND\n     THE LABEL VALIDATION EXIT REQUESTED OPEN/EOV TO REJECT THE VOLUME.\n))S513-0C - NON-STANDARD VOL1 HEADER ON AN ASCII TAPE.\n))S522 - JOB OR TSO SESSION EXCEEDED MAXIMUM JOB WAIT TIME OR\n     OPERATOR DID NOT MOUNT THE REQUIRED TAPE WITHIN ALLOWED TIME LIMIT\n))S582-00 - (00 IS THE ONLY POSSIBLE RETURN CODE ASSOCIATED WITH S582)\n     WHILE PERFORMING RACHECK SVC PROCESSING, RACF WAS UNABLE TO VERIFY\n     A USER BECAUSE NO ACCESS CONTROL ENVIRONMENT (ACEE) WAS AVAILABLE.\n   --POSSIBLE CAUSE--\n     USER LOGGED ON OR JOB STARTED WHILE RACF WAS INACTIVE, BUT RACF\n     HAS SINCE BEEN REACTIVATED.\n))S604 - GETMAIN ERROR\n   --POSSIBLE CAUSE--\n     MISSING SORTLIB CARD\n     SUBSCRIPT ERROR - CLOBBERED FREE QUEUE ELEMENT\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S604 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S604-RC)**\n))S604-04 - THE PARAMETER LIST IS NOT ON A WORD BOUNDARY.\n))S604-08 - THE PARAMETER LIST IS IN PROTECTED STORAGE.\n))S604-0C - THE LENGTH LIST IS NOT ON A WORD BOUNDARY.\n))S604-10 - THE LENGTH LIST IS IN PROTECTED STORAGE.\n))S604-14 - THE ADDRESS LIST IS NOT ON A WORD BOUNDARY.\n))S604-18 - THE ADDRESS LIST IS IN PROTECTED STORAGE.\n))S604-1C - THE PARAMETER LIST REQUEST FLAGS ARE INVALID.\n))S605 - FREEMAIN ERROR\n   --POSSIBLE CAUSE--\n     MISSING SORTLIB CARD\n     SUBSCRIPT ERROR - CLOBBERED FREE QUEUE ELEMENT\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S605 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S605-RC)**\n))S605-04 - THE PARAMETER LIST IS NOT ON A WORD BOUNDARY.\n))S605-08 - THE PARAMETER LIST IS IN PROTECTED STORAGE.\n))S605-0C - THE LENGTH LIST IS NOT ON A WORD BOUNDARY.\n))S605-10 - THE LENGTH LIST IS IN PROTECTED STORAGE.\n))S605-14 - THE ADDRESS LIST IS NOT ON A WORD BOUNDARY.\n))S605-18 - THE ADDRESS LIST IS IN PROTECTED STORAGE.\n))S605-1C - THE PARAMETER LIST REQUEST FLAGS ARE INVALID.\n))S60A - (NON-MVS/XA) FREEMAIN QUEUE ELEMENT OR ADDRESS ERROR\n     NEEDS MORE CORE\n     JCL FOR INPUT DISKS REQUESTED 2 UNITS, GAVE 1 VOLUME SERIAL\n     FORGOT DD CARD FOR SYS1.SORTLIB\n))S613 - I/O ERROR IN TAPE POSITIONING OR LABEL PROCESSING\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S613 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S613-RC)**\n   --POSSIBLE CAUSE--\n     TAPE LABEL WAS NOT IN REQUESTED DENSITY\n     DCB MISSING\n     DEN MISSING ON A TAPE THAT REQUIRES IT DEFAULT DEN=3 (1600 BPI)\n     RECFM=F WAS SPECIFIED FOR A FILE WHICH WAS FB\n     INCORRECT HEADER\n     TAPE POSITIONING ERROR\n     TAPE DRIVE FAILURE DURING OPEN\n))S613-04 - AN I/O ERROR OCCURRED POSITIONING A MAGNETIC TAPE VOLUME.\n))S613-08 - AN I/O ERROR OCCURRED READING A LABEL ON A MAGNETIC TAPE.\n))S613-0C - AN INVALID LABEL WAS READ FROM A MAGNETIC TAPE VOLUME.\n     THIS ERROR MAY BE DUE TO A PREVIOUS ABNORMAL TERMINATION\n     ASSOCIATED WITH THE SAME TAPE SINCE IT WAS LAST MOUNTED, POSSIBLY\n     IN A PREVIOUS JOB OR STEP, LEAVING THE TAPE POSITIONED IMPROPERLY.\n))S613-10 - AN I/O ERROR OCCURRED WRITING A TAPE LABEL.\n))S613-14 - AN I/O ERROR OCCURRED WRITING A TAPE MARK AFTER THE HEADER\n     LABELS.\n))S614 - AN ERROR OCCURRED DURING CLOSE PROCESSING FOR A DATASET ON A\n     DIRECT ACCESS DEVICE OR FOR A SUBSYSTEM DATASET.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S614 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S614-RC)**\n   --POSSIBLE CAUSE--\n     OPERATOR DISMOUNTED VOLUME WHILE PROGRAM WAS PROCESSING\n))S614-04 - AN I/O ERROR OCCURRED WRITING A FILE MARK FOR A DATASET ON\n     A DIRECT ACCESS DEVICE DURING EXECUTION OF A CLOSE MACRO.\n   --POSSIBLE CAUSE--\n     OPERATOR DISMOUNTED VOLUME WHILE PROGRAM WAS PROCESSING\n))S614-08 - A FILE MARK SHOULD HAVE BEEN WRITTEN ON AN OUTPUT DATASET.\n     THE DCBFDAD FIELD IN THE DCB INDICATED AN EXTENT NUMBER IN THE\n     DEB GREATER THAN THE NUMBER OF EXTENTS IN THE DATASET.\n     CONSEQUENTLY, IT COULD NOT BE DETERMINED WHERE THE FILE MARK\n     SHOULD HAVE BEEN WRITTEN.\n))S614-0C - IEFSSREQ MACRO RETURNED AN ERROR CODE IN REGISTER 15 WHICH\n     INDICATES THAT THE SUBSYSTEM WAS NOT OPERATING.\n))S614-10 - A SPOOLED OR SUBSYSTEM DATASET COULD NOT BE CLOSED BY THE\n     JOB ENTRY SUBSYSTEM OR ALTERNATE SUBSYSTEM.\n))S614-14 - A CLOSE MACRO INSTRUCTION DETECTED AN ERROR RETURN CODE\n     FROM AN SMS SERVICE WHILE PROCESSING A PDSE DATA SET.\n))S622 - TSO SESSION WAS CANCELLED\n     OPERATOR STOPPED TSO OR CANCELLED THE USER\n     USER SIGNALLED ATTN AFTER THE ALLOCATION PROCESS HAD COMPLETED\n     THE USER DISCONNECTED HIS TERMINAL FROM THE SYSTEM\n))S637 - I/O ERROR IN WRITING TAPE MARK, TAPE POSITIONING, READING\n         LABEL, SENSING FOR FILE PROTECTION RING; DCB BIT DOES NOT\n         INDICATE CONCATENATION OF UNLIKE ATTRIBUTES.\n     IMPROPER INFO ON JCL FOR MULTIREEL NSL TAPE\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S637 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S637-RC)**\n))S637-04 - AN I/O ERROR OCCURRED WHILE READING A TAPE LABEL, WRITING\n     A TAPE MARK, OR POSITIONING A MAGNETIC TAPE VOLUME.\n))S637-08 - FOLLOWING USER TRAILER LABEL PROCESSING, AN I/O ERROR\n     OCCURRED POSITIONING A MAGNETIC TAPE.\n))S637-0C - CONCATENATION OF DATASETS WITH UNLIKE ATTRIBUTES WAS\n     DETECTED, BUT NOT SPECIFIED IN THE DCB.\n))S637-10 - AN I/O ERROR OCCURRED WHILE POSITIONING A MAGNETIC TAPE\n     DATASET THAT WAS OPENED WITH THE OPTION INPUT OR INOUT TO BE READ\n     BACKWARD. IF IT IS A TAPE WITH STANDARD LABELS, THE ERROR OCCURRED\n     POSITIONING AT THE LABELS.  IF IT IS A TAPE WITH NO LABELS, THE\n     ERROR OCCURRED POSITIONING AT THE DATA.\n))S637-14 - AN I/O ERROR IN TAPE POSITIONING OCCURRED FOR A DATASET\n     WITH THE LEAVE OPTION SPECIFIED IN THE OPEN MACRO OR IN THE\n     FEOV MACRO.\n))S637-18 - AN I/O ERROR IN TAPE POSITIONING OCCURRED FOR A DATASET\n     OPENED WITH THE REREAD OPTION.\n))S637-1C - AN I/O ERROR IN TAPE POSITIONING OCCURRED WHEN FEOV WAS\n     ISSUED FOR A DATASET WITH DISP=PASS AND NO OPEN OPTION 2 SPECIFIED.\n))S637-20 - RDBACK WAS INVALIDLY SPEICFIED FOR A NEW CONCATENATED TAPE\n     VOLUME.  RDBACK IS NOT SUPPORTED WITH CONCATENATION.\n))S637-24 - AN I/O ERROR OCCURRED REWINDING A SCRATCH MAGNETIC TAPE\n     VOLUME.  EITHER FEOV WITH A REWIND OPTION WAS ISSUED, OR NO OPEN\n     OPTION 2 WAS SPECIFIED WHEN THE DISPOSITION WAS NOT PASS.\n))S637-2C - AN I/O ERROR OCCURRED WHILE REWINDING A MAGNETIC TAPE\n     VOLUME PRIOR TO VERIFYING THE VOLUME LABEL.\n))S637-34 - AN I/O ERROR OCCURRED DURING END OF VOLUME PROCESSING\n     WHILE READING THE VOLUME LABEL OF A MAGNETIC TAPE.\n))S637-38 - AN I/O ERROR OCCURRED WHILE POSITIONING A TAPE WITHOUT\n     LABELS OR WITH NONSTANDARD LABELS.\n))S637-3C - AN I/O ERROR OCCURRED WHILE POSITIONING A CONCATENATED\n     MAGNETIC TAPE DATASET.\n))S637-40 - AN I/O ERROR OCCURRED POSITIONING A MAGNETIC TAPE DATASET\n     THAT WAS OPENED WITH THE OPTION INPUT OR INPUT TO BE READ FORWARD.\n))S637-44 - AN I/O ERROR OCCURRED WHILE CHECKING SENSE BYTES TO\n     DETERMINE IF A FILE PROTECT RING IS ON A MAGNETIC TAPE CONTAINING\n     A DATASET OPENED FOR INOUT.\n))S637-4C - AN I/O ERROR OCCURRED IN TAPE POSITIONING FOLLOWING USER\n     HEADER LABEL PROCESSING.\n))S684 - THE MODULE CALLING THE RACF MANAGER OR THE RACLIST FUNCTION\n     IS NOT AUTHORISED TO THE SVC FUNCTION.THE MODULE CALLING THE RACF\n     MANAGER MUST BE AUTHORISED (APF-AUTHORISED, IN SYSTEM KEY 0-7, OR\n     IN SUPERVISOR STATE).  THE MODULE CALLING THE RACLIST FUNCTION\n     MUST BE AUTHORISED (APF-AUTHORISED, IN SYSTEM KEY 0-7, OR IN\n     SUPERVISOR STATE) OR IN THE RACF-AUTHORISED CALLER TABLE AND\n     FETCHED FROM AN AUTHORISED LIBRARY.\n      - POSSIBLE USER ERROR.  IF THE RACF MANAGER WAS CALLED, VERIFY\n        THAT THE CALLING MODULE WAS EXECUTING IN AN AUTHORISED\n        STATE.  IF THE RACLIST FUNCTION WAS CALLED, VERIFY THAT\n        THE MODULE NAME WAS ENTERED IN THE RACF-AUTHORISED CALLER\n        TABLE AND THAT THE CALLING MODULE WAS LINK EDITED INTO\n        AN AUTHORISED LIBRARY.\n))S700 - A PROGRAM CHECK OCCURRED DURING EXCP PROCESSING OF AN I/O\n     REQUEST.  THE PROGRAM CHECK OCCURRED IN A SUPERVISOR SERVICE\n     ROUTINE CALLED BY EXCP. THIS IS LIKELY NOT A PROGRAMMER ERROR.\n     IN THE ABNORMAL TERMINATION DUMP, THE TCB FIELD TCBEXCPD (AT\n     OFFSET C0) POINTS TO THE EXCP PROBLEM DETERMINATION AREA.  THE\n     ITEMS IN THE PROBLEM DETERMINATION AREA OF GREATEST INTEREST TO\n     YOU ARE: (ALL OFFSETS IN HEX)\n      - OFFSET 2 CONTAINS A FLAG BYTE INDICATING WHERE THE ERROR\n        OCCURRED.\n        THE BIT PATTERN IS AS FOLLOWS:\n        1... ....  ERROR IN SVC PORTION OF EXCP\n        .1.. ....  ERROR IN SRB PORTION OF EXCP\n        ..1. ....  ERROR IN PCI APPENDAGE\n        ...1 ....  ERROR IN CHE APPENDAGE\n        .... 1...  ERROR IN ABE APPENDAGE\n        .... .1..  ERROR IN EOE APPENDAGE\n        .... ..1.  ERROR IN PGFX APPENDAGE\n        .... ...1  APENDAGE IS ACTIVE\n        .... ....  ERROR IN SIO APPENDAGE\n      - OFFSET 4 CONTAINS A COPY OF THE PROGRAM STATUS WORD (PSW)\n        BEFORE RTM WAS ENTERED.\n      - OFFSET E CONTAINS THE INTERRUPTION CODE.\n      - OFFSET 10 CONTAINS A COPY OF THE REGISTERS WHEN EXCP ISSUED\n        THE ABEND MACRO.\n      - OFFSET 54 CONTAINS THE CONTENTS OF THE REQUEST QUEUE ELEMENT\n        (RQE), IF ALLOCATED, FOR THE I/O REQUEST BEING PROCESSED.\n))S706 - THE REQUESTED LOAD MODULE WAS MARKED BY THE LINKAGE EDITOR\n         AS NOT EXECUTABLE.\n     BAD PRIOR LINKEDIT - CHECK THE LKED SYSPRINT\n))S713 - TRIED TO WRITE ON A DATASET WHOSE DATE PROTECTION HAD NOT\n         EXPIRED. OPERATOR REPLIED 'M' TO IEC507D TO HONOR EXP DATE.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S713 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S713-RC)**\n))S713-04 - A DATASET ON MAGNETIC TAPE WAS OPENED FOR INOUT, OUTIN,\n     OUTPUT, OUTINX, OR EXTEND, BUT THE VOLUME CONTAINED A DATASET\n     WHOSE EXPIRATION DATE HAD NOT BEEN REACHED.\n))S713-08 - AN OPEN MACRO WAS ISSUED WITH INOUT FOR A DATASET ON A\n     DIRECT ACCESS DEVICE WITH DISP=OLD SPECIFIED ON THE DD STATEMENT.\n     THE EXPIRATION DATE ON THE DATASET HAD NOT BEEN REACHED.\n))S713-0C - THE OPERATOR REPLIED 'M' TO IEC704A TO REJECT THE REQUEST\n     TO REWRITE THE TAPE VOLUME'S VOL1 HEADER.\n))S714 - I/O ERROR IN LABEL PROCESSING - CLOSE FOR MAGNETIC TAPE\n     TAPE DRIVE FAILURE DURING CLOSE\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S714 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S714-RC)**\n))S714-04 - AN I/O ERROR OCCURRED WRITING TRAILER LABEL 1 FOR A DATASET\n     ON MAGNETIC TAPE DURING EXECUTION OF A CLOSE MACRO.\n))S714-08 - AN I/O ERROR OCCURRED WRITING TRAILER LABEL 2 FOR A DATASET\n     ON MAGNETIC TAPE DURING EXECUTION OF A CLOSE MACRO.\n))S714-0C - AN I/O ERROR OCCURRED WRITING A TAPE MARK DURING EXECUTION\n     OF A CLOSE MACRO.\n))S717 - AN I/O ERROR OCCURRED DURING EXECUTION OF A BSAM CLOSE TYPE=T\n     MACRO INSTRUCTION.  THE RETURN CODE INDICATES THE EXACT ERROR.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S717 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S717-RC)**\n))S717-04 - I/O ERROR FOR BSAM CLOSE TYPE=T WHEN\n     WRITING A TAPE MARK FOLLOWING THE LAST RECORD\n))S717-08 - I/O ERROR FOR BSAM CLOSE TYPE=T WHEN\n     WRITING TRAILER LABEL-1 OR TRAILER LABEL-2\n))S717-0C - I/O ERROR FOR BSAM CLOSE TYPE=T WHEN\n     WRITING A TAPE MARK FOLLOWING THE TRAILER LABELS\n))S717-10 - I/O ERROR FOR BSAM CLOSE TYPE=T WHEN\n     READING TRAILER LABEL-1 TO UPDATE THE DCB BLOCK COUNT\n))S722 - THE OUTPUT LIMIT SPECIFIED BY THE OUTLIM KEYWORD ON THE SYSOUT\n     DD STATEMENT OR BY THE LINES KEYWORD ON THE JOBPARM DD STATEMENT\n     WAS EXCEEDED.\n))S737 - I/O ERROR; DSCB NOT FOUND FOR MULTI-VOLUME OR CONCATENATED\n         DATA SET.\n     BE SURE ALL THE DATA SETS EXIST FOR CONCATENATED DATA SETS\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S737 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S737-RC)**\n))S737-04 - AN I/O ERROR OCCURRED READING A DSCB DURING END OF VOLUME\n     PROCESSING OR THE DSCB COULD NOT BE FOUND ON THE SPECIFIED VOLUME.\n))S737-08 - AN I/O ERROR OCCURRED READING A DIRECT ACCESS VOLUME\n     LABEL DURING END OF VOLUME PROCESSING.\n))S737-0C - AN I/O ERROR OCCURRED READING THE DSCB FOR A CONCATENATED\n     PARTITIONED DATASET.\n))S737-10 - AN I/O ERROR OCCURRED WRITING A FILE MARK FOR A DATASET\n     ON A DIRECT ACCESS DEVICE.\n))S737-14 - AN I/O ERROR OCCURRED READING A DSCB PREPARING FOR USER\n     TRAILER LABEL PROCESSING.\n))S737-1C - AN I/O ERROR OCCURRED WHILE READING A FORMAT-3 DSCB.\n))S737-24 - A MISSING MEMBER NAME WAS DETECTED BY BLDL WHILE SEARCHING\n     FOR THE TTR OF A CONCATENATED MEMBER.\n))S737-2C - THE ERROR OCCURRED WHEN A FEOV MACRO WAS ISSUED WHILE\n     ATTEMPTING TO WRITE A FILE MARK AT THE END OF DATA.  THE DCBFDAD\n     FIELD IN THE DCB INDICATED AN EXTENT NUMBER IN THE DEB GREATER\n     THAN THE NUMBER OF EXTENTS IN THE DATASET.  CONSEQUENTLY IT COULD\n     NOT BE DETERMINED WHERE THE FILE MARK SHOULD HAVE BEEN WRITTEN.\n))S737-3C - THE FORMAT-1 DSCB NOT FOUND INSTALLATION EXIT MODULE\n     ENCOUNTERED AN ERROR.\n))S738 - AN UNEXPECTED ERROR OCCURRED DURING THE EXECUTION OF AN ENQ\n     MACRO. RELATED INFORMATION IS RECORDED IN SYS1.LOGREC.\n))S800 - AN ERROR OCCURRED WHEN EXCP ATTEMPTED TO FIX A PAGE FOR\n     THIS EXCP REQUEST.\n))S804 - REQUEST FOR 0 BYTES OF VIRTUAL STORAGE OR NOT ENOUGH VIRTUAL\n         STORAGE AVAILABLE FOR GETMAIN REQUEST.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S804 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S804-RC)**\n   --POSSIBLE CAUSE--\n     PROGRAM EXCEEDED REGION SIZE\n))S804-04 - THERE IS NOT ENOUGH VIRTUAL SQA TO SATISFY THE REQUEST.\n))S804-08 - THERE IS NOT ENOUGH VIRTUAL CSA TO SATISFY THE REQUEST.\n))S804-0C - THERE IS NOT ENOUGH VIRTUAL LSQA TO SATISFY THE REQUEST.\n))S804-10 - THERE IS NOT ENOUGH PRIVATE AREA TO SATISFY THE REQUEST.\n    MAY BE A V=R REGION BEFORE ITS INITIALIZATION HAS COMPLETED.\n))S804-1C - THERE IS NOT ENOUGH VIRTUAL LSQA FOR VSM'S CELLPOOL\n     REQUIRED DURING THE REQUEST.\n))S805-1C - (1C IS THE ONLY POSSIBLE RETURN CODE ASSOCIATED WITH S805)\n     THERE IS NOT ENOUGH VIRTUAL LSQA FOR VSM'S CELLPOOL REQUIRED\n     DURING THE FREEMAIN REQUEST.\n))S806 - BLDL DETECTED ERROR: MODULE NOT FOUND OR I/O ERROR DURING\n         DIRECTORY SEARCH\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S806 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S806-RC)**\n   --POSSIBLE CAUSE--\n    MISSING JOBLIB OR STEPLIB CARD\n    TRIED TO EXECUTE A NON-EXISTENT PROGRAM\n    TRIED TO EXECUTE IN BATCH A PROGRAM ASSEMBLED WITH 'TEST' OPTION\n    SYSIN DESCRIBED INCORRECTLY TO LKED OR NAME CARD MISSING\n))S806-04 - THE PROGRAM ENTRY POINT SPECIFIED WAS NOT FOUND IN THE\n     INDICATED LIBRARY (PRIVATE LIBRARY, JOB LIBRARY, OR LINK LIBRARY).\n))S806-08 - AN UNCORRECTABLE INPUT/OUTPUT ERROR OCCURRED WHEN THE BLDL\n     CONTROL PROGRAM ROUTINE ATTEMPTED TO SEARCH THE DIRECTORY OF THE\n     LIBRARY THAT CONTAINED THE PROGRAM WHOSE ENTRY POINT WAS\n     SPECIFIED.  THIS CAN OCCUR IF THE INDICATED LIBRARY IS AN\n     UNINITIALIZED PARTITIONED DATASET.\n))S806-0C - THE SUPERVISOR ATTEMPTED TO SEARCH A LIBRARY FOR THE\n     SPECIFIED ENTRY POINT, BUT THE DCB OF THE LIBRARY WAS NOT OPEN.\n))S806-10 - AN EXPLICIT LOAD WAS ISSUED WITH NO DCB SPECIFIED.\n))S806-14 - AN SVC ROUTINE REQUIRED BY THE SYSTEM COULD NOT BE FOUND IN\n     THE LINK PACK AREA.\n))S806-18 - AN SVC ROUTINE REQUIRED BY THE SYSTEM COULD NOT BE FOUND IN\n     THE LINK PACK AREA BECAUSE THE DIRECTORY WAS NOT YET BUILT.\n))S806-1C - SPECIFIED DCB FOR ATTACH, LINK, LOAD, OR XCTL IS INCORRECT.\n))S80A - REQUEST FOR 0 BYTES OF VIRTUAL STORAGE OR NOT ENOUGH VIRTUAL\n         STORAGE AVAILABLE FOR GETMAIN OR FREEMAIN REQUEST.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S80A OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S80A-RC)**\n))S80A-04 - THERE IS NOT ENOUGH VIRTUAL SQA TO SATISFY THE REQUEST.\n))S80A-08 - THERE IS NOT ENOUGH VIRTUAL CSA TO SATISFY THE REQUEST.\n))S80A-0C - THERE IS NOT ENOUGH VIRTUAL LSQA TO SATISFY THE REQUEST.\n))S80A-10 - THERE IS NOT ENOUGH PRIVATE AREA TO SATISFY THE REQUEST.\n    MAY BE A V=R REGION BEFORE ITS INITIALIZATION HAS COMPLETED.\n))S80A-1C - THERE IS NOT ENOUGH VIRTUAL LSQA FOR VSM'S CELLPOOL\n     REQUIRED DURING THE REQUEST.\n))S813-04 - (04 IS THE ONLY POSSIBLE RETURN CODE ASSOCIATED WITH S813)\n     AN OPEN MACRO WAS ISSUED FOR A DATASET ON MAGNETIC TAPE, BUT THE\n     DATASET NAME ON THE HEADER LABEL DID NOT MATCH THAT IN THE JFCB.\n   --POSSIBLE CAUSE--\n    WRONG DSNAME OR VOLUME SERIAL - JCL DISAGREES WITH LABEL\n    INCORRECT RECORD FORMAT OR BLOCK SIZE\n    THE REQUESTED DRIVE WAS NOT SWITCHED TO THIS MACHINE\n))S822 - A REGION REQUIRED TO RUN THE STEP COULD NOT BE OBTAINED.  ONE\n     OF THE FOLLOWING MESSAGES WILL BE WRITTEN TO THE PROGRAMMER,\n     DEPENDING UPON WHETHER THE JOB WAS AN ORDINARY JOB OR A DEFERRED\n     CHECKPOINT RESTART:\n     - IEF085I REGION UNAVAILABLE, ERROR CODE = CDE\n     - IEF186I REGION UNAVAILABLE FOR RESTART, ERROR CODE = CDE\n   ***IF THE IEF085I OR IEF186I ERROR CODE IS AVAILABLE, SUPPLY IT ***\n   ***IN THE S822 OPERAND FOR MORE INFORMATION: H ABEND O(S822-EC)***\n))S822-08 - IEF085I - A V=V REGION WAS REQUESTED AND A REGION SIZE WAS\n     SPECIFIED WHICH WAS LARGER THAN THE PRIVATE AREA, OR A V=R REGION\n     WAS REQUESTED AND A REGION SIZE GREATER THAN THE V=R AREA WAS\n     SPECIFIED.\n     IEF186I - THE REGION PARAMETER WAS INCREASED SO THAT THE REGION\n     COULD NOT BE ALLOCATED OR THE CONFIGURATION OF THE SYSTEM CHANGED\n     SO THAT THE REGION COULD NOT BE OBTAINED:\n        - FOR ADDRSPC=REAL, THE SIZE OF THE REAL AREA WAS DECREASED.\n        - FOR ADDRSPC=VIRT, THE SIZE OF THE PRIVATE AREA DECREASED\n          BECAUSE THE SIZE OF THE NUCLEUS INCREASED OR THE SIZE OF THE\n          SQA OR THE IPA INCREASED.\n))S822-16 - IEF085I - A V=R AREA WAS REQUESTED, BUT EITHER LONG-FIXED\n     OR DAMAGED PAGES IN THE V=R AREA MADE IT IMPOSSIBLE TO OBTAIN THE\n     REQUESTED REGION, OR A V=R REGION WAS  REQUESTED AND THERE WAS NOT\n     ENOUGH SQA AVAILABLE FOR THE SYSTEM TO COMPLETE THE PROCESSING OF\n     THE REQUEST.\n     IEF186I - IF A REAL REGION WAS REQUESTED, EITHER LONG-FIXED OR\n     DAMAGED PAGES IN THE REAL AREA MADE IT IMPOSSIBLE TO OBTAIN THE\n     REQUIRED REGION.\n))S822-20 - IEF085I AND IEF186I - EITHER A V=V OR V=R REGION WAS\n     REQUESTED FRAGMENTATION BY LSQA, SWA, OR SUBPOOLS 229 OR 230\n     HAS MADE IT IMPOSSIBLE TO OBTAIN THE REQUESTED REGION.\n))S822-24 - IEF085I AND IEF186I - A REQUEST FOR A V=R REGION COULD NOT\n     BE SATISFIED BECAUSE THE INSTALLATION GETPART EXIT ROUTINE\n     REJECTED THE REQUEST.\n))S837 - THE ERROR OCCURRED DURING END OF VOLUME FOR A SEQUENTIAL\n     DATA SET.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S837 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S837-RC)**\n))S837-04 - THE UNIT IS NOT CAPABLE OF HANDLING THE REQUESTED DENSITY.\n))S837-08 - THE VOLUME SERIAL NUMBER WAS NOT FOUND IN THE JFCB.\n   --POSSIBLE CAUSES--\n     VOLUME COUNT TO SMALL IN VOL PARAMETER OF DD STATEMENT\n     OPEN TYPE=J WAS USED TO CHANGE VOLUME SERIAL BUT NOT WRITTEN BACK\n))S837-0C - ANOTHER DATA SET ON THE VOLUME WAS IN USE.\n))S837-10 - THE DEVICE DOES NOT SUPPORT THE SELECTED RECORDING MODE.\n))S837-14 - THE TAPE VOLUME DOES NOT CONFORM TO THE SINGLE RECORDING\n     MODE RULES.  FOR INPUT, THE VIOLATION OCCURRED WHEN THE TAPE\n     WAS WRITTEN WHEN THE RULES COULD NOT BE ENFORCED.  FOR OUTPUT,\n     THE ABEND PREVENTS ANY VIOLATION FROM HAPPENING.\n))S878 - REQUEST FOR 0 BYTES OF VIRTUAL STORAGE OR NOT ENOUGH VIRTUAL\n         STORAGE AVAILABLE FOR GETMAIN OR FREEMAIN REQUEST.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S878 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S878-RC)**\n))S878-04 - THERE IS NOT ENOUGH VIRTUAL SQA TO SATISFY THE REQUEST.\n))S878-08 - THERE IS NOT ENOUGH VIRTUAL CSA TO SATISFY THE REQUEST.\n))S878-0C - THERE IS NOT ENOUGH VIRTUAL LSQA TO SATISFY THE REQUEST.\n))S878-10 - THERE IS NOT ENOUGH PRIVATE AREA TO SATISFY THE REQUEST.\n    MAY BE A V=R REGION BEFORE ITS INITIALIZATION HAS COMPLETED.\n))S878-14 - A NEGATIVE STORAGE AMOUNT WAS SPECIFIED FOR A GETMAIN.\n))S878-18 - A NEGATIVE STORAGE AMOUNT WAS SPECIFIED FOR A FREEMAIN.\n))S878-1C - THERE IS NOT ENOUGH VIRTUAL LSQA FOR VSM'S CELLPOOL\n     REQUIRED DURING THE REQUEST.\n))S905-04 - (04 IS THE ONLY POSSIBLE RETURN CODE ASSOCIATED WITH S905)\n     AREA TO BE FREED BY FREEMAIN IS NOT ON A DOUBLEWORD BOUNDARY.\n))S90A-04 - (04 IS THE ONLY POSSIBLE RETURN CODE ASSOCIATED WITH S90A)\n     THE ERROR OCCURRED DURING THE EXECUTION OF AN R-FORM FREEMAIN\n     MACRO.  THE ADDRESS OF THE STORAGE AREA TO BE RELEASED WAS NOT ON\n     A DOUBLEWORD BOUNDARY (A MULTIPLE OF 8).\n))S913 - THE ERROR OCCURRED DURING 1) THE EXECUTION OF AN OPEN MACRO\n         OR DURING END-OF-VOLUME PROCESSING FOR A PASSWORD PROTECTED\n         DATASET, OR 2) THE EXECUTION OF AN OPEN MACRO INVOLVING A\n         CHECKPOINT DATASET.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***S913 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(S913-RC)**\n   --POSSIBLE CAUSE--\n     OPERATOR FAILED TO SUPPLY CORRECT PASSWORD FOR PROTECTED DATASET\n     UNAUTHORIZED ATTEMPT TO USE LABEL=BLP\n     PREVIOUS DATASET ON THIS TAPE WAS PROTECTED, NEW DATASET IS NOT\n))S913-04 - AN OPEN MACRO WAS ISSUED FOR A MAGNETIC TAPE DATASET WITH\n     AMERICAN NATIONAL STANDARD LABELS.  THE VOLUME ACCESSABILITY BYTE\n     (OFFSET X'0A') IN THE VOLUME LABEL IS NOT BLANK.  THIS INDICATES\n     THE LABEL WAS NOT WRITTEN FOR USE ON AN IBM SYSTEM, OR THAT IT WAS\n     WRITTEN BY THE USER. THE VOLUME MUST BE RECREATED.\n))S913-08 - AN OPEN MACRO WAS ISSUED FOR A MAGNETIC TAPE DATASET WITH\n     AMERICAN NATIONAL STANDARD LABELS. THE SECURITY BYTE IN THE HEADER\n     LABEL WAS NOT BLANK AND NOT EQUAL TO X'F1'. THIS MEANS THE LABEL\n     EITHER WAS NOT CREATED ON AN IBM SYSTEM OR WAS CREATED BY THE\n     USER. THE VOLUME MUST BE RECREATED FOR USE ON AN IBM SYSTEM.\n))S913-0C - AN OPEN MACRO WAS ISSUED FOR A PROTECTED DATASET FOR\n     WHICH YOU ARE NOT ALLOWED THIS TYPE OF ACCESS.\n))S913-10 - AN OPEN MACRO WAS ISSUED TO THE VTOC FOR OUTPUT PROCESSING\n     BY AN UNAUTHORIZED JOB STEP OR JOB-STEP TASK.\n))S913-14 - AN OPEN MACRO WAS ISSUED TO CONCATENATE CHECKPOINT AND\n     NONCHECKPOINT DATASETS.\n))S913-18 - AN OPEN TYPE=J MACRO WAS ISSUED FOR A MAGNETIC TAPE VOLUME.\n     THE JFCB WAS MODIFIED TO INDICATE LABEL=BLP (BYPASS LABEL\n     PROCESSING) AN THE TASK WAS NOT AUTHORIZED.  BLP MAY BE SPECIFIED\n     IN THE JCL (IF THE INSTALLATION READER PROCEDURE ALLOWS IT), BUT\n     THE JFCB MAY NOT BE MODIFIED TO INDICATE BLP UNLESS THE TASK IS\n     AUTHORIZED.\n))S913-1C - THE ERROR OCCURRED DURING THE EXECUTION OF AN OPEN TYPE=J\n     MACRO TO A DIRECT ACCESS DEVICE DATASET. THE DATASET NAME SUPPLIED\n     TO OPEN WAS NOT AVAILABLE TO THE JOB. EITHER THE DATASET WAS BEING\n     OPENED FOR INPUT AND SOME OTHER JOB HAD EXCLUSIVE CONTROL OF IT,\n     OR THE DATASET WAS BEING OPENED FOR AN OPTION OTHER THAN INPUT\n     (THUS REQUIRING EXCLUSIVE CONTROL) AND SOME OTHER JOB WAS USING\n     THE DATASET.\n))S913-20 - AN OPEN MACRO USING THE EXCP ACCESS METHOD WAS ISSUED IN\n     WHICH USER-WRITTEN APPENDAGES WERE REQUIRED.  THE APPENDAGE NAMES\n     WERE NOT INCLUDED IN THE PARMLIB MEMBER IEAAPP00, AND THE PROGRAM\n     ISSUING THE OPEN WAS NOT AUTHORIZED (BY APF OR PROTECT KEY).\n))S913-28 - AN OPEN MACRO WAS ISSUED FOR A CHECKPOINT DATASET.  THE\n     DATASET ORGANIZATION WAS NOT BPAM OR BSAM AND THE TASK WAS NOT\n     AUTHORIZED VIA THE AUTHORIZED PROGRAM FACILITY (APF).\n))S913-2C - AN OPEN MACRO WAS ISSUED TO AN ISAM DATASET DEFINED BY TWO\n     OR THREE DD STATEMENTS.  EITHER THE DATASET NAMES CODED IN THE\n     DD STATEMENTS WERE NOT ALL THE SAME, OR THE JFCB PASSED TO OPEN\n     (IF AN OPEN TYPE=J IS BEING USED) HAS A DATASET NAME DIFFERENT\n     FROM THAT CODED IN THE DD STATEMENTS.\n))S913-30 - AN OPEN MACRO WAS ISSUED TO WRITE A DATASET ON A MAGNETIC\n     TAPE CONTAINING ONE OR MORE PREVIOUS DATASETS.  THE PROTECTION\n     MODE OF THE DATASET TO BE WRITTEN WAS DIFFERENT THAN THE\n     PROTECTION MODE OF THE PREVIOUS DATASET.\n))S913-34 - AT OPEN, THE CALLER IS NOT AUTHORIZED TO REJECT FOR INPUT.\n))S913-38 - AN OPEN WAS ISSUED FOR A RACF-PROTECTED DATA SET ON DASD\n     OR A RACF-PROTECTED TAPE VOLUME TO WHICH THE CALLER WAS NOT\n     AUTHORIZED.\n))S913-3C - AN OPEN WAS ISSUED FOR A RACF-INDICATED (RACF BIT ON IN\n     THE FORMAT-1 DSCB IN THE VTOC) DATA SET, BUT THE DATA SET IS NOT\n     DEFINED TO RACF.\n))S913-40 - A VSAM DATA SPACE BEING OPENED IS RACF-DEFINED.\n))S913-44 - INVALID SPECIFICATION OF PROTECT - THE TAPE VOLUME WAS\n     ALREADY RACF-PROTECTED.\n))S913-48 - INVALID SPECIFICATION OF PROTECT - THE SYSTEM TAPE OPTION\n     IS NOT IN EFFECT.\n))S913-4C - INVALID SPECIFICATION OF PROTECT - THE USER IS NOT DEFINED\n     TO RACF.\n))S913-50 - INVALID SPECIFICATION OF PROTECT - THE REQUEST IS FOR A\n     NL, BLP OR LTM TAPE.\n))S913-54 - INVALID SPECIFICATION OF PROTECT - THE REQUEST IS FOR\n     INPUT OR INOUT.\n))S913-58 - INVALID SPECIFICATION OF PROTECT - THE VOLUME SEQUENCE\n     NUMBER OR THE FILE SEQUENCE NUMBER IS NOT EQUAL TO ONE ON A\n     AL, SUL, AL OR AUL TAPE, OR THE TAPE IS BEING OPENED WITH\n     DISP=MOD (INCLUDING OPEN OPTIONS OUTINX AND EXTEND).\n))S913-5C - INVALID SPECIFICATION OF PROTECT - THE VOLUME BEING USED\n     IS A PUBLIC VOLUME.\n))S913-60 - THE USER IS NOT AUTHORIZED TO DEFINE A DATA SET WITH THE\n     SPECIFIED NAME.  THIS NAME AND FILE SEQUENCE INDICATOR DO NOT\n     MATCH THE CORRESPONDING NAMES IN THE TVTOC (TAPE VTOC).\n))S913-64 - THE USER IS NOT AUTHORIZED TO SPECIFY BLP.\n))S913-68 - THE USER IS NOT AUTHORIZED TO ADD A DATA SET TO THE VOLUME.\n))S913-6C - PROTECT WAS NOT SPECIFIED IN THE JCL.  THE USER IS NOT\n     AUTHORIZED TO DEFINE A DATASET PROTECTED BY A GENERIC PROFILE.\n))S913-70 - THE USER HAS RACF EXECUTE ACCESS ONLY AND ONE OF THE\n     FOLLOWING REQUIREMENTS WAS VIOLATED:\n     - THE CALLER MUST BE IN SUPERVISOR STATE\n       OR THE DATA SET MUST BE A PDS.\n     - THE ACCESS METHOD MUST NOT BE EXCP.\n))S913-72 - AN UNEXPECTED RETURN CODE HAS BEEN RETURNED FROM RACF.\n))S978-04 - (04 IS THE ONLY POSSIBLE RETURN CODE ASSOCIATED WITH S978)\n     AREA TO BE FREED BY FREEMAIN IS NOT ON A DOUBLEWORD BOUNDARY.\n))SA00 - A PROGRAM CHECK OCCURRED IN AN APPENDAGE.  IN THE ABNORMAL\n     TERMINATION DUMP, THE TCB FIELD TCBEXCPD (AT OFFSET C0) POINTS\n     TO THE EXCP PROVIDED DEBUGGING AREA.  THE ITEMS IN THE DEBUGGING\n     AREA OF GREATEST INTEREST TO YOU ARE: (ALL OFFSETS IN HEX)\n      - OFFSET 2 CONTAINS A FLAG BYTE INDICATING WHERE THE ERROR\n        OCCURRED.\n        THE BIT PATTERN IS AS FOLLOWS:\n        1... ....  ERROR IN SVC PORTION OF EXCP\n        .1.. ....  ERROR IN SRB PORTION OF EXCP\n        ..1. ....  ERROR IN PCI APPENDAGE\n        ...1 ....  ERROR IN CHE APPENDAGE\n        .... 1...  ERROR IN ABE APPENDAGE\n        .... .1..  ERROR IN EOE APPENDAGE\n        .... ..1.  ERROR IN PGFX APPENDAGE\n        .... ...1  APENDAGE IS ACTIVE\n        .... ....  ERROR IN SIO APPENDAGE\n      - OFFSET 4 CONTAINS A COPY OF THE PROGRAM STATUS WORD (PSW)\n        BEFORE RTM WAS ENTERED.\n      - OFFSET E CONTAINS THE INTERRUPTION CODE.\n      - OFFSET 10 CONTAINS A COPY OF THE REGISTERS WHEN EXCP ISSUED\n        THE ABEND MACRO.\n      - OFFSET 54 CONTAINS THE CONTENTS OF THE REQUEST QUEUE ELEMENT\n        (RQE), IF ALLOCATED, FOR THE I/O REQUEST BEING PROCESSED.\n))SA05 - ERROR DURING FREEMAIN.  AREA TO BE RELEASED OVERLAPS FREE\n     STORAGE OR PAGE-FIXED STORAGE.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***SA05 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(SA05-RC)**\n))SA05-04 - THE SQA STORAGE BEING FREED OVERLAPS FREE STORAGE.\n))SA05-08 - THE CSA STORAGE BEING FREED OVERLAPS FREE STORAGE.\n))SA05-0C - THE LSQA STORAGE BEING FREED OVERLAPS FREE STORAGE.\n))SA05-10 - THE PRIVATE AREA STORAGE BEING FREED OVERLAPS FREE STORAGE.\n))SA05-14 - PART OF THE CSA BEING FREED IS STILL FIXED.\n))SA05-18 - PART OF THE PRIVATE AREA BEING FREED IS STILL FIXED.\n))SA0A - ERROR DURING R-FORM FREEMAIN.  AREA TO BE RELEASED OVERLAPS\n     FREE STORAGE OR PAGE-FIXED STORAGE.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***SA0A OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(SA0A-RC)**\n))SA0A-04 - THE SQA STORAGE BEING FREED OVERLAPS FREE STORAGE.\n))SA0A-08 - THE CSA STORAGE BEING FREED OVERLAPS FREE STORAGE.\n))SA0A-0C - THE LSQA STORAGE BEING FREED OVERLAPS FREE STORAGE.\n))SA0A-10 - THE PRIVATE AREA STORAGE BEING FREED OVERLAPS FREE STORAGE.\n))SA0A-14 - PART OF THE CSA BEING FREED IS STILL FIXED.\n))SA0A-18 - PART OF THE PRIVATE AREA BEING FREED IS STILL FIXED.\n))SA13 - THE ERROR OCCURRED DURING EXECUTION OF AN OPEN MACRO ON\n     MAGNETIC TAPE.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***SA13 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(SA13-RC)**\n))SA13-04 - AN UNEXPECTED LOAD POINT WAS ENCOUNTERED WHILE POSITIONING\n     A TAPE.  FOR NL TAPE THIS IS PROBABLY A USER ERROR ASSOCIATED WITH\n     THE USE OF A MULTIVOLUME MULTIFILE NL TAPE.\n))SA13-08 - THE REQUESTED FILE SEQUENCE NUMBER IS LESS THAN THAT OF THE\n     FIRST FILE ON THE SL TAPE DURING AN OPEN TO THE START OF THE FILE.\n))SA13-0C - THE REQUESTED FILE SEQUENCE NUMBER IS LESS THAN THAT OF THE\n     FIRST FILE ON THE SL TAPE DURING AN OPEN TO THE END OF A FILE.\n))SA13-10 - A TAPE MARK WAS READ INSTEAD OF A HDR1 LABEL WHILE FORWARD\n     SPACING TO THE DESIRED FILE ON AN SL TAPE.  THUS, THE MULTIFILE\n     TAPE ENDS BEFORE THE DESIRED FILE.  WHEN POSITIONING TO THE END OF\n     FILE 1, THIS MEANS THE VOL LABEL IS FOLLOWED BY A TAPE MARK.\n     CHECK THE FILE SEQUENCE NUMBER AND THE VOLUME SERIAL NUMBERS AND\n     THAT THE JOB THAT WROTE THE TAPE WROTE ALL THE FILES.\n))SA13-14 - A TAPE MARK WAS READ INSTEAD OF A HDR1 LABEL WHILE OPENING\n     FOR INPUT TO THE START OF THE DESIRED FILE ON AN SL TAPE.  THUS,\n     THE TAPE ENDS JUST BEFORE THE DESIRED FILE.  CHECK THE FILE\n     SEQUENCE NUMBER AND THE VOLUME SERIAL NUMBERS AND THAT THE JOB\n     THAT WROTE THE TAPE WROTE ALL THE FILES.\n))SA13-18 - AN EOV1 LABEL WAS READ ON THE LAST SL TAPE VOLUME WHILE\n     FORWARD SPACEING TO THE DESIRED FILE.  IF OPENING TO THE END OF\n     THE FILE, IT COULD NOT BE TREATED AS THE END OF THE DATA SET\n     BECAUSE IT WAS FOR A PREVIOUS FILE SEQUENCE NUMBER.\n))SA14-04 - (04 IS THE ONLY POSSIBLE RETURN CODE ASSOCIATED WITH SA14)\n     I/O ERROR OCCURRED DURING A CLOSE ATTEMPTING A PARTIAL RELEASE\n     OF SPACE ON A DIRECT ACCESS DEVICE.\n))SA37 - THE ERROR OCCURRED DURING END OF VOLUME PROCESSING.  THE TASK\n     IS TERMINATED UNLESS THE ERROR IS TO BE IGNORED AS SPECIFIED IN\n     THE DCB ABEND EXIT ROUTINE.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***SA37 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(SA37-RC)**\n   --POSSIBLE CAUSE--\n     AN OPEN DCB MAY HAVE BEEN PARTIALLY OVERLAID\n     THE DCB MAY HAVE BEEN CLOSED IN A SYNAD ROUTINE\n     THE DCB MAY HAVE BEEN AUTOMATICALLLY CLOSED BY A PREVIOUS END OF\n       OF VOLUME ERROR WHERE IGNORE WAS SPECIFIED IN THE DCB ABEND EXIT\n))SA37-04 - AN SVC 55 (EOV) WAS ISSUES, USUALLY BY A CHECK, GET, OR PUT\n     ROUTINE, AGAINST A DCB WHICH WAS NOT OPEN.\n))SA37-08 - THE DATA EXTENT BLOCK (DEB) DOES NOT POINT TO THE DCB.\n))SA78 - ERROR DURING RU-FORM FREEMAIN.  AREA TO BE RELEASED OVERLAPS\n     FREE STORAGE OR PAGE-FIXED STORAGE.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***SA78 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(SA78-RC)**\n))SA78-04 - THE SQA STORAGE BEING FREED OVERLAPS FREE STORAGE.\n))SA78-08 - THE CSA STORAGE BEING FREED OVERLAPS FREE STORAGE.\n))SA78-0C - THE LSQA STORAGE BEING FREED OVERLAPS FREE STORAGE.\n))SA78-10 - THE PRIVATE AREA STORAGE BEING FREED OVERLAPS FREE STORAGE.\n))SA78-14 - PART OF THE CSA BEING FREED IS STILL FIXED.\n))SA78-18 - PART OF THE PRIVATE AREA BEING FREED IS STILL FIXED.\n))SACC - NOT AN ERROR - FORTRAN ACCOUNTING TERMINATION\n))SB00 - A PROGRAM CHECK OCCURRED IN AN EXCP PROCEDURE. IN THE ABNORMAL\n     TERMINATION DUMP, THE TCB FIELD TCBEXCPD (AT OFFSET C0) POINTS\n     TO THE EXCP PROVIDED DEBUGGING AREA. THE ITEMS IN THE DEBUGGING\n     AREA OF GREATEST INTEREST TO YOU ARE: (ALL OFFSETS IN HEX)\n      - OFFSET 2 CONTAINS A FLAG BYTE INDICATING WHERE THE ERROR\n        OCCURRED.\n        THE BIT PATTERN IS AS FOLLOWS:\n        1... ....  ERROR IN SVC PORTION OF EXCP\n        .1.. ....  ERROR IN SRB PORTION OF EXCP\n        ..1. ....  ERROR IN PCI APPENDAGE\n        ...1 ....  ERROR IN CHE APPENDAGE\n        .... 1...  ERROR IN ABE APPENDAGE\n        .... .1..  ERROR IN EOE APPENDAGE\n        .... ..1.  ERROR IN PGFX APPENDAGE\n        .... ...1  APENDAGE IS ACTIVE\n        .... ....  ERROR IN SIO APPENDAGE\n      - OFFSET 4 CONTAINS A COPY OF THE PROGRAM STATUS WORD (PSW)\n        BEFORE RTM WAS ENTERED.\n      - OFFSET E CONTAINS THE INTERRUPTION CODE.\n      - OFFSET 10 CONTAINS A COPY OF THE REGISTERS WHEN EXCP ISSUED\n        THE ABEND MACRO.\n      - OFFSET 50 CONTAINS THE TRANSLATION EXCEPTION ADDRESS,\n        IF APPLICABLE.\n      - OFFSET 54 CONTAINS THE CONTENTS OF THE REQUEST QUEUE ELEMENT\n        (RQE), IF ALLOCATED, FOR THE I/O REQUEST BEING PROCESSED.\n      - OFFSET 80 IS THE START OF THE 160 BYTE BLOCKS INVOLVED IN THE\n        I/O REQUEST, IF ALLOCATED.\n))SB04 - THE ERROR OCCURRED DURING EXECUTION OF A GETMAIN MACRO:\n         - A SUBPOOL NUMBER GREATER THAN 127 WAS SPECIFIED BY A PROBLEM\n           PROGRAM (A PROGRAM NOT AUTHORIZED TO USE VALID SUBPOOL\n           NUMBERS GREATER THAN 127) (RC=08)\n         - AN AUTHORIZED PROGRAM REQUESTED AN INVALID SUBPOOL (RC=04)\n   --POSSIBLE CAUSE--\n    TRIED TO CHANGE BLOCKING FACTOR WHILE LOADING A DATASET\n    COBOL - CONTROL PASSED BEYOND END OF PROGRAM DUE TO INVALID PERFORM\n))SB05 - THE ERROR OCCURRED DURING EXECUTION OF A FREEMAIN MACRO:\n         - A SUBPOOL NUMBER GREATER THAN 127 WAS SPECIFIED BY A PROBLEM\n           PROGRAM (A PROGRAM NOT AUTHORIZED TO USE VALID SUBPOOL\n           NUMBERS GREATER THAN 127) (RC=08)\n         - AN AUTHORIZED PROGRAM REQUESTED AN INVALID SUBPOOL (RC=04)\n   --POSSIBLE CAUSE--\n    TRIED TO CHANGE BLOCKING FACTOR WHILE LOADING A DATASET\n    COBOL - CONTROL PASSED BEYOND END OF PROGRAM DUE TO INVALID PERFORM\n))SB0A - THE ERROR OCCURRED DURING EXECUTION OF AN R-FORM GETMAIN OR\n     FREEMAIN MACRO:\n         - A SUBPOOL NUMBER GREATER THAN 127 WAS SPECIFIED BY A PROBLEM\n           PROGRAM (A PROGRAM NOT AUTHORIZED TO USE VALID SUBPOOL\n           NUMBERS GREATER THAN 127) (RC=08)\n         - AN AUTHORIZED PROGRAM REQUESTED AN INVALID SUBPOOL (RC=04)\n   --POSSIBLE CAUSE--\n    TRIED TO CHANGE BLOCKING FACTOR WHILE LOADING A DATASET\n    COBOL - CONTROL PASSED BEYOND END OF PROGRAM DUE TO INVALID PERFORM\n))SB13 - THE ERROR OCCURRED DURING THE EXECUTION OF AN OPEN MACRO FOR\n     A DATA SET ON A PRINTER WITH UNIVERSAL CHARACTER SET (UCS).\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***SB13 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(SB13-RC)**\n))SB13-04 - AN OPEN WAS ISSUED TO A DATA SET ALLOCATED TO A PRINTER.\n     THE OPERATOR REPLIED 'CANCEL' TO IEC120A, IEC122D OR 1EC123D\n     BECAUSE THE UCS IMAGE COULD NOT BE FOUND IN SYS1.IMAGELIB.\n))SB13-08 - AN OPEN WAS ISSUED TO A DATA SET ALLOCATED TO A PRINTER.\n     BLDL FOUND A PERMANENT I/O ERROR WHEN SEARCHING SYS1.IMAGELIB\n     FOR THE REQUESTED UCS IMAGE.\n))SB13-0C - AN OPEN WAS ISSUED TO A DATA SET ALLOCATED TO A PRINTER\n     OR TO A 3886.  A PERMANENT I/O ERROR PERSISTED AFTER TWO ATTEMPTS\n     AT LOADING THE UCS BUFFER -OR- A PERMANENT I/O ERROR OCCURRED\n     WHEN LOADING THE FORMAT RECORD INTO THE 3886.\n))SB13-10 - AN OPEN WAS ISSUED TO A DATA SET ALLOCATED TO A PRINTER.\n     A PERMANENT I/O ERROR RESULTED WHEN TRYING TO PRINT THE CHARACTER\n     SET IMAGE FOR VISUAL VERIFICATION, OR DURING AN OPERATION WHICH\n     RESULTED IN POSSIBLE LOST DATA.\n))SB13-14 - AN OPEN WAS ISSUED TO A DATA SET ALLOCATED TO A PRINTER.\n     THE OPERATOR REPLIED 'CANCEL' TO IEC121D AFTER THE CHARACTER SET\n     IMAGE WAS PRINTED FOR VISUAL VERIFICATION.\n))SB13-18 - AN OPEN WAS ISSUED TO A DATA SET ALLOCATED TO A PRINTER.\n     A PERMANENT I/O ERROR RESULTED WHEN TRYING TO PRINT THE FCB\n     IMAGE FOR VISUAL VERIFICATION.\n))SB13-1C - AN OPEN WAS ISSUED TO A DATA SET ALLOCATED TO A PRINTER.\n     THE OPERATOR REPLIED 'CANCEL' TO IEC128D AFTER THE FCB IMAGE WAS\n     PRINTED FOR VISUAL VERIFICATION -OR- SOME OTHER I/O ERROR.\n))SB13-20 - AN OPEN WAS ISSUED TO A DATA SET ALLOCATED TO A PRINTER,\n     BUT NOT ENOUGH STORAGE WAS AVAILABLE TO OPEN SYS1.IMAGELIB.\n     DURING 3886 OPEN, EITHER THE PROPER VOLUME WAS NOT MOUNTED\n     OR A PERMANENT I/O ERROR OCCURRED WHILE READING SYS1.IMAGELIB.\n))SB13-24 - AN OPEN WAS ISSUED TO A DATA SET ALLOCATED TO A PRINTER,\n     BUT THE VOLUME CONTAINING SYS1.IMAGELIB WAS NOT MOUNTED OR WAS\n     NOT CATALOGUED.  DURING 3886 OPEN, THE FORMAT RECORD IDENTIFIER\n     WAS NOT SPECIFIED.\n))SB13-28 - AN OPEN WAS ISSUED TO A DATA SET ALLOCATED TO A PRINTER,\n     BUT A PERMANENT I/O ERROR PERSISTED WHILE OPENING SYS1.IMAGELIB.\n))SB13-2C - AN OPEN WAS ISSUED TO A DATA SET ALLOCATED TO A PRINTER.\n     BLDL FOUND A PERMANENT I/O ERROR WHEN SEARCHING SYS1.IMAGELIB\n     FOR THE REQUESTED FCB IMAGE.\n))SB13-30 - AN OPEN WAS ISSUED TO A DATA SET ALLOCATED TO A PRINTER.\n     A PERMANENT I/O ERROR PERSISTED AFTER TWO ATTEMPTS AT LOADING THE\n     FORMS CONTROL BUFFER (FCB).\n))SB13-34 - AN OPEN WAS ISSUED TO A DATA SET ALLOCATED TO A PRINTER.\n     THE OPERATOR REPLIED 'CANCEL' TO IEC127D BECAUSE THE FCB IMAGE\n     COULD NOT BE FOUND IN SYS1.IMAGELIB.\n))SB13-38 - AN OPEN WAS ISSUED TO A DATA SET ALLOCATED TO A PRINTER.\n     NO OPERATION WAS PERFORMED FOR ONE OF THE FOLLOWING REASONS:\n     - THE DATA CONTROL BLOCK (DCB) WAS NOT OPEN.\n     - THE DCB WAS NOT VALID FOR A SEQUENTIAL DATA SET.\n     - THE SETPRT PARAMETER LIST WAS NOT VALID.\n     - THE OUTPUT DEVICES WAS NOT A UCS OR 3800 PRINTER.\n))SB14 - AT CLOSE A PARTITIONED DATA SET DIRECTORY CANNOT BE UPDATED\n         BECAUSE THE NAME IS ALREADY IN THE DIRECTORY, NO SPACE IS\n         AVAILABLE IN THE DIRECTORY, OR AN I/O ERROR WAS ENCOUNTERED\n         IN THE DIRECTORY.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***SB14 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(SB14-RC)**\n   --POSSIBLE CAUSE--\n    ALLOCATED DIRECTORY SPACE IN JCL, WRITTEN AS SEQUENTIAL DATA SET\n))SB14-04 - A DUPLICATE NAME WAS FOUND IN THE DIRECTORY OF THE PDS.\n))SB14-08 - THE TTRN FOR A MEMBER WAS NOT WITHIN THE EXTENTS IN THE DEB\n))SB14-0C - THE ATTEMPTED UPDATE OF THE PARTITIONED DATASET FOUND\n     THAT THERE WAS NO SPACE LEFT IN THE DIRECTORY.\n))SB14-10 - AN I/O ERROR OCCURRED TRYING TO UPDATE THE DIRECTORY\n     OF THE PARTITIONED DATASET.\n))SB14-14 - THE CLOSE ROUTINE ATTEMPTED TO UPDATE THE DIRECTORY OF\n     THE PARTITIONED DATASET, HOWEVER THE DCB OF THE DATASET WAS\n     NOT OPEN.\n))SB14-18 - UNSUCCESSFUL GETMAIN FOR STOW WORKAREA WHEN CLOSE TRIED TO\n     UPDATE A PARTITIONED DATASET.  REGION SIZE IS TOO SMALL.\n))SB37 - AT END OF VOLUME, THE VOLUME MUST BE DEMOUNTED, BUT THE SYSTEM\n         IS UNABLE TO DISMOUNT THE VOLUME.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***SB37 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(SB37-RC)**\n   --POSSIBLE CAUSE--\n     THE DATA SET ON DASD - OUTPUT - ALREADY HAD 16 EXTENTS, BUT\n         REQUIRED MORE SPACE - SECONDARY SPACE WAS TOO SMALL\n     NO MORE SPACE WAS AVAILABLE ON THE VOLUME\n     THE VOLUME TABLE OF CONTENTS WAS FULL\n))SB37-04 - DURING END-OF-VOLUME PROCESSING THE SYSTEM HAD TO DEMOUNT\n     A VOLUME IN ORDER TO MOUNT THE NEXT VOLUME OF THE DATASET.  IT WAS\n     UNABLE TO DEMOUNT THE VOLUME FOR ONE OF THE FOLLOWING REASONS:\n     - THE VOLUME WAS PERMANENTLY RESIDENT OR WAS RESERVED.\n     - ANOTHER JOB HAD DATASETS ALLOCATED ON THE VOLUME.\n     - THE FAILING TASK HAD OPEN DATASETS ON THE VOLUME.\n     FOR AN OUTPUT DATASET ON A DIRECT ACCESS DEVICE:\n     - NO MORE SPACE WAS AVAILABLE ON THE VOLUME.\n     - THE DATASET ALREADY HAD 16 EXTENTS BUT REQUIRED MORE SPACE.\n     - MORE SPACE WAS REQUIRED, BUT THE VTOC WAS FULL.\n     FOR AN OUTPUT DATASET ON MAGNETIC TAPE:\n     - A VOLUME NEEDED TO BE DEMOUNTED BECAUSE THE REFLECTIVE SPOT\n       WAS ENCOUNTERED AND MORE RECORDS NEEDED TO BE WRITTEN, BUT\n       THE LIMIT OF OUTPUT TAPES HAD BEEN REACHED.\n))SB37-08 - DURING END-OF-VOLUME PROCESSING THE SYSTEM ATTEMPTED TO\n     EXTEND THE DATASET TO A VOLUME ON WHICH THE DIRF BIT WAS SET.\n     THE VTOC FOR THE VOLUME COULD NOT BE CONVERTED TO THE STANDARD\n     FORMAT FOR ONE OF THE FOLLOWING REASONS:\n     - TWO DATASETS WERE ALLOCATED TO THE SAME SPACE ON THE VOLUME.\n     - A SPLIT CYLINDER DATASET WAS LOCATED ON THE SAME CYLINDER AS\n       A NON-SPLIT CYLINDER DATASET.\n     - THE VTOC CONVERSION ROUTINE IS SET TO REJECT DIRF REQUESTS.\n))SB37-0C - THE MOUNTED DIRECT ACCESS VOLUME WAS REQUESTED TO CONTINUE\n     PROCESSING THE DATASET, BUT THE UNIT ALREADY CONTAINED THE\n     MAXIMUM OF 127 CONCURRENT USERS.\n))SB78 - THE ERROR OCCURRED DURING EXECUTION OF A GETMAIN OR FREEMAIN\n     MACRO:\n         - A SUBPOOL NUMBER GREATER THAN 127 WAS SPECIFIED BY A PROBLEM\n           PROGRAM (A PROGRAM NOT AUTHORIZED TO USE VALID SUBPOOL\n           NUMBERS GREATER THAN 127) (RC=08)\n         - AN AUTHORIZED PROGRAM REQUESTED AN INVALID SUBPOOL (RC=04)\n   --POSSIBLE CAUSE--\n    TRIED TO CHANGE BLOCKING FACTOR WHILE LOADING A DATASET\n    COBOL - CONTROL PASSED BEYOND END OF PROGRAM DUE TO INVALID PERFORM\n))SC03 - A DATA SET COULD NOT BE CLOSED BY THE CONTROL PROGRAM, BECAUSE\n         THE DCB HAD BEEN ERRONEOUSLY MODIFIED.\n     ISAM FILE - BAD BLOCK SIZE\n))SC13 - THE ERROR OCCURRED DURING THE EXECUTION OF AN OPEN MACRO FOR\n     A CONCATENATED PARTITIONED OR GRAPHICS DATASET.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***SC13 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(SC13-RC)**\n   --POSSIBLE CAUSE--\n     ATTEMPED TO WRITE OUTPUT TO CONCATENATED PARTITIONED DATASETS\n     MISSING OR DELETED JOBLIB DATA SET\n     GRAPHICS - SYSTEM PROBLEM - WAIT FOR IPL\n))SC13-04 - THE CURRENT TASK TRIED TO OPEN A GRAPHICS DEVICE THAT WAS\n     PREVIOUSLY OPENED AND NOT CLOSED.\n))SC13-10 - AN OPEN MACRO WAS ISSUED SPECIFYING OUTPUT OR EXTEND FOR\n     A CONCATENATED PARTITIONED DATASET.  OUTPUT DATASETS CANNOT BE\n     CONCATENATED.\n))SC13-18 - AN OPEN MACRO WAS ISSUED FOR A PARTITIONED DATA SET THAT\n     WAS CONCATENATED WITH A DATA SET THAT DOES NOT RESIDE ON DASD.\n))SC37 - THE ERROR OCCURRED WHEN AN INPUT OPERATION WAS REQUESTED ON\n     A DIRECT ACCESS DEVICE.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***SC37 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(SC37-RC)**\n))SC37-04 - END-OF-VOLUME OCCURRED ON INPUT BUT THE NEXT VOLUME\n     CONTAINED MORE THAN SIXTEEN (16) EXTENTS.\n))SC37-08 - END-OF-VOLUME OCCURRED ON INPUT BUT THE NEXT VOLUME\n     CONTAINED A SPLIT CYLINDER ALLOCATION NOT SUPPORTED UNDER MVS.\n))SD04-08 - (08 IS THE ONLY POSSIBLE RETURN CODE ASSOCIATED WITH SD04)\n     ERROR DURING GETMAIN:\n          - THERE IS NO REAL STORAGE AVAILABLE FOR THE LSQA AQAT TABLE\n            OR TO BACK THE RSM CONTROL BLOCKS.\n))SD05 - ERROR DURING FREEMAIN.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***SD05 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(SD05-RC)**\n))SD05-04 - THE FREEMAIN FOR LSQA SPECIFIED STORAGE THAT WAS NOT\n     ASSOCIATED WITH THE TASK.\n))SD05-08 - THERE IS NO REAL STORAGE AVAILABLE FOR THE LSQA AQAT TABLE\n     OR TO BACK THE RSM CONTROL BLOCKS.\n))SD0A - ERROR DURING R-FORM GETMAIN OR FREEMAIN.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***SD0A OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(SD0A-RC)**\n))SD0A-04 - THE FREEMAIN FOR LSQA SPECIFIED STORAGE THAT WAS NOT\n     ASSOCIATED WITH THE TASK.\n))SD0A-08 - THERE IS NO REAL STORAGE AVAILABLE FOR THE LSQA AQAT TABLE\n     OR TO BACK THE RSM CONTROL BLOCKS.\n))SD0D - INVALID ABEND RECURSION DURING ABNORMAL TERMINATION OF SUBTASK\n         JOB STEP TASK TERMINATED\n))SD13-04 - (04 IS THE ONLY POSSIBLE RETURN CODE ASSOCIATED WITH SD13)\n     OPEN FOR GRAPHICS - DCB FOR OTHER THAN GRAPHICS DEVICE.\n))SD14 - THE TASK WHICH ISSUED A CLOSE FOR A GRAPHIC DEVICE WAS NOT\n     THE SAME TASK WHICH PERFORMED THE OPEN.\n))SD23 - THE ERROR OCCURRED DURING THE EXECUTION OF A WTO OR WTOR MACRO\n     FOR ONE OF THE FOLLOWING REASONS:\n     - THE PARAMETER LIST SUPPLIED TO THE WTOR MACRO DOES NOT BEGIN ON\n       A FULLWORD BOUNDARY.\n     - A WTOR/MLWTO PARAMATER LIST WAS SPECIFIED.\n     - A MULTILINE WTO WAS SPECIFIED AND SPACE WAS NOT AVAILABLE IN\n       SUBPOOL 229 FOR A WORKAREA FOR SVC 35.\n     - THE PARAMETER LIST PASSED BY THE USER DOES NOT RESIDE IN STORAGE\n       THAT IS ACCESSIBLE BY THE USER.\n     - SPACE WAS NOT AVAILABLE IN SUBPOOL 231 FOR AN ORE OR WQE BUFFER.\n))SD2D - OVERLAY SUPERVISOR FOUND INVALID RECORD TYPE\n     BAD LOAD MODULE RE-LINKEDIT\n))SD37-04 - (04 IS THE ONLY POSSIBLE RETURN CODE ASSOCIATED WITH SD37)\n     A DATASET OPENED FOR OUTPUT USED ALL THE PRIMARY SPACE, AND NO\n     SECONDARY SPACE WAS REQUESTED.  EITHER SPECIFY A LARGER PRIMARY\n     QUANTITY OR ADD A SECONDARY QUANTITY TO THE REQUEST.\n))SD78 - ERROR DURING RU- OR VRU-FORM GETMAIN OR RU-FORM FREEMAIN.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***SD78 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(SD78-RC)**\n))SD78-04 - THE FREEMAIN FOR LSQA SPECIFIED STORAGE THAT WAS NOT\n     ASSOCIATED WITH THE TASK.\n))SD78-08 - THERE IS NO REAL STORAGE AVAILABLE FOR THE LSQA AQAT TABLE\n     OR TO BACK THE RSM CONTROL BLOCKS.\n))SE00 - AN ERROR OCCURRED DURING EXCP PROCESSING OF AN I/O REQUEST.\n     THE IOSB RETURNED TO EXCP TERMINATION HAD A RETURN CODE OF X'45'.\n     THE I/O REQUEST WAS TERMINATED.  NO EXCP DEBUGGING ERROR IS\n     SUPPLIED.  A RECORD IS WRITTEN TO SYS1.LOGREC.  THE PREVIOUS\n     LOGREC ERROR RECORD SHOULD INDICATE THE CAUSE OF THE ABEND.\n   --POSSIBLE CAUSE--\n     A PROGRAM CHECK OR MACHINE CHECK OCCURRED WHILE THE IOS IRB\n     ANALYSIS MODULES OR MODULE IECVPST WAS EXECUTING.\n     A PROGRAM CHECK OR MACHINE CHECK OCCURRED WHILE A NONRESIDENT\n     ERP OR ERP LOADER MODULE WAS EXECUTING.\n     THE OPERATOR CAUSED A SYSTEM RESTART DURING I/O REQUEST PROCESSING\n))SE03 - A TASK ATTEMPTED TO TERMINATE NORMALLY BUT WAS OPERATING IN\n     MUST-COMPLETE STATUS AND DID NOT RESET MUST-COMPLETE.  ENSURE THAT\n     EACH ISSUANCE OF AN ENQ, RESERVE AND STATUS MACRO IS PAIRED WITH\n     A DEQ OR STATUS MACRO REQUESTING 'RESET MUST-COMPLETE'.\n))SE13-04 - (04 IS THE ONLY POSSIBLE RETURN CODE ASSOCIATED WITH SE13)\n     WHEN OPENING A GRAPHIC DATA CONTROL BLOCK THE GNCP (MAXIMUM NUMBER\n     OF CONCURRENT CHANNEL PROGRAMS) BYTE CONTAINED A VALUE OUTSIDE\n     THE ACCEPTABLE RANGE OF 1 TO 99.\n))SE1A - CAS (THE CATALOG ADDRESS SPACE) ALLOCATE TASK ABENDED BECAUSE\n     IT EXCEEDED THE ALLOTTED TIME FOR PROCESSING.  IT MAY HAVE BEEN\n     WAITING FOR SOME PERMANENTLY UNAVAILABLE SYSTEM RESOURCE.\n     THE SYSTEM ATTACHES A NEW TASK TO RESTORE THE ALLOCATE FUNCTION.\n))SE37 - THE ERROR OCCURRED DURING END OF VOLUME PROCESSING WHEN AN\n     OUTPUT OPERATION WAS REQUESTED FOR A DATASET.\n   ***IF THE REGISTER 15 RETURN CODE IS AVAILABLE, SUPPLY IT IN THE***\n   ***SE37 OPERAND FOR MORE SPECIFIC INFORMATION: H ABEND O(SE37-RC)**\n   --POSSIBLE CAUSE--\n     RAN OUT OF DIRECTORY SPACE IN A PDS\n     OUTPUT EXCEEDED VOLUME COUNT\n))SE37-04 - A DATASET OPENED FOR OUTPUT USED ALL SPACE AVAILABLE ON\n     THE CURRENT VOLUME, AND NO MORE VOLUMES WERE AVAILABLE:\n     - NOT ENOUGH VOLUMES WERE SPECIFIED FOR THE DATASET THROUGH THE\n       'SER', VOLUME COUNT, OR 'REF' SUBPARAMETER OF THE VOLUME\n       PARAMETER.  WHEN ALL THE VOLUMES WERE FILLED, THE PROGRAM\n       ATTEMPTED TO WRITE ANOTHER RECORD.\n     - FOR A PARTITIONED DATASET ON A DIRECT ACCESS VOLUME, ALL SPACE\n       WAS FILLED WHEN THE PROGRAM ATTEMPTED TO WRITE ANOTHER RECORD.\n       (A PARTITIONED DATASET CAN RESIDE ON ONLY ONE VOLUME.)\n     - FOR A PARTITIONED DATASET ON A DIRECT ACCESS VOLUME, 16 EXTENTS\n       HAD BEEN USED WHEN THE PROGRAM ATTEMPTED TO WRITE ANOTHER\n       RECORD; HOWEVER, NO VOLUME WAS AVAILABLE FOR DEMOUNTING.\n))SE37-08 - ON A DATASET OPENED FOR OUTPUT, END-OF-VOLUME HAD FOUND\n     A DSCB WITH A DUPLICATE DATASET NAME ON THE NEXT VOLUME, WITH A\n     VOLUME SEQUENCE NUMBER LESS THAN THAT IN THE DEB.\n     - A MULTI-VOLUME PHYSICAL SEQUENTIAL DATASET WAS BEING WRITTEN\n       ON A DIRECT ACCESS DEVICE.  ALL SPACE WAS FILLED ON A VOLUME,\n       AND AN ATTEMPT WAS MADE TO OBTAIN SPACE ON THE NEXT SPECIFIED\n       VOLUME.  EITHER THE SPACE WAS NOT AVAILABLE ON THAT VOLUME OR\n       THE DATASET ALREADY EXISTED ON THAT VOLUME.\n))SE37-0C - AN INSTALLATION DADSM EXIT, IGGPRE00, REJECTED THE EXTEND\n     REQUEST.\n))SE82 - DISABLED CODE WAS EXECUTING AND ISSUED RACHECK (SVC 130) WHICH\n     IS INACTIVE BECAUSE RACF IS NOT INSTALLED ON THE SYSTEM.\n))SE83 - DISABLED CODE WAS EXECUTING AND ISSUED RACINIT (SVC 131) WHICH\n     IS INACTIVE BECAUSE RACF IS NOT INSTALLED ON THE SYSTEM.\n))SE84 - DISABLED CODE WAS EXECUTING AND ISSUED RACLIST (SVC 132) WHICH\n     IS INACTIVE BECAUSE RACF IS NOT INSTALLED ON THE SYSTEM.\n))SE85 - DISABLED CODE WAS EXECUTING AND ISSUED RACDEF (SVC 133) WHICH\n     IS INACTIVE BECAUSE RACF IS NOT INSTALLED ON THE SYSTEM.\n))SF2D - OVERLAY SUPERVISOR - INVALID SUPERVISOR CALL\n     BAD LOAD MODULE. RE-LINKEDIT ENTIRE MODULE.\n))SF37 - HARDWARE ERROR\n))U4 -\n  GO STEP OF FORTRAN - SUBROUTINE FILENO - NON SEQUENTIAL DATA SET.\n))U8 -\n  GO STEP OF FORTRAN - SUBROUTINE FILENO - IDSRN OUT OF RANGE.\n))U12 -\n  GO STEP OF FORTRAN - SUBROUTINE FILENO - DATA SET REFERENCE NUMBER\n    HAS NOT BEEN USED.\n))U16 -\n  SYNCSORT - UNSUCCESSFUL SORT, SEE DIAGNOSTIC MESSAGES\n  GO STEP OF FORTRAN - MISSING SD4060 DD CARD FOR SD4060 OUTPUT\n  GO STEP OF FORTRAN - SUBROUTINE FILENO - SECOND ARGUMENT NOT 'IN' OR\n    'OUT' .\n))U20 -\n  GO STEP OF FORTRAN - SUBROUTINE FILENO - PREVIOUS FILE NOT CLOSED.\n  ASMF COULD NOT OPEN SYSIN - CHECK YOUR SYSIN DD CARD\n  I/O FAILURE WHEN READING A BAD TRACK\n))U24 -\n  GO STEP OF FORTRAN - SUBROUTINE FILENO - DEVICE IS NOT A TAPE\n  RPG - ALPHAMERIC DATA IN NUMERIC SPECIFIED FIELD\n  RPG - MISSING DD CARD\n))U30 -\n  GO STEP OF FORTRAN - MISSING FT06F001 DD CARD.\n))U40 -\n  RPG - INPUT FILE OUT OF SEQUENCE\n))U44 -\n  RPG - UNDEFINED RECORD TYPE\n))U64 -\n  RPG - I/O ERROR QSAM\n))U100 -\n  FDR - OPEN ERROR - UNABLE TO OPEN DISK OR TAPE FILE\n))U101 -\n  FDR - DISK I/O ERROR\n))U200 -\n  FDR - TAPE I/O ERROR\n))U201 -\n  FDR - TAPE END OF FILE BEFORE DATASET OR TRAILER RECORD FOUND\n))U204 -\n  PAN#8 - SYSPRINT DD STATEMENT MISSING\n))U240 -\n  FORTRAN - SPIE\n))U402 -\n  FDR - SYSPRINT OR SYSPRIN-N ERROR\n))U502 -\n  FDRDSF - INPUT CONTROL STATEMENT ERROR\n))U888 -\n  FDR - DIAGNOSTIC WARNING ASSOCIATED WITH TEXT ON SYSPRINT\n))U999 -\n  SYNCSORT - I/O ERROR OCCURRED, SEE DIAGNOSTIC MESSAGES\n))U2000 -\n  PL1\n))U4000 -\n  PL1\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ADDTO": {"ttr": 3846, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x03\\x01\\x00\\x05\\x8f\\x01\\x00\\x05\\x8f\\x157\\x00 \\x00 \\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf4\\xf5\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-27T00:00:00", "modifydate": "2000-02-27T15:37:03", "lines": 32, "newlines": 32, "modlines": 0, "user": "FILE452"}, "text": ")F FUNCTION -\n     The ADDTO command is used to concatenate datasets to a currently\n     allocated DD.  These NEW datasets will be placed in front of the\n     existing allocated files.\n\n     This command is useful if your installation has a \"STOCK\" LOGON\n     procedure, and users wish to place there own private libraries in\n     front of this list of libraries.  With the ADDTO command, it is not\n     necessary for the user to reallocate the DD specifying ALL the\n     libraries in the LOGON proc.\n     This also makes it easier for the SYSPROG to ADD, REMOVE or RENAME\n     libraries in the LOGON procedure.\n)X SYNTAX  -\n     ADDTO ddname (library list) < CREATE > < REMOVE >\n\n     REQUIRED  - ddname and library list\n\n     DEFAULTS  - none\n\n     Note:     Optional keywords \"CREATE\" and \"REMOVE\" are\n               mutually exclusive\n\n     EXAMPLE   - ADDTO SYSPROC (MY.CLIST 'YOUR.CLIST')\n)O OPERANDS\n     ddname       - The DDNAME which you wish to extend.\n     library list - A single dataset name, or a list of names enclosed\n                    within brackets.\n                    If the dataset name is not within quotes, it will\n                    be assumed that it is the for the current users's\n                    prefix.\n     CREATE       - If the DDNAME does not exist, allocate it.\n     REMOVE       - Remove the \"library list\" from the concatenation.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ADIS": {"ttr": 3848, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x01\\x08\\x13o\\x01\\x08\\x13o\\x01S\\x00\\x1a\\x00.\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf8\\xf5@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2008-05-15T00:00:00", "modifydate": "2008-05-15T01:53:00", "lines": 26, "newlines": 46, "modlines": 0, "user": "FILE185"}, "text": "\n)F FUNCTION -\n\n The ADIS TSO command.\n\n Display the PARMLIB-generated TSO/E \"auth tables\":  IKJEFTE2 (AUTHCMD),\n  IKJEFTE8 (AUTHPGM), IKJEFTNS (NOTBKGND) and IKJEFTAP (AUTHTSF),\n  FCVE (PLATCMD) and PPVE (PLATPGM), if they exist.\n\n)X SYNTAX -\n\n   ADIS E2D \u00ddnnn\u00a8   or\n   ADIS E8D \u00ddnnn\u00a8   or\n   ADIS APD \u00ddnnn\u00a8   or\n   ADIS NSD \u00ddnnn\u00a8   or\n   ADIS PCD \u00ddnnn\u00a8   or\n   ADIS PPD \u00ddnnn\u00a8   .\n\n     where nnn is an optional number.\n\n   If nnn is not entered, the entire table is displayed.\n   If nnn is entered, only table entry nnn is displayed.\n   If nnn is a larger number than the number of entries in\n      that particular table, then an error message is displayed,\n      which tells you the permissible values of the number nnn.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "APFLIST": {"ttr": 3850, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x13\\x01\\x08\\x13o\\x01\\x19\\x15?\\x11F\\x00,\\x00.\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf5\\xf6\\xf6@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2008-05-15T00:00:00", "modifydate": "2019-06-02T11:46:13", "lines": 44, "newlines": 46, "modlines": 0, "user": "FILE566"}, "text": ")F FUNCTION -\n\n The APFLIST TSO command.\n\n Display the list of APF-Authorized libraries on the system.\n\n)X SYNTAX -\n\n   APFLIST\n\n)O OPERANDS\n\n   none\n\n Note:  This command produces output that can be trapped,\n        because it uses the TSO PUTLINE interface.\n\n FLAGS:       'M'     MUST BE MISCATALOGED\n              '?'     DATASET MISSING\n\n Sample output:\n\n *** LIST OF  nn DYNAMIC APF LIBRARIES ***\n   ### APFVOL CATVOL F SMS DSNAME......\n     1 ZOSRES ZOSRES       SYS1.LINKLIB\n     2 ZOSRES ZOSRES       SYS1.SVCLIB\n     3 ZOSRES ZOSRES       SYS1.MIGLIB\n     4 ZOSRES ZOSRES       SYS1.CSSLIB\n     5 ZOSRS2 ZOSRS2       SYS1.DGTLLIB\n     6 ZOSRS1 ZOSRS1       SYS1.SIEALNKE\n     7 ZOSRS1 ZOSRS1       SYS1.SIEAMIGE\n     8 ZOSRES ZOSRES       SYS1.SHASMIG\n     9 ZOSRES ZOSRES       SYS1.SHASLNKE\n    10 ZOSRES ZOSRES       SYS1.CMDLIB\n    11 ZOSRES ZOSRES       SYS1.LPALIB\n    12 ZOSRES ZOSRES       CEE.SCEERUN\n    13 ZOSRES ZOSRES       SYS1.SISTCLIB\n    14 ZOSRES ZOSRES       ISP.SISPLOAD\n    15 ZOSRES ZOSRES       SYS1.VTAMLIB\n         *  *  *  *  *  *  *  *\n\n   Title Line:  F stands for \"Flag\"  (see FLAGS above)\n                SMS reports that the volume is SMS managed\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "BLKDISK": {"ttr": 3852, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x04\\x01\\x046_\\x01\\x12 \\x8f\\x141\\x01N\\x01:\\x00\\x16\\xc6\\xc9\\xd3\\xc5\\xf2\\xf9\\xf6@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2004-12-30T00:00:00", "modifydate": "2012-07-26T14:31:04", "lines": 334, "newlines": 314, "modlines": 22, "user": "FILE296"}, "text": "           ALIASES FOR THE BLKDISK PROGRAM SHOULD BE CREATED,\n           ONE ALIAS FOR EACH DISK PACK TYPE (OR GEOMETRY).\n           AS FOLLOWS:  THE TSO COMMAND THAT YOU RUN, SHOULD\n           BE THE ALIAS OF THE BLKDISK COMMAND FOR THE APPROPRIATE\n           DISK TYPE.\n\n           IN THIS HELP PDS, YOU SHOULD MAKE SEPARATE MEMBERS\n           WITH THE FOLLOWING NAMES, ALSO. (FOR WHICHEVER TYPE\n           OF DASD YOU ARE RUNNING, OR WHICH YOU NEED INFORMATION\n           ABOUT.\n\n                 BLK23051\n                 BLK23052\n                 BLK2314\n                 BLK3330\n                 BLK33301\n                 BLK3340\n                 BLK3350\n                 BLK3375\n                 BLK3380\n//*              BLK3390\n//*              BLK9345\n//*\n//*  NOTE: MAKE A VERSION OF THE FOLLOWING HELP DATA FOR EACH\n//*        DEVICE TYPE TO BE SUPPORTED AT YOUR INSTALLATION.\n//*\n//*        FOR EACH DISK TYPE, CREATE A HELP MEMBER CALLED BLKXXXX\n//*        WHERE XXXX IS ONE OF THE FOLLOWING: 23051, 23052,\n//*        2314, 3330, 33301, 3340, 3350, 3375 OR 3380;\n//*        THESE NAMES CORRESPOND TO DASD TYPES: 2305-1, 2305-2,\n//*        2314, 3330, 3330-11, 3340, 3350, 3375 OR 3380.\n//*\n//*        COPY MEMBER BLKDISK, REPLACING YYYY IN THE TEXT WITH THE\n//*        NAME OF ONE OF THE SUPPORTED DEVICE TYPES: 2305-1, 2305-2,\n//*        2314, 3330, 3330-11, 3340, 3350, 3375 OR 3380.\n//*\n//*        ALSO, REPLACE BLKXXXX IN THE HELP TEXT WITH THE NAME OF\n//*        THIS MEMBER (BLKXXXX OCCURS TWICE IN THE TEXT).\n//*\n//BDISK EXEC BCOPY,MEMBER=BLKDISK\n//COPY.SYSUT1 DD *\n)F FUNCTION -\n  THE BLKDISK COMMAND COMPUTES AN OPTIMAL BLOCKSIZE FOR A DATA SET\n  TO BE PLACED ON A YYYY DISK PACK.  THE PROGRAM OUTPUT INCLUDES\n  THE FOLLOWING REPORTS:\n     1.  A SUMMARY BLOCKSIZE REPORT FOR THE GIVEN LRECL AND KEY\n         LENGTH WHICH INCLUDES THE RECOMMENDED BLOCKSIZE TO USE.\n     2.  A RECOMMENDED DATA SET SPACE ALLOCATION.\n     3.  A OPTIONAL TRACK CAPACITY REPORT FOR THE PROVIDED KEY LENGTH.\n\n  THE RECOMMENDED BLOCKSIZE VALUE IS FOR DATA SETS IN WHICH THE\n  PREDOMINANT ACCESS IS SEQUENTIAL; FOR DATA SETS WHERE RANDOM\n  ACCESS TIME IS CRITICAL OR THE USUAL ACCESS IS RANDOM, A SMALL\n  BLOCKSIZE (500-2000 BYTES) SHOULD PROBABLY BE USED.\n\n  THE RECOMMENDED BLOCKSIZE WILL USUALLY TEND TO BE NEAR A HALF-TRACK\n  FIGURE AS THIS IS CONSIDERED TO BE THE MOST EFFICIENT IN TERMS OF\n  THE TRADE-OFFS AMONG BUFFER SIZE, SECONDARY STORAGE REQUIREMENTS,\n  CHANNEL USE, NUMBER OF INPUT/OUTPUTS AND OVERALL PROCESSING TIME.\n  THIS FIGURE IS ONLY A GENERAL GUIDE; FOR MAXIMAL EFFICIENCY\n  CONSIDERING OTHER FACTORS, STUDY THE GENERATED BLOCKSIZE SUMMARY\n  REPORT OR A TRACK CAPACITY REPORT.\n\n  THE PROGRAM'S RECOMMENDATIONS ASSUME A FAIRLY LARGE AMOUNT OF DATA\n  IS TO BE STORED; DATA SETS WHICH OCCUPY ONLY A FEW TRACKS SHOULD\n  PROBABLY BE PLACED IN PARTITIONED DATA SETS.  IN CASES WHERE THIS\n  IS NOT FEASIBLE, THE USE OF A SMALL BLOCKSIZE (2400 - 4000 BYTES)\n  MAY BE A GOOD ALTERNATIVE PRACTICE.\n)X SYNTAX  -\n         BLKDISK  'LRECL'  KEYLENGTH('INTEGER')\n                           TRACKCAP / NOTRACKCAP\n                           BLKSIZE('INTEGER')\n                           NUMBER('INTEGER') / RECORDS('INTEGER')\n                           VERIFY\n  REQUIRED - LRECL\n  DEFAULTS - KEYLENGTH(0),\n             NOTRACKCAP,\n             BLKSIZE(RECOMMENDED VALUE),\n             NUMBER(100000)\n)O OPERANDS -\n 'LRECL'  - THE LOGICAL RECORD LENGTH OF THE DATA WHICH IS TO BE\n            PLACED IN THE DATA SET.\n))KEYLENGTH('INTEGER')\n          - THE KEY LENGTH, IN BYTES, OF THE KEYS TO BE USED IN THE\n            DATA SET.  THE MAXIMUM LEGAL KEY LENGTH IS 255.\n))TRACKCAP\n          - SPECIFIES THAT A TRACK CAPACITY REPORT IS TO BE PROVIDED\n            FOR THE DEVICE USING THE SPECIFIED (OR DEFAULT) KEY LENGTH.\n\n            NOTE THAT A TRACK CAPACITY REPORT IS ALSO PROVIDED IF\n            NOTRACKCAP IS NOT SPECIFIED AND LRECL EXCEEDS THE MAXIMUM\n            BLOCKSIZE FOR A TRACK OR BLKSIZE EXCEEDS THE MAXIMUM\n            BLOCKSIZE FOR A TRACK.\n))NOTRACKCAP\n          - SPECIFIES THAT A TRACK CAPACITY REPORT IS NOT DESIRED.\n))BLKSIZE('INTEGER')\n          - THE BLOCKSIZE TO USE FOR THE ALLOCATION COMPUTATION; IF\n            BLKSIZE IS NOT ENTERED (OR ZERO IS ENTERED), THE PROGRAM'S\n            RECOMMENDED BLOCKSIZE WILL BE USED.\n))NUMBER('INTEGER')\n          - THE NUMBER OF LOGICAL RECORDS THAT WILL BE IN THE DATA SET.\n))RECORDS('INTEGER')\n          - THE NUMBER OF LOGICAL RECORDS THAT WILL BE IN THE DATA SET.\n))VERIFY  - SPECIFIES THAT THE MVS \"TRKCALC\" ROUTINE IS TO BE USED TO\n            VERIFY TRACK CAPACITY CALCULATIONS.  IF VERIFY IS USED,\n            THE NUMBER OF CALLS TO \"TRKCALC\" TO DETERMINE A TRACK\n            CAPACITY TABLE IS OUTPUT AT THE END OF THE OUTPUT.\n\n            NOTE: WITH VERIFY ON, A MINIMUM OF 34 CALLS IS REQUIRED TO\n            DETERMINE A TRACK CAPACITY TABLE; OTHERWISE A MINIMUM OF\n            17 CALLS IS REQUIRED TO DETERMINE THE TRACK CAPACITY TABLE.\n//*\n//B3380 EXEC BCOPY,MEMBER=BLK3380\n//COPY.SYSUT1 DD *\n)F FUNCTION -\n  THE BLK3380 COMMAND COMPUTES AN OPTIMAL BLOCKSIZE FOR A DATA SET\n  TO BE PLACED ON A 3380 DISK PACK.  THE PROGRAM OUTPUT INCLUDES\n  THE FOLLOWING REPORTS:\n     1.  A SUMMARY BLOCKSIZE REPORT FOR THE GIVEN LRECL AND KEY\n         LENGTH WHICH INCLUDES THE RECOMMENDED BLOCKSIZE TO USE.\n     2.  A RECOMMENDED DATA SET SPACE ALLOCATION.\n     3.  A OPTIONAL TRACK CAPACITY REPORT FOR THE PROVIDED KEY LENGTH.\n\n  THE RECOMMENDED BLOCKSIZE VALUE IS FOR DATA SETS IN WHICH THE\n  PREDOMINANT ACCESS IS SEQUENTIAL; FOR DATA SETS WHERE RANDOM\n  ACCESS TIME IS CRITICAL OR THE USUAL ACCESS IS RANDOM, A SMALL\n  BLOCKSIZE (500-2000 BYTES) SHOULD PROBABLY BE USED.\n\n  THE RECOMMENDED BLOCKSIZE WILL USUALLY TEND TO BE NEAR A HALF-TRACK\n  FIGURE AS THIS IS CONSIDERED TO BE THE MOST EFFICIENT IN TERMS OF\n  THE TRADE-OFFS AMONG BUFFER SIZE, SECONDARY STORAGE REQUIREMENTS,\n  CHANNEL USE, NUMBER OF INPUT/OUTPUTS AND OVERALL PROCESSING TIME.\n  THIS FIGURE IS ONLY A GENERAL GUIDE; FOR MAXIMAL EFFICIENCY\n  CONSIDERING OTHER FACTORS, STUDY THE GENERATED BLOCKSIZE SUMMARY\n  REPORT OR A TRACK CAPACITY REPORT.\n\n  THE PROGRAM'S RECOMMENDATIONS ASSUME A FAIRLY LARGE AMOUNT OF DATA\n  IS TO BE STORED; DATA SETS WHICH OCCUPY ONLY A FEW TRACKS SHOULD\n  PROBABLY BE PLACED IN PARTITIONED DATA SETS.  IN CASES WHERE THIS\n  IS NOT FEASIBLE, THE USE OF A SMALL BLOCKSIZE (2400 - 4000 BYTES)\n  MAY BE A GOOD ALTERNATIVE PRACTICE.\n)X SYNTAX  -\n         BLK3380  'LRECL'  KEYLENGTH('INTEGER')\n                           TRACKCAP / NOTRACKCAP\n                           BLKSIZE('INTEGER')\n                           NUMBER('INTEGER') / RECORDS('INTEGER')\n                           VERIFY\n  REQUIRED - LRECL\n  DEFAULTS - KEYLENGTH(0),\n             NOTRACKCAP,\n             BLKSIZE(RECOMMENDED VALUE),\n             NUMBER(100000)\n)O OPERANDS -\n 'LRECL'  - THE LOGICAL RECORD LENGTH OF THE DATA WHICH IS TO BE\n            PLACED IN THE DATA SET.\n))KEYLENGTH('INTEGER')\n          - THE KEY LENGTH, IN BYTES, OF THE KEYS TO BE USED IN THE\n            DATA SET.  THE MAXIMUM LEGAL KEY LENGTH IS 255.\n))TRACKCAP\n          - SPECIFIES THAT A TRACK CAPACITY REPORT IS TO BE PROVIDED\n            FOR THE DEVICE USING THE SPECIFIED (OR DEFAULT) KEY LENGTH.\n\n            NOTE THAT A TRACK CAPACITY REPORT IS ALSO PROVIDED IF\n            NOTRACKCAP IS NOT SPECIFIED AND LRECL EXCEEDS THE MAXIMUM\n            BLOCKSIZE FOR A TRACK OR BLKSIZE EXCEEDS THE MAXIMUM\n            BLOCKSIZE FOR A TRACK.\n))NOTRACKCAP\n          - SPECIFIES THAT A TRACK CAPACITY REPORT IS NOT DESIRED.\n))BLKSIZE('INTEGER')\n          - THE BLOCKSIZE TO USE FOR THE ALLOCATION COMPUTATION; IF\n            BLKSIZE IS NOT ENTERED (OR ZERO IS ENTERED), THE PROGRAM'S\n            RECOMMENDED BLOCKSIZE WILL BE USED.\n))NUMBER('INTEGER')\n          - THE NUMBER OF LOGICAL RECORDS THAT WILL BE IN THE DATA SET.\n))RECORDS('INTEGER')\n          - THE NUMBER OF LOGICAL RECORDS THAT WILL BE IN THE DATA SET.\n))VERIFY  - SPECIFIES THAT THE MVS \"TRKCALC\" ROUTINE IS TO BE USED TO\n            VERIFY TRACK CAPACITY CALCULATIONS.  IF VERIFY IS USED,\n            THE NUMBER OF CALLS TO \"TRKCALC\" TO DETERMINE A TRACK\n            CAPACITY TABLE IS OUTPUT AT THE END OF THE OUTPUT.\n\n            NOTE: WITH VERIFY ON, A MINIMUM OF 34 CALLS IS REQUIRED TO\n            DETERMINE A TRACK CAPACITY TABLE; OTHERWISE A MINIMUM OF\n            17 CALLS IS REQUIRED TO DETERMINE THE TRACK CAPACITY TABLE.\n//*\n//B3390 EXEC BCOPY,MEMBER=BLK3390\n//COPY.SYSUT1 DD *\n)F FUNCTION -\n  THE BLK3390 COMMAND COMPUTES AN OPTIMAL BLOCKSIZE FOR A DATA SET\n  TO BE PLACED ON A 3390 DISK PACK.  THE PROGRAM OUTPUT INCLUDES\n  THE FOLLOWING REPORTS:\n     1.  A SUMMARY BLOCKSIZE REPORT FOR THE GIVEN LRECL AND KEY\n         LENGTH WHICH INCLUDES THE RECOMMENDED BLOCKSIZE TO USE.\n     2.  A RECOMMENDED DATA SET SPACE ALLOCATION.\n     3.  A OPTIONAL TRACK CAPACITY REPORT FOR THE PROVIDED KEY LENGTH.\n\n  THE RECOMMENDED BLOCKSIZE VALUE IS FOR DATA SETS IN WHICH THE\n  PREDOMINANT ACCESS IS SEQUENTIAL; FOR DATA SETS WHERE RANDOM\n  ACCESS TIME IS CRITICAL OR THE USUAL ACCESS IS RANDOM, A SMALL\n  BLOCKSIZE (500-2000 BYTES) SHOULD PROBABLY BE USED.\n\n  THE RECOMMENDED BLOCKSIZE WILL USUALLY TEND TO BE NEAR A HALF-TRACK\n  FIGURE AS THIS IS CONSIDERED TO BE THE MOST EFFICIENT IN TERMS OF\n  THE TRADE-OFFS AMONG BUFFER SIZE, SECONDARY STORAGE REQUIREMENTS,\n  CHANNEL USE, NUMBER OF INPUT/OUTPUTS AND OVERALL PROCESSING TIME.\n  THIS FIGURE IS ONLY A GENERAL GUIDE; FOR MAXIMAL EFFICIENCY\n  CONSIDERING OTHER FACTORS, STUDY THE GENERATED BLOCKSIZE SUMMARY\n  REPORT OR A TRACK CAPACITY REPORT.\n\n  THE PROGRAM'S RECOMMENDATIONS ASSUME A FAIRLY LARGE AMOUNT OF DATA\n  IS TO BE STORED; DATA SETS WHICH OCCUPY ONLY A FEW TRACKS SHOULD\n  PROBABLY BE PLACED IN PARTITIONED DATA SETS.  IN CASES WHERE THIS\n  IS NOT FEASIBLE, THE USE OF A SMALL BLOCKSIZE (2400 - 4000 BYTES)\n  MAY BE A GOOD ALTERNATIVE PRACTICE.\n)X SYNTAX  -\n         BLK3390  'LRECL'  KEYLENGTH('INTEGER')\n                           TRACKCAP / NOTRACKCAP\n                           BLKSIZE('INTEGER')\n                           NUMBER('INTEGER') / RECORDS('INTEGER')\n                           VERIFY\n  REQUIRED - LRECL\n  DEFAULTS - KEYLENGTH(0),\n             NOTRACKCAP,\n             BLKSIZE(RECOMMENDED VALUE),\n             NUMBER(100000)\n)O OPERANDS -\n 'LRECL'  - THE LOGICAL RECORD LENGTH OF THE DATA WHICH IS TO BE\n            PLACED IN THE DATA SET.\n))KEYLENGTH('INTEGER')\n          - THE KEY LENGTH, IN BYTES, OF THE KEYS TO BE USED IN THE\n            DATA SET.  THE MAXIMUM LEGAL KEY LENGTH IS 255.\n))TRACKCAP\n          - SPECIFIES THAT A TRACK CAPACITY REPORT IS TO BE PROVIDED\n            FOR THE DEVICE USING THE SPECIFIED (OR DEFAULT) KEY LENGTH.\n\n            NOTE THAT A TRACK CAPACITY REPORT IS ALSO PROVIDED IF\n            NOTRACKCAP IS NOT SPECIFIED AND LRECL EXCEEDS THE MAXIMUM\n            BLOCKSIZE FOR A TRACK OR BLKSIZE EXCEEDS THE MAXIMUM\n            BLOCKSIZE FOR A TRACK.\n))NOTRACKCAP\n          - SPECIFIES THAT A TRACK CAPACITY REPORT IS NOT DESIRED.\n))BLKSIZE('INTEGER')\n          - THE BLOCKSIZE TO USE FOR THE ALLOCATION COMPUTATION; IF\n            BLKSIZE IS NOT ENTERED (OR ZERO IS ENTERED), THE PROGRAM'S\n            RECOMMENDED BLOCKSIZE WILL BE USED.\n))NUMBER('INTEGER')\n          - THE NUMBER OF LOGICAL RECORDS THAT WILL BE IN THE DATA SET.\n))RECORDS('INTEGER')\n          - THE NUMBER OF LOGICAL RECORDS THAT WILL BE IN THE DATA SET.\n))VERIFY  - SPECIFIES THAT THE MVS \"TRKCALC\" ROUTINE IS TO BE USED TO\n            VERIFY TRACK CAPACITY CALCULATIONS.  IF VERIFY IS USED,\n            THE NUMBER OF CALLS TO \"TRKCALC\" TO DETERMINE A TRACK\n            CAPACITY TABLE IS OUTPUT AT THE END OF THE OUTPUT.\n\n            ** N O T E **  - NOT CURRENTLY SUPPORTED FOR 3390.\n\n            NOTE: WITH VERIFY ON, A MINIMUM OF 34 CALLS IS REQUIRED TO\n            DETERMINE A TRACK CAPACITY TABLE; OTHERWISE A MINIMUM OF\n            17 CALLS IS REQUIRED TO DETERMINE THE TRACK CAPACITY TABLE.\n//*\n//B9345 EXEC BCOPY,MEMBER=BLK9345\n//COPY.SYSUT1 DD *\n)F FUNCTION -\n  THE BLK9345 COMMAND COMPUTES AN OPTIMAL BLOCKSIZE FOR A DATA SET\n  TO BE PLACED ON A 9345 DISK PACK.  THE PROGRAM OUTPUT INCLUDES\n  THE FOLLOWING REPORTS:\n     1.  A SUMMARY BLOCKSIZE REPORT FOR THE GIVEN LRECL AND KEY\n         LENGTH WHICH INCLUDES THE RECOMMENDED BLOCKSIZE TO USE.\n     2.  A RECOMMENDED DATA SET SPACE ALLOCATION.\n     3.  A OPTIONAL TRACK CAPACITY REPORT FOR THE PROVIDED KEY LENGTH.\n\n  THE RECOMMENDED BLOCKSIZE VALUE IS FOR DATA SETS IN WHICH THE\n  PREDOMINANT ACCESS IS SEQUENTIAL; FOR DATA SETS WHERE RANDOM\n  ACCESS TIME IS CRITICAL OR THE USUAL ACCESS IS RANDOM, A SMALL\n  BLOCKSIZE (500-2000 BYTES) SHOULD PROBABLY BE USED.\n\n  THE RECOMMENDED BLOCKSIZE WILL USUALLY TEND TO BE NEAR A HALF-TRACK\n  FIGURE AS THIS IS CONSIDERED TO BE THE MOST EFFICIENT IN TERMS OF\n  THE TRADE-OFFS AMONG BUFFER SIZE, SECONDARY STORAGE REQUIREMENTS,\n  CHANNEL USE, NUMBER OF INPUT/OUTPUTS AND OVERALL PROCESSING TIME.\n  THIS FIGURE IS ONLY A GENERAL GUIDE; FOR MAXIMAL EFFICIENCY\n  CONSIDERING OTHER FACTORS, STUDY THE GENERATED BLOCKSIZE SUMMARY\n  REPORT OR A TRACK CAPACITY REPORT.\n\n  THE PROGRAM'S RECOMMENDATIONS ASSUME A FAIRLY LARGE AMOUNT OF DATA\n  IS TO BE STORED; DATA SETS WHICH OCCUPY ONLY A FEW TRACKS SHOULD\n  PROBABLY BE PLACED IN PARTITIONED DATA SETS.  IN CASES WHERE THIS\n  IS NOT FEASIBLE, THE USE OF A SMALL BLOCKSIZE (2400 - 4000 BYTES)\n  MAY BE A GOOD ALTERNATIVE PRACTICE.\n)X SYNTAX  -\n         BLK9345  'LRECL'  KEYLENGTH('INTEGER')\n                           TRACKCAP / NOTRACKCAP\n                           BLKSIZE('INTEGER')\n                           NUMBER('INTEGER') / RECORDS('INTEGER')\n                           VERIFY\n  REQUIRED - LRECL\n  DEFAULTS - KEYLENGTH(0),\n             NOTRACKCAP,\n             BLKSIZE(RECOMMENDED VALUE),\n             NUMBER(100000)\n)O OPERANDS -\n 'LRECL'  - THE LOGICAL RECORD LENGTH OF THE DATA WHICH IS TO BE\n            PLACED IN THE DATA SET.\n))KEYLENGTH('INTEGER')\n          - THE KEY LENGTH, IN BYTES, OF THE KEYS TO BE USED IN THE\n            DATA SET.  THE MAXIMUM LEGAL KEY LENGTH IS 255.\n))TRACKCAP\n          - SPECIFIES THAT A TRACK CAPACITY REPORT IS TO BE PROVIDED\n            FOR THE DEVICE USING THE SPECIFIED (OR DEFAULT) KEY LENGTH.\n\n            NOTE THAT A TRACK CAPACITY REPORT IS ALSO PROVIDED IF\n            NOTRACKCAP IS NOT SPECIFIED AND LRECL EXCEEDS THE MAXIMUM\n            BLOCKSIZE FOR A TRACK OR BLKSIZE EXCEEDS THE MAXIMUM\n            BLOCKSIZE FOR A TRACK.\n))NOTRACKCAP\n          - SPECIFIES THAT A TRACK CAPACITY REPORT IS NOT DESIRED.\n))BLKSIZE('INTEGER')\n          - THE BLOCKSIZE TO USE FOR THE ALLOCATION COMPUTATION; IF\n            BLKSIZE IS NOT ENTERED (OR ZERO IS ENTERED), THE PROGRAM'S\n            RECOMMENDED BLOCKSIZE WILL BE USED.\n))NUMBER('INTEGER')\n          - THE NUMBER OF LOGICAL RECORDS THAT WILL BE IN THE DATA SET.\n))RECORDS('INTEGER')\n          - THE NUMBER OF LOGICAL RECORDS THAT WILL BE IN THE DATA SET.\n))VERIFY  - SPECIFIES THAT THE MVS \"TRKCALC\" ROUTINE IS TO BE USED TO\n            VERIFY TRACK CAPACITY CALCULATIONS.  IF VERIFY IS USED,\n            THE NUMBER OF CALLS TO \"TRKCALC\" TO DETERMINE A TRACK\n            CAPACITY TABLE IS OUTPUT AT THE END OF THE OUTPUT.\n\n            ** N O T E **  - NOT CURRENTLY SUPPORTED FOR 9345.\n\n            NOTE: WITH VERIFY ON, A MINIMUM OF 34 CALLS IS REQUIRED TO\n            DETERMINE A TRACK CAPACITY TABLE; OTHERWISE A MINIMUM OF\n            17 CALLS IS REQUIRED TO DETERMINE THE TRACK CAPACITY TABLE.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "BLKSPTRK": {"ttr": 4100, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x004\\x00\\x99\\x12o\\x00\\x99\\x12o\\x082\\x00\\xc3\\x00\\xc3\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf9\\xf9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-05-06T00:00:00", "modifydate": "1999-05-06T08:32:34", "lines": 195, "newlines": 195, "modlines": 0, "user": "FILE199"}, "text": ")F FUNCTION\n  The BLKSPTRK command calculates direct access storage device track\n  capacities. For a given list of device types, this command will\n  display exactly how many blocks of a given size (with or without\n  keys) will fit on each track.\n\n  This command also computes the usable track residue showing the\n  largest block that will still fit at the end of a track that has been\n  filled with blocks all of the given size.\n  This program is copyrighted (c) 1997 by David B. Cole.\n\n\n  LEGAL INFORMATION:\n\n      This program is copyrighted (c) 1997 by David B. Cole.\n\n      This program is distributed freely and may be reproduced and\n      redistributed without restriction other than:\n        - This copyright and usage/warranty/liability restriction\n          statement (\"Legal Statement\") may not be modified or removed.\n        - A similar Legal Statement located in this program's source\n          code also may not be removed.\n        - This Online Help File must be installed in a suitable \"help\n          library\" (such as SYS1.HELP) so that users may see both the\n          Legal Statement as well as usage instruction.\n\n      This program is distributed without warranty of any kind,\n      including (without limitation) warranties of merchantability and\n      of fitness for a particular purpose. It is up to the user to make\n      his own determination of the usefulness of this program in his\n      own system.\n\n      The user agrees not to hold me (David B. Cole) liable for any\n      damage whatsoever, and the user agrees to indemnify me against\n      third parties for any action arising from the user's use,\n      modification, and/or redistribution of this program.\n\n      This program may be modified freely so long as all modifications\n      are clearly marked both internally and externally to distinguish\n      them from the distributed code and functionallity.\n\n      As a courtesy, please notify me if you discover any bugs or if\n      you need or have made any code changes. (I of of course do not\n      guarantee either that I will or that I will not make any future\n      changes or corrections.)\n\n      My contact information as of JUL97 is:\n\n          Name:                David B. Cole\n          Country:             USA\n          Telephone:           540-456-8536\n          FAX:                 540-456-6658\n          E-mail:              davidbcole@aol.com\n          Website:             www.colesoft.com\n\n          Snail Mail:          Cole Software\n                               736 Fox Hollow Road\n                               Afton, VA 22920\n                               USA\n\n)X SYNTAX\n             BLKSPTRK (devtype devtype ...)\n                      BLKSIZE(<size or #count> <size or #count> ...)\n                      KEYLEN(length length ...)\n  Alias    - BPT\n  Default  - BLKSPTRK BLKSIZE(#1) KEYLEN(0)\n  Required - at least one devtype\n\n  Note     - Lists of values may be given for both the devtype,\n             BLKSIZE, and KEYLEN operands. When lists are given,\n             BLKSPTRK will produce a matrix of all value combinations.\n             The size of the report will be the product of the number\n             of values given in each list. Example:\n\n                 BPT (2314 3380 9345) BLKSIZE(1 99999 #2) KEY(0 1)\n\n             This causes BLKSPTRK to product an 18 line report.\n\n)O OPERANDS\n))devtype -\n         This operand is required. It must contain a list of one or\n         more direct access storage device types. (e.g. 3330, 2305-2,\n         etc.).  If more than one device type is given, then the list\n         must be enclosed within parentheses. Currently (JUL97) the\n         following device types are recognized:\n               2301     (parallel drum)\n               2302     (disk)\n               2303     (serial drum)\n               2305-1   (drum, 2 logical tracks per physical track)\n               2305-2   (drum, 1 logical track  per physical track)\n               2311     (removable disk)\n               2314     (removable disk)\n               2319     (same as 2314)\n               2321     (data cell)\n               3330     (removable disk)\n               3340     (disk)\n               3350     (disk)\n               3375     (disk)\n               3380     (disk)\n               3390     (disk)\n               3995-111 (removable optical disk - CD-ROM)\n               3995-113 (removable optical disk - CD-ROM)\n               3995-151 (removable optical disk - CD-ROM)\n               3995-153 (removable optical disk - CD-ROM)\n               9345     (rack-mounted disk)\n\n         Notes:\n\n           - In JUL97 I extensively verified program output against\n             published track capacity tables for the following devices:\n                 2305-1 2305-2 3330 3350 3380 3390 and 9345.\n             The program output matched the published data for all\n             tested devices except the 2305-1 drum.\n\n           - For 2305-1 drums, the BLKSPTRK program disagreed with\n             the published information relating to the maximum size\n             blocks that can fit n times per track for the following\n             values of \"n\":\n                 #5 #7 #8 #15 #18 #21 #23 #24 #27 #52 and #36.\n             In each case the reported maximum blksize was one byte\n             greater than the published maximum blksize.\n\n             This descrepancy did not occur for any other tested DASD,\n             and in particular it did not occur for 2305-2 drums!\n\n             It is possible that for the 2305-1 drum, the computation\n             factors and parameters used by BLKSPTRK might be\n             incorrect; however, it is also possible that the published\n             tables themselves are wrong. But at this point (JUL97) it\n             is both too late and not worth it to double check those\n             factors.\n\n             For what it's worth, the published capacity tables were\n             found in GA26-1589-3: \"Reference Manual for IBM 2835\n             Storage Control and IBM 2305 Fixed Head Storage Module\".\n             The computation parameters used by BLKSPTRK for the 2305-1\n             are:\n                 DASD Type:                 Non-cellular\n                 Track Capacity:            X'38E8' bytes\n                 Overhead (all blocks):     X'027A'\n                 Unkeyed Block Underhead:   X'CA'\n                 Tolerance Factor (all but  X'0200' (X'0200' has no\n                 the last block):                   effect)\n\n))BLKSIZE -\n         This operand is optional. If omitted, then B(#1) is used. If\n         given, then it must specify a list of one or more physical\n         block sizes and/or block counts.\n\n         A block size is given as a plain number (e.g., B(6160)). A\n         block count is given preceded by a pound sign (e.g., B(#5)).\n\n         When a block count is given, BLKSPTRK displays the size of the\n         largest block that fits the given number of times on a track.\n\n         Notes:\n\n           - Giving a zero value is equivalent to giving #1. Thus, all\n             of the following are equilivant: BLKSIZE(#1) BLKSIZE(#0)\n             and BLKSIZE(0).\n\n           - Giving a block count that is higher than the most number\n             of blocks that can fit on a track causes BLKSPTRK to\n             devolve to showing the maximum number of blocks (1 byte in\n             size) that will fit per track. Thus, the following are\n             equivalent: BLKSIZE(#200) and BLKSIZE(1).\n\n           - Giving a block size that is larger than the largest block\n             that can fit on a track causes BLKSPTRK to devolve to\n             showing the largest block that will fit. Thus, the\n             following are equivalent: BLKSIZE(99999) and BLKSIZE(#1).\n\n         Example:\n\n         BPT (3380 3390) BLKSIZE(#1 #200) KEY(0 1)\n         This produces a 8-line report (4 lines for each disk) showing\n         (a) the largest block that will fit on a track (#1) and (b)\n         the most number of blocks that will fit per track (#200). The\n         information is shown both for keyed (KEY(1)) and unkeyed\n         (KEY(0)) blocks.\n\n))KEYLEN -\n         This operand is optional. If omitted, then a zero value is\n         used. if given, then it may specify one or more key lengths to\n         be used in the track capacity calculations.\n\n         Example:\n\n         BPT (3380 3390) BLKSIZE(#1 #200) KEY(0 1)\n         This produces a 8-line report (4 lines for each disk) showing\n         (a) the largest block that will fit on a track (#1) and (b)\n         the most number of blocks that will fit per track (#200). The\n         information is shown both for keyed (KEY(1)) and unkeyed\n         (KEY(0)) blocks.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "BURN": {"ttr": 4104, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00H\\x01\\x120o\\x01\\x120o\\x12T\\x00`\\x00;\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf8\\xf7\\xf8@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2012-11-01T00:00:00", "modifydate": "2012-11-01T12:54:48", "lines": 96, "newlines": 59, "modlines": 0, "user": "FILE878"}, "text": ")F FUNCTION -\n\n  The TSO command BURN will terminate an address space,\n  as if you would FORCE it.  BURN operates by issuing a\n  CALLRTM TYPE=MEMTERM, against that address space.\n\n  Since a single jobname may have multiple ASIDs,\n  you want to be very careful, which address space\n  you want to terminate.  So there is an ASID parameter\n  as well as a JOBNAME parameter associated with\n  the BURN command.\n\n  If you terminate an ASID that has multiple jobnames\n  attached to it, all those jobnames will be burned.\n\n  If you enter a JOBNAME(jobname) parameter, you will\n  be prompted to enter an ASID number in hex.\n  (See the examples below....)\n\n)X SYNTAX  -\n\n       BURN  JOBNAME(jobname) ASID(hhhh)\n       BURN  JOB(jobname)     ASID(hhhh)\n       BURN  JOBNAME(partj*)\n                              where * is a wildcard\n                              which will list all\n                              jobnames beginning with\n                              \"partj\"\n\n  REQUIRED - either JOBname( )  or ASID(  )\n  DEFAULTS - NONE\n  ALIAS    - NONE\n\n       Prompts will be returned after entering the initial\n        sub-parameters.\n\n       Answer the prompts, and enter the job number to\n        be burned, in hex.\n\n       * is a wildcard in the JOBNAME, if entered as jjj*\n\n       If no JOB or ASID entered, then the program will\n        issue a message and terminate.\n\n       If J entered, the program will prompt for jobname.\n\n       If A entered, the program will prompt for ASID number.\n\n       If an incorrect prompt is entered, the program will\n        prompt for a correct answer.\n\n       If 3 incorrect tries are entered, then the program\n        will terminate.  (This is a convenient way to get out\n        of the program.  Just enter 3 incorrect tries, or\n        enter PA1, either of which will get you out of the\n        program.)\n\n Examples:     DO NOT DO THIS UNLESS ABSOLUTELY NECESSARY.\n               -- --- -- ---- ------ ---------- ---------\n               (and ONLY do it to a job or address space\n               that you need to forcibly terminate.)\n\n    Example 1:\n    ------- -\n\n    BURN JOB(JES2)            (as a TSO command)\n\n    THE FOLLOWING ASID ARE VALID FOR THE JOBNAME:\n    ASID=001C  JOBNAME=JES2\n    WHICH ADDRESS SPACE WOULD YOU LIKE TO BURN ?\n      ENTER ITS VALUE IN HEX:\n    1c\n    JOBNAME JES2     FOR ASID 001C BURNED\n\n\n    Example 2:\n    ------- -\n\n    BURN JOB(JES2*)           (as a TSO command)\n\n    THE FOLLOWING ASID ARE VALID FOR THE JOBNAME:\n    ASID=001C  JOBNAME=JES2\n    ASID=0024  JOBNAME=JES2AUX\n    ASID=0025  JOBNAME=JES2MON\n    WHICH ADDRESS SPACE WOULD YOU LIKE TO BURN ?\n      ENTER ITS VALUE IN HEX:\n    1c\n    JOBNAME JES2     FOR ASID 001C BURNED\n\n\n)O OPERANDS -\n))JOBNAME(jobname) - Jobname of address space to be burned.\n))JOBNAME(partj*)  - Partial jobname of address space to be\n                     burned.\n))ASID(nnnn)       - ASID of address space to be burned, in\n                     hex.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CATL": {"ttr": 4107, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x05\\x01\\x00\\x05\\x8f\\x01\\x00\\x05\\x8f\\x157\\x00$\\x00$\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf4\\xf5\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-27T00:00:00", "modifydate": "2000-02-27T15:37:05", "lines": 36, "newlines": 36, "modlines": 0, "user": "FILE452"}, "text": ")F FUNCTION -\n     This program lists information from the system catalog and\n     the volume's table of contents.\n)X SYNTAX -\n            CATL <LEVEL(LEVEL)>\n                 <DCB        Alias: DSORG RECFM LRECL BLKSIZE EXPDT>\n                 <SPACE      Alias: TRACKS>\n                 <VOLUMES    Alias: UNIT>\n                 <HORIZONTAL Alias: SIDEWAYS>\n                 <NOPREFIX>\n\n   REQUIRED - None\n\n   DEFAULTS - The \"LEVEL\" operand defaults to your TSO profile prefix.\n)O OPERANDS -\n))LEVEL - When this keyword is used, the catalog will be searched for\n          datasets which start with that index level.\n          Example: LEVEL(USERID.CUR) will find all the datasets which\n                   start with 'USERID.CUR.' (note the trailing period).\n                   To get generic prefix information, enclose the LEVEL\n                   operand within quotes (I.E. LEVEL('USERID.CU')).\n\n))DCB   - DCB information (DSORG RECFM LRECL BLKSIZE EXPDT) will be\n          displayed for each dataset.\n\n))SPACE - Allocated and used track information will be displayed for\n          each DASD dataset.\n\n))VOLUME - Volser and device type information will be displayed for\n          each dataset.\n\n))HORIZONTAL - The display will list dataset names across the terminal,\n          rather than vertically.\n\n))NOPREFIX - The specified LEVEL will be removed from the dataset name\n          prior to displaying it on the terminal.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CCAT": {"ttr": 4109, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00G\\x01\\x19\\x01O\\x01\\x19\\x02\\x7f\\x17A\\x00\\x81\\x00~\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf5\\xf3\\xf5@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2019-01-14T00:00:00", "modifydate": "2019-01-27T17:41:47", "lines": 129, "newlines": 126, "modlines": 0, "user": "FILE535"}, "text": ")F FUNCTION -\n\n  NAME:    CCAT    -  TSO COMMAND\n                      FOR DYNAMIC DATASET CONCATENATION\n                      AND ALLOCATION\n\n---------------------------------------------------------------\n\n\n  PURPOSE: Dynamic allocate/deallocate a dataset into a\n           new DDname, or concatenate/deconcatenate a\n           dataset into the top of existing concatenation.\n\n           CCAT doesn't applicable for dataset being\n           opened, uncataloged or cataloged in private\n           catalog.      Disposition assigned by CCAT\n           always SHAREd.\n\n  INPUT:   specified operands\n\n  OUTPUT:  Informational messages, or error messages and\n           a return code.\n\n)X SYNTAX -\n\n\n  (1)   Perform allocation/deallocation:\n                                         +-   -+ +-     -+\n        CCAT  F(ddname) DS(datasetname)  | ON  | | MSG   |\n                                         |     | |       |\n                                         | top | | nomsg |\n                                         |     | |       |\n                                         | bot | | emsg  |\n                                         |     | |       |\n                                         | off | | lmsg  |\n                                         +-   -+ +-     -+\n\n       Option 1.    ON    -   Allocate/concatenate the\n                              specified DSname/DDname.\n                    TOP   -   Force to allocate/concatenate\n                              even the specified DSN has\n                              already allocated but not on the\n                              top of concatenation.\n                    BOT   -   Force to concatenate a dataset\n                              to the bottom order of existing\n                              concatenation.\n                    OFF   -   Deallocate/deconcatenate the\n                              specified DSname/DDname.\n\n       Option 2.    MSG   -   Display simple message (default)\n                    NOMSG -   No messages will be displayed\n                              upon completion.\n                    EMSG  -   Display error messages only.\n                    LMSG  -   Display complete messages\n                              (completion message and the\n                              new concatenation list.\n\n  (2)   Display current specified DDname concatenation list:\n\n        CCAT  F(ddname)\n\n\n  ENTRYPOINTS: DERCCT   - Main Logic Processor\n               DERCCTDS - Dataset name Validity Check Routine\n               DERCCTDD - DDNAME Validity Check Routine\n               DERCCTLS - Concatenation list service routine\n               DERCCTPL - PUTLINE/Messages service routine\n\n  CONTROL BLOCKS: CPPL    -  Command Processor Parameter List\n                  JFCB    -  Job File Control Block\n                  PPL     -  Parse Parameter List\n                  PCL     -  Parameter Control List\n                  PCE     -  Parameter Control Entry\n                  PDL     -  Parameter Descriptor List\n                  PDE     -  Parameter Descriptor Entry\n                  SWA     -  Scheduler Work Area\n                  S99RB   -  Dynamic allocation control block\n                  TIOT    -  Task I/O Table\n\n\n  RETURN CODES:\n              0   - SUCCESSFULL\n              4   - Request wasn't performed, because,\n                    dataset already allocated (ON), or\n                    dataset has not allocated yet (OFF).\n              8   - Request was performed, but didn't\n                    effective, RC=4 returned by SVC 99.\n                    Current concatenation didn't changed.\n             12   - Request was failed, SVC 99 produce\n                    RC=8.   Current specified DDname\n                    concatenation was not changed.\n             16   - Request was failed, SVC 99 produce\n                    RC=12.   Current specified DDname\n                    concatenation was not garenteed.\n             20   - Request was failed, SVC 99 produce\n                    RC=16.   Current specified DDname\n                    concatenation was unpredictable.\n             24   - Syntax error.   Operand missing or\n                    invalid.   Request wasn't performed\n                    and the plane and command finished.\n\n\n  MESSAGES:\n\n    CCAT000 XXXXX.YYYY.ZZZZZ successfully allocated.\n    CCAT001 XXXXX.YYYY.ZZZZZ successfully concatenated.\n    CCAT002 XXXXX.YYYY.ZZZZZ successfully released.\n    CCAT003 DDname DDDDDDDD already in use.\n    CCAT004 XXXXX.YYYY.ZZZZZ unallocatable.\n    CCAT005 XXXXX.YYYY.ZZZZZ already allocated.\n    CCAT006 XXXXX.YYYY.ZZZZZ not cataloged.\n    CCAT007 XXXXX.YYYY.ZZZZZ reserved by other job.\n    CCAT008 DDname DDDDDDDD is illegal for SVC 99.\n    CCAT009 DDname DDDDDDDD not allocated yet.\n    CCAT010 XXXXX.YYYY.ZZZZZ not allocated yet\n    CCAT011 DDname DDDDDDDD not available.\n    CCAT012 DDname DDDDDDDD internally conflict.\n    CCAT013 XXXXX.YYYY.ZZZZZ is a private catalog.\n    CCAT014 Catalog error, XXXXX.YYYY.ZZZZZ not accessed\n    CCAT015 OBTAIN error, XXXXX.YYYY.ZZZZZ not accessed\n    CCAT800 DD(ddname) concatenation:\n            001 ---> DATA.SET\n            002 ---> MY.DATA.LIBRARY\n                     :\n            nnn ---> APPL.USER.DATA\n    CCAT900 Function failure, S99ERROR=nnnnn-P, contact your engineer.\n    CCAT990 No dataset/DDname found in TIOT or JFCB\n    CCAT999 SYNTAX ERROR, Operand missing or invalid\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CDSCB": {"ttr": 4353, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x982\\x8f\\x00\\x99\\x19O\\x00\\x19\\x00:\\x00;\\x00\\r\\xc6\\xc9\\xd3\\xc5\\xf1\\xf3\\xf4@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1998-11-24T00:00:00", "modifydate": "1999-07-13T00:19:00", "lines": 58, "newlines": 59, "modlines": 13, "user": "FILE134"}, "text": ")F FUNCTION -\n  THE CDSCB (CHANGE DSCB) COMMAND MODIFIES A DATA SET'S\n  FORMAT-1 DSCB IN A VTOC.\n\n  SINCE THE FORMAT-1 DSCB CONTAINS INFORMATION CRUCIAL TO\n  A DATA SETS' SECURITY AND INTEGRITY, (AND IN FACT TO THE\n  WHOLE SYSTEM'S SECURITY AND INTEGRITY), THIS COMMAND\n  MUST BE RESTRICTED TO SYSTEMS SUPPORT PERSONNEL.\n\n)X SYNTAX  -\n       CDSCB  'DSNAME'   EXPDT(DATE)  SHR  VOL(VOLUME) UNIT(UNIT)\n                         CREATE(DATE) REFDT(DATE)\n                         DSORG(XX) RECFM(XX) LRECL(XX) BLKSIZE(XX)\n                         ALLOC(TR/CYL/BL)  SPACE(SECONDARY-AMOUNT)\n                         PWR/PWW/NOP/RACF/NORACF\n                         ZAP(OFFSET VERDATA REPDATA)\n  REQUIRED - 'DSNAME'\n  DEFAULTS - NOTHING WILL HAPPEN IF NO CHANGES ARE SPECIFIED.\n  ALIAS    - NONE\n)O OPERANDS -\n  'DSNAME'  -  THE NAME OF THE DATA SET WHOSE FORMAT-1 DSCB\n             IS TO BE MODIFIED.\n))UNIT(UNIT) - FOR UNCATALOGED DATA SETS, THE UNIT TYPE OF THE\n             VOLUME WHERE THE DATA SET RESIDES.\n))VOL(VOLUME) - FOR UNCATALOGED DATA SETS, THE VOLUME SERIAL\n             OF THE DATA SET.\n))SHR      - THIS KEYWORD INDICATES THAT THE DSCB IS TO BE\n             MODIFIED EVEN IF ANOTHER JOB OR TSO SESSION\n             IS USING THE DATA SET.\n))EXPDT(DATE) - THE EXPIRATION DATE IS TO BE SET TO THE SPECIFIED\n             DATE.  THE VALID FORMATS FOR 'DATE' ARE:\n             '0', YYDDD, YY.DDD, YY/MM/DD, YYYY.DDD AND YYYY/DDD.\n))CREATE(DATE) - THE CREATION DATE IS TO BE SET TO THE SPECIFIED\n             DATE.  THE VALID FORMATS FOR 'DATE' ARE:\n             YYDDD, YY.DDD, YY/MM/DD, YYYY.DDD AND YYYY/DDD.\n             AN ASTERISK '*' MAY BE USED TO SPECIFY THE CURRENT DATE.\n))REFDT(DATE) - THE REFERENCE DATE IS TO BE SET TO THE SPECIFIED\n             DATE.  THE VALID FORMATS FOR 'DATE' ARE:\n             '0', YYDDD, YY.DDD, YY/MM/DD, YYYY.DDD AND YYYY/DDD.\n             AN ASTERISK '*' MAY BE USED TO SPECIFY THE CURRENT DATE.\n))DSORG(DSORG) - THE DSORG IS TO BE CHANGED TO THE SPECIFIED TYPE.\n))RECFM(RECFM) - THE RECFM IS TO BE CHANGED TO THE SPECIFIED TYPE.\n))LRECL(LRECL) - THE LRECL IS TO BE CHANGED TO THE SPECIFIED VALUE.\n))BLKSIZE(VALUE) - THE BLKSIZE IS TO BE CHANGED TO THE SPECIFIED VALUE.\n))PWR      - THE PROTECTION FLAGS ARE TO BE SET FOR PWREAD, MEANING\n             A PASSWORD IS REQUIRED TO READ OR WRITE.\n))PWW      - THE PROTECTION FLAGS ARE TO BE SET FOR PWWRITE, MEANING\n             A PASSWORD IS REQUIRED TO WRITE BUT NOT TO READ.\n))NOP      - THE PROTECTION FLAGS ARE TO BE SET OFF, MEANING\n             A PASSWORD IS NEVER REQUIRED.\n))RACF     - THE DATA SET IS TO BE MARKED RACF PROTECTED.\n))NORACF   - THE DATA SET IS TO BE MARKED NOT RACF PROTECTED.\n))ZAP(OFFSET VERDATA REPDATA) - THIS KEYWORD MAY BE USED TO MODIFY\n             FIELDS WITHIN THE DSCB BY SPECIFYING (IN HEX) THE\n             FIELD OFFSET, THE FIELD'S CURRENT VALUE (IN HEX), AND\n             THE REPLACEMENT VALUE (IN HEX).  IF THE CURRENT VALUE\n             DOES NOT VERIFY CORRECTLY, THE DATA IS NOT REPLACED.\n             THE REPDATA MAY BE OMITTED IF YOU JUST WANT TO VERIFY.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CINMX": {"ttr": 4355, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00S\\x01\\x054o\\x01\\x06\\x00/\\x14\\x00\\x00=\\x00\\r\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf7\\xf3\\xf1@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2005-12-12T00:00:00", "modifydate": "2006-01-02T14:00:53", "lines": 61, "newlines": 13, "modlines": 0, "user": "FILE731"}, "text": ")F FUNCTION -\n\n Change the in-storage values for the TSO TRANSMIT (XMIT) command.\n\n  The CINMX TSO command is an APF authorized TSO command to\n    change the value of the XMIT OUTLIM number or the XMIT\n    warning threshold number, or the XMIT warning interval\n    number.\n\n    If only a number is entered after CINMX, then changes\n    will be done to the OUTLIM value of the XMIT command.\n\n    Changes are done directly (in Key 0) to the INMXPARM control\n    block in common storage, and are valid until the next PARMLIB\n    UPDATE(xx), SET IKJTSO=xx, or IPL.  The values entered apply\n    to the entire LPAR, and all the users of that MVS instance\n    (so be careful).\n\n    The number entered is tested to see if it is numeric.  If\n    not, an error message is issued.  However......\n\n    An exception to this will happen if the first character of\n    the operand is a W or an I.  In that case, the number\n    afterward will be treated as the number to change the XMIT\n    Warning Threshold or Warning Interval (respectively).  A\n    space does not have to follow this W or I (but it can).  If\n    a number immediately follows the W or I, its entire value\n    will be recognized, and it will be validated as numeric in\n    its entirety.\n\n)X SYNTAX  -\n    CINMX   nnnnnnnn     (changes OUTLIM value to this number)\n      or\n    CINMX W nnnnnnnn     (changes Warn Threshold to this number)\n      or\n    CINMX I nnnnnnnn     (changes Warn Interval to this number)\n\n  REQUIRED - nnnnnnnn    (a numeric value, up to 10 digits)\n  DEFAULT  - NONE\n  ALIAS    -\n  NOTE     - The CINMX command is supported for previous releases\n             of TSO/E, and has been tested on MVS releases back to\n             MVS/ESA 5.2.2 and forward to z/OS 2.3.\n\n)O OPERANDS -\n))nnnnnnn    -  A numeric value alone, will cause the update of\n                the OUTLIM value of the XMIT (TRANSMIT) command,\n                to the value specified.  The old value will be\n                displayed for your reference (especially if you\n                want to set it back later).\n\n))W nnnnnnn  -  A letter W followed by a numeric value, will\n                cause the update of the Warn Threshold value\n                for the XMIT command.  The old value will be\n                displayed for your reference.\n\n))I nnnnnnn  -  A letter I followed by a numeric value, will\n                cause the update of the Warn Interval value\n                for the XMIT command.  The old value will be\n                displayed for your reference.\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CNCLPG": {"ttr": 4357, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\n\\x00F\\x01\\x19\\x14\\x1f\\x01\\x19\\x14\\x1f\\x00\\x00\\x01^\\x01^\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf8\\xf2\\xf6@@@'", "ispf": {"version": "01.10", "flags": 0, "createdate": "2019-05-21T00:00:00", "modifydate": "2019-05-21T00:00:46", "lines": 350, "newlines": 350, "modlines": 0, "user": "FILE826"}, "text": "CNCLPG   TITLE 'Alter characteristics of a running address space. '\n   -----------------------------------------------------------------\n\n     Function:   To make an address space Cancelable or\n                 Non-Cancelable, Forcible or Non-Forcible,\n                 Swappable or Non-Swappable.  Or BURN the\n                 address space (version 1.2.5).  KILL the\n                 address space is same as BURN, but first\n                 the non-MEMTERM bits in the ASCB are\n                 turned off (version 1.2.6).\n\n                 Other properties of an address space can be\n                 altered, as well.  See below.\n\n                 If the address space is non-MEMTERM-able,\n                 and you try to BURN it, an error message\n                 is issued, and nothing occurs.  But if you\n                 try and KILL it, the non-MEMTERM bits are\n                 turned off, and the address space is whacked.\n                 The message will tell you so.\n\n     Authority:  You need PSCB OPER authority to run this\n                 command.  To do BURN, KILL, NMEM, and MEMT\n                 functions, you ALSO need PSCB ACCOUNT authority.\n                 Any function controlled by the KILLFLAG, needs\n                 PSCB ACCOUNT authority.\n\n     Syntax:     TSO Command:  APF-authorized.\n\n      CNCLPG |jobid \u00ddASID(hhhh)\u00a8 |CNCL|NCNC (cancelable, non-canc)\n             |ASID(hhhh)         |FORC    (force w/o cancel)\n             |                   |NFRC    (force needs cancel)\n             |                   |NSWP|SWAP (non-swap, swappable)\n             |                   |TSWP (transwap)\n             |                   |FSWP (force swappable immediately)\n             |                   |CSCB or DISP (display CSCB blks)\n             |                   |BURN (memterm the address space)\n             |                   |KILL (memterm after turning\n             |                   |      off non-memtermable bits)\n             |                   |NMEM|MEMT  (turn on/off\n             |                   |        non-memtermable bits)\n             |                   |COUNT  (display DONTSWAP count)\n             |-  (displays the entire CSCB chain)\n             |?  (displays help)\n\n   -----------------------------------------------------------------\n\n     Notes:\n\n            CANCELABLE, NON-CANCELABLE, FORCIBLE, NON-FORCIBLE:\n\n     CSCB        Cancelable, Non-cancelable, Forcible, Non-forcible\n     chain       are determined by bit settings in the address\n                 space's CSCB, which is part of the CSCB chain.\n\n     Jobname     Each active address space has a CSCB in the chain.\n     and/or      You get to a particular address space by running\n     ASID        the entire CSCB chain (mapped by the IEECHAIN\n     match       macro) looking for a match on jobname and/or ASID,\n                 and preferably on both.\n\n     DISPlay     There may be more than one address space for a\n     or          given job name, and more than one CSCB entry\n     \"CSCB\"      for a given ASID.  The CSCB or DISPlay option\n     option      of CNCLPG will run the entire CSCB chain and\n                 it will show ALL the matches for the parameters\n                 given.  To display the ENTIRE CSCB chain from start\n                 to finish, use a dash ( - ) instead of the jobname.\n\n     Multiple    If only the jobname or the ASID number alone\n     jobs        are used to do an ACTION, then CNCLPG will stop\n     with the    at the FIRST CSCB which matches, when an ACTION is\n     same name   called for (but NOT for a DISPLAY).  That is why\n                 it is better to run the DISPlay (or CSCB) function\n                 of CNCLPG first, to display all the possible CSCB\n                 entries that might match, before changing any\n                 particular address space.  There might be more\n                 than one address space with the same jobname or\n                 ASID, and you want to change only the correct\n                 one, NOT the wrong one.  So it is good practice\n                 to display first, and then do a change to the\n                 exact address space you want to affect, using\n                 both the jobname and ASID(hhhh) parameters.\n\n            SWAPPABLE AND NON-SWAPPABLE:\n\n     SWAP and    Setting an address space to be swappable or\n     NSWP need   non-swappable, is accomplished by executing\n     to run a    a SYSEVENT macro.  This has to execute in the\n     SYSEVENT    target address space, and it was done here by\n     macro in    scheduling an SRB to run in the target address\n     the         space, when it is different from the address\n     target      space running the program.  That piece of code\n     address     was written by Joe Reichman.  Thanks, Joe.\n     space       You did the hard part!\n\n     TSWP or     When an address space is set by the SYSTEM to be\n     TRANSWAP    non-swappable, it is first swapped out, and then\n     as          a TRANSWAP is done, to put the pages for the\n     compared    address space into preferred storage, rather\n     to NSWP     than reconfigurable storage.  This is when the\n                 SYSTEM does it initially.  But when you do it\n                 later to the address space, using the NSWP option\n                 of CNCLPG, which is really a SYSEVENT DONTSWAP,\n                 the address space is made non-swappable with the\n                 pages remaining where they were.  This is not the\n                 best situation.  What you really might want is a\n                 TRANSWAP and not a DONTSWAP.\n\n                 If your address space was initially swappable,\n                 you can accomplish non-swappability the way the\n                 system does, by doing a TRANSWAP, using the TSWP\n                 function of CNCLPG.\n\n                 The TSWP option initially swaps the address space\n                 out, and then swaps it in, in an orderly manner,\n                 and then makes it non-swappable.  A NSWP command,\n                 on the other hand, fixes the pages where they\n                 were, in a haphazard manner, whether they were in\n                 preferred storage or in reconfigurable storage.\n                 Sometimes, you can't do a TRANSWAP, because it\n                 would move the pages of the running job in an\n                 unpredictable manner.  So then you do an NSWP.\n\n     FSWP or     Use this very cautiously, to make sure that you\n     Forced      will not disturb a running job that may need its\n     Swappable   existing pages intact, or a V=R job.\n     as\n     opposed     Every time the system gets a DONTSWAP or TRANSWAP\n     to SWAP     request against an address space, it keeps a\n                 count of how many of them there are.  This is\n                 because any address space can issue such a\n                 request against any other address space.  Of\n                 course the issuing address space has to be APF\n                 authorized.  Our target address space can only\n                 me made SWAPPABLE when the count of DONTSWAP\n                 requests against it, goes down to 1.\n\n                 FSWP forces the count to one, and then makes\n                 the address space swappable, no matter how many\n                 outstanding DONTSWAP requests, the address space\n                 has against it.  FSWP is an emergency measure,\n                 and it has been put there, only to deal with\n                 extraordinary circumstances.  You should hardly\n                 ever use it, OR NEVER USE IT!  But it is there.\n\n\n        NON-MEMTERMABLE AND MEMTERMABLE: (THE REAL \"NON-FORCIBLE\")\n\n     NMEM makes  In the ASCB of an address space there are two\n     a job both  bits, ASCBNOMT and less importantly, ASCBNOMD.\n     NON-FORCI-  ASCBNOMT controls the attribute, when it is on,\n     BLE and     that the address space is NON-MEMTERMABLE or\n     NON-CANCEL- NON-FORCIBLE.  If NON-CANCELABLE is also true,\n     ABLE.       as well as the non-memtermable bit ASCBNOMT,\n                 then when you try and cancel the job, it will say,\n     MEMT makes  NON-CANCELABLE, and when you try and FORCE the\n     the job     job, it will say NON-FORCIBLE.  The two bits\n     FORCIBLE,   ASCBNOMT in the ASCB which has to be on, and\n     but leaves  the cancelable bit in the job's CSCB entry,\n     it to be    CNCL in flag CHACT, which has to be off,\n     NON-CANCEL- control this situation.\n     ABLE.\n                 A job should not be left NON-FORCIBLE and\n                 CANCELABLE.  That defeats the purpose of\n                 NON-FORCIBLE, in that the job can easily\n                 then be cancelled, because CANCEL will work.\n\n                 The action NMEM (non-memtermable) sets both\n                 then non-forcible bit in the ASCB on, and the\n                 cancelable bit in the job's CSCB entry, off.\n                 The action MEMT (make memtermable) turns only\n                 the ASCBNOMT bit (non-memtermable) off, but\n                 leaves the non-cancelable situation in place.\n                 If you want to turn off non-cancelable later,\n                 then the CNCL action will do this.\n\n     -------------------------------------------------------------\n     BURN        BURN -  Kill the designated address space with a\n     (v 1.2.5)   CALLRTM TYPE=MEMTERM (like a FORCE).  Be careful !\n     -------------------------------------------------------------\n     KILL        KILL -  Kill the designated address space with a\n     (v 1.2.6)   CALLRTM TYPE=MEMTERM (like a FORCE).  Be careful !\n                 KILL is a \"super BURN\".  Be VERY careful.....!\n                 Before doing the MEMTERM, KILL turns off bits\n                 in the ASCB (ASCBNOMT and ASCBNOMD), the\n                 \"non-FORCIBLE\" bits.  Can whack any address space.\n     (v 1.2.7)   You need PSCB ACCOUNT authority to run BURN or KILL,\n                 along with OPER authority to run the rest of the\n                 program.\n     -------------------------------------------------------------\n     NMEM and    NMEM will make the address space NON-FORCIBLE\n     MEMT        and NON-CANCELABLE.  MEMT will make the address\n     (v 1.2.8)   space FORCIBLE, but it will leave the cancelable\n                 bit in place, however it was before.\n                 (Since the FORCE operator command actually equates\n                 to a CALLRTM TYPE=MEMTERM macro call, making an\n                 address space NON-FORCIBLE is also called making\n                 it NON-MEMTERMABLE.\n     -------------------------------------------------------------\n     TSWP        Instead of initially making an address nonswappable\n     (v 1.2.9)   using a DONTSWAP function in the SYSEVENT macro,\n                 there is now an alternative of doing a TRANSWAP\n                 function, which operates on a swappable address\n                 space, swaps it out, and then swaps it in, trying\n                 to use protected storage frames.  This only works\n                 if the address space was swappable to begin with.\n                 Otherwise, the TSWP seems to work like an NSWP.\n                 IBM recommends TSWP instead of NSWP if the address\n                 space is to remain non-swappable for a long time.\n\n                 NUMBER OF DONTSWAP REQUESTS - OUCBNDS field of the\n                         OUCB control block (macro IRAOUCB)\n                 Each NSWP or TSWP request increments this number\n                 by one.  An address space cannot be made swappable\n                 until this number is reduced to one, and a\n                 SYSEVENT OKSWAP is issued.  If the number is more\n                 than one, then each successive SYSEVENT OKSWAP\n                 against the address space, decrements this number\n                 by one.  NSWP, TSWP, and SWAP requests now display\n                 this number.\n     -------------------------------------------------------------\n     FSWP        If several users issued DONTSWAP requests against\n     (v 1.2.10)  the same address space, then the OUCBNDS field,\n                 which is a halfword number, contains a quantity\n                 that is more than X'0001'.  To make that address\n                 space swappable, you would have to issue that\n                 number of SYSEVENT OKSWAP requests.  Each OKSWAP\n                 request reduces the number by one.  FSWP (Forced\n                 SWAP) first sets this number to X'0001' and then\n                 issues a SYSEVENT OKSWAP.  So you can be sure to\n                 make that address swappable right away, with ONE\n                 action, and not many.\n     -------------------------------------------------------------\n     (v 1.2.10A)  This version is a cleanup of all the previous\n                 versions.  The messages have (hopefully) been\n                 made consistent and accurate.  The HELP has been\n                 made clearer, hopefully.  TSWP has been cleaned\n                 up to work as safely as possible.\n     -------------------------------------------------------------\n     (v 1.2.10B)  This version has the COUNT function which does no\n                 action besides displaying the DONTSWAP count for\n                 that address space.\n     -------------------------------------------------------------\n     (v 1.2.10C)  Cleaned up various bugs with COUNT, and also made\n                 the displays more consistent.  Changed TITLE of\n                 the program, because it does many kinds of major\n                 alterations to a running address space.\n     -------------------------------------------------------------\n     (v 1.2.10D)  Cleaned up \"IKJ56500I COMMAND CNCLPG NOT FOUND\"\n                 message to accommodate different length command\n                 name.  Use ECTPCMD field to extract command name.\n     -------------------------------------------------------------\n     (v 1.2.10E)  Fixed messaging problem when a swappable addrspc\n                 was being made swappable again.  Same problem with\n                 non-swappable addrspc being made non-swappable.\n                 Message has to reflect that condition was not\n                 changed, except for possibly the DONTSWAP count.\n     -------------------------------------------------------------\n\n     Date:       April 15, 2010\n\n     Latest Modification:   June 21, 2017\n\n     Authors:    Sam Golob, Joe Reichman (who did the hard part)\n\n     Technical Detail:  PUTLINE interface for TSO Output.\n                        Uses the APUT macro, and EPUTL module.\n\n     Changes:  1.  SWAP, NSWP support dropped from this program\n                    initially.  Version is 1.0.0.\n\n               2.  Messages and DISP improved, to just show matching\n                    CSCB chain entries, instead of all of them.\n                    Coding a dash instead of a jobname or asid(hhhh)\n                    - will display the entire CSCB chain.\n\n               3.  SWAP, NSWP support put back in this program.\n                    Version is 1.1.0   (June 16, 2010)\n                    It now does your own address space.  The cross\n                    memory stuff was not put in yet, to make other\n                    address spaces swappable, or non-swappable.\n\n               4.  Complete SWAP, NSWP support for cross address\n                    space communication, was put in by Joe\n                    Reichman.  (Oct 2011)  Version is 1.2.0.\n\n               5.  Burn an address space, if that is desired.\n                    (Oct 2012)  Version is 1.2.5.\n\n               6.  Kill an address space.  Before you do the\n                   CALLRTM MEMTERM, the non-forcible flags in the\n                   ASCB are turned off.\n                    (May 2017)  Version is 1.2.6.\n\n               7.  Authority checking. So far, you need PSCB OPER\n                    to do anything. ACCT to do BURN or KILL.\n                    Version is 1.2.7.\n\n               8.  Make address space Non-Memtermable (can't be\n                    FORCEd), or Memtermable (can be FORCEd).\n                    Non-Memtermable implies Non-Cancelable, because\n                    it isn't effective if the address space is\n                    Cancelable but non-Memtermable).  You can easily\n                    get rid of it, and it defeats the purpose of\n                    non-Memtermable.  If you later make it\n                    Memtermable, you can make it Cancelable next.\n\n               9.  Add TSWP function to do a TRANSWAP instead of\n                    a DONTSWAP.  It really is only good if you do\n                    it the first time, on an initially swappable\n                    address space.  If you TRANSWAP an address\n                    space that is already nonswappable, then you\n                    will merely increase the number of DONTSWAP\n                    requests by one, and the SYSEVENT return code\n                    will be 4.\n\n              10.  Added display of the OUCBNDS field (halfword),\n                    which is the number of outstanding DONTSWAP\n                    requests.  The address space cannot become\n                    swappable until this number is reduced to 1,\n                    and an OKSWAP is done.\n\n              11.  SRB was modified to run in 31-bit mode (from Joe).\n\n              12.  Added Forced SWAP option to make the address\n                    space swappable even though there are a number\n                    of DONTSWAP requests still against it.  One\n                    application of this is if you want to TRANSWAP\n                    the address space.  First you FSWP it to ensure\n                    that it is swappable, and then you TSWP it to\n                    do the TRANSWAP.  THIS SHOULD ONLY BE DONE,\n                    IF YOU KNOW WHAT YOU ARE DOING.\n\n              13.  Cleaned up the messages and the help, to make\n                    them (hopefully) consistent, and to hopefully\n                    supply the information needed to know what is\n                    going on with the address space being\n                    manipulated.\n\n              14.  Added option to display the DONTSWAP COUNT\n                    associated with an address space.\n\n\n    Change   Pgmr                   Description\n    -------  -----   ----------------------------------------------\n\n             JOER     Add SRB code to allow swapping in xmem.\n                      (See lines commented with JOE.)\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "COPYFILE": {"ttr": 4363, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x11\\x00A\\x00\\x82\\x14/\\x01\\x052O\\x109\\x01!\\x00\\xb6\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf2\\xf2\\xf9@@@'", "ispf": {"version": "01.17", "flags": 0, "createdate": "1982-05-22T00:00:00", "modifydate": "2005-11-20T10:39:41", "lines": 289, "newlines": 182, "modlines": 0, "user": "FILE229"}, "text": "  * NOTE:  Control cards for the COPYSLNL and COPYNLNL programs\n           are identical to those for the COPYFILE program.  The\n           help for these control cards is included here.  Control\n           card handling is now done by the called program SELCARDS,\n           whose source code is included in the source code for all\n           three programs.  Assembly of the source code must be\n           done with PARM=BATCH in effect, for the assembler step,\n           and must include the source for the MSGWRITE program.\n\n    >>>    COPYFILE has now been modified so that the restriction\n    >>>    that input file numbers be in ASCENDING order does not\n    >>>    apply anymore.  You can code 7/3  2  50  3  51 -100 now\n    >>>    for a COPYFILE run.\n\n           COPYSLNL copies files from an INPUT SL tape to an\n           OUTPUT NL tape, stripping the labels off, and copying\n           the data files only.  Using COPYSLNL, you can control\n           which input files you copy, to which output files.\n\n           COPYNLNL copies files from an INPUT NL tape to an\n           OUTPUT NL tape, with the ability to select which files\n           are to be copied.  COPYNLNL stops when it sees two\n           consecutive tape marks on the input tape.\n\n           COPYFILE (on CBT Tape File 229) does the same thing for\n           SL to SL tapes.  COPYNLNL stops after two consecutive\n           tape marks on the input tape.  COPYFILE and COPYSLNL,\n           being written for SL input tapes, are considerably\n           \"smarter\".\n\n  * --------------------------------------------------------------- *\n\n             C  O  P  Y  F  I  L  E\n\n          RELEASE     03 NOV  2005\n\n\n   FUNCTION:  This is COPYFILE, a program used to copy selected\n              files from a SL to another SL tape.  All control is\n              via SYSIN cards.  PARM=IDRCOFF will turn off IDRC\n              indicators (letter \"P\") in the xxx2 output tape\n              labels.  The presence of a TAPELOUT DD name causes\n              a printout of tape label information.  The presence\n              of a LABLDUMP DD card causes a dump of the actual\n              output tape labels in \"COPYMODS LABLDUMP\" format,\n              to an FB-80 output file.\n\n   TAPELOUT DD:  If the DD name of //TAPELOUT is present in the\n              JCL, a printout of the output tape labels will be\n              provided.  For the COPYSLNL program, this applies\n              to the input tape, because in that case, the output\n              tape is NL.  (And of course, this does not apply to\n              the COPYNLNL program, which assumes NL tapes for\n              both input and output tapes.)\n\n   EXEC PARM:    If a PARM of 'IDRCOFF' is provided in the EXEC\n              card, then the upper case letters 'P' in the TRTCH\n              field, if present in the xxx2 labels, which\n              indicates that the tape file is IDRC compressed, are\n              removed.  This enables the output tape to be read on\n              a 3480 tape drive or a simulated 3480 tape drive.\n              (Of course, the actual tape data really has to be\n              uncompressed.)  This is useful when the \"tapes\" are\n              in AWS format, and are to be read on a simulated tape\n              drive, or if you are converting the tapes to\n              uncompressed 3480 format on a real 3480 output drive,\n              and the labels have to be duly converted.\n              (This parm only applies to COPYFILE and not to\n              COPYSLNL or COPYNLNL, because with them, there are\n              no output tape labels.)\n\n   PROCEDURE:\n\n        //COPYFILE PROC FROM=,TO=,DSP=KEEP\n        //COPYSTEP EXEC PGM=COPYFILE,REGION=2000K,PARM=' -OPTIONAL- '\n        //MSG      DD SYSOUT=A\n        //TAPELOUT DD SYSOUT=A             (OPTIONAL TO PRINT LABELS)\n        //SELREPT  DD SYSOUT=A             (OPTIONAL)\n        //IN       DD DSN=INPUT.FILE,UNIT=TAPE,DISP=OLD,\n        //            VOL=SER=&FROM\n        //TAPELIN  DD DSN=OUTPUT.FILE,UNIT=TAPE,VOL=SER=&TO,\n        //            DISP=(NEW,&DSP)\n        //         PEND\n\n\n        //SYSIN    DD *\n         - CONTROL CARDS -\n         /*\n\n\n   DATASETS:  (ALL PROVIDED BY THE PROCEDURE)\n\n              //IN      DD     - THE INPUT TAPE -\n\n              //TAPELIN DD     - THE OUTPUT TAPE, EITHER A SCRATCH\n                                 TAPE OR ONE ALREADY CONTAINING SOME\n                                 FILES TO BE PRESERVED.\n\n              //MSG      DD SYSOUT=A\n\n              //SELREPT  DD SYSOUT=A   -FILE SELECTION PROCESS REPORT\n                                        (THIS IS AN OPTIONAL DDNAME)\n\n              //TAPELOUT DD SYSOUT=A   -TAPEL LISTING FOR THE OUTPUT\n                                        TAPE-\n\n\n\n   CONTROL CARDS:\n\n              THE COPYFILE PROGRAM IS CONTROLLED BY SYSIN CARDS.\n              ONE OR MORE CARDS MAY BE USED.  72 CARD COLUMNS ARE\n              SCANNED.  THE CARDS CONTAIN THE NUMBERS OF THE FILES\n              OF THE INPUT TAPE WHICH ARE TO BE COPIED TO THE\n              OUTPUT TAPE.  THESE NUMBERS ARE NO LONGER REQUIRED\n              TO BE IN ASCENDING ORDER.  IF THE FILES ARE TO BE\n              COPIED TO AN EXISTING SET OF FILES ON THE OUTPUT\n              TAPE, THE NUMBER OF THE FIRST NEW OUTPUT FILE IS\n              ATTACHED TO THE NUMBER OF THE FIRST INPUT FILE WITH\n              / . SEE THE EXAMPLES.\n\n       >>>    It is now possible to write over the same output\n       >>>    file twice.  If this happens, such as with cards:\n       >>>       7/1  2  -30 31/27\n       >>>    the process will work, but you will get a warning\n       >>>    message in SYSPRINT, and the program gives a\n       >>>    return code of 4, instead of a code of 0.\n\n        New control card features:  (with the SELCARDS program)\n\n              To copy a range of files, not to the end of the input\n              tape, code the first file number in the range, followed\n              by the last number in the range, preceded by a dash.\n\n              For example, to copy files 51 to 100 from an input tape,\n              code:   51 -100   with space(s) in between the two\n              control numbers, as shown.  This will copy files 51,\n              52, ...  and so forth, from the input tape, to\n              consecutive files on the output tape, stopping after\n              file 100 on the input tape.  Later files may be copied\n              afterwards, for example:   51  -100 103   will copy\n              files 51 thru 100 on the input tape, skip files 101\n              and 102, and copy file 103.\n\n   EXAMPLES:\n\n              1. COPY FILES 3, 5, 6, 9 FROM TAPE 101003 TO A NEW\n                 SCRATCH TAPE.\n\n                 // EXEC COPYFILE,FROM=101003\n                 //SYSIN    DD *\n                  3 5 6 9\n                 /*\n\n              2. ADD THE SAME FILES TO TAPE 007177, WHICH ALREADY\n                 HAS SEVEN FILES WHICH ARE TO BE PRESERVED.\n\n                 //   EXEC COPYFILE,FROM=101003,TO=007177\n                 //SYSIN  DD *\n                   3/8  5  6  9\n                 /*\n\n              3. MERGE SELECTED FILES FROM THREE TAPES, AND PRODUCE\n                 A TAPEL LISTING OF THE RESULT.\n\n                 //  EXEC COPYFILE,FROM=123770,TO=100022,DSP=PASS\n                 //SYSIN   DD *\n                  1  2  52  53\n                 /*\n                 //  EXEC COPYFILE,FROM=101832,TO=100022,DSP=PASS\n                 //SYSIN   DD *\n                   7/5  7  12  13\n                 /*\n                 //  EXEC COPYFILE,FROM=111333,TO=100022\n                 //TAPELOUT DD SYSOUT=A\n                 //SYSIN    DD *\n                   12/9\n                 /*\n\n\n     NOTES:      1. FILES MUST BE COPIED FROM THE INPUT TAPE IN THE\n                    SAME ORDER IN WHICH THEY APPEAR, I.E. EACH INPUT\n                    FILE NUMBER IS LARGER THAN THE ONE SPECIFIED IN\n                    THE PRECEDING CONTROL CARD.\n\n                 2. NORMALLY THE FIRST OUTPUT FILE NUMBER SPECIFIED\n                    WOULD BE ONE GREATER THAN THE LAST EXISTING FILE\n                    ON THE OUTPUT TAPE. IF IT IS LESS, AN EXISTING\n                    FILE WILL BE OVERWRITTEN. IF IT IS MORE, THE\n                    TAPE WILL RUN OFF ITS REEL BY THE PROGRAM\n                    SEARCHING FOR THE RIGHT STARTING POINT.\n\n                 3. THE REGION REQUIRED IS 33K PLUS FIVE TIMES\n                    ( MVT IS TWO TIMES ) THE LARGEST BLKSIZE OF\n                    THE FILES COPIED. THE COPY TIME IS SUBSTANTIALLY\n                    LESS THAN 1 MINUTE.\n\n                 4. THE INPUT AND OUTPUT TAPES MUST HAVE STANDARD\n                    LABELS.\n\n                 5. DATASETS WITH ANY DCB PARAMETERS WILL BE COPIED\n                    SUCCESSFULLY, EVEN IF THEY VARY FROM FILE TO FILE.\n                    DCB PARAMETERS SHOULD NOT BE SPECIFIED AS AN\n                    OVERRIDE TO THE PROCEDURE.\n\n\n                 6. THE OUTPUT FILES SHOULD NOT BE CATALOGED VIA JCL.\n                    EVEN THOUGH THE JOB CALLS FOR SL SCRATCH, IT APPEARS\n                    THAT THE HEADER IS DESTROYED WHEN THE KEEP MSG\n                    HAS L00100 ( EXAMPLE ) AS IF IT WAS A NL TAPE.\n                    NEVER FEAR, THE OUTPUT LABEL IS INTACT.\n\n               ADDENDUM TO THE COPYFILE PROGRAM\n               --------------------------------\n\n\n    THE WORD 'ALL' MAY NOW BE USED ON CONTROL CARDS. IT CAUSES THE REST\n  THE FILES ON THE INPUT TAPE TO BE COPIED TO THE OUTPUT TAPE.\n\n    A DASH, FOLLOWED IMMEDIATELY BY A FILE NUMBER, HAS THE SAME EFFECT\n  AS 'ALL', EXCEPT THAT THE MULTI-FILE COPY WILL STOP AT THE INPUT FILE\n  NUMBER AFTER THE DASH.  FOR EXAMPLE, -35 WILL COPY THE FIRST 35 FILES\n  OF A TAPE, AND WILL THEN STOP.  Other control statements may now be\n  coded after a control statement with a dash.  To see the detailed\n  action of the coded control statements, use the optional DD name of\n  //SELREPT  DD  SYSOUT=*  .\n\n\n   EXAMPLES:\n\n   1. COPY ALL FILES FROM TAPE 100035 TO A NEW SCRATCH TAPE.\n\n      //  EXEC COPYFILE,FROM=100035\n      //SYSIN  DD *\n        ALL\n      /*\n\n   2. COPY FILES 3, 5, AND 7 THROUGH THE END OF THE TAPE TO A NEW\n      SCRATCH TAPE.\n\n     //  EXEC COPYFILE,FROM=100035\n      //SYSIN   DD *\n       3  5  7  ALL\n      /*\n\n   2A. COPY FILES 3, 5, AND 7 THROUGH FILE 45 TO A NEW SCRATCH TAPE.\n\n     //  EXEC COPYFILE,FROM=100035\n      //SYSIN   DD *\n       3  5  7  -45\n      /*\n\n   2B. COPY FILES 3, 5, AND 7 THROUGH FILE 45  and 50 THROUGH 100\n       TO A NEW SCRATCH TAPE.\n\n     //  EXEC COPYFILE,FROM=100035\n      //SYSIN   DD *\n       3  5  7  -45   50 -100\n      /*\n\n   3. ADD THE FILES FROM TAPE 100035 TO TAPE 100070 AFTER EXIST-\n      ING FILE 8.\n\n      //  EXEC COPYFILE,FROM=100035,TO=100070\n      //SYSIN  DD *\n       1/9  ALL\n      /*\n\n   3A. ADD THE FILES FROM TAPE 100035 TO TAPE 100070 AFTER EXIST-\n      ING FILE 8, BUT ONLY THE FIRST 10 FILES.\n\n      //  EXEC COPYFILE,FROM=100035,TO=100070\n      //SYSIN  DD *\n       1/9  -10\n      /*\n\n   4. ADD FILES 3 AND 5 THROUGH 12 ( THAT IS ALL THERE ARE ) FROM\n      TAPE 100035 TO TAPE 100050 WHICH ALREADY CONTAINS THREE\n      FILES WHICH ARE TO BE KEPT.\n\n      //  EXEC COPYFILE,FROM=100035,TO=100050\n      //SYSIN    DD *\n       3/4  5  ALL\n      /*\n\n NOTE:  WITH THE LATEST EDITION OF COPYFILE WHICH USES THE SELCARDS\n        PROGRAM TO CHOOSE THE FILES TO BE COPIED, MORE THAN ONE DASH\n        CAN BE CODED, TO COPY MORE THAN ONE RANGE OF FILE NUMBERS.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "COPYMODS": {"ttr": 4613, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x00W\\x00\\x01\\x01\\x12\\x15\\x9f\\x01\\x12\\x16/\\x17\\x06\\x01\\xe7\\x004\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf2\\xf2\\xf9@@@'", "ispf": {"version": "00.87", "flags": 0, "createdate": "2012-06-07T00:00:00", "modifydate": "2012-06-10T17:06:01", "lines": 487, "newlines": 52, "modlines": 0, "user": "FILE229"}, "text": "             COPYMODS OPTION DIRECTORY - HELP FILE\n             -------- ------ ---------   ---- ----\n\n                          LEVEL 086\n                          ----- ---\nOPTION RULES:\n------ -----\n\nOptions NOT containing a value can be set either in PARM or in SYSIN.\nOptions containing a value are set in SYSIN with keyword in column 1.\nExamples of options containing a value:\n\n     OUTVOLALL=volser      (up to 6 characters)\n     TAPEOWNER=owner name  (up to 10 characters)\n     FILELIMIT=nnn         (numeric)\n     LABELIMIT=nnn         (numeric)\n     PRINTRCDS=nnn         (numeric)\n     WRITELTMS=nnn         (numeric)\n\nIf two words set the same option, SYSIN overrides PARM, and the later\n  setting overrides all earlier settings.\nDefault options are set automatically, but can be overridden explicitly.\n  Default options are set first, and can therefore be overridden using\n  either PARM settings or SYSIN settings.\nSYSIN overrides PARM.  Later overrides earlier.\nIf the SYSIN DD name is not coded in the JCL, then no attempt will be\n  made to OPEN it.  If it is coded, it will be OPENed and scanned.\n\nThere are 10 parm flag bits in the COPYMODS program.  As of the current\n  release, the first 7 of these are used.  This help file tells you\n  which bits are set by each option.\n\nAll tape files declared to the COPYMODS program must have LABEL=BLP\n  coded in their DD names.  COPYMODS treats all tape labels only as\n  data, and does its own diagnosis, as to what is a label and what is\n  not.\n\n\nHOW TO USE THIS HELP FILE:\n--- -- --- ---- ---- ----\nWhen you run COPYMODS, look at the OPTIONS report at the top.  If you\ndon't understand the meaning of an option setting, do an FIND on that\nsetting in this file, and then (we hope), you'll see the meanings\nof that option.\n\n\nOPTION LIST :\n------ ----\n\nOption       Parm       Bit(s)  Meaning of\nName          Flag No   Set       This Option\n------       --------   ------  -------------\n\nLTMSKIP   -  PARMFLG1 - X'20' - When copying a tape, don't copy any\n                                leading tape marks, but skip over them.\n\n             aliases  - SKIPLIM\n             opposite - COPYLTM, LTMCOPY   (copy leading tape marks)\n             reason   - DOS/VSE tapes and foreign tapes, can come into\n                         an MVS system, and it is hard to read them,\n                         because they start with leading tape marks.\n                         COPYMODS automatically will tell you how many\n                         leading tape marks there are, and will skip to\n                         the data that comes afterwards.  You have the\n                         option of including these leading tape marks\n                         in the copied tapes, or eliminating them from\n                         the copied tapes.\n\nLABELS    -  PARMFLG1 - X'DE' - Print info for all labels.\n                                (This option uses multiple flags,\n                                 because there is a separate flag\n                                 to print each type of label.)\n\n             aliases  - LBLINFO, PRINTL\n             opposite - NOLABEL, NOLABL\n\nHDR1      -  PARMFLG1 - X'02' - Display HDR1 Labels\nHDR2      -  PARMFLG1 - X'04' - Display HDR2 Labels\nEOF1      -  PARMFLG1 - X'08' - Display EOF1 Labels\nEOF2      -  PARMFLG1 - X'10' - Display EOF2 Labels\nEOV1      -  PARMFLG1 - X'40' - Display EOV1 Labels\nEOV2      -  PARMFLG1 - X'80' - Display EOV2 Labels\n\n             opposite - NOHDR1, NOHDR2, HOEOF1, NOEOF2, NOEOV1, NOEOF2\n\nHDRS      -  PARMFLG1 - X'06' - Display header labels\nEOFS      -  PARMFLG1 - X'18' - Display EOF labels\nEOVS      -  PARMFLG1 - X'C0' - Display EOV labels\n\n             opposite - NOHDRS, NOEOFS, NOEOVS\n\nCHGVOL    -  PARMFLG2 - X'01' - Use JCL-specified volume serial for\n                                 each copied output volume\n             aliases  - JCLVOL, NEWVOL\n             opposite - NOCHGVOL, NOJCLVOL, NONEWVOL\n\nOUTVOLALL=volser  -  SYSIN keyword to specify output volume serial\n                     for ALL output tapes equally.\n\n             PARMFLG2 - X'40' - (set automatically by OUTVOLALL keyword)\n\nVOLLBL    -  PARMFLG2 - X'02' - Print detail of VOL1 label if found.\n                                (set as default)\n             opposite - NOVOLLBL\n\nEOVCHG    -  PARMFLG2 - X'04' - If an EOVx label is found, change it,\n                                 in the copied tape, to an EOFx label.\n             aliases  - EOV2EOF, EOVTOEOF\n             opposite - NOEOVCHG\n             reason   - Sometimes a tape is created by splicing 2\n                         tapes together, and the first one has an EOV1\n                         and EOV2 label set at the end.  MVS will not\n                         be able to read past them in the copied tape,\n                         unless these are changed to EOF1 and EOF2.\n\nREAD      -  PARMFLG2 - X'08' - Read only. Don't copy the input tape.\n             aliases  - READONLY, NOWRITE\n             opposite - WRITE\n             note     - READ together with SHOOVL (Show Output Volumes)\n                         will read the input tape, and show the first\n                         80 bytes of each output tape.\n\nLABLDUMP  -  PARMFLG2 - X'10' - Dump all standard labels from the\n                                 input tape to an FB-80 output file\n                                 which is defined by a DD of LABLDUMP.\n             opposite - NOLABLDU\n             note     - LABLDUMP can be done at the same time as a\n                         normal tape copy or a STRIP (which strips the\n                         tape labels off the output tapes).  It also\n                         works together with READ, when no tape copy\n                         is done.\n\nSYSIN     -  PARMFLG2 - X'20' - Read input parameters from a SYSIN DD\n                                 card, after the PARM field is read.\n                                 This is set on automatically if a\n                                 SYSIN DD card is present in the JCL.\n\nOUTVOL    -  PARMFLG2 - X'40' - This switch is set on automatically\n                                 if OUTVOLALL=vvvvvv is coded in\n                                 column 1 of the SYSIN DD.  This switch\n                                 is also turned on if TAPEOWNER=xxxxxx\n                                 is coded in SYSIN.\n             opposite - NOOUTVOL\n             notes    - TAPEOWNER in IBM (EBCDIC) tapes is 10 bytes\n                         long, and embedded blanks can be included.\n                        With ASCII tapes, the tape owner field is\n                         14 bytes long.\n\nLABADDIN  -  PARMFLG2 - X'80' - Add a previously prepared set of tape\n                                 labels to NL output tapes.  Usually\n                                 the labels have been stripped from\n                                 a SL version of this tape and edited.\n                                 Then they are spliced back into the\n                                 NL version of the tape.  The label\n                                 set is allocated using the LABADDIN\n                                 DD name, and must be FB-80 in format.\n             opposite - NOLABADD\n\nBLKCNT    -  PARMFLG1 - X'01' - Correct the block count quantities in\n                                 the EOF1 and EOV1 labels when copying\n                                 to output tapes.  COPYMODS has just\n                                 read how many blocks are in the input\n                                 tape file and therefore, COPYMODS can\n                                 adjust this number in the EOF1 and\n                                 EOV1 labels.\n             opposite - NOBLKCNT\n             note     - See CORRBLKS which does this if adding external\n                         labels.\n\nCORRBLKS  -  PARMFLG3 - X'20' - If a set of labels has just been\n                                 supplied via the LABADDIN option, it\n                                 is very possible that the previous\n                                 block counts on these EOF1 and EOV1\n                                 labels might not match each actual\n                                 file's block count.  Therefore\n                                 COPYMODS will (under control of this\n                                 option) adjust the block counts in the\n                                 EOF1 and EOV1 labels to be accurate.\n             opposite - NOCORRBL\n             note     - See BLKCNT which does this when copying SL\n                         tapes.\n\nPRADDLBL  -  PARMFLG3 - X'10' - Print the external labels to be added,\n                                 in the SYSPRINT report.\n             opposite - NOPRADDL\n\nNOEXNULL  -  PARMFLG3 - X'40' - When doing LABADDIN processing (adding\n                                 labels to an NL tape), if there are\n                                 more sets of labels than NL tape files,\n                                 stop copying after the last NL file is\n                                 found.\n             alias    - NOSLNULL\n             opposite - EXNULL, SLNULL\n             note     - The opposite of this action, is to use up all\n                         the extra label sets, by creating null SL files\n                         at the end of the copied tapes.\n\nLBLFIX    -  PARMFLG3 - X'80' - When doing LABADDIN processing (adding\n                                 labels to an NL tape), maybe the last\n                                 set of labels to be added is missing\n                                 EOF1 and EOF2 labels.  Since the HDR1\n                                 and HDR2 labels are almost identical\n                                 to the EOF1 and EOF2 labels, we can\n                                 reconstruct the missing EOF1 and EOF2\n                                 labels, under control of this option.\n             opposite - NOLBLFIX\n\nINITVOLS  -  PARMFLG3 - X'01' - Initialize an IBM (EBCDIC) tape.\n             alias    - INITTAPE\n             opposite - NOINITVO\n             notes    - This option will set the CHGVOL option on also,\n                         and the initted tapes will have a volser equal\n                         to the JCL volser.  Even if NOCHGVOL is set to\n                         override, the volser of the created tapes\n                         will still be equal to the JCL volser.\n\nINASC3    -  PARMFLG5 - X'01' - Initialize an ASCII Type 3 tape.\n                                PARMFLG5,X'80' (ASCII) option is set,\n                                PARMFLG2,X'01' (CHGVOL) is also set,\n                                together with this option.\n             alias    - INASCII\n             opposite - NOINASC3\n\nINASC4    -  PARMFLG5 - X'02' - Initialize an ASCII Type 4 tape.\n                                PARMFLG5,X'80' (ASCII) option is set,\n                                PARMFLG2,X'01' (CHGVOL) is also set,\n                                together with this option.\n             opposite - NOINASC4\n\nASCII     -  PARMFLG5 - X'80' - Print all displays by translating the\n                                ASCII labels and quantities to EBCDIC\n                                so we can see them in SYSPRINT.  Also,\n                                interpret the HEXPRT displays as ASCII\n                                and not as EBCDIC.\n\nLIMFILE   -  PARMFLG3 - X'02' - Limit the number of files to be copied\n                                from the input tape.  This number is\n                                set using the FILELIMIT=nnn keyword in\n                                SYSIN.\n             alias    - FILELIM\n             opposite - NOLIMFIL\n             notes    - If no FILELIMIT=nnn number is set in SYSIN,\n                         then this option will not limit the number of\n                         files copied.\n                        If the input tape is standard labeled (SL) then\n                         the COPYMODS program will attempt to interpret\n                         the number of files copied as SL files, by\n                         dividing the total number of files to be\n                         copied by 3.  Otherwise, the number of files\n                         to be copied is interpreted as NL files.\n\nNLLIM     -  PARMFLG4 - X'04' - Force the interpretation of\n                                 FILELIMIT=nnn as an NL number\n             opposite - NONLLIM\n             notes    - Without this parm set, if FILELIMIT=nnn is\n                         in effect, then the condition of the input\n                         tape, interpreted by COPYMODS as SL or NL,\n                         will determine the interpretation of the\n                         file limit number.\n\nSLLIM     -  PARMFLG4 - X'08' - Force the interpretation of\n                                 FILELIMIT=nnn as an SL number\n             opposite - NOSLLIM\n             notes    - Without this parm set, if FILELIMIT=nnn is\n                         in effect, then the condition of the input\n                         tape, interpreted by COPYMODS as SL or NL,\n                         will determine the interpretation of the\n                         file limit number.\n\nBYTES     -  PARMFLG3 - X'04' - Report the count of bytes in each file.\n             opposite - NOBYTES\n\nCUMTOT    -  PARMFLG3 - X'08' - Report the cumulative count of bytes\n                                 on the tape.\n             opposite - NOCUMTOT\n             notes    - CUMTOT implies that the BYTES option is also\n                         set.\n                        See also CUMSEP option.\n\nLIMLABEL  -  PARMFLG4 - X'10' - Acts as though the number of label\n                                 sets in the LABADDIN file is limited\n                                 by the number set in the SYSIN parm:\n                                 LABELIMIT=nnn.  This number is\n                                 measured by counting the number of\n                                 ----ENDOFLABELTRAILER cards in the\n                                 LABADDIN file.  There may be more\n                                 label sets in the LABADDIN file, but\n                                 we disregard them.\n             opposite - NOLIMLAB\n\nOPTION    -  PARMFLG4 - X'20' - Print the OPTIONS table of options\n                                 which are on or off, at the top of\n                                 the SYSPRINT report.  (As assembled,\n                                 this is a default.)\n             opposite - NOOPTION\n\nSUPPWTO   -  PARMFLG4 - X'40' - Suppress the WTO (message to the\n                                 console) at the end of COPYMODS\n                                 execution.\n             opposite - NOSUPPWT\n             notes    - The CBT990 message tells you how many NL\n                         files, minus one, were copied.\n                        Example:\n                        CBT990   FILE 02581 CONTAINS 0000000 DATA BLOCKS\n\nLBDQUICK  -  PARMFLG4 - X'80' - Quick LABLDUMP (label dump) of a tape\n                                 during a READ of the tape, without\n                                 reading the data blocks.  This is\n                                 meant for dumping labels of a tape\n                                 quickly, if it will be very time\n                                 consuming to look at the data also.\n             opposite - NOLBDQUI\n             notes    - I created a tape with 1 million SL files, and\n                         I needed to get to the end of it relatively\n                         quickly.  That's why I developed this option.\n\nCUMSEP    -  PARMFLG4 - X'01' - Report the cumulative byte counts for\n                                 files on the tape, but count data\n                                 bytes separately, and label bytes\n                                 separately.\n             opposite - NOCUMSEP\n             notes    - See also CUMTOT option.\n                        CUMSEP implies that CUMTOT is also on.\n\nSTRIP     -  PARMFLG4 - X'02' - When copying tapes, if COPYMODS sees\n                                 a label, it will not copy the label\n                                 to the output tapes.  This creates an\n                                 NL tape from an SL tape, if the input\n                                 tape is SL.\n             opposite - NOSTRIP\n             notes    - This option works by actually detecting the\n                         label files, wherever they are, and not\n                         copying them to the output tapes.  It does NOT\n                         work by counting files.  Therefore, this\n                         option will work on weird tapes with labels\n                         that are not in their ordinary places.  Such a\n                         weird tape can be created using the COPYNLNL\n                         program.  STRIP was designed to rescue the\n                         data from such weird tapes, as well as to\n                         simply strip off the labels from ordinary SL\n                         tapes.\n                        LABLDUMP can save the set of labels at the same\n                         time as STRIP doesn't copy them to the output\n                         tapes.  The label file created by LABLDUMP\n                         can be used to replace the labels on the NL\n                         tapes, using the LABADDIN option, and recreate\n                         the original SL tape.  But you can edit the\n                         LABLDUMP file in the meanwhile, and change the\n                         labels on the newly created SL tapes, any way\n                         you want to.  (But if you want the system to\n                         be able to treat your new SL tapes properly,\n                         you should follow the rules.  See the IBM\n                         manual: Using Magnetic Tapes.)\n\nIDRCOFF   -  PARMFLG5 - X'10' - If a 3490 tape is compressed (36 track),\n                                 it contains the letter P in the 36th\n                                 byte of the VOL1 label.  This will\n                                 cause the system to not be able to\n                                 read the tape as SL, on an 18 track\n                                 drive.  However, if the tape isn't\n                                 REALLY in 36 track format, but it was\n                                 copied from a 36 track tape using BLP,\n                                 to an 18 track tape, the data isn't\n                                 REALLY compressed, and we should be\n                                 able to read it on an 18 track drive.\n                                 The letter P on the VOL1 label gets in\n                                 the way of that.  This option will\n                                 strip the letter P off the VOL1 label,\n                                 so the copied tape will be readable as\n                                 an 18 track tape, when the tape drive\n                                 is defined to the system as an 18\n                                 track drive, and its data isn't really\n                                 compressed.\n             opposite - NOIDRCOFF\n\nHEXPRT    -  PARMFLG5 - X'20' - Print the first 133 bytes of the first\n                                 nnn blocks of each file on the tape in\n                                 3-up (ISPF HEX style) hexadecimal\n                                 format.  The ASCII option will force\n                                 interpretation of the hex values as\n                                 ASCII.  The EBCDIC option (default)\n                                 will force the interpretation of the\n                                 hex values as EBCDIC.\n             opposite - NOHEXPRT\n             notes    - The PRINTRCDS=nnn keyword in SYSIN will change\n                         the number of records to be printed for each\n                         tape file.  Default value is 4 records, if\n                         PRINTRCDS=nnn has not been coded in SYSIN.\n\nUNEXWTO   -  PARMFLG5 - X'40' - Write a WTO on finding a unit exception,\n                                 as of old.\n             opposite - NOUNEXWT - Suppress this WTO on a unit\n                                   exception.\n\nENABLTMW  -  PARMFLG5 - X'04' - Allow writing leading tape marks on the\n                                 output tapes, using the WRITELTMS=nnn\n                                 keyword.  If ENABLTMW isn't coded, or\n                                 if nnn equals 0, then no leading tape\n                                 marks are written to the copied tapes.\n             opposite - NOENABLT\n\nWRTLTM    -  PARMFLG5 - X'08' - Set automatically by WRITELTMS=nnn\n                                 keyword.  Needs nnn not to be 0, so\n                                 WRITELTMS has to be actually coded.\n                                 WRITELTMS has no nonzero default.\n             oppostie - NOWRTLTM\n\nSECOFF    -  PARMFLG6 - X'10' - In an ASCII tape, HDR1 label, there is\n                                 a security byte at the 54th byte into\n                                 the HDR1.  This option blanks the\n                                 security byte in the copied tapes.\n             opposite - NOSECOFF\n\nFOOTAGE   -  PARMFLG6 - X'20' - Measure \"footage\" of the input tape,\n                                 as if it were 6250 bpi, using the\n                                 same algorithm used by the Florida\n                                 Power Company program called SS0104.\n             opposite - NOFOOTAG\n\nFOOTDIAG  -  PARMFLG6 - X'40' - Diagnostic messages in running the\n                                 FOOTAGE option.\n             opposite - NOFOOTDI\n\nCODEDPRM  -  PARMFLG6 - X'80' - Produces a second OPTIONS report,\n                                 printed after the first OPTIONS report,\n                                 telling you how the program options\n                                 were originally coded, before the\n                                 COPYMODS program attempted to resolve\n                                 contradictory parms.\n             opposite - NOCODEDP\n\nMINMAX    -  PARMFLG6 - X'01' - Prints the minimum sized block and\n                                 maximum sized block in each tape file.\n             opposite - NOMINMAX\n\nRECSIZE   -  PARMFLG6 - X'02' - Prints the size, in bytes, of each tape\n                                 record (i.e. block) found.\n             opposite - NORECSIZ\n             notes    - RECSIZE implies MINMAX, because it didn't make\n                         sense to show all the individual records,\n                         without reporting the largest and smallest\n                         ones also.\n\nDGSTRI    -  PARMFLG6 - X'04' - Prints diagnostic messages to analyze\n                                 the action of the STRIP option, and\n                                 to show the internal flags that it\n                                 sets.  Needed to fix a problem where\n                                 an (exactly) 80-byte tape block was\n                                 incorrectly interpreted as a label.\n             opposite - NODGSTRI\n\nKEEPVOL   -  PARMFLG6 - X'08' - Uses the VOL1 record originally on the\n                                 output tape as the copied VOL1, if it\n                                 is compatible with the format of the\n                                 input tape's VOL1 record.\n             alias    - KEEPVL\n             opposite - NOKEEPVL\n             notes    - KEEPVOL implies SHOOVL (Show Output Volumes).\n                        See notes in the SHOOVL option.\n                        KEEPVOL was designed for when you want to mount\n                         a \"scratch tape\" as an output tape, and to\n                         keep its volser in the copied tape.  This\n                         might help you manage the output tapes using\n                         a tape management system.\n\nSHOOVL    -  PARMFLG7 - X'10' - Show the first 80 bytes of each output\n                                 tape, if they exist.\n             opposite - NOSHOOVL\n             notes    - SHOOVL opens each output tape, reads 80 bytes\n                         of it, and rewinds it.  If SHOOVL is used\n                         with READ, then the OPEN is done only for\n                         INPUT.  If the result will be a tape copy,\n                         then the OPEN of the output tapes will be for\n                         OUTPUT.  If KEEPVOL is coded, then each first\n                         80 bytes (if they exist) are stored in the\n                         program, and queried if they are compatible\n                         with a (possible) VOL1 label on the input\n                         tape. If so, then the existing VOL1 is kept\n                         on the output tape.\n                        SHOOVL coded without READ, will result in the\n                         overlay of all output tapes by the contents\n                         of the input tape.  (IMPORTANT TO KNOW.)\n\n\n\n\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CPSCB": {"ttr": 4867, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00)\\x00\\x811?\\x01 \\x17O\\x10\\x08\\x004\\x00\\x0c\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf3\\xf0\\xf0@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1981-11-09T00:00:00", "modifydate": "2020-06-22T10:08:29", "lines": 52, "newlines": 12, "modlines": 0, "user": "FILE300"}, "text": ")F FUNCTION -\n  THE CPSCB (CHANGE THE PSCB) IS AN AUTHORIZED TSO COMMAND\n  TO CHANGE A TSO USER'S PSCB (PROTECTED STEP CONTROL BLOCK).\n\n  THIS HAS THE EFFECT OF CHANGING THE AUTHORITY WHICH THE\n  TSO USER HAS, AND THEREFORE THE USE OF THE COMMAND SHOULD BE\n  RESTRICTED TO AUTHORIZED SYSTEMS SUPPORT PERSONNEL ONLY.\n\n  THE CPSCB COMMAND DOES NOT PRODUCE ANY TSO OUTPUT MESSAGES\n  WHEN IT HAS BEEN PROPERLY EXECUTED.  TO SEE THE EFFECT\n  OF THE CPSCB COMMAND ON THE USER'S PSCB, YOU SHOULD ISSUE\n  THE COMPANION \"LPSCB\" (LIST THE PSCB) COMMAND, BEFORE AND\n  AFTER THE CPSCB COMMAND HAS BEEN EXECUTED.  LPSCB BY DEFAULT,\n  DOES NOT NEED ANY OPERANDS.\n\n)X SYNTAX  -\n         CPSCB  OPER    | NOOPER   (OPERATOR AUTHORITY)\n                ACCT    | NOACCT   (ACCOUNT AUTHORITY)\n                JCL     | NOJCL    (JCL SUBMIT AUTHORITY)\n                MOUNT   | NOMOUNT  (MOUNT AUTHORITY)\n                CONS    | NOCONS   (CONSOLE AUTHORITY)\n                CNOP    | NOCNOP   (CONSOLE OPERPARM AUTHORITY)\n                RECOV   | NORECOV  (REVERSE LOGIC HERE -\n                                     RECOV MEANS EDIT RECOVERY\n                                     IS OFF)\n                RRBA    | NORRBA   (NOT NORMALLY USED)\n\n                USERDATA(  )       (UP TO 2 HEX BYTES)\n                UNITNAME(  )       (UP TO 8 CHARACTER BYTES)\n\n  REQUIRED - ANY ONE OF THE PERMITTED OPERANDS\n\n)O OPERANDS -\n))OPER      -  TURNS OPERATOR AUTHORITY ON.\n))NOOPER    -  TURNS OPERATOR AUTHORITY OFF.\n))ACCT      -  TURNS ACCOUNT AUTHORITY ON.\n))NOACCT    -  TURNS ACCOUNT AUTHORITY OFF.\n))JCL       -  TURNS JOB SUBMIT AUTHORITY ON.\n))NOJCL     -  TURNS JOB SUBMIT AUTHORITY OFF.\n))MOUNT     -  TURNS VOLUME MOUNT AUTHORITY ON.\n))NOMOUNT   -  TURNS VOLUME MOUNT AUTHORITY OFF.\n))CONS      -  TURNS TSO CONSOLE AUTHORITY ON.\n))NOCONS    -  TURNS TSO CONSOLE AUTHORITY OFF.\n))CNOP      -  TURNS TSO CONSOLE OPERPARM AUTHORITY ON.\n))NOCNOP    -  TURNS TSO CONSOLE OPERPARM AUTHORITY OFF.\n))RECOV     -  TURNS EDIT RECOVERY OFF (REVERSE LOGIC).\n))NORECOV   -  TURNS EDIT RECOVERY ON  (REVERSE LOGIC).\n))RRBA      -  FORCES ADJUSTMENT OF BRODCAST RELATIVE\n               RECORD ADDRESS FOR THIS USER AT LOGOFF.\n               (NOT NORMALLY USED)\n))NORRBA    -  TURNS THE RRBA FLAG OFF.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DSAT": {"ttr": 4869, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x12 \\x8f\\x01\\x12 \\x8f\\x14%\\x01\\x16\\x01\\x16\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf2\\xf9\\xf6@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2012-07-26T00:00:00", "modifydate": "2012-07-26T14:25:00", "lines": 278, "newlines": 278, "modlines": 0, "user": "FILE296"}, "text": ")F FUNCTION -\n               THE DSAT COMMAND IS USED TO DISPLAY ALLOCATION\n               INFORMATION FOR DATA SETS ON A DIRECT ACCESS\n               DEVICE.\n\n               DSAT WILL SEARCH THE OS CATALOG FOR THE\n               ENTRIES FOR THE DATA SETS SPECIFIED.  ALLOCATION\n               INFORMATION WILL BE OBTAINED FROM THE VOLUME TABLE\n               OF CONTENTS, FORMATTED AND DISPLAYED.  IF A NAME IS\n               AN INDEX NAME, ALL DATA SETS BELOW THE INDEX WILL\n               BE DISPLAYED.\n\n               THE USER MAY BYPASS THE CATALOG SEARCH BY SUPPLYING\n               THE VOLUME SERIAL ON WHICH THE DATA SET RESIDES.\n               THIS OPTION PERMITS DISPLAYING INFORMATION FOR\n               UNCATALOGED DATA SETS.\n\n               THE ATTRIBUTES TO BE DISPLAYED MAY BE SELECTED BY\n               THE USER WHEN HE ENTERS THE DSAT COMMAND BY\n               SPECIFYING KEYWORD OPERANDS.\n\n               THE DSAT COMMAND MAY BE USED IN COMMAND PROCEDURES\n               TO FIND THE ALLOCATION OF A DATA SET OR A GROUP OF\n               DATA SETS AND SET THE RETURN CODE TO THE SPECIFIED\n               VALUE.  THE RETURN CODE MAY THEN BE TESTED WITH THE\n               WHEN COMMAND.  OUTPUT MAY BE SUPPRESSED BY\n               SPECIFYING NOPRINT.  THE HARDCOPY KEYWORD MAY BE USED\n               TO DIRECT THE OUTPUT TO A PRE-ALLOCATED DATA SET.\n\n               THE USER MAY CHOOSE WHAT INFORMATION WILL BE\n               DISPLAYED BY ENTERING KEYWORDS.\n\n               THE INFORMATION THAT MAY BE DISPLAYED IS:\n                1. VOLUME SERIAL ON WHICH THE DATA SET IS LOCATED.\n                2. FILE SEQUENCE NUMBER.\n                3. DEVICE TYPE CODE FROM CATALOG ENTRY.\n                4. ALLOCATION  (ALLOCATED, FREE, AND EXTENTS).\n                5. SECONDARY ALLOCATION (AMOUNT AND UNITS).\n                6. DATA SET ORGANIZATION.\n                7. DCB (RECFM, BLKSIZE, AND LRECL).\n                8. CREATION DATE.\n                9. EXPIRATION DATE.\n               10. LAST DATE REFERENCED (MVS SU 60).\n               11. FULLY QUALIFIED DATA SET NAME.\n               12. CCHHR OF THE FORMAT 1 DSCB.\n               13. GENERATION DATA GROUP DATA.\n               14. PDS DIRECTORY INFORMATION.\n               15. SYSTEM MANAGED DATA SET FLAG\n)X SYNTAX -\n               DSAT (NAME-LIST)  SERIAL/NOSERIAL   ALLOC/NOALLOC\n                                 DSORG/NODSORG     DCB/NODCB\n                                 CRDATE/NOCRDATE   EXDATE/NOEXDATE\n                                 LASTREF/NOLASTREF\n                                 TOTALS/NOTOTALS   PRINT/NOPRINT\n                                 HEADER/NOHEADER   ALL/DAONLY\n                                 GDGDATA/NOGDGDATA SEQNO/NOSEQNO\n                                 DEVTYPE/NODEVTYPE DEVICE/NODEVICE\n                                 CCHHR/NOCCHHR     PDS/NOPDS\n                                 SECONDARY/NOSECONDARY\n                                 SMS/NOSMS\n                                 GENERIC           DSONLY\n                                 HARDCOPY(DDNAME)  VOLUME(SERIAL)\n                                 RC(TALLOC/TUSED/TDIFF/\n                                    LALLOC/LUSED/LDIFF/NUM/\n                                    PREVIOUS/DSORG/DIRALLOC/\n                                    DIRUSED/ENTRIES/ALIASES/\n                                    MEMBERS)\n\n               DEFAULTS -  NAME-LIST DEFAULTS TO PREFIX\n                           SERIAL   ALLOC   DSORG    DCB    CRDATE\n                           NOEXDATE TOTALS  PRINT    HEADER ALL\n                           NOPDS    NOSEQNO NODEVICE NODEVTYPE\n                           NOGDGDATA    NOLASTREF    NOSECONDARY\n                           NOSMS\n                           NOCCHHR      NOEXTENTS    NOFULL\n               NOTE: IF HARDCOPY IS SPECIFIED, NOPRINT IS THE DEFAULT\n\n               WITH FULL - SAME AS DEFAULTS ABOVE WITH:\n                           EXDATE    PDS     DEVICE\n                           GDGDATA   LASTREF SECONDARY\n                           CCHHR\n                           NODEVTYPE NOSEQNO NOEXTENTS\n\n\n   SAMPLE OUTPUTS:\n 1. DSAT LIB.CNTL\n SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE   -DSNAME-\n STR849   280    36  3  PO   FB   23440    80 05/04/1994 WSER07.LIB.CNT\n\n 2. DSAT LIB.CNTL LAST\n SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE   LAST REF    -D\n STR849   280    36  3  PO   FB   23440    80 05/04/1994 08/03/1994* WS\n\n 3. DSAT LIB.CNTL FULL  (NOTE: OUTPUT BELOW WRAPS TO ABOUT 160 BYTES)\n SERIAL DEVICE ALLOC  FREE EX  SEC UNITS DSORG DIRA    DIRU    ENTR AL\n STR849 3380     280    36  3   60  TRK   PO     90      78     465   3\n   -DCB ATTRIBUTES- CR. DATE   EX. DATE   LAST REF     C C H H R -DSNAM\n   FB   23440    80 05/04/1994 05/06/1994 08/03/1994* 0000000930 WSER07.\n\n 4. DSAT LINK\n SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE   -DSNAME-\n STR80P    20    18  1 X-PO  U    32760    80 07/19/1994 WSER07.LINK.AL\n STR81Z  1350   634  5 A-PO  U    32760    80 11/13/1993 WSER07.LINK.LO\n MIGRAT                                                  WSER07.LINK.US\n         1370   652                                       3 DATA SETS\n\n 5. DSAT LIB.CNTL EXTENTS\n SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE   -DSNAME-\n STR849   280    36  3  PO   FB   23440    80 05/04/1994 WSER07.LIB.CNTL\n     EXT#-START/CCHH--S/TRK----END/CCHH--E/TRK--LENGTH--TYPE-----------\n       0   02CB,0004  10729   02D7,0004  10909     181  DATA\n       1   052A,0000  19830   052C,0008  19868      39  DATA\n       2   07D6,0000  30090   07D9,000E  30149      60  DATA\n\n 6. DSAT 'SYS1.PROC' GENERIC\n\n SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE   -DSNAME-\n MPSYSM    75    53  1 A-PO  FB   27920    80 10/20/2005 SYS1.PROCLIB\n MPSYSM  1471  1452  1 A-PO  FB    6160    80 03/25/2007 SYS1.PROCLIB.A1\n MPSYSM NOT ON VOLUME                                    SYS1.PROCLIB.A2\n MPIP2M    15     5  1 A-PO  FB   27920    80 11/15/2006 SYS1.PROCLSSC\n         1561  1510                                4 DATA SETS DISPLAYED\n\n 7. DSAT ('PLI' 'NONE')\n\n SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE   -DSNAME-\n WLMDCT    15    13  1 A-PO  U     6144     0 02/24/2001 PLI.PLILINK\n WLMDCT     2     0  1 A-PO  FB    3120    80 02/24/2001 PLI.PLISAMP\n WLMDCT    15    11  1 A-PO  U     6144     0 02/24/2001 PLI.SIBMBASE\n WLMDCT    15     0  1 A-PO  U     6144     0 02/24/2001 PLI.SIBMLINK\n MTDOCM   225        1 X-AM  U     4096     0 10/20/2005 PLI\n        NAME NOT FOUND                                   NONE\n          272    24                                5 DATA SETS DISPLAYED\n\n\n 8. DSAT 'PAPI.SEDOR' SMS\n SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE    WRAP...>\n LMP007     4     0  1 A-PS  U    27998     0 10/02/2009  WRAP...>\n\n ...>   SMS DATACLAS MGMTCLAS STORCLAS -DSNAME-\n ...>   YES DCLMPCNV (NULL)   SCLMPCNV PAPI.SEDOR\n\n\n)O OPERANDS -\n               NAME-LIST - ONE OR MORE DATA SET OR INDEX LEVEL\n                           NAMES. TSO NAMING CONVENTIONS ARE USED.\n                           IF A SPECIFIED NAME IS AN INDEX NAME,\n                           DATA SETS UNDER THAT LEVEL WILL BE\n                           DISPLAYED.  IF NO NAME IS SPECIFIED,\n                           THE PREFIX WILL BE USED.  FOR MVT AND\n                           SVS, THIS IS THE USERID.  FOR MVS,\n                           THE PREFIX MAY BE SPECIFIED WITH THE\n                           PROFILE COMMAND.  IF NO NAME IS\n                           SPECIFIED AND THE PROFILE SPECIFIES\n                           NOPREFIX, THE USERID WILL BE USED.\n\n                           NOTE - IF A KEYWORD IS ENTERED,\n                                  NAME-LIST MUST BE SPECIFIED.  IF\n                                  NAME-LIST IS OMITTED, IT WILL\n                                  NOT DEFAULT TO THE PREFIX, BUT\n                                  THE KEYWORD WILL BE INTERPRETED\n                                  AS THE NAME-LIST, NOT A KEYWORD.\n))SERIAL        LIST VOLUME SERIALS.\n))NOSERIAL      DO NOT LIST VOLUME SERIALS.\n))SEQNO         LIST FILE SEQUENCE NUMBERS.\n))NOSEQNO       DO NOT LIST FILE SEQUENCE NUMBERS.\n))DEVTYPE       DISPLAY DEVICE TYPE CODE.\n))NODEVTYPE     DO NOT DISPLAY DEVICE TYPE CODE.\n))DEVICE        LIST DEVICE NAME (3330, 3350, ETC.).\n))NODEVICE      DO NOT LIST DEVICE NAME.\n))ALLOC         LIST ALLOCATION INFORMATION (TRACKS ALLOCATED,\n                TRACKS FREE, AND EXTENTS).\n))NOALLOC       DO NOT LIST ALLOCATION INFORMATION.\n))SECONDARY     DISPLAY SECONDARY ALLOCATION INFORMATION.\n))NOSECONDARY   DO NOT DISPLAY SECONDARY ALLOCATION INFORMATION.\n))SMS           DISPLAY SMS INFORMATION (DATACLAS/MGMTCLAS/STORCLAS)\n))NOSMS         DO NOT DISPLAY INFORMATION\n))DSORG         LIST DATA SET ORGANIZATION.\n))NODSORG       DO NOT LIST DATA SET ORGANIZATION.\n))PDS           LIST PDS DIRECTORY INFORMATION (BLOCKS ALLOC, USED,\n                ENTRIES, AND ALIASES).\n))NOPDS         DO NOT LIST PDS DIRECTORY INFORMATION.\n))DCB           LIST DCB INFORMATION (RECFM, BLKSIZE, AND LRECL).\n))NODCB         DO NOT LIST DCB INFORMATION.\n))CRDATE        LIST CREATION DATE.\n))NOCRDATE      DO NOT LIST CREATION DATE.\n))EXDATE        LIST EXPIRATION DATE.\n))NOEXDATE      DO NOT LIST EXPIRATION DATE.\n))LASTREF       DISPLAY LAST DATE REFERENCED (MVS SU 60).\n))NOLASTREF     DO NOT DISPLAY LAST DATE REFERENCED.\n))CCHHR         DISPLAY FORMAT 1 DSCB ADDRESS.\n))NOCCHHR       DO NOT DISPLAY CCHHR.\n))TOTALS        DISPLAY TOTALS (TRACKS ALLOCATED, TRACKS FREE,\n                AND DATA SETS DISPLAYED).\n))NOTOTALS      DO NOT DISPLAY TOTALS.\n))PRINT         OUTPUT IS TO BE DISPLAYED.\n))NOPRINT       OUTPUT IS NOT TO BE DISPLAYED EXCEPT FOR ERROR MESSAGES.\n))LIST          OUTPUT IS TO BE DISPLAYED.\n))NOLIST        OUTPUT IS NOT TO BE DISPLAYED EXCEPT FOR ERROR MESSAGES.\n))HEADER        DISPLAY OUTPUT HEADER LINE.\n))NOHEADER      DO NOT DISPLAY HEADER LINE.\n))ALL           DISPLAY ALL DATA SET NAMES UNDER AN INDEX LEVEL.\n))DAONLY        DISPLAY DATA SETS ON MOUNTED DIRECT ACCESS\n                DEVICES.\n))GDGDATA       INFORMATION ON GENERATION DATA GROUP INDEXES IS TO\n                BE DISPLAYED.\n))NOGDGDATA     GENERATION DATA GROUP DATA WILL NOT BE DISPLAYED.\n))GENERIC       NAME SPECIFIES A GENERIC KEY.         ** MVS ONLY **\n))DSONLY        TREAT NAMES AS DATA SET NAMES, NOT INDEX NAMES.\n))VOLUME        SPECIFIES THE VOLUME TO BE SEARCHED FOR THE DATA SET.\n))HARDCOPY      SPECIFIES THE DDNAME A PRE-ALLOCATED DATA SET TO\n                RECEIVE A COPY OF DSAT OUTPUT.\n))FULL          FORMAT ADDITIONAL INFORMATION FOR EACH DATA SET: PDS,\n                EXDATE, DEVICE, GDGDATA, LASTREF, SECONDARY, CCHHR.\n\n                OTHER KEYWORDS (LIKE NOPDS) MAY BE SPECIED AFTER FULL\n                TO TURN OFF OPTIONS SELECTIVELY.\n))NOFULL        DO NOT FORMAT ADDITIONAL INFORMATION.\n))EXTENTS       FORMAT EXTENT INFORMATION FOR EACH DATA SET FOLLOWING\n                THE DATA SET DISPLAY LINE.\n\n                THE FOLLOWING FIELDS ARE FORMATTED FOR EACH EXTENT:\n                    EXT#       - EXTENT NUMBER (0 TO 122)\n                    START/CCHH - STARTING CCHH HEX ADDRESS\n                    S/TRK      - STARTING CCHH IN DECIMAL\n                    END/CCHH   - ENDING CCHH HEX ADDRESS\n                    E/TRK      - ENDING CCHH IN DECIMAL\n                    LENGTH     - SIZE OF EXTENT IN TRACKS\n                    TYPE       - COMMENTS ON EXTENT USE\n                                 CYL     - CYLINDER ALLOCATION\n                                 SHR     - SHARING CYLINDER\n                                 USR LBL - USER LABELS\n                                 IS INDX - ISAM INDEX\n                                 IS OVFL - ISAM OVERFLOW\n))NOEXTENTS     DO NOT FORMAT EXTENT INFORMATION.\n))RC            SPECIFIES HOW THE RETURN CODE IS TO BE SET:\n                RC NOT SPECIFIED:  0 - SUCCESSFUL COMPLETION\n                                   8 - ONE OR MORE DATA SETS NOT FOUND\n                                  16 - UNABLE TO INTERPRET COMMAND\n                TALLOC               - TOTAL TRACKS USED\n                TUSED                - TOTAL TRACKS USED\n                TDIFF                - TOTAL OVERALLOCATION\n                                       (TALLOC-TUSED)\n                LALLOC               - TRACKS ALLOCATED BY LAST\n                                       DATA SET\n                LUSED                - TRACKS USED BY LAST DATA SET\n                LDIFF                - LAST DATA SET OVERALLOCATION\n                                       (LALLOC-LUSED)\n                NUM                  - NUMBER OF DATA SETS DISPLAYED\n                                       (INCLUDES DATA SETS NOT\n                                       FOUND, ETC.)\n                PREVIOUS             - ASSUMES THE RETURN CODE OF\n                                       THE PREVIOUS COMMAND.\n                DSORG                - SETS THE RETURN CODE BASED\n                                       ON THE DATA SET ORGANIZATION\n                                       OF THE DATA SETS DISPLAYED.\n                                       1 - ALL DATA SETS WERE SEQ.\n                                       2 - ALL DATA SETS WERE PDS\n                                       3 - DATA SETS WERE MIXED PDS\n                                           AND SEQUENTIAL\n                                       4 - AN ERROR OCCURRED OR A\n                                           DATA SET OTHER THAN PDS\n                                           OR SEQUENTIAL WAS\n                                           PROCESSED\n                DIRALLOC - SETS THE RETURN CODE TO THE\n                           NUMBER OF DIRECTORY BLOCKS\n                           ALLOCATED.\n                DIRUSED  - SETS THE RETURN CODE TO THE\n                           NUMBER OF DIRECTORY BLOCKS\n                           USED.\n                ENTRIES  - SETS THE RETURN CODE TO THE\n                           NUMBER OF ENTRIES IN THE\n                           DIRECTORY (MEMBERS AND\n                           ALIASES).\n                ALIASES  - SETS THE RETURN CODE TO THE\n                           NUMBER OF ALIASES.\n                MEMBERS  - SETS THE RETURN CODE TO\n                           ENTRIES-ALIASES.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DSMF": {"ttr": 4874, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x000\\x01\\x19\\x11?\\x01\\x19\\x11?\\x162\\x00\\x0f\\x00\\x0f\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf3\\xf0\\xf0@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2019-04-23T00:00:00", "modifydate": "2019-04-23T16:32:30", "lines": 15, "newlines": 15, "modlines": 0, "user": "FILE300"}, "text": ")FUNCTION\n   To List the SMF datasets, similar to the D SMF console\n   command.\n)SYNTAX\n   DSMF\n\n))Example output (using PUTLINE)\n\n                        DISPLAY SMF DATASETS\n                        ------- --- --------\n --- SMF DATASET NAME ------ VOLSER --STATE-- BLKS ALLOC  BLKS USED %FULL\n\n SYS1.VZOSRES.MAN1           ZOSRES ACTIVE        18,000      2,736   15\n SYS1.VZOSRES.MAN2           ZOSRS1 ALTERNATE     18,000          0    0\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DSPACE": {"ttr": 4876, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x03\\x14\\x7f\\x01\\x03\\x14\\x7f\\x10I\\x00$\\x00$\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf6\\xf3\\xf3@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2003-05-27T00:00:00", "modifydate": "2003-05-27T10:49:00", "lines": 36, "newlines": 36, "modlines": 0, "user": "FILE633"}, "text": ")F FUNCTION -\n   The DSPACE or \"DASD SPACE\" command displays space utilization of\n   mounted online storage devices using the LSPACE (SVC 78) macro\n   facility.\n)X SYNTAX -\n   DSPACE VVVVVV    ...  VVVVVV   = a VOLSER (1-6 characters)\n   DSPACE UUUU      ...  UUUU     = a UCB address (4 characters)\n   DSPACE NNNNNNNN  ...  NNNNNNNN = a UNITNAME (1-8 characters)\n   DSPACE STORAGE   ...  displays all volumes mounted STORAGE\n   DSPACE PUBLIC    ...  displays all volumes mounted PUBLIC\n   DSPACE PRIVATE   ...  displays all volumes mounted PRIVATE\n   DSPACE ONLINE    ...  displays all ONLINE volumes (DEFAULT)\n\n   Note: DSPACE accepts a mask: DSPACE TSO* or DSPACE work*\n)O OPERANDS -\n   DSPACE also accepts a list: DSPACE (VVVVVV,UUUU,...) where the list\n   is placed within matching parentheses and each field within the\n   parentheses is separated by commas or blanks.  space or comma.\n   Wildcards are acceptable and may be used along with any of the above\n   reserved keywords.\n\n   DSPACE displays the maximum number of contiguous free cylinders,\n   free tracks, the number of extents, and the number of contiguous\n   cylinders and tracks.  The letter \"I\" between the volume serial\n   number and the unit address signifies the presence of an active\n   indexed VTOC.\n\n   Example:  DSPACE (4A* STORAGE LCLR*)\n\n   Sample output:\n\n   VOL      UNIT DEVT  ATTR         #CYL   #TRK   #EXT  CYL-C  TRK-C\n            4A00            OFFLINE\n   HSM991 I 9618 3390  STRG SPACE=003186,000050,000010/003154,000000\n   LCLR00 I 8010 3390  PRIV SPACE=005379,000055,000017/005344,000000\n   LCLR01 I 8012 3390  PRIV SPACE=006794,000232,000059/006717,000000\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DTEST": {"ttr": 4878, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00C\\x01\\x08\\x15_\\x01\\x19\\x11O\\x02#\\x00&\\x00\\x15\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf7\\xf3\\xf1@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2008-06-03T00:00:00", "modifydate": "2019-04-24T02:23:43", "lines": 38, "newlines": 21, "modlines": 0, "user": "FILE731"}, "text": ")F FUNCTION -\n\n  DTEST displays the additions to the TEST command, which\n  have been set by the IKJTSOxx member of PARMLIB.\n\n)X SYNTAX  -\n\n       DTEST\n\n   Sample output:\n\n   In-Storage PARMLIB IKJTSOxx TEST Parameter Values\n   ---------- ------- -------- ---- --------- ------\n   TPT ADDRESS     0C598028\n   TPT SIZE        0028\n   TPT VERSION     01\n   TCT ADDRESS     0C5C0210\n   TCT SIZE        001C\n   TCT ENTRIES     0002\n   SCT ADDRESS     0C58B038\n   SCT SIZE        0054\n   SCT ENTRIES     0004\n\n   ---- TSOCMD PROGRAMS ----\n         Program Name\n           TSOEXEC\n           SDSF\n\n   ----   SUBCOMMANDS   ----\n    Subcommand     Module\n     F            IKJT9FIZ\n     FIND         IKJT9FIZ\n     LB           IKJT9LBZ\n     LG           IKJT9LGZ\n\n)O OPERANDS -\n   none\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DVAT": {"ttr": 4880, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00!\\x01\\x08\\x15_\\x01\\x19\\x11O\\x029\\x00#\\x00\\x15\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf7\\xf3\\xf1@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2008-06-03T00:00:00", "modifydate": "2019-04-24T02:39:21", "lines": 35, "newlines": 21, "modlines": 0, "user": "FILE731"}, "text": ")F FUNCTION -\n\n  DVAT displays the in-storage results from the PARMLIB\n  VATLSTxx settings that remain after IPL time.\n\n)X SYNTAX  -\n\n       DVAT\n\n   Sample output:\n\n               DISPLAY INCORE VATLST SETTINGS\n               ------------------------------\n   VATDUSE ADDRESS:  0C5C0150\n   DEFAULT SYSUSE :  PRIVATE\n   VATLST FROM IPA:  (00,04)\n   ---------------------------- (*PARMLIB  VATLST VOLUME SETTINGS*)\n                                   ----------------------------\n                                ( MAY BE OVERRIDDEN BY MOUNT CMDS )\n                                ( NOT CHECKED AGAINST ONLINE UCBS )\n     VOLMASK   ATTRIB    DEVTYP\n   ----------------------------\n     ZOSRES    PRIVATE   3390\n     ZOSRS1    PRIVATE   3390\n     ZOSRS2    PRIVATE   3390\n     WORKA*    STORAGE   3390\n     WORKE1    STORAGE   3390\n     WORK0*    STORAGE   3390\n     PUB001    PUBLIC    3390\n     WORK80    PRIVATE   3380\n   ----------------------------\n\n)O OPERANDS -\n   none\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DVOL": {"ttr": 5121, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x009\\x01\\x03\\x18\\x0f\\x01\\x03\\x18\\x0f\\x10$\\x008\\x008\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf2\\xf9\\xf6@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-06-29T00:00:00", "modifydate": "2003-06-29T10:24:39", "lines": 56, "newlines": 56, "modlines": 0, "user": "FILE296"}, "text": ")F FUNCTION -    The DVOL command is used to display the amount of\n                 of free space on a direct access device.\n\n                 DVOL will read the format 4 and format 5 DSCB's from\n                 the VTOC of a direct access volume and display:\n                  1.  Volume name\n                  2.  Unit address\n                  3.  Mount status and device type\n                  4.  Use status\n                  5.  Number of blank DSCB's in the vtoc\n                  6.  Condition of the VTOC indicators byte\n                  7.  VSAM data fields\n                  8.  Total free space in tracks\n                  9.  Number of free extents\n                 10.  Number of free cylinders\n                 11.  Size of largest extents (up to 5) in\n                      cylinders + tracks\n                 12.  Size of largest extents (up to 5) in tracks\n\n   Return Code: The return code is set to the total number of tracks\n                in the 5 largest extents (to a maximum of 4095) for\n                the last volume displayed.\n\n                If an error condition exists on the volume, the\n                return code will be set to 0.\n\n)X SYNTAX -     DVOL  (volume-list)/*\n                      SHORT/LONG\n                      HEADER/NOHEADER\n                      PRINT/NOPRINT\n                      SERONLY\n                      HARDCOPY(DDNAME)\n\n                Required - none\n                Defaults - *  SHORT  HEADER  PRINT\n                Note: if HARDCOPY is specified, NOPRINT is the default\n)O OPERANDS -\n  volume-list   is a list of one or more volume serials of mounted\n                direct access volumes or partial volume names.\n\n                If no volume is entered, or if an * is specified, the\n                information is displayed for each direct access volume\n                on the system.\n\n                If a volume name is entered with a U followed by one\n                to four digits, the data is also used as a UCB name.\n\n))SHORT         Short output form requested\n))LONG          Long output form requested\n))HEADER        Header is to be displayed for SHORT form\n))NOHEADER      No header is to be displayed for SHORT form\n))PRINT         Output is to be displayed\n))NOPRINT       No output is to be displayed\n))SERONLY       Only a list of mounted volume serials will be displayed\n))HARDCOPY      Specifies the DDNAME a pre-allocated data set to\n                receive a copy of DVOL output.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "EESCB": {"ttr": 5123, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x11\\x01\\x054o\\x01\\x06\\x00/\\x14\\x03\\x00\\x18\\x00\\r\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf7\\xf3\\xf1@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2005-12-12T00:00:00", "modifydate": "2006-01-02T14:03:11", "lines": 24, "newlines": 13, "modlines": 0, "user": "FILE731"}, "text": ")F FUNCTION -\n  The EESCB TSO command is a means of displaying the status\n    of the BROADCAST dataset on an MVS system, and displaying\n    whether a BROADCAST switch was done, when, and by whom.\n\n    EESCB is an effective replacement for the D IKJTSO,SEND\n    Operator command, and it is useful when you don't have\n    access to an image of a system console.\n\n)X SYNTAX  -\n    EESCB\n\n  REQUIRED - NONE\n  DEFAULT  - NONE\n  ALIAS    -\n  NOTE     - The EESCB command has limited support for releases\n             previous to TSO/E Release 3.x.  Primary support is\n             for releases of TSO/E which support the BROADCAST\n             dataset switching, from TSO/E Release 3 and upward.\n\n)O OPERANDS -\n))None\n\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "FSH": {"ttr": 5125, "alias": true, "halfwords": 30, "notes": 0, "parms": "b'0\\x03\\x00P\\x00\\x86!\\x8f\\x01\\x18#\\x1f\\x174\\x03\\x98\\x01O\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf3\\xf4@@@'", "ispf": {"version": "48.03", "flags": 0, "createdate": "1986-08-06T00:00:00", "modifydate": "2018-08-19T17:34:50", "lines": 920, "newlines": 335, "modlines": 0, "user": "FILE134"}}, "FSHELP": {"ttr": 5125, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'0\\x03\\x00P\\x00\\x86!\\x8f\\x01\\x18#\\x1f\\x174\\x03\\x98\\x01O\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf3\\xf4@@@'", "ispf": {"version": "48.03", "flags": 0, "createdate": "1986-08-06T00:00:00", "modifydate": "2018-08-19T17:34:50", "lines": 920, "newlines": 335, "modlines": 0, "user": "FILE134"}, "text": "*                    TSO HELP FOR 'FSHELP' RELEASE 48.3     AUGUST 2018\n)F Function -\n  The FSHELP command displays a HELP member on a 3270 terminal\n  in full screen mode.\n\n  In the field labelled MEMBER==> _______, FSHELP displays the current\n  HELP member; if the cursor is positioned to this field and a command\n  name is entered, FSHELP will display that new member's HELP data.\n\n  In the field labelled SUBCOMMAND==> _______, FSHELP displays the\n  current subcommand of the HELP command; if the cursor is positioned\n  to this field and a name is entered, FSHELP will display the member's\n  HELP data for the entered subcommand.\n\n  The field labelled INPUT===> _______ is the primary input field for\n  FSHELP; any supported subcommand may be entered.\n\n  In the field labelled SCROLL ===> __, FSHELP displays the default\n  forward and backward scroll amount; if the cursor is positioned to\n  this field and an amount is entered, that quantity will become the\n  new default scroll amount.\n\n)X Syntax -\n        FSHELP 'command' FUNCTION SYNTAX  POSITIONAL(nn)  ALL\n                        OPERANDS('keyword-list')  MSGID('keyword-list')\n\n  Aliases  - FSH, HEL\n  Required - NONE.\n  Defaults - ALL if FUNCTION, SYNTAX, and OPERANDS not specified.\n  Note     - If HELP is entered without any operands a list of\n             available commands with a short description of each will\n             be displayed.\n  NOTE     - 'keyword-list' is optional when OPERANDS is used.\n)O Operands -\n)P 'command' - Name of the TSO command to be explained.\n))FUNCTION - Function data is to be displayed.\n))SYNTAX   - Syntax data is to be displayed.\n))OPERANDS('keyword-list')\n           - Operand description is to be displayed.  If\n             'keyword-list' is present, positioning is to the first\n             operand in the list encountered.\n 'keyword-list'\n           - keywords separated by commas, blanks, or tabs.\n))ALL      - FUNCTION, SYNTAX, and OPERAND descriptions are to be\n             displayed.\n))POSITIONAL('operand number')\n           - A description of the positional operand specified is to\n             be displayed.\n))MSGID('keyword-list')\n           - A description of the message identified by MSGID is to be\n             displayed.\n))PFK      - This is not an operand, but a description of\n             the Program Function Keys used by this command.\n             PFK1  - HEL     PFK2  - START      PFK3  - END\n             PFK4  - TSO     PFK5  - RFIND      PFK6  - RCHANGE\n             PFK7  - UP      PFK8  - DOWN       PFK9  - SWAP NEXT\n             PFK10 - LEFT    PFK11 - RIGHT      PFK12 - RECALL\n             PFK13 - TOP     PFK14 - BOTTOM     PFK15 - END\n             PFK16 - SMF     PFK17 - RFIND      PFK18 - EREP\n             PFK19 - UP      PFK20 - DOWN       PFK21 - HEX\n             PFK22 - ASCII   PFK23 - TSO REV    PFK24 - HEXC\n             These can be changed using the PFK# subcommand, but the\n             changes are in effect only until the command ends unless\n             a profile data set is allocated to DDNAME 'ISPPROF'.\n             Example: 'PFK6 RIGHT 1' would make PFK6 'RIGHT 1'.\n)S Subcommands -\n   HELP    - Request HELP about FSHELP and/or its subcommands.\n   HEL     - Same as 'HELP'.\n   FSHELP  - Same as 'HELP'.\n   FSH     - Same as 'HELP'.\n   KEYS    - Display current Program Function Key values.\n   ?       - Same as 'KEYS'.\n   UP      - Scroll backwards a specified number of records.\n             If no operand is specified, the 'scroll' value is\n             used.  This is displayed in the upper right corner.\n   '-'     - Same as 'UP'.\n   DOWN    - Scroll forwards a specified number of records.\n             If no operand is specified, the 'scroll' value is\n             used.  This is displayed in the upper right corner.\n   '+'     - Same as 'DOWN'.\n   LEFT    - Scroll to the left a specified number of columns.\n             If no operand is specified, the 'scroll' value is used.\n   '<'     - Same as 'LEFT'.\n   RIGHT   - Scroll to the RIGHT a specified number of columns.\n             If no operand is specified, the 'scroll' value is used.\n   '>'     - Same as 'RIGHT'.\n   TOP     - Scroll up to the first record (on this volume).\n   BOTTOM  - Scroll down to the last record.\n   BOT     - Same as 'BOTTOM'.\n   LIST    - Display the specified record number.\n             (Relative record number only, not sequence numbers.)\n   L       - Same as 'LIST'.\n   LOC     - Same as 'LIST'.\n   LOCATE  - Same as 'LIST'.\n   HEX ON  - Display each data byte as 2 hexadecimal digits.\n   HEX OFF - Display each data byte as a single character.\n   HEX     - If HEX currently on, turn it off.  If off, turn it on.\n   HEXC ON - Alter the HEX ON display to show keyboard characters.\n   HEXC OFF- Leave the HEX ON display to show all data in hexadecimal.\n   HEXC    - If HEXC currently on, turn it off.  If off, turn it on.\n   HEXR ON - Show the data twice, first as characters, then in hex.\n   HEXR OFF- Do not show the data as characters and hex simultaneously.\n   HEXR    - If HEXR currently on, turn it off.  If off, turn it on.\n   HEXX ON - Show each data byte as a character and as hexadecimal.\n   HEXX OFF- Do not show the data as characters and hex simultaneously.\n   HEXX    - If HEXX currently on, turn it off.  If off, turn it on.\n   FIND    - Search until the specified data or pattern is found.\n   F       - Same as 'FIND'.\n   FINDNOT - Search until the specified data or pattern is not found.\n   FN      - Same as 'FINDNOT'.\n   RFIND   - Repeat the previous FIND or FINDNOT operation.\n   IFIND   - Same as 'RFIND'.\n   RESET   - Deactivate line exclusion caused by the ALL or REST\n             operand of a FIND or FINDNOT subcommand.\n   RES     - Same as 'RESET'.\n   FULL ON - Use full EBCDIC translation for display without using any\n             APL characters.\n   FULL OFF- Use the standard 3270 keyboard character set for display.\n   FULL    - If FULL is on, turn it off.  If off, turn it on.\n   DISP T  - Display TN/T11-like EBCDIC text characters where possible.\n             This is similar to 3278T in ISPF.\n   DISP A  - Display APL/EBCDIC characters where possible.\n             This is similar to 3278A in ISPF.\n   DISP    - Toggle between DISP T and DISP A.\n   DISPLAY - Same as 'DISP'.\n   DIR     - Display the member selection list of the HELP file.\n   COMMAND - Switch to the specified HELP MEMBER.\n   MEMBER  - Switch to the specified HELP MEMBER.\n   MEM     - Same as 'MEMBER'.\n   SUBCOM  - Switch to a different subcommand in the same HELP member.\n   SUB     - Same as 'SUBCOM'.\n   TSO     - Issue a TSO command.  CLISTs are not supported.\n   TSS     - Same as 'TSO'.\n   PFK#    - Set Program Function Key '#' to a specified value.\n   PFK0    - Set Program Function Keys to default values.\n   RECALL  - Recall previously typed-in commands for optional\n             editing and reissuing.\n   COLOR # - Set the data display color to color number '#'.\n   COLOR ON- Turn on 7-color/extended highlighting mode.\n             This may give errors on some older model terminals.\n   COLOR OFF- Turn off 7-color/extended highlighting mode.\n   COLOR   - If COLOR is on, turn it off.  If off, turn it on.\n   COLOUR  - Same as 'COLOR'.\n   APPEND  - Copy REVIEWed data starting from the first record shown\n             on the screen to an output file.  Data is to be appended\n             to any existing data in the output file.\n   ADD     - Same as 'APPEND'.\n   TACKON  - Same as 'APPEND'.\n   COPY    - Copy REVIEWed data starting from the first record shown\n             on the screen to an output file.  Any data in the output\n             file will be overwritten and lost.\n   CUTOFF  - Same as 'COPY'.\n   CUT     - Same as 'COPY'.\n   CUTOVER - Same as 'COPY'.\n   SCRNAME - Assign a new name to this logical screen session.\n   START   - Create a new RFE (REVIEW Front End) parallel session.\n   SPLIT   - Same as 'START'.\n   SWAP    - List or transfer control between parallel sessions.\n   END     - END the command.\n   CANCEL  - Same as 'END' but user profile changes are not saved.\n   CAN     - Same as 'CANCEL'.\n   EXIT    - END the command bypassing the directory member list.\n   RETURN  - Same as 'EXIT'.\n   =X      - Same as 'EXIT'.\n=HELP=HEL=FSHELP=FSH\n)F Function -\n  The HELP subcommand provides function, syntax, and operand\n  information on the 'HEL' command and its subcommands.\n)X Syntax -\n         HELP   'subcommand name'\n                FUNCTION  SYNTAX  OPERANDS('keyword list')  ALL\n                POSITIONAL('operand number') MSG('msgid')\n  Alias    - FSHELP, FSH, HEL\n  Required - None.\n  Defaults - ALL if FUNCTION, SYNTAX, and OPERANDS not specified.\n  Note     - If HELP is entered without any operands a list of\n             subcommands of the current command will be displayed.\n  Note     - 'keyword list' is optional when OPERANDS is used.\n)O Operands -\n)P 'subcommand name'\n           - Name of the subcommand of 'FSHELP' to be explained.\n))FUNCTION - Function data is to be displayed.\n))SYNTAX   - Format is to be displayed.\n))OPERANDS('keyword list')\n           - Operand description is to be displayed.  If\n             'keyword list' is present, only those keyword descriptions\n             are to be displayed.\n    'keyword list'\n           - Keywords separated by commas, blanks, or tabs.\n))ALL      - Function, syntax, and operand descriptions are to be\n             displayed.\n))POSITIONAL('operand number')\n           - A description of the positional operand specified is to\n             be displayed.\n))MSGID('msgid')\n           - A description of the message identified by msgid is to be\n             displayed.\n=COMMAND=MEMBER=COM=MEM\n)F Function -\n  The COMMAND subcommand switches to a different member in the HELP\n  file.  The member must exist for the switch to succeed.\n)X Syntax -\n     COMMAND 'membername'\n\n Aliases  - COM, MEMBER, MEM\n Defaults - None.\n Required - None.\n)O Operands -\n)P 'membername' - Specifies the name of a new MEMBER to be displayed.\n=SUBCOM=SUB\n)F Function -\n  The SUBCOM subcommand switches to a different subcommand\n  description in the same member or command.\n)X SYNTAX -\n     SUBCOM 'subname'\n\n Alias    - SUB\n Defaults - Same subcommand.\n Required - None.\n)O OPERANDS -\n)P 'subname' - specifies the subcommand name for this member or command.\n=DIR\n)F Function -\n  The DIR subcommand causes the member list of the HELP file\n  to be displayed.\n)X Syntax -\n     DIR\n\n Aliases  - None.\n Defaults - None.\n Required - None.\n)O Operands - None.\n=FIND=F\n)F Function -\n  The FIND subcommand positions the screen to a text string.\n\n  FIND notes:\n   1.  A search argument is required.  A single unquoted asterisk\n       may be used to specify the same argument as was last used.\n   2.  The first operand is always treated as the search argument.\n   3.  The search argument determines whether the search is case\n       sensitive, case insensitive or for a picture string, or\n       for a string of hexdecimal digits byte-aligned with two\n       digits per data byte.\n   4.  Quotation marks are required whenever the string type needs\n       to be specified.\n   5.  Quotation marks are optional for the default string type\n       unless the string contains one or more blank characters.\n   6.  Operands specifying various keywords and/or column numbers\n       may be supplied in any order after the search argument.\n   7.  Searches for picture strings are not allowed in ASCII mode.\n   8.  If currently in ASCII mode a text or character string specifed\n       in the command will be translated to ASCII.\n   9.  The 'REST' and 'ALL' operands causes lines failing the match\n       criteria to be excluded from view.  No place marker lines for\n       this exclusion are shown.  This exclusion is cancelled by\n       other FIND/FINDNOT commands, and by 'UP' (including 'UP\n       MAX'), 'LIST', 'BOTTOM' and 'RESET'.  It is NOT cancelled by\n       'DOWN' or 'TOP', by 'LEFT' or 'RIGHT' scrolling or by\n       formatting subcommands.\n\n)X Syntax -\n     FIND 'string'  'column-1'  'column-2'\n                     FIRST / NEXT / PREV / LAST / REST / ALL\n                     PREFIX / SUFFIX / WORD\n\n Alias    - F\n Defaults - NEXT\n Required - 'string'\n)O Operands -\n)P 'string'  - Specifies the data and data type to locate.\n              Quoted strings may have the string type indicated\n              before the leading quote or after the trailing quote.\n              String types are:\n\n              C - Character for case sensitive search.\n\n              T - Text for case insensitive search.\n\n              X - Hexadecimal digits (byte-aligned and two to a byte).\n\n              P - Picture data where special mask characters represent\n                  various categories of data.  Valid picture masks are:\n                     \u00bc - any non-blank character.\n                     $ - any special character.\n                     = - any character.\n                     # - any decimal numeric character.\n                     - - any non-numeric character.\n                     @ - any alphabetic character.\n                     > - any upper case alphabetic character.\n                     < - any lower case alphabetic character.\n                     . - any non-displayable character.\n                  Non-mask characters represent themselves, with\n                  matching of specific alphabetics being case\n                  insensitive.\n\n              Unquoted strings and strings without a string type\n              specified are treated as character (type C) strings,\n              which requests a case insensitive search.\n\n)P 'column-1' - Optional, specifies first or only column to search.\n)P 'column-2' - Optional, specifies last column where the string\n              may end.\n))FIRST   - Search forward from the start of the file or member.\n))NEXT    - Search forward from the current location.\n))PREV    - Search backward from the current location.\n))LAST    - Search backward from the end of the file or member.\n))REST    - Search forward from the current location\n              for all occurrences, excluding lines without the string.\n))ALL     - Search forward from the start of the file or member\n              for all occurrences, excluding lines without the string.\n))PREFIX  - Search for the string only at the start of a\n              word longer than the string.  PRE for short.\n))SUFFIX  - Search for the string only at the end of a\n              word longer than the string.  SUF for short.\n))WORD    - Search for the string only when it starts at the start\n              of a word and ends at the end of a word.\n=FINDNOT=FN\n)F Function -\n  The FINDNOT subcommand positions the screen to a text string\n  which does NOT match the search argument.\n\n  The notes listed under FIND also apply to FINDNOT.\n\n)X Syntax -                                                        rm\n   FINDNOT 'string'  'column-1'  'column-2'\n                      FIRST / NEXT / PREV / LAST / REST / ALL\n                      PREFIX / SUFFIX / WORD                       .\n                                                                   ns\n Alias    - FN\n Defaults - NEXT\n Required - 'string'\n)O Operands -\n)P 'string'  - Specifies the character data to mismatch.\n)P 'column'  - Optional, specifies a column number to search.      .\n              eg. \"FN ' ' 70\"\n                   will search for a non-blank in column 70.\n              eg. \"FN ' ' ALL\"\n                   will only show records with non-blanks.\n))FIRST   - Search forward from the start of the file or member.\n))NEXT    - Search forward from the current location.\n))PREV    - Search backward from the current location.\n))LAST    - Search backward from the end of the file or member.\n))REST    - Search forward from the current location\n              for all occurrences, excluding other lines.\n))ALL     - Search forward from the start of the file or member\n              for all occurrences, excluding other lines.\n=RFIND=IFIND\n)F Function -\n  The RFIND subcommand repeats the previous FIND or FINDNOT\n  operation.  No operands are allowed.  It is expected that RFIND\n  will be used as the default meaning of a PFK such as PF5 or PF17.\n\n)X Syntax -\n     RFIND\n\n Alias    - IFIND\n Defaults - Same operation, string and direction.\n Required - None.\n)O Operands - None.\n=RESET=RES\n)F Function -\n  The RESET subcommand deactivates line exclusion caused by the\n  REST and ALL operands of any FIND or FINDNOT subcommand.  The\n  first file data line displayed on the screen (ie. the location\n  line number) remains unchanged.\n\n)X Syntax -\n     RESET\n\n Alias    - RES\n Defaults - None.\n Required - None.\n)O Operands - None.\n=UP=-\n)F Function -\n  The UP subcommand moves the screen up the specified number of\n  lines; if no operand is entered, the scroll amount is used.\n)X Syntax -\n     UP 'amount'\n\n Aliases  - UP, -\n Defaults - Scroll amount\n Required - None.\n)O Operands -\n)P 'amount'  - Specifies the number of lines to move the screen.\n               It must be a decimal number, or 'HALF' ('H') or\n               'PAGE' ('P') or 'CSR' ('C') or 'MAX' ('M').\n=DOWN=+\n)F Function -\n  The DOWN subcommand moves the screen down the specified number\n  of lines; if no operand is entered, the scroll amount is used.\n)X Syntax -\n     DOWN 'amount'\n\n Aliases  - DOWN, +\n Defaults - Scroll amount\n Required - None.\n)O Operands -\n)P 'amount'  - Specifies the number of lines to move the screen.\n               It must be a decimal number, or 'HALF' ('H') or\n               'PAGE' ('P') or 'CSR' ('C') or 'MAX' ('M').\n=LEFT=<\n)F Function -\n  The LEFT subcommand moves the screen left the specified number of\n  columns; if no operand is entered, the scroll amount is used.\n)X Syntax -\n     LEFT 'amount'\n\n Aliases  - LEFT, <\n Defaults - Scroll amount\n Required - None.\n)O Operands -\n)P 'amount'  - Specifies the number of lines to move the screen.\n               It must be a decimal number, or 'HALF' ('H') or\n               'PAGE' ('P') or 'CSR' ('C') or 'MAX' ('M').\n=RIGHT=>\n)F Function -\n  The RIGHT subcommand moves the screen right the specified number\n  of columns; if no operand is entered, the scroll amount is used.\n)X Syntax -\n     RIGHT 'amount'\n\n Aliases  - RIGHT, >\n Defaults - Scroll amount\n Required - None.\n)O Operands -\n)P 'amount'  - Specifies the number of lines to move the screen.\n               It must be a decimal number, or 'HALF' ('H') or\n               'PAGE' ('P') or 'CSR' ('C') or 'MAX' ('M').\n=TOP\n)F Function -\n  The TOP subcommand moves the screen to the first line of the\n  data set or member.\n)X Syntax -\n     TOP\n\n Aliases  - None.\n Defaults - None.\n Required - None.\n)O Operands - None.\n=BOTTOM=BOT\n)F Function -\n  The BOTTOM subcommand moves the screen to the last line of the\n  data set or member.\n)X Syntax -\n     BOTTOM\n\n Alias    - BOT\n Defaults - None.\n Required - None.\n)O Operands - None.\n=FULL\n)F Function -\n  The FULL subcommand specifies whether character data is displayed\n  using full EBCDIC translation or only standard 3270 keyboard\n  characters.  If turned on then only code-points that usually cause\n  screen errors are deemed to be undisplayable.  If turned off then\n  all characters not on a \"standard\" keyboard are deemed to be\n  undisplayable.  (In character mode, undisplayable bytes are\n  represented by a period ('.').)  Terminals with APL support may\n  have normally unprintable characters displayed from the APL\n  character set instead when in 'FULL OFF' mode, equivalent to one of\n  the 3278A or the 3278T terminal display modes of ISPF, depending\n  on the value set by the DISPLAY subcommand.\n)X Syntax -\n     FULL ON / OFF\n\n Aliases  - None.\n Defaults - opposite mode\n Required - None.\n)O Operands -\n))ON       - Specifies that all code points X'40' to X'FE' and some\n             below X'40' are displayable characters.\n))OFF      - Specifies that only keyboard and possibly APL\n             characters are displayable.\n=DISPLAY=DISP\n)F Function -\n  The DISPLAY subcommand specifies whether character data shown\n  in FULL OFF mode is TEXT EBCDIC (as per TN and T11 print trains)\n  or not.  This subcommand can be used to improve the readability\n  of the data being REVIEWed.  The current setting is shown in the\n  message area of the top screen line after the KEYS subcommand is\n  issued.  The DISPLAY setting is saved in the user profile data set.\n)X Syntax -\n     DISPLAY A / T\n\n Alias    - DISP\n Defaults - opposite mode\n Required - None.\n)O Operands -\n))A        - Specifies that data code points are to be displayed\n             from the standard character set if keyboard characters,\n             or possibly from the graphic (APL) character set if not\n             keyboard characters.  The graphic character set is not\n             available on some terminals.  This mode is similar to\n             the ISPF 3278A display mode.\n))T        - Specifies that the \"text\" character set (similar to the\n             TN and T11 print trains) is to be used for character\n             code point interpretation.  Characters from the primary\n             (standard) and alternate (graphic/APL) character sets\n             may be used as appropriate in order to assist in data\n             representation.  This mode is similar to the ISPF 3278T\n             display mode, and is helpful in reading syntax diagrams.\n=KEYS=?\n)F Function -\n  The KEYS subcommand displays the current Program Function Key\n  values.  Each PF Key (1 to 24) has a default value which may\n  be changed with the PFK command.\n)X Syntax -\n     KEYS\n\n Alias    - ?\n Defaults - None.\n Required - None.\n)O Operands - None.\n=RECALL\n)F Function -\n  The RECALL subcommand causes previously typed-in commands to be\n  displayed in the primary input area where they may be changed if\n  required and then reissued.  Note that single character input strings\n  and text implied by PFK usage are not recallable.  The first command\n  recalled is the most recently typed in command.  Consecutive RECALL\n  commands cause increasingly older commands to be recalled.\n)X Syntax -\n     RECALL\n\n Alias    - The DUP character (X'1C').\n Defaults - None.\n Required - None.\n)O Operands - None.\n=PFK\n)F Function -\n  The PFK subcommand changes PFK definitions for the duration of\n  the FSHELP session; to change a PFK, a subcommand such as\n  'PFK6 RIGHT 1'  is entered to change PFK6 to 'RIGHT 1'.\n\n  By default, the PF KEYS are defined as the following:\n              PFK1  - HEL     PFK2  - SPLIT      PFK3  - END\n              PFK4  - TSO     PFK5  - RFIND      PFK6  - RCHANGE\n              PFK7  - UP      PFK8  - DOWN       PFK9  - SWAP NEXT\n              PFK10 - LEFT    PFK11 - RIGHT      PFK12 - RECALL\n              PFK13 - TOP     PFK14 - BOTTOM     PFK15 - END\n              PFK16 - SMF     PFK17 - RFIND      PFK18 - EREP\n              PFK19 - UP      PFK20 - DOWN       PFK21 - HEX\n              PFK22 - ASCII   PFK23 - TSO REV    PFK24 - RECALL\n\n  Changes to the PFK assignments may be saved in the profile data set.\n)X Syntax -\n     PFK## 'newpfdata'\n\n Aliases  - None.\n Defaults - None.\n Required - nn and 'newpfdata'\n)O Operands -\n)P  ##      - Specifies the PF Key to be modified.\n              ## is a 1 or 2 decimal digit number in the range of\n              0 to 24 inclusive.  Numbers from 1 to 24 specify a\n              particular Program Function Key.  If ## is 0 then\n              all 24 PF Keys will be assigned their default values.\n\n 'newpfdata'- Specifies the new subcommand for this PF Key.\n=HEX\n)F Function -\n  The HEX subcommand specifies the display mode (character or\n  hexadecimal) for data.  If HEX is entered without operands,\n  the current HEX mode is switched to the opposite HEX mode.\n\n  The normal HEX ON display shows each data byte as two\n  hexadecimal digits.  In this format, the maximum number of data\n  bytes shown on each line is half that of the HEX OFF display.\n\n  The formatting of the HEX ON display can be modified by\n  using the HEXC command.\n)X Syntax -\n     HEX  ON / OFF\n\n Aliases  - None.\n Defaults - Opposite mode.\n Required - None.\n)O Operands -\n))ON       - Specifies that data should be displayed in HEX mode.\n))OFF      - Specifies that data should be displayed in character mode.\n=HEXC\n)F Function -\n  The HEXC subcommand can be used to modify the HEX ON display.\n  The HEXC setting only affects the display of the data when HEX ON\n  is active.\n\n  When HEXC is OFF, HEX ON shows the usual two hexadecimal digits\n  for each data byte.  This can lead to a crowded screen which is\n  difficult to read.\n\n  When HEXC is ON, the HEX ON display is modified to show bytes\n  which correspond to keyboard characters as a blank followed by the\n  character itself.  Further, nulls are shown as two underscores\n  instead of 00.  (An underscore is shown as a single underscore.)\n\n  HEXC can therefore provide improved readability of the data\n  and help the user find non-zero data while still providing a\n  unique rendering for each of the 256 possible code points.\n)X Syntax -\n     HEXC  ON / OFF\n\n Aliases  - None.\n Defaults - Opposite mode.\n Required - None.\n)O Operands -\n))ON       - Specifies that HEX ON shows two hexadecimal digits for\n             each data byte except for keyboard characters and nulls.\n))OFF      - Specifies that HEX ON always shows two hexadecimal digits\n             for each data byte.\n=HEXR\n)F Function -\n  The HEXR subcommand can be used to display the data in an alternate\n  hexadecimal format.  The advantage of the HEXR display over the\n  normal HEX display is that the screen is less crowded and the\n  character data can be viewed simultaneously.\n\n  The maximum number of data bytes that can be shown by HEXR on each\n  line is one quarter of the screen width.  The left-most quarter of\n  each line shows the data in character mode.  The other three\n  quarters of the line show each byte as two hexadecimal digits with\n  a space between each pair of digits.\n\n  Further, to assist with locating non-zero and non-blank data, nulls\n  are shown as two periods instead of 00, and blanks are shown as two\n  underscores instead of 40.\n\n  Data matched by a FIND command will highlight both the character\n  and the hexadecimal parts of the display.  The cursor may be placed\n  in either part of the display to control cursor-specified scrolling.\n\n  The name of HEXR comes from \"HEX on the right\".\n)X Syntax -\n     HEXR  ON / OFF\n\n Aliases  - None.\n Defaults - Opposite mode.\n Required - None.\n)O Operands -\n))ON       - Activates the HEXR display mode.\n))OFF      - Deactivates the HEXR display mode.\n=HEXX\n)F Function -\n  The HEXX subcommand provides and extended hexadecimal display\n  over the normal HEX display format.  The extension is that each\n  data byte is shown as it would be in character mode, followed\n  immediately by its hexadecimal code point value, followed by a\n  blank to make obvious the character-hexadecimal pairing.\n\n  As a result of this format, the maximum number of data bytes\n  which can be shown on a screen line is one quarter of the screen\n  width.\n)X Syntax -\n     HEXX  ON / OFF\n\n Aliases  - None.\n Defaults - Opposite mode.\n Required - None.\n)O Operands -\n))ON       - Activates the HEXX display mode.\n))OFF      - Deactivates the HEXX display mode.\n=COLOR=COLOUR\n)F Function -\n  The COLOR subcommand specifies whether or not data is to be\n  displayed using 3270 extended highlighting and extended color,\n  and which color is to be used for actual data display.  Colors\n  for character mode and hexadecimal mode may be independently\n  selected.  This command may cause errors on some terminals\n  depending on terminal type and network definitions.  If no\n  operands are entered then the color mode is switched to the\n  opposite mode.\n\n  The data display colors may be saved in the profile data set.\n)X Syntax -\n     COLOR  ON / OFF / #\n\n Alias    - COLOUR\n Defaults - Opposite mode.\n Required - None.\n)O Operands -\n))ON      - Specifies that 3270 data stream extensions may be used.\n            This may be rejected if the terminal is known to not\n            support color or extended highlighting.\n))OFF     - Specifies that 3270 data stream extensions may not be used.\n))#       - Specifies the color to be used for actual data.\n            If specified while in character mode then this color is\n            used in character mode.  If specified while in hexadecimal\n            mode then this color is used in hexadecimal mode.\n            # must be a single hexadecimal digit and may be rejected\n            if it is known that the color is not supported by the\n            terminal.  The possible colors and their codes are:\n               1 - Blue                9 - Deep blue\n               2 - Red                 A - Orange\n               3 - Pink                B - Purple\n               4 - Green               C - Pale green\n               5 - Turquoise           D - Pale turquoise\n               6 - Yellow              E - Grey\n               7 - Neutral             F - White\n                  (Codes 0 and 8 (black) are not allowed.)\n                  (Codes 9 to F are only for 16-color terminals.)\n=SCRNAME\n)F Function -\n  The SCRNAME subcommand allows a new name to be assigned to the\n  active logical screen.  This name can be used as the operand of\n  a SWAP subcommand.  Screen names are displayed by SWAP LIST.\n)X Syntax -\n     SCRNAME 'name'\n\n Aliases  - None.\n Defaults - None.\n Required - name\n)O Operands -\n)P 'name'   - Specifies the screen name.  It can be up to eight\n              characters long.  It cannot be completely numeric.\n              It should not be 'NEXT', 'PREV' or 'LIST'.\n=SPLIT\n)F Function -\n  The SPLIT subcommand requests that a new parallel session is to be\n  initiated and given control.  The new session will be under the\n  RFE (REVIEW Front End) menu hierarchy.  The new session will NOT\n  be started if it would cause the maximum logical session limit to\n  be exceeded.  If no operand is supplied the RFE primary option\n  menu is shown.\n)X Syntax -\n     SPLIT  'option'\n\n Aliases  - None.\n Defaults - None.\n Required - None.\n)O Operands -\n)P 'option' - any valid RFE main menu option.  An invalid option\n              will cause the main menu to be shown with the\n              'Invalid command' message.\n=SWAP\n)F Function -\n  The SWAP subcommand specifies which parallel REVIEW session\n  is to become the current session.  It can also list the started\n  REVIEW sessions which are eligible to become the current session.\n  A parallel REVIEW session is created when the REVIEW TSO subcommand\n  (not the ISPF TSO subcommand) is used to create a recursive REVIEW\n  session.  The nesting order of these sessions can be changed by SWAP.\n)X Syntax -\n     SWAP   LIST / NEXT / PREV / # / 'name'\n\n Aliases  - None.\n Default  - switch to previous screen which is listed second\n            by SWAP LIST\n Required - None.\n)O Operands -\n)P 'name'   - Specifies the target screen name which can be up to\n            eight characters long.\n))LIST    - Specifies that all parallel REVIEW sessions are to be\n            listed.\n))NEXT    - Requests switching to next session in increasing\n            session-id order.\n))PREV    - Requests switching to next session in decreasing\n            session-id order.\n))#       - Specifies the decimal number of the target session\n            that is to be swapped with the current session.\n            'SWAP 0' is a no-operation.\n=TSO=TSS\n)F Function -\n  The TSO subcommand specifies a TSO command processor to be\n  invoked from the FSHELP processor. CLISTs are not supported.\n)X Syntax -\n     TSO  'command' 'operands'\n\n Alias    - TSS\n Defaults - None.\n Required - 'command'\n)O Operands -\n)P 'command'  - Specifies a TSO command to be executed.\n\n)P 'operands' - Specifies any desired operands for this TSO command.\n=LIST=L=LOC=LOCATE\n)F Function -\n  The LIST subcommand repositions the screen to the relative line\n  number entered.\n)X Syntax -\n     LIST 'lineno'\n\n Aliases  - L, LOC, LOCATE\n Defaults - None.\n Required - lineno\n)O Operands -\n)P 'lineno' -  Specifies the relative line number to which the screen\n               is to be positioned.\n=APPEND=ADD=TACKON\n)F Function -\n  The APPEND subcommand causes REVIEW to write records from the\n  data being REVIEWed to an output data set.  Records are written\n  consecutively from the first record shown on the screen until\n  the requested number of records has been copied or end-of-file is\n  reached.  When complete, the first record AFTER the copied records\n  is made the new top-of-screen record.  The APPEND subcommand\n  performs the same processing as the COPYOUT subcommand except that\n  the output file is opened for EXTEND, so that data is appended to\n  any data already residing in the output file.\n\n  ** Note that PDS members cannot be extended.\n\n  A major advantage that the COPYOUT and APPEND subcommands provide\n  is the ability to copy data that has been rendered inaccessible by\n  I/O errors.  Data beyond an I/O error can be REVIEWed with the use\n  of the NEWTOP subcommand.  Any data that can be REVIEWed can be\n  copied and saved to an intermediate file for data reclamation.\n\n  Another feature of COPYOUT and APPEND is selectivity.  Not only\n  can records be selected by manually scrolling to a specific record\n  and cutting a specific number of records, but selectivity can be\n  automated with FIND ALL and FINDNOT ALL.  Only records eligible\n  for display can be copied, so FIND ALL and FINDNOT ALL subcommands\n  can be used to exclude records based on their data content not\n  only from display but also from offloading by COPYOUT and APPEND.\n\n  Further, data copied from an ASCII file can be converted to EBCDIC\n  by specifying ASCII ON before commencing the COPYOUT operation.\n\n  The user will be prompted with a data entry panel to specify the\n  output data set.\n)X Syntax -\n     APPEND 'record-count'\n\n Aliases  - ADD, TACKON\n Defaults - copy to end-of-file.\n Required - None.\n)O Operands -\n)P 'record-count'\n              - Specifies the number of records to be copied.\n                If not specified then data is copied until end-of-file\n                is reached or forced by an I/O error.\n=COPYOUT=CUTOFF=CUT=CUTOVER\n)F Function -\n  The COPYOUT subcommand causes REVIEW to write records from the\n  data being REVIEWed to an output data set.  Records are written\n  consecutively from the first record shown on the screen until\n  the requested number of records has been copied or end-of-file is\n  reached.  When complete, the first record AFTER the copied records\n  is made the new top-of-screen record.  The COPYOUT subcommand\n  performs the same processing as the APPEND subcommand except that\n  the output file is opened for OUTPUT, so that data already residing\n  in the output file is overwritten and lost.\n\n  A major advantage that the COPYOUT and APPEND subcommands provide\n  is the ability to copy data that has been rendered inaccessible by\n  I/O errors.  Data beyond an I/O error can be REVIEWed with the use\n  of the NEWTOP subcommand.  Any data that can be REVIEWed can be\n  copied and saved to an intermediate file for data reclamation.\n\n  Another feature of COPYOUT and APPEND is selectivity. Not only\n  can records be selected by manually scrolling to a specific record\n  and cutting a specific number of records, but selectivity can be\n  automated with FIND ALL and FINDNOT ALL.  Only records eligible\n  for display can be copied, so FIND ALL and FINDNOT ALL subcommands\n  can be used to exclude records based on their data content not\n  only from display but also from offloading by COPYOUT and APPEND.\n\n  Further, data copied from an ASCII file can be converted to EBCDIC\n  by specifying ASCII ON before commencing the COPYOUT operation.\n\n  The user will be prompted with a data entry panel to specify the\n  output data set.\n)X Syntax -\n     COPYOUT 'record-count'\n\n Aliases  - CUTOFF, CUT, CUTOVER\n Defaults - copy to end-of-file.\n Required - None.\n)O Operands -\n)P 'record-count'\n              - Specifies the number of records to be copied.\n                If not specified then data is copied until end-of-file\n                is reached or forced by an I/O error.\n=CANCEL=CAN\n)F Function -\n  The CANCEL subcommand performs the same processing as the END\n  subcommand without saving the REVIEW/FSHELP user profile to disk.\n  The REVIEW/FSHELP user profile (which contains data display colors,\n  scrolling amount and 24 PF Key values) is normally only rewritten to\n  disk at the END of a REVIEW session if it has been changed during\n  that session.  If a member list has not been displayed in a session\n  then the REVIEW session is terminated without saving the user\n  profile.  If a member list has been shown it is reshown but the user\n  profile is no longer considered to have been altered, even though the\n  profile \"in-core\" still has the changes applied to it.  Changing the\n  profile at this stage and exiting will cause all accumulated profile\n  changes for the REVIEW session to be saved to disk unless another\n  CANCEL is issued.\n)X Syntax -\n     CANCEL\n\n Alias    - CAN\n Defaults - None.\n Required - None.\n)O Operands - None.\n=END\n)F Function -\n  The END subcommand terminates the FSHELP command, or, if in member\n  selection mode, returns to the member selection list.  The member\n  selection list may be bypassed with the EXIT command.\n)X Syntax -\n     END\n\n Aliases  - None.\n Defaults - None.\n Required - None.\n)O Operands - None.\n=EXIT=RETURN==X\n)F Function -\n  The EXIT subcommand terminates the FSHELP command, bypassing\n  the member selection list.\n)X Syntax -\n     EXIT\n\n Aliases  - RETURN, =X\n Defaults - None.\n Required - None.\n)O Operands - None.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "HEL": {"ttr": 5125, "alias": true, "halfwords": 30, "notes": 0, "parms": "b'0\\x03\\x00P\\x00\\x86!\\x8f\\x01\\x18#\\x1f\\x174\\x03\\x98\\x01O\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf3\\xf4@@@'", "ispf": {"version": "48.03", "flags": 0, "createdate": "1986-08-06T00:00:00", "modifydate": "2018-08-19T17:34:50", "lines": 920, "newlines": 335, "modlines": 0, "user": "FILE134"}}, "ICH": {"ttr": 5385, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x017\\x00\\x10\\x01\\x04%\\x9f\\x01\\x10\\x01o\\x16F\\x01G\\x00@\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf8\\xf1\\xf9@@@'", "ispf": {"version": "01.55", "flags": 0, "createdate": "2004-09-15T00:00:00", "modifydate": "2010-01-16T16:46:10", "lines": 327, "newlines": 64, "modlines": 0, "user": "FILE819"}, "text": ")F FUNCTION - ICH Rexx Exec Facility to Update Racf Exits   01/15/2010\n\n\n    PURPOSE:\n\n         This exec will allow a user to update/delete/remove a\n         Racf Security Server Exit dynamically without requiring\n         an IPL outage.\n\n         This exec can perform any of four functions.\n\n         It can UPDATE or DELETE a module from dynamic LPA (just\n         as the SETPROG ADD/DELETE LPA MVS command does) or it\n         can REMOVE (unpoint) a RACF exit or REPOINT a RACF Exit.\n         REMOVE takes the exit out of RACF service and REPOINT\n         puts the exit back into service.\n\n         These four functions are documented below.\n\n         In order for RACF (Security Server) to recognize the change\n         in the exit module's status, the RCVT (RACF COMMUNICATION\n         VECTOR TABLE) pointer must be repointed to the new Entry\n         point address (for an Update function) or it must be\n         zeroed to remove and exit from RACF use.\n\n         This exec may be called in TEST/SIMULATE mode to simulate\n         an update to an exit.\n\n         This exec calls APF-Authorized program ICHLOADR to perform\n         these functions.\n\n         The Load Library containing the Racf Exit to fetch for the\n         LPA Update must also be in the APF List.  Normally, this\n         Loadlib would be SYS1.LPALIB (this is the default load\n         library if not specified when the ICH REXX exec is invoked),\n         but it can be overridden with the DA(dsname) parm when ICH\n         is invoked.\n\n    FUNCTIONS:\n\n         There are four functions for this exec.\n\n         1) UPDATE - This function loads a new version of a RACF\n            exit into dynamic LPA (CSA memory) (same as the\n            SETPROG LPA,ADD command).  It also repoints RACF to\n            use the updated module (updates the exits RCVT pointer).\n            The user must specify the load library to fetch the exit\n            from to load into dynamic LPA (CSA).  This exec will\n            default to load library SYS1.LPALIB unless specified\n            otherwise when the exec is invoked.\n            (Does the same function as the SETPROG LPA,ADD MVS\n            command except that it also updates the RACF RCVT\n            pointer which points to the updated version of the\n            exit in LPA (CSA) storage.)\n\n            If none of these four function values are passed as\n            parameters to this exec, it will default to use the\n            UPDATE function.\n\n         2) DELETE - This function deletes a RACF exit from dynamic\n            LPA (same as SETPROG LPA,DELETE command) and then also\n            loads zeros into the Racf RCVT pointer to indicate to\n            RACF that the exit is not being used (until the next\n            IPL or next dynamic update).\n            (Does the same function as the SETPROG LPA,DELETE\n            MVS command except that it also unpoints (zeros) the\n            RACF RCVT pointer which points to it in LPA storage.)\n\n         3) REMOVE - This function only unpoints the Racf exit\n            (loads zeros into the RACF RCVT point for that Exit)\n            to take the exit out of RACF service (until the next\n            IPL or next dynamic update). This function does not\n            actually affect the exit module itself.  It only\n            updates the RACF RCVT pointer which points to it.\n\n         4) REPOINT - This function obtains the most current EP\n            address for the exit from LPA storage and then repoints\n            RACF to the exit to put the exit back into service for\n            RACF to use.  This would normally be done after a\n            previous REMOVE function has taken the exit out of\n            service for RACF to put the exit back into service.\n            This function does not actually affect the exit\n            module in LPA storage.  It only update the RAXF RCVT\n            RCVT pointer which points to it.\n            This function is the opposite of the REMOVE function\n            and can be used subsequent to issuing REMOVE funtion\n            to put the exit back into service.\n\n\n)X SYNTAX   - ICH Rexx Exec Facility to Update Racf Exits\n\n    INVOCATION SYNTAX:\n\n       ICH ?\n       ICH membername [ UPDATE | DELETE | REMOVE | REPOINT ]\n                      [ DA(dsname)               ]\n                      [ TEST | SIMULATE          ]\n                      [ DEBUG                    ]\n\n       Where membername is one of the following RACF User Exits:\n\n        ICHAUTAB\n        ICHCNX00\n        ICHDEX01\n        ICHDEX11\n        ICHNCV00\n        ICHPWX01\n        ICHPWX11\n        ICHRCX01\n        ICHRCX02\n        ICHRDX01\n        ICHRDX02\n        ICHRFX01\n        ICHRFX02\n        ICHRFX03\n        ICHRFX04\n        ICHRIN03\n        ICHRIX01\n        ICHRIX02\n        ICHRLX01\n        ICHRLX02\n\n\n)O OPERANDS - ICH Rexx Exec Facility to Update Racf Exits\n\n    OPERANDS:\n\n     MEMBERNAME - Specifies the Racf Exit member name for which to\n                  obtain the absolute storage address.\n                  THis must be the first positional parameter passed\n                  to ICH (unless a \"?\" is passed for help query).\n\n     DA(dsname) - Specifies the load library dataset name to be used\n                  to fetch the Racf Module from to stow in CSA for\n                  the LLA update. If this parameter is omitted, the\n                  Racf exit module will be fetched from default\n                  load library 'SYS1.LPALIB'.\n\n     DSN(dsname)- Same as DA(dsname).  See above.\n\n     The following four parameters are processed as the FUNCTION\n     literals to be passed to program ICHLOADR.\n     If none of these four function values are entered, the\n     default function is \"UPDATE\".\n\n     UPDATE     - Specifies that the module passed should be updated\n                  in CSA (LLA Update) to replace the existing\n                  module in LLA and repoint the RACF RCVT pointer\n                  to that version of the exit.\n                  This is the DEFAULT FUNCTION if no function\n                  parameters are entered when the 'ICH' exec is\n                  invoked.\n\n     DELETE     - Specifies that the current version of the Racf Exit\n                  should be deleted from dynamic LPA (CSA) storage.\n                  Also, the RACF RCVT pointer to the exit is zerod\n                  (unpointed) to remove it from RACF service (until\n                  the next IPL or next dynamic LPA update).\n\n     REMOVE     - Specifies that the module passed should be removed\n                  from RACF service (until the next IPL or until the\n                  next dynamic update). The RACF RCVT pointer to the\n                  the exit is zerod (unpointed).\n                  The exit is not touched or updated in LPA (CSA)\n                  storage.  Only the pointer is reset to Zero.\n\n     REPOINT    - Specifies that the module passed should be repointed\n                  with the current version of the exit found in LPA\n                  (CSA) storage.  The RACF RCVT point to the exit is\n                  updated to point to the current version of the exit\n                  in LPA storage.  The module itself is not touched\n                  or updated in LPA storage.\n\n     The following two parameters are processed as the TESTPARM\n     literals to be passed to program ICHLOADR as execution-time\n     linkage parameters to make a 'test' pass without updating\n     any pointers.\n\n     TEST       - Specifies that a TEST execution should be performed\n                  without any update action.\n                  Performs the same action as the SIMULATE\n                  parameter.\n\n     SIMULATE   - Specifies that a TEST execution should be performed\n                  without any update action.\n                  Performs the same action as the TEST parameter.\n\n    CUSTOMIZATION:\n\n       Program ICHLOADR must reside in an APF-authorized Load\n       Library (either PDS or PDSE).  This load library can\n       be in the LinkList or otherwise.  The user has to option\n       in this exec to call program ICHLOADR via a search through\n       the LinkList or via an explicit call to a Load Library.\n\n       If ICHLOADR is called explicitly from a load library, you\n       must comment out the call thru the Linklist and uncomment\n       the call from a specific library. Do a FIND on the\n       You must change the loadlib name whic contains the ICHLOADR\n       eyecather text \"<= CHANGE LOADLIB\" to modify the specific\n       load library.\n\n       Program ICHLOADR must reside in the 'Authorized Programs'\n       section of the IKJTSOxx MVS parmlib member.\n\n       It is also recommended that ICHLOADR 'program access\n       control' protected in RACF to restrict its use to only those\n       users who have a legimate need to use it.\n\n\n    Documentation for Return Codes and Reason Codes returned from\n    the CSVQUERY and CSVDYLPA macros in program ICHLOADR:\n\n       CSVQUERY Documentation:\n       See IBM Manual \"MVS Programming Assembler Services Reference\n       ABEND-HSPSERV SA22-7606-xx\" \"Contents Supervisor Query Service\"\n       for documentation on the CSVQUERY macro:\n\n         Z/oS 1.9 Link to GA22-7606-08:\n           http://publib.boulder.ibm.com/infocenter/zos/v1r9/index.jsp?\n           topic=/com.ibm.zos.r9.ieaa700/CSVQUERY.htm\n\n       CSVDYLPA Documentation:\n       See IBM Manual \"MVS Authorized Assembler Services Reference\n       ALE-DYN SA22-7609-xx\" \"CSVDYLPA - Provide Dynamic LPA Services\"\n       for documentation on the CSVDYLPA macro.\n\n         Z/oS 1.9 Link to GA22-7606-08:\n           http://publib.boulder.ibm.com/infocenter/zos/v1r9/index.jsp?\n           topic=/com.ibm.zos.r9.ieaa100/iea2a170529.htm\n\n\n    RCVT DATA AREA:\n\n    See RCVT dsect macro 'SYS1.MACLIB(ICHPRCVT)'\n\n    See IBM Manual \"Security Server RACF Data Areas GA22-7680-xx\"\n    for the RCVT (Racf Communication Vector Table) offsets:\n\n      Z/oS 1.9 Link to GA22-7680-09:\n        http://publib.boulder.ibm.com/infocenter/zos/v1r9/index.jsp?\n        topic=/com.ibm.zos.r9.ichc400/ichzc480102.htm\n\n\n      Z/oS 1.11 Link to GA22-7680-11:\n        http://publib.boulder.ibm.com/infocenter/zos/v1r11/index.jsp?\n        topic=/com.ibm.zos.r11.icha200/ichza2a0125.htm\n\n\n    SAMPLE INVOCATIONS OF EXEC ICH:\n\n       ICH ?\n       ICH membername                    (Prompts for Function)\n       ICH membername UPDATE\n       ICH membername DA(dsname)\n       ICH membername DA(dsname) UPDATE\n       ICH membername UPDATE DA(dsname)\n       ICH membername UPDATE TEST\n       ICH membername UPDATE SIMULATE\n       ICH membername UPDATE DA(dsname) TEST\n       ICH membername UPDATE DA(dsname) SIMULATE (same as previous)\n       ICH membername DELETE\n       ICH membername DELETE TEST\n       ICH membername DELETE SIMULATE\n       ICH membername REMOVE\n       ICH membername REMOVE TEST\n       ICH membername REMOVE SIMULATE\n       ICH membername REPOINT\n       ICH membername REPOINT TEST\n       ICH membername REPOINT SIMULATE\n\n    RETURN CODES:\n\n         0  - Successful Call to ICHLOADR\n         8  - Program ICHLOADR is not APF-Authorized\n         9  - CSVQUERY for Exit Module failed prior to CSVDYLPA call\n        10  - CSVQUERY for Exit Module failed after CSVDYLPA call\n        11  - Entry Point Address did not change after CSVDYLPA call\n        12  - Miscellaneous Errors\n\n\n EXAMPLE INVOCATION DISPLAY FROM EXEC 'ICH'\n ------------------------------------------\n\n %ICH  ICHRCX02 UPDATE\n\n **************************** Top of Data ******************************\n\n    2010.015         III   CCCC H   H     DYNAMIC RACF          Friday\n    14:40:00          I   C     H   H     EXIT UPDATE         January 15\n                      I   C     HHHHH     ASSISTANCE FOR           SYT\n    IPL Date:         I   C     H   H      MODULE               AD81/SYT\n  01/15/2010.015     III   CCCC H   H     ICHRCX02\n\n\n ICH      - Module      = ICHRCX02\n ICH      - Dsname      = SYS1.LPALIB\n ICH      - Function    = UPDATE\n ICH      - RCVT Offset = 000000A4\n ICH      - Test Parm   =\n\n ICHLOADR - V01.01.01 2010.015 14:40:00\n\n ICHLOADR - UPDATE   FUNCTION IS BEING PROCESSED.\n\n ICHLOADR - RACF EXIT MODULE IS ICHRCX02\n\n ICHLOADR - LOADLIB DATASET IS SYS1.LPALIB\n\n ICHLOADR - LPA UPDATE SUCCESSFUL FOR MODULE ICHRCX02\n\n ICHLOADR - OLD EP ADDRESS: 8589C8B8  NEW EP ADDRESS: BA4DE000\n\n ICHLOADR - EXIT ICHRCX02 RCVT POINTER ADDRESS: 00FB779C\n\n ICHLOADR - EXIT ICHRCX02 RCVT POINTER OFFSET:  000000A4\n\n ICHLOADR - EXIT ICHRCX02 WAS UPDATED AND REPOINTED SUCCESSFULLY.\n\n ICHLOADR - RETURN CODE = 0\n\n\n **************************** Bottom of Data ***************************\n\n\n))END OF HELP\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IEBANTP": {"ttr": 5637, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x89\\x10/\\x00\\x89\\x10/\\x11Y\\x00\\xee\\x00\\xee\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf4\\xf5\\xf5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1989-04-12T00:00:00", "modifydate": "1989-04-12T11:59:00", "lines": 238, "newlines": 238, "modlines": 0, "user": "FILE455"}, "text": "1   11/04/89\n                                                      IEBANTP   1/6.\n\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * *   ANALYZE/COPY TAPE/3480 UTILITY.   * * * * * * * *\n  * * * * * * * *                                     * * * * * * * *\n  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n\n  Purpose :    This is a MAP program which outputs a list giving the\n  ---------    description of all the logical files recorded on a\n               magnetic tape. The end of tape is assumed when\n               reading two consecutive tape-marks (unless empty\n               SL-file or special option for NL-file).\n\n               On request, the input tape can be copied, with the\n               availability to change the density and/or the volume\n               serial number of the output tape (be carefull when\n               changing density that the contents must not overflow\n               a tape reel capacity : multiple volumes are not\n               supported).\n\n               The program accepts only 9-tracks tapes (BLP option).\n\n  3480 Data Cartridge : Now, the program is adapted to run also with\n  --------------------- 3480 Data Cartridges (SYSUT1 and/or SYSUT2).\n\n  Check requested operation : With the introduction of the 3480 Data\n  --------------------------- Cartridge units, the program has been\n               enhanced to perform a validity check on the requested\n               operation (tapes and cartridges volumes may be now\n               protected against all or some users use).\n1   11/04/89\n                                                      IEBANTP   2/6.\n\n  Call of the program :\n  ---------------------\n\n  1. Tape analysis.\n\n         //ANAL      EXEC  PGM=IEBANTP\n         //SYSPRINT    DD  SYSOUT=A\n         //SYSUT1      DD  UNIT=TAPE,VOL=SER=......,DSN=...,       C\n         //                LABEL=(,BLP),DISP=OLD\n\n  2. Tape copy.\n\n         //COPY      EXEC  PGM=IEBANTP\n         //SYSPRINT    DD  SYSOUT=A\n         //SYSUT1      DD  UNIT=TAPE,VOL=SER=......,DSN=...,       C\n         //                LABEL=(,BLP),DISP=OLD\n         //SYSUT2      DD  UNIT=TAPE,VOL=SER=......,DSN=...,       C\n         //                LABEL=(,BLP),DISP=NEW\n         //SYSIN       DD  *  (optional : see selective copy)\n           ... file numbers ...\n         /*\n         //SYSCHECK    DD  SYSOUT=A  (optional : see selective copy)\n\n         Note : When SYSUT2 is a 3480 Data Cartridge, the true label\n                is indicated by the VOL=SER=...... DD-parameter.\n\n  Density and Volume Serial Number : Not applyable to 3480 (ignored\n  ---------------------------------- if specified).\n               A density and/or a new volume serial number can be\n         assigned to the output tape (SYSUT2) using the parameter's\n         field of the EXEC statement as follows :\n\n         //COPY      EXEC  PGM=IEBANTP,PARM='DEN=X,SER=NNNNNN'\n\n         or the short form :\n\n         //COPY      EXEC  PGM=IEBANTP,PARM='D=X,S=NNNNNN'\n\n         where : X = 2 for 800 bpi.    (not applyable to 3480)\n                     3 for 1600 bpi.\n                     4 for 6250 bpi.\n\n                 NNNNNN = new volume serial number.\n\n               If the density cannot be determined from SYSUT1 or\n         is not declared by the DEN= parameter, then the default of\n         1600 bpi is assumed for the copied tape (SYSUT2).\n1   11/04/89\n                                                      IEBANTP   3/6.\n\n  Bypass operator advice message : Always set when 3480 (ignored if\n  -------------------------------- specified).\n               When copying, the operator advice messages about\n         tapes correctly mounted (to get him a last chance against\n         contents destruction) may be suppressed as follows :\n\n         //...       EXEC  PGM=IEBANTP,PARM='...,NOVEROP,...'\n         or :\n         //...       EXEC  PGM=IEBANTP,PARM='...,N,...'\n\n  Block count (EURATOM modification) :\n  ------------------------------------\n               When copying standard labeled tapes (SYSUT1-SYSUT2),\n         one can ask to compute again and rewrite the block count\n         (number of physical records) in the trailer label (EOF1)\n         by specifying : PARM='...,BLKCOUNT' or PARM='...,B'.\n\n  Special use (EURATOM modification) :\n  ------------------------------------\n               Some applications in the centre produce no labeled\n         (NL) tapes (i.e. - laboratories analysis recorder) with a\n         large number of files (tape-marks). Often it is desirable\n         for further computations, to merge all these files in only\n         one (NL). This is done by the program when providing the\n         keyword COPYSKIP as in the example below :\n\n         //COPYSK    EXEC  PGM=IEBANTP,PARM='COPYSKIP'\n         or :\n         //COPYSK    EXEC  PGM=IEBANTP,PARM='C'\n         //SYSPRINT    DD  SYSOUT=A\n         //SYSUT1      DD  UNIT=TAPE,VOL=SER=......,DSN=...,       C\n         //                LABEL=(,BLP),DISP=OLD\n         //SYSUT2      DD  UNIT=TAPE,VOL=SER=......,DSN=...,       C\n         //                LABEL=(,BLP),DISP=NEW\n\n               The keyword COPYSKIP is accepted only when SYSUT2\n         is present (copy). It can be used in conjunction with the\n         keywords DEN and SER (this last is just for information\n         on the output list), and the keyword BLKCOUNT is ignored.\n1   11/04/89\n                                                      IEBANTP   4/6.\n\n  Archive (EURATOM modification) :\n  --------------------------------\n               Another modification to the program allows the copy\n         of an input tape after the contents of an output tape,\n         thus expanding the SYSUT2 tape.\n\n         //COPYAD    EXEC  PGM=IEBANTP,PARM='ADD,DEN=X,SER=NNNNNN'\n         or :\n         //COPYAD    EXEC  PGM=IEBANTP,PARM='A,D=X,S=NNNNNN'\n         //SYSPRINT    DD  SYSOUT=A\n         //SYSUT1      DD  UNIT=TAPE,VOL=SER=......,DSN=...,       C\n         //                LABEL=(,BLP),DISP=OLD\n         //SYSUT2      DD  UNIT=TAPE,VOL=SER=......,DSN=...,       C\n         //                LABEL=(,BLP),DISP=...\n\n               The SYSUT2 disposition first subparameter is OLD\n         if the tape is not passed from a previous step, otherwise\n         use MOD in order to left the tape positioned at the end,\n         thus gain time preventing the rewind.\n\n               The keyword ADD requires the keywords SER and\n         DEN to be present, the keyword BLKCOUNT is optionally\n         usable, and the keyword COPYSKIP is not accepted.\n\n  Selective copy (EURATOM modification) :\n  ---------------------------------------\n               Only with normal or archive copy operations, a list\n         of those desired files, to be copied from the SYSUT1 tape\n         on the SYSUT2 tape, may be supplied by the SYSIN input.\n\n         Card format : the files numbers can be specified in any\n                       order from col.1 up to col.72 included.\n                       Single (N) or range (N-NN) of files numbers\n                       must be separated each from the others by\n                       at least one blank. Each card starts new\n                       single or range information. As soon as an\n                       asterisk (*) is encountered, the rest of the\n                       card is considered comments.\n         Note : the files numbers refers to NL or SL files depending\n                on the automatic type recognition of the SYSUT1 tape.\n\n               Keywords COPYSKIP and BLKCOUNT are not allowed. You\n         may use a SYSCHECK DD-card if you want a check list.\n1   11/04/89\n                                                      IEBANTP   5/6.\n\n  Sequence numbers adjustment :\n  -----------------------------\n               The keywords V= and Q= may be used to set the\n         volume sequence number and the starting data-set sequence\n         number when copying standard labeled (SL) tapes only :\n\n         //COPYAD    EXEC  PGM=IEBANTP,PARM='...,V=NNNN,Q=PPPP,...'\n\n         where : NNNN is the desired volume sequence number (one to\n                     four numerics, value may be 1 to 9999).\n                 PPPP is the desired starting data-set sequence\n                     number (one to four numerics, value may be 1\n                     to 9999).\n         Note : these adjustments are automatically done when an\n                archive operation is requested.\n\n  Dump analysis :\n  ---------------\n               If a SYSANAL DD-card is supplied, then the program\n         uses it to dump the first record (for a maximum length of\n         1024 bytes) of each file encountered on the tape (SYSUT1).\n\n               If a SYSUDUMP or SYSABEND DD-card is present and\n         an unexpected error occurs reading the input tape (SYSUT1)\n         or writing the output tape (SYSUT2), a dump with abend code\n         U0001 is taken, otherwise only an I/O error message is\n         supplied.\n\n  Bypass input tape I/O error :\n  -----------------------------\n               Any I/O error (i.e. - data check) when reading the\n         input tape (SYSUT1) may be bypassed by specifying the\n         keyword FORCE. If a SYSERR DD-card is supplied, the\n         wrong record is dumped on it (for a maximum length of 1024\n         bytes), and when the operation is a copy tape, the record is\n         copied on the output tape (SYSUT2) as entered in memory.\n\n         //...       EXEC  PGM=IEBANTP,PARM='...,FORCE,...'\n         or :\n         //...       EXEC  PGM=IEBANTP,PARM='...,F,...'\n1   11/04/89\n                                                      IEBANTP   6/6.\n\n  Bypass consecutive tape-marks :\n  -------------------------------\n               Sometime, a no labeled (NL) tape may contain empty\n         files, so it is necessary to inform the program about this\n         situation. The approximative number of files, before two\n         consecutive tape-marks which is considered the end of tape,\n         may be supplied using the parameter's field of the EXEC\n         statement as below :\n\n         //...       EXEC  PGM=IEBANTP,PARM='...,EVEN=NNNNN,...'\n         or :\n         //...       EXEC  PGM=IEBANTP,PARM='...,E=NNNNN,...'\n\n         where : NNNNN is the expected files number (one to five\n                     numerics, value may be 1 to 99999).\n\n\n   *****************************************************************\n   REMARK :    you can build mixed NL and SL files tapes, but then,\n   ********    be carefull in any further processing of these tapes,\n               you probably will have troubles of course.\n   *****************************************************************\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IKJEEPTR": {"ttr": 5642, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0c\\x00W\\x01\\x053/\\x01\\x16\\x01_\\x01Q\\x00G\\x00\\r\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf7\\xf3\\xf1@@@'", "ispf": {"version": "01.12", "flags": 0, "createdate": "2005-11-28T00:00:00", "modifydate": "2016-01-15T01:51:57", "lines": 71, "newlines": 13, "modlines": 0, "user": "FILE731"}, "text": "          Documentation for the IKJTPVT control block\n          ------------- --- --- ------- ------- -----\n*\n*    Particular reference is given to the EESCB control block here.\n*    For further reference, see CBT File 731, member MODGEN.\n*\n*    The TPVT control block is mostly created by settings in the\n*     PARMLIB member, IKJTSOxx.\n*    The TPVT control block is not publicly documented by IBM.\n*    We have documented the TPVT and some other TPVT-related\n*     control blocks.  The console command D IKJTSO will display\n*     much of the contents of the TPVT.\n*    The EESCB control block is chained off the TPVT, and it points\n*     to names for TSO individual userlogs and to the currently used\n*     \"Broadcast Dataset\" name (default name is SYS1.BRODCAST).\n*    TPVT stands for TSO Parmlib Vector Table.\n*    EESCB stands for TSO SEND PARMLIB Control Block.\n*\n*    To display most of the contents of the EESCB control block,\n*     use console command D IKJTSO,SEND or our TSO command from\n*     CBT File 731 called EESCB.\n*\n*    Three versions of EESCB exist to date (until z/OS 1.13 at least).\n*\n*    v1 - ESA 5.2.2  to OS/390 1.3       IKJE1SCB\n*    v2 - OS/390 2.4 to z/OS 1.2         IKJE2SCB\n*    v3 - z/OS 1.3   and above.          IKJEESCB  (in SYS1.MODGEN)\n*\n*    The following instructions tell you how to get to the TPVT,\n*     and to other control blocks that are connected to the TPVT.\n*\n*    Notation:  j is like a LOAD instruction in assembler\n*               j10 means virtual storage, value hex 10\n*               j+9c means LOAD what is in hex 9c off the previous\n*                    address\n*               etc.\n*\n*    This notation is used by the LOOK TSO command to browse storage.\n*    LOOK can be found on CBT File 264, load module on CBT File 035.\n*\n*    You may need the authorized TSO command called UKEYCSA (File 264)\n*     to be able to use LOOK without its abending.  If you need UKEYCSA\n*     to allow allocation of Key 8 CSA in your system, please reset it\n*     to its previous value, after you've finished using LOOK.\n*     (This is relevant for z/OS 1.9 and higher.)\n*\naddress    control     control block                    assembler\n           block       full name                        instructions\n           acronym\n-------    -------     -------------                    ------------\nj10        CVT         Communication Vector Table       L rx,16\nj+9c       TSVT        TSO Vector Table                 L rx,X'9C'(,rx)\nj+4c       TPVT        TSO Parameter Vector Table       L rx,X'4C'(,rx)\n   --------------------------------------------------------------\n      The following are addresses pointed to in the TPVT.\n   --------------------------------------------------------------\nj+20       EESCB       TSO SEND PARMLIB Control Block   L rx,X'20'(,rx)\n*\n*    Some other pointers off the TPVT (see IKJTPVT in MODGEN, in\n*                                          CBT File 731).\n*\nj+14       CTLT        Common Storage copies of TSO Auth tables\nj+24       ALPL        Default ALLOC disposition (OLD or SHR)\nj+28       TPT         TSO TEST settings\nj+2c       INMXPARM    TSO Transmit (XMIT) parameters and settings\nj+30       IKJCNPRM    TSO CONSOLE command settings\nj+3c       IKJEFHCB    TSO Help dataset settings\n*\n*    Current settings for all of these, can be displayed using\n*     the console command:  D IKJTSO\n*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "INMXD": {"ttr": 5645, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00H\\x01\\x054o\\x01\\x19\\x11O\\t\\x17\\x00.\\x00\\r\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf7\\xf3\\xf1@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "2005-12-12T00:00:00", "modifydate": "2019-04-24T09:17:48", "lines": 46, "newlines": 13, "modlines": 0, "user": "FILE731"}, "text": ")F FUNCTION -\n  The INMXD TSO command is a means of displaying the fields of\n    the INMXPARM control block on an MVS system.\n\n    You can use the INMXD command to display the results obtained\n    by executing the CINMX command.  Use the INMXD command before\n    and after executing the CINMX command.  Or you can use it just\n    to check the current TRANSREC values in storage for this LPAR.\n\n)X SYNTAX  -\n    INMXD\n\n  REQUIRED - NONE\n  DEFAULT  - NONE\n  ALIAS    -\n\n)O OPERANDS -\n))None\n\n Sample Command Output\n\n INMXPARM - Display of Field Values\n --------   ------- -- ----- ------\n INMXPARM ADDR   113B0E40\n LENGTH          0100\n NJE COUNT       0001\n NJE START       113B0F30\n INMX VERS       02\n INIT WARN            50000\n WARN INTRVL          15000\n OUTLIMIT           5000000\n VIO UNIT LNG    08\n VIO UNIT        SYSALLDA\n CIPHER FLAG     40\n SYSOUT CLASS    *\n LOG NAME        MISC\n LOGSEL 1        .\n LOGSEL          LOG.\n LOGSEL SIZE     0005\n SYSCTL NAME\n SYSCTL SIZE     0000\n USRCTL NAME     .NAMES.TEXT\n USRCTL SIZE     000B\n SPOOL CLASS     B\n NODE/SMF 0001   NODENAME  SMF\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "JCLSET": {"ttr": 5889, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00B\\x01\\t\\x18\\x7f\\x01\\t\\x18\\x7f\\x103\\x00Q\\x00Q\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf4\\xf5\\xf2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2009-07-06T00:00:00", "modifydate": "2009-07-06T10:33:42", "lines": 81, "newlines": 81, "modlines": 0, "user": "FILE452"}, "text": ")F FUNCTION -\n     To provide access to various system symbols you can now use the\n     JCL SET statement.\n\n     This facility is provided via an IEFUJV exit routine that\n     substitutes the variable symbols found on JCL SET statements when\n     the job is read into the system.\n     Due to the timing of this substitution, the use of symbols that\n     are specific to a given system need to be used only with jobs that\n     are known to be read into the system where they will execute.\n\n     For example, if you use the &SYSNAME. symbol this will be changed\n     to the name of the system where the job was read.  This MAY not\n     be what you expect at execution time.\n     Also, if you have systems in different time zones, the use of\n     time related symbols may not be what you expect.\n\n     The above caveats are a few of the reasons that IBM has not\n     provided the use of system symbols for batch jobs.\n     So, please be aware of these restrictions and use at your own risk.\n\n)X SYNTAX -\n     // SET YOURSYM=&symbol.\n\n     Supported symbols will be substituted for the &SYMBOL field.\n\n     To abide by IBM symbol rules, please terminate the symbol\n     with a period.  The exit routine will allow a blank to be used\n     as a terminator but this may change in the future.\n\n     Date and time symbols can be altered by using addition and\n     subtraction.  This is done by specifying &SYMBOL+n. and\n     &SYMBOL=n.\n     Example:\n     // SET LASTWEEK=&ZJDATE-7.\n     This will give you the Julian date for 7 days prior to today.\n\n     The general rule for the \"Math\" process is that the number will\n     be in units of the symbol.\n     Date symbols will be adjusted by the number of days.\n     Year symbols will be adjusted by the number of years.\n     Month symbols will be adjusted by the number of months.\n     Hour symbols will be adjusted by the number of hours.\n     Minute symbols will be adjusted by the number of minutes.\n\n)O OPERANDS -\n     The following variables may be used on JCL SET statements.\n        &DDMMYY.\n        &DDMMYYYY.\n        &MMDDYY.\n        &MMDDYYYY.\n        &YYDDD.\n        &YYDDMM.\n        &YYMMDD.\n        &YYYY/DDD.\n        &YYYYDDD.\n        &YYYYDDMM.\n        &YYYYMMDD.\n        &ZDAY.\n        &ZDOW.\n        &ZHH.\n        &ZJDATE.\n        &ZJOBID.\n        &ZJOBNAME.\n        &ZMM.\n        &ZMONTH.\n        &ZMONTHCH.\n        &ZMOY.\n        &ZSMFID.\n        &ZSS.\n        &ZSTDYEAR.\n        &ZTIME.\n        &ZTIMEL.\n        &ZTIMET.\n        &ZWD.\n        &ZWEEKDAY.\n        &ZYEAR.\n\n     As well as the above internally defined symbols, all the symbols\n     displayed via \"D SYMBOLS\" can be used.\n     Most of these can be found in parmlib's IEASYMxx.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "KMBAPFLB": {"ttr": 5892, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00Y\\x01\\x19\\x12\\x0f\\x01\\x19\\x12\\x0f \\x06\\x00\\x17\\x00\\x17\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf5\\xf6\\xf6@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2019-04-30T00:00:00", "modifydate": "2019-04-30T20:06:59", "lines": 23, "newlines": 23, "modlines": 0, "user": "FILE566"}, "text": ")FUNCTION\n     KMBAPFLB IS A BATCH PROGRAM THAT WILL ADD OR REMOVE A LOAD\n     LIBRARY, TO, OR FROM, THE APF LIST.\n\n     THIS PROGRAM WILL ADD A DATASET TO THE APF LIST\n     THAT IS POINTED TO BY THE APFLIB DDNAME\n\n)SYNTAX      THIS IS A BATCH PROGRAM, AND HERE IS SAMPLE JCL:\n\n         //SBGOLOBK  JOB (ACCT#),S-GOLOB,\n         // NOTIFY=&SYSUID,\n         // CLASS=B,MSGCLASS=X\n         //*\n         //ADDAPF  EXEC PGM=KMBAPFLB\n         //*REMAPF EXEC PGM=KMBAPFLB,PARM='REMOVE'\n         //STEPLIB DD DISP=SHR,DSN=SYS1.W$$.LINKLIB  (authorized)\n         //APFLIB  DD DISP=SHR,DSN=SBGOLOB.LOAD\n\n --------------------------------------------------------------------\n         ADDED DYNAMIC APF SUPPORT\n\n  KBASS1 04/04/2011 ADDED 'REMOVE' PARAMETER TO REMOVE AN APF LIBRARY\n     //SB1      EXEC PGM=KMBAPFLB,PARM='REMOVE'\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "KONCAT": {"ttr": 5894, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x98\\x14/\\x00\\x98\\x14/\\x13\\x15\\x00,\\x00,\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf3\\xf5\\xf5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-05-22T00:00:00", "modifydate": "1998-05-22T13:15:00", "lines": 44, "newlines": 44, "modlines": 0, "user": "FILE355"}, "text": ")F FUNCTION:\n\nThis command will concatenate a specified data set either \"BEFORE\" or\n\"AFTER\" existing concatenations for the specified DD-name.\n)X SYNTAX:\n\n         KONCAT DDNAME DSN BEFORE  EVEN   MSG   NODEBUG\n                           AFTER   ONLY   NOMSG DEBUG\n                           REMOVE  VERIFY\n\n  Required     - DDNAME, DSNAME\n  Defaults     - BEFORE, ONLY, NOMSG, NODEBUG\n  Alias        - None\n\n  Examples     -\n\n          KONCAT ISPPLIB ISPF.PANELS\n\n             Concatenate userid.ISPF.PANELS before all the datasets\n             allocated to ISPPLIB.\n\n          KONCAT SYSPROC ISPF.CMDS AFTER\n\n             Concatenate userid.ISPF.CMDS after all the datasets\n             allocated to SYSPROC.\n\n          KONCAT ISPPLIB ISPF.PANELS REMOVE\n\n             Remove userid.ISPF.PANELS from the datasets allocated\n             to ISPPLIB.\n)O OPERANDS -\n\n))DDNAME   - Data Definition Name to use for the concatenation.\n))DSNAME   - Data Set Name to be (re)allocated to the DDNAME.\n))AFTER    - Optional; allocate DSNAME after other data sets.\n))BEFORE   - Optional; allocate DSNAME before other data sets.\n))EVEN     - Optional; reallocate DSNAME to DDNAME even if it is\n             already present.\n))ONLY     - Optional; allocate DSNAME to DDNAME only if it is not\n             already present.\n))MSG      - Display ALLOC diagnostic messages.  Default value.\n))NOMSG    - Disable \"MSG\" parameter.\n))DEBUG    - Show progress through KONCAT program.\n))NODEBUG  - Don't show progress through KONCAT program.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "LDS": {"ttr": 5896, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x005\\x01\\x00\\x05\\x8f\\x01\\x00\\x05\\x8f\\x157\\x00\\x13\\x00\\x13\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf4\\xf5\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-27T00:00:00", "modifydate": "2000-02-27T15:37:35", "lines": 19, "newlines": 19, "modlines": 0, "user": "FILE452"}, "text": ")F FUNCTION -\n     The LDS command is used list the attributes of a dataset.\n)X SYNTAX  -\n     LDS dsname(s) ALL DCB SPACE MEMBERS FROM(mem1) TO(mem2) VOL(volser)\n\n     REQUIRED  - dsname(s)\n\n     DEFAULTS  - none\n\n     EXAMPLE   - LDS MY.LOAD M FROM(LD) TO(M)\n)O OPERANDS\n     dsname(s) - The dataset name to be displayed.\n     ALL       - Display all information.\n     DCB       - Display DCB information.\n     SPACE     - Display allocation information.\n     FROM      - Display members beginning with this prefix.\n     TO        - Display members up to and including this prefix.\n     VOL       - Display dataset information for the dataset on a\n                 specifiec volume serial.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "LOADTEST": {"ttr": 5898, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00P\\x01\\x19\\x17\\x0f\\x01\\x19\\x17\\x1f\\x11\\x14\\x00\\xfa\\x00\\xfb\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf7\\xf3\\xf1@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "2019-06-19T00:00:00", "modifydate": "2019-06-20T11:14:50", "lines": 250, "newlines": 251, "modlines": 0, "user": "FILE731"}, "text": "LOADTEST TITLE 'LOADTEST - RELOAD AND/OR DISPLAY TSO TEST FIELDS'\n         SPACE 1\n  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n   Documentation:   This program is meant to be run as a batch\n                    program, APF authorized when it is used\n                    to reload the TEST parameters from TESTIN\n                    card input.\n\n\n   Function:   To display/change values of the TEST IKJTSOxx\n               PARMLIB settings as they are represented\n               internally in the TPT, TCT, SCT control\n               blocks.\n\n   JCL:\n\n   //SHOWTEST JOB ,'MY JOBCARD',CLASS=A,\n   //    MSGCLASS=X,NOTIFY=&SYSUID\n   //*\n   //LOADTEST EXEC PGM=LOADTEST\n   //STEPLIB  DD  DISP=SHR,DSN=MY.LOAD.LIBRARY\n   //SYSPRINT DD  SYSOUT=*\n   //SYSPRNT2 DD  SYSOUT=*\n   //TESTOUT  DD  SYSOUT=*      (LRECL=80 DATASET OR SYSOUT)\n   //TESTOUT2 DD  SYSOUT=*      (LRECL=80 DATASET OR SYSOUT)\n   //TESTIN   DD  DISP=SHR,DSN=IBMUSER.B.ASM(LOADTCT1)\n\n   SUBROUTINE:\n\n   LOADTN   -  PRODUCES REPORTS AT THE END OF PROCESSING.\n               LOADTN is a separate called program.\n\n   DD NAME DESCRIPTIONS:\n\n   SYSPRINT DD IS THE ONLY REQUIRED DDNAME, AND IT ALWAYS HAS\n   TO BE PRESENT.  IT PRODUCES A REPORT REFLECTING THE INITIAL\n   STATE OF THE TEST CONTROL BLOCKS.\n\n   SYSPRINT also contains any relevant messages if the TEST control\n            blocks have been changed (messages at the bottom).\n\n   TESTOUT  DD :  PRODUCES A CARD DECK IN TESTIN FORM, WHICH WILL\n                  REPRODUCE THE LOAD OF THE CURRENT TEST PARAMETERS\n                  (BEFORE ANY CHANGES OCCUR).\n\n   TESTOUT2 DD :  PRODUCES THE TESTOUT-TYPE CARD DECK, BUT AT THE\n                  END OF PROCESSING.  IF CHANGES HAVE BEEN MADE,\n                  THEY WILL BE REFLECTED HERE.\n\n   SYSPRNT2 DD :  SIMILAR REPORT TO SYSPRINT DD, BUT DONE AT THE\n                  END OF PROCESSING, SO CHANGES (IF ANY) ARE\n                  REPORTED.  THE SYSPRNT2 DD NAME DOES NOT CONTAIN\n                  ANY EXTRA MESSAGES, THE WAY SYSPRINT DOES.\n\n   THE TESTIN DD NAME IS NECESSARY IF YOU WANT TO CHANGE THE TEST\n   CONTROL BLOCKS.\n\n   THE TESTIN DD NAME CONTAINS CARDS TO CHANGE THE TEST FIELD\n   ENTRIES.  WHEN LOADTEST IS RUN WITH THE TESTOUT DD NAME, THEN A\n   PROPERLY FORMATTED TESTIN DECK IS CREATED FROM THE EXISTING TEST\n   PARMS THAT ARE CURRENTLY IN EFFECT.  THIS FILE MAY BE EDITED, AND\n   USED AS FURTHER TESTIN INPUT TO ANOTHER LOADTEST RUN.\n\n   TESTIN AND TESTOUT DD NAMES ARE NOW OPTIONAL.  IF TESTIN IS LEFT\n   OUT, THEN NO CHANGES TO THE TEST PARAMETERS ARE PERFORMED.\n   SYSPRNT2 AND TESTOUT2, WHICH SHOW THE STATE OF THE TEST FIELDS\n   AFTER ANY CHANGES WERE MADE, ARE OPTIONAL AS WELL.\n\n   IF TESTOUT IS LEFT OUT, THEN TESTIN-FORMATTED OUTPUT FOR THE\n   CURRENT TEST PARMS, IS LEFT OUT.\n\n   TESTIN DD REQUIREMENTS:  (BE VERY CAREFUL WITH THE COLUMNS)\n\n        The string --TCT-- from column 1\n        indicates that the following entries\n        will be put in the TCT table.\n        These names go from columns 1 thru 8.\n\n        The string --SCT-- from column 1\n        indicates that the following entries\n        will be put in the SCT table.\n        The command name goes from columns 1 thru 8.\n        The program module name which is executed\n        by that command goes from columns 9 thru 16.\n\n        You have to be very exact with the columns.\n\n        An asterisk (*) in column 1 causes that card\n        to be ignored.  So does a space in column 1.\n\n   THE TESTOUT DD NAME PRODUCES A PROPERLY FORMATTED TESTIN\n   FILE, TO RELOAD THE PREVIOUS TEST CONFIGURATION.\n\n   SAMPLE TESTIN DD:  (be careful with columns 1-8 and 9-16)\n\n   * OLD LOADTEST PARMS  (a sample)   (begin in column 1)\n   *---+----1----+-\n   --TCT--\n   TSOEXEC\n   SDSF\n   PDS\n   PDS86\n   --SCT--\n   F       IKJT9FIZ\n   FI      IKJT9FIZ\n   FIN     IKJT9FIZ\n   FIND    IKJT9FIZ\n   LB      IKJT9LBZ\n   LG      IKJT9LGZ\n\n\n    Function:   To display/change values of the TEST IKJTSOxx\n                PARMLIB settings as they are represented\n                internally in the TPT, TCT, SCT control\n                blocks.\n\n    DDNAME SUMMARY:\n\n    SYSPRINT - Produces a report of the CURRENT (before loading)\n               TEST information.  Contains diagnosis messages.\n\n    SYSPRNT2 - Produces a similar report to SYSPRINT, but at the\n               end of processing.  This report reflects changes,\n               if any, to the TEST parameters.\n\n    TESTOUT  - Converts the CURRENT TEST information into input\n               cards, to feed into another TESTLOAD invocation,\n               so the current information can be reloaded by\n               TESTLOAD (in case you want to back the TESTIN\n               changes out).\n\n    TESTOUT2 - Same as TESTOUT, but at end of procesing, and\n               reflecting any changes to the tables (if any)\n               that have been made.\n\n    TESTIN   - Cards to reload new TEST information into storage.\n\n  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n    RETURN CODES:   0 - SUCCESSFUL DISPLAY and/or SUCCESSFUL\n                        CHANGE.\n\n                    4 - Original tables were damaged, and TESTIN\n                        cards were available, so that new tables\n                        were constructed from the TESTIN cards.\n\n                    8 - TPT or TCT or SCT corrupted.  See error\n                        messages in the SYSPRINT DD name.  This\n                        can happen if there is no TESTIN card deck.\n\n                        (Hint:  You can create new TEST tables\n                                if there is a valid TESTIN deck.)\n\n                   16 - Program was not APF-authorized to make\n                        control block replacements.\n  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n   Change Log:\n     2016/08/07 - 1.0 - Initial version - Tested with TSO/E Version\n                        4.\n\n     2019/06/03 - 1.1 - Turned this into a batch program, to produce\n                        output compatible with the LOADTEST program.\n                        (DDNAME=TESTOUT)\n\n     2019/06/14 - 1.2 - Added TESTIN DD name, to allow reloading of\n                        the TEST tables.\n\n     2019/06/14 - 1.3 - TESTIN and TESTOUT DD names have been made\n                        optional.  If they are left out then their\n                        output is not produced.  If TESTIN is left\n                        out, then no changes to the TEST parameters\n                        are made, and the program does not have to\n                        be executed APF-authorized.  The SYSPRINT\n                        DD name always has to be there.\n                        Return code 16 if program not APF-authorized\n                        -and- the TESTIN DD is coded in the JCL.\n                        (I.e. you are trying to load a new table)\n\n     2019/06/18 - 1.4 - Take some steps to validate the TESTIN\n                        file entries.\n                        Allow the program to show the state of the\n                        file entries after any changes have been\n                        made.  DD names:  SYSPRNT2 and TESTOUT2\n                        correspond to SYSPRINT and TESTOUT, but\n                        they are created after the program has done\n                        any actions, when TESTIN has been coded.\n                        If no actions were performed, then SYSPRNT2\n                        and TESTOUT2 would not show changes.\n\n     2019/06/19 - 1.5 - Increased size of tables.  Removed size\n                        restriction of X'FF'.  They are somewhat\n                        bigger now.  See label WORKAREA for actual\n                        table size limits.\n\n                        If the old table is corrupted, and we have\n                        a good TESTIN card deck, then we can build\n                        a new table anyway.  (Return code = 4)\n\n  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n   Programming Notes:\n\n     The TEST command information from the IKJTSOxx member of\n     parmlib, is reflected in 3 control blocks:  TPT, TCT, SCT.\n\n     The TPT is pointed to by the TEST address at x'28' off\n     the beginning of the TPVT.  The TPT points to all the rest\n     of the information, as per the macro description below.\n\n\n              MACRO\n              IKJTPT\n     TPT      DSECT                         TPT Control block\n     TPT_ID   DS    C'TPT '                 Block id\n     TPT_LENGTH DS H                        Total length of c.b.\n     TPT_VERS DS    C                       TPT Version\n              DS    C                       Reserved X'00'\n              DS    F                       zeros\n     TPT_TCT_ENTRY DS A                     Address of TSOCMD c.b.\n     TPT_TCT_LENGTH DS F                    Length of TSOCMD c.b.\n     *                                      Length - 4 / 8 = #\n     TPT_SCT_ENTRY DS A                     Address of SUBCMD c.b.\n     TPT_SCT_LENGTH DS F                    Length of SUBCMD c.b.\n     *                                      Length - 4 / 16 = #\n              DS    3F\n     TCT_TEST DSECT\n     TCT_ID   DS    C'TCT '                 Block id\n     TCT_TSOCMD DS  CL8                     A TSOCMD\n     TCT_ENTRY_END DS 0C\n     *                                      The last entry is x'40'\n     SCT_TEST DSECT\n     SCT_ID   DS    C'SCT '                 Block id\n     SCT_SUBCMD DS  CL8                     A SUBCMD\n     SCT_PGM  DS    CL8                     A SUBCMD module name\n     *                                      The last entry is x'40'\n     SCT_ENTRY_END DS 0C\n              MEND\n\n     The TEST information in storage consists of 3 control blocks:\n\n     TPT  -  General information:  Points to the TCT (names of\n             programs) and the SCT (names of subcommands and the\n             subprogram names that they invoke).  Size = x'28'\n\n     TCT  -  List of programs which are callable from TEST or\n             TESTAUTH.   Size = variable\n\n     SCT  -  List of subcommands (first 8 characters) and the names\n             of the subprograms which they call (second 8 characters)\n                         Size = variable\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "LOCATE": {"ttr": 5903, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x0c\\x00\\x06\\x01\\x15\\x00_\\x01\\x15\\x00_\\x15'\\x00\\x1b\\x00\\x1b\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf6\\xf1\\xf2@@@\"", "ispf": {"version": "01.12", "flags": 0, "createdate": "2015-01-05T00:00:00", "modifydate": "2015-01-05T15:27:06", "lines": 27, "newlines": 27, "modlines": 0, "user": "FILE612"}, "text": ")F FUNCTION\n THE LOCATE COMMAND LOCATES A COMMAND FROM JPA, PLPA, TASKLIB, STEPLIB,\n LIBDEF ISPLLIB, ISPLLIB, DYNAMIC LINKLIST LIRBARIES, NUCLUES, SYSEXEC\n AND SYSPROC. IT DISPLAYS THE LOAD ADDRESS OF THE MODULE IF IT HAS\n ALREADY LOADED INTO THE MEMORY (IE JPA OR PLPA).\n\n SEARCH SEQUENCE\n      - JPA (JOB PACK AREA)\n      - LIBDEF ISPLLIB\n      - ISPLLIB\n      - TASKLIB\n      - STEPLIB\n      - F/MLPA\n      - PLPA\n      - DYNAMIC LINKLIST\n      - NUCLEUS\n      - USER LEVEL EXEC/CLIST   (IE SYSUEXEC AND SYSUPROC)\n      - APPLICATION LEVEL EXEC/CLIST\n      - SYSEXEC/SYSPROC\n\n)X SYNTAX -\n         LOCATE  MODULE/COMMAND\n\n  REQUIRED  - MODULE/COMMAND\n\n)O OPERANDS -\n  MODULE -    SPECIFIES THE NAME OF THE PROGRAM MODULE OR COMMAND.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LOGOPTS": {"ttr": 5905, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\t\\x005\\x00\\x811?\\x01\\x16\\x12?\\x11I\\x00n\\x00\\x0c\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf7\\xf3\\xf1@@@'", "ispf": {"version": "01.09", "flags": 0, "createdate": "1981-11-09T00:00:00", "modifydate": "2016-05-02T11:49:35", "lines": 110, "newlines": 12, "modlines": 0, "user": "FILE731"}, "text": ")F FUNCTION -\n\n  The LOGOPTS TSO command is an APF-authorized TSO command\n  which is designed to change (on or off) all values that are\n  controlled by the PARMLIB member IKJTSOxx with its LOGON\n  keyword.\n\n   >>>>           **** IMPORTANT NOTE ****\n   >>>>  The effect of this command (on an entire LPAR) is\n   >>>>  nullified only when you do a PARMLIB UPDATE(xx), SET\n   >>>>  IKJTSO=xx, or an IPL.  It affects ALL users who\n   >>>>  attempt to LOGON.  SO BE CAREFUL.  Its intent is to\n   >>>>  show you what happens when you change LOGON options,\n   >>>>  or to switch the current option temporarily.  It is\n   >>>>  not intended to be used in production systems.\n\n  Bits are set as follows for the following options:\n\n  X'08' -  Password Phrase Support\n  X'04' -  Applid Verification\n  X'02' -  LOGONHERE Support\n  X'01' -  Password Preprompt Support\n\n  Where are they set?  In two control blocks:\n   the TSVT and the TPVT.\n\n  The controls we are dealing with, comprise the\n  lower nibble of two control block fields, which\n  must match.  In the TSVT, the upper nibble\n  of the appropriate byte contains other\n  information, but the corresponding upper nibble\n  in the TPVT currently contains zeros.\n\n  The lower nibble in these two fields must match:\n\n  TSVT + x'5'   TSVTFLG1\n  TPVT + x'4C'  TPVTLOGON  (our terminology,\n                            not IBM's, although\n                            it seems logical to\n                            call it by this name.)\n\n  If you want to switch these settings temporarily,\n  then issue this APF-authorized TSO command: LOGOPTS,\n  using one of the valid parms.\n\n  DISPLAY ONLY, of the current settings, is done\n  either by not entering a parameter, or by entering\n  a parameter that is not S, A, H, or P.\n\n  To turn off a bit, suffix an F to the parameter:\n  For example:  LOGOPTS SF, AF, HF, or PF.\n\n  Bit settings are found in the TSVTFLG1 field in\n  the TSVT (TSO Vector Table) in the lower nibble,\n  and this nibble must match the corresponding\n  nibble in control block TPVT + X'4C'.\n\n  Bits are set as follows for the following options:\n\n  X'08' -  Password Phrase Support\n  X'04' -  Applid Verification\n  X'02' -  LOGONHERE Support\n  X'01' -  Password Preprompt Support\n\n  These are the LOGOPTS parameters:\n  ----- --- --- ------- ----------\n   S -  Password Phrase Support\n   A -  Applid Verification\n   H -  LOGONHERE Support\n   P -  Password Preprompt Support\n\n  USE OF THIS PROGRAM:  To turn a bit on, use the\n         following parms:  To turn a bit off, use\n         the same letter parm, followed by the\n         letter F, as described here:\n\n         PA   Service Activated            BIT   TO TURN\n         RM                                SET   OFF\n         --   -----------------            ---   -------\n  LOGOPTS S - Password Phrase Support     x'08'  SF - Off\n  LOGOPTS A - Applid Verification         x'04'  AF - Off\n  LOGOPTS H - LOGONHERE Support           x'02'  HF - Off\n  LOGOPTS P - Password Preprompt Support  x'01'  PF - Off\n\n  LOGOPTS (anything else) - to display the current setting\n                            of the TSVTFLG1 and TPVTLOGON\n                            bytes. (Display does not require\n                            APF-authorization.)\n\n\n)X SYNTAX  -\n       LOGOPTS  S       | SF       (Password Phrase Support)\n                A       | AF       (Applid Verification)\n                H       | HF       (LOGONHERE Support)\n                P       | PF       (Password Pre-prompt support)\n\n  REQUIRED - For changing bits, any of the permitted operands\n             For displaying the current settings, no parameter,\n               or else an invalid parameter.\n\n)O OPERANDS -\n))S         -  Turns Password Phrase Support ON.\n))A         -  Turns Applid Verification ON.\n))H         -  Turns LOGONHERE Support ON.\n))P         -  Turns Password Pre-Prompt Support ON.\n))SF        -  Turns Password Phrase Support OFF.\n))AF        -  Turns Applid Verification OFF.\n))HF        -  Turns LOGONHERE Support OFF.\n))PF        -  Turns Password Pre-Prompt Support OFF.\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "LPSCB": {"ttr": 6145, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x811?\\x01\\x05\\x10\\x9f\\x11\\x00\\x00\\x11\\x00\\x0c\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf3\\xf0\\xf0@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1981-11-09T00:00:00", "modifydate": "2005-04-19T11:00:00", "lines": 17, "newlines": 12, "modlines": 0, "user": "FILE300"}, "text": ")F FUNCTION -\n  THE LPSCB (LIST PSCB) COMMAND LISTS THE PROTECTED STEP\n  CONTROL BLOCK (PSCB) IN A TSO USER'S REGION.\n  IT OPTIONALLY LISTS THE USER PROFILE TABLE (UPT),\n    AND ALSO THE ECT.\n\n)X SYNTAX  -\n         LPSCB  CPPL/REAL UPT  ALL\n  REQUIRED - NONE\n  DEFAULTS - CPPL\n  ALIAS    - NONE\n\n)O OPERANDS -\n))CPPL      -  THE PSCB ADDRESS IN THE CPPL WILL BE USED.\n))REAL      -  THE PSCB ADDRESS IN THE JSCB WILL BE USED.\n))UPT       -  LISTS THE USER PROFILE TABLE TOO.\n))ALL       -  LISTS THE PSCB, THE UPT, AND THE ECT.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LWATMGR": {"ttr": 6147, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00Y\\x01\\x082o\\x01\\x082o!\\x10\\x00?\\x00?\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf7\\xf9\\xf7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2008-11-21T00:00:00", "modifydate": "2008-11-21T21:10:59", "lines": 63, "newlines": 63, "modlines": 0, "user": "FILE797"}, "text": ")F Purpose -\n     This program allows you to display and update the authorized\n     command tables that have been loaded into your address space.\n)X Syntax -\n         LWATMGR ADD      {table-name}   NAME(name)\n         LWATMGR BUILD    {table-name}   LIST(dsname\u00dd(member)\u00a8)\n         LWATMGR DELETE   {table-name}   NAME(name)\n         LWATMGR DISPLAY  {table-name}\n         LWATMGR RELOAD   {table-name}   LOADLIB(dsname)\n         LWATMGR REPLACE  {table-name}   NAME(old)  NEWNAME(new)\n         LWATMGR UPDATE   {table-name}   PARMLIB(dsname(member))\n\n   The table names are:    AUTHTSF\n                           AUTHCMD\n                           AUTHPGM\n                           NOTBKGND\n                Or \"ALL\" to process all of the above.\n)O Functions -\n))ADD   - This will add a new command or program name into the\n          specific table.\n\n   Example: AUTHTSF ADD AUTHPGM NAME(mypgmnm)\n\n))BUILD - This will re-create multiple tables at one time by\n          reading the 1st 8 bytes from the LIST data set.  The\n          LIST data set entries must follow specific identifier\n          records. \"---AP---\" for the AUTHTSF table, \"---E2---\"\n          for the AUTHCMD table, \"---E8---\" for the AUTHPGM table\n          and '---NS---' for the NOTBKGND table.  If a list\n          section within this input file contains no entries the\n          table will not be updated.\n          As the LIST data set only uses the 1st 8 bytes of each\n          record, the LRECL may be as little as 8.  This allows\n          for a lot of tables in a very small amount of space.\n\n   Example: AUTHTSF BUILD LIST(fb8.pds(list01))\n\n))DELETE - This will remove an existing command or program name from\n          the specific table.\n\n   Example: AUTHTSF DELETE AUTHPGM NAME(mypgmnm)\n\n))DISPLAY - This will display information about the various\n            authorization tables and their contents.\n            This function allows you to specify a table of \"ALL\" or\n            specify no table name at all which will default to \"ALL\".\n\n   Example: AUTHTSF DISPLAY AUTHCMD\n\n))RELOAD - This allows you to load loadmodule versions of the various\n           tables.  The input LOADMODULE library must have the tables\n           linked as alias names to IKJTABLS.\n\n   Example: AUTHTSF RELOAD LOAD(test.loadlib)\n\n))REPLACE - This allows you to replace an entry in a specific table.\n\n   Example: AUTHTSF REPLACE AUTHPGM NAME(iebcopy) NEWNAME(XYZcopy)\n\n))UPDATE - This allows you to update tables based on input with\n           synatax identical to the IKJTSOxx parmlib member.\n\n   Example: AUTHTSF UPDATE ALL PARMLIB('SYS1.PARMLIB(IKJTSO99)')\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PDS86": {"ttr": 6149, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"V\\x11\\x00\\t\\x00\\x97&\\x8f\\x01\\x19\\t_\\x14!'^\\x17T\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf8\\xf2@@@\"", "ispf": {"version": "86.17", "flags": 0, "createdate": "1997-09-25T00:00:00", "modifydate": "2019-04-05T14:21:09", "lines": 10078, "newlines": 5972, "modlines": 0, "user": "FILE182"}, "text": ")F FUNCTION -\n\n The -PDS86- command allows a TSO user to access and manipulate the\n directory and selected members of a PDS (partitioned data set) or\n a PDSE (partitioned data set extended).\n\n -PDS86- subcommands are available to display statistics on the data\n set directory and data set usage, modify the data set directory,\n modify the DCB attributes of the data set, compress the data set and\n validity check the data set.\n\n Additional subcommands can display portions of the member name\n directory, list occurrences of a search string in a member, restore\n a previously deleted member, create an alias for a member, display\n all aliases for a member, locate a member with desired attributes,\n and browse, view, list, delete, rename or update a member.\n\n For load data sets, subcommands are available to display and modify\n the linkage attributes of a module, list the history data for a\n module and map the CSECT structure of a module.\n\n For other partitioned data sets, subcommands are available to submit\n a JCL member, edit a member, print a member, compare two members in\n a data set and display ISPF statistics for a member.\n\n\n  -PDS86- command features:\n    Hexadecimal member names -- member names may be entered in hex for\n    any of the subcommands which accept member names (or partial member\n    names) as input.  Thus, for these subcommands, x'd7c4e2f9' and PDS9\n    are equivalent.  Also, note that x'333' and x'0333' are equivalent.\n\n    Default member names -- if no member name is entered for an\n    ATTRIB, BROWSE, DCF, DELETE, DIRENTRY, DSPRINT, EDIT, FIND,\n    FSE, HISTORY, IF, LIST, MAP, MEMBERS, MEMLIST, OUTCOPY, PRINTOFF,\n    REPLACE, REPRO, REVIEW, SUBMIT, SUBLIST, TSOEDIT, TSOLIST, VIEW,\n    VERIFY or VPSPRINT subcommand, the -PDS86- command will use the last\n    member name or member group entered for any of these subcommands.\n    In addition, note that the ALIAS, RENAME and RESTORE subcommands\n    also modify the default member name.\n\n    Member groups -- the above subcommands which allow default member\n    names also accept ranges, patterns and combinations of member\n    names:\n      1.  A member name range is of the form name1:name2, which selects\n          members based on character string ranges in their names.\n      2.  A pattern member name is of the form name1/name2, which\n          selects members based on character sting matches in their\n          names.\n      3.  A combination member name is of the form name1*name2, which\n          selects members based on the range name1:name1 and on the\n          pattern name2 in the remainder of the member name.\n\n    Member lists -- the above subcommands which allow default member\n    names also allow lists of member names which can be composed of\n    normal member names and member group names.  When a member list is\n    used, the subcommand receives control separately for each member\n    specification in the list.\n\n    Extended HELP -- additional help for numbered -PDS86- messages\n    is available in the HELP data set; also, for warning and error\n    messages, a .? subcommand may be entered to request explanations\n    of the last few messages received.\n\n    Sequential data sets -- the BROWSE, COPY, DCF, DSPRINT, EDIT,\n    FIND, FIXPDS, FSE, LIST, PRINTOFF, REPLACE, REVIEW, SUBMIT,\n    TSOEDIT, TSOLIST, VIEW, VERIFY and VPSPRINT subcommands are also\n    defined for sequential data sets.  The documented syntax is\n    unchanged except that no data is entered corresponding to any\n    member name position.\n\n    Subcommand name abbreviations -- subcommand names can be\n    abbreviated to the first few characters of the subcommand name.\n    Subcommand names are scanned in the order of output from the\n    OPTIONS subcommand; the first match between the entered name\n    and the subcommand name table is used.\n)X SYNTAX -\n     -PDS86- FILE(ddname) NUMBER(numb) XISPMODE /\n              dsn VOLUME(name) VOLSET(name) SHR/OLD XISPMODE\n              *** optionally followed by:  subcommand operands\n\n ALIASES  - none.\n DEFAULTS - SHR\n REQUIRED - FILE(ddname) or dsname\n)O OPERANDS -\n  dsn          - specifies the data set name.  If the data set name is\n                 not entered in quotes ('), your TSO PREFIX will be\n                 appended to the start of the entered data set name.\n\n                 Note that if your system has password security, you\n                 may enter your data set password after a slash (/)\n                 and the data set name.  The syntax is: dsn/password\n\n\n))FILE(ddname) - specifies the data set is already allocated with the\n                 provided ddname.  Note that only disk data sets are\n                 supported.  If the FILE keyword is used, dsname,\n                 SHR/OLD, VOLSET and VOLUME should not also be used.\n\n                 However, if the data set is concatenated, the SHR\n                 or OLD keyword may be used since -PDS86- will\n                 reallocate the data set.\n))NUMBER(numb) - for use with FILE only, numb defaults to 1; specifies\n                 the concatenation number desired for the ddname\n                 identified.  If numb is larger than the number of\n                 concatenated data sets, the last data set in the\n                 sequence will be used.\n))VOLUME(name) - specifies the volume name on which the data set\n                 resides.  If a volume name is entered, SYSALLDA is\n                 assumed as the unit name; otherwise, the unit name\n                 from the catalog is used.\n\n                 Note:  this parameter should be used if the data set\n                 is not cataloged or if the catalog entry is not to be\n                 used.  To use the catalog for a CHANGE subcommand\n                 even if VOLSET is in effect, you may enter VOLUME(*).\n))VOLSET(name) - specifies a default volume name for data set\n                 references.  For example, if VOLSET(NEWRES) were\n                 entered, subsequent CHANGE subcommands with a data\n                 set name and no VOLUME parameter will assume a\n                 VOLUME(NEWRES) parameter.\n\n                 Note:  this parameter should be used if a default\n                 volume is desired.  To nullify the effect of VOLSET,\n                 enter VOLSET(*) on a subsequent CHANGE subcommand.\n\n))SHR          - specifies that the data set is to be allocated with\n                 a disposition of SHR.\n))OLD          - specifies that the data set is to be allocated with\n                 a disposition of OLD to prevent the use of this data\n                 set by other users.\n))XISPMODE     - may be used to request line mode when -PDS86- is\n                 invoked under ISPF.\n))SUBCOMMAND   - specifies that -PDS86- is not to process subcommands;\n                 only the single subcommand entered and any of its\n                 operands will be processed (ISPMODE and MEMLIST are\n                 exceptions since they may be used to set the initial\n                 processing mode).\n\n                 Note: if a subcommand is entered on the command\n                 line, no YES/NO prompting will be provided.\n))OPERANDS     - specifies any desired operands for a subcommand\n                 entered on the primary command line.\n)S Subcommands:\n   %cmem operands  - execute -PDS86- subcommands from the CLIST CMEM\n   ATTRIB xx       - list attributes of member or module XX\n   ATTRIB xx reus  - assign the reusable linkage attribute to module XX\n   ALIAS xx yy     - add an alias to member XX called YY\n   AMBLIST xx      - list load module XREF and IDR info for module XX\n   ABE xx          - edit member XX with ABE\n   BROWSE xx       - browse member XX with ISPF\n   CHANGE zzz      - switch to the data set ZZZ\n   COBANAL xx      - list COBANAL load module analysis for module XX\n   COMPARE xxx yyy - compare members XXX and YYY with TSO COMPARE\n   COMPRESS        - compress the data set\n   CONDEND         - end -PDS86- if warning or error messages\n   CONTROL noprom  - do not prompt for yes or no inputs\n   COPY P7/ lib.xy - copy members containing P7 to data set LIB.XY\n   DISPLAY rr tt   - display member names in the range RR thru TT999999\n   DCF xx          - script a hardcopy of member XX with TSO SCRIPT\n   DIRENTRY xx     - dump the directory entry for member XX\n   DISASM xx       - disassemble load module XX\n   DELETE xx       - delete member XX\n   DLINK xx        - reconstruct object code for module XX\n   DSNAME tso      - display the current allocation in TSO format\n   DSPRINT xx prt  - print a hardcopy of member XX with TSO DSPRINT\n   EDIT xx         - edit member XX with ISPF\n   END             - terminate the -PDS86- command\n   EDREC           - control ISPF edit recovery\n   EXEC ccc        - execute -PDS86- subcommands from the CLIST CCC\n   FIND xx =fff=   - list occurrences of the string FFF in member XX\n   FIXPDS exp(30)  - add 30 directory blocks to the data set\n   FSE xx          - edit member XX with TSO FSE\n   HELP sss        - list the HELP entry for subcommand SSS\n   HISTORY xx      - list HISTORY data for module XX\n   IF mvs/ rent    - locate the ..MVS.. modules marked as reentrant\n   ISPF 3.3        - invoke the ISPF primary panel with option 3.3\n   ISPMODE         - enter ISPF session display mode\n   ISPXEQ la open  - entry mode display when invoking -PDS86-\n   LIST xx         - display member XX\n   LMA xx          - list Debug Tool load module analysis for module XX\n   LOAD xx pds     - load pds from xx IEBUPDTE member stream\n   MAP xx short    - map the CSECT structure of module XX in short form\n   MATCH pds       - match pds directory and data to current pds\n   MEMBERS         - display the current member group\n   MEMLIST         - enter ISPF member list mode\n   MXIBAT          - display system information with the MXI program\n   OFFLOAD * seq   - offload members to the SEQ data set\n   OPTIONS         - display the menu of -PDS86- subcommands\n   OUTCOPY xx      - output an IEBCOPY select statement for member XX\n   PATTERN pp dd   - display all member names containing PP and DD\n   PRINTOFF xx     - print a hardcopy of member XX with TSO PRINTOFF\n   PTSEXP xx seq   - expand compacted SYSMOD member XX to SEQ data set\n   RECALL          - display or reenter the previous subcommand\n   RENAME xx yy    - rename member XX to YY\n   REPLACE x /y/z/ - replace string Y with string Z in member X\n   REPRO xx        - reconstruct member XX\n   RESTORE xx      - resurrect member XX\n   REVIEW xx       - browse member XX with TSO REVIEW\n   SMPGEN : mac    - create SMP/E controls for all members\n   SRCHFOR xx 'ss' - list occurrences of the string SS in member XX\n   SUBMIT xx       - submit JCL member XX with TSO SUBMIT\n   SUBLIST xx/     - form a member subgroup with members containing XX\n   SVC xxx         - Displays the current SVC table entry for SVC XXX\n   TRKMAP volume   - display track map for volume using DISKMAP program\n   TSO yy z1 z2    - invoke the TSO command YY using operands Z1 and Z2\n   TSOEDIT xx      - edit member XX with TSO EDIT\n   TSOLIST xx      - display member XX with TSO LIST\n   USAGE           - list directory and data set statistics\n   VIEW xx         - view member XX with ISPF\n   VERIFY          - validity check the data set\n   VPSPRINT xx prt - print a hardcopy of member XX with TSO VPSPRINT\n   VPDSE           - verify a PDSE directory structure\n   XMIT P86/ drk   - transmit members containing P86 to nickname DRK\n\n   Additional HELP only entries for -PDS86-:\n   ABEND           - explains ABEND processing\n   ATTN            - explains attention handling\n   DEFINE          - defines member and data set terminology\n   DIALOG          - explains the relationship to ISPF services\n   GROUPS          - explains member groups and name forms allowed\n   LIMITS          - documents several -PDS86- limitations\n   UPDATE          - explains data set protection and SHR updates\n   MESSAGES        - documents -PDS86- program messages.\n   H MS MS(pds999) - explains the PDS999E program message\n\n   Additional HELP only entries for -PDS86- (ISPMODE only):\n   CAX             - documents Active Catalog Display\n   LISTA           - documents List Allocation Display\n   LISTC           - documents List Files Display\n   LISTV           - documents List Volumes Display\n   SET             - documents Set Defaults for Dialog Functions\n   TCT             - documents PDS/TSO Command Table\n   SHOW            - documents ISPMODE Session Log(s)\n=ABE=AB\n)F  Example -     ABE mema subcmds\n\n The ABE subcommand invokes the ABE editor to edit a member.\n\n  ABE is an acronym for \"A Better Editor\".\n\n  The ABE editor is an extremely sophisticated text editor which\n    is written in PL1.  ABE requires the PL1 Optimizing Compiler\n    Transient Library for its execution.\n\n  ABE is a public-domain product, and may be obtained either from a\n    NaSPA V.I.P. MVS tape, NaSPA, Milwaukee, WI. (414) 423-2420, or\n    from the author, Tom G. Smith, Kimberly-Clark, Neenah, WI.\n    (414) 735-2174.\n\n  ABE also has an AID facility which guides the user to where he\n    wants to go, while using this editor.\n\n  PDS includes an excerpt from the TSO help that is offered with\n    the ABE product.  This is a separate member in this install\n    dataset called ABEHELP.  Much more detailed help comes with the\n    ABE product as shipped.  The help information in ABEHELP is not\n    complete or self-contained.  It is intended only to show the\n    subcommands that are possible to use upon initial entry to the\n    ABE editor.\n\n **** (If you are actually using ABE, delete these 2 lines and copy\n ****  member ABEHELP below. )\n\n ALIASES  - none.\n DEFAULTS - none.\n REQUIRED - none.\n=ATTRIB=A=AT=ATT=ATTR=ATTRI\n)F  Example -     ATTRIB mema:memb rent reus refr\n\n The ATTRIB subcommand lists the attributes of a member.\n\n ***LOAD*** If the data set is a load library ***LOAD***  --\n The following linkage editor attributes are identified:\n   AMODE     - addressing mode (if AMODE is not 24 or RMODE is not 24)\n   AUTH      - APF authorized\n   DC        - downward compatible (the module can be reprocessed by\n               a level E linkage editor).\n   LOAD ONLY - only loadable (OL -- the module can be brought into main\n               storage only with a LOAD MACRO)\n   NOT EDIT  - not editable (the module cannot be linkage edited)\n   NOT EXEC  - not executable (the linkage editor noted an error and\n               LET processing was not requested)\n   OVERLAY   - overlay load module structure\n   PAGE      - page alignment required\n   REFR      - refreshable (replaceable by a new copy during execution)\n   RENT      - reentrant (executable by several tasks simultaneously)\n   REUS      - reusable (executable by several tasks in serial order)\n   RLD error - if there is a mismatch between the directory RLD/CONTROL\n               field and the first RLD entry of OS/VS linked modules\n   RMODE     - residence mode (if RMODE is not 24 or AMODE is not 24)\n   SCTR      - scatter load module structure\n   SSI       - SSI information in hexadecimal\n   TEST      - linked with the TEST option\n\n In addition, the ATTRIB subcommand can add or delete several linkage\n attributes for a load module.  When the ATTRIB subcommand is changing\n a module's attributes and the module is reentrant, the reusable\n attribute is also added as is done by the linkage editor.\n\n If a main module is assigned a RMODE or AMODE value, any associated\n alias directory entries are updated to reflect the same RMODE value\n and the main module's AMODE value.\n\n If the module is an alias (unless NOALIASINFO is specified or\n CONTROL NOALIASINFO is in effect), the name of any corresponding\n main member will be displayed if it exists; otherwise, the module\n name from the alias directory entry (the main module name at the\n time the alias was created) will be displayed.\n\n If the module is not an alias (unless NOALIASINFO is specified or\n CONTROL NOALIASINFO is in effect), the name of any corresponding\n alias members and any apparent aliases will be displayed.\n\n The ATTRIB subcommand has a single-line output format that is\n available for load modules; to use this format, enter SHORT as an\n ATTRIB keyword.  Note: if this format message is requested, many\n standard module checks are not performed and an incorrectly\n created or modified load module will not be detected.\n\n Caution: this subcommand modifies the data set if any attribute\n modifications are specified.  To ensure data set integrity, you\n should allocate the data set as OLD or be aware of the data set\n update protection provided by the -PDS86- command for SHR\n allocations (for details, enter HELP UPDATE).\n\n ***SOURCE*** If the data set is not a load library ***SOURCE***  --\n ISPF statistics are displayed for members last saved by ISPF edit,\n SSI information can be added or changed before being displayed and\n alias information is displayed as follows:\n   A.  If the member is an alias, it can be converted to a main\n       member with the UNALIAS keyword.\n   B.  If the member is an alias, an -A is displayed after the member\n       name; unless NOALIASINFO is specified or CONTROL NOALIASINFO\n       is in effect, the name of any corresponding main member will\n       also be displayed.\n   C.  If the member is not an alias and if ALIASINFO is specified,\n       the name of any corresponding alias members and any apparent\n       aliases will be displayed.\n   D.  If the member has ISPF statistics or SSI information, it can\n       be deleted by using the NONE keyword.\n   E.  If the member does not have ISPF statistics, they may be added\n       by using the ADDSTATS keyword.  ADDSTATS with the EXTEND keyword\n       will add extended ISPF statistics (supported in z/OS 1.11).\n   F.  If the member has directory information in ISPF format, the\n       keywords VER, MOD, ID/USERID, CREATED, MODIFIED/LAST, TIME,\n       and SECS/SS can be specified to modify ISPF statistics.\n   G.  If the LONG operand is specified, ISPF size statistics will be\n       displayed in 99,999,999 format.\n)X SYNTAX -\n     ATTRIB  member  AMODE24/AMODE31/AMODE64/AMODEANY\n                     AUTH/NOAUTH  or  APF/NOAPF\n                     DC/NODC\n                     EDIT/NOEDIT\n                     ENTRY(externalname)\n                     EXEC/NOEXEC\n                     LOADONLY/NOLOADONLY\n                     PAGE/NOPAGE\n                     REFR/NOREFR\n                     RENT/NORENT\n                     REUS/NOREUS\n                     RLDFIX/NORLDFIX\n                     RMODE24/RMODEANY\n                     SSI(hxdata)/NOSSI\n                     UNALIAS\n                     NONE / ADDSTATS\n                     EXTEND\n                     VER(nn) / MOD(mm) / ID(who) / USERID(who)\n                       CREATED(mm/dd/yy) MODIFIED(mm/dd/yy)\n                       LAST(mm/dd/yy) TIME(hhmm) SECS(ss)\n                     LKEDDATE/NOLKEDDATE\n                     ALIASINFO/NOALIASINFO\n                     SHORT\n                     LONG\n\n ALIASES  - A, AT, ATT, ATTR, ATTRI, ATTRIB\n DEFAULTS - for load or alias members:  member,   LKEDDATE,   ALIASINFO\n            for other members:          member, NOLKEDDATE, NOALIASINFO\n REQUIRED - none.\n)O OPERANDS -\n  member   - optional, specifies the name of the member(s) whose\n             attributes are to be displayed or the name of the load\n             module(s) whose attributes are to be updated.\n\n             Default member names, member lists, member name\n             ranges and member name patterns are allowed; for\n             more information, enter HELP GROUP.\n\n  The following attributes can be modified:\n))AMODE24     -  change addressing mode to 24\n))AMODE31     -  change addressing mode to 31\n))AMODE64     -  change addressing mode to 64\n))AMODEANY    -  change addressing mode to ANY\n))AUTH        -  authorize the module with APF\n))NOAUTH      -  remove APF authorization from the module\n))APF         -  authorize the module with APF\n))NOAPF       -  remove APF authorization from the module\n))DC          -  indicate that the module is downward compatible\n))NODC        -  indicate that the module is not downward compatible\n))EDIT        -  allow linkage editing of the module\n))NOEDIT      -  disallow linkage editing of the module\n))ENTRY(name) -  change the entry point address to the external\n                 symbol specified\n))EXEC        -  allow execution of the module\n))NOEXEC      -  disallow execution of the module\n))LOADONLY    -  allow module use only by a LOAD MACRO\n))NOLOADONLY  -  allow module use by any means\n))PAGE        -  require page alignment for the module\n))NOPAGE      -  allow any alignment for the module\n))REFR        -  add the refreshable attribute\n))NOREFR      -  remove the refreshable attribute\n))RENT        -  add the reentrant (and reusable) attribute\n))NORENT      -  remove the reentrant attribute\n))REUS        -  add the reusable attribute\n))NOREUS      -  remove the reusable attribute\n))RLDFIX      -  change the directory's RLD/CONTROL count to match\n                 the value in the first RLD entry for modules linked\n                 since OS/VS\n))NORLDFIX    -  do not modify the directory's RLD/CONTROL count\n))RMODE24     -  change residence mode to 24\n))RMODEANY    -  change residence mode to ANY\n))SSI(hxdata) -  add or change the SSI information for the member.  If\n                 less than 8 digits are entered, leading digits on the\n                 left will be assumed.\n))NOSSI       -  remove any SSI information for the member\n))UNALIAS     -  requests that an alias directory entry be converted\n                 to a main entry.  Warning: if a main entry already\n                 exists for a converted alias entry, you will have\n                 an \"apparent alias\"; this situation can be detected\n                 by a VERIFY subcommand or ATTRIB with the ALIASINFO\n                 keyword.\n))NONE        -  for source members, NONE may be used to remove\n                 ISPF statistics or any SSI information; otherwise,\n                 NONE is equivalent to entering: AMODE24, NOAUTH,\n                 NODC, EDIT, EXEC, NOLOADONLY, NOPAGE, NOREFR,\n                 NORENT, NOREUS, NOSSI and RMODE24.\n\n                 Note:  NONE takes effect first; any additional\n                 parameters override corresponding NONE parameters.\n\n))ADDSTATS    -  for source members, add ISPF statistics\n))EXTEND      -  add extended ISPF statistics (used with ADDSTATS)\n))VER(nn)     -  for members with ISPF statistics, may be used to\n                 to change the ISPF version number.\n))MOD(mm)     -  for members with ISPF statistics, may be used to\n                 to change the ISPF modification level.\n))ID(who)     -  for members with ISPF statistics, may be used to\n                 to change the last modifier's userid.\n))USERID(who) -  for members with ISPF statistics, may be used to\n                 to change the last modifier's userid.\n))CREATED(..) -  for members with ISPF statistics, may be used to\n                 to change the created date.\n))MODIFIED(..)-  for members with ISPF statistics, may be used to\n                 to change the modified date.\n))LAST(..)    -  for members with ISPF statistics, may be used to\n                 to change the modified date.\n))TIME(hhmm)  -  for members with ISPF statistics, may be used to\n                 to change the modified time.\n))SECS(ss)    -  for members with ISPF statistics, may be used to\n                 to change the modified time.\n\n))LKEDDATE    -  provide the date of the last linkage edit\n))NOLKEDDATE  -  do not provide the date of the last linkage edit\n))ALIASINFO   -  provide the names of any alias or main members\n))NOALIASINFO -  do not provide the names of any alias or main members\n))SHORT       -  display single-line output format for load modules\n))LONG        -  display ISPF size statistics in 99,999,999 format\n=ALIAS=AL=ALI=ALIA\n)F  Example -     ALIAS mainmem aliasmem\n\n  The ALIAS subcommand assigns an alias name to a member.\n\n  If the data set is not a load library, the alias name may be used\n  as an alternate name for the identified member.\n\n  If the data set is a load library, then if the alias name is an\n  imbedded external name within the load module, that external name\n  will be used as the alias entry point; otherwise, the entry point\n  of the named member will be used as the alias entry point.\n\n  Caution: this subcommand modifies the data set. To ensure data set\n  integrity, you should allocate the data set as OLD or be aware of\n  the data set update protection provided by the -PDS86- command for\n  SHR allocations (for details, enter HELP UPDATE).\n)X SYNTAX -\n     ALIAS  memname aliasname\n\n ALIASES  - AL, ALI, ALIA, ALIAS\n DEFAULTS - none.\n REQUIRED - memname, aliasname\n)O OPERANDS -\n  memname   - specifies the member to which an alias is to be assigned.\n\n  aliasname - specifies the alias name to be assigned.  Note that this\n              alias name becomes the -PDS86- default member name.\n=AMBLIST=AMBLI=AMBL=AMB=AM\n)F  Example -     AMBLIST mema:memb\n\n The AMBLIST subcommand invokes the IBM AMBLIST program to list a\n load module map, cross-reference map, and CSECT identification\n records (IDR).  Optionally, a list of the control and text records\n with the ESD and RLD records can be displayed.\n\n The system's pasta maker. . .  take a lump of dough, send it\n through AMBLIST, and you come out with beautiful spaghetti!\n\n)X SYNTAX -\n     AMBLIST  memgroup\n                   XREF/BOTH\n\n ALIASES  - AM, AMB, AMBL, AMBLI, AMBLIS, AMBLIST\n DEFAULTS - XREF\n REQUIRED - memgroup.\n)O OPERANDS -\n  memgroup      - specifies the name of the load module(s)\n                  for which a module map, cross-reference map,\n                  and CSECT IDR list is to be produced.\n\n                  Default member names, member lists, member name\n                  ranges and member name patterns are allowed; for\n                  more information, enter HELP GROUP.\n\n))XREF       - specifies that a module map and a cross-reference\n               map be displayed.\n))BOTH       - show MODLIST (Control/Text/ESD/RLD records)\n               information in addition to XREF maps.\n=BLK3380=BLK338\n)F  Example -     BLK3380 133\n\n  The BLK3380 command computes an optimal blocksize for a data set\n  to be placed on a 3380 disk pack.  The program output includes\n  the following reports:\n     1.  A summary blocksize report for the given lrecl and key\n         length which includes the recommended blocksize to use.\n     2.  A recommended data set space allocation.\n     3.  A optional track capacity report for the provided key length.\n\n  The recommended blocksize value is for data sets in which the\n  predominant access is sequential; for data sets where random\n  access time is critical or the usual access is random, a small\n  blocksize (500-2000 bytes) should probably be used.\n\n  The recommended blocksize will usually tend to be near a half-track\n  figure as this is considered to be the most efficient in terms of\n  the trade-offs among buffer size, secondary storage requirements,\n  channel use, number of input/outputs and overall processing time.\n  This figure is only a general guide; for maximal efficiency\n  considering other factors, study the generated blocksize summary\n  report or a track capacity report.\n\n  The program's recommendations assume a fairly large amount of data\n  is to be stored; data sets which occupy only a few tracks should\n  probably be placed in partitioned data sets.  In cases where this\n  is not feasible, the use of a small blocksize (2400 - 4000 bytes)\n  may be a good alternative practice.\n)X SYNTAX -\n     BLK3380  lrecl  KEYLENGTH(keylen)\n                       TRACKCAP / NOTRACKCAP\n                       BLKSIZE(blklen)\n                       NUMBER(recnum) / RECORDS(recnum)\n                       VERIFY\n\n ALIASES  - BLK338, BLK3380\n DEFAULTS - KEYLENGTH(0), NOTRACKCAP,\n            BLKSIZE(RECOMMENDED VALUE), NUMBER(100000)\n\n REQUIRED - lrecl\n)O OPERANDS -\n 'lrecl'    - the logical record length of the data which is to be\n              placed in the data set.\n))KEYLENGTH(keylen)\n            - the key length, in bytes, of the keys to be used in the\n              data set.  the maximum legal key length is 255.\n))TRACKCAP\n            - specifies a track capacity report is to be provided for\n              the device using the specified (or default) key length.\n\n              Note that a track capacity report is also provided if\n              notrackcap is not specified and lrecl exceeds the maximum\n              blocksize for a track or BLKSIZE exceeds the maximum\n              blocksize for a track.\n))NOTRACKCAP\n            - specifies that a track capacity report is not desired.\n))BLKSIZE(blklen)\n            - the blocksize to use for the allocation computation;\n              if blksize is not entered (or zero is entered), the\n              program's recommended blocksize will be used.\n))NUMBER(recnum)\n            - number of logical records that will be in the data set.\n))RECORDS(recnum)\n            - number of logical records that will be in the data set.\n))VERIFY\n            - specifies that the MVS \"TRKCALC\" routine is to be used to\n              verify track capacity calculations.  if verify is used,\n              the number of calls to \"TRKCALC\" to determine a track\n              capacity table is output at the end of the output.\n\n              Note: with verify on, a minimum of 34 calls is needed to\n              determine a track capacity table; otherwise a minimum of\n              17 calls is needed to determine the track capacity table.\n=BLK3390=BLK339\n)F  Example -     BLK3390 121\n\n  The BLK3390 command computes an optimal blocksize for a data set\n  to be placed on a 3390 disk pack.  The program output includes\n  the following reports:\n     1.  A summary blocksize report for the given lrecl and key\n         length which includes the recommended blocksize to use.\n     2.  A recommended data set space allocation.\n     3.  A optional track capacity report for the provided key length.\n\n  The recommended blocksize value is for data sets in which the\n  predominant access is sequential; for data sets where random\n  access time is critical or the usual access is random, a small\n  blocksize (500-2000 bytes) should probably be used.\n\n  The recommended blocksize will usually tend to be near a half-track\n  figure as this is considered to be the most efficient in terms of\n  the trade-offs among buffer size, secondary storage requirements,\n  channel use, number of input/outputs and overall processing time.\n  This figure is only a general guide; for maximal efficiency\n  considering other factors, study the generated blocksize summary\n  report or a track capacity report.\n\n  The program's recommendations assume a fairly large amount of data\n  is to be stored; data sets which occupy only a few tracks should\n  probably be placed in partitioned data sets.  In cases where this\n  is not feasible, the use of a small blocksize (2400 - 4000 bytes)\n  may be a good alternative practice.\n)X SYNTAX -\n     BLK3390  lrecl  KEYLENGTH(keylen)\n                       TRACKCAP / NOTRACKCAP\n                       BLKSIZE(blklen)\n                       NUMBER(recnum) / RECORDS(recnum)\n                       VERIFY\n\n ALIASES  - BLK339, BLK3390\n DEFAULTS - KEYLENGTH(0), NOTRACKCAP,\n            BLKSIZE(RECOMMENDED VALUE), NUMBER(100000)\n\n REQUIRED - lrecl\n)O OPERANDS -\n 'lrecl'    - the logical record length of the data which is to be\n              placed in the data set.\n))KEYLENGTH(keylen)\n            - the key length, in bytes, of the keys to be used in the\n              data set.  the maximum legal key length is 255.\n))TRACKCAP\n            - specifies a track capacity report is to be provided for\n              the device using the specified (or default) key length.\n\n              Note that a track capacity report is also provided if\n              notrackcap is not specified and lrecl exceeds the maximum\n              blocksize for a track or BLKSIZE exceeds the maximum\n              blocksize for a track.\n))NOTRACKCAP\n            - specifies that a track capacity report is not desired.\n))BLKSIZE(blklen)\n            - the blocksize to use for the allocation computation;\n              if blksize is not entered (or zero is entered), the\n              program's recommended blocksize will be used.\n))NUMBER(recnum)\n            - number of logical records that will be in the data set.\n))RECORDS(recnum)\n            - number of logical records that will be in the data set.\n))VERIFY\n            - specifies that the MVS \"TRKCALC\" routine is to be used to\n              verify track capacity calculations.  if verify is used,\n              the number of calls to \"TRKCALC\" to determine a track\n              capacity table is output at the end of the output.\n\n              Note: with verify on, a minimum of 34 calls is needed to\n              determine a track capacity table; otherwise a minimum of\n              17 calls is needed to determine the track capacity table.\n=BLK9345=BLK9=BLK93=BLK934\n)F  Example -     BLK9345 80\n\n  The BLK9345 command computes an optimal blocksize for a data set\n  to be placed on a 9345 disk pack.  The program output includes\n  the following reports:\n     1.  A summary blocksize report for the given lrecl and key\n         length which includes the recommended blocksize to use.\n     2.  A recommended data set space allocation.\n     3.  A optional track capacity report for the provided key length.\n\n  The recommended blocksize value is for data sets in which the\n  predominant access is sequential; for data sets where random\n  access time is critical or the usual access is random, a small\n  blocksize (500-2000 bytes) should probably be used.\n\n  The recommended blocksize will usually tend to be near a half-track\n  figure as this is considered to be the most efficient in terms of\n  the trade-offs among buffer size, secondary storage requirements,\n  channel use, number of input/outputs and overall processing time.\n  This figure is only a general guide; for maximal efficiency\n  considering other factors, study the generated blocksize summary\n  report or a track capacity report.\n\n  The program's recommendations assume a fairly large amount of data\n  is to be stored; data sets which occupy only a few tracks should\n  probably be placed in partitioned data sets.  In cases where this\n  is not feasible, the use of a small blocksize (2400 - 4000 bytes)\n  may be a good alternative practice.\n)X SYNTAX -\n     BLK9345  lrecl  KEYLENGTH(keylen)\n                       TRACKCAP / NOTRACKCAP\n                       BLKSIZE(blklen)\n                       NUMBER(recnum) / RECORDS(recnum)\n                       VERIFY\n\n ALIASES  - BLK9, BLK93, BLK934, BLK9345\n DEFAULTS - KEYLENGTH(0), NOTRACKCAP,\n            BLKSIZE(RECOMMENDED VALUE), NUMBER(100000)\n\n REQUIRED - lrecl\n)O OPERANDS -\n 'lrecl'    - the logical record length of the data which is to be\n              placed in the data set.\n))KEYLENGTH(keylen)\n            - the key length, in bytes, of the keys to be used in the\n              data set.  the maximum legal key length is 255.\n))TRACKCAP\n            - specifies a track capacity report is to be provided for\n              the device using the specified (or default) key length.\n\n              Note that a track capacity report is also provided if\n              notrackcap is not specified and lrecl exceeds the maximum\n              blocksize for a track or BLKSIZE exceeds the maximum\n              blocksize for a track.\n))NOTRACKCAP\n            - specifies that a track capacity report is not desired.\n))BLKSIZE(blklen)\n            - the blocksize to use for the allocation computation;\n              if blksize is not entered (or zero is entered), the\n              program's recommended blocksize will be used.\n))NUMBER(recnum)\n            - number of logical records that will be in the data set.\n))RECORDS(recnum)\n            - number of logical records that will be in the data set.\n))VERIFY\n            - specifies that the MVS \"TRKCALC\" routine is to be used to\n              verify track capacity calculations.  if verify is used,\n              the number of calls to \"TRKCALC\" to determine a track\n              capacity table is output at the end of the output.\n\n              Note: with verify on, a minimum of 34 calls is needed to\n              determine a track capacity table; otherwise a minimum of\n              17 calls is needed to determine the track capacity table.\n=BROWSE=BROWS=BROW=BRO=BR=B\n)F  Example -     BROWSE mema:memb\n\n  The BROWSE subcommand enters ISPF browse for a member (for\n  additional information on the relationship of -PDS86- and\n  BROWSE, enter HELP DIALOG).\n)X SYNTAX -\n     BROWSE  member\n\n ALIASES  - B, BR, BRO, BROW, BROWS, BROWSE\n DEFAULTS - member\n REQUIRED - none.\n)O OPERANDS -\n  member    - optional, specifies the name of member(s) to be browsed.\n\n              Default member names, member lists, member name\n              ranges and member name patterns are allowed; for\n              more information, enter HELP GROUP.\n\n              Note - if : is entered for the member name position, ISPF\n              will be requested to provide a member selection screen.\n=CHANGE=C=CH=CHA=CHAN=CHANG=PDS=PD=PDS8=PDS86\n)F  Example -     CHANGE lib.cntl old\n\n The CHANGE subcommand switches -PDS86- to a different data set.\n)X SYNTAX -\n     CHANGE  FILE(ddname) NUMBER(numb) /\n             dsn/*  VOLUME(name) VOLSET(name)  SHR/OLD\n\n ALIASES  - PD, PDS, C, CH, CHA, CHAN, CHANG, CHANGE\n DEFAULTS - SHR or previously used data set name and volume\n            if no operands are entered.\n REQUIRED - none.\n)O OPERANDS -\n  dsn          - specifies the data set name.  If the data set name is\n                 not entered in quotes ('), your TSO PREFIX will be\n                 appended to the start of the entered data set name.\n\n                 If a data set name of * is entered, the previous data\n                 set name is assumed (you are switched from the current\n                 data set to the previous data set with the * operand;\n                 another CHANGE * will switch data sets back again).\n\n                 Note that if your system has password security, you\n                 may enter your data set password after the data set\n                 name and a slash (/).  The syntax is: dsn/password\n\n))FILE(ddname) - specifies the data set is already allocated with the\n                 provided ddname.  Note that only disk data sets are\n                 supported.  If the FILE keyword is used, dsname,\n                 SHR/OLD, VOLSET and VOLUME should not also be used.\n\n                 However, if the data set is concatenated, the SHR\n                 or OLD keyword may be used since -PDS86- will\n                 reallocate the data set.\n))NUMBER(numb) - for use with FILE only, numb defaults to 1; specifies\n                 the concatenation number desired for the ddname\n                 identified.  If numb is larger than the number of\n                 concatenated data sets, the last data set in the\n                 sequence will be used.\n))VOLUME(name) - specifies the volume name on which the data set\n                 resides.  If a volume name is entered, SYSALLDA is\n                 assumed as the unit name; otherwise, the unit name\n                 from the catalog is used.\n\n                 Note:  this parameter should be used if the data set\n                 is not cataloged or if the catalog entry is not to be\n                 used.  To use the catalog for a CHANGE subcommand\n                 even if VOLSET is in effect, you may enter VOLUME(*).\n))VOLSET(name) - specifies a default volume name for data set\n                 references.  For example, if VOLSET(NEWRES) were\n                 entered, subsequent CHANGE subcommands with a data\n                 set name and no VOLUME parameter will assume a\n                 VOLUME(NEWRES) parameter.\n\n                 Note:  this parameter should be used if a default\n                 volume is desired.  To nullify the effect of VOLSET,\n                 enter VOLSET(*) on a subsequent CHANGE subcommand.\n\n))SHR          - specifies that the data set is to be allocated with\n                 a disposition of SHR.\n))OLD          - specifies that the data set is to be allocated with\n                 a disposition of OLD to prevent the use of this data\n                 set by other users.\n=COBANAL=COBANA=COBAN=COBA=COB=ANALYZE\n)F  Example -     COBANAL mema:memb\n\n The COBANAL subcommand invokes the COBANAL load module analyzer\n program (CBT 321) to display an analysis of a COBOL load module.\n\n)X SYNTAX -\n     COBANAL  memgroup\n                   LIST/NOLIST\n                   SUMMARY/NOSUMMARY\n\n ALIASES  - COB, COBA, COBAN, COBANA, COBANAL\n DEFAULTS - SUMMARY, NOLIST\n REQUIRED - memgroup.\n)O OPERANDS -\n  memgroup      - specifies the name of the COBOL load module(s)\n                  for which a load module analysis is to be produced.\n\n                  Default member names, member lists, member name\n                  ranges and member name patterns are allowed; for\n                  more information, enter HELP GROUP.\n\n))LIST       - specifies that all COBANAL detail messages are to\n               be displayed.\n))NOLIST     - specifies that no COBANAL detail messages are to\n               be displayed.\n))SUMMARY    - specifies that COBANAL summary messages are to\n               be displayed.\n))NOSUMMARY  - specifies that no COBANAL summary messages are to\n               be displayed.\n=COMPARE=CO=COM=COMP=COMPA=COMPAR\n)F  Example -     COMPARE oldmem other.lib(newmem)\n\n  The COMPARE subcommand displays differences between two members.\n  The TSO COMPARE command, SuperC or the COMPAREX (R) program is used\n  based on the value of global variable &CCAR:\n\n    COMPARE$ - Yale TSO COMPARE program\n    COMPAREC - ISPF SuperC compare program\n    COMPAREW - COMPAREX compare program\n\n)X SYNTAX -\n     COMPARE  membero membern  FULL           / ASM\n                               IEBCOMPR       / ZIEBCOMPR\n                               SYSOUT / PRINT / NOPRINT / OUTFILE(name)\n                               OVOL(volname)  / NVOL(volume)\n\n            Note: the above parameters are for TSO COMPARE.\n\n     COMPARE  membero membern  BYTE   / FILE  / WORD / LINE\n                               DELTA  / OVSUM / CHNG / LONG\n                               OVOL(volname)\n                               NVOL(volume)\n\n            Note: the above parameters are for SuperC.\n\n ALIASES  - CO, COM, COMP, COMPA, COMPAR, COMPARE\n DEFAULTS - DELTA\n REQUIRED - membero, membern\n)O OPERANDS -\n  membero       - the base member which is to be compared with membern.\n\n                  Note: membero may be a data set and member name if\n                  a member from a different data set is to be used.\n                  And membero may be a data set name if sequential.\n\n  membern       - the new member which is to be compared with membero.\n\n                  Note: membern may be a data set and member name if\n                  a member from a different data set is to be used.\n                  And membern may be a data set name if sequential.\n\n                  If the new data set is a partitioned data set and\n                  no member name is coded, the base member name will\n                  be used; this can be used to compare two different\n                  levels of the same module.\n\n  operands      - optional, may include any desired COMPARE operands.\n\n                  Note: The first operand after the file/member\n                  specification in a SuperC COMPARE can be\n                  BYTE, FILE, or WORD to change the compare type\n                  (from the LINE default).\n\n                  For example,\n                    compare member1 member2 word long\n                    compare 'file1' 'file2' file\n=COMPRESS=COMPR=COMPRE=COMPRES\n)F  Example -     COMPRESS summary\n\n The COMPRESS subcommand invokes IEBCOPY (or a compatible program)\n to compress a partitioned data set.\n\n Note: a COMPRESS operation should not be interrupted with an attention\n since data sets are updated in-place.\n\n Caution: this subcommand modifies the output data set.  To ensure\n data set integrity, you should allocate the output data set as OLD\n or NEW, or be aware of the data set update protection provided by\n the -PDS86- command for SHR allocations (for details, enter\n HELP UPDATE).\n)X SYNTAX -\n     COMPRESS  SUMMARY / LIST / NOLIST\n\n ALIASES  - COMPR, COMPRE, COMPRES, COMPRESS\n DEFAULTS - SUMMARY\n REQUIRED - none.\n)O OPERANDS -\n))SUMMARY  - specifies that only compress summary and error messages\n             are to be displayed.\n))LIST     - specifies that all compress messages are to be displayed.\n))NOLIST   - specifies that no compress messages are to be displayed.\n))SHR      - allows compressing data sets which are in use.\n=CONDEND=COND=CONDE=CONDEN\n)F  Example -     CONDEND ERRORS\n\n   The CONDEND subcommand terminates -PDS86- if any subcommand\n   has one or more warning or error level messages.  After -PDS86- is\n   terminated by CONDEND, the return code will be 4 for warning\n   messages (PDS400W-PDS599W) and 8 for error messages (PDS600E-\n   PDS999E).\n\n   This subcommand is normally used to check that a critical\n   subcommand in background is working as expected.  Normally, -PDS86-\n   will continue to execute after program warning or error\n   messages are received.  With this facility, you can terminate a\n   -PDS86- process when it is not functioning properly.\n\n   Note: Use TSO program IKJEFT1A in background to terminate the\n         jobstep after a non-zero return code is received.\n\n   CONDEND in PDS works differently than CONDEND in StarTool.\n\n   When CONDEND is issued in a PDS batch job or CLIST, it\n   will remain in effect until it is triggered by a WARNING or\n   ERROR message or until CONDEND OFF is issued.\n\n   CONDEND in StarTool will only terminate the previous subcommand\n   if it had one or more warning or error level messages.\n\n   The subcommand groups below are equivalent.\n\n   <PDS>\n   condend errors\n   copy pdshelp 'ad.help2'\n   condend off\n   </PDS>\n\n   <Startool>\n   copy pdshelp 'ad.help2'\n   condend errors\n   </Startool>\n)X SYNTAX -\n     CONDEND  WARNINGS/ERRORS/OFF\n\n ALIASES  - COND, CONDE, CONDEN, CONDEND\n DEFAULTS - WARNINGS\n REQUIRED - none\n)O OPERANDS -\n))WARNINGS - exit if any message issued by a subcommand is\n             in the range PDS400W through PDS999E (warning or error\n             messages) and set the return code to 4 (warning) or\n             8 (error).\n))ERRORS   - exit if any message issued by a subcommand is\n             in the range PDS600E through PDS999E (error messages)\n             and set the return code to 8 (error).\n))OFF      - do not exit if a subcommand has one or more\n             warning or error level messages.\n=CONTROL=CON=CONT=CONTR=CONTRO\n)F  Example -     CONTROL dsname(lib.cntl(pdsdata)) old\n\n The CONTROL subcommand specifies global and immediate processing\n options.\n\n Most CONTROL subcommand operands (such as ALIASINFO and SINGLE) are\n global in that they remain in effect until reset by another CONTROL\n subcommand.\n\n The other operands (such as TESTABEND and IOSTATS) are immediate and\n take effect for only a single CONTROL subcommand.\n\n CONTROL does not utilize ISPF services; however, when it is first\n invoked with either a SYSOUT or DSNAME keyword, -PDS86- attempts\n to establish an ISPF environment so that subsequent subcommands can\n utilize ISPF services.\n\n Note that the input buffering type (SINGLE, DOUBLE or MULTIPLE) is\n reset for each data set allocated according to the device type on\n which the data set resides.  MULTIPLE buffering is used for device\n types which support the READ MULTIPLE CCW and DOUBLE is used\n otherwise.\n)X SYNTAX -\n     CONTROL  ALIASINFO  / NOALIASINFO\n              LKEDDATE   / NOLKEDDATE\n              PROMPT     / NOPROMPT\n              RECOVER    / NORECOVER\n              TRANSLATOR / NOTRANSLATOR\n              SINGLE     / DOUBLE      /  MULTIPLE\n              SYSOUT(c) / NOSYSOUT / FORM(ffff)/NOFORM/DEST(dst)/NODEST\n              DSN(dsn)  / NODSN    / OLD/MOD/NEW/SHR\n              IOSTATS   / TESTABEND   / TESTCPULOOP  /\n                          TESTMSGS    / TESTOUTLOOP  / TESTREAD  /\n              GLOBALMODS / ALLGLOBALS   /\n              PDSMAIN    / MODS         / GEO       / LISTENV    /\n                           COMPILER     / TSO       / ISPLOG     /\n                           MBRVAL       / MEMLIST   / TOGGLES\n\n ALIASES  - CON, CONT, CONTR, CONTRO, CONTROL\n DEFAULTS - Initially in TSO:\n            ALIASINFO, LKEDDATE, PROMPT, RECOVER, NOTRANS, MULTIPLE\n          - Initially in the background:\n            ALIASINFO, LKEDDATE, PROMPT, NORECOVER, NOTRANS, MULTIPLE\n REQUIRED - none.\n)O OPERANDS -\n))ALIASINFO     - specifies that a MAP subcommand with no limiting\n                  operands is to provide alias information for alias\n                  members and that an ATTRIB subcommand is to provide\n                  alias information.\n))NOALIASINFO   - specifies that ATTRIB and MAP subcommands need not\n                  provide alias or main member identification.\n))LKEDDATE      - specifies that an ATTRIB subcommand should provide\n                  the date of the linkage edit.\n))NOLKEDDATE    - specifies that an ATTRIB subcommand should not\n                  provide the date of the linkage edit.\n))PROMPT        - specifies that YES/NO decision prompting should be\n                  solicited from the terminal operator unless -PDS86-\n                  is executing in the background, from CLIST input or\n                  from a storage stack.\n\n                  YES/NO prompting is normally performed at the\n                  following decision points:\n                     1.  before renaming a group of members\n                     2.  before deleting a default member\n                     3.  before deleting a list or a group of members\n                     4.  before restoring a member found in scan mode\n                     5.  before modifying a data set with FIXPDS\n                     6.  before submitting a group of members\n                     7.  before reproducing a group of members\n))NOPROMPT      - specifies that YES/NO decision prompting should be\n                  circumvented and that a YES response should be\n                  assumed in each case.\n\n                  YES/NO prompting is normally performed at the\n                  following decision points:\n                     1.  before renaming a group of members\n                     2.  before deleting a default member\n                     3.  before deleting a list or a group of members\n                     4.  before restoring a member found in scan mode\n                     5.  before modifying a data set with FIXPDS\n                     6.  before submitting a group of members\n                     7.  before reproducing a group of members\n))RECOVER       - specifies that STAE recovery is to be attempted\n                  after a program ABEND.\n))NORECOVER     - specifies that STAE recovery is not to be attempted\n                  after a program ABEND.  Note that subcommands which\n                  specifically test for ABEND conditions (such as IF\n                  with LOADERR or VERIFY with LOAD) should recover from\n                  ABEND situations regardless of RECOVER/NORECOVER.\n))TRANSLATOR    - specifies that HISTORY subcommands should output\n                  TRANSLATOR information.\n))NOTRANSLATOR  - specifies that HISTORY subcommands should not output\n                  TRANSLATOR information.\n))SYSOUT(c)     - specifies that a session log output is to be started\n                  to the SYSOUT class specified.  The SYSOUT output\n                  will continue until the end of the program or until\n                  CONTROL SYSOUT/NOSYSOUT/DSNAME/NODSNAME is entered.\n\n                  Note that DEST and FORM keywords can be entered as\n                  additional SYSOUT specifications.\n))NOSYSOUT      - specifies that any SYSOUT or DSNAME session log\n                  output is to be terminated.\n))DEST(dst)     - specifies the destination that is to receive SYSOUT\n                  data (used only at SYSOUT allocation).\n))NODEST        - specifies that the default destination is to be used\n                  for routing SYSOUT data.\n))FORM(ffff)    - specifies the forms name to be used for SYSOUT\n                  (used only at SYSOUT allocation).\n))NOFORM        - specifies that the default forms name is to be used\n                  for SYSOUT data.\n))DSNAME(dsn)   - specifies that a session log output is to be started\n                  to the named data set.  The DSNAME output will\n                  continue until the end of the program or until\n                  CONTROL SYSOUT/NOSYSOUT/DSNAME/NODSNAME is entered.\n\n                  Notes:\n                    1.  A member name must be entered for session log\n                        output to a partitioned data set.\n                    2.  A data set password may be entered.\n                    3.  A data set disposition (OLD/MOD/SHR/NEW)\n                        may also be entered.\n))NODSNAME      - specifies that any SYSOUT or DSNAME session log\n                  output is to be terminated.\n))OLD           - specifies that the session log data set should not\n                  be shared with other users.\n))MOD           - specifies that the session log output is to be added\n                  to the end of an existing data set.  If the data set\n                  does not exist, it will be created with\n                  DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n))SHR           - specifies that the session log data set should be\n                  shared with other users.  Note: since the data set\n                  is modified, the use of this parameter should be\n                  minimized.\n))NEW           - specifies that the session log data set should be\n                  created with DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n))SINGLE        - specifies that a single input buffer is to be used.\n))DOUBLE        - specifies that two buffers are to be used wherever\n                  possible for input operations.\n))MULTIPLE      - specifies that an entire disk track is to be read\n                  wherever possible for input operations.\n))IOSTATS       - specifies that statistics relating to input\n                  buffering be displayed.  Note: only non-zero\n                  quantities are displayed and statistics are set\n                  to zero after each display.\n\n                  nn,nnn INPUT ROUTINE ENTRIES\n                  nn,nnn TTR CHANGES\n                  nn,nnn LOGICAL INPUTS PERFORMED\n                  nn,nnn PHYSICAL TRACKS READ\n                  nn,nnn PDSE DIRECTORY BLOCKS READ\n\n))TESTABEND     - specifies that a S0C1 ABEND is to be provided for\n                  program testing.\n))TESTCPULOOP   - specifies that a program branch loop is to be\n                  entered for program testing.\n))TESTMSGS      - specifies that the program should issue all numbered\n                  messages for program testing.\n))TESTOUTLOOP   - specifies that a program output message loop is to be\n                  entered for program testing.\n))TESTREAD      - specifies that the program should test its input EXCP\n                  routine using an initial TTR of 000001 for each of\n                  the following cases:\n\n          SINGLE: Read single (each read obtains one physical block).\n                  The return code should be 00 and NEXT TTR ADDRESS\n                  should be 000002 if sufficient data is available.\n\n          DOUBLE: Read double (each read obtains two physical blocks).\n                  The return code should be 00 and NEXT TTR ADDRESS\n                  should be 000003 if sufficient data is available.\n\n        MULTIPLE: Read multiple (each read obtains an entire track).\n                  If the disk unit supports the READ MULTIPLE CCW, the\n                  return code should be 00 and NEXT TTR ADDRESS\n                  should be 000101 if sufficient data is available.\n\n                  If the disk unit does not support the READ MULTIPLE\n                  CCW, a PDS892E message should be received, the return\n                  code should be 00 and NEXT TTR ADDRESS should be\n                  000003 (double buffering is used).\n))GLOBALMODS    - specifies that program messages should be output for\n                  each global variable from the #PDSGEN members which\n                  differs from the default value for that variable.\n                  The message will include the variable name, the value\n                  as set before the assembly, the default value for the\n                  variable and a short description of the variable.\n))ALLGLOBALS    - specifies that program messages should be output for\n                  each global variable from the #PDSGEN members.\n                  The message will include the variable name, the value\n                  as set before the assembly, the default value for the\n                  variable and a short description of the variable.\n))PDSMAIN       - specifies that the date/time stamp of the PDSMAIN\n                  assembly be displayed.\n))MODS          - specifies that the most recent modifications to the\n                  PDS command processor be displayed.\n))GEO           - specifies that the DASD geometry chart be displayed\n                  for CKD devices.  DASD is an alias for GEO.\n))LISTENV       - specifies that information on the software and\n                  hardware environment be displayed.  MVS is an alias\n                  for LISTENV.\n))COMPILER      - specifies that information on IBM compiler products\n                  be displayed.  IBM is an alias for COMPILER.\n))TSO           - specifies that a sorted list of active TSO users\n                  be displayed.  TSU is an alias for TSO.\n))ISPLOG        - toggles whether all subcommands are written to\n                  ISPLOG.  If toggle is OFF (default), NLO_ global\n                  variables will determine what subcommands get\n                  logged.\n))MBRVAL        - toggles whether member name validation should be\n                  performed for ISPF EDIT/BROWSE/VIEW.  If toggle\n                  is ON (default), then member names can not have\n                  imbedded periods or begin with a numeric character.\n))MEMLIST       - toggles whether RESET should be added to all\n                  MEMLIST subcommands.  If toggle is ON, then the\n                  MEMLIST table is cleared before adding entries.\n))TOGGLES       - the state of the previous three toggles are\n                  displayed.\n=COPY=COP\n)F  Example -     COPY mem1:mem2 other.dataset new tra spa(5,5) dir(20)\n\n  The COPY subcommand builds copy control statements and invokes a\n  copy program to selectively copy members to another data set.\n\n  Note: members may not be copied back into the input data set;\n  however, you can perform this function with a REPRO subcommand\n  using the TO or AS keyword.\n\n  In most instances, IEBCOPY is used to perform the actual data copy\n  operation; however, in the following cases, IEBGENER is used\n  instead of IEBCOPY:\n    1. the input data set is sequential.\n    2. a single member is copied to a sequential output data set.\n\n  In addition, if the output data set is sequential and more than\n  one input member is selected for copy, IEBCOPY will create an\n  output data set in IEBCOPY unload format.\n\n  If the TO (or the equivalent AS) keyword is used, each member is\n  renamed in the copy in a generic fashion.  For example, if TO(X12)\n  is entered, each resulting member name is formed by placing X12\n  over the first three characters of the original member name.  An\n  exception to this rule is made when only a single member is to be\n  copied and its aliases are not also requested; in this case, the\n  member name is taken directly from the TO keyword.\n\n  Normally an IEBCOPY COPY operation is requested; however, if the\n  data set contains load modules (RECFM is U) and the input and output\n  blocksizes differ, a COPYMOD operation will be requested with a\n  MAXBLK operand set to the output data set blocksize.  A COPYMOD\n  operation may be explicitly requested for load module libraries by\n  specifying MAXBLK and the maximum member blocksize.\n\n  Caution: this subcommand modifies the output data set.  To ensure\n  data set integrity, you should allocate the output data set as OLD\n  or NEW, or be aware of the data set update protection provided by\n  the -PDS86- command for SHR allocations (for details, enter\n  HELP UPDATE).\n)X SYNTAX -\n     COPY  memgroup  dsname / * / FILE(ddname) NUMBER(numb)\n                        OLD/SHR/NEW\n                                TRK/CYL  DIR(num)  SPACE(prim,sec)\n                                DSNTYPE(LIBRARY/PDS) MAXGENS(num)\n                        ALIAS/NOALIAS\n                        AS(pname) / TO(pname)\n                        CALL/NOCALL\n                        EXIST/NOEXIST/EXCLUDE/NOBLDL\n                        MAXBLK(num)\n                        REPLACE/NOREPLACE\n                        SUMMARY/LIST/NOLIST\n                        VOLUME(volser)\n\n ALIASES  - COP, COPY\n DEFAULTS - SHR, NOALIAS, CALL, NOREPLACE, SUMMARY; If NEW is\n            specified, TRK/CYL, DIR, SPACE, and DSNTYPE\n            default to values used for the input data set.\n REQUIRED - memgroup, dsname / FILE(ddname)\n)O OPERANDS -\n  memgroup   - specifies the name of the member(s) to be copied to\n               the output data set.\n\n               Member lists, member name ranges and member name\n               patterns are allowed; for more information,\n               enter HELP GROUP.\n\n  dsname     - specifies the name of the output data set.  Standard\n               TSO dsname syntax should be used.  Note that if * is\n               entered in the dsname field, the previously used data\n               set name (for a copy command) will be used instead.\n\n               As an alternative to the AS or TO keywords, partial\n               member names may be entered in parentheses following\n               the data set name as in this example: 'the.dsn(pname)'\n\n))FILE(name) - specifies the data set is already allocated with the\n               provided ddname.  Note that only disk data sets are\n               supported.  If the FILE format is used, dsname, OLD,\n               SHR, NEW, TRK, CYL, DIR, SPACE, VOLUME, DSNTYPE, and\n               MAXGENS keywords should not be used.\n\n               However, if the data set is concatenated, the SHR\n               or OLD keyword may be used since -PDS86- will\n               reallocate the data set.\n))NUMBER(nm) - for use with FILE only, nm defaults to 1; specifies\n               the concatenation number desired for the ddname\n               identified.  If nm is larger than the number of\n               concatenated data sets, the last data set in the\n               sequence will be used.\n))OLD        - specifies that exclusive use of the output data set is\n               to be obtained.\n))SHR        - specifies that shared use of the output data set is\n               sufficient; -PDS86- will provide output data set\n               protection as documented under HELP UPDATE.\n))NEW        - specifies that the output data set is to be created.\n               When NEW is specified, TRK/CYL, DIR, SPACE, DSNTYPE,\n               and MAXGENS keywords may also be specified.\n))TRK        - specifies that the output data set is to be allocated\n               in tracks.  If TRK or CYL is not entered, the default\n               is calculated as follows:\n                 a.  If SPACE is entered, TRK is the default.\n                 b.  Otherwise, the default is taken from the input\n                     data set.\n))CYL        - specifies that the output data set is to be allocated\n               in cylinder units.  If TRK or CYL is not entered,\n               the default is calculated as follows:\n                 a.  If SPACE is entered, TRK is the default.\n                 b.  Otherwise, the default is taken from the input\n                     data set.\n))DIR(num)   - specifies the number of directory blocks for the\n               output data set.  If DIR is not entered, the default\n               is taken from the input data set.\n))SPACE(p,s) - specifies the primary and secondary quantities for\n               the output data set in track or cylinder units.\n\n               If TRK or CYL is not entered but SPACE is entered,\n               TRK is the default allocation quantity.\n\n               If SPACE is not entered, the default is taken from\n               the input data set.\n))DSNTYPE(typ)-typ is specified as LIBRARY for a PDSE or PDS for a\n               partitioned data set.\n))MAXGENS(num)-specifies the maximum number of PDSE member generations\n               to be retained by the system.  A number from 1 to\n               2 billion and subject to the SMS MAXGENS_LIMIT.\n\n               Note that DSNTYPE(LIBRARY) is required when using\n               this operand if the input PDS is not a PDSE.\n))ALIAS      - specifies that any associated members (aliases, apparent\n               aliases and associated main members) are also to be\n               copied.\n))NOALIAS    - specifies that only the member(s) specifically\n               identified are to be copied.\n))AS(pname)  - pname defines the name of any output members.  For\n               example, with AS(new) and the input members, AA, ABBA\n               and IBM04, members named NEW, NEWA and NEW04 will be\n               created.  AS and TO are equivalent keywords.\n\n               Note that if only a single member is input and the\n               ALIAS keyword is not entered, the resulting member\n               name is taken only from the AS or TO keyword.\n))TO(pname)  - pname defines the name of any output members.  For\n               example, with TO(new) and the input members, AA, ABBA\n               and IBM04, members named NEW, NEWA and NEW04 will be\n               created.  TO and AS are equivalent keywords.\n\n               Note that if only a single member is input and the\n               ALIAS keyword is not entered, the resulting member\n               name is taken only from the AS or TO keyword.\n))CALL       - specifies that the copy program is to be invoked.\n))NOCALL     - specifies that the copy program is not to be invoked;\n               member checking, control card generation and data set\n               allocations will still be performed.\n\n               Note: since messages are issued for existing members\n               in the output data set, this keyword could be used to\n               verify member existence between different data sets.\n))EXIST      - specifies that only the subset of memgroup that is\n               also present in the output data set is to be copied\n               (normally the REPLACE keyword would also be used).\n))NOEXIST    - specifies that only the subset of memgroup that is\n               not present in the output data set is to be copied.\n))EXCLUDE    - invert the normal copy \"select\" statements to\n               \"exclude\" statements.  The use of this option also\n               turns off BLDL (member existence) checking for the\n               target library.\n))NOBLDL     - do not perform BLDL (member existence) checking in the\n               target library.  Use this parameter when performance\n               of the COPY subcommand is very important and BLDL\n               checking by -PDS86- for possible errors is not\n               important.\n))MAXBLK(nm) - for RECFM=U members only, specifies the maximum member\n               blocksize and that a COPYMOD operation is required.\n               Note: for load module copies, a COPYMOD operation will\n               also be invoked if the input and output data set\n               blocksizes differ.\n))REPLACE    - specifies that members in the output data set are to\n               be replaced by any copied members.\n))NOREPLACE  - specifies that no members in the output data set are\n               to be replaced by any copied members; warning messages\n               will be issued to document the uncopied member names\n               unless EXIST or NOEXIST is also entered.\n))SUMMARY    - specifies that only copy summary and error messages\n               are to be displayed.\n))LIST       - specifies that all copy messages are to be displayed.\n))NOLIST     - specifies that no copy messages are to be displayed.\n))VOLUME(vo) - for NEW data sets, specifies the output volume name;\n               for existing data sets, this parameter should be used\n               if the output data set is not cataloged.\n=CPKMAP=CPKM=CPK=CP=TRKMAP=TRKM=TRK=TR\n)F  Example -     TRKMAP mvsres\n\n The TRKMAP subcommand displays a track map for a volume.\n\n The DISKMAP (CBT 792) program or the FDR COMPAKTOR program is used\n based on the value of global variable &MAPPGM:\n\n    DISKMAP - CBT 792 DISKMAP program\n    FDRCPK  - Innovation DP COMPAKTOR program\n\n)X SYNTAX -\n     TRKMAP  volume\n\n ALIASES  - TR, TRK, TRKM, TRKMA, TRKMAP, CP, CPK, CPKM, CPKMA, CPKMAP\n DEFAULTS - none.\n REQUIRED - none.\n)O OPERANDS -\n  volume  -      specifies the name of the volume for which a\n                 a track map is to be produced.\n\n                 Note:  Enter \"*\" to use the currently allocated\n                 volume.\n=DISASM=DISAS=DISA\n)F  Example -     DISASM member csect\n\n   The DISASM subcommand reconstructs assembler language instructions\n   from a module; this procedure is often referred to as \"decoding\" or\n   \"disassembling\" instructions.\n\n   The output will consist of the following:\n\n   1.  Directory information.\n   2.  External symbol table.\n   3.  Hex dump of CSECT.\n   4.  Assembler language instructions for CSECT.\n\n   Global variable &ASMPGM determines which disassembler will be used.\n\n   1. DISASM  - (CBT 217) with RESOURCE/REBUILD for PDSE's (CBT 234).\n   2. ASMDASM - (HLASM toolkit).\n\n)X SYNTAX -\n     DISASM  member csect\n\n ALIASES  - DISA, DISAS, DISASM\n DEFAULTS - none\n REQUIRED - member\n)O OPERANDS -\n  member   - specifies the member to be disassembled.\n\n  csect    - optional, specifies the CSECT to be disassembled.\n\n             DISASM:\n             If CSECT is omitted, then the first CSECT will be used.\n\n             DISASM/RESOURCE/REBUILD (PDSE):\n             CSECT name will default to the load module name.\n\n             ASMDASM:\n             The CSECT name is optional.  If it is specified, the named\n             CSECT must exist in the module or object module.  If\n             omitted, the CSECT with ESDID=0001 is disassembled.\n\n  Note:  The ASMDASM program (HLASM toolkit) can disassemble an object\n         module in a sequential dataset.  In this case, the DISASM\n         subcommand must be entered from the command line and a\n         pseudo load module member name must be used.\n=DISPLAY=D=DI=DIS=DISP=DISPL=DISPLA\n)F  Example -     DISPLAY aa b4\n\n   The DISPLAY subcommand lists member names from the data set\n   directory.  Note: the default member group is not affected by\n   either the DISPLAY or PATTERN subcommands.\n\n   Note that -A is added following a displayed member name if the\n   member name is an alias.  The member name is listed in a combined\n   hexadecimal/character format if it does not contain upper case\n   alphanumeric characters (including @, $ and #) or if the first\n   character is numeric.  Unprintable characters (for 3270-type\n   devices) in a member name are displayed as periods.\n)X SYNTAX -\n     DISPLAY  name1 name2\n\n ALIASES  - D, DI, DIS, DISP, DISPL, DISPLA, DISPLAY\n DEFAULTS - entire directory\n REQUIRED - none.\n)O OPERANDS -\n  name1   - optional, specifies the starting member name (or portion\n            of the member name) at which the display is to start. If\n            omitted, the entire directory is displayed.\n\n            Note: a group name descriptor such as part1:part2,\n            seg1/seg2 or part1*seg1 may be entered for name1, in\n            which case, the output will consist of the member names\n            which would be displayed by the MEMBERS subcommand.\n\n  name2   - optional, specifies the ending member name (or portion of\n            the member name) after which the display is to stop.  If\n            omitted, the display continues to the end of the directory.\n=DCF=DC\n)F  Example -     DCF mema:memb twopass index file(myfile)\n\n   The DCF subcommand prints a hardcopy list of a member.  The TSO\n   SCRIPT command is used; any desired SCRIPT operands may be added\n   after the member name.\n)X SYNTAX -\n     DCF  member\n         BIND(obind {ebind})           PAGE{({PROMPT}{{FROM} p {TO} q}\n         CHARS(font1..font4)            {{FROM} p FOR n}{{FROM} p ON})}\n         CONTINUE/NOCONT               PRINT{(copies,class,fcb,ucs)}\n         CTF                           PROFILE{(fileid)}/NOPROFILE\n         DDUT/NODDUT                   QUIET\n         DEST(station-id)              SEARCH(libname)(opnum...)\n         DEVICE(devtype)               SEGLIB/NOSEGLIB\n         FILE{(fileid)}                SPELLCHK\n         FONTLIB({ftype}{fmodel})      STOP\n         FPASSES n                     SYON/SYOFF\n         INDEX                         SYSVAR(n value...)\n         LIB(libename...)(opnum...)    TERM\n         MESSAGE({DELAY}{D}{TRACE})    TLIB\n         NOSPIE                        TWOPASS\n         NOWAIT                        UNFORMAT\n         NUMBER                        UPCASE\n         OPTIONS{(fileid)}             @user-option\n\n ALIASES  - DC, DCF\n DEFAULTS - member\n REQUIRED - none.\n)O OPERANDS -\n  member   - optional, specifies the member name(s) to be passed\n             (along with the data set name) to the TSO SCRIPT\n             command.\n\n             Default member names, member lists, member name\n             ranges and member name patterns are allowed; for\n             more information, enter HELP GROUP.\n\n operands -  optional, may include any desired TSO SCRIPT operands.\n=DIRENTRY=DIR=DIRE=DIREN=DIRENT=DIRENTR\n)F  Example -     DIRENTRY mema:memb\n\n   The DIRENTRY subcommand dumps the directory entry of a member.\n\n OFFSET  NAME      DESCRIPTION  (from GC28-1049, Debugging Handbook #3)\n ------  --------  ----------------------------------------------------\n  00     PDS2NAME  CL8   -- member name\n  08     PDS2TTRP  XL3   -- TTR of first block of data\n  0B     PDS2INDC  X'80' -- member is an alias\n                   X'60' -- number of TTR's following (0 - 3)\n                   X'1F' -- number of halfwords following (0 - 31)\n\n *** Load module section only:\n  0C     PDS2TTRT  XL4   -- first text TTR, x'00'\n  10     PDS2TTRN  XL4   -- Overlay: note list TTR, number of entries\n                            Scatter: translation table TTR, x'00'\n  14     PDS2ATR1  X'F0' -- Reentrant| Reusable | Overlay  | Test\n                   X'0F' -- Only load| Scatter  |Executable| 1 Text\n  15     PDS2ATR2  X'F0' -- Not DC   |Text org=0| EP=0     | No RLD's\n                   X'0F' -- Not EDIT | Test     | LKED F   |Refreshable\n  16     PDS2STOR  XL3   -- total contiguous storage required\n  19     PDS2FTBL  XL2   -- length of first text block\n  1B     PDS2EPA   XL3   -- entry point address of this member\n  1E     PDS2FTB1  XL1   -- x'80' processed by OS/VS linkage editor\n                            x'20' page alignment required\n                            x'10' SSI information is present\n                            x'08' APF information is valid\n  1F     PDS2FTB2  XL1   -- x'11' RMODE 64\n                            x'10' RMODE ANY\n                            x'00' RMODE 24\n                            x'0C' Alias entry point is AMODE ANY\n                            x'08' Alias entry point is AMODE 31\n                            x'04' Alias entry point is AMODE 64\n                            x'00' Alias entry point is AMODE 24\n                            x'03' Main entry point is AMODE ANY\n                            x'02' Main entry point is AMODE 31\n                            x'01' Main entry point is AMODE 64\n                            x'00' Main entry point is AMODE 24\n  20     PDS2FTB3  XL1   -- # of RLD/CONTROL records after first text\n\n *** Scatter load module section only:\n  +0     PDS2SLSZ  XL2   -- number of bytes in scatter list\n  +2     PDS2TTSZ  XL2   -- number of bytes in translation table\n  +4     PDS2ESDT  XL2   -- ESD CSECT identifier of first text block\n  +6     PDS2ESDC  XL2   -- ESD CSECT identifier of entry point\n\n *** Alias load module section only:\n  +0     PDS2EPM   XL3   -- entry point address of main member\n  +3     PDS2MNM   CL8   -- member name of main member\n\n *** SSI section (this section is aligned on a halfword boundary):\n  +0     PDSSSIWD  XL4   -- SSI information\n\n *** APF section for OS/VS load modules:\n  +0     PDSAPFCT  X'01' -- length of following APF information\n  +1     PDSAPFAC  XL1   -- 0 is not authorized; otherwise, authorized\n\n *** LPO section for OS/VS load modules:\n  +0     PDS2LPOL  X'0D' -- length of the large program object section\n  +1     PDS2VSTR  XL4   -- virtual storage requirement for this module\n  +5     PDS2MEPA  XL4   -- main entry point offset\n  +9     PDS2AEPA  XL4   -- alias entry point offset\n\n *** ISPF statistics section for OS/VS source modules:\n  0C     ISPVERS   X     -- version\n  0D     ISPMOD    X     -- modification level\n  0E     ISPFLAGS  X     -- flag byte\n         ISPSCLM   X'80' -- stats created by SCLM\n         ISPESTAT  X'20' -- extended statistics\n  0F     ISPMSEC   X     -- seconds portion of mod time\n  10     ISPCDATE  CL4   -- date statistics created\n  14     ISPMDATE  CL4   -- date statistics modified\n  18     ISPMTIME  CL2   -- time modified HHMM\n  1A     ISPCLINE  CL2   -- current number of lines\n  1C     ISPILINE  CL2   -- initial number of lines\n  1E     ISPMLINE  CL2   -- number of modified lines\n  20     ISPUSRID  CL8   -- userid\n         ISPBLANK  CL2   -- reserved for ISPF\n                   ORG   ISPBLANK   -- for extended statistics\n  28     ISPECLIN  CL4   -- current number of lines\n  2C     ISPEILIN  CL4   -- initial number of lines\n  30     ISPEMLIN  CL4   -- number of modified lines\n)X SYNTAX -\n     DIRENTRY  member SHORT/LONG DEBUG/ISPF\n\n ALIASES  - DIR, DIRE, DIREN, DIRENT, DIRENTR, DIRENTRY\n DEFAULTS - member, SHORT for THEN(DIR) or ELSE(DIR); otherwise, LONG,\n            DEBUG\n REQUIRED - none.\n)O OPERANDS -\n  member  - optional, specifies the name of the member(s) whose\n            directory entry is to be dumped.\n\n            Default member names, member lists, member name\n            ranges and member name patterns are allowed; for\n            more information, enter HELP GROUP.\n\n))SHORT   - specifies that only a directory entry dump is desired.\n))LONG    - specifies that a directory entry dump and a listing of\n            elements in the directory entry are desired.\n))DEBUG   - use directory name headers from IBM Debugging Handbook\n))ISPF    - use directory name headers from ISPDSTAT mapping macro\n=DELETE=DE=DEL=DELE=DELET=SC=SCR=SCRA=SCRAT=SCRATC=SCRATCH\n)F  Example -     DELETE mema:memb\n\n The DELETE or SCRATCH subcommand deletes a member from the data set.\n If a member group is deleted, the members will be deleted in reverse\n collating sequence to optimize directory update operations.\n\n  Caution: this subcommand modifies the data set. To ensure data set\n  integrity, you should allocate the data set as OLD or be aware of\n  the data set update protection provided by the -PDS86- command for\n  SHR allocations (for details, enter HELP UPDATE).\n)X SYNTAX -\n     DELETE  member   ALIAS/NOALIAS\n\n ALIASES  - DE, DEL, DELE, DELET, DELETE,\n            SC, SCR, SCRA, SCRAT, SCRATC, SCRATCH\n DEFAULTS - member, NOALIAS\n REQUIRED - none.\n)O OPERANDS -\n  member  - optional, specifies the name of the member(s) to be\n            deleted.\n\n            Default member names, member lists, member name\n            ranges and member name patterns are allowed; for\n            more information, enter HELP GROUP.\n\n))ALIAS   - specifies that any associated members (aliases, apparent\n            aliases and associated main members) are also to be\n            deleted.\n))NOALIAS - specifies that only the member(s) specifically identified\n            are candidates for deletion.\n=DLINK=DLIN=DLI=DL\n)F  Example -     DLINK member\n\n The DLINK subcommand invokes the DELINKI program (CBT 090) to\n reconstruct object code from a load member.\n\n)X SYNTAX -\n     DLINK  member\n\n ALIASES  - DL, DLI, DLIN, DLINK\n DEFAULTS - member\n REQUIRED - none.\n)O OPERANDS -\n  member  -      specifies the name of the member to be decoded.\n=DSAT=DSA\n)F  Example -     DSAT lib\n\n The DSAT command is used to display allocation information for data\n sets on a direct access device.\n\n DSAT will search the catalog for the entries for the data sets\n specified.  Allocation information will be obtained from the volume\n table of contents, formatted and displayed.  If a name is an index\n name, all data sets below the index will be displayed.\n\n You may bypass the catalog search by supplying the volume name\n on which the data set resides.  This option permits displaying\n information for uncataloged data sets.\n\n DSAT may be used in CLISTs to find the allocation of a data set or a\n group of data sets and set the return code to the specified value.\n The return code may then be tested with the WHEN command.  Output may\n be suppressed by specifying NOPRINT.  The HARDCOPY keyword may be\n used to direct the output to a pre-allocated data set.\n\n The attributes to be displayed may be selected by specifying\n keyword operands.\n\n The information that may be displayed is:\n    1. Volume name on which the data set is located.\n    2. File sequence number.\n    3. Device type code from catalog entry.\n    4. Allocation  (allocated, free, and extents).\n    5. Secondary allocation (amount and units).\n    6. Data set organization.\n    7. DCB  (RECFM, BLKSIZE, and LRECL).\n    8. Creation date.\n    9. Expiration date.\n   10. Last date referenced\n   11. Fully qualified data set name.\n   12. CCHHR of the Format 1 DSCB.\n   13. Generation data group data.\n   14. PDS directory information.\n   15. System managed data set flag.\n\n)X SYNTAX -\n     DSAT  (dsnamelist) SERIAL/NOSERIAL   ALLOC/NOALLOC\n                       DSORG/NODSORG     DCB/NODCB\n                       CRDATE/NOCRDATE   EXDATE/NOEXDATE\n                       LASTREF/NOLASTREF\n                       TOTALS/NOTOTALS   PRINT/NOPRINT\n                       HEADER/NOHEADER   ALL/DAONLY\n                       GDGDATA/NOGDGDATA SEQNO/NOSEQNO\n                       DEVTYPE/NODEVTYPE DEVICE/NODEVICE\n                       CCHHR/NOCCHHR     PDS/NOPDS\n                       SECONDARY/NOSECONDARY\n                       GENERIC           DSONLY\n                       HARDCOPY(ddname)  VOLUME(name)\n                       SMS/NOSMS\n                       RC(TALLOC/TUSED/TDIFF/\n                          LALLOC/LUSED/LDIFF/NUM/\n                          PREVIOUS/DSORG/DIRALLOC/\n                          DIRUSED/ENTRIES/ALIASES/MEMBERS)\n\n ALIASES  - DSA, DSAT\n DEFAULTS - dsnamelist defaults to 'prefix' to list a user's data sets.\n            SERIAL   ALLOC   DSORG    DCB    CRDATE\n            NOEXDATE TOTALS  PRINT    HEADER ALL\n            NOPDS    NOSEQNO NODEVICE NODEVTYPE\n            NOGDGDATA    NOLASTREF    NOSECONDARY\n            NOSMS\n            NOCCHHR      NOEXTENTS    NOFULL\n            Note: If HARDCOPY is specified, NOPRINT is the default\n\n WITH FULL - same as defaults above with:\n            EXDATE      PDS       DEVICE\n            GDGDATA     LASTREF   SECONDARY\n            CCHHR\n            NODEVTYPE   NOSEQNO   NOEXTENTS\n REQUIRED - none.\n\n SAMPLE OUTPUTS -\n\n 1. DSAT lib.cntl\n SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE -DSNAME-\n STR849   280    36  3  PO   FB   23440    80 05/04/94 WSER07.LIB.CNTL\n\n 2. DSAT lib.cntl last\n SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE LAST REF  -DS...\n STR849   280    36  3  PO   FB   23440    80 05/04/94 08/03/94* WSE...\n\n 3. DSAT lib.cntl full  (Note: output below wraps to about 160 bytes)\n SERIAL DEVICE ALLOC  FREE EX  SEC UNITS DSORG DIRA    DIRU    ENTR AL\n STR849 3380     280    36  3   60  TRK   PO     90      78     465   3\n   -DCB ATTRIBUTES- CR. DATE EX. DATE LAST REF   C C H H R -DSNAME-\n   FB   23440    80 05/04/94 05/06/94 08/03/94* 0000000930 WSER07.LIB.C\n\n 4. DSAT link\n SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE -DSNAME-\n STR80P    20    18  1 X-PO  U    32760    80 07/19/94 WSER07.LINK.ALIA\n STR81Z  1350   634  5 A-PO  U    32760    80 11/13/92 WSER07.LINK.LOAD\n MIGRAT                                                WSER07.LINK.USER\n         1370   652                                       3 DATA SETS\n\n 5. DSAT 'smpc.mvs' extents\n\n  Display format for non-EAV devices < 65520 CYLS\n\n SERIAL   ALLOC    FREE EXT  DSORG -DCB ATTRIBUTES- CR. DATE   -DSNAME-\n SMP022     210       8   3   PO   FB    3120    80 08/26/2011 SMPC.MVS\n     EXT#--START TRK----START----END TRK-----END------LENGTH--TYPE-----\n       0   1E2F,0000   115905   1E38,000E   116054       150  CYL, DATA\n       1   1E39,0000   116055   1E3A,000E   116084        30  CYL, DATA\n       2   1E3B,0000   116085   1E3C,000E   116114        30  CYL, DATA\n\n  Display format for EAV devices > 65520 CYLS\n\n SERIAL   ALLOC    FREE EXT  DSORG -DCB ATTRIBUTES- CR. DATE   -DSNAME-\n DB6117    3000           3   AMX  U     4096     0 08/17/2011 VBDFS0\n     EXT#--START TRK----START----END TRK-----END------LENGTH--TYPE--\n       0   000C441:0   753615   000C472:E   754364       750  CYL, DATA\n       1   000C4A5:0   755115   000C508:E   756614      1500  CYL, DATA\n       2   000C53B:0   757365   000C56C:E   758114       750  CYL, DATA\n\n 6. DSAT 'sys1.proc' generic\n\n SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE   -DSNAME-\n MPSYSM    75    53  1 A-PO  FB   27920    80 10/20/2005 SYS1.PROCLIB\n MPSYSM  1471  1452  1 A-PO  FB    6160    80 03/25/2007 SYS1.PROCLIB.A1\n MPSYSM NOT ON VOLUME                                    SYS1.PROCLIB.A2\n MPIP2M    15     5  1 A-PO  FB   27920    80 11/15/2006 SYS1.PROCLSSC\n         1561  1510                                4 DATA SETS DISPLAYED\n\n 7. DSAT ('pli' 'none')\n\n SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE   -DSNAME-\n WLMDCT    15    13  1 A-PO  U     6144     0 02/24/2001 PLI.PLILINK\n WLMDCT     2     0  1 A-PO  FB    3120    80 02/24/2001 PLI.PLISAMP\n WLMDCT    15    11  1 A-PO  U     6144     0 02/24/2001 PLI.SIBMBASE\n WLMDCT    15     0  1 A-PO  U     6144     0 02/24/2001 PLI.SIBMLINK\n MTDOCM   225        1 X-AM  U     4096     0 10/20/2005 PLI\n        NAME NOT FOUND                                   NONE\n          272    24                                5 DATA SETS DISPLAYED\n\n 8. DSAT 'papi.sedor' sms\n SERIAL ALLOC  FREE EX DSORG -DCB ATTRIBUTES- CR. DATE    wrap...>\n LMP007     4     0  1 A-PS  U    27998     0 10/02/2009  wrap...>\n\n ...>   SMS DATACLAS MGMTCLAS STORCLAS -DSNAME-\n ...>   YES DCLMPCNV (NULL)   SCLMPCNV PAPI.SEDOR\n\n)O OPERANDS -\n dsnamelist  - one or more data set or index level names. TSO naming\n               conventions are used.  If a specified name is an index\n               name, data sets under that level will be displayed.  If\n               no name is specified, the prefix will be used.  If no\n               name is specified and the profile specifies NOPREFIX,\n               the USERID will be used.\n\n               Note: if a keyword is entered, dsnamelist must be\n               specified. If dsnamelist is omitted, it will not default\n               to the prefix, but the keyword will be interpreted as\n               the dsnamelist, not a keyword.\n))SERIAL     - list volume names.\n))NOSERIAL   - do not list volume names.\n))SEQNO      - list file sequence numbers.\n))NOSEQNO    - do not list file sequence numbers.\n))DEVTYPE    - display device type code.\n))NODEVTYPE  - do not display device type code.\n))DEVICE     - list device name (3380, 9345, etc.).\n))NODEVICE   - do not list device name.\n))ALLOC      - list allocation information (tracks allocated, tracks\n               free, and extents).\n))NOALLOC    - do not list allocation information.\n))SECONDARY  - display secondary allocation information.\n))NOSECONDARY- do not display secondary allocation information.\n))DSORG      - list data set organization.\n))NODSORG    - do not list data set organization.\n))PDS        - list PDS directory information (blocks alloc, used,\n               entries, and aliases).\n))NOPDS      - do not list PDS directory information.\n))DCB        - list DCB information (RECFM, BLKSIZE, and LRECL).\n))NODCB      - do not list DCB information.\n))CRDATE     - list creation date.\n))NOCRDATE   - do not list creation date.\n))EXDATE     - list expiration date.\n))NOEXDATE   - do not list expiration date.\n))LASTREF    - display last date referenced\n))NOLASTREF  - do not display last date referenced.\n))CCHHR      - display Format 1 DSCB address.\n))NOCCHHR    - do not display CCHHR.\n))TOTALS     - display totals (tracks allocated, tracks free,\n             - and data sets displayed).\n))NOTOTALS   - do not display totals.\n))PRINT      - output is to be displayed.\n))NOPRINT    - output is not to be displayed, except for error\n               messages.\n))HEADER     - display a output header line.\n))NOHEADER   - do not display a header line.\n))ALL        - display all data set names under an index level.\n))DAONLY     - display data sets on mounted direct access devices.\n))GDGDATA    - information on generation data group indexes is to\n               be displayed.\n))NOGDGDATA  - generation data group data will not be displayed.\n))GENERIC    - name specifies a generic key.\n))DSONLY     - treat names as data set names, not index names.\n))VOLUME     - specifies the volume to be searched for the data set.\n))HARDCOPY   - specifies the ddname a pre-allocated data set to\n               receive a copy of DSAT output.\n))FULL       - format additional information for each data set: PDS,\n               EXDATE, DEVICE, GDGDATA, LASTREF, SECONDARY, CCHHR.\n\n               Other keywords (like NOPDS) may be specified after FULL\n               to turn off options selectively.\n))NOFULL     - do not format additional information.\n))EXTENTS    - format extent information for each data set following\n               the data set display line.\n\n               The following fields are formatted for each extent:\n                    EXT#       - extent number (0 TO 122)\n                    START/CCHH - starting CCHH hex address\n                    S/TRK      - starting CCHH in decimal\n                    END/CCHH   - ending CCHH hex address\n                    E/TRK      - ending CCHH in decimal\n                    LENGTH     - size of extent in tracks\n                    TYPE       - comments on extent use\n                                 CYL     - cylinder allocation\n                                 SHR     - sharing cylinder\n                                 USR LBL - user labels\n                                 IS INDX - ISAM index\n                                 IS OVFL - ISAM overflow\n))NOEXTENTS  - do not format extent information.\n))SMS        - display SMS information: DATACLAS, MGMTCLAS, STORCLAS\n))NOSMS      - do not display SMS information\n))RC         - specifies how the return code is to be set:\n               RC not specified:  4 - successful completion\n                                 16 - unable to interpret command\n               TALLOC               - total tracks used\n               TUSED                - total tracks used\n               TDIFF                - total overallocation\n                                      (talloc-tused)\n               LALLOC               - tracks allocated by last data\n                                      set\n               LUSED                - tracks used by last data set\n               LDIFF                - last data set overallocation\n                                      (lalloc-lused)\n               NUM                  - number of data sets displayed\n                                      (includes data sets not\n                                      found, etc.)\n               PREVIOUS             - assumes the return code of\n                                      the previous command.\n               DSORG                - sets the return code based\n                                      on the data set organization\n                                      of the data sets displayed.\n                                      1 - All data sets were SEQ\n                                      2 - All data sets were PDS\n                                      3 - Data sets were mixed PDS\n                                          and sequential\n                                      4 - An error occurred or a\n                                          data set other than PDS\n                                          or sequential was\n                                          processed\n               DIRALLOC - sets the return code to the\n                          number of directory blocks\n                          allocated.\n               DIRUSED  - sets the return code to the\n                          number of directory blocks\n                          used.\n               ENTRIES  - sets the return code to the\n                          number of entries in the\n                          directory (members and\n                          aliases).\n               ALIASES  - sets the return code to the\n                          number of aliases.\n               MEMBERS  - sets the return code to\n                          entries-aliases.\n=DSNAME=DSNAM=DSNA=DSN=DS\n)F  Example -     DSN\n\n   The DSNAME subcommand displays statistics on the current data\n   set allocation using message format PDS200I, PDS210I or PDS220I\n   depending on the last DSNAME operand (MSG, TSO, or JCL) entered.\n\n   Note: the DSNAME subcommand is automatically invoked for several\n   situations (such as in the CHANGE or FIXPDS subcommands).\n)X SYNTAX -\n     DSNAME  MSG / TSO / JCL\n\n ALIASES  - DS, DSN, DSNA, DSNAM\n DEFAULTS - initially MSG; thereafter, previous MSG/TSO/JCL\n REQUIRED - none.\n)O OPERANDS -\n))MSG       - specifies that allocation messages are to be in table\n              format using the PDS200I message.\n))TABLE     - specifies that allocation messages are to be in table\n              format using the PDS200I message.\n))TBL       - specifies that allocation messages are to be in table\n              format using the PDS200I message.\n))TSO       - specifies that allocation messages are to be in TSO\n              format using the PDS210I message.\n))JCL       - specifies that allocation messages are to be in JCL\n              format using the PDS220I message.\n))BATCH     - specifies that allocation messages are to be in JCL\n              format using the PDS220I message.\n=DSPRINT=DSPRIN=DSPRI=DSPR=DSP\n)F  Example -     DSPRINT mema:memb r130\n\n   The DSPRINT subcommand prints a hardcopy list of a member.  The\n   TSO DSPRINT command is used; any desired DSPRINT operands may\n   be added after the member name.\n)X SYNTAX -\n     DSPRINT  member printer DDNAME(ddname)  DIRECT(KEEP/DELETE)\n                             LINES(linenum1:linenum2)\n                             NUM(loc,length)/SNUM(loc,length)/NONUM\n                             FCB(fcbname)  FORMS(formname)\n                             CLASS(c)  HOLD/NOHOLD\n                             COL(col1:col2, ...)  COPIES(number)\n                             PAGELEN(num)  TMARGIN(num)  BMARGIN(num)\n                             SINGLE/DOUBLE/CCHAR\n                             FOLD(width)/TRUNCATE(width)\n                             EJECT/NOEJECT  NOEJMESS  NOHEADER\n                             TERMINAL  TRACE  WTR(wtrname)\n\n ALIASES  - DSP, DSPR, DSPRI, DSPRIN, DSPRINT\n DEFAULTS - NUM, CLASS(A), COPIES(1), NOHOLD, SINGLE, CCHAR, NOEJECT\n REQUIRED - member and printer\n NOTE     - The above operands are actually for the VPSPRINT product.\n)O OPERANDS -\n  member  - specifies the member name(s) to be passed (along with\n            the data set name) to the TSO DSPRINT command.\n\n            Default member names, member lists, member name\n            ranges and member name patterns are allowed; for\n            more information, enter HELP GROUP.\n\n  printer - specifies the name of the VTAM printer which is to\n            print this data set.\n\n operands - optional, may include any desired TSO DSPRINT operands.\n=DVOL=DVO=DV\n)F  Example -     DVOL tso long\n\n The DVOL command is used to display the amount of free space on a\n direct access device.\n\n DVOL will read the Format 4 and Format 5 DSCB's from the VTOC of a\n direct access volume and display:\n   1.  Volume name\n   2.  Unit address\n   3.  Mount status and device type\n   4.  Use status\n   5.  Number of blank DSCB's in the VTOC\n   6.  Condition of the VTOC indicators byte\n   7.  Percent used space\n   8.  Total free space in tracks\n   9.  Number of free extents\n  10.  Number of free cylinders\n  11.  Size of largest extents (up to 5) in cylinders + tracks\n  12.  Size of largest extents (up to 5) in tracks\n       -or-\n       User count\n\n   Return code: the return code is set to the total number of tracks\n                in the 5 largest extents (to a maximum of 4095) for\n                the last volume displayed.\n\n                If an error condition exists on the volume, the\n                return code will be set to 0.\n\n)X SYNTAX -\n     DVOL  (volumelist)/*\n           SHORT/LONG\n           USER/NOUSER\n           HEADER/NOHEADER\n           PRINT/NOPRINT\n           SERONLY\n           HARDCOPY(ddname)\n\n ALIASES  - DV, DVO, DVOL\n DEFAULTS - *, SHORT, HEADER, PRINT, NOUSER\n            Note: IF HARDCOPY is specified, NOPRINT is the default\n REQUIRED - none.\n\n SAMPLE OUTPUTS -\n\n 1. DVOL lds user\n SERIAL  --UNIT--   ATTRIB   %USED AVAIL -----TOTALS-----  LARGEST>USER\n        ADDR TYPE   MOUNT/USE      DSCBS TRACKS EXT   CYL   CYL+TR>COUNT\n LDS116 29C0 3390-9 RES/PRIV    39  4199  90242  12  6010  5501+10    14\n LDS900 2990 3390-9 RES/PRIV     0  4495 150110   2 10007  9961+ 5     1\n\n 2. DVOL lds116 long\n VOLUME SERIAL = LDS116     UNIT = 29C0    TYPE = 3390-9\n STATUS: RESIDENT   PRIVATE  ALLOCATED    ONLINE\n VTOC CONTAINS 4199 BLANK DSCB'S\n INDEXED VTOC CONTAINS  903 FREE VIR'S\n FREE SPACE IS  90242 TRACKS IN   12 EXTENTS INCLUDING  6010 FULL CYLIND\n LARGEST EXTENTS ARE: /CYL+TR/ 5501+10/  217+ 0/  156+20/  129+19/ 7+ 0/\n                      /TRACKS/   82525/    3255/    2360/    1954/  105/\n VOLUME IS   39 PERCENT USED\n\n)O OPERANDS -\n  volumelist  - is a list of one or more volume names of mounted\n                direct access volumes or partial volume names.\n\n                if no volume is entered, or if an * is specified, the\n                information is displayed for each direct access volume\n                on the system.\n\n                if a volume name is entered with a u followed by one\n                to three digits, the data is also used as a UCB name.\n\n))SHORT       - request short form output.\n))LONG        - request long form output.\n))USER        - User count is to be displayed.\n))NOUSER      - No user count is to be displayed.\n))HEADER      - display a short form header.\n))NOHEADER    - display no short form header.\n))PRINT       - display output.\n))NOPRINT     - display no output.\n))SERONLY     - display only a list of mounted volumes.\n))HARDCOPY    - specifies the DDNAME of a pre-allocated data set to\n                receive a copy of DVOL output.\n=EDIT=EDI=ED=E=SPFEDIT=SPFEDI=SPFED=SPFE=SPF=SP=S\n)F  Example -     EDIT mema:memb\n\n  The EDIT or SPFEDIT subcommand enters ISPF edit for a member\n  (for additional information on the relationship of -PDS86- and\n  ISPF edit, enter HELP DIALOG).\n\n  Note: on the first entry of an EDIT or SPFEDIT subcommand -PDS86-\n  will present any pending EDIT recovery sessions to you before\n  entering EDIT for a selected member.\n)X SYNTAX -\n     EDIT  member  OLD/NEW    MACRO(macname)    SM/SETMACRO(macname)\n                            PROFILE(profname)   SP/SETPROF(profname)\n\n ALIASES  - E, ED, EDI, EDIT, S, SP, SPF, SPFE, SPFED, SPFEDI, SPFEDIT\n DEFAULTS - member\n REQUIRED - none.\n)O OPERANDS -\n  member      - optional, specifies the name of the member(s) to be\n                edited.\n\n                Default member names, member lists, member name\n                ranges and member name patterns are allowed; for\n                more information, enter HELP GROUP.\n\n                Note - if : is entered for the member name position,\n                an ISPF member selection screen will be provided.\n\n))OLD         - -PDS86- will verify that the member exists before\n                invoking ISPF EDIT service.\n))NEW         - -PDS86- will verify that the member does not exist\n                before invoking ISPF EDIT service.\n))MACRO(m)    - For ISPF Version 2, this parameter may be used to\n                specify an initial edit macro name.\n))SM(mname)   - For ISPF Version 2, this parameter may be used to\n                specify a default initial edit macro name; to nullify\n                this parameter, you may enter SM(*).\n))SETMACRO(m) - For ISPF Version 2, this parameter may be used to\n                specify a default initial edit macro name; to nullify\n                this parameter, you may enter SETMACRO(*).\n))PROFILE(p)  - For ISPF Version 2, this parameter may be used to\n                specify the edit profile name (the supplied name will\n                be used instead of the low-level DSNAME qualifier).\n))SP(pname)   - For ISPF Version 2, this parameter may be used to\n                specify a default edit profile name; to nullify this\n                parameter, you may enter SP(*).\n))SETPROF(p)  - For ISPF Version 2, this parameter may be used to\n                specify a default edit profile name; to nullify this\n                parameter, you may enter SETPROF(*).\n=END=EN=QUIT=QUI=QU=Q\n)F  Example -     END\n\n  The END subcommand terminates the -PDS86- command.\n)X SYNTAX -\n     END\n\n ALIASES  - EN, END\n)O OPERANDS -\n  no operands are supported.\n=EDREC=EDRE=EDR\n)F  Example -     EDREC\n\n  The EDREC subcommand explicitly invokes ISPF edit recovery.\n)X SYNTAX -\n     EDREC\n\n ALIASES  - ED, EDR, EDRE, EDREC\n)O OPERANDS -\n  no operands are supported.\n=EXEC=EX=EXE=%\n)F  Example -     EXEC lib(clistmem) 'parms' list\n\n  The EXEC or % subcommand executes a CLIST containing -PDS86-\n  subcommands.  The TSO CLIST processor is used; both implicit (%... )\n  and explicit (EXEC ... ) call forms are supported.\n\n  Note: CLIST processing is not supported from MEMLIST or ISPMODE.\n\n  Note: when subcommands are entered from a CLIST (or in batch mode\n  or from a storage stack), YES/NO prompts are not provided; instead,\n  YES responses are assumed in each case.\n)X SYNTAX -\n     EXEC  clistname 'operands'   /     %clistmem  operands\n\n ALIASES  - %, EX, EXE, EXEC\n DEFAULTS - none.\n REQUIRED - clistname or clistmem\n)O OPERANDS -\n  clistname - specifies the CLIST data set name.\n\n  clistmem  - specifies the name of a member in the CLIST partitioned\n              data set allocated to FILE(SYSPROC).\n\n  operands  - optional, may include any parameters for the CLIST.\n=FIND=F=FI=FIN\n)F  Example -     FIND mema:memb /this data/\n\n  The FIND subcommand displays portions of a member which contain a\n  search string.  Optionally, the THEN or ELSE keywords may be entered\n  to allow conditional execution of other subcommands.\n\n  Unprintable characters for 3270-type devices are translated to\n  periods before they are displayed.\n\n  The FIND formats are NUM, SNUM, NONUM, LBLOCK, LDUMP, BLOCK and DUMP;\n  for load modules, the NUM, SNUM and NONUM formats are equivalent\n  to the LDUMP format.\n\n  The default format is initially NUM; however, each time a format\n  operand is entered on a LIST, FIND or REPLACE subcommand, the value\n  entered is used as the output format for subsequent LIST, FIND and\n  REPLACE subcommands.  Also, note the following:\n    A. Formats NUM, SNUM and NONUM limit the search and display length\n       for logical records to 256 characters.\n    B. Column 72 is not searched for formats NUM or SNUM if the record\n       format is fixed with 80 character records.\n    C. Formats BLOCK and DUMP apply to physical records; the other\n       formats apply to logical records; and for load modules, LBLOCK\n       and LDUMP formats apply to CSECT data.\n    D. Formats LBLOCK, LDUMP, BLOCK and DUMP display only those\n       segments of a record which contain the search string; however,\n       a following segment will also be displayed if the string spans\n       a segment boundary.\n)X SYNTAX -\n     FIND  member 'string' NUM/SNUM/NONUM/LBLOCK/LDUMP/BLOCK/DUMP\n                         CAPS/ASIS/IGNORE\n                         OFFSET(Hx) MODULE(Partm)\n                         SKIPREC(n) MAXIN(n) MAXOUT(n) MAXFIND(n)\n                         SKIPCOL(n) MAXLEN(n) FIRST/NOFIRST\n                     THEN(ATTRIB/ BROWSE/ DIRENTRY/ DELETE/ EDIT/ NEWML/\n                          END/ FIND/ FSE/ HISTORY/ LIST/ MAP/ MEMBERS/\n                          MEMLIST/ OUTCOPY/ PRINTOFF/ REVIEW/ SUBMIT/\n                          SUBLIST/ TSOEDIT/ TSOLIST/ VIEW/ VERIFY)\n                     ELSE(ATTRIB/ BROWSE/ DIRENTRY/ DELETE/ EDIT/ NEWML/\n                          END/ FIND/ FSE/ HISTORY/ LIST/ MAP/ MEMBERS/\n                          MEMLIST/ OUTCOPY/ PRINTOFF/ REVIEW/ SUBMIT/\n                          SUBLIST/ TSOEDIT/ TSOLIST/ VIEW/ VERIFY)\n\n ALIASES  - F, FI, FIN, FIND\n DEFAULTS - member, previous string,  CAPS,\n                    NUM or previous LIST/FIND/REPLACE format\n REQUIRED - none.\n)O OPERANDS -\n  member     -  optional, specifies the name of the member(s) to be\n                scanned.\n\n                Default member names, member lists, member name\n                ranges and member name patterns are allowed; for\n                more information, enter HELP GROUP.\n\n  string     -  optional, the string to be searched for.  It is coded\n                as a delimited string like +searched for+.  If the\n                string is not entered or is null, the last string\n                entered will be used. The string may contain one to\n                32 characters.  If the ASIS keyword is entered, the\n                string will not be translated to upper case letters.\n\n                As an alternative, hexadecimal data may be entered as\n                a string delimited with x's like x0123456789abcdefx.\n                Note that the string may contain one to 64 characters\n                and that x333x and x0333x are equivalent.\n\n  FIND format control keywords are as follows:\n))NUM        -  The line number field (the last 8 bytes of a fixed-\n                format record or the first 8 bytes otherwise) of\n                each logical record is examined; if the field is not\n                numeric, formatting is switched to NONUM mode for the\n                remainder of the member.\n\n                For ISPF-saved members, the high-order six digits of\n                the line number field is formatted; otherwise, the\n                low-order six digits of the line number field is\n                formatted by suppressing leading zeroes.  The line\n                number segment is followed by a blank and up to 249\n                characters of data from the logical record.\n))SNUM       -  The line number field (the last 8 bytes of a fixed-\n                format record or the first 8 bytes otherwise) is\n                discarded.  Up to 256 bytes from a logical record are\n                searched or displayed.\n))NONUM      -  Up to 256 bytes from a logical record are searched or\n                displayed.\n))LBLOCK     -  Logical records are formatted with two hexadecimal\n                offsets (displacement in the member and displacement\n                in the logical record) and segments of 64 characters\n                surrounded by asterisks.  Only formatted segments\n                which contain the search string are displayed;\n                however, a following segment will also be displayed\n                if the string spans a segment boundary.\n\n                Note: for load modules, only CSECT data will be\n                searched or displayed and if the partial name Partm is\n                entered in a MODULE operand, only those CSECT or ENTRY\n                names matching Partm will be searched or displayed.\n                CSECT records are formatted with two hexadecimal\n                offsets (a module offset and a CSECT offset) and\n                segments of 64 characters surrounded by asterisks.\n))LDUMP      -  Logical records are formatted with two hexadecimal\n                offsets (displacement in the member and displacement\n                in the logical record), segments of up to 32\n                characters of hexadecimal data and up to 16 bytes of\n                equivalent characters surrounded by asterisks.  Only\n                formatted segments which contain the search string\n                are displayed; however, a following segment will also\n                be displayed if the string spans a segment boundary.\n\n                Note: for load modules, only CSECT data will be\n                searched or displayed and if the partial name Partm is\n                entered in a MODULE operand, only those CSECT or ENTRY\n                names matching Partm will be searched or displayed.\n                CSECT records are formatted with two hexadecimal\n                offsets (a module offset and a CSECT offset), segments\n                of up to 32 characters of hexadecimal data and up to\n                16 bytes of characters surrounded by asterisks.\n))BLOCK      -  Physical records are formatted with two hexadecimal\n                offsets (displacement in the member and displacement\n                in the physical record) and segments of 64 characters\n                surrounded by asterisks.\n\n                Only formatted segments which contain the search string\n                are displayed; however, a following segment will also\n                be displayed if the string spans a segment boundary.\n))DUMP       -  Physical records are formatted with two hexadecimal\n                offsets (displacement in the member and displacement\n                in the physical record), segments of up to 32\n                characters of hexadecimal data and up to 16 bytes of\n                equivalent characters surrounded by asterisks.\n\n                Only formatted segments which contain the search string\n                are displayed; however, a following segment will also\n                be displayed if the string spans a segment boundary.\n  FIND search argument keywords are as follows:\n))CAPS        - default, if a character string search argument is\n                entered, it will be translated to upper case letters.\n))ASIS        - if specified, a character search argument will not be\n                translated to upper case letters.\n))IGNORE      - if specified, search for upper and lower-case data\n                matching the specified string.\n  FIND control keywords are as follows:\n))OFFSET(Hx)  - for LBLOCK and LDUMP formats only; Hx may be entered\n                as a 1 to six digit hexadecimal number to specify\n                the module offset at which the search is to begin.\n\n                If both MODULE AND OFFSET keywords are entered, the\n                offset applies to each module selected.\n))MODULE(Partm)-for LBLOCK or LDUMP formats only; Partm may be entered\n                as a 1 to 8 byte partial external name to limit the\n                CSECT or ENTRY names to be searched or displayed to\n                those matching the partial name Partm.\n\n                If the form MODULE(*) is used, the previous partial\n                name entered on any MODULE keyword will be used.\n\n                If both MODULE AND OFFSET keywords are entered, the\n                offset applies to each module selected.\n))SKIPREC(n)  - n is coded as 0 through 9999999 to specify the number\n                of logical records (physical records for BLOCK or\n                DUMP formats) to ignore at the beginning of a member.\n))MAXIN(n)    - n is coded as 0 through 9999999 to specify the maximum\n                number of logical records (physical records for BLOCK\n                or DUMP formats) to input for a member after\n                satisfying any SKIPREC operand.\n))MAXOUT(n)   - n is coded as 0 through 9999999 to specify the maximum\n                number of logical records (partial logical records for\n                LBLOCK or LDUMP formats; partial physical records for\n                BLOCK or DUMP formats) to output for a member.\n))MAXFIND(n)  - n is coded as 0 through 9999999 to specify the maximum\n                number of strings that are to be located.\n))SKIPCOL(n)  - n is coded as 0 through 99999 to specify the number\n                of columns to ignore at the beginning of each logical\n                record (physical record for BLOCK or DUMP formats).\n\n                Note: for NUM or SNUM output format with record\n                format V, SKIPCOL(0) refers to the first data position\n                after the line number field.\n))MAXLEN(n)   - n is coded as 0 through 99999 to specify the maximum\n                length of a logical record (physical record for BLOCK\n                or DUMP formats) to search or display.\n))FIRST       - Specifies that all remaining data in the member is\n                to be listed after the first occurrence of the string.\n))NOFIRST     - Specifies that only string matches are to be listed.\n  FIND conditional keywords are as follows:\n))THEN(action) - The THEN subcommand is executed if the string is\n                 found in a member.  The subcommand may be ATTRIB,\n                 BROWSE, DIRENTRY, DELETE, EDIT, END, FIND, FSE,\n                 HISTORY, LIST, MAP, MEMBERS, MEMLIST, NEWML, OUTCOPY,\n                 PRINTOFF, REVIEW, SUBMIT, SUBLIST, TSOEDIT, TSOLIST,\n                 VIEW or VERIFY.\n\n                 NEWML is similar to MEMLIST except it also performs\n                 a MEMLIST RESET.\n))ELSE(action) - The ELSE subcommand is executed if the string is not\n                 found in a member.  The subcommand may be ATTRIB,\n                 BROWSE, DIRENTRY, DELETE, EDIT, END, FIND, FSE,\n                 HISTORY, LIST, MAP, MEMBERS, MEMLIST, NEWML, OUTCOPY,\n                 PRINTOFF, REVIEW, SUBMIT, SUBLIST, TSOEDIT, TSOLIST,\n                 VIEW or VERIFY.\n\n                 NEWML is similar to MEMLIST except it also performs\n                 a MEMLIST RESET.\n=FIXPDS=FIXPD=FIXP=FIX\n)F  Example -     FIXPDS release recfm(fba)\n\n  The FIXPDS subcommand can perform several data set utility\n  functions for sequential, partitioned and PDSE data sets.\n\n  After the FIXPDS subcommand gains control, it writes messages\n  regarding the data set action to be taken and any potential error\n  conditions.  FIXPDS will prompt the user before making any data set\n  changes unless CONTROL NOPROMPT is in effect.\n\n\n  Following are more detailed implementation notes on several of the\n  different functions available through the FIXPDS subcommand:\n    A.  EXPANDDIR (expand the directory -- ignored for sequential)\n        or FREEDIR (adjust free blocks  -- ignored for sequential)\n        1.  If no members exist in the data set, RESET is used\n        2.  The names of any members that will be moved out of the\n            way of the expanded directory are listed\n        3.  If any of these members are in use by an ISPF edit session,\n            a warning message is issued\n        4.  As each member is moved, an informational message is issued\n        5.  The additional directory blocks are written\n\n    B.  RESET (reset the directory and the data set)\n        1.  If any members exist in the data set, a warning message\n            is issued\n        2.  If any members are in use by an ISPF edit session, a\n            warning message is issued\n        3.  The data set's directory blocks are rewritten with null\n            data, destroying any existing member information\n        4.  The end of data marker (DS1LSTAR) is reset to indicate\n            an empty partitioned data set.\n        5.  The RESET of a PDSE directory is done with the STOW\n            Initialize function.\n\n    C.  INITDIR (initialize the directory)\n        1.  If any members exist in the data set, a warning message\n            is issued\n        2.  If any members are in use by an ISPF edit session, a\n            warning message is issued\n        3.  The data set's directory blocks are rewritten with null\n            data, destroying any existing member information\n        4.  The end of data marker (DS1LSTAR) is not modified.\n\n    C.  DCB (modify the DCB attributes)\n        1.  If a data type keyword such as ASM, CLIST, CNTL, LOAD or\n            OBJECT is entered, RECFM and LRECL default values are\n            provided from a table and a BLKSIZE value is determined\n            based on the allocated device type\n        2.  If any RECFM, LRECL or BLKSIZE values are specifically\n            requested by keyword, these values will override the\n            values as determined from the data type keywords entered.\n        3.  The data set is opened for output with any new DCB\n            parameters\n\n    D.  Release operands: each operand formats a call to\n        the TSO RELEASE command as follows:\n        1.  RELEASE     - RELEASE 'data.set.name'          VOL(volume)\n        2.  RELEXT      - RELEASE 'data.set.name' EXTENT   VOL(volume)\n        3.  RELSAVE(nn) - RELEASE 'data.set.name' SAVE(nn) VOL(volume)\n\n    E.  MAXSPACE (mark all allocated space in use)\n        1.  All extents of the data set are marked in use by setting\n            the end of data marker (DS1LSTAR) value to the last disk\n            address for the data set.\n        2.  This could be used in conjunction with a RESTORE subcommand\n            to attempt to recover members which were deleted prior to a\n            data set compress.\n        3.  For example, the following sequence of subcommands could be\n            used to recover lost members after a PDS is destroyed by\n            sequential output to the directory (the new data blocks will\n            take one or more tracks followed by a blank track for the\n            end of file marker):\n            a.  FIXPDS MAXSPACE\n                (to mark all allocated space in use).\n            b.  FIXPDS INITDIR(80)\n                (to reinitialize the directory).\n            c.  RESTORE name REPEAT NOPROMPT NODISPLAY\n                (to restore all deleted members).\n            d.  VERIFY :\n                (to find invalid members after the previous DS1LSTAR).\n            e.  BROWSE name\n                (to scan contents of members)\n            f.  DELETE name\n                (to delete members not needed).\n            g.  Note: any members that were previously recorded on\n                the tracks overwritten by the sequential data or the\n                following track cannot be restored with this technique.\n\n    F.  ADDTRK or ADDCYL (add one secondary extent)\n        1.  An extent is added to the data set in the units given in\n            the subcommand.  For example, ADDTRK(12) will add one\n            secondary extent of 12 tracks while ADDCYL(4) will add\n            one secondary extent of 4 cylinders.\n        2.  Note that this operation is independent of any secondary\n            extent information associated with the data set; it can\n            add a single extent of the specified size to a data set\n            even if the data set was allocated without secondary\n            extents.\n\n  Caution: this subcommand modifies the data set. To ensure data set\n  integrity, you should allocate the data set as OLD or be aware of\n  the data set update protection provided by the -PDS86- command for\n  SHR allocations (for details, enter HELP UPDATE).\n)X SYNTAX -\n     FIXPDS  EXPANDDIR(Addblks) / FREEDIR(#unused) /\n                       DCB / RESET(Totblks) /*RESET / INITDIR(rblks) /\n                      *STOWINIT\n                       CHECK/NOCHECK\n             RELEASE / RELEXTENT / RELSAVE(trks) /\n                       MAXSPACE  / ADDTRK(trka)  / ADDCYL(cyla)\n             ASM / CLIST / CNTL / LOAD / OBJECT\n             RECFM(F/FB/FT/FBT/FA/FBA/FTA/FBTA/FM/FBM/FTM/FBTM/\n                   V/VB/VT/VBT/VA/VBA/VTA/VBTA/VM/VBM/VTM/VBTM/\n                   U/UT/UA/UM/UTA/UTM)\n             LRECL(L1)\n            *BLKSIZE(L2)\n            *OPTCD(W/WC/WCZ/C/CZ/Z) /*NOOPTCD\n\n ALIASES  - FIX, FIXP, FIXPD, FIXPDS\n DEFAULTS - DCB, CHECK\n            RECFM(previous value), LRECL(previous value),\n            BLKSIZE(previous value), OPTCD(previous value)\n REQUIRED - none.\n *NOTE    - Items with an asterisk are supported for PDSE data sets.\n)O OPERANDS -\n))EXPANDDIR(Addblks) - specifies that the directory is to be expanded\n                       by the number of specified directory blocks.\n                       Addblks may be entered as a number from 0\n                       through 99999 and it defaults to 50.\n))FREEDIR(#unused)   - specifies that the directory is to be adjusted\n                       as necessary to obtain the number of unused\n                       directory blocks specified.  #unused may be\n                       entered as a number from 0 through 99999 and\n                       it defaults to 5.\n))DCB                - specifies that the DCB for the data set is to be\n                       modified.\n))RESET(Totblks)     - specifies that the directory is to be over-\n                       written with null directory blocks.  Totblks may\n                       be entered as a number from 1 through 99999 and\n                       it defaults to the number of directory blocks\n                       already allocated.  After the directory blocks\n                       are written, the end of data marker (DS1LSTAR)\n                       is reset to indicate a null partitioned data set.\n))RESET              - specifies that the data set is to be reset to\n                       a null data set.  EMPTY is an alias for RESET.\n))INITDIR(rblks)     - specifies that the directory is to be over-\n                       written with null directory blocks.  Rblks may\n                       be entered as a number from 1 through 99999 and\n                       it defaults to the number of directory blocks\n                       already allocated.\n))STOWINIT           - specifies that the data set is to be reset to\n                       a null data set via the STOW Initialize option.\n))CHECK              - specifies that each member should be checked to\n                       see if it is being edited for options RESET and\n                       INITDIR.\n))NOCHECK            - specifies that no edit check is desired.\n))RELEASE            - specifies that any unused space is to be\n                       returned to the system by the TSO RELEASE\n                       command.  If the data set was allocated with\n                       cylinder boundaries, space will be returned\n                       to the system in cylinder increments.\n))RELEXTENT          - specifies that any unused disk extents are to\n                       returned to the system by the TSO RELEASE\n                       command.\n))RELSAVE(nnn)       - specifies that any unused space (except for\n                       the first nnn tracks) are to be returned to\n                       the system by the TSO RELEASE command.  If\n                       the data set was allocated with cylinder\n                       boundaries, space will be returned to the\n                       system in cylinder increments.\n))MAXSPACE           - specifies that the all extents of the data set\n                       are to be marked \"in-use\" by adjusting the\n                       end of data set marker (DS1LSTAR).  This could\n                       be used after a data set compress to RESTORE\n                       members after the used portion of the data set.\n))ADDTRK(trka)       - specifies a number of disk tracks that are to\n                       be added as a single secondary extent.  Note\n                       that this operation is independent of secondary\n                       space indicators from the data set label.\n))ADDCYL(cyla)       - specifies a number of disk cylinders that are\n                       to be added as a single secondary extent.  Note\n                       that this operation is independent of secondary\n                       space indicators from the data set label.\n))ASM         - specifies the equivalent of RECFM(FB) LRECL(80) and\n                the following BLKSIZE values.  Note that RECFM, LRECL\n                and BLKSIZE may also be explicitly specified.\n\n    DEVICE      2314   3330   3340   3350   3375   3380   3390\n                ----   ----   ----   ----   ----   ----   ----\n    BLKSIZE     3520   6400   4080   6160   6800   6320  27920\n\n))CLIST       - specifies the equivalent of RECFM(VB) LRECL(255) and\n                the following BLKSIZE values.  Note that RECFM, LRECL\n                and BLKSIZE may also be explicitly specified.\n\n    DEVICE      2314   3330   3340   3350   3375   3380   3390\n                ----   ----   ----   ----   ----   ----   ----\n    BLKSIZE     2296   4252   1964   6232   6816   6356  27998\n\n))CNTL        - specifies the equivalent of RECFM(FB) LRECL(80) and\n                the following BLKSIZE values.  Note that RECFM, LRECL\n                and BLKSIZE may also be explicitly specified.\n\n    DEVICE      2314   3330   3340   3350   3375   3380   3390\n                ----   ----   ----   ----   ----   ----   ----\n    BLKSIZE     3520   6400   4080   6160   6800   6320  27920\n\n))LOAD        - specifies the equivalent of RECFM(U) and the following\n                BLKSIZE values.  Note that RECFM and BLKSIZE may also\n                be explicitly specified.\n\n    DEVICE      2314   3330   3340   3350   3375   3380   3390\n                ----   ----   ----   ----   ----   ----   ----\n    BLKSIZE     7294  13030   8368  19069  19069  32760  32760\n\n))OBJECT      - specifies the equivalent of RECFM(FB) LRECL(80) and\n                the optimal BLKSIZE for the device which does not\n                exceed 3200 bytes as follows.  Note that RECFM, LRECL\n                and BLKSIZE may also be explicitly specified.\n\n    DEVICE      2314   3330   3340   3350   3375   3380   3390\n                ----   ----   ----   ----   ----   ----   ----\n    BLKSIZE     2240   3120   2640   2960   3200   3120   3120\n\n))RECFM(Newr) - specifies a new DCB RECFM value for the data set.\n                Newr defaults to its previous value for the data set\n                or may be entered as any one of the following:\n                F, FB, FT, FBT, FA, FBA, FTA, FBTA, FM, FBM, FTM, FBTM,\n                V, VB, VT, VBT, VA, VBA, VTA, VBTA, VM, VBM, VTM, VBTM,\n                U, UT, UA, UM, UTA or UTM.\n))LRECL(L1)   - specifies a new DCB LRECL value for the data set.\n                L1 defaults to its previous value for the data set\n                or may be entered as a number from 1 through 32767.\n))BLKSIZE(L2) - specifies a new DCB BLKSIZE value for the data set.\n                L2 defaults to its previous value for the data set\n                or may be entered as a number from 1 through 32767.\n                Note:  enter 99999 for PDS-determined blocksize (PDB).\n                This is for fixed and variable formats.\n))OPTCD(Newo) - specifies the desired OPTCD value for the data set.\n                Newo defaults to its previous value for the data set\n                or may be changed to any of the following:\n                W, WC, WCZ, C, CZ or Z.\n))NOOPTCD     - specifies that any current OPTCD value (from W, C or Z)\n                is to be turned off.\n=FSE=FS\n)F  Example -     FSE mema:memb cntl\n\n The FSE subcommand edits a member.  The TSO FSE command is used;\n both the FSE+ product from Applied Software, Inc. and the command\n called FSE from the CBT MVS SHARE tape (file 207) are compatible\n with the interface provided by this subcommand.\n\n If an EDIT type keyword is entered, that keyword is passed to FSE\n as the descriptive qualifier; otherwise, a descriptive qualifier is\n chosen as follows:\n   A. If the low-level qualifier of the partitioned data set name is\n      one of the valid descriptive qualifiers for FSE (ASM, BASIC,\n      CLIST, CNTL, COBOL, DATA, IPLI, LIST, PLI, TEXT or VSBASIC),\n      that qualifier is passed to FSE.\n   B. If the low-level qualifier is FORT, GOFORT is passed to FSE.\n   C. Otherwise, the data type qualifier is not a valid descriptive\n      qualifier and the general descriptive qualifier, DATA, is\n      passed to FSE.\n)X SYNTAX -\n     FSE  member NONUM ASIS  OLD/NEW\n                 ASM/BASIC/CLIST/CNTL/COBOL/DATA/\n                 FORTE/FORTG/FORTGI/FORTH/GOFORT/\n                 IPLI/LIST/PLI/PLIF/TEXT/VSBASIC\n\n ALIASES  - FS, FSE\n DEFAULTS - member, EDIT type based on the data set name\n REQUIRED - none.\n)O OPERANDS -\n  member  - optional, specifies the member name(s) to be passed (along\n            with the data set name) to the TSO FSE command.\n\n            Default member names, member lists, member name\n            ranges and member name patterns are allowed; for\n            more information, enter HELP GROUP.\n\n))NONUM   - specifies that the member is to be edited without line\n            numbers.\n))ASIS    - specifies that the member is to be edited with upper and\n            lower case data.\n))OLD     - specifies that -PDS86- is to verify that the member\n            exists before calling FSE.\n))NEW     - specifies that -PDS86- is to verify that the member\n            does not exist before calling FSE.\n\n EDIT type keywords are as follows:\n))ASM     -  EDIT type is assembly\n))BASIC   -  EDIT type is BASIC\n))CLIST   -  EDIT type is CLIST\n))CNTL    -  EDIT type is CNTL\n))COBOL   -  EDIT type is COBOL\n))DATA    -  EDIT type is DATA\n))FORTE   -  EDIT type is FORTRAN level \"E\"\n))FORTG   -  EDIT type is FORTRAN level \"G\"\n))FORTGI  -  EDIT type is FORTRAN level \"GI\"\n))FORTH   -  EDIT type is FORTRAN level \"H\"\n))GOFORT  -  EDIT type is GOFORT\n))IPLI    -  EDIT type is IPLI\n))LIST    -  EDIT type is LIST\n))PLI     -  EDIT type is PLI\n))PLIF    -  EDIT type is PLI (F-level)\n))TEXT    -  EDIT type is TEXT\n))VSBASIC -  EDIT type is VSBASIC\n=HELP=H=HE=HEL\n)F  Example -     HELP control s\n\n  The HELP subcommand lists data from the HELP data set.  The TSO\n  HELP command is used; if the HELP subcommand is entered without\n  operands, a list of valid subcommands is displayed.\n)X SYNTAX -\n     HELP  subcommand FUNCTION SYNTAX OPERAND/OPERAND(k)\n\n ALIASES  - H, HE, HEL, HELP\n DEFAULTS - none.\n REQUIRED - none.\n)O OPERANDS -\n  subcommand - optional, specifies the name of a subcommand (or the\n               alias name of a subcommand) for which HELP is to be\n               displayed.  If the subcommand name is omitted, a list\n               of valid subcommands is displayed.\n\n))FUNCTION   - specifies that function information for the subcommand\n               is to be displayed.\n))SYNTAX     - specifies that syntax information for the subcommand\n               is to be displayed.\n))OPERAND(k) - specifies that information for the keyword identified\n               in the (k) operand is to be displayed.  If the (k)\n               operand is omitted, information on all operands of the\n               subcommand will be displayed.\n=HISTORY=HI=HIS=HIST=HISTO=HISTOR\n)F  Example -     HISTORY mema:memb\n\n The HISTORY subcommand displays the last linkage edit date for a\n module and lists any CSECT IDR data assigned to a load module.\n\n If any CSECTS in a load member were compiled by a COBOL compiler,\n several compile time options will be listed for each COBOL CSECT.\n\n Note: if a member is not a load module, any ISPF statistics or any\n SSI information will be displayed for the member and any HISTORY\n keyword information will be ignored.  If the LONG operand is\n specified, ISPF size statistics will be displayed in 99,999,999\n format.\n)X SYNTAX -\n     HISTORY  member  MODULE(Partm)\n                      LKED(Partl)\n                      TRANS(Partt)\n                      USERDATA(Partu) / SYSMOD(Partu)\n                      ZAP(Partz)\n                      LONG\n\n ALIASES  - HI, HIS, HIST, HISTO, HISTOR, HISTORY\n DEFAULTS - member, TRANS/NOTRANS from CONTROL, LKED, USERDATA, ZAP;\n            but if LKED, USERDATA, ZAP or TRANS are specified, only\n            the corresponding types of data will be provided.\n REQUIRED - none.\n)O OPERANDS -\n  member         - optional, specifies the name of the load module(s)\n                   for which a HISTORY summary is to be produced.\n\n                   Default member names, member lists, member name\n                   ranges and member name patterns are allowed; for\n                   more information, enter HELP GROUP.\n\n))MODULE(Partm)  - specifies that CSECTS defined by the partial name,\n                   Partm, are to be listed. Partm may be entered as a\n                   partial CSECT name with one to eight characters.\n\n                   Note that if MODULE(Partm) is entered, any TRANS,\n                   SYSMOD/USERDATA or ZAP keywords apply only to CSECTs\n                   whose names match the partial CSECT name, Partm.\n\n                   If the form MODULE(*) is used, the previous partial\n                   name entered on any MODULE keyword will be used.\n))LKED(Partl)    - specifies that if the linkage editor name matches\n                   the partial name, Partl, a line identifying the\n                   editor is to be listed. Partl may be entered as a\n                   partial linkage editor name with one to ten\n                   characters.\n))SYSMOD(Partu)  - specifies that user IDR data which matches the\n                   partial name, Partu, is to be listed. Partu may\n                   be entered as partial IDR data with one to eight\n                   characters.\n                   Note that if MODULE(Partm) is also entered, any\n                   SYSMOD operand applies only to CSECT's whose names\n                   match the partial CSECT name, Partm.\n))TRANS(Partt)   - specifies that CSECTS identified as having been\n                   assembled or compiled by the translator defined by\n                   the partial name, Partt, are to be listed. Partt\n                   may be entered as a partial translator name with\n                   one to ten characters.\n                   Note that if MODULE(Partm) is also entered, any\n                   TRANS operand applies only to CSECT's whose names\n                   match the partial CSECT name, Partm.\n))USERDATA(Partu) - specifies that user IDR data which matches the\n                   partial name, Partu, is to be listed. Partu may\n                   be entered as partial IDR data with one to eight\n                   characters.\n                   Note that if MODULE(Partm) is also entered, any\n                   USERDATA operand applies only to CSECT's whose names\n                   match the partial CSECT name, Partm.\n))ZAP(Partz)     - specifies that zap IDR data which matches the\n                   partial name, Partz, is to be listed. Partz may be\n                   entered as partial zap IDR data with one to eight\n                   characters.\n                   Note that if MODULE(Partm) is also entered, any\n                   ZAP operand applies only to CSECT's whose names\n                   match the partial CSECT name, Partm.\n))LONG           - display ISPF size statistics in 99,999,999 format.\n=IF=I\n)F  Example -     IF mema:memb changed(11/24/84:11/30/84) then(edit)\n\n  The IF subcommand searches for members meeting defined conditions.\n  The action to be taken is specified by the THEN and ELSE keywords.\n  Either the THEN or ELSE keyword may be omitted; if both THEN and ELSE\n  are omitted, a default of THEN(ATTRIB) is provided.\n\n  If all conditions are met for a given member, any THEN action is\n  taken for that member; otherwise, any ELSE action is taken.\n\n)X SYNTAX -\n     IF  member  SINCE/BEFORE\n                 TODAY/YESTERDAY/WEEK/CURRENT/BIWEEK/\n                       MONTH/BIMONTH/QUARTER/HALFYEAR/YEAR/BIYEAR/\n                       LAST(numdays)/DATE(mm/dd/yy)/\n                       PREV0/PREV1/PREV2/PREV3/PREV4/PREV5/PREV6/PREV7/\n                       PREV8/PREV9/PREV10/PREV11/PREV12/PREV13/PREV14\n                 CHANGED(yyddd:yyddd) / CHANGED(mm/dd/yy:mm/dd/yy)\n                 CREATED(yyddd:yyddd) / CREATED(mm/dd/yy:mm/dd/yy)\n                 ABOVE(Count1)\n                 ALIAS/NOALIAS\n                 AMODE24/AMODE31/AMODE64/AMODEANY/NOAMODE24/NOAMODE31/\n                         NOAMODE64/NOAMODEANY  (load modules only)\n                 APFERR/NOAPFERR               (load modules only)\n                 APPARENTALIAS/NOAPPARENTALIAS\n                 AUTH/NOAUTH  or  APF/NOAPF    (load modules only)\n                 BELOW(Count2)\n                 BLOCKERR/MAXBLK(size)/NOBLOCKERR\n                 DC/NODC                       (load modules only)\n                 EDIT/NOEDIT                   (load modules only)\n                 EXEC/NOEXEC                   (load modules only)\n                 EXTERN/WKEXTERN               (load modules only)\n                 FLEVEL/NOFLEVEL               (load modules only)\n                 HASALIAS/NOHASALIAS\n                 ID(Puid)/NOID/NOTID(Puid)\n                 XSTATS/NOXSTATS\n                 IOERR/NOIOERR\n                 LKED(Partl)                   (load modules only)\n                 LKEDERR/NOLKEDERR             (load modules only)\n                 LOADERR/NOLOADERR             (load modules only)\n                 LOADONLY/NOLOADONLY           (load modules only)\n                 LRECLERR/NOLRECLERR\n                 MODULE(Partm)                 (load modules only)\n                 NAMEERR/NONAMEERR\n                 NULL/NONULL\n                 ORPHAN/NOORPHAN\n                 OVERLAY/NOOVERLAY             (load modules only)\n                 PACKED/NOPACKED\n                 PAGE/NOPAGE                   (load modules only)\n                 REFR/NOREFR                   (load modules only)\n                 RENT/NORENT                   (load modules only)\n                 REUS/NOREUS                   (load modules only)\n                 RLDERR/NORLDERR               (load modules only)\n                 RLDZERO/NORLDZERO             (load modules only)\n                 RMODE24/RMODEANY/\n                         NORMODE24/NORMODEANY  (load modules only)\n                 SCTR/NOSCTR                   (load modules only)\n                 SPFEDIT/NOSPFEDIT\n                 SSI(hexdata)/SSI/NOSSI/PARTSSI(hexdata)\n                 SYSMOD(Partu) / USERDATA(Partu) (load modules only)\n                 TEST/NOTEST                   (load modules only)\n                 TRANS(Partt)                  (load modules only)\n                 TTR(Lttr:Httr)\n                 USERDATA(Partu) / SYSMOD(Partu) (load modules only)\n                 USERID(Puid)/NOUSERID/NOTUSERID(Puid)\n                 VSLKED/NOVSLKED               (load modules only)\n                 ZAP(Partz)                    (load modules only)\n                 THEN(ATTRIB/ BROWSE/ DIRENTRY/ DELETE/ EDIT/ NEWML/\n                      END/ FIND/ FSE/ HISTORY/ LIST/ MAP/ MEMBERS/\n                      MEMLIST/ OUTCOPY/ PRINTOFF/ REVIEW/ SUBMIT/\n                      SUBLIST/ TSOEDIT/ TSOLIST/ VIEW/ VERIFY)\n                 ELSE(ATTRIB/ BROWSE/ DIRENTRY/ DELETE/ EDIT/ NEWML/\n                      END/ FIND/ FSE/ HISTORY/ LIST/ MAP/ MEMBERS/\n                      MEMLIST/ OUTCOPY/ PRINTOFF/ REVIEW/ SUBMIT/\n                      SUBLIST/ TSOEDIT/ TSOLIST/ VIEW/ VERIFY)\n\n ALIASES  - I, IF\n DEFAULTS - member, THEN(ATTRIB) if neither THEN nor ELSE is entered\n REQUIRED - none\n)O OPERANDS -\n  member         - optional, specifies the name of the member(s) whose\n                   attributes are to be examined.\n\n                   Default member names, member lists, member name\n                   ranges and member name patterns are allowed; for\n                   more information, enter HELP GROUP.\n\n))SINCE          - dates from the specified date to the current date.\n                   SINCE indicates that the implied date range (TODAY,\n                   YESTERDAY, ... LAST, DATE) follows the date given.\n                   For source modules, the date referenced is the ISPF\n                   modification date; for load modules, it is the\n                   linkage edit date.\n))FROM           - dates from the specified date to the current date.\n                   FROM indicates that the implied date range (TODAY,\n                   YESTERDAY, ... LAST, DATE) follows the date given.\n                   For source modules, the date referenced is the ISPF\n                   modification date; for load modules, it is the\n                   linkage edit date.\n))BEFORE         - dates before (and including) the specified date.\n                   BEFORE indicates that the implied date range (TODAY,\n                   YESTERDAY, ... LAST, DATE) is before the given date.\n                   For source modules, the date referenced is the ISPF\n                   modification date; for load modules, it is the\n                   linkage edit date.\n))TO             - dates before (and including) the specified date.\n                   TO indicates that the implied date range (TODAY,\n                   YESTERDAY, ... LAST, DATE) is before the given date.\n                   For source modules, the date referenced is the ISPF\n                   modification date; for load modules, it is the\n                   linkage edit date.\n))TODAY          - a date, equivalent to LAST(0)\n))YESTERDAY      - a date, equivalent to LAST(1)\n))WEEK           - a date, equivalent to LAST(7)\n))CURRENT        - a date, equivalent to LAST(10)\n))BIWEEK         - a date, equivalent to LAST(14)\n))MONTH          - a date, equivalent to LAST(30)\n))BIMONTH        - a date, equivalent to LAST(60)\n))QUARTER        - a date, equivalent to LAST(90)\n))HALFYEAR       - a date, equivalent to LAST(183)\n))YEAR           - a date, equivalent to LAST(365)\n))BIYEAR         - a date, equivalent to LAST(730)\n))LAST(numdays)  - a date, indicates the number of days before today.\n))DATE(cdate)    - a date, indicates the actual date; it may be\n                   entered in Gregorian format (mm/dd/yy),\n                   ISPF format (yy/mm/dd), or Julian format (yyddd).\n                   Note:  ISPF format assumed if yy is >= 60.\n))PREV0          - a date, equivalent to LAST(0)\n))PREV1          - a date, equivalent to LAST(1)\n))PREV2          - a date, equivalent to LAST(2)\n))PREV3          - a date, equivalent to LAST(3)\n))PREV4          - a date, equivalent to LAST(4)\n))PREV5          - a date, equivalent to LAST(5)\n))PREV6          - a date, equivalent to LAST(6)\n))PREV7          - a date, equivalent to LAST(7)\n))PREV8          - a date, equivalent to LAST(8)\n))PREV9          - a date, equivalent to LAST(9)\n))PREV10         - a date, equivalent to LAST(10)\n))PREV11         - a date, equivalent to LAST(11)\n))PREV12         - a date, equivalent to LAST(12)\n))PREV13         - a date, equivalent to LAST(13)\n))PREV14         - a date, equivalent to LAST(14)\n))CHANGED(yyddd: - specifies that members which were modified by an\n                   ISPF editor or a ZAP program between the dates\n                   specified are desired.  If only a single date is\n                   entered, only that date is checked.  Note that only\n                   members with ISPF statistics or members created by a\n                   linkage editor are supported.\n                   Either of the following examples are equivalent:\n                   CHANGED(85001:85074) and  CHANGED(1/1/85:3/15/85)\n))CREATED(yyddd: - specifies that members which were created with ISPF\n                   statistics or by the linkage editor between the\n                   dates specified are desired.  If only a single date\n                   is entered, only that date is checked.\n                   Either of the following examples are equivalent:\n                   CREATED(85001:85074) and  CREATED(1/1/85:3/15/85)\n))ABOVE(Count1)  - specifies that members with more than the number of\n                   lines (amount of storage for load modules) defined\n                   by the number, Count1, are desired.\n))ALIAS          - specifies that alias members are desired.\n))NOALIAS        - specifies that main members are desired.\n))AMODE24        - specifies that modules with addressing mode 24 are\n                   desired.\n))NOAMODE24      - specifies that modules with addressing mode 31, 64,\n                   or ANY are desired.\n))AMODE31        - specifies that modules with addressing mode 31 are\n                   desired.\n))NOAMODE31      - specifies that modules with addressing mode 24, 64,\n                   or ANY are desired.\n))AMODE64        - specifies that modules with addressing mode 64 are\n                   desired.\n))NOAMODE64      - specifies that modules with addressing mode 24, 31,\n                   or ANY are desired.\n))AMODEANY       - specifies that modules with addressing mode ANY\n                   are desired.\n))NOAMODEANY     - specifies that modules with addressing mode 24, 64,\n                   or 31 are desired.\n))APFERR         - specifies that modules linked by the MVS OS/VS\n                   linkage editor with invalid APF length indicators\n                   are desired.\n))NOAPFERR       - specifies that modules linked by the MVS OS/VS\n                   linkage editor with valid APF length indicators\n                   or modules linked with previous linkage editors\n                   are desired.\n))APPARENTALIAS  - specifies that main members whose start addresses\n                   match the start address of another main member\n                   are desired.\n))NOAPPARENTALIAS - specifies that alias members or main members whose\n                   start addresses do not match the start address of\n                   another main member are desired.\n))AUTH           - specifies that APF authorized modules are desired.\n))NOAUTH         - specifies that non-authorized modules are desired.\n))APF            - specifies that APF authorized modules are desired.\n))NOAPF          - specifies that non-authorized modules are desired.\n))BELOW(Count2)  - specifies that members with less than the number of\n                   lines (amount of storage for load modules) defined\n                   by the number, Count2, are desired.\n))BLOCKERR       - specifies that members with input blocksizes\n                   exceeding the DCB BLKSIZE are desired.\n))MAXBLK(sizeb)  - specifies that members with input blocksizes\n                   exceeding sizeb are desired.\n))NOBLOCKERR     - specifies that members without blocksize errors\n                   are desired.\n))DC             - specifies that downward-compatible modules are\n                   desired.\n))NODC           - specifies that no downward-compatible modules are\n                   desired.\n))EDIT           - specifies that modules which can be reprocessed\n                   by the linkage editor are desired.\n))NOEDIT         - specifies that modules which can not be reprocessed\n                   by the linkage editor are desired.\n))EXEC           - specifies that EXECUTABLE modules are desired.\n))NOEXEC         - specifies that non-EXECUTABLE modules are desired.\n))EXTERN         - specifies that load modules with missing external\n                   symbols are desired.  The MODULE keyword may also\n                   be specified to search for specific missing symbols.\n))WKEXTERN       - specifies that load modules missing weak external\n                   symbols are desired.  The MODULE keyword may also\n                   be specified to search for specific missing symbols.\n))FLEVEL         - specifies that modules processed by the\n                   F-level linkage editor are desired.\n))NOFLEVEL       - specifies that modules not processed by the\n                   F-level linkage editor are desired.\n))HASALIAS       - specifies that main members which have one or more\n                   aliases are desired.\n))NOHASALIAS     - specifies that alias members or main members without\n                   any aliases are desired.\n))ID(Puid)       - specifies that members with ISPF statistics and\n                   userids matching the partial name, Puid, are\n                   desired.  Puid may be entered as a partial TSO\n                   userid with one to eight characters.\n                   ID is an alias of USERID.\n))NOID           - specifies that members without ISPF statistics are\n                   desired.  NOID is an alias of NOUSERID.\n))NOTID(Puid)    - specifies that members without ISPF statistics or\n                   members with ISPF statistics and userids which do\n                   not match the partial name, Puid, are desired.\n                   Puid may be entered as a partial TSO userid with\n                   one to eight characters.\n                   NOTID is an alias of NOTUSERID.\n))XSTATS         - specifies that members with extended ISPF\n                   statistics are desired.\n))NOXSTATS       - specifies that members without extended ISPF\n                   statistics are desired.\n))IOERR          - specifies that members with I/O errors are\n                   desired.\n))NOIOERR        - specifies that members without I/O errors are\n                   desired.\n))LKED(Partl)    - specifies that modules identified as linked by the\n                   linkage editor defined by the partial name, Partl,\n                   are desired.  Partl may be entered as a partial\n                   linkage editor IDR name with one to ten characters.\n))LKEDERR        - specifies that modules with any of the following\n                   illegal linkage edit attribute combinations are\n                   desired:\n                     1.  Modules with RENT and NOREUS attributes\n                     2.  Modules with RMODEANY and AMODE24 or\n                         AMODEANY attributes\n                     3.  Modules with OVLY and RENT, REUS, REFR, SCTR,\n                         RMODEANY, AMODE31, AMODE64, or AMODEANY\n                         attributes\n                     4.  Modules with TEST and NOEDIT attributes\n                     5.  Modules with REUS and SCTR attributes\n))NOLKEDERR      - specifies that modules with none of the following\n                   illegal linkage edit attribute combinations are\n                   desired:\n                     1.  Modules with RENT and NOREUS attributes\n                     2.  Modules with RMODEANY and AMODE24 or\n                         AMODEANY attributes\n                     3.  Modules with OVLY and RENT, REUS, REFR, SCTR,\n                         RMODEANY, AMODE31, AMODE64, or AMODEANY\n                         attributes\n                     4.  Modules with TEST and NOEDIT attributes\n                     5.  Modules with REUS and SCTR attributes\n))LOADERR        - specifies that modules which cause ABENDs when\n                   they are LOADED are desired.\n))NOLOADERR      - specifies that modules which can be LOADED\n                   without errors are desired.\n))LOADONLY       - specifies that modules marked for LOAD ONLY\n                   are desired.\n))NOLOADONLY     - specifies that modules not marked for LOAD ONLY\n                   are desired.\n))LRECLERR       - specifies that members with any of the following\n                   errors are desired:\n                     a.  Input blocksize/LRECL not integral (RECFM=F)\n                     b.  Input LRECL exceeding maximum LRECL (RECFM=V)\n                     c.  Input LRECL less than 4 bytes (RECFM=V)\n))NOLRECLERR     - specifies that members with none of the following\n                   LRECL errors are desired:\n                     a.  Input blocksize/LRECL not integral (RECFM=F)\n                     b.  Input LRECL exceeding maximum LRECL (RECFM=V)\n                     c.  Input LRECL less than 4 bytes (RECFM=V)\n))MODULE(Partm)  - specifies that modules with CSECTS defined by the\n                   partial name, Partm, are desired.  Partm may be\n                   entered as a partial CSECT name with one to eight\n                   characters.\n\n                   Note that if MODULE(Partm) is entered, any TRANS,\n                   SYSMOD/USERDATA or ZAP keywords apply only to CSECTs\n                   whose names match the partial CSECT name, Partm.\n\n                   If the form MODULE(*) is used, the previous partial\n                   name entered on any MODULE keyword will be used.\n))NAMEERR        - specifies that members whose member names are not\n                   upper case alphanumeric or whose first character\n                   is numeric are desired.\n))NONAMEERR      - specifies that members whose member names are\n                   upper case alphanumeric and whose first character\n                   is not numeric are desired.\n))NULL           - specifies that members with no data are desired.\n))NONULL         - specifies that members with some data are desired.\n))ORPHAN         - specifies that alias members which have no\n                   associated main member are desired.\n))NOORPHAN       - specifies that main members or alias members which\n                   have an associated main member are desired.\n))OVERLAY        - specifies that OVERLAY modules are desired.\n))NOOVERLAY      - specifies that non-OVERLAY modules are desired.\n))PACKED         - specifies that ISPF packed source members are\n                   desired.\n))NOPACKED       - specifies that ISPF packed source members are not\n                   desired.\n))PAGE           - specifies that modules marked for loading on\n                   a page boundary are desired.\n))NOPAGE         - specifies that modules not marked for loading on\n                   a page boundary are desired.\n))REFR           - specifies that refreshable modules are desired.\n))NOREFR         - specifies that non-refreshable modules are desired.\n))RENT           - specifies that reentrant modules are desired.\n))NORENT         - specifies that non-reentrant modules are desired.\n))REUS           - specifies that reusable modules are desired.\n))NOREUS         - specifies that non-reusable modules are desired.\n))RLDERR         - specifies that modules linked since OS/VS whose\n                   RLD/CONTROL count from the directory does not match\n                   the first RLD entry are desired.\n))NORLDERR       - specifies that modules whose RLD/CONTROL count\n                   from the directory match the first RLD entry or\n                   modules linked before OS/VS are desired.\n))RLDZERO        - specifies that modules whose RLD/CONTROL count is\n                   zero are desired.\n))NORLDZERO      - specifies that modules whose RLD/CONTROL count is\n                   not zero are desired.\n))RMODE24        - specifies that modules with residence mode 24 are\n                   desired.\n))NORMODE24      - specifies that modules with residence mode ANY\n                   are desired.\n))RMODEANY       - specifies that modules with residence mode ANY\n                   are desired.\n))NORMODEANY     - specifies that modules with residence mode 24 are\n                   desired.\n))SCTR           - specifies that scatter-loaded modules are desired.\n))NOSCTR         - specifies that no scatter-loaded modules are desired.\n))SPFEDIT        - specifies that members which are currently in-use\n                   by an ISPF EDIT session are desired.\n))NOSPFEDIT      - specifies that members which are not currently\n                   in-use by an ISPF EDIT session are desired.\n))SSI(hexdata)   - specifies that members with matching SSI data are\n                   desired.  Note that this is implemented as a generic\n                   search matching SSI characters from left to right\n                   for the number of characters entered.\n))SSI            - specifies that members with SSI data are desired.\n))NOSSI          - specifies that members without SSI data are desired.\n))PARTSSI(hx)    - specifies that members with matching SSI data are\n                   desired.  Note that this is implemented as a pattern\n                   search matching SSI digits as a string anywhere in\n                   the SSI field of the member.\n))SYSMOD(Partu)  - specifies that modules with user IDR data which\n                   matches the partial name, Partu, are desired.\n                   Partu may be entered as partial IDR data with\n                   one to eight characters.\n                   Note that if MODULE(Partm) is also entered, the\n                   SYSMOD operand applies only to CSECT's whose names\n                   match the partial CSECT name, Partm.\n))TEST           - specifies that modules with the TEST attribute\n                   are desired.\n))NOTEST         - specifies that modules without the TEST attribute\n                   are desired.\n))TRANS(Partt)   - specifies that modules with CSECTS identified as\n                   having been assembled or compiled by the translator\n                   defined by the partial name, Partt, are desired.\n                   Partt may be entered as a partial translator IDR\n                   name with one to ten characters.\n                   Note that if MODULE(Partm) is also entered, the\n                   TRANS operand applies only to CSECT's whose names\n                   match the partial CSECT name, Partm.\n))TTR(Lttr:Httr) - specifies that members whose start address is in\n                   the specified TTR range are desired.\n                   Lttr defaults to 0 and may be entered as a\n                   hexadecimal TTR value from 0 through FFFFFF.\n                   Httr defaults to FFFFFF and may be entered as\n                   a hexadecimal TTR value from 0 through FFFFFF.\n))USERDATA(Partu) - specifies that modules with user IDR data which\n                   matches the partial name, Partu, are desired.\n                   Partu may be entered as partial IDR data with\n                   one to eight characters.\n                   Note that if MODULE(Partm) is also entered, the\n                   USERDATA operand applies only to CSECT's whose names\n                   match the partial CSECT name, Partm.\n))USERID(Puid)   - specifies that members with ISPF statistics and\n                   userids matching the partial name, Puid, are\n                   desired.  Puid may be entered as a partial TSO\n                   userid with one to eight characters.\n                   USERID is an alias of ID.\n))NOUSERID       - specifies that members without ISPF statistics are\n                   desired.  NOUSERID is an alias of NOID.\n))NOTUSERID(Puid) - specifies that members without ISPF statistics or\n                   members with ISPF statistics and userids which do\n                   not match the partial name, Puid, are desired.\n                   Puid may be entered as a partial TSO userid with\n                   one to eight characters.\n                   NOTUSERID is an alias of NOTID.\n))VSLKED         - specifies that modules linked by the MVS OS/VS\n                   linkage editor are desired.\n))NOVSLKED       - specifies that modules not linked by the MVS OS/VS\n                   linkage editor are desired.\n))ZAP(Partz)     - specifies that modules with zap IDR data which\n                   matches the partial name, Partz, are desired.\n                   Partz may be entered as partial zap IDR data with\n                   one to eight characters.\n                   Note that if MODULE(Partm) is also entered, the\n                   ZAP operand applies only to CSECT's whose names\n                   match the partial CSECT name, Partm.\n))THEN(action)   - The THEN subcommand is executed if all conditions\n                   are met for a member.  The subcommand may be\n                   ATTRIB, BROWSE, DIRENTRY, DELETE, EDIT, END, FIND,\n                   FSE, HISTORY, LIST, MAP, MEMBERS, MEMLIST, NEWML,\n                   OUTCOPY, PRINTOFF, REVIEW, SUBMIT, SUBLIST, TSOEDIT,\n                   TSOLIST, VIEW or VERIFY.\n\n                   Note that if neither a THEN nor an ELSE operand is\n                   entered, THEN(ATTRIB) is the default condition.\n\n                   NEWML is similar to MEMLIST except it also performs\n                   a MEMLIST RESET.\n))ELSE(action)   - The ELSE subcommand is executed if any condition is\n                   not met for a member.  The subcommand may be\n                   ATTRIB, BROWSE, DIRENTRY, DELETE, EDIT, END, FIND,\n                   FSE, HISTORY, LIST, MAP, MEMBERS, MEMLIST, NEWML,\n                   OUTCOPY, PRINTOFF, REVIEW, SUBMIT, SUBLIST, TSOEDIT,\n                   TSOLIST, VIEW or VERIFY.\n\n                   Note that if neither a THEN nor an ELSE operand is\n                   entered, THEN(ATTRIB) is the default condition.\n\n                   NEWML is similar to MEMLIST except it also performs\n                   a MEMLIST RESET.\n\n  Caution:\n\n  IF : conditions THEN(SUBLIST) may not change the current\n  member group if there are no members that meet the defined\n  conditions.\n\n  Hence, the use of \"*\" in a subsequent subcommand will use\n  the current member group \":\" set by the IF subcommand and\n  might cause different results than expected.\n=ISPF=IS=ISP\n)F  Example -     ISPF 3.3\n\n  The ISPF subcommand invokes the ISPF primary panel with any option\n  (for additional information on the relationship of -PDS86- and the\n  ISPF subcommand, enter HELP DIALOG).\n)X SYNTAX -\n     ISPF  option\n\n ALIASES  - IS, ISP, ISPF\n DEFAULTS - none.\n REQUIRED - none.\n)O OPERANDS -\n  option  - optional, specifies a option (such as 3.3) so that the\n            primary panel can be bypassed.\n=ISPMODE=ISPM=ISPMO=ISPMOD\n)F  Example -     ISPMODE\n\n  The ISPMODE subcommand switches -PDS86- to a full screen\n  session display mode.  Subcommands entered and the outputs from\n  internal -PDS86- subcommands are maintained in a session log.\n\n  There can be nine session logs and they can be displayed with\n  the SHOW command.  Enter SHOW ? to display the prompting panel.\n\n  SHOW operands:\n     n       - switch to one of 9 log tables (value 1 to 9)\n     RESET   - Clear table before building a new table.\n     NODISPL - after switching or resetting the table do not display it\n               but return to previous function table display\n\n  For more specific information on ISPMODE, enter the ISPF HELP command\n  while in ISPMODE.\n\n  For additional information on the relationship of -PDS86- and\n  the ISPMODE subcommand, enter HELP DIALOG.\n\n\n  In the following, ISPMODE processing provided in -PDS86- is\n  described in more detail:\n\n   A.  When ISPMODE is active, the PUTLINE and PUTGET routines are\n       monitored for data.\n\n       1.  As each output line is added by PUTLINE, ISPMODE adds\n           another session table entry.\n\n       2.  If an output checkpoint (default is 2000 output lines) is\n           reached for a subcommand, ISPMODE positions the session\n           display to the beginning of the output of this subcommand\n           and allows the user to continue or terminate.  Note: this\n           screen must be responded to before any -PDS86- subcommands\n           may be entered.  Valid responses are as follows:\n             a.  0   - continue with the subcommand's output\n             b.  END - terminate the subcommand\n             c.  F   - search the ISPMODE log\n             d.  X   - clear portions of the ISPMODE log\n             e.  an ISPF command or PF key\n\n       3.  When a PUTGET is issued by -PDS86-, ISPMODE positions the\n           session display to the beginning of the output of the\n           just completed subcommand.  A -PDS86- subcommand, an ISPF\n           command, a PF key or an ISPMODE session control code may\n           be entered at this time.\n\n\n   B.  The ISPMODE session control codes are as follows:\n\n       1 - Suspend ISPMODE: this control code terminates ISPMODE,\n           retains the session log and enters line mode processing.\n           ISPMODE can be restarted using the previous session log\n           with another ISPMODE subcommand.  At the end of -PDS86-\n           processing, the session log is always discarded.\n\n           Note:  XISPMODE is an alias for this control code.\n\n       2 - Clear log: discards all lines of the session log.\n\n       4 - Sets the sublist to members in the current MEMLIST.  Same as\n           SUBLIST=MEMLISI.\n\n       5 - Check aliases: checks main and alias members by TTR\n           in current MEMLIST.\n\n       6 - MEMLIST (all members): invokes a scrollable member list\n           for all members.  PDS line commands can be entered on\n           individual member lines.\n\n       7 - Output ISPMODE table: invokes a panel which prompts for\n           a SYSOUT class or data set name which is to contain a\n           copy of the ISPMODE table.\n\n       8 - View log.\n\n       9 - Swap panels (NORM, ALT, DUAL).\n\n           NORM - Swap to normal display (left display)\n           ALT  - Swap to alternate table display (right display)\n           DUAL - Swap to dual line or 3rd table display\n                  (LEFT and RIGHT scroll commands or PFK keys\n                   can be used if set up during installation)\n\n       F - Find log: finds character strings in the session view\n           log and positions the current display start location\n           and cursor position on the current line.\n\n       O - Options: subcommand selection menu.\n\n       X - Clear log: discards some portion (ALL, ABOVE or BELOW)\n           of the session log relative to the current table location.\n\n           X ABOVE or UP    -  delete all lines above the current line\n           X BELOW or DOWN  -  delete all lines below the current line\n           X ALL            -  delete all lines\n           X -nnn           -  delete nnn lines above the current line\n           X nnn            -  delete nnn lines below the current line\n\n       = - sets the sublist to members in the current MEMLIST.  Same as\n           SUBLIST=MEMLISI.\n\n       * - sets the MEMLIST to the current member group.  Same as\n           MEMLIST *.\n\n      FN - ISPMODE function selection.\n\n           fn.lista  -  jump to list allocation prompt\n           fn.listc  -  jump to list file prompt\n           fn.listf  -  jump to list file prompt\n           fn.listv  -  jump to list volume prompt\n\n      FU - ISPMODE function status display.\n\n\n  ISPMODE notes:\n\n    1.  Only the first 158 characters of an output line are retained\n        in the output table; this is a consideration for the LIST and\n        FIND subcommands with output formats NUM, SNUM and NONUM.\n\n    2.  Echoed input lines are identified with a > character in the\n        first log position and any continuation lines are identified\n        by a - character in the first log position.\n\n    3.  The f command is a log search command and not the -PDS86-\n        FIND subcommand.  If you want the FIND subcommand, enter fi,\n        fin or find.\n\n    4.  ISPF commands FIND, RFIND, RCHANGE, LEFT and RIGHT are not\n        functional with ISPF table handling.\n\n    5.  Subcommands END, HELP and TSO are intercepted by ISPF instead\n        of the -PDS86- program; if you wish to use these subcommands,\n        you must use an abbreviated name (EN, H, HE, HEL and T or TS).\n\n    6.  Since ISPMODE only displays -PDS86- output at a checkpoint or\n        at the completion of a subcommand, output from a subcommand\n        cannot be monitored as it is produced.  Therefore, if -PDS86-\n        is in a CPU loop, the screen will lock until an attention is\n        received.  At that time, any outputs generated will be\n        displayed and an appropriate response may be given.\n\n    7.  If a -PDS86- subcommand is too long for the 48 character input\n        field, you may enter the first 47 or less characters followed\n        by a + to indicate more data is required and a continuation\n        panel with more room for operand entry will be provided.\n\n    8.  The EXEC processor does not work as usual; CLIST processing\n        is not currently supported from ISPMODE or MEMLIST.\n\n        Suspend ISPF mode (special control code 1) or invoke PDS with\n        the XISPMODE option.  When PDS subcommands are entered from a\n        CLIST, YES/NO prompts are not provided; instead, YES responses\n        are assumed in each case.\n\n    9.  The CHANGE command with no operands presents a data set name\n        prompting panel.\n\n   10.  The COLS subcommand inserts a line into the session log\n        containing column tick marks.  There are 4 variations of COLS.\n\n        >COLS\n        ....+....1....+....2....+....3....+....4....+....5....+....6....\n\n        >COLS ISPF\n        ----+----1----+----2----+----3----+----4----+----5----+----6----\n\n        >COLS GLOBAL\n        --------  ASSEMBLY  DEFAULT   ----------------------------------\n\n        >COLS SUPERC\n        SRCHFOR  ----+----1----+----2----+----3----+----4----+----5----+\n\n   11.  The ST line command (on a MEMLIST Load Member List entry)\n        will display the status of a load module by issuing the ATTRIB,\n        HISTORY, and MAP subcommands.\n\n   12.  / and ? are synonyms for the O(ptions) line command in all\n        dialog table displays.\n\n   13.  Point-and-shoot column headers in all dialog table displays\n        will change the sort direction on successive shots.\n\n        To easily identify which column headers can be sorted on,\n        use the ISPF PSCOLOR command to change the default\n        point-and-shoot color to something other than TURQ.\n\n)X SYNTAX -\n     ISPMODE\n\n ALIASES  - ISPM, ISPMO, ISPMOD, ISPMODE\n)O OPERANDS -\n  no operands are supported.\n=ISPXEQ=ISPXE=ISPX\n)F  Example -     ISPXEQ LISTA OPEN\n\n  The ISPXEQ subcommand is normally used to enter -PDS86- in LISTA\n  or LISTV dialog mode instead of the usual ISPMODE or MEMLIST mode.\n)X SYNTAX -\n     ISPXEQ command\n\n ALIASES  - ISPX, ISPXE, ISPXEQ\n DEFAULTS - none.\n REQUIRED - none.\n)O OPERANDS -\n))command  - The LISTA or LISTV command to be executed after -PDS86-\n             initialization.\n=KLEAR=K\n)F  Example -     KLEAR\n\n  The K OR KLEAR subcommand clears the screen in non-dialog mode.\n\n  The K line command in dialog mode clears the data area.\n\n)X SYNTAX -\n     KLEAR\n\n ALIASES  - K\n)O OPERANDS -\n  no operands are supported.\n=LIST=L=LI=LIS\n)F  Example -     LIST mema:memb\n\n  The LIST subcommand displays data from a member.\n\n  Unprintable characters for 3270-type devices are translated to\n  periods before they are displayed.\n\n  The LIST formats are NUM, SNUM, NONUM, LBLOCK, LDUMP, BLOCK and DUMP;\n  for load modules, the NUM, SNUM and NONUM formats are equivalent\n  to the LDUMP format.\n\n  The default format is initially NUM; however, each time a format\n  operand is entered on a LIST, FIND or REPLACE subcommand, the value\n  entered is used as the output format for subsequent LIST, FIND and\n  REPLACE subcommands.  Also, note the following:\n    A. Formats NUM, SNUM and NONUM limit the display length for logical\n       records to 256 characters.\n    B. Formats BLOCK and DUMP apply to physical records; the other\n       formats apply to logical records; and for load modules, LBLOCK\n       and LDUMP formats apply to CSECT data.\n)X SYNTAX -\n     LIST  member NUM/SNUM/NONUM/LBLOCK/LDUMP/BLOCK/DUMP\n                  OFFSET(Hx) MODULE(Partm)\n                  SKIPREC(n) MAXIN(n) MAXOUT(n)\n                  SKIPCOL(n) MAXLEN(n)\n\n ALIASES  - L, LI, LIS, LIST\n DEFAULTS - member, NUM or previous LIST/FIND/REPLACE format\n REQUIRED - none.\n)O OPERANDS -\n  member     -  optional, specifies the name of the member(s) to be\n                listed.\n\n                Default member names, member lists, member name\n                ranges and member name patterns are allowed; for\n                more information, enter HELP GROUP.\n\n  LIST format keywords are as follows:\n))NUM        -  The line number field (the last 8 bytes of a fixed-\n                format record or the first 8 bytes otherwise) of\n                each logical record is examined; if the field is not\n                numeric, formatting is switched to NONUM mode for the\n                remainder of the member.\n\n                For ISPF-saved members, the high-order six digits of\n                the line number field is formatted; otherwise, the\n                low-order six digits of the line number field is\n                formatted by suppressing leading zeroes.  The line\n                number segment is followed by a blank and up to 249\n                characters of data from a logical record.\n))SNUM       -  The line number field (the last 8 bytes for a fixed-\n                format record or the first 8 otherwise) is discarded.\n                Up to 256 bytes from a logical record are displayed.\n))NONUM      -  Up to 256 bytes from a logical record are displayed.\n))LBLOCK     -  Logical records are formatted with two hexadecimal\n                offsets (displacement in the member and displacement\n                in the logical record) and segments of 64 characters\n                surrounded by asterisks.\n\n                Note: for load modules, only CSECT data will be\n                displayed and if the partial name Partm is entered\n                in a MODULE operand, only those CSECT or ENTRY names\n                matching Partm will be displayed.  CSECT records\n                are formatted with two hexadecimal offsets (a module\n                offset and a CSECT offset) and segments of 64\n                characters surrounded by asterisks.\n))LDUMP      -  Logical records are formatted with two hexadecimal\n                offsets (displacement in the member and displacement\n                in the logical record), segments of up to 32\n                characters of hexadecimal data and up to 16 bytes of\n                equivalent characters surrounded by asterisks.\n\n                Note: for load modules, only CSECT data will be\n                displayed and if the partial name Partm is entered in\n                a MODULE operand, only those CSECT or ENTRY names\n                matching Partm will be displayed.  CSECT records are\n                formatted with two hexadecimal offsets (a module offset\n                and a CSECT offset), segments of up to 32 characters of\n                hexadecimal data and up to 16 bytes of characters\n                surrounded by asterisks.\n))BLOCK      -  Physical records are formatted with two hexadecimal\n                offsets (displacement in the member and displacement\n                in the physical record) and segments of 64 characters\n                surrounded by asterisks.\n))DUMP       -  Physical records are formatted with two hexadecimal\n                offsets (displacement in the member and displacement\n                in the physical record), segments of up to 32\n                characters of hexadecimal data and up to 16 bytes of\n                equivalent characters surrounded by asterisks.\n  LIST control keywords are as follows:\n))OFFSET(Hx)  - for LBLOCK and LDUMP formats only; Hx may be entered\n                as a 1 to six digit hexadecimal number to specify\n                the module offset at which the display is to begin.\n\n                If both MODULE AND OFFSET keywords are entered, the\n                offset applies to each module selected.\n))MODULE(Partm)-for LBLOCK or LDUMP formats only; Partm may be entered\n                as a 1 to 8 byte partial external name to limit the\n                CSECT or ENTRY names to be displayed to those matching\n                the partial name Partm.\n\n                If the form MODULE(*) is used, the previous partial\n                name entered on any MODULE keyword will be used.\n\n                If both MODULE AND OFFSET keywords are entered, the\n                offset applies to each module selected.\n))SKIPREC(n)  - n is coded as 0 through 9999999 to specify the number\n                of logical records (physical records for BLOCK or\n                DUMP formats) to ignore at the beginning of a member.\n))MAXIN(n)    - n is coded as 0 through 9999999 to specify the maximum\n                number of logical records (physical records for BLOCK\n                or DUMP formats) to input for a member after\n                satisfying any SKIPREC operand.\n))MAXOUT(n)   - n is coded as 0 through 9999999 to specify the maximum\n                number of logical records (physical records for BLOCK\n                or DUMP formats) to output for a member.\n))SKIPCOL(n)  - n is coded as 0 through 99999 to specify the number\n                of columns to ignore at the beginning of each logical\n                record (physical record for BLOCK or DUMP formats).\n\n                Note:  for NUM or SNUM output format with record\n                format V, SKIPCOL(0) refers to the first data position\n                after the line number field.\n))MAXLEN(n)   - n is coded as 0 through 99999 to specify the maximum\n                length of a logical record (physical record for BLOCK\n                or DUMP formats) to display.\n=LMA=LM\n)F  Example -     LMA mema:memb\n\n The LMA subcommand invokes the IBM Debug Tool Load Module Analyzer\n (EQALMA) program to display an analysis of a load module.\n\n)X SYNTAX -\n     LMA  memgroup\n                   LOUD\n                   SHOWLIB\n                   OSVSONLY\n                   CKVOLFPRS\n                   LEINFO\n                   LESCAN\n                   LISTLD\n                   DATEFMT(fmt)\n                   SORTBY(field)\n\n ALIASES  - LM\n DEFAULTS - DATEFMT(YYYYMMDD), SORTBY(OFFSET)\n REQUIRED - memgroup.\n)O OPERANDS -\n  memgroup      - specifies the name of the load module(s)\n                  for which a load module analysis is to be produced.\n\n                  Default member names, member lists, member name\n                  ranges and member name patterns are allowed; for\n                  more information, enter HELP GROUP.\n\n))LOUD          - print values read from EQASYSPF and EQPGMNM.\n))SHOWLIB       - show all output for system library routines.\n))OSVSONLY      - suppress output except for OS/VS COBOL programs\n                  (do not use with CKVOLFPRS).\n))CKVOLFPRS     - check for volatile floating point registers.\n))LEINFO        - include output extracted from Language Environment\n                  prologues.\n))LESCAN        - scan for Language Environment entry points that do\n                  not correspond to external entry points.\n))LISTLD        - includes all Label Definitions in addition to CSECTs\n                  in the output.\n))DATEFMT(fmt)  - format translator dates in this format.\n                  YYYYMMDD - format dates as YYYY/MM/DD\n                  MMDDYYYY - format dates as MM/DD/YYYY\n                  DDMMYYYY - format dates as DD/MM/YYYY\n))SORTBY(field) - sort CSECT's in this order.\n                  OFFSET   - sort by offset in load module\n                  NAME     - sort by CSECT name\n                  PROGRAM  - sort by Translator program number\n                  LANGUAGE - sort by Source language\n                  DATE     - sort by Translation date\n=LOAD=LO=LOA=SEPARATE=SEP=SEPA=SEPAR=SEPARA=SEPARAT\n)F  Example -     LOAD thismem output.lib\n\n The LOAD subcommand splits a member into it's component members.\n The input to LOAD is assumed to be one or more members separated\n by \"./ ADD NAME=\" statements.  The input member is typically\n created by the OFFLOAD subcommand.\n\n Note that ISPF statistics are preserved if they exist.\n If extended ISPF statistics: 99,999,999 max for SIZE and INIT.\n\n The LOAD subcommand invokes the PDSLOAD program (CBT 093).\n\n)X SYNTAX -\n     LOAD member output.dataset  LIST/NOLIST\n                                 OLD/SHR/NEW\n                                         TRK/CYL DIR(num) SPACE(pri,sec)\n                                         VOLUME(volser)\n\n ALIASES  - LO, LOA, LOAD, SEP, SEPA, SEPAR, SEPARA, SEPARAT, SEPARATE\n DEFAULTS - SHR, LIST\n REQUIRED - member, output.dataset\n)O OPERANDS -\n  member        - identifies the source of the input for load.\n\n  output.data   - identifies the output data set.  This should be a\n                  partitioned data set.  Standard TSO dsname syntax\n                  should be used.\n\n))LIST          - specifies that all messages are to be displayed.\n))NOLIST        - specifies that no messages are to be displayed.\n))OLD           - obtain exclusive use of the output data set.\n))SHR           - allow shared use of the output data set.\n))NEW           - specifies that the output data set is to be created.\n                  When NEW is specified, TRK/CYL, DIR, SPACE, and\n                  VOLUME keywords may also be specified.\n))TRK           - specifies that the output data set is to be allocated\n                  in tracks.\n))CYL           - specifies that the output data set is to be allocated\n                  in cylinder units.\n))DIR(num)      - specifies that the number of directory blocks for the\n                  output data set.  If DIR is not entered, the default\n                  is 150.\n))SPACE(p,s)    - specifies the primary and secondary quantities for\n                  the output data set in track or cylinder units.\n\n                  If TRK or CYL is not entered but SPACE is entered,\n                  TRK is the default allocation quantity.\n\n                  If SPACE is not entered, the default is (15,15).\n))VOLUME(vo)    - for NEW data sets, specifies the output volume name.\n=MAP=M=MA\n)F  Example -     MAP mema:memb\n\n The MAP subcommand lists the CSECT structure of a load module.\n This map is similar in nature to the output produced by the MAP\n option of the linkage editor.\n\n Note that unresolved external references are also displayed by\n this subcommand.\n)X SYNTAX -\n     MAP  member  FULL/SHORT/ENTRY/\n     RELINK/JCL   IEBUPDTE\n     MODULE(Partm)\n\n ALIASES  - M, MA, MAP\n DEFAULTS - member, FULL\n REQUIRED - none.\n)O OPERANDS -\n  member        - optional, specifies the name of the load module(s)\n                  for which a module MAP is to be produced.\n\n                  Default member names, member lists, member name\n                  ranges and member name patterns are allowed; for\n                  more information, enter HELP GROUP.\n\n))FULL          - a full CSECT map is to be provided; this option also\n                  provides the name of the corresponding main module\n                  for alias members unless CONTROL NOALIASINFO is in\n                  effect.\n))SHORT         - a CSECT map is to be provided with the following\n                  information omitted:\n                    * entry names within CSECTS\n                    * missing weak external references\n                    * alias module names\n))ENTRY         - only the ENTRY point symbol is to be displayed.\n))RELINK        - JCL and linkage editor control statements are to\n                  be generated for use in relinking this module.\n))JCL           - JCL and linkage editor control statements are to\n                  be generated for use in relinking this module.\n))IEBUPDTE      - used in conjunction with RELINK/JCL to place\n                  IEBUPDTE/PDSLOAD ./ ADD NAME=member statements\n                  before each member output which can later be used\n                  to build a PDS for SMP/E MCS use.\n))MODULE(Partm) - specifies a partial external name, which is used to\n                  mask entry symbols and CSECT names in the member.\n                  Partm may be entered as a partial external name\n                  with one to eight characters.\n\n                  If the form MODULE(*) is used, the previous partial\n                  name entered on any MODULE keyword will be used.\n=MATCH=MATC=MAT=COMPDIR=COMPDI=COMPD\n)F  Example -     MATCH pds\n\n The MATCH subcommand invokes the Bill Godfrey PDSMATCH program\n to compare the directory and data from two PDS's.  Members are said\n to match if their names, and optionally their userdata, or data are\n the same.\n\n The MATCH subcommand is useful in comparing two PDS's which\n contain members with a known relationship (e.g., a PDS\n containing a new level of a software product).  BSAM is used to\n read the data blocks when the DATA operand is specified.\n\n PDSMATCH messages:\n\n member    <-- NEWER  member    LIBRARY1 IS MORE RECENT\n member    NEWER -->  member    LIBRARY2 IS MORE RECENT\n member    <UNEQUAL>  member    LIBRARY DATA IS NOT SAME\n member                         MEMBER IN LIBRARY1 ONLY\n                      member    MEMBER IN LIBRARY2 ONLY\n member    *********  member    NEITHER MEMBER HAS USERDATA\n member    *********  member    NON-SPF USER DATA EQUAL\n member    *********  member    NON-SPF USER DATA UNEQUAL\n member    *********  member    SPF STATS DIFFER BUT NOT IN DATE\n member    *********  member    ONLY LIBRARY2 HAS SPF STATS\n member    *********  member    ONLY LIBRARY1 HAS SPF STATS\n)X SYNTAX -\n     MATCH input.pds             NEONLY/EQONLY\n                                 DATA/USER\n                                 CHANGED/NOCHANGED/DIRCHANGE/NODIRCHANGE\n                                 VOLUME(volser)\n                                 SUBLIST\n\n ALIASES  - MAT, MATC, MATCH\n DEFAULTS - NEONLY\n REQUIRED - input.pds\n)O OPERANDS -\n  input.pds     - identifies the input pds whose directory and\n                  data is to be matched against the current pds.\n                  This should be a partitioned data set.  Standard\n                  TSO dsname syntax should be used.\n\n))NEONLY        - only members that don't match will be listed.\n))EQONLY        - only members that match will be listed.\n))DATA          - members that are present in both libraries\n                  will be compared for matching data.\n                  If two members have the same name and both are\n                  empty, they are treated as unequal,\n                  with a unique message for this case.\n))USER          - members that are present in both libraries\n                  will be compared for matching userdata.\n                  userdata consists of up to 64 bytes of data\n                  in the directory entry which is stowed by\n                  the Linkage Editor, ISPF Edit, REVEDIT,\n                  PDS REPLACE subcommand, and others.\n                  If two members have the same name and neither\n                  has any userdata, they are treated as unequal,\n                  with a unique message for this case.\n))CHANGED       - list members that are either not present in\n                  the input compare data set or those members which\n                  do not contain identical data.\n                  CHANGED is equivalent to entering:  NEONLY, DATA\n))NOCHANGED     - list members that are present in the input\n                  compare data set and whose members contain\n                  identical data.\n                  NOCHANGED is equivalent to entering:  EQONLY, DATA\n))DIRCHANGE     - list members that are either not present in\n                  the input compare data set or those members which\n                  do not have identical directory entries.\n                  DIRCHANGE is equivalent to entering:  NEONLY, USER\n))NODIRCHANGE   - list members that are present in the input\n                  compare data set and whose members have identical\n                  directory entries.\n                  NODIRCHANGE is equivalent to entering:  EQONLY, USER\n))VOLUME(volser)- specifies the volume name if the input pds\n                  is not cataloged.\n))SUBLIST       - build a new sublist with the compare list results.\n                  If no members meet the comparison criteria, a null\n                  sublist is the result.\n=MEMBERS=ME=MEM=MEMB=MEMBE=MEMBER\n)F  Example -     MEMBERS mema:memb\n\n   The MEMBERS subcommand lists member names from the data set\n   directory.  The members in the specified member group are\n   displayed using the PDS165I message.\n\n   Note that the MEMBERS subcommand may be used to check member names\n   in a given group before invoking another subcommand which processes\n   member groups.\n\n)X SYNTAX -\n     MEMBERS  memgroup COUNT / NOCOUNT\n\n ALIASES  - ME, MEM, MEMB, MEMBE, MEMBER, MEMBERS\n DEFAULTS - memgroup  COUNT\n REQUIRED - none.\n)O OPERANDS -\n  memgroup - optional, specifies the group of members whose names\n             are to be displayed.\n\n             Default member names, member lists, member name\n             ranges and member name patterns are allowed; for\n             more information, enter HELP GROUP.\n\n))COUNT    - specifies that a message is to be issued to display the\n             number of members in the displayed group.\n))NOCOUNT  - specifies that no number of members message is required.\n=MEMLIST=MEML=MEMLI=MEMLIS=ML\n)F  Example -     MEMLIST mema:memb\n\n   The MEMLIST subcommand provides a scrollable member list display\n   on which -PDS86- subcommands can be entered as line commands to\n   process individual members.  In addition, ISPF commands, normal\n   -PDS86- subcommands and session control codes may be entered to\n   the right of COMMAND ===>\n\n   MEMLIST processing includes the ISPMODE session display; thus,\n   subcommands entered and their outputs are maintained in the\n   ISPMODE log; more specific information can be obtained from the\n   ISPF tutorial panels by entering the ISPF HELP command while in\n   MEMLIST mode.\n\n   If a -PDS86- subcommand is too long for the 48 character input\n   field, you may enter the first 47 or less characters followed by\n   a + to indicate more data is required and a continuation panel\n   with more room for operand entry will be provided.\n\n   For additional information on the relationship of -PDS86- and the\n   MEMLIST subcommand, enter HELP DIALOG; for further information on\n   ISPMODE, enter HELP ISPMODE.\n)X SYNTAX -\n     MEMLIST  memgroup SINCE/BEFORE\n                 TODAY/YESTERDAY/WEEK/CURRENT/BIWEEK/\n                       MONTH/BIMONTH/QUARTER/HALFYEAR/YEAR/BIYEAR/\n                       LAST(numdays)/DATE(mm/dd/yy)/\n                       PREV0/PREV1/PREV2/PREV3/PREV4/PREV5/PREV6/PREV7/\n                       PREV8/PREV9/PREV10/PREV11/PREV12/PREV13/PREV14\n                 CHANGED(yyddd:yyddd) / CHANGED(mm/dd/yy:mm/dd/yy)\n                 CREATED(yyddd:yyddd) / CREATED(mm/dd/yy:mm/dd/yy)\n                 ABOVE(Count1)\n                 ALIAS/NOALIAS\n                 AMODE24/AMODE31/AMODE64/AMODEANY/NOAMODE24/NOAMODE31/\n                         NOAMODE64/NOAMODEANY  (load modules only)\n                 AUTH/NOAUTH  or  APF/NOAPF    (load modules only)\n                 BELOW(Count2)\n                 DC/NODC                       (load modules only)\n                 EDIT/NOEDIT                   (load modules only)\n                 EXEC/NOEXEC                   (load modules only)\n                 FLEVEL/NOFLEVEL               (load modules only)\n                 ID(Puid)/NOID/NOTID(Puid)\n                 XSTATS/NOXSTATS\n                 HASALIAS/NOHASALIAS\n                 LKED(Partl)                   (load modules only)\n                 LOADONLY/NOLOADONLY           (load modules only)\n                 MODULE(Partm)                 (load modules only)\n                 NULL/NONULL\n                 ORPHAN/NOORPHAN\n                 OVERLAY/NOOVERLAY             (load modules only)\n                 PAGE/NOPAGE                   (load modules only)\n                 REFR/NOREFR                   (load modules only)\n                 RENT/NORENT                   (load modules only)\n                 REUS/NOREUS                   (load modules only)\n                 RMODE24/RMODEANY/\n                         NORMODE24/NORMODEANY  (load modules only)\n                 SCTR/NOSCTR                   (load modules only)\n                 SSI(hexdata)/SSI/NOSSI/PARTSSI(hexdata)\n                 SYSMOD(Partu) / USERDATA(Partu) (load modules only)\n                 TEST/NOTEST                   (load modules only)\n                 TRANS(Partt)                  (load modules only)\n                 TTR(Lttr:Httr)\n                 USERDATA(Partu) / SYSMOD(Partu) (load modules only)\n                 USERID(Puid)/NOUSERID/NOTUSERID(Puid)\n                 VSLKED/NOVSLKED               (load modules only)\n                 ZAP(Partz)                    (load modules only)\n                 RESET/NORESET\n                 LKEDDATE/NOLKEDDATE           (load modules only)\n\n ALIASES  - MEML, MEMLI, MEMLIS, MEMLIST\n DEFAULTS - memgroup, NORESET, LKEDDATE, SINCE\n REQUIRED - none.\n)O OPERANDS -\n  memgroup       - optional, specifies the group of members\n                   to be contained in the scrollable member\n                   list.\n\n                   Default member names, member lists, member name\n                   ranges and member name patterns are allowed; for\n                   more information, enter HELP GROUP.\n\n))SINCE          - dates from the specified date to the current date.\n                   SINCE indicates that the implied date range (TODAY,\n                   YESTERDAY, ... LAST, DATE) follows the date given.\n                   For source modules, the date referenced is the ISPF\n                   modification date; for load modules, it is the\n                   linkage edit date.\n))FROM           - dates from the specified date to the current date.\n                   FROM indicates that the implied date range (TODAY,\n                   YESTERDAY, ... LAST, DATE) follows the date given.\n                   For source modules, the date referenced is the ISPF\n                   modification date; for load modules, it is the\n                   linkage edit date.\n))BEFORE         - dates before (and including) the specified date.\n                   BEFORE indicates that the implied date range (TODAY,\n                   YESTERDAY, ... LAST, DATE) is before the given date.\n                   For source modules, the date referenced is the ISPF\n                   modification date; for load modules, it is the\n                   linkage edit date.\n))TO             - dates before (and including) the specified date.\n                   TO indicates that the implied date range (TODAY,\n                   YESTERDAY, ... LAST, DATE) is before the given date.\n                   For source modules, the date referenced is the ISPF\n                   modification date; for load modules, it is the\n                   linkage edit date.\n))TODAY          - a date, equivalent to LAST(0)\n))YESTERDAY      - a date, equivalent to LAST(1)\n))WEEK           - a date, equivalent to LAST(7)\n))CURRENT        - a date, equivalent to LAST(10)\n))BIWEEK         - a date, equivalent to LAST(14)\n))MONTH          - a date, equivalent to LAST(30)\n))BIMONTH        - a date, equivalent to LAST(60)\n))QUARTER        - a date, equivalent to LAST(90)\n))HALFYEAR       - a date, equivalent to LAST(183)\n))YEAR           - a date, equivalent to LAST(365)\n))BIYEAR         - a date, equivalent to LAST(730)\n))LAST(numdays)  - a date, indicates the number of days before today.\n))DATE(cdate)    - a date, indicates the actual date; it may be\n                   entered in Gregorian format (mm/dd/yy),\n                   ISPF format (yy/mm/dd), or Julian format (yyddd).\n                   Note:  ISPF format assumed if yy is >= 60.\n))PREV0          - a date, equivalent to LAST(0)\n))PREV1          - a date, equivalent to LAST(1)\n))PREV2          - a date, equivalent to LAST(2)\n))PREV3          - a date, equivalent to LAST(3)\n))PREV4          - a date, equivalent to LAST(4)\n))PREV5          - a date, equivalent to LAST(5)\n))PREV6          - a date, equivalent to LAST(6)\n))PREV7          - a date, equivalent to LAST(7)\n))PREV8          - a date, equivalent to LAST(8)\n))PREV9          - a date, equivalent to LAST(9)\n))PREV10         - a date, equivalent to LAST(10)\n))PREV11         - a date, equivalent to LAST(11)\n))PREV12         - a date, equivalent to LAST(12)\n))PREV13         - a date, equivalent to LAST(13)\n))PREV14         - a date, equivalent to LAST(14)\n))CHANGED(yyddd: - specifies that members which were modified by an\n                   ISPF editor or a ZAP program between the dates\n                   specified are desired.  If only a single date is\n                   entered, only that date is checked.  Note that only\n                   members with ISPF statistics or members created by a\n                   linkage editor are supported.\n                   Either of the following examples are equivalent:\n                   CHANGED(85001:85074) and  CHANGED(1/1/85:3/15/85)\n))CREATED(yyddd: - specifies that members which were created with ISPF\n                   statistics or by the linkage editor between the\n                   dates specified are desired.  If only a single date\n                   is entered, only that date is checked.\n                   Either of the following examples are equivalent:\n                   CREATED(85001:85074) and  CREATED(1/1/85:3/15/85)\n))ABOVE(Count1)  - specifies that members with more than the number of\n                   lines (amount of storage for load modules) defined\n                   by the number, Count1, are desired.\n))ALIAS          - specifies that alias members are desired.\n))NOALIAS        - specifies that main members are desired.\n))AMODE24        - specifies that modules with addressing mode 24 are\n                   desired.\n))NOAMODE24      - specifies that modules with addressing mode 31, 64,\n                   or ANY are desired.\n))AMODE31        - specifies that modules with addressing mode 31 are\n                   desired.\n))NOAMODE31      - specifies that modules with addressing mode 24, 64,\n                   or ANY are desired.\n))AMODE64        - specifies that modules with addressing mode 64 are\n                   desired.\n))NOAMODE64      - specifies that modules with addressing mode 24, 31,\n                   or ANY are desired.\n))AMODEANY       - specifies that modules with addressing mode ANY\n                   are desired.\n))NOAMODEANY     - specifies that modules with addressing mode 24, 64,\n                   or 31 are desired.\n))AUTH           - specifies that APF authorized modules are desired.\n))NOAUTH         - specifies that non-authorized modules are desired.\n))APF            - specifies that APF authorized modules are desired.\n))NOAPF          - specifies that non-authorized modules are desired.\n))BELOW(Count2)  - specifies that members with less than the number of\n                   lines (amount of storage for load modules) defined\n                   by the number, Count2, are desired.\n))DC             - specifies that downward-compatible modules are\n                   desired.\n))NODC           - specifies that no downward-compatible modules are\n                   desired.\n))EDIT           - specifies that modules which can be reprocessed\n                   by the linkage editor are desired.\n))NOEDIT         - specifies that modules which can not be reprocessed\n                   by the linkage editor are desired.\n))EXEC           - specifies that EXECUTABLE modules are desired.\n))NOEXEC         - specifies that non-EXECUTABLE modules are desired.\n))FLEVEL         - specifies that modules processed by the\n                   F-level linkage editor are desired.\n))NOFLEVEL       - specifies that modules not processed by the\n                   F-level linkage editor are desired.\n))ID(Puid)       - specifies that members with ISPF statistics and\n                   userids matching the partial name, Puid, are\n                   desired.  Puid may be entered as a partial TSO\n                   userid with one to eight characters.\n                   ID is an alias of USERID.\n))NOID           - specifies that members without ISPF statistics are\n                   desired.  NOID is an alias of NOUSERID.\n))NOTID(Puid)    - specifies that members without ISPF statistics or\n                   members with ISPF statistics and userids which do\n                   not match the partial name, Puid, are desired.\n                   Puid may be entered as a partial TSO userid with\n                   one to eight characters.\n                   NOTID is an alias of NOTUSERID.\n))XSTATS         - specifies that members with extended ISPF\n                   statistics are desired.\n))NOXSTATS       - specifies that members without extended ISPF\n                   statistics are desired.\n))HASALIAS       - specifies that main members which have one or more\n                   aliases are desired.\n))NOHASALIAS     - specifies that alias members or main members without\n                   any aliases are desired.\n))LKED(Partl)    - specifies that modules identified as linked by the\n                   linkage editor defined by the partial name, Partl,\n                   are desired.  Partl may be entered as a partial\n                   linkage editor IDR name with one to ten characters.\n))LOADONLY       - specifies that modules marked for LOAD ONLY\n                   are desired.\n))NOLOADONLY     - specifies that modules not marked for LOAD ONLY\n                   are desired.\n))MODULE(Partm)  - specifies that modules with CSECTS defined by the\n                   partial name, Partm, are desired.  Partm may be\n                   entered as a partial CSECT name with one to eight\n                   characters.\n\n                   Note that if MODULE(Partm) is entered, any TRANS,\n                   SYSMOD/USERDATA or ZAP keywords apply only to CSECTs\n                   whose names match the partial CSECT name, Partm.\n\n                   If the form MODULE(*) is used, the previous partial\n                   name entered on any MODULE keyword will be used.\n))ORPHAN         - specifies that alias members which have no\n                   associated main member are desired.\n))NOORPHAN       - specifies that main members or alias members which\n                   have an associated main member are desired.\n))OVERLAY        - specifies that OVERLAY modules are desired.\n))NOOVERLAY      - specifies that non-OVERLAY modules are desired.\n))PAGE           - specifies that modules marked for loading on\n                   a page boundary are desired.\n))NOPAGE         - specifies that modules not marked for loading on\n                   a page boundary are desired.\n))REFR           - specifies that refreshable modules are desired.\n))NOREFR         - specifies that non-refreshable modules are desired.\n))RENT           - specifies that reentrant modules are desired.\n))NORENT         - specifies that non-reentrant modules are desired.\n))REUS           - specifies that reusable modules are desired.\n))NOREUS         - specifies that non-reusable modules are desired.\n))RMODE24        - specifies that modules with residence mode 24 are\n                   desired.\n))NORMODE24      - specifies that modules with residence mode ANY\n                   are desired.\n))RMODEANY       - specifies that modules with residence mode ANY\n                   are desired.\n))NORMODEANY     - specifies that modules with residence mode 24 are\n                   desired.\n))SCTR           - specifies that scatter-loaded modules are desired.\n))NOSCTR         - specifies that no scatter-loaded modules are desired.\n))SSI(hexdata)   - specifies that members with matching SSI data are\n                   desired.  Note that this is implemented as a generic\n                   search matching SSI characters from left to right\n                   for the number of characters entered.\n))SSI            - specifies that members with SSI data are desired.\n))NOSSI          - specifies that members without SSI data are desired.\n))PARTSSI(hx)    - specifies that members with matching SSI data are\n                   desired.  Note that this is implemented as a pattern\n                   search matching SSI digits as a string anywhere in\n                   the SSI field of the member.\n))SYSMOD(Partu)  - specifies that modules with user IDR data which\n                   matches the partial name, Partu, are desired.\n                   Partu may be entered as partial IDR data with\n                   one to eight characters.\n                   Note that if MODULE(Partm) is also entered, the\n                   SYSMOD operand applies only to CSECT's whose names\n                   match the partial CSECT name, Partm.\n))TEST           - specifies that modules with the TEST attribute\n                   are desired.\n))NOTEST         - specifies that modules without the TEST attribute\n                   are desired.\n))TRANS(Partt)   - specifies that modules with CSECTS identified as\n                   having been assembled or compiled by the translator\n                   defined by the partial name, Partt, are desired.\n                   Partt may be entered as a partial translator IDR\n                   name with one to ten characters.\n                   Note that if MODULE(Partm) is also entered, the\n                   TRANS operand applies only to CSECT's whose names\n                   match the partial CSECT name, Partm.\n))TTR(Lttr:Httr) - specifies that members whose start address is in\n                   the specified TTR range are desired.\n                   Lttr defaults to 0 and may be entered as a\n                   hexadecimal TTR value from 0 through FFFFFF.\n                   Httr defaults to FFFFFF and may be entered as\n                   a hexadecimal TTR value from 0 through FFFFFF.\n))USERDATA(Partu) - specifies that modules with user IDR data which\n                   matches the partial name, Partu, are desired.\n                   Partu may be entered as partial IDR data with\n                   one to eight characters.\n                   Note that if MODULE(Partm) is also entered, the\n                   USERDATA operand applies only to CSECT's whose names\n                   match the partial CSECT name, Partm.\n))USERID(Puid)   - specifies that members with ISPF statistics and\n                   userids matching the partial name, Puid, are\n                   desired.  Puid may be entered as a partial TSO\n                   userid with one to eight characters.\n                   USERID is an alias of ID.\n))NOUSERID       - specifies that members without ISPF statistics are\n                   desired.  NOUSERID is an alias of NOID.\n))NOTUSERID(Puid) - specifies that members without ISPF statistics or\n                   members with ISPF statistics and userids which do\n                   not match the partial name, Puid, are desired.\n                   Puid may be entered as a partial TSO userid with\n                   one to eight characters.\n                   NOTUSERID is an alias of NOTID.\n))VSLKED         - specifies that modules linked by the MVS OS/VS\n                   linkage editor are desired.\n))NOVSLKED       - specifies that modules not linked by the MVS OS/VS\n                   linkage editor are desired.\n))ZAP(Partz)     - specifies that modules with zap IDR data which\n                   matches the partial name, Partz, are desired.\n                   Partz may be entered as partial zap IDR data with\n                   one to eight characters.\n                   Note that if MODULE(Partm) is also entered, the\n                   ZAP operand applies only to CSECT's whose names\n                   match the partial CSECT name, Partm.\n))RESET      - specifies that the member list is to contain only\n               the group of members named with this subcommand.\n))NORESET    - specifies that any existing member list is to be merged\n               with the group of members named with this subcommand.\n))LKEDDATE   - specifies that linkage edit date information for load\n               members is desired (the IDR data must be read).\n))NOLKEDDATE - specifies that linkage edit date information for load\n               members is not required.\n=MXIBAT=MXIBA=MXIB=MXI=MX\n)F  Example -     MXIBAT command\n\n The MXIBAT subcommand invokes the Rob Scott MXI program in batch mode.\n\n Rob Scott's MXI (MVS eXtended Information) can be downloaded\n from the CBT (files 409, 410).  MXI Version 4.3 GenLevel 050126.\n)X SYNTAX -\n     MXIBAT  command\n\n ALIASES  - MX, >MXI, MXIB, MXIBA, MXIBAT\n DEFAULTS - none.\n REQUIRED - none.\n)O OPERANDS -\n  command -      specifies the name of the MXI command to be executed.\n\n  Name                Description                          Group\n\n  AGRP                SMS Aggregate Groups                 SMS\n  APF                 APF List Datasets                    DATASET\n  ASID                Address Space Usage Information      SYSTEM\n  CAT                 Catalog Information                  DATASET\n  CA1                 CA-1 Configuration Information       SMS\n  CDE                 JPAQ and TCB loaded modules          MODULE\n  CDR                 Device Configuration Data            UNIT\n  CF                  Coupling Facility Information        PLEX\n  CHP                 Online Channel Paths                 UNIT\n  CON                 Console Screen Image                 UNIT\n  CPF                 Command Prefix Table                 SYSTEM\n  CPU                 CPU and LPAR Information             UNIT\n  CS                  Common Storage Usage                 STORAGE\n  CSR                 Common Storage Remaining             STORAGE\n  DA                  Active Address Space Information     SYSTEM\n  DA ONLY(JOB)        Active Batch Jobs                    SYSTEM\n  DA ONLY(STC)        Active Started Tasks                 SYSTEM\n  DA ONLY(TSU)        Active TSO Users                     SYSTEM\n  DAE                 Dump Elimination Information         SYSTEM\n  DASD                Online DASD Information              UNIT\n  DASD NOT(SMS)       Online Non-SMS DASD Volumes          UNIT\n  DASD ONLY(SMS)      Online SMS DASD Volumes              SMS\n  DB                  DB2 Subsystems                       DB2\n  DBBP                DB2 Buffer Pools                     DB2\n  DBDA                DB2 Active Threads                   DB2\n  DBEP                DB2 EDM Statistics                   DB2\n  DBGP                DB2 Getpage Requests                 DB2\n  DBLK                DB2 Locking Statistics               DB2\n  DBZP                DB2 System Parameters                DB2\n  DCLS                SMS Data Class Information           SMS\n  DDNS                Allocated Dataset Information        DATASET\n  DEV                 DASD Activity                        UNIT\n  DS                  Personal Dataset List                DATASET\n  DSP                 Dataspace Information                STORAGE\n  DYNX                Dynamic Exit Information             MODULE\n  EDT                 Eligible Device Table                UNIT\n  EMCS                E-MCS Information                    UNIT\n  ENC                 Enclave Information                  PLEX\n  ENQ                 Enqueue Information                  SYSTEM\n  ENQC                Enqueue Contention and RESERVEs      SYSTEM\n  EXC                 System Exceptions                    SYSTEM\n  GQE                 Common Storage GQEs                  STORAGE\n  GRS                 GRS Resource Name Lists              SYSTEM\n  HFS                 OpenEdition File Systems             DATASET\n  HFS VIEW(DSN)       OpenEdition Datasets                 DATASET\n  HSM                 HSM Configuration                    SMS\n  HSMQ                HSM Request Queues                   SMS\n  INIT                JES2 Initiators                      SYSTEM\n  IPL                 IPL and Load Information             SYSTEM\n  LINK                Linklist Dataset Information         DATASET\n  LLA                 LLA Fetch Statistics                 DATASET\n  LLS                 Linklist Set Information             DATASET\n  LLSU                Linklist Set Usage Information       DATASET\n  LOGR                Log Stream Information               PLEX\n  LPA                 LPA List Dataset Information         DATASET\n  LPD                 Link Pack Directory Entries          MODULE\n  LX                  Linkage Indexes and PC Routines      MODULE\n  MAKE                Change Address Space                 SYSTEM\n  MCLS                SMS Management Class Information     SMS\n  MCS                 MCS Consoles                         UNIT\n  MDQ                 Memory Delete Queue                  STORAGE\n  MEM                 Display Memory                       STORAGE\n  MPF                 MPF Information                      SYSTEM\n  MQ                  MQ Series Subsystems                 MQ\n  MQC                 MQ Series Channels                   MQ\n  MQCS                MQ Series Channel Status             MQ\n  MQDA                MQ Series Active Threads             MQ\n  MQQ                 MQ Series Queues                     MQ\n  MQU                 MQ Series Page Set Usage             MQ\n  NTOK                System Name/Token Information        SYSTEM\n  NUC                 System Nucleus Modules               MODULE\n  OMVS                OpenEdition Configuration            SYSTEM\n  PAGE                Page Dataset Information             SYSTEM\n  PARM                Active PARMLIB Information           SYSTEM\n  PEEK                Show ISPF Screens                    SYSTEM\n  PID                 OpenEdition Processes                SYSTEM\n  PLEX                Sysplex Information                  PLEX\n  PPT                 Program Properties Information       MODULE\n  RACF                RACF Information                     RACF\n  RCLS                RACF Class Information               RACF\n  RCLS DATASET        RACF Dataset Profiles                RACF\n  RCLS GROUP          RACF Groups                          RACF\n  RCLS USER           RACF Userids                         RACF\n  RL                  RACF Profile Information             RACF\n  RS                  Real Storage Usage Information       STORAGE\n  RSYS                Remote System Selection              SYSTEM\n  SCLS                SMS Storage Class Information        SMS\n  SGRP                SMS Storage Group Information        SMS\n  SMF                 SMF General Information              SYSTEM\n  SMFD                SMF Dataset Information              DATASET\n  SMS                 SMS Configuration Information        SMS\n  SMSM                SMS Module Map                       SMS\n  SOFT                System Software Levels               SYSTEM\n  SP                  Common Storage Subpool Usage         STORAGE\n  SPD                 Subpool Definitions                  STORAGE\n  SSI                 Subsystem Information                SYSTEM\n  SRVC                WLM Service Class Information        PLEX\n  STOR                System Storage Information           STORAGE\n  SVC                 SVC Information                      MODULE\n  SYM                 System Symbols                       SYSTEM\n  SYSX                System Exit Information              MODULE\n  TAPE                Online TAPE Information              UNIT\n  TCB                 TCB and RB Information               SYSTEM\n  UCB                 UCB Information                      UNIT\n  UIC                 UIC Information                      STORAGE\n  USP                 User Subpool Information             STORAGE\n  VER                 MXI Version Information              SYSTEM\n  VMAP                Virtual Storage Map                  STORAGE\n  WLM                 WLM Policy Information               PLEX\n  WLMA                WLM Application Environments         PLEX\n  WLMC                WLM Classification Rules             PLEX\n  WLMG                WLM Classification Groups            PLEX\n  WLMS                WLM Scheduling Environments          PLEX\n  WTOR                Outstanding Operator Replies         SYSTEM\n  XCFM                XCF Members                          PLEX\n  XCFS                XCF Structures                       PLEX\n  XM                  Cross Memory Connections             STORAGE\n=OPTIONS=O=OP=OPT=OPTI=OPTIO=OPTION\n)F  Example -     OPTIONS\n\n The OPTIONS subcommand displays the subcommands (or options)\n supported by the -PDS86- command. Note that this display varies\n when a non-partitioned data set is being processed.\n\n Notes:\n 1. When in ISPMODE or MEMLIST, if the O alias of OPTIONS is entered\n    after COMMAND ===>, a panel of options are presented to assist in\n    entering -PDS86- subcommands.\n 2. When in MEMLIST, if the o alias of OPTIONS is entered as a line\n    command, a panel of member options is presented to assist in\n    entering -PDS86- subcommands.\n)X SYNTAX -\n     OPTIONS\n\n ALIASES  - O, OP, OPT, OPTI, OPTIO, OPTION, OPTIONS\n)O OPERANDS -\n  no operands are supported.\n=OFFLOAD=OFFLOA=OFFLO=OFFL=OFF=OF=COMBINE=COMBIN=COMBI=COMB\n)F  Example -     OFFLOAD a:c seq\n\n  The OFFLOAD subcommand offloads members of a PDS to a member of\n  a PDS or a sequential data set.  An IEBUPDTE \"./ ADD NAME=\"\n  control statement is added before each output member and ISPF\n  statistics are included for use by the PDSLOAD program (CBT 093).\n  If extended ISPF statistics: 99,999,999 max for SIZE and INIT.\n\n  Note: ./ in the input members is translated to >< in the output.\n\n  The OFFLOAD subcommand invokes the David Brockway Cole OFFLOAD\n  program (CBT 093).\n\n)X SYNTAX -\n     OFFLOAD  memgroup  output.dataset\n                       ALIAS/NOALIAS\n                       IEBUPDTE/NOSEP\n                       OLD/SHR/MOD/NEW\n                                   TRK/CYL       SPACE(prim,sec)\n                                   VOLUME(volser)\n\n ALIASES  - OF, OFF, OFFL, OFFLO, OFFLOA, OFFLOAD\n DEFAULTS - NOALIAS, SHR, IEBUPDTE\n REQUIRED - memgroup, output.dataset\n)O OPERANDS -\n  memgroup   - specifies the name of the member(s) to be transmitted.\n\n               Member lists, member name ranges and member name\n               patterns are allowed; for more information,\n               enter HELP GROUP.\n\n output.data - specifies the name of the output data set.  Standard\n               TSO dsname syntax should be used.  This should be a\n               cataloged sequential dataset unless NEW is specified.\n\n               Note:  A member name must be entered if offloading to an\n               existing partitioned data set.\n\n))ALIAS      - specifies that any associated members (aliases, apparent\n               aliases and associated main members) are also to be\n               offloaded.\n))NOALIAS    - specifies that only the member(s) specifically identified\n               are candidates for offloading.\n))IEBUPDTE   - record in IEBUPDTE format (add a \"./ ADD NAME=\"\n               statement before each output member and preserve ISPF\n               statistics).\n))NOSEP      - place no separators between output members.\n))OLD        - obtain exclusive use of the output data set.\n))SHR        - allow shared use of the output data set.\n))MOD        - specifies that the member(s) are to be added to the end\n               of the output dataset.  APPEND is an alias for MOD.\n))NEW        - specifies that the output data set is to be created.\n               When NEW is specified, TRK/CYL, SPACE, and\n               VOLUME keywords may also be specified.\n))TRK        - specifies that the output data set is to be allocated\n               in tracks.\n))CYL        - specifies that the output data set is to be allocated\n               in cylinder units.\n))SPACE(p,s) - specifies the primary and secondary quantities for\n               the output data set in track or cylinder units.\n\n               If TRK or CYL is not entered but SPACE is entered,\n               TRK is the default allocation quantity.\n\n               If SPACE is not entered, the default is (15,15).\n))VOLUME(vo) - for NEW data sets, specifies the output volume name.\n=OUTCOPY=OU=OUT=OUTC=OUTCO=OUTCOP\n)F  Example -     OUTCOPY mema:memb\n\n  The OUTCOPY subcommand formats utility control statements\n  which can be used by IEBCOPY to select members from a data set.\n\n  OUTCOPY does not utilize ISPF services; however, when it is first\n  invoked, it attempts to establish an ISPF environment so that\n  subsequent subcommands can utilize ISPF services.\n\n  OUTCOPY usage notes:\n   A.  Output is directed to FILE(PDSOUT).\n   B.  PDSOUT must be allocated to a sequential data set or to a\n       member of a partitioned data set with fixed, 80 character\n       records prior to entering the first OUTCOPY subcommand.\n   C.  For new data sets, the default DCB attributes of\n       DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)  will be used.\n   D.  An IEBCOPY COPY statement is written before the first SELECT\n       statement for each data set as determined by the CHANGE\n       subcommand; the COPY statement is of the form:\n       COPY  OUTDD=OUTPUT,INDD=xxx\n       where xxx is the low-level qualifier of the input data set name.\n   E.  The default IEBCOPY select statement is of the form:\n       S M=memname ,memname))\n       Note -- memname is the member name; this format output statement\n       can be modified by an editor if member rename or member replace\n       functions are to be performed.\n\n       If TEXT('Any String') was specified, each subsequent IEBCOPY\n       statement changes to the form:\n          S M=memname  ANY STRING\n   F.  OUTCOPY maintains a list of member names written after each\n       copy statement and does not output a member name more than once.\n   G.  A CLIST such as the following could be established for IEBCOPY\n       use:\n        PROC 3 FROMDSN FROMQUAL TODSN CONTROLS(PDSOUT.CNTL)\n        ALLOC F(SYSIN) DA(&CONTROLS.) SHR\n        ALLOC F(SYSPRINT) DA(*)\n        ALLOC F(&FROMQUAL.) DA(&FROMDSN.) SHR\n        ALLOC F(OUTPUT) DA(&TODSN.) OLD\n        CALL 'SYS1.LINKLIB(IEBCOPY)'\n\n   H.  Assuming that OUTCOPY has created output in PDSOUT.CNTL, you\n       could copy selected members from your LIB.LOAD data set to\n       'SYS1.LINKLIB2', by entering the following line from\n       READY mode:\n       %copyout lib.load load 'sys1.linklib2'\n\n)X SYNTAX -\n     OUTCOPY  member   ECHO/NOECHO   CLOSE/NOCLOSE  IEBUPDTE/NOIEBUPDTE\n                       ALIAS/NOALIAS TEXT('string')/NOTEXT\n\n ALIASES  - OU, OUT, OUTC, OUTCO, OUTCOP, OUTCOPY\n DEFAULTS - initially:  member, ECHO, NOCLOSE, NOALIAS,\n                                      NOTEXT,  NOIEBUPDTE\n            thereafter: member, NOCLOSE,\n                        previous(ALIAS/NOALIAS; ECHO/NOECHO;\n                                 TEXT/NOTTEXT; IEBUPDTE/NOIEBUPDTE)\n REQUIRED - none.\n)O OPERANDS -\n  member     - optional, specifies the member name(s) to be output on\n               an IEBCOPY format SELECT statement.\n\n               Default member names, member lists, member name\n               ranges and member name patterns are allowed; for\n               more information, enter HELP GROUP.\n\n))ALIAS      - Specifies that the names of any associated members\n               (aliases, apparent aliases and associated main members)\n               are also to be written to the PDSOUT data set.\n))NOALIAS    - Specifies that only the names of members actually\n               identified are to be written to the PDSOUT data set.\n))ECHO       - Each IEBCOPY statement is to be written to the terminal\n               as well as to the PDSOUT data set.\n))NOECHO     - IEBCOPY statements are to be written to the PDSOUT\n               data set only.\n))IEBUPDTE   - Each output statement is to be written in IEBUPDTE\n               format instead of the standard IEBCOPY format;\n               Note: the use of this format also suppresses any COPY\n               statements generated for data set changes.\n))NOIEBUPDTE - Each output statement is to be written in IEBCOPY\n               format.\n))CLOSE      - The PDSOUT file is to be closed.  Note: the member or\n               member group specified with the close operand is not\n               output to the PDSOUT file.\n))NOCLOSE    - The PDSOUT data set is to be opened or to stay open.\n))TEXT('st') - The string, ST, is to replace the second member name on\n               each subsequent SELECT output statement.\n))NOTEXT     - The TEXT operand is to be nullified and the usual second\n               member name is to be output on each subsequent SELECT\n               output statement.\n=PATTERN=P=PA=PAT=PATT=PATTE=PATTER\n)F  Example -     PATTERN  pds/70\n\n   The PATTERN subcommand lists member names from the data set\n   directory.  Only those member names which contain the PATTERN\n   name segments specified are displayed.  Note that the default\n   member group is not affected by the DISPLAY or PATTERN subcommands.\n\n   One or two member name segments may be entered as patterns.  If two\n   segments are entered, both segments must occur in a member name for\n   it to be displayed.  For example, with the pattern segments xx and\n   1x, members named M1X4XX, M1XX and XX1X would be displayed by this\n   subcommand while members named X1X or MXX13X would not be displayed.\n\n   Note that -A is added following a displayed member name if the\n   member name is an alias.  The member name is listed in a combined\n   hexadecimal/character format if it does not contain upper case\n   alphanumeric characters (including @, $ and #) or if the first\n   character is numeric.  Unprintable characters (for 3270-type\n   devices) in a member name are displayed as periods.\n)X SYNTAX -\n     PATTERN  segment1 segment2\n\n ALIASES  - P, PA, PAT, PATT, PATTE, PATTER, PATTERN\n DEFAULTS - previously entered segment1 and segment2 operands\n REQUIRED - none.\n)O OPERANDS -\n  segment1 - optional, specifies a name segment which must be found\n             in a member name for the member name to be displayed.\n\n             Note: a group name descriptor such as part1:part2,\n             seg1/seg2 or part1*seg1 may be entered for name1, in\n             which case, the output will consist of the member names\n             which would be displayed by the MEMBERS subcommand.\n\n  segment2 - optional, specifies a second name segment which must\n             also be found in a member name for the member name to\n             be displayed.\n=PRINTOFF=PRINTOF=PRINTO=PRINT=PRIN=PRI=PR\n)F  Example -     PRINTOFF mema:memb form(0012) asa\n\n   The PRINTOFF subcommand prints a hardcopy list of a member.  The\n   TSO PRINTOFF command is used; any desired PRINTOFF operands may\n   be added after the member name.\n)X SYNTAX -\n     PRINTOFF  member ASA                 HOLD/NOHOLD\n                      ASIS/CAPS           LIST/NOLIST\n                      CLASS(c)            NOMSG\n                      COPIES(num)         PRINT/NOPRINT\n                      DEST(destname)      PROG(progname)\n                      FCB(fcbname)        SNUM\n                      FORMS(formname)     TEXT\n                      HEADING/NOHEADING   UCS(ucsname)\n                                          VOLUME(volname)\n\n ALIASES  - PR, PRI, PRIN, PRINT, PRINTO, PRINTOF, PRINTOFF\n DEFAULTS - member, CLASS(A), NOHOLD, LIST, PRINT, ASIS, HEADING\n REQUIRED - none.\n)O OPERANDS -\n  member   - optional, specifies the member name(s) to be passed\n             (along with the data set name) to the TSO PRINTOFF\n             command.\n\n             Default member names, member lists, member name\n             ranges and member name patterns are allowed; for\n             more information, enter HELP GROUP.\n\n operands -  optional, may include any desired TSO PRINTOFF operands.\n=PTSEXP=PTSEX=PTSE=PTS=PT\n)F  Example -     PTSEXP member SEQ\n\n The PTSEXP subcommand expands compacted SYSMOD data from a source\n member using the IBM GIMCPTS service routine.\n\n)X SYNTAX -\n     PTSEXP  member output.dataset\n                   LIST/NOLIST\n                   OLD/SHR/MOD/NEW\n                               TRK/CYL       SPACE(prim,sec)\n                               VOLUME(volser)\n\n ALIASES  - PT, PTS, PTSE, PTSEX\n DEFAULTS - SHR, LIST\n REQUIRED - member, output.dataset\n)O OPERANDS -\n member      - specifies the name of the member to be expanded.\n\n               If member name is ALL, then all members of the input\n               PDS will be expanded to members of an output PDS.\n\n output.data - specifies the name of the output data set.  Standard\n               TSO dsname syntax should be used.  This should be a\n               cataloged sequential dataset unless NEW is specified.\n\n               Note:  A member name must be entered if expanding to an\n               existing partitioned data set.\n\n))LIST       - specifies that the expanded SYSMOD data is to be\n               displayed.\n))NOLIST     - specifies that the expanded SYSMOD data is not to be\n               displayed.\n))OLD        - obtain exclusive use of the output data set.\n))SHR        - allow shared use of the output data set.\n))MOD        - specifies that the expanded SYSMOD data is to be added\n               to the end of the output dataset.  APPEND is an alias\n               for MOD.\n))NEW        - specifies that the output data set is to be created.\n               When NEW is specified, TRK/CYL, SPACE, and\n               VOLUME keywords may also be specified.\n))TRK        - specifies that the output data set is to be allocated\n               in tracks.\n))CYL        - specifies that the output data set is to be allocated\n               in cylinder units.\n))SPACE(p,s) - specifies the primary and secondary quantities for\n               the output data set in track or cylinder units.\n\n               If TRK or CYL is not entered but SPACE is entered,\n               TRK is the default allocation quantity.\n\n               If SPACE is not entered, the default is (15,15).\n))VOLUME(vo) - for NEW data sets, specifies the output volume name.\n=RECALL=R=RC=RE=REC=RECA=RECAL\n)F  Example -     RECALL enter\n\n  The RECALL subcommand displays the previous subcommand or\n  displays and reenters the previous subcommand for execution.\n\n  Note: the following subcommands are ignored for the purposes of\n  the RECALL subcommand: CHANGE, HELP, K or KLEAR and X.\n)X SYNTAX -\n     RECALL  ENTER/NOENTER/CHANGE\n\n ALIASES  - R, RE, REC, RECA, RECAL, RECALL\n DEFAULTS - NOENTER\n REQUIRED - none.\n)O OPERANDS -\n))ENTER     - the previous subcommand is to be displayed and\n              reentered for execution.\n))CHANGE    - a prototype CHANGE subcommand is to be generated\n              for the currently allocated data set.\n))NOENTER   - the previous subcommand is to be displayed.\n=RENAME=REN=RENA=RENAM\n)F  Example -     RENAME thismem thatmem\n\n  The RENAME subcommand updates a member's name.\n\n  If a main load member is renamed, any associated alias directory\n  entries will be updated to reflect the new base member name.\n\n  Note: if a main load member is renamed to itself, any associated\n  alias entries will be checked and updated as needed.\n\n  Caution: this subcommand modifies the data set. To ensure data set\n  integrity, you should allocate the data set as OLD or be aware of\n  the data set update protection provided by the -PDS86- command for\n  SHR allocations (for details, enter HELP UPDATE).\n)X SYNTAX -\n     RENAME  curname newname   SWAP/NOSWAP  GROUP/NOGROUP  REPBY(repnm)\n\n ALIASES  - REN, RENA, RENAM, RENAME\n DEFAULTS - NOSWAP, NOGROUP\n REQUIRED - curname, newname\n)O OPERANDS -\n  curname   - specifies the current name of the member.\n\n  newname   - specifies the new name for the member.  Note that this\n              new name becomes the -PDS86- default member name.\n\n))SWAP      - the members named are to exchange directory entries.\n))NOSWAP    - no member name exchange is to be performed.\n))GROUP     - specifies that a group rename is to be performed.  The\n              range of names affected is defined by the first operand\n              and the resulting member name is obtained by replacing\n              the first characters of the member name by the second\n              group of characters from the RENAME command.\n\n              For example, if  RENAME IEB ABCD GROUP  were entered,\n              all members beginning IEB... would be renamed to ABCD...\n                1.  With the statement, RENAME IEB ABCD GROUP,\n                    a member named IEB12 would be assigned the\n                    name ABCD12\n                2.  With the statement, RENAME IEB OX GROUP,\n                    a member named IEB12 would be assigned the\n                    name OX12\n\n))NOGROUP   - only the member specifically identified is to be renamed.\n))REPBY(rp) - rp specifies a replacement member for curname.\n              For example, the following subcommand:\n              RENAME ONE TWO REPBY(NEWONE)\n\n              is equivalent to the following two subcommands:\n              RENAME ONE TWO\n              RENAME NEWONE ONE\n=REPLACE=REP=REPL=REPLA=REPLAC\n)F  Example -     REPLACE mema:memb /before/after/ write\n\n  The REPLACE subcommand changes portions of a member which contain a\n  search string.  Only those portions of the member which contain the\n  search string are displayed after a character string substitution.\n\n  If the WRITE keyword is specified, the data is updated in-place;\n  otherwise, only potential changes are listed.\n\n  Unprintable characters for 3270-type devices are translated to\n  periods before they are displayed.\n\n  REPLACE formats are NUM, SNUM, NONUM, LBLOCK, LDUMP, BLOCK and DUMP;\n  for load modules, the NUM, SNUM and NONUM formats are equivalent\n  to the LDUMP format.\n\n  The default format is initially NUM; however, each time a format\n  operand is entered on a REPLACE, FIND or LIST subcommand, the value\n  entered is used as the output format for subsequent REPLACE, FIND\n  and LIST subcommands.  Also, note the following:\n    A. Formats NUM, SNUM and NONUM limit the search and update length\n       for logical records to 256 characters.\n    B. Column 72 is not modified for formats NUM or SNUM if the record\n       format is fixed with 80 character records.\n    C. Formats BLOCK and DUMP apply to physical records; the other\n       formats apply to logical records; and for load modules, LBLOCK\n       and LDUMP formats update and display only CSECT data.\n    D. Formats LBLOCK, LDUMP, BLOCK and DUMP display only the updated\n       segments of a record which contained the search string; however,\n       a following segment will also be displayed if the string spanned\n       a segment boundary.\n    E. Formats LBLOCK, LDUMP, BLOCK and DUMP require equal length\n       search and replacement strings; formats NUM, SNUM and NONUM\n       allow different length strings with string expansion (shifting\n       the data over to multiple blanks) and string contraction\n       (shifting the data from the next blank to the replacement data).\n\n)X SYNTAX -\n     REPLACE  member +stringa+stringb+\n                    NUM/SNUM/NONUM/LBLOCK/LDUMP/BLOCK/DUMP\n                    CAPS/ASIS/IGNORE  WRITE/NOWRITE  STATS/NOSTATS\n                    OFFSET(Hx) MODULE(Partm)\n                    SKIPREC(n) MAXIN(n) MAXOUT(n)\n                    SKIPCOL(n) MAXLEN(n) MAXFIND(n)\n\n ALIASES  - REP, REPL, ,REPLA, REPLAC, REPLACE\n DEFAULTS - member, previous stringa, CAPS, NOWRITE, STATS,\n                    NUM or previous REPLACE/FIND/LIST format\n REQUIRED - none.\n)O OPERANDS -\n  member     -  optional, specifies the name of the member(s) to be\n                scanned and updated.\n\n                Default member names, member lists, member name\n                ranges and member name patterns are allowed; for\n                more information, enter HELP GROUP.\n\n  stringa    -  optional, the string to be searched for.  It is coded\n                as a delimited string like +searched for+.  If the\n                string is not entered or is null, the last string\n                entered will be used. The string may contain one to\n                32 characters.  If the ASIS keyword is entered, neither\n                string will be translated to upper case letters.\n\n                As an alternative, both strings may be entered as\n                hexadecimal strings delimited with x's like\n                x0123456789xabcdefx.  Note that each string may\n                contain one to 64 characters and that x333x1x and\n                x0333x01x are equivalent.\n\n  stringb    -  optional, the replacement string.  It is coded as a\n                delimited string like +replaced with+.  If the string\n                is not entered or is null, the string is assumed to\n                be null.  The string may contain zero to 32 characters.\n                If the ASIS keyword is entered, neither string will be\n                translated to upper case letters.  If the IGNORE\n                keyword is entered (or defaulted to) stringb will not\n                be translated to upper case letters.\n\n                As an alternative, both strings may be entered as\n                hexadecimal strings delimited with x's like\n                x0123456789xabcdefx.  Note that each string may\n                contain one to 64 characters and that x333x1x and\n                x0333x01x are equivalent.\n\n  REPLACE format control keywords are as follows:\n))NUM        -  The line number field (the last 8 bytes of a fixed-\n                format record or the first 8 bytes otherwise) of\n                each logical record is examined; if the field is not\n                numeric, formatting is switched to NONUM mode for the\n                remainder of the member.\n\n                For ISPF-saved members, the high-order six digits of\n                the line number field is formatted; otherwise, the\n                low-order six digits of the line number field is\n                formatted by suppressing leading zeroes.  The line\n                number segment is followed by a blank and up to 249\n                characters of data from the logical record.\n))SNUM       -  The line number field (the last 8 bytes of a fixed-\n                format record or the first 8 bytes otherwise) is\n                discarded.  Up to 256 bytes from a logical record are\n                searched or updated.\n))NONUM      -  Up to 256 bytes from a logical record are searched or\n                updated.\n))LBLOCK     -  Logical records are formatted with two hexadecimal\n                offsets (displacement in the member and displacement\n                in the logical record) and segments of 64 characters\n                surrounded by asterisks.  Only formatted segments which\n                contain the search string are updated and displayed;\n                however, a following segment will also be displayed if\n                the string spans a segment boundary.\n\n                Note: for load modules, only CSECT data will be\n                searched or updated and if the partial name Partm is\n                entered in a MODULE operand, only those CSECT or ENTRY\n                names matching Partm will be searched or updated.\n                CSECT records are formatted with two hexadecimal\n                offsets (a module offset and a CSECT offset) and\n                segments of 64 characters surrounded by asterisks.\n))LDUMP      -  Logical records are formatted with two hexadecimal\n                offsets (displacement in the member and displacement\n                in the logical record), segments of up to 32\n                characters of hexadecimal data and up to 16 bytes of\n                equivalent characters surrounded by asterisks.  Only\n                formatted segments which contain the search string\n                are updated and displayed; however, a following\n                segment will also be displayed if the string spans a\n                segment boundary.\n\n                Note: for load modules, only CSECT data will be\n                searched or updated and if the partial name Partm is\n                entered in a MODULE operand, only those CSECT or ENTRY\n                names matching Partm will be searched or updated.\n                CSECT records are formatted with two hexadecimal\n                offsets (a module offset and a CSECT offset), segments\n                of up to 32 characters of hexadecimal data and up to\n                16 bytes of characters surrounded by asterisks.\n))BLOCK      -  Physical records are formatted with two hexadecimal\n                offsets (displacement in the member and displacement\n                in the physical record) and segments of 64 characters\n                surrounded by asterisks.\n\n                Only formatted segments which contain the search\n                string are updated and displayed; however, a following\n                segment will also be displayed if the string spans a\n                segment boundary.\n))DUMP       -  Physical records are formatted with two hexadecimal\n                offsets (displacement in the member and displacement\n                in the physical record), segments of up to 32\n                characters of hexadecimal data and up to 16 bytes of\n                equivalent characters surrounded by asterisks.\n\n                Only formatted segments which contain the search\n                string are updated and displayed; however, a following\n                segment will also be displayed if the string spans a\n                segment boundary.\n  REPLACE argument translation keywords are as follows:\n))CAPS        - default, if character string arguments are entered,\n                they will be translated to upper case letters.\n))ASIS        - if specified, character arguments will not be\n                translated to upper case letters.\n))IGNORE      - if specified, search for upper and lower-case data\n                matching the specified string.\n  REPLACE control keywords are as follows:\n))WRITE       - indicates that the member is to be updated in place.\n                UPDATE is an alias of WRITE.\n))NOWRITE     - indicates that no changed records are to be written.\n))STATS       - indicates that ISPF statistics or a ZAP IDR record is\n                to be updated if any member data is changed.\n))NOSTATS     - indicates that ISPF statistics or a ZAP IDR record is\n                not to be updated even if member data is changed.\n))OFFSET(Hx)  - for LBLOCK and LDUMP formats only; Hx may be entered\n                as a 1 to six digit hexadecimal number to specify\n                the module offset at which the search is to begin.\n\n                If both MODULE AND OFFSET keywords are entered, the\n                offset applies to each module selected.\n))MODULE(Partm)-for LBLOCK or LDUMP formats only; Partm may be entered\n                as a 1 to 8 byte partial external name to limit the\n                CSECT or ENTRY names to be searched or updated to\n                those matching the partial name Partm.\n\n                If the form MODULE(*) is used, the previous partial\n                name entered on any MODULE keyword will be used.\n\n                If both MODULE AND OFFSET keywords are entered, the\n                offset applies to each module selected.\n))SKIPREC(n)  - n is coded as 0 through 9999999 to specify the number\n                of logical records (physical records for BLOCK or\n                DUMP formats) to ignore at the beginning of a member.\n))MAXIN(n)    - n is coded as 0 through 9999999 to specify the maximum\n                number of logical records (physical records for BLOCK\n                or DUMP formats) to input for a member after\n                satisfying any SKIPREC operand.\n))MAXOUT(n)   - n is coded as 0 through 9999999 to specify the maximum\n                number of logical records (partial logical records for\n                LBLOCK or LDUMP formats; partial physical records for\n                BLOCK or DUMP formats) to output for a member.\n))SKIPCOL(n)  - n is coded as 0 through 99999 to specify the number\n                of columns to ignore at the beginning of each logical\n                record (physical record for BLOCK or DUMP formats).\n\n                Note: for NUM or SNUM output format with record\n                format V, SKIPCOL(0) refers to the first data position\n                after the line number field.\n))MAXLEN(n)   - n is coded as 0 through 99999 to specify the maximum\n                length of a logical record (physical record for BLOCK\n                or DUMP formats) to search or update.\n))MAXFIND(n)  - n is coded as 0 through 9999999 to specify the maximum\n                number of strings that are to be located and updated.\n=REPRO=REPR\n)F  Example -     REPRO mem1:mem2 maxblk(2400)\n\n  The REPRO subcommand rebuilds members.  It can also create new\n  members based on existing members in the data set.\n\n  If the TO (or the equivalent AS) keyword is used, each new member\n  is named in a generic fashion.  For example, if TO(X12) is entered,\n  each resulting member name is formed by placing X12 over the first\n  three characters of the original member name.  An exception to this\n  rule is made when only a single member is to be created and its\n  aliases are not also requested; in this case, the member name is\n  taken directly from the TO keyword.\n\n  For load members, a null ZAP IDR record can be added when the\n  member is rebuilt; for non-load members, the member can be\n  reblocked as specified by the MAXBLK keyword.\n\n  Caution: this subcommand modifies the data set. To ensure data set\n  integrity, you should allocate the data set as OLD or be aware of\n  the data set update protection provided by the -PDS86- command for\n  SHR allocations (for details, enter HELP UPDATE).\n)X SYNTAX -\n     REPRO  memgroup  ADDZAP\n                      ALIAS/NOALIAS\n                      MAXBLK(size)\n                      TO(pname) / AS(pname)\n                      REPLACE/NOREPLACE\n\n ALIASES  - REPR, REPRO\n DEFAULTS - memgroup, MAXBLK(current BLKSIZE), NOALIAS\n REQUIRED - none.\n)O OPERANDS -\n  memgroup   - optional, specifies the name of the member(s) to be\n               rebuilt (or used as input for new member(s)).\n\n               Default member names, member lists, member name\n               ranges and member name patterns are allowed; for\n               more information, enter HELP GROUP.\n\n))ADDZAP     - for load members only, specifies that a ZAP IDR record\n               is to be added (each ZAP IDR record contains space for\n               19 historical entries).\n))ALIAS      - specifies that any associated members (aliases, apparent\n               aliases and associated main members) are also to be\n               input.\n))NOALIAS    - specifies that only the member(s) specifically\n               identified are to be input.\n))MAXBLK(sz) - for RECFM=V or RECFM=F members only, specifies the\n               maximum output blocksize to be used when the members\n               are reconstructed.\n))TO(pname)  - pname defines the name of any output members.  For\n               example, with TO(new) and the input members, AA, ABBA\n               and IBM04, members named NEW, NEWA and NEW04 will be\n               created (the original members will not be changed).\n\n               Note that if only a single member is input and the\n               ALIAS keyword is not entered, the resulting member\n               name is taken only from the AS or TO keyword.\n))AS(pname)  - pname defines the name of any output members.  For\n               example, with AS(new) and the input members, AA, ABBA\n               and IBM04, members named NEW, NEWA and NEW04 will be\n               created (the original members will not be changed).\n\n               Note that if only a single member is input and the\n               ALIAS keyword is not entered, the resulting member\n               name is taken only from the AS or TO keyword.\n))REPLACE    - for use with AS or TO only, specifies that current\n               members in the data set are to be replaced by any\n               identically named output members.\n))NOREPLACE  - default for AS or TO, if any members in the data set\n               will be replaced by any identically named output\n               members, an error message will be generated.\n=RESTORE=RES=REST=RESTO=RESTOR\n)F  Example -     RESTORE oldname\n\n  The RESTORE subcommand resurrects deleted members.  Deleted members\n  remain in a partitioned data set until the data set is compressed.\n\n  It may be possible to resurrect members which were deleted before\n  compressing a data set if you mark all of the data set's space as\n  in-use with a \"FIXPDS MAXSPACE\" statement before the restore attempt.\n\n  The attributes authorized, not editable, not executable, only\n  loadable, page boundary, reentrant, refreshable and reusable can\n  not be determined from load module records; however, these attributes\n  can be assigned based on a model member with the LIKE operand or they\n  may be selectively assigned with the ATTRIB subcommand.\n\n  If the data set is a load library, then if the member name is an\n  imbedded external name within the load module, that external name\n  will be used as the entry point; otherwise, the first CSECT in the\n  load module will be used as the entry point.\n\n  Caution: this subcommand modifies the data set. To ensure data set\n  integrity, you should allocate the data set as OLD or be aware of\n  the data set update protection provided by the -PDS86- command for\n  SHR allocations (for details, enter HELP UPDATE).\n)X SYNTAX -\n     RESTORE  member   TTR(start)\n                       REPEAT/NOREPEAT\n                       DISPLAY/NODISPLAY\n                       PROMPT/NOPROMPT\n                       LIKE(xyz)\n                       MODULE(pmodname)\n                       COUNT(number)\n                       FIND('any string')\n                       CAPS/ASIS\n                       TEST\n\n ALIASES  - RES, REST, RESTO, RESTOR, RESTORE\n DEFAULTS - TTR(0), DISPLAY, PROMPT, COUNT(5), CAPS\n REQUIRED - member name\n)O OPERANDS -\n  member    - specifies the name of the member to be resurrected.\n              This member name becomes the default member name.\n\n))TTR(strt) - strt is one to six hexadecimal digits which provide the\n              relative track address for the deleted member; or if\n              REPEAT, DISPLAY or PROMPT are in effect, it specifies\n              the start relative address for a deleted member search.\n\n              Note: if TTR(0) is specified or defaulted, the member\n              search begins at the first location following the\n              directory.\n\n))REPEAT    - multiple deleted members at or following the provided\n              TTR address may be restored.\n              The member name to be used is taken from the partial\n              member name entered filled to eight characters by a\n              sequential count field.  For example, if the partial\n              member name is GASM the successive restored member\n              names will be GASM0001, GASM0002, GASM0003, ...\n))NOREPEAT  - at most one member is to be restored.\n))DISPLAY   - data from deleted members is to be displayed.\n))NODISPLAY - no data from deleted members is to be displayed.\n))PROMPT    - a YES response to a program prompt is to be required\n              before restoring a deleted member.\n))NOPROMPT  - no program prompting is to be performed before\n              restoring a deleted member.\n))LIKE(xyz) - For load modules, the following attributes are to be\n              set based on their corresponding values in member XYZ:\n              AMODE, authorized, editable, executable, only loadable,\n              page aligned, reentrant, refreshable, reusable, RMODE,\n              and SSI.\n              For other members, a SSI value or ISPF statistics are\n              to be set based on member XYZ.\n))MODULE(p) - For load modules, p specifies a partial external name,\n              which requires a match with a entry symbol or CSECT\n              name in a deleted member.  If no module name match\n              can be made, the member will not be displayed or\n              resurrected.\n\n              If the form MODULE(*) is used, the previous partial\n              name entered on any MODULE keyword will be used.\n))COUNT(nm) - Maximum number of informational lines to display from\n              deleted members before prompting.\n))FIND('s') - For any member, requires the presence of the specified\n              character string in a deleted member.  If the string is\n              not present in a deleted member, that member will not be\n              displayed or resurrected.  The string may contain one to\n              32 characters.  If the ASIS keyword is entered, the\n              string will not be translated to upper case letters.\n))CAPS      - For use with FIND, specifies that the FIND argument is\n              to be translated to upper case.\n))ASIS      - For use with FIND, specifies that the FIND argument is\n              not to be translated to upper case.\n))TEST      - Specifies that RESTORE simulate the resurrection of\n              of deleted members without actually restoring them.\n=REVIEW=REVIE=REVI=REV\n)F  Example -     REVIEW mema:memb\n\n   The REVIEW subcommand browses data.  The TSO REVIEW command\n   (CBT 134) is used; any desired REVIEW operands may be added\n   after the member name.\n\n   Written in System/370 Assembler by Bill Godfrey in 1981.\n   Modified \"to the hilt\" by Greg Price since 1984.\n\n   The All Singing All Dancing REVIEW Revue\n   SHARE Session 2811\n   Austin 2009-03-05\n   Presented by Greg Price\n   http://www.jaymoseley.com/hercules/downloads/pdf/S2811GP235506.PDF\n\n   Record Formats - fixed, variable, or undefined\n                  - blocked or unblocked\n                  - standard or spanned\n                  - with or without printer control characters\n\n   Data Lengths   - 1 to 65535 bytes of data, inclusive\n\n)X SYNTAX -\n     REVIEW  member operands\n\n ALIASES  - REV, REVI, REVIE, REVIEW\n DEFAULTS - member\n REQUIRED - none.\n)O OPERANDS -\n  member   - optional, specifies the member name(s) to be passed\n             (along with the data set name) to the TSO REVIEW\n             command.\n\n             Default member names, member lists, member name\n             ranges and member name patterns are allowed; for\n             more information, enter HELP GROUP.\n\n             Note - if : is entered for the member name position,\n             REVIEW will display a member selection list.\n\n operands -  optional, may include any desired TSO REVIEW operands.\n             e.g. \"REVIEW : GEN\" to display member generations\n=SMPGEN=SMPGE=SMPG=SMP=SM=\n)F  Example -     SMPGEN : MAC distlib(apdpsrc) syslib(pdpsrc) +\n                  txlib(pdpsorc)\n\n   The SMPGEN subcommand assists in creating SMP/E sysmods.  While\n   only ++MAC, ++MACUPD, ++SRC, and ++SRCUPD statements are\n   generated, SMP/E functions can be easily completed with an editor\n   by using SMPGEN output as a basis for the sysmod.\n\n   This implementation is known as SMPGEN Lite.\n\n)X SYNTAX -\n     SMPGEN  memgroup\n             MAC    DISTLIB(ddn)  SYSLIB(ddn)  SSI(hexdata)  TYPE(name)\n                    TXLIB(ddn) / RELFILE(numbr) / INLINE\n                    OUTDSN(dsn) OLD/SHR\n             -or-\n             MACUPD DISTLIB(ddn)  SYSLIB(ddn)\n                    OUTDSN(dsn) OLD/SHR\n             -or-\n             SRC    DISTLIB(ddn)  SYSLIB(ddn)\n                    DISTMOD(ddn) SSI(hexdata)\n                    TXLIB(ddn) / RELFILE(numbr) / INLINE\n                    OUTDSN(dsn) OLD/SHR\n              -or-\n             SRCUPD DISTLIB(ddn)  SYSLIB(ddn)  DISTMOD(ddn)\n                    OUTDSN(dsn) OLD/SHR\n\n ALIASES  - SM, SMP, SMPG, SMPGE, SMPGEN\n DEFAULTS - TYPE(MAC), DISTLIB(DISTLIB), SHR,\n            INLINE (TXLIB or RELFILE not specified)\n REQUIRED - memgroup, DISTLIB and either MAC, MACUPD, SRC, or SRCUPD\n)O OPERANDS -\n  memgroup - specifies the member group for which SMP/E control\n             statements are desired.\n\n             Default member names, member lists, member name\n             ranges and member name patterns are allowed; for\n             more information, enter HELP GROUP.\n\n))MAC          -  define MACRO elements with ++MAC statements.  Data\n                  will be included after each MAC statement if INLINE\n                  is specified; otherwise, either TXLIB or RELFILE is\n                  required.\n))MACUPD       -  define MACRO element updates with ++MACUPD\n                  statements.  Data will be included inline after each\n                  MACUPD statement.  Note that SMP/E assumes input data\n                  has valid IEBUPDTE sequence numbers.\n))SRC           - define source elements with ++SRC statements.  Data\n                  will be included after each SRC statement if INLINE\n                  is specified; otherwise, either TXLIB or RELFILE is\n                  required.\n))SRCUPD        - define source element updates with ++SRCUPD\n                  statements.  Data will be included inline after each\n                  SRCUPD statement.  Note that SMP/E assumes input data\n                  has valid IEBUPDTE sequence numbers.\n))DISTLIB(dd)   - add \"DISTLIB(dd)\" to each generated SMP/E control\n                  statement to specify the DDNAME of the distribution\n                  library.  The DISTLIB operand is always required for\n                  a SMPGEN subcommand.\n))SYSLIB(dd)    - add \"SYSLIB(dd)\" to each generated SMP/E control\n                  statement to specify the DDNAME of the target system\n                  library.  The SYSLIB operand is always optional for a\n                  SMPGEN subcommand.\n))SSI(hexdata) -  add \"SSI(hexdata)\" to each generated SMP/E control\n                  statement to specify system status information.  The\n                  SSI operand is always optional for a SMPGEN\n                  subcommand; note that the SSI operand is ignored by\n                  SMP/E unless data is included inline.\n))TYPE(name)   -  change generated SMP/E control statements from\n                  ++MAC to ++name.  For example, to generate ++PANEL\n                  statements, code TYPE(PANEL).\n))TXLIB(dd)    -  add \"TXLIB(dd)\" to each generated SMP/E control\n                  statement to specify the DDNAME where MAC or\n                  SRC elements reside.\n))RELFILE(num) -  add \"RELFILE(num)\" to each generated SMP/E control\n                  statement to specify the relative number of the SMP/E\n                  relative file where MAC or SRC elements reside.\n))INLINE       -  generate MAC or SRC elements inline.\n))DISTMOD(dd)  -  add \"DISTMOD(dd)\" to each generated SMP/E control\n                  statement to specify the DDNAME of the link edit\n                  distribution library for object code produced from\n                  the assembly of source code.\n))OUTDSN(dsn)   - specifies the name of an existing output dataset\n                  with fixed, 80 character records.  Standard TSO\n                  dsname syntax should be used.  This should be a\n                  cataloged sequential dataset.  OUTDATASET is an alias\n                  for this keyword.\n\n                  Note:  A member name must be entered if writing to an\n                  existing partitioned data set.\n))OLD           - obtain exclusive use of the output data set.\n))SHR           - allow shared use of the output data set.\n=SRCHFOR=SRCHFO=SRCHF=SRCH=SRC=SR=SEARCH=SEARC=SEAR=SEA=SE\n)F  Example -     SRCHFOR a:c 'string'\n\n  The SRCHFOR subcommand displays portions of members which contain a\n  search string.  The IBM SuperC Search-For program is used.\n\n)X SYNTAX -\n     SRCHFOR  memgroup  'string'\n                       ALIAS/NOALIAS\n                       PREFIX/SUFFIX/WORD\n                       HEX\n                       COL(start)\n                       COL(start:latest)\n                       CKPACKL\n                       COBOL\n                       SEQ\n                       LPSF\n                       NOSLIST\n\n ALIASES  - SR, SRC, SRCH, SRCHF, SRCHFO, SRCHFOR,\n            SE, SEA, SEAR, SEARC, SEARCH\n DEFAULTS - ALIAS\n            ANYC, LONGLN (IBM SuperC Search-For options)\n REQUIRED - memgroup, string\n)O OPERANDS -\n  memgroup   - specifies the name of the member(s) to be searched.\n\n               Member lists, member name ranges and member name\n               patterns are allowed; for more information,\n               enter HELP GROUP.\n\n  string     - the string to be searched for.  It is coded as a\n               delimited string like 'searched for'.  The string may\n               contain one to 50 characters.\n\n))ALIAS      - specifies that any associated members (aliases, apparent\n               aliases and associated main members) are also to be\n               searched.\n))NOALIAS    - specifies that only the member(s) specifically identified\n               are candidates for searching.\n))HEX        - specifies that the string to be searched for is in\n               hexadecimal format.\n))PREFIX     - only those occurrences of the character string 'xxx'\n               that are a prefix to a word (or a label) and that are\n               within the specified (or default) columns will be\n               considered a match.\n\n               A prefix is defined as being preceded by a non-\n               alphanumeric character and followed by an alphanumeric\n               character.\n))SUFFIX     - only those occurrences of the character string 'xxx'\n               that are a suffix to a word (or a label) and that are\n               within the specified (or default) columns will be\n               considered a match.\n\n               A suffix is defined as being preceded by an\n               alphanumeric character and followed by a non-\n               alphanumeric character.\n))WORD       - only those occurrences of the character string 'xxx'\n               that are a word (or a label) and that are within the\n               specified (or default) columns will be considered a\n               match.\n\n               A word is defined as being preceded and followed by\n               a non-alphanumeric character.\n))COL(start)\n             - the column in which the string must start for the search.\n))COL(start:latest)\n             - the column in which the string must start for the search\n               and the \"latest\" column in which the string can start for\n               the search.\n))CKPACKL    - check for packed format and unpack the input data set\n               or member before searching.\n))COBOL      - do not search columns 1-6 in FB 80 data sets.\n))SEQ        - do not search FB 80 or VB 255 standard sequence number\n               columns.\n))LPSF       - list previous Search-For following lines. Lists the\n               matched string line and up to n preceding and n\n               following lines for context.\n\n               Note:  the number of lines is set by the global\n               variable &LPSFV.\n))NOSLIST    - do not print member select statements.\n=SUBMIT=SU=SUB=SUBM=SUBMI\n)F  Example -     SUBMIT mema:memb\n\n The SUBMIT subcommand submits a JCL member.  The TSO SUBMIT\n command is used; any desired SUBMIT operands may be specified\n after the member name.\n)X SYNTAX -\n     SUBMIT  member operands\n\n ALIASES  - SU, SUB, SUBM, SUBMI, SUBMIT\n DEFAULTS - member\n REQUIRED - none.\n)O OPERANDS -\n  member   - optional, specifies the member name(s) to be passed\n             (along with the data set name) to the TSO SUBMIT command.\n\n             Default member names, member lists, member name\n             ranges and member name patterns are allowed; for\n             more information, enter HELP GROUP.\n\n  operands - optional, may include any desired TSO SUBMIT operands.\n=SUBLIST=SUBL=SUBLI=SUBLIS\n)F  Example -     IF amx/ noalias then(SUBLIST)\n                  PRINTOFF * form(dx00) nohead\n                  COPY     * other.library\n                  DELETE   *\n\n   The SUBLIST subcommand forms member sublists.  When SUBLIST gains\n   control, it forms a new member group using the individual member\n   names passed to it; each -PDS86- subcommand which invokes SUBLIST\n   defines a new member sublist.\n\n   SUBLIST disregards duplicate member names.\n\n   SUBLIST is useful for the THEN or ELSE keywords of the IF and FIND\n   subcommands in that operands are not supported after the subcommand\n   name; but if SUBLIST is used as the subcommand, a following\n   subcommand (which uses * for the group name) may have any desired\n   operands.\n\n   Also, if multiple operations are to be performed to the same list\n   of members, they can be organized as a single member group using\n   the SUBLIST subcommand.\n)X SYNTAX -\n     SUBLIST  memgroup ALIAS/NOALIAS\n                       =MEMLIST\n                       REVERSE\n\n ALIASES  - SUBL, SUBLI, SUBLIS, SUBLIST\n DEFAULTS - memgroup, NOALIAS\n REQUIRED - none.\n)O OPERANDS -\n  memgroup - optional, specifies the group of members whose names\n             are to be defined as a member group.\n\n             Default member names, member lists, member name\n             ranges and member name patterns are allowed; for\n             more information, enter HELP GROUP.\n\n))ALIAS    - specifies that any associated members (aliases, apparent\n             aliases and associated main members) are also to be\n             added to the sublist.\n))NOALIAS  - specifies that only the member(s) specifically\n             identified are to be entered in the sublist.\n))=MEMLIST - sets the sublist to members in the current MEMLIST.\n))REVERSE  - specifies that the member list is to be inverted; include\n             all members except those in the sublist specification.\n\n             Note:  this only works for a single member group\n             range, pattern, or combination specification.\n             e.g., TSO* or XMIT/ or P86:\n=SVC=SV\n)F  Example -     SVC 109\n\n   The SVC subcommand formats information regarding the SVC table.\n   SVC's are extensions to the operating system which can be invoked\n   to perform system tasks.  SVC's receive control in supervisor state\n   and in the master storage protect key (key zero).  They have the\n   power to alter otherwise protected storage areas or issue privileged\n   instructions that cannot be issued directly from problem programs.\n\n   If no SVC number is requested, a formatted list of all 256 SVC's is\n   provided.  If a SVC number is specified, only that SVC is formatted.\n\n   Type 1 SVC's cannot link to other routines and cannot issue other\n   SVC's from within the routine.  They receive control with the local\n   lock held and can obtain all other locks.  They reside in the system\n   nucleus (IEANUC0x).\n\n   Type 2 SVC's can link to other routines and can issue other SVC's\n   themselves.  They require no locks but can issue them.  Like type 1\n   SVC's, they reside in the system nucleus.\n\n   Type 3/4 (3 or 4) SVC's can link to other routines and can issue\n   other SVC's.  They require no locks but can issue them.  They reside\n   in the Link Pack Area (LPA) or Modified Link Pack Area (MLPA).\n   They can be loaded from any of the LPA libraries or alternatively,\n   from SYS1.SVCLIB or SYS1.LINKLIB.\n\n   Type 6 SVC's cannot link to other routines or issue other SVC's.\n   They execute disabled, meaning that no other program can gain\n   control within MVS during the execution of the SVC.  Locks cannot\n   be held on entry to the SVC.  Like types 1 and 2, type 6 SVC's\n   reside in the system nucleus.\n\n   Four SVC's are ESR Router SVC's.  SVC 109 contains a SVCTABLE for\n   type 3 or 4 ESR SVC's, SVC 116 contains a SVCTABLE for type 1 ESR\n   SVC's, SVC 122 contains a SVCTABLE for type 2 ESR SVC's, and SVC 137\n   contains a SVCTABLE for type 6 ESR SVC's.\n\n   Note: This subcommand requires the MXI program.\n)X SYNTAX -\n     SVC num-mask\n\n ALIASES  - SV, SVC\n DEFAULTS - *\n REQUIRED - none.\n)O OPERANDS -\n  num-mask   - optional decimal number that filters the displayed list\n               by all or part of the decimal SVC number.  The wildcard\n               character of '*' and a placeholder character of '%' can\n               be used.\n\n               The default value for num-mask is '*'.\n=TIME\n)F  Example -     TIME\n\n  The TIME subcommand displays the time, day, and date.\n\n  8.10.56 AM      THURSDAY    AUG 10, 2017    (17.222)\n)X SYNTAX -\n     TIME\n\n ALIASES  - none.\n)O OPERANDS -\n  no operands are supported.\n=TSO=TS=T\n)F  Example -     TSO listc lev(sys2)\n\n   The TSO subcommand may be used to invoke a TSO command processor\n   or CLIST.  Any desired operands may be specified after the name\n   specified.\n)X SYNTAX -\n     TSO  command operands\n\n ALIASES  - T, TS, TSO\n DEFAULTS - none.\n REQUIRED - command\n)O OPERANDS -\n  command  - specifies the CLIST or command processor to be given\n             control.\n\n             If the form %cnam if used, CNAM is assumed to be a\n             CLIST name.\n\n  operands - optional, may include any desired operands.\n=TSOEDIT=TSOE=TSOED=TSOEDI\n)F  Example -     TSOEDIT mema:memb cntl\n\n The TSOEDIT subcommand edits a member; The TSO EDIT command is used.\n\n If an EDIT type keyword is entered, that keyword is passed to EDIT\n as the descriptive qualifier; otherwise, a descriptive qualifier is\n chosen as follows:\n   A. If the low-level qualifier of the partitioned data set name is\n      one of the valid descriptive qualifiers for EDIT (ASM, BASIC,\n      CLIST, CNTL, COBOL, DATA, IPLI, LIST, PLI, TEXT or VSBASIC),\n      that qualifier is passed to EDIT.\n   B. If the low-level qualifier is FORT, GOFORT is passed to EDIT.\n   C. Otherwise, the data type qualifier is not a valid descriptive\n      qualifier and the general descriptive qualifier, DATA, is\n      passed to EDIT.\n)X SYNTAX -\n     TSOEDIT  member NONUM ASIS OLD/NEW\n                     ASM/BASIC/CLIST/CNTL/COBOL/DATA/\n                     FORTE/FORTG/FORTGI/FORTH/GOFORT/\n                     IPLI/LIST/PLI/PLIF/TEXT/VSBASIC\n\n ALIASES  - TSOE, TSOED, TSOEDI, TSOEDIT\n DEFAULTS - member, EDIT type based on the data set name\n REQUIRED - none.\n)O OPERANDS -\n  member  - optional, specifies the member name(s) to be passed (along\n            with the data set name) to the TSO EDIT command.\n\n            Default member names, member lists, member name\n            ranges and member name patterns are allowed; for\n            more information, enter HELP GROUP.\n\n))NONUM   - specifies that the member is to be edited without line\n            numbers.\n))ASIS    - specifies that the member is to be edited with upper and\n            lower case data.\n))OLD     - specifies that -PDS86- is to verify that the member\n            exists before calling EDIT.\n))NEW     - specifies that -PDS86- is to verify that the member\n            does not exist before calling EDIT.\n\n EDIT type keywords are as follows:\n))ASM     -  EDIT type is assembly\n))BASIC   -  EDIT type is BASIC\n))CLIST   -  EDIT type is CLIST\n))CNTL    -  EDIT type is CNTL\n))COBOL   -  EDIT type is COBOL\n))DATA    -  EDIT type is DATA\n))FORTE   -  EDIT type is FORTRAN level \"E\"\n))FORTG   -  EDIT type is FORTRAN level \"G\"\n))FORTGI  -  EDIT type is FORTRAN level \"GI\"\n))FORTH   -  EDIT type is FORTRAN level \"H\"\n))GOFORT  -  EDIT type is GOFORT\n))IPLI    -  EDIT type is IPLI\n))LIST    -  EDIT type is LIST\n))PLI     -  EDIT type is PLI\n))PLIF    -  EDIT type is PLI (F-level)\n))TEXT    -  EDIT type is TEXT\n))VSBASIC -  EDIT type is VSBASIC\n=TSOLIST=TSOLIS=TSOLI=TSOL\n)F  Example -     TSOLIST mema:memb\n\n   The TSOLIST subcommand lists a member.  The TSO LIST command is\n   used; any desired LIST operands may be specified after the member\n   name.\n)X SYNTAX -\n     TSOLIST  member BYPASS('INTEGER')   MAX('INTEGER')  HEX/X\n                     NUM/SNUM/NONUM   COL('BEGIN COLUMN':'END COLUMN')\n\n ALIASES  - TSOL, TSOLI, TSOLIS, TSOLIST\n DEFAULTS - member, NUM (if a non-numeric is encountered, then NONUM)\n REQUIRED - none.\n)O OPERANDS -\n  operands - optional, may include any desired TSO LIST operands.\n=USAGE=U=US=USA=USAG\n)F  Example -     USAGE\n\n The USAGE subcommand displays statistics on the current data set.\n\n The statistics displayed include:\n   the number of disk storage tracks allocated\n   the number of disk storage tracks currently in use and free\n   the number of disk storage extents required for the data set\n   the number of directory blocks allocated\n   the number of directory blocks currently in use and free\n   the number of disk storage tracks used by the directory\n   the number of members in the directory\n   the number of member names which are alias names\n)X SYNTAX -\n     USAGE\n\n ALIASES  - U, US, USA, USAG, USAGE\n)O OPERAND -\n  If any operand is entered, data set extent information will also\n  be displayed.\n=VIEW=VIE=VI=V\n)F  Example -     VIEW mema:memb\n\n  The VIEW subcommand enters ISPF view for a member\n  (for additional information on the relationship of -PDS86- and\n  ISPF view, enter HELP DIALOG).\n\n  Note: on the first entry of a VIEW subcommand -PDS86-\n  will present any pending EDIT recovery sessions to you before\n  entering VIEW for a selected member.\n)X SYNTAX -\n     VIEW  member  OLD/NEW   MACRO(macname)    SM/SETMACRO(macname)\n                            PROFILE(profname)   SP/SETPROF(profname)\n\n ALIASES  - V, VI, VIE, VIEW\n DEFAULTS - member\n REQUIRED - none.\n)O OPERANDS -\n  member      - optional, specifies the name of the member(s) to be\n                viewed.\n\n                Default member names, member lists, member name\n                ranges and member name patterns are allowed; for\n                more information, enter HELP GROUP.\n\n                Note - if : is entered for the member name position,\n                an ISPF member selection screen will be provided.\n\n))OLD         - -PDS86- will verify that the member exists before\n                invoking ISPF VIEW service.\n))NEW         - -PDS86- will verify that the member does not exist\n                before invoking ISPF VIEW service.\n))MACRO(m)    - For ISPF Version 2, this parameter may be used to\n                specify an initial edit macro name.\n))SM(mname)   - For ISPF Version 2, this parameter may be used to\n                specify a default initial edit macro name; to nullify\n                this parameter, you may enter SM(*).\n))SETMACRO(m) - For ISPF Version 2, this parameter may be used to\n                specify a default initial edit macro name; to nullify\n                this parameter, you may enter SETMACRO(*).\n))PROFILE(p)  - For ISPF Version 2, this parameter may be used to\n                specify the edit profile name (the supplied name will\n                be used instead of the low-level DSNAME qualifier).\n))SP(pname)   - For ISPF Version 2, this parameter may be used to\n                specify a default edit profile name; to nullify this\n                parameter, you may enter SP(*).\n))SETPROF(p)  - For ISPF Version 2, this parameter may be used to\n                specify a default edit profile name; to nullify this\n                parameter, you may enter SETPROF(*).\n=VERIFY=VE=VER=VERI=VERIF\n)F  Example -     VERIFY mema:memb\n\n The VERIFY subcommand validity checks data sets.  For partitioned\n data sets, the entire data set may be checked by entering : in the\n member name position; an individual member or member group may be\n checked by entering its name in the member name position.\n\n VERIFY checks partitioned data sets in the following manner:\n  A.  For VERIFY : UPDATE, a dummy member is added and deleted to\n      determine if the data set directory is full and if normal PDS\n      functions are possible.  Note that this is the only potential\n      data set update performed by the VERIFY subcommand.\n  B.  The data set directory is read, member names are placed into\n      a program table in TTR sort order and the following checks\n      are performed:\n      1.  If NAME is in effect, member names are checked for validity.\n      2.  If the data set is a load library and LKED is in effect,\n          the following illegal editor attribute combinations are\n          checked:\n          a.  Modules with RENT and NOREUS attributes\n          b.  Modules with RMODEANY and AMODE24 or AMODEANY attributes\n          c.  Modules with OVLY and RENT, REUS, REFR, SCTR, RMODEANY,\n              AMODE31, AMODE64, or AMODEANY attributes\n          d.  Modules with TEST and NOEDIT attributes\n          e.  Modules with REUS and SCTR attributes\n      3.  If LOAD is in effect and the data set is a load library,\n          each member is checked for ABENDs as it is LOADED.\n      4.  Each member is checked for current usage by an ISPF EDIT\n          session.\n      5.  Member directory entries are checked for correct name order.\n      6.  Each member's TTR address is checked against the end of\n          the data set.\n  C.  The program TTR table is checked for:\n      1.  Orphan members (aliases with no associated main member).\n      2.  Apparent alias members (main members whose start address\n          matches another main member's start address).\n      3.  Alias load modules whose directory pointers to associated\n          main members are incorrect.\n      4.  Alias load modules whose RMODE entries or main AMODE entries\n          do not match their base module's entries.\n  D.  If READ or INPUT is in effect, the directory and each member\n      is read checking for:\n      1.  Permanent I/O errors\n      2.  Input blocksizes exceeding the MAXBLK value\n          or if MAXBLK is omitted, the DCB BLKSIZE\n      3.  Input blocksizes/LRECL not an integral if RECFM=F\n      4.  Input LRECLs exceeding DCB LRECL if RECFM=V\n      5.  Input LRECLs less than four bytes if RECFM=V\n      6.  Null members\n      7.  Directory RLD/CONTROL counts for modules linked since\n          OS/VS which do not match the first RLD entry\n  E.  Informational messages regarding the data set are provided.\n\n The VERIFY subcommand validity checks sequential data sets in the\n following manner:\n  A.  The data set is checked for current usage by an ISPF EDIT session.\n  B.  If READ or INPUT is in effect, the data set is read checking for:\n      1.  Permanent I/O errors\n      2.  Input blocksizes exceeding the MAXBLK value\n          or if MAXBLK is omitted, the DCB BLKSIZE\n      3.  Input blocksizes/LRECL not an integral if RECFM=F\n      4.  Input LRECLs exceeding DCB LRECL if RECFM=V\n      5.  Input LRECLs less than four bytes if RECFM=V\n  C.  Informational messages regarding the data set are provided.\n)X SYNTAX -\n     VERIFY  member  LOAD   /  NOLOAD\n                     LKED   /  NOLKED\n                     MAXBLK(bsize)\n                     NAME   /  NONAME\n                     INPUT  /  NOINPUT    or    READ / NOREAD\n                     STATS  /  NOSTATS\n                     UPDATE /  NOUPDATE\n\n ALIASES  - VE, VER, VERI, VERIF, VERIFY\n DEFAULTS - LOAD, LKED, NAME, INPUT, STATS, NOUPDATE\n REQUIRED - none.\n)O OPERANDS -\n  member    - optional, specifies the member(s) to be validity\n              checked.  If : is entered in the member name position,\n              the data set is validity checked; otherwise, only the\n              specified members are checked.\n\n              Default member names, member lists, member name\n              ranges and member name patterns are allowed; for\n              more information, enter HELP GROUP.\n\n))LOAD      - For load libraries, each member is to be LOADED.\n))NOLOAD    - No members are to be LOADED.\n))LKED      - For load libraries, linkage editor checks are to\n              be performed.\n))NOLKED    - No linkage editor checks are to be performed.\n))MAXBLK(b) - Messages are to be generated for members containing\n              blocks larger than the value b.\n))NAME      - Each member name is to be checked for validity.\n              Valid member names are from one to eight characters\n              long containing upper case alphanumeric characters\n              and the first character may not be numeric.\n))NONAME    - No members names are to be checked.\n))INPUT     - Each member (or the sequential data set) is to be input.\n))NOINPUT   - No members (nor the sequential data set) are to be input.\n))READ      - Each member (or the sequential data set) is to be input.\n))NOREAD    - No members (nor the sequential data set) are to be input.\n))STATS     - Normal completion statistical messages are to be output.\n))NOSTATS   - No statistical messages are to be output.  This would\n              normally be used to check a member or a data set for\n              unusual conditions.\n))UPDATE    - A test member addition and deletion is to be attempted\n              to determine if the PDS directory has any available\n              space and if normal PDS operations are possible on\n              the data set.\n))NOUPDATE  - No data set modifications are to be made.\n=VPDSE=VPDS=VPD\n)F  Example -     VPDSE\n\n The VPDSE subcommand invokes the IBM utility IEBPDSE (z/OS 1.13)\n to verify the directory structure of a PDSE dataset.\n\n IEBPDSE returns a code in register 15 to indicate the results of\n program execution.  The return codes and their meanings are:\n\n Codes      Meaning\n 00 (X'00') Successful completion.\n 04 (X'04') The input PDSE is slightly damaged. Processing continues.\n\n This return code describes data sets that can be opened normally but\n but have some form of corruption. Currently, the only instance of a\n \"slightly\" damage damaged PDSE is when the free space list marks free\n pages as used, wasting space that could normally be reclaimed. This\n does not prevent the user from opening the PDSE but the user should\n copy the PDSE to a new data set.\n\n 08 (X'08') The input PDSE is corrupted. The utility ends.\n 12 (X'0C') The input PDSE could not be opened. The utility ends.\n 16 (X'10') The input data set is not a PDSE. The utility ends.\n)X SYNTAX -\n     VPDSE  LIST/NOLIST\n\n ALIASES  - VPD, VPDS, VPDSE\n DEFAULTS - LIST\n REQUIRED - none.\n)O OPERANDS -\n))LIST          - specifies that IGW700I PDSE Directory Validation\n                  message text explanations are to be displayed.\n))NOLIST        - specifies that IGW700I PDSE Directory Validation\n                  message text explanations are not to be displayed.\n=VPSPRINT=VPSPRIN=VPSPRI=VPSPR=VPSP=VPS=VP\n)F  Example -     VPSPRINT mema:memb r130\n\n   The VPSPRINT subcommand prints a hardcopy list of a member.  The\n   TSO VPSPRINT command is used; any desired VPSPRINT operands may\n   be added after the member name.\n)X SYNTAX -\n     VPSPRINT  member printer DDNAME(ddname)  DIRECT(KEEP/DELETE)\n                             LINES(linenum1:linenum2)\n                             NUM(loc,length)/SNUM(loc,length)/NONUM\n                             FCB(fcbname)  FORMS(formname)\n                             CLASS(c)  HOLD/NOHOLD\n                             COL(col1:col2, ...)  COPIES(number)\n                             PAGELEN(num)  TMARGIN(num)  BMARGIN(num)\n                             SINGLE/DOUBLE/CCHAR\n                             FOLD(width)/TRUNCATE(width)\n                             EJECT/NOEJECT  NOEJMESS  NOHEADER\n                             TERMINAL  TRACE  WTR(wtrname)\n\n ALIASES  - VP, VPS, VPSP, VPSPR, VPSPRI, VPSPRIN, VPSPRINT\n DEFAULTS - NUM, CLASS(A), COPIES(1), NOHOLD, SINGLE, CCHAR, NOEJECT\n REQUIRED - member and printer\n)O OPERANDS -\n  member   - specifies the member name(s) to be passed (along with\n             the data set name) to the TSO VPSPRINT command.\n\n             Default member names, member lists, member name\n             ranges and member name patterns are allowed; for\n             more information, enter HELP GROUP.\n\n  printer  - specifies the name of the VTAM printer which is to\n             print this data set.\n  operands - optional, may include any desired TSO VPSPRINT operands.\n=VTOC=VTO=VT\n)F  Example -     VTOC tso001 cont(mvs43)\n\n  The VTOC command displays selected data sets on a disk or set of\n  disks.  Each disk has a volume table of contents (VTOC).  This\n  table is searched for data sets that meet the specifications.\n)X SYNTAX -\n     VTOC  volumelist  LEVEL(dsnamestart)\n                      EXLEVEL(dsnamestart)\n                      CONTAINING(dsnamestring)\n                      ENDING(dsnameend)\n                      BREAK(breakchars)\n             CAT\n             ENQ\n             TRK/CYL/KB/MB\n             NOSORT/SORT(sortfields)\n             NOPRINT/PRINT(printop (printitemlist))\n             LIMIT(keyword oper value)\n             AND1/OR1(keyword oper value)\n             AND2/OR2(keyword oper value)\n             AND3/OR3(keyword oper value)\n             CHARS(charsperline)\n             LINES(linesperpage)\n             NOHEADING/HEADING(text)\n             DSNLEN(length)\n\n ALIASES  - VT, VTO, VTOC\n DEFAULTS - List all data sets on the volume(s) selected;\n            SORT, PRINT, TRK\n REQUIRED - volumelist\n)O OPERANDS -\n  volumelist -\n         a volume name or a list of volume names in parentheses.  If\n         the first one to five characters of a volume name are entered,\n         all volumes that are mounted on the machine which start with\n         those characters will be listed.  If 'all' is specified, all\n         non-virtual volumes which are online and ready will be\n         processed.  If 'alv' is specified, all virtual volumes which\n         are online and ready will be processed, if they are mounted\n         PRIVATE/RESERVED or PRIVATE/RESIDENT.\n\n))LEVEL(dsnnametart) -\n         specifies the high level qualifiers to be searched.  This will\n         not be prefixed by your USERID or prefix.  Only data sets\n         starting with these prefixes will be listed.\n))EXLEVEL(dsnamestart) -\n         specifies the high level qualifiers to be omitted.  This will\n         not be prefixed by your USERID or prefix.  Data sets starting\n         with these prefixes will not be listed.\n))CONTAINING(dsnamestring) -\n         specifies a character string contained in the data set name.\n         At least one of the strings must be in the DSNAME for the data\n         set to be listed.  These strings need not conform to DSNAME\n         standards so they can begin with a period or a number.\n))ENDING(dsnameend) -\n         specifies the ending characters of the DSNAME.  The final\n         nonblank characters of the DSNAME must be one of these strings\n         to allow the data set to be listed.  These strings must\n         conform to DSNAME standards.\n))CAT    - A locate is done for each DSNAME on the volumes listed\n           and status is indicated.  Note: this option uses a\n           considerable amount of processing time.\n             C -  cataloged on this volume\n             N -  not cataloged\n             W -  cataloged on another volume\n             E -  catalog processing error\n))ENQ    - A test is performed for an ENQ with a major name of\n           SYSDSN and a minor name of the dataset name to find out\n           if the dataset is in use. If the dataset is VSAM the cluster\n           name is located and used for the ENQ test.\n           Note - this option uses a lot of processing time.\n             N -  not enqueued\n             S -  allocated with DISP=SHR\n             E -  exclusively allocated\n             ? -  catalog processing error\n             * -  enqueue processing error\n))TRK    -  space is to be reported in track units.\n))CYL    -  space is to be reported in cylinder units.\n))KB     -  space is to be reported in kilobyte units.\n))MB     -  space is to be reported in megabyte units.\n))NOSORT -  the data sets are not sorted.  They are output as they\n              are found.\n))SORT(sortfields) -\n              data sets are sorted into alphabetical order,\n              based upon the sort fields specified.\n              DSNAME,VOLUME,ALLOC,USED,UNUSED,PCT,EX,DSO,RFM,\n              LRECL,BLKSZ,CDATE,EXPDT,REFDT are valid sort fields.\n              A/D  is required after each sort field to indicate\n              ascending/descending sequence.\n))BREAK(breakchars) -\n              the listing will contain a new header, (on a new page\n              if the VTOCOUT DD card option is used), whenever the\n              specified number of characters differs from the\n              preceding data set.  This option functions only with\n              the SORT option.\n))CHARS(charsperline) -\n              specifies the number of characters on each\n              line of output.  The default is 150 for print and the\n              linesize of the terminal for tso sessions.\n              You can get more information by specifying a larger\n              number of characters per line or you can limit the\n              printing by setting a smaller number of characters\n              per line of output.\n))LINES(linesperpage) -\n              specifies the number of lines before a new title line is\n              produced.  It defaults to 60 for print and to the screen\n              size for TSO sessions.\n))NOHEADING - do not produce a heading.  The heading will only be\n              output if the VTOCOUT DD statement is present.\n))HEADING(text) -\n              if a DD statement with a DDNAME of VTOCOUT is present,\n              this text will be used to begin every page.  Carriage\n              control should be included (ASA).  The default header\n              consists of VTOC command version 02 and the command that\n              was entered.\n))DSNLEN(length) -\n              specifies the length of the DSNAME to print.  the rest of\n              the DSNAME is truncated.  The CHARS parameter will also\n              cause the DSNAME to be truncated, if the name and the\n              preceding information exceeds the print line.\n))NOPRINT   - specifies that individual items are not to be listed.\n              The command can be used to calculate totals.\n))PRINT(printop (printitemlist)) -\n              specifies the items to print.  the printop is the\n              operation to be performed as follows:\n                NEW - the printitemlist is a complete list of what\n                      to print.\n                REP - the first printitem will be replaced with the\n                      rest of the items on the list.\n                ADD - the rest of the printitemlist will be added\n                      after the first item on the list.\n                DEL - the items on the printitemlist will not be\n                      printed.\n\n              The printitemlist names are the same keywords used\n              in LIM, AND, and OR functions and are also the titles\n              as printed.  These keywords can be ALLOC, UNUSED, USED,\n              PCT, EX, DSO, RFM, BLKSZ, LRECL, CDATE, EXPDT, REFDT,\n              SECT, PASS, ROUND, CCHH, VOLUME, UNIT, DSNAME, ACTION,\n              TYPE, RACF or UPD.\n\n              The ADD, DEL, and REP print operations refer to the\n              default print list.  The default list is ALLOC, UNUSED,\n              PCT, EX, DSO, RFM, BLKSZ, LRECL, REFDT, CDATE, VOLUME,\n              DSNAME, EXPDT, SECQ, SECT, ROUND, PASS, ACTION, and\n              type.  As noted under CHARS above, only the items that\n              will fit on the print line will be listed.\n))LIMIT(keyword oper value) -\n              specifies which data sets are to be listed.  only data\n              sets that satisfy the relation are listed.\n\n              keyword can be ALLOC, UNUSED, USED, PCT, EX, DSO, RFM,\n              BLKSZ, LRECL, CDATE, EXPDT, REFDT, SECT, PASS, ROUND,\n              CCHH, VOLUME, UNIT, DSNAME, ACTION, TYPE, RACF or UPD.\n\n              oper can be EQ, NE, LE, LT, GE or GT.\n\n              value can be a comparison value such as FB, PS, R or\n              a number like 51.\n))keyword   - is the name of a data set field as follows.  The keywords\n              and their values are the same as in the VTOC output.\n\n                  ALLOC      data set allocation\n                                number of kilobytes, tracks, cylinders,\n                                or megabytes allocated.  default is in\n                                tracks.\n                  UNUSED     amount of unused space in the data\n                                set.  Same units as in ALLOC.\n                  USED       amount of space used in the data set.\n                                Same units as in ALLOC.\n                  PCT        percentage of space used in the data\n                                used.\n                  EX         number of extents in the data set.\n                  DSO        data set organization\n                                PS = sequential  PO = partitioned\n                                VS = VSAM        PE = PDSE\n                                DA = direct      IS = ISAM\n                                U  = unmovable   HF = HFS\n                                X  = extended format\n                  RFM        record format\n                                F  = fixed        v  = variable\n                                U  = undefined    b  = blocked\n                                T  = track overflow\n                                S  = spanned or standard\n                                A  = asa carriage control\n                                M  = machine carriage control\n                  BLKSZ      blocksize for physical blocks of data.\n                  LRECL      logical record length in bytes.\n                  CDATE      creation date in the form YYDDD,\n                                sometimes called Julian.\n                  EXPDT      expiration date in the same form.\n                                This field is rarely used.\n                  REFDT      last use date in the same form.  This date\n                                is when the data set was last opened.\n                  SECT       type of allocation\n                                A  = absolute track\n                                B  = blocks\n                                T  = tracks\n                                C  = cylinders\n                  PASS       protection indicators\n                                N  = none\n                                T  = read and write protection\n                                W  = write protection\n                  ROUND      space rounded up to cylinders\n                                R  = round\n                                N  = no round\n                  CCHH       cylinder and head address, in 4 or 8\n                                hexadecimal digits.  If 4 digits are\n                                used, only the cylinder is used for\n                                comparison, otherwise, the cylinder\n                                and track are compared.\n                  VOLUME     volume serial number or disk name\n                  UNIT       unit or device type\n                  DSNAME     name of the data set\n                  ACTION     some error indications\n                  TYPE       reserved for exit usage.\n                  RACF       RACF indicator\n                                N  = not indicated\n                                Y  = indicated\n                  UPD        updated since last backup\n                                N  = not updated\n                                Y  = updated\n))oper      - is an operator.  The list of operators is as follows:\n                  EQ  is equal to\n                  NE  is not equal to\n                  LE  is less than or equal to\n                  LT  is less than\n                  GE  is greater than or equal to\n                  GT  is greater than\n))value     - gives the value of the item for comparison, such as\n              FB, PS, R, or a number.\n))AND1(keyword oper value) -\n              specifies which data sets are to be listed.  Both the\n              limit and this condition must be true to allow the\n              listing.\n\n              keyword can be ALLOC, UNUSED, USED, PCT, EX, DSO, RFM,\n              BLKSZ, LRECL, CDATE, EXPDT, REFDT, SECT, PASS, ROUND,\n              CCHH, VOLUME, UNIT, DSNAME, ACTION, TYPE, RACF or UPD.\n\n              oper can be EQ, NE, LE, LT, GE or GT.\n\n              value can be a comparison value such as FB, PS, R or\n              a number like 51.\n))OR1(keyword oper value) -\n              specifies which data sets are to be listed.  Either the\n              limit or this condition must be true to allow the\n              listing.\n\n              keyword can be ALLOC, UNUSED, USED, PCT, EX, DSO, RFM,\n              BLKSZ, LRECL, CDATE, EXPDT, REFDT, SECT, PASS, ROUND,\n              CCHH, VOLUME, UNIT, DSNAME, ACTION, TYPE, RACF or UPD.\n\n              oper can be EQ, NE, LE, LT, GE or GT.\n\n              value can be a comparison value such as FB, PS, R or\n              a number like 51.\n))AND2(keyword oper value) -\n              specifies which data sets are to be listed.  Both the\n              previous result and this condition must be true to allow\n              the listing.\n\n              keyword can be ALLOC, UNUSED, USED, PCT, EX, DSO, RFM,\n              BLKSZ, LRECL, CDATE, EXPDT, REFDT, SECT, PASS, ROUND,\n              CCHH, VOLUME, UNIT, DSNAME, ACTION, TYPE, RACF or UPD.\n\n              oper can be EQ, NE, LE, LT, GE or GT.\n\n              value can be a comparison value such as FB, PS, R or\n              a number like 51.\n))OR2(keyword oper value) -\n              specifies which data sets are to be listed.  Either the\n              previous result or this condition must be true to allow\n              the listing.\n\n              keyword can be ALLOC, UNUSED, USED, PCT, EX, DSO, RFM,\n              BLKSZ, LRECL, CDATE, EXPDT, REFDT, SECT, PASS, ROUND,\n              CCHH, VOLUME, UNIT, DSNAME, ACTION, TYPE, RACF or UPD.\n\n              oper can be EQ, NE, LE, LT, GE or GT.\n\n              value can be a comparison value such as FB, PS, R or\n              a number like 51.\n))AND3(keyword oper value) -\n              specifies which data sets are to be listed.  Both the\n              previous result and this condition must be true to allow\n              the listing.\n\n              keyword can be ALLOC, UNUSED, USED, PCT, EX, DSO, RFM,\n              BLKSZ, LRECL, CDATE, EXPDT, REFDT, SECT, PASS, ROUND,\n              CCHH, VOLUME, UNIT, DSNAME, ACTION, TYPE, RACF or UPD.\n\n              oper can be EQ, NE, LE, LT, GE or GT.\n\n              value can be a comparison value such as FB, PS, R or\n              a number like 51.\n))OR3(keyword oper value) -\n              specifies which data sets are to be listed.  Either the\n              previous result or this condition must be true to allow\n              the listing.\n\n              keyword can be ALLOC, UNUSED, USED, PCT, EX, DSO, RFM,\n              BLKSZ, LRECL, CDATE, EXPDT, REFDT, SECT, PASS, ROUND,\n              CCHH, VOLUME, UNIT, DSNAME, ACTION, TYPE, RACF or UPD.\n\n              oper can be EQ, NE, LE, LT, GE or GT.\n\n              value can be a comparison value such as FB, PS, R or\n              a number like 51.\n\n))EXAMPLES -\n  1.  List all data sets on VOL*** volumes:\n          VTOC vol\n\n  2.  List all data sets on all volumes:\n          VTOC all\n\n  3.  List all data sets that start with  XXX on any MV**** volume:\n          VTOC mv lev(xxx)\n\n  4.  List all data sets that contain LIST and do not start with SYS1:\n          VTOC vol cont(list) exlev(sys1)\n\n  5.  List all recently created data sets:\n          VTOC vol lim(cdate gt 93001)\n\n  6.  List data sets with unused space:\n          VTOC vol lim(pct lt 50) or1(unused gt 30)\n\n  7.  List data sets with multiple extents:\n          VTOC vol lim(ex gt 1)\n\n  8.  List all of a user's data sets on TSO001:\n          VTOC tso001 level(ser002)\n\n  9.  List all data sets over 100 tracks:\n          VTOC vol lim(alloc gt 100)\n\n 10.  List CLIST data sets:\n          VTOC vol end(clist)\n\n 11.  List all of the information about a user's data sets at a 3270:\n          VTOC vol char(150)\n\n 12.  List data sets under the fixed heads:\n          VTOC vol lim(cc eq 0001) or1(cc eq 0002)\n\n 13.  Check if data sets on volume VOL*** are cataloged correctly:\n          VTOC vol cat print(new (alloc pct cat DSNAME))\n\n 14.  List used space instead of unused, in tracks:\n          VTOC vol print(rep (unused used)) trk\n\n 15.  List all data sets on 335*** volumes sorted by ALLOC in\n      descending sequence, VOLUME and DSNAME in ascending sequence:\n          VTOC 335 sort(alloc,d,volume,a,dsname,a)\n=XISPMODE=XI=XIS=XISP=XISPM=XISPMO=XISPMOD\n)F  Example -     XISPMODE\n\n  The XISPMODE subcommand suspends ISPMODE and switches -PDS86- to\n  line mode terminal output.\n\n)X SYNTAX -\n     XISPMODE\n\n ALIASES  - XI, XIS, XISP, XISPM, XISPMO, XISPMOD\n)O OPERANDS -\n  no operands are supported.\n=XMIT=XMI=XM\n)F  Example -     XMIT mema:memb node.userid\n\n The XMIT subcommand invokes TSO TRANSMIT to send members to an\n addressee or dataset.\n\n)X SYNTAX -\n     XMIT  memgroup  addressee\n                      ALIAS/NOALIAS\n                      NOTIFY/NONOTIFY\n                      OUTDSN(dsname)\n                      OUTFILE(ddname)\n                      LOG/NOLOG\n                      WARN/NOWARN\n                      SYSOUT(class)\n\n ALIASES  - XM, XMI, XMIT\n DEFAULTS - ALIAS, LOG, NOTIFY, WARN\n REQUIRED - memgroup, addressee\n)O OPERANDS -\n  memgroup   - specifies the name of the member(s) to be transmitted.\n\n               Member lists, member name ranges and member name\n               patterns are allowed; for more information,\n               enter HELP GROUP.\n\n  addressee  - node.userid, nickname, or distribution list\n\n))ALIAS      - specifies that any associated members (aliases, apparent\n               aliases and associated main members) are also to be\n               transmitted.\n))NOALIAS    - specifies that only the member(s) specifically identified\n               are candidates for transmission.\n))NOTIFY     - request notification of delivery.  RECEIVE will\n               transmit a notification to you when the addressee\n               has received the data sent by you.\n))NONOTIFY   - suppress notification when a file has been\n               received by an addressee.\n))LOG        - log transmission in the log data set.\n               Your entry in the log data set will contain the\n               following information:  node, userid, data set name\n               and the date transmitted.\n))NOLOG      - do not log transmissions in the log data set.\n))WARN       - issue warning message INMX034I when the warning\n               threshold is initially met, and thereafter whenever\n               the warning interval is met.\n))NOWARN     - do not issue warning message INMX034I when the\n               warning threshold is initially met, nor thereafter\n               whenever the warning interval is met.\n))SYSOUT(c)  - direct utility program messages (e.g. IEBCOPY) to a\n               specific sysout class.\n))OUTDSN(dsname) -\n               direct TSO XMIT output to a file rather than\n               to the Job Entry Subsystem (JES).  OUTDATASET\n               is an alias for this keyword.\n))OUTFILE(ddname) -\n               direct TSO XMIT output to a file instead of\n               to the Job Entry Subsystem (JES).  OUTDDNAME\n               is an alias for this keyword.\n=ZAP=ZA=Z\n)F  Example -     ZAP\n\n  The ZAP command is used to examine, dump, and modify any type of\n  sequential, partitioned, or direct access dataset.  Any RECFM is\n  accepted.  This command is the TSO interactive equivalent of\n  IBM's service aid 'IMASPZAP' or 'SUPERZAP'.\n\n  *** NOTE:  Not for PDSE datasets.  Use AMASPZAP instead. ***\n\n  General Info:\n\n  Operands are entered immediately after the command, with no\n  intervening blanks.\n\n  The block is read into a work buffer, where you modify it.  When\n  you enter the \"ZAP\" command, the block is written back to the\n  dataset from the buffer.  If any other job or user has updated that\n  block in between when you first displayed it and when you \"zapped\"\n  it, the other changes will be lost.\n\n  If you make changes to a block, to go to another block you must\n  either \"ZAP\" the block (re-write it to the dataset), or enter the\n  command twice in a row which will cause you to leave the current\n  modified block.\n\n  Input/Output Subcommands:\n\n  P<exp>      - Point to rec whose TTR is <exp>\n  P           - Point to beginning of data set\n  T<exp>      - Point to track <exp>, record 1\n  T           - Point to next track, record 1\n  R<exp>      - Show blk <exp> rel. to current\n  R           - Point to next physical record\n  B           - Point to previous record\n  VTOCDS4     - Point to VTOC FMT4 DSCB\n  LASTDS1     - Point to last FMT1 DSCB in VTOC\n  ABS<exp>    - Point to rec with CCHHR = exp\n  %<exp>      - Point to TTR @ loc <exp> in blk\n  LAST        - Point to last record (DS1LSTAR)\n  M<name>     - For PDS, point to member <name>\n  M           - Point to start of current member\n  NAME<n>     - After 'm', show entry point <n>\n  NAME        - Select entry point named member\n  E<n>        - Same as name<n>\n  E           - Same as name\n  ZAP         - Replace block from current buffer\n\n  Session Control Subcommands:\n\n  LOG         - Start logging this session\n  CRT         - Set width 4,4 and verbose\n  TERSE       - Do not do auto where\n  VERBOSE     - Always give where info\n  W<d>,<u>    - Set window down/up size(s)\n  WFULL       - Set size to ursa screen size\n  LINE40      - Set line length 40\n  LINE80      - Set line length 80\n  NOTE<comnt> - Write <comnt> into log file\n  EJECT       - Eject a page in the log file\n\n  Dump Subcommands:\n\n  DUMP        - Dump all records in the\n                data set in abdump format\n  DUMPT<exp>  - Dump to TTR <exp> from\n                current record\n  DUMPT       - Dump current record only\n  DUMPF<exp>  - Dump for <exp> records from\n                current record\n  DUMPF       - Dump current record\n  DUMPE       - Dump current record to EOF\n\n                EOF, I/O error, and END-OF-DS halt dump\n\n  Byte Subcommands:\n\n  D<exp>      - Display byte at offset <exp>\n  <exp>       - Same as d<exp>\n  D           - Page to next screen (d+#screen)\n  U           - Page to prev screen (d-#screen)\n  >           - Go forward in trace table\n  <           - Go backward in trace table\n  EBCDIC      - EBCDIC translation (default)\n  ASCII       - ASCII-8 translation\n  ZCODE       - ZCODE translation\n  =<lab>      - Define <lab> to curr location\n  NODEF       - Clear all defined labels from =\n\n  String Subcommands:\n\n  S<str>      - Store <str> at current loc\n  X<str>      - Exclusive or at current loc\n  O<str>      - OR at current loc\n  N<str>      - AND at current loc\n  SET<str>    - Set entire record to <str>\n\n                S,X,O,N,SET may be entered\n                alone to use previous <str>\n\n  L<str>      - Look for <str> from next byte\n  L           - Continue looking for <str>\n  F<str>      - Like l<str>, cont's past EOFs\n  F           - Like l, continues past EOFs\n\n  Miscellaneous Subcommands:\n\n  END         - Exit ZAP\n  #<exp>      - Find hex/decimal value of <exp>\n  FLOAT<f>    - Find floating pt value of <f>\n  IDEF        - Display define label table\n  ITRACE      - Display trace table\n  ?N          - View nth help display (1-13)\n  WHERE       - Give current location etc.\n  ASM<op>     - Give object code for mnemonic\n  DISASM<exp> - Disassemble instr at <exp>\n  WHATMEM     - Find dir entry closest to rec *\n  WM          - Same as whatmem\n  DO<cmd>     - Execute TSO <cmd> as at READY\n  V<exp>      - Add contents of 2 bytes at\n                <exp> to curr value of loc\n  BASE<exp>   - Add <exp> to buffer offset\n                When computing addr\n  DISP<type>  - Set record display start pos\n                <type> is count | key | data\n  J<ttr>      - Relative to beginning of volume\n\n  Explanation of Symbols:\n\n  <exp> is composed of operators (+,-,*,/)\n        define symbols ('=' command) and\n        hex or decimal constants. The following\n        symbols are predefined: *=current offset\n        L=logical record length, K=key length\n        BL=maximum block size.\n  <str> may be either up to 16 characters\n        enclosed in any delimiter, or up\n        to 16 hex digits, or a decimal val\n        ending with '.' (length 4 bytes)\n  <lab> may any 1 to 8 characters\n  <f>   is any floating point constant in\n        internal form (ie: FORTRAN F form)\n=CAX=CA\n)F  Example -     CAX\n CAX Active Catalog Display (ISPMODE only)\n\n This display provides a list of active catalogs as indicated by the\n CAXWA (Catalog AuXiliary Work Area) control block chain. These\n catalogs are a located by one or more users. The display is sorted\n in the order ol the CAXWA control block chain unless the SORT command\n is used to change the order.\n\n The CAX panel shows the active catalogs and information about the\n catalog: Type, status, cache hit percentage, order number of the CAXWA\n the volume, and dataset name.\n\n The types are as follows:\n\n    ICF     Integrated Catalog Facility type catalog\n    VSAM    Old type VSAM catalog\n    RECV    Old type VSAM recoverable catalog\n    MSTR    Master catalog\n\n The status attribute values:\n\n    Y-----  Allocated to the Catalog Address Space\n    -S----  Catalog is SMS managed\n    --V---  Using catalog data space cache\n    --I---  Using the in-storage catalog\n    --C---  Catalog is closed\n    --D---  Catalog has been deleted\n    ---A--  Catalog is tape volume catalog\n    ----R-  Catalog defined for cross system sharing\n    ----E-  Catalog defined for extended catalog sharing\n    -----K  Catalog is locked\n=LISTA=LA\n)F  Example -     LISTA\n LIST Allocation Display (ISPMODE only)\n\n LISTA provides a list of current allocations with their status and\n type as well as some dataset information.\n\n This table may be rebuilt by entering the LISTA command with\n operands; if you enter LISTA without operands you are switched\n from your current display to a LISTA display.  Line commands\n (chan, dcat, free, log, o and x) are also supported.\n\n The first LISTA panel shows basic allocation information such as\n DDNAME, data set TYPE, Open count (under the header OP), VOLUME\n allocated, MEMBER name and DSNAME.  Command error messages are\n provided under the DATA header as follows:\n\n   *INVALID - This line command is not supported\n   *NOTPSPO - File is not sequential or partitioned\n   *PERMCON - File is permanently concatenated\n   *NOT CON - File is not concatenated\n   *NO DDN* - File has a blank ddname\n   *DD GONE - File is not allocated\n   *OPEN DD - File is open\n   *VTOCERR - OBTAIN I/O error, rc=12\n   *NOTONVO - F1 DSCB not found in VTOC\n   *BAD DSN - File is DUMMY or NULLFILE\n   *IN USE* - File is in-use\n\n TYPE will be the DSORG or \"VIO\", \"CTLG\", \"VVDS\", \"JES\", or \"TERM\".\n\n The second LISTA panel is a double line panel which includes some\n additional information.  DISP (data set disposition), STAT (data\n set status), BLKSI (block size), LRECL (logical record length), and\n RECFM (record format) are also provided on this panel.\n\n STAT fields: TMP (temporary), PRM (permanent) or CNV (convertible).\n=LISTC=LC\n)F  Example -     LISTC DSAT\n LIST Files from catalog or VTOC (ISPMODE only)\n\n This display provides a list of datasets and their status\n This table may be rebuilt or added to by reentering the LISTC command.\n\n Note: VSAM datasets can be browsed with the REView line command\n on the LISTC table.\n\n The first LISTC panel shows basic dataset information like:\n DSNAME, VOLUME, attributes.  Command error messages are provided\n under the DATA header as follows:\n\n   *INVALID - This line command is not supported\n   *NOTPSPO - File is not sequential or partitioned\n   *UNAVAL  - Dataset is migrated\n   *NOCAT   - Catalog cannot be found or opened\n   *NOTCATD - Dataset was not cataloged\n   *WASCATD - Dataset was already cataloged\n   *WASGONE - Dataset is not in VTOC\n   *BADDSN  - Dataset syntax error\n   *IOERROR - I/O error in catalog or VTOC\n   *CANTCAT - Dataset name inconsistent with catalog structure\n   *NOSPACE - There is no space to catalog the dataset\n   *DUP     - Duplicate name on the catalog\n   *NOVOL   - Volume not mounted or available\n   *NOTHERE - Dataset not on volume\n   *INUSE   - Dataset is in use\n   *SECURED - Userid does not have update authority for dataset\n\n The second LISTC panel provides the full 44 character dataset name\n which leaves room for only a little attribute information.\n The third LISTC panel is a triple line panel with most of the dataset\n attribute and space information.\n\n The UPD field indicates if the dataset has been updated since the\n last backup:  Y for yes or N for no.\n\n The C and V fields are to indicate if the dataset is cataloged and/or\n on the volume:  Y for yes or N for no or \"-\" for unknown or not checked\n\n Other catalog indicators from VTOC command:\n   W -  Cataloged on another volume   E -  Catalog processing error\n=LISTF=LF\n)F  Example -     LISTF VTOC\n LIST Files from catalog or VTOC (ISPMODE only)\n\n LISTF is an alias for LISTC.\n=LISTV=LV\n)F  Example -     LISTV WORK\n LIST Volumes Display (ISPMODE only)\n\n This display provides a list of requested volumes and their status\n and type as well as space information.  This table may be rebuilt or\n added to by reentering the LISTV command.\n\n The first LISTV panel shows basic volume space information and volume\n name, device address and type, the mount attributes (PRIV, PUB, STOR),\n the volume use count and several status indicators for the volume.\n\n    STATUS\n   --INDC--\n   A....... - Allocated\n   .P...... - Page data set on volume is open\n   ..C..... - Active catalog on volume\n   ...S.... - Shared volume marked in UCB\n   ...M.... - Mass storage (3330V)\n   ....I... - Indexed VTOC\n   ....D... - Indexed VTOC disabled\n   .....V.. - VVDS allocated on volume\n   ......R. - CRA (Catalog Recovery Area) on volume\n   .......M - SMS managed volume\n\n Command error messages are provided under the DATA header as follows:\n\n   *VTOCERR - The VTOC cannot be input\n   *RESERVE - The VTOC is reserved\n   *VTOCENQ - The VTOC is enqueued (LSPACE)\n\n The 2nd/3rd panels show VTOC information for systems programmers.\n This includes mount attributes (PRIV, PUB or STOR), mount status\n (RESV, PRES or SYSRes), status indicators (as above), the volume use\n count, the VTOC CCHH address, VTOC size in tracks, free DSCB count,\n space used on volume, number of cyls on volume, free VIRs, and\n fragmentation index.\n=SET\n)F  Example -     SET\n SET Defaults (ISPMODE only)\n\n The Set Default selection panel allows you to change processing\n defaults for the current session and for future PDS sessions.\n\n Note:  If \"Save in profile ===> YES\" Then\n          Press <Enter>   to save variables in ISPF Profile\n        Else\n          Press <End/PF3> to bypass saving variables in ISPF Profile\n\n\n o  Environmental options   - SETENV\n\n    Extended Left/Right ===> YES (Yes/No)\n    Function prompt     ===> YES (Yes/No)\n    Save in profile     ===> YES (Yes/No)\n    Ordered Pending     ===> NO  (Yes/No)\n\n o  Select alias commands   - SETSEL\n\n    Select source command ===> E    Line command for MEMLIST source\n    Select load command   ===> B    Line command for MEMLIST load\n    Select LISTA command  ===> C    Line command for LISTA\n    Select LISTV command  ===> SP   Line command for LISTV\n    Select LISTF command  ===> C    Line command for LISTF\n    Select TCT   command  ===> E    Line command for TCT\n    Select CAX   command  ===> UT   Line command for CAX\n    Save in profile       ===> YES  (Yes/No)\n\n o  Log limit values        - SETLOG\n\n    Log limits:\n      Maximum size        ===> 999999   (100 to 999999)\n      Size per command    ===> 999999   (100 to 999999)\n      Checkpoint interval ===> 32000    (100 to  32000)\n      Save in profile     ===> YES      (Yes/No)\n\n o  Member list options     - SETML\n\n    MEMLIST prompt      ===> NO   (Yes/No)\n    Alias check         ===> YES  (Yes/No)\n    Remove deleted mem  ===> YES  (Yes/No)\n    Alias update        ===> YES  (Yes/No)\n    LKED Date for load  ===> YES  (Yes/No)\n    Auto member update  ===) NO   (Yes/No)\n    Remove old members  ===> YES  (Yes/No)\n    Save in profile     ===> YES  (Yes/No)\n\n o  LISTV options           - SETV\n\n    Volume space        ===> YES (Yes/No)\n    Wait for space      ===> NO  (Yes/No)\n    Save in profile     ===> YES (Yes/No)\n\n o  LIST FILE/LISTC options - SETLF\n\n    Remove deleted DSNs ===> NO   (Yes/No)\n    Save in profile     ===> YES  (Yes/No)\n    Remove old DSNs     ===> NO   (Yes/No)\n\n o  TRAP options            - SETTRAP\n\n    TRAP defaults:\n      TRAP services on    ===> YES   (Yes/No)\n      View log number     ===> *     (1-9 or * for current active log)\n    Log limits:\n      Maximum size        ===> 32000 (100 to 32000)\n      Save in profile     ===> YES   (Yes/No)\n=TCT=TC\n)F  Example -     TCT\n PDS/TSO Command Table (ISPMODE only)\n\n This display provides for a list of commands that can be defined\n by the user.  The commands may be for PDS or TSO.   PDS commands\n may be any command that can be entered from the View log function.\n The TSO commands are passed to ISPF through the \"SELECT CMD\" service\n and thus can support any IBM or user TSO command or CLIST.\n Any entry in the list can be marked as a comment line.   The type\n of command is controlled by setting the TYPE field on each entry as\n follows:\n\n    P = PDS command\n    - = TSO command or CLIST\n      = TSO command or CLIST\n    * = comment\n    T = Trap TSO command output\n\n The TCT panel provides for 3 changeable fields and one information\n field:\n\n The OPT field is set by the user for the operation option desired.\n\n The MSG/RC field provides information on the last action for that line\n or the return code from the last TSO command.\n\n The TYPE field is set to the user to \"P\" for PDS commands,\"*\" for a\n comment, a blank or dash is for a TSO command or CLIST, or a \"T\"\n for Trapping the output from a TSO command.\n\n The COMMAND data field is filled in by the user with the actual command\n\n If the TYPE field or COMMAND data field is changed and the OPT field\n is blank, a \"SELECT\" option is assumed.\n=SHOW=SHO=SH\n)F  Example -     SHOW\n SHOW Session Log (ISPMODE only)\n\n The SHOW command is used to control the session log in ISPMODE.\n The session log is maintained in an ISPF dialog table for the duration\n of the PDS session.  SHOW with no operand switches to the log display.\n\n Optional operands:\n\n n       - switch to one of 9 log tables (value 1 to 9).\n RESET   - Clear table before building a new table.\n NODISPL - after switching or resetting the table do not display it\n           but return to previous function table display.\n=MBRGEN=PDSEGEN=PG\n)F  Example -     MBRGEN\n The PDSEGEN dialog makes it possible to use member generations.\n IBM Library Access services are used to access member generations.\n\n The standard IBM ISPF/PDF dialogs (Edit, View, and Dslist) have\n little or no support for member generations.\n\n Primary Commands:\n\n Backup   - Backup a V2 PDSE to a PDSEGEN backup file\n Browse   - Browse member\n C        - Change datasets\n Compare  - Compare members\n Copy     - Copy members\n Edit     - Edit member\n Filter   - Filter member list (MEMList and ML are aliases)\n Find     - Find string in members\n Genonly  - Hide     0 generations (toggle)\n Hide     - Hide non-0 generations (toggle)\n HIGen    - Display dummy members\n ID xxx   - Display only members with xxx anywhere in the ID field\n INfo     - Data set information\n Isplist  - Output member table to LIST dataset (see usermod below)\n Locate   - Locate member name\n MINE     - Display only members with active userid\n MODel    - Allocate a new dataset based on the active dataset\n Output   - Output member table to temp dataset\n Prune    - Remove old generations and retain a number of generations\n            0-n\n Refresh  - Refresh the member list\n Restore  - Restore a V2 PDSE from a PDSEGEN backup file\n Set      - Set default select option\n Sort     - Sort member list\n Submit   - Submit member to internal reader\n Validate - Validate PDSE with IEBPDSE utility\n View     - View member\n Left     - Scroll member list left  (toggle yy and yyyy dates)\n Right    - Scroll member list right (toggle yy and yyyy dates)\n\n Today    - Display all members changed today\n Week     - Display all members changed in the last 7 days\n Month    - Display all members changed in the last 30 days\n Year     - Display all members changed this year\n Since -nn\n          - Display all members updated since the previous nn days\n Since yy/mm/dd\n          - Display all members updated since the provided date\n\n\n Line Commands:     * = Non-0 Generations Only   ** = Generation 0 Only\n\n Short and Long forms (capitalized letter are valid abbreviations)\n\n **  A Attrib     Change attributes (Version, Mod Level, Userid)\n     B Browse     Browse the member\n **  C COPy       Copy a member to another PDSE or PDS\n                  Along with all generations\n     D Delete     Delete a member or generation (if delete is for gen 0\n                  then the member and all generations are deleted)\n **  E Edit       Edit the member (Converted to View for non-0 gens)\n *   G RECover    Recover a generation to a new member\n     H Hide       Hide the current row\n                  This only works to exclude the member from the display\n                  and from being accessed using Browse/Edit/View\n                  This will NOT exclude the member/gen from\n                  Backup/Restore/Copy\n     I Info       Display ISPF Statistics about the member or generation\n     J SUbmit     Submit the member to the internal reader\n **  K Klone      Clone the member (gen 0 only)\n       Clone      generations are not cloned\n     M MAil       Mail the member\n     O or /       Display a member/generation popup of commands\n *   P Promote    Promote a generation to generation 0\n                  Copies a non-0 generation into generation 0 and leaves\n                  user in Edit.  If you issue Edit Save, then generation\n                  0 will be replaced.\n **  Q RENSwap    Rename and swap the members and all generations\n **  R REName     reName the member and all generations\n     S SElect     Select the member using default set action (B, E, V)\n     U User       User command\n     V View       View the member\n     X EXecute    eXecute the member (REXX or CLIST)\n *   Z COMpare    Compare generation 0 to non-0 generation member\n     =            Repeat prior line command\n\n Placing the cursor on a row and pressing enter will select that member.\n\n Multiple members can be selected at the same time for some operations,\n such as B, C, E, V or X.  Other selections will only allow one member\n to be selected at a time (e.g. P and R).\n\n Any line command can be used as a block command: XX/XX or X9999\n For expanded commands double the 1st character to block it:  EEX/EEX\n\n Download from: https://www.lbdsoftware.com/ispftools.html\n=CSECTS=CS\n)F  Example -\n The CS user extended line command displays the CSECT structure of a\n load module.  The CSECT table display allows the user to select a\n CSECT to be LISTed or DISAssembled.\n\n CMD  NAME     DATA     ALIASOF  LEN/LKED   --  ATTRIBUTES  -- AC MODE\n cs   PDS86                      2018/04/23 REFR RENT     TEST\n\n+----------------------------------------------------------------------+\n| --------------  CSECT Display for load module --- Row 1 to 16 of 119 |\n| Command ===>                                         Scroll ===> CSR |\n|                                                                      |\n| Primary Commands:   Locate Csect   RL Repeat Locate                  |\n| Line Commands:      S - LIST Csect  A - DISASM Csect  D - DUMPT Csect|\n|                                                                      |\n| Module:  PDS86                                                       |\n|      Control Section      Date       Translator  Version             |\n| _    ALIAS                 4/25/18   569623400   V01 M06             |\n| _    ALLOCATE              4/25/18   569623400   V01 M06             |\n| _    AMBLIST               4/25/18   569623400   V01 M06             |\n| _    ATTNEXIT              4/25/18   569623400   V01 M06             |\n| _    ATTRIB                4/25/18   569623400   V01 M06             |\n| _    BROWSE                4/25/18   569623400   V01 M06             |\n| _    CHANGE                4/25/18   569623400   V01 M06             |\n| _    CLEAR                 4/25/18   569623400   V01 M06             |\n| _    COBANAL               4/25/18   569623400   V01 M06             |\n| _    COMPARE               4/25/18   569623400   V01 M06             |\n+----------------------------------------------------------------------+\n\n Primary Commands:\n     Locate csect next - Locate the requested CSECT in the table\n     RL                - Repeat Locate\n     S Csect           - Select the CSECT\n\n Line Commands:\n     S                 - Select a CSECT to be displayed with PDS LIST\n     A                 - Select a CSECT to be disassembled with PDS\n                         DISASM\n     D                 - Select a CSECT to be dumped with SPZAP\n                         (for program objects in a PDSE)\n\n Note:  The LIST output can be disassembled with the Arthur Fichtl\n        REXX Interactive Short DisAssembler, ISDA on CBT File 773.\n\n        Assign a PF key as follows:  PF13  . . tso isda\n        Initial setup:\n          Enter the start column and number of lines:  16 5 <PF13>\n        To disassemble:\n          Position cursor on instruction and press <PF13>\n\n        +-------------------------------------------------------------+\n        | COMMAND ===>                                Row 1 to 9 of 9 |\n        |                                                             |\n        |      Instructions                                           |\n        | ---- ----------------------------------------------         |\n        | +000    90ECD00C     STM     R14,R12,12(R13)                |\n        | +004    189F         LR      R9,R15                         |\n        | +006    41B00800     LA      R11,2048(R0,R0)                |\n        | +00A    41A9B800     LA      R10,2048(R9,R11)               |\n        | +00E    41BAB800     LA      R11,2048(R10,R11)              |\n        | +012    41000000     LA      R0,0(R0,R0)                    |\n        | +016    5880B980     L       R8,2432(R0,R11)                |\n        | +01A    07F8         BR      R8                             |\n        | +01C    1B00         SR      R0,R0                          |\n        | ********************* Bottom of data ********************** |\n        +-------------------------------------------------------------+\n=MODEL\n)F  Example -     MODEL\n\n Model is a user extended command to allocate a new dataset based on\n the active dataset.\n\n +---------------------------------------------------------------------+\n | ------------------------ MODEL entry panel ------------------------ |\n | Command ===>                                                        |\n |                                                                     |\n |    Dataset:            'AD.FILE182.PDS484'                          |\n |    Volser:             MVSRES                                       |\n |    RECFM:              FB                                           |\n |    LRECL:              80                                           |\n |    BLKSIZE             27920                                        |\n |    SPACE Units:        B        B:Blocks T:Tracks C:Cylinders       |\n |    Primary Size        798                                          |\n |    Secondary Size      221                                          |\n |    Directory Size      145      Ignored if MaxGens is > 0           |\n |    MaxGens             0        Max Allowed: 100                    |\n |    Library Type:       P        L:Library or P:PDS                  |\n |                                                                     |\n |    Update values and press Enter to ALLOCATE or PF3 to CANCEL       |\n +---------------------------------------------------------------------+\n=ZTSOHELP=ZTSOH=TSOHELP=FSHELP=FSH\n)F  Example -     ZTSOHELP\n\n ZTSOHELP is an ISPF dialog to display TSO HELP members from a list of\n help members that reside in the SYSHELP concatenation.  The full-screen\n help (FSHelp) program or ISPF Browse can be used as a viewer.\n\n +---------------------------------------------------------------------+\n | ------------  TSO Help Pages (FSHelp) - 3.4  --- Row 1 to 11 of 283 |\n | Command ===>                                        Scroll ===> CSR |\n |                                                                     |\n | L cmd -Locate  RL - Repeat Locate  Only string  - Only  R - Refresh |\n | S cmd -Select  SE - Set Viewer     SOrt col A/D - Sort  H - Help    |\n |                                                                     |\n |      Command   Component  Description                               |\n | _    ABEND       FREE     TSO help member for abend codes           |\n | _    ACCOUNT     TSO      Modify/add/delete user attributes in UADS |\n | _    ACF         ACF2     Access Control Facility Security          |\n | _    ACFCOMP     ACF2     Compile and store a set of ACF2 rules     |\n | _    ACFNRULE    ACF2     Decompile, modify, compile, store rules   |\n | _    ADDGROUP    RACF     Add group profile                         |\n | _    ADDSD       RACF     Add data set profile                      |\n | _    ADDUSER     RACF     Add user profile                          |\n | _    ALLOCATE    TSO      Allocate a data set                       |\n | _    ALTDSD      RACF     Alter data set profile                    |\n | _    ALTER       IDCAMS   Alter attributes in catalog entries       |\n +---------------------------------------------------------------------+\n=VB2FB=VB=FB2VB=FB=SYSPROC=SYSEXEC=CONVERT=CONV\n)F  Example -     VB2FB\n\n VB2FB is a user extended command to convert CLISTs and Rexx Execs\n from VARable to FIXed record format and vice versa.\n\n +--------------------------------------------------------------+\n | --------- Copy Variable->Fixed and Fixed->Variable --------- |\n | Command ===>                                                 |\n |                                                              |\n |   Source Dataset:  LIONEL.EXEC                               |\n |   Target Dataset:  AD.PDSEGEN.EXEC                           |\n |   Members:         pdsegen                                   |\n |                                                              |\n |   Options:                                                   |\n |          Replace:  N (Y/N)                                   |\n |          Truncate: N (Y/N)                                   |\n |          NoRenum:  N (Y/N)                                   |\n |                                                              |\n |   Copy from a Variable to Fixed or Fixed to Variable DSN     |\n |      Members is one or more member names or name* (pattern)  |\n |                                                              |\n |      PF3 to cancel or Enter to continue                      |\n +--------------------------------------------------------------+\n\n Download from: https://www.lbdsoftware.com/ispftools.html\n=PDSMAN=CA-PDSMAN=IAN_CAIRNS\n)F FUNCTION -\n This section is provided to document PDSMAN support in the ATTRIB\n and DIRENTRY subcommands.  Messages PDS026I and PDS262I.\n\n >ATTRIB   PDSMANCI\n\n PDS020I PDSMANCI ATTRIBUTES ARE: NONE\n PDS120I PROGRAM RESIDENCE MODE IS 24 -- ADDRESSING MODE IS 31\n PDS026I MOD: 10/15/89  0:00 LEV:0   BY DOCTORK  EXPIRE:10/15/89\n                                                 READ: 2/07/90\n PDS102I ENTRY POINT AT 000048\n PDS104I MODULE LENGTH  010080  --     65K\n PDS064I LAST LINK-EDITED ON 10/14/89  BY LKED 566528408  V03 M01\n\n PDS118I 1 MEMBERS RMODE24; SIZE IS 65K\n\n >DIRENTRY PDSMANCI\n\n PDS143I PDSMANCI DIRECTORY ENTRY, LENGTH=58\n          0000  D7C4E2D4 C1D5C3C9  00A80337 00A80F00  *PDSMANCI.y...y..*\n          0010  00000000 02C20100  802EE800 00488802  *.....B....Y...h.*\n          0020  02010000 0089288F  00008928 8F00C4D6  *.....i....i...DO*\n          0030  C3E3D6D9 D2400090  038F               *CTORK ....*\n\n PDS262I LOC NAME     VALUE     DESCRIPTION\n PDS262I --- ----     -----     -----------\n . . .\n PDS262I 24  MANMODD  0089288F  DATE LAST MODIFIED   -- FORMAT: 0CYYDDDF\n PDS262I 28  MANMODT  0000      TIME                 -- FORMAT: HHMM\n PDS262I 2A  MANEXPIR 89288F    EXPIRATION BASE DATE -- FORMAT: YYDDDF\n PDS262I 2D  MANMODN  0.        MEMBER MODIFICATION LEVEL\n PDS262I 2E  MANUSER  DOCTORK   UPDATING JOBNAME OR TSO USER\n PDS262I 36  MANPROD  00        PRODUCTIONS STATUS INDICATOR -- X'80'\n PDS262I 37  MANREAD  90038F    DATE LAST READ       -- FORMAT: YYDDDF\n=TRANSLATORS=TRANSID=TRANS=COMPILERS=COMPILER\n)F FUNCTION -\n This section is provided to document IBM compilers and language\n translators.  The TRANS(Partt) and LKED(Partl) operands can be used\n in the MEMLIST, IF, and HISTORY subcommands to limit the results.\n\n Assembler:\n\n OS Assembler H                   5734AS100\n OS/VS Assembler (XF)             5741SC103\n Assembler H V2                   566896201\n High-Level Assembler             569623400\n\n COBOL:\n\n OS/VS COBOL R2M3 R2M4 (VSR1)     5740CB103\n VS COBOL II                      566895801\n COBOL/370 or COBOL for MVS/VM    566895807\n COBOL for OS/390 and VM V2       5648A2500\n Enterprise COBOL for z/OS V3     5655G5300\n Enterprise COBOL for z/OS V4     5655S7100\n Enterprise COBOL for z/OS V5     5655W3200\n Enterprise COBOL for z/OS V6     5655EC6\n\n FORTRAN:\n\n VS FORTRAN V2 (COMP/LIB/DEBUG)   5668-806\n\n PL/I:\n\n PL/I for MVS and VM V1           5688-235\n VisualAge PL/I for OS/390 V2     5655-B22\n Enterprise PL/I for z/OS V3      5655-H31\n Enterprise PL/I for z/OS V4      5655-W67\n Enterprise PL/I for z/OS V5      5655-PL5\n\n C/C++:\n\n C/C++ for MVS/ESA                5688216\n C/C++ OS/390 R2                  5645001\n C/C++ OS/390 R4                  5647A01\n XL C/C++ z/OS                    5694A01\n\n Linkage-Editors:\n\n OS/VS Linkage Editor             5752SC104\n DFP/XA Linkage Editor            566528408\n DFP/370 Linkage Editor           566529508\n DFSMS/MVS Binder                 5695DF108\n z/OS Binder                      5695PMB01\n=EXTERNAL=PROGRAMS\n)F FUNCTION -\n This section is provided to document external programs that\n are used by the PDS command.  CBT programs below are included\n in the TSO Transmit file called UTILXMIT.\n\n External programs are called via the TSO Service Routine, IKJEFTSR.\n These programs must reside in a task or link library.\n\n Subcommand     External PGM       Vendor        Function\n ----------     ------------       ------        --------\n AMBLIST     -  AMBLIST            IBM           Analyze load modules\n COBANAL     -  COBANAL            CBT           Analyze COBOL loadmod\n COMPRESS    -  IEBCOPY            IBM           Compress a PDS\n COPY        -  IEBCOPY            IBM           Copy members of a PDS\n DISASM      -  ASMDASM, DISASM    IBM, CBT      Disassemble load\n DLINK       -  DELINKI            CBT           Create object from load\n LMA         -  EQALMA             IBM           Load module analyzer\n LOAD        -  PDSLOAD            CBT           IEBUPDTE ---> PDS\n MATCH       -  PDSMATCH           CBT           Compare 2 PDS files\n MXIBAT      -  MXI                CBT, ROCKET   MVS eXtended Info\n OFFLOAD     -  OFFLOAD            CBT           PDS ---> IEBUPDTE\n PTSEXP      -  GIMCPTS            IBM           Uncompress SMP PTS\n SRCHFOR     -  ISRSUPC            IBM           ISPF SuperC search\n TRKMAP      -  DISKMAP, CPKMAP    CBT, IDP      Map a disk volume\n VPDSE       -  IEBPDSE            IBM           Verify a PDSE\n XMIT        -  TRANSMIT           IBM           TSO Transmit\n=ACKNOWLEDGEMENTS=THANKS=CODERS\n)F FUNCTION -\n This section is provided to acknowledge the assembler and system\n programmers who have contributed modifications to the PDS command\n since 1997.\n\n Greg Price       - PDSE support;LIST, MEMLIST, MAP, HISTORY, REPRO mods\n John Hamlet      - PDSE EAV support\n Don Poitras      - FLAG(PAGE0) mod\n Mike Mayne       - HELPLIST mod\n Al Ferguson      - PDSMAIN (ISRDSLST) mod\n Simonetti Pietro - DIALSTC mod\n Gene Coley       - RESTORE mod\n Lionel Dyck      - P86PN*PS panel mods; PDSQINST quick install\n Bruce Leland     - COMPAREC command processor\n Bill Godfrey     - PDSMATCH fixes\n Dr Janko Kalinic - Y2K, Xstats, various mods; PDSE, new subcommands\n=SHA=CHECKSUM=HASH\n)F Function -\n  SHA-n (Secure Hash Algorithm n) is a set of cryptographic hash\n  functions designed by the United States National Security Agency\n  (NSA).\n\n  Cryptographic hash functions are mathematical operations run on\n  digital data; by comparing the computed \"hash\" (the output from\n  execution of the algorithm) to a known and expected hash value,\n  a person can determine the data's integrity.\n\n  SHA-1 Family:\n    The SHA1SUM command displays the SHA-1 hash of data sets.\n  SHA-2 Family:\n    The SHA224S command displays the SHA-224 hash of data sets.\n    The SHA2SUM command displays the SHA-256 hash of data sets.\n    The SHA3SUM command displays the SHA-384 hash of data sets.\n    The SHA5SUM command displays the SHA-512 hash of data sets.\n  SHA-3 Family:\n    No implementation as a TSO command.\n\n  In data sets with variable-length records the rdw's and sdw's are\n  not included when the checksum is computed unless the rdw keyword\n  is specified.\n\n)X Syntax -\n         command  'dslist'  file  lower  rdw  brief  multi  quick\n\n  Required - command (SHA1SUM, SHA224S, SHA2SUM, SHA3SUM or SHA5SUM)\n             'dslist'\n  Defaults - none\n\n)O Operands -\n  'dslist' - Names of sequential data sets or members of partitioned\n             data sets. If more than one, enclose list in parentheses.\n\n))FILE     - The names in dslist are ddnames, not dsnames.\n))LOWER    - Display the results in lower case.\n))RDW      - Include rdw or sdw in variable length records.\n))BRIEF    - Display only the hash, without the data set name.\n))MULTI    - Display the hash and data set name on separate lines.\n))QUICK    - For unquoted dsnames, bypass the default service routine.\n             So for example, if you specify the name temp and you\n             only have a data set named temp.data, it won't be found\n             if quick is also specified. The quick keyword is just\n             to cut out the overhead of looking for extensions at\n             the end of the specified data set name.\n=TIPS=TRICKS=GEEKS=DUMMIES\n)F FUNCTION -\n This section is provided for the mainframe geek seeking to keep\n the saw sharp.\n\n Tips and Tricks:\n\n o  Expand a PDS directory without reorganizing\n      fixpds expand(10)\n      ... the PDS directory is expanded with 10 more blocks\n\n o  Use PDS under TSSO for emergency situations\n      #pds 'sys1.proclib' list net\n      ... the VTAM net proc is listed out on the console.\n      #pds 'sys1.proclib' replace net 'oldstring' 'newstring' write\n      ... PDS command changes the member.\n\n o  Search and replace strings across any members of a PDS\n      replace s2k: 'dsn=s2k.load' 'dsn=s2k.load2' write\n      ... System 2000 JCL procs are updated with a new load library\n\n o  Change RECFM, LRECL, and BLKSIZE values without reorganizing\n      fixpds recfm(u) lrecl(80) blksize(80)\n      ... recfm(f) doc file changed to undefined before copy to loadlib\n\n o  Generate a list of previously deleted members\n      restore xxxx repeat noprompt display find('sysout=t') TEST\n      ... a list of deleted members is displayed but not restored\n\n o  Resurrect previously deleted members\n      restore xxxx repeat noprompt nodisplay find('sysout=t')\n      ... deleted members are restored with xxxx0001-xxxx000n names\n\n o  Verify the validity and display the total logical and physical\n    record counts for the entire PDS\n      verify :\n      ... all members of PDS verified for validity and counted\n\n o  Verify the validity and display the logical and physical\n    record counts for each member of a PDS\n      sublist :\n      verify *\n      ... each member of PDS verified for validity and counted\n\n o  Compare two PDS's for differences in data or directory userdata\n      match 'ad.file182.pds484.nov2515' changed sublist\n      ... each member of current PDS is compared for changed data\n\n o  Use PDS to determine the optimal blocksize (PDB)\n      fixpds blksize(99999)\n      ... PDS changes the blocksize to half-track blocking\n\n o  Identify members with extended ISPF statistics\n      if : xstats then(memlist)\n      ... members with extended ISPF statistics are added to the MEMLIST\n\n o  Identify members with ISPF packed data\n      if : packed then(sublist)\n      ... members with ISPF packed data form a new member group\n\n o  Identify load modules zapped in a date range\n      memlist : changed(05/20/14:03/30/16)\n      ... load modules zapped from May 20, 2014 to March 30, 2016\n          are added to the MEMLIST\n=ABEND=ABEN=ESTAE=ESTAI=STAE\n)F FUNCTION -\n The ABEND HELP entry is provided to explain ABEND processing\n performed by -PDS86-. -PDS86- attempts to recover from ABENDs with\n its ESTAE and ESTAI recovery routines unless CONTROL NORECOVER is\n in effect.\n\n In the following, the ABEND processing provided by -PDS86- is\n described in more detail:\n\n  A.  The -PDS86- program uses different recovery methods depending\n      on the subcommand being executed.  The method used should\n      perform any cleanup and initialization functions required to\n      restart -PDS86-.\n\n  B.  For internal -PDS86- subcommands, recovery is performed by\n      writing an error message and terminating the subcommand.\n\n  C.  For the external subcommands BROWSE, EDIT, ISPF, or VIEW,\n      no ESTAE recovery is attempted.\n\n  D.  For the other external -PDS86- subcommands (COMPARE, COMPRESS,\n      COPY, DCF, DSPRINT, EXEC, FSE, HELP, PRINTOFF, REVIEW, SUBMIT,\n      TSO xxx, TSOEDIT, TSOLIST and VPSPRINT), the subcommand\n      processor is forcibly detached.\n\n  E.  If CONTROL NORECOVER is in effect, -PDS86- will terminate unless\n      the subcommand being used specifically tests for ABEND conditions\n      (such as IF with LOADERR or VERIFY with LOAD).\n\n  F.  If CONTROL RECOVER is in effect, any ABEND dump will probably\n      not be very useful; also, if you want to use TSO TEST after an\n      ABEND, it is recommended that you set CONTROL NORECOVER first.\n\n  G.  Certain external programs reached via the TSO subcommand (such\n      as CALL) will terminate -PDS86- with a \"READY\" message if the\n      program they invoke ABENDs.  Note, however, that if a null line\n      is entered at this point, -PDS86- will regain control.\n\n  H.  The PDS999E message should identify the name of the -PDS86-\n      assembly listing involved in the error as follows:\n        1. PDSMAIN - ABEND in the PDS mainline\n        2. PARSE   - ABEND in the PARSE interface\n        3. ISPDSPY - ABEND in the ISPF Dialog routines\n        4. VSUBCMD - ABEND in the subcommand check\n        5. VTSOCMD - ABEND in the TSO command check\n        6. subname - ABEND in the subroutine identified below:\n             |\n             v\n           ALIAS    AMBLIST  ATTRIB   BROWSE   CHANGE\n           CLEAR    COBANAL  COMPARE  COMPRESS CONTROL\n           COPY     CPKMAP   DELETE   DELINK   DISASM\n           DISPLAY  DSNAMES  EXEC     FIXPDS   HELP\n           HISTORY  IF       LCS      LIST     LMA\n           LOAD     MAP      MATCH    MXIBAT   OFFLOAD\n           OUTCOPY  PRINTOFF PTSEXP   RENAME   REPRO\n           RESTORE  RX       SMPGEN   SRCHFOR  SUBLIST\n           TIME     TSO      TSOEDIT  USAGE    FAMS\n           VERIFY   VPDSE    XMIT\n\n      Note: These control sections contain other subcommand processing.\n\n      BROWSE  (EDIT, ISPF, ISPMODE, MEMLIST, and VIEW)\n      DELETE  (MEMBERS and SUBMIT)\n      TSOEDIT (FSE)\n      LIST    (DIRENTRY, FIND, and REPLACE)\n      DISPLAY (PATTERN)\n)X SYNTAX -        none.\n)O OPERANDS -      none.\n=ATTN=PA1=ATTE=ATTEN=ATTENT=ATTENTI=ATTENTIO\n)F FUNCTION -\n The ATTN HELP entry is provided to explain the attention processing\n performed by -PDS86-. In general, an attention (the PA1 key) may be\n used to terminate the current -PDS86- subcommand and two attentions\n in a row may be used to terminate the -PDS86- command.\n\n In the following, the attention processing provided by -PDS86- is\n described in more detail:\n\n  A.  A single (double for TSOEDIT) attention should terminate any\n      member group in progress (except for the FSE subcommand).\n\n  B.  An attention at a prompt for a data set should terminate -PDS86-.\n\n  C.  An attention at the normal ENTER OPTION subcommand prompt\n      should provide another ENTER OPTION prompt; another attention\n      at this point should terminate -PDS86-.\n\n  D.  For subcommands BROWSE, EDIT, ISPF, ISPMODE, MEMLIST, or VIEW,\n      no ENTER OPTION prompt is provided by -PDS86-'s attention\n      handling:\n       1.  A single attention should terminate any member group in\n           progress.\n       2.  An attention during a edit or browse line command from\n           MEMLIST will terminate any remaining line commands.\n       3.  Any additional attentions should be ignored by -PDS86-.\n       4.  For TSO commands invoked by ISPF with no attention\n           handling:  the first attention is noted by -PDS86- and it\n           will terminate any member group in progress; subsequent\n           attentions apply only to the TSO command.\n\n  E.  For the COMPRESS or COPY subcommands, attentions are ignored\n      until the attached program terminates to protect the integrity\n      of the target data set.\n\n      Note that if IKJEFTSR is used to authorize IEBCOPY for the\n      compress or copy, attention interrupts cannot be deferred;\n      thus, it is recommended that the attention key not be used\n      (a successful attention may destroy the data set).\n\n  F.  For other -PDS86- subcommands, a single (double for TSOEDIT)\n      attention should result in an ENTER OPTION prompt; the\n      processing action taken at this point depends on what is\n      entered next:\n       1.  Another attention should terminate the -PDS86- command.\n       2.  A null line should cause the interrupted subcommand to\n           continue at the point of interruption.  Note: any messages\n           awaiting output at the time of the interrupt will be lost.\n       3.  If a subcommand is entered and the currently executing\n           subcommand is external to -PDS86- (COMPARE, DCF, DSPRINT,\n           EXEC, FSE, HELP, PRINTOFF, REVIEW, SUBMIT, TSO xxx, TSOEDIT,\n           TSOLIST or VPSPRINT), the command processor should be\n           forcibly detached and the ABEND message should be\n           suppressed.\n       4.  An entered subcommand should be given control without delay.\n\n  G.  If an internal -PDS86- subcommand is in a loop that does not\n      involve input or output to the terminal or input from the current\n      data set, a single attention will not terminate the loop:\n       1.  The first attention will provide the normal ENTER OPTION\n           prompt.\n       2.  If a subcommand is entered at this time, -PDS86- will\n           continue looping.\n       3.  Another attention will produce the message\n           \"THE PROGRAM IS PROBABLY IN A LOOP\" and -PDS86- will perform\n           the subcommand entered at the ENTER OPTION prompt.\n)X SYNTAX -        none.\n)O OPERANDS -      none.\n=DEFINE=DEF=DEFI=DEFIN=GLOSSARY=GLOSS=GLOS\n)F FUNCTION -\n The DEFINE HELP entry is provided to explain terminology used\n in the -PDS86- program and in its documentation:\n\n Alias member -  a directory entry with a indicator value which\n indicates that the member entry is an alternate name for another\n main member; a main member and its aliases are associated with\n the same recorded data in the PDS.\n\n Apparent alias member -  data in a partitioned data set which is\n pointed to by more than one main PDS directory entry.\n\n Associated members -  members with the same TTR address.  For a main\n member, the associated members could be alias members or an apparent\n alias member; for an alias member, the associated members could be\n other aliases or a main member.\n\n Batch mode -  a mode of -PDS86- operation. In batch mode, all user\n communication is performed with PUTGET, GETLINE and PUTLINE TSO\n services.  No ISPF services are available.  In this mode of\n operation, -PDS86- operates under control of the batch Terminal\n Monitor Program (the TMP, or IKJEFT01).  You can include comments\n in a PDS subcommand anywhere a blank might appear.  To include a\n comment start with delimiter /*. If you want to continue a PDS\n subcommand after the comment, close the comment with delimiter */.\n\n BLDL -  a BPAM function which is used to check for the existence of\n members.\n\n BPAM -  an acronym for Basic Partitioned Access Method; BPAM is\n actually very similar in use to BSAM which is for sequential data.\n -PDS86- often uses BPAM for member check operations and always uses\n BPAM for directory updates and reading PDSE data sets.\n\n BSAM -  an acronym for Basic Sequential Access Method; -PDS86- uses\n BSAM for several utility functions.\n\n CCHHR -  an acronym for Cylinder, Cylinder, Head, Head, Record which\n is a 10 digit hexadecimal disk address relative to the start of the\n volume.\n\n Command -  a request for an operation.  For example, -PDS86- is a\n command and XMIT is a -PDS86- subcommand.   The distinction between\n a command and a subcommand is not often important.\n\n Compress -  a process which removes deleted members from a PDS.  Disk\n space formerly occupied by these deleted members is made available\n for new members.  In a PDSE data set, space from deleted members is\n managed dynamically; you can not compress a PDSE.\n\n Deleted member -  member data which is not pointed to by any\n directory entry; deleted members remain in a PDS until the\n data set is compressed.\n\n DS1LSTAR -  a pointer in the data set control block (DSCB) which\n indicates the last used disk address for a data set.  This pointer is\n updated after a member is added to a PDS data set; it is also\n adjusted after a PDS is compressed.\n\n EXCP -  an acronym for EXecute Channel Program.  This access method is\n used extensively by -PDS86- for its read and write operations.\n\n ISPMODE -  a mode of -PDS86- operation. With ISPMODE, -PDS86-\n operates as an ISPF dialog and normal ISPF services (HELP, TSO,\n SPLIT, SWAP,...) are available and all -PDS86- services are\n available as well.\n\n Line command -  a command entered on a table line in the CMD field.\n In -PDS86-, line commands may be up to four characters long.\n In addition, up to eight additional operand bytes may be entered to\n the right of a member name in the DATA field.\n\n Line mode -  a mode of -PDS86- operation. In line mode, all user\n communication is performed with PUTGET, GETLINE and PUTLINE TSO\n services.  No ISPF services are available.\n\n Load library -  a partitioned data set which has record format U\n and is commonly used to contain executable modules.\n\n Load module -  a member contained in a load library.\n\n Main member -  a non-alias directory entry and its associated\n recorded data.\n\n Member -  data in a partitioned data set (or PDS) which is pointed\n to by one or more PDS directory entries.\n\n Orphan member -  an member marked as an alias which does not have\n an associated main member.\n\n PDB or PDS-determined blocksize - a block size determined by the\n FIXPDS BLKSIZE(99999) subcommand.  PDB's are half-track block sizes.\n\n PDS or Partitioned Data Set -  a data set with fixed, variable or\n undefined format which is commonly used as a \"library\" for related\n types of information.  Partitioned data sets contain two segments\n of data: a directory of information and member data.\n\n PDSE or Partitioned Data Set Extended -  a data set with fixed,\n variable or undefined format which is commonly used as a \"library\"\n for related types of information.  PDSE data sets contain two\n segments of data: a directory of information and member data.  Member\n data and directory entries are stored in 4096-byte blocks on the\n device.  This type of library is requested as DSNTYPE(LIBRARY) in JCL\n or on an ALLOCATE command.  A PDSE must be accessed by BPAM or BSAM\n access methods; SMS provides a virtual data set which looks like a\n PDS.  A PDSE can have up to 123 extents and cannot extend beyond\n one volume.\n\n PDS directory -  a segment of a PDS which is a sequential data set\n with eight byte keys and 256 byte data records containing pointers\n to data in the PDS member portion of the data set.\n\n PDSE directory -  the directory is indexed, permitting more direct\n searches for members.  The name and the relative track address of a\n member are used as keys to search for members. The PDSE directory is\n expandable; you can keep adding entries up to the directory size limit\n or until the data set runs out of space. The PDSE directory can extend\n into secondary space.  The limit for the number of members in a PDSE\n directory is 522,236.\n\n PDS member data -  a segment of a PDS which contains current members\n (which are pointed to by one or more directory entries) and inactive\n or deleted members (which have no associated directory entries).\n\n PDSE member data -  a member is allocated in full page increments.  A\n member is maintained on full page boundaries, and any remaining space\n in the page is unused.  Space from deleted members is managed\n dynamically; you can not restore deleted members or compress a PDSE.\n PDSE members can contain a maximum number of 15,728,639 logical\n records.  The limit increases in PDSE Version 2 to 2,146,435,071\n logical records.\n\n PDS directory entry -  a logical entry in a PDS directory which points\n to its associated data in the member data; it consists of an eight\n character member name field and at least one three byte relative\n address (TTR) field.\n\n PDSE directory entry -  a logical entry in a PDSE directory which\n points to its associated data in the member data; it consists of a\n member name or an alias, the starting location of the member within\n the data set and optionally user data.  The directory entries are\n arranged by name in alphanumeric collating sequence.  The name and the\n relative track address of a PDSE member are used as keys to search for\n members.  The TTRs are not relative track and record numbers but\n rather pseudo randomly generated aliases for the PDSE member.\n\n PDSE V2 member generations - allows you to reverse or access\n recent changes to a member.  It also allows you to retain multiple\n generations of a member for archival reasons.  Member generations\n is similar to generations for data sets.  There's no need to fear,\n PDSEGEN\u00ae is here!  Critically acclaimed by Dr. Harold Twain Weck,\n Institute for Backup Trauma Director.\n\n \"https://www.youtube.com/watch?v=MgxgYL5P4z4\"\n\n PDSPAIN -  1988 PDSPAIN committee report to SHARE. The committee\n presented its report in Session 0232 at Share 70 in Anaheim.\n This is the MVS GROUP Position Addressing the need for Functional\n Enhancement to OS/MVS Partitioned Data Sets. The PDSPAIN committee\n was formed by the Storage Management Project of the Operating Systems\n Support Division of SHARE to study problems associated with\n OS partitioned data sets.  IBM responded with the PDSE format.\n\n Primary command -  a subcommand or command entered from the command\n line of a panel.\n\n Program fetch -  a program that prepares programs for execution\n by loading them at specific storage locations and readjusting each\n relocatable address constant.\n\n QSAM -  an acronym for Queued Sequential Access Method; -PDS86- uses\n QSAM to read PDSE directories and for several utility functions.\n\n Source library -  a PDS or PDSE data set which has fixed or variable\n format data; source libraries are normally used to contain\n non-executable data.\n\n Source member -  a member contained in a source library.\n\n Subcommand -  a request for an operation that is within the scope of\n work requested by the previously issued command.  -PDS86- is a\n command; XMIT is a -PDS86- subcommand. The distinction between a\n subcommand and a command is not often important.\n\n The PDS Command -  a TSO command processor and ISPF dialog program\n package.  There are possibly 1,000 separate dataset manipulation\n functions built into this package, and it is something that no systems\n programmer can afford to be without, period.\n\n TTR -  an acronym for Track, Track, Record which is a 6 digit\n hexadecimal disk address relative to the start of the data set; this\n type of address is stored in the member directory entry to indicate\n the starting address of a member.\n)X SYNTAX -        none.\n)O OPERANDS -      none.\n=DIALOG=DIA=DIAL=DIALO\n)F FUNCTION -\n  The DIALOG HELP entry is provided to explain the processing\n  relationships of ISPF and the -PDS86- subcommands which use ISPF\n  dialog services.\n\n  Note: the OUTCOPY subcommand and the CONTROL SYSOUT/DSNAME operands\n  do not use ISPF services; however, when they are first entered, they\n  attempt to establish an ISPF environment so that ISPF services can be\n  utilized by subsequent -PDS86- subcommands; the BROWSE, EDIT, ISPF,\n  ISPMODE, MEMLIST and VIEW subcommands do require ISPF services.\n\n\n  -PDS86- is a TSO command processor and can gain control in any of\n  the following modes:\n\n  A.  From READY mode:\n      When the first subcommand utilizing or initializing ISPF services\n      is entered, -PDS86- calls an ISPF interface which invokes -PDS86-\n      recursively as an ISPF dialog; ISPF services are then directly\n      invoked for each subsequent BROWSE, EDIT, ISPF, ISPMODE, MEMLIST,\n      or VIEW subcommand.\n\n  B.  From ISPF option 6, the TSO subcommand of ISPF, or as a line\n      command from option 3.4:\n      ISPF services can be used without restrictions.\n\n  C.  From another TSO command processor:\n      If an ISPF environment has been established by an earlier command\n      processor, ISPF services can not be used; otherwise, when the\n      first subcommand utilizing or initializing ISPF services is\n      entered, -PDS86- calls an ISPF interface which invokes -PDS86-\n      recursively as an ISPF dialog; ISPF services are then directly\n      invoked for each subsequent BROWSE, EDIT, ISPF, ISPMODE, MEMLIST,\n      or VIEW subcommand.\n\n  D.  From the PDS@PRIM panel in ISPF:\n      -PDS86- is invoked as an ISPF dialog; -PDS86- locates and\n      creates the required command processor control blocks and can\n      invoke ISPF services directly.\n)X SYNTAX -        none.\n)O OPERANDS -      none.\n=GROUPS=G=GR=GRO=GROU=GROUP\n)F FUNCTION -\n  The GROUP HELP entry is provided to explain the various member\n  name forms allowed.  Member names may be entered in either character\n  or hexadecimal mode for any subcommand which processes member names.\n\n  Character member names may be from one to eight bytes long with no\n  imbedded blanks, commas, parentheses, colons or slashes.\n\n  Hexadecimal member names may contain from one to sixteen hexadecimal\n  digits delimited by x' and '.  X'd7c4e2f9' and PDS9 are entirely\n  equivalent; also, x'333' and x'0333' are equivalent.\n\n  Subcommands AMBLIST, ATTRIB, BROWSE, COBANAL, COPY, DCF, DELETE,\n  DIRENTRY, DSPRINT, EDIT, FIND, FSE, IF, HISTORY, LIST, LMA, MAP,\n  MEMBERS, MEMLIST, OFFLOAD, OUTCOPY, PRINTOFF, REPLACE, REPRO, REVIEW,\n  SMPGEN, SRCHFOR, SUBMIT, SUBLIST, TSOEDIT, TSOLIST, VIEW, VERIFY,\n  VPSPRINT, and XMIT allow additional member name specifications.\n\n  A member name range, member name pattern or member name combination\n  forms what is termed a member group.  Note that a member list (that\n  is, a parenthesized list containing member and member group\n  specifications separated by commas) may also be used.\n\n  When a member group is being processed, the subcommand processing\n  routine is re-executed for each member in the group.  Specifically,\n  note the following:\n\n  A.  Default member name -- if no member name is specified, the\n      last member name or member group entered for any of the above\n      subcommands will be assumed.\n\n  B.  Asterisk member name -- if * is entered in the member name\n      position, the last member name or member group entered for\n      any of the above subcommands will be assumed.\n\n  C.  Member name range -- any of these subcommands may select all\n      members in a range by specifying a beginning partial member\n      name, a colon, and a ending partial member name (either or\n      both of the partial names may be null).\n\n      Logic from the DISPLAY subcommand is used to select members;\n      the subcommand processes these selected members in alphabetic\n      order.  The following specifications would select the same\n      member names:\n            subcommand  :            and   DISPLAY\n            subcommand  part1:       and   DISPLAY  part1\n            subcommand  :part2       and   DISPLAY  x'00' part2\n            subcommand  part1:part2  and   DISPLAY  part1 part2\n\n  D.  Member name pattern -- any of these subcommands may select all\n      members whose names contain pattern characters by specifying a\n      member name segment, a slash, and another member name segment\n      (either, not both, of the member name segments may be null).\n\n      Logic from the PATTERN subcommand is used to select members;\n      the subcommand processes these selected members in alphabetic\n      order.  The following specifications would select the same\n      member names:\n            subcommand  seg1/        and   PATTERN  seg1\n            subcommand  /seg2        and   PATTERN  seg2\n            subcommand  seg1/seg2    and   PATTERN  seg1 seg2\n\n  E.  Member name combination -- any of these subcommands may select\n      all members whose names contain a range of names and a pattern\n      of characters by specifying a member name segment, an asterisk\n      and another member name segment (either, not both, of the\n      member name segments may be null).\n\n      Logic from the PATTERN subcommand is used to select members;\n      the subcommand processes these selected members in alphabetic\n      order.  The following specifications would select the same\n      member names:\n            subcommand  seg1*        and   DISPLAY  seg1 seg1\n            subcommand  *seg2        and   PATTERN  seg2\n            subcommand  seg1*seg2    and   DISPLAY  seg1 seg1 --with--\n                                                    PATTERN  seg2\n\n  F.  Member name display subcommands -- MEMBERS, PATTERN and DISPLAY\n      allow the display of member groups using the above member group\n      syntax; however, these subcommands differ as follows:\n       1.  DISPLAY -- can not modify the current member group;\n           if no member specification is entered, the entire\n           member directory is displayed.\n       2.  PATTERN -- can not modify the current member group;\n           if no member specification is entered, the member group\n           last entered on a PATTERN subcommand is displayed.\n       3.  MEMBERS -- can modify the current member group;\n           if no member specification is entered, the current\n           member group is displayed.\n\n  G.  Following are examples using the MEMBERS subcommand to\n      define and display a member group:\n\n        SUBCOMMAND         MEMBERS IN THE GROUP\n        ----------         --------------------\n        MEMBERS aa         AA\n        MEMBERS (aa,bb)    AA and BB\n        MEMBERS (aa,bb/)   AA and any member names containing BB\n        MEMBERS *          current member group\n        MEMBERS            current member group\n\n        MEMBERS :          all members -- X'00' through X'FF'\n        MEMBERS aa:        members from AA... through X'FF'\n        MEMBERS :bb        members from X'00' through BB...\n        MEMBERS aa:bb      members between AA... and BB...\n        MEMBERS (abc,d:)   member ABC and those from D... through X'FF'\n\n        MEMBERS aa/        member names containing AA anywhere\n        MEMBERS /bb        member names containing BB anywhere\n        MEMBERS aa/bb      member names containing AA and BB\n        MEMBERS (aa/,bb/)  member names containing AA or BB\n\n        MEMBERS aa*        members with names AA...\n        MEMBERS *bb        member names containing BB anywhere\n        MEMBERS aa*bb      member with names AA... and BB elsewhere\n        MEMBERS (aa*,bb/)  members with names AA... or with BB anywhere\n\n)X SYNTAX -        none.\n)O OPERANDS -      none.\n=LIMITS=LIM=LIMI=LIMIT\n)F FUNCTION -\n The LIMITS HELP entry is provided to list -PDS86- limitations\n which might impact the program's usefulness at an installation:\n\n   1.  In the ISPMODE or MEMLIST panels, a maximum of 48 characters\n       may be entered as a subcommand; otherwise, a maximum of 256\n       characters may be entered.\n\n       You can avoid the 48 characters restriction by ending a\n       ISPMODE or MEMLIST subcommand with a plus (+) character and a\n       continuation panel will be presented with the data you already\n       entered to allow you to enter the rest of the subcommand.\n\n   2.  For ISPMODE panels, only the first 79 characters of an output\n       line are available for display; this is a consideration for\n       the LIST and FIND subcommands with output formats NUM, SNUM\n       and NONUM.\n\n       Note:  If the &LOGWIDE global variable is set to 'YES' then\n       the screen width of ISPMODE Log panel 1 will be set to the\n       length of ZSCREENW.  Thus, up to 158 characters of an output\n       line are available for display depending on the terminal width.\n\n   3.  For session outputs via CONTROL DSNAME or SYSOUT, only the\n       first 80 characters of an output line are retained if\n       allocated with RECFM=FB and LRECL=80; this is also a\n       consideration for the LIST and FIND subcommands with output\n       formats NUM, SNUM and NONUM.  If the CONTROL DSNAME(dsname)\n       data set is pre-allocated with RECFM=VB, any LRECL can\n       be used; a maximum of 256 characters of an output line are\n       retained.\n\n   4.  For MEMLIST panels, only eight bytes of operand information\n       may be entered as an operand in a line command after the\n       member name.\n\n   5.  For subcommands FIND and IF, the THEN and ELSE keywords may\n       contain only a subcommand name (operands are not permitted).\n       As a consequence, only the default action for the named\n       subcommand may be performed using the current member.\n\n       However, if you construct a member list subset using the\n       SUBLIST keyword after THEN or ELSE in FIND or IF, any desired\n       subcommands can be performed on the subset of members selected\n       in a subsequent subcommand using * for the group name.\n\n       For example,\n\n         if a:z sctr noalias then(sublist)\n         map * relink\n\n   6.  XMIT is limited to 3620 members unless all members are specified.\n       The member group to be transmitted can not be larger than 3620\n       members.  All members (:) can be transmitted without limits.\n       The IKJEFTSR command buffer length limit is 32K.\n\n       For example,\n\n         xmit *    to.sam outda(bin)  <--- limited to 3620 members\n         xmit p86: to.sam outda(bin)  <--- limited to 3620 members\n         xmit :    to.sam outda(bin)  <--- all members\n)X SYNTAX -        none.\n)O OPERANDS -      none.\n=UPDATE=UP=UPD=UPDA=UPDAT=SHR=SH\n)F FUNCTION -\n The UPDATE HELP entry is provided to explain the update data\n set protection implemented for certain -PDS86- subcommands.\n\n If the data set is allocated as OLD, the STOW DCB is left open after\n the first data set update.  For OLD allocations, exclusive use of the\n data set is assured and the following does not apply.\n\n If the data set is allocated as SHR (SHR was specifically requested\n or SHR was defaulted to), -PDS86- subcommands which update the\n data set such as ALIAS, ATTRIB (with attributes to be changed),\n COPY (for the output data set only), DELETE, FIXPDS, RENAME, REPRO,\n RESTORE or VERIFY could cause data set integrity problems if the\n data set is also being updated by another user.\n\n To circumvent this problem, -PDS86- uses the following ISPF RESERVE\n logic to maintain data set integrity during data set updates.\n\n  A.  A  RESERVE  (SPFEDIT,DSNAME,E,44,SYSTEMS),UCB=ADDRESS\n      is performed.\n\n  B.  If the data set is a load library, then a linkage editor\n      RESERVE or ENQUEUE is performed as appropriate:\n       1.  On a shared DASD volume,\n           RESERVE  (SYSIEWLP,DSNAME,E,44,SYSTEMS),UCB=ADDRESS\n       2.  On a non-shared DASD volume,\n           ENQ  (SYSIEWLP,DSNAME,E,44,SYSTEM)\n\n  C.  The data set STOW DCB is opened\n\n  D.  All data set updates are performed.\n       1.  Wherever possible, the STOW DCB is left open while\n           an entire member group is being processed.\n       2.  For executions of -PDS86- in batch mode, the volume\n           reserve is maintained and the STOW DCB is left open\n           following the first update to the data set.\n\n  E.  The data set STOW DCB is closed\n\n  F.  DEQ's are performed to remove the RESERVE's and ENQ's\n\n SYSPLEX note:  MVS (since DFP 2.3, circa 1987) ensures that\n only one program in the sysplex can open a PDS with\n the OUTPUT option, even if you specify DISP=SHR.\n\n If a second program issues OPEN with the OUTPUT\n option, for the PDS with DISP=SHR, while a DCB is\n still open with the OUTPUT option, the second program\n will get a 213-30 ABEND.\n\n <Bruce Black, Innovation DP>\n PDS sharing was addressed by introducing new ENQ's.  The major name is\n SYSZDSCB.  The minor name consists of the dsn, volser, and access type\n (read or write).  The read ENQs are shared, the write is exclusive, so\n only one job (even cross-system) can update the PDS at any one time.\n </Bruce Black, Innovation DP>\n)X SYNTAX -        none.\n)O OPERANDS -      none.\n=MESSAGE=MS=MES=MSG=MESS=MSGS=MESSA=MESSAG=MESSAGES\n)F FUNCTION -\n The MESSAGE HELP entry is provided to document -PDS86- program\n messages.\n\n -PDS86- messages are of the format PDSnnnx (where nnn is numeric and\n x is the letter I, A, W or E).  The program messages are grouped in\n numeric ranges by message severity as shown below:\n\n      MESSAGE RANGE         DESCRIPTION\n      -----------------     -----------\n      PDS000I - PDS299I     Informational messages\n      PDS300A - PDS399A     Action messages (a response is required)\n      PDS400W - PDS599W     Warning message (possible error condition)\n      PDS600E - PDS999E     Error messages\n\n\n Messages above PDS399 (warning and error messages) can be explained\n via the extended help facility if these messages are received during\n -PDS86- program execution.\n\n To use the extended help facility after warning and/or error messages\n have been received, enter a .?  response to the ENTER OPTIONS prompt\n message and up to five warning or error message explanations from the\n last subcommand will be requested from the HELP data set by the\n program.\n\n To see the message identifier on messages that appear at your\n terminal, enter the following TSO command:\n\n   PROFILE MSGID\n\n To ensure that you receive all write-to-programmer messages, enter\n the following TSO command:\n\n   PROFILE WTPMSG\n)X SYNTAX -\n     HELP MSG MSG(PDSxxx,PDSyyy, ...)\n          (where PDSxxx and PDSyyy are messages to be explained)\n)M MESSAGES -\n   -PDS86- has the following numbered messages:\n))PDS001I TESTMESSAGES -- ALL NUMBERED MESSAGES FOLLOW:\n   This message is the header for CONTROL TESTMESSAGES.\n\n))PDS002I DEFAULT MEMBER IS member\n   This message displays the default member name.  This member is being\n   identified as the member which will be acted upon by the current\n   subcommand.  The default member name (or member group) will also be\n   displayed on the PDS300A message after the  MEM=  keyword.\n\n))PDS005I END OF FILE\n   An end of file marker was input indicating the end of the member.\n\n))PDS006I END OF DATA SET dsname\n   An end of file marker was input indicating the end of the data set.\n\n   Note:  for VERIFY memgroup, this member has the highest TTR.\n\n))PDS010I THE ALIAS HAS BEEN ASSIGNED\n   The ALIAS subcommand has completed successfully.\n\n))PDS020I member ATTRIBUTES ARE: attrib1, attrib2, ...\n   This message lists the linkage editor attributes of the member:\n     OVERLAY   - overlay load structure\n     TEST      - linked with the TEST option\n     E-LEVEL   - not linked by the \"F\" level linkage editor\n     SCTR      - scatter load structure\n     RENT      - reentrant (executable by several tasks simultaneously)\n     REUS      - reusable (executable by several tasks in serial order)\n     REFR      - refreshable (replaceable by a copy during execution)\n     LOAD ONLY - can only be brought into storage with a LOAD MACRO\n     NOT EDIT  - can not be linkage edited again\n     NOT EXEC  - not executable\n     DC        - downward compatible with linkage editor level E\n     NONE      - none of the above linkage attributes\n\n))PDS021I APF AUTHORIZED\n   This member has been marked as authorized by the linkage editor.\n\n))PDS022I NOT APF AUTHORIZED, OBSOLETE LINKAGE EDITOR\n   This member is not authorized; it was linked by an obsolete linkage\n   editor.\n\n))PDS023I APF AUTHORIZED, APF DATA VALUE GREATER THAN 1\n   This member was authorized by the linkage editor and the APF value\n   exceeds one.\n\n))PDS024I PAGE ALIGNMENT IS REQUIRED\n   This member requires alignment on a page boundary.\n\n))PDS025I SSI INFORMATION: hexvalue\n   This member has the displayed SSI data.\n\n))PDS026I MOD:mm/dd/yy hh:mm LEV:num BY user EXP:mm/dd/yy READ:mm/dd/yy\n   This message lists PDSMAN/MVS statistics associated with this load\n   member:\n     MOD:  - date and time of last modification\n     LEV:  - modification level number in decimal\n     BY    - updating jobname or TSO userid\n     EXP:  - expiration base date\n     READ: - last date on which member was read\n\n))PDS030I GLOBAL OPERANDS: global1, global2, ...\n   This message lists the current CONTROL global values:\n     ALIASINFO   - alias information is desired for MAP and ATTRIB.\n     NOALIASINFO - no alias information is required.\n     LKEDDATE    - linkage edit dates are desired for ATTRIB.\n     NOLKEDDATE  - no linkage edit date information is required.\n     PROMPT      - yes/no prompts are desired as usual for DELETE,\n                   FIXPDS, RENAME, REPRO, RESTORE and SUBMIT.\n     NOPROMPT    - yes/no prompts are not required for DELETE, FIXPDS,\n                   RENAME, REPRO, RESTORE or SUBMIT (a yes reply is\n                   to be assumed).\n     RECOVER     - ESTAE recovery should be attempted after an ABEND.\n     NORECOVER   - ESTAE recovery should not be attempted.\n     TRANSLATOR  - Translator IDR outputs are required from HISTORY.\n     NOTRANSLATOR- No translator information is required from HISTORY.\n     DSNAME(dsn) - names the data set which is receiving the session\n                   log output; this will be combined with a data set\n                   status such as OLD, NEW, SHR or MOD.\n     NODSNAME    - no session log is being output to a data set.\n     SYSOUT(c)   - names the SYSOUT class which is currently receiving\n                   the session log output; this will be combined with\n                   FORM(form) or NOFORM and DEST(destname) or NODEST.\n     NOSYSOUT    - no session log is being output to a SYSOUT data set.\n\n))PDS031I INPUT BUFFERING: type\n   This message lists the current input buffering mode:\n     BPAM      - Read using a BPAM DCB for PDSE data sets.  BPAM is\n                 forced for a PDSE and a BPAM DCB is used.\n     SINGLE    - Read single (each read obtains one physical block).\n     DOUBLE    - Read double (each read obtains two physical blocks).\n     MULTIPLE  - Read multiple (each read obtains an entire track).\n\n   Note that the buffering type is reset for each data set allocated\n   according to the device type on which the data set resides.  In\n   general, MULTIPLE is used for device types which support the READ\n   MULTIPLE CCW and DOUBLE is used otherwise.\n\n))PDS032I TESTCPULOOP -- CPU LOOP FOLLOWS:\n   CONTROL TESTCPULOOP - performs a CPU loop for program testing.\n\n))PDS033I TESTABEND -- SYSTEM 0C1 FOLLOWS:\n   CONTROL TESTABEND - performs an ABEND for program testing.\n\n))PDS034I TESTOUTLOOP -- THIS DATA REPEATS\n   CONTROL TESTOUTLOOP - performs an output loop for program testing.\n\n))PDS035I TESTREAD -- EXCP RETURN CODE=nn; NEXT TTR ADDRESS IS ttraddr\n   CONTROL TESTREAD -- verifies the operation of the input EXCP routine\n   by using an initial TTR of 000001 in each case.\n\n   EXCP is called for each of the buffering modes:\n     SINGLE    - Read single (each read obtains one physical block).\n                 The return code should be 00 and NEXT TTR ADDRESS\n                 should be 000002 if sufficient data is available.\n     DOUBLE    - Read double (each read obtains two physical blocks).\n                 The return code should be 00 and NEXT TTR ADDRESS\n                 should be 000003 if sufficient data is available.\n     MULTIPLE  - Read multiple (each read obtains an entire track).\n                 If the disk unit supports the READ MULTIPLE CCW, the\n                 return code should be 00 and NEXT TTR ADDRESS\n                 should be 000101 if sufficient data is available.\n\n                 If this disk unit does not support the READ MULTIPLE\n                 CCW, a PDS892E message should be received, the return\n                 code should be 00 and NEXT TTR ADDRESS should be\n                 000003 (double buffering is actually used).\n\n   Return codes from EXCP have the following meanings:\n        RC=00    Successful read\n        RC=04    End of member\n        RC=08    End of data set\n        RC=12    I/O error\n\n))PDS036I LARGEST FREE STORAGE AREA IS nnnK\n   This message displays the size of the largest free storage area\n   fragment in 1024 or K-byte units.\n\n))PDS040I member HAS BEEN DELETED\n   DELETE has completed successfully.\n\n))PDS046I LARGEST AREA ABOVE THE LINE IS nnnM\n   This message displays the size of the largest free storage fragment\n   in 1024K bytes or 1 Megabyte units.\n\n))PDS050I member1 WILL BE MOVED\n   This member will be recreated by REPRO or FIXPDS (FIXPDS moves\n   members which are in the way of the expanded member directory).\n\n  PDS050I member1 WILL BE COPIED TO member2\n   REPRO will copy member1 to member2 as a result of a TO or AS clause.\n\n))PDS051I member IS BEING MOVED\n   REPRO or FIXPDS is currently moving this member.\n\n  PDS051I member IS BEING CREATED\n   REPRO is currently creating the named member.\n\n))PDS060I TRANSLATOR HISTORY BY CSECT -\n  IKJEFT03  9/22/80   5741SC103  V02 M02   9/22/80  C'PLS2020'  V07 M02\n  IEFBR14  11/22/81   5741SC103  V02 M02\n\n   This message is a header for assembler or compiler IDR records:\n     IKJEFT03   - name of the CSECT.\n     9/22/80    - date of the assembly or compilation.\n     5741SC103  - translator identification.\n     V02 M02    - translator version and modification level.\n     9/22/80    - date of PLS compilation.\n     C'PLS2020' - PLS compiler identification.\n     V07 M02    - PLS compiler version and modification level.\n\n))PDS061I AMASPZAP UPDATE HISTORY BY CSECT -\n  IEFBR14       6/14/84    HABLX\n\n   This message is a header for zap IDR records:\n     IEFBR14    - name of the CSECT.\n     6/14/84    - date of the zap.\n     HABLX      - zap user identification (USERID or JOB name).\n\n))PDS062I USER-SUPPLIED UPDATE HISTORY BY CSECT -\n  IEFBR14      11/29/81    UZ54057\n\n   This message is a header for user-supplied IDR records:\n     IEFBR14     - name of the CSECT.\n     11/29/81    - date of the information.\n     UZ54057     - user-supplied IDR information.\n\n))PDS064I LAST LINK-EDITED ON mm/dd/yy  BY LKED lkedname  Vnn Mmm\n                           AT hh:mm:ss\n   This message displays the last linkage edit date, linkage\n   editor identification information, and linkage edit time.\n     mm/dd/yy    - date of the last linkage edit\n     lkedname    - the translator code for the linkage editor\n     Vnn         - the linkage editor version number\n     Mmm         - the linkage editor modification level\n     hh:mm:ss    - time of the last linkage edit\n\n   ATTRIB program objects:\n     lkedname    - J=jobname (name of linkedit job)\n     Vnn         - Program Object (PO) version number\n     Mmm         - Binder API level\n\n))PDS065I MAIN MEMBER NAME UPDATED FOR MEMBER: member\n   This message is issued when a main member is renamed and the\n   identified alias member's directory entry is updated to point\n   to the renamed member.\n\n))PDS066I MEMBER IS AN ALIAS FOR: member\n   This member is an alias; the main member is identified.\n\n))PDS069I GLOBAL VARIABLES:\n   This message is a header for the CONTROL GLOBALMODS and\n   CONTROL ALLGLOBALS subcommands.\n\n))PDS070I MODIFICATION HISTORY:\n   This message is a header for the CONTROL MODS subcommand.\n\n))PDS071I THE FOLLOWING OPTIONS ARE AVAILABLE:\n   This message is a header for the list of available subcommands.\n\n))PDS080I filename DCB IS CLOSED\n   FILE(PDSOUT) or the session copy data set has been closed.\n\n))PDS090I mem1 HAS BEEN RENAMED TO mem2\n   RENAME has completed successfully; mem1 is now known as mem2.\n\n))PDS091I member HAS BEEN RESTORED\n   RESTORE has completed successfully.\n\n))PDS092I AMODE/RMODE INFORMATION UPDATED FOR MEMBER: member\n   This message is provided when an alias member's directory entry is\n   updated with AMODE/RMODE values in support of an ATTRIB subcommand\n   which modifies the AMODE (addressing mode) or RMODE (residence\n   mode) of a main member.  The directory entry of each alias entry\n   must be updated to reflect the new AMODE/RMODE of the main member\n   name.  The PDS092I message is issued as each alias of the main\n   member is being updated.  AMODE operands affect the module's\n   addressing mode and the RMODE operands control the module's\n   residence mode (above or below the 16 Megabyte line).\n\n))PDS096I DASD GEOMETRY:\n   This message is a header for the CONTROL GEO subcommand.\n\n))PDS097I TSO USERS: count\n   This message is a header for the CONTROL TSO subcommand.\n\n))PDS100I pdsname -- VERSION 8.6.uu.rr  month dd, yyyy  MVSLEV=mvslev\n   This message displays the name and release level of the -PDS86-\n   program; displays the last -PDS86- maintenance date; and displays\n   the MVS OS Level (&MVSLEV global); this message should be\n   received at program initialization and as the first message\n   from the CONTROL subcommand.\n\n   <major version>.<minor version>.<update number>.<revision>\n\n   mvslev:\n\n   MVS038 for MVS 3.8\n   MVS12X for MVS SP 1.2, 1.1 or any SE system\n   MVS13X for MVS SP 1.3\n   MVS220 for MVS/XA  2.2.0\n   MVS310 for MVS/ESA 3.1.0\n   MVS410 for MVS/ESA 4.1.0\n   MVS510 for MVS/ESA 5.1.0\n   MVS6XX for OS/390\n   MVS704 for Z/OS 1.4\n   MVS709 for Z/OS 1.9\n   MVS710 for Z/OS 1.10\n   MVS711 for Z/OS 1.11\n   MVS713 for Z/OS 1.13\n   MVS721 for Z/OS 2.1\n   MVS722 for Z/OS 2.2\n   MVS723 for Z/OS 2.3\n\n))PDS101I DELETED MEMBER FOUND AT TTR: hexttr\n   A previously deleted member was found at the displayed TTR address.\n\n))PDS102I ENTRY POINT AT hexaddress\n   The entry offset of the module is displayed in hexadecimal.\n\n))PDS103I ENTRY POINT AT hexaddress --  symbol\n   The entry offset of the module is displayed in hexadecimal and the\n   name of the corresponding entry point symbol is also displayed.\n\n))PDS104I MODULE LENGTH  hexlength  --  decimalK\n   The length of the module is provided in hexadecimal and in K\n   units (units of 1024 bytes using the next higher boundary of 1024).\n\n))PDS106I DATE FORMAT: USA (MM/DD/YY) or\n                       ISO (YY/MM/DD)\n   This message displays the date format that -PDS86- will use;\n   this message should be received as the second message from the\n   CONTROL subcommand.\n\n))PDS107I LAST ASSEMBLED: PDSMAIN  8.6.uu.rr  yyyy-mm-dd  hh.mm\n   This message displays the date/time stamp of the PDSMAIN assembly;\n   this message should be received as the third message from the\n   CONTROL subcommand.\n\n))PDS108I nn,nnn CHARACTERS PER AVERAGE VARIABLE LENGTH RECORD\n   This is the average record size read for variable length records\n   (including the RDW field).\n\n))PDS109I nn,nnn CHARACTERS IN THE LARGEST VARIABLE LENGTH RECORD\n   This is the maximum record size read for variable length records\n   (including the RDW field).\n\n   Note: for RECFM=VS, this is the largest spanned record segment.\n\n))PDS110I nn,nnn LOGICAL RECORDS WERE INPUT\n   This is a count of the logical input records.\n\n))PDS111I nn,nnn PHYSICAL BLOCKS WERE INPUT\n   This is a count of the physical input records.\n\n))PDS112I nn,nnn CHARACTERS IN THE LARGEST PHYSICAL BLOCK\n   This is the maximum physical blocksize read.\n\n))PDS113I nn,nnn CHARACTERS PER AVERAGE PHYSICAL BLOCK\n   This average is from (total characters read)/(total blocks read).\n\n))PDS114I nn,nnn TRACKS COULD BE REGAINED BY COMPRESSING THIS DATA SET\n   The number of tracks indicated contain deleted members; if a\n   compress is performed on the data set, these tracks should become\n   available for use.\n\n))PDS115I nn,nnn MEMBERS WERE CHECKED\n   This message indicates the number of members in the data set.\n\n))PDS116I DATA SET WAS CHECKED\n   This message indicates that the data set was checked by VERIFY.\n   The data set is sequential and either NOINPUT was specified or\n   it is a null data set with no records.\n\n))PDS117I nnnn MEMBERS COUNTED; CUMULATIVE SIZE IS nnnn RECORDS\n   This message provides the number and size of members processed.\n   This message is issued for non-load members to document the\n   cumulative size of non-alias members with ISPF statistics.\n\n   The output from ATTRIB and VERIFY differ in that VERIFY will\n   include statistics for an alias member if the member does not\n   have an associated real member.  In addition, if VERIFY READ\n   is requested, statistics are accumulated for members according\n   to their actual size (not dependent on ISPF statistics).\n\n))PDS118I nnnn MEMBERS RMODE24; SIZE IS nnnnK\n   This message provides the number and size of RMODE 24 members.\n   This message is issued for load members to document the\n   cumulative size of non-alias members below the 16 MEG line.\n\n   The output from ATTRIB and VERIFY differ in that VERIFY will\n   include statistics for an alias member if the member does not\n   have an associated real member.\n\n))PDS119I nnnn MEMBERS RMODEANY; SIZE IS nnnnK\n   This message provides the number and size of RMODE ANY members.\n   This message is issued for load members to document the\n   cumulative size of non-alias members above the 16 MEG line.\n\n   The output from ATTRIB and VERIFY differ in that VERIFY will\n   include statistics for an alias member if the member does not\n   have an associated real member.\n\n))PDS120I PROGRAM RESIDENCE MODE IS rmode -- ADDRESSING MODE IS amode\n   This message indicates the RMODE and AMODE values of the module:\n     rmode:\n       24  - residence mode is 24  (below the 16M line)\n       ANY - residence mode is ANY (below/above the 16M line)\n       64  - residence mode is 64  (above the 2G bar)\n     amode:\n       24  - addressing mode is 24 bit addresses\n       31  - addressing mode is 31 bit addresses\n       64  - addressing mode is 64 bit addresses\n       ANY - addressing mode is 24 or 31 bit addresses\n\n))PDS121I nn,nnn SPANNED RECORD SEGMENTS WERE INPUT\n   This is a count of the spanned record segments for RECFM=VS.\n\n))PDS140I BLOCK  RECORD nn,nnn  LENGTH nn,nnn  TTR hexttr\n       or DUMP   RECORD nn,nnn  LENGTH nn,nnn  TTR hexttr\n   This is a header for BLOCK or DUMP format LIST, FIND and REPLACE\n   outputs:\n     RECORD   - the current physical record number\n     LENGTH   - the length of the current physical record\n     TTR      - the disk address of this record in hexadecimal\n\n))PDS141I AT hexaddr  CSECT csectname  LENGTH hexlen\n                                   or  ENTRY entryname\n   This is a header for LBLOCK or LDUMP format LIST, FIND and REPLACE\n   outputs for a CSECT or for an entry within a CSECT in a load module:\n     AT       - start of this CSECT in the load module\n     CSECT    - the name of this CSECT\n     LENGTH   - the length of this CSECT\n     ENTRY    - the name of this entry (note: if the ENTRY form is\n                used, AT displays the start of this ENTRY symbol).\n\n))PDS142I nn,nnn LINES  IN THIS MEMBER\n              or BLOCKS IN THIS MEMBER\n   Note: this message means that an end of file marker has been\n   recognized; it also summarizes the amount of data input -\n     LINES    - number of logical records read\n     BLOCKS   - number of physical records read\n\n))PDS143I member DIRECTORY ENTRY, LENGTH=nn\n   This is a header for a dump of the member's directory entry.\n\n))PDS144I DATA LINE n:\n   This is a header for a display of one line from a formerly\n   deleted member.\n\n))PDS145I nn,nnn BLOCKS UPDATED\n   This message displays the number of physical records updated for\n   this member or data set.\n\n))PDS160I ALIASES FOR THIS MEMBER ARE: alias1, alias2, ...\n   This message displays the aliases associated with this main member.\n\n))PDS161I MEMBERS TO BE RENAMED ARE: member1, member2, ...\n   This message displays the group of members which will be\n   renamed if a \"y\" is provided to the next prompt.\n\n))PDS162I MEMBERS TO BE DELETED ARE: member1, member2, ...\n   This message displays the group of members which will be\n   deleted if a \"y\" is provided to the next prompt.\n\n))PDS163I ASSOCIATED MEMBERS TO BE DELETED ARE: member1, member2, ...\n   This message displays the associated (alias, apparent alias and\n   main) members which will also be deleted if a \"y\" is provided\n   to the next prompt.\n\n))PDS164I CSECTS ARE: csect1, csect2, ...\n   This message displays the CSECT names found in this previously\n   deleted member.\n\n))PDS165I MEMBERS ARE: member1, member2, ...\n   This message displays the current member group and checks to\n   ensure all members are present in the data set.\n\n))PDS171I operation HAS COMPLETED; RC=nnn ABEND=Snnn Unnnn\n   The operation has finished with the indicated\n   return code.  This is issued for the following\n   subcommands when the return code is non-zero.\n\n   AMBLIST, COBANAL, COMPRESS, COPY, CPKMAP, DELINK, DISASM,\n   LMA, LOAD, MATCH, MXIBAT, OFFLOAD, PTSEXP, SRCHFOR,\n   XMIT and VPDSE.\n\n   Note: IKJEFTSR sets the return code to -1 or 255 before\n   invoking the subcommand program.  In some cases, if the\n   program does not complete normally, RC=255 is reported\n   in message PDS171I.\n\n))PDS180I DATA SET: CREATED  EXPIRES  LAST USE  UPDATED SECURITY\n  PDS180I          mm/dd/yy mm/dd/yy  mm/dd/yy  yes/no  type\n\n   This message lists various data set characteristics:\n     CREATED  -  data set creation date.\n     EXPIRES  -  data set expiration date.\n     LAST USE -  last data set open date.\n     UPDATED  -  YES if data set has been opened for output or update.\n                 NO if all opens have been for input.\n     SECURITY -  NONE if no data set password security bit is set.\n                 WRITE if the data set is protected from output use.\n                 READ if the data set is protected from input use.\n                 RACF if the data set RACF bit is on.\n -----\n For systems with CA-ASM2, the following changes apply:\n PDS180I DATA SET: CREATED  EXPIRES  LAST USE  UPDATED  SECURITY ASM2ID\n PDS180I          mm/dd/yy mm/dd/yy  mm/dd/yy  mm/dd/yy type     userid\n     UPDATED  -  last date of data set update.\n     ASM2ID   -  last update user\n -----\n For systems with DMS/OS, the following changes apply:\n PDS180I DATA SET: CREATED  EXPIRES  LAST USE UPDATED  LASTUSE FIRSTUSE\n PDS180I          mm/dd/yy mm/dd/yy  mm/dd/yy mm/dd/yy userid  userid\n     UPDATED  -  last date of data set update.\n     LASTUSE  -  last user of this data set\n     FIRSTUSE -  job which first used this data set\n -----\n For systems with FDR/ABR, the following changes apply:\n PDS180I DATA SET: CREATED  EXPIRES  LAST USE UPDATED BACK# OLD ABRFLAG\n PDS180I          mm/dd/yy mm/dd/yy  mm/dd/yy yes/no    ### yes flag\n     BACK#    -  current backup number or \"NONE\" if none are available.\n     OLD      -  YES if an old backup is available; otherwise NO.\n     ABRFLAG  -  any one of the following values (see documentation\n                 for the FDRABRM program):\n                 NOABR  -- from OPTIONS=EX  (Exclude from ABR)\n                 NOARCH -- from OPTIONS=ND  (Normal backup/no archive)\n                 ALWAYS -- from OPTIONS=AD  (Always backup/no archive)\n                 ARCHIV -- from ARCH=ON     (Archive this data set)\n\n))PDS181I EXTENTS IN TRACKS: nnn, nnn, ...\n   This message lists the size of each data set extent in tracks.\n\n))PDS182I TRACKS: ALLOCATED  USED  FREE  EXTENTS\n  PDS182I              nnnn  nnnn  nnnn     nnnn\n\n   This message lists disk allocation characteristics:\n     ALLOCATED - number of allocated disk tracks.\n     USED      - number of in-use disk tracks.\n     FREE      - number of free disk tracks.\n     EXTENTS   - number of disk storage extents.\n\n))PDS183I DIRECTORY: BLOCKS  USED  FREE  TRACKS  MEMBERS  ALIASES\n  PDS183I              nnnn  nnnn  nnnn    nnnn     nnnn     nnnn\n\n   This message lists directory statistics:\n     BLOCKS    - number of allocated directory blocks.\n     USED      - number of in-use directory blocks.\n     FREE      - number of free directory blocks.\n     TRACKS    - number of tracks occupied by directory blocks.\n     MEMBERS   - number of members in the data set.\n     ALIASES   - number of aliases in the data set.\n\n))PDS184I EXTENT UCB LO TT-HI TT TRKS     LOW CCHH-HIGH CCHH   BOUNDARY\n  PDS184I ------ --- ----- ----- ----  ----------- ----------- --------\n  PDS184I     nn ccc tt.tt tt.tt  nnn  cc.cc.hh.hh cc.cc.hh.hh type\n  PDS184I    ...\n\n   This message lists data from each extent of the data set:\n     EXTENT    - number of this extent.\n     UCB       - UCB for this extent.\n     LO TT     - TT (of TTR) address for the first track in this extent.\n     HI TT     - TT (of TTR) address for the last track in this extent.\n     TRACKS    - number of disk tracks in this extent.\n     LOW CCHH  - CCHH address of the first track of this extent.\n     HIGH CCHH - CCHH address of the last track of this extent.\n     BOUNDARY  - CYL if the extent is on a cylinder boundary.\n                 TRK if the extent is not on a cylinder boundary.\n\n))PDS184I PDSE SPACE:    USED PAGES     %UTILIZED\n  PDS184I             n,nnn,nnn,nnn           nnn\n\n   This message lists space utilization for a PDSE data set:\n     USED PAGES - number of pages used.\n     %UTILIZED  - percent of space used.\n\n))PDS185I FORMAT 1 DSCB:\n  PDS185I 0   4   8   C  10  14  18  1C  20  24  28  2C  30   ...\n  PDS185I LELBR01.LIB.PDS85                           1SJ0003 ...\n  PDS185I DCDCDFF4DCC4DCEFF444444444444444444444444444FEDFFFF ...\n  PDS185I 3532901B392B742850000000000000000000000000001121003 ...\n\n   This message outputs the Format 1 DSCB in a combined character and\n   hexadecimal over/under display.  The display requires two over/under\n   displays to output the entire 140 bytes of the Format 1 DSCB.\n\n   The above sample shows an allocated data set of \"LELBR01.LIB.PDS85\"\n   which resides on DASD volume \"SJ0003\".\n\n   Note: the second output line for PDS185I is a hexadecimal column\n   header.  These columns are 0-origin as used by the debugging\n   handbook.  For example, hex column 2C has value X'F1' and it is\n   documented under topic DSCB1 for hexadecimal offset 2C.\n\n))PDS186I LOC NAME     VALUE       DESCRIPTION\n  PDS186I --- ----     -----       -----------\n  PDS186I off dname    dvalue      dnotes\n\n   This message documents the Format 1 DSCB for the allocated data set:\n     off      - hexadecimal offset.\n     dname    - the name of this field from the debugging handbook\n                from the entries for \"DSCB1\".\n     dvalue   - character, decimal or hexadecimal representation\n                of the data from the DSCB.\n                1.  character data is provided for DS1DSNAM, DS1DSSN,\n                    and DS1SYSCD; however, if the DS1DSSN or DS1SYSCD\n                    fields have non-character data, these fields are\n                    are dumped using hexadecimal instead.\n                2.  decimal data is followed by a period.\n                3.  the remaining displays are hexadecimal.\n     dnotes   - an interpretation of the displayed data.\n     Note: the DS1EXT1, DS1EXT2 and DS1EXT3 fields are displayed in\n     hexadecimal with periods between each of the CCHH subfields.\n\n))PDS190I AN ALIAS NAMED member IS ALREADY AT THIS TTR\n   The identified alias member resides at this location -- RESTORE\n   will continue if only alias members are found at this TTR address.\n\n))PDS191I STORAGE CLASS  MGMT CLASS  DATA CLASS  DSNTYPE\n  PDS191I sclass         mclass      dclass      PDS/LIBRARY\n\n   This USAGE message provides feedback on SMS managed data sets\n   showing their STORCLAS, MGMTCLAS, DATACLAS and DSNTYPE for a\n   PDS (identified by PDS) or a PDSE (identified by LIBRARY).\n\n))PDS192I PDSE FORMAT:      VERSION       MAXGENS\n  PDS192I                         n    nnnnnnnnnn\n\n   This message lists the format of a PDSE data set:\n     VERSION -  version number.\n     MAXGENS -  maximum number of member generations for DSN.\n\n))PDS193I THIS GROUP CONTAINS nn,nnn MEMBERS\n   This message shows the number of members in the current member\n   group displayed by this subcommand.\n\n))PDS194I CONCATENATION n OF m\n   This message is provided as feedback when file allocation is\n   performed to provide the current NUM(n) operand and the maximum\n   NUM(m) operand.\n\n))PDS195I ISPLOG SUBCOMMAND MONITORING IS state\n   This message shows the the ON/OFF state of subcommand monitoring\n   to ISPLOG.  The state is set by the CONTROL ISPMODE toggle.\n\n))PDS196I MEMBER NAME VALIDATION IS state\n   This message shows the the ON/OFF state of member name validation\n   for ISPF EDIT/BROWSE.  The state is set by the CONTROL MBRVAL toggle.\n\n))PDS197I MEMLIST RESET IS state\n   This message shows the the ON/OFF state of adding RESET to all\n   MEMLIST commands.  The state is set by the CONTROL RESET toggle.\n\n))PDS198I COPY, RENAME, AND REPRO DO NOT PRESERVE PDSE V2\n          MEMBER GENERATIONS\n   This message is provided as feedback when a PDSE Version 2 with\n   member generations is opened.\n\n))PDS199I LARGEST FREE AREA ON VOLUME volser IS nnnnnnn CYLINDERS\n   This message is provided as feedback when a FIXPDS ADDCYL(nnnnn)\n   or ADDTRK(nnnnn) subcommand is issued.  This message is to help\n   avoid space related abends.\n\n))PDS200I DSP UNIT RECFM LRECL BLKSZ ALLOCTRK FREETRK SECONDARY FREEDIR\n  PDS200I SHR 3380 FB       80  6320 3X   150      42     1 CYL      22\n\n   This message documents the current allocation; this format can be\n   specifically requested by entering: DSNAME MSG\n     DISP      - SHR or OLD disposition.\n     UNIT      - disk unit device type.\n     RECFM     - the record format from the DCB.\n     LRECL     - the logical record length from the DCB.\n     BLKSIZE   - the blocksize from the DCB.\n     ALLOCTRK  - the number of disk extents allocated (example: 3X)\n                 and the total space allocated in tracks.\n     FREETRK   - the number of available disk tracks.\n     SECONDARY - secondary allocation size and type (CYL or TRK) units.\n     FREEDIR   - if a PDS, the number of available directory blocks.\n                 if a PDSE, the keyword \"NOLIMIT\".\n     DSORG     - if not DSORG=PO, the actual DSORG from the DCB.\n                 if a PDSE, the keyword \"PO-E\".\n\n))PDS210I ALLOC F(SYS00001) DA('datasetname') disp UNIT(3380) -\n  PDS210I   RECFM(F B) LRECL(80) BLKSIZE(6320) VOLUME(TSO003) -\n  PDS210I   type SPACE(tot,sec) DIR(mm)     /*FREE TRK=42,FREE DIR=22*/\n\n   This message documents the current allocation; this format can be\n   specifically requested by entering: DSNAME TSO\n     F(SYS...   - this is the current DDNAME.\n     DA(        - this is the data set name.\n     disp       - SHR or OLD disposition.\n     UNIT(      - disk unit device type.\n     RECFM(     - the record format from the DCB.\n     LRECL(     - the logical record length from the DCB.\n     BLKSIZE(   - the blocksize from the DCB.\n     DSORG(     - if not DSORG=PO, the actual DSORG from the DCB.\n     VOLUME(    - the volume name.\n     type       - CYLinder or TRAck allocation.\n     SPACE(     - tot is the total space allocated in \"type\" units.\n                  sec is the secondary allocation size in \"type\" units.\n     DIR(mm)    - if DSORG=PO, mm is the number of directory blocks.\n     FREE TRK=  - the number of available disk tracks.\n     FREE DIR=  - if DSORG=PO, the number of available directory blocks\n\n))PDS220I //SYS00001  DD  DSN=datasetname,DISP=SHR,UNIT=3380,\n  PDS220I //  DCB=(RECFM=FB,LRECL=80,BLKSIZE=6320),VOL=SER=TSO003,\n  PDS220I //  SPACE=(type,(tot,sec,mm))     /*FREE TRK=42,FREE DIR=22*/\n\n   This message documents the current allocation; this format can be\n   specifically requested by entering: DSNAME JCL\n     //SYS..    - this is the current DDNAME.\n     DSN=       - this is the data set name.\n     DISP=      - SHR or OLD disposition.\n     UNIT=      - disk unit device type.\n     RECFM=     - the record format from the DCB.\n     LRECL=     - the logical record length from the DCB.\n     BLKSIZE=   - the blocksize from the DCB.\n     DSORG=     - if not DSORG=PO, the actual DSORG from the DCB.\n     VOLUME=    - the volume name.\n     SPACE=     - type is CYL or TRK allocation.\n                  tot is the total space allocated in \"type\" units.\n                  sec is the secondary allocation size in \"type\" units.\n                  if DSORG=PO, mm is the number or directory blocks.\n     FREE TRK=  - the number of available disk tracks.\n     FREE DIR=  - if DSORG=PO, the number of available directory blocks\n\n))PDS230I MEMBER      VER.MOD  CREATED   LAST MODIFIED  SIZE  INIT  MOD\n  PDS230I  RESCPY      01.01  82/06/14  82/11/29 15:37    12    11   11\n  PDS230I  RESCOMP     SSI: hexvalue\n  PDS230I  RESCOMPL-A\n\n   This message displays directory information for a member (ISPF\n   statistics, SSI information and alias indicators):\n     MEMBER     - the member name.\n     -A         - indicates that this member is an alias.\n     VER.MOD    - if saved by ISPF, version and mod numbers.\n                  if SSI:, the SSI data from the directory.\n     CREATED    - creation date in yy/mm/dd format.\n     LAST       - last modification date in yy/mm/dd format.\n     MODIFIED   - last modification time in hh:mm format.\n     SIZE       - number of records in the member currently.\n     INIT       - number of records in the member initially.\n     MOD        - number of changed records in the member.\n     ID         - identifier of the user who last updated this member.\n\n))PDS231I MEMBER      VER.MOD  CREATED   LAST MODIFIED     SIZE     INIT\n  PDS231I  AL99    -A  01.00  09/09/09  09/09/09 12:05    99999    65535\n  PDS231I  NINENINE    01.00  09/09/09  09/09/09 12:05    99999    65535\n  PDS231I  RESCOMP     SSI: hexvalue\n\n   This message displays directory information for a member (ISPF\n   statistics, SSI information and alias indicators):\n     MEMBER     - the member name.\n     -A         - indicates that this member is an alias.\n     VER.MOD    - if saved by ISPF, version and mod numbers.\n                  if SSI:, the SSI data from the directory.\n     CREATED    - creation date in yy/mm/dd format.\n     LAST       - last modification date in yy/mm/dd format.\n     MODIFIED   - last modification time in hh:mm format.\n     SIZE       - number of records in the member currently.\n                  if extended ISPF statistics:, 99,999,999 max.\n     INIT       - number of records in the member initially.\n                  if extended ISPF statistics:, 99,999,999 max.\n     ID         - identifier of the user who last updated this member.\n\n))PDS232I NAME     ALIASOF   CREATED  SIZE SSI     ATTRIBUTES\n  PDS232I modname  alname   lkeddate dsize hexssi  attribs\n\n   This message displays short form module information for load\n   modules.  Note: if this format message is requested, many standard\n   module checks are not performed and an incorrectly created or\n   modified load module will not be detected.\n\n     modname  -  the member name.\n     alname   -  if the module is an alias, this field will display\n                 the real member name (if not found, ?UNKNOWN).\n     lkeddate -  creation date in yy/mm/dd format.\n     dsize    -  the module size in decimal if less than 100,000 bytes;\n                 otherwise it is rounded to the next higher K value.\n     hexssi   -  SSI data in hexadecimal.\n     attribs  -  attributes for this module from the set:\n                 A24       - addressing mode 24\n                 A31       - addressing mode 31\n                 A64       - addressing mode 64\n                 AANY      - addressing mode any\n                 R24       - residence mode 24\n                 RANY      - residence mode any\n                 PAGE      - page alignment\n                 AC=1      - APF authorized\n                 OVERLAY   - overlay\n                 TEST      - test\n                 E-LEVEL   - not linked by the \"F\" level linkage editor\n                 SCTR      - scatter\n                 RENT      - reentrant\n                 REUS      - reusable\n                 REFR      - refreshable\n                 LOAD ONLY - LOAD use only\n                 NOT EDIT  - not editable\n                 NOT EXEC  - not executable\n                 DC        - downward compatible\n                 NONE      - none of the above\n\n))PDS240I 'string' WAS NOT FOUND\n   This FIND or REPLACE subcommand did not locate a matching character\n   string in any of the members searched.\n\n   Note: if FIND with THEN(SUBLIST) or ELSE(SUBLIST) was entered, the\n   default member group is nullified.  You will have to explicitly\n   respecify the member group to establish a new default member group.\n\n))PDS241I NO MATCHING DATA WAS FOUND\n   This FIND or REPLACE subcommand did not locate a matching character\n   string in any of the members searched.\n\n   Note: if FIND with THEN(SUBLIST) or ELSE(SUBLIST) was entered, the\n   default member group is nullified.  You will have to explicitly\n   respecify the member group to establish a new default member group.\n\n))PDS242I NO MATCHING EXTERNAL SYMBOLS WERE FOUND\n   This MAP subcommand did not locate any matching MODULE names\n   in any of the members searched.\n\n))PDS243I NO MATCHING HISTORY DATA WAS FOUND\n   This HISTORY subcommand did not locate any matching HISTORY\n   information in the members searched.\n\n))PDS245I NO MATCHING MEMBERS WERE FOUND\n   This COPY subcommand did not locate any members which existed or\n   did not exist (depending on EXIST/NOEXIST) in the output data set.\n\n))PDS246I NOWRITE IS IN EFFECT; NO UPDATES WILL BE PERFORMED\n   This REPLACE subcommand will not actually update any data; the WRITE\n   or UPDATE keyword was not explicitly specified.  If you want to\n   actually update the data, reenter the REPLACE subcommand and add the\n   WRITE or UPDATE keyword.\n\n))PDS247I PDS DETERMINED BLOCKSIZE WILL BE USED\n   FIXPDS BLKSIZE(99999) was specified and PDS will determine the\n   blocksize for RECFM=F and V.  This results in half-track blocking.\n\n))PDS250I CSECT VER COUNT FLOW STATE TEST TRACE RES ENDJOB SYMD OBJ OPT\n  PDS250I ----- --- ----- ---- ----- ---- ----- --- ------ ---- --- ---\n  PDS250I name  VS  COUNT FLOW STATE TEST TRACE RES ENDJOB SYMD 370 xxx\n  PDS250I ...\n\n   This message documents several COBOL compiler options in effect\n   when this CSECT was compiled:\n     CSECT    - CSECT name\n     VER      - Compiler version (\"VS\" for VS COBOL or \"V4\" for COBOL\n                Version 4); for \"VS\", column 20 will be overlaid\n                with LANGLVL (1 or 2).\n     COUNT    - Count option\n     FLOW     - Flow option\n     STATE    - State option\n     TEST     - Test option\n     TRACE    - Trace option\n     RES      - Res option\n     ENDJOB   - Endjob option\n     SYMD     - Symdump option\n     OBJ      - 370 if OBJ370 was specified in the program\n     OPTIMIZE - COBOL if optimized by the COBOL compiler\n                CAPEX if optimized by the CAPEX product\n                CAP/DTECT if the CAPEX DTECT option was used\n                CA-OPT if optimized by the CA-OPTIMIZER product\n                OPT/DTECT if the CA-OPTIMIZER DTECT option was used\n\n))PDS260I CSECT VER TEST SSR OPT TIME  ZWB NU TRUNC RES RENT DYNAM DATA\n  PDS260I ----- --- ---- --- --- ----- --- -- ----- --- ---- ----- ----\n  PDS260I name  C2  TEST SSR OPT FDUMP ZWB PF TRUNC RES RENT DYNAM 31\n  PDS260I name  Evr TEST SSR OPT hh:mm ZWB MG (OPT) RES RENT DYNAM 31\n  PDS260I ...\n\n   This message documents several COBOL II (C2) and\n   COBOL MVS (E1r), COBOL OS/390 (E2r), Enterprise COBOL z/OS (E\u00dd3-6\u00a8r)\n   compiler options in effect when this CSECT was compiled:\n     CSECT    - CSECT name\n     VER      - Version of the compiler (C2 or Evr),\n                where v=version and r=release of LE-compliant COBOL\n     TEST     - Test option\n     SSRANGE  - Subscript range option\n                If NOSSRANGE, yymmdd date of compile (Evr only)\n     OPT      - Opt option\n     TIME     - hh:mm time of compile (Evr only)\n                FDUMP option (C2 only)\n     ZWB      - ZWB option\n     NUMPROC  - NUMPROC option (\"NOPFD\", \"(MIG)\" or \"(PFD)\")\n     TRUNC    - TRUNC option (\"(OPT)\", \"(STD)\" or \"(BIN)\")\n     RES      - Res option\n     RENT     - Rent option\n     DYNAM    - Dynam option\n     DATA     - 31 if DATA 31; blank if DATA 24\n\n     Signature information bytes for compiler options\n     from COBOL Programming Guide.\n     ----------\n     8000000000 - ADV\n     4000000000 - APOST\n     2000000000 - DATA(31), DATA(24) otherwise\n     1000000000 - DECK\n     0800000000 - DUMP\n     0400000000 - DYNAM\n     0200000000 - FASTSRT\n     0100000000 - FDUMP (COBOL II only); SQLIMS (eCOBOL V5 and above)\n     0080000000 - LIB\n     0040000000 - LIST\n     0020000000 - MAP\n     0010000000 - NUMBER\n     0008000000 - OBJECT\n     0004000000 - OFFSET\n     0002000000 - OPTIMIZE\n     0001000000 - OUTDD specified\n     0000800000 - NUMPROC(PFD)\n     0000400000 - RENT\n     0000200000 - RESIDENT (COBOL II only; set on otherwise)\n     0000100000 - SEQUENCE\n     0000080000 - SIZE(MAX) (COBOL II only; reserved otherwise)\n     0000040000 - SOURCE\n     0000020000 - SSRANGE\n     0000010000 - TERMINAL\n     0000008000 - TEST\n     0000004000 - TRUNC(STD)\n     0000002000 - WORD\n     0000001000 - VBREF\n     0000000800 - XREF\n     0000000400 - ZWB\n     0000000200 - NAME\n     0000000100 - CMPR2 (eCOBOL V3 and below; set off otherwise)\n     0000000080 - NUMPROC(MIG) (eCOBOL V4 and below; reserved otherwise)\n     0000000040 - NUMCLAS(ALT)\n     0000000020 - DBCS\n     0000000010 - AWO\n     0000000008 - TRUNC(BIN)\n     0000000004 - ADATA (eCOBOL V5 and above)\n     0000000002 - CURRENCY\n     0000000001 - compilation unit is a CLASS\n     0000000000 - TRUNC(OPT) - assumed value if not STD or BIN\n     0000000000 - NUMPROC(NOPFD) - assumed value if not PFD or MIG\n\n))PDS261I PROGRAM TERMINATED BY CONDEND FOR MESSAGE PDSxxxx\n\n   This message indicates that CONDEND was satisfied by the displayed\n   message number and -PDS86- will terminate without executing any\n   additional subcommands.\n\n))PDS262I LOC NAME     VALUE    DESCRIPTION\n  PDS262I --- ----     -----    -----------\n  PDS262I off dname    dvalue   dnotes\n\n   This message documents an individual directory entry:\n     off      - hexadecimal offset.\n     dname    - the name of this field from the debugging handbook.\n                Names beginning MAN.. are for PDSMAN/MVS statistics.\n     dvalue   - character, decimal or hexadecimal representation\n                of the data from the directory entry.\n                1.  character data is provided for PDS2NAME and PDS2MNM\n                2.  decimal data is followed by a period or K.\n                3.  the remaining displays are hexadecimal.\n     dnotes   - an interpretation of the displayed data.\n\n))PDS273I OUTPUT DATA SET IS dsname\n   The default output data set name for IEBCOPY is displayed by this\n   message.  This data set name was substituted for the * in the data\n   set name position of the COPY subcommand.\n\n))PDS276I A ZAP IDR RECORD WAS ADDED\n   This message is generated by the REPRO subcommand if it adds\n   a ZAP IDR record to a load member due to an ADDZAP keyword.\n\n))PDS277I RESTORE FIND STRING TRUNCATED TO 32 CHARACTERS\n   At most 32 characters may be used for a search string.\n\n))PDS280I OS NAME: osname vv.rr.mm   SMF ID: sid\n   This LISTENV message displays the OS product name, version, release,\n   modification level, and SMF system identifier.\n\n))PDS281I SCP PRODUCT LEVEL: SPn.n.n HBBnnnn\n   This LISTENV message displays the system control program product\n   level.\n\n))PDS282I CPC NODE:  Type.Model.Manufacturer.Plant.Sequence Number\n   This LISTENV message displays the Central Processing Complex Node\n   Descriptor.\n\n))PDS283I SU/SECOND:   nnnnn.th   TOTAL MIPS:    nnnn.th\n   This LISTENV message displays the service units per SRM CPU\n   second and the estimated total MIPS for all online CPU's\n   ((SU/SEC / 48.5) * #CPU's).\n\n))PDS284I CPU MODEL:  xxxx   ONLINE CPUS:  nn\n   This LISTENV message displays the CPU model and the number of\n   CPU's currently online.\n\n))PDS285I REAL STORAGE: nnnnnnnMB   EXPANDED STORAGE: nnnnnMB\n   This LISTENV message displays the amount of real and expanded\n   storage.\n\n))PDS286I PROCESSOR NAME: procname  LPAR NAME: lparname\n   This LISTENV message displays the names of the processor and\n   LPAR.\n\n))PDS287I ARCHITECTURE LEVEL: archlvl\n   This LISTENV message displays the architecture level.\n     1   ESA/390\n     2   Z/ARCH\n\n))PDS288I CPU SERIAL: serial   VERSION CODE: ver\n   This LISTENV message displays the CPU serial number and version\n   code.\n\n))PDS289I SECURITY SYSTEM: system   JOB ENTRY SYSTEM: jes\n   This LISTENV message displays the security system\n     ACF2 - CA-Access Control Facility\n     RACF - IBM Resource Access Control Facility\n     TSS  - CA-Top Secret System\n     DBLT - DEADBOLT\n     PIES - PIES Access Control System\n     NONE - No security system\n   and job entry system in use.\n\n))PDS290I IPL TIME: hh.mm.ss AM/PM   day-of-week mon dd, yyyy\n   This LISTENV message shows the time and date of the last IPL.\n\n))PDS291I SYSPLEX NAME: plexname  SYSPLEX ID: plexid\n   This LISTENV message displays the name and id of the SYSPLEX.\n\n))PDS292I SYSTEM NAME: sysname\n   This LISTENV message displays the system name from the CVT\n\n))PDS300A ENTER OPTION -- DSN=dsname,VOL=SER=volume  MEM=groupname\n   The current data set name, the associated disk volume name and the\n   current member group name are displayed in this subcommand prompt.\n\n))PDS380A REENTER THE SEARCH STRING WITH DELIMITERS:\n   Due to a previously noted error condition, the search string is not\n   valid.  The string and its delimiters should be reentered.\n\n))PDS381A REENTER THE DATA SET NAME, VOLUME AND DISPOSITION:\n   Due to a previously noted error condition, the data set name\n   entered could not be used.  Another data set name and any volume\n   or disposition data must be reentered.\n\n))PDS382A REENTER THE FIRST TTR:\n   Due to a previously noted error condition, the first TTR address\n   entered could not be used and should be reentered.\n\n))PDS383A REENTER THE SECOND TTR:\n   Due to a previously noted error condition, the second TTR address\n   entered could not be used and should be reentered.\n\n))PDS384A REENTER THE HEX OFFSET:\n   Due to a previously noted error condition, the hexadecimal offset\n   entered could not be used.  The offset value should be reentered.\n\n))PDS385A REENTER THE SSI DATA:\n   Due to a previously noted error condition, the hexadecimal SSI\n   information entered could not be used.  The SSI data should be\n   reentered.\n\n))PDS386A REENTER THE REPLACEMENT STRING WITH DELIMITERS:\n   Due to a previously noted error condition, the replacement string\n   is not valid.  The string and its delimiters should be reentered.\n\n))PDS390A SHOULD THIS MEMBER BE RESTORED (Y/N) ?\n   If the identified member should be restored, enter: y\n   If the identified member should not be restored, enter: n\n\n))PDS391A SHOULD THESE MEMBERS BE RENAMED (Y/N) ?\n   If the identified members should be renamed, enter: y\n   If the identified members should not be renamed, enter: n\n\n))PDS392A SHOULD THIS DATA SET BE MODIFIED (Y/N) ?\n   If this data set should be modified by FIXPDS, enter: y\n   If this data set should not be modified by FIXPDS, enter: n\n\n))PDS393A SHOULD THIS MEMBER BE DELETED (Y/N) ?\n   If the identified member should be deleted, enter: y\n   If the identified member should not be deleted, enter: n\n\n))PDS394A SHOULD ALL OF THESE MEMBERS BE DELETED (Y/N) ?\n   If the identified members should be deleted, enter: y\n   If the identified members should not be deleted, enter: n\n\n))PDS395A SHOULD THESE MEMBERS BE SUBMITTED (Y/N) ?\n   If the identified members should be submitted, enter: y\n   If the identified members should not be submitted, enter: n\n\n))PDS396A SHOULD REPRO CONTINUE (Y/N) ?\n   If the REPRO subcommand should continue, enter: y\n   If the REPRO subcommand should not continue, enter: n\n\n))PDS397A SHOULD ENTIRE DIRECTORY BE MODIFIED (Y/N) ?\n   If the ATTRIB subcommand should continue, enter: y\n   If the ATTRIB subcommand should not continue, enter: n\n\n))PDS400W NO MEMBERS ARE IN THE DATA SET\n   This data set has no member names in its directory.\n\n))PDS410W VOLSET(volname) IS STILL IN EFFECT\n   The displayed default volume name will be used unless a VOLUME\n   parameter is also entered.\n\n))PDS412W REALLOCATION WITHOUT VOLSET WILL BE ATTEMPTED\n   The allocation attempt failed; -PDS86- will attempt reallocation\n   without the VOLSET parameter assuming that you really wanted a\n   cataloged data set.  If this is not the case, you will have to\n   enter another change command for the correct data set.\n\n))PDS441W name (WEAK)\n   This external name is a weak unresolved external reference; this\n   name was not present when the module was linked.  If this module\n   is relinked, the linkage-editor can resolve references to this\n   name but its presence is not required.\n\n))PDS442W name (MISSING)\n   This external name is an unresolved external reference; this name\n   was not present when the module was linked.  If this module is\n   relinked, the linkage-editor can resolve references to this name;\n   however, error messages will be generated if this name is again\n   missing during the module linkage-edit.\n\n))PDS443W MAXBLK HAS BEEN RAISED TO THE DATA SET LRECL VALUE\n   REPRO does not allow an output blocksize lower than the data set\n   logical record length.  For RECFM=V data sets, MAXBLK is set to\n   the LRECL+4; for RECFM=F data sets, MAXBLK is set to the LRECL.\n\n))PDS444W MAXBLK EXCEEDS THE DATA SET BLOCKSIZE\n   REPRO can create data blocks larger than your current data set\n   blocksize; however, unless the BLKSIZE is changed to the maximum\n   data blocksize later, most programs referencing the large blocks\n   will fail with I/O errors.\n\n))PDS451W ALL MEMBERS IN THIS PDS WILL BE LOST\n   FIXPDS RESET deletes all members from the data set.\n\n))PDS460W NO HISTORY DATA IS AVAILABLE\n   This module has no associated history (translator, zap or user-\n   supplied) IDR data.  This module was probably linked by an obsolete\n   linkage editor.\n\n))PDS470W THE PROGRAM IS PROBABLY IN A LOOP\n   The previous attention was noted but an interruption point was\n   not encountered in the program before this attention.\n\n   Interruptions are checked for at a terminal input or output and\n   when the input data set is read.\n\n   This message usually means that the program is in a loop --\n   the looping subcommand will be terminated and the subcommand\n   that was last entered will be given control.\n\n))PDS471W operation HAS COMPLETED WITH WARNINGS; RC=nnn ABEND=Snnn Unnnn\n   The operation has finished with the indicated\n   return code.  This is issued for the following\n   subcommands when the return code is non-zero.\n\n))PDS480W COMPRESS IS IN PROGRESS\n   A compress has been initiated.\n\n   Compress is performed in-place on your data set; if IEBCOPY does\n   not complete its operation for any reason, the data set should be\n   checked with a VERIFY subcommand.\n\n  PDS480W COMPRESS MAY NOT BE INTERRUPTED\n   Attentions received during a compress operation are ignored since\n   the target data set may be destroyed if IEBCOPY does not complete.\n\n))PDS482W BLOCKSIZE SHOULD BE EVENLY DIVISIBLE BY THE DCB LRECL\n   The requested BLKSIZE is not a multiple of the logical record\n   length.  This is usually an error.\n\n))PDS484W COPY IS IN PROGRESS\n   A copy operation has been initiated.\n\n   Selected members from the current data set are being copied to\n   the output data set.\n\n  PDS484W COPY SHOULD NOT BE INTERRUPTED\n   Attentions received during the copy operation are ignored to\n   ensure that the target data set will not be destroyed.\n\n))PDS500W NO COBOL TASK GLOBAL TABLE WAS FOUND\n   This member contains COBOL CSECTS; however, the TGT could not be\n   located after the member was loaded.  Thus, no compile options\n   can be reported.\n\n))PDS502W THIS MODULE WAS COMPILED WITH ENDJOB AND MIXED RES AND NORES\n   Some of the COBOL routines in this module were compiled with the\n   RES compiler option; others had the NORES option; and ENDJOB was\n   in effect for at least one routine.  According to the COBOL\n   programmer's guide, this combination is not recommended.\n\n))PDS503W THIS MODULE WAS COMPILED WITH MIXED RES AND NORES\n   Some of the COBOL routines in this module were compiled with the\n   RES compiler option; others had the NORES option.  This can lead\n   to errors since some routines have requested resident compiler\n   routines and others have requested no resident compiler routines.\n\n))PDS510W THIS IS A NULL MEMBER\n   This member contains no data.\n\n))PDS520W NO INFORMATION IS AVAILABLE\n   No .? (extended help) information is available -- no warning or\n   error messages are current.\n\n   To use the extended help facility, you should enter  .?\n   immediately after any subcommand which receives warning (PDSnnnW)\n   and/or error (PDSnnnE) messages.  Up to five of the most recent\n   warning or error message explanations will be automatically\n   requested from the HELP data set by the program.\n\n   Note: To test the extended help facility when no messages are\n   current, enter  .?  twice.  The first enter will result in a\n   PDS520W message and the second enter should result in an\n   explanation of the PDS520W message.\n\n))PDS521W OUTPUT DATA SET IS NOT PARTITIONED\n   The LOAD subcommand which invokes PDSLOAD requires an output\n   PDS.\n\n))PDS522W ADDSTATS REQUIRED WITH EXTEND\n   The ATTRIB subcommand to add extended ISPF member statistics\n   must be issued with both the ADDSTATS and EXTEND operands.\n\n))PDS530W THIS DATA SET IS NOT PARTITIONED\n   Several subcommands are not available since they are only defined\n   for partitioned data sets.\n\n))PDS531W THIS DATA SET IS A PDSE - SOME FUNCTIONS LIMITED\n   Several subcommands are not available because they are not\n   allowed by IBM design or they require the Binder API.\n\n   Subcommand       PDSE Type         Reason\n   -------------    --------------    --------------------\n   RESTORE          Data              IBM design\n   RESTORE          Program Object    IBM design\n   REPLACE          Program Object    IBM design\n   ALIAS            Program Object    Binder API\n   ATTRIB lkedattr  Program Object    Binder API\n   REPRO            Program Object    Binder API\n\n))PDS532W MULTIPLE INPUT MEMBERS WILL BE UNLOADED TO THIS SEQUENTIAL\n  DATA SET\n   The output data set is sequential; IEBCOPY will be used to\n   create an unload format output data set.\n\n))PDS533W TSO TRANSMIT LIMITED TO 3620 MEMBERS UNLESS ALL MEMBERS\n  ARE SPECIFIED\n   The member group to be transmitted can not be larger than 3620\n   members.  All members (:) can be transmitted without limits.\n   This is due to the IKJEFTSR command buffer length limitation\n   of 32K.\n\n))PDS534W MATCH DATA SET IS NOT PARTITIONED\n   PDSMATCH only works with two partitioned data sets.\n\n))PDS535W THIS DATA SET IS NOT A PDSE\n   The VPDSE subcommand is only supported for PDSE data sets.\n\n))PDS700E THIS RANGE OF NAMES IS INVALID\n   The range of names indicated is invalid (the range of names may\n   not progress from one name to a name lower in collating sequence).\n\n   For example:\n       valid name ranges   --  bb:bb   bb:c   bb:bc   bb:b   bb:   :bb\n       invalid name ranges --  bb:ba   bb:a\n\n))PDS701E THIS DATA SET IS NOT A LOAD LIBRARY\n   This subcommand or operand is only defined for load libraries.\n\n))PDS702E THIS DATA SET IS A LOAD LIBRARY\n   This subcommand or operand is not defined for load libraries.\n\n))PDS703E THIS MODULE HAS NO EXTERNAL SYMBOLS\n   This usually indicates that the module was not created by a linkage\n   editor or that it was constructed from incomplete data or that it\n   was created with the not-edit attribute of the linkage editor.\n\n))PDS704E MODULE member HAS NO EXTERNAL SYMBOLS\n   This usually indicates that the module was not created by a linkage\n   editor or that it was constructed from incomplete data or that it\n   was created with the not-edit attribute of the linkage editor.\n\n))PDS705E EXTERNAL SYMBOL name WAS NOT FOUND\n   This name is not a valid external symbol in this member and the\n   entry point address can not be changed.\n\n))PDS706E THIS DATA SET IS A PDSE\n   The RESTORE subcommand is not supported for PDSE data sets.\n\n))PDS707E RENAME SWAP IS NOT SUPPORTED FOR PDSE DATA SETS\n   The RENAME SWAP operand is not supported for PDSE data sets.\n\n))PDS708E PDS708E EXTENDED/LARGE FORMAT, HFS, AND VSAM ARE NOT SUPPORTED\n   Extended/Large Format, HFS, and VSAM datasets are not supported.\n\n))PDS710E INVALID APF INFORMATION FORMAT; MEMBER IS ASSUMED NOT AUTH.\n   The APF information for this module is invalid and the module\n   is assumed to be not authorized.\n\n))PDS711E NO MEMBER NAMES ARE IN THIS RANGE\n   This data set has no members whose names are in this range of names.\n   The following examples illustrate matching members for the MEMBER\n   subcommand:\n        MEMBERS :          all members -- X'00' through X'FF'\n        MEMBERS dd:        members from DD... through X'FF'\n        MEMBERS :bb        members from X'00' through BB...\n        MEMBERS aa:bb      members between AA... and BB...\n        MEMBERS (abc,d:)   member ABC and those from D... through X'FF'\n\n))PDS712E NO MEMBER NAMES MATCH THIS PATTERN\n   This data set has no members whose names match these pattern\n   characters.  The following examples illustrate matching members for\n   the MEMBER subcommand:\n        MEMBERS aa/        member names containing AA anywhere\n        MEMBERS /bb        member names containing BB anywhere\n        MEMBERS aa/bb      member names containing AA and BB\n        MEMBERS (aa/,bb/)  member names containing AA or BB\n\n))PDS713E NO MEMBER NAMES MATCH THIS COMBINATION NAME\n   Either no member names match the beginning range characters or\n   the second pattern portion of the name entered.  The following\n   examples illustrate matching members for the MEMBER subcommand:\n        MEMBERS aa*        members with names AA...\n        MEMBERS *bb        members with names containing BB anywhere\n        MEMBERS aa*bb      members with names AA... and BB elsewhere\n        MEMBERS (aa*,bb/)  members with names AA... or with BB anywhere\n\n))PDS715E NO MATCHING ATTRIBUTES WERE FOUND\n   This IF or MEMLIST subcommand did not locate any members with the\n   attributes desired in the members searched.\n\n   Note: if IF with THEN(SUBLIST) or ELSE(SUBLIST) was entered, the\n   default member group is nullified.  You will have to explicitly\n   respecify the member group to establish a new default member group.\n\n))PDS720E NOT APF AUTHORIZED; THE APF DATA IS MISSING\n   The APF data for this module is not present and the module is\n   assumed to be not authorized.\n\n))PDS721E NOT APF AUTHORIZED, THE APF DATA IS THE WRONG LENGTH\n   The APF data for this module is invalid (not one byte long) and\n   the module is assumed to be not authorized.\n\n))PDS722E THE APF DATA CAN NOT BE CHANGED\n   Due to missing or invalid APF data, the APF value was not modified.\n   A module linked with an old linkage editor might not have APF data.\n\n))PDS723E THE RLD/CONTROL COUNT CAN NOT BE CHANGED\n   Due to non-existent RLD/control data in the member, the directory\n   RLD/control count was not modified.  Note that a module linked with\n   an obsolete linkage editor might not have a RLD/control count field.\n\n))PDS724E RMODE AND AMODE CAN NOT BE CHANGED -- OBSOLETE LINKAGE-EDITOR\n   Residence and addressing mode values do not exist for this module\n   since it was linked with an obsolete linkage editor.\n\n))PDS726E PAGE ALIGNMENT CAN NOT BE CHANGED -- OBSOLETE LINKAGE-EDITOR\n   The page alignment flag does not exist for this module since it was\n   linked with an obsolete linkage editor.\n\n))PDS730E THIS SUBCOMMAND IS NOT OPERATIONAL; YOU ARE ALREADY UNDER ISPF\n   The BROWSE, EDIT, ISPF, ISPMODE, MEMLIST, and VIEW subcommands\n   cannot be used since ISPF was initialized before invoking -PDS86-.\n\n   Note: if -PDS86- is invoked from the PDS panel, these subcommands\n   can be used in -PDS86- even though ISPF is active.\n\n))PDS731E ISPF IS NOT OPERATIONAL NOW\n   Due to a previously noted error condition, the BROWSE, EDIT,\n   ISPF, ISPMODE, MEMLIST, and VIEW subcommands have been disabled.\n\n))PDS732E CLIST PROCESSING IS NOT SUPPORTED FROM ISPMODE OR MEMLIST\n   The % (implied CLIST) and EXEC subcommands are not currently\n   operational in an ISPF dialog environment.\n\n))PDS733E BROWSE FAILED -- NULL MEMBER (ZERO-LENGTH DATA)\n   ISPF cannot BROWSE null members with no data.\n\n))PDS734E BROWSE FAILED -- NO MEMBERS IN PDS\n   ISPF cannot BROWSE a PDS with no members.\n\n))PDS735E BROWSE FAILED -- I/O ERROR\n   ISPF cannot BROWSE members containing I/O errors\n   (physical errors or logical record blocking errors).\n\n))PDS740E THIS MODULE HAS NO MATCHING EXTERNAL SYMBOLS\n   The MODULE(name) requested is not contained in this member.\n\n))PDS750E A REQUIRED NOTELIST POINTER WAS NOT FOUND IN THIS MEMBER\n   Due to an error condition, one or more load module records referred\n   to in an overlay notelist record could not be located by FIXPDS.\n\n   This message may be due to data set or equipment errors.  A VERIFY\n   subcommand may provide more information.\n\n   The EXPANDDIR operation is terminated with the member in error\n   unchanged.  Any previously moved members and their associated\n   aliases are fully updated, however.\n\n   If this problem is due to data set errors, the data set may be\n   damaged and should be recovered.\n\n))PDS751E A NOTELIST RECORD COULD NOT BE FOUND FOR THIS MEMBER\n   Due to an error condition, an overlay notelist record could not\n   be input by FIXPDS.\n\n   This message may be due to data set or equipment errors.  A VERIFY\n   subcommand may provide more information.\n\n   The EXPANDDIR operation is terminated with the member in error\n   unchanged.  Any previously moved members and their associated\n   aliases are fully updated, however.\n\n   If this problem is due to data set errors, the data set may be\n   damaged and should be recovered.\n\n))PDS752E THE NUMBER OF DESIRED DIRECTORY BLOCKS MUST BE SPECIFIED\n   Due to a previously noted error condition, the number of directory\n   blocks could not be determined.  Therefore, the number of directory\n   blocks must be specified to expand or reset the data set directory.\n\n))PDS770E A SEARCH STRING IS REQUIRED\n   A default search string cannot be used since a default string has\n   not yet been established.\n\n))PDS771E name IS AN INVALID SUBCOMMAND; ENTER \"HELP\" OR \"OPTIONS\" ...\n   The displayed subcommand name is not defined -- a table of valid\n   subcommand names follows this header.\n\n))PDS772E A REPLACEMENT STRING IS REQUIRED\n   A default replacement string cannot be used since a default string\n   has not yet been established.\n\n))PDS773E EQUAL LENGTH STRINGS ARE REQUIRED FOR BLOCK AND DUMP UPDATES\n   The search and replacement strings are different lengths; this is\n   only allowed for REPLACE with NUM, SNUM or NONUM formats.\n\n))PDS774E REPLACE TERMINATED; CHARACTER EXPANSION FAILED\n   The replacement string could not fit on the current logical line.\n   No additional updates will be made to this member; however, note\n   that this member may have been partially updated.\n\n))PDS780E filename DCB OPEN ERROR -- REALLOCATE AND TRY AGAIN\n   The FILE(PDSOUT) or session copy data set could not be opened;\n   correct any problems with the current allocation and try again.\n\n))PDS781E filename DCB ATTRIBUTES CONFLICT -- USE SEQUENTIAL WITH\n   RECFM=FB AND LRECL=80\n   The attributes of the FILE(PDSOUT) and the session copy data set\n   must be RECFM(F B) LRECL(80) with a blocksize which is a multiple\n   of 80.  It must be allocated to a sequential output data set or a\n   member of a partitioned data set.\n\n))PDS800E NO LOAD MODULE TEXT WAS FOUND FOR MEMBER\n   This member contains invalid load module data and it cannot\n   be restored.\n\n))PDS801E END OF MEMBER SIMULATED -- REMAINDER OF TRACK SKIPPED\n   Due to a previously noted input error, the remainder of the\n   track cannot be read.  RESTORE will begin processing with the\n   following track as if it were the beginning of a new member.\n\n))PDS802E A MAIN MEMBER NAMED member IS ALREADY AT THIS TTR\n   The identified main member resides at this location; RESTORE\n   will terminate after checking for other associated members.\n\n))PDS804E RESTORE ABANDONED\n   Due to a previously noted error condition, RESTORE cannot continue.\n   You may wish to retry RESTORE with different operands.\n\n))PDS805E INVALID LOAD MODULE DATA\n   This member contains invalid load module data and it cannot\n   be restored.\n\n))PDS806E BLOCK LENGTH of size EXCEEDS THE MAXBLK VALUE\n   This member contains blocks larger than the MAXBLK value entered.\n\n))PDS811E RECORD LENGTH n IS INVALID\n   The indicated logical record length (0, 1, 2 or 3) is invalid for\n   RECFM(V) data sets.\n\n   This type of error may indicate that your data set DCB has been\n   altered.  If this is the case, the data set DCB can be reset\n   with the following subcommand:\n     FIXPDS RECFM(mm) LRECL(nn) BLKSIZE(pp)\n     (where mm, nn and pp are replaced by the proper DCB attributes)\n\n))PDS812E BLOCK LENGTH OF nn,nnn EXCEEDS THE DATA SET DCB BLKSIZE\n   The physical blocksize exceeds the BLKSIZE of the data set.\n\n   This type of error may indicate that your data set DCB has been\n   altered.  If this is the case, the data set DCB can be reset\n   with the following subcommand:\n     FIXPDS RECFM(mm) LRECL(nn) BLKSIZE(pp)\n     (where mm, nn and pp are replaced by the proper DCB attributes)\n\n))PDS813E RECORD LENGTH OF nn,nnn EXCEEDS THE MAXIMUM DCB LRECL\n   The logical record length exceeds the LRECL of the data set.\n\n   This type of error may indicate that your data set DCB has been\n   altered.  If this is the case, the data set DCB can be reset\n   with the following subcommand:\n     FIXPDS RECFM(mm) LRECL(nn) BLKSIZE(pp)\n     (where mm, nn and pp are replaced by the proper DCB attributes)\n\n))PDS814E BLOCK LENGTH OF nn,nnn IS NOT DIVISIBLE BY THE DCB LRECL\n   The physical blocksize is not a multiple of the data set's LRECL.\n\n   This type of error may indicate that your data set DCB has been\n   altered.  If this is the case, the data set DCB can be reset\n   with the following subcommand:\n     FIXPDS RECFM(mm) LRECL(nn) BLKSIZE(pp)\n     (where mm, nn and pp are replaced by the proper DCB attributes)\n\n))PDS820E THIS MEMBER IS AN ALIAS FOR member1 BUT IT POINTS TO member2\n   This member is actually an alias for main member member1 (according\n   to its TTR), but its directory entry indicates that it should be an\n   alias of member2.\n\n   This is usually caused by doing a rename of a main module with\n   some utility which does not update the associated alias modules'\n   directory entries correctly.\n\n   This type of error could cause serious problems if the members are\n   in your LPALIB (you may not be able to IPL).\n\n   To correct this problem with -PDS86-, issue the following\n   subcommand:\n     RENAME member1 member1\n        (where member1 is the name of the main module identified above)\n\n))PDS821E RMODE ENTRY DOES NOT CORRESPOND WITH MEMBER member\n   The residence mode entry for this alias member does not match the\n   residence mode entry of the identified main module.\n\n   This type of error is unusual; the main module and its aliases\n   should be reinstalled.\n\n   To correct this problem with -PDS86-, issue the following\n   subcommands:\n     ATTRIB member\n        (where member is the main member identified above).\n     ATTRIB member RMODExx\n        (where RMODExx is the RMODE value displayed\n         by the above ATTRIB subcommand)\n\n))PDS822E MAIN AMODE ENTRY DOES NOT CORRESPOND WITH MEMBER member\n   The addressing mode entry for this alias member does not match\n   the addressing mode entry of the identified main module.\n\n   This type of error is unusual; the main module and its aliases\n   should be reinstalled.\n\n   To correct this problem with -PDS86-, issue the following\n   subcommands:\n     ATTRIB member\n        (where member is the main member identified above).\n     ATTRIB member AMODExx\n        (where AMODExx is the AMODE value displayed\n         by the above ATTRIB subcommand)\n\n))PDS823E RLD/CONTROL COUNT DOES NOT CORRESPOND WITH MEMBER member\n   The RLD/control count for this alias member does not match\n   the RLD/control count of the identified main module.\n\n   This type of error is unusual; the main module and its aliases\n   should be reinstalled.\n\n   This count field is used by program fetch to construct\n   a channel program that will load the member.\n\n   If this error is not resolved before program fetch uses this member,\n   fetch may operate in a degraded mode (see message CSV300I).\n\n   To correct this problem with -PDS86-, issue the following\n   subcommand for the main module and each of its aliases:\n     ATTRIB memberx RLDFIX\n\n))PDS824E DUPLICATE MEMBER NAME -- IGNORED\n   This member name has previously been encountered in the data set\n   directory.\n\n   Your data set has been damaged -- it should be recovered in some\n   fashion; it may suffice to just delete one of the duplicate member\n   names.  Note: an interactive ZAP command may be useful here in\n   changing the actual member names to ascending order.\n\n))PDS825E MEMBER NAME IS OUT OF SEQUENCE -- IGNORED\n   Member names higher in the collating sequence than this member name\n   have previously been encountered in the data set directory.\n\n   Your data set has been damaged -- it should be recovered in some\n   fashion; it may suffice to delete the out-of-sequence member\n   name or the member name just before this one in the directory.\n   Note: an interactive ZAP command may be useful in changing the\n   actual member names to ascending order.\n\n))PDS826E THE DIRECTORY RLD/CONTROL COUNT DOES NOT MATCH THE FIRST RLD\n   ENTRY\n   The RLD/control count for this member does not match the number\n   of RLD or control records following the first TEXT record.\n\n   This count field is used by program fetch to construct\n   a channel program that will load the member.\n\n   If this error is not resolved before program fetch uses this member,\n   fetch may operate in a degraded mode (see message CSV300I).\n\n   To correct this problem with -PDS86-, issue the following\n   subcommand for the main module and each of its aliases:\n     ATTRIB memberx RLDFIX\n\n))PDS827E member1 IS AN ALIAS FOR THIS MEMBER BUT IT POINTS TO member2\n   Member1 is actually an alias for this main member (according to its\n   TTR), but its directory entry indicates that it should be an alias\n   of member2.\n\n   This is usually caused by doing a rename of a main module with\n   some utility which does not update the associated alias modules'\n   directory entries correctly.\n\n   This type of error could cause serious problems if the members are\n   in your LPALIB (you may not be able to IPL).\n\n   To correct this problem with -PDS86-, issue the following\n   subcommand:\n     RENAME mmember mmember\n        (where mmember is the name of the main member)\n\n))PDS830E OBTAIN ERROR; DSCB NOT ON VOLUME\n   The data set name could not be found in the VTOC (Volume Table of\n   Contents); this is probably a program error or the base name\n   of a generation data group (GDG) has been entered.\n\n))PDS831E UNABLE TO OPEN DATA SET\n   The open for the input data set failed; this is probably a\n   program error.\n\n))PDS832E DUMMY MEMBER ADD FAILED, RC=8\n   A dummy member, with name 9FIXPDS, was not added as expected to\n   the data set directory; this is probably a program error.\n\n))PDS833E DUMMY MEMBER DELETE FAILED, RC=8\n   A dummy member, with name 9FIXPDS, was not deleted as expected from\n   the data set directory; this is probably a program error.\n\n))PDS834E ERROR IN GNRLFAIL SERVICE ROUTINE; R15=nn\n   The GNRLFAIL system message routine failed with the indicated\n   return code; this is probably a program error.\n\n))PDS835E ERROR IN DAIRFAIL SERVICE ROUTINE; R15=nn\n   The DAIRFAIL system message routine failed with the indicated return\n   code; this is probably a program error.\n\n))PDS836E I/O ERROR IN DIRECTORY\n   The system directory management routines indicate that the directory\n   for this data set contains one or more I/O errors.\n\n   This I/O error may be due to data set or equipment errors; entering\n   a VERIFY subcommand may provide more information.\n\n   Data set recovery will be required if this is a data set error.\n\n))PDS840E INVALID HEXADECIMAL STRING LENGTH\n   At most 64 hexadecimal digits may be used for a search or\n   replacement string.\n\n))PDS841E INVALID HEXADECIMAL CHARACTERS\n   Only numeric characters and the characters from A through F may be\n   used in hexadecimal strings.\n\n))PDS842E THIS STRING IS TOO LONG\n   At most 32 characters may be used for a search or replacement\n   string.\n\n))PDS843E ONLY DISK DATA SETS ARE SUPPORTED\n   The target data set must exist on a physical or virtual disk.\n\n))PDS844E LOCATE FAILED FOR DATA SET dsname\n   The input or output dsname must be cataloged.\n\n))PDS850E member IS BEING UPDATED BY username\n   This member is being modified by the named user or JOB; this member\n   is currently owned by the indicated user or JOB and its status can\n   not be changed.\n\n))PDS851E THIS DATA SET IS BEING UPDATED BY username\n   This data set is being modified by the named user or JOB; this data\n   set is currently owned by the indicated user or JOB and its status\n   can not be changed.\n\n))PDS852E member ALREADY EXISTS\n   This member cannot be added to the data set; this member name is\n   already in the data set.\n\n))PDS853E MEMBER member NOT FOUND\n   This member is not in the data set.\n\n))PDS854E member IS AN INVALID MEMBER NAME\n   This member name is invalid; member names may be entered in either\n   character or hexadecimal mode.\n\n   Character member names may be from one to eight bytes long with no\n   imbedded blanks, commas, parentheses, colons or slashes.\n\n   Hexadecimal member names may contain from one to sixteen hexadecimal\n   digits delimited by x' and '.  Note: x'd7c4e2f9' and PDS9 are\n   entirely equivalent; also, x'333' and x'0333' are equivalent.\n\n))PDS855E THE DATA SET DIRECTORY IS FULL AND MEMBERS CANNOT BE ADDED\n   The directory is full; if you are currently trying to save a member\n   using an editor, you may wish to save it in another data set.\n   This message can also be issued if trying to add ISPF statistics\n   to a member.\n\n   This type of problem can be resolved in several ways:\n     1.  clean up the directory of the data set by deleting obsolete\n         members and make room for new member names.\n     2.  split the data set into two (or more) data sets.\n     3.  reallocate the data set (with a larger directory) and copy\n         all old members to the replacement data set.\n     4.  expand the directory with FIXPDS.  For example, enter\n         FIXPDS EXPAND(30)  to add 30 directory blocks.\n\n))PDS856E STOW ERROR, R15=nn, R0=hexvalue\n   A update to a member failed with the indicated return code and\n   reason code.  STOW return codes and reason codes are as follows:\n     R15=04, R0=00000000   The directory already contains\n                           the specified new name.\n     R15=08, R0=00000000   The specified name could not be\n                           found.\n     R15=12, R0=00000000   No space left in the directory.\n                           The entry could not be added,\n                           replaced, or changed.\n     R15=12, R0=00000001   For a PDSE, an attempt by STOW to\n                           create a member with no records\n                           failed because the number of\n                           members would have exceeded the\n                           maximum allowed.\n     R15=16, R0=00000001   A permanent input or output error\n                           was detected. Control is not\n                           given to the error analysis\n                           (SYNAD) routine.\n     R15=16, R0=00000002   A permanent I/O error occurred\n                           while attempting to write the EOF\n                           mark after the member. Control is\n                           not given to the error analysis\n                           (SYNAD) routine.\n     R15=16, R0=00000004   An error occurred while writing\n                           data buffered in system buffers.\n                           Control is not given to the error\n                           analysis (SYNAD) routine.\n     R15=16, R0=00000737   The system found an I/O error\n                           while trying to read or write the\n                           VTOC.\n     R15=16, R0=00000B37   The system was unable to update\n                           the VTOC.\n     R15=16, R0=00000D37   Either no secondary space is\n                           available or a DADSM user exit\n                           error occurred. The error\n                           occurred when trying to write an\n                           EOF; all primary space used.\n     R15=16, R0=00000E37   Either no secondary space is\n                           available or a DADSM user exit\n                           error occurred.\n     R15=20, R0=00000000   The data control block is not open, it is\n                           open for input or a DEB error occurred.\n     R15=20, R0=00000004   The initialize function was specified for\n                           a PDSE with DISP=SHR.\n     R15=24, R0=00000000   Insufficient virtual storage was available\n                           to perform the STOW function.\n     R15=28, R0=00000000   The DCB defined a PDS; initialize only\n                           supports PDSEs.\n     R15=28, R0=00000000   STOW add or replace was attempted for\n                           a member of a PDSE with load modules\n                           (a Program Management Library).\n     R15=36, R0=00000000   For a PDSE, the alias has an invalid TTR.\n     R15=40, R0=00000000   For a PDSE, user-supplied TTRs are in the\n                           user field of the directory entry.\n     R15=48, R0=00000004   For a PDSE, the add failed because you\n                           cannot add a primary member name while the\n                           data set is open for update.\n     R15=48, R0=00000008   For a PDSE, the replace failed because you\n                           cannot replace a primary member name while\n                           the data set is open for update and the\n                           specified member name does not exist.\n     R15=48, R0=0000000C   For a PDSE, the replace failed because you\n                           cannot replace an alias name if it is the\n                           same name as the primary member.\n     R15=48, R0=00000010   For a PDSE, the add or replace failed when\n                           attempting to add or replace an alias, but\n                           the member identified by the TTR did not\n                           exist.\n     R15=48, R0=00000014   For a PDSE, the replace failed when\n                           attempting to replace a primary member\n                           name while the data set is open for\n                           update and the member name identified\n                           an existing alias.\n     R15=48, R0=00000018   For a PDSE, the replace failed when\n                           attempting to replace a primary member\n                           name while the data set is open for update,\n                           but the input TTR has not been defined\n                           for that member.\n     R15=52, R0=00000000   For a PDSE, one or more members were placed\n                           in a pending delete state; the space taken\n                           by those modules is not immediately\n                           available for reuse.\n\n))PDS858E NO DEFAULT MEMBER HAS BEEN ESTABLISHED\n   A command such as  MEMBERS *  may only be entered after a default\n   member name or member group has been established.  To establish a\n   default member name or member group, you could use any of the\n   following example statements:\n        MEMBERS abc        member ABC\n        MEMBERS (abc,xyz)  members ABC and XYZ\n        MEMBERS :          all members -- X'00' through X'FF'\n        MEMBERS dd:        members from DD... through X'FF'\n        MEMBERS :bb        members from X'00' through BB...\n        MEMBERS aa:bb      members between AA... and BB...\n        MEMBERS (abc,d:)   member ABC and those from D... through X'FF'\n        MEMBERS aa/        member names containing AA anywhere\n        MEMBERS /bb        member names containing BB anywhere\n        MEMBERS aa/bb      member names containing AA and BB\n        MEMBERS (aa/,bb/)  member names containing AA or BB\n        MEMBERS aa*        members with names AA...\n        MEMBERS *bb        members with names containing BB anywhere\n        MEMBERS aa*bb      members with names AA... and BB elsewhere\n        MEMBERS (aa*,bb/)  members with names AA... or with BB anywhere\n\n   Note: after a command such as one of the above has been entered,\n   the following example statement refers to the default member name\n   or member group:\n        MEMBERS *          members in the default member name or group\n\n   You can determine if a member group is current by examining the\n   normal -PDS86- prompt message (PDS300A).  If MEM= is followed by\n   a blank, no default member group has been established.\n\n))PDS859E COMMAND name WAS NOT FOUND\n   The named TSO command is required to support a PDS subcommand but it\n   could not be found in the LINKLIST, your STEPLIB/ISPLLIB dataset or\n   in the LPALIB.  Ensure that the required TSO command is available\n   from one of the above sources before trying this subcommand again.\n\n   This message can also be issued if a program being executed by\n   -PDS86- via IKJEFTSR is not found in the MVS load module search\n   path.  Examples of these programs are listed below.\n\n   AMBLIST     ASMDASM     CPKMAP      COBANAL     DELINKI     DISASM\n   DISKMAP     EQALMA      FDRCPK      GIMCPTS     IEBCOPY     IEBPDSE\n   ISRSUPC     MXI         OFFLOAD     PDSLOAD     PDSMATCH    RESOURCE\n\n))PDS860E MEMBER IS AN ALIAS BUT NO MAIN MEMBER EXISTS\n   This alias member has no associated main member.  This type of\n   alias member is termed an orphan.\n\n   This type of error is usually caused by not linking a main module\n   and all of its aliases; the main module and its aliases should be\n   reinstalled.\n\n   To correct this problem with -PDS86-, issue the following\n   subcommands for each identified orphan member:\n     DELETE memberz\n        (where memberz is the orphan member)\n     ALIAS memberx memberz\n        (where memberx is the correct main member)\n\n))PDS861E THE ALIAS DIRECTORY ENTRY NOTES THE MAIN MEMBER NAME AS membr\n   This message displays the name of the main member for this alias\n   member as noted by its directory entry.\n\n))PDS862E ERROR IN GQSCAN DATA\n   This message indicates that ENQUEUE check parameters are incorrect;\n   this is probably a program error.\n\n))PDS864E member IS AN APPARENT ALIAS FOR THIS MEMBER\n   This member and the identified member both point to the same TTR\n   address but neither has its alias bit set.\n\n   These members are called apparent aliases and the actual owner\n   of the member data can not be determined.\n\n   One cause of this type of problem is an open/close/EOV situation\n   (OZ44857 -- also documented in II00587) in which opening a\n   partitioned data set causes the FORMAT1 DSCB to be rewritten; If\n   this occurs while the data set is open for update or output, then\n   the DS1LSTAR (last TTR pointer) can be invalidated.\n\n   Normally, this situation should only occur on the first access of\n   each day; however, some user modifications cause the DSCB to be\n   updated more often and increase the exposure for duplicate TTR's\n   and overlaid members.\n\n   If the data set is copied or compressed, IEBCOPY will hide this\n   error by creating two identical members during the copy.\n\n   To correct this problem with -PDS86-, determine which apparent\n   alias member name should correspond to the member data and issue\n   the following subcommand:\n     DELETE memberx\n        (where memberx is the non-corresponding alias name)\n\n))PDS865E THE IEBCOPY OUTPUT CAN NOT BE OPENED\n   A compress or copy has been performed but a summary of IEBCOPY's\n   messages cannot be provided since the message data set can not be\n   opened.\n\n   This is probably a program error.\n\n))PDS870E PDS DIRECTORIES MUST BE CONTAINED IN ONE EXTENT\n   The directory of a partitioned data set must be totally contained in\n   the first extent of the data set.\n\n   From VERIFY, it indicates that your data set was allocated with a\n   invalid directory and the data set should not be used as it may\n   fail in program load or when used by IEBCOPY.\n\n   From FIXPDS, it indicates that your data set will require more than\n   its first extent to contain the expanded (or reset) directory.\n   This is not permitted as it would create an invalid data set\n   directory.\n\n))PDS871E A TTR FOR THIS MEMBER WAS NOT FOUND\n   Due to an error condition, a record pointed by this member's\n   directory entry could not be found in this load module.\n\n   This message may be due to data set or equipment errors.  A VERIFY\n   subcommand may provide more information.\n\n   If this error occurs in FIXPDS, the subcommand is terminated before\n   changing the member in error.  Any previously moved members and\n   their associated aliases are fully updated, however.\n\n   If this problem is due to data set errors, the data set may be\n   damaged and should be recovered.\n\n))PDS872E THIS MEMBER IS AFTER THE DATA SET END-OF-FILE\n   This member's data follows the end of data set marker (DS1LSTAR)\n   for this data set.  To ensure that this diagnostic message is\n   valid, -PDS86- reopens the data set from the EXCP routine in case\n   another user has saved into the data set.\n\n   This message indicates that your data set contains one or more\n   invalid TTR pointers and that the data set has been damaged;\n   the data set should be recovered in some fashion.\n\n))PDS873E TTR IS BEYOND THE USED PORTION OF THE DATA SET\n   A TTR pointer in this member's directory has a value which exceeds\n   the end of data marker for the data set.\n\n   This type of error is unusual; it indicates that your data set\n   contains one or more invalid TTR pointers and that the data set has\n   been damaged -- the data set should be recovered in some fashion.\n\n))PDS874E TSO COMMAND NAME IS INVALID\n   TSO SCAN service indicates that this TSO command name is invalid.\n\n   Valid TSO command names follow these rules:\n     1.  The TSO command name should be from one to eight bytes long.\n     2.  The first character of the TSO command name must be a\n         alphabetic or national character.\n     3.  Any additional characters should be alphabetic, numeric\n         or national characters.\n\n))PDS875E THIS DATA SET HAS NO DIRECTORY BLOCKS\n   This is a null data set -- it contains no tracks and consequently,\n   no directory blocks and no members.\n\n   When the data set takes an extent, it will receive actual disk\n   tracks and directory blocks.\n\n))PDS876E A DIRECTORY RECORD HAS AN INCORRECT LENGTH (NOT 256 BYTES)\n   This data set has an invalid directory block.  Directory blocks\n   should be 256 characters long and each block should contain an\n   eight byte key.\n\n   This type of error usually indicates that your data set has been\n   written over and the data set should be recovered in some fashion.\n\n))PDS877E INVALID SUBCOMMAND NAME\n   TSO SCAN service indicates that this subcommand name is invalid.\n\n   Valid subcommand names follow these rules:\n     1.  The subcommand name should be from one to eight bytes long.\n     2.  The first character of the subcommand name must be a\n         alphabetic or national character.\n     3.  Any additional characters should be alphabetic, numeric\n         or national characters.\n\n))PDS879E RESIDENCE MODE 64 AND ADDRESSING MODE xxx ARE INCOMPATIBLE\n   Residence mode 64 and an addressing mode of either 24, 31, or ANY\n   are incompatible; this is an invalid combination of linkage editor\n   attributes.\n\n))PDS880E RESIDENCE MODE ANY AND ADDRESSING MODE xxx ARE INCOMPATIBLE\n   Residence mode ANY and an addressing mode of either 24 or ANY are\n   incompatible; this is an invalid combination of linkage editor\n   attributes.\n\n))PDS881E REENTRANT ATTRIBUTE CONFLICTS WITH NOT REUSABLE\n   A reentrant attribute is incompatible with a not reusable attribute;\n   this is an invalid combination of linkage editor attributes.\n\n))PDS882E TEST ATTRIBUTE CONFLICTS WITH NOT EDIT\n   A TEST attribute is incompatible with a NOT EDIT attribute;\n   this is an invalid combination of linkage editor attributes.\n\n))PDS883E REUSABLE ATTRIBUTE CONFLICTS WITH SCATTER\n   A reusable attribute is incompatible with a scatter load attribute;\n   this is an invalid combination of linkage editor attributes.\n\n))PDS884E OVERLAY ATTRIBUTE CONFLICTS WITH xxx\n   This message documents an incompatible combination of the overlay\n   attribute and another linkage editor attribute as follows:\n     1.  Overlay and reentrant are incompatible.\n     2.  Overlay and reusable are incompatible.\n     3.  Overlay and scatter load are incompatible.\n     4.  Overlay and RMODE ANY are incompatible.\n     5.  Overlay and AMODE 31 are incompatible.\n     6.  Overlay and AMODE 64 are incompatible.\n     7.  Overlay and AMODE ANY are incompatible.\n\n))PDS885E MORE THAN ONE OUTPUT MEMBER WOULD BE NAMED memname\n   For a COPY or REPRO operation with the AS or TO keyword, multiple\n   members can map to the same output member name.\n\n   For example, if the member names A03BY, BONBY and CONCY are input\n   and AS(ZZZ) is in effect, only the output member names ZZZBY and\n   ZZZCY would result.\n\n))PDS892E READ MULTIPLE FAILED AT TTR=ttttrr\n   -PDS86- has an input mode called \"read multiple\" which can read\n   an entire track of disk data at a time.  A read multiple can fail\n   for any of several reasons:\n     I/O error     - an I/O error is on the current track\n     Invalid addr  - the disk TTR address provided is invalid\n     Not capable   - the device can not perform a read multiple CCW\n     Track overrun - too much data is recorded on a physical track\n\n   After read multiple fails, -PDS86- uses its alternate double\n   buffering input mode for the remainder of the subcommand.  With\n   the next subcommand, read multiple is attempted again.\n\n   If many subcommands issue failure messages for read multiple,\n   consider changing the mode for input buffering to double with\n   the following subcommand:\n     CONTROL DOUBLE\n\n))PDS893E READ MULTIPLE ERROR -- NEXT TTR (ttttrr) IS INCORRECT\n   -PDS86- has an input mode called \"read multiple\" which can read\n   an entire track of disk data at a time.  The last read command\n   failed to obtain a new TTR address for the next track even though\n   no error condition was presented to the program.\n\n   After read multiple fails, -PDS86- uses its alternate double\n   buffering input mode for the remainder of the subcommand.  With\n   the next subcommand, read multiple is attempted again.\n\n   If many subcommands issue failure messages for read multiple,\n   consider changing the mode for input buffering to double with\n   the following subcommand:\n     CONTROL DOUBLE\n\n   This error is probably due to equipment errors; notify your\n   hardware vendor of a possible problem with DASD \"read multiple\"\n   on the device currently allocated.\n\n   For STC 8880 controllers, ensure that EC 63096 is applied; for STC\n   8890 cache controllers, ensure that EC 62974 is applied.\n\n))PDS900E THE SOURCE AND TARGET DATA SETS MUST DIFFER\n   The copy programs supported do not allow you to copy members\n   into the input data set;  when the input and output data sets\n   are identical, a data set compress would be attempted.\n\n   You can perform this type of function with the REPRO subcommand\n   by using the AS or TO keyword.\n\n))PDS910E TSO COMMAND name IS NOT ALLOWED\n   You are not authorized to use this TSO command.  Contact your\n   systems support staff if this restriction causes a problem.\n\n))PDS920E SUBCOMMAND name IS NOT ALLOWED FOR THIS DATA SET\n   You are not authorized to use this subcommand.  Contact your\n   systems support staff if this restriction causes a problem.\n\n))PDS930E name IS AN INVALID SUBCOMMAND ABBREVIATION\n   This subcommand name is not allowed.  You must enter additional\n   characters to create a valid subcommand name.\n\n))PDS932E OLD ALLOCATION IS REQUIRED FOR THIS FUNCTION\n   For a PDSE data set, FIXPDS RESET requires OLD allocation.  This\n   function uses a STOW DCB,,I form to reinitialize the data set.\n\n   If you can not get OLD allocation to this data set, you can also\n   delete all members by entering  DELETE :\n\n   Note: Global variable &STOWI default is 'YES' which indicates\n         APAR OA13224 \"DISP=SHR FOR STOW INIT\" is on the system.\n\n))PDS973E NO DEFAULT OUTPUT DATA SET NAME HAS BEEN ESTABLISHED\n   The default output data set name for the COPY subcommand has not\n   yet been established.  Until a COPY command is entered with an\n   actual data set name as output, the * notation for the default\n   output data set name may not be used.\n\n))PDS980E IEBCOPY WAS INTERRUPTED\n   A compress or copy operation has been interrupted by an attention\n   or ABEND.\n\n   For a copy operation, this usually means that the output was only\n   partially completed; for a compress operation, note the following:\n\n   Compress is performed in-place on your data set; since IEBCOPY did\n   not complete its operation, the data set may be destroyed.\n\n   Attentions received during a compress operation cannot be ignored\n   as IKJEFTSR is being used to gain authorization for IEBCOPY.\n\n   It is suggested that you do not press the attention key during a\n   compress or that you use some other method of gaining authorization;\n   contact your system support staff for more information.\n\n))PDS982E SEQUENTIAL INPUT MUST BE COPIED TO A SPECIFIC OUTPUT MEMBER\n   Sequential input must be copied to a single output member; use\n   syntax such as the following: PDS.DATA(membername).\n\n))PDS983E MAXGENS VALUE IS > 2,000,000,000\n   The MAXGENS value has exceeded the largest allowed value.\n\n))PDS984E MAXGENS VALUE EXCEEDS THE SMS LIMIT\n   The MAXGENS value has exceeded the SMS MAXGENS_LIMIT.\n\n))PDS990E EXTENT INITIALIZATION READ FAILED\n   The first read for an extent of this data set failed.  This type\n   of problem is unusual unless your directory contains invalid TTR\n   pointers.\n\n))PDS991E PERMANENT I/O ERROR AT TTR=hexttr\n   An uncorrectable I/O error was encountered at the displayed TTR\n   address.\n\n   This error may be due to data set or equipment errors.  A VERIFY\n   subcommand may provide more information.\n\n   Data set recovery will be required if this is a data set error.\n\n))PDS993E jobname,stepname,ucb,D,ddname,READ/WRITE,error message,\n  hexbbcchhr,BPAM S\n  hexttr,relrec#num,smsretur,smsreasn\n\n   An uncorrectable I/O error was encountered at the displayed disk\n   address.  The error message is generated by a SYNAD recovery\n   routine for PDSE datasets.\n\n   In this message, data will be filled in as follows:\n     ucb             is the UCB address of the active device\n     D               means direct access\n     ddname          is the DDNAME of the data set\n     READ/WRITE      is the function being performed\n     error message   is a short description of the problem encountered\n     hexbbcchhr      is the actual address of the error in hexadecimal\n     BPAM S          indicates the data set was a PDSE\n     hexttr          is the TTR (token address) of the member in error.\n     relrec#num      is the relative record number of the error.  Note:\n                     add 1,048,576 to get the actual TTR of the record.\n     smsretur        is the SMS return code.\n     smsreasn        is the SMS reason code.\n\n))PDS996E subcommand IS NOT SUPPORTED FOR PROGRAM OBJECTS\n   The following subcommands and functions are not yet supported for\n   program objects (load members in PDSE data sets):\n     ALIAS   -  assign an alias to a program object.\n     ATTRIB  -  update module attributes; ATTRIB can display\n                attributes of program objects, however.\n     REPLACE -  update a program object.\n     REPRO   -  reproduce a program object.\n\n))PDS997E DIFFERENT VERSION OF PDS REINVOKED\n   When ISPF services are requested within PDS and it has been\n   invoked outside of ISPF (i.e. \"READY\" mode), PDS reinvokes itself\n   recursively as an ISPF dialog to use ISPF services.\n\n   This error indicates that a different version of -PDS86- was\n   entered on the recursive entry.  This can happen if you invoke\n   -PDS86- from either LINKLIST, LPALIB or STEPLIB and you have\n   a different copy of -PDS86- in your ISPLLIB data set.\n\n   This error is detected by comparing the assembly date and time of\n   the calling version of PDS with the corresponding values from the\n   invoked version of PDS.\n\n))PDS998E ABEND Sxxx LOADING THIS MODULE\n   The displayed ABEND code was received while loading this module.\n\n   If you have your user profile set to WTPMSG as in the TSO command,\n   PROFILE WTPMSG, you should have also first received an IEA703I\n   message with the same ABEND code and a possible return code.\n\n   In the following table of common messages, the ABEND identifier\n   from the PDS998E message and the first part of the associated\n   IEA703I message or a CSV011I message with a return code or a\n   CSV016I message are listed with a short error description:\n\n     ABEND  ASSOCIATED MSG   DESCRIPTION\n     -----  --------------   -----------\n     S106   IEA703I 106-C    Insufficient storage to load the module\n     S106   IEA703I 106-D    Invalid record type in load module\n     S106   IEA703I 106-E    Invalid TTR address in load module\n     S106   IEA703I 106-F    Uncorrectable I/O error in load module\n     S306   IEA703I 306-8    Uncorrectable I/O error searching linklist\n     S706   IEA703I 706      \"Not Executable\" module\n\n     S106   CSV011I RC=0B    FETCH routine error\n     S106   CSV011I RC=0C    Insufficient storage to load the module\n     S106   CSV011I RC=0D    Invalid record type in load module\n     S106   CSV011I RC=0E    Invalid TTR address in load module\n     S106   CSV011I RC=0F    Uncorrectable I/O error in load module\n     S106   CSV011I RC=10    Relocation error in load module\n     S706   CSV016I RC=04    \"Not Executable\" module\n\n))PDS999E ABEND Sxxx Unnnn AT hexvalue IN PROGRAM progname\n   This ABEND was noted during -PDS86- execution. The various\n   fields are as follows:\n     Sxxx     - the system ABEND code\n     Unnnn    - the user ABEND code\n     hexvalue - if signed, an offset from the routine entry point;\n                otherwise, the address of the abending instruction.\n     progname - the name of the abending program (if available)\n                a. PDSMAIN - ABEND in the PDS mainline\n                b. PARSE   - ABEND in the PARSE interface\n                c. ISPDSPY - ABEND in the ISPF Dialog routines\n                d. VSUBCMD - ABEND in the subcommand check\n                e. VTSOCMD - ABEND in the TSO command check\n                f. subname - ABEND in the subroutine identified below:\n                     |\n                     v\n                   ALIAS    AMBLIST  ATTRIB   BROWSE   CHANGE\n                   CLEAR    COBANAL  COMPARE  COMPRESS CONTROL\n                   COPY     CPKMAP   DELETE   DELINK   DISASM\n                   DISPLAY  DSNAMES  EXEC     FIXPDS   HELP\n                   HISTORY  IF       LCS      LIST     LMA\n                   LOAD     MAP      MATCH    MXIBAT   OFFLOAD\n                   OUTCOPY  PRINTOFF PTSEXP   RENAME   REPRO\n                   RESTORE  RX       SMPGEN   SRCHFOR  SUBLIST\n                   TIME     TSO      TSOEDIT  USAGE    FAMS\n                   VERIFY   VPDSE    XMIT\n\n   Note: These control sections contain other subcommand processing.\n\n   BROWSE  (EDIT, ISPF, ISPMODE, MEMLIST, and VIEW)\n   DELETE  (MEMBERS and SUBMIT)\n   TSOEDIT (FSE)\n   LIST    (DIRENTRY, FIND, and REPLACE)\n   DISPLAY (PATTERN)\n\n))IEB19CI MEMBER member {COPIED | LOADED}, text\n\n   Explanation:  COPYMOD has been specified. The member is a load module\n   which has been copied to the output data set with no change in block\n   size or content. The link edit attributes of the member make it\n   ineligible for processing by COPYMOD.\n\n   In the message text:\n\n   member    The specified member.\n\n   text      One of the following:\n\n             o   AS IS THEN ALTERED, MODULE IS PAGE-ALIGNED\n\n                 Note: copied without reblocking and the functions of\n                 ALTERMOD are performed against the copy.\n\n             o   AS IS WITHOUT REBLOCKING, FORMAT IS SCATTER-LOAD\n\n             o   AS IS WITHOUT REBLOCKING, MODULE IS NON-EDITABLE\n\n   The severity is 4.\n\n   System action\n\n   The member was copied unaltered.\n\n))IEB1163E SYSTEM ABEND code OCCURRED, TERMINATING IEBCOPY\n\n   Explanation:  When one of the system ABENDs, S213, S913, S80A, S878,\n   or SD37 occurs, the ESTAE recovery routine issues this message.\n\n   System Action:  The copy operation terminates after freeing all\n   obtained storage.\n\n))IEBG00I DATA SET UTILITY - GENERATE\n   IEBGENER header message.  COPY member to sequential file.\n\n))IEBG99I PROCESSING ENDED AT EOD\n   IEBGENER trailer message.  COPY member to sequential file.\n\n)O OPERANDS -\n))MSG(PDSxxx) - the message identifiers in the list identify the\n                messages to be explained.\n\n                For example, to have the PDS120I and the PDS999E\n                messages explained in further detail, you should enter\n                the following -PDS86- subcommand:\n                HELP MSG MSG(PDS120,PDS999)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PGLITE": {"ttr": 10244, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x1a\\x00V\\x01\\x19\\x16\\x1f\\x01\\x19 ?\\x14#\\x00I\\x00#\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf8\\xf2@@@'", "ispf": {"version": "01.26", "flags": 0, "createdate": "2019-06-10T00:00:00", "modifydate": "2019-07-22T14:23:56", "lines": 73, "newlines": 35, "modlines": 0, "user": "FILE182"}, "text": "Introduction:\n  This application supports PDSE V2 member generations and is based on the full\n  function Lionel B. Dyck PDSEGEN dialog.  PGLITE is a simpler version, or\n  subset, of PDSEGEN.\n\n  This table application demonstrates the use of ISPF Dynamic Areas.  Benchmark\n  tests have shown dynamic area tables can be up to 10x faster than ISPF tables.\n\n  This dialog is self-contained.  All the panels, execs, and object text are\n  included in the driver exec, PGLITE.\n\nPrimary Commands:\n  Locate member  Scroll to mbr: name           Find      Scroll to mbr/ name\n  Change dsname  Switch to another DSN         REFresh   Refresh member list\n  Select member  Select member for Edit        FLip      Switch to prev DSN\n  BIG filter     Switch to PDSEGEN             SORT col  Sort by column\n  RFind          Repeat Find                   Info      Dataset Information\n  CLIST          View SuperC compare listing   VALidate  Validate PDSE\n  Real           PDSEGEN backup real names     SRCHfor   Search PDSEGEN backup\n  ISPList        Write out member list         VERSion   Show PGLITE version\n  REFList        ISPF Reference list           /         Hotlist pop-up\n\nLine Commands:\n  E  ISPF Edit       V  ISPF View       T  Tryit Edit macro\n  S  ISPF Edit       B  ISPF Browse     Z  Edit Compare non-0 gen to gen 0\n\nAbsolute generation numbering:\n  generation 0 (current or base)\n  generation 3 (third - previous)\n  generation 2 (second)\n  generation 1 (first - oldest)\n\nHot Spots:\n  PGLITE\u00ae         Switch to PDSEGEN\n  Name            SORT Name\n  Created         SORT Created\n  Changed         SORT Changed\n  Size            SORT Size\n  Id              SORT Id\n\nCustom:\n  Local site customization values on lines with\n     <<=== MODIFY\n  Create DESERV interface module (PDSEGENI) with\n    TSO %PGLITE >PDSEGENI\n          -or-\n    TSO SUBMIT the Rexx exec, PGLITE.\n\nTips:\n  When invoking PDSEGEN via the BIG primary command, you can stack\n  a PDSEGEN primary command by using the ISPF command delimiter, the\n  semicolon.  For example,\n\n    BIG filter;Dataset Command\n\n  Dataset Commands:\n      BACkup   RESTore   COPy   MODel   Prune\n\nPDSEGEN Backup Dataset Notes:\n  Edit and View on a PDSEGEN backup member (@000000n) will fire the\n  GNAME Edit macro to display the real member name and generation\n  number in a NOTELINE.  The REAL command will display the real\n  member names and generations in the GenNum and Created columns of\n  the member list display.\n\nMods:\n<ISREDDE2 mod to display Gen: number in title - optional>\n/*  Add to end of )INIT section  */\nIF (&gen = '')\nELSE\n   IF (&zmemb \u00ac= ' ') &ztitle =  '&zdsn(&zmemb) Gen: &gen'\n   IF (&zmemb  = ' ') &ztitle =  '&zdsn'\n</ISREDDE2 mod>\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "RELEASE": {"ttr": 10247, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x14\\x01\\x07\\tO\\x01\\x07\\tO# \\x00\\x17\\x00\\x17\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf2\\xf9\\xf6@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2007-04-04T00:00:00", "modifydate": "2007-04-04T23:20:14", "lines": 23, "newlines": 23, "modlines": 0, "user": "FILE296"}, "text": ")F FUNCTION -\n  THE RELEASE COMMAND IS USED TO FREE UP UNUSED SPACE FROM AN\n  EXISTING DATASET.\n)X SYNTAX -\n         RELEASE 'DATASET-NAME' LEAVE('TRACKS') EXTENTS\n                 VOLUME('VOL-SER')\n  REQUIRED - 'DATASET-NAME'\n  DEFAULTS - ALL UNUSED TRACKS ARE RELEASED IF NEITHER\n             'LEAVE' NOR 'EXTENTS' IS SPECIFIED.\n  ALIAS    - NONE\n)O OPERAND -\n  'DATASET-NAME'\n         - SPECIFIES THE NAME OF THE DATASET WHICH IS TO HAVE\n           ITS UNUSED SPACE RELEASED.\n))LEAVE('TRACKS') - 'TRACKS' IS THE NUMBER OF UNUSED TRACKS\n           NOT TO BE FREED.\n))EXTENTS - THIS KEYWORD INDICATES THAT ONLY UNUSED SECONDARY\n           EXTENTS ARE TO BE FREED.  THE PRIMARY EXTENT AND\n           ANY PARTIALLY USED SECONDARY EXTENTS ARE NOT FREED,\n           EVEN IF THEY CONTAIN UNUSED SPACE.\n           THIS KEYWORD AND 'LEAVE' ARE MUTUALLY EXCLUSIVE.\n))VOLUME('VOL-SER') - 'VOL-SER' IS THE VOLUME SERIAL NUMBER\n           OF THE DATASET IF IT IS NOT CATALOGED\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "REV": {"ttr": 11014, "alias": true, "halfwords": 30, "notes": 0, "parms": "b'0\\x03\\x002\\x00\\x84#\\x7f\\x01\\x18#\\x1f\\x175\\x08\\xb4\\x00L\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf3\\xf4@@@'", "ispf": {"version": "48.03", "flags": 0, "createdate": "1984-08-24T00:00:00", "modifydate": "2018-08-19T17:35:32", "lines": 2228, "newlines": 76, "modlines": 0, "user": "FILE134"}}, "REVED": {"ttr": 10249, "alias": true, "halfwords": 30, "notes": 0, "parms": "b'0\\x03\\x00C\\x01\\x04\\x07?\\x01\\x18#\\x1f\\x173\\x07*\\x02\\xdf\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf3\\xf4@@@'", "ispf": {"version": "48.03", "flags": 0, "createdate": "2004-03-13T00:00:00", "modifydate": "2018-08-19T17:33:43", "lines": 1834, "newlines": 735, "modlines": 0, "user": "FILE134"}}, "REVEDIT": {"ttr": 10249, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'0\\x03\\x00C\\x01\\x04\\x07?\\x01\\x18#\\x1f\\x173\\x07*\\x02\\xdf\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf3\\xf4@@@'", "ispf": {"version": "48.03", "flags": 0, "createdate": "2004-03-13T00:00:00", "modifydate": "2018-08-19T17:33:43", "lines": 1834, "newlines": 735, "modlines": 0, "user": "FILE134"}, "text": "*                    TSO HELP FOR 'REVEDIT' RELEASE 48.3    AUGUST 2018\n)F Function -\n  REVEDIT is the fullscreen editor component of the REVIEW command.\n  REVEDIT is not a TSO command, but this HELP member will be accessed\n  when HELP is requested in a non-ISPF environment.\n\n  The TSO command to access the REVIEW Editor directly is REVED.\n\n  REVEDIT allows the editing of MVS data sets residing on direct\n  access storage devices (DASD) which may contain records which have\n  a fixed-length or variable-length format.  Currently only non-VSAM\n  is supported.\n\n  When the REVED alias of REVIEW is used to process a PDS, the default\n  action of the 'S' selection code is changed from Browse to Edit.\n\n  The data set being browsed by REVIEW can be edited with REVEDIT\n  by issuing an UPDATE or EDIT or VIEW primary command.  If REVIEW is\n  operating as an ISPF application, then the EDIT and VIEW commands\n  will invoke the corresponding ISPF function instead of REVEDIT.\n\n  Under MVS/ESA and later (including OS/390 and z/OS) data being\n  edited may be held in a data space which can grow with the data up\n  to two gigabytes (2GB) in size subject to installation limits\n  implemented either by design (eg. system exits) or circumstance (eg.\n  insufficient auxiliary storage to allow processing to continue).\n\n  On pre-ESA systems data being edited is held in the user region.\n\n  REVEDIT can also be invoked in VIEW mode indicated by blue (instead\n  of green) line numbers.  Changes made to the data in VIEW mode\n  cannot be saved back to the data set being viewed.  Data being\n  viewed - whether changed or not - can be exported using the CREATE\n  and/or REPLACE subcommands.\n\n  When a data set is being edited it is serialized to protect against\n  concurrent update.  This serialization is not performed for VIEW.\n)X Syntax -\n         REVED   'dsname'\n                    VOLUME('volume')\n                    UNIT('unit')\n                    QUICK\n                    GEN\n                    XISPMODE\n     or\n         REVED   'filename'  FILE  XISPMODE\n     or\n         REVED   'pathname'\n\n  Required - 'dsname'\n     or      'filename'  FILE\n     or      'pathname'  which must begin with a slash or tilde\n     or      no operands for \"point and shoot\".\n\n  Defaults - UNIT(SYSALLDA) when VOLUME is specified.\n)O Operands -\n)P 'dsname' or 'dsname(member)' - The data set to be examined.\n   'filename' - The DDNAME allocated to the data set to be examined.\n   'pathname' - The path name of an UNIX directory.\n\n   If the first operand begins with a slash ('/') or a tilde ('~')  to\n   then it is deemed to specify an UNIX directory path, and no other.\n   operands are allowed.  The tilde specifies the user's home\n   directory.  A specific UNIX file may be specified to directly\n   access the data contained in the file.\n\n   If the first operand does not begin with a slash or tilde then it\n   is assumed to be a DSNAME unless it is followed by the keyword\n   'FILE'.\n\n   Specifying the file name of PARMLIB when there is no PARMLIB DD\n   allocated on a OS/390 1.2 or later system requests that the\n   logical PARMLIB service be used to REVED the system PARMLIB\n   concatenation.\n\n   If no operands are supplied then REVED reads the screen image\n   and extracts the data set name from the part of the screen\n   containing the cursor.  This works in both fullscreen and line\n   modes, but not under Session Manager which updates the screen\n   before REVED receives control.  If a data set name is not found\n   then normal TSO prompting is commenced except for a recursive\n   REVIEW/REVED session where a message is displayed.\n\n   ISPF users may like to load\n       TSO REV) MODE(FSCR\n   into a PF key for easy access to \"point and shoot\", although\n       TSO REV\n   provides the same functionality since OS/390 2.10.  Similarly,\n       TSO REV\n   can be loaded into a RFE/REVIEW/REVED Program Function key.\n\n   A member name is NOT considered part of the data set name for\n   \"point and shoot\" purposes.\n\n   A UNIX path name cannot be processed by \"point and shoot\".\n\n))FILE     - This keyword indicates that the first operand is\n             a FILENAME, not a DSNAME.  This is useful for looking\n             at a temporary data set or at concatenated libraries.\n             A member name may be specified in the first operand\n             after the DDNAME if the DDNAME is allocated to a\n             PDS.  This allows you to enter 'REVED SYSPROC(X) F'\n             to edit member 'X' in whatever PDS is allocated to\n             DDNAME 'SYSPROC'.\n\n             The 'FILE' operand may be abbreviated to 'F'.\n\n))VOLUME('volume') - For uncataloged data sets, the volume serial.\n\n             'VOLUME' may be abbreviated to 'V'.\n\n))UNIT('unit') - For uncataloged data sets, the unit type.\n             This operand is ignored if 'VOLUME' is not specified.\n             If 'VOLUME' is specified the default unit is 'SYSALLDA'.\n             For data sets accessed via the catalog, the unit is\n             determined from the catalog entry.\n\n             'UNIT' may be abbreviated to 'U'.\n\n))QUICK    - This indicates that if an unquoted data set name was\n             specified then the name was fully qualified apart from\n             the prefix (ie. no trailing qualifier has to be added).\n             This saves a search of the catalog to look for trailing\n             qualifiers which is otherwise performed unconditionally\n             unless the 'VOLUME' operand was specified.  This operand\n             is ignored if 'VOLUME' is specified.\n\n             The 'QUICK' operand may be abbreviated to 'Q'.\n\n))GEN      - This operand - valid for z/OS systems only - specifies\n             that if the member list of a Version 2 PDSE data library\n             which may have generation members is to be shown, then\n             all extant member generations should also be shown in\n             the member list.  The 'REF N' and 'REF G' member list\n             commands can be used to dynamically switch the display\n             of member generations in the member list.  Currently,\n             the display of member generations for PDSE program\n             libraries is not supported.\n\n             The 'GEN' operand may be abbreviated to 'G'.\n\n))XISPMODE - This specifies that REVED\n             1) is not to act as an ISPF application and is therefore\n                to perform terminal I/O and subcommand processing\n                natively; and\n             2) is not to determine terminal capabilities from ISPF\n                variables but is to issue a Read Partition (Query)\n                itself if appropriate.\n\n             This operand will only affect processing in an ISPF\n             environment.\n\n             The 'XISPMODE' operand may be abbreviated to 'X'.\n\n))PFK      - This is not an operand, but a description of\n             the Program Function Keys used by this command.\n              PFK1  - HELP    PFK2  - START      PFK3  - END\n              PFK4  - TSO     PFK5  - RFIND      PFK6  - RCHANGE\n              PFK7  - UP      PFK8  - DOWN       PFK9  - SWAP NEXT\n              PFK10 - LEFT    PFK11 - RIGHT      PFK12 - RECALL\n              PFK13 - TOP     PFK14 - BOTTOM     PFK15 - END\n              PFK16 - SMF     PFK17 - RFIND      PFK18 - EREP\n              PFK19 - UP      PFK20 - DOWN       PFK21 - HEX\n              PFK22 - ASCII   PFK23 - TSO REV    PFK24 - HEXC\n             These can be changed using the PFK# subcommand, but the\n             changes are in effect only until the command ends unless\n             a profile data set is allocated to DDNAME 'ISPPROF'\n             under z/OS or 'REVPROF' under MVS/370.\n             Example: 'PFK6 RIGHT 1' would make PFK6 'RIGHT 1'.\n)S Subcommands -\n ----------------------- GLOBAL SUBCOMMANDS ---------------------------\n\n These subcommands are available in all display modes of REVIEW:\n\n   HELP    - Request HELP about REVIEW and/or its subcommands.\n             This will be intercepted by ISPF if REVIEW is\n             running as an ISPF dialog.\n   HEL     - Same as 'HELP' except ISPF will not intercept it.\n   FSHELP  - Same as 'HEL'.\n   FSH     - Same as 'HEL'.\n   KEYS    - Display current Program Function Key values.\n   ?       - Display the release of REVIEW that is in use.\n   TASK    - Display Task Control Block and Request Block structure.\n   TCB     - Same as 'TASK'.\n   RB      - Same as 'TASK'.\n   CDE     - Show the Job Pack Area's Contents Directory Elements.\n   JPA     - Same as 'CDE'.\n   TSO     - Issue a TSO command.\n   TSS     - Same as 'TSO'.\n   PFK#    - Set Program Function Key '#' to a specified value.\n   PFK0    - Set Program Function Keys to default values.\n   RECALL  - Recall previously typed-in commands for optional\n             editing and reissuing.\n   RETRIEVE- Same as 'RECALL'.\n   SCRNAME - Assign a new name to this logical screen session.\n   START   - Create a new RFE (REVIEW Front End) parallel session.\n   SPLIT   - Same as 'START'.\n   SWAP    - List or transfer control between parallel sessions.\n   UP      - Scroll backwards a specified number of lines or records.\n             If no operand is specified, the 'scroll' value is used.\n             This is displayed in the upper right corner.\n   '-'     - Same as 'UP'.\n   DOWN    - Scroll forwards a specified number of lines or records.\n             If no operand is specified, the 'scroll' value is used.\n             This is displayed in the upper right corner.\n   '+'     - Same as 'DOWN'.\n   TOP     - Scroll up to the first line or record.\n   BOTTOM  - Scroll down to the last line or record.\n   BOT     - Same as 'BOTTOM'.\n   END     - END the command.\n   CANCEL  - Same as 'END' but user profile changes are not saved.\n   CAN     - Same as 'CANCEL'.\n   EXIT    - Terminate the whole REVIEW session.\n   RETURN  - Same as 'EXIT'.\n   =X      - Same as 'EXIT' when not running as an ISPF dialog.\n\n ----------------------- REVEDIT SUBCOMMANDS -----------------------\n\n These subcommands are available while editing file data:\n\n   LEFT    - Scroll to the left a specified number of columns.\n             If no operand is specified, the 'scroll' value is used.\n   '<'     - Same as 'LEFT'.\n   RIGHT   - Scroll to the RIGHT a specified number of columns.\n             If no operand is specified, the 'scroll' value is used.\n   '>'     - Same as 'RIGHT'.\n   LIST    - Display the specified record number (relative record\n             numbers only, not sequence numbers) or labelled record.\n   L       - Same as 'LIST'.\n   LOC     - Same as 'LIST'.\n   LOCATE  - Same as 'LIST'.\n   CAPS ON - Ensure all data entered is translated to upper case.\n   CAPS OFF- Ensure the case of entered data is not changed.\n   CAPS    - Toggle the CAPS setting.\n   NULL ON - Use nulls (x'00) to reprsent trailing blanks in the data.\n   NULL OFF- Use blanks to represent trailing blanks in the data.\n   NULL    - Toggle the NULL setting.\n   NULLS   - Same as 'NULL'.\n   COLS ON - Activate the column marker.\n   COLS OFF- Deactivate the column marker.\n   COLS    - Toggle the display of the column marker.\n   PROF ON - Activate the profile settings display line.\n   PROF OFF- Deactivate the profile settings display line.\n   PROF    - Toggle the display of the profile settings line.\n   COPY    - Import the contents of a data set into the edited data.\n   CREATE  - Create a new data set or member with edit session data.\n   CRE     - Same as 'CREATE'.\n   REPLACE - Replace a data set or member with edit session data.\n   REP     - Same as 'REPLACE'.\n   REPL    - Same as 'REPLACE'.\n   DELETE  - Delete either all excluded or all unexcluded records.\n   DEL     - Same as 'DELETE'.\n   HEX ON  - Display the data in hexadecimal and character formats.\n   HEX OFF - Display the data in character format.\n   HEX     - If HEX currently on, turn it off.  If off, turn it on.\n   HI OFF  - Turns off syntax highlighting.\n   HI JCL  - Activates JCL source code syntax highlighting only.\n   HI AUTO - Activates syntax highlighting based on the type of\n             data detected by REVEDIT.\n   HI ASM  - Set HI AUTO in the profile and set the current source\n             type to Assembler.\n   HI CLIST- Set HI AUTO in the profile and set the current source\n             type to CLIST.\n   HI DATA - Set HI AUTO in the profile and set the current source\n             type to DATA which suppresses non-JCL highlighting.\n   HI PLI  - Set HI AUTO in the profile and set the current source\n             type to PL/I.\n   DSNCHECK- Control catalog look-up when HI JCL is set.\n   TABS    - Set software tabbing columns.\n   FIND    - Search until the specified data or pattern is found.\n   F       - Same as 'FIND'.\n   FINDNOT - Search until the specified data or pattern is not found.\n   FN      - Same as 'FINDNOT'.\n   RFIND   - Repeat the previous FIND or FINDNOT or EXCLUDE or EXNOT.\n   IFIND   - Same as 'RFIND'.\n   CHANGE  - Search for specified data and replace it.\n   RCHANGE - Repeat the previous CHANGE operation.\n   ICHANGE - Same as 'RCHANGE'.\n   EXCLUDE - Exclude lines from display.\n   X       - Same as 'EXCLUDE'.\n   FLIP    - Toggle the exclusion status of every data record.\n   BOUNDS  - Control the column range to which commands apply.\n   STATS   - Set whether member statistics are to be stored or not.\n   LEVEL   - Set the modification level of the member statistics.\n   VERSION - Set the version level of the member statistics.\n   NUMBER  - Set sequence numbering on or off.\n   UNNUM   - Clear sequence numbers from the data.\n   PROFILE - Display current profile settings.\n   PROF    - Same as 'PROFILE'.\n   REDO    - Undo an 'UNDO'.\n   RENUM   - Resequence the data records.\n   RESET   - Various pending actions and controls. exclusions.\n   RES     - Same as 'RESET'.\n   SORT    - Sort records into a different order based on data content.\n   SUBMIT  - Submit the data set or MEMBER being edited.\n             TSO SUBMIT is invoked.\n   SUB     - Same as 'SUBMIT'.\n   SB      - Same as 'SUBMIT' but with no line mode messages.\n   CUT     - Copy records from the edit data to the clipboard.\n   PASTE   - Copy some records from the clipboard into the edit data.\n   UNDO    - Undo a change to the data being edited or viewed.\n   UNDO ON - Enable UNDO.\n   UNDO OFF- Disable UNDO and release UNDO resources.\n   ZAP     - Control whether PDS members with fixed-length records\n             that have an unchanged record count at save time are\n             to be stored in the same location (using update-in-place)\n             to save disk space, or not.\n   SAVE    - Write the data being edited back to its source data set.\n   AUTOSAVE- Control the data save action of the END subcommand.\n --------------------- REVEDIT LINE COMMANDS ---------------------\n\n These actions codes are entered in the line number field in the\n left margin and specify locations for specific actions.\n\n          Table of valid line action codes.\n---------------------------------------------------------------------\nCode| Meaning |n|B|Bn|R| Description\n----| ------- |-|-|--|-| --------------------------------------------\n  ( | left    |C|Y|C |!| shift data in record(s) left\n  ) | right   |C|Y|C |!| shift data in record(s) right\n  A | After   |X| |  | | target of copy or move is after this line\n  B | Before  |X| |  | | target of copy or move is before this line\n  C | Copy    |L|Y|  | | line(s) to be copied\n  D | Delete  |L|Y|  | | line(s) to be deleted\n  F | First   |L| |  | | first lines of excluded block are unexcluded\n  I | Insert  |L| |  | | insert new line(s) after this line\n  L | Last    |L| |  | | last lines of excluded block are unexcluded\n  M | Move    |L|Y|  | | line(s) to be moved\n  O | Over    |L|Y|  |!| line(s) to be overlaid\n  R | Repeat  |X|Y|X | | line(s) to be repeated\n  S | Show    | | |  | | selected excluded block is unexcluded\n  U | Upper   |L|Y|  |!| line(s) to be translated to upper case\n  W | loWer   |L|Y|  |!| line(s) to be translated to lower case\n  X | eXclude |L|Y|  | | line(s) to be excluded\n TF |TextFlow |C| |  |!| reflow text\n TS |TextSplit|L| |  |!| split text to a new line and insert\n TE |TextEntry| | |  |!| use rest of screen as a single entry field\n---------------------------------------------------------------------\n   Legend: n - Function of multiplier number after action code.\n           B - Can the action code be doubled to denote the first\n               and last lines of a contiguous block of lines?\n          Bn - Function of multiplier number after action block code.\n           R - Does the BOUNDS setting control the target column range?\n           C - Multiplier specifies number of columns.\n           L - Multiplier specifies number of lines.\n           X - Multiplier specifies number of times.\n           Y - Yes, the code can be doubled for block start and end.\n           ! - Yes, only columns in the BOUNDS range are updated.\n ----------------------------------------------------------------------\n Additional notes for TE (Text Entry):\n (1) Input text is reflowed into the column range described by the\n     current BOUNDS setting of new lines when <enter> is pressed.\n (2) When the processing of TE data is pending, Program Function keys\n     will function as <enter> and the PF key meanings will be ignored.\n (3) When the processing of TE data is pending, an attention interrupt\n     will cause the TE request to be cancelled, and entered data will\n     be discarded.\n=HELP=HEL=FSHELP=FSH\n)F Function -\n  The HELP subcommand provides function, syntax, and operand\n  information on the 'REVIEW' command and its subcommands.\n)X Syntax -\n         HELP   'subcommand name'\n                FUNCTION  SYNTAX  OPERANDS('keyword list')  ALL\n                POSITIONAL('operand number') MSG('msgid')\n  Aliases  - HEL, FSHELP, FSH\n  Required - None.\n  Defaults - ALL if FUNCTION, SYNTAX, and OPERANDS not specified.\n  Note     - If HELP is entered without any operands a list of\n             subcommands of the current command will be displayed.\n  Note     - 'keyword list' is optional when OPERANDS is used.\n)O Operands -\n)P 'subcommand name'\n           - Name of the subcommand of 'REVIEW' to be explained.\n))FUNCTION - Function data is to be displayed.\n))SYNTAX   - Format is to be displayed.\n))OPERANDS('keyword list')\n           - Operand description is to be displayed.  If\n             'keyword list' is present, only those keyword descriptions\n             are to be displayed.\n    'keyword list'\n           - Keywords separated by commas, blanks, or tabs.\n))ALL      - Function, syntax, and operand descriptions are to be\n             displayed.\n))POSITIONAL('operand number')\n           - A description of the positional operand specified is to\n             be displayed.\n))MSGID('msgid')\n           - A description of the message identified by msgid is to be\n             displayed.\n=FIND=F\n)F Function -\n  The FIND subcommand positions the display to a data string, and\n  the record containing the matched data will have any display\n  exclusion status reset.\n\n  FIND notes:\n   1.  A search argument is required.  A single unquoted asterisk\n       may be used to specify the same argument as was last used.\n   2.  The first operand is always treated as the search argument.\n   3.  The search argument determines whether the search is case\n       sensitive, case insensitive or for a picture string, or\n       for a string of hexadecimal digits byte-aligned with two\n       digits per data byte.\n   4.  Quotation marks are required whenever the string type needs\n       to be specified.\n   5.  Quotation marks are optional for the default string type\n       unless the string contains one or more blank characters.\n   6.  Operands specifying various keywords and/or scope restrictions\n       may be supplied in any order after the search argument.\n)X Syntax -\n     FIND 'string'  'column-1'  'column-2'\n                    'label-1'  'label-2'\n                     FIRST / NEXT / PREV / LAST / ALL\n                     PREFIX / SUFFIX / WORD\n                     EX / NX\n                     UPDATED / NOUPDATE\n\n Alias    - F\n Defaults - NEXT\n Required - 'string'\n)O Operands -\n)P 'string'  - Specifies the data and data type to locate.\n              Quoted strings may have the string type indicated\n              before the leading quote or after the trailing quote.\n              String types are:\n\n              C - Character for case sensitive search.\n\n              T - Text for case insensitive search.\n\n              X - Hexadecimal digits (byte-aligned and two to a byte).\n\n              P - Picture data where special mask characters represent\n                  various categories of data.  Valid picture masks are:\n                     \u00ac - any non-blank character.\n                     $ - any special character.\n                     = - any character.\n                     # - any decimal numeric character.\n                     - - any non-numeric character.\n                     @ - any alphabetic character.\n                     > - any upper case alphabetic character.\n                     < - any lower case alphabetic character.\n                     . - any non-displayable character.\n                  Non-mask characters represent themselves, with\n                  matching of specific alphabetics being case\n                  insensitive.\n\n              Unquoted strings and strings without a string type\n              specified are treated as text (type T) strings,\n              which requests a case insensitive search.\n\n)P 'column-1' - Optional, specifies first or only column to search.\n)P 'column-2' - Optional, specifies last column where the string\n              may end.\n)P 'label-1' - Optional, specifies the label of the first record\n             within the search range, which may or may not be the\n             first record searched depending on the search direction,\n             the cursor location, the current vertical scrolling\n             location, and any specified keywords.  A search in the\n             backward direction will not search records earlier in\n             the data than this record.\n)P 'label-2' - Required if 'label-1' is specified, specifies the label\n             of the last record in the search range. Searches in the\n             forward direction will not search beyond this record.\n))FIRST   - Search forward from the start of the file or member.\n))NEXT    - Search forward from the current location.\n))PREV    - Search backward from the current location.\n))LAST    - Search backward from the end of the file or member.\n))ALL     - Search forward from the start of the file or member\n             for all occurrences, report the count, and show the first.\n))PREFIX  - Search for the string only at the start of a\n              word longer than the string.  PRE for short.\n))SUFFIX  - Search for the string only at the end of a\n              word longer than the string.  SUF for short.\n))WORD    - Search for the string only when it starts at the start\n              of a word and ends at the end of a word.\n))EX      - Only search records excluded from display.  X for short.\n))X       - Same as 'EX'.\n))NX      - Only search records not excluded from display.\n))UPDATED - The operation of this command is to be limited to records\n              which have been updated in this edit session, in addition\n              to any other restrictions specified by other operands.\n              UPDATED may be shortened down to UPD.\n))NOUPDATE- The operation of this command is to be limited to records\n              which are unchanged in this edit session, in addition\n              to any other restrictions specified by other operands.\n              NOUPDATE may be shortened down to NOU.\n=FINDNOT=FN\n)F Function -\n  The FINDNOT subcommand positions the display to a data string which\n  does NOT match the search argument, and the record containing the\n  mismatch will have any display exclusion status reset.\n\n  The notes listed under FIND also apply to FINDNOT.\n)X Syntax -\n   FINDNOT 'string'  'column-1'  'column-2'\n                     'label-1'  'label-2'\n                      FIRST / NEXT / PREV / LAST / ALL\n                      PREFIX / SUFFIX / WORD\n                      EX / NX\n                      UPDATED / NOUPDATE\n\n Alias    - FN\n Defaults - NEXT\n Required - 'string'\n)O Operands -\n)P 'string'  - Specifies the character data to mismatch.\n)P 'column-1' - Optional, specifies first or only column to search.\n              eg. \"FN ' ' 70\"\n                   will search for a non-blank in column 70.\n              eg. \"FN ' ' ALL\"\n                   will count all non-blanks.\n)P 'column-2' - Optional, specifies last column where the string\n              may end.\n)P 'label-1' - Optional, specifies the label of the first record\n             within the search range, which may or may not be the\n             first record searched depending on the search direction,\n             the cursor location, the current vertical scrolling\n             location, and any specified keywords.  A search in the\n             backward direction will not search records earlier in\n             the data than this record.\n)P 'label-2' - Required if 'label-1' is specified, specifies the label\n             of the last record in the search range. Searches in the\n             forward direction will not search beyond this record.\n))FIRST   - Search forward from the start of the file or member.\n))NEXT    - Search forward from the current location.\n))PREV    - Search backward from the current location.\n))LAST    - Search backward from the end of the file or member.\n              for all occurrences, excluding other lines.\n))ALL     - Search forward from the start of the file or member\n             for all occurrences, report the count, and show the first.\n))PREFIX  - Search for the string only at the start of a\n              word longer than the string.  PRE for short.\n))SUFFIX  - Search for the string only at the end of a\n              word longer than the string.  SUF for short.\n))WORD    - Search for the string only when it starts at the start\n              of a word and ends at the end of a word.\n))EX      - Only search records excluded from display.  X for short.\n))X       - Same as 'EX'.\n))NX      - Only search records not excluded from display.\n))UPDATED - The operation of this command is to be limited to records\n              which have been updated in this edit session, in addition\n              to any other restrictions specified by other operands.\n              UPDATED may be shortened down to UPD.\n))NOUPDATE- The operation of this command is to be limited to records\n              which are unchanged in this edit session, in addition\n              to any other restrictions specified by other operands.\n              NOUPDATE may be shortened down to NOU.\n=EXCLUDE=EX=X\n)F Function -\n  The EXCLUDE subcommand positions the display to a data string,\n  and the record containing the matched data will be excluded from\n  display.  Alternatively, EXCLUDE may be used to exclude all lines,\n  exclude all tines that have been updated in this session, or\n  exclude all tines that have not been updated in this session.\n\n  EXCLUDE notes:\n   1.  A search argument is required unless one of ALL, UPDATED\n       or NOUPDATE is the only operand specified.  A single\n       unquoted asterisk may be used to specify the same argument\n       as was last used.\n   2.  The first operand is always treated as the search argument\n       unless one of ALL, UPDATED or NOUPDATE is the only operand\n       specified.\n   3.  The search argument determines whether the search is case\n       sensitive, case insensitive or for a picture string, or\n       for a string of hexadecimal digits byte-aligned with two\n       digits per data byte.\n   4.  Quotation marks are required whenever the string type needs\n       to be specified.\n   5.  Quotation marks are optional for the default string type\n       unless the string contains one or more blank characters.\n   6.  Operands specifying various keywords and/or column numbers\n       may be supplied in any order after the search argument.\n   7.  EXCLUDE will never search records which are excluded from\n       display.\n)X Syntax -\n     EXCLUDE 'string'  'column-1'  'column-2'\n                       'label-1'  'label-2'\n                        FIRST / NEXT / PREV / LAST / ALL\n                        PREFIX / SUFFIX / WORD\n                        UPDATED / NOUPDATE\n              or\n     EXCLUDE ALL / UPDATED / NOUPDATE\n\n Aliases  - EX, X\n Defaults - NEXT\n Required - 'string' unless ALL is the only operand.\n)O Operands -\n)P 'string'  - Specifies the data and data type to locate.\n              Quoted strings may have the string type indicated\n              before the leading quote or after the trailing quote.\n              String types are:\n\n              C - Character for case sensitive search.\n\n              T - Text for case insensitive search.\n\n              X - Hexadecimal digits (byte-aligned and two to a byte).\n\n              P - Picture data where special mask characters represent\n                  various categories of data.  Valid picture masks are:\n                     \u00ac - any non-blank character.\n                     $ - any special character.\n                     = - any character.\n                     # - any decimal numeric character.\n                     - - any non-numeric character.\n                     @ - any alphabetic character.\n                     > - any upper case alphabetic character.\n                     < - any lower case alphabetic character.\n                     . - any non-displayable character.\n                  Non-mask characters represent themselves, with\n                  matching of specific alphabetics being case\n                  insensitive.\n\n              Unquoted strings and strings without a string type\n              specified are treated as character (type C) strings,\n              which requests a case insensitive search.\n\n)P 'column-1' - Optional, specifies first or only column to search.\n)P 'column-2' - Optional, specifies last column where the string\n              may end.\n)P 'label-1' - Optional, specifies the label of the first record\n             within the search range, which may or may not be the\n             first record searched depending on the search direction,\n             the cursor location, the current vertical scrolling\n             location, and any specified keywords.  A search in the\n             backward direction will not search records earlier in\n             the data than this record.\n)P 'label-2' - Required if 'label-1' is specified, specifies the label\n             of the last record in the search range. Searches in the\n             forward direction will not search beyond this record.\n))FIRST   - Search forward from the start of the file or member.\n))NEXT    - Search forward from the current location.\n))PREV    - Search backward from the current location.\n))LAST    - Search backward from the end of the file or member.\n))ALL     - Search forward from the start of the file or member\n             for all occurrences, report the count, and show the first.\n             If ALL is the only operand, then exclude all lines.\n))PREFIX  - Search for the string only at the start of a\n              word longer than the string.  PRE for short.\n))SUFFIX  - Search for the string only at the end of a\n              word longer than the string.  SUF for short.\n))WORD    - Search for the string only when it starts at the start\n              of a word and ends at the end of a word.\n))UPDATED - The operation of this command is to be limited to records\n              which have been updated in this edit session, in addition\n              to any other restrictions specified by other operands.\n              UPDATED may be shortened down to UPD.\n))NOUPDATE- The operation of this command is to be limited to records\n              which are unchanged in this edit session, in addition\n              to any other restrictions specified by other operands.\n              NOUPDATE may be shortened down to NOU.\n=EXNOT=EXN=XN\n)F Function -\n  The EXNOT subcommand positions the display to a data string which\n  does NOT match the search argument, and the record containing the\n  mismatch will be excluded from display.  Excluded lines will not\n  be searched.\n\n  The notes listed under EXCLUDE also apply to EXNOT.\n)X Syntax -\n   EXNOT 'string'  'column-1'  'column-2'\n                   'label-1'  'label-2'\n                    FIRST / NEXT / PREV / LAST / ALL\n                    PREFIX / SUFFIX / WORD\n                    UPDATED / NOUPDATE\n\n Aliases  - EXN, XN\n Defaults - NEXT\n Required - 'string'\n)O Operands -\n)P 'string'  - Specifies the character data to mismatch.\n)P 'column-1' - Optional, specifies first or only column to search.\n              eg. \"XN ' ' 70\"\n                   will exclude a non-blank in column 70.\n              eg. \"XN ' ' ALL\"\n                   will exclude all non-blanks.\n)P 'column-2' - Optional, specifies last column where the string\n              may end.\n)P 'label-1' - Optional, specifies the label of the first record\n             within the search range, which may or may not be the\n             first record searched depending on the search direction,\n             the cursor location, the current vertical scrolling\n             location, and any specified keywords.  A search in the\n             backward direction will not search records earlier in\n             the data than this record.\n)P 'label-2' - Required if 'label-1' is specified, specifies the label\n             of the last record in the search range. Searches in the\n             forward direction will not search beyond this record.\n))FIRST   - Search forward from the start of the file or member.\n))NEXT    - Search forward from the current location.\n))PREV    - Search backward from the current location.\n))LAST    - Search backward from the end of the file or member.\n              for all occurrences, excluding other lines.\n))ALL     - Search forward from the start of the file or member\n             for all occurrences, report the count, and show the first.\n))PREFIX  - Search for the string only at the start of a\n              word longer than the string.  PRE for short.\n))SUFFIX  - Search for the string only at the end of a\n              word longer than the string.  SUF for short.\n))WORD    - Search for the string only when it starts at the start\n              of a word and ends at the end of a word.\n))UPDATED - The operation of this command is to be limited to records\n              which have been updated in this edit session, in addition\n              to any other restrictions specified by other operands.\n              UPDATED may be shortened down to UPD.\n))NOUPDATE- The operation of this command is to be limited to records\n              which are unchanged in this edit session, in addition\n              to any other restrictions specified by other operands.\n              NOUPDATE may be shortened down to NOU.\n=RFIND=IFIND\n)F Function -\n  The RFIND subcommand repeats the previous FIND or FINDNOT or\n  EXCLUDE or EXNOT operation.  No operands are allowed.  It is\n  expected that RFIND will be used as the default meaning of a PFK\n  such as PF5 or PF17.\n\n)X Syntax -\n     RFIND\n\n Alias    - IFIND\n Defaults - Same operation, string, direction and range.\n Required - None.\n)O Operands - None.\n=CHANGE=CHG=C\n)F Function -\n  The CHANGE subcommand performs the alteration of selected data in\n  a specified way.  The display is also repositioned to show the\n  change.\n\n  CHANGE notes:\n   1.  A search argument or \"from string\" is required, as is a\n       data replacement specification or \"to string\".  For either\n       operand (or both operands) a single unquoted asterisk may be\n       used to specify the same argument as was last used\n   2.  The first operand is always treated as the search argument.\n   3.  The search argument determines whether the search is case\n       sensitive, case insensitive or for a picture string, or\n       for a string of hexadecimal digits byte-aligned with two\n       digits per data byte.\n   4.  If the replacement specification is a picture string then\n       it must be the same length as the search argument.\n   5.  The only picture string mask characters that are recognised\n       in the \"to string\" are '=' (to leave the character unchanged),\n       '>' (to perform upper case translation), and '<' (to perform\n       lower case translation).  All other characters are processed\n       literally.\n   6.  Quotation marks are required whenever the string type needs\n       to be specified.\n   7.  Quotation marks are optional for the default string type\n       unless the string contains one or more blank characters.\n   8.  Operands specifying various keywords and/or column numbers\n       may be supplied in any order after the search argument.\n)X Syntax -\n     CHANGE 'string-1'  'string-2'\n                    'column-1'  'column-2'\n                    'label-1'  'label-2'\n                     FIRST / NEXT / PREV / LAST / ALL\n                     PREFIX / SUFFIX / WORD\n                     EX / NX\n                     UPDATED / NOUPDATE\n\n Aliases  - CHG, C\n Defaults - NEXT\n Required - 'string-1', 'string-2'\n)O Operands -\n)P 'string-1' - Specifies the data and data type to be replaced.\n              Quoted strings may have the string type indicated\n              before the leading quote or after the trailing quote.\n              String types are:\n\n              C - Character for case sensitive search.\n\n              T - Text for case insensitive search.\n\n              X - Hexadecimal digits (byte-aligned and two to a byte).\n\n              P - Picture data where special mask characters represent\n                  various categories of data.  Valid picture masks are:\n                     \u00ac - any non-blank character.\n                     $ - any special character.\n                     = - any character.\n                     # - any decimal numeric character.\n                     - - any non-numeric character.\n                     @ - any alphabetic character.\n                     > - any upper case alphabetic character.\n                     < - any lower case alphabetic character.\n                     . - any non-displayable character.\n                  Non-mask characters represent themselves, with\n                  matching of specific alphabetics being case\n                  insensitive.\n\n              Unquoted strings and strings without a string type\n              specified are treated as text (type T) strings,\n              which requests a case insensitive search.\n\n)P 'string-2' - Specifies the replacement data.\n              Quoted strings may have the string type indicated\n              before the leading quote or after the trailing quote.\n              String types are:\n\n              C - Character for replacement exactly as typed.\n\n              T - Text for replacement casing according to the\n                  CAPS setting.\n\n              X - Hexadecimal digits (byte-aligned and two to a byte).\n\n              P - Picture data where special mask characters represent\n                  various categories of data.  Valid picture masks are:\n                     = - character is to be left unchanged.\n                     > - character is to be translated to upper case.\n                     < - character is to be translated to lower case.\n                  Non-mask characters represent themselves.\n                  The picture string must have the same length\n                  as the search argument.  Picture string mask\n                  characters will be treated as actual replacement\n                  characters when ASCII ON is active.\n\n              Unquoted replacement strings will always cause the\n              replacement data to be in upper case.\n\n)P 'column-1' - Optional, specifies first or only column to search.\n)P 'column-2' - Optional, specifies last column where the string\n              may end.\n)P 'label-1' - Optional, specifies the label of the first record\n             within the search range, which may or may not be the\n             first record searched depending on the search direction,\n             the cursor location, the current vertical scrolling\n             location, and any specified keywords.  A search in the\n             backward direction will not search records earlier in\n             the data than this record.\n)P 'label-2' - Required if 'label-1' is specified, specifies the label\n             of the last record in the search range. Searches in the\n             forward direction will not search beyond this record.\n))FIRST   - Search forward from the start of the file or member.\n))NEXT    - Search forward from the current location.\n))PREV    - Search backward from the current location.\n))LAST    - Search backward from the end of the file or member.\n))ALL     - Search forward from the start of the file or member\n             for all occurrences, report the count, and show the first.\n))PREFIX  - Search for the string only at the start of a\n              word longer than the string.  PRE for short.\n))SUFFIX  - Search for the string only at the end of a\n              word longer than the string.  SUF for short.\n))WORD    - Search for the string only when it starts at the start\n              of a word and ends at the end of a word.\n))EX      - Only search records excluded from display.  X for short.\n))X       - Same as 'EX'.\n))NX      - Only search records not excluded from display.\n))UPDATED - The operation of this command is to be limited to records\n              which have been updated in this edit session, in addition\n              to any other restrictions specified by other operands.\n              UPDATED may be shortened down to UPD.\n))NOUPDATE- The operation of this command is to be limited to records\n              which are unchanged in this edit session, in addition\n              to any other restrictions specified by other operands.\n              NOUPDATE may be shortened down to NOU.\n=RCHANGE=ICHANGE\n)F Function -\n  The RCHANGE subcommand repeats the previous CHANGE operation.\n  No operands are allowed.  It is expected that RCHANGE will be\n  used as the default meaning of a PFK such as PF6 or PF18.\n\n)X Syntax -\n     RCHANGE\n\n Alias    - ICHANGE\n Defaults - Same string specifications and direction and range.\n Required - None.\n)O Operands - None.\n=FLIP\n)F Function -\n  The FLIP subcommand causes to exclusion status of every line to be\n  toggled to the opposite setting.  All lines eligible for display\n  are excluded, and all excluded lines become eligible for display.\n\n)X Syntax -\n     FLIP\n\n Aliases  - None.\n Defaults - None.\n Required - None.\n)O Operands - None.\n=DELETE=DEL\n)F Function -\n  The DELETE subcommand causes the deletion of all lines that are\n  either excluded or not excluded.\n\n)X Syntax -\n     DELETE    ALL     EX / NX\n\n Alias    - DEL\n Defaults - None.\n Required - ALL and one of EX and NX.\n)O Operands - None.\n))EX      - Only delete records excluded from display.  X for short.\n))X       - Same as 'EX'.\n))NX      - Only delete records not excluded from display.\n))ALL     - A required operand to verify the scope of the deletion.\n=RESET=RES\n)F Function -\n  The RESET subcommand deactivates all line exclusions and clears\n  all pending line commands.  Indications of CHANGE ALL activity\n  (underscored line number) and CHANGE errors (line number shown in\n  reverse video) are also cleared.  The display of PROFILE details\n  is turned off.\n\n)X Syntax -\n     RESET COMMAND / CHANGE / ERROR / LABEL / EXCLUDED / SOURCE\n           '.label1' '.label2'\n\n Alias    - RES\n Defaults - COMMAND  CHANGE  ERROR  EXCLUDED\n Required - None.\n)O Operands -\n)P '.label1' - Specifies the first or last line of a block of lines\n               to be reset.\n)P '.label2' - Specifies the last or first line of a block of lines\n               to be reset.\n))COMMAND - specifies that pending line commands are to be cleared.\n            COM or CMD for short.\n))CHANGE  - specifies that CHANGE ALL line update indicators are\n            to be cleared.  CHA or CHG for short.\n))ERROR   - specifies that CHANGE ALL line error indicators are\n            to be cleared.  ERR for short.\n))EXCLUDED- specifies that lines will no longer be excluded.\n            X or any abbreviation of EXCLUDED down to EX for short.\n))LABEL   - specifies that line labels will be cleared.\n))SOURCE  - effectively the same as 'ASCII OFF'.\n=UP=-\n)F Function -\n  The UP subcommand moves the display up the specified number of\n  lines; if no operand is entered, the scroll amount is used.\n)X Syntax -\n     UP 'amount'\n\n Aliases  - UP, -\n Defaults - Scroll amount\n Required - None.\n)O Operands -\n)P 'amount' - Specifies the number of lines to move the display.\n              It must be a decimal number, or 'HALF' ('H') or\n              'PAGE' ('P') or 'CSR' ('C') or 'MAX' ('M').\n=DOWN=+\n)F Function -\n  The DOWN subcommand moves the display down the specified number\n  of lines; if no operand is entered, the scroll amount is used.\n)X Syntax -\n     DOWN 'amount'\n\n Aliases  - DOWN, +\n Defaults - Scroll amount\n Required - None.\n)O Operands -\n)P 'amount' - Specifies the number of lines to move the display.\n              It must be a decimal number, or 'HALF' ('H') or\n              'PAGE' ('P') or 'CSR' ('C') or 'MAX' ('M').\n=LEFT=<\n)F Function -\n  The LEFT subcommand moves the display left the specified number of\n  columns; if no operand is entered, the scroll amount is used.\n)X Syntax -\n     LEFT 'amount'\n\n Aliases  - LEFT, <\n Defaults - Scroll amount\n Required - None.\n)O Operands -\n)P 'amount' - Specifies the number of lines to move the display.\n              It must be a decimal number, or 'HALF' ('H') or\n              'PAGE' ('P') or 'CSR' ('C') or 'MAX' ('M').\n=RIGHT=>\n)F Function -\n  The RIGHT subcommand moves the display right the specified number\n  of columns; if no operand is entered, the scroll amount is used.\n)X Syntax -\n     RIGHT 'amount'\n\n Aliases  - RIGHT, >\n Defaults - Scroll amount\n Required - None.\n)O Operands -\n)P 'amount' - Specifies the number of lines to move the display.\n              It must be a decimal number, or 'HALF' ('H') or\n              'PAGE' ('P') or 'CSR' ('C') or 'MAX' ('M').\n=TOP\n)F Function -\n  The TOP subcommand moves the display to the first line of the\n  data set or member.  It differs from 'UP MAX' when line exclusion\n  is active in that line exclusion is not cancelled.  In this case,\n  TOP can be used to view the results of a \"FIND ALL\" search from\n  the start without the need to reissue the \"FIND ALL\" command.\n)X Syntax -\n     TOP\n\n Aliases  - None.\n Defaults - None.\n Required - None.\n)O Operands - None.\n=BOTTOM=BOT\n)F Function -\n  The BOTTOM subcommand moves the display to the last line of the\n  data set or member.\n)X Syntax -\n     BOTTOM\n\n Alias    - BOT\n Defaults - None.\n Required - None.\n)O Operands - None.\n=KEYS=?\n)F Function -\n  The KEYS subcommand displays the current Program Function Key\n  values.  Each PF Key (1 to 24) has a default value which may\n  be changed with the PFK command.\n)X Syntax -\n     KEYS\n\n Alias    - ?\n Defaults - None.\n Required - None.\n)O Operands - None.\n=RECALL=RETRIEVE\n)F Function -\n  The RECALL subcommand causes previously typed-in commands to be\n  displayed in the primary input area where they may be changed if\n  required and then reissued.  Note that single character input strings\n  and text implied by PFK usage are not recallable.  The first command\n  recalled is the most recently typed in command.  Consecutive RECALL\n  commands cause increasingly older commands to be recalled.\n)X Syntax -\n     RECALL\n\n Alias    - The DUP character (X'1C').\n Defaults - None.\n Required - None.\n)O Operands - None.\n=PFK\n)F Function -\n  The PFK subcommand changes PFK definitions for the duration of\n  the REVIEW session; to change a PFK, a subcommand such as\n  'PFK6 RIGHT 1'  is entered to change PFK6 to 'RIGHT 1'.\n\n  By default, the PF KEYS are defined as the following:\n              PFK1  - HELP    PFK2  - START      PFK3  - END\n              PFK4  - TSO     PFK5  - RFIND      PFK6  - RCHANGE\n              PFK7  - UP      PFK8  - DOWN       PFK9  - SWAP NEXT\n              PFK10 - LEFT    PFK11 - RIGHT      PFK12 - RECALL\n              PFK13 - TOP     PFK14 - BOTTOM     PFK15 - END\n              PFK16 - SMF     PFK17 - RFIND      PFK18 - EREP\n              PFK19 - UP      PFK20 - DOWN       PFK21 - HEX\n              PFK22 - ASCII   PFK23 - TSO REV    PFK24 - RECALL\n\n  Changes to the PFK assignments may be saved in the profile data set.\n)X Syntax -\n     PFK## 'newpfdata'\n\n Aliases  - None.\n Defaults - None.\n Required - nn and 'newpfdata'\n)O Operands -\n)P  ##      - Specifies the PF Key to be modified.\n              ## is a 1 or 2 decimal digit number in the range of\n              0 to 24 inclusive.  Numbers from 1 to 24 specify a\n              particular Program Function Key.  If ## is 0 then\n              all 24 PF Keys will be assigned their default values.\n\n 'newpfdata'- Specifies the new subcommand for this PF Key.\n=HEX\n)F Function -\n  The HEX subcommand specifies whether the hexadecimal byte\n  contents of the data is to be displayed or not.\n)X Syntax -\n     HEX  ON / OFF\n\n Aliases  - None.\n Defaults - Opposite mode.\n Required - None.\n)O Operands -\n))ON     - Specifies that the data's hexadecimal should be shown.\n))OFF    - Specifies that the data's hexadecimal should not be shown.\n=NULLS=NULL=NUL\n)F Function -\n  The NULLS subcommand specifies whether trailing blanks on a screen\n  line showing a data record are to be written to the terminal as\n  blanks or (except for the first) as nulls to allow 3270 insert\n  mode to operate without prior character deletion.\n)X Syntax -\n     NULLS  ON / OFF / ?\n\n Aliases  - NULL, NUL\n Defaults - Opposite mode.\n Required - None.\n)O Operands -\n))ON     - Specifies that after the last non-blank character and\n         one blank of data shown on a screen line, subsequent blanks\n         to the end of the line will be rendered as nulls.\n))OFF    - Specifies that all blanks in the data will be represented\n         by blanks on the terminal display.\n))?      - Display the current setting without changing it.\n=CAPS\n)F Function -\n  The CAPS subcommand specifies whether input alphabetic data is\n  to automatically be translated to upper case or left unchanged.\n)X Syntax -\n     CAPS  ON / OFF / ?\n\n Aliases  - None.\n Defaults - Opposite mode.\n Required - None.\n)O Operands -\n))ON     - Specifies that lower-case alphabetic data entered by the\n         user will be folded to upper case.\n))OFF    - Specifies that alphabetic data entered by the user will\n         not have its case altered.\n))?      - Display the current setting without changing it.\n=ASCII\n)F Function -\n  The ASCII subcommand specifies whether character data is displayed\n  using ASCII-to-EBCDIC translation or is to be treated as EBCDIC\n  characters.  If turned on then system-supplied translation is\n  carried out.  FIND strings entered while not in the current ASCII\n  setting cannot be used in RFIND operations.  FIND strings entered\n  while ASCII is turned on are translated to ASCII before the search\n  begins.\n)X Syntax -\n     ASCII ON / OFF / ?\n\n Aliases  - None.\n Defaults - Opposite mode.\n Required - None.\n)O Operands -\n))ON     - Specifies that ASCII data is being REVIEWed and should\n           be translated to EBCDIC before being displayed.\n))OFF    - Specifies that the data is to be shown as-is in EBCDIC.\n))?      - Display the current setting without changing it.\n=COLUMNS=COLS=COL\n)F Function -\n  The COLUMNS subcommand can activate a column indicator line so\n  that the exact column number of specific data can be more easily\n  determined.\n     The amount of virtual storage used to hold data being edited\n  is also displayed in the left margin.  If this size is always shown\n  in megabytes (MB) then a data space is being used to hold the data.\n  If this size is ever shown in kilobytes (KB) then the user region\n  is being used to hold the data.\n     The COLUMNS display is not visible when PROFILE ON is in effect.\n  The COLUMNS display is not affected by the RESET command.\n)X Syntax -\n     COLUMNS  ON / OFF\n\n Aliases  - COLS, COL\n Defaults - Opposite mode.\n Required - None.\n)O Operands -\n))ON     - Specifies that top data display line is used to show\n         a column number indicator line.\n))OFF    - Specifies that column number indicator line is not to\n         be shown.\n=STATS\n)F Function -\n  The STATS subcommand specifies whether REVEDIT should save PDS\n  and PDSE member statistics in the directory entry's userdata or not.\n)X Syntax -\n     STATS  ON / OFF\n\n Aliases  - None.\n Defaults - Opposite mode.\n Required - None.\n)O Operands -\n))ON     - Specifies that REVEDIT is to save member statistics.\n))OFF    - Specifies that REVEDIT is not to save member statistics.\n=LEVEL=LEV\n)F Function -\n  The LEVEL subcommand allows a user to specify the modification\n  level number to be saved in a member's statistics.\n)X Syntax -\n     LEVEL  'levnum'\n\n Alias    - LEV\n Defaults - None.\n Required - 'levnum'\n)O Operands -\n)P 'levnum'  - specifies a decimal number in the 0 to 99 range.\n=VERSION=VERS=VER\n)F Function -\n  The VERSION subcommand allows a user to specify the modification\n  version number to be saved in a member's statistics.\n)X Syntax -\n     VERSION 'vernum'\n\n Aliases  - VERS, VER\n Defaults - None.\n Required - 'vernum'\n)O Operands -\n)P 'vernum'  - specifies a decimal number in the 1 to 99 range.\n=ZAP\n)F Function -\n  The ZAP subcommand permits the use of update-in-place to save\n  PDS member contents in some cases in order to save disk space.\n  Update-in-place is only used for non-PDSE PDS members with\n  fixed-length records when the number of records to be saved\n  equals the number of records currently on disk.\n)X Syntax -\n     ZAP  ON / OFF\n\n Aliases  - None.\n Defaults - Opposite mode.\n Required - None.\n)O Operands -\n))ON     - Specifies that REVEDIT is allowed to use update-in-place.\n))OFF    - Specifies that REVEDIT is never to use update-in-place.\n=PROFILE=PROF\n)F Function -\n  The PROFILE subcommand causes the display of the current settings\n  of several editing options which affect how REVEDIT behaves.\n\n  The amount of virtual storage used to hold data being edited is\n  also displayed in the left margin.  If this size is always shown\n  in megabytes (MB) then a data space is being used to hold the\n  data.  If this size is ever shown in kilobytes (KB) then the user\n  region is being used to hold the data.\n\n  The PROFILE display overlays the COLUMNS display, so PROFILE OFF\n  must be in effect for the COLUMNS display to be visible.  The\n  PROFILE display is turned off by the RESET command.\n)X Syntax -\n     PROFILE  ON / OFF\n\n Alias    - PROF\n Defaults - Opposite mode.\n Required - None.\n)O Operands -\n))ON     - Specifies that current profile settings are to be shown.\n))OFF    - Specifies that current profile settings are not to be shown.\n=NUMBER=NUMB=NUM\n)F Function -\n  The NUMBER subcommand specifies whether the data is to have\n  record sequence numbers in the last eight (8) bytes of the data.\n  EBCDIC numeric characters are used.  Only fixed-length records\n  having a length of at least 40-bytes can have sequence numbers\n  maintained by REVEDIT.  For PDS or PDSE members with STATS ON, the\n  last two digits contain the last update modification level number.\n)X Syntax -\n     NUMBER  ON / OFF\n\n Aliases  - NUMB, NUM\n Defaults - None.\n Required - ON or OFF\n)O Operands -\n))ON     - Specifies that the data is to contain sequence numbers.\n))OFF    - Specifies that sequence numbers are not to be used.\n=UNNUMBER=UNNUM=UNN\n)F Function -\n  The UNNUMBER subcommand can only be used when NUMBER ON is in\n  effect, and causes all sequence numbers to be replaced by blanks,\n  and sets NUMBER to OFF.\n)X Syntax -\n     UNNUMBER\n\n Aliases  - UNNUM, UNN\n Defaults - None.\n Required - None.\n)O Operands - None.\n=RENUMBER=RENUM=REN\n)F Function -\n  The RENUMBER subcommand causes all records to have sequence\n  numbers loaded (or reloaded) into the last eight (8) bytes of\n  data, and sets NUMBER to ON.  For PDS or PDSE members with STATS\n  ON, the last two digits contain the last update modification level\n  number.  Only fixed-length records having a length of at least\n  40-bytes can have sequence numbers maintained by REVEDIT.\n)X Syntax -\n     RENUMBER\n\n Aliases  - RENUM, REN\n Defaults - None.\n Required - None.\n)O Operands - None.\n=SCRNAME\n)F Function -\n  The SCRNAME subcommand allows a new name to be assigned to the\n  active logical screen.  This name can be used as the operand of\n  a SWAP subcommand.  Screen names are displayed by SWAP LIST.\n)X Syntax -\n     SCRNAME 'name'\n\n Aliases  - None.\n Defaults - None.\n Required - name\n)O Operands -\n)P 'name'   - Specifies the screen name.  It can be up to eight\n              characters long.  It cannot be completely numeric.\n              It should not be 'NEXT', 'PREV' or 'LIST'.\n=START=SPLIT\n)F Function -\n  The START subcommand requests that a new parallel session is\n  to be initiated and given control.  The new session will be under\n  the RFE (REVIEW Front End) menu hierarchy.  The new session will\n  NOT be started if it would cause the maximum logical session\n  limit to be exceeded.  If no operand is supplied the RFE primary\n  option menu is shown.\n)X Syntax -\n     START  'option'\n\n Alias    - SPLIT\n Defaults - None.\n Required - None.\n)O Operands -\n)P 'option' - any valid RFE main menu option.  An invalid option\n              will cause the main menu to be shown with the\n              'Invalid command' message.\n=SWAP\n)F Function -\n  The SWAP subcommand specifies which parallel REVIEW session is to\n  become the current session.  It can also list the started REVIEW\n  sessions which are eligible to become the current session.  A\n  parallel REVIEW session is created when the REVIEW TSO subcommand\n  (not the ISPF TSO subcommand) is used to create a recursive REVIEW\n  session.  The nesting order of these sessions can be changed by SWAP.\n)X Syntax -\n     SWAP   LIST / NEXT / PREV / # / 'name'\n\n Aliases  - None.\n Default  - switch to previous screen which is listed second\n            by SWAP LIST\n Required - None.\n)O Operands -\n)P 'name'   - Specifies the target screen name which can be up to\n            eight characters long.\n))LIST    - Specifies that all parallel REVIEW sessions are to be\n            listed.\n))NEXT    - Requests switching to next session in increasing\n            session-id order.\n))PREV    - Requests switching to next session in decreasing\n            session-id order.\n))#       - Specifies the decimal number of the target session\n            that is to be swapped with the current session.\n            'SWAP 0' is a no-operation.\n=SUBMIT=SUB=SB\n)F Function -\n  The SUBMIT subcommand invokes TSO SUBMIT to submit the edit\n  session's copy of the data for background processing.  If the SB\n  alias is used, the REVSB CLIST is invoked which prevents line mode\n  messages - the submission message is shown on the top line.\n)X Syntax -\n     SUBMIT\n\n Aliases  - SUB, SB\n Defaults - None.\n Required - None.\n)O Operands - None.\n=COPY\n)F Function -\n  The COPY subcommand facilitates the importing of the contents of a\n  data set or member into the data being edited.  The insertion\n  point is specified by an 'A' (for after) or 'B' (for before) line\n  command.  If there are no edit data lines then the insertion point\n  line command is not required.\n\n  If a member of a partitioned data set is being edited, another\n  member of the same data set can be directly nominated as the copy\n  data source by specifying its name as the subcommand operand.\n\n  If no operands are specified then a data entry panel is displayed\n  where the user can nominate the copy data source.\n)X Syntax -\n     COPY  'member'\n\n Aliases  - None.\n Defaults - None.\n Required - None.\n)O Operands -\n)P 'member'  - Specifies a member name of the PDS being edited.\n=CREATE=CRE\n)F Function -\n  The CREATE subcommand facilitates the exporting of data being\n  edited into a new data set or new member of an old or new data set.\n  The data lines to be copied are specified by a 'C' line command\n  with an optional multiplier, or by a 'CC'..'CC' block of lines.\n\n  If a member of a partitioned data set is being edited, another\n  member of the same data set can be directly nominated as the data\n  target by specifying its name as the subcommand operand.\n\n  If no operands are specified then a data entry panel is displayed\n  where the user can nominate the data set to contain to written data.\n\n  CREATE is the same as REPLACE except that an existing data set (or\n  member if partitioned) will not be overwritten.\n)X Syntax -\n     CREATE  'member'\n\n Alias    - CRE\n Defaults - None.\n Required - None.\n)O Operands -\n)P 'member'  - Specifies a new member name of the PDS being edited.\n=REPLACE=REPL=REP\n)F Function -\n  The REPLACE subcommand facilitates the exporting of data being\n  edited into an existing data set.  The data lines to be copied are\n  specified by a 'C' line command with an optional multiplier, or by\n  a 'CC'..'CC' block of lines.\n\n  If a member of a partitioned data set is being edited, another\n  member of the same data set can be directly nominated as the data\n  target by specifying its name as the subcommand operand.\n\n  If no operands are specified then a data entry panel is displayed\n  where the user can nominate the data set to contain to written data.\n\n  REPLACE is the same as CREATE except that a new data set cannot\n  be created.\n)X Syntax -\n     REPLACE  'member'\n\n Aliases  - REPL, REP\n Defaults - None.\n Required - None.\n)O Operands -\n)P 'member'  - Specifies a member name of the PDS being edited.\n=TSO=TSS\n)F Function -\n  The TSO subcommand specifies a TSO command processor to be invoked\n  from the REVIEW processor.  Commands generating an implicit EXEC\n  such as SYSPROC member names and commands immediately prefixed by\n  a percent sign (%) are supported.\n)X Syntax -\n     TSO  'command' 'operands'\n\n Alias    - TSS\n Defaults - None.\n Required - 'command'\n)O Operands -\n)P 'command'  - Specifies a TSO command to be executed.\n\n)P 'operands' - Specifies any desired operands for this TSO command.\n=LOCATE=LOC=L=LIST\n)F Function -\n  The LOCATE subcommand repositions the display such that the\n  specified line is shown as the first or top-most data line on the\n  screen.\n\n     The line can be nominated either by number, label or condition,\n  and can also be restricted by label range if FIRST or LAST is also\n  specified.\n)X Syntax -\n     LOCATE 'lineno'\n        or\n     LOCATE '.label'\n        or\n     LOCATE COMMAND / CHANGE / ERROR / UPDATE / LABEL\n            FIRST / NEXT / PREV / LAST\n        or\n     LOCATE COMMAND / CHANGE / ERROR / UPDATE / LABEL\n            FIRST / LAST\n            '.label1' '.label2'\n\n Aliases  - L, LOC, LOCATE\n Defaults - NEXT if one of COM, CHA, ERR, UPD or LAB is specified.\n Required - 'lineno' or '.label' or one of COM, CHA, ERR, UPD or LAB\n Note     - See the HELP for LABEL for line label syntax.\n)O Operands -\n)P 'lineno'  - Specifies the relative line number to which the display\n               is to be positioned.\n)P '.label'  - Specifies the label of the line to which the display\n               is to be positioned.\n)P '.label1' - Specifies the first or last line of a block of lines\n               to be searched for the nominated condition.\n)P '.label2' - Specifies the last or first line of a block of lines\n               to be searched for the nominated condition.\n))COMMAND - specifies that a pending line command rather than a\n            record number is to be located.  COM or CMD for short.\n))CHANGE  - specifies that a line altered by a CHANGE ALL rather than a\n            record number is to be located.  CHA or CHG for short.\n))ERROR   - specifies that a line where a CHANGE ALL failed rather than\n            a record number is to be located.  ERR for short.\n))UPDATE  - specifies that a line which has been altered this session\n            rather than a record number is to be located.\n))LABEL   - specifies that a line which has been labelled this session\n            rather than a record number is to be located.\n            LAB or LBL for short.\n))FIRST   - requests the relocation to the first line - within the\n            nominated block if two labels were specified - with the\n            specified condition.\n))NEXT    - requests the relocation to the next line after the\n            current top line with the specified condition.\n))PREV    - requests the relocation to the previous line before the\n            current top line with the specified condition.\n))LAST    - requests the relocation to the last line - within the\n            nominated block if two labels were specified - with the\n            specified condition.\n=LABEL\n)F Function -\n  LABEL is not a subcommand.\n\n  This HELP entry documents the use of line labels.\n\n  A label is assigned by entering the label name by itself in the\n  left margin or line command area on the screen line displaying the\n  record to be labelled.  The label can then be used in a LOCATE\n  command to reposition the display back to the labelled record.\n\n  Also, a pair of line labels can be used in a LOCATE or RESET\n  command to restrict the scope of the requested action.\n\n  A record cannot have more than one label at a time.\n\n  Reusing the same label for a different record will remove that\n  label from the record that was associated with it earlier.\n)X Syntax -\n     '.label'\n\n  where '.label' is a character string which does not exceed 6\n  characters in length, starts with a period, and is followed only\n  by alphabetic characters.\n\n  The alphabetic characters will be folded to upper case automatically\n  both when the label is assigned and when used as a command operand.\n\n  A further restriction on the name of user-defined labels is that\n  the second character may not be 'Z', which is reserved for internal\n  labels.\n\n  Automatically defined internal labels are:\n      .ZFIRST - the first record\n      .ZF     - an abbreviation of .ZFIRST\n      .ZLAST  - the last record\n      .ZL     - an abbreviation of .ZLAST\n      .ZCSR   - the record where the cursor is located\n                or the first record on the screen, as appropriate.\n\n Aliases  - None.\n Defaults - None.\n Required - None.\n)O Operands - None.\n=SORT\n)F Function -\n  The SORT subcommand allows records to be reordered according to\n  data content.\n)X Syntax -\n       SORT  'column-1'  'column-2'\n               A / D\n               EX / NX\n\n Aliases  - None.\n Defaults - A (ascending order), and all records are sorted.\n Required - None.\n)O Operands -\n)P 'column-1' - Optional, specifies first column of the sort field.\n                If not specified the start of the record is assumed.\n)P 'column-2' - Optional, specifies last column of the sort field.\n                If not specified the end of the record is assumed,\n                except for sequence numbers which are not sorted\n                unless the sort field starts within the sequence\n                number data.\n))A           - Requests sorting in ascending order.\n                This is the default.\n))D           - Requests sorting in descending order.\n))EX          - Only search records excluded from display.  X for short.\n))NX          - Only search records not excluded from display.\n=BOUNDS=BOUND=BNDS=BND\n)F Function -\n  The BOUNDS subcommand specifes the active column range which can\n  be processed by several operation types.  Operations limited by\n  the active bounds include text flow, copy over, shift left, shift\n  right, and the various kinds of find and change.  On color\n  terminals data outside the active bounds are shown in blue.\n\n  If no bound columns are apecified then the default bounds are\n  restored.\n)X Syntax -\n       BOUNDS  'column-1'  'column-2'\n\n Aliases  - BOUND, BNDS, BND\n Defaults - None - reset to default bounds.\n Required - None.\n)O Operands -\n)P 'column-1' - specifies the first or left-most column within the\n                active bounds.  If specified as an asterisk then the\n                left bound is not changed.  It must not be greater\n                than 'column-2'.\n)P 'column-2' - specifies the last or right-most column within the\n                active bounds.  If specified as an asterisk then the\n                right bound is not changed.  It must not be less\n                than 'column-2'.\n=CUT\n)F Function -\n  The CUT subcommand copies selected records from the edit data\n  to the clipboard, which is a holding area in your TSO session's\n  region.  Records in the clipboard can be subsequently copied\n  into active edit data by the PASTE subcommand.\n\n  Records to be copied to the clipboard can only be specified by\n  a C line command or by a CC-CC block command.\n)X Syntax -\n       CUT     R / A\n\n Aliases  - None.\n Defaults - R\n Required - None.\n)O Operands -\n))R           - Requests that existing records in the clipboard\n                are discarded.  If no new edit data records are\n                selected then the only function of the command\n                is to empty the clipboard.\n))A           - Requests that existing records in the clipboard\n                are retained.  New selected records are appended\n                to the existing contents of the clipboard.\n=PASTE\n)F Function -\n  The PASTE subcommand copies the contents of the clipboard\n  into the active edit data.  The contents of the clipboard are\n  not altered, and can be copied again by a subsequent PASTE\n  operation.\n\n  The target location for the PASTE is specified by an A (for\n  'after') or a B (for 'before') line command.  When editing an\n  empty data set or member the target location does not have to\n  be specified.\n\n  Data to be pasted is loaded into the clipboard by the CUT\n  subcommand.\n)X Syntax -\n       PASTE\n\n Aliases  - None.\n Defaults - None.\n Required - None.\n)O Operands - None.\n=HILITE=HI\n)F Function -\n  The HILITE subcommand controls syntax coloring and highlighting.\n  This status is saved in the profile if one exists.  The highlighting\n  is only ever displayed when 80-byte records are being edited.\n)X Syntax -\n     HILITE AUTO / ASM / CLIST / JCL / PLI / DATA / OFF\n\n Alias    - HI\n Default  - None.\n Required - one of AUTO, ASM, JCL or OFF.\n)O Operands -\n))AUTO    - specifies that both JCL and non-JCL source highlighting\n            may be displayed.  JCL syntax highlighting is used for\n            records beginning with '//' or '/*'.  Other source types\n            may be detected based upon the data content, especially\n            the first non-comment record.\n))JCL     - specifies JCL syntax highlighting is to be displayed\n            whenever records beginning with '//' or '/*' are shown.\n            Non-JCL records will not be highlighted.\n))ASM     - specifies that automatic syntax highlighting is to be\n            enabled, and that Assembler source syntax highlighting\n            is to be used for non-JCL records in this session.\n))CLIST   - specifies that automatic syntax highlighting is to be\n            enabled, and that TSO CLIST source syntax highlighting\n            is to be used for non-JCL records in this session.\n))PLI     - specifies that automatic syntax highlighting is to be\n            enabled, and that PL/I source syntax highlighting is\n            to be used for non-JCL records in this session.\n))DATA    - specifies that automatic syntax highlighting is to be\n            enabled, but that no highlighting is to be used for\n            non-JCL records in this session.\n))OFF     - specifies syntax highlighting is never to be displayed.\n            This also suppresses JCL highlighting extensions such\n            as data set name catalog look-up.\n=DSNCHECK=DSNCHK=DSNC\n)F Function -\n  The DSNCHECK subcommand controls the handling of data set names\n  when JCL syntax highlighting is active.  When a data set name is\n  recognized after DSN= in JCL, a catalog search is made for that\n  data set.  If it is found in the catalog then the name is highligted\n  with underscores, otherwise it is shown in blue.\n\n  In some cases such as when there are catalog errors, the catalog\n  searches may generate problems.  DSNCHECK provides a way to disable\n  the catalog searches without disabling all JCL syntax coloring.\n\n  Note that &SYSUID is the only symbol that is automatically\n  resolved before the catalog is searched.  Any other occurrence of\n  an ampersand in the data set name will prevent a catalog search.\n)X Syntax -\n     DSNCHECK  ON / OFF / ?\n\n Alias    - DSNCHK, DSNC\n Defaults - Opposite mode.\n Required - None.\n)O Operands -\n))ON     - Enables data set catalog status highlighting.\n))OFF    - Disables data set catalog status highlighting.\n))?      - Display the current setting without changing it.\n=TABS\n)F Function -\n  The TABS commands sets optional software tabbing columns.  After\n  entering data on a line, pressing <emter> will cause the cursor\n  to be moved to the next tab column, which can facilitate more\n  convenient data entry when entering formatted data.\n)X Syntax -\n     TABS    'col1' ('col2') ('col3') ...\n\n Alias    - None.\n Defaults - None.\n Required - 'col1'\n)O Operands -\n)P   The valid operands are 1 or more column numbers.\n  All operands must be numeric and unquoted.\n  No column number is allowed to exceed the maximum record length.\n  A TABS command will replace any previous active tab settings.\n  'TABS 0' can be used to clear active tab settings.\n))OFF    - Disables data set catalog status highlighting.\n=UNDO\n)F Function -\n  The UNDO subcommand without operands instructs the editor to\n  restore the data to the state that existed before the latest\n  changes input by the user were applied.  Only changes performed\n  in the current Edit session since UNDO was last activated can be\n  undone.  No more than 31 consecutive UNDOs can ever be performed,\n  and this number may not be achievable for large data sets.\n\n  The UNDO subcommand with an operand controls whether UNDO is\n  enabled or disabled.  UNDO will not be enabled if the data width\n  exceeds an internal limit of around four thousand columns, nor\n  if there are more records than an arbitrary internal limit.\n\n  Use REDO to undo an UNDO.\n)X Syntax -\n     UNDO  ON / OFF\n\n Aliases  - None.\n Defaults - Perform an UNDO operation.\n Required - None.\n)O Operands -\n))ON     - Specifies that necessary resources are to be acquired\n         and that UNDO is to be enabled.\n))OFF    - Specifies that UNDO is to be disabled and its associated\n         resources can be released.\n=REDO\n)F Function -\n  The REDO subcommand instructs the editor to reapply the changes\n  which were removed by the most recent UNDO subcommand (that has\n  not also been redone).\n\n  REDO is only available if UNDO is enabled and has not not been\n  disabled since the UNDO subcommand being backed out.  Once manual\n  changes are applied to the edit data after an UNDO, that UNDO can\n  no longer be backed out by REDO.\n\n  Use UNDO to undo changes to the data before using REDO.\n)X Syntax -\n     REDO\n\n Aliases  - None.\n Defaults - None.\n Required - None.\n)O Operands - None.\n=CANCEL=CAN\n)F Function -\n  The CANCEL subcommand instructs REVEDIT to discard all data\n  being edited and terminate.\n)X Syntax -\n     CANCEL\n\n Alias    - CAN\n Defaults - None.\n Required - None.\n)O Operands - None.\n=SAVE\n)F Function -\n  The SAVE subcommand instructs REVEDIT to write the data being edited\n  back to the data set which is the nominal source of the data.\n)X Syntax -\n     SAVE\n\n Aliases  - None.\n Defaults - None.\n Required - None.\n)O Operands - None.\n=AUTOSAVE\n)F Function -\n  The AUTOSAVE subcommand specifies whether the END subcommand\n  will perform an automatic save of the data, or prompt the user\n  for a SAVE or CANCEL command.\n)X Syntax -\n     AYTOSAVE  ON / OFF\n\n Aliases  - None.\n Defaults - Opposite mode.\n Required - None.\n)O Operands -\n))ON     - Specifies that the END subcommand will automatically\n         save the data if it has been changed before terminating\n         the REVEDIT session.\n))OFF    - Specifies that the END subcommand will prompt the user\n         to save or discard the data if it has changed before the\n         REVEDIT session can be terminated.\n=END\n)F Function -\n  The END subcommand instructs REVEDIT to terminate the Edit\n  session.\n\n  If no change was made to the data then the data will not be\n  written back to disk.\n\n  If AUTOSAVE is ON and the data was changed then the data\n  will be saved back to the data set being edited.\n\n  If AUTOSAVE is OFF and the data was changed then a message\n  requesting that SAVE or CANCEL be entered will be displayed.\n\n  If END invokes the SAVE function but the SAVE fails, then REVEDIT\n  will not terminate the session.\n)X Syntax -\n     END\n\n Aliases  - None.\n Defaults - None.\n Required - None.\n)O Operands - None.\n=EXIT=RETURN==X\n)F Function -\n  The EXIT subcommand performs the same processing as END, except\n  that if REVEDIT was invoked from a member selection list then the\n  member selection list will not be displayed but instead the entire\n  REVIEW session will end.\n)X Syntax -\n     EXIT\n\n Aliases  - RETURN, =X\n Defaults - None.\n Required - None.\n)O Operands - None.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "REVIEW": {"ttr": 11014, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'0\\x03\\x002\\x00\\x84#\\x7f\\x01\\x18#\\x1f\\x175\\x08\\xb4\\x00L\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf3\\xf4@@@'", "ispf": {"version": "48.03", "flags": 0, "createdate": "1984-08-24T00:00:00", "modifydate": "2018-08-19T17:35:32", "lines": 2228, "newlines": 76, "modlines": 0, "user": "FILE134"}, "text": "*                    TSO HELP FOR 'REVIEW' RELEASE 48.3     AUGUST 2018\n)F Function -\n  The REVIEW command allows a data set or UNIX entity to be examined\n  at a 3270 TSO terminal in full screen mode.  Both disk and tape\n  files may be REVIEWed.  If a PDS or PDSE without a member is\n  specified then a member selection list is displayed.\n\n  When looking at file data, a 'K' may be shown in the \"ruler\"\n  heading line to denote the first and last, or only, column(s) of\n  record keys.  On color terminals the portion of the \"ruler\" line\n  corresponding to record keys is shown in red.  If the record\n  format indicates printer carriage control characters then an 'A'\n  or an 'M' as appropriate may be shown in column 1 of the \"ruler\"\n  heading line.\n\n  When a PDS or PDSE member list is displayed, load module members\n  with a residence mode of ANY are listed in high intensity or green\n  in the member list, while those with a residence mode of 64 are\n  listed in high intensity or yellow in the member list.  For\n  non-program members, aliases are flagged with a green asterisk\n  after the member name, and SCLM-managed members are flagged with\n  an equals sign ('=') in the member list.\n\n  REVIEW can format records according to Assembler data structure\n  source code supplied by the user.  REVIEW can also format system\n  related data such as SMF records, EREP data, VTOC entries, tape\n  labels and load module structure and identification data.  REVIEW\n  can format the directories of ZIP files created by PKZIP, Info-ZIP,\n  WinZIP, etc.\n\n  REVIEW allows the browsing and extraction of individual zipped\n  files within a ZIP archive.\n\n  REVIEW can display the history and structure of program objects\n  residing in PDSE data sets or UNIX files, and load modules\n  residing in PDS data sets, including compilation and program bind\n  timestamps.\n\n  REVIEW can display pictures encoded as 1-bit (black-and-white),\n  4-bit (16 colors) or 8-bit (256 colors) single-plane \".PCX\" (ZSoft\n  Paintbrush) files on a terminal with 3270 graphics capabilities.\n\n  REVIEW can display pictures encoded as 1-bit (black-and-white),\n  4-bit (16 colors), 8-bit (256 colors), 16-bit (high color), 24-bit\n  or 32-bit (true color) uncompressed single-plane \".BMP\" (Windows\n  or OS/2 Bitmap) files on a terminal with 3270 graphics capabilities.\n\n  REVIEW can display pictures in \".GIF\" (Graphics Interchange Files)\n  files.\n\n  When rendering pictures, REVIEW will only use color 3270 graphics\n  when colors other than 3270 black or 3270 white are actually used\n  in the rendering.  The only 3270 colors which will be used by REVIEW\n  are black, blue, red, pink, green, turquoise, yellow and white.\n\n  REVIEW can process a single data set or a pre-allocated file\n  concatenation.  Partitioned files can be sequentialized,\n  offloaded in PDSLOAD (IEBUPDTE-like) format, or searched for\n  specific or picture-masked data.  Load modules can be offloaded\n  into a sequential format, and can be delinked into object decks.\n  Sequential offload files can be processed to restore members\n  into partitioned data sets.\n\n  REVIEW can display the contents of the virtual storage in the user's\n  address space.\n\n  REVIEW can process the system PARMLIB concatenation.\n\n  REVIEW can process UNIX files such as HFS (Hierarchical File System)\n  files.\n\n  REVIEW can operate as an ISPF dialog.\n\n  REVIEW allows access to, and the saving of, data by data content,\n  data beyond I/O errors and end-of-file markers, and data from\n  deleted members of a PDS.\n\n  REVIEW can convert ASCII data to EBCDIC.\n\n  REVIEW can be invoked recursively by using the TSO subcommand.\n  Swapping between parallel sessions allows access to any nested\n  REVIEW session without requiring the termination of any other\n  REVIEW session.\n\n  The 'REVED' command is a way of invoking REVIEW and setting the\n  default action for non-VSAM data sets to edit with REVEDIT instead\n  of browse with REVIEW.  Using REVED with a sequential data set\n  name immediately starts a REVEDIT session.  Using REVED with a\n  partitioned data set name alters the meaning of the 'S' selection\n  code to mean edit (with REVEDIT) rather than browse (with REVIEW).\n\n  It is intended that the installation authorize 'REVVSAM' to allow the\n  REVIEWing of VSAM components for problem diagnosis by programming\n  support staff.  Normally, VSAM KSDS, ESDS, RRDS, VRRDS and LINEAR\n  clusters, paths, alternate indices and their components can be\n  REVIEWed without this authorization, with logical records being\n  extracted from controlintervals for non-LINEAR organizations.  If a\n  DB2 tablespace is REVIEWed, each row from a table in the tablespace\n  will be presented as a logical record, independently from any DB2\n  activity.\n\n  The 'REVVSAM' command is intended to allow the browsing of physical\n  VSAM components (ie. VSAM objects with VTOC entries) even with\n  corrupt or missing data in a CATALOG, VVDS or CI control flags.\n  APF authority is also required to REVIEW subsystem data sets.\n\n  Under z/OS, if REVIEW is APF authorized, the system will permit the\n  browsing of Basic Catalog Sturcture and VVDS data sets, but ISPF\n  services cannot be used.  Therefore, a name such as 'REVVSAM' or\n  'REVAUTH' should be authorized instead of the name(s) normally\n  used such as 'REVIEW' and 'REV'.\n\n  There are no APF authorization requirements under MVS/370.\n)X Syntax -\n         REVIEW  'dsname'\n                    VOLUME('volume')\n                    UNIT('unit')\n                    QUICK\n                    DATA\n                    GEN\n                    TOP('rel-addr')\n                    SUBSYS('subsys')\n                    XISPMODE\n     or\n         REVIEW  'ACTIVE'    TOP('rel-addr')\n     or\n         REVIEW  'filename'  FILE  DATA  TOP('rel-addr')  XISPMODE\n     or\n         REVIEW  'pathname'\n\n  Required - 'dsname'\n     or      'filename'  FILE\n     or      'pathname'  which must begin with a slash or tilde\n     or      no operands for \"point and shoot\".\n\n  Defaults - TOP(0)\n             UNIT(SYSALLDA) when VOLUME is specified.\n\n  Aliases  - REV, REVED, REVVSAM\n)O Operands -\n)P 'dsname' or 'dsname(member)' - The data set to be examined.\n   'filename' - The DDNAME allocated to the data set to be examined.\n   'pathname' - The path name of an UNIX directory.\n\n   If the first operand begins with a slash ('/') or a tilde ('~')\n   then it is deemed to specify an UNIX directory path, and no other\n   operands are allowed.  The tilde specifies the user's home\n   directory.  A specific UNIX file may be specified to directly\n   access the data contained in the file.\n\n   If the first operand does not begin with a slash or tilde then it\n   is assumed to be a DSNAME unless it is followed by the keyword\n   'FILE'.\n\n   Specifying the quoted dsname of 'FORMAT4.DSCB' and a VOLUME\n   requests that the VTOC of that volume be REVIEWed.\n\n   Specifying the quoted dsname of 'ACTIVE' requests that the\n   user's virtual storage (and not a data set) is REVIEWed.\n\n   Specifying the file name of PARMLIB when there is no PARMLIB DD\n   allocated on a OS/390 1.2 or later system requests that the\n   logical PARMLIB service be used to REVIEW the system PARMLIB\n   concatenation.\n\n   If no operands are supplied then REVIEW reads the screen image\n   and extracts the data set name from the part of the screen\n   containing the cursor.  This works in both fullscreen and line\n   modes, but not under Session Manager which updates the screen\n   before REVIEW receives control.  If a data set name is not found\n   then normal TSO prompting is commenced except for a recursive\n   REVIEW session where a message is displayed.\n\n   ISPF users may like to load\n       TSO REV) MODE(FSCR\n   into a PF key for easy access to \"point and shoot\", although\n       TSO REV\n   provides the same functionality since OS/390 2.10.  Similarly,\n       TSO REV\n   can be loaded into a REVIEW Program Function key.\n\n   A member name is NOT considered part of the data set name for\n   \"point and shoot\" purposes.\n\n   A UNIX path name cannot be processed by \"point and shoot\".\n\n))FILE     - This keyword indicates that the first operand is\n             a FILENAME, not a DSNAME.  This is useful for looking\n             at a temporary data set or at concatenated libraries.\n             A member name may be specified in the first operand\n             after the DDNAME if the DDNAME is allocated to a\n             PDS.  This allows you to enter 'REVIEW SYSPROC(X) F'\n             to look at member 'X' in whatever PDS is allocated to\n             DDNAME 'SYSPROC'.\n\n             Note that REVIEWing a concatenated sequential file may\n             cause unexpected behaviour.\n\n             The 'FILE' operand may be abbreviated to 'F'.\n\n))VOLUME('volume') - For uncataloged data sets, the volume serial.\n\n             'VOLUME' may be abbreviated to 'V'.\n\n))UNIT('unit') - For uncataloged data sets, the unit type.\n             This operand is ignored if 'VOLUME' is not specified.\n             If 'VOLUME' is specified the default unit is 'SYSALLDA'.\n             For data sets accessed via the catalog, the unit is\n             determined from the catalog entry.\n\n             'UNIT' may be abbreviated to 'U'.\n\n))TOP('rel-addr') - This specifies a relative address within the\n             data set to be considered as the logical top-of-data.\n             'TOP' performs the same function as the 'NEWTOP'\n             subcommand before the initial display of data.  As with\n             'NEWTOP', 'rel-addr' is a 1 to 6 hexadecimal digit\n             number interpreted as a TTR for disk data sets, or as\n             a BLOCK IDENTIFIER for tape data sets.  When 0 is\n             specified or defaulted to, no special action is taken.\n             This operand is ignored for VSAM and subsystem data sets.\n             When browsing the virtual storage of the TSO session's\n             address space, TOP specifies the initial virtual storage\n             display address.\n\n             'TOP' may be abbreviated to 'T'.\n\n))TTR('rel-addr') - Same as TOP('rel-addr').\n\n))SUBSYS('subsys') - For subsystem data sets, this specifies the 1-4\n             character subsystem name.  The subsystem must be active\n             and allow data set allocation for this to be successful.\n             The subsystem data set name specified may include a\n             member name in parentheses if appropriate.\n             This operand is ignored if 'VOLUME' is specified.\n\n             'SUBSYS' may be abbreviated to 'S'.\n\n))QUICK    - This indicates that if an unquoted data set name was\n             specified then the name was fully qualified apart from\n             the prefix (ie. no trailing qualifier has to be added).\n             This saves a search of the catalog to look for trailing\n             qualifiers which is otherwise performed unconditionally\n             unless the 'VOLUME' operand was specified.  This operand\n             is ignored if 'VOLUME' is specified.\n\n             The 'QUICK' operand may be abbreviated to 'Q'.\n\n))DATA     - This operand has several uses which, in general, mean\n             that control data is displayed rather than interpreted.\n             Specifically, this operand has seven (7) different\n             functions depending upon the type of data set being\n             REVIEWed.\n\n             1) For a VSAM component -\n                'DATA' indicates that control interval information\n                and DB2 tablespace structure is not to be interpreted\n                and that physical blocks are to be shown as-is without\n                extracting logical records or rows.\n\n             2) For a VSAM KSDS (Key-Sequenced Data Set) cluster -\n                'DATA' indicates that records are to be presented in\n                RBA (Relative Byte Address) or physical order rather\n                than in key-sequence order.\n\n             3) For a partitioned data set -\n                'DATA' indicates that the PDS directory is to be\n                REVIEWed as a sequential file, thereby precluding\n                access to the contents of members.\n\n             4) For other disk files with fixed length records -\n                'DATA' indicates that direct access logic which can\n                speed up access to different parts of the file will\n                not be used.  This logic is employed by default when\n                RECFM=F, RECFM=FS, or RECFM=FBS unless 'DATA' is\n                specified.  It is also used when RECFM=FB and the\n                VTOC indicates more than 256 tracks of data unless\n                'DATA' is specified.\n                (If this direct access logic is used and the file\n                does not use standard blocking, incorrect line\n                numbers and/or I/O errors could possibly occur.\n                The 'NEWTOP' subcommand (without any operand)\n                can be used from within REVIEW to make REVIEW\n                start behaving as if 'DATA' had been specified.)\n\n             5) For a SUBSYSTEM data set with a member included -\n                'DATA' indicates that a sequential file will be\n                allocated to the specified member only and data from\n                other members will not be accessible.  Use the 'DATA'\n                operand if the subsystem data set has members but the\n                subsystem does not support partitioned access.\n                (Normally, if 'DATA' was not specified then data from\n                the nominated member would initially be displayed,\n                but data from other members could subsequently\n                be displayed by using the 'MEMBER' subcommand.)\n\n             6) For a ZIP file 'DATA' indicates that the ZIP directory\n                will not be formatted, but that normal sequential read\n                and display processing will take place.  Only DASD\n                sequential data sets, PDS members and UNIX regular\n                files are checked for ZIP format by REVIEW.\n\n             7) For recognizable picture file types such as PCX\n                (Paintbrush), BMP (Bitmap) and GIF, 'DATA' specifies\n                that picture data is not to be interpreted, but that\n                normal data display processing will take place.\n                Without the 'DATA' operand REVIEW would attempt to\n                recognize supported picture data types, and render\n                such pictures on the screen.  (The 'FORMAT OFF'\n                subcommand can be used from within REVIEW to instruct\n                REVIEW to discard the picture data and therefore no\n                longer show the picture image.  A subsequent 'NEWTOP'\n                subcommand could be used to reactivate the image\n                display.)  The first data record must be at least 80\n                bytes long for REVIEW to recognize picture data.  The\n                rendering of pictures is never attempted when REVIEW\n                is running as an ISPF application.\n\n             The 'DATA' operand may be abbreviated to 'D'.\n\n))GEN      - This operand - valid for z/OS systems only - specifies\n             that if the member list of a Version 2 PDSE data library\n             which may have generation members is to be shown, then\n             all extant member generations should also be shown in\n             the member list.  The 'REF N' and 'REF G' member list\n             commands can be used to dynamically switch the display\n             of member generations in the member list.  Currently,\n             the display of member generations for PDSE program\n             libraries is not supported.\n\n             The 'GEN' operand may be abbreviated to 'G'.\n\n))XISPMODE - This specifies that REVIEW\n             1) is not to act as an ISPF application and is therefore\n                to perform terminal I/O and subcommand processing\n                natively; and\n             2) is not to determine terminal capabilities from ISPF\n                variables but is to issue a Read Partition (Query)\n                itself if appropriate.\n\n             This operand will only affect processing in an ISPF\n             environment.\n\n             The second function listed above relates to detecting\n             the graphics capabilities of the TSO terminal.  If you\n             want REVIEW to render graphic images (pictures) in an\n             ISPF environment then the XISPMODE operand is required\n             so that REVIEW will detect that the terminal can handle\n             graphics.  Without this operand, REVIEW determines\n             color, highlighting and graphics escape support from\n             ISPF, does not perform terminal I/O for a Query, and\n             can therefore present non-graphic file data more rapidly.\n\n             The 'XISPMODE' operand may be abbreviated to 'X'.\n\n))PFK      - This is not an operand, but a description of\n             the Program Function Keys used by this command.\n              PFK1  - HELP    PFK2  - START      PFK3  - END\n              PFK4  - TSO     PFK5  - RFIND      PFK6  - RCHANGE\n              PFK7  - UP      PFK8  - DOWN       PFK9  - SWAP NEXT\n              PFK10 - LEFT    PFK11 - RIGHT      PFK12 - RECALL\n              PFK13 - TOP     PFK14 - BOTTOM     PFK15 - END\n              PFK16 - SMF     PFK17 - RFIND      PFK18 - EREP\n              PFK19 - UP      PFK20 - DOWN       PFK21 - HEX\n              PFK22 - ASCII   PFK23 - TSO REV    PFK24 - HEXC\n             These can be changed using the PFK# subcommand, but the\n             changes are in effect only until the command ends unless\n             a profile data set is allocated to DDNAME 'ISPPROF'\n             under z/OS or 'REVPROF' under MVS/370.\n             Example: 'PFK6 RIGHT 1' would make PFK6 'RIGHT 1'.\n)S Subcommands -\n ----------------------- GLOBAL SUBCOMMANDS ---------------------------\n\n These subcommands are available in all display modes of REVIEW:\n\n   HELP    - Request HELP about REVIEW and/or its subcommands.\n             This will be intercepted by ISPF if REVIEW is\n             running as an ISPF dialog.\n   HEL     - Same as 'HELP' except ISPF will not intercept it.\n   FSHELP  - Same as 'HEL'.\n   FSH     - Same as 'HEL'.\n   KEYS    - Display current Program Function Key values.\n   ?       - Display the release of REVIEW that is in use.\n   TASK    - Display Task Control Block and Request Block structure.\n   TCB     - Same as 'TASK'.\n   RB      - Same as 'TASK'.\n   CDE     - Show the Job Pack Area's Contents Directory Elements.\n   JPA     - Same as 'CDE'.\n   TSO     - Issue a TSO command.\n   TSS     - Same as 'TSO'.\n   PFK#    - Set Program Function Key '#' to a specified value.\n   PFK0    - Set Program Function Keys to default values.\n   RECALL  - Recall previously typed-in commands for optional\n             editing and reissuing.\n   RETRIEVE- Same as 'RECALL'.\n   SCRNAME - Assign a new name to this logical screen session.\n   START   - Create a new RFE (REVIEW Front End) parallel session.\n   SPLIT   - Same as 'START'.\n   SWAP    - List or transfer control between parallel sessions.\n   UP      - Scroll backwards a specified number of lines or records.\n             If no operand is specified, the 'scroll' value is used.\n             This is displayed in the upper right corner.\n   '-'     - Same as 'UP'.\n   DOWN    - Scroll forwards a specified number of lines or records.\n             If no operand is specified, the 'scroll' value is used.\n             This is displayed in the upper right corner.\n   '+'     - Same as 'DOWN'.\n   TOP     - Scroll up to the first line or record (on this volume).\n   BOTTOM  - Scroll down to the last line or record.\n   BOT     - Same as 'BOTTOM'.\n   END     - END the command.\n   CANCEL  - Same as 'END' but user profile changes are not saved.\n   CAN     - Same as 'CANCEL'.\n   EXIT    - Terminate the whole REVIEW session.\n   RETURN  - Same as 'EXIT'.\n   =X      - Same as 'EXIT' when not running as an ISPF dialog.\n\n ------------------- REVIEW-DATA MODE SUBCOMMANDS ---------------------\n\n These subcommands are available while REVIEWing file data:\n\n   LEFT    - Scroll to the left a specified number of columns.\n             If no operand is specified, the 'scroll' value is used.\n   '<'     - Same as 'LEFT'.\n   RIGHT   - Scroll to the RIGHT a specified number of columns.\n             If no operand is specified, the 'scroll' value is used.\n   '>'     - Same as 'RIGHT'.\n   LIST    - Display the specified record number (relative record\n             numbers only, not sequence numbers) or labelled record.\n   L       - Same as 'LIST'.\n   LOC     - Same as 'LIST'.\n   LOCATE  - Same as 'LIST'.\n   HEX ON  - Display each data byte as 2 hexadecimal digits.\n   HEX OFF - Display each data byte as a single character.\n   HEX     - If HEX currently on, turn it off.  If off, turn it on.\n   HEXC ON - Alter the HEX ON display to show keyboard characters.\n   HEXC OFF- Leave the HEX ON display to show all data in hexadecimal.\n   HEXC    - If HEXC currently on, turn it off.  If off, turn it on.\n   HEXR ON - Show the data twice, first as characters, then in hex.\n   HEXR OFF- Do not show the data as characters and hex simultaneously.\n   HEXR    - If HEXR currently on, turn it off.  If off, turn it on.\n   HEXX ON - Show each data byte as a character and as hexadecimal.\n   HEXX OFF- Do not show the data as characters and hex simultaneously.\n   HEXX    - If HEXX currently on, turn it off.  If off, turn it on.\n   FIND    - Search until the specified data or pattern is found.\n   F       - Same as 'FIND'.\n   FINDSMF - Search for an SMF record type and optionally sub-type.\n   FS      - Same as 'FINDSMF'.\n   FINDNOT - Search until the specified data or pattern is not found.\n   FN      - Same as 'FINDNOT'.\n   RFIND   - Repeat the previous FIND or FINDNOT operation.\n   IFIND   - Same as 'RFIND'.\n   RESET   - Deactivate line exclusion caused by the ALL or REST\n             operand of a FIND or FINDNOT subcommand.\n   RES     - Same as 'RESET'.\n   FULL ON - Use full EBCDIC translation for display with using any\n             APL characters.\n   FULL OFF- Use the standard 3270 keyboard character set for display.\n   FULL    - If FULL is on, turn it off.  If off, turn it on.\n   ASCII ON- Specifies that ASCII data is being REVIEWed and that\n             characters are to be translated to EBCDIC before being\n             displayed.  Note that search arguments to the 'FIND' and\n             'FINDNOT' commands typed in while in ASCII mode are\n             translated to ASCII.\n   ASCII OFF- Leave the characters to be displayed in EBCDIC.\n   ASCII   - If ASCII is on, turn it off.  If off, turn it on.\n   DISP T  - Display TN/T11-like EBCDIC text characters where possible.\n             This is similar to 3278T in ISPF.\n   DISP A  - Display APL/EBCDIC characters where possible.\n             This is similar to 3278A in ISPF.\n   DISP    - Toggle between DISP TN and DISP APL.\n   DISPLAY - Same as 'DISP'.\n   DIR     - Display the directory of the partitioned data set or file\n             currently being REVIEWed.\n   MEMBER  - Switch to a specified member within the same\n             partitioned data set (or concatenation thereof)\n             as the current member.\n   MEM     - Same as 'MEMBER'.\n   NEWTOP  - Specify a relative physical address to be considered\n             as the top-of-data.  This is useful for looking past\n             I/O errors, end-of-file markers, and at deleted members.\n             It is also useful for directly viewing data a long way\n             from the start without reading all the preceding records.\n   SUBMIT  - Submit the file or MEMBER being REVIEWed.\n             TSO SUBMIT is invoked.\n             The data set must be sequential or partitioned,\n             and have fixed length 80-byte records.\n   SUB     - Same as 'SUBMIT'.\n   SB      - Same as 'SUBMIT' but with no line mode messages.\n   RDW ON  - Show the RDW of each variable-length record as if it were\n             part of the record's data.\n   RDW OFF - Undo 'RDW ON'.\n   RDW     - If RDW is currently on, turn it off.  If off, turn it on.\n   SMF ON  - If SMF data is being examined, convert the record\n             to eye-readable format.\n   SMF OFF - Undo 'SMF ON'.\n   SMF     - If SMF is currently on, turn it off.  If off, turn it on.\n   EREP ON - If LOGREC data is being examined, convert the record\n             to eye-readable format.\n   EREP OFF- Undo 'EREP ON'.\n   EREP    - If EREP is currently on, turn it off. If off, turn it on.\n   FORMAT  - Format file data according to Assembler data definition\n             source code in the nominated member of the REVFMTS file.\n             VTOC entries can be formatted without the REVFMTS file.\n   FMT     - Same as 'FORMAT'.\n   FMT OFF - Suspend record formatting.  Disable picture rendering.\n   FMT ON  - Resume record formatting.\n   FMTVAR  - Manually specify the data type of a data item.\n   FV      - Same as 'FMTVAR'.\n   COLOR # - Set the data display color to color number '#'.\n   COLOR ON- Turn on 7-color/extended highlighting mode.\n             This may give errors on some older model terminals.\n   COLOR OFF- Turn off 7-color/extended highlighting mode.\n   COLOR   - If COLOR is on, turn it off.  If off, turn it on.\n   COLOUR  - Same as 'COLOR'.\n   APPEND  - Copy REVIEWed data starting from the first record shown\n             on the screen to an output file.  Data is to be appended\n             to any existing data in the output file.\n   ADD     - Same as 'APPEND'.\n   TACKON  - Same as 'APPEND'.\n   COPYOUT - Copy REVIEWed data starting from the first record shown\n             on the screen to an output file.  Any data in the output\n             file will be overwritten and lost.\n   CUTOFF  - Same as 'COPYOUT'.\n   CUT     - Same as 'COPYOUT'.\n   CUTOVER - Same as 'COPYOUT'.\n   RTF     - COPYOUT print files with message and ASM text coloring.\n   FMTPRT ON - Enable color highlighting of print report data.\n             Also, allow COPYOUT to truncate trailing blanks.\n   FMTPRT OFF - Disable color highlighting of print report data.\n   FMTPRT  - If FMTPRT is currently on, turn it off.\n             If off, turn it on.\n   PICDATA - Cause Assembler source statements describing picture\n             image data to be written to a file.\n   SETUNZ  - Override unzip file attributes.\n   EDIT    - Process the current data set with ISPF EDIT.\n   BROWSE  - Process the current data set with ISPF BROWSE.\n   VIEW    - Process the current data set with ISPF VIEW.\n   INFO    - Display the attributes of the data set being REVIEWed.\n\n\n These subcommands are available only while REVIEWing virtual storage:\n   LEFT    - Display the previous storage address in the trace table.\n   '<'     - Same as 'LEFT'.\n   RIGHT   - Display the next storage address in the trace table.\n   '>'     - Same as 'RIGHT'.\n   EQUATE  - Equate a symbol name to a storage address.\n   EQ      - Same as 'EQUATE'.\n   DROP    - Remove a previously defined EQUATE.\n   LIST    - Display the storage contents at the specified address.\n   L       - Same as 'LIST'.\n   LOC     - Same as 'LIST'.\n   LOCATE  - Same as 'LIST'.\n\n --------------- DIRECTORY ENTRY LIST MODE SUBCOMMANDS ----------------\n\n   To see the list of available subcommands and valid entry selection\n   action codes when REVIEW is displaying directory entries, type\n   'FSHELP' (or 'FSH' or 'HEL') and press <ENTER>.\n\n   REVIEW has three (3) different directory displays.  They are:\n      (1) \"PDS\" type - for a PDS, a data PDSE, and concatenated\n          files of any sort of PDS and/or PDSE.\n      (2) \"PDSE\" type - for an unconcatenated program object PDSE.\n      (3) \"UNIX\" type - for UNIX directories and files in\n          hierarchical file structures.\n\n   The list of available subcommands and valid entry selection codes\n   depends on the type of active directory display.  The 'FSHELP'\n   command will cause the valid options for that display type to be\n   shown.\n\n   When REVIEW is running as an ISPF application, the HELP subcommand\n   will be intercepted by ISPF.\n\n   The default value of PF1 is intended to provide access to this\n   TSO HELP member which is primarily intended to document subcomands\n   available while REVIEWing file contents (as opposed to directories).\n\n These subcommands are available while REVIEWing directories:\n\n   BROWSE  - Causes ISPF Browse to be invoked to process the specified\n   /B        member or file.\n\n   DELINK  - (For load modules only.  Not for program objects.)\n   /DL       This subcommand instructs REVIEW to delink load modules\n             and write object \"decks\" to a sequential data set.\n\n             The subject PDS must have RECFM=U and must not be a PDSE.\n\n             Only tagged members are delinked, unless there are no\n             tagged members in which case ALL MEMBERS are delinked.\n\n             REVIEW will attach the DELINKI program from CBT file 90\n             to perform the delink function.  Fixed-length 80-byte\n             records are written.  Note that SCATTER and OVERLAY\n             programs will NOT be handled correctly.\n\n             If the resultant object data is relinked, the new load\n             modules may not be bit-for-bit copies of the original\n             load modules, even though they should be functionally\n             equivalent.  That is, reconstructed load modules may be\n             reblocked and/or reordered.\n\n   EDIT    - (Not for program objects.)\n   /E        Causes ISPF Edit to be invoked to process the specified\n             member or file.\n\n   OFFLOAD - (Not for program objects or UNIX files.)\n   /OFF      This subcommand instructs REVIEW to offload PDS members\n             to a sequential file.  Offloading can be performed for\n             a partitioned data set or concatenation with ANY record\n             format.\n\n             The output RECFM will be overridden to FB or VB as\n             appropriate.  The output LRECL will be overridden to\n             the PDS LRECL or 80, whichever is greater.  If the PDS\n             has an undefined record format then fixed-length\n             80-byte records will be written.\n\n             Members will be offloaded in member selection list\n             order, and will be preceded by an IEBUPDTE-like\n             './ ADD ' control statement.  IEBUPDTE-like './ ALIAS '\n             statements are also generated only if the member list is\n             sorted into TTR-order, and only for aliases whose\n             corresponding real member is also offloaded.  Note that\n             only the first occurrence of a given member name in a\n             concatenation can be offloaded.\n\n             Only tagged members are offloaded, unless there are no\n             tagged members in which case ALL MEMBERS are offloaded.\n\n             If the first two (2) data bytes of a record are './'\n             then they will be translated to '><' on output.\n\n   PDSLOAD - (Not for program objects or UNIX files.)\n   /PDS      This subcommand instructs REVIEW to process sequential\n             input and load the data into members of the library\n             being REVIEWed, which must not be a concatenation.\n\n             The user is prompted with a panel to specify the data\n             set containing the sequential input, whether ISPF\n             statistics are to be generated, and an optional\n             member name selection mask.\n\n             The input is expected to be data created by OFFLOAD\n             or a compatible offload process.\n\n             REVIEW will attach the PDSLOAD program from CBT file 93\n             (or the REVLMOD program if the PDS RECFM=U) to perform\n             the reload operation.\n\n             Load modules reconstructed by this subcommand will be\n             bit-for-bit copies of the original load modules.  No\n             reblocking is performed for load modules.\n\n             See PDSLOAD documentation for details on fixed- and\n             variable-length record format combinations, and record\n             truncation and extension actions.\n\n   REFRESH - This subcommand instructs REVIEW to update in-storage\n   /REF      directory information with the latest data from disk.\n             It will reset the tag status of all entries.\n\n   RESET   - This subcommand instructs REVIEW to untag all entries\n   /RES      without re-reading entry list data from disk.\n\n   RFIND   - Position the directory display so that the next tagged\n   /IFIND    entries is the top entry shown.  If there are no entries\n             tagged the number of PDS directory blocks read is shown.\n\n   SEARCH  - This subcommand instructs REVIEW to search PDS or PDSE\n   /FIND/F   member contents, or UNIX file contents for specified data.\n             When entered, the user will be presented with a data\n             entry screen in which to specify the search type, the\n             data to be searched for, an optional column range where\n             the data must reside, optional modifiers, and, for PDS\n             and PDSE data sets, a member name mask field which can\n             be used to restrict the search to members with certain\n             name patterns.\n\n   SELECT  - Specify a PDS or PDSE member, or UNIX file to be\n   /SEL/S    browsed using REVIEW.\n\n   SEQLOAD - (For PDS and PDSE data sets only.  Not for UNIX files.)\n   /SEQ      This subcommand instructs REVIEW to offload PDS members\n             to a sequential file.  Offloading can only be performed\n             for fixed-length and variable-length record files.  The\n             output RECFM will be overridden to FB or VB as\n             appropriate.  The output LRECL will be overridden to\n             the PDS LRECL.  Members will be offloaded in member\n             selection list order.  Note that only the first\n             occurrence of a given member name in a concatenation\n             can be offloaded.\n\n             If NO MEMBERS are tagged then ALL MEMBERS are offloaded.\n\n      Note:  'SEQLOAD' performs the same processing as 'OFFLOAD'\n             except that no IEBUPDTE-like control statements are\n             generated, './' is not translated on output, and the\n             minimum output LRECL of 80 required by 'OFFLOAD' for\n             IEBUPDTE compatibility is not required by 'SEQLOAD'.\n             'SEQLOAD' cannot process RECFM=U libraries.\n\n   SORT    - Causes the displayed directory entries to be reordered\n             according to the specified criterion.  Use 'HELP' to\n             see the available sort categories.\n\n   TAGFLIP - This subcommand instructs REVIEW to toggle the tag status\n   /TF       for every entry in the selection list.  Tagged entries\n             will become untagged, while entries which were untagged\n             will be tagged.\n\n   UPDATE  - (Not for program objects or UNIX files.)\n   /U        Causes REVEDIT to be invoked to process the specified\n             member.\n\n   VIEW    - (Not for program objects or UNIX files.)\n   /V        Causes ISPF View to be invoked to process the specified\n             member.\n\n\n ------------- DIRECTORY ENTRY LIST MODE SELECTION CODES --------------\n\n These selection codes can be used to select an entry for processing\n from a directory entry display:\n\n   /       - Selection code for selecting an entry to be REVIEWed\n             from a PDS or PDSE member list or UNIX directory list\n             as if the 'DATA' operand had been specified.  Normally,\n             the DATA operand precludes access to PDS and PDSE member\n             contents, and the DATA operand cannot be specified on\n             an UNIX REVIEW request.  This selection code performs the\n             same function as the 'S' selection code except that the\n             DATA operand is deemed to have been specified.  This\n             will prevent REVIEW from attempting to interpret data\n             content such as pictures and ZIP file directories.  '/'\n             and 'S' are identical when used to navigate the UNIX\n             directory structure.\n\n   A       - Selection code for selecting a UNIX file to be REVIEWed.\n             This code instructs REVIEW to treat the file as an ASCII\n             text file.  ASCII-to-EBCDIC translation is activated,\n             and a new line is triggered by an ASCII LF character\n             (x'0A') or an ASCII CRLF string (x'0D0A').  (EBCDIC text\n             files employ the EBCDIC NL character (x'15') to trigger\n             a new line.)\n\n   B       - Selection code for selecting an entry to be browsed\n             from a PDS or PDSE member list, or UNIX directory list.\n             In an ISPF environment ISPF/PDF Browse is used, otherwise\n             REVIEW is used.\n\n   E       - Selection code for selecting an entry to be edited\n             from a PDS or PDSE member list, or UNIX directory list.\n             In an ISPF environment ISPF/PDF Edit is used, otherwise\n             REVEDIT is used.\n\n   H       - Selection code for extracting and displaying the history\n             of a program.\n\n   M       - Selection code for extracting and displaying the module\n             map of a program.\n\n   D       - Selection code for deleting a member from an\n             unconcatenated PDS (not a PDSE) such that it can be\n             restored by the 'R' selection code.\n\n   R       - Selection code for restoring a deleted member and for\n             resetting the tag status of an entry.  All tags can be\n             cleared by REFRESH and RESET.  REFRESH will also clear\n             display entries for deleted members meaning that they\n             cannot be restored by the R selection code.\n\n   S       - Selection code for selecting an entry to be REVIEWed\n             from a PDS or PDSE member list, or UNIX directory list.\n             When a UNIX subdirectory entry is selected REVIEW treats\n             this as a navigation request, and replaces the displayed\n             entries with entries from the selected subdirectory.\n\n             With the 'REVED' TSO command selecting a PDS member with\n             'S' specifies that the member should be edited with\n             REVEDIT.\n\n             'S' is the default selection code, and is assumed\n             when the cursor is placed on an entry selection input\n             field but no character is typed.\n\n   T       - Selection code for tagging an entry for later processing.\n             Tagged entries are shown in high intensity or reverse\n             video in the entry list.  For PDS and PDSE data sets,\n             if any members are tagged, then only tagged members are\n             processed during offload (see OFFLOAD and SEQLOAD),\n             delink (see DELINK) and search (see SEARCH) operations.\n             For UNIX files, if any entries are tagged then only\n             tagged files are processed during search operations.\n             Further, tagging an entry may be useful for display\n             control purposes when the entry list is large as RFIND\n             can be used to locate the next tagged entry.  All tags\n             can be cleared by REFRESH and RESET.\n\n   V       - Selection code for selecting an entry to be viewed\n             from a PDS or PDSE member list.  In an ISPF environment\n             ISPF/PDF View is used, otherwise REVEDIT View is used.\n ----------------------------------------------------------------------\n=HELP=HEL=FSHELP=FSH\n)F Function -\n  The HELP subcommand provides function, syntax, and operand\n  information on the 'REVIEW' command and its subcommands.\n)X Syntax -\n         HELP   'subcommand name'\n                FUNCTION  SYNTAX  OPERANDS('keyword list')  ALL\n                POSITIONAL('operand number') MSG('msgid')\n  Aliases  - HEL, FSHELP, FSH\n  Required - None.\n  Defaults - ALL if FUNCTION, SYNTAX, and OPERANDS not specified.\n  Note     - If HELP is entered without any operands a list of\n             subcommands of the current command will be displayed.\n  Note     - 'keyword list' is optional when OPERANDS is used.\n)O Operands -\n)P 'subcommand name'\n           - Name of the subcommand of 'REVIEW' to be explained.\n))FUNCTION - Function data is to be displayed.\n))SYNTAX   - Format is to be displayed.\n))OPERANDS('keyword list')\n           - Operand description is to be displayed.  If\n             'keyword list' is present, only those keyword descriptions\n             are to be displayed.\n    'keyword list'\n           - Keywords separated by commas, blanks, or tabs.\n))ALL      - Function, syntax, and operand descriptions are to be\n             displayed.\n))POSITIONAL('operand number')\n           - A description of the positional operand specified is to\n             be displayed.\n))MSGID('msgid')\n           - A description of the message identified by msgid is to be\n             displayed.\n=MEMBER=MEM\n)F Function -\n  The MEMBER subcommand switches to a different member in the same PDS\n  or concatenation thereof.  It is only valid for partitioned files.\n)X Syntax -\n     MEMBER 'membername'\n\n Alias    - MEM\n Defaults - None.\n Required - None.\n)O Operands -\n)P 'membername' - Specifies the name of a new MEMBER to be displayed.\n=DIR\n)F Function -\n  The DIR subcommand causes the member list of the PDS being REVIEWed\n  to be displayed.  It is only valid for partitioned files.  Its main\n  use is to allow access to the member list when the member being\n  REVIEWed was accessed directly and an END command would terminate\n  the REVIEW session.\n)X Syntax -\n     DIR\n\n Aliases  - None.\n Defaults - None.\n Required - None.\n)O Operands - None.\n=FIND=F\n)F Function -\n  The FIND subcommand positions the screen to a text string.\n\n  FIND notes:\n   1.  A search argument is required.  A single unquoted asterisk\n       may be used to specify the same argument as was last used.\n   2.  The first operand is always treated as the search argument.\n   3.  The search argument determines whether the search is case\n       sensitive, case insensitive or for a picture string, or\n       for a string of hexadecimal digits byte-aligned with two\n       digits per data byte.\n   4.  Quotation marks are required whenever the string type needs\n       to be specified.\n   5.  Quotation marks are optional for the default string type\n       unless the string contains one or more blank characters.\n   6.  Operands specifying various keywords and/or column numbers\n       may be supplied in any order after the search argument.\n   7.  Searches for picture strings are not allowed in ASCII mode.\n   8.  If currently in ASCII mode a text or character string specified\n       in the command will be translated to ASCII.\n   9.  The 'REST' and 'ALL' operands causes lines failing the match\n       criteria to be excluded from view.  No place marker lines for\n       this exclusion are shown.  This exclusion is cancelled by\n       other FIND/FINDNOT commands, and by 'UP' (including 'UP\n       MAX'), 'LIST', 'BOTTOM' and 'RESET'.  It is NOT cancelled by\n       'DOWN' or 'TOP', by 'LEFT' or 'RIGHT' scrolling or by\n       formatting subcommands.\n)X Syntax -\n     FIND 'string'  'column-1'  'column-2'\n                     FIRST / NEXT / PREV / LAST / REST / ALL\n                     PREFIX / SUFFIX / WORD\n\n Alias    - F\n Defaults - NEXT\n Required - 'string'\n)O Operands -\n)P 'string'  - Specifies the data and data type to locate.\n              Quoted strings may have the string type indicated\n              before the leading quote or after the trailing quote.\n              String types are:\n\n              C - Character for case sensitive search.\n\n              T - Text for case insensitive search.\n\n              X - Hexadecimal digits (byte-aligned and two to a byte).\n\n              P - Picture data where special mask characters represent\n                  various categories of data.  Valid picture masks are:\n                     \u00ac - any non-blank character.\n                     $ - any special character.\n                     = - any character.\n                     # - any decimal numeric character.\n                     - - any non-numeric character.\n                     @ - any alphabetic character.\n                     > - any upper case alphabetic character.\n                     < - any lower case alphabetic character.\n                     . - any non-displayable character.\n                  Non-mask characters represent themselves, with\n                  matching of specific alphabetics being case\n                  insensitive.\n\n              Unquoted strings and strings without a string type\n              specified are treated as character (type C) strings,\n              which requests a case insensitive search.\n\n)P 'column-1' - Optional, specifies first or only column to search.\n)P 'column-2' - Optional, specifies last column where the string\n              may end.\n))FIRST   - Search forward from the start of the file or member.\n))NEXT    - Search forward from the current location.\n))PREV    - Search backward from the current location.\n))LAST    - Search backward from the end of the file or member.\n))REST    - Search forward from the current location\n              for all occurrences, excluding lines without the string.\n))ALL     - Search forward from the start of the file or member\n              for all occurrences, excluding lines without the string.\n))PREFIX  - Search for the string only at the start of a\n              word longer than the string.  PRE for short.\n))SUFFIX  - Search for the string only at the end of a\n              word longer than the string.  SUF for short.\n))WORD    - Search for the string only when it starts at the start\n              of a word and ends at the end of a word.\n=FINDSMF=FS\n)F Function -\n  The FINDSMF subcommand positions the screen to an SMF record of\n  the requested type and optionally also subtype.  It is only of\n  practical value when SMF data is being REVIEWed.\n\n  FINDSMF notes:\n   1.  The first or only search argument specifying the SMF record\n       type must be a single unquoted decimal number between 0\n       and 255 inclusive.\n   2.  An optional additional numeric operand is allowed.\n       It is a second search argument specifying the SMF record\n       subtype and must be a single unquoted decimal number\n       between 0 and 255 inclusive.\n   3.  Subtype searches for system records (0 to 127) are only\n       allowed for record types known to have subtypes.  Subtype\n       searches for user records (128 to 255) are allowed without\n       validation.\n   4.  No validity checking is performed on the specified subtype.\n       Hence it is possible to search for a subtype which does not\n       exist.\n   5.  The first operand is required.\n   6.  A search will be performed even for non-SMF data.\n   7.  Obviously a column operand is not applicable.\n   8.  A non-numeric operand of 'FIRST', 'NEXT', 'PREV', 'LAST',\n       'REST' or 'ALL' may be entered to indicate the search\n       direction and starting location.\n)X Syntax -\n   FINDSMF 'type' 'subtype'   FIRST / NEXT / PREV / LAST / REST / ALL\n\n Alias    - FS\n Defaults - same string and direction <or> NEXT (if string specified)\n Required - 'type'\n)O Operands -\n)P    'type' - Specifies the decimal SMF record type.\n               Unquoted decimal integer in the 0 to 255 range.\n)P 'subtype' - Specifies the decimal SMF record subtype.  Optional.\n               Unquoted decimal integer in the 0 to 255 range.\n               eg. \"FS 30 NEXT\" or \"FS 30\"\n                    will search for any type 30 SMF record.\n               eg. \"FS 30 NEXT 5\" or \"FS 30 5 NEXT\" or \"FS 30 5\"\n                    will search for a type 30 subtype 5 SMF record.\n))FIRST   - Search forward from the start of the file or member.\n))NEXT    - Search forward from the current location.\n))PREV    - Search backward from the current location.\n))LAST    - Search backward from the end of the file or member.\n))REST    - Search forward from the current location\n              for all occurrences, excluding other record types.\n))ALL     - Search forward from the start of the file or member\n              for all occurrences, excluding other record types.\n=FINDNOT=FN\n)F Function -\n  The FINDNOT subcommand positions the screen to a text string\n  which does NOT match the search argument.\n\n  The notes listed under FIND also apply to FINDNOT.\n)X Syntax -\n   FINDNOT 'string'  'column-1'  'column-2'\n                      FIRST / NEXT / PREV / LAST / REST / ALL\n                      PREFIX / SUFFIX / WORD\n\n Alias    - FN\n Defaults - NEXT\n Required - 'string'\n)O Operands -\n)P 'string'  - Specifies the character data to mismatch.\n)P 'column'  - Optional, specifies a column number to search.\n              eg. \"FN ' ' 70\"\n                   will search for a non-blank in column 70.\n              eg. \"FN ' ' ALL\"\n                   will only show records with non-blanks.\n))FIRST   - Search forward from the start of the file or member.\n))NEXT    - Search forward from the current location.\n))PREV    - Search backward from the current location.\n))LAST    - Search backward from the end of the file or member.\n))REST    - Search forward from the current location\n              for all occurrences, excluding other lines.\n))ALL     - Search forward from the start of the file or member\n              for all occurrences, excluding other lines.\n=RFIND=IFIND\n)F Function -\n  The RFIND subcommand repeats the previous FIND or FINDNOT operation.\n  No operands are allowed.  It is expected that RFIND will be used as\n  the default meaning of a PFK such as PF5 or PF17.\n)X Syntax -\n     RFIND\n\n Alias    - IFIND\n Defaults - Same operation, string and direction.\n Required - None.\n)O Operands - None.\n=RESET=RES\n)F Function -\n  The RESET subcommand deactivates line exclusion caused by the\n  REST and ALL operands of any FIND or FINDNOT subcommand.  The\n  first file data line displayed on the screen (ie. the location\n  line number) remains unchanged.\n)X Syntax -\n     RESET\n\n Alias    - RES\n Defaults - None.\n Required - None.\n)O Operands - None.\n=UP=-\n)F Function -\n  The UP subcommand moves the screen up the specified number of\n  lines; if no operand is entered, the scroll amount is used.\n)X Syntax -\n     UP 'amount'\n\n Aliases  - UP, -\n Defaults - Scroll amount\n Required - None.\n)O Operands -\n)P 'amount' - Specifies the number of lines to move the screen.\n              It must be a decimal number, or 'HALF' ('H') or\n              'PAGE' ('P') or 'CSR' ('C') or 'MAX' ('M').\n=DOWN=+\n)F Function -\n  The DOWN subcommand moves the screen down the specified number\n  of lines; if no operand is entered, the scroll amount is used.\n)X Syntax -\n     DOWN 'amount'\n\n Aliases  - DOWN, +\n Defaults - Scroll amount\n Required - None.\n)O Operands -\n)P 'amount' - Specifies the number of lines to move the screen.\n              It must be a decimal number, or 'HALF' ('H') or\n              'PAGE' ('P') or 'CSR' ('C') or 'MAX' ('M').\n=LEFT=<\n)F Function -\n  The LEFT subcommand moves the screen left the specified number of\n  columns; if no operand is entered, the scroll amount is used.\n\n   When browsing virtual storage, LEFT means jump back to the storage\n  address shown before this address was shown.  Any operand is ignored.\n)X Syntax -\n     LEFT 'amount'\n\n Aliases  - LEFT, <\n Defaults - Scroll amount\n Required - None.\n)O Operands -\n)P 'amount' - Specifies the number of lines to move the screen.\n              It must be a decimal number, or 'HALF' ('H') or\n              'PAGE' ('P') or 'CSR' ('C') or 'MAX' ('M').\n=RIGHT=>\n)F Function -\n  The RIGHT subcommand moves the screen right the specified number\n  of columns; if no operand is entered, the scroll amount is used.\n\n   When browsing virtual storage, RIGHT means jump to the next storage\n  address shown after this address was shown.  Any operand is ignored.\n)X Syntax -\n     RIGHT 'amount'\n\n Aliases  - RIGHT, >\n Defaults - Scroll amount\n Required - None.\n)O Operands -\n)P 'amount' - Specifies the number of lines to move the screen.\n              It must be a decimal number, or 'HALF' ('H') or\n              'PAGE' ('P') or 'CSR' ('C') or 'MAX' ('M').\n=TOP\n)F Function -\n  The TOP subcommand moves the screen to the first line of the data\n  set or member.  It differs from 'UP MAX' when line exclusion is\n  active in that line exclusion is not cancelled.  In this case, TOP\n  can be used to view the results of a \"FIND ALL\" search from the\n  start without the need to reissue the \"FIND ALL\" command.\n)X Syntax -\n     TOP\n\n Aliases  - None.\n Defaults - None.\n Required - None.\n)O Operands - None.\n=BOTTOM=BOT\n)F Function -\n  The BOTTOM subcommand moves the screen to the last line of the\n  data set or member.\n)X Syntax -\n     BOTTOM\n\n Alias    - BOT\n Defaults - None.\n Required - None.\n)O Operands - None.\n=FULL\n)F Function -\n  The FULL subcommand specifies whether character data is displayed\n  using full EBCDIC translation or only standard 3270 keyboard\n  characters.  If turned on then only code-points that usually cause\n  screen errors are deemed to be undisplayable.  If turned off then\n  all characters not on a \"standard\" keyboard are deemed to be\n  undisplayable.  (In character mode, undisplayable bytes are\n  represented by a period ('.').)  Terminals with APL support may\n  have normally unprintable characters displayed from the APL\n  character set instead when in 'FULL OFF' mode, equivalent to one of\n  the 3278A or the 3278T terminal display modes of ISPF, depending\n  on the value set by the DISPLAY subcommand.\n)X Syntax -\n     FULL ON / OFF / ?\n\n Aliases  - None.\n Defaults - opposite mode\n Required - None.\n)O Operands -\n))ON       - Specifies that all code points X'40' to X'FE' and some\n             below X'40' are displayable characters.\n))OFF      - Specifies that only keyboard and possibly APL\n             characters are displayable.\n))?        - The current setting is displayed without change.\n=DISPLAY=DISP\n)F Function -\n  The DISPLAY subcommand specifies whether character data shown in\n  FULL OFF mode is TEXT EBCDIC (as per TN and T11 print trains) or\n  not.  This subcommand can be used to improve the readability of\n  the data being REVIEWed.  The current setting is shown in the\n  message area of the top screen line after the KEYS subcommand is\n  issued.  The DISPLAY setting is saved in the user profile data set.\n\n  It also control the code point used to represent non-display\n  characters.\n)X Syntax -\n     DISPLAY APL / TEXT / x / ?\n\n Alias    - DISP\n Defaults - Toggles APL/TEXT without changing non-display code point.\n            Initially, non-display characters are shown as periods.\n Required - None.\n Note     - DISPLAY does not permit more than 1 operand.\n Examples -\n     DISP ?              will show the current DISPLAY settings.\n     DISP .              will show non-display characters as periods.\n     DISP ' '            will show non-display characters as blanks.\n     DISP ~              will show non-display characters as tildes.\n     DISP B              will show non-display characters as 'B'.\n     DISP A              will show characters as per ISPF 3278A.\n     DISP 'a'            will show non-display characters as 'A'.\n     DISP T'a'           will show non-display characters as 'A'.\n     DISP C'a'           will show non-display characters as 'a'.\n     DISP AP             will show characters as per ISPF 3278A.\n     DISP APL            will show characters as per ISPF 3278A.\n     DISP s              will show non-display characters as 'S'.\n     DISP 'T'            will show non-display characters as 'T'.\n     DISP t              will show characters as per ISPF 3278T.\n     DISP tn             will show characters as per ISPF 3278T.\n     DISP T11            will show characters as per ISPF 3278T.\n     DISP TEXT           will show characters as per ISPF 3278T.\n)O Operands -\n)P  x      - Specifies a single quoted or unquoted character.\n             This character will be used to represent characters in\n             the data being browsed with code points in the x'00' to\n             x'3F' range, and x'FF'.\n))APL      - Specifies that data code points are to be displayed\n             from the standard character set if keyboard characters,\n             or possibly from the graphic (APL) character set if not\n             keyboard characters.  The graphic character set is not\n             available on some terminals.  This mode is similar to\n             the ISPF 3278A display mode.\n         **  Any unquoted operand beginning with 'A' or 'a' is deemed\n             to specify this operand.\n))TEXT     - Specifies that the \"text\" character set (similar to the\n             TN and T11 print trains) is to be used for character\n             code point interpretation.  Characters from the primary\n             (standard) and alternate (graphic/APL) character sets\n             may be used as appropriate in order to assist in data\n             representation.  This mode is similar to the ISPF 3278T\n             display mode, and is helpful in reading syntax diagrams.\n         **  Any unquoted operand beginning with 'T' or 't' is deemed\n             to specify this operand.\n))?        - The current setting is displayed without change.\n=KEYS=?\n)F Function -\n  The KEYS subcommand displays the current Program Function Key\n  values.  Each PF Key (1 to 24) has a default value which may\n  be changed with the PFK command.\n)X Syntax -\n     KEYS\n\n Alias    - ?\n Defaults - None.\n Required - None.\n)O Operands - None.\n=ASCII\n)F Function -\n  The ASCII subcommand specifies whether character data is displayed\n  using ASCII-to-EBCDIC translation or is to be treated as EBCDIC\n  characters.  If turned on then system-supplied translation is\n  carried out.  FIND strings entered while not in the current ASCII\n  setting cannot be used in RFIND operations.  FIND strings entered\n  while ASCII is turned on are translated to ASCII before the search\n  begins.\n)X Syntax -\n     ASCII ON / OFF / ?\n\n Aliases  - None.\n Defaults - Opposite mode.\n Required - None.\n)O Operands -\n))ON       - Specifies that ASCII data is being REVIEWed and should\n             be translated to EBCDIC before being displayed.\n))OFF      - Specifies that the data is to be shown as-is in EBCDIC.\n))?        - The current setting is displayed without change.\n=FMTPRT\n)F Function -\n  The FMRPRT subcommand specifies whether the highlighting of\n  recognized parts of print report data is to occur or not.  If\n  enabled, various aspects of the job log, job messages, and some\n  utility and assembler output are highlighted to improve\n  readability.  When enabled, any COPYOUT request will truncate the\n  trailing blanks of each record before copying the data to the\n  output file.\n)X Syntax -\n     FMRPRT ON / OFF / ?\n\n Aliases  - None.\n Defaults - Opposite mode.\n Required - None.\n)O Operands -\n))ON       - Specifies that color highlighting of print report data\n             is allowed, and that COPYOUT may truncate trailing\n             blanks.\n))OFF      - Specifies that no highlighting of print report data\n             is to occur.\n))?        - The current setting is displayed without change.\n=INFO\n)F Function -\n  The INFO subcommand will cause the display of the allocation\n  attributes of the data set being processed by REVIEW.  After\n  viewing this information, press <Enter> or any PF key to restore\n  the display of the file data.\n)X Syntax -\n     INFO\n\n Aliases  - None.\n Defaults - None.\n Required - None.\n)O Operands - None.\n=RECALL=RETRIEVE\n)F Function -\n  The RECALL subcommand causes previously typed-in commands to be\n  displayed in the primary input area where they may be changed if\n  required and then reissued.  Note that single character input strings\n  and text implied by PFK usage are not recallable.  The first command\n  recalled is the most recently typed in command.  Consecutive RECALL\n  commands cause increasingly older commands to be recalled.\n)X Syntax -\n     RECALL\n\n Alias    - The DUP character (X'1C').\n Defaults - None.\n Required - None.\n)O Operands - None.\n=PFK\n)F Function -\n  The PFK subcommand changes PFK definitions for the duration of\n  the REVIEW session; to change a PFK, a subcommand such as\n  'PFK6 RIGHT 1'  is entered to change PFK6 to 'RIGHT 1'.\n\n  By default, the PF KEYS are defined as the following:\n              PFK1  - HELP    PFK2  - START      PFK3  - END\n              PFK4  - TSO     PFK5  - RFIND      PFK6  - RCHANGE\n              PFK7  - UP      PFK8  - DOWN       PFK9  - SWAP NEXT\n              PFK10 - LEFT    PFK11 - RIGHT      PFK12 - RECALL\n              PFK13 - TOP     PFK14 - BOTTOM     PFK15 - END\n              PFK16 - SMF     PFK17 - RFIND      PFK18 - EREP\n              PFK19 - UP      PFK20 - DOWN       PFK21 - HEX\n              PFK22 - ASCII   PFK23 - TSO REV    PFK24 - RECALL\n\n  Changes to the PFK assignments may be saved in the profile data set.\n)X Syntax -\n     PFK## 'newpfdata'\n\n Aliases  - None.\n Defaults - None.\n Required - nn and 'newpfdata'\n)O Operands -\n)P  ##      - Specifies the PF Key to be modified.\n              ## is a 1 or 2 decimal digit number in the range of\n              0 to 24 inclusive.  Numbers from 1 to 24 specify a\n              particular Program Function Key.  If ## is 0 then\n              all 24 PF Keys will be assigned their default values.\n\n 'newpfdata'- Specifies the new subcommand for this PF Key.\n=HEX\n)F Function -\n  The HEX subcommand specifies the display mode (character or\n  hexadecimal) for data.  If HEX is entered without operands,\n  the current HEX mode is switched to the opposite HEX mode.\n\n  The normal HEX ON display shows each data byte as two\n  hexadecimal digits.  In this format, the maximum number of data\n  bytes shown on each line is half that of the HEX OFF display.\n\n  The formatting of the HEX ON display can be modified by\n  using the HEXC command.\n)X Syntax -\n     HEX  ON / OFF\n\n Aliases  - None.\n Defaults - Opposite mode.\n Required - None.\n)O Operands -\n))ON       - Specifies that data should be displayed in HEX mode.\n))OFF      - Specifies that data should be displayed in character mode.\n=HEXC\n)F Function -\n  The HEXC subcommand can be used to modify the HEX ON display.\n  The HEXC setting only affects the display of the data when HEX ON\n  is active.\n\n  When HEXC is OFF, HEX ON shows the usual two hexadecimal digits\n  for each data byte.  This can lead to a crowded screen which is\n  difficult to read.\n\n  When HEXC is ON, the HEX ON display is modified to show bytes\n  which correspond to keyboard characters as a blank followed by the\n  character itself.  Further, nulls are shown as two underscores\n  instead of 00.  (An underscore is shown as a single underscore.)\n\n  HEXC can therefore provide improved readability of the data\n  and help the user find non-zero data while still providing a\n  unique rendering for each of the 256 possible code points.\n)X Syntax -\n     HEXC  ON / OFF\n\n Aliases  - None.\n Defaults - Opposite mode.\n Required - None.\n)O Operands -\n))ON       - Specifies that HEX ON shows two hexadecimal digits for\n             each data byte except for keyboard characters and nulls.\n))OFF      - Specifies that HEX ON always shows two hexadecimal digits\n             for each data byte.\n=HEXR\n)F Function -\n  The HEXR subcommand can be used to display the data in an alternate\n  hexadecimal format.  The advantage of the HEXR display over the\n  normal HEX display is that the screen is less crowded and the\n  character data can be viewed simultaneously.\n\n  The maximum number of data bytes that can be shown by HEXR on each\n  line is one quarter of the screen width.  The left-most quarter of\n  each line shows the data in character mode.  The other three\n  quarters of the line show each byte as two hexadecimal digits with\n  a space between each pair of digits.\n\n  Further, to assist with locating non-zero and non-blank data, nulls\n  are shown as two periods instead of 00, and blanks are shown as two\n  underscores instead of 40.\n\n  Data matched by a FIND command will highlight both the character\n  and the hexadecimal parts of the display.  The cursor may be placed\n  in either part of the display to control cursor-specified scrolling.\n\n  The name of HEXR comes from \"HEX on the right\".\n)X Syntax -\n     HEXR  ON / OFF\n\n Aliases  - None.\n Defaults - Opposite mode.\n Required - None.\n)O Operands -\n))ON       - Activates the HEXR display mode.\n))OFF      - Deactivates the HEXR display mode.\n=HEXX\n)F Function -\n  The HEXX subcommand provides and extended hexadecimal display\n  over the normal HEX display format.  The extension is that each\n  data byte is shown as it would be in character mode, followed\n  immediately by its hexadecimal code point value, followed by a\n  blank to make obvious the character-hexadecimal pairing.\n\n  As a result of this format, the maximum number of data bytes\n  which can be shown on a screen line is one quarter of the screen\n  width.\n)X Syntax -\n     HEXX  ON / OFF\n\n Aliases  - None.\n Defaults - Opposite mode.\n Required - None.\n)O Operands -\n))ON       - Activates the HEXX display mode.\n))OFF      - Deactivates the HEXX display mode.\n=RDW\n)F Function -\n  The RDW subcommand allows record descriptor words (RDWs) to be\n  displayed as part of the record's data.  Display column numbers\n  and the maximum display record length are adjusted by 4 as\n  appropriate.\n\n  The RDW command is only valid when processing variable-length\n  records read from a data set using a DCB.  For all other cases,\n  RDW will be rejected as an invalid command.\n)X Syntax -\n     RDW   ON / OFF / ?\n\n Aliases  - None.\n Defaults - Opposite mode.\n Required - None.\n)O Operands -\n))ON       - Activates the display of RDWs as part of the data.\n))OFF      - Deactivates the display of RDWs as part of the data.\n))?        - The current setting is displayed without change.\n=SMF\n)F Function -\n  The SMF subcommand specifies whether or not SMF records are to\n  be converted to eye-readable summary format or not.  It is only\n  of practical use if SMF records are being REVIEWed.  If SMF is\n  entered without operands the current SMF mode is switched to the\n  opposite SMF mode.  Note that activating SMF formatting\n  deactivates EREP formatting.\n)X Syntax -\n     SMF  ON / OFF\n\n Aliases  - None.\n Defaults - Opposite mode.\n Required - None.\n)O Operands -\n))ON       - Specifies that SMF data should be interpreted.\n))OFF      - Specifies that SMF data should not be interpreted.\n=EREP\n)F Function -\n  The EREP subcommand specifies whether or not environmental\n  records (originally from SYS1.LOGREC) are to be converted to\n  eye-readable summary format or not.  It is only of practical\n  use if LOGREC records are being REVIEWed.  If EREP is entered\n  without operands the current EREP mode is switched to the\n  opposite EREP mode.  Note that activating EREP formatting\n  deactivates SMF formatting.\n)X Syntax -\n     EREP  ON / OFF\n\n Aliases  - None.\n Defaults - Opposite mode.\n Required - None.\n)O Operands -\n))ON       - Specifies that EREP data should be interpreted.\n))OFF      - Specifies that EREP data should not be interpreted.\n=FORMAT=FMT\n)F Function -\n  The FORMAT subcommand causes REVIEW to format file data on the\n  screen according to the data structure and types specified in\n  Assembler DS and/or DC statements.  The \"ruler\" heading line above\n  the data is used to show the names of the visible data items, and\n  where room permits the starting column number of the item is shown\n  directly above the data item name.\n\n  The format of the actual file data remains unchanged when HEX ON\n  is active.  When HEX OFF is current, each data item is formatted\n  according to the data type in the DS or DC statement.  The main\n  data types are character, hexadecimal, decimal, and binary\n  integer.\n\n  The Assembler statements are read from the partitioned data set(s)\n  allocated to the REVFMTS file.  REVFMTS must be allocated before it\n  can be used by this subcommand.  The TSO subcommand may be useful in\n  helping to perform this allocation from within REVIEW.  The FMTVAR\n  subcommand can be used to override the data type of a specific data\n  item or variable in a dynamic fashion.\n\n  Note that for variable-length records, the record descriptor word\n  (RDW) is assumed to be present in the data structure source, even\n  though the contents of the RDW are not shown by REVIEW.\n\n  When using this subcommand (as opposed to the SMF subcommand) to\n  format SMF records, the following members of SYS1.MACLIB may be\n  useful, especially after a FINDSMF ALL subcommand has been issued:\n     IFASMFR  - type 0                   IAZSMF49 - type 49\n     IFASMFR1 - type 7                   IFASMFR5 - type 50\n     IFGSMF14 - type 14 and type 15      IAZSMF45 - type 52\n     IGGSMF17 - type 17                  IAZSMF45 - type 53\n     IFASMFR2 - type 20                  IAZSMF45 - type 54\n     IGESMF21 - type 21                  IAZSMF45 - type 55\n     IOSDSMFR - type 22                  IAZSMF45 - type 56\n     IAZSMF24 - type 24                  IAZSMF45 - type 57\n     IAZSMF25 - type 25                  IAZSMF45 - type 58\n     IAZSMF26 - type 26                  IDASMF62 - type 62\n     IFASMFI6 - type 36                  IGGSMF63 - type 63\n     IFASMFR4 - type 40                  IDASMF64 - type 64\n     IAZSMF43 - type 43                  IGGSMF67 - type 67\n     IAZSMF45 - type 45                  IGGSMF68 - type 68\n     IAZSMF47 - type 47                  IGGSMF69 - type 69\n     IAZSMF48 - type 48                  IFASMFR9 - type 80\n\n  When REVIEWing a VTOC, the VTOC entries can be formatted by\n  'FORMAT ON' even when no REVFMTS file allocation is present.\n)X Syntax -\n     FORMAT  'fmtname' / ON / OFF\n\n Alias    - FMT\n Defaults - Opposite mode.\n Required - None.\n)O Operands -\n)P 'fmtname' - Specifies the member name of the REVFMTS file which\n               is to be read for data structure information in the\n               form of Assembler DS and/or DC statements.  Once read\n               the format is held in memory until overlaid by a\n               subsequent FORMAT request or REVIEW terminates.\n               Optionally, the format name may be quoted.\n))ON         - Specifies that the in-storage format that was read\n               due to a previous FORMAT request is to be used\n               again to format the data display.\n))OFF        - Specifies that special formatting of file data is\n               to be suspended.\n=FMTVAR=FV\n)F Function -\n  The FMTVAR subcommand allows a user to override the data type\n  of a data item or variable in a data structure previously read\n  into memory by a FORMAT subcommand.  This is sometimes useful to\n  enhance the viewability of some items.\n)X Syntax -\n     FMTVAR  'varname'  'type'\n\n Alias    - FV\n Defaults - None.\n Required - 'varname' and 'type'\n)O Operands -\n)P 'varname' - Specifies the name of the data item or variable which\n               is to have its data type specified.  Note that data\n               items which have no name (because there was no label\n               in the defining Assembler statement) cannot have their\n               data type changed by this subcommand.\n)P 'type'    - Specifies the data type which is to now be used to\n               format the specified data item.  This operand must be\n               a single character.  Valid types are:\n\n               C - Characters.\n                   Can be translated to EBCDIC when ASCII is ON.\n                   Default for Assembler definition type C.\n\n               Z - Zoned decimal.\n                   Same as C but leading '0's are shown as blanks.\n                   Default for Assembler definition type Z.\n\n               X - Hexadecimal.\n                   Each byte is shown as two hexadecimal digits.\n                   Default for Assembler definition types\n                   A, D, E, L, Q, S, V, X, and Y.\n\n               P - Packed decimal.\n                   Each byte is shown as two hexadecimal digits.\n                   Leading zeros are shown as blanks.\n                   If the last four bits of the item are a valid\n                   packed decimal sign then it is shown as a\n                   blank for hex A, C, E, and F to denote positive,\n                   and as a '-' (minus sign) for hex B and D to\n                   denote negative.\n                   Default for Assembler definition type P.\n\n               I - Signed binary integer.\n                   The item is treated as a twos-complement binary\n                   integer and converted to decimal for display.\n                   A leading minus sign will be used when the first\n                   bit of the item is a '1' indicating a negative\n                   number.\n                   The maximum length supported is four (4) bytes.\n                   Default for Assembler definition types\n                   F and H when two or four bytes long.\n\n               U - Unsigned binary integer.\n                   The item is treated as a non-negative binary\n                   integer and converted to decimal for display.\n                   The maximum length supported is four (4) bytes.\n                   Default for Assembler definition types\n                   F and H when one or three bytes long.\n\n               B - Bits (binary digits).\n                   The item is treated as a bit string where each\n                   byte is shown as eight (8) binary digits.\n                   Consective bytes are separated by an underscore.\n                   Default for Assembler definition type B.\n=COLOR=COLOUR\n)F Function -\n  The COLOR subcommand specifies whether or not data is to be\n  displayed using 3270 extended highlighting and extended color,\n  and which color is to be used for actual data display.  Colors\n  for formatting mode, character mode and hexadecimal mode may be\n  independently selected.  This command may cause errors on some\n  terminals depending on terminal type and network definitions.\n  If no operands are entered then the color mode is switched to\n  the opposite mode.\n\n  The data display colors may be saved in the profile data set.\n)X Syntax -\n     COLOR  ON / OFF / #\n\n Alias    - COLOUR\n Defaults - Opposite mode.\n Required - None.\n)O Operands -\n))ON      - Specifies that 3270 data stream extensions may be used.\n            This may be rejected if the terminal is known to not\n            support color or extended highlighting.\n))OFF     - Specifies that 3270 data stream extensions may not be used.\n))#       - Specifies the color to be used for actual data.\n\n            If specified when formatting is active then this color is\n            used when the record display is the result of formatting.\n\n            Otherwise, when record formatting is OFF:\n            If specified while in character mode then this color is\n            used in character mode.  If specified while in hexadecimal\n            mode then this color is used in hexadecimal mode.\n\n            If specified while a picture image is being displayed, then\n            a) the \"white\" pixels of a black-and-white image are shown\n               in this color, or\n            b) all non-black pixels of a color image displayed using\n               programmed symbols are shown in this color unless the\n               color number is 7 whereupon all colors are shown\n               correctly, or\n            c) the color number is used to control which color planes\n               GDDM will be requested to display.\n            The picture color is NOT saved in the profile data set,\n            and defaults to 7 (neutral).\n\n            # must be a single hexadecimal digit and may be rejected\n            if it is known that the color is not supported by the\n            terminal.  The possible colors and their codes are:\n               1 - Blue                9 - Deep blue\n               2 - Red                 A - Orange\n               3 - Pink                B - Purple\n               4 - Green               C - Pale green\n               5 - Turquoise           D - Pale turquoise\n               6 - Yellow              E - Grey\n               7 - Neutral             F - White\n                  (Codes 0 and 8 (Black) are not allowed.)\n                  (Codes 9 to F are only for 16-color terminals.)\n=SCRNAME\n)F Function -\n  The SCRNAME subcommand allows a new name to be assigned to the\n  active logical screen.  This name can be used as the operand of\n  a SWAP subcommand.  Screen names are displayed by SWAP LIST.\n)X Syntax -\n     SCRNAME 'name'\n\n Aliases  - None.\n Defaults - None.\n Required - name\n)O Operands -\n)P 'name'   - Specifies the screen name.  It can be up to eight\n              characters long.  It cannot be completely numeric.\n              It should not be 'NEXT', 'PREV' or 'LIST'.\n=START=SPLIT\n)F Function -\n  The START subcommand requests that a new parallel session is\n  to be initiated and given control.  The new session will be under\n  the RFE (REVIEW Front End) menu hierarchy.  The new session will\n  NOT be started if it would cause the maximum logical session\n  limit to be exceeded.  If no operand is supplied the RFE primary\n  option menu is shown.\n)X Syntax -\n     START  'option'\n\n Alias    - SPLIT\n Defaults - None.\n Required - None.\n)O Operands -\n)P 'option' - any valid RFE main menu option.  An invalid option\n              will cause the main menu to be shown with the\n              'Invalid command' message.\n=SWAP\n)F Function -\n  The SWAP subcommand specifies which parallel REVIEW session is to\n  become the current session.  It can also list the started REVIEW\n  sessions which are eligible to become the current session.  A\n  parallel REVIEW session is created when the REVIEW TSO subcommand\n  (not the ISPF TSO subcommand) is used to create a recursive REVIEW\n  session.  The nesting order of these sessions can be changed by\n  SWAP.\n)X Syntax -\n     SWAP   LIST / NEXT / PREV / # / 'name'\n\n Aliases  - None.\n Default  - switch to previous screen which is listed second\n            by SWAP LIST\n Required - None.\n)O Operands -\n)P 'name'   - Specifies the target screen name which can be up to\n            eight characters long.\n))LIST    - Specifies that all parallel REVIEW sessions are to be\n            listed.\n))NEXT    - Requests switching to next session in increasing\n            session-id order.\n))PREV    - Requests switching to next session in decreasing\n            session-id order.\n))#       - Specifies the decimal number of the target session\n            that is to be swapped with the current session.\n            'SWAP 0' is a no-operation.\n=SUBMIT=SUB=SB\n)F Function -\n  The SUBMIT subcommand invokes TSO SUBMIT for the file or member\n  being REVIEWed.  This subcommand is invalid unless the file is\n  sequential or partitioned, and has fixed length 80-byte records.\n  If the SB alias is used, the REVSB CLIST is invoked which prevents\n  line mode messages - the submission message is shown on the top line.\n)X Syntax -\n     SUBMIT\n\n Aliases  - SUB, SB\n Defaults - None.\n Required - None.\n)O Operands - None.\n=TSO=TSS\n)F Function -\n  The TSO subcommand specifies a TSO command processor to be invoked\n  from the REVIEW processor.  Commands generating an implicit EXEC\n  such as SYSPROC member names and commands immediately prefixed by\n  a percent sign (%) are supported.\n)X Syntax -\n     TSO  'command' 'operands'\n\n Alias    - TSS\n Defaults - None.\n Required - 'command'\n)O Operands -\n)P 'command'  - Specifies a TSO command to be executed.\n\n)P 'operands' - Specifies any desired operands for this TSO command.\n=EQUATE=EQ\n)F Function -\n  The EQUATE subcommand is only available when browsing the virtual\n  storage of your address space.  It causes the symbol name to be\n  equated to a virtual storage address.  The symbol name can then\n  be used in subsequent LOCATE subcommands.\n\n  EQUATE commands specifying the names of modules in LPA, JPA, and\n  z/OS nucleus control sections will supersede the relevant automatic\n  equates.\n)X Syntax -\n     EQUATE 'symbol' 'address'\n\n Alias    - EQ\n Defaults - None.\n Required - 'symbol', 'address'\n\n Example:\n EQ TIOT 21C.%+C%\n)O Operands -\n)P 'symbol' -  Specifies a 1 to 8 character name with similar syntax\n               requirements to a job name.\n)P 'address' - Specifies a virtual storage address with similar syntax\n               requirements to addresses specified under the TEST\n               command of TSO.\n=EQUATE=EQ\n)F Function -\n  The DROP subcommand is only available when browsing the virtual\n  storage of your address space.  It removes the effect of a\n  previously issued EQUATE command.\n\n  If the symbol being dropped is a name of a module in LPA, JPA, or\n  a z/OS nucleus control section, then that module will subsequently\n  be identified by that symbol name.\n)X Syntax -\n     DROP   'symbol'\n\n Aliases  - None.\n Defaults - None.\n Required - 'symbol'\n)O Operands -\n)P 'symbol' -  Specifies a 1 to 8 character symbol name previously\n               used in an EQUATE subcommand.\n=LABEL\n)F Function -\n  LABEL is not a subcommand.  This HELP entry documents the use\n  of line labels.  For a similar function when browsing virtual\n  storage, see the EQUATE subcommand.\n\n  A label is assigned by entering the label name by itself in the\n  primary input area.  The label is then associated with the first or\n  top-most record on display.  The label can be used in a LIST or\n  LOCATE command to reposition the display back to the labelled record.\n\n  If a defined label name is reused to define a second record,\n  then it is no longer associated with its original record.\n\n  Multiple labels may be associated with a single record.  That is,\n  a record may have more than one label.\n)X Syntax -\n     .label\n\n  where .label is a character string which does not exceed 8 characters\n  in length, contains no imbedded blanks, and begins with a period.\n\n  Alphabetic characters in the name are folded to upper case before\n  they are processed, both when the label is assigned, and when the\n  label name is used as the operand of a LIST or LOCATE subcommand.\n\n  When the label is used to locate a record, the leading period may\n  be omitted as long as the rest of the label name is not made up of\n  numeric characters only.  That is, the period is required when it is\n  necessary to distinguish between a label name and a record number.\n\n Aliases  - None.\n Defaults - None.\n Required - None.\n)O Operands - None.\n=LIST=L=LOC=LOCATE\n)F Function -\n  The LIST subcommand repositions the screen to the relative line\n  number entered, or to the line assigned to the specified label.\n\n   When browsing virtual storage, the operand can be used to specify\n  a storage address instead of a line number.  The symbol X can be\n  used to specify the current address.  Addressing indirection can be\n  used in a way similar to usage under TSO TEST.\n)X Syntax -\n     LIST 'lineno'\n\n Aliases  - L, LOC, LOCATE\n Defaults - None.\n Required - 'lineno'\n\n Examples of locating storage:\n L 200\n   - display line 200.\n L 21C.\n   - display storage at address 21C.\n L 21C.%\n   - display the current TCB which is pointed to by the word at 21C.\n L 21C.%+C%\n   - display your TIOT (Task I/O Table).\n L X-14\n   - display the data 20 bytes before the data being displayed now.\n L IEFBR14\n   - display storage at the entry point of LPA module IEFBR14.\n L REVIEW+1A\n   - display the date and time stamp in the REVIEW load module.\n L 21C%%+C%+10?\n   - display storage at the entry point of JPA module REVIEW\n     using PSA->TCB->PRB->CDE->E.P.\n)O Operands -\n)P 'lineno' -  Specifies the data which is to be positioned as\n               the first or top-most visible line on the screen.\n\n               The specification can take one of several forms:\n\n               - Relative (from the top of the file) record number\n                 specified as a decimal number.\n\n               - A previously assigned label.  Look at the HELP\n                 for LABEL for information about line labels.\n                 The leading period may be omitted if the rest\n                 of the label name contains at least 1 non-numeric.\n\n               - A virtual storage address when browsing virtual\n                 storage.  See examples under SYNTAX above.\n=NEWTOP\n)F Function -\n  The NEWTOP command allows the specification of an arbitrary\n  relative physical address to be considered as the top-of-data.\n  This is useful for viewing data beyond I/O errors and end-of-file\n  markers that would normally be encountered, for viewing the\n  contents of deleted PDS members, and for resynchronizing the\n  REVIEW session with a file that is currently being updated.\n  It is also useful for directly viewing data a long way from the\n  start of the file without reading all the preceding records.\n)X Syntax -\n     NEWTOP 'rel-addr'\n\n Aliases  - None.\n Defaults - 0\n Required - None.\n)O Operands -\n)P 'rel-addr' - a 1 to 6 hexadecimal digit number specifying a\n     relative physical address.  For disk files this specifies a\n     relative TTR.  For tape files this specifies a relative block\n     number.  A value of zero specifies that the real top-of-data\n     address is to be used and previously acquired end-of-file and\n     record location information is to be dropped.\n  ** Note that 0 is the only operand allowed when viewing VSAM\n     files, and in this case NEWTOP merely performs a CLOSE\n     followed by an OPEN to drop all pre-loaded buffers.\n  ** Also note that the subcommand sequence\n            HEX ON\n            RIGHT MAX\n            HEX OFF\n     can be used to display the relative physical address of each\n     logical record in NEWTOP operand format.  For spanned records\n     the address of the last segment is shown.\n=APPEND=ADD=TACKON\n)F Function -\n  The APPEND subcommand causes REVIEW to write records from the\n  data being REVIEWed to an output data set.  Records are written\n  consecutively from the first record shown on the screen until\n  the requested number of records has been copied or end-of-file is\n  reached.  When complete, the first record AFTER the copied records\n  is made the new top-of-screen record.  The APPEND subcommand\n  performs the same processing as the COPYOUT subcommand except that\n  the output file is opened for EXTEND, so that data is appended to\n  any data already residing in the output file.\n\n  ** Note that PDS members cannot be extended.\n\n  A major advantage that the COPYOUT and APPEND subcommands provide\n  is the ability to copy data that has been rendered inaccessible by\n  I/O errors.  Data beyond an I/O error can be REVIEWed with the use\n  of the NEWTOP subcommand.  Any data that can be REVIEWed can be\n  copied and saved to an intermediate file for data reclamation.\n\n  Another feature of COPYOUT and APPEND is selectivity.  Not only\n  can records be selected by manually scrolling to a specific record\n  and cutting a specific number of records, but selectivity can be\n  automated with FIND ALL and FINDNOT ALL.  Only records eligible\n  for display can be copied, so FIND ALL and FINDNOT ALL subcommands\n  can be used to exclude records based on their data content not\n  only from display but also from offloading by COPYOUT and APPEND.\n\n  Further, data copied from an ASCII file can be converted to EBCDIC\n  by specifying ASCII ON before commencing the COPYOUT operation.\n\n  The user will be prompted with a data entry panel to specify the\n  output data set.\n)X Syntax -\n     APPEND 'record-count'\n\n Aliases  - ADD, TACKON\n Defaults - copy to end-of-file.\n Required - None.\n)O Operands -\n)P 'record-count'\n              - Specifies the number of records to be copied.\n                If not specified then data is copied until end-of-file\n                is reached or forced by an I/O error.\n=COPYOUT=CUTOFF=CUT=CUTOVER\n)F Function -\n  The COPYOUT subcommand causes REVIEW to write records from the\n  data being REVIEWed to an output data set.  Records are written\n  consecutively from the first record shown on the screen until\n  the requested number of records has been copied or end-of-file is\n  reached.  When complete, the first record AFTER the copied records\n  is made the new top-of-screen record.  The COPYOUT subcommand\n  performs the same processing as the APPEND subcommand except that\n  the output file is opened for OUTPUT, so that data already residing\n  in the output file is overwritten and lost.\n\n  A major advantage that the COPYOUT and APPEND subcommands provide\n  is the ability to copy data that has been rendered inaccessible by\n  I/O errors.  Data beyond an I/O error can be REVIEWed with the use\n  of the NEWTOP subcommand.  Any data that can be REVIEWed can be\n  copied and saved to an intermediate file for data reclamation.\n\n  Another feature of COPYOUT and APPEND is selectivity. Not only\n  can records be selected by manually scrolling to a specific record\n  and cutting a specific number of records, but selectivity can be\n  automated with FIND ALL and FINDNOT ALL.  Only records eligible\n  for display can be copied, so FIND ALL and FINDNOT ALL subcommands\n  can be used to exclude records based on their data content not\n  only from display but also from offloading by COPYOUT and APPEND.\n\n  Further, data copied from an ASCII file can be converted to EBCDIC\n  by specifying ASCII ON before commencing the COPYOUT operation.\n\n  The user will be prompted with a data entry panel to specify the\n  output data set.\n)X Syntax -\n     COPYOUT 'record-count'\n\n Aliases  - CUTOFF, CUT, CUTOVER\n Defaults - copy to end-of-file.\n Required - None.\n)O Operands -\n)P 'record-count'\n              - Specifies the number of records to be copied.\n                If not specified then data is copied until end-of-file\n                is reached or forced by an I/O error.\n=RTF\n)F Function -\n  The RTF subcommand performs the same function as COPYOUT\n  but only processes print files.  The output data is a Rich Text\n  Format (RTF) file containing pagination data from carriage control\n  characters, and print coloring information assigned by REVIEW.\n\n  The color information in the RTF file will broadly match that\n  shown by REVIEW on the screen.  Colors are determined by message\n  identifier recognition and by Assembler listing syntax highlighting.\n\n  A file being REVIEWed is deemed a print file if it is job output\n  being processed by REVOUT, or if it has A or M carriage control\n  in the record format.  Further, the maximum logical record length\n  must be less than 256.\n\n  The output file is suitable for a text transfer to a distributed\n  platform system where it can be transformed into other file types\n  such as Adobe's Portable Document Format (PDF).\n\n  The user will be prompted with a data entry panel to specify the\n  output data set.  Consult the information for COPYOUT above for\n  further details.  ** Note that there is no RTF version of APPEND.\n)X Syntax -\n     RTF 'record-count'\n\n Aliases  - None.\n Defaults - copy to end-of-file.\n Required - None.\n)O Operands -\n)P 'record-count'\n              - Specifies the number of records to be copied.\n                If not specified then data is copied until end-of-file\n                is reached or forced by an I/O error.\n=PICDATA\n)F Function -\n  The PICDATA subcommand causes REVIEW to write fixed-length\n  80-byte records to a specified data set.  The records are Assembler\n  source statements containing data necessary to recreate the image\n  which is currently being displayed by REVIEW.  The user will be\n  prompted to supply a data set name.\n\n  This subcommand is only valid when REVIEW can display the image\n  contained in a picture file.  Its use provides a mechanism for\n  exporting an image into other application source code.\n\n  If REVIEW is displaying the picture with programmed symbols,\n  the file will contain the data necessary to load the symbols\n  (18 bytes per format type-1 symbol) plus data regarding symbol\n  placement in the picture.\n\n  If REVIEW issues calls to GDDM to display the picture, the\n  data will contain the bitmaps passed to GDDM via GSIMG calls.\n\n  Data for blue, red and green planes will be written for color\n  images, whereas only one plane is used for black-and-white images.\n)X Syntax -\n     PICDATA\n\n Aliases  - None.\n Defaults - None.\n Required - None.\n)O Operands - None.\n=SETUNZ\n)F Function -\n  The SETUNZ subcommand allows the overriding of the data type\n  and the record length of data produced by the unzip process.\n  Normally, the data type (binary, ASCII text or EBCDIC text) is\n  derived from the zip archive directory entry for the file chosen\n  for unzipping.\n\n  For binary files variable-length records are used, and the\n  default record data length is the number of columns of the TSO\n  terminal screen, unless the total byte count is a multiple of 80,\n  in which case fixed-length 80-byte records are extracted.\n\n  For text records, variable-length records are used and the\n  default maximum record length is 4092.  ASCII text records are\n  terminated by ASCII LF or ASCII CRLF, and EBCDIC text records are\n  terminated by EBCDIC NL.  These control codes are discarded after\n  triggering a new record, and are not actually output as data bytes.\n\n  Some versions of the MINIZIP program can store MVS data set\n  attributes in the comment area of the file's central file directory\n  entry.  When these comments are detected by REVIEW, they are used\n  instead of the defaults described above, unless overridden by\n  values explicitly set using the SETUNZ subcommand.\n\n  When MVS fixed-length records are indicated in the zip directory,\n  EBCDIC text is treated as binary data.\n\n  After any operands have been processed, the active settings are\n  reported in the top screen line message area.\n)X Syntax -\n     SETUNZ  'data-type'  'record-length'\n\n Aliases  - None.\n Defaults - None - report the currrent settings without change.\n Required - None.\n)O Operands -\n Note: The operands may appear in any order.\n)P 'data-type'\n              - Specifies the type of data being unzipped.\n                Only the first character of the operand is examined.\n                The allowed values are:\n              O for OFF meaning no data-type override is active.\n              B for BINARY meaning the data is a stream of bytes\n                which is not translated or otherwise modified.\n                Note that extra nulls may be output to fill the\n                last record after the end of data.\n              A for ASCII text which is translated to EBCDIC.\n              E for EBCDIC text which is not translated.\n)P 'record-length'\n              - Specifies a decimal number in the 0 to 32767 range.\n                The override is cleared by a specification of 0.\n                Specifying a non-zero value less than 5 for text\n                files may cause an unzip process to abend your\n                whole REVIEW/RFE session.\n=BROWSE\n)F Function -\n  The BROWSE subcommand requests ISPF to BROWSE the data set or\n  member currently being REVIEWed.  This subcommand is only valid\n  when the current data set is an MVS DASD data set.  It is not\n  valid for a UNIX file or a data set being treated as a ZIP file.\n  The ISPF request will only succeed in an IBM ISPF environment.\n)X Syntax -\n     BROWSE\n\n Aliases  - None.\n Defaults - None.\n Required - None.\n)O Operands - None.\n=EDIT\n)F Function -\n  The EDIT subcommand requests ISPF to EDIT the data set or member\n  currently being REVIEWed.  This subcommand is only valid when the\n  current data set is an MVS DASD data set.  It is not valid for an\n  UNIX file or a data set being treated as a ZIP file.  The ISPF\n  request will only succeed in an IBM ISPF environment.  If ISPF\n  Edit cannot be invoked then REVEDIT Edit will be used instead.\n)X Syntax -\n     EDIT\n\n Aliases  - None.\n Defaults - None.\n Required - None.\n)O Operands - None.\n=VIEW\n)F Function -\n  The VIEW subcommand requests ISPF to VIEW the data set or member\n  currently being REVIEWed.  This subcommand is only valid when the\n  current data set is an MVS DASD data set.  It is not valid for an\n  UNIX file or a data set being treated as a ZIP file.  The ISPF\n  request will only succeed in an IBM ISPF environment.  If ISPF\n  View cannot be invoked then REVEDIT View will be used instead.\n)X Syntax -\n     VIEW\n\n Aliases  - None.\n Defaults - None.\n Required - None.\n)O Operands - None.\n=CANCEL=CAN\n)F Function -\n  The CANCEL subcommand performs the same processing as the END\n  subcommand without saving the REVIEW/FSHELP user profile to disk.\n  The REVIEW/FSHELP user profile (which contains data display colors,\n  scrolling amount and 24 PF Key values) is normally only rewritten to\n  disk at the END of a REVIEW session if it has been changed during\n  that session.  If a member list has not been displayed in a session\n  then the REVIEW session is terminated without saving the user\n  profile.  If a member list has been shown it is reshown but the user\n  profile is no longer considered to have been altered, even though the\n  profile \"in-core\" still has the changes applied to it.  Changing the\n  profile at this stage and exiting will cause all accumulated profile\n  changes for the REVIEW session to be saved to disk unless another\n  CANCEL is issued.\n)X Syntax -\n     CANCEL\n\n Alias    - CAN\n Defaults - None.\n Required - None.\n)O Operands - None.\n=END\n)F Function -\n  The END subcommand terminates the REVIEW command, or, if in member\n  selection mode, returns to the member selection list.  The member\n  selection list may be bypassed with the EXIT subcommand.\n)X Syntax -\n     END\n\n Aliases  - None.\n Defaults - None.\n Required - None.\n)O Operands - None.\n=EXIT=RETURN==X\n)F Function -\n  The EXIT subcommand terminates the REVIEW command, bypassing\n  the member selection list.\n)X Syntax -\n     EXIT\n\n Aliases  - RETURN, =X\n Defaults - None.\n Required - None.\n)O Operands - None.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "REVLEV": {"ttr": 12033, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'0\\x05\\x008\\x01\\x10\\x07O\\x01\\x19\\x02\\x7f#2\\x02\\xff\\x01O\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf3\\xf4@@@'", "ispf": {"version": "48.05", "flags": 0, "createdate": "2010-03-15T00:00:00", "modifydate": "2019-01-27T23:32:38", "lines": 767, "newlines": 335, "modlines": 0, "user": "FILE134"}, "text": "*                    TSO HELP FOR 'REVLEV' RELEASE 48.5    JANUARY 2019\n)F Function -\n  REVLEV is a processing option of RFE (REVIEW Front End) with the\n  main function of presenting a list of data sets which then allows\n  the easy selection of data sets for processing by utility functions.\n\n  The initial panel allows the specification of the data set name\n  prefix and a volume serial number.\n\n  If the volume serial number field is left blank then the catalog\n  is used as the source of data set names to list.\n\n  If a volume serial number is supplied the data sets on that volume\n  are listed, subject to filtering by the specified data set name\n  prefix.  If no data set name prefix is specified then all data sets\n  on the volume are listed.\n\n  When a data set name list is presented, each detail line has a\n  single character selection code input field, the name of the data\n  set, and several attributes of the data set.\n\n  Initially the list is sorted by data set name.  Any of the display\n  columns can be used to sort the list, either in ascending or\n  descending order.  Each sortable attribute has a default sort\n  order.  For example, SORT NAME has a default sort order of\n  ascending, as does SORT VOLUME, but SORT AL and SORT US have a\n  default sort order of descending.\n\n  The input selection code field can be used to trigger an action\n  upon the data set listed on that display line.\n\n\n  Volume-specific extras\n  ======================\n\n  When a volume serial number is supplied, the resultant list of\n  data sets is read from the Volume Table Of Contents (VTOC) of\n  that volume.  RFE also issues a Sense-Id I/O operation to the\n  volume and the type of device and control unit returned by that\n  operation are shown at the top left corner of the screen.\n\n  For terminals with suitable graphics facilities, and when the\n  geometry of the disk volume suits, a disk space usage plot will\n  be displayed after the end of the data set list.  Each track is\n  represented by a single 3270 pixel.  The top row of pixels\n  represents track or head 0 of each cylinder, the second pixel\n  row represents track or head 1 of each cylinder, and so on.\n  The left-most column of pixels in the plot represents cylinder 0.\n\n  The colors used in the volume space map plot are:\n\n  White     - The volume label (track 0) and space described by\n              the format-4 DSCB (which is the VTOC).\n\n  Green     - Space described by a format-1 DSCB for non-VSAM data\n              sets which are not CVOLs, or DSORG=DA or DSORG=IS.\n\n  Pink      - Space described by a format-1 DSCB for non-VSAM data\n              sets which are CVOLs, or DSORG=DA or DSORG=IS.\n\n  Turquoise - Space described by a format-1 DSCB for VSAM data sets.\n\n  Yellow    - Space described by a format-3 DSCB.  Such space will\n              include secondary extents from extent 4 onwards.  The\n              first 3 extents of a data set are described by a\n              format-1 DSCB.\n\n  Blue      - Space described by a format-5 DSCB, which is free space.\n              This will only be visible if the VTOC is not indexed.\n\n  Red       - Any space which was plotted more than once.  Such\n              space is actually in more than one extent and any\n              such space indicates a corrupt VTOC.  Also, if a\n              data set name prefix was specified, then all extents\n              of all listed data sets will be shown in red.\n)X Syntax -\n         REVLEV\n\n  Required - None.\n  Defaults - None.\n  Aliases  - None.\n)O Operands - None.\n)S Subcommands -\n ------------------------ SELECTION CODES -----------------------------\n\n Listed data sets can be processed by the following selection codes:\n\n A - ALLOCATE LIKE - Allocate a new data set with some attributes\n     of the selected data set already primed in the data set\n     creation specification panel.\n\n B - BROWSE - Look at the contents of the data set using the REVIEW\n     data set browser.\n\n C - CATALOG - Create a catalog entry for an uncataloged data set.\n\n D - DELETE - Delete the data set after a confirmation panel is shown.\n\n  ** NOTE: DISP=(,DELETE) is used to carry out the DELETE function.\n     If the data still exists after being dynamically deallocated,\n     then the D action is flagged as being unsuccessful, but no\n     other feedback is given.  Possible reasons include the data\n     set's retention period has not expired, and the data set's\n     name is not entirely comprised of valid qualifiers.\n\n E - EDIT - Update the data set with the REVEDIT editor.\n\n I - INFORMATION - Display details about the data set including PDS\n     directory information.\n\n L - LISTCAT - Display the catalog entry details as reported by\n     the LISTCAT command.\n\n M - MEMLIST - Display the member list of the PDS or PDSE.\n\n R - RENAME - Change the name of the selected data set.\n\n S - SHORT INFORMATION - same as the I selection code except that\n     the data set is not opened so PDS directory information will\n     not be shown and the last referenced date will not be changed.\n\n U - UNCATALOG - Delete the catalog entry of the selected data set\n     without deleting the actual data set.\n\n V - VIEW - Look at the contents of the data set using the REVEDIT\n     editor in View mode, which means changes cannot be saved.\n\n Z - COMPRESS - Reclaim unused space in a PDS by a CONDENSE process\n     which causes the contents of the PDS to be copied to a holding\n     sequential data set (usually called 'userid.CONDENSE'), the PDS\n     to be reset to empty, and the contents written back to the PDS\n     from the holding data set.\n\n  ** NOTE: If the write-back phase does not complete successfully,\n     the holding data set is not deleted.  Its contents can be used\n     as input to the REVLPDS program to reconstruct the PDS.  The\n     necessary DDs for PGM=REVLPDS are SYSUT1 for the sequential\n     input and SYSUT2 for the partitioned output.\n\n ------------------------ DISPLAY COLUMNS -----------------------------\n\n Data sets are listed with the following information columns:\n\n DATA-SET-NAME - The name of the data set or catalog entry.\n\n VOLUME - The serial number of the first or only volume where\n          the data set resides.  This will be followed by a\n          plus sign '+' for multi-volume data sets.  When the\n          data set list is made of VTOC entries, the volume\n          will be followed by a not sign ('\u00ac') when the listed\n          data set is not cataloged.\n\n ALTRK  - The number of tracks allocated to the data set on this\n          volume.  For cataloged multi-volume data sets, this is\n          the total number of tracks allocated on all volumes.\n\n USTRK  - The total number of tracks from the start of the data\n          set used to hold the data.  This data item is only\n          maintained by the system for sequential and PDS\n          (excluding PDSE) data sets.\n\n ORG    - The data set organization.  Possible values are:\n            CAT - Formatted OS catalog - known as SYSCTLG or CVOL\n            DA  - Direct Access\n            DAU - Direct Access Unmovable\n            IS  - Indexed Sequential\n            PS  - Physical Sequential - DSNTYPE=BASIC\n            PSE - Physical Sequential Extended Format - may be\n                  striped and/or compressed\n            PSL - Physical Sequential Large - can be larger than\n                  65536 tracks - DSNTYPE=LARGE\n            PSU - Physical Sequential Unmovable\n            PO  - Partitioned Organization - DSNTYPE=PDS\n            POE - Partitioned Organization Extended - PDSE -\n                  DSNTYPE=LIBRARY\n            POU - Partitioned Organization Unmovable\n            VS  - VSAM\n          (DSNTYPE is a z/OS JCL parameter.)\n\n FRMT   - The record format of the data set.\n\n %      - The fullness percentage of the data set.  This is only\n          meaningful for sequential and PDS (excluding PDSE) data sets.\n\n XT     - The number of extents of disk space owned by the data set.\n\n LRECL  - The maximum length of a logical record allowed in the\n          data set.\n\n BLKSZ  - The maximum length of a physical block allowed in the\n          data set.\n\n REFDT  - The date that the data set was last opened, or perhaps\n          closed for some versions of the operating system.\n          This field will be blank for data sets that have never\n          been opened.\n\n CREDT  - The date that the data set was created.\n\n          An 'R' displayed between the CREDT and EXPDT columns\n          indicates that the RACF protection bit has been set\n          in data set's VTOC entry.\n\n EXPDT  - If non-blank, this is the expiration date set in the\n          VTOC (not catalog) entry.  Attempting an update before\n          this date is passed will cause a WTOR to be issued to\n          seek permission from the system operator.  The PURGE\n          keyword is needed on the DELETE command to delete data\n          sets that have not yet passed their expiration date.\n\n ----------------------- GLOBAL SUBCOMMANDS ---------------------------\n\n These subcommands are available in all RFE options:\n\n   HELP    - Request HELP about REVIEW and/or its subcommands.\n             This will be intercepted by ISPF if REVIEW is\n             running as an ISPF dialog.\n   HEL     - Same as 'HELP' except ISPF will not intercept it.\n   FSHELP  - Same as 'HEL'.\n   FSH     - Same as 'HEL'.\n   KEYS    - Display current Program Function Key values.\n   ?       - Display the release of REVIEW that is in use.\n   TASK    - Display Task Control Block and Request Block structure.\n   TCB     - Same as 'TASK'.\n   RB      - Same as 'TASK'.\n   CDE     - Show the Job Pack Area's Contents Directory Elements.\n   JPA     - Same as 'CDE'.\n   TSO     - Issue a TSO command.\n   TSS     - Same as 'TSO'.\n   PFK#    - Set Program Function Key '#' to a specified value.\n   PFK0    - Set Program Function Keys to default values.\n   RECALL  - Recall previously typed-in commands for optional\n             editing and reissuing.\n   RETRIEVE- Same as 'RECALL'.\n   SCRNAME - Assign a new name to this logical screen session.\n   START   - Create a new RFE (REVIEW Front End) parallel session.\n   SPLIT   - Same as 'START'.\n   SWAP    - List or transfer control between parallel sessions.\n   END     - END the command.\n   CANCEL  - Same as 'END' but user profile changes are not saved.\n   CAN     - Same as 'CANCEL'.\n   EXIT    - Terminate the whole REVIEW session.\n   RETURN  - Same as 'EXIT'.\n   =X      - Same as 'EXIT' when not running as an ISPF dialog.\n\n ------------------------ LOCAL SUBCOMMANDS ---------------------------\n\n These subcommands are available in the data set filter entry panel:\n\n   ALLOC   - Allocate a new data set.\n   A       - Same as 'ALLOC'.\n\n ------------------------ LOCAL SUBCOMMANDS ---------------------------\n\n These subcommands are available when a data set list is displayed:\n\n   UP      - Scroll upwards a specified number of display lines.\n             If no operand is specified, the 'scroll' value is used.\n             This is displayed in the upper right corner.\n   '-'     - Same as 'UP'.\n   DOWN    - Scroll downwards a specified number of display lines.\n             If no operand is specified, the 'scroll' value is used.\n             This is displayed in the upper right corner.\n   '+'     - Same as 'DOWN'.\n   TOP     - Scroll up to the first display line.\n   BOTTOM  - Scroll down to the last display line.\n   BOT     - Same as 'BOTTOM'.\n   LEFT    - Scroll to the show the left-most information columns.\n   '<'     - Same as 'LEFT'.\n   RIGHT   - Scroll to the show the right-most information columns.\n   '>'     - Same as 'RIGHT'.\n   FIND    - Search for the specified data set name substring.\n   F       - Same as 'FIND'.\n   RFIND   - Repeat the previous FIND.\n   IFIND   - Same as 'RFIND'.\n   LIST    - Reposition the display to the specified line number,\n             or sort field prefix if non-numeric.\n   L       - Same as 'LIST'.\n   LOC     - Same as 'LIST'.\n   LOCATE  - Same as 'LIST'.\n   SEARCH  - Request a multi-data set search.\n   SRCHFOR - Same as 'SEARCH'.\n   SORT    - Sort the display lines based on the content of a\n             particular column.\n   MEMBER  - Search partitioned data sets (PDS and PDSE) in the data\n             set list for any members with names which match the\n             specified member name mask.\n   MEM     - Same as 'MEMBER'.\n\n ----------------------------------------------------------------------\n=HELP=HEL=FSHELP=FSH\n)F Function -\n  The HELP subcommand provides function, syntax, and operand\n  information on the 'REVIEW' command and its subcommands.\n)X Syntax -\n         HELP   'subcommand name'\n                FUNCTION  SYNTAX  OPERANDS('keyword list')  ALL\n                POSITIONAL('operand number') MSG('msgid')\n  Aliases  - HEL, FSHELP, FSH\n  Required - None.\n  Defaults - ALL if FUNCTION, SYNTAX, and OPERANDS not specified.\n  Note     - If HELP is entered without any operands a list of\n             subcommands of the current command will be displayed.\n  Note     - 'keyword list' is optional when OPERANDS is used.\n)O Operands -\n)P 'subcommand name'\n           - Name of the subcommand of 'REVIEW' to be explained.\n))FUNCTION - Function data is to be displayed.\n))SYNTAX   - Format is to be displayed.\n))OPERANDS('keyword list')\n           - Operand description is to be displayed.  If\n             'keyword list' is present, only those keyword descriptions\n             are to be displayed.\n    'keyword list'\n           - Keywords separated by commas, blanks, or tabs.\n))ALL      - Function, syntax, and operand descriptions are to be\n             displayed.\n))POSITIONAL('operand number')\n           - A description of the positional operand specified is to\n             be displayed.\n))MSGID('msgid')\n           - A description of the message identified by msgid is to be\n             displayed.\n=KEYS=?\n)F Function -\n  The KEYS subcommand displays the current Program Function Key\n  values.  Each PF Key (1 to 24) has a default value which may\n  be changed with the PFK command.\n)X Syntax -\n     KEYS\n\n Alias    - ?\n Defaults - None.\n Required - None.\n)O Operands - None.\n=RECALL=RETRIEVE\n)F Function -\n  The RECALL subcommand causes previously typed-in commands to be\n  displayed in the primary input area where they may be changed if\n  required and then reissued.  Note that single character input strings\n  and text implied by PFK usage are not recallable.  The first command\n  recalled is the most recently typed in command.  Consecutive RECALL\n  commands cause increasingly older commands to be recalled.\n)X Syntax -\n     RECALL\n\n Alias    - The DUP character (X'1C').\n Defaults - None.\n Required - None.\n)O Operands - None.\n=PFK\n)F Function -\n  The PFK subcommand changes PFK definitions for the duration of\n  the REVIEW session; to change a PFK, a subcommand such as\n  'PFK6 RIGHT 1'  is entered to change PFK6 to 'RIGHT 1'.\n\n  By default, the PF KEYS are defined as the following:\n              PFK1  - HELP    PFK2  - START      PFK3  - END\n              PFK4  - TSO     PFK5  - RFIND      PFK6  - RCHANGE\n              PFK7  - UP      PFK8  - DOWN       PFK9  - SWAP NEXT\n              PFK10 - LEFT    PFK11 - RIGHT      PFK12 - RECALL\n              PFK13 - TOP     PFK14 - BOTTOM     PFK15 - END\n              PFK16 - SMF     PFK17 - RFIND      PFK18 - EREP\n              PFK19 - UP      PFK20 - DOWN       PFK21 - HEX\n              PFK22 - ASCII   PFK23 - TSO REV    PFK24 - HEXC\n\n  Changes to the PFK assignments may be saved in the profile data set.\n)X Syntax -\n     PFK## 'newpfdata'\n\n Aliases  - None.\n Defaults - None.\n Required - nn and 'newpfdata'\n)O Operands -\n)P  ##      - Specifies the PF Key to be modified.\n              ## is a 1 or 2 decimal digit number in the range of\n              0 to 24 inclusive.  Numbers from 1 to 24 specify a\n              particular Program Function Key.  If ## is 0 then\n              all 24 PF Keys will be assigned their default values.\n\n 'newpfdata'- Specifies the new subcommand for this PF Key.\n=SCRNAME\n)F Function -\n  The SCRNAME subcommand allows a new name to be assigned to the\n  active logical screen.  This name can be used as the operand of\n  a SWAP subcommand.  Screen names are displayed by SWAP LIST.\n)X Syntax -\n     SCRNAME 'name'\n\n Aliases  - None.\n Defaults - None.\n Required - name\n)O Operands -\n)P 'name'   - Specifies the screen name.  It can be up to eight\n              characters long.  It cannot be completely numeric.\n              It should not be 'NEXT', 'PREV' or 'LIST'.\n=START=SPLIT\n)F Function -\n  The START subcommand requests that a new parallel session is\n  to be initiated and given control.  The new session will be under\n  the RFE (REVIEW Front End) menu hierarchy.  The new session will\n  NOT be started if it would cause the maximum logical session\n  limit to be exceeded.  If no operand is supplied the RFE primary\n  option menu is shown.\n)X Syntax -\n     START  'option'\n\n Alias    - SPLIT\n Defaults - None.\n Required - None.\n)O Operands -\n)P 'option' - any valid RFE main menu option.  An invalid option\n              will cause the main menu to be shown with the\n              'Invalid command' message.\n=SWAP\n)F Function -\n  The SWAP subcommand specifies which parallel REVIEW session is to\n  become the current session.  It can also list the started REVIEW\n  sessions which are eligible to become the current session.  A\n  parallel REVIEW session is created when the REVIEW TSO subcommand\n  (not the ISPF TSO subcommand) is used to create a recursive REVIEW\n  session.  The nesting order of these sessions can be changed by SWAP.\n)X Syntax -\n     SWAP   LIST / NEXT / PREV / # / 'name'\n\n Aliases  - None.\n Default  - switch to previous screen which is listed second\n            by SWAP LIST\n Required - None.\n)O Operands -\n)P 'name'   - Specifies the target screen name which can be up to\n            eight characters long.\n))LIST    - Specifies that all parallel REVIEW sessions are to be\n            listed.\n))NEXT    - Requests switching to next session in increasing\n            session-id order.\n))PREV    - Requests switching to next session in decreasing\n            session-id order.\n))#       - Specifies the decimal number of the target session\n            that is to be swapped with the current session.\n            'SWAP 0' is a no-operation.\n=TSO=TSS\n)F Function -\n  The TSO subcommand specifies a TSO command processor to be invoked\n  from the REVIEW processor.  Commands generating an implicit EXEC\n  such as SYSPROC member names and commands immediately prefixed by\n  a percent sign (%) are supported.\n)X Syntax -\n     TSO  'command' 'operands'\n\n Alias    - TSS\n Defaults - None.\n Required - 'command'\n)O Operands -\n)P 'command'  - Specifies a TSO command to be executed.\n\n)P 'operands' - Specifies any desired operands for this TSO command.\n=CANCEL=CAN\n)F Function -\n  The CANCEL subcommand performs the same processing as the END\n  subcommand without saving the REVIEW/FSHELP user profile to disk.\n  The REVIEW/FSHELP user profile (which contains data display colors,\n  scrolling amount and 24 PF Key values) is normally only rewritten to\n  disk at the END of a REVIEW session if it has been changed during\n  that session.  If a member list has not been displayed in a session\n  then the REVIEW session is terminated without saving the user\n  profile.  If a member list has been shown it is reshown but the user\n  profile is no longer considered to have been altered, even though the\n  profile \"in-core\" still has the changes applied to it.  Changing the\n  profile at this stage and exiting will cause all accumulated profile\n  changes for the REVIEW session to be saved to disk unless another\n  CANCEL is issued.\n)X Syntax -\n     CANCEL\n\n Alias    - CAN\n Defaults - None.\n Required - None.\n)O Operands - None.\n=END\n)F Function -\n  The END subcommand terminates the REVLEV command.  If REVLEV is\n  invoked as RFE option 3.4, then END will exit back to the previous\n  menu.\n)X Syntax -\n     END\n\n Aliases  - None.\n Defaults - None.\n Required - None.\n)O Operands - None.\n=EXIT=RETURN==X\n)F Function -\n  The EXIT subcommand terminates the REVLEV command.  If REVLEV is\n  invoked as RFE option 3.4, then =X will terminate the logical\n  screen session.\n)X Syntax -\n     EXIT\n\n Aliases  - RETURN, =X\n Defaults - None.\n Required - None.\n)O Operands - None.\n=FIND=F\n)F Function -\n  The FIND subcommand positions the display to a data set which\n  contains the search argument string in its name.\n\n  FIND notes:\n   1.  A search argument is required.  A single unquoted asterisk\n       may be used to specify the same argument as was last used.\n   2.  The first operand is always treated as the search argument.\n   3.  The entire first operand is treated as the search argument,\n       so, in general, do NOT use quotes.\n)X Syntax -\n     FIND 'string'   FIRST / NEXT / PREV / LAST\n\n Alias    - F\n Defaults - NEXT\n Required - 'string'\n)O Operands -\n)P 'string'  - Specifies the string to look for in data set names.\n))FIRST   - Search forward from the top of the data set list.\n))NEXT    - Search forward from the current location.\n))PREV    - Search backward from the current location.\n))LAST    - Search backward from the end of the data set list.\n=RFIND=IFIND\n)F Function -\n  The RFIND subcommand repeats the previous FIND operation.\n  No operands are allowed.  It is expected that RFIND will be used\n  as the default meaning of a PFK such as PF5 or PF17.\n  Note: RFIND in the forward direction skips the current top line.\n)X Syntax -\n     RFIND\n\n Alias    - IFIND\n Defaults - Same operation, string and direction.\n Required - None.\n)O Operands - None.\n=SEARCH=SRCHFOR\n)F   The SEARCH subcommand causes a data entry screen to be presented\n  where the parameters of a multi-data set search can be specified.\n  The facilities of the REVIEW FIND subcommand are used.  Searched\n  data sets are flagged with the $ character to indicate the most\n  action performed.  Only data sets where matching data was found\n  will be shown in high intensity or white.\n)X Syntax -\n     SEARCH\n ALIASES  - SRCHFOR\n Defaults - None.\n Required - None.\n)O Operands - None.\n=RESET=RES\n)F Function -\n  The RESET subcommand clears all pending line commands, all\n  action error status indicators, and all last-action-performed\n  indicators.\n)X Syntax -\n     RESET\n\n Alias    - RES\n Defaults - None.\n Required - None.\n)O Operands - None.\n=TOP\n)F   The TOP subcommand requests that the first entry in the data\n  set list is show as the first data set listed on the screen.\n)X Syntax -\n     TOP\n\n Aliases  - None.\n Defaults - None.\n Required - None.\n)O Operands - None.\n=BOTTOM=BOT\n)F   The BOTTOM subcommand requests that the last part of the data\n  set list is shown on the screen.  When the list is too long to be\n  shown in its entirety, the end-of-list marker line is shown on\n  the last line of the screen, and the last data set in the list is\n  shown on the second last line of the screen.\n)X Syntax -\n     BOTTOM\n\n Alias    - BOT\n Defaults - None.\n Required - None.\n=UP=-\n)F Function -\n  The UP subcommand moves the screen up the specified number of\n  lines; if no operand is entered, the scroll amount is used.\n)X Syntax -\n     UP 'amount'\n\n Aliases  - UP, -\n Defaults - Scroll amount\n Required - None.\n)O Operands -\n)P 'amount' - Specifies the number of lines to move the screen.\n              It must be a decimal number, or 'HALF' ('H') or\n              'PAGE' ('P') or 'CSR' ('C') or 'MAX' ('M').\n=DOWN=+\n)F Function -\n  The DOWN subcommand moves the screen down the specified number\n  of lines; if no operand is entered, the scroll amount is used.\n)X Syntax -\n     DOWN 'amount'\n\n Aliases  - DOWN, +\n Defaults - Scroll amount\n Required - None.\n)O Operands -\n)P 'amount' - Specifies the number of lines to move the screen.\n              It must be a decimal number, or 'HALF' ('H') or\n              'PAGE' ('P') or 'CSR' ('C') or 'MAX' ('M').\n=LEFT=<\n)F Function -\n  The LEFT subcommand ensures that the left-most display items after\n  the data set name are visible.  This is the initial left/right\n  display location.  If the screen is sufficiently wide the LEFT and\n  RIGHT subcommands may not result in any change to the display.\n)X Syntax -\n     LEFT\n\n Aliases  - LEFT, <\n Defaults - None.\n Required - None.\n)O Operands - None.\n=RIGHT=>\n)F Function -\n  The RIGHT subcommand ensures that the right-most display items\n  are visible.  If the screen is sufficiently wide the LEFT and\n  RIGHT subcommands may not result in any change to the display.\n)X Syntax -\n     RIGHT\n\n Aliases  - RIGHT, >\n Defaults - None.\n Required - None.\n)O Operands - None.\n=LIST=L=LOC=LOCATE\n)F Function -\n  The LIST subcommand repositions the data set list so that the top\n  detail display line has the first or only occurrence of the locate\n  data.  The locate data specified may be a display line number, or\n  non-numeric data which is matched with the sort field.\n\n  Example 1: When a list of more than 29 data sets is shown,\n                LOC 30\n             will scroll the display to show the thirtieth line first.\n\n  Example 2: When a list of SYS1 data sets is initially shown,\n                L SYS1.H\n             may scroll the display to show SYS1.HELP first.\n\n  Example 3: After SORT F D is issued for a data set list,\n                LIST F\n             scrolls the display to show the first data set in the\n             list that has fixed-length records.\n)X Syntax -\n     LIST 'locdata'\n\n Aliases  - L, LOC, LOCATE\n Defaults - None.\n Required - locdata\n)O Operands -\n)P 'locdata' - specifes how the top detail display line is to be\n               located.  The data can be numeric or non-numeric.\n\n  For numeric data, the operand specifies the line number to be\n  positioned as the top visible detail line.  When 0 (zero) is\n  specified, the TOP subcommand action is performed.\n\n  For non-numeric data, the operand is deemed to be a string which\n  is compared to the start of the sort column contents.  The first\n  display line which does not compare low with the operand is\n  shown as the top detail display line.\n=SORT\n)F Function -\n  The SORT subcommand causes the displayed data set list to be\n  reordered according to the specified criterion.  Underscored\n  column headings may be selected as the sorting criterion without\n  typing a SORT command by means of cursor placement.\n\n  Cursor-selected sorts will use the default sort order (either\n  ascending or descending) for that column.  The first operand must\n  always specify the display column to be used as the sort field.  A\n  second optional operand may specify one of the two sort orders.\n\n  Every column is a valid sort field, even if the screen is not wide\n  enough to show all columns.  When wide screens are not used, the\n  number of omitted columns depends on the length of the longest\n  data set name listed.\n)X Syntax -\n     SORT  'sort-field'  'sort-order'\n\n Aliases  - None.\n Defaults - D (for DATA-SET-NAME)\n Required - None.\n)O Operands -\n)P 'sort-field' - The name of the display column.\n    Only the first character of the operand is examined.\n      Valid sort field names are:\n  A - default sort order D - allocated number of tracks\n  B - default sort order A - physical block size\n  C - default sort order D - creation date\n  D - default sort order A - data set name - has an alias of N\n  E - default sort order D - expiration date\n  F - default sort order A - record format\n  L - default sort order A - logical record length\n  O - default sort order A - organization\n  P - default sort order D - percent used - has an alias of %\n  R - default sort order D - last-referenced date\n  U - default sort order D - used number of tracks\n  V - default sort order A - volume serial number\n  X - default sort order D - number of extents\n)P 'sort-order' - The sort order which is either A or D.\n    Only the first character of the operand is examined.\n      Valid sort orders are:\n  A - ascending\n  D - descending\n=MEMBER=MEM\n)F Function -\n  The MEMBER subcommand causes partitioned data sets in the list to\n  be searched for members with names matching the mask specified as\n  the only operand.\n\n  Data sets with matching member names are highlighted in white or\n  high intensity, while other data sets are unhighlighted.\n\n  The operation begins with a RESET action, so any residual last\n  command indicators are cleared.\n\n  All PDS and PDSE data sets in the list are eligible, and are given\n  a last command indicator of an asterisk, which is shown in red if\n  the data set could not be successfully accessed.  Non-partitioned\n  data sets are not affected by this command.\n\n  Internally, the processing of a PDS or PDSE is terminated when the\n  first match is found, or the end of the directory is reached.\n\n  The command can process requests for a specific member, or for a\n  generic match.\n\n Examples -\n  MEM *ABC*  - look for member names containing the string 'ABC'.\n  MEM ABC*   - look for member names starting with 'ABC'.\n  MEM *ABC   - look for member names ending with 'ABC'.\n  MEM %ABC*  - look for member names with 'ABC' as the second through\n               fourth characters.\n  MEM %ABC%* - look for member names with 'ABC' as the second through\n               fourth characters which are at least 5 characters long.\n  MEM A*BC   - this will match, for example, ABC, AABC, ABBC and AXBC.\n)X Syntax -\n     MEMBER  'member-name-mask'\n\n Aliases  - MEM\n Defaults - None.\n Required - 'member-name-mask'\n)O Operands -\n)P 'member-name-mask' - a mask to filter member names.  A single\n    string of up to 8 non-blank characters must be specified.\n    Alphabetics will be upper-cased.  Generic masking characters\n    are an asterisk to match zero or more non-blanks, and a percent\n    sign to match any single non-blank character.\n\n    Note that any occurrence of an asterisk-asterisk ('**') or an\n    asterisk-percent ('*%') in the mask will be rejected as invalid.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "REVOUT": {"ttr": 12292, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'0\\x03\\x00\\x03\\x01\\t\\x01\\x8f\\x01\\x18#\\x1f\\x17(\\x01\\xc6\\x01?\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf3\\xf4@@@'", "ispf": {"version": "48.03", "flags": 0, "createdate": "2009-01-18T00:00:00", "modifydate": "2018-08-19T17:28:03", "lines": 454, "newlines": 319, "modlines": 0, "user": "FILE134"}, "text": "*                    TSO HELP FOR 'REVOUT' RELEASE 48.3     AUGUST 2018\n)F Function -\n  The REVOUT command gives access to REVIEW's job status display.\n  REVOUT uses the TSO FIB commands to display the status of jobs\n  and display the contents of held SYSOUT.\n\n  REVOUT facilities may also be accessed from RFE option 3.8.\n\n  Jobs are listed in the order returned by the STATUS TSO command.\n  The user can process listed jobs by entering selection codes.\n  REVOUT will use the OUTPUT and CANCEL TSO commands to carry out\n  the requested action(s).\n\n  REVOUT requires that the REVOUTJB CLIST is installed for implicit\n  command execution.\n\n  REVIEW is used to browse held SYSOUT.  Browsed job output may be\n  colored by REVIEW depending on message identifier recognition\n  and Assembler listing syntax highlighting.\n\n  Under MVS 3.8 systems running JES2, the STATUS command is not used\n  but rather the JES2 checkpoint and SPOOL data sets are dynamically\n  allocated and read directly.\n\n  (Note this point for security administration purposes.)\n\n  In this MVS 3.8 with JES2 case, 'jobname' may also be a job name\n  prefix, where the supplied job name characters are matched and\n  all subsequent characters are wildcarded.  A single asterisk may\n  be specified to select all jobs.  Also, spooled output from jobs\n  without held SYSOUT is accessed by directly reading the SPOOL.\n  Held SYSOUT is also accessed directly from the SPOOL unless the\n  FIB ON setting is active.\n)X Syntax -\n         REVOUT  'jobname'\n\n  Required - None.\n\n  Defaults - Default STATUS command search when no operand is used.\n\n  Aliases  - None.\n)O Operands -\n)P 'jobname' - The job name argument passed to the STATUS TSO command.\n\n  Note that for MVS 3.8 systems running JES2, this operand can also\n  be a job name prefix, where the supplied job name characters are\n  matched and all subsequent characters are wildcarded.  A single\n  asterisk may be specified to select all jobs.\n)S Subcommands -\n ------------------------ GLOBAL SUBCOMMANDS ------------------------\n\n These subcommands are available in all display modes of REVIEW:\n\n   HELP    - Request HELP about REVIEW and/or its subcommands.\n             This will be intercepted by ISPF if REVIEW is\n             running as an ISPF dialog.\n   HEL     - Same as 'HELP' except ISPF will not intercept it.\n   FSHELP  - Same as 'HEL'.\n   FSH     - Same as 'HEL'.\n   KEYS    - Display current Program Function Key values.\n   ?       - Display the release of REVIEW that is in use.\n   TASK    - Display Task Control Block and Request Block structure.\n   TCB     - Same as 'TASK'.\n   RB      - Same as 'TASK'.\n   CDE     - Show the Job Pack Area's Contents Directory Elements.\n   JPA     - Same as 'CDE'.\n   TSO     - Issue a TSO command.\n   TSS     - Same as 'TSO'.\n   PFK#    - Set Program Function Key '#' to a specified value.\n   PFK0    - Set Program Function Keys to default values.\n   RECALL  - Recall previously typed-in commands for optional\n             editing and reissuing.\n   RETRIEVE- Same as 'RECALL'.\n   SCRNAME - Assign a new name to this logical screen session.\n   START   - Create a new RFE (REVIEW Front End) parallel session.\n   SPLIT   - Same as 'START'.\n   SWAP    - List or transfer control between parallel sessions.\n   END     - END the command.\n   CANCEL  - Same as 'END' but user profile changes are not saved.\n   CAN     - Same as 'CANCEL'.\n   EXIT    - Terminate the whole REVIEW session.\n   RETURN  - Same as 'EXIT'.\n   =X      - Same as 'EXIT' when not running as an ISPF dialog.\n\n ------------------------ REVOUT SUBCOMMANDS ------------------------\n\n These subcommands are available while REVIEWing file data:\n\n   STATUS  - Change the job name search argument.\n   ST      - Same as 'STATUS'.\n   LIST    - Display the specified line number.\n   L       - Same as 'LIST'.\n   LOC     - Same as 'LIST'.\n   LOCATE  - Same as 'LIST'.\n   INPUT   - MVS 3.8 JES2 users only - look at non-SYSOUT data sets.\n   FIB     - MVS 3.8 JES2 users only - control TSO OUTPUT command use.\n   UP      - Scroll backwards a specified number of lines or records.\n             If no operand is specified, the 'scroll' value is used.\n             This is displayed in the upper right corner.\n   '-'     - Same as 'UP'.\n   DOWN    - Scroll forwards a specified number of lines or records.\n             If no operand is specified, the 'scroll' value is used.\n             This is displayed in the upper right corner.\n   '+'     - Same as 'DOWN'.\n   TOP     - Scroll up to the first line or record (on this volume).\n   BOTTOM  - Scroll down to the last line or record.\n   BOT     - Same as 'BOTTOM'.\n\n\n ---------------------- REVOUT SELECTION CODES ----------------------\n\n These selection codes can be used in the S column to process a job:\n\n   S       - Browse the job's held SYSOUT.  REVIEW will be used.\n             Only held SYSOUT can be viewed unless running on an\n             MVS 3.8 system with JES2.\n\n   /       - Same as 'S'.\n\n   C       - Cancel a job.  Started tasks and TSO sessions cannot\n             be cancelled.\n\n   P       - Purge a job.  For started tasks and TSO sessions a\n             request will be made to delete any held SYSOUT instead.\n\n   O       - Release held SYSOUT for printing.  A new SYSOUT class\n             can be specified simultaneously in the Q column.\n\n ----------------------------------------------------------------------\n=HELP=HEL=FSHELP=FSH\n)F Function -\n  The HELP subcommand provides function, syntax, and operand\n  information on the 'REVOUT' command and its subcommands.\n)X Syntax -\n         HELP   'subcommand name'\n                FUNCTION  SYNTAX  OPERANDS('keyword list')  ALL\n                POSITIONAL('operand number') MSG('msgid')\n  Aliases  - HEL, FSHELP, FSH\n  Required - None.\n  Defaults - ALL if FUNCTION, SYNTAX, and OPERANDS not specified.\n  Note     - If HELP is entered without any operands a list of\n             subcommands of the current command will be displayed.\n  Note     - 'keyword list' is optional when OPERANDS is used.\n)O Operands -\n)P 'subcommand name'\n           - Name of the subcommand of 'REVOUT' to be explained.\n))FUNCTION - Function data is to be displayed.\n))SYNTAX   - Format is to be displayed.\n))OPERANDS('keyword list')\n           - Operand description is to be displayed.  If\n             'keyword list' is present, only those keyword descriptions\n             are to be displayed.\n    'keyword list'\n           - Keywords separated by commas, blanks, or tabs.\n))ALL      - Function, syntax, and operand descriptions are to be\n             displayed.\n))POSITIONAL('operand number')\n           - A description of the positional operand specified is to\n             be displayed.\n))MSGID('msgid')\n           - A description of the message identified by msgid is to be\n             displayed.\n=UP=-\n)F Function -\n  The UP subcommand moves the screen up the specified number of\n  lines; if no operand is entered, the scroll amount is used.\n)X Syntax -\n     UP 'amount'\n\n Aliases  - UP, -\n Defaults - Scroll amount\n Required - None.\n)O Operands -\n)P 'amount' - Specifies the number of lines to move the screen.\n              It must be a decimal number, or 'HALF' ('H') or\n              'PAGE' ('P') or 'CSR' ('C') or 'MAX' ('M').\n=DOWN=+\n)F Function -\n  The DOWN subcommand moves the screen down the specified number\n  of lines; if no operand is entered, the scroll amount is used.\n)X Syntax -\n     DOWN 'amount'\n\n Aliases  - DOWN, +\n Defaults - Scroll amount\n Required - None.\n)O Operands -\n)P 'amount' - Specifies the number of lines to move the screen.\n              It must be a decimal number, or 'HALF' ('H') or\n              'PAGE' ('P') or 'CSR' ('C') or 'MAX' ('M').\n=TOP\n)F Function -\n  The TOP subcommand moves the screen to the first line of the\n  job list.\n)X Syntax -\n     TOP\n\n Aliases  - None.\n Defaults - None.\n Required - None.\n)O Operands - None.\n=BOTTOM=BOT\n)F Function -\n  The BOTTOM subcommand moves the screen to the last line of the\n  job list.\n)X Syntax -\n     BOTTOM\n\n Alias    - BOT\n Defaults - None.\n Required - None.\n)O Operands - None.\n=KEYS=?\n)F Function -\n  The KEYS subcommand displays the current Program Function Key\n  values.  Each PF Key (1 to 24) has a default value which may\n  be changed with the PFK command.\n)X Syntax -\n     KEYS\n\n Alias    - ?\n Defaults - None.\n Required - None.\n)O Operands - None.\n=RECALL=RETRIEVE\n)F Function -\n  The RECALL subcommand causes previously typed-in commands to be\n  displayed in the primary input area where they may be changed if\n  required and then reissued.  Note that single character input\n  strings and text implied by PFK usage are not recallable.  The\n  first command recalled is the most recently typed in command.\n  Consecutive RECALL commands cause increasingly older commands to\n  be recalled.\n)X Syntax -\n     RECALL\n\n Alias    - The DUP character (X'1C').\n Defaults - None.\n Required - None.\n)O Operands - None.\n=PFK\n)F Function -\n  The PFK subcommand changes PFK definitions for the duration of\n  the REVIEW session; to change a PFK, a subcommand such as\n  'PFK6 RIGHT 1'  is entered to change PFK6 to 'RIGHT 1'.\n\n  By default, the PF KEYS are defined as the following:\n              PFK1  - HELP    PFK2  - START      PFK3  - END\n              PFK4  - TSO     PFK5  - RFIND      PFK6  - RCHANGE\n              PFK7  - UP      PFK8  - DOWN       PFK9  - SWAP NEXT\n              PFK10 - LEFT    PFK11 - RIGHT      PFK12 - RECALL\n              PFK13 - TOP     PFK14 - BOTTOM     PFK15 - END\n              PFK16 - SMF     PFK17 - RFIND      PFK18 - EREP\n              PFK19 - UP      PFK20 - DOWN       PFK21 - HEX\n              PFK22 - ASCII   PFK23 - TSO REV    PFK24 - HEXC\n\n  Changes to the PFK assignments may be saved in the profile data set.\n)X Syntax -\n     PFK## 'newpfdata'\n\n Aliases  - None.\n Defaults - None.\n Required - nn and 'newpfdata'\n)O Operands -\n)P  ##      - Specifies the PF Key to be modified.\n              ## is a 1 or 2 decimal digit number in the range of\n              0 to 24 inclusive.  Numbers from 1 to 24 specify a\n              particular Program Function Key.  If ## is 0 then\n              all 24 PF Keys will be assigned their default values.\n\n 'newpfdata'- Specifies the new subcommand for this PF Key.\n=SCRNAME\n)F Function -\n  The SCRNAME subcommand allows a new name to be assigned to the\n  active logical screen.  This name can be used as the operand of\n  a SWAP subcommand.  Screen names are displayed by SWAP LIST.\n)X Syntax -\n     SCRNAME 'name'\n\n Aliases  - None.\n Defaults - None.\n Required - name\n)O Operands -\n)P 'name'   - Specifies the screen name.  It can be up to eight\n              characters long.  It cannot be completely numeric.\n              It should not be 'NEXT', 'PREV' or 'LIST'.\n=START=SPLIT\n)F Function -\n  The START subcommand requests that a new parallel session is\n  to be initiated and given control.  The new session will be under\n  the RFE (REVIEW Front End) menu hierarchy.  The new session will\n  NOT be started if it would cause the maximum logical session\n  limit to be exceeded.  If no operand is supplied the RFE primary\n  option menu is shown.\n)X Syntax -\n     START  'option'\n\n Alias    - SPLIT\n Defaults - None.\n Required - None.\n)O Operands -\n)P 'option' - any valid RFE main menu option.  An invalid option\n              will cause the main menu to be shown with the\n              'Invalid command' message.\n=SWAP\n)F Function -\n  The SWAP subcommand specifies which parallel REVIEW session is to\n  become the current session.  It can also list the started REVIEW\n  sessions which are eligible to become the current session.  A\n  parallel REVIEW session is created when the REVIEW TSO subcommand\n  (not the ISPF TSO subcommand) is used to create a recursive REVIEW\n  session.  The nesting order of these sessions can be changed by\n  SWAP.\n)X Syntax -\n     SWAP    LIST  /  NEXT  /  PREV  /  #  /  'name'\n\n Aliases  - None.\n Default  - switch to previous screen which is listed second\n            by SWAP LIST\n Required - None.\n)O Operands -\n)P 'name'   - Specifies the target screen name which can be up to\n            eight characters long.\n))LIST    - Specifies that all parallel REVIEW sessions are to be\n            listed.\n))NEXT    - Requests switching to next session in increasing\n            session-id order.\n))PREV    - Requests switching to next session in decreasing\n            session-id order.\n))#       - Specifies the decimal number of the target session\n            that is to be swapped with the current session.\n            'SWAP 0' is a no-operation.\n=TSO=TSS\n)F Function -\n  The TSO subcommand specifies a TSO command processor to be invoked\n  from the REVIEW processor.  Commands generating an implicit EXEC\n  such as SYSPROC member names and commands immediately prefixed by\n  a percent sign (%) are supported.\n)X Syntax -\n     TSO  'command' 'operands'\n\n Alias    - TSS\n Defaults - None.\n Required - 'command'\n)O Operands -\n)P 'command'  - Specifies a TSO command to be executed.\n\n)P 'operands' - Specifies any desired operands for this TSO command.\n=LIST=L=LOC=LOCATE\n)F Function -\n  The LIST subcommand repositions the screen to the relative line\n  number entered.\n)X Syntax -\n     LIST 'lineno'\n\n Aliases  - L, LOC, LOCATE\n Defaults - None.\n Required - lineno\n)O Operands -\n)P 'lineno' -  Specifies the relative line number to which the screen\n               is to be positioned.\n=FIB\n)F Function -\n  The FIB command only has any effect in an MVS 3.8 JES2 environment.\n  It is not present in the z/OS version of REVOUT.  The FIB setting\n  controls whether the TSO OUTPUT command will be used to retrieve\n  held SYSOUT or direct I/O to the SPOOL is used instead.  The FIB\n  setting is not saved in the user's profile because it is assumed\n  that everyone would prefer the default setting of FIB OFF.\n)X Syntax -\n     FIB    ON  /  OFF  /  ?\n\n Aliases  - None.\n Defaults - Opposite mode.\n Required - None.\n)O Operands -\n))ON  - The OUTPUT FIB command will be used to retrieve held SYSOUT.\n))OFF - The OUTPUT FIB command will not be invoked.\n))?   - Display the current setting without changing it.\n=INPUT\n)F Function -\n  The INPUT command only has any effect in an MVS 3.8 JES2 environ-\n  ment.  It is not present in the z/OS version of REVOUT.  The INPUT\n  setting controls whether the SPOOL data sets selected for browsing\n  are restricted to SYSOUT data sets or not.\n)X Syntax -\n     INPUT    ON  /  OFF  /  ?\n\n Aliases  - None.\n Defaults - Opposite mode.\n Required - None.\n)O Operands -\n))ON  - Non-SYSOUT SPOOL data sets will be browsed as well as SYSOUT.\n))OFF - Only SYSOUT data sets will be selected for browsing.\n))?   - Display the current setting without changing it.\n=STATUS=ST\n)F Function -\n  The STATUS subcommand specifies the job name to search for.\n)X Syntax -\n     STATUS 'jobname'\n\n Alias    - ST\n Defaults - Default STATUS TSO command search when no operand is used.\n Required - None.\n)O Operands -\n)P 'jobname' - The job name argument passed to the STATUS TSO command.\n\n  Under MVS 3.8 systems running JES2, the STATUS command is not used\n  but rather the JES2 checkpoint and SPOOL data sets are dynamically\n  allocated and read directly.\n\n  (Note this point for security administration purposes.)\n\n  In this MVS 3.8 with JES2 case, 'jobname' may also be a job name\n  prefix, where the supplied job name characters are matched and\n  all subsequent characters are wildcarded.  A single asterisk may\n  be specified to select all jobs.  Also, spooled output from jobs\n  without held SYSOUT is accessed by directly reading the SPOOL.\n=CANCEL=CAN\n)F Function -\n  The CANCEL subcommand terminates the REVOUT command.  Further,\n  the profile data is marked as unchanged so any profile updates\n  such as new PFK assignments will be discarded.\n)X Syntax -\n     CANCEL\n\n Alias    - CAN\n Defaults - None.\n Required - None.\n)O Operands - None.\n=END\n)F Function -\n  The END subcommand terminates the REVOUT command.  If REVOUT is\n  invoked as RFE option 3.8, then END will exit back to the previous\n  menu.\n)X Syntax -\n     END\n\n Aliases  - None.\n Defaults - None.\n Required - None.\n)O Operands - None.\n=EXIT=RETURN==X\n)F Function -\n  The EXIT subcommand terminates the REVOUT command.  If REVOUT is\n  invoked as RFE option 3.8, then =X will terminate the logical\n  screen session.\n)X Syntax -\n     EXIT\n\n Aliases  - RETURN, =X\n Defaults - None.\n Required - None.\n)O Operands - None.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "REVPDS": {"ttr": 12545, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'0\\x05\\x008\\x01\\x04\\x12?\\x01\\x19\\x02\\x7f#\\x12\\x03&\\x03\\xb1\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf3\\xf4@@@'", "ispf": {"version": "48.05", "flags": 0, "createdate": "2004-05-02T00:00:00", "modifydate": "2019-01-27T23:12:38", "lines": 806, "newlines": 945, "modlines": 0, "user": "FILE134"}, "text": "*                    TSO HELP FOR 'REVPDS' RELEASE 48.5    JANUARY 2019\n)F Function -\n  REVPDS is not a TSO command.\n\n  This HELP member describes the subcommands available when REVIEW\n  is displaying the member list of a single PDS, a single data PDSE\n  (as opposed to a program object PDSE), or a file of concatenated\n  PDS and/or PDSE data sets.\n\n  A green asterisk is displayed immediately after the member name\n  when a non-program member is an alias.  Alias program members have\n  a their real name displayed in the ALIAS-OF column.\n\n  An equals sign is displayed between the member's TTR and the ISPF\n  version when the member is flagged as being managed by SCLM.\n\n)X Syntax -\n         REVIEW 'partitioned file specification'\n\n  Aliases  - REV, REVED\n)O Operands -\n   'partitioned file specification' should not include a member name.\n)S Subcommands -\n ----------------------- GLOBAL SUBCOMMANDS ---------------------------\n\n These subcommands are available in all display modes of REVIEW:\n\n   HELP    - Request HELP about REVIEW and/or its subcommands.\n             This will be intercepted by ISPF if REVIEW is\n             running as an ISPF dialog.\n   HEL     - Same as 'HELP' except ISPF will not intercept it.\n   FSHELP  - Same as 'HEL'.\n   FSH     - Same as 'HEL'.\n   KEYS    - Display current Program Function Key values.\n   ?       - Display the release of REVIEW that is in use.\n   TASK    - Display Task Control Block and Request Block structure.\n   TCB     - Same as 'TASK'.\n   RB      - Same as 'TASK'.\n   CDE     - Show the Job Pack Area's Contents Directory Elements.\n   JPA     - Same as 'CDE'.\n   TSO     - Issue a TSO command.\n   TSS     - Same as 'TSO'.\n   PFK#    - Set Program Function Key '#' to a specified value.\n   PFK0    - Set Program Function Keys to default values.\n   RECALL  - Recall previously typed-in commands for optional\n             editing and reissuing.\n   RETRIEVE- Same as 'RECALL'.\n   SCRNAME - Assign a new name to this logical screen session.\n   START   - Create a new RFE (REVIEW Front End) parallel session.\n   SPLIT   - Same as 'START'.\n   SWAP    - List or transfer control between parallel sessions.\n   END     - END the command.\n   CANCEL  - Same as 'END' but user profile changes are not saved.\n   CAN     - Same as 'CANCEL'.\n   EXIT    - Terminate the whole REVIEW session.\n   RETURN  - Same as 'EXIT'.\n   =X      - Same as 'EXIT' when not running as an ISPF dialog.\n\n ------------ REVIEW PARTITIONED MEMBER LIST SUBCOMMANDS ------------\n\n These subcommands are available while processing the member list\n of a partitioned file:\n\n   BROWSE  - Browse a member with ISPF Browse.\n   B       - Same as 'BROWSE'.\n   DELINK  - Create object deck(s) from load module(s).\n   DL      - Same as 'DELINK'.\n   EDIT    - Edit a member with ISPF Edit.\n   E       - Same as 'EDIT'.\n   FIND    - Same as 'SEARCH'.\n   F       - Same as 'SEARCH'.\n   IFIND   - Same as 'RFIND'.\n   LIST    - Display the specified member's entry.\n   LOCATE  - Same as 'LIST'.\n   LOC     - Same as 'LIST'.\n   L       - Same as 'LIST'.\n   OFFLOAD - Unload members to sequential output.\n   OFF     - Same as 'OFFLOAD'.\n   PDSLOAD - Recreate members from sequential input.\n   PDS     - Same as 'PDSLOAD'.\n   REFRESH - Reread the directory entries and update the member list.\n   REF     - Same as 'REFRESH'.\n   RESET   - Untag all member display entries.\n   RES     - Same as 'RESET'.\n   RFIND   - Position the display to the next tagged member entry,\n             or if no entries are tagged report the number of\n             directory blocks that were read.\n   SEARCH  - Request a multi-member search.\n   SRCHFOR - Same as 'SEARCH'.\n   SELECT  - Browse a member with REVIEW.\n   SEL     - Same as 'SELECT'.\n   S       - Same as 'SELECT'.\n   SEQLOAD - Sequentialize member contents.\n   SEQ     - Same as 'SEQLOAD'.\n   SORT    - Sort the display order of member entries.\n   MEMBER  - Search partitioned data sets (PDS and PDSE) in the data\n             set list for any members with names which match the\n             specified member name mask.\n   MEM     - Same as 'MEMBER'.\n   PATTERN - Search partitioned data sets (PDS and PDSE) in the data\n             set list for any members with names which contain the\n             specified string.\n   PAT     - Same as 'PATTERN'.\n   TAGFLIP - Toggle the tag status of all member entries.\n   TF      - Same as 'TAGFLIP'.\n   UPDATE  - Edit a member with REVEDIT.\n   U       - Same as 'UPDATE'.\n   VIEW    - View a member with ISPF View.\n   V       - Same as 'VIEW'.\n   UP      - Scroll backwards a specified number of lines or records.\n             If no operand is specified, the 'scroll' value is used.\n             This is displayed in the upper right corner.\n   '-'     - Same as 'UP'.\n   DOWN    - Scroll forwards a specified number of lines or records.\n             If no operand is specified, the 'scroll' value is used.\n             This is displayed in the upper right corner.\n   '+'     - Same as 'DOWN'.\n   TOP     - Scroll up to the first line or entry.\n   BOTTOM  - Scroll down to the last line or entry.\n   BOT     - Same as 'BOTTOM'.\n\n -------------------- MEMBER LIST SELECTION CODES --------------------\n\n These selection codes can be used to select a member entry for\n processing from a directory member list display:\n\n   S       - Selection code for selecting a member to be REVIEWed.\n\n             'S' is the default selection code, and is assumed\n             when the cursor is placed on an entry selection input\n             field containing a period but no character is typed.\n\n             With the 'REVED' TSO command selecting a PDS member\n             with 'S' specifies that the member should be edited\n             with REVEDIT.\n\n   E       - Selection code for selecting a member to be edited.\n             In an ISPF environment ISPF Edit is used;\n             otherwise REVEDIT is used.\n\n   B       - Selection code for selecting a member to be browsed.\n             In an ISPF environment ISPF Browse is used;\n             otherwise REVIEW is used.\n\n   V       - Selection code for selecting a member to be viewed.\n             In an ISPF environment ISPF View is used;\n             otherwise REVEDIT is used in VIEW mode.\n\n   U       - Selection code for selecting a member to be edited.\n             REVEDIT is used.  REVEDIT will not process members\n             with an undefined record format, or members allowed\n             to have spanned records.\n\n   D       - Selection code for deleting a member from an\n             unconcatenated PDS (not a PDSE) such that it can be\n             restored by the 'R' selection code.\n\n   N       - Selection code for renaming a member from an\n             unconcatenated PDS or data PDSE.  You will be\n             prompted for the new name.\n\n   T       - Selection code for tagging an entry for later processing.\n             Tagged entries are shown in high intensity in the entry\n             list.  If any members are tagged, then only tagged\n             members are processed during offload (see OFFLOAD and\n             SEQLOAD), delink (see DELINK) and search (see SEARCH)\n             operations.  Further, tagging an entry may be useful for\n             display control purposes when the entry list is large as\n             RFIND can be used to locate the next tagged entry.  All\n             tags can be cleared by REFRESH and RESET.\n\n   R       - Selection code for restoring a deleted member and for\n             resetting the tag status of an entry.  All tags can be\n             cleared by REFRESH and RESET.  REFRESH will also clear\n             display entries for deleted members meaning that they\n             cannot be restored by the R selection code.\n\n   H       - Selection code for displaying the history of a program.\n             The Binder dialog API is used to extract identification\n             record (IDR) data which contains compile, link edit and\n             zap timestamped information.\n\n             Under MVS/370, the HISTORY subcommand of the PDS command\n             is used to produce the displayed output.\n\n   M       - Selection code for displaying the module map of a program.\n             The Binder dialog API is used to extract ESD class data\n             for load modules and compatible program objects, or MAP\n             class data from non-migratable program objects.\n\n             Under MVS/370, the MAP subcommand of the PDS command\n             is used to produce the displayed output.\n\n   /       - Selection code for selecting a member to be REVIEWed\n             as if the 'DATA' operand had been specified.  Normally,\n             the DATA operand precludes access to PDS and PDSE member\n             contents.  This selection code performs the same function\n             as the 'S' selection code except that the DATA operand is\n             deemed to have been specified.  This will prevent REVIEW\n             from attempting to interpret data content such as\n             pictures and ZIP directories.\n\n ----------------------------------------------------------------------\n=HELP=HEL=FSHELP=FSH\n)F Function -\n  The HELP subcommand provides function, syntax, and operand\n  information on the 'REVIEW' command and its subcommands.\n)X Syntax -\n         HELP   'subcommand name'\n                FUNCTION  SYNTAX  OPERANDS('keyword list')  ALL\n                POSITIONAL('operand number') MSG('msgid')\n  Aliases  - HEL, FSHELP, FSH\n  Required - None.\n  Defaults - ALL if FUNCTION, SYNTAX, and OPERANDS not specified.\n  Note     - If HELP is entered without any operands a list of\n             subcommands of the current command will be displayed.\n  Note     - 'keyword list' is optional when OPERANDS is used.\n)O Operands -\n)P 'subcommand name'\n           - Name of the subcommand of 'REVIEW' to be explained.\n))FUNCTION - Function data is to be displayed.\n))SYNTAX   - Format is to be displayed.\n))OPERANDS('keyword list')\n           - Operand description is to be displayed.  If\n             'keyword list' is present, only those keyword descriptions\n             are to be displayed.\n    'keyword list'\n           - Keywords separated by commas, blanks, or tabs.\n))ALL      - Function, syntax, and operand descriptions are to be\n             displayed.\n))POSITIONAL('operand number')\n           - A description of the positional operand specified is to\n             be displayed.\n))MSGID('msgid')\n           - A description of the message identified by msgid is to be\n             displayed.\n=SEARCH=FIND=F=SRCHFOR\n)F   The SEARCH subcommand causes a data entry screen to be presented\n  where the parameters of a multi-member search can be specified.\n  The facilities of the REVIEW FIND subcommand are used, and searched\n  members are tagged when a match is found and untagged when no match\n  is found.  If any members are tagged then only tagged members are\n  searched.\n)X Syntax -\n     SEARCH\n ALIASES  - FIND, F, SRCHFOR\n Defaults - None.\n Required - None.\n)O Operands - None.\n=RFIND=IFIND\n)F   The RFIND subcommand performs one of two functions depending on\n  whether any member display entries are currently tagged or not.\n\n  If no members are tagged then RFIND reports the number of PDS\n  directory blocks that were read.  If this read activity was not\n  interrupted by the user the reported number represents the number\n  of directory blocks which are used in the PDS, or in all PDSs in\n  a concatenated file.\n\n  If one or more members are tagged then RFIND positions the next\n  tagged entry at the top of the display.  If the display is currently\n  positioned at or past the last tagged entry then the display is\n  positioned at the end-of-list entry.  If the display is currently\n  positioned at the end-of-list entry then the display is positioned\n  at the first tagged entry.\n)X Syntax -\n     RFIND\n\n Alias    - IFIND\n Defaults - None.\n Required - None.\n)O Operands - None.\n=TAGFLIP=TF\n)F   The TAGFLIP subcommand causes to tag status of every member\n  to be toggled to the opposite setting.  All untagged members are\n  tagged, and all tagged members are untagged.\n)X Syntax -\n     TAGFLIP\n\n Alias    - TF\n Defaults - None.\n Required - None.\n)O Operands - None.\n=RESET=RES\n)F   The RESET subcommand causes all members to become untagged\n  without updating any other member information.\n)X Syntax -\n     RESET\n\n Alias    - RES\n Defaults - None.\n Required - None.\n)O Operands - None.\n=REFRESH=REF\n)F   The REFRESH subcommand instructs REVIEW to update the in-storage\n  member information with the latest data from the directory or\n  directories of the relevant PDS(s) and/or PDSE(s).  All member\n  display entries will be untagged and information about deleted\n  members will be discarded.\n)X Syntax -\n     REFRESH   N / G\n\n Alias    - REF\n Defaults - Retain current member generation display mode.\n Required - None.\n))N       - Do not show member generations in the member list.\n))G       - Display member generations in the member list.\n   Note that 'G' will be treated as an invalid operand unless the\n   current library is a Version 2 PDSE allowing member generations.\n)O Operands - None.\n=UP=-\n)F   The UP subcommand moves the display up the specified number of\n  lines; if no operand is entered, the scroll amount is used.\n)X Syntax -\n     UP 'amount'\n\n Aliases  - UP, -\n Defaults - Scroll amount\n Required - None.\n)O Operands -\n)P 'amount' - Specifies the number of lines to move the display.\n              It must be a decimal number, or 'HALF' ('H') or\n              'PAGE' ('P') or 'CSR' ('C') or 'MAX' ('M').\n=DOWN=+\n)F   The DOWN subcommand moves the display down the specified number\n  of lines; if no operand is entered, the scroll amount is used.\n)X Syntax -\n     DOWN 'amount'\n\n Aliases  - DOWN, +\n Defaults - Scroll amount\n Required - None.\n)O Operands -\n)P 'amount' - Specifies the number of lines to move the display.\n              It must be a decimal number, or 'HALF' ('H') or\n              'PAGE' ('P') or 'CSR' ('C') or 'MAX' ('M').\n=TOP\n)F   The TOP subcommand moves the display to the first directory\n  entry in the display list.\n)X Syntax -\n     TOP\n\n Aliases  - None.\n Defaults - None.\n Required - None.\n)O Operands - None.\n=BOTTOM=BOT\n)F   The BOTTOM subcommand moves the display to the last directory\n  display entry.\n)X Syntax -\n     BOTTOM\n\n Alias    - BOT\n Defaults - None.\n Required - None.\n)O Operands - None.\n=KEYS=?\n)F   The KEYS subcommand displays the current Program Function Key\n  values.  Each PF Key (1 to 24) has a default value which may\n  be changed with the PFK command.\n)X Syntax -\n     KEYS\n\n Alias    - ?\n Defaults - None.\n Required - None.\n)O Operands - None.\n=RECALL=RETRIEVE\n)F   The RECALL subcommand causes previously typed-in commands to be\n  displayed in the primary input area where they may be changed if\n  required and then reissued.  Note that single character input strings\n  and text implied by PFK usage are not recallable.  The first command\n  recalled is the most recently typed in command.  Consecutive RECALL\n  commands cause increasingly older commands to be recalled.\n)X Syntax -\n     RECALL\n\n Alias    - The DUP character (X'1C').\n Defaults - None.\n Required - None.\n)O Operands - None.\n=PFK\n)F   The PFK subcommand changes PFK definitions for the duration of\n  the REVIEW session; to change a PFK, a subcommand such as\n  'PFK6 RIGHT 1'  is entered to change PFK6 to 'RIGHT 1'.\n\n  By default, the PF KEYS are defined as the following:\n              PFK1  - HELP    PFK2  - START      PFK3  - END\n              PFK4  - TSO     PFK5  - RFIND      PFK6  - RCHANGE\n              PFK7  - UP      PFK8  - DOWN       PFK9  - SWAP NEXT\n              PFK10 - LEFT    PFK11 - RIGHT      PFK12 - RECALL\n              PFK13 - TOP     PFK14 - BOTTOM     PFK15 - END\n              PFK16 - SMF     PFK17 - RFIND      PFK18 - EREP\n              PFK19 - UP      PFK20 - DOWN       PFK21 - HEX\n              PFK22 - ASCII   PFK23 - TSO REV    PFK24 - HEXC\n\n  Changes to the PFK assignments may be saved in the profile data set.\n)X Syntax -\n     PFK## 'newpfdata'\n\n Aliases  - None.\n Defaults - None.\n Required - nn and 'newpfdata'\n)O Operands -\n)P  ##      - Specifies the PF Key to be modified.\n              ## is a 1 or 2 decimal digit number in the range of\n              0 to 24 inclusive.  Numbers from 1 to 24 specify a\n              particular Program Function Key.  If ## is 0 then\n              all 24 PF Keys will be assigned their default values.\n\n 'newpfdata'- Specifies the new subcommand for this PF Key.\n=SCRNAME\n)F   The SCRNAME subcommand allows a new name to be assigned to the\n  active logical screen.  This name can be used as the operand of\n  a SWAP subcommand.  Screen names are displayed by SWAP LIST.\n)X Syntax -\n     SCRNAME 'name'\n\n Aliases  - None.\n Defaults - None.\n Required - name\n)O Operands -\n)P 'name'   - Specifies the screen name.  It can be up to eight\n              characters long.  It cannot be completely numeric.\n              It should not be 'NEXT', 'PREV' or 'LIST'.\n=START=SPLIT\n)F   The START subcommand requests that a new parallel session is\n  to be initiated and given control.  The new session will be under\n  the RFE (REVIEW Front End) menu hierarchy.  The new session will\n  NOT be started if it would cause the maximum logical session\n  limit to be exceeded.  If no operand is supplied the RFE primary\n  option menu is shown.\n)X Syntax -\n     START  'option'\n\n Alias    - SPLIT\n Defaults - None.\n Required - None.\n)O Operands -\n)P 'option' - any valid RFE main menu option.  An invalid option\n              will cause the main menu to be shown with the\n              'Invalid command' message.\n=SWAP\n)F   The SWAP subcommand specifies which parallel REVIEW session\n  is to become the current session.  It can also list the started\n  REVIEW sessions which are eligible to become the current session.\n  A parallel REVIEW session is created when the REVIEW TSO subcommand\n  (not the ISPF TSO subcommand) is used to create a recursive REVIEW\n  session.  The nesting order of these sessions can be changed by SWAP.\n)X Syntax -\n     SWAP   LIST / NEXT / PREV / # / 'name'\n\n Aliases  - None.\n Default  - switch to previous screen which is listed second\n            by SWAP LIST\n Required - None.\n)O Operands -\n)P 'name'   - Specifies the target screen name which can be up to\n            eight characters long.\n))LIST    - Specifies that all parallel REVIEW sessions are to be\n            listed.\n))NEXT    - Requests switching to next session in increasing\n            session-id order.\n))PREV    - Requests switching to next session in decreasing\n            session-id order.\n))#       - Specifies the decimal number of the target session\n            that is to be swapped with the current session.\n            'SWAP 0' is a no-operation.\n=TSO=TSS\n)F   The TSO subcommand specifies a TSO command processor to be\n  invoked from the REVIEW processor.  Commands generating an implicit\n  EXEC such as SYSPROC member names and commands immediately prefixed\n  by a percent sign (%) are supported.\n)X Syntax -\n     TSO  'command' 'operands'\n\n Alias    - TSS\n Defaults - None.\n Required - 'command'\n)O Operands -\n)P 'command'  - Specifies a TSO command to be executed.\n\n)P 'operands' - Specifies any desired operands for this TSO command.\n=LOCATE=LOC=L=LIST\n)F   The LOCATE subcommand repositions the display to the relative\n  line number entered, or locates a pending line command.\n)X Syntax -\n     LOCATE  'member'\n\n Aliases  - L, LOC, LOCATE\n Defaults - None.\n Required - 'member'\n)O Operands -\n)P 'member' -  The member name of the entry to be placed at the top\n             of the display.  If the member list is sorted into an\n             order other than member name collating sequence then\n             the exact member name must be specified.\n               If no exact member name is found when the list is\n             sorted by ID, then the operand is used to position\n             the display to the matching user ID.\n=SELECT=SEL=S\n)F   SELECT allows a member to be selected for REVIEW from the primary\n  input area without first locating the member's list entry in the\n  display.  Only members in the first PDS or PDSE of a concatenation\n  can be processed by this subcommand.\n)X Syntax -\n     SELECT  'member'\n\n Aliases  - SEL, S\n Defaults - None.\n Required - 'member'\n)O Operands -\n)P 'member' -  The name of an existing member to be browsed by REVIEW.\n=BROWSE=B\n)F   BROWSE allows a member to be selected for browse from the primary\n  input area without first locating the member's list entry in the\n  display.  Only members in the first PDS or PDSE of a concatenation\n  can be processed by this subcommand.  In an ISPF environment ISPF\n  Browse is used; otherwise REVIEW is used.\n)X Syntax -\n     BROWSE  'member'\n\n Alias    - B\n Defaults - None.\n Required - 'member'\n)O Operands -\n)P 'member' -  The name of an existing member to be browsed.\n=VIEW=V\n)F   VIEW allows a member to be selected for view from the primary\n  input area without first locating the member's list entry in the\n  display.  Only members in the first PDS or PDSE of a concatenation\n  can be processed by this subcommand.  In an ISPF environment ISPF\n  View is used; otherwise REVIEW is used.\n)X Syntax -\n     VIEW  'member'\n\n Alias    - V\n Defaults - None.\n Required - 'member'\n)O Operands -\n)P 'member' -  The name of an existing member to be viewed.\n=EDIT=E\n)F   EDIT allows a member to be selected for edit from the primary\n  input area without first locating the member's list entry in the\n  display.  Only members in the first PDS or PDSE of a concatenation\n  can be processed by this subcommand.  In an ISPF environment ISPF\n  Edit is used; otherwise REVEDIT is used.\n)X Syntax -\n     EDIT  'member'\n\n Alias    - E\n Defaults - None.\n Required - 'member'\n)O Operands -\n)P 'member' -  The name of an existing or new member to be edited.\n=UPDATE=U\n)F   UPDATE allows a member to be selected for edit by REVEDIT from\n  the primary input area without first locating the member's list\n  entry in the display.  Only members in the first PDS or PDSE of a\n  concatenation can be processed by this subcommand.\n)X Syntax -\n     UPDATE  'member'\n\n Alias    - U\n Defaults - None.\n Required - 'member'\n)O Operands -\n)P 'member' -  The name of an existing or new member to be edited.\n=DELINK=DL\n)F   The DELINK subcommand instructs REVIEW to delink load modules\n  and write object \"decks\" to a sequential data set.  The user will\n  be prompted to specify an output data set.\n\n  DELINK notes:\n   1.  The subject PDS must have RECFM=U and must not be a PDSE.\n   2.  Only tagged members are delinked, unless there are no\n       tagged members in which case ALL MEMBERS are delinked.\n   3.  REVIEW will attach the DELINKI program from CBT file 90\n       to perform the delink function.  Fixed-length 80-byte\n       records are written.  Note that SCATTER and OVERLAY\n       programs will NOT be handled correctly.\n   4.  If the resultant object data is relinked, the new load\n       modules may not be bit-for-bit copies of the original\n       load modules, even though they should be functionally\n       equivalent.  That is, reconstructed load modules may be\n       reblocked and/or reordered.\n   5.  DELINKI can generate Program Binder control statements\n       which are not supported by the Linkage Editor.\n)X Syntax -\n     DELINK\n\n Alias    - DL\n Defaults - None.\n Required - None.\n)O Operands - None.\n=OFFLOAD=OFF\n)F   The OFFLOAD subcommand instructs REVIEW to offload PDS members\n  to a sequential file.  Offloading can be performed for a\n  partitioned data set or concatenation with ANY record format.\n  The user will be prompted to specify an output data set.\n\n  OFFLOAD notes:\n   1.  The output RECFM will be overridden to FB or VB as appropriate.\n       The output LRECL will be overridden to the PDS LRECL or 80,\n       whichever is greater.  If the PDS has an undefined record\n       format then fixed-length 80-byte records will be written.\n   2.  Members will be offloaded in member selection list order,\n       and will be preceded by an IEBUPDTE-like './ ADD ' control\n       statement.\n   3.  IEBUPDTE-like './ ALIAS ' statements are also generated only if\n       the member list is sorted into TTR-order, and only for aliases\n       whose corresponding real member is also offloaded.\n   4.  Only the first occurrence of a given member name in a\n       concatenation can be offloaded.\n   5.  Program objects cannot be offloaded.\n   6.  Only tagged members are offloaded, unless there are no\n       tagged members in which case ALL MEMBERS are offloaded.\n   7.  If the first two (2) data bytes of a fixed-length or\n       variable-length record are './' then they will be\n       translated to '><' on output.\n)X Syntax -\n     OFFLOAD\n\n Alias    - OFF\n Defaults - None.\n Required - None.\n)O Operands - None.\n=SEQLOAD=SEQ\n)F   The SEQLOAD subcommand instructs REVIEW to copy PDS members\n  contents to a sequential file.  Sequentialising  can be performed\n  for a partitioned data set or concatenation with fixed-length or\n  variable-length records.  The user will be prompted to specify\n  an output data set.\n\n  SEQLOAD notes:\n   1.  The output RECFM will be overridden to FB or VB as appropriate.\n       The output LRECL will be overridden to the PDS LRECL.\n   2.  The data from real members will be written in member selection\n       list order.\n   3.  Only the first occurrence of a given member name in a\n       concatenation can be copied.\n   4.  Only tagged members are copied, unless there are no tagged\n       members in which case ALL MEMBERS are copied.\n   5.  'SEQLOAD' performs the same processing as 'OFFLOAD' except\n       that no IEBUPDTE-like control statements are generated, './'\n       is not translated on output, and the minimum output LRECL of\n       80 required by 'OFFLOAD' for IEBUPDTE compatibility is not\n       required by 'SEQLOAD'.  'SEQLOAD' cannot process RECFM=U\n       libraries.\n)X Syntax -\n     SEQLOAD\n\n Alias    - SEQ\n Defaults - None.\n Required - None.\n)O Operands - None.\n=PDSLOAD=PDS\n)F   The PDSLOAD subcommand instructs REVIEW to process sequential\n  input and load the data into members of the library being REVIEWed,\n  which must not be a concatenation.  The user is prompted with a\n  panel to specify the data set containing the sequential input,\n  whether ISPF statistics are to be generated, and an optional member\n  name selection mask.\n\n  PDSLOAD notes:\n   1.  The input is expected to be data created by OFFLOAD or a\n       compatible offload process.\n   2.  REVIEW will attach the PDSLOAD program from CBT file 93 (or\n       the REVLMOD program if the PDS RECFM=U) to perform the reload\n       operation.\n   3.  Load modules reconstructed by this subcommand will be\n       bit-for-bit copies of the original load modules.  No\n       reblocking is performed for load modules.\n   4.  See PDSLOAD documentation for details on fixed- and\n       variable-length record format combinations, and record\n       truncation and extension actions.\n)X Syntax -\n     PDSLOAD\n\n Alias    - PDS\n Defaults - None.\n Required - None.\n=SORT\n)F   The SORT subcommand causes the displayed directory entries to be\n  reordered according to the specified criterion.  Underscored column\n  headings may be selected as the sorting criterion without typing\n  a SORT command by means of cursor placement.\n)X Syntax -\n     SORT  'sort-field'\n\n Aliases  - None.\n Defaults - None.\n Required - 'sort-field'\n)O Operands -\n)P 'sort-field' - The name of the display field to be used for sorting.\n      Valid sort field names are:\n  NAME or N - Sort the list into ascending name order.\n  CHA  or C - Sort the list into descending change timestamp order.\n  DATE or D - Sort the list into descending change timestamp order.\n  SIZE or S - Sort the list into descending size order.\n  TTR  or T - Sort the list into ascending TTR order.  This is\n              the order that the members were saved into the PDS.\n  ID   or I - Sort the list into ascending UserId order.\n  USER or U - Sort the list into ascending UserId order.\n  SSI or SS - Sort the list into ascending SSI or VV.MM order.\n  VER  or V - Sort the list into ascending SSI or VV.MM order.\n=MEMBER=MEM\n)F Function -\n  The MEMBER subcommand causes member entries in the display list with\n  names matching the mask specified as the only operand to be tagged.\n  All other members are untagged.\n\n  The command can process requests for a specific member, or for a\n  generic match.\n\n Examples -\n  MEM ABC    - look for member 'ABC'.\n  MEM *ABC*  - look for member names containing the string 'ABC'.\n  MEM ABC*   - look for member names starting with 'ABC'.\n  MEM *ABC   - look for member names ending with 'ABC'.\n  MEM %ABC*  - look for member names with 'ABC' as the second through\n               fourth characters.\n  MEM %ABC%* - look for member names with 'ABC' as the second through\n               fourth characters which are at least 5 characters long.\n  MEM A*BC   - this will match, for example, ABC, AABC, ABBC and AXBC.\n)X Syntax -\n     MEMBER  'member-name-mask'\n\n Aliases  - MEM\n Defaults - None.\n Required - 'member-name-mask'\n)O Operands -\n)P 'member-name-mask' - a mask to filter member names.  A single\n    string of up to 8 non-blank characters must be specified.\n    Alphabetics will be upper-cased.  Generic masking characters\n    are an asterisk to match zero or more non-blanks, and a percent\n    sign to match any single non-blank character.\n\n    Note that any occurrence of an asterisk-asterisk ('**') or an\n    asterisk-percent ('*%') in the mask will be rejected as invalid.\n=PATTERN=PAT\n)F Function -\n  The PATTERN subcommand causes member entries in the display list\n  with names containing the string specified as the only operand to\n  be tagged.  All other members are untagged.\n\n  The PATTERN command is similar to the MEMBER command, except that\n  unless the supplied string begins with a generic mask character\n  then an asterisk is prepended, and unless the supplied string\n  ends with an asterisk then an asterisk is appended.\n\n  For example:\n    PAT ABC      is equivalent to    MEM *ABC*\n    PAT ABC%     is equivalent to    MEM *ABC%*\n    PAT A%BC     is equivalent to    MEM *A%BC*\n    PAT A*BC     is equivalent to    MEM *A*BC*\n    PAT ABCDEFG  is equivalent to    MEM *ABCDEFG*\n                 except that         MEM *ABCDEFG*\n                 is invalid because '*ABCDEFG*' is longer than 8\n                 characters.\n)X Syntax -\n     PATTERN  'member-name-substring'\n\n Aliases  - PAT\n Defaults - None.\n Required - 'member-name-substring'\n)O Operands -\n)P 'member-name-substring' - a string fragment to filter member names.\n    A single string of up to 8 non-blank characters must be specified.\n    Alphabetics will be upper-cased.  Generic masking characters are\n    an asterisk to match zero or more non-blanks, and a percent sign\n    to match any single non-blank character.\n\n    Note that any occurrence of an asterisk-asterisk ('**') or an\n    asterisk-percent ('*%') in the mask will be rejected as invalid.\n=CANCEL=CAN\n)F   The CANCEL subcommand instructs REVIEW to terminate without\n  saving and changes to the REVIEW profile.\n)X Syntax -\n     CANCEL\n\n Alias    - CAN\n Defaults - None.\n Required - None.\n)O Operands - None.\n=END\n)F   The END subcommand instructs REVIEW to terminate after saving\n  any changes to the REVIEW profile.\n)X Syntax -\n     END\n\n Aliases  - None.\n Defaults - None.\n Required - None.\n)O Operands - None.\n=EXIT=RETURN==X\n)F   The EXIT subcommand performs the same processing as END when\n  issued from a member selection list display.  That is, REVIEW saves\n  any changes to the REVIEW profile and terminates.\n)X Syntax -\n     EXIT\n\n Aliases  - RETURN, =X\n Defaults - None.\n Required - None.\n)O Operands - None.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "REVPDSE": {"ttr": 12805, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'0\\x05\\x00@\\x01\\x04\\x13\\x0f\\x01\\x19\\x02\\x7f#\\x13\\x02.\\x01\\xe6\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf3\\xf4@@@'", "ispf": {"version": "48.05", "flags": 0, "createdate": "2004-05-09T00:00:00", "modifydate": "2019-01-27T23:13:40", "lines": 558, "newlines": 486, "modlines": 0, "user": "FILE134"}, "text": "*                    TSO HELP FOR 'REVPDSE' RELEASE 48.5   JANUARY 2019\n)F Function -\n  This member describes the subcommands available when REVIEW is\n  displaying the member list of a single program object PDSE.\n)X Syntax -\n         REVIEW 'program object library specification'\n)O Operands -\n 'program object library specification'\n                 should not include a member name.\n)S Subcommands -\n ----------------------- GLOBAL SUBCOMMANDS ---------------------------\n\n These subcommands are available in all display modes of REVIEW:\n\n   HELP    - Request HELP about REVIEW and/or its subcommands.\n             This will be intercepted by ISPF if REVIEW is\n             running as an ISPF dialog.\n   HEL     - Same as 'HELP' except ISPF will not intercept it.\n   FSHELP  - Same as 'HEL'.\n   FSH     - Same as 'HEL'.\n   KEYS    - Display current Program Function Key values.\n   ?       - Display the release of REVIEW that is in use.\n   TASK    - Display Task Control Block and Request Block structure.\n   TCB     - Same as 'TASK'.\n   RB      - Same as 'TASK'.\n   CDE     - Show the Job Pack Area's Contents Directory Elements.\n   JPA     - Same as 'CDE'.\n   TSO     - Issue a TSO command.\n   TSS     - Same as 'TSO'.\n   PFK#    - Set Program Function Key '#' to a specified value.\n   PFK0    - Set Program Function Keys to default values.\n   RECALL  - Recall previously typed-in commands for optional\n             editing and reissuing.\n   RETRIEVE- Same as 'RECALL'.\n   SCRNAME - Assign a new name to this logical screen session.\n   START   - Create a new RFE (REVIEW Front End) parallel session.\n   SPLIT   - Same as 'START'\n   SWAP    - List or transfer control between parallel sessions.\n   END     - END the command.\n   CANCEL  - Same as 'END' but user profile changes are not saved.\n   CAN     - Same as 'CANCEL'.\n   EXIT    - Terminate the whole REVIEW session.\n   RETURN  - Same as 'EXIT'.\n   =X      - Same as 'EXIT' when not running as an ISPF dialog.\n\n ------------ REVIEW PARTITIONED MEMBER LIST SUBCOMMANDS ------------\n\n These subcommands are available while processing the member list\n of a partitioned file:\n\n   BROWSE  - Browse a member with ISPF Browse.\n   B       - Same as 'BROWSE'.\n   FIND    - Same as 'SEARCH'.\n   F       - Same as 'SEARCH'.\n   IFIND   - Same as 'RFIND'.\n   LIST    - Display the specified member's entry.\n   LOCATE  - Same as 'LIST'.\n   LOC     - Same as 'LIST'.\n   L       - Same as 'LIST'.\n   REFRESH - Reread the directory entries and update the member list.\n   REF     - Same as 'REFRESH'.\n   RESET   - Untag all member display entries.\n   RES     - Same as 'RESET'.\n   RFIND   - Position the display to the next tagged member entry,\n             or if no entries are tagged report the number of\n             directory blocks that were read.\n   SEARCH  - Request a multi-member search.\n   SRCHFOR - Same as 'SEARCH'.\n   SELECT  - Browse a member with REVIEW.\n   SEL     - Same as 'SELECT'.\n   S       - Same as 'SELECT'.\n   SORT    - Sort the display order of member entries.\n   TAGFLIP - Toggle the tag status of all member entries.\n   TF      - Same as 'TAGFLIP'.\n   UP      - Scroll backwards a specified number of lines or records.\n             If no operand is specified, the 'scroll' value is used.\n             This is displayed in the upper right corner.\n   '-'     - Same as 'UP'.\n   DOWN    - Scroll forwards a specified number of lines or records.\n             If no operand is specified, the 'scroll' value is used.\n             This is displayed in the upper right corner.\n   '+'     - Same as 'DOWN'.\n   TOP     - Scroll up to the first line or entry.\n   BOTTOM  - Scroll down to the last line or entry.\n   BOT     - Same as 'BOTTOM'.\n\n -------------------- MEMBER LIST SELECTION CODES --------------------\n\n These selection codes can be used to select a member entry for\n processing from a directory member list display:\n\n   S       - Selection code for selecting a member to be REVIEWed.\n             'S' is the default selection code, and is assumed\n             when the cursor is placed on an entry selection input\n             field but no character is typed.\n\n   B       - Selection code for selecting a member to be browsed.\n             ISPF/PDF Browse is used.  This will only work if the\n             file is acceptable to ISPF/PDF Browse and only in an\n             ISPF environment.  This will not work if the 'REVIEW'\n             command is issued from 'READY' mode.\n\n   T       - Selection code for tagging an entry for later processing.\n             Tagged entries are shown in high intensity or reverse\n             video in the entry list.  If any members are tagged,\n             then only tagged members are examined during a search.\n             Further, tagging an entry may be useful for display\n             control purposes when the entry list is large as RFIND\n             can be used to locate the next tagged entry.  All tags\n             can be cleared by REFRESH and RESET.\n\n   R       - Selection code for resetting the tag status of an entry.\n             All tags can be cleared by REFRESH and RESET.\n\n   H       - Selection code for extracting and displaying the history\n             of a program.\n\n             The Binder API is invoked to access IDR data which is\n             then formatted and shown with one item per line.  The\n             last display record will usually contain the program\n             bind (link edit) IDR data, including the date and time\n             of the bind.\n\n   M       - Selection code for extracting and displaying the module\n             map of a program.\n\n             The Binder API is invoked to access ESD (for compatible\n             program objects) or MAP (for other levels) data which\n             is then formatted and shown with one item per line.\n\n             The types of map data shown are:\n               'M'     Module\n               'C'     Class\n               'O'     Overlay segment\n               'S'     Section within class\n               'P'     Part within class\n               'L'     Label within section\n               'X'     Text extent within section or part\n               'E'     End-of-module\n\n             The use of FIND ALL can be used to enhance the display\n             by suppressing unwanted data.\n\n             Examples for PO level 1 program objects:\n               To show only sections:\n                 F SD 1 ALL\n               To show only sections and their external labels:\n                 F D 2 ALL\n\n             Examples for other PO levels:\n               To show only classes present:\n                 F C 1 ALL\n               To show all section names present:\n                 F S 2 ALL\n\n   /       - Selection code for selecting a member to be REVIEWed\n             as if the DATA operand had been specified.  Normally,\n             the DATA operand precludes access to PDS and PDSE member\n             contents.  This selection code performs the same function\n             as the 'S' selection code except that the DATA operand is\n             deemed to have been specified.  This will prevent REVIEW\n             from attempting to interpret data content such as\n             pictures.\n\n ----------------------------------------------------------------------\n=HELP=HEL=FSHELP=FSH\n)F Function -\n  The HELP subcommand provides function, syntax, and operand\n  information on the 'REVIEW' command and its subcommands.\n)X Syntax -\n         HELP   'subcommand name'\n                FUNCTION  SYNTAX  OPERANDS('keyword list')  ALL\n                POSITIONAL('operand number') MSG('msgid')\n  Aliases  - HEL, FSHELP, FSH\n  Required - None.\n  Defaults - ALL if FUNCTION, SYNTAX, and OPERANDS not specified.\n  Note     - If HELP is entered without any operands a list of\n             subcommands of the current command will be displayed.\n  Note     - 'keyword list' is optional when OPERANDS is used.\n)O Operands -\n)P 'subcommand name'\n           - Name of the subcommand of 'REVIEW' to be explained.\n))FUNCTION - Function data is to be displayed.\n))SYNTAX   - Format is to be displayed.\n))OPERANDS('keyword list')\n           - Operand description is to be displayed.  If\n             'keyword list' is present, only those keyword descriptions\n             are to be displayed.\n    'keyword list'\n           - Keywords separated by commas, blanks, or tabs.\n))ALL      - Function, syntax, and operand descriptions are to be\n             displayed.\n))POSITIONAL('operand number')\n           - A description of the positional operand specified is to\n             be displayed.\n))MSGID('msgid')\n           - A description of the message identified by msgid is to be\n             displayed.\n=SEARCH=FIND=F=SRCHFOR\n)F Function -\n  The SEARCH subcommand causes a data entry screen to be presented\n  where the parameters of a multi-member search can be specified.\n  The facilities of the REVIEW FIND subcommand are used, and searched\n  members are tagged when a match is found and untagged when no match\n  is found.  If any members are tagged then only tagged members are\n  searched.\n)X Syntax -\n     SEARCH\n Aliases  - FIND, F, SRCHFOR\n Defaults - None.\n Required - None.\n)O Operands - None.\n=RFIND=IFIND\n)F Function -\n  The RFIND subcommand positions the next tagged entry at the top\n  of the display.  If the display is currently positioned at or past\n  the last tagged entry then the display is positioned at the\n  end-of-list entry.  If the display is currently positioned at the\n  end-of-list entry then the display is positioned at the first\n  tagged entry.\n)X Syntax -\n     RFIND\n\n Alias    - IFIND\n Defaults - None.\n Required - None.\n)O Operands - None.\n=TAGFLIP=TF\n)F Function -\n  The TAGFLIP subcommand causes to tag status of every member\n  to be toggled to the opposite setting.  All untagged members are\n  tagged, and all tagged members are untagged.\n)X Syntax -\n     TAGFLIP\n\n Alias    - TF\n Defaults - None.\n Required - None.\n)O Operands - None.\n=RESET=RES\n)F Function -\n  The RESET subcommand causes all members to become untagged\n  without updating any other member information.\n\n)X Syntax -\n     RESET\n\n Alias    - RES\n Defaults - None.\n Required - None.\n)O Operands - None.\n=REFRESH=REF\n)F Function -\n  The REFRESH subcommand instructs REVIEW to update the in-storage\n  member information with the latest data from the directory or\n  directories of the relevant PDS(s) and/or PDSE(s).  All member\n  display entries will be untagged.\n)X Syntax -\n     REFRESH\n\n Alias    - REF\n Defaults - None.\n Required - None.\n)O Operands - None.\n=UP=-\n)F Function -\n  The UP subcommand moves the display up the specified number of\n  lines; if no operand is entered, the scroll amount is used.\n)X Syntax -\n     UP 'amount'\n\n Aliases  - UP, -\n Defaults - Scroll amount\n Required - None.\n)O Operands -\n)P 'amount' - Specifies the number of lines to move the display.\n              It must be a decimal number, or 'HALF' ('H') or\n              'PAGE' ('P') or 'CSR' ('C') or 'MAX' ('M').\n=DOWN=+\n)F Function -\n  The DOWN subcommand moves the display down the specified number\n  of lines; if no operand is entered, the scroll amount is used.\n)X Syntax -\n     DOWN 'amount'\n\n Aliases  - DOWN, +\n Defaults - Scroll amount\n Required - None.\n)O Operands -\n)P 'amount' - Specifies the number of lines to move the display.\n              It must be a decimal number, or 'HALF' ('H') or\n              'PAGE' ('P') or 'CSR' ('C') or 'MAX' ('M').\n=TOP\n)F Function -\n  The TOP subcommand moves the display to the first directory\n  entry in the display list.\n)X Syntax -\n     TOP\n\n Aliases  - None.\n Defaults - None.\n Required - None.\n)O Operands - None.\n=BOTTOM=BOT\n)F Function -\n  The BOTTOM subcommand moves the display to the last directory\n  display entry.\n)X Syntax -\n     BOTTOM\n\n Alias    - BOT\n Defaults - None.\n Required - None.\n)O Operands - None.\n=KEYS=?\n)F Function -\n  The KEYS subcommand displays the current Program Function Key\n  values.  Each PF Key (1 to 24) has a default value which may\n  be changed with the PFK command.\n)X Syntax -\n     KEYS\n\n Alias    - ?\n Defaults - None.\n Required - None.\n)O Operands - None.\n=RECALL=RETRIEVE\n)F Function -\n  The RECALL subcommand causes previously typed-in commands to be\n  displayed in the primary input area where they may be changed if\n  required and then reissued.  Note that single character input strings\n  and text implied by PFK usage are not recallable.  The first command\n  recalled is the most recently typed in command.  Consecutive RECALL\n  commands cause increasingly older commands to be recalled.\n)X Syntax -\n     RECALL\n\n Alias    - The DUP character (X'1C').\n Defaults - None.\n Required - None.\n)O Operands - None.\n=PFK\n)F Function -\n  The PFK subcommand changes PFK definitions for the duration of\n  the REVIEW session; to change a PFK, a subcommand such as\n  'PFK6 RIGHT 1'  is entered to change PFK6 to 'RIGHT 1'.\n\n  By default, the PF KEYS are defined as the following:\n              PFK1  - HELP    PFK2  - START      PFK3  - END\n              PFK4  - TSO     PFK5  - RFIND      PFK6  - RCHANGE\n              PFK7  - UP      PFK8  - DOWN       PFK9  - SWAP NEXT\n              PFK10 - LEFT    PFK11 - RIGHT      PFK12 - RECALL\n              PFK13 - TOP     PFK14 - BOTTOM     PFK15 - END\n              PFK16 - SMF     PFK17 - RFIND      PFK18 - EREP\n              PFK19 - UP      PFK20 - DOWN       PFK21 - HEX\n              PFK22 - ASCII   PFK23 - TSO REV    PFK24 - HEXC\n\n  Changes to the PFK assignments may be saved in the profile data set.\n)X Syntax -\n     PFK## 'newpfdata'\n\n Aliases  - None.\n Defaults - None.\n Required - nn and 'newpfdata'\n)O Operands -\n)P  ##      - Specifies the PF Key to be modified.\n              ## is a 1 or 2 decimal digit number in the range of\n              0 to 24 inclusive.  Numbers from 1 to 24 specify a\n              particular Program Function Key.  If ## is 0 then\n              all 24 PF Keys will be assigned their default values.\n\n 'newpfdata'- Specifies the new subcommand for this PF Key.\n=SCRNAME\n)F Function -\n  The SCRNAME subcommand allows a new name to be assigned to the\n  active logical screen.  This name can be used as the operand of\n  a SWAP subcommand.  Screen names are displayed by SWAP LIST.\n)X Syntax -\n     SCRNAME 'name'\n\n Aliases  - None.\n Defaults - None.\n Required - name\n)O Operands -\n)P 'name'   - Specifies the screen name.  It can be up to eight\n              characters long.  It cannot be completely numeric.\n              It should not be 'NEXT', 'PREV' or 'LIST'.\n=START=SPLIT\n)F Function -\n  The START subcommand requests that a new parallel session is\n  to be initiated and given control.  The new session will be under\n  the RFE (REVIEW Front End) menu hierarchy.  The new session will\n  NOT be started if it would cause the maximum logical session\n  limit to be exceeded.  If no operand is supplied the RFE primary\n  option menu is shown.\n)X Syntax -\n     SPLIT  'option'\n\n Alias    - SPLIT\n Defaults - None.\n Required - None.\n)O Operands -\n)P 'option' - any valid RFE main menu option.  An invalid option\n              will cause the main menu to be shown with the\n              'Invalid command' message.\n=SWAP\n)F Function -\n  The SWAP subcommand specifies which parallel REVIEW session\n  is to become the current session.  It can also list the started\n  REVIEW sessions which are eligible to become the current session.\n  A parallel REVIEW session is created when the REVIEW TSO subcommand\n  (not the ISPF TSO subcommand) is used to create a recursive REVIEW\n  session.  The nesting order of these sessions can be changed by SWAP.\n)X Syntax -\n     SWAP   LIST / NEXT / PREV / # / 'name'\n\n Aliases  - None.\n Default  - switch to previous screen which is listed second\n            by SWAP LIST\n Required - None.\n)O Operands -\n)P 'name'   - Specifies the target screen name which can be up to\n            eight characters long.\n))LIST    - Specifies that all parallel REVIEW sessions are to be\n            listed.\n))NEXT    - Requests switching to next session in increasing\n            session-id order.\n))PREV    - Requests switching to next session in decreasing\n            session-id order.\n))#       - Specifies the decimal number of the target session\n            that is to be swapped with the current session.\n            'SWAP 0' is a no-operation.\n=TSO=TSS\n)F Function -\n  The TSO subcommand specifies a TSO command processor to be invoked\n  from the REVIEW processor.  Commands generating an implicit EXEC\n  such as SYSPROC member names and commands immediately prefixed by\n  a percent sign (%) are supported.\n)X Syntax -\n     TSO  'command' 'operands'\n\n Alias    - TSS\n Defaults - None.\n Required - 'command'\n)O Operands -\n)P 'command'  - Specifies a TSO command to be executed.\n\n)P 'operands' - Specifies any desired operands for this TSO command.\n=LOCATE=LOC=L=LIST\n)F Function -\n  The LOCATE subcommand repositions the display to the relative\n  line number entered, or locates a pending line command.\n)X Syntax -\n     LOCATE  'member'\n\n Aliases  - L, LOC, LOCATE\n Defaults - None.\n Required - 'member'\n)O Operands -\n)P 'member' -  The member name of the entry to be placed at the top\n             of the display.  If the member list is sorted into an\n             order other than member name collating sequence then\n             the exact member name must be specified.\n               If no exact member name is found when the list is\n             sorted by ID, then the operand is used to position\n             the display to the matching user or job name.\n=SELECT=SEL=S\n)F Function -\n  SELECT allows a member to be selected for REVIEW from the primary\n  input area without first locating the member's list entry in the\n  display.\n)X Syntax -\n     SELECT  'member'\n\n Aliases  - SEL, S\n Defaults - None.\n Required - 'member'\n)O Operands -\n)P 'member' -  The name of an existing member to be browsed by REVIEW.\n=BROWSE=B\n)F Function -\n  BROWSE allows a member to be selected for browse from the primary\n  input area without first locating the member's list entry in the\n  display.  The invocation of ISPF Browse will not be successful\n  unless REVIEW is running in an ISPF environment.\n)X Syntax -\n     BROWSE  'member'\n\n Alias    - B\n Defaults - None.\n Required - 'member'\n)O Operands -\n)P 'member' -  The name of an existing member to be browsed.\n=SORT\n)F Function -\n  The SORT subcommand causes the displayed directory entries to be\n  reordered according to the specified criterion.  Underscored\n  column headings may be selected as the sorting criterion without\n  typing a SORT command by means of cursor placement.\n)X Syntax -\n     SORT  'sort-field'\n\n Aliases  - None.\n Defaults - None.\n Required - 'sort-field'\n)O Operands -\n)P 'sort-field' - The name of the display field to be used for sorting.\n      Valid sort field names are:\n  NAME or N - Sort the list into ascending name order.\n  CHA  or C - Sort the list into descending change timestamp order.\n  DATE or D - Sort the list into descending change timestamp order.\n  SIZE or S - Sort the list into descending size order.\n  TTR  or T - Sort the list into ascending TTR (or MLT) order.\n  ID   or I - Sort the list into ascending UserId/Job order.\n  JOB  or J - Sort the list into ascending UserId/Job order.\n  USER or U - Sort the list into ascending UserId/Job order.\n  SSI or SS - Sort the list into ascending SSI order.\n  VER  or V - Sort the list into descending PM version+sublevel order.\n  EPA  or E - Sort the list into descending entry point order.\n  REAL or R - Sort the list into ascending real name order.\n  AL        - Sort the list into ascending (alias) name order.\n  AC        - Sort the list into descending authorization code order.\n  AT        - Sort the list into attribute flags bit pattern order.\n  AM   or M - Sort the list into RMODE/AMODE flags bit pattern order.\n=CANCEL=CAN\n)F Function -\n  The CANCEL subcommand instructs REVIEW to terminate without\n  saving and changes to the REVIEW profile.\n)X Syntax -\n     CANCEL\n\n Alias    - CAN\n Defaults - None.\n Required - None.\n)O Operands - None.\n=END\n)F Function -\n  The END subcommand instructs REVIEW to terminate after saving\n  any changes to the REVIEW profile.\n)X Syntax -\n     END\n\n Aliases  - None.\n Defaults - None.\n Required - None.\n)O Operands - None.\n=EXIT=RETURN==X\n)F Function -\n  The EXIT subcommand performs the same processing as END when\n  issued from a member selection list display.  That is, REVIEW saves\n  any changes to the REVIEW profile and terminates.\n)X Syntax -\n     EXIT\n\n Aliases  - RETURN, =X\n Defaults - None.\n Required - None.\n)O Operands - None.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "REVTSO": {"ttr": 13060, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'0\\x03\\x000\\x01\\x10\\x07O\\x01\\x18#\\x1f\\x17&\\x018\\x01/\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf3\\xf4@@@'", "ispf": {"version": "48.03", "flags": 0, "createdate": "2010-03-15T00:00:00", "modifydate": "2018-08-19T17:26:30", "lines": 312, "newlines": 303, "modlines": 0, "user": "FILE134"}, "text": "*                    TSO HELP FOR 'REVTSO' RELEASE 48.3     AUGUST 2018\n)F Function -\n  This is the documentation for the TSO command processing option\n  of RFE (REVIEW Front End).  REVTSO is not a TSO command.\n\n  The processing panel presented by this option offers a number of\n  advantages over the TSO global subcommand, the main ones being:\n\n  (1) An extended input area is presented allowing command input\n      up to 234 characters in length.\n  (2) The ten most recently issued commands are saved, and can be\n      recalled by cursor selection.  That is, when the command input\n      area is empty and the cursor is placed on a screen line which\n      displays a previously issued command, that entire command is\n      recalled and placed in the main input area for optional editing\n      before being executed again.\n  (3) Unlike the dynamic command recall stack which commences with\n      the initial TSO command which sets up the REVIEW environment,\n      the ten most recent commands can be saved in permanent storage\n      residing in the profile data set.\n\n  In general, the above listed advantages not withstanding, this\n  TSO command processing option has restrictions similar to those\n  imposed on the global TSO subcommand.  In particular, this RFE\n  option does not provide any special ability to initiate APF\n  authorized TSO processing.\n\n  As with the global TSO subcommand, CLIST commands can be implicitly\n  invoked.\n\n  Should the user wish to not save the updated recent commands list\n  the option can be exited using the CANCEL command.  Note that if\n  any CANCEL operands are present the input is treated as a request\n  to issue the TSO CANCEL (FIB) command.  The abbreviation CAN is not\n  subject to this operand test.\n\n  As with ISPF option 6, individual commands can be prevented from\n  being recorded in the displayed list of recent commands simply\n  by prefixing the command string with 'TSO '.  This has the effect\n  of causing the command to be issued via the global TSO command\n  facility instead of via the logic of the TSO command option.\n\n  Exiting the TSO command processing option with the END command,\n  or any inter-option jump string commencing with the equals sign\n  '=' causes the current recent command list to be passed back to\n  RFE.  Note that the command list will only be saved to the profile\n  data set at the termination of the logical session (or split screen).\n\n  The profile data set is a single PDS allocated to the ISPPROF file\n  under z/OS, or the REVPROF file under MVS/370.  From a data\n  management point of view, the profile data set contains fixed-length\n  80-byte records.  The saved commands for this option are stored\n  in member $$REVTSO.\n)X Syntax -\n         6\n     from the RFE primary option menu, or\n         =6\n     from elsewhere in RFE, or\n         RFE 6\n     from TSO, or\n         START 6\n     from with the REVIEW/RFE environment.\n\n  Required - None.\n  Defaults - None.\n  Aliases  - None.\n)O Operands - None.\n)S Subcommands -\n ----------------------- GLOBAL SUBCOMMANDS ---------------------------\n\n These subcommands are available in all RFE options:\n\n   HELP    - Request HELP about REVIEW and/or its subcommands.\n             This will be intercepted by ISPF if REVIEW is\n             running as an ISPF dialog.\n   HEL     - Same as 'HELP' except ISPF will not intercept it.\n   FSHELP  - Same as 'HEL'.\n   FSH     - Same as 'HEL'.\n   KEYS    - Display current Program Function Key values.\n   ?       - Display the release of REVIEW that is in use.\n   TASK    - Display Task Control Block and Request Block structure.\n   TCB     - Same as 'TASK'.\n   RB      - Same as 'TASK'.\n   CDE     - Show the Job Pack Area's Contents Directory Elements.\n   JPA     - Same as 'CDE'.\n   TSO     - Issue a TSO command.\n   TSS     - Same as 'TSO'.\n   PFK#    - Set Program Function Key '#' to a specified value.\n   PFK0    - Set Program Function Keys to default values.\n   RECALL  - Recall previously typed-in commands for optional\n             editing and reissuing.\n   RETRIEVE- Same as 'RECALL'.\n   SCRNAME - Assign a new name to this logical screen session.\n   START   - Create a new RFE (REVIEW Front End) parallel session.\n   SPLIT   - Same as 'START'.\n   SWAP    - List or transfer control between parallel sessions.\n   END     - END the command.\n   CANCEL  - Same as 'END' but user profile changes are not saved.\n   CAN     - Same as 'CANCEL'.\n   EXIT    - Terminate the whole REVIEW session.\n   RETURN  - Same as 'EXIT'.\n   =X      - Same as 'EXIT' when not running as an ISPF dialog.\n ----------------------------------------------------------------------\n=HELP=HEL=FSHELP=FSH\n)F Function -\n  The HELP subcommand provides function, syntax, and operand\n  information on the 'REVIEW' command and its subcommands.\n)X Syntax -\n         HELP   'subcommand name'\n                FUNCTION  SYNTAX  OPERANDS('keyword list')  ALL\n                POSITIONAL('operand number') MSG('msgid')\n  Aliases  - HEL, FSHELP, FSH\n  Required - None.\n  Defaults - ALL if FUNCTION, SYNTAX, and OPERANDS not specified.\n  Note     - If HELP is entered without any operands a list of\n             subcommands of the current command will be displayed.\n  Note     - 'keyword list' is optional when OPERANDS is used.\n)O Operands -\n)P 'subcommand name'\n           - Name of the subcommand of 'REVIEW' to be explained.\n))FUNCTION - Function data is to be displayed.\n))SYNTAX   - Format is to be displayed.\n))OPERANDS('keyword list')\n           - Operand description is to be displayed.  If\n             'keyword list' is present, only those keyword descriptions\n             are to be displayed.\n    'keyword list'\n           - Keywords separated by commas, blanks, or tabs.\n))ALL      - Function, syntax, and operand descriptions are to be\n             displayed.\n))POSITIONAL('operand number')\n           - A description of the positional operand specified is to\n             be displayed.\n))MSGID('msgid')\n           - A description of the message identified by msgid is to be\n             displayed.\n=KEYS=?\n)F Function -\n  The KEYS subcommand displays the current Program Function Key\n  values.  Each PF Key (1 to 24) has a default value which may\n  be changed with the PFK command.\n)X Syntax -\n     KEYS\n\n Alias    - ?\n Defaults - None.\n Required - None.\n)O Operands - None.\n=RECALL=RETRIEVE\n)F Function -\n  The RECALL subcommand causes previously typed-in commands to be\n  displayed in the primary input area where they may be changed if\n  required and then reissued.  Note that single character input strings\n  and text implied by PFK usage are not recallable.  The first command\n  recalled is the most recently typed in command.  Consecutive RECALL\n  commands cause increasingly older commands to be recalled.\n)X Syntax -\n     RECALL\n\n Alias    - The DUP character (X'1C').\n Defaults - None.\n Required - None.\n)O Operands - None.\n=PFK\n)F Function -\n  The PFK subcommand changes PFK definitions for the duration of\n  the REVIEW session; to change a PFK, a subcommand such as\n  'PFK6 RIGHT 1'  is entered to change PFK6 to 'RIGHT 1'.\n\n  By default, the PF KEYS are defined as the following:\n              PFK1  - HELP    PFK2  - START      PFK3  - END\n              PFK4  - TSO     PFK5  - RFIND      PFK6  - RCHANGE\n              PFK7  - UP      PFK8  - DOWN       PFK9  - SWAP NEXT\n              PFK10 - LEFT    PFK11 - RIGHT      PFK12 - RECALL\n              PFK13 - TOP     PFK14 - BOTTOM     PFK15 - END\n              PFK16 - SMF     PFK17 - RFIND      PFK18 - EREP\n              PFK19 - UP      PFK20 - DOWN       PFK21 - HEX\n              PFK22 - ASCII   PFK23 - TSO REV    PFK24 - HEXC\n\n  Changes to the PFK assignments may be saved in the profile data set.\n)X Syntax -\n     PFK## 'newpfdata'\n\n Aliases  - None.\n Defaults - None.\n Required - nn and 'newpfdata'\n)O Operands -\n)P  ##      - Specifies the PF Key to be modified.\n              ## is a 1 or 2 decimal digit number in the range of\n              0 to 24 inclusive.  Numbers from 1 to 24 specify a\n              particular Program Function Key.  If ## is 0 then\n              all 24 PF Keys will be assigned their default values.\n\n 'newpfdata'- Specifies the new subcommand for this PF Key.\n=SCRNAME\n)F Function -\n  The SCRNAME subcommand allows a new name to be assigned to the\n  active logical screen.  This name can be used as the operand of\n  a SWAP subcommand.  Screen names are displayed by SWAP LIST.\n)X Syntax -\n     SCRNAME 'name'\n\n Aliases  - None.\n Defaults - None.\n Required - name\n)O Operands -\n)P 'name'   - Specifies the screen name.  It can be up to eight\n              characters long.  It cannot be completely numeric.\n              It should not be 'NEXT', 'PREV' or 'LIST'.\n=START=SPLIT\n)F Function -\n  The SPLIT subcommand requests that a new parallel session is to be\n  initiated and given control.  The new session will be under the\n  RFE (REVIEW Front End) menu hierarchy.  The new session will NOT\n  be started if it would cause the maximum logical session limit to\n  be exceeded.  If no operand is supplied the RFE primary option\n  menu is shown.\n)X Syntax -\n     START  'option'\n\n Alias    - SPLIT\n Defaults - None.\n Required - None.\n)O Operands -\n)P 'option' - any valid RFE main menu option.  An invalid option\n              will cause the main menu to be shown with the\n              'Invalid command' message.\n=SWAP\n)F Function -\n  The SWAP subcommand specifies which parallel REVIEW session is to\n  become the current session.  It can also list the started REVIEW\n  sessions which are eligible to become the current session.  A\n  parallel REVIEW session is created when the REVIEW TSO subcommand\n  (not the ISPF TSO subcommand) is used to create a recursive REVIEW\n  session.  The nesting order of these sessions can be changed by SWAP.\n)X Syntax -\n     SWAP   LIST / NEXT / PREV / # / 'name'\n\n Aliases  - None.\n Default  - switch to previous screen which is listed second\n            by SWAP LIST\n Required - None.\n)O Operands -\n)P 'name'   - Specifies the target screen name which can be up to\n            eight characters long.\n))LIST    - Specifies that all parallel REVIEW sessions are to be\n            listed.\n))NEXT    - Requests switching to next session in increasing\n            session-id order.\n))PREV    - Requests switching to next session in decreasing\n            session-id order.\n))#       - Specifies the decimal number of the target session\n            that is to be swapped with the current session.\n            'SWAP 0' is a no-operation.\n=TSO=TSS\n)F Function -\n  The TSO subcommand specifies a TSO command processor to be invoked\n  from the REVIEW processor.  Commands generating an implicit EXEC\n  such as SYSPROC member names and commands immediately prefixed by\n  a percent sign (%) are supported.\n)X Syntax -\n     TSO  'command' 'operands'\n\n Alias    - TSS\n Defaults - None.\n Required - 'command'\n)O Operands -\n)P 'command'  - Specifies a TSO command to be executed.\n\n)P 'operands' - Specifies any desired operands for this TSO command.\n=CANCEL=CAN\n)F Function -\n  The CANCEL subcommand performs the same processing as the END\n  subcommand without saving the recent TSO command list changes made\n  this session.  If the TSO command processing option is reselected\n  the saved command list shown will be the same as at the start of\n  the current session.  If CANCEL (but not CAN) has any operands\n  specified it is processed as the TSO FIB command CANCEL and not\n  as the local RFE subcommand, which allows the TSO CANCEL command\n  to be issued from this option.\n)X Syntax -\n     CANCEL\n\n Alias    - CAN\n Defaults - None.\n Required - None.\n)O Operands - None.\n=END\n)F Function -\n  The END subcommand terminates the option and returns control\n  to the RFE primary option menu.\n)X Syntax -\n     END\n\n Aliases  - None.\n Defaults - None.\n Required - None.\n)O Operands - None.\n=EXIT=RETURN==X\n)F Function -\n  The EXIT subcommand terminates the RFE logical session, also\n  referred to as a parallel session, or \"split screen\".  When\n  the last logical session is terminated the whole RFE/REVIEW\n  environment is terminated, which usually means that the TSO\n  READY prompt will be issued.\n)X Syntax -\n     EXIT\n\n Aliases  - RETURN, =X\n Defaults - None.\n Required - None.\n)O Operands - None.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "REVUNIX": {"ttr": 13066, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'0\\x05\\x00\\x03\\x01\\x04\\x13_\\x01\\x19\\x02\\x7f#\\x15\\x02A\\x01\\xd7\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf3\\xf4@@@'", "ispf": {"version": "48.05", "flags": 0, "createdate": "2004-05-14T00:00:00", "modifydate": "2019-01-27T23:15:03", "lines": 577, "newlines": 471, "modlines": 0, "user": "FILE134"}, "text": "*                    TSO HELP FOR 'REVUNIX' RELEASE 48.5   JANUARY 2019\n)F Function -\n  This member describes the subcommands available when REVIEW is\n  displaying the entry list of a UNIX directory.\n)X Syntax -\n         REVIEW 'UNIX path specification'\n)O Operands -\n   'UNIX path specification' must begin with a slash ('/') - or\n   with a tilde ('~') which specifies the user's home directory.\n)S Subcommands -\n ----------------------- GLOBAL SUBCOMMANDS ---------------------------\n\n These subcommands are available in all display modes of REVIEW:\n\n   HELP    - Request HELP about REVIEW and/or its subcommands.\n             This will be intercepted by ISPF if REVIEW is\n             running as an ISPF dialog.\n   HEL     - Same as 'HELP' except ISPF will not intercept it.\n   FSHELP  - Same as 'HEL'.\n   FSH     - Same as 'HEL'.\n   KEYS    - Display current Program Function Key values.\n   ?       - Display the release of REVIEW that is in use.\n   TASK    - Display Task Control Block and Request Block structure.\n   TCB     - Same as 'TASK'.\n   RB      - Same as 'TASK'.\n   CDE     - Show the Job Pack Area's Contents Directory Elements.\n   JPA     - Same as 'CDE'.\n   TSO     - Issue a TSO command.\n   TSS     - Same as 'TSO'.\n   PFK#    - Set Program Function Key '#' to a specified value.\n   PFK0    - Set Program Function Keys to default values.\n   RECALL  - Recall previously typed-in commands for optional\n             editing and reissuing.\n   RETRIEVE- Same as 'RECALL'.\n   SCRNAME - Assign a new name to this logical screen session.\n   START   - Create a new RFE (REVIEW Front End) parallel session.\n   SPLIT   - Same as 'START'.\n   SWAP    - List or transfer control between parallel sessions.\n   END     - END the command.\n   CANCEL  - Same as 'END' but user profile changes are not saved.\n   CAN     - Same as 'CANCEL'.\n   EXIT    - Terminate the whole REVIEW session.\n   RETURN  - Same as 'EXIT'.\n   =X      - Same as 'EXIT' when not running as an ISPF dialog.\n\n ----------- REVIEW UNIX DIRECTORY ENTRY LIST SUBCOMMANDS -----------\n\n These subcommands are available while processing the entry list\n of a UNIX directory:\n\n   BROWSE  - Browse a regular file with ISPF Browse.\n   B       - Same as 'BROWSE'.\n   EDIT    - Edit a regular file with ISPF Edit.\n   E       - Same as 'EDIT'.\n   FIND    - Same as 'SEARCH'.\n   F       - Same as 'SEARCH'.\n   IFIND   - Same as 'RFIND'.\n   LIST    - Display the specified entry.\n   LOCATE  - Same as 'LIST'.\n   LOC     - Same as 'LIST'.\n   L       - Same as 'LIST'.\n   REFRESH - Reread the directory entries and update the display.\n   REF     - Same as 'REFRESH'.\n   RESET   - Untag all display entries.\n   RES     - Same as 'RESET'.\n   RFIND   - Position the display to the next tagged entry.\n   SEARCH  - Request a search of some or all regular files listed.\n   SRCHFOR - Same as 'SEARCH'.\n   SELECT  - Navigate REVIEW to the nominated entry.\n   SEL     - Same as 'SELECT'.\n   S       - Same as 'SELECT'.\n   SORT    - Sort the display order of directory entries.\n   TAGFLIP - Toggle the tag status of all directory entries.\n   TF      - Same as 'TAGFLIP'.\n   UP      - Scroll backwards a specified number of lines or records.\n             If no operand is specified, the 'scroll' value is used.\n             This is displayed in the upper right corner.\n   '-'     - Same as 'UP'.\n   DOWN    - Scroll forwards a specified number of lines or records.\n             If no operand is specified, the 'scroll' value is used.\n             This is displayed in the upper right corner.\n   '+'     - Same as 'DOWN'.\n   TOP     - Scroll up to the first line or entry.\n   BOTTOM  - Scroll down to the last line or entry.\n   BOT     - Same as 'BOTTOM'.\n\n -------------------- ENTRY LIST SELECTION CODES --------------------\n\n These selection codes can be used to select an entry for\n processing from a directory entry list display:\n\n   S       - Selection code for selecting a file to be REVIEWed\n             or a new directory to have its entries displayed.\n             'S' is the default selection code, and is assumed\n             when the cursor is placed on an entry selection input\n             field but no character is typed.\n\n   A       - Selection code for selecting a file to be REVIEWed\n             or a new directory to have its entries displayed.\n             If a file is to be REVIEWed it will be treated as\n             an ASCII text file, and not as a file containing\n             EBCDIC data.  If a directory is selected the 'A'\n             selection code will function as an 'S' selection code.\n\n   E       - Selection code for selecting a file to be edited.\n             ISPF/PDF Edit is used.  This will only work if the\n             file is acceptable to ISPF/PDF Edit and only in an\n             ISPF environment.  This will not work if the 'REVIEW'\n             command is issued from 'READY' mode.\n\n   B       - Selection code for selecting a file to be browsed.\n             ISPF/PDF Browse is used.  This will only work if the\n             file is acceptable to ISPF/PDF Browse and only in an\n             ISPF environment.  This will not work if the 'REVIEW'\n             command is issued from 'READY' mode.\n\n   T       - Selection code for tagging an entry for later processing.\n             Tagged entries are shown in high intensity in the entry\n             list.  If any files are tagged, then only tagged files\n             are processed during search (see SEARCH) operations.\n             Further, tagging an entry may be useful for display\n             control purposes when the entry list is large as RFIND\n             can be used to locate the next tagged entry.  All tags\n             can be cleared by REFRESH and RESET.\n\n   R       - Selection code for resetting the tag status of an entry.\n             All tags can be cleared by REFRESH and RESET.\n\n   H       - Selection code for extracting and displaying the history\n             of a program.\n\n             The Binder API is invoked to access IDR data which is\n             then formatted and shown with one item per line.  The\n             last display record will usually contain the program\n             bind (link edit) IDR data, including the date and time\n             of the bind.\n\n   M       - Selection code for extracting and displaying the module\n             map of a program.\n\n             The Binder API is invoked to access ESD (for compatible\n             program objects) or MAP (for other levels) data which\n             is then formatted and shown with one item per line.\n\n             The types of map data shown are:\n               'M'     Module\n               'C'     Class\n               'O'     Overlay segment\n               'S'     Section within class\n               'P'     Part within class\n               'L'     Label within section\n               'X'     Text extent within section or part\n               'E'     End-of-module\n\n             The use of FIND ALL can be used to enhance the display\n             by suppressing unwanted data.\n\n             Examples for PO level 2 program objects:\n               To show only sections:\n                 F SD 1 ALL\n               To show only sections and their external labels:\n                 F D 2 ALL\n\n             Examples for other PO levels:\n               To show only classes present:\n                 F C 1 ALL\n               To show all section names present:\n                 F S 2 ALL\n\n   /       - Selection code for selecting a entry to be REVIEWed\n             as if the DATA operand had been specified.  Invoking\n             REVIEW to process a UNIX file system allows no operands\n             to be specified.  This selection code performs the same\n             function as the 'S' selection code except that the DATA\n             operand is deemed to have been specified.  This will\n             prevent REVIEW from attempting to interpret data\n             content such as pictures and ZIP directories.\n\n ----------------------------------------------------------------------\n=HELP=HEL=FSHELP=FSH\n)F Function -\n  The HELP subcommand provides function, syntax, and operand\n  information on the 'REVIEW' command and its subcommands.\n)X Syntax -\n         HELP   'subcommand name'\n                FUNCTION  SYNTAX  OPERANDS('keyword list')  ALL\n                POSITIONAL('operand number') MSG('msgid')\n  Aliases  - HEL, FSHELP, FSH\n  Required - None.\n  Defaults - ALL if FUNCTION, SYNTAX, and OPERANDS not specified.\n  Note     - If HELP is entered without any operands a list of\n             subcommands of the current command will be displayed.\n  Note     - 'keyword list' is optional when OPERANDS is used.\n)O Operands -\n)P 'subcommand name'\n           - Name of the subcommand of 'REVIEW' to be explained.\n))FUNCTION - Function data is to be displayed.\n))SYNTAX   - Format is to be displayed.\n))OPERANDS('keyword list')\n           - Operand description is to be displayed.  If\n             'keyword list' is present, only those keyword descriptions\n             are to be displayed.\n    'keyword list'\n           - Keywords separated by commas, blanks, or tabs.\n))ALL      - Function, syntax, and operand descriptions are to be\n             displayed.\n))POSITIONAL('operand number')\n           - A description of the positional operand specified is to\n             be displayed.\n))MSGID('msgid')\n           - A description of the message identified by msgid is to be\n             displayed.\n=SEARCH=FIND=F=SRCHFOR\n)F Function -\n  The SEARCH subcommand causes a data entry screen to be presented\n  where the parameters of a multi-file search can be specified.\n  The facilities of the REVIEW FIND subcommand are used, and searched\n  files are tagged when a match is found and untagged when no match\n  is found.  If any regular files are tagged then only tagged regular\n  files are searched.\n)X Syntax -\n     SEARCH\n Aliases  - FIND, F, SRCHFOR\n Defaults - None.\n Required - None.\n)O Operands - None.\n=RFIND=IFIND\n)F Function -\n  The RFIND subcommand positions the next tagged entry at the top\n  of the display.  If the display is currently positioned at or past\n  the last tagged entry then the display is positioned at the\n  end-of-list entry.  If the display is currently positioned at the\n  end-of-list entry then the display is positioned at the first\n  tagged entry.\n\n)X Syntax -\n     RFIND\n\n Alias    - IFIND\n Defaults - None.\n Required - None.\n)O Operands - None.\n=TAGFLIP=TF\n)F Function -\n  The TAGFLIP subcommand causes to tag status of every entry to be\n  toggled to the opposite setting.  All untagged entries are tagged,\n  and all tagged entries are untagged.\n\n)X Syntax -\n     TAGFLIP\n\n Alias    - TF\n Defaults - None.\n Required - None.\n)O Operands - None.\n=RESET=RES\n)F Function -\n  The RESET subcommand causes all entries to become untagged\n  without updating any other entry information.\n\n)X Syntax -\n     RESET\n\n Alias    - RES\n Defaults - None.\n Required - None.\n)O Operands - None.\n=REFRESH=REF\n)F Function -\n  The REFRESH subcommand instructs REVIEW to update the in-storage\n  entry information with the latest data from the relevant UNIX\n  directory.  All display entries will be untagged.\n\n)X Syntax -\n     REFRESH\n\n Alias    - REF\n Defaults - None.\n Required - None.\n)O Operands - None.\n=UP=-\n)F Function -\n  The UP subcommand moves the display up the specified number of\n  lines; if no operand is entered, the scroll amount is used.\n)X Syntax -\n     UP 'amount'\n\n Aliases  - UP, -\n Defaults - Scroll amount\n Required - None.\n)O Operands -\n)P 'amount' - Specifies the number of lines to move the display.\n              It must be a decimal number, or 'HALF' ('H') or\n              'PAGE' ('P') or 'CSR' ('C') or 'MAX' ('M').\n=DOWN=+\n)F Function -\n  The DOWN subcommand moves the display down the specified number\n  of lines; if no operand is entered, the scroll amount is used.\n)X Syntax -\n     DOWN 'amount'\n\n Aliases  - DOWN, +\n Defaults - Scroll amount\n Required - None.\n)O Operands -\n)P 'amount' - Specifies the number of lines to move the display.\n              It must be a decimal number, or 'HALF' ('H') or\n              'PAGE' ('P') or 'CSR' ('C') or 'MAX' ('M').\n=TOP\n)F Function -\n  The TOP subcommand moves the display to the first directory\n  entry in the display list.\n)X Syntax -\n     TOP\n\n Aliases  - None.\n Defaults - None.\n Required - None.\n)O Operands - None.\n=BOTTOM=BOT\n)F Function -\n  The BOTTOM subcommand moves the display to the last directory\n  display entry.\n)X Syntax -\n     BOTTOM\n\n Alias    - BOT\n Defaults - None.\n Required - None.\n)O Operands - None.\n=KEYS=?\n)F Function -\n  The KEYS subcommand displays the current Program Function Key\n  values.  Each PF Key (1 to 24) has a default value which may\n  be changed with the PFK command.\n)X Syntax -\n     KEYS\n\n Alias    - ?\n Defaults - None.\n Required - None.\n)O Operands - None.\n=RECALL=RETRIEVE\n)F Function -\n  The RECALL subcommand causes previously typed-in commands to be\n  displayed in the primary input area where they may be changed if\n  required and then reissued.  Note that single character input strings\n  and text implied by PFK usage are not recallable.  The first command\n  recalled is the most recently typed in command.  Consecutive RECALL\n  commands cause increasingly older commands to be recalled.\n)X Syntax -\n     RECALL\n\n Alias    - The DUP character (X'1C').\n Defaults - None.\n Required - None.\n)O Operands - None.\n=PFK\n)F Function -\n  The PFK subcommand changes PFK definitions for the duration of\n  the REVIEW session; to change a PFK, a subcommand such as\n  'PFK6 RIGHT 1'  is entered to change PFK6 to 'RIGHT 1'.\n\n  By default, the PF KEYS are defined as the following:\n              PFK1  - HELP    PFK2  - START      PFK3  - END\n              PFK4  - TSO     PFK5  - RFIND      PFK6  - RCHANGE\n              PFK7  - UP      PFK8  - DOWN       PFK9  - SWAP NEXT\n              PFK10 - LEFT    PFK11 - RIGHT      PFK12 - RECALL\n              PFK13 - TOP     PFK14 - BOTTOM     PFK15 - END\n              PFK16 - SMF     PFK17 - RFIND      PFK18 - EREP\n              PFK19 - UP      PFK20 - DOWN       PFK21 - HEX\n              PFK22 - ASCII   PFK23 - TSO REV    PFK24 - HEXC\n\n  Changes to the PFK assignments may be saved in the profile data set.\n)X Syntax -\n     PFK## 'newpfdata'\n\n Aliases  - None.\n Defaults - None.\n Required - nn and 'newpfdata'\n)O Operands -\n)P  ##      - Specifies the PF Key to be modified.\n              ## is a 1 or 2 decimal digit number in the range of\n              0 to 24 inclusive.  Numbers from 1 to 24 specify a\n              particular Program Function Key.  If ## is 0 then\n              all 24 PF Keys will be assigned their default values.\n\n 'newpfdata'- Specifies the new subcommand for this PF Key.\n=SCRNAME\n)F Function -\n  The SCRNAME subcommand allows a new name to be assigned to the\n  active logical screen.  This name can be used as the operand of\n  a SWAP subcommand.  Screen names are displayed by SWAP LIST.\n)X Syntax -\n     SCRNAME 'name'\n\n Aliases  - None.\n Defaults - None.\n Required - name\n)O Operands -\n)P 'name'   - Specifies the screen name.  It can be up to eight\n              characters long.  It cannot be completely numeric.\n              It should not be 'NEXT', 'PREV' or 'LIST'.\n=START=SPLIT\n)F Function -\n  The START subcommand requests that a new parallel session is to be\n  initiated and given control.  The new session will be under the\n  RFE (REVIEW Front End) menu hierarchy.  The new session will NOT\n  be started if it would cause the maximum logical session limit to\n  be exceeded.  If no operand is supplied the RFE primary option\n  menu is shown.\n)X Syntax -\n     START  'option'\n\n Alias    - SPLIT\n Defaults - None.\n Required - None.\n)O Operands -\n)P 'option' - any valid RFE main menu option.  An invalid option\n              will cause the main menu to be shown with the\n              'Invalid command' message.\n=SWAP\n)F Function -\n  The SWAP subcommand specifies which parallel REVIEW session is to\n  become the current session.  It can also list the started REVIEW\n  sessions which are eligible to become the current session.  A\n  parallel REVIEW session is created when the REVIEW TSO subcommand\n  (not the ISPF TSO subcommand) is used to create a recursive REVIEW\n  session.  The nesting order of these sessions can be changed by SWAP.\n)X Syntax -\n     SWAP   LIST / NEXT / PREV / # / 'name'\n\n Aliases  - None.\n Default  - switch to previous screen which is listed second\n            by SWAP LIST\n Required - None.\n)O Operands -\n)P 'name'   - Specifies the target screen name which can be up to\n            eight characters long.\n))LIST    - Specifies that all parallel REVIEW sessions are to be\n            listed.\n))NEXT    - Requests switching to next session in increasing\n            session-id order.\n))PREV    - Requests switching to next session in decreasing\n            session-id order.\n))#       - Specifies the decimal number of the target session\n            that is to be swapped with the current session.\n            'SWAP 0' is a no-operation.\n=TSO=TSS\n)F Function -\n  The TSO subcommand specifies a TSO command processor to be invoked\n  from the REVIEW processor.  Commands generating an implicit EXEC\n  such as SYSPROC member names and commands immediately prefixed by\n  a percent sign (%) are supported.\n)X Syntax -\n     TSO  'command' 'operands'\n\n Alias    - TSS\n Defaults - None.\n Required - 'command'\n)O Operands -\n)P 'command'  - Specifies a TSO command to be executed.\n\n)P 'operands' - Specifies any desired operands for this TSO command.\n=LOCATE=LOC=L=LIST\n)F Function -\n  The LOCATE subcommand repositions the display to the relative\n  line number entered, or locates a pending line command.\n)X Syntax -\n     LOCATE  'entry'\n\n Aliases  - L, LOC, LOCATE\n Defaults - None.\n Required - 'entry'\n)O Operands -\n)P 'entry' -   The name of the entry to be placed at the top of\n             the display.  If the entry list is sorted into an\n             order other than entry name collating sequence then\n             the exact entry name must be specified.\n               If no exact entry name is found when the list is\n             sorted by ID, then the operand is used to position\n             the display to the matching user ID.\n=SELECT=SEL=S\n)F Function -\n  SELECT allows a entry to be selected for REVIEW from the primary\n  input area without first locating the list entry in the display.\n)X Syntax -\n     SELECT  'entry'\n\n Aliases  - SEL, S\n Defaults - None.\n Required - 'entry'\n)O Operands -\n)P 'entry' -   The name of an existing entry to be browsed by REVIEW.\n=BROWSE=B\n)F Function -\n  BROWSE allows a regular file to be selected for browse from the\n  primary input area without first locating the list entry in the\n  display.  ISPF Browse is used.\n)X Syntax -\n     BROWSE  'entry'\n\n Alias    - B\n Defaults - None.\n Required - 'entry'\n)O Operands -\n)P 'entry' -   The name of an existing file to be browsed by ISPF.\n=EDIT=E\n)F Function -\n  EDIT allows a regular file to be selected for edit from the\n  primary input area without first locating the list entry in the\n  display.  ISPF Edit is used.\n)X Syntax -\n     EDIT  'entry'\n\n Alias    - E\n Defaults - None.\n Required - 'entry'\n)O Operands -\n)P 'entry' -   The name of a file to be edited by ISPF.\n=SORT\n)F Function -\n  The SORT subcommand causes the displayed directory entries to be\n  reordered according to the specified criterion.\n)X Syntax -\n     SORT  'sort-field'\n\n Aliases  - None.\n Defaults - None.\n Required - 'sort-field'\n)O Operands -\n)P 'sort-field' - The name of the display field to be used for sorting.\n      Valid sort field names are:\n  NAME or N - Sort the list into ascending name order.\n  CHA or CH - Sort the list into descending change timestamp order.\n  CRE or CR - Sort the list into descending create timestamp order.\n  ACC  or A - Sort the list into descending access timestamp order.\n  SIZE or S - Sort the list into descending size order.\n  ID   or I - Sort the list into ascending Owner UserId order.\n  OWN  or O - Sort the list into ascending Owner UserId order.\n  USER or U - Sort the list into ascending Owner UserId order.\n=CANCEL=CAN\n)F Function -\n  The CANCEL subcommand instructs REVIEW to terminate without\n  saving and changes to the REVIEW profile.\n)X Syntax -\n     CANCEL\n\n Alias    - CAN\n Defaults - None.\n Required - None.\n)O Operands - None.\n=END\n)F Function -\n  The END subcommand instructs REVIEW to display the directory\n  entries of the parent directory of the current directory.  When\n  the current directory is the root directory END will cause REVIEW\n  to terminate.\n)X Syntax -\n     END\n\n Aliases  - None.\n Defaults - None.\n Required - None.\n)O Operands - None.\n=EXIT=RETURN==X\n)F Function -\n  The EXIT subcommand instructs REVIEW to terminate, and is\n  functionally equivalent to a number of successive END subcommands\n  such that the last END is issued at the root directory level.\n)X Syntax -\n     EXIT\n\n Aliases  - RETURN, =X\n Defaults - None.\n Required - None.\n)O Operands - None.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "REVVSAM": {"ttr": 11014, "alias": true, "halfwords": 30, "notes": 0, "parms": "b'0\\x03\\x002\\x00\\x84#\\x7f\\x01\\x18#\\x1f\\x175\\x08\\xb4\\x00L\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf3\\xf4@@@'", "ispf": {"version": "48.03", "flags": 0, "createdate": "1984-08-24T00:00:00", "modifydate": "2018-08-19T17:35:32", "lines": 2228, "newlines": 76, "modlines": 0, "user": "FILE134"}}, "RFE": {"ttr": 13321, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'0\\x03\\x005\\x01\\x10\\x07O\\x01\\x18#\\x1f\\x172\\x01\\xb4\\x01\\xaf\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf1\\xf3\\xf4@@@'", "ispf": {"version": "48.03", "flags": 0, "createdate": "2010-03-15T00:00:00", "modifydate": "2018-08-19T17:32:35", "lines": 436, "newlines": 431, "modlines": 0, "user": "FILE134"}, "text": "*                    TSO HELP FOR 'RFE' RELEASE 48.3        AUGUST 2018\n)F Function -\n  The RFE command provides a 3270 fullscreen environment for general\n  processing under TSO with an emphasis on data set operations.  The\n  chief utility for examining and changing data sets is the REVIEW\n  command, and for this reason it is called the \"REVIEW Front End\".\n\n  RFE presents a primary option menu from which an option is selected\n  by typing the option name into the primary input area.  The 'END'\n  command returns control from the selected option to the primary\n  option menu.\n\n  Jumping between options directly without an intervening display\n  of the main menu is also possible by prefixing the target option\n  name with the equals sign.  For example, to jump to option 6\n  enter the string '=6' (without the quotes) in the primary input\n  area near the top of the screen.\n\n  Multiple parallel RFE logical sessions can exist.  A new session\n  is created by the 'START' command which is equivalent to entering\n  'TSO RFE' in the primary input area.\n\n  A logical RFE session is terminated by entering 'END' at the main\n  menu, or selecting the primary option of 'X'.  Consequently, an\n  RFE logical session can be ended by the primary input string of\n  '=X' from any RFE option.\n\n\n  Graphic Displays\n  ================\n\n  For terminals with suitable graphics facilities under MVS/370,\n  three graphic displays are shown on the primary option menu.\n\n  From left to right, they are:\n\n\n  (1) A plot of virtual storage usage.\n\n      This is presented as a 64 by 64 array representing the 4,096\n      4KB pages in the 16MB virtual storage address space.  Each\n      array element is a 2 by 2 3270 pixel square.  The 64 by 64\n      array has a yellow border 2 3270 pixels wide.\n\n      The bottom row of the array represents virtual pages 0 to\n      63 going left to right, the second-bottom row represents\n      virtual pages 64 to 127 going left to right, and so on.\n\n      The color codes used to represent page usage are:\n\n      Black        - UnGETMAINed pages.  Attempting to reference\n                     virtual storage addresses in these pages\n                     will cause an addressing exception program\n                     interrupt which MVS will convert to a S0C4\n                     abnormal end (abend).\n\n      Red          - Nucleus pages.  Under MVS/370 the nucleus\n                     is V=R, which means that the real address\n                     of all parts of the nucleus is the same as\n                     the virtual address.  The nucleus starts\n                     at address 0.  The private area starts at\n                     the 64KB boundary above the nucleus.\n\n      Green        - Private pages in a user key.  Application\n                     programs and data usually reside in these\n                     pages.\n\n      White        - Private pages in a system key.  Job-related\n                     system control blocks such as the Scheduler\n                     Work Area (SWA) usually reside in these\n                     pages at the top of the private area, while\n                     authorized reentrant programs can reside in\n                     these pages in lower parts of the private\n                     area.\n\n      Pink         - Local System Queue Area (LSQA).  It is the\n                     residency of the LSQA which defines whether\n                     an address space is swapped in or swapped out.\n                     The LSQA may be swappable, but it is not\n                     pagable.  The segment and page tables used\n                     by Dynamic Address Translation (DAT) reside\n                     in LSQA.  LSQA usually occupies the highest\n                     pages in the private area.\n\n      Blue         - Pagable common pages.  CSA subpools 231 and\n                     241 use these pages.\n\n      Yellow       - Page-fixed common pages.  CSA subpools 227\n                     and 228 use these pages.\n\n      Shaded green - The Link Pack Area (LPA).  The LPA contains\n                     reentrant programs permanently resident in\n                     virtual storage.\n\n      Turquoise    - The System Queue Area (SQA).  The SQA is not\n                     pagable and contains control blocks used for\n                     managing the whole system.  All SQA storage\n                     is in key 0.\n\n\n  (2) A bar graph of the frame count versus UIC distribution.\n\n      The X-axis covers the allowable Unreferenced Interval Count\n      (UIC) range from 0 to 255 with each 3270 pixel covering 2\n      adjacent UIC values.  The Y-axis plots the number of frames\n      with a given UIC value at a scale of 2 frames per 3270 pixel.\n      Vertical bar plots are truncated at a frame count of 256\n      which corresponds to 1MB of real storage.\n\n      If a page frame has not been referenced for 10 SRM intervals,\n      it is said to have a UIC of 10.  An SRM interval may be\n      something like a couple of seconds elapsed time, depending\n      on the CPU speed adjustment factor, which is obviously\n      model-dependent.\n\n\n  (3) A plot of real storage usage.\n\n      This is presented as a 64 by 64 array representing the 4,096\n      4KB frames that can exist when the maximum real storage size\n      of 16MB is present.  Each array element is a 2 by 2 3270 pixel\n      square.  The 64 by 64 array has a yellow border 2 3270 pixels\n      wide.\n\n      The bottom row of the array represents page frames 0 to\n      63 going left to right, the second-bottom row represents\n      page frames 64 to 127 going left to right, and so on.\n\n      The color codes used to represent frame usage are:\n\n      Black        - Unused frames available for use.\n\n      Red          - Non-RSM frames.  Frames that are not managed\n                     by the Real Storage Manager are nucleus frames,\n                     bad frames (those found to have an error),\n                     and frames varied offline.\n\n      Green        - Pagable private storage.\n\n      Pink         - Page-fixed private storage.\n\n      Turquoise    - SQA and LSQA storage.  SQA pages tend to occupy\n                     the frames with the highest addresses.\n\n      Blue         - Pagable common (CSA and LPA) storage.\n\n      Yellow       - Page-fixed common (CSA and LPA) storage.\n\n      White        - All frames containing private pages including\n                     LSQA belonging to >this< address space.  Since\n                     >this< address space will usually be a TSO user\n                     address space, these pages will be available for\n                     reuse by the time you are reading this, because\n                     the system will swap out your TSO session while\n                     it waits for the next input from your TSO\n                     terminal.  (While MVS 3.8J does not perform\n                     logical swapping, it does exploit page reclaim.)\n\n\n  Profile data set\n  ================\n\n  It is possible to save various settings across RFE and TSO sessions.\n  For this to occur the settings must be saved in permanent storage.\n  This is achieved by writing those settings to a permanent data set\n  at the end of an RFE session.\n\n  The profile data set is a single PDS allocated to the ISPPROF file\n  under z/OS, or the REVPROF file under MVS/370.  From a data\n  management point of view, the profile data set contains fixed-length\n  80-byte records.\n\n  Various settings such as customized Program Function Key assignments,\n  scroll amounts, display settings, editor settings, and recent TSO\n  commands can be saved into the various members of the profile data\n  set.\n\n  Changes are saved by default (when the profile data set is allocated)\n  but usually profile changes can be discarded if functions are\n  terminated with the 'CANCEL' command instead of the usual 'END'\n  command.\n)X Syntax -\n         RFE  'option'\n\n  Aliases  - None.\n  Required - None.\n  Defaults - None.\n)O Operands -\n)P 'option' - initial menu option to be selected.  If specified\n           the display of the primary option menu will be skipped.\n)S Subcommands -\n ----------------------- GLOBAL SUBCOMMANDS ---------------------------\n\n These subcommands are available in all RFE options:\n\n   HELP    - Request HELP about REVIEW and/or its subcommands.\n             This will be intercepted by ISPF if REVIEW is\n             running as an ISPF dialog.\n   HEL     - Same as 'HELP' except ISPF will not intercept it.\n   FSHELP  - Same as 'HEL'.\n   FSH     - Same as 'HEL'.\n   KEYS    - Display current Program Function Key values.\n   ?       - Display the release of REVIEW that is in use.\n   TASK    - Display Task Control Block and Request Block structure.\n   TCB     - Same as 'TASK'.\n   RB      - Same as 'TASK'.\n   CDE     - Show the Job Pack Area's Contents Directory Elements.\n   JPA     - Same as 'CDE'.\n   TSO     - Issue a TSO command.\n   TSS     - Same as 'TSO'.\n   PFK#    - Set Program Function Key '#' to a specified value.\n   PFK0    - Set Program Function Keys to default values.\n   RECALL  - Recall previously typed-in commands for optional\n             editing and reissuing.\n   RETRIEVE- Same as 'RECALL'.\n   SCRNAME - Assign a new name to this logical screen session.\n   START   - Create a new RFE (REVIEW Front End) parallel session.\n   SPLIT   - Same as 'START'.\n   SWAP    - List or transfer control between parallel sessions.\n   END     - END the command.\n   CANCEL  - Same as 'END' but user profile changes are not saved.\n   CAN     - Same as 'CANCEL'.\n   EXIT    - Terminate the whole REVIEW session.\n   RETURN  - Same as 'EXIT'.\n   =X      - Same as 'EXIT' when not running as an ISPF dialog.\n ----------------------------------------------------------------------\n=HELP=HEL=FSHELP=FSH\n)F Function -\n  The HELP subcommand provides function, syntax, and operand\n  information on the 'REVIEW' command and its subcommands.\n)X Syntax -\n         HELP   'subcommand name'\n                FUNCTION  SYNTAX  OPERANDS('keyword list')  ALL\n                POSITIONAL('operand number') MSG('msgid')\n  Aliases  - HEL, FSHELP, FSH\n  Required - None.\n  Defaults - ALL if FUNCTION, SYNTAX, and OPERANDS not specified.\n  Note     - If HELP is entered without any operands a list of\n             subcommands of the current command will be displayed.\n  Note     - 'keyword list' is optional when OPERANDS is used.\n)O Operands -\n)P 'subcommand name'\n           - Name of the subcommand of 'REVIEW' to be explained.\n))FUNCTION - Function data is to be displayed.\n))SYNTAX   - Format is to be displayed.\n))OPERANDS('keyword list')\n           - Operand description is to be displayed.  If\n             'keyword list' is present, only those keyword descriptions\n             are to be displayed.\n    'keyword list'\n           - Keywords separated by commas, blanks, or tabs.\n))ALL      - Function, syntax, and operand descriptions are to be\n             displayed.\n))POSITIONAL('operand number')\n           - A description of the positional operand specified is to\n             be displayed.\n))MSGID('msgid')\n           - A description of the message identified by msgid is to be\n             displayed.\n=KEYS=?\n)F Function -\n  The KEYS subcommand displays the current Program Function Key\n  values.  Each PF Key (1 to 24) has a default value which may\n  be changed with the PFK command.\n)X Syntax -\n     KEYS\n\n Alias    - ?\n Defaults - None.\n Required - None.\n)O Operands - None.\n=RECALL=RETRIEVE\n)F Function -\n  The RECALL subcommand causes previously typed-in commands to be\n  displayed in the primary input area where they may be changed if\n  required and then reissued.  Note that single character input strings\n  and text implied by PFK usage are not recallable.  The first command\n  recalled is the most recently typed in command.  Consecutive RECALL\n  commands cause increasingly older commands to be recalled.\n)X Syntax -\n     RECALL\n\n Alias    - The DUP character (X'1C').\n Defaults - None.\n Required - None.\n)O Operands - None.\n=PFK\n)F Function -\n  The PFK subcommand changes PFK definitions for the duration of\n  the REVIEW session; to change a PFK, a subcommand such as\n  'PFK6 RIGHT 1'  is entered to change PFK6 to 'RIGHT 1'.\n\n  By default, the PF KEYS are defined as the following:\n              PFK1  - HELP    PFK2  - START      PFK3  - END\n              PFK4  - TSO     PFK5  - RFIND      PFK6  - RCHANGE\n              PFK7  - UP      PFK8  - DOWN       PFK9  - SWAP NEXT\n              PFK10 - LEFT    PFK11 - RIGHT      PFK12 - RECALL\n              PFK13 - TOP     PFK14 - BOTTOM     PFK15 - END\n              PFK16 - SMF     PFK17 - RFIND      PFK18 - EREP\n              PFK19 - UP      PFK20 - DOWN       PFK21 - HEX\n              PFK22 - ASCII   PFK23 - TSO REV    PFK24 - HEXC\n\n  Changes to the PFK assignments may be saved in the profile data set.\n)X Syntax -\n     PFK## 'newpfdata'\n\n Aliases  - None.\n Defaults - None.\n Required - nn and 'newpfdata'\n)O Operands -\n)P  ##      - Specifies the PF Key to be modified.\n              ## is a 1 or 2 decimal digit number in the range of\n              0 to 24 inclusive.  Numbers from 1 to 24 specify a\n              particular Program Function Key.  If ## is 0 then\n              all 24 PF Keys will be assigned their default values.\n\n 'newpfdata'- Specifies the new subcommand for this PF Key.\n=SCRNAME\n)F Function -\n  The SCRNAME subcommand allows a new name to be assigned to the\n  active logical screen.  This name can be used as the operand of\n  a SWAP subcommand.  Screen names are displayed by SWAP LIST.\n)X Syntax -\n     SCRNAME 'name'\n\n Aliases  - None.\n Defaults - None.\n Required - name\n)O Operands -\n)P 'name'   - Specifies the screen name.  It can be up to eight\n              characters long.  It cannot be completely numeric.\n              It should not be 'NEXT', 'PREV' or 'LIST'.\n=START=SPLIT\n)F Function -\n  The START subcommand requests that a new parallel session is\n  to be initiated and given control.  The new session will be under\n  the RFE (REVIEW Front End) menu hierarchy.  The new session will\n  NOT be started if it would cause the maximum logical session\n  limit to be exceeded.  If no operand is supplied the RFE primary\n  option menu is shown.\n)X Syntax -\n     START  'option'\n\n Alias    - SPLIT\n Defaults - None.\n Required - None.\n)O Operands -\n)P 'option' - any valid RFE main menu option.  An invalid option\n              will cause the main menu to be shown with the\n              'Invalid command' message.\n=SWAP\n)F Function -\n  The SWAP subcommand specifies which parallel REVIEW session is to\n  become the current session.  It can also list the started REVIEW\n  sessions which are eligible to become the current session.  A\n  parallel REVIEW session is created when the REVIEW TSO subcommand\n  (not the ISPF TSO subcommand) is used to create a recursive REVIEW\n  session.  The nesting order of these sessions can be changed by\n  SWAP.\n)X Syntax -\n     SWAP   LIST / NEXT / PREV / # / 'name'\n\n Aliases  - None.\n Default  - switch to previous screen which is listed second\n            by SWAP LIST\n Required - None.\n)O Operands -\n)P 'name'   - Specifies the target screen name which can be up to\n            eight characters long.\n))LIST    - Specifies that all parallel REVIEW sessions are to be\n            listed.\n))NEXT    - Requests switching to next session in increasing\n            session-id order.\n))PREV    - Requests switching to next session in decreasing\n            session-id order.\n))#       - Specifies the decimal number of the target session\n            that is to be swapped with the current session.\n            'SWAP 0' is a no-operation.\n=TSO=TSS\n)F Function -\n  The TSO subcommand specifies a TSO command processor to be invoked\n  from the REVIEW processor.  Commands generating an implicit EXEC\n  such as SYSPROC member names and commands immediately prefixed by\n  a percent sign (%) are supported.\n)X Syntax -\n     TSO  'command' 'operands'\n\n Alias    - TSS\n Defaults - None.\n Required - 'command'\n)O Operands -\n)P 'command'  - Specifies a TSO command to be executed.\n\n)P 'operands' - Specifies any desired operands for this TSO command.\n=CANCEL=CAN\n)F Function -\n  The CANCEL subcommand performs the same processing as the END\n  subcommand without saving the recent TSO command list changes made\n  this session.  If the TSO command processing option is reselected\n  the saved command list shown will be the same as at the start of\n  the current session.  If CANCEL (but not CAN) has any operands\n  specified it is processed as the TSO FIB command CANCEL and not\n  as the local RFE subcommand, which allows the TSO CANCEL command\n  to be issued from this option.\n)X Syntax -\n     CANCEL\n\n Alias    - CAN\n Defaults - None.\n Required - None.\n)O Operands - None.\n=END\n)F Function -\n  The END subcommand terminates the option and returns control\n  to the RFE primary option menu.\n)X Syntax -\n     END\n\n Aliases  - None.\n Defaults - None.\n Required - None.\n)O Operands - None.\n=EXIT=RETURN==X\n)F Function -\n  The EXIT subcommand terminates the RFE logical session, also\n  referred to as a parallel session, or \"split screen\".  When\n  the last logical session is terminated the whole RFE/REVIEW\n  environment is terminated, which usually means that the TSO\n  READY prompt will be issued.\n)X Syntax -\n     EXIT\n\n Aliases  - RETURN, =X\n Defaults - None.\n Required - None.\n)O Operands - None.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RGENR": {"ttr": 13575, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x16\\x01\\x08\\x15_\\x01\\x19\\x11?!\\x02\\x00#\\x00\\x15\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf8\\xf3\\xf6@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2008-06-03T00:00:00", "modifydate": "2019-04-23T21:02:16", "lines": 35, "newlines": 21, "modlines": 0, "user": "FILE836"}, "text": ")F FUNCTION -\n\n  The RGENR command is a REXX exec, which will re-create\n  TSO ADDSD and PERMIT commads that were used to create\n  an existing RACF profile.  In other words:\n\n     RACF Profile -----> TSO commands used to create it.\n\n  Output will be written to a dataset allocated to the DDOUT\n  DD name.\n\n)X SYNTAX  -\n\n       RGENR  profile  class\n\n   Example:   RGENR DITTO.** FACILITY\n\n   Sample Output:\n\n   RDEFINE FACILITY DITTO.** -\n    LEVEL(00) OWNER(CPARKER)  -\n    UACC(READ) AUDIT(FAILURES(READ)) -\n    DATA('NONE')\n\n   PE DITTO.** ID(CPARKER)  ACC(ALTER) GEN CL(FACILITY)\n   PE DITTO.** ID(IBMUSER)  ACC(ALTER) GEN CL(FACILITY)\n\n\n)O OPERANDS -\n))profile   -  The complete unquoted profile name.\n               Example:  DITTO.**\n\n))class     -  The class name of the resource\n               Example:  FACILITY\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "RPFHELP": {"ttr": 13577, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01G\\x00W\\x01\\x19\\x11?\\x01\\x19\\x11?\\x15\\x14\\x03(\\x03(\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf4\\xf1\\xf5@@@'", "ispf": {"version": "01.71", "flags": 0, "createdate": "2019-04-23T00:00:00", "modifydate": "2019-04-23T15:14:57", "lines": 808, "newlines": 808, "modlines": 0, "user": "FILE415"}, "text": "./ ADD NAME=RPFHELP1 0110-01045-19098-1040-00088-00076-00000-Z531415 00\n                        W E L C O M E   T O   R P F\n                 (Robs's Programming Facility V 1 R 7)\n\n\n  RPF is developed by Rob Prins for Skybird Systems and used at\n  the Hercules project.\n\n  It operates as a command processor under TSO/VTAM in a MVS38J,\n  MVS/380, MVS/XA, MVS/ESA, OS/390 and z/OS operating system.\n  With the exception of MVS38J addressing mode 31 is available, so you\n  you can edit datasets or PDS members up to 2,000,000 lines.\n\n  RPF provides an easy way of entering and editing data on an IBM3270\n  terminal.  The major change in Version 1, Release 7 is the size of\n  of the 3270 terminal. Most of the panels will support screens up\n  62 lines x 160 columns. That is the size of the 3290 terminal.\n  A few panels will not support this size, but reverts back to a 3270\n  model 2 (24 lines x 80 columns).\n\n  It also provides you with the ability of ASSEMBLE and\n  LINK-EDIT programs in the FOREGROUND. The UTILITY has functions for\n  creation and deletion of data sets, EDITing a VTOC, PDS and LIBRARIAN\n  maintenance and the dataset list function.\n\n  Editing of numbered or unnumbered card images is possible in\n  fullscreen mode.  The '*' mentioned in some subcommands of EDIT, is\n  the current line. (1st line on the screen).\n\n  I *,n  will insert N lines after the current line, 'DEL *,n'\n  will delete n lines starting with the current line, 'DEL *,99999999'\n  will delete till the end of the workspace starting with the current\n  line. If you delete the whole workspace, RPF will terminate the\n  EDIT function.\n\n  For a description of all commands, select -2- from the RPF Help\n  menu.\n\n  If you want to delete a certain line or lines use the 'DEL N(,M)'\n  command.  You can INSERT and REPEAT after certain lines too.\n  For changing character strings in the workspacethe 'C'\n  command is available.  You can change from num to nonum mode,\n  by entering the 'UNNUM' command.  The 'RENUM ' command sets the\n  editor in num mode.\n\n  The 'SCL' and 'SCR' subcommands sets the display from col 1-72 or\n  9-80.  The 'COB' and 'NOCOB' subcommands sets the display on cols 7-78\n  or 1-72.  After the 'COB' command, you are in COBOL mode, so the\n  seq. nrs are in cols 1-6.\n  When a file is edited, the workspace is automaticly cleared.\n  If you want to append another file, select 'APPEND=YES'\n  on the dataset menu.  OS datasets, LIBRARIAN datasets and\n  PANVALET datasets can be processed with EDIT.  All files are\n  allocated dynamically. If an error occurs during dynamic allocation, a\n  return code is displayed. Select -3- on the HELP MENU to get an\n  explanation of the return codes.\n\n  The TEST function is implemented only for maintanance by the RPF\n  BUILDERS and should not be used by unauthorized users.\n\n  In each selection menu, the 'END' PFkey is supported (PF3 and PF15).\n\n  RPF OPERATOR MODE enables you to look at the current system activity.\n  When using RPFOPER, enter 'HELP' to list the available functions.\n\n  RPF works in fullscreen mode, which means that the terminal is also\n  set to fullscreen mode. If a non-fullscreen message (like a SEND\n  message) is received three *** appear on the screen. Hit the Enter key\n  to restore your screen.  If the screen is not properly restored, enter\n  a '?' to restore.\n\n  The use of PFK's is possible during EDIT, BROWSE, PDS, Data set\n  selection list, LIBRARIAN functions and all selection menus.\n  These PFK's can be altered by using the DEFAULTS menu\n  This defaults menu is option '0' on the main menu.\n  With this menu it is possible to alter the default workspace size,\n  allocation of OS, LIBRARIAN and PANVALET datasets and the mentioned\n  PFK's\n\n  All these defaults will be saved on the RPF profile cluster if\n  available.\n\n  If you have any comments on RPF, please contact one of the following\n  persons:\n   - Rob Prins, loc. Wormer, phone +31 6 46 31 22 99\n     email:          rob.prins@quicknet.nl\n     www:            www.prince-webdesign.nl/rpf\n\n  April / May 2019  The RPF builders.\n./ ADD NAME=RPFHELP2 0122-01045-19028-1043-00189-00131-00000-Z531415 00\nFunction Command:    Description:\n-------- ----------- ----------------------------------------------------------\nEDIT     &'command'  Repeat command if the prefix '&' is present\n         ASIS        Do not translate to uppercase\n         BOTTOM      Page to last screen\n         C /aaa/bbb/ Change character strings in current line\n         C /aaa/bbb/a Change character strings from current line till the end\n         C /aaa/bbb/n,m Change character strings in line range n-m\n         CANCEL      Terminate edit and do not save workspace\n         CAPS        Force translate lowercase to uppercase.\n         CO m,n,o    Copy lines m thru n after line o (m= * for current line)\n         COB         Align editor on COBOL mode (line numbers are in cols 1-6)\n         COPY        Append another member or dataset.\n         CUT         Write lines between CC-CC, first line - CT or\n                     CB - last line to clipboard file\n         DEL m,n     Delete line m thru n, or n lines after curr. line if m= *\n         END         Terminate edit and save if data has been changed\n         FIND 'string'(,n,m) Find character string (in range n-m)\n         FILL /str/  Set \"str\" in workspace starting with curr. line till end\n         FILL /str/n,m Set \"str\" in workspace in specified line range\n         HAR xxx,n,m,<TITLE/NOTITLE>,<C=cc>,<P=pp>,<EJECT/NOEJECT>,<DSC/SCS>,\n                     <INDENT/NOINDENT>,<F='footnote text'>\n                     Hardcopy on printer xxx (line n thru m)\n                     'NOEJECT' do not skip to next page (default 'EJECT')\n                     'TITLE' produce headers            (default 'NOTITLE')\n                     'INDENT' print 72 cols , shift data 8 pos (def. NOINDENT)\n                     'F=text' prints a footnote with 'text' as footnote at the\n                              bottom of each page.\n                     'C=cc' print cc copies. (default is 1 copy)\n                     'P=pp' length of a page (default is 72 lines)\n                     'EJECT' force skip after each page (default 'eject')\n                     'SCS' and 'DSC' should be specified if cross domain.\n         HELP        Invoke RPF/XA HELP facility.\n         I m,n       Insert n lines after line m, or current line if m= *\n         JCL         Do a basic JCL syntax check\n         L +n        Page foreward n lines (n = max 5 figures)\n         L -n        Page backward n lines\n         n           Scroll n lines foreward or backward if\n                     SCF or SCB PFkey entered (same as L +/-n)\n         L n         Page to line n\n         LC          Xlate to lowercase from current line till end of workspace\n         LC n,m      Xlate uppercase in lines n,m to lowercase\n         MO m,n,o    Move lines m thru n after o (m= * for current line)\n         NOCOB       Set editor in normal mode (line numbers are in cols 73-80)\n         NONULLS     Reset nulls command\n         NONUM       Set editor in NONUM mode.\n         NULLS       Remove trailing blanks on the screen\n         O 'string'(,n,m) Find line, which does not contain 'string'(range n-m)\n         OSSAVE      Save LIBRARIAN module upon an OS dataset\n         OUT         Invoke the output processor.\n         PASTE       Copy Clipboard file after line A, before the\n                     fist line (TT) or after last line (BB)\n         PFK         Display screen for PFK settings\n         R m,n       Repeat line m, n times, or current line if m= *\n         REN(UMBER)  Renumber workspace and go to NUM mode. (alias NUM)\n         RESET       Reset pending line commands.\n         RETRIEVE    Retrieve last command. Any subsequent RETRIEVE\n                     command will give the previous command.\n                     The last 100 commands can be retrieved and are\n                     saved in the database.\n         RETURN      Terminate edit and return to main menu\n         SAVE(FORCE) Save workspace (FORCE if workspace is translated)\n         SCB         Scroll PAGE/HALF/LINE/CSR/'m' backward ('m' in cmd field)\n         SCF         Scroll PAGE/HALF/LINE/CSR/'m' foreward ('m' in cmd field)\n         SCL         Set display on cols 1-72\n         SCOPE n,m   Set scope on columns n,m or default if n,m are omitted\n         SCR         Set display on cols 9-80\n         SORT        Sort workspace according scope range\n         SUB         Submit current workspace\n         TSO         Invoke RPF/XA TSO command processor\n         TOP         Page to first screen\n         UC          Xlate to uppercase from current line till end of workspace\n         UC n,m      Xlate lowercase in lines n,m to uppercase\n         UNN(UM)     Clear cols 73-80 and go to NONUM mode. (or cols 1-6)\n         The F,O,C,FILL,SORT commands works in the columns, set by SCOPE cmd.\n         =n/=n.n     Return to main and exec option 'n' or 'n.n'\nPDS      &'command'  Repeat command if the prefix '&' is present\n         A aaaaaaaa  Assign alias aaaaaaaa to member        (entered in col. 1)\n         B           Browse member                          (entered in col. 1)\n         BOTTOM      Display last screen\n         D           Delete member                          (entered in col. 1)\n         E           Edit member                            (entered in col. 1)\n         END         Terminate PDS-maintenance and go to allocation menu\n         L xxxxxxxx  Locate on member xxxxxxx or member that start with xxx\n         P           Print member                           (entered in col. 1)\n         PFK         Change PFK definitions\n         RESET       Reset all pending commands end read PDS again.\n         RETURN      Terminate PDS-maintenance and go to main\n         =n/=n.n     Return to main and exec option 'n' or 'n.n'\n         R aaaaaaaa  Rename member into aaaaaaaa            (entered in col. 1)\n         S member    Edit/Browse selected member\n         SORT        Sort on member-name\n         SORT TTR    Sort on ttr address (descending)\n         SORT CHA    Sort on date/time changed (descending)\n         SORT SIZE   Sort on member size (descending)\n         SCB         Page backward 1 screen\n         SCF         Page foreward 1 screen\n         TOP         Page to first screen\n         X           Queue member for tranmission           (entered in col. 1)\nBROWSE   BOTTOM      Position at bottom of output-file\n         C nnn       Set number first column to be displayed\n         END         End browse, go to allocation menu\n         F 'string'  Find specified character string\n                     The quotes can be omitted if no blanks inside the\n                     string. If only an F is entered, a repeat find of\n                     the same string will be done.\n         HELP        Display a brief HELP info\n         HEX OFF     Turn off HEX display\n         HEX ON      Turn on HEX display\n         L xxxx      Locate on previous assigned label\n         LABEL xxxx  Assign label xxxx to current screen\n         PFK         Alter PFK definitions\n         PRINT x     Print listing into sysout class x\n         RETURN      End browse, go to main menu\n         SCB         Scroll 1 page backward\n         SCF         Scroll 1 page forward\n         SCL         Scroll 1 screen width left (79 or 131 chars)\n         SCR         Scroll 1 screen width right (79 or 131 chars)\n         SUB         Submit the contents of the dataset\n         TOP         Position at top of output-file\nVTOC     &'command'  Repeat command if the prefix '&' is present\n         B or V      Browse dataset                         (entered in col. 1)\n         BOTTOM      Display last screen\n         C           Catalog a dataset                      (entered in col. 1)\n         D           Delete dataset                         (entered in col. 1)\n         E           Edit dataset                           (entered in col. 1)\n         END         Terminate VTOC and go to allocation menu\n         I           Display data set information           (entered in col. 1)\n         L xxx       Locate on dataset xxx\n         M           Process a member selection list        (entered in col. 1)\n         PFK         Change PFK definitions\n         R           Rename a dataset                       (entered in col. 1)\n         RETURN      Terminate VTOC selection list\n         =n/=n.n     Return to main and exec option 'n' or 'n.n'\n         SCB         Page backward 1 screen\n         SCF         Page foreward 1 screen\n         TOP         Page to first screen\n         U           Uncatalog a dataset                    (entered in col. 1)\n         Z           Compress dataset with IEBCOPY          (entered in col. 1)\nMove/Cpy &'command'  Repeat command if the prefix '&' is present\n         BOTTOM      Display last screen\n         END         Terminate Move/Copy and go to allocation menu\n         L xxx       Locate on member xxx\n         PFK         Change PFK definitions\n         RETURN      Terminate member selection list\n         =n/=n.n     Return to main and exec option 'n' or 'n.n'\n         SCB         Page backward 1 screen\n         SCF         Page foreward 1 screen\n         SORT CHA    Sort on date/time changed (descending)\n         TOP         Page to first screen\n         S           Select member to MOVE or COPY          (entered in col. 1)\nASSEMBLR END         Escape from assembler menu\nHELP                 See the commands of BROWSE\nPFK      END         Accept PFK settings, exit\n         RESET       Ignore PFK settings, reset screen\n         =n/=n.n     Return to main and exec option 'n' or 'n.n'\nLIBRARIAN maint:     see the commands of 'PDS' with exception of\nthe 'R' and 'A' commands\n\nFunction Linecommand Description:\n-------- ----------- ----------------------------------------------------------\nEDIT     C.......A   Copy line with 'C' after line marked with 'A'.\n         CB......A   Copy line marked with 'CB' until last line after line 'A'.\n         CC..CC..A   Copy block of lines between 'CC' after line 'A'.\n         CC..CC..BB  Copy block of lines after the last line.\n         CC..CC..TT  Copy block of lines before the first line.\n         CT......A   Copy first line until line with 'CT' after line 'A'.\n         D           Delete line marked with 'D'.\n         DB          Delete line marked with 'DB' until last line.\n         DD......DD  Delete block of lines between 'DD'.\n         DT          Delete from first line until line marked with 'DT'.\n         LC          Xlate upper- to lowercase in line marked with 'LC'.\n         LCB         Xlate line marked with 'LCB' until last line.\n         LCC....LCC  Xlate block of lines to lowercase between 'LCC'.\n         LCT         Xlate from first line until line marked with 'LCT'.\n         M.......A   Move line with 'M' after line marked with 'A'.\n         MB......A   Move line marked with 'MB' until last line after line 'A'.\n         MM..MM..A   Move block of lines between 'MM' after line 'A'.\n         MM..MM..BB  Move block of lines after the last line.\n         MM..MM..TT  Move block of lines before the first line.\n         MT......A   Move first line until line with 'MT' after line 'A'\n         Rnn         Repeat this line nn times\n         RESET       Reset pending line-commands.\n         RR......RR  Repeat lines between 'rr' after itself.\n         UC          Xlate lower- to uppercase in line marked with 'UC'.\n         UCB         Xlate line marked with 'UCB' until last line.\n         UCC....UCC  Xlate block of lines to uppercase between 'UCC'.\n         UCT         Xlate from first line until line marked with 'UCT'.\n         Inn         Insert nn lines after this line.\n./ ADD NAME=RPFHELP3 0104-01045-19106-1237-00034-00027-00000-Z531415 00\nModule:  RC:  Description:\n-------- ---- -----------------------------------------------------------------\nRPFEDIT  0302 too many characters received            (Contact RPF builders)\n         0303 overflow during skip                    (Contact RPF builders)\n         0304 more than 21 -> 59 lines received       (Contact RPF builders)\n         0305 Overflow in DELETE and INSERT           (Contact RPF builders)\n\nEDIT and Utility entry panel and foreground assembler\n         0004 dataset not catalogued\n         0008 dataset not on volume\n         0012 allocation error\n         0016 unallocation error\n         0020 RECFM not F or FB\n         0024 member specified for sequential dataset\n         0028 DSORG not PS or PO\n         0032 member not found\n\nRPFPDS   0401 illegal use of EOF-key or DEL-key\n\nRPFLIB   0501 illegal use of EOF-key or DEL-key\n\nRPFINIT  0004 allocation SYS1.PARMLIB failed (Contact RPF-builders)\n         0008 member RPFKEY00 not in SYS1.PARMLIB\n         0012 allocation error RPF database\n         0016 database could not be opened\n         0020 write error on RPF database (Contact RPF-builders)\n         0024 unable to allocate dataset for RPFPDS edit function or\n              RPFLIB browse, print and edit function.\n\nRPFDEF   0004 allocation Profile database failed (Contact RPF-builders)\n         0008 database could not be opened (Contact RPF-builders)\n         0012 record not found on database (Contact RPF-builders)\n         0016 write error on database (Contact RPF-builders)\n         0020 database not used due to iniitalization error (See RC RPFINIT)\n./ ADD NAME=RPFHELP4 0124-01045-19106-1153-00169-00126-00000-Z531415 00\nMessage:                                 Action:\n---------------------------------------  -------------------------------------\n* xxxxx records cut                   *  EDIT: CUT command executed\n* xxxxx records pasted                *  EDIT: PASTE command executed\n* xxxxx change(s) made                *  EDIT: Function executed\n* xxxxx lines filled                  *  EDIT: FILL command executed\n* xxxxx lines xlated                  *  EDIT: UC or LC command executed\n* xxxxx members copied/moved          *  MVCPY: successful move/copy (DSN(*))\n* xxxxxxxx PENDING                    *  RPF waits for completion linecmds.\n* xxxxxxxx Not Found                  *  RPFASM wrong assembler prog. name\n* Abend xxx detected                  *  MVCPY: Retry if 913 or x37\n* ABEND xxx DETECTED                  *  RPF abended, estae exit entered\n* ABENDxxx in BROWSE                  *  Notify errors to syst.prog.\n* ACB IN USE, RETRY                   *  Function cancelled, retry possible\n* ADDRESS CANNOT BE ALTERED           *  Address not altered\n* ALLOC CODE xxxx ON (X)              *  See: spl job management\n* ALLOC. ERROR SYSOUT                 *  Command aborted, contact syst.prog.\n* ALLOC. ERROR WORKDS                 *  Function aborted, contact syst.progr.\n* ALLOCATION ERROR xxxx ON DATASET    *  Dataset not created (ref. job mngmnt)\n* Authorization failed                *  SAVE, retry menu displ. after ABEND913\n* BLK NOT MULT. OF LRECL              *  Alloc: not allowed with RECFM=F\n* BLKSIZE < 18                        *  Alloc: increase BLKSIZE\n* BLKSIZE > 32767                     *  Alloc: decrease BLKSIZE\n* Conflicting DCB Parms               *  MVCPY: Retry menu displayed\n* Change values accepted              *  Function executed\n* CHARS ssssssssss FOUND              *  Successful F (find) subcommand\n* COL xxx LINE xx.xxx.xxx             *  BROWSE: notify of column and line\n* COMMAND NAME SYNTX ERR              *  TSO command ignored\n* COMMAND NOT SUPPORTED               *  TSO command ignored\n* CONFLICTING COMMANDS                *  EDIT: Line commands reset.\n* CONFLICTING LINE CMDS               *  EDIT: Line commands reset.\n* COPIES INVALID                      *  Command aborted\n* COPIES NOT NUMERIC                  *  Command aborted\n* COPY TERMINATED                     *  Command ignored\n* CVOL POINTER xxxxxxxx NOT FOUND     *  Dataset not created\n* DATASET    PARTITIONED              *  PDS maintenance aborted\n* DATASET ALREADY EXISTS              *  Dataset not created\n* DATASET DELETED                     *  Function executed\n* DATASET NOT IN CATALOG              *  Function ignored\n* DATASET NOT ON VOLUME               *  Function ignored, retry possible\n* DATASET/MEMBER IN USE               *  EDIT canceled\n* DELETE failed                       *  Command ignored\n* DELETE or EOF key used              *  Move/Copy or PDS: command ignored\n* DELETE rejected                     *  Delete not confirmed\n* DS (.) SAME AS DS (1)               *  ASM, library name rejected\n* DYNALLOC ERROR SYSLIB               *  Function aborted, contact syst.progr.\n* ENTER LOCATE STRING                 *  Libmaint: waiting        ('L' cmd)\n* ENTER SAVE or CANCEL                *  EDIT: END cmd given with AUTOSAVE=N\n* EOF OR DEL KEY USED                 *  PFK: all input ignored\n* ERROR IN READ, CODE=x               *  LIBRARIAN read error, reason is 'x'\n* ERROR READ CODE=PV...               *  PANVALET error see manual\n* ERROR: REENTER INPUT                *  PDS: Screen refreshed\n* For future use                      *  Selection ignored\n* FREEMAIN error, sign off            *  RPF execution impossible\n* FROM and TO are the same            *  MVCPY: Retry menu displayed\n* FROM/TO data alloc error            *  MVCPY: Retry menu displayed\n* FROM/TO dataset no PO               *  MVCPY: Retry menu displayed\n* FROM/TO dataset not on volume       *  MVCPY: Retry menu displayed\n* GETMAIN error, retry                *  GETMAIN not executed\n* HARDCOPY FAILED xxxx                *  Function cancelled, see VTAM manual\n* HARDCOPY made                       *  Function completed\n* IEBCOPY error                       *  MVCPY: IEBCOPY RC > 0\n* Input terminated                    *  Input mode exited\n* Invalid address specified           *  Address not altered\n* Invalid BLKSIZE                     *  Alloc: error screen displayed\n* Invalid char. string                *  EDIT/BROWSE: command ignored\n* Invalid chars xlated                *  EDIT: Translate executed\n* Invalid column number               *  BROWSE: Command ignored\n* Invalid Command                     *  Subcommand ignored\n* Invalid Command name                *  TSO command ignored\n* Invalid copy range specified        *  Command ignored\n* Invalid key pressed                 *  Assembler: key ignored.\n* Invalid LRECL                       *  Alloc: error screen displayed\n* Invalid OPTION                      *  Function ignored\n* Invalid PARM                        *  VTOC ignored\n* Invalid PASSWORD                    *  After 3 tries: exit forced\n* Invalid PRINTER                     *  Function cancelled\n* Invalid RECFM                       *  Alloc: error screen displayed\n* Invalid record length               *  EDIT/SAVE ignored LRECL > 255\n* Invalid scroll value                *  Scroll set ignored\n* Invalid SET command                 *  Command ignored\n* Invalid workspace size              *  Ws-size not changed\n* JOB xxxxxxxx SUBMITTED              *  Command executed, jobname= xxxxxxxx\n* LABEL xxxx ASSIGNED                 *  BROWSE: successful LABEL command\n* LABEL xxxx NOT FOUND                *  BROWSE: 'L' command ignored.\n* LANG REQUIRED WITH ADD              *  Specify lang if add requested\n* LIBRARY NOT SPECIFIED               *  Dataset not created\n* LINE NUMBER INVALID                 *  Command ignored\n* LINE-x INVALID                      *  Command ignored\n* LINE-x NOT FOUND                    *  Command ignored\n* LISTING MADE, SYSOUT=x              *  Command executed\n* LRECL input > output                *  Save ignored, retry screen displayed\n* LRECL < 18                          *  Alloc: increase LRECL\n* LRECL > BLKSIZE                     *  Alloc: not allowed\n* LRECL > 32760                       *  Alloc: decrease LRECL\n* LRECL+4 > BLKSIZE                   *  Alloc: not allowed with RECFM=V\n* LRECL>255 not allowed               *  Browse: ignored\n* LU=xxxxxxxx INVALID                 *  Command aborted\n* Member \"TEMPRPF\" restricted         *  Save ignored, retry.\n* Member not found                    *  'S member' ignored in browse\n* Module not in Master                *  Function ignored\n* No clipboard file                   *  EDIT: CUT not executed\n* No datasets matched                 *  VTOC: No dataset with this lvl found\n* No FROM/TO dataset                  *  MVCPY: Retry menu displayed\n* No JCL dataset                      *  BROWSE: submit cmd ignored\n* Not sorted on member                *  PDS: 'S member' ignored\n* No HELP dataset                     *  HELP, no RPF Help dd or no HELP stm\n* NO JOB STATEMENT FOUND              *  EDIT: submit cmd ignored\n* NO MEMBER RPFHELP.(1,2,3,4,5)       *  HELP, function ignored\n* No members in FROM ds               *  MVCPY: Input PDS is empty\n* NO MEMBERS QUEUED                   *  PDS: No member queued via 'X' linecmd\n* NO NODE OR NICKNAME                 *  PDS: Required parm missing in XMIT cmd\n* No storage available                *  BROWSE: unable to execute\n* No workspace available              *  Select 0 to specify workspace\n* NOT A PANVALET LIBRARY              *  EDIT from PANVALET ignored\n* NOT VALID IN COB MODE               *  Command ignored\n* NOTHING LOADED, FILE EMPTY          *  Function aborted\n* NOTHING TO RETRIEVE                 *  EDIT: command buffer empty\n* NULLS NOT YES OR NO                 *  RPF asks for correction\n* Open error, code=x                  *  LIBRARIAN open error, reason is 'x'\n* Open of dataset failed              *  PDS maintenance aborted\n* PASTE buffer to large               *  EDIT: PASTE not executed\n* PFK definition invalid              *  PFK ignored\n* PFK not defined                     *  PFK ignored\n* PFK's reset                         *  Function executed\n* POINTER NOT SPECIFIED               *  Command ignored\n* PREFIX not specified                *  Dataset not created\n* PRI, SEC OR DIR NOT NUMERIC         *  Dataset not created\n* PRINTER IN USE, RETRY               *  Function cancelled, retry possible\n* Replace not YES or NO               *  DEFAULT: screen not exited\n* Replace not YES or NO               *  MVCPY: Retry menu displayed\n* RENUMBER ? Y/N                      *  RPF waits for reply 'y' or 'n'\n* RPF TSO: Abended completion code=xxx*  TSO interface recovered\n* RPF TSO: Attach for processor failed*  TSO command ignored,contact sys.prog.\n* RPF TSO: Command not found          *  TSO command could not be located\n* RPF TSO: Command abended cc= xxx    *  Check errors in that TSO command\n* RPF TSO: Interupt received          *  ATTN key pressed, all input ignored\n* RPF TSO: Ready                      *  TSO command executed\n* RPFUSER1 NOT FOUND                  *  Function ignored\n* Severe error RPFLISTC               *  VTOC: Contact RPF developer\n* Scope range invalid                 *  Command ignored\n* Scope too small                     *  Command ignored\n* SCRATCH error dataset               *  Dataset not scratched\n* Scroll had no effect                *  SCB, SCF, SCL, SCR ignored\n* SET COMMAND ACCEPTED                *  Command executed\n* SPACE UNIT NOT CYL OR TRK           *  Dataset not created\n* Specify Masterfile                  *  RPF waits for indicated action\n* SPECIFY PGMR AND DESC               *  Specify both parms or none\n* SUBMIT not TSO or RPF               *  Defaults: wrong value entered\n* SUBMIT FAILED                       *  Command aborted, contact syst.progr.\n* SYSOUT CLASS INVALID                *  Sysout class ignored\n* Text not found                      *  Command ignored\n* TRUNC TO xxxxx ENTRIES              *  First xxxxx entries in workspace\n* Use CUT before PASTE                *  EDIT: PASTE not executed\n* UNACCEPTABLE FORMAT                 *  EDIT canceled\n* UNCATALOG ERROR DATASET             *  Function ignored\n* UNCATLG ERROR DATASET               *  Dataset not deleted\n* Unexpected return code              *  Unpredictable, contact syst.progr.\n* UPD. SIZE DESTOYS WS                *  Current workspace no longer available\n* USE 'SAVE FORCE'                    *  EDIT: Command not executed.\n* USERID NOT IN TABLE                 *  Function executed\n* Volume not available                *  VTOC: Function ignored\n* Volume not specified                *  VTOC ignored\n* VTAM CB ERROR                       *  Function cancelled\n* Workspace empty                     *  Selected function ignored\n* Workspace not freec                 *  FREEMAIN error, contact syst.progr.\n* Workspace not numbered              *  Command ignored\n* Workspace too small                 *  Function aborted\n* Workspace truncated                 *  Last lines are lost, continue (Y/N) ?\n./ ADD NAME=RPFHELP5 8099-03037-19107-1136-00323-00146-00000-Z531415 00\nDate:    Module:  Description:\n-------- -------- ------------------------------------------------------\n01/01/85 RPF      No latest improvements since MVS/XA\n                  RPF/XA is available with more improvements if\n                  MVS/XA (rel. 2.1.7 or 2.2.0) is available\n05/03/01 RPFEDIT  LC and UC primary commands added\n                  UC, UCB, UCT, LC, LCB, LCT line commands added\n                  1 more line on screen\n         RPFPDS   1 more line on screen\n         RPFDEF   Option NULLS added\n06/03/01 RPFFIND  End delimiter in F and O can be omitted\n         RPFEDIT  COPY command added\n         RPFPDS   'S' (show) before the member-name replaced by 'B'\n                  (BROWSE)\n                  Primary commands SORT TTR, SORT CHA and SORT SIZE adde\n08/03/01 RPFDATAL Option 2 (EDIT), member selection list displayed\n                  if no member selected in allocation menu.\n         RPFDATAU Option 1 (BROWSE), member selection list displayed\n                  if no member selected in allocation menu.\n12/03/01 RPFBRO   New browse module, replaces RPFASM2\n                  Press PFK1 for HELP concerning browse\n15/03/01 RPFOUT   RPFBRO invoked in the output processor\n23/03/01 RPFASM   New screen, 6 maclibs, 1 incl. lib + 6 control\n                  statements\n         RPFDEF   Maclibs, assember + lked parms and control\n                  statements save upon RPF profile cluster\n         RPFINIT  Recordsize of RPF profile ds increased from 1000\n                  to 1750\n         release  Release 1.3 available\n11/04/01 RPFDATAU Module deleted. Functions moved to RPFDATAL\n         RPFDATAL Dataset selection list implemented.\n                  Module will also be used for utility functions\n                  This list is a history of the last edited datasets\n                  and will be written in the RPF database if RPF exits.\n16/04/01 RPFFIND  Find string matches if string is the same and can be\n                  entered in mixed case\n         RPFPDS   Bug fixed if EDIT invoked and COPY command given\n         RPFMAIN  SMF system id in main menu\n23/04/01 RPFEDIT  Save the data in the same dataset/member if the END\n                  subcommand has been given. Save only if the data\n                  has been changed (the ISPF way)\n                  CANCEL command added, with alias CAN to exit EDIT\n                  without saving the data.\n28/04/01 RPFLIB   LIBRARIAN tape master files supported\n17/05/01 RPFBRO   SUB(MIT) command added in Browse\n         release  V1R4M0 available\n07/06/01 RPFPDS   SORT (without operand) command added\n                  'S member' command added to edit/browse a member\n                  Return to allocation menu after END command\n         RPFBRO   Return to allocation menu after END command\n         RPFEDIT  Return to EDIT entry menu after END command\n         release  V1R4M1 available\n11/06/01 RPFEDIT  Editing non-printables will not destroy the workspace\n                  anymore. Only changed characters will be replaced\n13/06/01 RPFALLOC Unit type in screen\n27/06/01 RPFEDIT  Inserted lines will be highlighted on screen\n                  If data is entered in an inserted line, the\n                  highlighting will be removed from that line\n                  Highlighted lines will not be saved or submitted\n                  Further improvements in the COPY subcommand\n30/06/01 RPFSTAT  New screen\n01/07/01 RPFPDS   The 'M' supported in the cmd field to scroll max.\n         release  V1R4M2 available\n02/04/02 RPFSAVE  Preserve saved userdata from other programs\n28/06/02 RPFINIT  Initialize Assembler maclibs and control statements\n                  correctly\n28/06/02 RPFCHNG  Correct 'C' command if new string is longer.\n03/07/02 RPFDEF   Increase maximum # lines from 29,999 to 59,999.\n07/07/02 RPFVTOC  Trks/Cyl, Track length and Cyls/volume displayed.\n10/07/02 RPFOUT   PF3/PF15 supported\n11/07/02 RPFPDS   Leading zeroes removed from number of lines\n17/07/02 RPF      '=' subcommand added in PDS, EDIT and Browse\n31/07/02 RPFMAIN  TSO logon proc in screen\n01/08/02 RPFEDIT  Preserve empty workspace if all lines are deleted\n06/08/02 RPFEDIT  Allow editing empty datasets\n         RPFALLOC RECFM, LRECL and BLKSIZE in screen\n         RPFTSO   Command check routine bypassed, all cmds are allowed\n         release  V1R4M3 available\n06/09/02 RPFEDIT  Positioning problems in DEL subcommand resolved\n         RPFBRO   Browse Variable records possible\n         RPFVTOC  Option -1- Dataset selection list added\n                  This is the default option\n                  VTOC listing in EDIT moved to option 2\n         RPFVTOC1 New module to process selection list\n                  In the dataset selection list, the datasets\n                  can be viewed, edited, a member selection list\n                  can be made and can be deleted\n15/09/02 RPFVTOC  Option V (VTOC summary) added\n                  After completion the VTOC menu will re-displayed\n20/09/02 RPFALLOC Option 2 added to delete a dataset\n         RPFDEL   Module deleted, functions moved to RPFALLOC\n         RPFUTIL  Create/Delete datasets moved to option 2\n                  PDS maintenance moved to option 1\n                  VTOC functions moved to option 4\n21/09/02 RPFVTOC1 Line commands \"C\" (Catalog) and \"U\" (Uncatalog) added\n23/09/02 RPFVTOC1 Line command \"Z\" (Compress) added\n29/09/02 RPFMAIN  Version and release in line-1\n01/10/02 RPFEDIT  Command RETRIEVE added to get previous commands\n                  The last 100 commands are saved for RETRIEVE.\n         RPFINIT  RETRIEVE command set in default PFK12/PFK24\n04/10/02 RPFINIT  RETRIEVE buffer read from database\n         RPFEND   RETRIEVE buffer written to database\n09/10/02 RPFVTOC1 Line command 'I' (Dataset Information) added\n11/10/02 RPFCNVDT New module to convert Julian date to Gregorian\n         RPFMAIN  Calendar added in MAIN menu\n12/10/02 RPFVTOC1 Dates in Info screen converted to gregorian\n14/10/02 RPFPDS   Update date of member converted to gregorian\n16/10/02 RPFMAIN  Logo in MAIN menu\n         RPFBRO   Prevent browsing datasets with LRECL > 255\n                  SCL and SCR commands added\n20/10/02 RPFOUT   Status area increased from 8 to 16 jobs\n         RPFINIT  AUTOSAVE read from profile database\n         RPFDEF   AUTOSAVE parm added in option 1\n         RPFEDIT  AUTOSAVE parm checked if END command given\n25/10/02 RPFVTOC1 Line command 'R' (Rename) added\n27/10/02 RPFEDIT  Subcommand 'n' added along with SCF or SCB PFkey\n                  (The ISPF way to scroll)\n01/11/02 RPFVTOC  Dataset name level added, so it is possible to\n                  make a dataset list from the catalog or VTOC\n         RPFLISTC New module to obtain datasets from the catalog\n         RPFMAIN  Display the splash logo only initially\n         RPFALLOC Check of alias deleted\n         RPFUTIL  Option 7, call Greg Price's IMON if present\n07/11/02 RPFMAIN  7 color support in screen\n         RPFPDS   7 color support in screen\n         RPFVTOC1 7 color support in screen\n10/11/02 RPFDATAL 7 color support in screen\n         RPFVTOC  7 color support in screen\n         RPFBRO   7 color support in screen\n13/11/02 RPFVTOC  Level dataset list increased from 8 to 17 bytes\n                  Masking dataset levels supported from catalog\n         RPFASM   7 color support in screen\n         RPFUTIL  7 color support in screen\n         release  Version 1, release 5.0 available\n17/11/02 RPFDATAL First dataset in list could not be selected, corrected\n         RPFBRO   Less storage needed if LRECL < 255 and maximum\n                  number of screen pages increased to 2048\n27/11/02 RPFSAVE  7 color support in screen\n03/12/02 RPFALLOC 7 color support in screen\n07/12/02 RPFOUT   Status area increased to 22 jobs and 7 color support\n08/12/02 RPFHELP  7 color support in screen\n14/12/02 RPFOUT   Status area problems solved and test return indicator\n                  after browse/view output\n01/02/03 RPFMAIN  Error in calendar of february resolved\n06/02/03 RPFBRO   Error resolved if FBA or FBM dataset has a\n                  LRECL < scrsize\n07/02/03 RPFEDIT  Only the changed lines will be processed to reduce\n                  the input buffer length\n14/02/03 RPFTSO   =n or =n.n command (fast jump) supported\n                  7 color support in screen\n15/02/03 RPFUTIL  =n or =n.n command (fast jump) supported\n         RPFHELP  =n or =n.n command (fast jump) supported\n         release  Version 1, release 5.1 available\n09/03/03 RPFLIB   7 color support in screen, date/time added or\n                  updated of LIBRARIAN modules added and =n/=n.n\n                  command added\n29/07/03 RPFEDIT  End of data line added in the screen\n                  Fields after last record protected (thepaw2003)\n         RPFVTOC1 Fields after last entry protected (thepaw2003)\n         RPFPDS   Fields after last entry protected (thepaw2003)\n07/12/03 RPFEDIT  CUT and PASTE subcommands added\n16/12/03 RPFINIT  SUBMIT parameter read from profile database\n         RPFDEF   SUBMIT parm added in option 1\n                  7 color support in some screens\n         RPFSUB   Job submitted with TSO Submit cmd if SUBMIT=TSO\n04/01/04 RPFEDIT  Abend 0C4 solved if workspace is truncated\n10/01/04 RPFUTIL  Option 3 (Move/Copy members) added\n         RPFMVCPY New module to process Copy en Move members\n24/01/04 RPFINIT  Option REPLACE read from profile database\n         RPFDEF   Option REPLACE added in option 1\n         RPFMVCPY Replace Like members YES/NO in screen\n                  Reject Move/Copy if From an To are the same\n28/01/04 RPFMVCPY DSN(*) Copies/moves all members\n30/01/04 RPFMAIN  Calendar refreshed before new display of MAIN menu\n         RPFMVCPY Command 'SORT CHA' added\n         release  Version 1, release 5.2 available\n04/04/04 RPFSUB   Clear screen before TSO SUBMIT with model 5 screen\n         RPFTSO   Clear screen before TSO command with model 5 screen\n04/05/04 RPFMVCPY Give msg 'Replaced' if member in TO dataset exists\n                  Invalid BLKSIZE problem solved at second MOVE\n24/05/04 RPFFIND  Format of the F and O command changed in the ISPF way\n23/06/04 RPFPDS   Allow Erase EOF and DEL key in command field\n21/12/04 RPFASM   Increase space workds to prevent x37 abends\n08/02/05 RPFEDIT  Allow command \"FIND\" along with \"F\"\n                  Do not set change flag if \"C\" command ends errornous\n         RPFOUT   Limit number of lines output to prevent x37 abends\n         RPFCHNG  line-1/2 error solved if cmd fills up complete buffer\n12/02/05 RPFEDIT  Allow TOP and BOTTOM commands along with line commands\n16/03/06 RPFEDIT  Some 3270 emulators did not display end of the data\n                  correctly. This is corrected.\n19/03/06 RPFINIT  Default dataset prefix read from profile database\n         RPFDEF   Default prefix added in option 1\n         RPFVTOC  The default prefix from database will be used\n21/03/06 RPFINIT  Default Assembler program name read from database\n         RPFDEF   Default Assembler program added in option 1\n         RPFASM   Default Assembler program name used\n                  Assembler output from P/T/N changed into Y/N\n29/09/06 RPFEDIT  Loop solved if number entered with pfk other than 7/8\n29/08/08 RPFEDIT  Loop solved with CUT command along with MM cmds\n01/09/08 RPFEDIT  The line commands can be entered in any place of\n                  the line-number field\n03/01/19 RPF      RPF made suitable for MVS/380, MVS/XA, MVS/ESA,\n                  OS/390 and z/OS with special thanks to Paul Edwards.\n                  RPF will be shipped in 31 bit mode, but 64 bit mode\n                  will be supported.\n                  The minimum Edit workspace = 500 lines.\n                  Maximum Edit workspace = 2.000.000 lines.\n                  RPFFILL, RPFSUB and RPFPFK are preloaded\n         RPFEDIT  CUT/PASTE pending msg now correct displayed\n         RPFDEF   Bug fixed in workspace allocation\n         RPFMAIN  OS release in main menu screen\n         RPFSTAT  7 color support in screen\n         release  Version 1, release 6.0 available\n11/01/19 RPFVTOC  abend0C4 solved in loading DEB addresses\n         RPFOUT   abend0C4 solved during FREEPOOL\n         RPFSUB   Bug solved if workspace is above 16MB\n         RPFLISTC abend0C4 solved in IDCAMS by LINK VL=1 in z/OS\n         RPFVTOC1 abend0C4 solved in IEBCOPY by LINK VL=1 in z/OS\n         RPFMVCPY abend0C4 solved in IEBCOPY by LINK VL=1 in z/OS\n-----------------------------------------------------------------------\n19/01/19 RPFPDS   Code optimized\n         RPFMAIN  Product code of OS in mainmenu if CVTPRODN <> x'00'\n                  Otherwise CVTRELNO in main menu\n21/01/19 RPFFILL  FILL, UC and LC command counter corrected\n26/01/19 RPFEDIT  R and I linecmds not in column 1 entered gives\n                  unpredictable results. Corrected\n         RPFBRO   Code optimized\n28/01/19 RPFBRO   HEX ON and HEX OFF commands added\n                  In Hex mode 4 lines will be displayed:\n                  1) The original line, 2) A hex line containing\n                  the high order nibbles. 3) A hex line containing the\n                  lo order nibbles. 4) A separator line.\n31/01/19 RPFVTOC1 Code optimized\n         RPFBRO   FIND command will only find strings in Non HEX lines\n         RPFDEF   Screens optimized for 3270 model 3 and 4.\n         RPFMAIN  Allow option 0,9 and X after ABENDx78 in RPFDEF\n         RPFPDS   Date Created added in member list\n                  P linecmd wrong return code corrected\n         RPFSTAT  Screens optimized for 3270 model 3 and 4.\n01/02/19 RPFPFK   Screen optimized and 7 color support added.\n02/02/19 RPFMVCPY Date Created added in member list\n03/02/19 RPFOPER  Error in multiline display corrected and 4 bytes\n                  Device adresses used to be compatible with\n                  MVS/ESA version 4 and up.\n05/02/19 release  Version 1, release 6.1 available\n-----------------------------------------------------------------------\n13/02/19 RPFPDS   Load module attributes displayed if library is a\n                  LOADLIB\n14/02/19 RPFMVCPY Load module attributes displayed if library is a\n                  LOADLIB\n22/02/19 RPFMAIN  Screen error resolved if \"=5\" or \"=7\" selected\n                  from the EDIT, Browse, Data set list or Member list\n22/02/19 RPFASM   The Binder is recalled Linkage Editor and code\n                  optimized.\n25/02/19 RPFALLOC Option 1 is now option A, option 2 is now option D\n                  and option A is now default upon entry.\n02/03/19 RPFEDIT  Block lines with unprintables for editing\n         RPFINIT  Change default workspace from 4000 to 5000 lines\n03/03/19 RPFEDIT  ABEND0C4 resolved during SUB command in EDIT\n06/03/19 RPFDATAL Very incidental screen error resolved\n10/03/19 RPFMAIN  Prevent scattered screens if non standard screen\n                  sizes are used\n11/03/19 RPFBRO   Prevent scattered screen if non standard screen\n                  sizes are used and support large screens up to\n                  62x160, with special thanks to Greg Price\n11/03/19 release  Version 1, release 6.2 available\n-----------------------------------------------------------------------\n03/04/19 RPFMAIN  Screen sizes up to 62 lines x 160 columns supported\n         RPFUTIL  Screen sizes up to 62 lines x 160 columns supported\n         RPFHELP  Screen sizes up to 62 lines x 160 columns supported\n         RPFDATAL EDIT, Browse and PDS selection list supports\n                  Screen sizes up to 62 lines x 160 columns\n         RPFEDIT  Screen sizes up to 62 lines x 160 columns supported\n                  Delete range of lines > 16MB corrected\n                  Input Convert error resolved if SBA after AID\n                  byte contains X'11'\n         RPFPDS   Screen sizes up to 62 lines x 160 columns supported\n                  Scroll MAX corrected ('m' + PFK7/PFK8)\n         RPFMVCPY Screen sizes up to 62 lines x 160 columns supported\n                  Scroll MAX corrected ('m' + PFK7/PFK8)\n         RPFVTOC1 Screen sizes up to 62 lines x 160 columns supported\n         RPFTSO   Screen sizes up to 62 lines x 160 columns supported\n         RPFVTOC  VTOC selection list supports up to screens\n                  with a dimension of 62 lines x 160 columns\n         RPFALLOC Data set selection list supports up to screens\n                  with a dimension of 62 lines x 160 columns\n         RPFSAVE  Data set selection list supports up to screens\n                  with a dimension of 62 lines x 160 columns\n         RPFASM   Assembler and Linkage editor screen supports up to\n                  screens with a dimension of 62 lines x 160 columns\n         RPFPFK   PFK screen supports screen sizes up to 62 x 160\n         RPFSTAT  PFK screen supports screen sizes up to 62 x 160\n         RPFDEF   Menu supports screen sizes up to 62 x 160, option 1,2,4\n                  supports 3270 model 2, 3 or 4 only.\n         RPFOUT   Output screen supports screen sizes up to 62 x 160\n         Release  Version 1, release 7.0 available\n-----------------------------------------------------------------------\n30/04/19 RPFDEF   All panels supports screen sizes up to\n                  62 lines x 160 columns.\n         RPFEDIT  Supports now records lengths from 40 to 255\n                  and RECFM = F(B) and RECFM = V(B) are supported\n                  The Scope command in EDIT covers now the data\n                  visible on the screen or the complete record if\n                  the second operand = LRECL size or 999.\n                  Numbered data and COBOL data are restricted to\n                  a record length of 80.\n                  Modules affected:\n                   1. RPFMAIN\n                   2. RPFCHNG\n                   3. RPFDAIR\n                   4. RPFDATAL\n                   5. RPFEDIT\n                   6. RPFEDITL\n                   7. RPFFILL\n                   8. RPFFIND\n                   9. RPFHCPY\n                  10. RPFLIB\n                  11. RPFLIB00\n                  12. RPFPDS\n                  13. RPFSAVE\n                  14. RPFSUB\n                  15. RPFVTOC1\n         Release  Version 1, release 7.1 available\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RXJCL": {"ttr": 13834, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x06\\x01\\x07\\x07O\\x01\\x07\\x07O\\x154\\x01\\\\\\x01\\\\\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf7\\xf5\\xf6@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2007-03-15T00:00:00", "modifydate": "2007-03-15T15:34:06", "lines": 348, "newlines": 348, "modlines": 0, "user": "FILE756"}, "text": "\nRXJCL - A JCL Rexx facility\n\n\nQuick Reference\nWritten by Daniel Gaeta\ndfgaeta@br.ibm.com\n\n\n\nWhat is this ?\n\nRXJCL is a tool created to improve repetitive process written.\nThe JCL preprocessor expands macro sentences in //* JCL cards.\n\n\nFor example :\n-------------\n\n   File  Edit  Edit_Settings  Menu  Utilities  Compilers  Test  Help\n sssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss\n EDIT       USBUILD.DFG.EXEC($GSDSMP7) - 01.02              Columns 00001 00072\n Command ===>                                                  Scroll ===> CSR\n ****** ***************************** Top of Data ******************************\n ==MSG> -Warning- The UNDO command is not available until you change\n ==MSG>           your edit profile using the command RECOVERY ON.\n 000001 //ERRORRPT JOB (ACCOUNTNBR),NAME,REGION=5M,MSGCLASS=H,NOTIFY=&SYSUID\n 000002 //SMP       EXEC PGM=GIMSMP,REGION=70M\n 000003 //SMPCSI    DD DSN=WWP115.GSD2006B.GLOBAL.CSI,DISP=SHR\n 000004 //SMPCNTL   DD *\n 000005   SET BDY(GLOBAL) .\n 000006 //*   %%SCAN SEQ USBUILD.DFG.EXEC(MYPRODS) LSTPROD\n 000007 //*   %%SET IDX=1\n 000008 //*   %%REPEAT LSTPROD.0\n 000009 //*    %%SET PRDCODE=STRIP(SUBSTR(LSTPROD.IDX,1,72))||'T'\n 000010   REPORT ERRSYSMODS\n 000011   ZONES(%%(PRDCODE)).\n 000012 //*    %%INC IDX\n 000013 //*   %%EREPEAT\n 000014 /*\n ****** **************************** Bottom of Data ****************************\n\n- all cards //* %%statement will be preprocessed before submit to JES\n\n- all cards, except //* will be written to JES without preprocess\n\n\nThe result after RXJCL is :\n\n  File  Edit  Edit_Settings  Menu  Utilities  Compilers  Test  Help\nsssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss\nEDIT       SYS06345.T165125.RA000.DFGAETA.R0156474         Columns 00001 00072\nCommand ===>                                                  Scroll ===> CSR\n****** ***************************** Top of Data ******************************\n==MSG> -Warning- The UNDO command is not available until you change\n==MSG>           your edit profile using the command RECOVERY ON.\n000001 //ERRORRPT JOB (ACCOUNTNBR),NAME,REGION=5M,MSGCLASS=H,NOTIFY=&SYSUID\n000002 //SMP       EXEC PGM=GIMSMP,REGION=70M\n000003 //SMPCSI    DD DSN=WWP115.GSD2006B.GLOBAL.CSI,DISP=SHR\n000004 //SMPCNTL   DD *\n000005   SET BDY(GLOBAL) .\n000006   REPORT ERRSYSMODS\n000007   ZONES(BPA210T).\n000008   REPORT ERRSYSMODS\n000009   ZONES(CML830T).\n000010   REPORT ERRSYSMODS\n000011   ZONES(CMR830T).\n000012   REPORT ERRSYSMODS\n000013   ZONES(DAE210T).\n000014   REPORT ERRSYSMODS\n000015   ZONES(DAO710T).\n000016   REPORT ERRSYSMODS\n\n\nA complex sample :\n------------------\n\nThis sample is a sentence that will generate a report grouping by\nproducts list in USBUILD.DFG.EXEC(MYPRODS) and\nlisting datasets by WWP115.GSD2006B.<prod>.*\n\n\n//*   %%OUT LST\n//*   %%SCAN SEQ USBUILD.DFG.EXEC(MYPRODS) LSTPROD\n//*   %%SET IDX=1\n//*   %%REPEAT LSTPROD.0\n//*    %%SET PRDCODE=STRIP(SUBSTR(LSTPROD.IDX,1,72))\n\n  PRODUCT : %%(PRDCODE)\n  ------------------\n//*    %%SET GSDNAME='WWP115.GSD2006B.'||PRDCODE\n//*    %%SCAN DSN %%GSDNAME DSNAME\n//*    %%SET IDX2=1\n//*    %%REPEAT DSNAME.0\n//*     %%SET DSN=DSNAME.IDX2\n       %%(DSN)\n//*     %%INC IDX2\n//*    %%EREPEAT\n//*    %%INC IDX\n//*   %%EREPEAT\n\n\nOther samples can be found in USBUILD.DFG.EXEC.\n\n\nHow can I run RXJCL :\n\nRXJCL is located in USBUILD.DFG.EXEC\nTo prepare the environ use RECONCAT command or run USBUILD.DFG.EXEC(#CONCAT).\n\nAfter #CONCAT step you can run RXJCL as follow :\n\n   Menu  Functions  Confirm  Utilities  Help\n ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss\n EDIT              USBUILD.DFG.EXEC                          Row 00001 of 00012\n Command ===>                                                  Scroll ===> CSR\n            Name     Prompt       Size   Created          Changed          ID\n _________ $GSDSMP1                 11  2006/11/14  2006/11/14 08:36:02  DFGAETA\n _________ $GSDSMP2                 18  2006/11/14  2006/11/14 10:54:47  DFGAETA\n _________ $GSDSMP3                  8  2006/11/14  2006/11/14 08:42:46  DFGAETA\n _________ $GSDSMP4                 12  2006/11/14  2006/11/14 10:10:02  DFGAETA\n _________ $GSDSMP5                  9  2006/11/14  2006/11/14 10:22:29  DFGAETA\n _________ $GSDSMP6                 11  2006/11/14  2006/11/14 10:37:45  DFGAETA\n rxjcl____ $GSDSMP7                 14  2006/12/11  2006/12/11 16:47:21  DFGAETA\n _________ #CONCAT                   3  2006/12/11  2006/12/11 16:30:40  DFGAETA\n _________ IEBCIN1                   2  2006/12/05  2006/12/05 07:25:09  HOSHIKA\n _________ IEBCOPY1                 18  2006/12/05  2006/12/11 16:33:50  DFGAETA\n _________ MYPRODS                  35  2006/12/11  2006/12/11 16:33:25  DFGAETA\n _________ RXJCL                   790  2006/11/13  2006/12/11 16:32:00  DFGAETA\n           **End**\n\n\n\n\nQuick Reference for RXJCL :\n\n\n- //*   %%OUT <LST|rdr>\n\n  This macro sends the JCL expanded to ISPF Edit or JES reader.\n  Default is LST.\n\n\n- //*   %%INFODSN <dataset>\n\n  This macro retrieves information about datasets (equivalent to\nREXX LISTDSI function).\n\n\n- //*   %%MODE STACK <ON|off>\n\n  This macro sends the content of object retrieved to STACK or record area.\n\n- //*   %%SAVE <%%var|dataset>\n\n  This macro saves the JCL output area to dataset or %%var value.\n  The %%SAVE macro is used to save output JCL preprocessed to many\ndifferent outputs.\n\n- //*   %%TSO <tsocommand>\n\n  This macro just executes TSO commands (equivalent to REXX ADDRESS TSO)\n\n- //*   %%EDIT <%%var|dataset>\n\n  This macro invokes EDIT ISPF service to edit datasets.\n\n- //*   %%BROWSE <%%var|dataset>\n\n  This macro invokes BROWSE ISPF service to edit datasets.\n\n- //*   %%TRIM <rexxvar>\n\n  This macro removes spaces from both sides of string.\n\n- //*   %%RX  <statemant>\n\n  This macro interprets REXX statement (equivalent to REXX INTERPRET statement)\n\n- //*   %%ISPF <statemant>\n\n  This macro interprets ISPF statement (equivalent to REXX ADDRESS ISPEXEC)\n\n- //*   %%DROP <rexxvar>\n\n  This macro deletes rexx variable of REXX Variable Global Pool.\n\n- //*   %%INC <rexxvar>\n\n  This macro increments in one numeric REXX variable. (equivalent to C\ninstruction var++)\n\n- //*   %%DEC <rexxvar>\n\n  This macro decrements in one numeric REXX variable. (equivalent to C\ninstruction var--)\n\n- //*   %%GET <rexxvar>\n\n  This macro pulls item of STACK area. (equivalent to REXX PULL statement)\n\n- //*   %%PUT <rexxvar>\n\n  This macro pushes item into STACK area. (equivalent to REXX QUEUE statement)\n\n- //*   %%PRINT <expression>\n\n  This macro writes expression to SYSPRINT file. (equivalent to REXX SAY\nstatement)\n\n- //*   %%SUB\n\n  This macro submits JCL expanded until the moment and clear data of\nJCL buffer to new cycle.\n  The %%SUB macro is used when we need to submit many JCL in the same process.\n\n- //*   %%SET <expression>\n\n  This macro evaluates REXX expression.\n  The %%SET macro can use any REXX expression including REXX functions\nand boolean expressions.\n\n  For example :\n    //*   %%SET  A=1\n    //*   %%SET  DS='USBUILD.GSD.CNTL'\n    //*   %%SET  ALIAS=SUBSTR(DS,1,7)\n\n\n- //*   %%IF  <expression>\n    jcl cards or RXJCL macro\n  //* < %%ELSE >\n    jcl cards or RXJCL macro\n  //*   %%ENDIF\n\nThis is a simple IF..ELSE..ENDIF sentence. (just one level of IF..ELSE..ENDIF ca\nbe used)\n\n- //*   %%SCAN DSN <%%var|dataset> <rexxvar>\n  //*   %%SCAN LIB <%%var|dataset> <rexxvar>\n  //*   %%SCAN SEQ <%%var|dataset> <rexxvar>\n\nThis macro reads a DSN, LIB or SEQ object from begin to end, putting data to STA\narea or array variable REXX.\nWhen we use array variable REXX the length of array will be put into rexxvar.0 i\nand each record readed will be put\ninto subsequent element.\nIf %%MODE STACK ON is selected all records will be put into STACK area and the n\nof elements readed can be retrieved\nusing QUEUED() Rexx function or rexxvar.0 element.\n\n\n- //*   %%REPEAT <rexxvar|literal>\n     jcl cards or RXJCL macro\n  //*   %%EREPEAT\n\n  This macro is a simple repetition flow. (equivalent to REXX DO..LOOP times)\n  The block between %%REPEAT and %%EREPEAT will be executed the number of times\ncontained in numeric rexxvar\n  or numeric literal.\n\n  For example :\n\n  //*  %%SET TT=3\n  //*  %%REPEAT TT\n  //*    %%PRINT 'REPEATING STRING...'\n  //*  %%EREPEAT\n\n  or\n\n  //*  %%REPEAT 3\n  //*    %%PRINT 'REPEATING STRING...'\n  //*  %%EREPEAT\n\n\n- //* %%BEGMAP mapname\n  //* %%M <map_line_definition>\n  //* %%ENDMAP\n  //* %%SHOW mapname\n\n  Theses macros define one or many maps to use in fullscreen panels.\n  The definitions are the same of ISPF panels. The attributes are fixed.\n  The process to create a map is simple, each %%M define a line of panel that\nwill be shown.\n\n  For example :\n\n  //* %%BEGMAP MAPA1\n  //* %%M\n  //* %%M   Dataset =>#dname                                      +\n  //* %%M\n  //* %%ENDMAP\n  //* %%SHOW MAPA1\n     ...\n     ...\n  //INPFILE  DD DISP=SHR,DSN=%%(DNAME)\n     ...\n\n\nMacro Variables :\n\n\n  Macro variable can be used in any JCL card. For example :\n\n\n  //OUTFILE   DD DISP=SHR,DSN=USBUILD.OUTPUT.D%%OSEQ\n  or\n  //FILEMOV   DD DISP=SHR,DSN=USBUILD.OUTPUT.D%%ODAYM%%OMONTH\n\n\n- %%OUSER\n\n  This is a macro-variable that contains userid of current session.\n\n- %%ODAY\n\n  This is a macro-variable that contains system current day.\n\n- %%OMONTH\n\n  This is a macro-variable that contains system current month.\n\n- %%OYEAR\n\n  This is a macro-variable that contains system current year.\n\n- %%ODATE\n\n  This is a macro-variable that contains system current date in format mm/dd/yyy\n\n- %%OSEQ\n\n  This is a macro-variable that contains a sequential number incremented\non each use.\n\n- %%(rexxvar)\n\n  This is a macro-variable that will be changed by data rexx variable.\n\n\n\n\nABOUT THIS DOCUMENT :\n\n  For additional help please contact me by SAMETIME or Notes (DFGAETA@BR.IBM.COM\n\n\n\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "STEPLIB": {"ttr": 14086, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00E\\x01\\x11\\x14?\\x01\\x16\\x12?\\x115\\x00v\\x00v\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf4\\xf5\\xf2@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2011-05-23T00:00:00", "modifydate": "2016-05-02T11:35:45", "lines": 118, "newlines": 118, "modlines": 0, "user": "FILE452"}, "text": "/* *----------------------------------------------------------------* */\n/* *                                                                * */\n/* * To install this command, it must be placed into the LINKLIST,  * */\n/* * and an \"F LLA,REFRESH\" operator command must be issued.        * */\n/* *                                                                * */\n/* * Also, your SYS1.PARMLIB(IKJTSOxx) member must be updated so    * */\n/* * that \"STEPLIB\" is in the AUTHCMD NAMES list.                   * */\n/* * After this member has been updated, a \"PARMLIB UPDATE(xx)\" TSO * */\n/* * command must be issued to reflect the parmlib change.          * */\n/* *                                                                * */\n/* * Note: If a \"REAL\" STEPLIB DD exists within your LOGON PROC,    * */\n/* *       it will NOT be freed, but it will no longer be used.     * */\n/* *                                                                * */\n/* * *************************************                          * */\n/* * *** Special note for BATCH users: ***                          * */\n/* * *************************************                          * */\n/* *       If you use STEPLIB in a BATCH job, please ensure that    * */\n/* *       you issue \"STEPLIB REMOVE\" prior to terminating the      * */\n/* *       step.  Otherwise a small amount of LSQA storage will     * */\n/* *       be orphaned under the INIT's TCB.  This could eventually * */\n/* *       cause storage fragmentation problems.  A $PI operator    * */\n/* *       command will resolve this problem but it would be best   * */\n/* *       to prevent it in the first place.                        * */\n/* *                                                                * */\n/* * If this becomes a MAJOR issue for someone please let me know   * */\n/* * and I will write an IEFACTRT exit routine that will recognize  * */\n/* * that the STEPLIB command has been used and free the TCB        * */\n/* * storage at that time.                                          * */\n/* * As STEPLIB was not written with the intent of being used by    * */\n/* * batch jobs this was not an issue.  It appears that quite a few * */\n/* * sites use the same CLISTs/REXX execs in batch as they do in    * */\n/* * TSO.  When TSO terminates the entire address space is cleaned  * */\n/* * up so this is not an issue.                                    * */\n/* *                                                                * */\n/* *----------------------------------------------------------------* */\n)F FUNCTION -\n     Dynamically manage the STEPLIB.\n\n     Your STEPLIB can be changed at any time, whether you are in ISPF\n     or not.  This command handles all situations.\n\n)X SYN\n     STEPLIB ADD      DATASETS(DSNAME LIST) FIRST|LAST\n     STEPLIB ALLOCATE DATASETS(DSNAME LIST)\n     STEPLIB DESTACK  DATASETS(DSNAME LIST)\n     STEPLIB FREE\n     STEPLIB LIST\n     STEPLIB REMOVE   DATASETS(DSNAME LIST)\n     STEPLIB SAVE\n     STEPLIB STACK    DATASETS(DSNAME LIST)\n     STEPLIB VERSION\n     STEPLIB ...      APFCHK NOMSGS|MSGS\n\nREQUIRED - <function>\nDEFAULTS - ALLOCATE FIRST MSGS\nALIAS    - ALLOCATE / OVERRIDE or REPLACE\n         - DESTACK  / UNSTACK\n         - FREE     / CLOSE\n         - REMOVE   / DELETE\n         - DATASETS / DSNAMES\n         - FIRST    / BEFORE or FRONT\n         - LAST     / AFTER or END\n         - MSGS     / LOUD or VERBOSE\n         - NOMSGS   / QUIET or TERSE\n\nNOTE: The \"SHR\" and \"REUSE\" keywords have been added so that this\n      command looks like an ALLOCATE command, although these keywords\n      are not used.\n      I.E. (STEPLIB DA(MY.LOAD) SHR REUSE)\n\nEXAMPLE:\n     STEPLIB DA(MY.LOAD 'XYZ.YOUR.LOAD')\n\nReturn Codes:\n     If the PARSE process fails this will be the IKJPARS return code.\n\n      4 - Specified Data Set is already in STEPLIB.\n      8 - Data Set allocation failed.\n     12 - APF Check failed.\n     20 - STEPLIB OPEN failed.\n     24 - STEPLIB Data Set OPEN failed.\n\n)O OPERANDS -\n     ADD      - Add a library(s) to the current STEPLIB concatenation.\n                If the library already exists within the STEPLIB, the\n                command will terminate with a return code of 4.\n     ALLOCATE - Build a new STEPLIB allocation list.\n     DESTACK  - Eliminate a single occurance of the library(s) from\n                the STEPLIB concatenation.\n     FREE     - Remove any existing STEPLIB.\n     LIST     - Display the current STEPLIB DDNAME & Dataset names.\n     REMOVE   - Eliminate library(s) from the current STEPLIB.\n     SAVE     - Create a CLIST variable (&STEPLIB) that contains a\n                list of the current STEPLIB data set names.\n     STACK    - Add a new instance of the library(s) to the current\n                STEPLIB concatenation even if it is already part of the\n                current STEPLIB.  This will allow DESTACK to remove a\n                single instance without affecting other applications.\n     VERSION  - Display the Version and Release of the code as well as\n                the assembly date.\n\n     FIRST/LAST - Indicate where the new library(s) are to be added to\n                the STEPLIB concatenation.\n                The default is to add the new data sets to the beginning\n                of the concatenation.\n\n     PAUSE(nnn) - This option is for BATCH processing.  It provides a\n                wait time (in seconds) so that the system can perform\n                cleanup processing before the step terminates.\n                The default is to wait 1 second but this allows the\n                user to extend the time if needed.\n\n     APFCHK   - After performing the specified function, all libraries\n                in the STEPLIB concatenation are checked to see if they\n                are APF authorized.\n     NOMSGS   - Do not issue any messages during STEPLIB allocation\n                deallocation or APF checking.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TSUB": {"ttr": 14089, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00&\\x01\\x19\\x11O\\x01\\x19\\x11O\\t@\\x01p\\x01p\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf7\\xf9\\xf7@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2019-04-24T00:00:00", "modifydate": "2019-04-24T09:40:26", "lines": 368, "newlines": 368, "modlines": 0, "user": "FILE797"}, "text": " **********************************************************************\n                                                                      *\n    Program Name:   TSUB                                              *\n                                                                      *\n                    ** This program is in the public domain. **       *\n                                                                      *\n   Documentation:   This program is meant to be run as a TSO          *\n                    command, APF authorized except for the display    *\n                    functions.                                        *\n                                                                      *\n     Environment:   TSO command, APF Authorized.                      *\n                    PUTLINE interface enabled by APUT, EPUTL.         *\n                    This program is non-reentrant.                    *\n                                                                      *\n  Short Function:   This program deals with existing TSO \"auth\"       *\n                    tables that are pointed to by fields in the       *\n                    LWA (Logon Work Area) which is created for a      *\n                    TSO session at LOGON time.  These tables are      *\n                    the actual tables that your TSO session uses      *\n                    to determine program authorization.  Many of      *\n                    the characteristics of these tables can be        *\n                    changed or reset by the TSUB program.  The        *\n                    changes that TSUB can do, are of three types:     *\n                                                                      *\n                    1.  Replacing or blanking any table entry.        *\n                    2.  Altering the LWA flags or fields that         *\n                        determine this table's properties.            *\n                    3.  Effectively nullifying an entry by            *\n                        putting a C'?' into it.  This effectively     *\n                        removes the entry, without nullifying any     *\n                        of the following table entries.               *\n                                                                      *\n                 Details:                                             *\n                                                                      *\n                    1.  TSUB can substitute a different program name  *\n                        or insert a blank entry into any valid slot   *\n                        of a TSO \"auth\" table that belongs to your    *\n                        TSO session.                                  *\n                                                                      *\n                        You can effectively nullify a table           *\n                        entry without blanking it, using the          *\n                        \"nullify\" function \"N\" instead of the         *\n                        \"blanking\" function \"B\".  The nullifying      *\n                        function inserts a C'?' into the slot,        *\n                        allowing all following slots to still         *\n                        work, since a ? entry is not a blank that     *\n                        delimits the table.                           *\n                                                                      *\n                        Blanking (not the last entry) is dangerous    *\n                        (see below) because it invalidates all the    *\n                        subsequent non-blank table entries.  But the  *\n                        technique of blanking an entry can be used    *\n                        carefully if you are sure of what you want    *\n                        to accomplish.  That is why we are making     *\n                        it available.  Use \"N\" instead of \"B\" most    *\n                        of the time.                                  *\n                                                                      *\n                    2.  TSUB can change the characteristics of your   *\n                        own session's TSO \"auth\" tables, that are     *\n                        pointed to by the LWA, by means of changing   *\n                        the LWA (Logon Work Area) settings for each   *\n                        table.  For example, LWA table lengths can    *\n                        be supplied or removed.  LWA flags marking    *\n                        the table as coming from a STEPLIB can be     *\n                        set, or removed.  Even the physical table     *\n                        header can be altered to make the table       *\n                        look as though it came from PARMLIB.          *\n                                                                      *\n    Introduction:   At LOGON time for a TSO session, the system       *\n                    (program IKJEFTP2) copies a set of the E2, E8,    *\n                    AP, and NS TSO authorization tables into SP 252   *\n                    protected Key 0 storage which lies in the TSO     *\n                    user's address space.  These are the tables       *\n                    WHICH ARE ACTUALLY USED by that TSO session,      *\n                    and their location is pointed to in the LWA       *\n                    control block (Logon Work Area, which, by the     *\n                    way is also created by program IKJEFTP2).  The    *\n                    duration of these tables is for the life of       *\n                    that TSO session.  TSO LOGON processing creates   *\n                    both the LWA itself, and the copies of the auth   *\n                    tables that the session uses.  TSUB displays      *\n                    and manipulates this copy of these tables--the    *\n                    ones that are actually in use. Thus, changes to   *\n                    these tables are effective immediately, and       *\n                    their scope affects only the issuing TSO          *\n                    session.                                          *\n                                                                      *\n                    This is why the TSUB program effects \"personal    *\n                    program authorization\" which does not affect      *\n                    any other TSO users.  When you're trying out      *\n                    a new program which needs to be authorized,       *\n                    and you don't want it to be authorized to         *\n                    anyone else, this is the technique to use.        *\n                                                                      *\n                    Where does TSO get these tables from, at LOGON    *\n                    time?  Again, to be more specific:                *\n                                                                      *\n               Case 1.  The most commonly found source for the auth   *\n                        tables pointed to in the LWA, is the \"common  *\n                        storage\" tables created from the active       *\n                        PARMLIB member IKJTSOxx.  Those are pointed   *\n                        to by the TPVT control block + X'14' which    *\n                        is the CTLT.  If the CTLT is the source of    *\n                        the LWA tables, then lengths of the tables,   *\n                        and the size of each entry, are copied from   *\n                        the CTLT into the LWA (Logon Work Area).      *\n                        Use the program called ASUB to directly       *\n                        access the public tables from PARMLIB that    *\n                        are pointed to by the CTLT (undocumented)     *\n                        control block.  Our program, TSUB, accesses   *\n                        the copy of those tables which is pointed to  *\n                        by the LWA, which were created for the TSO    *\n                        session at LOGON time, and which are unique   *\n                        to the current TSO session.                   *\n                                                                      *\n               Case 2.  If a list of table entries for one or more    *\n                        of the tables:  E2, E8, AP, or NS is not      *\n                        found in the IKJTSOxx PARMLIB member that     *\n                        is currently active, then the table in the    *\n                        LWA is not copied from the IKJTABLS module    *\n                        in LPALIB, but it is just pointed to.  Thus   *\n                        in such a situation, TSUB cannot alter the    *\n                        particular table.  The actual table is        *\n                        located in PLPA, in that particular case.     *\n                                                                      *\n               Case 3.  If a copy of the IKJTABLS load module         *\n                        containing csects IKJEFTE2, IKJEFTE8,         *\n                        IKJEFTAP, and IKJEFTNS is found in an         *\n                        APF-authorized STEPLIB that the TSO session   *\n                        has access to (running as an APF authorized   *\n                        STEPLIB only), then those E2, E8, NS, and AP  *\n                        tables are copied into the LWA at LOGON       *\n                        time, from that CSECT in the STEPLIB copy of  *\n                        IKJTABLS.  Therefore the table entries in     *\n                        the respective CSECTs of the IKJTABLS in the  *\n                        authorized STEPLIB are the ones which are in  *\n                        force for that user's TSO session.  But in    *\n                        that case, no \"table lengths\" or \"number of   *\n                        table entries\" from these tables, are         *\n                        available.  The table is delimited by the     *\n                        first blank entry in it.  This TSUB program   *\n                        has the ability to blank any numbered table   *\n                        entry.  Since a blank entry is a delimiter    *\n                        for the entire table, and all entries after   *\n                        the blank entry are no longer used, you       *\n                        have to be very careful.  Therefore, when     *\n                        blanking entries, you should usually blank    *\n                        the last one only, unless you have a very     *\n                        good reason to blank out a different entry,   *\n                        other than the last one.  The good news is    *\n                        that the effect of the TSUB program only      *\n                        lasts for the duration of this LOGON, and     *\n                        only for the userid that is currently running *\n                        the TSUB program.                             *\n                                                                      *\n                        Again, use \"nullify\" (action \"N\") instead     *\n                        of \"blank\" (action \"B\") most of the time.     *\n                                                                      *\n             Note - Tables copied from a CSECT in IKJTABLS do not     *\n                    have lengths associated with them.  They are      *\n                    delimited by a blank table entry at the end.      *\n                    Therefore the copy of each such table pointed     *\n                    to by the LWA, does not have any length           *\n                    associated with it.  Therefore we can only        *\n                    judge its length by looking at the first blank    *\n                    entry that has been found by a forward scan.      *\n                                                                      *\n                    This program, TSUB, directly manipulates the      *\n                    \"live\" authorization tables pointed to by the     *\n                    LWA.  Supported tables are:  E2, E2, NS and       *\n                    AP.  The public PP (Platform Program) table       *\n                    and PC (Platform Command) table, not in the       *\n                    LWA, are partly supported by this program, if     *\n                    they had been created by their presence in the    *\n                    active IKJTSOxx PARMLIB member.                   *\n                                                                      *\n     Description:   Display an Auth Table entry from any of the       *\n                    TSO/E program list tables:  IKJEFTE2, IKJEFTE8,   *\n                    IKJEFTNS or IKJEFTAP that are in storage.  Or     *\n                    display the entire table.  Or replace a numbered  *\n                    entry with a new program name.  Or blank out      *\n                    any numbered entry.  (Be very careful if you are  *\n                    attempting to blank an entry.  Blanking an entry  *\n                    invalidates ALL subsequent entries).  Or          *\n                    effectively nullify an entry by putting a ?       *\n                    (queston mark and 7 blanks) into it.  If you are  *\n                    invoking a display function, then the entire      *\n                    table is shown, unless you enter a number, and    *\n                    then, only that slot is shown.  The tables        *\n                    handled by this program are the actual tables     *\n                    pointed to by the LWA of the issuing TSO/E        *\n                    address space, and they lie in that user's        *\n                    TSO/E address space (unless they were pointed to, *\n                    and are from an IKJTABLS load module that is in   *\n                    the LPA list.)                                    *\n                                                                      *\n        Function:   To substitute one new program name in the local   *\n                    incore TSO auth tables, IKJEFTE2, IKJEFTE8, or    *\n                    IKJEFTAP, IKJEFTNS lists.  This is done to any    *\n                    numbered entry of each table.  Or else merely to  *\n                    display the contents of the entire table, or the  *\n                    contents of any particular numbered entry.        *\n                                                                      *\n                    The effect of replacing any program name is       *\n                    immediate.  The scope of the change, is just for  *\n                    the issuing current TSO userid.                   *\n                                                                      *\n                    You can blank out any numbered entry in any of    *\n                    the four tables.  But blanking an entry, will     *\n                    invalidate all subsequent table entries which     *\n                    follow the blanked entry slot.  So be careful!    *\n                                                                      *\n                    Better than blanking an entry, you can \"nullify\"  *\n                    an entry, which inserts a \"?\" character into the  *\n                    table entry instead of blanks.  The subsequent    *\n                    table entries remain valid.  The \"nullify\"        *\n                    function is \"N\".  The \"blanking\" function is      *\n                    \"B\".                                              *\n                                                                      *\n                    Or, you can use this program to list the complete *\n                    contents of any of the auth tables which are      *\n                    incore.                                           *\n                                                                      *\n                    Additionally, as described below, you can change  *\n                    fields in the LWA which characterize the          *\n                    individual tables--size characteristics and       *\n                    whether or not the table came from STEPLIB.       *\n                                                                      *\n          Syntax:   TSUB ttA nnn pgmname                              *\n                                                                      *\n                    Where tt is a table code, and A is an action      *\n                    code.                                             *\n                                                                      *\n                    The table code is a nickname for any of the       *\n                    TSO/E auth tables which are incore.  They are:    *\n                                                                      *\n                    E2 - IKJEFTE2 = AUTHCMD  entry in IKJTSOxx        *\n                    E8 - IKJEFTE8 = AUTHPGM  entry in IKJTSOxx        *\n                    AP - IKJEFTAP = AUTHTSF  entry in IKJTSOxx        *\n                    NS - IKJEFTNS = NOTBKGND entry in IKJTSOxx        *\n                    PP -            PLATPGM  table in IKJTSOxx        *\n                    PC -            PLATCMD  table in IKJTSOxx        *\n                                                                      *\n                    If the action code is B (blank the numbered       *\n                    entry), then no program name is required,         *\n                    but a number is required.  When blanking a        *\n                    table entry, BE VERY CAREFUL !!!!!                *\n                                                                      *\n                    If the action code is N (nullify the numbered     *\n                    entry), then no program name is required,         *\n                    but a number is required.  Nullifying a table     *\n                    entry will insert a \"?\" (question mark) into      *\n                    that particular table slot, effectively           *\n                    nullifying that entry, but NOT the entries        *\n                    which follow, since blanks are the table          *\n                    delimiters.                                       *\n                                                                      *\n      IMPORTANT  >  Under most circumstances, you should use the      *\n        N O T E  >  \"nullify\" function \"N\" instead of the \"blanking\"  *\n                 >  function \"B\".  N will only nullify that one       *\n                 >  table entry, leaving all subsequent entries       *\n                 >  valid.  Blanking an entry will leave all          *\n                 >  subsequent table entries invalid.                 *\n                                                                      *\n        WARNING  >  If you blank out an entry which is not the        *\n        WARNING  >  last entry in the particular table, then          *\n        WARNING  >  all subsequent entries in that table are          *\n        WARNING  >  rendered invalid!  It is best to restore          *\n        WARNING  >  a non-blank entry to that slot, using the         *\n        WARNING  >  ttR function, where tt is the table code.         *\n                    Then you will be able to display the rest         *\n                    of the table using the ttD function.              *\n                                                                      *\n                    If the action code is D (display the given        *\n                    entry), then no program name is required.         *\n                    The default action is to display the entire       *\n                    table, unless a number is entered.  If a          *\n                    number is present, then only that entry           *\n                    number is displayed.  If the number is larger     *\n                    than the number of entries in that particular     *\n                    table, then an informative error message is       *\n                    issued, and the program ends with code = 4.       *\n                                                                      *\n                    If the action code is R (replace the program      *\n                    name) then a number (the table entry number)      *\n                    and a program name are required.  If you want     *\n                    to blank that slot, instead of putting a          *\n                    program name into it, then use action code B.     *\n                    But if you are blanking any slot which is not     *\n                    the last slot, then PLEASE HEED THE WARNING       *\n                    THAT IS ABOVE.  Use action \"N\" instead of \"B\"     *\n                    most of the time.  This will not invalidate       *\n                    subsequent table entries.                         *\n                                                                      *\n                    If the action code is H, then TSUB will replace   *\n                    the last 8 bytes of the table header with the     *\n                    literal: C' PARMLIB', as if the table were        *\n                    created from the IKJTSOxx member in PARMLIB.      *\n                                                                      *\n                    If the action code is L, then TSUB will look to   *\n                    create a length value for that table.  This value *\n                    is equal to the length of a table with all the    *\n                    non-blank entries, plus all the potential blank   *\n                    entries at the end of the table.  So this number  *\n                    will often reflect more entries than TSO will     *\n                    actually use.  Additionally, TSUB can change or   *\n                    blank any one of these entries, because TSUB's    *\n                    range depends on the number of entries indicated  *\n                    by the LWA length.  (If there's no length, then   *\n                    TSUB uses the length of all non-blank entries     *\n                    plus the first blank, if it exists.)              *\n                                                                      *\n                    If the action code is M, then TSUB will look to   *\n                    create a length value for that table.  This value *\n                    is equal to the length of a table with all the    *\n                    non-blank entries, plus one blank entry, if any   *\n                    perceived blank entries exist at the end of the   *\n                    table.                                            *\n                                                                      *\n                    If the action code is Z, then TSUB will look at   *\n                    the LWA length value for that table, and it will  *\n                    zero that length value, whether it already was    *\n                    zero, or not.                                     *\n                                                                      *\n                    If the action code is S, then TSUB will make      *\n                    the given table look like it came from STEPLIB,   *\n                    so that a subsequent PARMLIB UPDATE(xx) command   *\n                    will not overlay the session's auth table.        *\n                                                                      *\n                    If the action code is P, then TSUB will make      *\n                    the given table look like it came from PARMLIB,   *\n                    so that a subsequent PARMLIB UPDATE(xx) command   *\n                    will overlay the session's auth table.            *\n                                                                      *\n                    If the action code is X, then TSUB will display   *\n                    all the LPA address ranges (undocumented).        *\n                                                                      *\n                    If the PLATCMD or PLATPGM keywords (and at least  *\n                    one name) were not coded in the active IKJTSOxx   *\n                    PARMLIB entry, then there is no control block of  *\n                    names to be pointed to.  The condition is         *\n                    reported.  If these keywords WERE coded in the    *\n                    IKJTSOxx member of PARMLIB which is currently     *\n                    active, then the PC and PP table codes in TSUB    *\n                    WILL ACT ON THE COMMON STORAGE COPY of THESE      *\n                    TWO TABLES ONLY.                                  *\n                                                                      *\n   Recommendation:  First list the entire table using the \"D\"         *\n                    action code, and then decide which entry, by      *\n                    number, that you want to replace.                 *\n                                                                      *\n                    Then use the \"R\" action code, to replace the      *\n                    particular numbered entry you have chosen.        *\n                                                                      *\n             Note:  The E2, E8, AP, or NS table which is being        *\n                    used by the system, can come from either the      *\n                    IKJTSOxx PARMLIB entry, or it can come from       *\n                    an IKJTABLS load module which was running         *\n                    from an APF authorized library as a STEPLIB,      *\n                    or a default IKJTABLS entry in LPALIB.  Each      *\n                    CSECT is copied into the TSO user's address       *\n                    space, albeit in a protected key, and pointed     *\n                    to by the user's LWA, except in the case of an    *\n                    IKJTABLS CSECT that is in LPALIB.  These are      *\n                    the actual auth tables, E2, E8, AP, NS, in        *\n                    use by that TSO address space.                    *\n                                                                      *\n  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TSUBQUIK": {"ttr": 14341, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01&\\x000\\x01\\t4O\\x01\\x19\\x11O\\tR\\x00\\x1b\\x00\\x1a\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf7\\xf9\\xf7@@@'", "ispf": {"version": "01.38", "flags": 0, "createdate": "2009-12-10T00:00:00", "modifydate": "2019-04-24T09:52:30", "lines": 27, "newlines": 26, "modlines": 0, "user": "FILE797"}, "text": "TSUB Command - Display/Change USERID Auth Table Entry - Ver 1.40\n---- -------   ------- ------ ------ ---- ----- -----   --------\n?     0000     Program table code + Function code\n\n  Instructions to use this program:\n  ------------ -- --- ---- -------\nTSUB TTA nnn pgmname (nnn optional for D, both required for R)\n  Supply a table code TT, followed by an action code A.\n\nValid table  codes are:  E2, E8, AP, NS, PC, PP.\nValid action codes are:  R - replace, B - blank, D - display,\n  H - header, L - supply full table length, Z - zero table length,\n  S - mark table from STEPLIB, P - mark table from PARMLIB,\n  X - display LPA storage ranges, M - supply minimum table length.\n  N - nullify a single entry without invalidating subsequent entries.\nFull command is in the form TTA, TT=table code, A=action code.\n\nIf D (display) is followed by a slot number, only that slot is shown.\nIf D is not followed by a number, then the entire table is displayed.\nR (replace) requires a slot number, followed by a program name.\nB (blank) blanks the slot number given. Higher slots are invalidated.\nN (nullify) invalidates that slot number. Higher slots remain valid.\nCodes: D,H,L,M,Z,P,S,X do not require extra parameters.\nD does not need APF authorization. All other codes require it.\n\nYou can nullify the effect of TSUB by logging the TSO session off,\nand logging back on.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "UCBDASD": {"ttr": 14343, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00%\\x01\\x125\\x1f\\x01\\x19\\x14\\x0f!5\\x00+\\x00(\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf7\\xf3\\xf1@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2012-12-16T00:00:00", "modifydate": "2019-05-20T21:35:25", "lines": 43, "newlines": 40, "modlines": 0, "user": "FILE731"}, "text": ")F FUNCTION -\n\n  The TSO command UCBDASD will display online DASD volumes,\n  and will show some of the properties of each.  A significant\n  display in UCBDASD is the number of cylinders that the\n  volume contains.  The UCBDASD command has also been fixed to\n  show the number of cylinders in Extended Access Volumes (EAV).\n  The UCBDASD program is NOT APF-authorized.\n\n\n              UCBDASD - V1.7 - DISPLAY ONLINE DASD\n              -------   ----   ------- ------ ----\n Unit  Volser  DevTyp Cylinder  Mount  UCB Addr   Attribs  Res DCE Addr  SMS\n ----  ------  ------ --------  -----  --------   -------  --- --------  ---\n 0128  WORK80  3380       885   STOR   00F46708       PERM     00F46698\n 0A90  MVSRES  3390-1    1113   PRIV   00F50B50  ALLC PERM RES 00F50AE0\n 0A91  SPOOL1  3390-2    2226   PRIV   00F50BE8       PERM     00F50B78\n 0A93  DATA01  3390-2    2226   PRIV   00F50D18  ALLC PERM     00F50CA8\n 0A94  DATA02  3390-2    2226   PRIV   00F50DB0  ALLC PERM     00F50D40\n 0A95  DATA03  3390-3    3340   PRIV   00F50E48  ALLC PERM     00F50DD8\n 0A96  DATA04  3390-3    3340   PRIV   00F50EE0       PERM     00F50E70\n 0A97  DATA05  3390-3    3340   PRIV   00F50F78  ALLC PERM     00F50F08\n 0A98  DATA06  3390-1    1113   PRIV   00F51010  ALLC PERM     00F50FA0\n 0AA0  WORK01  3390-1    1113   STOR   00F514D0       PERM     00F51460\n 0AFE  SMS001  3390-3    3000   PRIV   00F51598       PERM     00F51528  YES\n\n\n)X SYNTAX  -\n\n       UCBDASD\n\n\n  DEFAULTS - NONE\n  ALIAS    - NONE\n\n\n\n\n)O OPERANDS -\n\n   None\n\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "UKEYCSA": {"ttr": 14345, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00D\\x01\\x08\\x15_\\x01\\x19\\x11O\\tT\\x00\\x1a\\x00\\x15\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf2\\xf6\\xf4@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2008-06-03T00:00:00", "modifydate": "2019-04-24T09:54:44", "lines": 26, "newlines": 21, "modlines": 0, "user": "FILE264"}, "text": ")F FUNCTION -\n\n  The UKEYCSA command is an APF-Authorized TSO command\n  to change or list the global PARMLIB setting of\n\n     VSM ALLOWUSERKEYCSA(YES) or VSM ALLOWUSERKEYCSA(NO)\n\n  in the DIAGxx PARMLIB member.\n\n  Note:  The effect of this command will be nullified in\n         z/OS 2.4 and higher system levels.\n         This command will only be effective in z/OS,\n         from z/OS 1.8 thru z/OS 2.3.\n\n)X SYNTAX  -\n\n       UKEYCSA  N      (Do not allow a user to allocate Key 8 CSA)\n       UKEYCSA  Y      (Allow a user to allocate Key 8 CSA)\n       UKEYCSA  blank or anything else  (list current status and\n                                         don't change anything)\n\n)O OPERANDS -\n))N         -  (Do not allow a user to allocate Key 8 CSA)\n))Y         -  (Allow a user to allocate Key 8 CSA)\n\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ULUDASD": {"ttr": 14347, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00)\\x01\\x125\\x1f\\x01\\x19\\x14\\x0f!3\\x00.\\x00(\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf7\\xf9\\xf7@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2012-12-16T00:00:00", "modifydate": "2019-05-20T21:33:29", "lines": 46, "newlines": 40, "modlines": 0, "user": "FILE797"}, "text": ")F FUNCTION -\n\n  The TSO command ULUDASD will display online DASD volumes,\n  and will show some of the properties of each.  A significant\n  display in ULUDASD is the number of cylinders that the\n  volume contains.  The ULUDASD command has also been fixed to\n  show the number of cylinders in Extended Access Volumes (EAV).\n  The UCBDASD program is NOT APF-authorized.\n\n  Note:  ULUDASD has the same functionality as UCBDASD, but the\n         coding uses the ULUT lookup macros from CBT File 873.\n\n\n              ULUDASD - V1.7 - DISPLAY ONLINE DASD\n              -------   ----   ------- ------ ----\n Unit  Volser  DevTyp Cylinder  Mount  UCB Addr   Attribs  Res DCE Addr  SMS\n ----  ------  ------ --------  -----  --------   -------  --- --------  ---\n 0128  WORK80  3380       885   STOR   00F46708       PERM     00F46698\n 0A90  MVSRES  3390-1    1113   PRIV   00F50B50  ALLC PERM RES 00F50AE0\n 0A91  SPOOL1  3390-2    2226   PRIV   00F50BE8       PERM     00F50B78\n 0A93  DATA01  3390-2    2226   PRIV   00F50D18  ALLC PERM     00F50CA8\n 0A94  DATA02  3390-2    2226   PRIV   00F50DB0  ALLC PERM     00F50D40\n 0A95  DATA03  3390-3    3340   PRIV   00F50E48  ALLC PERM     00F50DD8\n 0A96  DATA04  3390-3    3340   PRIV   00F50EE0       PERM     00F50E70\n 0A97  DATA05  3390-3    3340   PRIV   00F50F78  ALLC PERM     00F50F08\n 0A98  DATA06  3390-1    1113   PRIV   00F51010  ALLC PERM     00F50FA0\n 0AA0  WORK01  3390-1    1113   STOR   00F514D0       PERM     00F51460\n 0AFE  SMS001  3390-3    3000   PRIV   00F51598       PERM     00F51528  YES\n\n\n)X SYNTAX  -\n\n       ULUDASD\n\n\n  DEFAULTS - NONE\n  ALIAS    - NONE\n\n\n\n\n)O OPERANDS -\n\n   None\n\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ULUTAPE": {"ttr": 14349, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x07\\x00'\\x01\\x120o\\x01\\x125\\x1f\\x124\\x00N\\x00;\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf8\\xf7\\xf3@@@\"", "ispf": {"version": "01.07", "flags": 0, "createdate": "2012-11-01T00:00:00", "modifydate": "2012-12-16T12:34:27", "lines": 78, "newlines": 59, "modlines": 0, "user": "FILE873"}, "text": ")F FUNCTION -\n\n  The TSO command ULUTAPE is a TSO command to show all\n  online tape drives and all pending tape mounts.  You\n  can use the ULUTAPE command to look at the externals\n  of all tape jobs on the system, regarding mount status.\n  The 'M' operand will cause ULUTAPE to only show drives\n  that have pending tape mounts.\n  The ULUTAPE program is NOT APF-authorized.\n\n\n)X SYNTAX  -\n\n       ULUTAPE  \u00dd M \u00a8\n\n           DEFAULTS - NONE\n           ALIAS    - NONE\n\n\n Example Displays:\n\n    Example 1:   Tape mount required before job is run.\n    ------- -\n\n      (Please note that if *MNT* is displayed, this means\n       that the tape is not yet correctly mounted.)\n\n     ULUTAPE - V1.2 - DISPLAY TAPE MOUNTS AND ONLINE TAPE DRIVES\n     -------   ----   ------- ---- ------ --- ------ ---- ------\n Unit Mount Volume Modl Type UCB Addr DCE Addr MtdVol LastVl Ext Addr\n ---- ----- ------ ---- ---- -------- -------- ------ ------ --------\n 0560              3480      00F4AE90 00F4ADB0        C484MA 00F4AE68\n 0561              3480      00F4AFB0 00F4AED0        C484MB 00F4AF88\n 0562 *MNT* V484MT 3480 PRIV 00F4B0D0 00F4AFF0        C484MC 00F4B0A8\n 0563              3480      00F4B1F0 00F4B110        C484MD 00F4B1C8\n 0564              3480      00F4B310 00F4B230        C484ME 00F4B2E8\n 0565              3480      00F4B430 00F4B350        C484MF 00F4B408\n 0566              3480      00F4B550 00F4B470        C484MG 00F4B528\n 0567              3480      00F4B670 00F4B590        C484MH 00F4B648\n\n\n    Example 2:   Job is running.\n    ------- -\n\n     ULUTAPE - V1.2 - DISPLAY TAPE MOUNTS AND ONLINE TAPE DRIVES\n     -------   ----   ------- ---- ------ --- ------ ---- ------\n Unit Mount Volume Modl Type UCB Addr DCE Addr MtdVol LastVl Ext Addr\n ---- ----- ------ ---- ---- -------- -------- ------ ------ --------\n 0560              3480      00F4AE90 00F4ADB0        C484MA 00F4AE68\n 0561              3480      00F4AFB0 00F4AED0        C484MB 00F4AF88\n 0562       V484MT 3480 PRIV 00F4B0D0 00F4AFF0 V484MT        00F4B0A8\n 0563              3480      00F4B1F0 00F4B110        C484MD 00F4B1C8\n 0564              3480      00F4B310 00F4B230        C484ME 00F4B2E8\n 0565              3480      00F4B430 00F4B350        C484MF 00F4B408\n 0566              3480      00F4B550 00F4B470        C484MG 00F4B528\n 0567              3480      00F4B670 00F4B590        C484MH 00F4B648\n\n    Example 3:   Job has finished running.\n    ------- -\n\n     ULUTAPE - V1.2 - DISPLAY TAPE MOUNTS AND ONLINE TAPE DRIVES\n     -------   ----   ------- ---- ------ --- ------ ---- ------\n Unit Mount Volume Modl Type UCB Addr DCE Addr MtdVol LastVl Ext Addr\n ---- ----- ------ ---- ---- -------- -------- ------ ------ --------\n 0560              3480      00F4AE90 00F4ADB0        C484MA 00F4AE68\n 0561              3480      00F4AFB0 00F4AED0        C484MB 00F4AF88\n 0562              3480      00F4B0D0 00F4AFF0 V484MT V484MT 00F4B0A8\n 0563              3480      00F4B1F0 00F4B110        C484MD 00F4B1C8\n 0564              3480      00F4B310 00F4B230        C484ME 00F4B2E8\n 0565              3480      00F4B430 00F4B350        C484MF 00F4B408\n 0566              3480      00F4B550 00F4B470        C484MG 00F4B528\n 0567              3480      00F4B670 00F4B590        C484MH 00F4B648\n\n\n)O OPERANDS -\n\n))  M  -  Only display pending tape mounts, and not other drives.\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "USERINFO": {"ttr": 14352, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x03\\x01\\x12!O\\x01\\x12!O\\x13D\\x00;\\x00;\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf4\\xf5\\xf2@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2012-08-01T00:00:00", "modifydate": "2012-08-01T13:44:03", "lines": 59, "newlines": 59, "modlines": 0, "user": "FILE452"}, "text": ")F FUNCTION -\n   The USERINFO command allows a user to obtain USER and SYSTEM\n   related information, to be used within a CLIST or REX EXEC.\n)X SYNTAX -\n    USERINFO ACCT  CPID  DSSL  FMID  IODF IPLD  IPLT  IPLU  IPLV\n             JOB#  JOBN  MCAT  MODE  MODL PGMR  REGN  REL#  RGRP\n             RUSR  SCPN  SMFI  SNAM  SSNM TERM  TMID  USER  VERS\n             WDAY  SETV\n\n   REQUIRED - NONE\n   DEFAULT  - SETV\n\n   All information is returned via &SYSxxxx variables, where xxxx is\n   the above options.  If a keyword, other than \"SETV\", is specified on\n   the USERINFO command, command, that value is also returned in the\n   &SYSSCMD symbolic variable.\n\n   The symbols defined in IEASYMnn are also created with matching names.\n\n   *----------------------------------------------------------------*\n   *   Note: If the returned data is longer than 8 characters in    *\n   *         length then &SYSSCMD will only contain the 1st 8       *\n   *         characters.                                            *\n   *         Also, the &SYSSCMD variable will not be updated for    *\n   *         system symbols that are defined in IEASYMnn.           *\n   *----------------------------------------------------------------*\n\n)O OPERANDS -\n))ACCT      - Returns the user's JOBCARD accounting information.\n))CPID      - Returns the current CPU serial number.\n))DSSL      - Returns the DF/DSS release/version level.\n))FMID      - Returns the SCP FMID value.\n))IODF      - Returns the I/O Configuration ID suffix.\n))IPLD      - Returns the last IPL date in the format of MM/DD/CCYY.\n))IPLT      - Returns the last IPL time in the format of HH:MM:SS.HT.\n))IPLU      - Returns the current SYSRES unit address.\n))IPLV      - Returns the current SYSRES volume serial.\n))JOB#      - Returns the current jobid (ie. TSU 01234)\n))JOBN      - Returns the current jobname.\n))MCAT      - Returns the Master Catalog Name.\n))MODE      - Returns the current SYSTEM EXECUTION MODE (OS/390 R3).\n))MODL      - Returns the current CPU model number.\n))PGMR      - Returns the current JOBCARD programmer name.\n))REGN      - Returns the current requested region size.\n))REL#      - Returns the current SCP release/level number (ie. 03.8)\n))RGRP      - Returns the current user's RACF group name\n))RUSR      - Returns the current user's RACF user id\n))SCPN      - Returns the current SCP release/level number (ie. SP6.0.6)\n))SMFI      - Returns the current system's SMF identifier.\n))SNAM      - Returns the current system's IPL SNAME= value.\n))SSNM      - Returns the current subsystem name (ie. JES2).\n))TERM      - Returns the current terminal type (ie. 3270)\n))TMID      - Returns the current terminal id.\n))USER      - Returns the userid or jobname (if running in batch).\n))VERS      - Returns the USER SCP version identifier (CVTVERID).\n))WDAY      - Returns the day of the week (ie. FRIDAY).\n\n))SETV      - Creates a symbolic variable for all the parameters\n              processed by userinfo, without altering &SYSSCMD.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "VSAMANAL": {"ttr": 14354, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x00X\\x007\\x00\\x84\\x08_\\x01\\x19\\x14\\x1f\\x02\\x06\\x01\\r\\x01\\x06\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf2\\xf9\\xf4@@@'", "ispf": {"version": "00.88", "flags": 0, "createdate": "1984-03-25T00:00:00", "modifydate": "2019-05-21T02:06:37", "lines": 269, "newlines": 262, "modlines": 0, "user": "FILE294"}, "text": ")F FUNCTION -\n                 The VSAMANAL command is used to provide the user\n                 with a method of determining how much physical\n                 space a dataset will require.  It can also be used\n                 to determine an optimum data CI-SIZE, CI and CA\n                 freespace percentages based on free record values,\n                 track utilization percentages, and other VSAM\n                 dataset statistics, which are helpful when defining\n                 a new dataset, or when analysing existing dataset\n                 definitions.\n\n                 The devices currently supported are 3390's and\n                 3380's as well as 3350's and 3330's.\n\n                 VSAMANAL is a TSO command processor for 3270 displays.\n                 The analyzer uses 3270 field and PF keys processing\n                 and can be executed by entering \"VSAMANAL\".\n\n)X SYNTAX -\n                 VSAMANAL\n\n                 You press F4 to get out of this program.\n\n)O OPERANDS -\n\n))AVG-RECSIZE -  REQUIRED\n                 This value can be any number from 1 to 32761.  For\n                 fixed length records this is the record size.  For\n                 variable-length records this is the average record-\n                 size value used in all space and freespace cal-\n                 culations.  Remember a true average record size\n                 should be based on record size and occurrences of\n                 those record sizes.  An inadequate or excessive\n                 value will cause corresponding space and free-\n                 space values to be calculated.\n\n))MAX-RECSIZE -  REQUIRED\n                 Maximum record size for variable length records. This\n                 value can be any number from 1 to 32761, but cannot be\n                 lower than 'AVG-RECSIZE'.  It represents the largest\n                 recordsize your dataset will contain.\n\n))RECORDS T/B LOADED - REQUIRED\n                 Number of records to be loaded into your dataset. This\n                 value can be any number from 1 to 9999999 and is used\n                 in the calculation of non free space for your dataset.\n\n))RECORDS T/B ADDED - OPTIONAL\n                 Number of records to be added to your dataset\n                 between reorganizations.  This value can be any\n                 number from 1 to 9999999 and is used to calculate\n                 freespace for your dataset.\n\n                 For NON-KSDS datasets or for KSDS datasets with no CI\n                 and CA free record percentages specified, this value\n                 will be added to \"RECORDS T/B LOADED\" value to\n                 determine space allocation.\n\n                 For KSDS datasets with a CI and/or CA free record\n                 percentages specified, this value will be used to\n                 calcuate appropriate VSAM CI/CA freespace percentages\n                 that will accommodate the indicated number of free\n                 records.\n\n))% ADD RECS CA FREESPACE - OPTIONAL\n                 Percentage of \"RECORDS T/B ADDED\" value.  This value\n                 can be any number from 1 to 100 and represents a\n                 number of records value that will be used to calculate\n                 a corresponding VSAM CA freespace percentage.\n\n                 This percentage is analagous to the VSAM CA\n                 freespace percentage, except it indicates a number of\n                 free records rather than a number of free control\n                 intervals.  The VSAM CA freespace percentage that is\n                 calculated is based on the even distribution of the\n                 free records, throughout the dataset, in free\n                 control intervals within a control area.\n\n                 This value and the CI percentage value cannot be\n                 collectively over 100.  If they are under 100, the\n                 difference (also a percentage) is converted to a free\n                 record value, and a corresponding space allocation\n                 will be added to the space allocation needed for\n                 \"RECORDS T/B LOADED\" and any CI/CA freespace\n                 requirements.\n\n))% ADD RECS CI FREESPACE - OPTIONAL\n                 Percentage of \"RECORDS T/B ADDED\" value.  This value\n                 can be any number from 1 to 100, and represents a\n                 number of records value that will be used to calculate\n                 a corresponding VSAM CI freespace percentage.\n\n                 This percentage is analagous to the VSAM CI\n                 freespace, except that it indicates a number of free\n                 records, rather than a number of free bytes.  The VSAM\n                 CI freespace percentage that is calculated, is based\n                 on the even distribution of the free records,\n                 throughout the dataset, in those control intervals\n                 not affected by the CA freespace percentage.\n\n                 This value and the CA percentage value cannot be\n                 collectively over 100.  If they are under 100, the\n                 difference (also a percentage) is converted to a\n                 free record value, and a corresponding space\n                 allocation which will be added to the space\n                 allocation needed for \"RECORDS T/B LOADED\", and any\n                 CI/CA freespace requirements.\n\n))DEVICE TYPE -  REQUIRED\n                 DASD device type your dataset will be on.  Can be\n                 \"3390\" or \"3380\" or \"3350\" or \"3330\".\n\n))KEYLENGTH -    REQUIRED FOR KSDS\n                 Length of dataset key.\n\n))IMBED -        OPTIONAL\n                 Can be \"YES\" or \"NO\".  See \"VSAM Access\n                 Method Services\".\n\n))REPLICATE -    OPTIONAL\n                 Can be \"YES\" or \"NO\".  See \"VSAM Access\n                 Method Services\".\n\n))PF KEY ASSIGNMENTS\n\n                 PFK KEY       FUNCTION\n                 -------       --------\n                 1             TUTORIAL\n                 2             NOT USED\n                 3             RETURN TO PREVIOUS SCREEN\n                 4             EXIT VSAM ANALYZER\n                 5             NOT USED\n                 6             NOT USED\n                 7             PAGE BACK    IN SAME SCREEN\n                 8             PAGE FORWARD IN SAME SCREEN\n                 9,10,11,12    NOT USED\n\n))DATA CI-SIZE SELECTION AND DISPLAY\n                 When all input parameters have been entered correctly,\n                 a data CI-SIZE selection screen will be displayed in\n                 the lower half of the tube.  All available data CI-\n                 SIZEs will be displayed.\n\n                 The screen is pageable by using PF keys 7 & 8 for\n                 backward and forward displays of all data CI-SIZEs.\n                 Using the data CI-SIZE selection chart, you can select\n                 one or more CI-SIZEs from this screen.  When the data\n                 CI-SIZE(s) have been selected and \"enter\" is pressed,\n                 a detail display screen for each CI-SIZE selected\n                 (starting with the first), will be displayed in the\n                 lower half of your tube.  Use PF keys 7 & 8 for\n                 backward and forward displays of each detail CI-SIZE\n                 screen.\n\n                 The detail display screen gives you statistics about\n                 your VSAM dataset based on a data CI-SIZE selected.\n                 The following list is an explanation by display\n                 keyword of each statistic displayed.\n\n))CONTROL INTERVAL STATISTICS\n\n                 CISIZE (DATA)\n                 Size of the selected data CI.\n\n                 CI/CA\n                 Number of control intervals in a control area.\n\n                 RECS-MAX\n                 Maximum number of records that can fit in a\n                 control interval.  Based on \"AVG-RECSIZE\".\n\n                 RECS-LOAD\n                 Number of records that will be loaded into a control\n                 interval of a KSDS/AIX with the CI-CA freespace\n                 indicated. based on \"AVG-RECSIZE\".\n\n                 CISIZE (INDEX)\n                 Control interval size calculated for the index\n                 components of a KSDS/AIX.\n\n                 INDEX LEVELS\n                 Number of index levels the index components of a\n                 KSDS/AIX will contain.\n\n))CONTROL AREA STATISTICS\n\n                 CASIZE (trks)\n                 Control area size in tracks used for all\n                 calculations.\n\n                 RECS-MAX\n                 Maximum number of records that can fit in a control\n                 area.  Based on \"AVG-RECSIZE\".\n\n                 REC-LOAD\n                 Number of records that will be loaded into a control\n                 area of a KSDS/AIX with the CI-CA freespace specified.\n\n))DATASET STATISTICS\n\n                 TOTAL-RECS-DSET\n                 Maximum number of records that the dataset can hold.\n                 This value is the ideal number, but will most likely\n                 be too high for those datasets with free space,\n                 because of ci/ca splitting.  It may also vary for\n                 variable length records if the \"AVG-RECSIZE\" is not a\n                 true average.\n\n                 TOTAL-RECS-LOAD\n                 Number of records that can be loaded inta a KSDS/AIX\n                 dataset with free space specified.\n\n))VOLUME-PHYSICAL STATISTICS\n\n                 BLKSIZE (data)\n                 Physical block size of the data component.\n\n                 BLKS/TRK\n                 Number of physical blocks per track.\n\n                 TRK-UTIL %\n                 Percentage of tracks utilization based on physical\n                 block size.\n\n                 CYLINDERS\n                 TRACKS\n                 Number of cylinders (if CASIZE = 1 cyl) or tracks (if\n                 CASIZE less than cyl) needed for the data component.\n\n                 BLKSIZE(INDEX)\n                 Physical blocksize of the index component.\n\n                 TRACKS (INDEX)\n                 Number of tracks needed for the index component.\n\n))FREESPACE STATISTICS\n\n                 CA %\n                 Control Area freespace percentage.  This value should\n                 be used in the define cluster.\n\n                 FREE CI'S/CA\n                 Number of free control intervals per control area.\n\n                 CI %\n                 Control Interval freespace percentage.  This value\n                 should be used in the define cluster.\n\n                 FREERECS/CI\n                 Number of free records in a non-free control interval.\n\n                 FREERECS/CA\n                 Number of free records in a control area.\n\n                 TOTAL-FREE-RECS-DSET\n                 Number of free records in the data component.  Based\n                 on \"AVG-RECSIZE\".\n\n))WARNING\n                 ********** WARNING **********\n\n                 All free record values are ideal numbers and in most\n                 cases will always be high.  This is due to CI and\n                 CA splitting that can occur while inserting records.\n                 Therefore, it is recommended that the \"RECORDS T/B\n                 ADDED\" value be large enough to accommodate lost\n                 space through CI-CA splits.\n\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "WHEREIS": {"ttr": 14597, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00Q\\x01\\x19\\x11?\\x01\\x19\\x11?\\x15P\\x00\\n\\x00\\n\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf8\\xf3\\xf6@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2019-04-23T00:00:00", "modifydate": "2019-04-23T15:50:51", "lines": 10, "newlines": 10, "modlines": 0, "user": "FILE836"}, "text": ")F FUNCTION -\n  The WHEREIS command tells you where a load module resides.\n)X SYNTAX -\n         WHEREIS   modname\n\n  REQUIRED - modname\n  NOTE1    - The WHEREIS command can produces output via PUTLINE,\n             so the output may be captured.\n)O OPERANDS -\n))modname  - The name of the module whose location is to be found.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "WHOSGOT": {"ttr": 14599, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x05\\x8f\\x01\\x00\\x05\\x8f\\x157\\x00\\x11\\x00\\x11\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf4\\xf5\\xf2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-27T00:00:00", "modifydate": "2000-02-27T15:37:00", "lines": 17, "newlines": 17, "modlines": 0, "user": "FILE452"}, "text": ")F FUNCTION -\n     The WHOSGOT command is used to determine who is currently allocated\n     to a specific dataset.\n)X SYNTAX  -\n     WHOSGOT (dataset list)\n\n     REQUIRED  - dataset list\n\n     DEFAULTS  - none\n\n     EXAMPLE   - WHOSGOT (MY.CLIST 'YOUR.CLIST')\n)O OPERANDS\n     dataset list - A single dataset name, or a list of names enclosed\n                    within brackets.\n                    If the dataset name is not within quotes, it will\n                    be assume that it is the for the current users's\n                    prefix.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "XEQ": {"ttr": 14601, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00#\\x01\\x07\\tO\\x01\\x07\\tO#&\\x00#\\x00#\\x00\\x00\\xc6\\xc9\\xd3\\xc5\\xf2\\xf9\\xf6@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2007-04-04T00:00:00", "modifydate": "2007-04-04T23:26:23", "lines": 35, "newlines": 35, "modlines": 0, "user": "FILE296"}, "text": ")F FUNCTION -\n     THE XEQ COMMAND PROCESSOR ATTACHES A PROGRAM THAT IS\n     IN EXECUTABLE FORM. THE PROGRAM MAY RESIDE IN A USER LIBRARY OR\n     ONE OF THE CONCATENATED SYSTEM LINK LIBRARIES.\n)X SYNTAX -\n           XEQ     'PROGRAM NAME'   ''PARMS''\n                   LIB('DSLIST')/TASKLIB('DSLIST')\n                   RC/NORC/ALLRC  CP/NOCP\n      REQUIRED - 'PROGRAM NAME'\n      DEFAULTS - RC, NOCP\n      ALIAS    - NONE\n)O OPERANDS -\n))'PROGRAM NAME' - NAME OF THE PROGRAM TO BE EXECUTED. MUST BE A\n                   MEMBER OF A LOAD MODULE PARTITIONED DATA SET.\n))''PARMS'' - PARM FIELD TO BE PASSED TO THE EXECUTED PROGRAM. THE\n              LENGTH OF THE PARM FIELD SHOULD NOT EXCEED 256\n              CHARACTERS.\n))TASKLIB('DSLIST')/LIB('DSLIST') -\n      SPECIFIES THAT THE USER LIBRARY IS TO BE SEARCHED FOR THE\n      EXECUTABLE PROGRAM. THE TASK LIBRARY WILL ALSO BE SEARCHED\n      FOR THE PROGRAM NAMES OF LOAD MODULES ATTACHED BY THE SUBTASK.\n))'DSLIST' - SPECIFIES THE DATA SET NAMES TO BE CONCATENATED AND\n             USED FOR THE TASK LIBRARY. A MAXIMUM OF 10 DATA\n             SET NAMES IS ALLOWED.\n))RC - SPECIFIES THAT THE NON-ZERO RETURN CODE FROM THE\n       PROGRAM IS TO BE DISPLAYED AT THE TERMINAL.\n))NORC - SPECIFIES THAT NO RETURN CODES ARE TO BE DISPLAYED.\n))ALLRC - SPECIFIES THAT ALL RETURN CODES ARE TO BE\n          DISPLAYED AT THE TERMINAL.\n     NOTE - IF AN ATTENTION, ERROR, ETC. IS ENCOUNTERED BY THE\n            COMMAND PROCESSOR, THE RETURN CODE IS SET TO 16 AND\n            IS DISPLAYED ONLY IF 'RC' OR 'ALLRC' IS SPECIFIED.\n))CP - SPECIFIES THAT COMMAND PROCESSOR PARAMETERS SHOULD BE\n       REQUESTED FROM THE TERMINAL (LIKE THE TEST COMMAND).\n))NOCP - SPECIFIES THAT THIS IS NOT A COMMAND PROCESSOR.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT874/FILE874.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT874", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}