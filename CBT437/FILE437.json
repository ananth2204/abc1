{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012030000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 1116934, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 12, "INMDSNAM": "CBT.V500.FILE437.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 1116934, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 1116934, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE437.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x12\\r'", "DS1TRBAL": "b'\\x02\\x86'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x03*\\x00\\x05\\x03+\\x00\\x08\\x00\\x13'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04`\\x004\\x01\\x18$?\\x01\\x18$?\\x00\"\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf6@@@'", "ispf": {"version": "04.96", "flags": 0, "createdate": "2018-08-31T00:00:00", "modifydate": "2018-08-31T00:22:34", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-496"}, "text": "REGULAR CBT TAPE - VERSION 496    FILE:  437\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT496.FILE437\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 36 MEMBERS COUNTED; CUMULATIVE SIZE IS 9,987 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   08/31/18    00:22:34    UTC-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$$DOC": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x994\\x9f\\x00\\x994\\x9f\\x154\\x00X\\x00X\\x00\\x00\\xc9\\xc2\\xd4\\xe4\\xe2\\xc5\\xd9@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1999-12-15T00:00:00", "modifydate": "1999-12-15T15:34:00", "lines": 88, "newlines": 88, "modlines": 0, "user": "IBMUSER"}, "text": "S/390 System Utilities Main index\n\n                         For comments or questions:Jan Jaeger\n                                                   jj@septa.nl\n\nZZSA Version 98341\n\nStandalone utilities for MVS, including editor, VTOC list, device list,\nDASD ZAP etc.\n\nZZSA description and download\n\n\nNODSI Version 94336\n\nAn utility to manipulate datasets that have GRS ENQs against them.\n\nNODSI description and download\n\n\nF1REWALL Version 98033\n\nAn implementation of the VTAM session management exit ISTEXCAA to\ncontrol session setup by means of RACF profiles.\n\nF1REWALL description and download\n\n\nMPF$NTFY Version 93227\n\nA MPF exit which transforms WTO messages into JES2 notify messages.\n\nMPF$NTFY description and download\n\n\nPARMTZ Version 98322\n\nAn Unix System Services program which will allow you to set the TZ\nvariable from CLOCKxx or the Sysplex Timer.\n\nPARMTZ description and download\n\n\nIRXFMATH Version yyddd\n   (not finished yet) MEMBERS: JJ$CMATH JJ$FMATH JJ$MMATH\n\nA REXX function package which provides mathematical functions.\n\n\nWHOHAS Version 92119\n\nAn ISPF utility to display GRS ENQ resources and requestors.\n\nWHOHAS description and download\n\n\nVMCP Version 97334\n\nProvides a CP operator command to MVS when it is running under VM.\n\nVMCP description and download\n\n\nJSCH Version yyddd\n   (not finished yet) MEMBERS: JSCH\n\nLike ASCH, a transaction scheduler, but this one schedules started tasks\nrather then ASCH transactions.\n\n\nPDS upload/download utilities Version yyddd\n   (not finished yet) MEMBERS: OPSYNBRI UPDCREAT UPDSTATS\n\nUtilities to create IEBUPDTE format sequential files from partitioned\ndatasets, and restore ISPF statistics after rebuilding PDS using\nIEBUPDTE.\n\n\nINVOKE: TSO COMMAND PROCESSOR TO CALL FROM LINKLIST/LPALIST\n\n\nSUBMIT: ALTERNATE SUBMIT COMMAND WHICH DOES NOT CALL THE SUBMIT EXIT\n\n\nCOMPRESS:  COMMAND PROCESSOR WHICHS CALLS IEBCOPY TO COMPRESS\n\n\nIEFJFRQ:  PROTECT SUBSYSTEM COMMAND CHARACTERS BY MEANS OF RACF/ACF2\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@FILE437": {"ttr": 521, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04`\\x00&\\x01\\x18$?\\x01\\x18$?\\x00\"\\x00D\\x00D\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf6@@@'", "ispf": {"version": "04.96", "flags": 0, "createdate": "2018-08-31T00:00:00", "modifydate": "2018-08-31T00:22:26", "lines": 68, "newlines": 68, "modlines": 0, "user": "CBT-496"}, "text": "//***FILE 437 is from Jan Jaeger and contains a highly useful       *   FILE 437\n//*           collection of tools.  Please note his standalone      *   FILE 437\n//*           file editor and other standalone stuff, along with    *   FILE 437\n//*           his many other unusually useful programs.             *   FILE 437\n//*                                                                 *   FILE 437\n//*  -------------------------------------------------------------  *   FILE 437\n//*                                                                 *   FILE 437\n//*                  S/390 System Utilities                         *   FILE 437\n//*                                                                 *   FILE 437\n//*       For comments or questions:   Jan Jaeger                   *   FILE 437\n//*                           email:   jan.jaeger@westnet.com.au    *   FILE 437\n//*                                                                 *   FILE 437\n//*     ZZSA     - Standalone utilities for MVS, including          *   FILE 437\n//*                editor, VTOC list, device list, DASD ZAP etc.    *   FILE 437\n//*                Member ZZSAPACK added.  This is a zip of a       *   FILE 437\n//*                one-cylinder 3390 minidisk containing ZZSA       *   FILE 437\n//*                as IPL text.                                     *   FILE 437\n//*                                                                 *   FILE 437\n//*     NODSI    - A utility to manipulate datasets that            *   FILE 437\n//*                have GRS ENQs against them.                      *   FILE 437\n//*                                                                 *   FILE 437\n//*     ISTEXCAA - An implementation of the VTAM session            *   FILE 437\n//*                management exit ISTEXCAA to control session      *   FILE 437\n//*                setup by means of RACF profiles.                 *   FILE 437\n//*                                                                 *   FILE 437\n//*     MPFNTFY  - A MPF exit which transforms WTO messages         *   FILE 437\n//*                into JES2 notify messages.                       *   FILE 437\n//*                                                                 *   FILE 437\n//*     PARMTZ   - An Unix System Services program which            *   FILE 437\n//*                will allow you to set the TZ variable            *   FILE 437\n//*                from CLOCKxx or the Sysplex Timer.               *   FILE 437\n//*                                                                 *   FILE 437\n//*     IRXFMATH -     MEMBERS: JJ$CMATH JJ$FMATH JJ$MMATH          *   FILE 437\n//*                A REXX function package which                    *   FILE 437\n//*                provides mathematical functions.                 *   FILE 437\n//*                                                                 *   FILE 437\n//*                                                                 *   FILE 437\n//*     WHOHAS   - An ISPF utility to display GRS ENQ               *   FILE 437\n//*                resources and requestors.                        *   FILE 437\n//*                                                                 *   FILE 437\n//*     VMCP     - Provides a CP operator command to MVS            *   FILE 437\n//*                when it is running under VM.                     *   FILE 437\n//*                                                                 *   FILE 437\n//*     JSCH     -     MEMBERS: JSCH                                *   FILE 437\n//*                Like ASCH, a transaction scheduler, but          *   FILE 437\n//*                this one schedules started tasks rather          *   FILE 437\n//*                then ASCH transactions.                          *   FILE 437\n//*                                                                 *   FILE 437\n//*     PDS upload/download utilities -                             *   FILE 437\n//*                    MEMBERS: OPSYNBRI UPDCREAT UPDSTATS          *   FILE 437\n//*                Utilities to create IEBUPDTE format              *   FILE 437\n//*                sequential files from partitioned                *   FILE 437\n//*                datasets, and restore ISPF statistics            *   FILE 437\n//*                after rebuilding PDS using IEBUPDTE.             *   FILE 437\n//*                                                                 *   FILE 437\n//*                                                                 *   FILE 437\n//*     INVOKE   - TSO Command Processor to call from               *   FILE 437\n//*                LINKLIST/LPALIST                                 *   FILE 437\n//*                                                                 *   FILE 437\n//*     SUBMIT   - Alternate SUBMIT command which does not          *   FILE 437\n//*                call the SUBMIT exit                             *   FILE 437\n//*                                                                 *   FILE 437\n//*     COMPRESS - Command Processor which calls IEBCOPY            *   FILE 437\n//*                to compress                                      *   FILE 437\n//*                                                                 *   FILE 437\n//*     IEFJFRQ  - Protect subsystem command characters by          *   FILE 437\n//*                means of RACF/ACF2                               *   FILE 437\n//*                                                                 *   FILE 437\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "COMPRESS": {"ttr": 523, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x994\\x9f\\x00\\x994\\x9f\\x154\\x01\\x7f\\x01\\x7f\\x00\\x00\\xc9\\xc2\\xd4\\xe4\\xe2\\xc5\\xd9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-12-15T00:00:00", "modifydate": "1999-12-15T15:34:00", "lines": 383, "newlines": 383, "modlines": 0, "user": "IBMUSER"}, "text": "COMPRES0 CSECT ,\nCOMPRES0 AMODE ANY\nCOMPRES0 RMODE ANY\n         BAKR  R14,0\n         LR    R12,R15\n         USING COMPRES0,R12\n*\n         LR    R11,R1                  ESTABLISH ADDRESSABILITY\n         USING CPPL,R11                  TO THE CPPL\n*\n         STORAGE OBTAIN,               OBTAIN WORKAREA                 X\n               LENGTH=WORKALEN\n         LR    R10,R1\n         USING WORKAREA,R10\n         USING PPL,WORKPPL\n         USING IOPL,WORKIOPL\n         USING S99RBX,RBX\n*\n         LA    R13,SAVEAREA\n         MVC   4(4,R1),=C'F1SA'\n         STM   R10,R13,PARMADDR\n*\n         MVC   PPLUPT,CPPLUPT          CALL PARSE ROUTINE\n         MVC   PPLECT,CPPLECT\n         LA    R1,PARMADDR\n         ST    R1,PPLUWA\n         XC    CPECB,CPECB\n         LA    R1,CPECB\n         ST    R1,PPLECB\n         MVC   PPLPCL,=A(COMPRES1)\n         LA    R1,PDL\n         ST    R1,PPLANS\n         MVC   PPLCBUF,CPPLCBUF\n         CALLTSSR EP=IKJPARS,MF=(E,PPL)\n*\n         L     R2,RC\n         LTR   R2,R2\n         BNZ   EXIT\n*\n         LA    R1,RB                   ALLOCATE SYSPRINT\n         ST    R1,RBP\n         OI    RBP,X'80'\n         MVC   RB,DYNRB\n         MVC   RBX,DYNRBX\n         MVC   TU,DYNTU\n         ST    R11,S99ECPPL\n         LA    R1,TUPL\n         ST    R1,A_TUPL\n         LA    R1,RBX\n         ST    R1,A_RBX\n         LA    R1,TUTERM\n         ST    R1,A_TERM\n*\n         L     R1,PDL                  PARAMETER DESCRIPTOR LIST\n         CLC   =H'1',SPRPCE-IKJPARMD(R1)  SYSPRINT SPECIFIED?\n         BNE   NOSYSPR\n         MVC   TUTERM(2),=AL2(DALDUMMY)\nNOSYSPR  DS    0H\n*\n         LA    R1,TUCLOSE\n         ST    R1,A_CLOSE\n         LA    R1,TURETDDN\n         ST    R1,A_RETDDN\n         OI    A_LAST,X'80'\n         LA    R1,RBP\n         DYNALLOC ,\n         LTR   R2,R15\n         BNZ   EXIT\n*\n         MVC   SRPGMPRM,PGMPRM\n         LA    R1,A_PGMP2\n         ST    R1,APGMP2\n         OI    APGMP2,X'80'\n         MVC   SYSPRINT,TUDDNAME\n         MVC   SYSUT2,TU2DDNAM\n         L     R15,CVTPTR\n         L     R15,CVTTVT-CVT(,R15)\n         L     R15,TSVTASF-TSVT(,R15)  TSO SERVICE FACILITY\n         CALL  (15),                                                   X\n               (SRFLAGS,                                               X\n               SRPGM,                                                  X\n               SRPGMLEN,                                               X\n               SRRETC,                                                 X\n               SRREAS,                                                 X\n               SRABND,                                                 X\n               SRPGMPRM),                                              X\n               VL,                                                     X\n               MF=(E,LCALL7)\n*\n         LA    R1,UNRB                 UNALLOCATE SYSUT2\n         ST    R1,UNRBP                (FREE=CLOSE DOES NOT WORK FOR\n         OI    UNRBP,X'80'              IEBCOPY SYSUTX D/SETS)\n         MVC   UNRB,DUNRB\n         MVC   RBX,DYNRBX\n         MVC   TU3,DYNTU3\n         ST    R11,S99ECPPL\n         LA    R1,TUPL3\n         ST    R1,A_UTUPL\n         LA    R1,RBX\n         ST    R1,A_URBX\n         LA    R1,TU3UNDDN\n         ST    R1,A_3DUN\n         OI    A_3LAST,X'80'\n         MVC   TU3DDNAM,TU2DDNAM\n         LA    R1,UNRBP\n         DYNALLOC ,\n*\n         MVC   WORKMSG,MSGCOMP         ISSUE COMPRESSED MESSAGE\n         L     R2,SRRETC\n         LTR   R2,R2\n         BZ    NOMSG\n         CVD   R2,DWORD\n         UNPK  MSGCOMPR,DWORD+5(3)\n         OI    MSGCOMPR+3,C'0'\n         XC    CPECB,CPECB\n         MVC   WORKPUTL,MFLPTL\n         L     R2,CPPLUPT\n         L     R3,CPPLECT\n         LA    R4,WORKMSG\n         PUTLINE PARM=WORKPUTL,                                        X\n               UPT=(2),                                                X\n               ECT=(3),                                                X\n               ECB=CPECB,                                              X\n               OUTPUT=((4),TERM,SINGLE,DATA),                          X\n               MF=(E,IOPL)\n         L     R2,SRRETC               RETURN CODE\nNOMSG    DS    0H\n*\n         IKJRLSA PDL                   RELEASE PDL\n*\nEXIT     DS    0H                      RETURN TO CALLER\n         LR    R1,R13\n         STORAGE RELEASE,                                              X\n               LENGTH=WORKALEN,                                        X\n               ADDR=(1)\n         LR    R15,R2\n         PR    ,\n*\nPROC_DSN DS    0H\n         BAKR  R14,0\n*\n         LM    R7,R9,0(R1)             VALIDCK PARAMETERS\n         LM    R10,R13,0(R8)\n         LA    R13,72(,R13)\n         MVC   4(4,R13),=C'F1SA'\n*\n         LA    R1,RB                   ALLOCATE PDS\n         ST    R1,RBP\n         OI    RBP,X'80'\n         MVC   RB,DYNRB\n         MVC   RBX,DYNRBX\n         MVC   TU2,DYNTU2\n         ST    R11,S99ECPPL\n         LA    R1,TUPL2\n         ST    R1,A_TUPL\n         LA    R1,RBX\n         ST    R1,A_RBX\n         LA    R1,TU2DSN\n         ST    R1,A_2DSN\n*\n         TM    6(R7),X'80'             IS DSNAME PRESENT\n         BZ    PROC_RC4\n         L     R1,0(,R7)               POINTER TO DSNAME\n         LH    R2,4(,R7)               LENGTH OF DSNAME\n         STH   R2,TU2DSLEN\n         BCTR  R2,0\n         EX    R2,MVCDSNAM\n*\n         LA    R1,TU2DISP\n         ST    R1,A_2DISP\n         LA    R1,TU2RETDD\n         ST    R1,A_2RETDD\n         LA    R1,TU2RTORG\n         ST    R1,A_2RTORG\n         OI    A_2LAST,X'80'\n         LA    R1,RBP\n         DYNALLOC ,\n         LTR   R15,R15\n         BNZ   PROC_RC8\n*\n         CLC   TU2RTORG,=H'0'\n         BNZ   HASDSORG\n         TM    14(R7),X'80'\n         BO    NODSORG\n         BZ    PROC_PDS\nHASDSORG DS    0H\n         TM    TU2RTORG,X'40'          PS(U)\n         BO    PROC_RC4\n         TM    TU2RTORG,X'02'          PO(U)\n         BZ    PROC_RC4\nNODSORG  DS    0H\n         TM    14(R7),X'80'            IS MEMBER NAME PRESENT\n         BO    PROC_RC4\nPROC_PDS DS    0H\n*\n         SLR   R15,R15\n         ST    R15,RC\n         PR    ,\n*\nPROC_RC4 DS    0H\n         LA    R15,4\n         ST    R15,RC\n         PR    ,\n*\nPROC_RC8 DS    0H\n         LA    R15,8\n         ST    R15,RC\n         PR    ,\n*\nMVCDSNAM MVC   TU2DSNAM(0),0(R1)\n*\nMSGCOMP  DC    AL2(L'MSGCOMPT+MSGCOMPT-*,0)\nMSGCOMPT DC    C'IEBCOPY RETURNCODE XXXX'\nMSGCOMPR EQU   WORKMSG+2*L'MSGCOMP+19,4,C'C'\n*\nCOMPRES1 IKJPARM ,\nPCE      IKJPOSIT DSNAME,                                              X\n               LIST,                                                   X\n               USID,                                                   X\n               VALIDCK=PROC_DSN,                                       X\n               PROMPT='ENTER DATA SET NAME',                           X\n               HELP=('ENTER NAME OF DATA SET TO BE COMPRESSED')\nSPRPCE   IKJKEYWD DEFAULT='NOSYSPRINT'\n         IKJNAME 'NOSYSPRINT',ALIAS=('NOSYSPR')\n         IKJNAME 'SYSPRINT',ALIAS=('SYSPR')\n         IKJENDP ,\n*\nMFLPTL   PUTLINE MF=L\nL_MFLPTL EQU   *-MFLPTL\n*\n         DS    0H\nDYNRB    DC    AL1(L_DYNRB,S99VRBAL,0,0)\n         DS    H\n         DS    H\nA_TUPL   EQU   RB+*-DYNRB\n         DS    A\nA_RBX    EQU   RB+*-DYNRB\n         DS    A\n         DC    AL1(0,0,0,0)\nL_DYNRB  EQU   *-DYNRB\n*\n         DS    0H\nDUNRB    DC    AL1(L_DUNRB,S99VRBUN,0,0)\n         DS    H\n         DS    H\nA_UTUPL  EQU   UNRB+*-DUNRB\n         DS    A\nA_URBX   EQU   UNRB+*-DUNRB\n         DS    A\n         DC    AL1(0,0,0,0)\nL_DUNRB  EQU   *-DUNRB\n*\n         DS    0H\nDYNRBX   DC    CL6'S99RBX'\n         DC    AL1(S99RBXVR,S99EIMSG,0,0,S99XWARN,0)\n         DC    A(0)\n         DS    F\n         DS    F\n         DS    F\n         DS    F\n         DS    F\nL_DYNRBX EQU   *-DYNRBX\n*\nDYNTU    DS    0H\nSTERM    DC    AL2(DALTERM,0)\nSCLOSE   DC    AL2(DALCLOSE,0)\nSRETDDN  DC    AL2(DALRTDDN,1,L'SRETDDNC)\nSRETDDNC DS    CL8\nL_DYNTU  EQU   *-DYNTU\nTUTERM   EQU   TU+STERM-DYNTU\nTUCLOSE  EQU   TU+SCLOSE-DYNTU\nTURETDDN EQU   TU+SRETDDN-DYNTU\nTUDDNAME EQU   TU+SRETDDNC-DYNTU,L'SRETDDNC,C'C'\n*\nDYNTU2   DS    0H\nSDSN     DC    AL2(DALDSNAM,1,*-*)\nSDSNC    DS    CL44\nSDISP    DC    AL2(DALSTATS,1,L'SDISPC)\nSDISPC   DC    X'08'   SHR\nSRETDD2  DC    AL2(DALRTDDN,1,L'SRETDD2C)\nSRETDD2C DS    CL8\nSRTORG2  DC    AL2(DALRTORG,1,L'SRTORG2C)\nSRTORG2C DS    XL2\nL_DYNTU2 EQU   *-DYNTU2\nTU2DSN   EQU   TU2+SDSN-DYNTU2\nTU2DISP  EQU   TU2+SDISP-DYNTU2\nTU2RETDD EQU   TU2+SRETDD2-DYNTU2\nTU2DSNAM EQU   TU2+SDSNC-DYNTU2,L'SDSNC,C'C'\nTU2DSLEN EQU   TU2+SDSNC-DYNTU2-2,2,C'H'\nTU2DDNAM EQU   TU2+SRETDD2C-DYNTU2,L'SRETDD2C,C'C'\nTU2RTORG EQU   TU2+SRTORG2C-DYNTU2,L'SRTORG2C,C'C'\n*\nDYNTU3   DS    0H\nSUNDDN   DC    AL2(DUNDDNAM,1,L'SUNDDNC)\nSUNDDNC  DS    CL8\nL_DYNTU3 EQU   *-DYNTU3\nTU3UNDDN EQU   TU3+SUNDDN-DYNTU3\nTU3DDNAM EQU   TU3+SUNDDNC-DYNTU3,L'SUNDDNC,C'C'\n*\nPGMPRM   DS    0F\n         DC    A(PGMP1)\nAPGMP2   EQU   *-PGMPRM+SRPGMPRM,4,C'A'\n         DS    A(PGMP2+X'80000000')\nPGMP2    DC    AL2(L_P2)\nP2       DC    XL(11*8)'00'\nSYSPRINT EQU   SRPGMPRM+(P2-PGMPRM)+(5*8),8,C'C'\nSYSUT2   EQU   SRPGMPRM+(P2-PGMPRM)+(8*8),8,C'C'\nL_P2     EQU   *-P2\nL_PGMPRM EQU   *-PGMPRM\nA_PGMP2  EQU   SRPGMPRM+(PGMP2-PGMPRM)\n*\n         DS    0H\nPGMP1    DC    AL2(L'P1)\nP1       DC    C'COMPRESS'\n*\n         DS    0F\nSRFLAGS  DC    AL1(0,0,0,2)            INVOKE A PROGRAM\nSRPGM    DC    C'IEBCOPY'\nSRPGMLEN DC    A(L'SRPGM)\n*\n         LTORG ,\n*\nWORKAREA DSECT ,\nSAVEAREA DS    (2*18)F\nDWORD    DS    1D\nPARMADDR DS    4F\nWORKPPL  DS    XL(L_PPL)\nWORKIOPL DS    XL(L_IOPL)\nWORKPUTL DS    XL(L_MFLPTL)\nWORKMSG  DS    XL(L'MSGCOMP*2+L'MSGCOMPT)\nPDL      DS    1F\nCPECB    DS    1F\nRC       DS    1F\nSRRETC   DS    1F\nSRREAS   DS    1F\nSRABND   DS    1F\nLCALL7   DS    7F\n*\nRBP      DS    A\nRB       DS    XL(L_DYNRB)\nUNRBP    DS    A\nUNRB     DS    XL(L_DUNRB)\n         DS    0H\nRBX      DS    XL(L_DYNRBX)\nTUPL     DS    0F\nA_CLOSE  DS    A\nA_TERM   DS    A\nA_RETDDN DS    A\nA_LAST   EQU   A_RETDDN\nTUPL2    DS    0F\nA_2DSN   DS    A\nA_2DISP  DS    A\nA_2RETDD DS    A\nA_2RTORG DS    A\nA_2LAST  EQU   A_2RTORG\nTUPL3    DS    0F\nA_3DUN   DS    A\nA_3LAST  EQU   A_3DUN\nTU       DS    XL(L_DYNTU)\n         DS    0F\nTU2      DS    XL(L_DYNTU2)\n         DS    0F\nTU3      DS    XL(L_DYNTU3)\n         DS    0F\nSRPGMPRM DS    XL(L_PGMPRM)\nWORKALEN EQU   *-WORKAREA\n*\n         YREGS ,\n*\n         IKJTSVT ,\n         IKJPPL ,\nL_PPL    EQU   *-PPL\n         IKJCPPL ,\nL_CPPL   EQU   *-CPPL\n         IKJIOPL ,\nL_IOPL   EQU   *-IOPL\n*\n         IEFZB4D0 ,\n         IEFZB4D2 ,\n*\n         CVT   DSECT=YES\n*\n         END   ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "COPYFBVB": {"ttr": 769, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x994\\x9f\\x00\\x994\\x9f\\x154\\x01\\x10\\x01\\x10\\x00\\x00\\xc9\\xc2\\xd4\\xe4\\xe2\\xc5\\xd9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-12-15T00:00:00", "modifydate": "1999-12-15T15:34:00", "lines": 272, "newlines": 272, "modlines": 0, "user": "IBMUSER"}, "text": "COPYFBVB CSECT ,\nCOPYFBVB RMODE 24\nCOPYFBVB AMODE 31\n         BAKR  R14,0\n         BASR  R12,0\n         LA    R0,*-COPYFBVB\n         SLR   R12,R0\n         USING COPYFBVB,R12\n         LA    R13,SAVEAREA\n         MVC   4(4,R13),=C'F1SA'\n*\nJFCB1    USING JFCB,SYSUT1J\nJFCB2    USING JFCB,SYSUT2J\nDCB1     USING IHADCB,SYSUT1\nDCB2     USING IHADCB,SYSUT2\n*\n         OPEN  (SYSUT1D,(INPUT),SYSUT2D,(UPDAT),SYSPRINT,(OUTPUT)),    X\n               MODE=31\n         LTR   R10,R15\n         BNZ   RETURN\n*\n         SLR   R10,R10                 RETURN CODE\n*\n         RDJFCB (SYSUT1,,SYSUT2)\n         OI    JFCB1.JFCBIND1,JFCPDS\n         OI    JFCB2.JFCBIND1,JFCPDS\n*\n         MVI   MSG1UT,C'1'\n         TM    JFCB1.JFCRECFM,JFCVAR\n         BO    UT1VAR\n         MVC   MSG1REC,=CL8'FIXED'\nUT1VAR   DS    0H\n         MVC   MSG1VOL,JFCB1.JFCBVOLS\n         MVC   MSG1DSN,JFCB1.JFCBDSNM\n         PUT   SYSPRINT,MSG1\n         MVI   MSG1ASA,C' '\n         MVC   MSG1REC,=CL8'VARIABLE'\n         TM    JFCB2.JFCRECFM,JFCVAR\n         BO    UT2VAR\n         MVC   MSG1REC,=CL8'FIXED'\nUT2VAR   DS    0H\n         MVI   MSG1UT,C'2'\n         MVC   MSG1VOL,JFCB2.JFCBVOLS\n         MVC   MSG1DSN,JFCB2.JFCBDSNM\n         PUT   SYSPRINT,MSG1\n*\nGETDREC  DS    0H\n         GET   SYSUT1D\n         LH    R2,0(,R1)               LENGTH OF DIRECTORY BLOCK\n         BCTR  R2,0\n         LA    R3,2(,R1)\n         LA    R5,0(R2,R1)\nMEMLOOP  DS    0H\n         CLC   =X'FFFFFFFFFFFFFFFF',0(R3)      END-OF-DIRECTORY\n         BE    EODIR\n*\n         MVC   JFCB1.JFCBELNM,0(R3)    COPY MEMBER NAME\n         MVC   JFCB2.JFCBELNM,0(R3)\n         OPEN  (SYSUT1,(INPUT),SYSUT2,(OUTPUT)),TYPE=J\n         LTR   R10,R15\n         BNZ   ADVDIR\nGSYSUT1  DS    0H\n         GET   SYSUT1\n         LR    R2,R1                   INPUT RECORD ADDRESS IN R2\n         TM    DCB1.DCBRECFM,DCBRECF   INPUT RECFM=FB\n         BO    UT1RECF\n*\n* VB INPUT DATASET\n*\n         LH    R6,0(,R2)               RECORD LENGTH\n         SH    R6,=H'4'                SUBTRACT RDW LEN\n         BNP   UT1VEOL                 RECORD LENGHT IS 0\nUT1VFEOL DS    0H\n         LA    R7,3(R6,R2)             POINT TO LAST BYTE IN RECORD\n         CLI   0(R7),X'40'             IS BYTE A BLANK?\n         BNE   UT1VEOL\n         BCT   R6,UT1VFEOL\nUT1VEOL  DS    0H                      R6 CONTAINS DATA LENGTH\n         LA    R7,4(,R2)               POINTER TO NUMBER FIELD\n         SH    R6,=H'8'\n         BP    UT1NUM\n         SLR   R7,R7                   NO NUMBER FIELD\n         SLR   R6,R6                   NO DATA FIELD\nUT1NUM   DS    0H\n         LA    R8,12(,R2)              POINTER TO DATA RECORD\n         B     R6LEN\n*\n* FB INPUT DATASET\n*\nUT1RECF  DS    0H\n         LR    R1,R2\n         BCTR  R1,0\n         LH    R6,DCB1.DCBLRECL\n         SH    R6,=H'8'                LENGTH OF NUMBER FIELD\nUT1FFEOL DS    0H\n         LA    R7,0(R6,R1)             ADDRESS LAST BYTE IN RECORD\n         CLI   0(R7),X'40'\n         BNE   UT1FEOL\n         BCT   R6,UT1FFEOL\nUT1FEOL  DS    0H\n         SLR   R7,R7                   ASSUME NO NUMBERS\n         LH    R9,DCB1.DCBLRECL\n         SH    R9,=H'8'\n         LA    R9,0(R9,R2)\n         CLC   =CL8' ',0(R9)           ARE THERE SEQUENCE NUMBERS\n         BE    UT1NONUM\n         LR    R7,R9                   POINTER TO NUMBER FIELD\nUT1NONUM DS    0H\n         LR    R8,R2                   POINTER TO DATA FIELD\n*\n* R6 CONTAINS LENGTH OF DATA PORTION RECORD\n* R7 CONTAINS POINTER TO NUMBER FIELD OR ZERO\n* R8 CONTAINS POINTER TO DATA FIELD\n*\nR6LEN    DS    0H\n         LH    R9,DCB2.DCBLRECL  ***\n         TM    DCB2.DCBRECFM,DCBRECV\n         BZ    UT2NOTV\n         LA    R0,4+8(,R6)\n         STH   R0,DCB2.DCBLRECL\nUT2NOTV  DS    0H\n         PUT   SYSUT2\n         STH   R9,DCB2.DCBLRECL  ***\n         TM    DCB2.DCBRECFM,DCBRECF\n         BO    UT2F\n*\n* VB OUTPUT DATASET\n*\n         MVC   4(8,R1),=CL8' '         INIT NUMBER FIELD\n         LTR   R7,R7\n         BZ    UT2NONUM\n         MVC   4(8,R1),0(R7)           COPY NUMBER FIELD\nUT2NONUM DS    0H\n         LA    R0,4+8(,R6)             RDW LEN\n         STH   R0,0(,R1)               RECORD LENGTH\n         STCM  R0,B'1100',2(R1)        ZEROS\n         LTR   R6,R6\n         BZ    GSYSUT1\n         BCTR  R6,0\n         EX    R6,COPYVREC\n         B     GSYSUT1\nCOPYVREC MVC   12(0,R1),0(R8)\n*\n* FB OUTPUT DATASET\n*\nUT2F     DS    0H\n         LH    R9,DCB2.DCBLRECL\n         SH    R9,=H'8'\n         LA    R9,0(R9,R1)\n         MVC   0(8,R9),=CL8' '\n         LTR   R7,R7\n         BZ    UT2NOSEQ\n         MVC   0(8,R9),0(R7)\nUT2NOSEQ DS    0H\n         MVI   0(R1),C' '\n         LH    R9,DCB2.DCBLRECL\n         SH    R9,=AL2(8+1+1)\n         EX    R9,CLRFREC\n         LTR   R6,R6\n         BZ    GSYSUT1\n         BCTR  R6,0\n         EX    R6,COPYFREC\n         B     GSYSUT1\nCOPYFREC MVC   0(0,R1),0(R8)\nCLRFREC  MVC   1(0,R1),0(R1)\n*\nSYNAD    DS    0H\n         SYNADAF ACSMETH=QSAM\n         MVC   MSG3SYNA,36+8(R1)\n         CLOSE (SYSUT1,,SYSUT2),MODE=31\n         STOW  SYSUT2D,JFCB2.JFCBELNM,D\n         MVC   MSG3MN,0(3)\n         PUT   SYSPRINT,MSG3\n         LA    R10,8\n         B     ADVDIR\n*\nEODAD    DS    0H\n         CLOSE (SYSUT1,,SYSUT2),MODE=31\n         MVC   MSG2MN,0(3)\n         PUT   SYSPRINT,MSG2\n*\nADVDIR   DS    0H\n         IC    R4,11(,R3)              USERDATA LENGTH IN HW\n         N     R4,=XL4'1F'\n         SLL   R4,1\n         LA    R4,12(,R4)              ENTRY LENGTH\n         BXLE  R3,R4,MEMLOOP\n         B     GETDREC\nEODIR    DS    0H\n*\nEXIT     DS    0H\n         PUT   SYSPRINT,MSG4\n         CLOSE (SYSUT1D,,SYSUT2D,,SYSPRINT),MODE=31\n*\nRETURN   DS    0H\n         LR    R15,R10\n         PR    ,\n*\n         LTORG ,\n*\nSYSPRINT DCB   DDNAME=SYSPRINT,                                        X\n               DSORG=PS,                                               X\n               RECFM=VBA,                                              X\n               LRECL=133,                                              X\n               MACRF=PM\n*\nSYSUT1D  DCB   DDNAME=SYSUT1,                                          X\n               DEVD=DA,                                                X\n               DSORG=PS,                                               X\n               MACRF=GL,                                               X\n               LRECL=256,                                              X\n               RECFM=F,                                                X\n               BLKSIZE=256,                                            X\n               DCBE=SYSUT1DE\nSYSUT1DE DCBE  RMODE31=BUFF\n*\nSYSUT1   DCB   DDNAME=SYSUT1,                                          X\n               DEVD=DA,                                                X\n               DSORG=PS,                                               X\n               MACRF=GL,                                               X\n               EXLST=SYSUT1X,                                          X\n               DCBE=SYSUT1E\nSYSUT1X  DC    AL1(X'87'),AL3(SYSUT1J)\nSYSUT1J  DS    0F,XL(JFCBLGTH)\nSYSUT1E  DCBE  RMODE31=BUFF,                                           X\n               EODAD=EODAD,                                            X\n               SYNAD=SYNAD\n*\nSYSUT2   DCB   DDNAME=SYSUT2,                                          X\n               DEVD=DA,                                                X\n               DSORG=PS,                                               X\n               MACRF=PL,                                               X\n               EXLST=SYSUT2X,                                          X\n               DCBE=SYSUT2E\nSYSUT2X  DC    AL1(X'87'),AL3(SYSUT2J)\nSYSUT2J  DS    0F,XL(JFCBLGTH)\nSYSUT2E  DCBE  RMODE31=BUFF\n*\nSYSUT2D  DCB   DDNAME=SYSUT2,                                          X\n               DEVD=DA,                                                X\n               DSORG=PO,                                               X\n               MACRF=(R,W)\n*\nMSG1     DC    AL2(4+L'MSG1TEXT,0)\nMSG1TEXT DC    C'1SYSUTX RECFM=VARIABLE VOL=123456 DSN=12345678.1234567X\n               8.12345678.12345678.12345678'\nMSG1ASA  EQU   MSG1TEXT,1,C'C'\nMSG1UT   EQU   MSG1TEXT+6,1,C'C'\nMSG1REC  EQU   MSG1TEXT+14,8,C'C'\nMSG1VOL  EQU   MSG1TEXT+27,6,C'C'\nMSG1DSN  EQU   MSG1TEXT+38,44,C'C'\n*\nMSG2     DC    AL2(4+L'MSG2TEXT,0)\nMSG2TEXT DC    C' MEMBER 12345678 COPIED'\nMSG2MN   EQU   MSG2TEXT+8,8,C'C'\n*\nMSG3     DC    AL2(4+L'MSG3TEXT,0)\nMSG3TEXT DC    CL120' I/O ERROR ON MEMBER 12345678'\nMSG3MN   EQU   MSG3TEXT+21,8,C'C'\nMSG3SYNA EQU   MSG3TEXT+36,120-36,C'C'\n*\nMSG4     DC    AL2(4+L'MSG4TEXT,0)\nMSG4TEXT DC    C' COPY COMPLETE'\n*\nSAVEAREA DS    18F\n*\n         YREGS ,\n         DCBD  DSORG=PO,DEVD=DA\nJFCB     DSECT ,\n         IEFJFCBN ,\n*\n         END   COPYFBVB,(JAN JAEGER,0101,93120)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEFJFRQ": {"ttr": 774, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x994\\x9f\\x00\\x994\\x9f\\x154\\x00\\xdb\\x00\\xdb\\x00\\x00\\xc9\\xc2\\xd4\\xe4\\xe2\\xc5\\xd9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-12-15T00:00:00", "modifydate": "1999-12-15T15:34:00", "lines": 219, "newlines": 219, "modlines": 0, "user": "IBMUSER"}, "text": "./ ADD NAME=IEFJFRQ     01 02 97217 97217 101829 0218 0206 0031 NLX1896\n//NLX1896N JOB NL057100,'JAN JAEGER',NOTIFY=NLX1896\n/*XEQ ZTMIST\n//ASMA90   EXEC PGM=ASMA90,PARM='DECK,NOOBJ'\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.MODGEN,DISP=SHR\n//SYSUT1   DD  UNIT=SYSALLDA,SPACE=(CYL,10)\n//SYSPUNCH DD  DSN=&&PUNCH,DISP=(NEW,PASS),UNIT=SYSALLDA,SPACE=(CYL,10)\n TITLE 'IEFJFRQ - PROTECT SUBSYSTEM COMMANDS ISSUED THROUGH MGCR'\n***********************************************************************\n*                                                                     *\n* JUSTIFICATION:                                                      *\n*   MVS does not issue CMDAUTH's for commands that are being issued   *\n*   through MGCR, but are processed by subsystems (such as DB2).      *\n*   This exit will protect commands that use a command character.     *\n*                                                                     *\n* FUNCTION:                                                           *\n*   This exit will issue a CMDAUTH for every possible command         *\n*   character (such as !, @, # etc).                                  *\n*                                                                     *\n* LOGIC:                                                              *\n*   Check if called in TCB mode, exit if SRB mode.                    *\n*   Check function code, if not functioncode 10 then exit.            *\n*   Lookup first character in table, if non-existent then exit.       *\n*   Issue CMDAUTH to verify command access.                           *\n*   If access ok then exit else set return code SSCMIMSG              *\n*                                                                     *\n* CONSTANTS:                                                          *\n*   CommandCharacter -> profile conversion table                      *\n*                                                                     *\n* RACF:                                                               *\n*   CLASS(OPERCMDS) PROFILE(CMDCHAR.*)                                *\n*                                                                     *\n* REGISTER USAGE:                                                     *\n*   R0    WORK                                                        *\n*   R1    PARMLIST                                                    *\n*   R2-R7 WORK                                                        *\n*   R8    MGCRPL                                                      *\n*   R9    SSCM                                                        *\n*   R10   SSOB                                                        *\n*   R11   FRQP parmlist                                               *\n*   R12   Base                                                        *\n*   R13   FRQP DYNAREA                                                *\n*   R14   RETURN ADDR                                                 *\n*   R15   ENTRY POINT ADDRESS + RETURN CODE                           *\n*                                                                     *\n* ATTRIBUTES:                                                         *\n*   AMODE(31),RMODE(ANY),REFR                                         *\n*                                                                     *\n* HISTORY:                                                            *\n*   DATE       BY              COMMENTS                               *\n*   23/01/96   JAN JAEGER      INITIAL VERSION                        *\n*                                                                     *\n***********************************************************************\nIEFJFRQ  RSECT ,\nIEFJFRQ  AMODE 31\nIEFJFRQ  RMODE ANY\n         B     SKIPHDR-*(,R15)         BRANCH AROUND EYE CATCHER\n         DC    AL1(L'EYECATCH)\nEYECATCH DC    C'IEFJFRQ-J.JAEGER-&SYSDATE.-&SYSTIME.'\nSKIPHDR  DS    0H\n         BAKR  R14,0                   Stack registers and set retaddr\n         BASR  R12,0                   Set base register\n         LA    R2,*-IEFJFRQ\n         SLR   R12,R2\n         USING IEFJFRQ,R12\n         USING PSA,0\n         USING FRQP_PLIST_AREA,R1\n*\n         L     R13,FRQP_DYNAREA@       Use WORKAREA\n         MVC   4(4,R1),=CL4'F1SA'      Indicate linkage stack used\n         USING WORKAREA,R13\n*\n         L     R11,FRQP_PLIST@\n         USING FRQP,R11\n         CLC   FRQPID,=A(FRQPCID)      Acronym check\n         BNE   RETURNER\n         CLC   FRQPVERS,=AL2(FRQPCVER) Version check\n         BNE   RETURNER\n         TM    FRQP_INPUT_FLAG1,FRQP_PRE_RQST  Pre-request\n         BNO   RETURNOK\n         L     R10,FRQP_SSOB@          SSOB pointer\n         USING SSOB,R10\n         CLC   SSOBID,=C'SSOB'         Acronym check\n         BNE   RETURNER\n         CLC   SSOBFUNC,=AL2(SSOBCMND) Function code 10\n         BNE   RETURNOK\n         L     R9,SSOBINDV             Pointer to extension\n         USING SSCMBGN,R9\n         CLC   SSCMACRN,=C'SSCM'       Acronym check\n         BNE   RETURNER\n         CLI   SSCMVRSN,SSCMVRID       Version Check\n         BNE   RETURNER\n         L     R8,SSCMBUFF             Pointer to MGCR parm list\n         USING MGCRPL,R8\n*\n         CLC   =F'0',PSATOLD\n         BE    RETURNOK                Cannot be in SRB mode\n*\n         SLR   R2,R2\n         IC    R2,MGCRTEXT             Command character\n         IC    R2,CHARTAB(R2)          Exists in special char table\n         LTR   R2,R2\n         BNZ   VRFYCMD                 Yes: verify access\n*\n* Return to caller\n*\nRETURNOK DS    0H\n         LA    R15,FRQP_PROCEED\n         PR    ,\n*\n* Invalid Parameter list\n*\nRETURNER DS    0H\n         SDUMP HDR='IEFJFRQ INVALID PARAMETER LIST'\n         LA    R15,FRQP_PROCEED\n         PR    ,\n*\nVRFYCMD  DS    0H\n         SLL   R2,4                    Multiply by 16\n         LA    R2,NAMETAB-16(R2)       Use as index into suffix table\n         MVC   PROFNAME(L'PREFIX),PREFIX\n         MVC   PROFNAME+L'PREFIX(16),0(R2)\n         MVC   PROFNAME+24,=CL15' '\n*\n         CMDAUTH ENTITY=PROFNAME,      Profile name                    X\n               ATTR=READ,              ACCESS(READ)                    X\n               CNTLBLK=(9),            SSCM base                       X\n               CBLKTYPE=SSCM,                                          X\n               MSGSUPP=YES,            BYPASS OW12696                  X\n               MF=(E,CMDAUTH)\n         LTR   R15,R15\n         BZ    RETURNOK\n*\nRETURNNA DS    0H\n         MVC   SSOBRETN,=A(SSCMIMSG)   Do not process command\n         LA    R0,SSRTOK\n         LA    R15,FRQP_STOP_EXIT_ROUTINE_CALLS\n         PR    ,\n*\nCHARTAB  DC    256X'00'\n         ORG   CHARTAB+X'4A'\n         DC    AL1(1,2,3,4,5,6,7)          4A..50\n         ORG   CHARTAB+X'5A'\n         DC    AL1(8,9,10,11,12,13,14,15)  5A..61\n         ORG   CHARTAB+X'6A'\n         DC    AL1(16,17,18,19,20,21)      6A..6F\n         ORG   CHARTAB+X'79'\n         DC    AL1(22,23,24,25,26,27,28)   79..7F\n         ORG   CHARTAB+X'A1'\n         DC    AL1(29)                     A1\n         ORG   CHARTAB+X'C0'\n         DC    AL1(30)                     C0\n         ORG   CHARTAB+X'D0'\n         DC    AL1(31)                     D0\n         ORG   CHARTAB+X'E0'\n         DC    AL1(32)                     E0\n         ORG   ,\n*\nNAMETAB  DC    CL16'CENT'                  >\n         DC    CL16'PERIOD'                .\n         DC    CL16'SMALLERTHEN'           <\n         DC    CL16'BRACKETOPEN'           (\n         DC    CL16'PLUS'                  +\n         DC    CL16'VERTICALBARC'          \u00a6\n         DC    CL16'AMPERSANT'             &\n         DC    CL16'EXCLAMATION'           !\n         DC    CL16'DOLLAR'                $\n         DC    CL16'ASTERISK'              *\n         DC    CL16'BRACKETCLOSE'          )\n         DC    CL16'SEMICOLON'             ;\n         DC    CL16'NOT'                   \u00ac\n         DC    CL16'MINUS'                 -\n         DC    CL16'SLASH'                 /\n         DC    CL16'VERTICALBARO'          \u00e7\n         DC    CL16'COMMA'                 ,\n         DC    CL16'PERCENT'               %\n         DC    CL16'UNDERSCORE'            _\n         DC    CL16'GREATERTHEN'           >\n         DC    CL16'QUESTIONMARK'          ?\n         DC    CL16'BACKQUOTE'             `\n         DC    CL16'COLON'                 :\n         DC    CL16'HASH'                  #\n         DC    CL16'AT'                    @\n         DC    CL16'QUOTE'                 '\n         DC    CL16'EQUALS'                =\n         DC    CL16'DOUBLEQUOTE'           \"\n         DC    CL16'TILDE'                 ~\n         DC    CL16'PARENTOPEN'            {\n         DC    CL16'PARENTCLOSE'           }\n         DC    CL16'BACKSLASH'             \\\n*\nPREFIX   DC    C'CMDCHAR.'\n*\n         LTORG ,\n*\nWORKAREA DSECT ,\nSAVEAREA DS    18F                     Savearea must be first\n         CMDAUTH MF=(L,CMDAUTH,NODSECT)\nPROFNAME DS    CL39                    Profile name\nWORKLEN  EQU   *-WORKAREA\n         DS    XL(FRQP_DYNSIZE-WORKLEN)  Check workarea size\n*\n         IEZMGCR ,\n         IEFJSSOB CM\n         IEFJFRQP ,\n         IHAPSA ,\n         YREGS ,\n*\n         END   ,\n//IEWL     EXEC PGM=HEWLKED,PARM='REFR,RENT,AMODE=31,RMODE=ANY'\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=SYSALLDA,SPACE=(CYL,10)\n//*YSLMOD  DD  DSN=&&LOAD(TEMPNAME),DISP=(NEW,PASS),\n//*         UNIT=SYSALLDA,SPACE=(TRK,(1,,1)),\n//*         DCB=(SYS1.LINKLIB)\n//SYSLMOD  DD  DSN=SYS1.MVS.LINKLIB(IEFJFRQ),DISP=SHR\n//SYSLIN   DD  DSN=&&PUNCH,DISP=(OLD,DELETE)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "INVOKE": {"ttr": 779, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x994\\x9f\\x00\\x994\\x9f\\x154\\x01\\x1b\\x01\\x1b\\x00\\x00\\xc9\\xc2\\xd4\\xe4\\xe2\\xc5\\xd9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-12-15T00:00:00", "modifydate": "1999-12-15T15:34:00", "lines": 283, "newlines": 283, "modlines": 0, "user": "IBMUSER"}, "text": "INVOKE0  CSECT ,\nINVOKE0  AMODE 31\nINVOKE0  RMODE ANY\n         BAKR  R14,0\n         LR    R12,R15\n         USING INVOKE0,R12\n*\n         LR    R11,R1                  ESTABLISH ADDRESSABILITY\n         USING CPPL,R11                  TO THE CPPL\n*\n         STORAGE OBTAIN,               OBTAIN WORKAREA                 X\n               LENGTH=WORKALEN,                                        X\n               LOC=BELOW\n         LR    R10,R1\n         USING WORKAREA,R10\n         USING PPL,WORKPPL\n         USING IOPL,WORKIOPL\n         LA    R13,SAVEAREA\n         MVC   4(4,R13),=C'F1SA'\n         STM   R10,R13,PGMREGS\n*\n         MVC   PPLUPT,CPPLUPT          CALL PARSE ROUTINE\n         MVC   PPLECT,CPPLECT\n         XC    CPECB,CPECB\n         LA    R1,PGMREGS\n         ST    R1,PPLUWA\n         LA    R1,CPECB\n         ST    R1,PPLECB\n         MVC   PPLPCL,=A(INVOKE1)\n         LA    R1,PDL\n         ST    R1,PPLANS\n         MVC   PPLCBUF,CPPLCBUF\n         CALLTSSR EP=IKJPARS,MF=(E,PPL)\n*\n         MVI   SWITCHES,0\n*\n         TM    PDS2FTB1,PDSAPFLG       APF SECTION?\n         BZ    NOAPF\n         LA    R1,PDSBCEND             END OF BASIC SECTION\n         TM    PDS2ATR1,PDS2SCTR\n         BZ    NOSCTR\n         LA    R1,PDSS01LN(,R1)\nNOSCTR   DS    0H\n         TM    PDS2INDC,PDS2ALIS\n         BZ    NOALIAS\n         LA    R1,PDSS02LN(,R1)\nNOALIAS  DS    0H\n         TM    PDS2FTB1,PDS2SSI\n         BZ    NOSSI\n         AL    R1,=F'1'\n         N     R1,=F'-2'\n         LA    R1,PDSS03LN(,R1)\nNOSSI    DS    0H\n         CLC   =X'0101',0(R1)          IS THIS AN AC=1 MODULE\n         BNE   NOAPF\n         OI    SWITCHES,PGMTSF         DEFAULT TO TSF FOR APF MODULE\nNOAPF    DS    0H\n*\n         L     R9,PDL                  PARAMETER DESCRIPTOR LIST\n         USING IKJPARMD,R9\n*\n         LA    R1,PGMPARML             BUILD PROGRAM PARAMETER\n         ST    R1,PGMPARMA\n         OI    PGMPARMA,X'80'\n         XC    PGMPARML,PGMPARML\n         TM    PRMPCE+6,X'80'\n         BZ    NOPARM\n         L     R1,PRMPCE\n         LH    R2,PRMPCE+4\n         STH   R2,PGMPARML\n         BCTR  R2,0\n         EX    R2,MVCPARM              COPY PARM\nNOPARM   DS    0H\n*\n         LH    R2,TSFPCE               CHECK FOR TSF/NOTSF\n         LTR   R2,R2\n         BZ    NOTSFPRM\n         NI    SWITCHES,255-PGMTSF\n         CH    R2,=H'1'\n         BNE   NOTSFPRM\n         OI    SWITCHES,PGMTSF\nNOTSFPRM DS    0H\n*\n         CLC   DMPPCE,=H'1'            CHECK FOR DUMP/NODUMP\n         BNE   NODUMP\n         OI    SWITCHES,PGMDUMP\nNODUMP   DS    0H\n*\n         CLC   CAPPCE,=H'1'            CHECK FOR CAPS/ASIS\n         BNE   NODUMP\n         OI    SWITCHES,PGMCAPS\n         OC    PGMPARMC,=CL256' '      FORCE PARM UPPERCASE\nNOCAPS   DS    0H\n*\n         IKJRLSA PDL                   RELEASE PDL\n         DROP  R9\n*\n         TM    SWITCHES,PGMTSF\n         BO    DOTSF\n*\n* LINK TO PROGRAM\n*\n         MVC   LLINK,MFLLINK\n         LINK  DE=PDS2,                                                X\n               MF=(E,PGMPARMA),                                        X\n               SF=(E,LLINK)\n         LR    R2,R15\n         B     EXIT\n*\n* CALL PROGRAM THROUGH TSO SERVICE FACILITY\n*\nDOTSF    DS    0H\n         MVC   SFFLAGS,=AL1(0,0,0,2)\n         TM    SWITCHES,PGMDUMP\n         BZ    NOSFDMP\n         MVI   SFFLAGS+2,1\nNOSFDMP  DS    0H\n         L     R15,CVTPTR\n         L     R15,CVTTVT-CVT(,R15)\n         L     R15,TSVTASF-TSVT(,R15)  TSO SERVICE FACILITY\n         CALL  (15),                                                   X\n               (SFFLAGS,                                               X\n               PDS2NAME,                                               X\n               PGMLEN,                                                 X\n               SFRETC,                                                 X\n               SFREAS,                                                 X\n               SFABND,                                                 X\n               PGMPARMA),                                              X\n               VL,                                                     X\n               MF=(E,LCALL7)\n         LTR   R2,R15\n         BZ    EXIT\n         CH    R2,=H'12'\n         BH    PARMERR\n         B     *(R2)\n         B     TSFRC4\n         B     TSFRC8\nTSFRC12  DS    0H                      SIMULATE ABEND\n         L     R1,SFABND\n         L     R2,SFREAS\n         ABEND (1),REASON=(2)\nTSFRC4   DS    0H                      SIMULATE RETURN CODE\n         L     R2,SFRETC\n         B     EXIT\nTSFRC8   DS    0H                      ATTENTION INTERRUPT\n         LA    R2,12\n         LA    R5,MSGATTN\n         B     DOMSG\nPARMERR  DS    0H                      TSF PARAMETER ERROR\n         LA    R2,16\n         LA    R5,MSGPRME\nDOMSG    DS    0H\n         XC    CPECB,CPECB\n         MVC   WORKPUTL,MFLPTL\n         L     R3,CPPLUPT\n         L     R4,CPPLECT\n         PUTLINE PARM=WORKPUTL,                                        X\n               UPT=(3),                                                X\n               ECT=(4),                                                X\n               ECB=CPECB,                                              X\n               OUTPUT=((5),TERM,SINGLE,DATA),                          X\n               MF=(E,IOPL)\n*\nEXIT     DS    0H                      RETURN TO CALLER\n         LR    R1,R13\n         STORAGE RELEASE,                                              X\n               LENGTH=WORKALEN,                                        X\n               ADDR=(1)\n         LR    R15,R2\n         PR    ,\n*\nMVCPARM  MVC   PGMPARMC(0),0(R1)\n*\nDOBLDL   DS    0H                      ISSUE BLDL FOR PROGRAM NAME\n         BAKR  R14,0\n         LM    R7,R9,0(R1)\n         LM    R10,R13,0(R8)\n         LR    R6,R1\n         LA    R13,72(,R13)\n         MVC   4(4,R13),=C'F1SA'\n*\n         MVC   BLDLPARM,=AL2(1,BLDLLL)\n         MVC   PDS2NAME,=CL8' '\n         TM    6(R7),X'80'\n         BZ    RC4\n         L     R1,0(,R7)\n         LH    R2,4(,R7)\n         ST    R2,PGMLEN\n         BCTR  R2,0\n         EX    R2,MVCPGMNM\n         BLDL  0,BLDLPARM\n         LTR   R15,R15\n         BNZ   RC4\n*\n         PR    ,\n*\nRC4      DS    0H\n         LA    R15,4\n         MVC   8(4,R6),=A(MSGBLDL)\n         PR    ,\n*\nMVCPGMNM MVC   PDS2NAME(0),0(R1)\n*\nMSGBLDL  DC    AL2(L'MSGBLDLT+MSGBLDLT-*,0)\nMSGBLDLT DC    C'BLDL FAILED FOR SPECIFIED PROGRAM NAME'\n*\nMSGATTN  DC    AL2(L'MSGATTNT+MSGATTNT-*,0)\nMSGATTNT DC    C'PROGRAM TERMINATED BY ATTENTION INTERRUPT'\n*\nMSGPRME  DC    AL2(L'MSGPRMET+MSGPRMET-*,0)\nMSGPRMET DC    C'TSO SERVICE FACILITY PARAMETER ERROR'\n*\nMFLPTL   PUTLINE MF=L\nL_MFLPTL EQU   *-MFLPTL\n*\nMFLLINK  LINK  SF=L\nL_LINK   EQU   *-MFLLINK\n*\nINVOKE1  IKJPARM ,\nPGMPCE   IKJIDENT 'PGMNAME',                                           X\n               UPPERCASE,                                              X\n               MAXLNTH=8,                                              X\n               FIRST=ALPHA,                                            X\n               OTHER=ALPHANUM,                                         X\n               VALIDCK=DOBLDL,                                         X\n               PROMPT='ENTER PROGRAM NAME',                            X\n               HELP=('ENTER NAME OF PROGRAM TO BE INVOKED')\nPRMPCE   IKJPOSIT QSTRING,                                             X\n               ASIS,                                                   X\n               HELP=('ENTER PROGAM PARAMETER IN QUOTES')\nTSFPCE   IKJKEYWD\n         IKJNAME 'TSF',ALIAS=('NOTASK')\n         IKJNAME 'NOTSF',ALIAS=('TASK','LINK')\nDMPPCE   IKJKEYWD DEFAULT='NODUMP'\n         IKJNAME 'DUMP'\n         IKJNAME 'NODUMP'\nCAPPCE   IKJKEYWD DEFAULT='ASIS'\n         IKJNAME 'ASIS',ALIAS=('NOCAPS')\n         IKJNAME 'CAPS'\n         IKJENDP ,\n*\n         LTORG ,\n*\nWORKAREA DSECT ,\nSAVEAREA DS    (2*18)F\nPGMREGS  DS    4F\nCPECB    DS    1F\nWORKPPL  DS    XL(L_PPL)\nWORKIOPL DS    XL(L_IOPL)\nWORKPUTL DS    XL(L_MFLPTL)\nPDL      DS    1F\nBLDLPARM DS    1F\n         IHAPDS DSECT=NO\nBLDLLL   EQU   *-PDS2\nPGMLEN   DS    F\nSWITCHES DS    1X\nSFFLAGS  DS    F\nSFRETC   DS    F\nSFREAS   DS    F\nSFABND   DS    F\nLCALL7   DS    7F\nPGMTSF   EQU   B'10000000'             TSF/NOTSF\nPGMDUMP  EQU   B'01000000'             DUMP/NODUMP\nPGMCAPS  EQU   B'00100000'             CAPS/NOCAPS\nLLINK    DS    XL(L_LINK)\nPGMPARMA DS    F\nPGMPARML DS    H\nPGMPARMC DS    CL256\nWORKALEN EQU   *-WORKAREA\n*\n         YREGS ,\n*\n         IKJTSVT ,\n         IKJPPL ,\nL_PPL    EQU   *-PPL\n         IKJCPPL ,\nL_CPPL   EQU   *-CPPL\n         IKJIOPL ,\nL_IOPL   EQU   *-IOPL\n*\n         CVT   DSECT=YES\n*\n         END   ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IRXJCLM": {"ttr": 1030, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x994\\x9f\\x00\\x994\\x9f\\x154\\x00?\\x00?\\x00\\x00\\xc9\\xc2\\xd4\\xe4\\xe2\\xc5\\xd9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-12-15T00:00:00", "modifydate": "1999-12-15T15:34:00", "lines": 63, "newlines": 63, "modlines": 0, "user": "IBMUSER"}, "text": "./ ADD NAME=IRXJCLM     01 00 94339 94339 142221 0062 0060 0000 T2JJ\n//T2JJREXX JOB 11102075300000056146,'JAN JAEGER',CLASS=B,NOTIFY=T2JJ\n//*\n//*   EX T2JJ.PH.CNTL(IRXJCL)\n//*\n//IEBUPDTE EXEC PGM=IEBUPDTE,PARM=NEW\n//SYSPRINT DD  SYSOUT=*\n//SYSUT2   DD  DSN=&&SYSEXEC,DISP=(NEW,PASS),\n//          UNIT=VIO,SPACE=(TRK,(1,1,1)),\n//          DCB=(RECFM=FB,BLKSIZE=80,LRECL=80)\n@/ ADD NAME=REXX\n  numeric digits 16;\n  pi = acos(-1); e = exp(1);\n  say 'pi          =' pi;\n  say 'e           =' e;\n  say 'acos(-1)    =' acos(-1);      /* pi */\n  say 'acos(0)*2   =' acos(0)*2;     /* pi */\n  say 'asin(0)     =' asin(0);       /* 0 */\n  say 'asin(.5)*6  =' asin(.5)*6;    /* pi */\n  say 'atan(0)     =' atan(0);       /* 0 */\n  say 'atan(1)*4   =' atan(1)*4;     /* pi */\n  say 'atand(0)    =' atand(0);      /* 0 */\n  say 'atand(1)    =' atand(1);      /* 45 */\n  say 'cos(0)      =' cos(0);        /* 1 */\n  say 'cos(pi/3)   =' cos(pi/3);     /* .5 */\n  say 'cosd(0)     =' cosd(0);       /* 0 */\n  say 'cosd(60)    =' cosd(60);      /* .5 */\n  say 'cosh(0)     =' cosh(0);       /* 1 */\n  say 'erf(0)      =' erf(0);        /* 0 */\n  say 'erf(10)     =' erf(10);       /* 1 */\n  say 'erfc(0)     =' erfc(0);       /* 1 */\n  say 'erfc(-10)   =' erfc(-10);     /* 2 */\n  say 'exp(0)      =' exp(0);        /* 1 */\n  say 'exp(1)      =' exp(1);        /* e */\n  say 'log(1)      =' log(1);        /* 0 */\n  say 'log(e)      =' log(e);        /* 1 */\n  say 'log10(1)    =' log10(1);      /* 0 */\n  say 'log10(1000) =' log10(1000);   /* 3 */\n  say 'log2(1)     =' log2(1);       /* 0 */\n  say 'log2(8)     =' log2(8);       /* 3 */\n  say 'sin(0)      =' sin(0);        /* 0 */\n  say 'sin(pi/6)   =' sin(pi/6);     /* .5 */\n  say 'sin(pi/2)   =' sin(pi/2);     /* 1 */\n  say 'sind(0)     =' sind(0);       /* 0 */\n  say 'sind(30)    =' sind(30);      /* .5 */\n  say 'sind(90)    =' sind(90);      /* 1 */\n  say 'sinh(0)     =' sinh(0);       /* 0 */\n  say 'sqrt(1)     =' sqrt(1);       /* 1 */\n  say 'sqrt(2)     =' sqrt(2);       /* 1.4... */\n  say 'sqrt(9)     =' sqrt(9);       /* 3 */\n  say 'tan(0)      =' tan(0);        /* 0 */\n  say 'tan(pi/4)   =' tan(pi/4);     /* 1 */\n  say 'tand(0)     =' tand(0);       /* 0 */\n  say 'tand(45)    =' tand(45);      /* 1 */\n  say 'tanh(0)     =' tanh(0);       /* 0 */\nexit;\n//IRXJCL   EXEC PGM=IRXJCL,PARM=REXX,REGION=256K\n//STEPLIB  DD  DSN=T2JJ.LOAD,DISP=SHR\n//SYSEXEC  DD  DSN=&&SYSEXEC,DISP=(OLD,DELETE)\n//SYSPRINT DD  SYSOUT=*\n//SYSTSPRT DD  SYSOUT=*\n//SYSIN    DD  DUMMY\n//SYSTSIN  DD  DUMMY\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ISTEXCA$": {"ttr": 1032, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x994\\x8f\\x00\\x994\\x8f\\x12\\x00\\x00C\\x00C\\x00\\x00\\xd1\\xd1\\xc1\\xc5\\xc7\\xc5\\xd9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-12-14T00:00:00", "modifydate": "1999-12-14T12:00:00", "lines": 67, "newlines": 67, "modlines": 0, "user": "JJAEGER"}, "text": "F1REWALL\n\nFunction\n\nThis exit will turn your VTAM into a firewall which will allow or reject\nsessions being setup. All session related info must be defined in a\nseparate RACF class.\n\n\nDefining ISTEXCAA to the system\n\nSimply assemble and link the ISTEXCAA exit into your VTAM load library.\n\nAdd the F1REWALL class to the RACF class descriptor table\n(ICHRRCDE)\n\nAdd the F1REWALL class to the SAF router (ICHRFR01)\n\nRe-IPL your system (Yes, unfortunately this is still required to add\nRACF classes)\n\n\nUsing the F1REWALL\n\nThe best way to start using the F1REWALL is to first activate the\nF1REWALL class (SETR CLASSACT(F1REWALL)\nGENERIC(F1REWALL) GENCMD(F1REWALL)\nRACLIST(F1REWALL)\nIn order to tell VTAM to re-initialize the exit, issue MODIFY\nNET,EXIT,ID=ISTEXCAA,OPTION=REPL (This is only nessesary when\nactivating/deactivating the F1REWALL class. The exit will RACLIST the\nprofiles upon initialization)\nThe exit will now issue messages indicating that sessions are being\n'allowed' this means that there are no suitable profiles found to either\ngrant or reject session setup.\nOnce a profile exists, and the sessions are allowed, the messages will\ndisappear. Rejected sessions will always generate a message.\n\n\nRACF profiles\n\nThe basic profile format is:\n\nprimnet.plu.secnet.slu\n\n\nIf userid '*' has access to the profile, or the profile has uacc(read)\n(recommended) then session setup is allowed.\nIf the session setup is not allowed by means of the profile, and the\nsession setup is the result of a CLSDST PASS, then an additional check\nmay grant access. Profile\n\nprimnet.plu.secnet.slu.initnet.ilu\n\nis checked and if this profile exists and access is granted, then\nsession setup will be allowed.\nThis may be used to only allow network access through the use of\nspecific VTAM monitors (such as TPX, NVAS, NetMaster or any other).\n\n\nDOWNLOAD\n\nSourcecode is distributed in distribution file istexcaa.zip (IEBUPDTE\nformat)\n\n\n\u001a\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ISTEXCAA": {"ttr": 1034, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x994\\x8f\\x00\\x994\\x8f\\x12\\x00\\x05\\x1e\\x05\\x1e\\x00\\x00\\xd1\\xd1\\xc1\\xc5\\xc7\\xc5\\xd9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-12-14T00:00:00", "modifydate": "1999-12-14T12:00:00", "lines": 1310, "newlines": 1310, "modlines": 0, "user": "JJAEGER"}, "text": "./ ADD NAME=JJ$CDE      01 00 98033 98033 145139 0019 0019 0000 IBMUSER\n//IBMUSERC JOB ACCT,'JAN JAEGER',NOTIFY=IBMUSER,CLASS=A,MSGCLASS=A\n//ASMA90   EXEC PGM=ASMA90,PARM='DECK,NOOBJ,XREF(SHORT)'\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.MODGEN,DISP=SHR\n//         DD  DSN=IBMUSER.ISTEXCAA.SOURCE,DISP=SHR\n//SYSUT1   DD  UNIT=SYSALLDA,SPACE=(CYL,10)\n//SYSIN    DD  DSN=IBMUSER.ISTEXCAA.SOURCE(JJ$RRCDE),DISP=SHR\n//SYSPUNCH DD  DSN=&&PUNCH,DISP=(MOD,PASS),\n//          UNIT=SYSALLDA,SPACE=(CYL,10)\n//IEWL     EXEC PGM=IEWL,PARM='RENT,REFR,XREF'\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=SYSALLDA,SPACE=(CYL,10)\n//SYSLMOD  DD  DSN=SYS1.LINKLIB,DISP=SHR\n//SYSLIN   DD  DSN=&&PUNCH,DISP=(OLD,DELETE)\n//         DD  *\n ORDER F1REWALL,ICHRRCDE\n ENTRY F1REWALL\n NAME  ICHRRCDE(R)\n./ ADD NAME=JJ$EXC      01 00 98033 98033 144901 0030 0030 0000 IBMUSER\n//IBMUSERV JOB ACCT,'JAN JAEGER',NOTIFY=IBMUSER,CLASS=A,MSGCLASS=A\n//ASMMEM   PROC MEM=\n//ASMA90   EXEC PGM=ASMA90,PARM='DECK,NOOBJ,XREF(SHORT)'\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.MODGEN,DISP=SHR\n//         DD  DSN=IBMUSER.ISTEXCAA.SOURCE,DISP=SHR\n//SYSUT1   DD  UNIT=SYSALLDA,SPACE=(CYL,10)\n//SYSIN    DD  DSN=IBMUSER.ISTEXCAA.SOURCE(&MEM),DISP=SHR\n//SYSPUNCH DD  DSN=&&PUNCH,DISP=(MOD,PASS),\n//          UNIT=SYSALLDA,SPACE=(CYL,10)\n// PEND\n// EXEC ASMMEM,MEM=JJ$EXCAA\n// EXEC ASMMEM,MEM=JJ$EXCRR\n// EXEC ASMMEM,MEM=JJ$EXCCM\n// EXEC ASMMEM,MEM=JJ$EXC00\n// EXEC ASMMEM,MEM=JJ$EXC01\n// EXEC ASMMEM,MEM=JJ$EXC09\n// EXEC ASMMEM,MEM=JJ$EXC0A\n// EXEC ASMMEM,MEM=JJ$EXCFE\n// EXEC ASMMEM,MEM=JJ$EXCFF\n//IEWL     EXEC PGM=IEWL,PARM='RENT,REFR,AMODE=31,RMODE=ANY,XREF'\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=SYSALLDA,SPACE=(CYL,10)\n//SYSLMOD  DD  DSN=SYS1.VTAMLIB,DISP=SHR\n//SYSLIN   DD  DSN=&&PUNCH,DISP=(OLD,DELETE)\n//         DD  *\n ORDER JJ$EXCAA\n ENTRY JJ$EXCAA\n NAME  ISTEXCAA(R)\n./ ADD NAME=JJ$EXCAA    01 00 98033 98033 144012 0141 0141 0000 IBMUSER\n TITLE 'ISTEXCAA - VTAM SESSION SETUP VERIFICATION BY RACF'\n***********************************************************************\n*                                                                     *\n* JUSTIFICATION:                                                      *\n*                                                                     *\n*   THIS EXIT PROVIDES A VTAM FIREWALL FUNCTION                       *\n*                                                                     *\n*                                                                     *\n* FUNCTION:                                                           *\n*                                                                     *\n*   TO ALLOW OR PROHIBIT THE SETUP OF VTAM SESSIONS BY MEANS OF       *\n*   RACF PROFILES                                                     *\n*                                                                     *\n*                                                                     *\n* LOGIC:                                                              *\n*                                                                     *\n*   CHECK IF LU IS ALLOWED ACCESS TO DESTINATION                      *\n*     (PROFILE PRIMNET.PRIMLU.SECNET.SECLU)                           *\n*                                                                     *\n*   IF NO ACCESS THEN CHECK FOR CLSDSP PASS                           *\n*     (PROFILE PRIMNET.PRIMLU.SECNET.SECLU.INITNET.INITLU)            *\n*     IF ACCESS GRANTED (PROFILE MUST EXIST) THEN SESSION SETUP       *\n*     WILL CONTINUE.                                                  *\n*                                                                     *\n*   IF DURING INITIAL AUTHORIZATION NOT ALL QUALIFIERS ARE KNOWN      *\n*     THEN ACCESS CHECKING WILL TAKE PLACE IN THE SECONDARY           *\n*     AUTHORIZATION EXIT.  THIS MAINLY OCCURS WHEN A SESSION SETUP    *\n*     IS ATTEMPTED WITH A PARTNER LU FOR WHICH NO CROSS DOMAIN        *\n*     RESOURCE EXISTS, DURING SECONDARY AUTHORIZATION THIS WILL       *\n*     EXISTS AND HENCE THE TRUE NAME WILL BE KNOWN. IF THE TRUENAME   *\n*     CAN STILL NOT BE RESOLVED (TARGET OUTSIDE OUR NETWORK) THEN     *\n*     A TARGET OF ?.NETID WILL BE CONSTRUCTED                         *\n*                                                                     *\n*                                                                     *\n* CONSTANTS:                                                          *\n*                                                                     *\n*   MEMBER JJ$EXCDS CONTAINS THE RACF RESOURCE CLASS (LABEL RACCLASS) *\n*                                                                     *\n*                                                                     *\n* EXAMPLES:                                                           *\n*                                                                     *\n*   ALLOW CLSDSTPASS FROM TCAS:                                       *\n*     RDEF VTAMWALL *.*.*.*.OURNETID.XTSO UACC(R)                     *\n*                                                                     *\n*   ALLOW ONLY LUS FROM OUR NETWORK TO TSO                            *\n*     RDEF VTAMWALL OUTNETID.XTSO.OURNETID.* UACC(R)                  *\n*   AND PREVENT OTHERS:                                               *\n*     RDEF VTAMWALL OURNETID.XTSO.*.* UACC(N)                         *\n*                                                                     *\n*                                                                     *\n* VTAM:                                                               *\n*                                                                     *\n*   VERSION 4.3.0 REQUIRED FOR VTAM EXIT SERVICES                     *\n*                                                                     *\n*                                                                     *\n* RACF:                                                               *\n*                                                                     *\n*   VERSION 2.1.0 REQUIRED FOR RACLIST GLOBAL=YES                     *\n*                                                                     *\n*   IF PRIMNET.PRIMLU.SECNET.SECLU IS REJECTED A SECOND CHECK ON      *\n*     PRIMNET.PRIMLU.SECNET.SECLU.INITNET.INITLU IS WHICH MAY         *\n*     OVERRIDE THE FIRST CHECK IF THE 2ND PROFILE IS DEFINED          *\n*                                                                     *\n*   SETR GENERIC(VTAMWALL) GENCMD(VTAMWALL) RACLIST(VTAMWALL)         *\n*                                                                     *\n*   NOTE:                                                             *\n*     ALWAYS CODE AT LEAST 2 NON-WILDCARDS IN THE PROFILES AS RACF    *\n*     DOES NOT HANDLE MODE THAN 5 GENERIC QUALIFIERS CORRECTLY        *\n*                                                                     *\n*     THE COMMAND                                                     *\n*       MODIFY NET,EXIT,ID=ISTEXCAA,OPTION=REPL                       *\n*     WILL REINITIALIZE THE EXIT AND PICKUP ANY CHANGES IN THE        *\n*     RACFCLASS (SUCH AS ACTIVATION OF THE F1REWALL CLASS)            *\n*                                                                     *\n*                                                                     *\n*   RACF ROUTER TABLE (ICHRFR01):                                     *\n*                                                                     *\n*     ICHRFRTB CLASS=F1REWALL,ACTION=RACF                             *\n*                                                                     *\n*                                                                     *\n*   RACF CLASS DESCRIPTOR TABLE:                                      *\n*                                                                     *\n*     ICHERCDE CLASS=F1REWALL,              CLASS NAME                *\n*           FIRST=ANY,                      FIRST CHAR                *\n*           OTHER=ANY,                      OTHER CHARS               *\n*           MAXLNTH=54,                     MAXIMUM LENGTH            *\n*           ID=255,                         ID NUMBER                 *\n*           POSIT=255,                      POSIT VALUE               *\n*           GENLIST=ALLOWED,                ALLOW GENLIST             *\n*           RACLIST=ALLOWED,                CLASS MAY BE RACLISTED    *\n*           RACLREQ=YES                     MUST ISSUE RACLIST        *\n*                                                                     *\n*                                                                     *\n* ATTRIBUTES:                                                         *\n*   AMODE(31),RMODE(ANY),REFR                                         *\n*                                                                     *\n*                                                                     *\n* HISTORY:                                                            *\n*                                                                     *\n*   DATE       BY              COMMENTS                               *\n*   02/02/98   JAN JAEGER      INITIAL VERSION                        *\n*                                                                     *\n***********************************************************************\nJJ$EXCAA RSECT ,\nJJ$EXCAA AMODE 31\nJJ$EXCAA RMODE ANY\n         SAVE  (14,12),,JJ$EXCAA-J.JAEGER-&SYSDATE.-&SYSTIME.\n         LR    R12,R15                 SET BASE REGISTER\n         USING JJ$EXCAA,R12\n*\n         L     R11,4(,R1)              ADDRESS OF FUNCTION CODE\n*\n         LM    R3,R5,=A(EXCAAFT,L'EXCAAFT,EXCAAFE)\nEXCAALP  DS    0H\n         CLC   0(1,R3),0(R11)          FIND EXIT ROUTINE IN TABLE\n         BE    EXCAART\n         BXLE  R3,R4,EXCAALP           LOOP THROUGH TABLE\n*\n         RETURN (14,12),RC=0           RETURN TO CALLER IF NO EXIT\n*\nEXCAART  DS    0H\n         L     R15,4(,R3)              ADDRESS OF EXIT ROUTINE\n         L     R14,12(,R13)            RELOAD ALL\n         LM    R0,R12,20(R13)            REGISTERS\n         BR    R15                     BRANCH TO EXIT ROUTINE\n*\n         DROP  R12\n*\nEXCAAFT  DS    0D\n         DC    AL1(X'00'),AL3(0),V(JJ$EXC00)\n         DC    AL1(X'01'),AL3(0),V(JJ$EXC01)\n         DC    AL1(X'09'),AL3(0),V(JJ$EXC09)\n         DC    AL1(X'0A'),AL3(0),V(JJ$EXC0A)\n         DC    AL1(X'FE'),AL3(0),V(JJ$EXCFE)\nEXCAAFE  DC    AL1(X'FF'),AL3(0),V(JJ$EXCFF)\n*\n         LTORG ,\n*\n         YREGS ,\n*\n         END   ,\n./ ADD NAME=JJ$EXCCM    01 00 98033 98033 144100 0017 0017 0000 IBMUSER\n TITLE 'ISTEXCCM - COMMOM DATA AREA'\n***********************************************************************\n*                                                                     *\n* FUNCTION:                                                           *\n*                                                                     *\n*   PROVIDE COMMON DATA AREAS FOR SESSION AUTHORIZATION EXIT          *\n*                                                                     *\n*                                                                     *\n* HISTORY:                                                            *\n*                                                                     *\n*   DATE       BY              COMMENTS                               *\n*   02/02/98   JAN JAEGER      INITIAL VERSION                        *\n*                                                                     *\n***********************************************************************\n         JJ$EXCDS RSECT=YES\n*\n         END   ,\n./ ADD NAME=JJ$EXCDS    01 00 98033 98033 135745 0101 0101 0000 IBMUSER\n.**********************************************************************\n.*                                                                    *\n.* FUNCTION:                                                          *\n.*                                                                    *\n.*   GENERATE COMMON DATA AREAS FOR SESSION AUTHORIZATION MODULES     *\n.*                                                                    *\n.*                                                                    *\n.* CONSTANTS:                                                         *\n.*                                                                    *\n.*   RACF RESOURCE CLASS DEFINED AT LABEL RACCLASS                    *\n.*                                                                    *\n.*                                                                    *\n.* ATTRIBUTES:                                                        *\n.*   AMODE(31),RMODE(ANY),REFR                                        *\n.*                                                                    *\n.*                                                                    *\n.* HISTORY:                                                           *\n.*                                                                    *\n.*   DATE       BY              COMMENTS                              *\n.*   02/02/98   JAN JAEGER      INITIAL VERSION                       *\n.*                                                                    *\n.**********************************************************************\n         MACRO ,\n         JJ$EXCDS &RSECT=NO\n         AIF   ('&RSECT.' NE 'NO').RSECT\nJJ$EXCDS DSECT ,\n         EXTRN JJ$EXCCM\n         AGO   .DSECT\n.RSECT   ANOP  ,\nJJ$EXCCM RSECT ,\nJJ$EXCCM AMODE 31\nJJ$EXCCM RMODE ANY\n.DSECT   ANOP  ,\n*\nRACCLASS DC    CL8'F1REWALL'           RESOURCE CLASS\n*\nMFLRSTAT RACROUTE REQUEST=STAT,                                        X\n               RELEASE=2.1,                                            X\n               CLASS=RACCLASS,                                         X\n               MF=L\nLENRSTAT EQU   *-MFLRSTAT\n*\nMFLRVRFY RACROUTE REQUEST=VERIFY,                                      X\n               ACEE=,                                                  X\n               ENVIR=,                                                 X\n               LOC=ANY,                                                X\n               RELEASE=2.1,                                            X\n               SYSTEM=YES,                                             X\n               MF=L\nLENRVRFY EQU   *-MFLRVRFY\n*\nMFLRLIST RACROUTE REQUEST=LIST,                                        X\n               CLASS=RACCLASS,                                         X\n               ENVIR=,                                                 X\n               GLOBAL=YES,                                             X\n               RELEASE=2.1,                                            X\n               MF=L\nLENRLIST EQU   *-MFLRLIST\n*\nMFLFAUTH RACROUTE REQUEST=FASTAUTH,                                    X\n               RELEASE=2.1,                                            X\n               CLASS=RACCLASS,                                         X\n               ENTITY=,                                                X\n               ATTR=READ,                                              X\n               ACEE=,                                                  X\n               MF=L\nLENFAUTH EQU   *-MFLFAUTH\n*\n         LTORG ,\n*\nUSERAREA DSECT ,\nANONACEE DS    1F                      ANONYMOUS ACEE (USERID='*')\nUSERLEN  EQU   *-USERAREA\n*\nWORKAREA DSECT ,\nSAVEAREA DS    18F\nWORKARAC DS    0D\nRACSAVE  DS    18F                     SAVEAREA FOR EXCRR\nPROFILEP DS    0D                      EXIT SERVICES PARAMETER\nPROFRSVD DS    H\nPROFILEL DS    H                       MESSAGE LENGTH\nPROFILEA DS    A\nPROFMSG  DS    C'JJ$EXCXX REJECTING '\nPROFMSGR EQU   PROFMSG+9,9,C'C'\nPROFMSGI EQU   PROFMSG+6,2,C'C'\n*        DC    C'         ALLOWING '\nPROFILE  DS    CL54                    RACF PROFILE TO BE CHECKED\n         DS    0F\nRACRSTAT DS    XL(LENRSTAT)\n         DS    0F\nRACRVRFY DS    XL(LENRVRFY)\n         DS    0F\nRACRLIST DS    XL(LENRLIST)\n         DS    0F\nRACFAUTH DS    XL(LENFAUTH)\nSAFWK    DS    128F                    SAF WORK AREA\nSAFFWK   DS    16F                     FASTAUTH WORKAREA\nWORKLEN  EQU   *-WORKAREA\n*\n         MEXIT ,\n         MEND  ,\n./ ADD NAME=JJ$EXCFE    01 00 98033 98033 144110 0148 0148 0000 IBMUSER\n TITLE 'JJ$EXCFE - BEGIN FUNCTION X''FE'''\n***********************************************************************\n*                                                                     *\n* FUNCTION:                                                           *\n*                                                                     *\n*   INITIALIZE SESSION AUTHORIZATION EXIT                             *\n*                                                                     *\n*                                                                     *\n* LOGIC:                                                              *\n*                                                                     *\n*   CHECK IF F1REWALL CLASS IS ACTIVE                                 *\n*   IF NOT ISSUE MESSAGE AND EXIT                                     *\n*                                                                     *\n*   OBTAIN STORAGE FOR USER DATA AREA                                 *\n*   INITIALIZE ANONYMOUS ACEE (USERID='*')                            *\n*   RACLIST F1REWALL CLASS                                            *\n*                                                                     *\n*                                                                     *\n* REGISTER USAGE:                                                     *\n*                                                                     *\n*   R1    ENTRY PARAMETER                                             *\n*   R13   SAVEAREA POINTER                                            *\n*   R14   RETURN ADDRESS                                              *\n*   R15   ENTRY POINT ADDRESS / RETURN CODE                           *\n*                                                                     *\n*   R6    COMMON DATA AREA                                            *\n*   R11   SAVED ENTRY PARAMETER                                       *\n*   R13   SAVEAREA/WORKAREA POINTER                                   *\n*                                                                     *\n* ATTRIBUTES:                                                         *\n*   AMODE(31),RMODE(ANY),REFR                                         *\n*                                                                     *\n*                                                                     *\n* HISTORY:                                                            *\n*                                                                     *\n*   DATE       BY              COMMENTS                               *\n*   02/02/98   JAN JAEGER      INITIAL VERSION                        *\n*                                                                     *\n***********************************************************************\nJJ$EXCFE RSECT ,\nJJ$EXCFE AMODE 31\nJJ$EXCFE RMODE ANY\n         SAVE  (14,12),,JJ$EXCFE-J.JAEGER-&SYSDATE.-&SYSTIME.\n         LR    R12,R15                 SET BASE REGISTER\n         USING JJ$EXCFE,R12\n*\n         LR    R11,R1                  SAVE ENTRY PARAMETER\n*\n         STORAGE OBTAIN,                                               X\n               LENGTH=WORKLEN\n         ST    R13,4(,R1)              CHAIN SAVEAREAS\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING WORKAREA,R13\n*\n         L     R6,=A(JJ$EXCCM)         MAKE COMMON SECTION ADDRESSABLE\n         USING JJ$EXCDS,R6\n*\n         STORAGE OBTAIN,               OBTAIN USER DATA AREA           X\n               LENGTH=USERLEN\n         L     R15,8(,R11)             ADDRESS OF USER DATA FIELD\n         LR    R10,R1\n         USING USERAREA,R10            USER DATA AREA\n         XC    USERAREA(USERLEN),USERAREA\n         ST    R10,0(,R15)             STORE ADDRESS\n*\n         L     R9,12(,R11)             ADDRESS OF EXIT OPTIONS\n         OC    0(2,R9),=BL2'1100100000000010' PRIM/SEC/END/MODIFY\n*\n         LA    R8,EXCFEM2G             NOT ACTIVE MESSAGE\n*\n         MVC   RACRSTAT,MFLRSTAT\n         RACROUTE REQUEST=STAT,        CHECK IF RACF CLASS IS ACTIVE   X\n               RELEASE=2.1,                                            X\n               WORKA=SAFWK,                                            X\n               MF=(E,RACRSTAT)\n         LTR   R15,R15\n         BNZ   EXCFENA\n*\n         MVC   RACRLIST,MFLRLIST       RACLIST THE FIREWALL CLASS\n         RACROUTE REQUEST=LIST,          TO ALLOW FOR FASTAUTH         X\n               ENVIR=CREATE,                                           X\n               GLOBAL=YES,                                             X\n               RELEASE=2.1,                                            X\n               WORKA=SAFWK,                                            X\n               MF=(E,RACRLIST)\n         LTR   R15,R15\n         BNZ   EXCFENA\n*\n         MVC   RACRVRFY,MFLRVRFY       CREATE ANONYMOUS ACEE FOR\n         RACROUTE REQUEST=VERIFY,        FOR WHICH ACCESS CHECKING     X\n               ACEE=ANONACEE,            WILL BE DONE                  X\n               ENVIR=CREATE,                                           X\n               LOC=ANY,                                                X\n               RELEASE=2.1,                                            X\n               SYSTEM=YES,                                             X\n               WORKA=SAFWK,                                            X\n               MF=(E,RACRVRFY)\n         LTR   R15,R15\n         BNZ   EXCFENA\n*\n         LA    R8,EXCFEM1G             ACTIVE MESSAGE\nEXCFENA  DS    0H\n         LTR   R15,R15                 WAS ALL OK\n         BZ    EXCFEAOK\n         L     R2,8(,R11)              POINTER TO USER DATA AREA\n         XC    0(4,R2),0(R2)           CLEAR POINTER\n         LR    R1,R10\n         DROP  R10\n         STORAGE RELEASE,              RELEASE USER DATA AREA STORAGE  X\n               LENGTH=USERLEN,                                         X\n               ADDR=(1)\n*\nEXCFEAOK DS    0H\n         L     R1,72(,R11)             EXIT SERVICES PARAMETER LIST\n         L     R3,0(,R1)               EXIT SERVICES SUPPORTED FUNCTIONX\n                                       S BITMAP\n         TM    0(R3),B'01000000'       MESSAGE FUNCTION AVAILABLE\n         BZ    EXCFENOM\n         ST    R8,12(,R1)              MESSAGE PARAMETER LIST\n         MVI   4(R1),X'01'\n         L     R15,8(,R1)              ADDRESS OF ISTIECXS\n         BASR  R14,R15                 CALL ISTIECXS\nEXCFENOM DS    0H\n*\n         DROP  R13\n         LR    R1,R13\n         L     R13,4(,R13)             RELOAD PREVIOUS SAVEAREA ADDR\n         STORAGE RELEASE,                                              X\n               LENGTH=WORKLEN,                                         X\n               ADDR=(1)\n         RETURN (14,12),RC=0\n*\nEXCFEM1G DC    AL2(0,L'EXCFEM1T),AL4(EXCFEM1T)   MSG PARM LIST\nEXCFEM1T DC    C'JJ$EXCFE SESSION SETUP AUTHORIZATION VERIFICATION ACTIX\n               VE'\n*\nEXCFEM2G DC    AL2(0,L'EXCFEM2T),AL4(EXCFEM2T)   MSG PARM LIST\nEXCFEM2T DC    C'JJ$EXCFE SESSION SETUP AUTHORIZATION VERIFICATION INACX\n               TIVE'\n*\n         LTORG ,\n*\n         YREGS ,\n*\n         JJ$EXCDS ,\n*\n         END   ,\n./ ADD NAME=JJ$EXCFF    01 00 98033 98033 144123 0116 0116 0000 IBMUSER\n TITLE 'JJ$EXCFF - END FUNCTION X''FF'''\n***********************************************************************\n*                                                                     *\n* FUNCTION:                                                           *\n*                                                                     *\n*   CLEANUP RESOURCES USED BY SESSION AUTHORIZATION EXIT              *\n*                                                                     *\n*                                                                     *\n* LOGIC:                                                              *\n*                                                                     *\n*   DELETE ACEE                                                       *\n*   DELETE RACLISTED PROFILES                                         *\n*   RELEASE STORAGE                                                   *\n*                                                                     *\n*                                                                     *\n* REGISTER USAGE:                                                     *\n*                                                                     *\n*   R1    ENTRY PARAMETER                                             *\n*   R13   SAVEAREA POINTER                                            *\n*   R14   RETURN ADDRESS                                              *\n*   R15   ENTRY POINT ADDRESS / RETURN CODE                           *\n*                                                                     *\n*   R6    COMMON DATA AREA                                            *\n*   R11   SAVED ENTRY PARAMETER                                       *\n*   R13   SAVEAREA/WORKAREA POINTER                                   *\n*                                                                     *\n* ATTRIBUTES:                                                         *\n*   AMODE(31),RMODE(ANY),REFR                                         *\n*                                                                     *\n*                                                                     *\n* HISTORY:                                                            *\n*                                                                     *\n*   DATE       BY              COMMENTS                               *\n*   02/02/98   JAN JAEGER      INITIAL VERSION                        *\n*                                                                     *\n***********************************************************************\nJJ$EXCFF RSECT ,\nJJ$EXCFF AMODE 31\nJJ$EXCFF RMODE ANY\n         SAVE  (14,12),,JJ$EXCFF-J.JAEGER-&SYSDATE.-&SYSTIME.\n         LR    R12,R15                 SET BASE REGISTER\n         USING JJ$EXCFF,R12\n*\n         LR    R11,R1                  SAVE ENTRY PARAMETER\n*\n         L     R6,=A(JJ$EXCCM)\n         USING JJ$EXCDS,R6\n*\n         L     R10,8(,R11)             ADDRESS USER DATA WORD\n         L     R10,0(,R10)             USER DATA WORD\n         LTR   R10,R10\n         BZ    EXCFFINA\n         USING USERAREA,R10            USER DATA AREA\n*\n         STORAGE OBTAIN,                                               X\n               LENGTH=WORKLEN\n         ST    R13,4(,R1)              CHAIN SAVEAREAS\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING WORKAREA,R13\n*\n         MVC   RACRVRFY,MFLRVRFY       DELETE ACEE\n         RACROUTE REQUEST=VERIFY,                                      X\n               ACEE=ANONACEE,                                          X\n               ENVIR=DELETE,                                           X\n               RELEASE=2.1,                                            X\n               SYSTEM=YES,                                             X\n               WORKA=SAFWK,                                            X\n               MF=(E,RACRVRFY)\n*\n         MVC   RACRLIST,MFLRLIST       DELETE RACLISTED PROFILES\n         RACROUTE REQUEST=LIST,                                        X\n               ENVIR=DELETE,                                           X\n               RELEASE=2.1,                                            X\n               WORKA=SAFWK,                                            X\n               MF=(E,RACRLIST)\n*\n         L     R1,72(,R11)             EXIT SERVICES PARAMETER LIST\n         L     R3,0(,R1)               EXIT SERVICES SUPPORTED FUNCTIONX\n                                       S BITMAP\n         TM    0(R3),B'01000000'       MESSAGE FUNCTION AVAILABLE\n         BZ    EXCFFNOM\n         MVC   12(4,R1),=A(EXCFFMSG)   MESSAGE PARAMETER LIST\n         MVI   4(R1),X'01'\n         L     R15,8(,R1)              ADDRESS OF ISTIECXS\n         BASR  R14,R15                 CALL ISTIECXS\nEXCFFNOM DS    0H\n*\n         L     R15,8(,R11)             POINTER TO USER DATA AREA\n         XC    0(4,R15),0(R15)         CLEAR POINTER\n         LR    R1,R10\n         DROP  R10\n         STORAGE RELEASE,              RELEASE USER DATA AREA STORAGE  X\n               LENGTH=USERLEN,                                         X\n               ADDR=(1)\n*\n         DROP  R13\n         LR    R1,R13\n         L     R13,4(,R13)             RELOAD PREVIOUS SAVEAREA ADDR\n         STORAGE RELEASE,                                              X\n               LENGTH=WORKLEN,                                         X\n               ADDR=(1)\nEXCFFINA DS    0H\n         RETURN (14,12),RC=0\n*\nEXCFFMSG DC    AL2(0,L'EXCFFMST),AL4(EXCFFMST)   MSG PARM LIST\nEXCFFMST DC    C'JJ$EXCFF SESSION SETUP AUTHORIZATION VERIFICATION DEACX\n               TIVATED'\n*\n         LTORG ,\n*\n         JJ$EXCDS ,\n*\n         YREGS ,\n*\n         END   ,\n./ ADD NAME=JJ$EXCRR    01 00 98033 98033 141213 0219 0219 0000 IBMUSER\n TITLE 'JJ$EXCRR - BUILD PROFILE AND ISSUE FASTAUTH'\n***********************************************************************\n*                                                                     *\n* FUNCTION:                                                           *\n*                                                                     *\n*   BUILD PROFILE AND ISSUE FASTAUTH TO VERIFY AUTHORIZATION          *\n*                                                                     *\n*                                                                     *\n* LOGIC:                                                              *\n*                                                                     *\n*   BUILD PROFILE PRIMNET.PLU.SECNET.SLU                              *\n*   CALL FASTAUTH FOR AUTHORIZATION CHECKING                          *\n*   IF ACCESS REFUSED AND THIS IS A CLSDST PASS THEN                  *\n*     BUILD PROFILE PRIMNET.PLU.SECNET.SLU.ORIGNET.OLU                *\n*     IF ACCESS GRANTED THEN OVERRIDE RETURNCODE TO 0                 *\n*                                                                     *\n*   IF A NAME CANNOT BE RESOLVED THEN A C'?' IS USED                  *\n*                                                                     *\n*                                                                     *\n* REGISTER USAGE:                                                     *\n*                                                                     *\n*   R1    ENTRY PARAMETER                                             *\n*   R13   SAVEAREA POINTER                                            *\n*   R14   RETURN ADDRESS                                              *\n*   R15   ENTRY POINT ADDRESS / RETURN CODE                           *\n*                                                                     *\n*   R6    COMMON DATA AREA                                            *\n*   R11   SAVED ENTRY PARAMETER                                       *\n*   R13   SAVEAREA/WORKAREA POINTER                                   *\n*                                                                     *\n*                                                                     *\n* RETURNCODES:                                                        *\n*   R15   0  ACCESS GRANTED                                           *\n*         4  UNDETERMINED                                             *\n*         8  ACCESS REFUSED                                           *\n*                                                                     *\n*   R0    NUMBER OF QUALIFIERS THAT COULD NOT BE RESOLVED             *\n*         (IE UNKNOWN NETID)                                          *\n*                                                                     *\n*                                                                     *\n* ATTRIBUTES:                                                         *\n*   AMODE(31),RMODE(ANY),REFR                                         *\n*                                                                     *\n*                                                                     *\n* HISTORY:                                                            *\n*                                                                     *\n*   DATE       BY              COMMENTS                               *\n*   02/02/98   JAN JAEGER      INITIAL VERSION                        *\n*                                                                     *\n***********************************************************************\nJJ$EXCRR RSECT ,\nJJ$EXCRR AMODE 31\nJJ$EXCRR RMODE ANY\n         SAVE  (14,12),,JJ$EXCRR-J.JAEGER-&SYSDATE.-&SYSTIME.\n         LR    R12,R15                 SET BASE REGISTER\n         USING JJ$EXCRR,R12\n*\n         LR    R11,R1                  SAVE ENTRY PARAMETER\n*\n         USING WORKAREA,R13\n*\n         LA    R15,RACSAVE\n         ST    R13,4(,R15)             CHAIN SAVEAREAS\n         ST    R15,8(,R13)\n         LR    R13,R15\n         DROP  R13\n         USING WORKARAC,R13\n*\n         L     R6,=A(JJ$EXCCM)         COMMON SECTION\n         USING JJ$EXCDS,R6\n*\n         L     R10,8(,R11)             ADDRESS USER DATA WORD\n         L     R10,0(,R10)             USER DATA WORD\n         USING USERAREA,R10            USER DATA AREA\n*\n*\n         XC    PROFRSVD,PROFRSVD\n         MVI   PROFILE,C' '\n         MVC   PROFILE+1(L'PROFILE-1),PROFILE\n         LA    R3,PROFILE\n         SLR   R5,R5                   UNKNOWN RESOURCE COUNT\n*\n         L     R2,12(,R11)             ADDR OF PLU RIC\n         BAS   R14,BLDPROF\n         MVI   0(R3),C'.'\n         LA    R3,1(,R3)\n         L     R2,16(,R11)             ADDR OF SLU RIC\n         BAS   R14,BLDPROF\n*\n         L     R2,ANONACEE\n         MVC   RACFAUTH,MFLFAUTH\n         RACROUTE REQUEST=FASTAUTH,    REQUEST ACCESS                  X\n               RELEASE=2.1,                                            X\n               ENTITY=PROFILE,         PROFILE NAME                    X\n               ATTR=READ,              ACCESS(READ)                    X\n               ACEE=(2),               ACEE                            X\n               WKAREA=SAFFWK,          FASTAUTH WORKAREA               X\n               WORKA=SAFWK,            SAF WORKAREA ADDRESS            X\n               MF=(E,RACFAUTH)\n         LR    R8,R15                  SAVE RC FROM BASIC RACROUTE\n*\n         L     R2,56(,R11)             ADDRESS IF ILU RIC\n         LTR   R2,R2\n         BZ    EXCRRNOI\n         MVI   0(R3),C'.'\n         LA    R3,1(,R3)\n         BAS   R14,BLDPROF\n*\n         LTR   R9,R15                  IF ACCESS OK\n         BZ    EXCRRMSG                  THEN EXIT\n*\n         L     R2,ANONACEE\n         MVC   RACFAUTH,MFLFAUTH\n         RACROUTE REQUEST=FASTAUTH,    REQUEST ACCESS                  X\n               RELEASE=2.1,                                            X\n               ENTITY=PROFILE,         PROFILE NAME                    X\n               ATTR=READ,              ACCESS(READ)                    X\n               ACEE=(2),               ACEE                            X\n               WKAREA=SAFFWK,          FASTAUTH WORKAREA               X\n               WORKA=SAFWK,            SAF WORKAREA ADDRESS            X\n               MF=(E,RACFAUTH)\nEXCRRNOI DS    0H\n         LTR   R9,R15                  SETUP AUTHORIZED\n         BZ    EXCRRMSG                EXIT NOMSG\n         MVC   PROFMSG,=CL19'JJ$EXCRR ALLOWING'\n         CH    R9,=H'4'\n         BNE   EXCRRREJ\n         CH    R8,=H'8'                WAS BASIC RACROUTE REJECTED?\n         BNE   EXCRRMSG                YES: THEN REJECT\nEXCRRREJ DS    0H\n         LA    R9,8                    FAIL SETUP\n         MVC   PROFMSGR,=CL9'REJECTING'\n*\nEXCRRMSG DS    0H\n         LA    R4,PROFILE              UPDATE MESSAGE LENGTH\n         SLR   R3,R4\n         AL    R3,=A(L'PROFMSG)\n         STH   R3,PROFILEL\n         LA    R4,PROFMSG\n         ST    R4,PROFILEA\n*\n         DROP  R13\n         LR    R15,R9                  RETURN CODE\n         LR    R0,R5                   UNKNOWN RESOURCE COUNT\n         L     R13,4(,R13)             RELOAD PREVIOUS SAVEAREA ADDR\n         L     R14,12(,R13)\n         LM    R1,R12,24(R13)\n         BR    R14\n*\n* R2 POINTER TO RIC\n* R3 POINTER TO PROFILE\n* R4 WORK\n* R5 UNKOWN RESOURCE COUNTER\n* R14 RETURN ADDRESS\n*\nBLDPROF  DS    0H\n         CLI   0(R2),X'19'             VECTOR KEY\n         BE    BLDPROFG\n         MVC   0(3,R3),=C'?.?'         UNKNOWN PROFILE\n         LA    R5,2(,R5)\n         LA    R3,3(,R3)\n         BR    R14\nBLDPROFG DS    0H\n         SLR   R4,R4                   WORK REG, CLEAR FOR IC\n         IC    R4,4(,R2)               LENGTH OF SSCPNAME\n         LA    R2,5(R4,R2)             POINT TO NETWORK ID\n*\n         ICM   R4,B'0001',0(R2)        LENGTH OF NETWORK ID\n         BNZ   BLDPNID                 NETWORK ID UNKNOWN\nBLDPNIG  DS    0H\n         MVI   0(R3),C'?'              INSERT UNKNOWN NAME\n         LA    R5,1(,R5)\n         B     BLDPUNID\nBLDPNID  DS    0H\n         CLI   1(R2),C' '              FIRST BYTE BLANK\n         BE    BLDPNIG                 NO VALID NAME\n         BCTR  R4,0                    SET MACHINE LENGTH\n         EX    R4,BLDPROFC             COPY NETWORK ID\n         LA    R3,0(R4,R3)             LAST BYTE OF NETWORK ID\nBLDPNIDT DS    0H\n         CLI   0(R3),C' '              LAST BYTE BLANK\n         BNZ   BLDPUNID                NO THEN CONTINUE\n         BCT   R3,BLDPNIDT             STRIP ONE BYTE\nBLDPUNID DS    0H\n         LA    R3,1(,R3)\n         MVI   0(R3),C'.'              INSERT PERIOD\n         LA    R3,1(,R3)               POINT PAST PERIOD\n*\n         LA    R2,2(R4,R2)             POINT TO LUNAME\n*\n         ICM   R4,B'0001',0(R2)        LENGTH OF LUNAME\n         BNZ   BLDPLUN                 LUNAME UNKNOWN\nBLDPLUG  DS    H\n         MVI   0(R3),C'?'              INSERT UNKNOWN NAME\n         LA    R5,1(,R5)\n         B     BLDPULUN\nBLDPLUN  DS    0H\n         CLI   1(R2),C' '              FIRST BYTE BLANK\n         BE    BLDPLUG                 NO VALID NAME\n         BCTR  R4,0                    SET MACHINE LENGTH\n         EX    R4,BLDPROFC             COPY LUNAME\n         LA    R3,0(R4,R3)             LAST BYTE OF LUNAME\nBLDPLUNT DS    0H\n         CLI   0(R3),C' '              LAST BYTE BLANK\n         BNZ   BLDPULUN                NO THEN CONTINUE\n         BCT   R3,BLDPLUNT             STRIP ONE BYTE\nBLDPULUN DS    0H\n         LA    R3,1(,R3)\n         BR    R14\n*\nBLDPROFC MVC   0(0,R3),1(R2)\n*\n         LTORG ,\n*\n         JJ$EXCDS ,\n*\n         YREGS ,\n*\n         END   ,\n./ ADD NAME=JJ$EXC0A    01 00 98033 98033 144136 0137 0137 0000 IBMUSER\n TITLE 'JJ$EXC0A - EXIT REPLACED FUNCTION X''0A'''\n***********************************************************************\n*                                                                     *\n* FUNCTION:                                                           *\n*                                                                     *\n*   REINITIALIZE SESSION AUTHORIZATION EXIT                           *\n*                                                                     *\n*                                                                     *\n* LOGIC:                                                              *\n*                                                                     *\n*   CHECK IF F1REWALL CLASS IS ACTIVE                                 *\n*   IF NOT ISSUE MESSAGE AND EXIT                                     *\n*                                                                     *\n*   OBTAIN STORAGE FOR USER DATA AREA                                 *\n*   INITIALIZE ANONYMOUS ACEE (USERID='*')                            *\n*   RACLIST F1REWALL CLASS                                            *\n*                                                                     *\n*                                                                     *\n* REGISTER USAGE:                                                     *\n*                                                                     *\n*   R1    ENTRY PARAMETER                                             *\n*   R13   SAVEAREA POINTER                                            *\n*   R14   RETURN ADDRESS                                              *\n*   R15   ENTRY POINT ADDRESS / RETURN CODE                           *\n*                                                                     *\n*   R6    COMMON DATA AREA                                            *\n*   R11   SAVED ENTRY PARAMETER                                       *\n*   R13   SAVEAREA/WORKAREA POINTER                                   *\n*                                                                     *\n* ATTRIBUTES:                                                         *\n*   AMODE(31),RMODE(ANY),REFR                                         *\n*                                                                     *\n*                                                                     *\n* HISTORY:                                                            *\n*                                                                     *\n*   DATE       BY              COMMENTS                               *\n*   02/02/98   JAN JAEGER      INITIAL VERSION                        *\n*                                                                     *\n***********************************************************************\nJJ$EXC0A RSECT ,\nJJ$EXC0A AMODE 31\nJJ$EXC0A RMODE ANY\n         SAVE  (14,12),,JJ$EXC0A-J.JAEGER-&SYSDATE.-&SYSTIME.\n         LR    R12,R15                 SET BASE REGISTER\n         USING JJ$EXC0A,R12\n*\n         LR    R11,R1                  SAVE ENTRY PARAMETER\n*\n         STORAGE OBTAIN,                                               X\n               LENGTH=WORKLEN\n         ST    R13,4(,R1)              CHAIN SAVEAREAS\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING WORKAREA,R13\n*\n         L     R6,=A(JJ$EXCCM)         MAKE COMMON SECTION ADDESSABLE\n         USING JJ$EXCDS,R6\n*\n         STORAGE OBTAIN,               OBTAIN USER DATA AREA           X\n               LENGTH=USERLEN\n         L     R15,8(,R11)             ADDRESS OF USER DATA FIELD\n         LR    R10,R1\n         USING USERAREA,R10            USER DATA AREA\n         XC    USERAREA(USERLEN),USERAREA\n         ST    R10,0(,R15)             STORE ADDRESS\n*\n         MVC   RACRSTAT,MFLRSTAT       CHECK IF CLASS IF ACTIVE\n         RACROUTE REQUEST=STAT,                                        X\n               RELEASE=2.1,                                            X\n               WORKA=SAFWK,                                            X\n               MF=(E,RACRSTAT)\n         LTR   R9,R15\n         BNZ   EXC0ANA\n*\n         MVC   RACRLIST,MFLRLIST       RACLIST PROFILES\n         RACROUTE REQUEST=LIST,                                        X\n               ENVIR=CREATE,                                           X\n               GLOBAL=YES,                                             X\n               RELEASE=2.1,                                            X\n               WORKA=SAFWK,                                            X\n               MF=(E,RACRLIST)\n         LTR   R9,R15\n         BNZ   EXC0ANA\n*\n         MVC   RACRVRFY,MFLRVRFY       BUILD ACEE FOR CHECKING\n         RACROUTE REQUEST=VERIFY,                                      X\n               ACEE=ANONACEE,                                          X\n               ENVIR=CREATE,                                           X\n               LOC=ANY,                                                X\n               RELEASE=2.1,                                            X\n               SYSTEM=YES,                                             X\n               WORKA=SAFWK,                                            X\n               MF=(E,RACRVRFY)\n         LTR   R9,R15\n         BNZ   EXC0ANA\n*\n         L     R1,72(,R11)             EXIT SERVICES PARAMETER LIST\n         L     R3,0(,R1)               EXIT SERVICES SUPPORTED FUNCTIONX\n                                       S BITMAP\n         TM    0(R3),B'01000000'       MESSAGE FUNCTION AVAILABLE\n         BZ    EXC0ANA\n         ST    R8,12(,R1)              MESSAGE PARAMETER LIST\n         MVC   12(4,R1),=A(EXC0AMSG)\n         MVI   4(R1),X'01'\n         L     R15,8(,R1)              ADDRESS OF ISTIECXS\n         BASR  R14,R15                 CALL ISTIECXS\nEXC0ANA  DS    0H\n*\n         LTR   R9,R9                   WAS ALL OK\n         BZ    EXC0AAOK\n         L     R2,8(,R11)              POINTER TO USER DATA AREA\n         XC    0(4,R2),0(R2)           CLEAR POINTER\n         LR    R1,R10\n         DROP  R10\n         STORAGE RELEASE,              RELEASE USER DATA AREA STORAGE  X\n               LENGTH=USERLEN,                                         X\n               ADDR=(1)\nEXC0AAOK DS    0H\n         DROP  R13\n         LR    R1,R13\n         L     R13,4(,R13)             RELOAD PREVIOUS SAVEAREA ADDR\n         STORAGE RELEASE,                                              X\n               LENGTH=WORKLEN,                                         X\n               ADDR=(1)\n         RETURN (14,12),RC=0\n*\nEXC0AMSG DC    AL2(0,L'EXC0AMST),AL4(EXC0AMST)   MSG PARM LIST\nEXC0AMST DC    C'JJ$EXC0A SESSION SETUP AUTHORIZATION VERIFICATION NOW X\n               ACTIVE'\n*\n         LTORG ,\n*\n         YREGS ,\n*\n         JJ$EXCDS ,\n*\n         END   ,\n./ ADD NAME=JJ$EXC00    01 00 98033 98033 143451 0112 0112 0000 IBMUSER\n TITLE 'JJ$EXC00 - INITIAL AUTHORIZATION FUNCTION X''00'''\n***********************************************************************\n*                                                                     *\n* FUNCTION:                                                           *\n*                                                                     *\n*   INITIAL AUTHORIZATION CHECKING                                    *\n*                                                                     *\n*                                                                     *\n* LOGIC:                                                              *\n*                                                                     *\n*   OBTAIN WORKING STORAGE                                            *\n*   CALL JJ$EXCRR TO VERIFY ACCESS                                    *\n*   IF NOT ALL QUALIFIERS KNOWN THEN PASS TO SECONDARY AUTHORISATION  *\n*   IF NO PROFILE THEN ISSUE WARNING MESSAGE                          *\n*   IF ACCESS REFUSED ISSUE ERROR MESSAGE                             *\n*                                                                     *\n*                                                                     *\n* REGISTER USAGE:                                                     *\n*                                                                     *\n*   R1    ENTRY PARAMETER                                             *\n*   R13   SAVEAREA POINTER                                            *\n*   R14   RETURN ADDRESS                                              *\n*   R15   ENTRY POINT ADDRESS / RETURN CODE                           *\n*                                                                     *\n*   R6    COMMON DATA AREA                                            *\n*   R9    RETURN CODE TO BE PASSED TO VTAM                            *\n*   R10   USER DATA AREA                                              *\n*   R11   SAVED ENTRY PARAMETER                                       *\n*   R13   SAVEAREA/WORKAREA POINTER                                   *\n*                                                                     *\n* ATTRIBUTES:                                                         *\n*   AMODE(31),RMODE(ANY),REFR                                         *\n*                                                                     *\n*                                                                     *\n* HISTORY:                                                            *\n*                                                                     *\n*   DATE       BY              COMMENTS                               *\n*   02/02/98   JAN JAEGER      INITIAL VERSION                        *\n*                                                                     *\n***********************************************************************\nJJ$EXC00 RSECT ,\nJJ$EXC00 AMODE 31\nJJ$EXC00 RMODE ANY\n         SAVE  (14,12),,JJ$EXC00-J.JAEGER-&SYSDATE.-&SYSTIME.\n         LR    R12,R15                 SET BASE REGISTER\n         USING JJ$EXC00,R12\n*\n         LR    R11,R1                  SAVE ENTRY PARAMETER\n*\n         L     R6,=A(JJ$EXCCM)\n         USING JJ$EXCDS,R6\n*\n         SLR   R9,R9                   INITIAL RETURN CODE\n         L     R10,8(,R11)             ADDRESS USER DATA WORD\n         L     R10,0(,R10)             USER DATA WORD\n         LTR   R10,R10\n         BZ    EXC00INA                EXIT INACTIVE\n         USING USERAREA,R10            USER DATA AREA\n*\n         STORAGE OBTAIN,                                               X\n               LENGTH=WORKLEN\n         ST    R13,4(,R1)              CHAIN SAVEAREAS\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING WORKAREA,R13\n*\n         LR    R1,R11\n         CALL  JJ$EXCRR                CHECK AUTHORIZATION\n         LR    R9,R15                  SAVE RC IN R9\n*\n         LTR   R0,R0                   FULL PROFILE KNOWN\n         BE    EXC00NSC\n         LA    R9,4                    IF NOT THEN PASS TO SECONDARY\n         B     EXC00NOM                  AUTH AND DO NOT ISSUE MESSAGE\nEXC00NSC DS    0H\n         LTR   R15,R15                 WAS ACCESS OK?\n         BZ    EXC00NOM                EXIT IF OK\n         CH    R15,=H'4'               IF RACROUTE RC>4 THEN FAIL SETUP\n         BH    EXC00MSG                  ELSE ALLOW SETUP\n         SLR   R9,R9\n*\nEXC00MSG DS    0H\n         MVC   PROFMSGI,=C'00'         EXC00 ISSUED MESSAGE\n         LA    R2,PROFILEP\n         L     R1,72(,R11)             EXIT SERVICES PARAMETER LIST\n         L     R3,0(,R1)               EXIT SERVICES SUPPORTED FUNCTIONX\n                                       S BITMAP\n         TM    0(R3),B'01000000'       MESSAGE FUNCTION AVAILABLE\n         BZ    EXC00NOM\n         MVI   4(R1),X'01'\n         ST    R2,12(,R1)              MESSAGE PARAMETER LIST\n         L     R15,8(,R1)              ADDRESS OF ISTIECXS\n         BASR  R14,R15                 CALL ISTIECXS\nEXC00NOM DS    0H\n*\n         DROP  R13\n         LR    R1,R13\n         L     R13,4(,R13)             RELOAD PREVIOUS SAVEAREA ADDR\n         STORAGE RELEASE,                                              X\n               LENGTH=WORKLEN,                                         X\n               ADDR=(1)\nEXC00INA DS    0H\n         LR    R15,R9\n         RETURN (14,12),RC=(15)\n*\n         LTORG ,\n*\n         JJ$EXCDS ,\n*\n         YREGS ,\n*\n         END   ,\n./ ADD NAME=JJ$EXC01    01 00 98033 98033 143538 0105 0105 0000 IBMUSER\n TITLE 'SECONDARY AUTHORIZATION FUNCTION X''01'''\n***********************************************************************\n*                                                                     *\n* FUNCTION:                                                           *\n*                                                                     *\n*   SECONDARY AUTHORIZATION CHECKING                                  *\n*                                                                     *\n*                                                                     *\n* LOGIC:                                                              *\n*                                                                     *\n*   OBTAIN WORKING STORAGE                                            *\n*   CALL JJ$EXCRR TO VERIFY ACCESS                                    *\n*   IF NO PROFILE THEN ISSUE WARNING MESSAGE                          *\n*   IF ACCESS REFUSED ISSUE ERROR MESSAGE                             *\n*                                                                     *\n*                                                                     *\n* REGISTER USAGE:                                                     *\n*                                                                     *\n*   R1    ENTRY PARAMETER                                             *\n*   R13   SAVEAREA POINTER                                            *\n*   R14   RETURN ADDRESS                                              *\n*   R15   ENTRY POINT ADDRESS / RETURN CODE                           *\n*                                                                     *\n*   R6    COMMON DATA AREA                                            *\n*   R9    RETURN CODE TO BE PASSED TO VTAM                            *\n*   R10   USER DATA AREA                                              *\n*   R11   SAVED ENTRY PARAMETER                                       *\n*   R13   SAVEAREA/WORKAREA POINTER                                   *\n*                                                                     *\n* ATTRIBUTES:                                                         *\n*   AMODE(31),RMODE(ANY),REFR                                         *\n*                                                                     *\n*                                                                     *\n* HISTORY:                                                            *\n*                                                                     *\n*   DATE       BY              COMMENTS                               *\n*   02/02/98   JAN JAEGER      INITIAL VERSION                        *\n*                                                                     *\n***********************************************************************\nJJ$EXC01 RSECT ,\nJJ$EXC01 AMODE 31\nJJ$EXC01 RMODE ANY\n         SAVE  (14,12),,JJ$EXC01-J.JAEGER-&SYSDATE.-&SYSTIME.\n         LR    R12,R15                 SET BASE REGISTER\n         USING JJ$EXC01,R12\n*\n         LR    R11,R1                  SAVE ENTRY PARAMETER\n*\n         L     R6,=A(JJ$EXCCM)\n         USING JJ$EXCDS,R6\n*\n         SLR   R9,R9                   INITIAL RETURN CODE\n         L     R10,8(,R11)             ADDRESS USER DATA WORD\n         L     R10,0(,R10)             USER DATA WORD\n         LTR   R10,R10\n         BZ    EXC01INA                EXIT INACTIVE\n         USING USERAREA,R10            USER DATA AREA\n*\n         STORAGE OBTAIN,                                               X\n               LENGTH=WORKLEN\n         ST    R13,4(,R1)              CHAIN SAVEAREAS\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING WORKAREA,R13\n*\n         LR    R1,R11\n         CALL  JJ$EXCRR                AUTHORIZATION CHECK\n         LTR   R9,R15\n         BZ    EXC01NOM\n*\n         MVC   PROFMSGI,=C'01'         EXC01 ISSUED MESSAGE\n         LA    R2,PROFILEP\n         L     R1,72(,R11)             EXIT SERVICES PARAMETER LIST\n         L     R3,0(,R1)               EXIT SERVICES SUPPORTED FUNCTIONX\n                                       S BITMAP\n         TM    0(R3),B'01000000'       MESSAGE FUNCTION AVAILABLE\n         BZ    EXC01NOM\n         MVI   4(R1),X'01'\n         ST    R2,12(,R1)              MESSAGE PARAMETER LIST\n         L     R15,8(,R1)              ADDRESS OF ISTIECXS\n         BASR  R14,R15                 CALL ISTIECXS\nEXC01NOM DS    0H\n*\n         CH    R9,=H'4'                RC4 IS OK\n         BH    EXC01FAS\n         SLR   R9,R9\nEXC01FAS DS    0H\n*\n         DROP  R13\n         LR    R1,R13\n         L     R13,4(,R13)             RELOAD PREVIOUS SAVEAREA ADDR\n         STORAGE RELEASE,                                              X\n               LENGTH=WORKLEN,                                         X\n               ADDR=(1)\nEXC01INA DS    0H\n         LR    R15,R9\n         RETURN (14,12),RC=(15)\n*\n         LTORG ,\n*\n         JJ$EXCDS ,\n*\n         YREGS ,\n*\n         END   ,\n./ ADD NAME=JJ$EXC09    01 00 98033 98033 143708 0116 0116 0000 IBMUSER\n TITLE 'JJ$EXC09 - EXIT REPLACEMENT FUNCTION X''09'''\n***********************************************************************\n*                                                                     *\n* FUNCTION:                                                           *\n*                                                                     *\n*   CLEANUP RESOURES FOR EXIT REPLACEMENT                             *\n*                                                                     *\n*                                                                     *\n* LOGIC:                                                              *\n*                                                                     *\n*   DELETE ACEE                                                       *\n*   DELETE RACLISTED PROFILES                                         *\n*   RELEASE STORAGE                                                   *\n*                                                                     *\n*                                                                     *\n* REGISTER USAGE:                                                     *\n*                                                                     *\n*   R1    ENTRY PARAMETER                                             *\n*   R13   SAVEAREA POINTER                                            *\n*   R14   RETURN ADDRESS                                              *\n*   R15   ENTRY POINT ADDRESS / RETURN CODE                           *\n*                                                                     *\n*   R6    COMMON DATA AREA                                            *\n*   R11   SAVED ENTRY PARAMETER                                       *\n*   R13   SAVEAREA/WORKAREA POINTER                                   *\n*                                                                     *\n* ATTRIBUTES:                                                         *\n*   AMODE(31),RMODE(ANY),REFR                                         *\n*                                                                     *\n*                                                                     *\n* HISTORY:                                                            *\n*                                                                     *\n*   DATE       BY              COMMENTS                               *\n*   02/02/98   JAN JAEGER      INITIAL VERSION                        *\n*                                                                     *\n***********************************************************************\nJJ$EXC09 RSECT ,\nJJ$EXC09 AMODE 31\nJJ$EXC09 RMODE ANY\n         SAVE  (14,12),,JJ$EXC09-J.JAEGER-&SYSDATE.-&SYSTIME.\n         LR    R12,R15                 SET BASE REGISTER\n         USING JJ$EXC09,R12\n*\n         LR    R11,R1                  SAVE ENTRY PARAMETER\n*\n         L     R6,=A(JJ$EXCCM)\n         USING JJ$EXCDS,R6\n*\n         L     R10,8(,R11)             ADDRESS USER DATA WORD\n         L     R10,0(,R10)             USER DATA WORD\n         LTR   R10,R10\n         BZ    EXC09INA\n         USING USERAREA,R10            USER DATA AREA\n*\n         STORAGE OBTAIN,                                               X\n               LENGTH=WORKLEN\n         ST    R13,4(,R1)              CHAIN SAVEAREAS\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING WORKAREA,R13\n*\n         MVC   RACRVRFY,MFLRVRFY       DELETE ACEE\n         RACROUTE REQUEST=VERIFY,                                      X\n               ACEE=ANONACEE,                                          X\n               ENVIR=DELETE,                                           X\n               RELEASE=2.1,                                            X\n               SYSTEM=YES,                                             X\n               WORKA=SAFWK,                                            X\n               MF=(E,RACRVRFY)\n*\n         MVC   RACRLIST,MFLRLIST       DELETE RACLISTED PROFILES\n         RACROUTE REQUEST=LIST,                                        X\n               ENVIR=DELETE,                                           X\n               RELEASE=2.1,                                            X\n               WORKA=SAFWK,                                            X\n               MF=(E,RACRLIST)\n*\n         L     R1,72(,R11)             EXIT SERVICES PARAMETER LIST\n         L     R3,0(,R1)               EXIT SERVICES SUPPORTED FUNCTIONX\n                                       S BITMAP\n         TM    0(R3),B'01000000'       MESSAGE FUNCTION AVAILABLE\n         BZ    EXC09NOM\n         MVC   12(4,R1),=A(EXC09MSG)   MESSAGE PARAMETER LIST\n         MVI   4(R1),X'01'\n         L     R15,8(,R1)              ADDRESS OF ISTIECXS\n         BASR  R14,R15                 CALL ISTIECXS\nEXC09NOM DS    0H\n*\n         L     R15,8(,R11)             POINTER TO USER DATA AREA\n         XC    0(4,R15),0(R15)         CLEAR POINTER\n         LR    R1,R10\n         DROP  R10\n         STORAGE RELEASE,                                              X\n               LENGTH=USERLEN,                                         X\n               ADDR=(1)\n*\n         DROP  R13\n         LR    R1,R13\n         L     R13,4(,R13)             RELOAD PREVIOUS SAVEAREA ADDR\n         STORAGE RELEASE,                                              X\n               LENGTH=WORKLEN,                                         X\n               ADDR=(1)\nEXC09INA DS    0H\n         RETURN (14,12),RC=0\n*\nEXC09MSG DC    AL2(0,L'EXC09MST),AL4(EXC09MST)   MSG PARM LIST\nEXC09MST DC    C'JJ$EXC09 SESSION SETUP AUTHORIZATION VERIFICATION NOW X\n               INACTIVE'\n*\n         LTORG ,\n*\n         JJ$EXCDS ,\n*\n         YREGS ,\n*\n         END   ,\n./ ADD NAME=JJ$RFR      01 00 98033 98033 145025 0017 0017 0000 IBMUSER\n//IBMUSERR JOB ACCT,'JAN JAEGER',NOTIFY=IBMUSER,CLASS=A,MSGCLASS=A\n//ASMA90   EXEC PGM=ASMA90,PARM='DECK,NOOBJ,XREF(SHORT)'\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.MODGEN,DISP=SHR\n//         DD  DSN=IBMUSER.ISTEXCAA.SOURCE,DISP=SHR\n//SYSUT1   DD  UNIT=SYSALLDA,SPACE=(CYL,10)\n//SYSIN    DD  DSN=IBMUSER.ISTEXCAA.SOURCE(JJ$RFR01),DISP=SHR\n//SYSPUNCH DD  DSN=&&PUNCH,DISP=(MOD,PASS),\n//          UNIT=SYSALLDA,SPACE=(CYL,10)\n//IEWL     EXEC PGM=IEWL,PARM='RENT,REFR,XREF'\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=SYSALLDA,SPACE=(CYL,10)\n//SYSLMOD  DD  DSN=SYS1.LINKLIB,DISP=SHR\n//SYSLIN   DD  DSN=&&PUNCH,DISP=(OLD,DELETE)\n//         DD  *\n NAME  ICHRFR01(R)\n./ ADD NAME=JJ$RFR01    01 00 98033 98033 145032 0007 0007 0000 IBMUSER\nICHRFR01 RSECT ,\nICHRFR01 RMODE 24\n*\n         ICHRFRTB CLASS=F1REWALL,ACTION=RACF\n         ICHRFRTB TYPE=END\n*\n         END   ,\n./ ADD NAME=JJ$RRCDE    01 00 98033 98033 145039 0010 0010 0000 IBMUSER\n         ICHERCDE CLASS=F1REWALL,              CLASS NAME              X\n               FIRST=ANY,                      FIRST CHAR              X\n               OTHER=ANY,                      OTHER CHARS             X\n               MAXLNTH=54,                     MAXIMUM LENGTH          X\n               ID=255,                         ID NUMBER               X\n               POSIT=255,                      POSIT VALUE             X\n               GENLIST=ALLOWED,                ALLOW GENLIST           X\n               RACLIST=ALLOWED,                CLASS MAY BE RACLISTED  X\n               RACLREQ=YES                     MUST ISSUE RACLIST\n         ICHERCDE ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JJ$CMATH": {"ttr": 1545, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x994\\x9f\\x00\\x994\\x9f\\x154\\x00\\xbf\\x00\\xbf\\x00\\x00\\xc9\\xc2\\xd4\\xe4\\xe2\\xc5\\xd9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-12-15T00:00:00", "modifydate": "1999-12-15T15:34:00", "lines": 191, "newlines": 191, "modlines": 0, "user": "IBMUSER"}, "text": "./ ADD NAME=PLIFMATH    01 06 94321 94340 140045 0190 0301 0131 T2JJ\n//T2JJMATH JOB 95502075300000000239,'JAN JAEGER',\n//             CLASS=B,COND=(0,LT),\n//             MSGCLASS=X,\n//             NOTIFY=T2JJ\n//*\n//*   EX T2JJ.AN.CNTL(PLIFMATH)\n//*\n//PLI      PROC M=ERROR\n//IEL0AA   EXEC PGM=IEL0AA,REGION=6M,\n//          PARM='DECK,NOOBJECT,NOGOSTMT,NOGONUMBER'\n//STEPLIB  DD  DSN=SYS1.PLICOMP,DISP=SHR\n//SYSPRINT DD  SYSOUT=*\n//SYSPUNCH DD  DSN=&&PLIPUNCH(&M),DISP=(OLD,PASS)\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,10)\n//SYSLIB   DD  DSN=T2JJ.AN.ASM,DISP=SHR\n//SYSIN    DD  DDNAME=SYSIN\n//         PEND\n//IEFBR14  EXEC PGM=IEFBR14\n//PLIPUNCH DD  DSN=&&PLIPUNCH,DISP=(NEW,PASS),\n//          UNIT=SYSDA,SPACE=(CYL,(3,3,3)),\n//          DCB=(DSORG=PO,RECFM=FB,LRECL=80,BLKSIZE=3120)\n//*\n//ACOS  EXEC PLI,M=ACOS\n %DCL MATHFUNC CHAR; %MATHFUNC = 'ACOS';  %INCLUDE JJ$MMATH;\n//ASIN  EXEC PLI,M=ASIN\n %DCL MATHFUNC CHAR; %MATHFUNC = 'ASIN';  %INCLUDE JJ$MMATH;\n//ATAN  EXEC PLI,M=ATAN\n %DCL MATHFUNC CHAR; %MATHFUNC = 'ATAN';  %INCLUDE JJ$MMATH;\n//ATAND EXEC PLI,M=ATAND\n %DCL MATHFUNC CHAR; %MATHFUNC = 'ATAND'; %INCLUDE JJ$MMATH;\n//ATANH EXEC PLI,M=ATANH\n %DCL MATHFUNC CHAR; %MATHFUNC = 'ATANH'; %INCLUDE JJ$MMATH;\n//COS   EXEC PLI,M=COS\n %DCL MATHFUNC CHAR; %MATHFUNC = 'COS';   %INCLUDE JJ$MMATH;\n//COSD  EXEC PLI,M=COSD\n %DCL MATHFUNC CHAR; %MATHFUNC = 'COSD';  %INCLUDE JJ$MMATH;\n//COSH  EXEC PLI,M=COSH\n %DCL MATHFUNC CHAR; %MATHFUNC = 'COSH';  %INCLUDE JJ$MMATH;\n//ERF   EXEC PLI,M=ERF\n %DCL MATHFUNC CHAR; %MATHFUNC = 'ERF';   %INCLUDE JJ$MMATH;\n//ERFC  EXEC PLI,M=ERFC\n %DCL MATHFUNC CHAR; %MATHFUNC = 'ERFC';  %INCLUDE JJ$MMATH;\n//EXP   EXEC PLI,M=EXP\n %DCL MATHFUNC CHAR; %MATHFUNC = 'EXP';   %INCLUDE JJ$MMATH;\n//LOG   EXEC PLI,M=LOG\n %DCL MATHFUNC CHAR; %MATHFUNC = 'LOG';   %INCLUDE JJ$MMATH;\n//LOG10 EXEC PLI,M=LOG10\n %DCL MATHFUNC CHAR; %MATHFUNC = 'LOG10'; %INCLUDE JJ$MMATH;\n//LOG2  EXEC PLI,M=LOG2\n %DCL MATHFUNC CHAR; %MATHFUNC = 'LOG2';  %INCLUDE JJ$MMATH;\n//SIN   EXEC PLI,M=SIN\n %DCL MATHFUNC CHAR; %MATHFUNC = 'SIN';   %INCLUDE JJ$MMATH;\n//SIND  EXEC PLI,M=SIND\n %DCL MATHFUNC CHAR; %MATHFUNC = 'SIND';  %INCLUDE JJ$MMATH;\n//SINH  EXEC PLI,M=SINH\n %DCL MATHFUNC CHAR; %MATHFUNC = 'SINH';  %INCLUDE JJ$MMATH;\n//SQRT  EXEC PLI,M=SQRT\n %DCL MATHFUNC CHAR; %MATHFUNC = 'SQRT';  %INCLUDE JJ$MMATH;\n//TAN   EXEC PLI,M=TAN\n %DCL MATHFUNC CHAR; %MATHFUNC = 'TAN';   %INCLUDE JJ$MMATH;\n//TAND  EXEC PLI,M=TAND\n %DCL MATHFUNC CHAR; %MATHFUNC = 'TAND';  %INCLUDE JJ$MMATH;\n//TANH  EXEC PLI,M=TANH\n %DCL MATHFUNC CHAR; %MATHFUNC = 'TANH';  %INCLUDE JJ$MMATH;\n//*\n//IEV90    EXEC PGM=IEV90,PARM=(DECK,NOOBJ)\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.MODGEN,DISP=SHR\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,10)\n//SYSPUNCH DD  DSN=&&PUNCH,DISP=(NEW,PASS),UNIT=SYSDA,SPACE=(CYL,50)\n//SYSIN    DD  DSN=T2JJ.AN.ASM(JJ$FMATH),DISP=SHR\n//IEWL     EXEC PGM=IEWL,\n//          PARM='XREF,AMODE=31,RMODE=ANY,REFR,RENT,REUS,OL'\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,50)\n//SYSLIB   DD  DSN=SYS1.PLIBASE,DISP=SHR\n//         DD  DSN=SYS1.SIBMBASE,DISP=SHR\n//SYSLMOD  DD  DSN=T2JJ.LOAD,DISP=SHR\n//PLIPUNCH DD  DSN=&&PLIPUNCH,DISP=(OLD,DELETE)\n//SYSLIN   DD  DSN=&&PUNCH,DISP=(OLD,DELETE)\n//         DD  *\n CHANGE  PLISTART(JJ0ACOS)\n CHANGE  PLIMAIN(JJ1ACOS)\n CHANGE  PLICALLB(JJ2ACOS)\n CHANGE  PLICALLA(JJ$ACOS)\n INCLUDE PLIPUNCH(ACOS)\n CHANGE  PLISTART(JJ0ASIN)\n CHANGE  PLIMAIN(JJ1ASIN)\n CHANGE  PLICALLB(JJ2ASIN)\n CHANGE  PLICALLA(JJ$ASIN)\n INCLUDE PLIPUNCH(ASIN)\n CHANGE  PLISTART(JJ0ATAN)\n CHANGE  PLIMAIN(JJ1ATAN)\n CHANGE  PLICALLB(JJ2ATAN)\n CHANGE  PLICALLA(JJ$ATAN)\n INCLUDE PLIPUNCH(ATAN)\n CHANGE  PLISTART(JJ0ATAND)\n CHANGE  PLIMAIN(JJ1ATAND)\n CHANGE  PLICALLB(JJ2ATAND)\n CHANGE  PLICALLA(JJ$ATAND)\n INCLUDE PLIPUNCH(ATAND)\n CHANGE  PLISTART(JJ0ATANH)\n CHANGE  PLIMAIN(JJ1ATANH)\n CHANGE  PLICALLB(JJ2ATANH)\n CHANGE  PLICALLA(JJ$ATANH)\n INCLUDE PLIPUNCH(ATANH)\n CHANGE  PLISTART(JJ0COS)\n CHANGE  PLIMAIN(JJ1COS)\n CHANGE  PLICALLB(JJ2COS)\n CHANGE  PLICALLA(JJ$COS)\n INCLUDE PLIPUNCH(COS)\n CHANGE  PLISTART(JJ0COSD)\n CHANGE  PLIMAIN(JJ1COSD)\n CHANGE  PLICALLB(JJ2COSD)\n CHANGE  PLICALLA(JJ$COSD)\n INCLUDE PLIPUNCH(COSD)\n CHANGE  PLISTART(JJ0COSH)\n CHANGE  PLIMAIN(JJ1COSH)\n CHANGE  PLICALLB(JJ2COSH)\n CHANGE  PLICALLA(JJ$COSH)\n INCLUDE PLIPUNCH(COSH)\n CHANGE  PLISTART(JJ0ERF)\n CHANGE  PLIMAIN(JJ1ERF)\n CHANGE  PLICALLB(JJ2ERF)\n CHANGE  PLICALLA(JJ$ERF)\n INCLUDE PLIPUNCH(ERF)\n CHANGE  PLISTART(JJ0ERFC)\n CHANGE  PLIMAIN(JJ1ERFC)\n CHANGE  PLICALLB(JJ2ERFC)\n CHANGE  PLICALLA(JJ$ERFC)\n INCLUDE PLIPUNCH(ERFC)\n CHANGE  PLISTART(JJ0EXP)\n CHANGE  PLIMAIN(JJ1EXP)\n CHANGE  PLICALLB(JJ2EXP)\n CHANGE  PLICALLA(JJ$EXP)\n INCLUDE PLIPUNCH(EXP)\n CHANGE  PLISTART(JJ0LOG)\n CHANGE  PLIMAIN(JJ1LOG)\n CHANGE  PLICALLB(JJ2LOG)\n CHANGE  PLICALLA(JJ$LOG)\n INCLUDE PLIPUNCH(LOG)\n CHANGE  PLISTART(JJ0LOG10)\n CHANGE  PLIMAIN(JJ1LOG10)\n CHANGE  PLICALLB(JJ2LOG10)\n CHANGE  PLICALLA(JJ$LOG10)\n INCLUDE PLIPUNCH(LOG10)\n CHANGE  PLISTART(JJ0LOG2)\n CHANGE  PLIMAIN(JJ1LOG2)\n CHANGE  PLICALLB(JJ2LOG2)\n CHANGE  PLICALLA(JJ$LOG2)\n INCLUDE PLIPUNCH(LOG2)\n CHANGE  PLISTART(JJ0SIN)\n CHANGE  PLIMAIN(JJ1SIN)\n CHANGE  PLICALLB(JJ2SIN)\n CHANGE  PLICALLA(JJ$SIN)\n INCLUDE PLIPUNCH(SIN)\n CHANGE  PLISTART(JJ0SIND)\n CHANGE  PLIMAIN(JJ1SIND)\n CHANGE  PLICALLB(JJ2SIND)\n CHANGE  PLICALLA(JJ$SIND)\n INCLUDE PLIPUNCH(SIND)\n CHANGE  PLISTART(JJ0SINH)\n CHANGE  PLIMAIN(JJ1SINH)\n CHANGE  PLICALLB(JJ2SINH)\n CHANGE  PLICALLA(JJ$SINH)\n INCLUDE PLIPUNCH(SINH)\n CHANGE  PLISTART(JJ0SQRT)\n CHANGE  PLIMAIN(JJ1SQRT)\n CHANGE  PLICALLB(JJ2SQRT)\n CHANGE  PLICALLA(JJ$SQRT)\n INCLUDE PLIPUNCH(SQRT)\n CHANGE  PLISTART(JJ0TAN)\n CHANGE  PLIMAIN(JJ1TAN)\n CHANGE  PLICALLB(JJ2TAN)\n CHANGE  PLICALLA(JJ$TAN)\n INCLUDE PLIPUNCH(TAN)\n CHANGE  PLISTART(JJ0TAND)\n CHANGE  PLIMAIN(JJ1TAND)\n CHANGE  PLICALLB(JJ2TAND)\n CHANGE  PLICALLA(JJ$TAND)\n INCLUDE PLIPUNCH(TAND)\n CHANGE  PLISTART(JJ0TANH)\n CHANGE  PLIMAIN(JJ1TANH)\n CHANGE  PLICALLB(JJ2TANH)\n CHANGE  PLICALLA(JJ$TANH)\n INCLUDE PLIPUNCH(TANH)\n ORDER IRXFMATH\n ENTRY JJ$FMATH\n NAME IRXFUSER(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JJ$FMATH": {"ttr": 1795, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x994\\x9f\\x00\\x994\\x9f\\x154\\x00\\x96\\x00\\x96\\x00\\x00\\xc9\\xc2\\xd4\\xe4\\xe2\\xc5\\xd9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-12-15T00:00:00", "modifydate": "1999-12-15T15:34:00", "lines": 150, "newlines": 150, "modlines": 0, "user": "IBMUSER"}, "text": "./ ADD NAME=JJ$FMATH    01 00 94325 94325 165115 0149 0149 0000 T2JJ\nIRXFMATH TITLE 'IRXFMATH - REXX LOCAL FUNCTION DIRECTORY'\nIRXFMATH CSECT ,\nIRXFMATH AMODE 31\nIRXFMATH RMODE ANY\n         ENTRY JJ$FMATH\n         DC    C'IRXFMATH-&SYSDATE-&SYSTIME-J.JAEGER'\nJJ$FMATH DS    0D\n*\n* DIRECTORY HEADER\n*\nHDR_B    DC    CL8'IRXFPACK'       IDENTIFY DIRECTORY\n         DC    A(HDR_E-HDR_B)      LENGTH OF HEADER\n         DC    A((ROW_L-ROW_S)/(ROW_E-ROW_S))   NUMBER OF ENTRIES\n         DC    F'0'                RESERVED\n         DC    A(ROW_E-ROW_S)      LENGTH OF EACH ENTRY\nHDR_E    EQU   *\n*\n* FUNCTION ENTRIES\n*\nROW_S    EQU   *                   FIRST ROW OF DIRECTORY\n         DC    CL8'ACOS'           INVERSE (ARC) COSINE(RADIANS)\n         DC    V(JJ$ACOS)          PRELOADED CODE\n         DC    F'0'                RESERVED\n         DC    CL8' '              MODULE NAME\n         DC    CL8' '              SYS_DD FROM WHICH TO LOAD MODULE\nROW_E    EQU   *\n*                                  NEXT ROW OF DIRECTORY\n         DC    CL8'ASIN'           INVERSE (ARC) SINE(RADIANS)\n         DC    V(JJ$ASIN)          PRELOADED CODE\n         DC    F'0'                RESERVED\n         DC    CL8' '              MODULE NAME\n         DC    CL8' '              SYS_DD FROM WHICH TO LOAD MODULE\n*\n         DC    CL8'ATAN'           INVERSE (ARC) TANGENT(RADIANS)\n         DC    V(JJ$ATAN)          PRELOADED CODE\n         DC    F'0'                RESERVED\n         DC    CL8' '              MODULE NAME\n         DC    CL8' '              SYS_DD FROM WHICH TO LOAD MODULE\n*\n         DC    CL8'ATAND'          INVERSE TANGENT(DEGREES)\n         DC    V(JJ$ATAND)         PRELOADED CODE\n         DC    F'0'                RESERVED\n         DC    CL8' '              MODULE NAME\n         DC    CL8' '              SYS_DD FROM WHICH TO LOAD MODULE\n*\n         DC    CL8'ATANH'          INVERSE HYPERBOLIC TANGENT\n         DC    V(JJ$ATANH)         PRELOADED CODE\n         DC    F'0'                RESERVED\n         DC    CL8' '              MODULE NAME\n         DC    CL8' '              SYS_DD FROM WHICH TO LOAD MODULE\n*\n         DC    CL8'COS'            COSINE(RADIANS)\n         DC    V(JJ$COS)           PRELOADED CODE\n         DC    F'0'                RESERVED\n         DC    CL8' '              MODULE NAME\n         DC    CL8' '              SYS_DD FROM WHICH TO LOAD MODULE\n*\n         DC    CL8'COSD'           COSINE(DEGREES)\n         DC    V(JJ$COSD)          PRELOADED CODE\n         DC    F'0'                RESERVED\n         DC    CL8' '              MODULE NAME\n         DC    CL8' '              SYS_DD FROM WHICH TO LOAD MODULE\n*\n         DC    CL8'COSH'           HYPERBOLIC COSINE\n         DC    V(JJ$COSH)          PRELOADED CODE\n         DC    F'0'                RESERVED\n         DC    CL8' '              MODULE NAME\n         DC    CL8' '              SYS_DD FROM WHICH TO LOAD MODULE\n*\n         DC    CL8'ERF'            ERROR FUNCTION\n         DC    V(JJ$ERF)           PRELOADED CODE\n         DC    F'0'                RESERVED\n         DC    CL8' '              MODULE NAME\n         DC    CL8' '              SYS_DD FROM WHICH TO LOAD MODULE\n*\n         DC    CL8'ERFC'           ERROR FUNCTION COMPLEMENT\n         DC    V(JJ$ERFC)          PRELOADED CODE\n         DC    F'0'                RESERVED\n         DC    CL8' '              MODULE NAME\n         DC    CL8' '              SYS_DD FROM WHICH TO LOAD MODULE\n*\n         DC    CL8'EXP'            EXPONENTIAL BASE E\n         DC    V(JJ$EXP)           PRELOADED CODE\n         DC    F'0'                RESERVED\n         DC    CL8' '              MODULE NAME\n         DC    CL8' '              SYS_DD FROM WHICH TO LOAD MODULE\n*\n         DC    CL8'LOG'            NATURAL LOGARITHM\n         DC    V(JJ$LOG)           PRELOADED CODE\n         DC    F'0'                RESERVED\n         DC    CL8' '              MODULE NAME\n         DC    CL8' '              SYS_DD FROM WHICH TO LOAD MODULE\n*\n         DC    CL8'LOG10'          LOGARITHM BASE10\n         DC    V(JJ$LOG10)         PRELOADED CODE\n         DC    F'0'                RESERVED\n         DC    CL8' '              MODULE NAME\n         DC    CL8' '              SYS_DD FROM WHICH TO LOAD MODULE\n*\n         DC    CL8'LOG2'           LOGARITHM BASE2\n         DC    V(JJ$LOG2)          PRELOADED CODE\n         DC    F'0'                RESERVED\n         DC    CL8' '              MODULE NAME\n         DC    CL8' '              SYS_DD FROM WHICH TO LOAD MODULE\n*\n         DC    CL8'SIN'            SINE(RADIANS)\n         DC    V(JJ$SIN)           PRELOADED CODE\n         DC    F'0'                RESERVED\n         DC    CL8' '              MODULE NAME\n         DC    CL8' '              SYS_DD FROM WHICH TO LOAD MODULE\n*\n         DC    CL8'SIND'           SINE(DEGREES)\n         DC    V(JJ$SIND)          PRELOADED CODE\n         DC    F'0'                RESERVED\n         DC    CL8' '              MODULE NAME\n         DC    CL8' '              SYS_DD FROM WHICH TO LOAD MODULE\n*\n         DC    CL8'SINH'           HYPERBOLIC SINE\n         DC    V(JJ$SINH)          PRELOADED CODE\n         DC    F'0'                RESERVED\n         DC    CL8' '              MODULE NAME\n         DC    CL8' '              SYS_DD FROM WHICH TO LOAD MODULE\n*\n         DC    CL8'SQRT'           SQUARE ROOT\n         DC    V(JJ$SQRT)          PRELOADED CODE\n         DC    F'0'                RESERVED\n         DC    CL8' '              MODULE NAME\n         DC    CL8' '              SYS_DD FROM WHICH TO LOAD MODULE\n*\n         DC    CL8'TAN'            TANGENT(RADIANS)\n         DC    V(JJ$TAN)           PRELOADED CODE\n         DC    F'0'                RESERVED\n         DC    CL8' '              MODULE NAME\n         DC    CL8' '              SYS_DD FROM WHICH TO LOAD MODULE\n*\n         DC    CL8'TAND'           TANGENT(DEGREES)\n         DC    V(JJ$TAND)          PRELOADED CODE\n         DC    F'0'                RESERVED\n         DC    CL8' '              MODULE NAME\n         DC    CL8' '              SYS_DD FROM WHICH TO LOAD MODULE\n*\n         DC    CL8'TANH'           HYPERBOLIC TANGENT\n         DC    V(JJ$TANH)          PRELOADED CODE\n         DC    F'0'                RESERVED\n         DC    CL8' '              MODULE NAME\n         DC    CL8' '              SYS_DD FROM WHICH TO LOAD MODULE\n*\nROW_L    EQU   *\n         END   ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JJ$MMATH": {"ttr": 1799, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x994\\x9f\\x00\\x994\\x9f\\x154\\x00\\x9b\\x00\\x9b\\x00\\x00\\xc9\\xc2\\xd4\\xe4\\xe2\\xc5\\xd9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-12-15T00:00:00", "modifydate": "1999-12-15T15:34:00", "lines": 155, "newlines": 155, "modlines": 0, "user": "IBMUSER"}, "text": "./ ADD NAME=JJ$MMATH    01 00 94332 94339 110649 0154 0154 0000 T2JJ\n MATHFUNC: PROC(EFPLCOM,EFPLBARG,EFPLEARG,EFPLFB,EFPLARG,EFPLEVAL)\n               OPTIONS(MAIN REENTRANT NOEXECOPS) ORDER;\n1/********************************************************************/\n /*                                                                  */\n /*  EFPL - EXTERNAL FUNCTIONS PARAMETER LIST                        */\n /*                                                                  */\n /********************************************************************/\n DCL\n   EFPLCOM  PTR,\n   EFPLBARG PTR,\n   EFPLEARG PTR,\n   EFPLFB   PTR,\n   EFPLARG  PTR,                        /* ADDRESS OF ARGTABLE_ENTRY */\n   EFPLEVAL PTR;                  /* POINTER TO ADDRESS OF EVELBLOCK */\n1/********************************************************************/\n /*                                                                  */\n /*  EVALBLOCK - REXX EVALUATION BLOCK                               */\n /*                                                                  */\n /********************************************************************/\n DCL\n   EVALBLOCK_PTR PTR BASED(ADDR(EFPLEVAL)),\n   1 EVALBLOCK BASED(EVALBLOCK_PTR),\n     2 EVPAD1 FIXED BINARY(31),\n     2 EVSIZE FIXED BINARY(31),              /* SIZE IN DOUBLE WORDS */\n     2 EVLEN  FIXED BINARY(31),                    /* LENGTH OF DATA */\n     2 EVPAD2 FIXED BINARY(31),\n     2 EVDATA CHAR(250);                                   /* RESULT */\n1/********************************************************************/\n /*                                                                  */\n /*  ARGTABLE_ENTRY - REXX ARGUMENT TABLE                            */\n /*                                                                  */\n /********************************************************************/\n DCL\n   1 ARGTABLE_ENTRY              BASED(ADDR(EFPLARG)),\n     2 ENTRY_CHAR1      CHAR(8),\n     2 ENTRY_CHAR2      CHAR(8),\n %IF MATHFUNC = 'ATAN' | MATHFUNC = 'ATAND' %THEN\n   %DO;\n     2 ENTRY_CHAR3      CHAR(8),\n   1 ENTRY1                      BASED(ADDR(ENTRY_CHAR1)),\n     2 ARGSTRING_PTR1      PTR,        /* ADDRESS OF ARGUMENT STRING */\n     2 ARGSTRING_LENGTH1   FIXED BINARY(31),               /* LENGTH */\n   1 ENTRY2                      BASED(ADDR(ENTRY_CHAR2)),\n     2 ARGSTRING_PTR2      PTR,        /* ADDRESS OF ARGUMENT STRING */\n     2 ARGSTRING_LENGTH2   FIXED BINARY(31);               /* LENGTH */\n   %END;\n %ELSE\n   %DO;\n   1 ENTRY1                      BASED(ADDR(ENTRY_CHAR1)),\n     2 ARGSTRING_PTR1      PTR,        /* ADDRESS OF ARGUMENT STRING */\n     2 ARGSTRING_LENGTH1   FIXED BINARY(31);               /* LENGTH */\n   %END;\n1/********************************************************************/\n /*                                                                  */\n /*  ARGSTRING - REXX ARGUMENT STRING                                */\n /*                                                                  */\n /********************************************************************/\n DCL\n %IF MATHFUNC = 'ATAN' | MATHFUNC = 'ATAND' %THEN\n   %DO;\n   ARGSTRING1   CHAR BASED(ARGSTRING_PTR1),\n   ARGSTRING2   CHAR BASED(ARGSTRING_PTR2);\n   %END;\n %ELSE\n   %DO;\n   ARGSTRING1   CHAR BASED(ARGSTRING_PTR1);\n   %END;\n1/********************************************************************/\n /*                                                                  */\n /*  ARGTABLE_END - REXX ARGUMENT TABLE END                          */\n /*                                                                  */\n /********************************************************************/\n DCL ARGTABLE_END CHAR(8) STATIC INIT('FFFFFFFFFFFFFFFF'X);\n1/********************************************************************/\n /*                                                                  */\n /*  RUNTIME OPTIONS                                                 */\n /*                                                                  */\n /********************************************************************/\n DCL PLIXOPT CHAR(6) VAR INIT('NOSTAE') STATIC EXTERNAL;\n1/********************************************************************/\n /*                                                                  */\n /*  MAINLINE VARIABLES                                              */\n /*                                                                  */\n /********************************************************************/\n DCL\n   RESULT     PICTURE 'S9V.(15)9ES99',             /* RESULT OF FUNC */\n   ARG1_CHAR  CHAR(ARGSTRING_LENGTH1),            /* ARGUMENT PASSED */\n   ARG1_FLOAT FLOAT(16),                   /* FLOAT COPY OF ARGUMENT */\n %IF MATHFUNC = 'ATAN' | MATHFUNC = 'ATAND' %THEN\n   %DO;\n   ARG2_CHAR  CHAR(ARGSTRING_LENGTH2),            /* ARGUMENT PASSED */\n   ARG2_FLOAT FLOAT(16),                   /* FLOAT COPY OF ARGUMENT */\n   %END;\n   ADDR       BUILTIN,\n   LENGTH     BUILTIN,\n   SUBSTR     BUILTIN,\n   PLIRETC    BUILTIN,\n   MATHFUNC   BUILTIN;\n1/********************************************************************/\n /*                                                                  */\n /*  MAINLINE - MATHFUNC                                             */\n /*                                                                  */\n /********************************************************************/\n ON ERROR GO TO EXIT;  /* EVLEN WILL BE X'80000000' NO DATA RETURNED */\n %IF MATHFUNC = 'ATAN' | MATHFUNC = 'ATAND' %THEN\n   %DO;\n IF ENTRY_CHAR1 \u00ac= ARGTABLE_END THEN\n  DO;\n    ARG1_CHAR = SUBSTR(ARGSTRING1,1,ARGSTRING_LENGTH1);\n    IF ENTRY_CHAR2 = ARGTABLE_END THEN\n      DO;\n        ARG1_FLOAT = ARG1_CHAR;\n        RESULT = MATHFUNC(ARG1_FLOAT);\n        IF EVSIZE*8-16 >= LENGTH(RESULT) THEN\n          DO;\n            SUBSTR(EVDATA,1,LENGTH(RESULT)) = RESULT;\n            EVLEN = LENGTH(RESULT);\n          END;\n      END;\n    ELSE\n      DO;\n        IF ENTRY_CHAR3 = ARGTABLE_END THEN\n          DO;\n            ARG2_CHAR = SUBSTR(ARGSTRING2,1,ARGSTRING_LENGTH2);\n            ARG1_FLOAT = ARG1_CHAR;\n            ARG2_FLOAT = ARG2_CHAR;\n            RESULT = MATHFUNC(ARG1_FLOAT,ARG2_FLOAT);\n            IF EVSIZE*8-16 >= LENGTH(RESULT) THEN\n              DO;\n                SUBSTR(EVDATA,1,LENGTH(RESULT)) = RESULT;\n                EVLEN = LENGTH(RESULT);\n              END;\n          END;\n        ELSE\n          CALL PLIRETC(8);              /* INCORRECT CALL TO ROUTINE */\n      END;\n   %END;\n %ELSE\n   %DO;\n IF ENTRY_CHAR1 \u00ac= ARGTABLE_END & ENTRY_CHAR2 = ARGTABLE_END THEN\n   DO;\n     ARG1_CHAR = SUBSTR(ARGSTRING1,1,ARGSTRING_LENGTH1);\n     ARG1_FLOAT = ARG1_CHAR;\n     RESULT = MATHFUNC(ARG1_FLOAT);\n     IF EVSIZE*8-16 >= LENGTH(RESULT) THEN\n       DO;\n         SUBSTR(EVDATA,1,LENGTH(RESULT)) = RESULT;\n         EVLEN = LENGTH(RESULT);\n       END;\n   %END;\n   END;\n ELSE\n   CALL PLIRETC(8);                     /* INCORRECT CALL TO ROUTINE */\n EXIT: END MATHFUNC;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JSCH": {"ttr": 1803, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x995\\x0f\\x00\\x995\\x0f\\x11\\x05\\x06u\\x06u\\x00\\x00\\xc9\\xc2\\xd4\\xe4\\xe2\\xc5\\xd9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-12-16T00:00:00", "modifydate": "1999-12-16T11:05:00", "lines": 1653, "newlines": 1653, "modlines": 0, "user": "IBMUSER"}, "text": "./ ADD NAME=$ASM        01 00 99288 99288 104647 0077 0077 0000 IBMUSER\n//IBMUSERZ JOB T,SCHED,CLASS=R,MSGCLASS=T,NOTIFY=IBMUSER,REGION=7M\n//JJ$SCHIN EXEC PGM=ASMA90,PARM=(DECK,NOOBJECT)\n//SYSIN    DD  DSN=IBMUSER.JSCH.SOURCE(JJ$SCHIN),DISP=SHR\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.MODGEN,DISP=SHR\n//         DD  DSN=IBMUSER.JSCH.SOURCE,DISP=SHR\n//SYSUT1   DD  SPACE=(CYL,1)\n//SYSPUNCH DD  DSN=&&PUNCH,DISP=(NEW,PASS),\n//          SPACE=(CYL,1),UNIT=SYSALLDA\n//JJ$SCHID EXEC PGM=ASMA90,PARM=(DECK,NOOBJECT)\n//SYSIN    DD  DSN=IBMUSER.JSCH.SOURCE(JJ$SCHID),DISP=SHR\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.MODGEN,DISP=SHR\n//         DD  DSN=IBMUSER.JSCH.SOURCE,DISP=SHR\n//SYSUT1   DD  SPACE=(CYL,1)\n//SYSPUNCH DD  DSN=&&PUNCH,DISP=(MOD,PASS),\n//          SPACE=(TRK,1),UNIT=SYSALLDA\n//JJ$SCHMI EXEC PGM=ASMA90,PARM=(DECK,NOOBJECT)\n//SYSIN    DD  DSN=IBMUSER.JSCH.SOURCE(JJ$SCHMI),DISP=SHR\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.MODGEN,DISP=SHR\n//         DD  DSN=IBMUSER.JSCH.SOURCE,DISP=SHR\n//SYSUT1   DD  SPACE=(CYL,1)\n//SYSPUNCH DD  DSN=&&PUNCH,DISP=(MOD,PASS),\n//          SPACE=(TRK,1),UNIT=SYSALLDA\n//JJ$SCHAC EXEC PGM=ASMA90,PARM=(DECK,NOOBJECT)\n//SYSIN    DD  DSN=IBMUSER.JSCH.SOURCE(JJ$SCHAC),DISP=SHR\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.MODGEN,DISP=SHR\n//         DD  DSN=IBMUSER.JSCH.SOURCE,DISP=SHR\n//SYSUT1   DD  SPACE=(CYL,1)\n//SYSPUNCH DD  DSN=&&PUNCH,DISP=(MOD,PASS),\n//          SPACE=(TRK,1),UNIT=SYSALLDA\n//JJ$SCHAI EXEC PGM=ASMA90,PARM=(DECK,NOOBJECT)\n//SYSIN    DD  DSN=IBMUSER.JSCH.SOURCE(JJ$SCHAI),DISP=SHR\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.MODGEN,DISP=SHR\n//         DD  DSN=IBMUSER.JSCH.SOURCE,DISP=SHR\n//SYSUT1   DD  SPACE=(CYL,1)\n//SYSPUNCH DD  DSN=&&PUNCH,DISP=(MOD,PASS),\n//          SPACE=(TRK,1),UNIT=SYSALLDA\n//JJ$SCHAT EXEC PGM=ASMA90,PARM=(DECK,NOOBJECT)\n//SYSIN    DD  DSN=IBMUSER.JSCH.SOURCE(JJ$SCHAT),DISP=SHR\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.MODGEN,DISP=SHR\n//         DD  DSN=IBMUSER.JSCH.SOURCE,DISP=SHR\n//SYSUT1   DD  SPACE=(CYL,1)\n//SYSPUNCH DD  DSN=&&PUNCH,DISP=(MOD,PASS),\n//          SPACE=(TRK,1),UNIT=SYSALLDA\n//JJ$SCHSE EXEC PGM=ASMA90,PARM=(DECK,NOOBJECT)\n//SYSIN    DD  DSN=IBMUSER.JSCH.SOURCE(JJ$SCHSE),DISP=SHR\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.MODGEN,DISP=SHR\n//         DD  DSN=IBMUSER.JSCH.SOURCE,DISP=SHR\n//SYSUT1   DD  SPACE=(CYL,1)\n//SYSPUNCH DD  DSN=&&PUNCH,DISP=(MOD,PASS),\n//          SPACE=(TRK,1),UNIT=SYSALLDA\n//*\n//IEWL     EXEC PGM=IEWL,\n//          PARM='REFR,AMODE=31,RMODE=ANY,XREF,LIST,MAP'\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,10)\n//SYSLIB   DD  DSN=SYS1.CSSLIB,DISP=SHR\n//SYSLMOD  DD  DSN=SYS1.LINKLIB,DISP=SHR\n//SYSLIN   DD  DSN=&&PUNCH,DISP=(OLD,DELETE)\n//         DD  *\n ALIAS JJ$SCHSE\n ALIAS JJ$SCHAI\n ENTRY JJ$SCHIN\n NAME  JJ$SCHIN(R)\n./ ADD NAME=$ATBJSCH    01 04 99288 99291 113458 0028 0017 0014 IBMUSER\n//IBMUSERZ JOB T,SCHED,CLASS=R,MSGCLASS=T,NOTIFY=IBMUSER,REGION=7M\n//TPADD    EXEC PGM=ATBSDFMU\n//SYSPRINT DD  SYSOUT=*\n//SYSSDLIB DD  DSN=SYSP.APPC.P1.TPPROF.CLUSTER,DISP=SHR\n//SYSSDOUT DD  SYSOUT=*\n//SYSIN    DD  DATA,DLM=$$\n TPDELETE\n   TPNAME(JJINFO)\n TPADD TPSCHED_EXIT(JJ$SCHSE)\n   TPNAME(JJINFO)\n   SYSTEM\n   ACTIVE(YES)\n   TPSCHED_DELIMITER(##)\nSTCJOB,JOBNAME=JJINFO,D=IBMUSER.JSCH.SOURCE,M=JJINFO\n##\n$$\n//SIADD    EXEC PGM=ATBSDFMU\n//SYSPRINT DD   SYSOUT=*\n//SYSSDLIB DD  DSN=SYSP.APPC.P1.SIDEINFO.CLUSTER,DISP=SHR\n//SYSSDOUT DD   SYSOUT=*\n//SYSIN    DD   *\n     SIADD\n          DESTNAME(JJINFO)\n          TPNAME(JJINFO)\n          MODENAME(#INTER)\n          PARTNER_LU(JSCH)\n/*\n//\n./ ADD NAME=CGIBIN      01 00 99350 99350 110245 0259 0259 0000 IBMUSER\n/* REXX EXEC TO COMMUNICATE WITH JSCH, MUST RESIDE IN CGIBIN\n   DIRECTORY FOR USE WITH THE WEBSEVER */\n\n  parse arg cmdline\n\n  SYM_DEST=JJINFO\n\n  call atbcmrex\n\n  /* Initialise conversation */\n  address \"CPICOMM\" \"CMINIT CON_ID SYM_DEST C_RC\"\n  if C_RC \u00ac= CM_OK then\n    do\n      say \"CMINIT failed RC =\" CM_RETURN_CODE.C_RC\n      exit 8\n    end\n\n  /* Allocate conversation */\n  address \"CPICOMM\" \"CMALLC CON_ID C_RC\"\n  if C_RC \u00ac= CM_OK then\n    do\n      say \"CMALLC failed RC =\" CM_RETURN_CODE.C_RC\n      exit 8\n    end\n\n  in_msg = cmdline\n  msg_len = length(in_msg)\n  address \"CPICOMM\" \"CMSEND CON_ID IN_MSG MSG_LEN REQ_SEND C_RC\"\n  if C_RC \u00ac= CM_OK then\n    do\n      say \"CMSEND failed RC =\" CM_RETURN_CODE.C_RC\n      exit 8\n    end\n\n  address \"CPICOMM\" \"CMPTR CON_ID C_RC\"\n  if C_RC \u00ac= CM_OK then\n    do\n      say \"CMPTR failed RC =\" CM_RETURN_CODE.C_RC\n      exit 8\n    end\n\ndo until C_RC = CM_DEALLOCATED_NORMAL\n  rcv_len = 4096\n  address \"CPICOMM\" \"CMRCV CON_ID RCV_MSG RCV_LEN\",\n                    \"RCV_RET RCV_RLN RCV_STA REQ_SEND C_RC\"\n  if C_RC \u00ac= CM_OK & C_RC \u00ac= CM_DEALLOCATED_NORMAL then\n    do\n      say \"CMRCV failed RC =\" CM_RETURN_CODE.C_RC\n      exit 8\n    end\n  if RCV_RET \u00ac= CM_NO_DATA_RECEIVED then\n    say left(rcv_msg,rcv_rln)\nend\n\nexit\n\natbcmrex:\n\n/*************** SAA CPI Communications Variable Names ****************/\n/*                                                                    */\n/* The following variables are defined and available on all operating */\n/* systems supporting SAA CPI Communications.  All variables for      */\n/* SAA CPI Communications start with the letters 'CM'.                */\n/*                                                                    */\n/* The literals are provided for your convenience.  They may, or may  */\n/* not, be defined in other operating system environments.            */\n/*                                                                    */\n/**********************************************************************/\n\nCM_INITIALIZE_STATE             = 2    /* conversation_state          */\nCM_SEND_STATE                   = 3\nCM_RECEIVE_STATE                = 4\nCM_SEND_PENDING_STATE           = 5\nCM_CONFIRM_STATE                = 6\nCM_CONFIRM_SEND_STATE           = 7\nCM_CONFIRM_DEALLOCATE_STATE     = 8\nCM_DEFER_RECEIVE_STATE          = 9\nCM_DEFER_DEALLOCATE_STATE       = 10\nCM_SYNC_POINT_STATE             = 11\nCM_SYNC_POINT_SEND_STATE        = 12\nCM_SYNC_POINT_DEALLOCATE_STATE  = 13\nCM_CONVERSATION_STATE.2         = 'CM_INITIALIZE_STATE'\nCM_CONVERSATION_STATE.3         = 'CM_SEND_STATE'\nCM_CONVERSATION_STATE.4         = 'CM_RECEIVE_STATE'\nCM_CONVERSATION_STATE.5         = 'CM_SEND_PENDING_STATE'\nCM_CONVERSATION_STATE.6         = 'CM_CONFIRM_STATE'\nCM_CONVERSATION_STATE.7         = 'CM_CONFIRM_SEND_STATE'\nCM_CONVERSATION_STATE.8         = 'CM_CONFIRM_DEALLOCATE_STATE'\nCM_CONVERSATION_STATE.9         = 'CM_DEFER_RECEIVE_STATE'\nCM_CONVERSATION_STATE.10        = 'CM_DEFER_DEALLOCATE_STATE'\nCM_CONVERSATION_STATE.11        = 'CM_SYNC_POINT_STATE'\nCM_CONVERSATION_STATE.12        = 'CM_SYNC_POINT_SEND_STATE'\nCM_CONVERSATION_STATE.13        = 'CM_SYNC_POINT_DEALLOCATE_STATE'\n\nCM_BASIC_CONVERSATION           = 0    /* conversation_type           */\nCM_MAPPED_CONVERSATION          = 1\nCM_CONVERSATION_TYPE.0          = 'CM_BASIC_CONVERSATION'\nCM_CONVERSATION_TYPE.1          = 'CM_MAPPED_CONVERSATION'\n\nCM_NO_DATA_RECEIVED             = 0    /* data_received               */\nCM_DATA_RECEIVED                = 1\nCM_COMPLETE_DATA_RECEIVED       = 2\nCM_INCOMPLETE_DATA_RECEIVED     = 3\nCM_DATA_RECEIVED.0              = 'CM_NO_DATA_RECEIVED'\nCM_DATA_RECEIVED.1              = 'CM_DATA_RECEIVED'\nCM_DATA_RECEIVED.2              = 'CM_COMPLETE_DATA_RECEIVED'\nCM_DATA_RECEIVED.3              = 'CM_INCOMPLETE_DATA_RECEIVED'\n\nCM_DEALLOCATE_SYNC_LEVEL        = 0    /* deallocate_type             */\nCM_DEALLOCATE_FLUSH             = 1\nCM_DEALLOCATE_CONFIRM           = 2\nCM_DEALLOCATE_ABEND             = 3\nCM_DEALLOCATE_TYPE.0            = 'CM_DEALLOCATE_SYNC_LEVEL'\nCM_DEALLOCATE_TYPE.1            = 'CM_DEALLOCATE_FLUSH'\nCM_DEALLOCATE_TYPE.2            = 'CM_DEALLOCATE_CONFIRM'\nCM_DEALLOCATE_TYPE.3            = 'CM_DEALLOCATE_ABEND'\n\nCM_RECEIVE_ERROR                = 0    /* error_direction             */\nCM_SEND_ERROR                   = 1\nCM_ERROR_DIRECTION.0            = 'CM_RECEIVE_ERROR'\nCM_ERROR_DIRECTION.1            = 'CM_SEND_ERROR'\n\nCM_FILL_LL                      = 0    /* fill                        */\nCM_FILL_BUFFER                  = 1\nCM_FILL.0                       = 'CM_FILL_LL'\nCM_FILL.1                       = 'CM_FILL_BUFFER'\n\nCM_PREP_TO_RECEIVE_SYNC_LEVEL   = 0    /* prepare_to_receive_type     */\nCM_PREP_TO_RECEIVE_FLUSH        = 1\nCM_PREP_TO_RECEIVE_CONFIRM      = 2\nCM_PREPARE_TO_RECEIVE_TYPE.0    = 'CM_PREP_TO_RECEIVE_SYNC_LEVEL'\nCM_PREPARE_TO_RECEIVE_TYPE.1    = 'CM_PREP_TO_RECEIVE_FLUSH'\nCM_PREPARE_TO_RECEIVE_TYPE.2    = 'CM_PREP_TO_RECEIVE_CONFIRM'\n\nCM_RECEIVE_AND_WAIT             = 0    /* receive_type                */\nCM_RECEIVE_IMMEDIATE            = 1\nCM_RECEIVE_TYPE.0               = 'CM_RECEIVE_AND_WAIT'\nCM_RECEIVE_TYPE.1               = 'CM_RECEIVE_IMMEDIATE'\n\nCM_REQ_TO_SEND_NOT_RECEIVED     = 0    /* request_to_send_received    */\nCM_REQ_TO_SEND_RECEIVED         = 1\nCM_REQUEST_TO_SEND_RECEIVED.0   = 'CM_REQ_TO_SEND_NOT_RECEIVED'\nCM_REQUEST_TO_SEND_RECEIVED.1   = 'CM_REQ_TO_SEND_RECEIVED'\n\nCM_OK                           = 0    /* return_code                 */\nCM_ALLOCATE_FAILURE_NO_RETRY    = 1\nCM_ALLOCATE_FAILURE_RETRY       = 2\nCM_CONVERSATION_TYPE_MISMATCH   = 3\nCM_PIP_NOT_SPECIFIED_CORRECTLY  = 5\nCM_SECURITY_NOT_VALID           = 6\nCM_SYNC_LVL_NOT_SUPPORTED_LU    = 7\nCM_SYNC_LVL_NOT_SUPPORTED_PGM   = 8\nCM_TPN_NOT_RECOGNIZED           = 9\nCM_TP_NOT_AVAILABLE_NO_RETRY    = 10\nCM_TP_NOT_AVAILABLE_RETRY       = 11\nCM_DEALLOCATED_ABEND            = 17\nCM_DEALLOCATED_NORMAL           = 18\nCM_PARAMETER_ERROR              = 19\nCM_PRODUCT_SPECIFIC_ERROR       = 20\nCM_PROGRAM_ERROR_NO_TRUNC       = 21\nCM_PROGRAM_ERROR_PURGING        = 22\nCM_PROGRAM_ERROR_TRUNC          = 23\nCM_PROGRAM_PARAMETER_CHECK      = 24\nCM_PROGRAM_STATE_CHECK          = 25\nCM_RESOURCE_FAILURE_NO_RETRY    = 26\nCM_RESOURCE_FAILURE_RETRY       = 27\nCM_UNSUCCESSFUL                 = 28\nCM_DEALLOCATED_ABEND_SVC        = 30\nCM_DEALLOCATED_ABEND_TIMER      = 31\nCM_SVC_ERROR_NO_TRUNC           = 32\nCM_SVC_ERROR_PURGING            = 33\nCM_SVC_ERROR_TRUNC              = 34\nCM_TAKE_BACKOUT                 = 100\nCM_DEALLOCATED_ABEND_BO         = 130\nCM_DEALLOCATED_ABEND_SVC_BO     = 131\nCM_DEALLOCATED_ABEND_TIMER_BO   = 132\nCM_RESOURCE_FAIL_NO_RETRY_BO    = 133\nCM_RESOURCE_FAILURE_RETRY_BO    = 134\nCM_DEALLOCATED_NORMAL_BO        = 135\nCM_RETURN_CODE.0                = 'CM_OK'\nCM_RETURN_CODE.1                = 'CM_ALLOCATE_FAILURE_NO_RETRY'\nCM_RETURN_CODE.2                = 'CM_ALLOCATE_FAILURE_RETRY'\nCM_RETURN_CODE.3                = 'CM_CONVERSATION_TYPE_MISMATCH'\nCM_RETURN_CODE.5                = 'CM_PIP_NOT_SPECIFIED_CORRECTLY'\nCM_RETURN_CODE.6                = 'CM_SECURITY_NOT_VALID'\nCM_RETURN_CODE.7                = 'CM_SYNC_LVL_NOT_SUPPORTED_LU'\nCM_RETURN_CODE.8                = 'CM_SYNC_LVL_NOT_SUPPORTED_PGM'\nCM_RETURN_CODE.9                = 'CM_TPN_NOT_RECOGNIZED'\nCM_RETURN_CODE.10               = 'CM_TP_NOT_AVAILABLE_NO_RETRY'\nCM_RETURN_CODE.11               = 'CM_TP_NOT_AVAILABLE_RETRY'\nCM_RETURN_CODE.17               = 'CM_DEALLOCATED_ABEND'\nCM_RETURN_CODE.18               = 'CM_DEALLOCATED_NORMAL'\nCM_RETURN_CODE.19               = 'CM_PARAMETER_ERROR'\nCM_RETURN_CODE.20               = 'CM_PRODUCT_SPECIFIC_ERROR'\nCM_RETURN_CODE.21               = 'CM_PROGRAM_ERROR_NO_TRUNC'\nCM_RETURN_CODE.22               = 'CM_PROGRAM_ERROR_PURGING'\nCM_RETURN_CODE.23               = 'CM_PROGRAM_ERROR_TRUNC'\nCM_RETURN_CODE.24               = 'CM_PROGRAM_PARAMETER_CHECK'\nCM_RETURN_CODE.25               = 'CM_PROGRAM_STATE_CHECK'\nCM_RETURN_CODE.26               = 'CM_RESOURCE_FAILURE_NO_RETRY'\nCM_RETURN_CODE.27               = 'CM_RESOURCE_FAILURE_RETRY'\nCM_RETURN_CODE.28               = 'CM_UNSUCCESSFUL'\nCM_RETURN_CODE.30               = 'CM_DEALLOCATED_ABEND_SVC'\nCM_RETURN_CODE.31               = 'CM_DEALLOCATED_ABEND_TIMER'\nCM_RETURN_CODE.32               = 'CM_SVC_ERROR_NO_TRUNC'\nCM_RETURN_CODE.33               = 'CM_SVC_ERROR_PURGING'\nCM_RETURN_CODE.34               = 'CM_SVC_ERROR_TRUNC'\nCM_RETURN_CODE.100              = 'CM_TAKE_BACKOUT'\nCM_RETURN_CODE.130              = 'CM_DEALLOCATED_ABEND_BO'\nCM_RETURN_CODE.131              = 'CM_DEALLOCATED_ABEND_SVC_BO'\nCM_RETURN_CODE.132              = 'CM_DEALLOCATED_ABEND_TIMER_BO'\nCM_RETURN_CODE.133              = 'CM_RESOURCE_FAIL_NO_RETRY_BO'\nCM_RETURN_CODE.134              = 'CM_RESOURCE_FAILURE_RETRY_BO'\nCM_RETURN_CODE.135              = 'CM_DEALLOCATED_NORMAL_BO'\n\nCM_WHEN_SESSION_ALLOCATED       = 0    /* return_control              */\nCM_IMMEDIATE                    = 1\nCM_RETURN_CONTROL.0             = 'CM_WHEN_SESSION_ALLOCATED'\nCM_RETURN_CONTROL.1             = 'CM_IMMEDIATE'\n\nCM_BUFFER_DATA                  = 0    /* send_type                   */\nCM_SEND_AND_FLUSH               = 1\nCM_SEND_AND_CONFIRM             = 2\nCM_SEND_AND_PREP_TO_RECEIVE     = 3\nCM_SEND_AND_DEALLOCATE          = 4\nCM_SEND_TYPE.0                  = 'CM_BUFFER_DATA'\nCM_SEND_TYPE.1                  = 'CM_SEND_AND_FLUSH'\nCM_SEND_TYPE.2                  = 'CM_SEND_AND_CONFIRM'\nCM_SEND_TYPE.3                  = 'CM_SEND_AND_PREP_TO_RECEIVE'\nCM_SEND_TYPE.4                  = 'CM_SEND_AND_DEALLOCATE'\n\nCM_NO_STATUS_RECEIVED           = 0    /* status_received             */\nCM_SEND_RECEIVED                = 1\nCM_CONFIRM_RECEIVED             = 2\nCM_CONFIRM_SEND_RECEIVED        = 3\nCM_CONFIRM_DEALLOC_RECEIVED     = 4\nCM_TAKE_COMMIT                  = 5\nCM_TAKE_COMMIT_SEND             = 6\nCM_TAKE_COMMIT_DEALLOCATE       = 7\nCM_STATUS_RECEIVED.0            = 'CM_NO_STATUS_RECEIVED'\nCM_STATUS_RECEIVED.1            = 'CM_SEND_RECEIVED'\nCM_STATUS_RECEIVED.2            = 'CM_CONFIRM_RECEIVED'\nCM_STATUS_RECEIVED.3            = 'CM_CONFIRM_SEND_RECEIVED'\nCM_STATUS_RECEIVED.4            = 'CM_CONFIRM_DEALLOC_RECEIVED'\nCM_STATUS_RECEIVED.5            = 'CM_TAKE_COMMIT'\nCM_STATUS_RECEIVED.6            = 'CM_TAKE_COMMIT_SEND'\nCM_STATUS_RECEIVED.7            = 'CM_TAKE_COMMIT_DEALLOCATE'\n\nCM_NONE                         = 0    /* sync_level                  */\nCM_CONFIRM                      = 1\nCM_SYNC_POINT                   = 2\nCM_SYNC_LEVEL.0                 = 'CM_NONE'\nCM_SYNC_LEVEL.1                 = 'CM_CONFIRM'\nCM_SYNC_LEVEL.2                 = 'CM_SYNC_POINT'\n\n/******************** END OF SAA VARIABLE NAMES ***********************/\n\n\nreturn\n./ ADD NAME=JJ$SCHAC\nJJ$SCHAC CSECT ,\nJJ$SCHAC AMODE 31\nJJ$SCHAC RMODE ANY\n*\n* ENTRY PARAMETERS\n*   0(R1) PTR SCIB - TRANSACTION SCHEDULER INFORMATION BLOCK\n*   4(R1) PTR TXIB - TRANSACTION INSTANCE INFORMATION BLOCK\n*\n* CALLED BY\n*   JJ$SCHMI ON INBOUND ATTACH (IRB)\n*\n* FUNCTION\n*   CREATE ADDRESS SPACE AND ASSOCIATE INCOMING ATTACH WITH NEWLY\n*   CREATED ADDRESS SPACE\n*\n         BAKR  R14,0\n         LR    R12,R15\n         USING JJ$SCHAC,R12\n*\n         LM    R10,R11,0(R1)           ESTABLISH ADDRESSABILITY\n         USING SCIB,R10\n         USING TXIB,R11\n         USING XCFMS_INBOUND_FMH5,TXFMH5\n*\n         CLC   =C'SCIB',SCIBID\n         BNE   *-1\n         CLC   =C'TXIB',TXIBID\n         BNE   *-1\n*\n         LA    R9,XCFMS_INBOUND_FMH5\n         AH    R9,XCFMS_PROFILE_OFFSET\n         USING TP_PROFILE,R9\n*\n         STORAGE OBTAIN,               OBTAIN WORKAREA                 X\n               SP=229,                                                 X\n               CALLRKY=YES,                                            X\n               LENGTH=ACWRKL\n         LR    R13,R1\n         MVC   4(4,R1),=C'F1SA'\n         USING ACWRK,R13\n*\n         LH    R1,XCFMS_PROFILE_LENGTH\n         LTR   R1,R1\n         BZ    CLEANUP\n*\n         CLC   TP_PROFILE_TPSCHED_EXIT,TPSEXIT\n         BNE   CLEANUP\n*\n         CLC   NON_ASCH_NUM_OF_RECORDS,=F'1'\n         BNZ   CLEANUP\n*\n         CLC   NON_ASCH_LEN_OF_RECORDS,=F'124'\n         BH    CLEANUP\n*\n         STM   R10,R11,UTOKEN          UTOKEN FOR TERM RTN\n         MVC   ACASCRE,LASCRE\n         L     R3,=V(JJ$SCHAT)         TERM RTN ADDRESS\n         ASCRE STPARM=NON_ASCH_DATA-2, START PARAMETERS                X\n               ODA=ASEO,                                               X\n               INIT=ACAIRTN,           ADDR SPC INIT ROUTINE           X\n               TRMEXIT=(3),            TRM RTN (CURR TCB IRB)          X\n               UTOKEN=UTOKEN,          TOKEN FOR TRM EXIT              X\n               ASPARM=SCASPARM,        PARM FOR ASEXT                  X\n               ATTR=(PERM),                                            X\n               MF=(E,ACASCRE)\n         LTR   R15,R15\n         BNZ   CLEANUP\n*\n         L     R8,ASEOECB\n         USING EAECB,R8\n         IPK   ,\n         SPKA  0                       RIM WAIT ECB IS IN KEY0\n         WAIT  ECB=EAERIMWT\n         SPKA  0(R2)\n*\n         CALL  ATBCONN,                CONNECT                         X\n               (ASEOASCB,                NEWLY STARTED AS TO THIS SCH  X\n               RC),                                                    X\n               VL,MF=(E,LCALL)\n         L     R15,RC\n         LTR   R15,R15\n         BNZ   *-1\n*\n         CALL  ATBASOC,                ASSOCIATE                       X\n               (XCFMS_TP_ID,             INBOUND CALL                  X\n               SCASCB,                                                 X\n               ASEOASCB,                 WITH NEWLY STARTED AS         X\n               UTOKEN,                                                 X\n               RC),                                                    X\n               VL,MF=(E,LCALL)\n         L     R15,RC\n         LTR   R15,R15\n         BNZ   *-1\n*\n         TM    SCDEBUG,DEBUGON\n         BZ    NWSCHACS\n         WTO   'JJ$SCHAC TX START'\nNWSCHACS DS    0H\n*\n         L     R3,ASEOASCB\n         POST  EAEASWT,                POST ADDR SPC TO CONTINUE       X\n               ASCB=(3),                                               X\n               ECBKEY=0,                                               X\n               LINKAGE=SYSTEM,                                         X\n               ERRET=BR14,                                             X\n               MF=(E,LPOST)\n         B     ACDONE\n*\nCLEANUP  DS    0H\n         TM    SCDEBUG,DEBUGON\n         BZ    NWSCHACC\n         WTO   'JJ$SCHAC CLEANUP TP'\nNWSCHACC DS    0H\n*\n         CALL  ATBCTP3,                                                X\n               (XCFMS_TP_ID,                                           X\n               ATBCMTP_TP_NOT_AVAIL_NO_RETRY,                          X\n               ATBCMTP_NOTIFY_TYPE_NONE,                               X\n               ATBCSS_FW0,                                             X\n               ATBCSS_FW0,                                             X\n               RC),                                                    X\n               VL,MF=(E,LCALL)\n*\nACDONE   DS    0H\n         LR    R1,R13\n         STORAGE RELEASE,                                              X\n               SP=229,                                                 X\n               CALLRKY=YES,                                            X\n               LENGTH=ACWRKL,                                          X\n               ADDR=(1)\n*\n         PR    ,\n*\nBR14     DS    0H\n         BR    R14\n*\nLASCRE   ASCRE MF=L\nLASCREL  EQU   *-LASCRE\n*\nTPSEXIT  DC    CL8'JJ$SCHSE',V(JJ$SCHSE)\nACAIRTN  DC    CL8'JJ$SCHAI',V(JJ$SCHAI)\n*\n         ATBCSASM ,\n*\n         LTORG ,\n*\nACWRK    DSECT ,\nSAVEAREA DS    18F\nACASCRE  DS    XL(LASCREL)\nUTOKEN   DS    2A                      A(SCIB,TXIB)\nLPOST    POST  ECBKEY=YES,MF=L\nLCALL    DS    6F\nRC       DS    F\nACWRKL   EQU   *-ACWRK\n*\n         SCIB ,\n         TXIB ,\n*\n         ATBXCFMS ,\n         ATBDFTP ,\n         IXCYMEPL ,\n         IEZEAECB ,\n         YREGS ,\n*\n         END   ,\n./ ADD NAME=JJ$SCHAI\nJJ$SCHAI CSECT ,\nJJ$SCHAI AMODE 31\nJJ$SCHAI RMODE ANY\n*\n* ENTRY PARAMETERS\n*   0(R1) PTR ASCB  - CURRENT ADDRESS SPACE\n*   4(R1) PTR EAECB - SASI COMMUNICATIONS ECBS\n*\n* CALLED BY\n*   ADDRESS SPACE INITIALISATION (RB)\n*\n* FUNCTION\n*   NOTIFY AND WAIT ON SCHEDULER TO PERFORM ALL NESSESARY INITIALISAION\n*\n         SPKA  X'00'                   CAUSE 0C2 IF CALLED INCORRECTLY\n         BAKR  R14,0\n         LR    R12,R15\n         USING JJ$SCHAI,R12\n*\n         L     R11,4(,R1)\n         USING EAECB,R11\n*\n         STORAGE OBTAIN,                                               X\n               LENGTH=AIWRKL\n         MVC   4(4,R1),=C'F1SA'\n         LR    R13,R1\n         USING AIWRK,R13\n*\n         ASEXT ASPARM\n         L     R10,2(,R1)              SCHEDULER ASCB ADDRESS\n         POST  EAERIMWT,               POST SCHEDULER                  X\n               ASCB=(10),                                              X\n               ECBKEY=0,                                               X\n               LINKAGE=SYSTEM,                                         X\n               ERRET=BR14,                                             X\n               MF=(E,LPOST)\n*\n         WAIT  ECB=EAEASWT             WAIT FOR SCHEDULER TO COMPLETE\n*                                        INITIALISATION FOR THIS AS\n         LR    R1,R13\n         STORAGE RELEASE,                                              X\n               ADDR=(1),                                               X\n               LENGTH=AIWRKL\n         PR    ,\n*\nBR14     DS    0H\n         BR    R14\n*\n         LTORG ,\n*\nAIWRK    DSECT ,\nSAVEAREA DS    18F\nLPOST    POST  ECBKEY=YES,MF=L\nAIWRKL   EQU   *-AIWRK\n*\n         IEZEAECB ,\n*\n         YREGS ,\n*\n         END   ,\n./ ADD NAME=JJ$SCHAT\nJJ$SCHAT CSECT ,\nJJ$SCHAT AMODE 31\nJJ$SCHAT RMODE ANY\n*\n* ENTRY PARAMETERS\n*   0(R1) PTR SCIB - TRANSACTION SCHEDULER INFORMATION BLOCK\n*   4(R1) PTR TXIB - TRANSACTION INSTANCE INFORMATION BLOCK\n*\n* CALLED BY\n*   ADDRESS SPACE TERMINATION (IRB)\n*\n* FUNCTION\n*   CLEANUP ALL RESOURCES ASSOCIATED WITH THIS TRANSACTION INSTANCE\n*\n         BAKR  R14,0\n         LR    R12,R15\n         USING JJ$SCHAT,R12\n*\n         LM    R10,R11,0(R1)\n         USING SCIB,R10\n         USING TXIB,R11\n*\n         CLC   =C'SCIB',SCIBID\n         BNE   *-1\n         CLC   =C'TXIB',TXIBID\n         BNE   *-1\n*\n         TM    SCDEBUG,DEBUGON\n         BZ    NWSCHAT\n         WTO   'JJ$SCHAT TX END'\nNWSCHAT  DS    0H\n*\n         L     R3,TXIBLEN\n         STORAGE RELEASE,                                              X\n               SP=229,                                                 X\n               CALLRKY=YES,                                            X\n               ADDR=(11),                                              X\n               LENGTH=(3)\n*\n         PR    ,\n*\n         LTORG ,\n*\n         SCIB ,\n         TXIB ,\n*\n         IXCYMEPL ,\n         IEZEAECB ,\n         YREGS ,\n*\n         END   ,\n./ ADD NAME=JJ$SCHID\nJJ$SCHID CSECT ,\nJJ$SCHID AMODE 31\nJJ$SCHID RMODE ANY\n*\n* ENTRY PARAMETERS\n*   0(R1) PTR SCIB - TRANSACTION SCHEDULER INFORMATION BLOCK\n*   4(R1) PTR TXIB - TRANSACTION INSTANCE INFORMATION BLOCK (OPTIONAL)\n*\n* CALLED BY\n*   JJ$SCHIN DURING INITIALISATION (RB, NO TXIB)\n*   JJ$SCHMI UPON APPC ACTIVE NOTIFICATION (IRB, TXIB PRESENT)\n*   JJ$SCHMI WHEN LU INACTIVE IS RECEIVED FOR INACTIVE LU\n*            (ALTERNATE SCHEDULER TERMINATING)\n*\n* FUNCTION\n*   WILL ISSUE APPC CONNECT TO CONNECT SCHEDULER TO APPC\n*   TXIB WILL BE FREED IF PRESENT\n*\n         BAKR  R14,0\n         LR    R12,R15\n         USING JJ$SCHID,R12\n*\n         LR    R9,R1\n         LM    R10,R11,0(R1)\n         USING SCIB,R10\n*\n         CLC   =C'SCIB',SCIBID\n         BNE   *-1\n*\n         STORAGE OBTAIN,               OBTAIN WORKAREA                 X\n               SP=229,                                                 X\n               CALLRKY=YES,                                            X\n               LENGTH=IDWRKL\n         LR    R13,R1\n         MVC   4(4,R1),=C'F1SA'\n         USING IDWRK,R13\n*\n         CALL  ATBIDN1,                IDENTIFY                        X\n               (SCNAME,                  SCHEDULER NAME                X\n               ATBCSS_FW0,               EXTRACT EXIT ADDR             X\n               ATBCSS_FW0,               EXTRACT EXIT DATA             X\n               SCMEMTK,                  MEMBER TOKEN                  X\n               ATBIDEN_PROFILE_REQUIRED, PROFILE PROCESSING            X\n               ATBIDEN_LU_INIT_STAT_ACTIVE,   LU STATUS                X\n               =CL8' ',                  PROFILE EXIT                  X\n               ATBCSS_FW0,               PROFILE EXIT DATA             X\n               RC),                      RETURN CODE                   X\n               VL,MF=(E,LCALL)           PROFILE PROCESSING\n*\n         TM    0(R9),X'80'             ONLY SCIB\n         BO    NOTXIB\n         USING TXIB,R11\n         CLC   TXIBID,=C'TXIB'\n         BNE   *-1\n         L     R3,TXIBLEN\n         STORAGE RELEASE,                                              X\n               SP=229,                                                 X\n               CALLRKY=YES,                                            X\n               LENGTH=(3),                                             X\n               ADDR=(11)\n         DROP  R11\nNOTXIB   DS    0H\n*\n         LR    R1,R13\n         STORAGE RELEASE,                                              X\n               SP=229,                                                 X\n               CALLRKY=YES,                                            X\n               LENGTH=IDWRKL,                                          X\n               ADDR=(1)\n*\n         L     R15,RC\n         PR    ,\n*\n         ATBCSASM ,\n*\n         LTORG ,\n*\nIDWRK    DSECT ,\nSAVEAREA DS    18F\nLCALL    DS    10F\nRC       DS    F\nIDWRKL   EQU   *-IDWRK\n*\n         SCIB  ,\n         TXIB  ,\n*\n         IXCYMEPL ,                    REQUIRED BY TXIB\n         YREGS ,\n*\n         END   ,\n./ ADD NAME=JJ$SCHIN\nJJ$SCHIN CSECT ,\nJJ$SCHIN AMODE 31\nJJ$SCHIN RMODE ANY\n         SPKA  X'70'                   CAUSE 0C2 IF CALLED INCORRECTLY\n         BAKR  R14,0\n         LR    R12,R15\n         USING JJ$SCHIN,R12\n         USING PSA,0\n*\n         STORAGE OBTAIN,                                               X\n               SP=229,                                                 X\n               CALLRKY=YES,                                            X\n               LENGTH=SCWRKL\n         LR    R13,R1\n         MVC   4(4,R1),=C'F1SA'\n         USING SCWRK,R13\n*\n         STORAGE OBTAIN,               OBTAIN STORAGE FOR              X\n               SP=229,                   TRANSACTION SCHEDULER         X\n               CALLRKY=YES,              INFORMATION BLOCK (SCIB)      X\n               LENGTH=SCIBL\n         LR    R11,R1\n         USING SCIB,R11\n         MVC   SCIBID,=C'SCIB'\n         MVC   SCIBLEN,=A(SCIBL)\n         MVC   SCASPARM,=AL2(L'SCASCB)\n         MVC   SCASCB,PSAAOLD\n         MVC   SCTCB,PSATOLD\n         MVC   SCBLUACT,=A(BLUINACT)   INDICATE BASE LU INACTIVE\n         MVI   SCDEBUG,0\n*\n         LA    R3,COMMFLD\n         EXTRACT (3),FIELDS=COMM,MF=(E,EXTRACT)\n         L     R10,COMMFLD\n         USING COM,R10\n         ICM   R9,B'1111',COMCIBPT\n         BZ    NOSTACIB\n         USING CIB,R9\n         CLI   CIBVERB,CIBSTART\n         BNE   NOSTACIB\n         CLC   =C'DEBUG',CIBDATA\n         BNE   NOSTACIB\n         OI    SCDEBUG,DEBUGON\nNOSTACIB DS    0H\n*\n         TM    SCDEBUG,DEBUGON\n         BZ    NWSCHIN\n         WTO   'JJ$SCHIN &SYSTIME &SYSDATE'\nNWSCHIN  DS    0H\n*\n         IAZXJSAB READ,                DEFAULT SCHEDNAME IS JOBNAME    X\n               JOBNAME=SCNAME\n         EREG  R1,R1\n         L     R3,0(,R1)\n         ICM   R0,B'0011',0(R3)        DATA LENGTH\n         BZ    NONAME\n         MVC   SCNAME,=CL8' '\n         CH    R0,=H'8'\n         BNH   NOTRUNK\n         LA    R0,8\nNOTRUNK  DS    0H\n         BCTR  R0,0\n         IPK   ,\n         LR    R1,R2                   PARM KEY\n         MVCSK SCNAME,2(R3)\nNONAME   DS    0H\n         TM    SCNAME,255-C' '\n         BNZ   OKNAME\n         MVC   SCNAME,=CL8'JJ$SCHED'\nOKNAME   DS    0H\n*\n         ST    R11,MIDATA\n         CALL  ATBJGP1,                JOIN_SYSAPPC_GROUP              X\n               (MSGINRTN,                MESSAGE IN ROUTINE            X\n               MIDATA,                   PARM FOR MI ROUTINE           X\n               SCMEMTK,                  XCF MEMBER TOKEN              X\n               XCFRC,                    XCF RETURN CODE               X\n               XCFRS,                    XCF REASON CODE               X\n               RC),                      CALL RETURN CODE              X\n               VL,MF=(E,LCALL)\n         L     R15,RC\n         LTR   R15,R15\n         BNZ   *-1\n*\n         CALL  JJ$SCHID,               IDENTIFY                        X\n               (SCIB),                                                 X\n               VL,MF=(E,LCALL)\n*\nGETCIB   DS    0H\n         ICM   R9,B'1111',COMCIBPT\n         BZ    NOCIB\n*\n         CLI   CIBVERB,CIBSTOP\n         BE    STOP\n         CLI   CIBVERB,CIBMODFY\n         BNE   NEXTCIB\n*\n         CLC   =C'STOP',CIBDATA\n         BE    STOP\n         CLC   =C'NODEBUG',CIBDATA\n         BNE   NONODBG\n         NI    SCDEBUG,DEBUGOFF\n         WTO   'JJ$SCHIN DEBUG NOW OFF'\n         B     NEXTCIB\nNONODBG  DS    0H\n         CLC   =C'DEBUG',CIBDATA\n         BNE   INVLMDFY\n         OI    SCDEBUG,DEBUGON\n         WTO   'JJ$SCHIN DEBUG NOW ON'\n         B     NEXTCIB\n*\nINVLMDFY DS    0H\n         WTO   'JJ$SCHIN INVALID MODIFY COMMAND'\nNEXTCIB  DS    0H\n         QEDIT ORIGIN=COMCIBPT,BLOCK=(9)\nNOCIB    DS    0H\n         QEDIT ORIGIN=COMCIBPT,CIBCTR=3\n         L     R1,COMECBPT\n         WAIT  ECB=(1),LONG=YES\n         B     GETCIB\n*\nSTOP     DS    0H\n         CALL  ATBUID1,                UNIDENTIFY                      X\n               (ATBUNID_UNIDENT_TYPE_NORMAL,                           X\n               RC),                                                    X\n               VL,MF=(E,LCALL)\n         L     R15,RC\n         LTR   R15,R15\n         BNZ   NOWAIT\n*\n         TM    SCBLUACT,X'40'          BYPASS WAIT IF POSTED\n         BO    NOWAIT\n         WAIT  ECB=SCBLUACT            WAIT FOR BASE LU TO BECOME INACT\nNOWAIT   DS    0H\n*\n         IXCLEAVE MEMTOKEN=SCMEMTK,                                    X\n               MF=(E,IXCLEAVE,COMPLETE)\n         LTR   R15,R15\n         BNZ   *-1\n*\n         LR    R1,R11\n         STORAGE RELEASE,              RELEASE SCIB                    X\n               SP=229,                                                 X\n               CALLRKY=YES,                                            X\n               LENGTH=SCIBL,                                           X\n               ADDR=(1)\n*\n         LR    R1,R13\n         STORAGE RELEASE,              WORK AREA                       X\n               SP=229,                                                 X\n               CALLRKY=YES,                                            X\n               LENGTH=SCWRKL,                                          X\n               ADDR=(1)\n*\n         PR    ,\n*\nMSGINRTN DC    V(JJ$SCHMI),CL8'JJ$SCHMI'\n*\n         ATBCSASM ,\n*\n         LTORG ,\n*\nSCWRK    DSECT ,\nSAVEAREA DS    18F\nLCALL    DS    10F\nMIDATA   DS    2A\n         IXCLEAVE MF=(L,IXCLEAVE,0D)\nXCFRC    DS    1F\nXCFRS    DS    1F\nRC       DS    1F\nEXTRACT  EXTRACT MF=L\nCOMMFLD  DS    1F\nSCWRKL   EQU   *-SCWRK\n*\n         SCIB ,\n         TXIB ,\n*\n         IXCYMEPL ,\n         IHAPSA ,\n         IKJTCB ,\n         IAZJSAB ,                     REQUIRED BY IAZXJSAB\n         IHAASCB ,                     REQUIRED BY IAZXJSAB\n         IHAASSB ,                     REQUIRED BY IAZXJSAB\n         IHASTCB ,                     REQUIRED BY IAZXJSAB\nCOM      DSECT ,\n         IEZCOM ,\nCIB      DSECT ,\n         IEZCIB ,\n         YREGS ,\n         END   ,\n./ ADD NAME=JJ$SCHMI\nJJ$SCHMI CSECT ,\nJJ$SCHMI AMODE 31\nJJ$SCHMI RMODE ANY\n*\n* ENTRY PARAMETERS\n*   R1 MEPL - XCF\n*\n* CALLED BY\n*   XCF (SRB)\n*\n* FUNCTION\n*   PROCESS INCOMING APPC MESSAGES\n*   - INBOUND ATTACH\n*   - LU ACTIVE\n*   - LU INACTIVE\n*   - APPC INITIALISED\n*   - APPC ABEND - RESTART WILL BE ATTEMPTED\n*   - APPC ABEND - NO RESTART (IE CANCEL)\n*\n* THE SRB WILL HAVE PTCB/PASID TO OUR JOBSTEP TASK SO WE\n*   CAN DO GETMAINS FOR THIS TCB.  (PTCB/PASID ENSURES\n*   THAT THE TCB WILL NOT DIE UNLESS THE SRB HAS ENDED, OTHER\n*   WISE AN INTEGRITY EXPOSURE WOULD EXIST - SRB GETMAINED\n*   STORAGE FREEMAINED BY TCB-EXIT)\n*\n         BAKR  R14,0\n         LR    R12,R15\n         USING JJ$SCHMI,R12\n         LR    R11,R1\n         USING MEPL,R11\n         USING XCFMS_SHORT_MESSAGE_HEADER,MEPLCNTL\n*\n         L     R10,MEPLMDAT\n         USING SCIB,R10\n*\n         CLC   =C'SCIB',SCIBID\n         BNE   *-1\n*\n         L     R3,MEPLMLEN\n         AL    R3,=A(TXIBL)\n*\n         L     R4,SCTCB\n         IC    R1,TCBPKF-TCB(,R4)\n         IPK   ,\n         SPKA  0(R1)\n         STORAGE OBTAIN,                                               X\n               SP=229,                                                 X\n               CALLRKY=YES,                                            X\n               TCBADDR=(4),                                            X\n               LENGTH=(3)\n         SPKA  0(R2)\n         LR    R9,R1\n         USING TXIB,R9\n         MVC   TXIBID,=C'TXIB'\n         ST    R3,TXIBLEN\n*\n         MVC   TXMEPL,MEPL\n         L     R3,MEPLMLEN\n         LTR   R3,R3\n         BZ    NOMSG\n*\n         IXCMSGI MSGTOKEN=MEPLMTOK,                                    X\n               MSGBUF=TXFMH5,                                          X\n               MF=(E,IXCMSGI,COMPLETE)\n         LTR   R15,R15\n         BNZ   *-1\nNOMSG    DS    0H\n*\n         LM    R3,R5,=A(TABLE,12,TABEND)\nLOOP     DS    0H\n         CLC   XCFMS_MESSAGE_TYPE,0(R3)\n         BE    DONE\n         BXLE  R3,R4,LOOP\nDONE     DS    0H\n         L     R1,8(,R3)\n         TM    SCDEBUG,DEBUGON\n         BZ    NWSCHMI\n         WTO   MF=(E,(1)),LINKAGE=BRANCH\nNWSCHMI  DS    0H\n         L     R15,4(,R3)\n         BR    R15\n*\nTABLE    DC    A(XCFMS_INBOUND_ATTACH,MIINAT,MSGIA)\n         DC    A(XCFMS_LU_ACTIVE,MILUAC,MSGLA)\n         DC    A(XCFMS_LU_NOACTIVE,MINLUA,MSGLNA)\n         DC    A(XCFMS_APPC_INIT,MIINIT,MSGAI)\n         DC    A(XCFMS_APPC_NORESTART,DEACTLU,MSGANR)\nTABEND   DC    A(XCFMS_APPC_RESTART,DEACTLU,MSGAR)\n         DC    A(0,FREETXIB,MSGUN)\n*\nMSGIA    WTO   'JJ$SCHMI INBOUND_ATTACH',                              X\n               MCSFLAG=BUSYEXIT,MF=L\nMSGLA    WTO   'JJ$SCHMI LU_ACTIVE',                                   X\n               MCSFLAG=BUSYEXIT,MF=L\nMSGLNA   WTO   'JJ$SCHMI LU_NOACTIVE',                                 X\n               MCSFLAG=BUSYEXIT,MF=L\nMSGAI    WTO   'JJ$SCHMI APPC_INIT',                                   X\n               MCSFLAG=BUSYEXIT,MF=L\nMSGAR    WTO   'JJ$SCHMI APPC_RESTART',                                X\n               MCSFLAG=BUSYEXIT,MF=L\nMSGANR   WTO   'JJ$SCHMI APPC_NORESTART',                              X\n               MCSFLAG=BUSYEXIT,MF=L\nMSGUN    WTO   'JJ$SCHMI XCFMS_MESSAGE_TYPE=*UNKNOWN*',                X\n               MCSFLAG=BUSYEXIT,MF=L\n*\nFREETXIB DS    0H\n         L     R4,SCTCB\n         L     R3,TXIBLEN\n         IC    R1,TCBPKF-TCB(,R4)\n         IPK   ,\n         SPKA  0(R1)\n         LR    R1,R9\n         STORAGE RELEASE,                                              X\n               SP=229,                                                 X\n               CALLRKY=YES,                                            X\n               TCBADDR=(4),                                            X\n               LENGTH=(3),                                             X\n               ADDR=(1)\n         SPKA  0(R2)\n         PR    ,\n*\nMILUAC   DS    0H\n         CLC   XCFMS_TRANS_SCHED_NAME,SCNAME\n         BNE   FREETXIB\n         TM    XCFMS_LU_FLAGS,XCFMS_BASE_LU\n         BNO   FREETXIB\n         L     R2,=A(BLUINACT)\n         L     R3,=A(BLUACT)\n         CS    R2,R3,SCBLUACT          INDICATE LU ACTIVE\n         B     FREETXIB\n*\nMINLUA   DS    0H\n         CLC   XCFMS_TRANS_SCHED_NAME,SCNAME\n         BNE   FREETXIB\n         TM    XCFMS_LU_FLAGS,XCFMS_BASE_LU\n         BNO   FREETXIB\nDEACTLU  DS    0H\n         L     R2,=A(BLUACT)\n         L     R3,=A(BLUINACT)\n         CS    R2,R3,SCBLUACT          INDICATE LU INACTIVE\n         BZ    FREETXIB\n         LR    R1,R2\n         N     R1,=A(BLUWAIT)          IF WAIT BIT ON\n         BZ    MIINIT                    THEN ISSUE POST\n         POST  SCBLUACT,               ELSE MIINIT;                    X\n               LINKAGE=SYSTEM            ALTERNATE SCHEDULER RELEASED\n         B     FREETXIB                  THE LU\n*\nMIINIT   DS    0H\n         SETLOCK OBTAIN,                                               X\n               TYPE=LOCAL,                                             X\n               MODE=UNCOND,                                            X\n               REGS=STDSAVE\n         LTR   R15,R15\n         BNZ   *-1\n         LA    R1,TXSCIB\n         ST    R1,TXIRBP\n         LA    R1,SCIB\n         ST    R1,TXSCIB\n         LA    R1,TXIB\n         ST    R1,TXTXIB\n         SCHEDIRB EPPTR=IDRTN,                                         X\n               TCBPTR=SCTCB,                                           X\n               MODE=SUPR,                                              X\n               KEY=PROP,                                               X\n               PARAMPTR=TXIRBP,                                        X\n               MF=(E,SCHEDIRB,COMPLETE)\n         LTR   R15,R15\n         BNZ   *-1\n         SETLOCK RELEASE,                                              X\n               TYPE=LOCAL,                                             X\n               REGS=STDSAVE\n         LTR   R15,R15\n         BNZ   *-1\n         PR    ,\n*\nMIINAT   DS    0H\n         SETLOCK OBTAIN,                                               X\n               TYPE=LOCAL,                                             X\n               MODE=UNCOND,                                            X\n               REGS=STDSAVE\n         LTR   R15,R15\n         BNZ   *-1\n         LA    R1,TXSCIB\n         ST    R1,TXIRBP\n         LA    R1,SCIB\n         ST    R1,TXSCIB\n         LA    R1,TXIB\n         ST    R1,TXTXIB\n         SCHEDIRB EPPTR=ACRTN,                                         X\n               TCBPTR=SCTCB,                                           X\n               MODE=SUPR,                                              X\n               KEY=PROP,                                               X\n               PARAMPTR=TXIRBP,                                        X\n               MF=(E,SCHEDIRB,COMPLETE)\n         LTR   R15,R15\n         BNZ   *-1\n         SETLOCK RELEASE,                                              X\n               TYPE=LOCAL,                                             X\n               REGS=STDSAVE\n         LTR   R15,R15\n         BNZ   *-1\n         PR    ,\n*\nIDRTN    DC    V(JJ$SCHID),CL8'JJ$SCHID'\nACRTN    DC    V(JJ$SCHAC),CL8'JJ$SCHAC'\n*\n         LTORG ,\n*\n         SCIB ,\n         TXIB ,\n*\n         IXCYMEPL ,\n         ATBXCFMS ,\n         CVT   DSECT=YES\n         IKJTCB ,\n         IHAPSA ,\n         YREGS ,\n*\n         END   ,\n./ ADD NAME=JJ$SCHSE\nJJ$SCHSE CSECT ,\nJJ$SCHSE AMODE 31\nJJ$SCHSE RMODE ANY\n*\n* ENTRY PARAMETERS\n*   0(R1) NUMBER OF RECORDS\n*   4(R1) LRECL\n*   8(R1) FIRST RECORD\n*  12(R1) MSG ROUTINE ADDRESS\n*\n* CALLED BY\n*   ATBSDFMU WHEN DEFINING A PROFILE WITH TPSCHED_EXIT(JJ$SCHSE)\n*\n* FUNCTION\n*   ENSURE THAT THE PROFILE DATA IS ONLY ONE LINE AND DOES NOT EXCEED\n*   THE ASCRE RESTRICTIONS ON STPARM\n*\n         SPKA  X'10'                   CAUSE 0C2 IF CALLED INCORRECTLY\n         BAKR  R14,0\n         LR    R12,R15\n         USING JJ$SCHSE,R12\n*\n         LM    R3,R6,0(R1)             PICK UP PARAMETERS\n*\n         STORAGE OBTAIN,                                               X\n               LENGTH=WRKL\n         LR    R13,R1\n         MVC   4(4,R13),=C'F1SA'\n         USING WRK,R13\n*\n         SLR   R10,R10                 INITIAL RETURN CODE\n         CLC   =F'1',0(R3)             CHECK FOR ONE LINE\n         BNE   ERROR\n         CLC   =F'124',0(R4)           MAXIMUM OF 124 CHARS (ASCRE)\n         BH    NOMSG\n*\nERROR    DS    0H\n         LA    R10,4                   SET RETURNCODE TO 4\n         L     R15,0(,R6)\n         CALL  (15),                                                   X\n               (MSGLEN,                                                X\n               MESSAGE),                                               X\n               VL,MF=(E,LCALL)\nNOMSG    DS    0H\n*\n         LR    R1,R13\n         STORAGE RELEASE,                                              X\n               LENGTH=WRKL,                                            X\n               ADDR=(1)\n*\n         LR    R15,R10\n         PR    ,\n*\nMSGLEN   DC    A(L'MESSAGE)\nMESSAGE  DC    C'JJ$SCHSE Scheduler data (ASCRE STPARM=) must be one liX\n               ne and not exceed 124 characters.'\n*\n         LTORG ,\n*\nWRK      DSECT ,\nSAVEAREA DS    18F\nLCALL    DS    3F\nWRKL     EQU   *-WRK\n*\n         YREGS ,\n*\n         END   ,\n./ ADD NAME=JJINFO      01 00 99291 99291 135540 0005 0005 0000 IBMUSER\n//DEFAULT  OUTPUT DEFAULT=YES,JESDS=ALL,CLASS=T\n//IEFPROC  EXEC PGM=IKJEFT1A,PARM=SYSINFO\n//SYSEXEC  DD DSN=IBMUSER.JSCH.SOURCE,DISP=SHR\n//SYSTSPRT DD SYSOUT=T\n//SYSTSIN  DD DUMMY\n./ ADD NAME=SCHED00     01 00 99293 99293 093908 0006 0006 0000 IBMUSER\nPPT PGMNAME(JJ$SCHIN)   /* JSCH                                      */\n    NOCANCEL            /* CANNOT BE CANCELLED                       */\n    KEY(7)              /* AUTH USER KEY                             */\n    NOSWAP              /* NON-SWAPPABLE                             */\n    PRIV                /* PROGRAM IS PRIVILIGED                     */\n    SYST                /* SYSTEM TASK                               */\n./ ADD NAME=SCIB\n         MACRO ,\n         SCIB ,\nSCIB     DSECT ,\nSCIBID   DS    C'SCIB'\nSCIBLEN  DS    AL4(SCIBL)\nSCDEBUG  DS    X\nDEBUGON  EQU   X'80'\nDEBUGOFF EQU   X'FF'-DEBUGON\n         DS    X\nSCASPARM DS    AL2(L'SCASCB)\nSCASCB   DS    A                       SCHEDULERS ASCB\nSCTCB    DS    A                       SCHEDULERS TCB\nSCMEMTK  DS    XL8                     XCF MEMBER TOKEN\nSCNAME   DS    CL8                     SCHEDULER NAME\nSCBLUACT DS    F                       BASE LU ACTIVE / TERM ECB\nBLUACT   EQU   X'00000000'             BASE LU ACTIVE FLAG\nBLUINACT EQU   X'40000000'             BASE LU INACTIVE FLAG\nBLUWAIT  EQU   X'80000000'             WAIT FLAG\nSCIBL    EQU   *-SCIB\n         MEND  ,\n./ ADD NAME=STCJCL      01 01 99288 99288 145624 0006 0005 0001 Z567592\n//DEFAULT  OUTPUT DEFAULT=YES,JESDS=ALL,CLASS=T\n//IEFPROC  EXEC PGM=IKJEFT1A,PARM=REXXS\n//STEPLIB  DD DSN=QDB610.D1.SDSNLOAD,DISP=SHR\n//SYSEXEC  DD DSN=IBMUSER.JSCH.SOURCE,DISP=SHR\n//SYSTSPRT DD SYSOUT=T\n//SYSTSIN  DD DUMMY\n./ ADD NAME=STCJOB      01 00 99288 99288 110255 0003 0003 0000 IBMUSER\n//STCJOB   JOB ,STCJOB\n//         JCLLIB ORDER=(&D.)\n//         INCLUDE MEMBER=&M.\n./ ADD NAME=SYSINFO     01 08 99291 99323 153221 0373 0311 0122 IBMUSER\n/* REXX */\n\n  call atbcmrexx\n\n  /* Initialise conversation */\n  address \"CPICOMM\" \"CMACCP CON_ID C_RC\"\n  if C_RC \u00ac= CM_OK then\n    do\n      call wto \"CMACCP failed RC =\" CM_RETURN_CODE.C_RC\n      exit 8\n    end\n\n  do until RCV_STA = CM_SEND_RECEIVED\n    rcv_len = 4096\n    address \"CPICOMM\" \"CMRCV CON_ID RCV_MSG RCV_LEN\",\n                      \"RCV_RET RCV_RLN RCV_STA REQ_SEND C_RC\"\n    if C_RC \u00ac= CM_OK then\n      do\n        call sendmsg \"<BR>CMRCV failed RC =\" CM_RETURN_CODE.C_RC\n        exit 8\n      end\n    if RCV_RET \u00ac= CM_NO_DATA_RECEIVED then\n      cmdline = left(rcv_msg,rcv_rln)\n\n  address 'TSO' 'CONSPROF UNSOLDISPLAY(NO) SOLDISPLAY(NO)'\n  address 'TSO' 'CONSOLE NAME(JJINFO) CART(JJINFO) ACTIVATE'\n\n  call sendmsg 'Content-type: text/html'\n  call sendmsg ''\n  call sendmsg '<h2>System Information</h2>'\n\n  call sendmsg '<h3>System IPL Volume</h3>'\n  address 'CONSOLE' 'DISPLAY U,IPLVOL'\n  msg = getmsg('iplvol.','SOL','JJINFO',,3)\n  call sendmsg '<pre>'\n  do i = 2 to iplvol.0\n    call sendmsg iplvol.i\n  end\n  call sendmsg '</pre>'\n\n  call sendmsg '<h3>System IPL Info</h3>'\n  address 'CONSOLE' 'DISPLAY IPLINFO'\n  msg = getmsg('iplinfo.','SOL','JJINFO',,3)\n  call sendmsg '<pre>'\n  do i = 2 to iplinfo.0\n    call sendmsg iplinfo.i\n  end\n  call sendmsg '</pre>'\n\n  call sendmsg '<h3>System I/O Configuration</h3>'\n  address 'CONSOLE' 'DISPLAY IOS,CONFIG(ALL)'\n  msg = getmsg('iosconfig.','SOL','JJINFO',,3)\n  call sendmsg '<pre>'\n  do i = 2 to iosconfig.0\n    call sendmsg iosconfig.i\n  end\n  call sendmsg '</pre>'\n\n  call sendmsg '<h3>System CPU Configuration</h3>'\n  address 'CONSOLE' 'DISPLAY M=CPU'\n  msg = getmsg('cpuconfig.','SOL','JJINFO',,3)\n  call sendmsg '<pre>'\n  do i = 2 to cpuconfig.0\n    call sendmsg cpuconfig.i\n  end\n  call sendmsg '</pre>'\n\n  call sendmsg '<h3>System Storage Configuration</h3>'\n  address 'CONSOLE' 'DISPLAY M=STOR'\n  msg = getmsg('storcfg.','SOL','JJINFO',,3)\n  call sendmsg '<pre>'\n  do i = 2 to storcfg.0\n    call sendmsg storcfg.i\n  end\n  call sendmsg ''\n  address 'CONSOLE' 'DISPLAY M=ESTOR'\n  msg = getmsg('estorcfg.','SOL','JJINFO',,3)\n  call sendmsg '<pre>'\n  do i = 2 to estorcfg.0\n    call sendmsg estorcfg.i\n  end\n  call sendmsg '</pre>'\n\n  call sendmsg '<h3>Sysplex Systems</h3>'\n  address 'CONSOLE' 'DISPLAY XCF'\n  msg = getmsg('xcf.','SOL','JJINFO',,3)\n  call sendmsg '<pre>'\n  do i = 2 to xcf.0\n    call sendmsg xcf.i\n  end\n  call sendmsg '</pre>'\n\n  call sendmsg '<h3>Sysplex Coupling Facilities</h3>'\n  address 'CONSOLE' 'DISPLAY XCF,CF'\n  msg = getmsg('xes.','SOL','JJINFO',,3)\n  call sendmsg '<pre>'\n  do i = 2 to xes.0\n    call sendmsg xes.i\n  end\n  call sendmsg ''\n  address 'CONSOLE' 'DISPLAY CF'\n  msg = getmsg('dcf.','SOL','JJINFO',,3)\n  do i = 2 to dcf.0\n    call sendmsg dcf.i\n  end\n  call sendmsg '</pre>'\n\n  call sendmsg '<h3>Sysplex Groups</h3>'\n  address 'CONSOLE' 'DISPLAY XCF,GROUP'\n  msg = getmsg('xcfg.','SOL','JJINFO',,3)\n  call sendmsg '<pre>'\n  do i = 2 to xcfg.0\n    call sendmsg xcfg.i\n  end\n  call sendmsg '</pre>'\n\n  call sendmsg '<h3>Sysplex Coupling Facilities Structure Summary</h3>'\n  address 'CONSOLE' 'DISPLAY XCF,STR'\n  msg = getmsg('str.','SOL','JJINFO',,3)\n  call sendmsg '<pre>'\n  do i = 2 to str.0\n    call sendmsg str.i\n  end\n  call sendmsg '</pre>'\n\n  call sendmsg '<h3>Sysplex Coupling Dataset Status</h3>'\n  address 'CONSOLE' 'DISPLAY XCF,COUPLE'\n  msg = getmsg('xcfc.','SOL','JJINFO',,3)\n  call sendmsg '<pre>'\n  do i = 2 to xcfc.0\n    call sendmsg xcfc.i\n  end\n  call sendmsg '</pre>'\n\n  call sendmsg '<h3>Sysplex Coupling Facilities Structure Detail</h3>'\n  address 'CONSOLE' 'DISPLAY XCF,STR,STRNM=ALL'\n  msg = getmsg('stra.','SOL','JJINFO',,3)\n  call sendmsg '<pre>'\n  do i = 2 to stra.0\n    call sendmsg stra.i\n  end\n  call sendmsg '</pre>'\n\n  address 'TSO' 'CONSOLE DEACTIVATE'\n\n  address \"CPICOMM\" \"CMDEAL CON_ID C_RC\"\n  if C_RC \u00ac= CM_OK then\n    do\n      call wto \"CMDEAL failed RC =\" CM_RETURN_CODE.C_RC\n      exit 8\n    end\n\nexit\n\nwto:\n  arg msg\n  address \"TSO\" \"SEND '\" || msg || \"',OPERATOR(11)\"\nreturn\n\nsendmsg:\n  parse arg msg\n  msg_len = length(msg)\n  address \"CPICOMM\" \"CMSEND CON_ID MSG MSG_LEN REQ_SEND C_RC\"\n  if C_RC \u00ac= CM_OK then\n    do\n      call wto \"CMSEND failed RC =\" CM_RETURN_CODE.C_RC\n      exit 8\n    end\n\n\natbcmrexx:\n\n/*************** SAA CPI Communications Variable Names ****************/\n/*                                                                    */\n/* The following variables are defined and available on all operating */\n/* systems supporting SAA CPI Communications.  All variables for      */\n/* SAA CPI Communications start with the letters 'CM'.                */\n/*                                                                    */\n/* The literals are provided for your convenience.  They may, or may  */\n/* not, be defined in other operating system environments.            */\n/*                                                                    */\n/**********************************************************************/\n\nCM_INITIALIZE_STATE             = 2    /* conversation_state          */\nCM_SEND_STATE                   = 3\nCM_RECEIVE_STATE                = 4\nCM_SEND_PENDING_STATE           = 5\nCM_CONFIRM_STATE                = 6\nCM_CONFIRM_SEND_STATE           = 7\nCM_CONFIRM_DEALLOCATE_STATE     = 8\nCM_DEFER_RECEIVE_STATE          = 9\nCM_DEFER_DEALLOCATE_STATE       = 10\nCM_SYNC_POINT_STATE             = 11\nCM_SYNC_POINT_SEND_STATE        = 12\nCM_SYNC_POINT_DEALLOCATE_STATE  = 13\nCM_CONVERSATION_STATE.2         = 'CM_INITIALIZE_STATE'\nCM_CONVERSATION_STATE.3         = 'CM_SEND_STATE'\nCM_CONVERSATION_STATE.4         = 'CM_RECEIVE_STATE'\nCM_CONVERSATION_STATE.5         = 'CM_SEND_PENDING_STATE'\nCM_CONVERSATION_STATE.6         = 'CM_CONFIRM_STATE'\nCM_CONVERSATION_STATE.7         = 'CM_CONFIRM_SEND_STATE'\nCM_CONVERSATION_STATE.8         = 'CM_CONFIRM_DEALLOCATE_STATE'\nCM_CONVERSATION_STATE.9         = 'CM_DEFER_RECEIVE_STATE'\nCM_CONVERSATION_STATE.10        = 'CM_DEFER_DEALLOCATE_STATE'\nCM_CONVERSATION_STATE.11        = 'CM_SYNC_POINT_STATE'\nCM_CONVERSATION_STATE.12        = 'CM_SYNC_POINT_SEND_STATE'\nCM_CONVERSATION_STATE.13        = 'CM_SYNC_POINT_DEALLOCATE_STATE'\n\nCM_BASIC_CONVERSATION           = 0    /* conversation_type           */\nCM_MAPPED_CONVERSATION          = 1\nCM_CONVERSATION_TYPE.0          = 'CM_BASIC_CONVERSATION'\nCM_CONVERSATION_TYPE.1          = 'CM_MAPPED_CONVERSATION'\n\nCM_NO_DATA_RECEIVED             = 0    /* data_received               */\nCM_DATA_RECEIVED                = 1\nCM_COMPLETE_DATA_RECEIVED       = 2\nCM_INCOMPLETE_DATA_RECEIVED     = 3\nCM_DATA_RECEIVED.0              = 'CM_NO_DATA_RECEIVED'\nCM_DATA_RECEIVED.1              = 'CM_DATA_RECEIVED'\nCM_DATA_RECEIVED.2              = 'CM_COMPLETE_DATA_RECEIVED'\nCM_DATA_RECEIVED.3              = 'CM_INCOMPLETE_DATA_RECEIVED'\n\nCM_DEALLOCATE_SYNC_LEVEL        = 0    /* deallocate_type             */\nCM_DEALLOCATE_FLUSH             = 1\nCM_DEALLOCATE_CONFIRM           = 2\nCM_DEALLOCATE_ABEND             = 3\nCM_DEALLOCATE_TYPE.0            = 'CM_DEALLOCATE_SYNC_LEVEL'\nCM_DEALLOCATE_TYPE.1            = 'CM_DEALLOCATE_FLUSH'\nCM_DEALLOCATE_TYPE.2            = 'CM_DEALLOCATE_CONFIRM'\nCM_DEALLOCATE_TYPE.3            = 'CM_DEALLOCATE_ABEND'\n\nCM_RECEIVE_ERROR                = 0    /* error_direction             */\nCM_SEND_ERROR                   = 1\nCM_ERROR_DIRECTION.0            = 'CM_RECEIVE_ERROR'\nCM_ERROR_DIRECTION.1            = 'CM_SEND_ERROR'\n\nCM_FILL_LL                      = 0    /* fill                        */\nCM_FILL_BUFFER                  = 1\nCM_FILL.0                       = 'CM_FILL_LL'\nCM_FILL.1                       = 'CM_FILL_BUFFER'\n\nCM_PREP_TO_RECEIVE_SYNC_LEVEL   = 0    /* prepare_to_receive_type     */\nCM_PREP_TO_RECEIVE_FLUSH        = 1\nCM_PREP_TO_RECEIVE_CONFIRM      = 2\nCM_PREPARE_TO_RECEIVE_TYPE.0    = 'CM_PREP_TO_RECEIVE_SYNC_LEVEL'\nCM_PREPARE_TO_RECEIVE_TYPE.1    = 'CM_PREP_TO_RECEIVE_FLUSH'\nCM_PREPARE_TO_RECEIVE_TYPE.2    = 'CM_PREP_TO_RECEIVE_CONFIRM'\n\nCM_RECEIVE_AND_WAIT             = 0    /* receive_type                */\nCM_RECEIVE_IMMEDIATE            = 1\nCM_RECEIVE_TYPE.0               = 'CM_RECEIVE_AND_WAIT'\nCM_RECEIVE_TYPE.1               = 'CM_RECEIVE_IMMEDIATE'\n\nCM_REQ_TO_SEND_NOT_RECEIVED     = 0    /* request_to_send_received    */\nCM_REQ_TO_SEND_RECEIVED         = 1\nCM_REQUEST_TO_SEND_RECEIVED.0   = 'CM_REQ_TO_SEND_NOT_RECEIVED'\nCM_REQUEST_TO_SEND_RECEIVED.1   = 'CM_REQ_TO_SEND_RECEIVED'\n\nCM_OK                           = 0    /* return_code                 */\nCM_ALLOCATE_FAILURE_NO_RETRY    = 1\nCM_ALLOCATE_FAILURE_RETRY       = 2\nCM_CONVERSATION_TYPE_MISMATCH   = 3\nCM_PIP_NOT_SPECIFIED_CORRECTLY  = 5\nCM_SECURITY_NOT_VALID           = 6\nCM_SYNC_LVL_NOT_SUPPORTED_LU    = 7\nCM_SYNC_LVL_NOT_SUPPORTED_PGM   = 8\nCM_TPN_NOT_RECOGNIZED           = 9\nCM_TP_NOT_AVAILABLE_NO_RETRY    = 10\nCM_TP_NOT_AVAILABLE_RETRY       = 11\nCM_DEALLOCATED_ABEND            = 17\nCM_DEALLOCATED_NORMAL           = 18\nCM_PARAMETER_ERROR              = 19\nCM_PRODUCT_SPECIFIC_ERROR       = 20\nCM_PROGRAM_ERROR_NO_TRUNC       = 21\nCM_PROGRAM_ERROR_PURGING        = 22\nCM_PROGRAM_ERROR_TRUNC          = 23\nCM_PROGRAM_PARAMETER_CHECK      = 24\nCM_PROGRAM_STATE_CHECK          = 25\nCM_RESOURCE_FAILURE_NO_RETRY    = 26\nCM_RESOURCE_FAILURE_RETRY       = 27\nCM_UNSUCCESSFUL                 = 28\nCM_DEALLOCATED_ABEND_SVC        = 30\nCM_DEALLOCATED_ABEND_TIMER      = 31\nCM_SVC_ERROR_NO_TRUNC           = 32\nCM_SVC_ERROR_PURGING            = 33\nCM_SVC_ERROR_TRUNC              = 34\nCM_TAKE_BACKOUT                 = 100\nCM_DEALLOCATED_ABEND_BO         = 130\nCM_DEALLOCATED_ABEND_SVC_BO     = 131\nCM_DEALLOCATED_ABEND_TIMER_BO   = 132\nCM_RESOURCE_FAIL_NO_RETRY_BO    = 133\nCM_RESOURCE_FAILURE_RETRY_BO    = 134\nCM_DEALLOCATED_NORMAL_BO        = 135\nCM_RETURN_CODE.0                = 'CM_OK'\nCM_RETURN_CODE.1                = 'CM_ALLOCATE_FAILURE_NO_RETRY'\nCM_RETURN_CODE.2                = 'CM_ALLOCATE_FAILURE_RETRY'\nCM_RETURN_CODE.3                = 'CM_CONVERSATION_TYPE_MISMATCH'\nCM_RETURN_CODE.5                = 'CM_PIP_NOT_SPECIFIED_CORRECTLY'\nCM_RETURN_CODE.6                = 'CM_SECURITY_NOT_VALID'\nCM_RETURN_CODE.7                = 'CM_SYNC_LVL_NOT_SUPPORTED_LU'\nCM_RETURN_CODE.8                = 'CM_SYNC_LVL_NOT_SUPPORTED_PGM'\nCM_RETURN_CODE.9                = 'CM_TPN_NOT_RECOGNIZED'\nCM_RETURN_CODE.10               = 'CM_TP_NOT_AVAILABLE_NO_RETRY'\nCM_RETURN_CODE.11               = 'CM_TP_NOT_AVAILABLE_RETRY'\nCM_RETURN_CODE.17               = 'CM_DEALLOCATED_ABEND'\nCM_RETURN_CODE.18               = 'CM_DEALLOCATED_NORMAL'\nCM_RETURN_CODE.19               = 'CM_PARAMETER_ERROR'\nCM_RETURN_CODE.20               = 'CM_PRODUCT_SPECIFIC_ERROR'\nCM_RETURN_CODE.21               = 'CM_PROGRAM_ERROR_NO_TRUNC'\nCM_RETURN_CODE.22               = 'CM_PROGRAM_ERROR_PURGING'\nCM_RETURN_CODE.23               = 'CM_PROGRAM_ERROR_TRUNC'\nCM_RETURN_CODE.24               = 'CM_PROGRAM_PARAMETER_CHECK'\nCM_RETURN_CODE.25               = 'CM_PROGRAM_STATE_CHECK'\nCM_RETURN_CODE.26               = 'CM_RESOURCE_FAILURE_NO_RETRY'\nCM_RETURN_CODE.27               = 'CM_RESOURCE_FAILURE_RETRY'\nCM_RETURN_CODE.28               = 'CM_UNSUCCESSFUL'\nCM_RETURN_CODE.30               = 'CM_DEALLOCATED_ABEND_SVC'\nCM_RETURN_CODE.31               = 'CM_DEALLOCATED_ABEND_TIMER'\nCM_RETURN_CODE.32               = 'CM_SVC_ERROR_NO_TRUNC'\nCM_RETURN_CODE.33               = 'CM_SVC_ERROR_PURGING'\nCM_RETURN_CODE.34               = 'CM_SVC_ERROR_TRUNC'\nCM_RETURN_CODE.100              = 'CM_TAKE_BACKOUT'\nCM_RETURN_CODE.130              = 'CM_DEALLOCATED_ABEND_BO'\nCM_RETURN_CODE.131              = 'CM_DEALLOCATED_ABEND_SVC_BO'\nCM_RETURN_CODE.132              = 'CM_DEALLOCATED_ABEND_TIMER_BO'\nCM_RETURN_CODE.133              = 'CM_RESOURCE_FAIL_NO_RETRY_BO'\nCM_RETURN_CODE.134              = 'CM_RESOURCE_FAILURE_RETRY_BO'\nCM_RETURN_CODE.135              = 'CM_DEALLOCATED_NORMAL_BO'\n\nCM_WHEN_SESSION_ALLOCATED       = 0    /* return_control              */\nCM_IMMEDIATE                    = 1\nCM_RETURN_CONTROL.0             = 'CM_WHEN_SESSION_ALLOCATED'\nCM_RETURN_CONTROL.1             = 'CM_IMMEDIATE'\n\nCM_BUFFER_DATA                  = 0    /* send_type                   */\nCM_SEND_AND_FLUSH               = 1\nCM_SEND_AND_CONFIRM             = 2\nCM_SEND_AND_PREP_TO_RECEIVE     = 3\nCM_SEND_AND_DEALLOCATE          = 4\nCM_SEND_TYPE.0                  = 'CM_BUFFER_DATA'\nCM_SEND_TYPE.1                  = 'CM_SEND_AND_FLUSH'\nCM_SEND_TYPE.2                  = 'CM_SEND_AND_CONFIRM'\nCM_SEND_TYPE.3                  = 'CM_SEND_AND_PREP_TO_RECEIVE'\nCM_SEND_TYPE.4                  = 'CM_SEND_AND_DEALLOCATE'\n\nCM_NO_STATUS_RECEIVED           = 0    /* status_received             */\nCM_SEND_RECEIVED                = 1\nCM_CONFIRM_RECEIVED             = 2\nCM_CONFIRM_SEND_RECEIVED        = 3\nCM_CONFIRM_DEALLOC_RECEIVED     = 4\nCM_TAKE_COMMIT                  = 5\nCM_TAKE_COMMIT_SEND             = 6\nCM_TAKE_COMMIT_DEALLOCATE       = 7\nCM_STATUS_RECEIVED.0            = 'CM_NO_STATUS_RECEIVED'\nCM_STATUS_RECEIVED.1            = 'CM_SEND_RECEIVED'\nCM_STATUS_RECEIVED.2            = 'CM_CONFIRM_RECEIVED'\nCM_STATUS_RECEIVED.3            = 'CM_CONFIRM_SEND_RECEIVED'\nCM_STATUS_RECEIVED.4            = 'CM_CONFIRM_DEALLOC_RECEIVED'\nCM_STATUS_RECEIVED.5            = 'CM_TAKE_COMMIT'\nCM_STATUS_RECEIVED.6            = 'CM_TAKE_COMMIT_SEND'\nCM_STATUS_RECEIVED.7            = 'CM_TAKE_COMMIT_DEALLOCATE'\n\nCM_NONE                         = 0    /* sync_level                  */\nCM_CONFIRM                      = 1\nCM_SYNC_POINT                   = 2\nCM_SYNC_LEVEL.0                 = 'CM_NONE'\nCM_SYNC_LEVEL.1                 = 'CM_CONFIRM'\nCM_SYNC_LEVEL.2                 = 'CM_SYNC_POINT'\n\n/******************** END OF SAA VARIABLE NAMES ***********************/\n\n\nreturn\n./ ADD NAME=TXIB\n         MACRO ,\n         TXIB ,\nTXIB     DSECT ,\nTXIBID   DS    C'TXIB'\nTXIBLEN  DS    AL4(TXIBL)\n         IHAASEO DSECT=NO\n         IXCMSGI MF=(L,IXCMSGI,0D)\n         SCHEDIRB MF=(L,SCHEDIRB,0D)\nTXIRBP   DS    A                       PARMLIST FOR SCHEDIRB\nTXSCIB   DS    A\nTXTXIB   DS    A\n         DS    0D\nTXMEPL   DS    XL(MEPLLEN)\nTXFMH5   DS    0C\nTXIBL    EQU   *-TXIB\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "MPFNTFY": {"ttr": 2565, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x994\\x8f\\x00\\x994\\x8f\\x12\\x00\\x00\\xcd\\x00\\xcd\\x00\\x00\\xd1\\xd1\\xc1\\xc5\\xc7\\xc5\\xd9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-12-14T00:00:00", "modifydate": "1999-12-14T12:00:00", "lines": 205, "newlines": 205, "modlines": 0, "user": "JJAEGER"}, "text": "./ ADD NAME=MPF$NTFY    01 01 93200 93227 120839 0174 0169 0001 T2JJ\n//IBMUSERA JOB ACCT,'JAN JAEGER',NOTIFY=IBMUSER,COND=(0,NE)             NONUMBER\n//ASMA90   EXEC PGM=ASMA90,PARM='DECK,NOOBJ,XREF(SHORT)'                NONUMBER\n//SYSPRINT DD  SYSOUT=*                                                 NONUMBER\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR                                 NONUMBER\n//         DD  DSN=SYS1.MODGEN.DISP=SHR                                 NONUMBER\n//         DD  DSN=SYS1.HASPSRC,DISP=SHR                                NONUMBER\n//SYSUT1   DD  UNIT=SYSALLDA,SPACE=(CYL,10)                             NONUMBER\n//SYSPUNCH DD  DSN=&&PUNCH,DISP=(NEW,PASS),UNIT=SYSALLDA,SPACE=(CYL,10) NONUMBER\n TITLE 'MPF EXIT TO NOTIFY USER OF MESSAGES ISSUED BY BATCH JOB'\n***********************************************************************\n*                                                                     *\n* JUSTIFICATION:                                                      *\n*   USERS NEED TO BE NOTIFIED OF CERTAIN MESSAGES WHILE BATCH JOB IS  *\n*   STILL RUNNING (SUCH AS IEF099I JOB XXXXXXX WAITING FOR DATASETS). *\n*   THIS MPF EXIT WILL SEND THE CONTENTS OF THE MESSAGE THRU THE JES  *\n*   NOTIFY FUNCTION TO THE USER IF A NOTIFY WAS SPECIFIED ON THE      *\n*   JOBCARD.                                                          *\n*                                                                     *\n* FUNCTION:                                                           *\n*   THIS MPF EXIT WILL CHECK THE PRESENCE OF A NOTIFY USERID/NODE     *\n*   ON THE BATCH JOB ISSUEING THE MESSAGE.  IF A NOTIFY USERID EXISTS *\n*   THEN THIS EXIT WILL USE THE JES NOTIFY USER FUNCTION TO SEND THE  *\n*   MESSAGE ISSUED TO THE USER ON THE SPECIFIED NODE.                 *\n*                                                                     *\n* LOGIC:                                                              *\n*   OBTAIN A WORKAREA IN SP230                                        *\n*   FIND JES2 CONTROL BLOCKS THRU THE LIFE-OF-JOB SSIB                *\n*   DO ACRONYM AND VERSION CHECK ON THE JES2 SJB                      *\n*   CHECK FOR NOTIFY USERID IN THE JES JCT                            *\n*   INITIALIZE SSOB AND SSNU                                          *\n*   COPY MESSAGE ADDRESS AND LENGTH FROM CTXT TO SSNU                 *\n*   CALL IEFJSREQ                                                     *\n*   IF MESSAGE WAS SEND SUCCESSFULL THEN REQUEST MINOR LINES          *\n*   RELEASE WORKAREA                                                  *\n*   RETURN TO CALLER                                                  *\n*                                                                     *\n* REGISTER USAGE:                                                     *\n*   R0    WORK                                                        *\n*   R1    ENTRY PARAMETER + WORK                                      *\n*   R2    TCB                                                         *\n*   R3    JSCB                                                        *\n*   R4    SSIB                                                        *\n*   R5    SJB                                                         *\n*   R6    JCT                                                         *\n*   R7-R9 NOT USED                                                    *\n*   R10   CTXTATTR                                                    *\n*   R11   CTXT                                                        *\n*   R12   PROGRAM BASE                                                *\n*   R13   WORKAREA INCLUDING STANDARD OS SAVEAREA                     *\n*   R14   RETURN ADDR + WORK                                          *\n*   R15   ENTRY POINT ADDRESS + WORK                                  *\n*                                                                     *\n* ATTRIBUTES:                                                         *\n*   AMODE(31),RMODE(ANY),REFR,AC(0),OL                                *\n*   THE OL (ONLY LOADABLE) ATTRIBUTE IS NOT REQUIRED BUT RECOMMENDED  *\n*   BECAUSE MPF EXITS ARE LOAD-ED INTO CSA AND SUBSEQUENTLY BRANCHED  *\n*   TO.  THEY ARE NEVER LINK-ED ATTACH-ED OR XCTL-ED TO.              *\n*                                                                     *\n* HISTORY:                                                            *\n*   DATE       BY              COMMENTS                               *\n*   28/02/93   JAN JAEGER      INITIAL VERSION                        *\n*                                                                     *\n***********************************************************************\nMPF$NTFY RSECT ,\nMPF$NTFY AMODE 31\nMPF$NTFY RMODE ANY\n         B     SKIPHDR-*(,R15)\n         DC    AL1(L'EYECATCH)\nEYECATCH DC    C'MPF$NTFY-J.JAEGER-&SYSDATE.-&SYSTIME.'\nSKIPHDR  DS    0H\n         BAKR  R14,0                   STACK REGISTERS\n         LR    R12,R15                 SET BASE REGISTER\n         USING MPF$NTFY,R12\n*\n         L     R11,0(,R1)              POINT TO PARAMETER LIST\n         USING CTXT,R11\n*\n         STORAGE OBTAIN,               OBTAIN WORKAREA                 X\n               LENGTH=WORKLEN,                                         X\n               SP=230\n*\n         MVC   4(4,R1),=CL4'F1SA'      INDICATE LINKAGE STACK USED\n         LR    R13,R1\n         USING WORKAREA,R13\n         USING SSOB,WORKSSOB           THIS IS A NICE FEATURE OF HLASM\n         USING PSA,R0                  THIS ALWAYS WORKS\n*\n         ICM   R2,B'1111',PSATOLD\n         BZ    ERREXIT                 NOT IN TCB MODE\n         USING TCB,R2\n         SLR   R3,R3                   TCBJSCBB IS A 24 BIT ADDRESS\n         ICM   R3,B'0111',TCBJSCBB     JSCB ADDRESS\n         BZ    ERREXIT                 NO JSCB FOUND\n         USING IEZJSCB,R3\n         ICM   R3,B'1111',JSCBACT      POINT TO ACTIVE JSCB\n         BZ    ERREXIT                 NO ACTIVE JSCB FOUND\n         ICM   R4,B'1111',JSCBSSIB     SSIB ADDRESS\n         BZ    ERREXIT                 NO LIFE-OF-JOB SSIB\n         USING SSIB,R4\n         ICM   R5,B'1111',SSIBSUSE     SJB ADDR\n         BZ    ERREXIT                 NO SJB FOUND\n*\n         USING SJB,R5\n         CLC   SJBID,=CL4'SJB'         CHECK ID OF SJB\n         BNE   ERREXIT\n         CLI   SJBVRSN,SJBCURVN        CHECK VERSION LEVEL\n         BNE   ERREXIT\n         ICM   R6,B'1111',SJBJCT       GET JCT ADDRESS\n         BZ    ERREXIT                 NO JCT PRESENT\n         USING JCT,R6\n*\n         TM    JCTNOTUS,X'BF'          CHECK PRESENCE OF NOTIFY USERID\n         BZ    EXIT                    NO NOTIFY USERID\n*\n         LA    R1,SSOB                 INITIALIZE SSOB POINTER\n         ST    R1,SSOBPTR\n         OI    SSOBPTR,X'80'           SET HIGH ORDER BIT ON\n         XC    WORKSSOB,WORKSSOB       CLEAR IEFSSREQ PARAMETER LIST\n*\n         MVC   SSOBID,=CL4'SSOB'       INITIALIZE HEADER\n         MVC   SSOBLEN,=AL2(SSOBHSIZ)\n         MVC   SSOBFUNC,=AL2(SSOBSSNU) NOTIFY USER FUNCTION\n         LA    R1,SSNUBGN              POINT TO SSNU SECTION\n         ST    R1,SSOBINDV             STORE IN SSOB\n         MVC   SSNUID,=CL4'SSNU'       INITIALIZE HEADER\n         MVC   SSNULEN,=AL2(SSNUSIZE)\n         MVI   SSNUVER,SSNUCVER\n         TM    JCTNNODE,X'BF'          CHECK PRESENCE OF NOTIFY NODE\n         BZ    NOJCTNOD                NO NODE PRESENT\n         MVC   SSNUNODE,JCTNNODE       NOTIFICATION NODE\nNOJCTNOD DS    0H\n         MVC   SSNUUSER,JCTNOTUS       NOTIFICATION USER\n*\n         ICM   R10,B'1111',CTXTTXPN    ADDRESS IF MINOR LINES\n         BNZ   ISMINOR\n         ICM   R10,B'1111',CTXTTXPJ    ADDRESS OF MAJOR LINES\n         BZ    ERREXIT                 NO MESSAGE AT ALL\nISMINOR  DS    0H\n         USING CTXTATTR,R10\n         ICM   R9,B'0011',CTXTTLEN     PICK UP LENGTH OF MESSAGE\n         BZ    ERREXIT                 NULL MESSAGE\n         LA    R8,CTXTTMSG             ADDRESS OF MESSAGE\n         STH   R9,SSNUMLEN             MESSAGE LENGTH\n         ST    R8,SSNUMSG              MESSAGE ADDRESS\n*\n         LA    R1,SSOBPTR\n         IEFSSREQ ,                    CALL IEFJSREQ FOR NU FUNCTION\n         LTR   R15,R15\n         BNZ   ERREXIT                 SUBSYSTEM INTERFACE ERROR\n         CLC   SSOBRETN,=AL4(SSNUOKB)  RETURNCODE WORSE THEN WARNING\n         BH    ERREXIT                 SUBSYSTEM FUNCTION ERROR\n         CLC   SSNUERCD,=AL2(SSNUMSGT) TRUNCATED IS STILL ACCEPTABLE\n         BH    ERREXIT                 NOTIFY USER ERROR\n*\n         OI    CTXTRFB1,CTXTRPML       REQUEST MINOR LINES FOR MLWTO\n*\nERREXIT  DS    0H                      ON ERROR SIMPLY EXIT\nEXIT     DS    0H\n         LR    R1,R13\n         STORAGE RELEASE,              RELEASE WORKAREA                X\n               LENGTH=WORKLEN,                                         X\n               SP=230,                                                 X\n               ADDR=(1)\n*\n         PR    ,                       RETURN TO CALLER\n*\n         LTORG ,                       PUT LITERALS AT END OF CSECT\n*\nWORKAREA DSECT ,\nSAVEAREA DS    18F                     SAVEAREA MUST BE FIRST\nSSOBPTR  DS    A                       POINTER TO SSOB FOR IEFSSREQ\nWORKSSOB DS    XL(SSNULEN8)            SSOB + SSNU\nWORKLEN  EQU   *-WORKAREA\n*\n         PUSH  PRINT\n         PRINT NOGEN\n         IEZVX100 ,                    MPF EXIT PARAMETER LIST\n         CVT   DSECT=YES               REQUIRED BY IEFSSREQ\n         IEFJESCT ,                    REQUIRED BY IEFSSREQ\n         IHAPSA ,                      POINTS TO TCB\n         IKJTCB ,                      POINTS TO JSCB\n         IEZJSCB ,                     POINTS TO SSIB\n         IEFJSSIB ,                    POINTS TO SJB\n         IEFSSOBH ,                    SSOB HEADER FOR IEFSSREQ\nSSOBGN   EQU   *                       NU IS NOT SUPPORTED BY IEFJSSOB\n         IAZSSNU ,                     NOTIFY USER SSOB EXTENSION\n         $SJB  ,                       POINTS TO JCT\n         $JCT  ,                       CONTAINS NOTIFY INFO FROM JES2\n         $HASPEQU ,                    REQUIRED BY $SJB\n         $BUFFER ,                     REQUIRED BY $JCT\n         $TQE  ,                       REQUIRED BY $JCT\n         IFGRPL ,                      REQUIRED BY $BUFFER\n         POP   PRINT\n*\n         END   MPF$NTFY,(JAN JAEGER,0101,95059)\n//IEWL     EXEC PGM=IEWL,                                               NONUMBER\n//          PARM='XREF,AMODE=31,RMODE=ANY,REFR,OL'                      NONUMBER\n//SYSPRINT DD  SYSOUT=*                                                 NONUMBER\n//SYSUT1   DD  UNIT=SYSALLDA,SPACE=(CYL,10)                             NONUMBER\n//SYSLMOD  DD  DSN=SYS1.LINKLIB,DISP=SHR                                NONUMBER\n//SYSLIN   DD  DSN=&&PUNCH,DISP=(OLD,DELETE)                            NONUMBER\n//         DD  *                                                        NONUMBER\n NAME MPF$NTFY(R)                                                       NONUMBER\n// EXEC PGM=IEFBR14                                                     NONUMBER\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MPFNTFY$": {"ttr": 2569, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x994\\x8f\\x00\\x994\\x8f\\x12\\x00\\x00 \\x00 \\x00\\x00\\xd1\\xd1\\xc1\\xc5\\xc7\\xc5\\xd9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-12-14T00:00:00", "modifydate": "1999-12-14T12:00:00", "lines": 32, "newlines": 32, "modlines": 0, "user": "JJAEGER"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "NODSI": {"ttr": 2571, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x994\\x8f\\x00\\x994\\x8f\\x12\\x00\\x01\\x9c\\x01\\x9c\\x00\\x00\\xd1\\xd1\\xc1\\xc5\\xc7\\xc5\\xd9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-12-14T00:00:00", "modifydate": "1999-12-14T12:00:00", "lines": 412, "newlines": 412, "modlines": 0, "user": "JJAEGER"}, "text": "./ ADD NAME=NODSI       01 01 94328 94336 211554 0149 0144 0001 IBMUSER\n//IBMUSERA JOB ,'JAN JAEGER',MSGCLASS=H,\n//          NOTIFY=IBMUSER\n//ASMA90   EXEC PGM=ASMA90,PARM=(DECK,NOOBJECT)\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.MODGEN,DISP=SHR\n//SYSUT1   DD  SPACE=(CYL,1),UNIT=SYSALLDA\n//SYSPUNCH DD  DSN=&&PUNCH,DISP=(NEW,PASS),\n//          SPACE=(TRK,1),UNIT=SYSALLDA\n TITLE 'BYPASS ENQ PROCESSING FOR DATASETS'\n***********************************************************************\n*                                                                     *\n* JUSTIFICATION:                                                      *\n*   MVS DOES NOT SUPPLY A FUNCTION TO DELETE/RENAME/ALTER DATASETS    *\n*   THAT HAVE ENQ'S AGAINST DUPLICATES.                               *\n*   THIS PROGRAM WILL SUPPLY THAT FUNCTION.                           *\n*                                                                     *\n* FUNCTION:                                                           *\n*   THIS PROGRAM WILL PASS CONTROL TO THE PROGRAM NAMED ON THE PARM   *\n*   STATEMENT, AND INTERCEPT ALL SYSDSN ENQ'S ISSUED BY THAT PROGRAM  *\n*   SO THAT RNAMES ENQUEUED UPON CAN BE PROCESSED AS IF THEY HAD NO   *\n*   ACTIVE ENQ AGAINST THEM.                                          *\n*   ALL ENQUEUES WITH SCOPE=SYSTEM OR SCOPE=SYSTEMS WILL BE CONVERTED *\n*   TO SCOPE=STEP.  THIS SO THAT PROGRAMS ISSUEING THOSE ENQUEUES     *\n*   CAN STILL RELY ON VALID RETURNCODES FROM GRS FOR THE ENQUEUES     *\n*   AND DEQUEUES DONE.                                                *\n*                                                                     *\n* EXAMPLE:                                                            *\n*   //T2JJA    JOB ,'JAN JAEGER'                                      *\n*   //NODSI    EXEC PGM=NODSI,PARM='IEHPROGM,LINECNT=66'              *\n*   //VOLDD    DD  UNIT=3380,VOL=SER=STOR01,DISP=OLD                  *\n*   //SYSPRINT DD  SYSOUT=*                                           *\n*   //SYSIN    DD  *                                                  *\n*    SCRATCH DSNAME=T2JJ.ZZ,VOL=3380=STOR01                           *\n*   /*                                                                *\n*                                                                     *\n* LOGIC:                                                              *\n*   OBTAIN WORKAREA IN KEY7                                           *\n*   EXTRACT PROGRAM NAME FROM PARM= STATEMENT, AND BUILD NEW          *\n*    PARAMETER AREA                                                   *\n*   ISSUE RACROUTE TO VERIFY USER ACCESS TO THIS FACILITY             *\n*   ATTACH PROGRAM WITH RSAPF=YES AND DISP=NO                         *\n*   BUILD SVC SCREENING TABLE FOR ENQ/DEQ/RESERVE SVC'S               *\n*   SET NEWLY ATTACHED TCB DISPATCHABLE                               *\n*   WAIT FOR TCB TO TERMINATE                                         *\n*   SAVE RETURNCODE                                                   *\n*   RELEASE WORKAREA AND EXIT WITH RC FROM ATTACHED PROGRAM           *\n*                                                                     *\n* SVC INTERCEPT ROUTINE:                                              *\n*   ENTER AMODE AND PSW KEY FROM CALLER                               *\n*   CHANGE SVC PARAMTER LIST SO THAT ENQUEUES FOR SYSDSN ARE          *\n*   CONVERTED TO SCOPE=STEP                                           *\n*   RESET PSW KEY TO ZERO                                             *\n*   BRANCH-ENTER ORIGINAL SVC EPA.                                    *\n*                                                                     *\n* RACF OR ACF2:                                                       *\n*   ACCESS(READ) IS REQUIRED TO ENTITY(NODSI) IN CLASS(FACILITY) TO   *\n*   USE THIS FACILITY.  ACCESS WILL BE DENIED IF NO PROFILE EXISTS.   *\n*                                                                     *\n* REGISTER USAGE (MAIN PROGRAM):                                      *\n*   R0-R5 WORK                                                        *\n*   R6    PROGRAM BASE                                                *\n*   R7    ATTACHED PROGRAM PARM AREA                                  *\n*   R8    ATTACHED PROGRAM TCB ADDRESS                                *\n*   R9    JSCB ADDRESS                                                *\n*   R10   APF INDICATOR FROM JSCBOPTS(JSCBPASS)                       *\n*   R11   PSW KEY OF CALLER                                           *\n*   R12   PROGRAM BASE                                                *\n*   R13   KEY7 WORKAREA INCLUDING STANDARD OS SAVEAREA                *\n*   R14   RETURN ADDR                                                 *\n*   R15   ENTRY POINT ADDRESS + RETURN CODE                           *\n* REGISTER USAGE (INTERCEPT ROUTINE):                                 *\n*   R6    PROGRAM BASE                                                *\n*   R2,R11,R12 WORK                                                   *\n*   OTHERS AS DEFINED BY SVC LINKAGE CONVENTIONS                      *\n*                                                                     *\n* ATTRIBUTES:                                                         *\n*   AMODE(31),RMODE(24),REFR,AC(1)                                    *\n*                                                                     *\n* HISTORY:                                                            *\n*   DATE       BY              COMMENTS                               *\n*   30/11/94   JAN JAEGER      INITIAL VERSION                        *\n*                                                                     *\n***********************************************************************\nJJ$NODSI RSECT ,\nJJ$NODSI AMODE 31\nJJ$NODSI RMODE 24\n         B     SKIPHDR-*(,R15)         BRANCH AROUND EYE CATCHER\n         DC    AL1(L'EYECATCH)\nEYECATCH DC    C'JJ$NODSI-J.JAEGER-&SYSDATE.-&SYSTIME.'\nSKIPHDR  DS    0H\n         BAKR  R14,0                   STACK REGISTERS AND SET RETADDR\n         BASR  R6,0                    SET BASE REGISTER\n         LA    R2,*-JJ$NODSI\n         SLR   R6,R2\n         USING JJ$NODSI,R6\n*\n         L     R3,0(,R1)               PARAMETER POINTER\n         LA    R3,0(,R3)               ZERO BIT 31\n*\n         MODESET MODE=SUP\n         IPK   ,\n         LR    R11,R2                  SAVE PSWKEY\n         SPKA  X'70'\n*\n         STORAGE OBTAIN,               OBTAIN WORKAREA                 X\n               LENGTH=WORKLEN,                                         X\n               CALLRKY=YES,                                            X\n               LOC=BELOW,                                              X\n               SP=129\n         MVC   4(4,R1),=CL4'F1SA'      INDICATE LINKAGE STACK USED\n         LR    R13,R1\n         USING WORKAREA,R13\n*\n         EJECT ,\n*\n         SPKA  0(R11)\n         LH    R4,0(,R3)               PARAMETER LENGTH\n         LTR   R4,R4                   NO LENGTH\n         BZ    PRMERR\n         BCTR  R4,0                    REDUCE TO MACHINE LENGTH\n         CH    R4,=H'8'                IF MORE THEN 9\n         BNH   NOPRMLIM\n         LH    R4,=H'8'                THEN LIMIT TO 9\nNOPRMLIM DS    0H\n         SLR   R2,R2                   TR BYTE FOUND INDICATOR\n         EX    R4,FINDDLM              FIND A DELIMITER\n         BC    B'0110',DLMFOUND        FOUND A DELIMITER\n         CH    R4,=H'8'                DO WE HAVE MORE THEN 8\n         BNE   DLM8                    YES FALL THROUGH\n         B     PRMERR\nDLMFOUND DS    0H\n         SLR   R1,R3                   SUBTRACT START ADDRESS OF PARM\n         SH    R1,=H'2'                SUBTRACT LENGTH HW\n         LTR   R4,R1\n         BZ    PRMERR                  ZERO LENGTH THEN ERROR\n         BCTR  R4,0                    SET MACHINE LENGHT\nDLM8     DS    0H\n         SPKA  X'70'\n         XC    EPNAME,EPNAME\n         LR    R0,R4                   COPY LENGHT TO R0\n         LR    R1,R11                  COPY SOURCE KEY TO R1\n         MVCSK EPNAME,2(R3)            COPY EPNAME\n         OC    EPNAME,=CL8' '          FORCE UPPERCASE AND BLANKS\n         SPKA  0(R11)\n         LH    R5,0(,R3)               RELOAD PARM LENGTH\n         BCTR  R5,0                    SET MACHINE LENGTH\n         LTR   R2,R2                   CHECK FOR DELIMITER\n         BZ    NODLM\n         BCTR  R5,0                    SUBTRACT DELIMITER\nNODLM    DS    0H\n         SLR   R5,R4                   SUBTRACT EPNAME LENGTH\n         LA    R2,4(R4,R3)             POINT IN ORIGINAL PARM\n*\n         LA    R10,USERPLEN(,R5)       TOTAL LENGTH OF USERPARM\n         STORAGE OBTAIN,               GET STORAGE FOR PARM AREA       X\n               LENGTH=(10),                                            X\n               CALLRKY=YES,                                            X\n               LOC=BELOW,                                              X\n               SP=130\n         LR    R7,R1\n         USING USERPARM,R7\n         LA    R1,PARMLEN\n         ST    R1,PARMADDR             STORE PARM ADDRESS\n         OI    PARMADDR,X'80'          FORCE END-OF-LIST INDICATOR ON\n         STH   R5,PARMLEN              STORE PARM LENGTH\n         LTR   R5,R5                   IS A PARM SPECIFIED\n         BZ    NOUPARM                 NO THEN DO NOT COPY\n         BCTR  R5,0\n         EX    R5,MVCPRM               COPY INTO NEW PARM AREA\nNOUPARM  DS    0H\n*\n         EJECT ,\n*\n         SPKA  X'70'\n         MVC   RACROUTE,MFLROUTE       INITIALIZE PARMLIST\n         RACROUTE REQUEST=AUTH,        REQUEST ACCESS                  X\n               RELEASE=1.9,            MINIMUM LVL TO SUPPORT ENTITYX  X\n               WORKA=SAFWK,                                            X\n               MF=(E,RACROUTE)\n         LTR   R8,R15                  CHECK ACCESS\n         BNZ   AUTHERR\n*\n         EJECT ,\n*\n         L     R9,PSATOLD-PSA(,0)      REMOVE APF AUTHORISATION\n         ICM   R9,B'0111',TCBJSCBB-TCB(R9)\n         USING IEZJSCB,R9\n         SPKA  X'00'\n         NI    JSCBOPTS,255-JSCBAUTH\n         SPKA  X'70'\n*\n         EJECT ,\n*\n         LR    R1,R7                   SET PARM REGISTER FOR ATTACH\n         XC    STECB,STECB\n         MVC   LATT,LATTI\n         ATTACH ECB=STECB,             ATTACH USER PGM                 X\n               EPLOC=EPNAME,                                           X\n               SF=(E,LATT)\n         LTR   R8,R15\n         BNZ   ATTERR\n         ST    R1,STTCB                STORE TCB ADDRESS\n         LR    R8,R1\n         USING TCB,R8\n*\n         SPKA  X'00'\n         STORAGE OBTAIN,               OBTAIN STORAGE FOR SCREENING    X\n               LENGTH=SVCSCRNL,        TABLE                           X\n               SP=254\n         LR    R2,R1\n         USING SVCSCRN,R2\n         MVC   SVCSCHDR,SVCSTHDR       COPY SVC SCREENING HEADER\n         MVC   SVCSCTBL,SVCSTTBL       COPY SVC SCREENING TABLE\n         ST    R2,TCBSVCA2             STORE SCREENING TABLE IN TCB\n         DROP  R2\n         OI    TCBFLGS7,TCBSVCS+TCBSVCSP   SET SCREENING ACTIVE\n*\n         ATTACH DISP=RESET,            KICK OFF USER PGM               X\n               TCB=(8)\n         WAIT  ECB=STECB               WAIT FOR SUBTASK TO COMPLETE\n*\n         NI    TCBFLGS7,255-(TCBSVCS+TCBSVCSP)   SET SCREENING INACTIVE\n         XC    TCBSVCA2,TCBSVCA2       REMOVE SCREENING TABLE ADDRESS\n         STORAGE RELEASE,              RELEASE STORAGE FOR SCREENING   X\n               LENGTH=SVCSCRNL,        TABLE                           X\n               ADDR=(2),                                               X\n               SP=254\n         SPKA  X'70'\n         DROP  R8\n*\n         DETACH STTCB                  REMOVE SUBTASK\n*\n         EJECT ,\n*\n         SPKA  X'00'\n         NI    JSCBOPTS,255-JSCBAUTH   REMOVE APF AUTHORISATION\n         DROP  R9\n*\n         SPKA  0(R11)\n         STORAGE RELEASE,              RELEASE PARM DATA AREA          X\n               LENGTH=(10),                                            X\n               ADDR=(7),                                               X\n               CALLRKY=YES,                                            X\n               SP=130\n         SPKA  X'70'\n*\n         SLR   R8,R8                   SAVE RETURNCODE\n         ICM   R8,B'0111',STECB+1\n*\n         LR    R1,R13\n         STORAGE RELEASE,              WORKAREA                        X\n               LENGTH=WORKLEN,                                         X\n               ADDR=(1),                                               X\n               CALLRKY=YES,                                            X\n               SP=129\n*\n         MODESET MODE=PROB,            BACK TO PROBLEMSTATE USERKEY    X\n               KEY=NZERO\n*\n         LR    R15,R8                  RESTORE RETURNCODE\n         PR    ,                       RETURN TO CALLER\n*\n         EJECT ,\n*\nSVCROUTR DS    0D                      SVC SCREENING INTERCEPT ADDRESS\n         BASR  R6,0                    ESTABLISH PROGRAM BASE\n         LA    R2,*-JJ$NODSI\n         SLR   R6,R2\n*\n         L     R2,RBLINK-RBBASIC(,R5)  GO UP ONE RB LEVEL (TYPE 2-4)\n*\n         IC    R11,RBOPSWB2-RBBASIC(,R2)\n         SPKA  0(R11)                  SET PSWKEY OF CALLER\n         TM    RBOPSWA-RBBASIC(R2),RBOPSWM\n         BO    STAY31\n         LA    R12,MODE24              ENTER AMODE OF CALLER\n         BSM   0,R12\nMODE24   DS    0H\nSTAY31   DS    0H\n         LR    R12,R1\nCHECKARG DS    0H\n         LR    R11,R12\n         TM    2(R12),B'01000000'      IS THIS SCOPE=SYSTEM(S)\n         BZ    NOEQDQ\n         L     R10,4(,R12)\n         CLC   =CL8'SYSDSN',0(R10)     IS THIS QNAME=SYSDSN\n         BNE   NOSDQN\n         NI    2(R12),B'10110111'      CHANGE TO SCOPE=STEP\nNOEQDQ   DS    0H\n         TM    2(R12),B'00001000'      WAS THIS A RESERVE\n         BZ    NOSDQN\n         LA    R12,4(,R12)             SKIP UCB= PARM\nNOSDQN   DS    0H\n         LA    R12,12(,R12)            ADVANCE TO NEXT ENTRY\n         TM    0(R11),B'10000000'      WAS THIS LAST IN LIST\n         BZ    CHECKARG                GO PROCESS NEXT ENTRY IN LIST\n         L     R12,=A(MODE31+X'80000000')\n         BSM   0,R12                   BACK TO AMODE 31\nMODE31   DS    0H\n         SPKA  X'00'                     AND KEY ZERO\n*\n         SL    R2,=AL4(RBBASIC-RBPREFIX) BACKUP TO RB PREFIX\n         LH    R2,RBINTCOD-RBPREFIX(,R2) LOAD INTERRUPTION CODE\n         SLL   R2,3                      MULTIPLY BY 8\n         L     R6,CVTABEND-CVT(,R3)      FIND THE SVC TABLE\n         L     R6,SCVTSVCT-SCVTSECT(,R6)\n         L     R6,SVCEP-SVCENTRY(R2,R6)  USE INTCOD AS INDEX IN TABLE\n         BSM   0,R6                    BRANCH TO ORIGINAL SVC ROUTINE\n*\n         EJECT ,\n*\nFINDDLM  TRT   2(0,R3),DLMTBL          TR TABLE TO FIND DELIMITER\nMVCPRM   MVC   PARMSTR(0),0(R2)        COPY PARAMETER STRING\n*\nPRMERR   DS    0H                      PARAMETER ERROR\n         WTO   MF=(E,PRMERRM)\n         ABEND 999,,STEP\n*\nAUTHERR  DS    0H                      AUTHORISATION ERROR\n         WTO   MF=(E,AUTHERRM)\n         ABEND 999,REASON=(8),,STEP    RACROUTE RC IS REASON CODE\n*\nATTERR   DS    0H                      ATTACH ERROR\n         WTO   MF=(E,ATTERRM)\n         ABEND 999,REASON=(8),,STEP    ATTACH RC IS REASON CODE\n*\nMFLROUTE RACROUTE REQUEST=AUTH,        REQUEST ACCESS                  X\n               RELEASE=1.9,            MINIMUM LVL TO SUPPORT ENTITYX  X\n               CLASS='FACILITY',       RESOURCE CLASS                  X\n               ENTITYX=ENTITYX,        PROFILE NAME                    X\n               ATTR=READ,              ACCESS(READ)                    X\n               RACFIND=YES,            FORCE ICH MSG IF NO PROFILE     X\n               MF=L\nMFLROUTL EQU   *-MFLROUTE\n*\nENTITYX  DC    2AL2(L'PROFNAME)\nPROFNAME DC    C'NODSI'                PROFILE NAME\n*\nLATTI    ATTACH EPLOC=,                                                X\n               ECB=,                                                   X\n               JSTCB=YES,              IF THIS PROGRAM IS TO BE CALLED X\n               RSAPF=YES,              FROM IKJEFT01, THEN JSTCB=NO    X\n               DISP=NO,                MUST BE CODED                   X\n               SF=L\nLATTL    EQU   *-LATTI\n*\nPRMERRM  WTO   'JJ$001E PARAMETER ERROR',MCSFLAG=HRDCPY,MF=L\nAUTHERRM WTO   'JJ$002E AUTHORISATION FAILURE',MCSFLAG=HRDCPY,MF=L\nATTERRM  WTO   'JJ$003E ATTACH FAILED',MCSFLAG=HRDCPY,MF=L\n*\n         EJECT ,\n*\nSVCSTHDR DC    0D'0',AL4(SVCROUTR+X'80000000'),AL1(SVCTP34,0,0,0)\nSVCSTTBL DC    256X'80'\n         ORG   SVCSTTBL+48             ENQ/RESERVE\n         DC    X'00'\n         ORG   SVCSTTBL+56             DEQ\n         DC    X'00'\n         ORG   ,\n*\nDLMTBL   DC    XL256'00'               DELIMITER TABLE\n         ORG   DLMTBL+C' '             ONLY\n         DC    C' '                      SPACE\n         ORG   DLMTBL+C','                 AND\n         DC    C','                          COMMA\n         ORG   ,                               ARE VALID DELIMITERS\n*\n         LTORG ,\n*\n         EJECT ,\n*\nWORKAREA DSECT ,                       KEY 7 WORKAREA\nSAVEAREA DS    18F\nSTECB    DS    1F                      ECB ADDRESS FOR ATTACH\nSTTCB    DS    1F                      TCB ADDRESS RETURNED BY ATTACH\nEPNAME   DS    CL8                     EPNAME FOR ATTACH EPLOC=\nLATT     DS    XL(LATTL)               ATTACH WORK AREA\nRACROUTE DS    XL(MFLROUTL)            WORKAREA FOR RACROUTE\nSAFWK    DS    XL512                   WORKAREA FOR SAF\nWORKLEN  EQU   *-WORKAREA\n*\nSVCSCRN  DSECT ,                       KEY 0 SCREENING TABLE\nSVCSCHDR DS    1D\nSVCSCTBL DS    XL256\nSVCSCRNL EQU   *-SVCSCRN\n*\nUSERPARM DSECT ,                       USERKEY PARAMETERAREA\nPARMADDR DS    1F                      POINTER TO USERPARM\nPARMLEN  DS    1H                      LENGTH OF USERPARM\nPARMSTR  DS    0C                      USERPARM\nUSERPLEN EQU   *-USERPARM              USERPARM HEADER LENGTH\n*\n         EJECT ,\n*\n         IHAPSA ,\n         CVT   DSECT=YES\n         IHASCVT ,\n         IKJTCB ,\n         IKJRB ,\n         IHACDE ,\n         IHASVC ,\n         IEZJSCB ,\n         YREGS ,\n*\n         END   ,\n//LKED     EXEC PGM=HEWL,PARM='REFR,AMODE=31,RMODE=24,AC=1'\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  SPACE=(CYL,1),UNIT=SYSALLDA\n//SYSLMOD  DD  DSN=SYS1.LINKLIB(NODSI),DISP=SHR\n//SYSLIN   DD  DSN=&&PUNCH,DISP=(OLD,DELETE)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "NODSI$": {"ttr": 2822, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x994\\x8f\\x00\\x994\\x8f\\x12\\x00\\x00*\\x00*\\x00\\x00\\xd1\\xd1\\xc1\\xc5\\xc7\\xc5\\xd9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-12-14T00:00:00", "modifydate": "1999-12-14T12:00:00", "lines": 42, "newlines": 42, "modlines": 0, "user": "JJAEGER"}, "text": "NODSI\n\nFunction\n\nThis program is to allow manipulation of datasets that are ENQ-ed upon.\nThese ENQs would regularly be prohibitive, however this program will\nintercept SYSDSN ENQ such that no conflicts will arise and the function\nwill proceed as if no ENQ exists.\n\n\nUsing NODSI\n\nThe following JOB will invoke IEHPROGM through NODSI in order to\ndelete datasets that have an ENQ against them. Any other MVS program may\nbe executed this way such as:\n\n   1.IDCAMS\n   2.ADRDSSU\n   3.IKJEFT01\n\n//IBMUSERD JOB ,'JAN JAEGER'\n//NODSI    EXEC PGM=NODSI,PARM='IEHPROGM,LINECNT=66'\n//VOLDD    DD  UNIT=3380,VOL=SER=STOR01,DISP=OLD\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  *\n SCRATCH DSNAME=IBMUSER.ZZ,VOL=3380=STOR01\n/*\n\n\n\nInstallation requirements\n\nNODSI needs to be installed in an APF authorised library.\nAccess is required to entity NODSI in the FACILITY class.\n\n\nDOWNLOAD\n\nSourcecode is distributed in distribution file nodsi.zip\n\n\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "NODSI00": {"ttr": 2824, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00V\\x01\\x18$/\\x01\\x18$?\\x00\\x16\\x00!\\x00\\x14\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2018-08-30T00:00:00", "modifydate": "2018-08-31T00:16:56", "lines": 33, "newlines": 20, "modlines": 0, "user": "SBGOLOB"}, "text": "Notes on our copy of NODSI from Jan Jaeger.\n\nMod to not require RACF authorization for this program.\n\nYou still need the program to be APF-authorized.\n\nWe commented out the branch on the bad return code from the\nRACROUTE.  Now the program doesn't need RACF authorization the\nway we have it.  It works in any case, and you don't have to have\nREAD access to profile NODSI in the FACILITY class.  If you want\nthat, just uncomment the line that is the branch to AUTHERR.\n\nOr the opposite.  If it is commented, and you do want to\nrequire RACF authorization, then uncomment it.\n\n*        BNZ   AUTHERR                       TEST\n\nCool tool........\n\nOr alternatively, zap an existing NODSI module that requires RACF:\n(Or reverse the zap if you want to restore the RACF requirement.)\n\n//*\n//*    ZAP NODSI TO NOT REQUIRE RACF AUTHORIZATION TO WORK.\n//*\n//SPZAP   EXEC PGM=AMASPZAP\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DSN=SYS1.W$$.LINKLIB,DISP=SHR\nNAME NODSI  JJ$NODSI\nVER 00017A 4770 63BE            BNZ AUTHERR\nREP 00017A 4700 63BE            NOP AUTHERR\nIDRDATA NORACF\n/*\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "OPSYNBRI": {"ttr": 2826, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x994\\x9f\\x00\\x994\\x9f\\x154\\x00\\x19\\x00\\x19\\x00\\x00\\xc9\\xc2\\xd4\\xe4\\xe2\\xc5\\xd9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-12-15T00:00:00", "modifydate": "1999-12-15T15:34:00", "lines": 25, "newlines": 25, "modlines": 0, "user": "IBMUSER"}, "text": "         MACRO ,\n         OPSYNBRI\n.* CONVERT 'OLD' TYPE BRANCH INSTRUCTIONS TO 'NEW' RELATIVE TYPE\nBAS      OPSYN BRAS\nBC       OPSYN BRC\nBCT      OPSYN BRCT\nBXH      OPSYN BRXH\nBXLE     OPSYN BRXLE\nB        OPSYN J\nBE       OPSYN JE\nBZ       OPSYN JZ\nBNE      OPSYN JNE\nBO       OPSYN JO\nBH       OPSYN JH\nBL       OPSYN JL\nBNH      OPSYN JNH\nBM       OPSYN JM\nBNL      OPSYN JNL\nBNZ      OPSYN JNZ\nBP       OPSYN JP\nBNP      OPSYN JNP\nBNO      OPSYN JNO\nBNM      OPSYN JNM\n         MEXIT ,\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PARMTZ": {"ttr": 2828, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x994\\x8f\\x00\\x994\\x8f\\x12\\x00\\x00\\xa0\\x00\\xa0\\x00\\x00\\xd1\\xd1\\xc1\\xc5\\xc7\\xc5\\xd9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-12-14T00:00:00", "modifydate": "1999-12-14T12:00:00", "lines": 160, "newlines": 160, "modlines": 0, "user": "JJAEGER"}, "text": "./ ADD NAME=PARMTZ      01 00 98319 99319 160857 0158 0158 0000 IBMUSER\n//IBMUSERA JOB T,PARMTZ,CLASS=A,NOTIFY=JJ,MSGCLASS=A\n//ASMA90   EXEC PGM=ASMA90,PARM='DECK,NOOBJ'\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.MODGEN,DISP=SHR\n//SYSUT1   DD  UNIT=SYSALLDA,SPACE=(CYL,10)\n//SYSPUNCH DD  DSN=&&PUNCH,DISP=(NEW,PASS),UNIT=SYSALLDA,SPACE=(CYL,10)\n TITLE 'Retrieve active GMT offset'\n***********************************************************************\n*                                                                     *\n* Justification:                                                      *\n*   The TZ variable needs to be adjusted on a regular basis for       *\n*   daylight saving.  under normal (non oe) circumstances this        *\n*   is either done in SYS1.PARMLIB(CLOCKxx), or on a SYSPLEX timer.   *\n*   This function will remove the need to update TZ separately        *\n*   from CLOCKxx or the SYSPLEX timer                                 *\n*                                                                     *\n* Function:                                                           *\n*   Retrieve the local date/time offset and present this in a manner  *\n*   compatible with the TZ variable specifications.                   *\n*                                                                     *\n* Example:                                                            *\n*   export TZ=CET`/usr/local/bin/parmtz`         (/etc/profile)       *\n*                                                                     *\n* Logic:                                                              *\n*   Obtain workarea                                                   *\n*   Retrieve offset from CVT in STCK format                           *\n*   Convert to character format                                       *\n*   Write resule to STDOUT                                            *\n*   Release workarea                                                  *\n*   Return to caller                                                  *\n*                                                                     *\n* Register usage                                                      *\n*   R0     Not used                                                   *\n*   R1-R2  Work                                                       *\n*   R3     CVT                                                        *\n*   R4     CVT extension                                              *\n*   R5-R11 Not used                                                   *\n*   R12    EPA and program base                                       *\n*   R13    Save area and work area                                    *\n*   R14    Return address                                             *\n*   R15    Return code                                                *\n*                                                                     *\n* Attributes:                                                         *\n*   AMODE(31),RMODE(ANY)                                              *\n*                                                                     *\n* History:                                                            *\n*   Date       By              Comments                               *\n*   15/11/98   Jan Jaeger      Initial version                        *\n*                                                                     *\n***********************************************************************\nPARMTZ   RSECT ,\nPARMTZ   AMODE 31\nPARMTZ   RMODE ANY\n         BAKR  R14,0\n         BASR  R12,0\n         USING *,R12\n*\n         STORAGE OBTAIN,               Obtain work and savearea        X\n               LENGTH=WALEN\n         LR    R13,R1\n         MVC   4(4,R1),=C'F1SA'\n         USING WORKAREA,R13\n*\n         L     R3,CVTPTR               Address CVT\n         USING CVT,R3\n         L     R4,CVTEXT2              and the extension that contains\n         USING CVTXTNT2,R4               the timezone offset\n*\n         MVC   OUTPUT,FORMAT           Initialise output field\n         MVC   OFFSETS,CVTLDTO\n         TM    CVTLDTO,X'80'           Are we EAST or WEST\n         BNO   ISPOS\n         MVI   SIGN,C'+'               GMT is ahead of us (We are EAST)\n         XC    OFFSETS,=8X'FF'         One's complement is good enough\nISPOS    DS    0H\n*\n         LM    R0,R1,OFFSETS           Add half a second to nullify\n         AL    R1,HALFSEC                rounding errors\n         BC    B'1100',NOOVF\n         AL    R0,=F'1'\n         ST    R0,OFFSETS\nNOOVF    DS    0H\n         ST    R1,OFFSETS+4\n*\n         STCKCONV STCKVAL=OFFSETS,     Convert STCK to HHMMSS          X\n               CONVVAL=OFFSETP,                                        X\n               TIMETYPE=DEC\n         MVI   OFFSETO+3,X'0F'         Convert\n         MVO   OFFSETO,OFFSETP(3)        packed\n         UNPK  OFFSETC,OFFSETO             to\n         OI    OFFSETC+5,C'0'                character\n         MVC   HH,OFFSETC              Move\n         MVC   MM,OFFSETC+2              into\n         MVC   SS,OFFSETC+4                output field\n*\n         LA    R1,OUTPUT               Address of output field\n         ST    R1,OUTAREA              Store for all to WRT\n         CALL  BPX1WRT,                                                X\n               (=A(STDOUT_FILENO),     File descriptor of STDOUT       X\n               OUTAREA,                Buffer address                  X\n               =A(0),                  Buffer alet                     X\n               =A(L'OUTPUT),           Buffer length                   X\n               RET,                    Bytes written or -1             X\n               RC,                     Return code                     X\n               RS),                    Reason code                     X\n               VL,MF=(E,LCALL)\n*\n         L     R2,RC                   Save return code from BPX1WRT\n         LR    R1,R13\n         STORAGE RELEASE,                                              X\n               LENGTH=WALEN,                                           X\n               ADDR=(1)\n*\n         LR    R15,R2                  Pass return code back to caller\n         PR    ,\n*\nHALFSEC  DC    XL4'7A120000'           Half a second\n*\nFORMAT   DC    X'604B4B7A4B4B7A4B4B15' +HH:MM:SS<NL>\n*\n         LTORG ,\n*\nWORKAREA DSECT\nSAVEAREA DS    18F\nOFFSETS  DS    1D             STCK format\nOFFSETP  DS    XL16           X'HHMMSSthmiju0YYYYDDD'\nOFFSETO  DS    XL4            X'0HHMMSSF'\nOFFSETC  DS    CL6            C'HHMMSS'\nLCALL    DS    7F             CALL BPX1WRT(....)\nOUTAREA  DS    A              A(OUTPUT)\nOUTPUT   DS    CL(L'FORMAT)\nSIGN     EQU   OUTPUT,1,C'C'\nHH       EQU   OUTPUT+1,2,C'C'\nMM       EQU   OUTPUT+4,2,C'C'\nSS       EQU   OUTPUT+7,2,C'C'\nNL       EQU   OUTPUT+9,1,C'C'\nRET      DS    F\nRC       DS    F\nRS       DS    F\nWALEN    EQU   *-WORKAREA\n*\n         CVT   DSECT=YES\n*\n         BPXYCONS ,\n         YREGS ,\n*\n         END   ,\n//IEWL     EXEC PGM=HEWL,\n//          PARM='AMODE=31,RMODE=ANY,CASE=MIXED,STORENX,MAP,XREF'\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=SYSALLDA,SPACE=(CYL,10)\n//SYSLMOD  DD  PATH='/usr/local/bin'\n//SYSLIB   DD  DSN=SYS1.CSSLIB,DISP=SHR\n//SYSLIN   DD  DSN=&&PUNCH,DISP=(OLD,DELETE)\n//         DD  *\n SETOPT PARM(PATHMODE(0,7,5,5))\n NAME ./parmtz\n\u001a\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PARMTZ$": {"ttr": 2832, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x994\\x8f\\x00\\x994\\x8f\\x12\\x00\\x00 \\x00 \\x00\\x00\\xd1\\xd1\\xc1\\xc5\\xc7\\xc5\\xd9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-12-14T00:00:00", "modifydate": "1999-12-14T12:00:00", "lines": 32, "newlines": 32, "modlines": 0, "user": "JJAEGER"}, "text": "PARMTZ\n\nFunction\n\nThis OMVS program will retrieve the UTC/local time offset from MVS. It\nwill return the offset in a manner compatible for use with the TZ shell\nvariable.\n\n\nUsing PARMTZ\n\nThe following example will set the TZ variable to the UTC/Local offset\nfrom MVS.\n\nIn etc/profile or $HOME/.profile:\n\nexport TZ=CET`/usr/local/bin/parmtz`\n\n\n\nInstallation requirements\n\nparmtz needs to be installed in a HFS.\n\n\nDOWNLOAD\n\nSourcecode is distributed in distribution file parmtz.zip\n\n\n\n\u001a\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SUBMIT": {"ttr": 3073, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x994\\x9f\\x00\\x994\\x9f\\x154\\x01\\x8f\\x01\\x8f\\x00\\x00\\xc9\\xc2\\xd4\\xe4\\xe2\\xc5\\xd9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-12-15T00:00:00", "modifydate": "1999-12-15T15:34:00", "lines": 399, "newlines": 399, "modlines": 0, "user": "IBMUSER"}, "text": "         OPSYNBRI ,\nSUBMIT0  CSECT ,\nSUBMIT0  AMODE 24\nSUBMIT0  RMODE 24\n         BAKR  R14,0\n         LR    R12,R15\n         USING SUBMIT0,R12\n*\n         LR    R11,R1                  ESTABLISH ADDRESSABILITY\n         USING CPPL,R11                  TO THE CPPL\n*\n         STORAGE OBTAIN,               OBTAIN WORKAREA                 X\n               LENGTH=WORKALEN\n         LR    R10,R1\n         USING WORKAREA,R10\n         USING PPL,WORKPPL\n         USING IOPL,WORKIOPL\n         USING IFGACB,WORKACB\n         USING IFGRPL,WORKRPL\n         USING S99RBX,RBX\n         USING IHADCB,WORKDCB\n*\n         LA    R13,SAVEAREA\n         MVC   4(4,R1),=C'F1SA'\n         STM   R10,R13,PARMADDR\n*\n         LA    R1,RB                   ALLOCATE INTERNAL READER\n         ST    R1,RBP\n         OI    RBP,X'80'\n         MVC   RB,DYNRB\n         MVC   RBX,DYNRBX\n         MVC   TU,DYNTU\n         ST    R11,S99ECPPL\n         LA    R1,TUPL\n         ST    R1,A_TUPL\n         LA    R1,RBX\n         ST    R1,A_RBX\n         LA    R1,TUSYSOUT\n         ST    R1,A_SYSOUT\n         LA    R1,TUINTRDR\n         ST    R1,A_INTRDR\n         LA    R1,TULRECL\n         ST    R1,A_LRECL\n         LA    R1,TURECFM\n         ST    R1,A_RECFM\n         LA    R1,TUCLOSE\n         ST    R1,A_CLOSE\n         LA    R1,TURETDDN\n         ST    R1,A_RETDDN\n         OI    A_LAST,X'80'\n         LA    R1,RBP\n         DYNALLOC\n         LTR   R2,R15\n         BNZ   EXIT\n*\n         MVC   WORKACB,RDRACB          OPEN INTERNAL READER\n         MVC   WORKRPL,RDRRPL\n         MVC   ACBDDNM,TUDDNAME\n         LA    R1,WORKACB\n         ST    R1,RPLDACB\n         LA    R1,CARD\n         ST    R1,RPLAREA\n         MVC   LOPEN,MFLOPEN\n         OPEN  (WORKACB,(OUTPUT)),MF=(E,LOPEN)\n         LTR   R2,R15\n         BNZ   EXIT\n*\n         MVC   PPLUPT,CPPLUPT          CALL PARSE ROUTINE\n         MVC   PPLECT,CPPLECT\n         LA    R1,PARMADDR\n         ST    R1,PPLUWA\n         XC    CPECB,CPECB\n         LA    R1,CPECB\n         ST    R1,PPLECB\n         MVC   PPLPCL,=A(SUBMIT1)\n         LA    R1,PDL\n         ST    R1,PPLANS\n         MVC   PPLCBUF,CPPLCBUF\n         CALLTSSR EP=IKJPARS,MF=(E,PPL)\n*\n         L     R2,RC\n*\n         IKJRLSA PDL                   RELEASE PDL\n*\n         MVC   LCLOSE,MFLCLOSE         CLOSE INTERNAL READER\n         CLOSE (WORKACB),MF=(E,LCLOSE)\n*\nEXIT     DS    0H                      RETURN TO CALLER\n         LR    R1,R13\n         STORAGE RELEASE,                                              X\n               LENGTH=WORKALEN,                                        X\n               ADDR=(1)\n         LR    R15,R2\n         PR    ,\n*\nPROC_DSN DS    0H\n         BAKR  R14,0\n*\n         LM    R7,R9,0(R1)             VALIDCK PARAMETERS\n         LM    R10,R13,0(R8)\n         LA    R13,72(,R13)\n         MVC   4(4,R13),=C'F1SA'\n*\n         LA    R1,RB                   ALLOCATE JCL DATA SET\n         ST    R1,RBP\n         OI    RBP,X'80'\n         MVC   RB,DYNRB\n         MVC   RBX,DYNRBX\n         MVC   TU2,DYNTU2\n         ST    R11,S99ECPPL\n         LA    R1,TUPL2\n         ST    R1,A_TUPL\n         LA    R1,RBX\n         ST    R1,A_RBX\n         LA    R1,TU2DSN\n         ST    R1,A_2DSN\n*\n         TM    6(R7),X'80'             IS DSNAME PRESENT\n         BZ    PROC_RC4\n         L     R1,0(,R7)               POINTER TO DSNAME\n         LH    R2,4(,R7)               LENGTH OF DSNAME\n         STH   R2,TU2DSLEN\n         BCTR  R2,0\n         EX    R2,MVCDSNAM\n*\n         LA    R1,TU2DISP\n         ST    R1,A_2DISP\n         LA    R1,TU2CLOSE\n         ST    R1,A_2CLOSE\n         LA    R1,TU2RETDD\n         ST    R1,A_2RETDD\n         LA    R1,TU2RTORG\n         ST    R1,A_2RTORG\n         OI    A_2LAST,X'80'\n         LA    R1,RBP\n         DYNALLOC\n         LTR   R15,R15\n         BNZ   PROC_RC8\n*\n         MVC   WORKDCB,JCLDCB          OPEN JCL DATA SET\n         MVC   DCBDDNAM,TU2DDNAM\n         LA    R1,EXLST\n         STCM  R1,B'0111',DCBEXLSA\n         LA    R1,INFMJFCB\n         ST    R1,EXLST\n         MVI   EXLST,X'87'\n         MVC   LRDJFCB,MFLRDJFC\n         RDJFCB (WORKDCB),MF=(E,LRDJFCB)\n         LTR   R15,R15\n         BNZ   PROC_RC8\n*\n         CLC   TU2RTORG,=H'0'\n         BNZ   HASDSORG\n         TM    14(R7),X'80'\n         BO    NODSORG\n         BZ    PROC_SEQ\nHASDSORG DS    0H\n         TM    TU2RTORG,X'40'          PS(U)\n         BO    PROC_SEQ\n         TM    TU2RTORG,X'02'          PO(U)\n         BZ    PROC_RC4\n         LA    R1,=C'TEMPNAME'\n         LA    R2,8\nNODSORG  DS    0H\n         TM    14(R7),X'80'            IS MEMBER NAME PRESENT\n         BZ    TEMPNAME\n         L     R1,8(,R7)               POINTER TO MEMBERNAME\n         LH    R2,12(,R7)              LENGTH OF MEMBERNAME\nTEMPNAME DS    0H\n         BCTR  R2,0\n         EX    R2,MVCMEMNM\n         OI    JFCBIND1,JFCPDS\nPROC_SEQ DS    0H\n*\n         MVC   LOPEN,MFLOPEN\n         OPEN  (WORKDCB,(INPUT)),                                      X\n               TYPE=J,                                                 X\n               MF=(E,LOPEN)\n         LTR   R15,R15\n         BNZ   PROC_RC8\n*\nGETCARD  DS    0H                      READ JCL CARD LOOP\n         GET   WORKDCB\n*\n         MVC   CARD,0(R1)\n*\n         PUT   RPL=WORKRPL             PUNCH JCL TO INTERNAL READER\n         B     GETCARD\n*\nJCLEOD   DS    0H\n         ENDREQ RPL=WORKRPL            INFORM READER ABOUT EOF\n         MVC   LCLOSE,MFLCLOSE         CLOSE JCL DATA SET\n         CLOSE (WORKDCB),MF=(E,LCLOSE)\n         FREEPOOL WORKDCB\n*\n         TM    RPLRBAR,X'BF'\n         BZ    NOMSG\n         MVC   WORKMSG,MSGSUBM         ISSUE SUBMITTED MESSAGE\n         MVC   MSGJOBID,RPLRBAR\n         XC    CPECB,CPECB\n         MVC   WORKPUTL,MFLPTL\n         L     R2,CPPLUPT\n         L     R3,CPPLECT\n         LA    R4,WORKMSG\n         PUTLINE PARM=WORKPUTL,                                        X\n               UPT=(2),                                                X\n               ECT=(3),                                                X\n               ECB=CPECB,                                              X\n               OUTPUT=((4),TERM,SINGLE,DATA),                          X\n               MF=(E,IOPL)\nNOMSG    DS    0H\n*\n         SLR   R15,R15\n         ST    R15,RC\n         PR    ,\n*\nPROC_RC4 DS    0H\n         LA    R15,4\n         ST    R15,RC\n         PR    ,\n*\nPROC_RC8 DS    0H\n         LA    R15,8\n         ST    R15,RC\n         PR    ,\n*\nMVCDSNAM MVC   TU2DSNAM(0),0(R1)\nMVCMEMNM MVC   JFCBELNM(0),0(R1)\n*\nMSGSUBM  DC    AL2(L'MSGSUBMT+MSGSUBMT-*,0)\nMSGSUBMT DC    C'JOBXXXXX SUBMITTED'\nMSGJOBID EQU   WORKMSG+2*L'MSGSUBM,8,C'C'\n*\nSUBMIT1  IKJPARM ,\nPCE      IKJPOSIT DSNAME,                                              X\n               LIST,                                                   X\n               USID,                                                   X\n               VALIDCK=PROC_DSN,                                       X\n               PROMPT='ENTER DATA SET NAME',                           X\n               HELP=('ENTER NAME OF DATA SET CONTAINING JCL')\n         IKJENDP ,\n*\nMFLPTL   PUTLINE MF=L\nL_MFLPTL EQU   *-MFLPTL\n*\nRDRACB   ACB   MACRF=(ADR,OUT)\nL_ACB    EQU   *-RDRACB\n*\nRDRRPL   RPL   OPTCD=ADR,                                              X\n               RECLEN=80,                                              X\n               AREALEN=L'CARD\nL_RPL    EQU   *-RDRRPL\n*\n         DS    0H\nDYNRB    DC    AL1(L_DYNRB,S99VRBAL,0,0)\n         DS    H\n         DS    H\nA_TUPL   EQU   RB+*-DYNRB\n         DS    A\nA_RBX    EQU   RB+*-DYNRB\n         DS    A\n         DC    AL1(0,0,0,0)\nL_DYNRB  EQU   *-DYNRB\n*\n         DS    0H\nDYNRBX   DC    CL6'S99RBX'\n         DC    AL1(S99RBXVR,S99EIMSG,0,0,S99XWARN,0)\n         DC    A(0)\n         DS    F\n         DS    F\n         DS    F\n         DS    F\n         DS    F\nL_DYNRBX EQU   *-DYNRBX\n*\nDYNTU    DS    0H\nSSYSOUT  DC    AL2(DALSYSOU,1,L'MSGCLASS)\nMSGCLASS DC    C'H'\nSINTRDR  DC    AL2(DALSPGNM,1,L'SINTRDRC)\nSINTRDRC DC    C'INTRDR'\nSLRECL   DC    AL2(DALLRECL,1,L'SLRECLA)\nSLRECLA  DC    AL2(80)\nSRECFM   DC    AL2(DALRECFM,1,L'SRECFMX)\nSRECFMX  DC    X'80'\nSCLOSE   DC    AL2(DALCLOSE,0)\nSRETDDN  DC    AL2(DALRTDDN,1,L'SRETDDNC)\nSRETDDNC DS    CL8\nL_DYNTU  EQU   *-DYNTU\nTUSYSOUT EQU   TU+SSYSOUT-DYNTU\nTUINTRDR EQU   TU+SINTRDR-DYNTU\nTULRECL  EQU   TU+SLRECL-DYNTU\nTURECFM  EQU   TU+SRECFM-DYNTU\nTUCLOSE  EQU   TU+SCLOSE-DYNTU\nTURETDDN EQU   TU+SRETDDN-DYNTU\nTUDDNAME EQU   TU+SRETDDNC-DYNTU,8,C'C'\n*\nDYNTU2   DS    0H\nSDSN     DC    AL2(DALDSNAM,1,*-*)\nSDSNC    DS    CL44\nSDISP    DC    AL2(DALSTATS,1,L'SDISPC)\nSDISPC   DC    X'08'   SHR\nSCLOSE2  DC    AL2(DALCLOSE,0)\nSRETDD2  DC    AL2(DALRTDDN,1,L'SRETDD2C)\nSRETDD2C DS    CL8\nSRTORG2  DC    AL2(DALRTORG,1,L'SRTORG2C)\nSRTORG2C DS    XL2\nL_DYNTU2 EQU   *-DYNTU2\nTU2DSN   EQU   TU2+SDSN-DYNTU2\nTU2DISP  EQU   TU2+SDISP-DYNTU2\nTU2CLOSE EQU   TU2+SCLOSE2-DYNTU2\nTU2RETDD EQU   TU2+SRETDD2-DYNTU2\nTU2DSNAM EQU   TU2+SDSNC-DYNTU2,L'SDSNC,C'C'\nTU2DSLEN EQU   TU2+SDSNC-DYNTU2-2,2,C'H'\nTU2DDNAM EQU   TU2+SRETDD2C-DYNTU2,L'SRETDD2C,C'C'\nTU2RTORG EQU   TU2+SRTORG2C-DYNTU2,L'SRTORG2C,C'C'\n*\nMFLRDJFC RDJFCB (,),MF=L\nL_RDJFCB EQU   *-MFLRDJFC\nMFLOPEN  OPEN  (,),MF=L\nL_OPEN   EQU   *-MFLOPEN\nMFLCLOSE CLOSE (,),MF=L\nL_CLOSE  EQU   *-MFLCLOSE\n*\nJCLDCB   DCB   DDNAME=JCLDCB,                                          X\n               MACRF=(GL),                                             X\n               DSORG=PS,                                               X\n               EODAD=JCLEOD\nL_JCLDCB EQU   *-JCLDCB\n*\n         LTORG ,\n*\nWORKAREA DSECT ,\nSAVEAREA DS    (2*18)F\nPARMADDR DS    4F\nWORKPPL  DS    XL(L_PPL)\nWORKIOPL DS    XL(L_IOPL)\nWORKPUTL DS    XL(L_MFLPTL)\nWORKMSG  DS    XL(L'MSGSUBM*2+L'MSGSUBMT)\nWORKACB  DS    XL(L_ACB)\nWORKRPL  DS    XL(L_RPL)\nWORKDCB  DS    XL(L_JCLDCB)\nEXLST    DS    F\nWORKJFCB IEFJFCBN ,\nCARD     DS    CL80\nPDL      DS    1F\nCPECB    DS    1F\nRC       DS    1F\n*\nRBP      DS    A\nRB       DS    XL(L_DYNRB)\n         DS    0H\nRBX      DS    XL(L_DYNRBX)\nTUPL     DS    0F\nA_SYSOUT DS    A\nA_INTRDR DS    A\nA_CLOSE  DS    A\nA_LRECL  DS    A\nA_RECFM  DS    A\nA_RETDDN DS    A\nA_LAST   EQU   A_RETDDN\nTUPL2    DS    0F\nA_2DSN   DS    A\nA_2DISP  DS    A\nA_2CLOSE DS    A\nA_2RETDD DS    A\nA_2RTORG DS    A\nA_2LAST  EQU   A_2RTORG\nTU       DS    XL(L_DYNTU)\n         DS    0H\nTU2      DS    XL(L_DYNTU2)\n         DS    0F\nLRDJFCB  DS    XL(L_RDJFCB)\n         DS    0F\nLOPEN    DS    XL(L_OPEN)\n         DS    0F\nLCLOSE   DS    XL(L_CLOSE)\nWORKALEN EQU   *-WORKAREA\n*\n         YREGS ,\n*\n         IKJTSVT ,\n         IKJPPL ,\nL_PPL    EQU   *-PPL\n         IKJCPPL ,\nL_CPPL   EQU   *-CPPL\n         IKJIOPL ,\nL_IOPL   EQU   *-IOPL\n*\n         IFGACB ,\n         IFGRPL ,\n*\n         IEFZB4D0 ,\n         IEFZB4D2 ,\n*\n         DCBD  DSORG=DA\n*\n         CVT   DSECT=YES\n*\n         END   ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "UPDCREAT": {"ttr": 3080, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x994\\x9f\\x00\\x994\\x9f\\x154\\x00\\x84\\x00\\x84\\x00\\x00\\xc9\\xc2\\xd4\\xe4\\xe2\\xc5\\xd9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-12-15T00:00:00", "modifydate": "1999-12-15T15:34:00", "lines": 132, "newlines": 132, "modlines": 0, "user": "IBMUSER"}, "text": "         OPSYNBRI ,\nUPDCREAT CSECT ,\nUPDCREAT RMODE 24\nUPDCREAT AMODE 31\n         BAKR  R14,0\n         BASR  R12,0\n         LA    R0,*-UPDCREAT\n         SLR   R12,R0\n         USING UPDCREAT,R12\n         LA    R13,SAVEAREA\n         MVC   4(4,R13),=C'F1SA'\n*\n         OPEN  (SYSUT1D,(INPUT),SYSUT2,(OUTPUT)),MODE=31\n*\n         RDJFCB SYSUT1\n         OI    JFCBIND1,JFCPDS\n*\nGETDREC  DS    0H\n         GET   SYSUT1D\n         LH    R2,0(,R1)               LENGTH OF DIRECTORY BLOCK\n         BCTR  R2,0\n         LA    R3,2(,R1)\n         LA    R5,0(R2,R1)\nMEMLOOP  DS    0H\n         CLC   =X'FFFFFFFFFFFFFFFF',0(R3)      END-OF-DIRECTORY\n         BE    EODIR\n*\n         PUT   SYSUT2                  INSERT IEBUPDTE CONTROL CARD\n         MVC   0(L'ADDCARD,R1),ADDCARD\n         MVC   12(8,R1),0(R3)            INSERT MEMBER NAME\n*\n         TM    11(R3),B'10000'         ADD ISPF STATS TO CONTROL CARD\n         BO    NOSTATS\n         TM    11(R3),B'01111'\n         BNO   NOSTATS\n         SLR   R2,R2\n         IC    R2,12(,R3)              VV\n         CVD   R2,DWORD\n         UNPK  24(2,R1),DWORD+6(2)\n         OI    25(R1),C'0'\n         IC    R2,13(,R3)              MM\n         CVD   R2,DWORD\n         UNPK  27(2,R1),DWORD+6(2)\n         OI    28(R1),C'0'\n         UNPK  30(5,R1),17(3,R3)       CREATED (DATE)\n         OI    34(R1),C'0'\n         UNPK  36(5,R1),21(3,R3)       CHANGED (DATE)\n         OI    40(R1),C'0'\n         MVO   DWORD+2(2),15(1,R3)     CHANGED (TIME)\n         MVO   DWORD(3),24(2,R3)\n         UNPK  42(6,R1),DWORD(4)\n         OI    47(R1),C'0'\n         LH    R2,26(,R3)              SIZE\n         CVD   R2,DWORD\n         UNPK  49(4,R1),DWORD+5(3)\n         OI    52(R1),C'0'\n         LH    R2,28(,R3)              INIT\n         CVD   R2,DWORD\n         UNPK  54(4,R1),DWORD+5(3)\n         OI    57(R1),C'0'\n         LH    R2,30(,R3)              MOD\n         CVD   R2,DWORD\n         UNPK  59(4,R1),DWORD+5(3)\n         OI    62(R1),C'0'\n         MVC   64(7,R1),32(R3)         ID\nNOSTATS  DS    0H\n*\n         MVC   JFCBELNM,0(R3)          COPY MEMBER\n         OPEN  (SYSUT1,(INPUT)),TYPE=J\nGSYSUT1  DS    0H\n         GET   SYSUT1\n         LR    R2,R1\n         PUT   SYSUT2\n         MVC   0(80,R1),0(R2)\n         CLC   0(2,R1),ADDCARD\n         BNE   GSYSUT1\n         MVI   0(R1),C'@'              CHANGE ./ TO ./ ON INPUT\n         B     GSYSUT1\nEODAD    DS    0H\n         CLOSE (SYSUT1),MODE=31\n*\n         IC    R4,11(,R3)              USERDATA LENGTH IN HW\n         N     R4,=XL4'1F'\n         SLL   R4,1\n         LA    R4,12(,R4)              ENTRY LENGTH\n         BXLE  R3,R4,MEMLOOP\n         B     GETDREC\nEODIR    DS    0H\n*\n         CLOSE (SYSUT1D,,SYSUT2),MODE=31\n*\n         PR    ,\n*\n         LTORG ,\n*\nADDCARD  DC    CL80'./ ADD NAME='\n*\nSYSUT1D  DCB   DDNAME=SYSUT1,                                          X\n               DEVD=DA,                                                X\n               DSORG=PS,                                               X\n               MACRF=GL,                                               X\n               LRECL=256,                                              X\n               BLKSIZE=256,                                            X\n               DCBE=SYSUT1DE\nSYSUT1DE DCBE  RMODE31=BUFF\n*\nSYSUT1   DCB   DDNAME=SYSUT1,                                          X\n               DEVD=DA,                                                X\n               DSORG=PS,                                               X\n               MACRF=GL,                                               X\n               EXLST=EXITLIST,                                         X\n               DCBE=SYSUT1E\nEXITLIST DC    AL1(X'87'),AL3(INFMJFCB)\n         IEFJFCBN ,\nSYSUT1E  DCBE  RMODE31=BUFF,                                           X\n               EODAD=EODAD\n*\nSYSUT2   DCB   DDNAME=SYSUT2,                                          X\n               DEVD=DA,                                                X\n               DSORG=PS,                                               X\n               MACRF=PL,                                               X\n               RECFM=FB,                                               X\n               LRECL=80,                                               X\n               DCBE=SYSUT2E\nSYSUT2E  DCBE  RMODE31=BUFF\n*\nSAVEAREA DS    18F\nDWORD    DS    1D\n*\n         YREGS ,\n*\n         END   ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "UPDSTATS": {"ttr": 3083, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x994\\x9f\\x00\\x994\\x9f\\x154\\x00X\\x00X\\x00\\x00\\xc9\\xc2\\xd4\\xe4\\xe2\\xc5\\xd9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-12-15T00:00:00", "modifydate": "1999-12-15T15:34:00", "lines": 88, "newlines": 88, "modlines": 0, "user": "IBMUSER"}, "text": "UPDSTATS CSECT ,\nUPDSTATS RMODE 24\nUPDSTATS AMODE 24\n         BAKR  R14,0\n         BASR  R12,0\n         LA    R0,*-UPDSTATS\n         SLR   R12,R0\n         USING UPDSTATS,R12\n         LA    R13,SAVEAREA\n         MVC   4(4,R13),=C'F1SA'\n*\n         OPEN  (SYSIN,(INPUT),SYSUT2,(UPDAT))\n*\nGETSYSIN DS    0H\n         GET   SYSIN\n         CLC   ADDCARD,0(R1)\n         BNE   GETSYSIN\n         TM    64(R1),X'BF'\n         BZ    GETSYSIN\n         MVC   MEMBER(8),12(R1)\n         LR    R3,R1\n         BLDL  SYSUT2,ENTRY\n         LTR   R15,R15\n         BNZ   GETSYSIN\n         TM    MEMBER+13,B'11111'\n         BNZ   GETSYSIN\n         MVI   MEMBER+11,15\n         XC    DWORD,DWORD\n         PACK  DWORD+6(2),24(2,R3)     VV\n         CVB   R2,DWORD\n         STC   R2,MEMBER+12\n         PACK  DWORD+6(2),27(2,R3)     MM\n         CVB   R2,DWORD\n         STC   R2,MEMBER+13\n         MVI   MEMBER+14,0\n         PACK  MEMBER+16(4),30(5,R3)   CREATED (DATE)\n         PACK  MEMBER+20(4),36(5,R3)   CHANGED (DATE)\n         PACK  DWORD(4),42(6,R3)       CHANGED (TIME)\n         MVO   DWORD+4(4),DWORD(3)\n         MVC   MEMBER+24(2),DWORD+5\n         MVO   DWORD+4(3),DWORD+2(2)\n         MVC   MEMBER+15(1),DWORD+5\n         XC    DWORD,DWORD\n         PACK  DWORD+5(3),49(4,R3)     SIZE\n         CVB   R2,DWORD\n         STH   R2,MEMBER+26\n         PACK  DWORD+5(3),54(4,R3)     INIT\n         CVB   R2,DWORD\n         STH   R2,MEMBER+28\n         PACK  DWORD+5(3),59(4,R3)     MOD\n         CVB   R2,DWORD\n         STH   R2,MEMBER+30\n         MVC   MEMBER+32(7),64(R3)     ID\n         MVC   MEMBER+39(3),=CL3' '\n         STOW  SYSUT2,MEMBER,R\n         B     GETSYSIN\n*\nEODAD    DS    0H\n         CLOSE (SYSIN,,SYSUT2)\n*\n         PR    ,\n*\n         LTORG ,\n*\nADDCARD  DC    C'./ ADD NAME='\n*\nSYSUT2   DCB   DDNAME=SYSUT2,                                          X\n               DEVD=DA,                                                X\n               DSORG=PO,                                               X\n               MACRF=(R,W)\n*\nSYSIN    DCB   DDNAME=SYSIN,                                           X\n               DEVD=DA,                                                X\n               DSORG=PS,                                               X\n               MACRF=GL,                                               X\n               EODAD=EODAD\n*\nENTRY    DS    0F\nFF       DC    AL2(1)\nLL       DC    AL2(L'MEMBER)\nMEMBER   DS    XL(76)\n*\nSAVEAREA DS    18F\nDWORD    DS    1D\n*\n         YREGS ,\n*\n         END   ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VMCP": {"ttr": 3331, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x995\\x0f\\x00\\x995\\x0f\\x11\\x05\\x02*\\x02*\\x00\\x00\\xd1\\xd1\\xc1\\xc5\\xc7\\xc5\\xd9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-12-16T00:00:00", "modifydate": "1999-12-16T11:05:00", "lines": 554, "newlines": 554, "modlines": 0, "user": "JJAEGER"}, "text": "./ ADD NAME=VMCP        01 07 91213 97344 101131 0553 0538 0000 IBMUSER\n++USERMOD(UMODXXX) REWORK(97120201)                                     NONUMBER\n  /* USERMOD TO ADD CP COMMAND TO MVS */.                               NONUMBER\n++VER(Z038) FMID(HBB6604).                                              NONUMBER\n++MAC(DIAG)     DISTLIB(DUMMY) ASSEM(VMCPSSIN,VMCPSSCM) .               NONUMBER\n         MACRO\n&LBL     DIAG   &RX,&RY,&CODE\n.*--------------------------------------------------------------------*\n.*                                                                    *\n.* DIAG macro issues DIAGNOSE instruction   J.Jaeger, PA3EFU 17/04/87 *\n.*                                                                    *\n.*--------------------------------------------------------------------*\n&LBL     DC     0H'0',X'83',AL.4(&RX,&RY),Y(&CODE)\n.*--------------------------------------------------------------------*\n.*                                                                    *\n.*   The machine language format of DIAGNOSE is:                      *\n.*                                                                    *\n.*          <------ 4 bytes ------>                                   *\n.*          +---------------------+                                   *\n.*          | 83 | RxRy | B | DDD |                                   *\n.*          +---------------------+                                   *\n.*          0    8      16  20    31                                  *\n.*                                                                    *\n.*   where (in general):                                              *\n.*                                                                    *\n.*    83:                                                             *\n.*         is X'83', the machine language operation code for the      *\n.*          DIAGNOSE instruction.                                     *\n.*                                                                    *\n.*    RxRy:                                                           *\n.*         are the general purpose registers that contain the operand *\n.*         values or operand storage addresses that will be passed    *\n.*         through the DIAGNOSE interface. If Rx or Ry contains an    *\n.*         address, it must be a second-level address (that is, an    *\n.*         address in the storage that appears real to the issuing    *\n.*         virtual machine.                                           *\n.*                                                                    *\n.*    B:                                                              *\n.*         is the base register. IBM recommends that you specify the  *\n.*         base register as zero.                                     *\n.*                                                                    *\n.*    DDD:                                                            *\n.*         is the displacement value.                                 *\n.*                                                                    *\n.*                                                                    *\n.* Notes:                                                             *\n.*    1.   The effective address is not used to address data. The     *\n.*         DIAGNOSE code equals the contents of the base reg plus     *\n.*         the displacement. However, if the base reg is the reg      *\n.*         0, its contents are not added to the displacement; the     *\n.*         wish to remain  compatible with VM/SP when you issue a     *\n.*         DIAGNOSE code from a virtual machine, IBM recommands that  *\n.*         you always specify the base register as register 0.        *\n.*         The DIAGNOSE code, or displacement, must always be a       *\n.*         multiple of four.                                          *\n.*                                                                    *\n.*    2.   If the guest is an XA guest, VM/XA SF processes the        *\n.*         addresses that you specify in Rx, Ry, Rx+1, and Ry+1 as    *\n.*         31-bit addresses. If the guest is a 370 guest and running  *\n.*         in EC mode, the addresses are also processed as 31-bit     *\n.*         addresses. However, if the guest is a 370 guest and        *\n.*         running in BC mode, VM/XA SF processes the address as      *\n.*         24-bit addresses. To determine which registers contain     *\n.*         second-level addresses (that is, addresses is storage that *\n.*         appears real to the guest), see descriptions of the        *\n.*         individual DIAGNOSE codes.                                 *\n.*                                                                    *\n.*    3.   Because DIAGNOSE instructions execute differently in a     *\n.*         virtual machine than in a real machine, your program       *\n.*         should determine that it is operating in a virtual machine *\n.*         before issuing a DIAGNOSE instruction, and prevent         *\n.*         execution of a DIAGNOSE when in a real machine. The only   *\n.*         exeption to this is the execution of the MSSFCALL          *\n.*         DIAGNOSE X'80' instruction. Refer to the discription of    *\n.*         DIAGNOSE x'80' for a complete description of its use.      *\n.*                                                                    *\n.*         The Store Processor ID (STIDP) instruction provides your   *\n.*         program with information about the processor in wich it is *\n.*         executing, including the processor version number. If      *\n.*         STDIP is issued from a virtual machine, the version number *\n.*         will be X'FF' in the first byte of the CPUID field.        *\n.*                                                                    *\n.*    4.   A virtual machine issuing an I/O DIAGNOSE instruction      *\n.*         should run with interrupts disabled. This prevents the     *\n.*         loss of status information pertaining to the DIAGNOSE      *\n.*         operation such as condition codes and sense data.          *\n.*                                                                    *\n.*                                                                    *\n.*   For more information regarding the DIAGNOSE Instruction, refer   *\n.*   to GC19-6215 \"VM/XA SF CP Command and DIAGNOSE Code Reference\",  *\n.*   section 3.                                                       *\n.*                                                                    *\n.*--------------------------------------------------------------------*\n         MEND\n++SRC(VMCPSSIN) DISTLIB(DUMMY) .                                        NONUMBER\nVMCPSSIN CSECT ,\nVMCPSSIN AMODE 31\nVMCPSSIN RMODE ANY\n         SAVE  (14,12),,VMCPSSIN-&SYSDATE-&SYSTIME-J.JAEGER\n         LR    R12,R15\n         USING VMCPSSIN,R12\n*\n         L     R11,0(,R1)              Pointer to SSCT\n         USING SSCT,R11\n         L     R10,4(,R1)              Pointer to JSIPL\n         USING JSIPL,R10\n*\n         STORAGE OBTAIN,                                               X\n               LENGTH=CORELEN,                                         X\n               BNDRY=PAGE,                                             X\n               SP=239\n         ST    R13,4(,R1)              Chain save areas\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING CORE,R13\n*\n         STIDP CPUID                   Check if we are running\n         CLI   CPUID,X'FF'             in a virtual machine\n         BNE   NOTVM\n*\n         STNSM SYSMASK,255-IEMASK      Disable external, I/O interrupt\n         NI    SYSMASK,IEMASK          Save only I & E bits\n         LRA   R2,SEICAREA             Real address of output area\n         BC    CC1+CC2+CC3,SSINLRAE\n         LA    R4,SEICLEN              Length of area\n         DIAG  R2,R4,SEIC              Store Extended ID code\n         IC    R1,SYSMASK              Load I & E bits\n         EX    R1,STOSM                Reload I & E bits is psw\n*\n         LOAD  EP=VMCPSSSM,            Load subsystem support module   X\n               GLOBAL=(YES,F),                                         X\n               EOM=YES,                                                X\n               ERRET=SSINFAIL\n         SLR   R1,R1                   Activate subsystem\n         CS    R1,R0,SSCTSSVT\n         BNE   SSINFAIL\n*\n         MVC   WORKWTO,CP01I           Prepare for INIT OK message\n         MVC   CP01S,VMSYSNAM          Copy VM product name\n         MVC   CP01U,VMUSERID          Copy guest userid\n         WTO   CART=JSICART,                                           X\n               CONSID=JSICNSID,                                        X\n               LINKAGE=BRANCH,                                         X\n               MF=(E,WORKWTO)\n*\n         SLR   R3,R3\n         ICM   R3,B'0001',JSILGTPR     Get lenght of user parm\n         BZ    NOPARM                  Does a parameter exist??\n         L     R2,JSIADRPR             Get info addr\n*\n         MVC   WORKMGCR,MGCR00I        Initialize MGCR\n         MVC   CMDTEXT(L'CPCMD),CPCMD  Insert 'CP '\n         STCK  CMDCART                 Generate CART\n         BCTR  R3,0                    Decrement R3 for EX/MVC\n         EX    R3,CMDCOPY              Copy parm\n         LA    R3,L'CPCMD+1(,R3)       Increment to cmd len + token\n         STH   R3,CMDLEN               Store length\n         LA    R2,CMDLEN\n         MGCRE TEXT=(2),               Issue command                   X\n               CONSID=JSICNSID,                                        X\n               CART=CMDCART,                                           X\n               CMDFLAG=NOHCPY,                                         X\n               MF=(E,WORKMGCR)\nNOPARM   DS    0H\n*\nRETURN   DS    0H\n         LR    R1,R13\n         L     R13,4(,R13)             Recall R13 from savearea\n         STORAGE RELEASE,                                              X\n               LENGTH=CORELEN,                                         X\n               SP=239,                                                 X\n               ADDR=(1)\n         RETURN (14,12),RC=0           Recall registers & return\n*\nNOTVM    DS    0H\n         MVC   WORKWTO(CP00Z),CP00I    Issue NOT VM message\n         WTO   CART=JSICART,                                           X\n               CONSID=JSICNSID,                                        X\n               LINKAGE=BRANCH,                                         X\n               MF=(E,WORKWTO)\n         B     RETURN\n*\nSSINFAIL DS    0H\n         SDUMP HDR='VMCP SUBSYSTEM INITIALIZATION FAILED'\n         B     RETURN\n*\nSSINLRAE DS    0H\n         IC    R1,SYSMASK              Load I & E bits\n         EX    R1,STOSM                Reload I & E bits is psw\n         SDUMP HDR='VMCP LRA ERROR DURING INITIALIZATION'\n         B     RETURN\n*\nCMDCOPY  MVC   CMDTEXT+L'CPCMD(0),0(R2)\nSTOSM    STOSM SYSMASK,0\n*\nCPCMD    DC    C'CP '\n*\nCP00I    WTO   'VMCP00I Not running in a Virtual Machine',             X\n               MCSFLAG=(BRDCST,RESP),                                  X\n               DESC=(4,5),                                             X\n               CART=,                                                  X\n               CONSID=,                                                X\n               LINKAGE=,                                               X\n               MF=L\nCP00Z    EQU   *-CP00I\n*\nCP01I    WTO   'VMCP01I Running under vmsystem as user vmuserid',      X\n               MCSFLAG=(BRDCST,RESP),                                  X\n               DESC=(4,5),                                             X\n               CART=,                                                  X\n               CONSID=,                                                X\n               LINKAGE=,                                               X\n               MF=L\nCP01S    EQU   WORKWTO+4+22,8,C'C'\nCP01U    EQU   WORKWTO+4+39,8,C'C'\nCP01Z    EQU   *-CP01I\n*\nMGCR00I  MGCRE MF=L\nMGCR00Z  EQU   *-MGCR00I\n*\n         LTORG ,\n*\n         YREGS ,\nCC0      EQU   B'1000'\nCC1      EQU   B'0100'\nCC2      EQU   B'0010'\nCC3      EQU   B'0001'\n*\nSEIC     EQU   0                       Store Extended ID code\n*\nCORE     DSECT ,\nSAVEAREA DS    18F                     Savearea MUST be first in DSECT\nCPUID    DS    1D\nCMDCART  DS    1D                      MGCRE CART\nCMDLEN   DS    1H                      Command length\nCMDTEXT  DS    CL126                   Command text\nWORKWTO  DS    XL(CP01Z)               WTO work area\nWORKMGCR DS    XL(MGCR00Z)             MGCR work area\nSYSMASK  DS    X                       Area for STxSM\nIEMASK   EQU   3                       Mask external and I/O\n*\n         DS    0D                      Allign on double word boundary\nSEICAREA EQU   *\nVMSYSNAM DS    CL8                     VM/XA system name (VM/XA SF)\nVMRESV   DS    3X                      Reserved\nVMVERS   DS    1X                      Version code (from STIDP)\nVMMCEL   DS    1H                      MCEL for 370 resv. for XA\nVMPADDR  DS    1H                      Proc addr. (from STAP)\nVMUSERID DS    CL8                     UserID virtual machine\nVMPRODM  DS    1D                      PP map (resv IBM)\nVMTIMEZ  DS    1F                      GMT offset in seconds\nVMSYSV   DS    4X                      VM/XA system version\nSEICLEN  EQU   *-SEICAREA\n*\nCORELEN  EQU   *-CORE\n*\n         IEFJSIPL ,\n         IEFJSCVT ,\n*\n         END   VMCPSSIN,(JAN JAEGER,0101,91213)\n++SRC(VMCPJSVT) DISTLIB(DUMMY) .                                        NONUMBER\nVMCPJSVT CSECT ,\nVMCPJSVT AMODE 31\nVMCPJSVT RMODE ANY\n         EXTRN VMCPSSCM\n*                                      The CSECT VMCPJSVT is not\n         ENTRY VMCPSSVT                used but its entry point\n*                                      VMCPSSVT is used instead\n*                                      This is to provide an\n*                                      eye catcher in front of\n*                                      the SSVT which is usefull\n*                                      for debugging purposes.\nJSVTID   DC    CL4'SSVT'\n*\n* This CSECT is the Subsystem Vector Table, it relates functions to\n* function routines. The subsystem is active from the moment the\n* address of the SSVT is nonzero in the SSCVT\n*\nVMCPSSVT DS    0D\nJSVTRSV1 DC    H'0'                    Reserved\nJSVTFNUM DC    AL2(1)                  Number of functions supported\nJSVTFCOD DC    XL256'00'               Function matrix\n*\n         ORG   JSVTFCOD+SSOBCMND-1     SVC34 (operator command)\n         DC    AL1((4+JSVTSSCM-JSVTFRTN)/4)\n*\n         ORG   ,\nJSVTFSIZ EQU   *-VMCPSSVT\nJSVTFRTN DS    0F\nJSVTSSCM DC    A(VMCPSSCM+X'80000000')\nJSVTSIZE EQU   *-VMCPSSVT\n*\n         IEFJSSOB CM\n*\n         END   VMCPSSVT,(JAN JAEGER,0101,91213)\n++SRC(VMCPSSCM) DISTLIB(DUMMY) .                                        NONUMBER\nVMCPSSCM CSECT ,\nVMCPSSCM AMODE 31\nVMCPSSCM RMODE ANY\n*\n* This routine is called by the subsystem interface if the function\n* id in the SSOB contains 10: the master subsystem notifies all\n* other subsystems of the issuance of an operator command.\n* The SSOB extension contains a pointer to the command input buffer.\n*\n         SAVE  (14,12),,VMCPSSCM-&SYSDATE-&SYSTIME-J.JAEGER\n         LR    R12,R15                 Set up our own program base\n         USING VMCPSSCM,R12            and make program relocatable\n*\n         LR    R11,R1                  Save pointer to the SSOB\n         USING SSOB,R11\n*\n         L     R10,SSOBINDV            Pointer to extension\n         USING SSCMBGN,R10\n*\n         L     R9,SSCMBUFF             Pointer to MGCR parm list\n         USING MGCRPL,R9\n*\n         CLI   MGCRLGTH,L'CPCMD+4      Is the command lenght valid\n         BNH   NOCPCMD\n         CLC   CPCMD,MGCRTEXT          Is this a CP command\n         BNE   NOCPCMD\n*\n         STORAGE OBTAIN,                                               X\n               LENGTH=CORELEN,                                         X\n               BNDRY=PAGE,                                             X\n               SP=239\n         LR    R8,R1                   Obtain work area & chain\n         LA    R1,2048(,R8)            save areas\n         LA    R1,2048(,R1)\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING CORE,R8,R13\n*\n         CMDAUTH ENTITY=CPPROF,        Profile name                    X\n               ATTR=READ,              ACCESS(READ)                    X\n               CNTLBLK=(10),           SSCM base                       X\n               CBLKTYPE=SSCM,                                          X\n               MF=(E,CMDAUTH)\n         LTR   R15,R15\n         BZ    AUTHOK\n         CH    R15,=H'4'               RACF could not determine\n         BP    CMDNOTEX                Higher means no access or worse\n*\n         TM    SSCMDISP,SSCMMC         Test for master console\n         BZ    CMDNOTEX                No master then do not execute\n*\nAUTHOK   DS    0H\n         IC    R6,MGCRLGTH             Copy CP command to buffer\n         SL    R6,=A(L'CPCMD+1+4)      Go to machine length\n         EX    R6,MGCRCPY              Copy command\n         LA    R6,1(,R6)               Back to real length\n*\n         ICM   R6,B'1110',=AL3(X'400000')  Request response\n         L     R7,=A(L'RESPBUFF)       Size of response buffer\n*\n         STNSM SYSMASK,255-IEMASK      Issue DIAGNOSE disabled\n         NI    SYSMASK,IEMASK          Save I & E bits only\n         LRA   R4,CMDBUFF              Real address of cmd buff\n         BC    CC1+CC2+CC3,SSCMLRAE\n         LRA   R5,RESPBUFF             Real address of resp buff\n         BC    CC1+CC2+CC3,SSCMLRAE\n         SLR   R2,R2                   Zero to indicate buff ok\n         DIAG  R4,R6,VCON              Call CP\n         BZ    BUFFOK\n         LA    R2,1                    Buffer overflow indicator\n         L     R7,=A(L'RESPBUFF)\nBUFFOK   DS    0H\n*\n         IC    R1,SYSMASK              Load I & E bits\n         EX    R1,STOSM                Enable External & I/O ints\n*\n* R5 contains number of bytes lost\n* R6 contains the return code from CP\n* R7 contains the number of bytes is the response buffer\n*\n         LTR   R2,R2                   Check buffer overflow\n         BNZ   BUFFOVF\n         MVC   WTOWORK(CP10Z),CP10I\n         WTO   CART=SSCMCART,          Issue command accepted msg      X\n               CONSID=SSCMCNID,                                        X\n               LINKAGE=BRANCH,                                         X\n               MF=(E,WTOWORK)\n         B     CLDONE\nBUFFOVF  DS    0H\n         MVC   WTOWORK(CP11Z),CP11I\n         WTO   CART=SSCMCART,          Issue buffer overflow msg       X\n               CONSID=SSCMCNID,                                        X\n               LINKAGE=BRANCH,                                         X\n               MF=(E,WTOWORK)\nCLDONE   DS    0H\n         ST    R1,WTOID                Store WTOID for MLWTO\n*\n         LA    R3,RESPBUFF             Virtual address of resp buff\n         LA    R7,0(R7,R3)             Add length of buffer\n         BCTR  R7,0                    Point to last character\nWTOLOOP  DS    0H\n         LR    R1,R7                   Load end-of-buff address\n         SLR   R1,R3                   Subtract start-of-buffer\n         CH    R1,=Y(WLEN-1)           Too long for one line?\n         BL    LLENOK                  If so,\n         LA    R1,WLEN-1                 then limit the length\nLLENOK   DS    0H\n         LA    R6,1(,R1)               Set R6 to real length\n         EX    R1,EOLTRT               Find end-of-line character\n         BZ    NOEOL\n         SLR   R1,R3                   If end-of-line character\n         LA    R6,1(,R1)                 then set R6 to line-length\n         BCTR  R1,0                      and set R1 to mach length\nNOEOL    DS    0H\n         LTR   R1,R1                   Ignore null lines\n         BM    SKIPLINE\n         MVC   WTOWORK,WTOBODY         Initialize WTO work area\n         EX    R1,LINECPY              Copy line\n         WTO   CONNECT=WTOID,          Write to operator               X\n               CART=SSCMCART,                                          X\n               LINKAGE=BRANCH,                                         X\n               MF=(E,WTOWORK)\nSKIPLINE DS    0H\n         BXLE  R3,R6,WTOLOOP           Loop thru resp buffer\n*\n         MVC   WTOWORK(CP12Z),CP12I\n         WTO   CONNECT=WTOID,          Terminate MLWTO                 X\n               CART=SSCMCART,                                          X\n               LINKAGE=BRANCH,                                         X\n               MF=(E,WTOWORK)\n*\n* Set returncode indicating command was executed.\n*\nCMDCMPLT DS    0H\n         LA    R15,SSCMSUBC            Indicate subsystem processed cmd\n         B     EXIT                    Return to caller\n*\n* LRA error\n*\nSSCMLRAE DS    0H\n         IC    R1,SYSMASK              Load I & E bits\n         EX    R1,STOSM                Enable External & I/O ints\n         SDUMP HDR='VMCP LRA ERROR DURING COMMAND PROCESSING'\n         B     SSCMNEXE\n*\n* Set returncode indicating command was not executed\n*\nCMDNOTEX DS    0H\n         MVC   WTOWORK(CP13Z),CP13I\n         WTO   CART=SSCMCART,          Issue no auth message           X\n               CONSID=SSCMCNID,                                        X\n               LINKAGE=BRANCH,                                         X\n               MF=(E,WTOWORK)\nSSCMNEXE DS    0H\n         LA    R15,SSCMIMSG            Indicate error\n         B     EXIT                    Return to caller\n*\n* Set returncode indicating command not CP command (let SVC34\n* handle it).\n*\nNOCPCMD  DS    0H\n         LA    R15,SSCMSCMD            Give command back to SVC34\n         ST    R15,SSOBRETN            Save in SSOB\n         B     RETURN                  Return to SSI caller\n*\n* Store the returncode in the SSOB returncode field and exit.\n*\nEXIT     DS    0H\n         ST    R15,SSOBRETN            Put returncode in SSOB\n*\nOPEXIT   DS    0H\n         L     R13,4(,R13)             Recall R13 from savearea\n         STORAGE RELEASE,                                              X\n               LENGTH=CORELEN,                                         X\n               SP=239,                                                 X\n               ADDR=(8)\nRETURN   DS    0H\n         RETURN (14,12),RC=0           Recall registers & return\n*\nMGCRCPY  MVC   CMDBUFF(0),MGCRTEXT+L'CPCMD\nEOLTRT   TRT   0(0,R3),EOLTAB\nLINECPY  MVC   WTOWORK+4(0),0(R3)\nSTOSM    STOSM SYSMASK,0\n*\nCPPROF   DC    CL39'MVS.CP'            SAF profile name\nCPPREF   EQU   CPPROF,4,C'C'           SAF PREFIX\nCPCMD    EQU   CPPROF+4,3,C'C'         CP command\n*\nCP10I    WTO   ('VMCP10I CP command accepted',C),                      X\n               MCSFLAG=RESP,DESC=(4,5),CART=,CONSID=,LINKAGE=,MF=L\nCP10Z    EQU   *-CP10I\n*\nCP11I    WTO   ('VMCP11I CP response buffer overflow',C),              X\n               MCSFLAG=RESP,DESC=(4,5),CART=,CONSID=,LINKAGE=,MF=L\nCP11Z    EQU   *-CP11I\n*\nCP12I    WTO   ('VMCP12I All data displayed',E),                       X\n               CONNECT=,CART=,LINKAGE=,MF=L\nCP12Z    EQU   *-CP12I\n*\nCP13I    WTO   'VMCP13I Insufficient authority',                       X\n               MCSFLAG=RESP,DESC=(4,5),CART=,CONSID=,LINKAGE=,MF=L\nCP13Z    EQU   *-CP13I\n*\nWTOBODY  WTO   ('                                                      X\n                                ',D),                                  X\n               CONNECT=,CART=,LINKAGE=,MF=L\nWTOLEN   EQU   *-WTOBODY\n*\nEOLTAB   DC    256X'00'                Translate table to find EOL\n         ORG   EOLTAB+X'15'              character\n         DC    X'15'\n         ORG   ,\n*\n         LTORG ,\n*\nVCON     EQU   8                       Virtual Console Function code\nWLEN     EQU   71                      Max linelength for WTO\n*\nCORE     DSECT ,\nRESPBUFF DS    CL4096\nSAVEAREA DS    18F                     Savearea MUST be at loc. 4096\nCMDBUFF  DS    CL140\nWTOID    DS    1F\nWTOWORK  DS    XL(WTOLEN)\nSYSMASK  DS    X\nIEMASK   EQU   3\n         CMDAUTH MF=(L,CMDAUTH,NODSECT)\nCORELEN  EQU   *-CORE\n*\n         YREGS ,\nCC0      EQU   B'1000'\nCC1      EQU   B'0100'\nCC2      EQU   B'0010'\nCC3      EQU   B'0001'\n         IEZMGCR ,\n         IEFJSSOB CM\n*\n         END   VMCPSSCM,(JAN JAEGER,0101,91213)\n++JCLIN .                                                               NONUMBER\n//LINKSSIN JOB ,                                                        NONUMBER\n//VMCPSSIN EXEC PGM=IEWL,                                               NONUMBER\n//          PARM='LIST,XREF,NCAL,REFR'                                  NONUMBER\n//SYSLMOD  DD  DSN=LINKLIB                                              NONUMBER\n//SYSLIN   DD  *                                                        NONUMBER\n  INCLUDE SYSLIB(VMCPSSIN)                                              NONUMBER\n  ENTRY VMCPSSIN                                                        NONUMBER\n  NAME VMCPSSIN(R)                                                      NONUMBER\n//LINKSSSM EXEC PGM=IEWL,                                               NONUMBER\n//          PARM='LIST,XREF,NCAL,REFR,OL'                               NONUMBER\n//SYSLMOD  DD  DSN=LINKLIB                                              NONUMBER\n//SYSLIN   DD  *                                                        NONUMBER\n  INCLUDE SYSLIB(VMCPJSVT)                                              NONUMBER\n  INCLUDE SYSLIB(VMCPSSCM)                                              NONUMBER\n  ORDER VMCPJSVT,VMCPSSCM                                               NONUMBER\n  ENTRY VMCPSSVT                                                        NONUMBER\n  NAME VMCPSSSM(R)                                                      NONUMBER\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "VMCP$": {"ttr": 3340, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x994\\x8f\\x00\\x994\\x8f\\x12\\x00\\x00\\x1f\\x00\\x1f\\x00\\x00\\xd1\\xd1\\xc1\\xc5\\xc7\\xc5\\xd9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-12-14T00:00:00", "modifydate": "1999-12-14T12:00:00", "lines": 31, "newlines": 31, "modlines": 0, "user": "JJAEGER"}, "text": "VMCP\n\nFunction\n\nThis subsystem will add a CP command to MVS in order to issue VM\ncommands thru SVC34.\n\n\nDefining VMCP to the system\n\nThe subsystem needs to be defined as following:\n\nSYS1.PARMLIB(IEFSSNxx):\n\nVMCP,VMCPSSIN,'CP Q STOR   (or any other command)'\n\nUsing VMCP\n\nSimply use CP as a MVS command either from an operator console, SDSF,\nnetview or any other means to issue standard MVS operator commands.\n\nInstallation requirements\n\nVMCP needs to be installed in a linklist or lpalist library.\n\nDOWNLOAD\n\nSourcecode is distributed in distribution file vmcp.zip\n\n\n\u001a\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "WHOHAS": {"ttr": 3585, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x994\\x8f\\x00\\x994\\x8f\\x12\\x00\\x01\\xc5\\x01\\xc5\\x00\\x00\\xd1\\xd1\\xc1\\xc5\\xc7\\xc5\\xd9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-12-14T00:00:00", "modifydate": "1999-12-14T12:00:00", "lines": 453, "newlines": 453, "modlines": 0, "user": "JJAEGER"}, "text": "./ ADD NAME=$ASM        01 00 99316 99316 131734 0014 0014 0000 IBMUSER\n//IBMUSERA JOB GQSCAN,'JAN JAEGER',NOTIFY=IBMUSER,CLASS=D,MSGCLASS=T\n//ASMA90   EXEC PGM=ASMA90,PARM='DECK,NOOBJ,XREF(SHORT)'\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.MODGEN,DISP=SHR\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,10)\n//SYSPUNCH DD  DSN=&&PUNCH,DISP=(NEW,PASS),\n//          UNIT=SYSALLDA,SPACE=(CYL,10)\n//SYSIN    DD  DSN=IBMUSER.SOURCE(JJ$LWA),DISP=SHR\n//IEWL     EXEC PGM=IEWL\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,10)\n//SYSLMOD  DD  DSN=IBMUSER.LOAD(JJ$LWA),DISP=SHR\n//SYSLIN   DD  DSN=&&PUNCH,DISP=(OLD,DELETE)\n./ ADD NAME=JJ$LWA      01 00 99228 99316 131628 0423 0373 0000 IBMUSER\nJJ$LWA   CSECT\n*                                                                920428\n* Change History                                                 920428\n* ==============                                                 920428\n* 89.12.12     Jan Jaeger     Initial version of this program.   920428\n* 92.04.28     Bob Hill       Display dummy entries for missing  920428\n*                             RIBEs, and increase QSCNAREA size  920428\n*                             from 1K to approx 63K to minimise  920428\n*                             missing RIBEs as per APAR OY34580  920428\n*                                                                920428\n         SAVE  (14,12),,JJ$LWA-&SYSDATE-&SYSTIME-J.JAEGER\n         LR    R12,R15\n         USING JJ$LWA,R12\n*\n         LR    R2,R1                   Save PARM addr\n*\n         GETMAIN RU,LV=CORESIZE        Get storage\n         LR    R11,R1                  Save corebase\n         USING CORE,R11                Make core addressable\n*\n         LA    R15,SAVEAREA            Savearea addr in R15\n         ST    R13,4(,R15)             Store R13 in savearea+4\n         ST    R15,8(,R13)             Store R15 in old S.A.+8\n         LR    R13,R15                 Load new savearea in R13\n*\n*    *** Start of main program ***\n*\n         LOAD  EP=ISPLINK\n         ST    R0,AISPLINK\n*\n*    *** Get Resourcename\n*\n         L     R15,AISPLINK\n         CALL  (15),(CONTROL,ERRORS,RETURN),VL,MF=(E,PL)\n         LTR   R10,R15\n         BNZ   EXIT\n*\n         MVC   TABLENM,TABLEID\n         ST    R11,TABLEIDX            Make tablename unique\n*\n         L     R15,AISPLINK\n         CALL  (15),(VDEFINE,ISN,CISN,CHAR,F8),VL,MF=(E,PL)\n         L     R15,AISPLINK\n         CALL  (15),(VDEFINE,IJN,CIJN,CHAR,F8),VL,MF=(E,PL)\n         L     R15,AISPLINK\n         CALL  (15),(VDEFINE,ISC,CISC,CHAR,F6),VL,MF=(E,PL)\n         L     R15,AISPLINK\n         CALL  (15),(VDEFINE,IS1,CIS1,CHAR,F4),VL,MF=(E,PL)\n         L     R15,AISPLINK\n         CALL  (15),(VDEFINE,IS2,CIS2,CHAR,F4),VL,MF=(E,PL)\n         L     R15,AISPLINK\n         CALL  (15),(VDEFINE,IQN,CIQN,CHAR,F8),VL,MF=(E,PL)\n         L     R15,AISPLINK\n         CALL  (15),(VDEFINE,IRN,CIRN,CHAR,F54),VL,MF=(E,PL)\n*\n         L     R15,AISPLINK\n         CALL  (15),(VDEFINE,SYSNAME,CSYSNAME,CHAR,F8),VL,MF=(E,PL)\n         L     R15,AISPLINK\n         CALL  (15),(VDEFINE,JOBNAME,CJOBNAME,CHAR,F8),VL,MF=(E,PL)\n         L     R15,AISPLINK\n         CALL  (15),(VDEFINE,SCOPE,CSCOPE,CHAR,F6),VL,MF=(E,PL)\n         L     R15,AISPLINK\n         CALL  (15),(VDEFINE,STAT1,CSTAT1,CHAR,F4),VL,MF=(E,PL)\n         L     R15,AISPLINK\n         CALL  (15),(VDEFINE,STAT2,CSTAT2,CHAR,F4),VL,MF=(E,PL)\n         L     R15,AISPLINK\n         CALL  (15),(VDEFINE,QNAME,CQNAME,CHAR,F8),VL,MF=(E,PL)\n         L     R15,AISPLINK\n         CALL  (15),(VDEFINE,RNAME,CRNAME,CHAR,F54),VL,MF=(E,PL)\n*\n         MVC   CISN,=CL8'*'\n         MVC   CIJN,=CL8'*'\n         MVC   CISC,=CL6'*'\n         MVC   CIS1,=CL4'*'\n         MVC   CIS2,=CL4'*'\n         MVC   CIQN,=CL8'*'\n         MVI   CIRN,C' '\n         MVC   CIRN+1(L'CIRN-1),CIRN\n         LTR   R2,R2\n         BZ    DEFAULT\n         L     R2,0(R2)\n         ICM   R3,B'0011',0(R2)\n         BZ    DEFAULT\n         LA    R4,2(R2)\n         BCTR  R3,0\n         EX    R3,RNCOPY\n         B     CREATETB\nDEFAULT  EQU   *\n         L     R15,PSAAOLD-PSA\n         L     R15,ASCBJBNS-ASCB(,R15)\n         MVC   CIRN(8),0(R15)\n         LA    R1,CIRN+L'CIRN\n         TRT   CIRN,TRTBLANK\n         MVC   0(2,R1),=C'.*'\n         MVC   MESSAGE,BLANKS\nCREATETB EQU   *\n         LA    R1,CIRN+L'CIRN\n         TRT   CIRN,TRTASTER\n         LA    R2,CIRN\n         SLR   R1,R2\n         STC   R1,GQSLEN\n*\n         LA    R1,CIJN+L'CIJN\n         TRT   CIJN,TRTASTER\n         LA    R2,CIJN\n         SLR   R1,R2\n         STC   R1,CIJNL\n*\n         LA    R1,CIQN+L'CIQN\n         TRT   CIQN,TRTASTER\n         LA    R2,CIQN\n         SLR   R1,R2\n         STC   R1,CIQNL\n*\n         L     R15,AISPLINK\n         CALL  (15),(TBCREATE,TABLENM,0,VARLIST,NOWRITE),VL,MF=(E,PL)\n         L     R15,AISPLINK\n         CALL  (15),(TBVCLEAR,TABLENM),VL,MF=(E,PL)\n*\n* *** GQSCAN LOOP\n*\n         XC    QSCNTKN,QSCNTKN         Zero token\n         MVC   GQSRNAME,CIRN\nLOOP     EQU   *\n         MVC   LGQSCAN(EGQSCANL),EGQSCAN\n         LA    R9,QSCNAREA\n         LA    R8,QSCNTKN\n         LA    R2,CIQN                 Point to QName\n         LA    R3,GQSRNAME             Point to RName\n         IC    R4,GQSLEN               Set RName length\n         IC    R5,CIQNL\n         GQSCAN AREA=((9),QSCNLEN),    Area for RIB and RIBE           X\n               SCOPE=ALL,              No matter what system           X\n               TOKEN=(8),              Token to proceed scanning       X\n               RESNAME=((2),(3),(4),GENERIC,(5)),                      X\n               MF=(E,LGQSCAN)\n         LTR   R4,R1                   Save number of RIBs returned\n         BZ    LOOPEND\n         LTR   R3,R15                  Save returncode in R3\n         BZ    RCOK\n         CH    R3,=H'4'                No more users\n         BE    RCOK\n         CH    R3,=H'8'                More to come\n         BNE   LOOPEND\n*\nRCOK     EQU   *\n         USING RIB,R9\n         LH    R6,RIBVLEN\n         LA    R6,RIBEND-RIB(R6,R9)\n         USING RIBE,R6\n         LA    R5,RIBEND-RIB(R9)       RIBVAR\n         USING RIBVAR,R5\n         ICM   R7,B'1111',RIBNRIBE     Any RIBEs after this RIB? 920428\n         BZ    ENDRIBES                No - end of RIB's RIBEs   920428\n*\nRIBELOOP EQU   *\n         TM    RIBSCOPE,RIBSTEP\n         BO    SKIPRIBE                                          920428\n*\n         ICM   R15,B'0001',CIJNL\n         BZ    NOJN\n         BCTR  R15,0\n         EX    R15,CLCIJN\n         BNE   SKIPRIBE                                          920428\nNOJN     EQU   *\n*\n         MVC   CQNAME,RIBQNAME\n         MVI   CRNAME,C' '\n         MVC   CRNAME+1(L'CRNAME-1),CRNAME\n         IC    R15,RIBRNMLN\n         BCTR  R15,0\n         EX    R15,MVCRNAME\n*\n         CLI   CISN,C'*'\n         BE    ALLSYSN\n         CLC   CISN,RIBESYSN\n         BNE   SKIPRIBE                                          920428\nALLSYSN  EQU   *\n*\n         MVC   CSYSNAME,RIBESYSN\n         MVC   CJOBNAME,RIBEJBNM\n*\n         MVC   CSCOPE,=CL6'Local'\n         TM    RIBSCOPE,RIBGLBL\n         BZ    ISLOCAL\n         MVC   CSCOPE,=CL6'Global'\nISLOCAL  EQU   *\n*\n         MVC   CSTAT1,=CL4'Excl'\n         TM    RIBERFLG,RIBETYPE\n         BZ    ISEXCL\n         MVC   CSTAT1,=CL4'Shr'\nISEXCL   EQU   *\n*\n         MVC   CSTAT2,=CL4'Wait'\n         TM    RIBESFLG,RIBESTAT\n         BZ    ISWAIT\n         MVC   CSTAT2,=CL4'Own'\nISWAIT   EQU   *\n*\n         CLI   CISC,C'*'               Both Local and Global?\n         BE    NOSC\n         CLC   CISC(1),CSCOPE\n         BNE   SKIPRIBE                                          920428\nNOSC     EQU   *\n*\n         CLI   CIS1,C'*'               Both Shr and Excl?\n         BE    NOS1\n         CLC   CIS1(1),CSTAT1\n         BNE   SKIPRIBE                                          920428\nNOS1     EQU   *\n*\n         CLI   CIS2,C'*'               Both Own and Wait?\n         BE    NOS2\n         CLC   CIS2(1),CSTAT2\n         BNE   SKIPRIBE                                          920428\nNOS2     EQU   *\n*\n         CLC   RIBQNAME,=CL8'SPFEDIT'\n         BNE   NOFORMAT\n         CLI   RIBRNMLN,52\n         BNE   NOFORMAT\n         CLI   RIBRNAME+44,C' '\n         BE    NOFORMAT\n         MVC   CRNAME+44(8),BLANKS\n         LA    R1,CRNAME+44\n         TRT   CRNAME(44),TRTBLANK\n         MVI   0(R1),C'('\n         MVC   1(8,R1),RIBRNAME+44\n         LA    R1,CRNAME+44\n         TRT   CRNAME(44),TRTBLANK\n         MVI   0(R1),C')'\nNOFORMAT EQU   *\n*\n         L     R15,AISPLINK\n         CALL  (15),(TBADD,TABLENM),VL,MF=(E,PL)\n         LTR   R10,R15\n         BNZ   EXIT\n*\nSKIPRIBE EQU   *                                                 920428\n         LA    R6,RIBEEND-RIBE(R6)     Point to next RIBE        920428\n         BCT   R7,RIBELOOP\nENDRIBES EQU   *                       End of RIB's RIBEs        920428\n         CLC   RIBTRIBE,RIBNRIBE       Got all RIBEs? (OY34580)  920428\n         BE    NEXTRIB                 Yes - go to next RIB      920428\n*              If RIBTRIBE is not equal to RIBNRIBE, we have     920428\n*              lost some RIBEs for this RIB (see APAR OY34580),  920428\n*              so now we build an dummy table entry containing   920428\n*              question marks to indicate incomplete data.       920428\n         TM    RIBSCOPE,RIBSTEP        Internal ENQ?             920428\n         BO    NEXTRIB                 Yes - skip dummy entry    920428\n         MVC   CQNAME,RIBQNAME         Qname from RIB            920428\n         MVI   CRNAME,C' '                                       920428\n         MVC   CRNAME+1(L'CRNAME-1),CRNAME                       920428\n         IC    R15,RIBRNMLN                                      920428\n         BCTR  R15,0                                             920428\n         EX    R15,MVCRNAME            Rname from RIB            920428\n         MVC   CSYSNAME,=8C'?'         System name unknown       920428\n         MVC   CJOBNAME,=8C'?'         Job name unknown          920428\n         MVC   CSCOPE,=CL6'Local'                                920428\n         TM    RIBSCOPE,RIBGLBL                                  920428\n         BZ    *+10                                              920428\n         MVC   CSCOPE,=CL6'Global'     Scope from RIB            920428\n         MVC   CSTAT1,=8C'?'           Status-1 unknown          920428\n         MVC   CSTAT2,=8C'?'           Status-2 unknown          920428\n         CLC   RIBQNAME,=CL8'SPFEDIT'  Re-format SPFEDIT ENQs    920428\n         BNE   DUMMYADD                                          920428\n         CLI   RIBRNMLN,52                                       920428\n         BNE   DUMMYADD                                          920428\n         CLI   RIBRNAME+44,C' '                                  920428\n         BE    DUMMYADD                                          920428\n         MVC   CRNAME+44(8),BLANKS                               920428\n         LA    R1,CRNAME+44                                      920428\n         TRT   CRNAME(44),TRTBLANK                               920428\n         MVI   0(R1),C'('                                        920428\n         MVC   1(8,R1),RIBRNAME+44                               920428\n         LA    R1,CRNAME+44                                      920428\n         TRT   CRNAME(44),TRTBLANK                               920428\n         MVI   0(R1),C')'                                        920428\nDUMMYADD L     R15,AISPLINK                                      920428\n         CALL  (15),(TBADD,TABLENM),VL,MF=(E,PL)                 920428\n         LTR   R10,R15                                           920428\n         BNZ   EXIT                                              920428\n*\nNEXTRIB  LR    R9,R6                   Next RIB starts here      920428\n         BCT   R4,RCOK\n*\nNORIBE   EQU   *\n         CH    R3,=H'8'\n         BE    LOOP\n*\nLOOPEND  EQU   *\n*\n* *** GQSCAN END\n*\n         L     R15,AISPLINK\n         CALL  (15),(TBTOP,TABLENM),VL,MF=(E,PL)\n         L     R15,AISPLINK\n         CALL  (15),(TBDISPL,TABLENM,DISPNL,MESSAGE),VL,MF=(E,PL)\n         LR    R10,R15\n         L     R15,AISPLINK\n         CALL  (15),(TBEND,TABLENM),VL,MF=(E,PL)\n         C     R10,F8                  Was 'END' pressed?\n         BNE   CREATETB\n*\nEXIT     EQU   *\n         DELETE EP=ISPLINK\n         L     R13,4(,R13)             Recall R13 from savearea\n         FREEMAIN RU,LV=CORESIZE,A=(11) Free core again\n         LR    R15,R10\n         RETURN (14,12),RC=(15)        Recall registers & return\n*\nMVCRNAME MVC   CRNAME(0),RIBRNAME\nRNCOPY   OC    CIRN(0),0(R4)\nCLCIJN   CLC   CIJN(0),RIBEJBNM\n*\nCHAR     DC    CL8'CHAR'\nCONTROL  DC    CL8'CONTROL'\nDISPLAY  DC    CL8'DISPLAY'\nERRORS   DC    CL8'ERRORS'\nFIXED    DC    CL8'FIXED'\nHEX      DC    CL8'HEX'\nNEXT     DC    CL8'NEXT'\nNOWRITE  DC    CL8'NOWRITE'\nORDER    DC    CL8'ORDER'\nRETURN   DC    CL8'RETURN'\nTBADD    DC    CL8'TBADD'\nTBCREATE DC    CL8'TBCREATE'\nTBVCLEAR DC    CL8'TBVCLEAR'\nTBDISPL  DC    CL8'TBDISPL'\nTBEND    DC    CL8'TBEND'\nTBGET    DC    CL8'TBGET'\nTBPUT    DC    CL8'TBPUT'\nTBSARG   DC    CL8'TBSARG'\nTBSCAN   DC    CL8'TBSCAN'\nTBSORT   DC    CL8'TBSORT'\nTBTOP    DC    CL8'TBTOP'\nVDEFINE  DC    CL8'VDEFINE'\nBLANKS   DC    CL8' '\n*\nTABLEID  DC    CL8'JJ$TXXXX'\n*\nDISPNL   DC    CL8'JJ$PWA'\n*\nSYSNAME  DC    CL8'SYSNAME'\nJOBNAME  DC    CL8'JOBNAME'\nSCOPE    DC    CL8'SCOPE'\nSTAT1    DC    CL8'STAT1'\nSTAT2    DC    CL8'STAT2'\nQNAME    DC    CL8'QNAME'\nRNAME    DC    CL8'RNAME'\n*\nISN      DC    CL8'ISN'\nIJN      DC    CL8'IJN'\nISC      DC    CL8'ISC'\nIS1      DC    CL8'IS1'\nIS2      DC    CL8'IS2'\nIQN      DC    CL8'IQN'\nIRN      DC    CL8'IRN'\n*\nVARLIST  DC    C'(SYSNAME JOBNAME SCOPE STAT1 STAT2 QNAME RNAME)'\n*\nF4       DC    F'4'\nF6       DC    F'6'\nF8       DC    F'8'\nF44      DC    F'44'\nF54      DC    F'54'\n*\nEGQSCAN  GQSCAN MF=L\nEGQSCANL EQU   *-EGQSCAN\n*\nTRTBLANK DC    XL256'00'\n         ORG   TRTBLANK+X'00'\n         DC    C' '\n         ORG   TRTBLANK+C' '\n         DC    C' '\n         ORG\n*\nTRTASTER DC    XL256'00'\n         ORG   TRTASTER+C'*'\n         DC    C'*'\n         ORG\n*\n         LTORG\n*\n         YREGS\n*\nCORE     DSECT\nSAVEAREA DS    18F                     Save area\nTABLENM  DS    CL8\nTABLEIDX EQU   TABLENM+4,1,C'F'\nCIJN     DS    CL8\nCIJNL    DS    1X\nCISN     DS    CL8\nCISC     DS    CL6\nCIS1     DS    CL4\nCIS2     DS    CL4\nCIQN     DS    CL8\nCIQNL    DS    1X\nCIRN     DS    CL44\nCJOBNAME DS    CL8\nCSYSNAME DS    CL8\nCSCOPE   DS    CL6                     LOCAL GLOBAL\nCSTAT1   DS    CL4                     EXCL SHR\nCSTAT2   DS    CL4                     OWN WAIT\nCQNAME   DS    CL8\nCRNAME   DS    CL256\nGQSRNAME DS    CL44                    Datasetname for GQSCAN\nAISPLINK DS    1F\nGQSLEN   DS    1X\nPL       DS    20F\nMESSAGE  DS    CL8                     Name of table\nLGQSCAN  GQSCAN MF=L\nQSCNTKN  DS    1F\nQSCNAREA DS    CL(QSCNLEN)             QSCAN area                920428\nQSCNLEN  EQU   CORE+CORESIZE-QSCNAREA  QSCAN area length         920428\nCORESIZE EQU   16*4096                 Getmain exactly 16 pages  920428\n*\n         ISGRIB\n         IHAPSA\n         IHAASCB\n*\n         END\n./ ADD NAME=JJ$PWA      01 01 99228 99228 101409 0014 0014 0000 IBMUSER\n)ATTR\n  @ TYPE(OUTPUT) INTENS(LOW)\n  # TYPE(INPUT) INTENS(HIGH)\n)BODY\n%------------------------------ GQSCAN -----------------------------------------\n%Command ===>_ZCMD                                            %Scroll ===>_ZCSR%\n%Sysname  Jobname  Scope  Type Stat  Qname    Rname\n#ISN     #IJN     #ISC   #IS1 #IS2  #IQN     #IRN\n)MODEL\n@Z       @Z       @Z     @Z   @Z    @Z       @Z\n)INIT\n  .ZVARS = '(SYSNAME JOBNAME SCOPE STAT1 STAT2 QNAME RNAME)'\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "WHOHAS$": {"ttr": 3593, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x994\\x8f\\x00\\x994\\x8f\\x12\\x00\\x00\\x1f\\x00\\x1f\\x00\\x00\\xd1\\xd1\\xc1\\xc5\\xc7\\xc5\\xd9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-12-14T00:00:00", "modifydate": "1999-12-14T12:00:00", "lines": 31, "newlines": 31, "modlines": 0, "user": "JJAEGER"}, "text": "WHOHAS\n\nFunction\n\nThis program will retrieve all outstanding GRS ENQ's and return them in\nan ISPF table. It is possible to limit the amount of displayed rows by\nmeans of wildcards in the various columns.\n\n\nUsing WHOHAS\n\nCALL *(JJ$LWA)\n\nor create an ISPF command table entry with PGM(JJ$LWA)\n\n\nInstallation requirements\n\nJJ$LWA needs to be installed in ISPLLIB or LINKLST library, if it is\ninstalled in any other library then in must be called specifically (ie.\nCALL 'IBMUSER.LOAD(JJ$LWA)')\n\nJJ$PWA must be installed in an ISPPLIB library.\n\n\nDOWNLOAD\n\nSourcecode is distributed in distribution file whohas.zip\n\n\n\u001a\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ZZSA$": {"ttr": 3595, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x994\\x8f\\x00\\x994\\x8f\\x12\\x00\\x04e\\x04e\\x00\\x00\\xd1\\xd1\\xc1\\xc5\\xc7\\xc5\\xd9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-12-14T00:00:00", "modifydate": "1999-12-14T12:00:00", "lines": 1125, "newlines": 1125, "modlines": 0, "user": "JJAEGER"}, "text": "Standalone Utilities\n\nAbstract\n\nThis stand alone program will allow you to display and edit data on dasd\nin a stand-alone environment when there is no MVS system available. This\nprogram was written to diagnose IPL device configuration problems, and\nto overcome the problem of having to re-ipl an entire MVS system in\norder to correct a minor IPLPARM, PARMLIB, PROCLIB or VTAMLST error. It\nis by no means a recommended procedure to make configuration changes,\nbut it can save valuable time making these types of corrections.\n\nJan Jaeger\n\n\nIntroduction\n\nThis stand alone utility supports the following functions:\n\n     Sense and list all devices in the IOCDS or assigned to the logical\n     partition IPL-ed with this program\n     Browse MVS sequential dataset or PDS member\n     Edit MVS sequential dataset or PDS member (inplace update only)\n     List VTOC of a DASD volume\n     List PDS directory\n     Display DASD volume serial\n     Dump any DASD record\n     Alter any DASD record\n\nThe utility is password protected, this has a twofold purpose:\n\n   1.Protection against unauthorised use\n   2.Assignment of terminal from which the utility can be used\n\nWhen the program is terminated, it can only be restarted by an IPL.\n\n\nInstallation\n\nThe distribution file ZZSA.ZIP contains the following files:\n\n   1.ZZSADIMG.BIN\n   2.ZZSATIMG.BIN\n   3.ZZSACARD.BIN\n\nAll files must be uploaded to MVS as F(B) 80 sequential datasets,\nZZSATIMG and ZZSADIMG are both in netdata format, and must be\nunloaded to unblocked datasets with the following TSO command:\n\nRECEIVE INDATASET(ZZSADIMG)\n\nand\n\nRECEIVE INDATASET(ZZSATIMG)\n\nThere are now 3 different types of image of this program:\n\n   1.ZZSADASD - ICKDSF ABS format IPL text (RECFM=U)\n   2.ZZSATAPE - Tape IPL text (RECFM=U)\n   3.ZZSACARD - Card image (RECFM=F, LRECL=80)\n\nAll 3 different versions are exactly the same, other then the initial\nIPL CCW chain to load the entire image. The card image has been added to\nsupport the virtual reader on VM as an IPL device in order to create a\nnamed saved system, and is also supported on real readers for those who\nlike to IPL a deck of cards.\n\nWrite IPL text to DASD\n\nIPLtext can be written to DASD using the folling JCL:\n\n//JJAEGERD JOB ,ZZ,CLASS=A,MSGCLASS=X,MSGLEVEL=(1,1),\n//          NOTIFY=JJAEGER\n//WRITETXT EXEC PGM=ICKDSF,PARM=NOREPLYU\n//SYSPRINT DD  SYSOUT=*\n//SAUTILDD DD  DSN=JJAEGER.ZZSADASD,DISP=SHR\n//SYSIN    DD  *\n REFORMAT UNIT(cua) VERIFY(volser) IPLDD(SAUTILDD,ABS)\n/*\n\nWrite IPL text to TAPE\n\nIPL text can be written to TAPE using the following JCL:\n\n//JJAEGERT JOB ,ZZ,CLASS=A,MSGCLASS=X,MSGLEVEL=(1,1),\n//          NOTIFY=JJAEGER\n//WRITETXT EXEC PGM=IEBGENER\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  DUMMY\n//SYSUT1   DD  DSN=JJAEGER.ZZSATAPE,DISP=SHR\n//SYSUT2   DD  DSN=JJAEGER.TAPE,DISP=(NEW,KEEP),\n//          UNIT=TAPE,VOL=SER=SAEDIT,LABEL=(1,BLP,EXPDT=98000)\n\nThe default password is ZZSECRET, which is defined as CL8, and can be\nchanged using AMASPZAP, or for DASD IPL text this utility can be used to\nalter the password using the zap option. The password is always\nlogically OR-ed with blanks before being compared with the stored value,\nso only uppercase passwords are supported. The password is contained in\nthe last eight bytes of record CCHHR 0000000006 when the utility is\ninstalled on DASD.\n\nCreating a Named Saved System (NSS) under VM\n\nUpload ZZSACARD.BIN to VM as IPL ZZSA A (recfm f, lrecl 80), and\nissue the following commands:\n\nSP PUN TO * RDR\nPUN IPL ZZSA A (NOH\nORDER RDR fileno\nIPL rdrdev CLEAR STOP\nST B8 0\n\nST 220 40404040 40404040\nST U220 password\n\nDEFSYS ZZSA 0-7 EW MACHMODE XA,ESA PARMREGS=NONE MINSIZE=1M \u00ddRSTD\u00a8\nSAVESYS ZZSA\n\nTERM CONMODE 3270\nIPL ZZSA\n\n\n\nOperation\n\nIPL\n\nIn order to initialise the program perform the following tasks:\n\n   1.Load (IPL) the system from the device that contains the ZZSA IPL\n     text\n   2.Generate an attention interrupt on the local non-SNA 3270 device\n     that will used (eg. hit enter, attention, PA or PF-key)\n   3.Enter the password on the initial screen displayed\n   4.The primary option menu will now be displayed\n\n\n ZZSAPSWD              Stand Alone Utilities\n\n\n\n\n\n\n\n\n                         Enter Password:\n\n\n                         ===> ________\n\n\n\n\n\n\n\n\n\n                                             Jan Jaeger - Version 12/29/90-15.44\n\n\n\nPrimary Option Menu\n\nMenu options can be selected by either:\n\n   1.Enter the action character on the command line (ie. '0')\n   2.Enter the option name on the command line (ie. 'listdev')\n   3.Position the cursor on the selected option and hit enter\n\n\n ZZSAPRIM                   Stand Alone Utilities\n\n Option ===> _\n\n\n     0 ListDev  - List all devices\n\n     1 Browse   - Browse dataset or member                Console     0040/3274\n\n     2 Edit     - Edit dataset or member                  IPL Device  0503/3390\n\n     3 ListVTOC - List Volume Table Of Contents           IPL CPU     0001\n\n     4 ListPDS  - List PDS directory                      CPU Version FF\n\n     5 DispVol  - Display DASD volume label               CPU Serial  123456\n\n     6 Dump     - Dump DASD record by CCHHR               CPU Model   3090\n\n     7 Zap      - Alter DASD record by CCHHR              Date (TOD)  09/01/1991\n\n     X Exit     - Terminate program                       Time (TOD)  23:08:15\n\n                                             Jan Jaeger - Version 12/29/90-15.44\n\n\n\nDevice list\n\nThis option lists valid subchannels and their properties\n SCH\n       Subchannel number\n DEV\n       Device name\n CHP\n       Channel path ID list\n C/T\n       Controller type and model code\n\n       (from SENSE ID)\n D/T\n       Device type and model code\n\n       (From SENSE ID)\n VOL\n       Volume Serial\n\n       (DASD devices only)\n VTOC\n       VTOC pointer in CCHHR format\n\n       (DASD devices only)\n\n\nInvalid or unassigned subchannels are not listed. Unassigned subchannel\nnumbers usually exist in an LPAR environment. These will show as gaps in the\nsubchannel number range.\n\nUsing this option will fully initialise the volume serial table so that\nthe volsers can be used in all other options rather then the device\naddress. All browse commands are valid while viewing the output.\n\n\n ZZSABROW Device List\n Command ===> _                                              Line 0000 Col 0001\n\n********************************* Top of Data **********************************\nSCH=0000 DEV=0009 CHP=F0                      C/T=3274-1D\nSCH=0001 DEV=0191 CHP=05 25 12 1A             C/T=3990-CC D/T=3390-06 VOL=CMS191\nSCH=0002 DEV=0923 CHP=09 19 11 29             C/T=3990-C2 D/T=3390-0A VOL=SYSWRK\nSCH=0003 DEV=0924 CHP=09 19 11 29             C/T=3990-C2 D/T=3390-0A VOL=SYSTST\nSCH=0004 DEV=0925 CHP=09 19 11 29             C/T=3990-C2 D/T=3390-0A VOL=SYSDLB\nSCH=0005 DEV=0926 CHP=09 19 11 29             C/T=3990-C2 D/T=3390-0A VOL=SYSACC\nSCH=0006 DEV=0927 CHP=09 19 11 29             C/T=3990-C2 D/T=3390-0A VOL=SYSMSC\nSCH=0007 DEV=0040 CHP=F0\nSCH=0008 DEV=0041 CHP=F0\nSCH=0009 DEV=0042 CHP=F0\nSCH=000A DEV=0043 CHP=F0\nSCH=000B DEV=0044 CHP=F0\nSCH=000C DEV=0045 CHP=F0\nSCH=000D DEV=0046 CHP=F0\nSCH=000E DEV=0047 CHP=F0\nSCH=000F DEV=0048 CHP=F0\nSCH=0010 DEV=0049 CHP=F0\nSCH=0011 DEV=004A CHP=F0\nSCH=0012 DEV=004B CHP=F0\nSCH=0013 DEV=004C CHP=F0\n           F3=End     F5=RFind         F7=Up F8=Down  F10=Left F11=Right\n\n\n ZZSABROW Device List\n Command ===> _                                              Line 0000 Col 0017\n********************************* Top of Data **********************************\n1 CHP=F0                      C/T=3274-1D\n1 CHP=05 25 12 1A             C/T=3990-CC D/T=3390-06 VOL=CMS191 VTOC=00\n3 CHP=09 19 11 29             C/T=3990-C2 D/T=3390-0A VOL=SYSWRK VTOC=04\n4 CHP=09 19 11 29             C/T=3990-C2 D/T=3390-0A VOL=SYSTST VTOC=04\n5 CHP=09 19 11 29             C/T=3990-C2 D/T=3390-0A VOL=SYSDLB VTOC=04\n6 CHP=09 19 11 29             C/T=3990-C2 D/T=3390-0A VOL=SYSACC VTOC=04\n7 CHP=09 19 11 29             C/T=3990-C2 D/T=3390-0A VOL=SYSMSC VTOC=04\n0 CHP=F0\n1 CHP=F0\n2 CHP=F0\n3 CHP=F0\n4 CHP=F0\n5 CHP=F0\n6 CHP=F0\n7 CHP=F0\n8 CHP=F0\n9 CHP=F0\nA CHP=F0\nB CHP=F0\nC CHP=F0\n           F3=End     F5=RFind         F7=Up F8=Down  F10=Left F11=Right\n\n\n ZZSABROW Device List\n Command ===> _                                              Line 0021 Col 0001\nSCH=0014 DEV=004D CHP=F0\nSCH=0015 DEV=004E CHP=F0\nSCH=0016 DEV=004F CHP=F0\nSCH=0017 DEV=000C CHP=F0\nSCH=0018 DEV=000D CHP=F0\nSCH=0019 DEV=000E CHP=F0\nSCH=001A DEV=0190 CHP=05 25 12 1A             C/T=3990-CC D/T=3390-06 VOL=MNT190\nSCH=001B DEV=019A CHP=05 25 12 1A             C/T=3990-CC D/T=3390-06 VOL=MNT19A\nSCH=001C DEV=019B CHP=05 25 12 1A             C/T=3990-CC D/T=3390-06 VOL=MNT19B\nSCH=001D DEV=019D CHP=05 25 12 1A             C/T=3990-CC D/T=3390-06 VOL=MNT19D\nSCH=001E DEV=019E CHP=05 25 12 1A             C/T=3990-CC D/T=3390-06 VOL=MNT19E\nSCH=001F DEV=019F CHP=05 25 12 1A             C/T=3990-CC D/T=3390-06 VOL=MNT19F\n******************************** Bottom of Data ********************************\n\n\n\n\n\n\n\n\n           F3=End     F5=RFind         F7=Up F8=Down  F10=Left F11=Right\n\n\n\nBrowse dataset or member\n\nEnter the fully qualified dataset name without quotes, and in case of a PDS\nenter the PDS member name.\n\nIf the volume has been referred to, or option 0 has been used to\ninitialise the volume serial table, then a volser can be entered rather\nthen a device address.\n\nIf the volume is being referred to for the first time since the IPL then\nthe device address must be given.\n\n\n ZZSABRDS Browse dataset or member\n Command ===>\n\n\n\n\n           Enter dataset name:\n           ===> _\n\n           Enter member name (PDS only):\n           ===>\n\n           and 4 digit DASD device number:\n           ===>\n\n\n           or DASD volume serial:\n           ===>\n\n\n\n\n           Note: The DASD volume must have been accessed previously\n                 in order to be able to specify the volume serial.\n                 If the device number is unknown use primary menu\n                 option 0 to read all DASD volume labels first.\n\n\n\nBrowse primary commands\n\nBrowse supports the following primary commands:\n\n     MAX , M\n     TOP, T\n     BOTTOM, BOT, B\n     UP, U\n     DOWN, D\n     FIND, F\n     RFIND, RF\n     LEFT, L\n     RIGHT, R\n     SORT\n     SAVE\n     FILE\n     END, CANCEL\n     EXIT\n\nMAX, M\n\nWill move max-right, max-left, top or bottem depending on the pf-key\npressed.\n\nTOP, T\n\nWill move to the top (line 1) of the file.\n\nBOTTOM, BOT, B\n\nWill move to the last line of the file.\n\nUP, U\n\nMoves one page backward. When the cursor is located in the output area, the\ncurrent line will become the last line in the output area.\n\nDOWN, D\n\nMoves one page forward. When the cursor is located in the output area, the\ncurrent line will become the first line in the output area.\n\nFIND, F\n\nFIND STRING will search for string in the file.\n\nRFIND, RF\n\nWill find the next occurrence of string in the file.\n\nLEFT, L\n\nMoves 80 columns to the left in the output file. When the cursor is located in\nthe output area, the current column will become the rightmost column in the\noutput area.\n\nRIGHT, R\n\nMoves 80 collumns to the right in the output file. When the cursor is located in\nthe output area, the current column will become the leftmost column in the\noutput area.\n\nSORT\n\nWill sort the file, when the cursor is located in the output area, the\nfile will be sorted on the cursor column.\n\nCANCEL, EXIT\n\nReturns to previous panel. Data will be discarded in edit mode, use SAVE\nor FILE to save data first.\n\n\n ZZSABROW Browse SYS1.PARMLIB(IEASYSS3)\n Command ===> _                                              Line 0000 Col 0001\n********************************* Top of Data **********************************\nALLOC=00,                      /* ALLOC00  ALLOCATION DEFAULTS MEMB. */\nCLOCK=00,                      /* CLOCK00  CLOCK MEMBER (NOPROMPT)   */\nCLPA,                          /*          CREATE PAG.LINK PACK AREA */\nCMB=(COMM,100),                /*          CHANNEL MEASUREMENT BLOCK */\nCMD=(S3),                      /* COMMNDS3    FIRST COMMANDS         */\nCON=S3,                        /* CONSOLS3 CONSOLE MEMBER            */\nCSA=(3584,16382),              /*          CSA/ECSA RANGE IN KBYTES  */\nDIAG=00,                       /* DIAG00   COMMON/GETM.FREEM.STOR    */\nDEVSUP=00,                     /* DEVSUP00 3480 SUBSYSTEM WITH IDRC  */\nDUMP=DASD,                     /*          DUMP ON DASD SYS1.DUMPXX  */\nFIX=00,                        /* IEAFIX00 FIXED LPA MEMBER          */\nIOS=00,                        /* IECIOS00 MIH   H-I/O SPEC. MEMBER  */\nLNK=(S3,L),                    /* LNKLSTS3 LINKLIST MEMBER           */\nLNKAUTH=APFTAB,                /*          LINKLIST NOT APF          */\nLOGCLS=L,                      /*          SYSLOG OUTPUT CLASS       */\nLOGLMT=999999,                 /*          CLOSE SLOG. 999.999 WTL'S */\nLPA=(S3,L),                    /* LPALSTS3 LPALIST MEMBER            */\nMAXUSER=100,                   /*          MAX. 100 ADDRESS SPACES   */\nMSTRJCL=00,                    /* MSTJCL00 LMOD MEMBER SYS1.LINKLIB  */\nNSYSLX=60,                     /* NUMBER OF SYSTEM LX'S RESERVED     */\n           F3=End     F5=RFind         F7=Up F8=Down  F10=Left F11=Right\n\n\n\nEdit dataset or member\n\nEnter the fully qualified dataset name without quotes, and in case of a PDS\nenter the PDS member name.\n\nIf the volume has been referred to, or option 0 has been used to initialise the\nvolume serial table, then a volser can be entered rather then a device address.\nIf the volume is being referred to for the first time since the IPL then\nthe device address must be given.\n\nEdit supports F(B) 80 datasets only. Datasets with other DCB attributes can\nonly be altered with the ZAP option\n\n\n ZZSAEDDS Edit dataset or member\n Command ===>\n\n\n           Enter dataset name:\n           ===> _\n\n           Enter member name (PDS only):\n           ===>\n\n           and 4 digit DASD device number:\n           ===>\n\n           or DASD volume serial:\n           ===>\n\n\n\n           Note: The DASD volume must have been accessed previously\n                 in order to be able to specify the volume serial.\n                 If the device number is unknown use primary menu\n                 option 0 to read all DASD volume labels first.\n\n\n\nEdit primary commands\n\nIn addition to all browse primary commands edit supports the following\ncommands:\n\n     SAVE\n\nSAVE, FILE\n\nWhen saving a dataset or member only updated records will be written back\nto DASD, a SAVE command with no changed data will not cause a DASD\nupdate to occur. SAVE will not update any fields in the F1DSCB, last\nreference dates etc. will not be updated.\n\n\n ZZSAEDIT Edit SYS1.PARMLIB(IEASYSS3)\n Command ===> _                                              Line 0000 Col 0001\n ******************************** Top of Data *********************************\nALLOC=00,                      /* ALLOC00  ALLOCATION DEFAULTS MEMB. */\nCLOCK=00,                      /* CLOCK00  CLOCK MEMBER (NOPROMPT)   */\nCLPA,                          /*          CREATE PAG.LINK PACK AREA */\nCMB=(COMM,100),                /*          CHANNEL MEASUREMENT BLOCK */\nCMD=(S3),                      /* COMMNDS3    FIRST COMMANDS         */\nCON=S3,                        /* CONSOLS3 CONSOLE MEMBER            */\nCSA=(3584,16382),              /*          CSA/ECSA RANGE IN KBYTES  */\nDIAG=00,                       /* DIAG00   COMMON/GETM.FREEM.STOR    */\nDEVSUP=00,                     /* DEVSUP00 3480 SUBSYSTEM WITH IDRC  */\nDUMP=DASD,                     /*          DUMP ON DASD SYS1.DUMPXX  */\nFIX=00,                        /* IEAFIX00 FIXED LPA MEMBER          */\nIOS=00,                        /* IECIOS00 MIH   H-I/O SPEC. MEMBER  */\nLNK=(S3,L),                    /* LNKLSTS3 LINKLIST MEMBER           */\nLNKAUTH=APFTAB,                /*          LINKLIST NOT APF          */\nLOGCLS=L,                      /*          SYSLOG OUTPUT CLASS       */\nLOGLMT=999999,                 /*          CLOSE SLOG. 999.999 WTL'S */\nLPA=(S3,L),                    /* LPALSTS3 LPALIST MEMBER            */\nMAXUSER=100,                   /*          MAX. 100 ADDRESS SPACES   */\nMSTRJCL=00,                    /* MSTJCL00 LMOD MEMBER SYS1.LINKLIB  */\nNSYSLX=60,                     /* NUMBER OF SYSTEM LX-ES RESERVED    */\n  F2=Save  F3=End     F5=RFind         F7=Up F8=Down  F10=Left F11=Right\n\n\n\nVTOC List Utility\n\nEnter the four digit device address, or alternatively the volume serial\nnumber if the volume has been referred to previously.\n\n\n ZZSAGDEV VTOC List Utility\n Command ===>\n\n\n\n           Enter 4 digit DASD device number:\n\n           ===> _\n\n           or DASD volume serial:\n\n           ===>\n\n\n\n           Note: The DASD volume must have been accessed previously\n                 in order to be able to specify the volume serial.\n                 If the device number is unknown use primary menu\n                 option 0 to read all DASD volume labels first.\n\n\n\nIn addition to the dataset names found on the volume, the following\ninformation will be displayed:\n DSORG\n          Dataset organisation ie VS, PO, PO-E\n RECFM\n          Record Format ie FB, VB, U\n BLKSIZE\n          Maximum block size\n LRECL\n          Logical Record Length\n CRDATE\n          Creation date\n REFDATE\n          Last reference date\n\n          (This utility does not update the last reference date)\n EXPDT\n          Expiration date\n EXTENT\n          Number of extends, followed by the extend addresses in CCHH\n          format\n\n\n\n ZZSABROW VTOC listing SYSACC(0926)\n Command ===> _                                              Line 0000 Col 0001\n********************************* Top of Data **********************************\nSYS1.AAID.CLIST                              DSORG=PO   RECFM=VB   BLKSIZE=06144\nSYS1.AAID.MSGS                               DSORG=PO   RECFM=FB   BLKSIZE=06160\nSYS1.AAID.PANELS                             DSORG=PO   RECFM=FB   BLKSIZE=06160\nSYS1.AAID.TABLES                             DSORG=PO   RECFM=FB   BLKSIZE=06160\nSYS1.ADCOB.CLIST                             DSORG=PO   RECFM=VB   BLKSIZE=06144\nSYS1.ADLE.CLIST                              DSORG=PO   RECFM=VB   BLKSIZE=06144\nSYS1.AD370.CLIST                             DSORG=PO   RECFM=VB   BLKSIZE=06144\nSYS1.AD370.MSGS                              DSORG=PO   RECFM=FB   BLKSIZE=06160\nSYS1.AD370.PANELS                            DSORG=PO   RECFM=FB   BLKSIZE=06160\nSYS1.AD370.SKELS                             DSORG=PO   RECFM=FB   BLKSIZE=06160\nSYS1.AI.CLIST                                DSORG=PO   RECFM=VB   BLKSIZE=06144\nSYS1.AI.PANELS                               DSORG=PO   RECFM=FB   BLKSIZE=06160\nSYS1.AI.SKELS                                DSORG=PO   RECFM=FB   BLKSIZE=06160\nSYS1.APL.CLIST                               DSORG=PO   RECFM=VB   BLKSIZE=06144\nSYS1.BOOK.EXEC                               DSORG=PO   RECFM=VB   BLKSIZE=06144\nSYS1.BOOK.MSGDAN                             DSORG=PO   RECFM=FB   BLKSIZE=06160\nSYS1.BOOK.MSGDEU                             DSORG=PO   RECFM=FB   BLKSIZE=06160\nSYS1.BOOK.MSGESP                             DSORG=PO   RECFM=FB   BLKSIZE=06160\nSYS1.BOOK.MSGFRA                             DSORG=PO   RECFM=FB   BLKSIZE=06160\nSYS1.BOOK.MSGITA                             DSORG=PO   RECFM=FB   BLKSIZE=06160\n           F3=End     F5=RFind         F7=Up F8=Down  F10=Left F11=Right\n\n\n ZZSABROW VTOC listing SYSACC(0926)\n Command ===> _                                              Line 0398 Col 0001\nSYS1.HELP                                    DSORG=PO   RECFM=FB   BLKSIZE=06160\nSYS1.HELPENP                                 DSORG=PO   RECFM=FB   BLKSIZE=06160\nSYS1.HRFCLST                                 DSORG=PO   RECFM=VB   BLKSIZE=06144\nSYS1.HRFMSG                                  DSORG=PO   RECFM=FB   BLKSIZE=06160\nSYS1.HRFPANL                                 DSORG=PO   RECFM=FB   BLKSIZE=06160\nSYS1.HRFSKEL                                 DSORG=PO   RECFM=FB   BLKSIZE=06160\nSYS1.ICEDGTC                                 DSORG=PO   RECFM=VB   BLKSIZE=06144\nSYS1.ICEDGTL                                 DSORG=PO   RECFM=U    BLKSIZE=06144\nSYS1.ICEDGTM                                 DSORG=PO   RECFM=FB   BLKSIZE=06160\nSYS1.ICEDGTP                                 DSORG=PO   RECFM=FB   BLKSIZE=06160\nSYS1.ICEDGTS                                 DSORG=PO   RECFM=FB   BLKSIZE=06160\nSYS1.ICEDGTT                                 DSORG=PO   RECFM=FB   BLKSIZE=06160\nSYS1.ICEISPC                                 DSORG=PO   RECFM=VB   BLKSIZE=06144\nSYS1.ICEISPL                                 DSORG=PO   RECFM=U    BLKSIZE=06144\nSYS1.ICEISPM                                 DSORG=PO   RECFM=FB   BLKSIZE=06160\nSYS1.ICEISPP                                 DSORG=PO   RECFM=FB   BLKSIZE=06160\nSYS1.ICEISPS                                 DSORG=PO   RECFM=FB   BLKSIZE=06160\nSYS1.ICEISPT                                 DSORG=PO   RECFM=FB   BLKSIZE=06160\nSYS1.ICEMAC                                  DSORG=PO   RECFM=FB   BLKSIZE=06160\nSYS1.ICEUSER                                 DSORG=PO   RECFM=FB   BLKSIZE=06160\nSYS1.ICQABTXT                                DSORG=PO   RECFM=FB   BLKSIZE=06160\n           F3=End     F5=RFind         F7=Up F8=Down  F10=Left F11=Right\n\n\n ZZSABROW VTOC listing SYSACC(0926)\n Command ===> _                                              Line 0398 Col 0081\n LRECL=00080 CRDATE=89026 REFDATE=89229 EXPDT=00000 EXTENT=001 01F50005-01FD0006\n LRECL=00080 CRDATE=89026 REFDATE=89026 EXPDT=00000 EXTENT=001 01FD0007-01FF000B\n LRECL=00255 CRDATE=89026 REFDATE=89092 EXPDT=00000 EXTENT=001 018E000C-018F000A\n LRECL=00080 CRDATE=89026 REFDATE=89092 EXPDT=00000 EXTENT=001 01FF000C-\n LRECL=00080 CRDATE=89026 REFDATE=89092 EXPDT=00000 EXTENT=001 02000007-020B0002\n LRECL=00080 CRDATE=89026 REFDATE=89092 EXPDT=00000 EXTENT=001 020B0003-020E0006\n LRECL=00255 CRDATE=89026 REFDATE=89026 EXPDT=00000 EXTENT=001 018F000B-018F000D\n LRECL=00000 CRDATE=89026 REFDATE=89210 EXPDT=00000 EXTENT=001 020E0007-020E000A\n LRECL=00080 CRDATE=89026 REFDATE=89026 EXPDT=00000 EXTENT=001 020E000B-020E000D\n LRECL=00080 CRDATE=89026 REFDATE=89026 EXPDT=00000 EXTENT=001 020E000E-020F0006\n LRECL=00080 CRDATE=89026 REFDATE=89026 EXPDT=00000 EXTENT=001 020F0007-020F0009\n LRECL=00080 CRDATE=89026 REFDATE=89026 EXPDT=00000 EXTENT=001 020F000A-020F000C\n LRECL=00255 CRDATE=89026 REFDATE=89026 EXPDT=00000 EXTENT=001 018F000E-\n LRECL=00000 CRDATE=89026 REFDATE=89210 EXPDT=00000 EXTENT=001 020F000D-\n LRECL=00080 CRDATE=89026 REFDATE=89026 EXPDT=00000 EXTENT=001 02100006-0210000C\n LRECL=00080 CRDATE=89026 REFDATE=89026 EXPDT=00000 EXTENT=001 0210000D-\n LRECL=00080 CRDATE=89026 REFDATE=89026 EXPDT=00000 EXTENT=001 02170002-\n LRECL=00080 CRDATE=89026 REFDATE=89026 EXPDT=00000 EXTENT=001 02170006-\n LRECL=00080 CRDATE=89026 REFDATE=89026 EXPDT=00000 EXTENT=001 02170009-\n LRECL=00080 CRDATE=89026 REFDATE=89026 EXPDT=00000 EXTENT=001 02180002-\n LRECL=00080 CRDATE=89026 REFDATE=89026 EXPDT=00000 EXTENT=001 02180008-0218000E\n           F3=End     F5=RFind         F7=Up F8=Down  F10=Left F11=Right\n\n\n\nPDS directory list\n\nEnter the fully qualified dataset name without quotes.\n\nIf the volume has been referred to, or option 0 has been used to initialise the\nvolume serial table, then a volser can be entered rather then a device address.\nIf the volume is being referred to for the first time since the IPL then\nthe device address must be given.\n\nThe output will either be in loadmodule or ispf stats format.\n\n\n ZZSALPDS List PDS Directory\n Command ===>\n\n\n           Enter dataset name:\n\n           ===> _\n\n           and 4 digit DASD device number:\n\n           ===>\n\n           or DASD volume serial:\n\n           ===>\n\n\n\n           Note: The DASD volume must have been accessed previously\n                 in order to be able to specify the volume serial.\n                 If the device number is unknown use primary menu\n                 option 0 to read all DASD volume labels first.\n\n\n\nPDS directory showing ISPF statistics\n\nIn addition to the member name the following information is displayed:\n TTR\n          Relative position of member in PDS\n CCHHR\n          Absolute track address of member\n VER\n          Member version and level\n CRDATE\n          Creation date\n CHDATE\n          Date of last update\n CHTIME\n          Time of last update\n SIZE\n          Size in records\n INIT\n          Initial member size\n MOD\n          Modifications\n ID\n          Userid of last update\n\n\n\n ZZSABROW Directory SYS1.PARMLIB\n Command ===> _                                              Line 0000 Col 0001\n********************************* Top of Data **********************************\nAAAAAAAA TTR=000F1B CCHHR=0B7900001B VER=01.00 CRDATE=90.166 CHDATE=90.166 CHTIM\nADYSET00 TTR=000F0A CCHHR=0B7900000A VER=01.02 CRDATE=90.072 CHDATE=90.075 CHTIM\nADYSET01 TTR=000F08 CCHHR=0B79000008 VER=01.01 CRDATE=90.072 CHDATE=90.075 CHTIM\nADYSET02 TTR=000F0C CCHHR=0B7900000C VER=01.02 CRDATE=90.072 CHDATE=90.075 CHTIM\nALLOC00  TTR=000F0E CCHHR=0B7900000E VER=01.02 CRDATE=90.329 CHDATE=90.075 CHTIM\nAPPCPMS3 TTR=001214 CCHHR=0B79000314 VER=01.00 CRDATE=89.206 CHDATE=89.206 CHTIM\nASCHPMS3 TTR=00110D CCHHR=0B7900020D\nASFPBPS3 TTR=001205 CCHHR=0B79000305 VER=01.00 CRDATE=89.104 CHDATE=89.104 CHTIM\nCLOCKOP  TTR=001006 CCHHR=0B79000106 VER=01.00 CRDATE=90.266 CHDATE=90.266 CHTIM\nCLOCKST  TTR=001002 CCHHR=0B79000102 VER=01.01 CRDATE=90.090 CHDATE=90.266 CHTIM\nCLOCKWT  TTR=001004 CCHHR=0B79000104 VER=01.01 CRDATE=90.090 CHDATE=90.266 CHTIM\nCLOCK00  TTR=00120B CCHHR=0B7900030B VER=01.10 CRDATE=90.123 CHDATE=90.268 CHTIM\nCNLENU00 TTR=000102 CCHHR=0B78000102 VER=01.00 CRDATE=89.325 CHDATE=90.005 CHTIM\nCOFDLF00 TTR=000104 CCHHR=0B78000104 VER=01.01 CRDATE=89.005 CHDATE=89.005 CHTIM\nCOFVLFS3 TTR=000106 CCHHR=0B78000106 VER=01.01 CRDATE=89.057 CHDATE=89.089 CHTIM\nCOFVLF00 TTR=000108 CCHHR=0B78000108 VER=01.00 CRDATE=89.351 CHDATE=90.005 CHTIM\nCOMMNDS3 TTR=001B04 CCHHR=0B79000C04 VER=01.09 CRDATE=89.344 CHDATE=90.229 CHTIM\nCONFIGS3 TTR=00010A CCHHR=0B7800010A VER=01.00 CRDATE=89.344 CHDATE=89.344 CHTIM\nCONSOLS3 TTR=00010C CCHHR=0B7800010C VER=01.00 CRDATE=89.344 CHDATE=89.344 CHTIM\nCOUPLES3 TTR=001B12 CCHHR=0B79000C12 VER=01.02 CRDATE=87.105 CHDATE=87.106 CHTIM\n           F3=End     F5=RFind         F7=Up F8=Down  F10=Left F11=Right\n\n\n ZZSABROW Directory SYS1.PARMLIB\n Command ===> _                                              Line 0000 Col 0051\n********************************* Top of Data **********************************\nATE=90.166 CHDATE=90.166 CHTIME=13:47:26 SIZE=0038 INIT=0038 MOD=0000 ID=T1TC\nATE=90.072 CHDATE=90.075 CHTIME=09:50:37 SIZE=0015 INIT=0015 MOD=0000 ID=T1SC\nATE=90.072 CHDATE=90.075 CHTIME=09:46:34 SIZE=0011 INIT=0011 MOD=0000 ID=T1SC\nATE=90.072 CHDATE=90.075 CHTIME=09:50:59 SIZE=0013 INIT=0013 MOD=0000 ID=T1SC\nATE=90.329 CHDATE=90.075 CHTIME=10:22:49 SIZE=0109 INIT=0109 MOD=0000 ID=T1SC\nATE=90.206 CHDATE=90.206 CHTIME=14:09:18 SIZE=0004 INIT=0004 MOD=0000 ID=T2JJ\n\nATE=89.104 CHDATE=89.104 CHTIME=12:30:56 SIZE=0057 INIT=0057 MOD=0000 ID=TSJJ\nATE=90.266 CHDATE=90.266 CHTIME=15:16:27 SIZE=0005 INIT=0005 MOD=0000 ID=T1SC\nATE=90.090 CHDATE=90.266 CHTIME=12:41:39 SIZE=0005 INIT=0005 MOD=0000 ID=T1SC\nATE=90.090 CHDATE=90.266 CHTIME=12:41:43 SIZE=0005 INIT=0005 MOD=0000 ID=T1SC\nATE=89.123 CHDATE=89.268 CHTIME=11:04:32 SIZE=0005 INIT=0002 MOD=0000 ID=TSJH\nATE=88.325 CHDATE=89.005 CHTIME=13:24:47 SIZE=0049 INIT=0049 MOD=0000 ID=TSWR\nATE=89.005 CHDATE=89.005 CHTIME=13:26:55 SIZE=0026 INIT=0026 MOD=0001 ID=TSWR\nATE=89.057 CHDATE=89.089 CHTIME=14:16:27 SIZE=0033 INIT=0041 MOD=0000 ID=TSTC\nATE=88.351 CHDATE=89.005 CHTIME=13:52:39 SIZE=0032 INIT=0032 MOD=0000 ID=TSWR\nATE=88.344 CHDATE=89.229 CHTIME=14:44:29 SIZE=0012 INIT=0006 MOD=0007 ID=TSJJ\nATE=88.344 CHDATE=89.344 CHTIME=21:13:36 SIZE=0059 INIT=0059 MOD=0000 ID=TSTC\nATE=89.344 CHDATE=89.344 CHTIME=20:55:56 SIZE=0225 INIT=0225 MOD=0000 ID=TSTC\nATE=87.105 CHDATE=87.106 CHTIME=10:07:30 SIZE=0006 INIT=0001 MOD=0006 ID=TSJJ\n           F3=End     F5=RFind         F7=Up F8=Down  F10=Left F11=Right\n\n\n\nPDS directory showing loadmodule attributes\n\nIn addition to the member name the following information is displayed:\n SIZE\n         Virtual storage required to load the module\n EP\n         Entry point address\n AC\n         Authorisation code\n AMODE\n         Addressing mode\n RMODE\n         Residency mode\n MAIN\n         Name of main entry point\n\n         This field is only valid for an alias\n ATTR\n         Attributes such as RENT, REFR etc\n\n\n\n ZZSABROW Directory SYS1.LPALIB\n Command ===> _                                              Line 0000 Col 0001\n********************************* Top of Data **********************************\nACYAPCIP TTR=00C314 CCHHR=02E3000D14 SIZE=006C40 EP=000000 AC=00 AMODE=31  RMODE\nACYAPCNP TTR=00C314 CCHHR=02E3000D14 SIZE=006C40 EP=0000C0 AC=00 AMODE=31  RMODE\nACYAPCPP TTR=00C314 CCHHR=02E3000D14 SIZE=006C40 EP=000308 AC=00 AMODE=31  RMODE\nACYAPDRP TTR=00C314 CCHHR=02E3000D14 SIZE=006C40 EP=002148 AC=00 AMODE=31  RMODE\nACYAPD1P TTR=00C314 CCHHR=02E3000D14 SIZE=006C40 EP=002900 AC=00 AMODE=31  RMODE\nACYAPFLP TTR=00C314 CCHHR=02E3000D14 SIZE=006C40 EP=0032A8 AC=00 AMODE=31  RMODE\nACYAPQCP TTR=00C314 CCHHR=02E3000D14 SIZE=006C40 EP=0038D0 AC=00 AMODE=31  RMODE\nACYAPQRP TTR=00C314 CCHHR=02E3000D14 SIZE=006C40 EP=003F20 AC=00 AMODE=31  RMODE\nACYAPRGP TTR=00C314 CCHHR=02E3000D14 SIZE=006C40 EP=004670 AC=00 AMODE=31  RMODE\nACYAPRIP TTR=00C314 CCHHR=02E3000D14 SIZE=006C40 EP=005570 AC=00 AMODE=31  RMODE\nACYAPRQP TTR=00C314 CCHHR=02E3000D14 SIZE=006C40 EP=005790 AC=00 AMODE=31  RMODE\nACYAPRSP TTR=00C314 CCHHR=02E3000D14 SIZE=006C40 EP=005CD0 AC=00 AMODE=31  RMODE\nACYAPSLP TTR=00C314 CCHHR=02E3000D14 SIZE=006C40 EP=006540 AC=00 AMODE=31  RMODE\nADYPRED  TTR=00580C CCHHR=02DC000B0C SIZE=0013B8 EP=000000 AC=00 AMODE=31  RMODE\nAHLACFV  TTR=00681F CCHHR=02DD000C1F SIZE=000668 EP=00001C AC=00 AMODE=31  RMODE\nAHLDMPMD TTR=006523 CCHHR=02DD000923 SIZE=001728 EP=000B84 AC=00 AMODE=31  RMODE\nAHLDSP   TTR=006831 CCHHR=02DD000C31 SIZE=0007C8 EP=00008E AC=00 AMODE=31  RMODE\nAHLEXT   TTR=00680D CCHHR=02DD000C0D SIZE=000AA0 EP=00012A AC=00 AMODE=31  RMODE\nAHLFFP   TTR=009F0E CCHHR=02E100070E SIZE=005800 EP=000000 AC=00 AMODE=31  RMODE\nAHLFIO   TTR=006804 CCHHR=02DD000C04 SIZE=0006F0 EP=00001C AC=00 AMODE=31  RMODE\n           F3=End     F5=RFind         F7=Up F8=Down  F10=Left F11=Right\n\n\n ZZSABROW Directory SYS1.LPALIB\n Command ===> _                                              Line 0000 Col 0051\n********************************* Top of Data **********************************\nP=000000 AC=00 AMODE=31  RMODE=ANY MAIN=ACYAPCNP ATTR=(RN,RU)\nP=0000C0 AC=00 AMODE=31  RMODE=ANY ATTR=(RN,RU)\nP=000308 AC=00 AMODE=31  RMODE=ANY MAIN=ACYAPCNP ATTR=(RN,RU)\nP=002148 AC=00 AMODE=31  RMODE=ANY MAIN=ACYAPCNP ATTR=(RN,RU)\nP=002900 AC=00 AMODE=31  RMODE=ANY MAIN=ACYAPCNP ATTR=(RN,RU)\nP=0032A8 AC=00 AMODE=31  RMODE=ANY MAIN=ACYAPCNP ATTR=(RN,RU)\nP=0038D0 AC=00 AMODE=31  RMODE=ANY MAIN=ACYAPCNP ATTR=(RN,RU)\nP=003F20 AC=00 AMODE=31  RMODE=ANY MAIN=ACYAPCNP ATTR=(RN,RU)\nP=004670 AC=00 AMODE=31  RMODE=ANY MAIN=ACYAPCNP ATTR=(RN,RU)\nP=005570 AC=00 AMODE=31  RMODE=ANY MAIN=ACYAPCNP ATTR=(RN,RU)\nP=005790 AC=00 AMODE=31  RMODE=ANY MAIN=ACYAPCNP ATTR=(RN,RU)\nP=005CD0 AC=00 AMODE=31  RMODE=ANY MAIN=ACYAPCNP ATTR=(RN,RU)\nP=006540 AC=00 AMODE=31  RMODE=ANY MAIN=ACYAPCNP ATTR=(RN,RU)\nP=000000 AC=00 AMODE=31  RMODE=ANY ATTR=(RN,RU)\nP=00001C AC=00 AMODE=31  RMODE=ANY MAIN=AHLTVTAM ATTR=(RN,RU)\nP=000B84 AC=00 AMODE=31  RMODE=ANY MAIN=AHLSETD  ATTR=(RN,RU)\nP=00008E AC=00 AMODE=31  RMODE=ANY MAIN=AHLTXSYS ATTR=(RN,RU)\nP=00012A AC=00 AMODE=31  RMODE=ANY MAIN=AHLTSYSM ATTR=(RN,RU)\nP=000000 AC=00 AMODE=31  RMODE=ANY MAIN=AHLFVEC  ATTR=(RN,RU,RF)\nP=00001C AC=00 AMODE=31  RMODE=ANY MAIN=AHLTSYFL ATTR=(RN,RU)\n           F3=End     F5=RFind         F7=Up F8=Down  F10=Left F11=Right\n\n\n\nDisplay volume label\n\nEnter the four digit device address.\n\n\n ZZSAGVOL Display DASD Record 3 (VOL1)\n Command ===>\n\n\n\n\n           Enter 4 digit DASD device number:\n\n\n           ===> _\n\n\n ZZSABROW DASD record 3 for device 0926\n Command ===> _                                              Line 0000 Col 0001\n********************************* Top of Data **********************************\nVolume Label Identifier       VOL\nVolume Label Number           1\nVolume Serial Number          SYSACC\nVTOC Pointer (CCHHR)          0459000001\nVolume Security               X'40'\nOwner Name and Address Code   SYS1\n******************************** Bottom of Data ********************************\n\n\n\n\n\n\n\n\n\n\n\n\n\n           F3=End     F5=RFind         F7=Up F8=Down  F10=Left F11=Right\n\n\n\nDump DASD record\n\nEnter the four digit device address and the ten digit CCHHR address of the\nrecord to be displayed.\n\n\n ZZSADUMP Dump DASD record\n\n Command ===>\n\n\n\n           Enter 4 digit DASD device number:\n           ===> _\n\n           and record address in 10 digit CCHHR format:\n           ===>\n\n\n ZZSABROW DASD record dump\n Command ===> _                                              Line 0000 Col 0001\n********************************* Top of Data **********************************\nDevice      0926(SYSACC)\nCCHHR       0000 0000 03   Sector      0E(014)\nKey length  04(004)        Data length 0050(00080)\n\nKey     0000    E5D6D3F1                                  VOL1\n\nData    0000    E5D6D3F1  E2E8E2C1  C3C34004  59000001    VOL1SYSACC ._...\n        0010    40404040  40404040  40404040  40404040\n        0020    40404040  40E2E8E2  F1404040  40404040         SYS1\n        0030    40404040  40404040  40404040  40404040\n        0040    40404040  40404040  40404040  40404040\n******************************** Bottom of Data ********************************\n\n\n\n\n\n\n\n\n           F3=End     F5=RFind         F7=Up F8=Down  F10=Left F11=Right\n\n\n\nAlter DASD record\n\nSupply the four digit device number and the ten digit CCHHR address on the\nZZSAALTR panel.\n\n\n ZZSAALTR Alter DASD record\n Command ===>\n\n\n\n           Enter 4 digit DASD device number:\n\n           ===> 0926\n\n           and record address in 10 digit CCHHR format:\n\n           ===> 0000000003_\n\n\n\nZap supports the following primary commands:\n\n     MAX , M\n     TOP, T\n     BOTTOM, BOT, B\n     UP, U\n     DOWN, D\n     SAVE\n     END, CANCEL, EXIT\n\nMAX, M\n\nWill move max-right, max-left, top or bottem depending on the pf-key\npressed.\n\nTOP, T\n\nWill move to the top (line 1) of the file.\n\nBOTTOM, BOT, B\n\nWill move to the last line of the file.\n\nUP, U\n\nMoves one page backward. When the cursor is located in the output area, the\ncurrent line will become the last line in the output area.\n\nDOWN, D\n\nMoves one page forward. When the cursor is located in the output area, the\ncurrent line will become the first line in the output area.\n\nSAVE, FILE\n\nWhen saving a dataset or member only updated records will be written back\nto DASD, a SAVE command with no changed data will not cause a DASD\nupdate to occur. SAVE will not update any fields in the F1DSCB, last\nreference dates etc. will not be updated.\n\nEND, CANCEL, EXIT\n\nReturns to previous panel. Data will be discarded, use SAVE to save data\nfirst.\n\nUpdated, but unsaved fields appear hilited, and will revert back to their\noriginal intensity when the data is saved.\n\n\n ZZSADZAP Alter DASD 0926 CCHHR 0000000003\n Command ===> _                                                     Offset 0000\n\n Key  0000  E5 D6 D3 F1                                       VOL1\n\n Data 0000  E5 D6 D3 F1 E2 E8 E2 C1 C3 C3 40 04 59 00 00 01   VOL1SYSACC ._...\n      0010  40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40\n      0020  40 40 40 40 40 E2 E8 E2 F2 40 40 40 40 40 40 40        SYS2\n      0030  40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40\n      0040  40 40 40 40 40 40 40 40 40 40 40 40 40 40 40 40\n\n\n\n\n\n\n\n\n\n\n\n\n\n  F2=Save  F3=End                      F7=Up F8=Down\n\n\n\nTerminating the program\n\nThe first 16M of central storage are cleared before loading a disabled wait\nPSW. This will prevent unauthorised access to sensitive data, and render the\nutility inelidgeble for restart. It can only be restarted with an IPL.\n\n\n ZZSAWAIT                     Stand Alone Utilities\n\n\n\n\n\n\n\n\n                            Loading disabled wait PSW\n\n                               Program terminated.\n\n\n\n\n\n\n\n\n\n\n\n                                             Jan Jaeger - Version 12/29/90-15.44\n\n\n\nFixes\n\nModification levels are:\n\n J1\n    15/05/93\n           Valid paths not correctly listed\n J2\n    11/09/94\n           Device addresses gt X'7FFF' not recognised\n J3\n    04/10/98\n           DEAD0001 INTC X'15' on HDS M2000-728 when trying to\n           change interruption parm on CFS subchannel while SCHV bit\n           not set\n J4\n    09/10/98\n           Fix DEAD0005 on exit of PDS member list when PDS\n           contains no members\n J5\n    10/10/98\n           Fix overlay on primary option menu\n J6\n    10/10/98\n           Fix random posting of wait on I/O completion after timeout has\n           occurred\n J7\n    14/10/98\n           Fix DEAD0005 on invalid or corrupted VTOC\n J8\n    24/10/98\n           Reduce storage requirements for UCB table\n\n\n\nDOWNLOAD\n\nIPLTEXT is distributed in distribution file zzsa.zip\n\nPrevious version 90363+ available at fix level J3 in zzsa90363p.zip\n\n\n\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ZZSACARD": {"ttr": 4105, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x994\\x8f\\x00\\x994\\x8f\\x12\\x00\\x01o\\x01o\\x00\\x00\\xd1\\xd1\\xc1\\xc5\\xc7\\xc5\\xd9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-12-14T00:00:00", "modifydate": "1999-12-14T12:00:00", "lines": 367, "newlines": 367, "modlines": 0, "user": "JJAEGER"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "ZZSADIMG": {"ttr": 4358, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x994\\x8f\\x00\\x994\\x8f\\x12\\x00\\x01J\\x01J\\x00\\x00\\xd1\\xd1\\xc1\\xc5\\xc7\\xc5\\xd9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-12-14T00:00:00", "modifydate": "1999-12-14T12:00:00", "lines": 330, "newlines": 330, "modlines": 0, "user": "JJAEGER"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "ZZSALIPL": {"ttr": 4364, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x02\\x00'\\x01\\x061\\x1f\\x01\\x061/\\t'\\x00\\x15\\x00\\x11\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@\"", "ispf": {"version": "01.02", "flags": 0, "createdate": "2006-11-07T00:00:00", "modifydate": "2006-11-08T09:27:27", "lines": 21, "newlines": 17, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBP  JOB (ACCT#),S-GOLOB,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X\n//*****************************************************************\n//* PUT IPL TEXT FOR ZZSA ON ANY VOLUME NOT HAVING IPL TEXT ALREADY\n//*****************************************************************\n//* ---------------------------------------------------------------\n//*  (THIS IS HOW TO LOAD ZZSA IPL TEXT ONTO A DASD VOLUME\n//*   SO YOU CAN IPL THAT VOLUME LATER AND BRING UP ZZSA.)\n//* ---------------------------------------------------------------\n//* IPL TEXT FILE IN DD NAME SAUTILDD, WAS OBTAINED USING A TSO\n//* RECEIVE COMMAND FROM A MEMBER IN THIS DATASET:\n//*    RECEIVE INDS(THIS.PDS(ZZSADIMG))        FOLLOWED BY:\n//*    DSN('SBGOLOB.ZZSA.DISK.IMAGE')\n//*****************************************************************\n//WRITETXT EXEC PGM=ICKDSF,PARM=NOREPLYU,REGION=8000K\n//SYSPRINT DD  SYSOUT=*\n//SAUTILDD DD  DISP=SHR,DSN=SBGOLOB.ZZSA.DISK.IMAGE\n//SYSIN    DD  *\n REFORMAT UNIT(A97) VERIFY(DATA05) IPLDD(SAUTILDD,ABS)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ZZSAPAC$": {"ttr": 4609, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04P\\x00\\x01\\x01\\t\"?\\x01\\x18$?\\x00\"\\x00W\\x00Z\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "04.80", "flags": 0, "createdate": "2009-08-11T00:00:00", "modifydate": "2018-08-31T00:22:01", "lines": 87, "newlines": 90, "modlines": 0, "user": "SBGOLOB"}, "text": "//*                                                                 *   FILE 538\n//*       When run under Hercules on a PC, ZZSA is a tool to SEE    *   FILE 538\n//*       MVS DASD and its contents, WITHOUT USING AN MVS SYSTEM!   *   FILE 538\n//*                                                                 *   FILE 538\n//*       - - - - - - - - N  O  T  E - - - - - - - - - - - - - -    *   FILE 538\n//*                                                                 *   FILE 538\n//*       If you are running Hercules already, you can use ZZSA     *   FILE 538\n//*       immediately using a new member of this pds called         *   FILE 538\n//*       ZZSAPACK.  ZZSAPACK is a zipped PC file which really      *   FILE 538\n//*       is a Hercules, or PC/370 DASD minidisk.  You attach the   *   FILE 538\n//*       ZZSA01 file to a Hercules configuration.  Then IPL it.    *   FILE 538\n//*       You don't use MVS or z/OS, and you can see the contents   *   FILE 538\n//*       of all the DASD in the configuration !!!  The ZZSA01      *   FILE 538\n//*       pack is a mini-disk of ONLY ONE CYLINDER.  ZZSA is its    *   FILE 538\n//*       IPL text.                                                 *   FILE 538\n//*                                                                 *   FILE 538\n//*       - - - - - - - - N  O  T  E  - - - - - - - - - - - - - -   *   FILE 538\n//*                                                                 *   FILE 538\n//*       This new member of this pds called ZZSAPACK was added     *   FILE 538\n//*       by Sam Golob.  Download member ZZSAPACK, unzip it, and    *   FILE 538\n//*       use it as a one-cylinder 3390 minidisk in a Hercules      *   FILE 538\n//*       configuration.  IPL it, to run ZZSA and access all        *   FILE 538\n//*       the MVS DASD in the configuration without IPL-ing         *   FILE 538\n//*       another operating system.  Or you can attach the pack     *   FILE 538\n//*       to a running Hercules configuration and IPL it.           *   FILE 538\n//*                                                                 *   FILE 538\n//*       - - - - - - - - - - - - - - - - - - - - - - - - - - - -   *   FILE 538\n//*                                                                 *   FILE 538\n//*       Scenario to look at MVS DASD without MVS.  (Hercules      *   FILE 538\n//*       has to be installed on the PC.)                           *   FILE 538\n//*                                                                 *   FILE 538\n//*       c:\\hercules>         (Point to the Hercules executables)  *   FILE 538\n//*                                                                 *   FILE 538\n//*       Then start Hercules:                                      *   FILE 538\n//*                                                                 *   FILE 538\n//*       c:\\hercules>hercules -f c:\\hercconf\\config.con            *   FILE 538\n//*                                                                 *   FILE 538\n//*       Now, in the Hercules window, add pack zzsa01 to the       *   FILE 538\n//*       configuration using the attach command.                   *   FILE 538\n//*                                                                 *   FILE 538\n//*   Command ==> attach 0ab4 3390 c:\\dasdtest\\zzsa01               *   FILE 538\n//*                                                                 *   FILE 538\n//*   HHCDA020I c:\\dasdtest\\zzsa01 cyls=1 heads=15 tracks=15        *   FILE 538\n//*                                                   trklen=56832  *   FILE 538\n//*                                                                 *   FILE 538\n//*       Then, in the Hercules window.....                         *   FILE 538\n//*                                                                 *   FILE 538\n//*       ipl ab4                                                   *   FILE 538\n//*                                                                 *   FILE 538\n//*       In your emulator window, where Hercules has started...    *   FILE 538\n//*                                                                 *   FILE 538\n//*       Type ESC to issue an interrupt, and ZZSA will prompt      *   FILE 538\n//*       for a password.  The password is ZZSECRET.  Then you get  *   FILE 538\n//*       the following introductory screen:                        *   FILE 538\n//*                                                                 *   FILE 538\n//*  ZZSAPRIM             Stand Alone Utilities                     *   FILE 538\n//*                                                                 *   FILE 538\n//*  Option ===>                                                    *   FILE 538\n//*                                                                 *   FILE 538\n//*      0 ListDev  - List all devices                              *   FILE 538\n//*                                                                 *   FILE 538\n//*      1 Browse   - Browse dataset or member                      *   FILE 538\n//*                                                                 *   FILE 538\n//*      2 Edit     - Edit dataset or member                        *   FILE 538\n//*                                                                 *   FILE 538\n//*      3 ListVTOC - List Volume Table of Contents                 *   FILE 538\n//*                                                                 *   FILE 538\n//*      4 ListPDS  - List PDS directory                            *   FILE 538\n//*                                                                 *   FILE 538\n//*      5 DispVol  - Display DASD volume label                     *   FILE 538\n//*                                                                 *   FILE 538\n//*      6 Dump     - Dump DASD record by CCHHR                     *   FILE 538\n//*                                                                 *   FILE 538\n//*      7 Zap      - Alter DASD record by CCHHR                    *   FILE 538\n//*                                                                 *   FILE 538\n//*      X Exit     - Terminate program                             *   FILE 538\n//*                                                                 *   FILE 538\n//*      ALWAYS run OPTION 0 from this screen FIRST, so that ZZSA   *   FILE 538\n//*      \"knows\" the entire DASD configuration, and then it can     *   FILE 538\n//*      use the information it found out, in its other activities. *   FILE 538\n//*                                                                 *   FILE 538\n//*      From here, you can see what a versatile and useful DASD    *   FILE 538\n//*      \"look and change\" program that ZZSA is.  It is entirely    *   FILE 538\n//*      legal, as far as I know, to look at MVS or z/OS DASD       *   FILE 538\n//*      using ZZSA, because ZZSA does not belong to IBM, and you   *   FILE 538\n//*      have not IPL-ed an IBM operating system.                   *   FILE 538\n//*                                                                 *   FILE 538\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ZZSAPACK": {"ttr": 4612, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\t\"/\\x01\\t\"/\"Y\\x00\\xb8\\x00\\xb8\\x00\\x00\\xc6\\xd6\\xd9\\xc8\\xc5\\xd9\\xc3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2009-08-10T00:00:00", "modifydate": "2009-08-10T22:59:00", "lines": 184, "newlines": 184, "modlines": 0, "user": "FORHERC"}, "mimetype": "application/zip", "datatype": "binary", "extension": ".zip"}, "ZZSATIMG": {"ttr": 4616, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x994\\x8f\\x00\\x994\\x8f\\x12\\x00\\x01J\\x01J\\x00\\x00\\xd1\\xd1\\xc1\\xc5\\xc7\\xc5\\xd9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-12-14T00:00:00", "modifydate": "1999-12-14T12:00:00", "lines": 330, "newlines": 330, "modlines": 0, "user": "JJAEGER"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT437/FILE437.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT437", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}