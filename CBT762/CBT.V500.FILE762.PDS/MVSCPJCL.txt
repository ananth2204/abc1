./ ADD NAME=A$TITLE  0100-07007-07007-1205-00004-00004-00000-KTOMIAK

z/OSMVS JCL Reference
SA22-7597-06

./ ADD NAME=A$TOC    0100-07007-07007-1205-00062-00062-00000-KTOMIAK

JCL

// command                        Deprecated, use // COMMAND command
// COMMAND 'command'              Issued during conversion
//* comment
// CNTL
// DD
/*
// ENDCNTL
// EXEC
// IF/THEN/ELSE/ENDIF
// INCLUDE
// JCLLIB
// JOB
//
// OUTPUT
// PEND
// PROC
// SET
// XMIT

JECL - JES2

/*$command
/*JOBPARM
/*MESSAGE
/*NETACCT
/*NOTIFY
/*OUTPUT
/*PRIORITY
/*ROUTE
/*SETUP
/*SIGNOFF
/*SIGNON
/*XEQ
/*XMIT

INTERNAL READER

/*DEL
/*EOF
/*PURGE
/*SCAN

JECL - JES3

//**command
//*DATASET
//*ENDDATASET
//*ENDPROCESS
//*FORMAT
//*MAIN
//*NET
//*NETACCT
//*OPERATOR
//*PAUSE
//*PROCESS
//*ROUTE
/*SIGNOFF
/*SIGNON

./ ADD NAME=CNTL     0100-07007-07007-1205-00022-00022-00000-IBM

//prefix.label   CNTL *               comments

Used in conjunction with the ENDCNTL statement for PSF.

prefix is optional and follows the same rules as label.
  It does not mean the same as a DD statement override.

label consists of 1 to 8 alphanumeric or national characters.
  label is usually coded as a printer-id, e.g. //PRT2 CNTL
  The first character must be alphabetic or a national character.
  Alphabetic = A through Z.
  Numeric = 0 through 9.
  National characters in the USA are @,#,$.

The asterisk is required if you code comments.


The CNTL statement terminates with the ENDCNTL statement. Things
in between look like JCL but are special control cards used by
the PSF subsystem.

./ ADD NAME=COMMAND  0100-07007-07007-1205-00011-00011-00000-IBM

// COMMAND 'command'

                                                          (column 71) |
//          COMMAND 'START XYZ,PARM='ABC,DEF,GHI,JK',TIME=1440,REGION=4
//             096K'
               | (column 16)

//         COMMAND     'SEND ''This message will be sent to user SCOTTC
//             when this job is converted'',USER=(SCOTTC)'

./ ADD NAME=COMMENTS 0100-07007-07007-1205-00014-00014-00000-IBM

//*comment

//*On a JES3 system you need to avoid starting with a JES3 keyword.

//*While the manual says you can go out to column 80, do not use
//*column 72 to continue your comment. Instead just code more
//*comment cards.

//LABEL EXEC PGM=IEFBR14       Which is different from                 C
//                             continuing comments from another JCL    C
//                             statement. But really, there is no
//*                            good reason not to just use //*.

./ ADD NAME=DD       0101-07007-07007-1205-00144-00144-00000-IBM

// DD

//Ýddname ¨ DD Ýpositional-parameter¨Ý,keyword-parameter¨...Ýcomments¨
//Ýprocstepname.ddname¨ DD

The ddname must begin in column 3.
The ddname is 1 through 8 alphanumeric or national ($, #, @) characters.
The first character must be alphabetic or national ($, #, @).
The ddname must be followed by at least one blank.

The procstepname must be a valid stepname. See EXEC.

The parameters you will use most are:

  DISP=
  DSN=
  UNIT=
  SPACE=
  DCB=

"Special DD Statements."
  JOBCAT
  SYSCHK
  JOBLIB
  SYSCKEOV
  STEPCAT
  SYSIN
  STEPLIB
  SYSMDUMP
  SYSABEND
  SYSUDUMP

Do not use the following ddnames on a DD statement in a JES2 system.
They have special meaning to JES2.

  JESJCLIN
  JESMSGLG
  JESJCL
  JESYSMSG

Do not use the following ddnames on a DD statement in a JES3 system.
They have special meaning to JES3.

  JCBIN
  JESJCL
  JS3CATLG
  JCBLOCK
  JESMSGLG
  J3JBINFO
  JCBTAB
  JOURNAL
  J3SCINFO
  JESJCLIN
  JST
  J3STINFO
  JESInnnn
  JESYSMSG
  STCINRDR
  TSOINRDR

LIMITATIONS

Maximum of 3,273 DD statements per job step based on a 64K TIOT size.
The default is a 32K TIOT size. Okay, subsystems like DB2 do some funky
things to get around this.

A JES3 system may reduce the maximum number even further.

Use of System Managed Storage is highly recommended. In fact, if you
aren't using it then you are a fool. Okay, there is an exception,
like the z/OS SYSRES set, but otherwise stop running like it was 1975!

The only time an output DD statement may be concatenated is for ISAM.
But, now really, who uses that anymore.

POSITIONAL PARAMETERS

//ddname   DD  *
//ddname   DD  DATA
//ddname   DD  DUMMY
//ddname   DD  DYNAM

KEYWORD PARAMETERS

//ddname   DD  ACCODE= ISO/ANSI/FIPS V3 or ISO/ANSI V4 tape access
//ddname   DD  AMP=
//ddname   DD  AVGREC=
//ddname   DD  BLKSIZE=
//ddname   DD  BLKSZLIM=
//ddname   DD  BURST=
//ddname   DD  CCSID=
//ddname   DD  CHARS=
//ddname   DD  CHKPT=
//ddname   DD  CNTL=
//ddname   DD  COPIES=
//ddname   DD  DATACLAS=
//ddname   DD  DCB=
//ddname   DD  DDNAME=
//ddname   DD  DEST=
//ddname   DD  DISP=
//ddname   DD  DLM=
//ddname   DD  DSID=
//ddname   DD  DSNAME=      ALSO coded as DSN=
//ddname   DD  DSNTYPE=
//ddname   DD  EXPDT=
//ddname   DD  FCB=
//ddname   DD  FILEDATA=
//ddname   DD  FLASH=
//ddname   DD  FREE=
//ddname   DD  HOLD
//ddname   DD  KEYLEN=
//ddname   DD  KEYOFF=
//ddname   DD  LABEL=
//ddname   DD  LGSTREAM=
//ddname   DD  LIKE=
//ddname   DD  LRECL=
//ddname   DD  MGMTCLAS=
//ddname   DD  MODIFY=
//ddname   DD  OUTLIM=
//ddname   DD  OUTPUT=
//ddname   DD  PATH=
//ddname   DD  PATHDISP=
//ddname   DD  PATHMODE=
//ddname   DD  PATHOPTS=
//ddname   DD  PROTECT
//ddname   DD  QNAME=
//ddname   DD  RECFM=
//ddname   DD  RECORG=
//ddname   DD  REFDD=
//ddname   DD  RETPD=
//ddname   DD  RLS=
//ddname   DD  SECMODEL=
//ddname   DD  SEGMENT=
//ddname   DD  SPACE=
//ddname   DD  SPIN=
//ddname   DD  STORCLAS=
//ddname   DD  SUBSYS=
//ddname   DD  SYSOUT=
//ddname   DD  TERM=
//ddname   DD  UCS=
//ddname   DD  UNIT=
//ddname   DD  VOLUME=

./ ADD NAME=DD$AMP   0100-07007-07007-1205-00029-00029-00000-IBM

Completes information in an Access Method Control Block (ACB) - VSAM.

AMP=(subparameter)
AMP=('subparameterÝ,subparameter¨...')

SUBPARAMETERS:

AMORG
BUFND=number of data buffers
BUFNI=number of index buffers
BUFSP=bytes of buffer space
CROPS= {RCK}
       {NCK}
       {NRE}
       {NRC}
FRLOG= {NONE}
       {REDO}
OPTCD= {I }
       {L }
       {IL}
RECFM= {F }         FIXED
       {FB}         FIXED-BLOCKED
       {V }         VARIABLE
       {VB}         VARIABLE-BLOCKED
STRNO=number of strings
SYNAD=modulename
TRACE

./ ADD NAME=DD$AVGRE 0100-07007-07007-1205-00009-00009-00000-IBM

Specifies a record request and the quantity of primary and secondary
space specified on the SPACE parameter.

With SMS only:
AVGREC= {U}         U: space specified in records
        {K}         K: space specified in thousands of records
        {M}         M: space specified in millions of records

./ ADD NAME=DD$BLKSI 0102-07007-07021-2300-00023-00001-00000-KTOMIAK

 BLKSIZE=

 SAME SA DCB=BLKSIZE=


HALF TRACK IS OFTEN THE BEST.

IDEALLY YOUR SYSTEM IS CONFIGURED TO DETERMINE THIS. CODE:

    BLKSIZE=0

LRECL   BLKSIZE  FACTOR
   80    27920     349
  121    27951     231
  133    27930     210
  147    27930     190  (YES, THE SAME BLKSIZE AS FOR 133)

LOADLIBS ARE A SPECIAL CASE, THE BINDER KNOWS HOW TO USE THE DISK
TO ITS BEST ADVANTAGE SO IT IS COMMON TO USE:

   DCB=(RECFM=U,BLKSIZE=32760,LRECL=0)

./ ADD NAME=DD$BLKSZ 0101-07007-07021-2258-00003-00001-00000-KTOMIAK

BLKSIZLIM=

./ ADD NAME=DD$BURST 0100-07007-07007-1205-00008-00008-00000-IBM

Directs output to a stacker on a continuous-forms AFP printer.

BURST= {YES}        YES or Y: burster-trimmer-stacker
       {Y }
       {NO }        NO or N: continuous forms stacker
       {N }

./ ADD NAME=DD$CCSID 0100-07007-07007-1205-00007-00007-00000-IBM

Specifies the coded character set identifier indicating the character
code conversion performed on reads from and writes to tapes accessed in
ISO/ANSI Version 4 format.

CCSID=nnnnn         1 - 65535

./ ADD NAME=DD$CHARS 0100-07007-07007-1205-00014-00014-00000-IBM

Names coded fonts for printing on an AFP printer. Requests a
high-density dump on a SYSABEND or SYSUDUMP DD statement.

CHARS= {table-name }
       {(table-nameÝ,table-name¨...)}
       {DUMP }
       {(DUMPÝ,table-name¨...) }

1 - 4 table-name subparameters:
1 - 4 alphanumeric or $, #, @ characters

DUMP: 204-character print lines on 3800 model 1

./ ADD NAME=DD$CHKPT 0100-07007-07007-1205-00005-00005-00000-IBM

Requests a checkpoint.

CHKPT=EOV

./ ADD NAME=DD$CNTL  0100-07007-07007-1205-00007-00007-00000-IBM

Used with PSF printers to define addiitonal parameters.

CNTL= {*.label }
{*.stepname.label }
{*.stepname.procstepname.label}

./ ADD NAME=DD$COPIE 0100-07007-07007-1205-00012-00012-00000-IBM

How many copies to print/punch.

COPIES= {nnn }
        {(nnn,(group-valueÝ,group-value¨...))}
        {(,(group-valueÝ,group-value¨...)) }

nnn (JES2): 1 - 255
nnn (JES3): 1 - 254
1 - 8 group-values (JES2): 1 - 255
1 - 8 group values (JES3): 1 - 254

./ ADD NAME=DD$DATAC 0100-07007-07007-1205-00006-00006-00000-IBM

With SMS, used to let a defined DATACLAS set of attributes define
the file format (DCB).

See your own installation standards to know what to use.

./ ADD NAME=DD$DCB   0101-07007-07027-1149-00121-00011-00000-KTOMIAK

With or without SMS, specify additional information for the Data
Control Block (DCB), NON-VSAM data sets.

DCB=(subparameterÝ,subparameter¨...)
DCB= ( {dsname } )
     ( {*.ddname } )
     ( {*.stepname.ddname } )
     ( {*.stepname.procstepname.ddname} )
     ( Ý,subparameter¨... )

    BFALN=F|D      Buffer Alignment F=Fullword, D=Doubleword
    BFTEK=R     BDAM   R=Variable Length Spanned Records
          D     BTAM   D=Dynamic Buffering
          S     QSAM   S=Simple buffering
          A     QSAM   A=Locate mode logical (used with VS or VBS)
    BLKSIZE=value|valueK|valueM|valueG     DASD max=32,760 Tape=2GB
                                                 (2GB=2,147,483,648)
    BUFIN=1|value  Input buffers for line
    BUFL=bytes     bytes in the buffer pool 32,760 max
    BUFMAX=buffers  (2-15) maximum # of buffers assigned to a line
    BUFNO=buffers    255 is normally the maximum
    BUFOFF=n|L     n=length, L=4
    BUFOUT=buffers Output buffers for line
    BUFSIZE=bytes (31-65535) length of each buffer used for all lines
    CPRI=
         R   Receive has priority over Send
         E   Equal priority
         S   Send has priority over Receive
    CYLOFL=tracks  99 is maximum
    DEN=
        1 = 7-Track 556 bits-per-inch
        2 = 7-Track 800 bpi or 9-Track 800 bpi NRZI
        3 =                    9-Track 1600 bpi PE
        4 =                    9-Track 6260 bpi GDR
    DIAGNS=TRACE    if GTF is running
    DSORG=
          PS = Physical Sequential
          PSU = PS unmovable
          DA = Direct Access
          DAU = DA unmovable
          IS = Indexed Sequential
          ISU = IS unmovable
          PO = Partitioned Data Set (PDS oe PDSE)
          POU = PO unmovable
          CX = Communication line group
          GS = Graphic data control block
          * unmovable means there is location dependent data in file
    EROPT=
          T  BTAM = BTAM on-line terminal test option
          ACC  QSAM = Accept bad blocks
          SKP  QSAM = Skip bad blocks
          ABE  QSAM = Abend if a bad block  (Default)
    FUNC=            For 2505 Card reader or 3525 Card punch
         I = punching and printing
         R = reading                    (default for input)
         P = punching                   (default for output)
         W = printing
         D = protected for punching
         X = punching and printing
         T = two line print
    GNCP=n       number of I/O macro instructions before a WAIT
    INTVL=n|0    seconds to wait between passes through an invitation
    IPLTXID=membername  member to load into a 3704/3705 Comm Cnltr
    KEYLEN=bytes       length of key
    LIMCT=blocks|tracks if relative block addressing is used
    LRECL=bytes|X      logical record length
    MODE=C O  Card image optional mark read mode
         E R  EBCDIC mode read column eliminate
    NCP=1-99     maximum read or write before CHECK
    NTM=tracks  number of tracks for a cylinder index
    OPTCD=
          A        BDAM A = actual devaddrin read and write
          R             R = relative block addresses
            E             = extended search (see LIMCT)
              F           = feedback can be requested
                W         = requests validity check on writes
          L        BISAM  = deleted records when first byte all ones
            R             = put reorganization data in dcb
              W           = requests validity check on writes
          C        BPAM   = has no effect
          W               = requests validity check on writes
          CW              = requests validity check on writ
          B        BSAM and QSAM = ignore EOF on tape
          C                      = chained scheduling
          H                      = empty hopper exit
          J                      = TRC in output for AFP printer
          Q                      = ASCII data
          T                      = requests user totaling facility
          U                      = UCS for 1403 or 3211 printer,
                                   permit data checks on 3800
          W                      = requests validity check on writes
          Z                      = only 5 errors on magnetic reel input
          I        QISAM = use overflow area
          L              = delete records when first byte all ones
          M              = master index as per NTM
          R              = put reorganization data in dcb
          U              = accumulate track index entries by track
          W              = requests validity check on writes
          Y              = use cylinder overflow area
          c        TCAM = one byte tells first, middle, last segments
          U             = work unit is a message
    PCI=N,N            whether PCI is used to allocate and free buffers
        R,R
        A,A
        X,X
    PRTSP=0-3           Line spacing if not RECFM=A|M ignored by JES2
    RECFM=
    RESERVE=(bytes,bytes)
    RKP=number           relative key position
    STACK=1-2            which stacker on pucn gets card
    THRESH=nn            percent of nonreusabl disk msg queue records
    TRTCH=               Recording technique for 7-Track tape
          C     =    data conversion,  odd parity, no translation
          E     = no data conversion, even parity, no translation
          T     = no data conversion,  odd parity, BCD / EBCDIC
          ET    = no data conversion, even parity, BCD / EBCDIC
        default = no data conversion,  odd parity, no translation
          COMP  = data compaction
          NOCOMP = no data compaction

./ ADD NAME=DD$DDNAM 0100-07007-07007-1205-00019-00019-00000-IBM

Sneaky way to delay providing the DD information until later in the
job step. PROCEDURES often defer to another DDNAME to avoid having
an override.

//MYPROC  PROC
//MYSTEP  EXEC PGM=IEFBR14
//MYDD     DD  DDNAME=YOURDD
//        PEND
//*
//YOURSTP EXEC PROC=MYPROC
//YOURDD   DD  *                     <== DELAYED DDNAME=
my instream data
/*
//MYOTHER EXEC PROC=MYPROC
//MYSTEP.MYDD  DD  *                 <== OVERRIDE
my instream data
/*

./ ADD NAME=DD$DEST  0100-07007-07007-1205-00028-00028-00000-IBM

A parameter used to route output to another destination, usually a
remote printer.

DEST=destination as defined by your installation

  destination (JES2):
     LOCAL
     name
     Nnnnnn
     NnRmmmmm to NnnnnnRm            (node,remote)
     Rnnnnn or RMnnnnn or RMTnnnnn
     Unnnnn
     (node,userid)

  destination (JES3):
     ANYLOCAL
     device-name
     device-number
     group-name
     nodename
     (node,userid)

nnnnn = 1 - 32767
(node,userid): node (1 - 8 alphanumeric or $, #, @ characters) and
TSO/E userid (1 - 7 alphanumeric or $, #, @ characters) or VM userid
(1 - 8 alphanumeric or $, #, @ characters)

./ ADD NAME=DD$DISP  0100-07007-07007-1205-00014-00014-00000-IBM

Describes the status of the data set and tells the system to do the
following with the data set after normal or abnormal termination of the
step or job: delete or keep it on its volume(s), pass it to a later
step, or add it to or remove it from the catalog.

DISP=(Ýstatus¨Ý,normal-termination-disp¨ Ý,abnormal-termination-disp¨)

status: NEW, OLD, SHR (for shared), MOD (for data set to be modified)

normal-termination-disp: DELETE, KEEP, PASS, CATLG, or UNCATLG

abnormal-termination-disp: DELETE, KEEP, CATLG, or UNCATLG

./ ADD NAME=DD$DLM   0100-07007-07007-1205-00006-00006-00000-IBM

Specify an alternate end-of-data (EOD) delimiter. Used when instream
data may have valid JCL control cards.

DLM=delimiter

./ ADD NAME=DD$DSID  0100-07007-07007-1205-00007-00007-00000-IBM

Identifies a data set on a diskette of a 3540 Diskette Input/Output
Unit. How obscure are those?

DSID={ID}
     {ID,V}

./ ADD NAME=DD$DSNAM 0100-07007-07007-1205-00036-00036-00000-IBM

Specifies the data set name on disk or tape.

{DSNAME} = {dsname }
{DSN }
           {dsname(member-name) }
           {dsname(generation-number) }
           {dsname(area-name) }
           {&&dsname }
           {&&dsname(member-name) }
           {&&dsname(area-name) }
           {*.ddname }
           {*.stepname.ddname }
           {*.stepname.procstepname.ddname}
           {NULLFILE }

unqualified dsname: 1 - 8 alphanumeric or $, #, @ characters, -, +0

qualified dsname: multiple names joined by periods

member-name: member in PDS or PDSE

generation-number: 0 or signed integer

area-name: INDEX, PRIME, or OVFLOW area in indexed sequential data set

&&dsname: temporary data set name

*.ddname: copy dsname from earlier DD

stepname: DD in named step

procstepname: step in named procedure

NULLFILE: dummy data set

./ ADD NAME=DD$DSNTY 0100-07007-07007-1205-00016-00016-00000-IBM

Specifies the type of data set.

DSNTYPE= {LIBRARY}
         {HFS }
         {PDS }
         {PIPE }

LIBRARY: partitioned data set extended (PDSE)

HFS: hierarchical file system (HFS) data set

PDS: partitioned data set

PIPE: FIFO special file

./ ADD NAME=DD$EXPDT 0100-07007-07007-1205-00011-00011-00000-IBM

Used to set a date to prevent accidentally overwriting the file.
Some Tape Subsystems use special dates for enhanced processing.

EXPDT= {yyddd }
       {yyyy/ddd}

yyddd: expiration date (yy: 2-digit year, ddd: day 001-366)

yyyy/ddd: expiration date (yyyy: 4-digit year, ddd: day 001-366)

./ ADD NAME=DD$FCB   0100-07007-07007-1205-00013-00013-00000-IBM

Specify a FORMs Control Buffer image to work in conjunction with
the ADVANCING portion of an output record sent to a printer. The
contents of column 1 can be ISO/ANSI or MACHINE control characters.
In my days you had a real piece of paper, taped in a loop, and punched
holes to correspond with where the printer should "jump" when
advancing. Nowadays, this is an object stored in SYS1.IMAGELIB or
with your TCP/IP printing software.

FCB= {fcb-name }
     {(fcb-name Ý,ALIGN ¨ ) }
                Ý,VERIFY ¨

./ ADD NAME=DD$FILED 0100-07007-07007-1205-00011-00011-00000-IBM

Specifies the organization of a hierarchical file. You know, something
in your UNIX System Services environment.

FILEDATA= {BINARY}
          {TEXT }

BINARY: byte-stream file

TEXT: delimited by the EBCDIC newline character

./ ADD NAME=DD$FLASH 0100-07007-07007-1205-00016-00016-00000-IBM

For printing on a 3800 Printing Subsystem, indicates that the data set
is to be printed with the named forms overlay and can specify how many
copies are to be flashed.

FLASH= {overlay-name }
       {(overlay-nameÝ,count¨)}
       {NONE }

overlay-name: forms overlay frame (1 - 4 alphanumeric or $, #, @
characters)

count: copies with overlay (0 - 255)

NONE: suppresses flashing

./ ADD NAME=DD$FREE  0100-07007-07007-1205-00011-00011-00000-IBM

Specifies when to unallocate the resources for this data set.
This can speed up getting output of a step to a printer.

FREE= {END }
      {CLOSE}

END: unallocate at end of last step   <== The default

CLOSE: unallocate when data set is closed

./ ADD NAME=DD$HOLD  0100-07007-07007-1205-00009-00009-00000-IBM

Whether the output is held until an operator releases it or can be
processed automatically.

HOLD= {YES}
      {Y }
      {NO }
      {N }

./ ADD NAME=DD$KEYLE 0100-07007-07007-1205-00011-00011-00000-IBM

I've only seen this used with the PASSWORD dataset. And any security
package is far better than relying on the PASSWORD dataset. However,
there might some other type of data set you can cause yourself trouble
by using. So, if you use this then also see DD@KEYOF.

KEYLEN=bytes

bytes: number of bytes (1-255 for key-sequenced (KS), 0-255 for
sequential (PS) or partitioned (PO))

./ ADD NAME=DD$KEYOF 0100-07007-07007-1205-00013-00013-00000-IBM

I've only seen this used with the PASSWORD dataset. And any security
package is far better than relying on the PASSWORD dataset. However,
there might some other type of data set you can cause yourself trouble
by using. So, if you use this then also see DD@KEYLE.

With SMS only:

KEYOFF=offset-to-key

offset-to-key: position of key (0 to difference of LRECL and KEYLEN
minus 1)

./ ADD NAME=DD$LABEL 0100-07007-07007-1205-00031-00031-00000-IBM

For tape data sets, which file on the tape, what type of labels, and
other parameters used to control access and retention.

LABEL=(Ýdata-set-seq-no¨Ý,label-type¨Ý,PASSWORD¨)Ý,IN¨ Ý,RETPD=nnnn¨)
                                     Ý,NOPWREAD¨)Ý,OUT¨Ý,EXPDT={yyddd}¨
                                     Ý, ¨)       Ý, ¨  Ý    {yyyy/ddd}¨

data-set-seq-no: data set position on tape volume (1 - 4 decimal digits)

label-type: SL: IBM standard labels
            SUL: IBM standard and user labels
            AL: ISO/ANSI Version 1 and ISO/ANSI/FIPS Version 3 labels
            AUL: user labels and ISO/ANSI Version 1 and ISO/ANSI/FIPS
                 Version 3 labels
            NSL: nonstandard labels
            NL: no labels
            BLP: bypass label processing
            LTM: leading tapemark

PASSWORD: password required to access data set
NOPWREAD: password required to change or delete data set

IN: only read BSAM data set opened for INOUT or BDAM data set opened
    for UPDAT
OUT: only write to BSAM data set opened for OUTIN or OUTINX

RETPD=nnnn: retention period (nnnn: 1 - 4 decimal digits)
EXPDT=yyddd: expiration date (yy: 2-digit year, ddd: day 001 - 366)
EXPDT=yyyy/ddd: expiration date (yyyy: 4-digit year, ddd: day 001 - 366)

./ ADD NAME=DD$LGSTR 0101-07007-07021-2325-00003-00002-00000-KTOMIAK

LGSTREAM=

./ ADD NAME=DD$LIKE  0100-07007-07007-1205-00005-00005-00000-IBM

Get data set attributes from another data set.

LIKE=data-set-name

./ ADD NAME=DD$LRECL 0100-07007-07007-1205-00007-00007-00000-IBM

Specify the length of records in the file. If you specify it, you
better get it correct.

bytes: length in bytes (1-32,760 for PS or PO,
                        1-32,761 for KS, ES, or RR)

./ ADD NAME=DD$MGMTC 0100-07007-07007-1205-00006-00006-00000-IBM

With SMS, used to let a defined MGMTCLAS set of attributes define
how DFSMShsm will manage the data set.

See your own installation standards to know what to use.

./ ADD NAME=DD$MODIF 0100-07007-07007-1205-00007-00007-00000-IBM

Specified a copy-modification module to be used on a 3800 Printing
Subsystem.

MODIFY= {module-name }
        {(module-nameÝ,trc¨)}

./ ADD NAME=DD$OUTLI 0100-07007-07007-1205-00008-00008-00000-IBM

Used to limit how much output you can generate. Exceed this number
and your step ABENDS. Usually a S722 abend.

OUTLIM=number

number: 1 - 16777215 logical records maximum

./ ADD NAME=DD$OUTPU 0101-07007-07007-1205-00099-00099-00000-IBM

Attaches this DD statement with a previously defined OUTPUT statement.

OUTPUT= {reference }
        {(referenceÝ,reference¨...)}

reference:
*.name
*.stepname.name
*.stepname.procstepname.nameSee topic 12-148
name: names earlier OUTPUT JCL statement
stepname: OUTPUT JCL in named step
procstepname: step in named procedure

//*
//OUTDS OUTPUT ADDRESS=('address line 1   ',
//             'line 2, these can be',
//             'up to 65 characters each'),
//*            AFPSTATS=                {YES|Y|NO|N}
//             BUILDING='65chr max',
//*            BURST=                   {YES|Y|NO|N}
//             CHARS=GT12,
//*            CHARS=(font-name,font-name...),
//*            CHARS=STD,
//*            CHARS=(DUMP,font-name,font-name...),
//*            CKPTLINE=nnnnn,          0-32767
//*            CKPTPAGE=nnnnn,          0-32767
//*            CKPTSEC=nnnn,            0-32767
//             CLASS=x,                 A-Z,0-9,*
//*            COLORMAP=resource,
//*            COMPACT=compaction-font-name,
//*            COMSETUP=resource,
//*            CONTROL=                 {PROGRAM|SINGLE|DOUBLE|TRIPLE}
//             COPIES=1,                JES2=1-255, JES3=0-255
//*            DATACK=                  {BLOCK|UNBLOCK|BLKCHAR|BLKPOS}
//             DEFAULT=YES,             {YES|Y|NO|N}
//             DEPT='SYSTEM PROGRAMMING',
//*            DEST=LOCAL,        JES2  LOCAL|IP:ipaddr|name|
//*                                     node.IP:ipaddr|
//*                                     NnRrrrr-NnnnnnRr|(node,remote)|
//*                                     node.userid|Rrrrrr|RMrrrrr|
//*                                     RMTrrrrr|Uuuuuu
//*                               JES3  ANYLOCAL|IP:ipaddr|name|
//*                                     node.IP:ipaddr|
//*                                     device-name|group-name|
//*                                     node|node.remote
//             DPAGELBL=YES,            {YES|Y|NO|N}
//             DUPLEX=NORMAL,           {NO|N|NORMAL|TUMBLE}
//             FCB=STD,                 {fcb-name|STD}
//*            FLASH=overlay-name,      |STD|NONE
//             FORMDEF=0101LA,          BLANK/LANDSCAPE
//*            FORMLEN=nn.mmmIN|CM,
//*            FORMS=form-name,         |STD
//*            FSSDATA=value,
//*            GROUPID=output-group,
//*            INDEX=nn,                1-31
//*            INTRAY=nnn,              1-255
//             JESDS=ALL,               ALL|JCL|LOG|MSG
//*            LINDEX=nn,               1-31
//*            LINECT=nnn,              0-255
//*            MODIFY=module-name,
//             NAME='your name here',   1-60 chars
//*            NOTIFY=(node.userid,...),
//*            OFFSETXB=mmmm.nnnIN|CM|MM|PELS|POINTS,
//*            OFFSETXF=mmmm.nnnIN|CM|MM|PELS|POINTS,
//*            OFFSETYB=mmmm.nnnIN|CM|MM|PELS|POINTS,
//*            OFFSETYF=mmmm.nnnIN|CM|MM|PELS|POINTS,
//*            OUTBIN=nnnn,             1-65535
//             OUTDISP=(HOLD,HOLD)      (normal,abnormal)
//*                                     WRITE|HOLD|KEEP|LEAVE|PURGE
//*            OVERLAYB=name,
//*            OVERLAYf=name,
//*            OVFL=ON,                 ON|OFF
//             PAGEDEF=06080,
//*            PAGEDEF=06080            BLANK/LANDSCAPE/60LINES/8LPI
//*            PAGEDEF=08081            BLANK/PORTRAIT /80LINES/8LPI
//*            PIMSG=(YES,msg-count),   YES|NO,msg-count
//*            PORTNO=nnnnn,            TCPIP port number
//*            PRMODE=                  LINE|PAGE|process-mode
//*            PRTERROR=                DEFAULT|QUIT|HOLD
//*            PRTOPTNS=options-data-set-name,
//*            PRTQUEUE=print-queue-name,
//*            PRTY=nnn,                0-255
//*            RESFMT=                  P240|P300
//*            RETAINF=hhhh:mm:ss       |FOREVER
//*            RETAINS=hhhh:mm:ss       |FOREVER
//*            RETRYL=nnn,
//*            RETRYT=hh:mm:ss,
//             ROOM='13th FLOOR',
//*            SYSAREA=NO,              YES|Y|NO|N
//*            THRESHOLD=nnnnnnnn,      1-99999999
//             TITLE='*** PRINTOUT FROM A BATCH JOB ***', 1-60 chars
//*            TRC=NO,                  YES|Y|NO|N
//*            UCS=character-set-code
//             USERDATA='*installation-dependent*', 1-60 chars
//*            USERLIB=(data-set-name,...),
//*            WRITER=writer-name
//THISDD   DD  SYSOUT=*,OUTPUT=(*.OUTDS)

./ ADD NAME=DD$PATH  0100-07007-07007-1205-00005-00005-00000-IBM

Specifies a UNIX System Services file.

//             PATH='/u/MYUSER/filename.txt'

./ ADD NAME=DD$PATHD 0100-07007-07007-1205-00010-00010-00000-IBM

Specifies whether to keep the file or not.

PATHDISP=(normal-termination-disposition,
          abnormal-termination-disposition)

normal-termination-disposition: KEEP, DELETE

abnormal-termination-disposition: KEEP, DELETE

./ ADD NAME=DD$PATHM 0100-07007-07007-1205-00017-00017-00000-IBM

Specifies the attributes when creating a file in UNIX System Services.

PATHMODE=file-access-attribute
PATHMODE=(file-access-attribute Ý,file-access-attribute¨...)

file-access-attribute for file owner class: SIRUSR, SIWUSR, SIXUSR,
SIRWXU

file-access-attribute for file group class: SIRGRP, SIWGRP, SIXGRP,
SIRWXG

file-access-attribute for file other class: SIROTH, SIWOTH, SIXOTH,
SIRWXO

file-access-attribute to set process IDs: SISUID, SISGID

./ ADD NAME=DD$PATHO 0100-07007-07007-1205-00011-00011-00000-IBM

Specifies the options when accessing a file in UNIX System Services.

PATHOPTS=file-option
PATHOPTS=(file-optionÝ,file-option¨...)

file-option for access group: ORDONLY, OWRONLY, ORDWR

file-option for status group: OAPPEND, OCREAT, OEXCL, ONOCTTY,
ONONBLOCK, OTRUNC

./ ADD NAME=DD$PROTE 0100-07007-07007-1205-00005-00005-00000-IBM

Have RACF create a discrete profile. Tis a silly way to do this.

PROTECT=YES

./ ADD NAME=DD$QNAME 0100-07007-07007-1205-00003-00003-00000-IBM

Used with TCAM, but that went away ages ago.

./ ADD NAME=DD$RECFM 0100-07007-07007-1205-00016-00016-00000-IBM

Specifies the record format of a file.

RECFM= {   } Ý ¨
             ÝA¨ ISO/ANSI
             ÝM¨ Machine
       {F  } Fixed
       {FB } Fixed Blocked
       {FBS} Fixed Blocked Spanned
       {FS } Fixed Spanned
       {V  } Variable
       {VB } Variable Blocked
       {VBS} Variable Blocked Spanned
       {VS } Variable Spanned
       {U  } Undefined

./ ADD NAME=DD$RECOR 0100-07007-07007-1205-00016-00016-00000-IBM

Specifies the organization of the records in a VSAM data set.

With SMS only:

RECORG= {KS}
        {ES}
        {RR}
        {LS}

Organization of records:
KS: key-sequenced
ES: entry-sequenced
RR: relative record
LS: linear space

./ ADD NAME=DD$REFDD 0100-07007-07007-1205-00003-00003-00000-IBM

Get attributes from another DD statement.

./ ADD NAME=DD$RETPD 0100-07007-07007-1205-00003-00003-00000-IBM

Set how long to retain (keep) the file.

./ ADD NAME=DD$RLS   0100-07007-07007-1205-00009-00009-00000-IBM

When doing VSAM Record Level Sharing, what data integrity do you want.

RLS= {NRI}
     {CR }

NRI: can read uncommitted changes  (We don' need no stinkin' integrity)
CR: can read only committed changes

./ ADD NAME=DD$SECMO 0100-07007-07007-1205-00011-00011-00000-IBM

Specifies a RACF profile to be used for a new data set.
Tis another silly way to do this.

With SMS only:

SECMODEL=(profile-nameÝ,GENERIC¨)

profile-name: name of model profile
GENERIC: model is generic profile

./ ADD NAME=DD$SEGME 0100-07007-07007-1205-00008-00008-00000-IBM

Specifies the number of pages in a SYSOUT dataset at which point the
segment is SPUN-OFF for processing in a JES2 environment.

SEGMENT=page-count

page-count: number of pages of a sysout data set

./ ADD NAME=DD$SPACE 0102-07007-07007-1205-00054-00054-00000-IBM

How much and what type of space a disk dataset gets for a new
allocation. Some Tape Subsystems use this for enhanced processing.

For system assignment of space:
SPACE=({TRK, } (primary-qty Ý,second-qty¨ Ý,directory¨) Ý,RLSE¨ Ý,CONTIG¨ Ý,ROUN
D¨ )
       {CYL, } Ý, ¨ Ý,index ¨ Ý, ¨ Ý,MXIG ¨
       {blklgth,} Ý,ALX ¨
       {reclgth,} Ý, ¨

To request specific tracks:
SPACE=(ABSTR, (primary-qty,address Ý,directory¨))
      Ý,index ¨

To request directory blocks (with SMS only):
SPACE=(,(,,directory))

TRK: allocation in tracks
CYL: allocation in cylinders
blklgth: allocation in average blocks, 1 - 65535
reclgth: allocation in average records (SMS)

primary-qty: number of tracks, cylinders or blocks to be allocated
  using a 3390 with recfm=fb blksize=27920 lrecl=80
   1 trk held 659 records

second-qty: additional tracks or cylinders to be allocated, if more are
needed

directory: number of 256-byte records for PDS directory
  on a 3390 - 44 Directory blks use 1 TRK
               1 Directory blk can store 5 members with ISPF stats
               1 DIRECTORY BLK CAN STORE 20 MEMBERS WITH NO STATISTCS
               1 Directory blk can store 6 load modules
                 load modules always have statistics

index: tracks or cylinders for index of indexed sequential data set

RLSE: release unused space when data set is closed

CONTIG: contiguous primary allocation

MXIG: allocation in largest available space (not supported for indexed
sequential data sets)

ALX: allocation of up to 5 separate contiguous primary quantities

ROUND: allocation by block length rounded to integral cylinders

ABSTR: allocation at the specified address

address: track number of first track to be allocated

./ ADD NAME=DD$SPIN  0100-07007-07007-1205-00014-00014-00000-IBM

Whether output is available for processing upon unallocation or end
of job. If you create five reports and want them bundled then you
want SPIN=NO. If you want to get the first report printing before
the completes then you want SPIN=UNALLOC.

SPIN= {UNALLOC}
      {NO }

UNALLOC: the data set is available for printing immediately upon
unallocation

NO: the data set is available for printing at the end of the job

./ ADD NAME=DD$STORC 0100-07007-07007-1205-00006-00006-00000-IBM

With SMS, used to let a defined STORCLAS set of attributes define
where DFSMS will place the data set.

See your own installation standards to know what to use.

./ ADD NAME=DD$SUBSY 0100-07007-07007-1205-00010-00010-00000-IBM

Used to specify which subsystem should process this output.

SUBSYS= (subsystem-name )
        (Ý,subsystem-parameter¨...)

subsystem-name: identifies the subsystem

subsystem-parameter: specifies information for the subsystem

./ ADD NAME=DD$SYSOU 0100-07007-07007-1205-00018-00018-00000-IBM

Specifies an output class. This can be print or punch output. The
SYSOUT class characteristics are defined for your installation.
"B" is the de-facto standard for punch.

SYSOUT=class
SYSOUT=(Ýclass¨ Ý,writer-name¨ Ý,form-name¨)
                Ý,INTRDR ¨ Ý,code-name¨
                Ý, ¨
SYSOUT=*
SYSOUT=(,)

class: A - Z, 0 - 9
writer-name: 1 - 8 alphanumeric or $, #, @ characters
form-name: 1 - 4 alphanumeric or $, #, @ characters
code-name: 1 - 4 alphanumeric or $, #, @ characters (JES2 only)
*: same output class as MSGCLASS parameter on JOB statement

./ ADD NAME=DD$TERM  0100-07007-07007-1205-00010-00010-00000-IBM

The TERM parameter has no function in an APPC scheduling environment.
In a foreground job,indicates that this data set is coming from or
going to a TSO/E userid. In a batch job, indicates that this DD
statement begins an in-stream data set.

I've only seen this used in TSO logon procedures.

TERM=TS

./ ADD NAME=DD$UCS   0100-07007-07007-1205-00017-00017-00000-IBM

Specifies universal character set, print train, or font for an AFP
printer. In my days, a print train was a large metal housing which
contained a set of characters. The printer had hammers that struck
the back of the paper, pushing the paper against a ribbon and
the character on the train. Much like a typewriter.

UCS= {character-set-code }
     {(character-set-code Ý,FOLD¨ Ý,VERIFY¨)}
     { Ý, ¨ }

character-set-code: 1 - 4 alpha- numeric or $, #, @ characters

FOLD: operator load chain or train in fold mode

VERIFY: operator verify UCS image

./ ADD NAME=DD$UNIT  0100-07007-07007-1205-00029-00029-00000-IBM

Specifies which type of hardware device is to be used for a data set.
The two most common devices are disk and tape. Installation defined
names map to physical devices. Check your standards.

UNIT= (Ýddd ¨ Ý,unit-count¨Ý,DEFER¨)
       Ý/ddd ¨ Ý,P ¨
       Ý/dddd ¨ Ý, ¨
       Ýdevice-type ¨
       Ýgroup-name ¨
UNIT=AFF=ddname

device-number: 3-digit or 4-digit

hexadecimal number (/ required before 4-digit number and optional before
3-digit number)

device-type: machine type and model group-name: 1 - 8 alphanumeric or $,
#, @ characters

unit-count: 1 - 59

P: allocate same number of devices as volumes for parallel mount

DEFER: defers mounting until open

AFF=ddname: requests allocation of same devices as for DD statement
ddname

./ ADD NAME=DD$VOLUM 0100-07007-07007-1205-00040-00040-00000-IBM

Identifies the volume(s) on which a data set resides or will reside.
Tis a better world if you let the system determine this for new
allocations and let the catalog provide it for existing data sets.

{VOLUME}=(ÝPRIVATE¨ Ý,RETAIN¨ Ý,volume-seq-no¨Ý,volume-count¨Ý,¨
ÝSER=(serial-numberÝ,serial-number¨...)¨)

{VOL } Ý, ¨ Ý, ¨ ÝREF=dsname ¨
ÝREF=*.ddname ¨
ÝREF=*.stepname.ddname ¨
ÝREF=*.stepname.procstepname.ddname ¨
ÝREF=*.procstepname.ddname ¨

PRIVATE: requests a private volume

RETAIN: requests private tape volume remain mounted and unwound or
requests public tape volume be retained at device

volume-seq-no: begins processing with volume 1 - 255 of existing
multivolume data set

volume-count: maximum volumes for output data set (1 - 255)

serial-number subparameters (1 - 255):

volume serial numbers (1 - 6 alphanumeric, $, #, @, or special
characters)

REF: copy volume serial numbers from another data set or earlier DD
statement, or copy storage class for SMS-managed data sets

dsname: from cataloged or passed data set

ddname: from named earlier DD statement

stepname: DD in named step

procstepname: step in named procedure

./ ADD NAME=DDNAMES  0108-07007-07178-2204-00166-00123-00000-KTOMIAK

"Reserved DD Statements."
Do not use the following ddnames on a DD statement in a JES2 system.
They have special meaning to JES2.

  JESJCLIN
  JESMSGLG
  JESJCL
  JESYSMSG

Do not use the following ddnames on a DD statement in a JES3 system.
They have special meaning to JES3.

  JCBIN
  JESJCL
  JS3CATLG
  JCBLOCK
  JESMSGLG
  J3JBINFO
  JCBTAB
  JOURNAL
  J3SCINFO
  JESJCLIN
  JST
  J3STINFO
  JESInnnn
  JESYSMSG
  STCINRDR
  TSOINRDR

"Special DD Statements."
  JOBCAT
  SYSCHK
  JOBLIB
  SYSCKEOV
  STEPCAT
  SYSIN
  STEPLIB
  SYSMDUMP
  SYSABEND
  SYSUDUMP

"Product DD Statements." - Know when to use them
  $ORTPARM    SORT     SYNCSORT parameter overrides
  CEEDUMP     CEE      Language Environment
  DFHCSD      CICS
  DFHRPL      CICS     Runtime Program Library - like STEPLIB
  DFSPARM     SORT     DFSort parameter overrides
  DFSUINnn    IMS
  DFSURIDX    IMS
  HCDPROF     HCD      Profile
  IDCUT1      DFP      Used for BLDINDEX workfile
  IDCUT2      DFP      Used for BLDINDEX workfile
  INPUT       FTP      Input stream of commands
  IPCSPARM    IPCS     Library with IPCS routines
  ISPALIB     ISPF     APL2 support
  ISPCTL##    ISPF
  ISPILIB     ISPF     Images for GUI
  ISPLLIB     ISPF     Load Library - like STEPLIB
  ISPLOG#     ISPF     Log of activity
  ISPLST#     ISPF     Printed listing of members
  ISPMLIB     ISPF     Message Library
  ISPPLIB     ISPF     Panel Library
  ISPPROF     ISPF     Profile
  ISPSLIB     ISPF     Skeleton Library
  ISPTABL     ISPF     Table Library Output
  ISPTLIB     ISPF     Table Library Input
  NAMES       TSO      Transmit nickname file
  NETRC       FTP      Network resource connections
  OUTPUT      FTP      Messages
  PARMLIB     z/OS     In MSTJCLxx
  PROCLIB     z/OS     In MSTJCLxx
  PROC##      JES2     Used in JES2 Procedure
  PROFILE     TCPIP
  SGCDUMP     BMC      Mainview dump
  SGCTRACE    BMC      Mainview trace
  SMPCSI      SMPE     Consolidated Software Inventory repository
  SMPHOLD     SMPE
  SMPLIST     SMPE
  SMPLOG      SMPE     Internally captured messages
  SMPLOG      SMPE     Internally captured messages Alternate
  SMPLTS      SMPE     Long term Storage
  SMPMTS      SMPE     Macro Temporary Storage
  SMPOUT      SMPE     Output
  SMPPTFIN    SMPE
  SMPPTS      SMPE     PTF Temporary Storage
  SMPPUNCH    SMPE
  SMPRPT      SMPE     Report
  SMPSCDS     SMPE     Source Control Data Set
  SMPSNAP     SMPE     SNAP Dumps
  SMPSTS      SMPE     Source Temporary Storage
  SMPTABL     SMPE     ISPF Table Library
  SMPTLIB     SMPE     Target Library allocations
  SORTDIAG    SORT     Diagnostic messages
  SORTIN      SORT     Input data to sort
  SORTLIB     SORT     library of routines and exits
  SORTMSG     SORT     Output Messages
  SORTOUT     SORT     Output data from sort
  SORTWK*     SORT
  SYS*        *        Temporary DDnames
  SYSEXEC     TSO      Source for REXX Procedures
  SYSHELP     TSO      Help
  SYSPROC     TSO      Source for CLIST and REXX Procedures
  SYSLBC      TSO      Broadcast
  SYSLIB      *        COPY, MACRO, OBJECT for inclusions
  SYSLIN      HEWL     Input to Binder (Linkage Editor)
  SYSOUT      *        Usually output messages
  SYSPRINT    *        Usually output reports or messges
  SYSFTPD     FTP      CLIENT Defaults
  SYSTCPD     TCPIP    Defaults
  SYSTSIN     TSO      input
  SYSTSPRT    TSO      Output
  SYSUADS     TSO      User Attributes Data Set
  SYSUT1      *        Usually input for a Utility
  SYSUT2      *        Usually output for a Utility
  SYSUT3      *        Utility work data set
  SYSUT4      *        Utility work data set
  SYSUT6      *        Utility work data set
  TOOLIN      SORT     Input data to ICETOOL
  TOOLMSG     SORT     Output Messages
  TSOLIB      TSO      Load Library - like STEPLIB
  UTPRINT     DB2      Utility output messages
  *llq*       SMPE     By convention, the last qualifier is DDNAME

"Disabling DD Statements." - Know when to use them
//ddname   DD  DUMMY   is usually all it takes.
  ABNLIGNR    AbendAid Disable
  CAOESTOP    CA-OPT   Turn CA-OPT II & CA-SYMDUMP OFF
  CAHBEXCL    Hyperbuf bypass CA- Hyperbuf
  DMBENAN     DUMPMSTR TURN OFF DUMPMASTER
  ESPYIBM     EYE-SPY  Turn it OFF
  FCOPYOFF    PDSMAN   Disable FastCopy
  IDIOFF      IBMFA    Turn IBM FAULT ANALYZER OFF
  NPDSFAST    SEA      Turn off PDSFAST
  PLDIGN      PoolDasd Mainview SRM Allocation
  PROIGN               Mainview SRM Allocation
  BYPASPRO    ProSMS   Mainview SRM Allocation
  PSPOFF      SoftWork Perfromance Essentials
  ULT@SOFF    StarTool Bypassf Serena's StarTool IOO optimization
  VDSBYPAS    VAM      Bypass VAM during allocation

  X$abbbN     ASM2     Computer Associates
    abbb ============> Option
    a                  ASY
    a                  CND
    a                  DFR
    a                  FRC
    a                  IAS
    a                  INT
    a                  IXR
    a                  QUI
    a                  SEC
    a                  S99
    a                  UJI
    a                  USI
    a                  VER
    a                  X37
    a                  213
    a                  26A
    a                  26J
    a                  26V
    a                  522
    a ===============> Scope
                       J = Job
                       S = Step
                       I = immediate (TSO)
./ ADD NAME=ENDCNTL  0100-07007-07007-1205-00005-00005-00000-IBM

//label ENDCNTL

See CNTL.

./ ADD NAME=EOD      0100-07007-07007-1205-00020-00020-00000-IBM

/*

A throwback to when a job could allocate the card reader for a ddname.
The 'Computer Operator' would get a prompt on the console to load
data into the card reader. Everything fed into the card reader was
processed as data until the end-of-data card was read. This signalled
the end of the file. It was common to have a bunch of these laying
around. They were also handy in slipping them between a mounted
reel of tape (yeah, real tapes are round like your scotch tape
dispenser and are called 'reels') to fool the drive into thinking
the yellow write protect ring was in place for an output tape.
Pity the poor Operator that mounted the wrong reel and did this.


user specified delimiter

The two characters you specify using the DLM parameter. Useful if you
have instream data that contains the '/*' control card.

./ ADD NAME=EOJ      0100-07007-07007-1205-00015-00015-00000-IBM

//

A throwback to when JCL and data was actually punched on a card. This
signalled when the end of a job was reached and the system could start
processing it. Eventually the system could tell the end of one job
when it saw another jobcard. Then when terminals came into vogue,
TSO and ISPF submits read until the end of file, which signalled the
end of a job. So, it is no longer required, wastes disk space, but
lets you keep JCL in the same member which is not processed.

Oh yeah, instead of deleting those last steps, just insert an EOJ
after the last statement you want as part of the job, then submit.
Voila`, the remaining JCL is not submitted and you still have it!

./ ADD NAME=EXEC     0103-07007-07007-1205-00081-00081-00000-IBM

//*====================================================================
//*=
//*= Give a description of what this step is meant to do.
//*= List any non-zero CONDCODE values that are acceptable.
//*= Consider restart and/or recovery actions if it fails.
//*=   A failure can be an ABEND or an unacceptable CONDCODE value.
//*=
//*====================================================================
// EXEC

The EXEC statement identifies the program to be executed or a
procedure to be invoked. You can have a maximum of 255 job steps.

//Ýstepname¨ EXEC positional-parmÝ,keyword-parm¨...,
// Ý,symbolic-parm=value¨... Ýcomments¨

//             ACCT='Up to 142 characters' - I could only get 127
//             ADDRSPC=VIRT | REAL
//             CCSID= convert ISO/ANSI V4 tape data (LABEL=,AL|AUL)
//             COND=
//             DYNAMNBR=nnnn = 0 through 3273 minus DD's in the step.
//             MEMLIMIT=nnnnn M | G | T | P - pages above the bar
//             PARM='Up to 100 characters'
//             PERFORM= Deprecated with WLM
//             PGM=
//             PROC=
//             RD=R | RNC | NR | NC
//             REGION=rrrr K | M If < 16M then within Private
//             RLSTMOUT=ssss   0 - 9999 seconds
//             TIME=(mm,ss) | NOLIMIT | 0 | MAXIMUM

//A020 SET A020='12345678901234567890'
//A040 SET A040='12345678901234567890'
//A060 SET A060='12345678901234567890'
//A080 SET A080='12345678901234567890'
//A100 SET A100='12345678901234567890'
//A120 SET A120='12345678901234567890'
//A127 SET A127='1234567'
//A140 SET A140='12345678901234567890'
//A142 SET A142='12'
//*
//P020 SET P020='12345678901234567890'
//P040 SET P040='12345678901234567890'
//P060 SET P060='12345678901234567890'
//P080 SET P080='12345678901234567890'
//P100 SET P100='12345678901234567890'
//*
//STEP001 EXEC PGM=CBL3PARM,
//             ACCT='&A020.&A040.&A060.&A080.&A100.&A120.&A127',
//* OR
//             ACCT='12345678901234567890123456789012345678901234567890
//             12345678901234567890123456789012345678901234567890123456
//             789012345678901234567',
//* OR
//             ACCT=(1417,J318,'D58/920','CHG=2',
// '33.95')
//*
//             CCSID=1057,        <=== ISO/ANSI V4 tape data conversion
//*
//*            COND=              <=== SEE IF
//*
//             DYNAMNBR=20,
//*
//             MEMLIMIT=99999M,   <=== 0-99999,NOLIMIT
//*
//             PARM='&P020.&P040.&P060.&P080.&P100',
//* OR
//             PARM='12345678901234567890123456789012345678901234567890
//             12345678901234567890123456789012345678901234567890'
//* OR
//             PARM=('KEY=VALUE',VALUE,KEYWORD,
//             'NEXT-PAIR',some-more')
//*
//             REGION=4M,  < 16M needs to fit in private below-the-line
//             REGION=18M  > 16M gets all below the line + some above
//             REGION=0M,  = 0M gets everything
//*
//             TIME=(357912,59)  MM = 0 THROUGH 357912 (248.55 DAYS)
//*

./ ADD NAME=IF       0101-07007-07140-1306-00087-00087-00000-KTOMIAK

// IF/THEN/ELSE/ENDIF

A set of statements that make it easier to write when you want a step
to run. The COND=() parameter on the EXEC card uses inverse logic,
you actually code when not to run the step.

//*
//MYPROCS JCLLIB ORDER=(MYSYS.IVPLIB,SYS1.PROCLIB)
//*
//* LIB: MYSYS.IVPLIB(JES2IVP3)
//* GDE: IBM REMOTE SERVICES - KENNETH E. TOMIAK
//* DOC: TESTS JES2 PROC IN A PROC, PRIVATE PROCEDURE LIBRARIES,
//*      AND THE IF/THEN/ELSE/ENDIF CONSTRUCTS.
//*
//I       PROC
//        EXEC PGM=IEFBR14
//P02#03  EXEC PGM=IEBGENER
//SYSPRINT DD  SYSOUT=*
//SYSIN    DD  DUMMY
//SYSUT1   DD  DISP=SHR,DSN=MYSYS.IVPLIB(JES2IVP3)
//SYSUT2   DD  SYSOUT=*
//I       PEND
//J       PROC
//TESTJ    IF (RC < 1) THEN                       <==== IF
//J0      EXEC PROC=I
//        ENDIF                                   <==== ENDIF
//J       PEND
//L       PROC
//TESTL    IF (RC = 0) THEN
//P0      EXEC PROC=J
//        ENDIF
//L       PEND
//*
//INC1    INCLUDE MEMBER=JES2INC
//TEST1    IF (P02#03.RC = 0) THEN                <==== IF
//S1      EXEC PGM=IEFBR14
//S2      EXEC PROC=L
//S3      EXEC PROC=L
//        ELSE                                    <==== ELSE
//T1      EXEC PGM=IEFBR14
//T2      EXEC PROC=L                             <==== ENDIF
//        ENDIF
//TEST3    IF (S1.RUN = TRUE) THEN
//S4      EXEC PROC=L
//S5      EXEC PROC=L
//        ELSE
//T3      EXEC PROC=L
//        ENDIF

                   Order of
Operator Operation Evaluation
-------- --------- ----------
NOT operator:
NOT or ¬ NOT first
Comparison operators:
GT or > Greater than second
LT or < Less than second
NG or ¬> Not greater than second
NL or ¬< Not less than second
EQ or = Equal to second
NE or ¬= Not equal to second
GE or >= Greater than or equal to second
LE or <= Less than or equal to second
Logical operators:
AND or & AND third
OR or | OR third

Relational-Expression Keywords
The following keywords are the only keywords supported by IBM and
recommended for use in relational-expressions. Any other keywords, even
if accepted by the system, are not intended or supported keywords.

Keyword Use
RC      indicates a return code
ABEND   indicates an abend condition occurred
        =TRUE
        =FALSE
¬ABEND  indicates no abend condition occurred
ABENDCC indicates a system or user completion code
        =SB37
        =U0100
RUN     indicates that the specified step started execution
        =TRUE
        =FALSE
¬RUN    indicates that the specified step did not start execution

./ ADD NAME=INCLUDE  0100-07007-07007-1205-00009-00009-00000-IBM

// INCLUDE

Pulls in JCL from a member of your JCLLIB specification or the
concatenation of PROCLIBs as defined by your installation.

//MYPROCS JCLLIB ORDER=(MYSYS.IVPLIB,SYS1.PROCLIB)
//INC1    INCLUDE MEMBER=JES2INC

./ ADD NAME=JCLLIB   0100-07007-07007-1205-00014-00014-00000-IBM

// JCLLIB

Precedes the PROCLIB concatenation defined at your installation.

//*
//JOBPROC JCLLIB ORDER=(SHARE.MVSSCPU.CNTL,&SYSUID..SAMPUTIL.CNTL)

//*
//PRIVPROC JCLLIB ORDER=(ANYAPP.PROCLIB)

//*
//MYPROCS  JCLLIB ORDER=(&SYSUID..JCL.CNTL)

./ ADD NAME=JES2CMD  0100-07007-07007-1205-00016-00016-00000-IBM

/*$command

Should you really be entering JES commands this way? If you are
authorized to issue commands this way, they execute as they are
processed, not when your job starts.

You can enter the following JES2 commands in the input stream.

$A $E $I $O $T
$B $F $L $P $TRACE
$C $G $M $R $VS
$D $H $N $S $Z

/*$D A,L

./ ADD NAME=JES2JOBP 0100-07007-07007-1205-00042-00042-00000-IBM

/*$JOBPARM
//*
/*JOBPARM  L=99,S=*

/*JOBPARM parameterÝ,parameter¨...
The parameters are:
{BURST} = {Y}
{B }      {N}
{BYTES} = nnnnnn
{M }
{CARDS} = nnnnnnnn
{C }
{COPIES} = nnn
{N }
{FORMS} = {xxxxxxxx}
{F } {STD }
{LINECT} = nnn
{K }
{LINES} = nnnnnn
{L }
{NOLOG}
{J }
{PAGES} = nnnnnnnn
{G }
{PROCLIB} = ddname
{P }
{RESTART} = {Y}
{E } {N}
{ROOM} = xxxx
{R }
{SYSAFF} = {* }
{S } {(*Ý,IND¨) }
     {ANY }
     {(ANYÝ,IND¨) }
{cccc }
{(ccccÝ,IND¨) }
{(ccccÝ,cccc¨...) }
{((ccccÝ,cccc¨...)Ý,IND¨)}
{TIME} = nnnn
{T }

./ ADD NAME=JES2MSG  0100-07007-07007-1205-00008-00008-00000-IBM

/*MESSAGE

Use the /*MESSAGE statement to send messages to the operator
console when JES2 reads in the job. Like most shops, yours probably
has way too many messages streaming by on the console for any HUMAN
to really see this. Pick up te telephone and call them.

./ ADD NAME=JES2NETA 0100-07007-07007-1205-00006-00006-00000-IBM

/*NETACCT

Used to specify account numbers passed to other nodes where this job
goes to. Remember those days of NJE and RJE?

./ ADD NAME=JES2NTFY 0100-07007-07007-1205-00013-00013-00000-IBM

/*NOTIFY

Use to direct where NOTIFY messages are sent. If you submit a job on
SYSTEMA with a /*ROUTE XEQ SYSTEMB and want to be notified on SYSTEMC,
then add /*NOTIFY SYSTEMC.URUSRID.

/*NOTIFY {nodename.userid }
         {nodename:userid }
         {nodename/userid }
         {nodename(userid)}
         {userid }

./ ADD NAME=JES2OUTP 0100-07007-07007-1205-00050-00050-00000-IBM

/*OUTPUT

Use to define output attributes and then refer one or more SYSOUT
DD statements to it.

The parameters are:
{BURST} = {Y}
{B } {N}
{CHARS} = {xxxx }
{X } {(xxxxÝ,xxxx¨...)}
{CKPTLNS} =nnnnn
{E }
{CKPTPGS} =nnnnn
{P }
{COMPACT} =nn
{Z }
{COPIES} = {nnn }
{N } {(nnnÝ,(group-valueÝ,group-value¨...)¨)}
{COPYG} = {group-value }
{G } {(group-valueÝ,group-value¨...)}
{DEST} = {destination } destination is:
{D } {(destinationÝ,destination¨...)}
{ANYLOCAL }
{LOCAL }
{FCB} =xxxx {name }
{C } {Nnnnn }
{NnnRmmmm }
{FLASH} = {overlay-name } {NnnnRmmm }
{O } {(overlay-nameÝ,count¨)} {NnnnnRmm }
{NONE } {nodename.userid }
{nodename:userid }
{FLASHC} =count {nodename/userid }
{Q } {nodename(userid)}
{Rnnnn }
{FORMS} = {xxxx} {RMnnnn }
{F } {STD } {RMTnnnn }
{Unnnn }
{Userid }
{{INDEX |I} =nn}
{{LINDEX|L} =nn}
{LINECT} =nnn
{K }
{MODIFY} = {module-name }
{Y } {(module-nameÝ,trc¨)}
{MODTRC} =trc
{M }
{UCS} =xxxx
{T }

./ ADD NAME=JES2PRTY 0101-07007-07038-1813-00010-00006-00000-KTOMIAK

/*PRIORITY #    Where # is in the range 0 - 15

An antiquated method of trying to influence when your job gets
selected to execute.

It must precede the JOB statement that it applies to.

/*PRIORITY 8
//MYJOB JOB (acct),'programmer name',...
./ ADD NAME=JES2ROUT 0100-07007-07007-1205-00032-00032-00000-IBM

/*ROUTE

/*ROUTE PRINT
/*ROUTE PUNCH
/*ROUTE XEQ

Send the output of your job to another location or for execution.

/*ROUTE {PRINT} {ANYLOCAL }
        {PUNCH} {LOCAL }
        {name }
        {Nnnnn }
        {NnnRmmmm }
        {NnnnRmmm }
        {NnnnnRmm }
        {nodename.userid }
        {nodename:userid }
        {nodename/userid }
        {nodename(userid)}
        {Rnnnn }
        {RMnnnn }
        {RMTnnnn }
        {Unnnn }
        {Userid }
/*ROUTE XEQ {name }
            {Nnnnn }
            {nodename.vmguestid }
            {nodename:vmguestid }
            {nodename/vmguestid }
            {nodename(vmguestid)}

./ ADD NAME=JES2SETP 0100-07007-07007-1205-00015-00015-00000-IBM

/*SETUP

Back when there weren't so many messages going to consoles you could
use the /*SETUP control card to let the operator know what tape
volume serial numbers the job would need. Nowadays, too many messages
are produced for any HUMAN to reall read them and two other
technologies did away with this practice.

1) Use of catalogued data sets means no one wants to look up what
   VOLSESRs will be used and code them in JCL that job scheduling
   software is submitting.
2) Automated tape devices mount more tapes than people do, and they
   don't read console messages.

./ ADD NAME=JES2SOFF 0100-07007-07007-1205-00005-00005-00000-IBM

/*SIGNOFF

Used to disconnect a remote session with JES2.

./ ADD NAME=JES2SON  0100-07007-07007-1205-00012-00012-00000-IBM

/*SIGNON

Used to connect a remote session with JES2.

/*SIGNON {REMOTEnnn} Ýpassword1¨ Ýnew-password¨ Ýpassword2¨
         {RMTnnnn }
         {RMnnnn }
         {Rnnnn }
         {NxxRnnnn }
         {dest-name}

./ ADD NAME=JES2XEQ  0100-07007-07007-1205-00006-00006-00000-IBM

/*XEQ

Does the same as /*ROUTE XEQ. Routes the job to another node for
execution.

./ ADD NAME=JES2XMIT 0100-07007-07007-1205-00018-00018-00000-IBM

/*XMIT

Transmits records from one node to another. I've only used it to send
data to a VM userid.

/*XMIT {Nnnnn } Ý DLM=xx¨
       {nodename }
       {nodename.userid }
       {nodename:userid }
       {nodename/userid }
       {nodename(userid) }
       {nodename.vmguestid }
       {nodename:vmguestid }
       {nodename/vmguestid }
       {nodename(vmguestid)}
       {name }

./ ADD NAME=JES3CMD  0100-07007-07007-1205-00026-00026-00000-IBM

//**command command-verb

Issue a JES3 Command. Just like with JES2, should you really be
doing this?

Command     Short Form
CALL         X
CANCEL       C
DELAY        D
DISABLE      H
ENABLE       N
ERASE        E
FAIL
FREE
INQUIRY      I
MESSAGE      Z
MODIFY       F
RESTART      R
SEND T
START        S
SWITCH
VARY         V

Do not specify a *DUMP or *RETURN command on a JES3 command statement.

./ ADD NAME=JES3DATA 0100-07007-07007-1205-00016-00016-00000-IBM

//*DATASET

Used to start in-stream data.

//*DATASET DDNAME=ddnameÝ,parameter¨...

The parameters are:
MODE= {E}
      {C}
J= {YES}
   {NO }
CLASS= {NO }
       {MSGCLASS}
       {class }

./ ADD NAME=JES3ENDD 0100-07007-07007-1205-00005-00005-00000-IBM

//*ENDDATASET

Ends the in-stream data set.

./ ADD NAME=JES3ENDP 0100-07007-07007-1205-00005-00005-00000-IBM

//*ENDPROCESS

Ends the PROCESS stream.

./ ADD NAME=JES3FORM 0100-07007-07007-1205-00056-00056-00000-IBM

//*FORMAT

Used to format SYSOUT output.

//*FORMAT PR,DDNAME= {ddname } Ý,parameter¨...
         {stepname.ddname } ,parameter¨...
         {stepname.procstepname.ddname}
         {JESYSMSG }
         {JESJCL }
         {JESMSGLG }

//*FORMAT PR,DDNAME=Ý,parameter¨...
         { CARRIAGE= {carriage-tape-name} }
         { {6 } }
         { FCB= {image-name} }
         { {6 } }
         CHARS= {STANDARD }
         {table-name }
         {(table-nameÝ,table-name¨...)}
         CHNSIZE= {DS }
         {(nnnÝ,mmm¨)}
         COMPACT=compaction-table-name
         CONTROL= {PROGRAM}
         {SINGLE }
         {DOUBLE }
         {TRIPLE }
         COPIES= {nnn }
         {(nnn,(group-valueÝ,group-value¨...))}
         {(group-valueÝ,group-value¨...) }
         DEST= {ANYLOCAL }
         {device-name }
         {device-number }
         {group-name }
         {nodenameÝ.remote¨ }
         {(typeÝ,device-name¨) }
         {(typeÝ,device-number¨)}
         {(typeÝ,group-name¨) }
         EXTWTR=name
         FLASH= {STANDARD }
         {overlay-name }
         {(overlay-nameÝ,count¨)}
         FORMS= {STANDARD }
         {form-name}
         MODIFY= {module-name }
         {(module-nameÝ,trc¨)}
         OVFL= {ON }
         {OFF}
         PRTY=nnn
         STACKER= {STANDARD}
         {S }
         {C }
         THRESHLD=limit
         TRAIN= {STANDARD }
         {train-name}

./ ADD NAME=JES3MAIN 0100-07007-07007-1205-00083-00083-00000-IBM

//*MAIN

Used to specify processing options.

//*MAIN parameterÝ,parameter¨...

ACMAIN=processor-id
BYTES= {(Ýnnnnnn¨Ý,WARNING¨Ý,mmm¨)}
{(Ýnnnnnn¨Ý,W¨Ý,mmm¨) }
{(Ýnnnnnn¨Ý,CANCEL¨) }
{(Ýnnnnnn¨Ý,C¨) }
{(Ýnnnnnn¨Ý,DUMP¨) }
{(Ýnnnnnn¨Ý,D¨) }
CARDS= {(Ýnnnn¨Ý,WARNING¨Ý,mmm¨)}
{(Ýnnnn¨Ý,W¨Ý,mmm¨) }
{(Ýnnnn¨Ý,CANCEL¨) }
{(Ýnnnn¨Ý,C¨) }
{(Ýnnnn¨Ý,DUMP¨) }
{(Ýnnnn¨Ý,D¨) }
CLASS=class-name
DEADLINE= {(time,typeÝ,date¨) }
{(time,typeÝ,rel,cycle¨)}
EXPDTCHK= {YES}
{NO }
FAILURE= {RESTART}
{CANCEL }
{HOLD }
{PRINT }
FETCH= {ALL }
{NONE }
{SETUP }
{(ddnameÝ,ddname¨...) }
{/(ddnameÝ,ddname¨...)}
HOLD= {YES}
{NO }
IORATE= {MED }
{HIGH}
{LOW }
JOURNAL= {YES}
{NO }
LINES= {(Ýnnnn¨Ý,WARNING¨Ý,mmm¨)}
{(Ýnnnn¨Ý,W¨Ý,mmm¨) }
{(Ýnnnn¨Ý,CANCEL¨) }
{(Ýnnnn¨Ý,C¨) }
{(Ýnnnn¨Ý,DUMP¨) }
{(Ýnnnn¨Ý,D¨) }
LREGION=nnnnK
ORG= {group-name }
{nodenameÝ.remote¨}
PAGES= {(Ýnnnnnnnn¨Ý,WARNING¨Ý,mmm¨)}
{(Ýnnnnnnnn¨Ý,W¨Ý,mmm¨) }
{(Ýnnnnnnnn¨Ý,CANCEL¨) }
{(Ýnnnnnnnn¨Ý,C¨) }
{(Ýnnnnnnnn¨Ý,DUMP¨) }
{(Ýnnnnnnnn¨Ý,D¨) }
PROC= {ST}
{xx}
RINGCHK= {YES}
{NO }
SETUP= {JOB }
{HWS }
{THWS }
{DHWS }
{(stepname.ddnameÝ,stepname.ddname¨...) }
{(stepname.procstepname.ddnameÝ,stepname.procstepname.ddname¨...) }
{/(stepname.ddnameÝ,stepname.ddname¨...) }
{/(stepname.procstepname.ddnameÝ,stepname.procstepname.ddname¨...)}
SPART=partition-name
SYSTEM= {ANY }
{JGLOBAL }
{JLOCAL }
{(main-nameÝ,main-name¨...) }
{/(main-nameÝ,main-name¨...)}
THWSSEP= {IGNORE }
{PREFER }
{REQUIRE}
TRKGRPS=(primary-qty,second-qty)
TYPE= {ANY}
{VS2}
UPDATE=(dsnameÝ,dsname¨...)
USER=userid

./ ADD NAME=JES3NET  0100-07007-07007-1205-00039-00039-00000-IBM

//*NET

Purpose Use the //*NET statement to define the dependencies between
jobs in a dependent job control (DJC) network. JES3 sets up a network
of dependent jobs and executes them in a specific order. (Once set up,
the structure of a DJC network cannot be changed unless all of the jobs
in the network are resubmitted.) Jobs belonging to a DJC network cannot
be registered with the automatic restart manager (ARM).

//*NET {NETID} =nameÝ,parameter¨...
       {ID }

{ABCMP} = {NOKP}
{AC } {KEEP}
{ {ABNORMAL|AB} = {D} }
{ {F} }
{ {R} }
{ {NORMAL|NC} = {D} }
{ {F} }
{ {R} }
DEVPOOL=( {ANY} Ý,device-name,n¨...
{NET}
DEVRELSE= {YES}
{NO }
{NETREL} =(netid,jobname)
{NR }
{NHOLD} =n
{HC }
{NRCMP} = {HOLD}
{PC } {NOHO}
{FLSH}
{OPHOLD} = {NO }
{OH } {YES}
{RELEASE} =(jobnameÝ,jobname¨...)
{RL }
{RELSCHCT} =n
{RS }

./ ADD NAME=JES3NETA 0100-07007-07007-1205-00003-00003-00000-IBM

//*NETACCT

./ ADD NAME=JES3OPER 0100-07007-07007-1205-00009-00009-00000-IBM

Specifies accounting information transmittd with the job.

//*OPERATOR

Like the JES2 /*MESSAGE control card, a way to issue a message to
the operator console where it is likely to go unnoticed. Pick up
the telephone and give them a call.

./ ADD NAME=JES3PAUS 0100-07007-07007-1205-00006-00006-00000-IBM

//*PAUSE

Used to interrupt the input reader until you start it again. This
allows remote work stations to do a system checkout.

./ ADD NAME=JES3PROC 0100-07007-07007-1205-00006-00006-00000-IBM

//*PROCESS

How to process the job. From my quick read all I got out of this is
you can mimic the TYPRUN=SCAN feature of JES2.

./ ADD NAME=JES3ROUT 0100-07007-07007-1205-00007-00007-00000-IBM

//*ROUTE

Used to route a job to another node for processing.

//*ROUTE XEQ

./ ADD NAME=JES3SOFF 0100-07007-07007-1205-00008-00008-00000-IBM

//*SIGNOFF

Used to disconnect a remote session with JES3.

Note that, unlike other JES3 statements, this statement starts
with only one slash.

./ ADD NAME=JES3SON  0100-07007-07007-1205-00027-00027-00000-IBM

/*SIGNON

Used to connect a remote session with JES3.

Note that, unlike other JES3 statements, this statement starts
with only one slash.

/*SIGNON work-station-name {A|(blank)} {R|(blank)} +
            passwd1 passwd2 new-passwd

Column     Contents
1-2        /*
3-8        SIGNON
9-15       blanks
16-20      work-station-name, beginning in 16
21         blank
22         A or a blank
23         R or a blank
24         blank
25-32      password1, beginning in 25
33-34      blanks
35-42      password2, beginning in 35
43         blank
44-51      new-password, beginning in 44
52-80      blanks

./ ADD NAME=JOB      0104-07007-07010-1837-00120-00120-00000-KTOMIAK

// JOB

//SP1KTOM  JOB (SYSPGM01,,60,9999,0,,1,,60),
 =>            (ACCTCODE,ACCTCODE,ESTTIME,ESTLINE,ESTCARDS,FORMS,
 =>            COPIES,LOG,LINECOUNTPERPAGE)

//             'KENNETH TOMIAK',
 =>            programmer name field can be up to 20 characters

//             ADDRSPC=VIRT,
//             ADDRSPC=REAl,

//             BYTES=(######),
//             BYTES=(######,CANCEL),
//             BYTES=(######,DUMP),
//             BYTES=(######,WARNING),

//             CARDS=(######),
//             CARDS=(######,CANCEL),
//             CARDS=(######,DUMP),
//             CARDS=(######,WARNING),

//             CCSID=#####,  1-65535

//             CLASS=x,      JOB CLASS
 =>  Class for JES2 selection criteria


//             COND=((CODE,OPERATOR),(CODE,OPERATOR)),
                      <= CODE 0 - 4095
                      <= OPERATOR gt, ge, eq, lt, lt, ne

//             GROUP=XXXXXXXX, RACF GROUP

//             JESLOG=SPIN,
//             JESLOG=NOSPIN,
//             JESLOG=SUPPRESS,

//             LINES=(######),
//             LINES=(######,CANCEL),
//             LINES=(######,DUMP),
//             LINES=(######,WARNING),

//             MEMLIMIT=NOLIMIT,
//             MEMLIMIT=#####x
                  <= X = M, G, T, P

//             MSGCLASS=X,
 =>  Output class for unspecified SYSOUT= statements.

//             MSGLEVEL=(1,1),
 =>  MSGLEVEL Defaults to (1,1) or as installation defined.
     I tried an invalid combination and the system will
     default it to the installation's default values. Check
     JES2PARM on your system. Coded as (statements,messages)
     (statements,
      0 = Print jobcard, comments, and JECL up to the first EXEC
      1 = All JCL, JES2 or JES3 control statements, procedure
          statements, and IEF653I messages.
      2 = JCL and JES2 or JES3 control statements.
     messages)
      ,0 = Only JCL messages.
      ,1 = JCL, JES, operator, and SMS messages.

//             NOTIFY=&SYSUID
 =>  NOTIFY either a valid userid, garbage to clog up
     SYS1.BRODCAST, or &SYSUID, the default, to notify whoever
     submitted the job.

//             PAGES=(######),
//             PAGES=(######,CANCEL),
//             PAGES=(######,DUMP),
//             PAGES=(######,WARNING),

//             PASSWORD=(OLD,NEW),

//             PERFORM=###,

//             PRTY=##,     0 - 15

//             RD=R,        RESTART, CHECKPOINTS ALLOWED
//             RD=RNC,      RESTART, NO CHECKPOINTS ALLOWED
//             RD=NR,       NO RESTART, CHECKPOINTS ALLOWED
//             RD=NC,       NO RESTART, NO CHECKPOINTS ALLOWED

//             REGION=#######k,  IN KILOBYTES
//             REGION=####M,     IN MEGABYTES

//             RESTART(STEPNAME,PROCSTEPNAME,CHECKPOINTID),

//             SECLABEL=,

//             SCHENV=,

//             TIME=1440,          = Forever or until you IPL
//             TIME=NOLIMIT,       = Less confusing way to say forever
//             TIME=MAXIMUM,       = 357,912 minutes
//             TIME=(MMMMMM,SS),
 =>  Minutes = 1 - 357912       (5,965 hours 12 minutes or
                                 248 days 13 hours 12 minutes)
     Seconds = 1 - 59

//             TYPRUN=COPY,   Copies to sysout
//             TYPRUN=JCLHOLD,   Hold before JCL processing
 =>                              Before PROC expansion
//             TYPRUN=HOLD,   MAKE SOMEONE RELEASE IT
//             TYPRUN=SCAN,   JUST SIMPLE SYNTAX CHECKING

//             USER=whobeu

//KTOMIAKH   JOB (0700,MID),'KET.SHARE.MVSE',
//             CLASS=A,MSGCLASS=T,MSGLEVEL=(1,1),
//             NOTIFY=&SYSUID,REGION=6M,TIME=400
//*
//* SOURCE: DSN=SHARE##.S2820.CNTL(JOBC4SHR)
//* AUTHOR: YOUR NAME <YOUREMAIL@YOURDOMAIN>
//* REMARK: THIS JOB ....................................
//*

./ ADD NAME=OUTPUT   0100-07007-07007-1205-00020-00020-00000-IBM

// OUTPUT
//*
//OUTDS OUTPUT ADDRESS=('address line 1   ',
//             'line 2, these can be',
//             'up to 65 characters each'),
//             BUILDING='65chr max',
//             CHARS=GT12,
//             DEFAULT=YES,
//             DEPT='SYSTEM PROGRAMMING',
//             FORMDEF=0101LA,                 BLANK/LANDSCAPE
//             ROOM='13th FLOOR',
//             JESDS=ALL,
//             NAME='KENNETH E. TOMIAK',
//             PAGEDEF=06080,
//*            PAGEDEF=06080               BLANK/LANDSCAPE/60LINES/8LPI
//*            PAGEDEF=08081               BLANK/PORTRAIT /80LINES/8LPI
//             TITLE='*** PRINTOUT FROM A BATCH JOB ***'
//*USAGE   DD  SYSOUT=*,OUTPUT=(*.OUTDS)

./ ADD NAME=PEND     0100-07007-07007-1205-00006-00006-00000-IBM

// PEND

Used to end an in-stream PROC. Not required for a PROC pulled in from
a PROCLIB member.

./ ADD NAME=PROC     0100-07007-07007-1205-00009-00009-00000-IBM

// PROC

Used to begin a JCL Procedure. One or more SYMBOLICs may be coded
with default values.

//P4 PROC PARM5=OLD,PARM6='SYS1.LINKLIB(P40)',
// PARM7=SYSDA,PARM8=(CYL,(10,1))

./ ADD NAME=SET      0100-07007-07007-1205-00011-00011-00000-IBM

// SET

An enhancement that allows setting a value for a SYMBOLIC. This does
not require using PROCs!

//MYLABEL SET SOMEVAR='THIS IS THE DATA'
//URLABEL SET MOREVAR='AND THIS IS TEXT'
//*
//STEP001 EXEC PGM=MYPGM,PARM='&SOMEVAR.&MOREVAR'

./ ADD NAME=XMIT     0100-07007-07007-1205-00005-00005-00000-IBM

// XMIT

Yet another way to transmit records froma JES2 node to another node.

