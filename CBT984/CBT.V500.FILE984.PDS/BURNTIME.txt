/* rexx */
Rexx_BURNTIME:
  ssrv = SYSVAR("SYSSRV")
  rexxpgm_version = "01.00"           /* ver lev */

  PARSE ARG all_my_arguments

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This code drives Initialization, Process, and Termination routines.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Main_Routine:
  return_code = Initialization_Routine()
  IF (return_code = 0) THEN DO
    return_code = Process_Routine()
  END
  return_code = Termination_Routine()
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================

 Dataset:  DEMO.REXX(BURNTIME)
 Contact:  "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
 Purpose:  Help cause a TIME=(0,n) abend.
 Syntax:   %BURNTIME |#|
           # = how many service units we chew up.

-----------------------------------------------------------------------

 History of Modifications
 ------------------------
vv.mm WHEN     Who / What you did ... (Newest change at the top.)
----- -------- --------------------------------------------------------
01.00 20030531 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Original code modified from BENCHMRK.
----- -------- --------------------------------------------------------

-----------------------------------------------------------------------

STANDARD GLOBAL DISCLAIMER
--------------------------
The author explicitly disavows any claim whatsoever about the
correctness or functionality of this program, and disclaims liability
for anything and everything bad that might happen in connection with,
before, during, or after using it. I have tried to make it work right,
and I am personally pretty confident that it does, but everybody makes
mistakes, so if you use it, you do so at your own risk.

=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine initializes constants and variables.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Initialization_Routine:
  return_code = 0

  PARSE VAR all_my_arguments n_srvunits other_parameters_are_not_used

  IF (n_srvunits = "") THEN DO
    n_srvunits = 5
  END
  IF (DATATYPE(n_srvunits) <> "NUM") THEN DO
    SAY COPIES("*",79)
    SAY LEFT("* ERROR:" n_srvunits "is not numeric.",77) "*"
    SAY COPIES("*",79)
    return_code = 16
  END

  SAY TIME()
  esrv = SYSVAR("SYSSRV")
  tsrv = esrv - ssrv
  SAY "Just getting started used" tsrv "service units."
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine does the processing.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_Routine:
  SAY ""
  SAY "Looping to burn" n_srvunits "service units."

  SAY TIME()
  ssrv = SYSVAR("SYSSRV")
  DO UNTIL (tsrv > n_srvunits)
    esrv = SYSVAR("SYSSRV")
    tsrv = esrv - ssrv
  END
  SAY "DO UNTIL used" tsrv "service units."
  SAY TIME()

  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine does cleanup before exiting.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Termination_Routine:
  esrv = SYSVAR("SYSSRV")
  tsrv = esrv - ssrv
  SAY "Coming to an end used" tsrv "service units."
  SAY TIME()
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
End of code.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
