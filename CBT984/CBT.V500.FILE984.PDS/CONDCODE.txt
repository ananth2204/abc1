/* rexx */
Rexx_Condcode:
  rexxpgm_version = "01.16"           /* ver lev */

  PARSE ARG all_my_arguments               /* NO PARAMETERS ARE USED */
  NUMERIC DIGITS 16                              /* Handles Petabyte */

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This code drives Initialization, Process, and Termination routines.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Main_Routine:
  return_code = Initialization_Routine()
  IF (return_code = 0) THEN DO
    return_code = Process_Routine()
  END
  return_code = Termination_Routine()
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 Name:       DEMO.REXX(CONDCODE)
 Type:       Rexx Exec

 Purpose:    Retrieve Condition Codes for each prior step.
 Abstract:   Follow MVS control blocks to the STEP CONTROL TABLE,
             then decipher status bytes to display what occurred
             for each of the prior steps.

 Syntax:     %condcode

 Example:    %condcode

 Author:     Kenneth E. Tomiak
 Date:       2003-03-13  2003.072
 E-Mail:     "Kenneth E Tomiak"<CBT_Ken@KTomiak.biz>
 WEB:        HTTP://www.KTomiak.org

-----------------------------------------------------------------------

 Important Guidelines:
 This code was written as an information gathering sub-routine
 intended to be called and its results used as the invoker saw
 fit. It was intended to be a report generator. With that thought
 in mind, carefully consider whether your change affects how a
 parsing program will INTERPRET the output. If a flaw in the
 original format is found, it will have to be corrected, and then
 any parsing invokers will have to verify they still work. Please
 make note of such activity so that the callers are forewarned.
 Use the line below to show you made format changes.
           >>>>> FORMAT CHANGES <<<<<

-----------------------------------------------------------------------

 History of Modifications
 ------------------------
vv.mm WHEN     Who / What you did ... (Newest change at the top.)
----- -------- --------------------------------------------------------
01.16 20180505 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
         -     1) Stylize using template $putktm:
      20180406    Programming Using The Kenneth Tomiak Method.
               2) Stylize using Edit Macro %putktm:
                  Programming Using The Kenneth Tomiak Method.
               3) Stylize using the
                  Programming Using The Kenneth Tomiak Method.
----- -------- ------------------------------------------------------
01.15 20180202 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Changed SWAREQ to Swareq22.
----- -------- ------------------------------------------------------
01.14 20170821 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Added VV.MM to the History of Modifications.
               2) Replaced first line for //SYSPROC and Compiler.
               3) Moved the main driver code up top to get running
                  quicker.
               4) Moved disclaimer below History of Modifications.
               5) Changed my comment delimiter to <<<...<<< and
                  >>>...>>>.
               6) Reformat and stylize using the 'Programming Using
                  The Kenneth Tomiak Method (PUTKTM)'.
                  a) then , becomes THEN DO
----- -------- ------------------------------------------------------
01.13 20070320 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               Replaced call to ptr in swareq PROCEDURE
----- -------- ------------------------------------------------------
01.12 20040422 Lionel B. Dyck <lionel.b.dyck@kp.org>
               >>>>> FORMAT CHANGES <<<<<
               Correction for high condition code testing/report
----- -------- ------------------------------------------------------
01.11 20030620 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               >>>>> FORMAT CHANGES <<<<<
               lengthened static 0's on Harry's "U" abend corrections
               and converted not equal compares to <>.
               Coded "S" indent in a different manner. Removed logic
               inclusion of sctxabcc = "00" until I see it ever
               occurs when sctabcnd = "04". I did find assembler
               invoked abends were not being handled properly so I
               had to do some logic changes, too.
----- -------- ------------------------------------------------------
01.10 20030419 Harry van Burik <h.vanburik@pinkroccade.com>
               >>>>> FORMAT CHANGES <<<<<
               Several minor corrections to formatting
               Indent step level "S" abend.
               Increase length of User abend to four digits.
               Added a check of sctxabcc=00 under sctabcnd=04.
----- -------- ------------------------------------------------------
01.09 20030326 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               >>>>> FORMAT CHANGES <<<<<
               Fixed compare of high_cond when using sctsexec and
               removed "R" if no abend occurred.
----- -------- ------------------------------------------------------
01.08 20030324 Lionel B. Dyck <lionel.b.dyck@kp.org>
               >>>>> FORMAT CHANGES <<<<<
               Split the JOB= line into two lines.
               Set last_abend and high_cond to 0.
----- -------- ------------------------------------------------------
01.07 20030318 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               >>>>> FORMAT CHANGES <<<<<
               Format jctacode, show lastabend and highest condcode,
               include SSIB jobid, and completed changes to swareq.
----- -------- ------------------------------------------------------
01.06 20030317 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               Correct sctsexec from 9,1 to 8,2,
               replaced Foreground check with first step check.
----- -------- ------------------------------------------------------
01.05 20030317 Lionel B. Dyck <lionel.b.dyck@kp.org>
               Add test for Foreground environment.
----- -------- ------------------------------------------------------
01.04 20030316 Lionel B. Dyck <lionel.b.dyck@kp.org>
               >>>>> FORMAT CHANGES <<<<<
               NOP other message for sctabcnd if not 04.
----- -------- ------------------------------------------------------
01.03 20030314 Lionel B. Dyck <lionel.b.dyck@kp.org>
               >>>>> FORMAT CHANGES <<<<<
               Minor cleanup (comments and spacing),
               Changed wording of the generated messages,
               Changed for 4 bytes for jctacode.
----- -------- ------------------------------------------------------
01.02 20030314 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               Added check for steps bypassed due to a RESTART= and
               spruced up the comments, far more than any code I
               usually write. Hopefully this will make it easy to
               understand and maintain.
----- -------- ------------------------------------------------------
01.01 20030313 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               Inserted SWAREQ routine from code written by:
               Gilbert Saint-flour <gsf@pobox.com>
----- -------- ------------------------------------------------------
01.00 20030313 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               Revamped code received from:
               Lionel B. Dyck <Lionel.B.Dyck@KPM.org>
               Original code submitted by:
                 Barry Gilder <gilderb@anz.com>
----- -------- ------------------------------------------------------

-----------------------------------------------------------------------

 Disclaimers:
 I have no special knowledge of the inner workings of the
 operating system. I attempted to return one VALUE back to
 indicate the same VALUE you would have received if you used
 NOTIFY= on the jobcard. I was working on using the highest
 numeric COND CODE, unless there was a SYSTEM abend, unless
 there was a USER abend. It then became desirable to show the
 outcome of all of the steps, just as most IEFACTRT exits show
 in your JESMSGLG. At that point I included LASTABEND= to show
 what the jct indicates and HIGHCOND= to show what may be
 considered the most severe ERROR of the job using the COND CODE,
 SYSTEM, USER sequence described above.

 The original code was developed and tested using the DATA AREAS
 manuals and MACLIB entries from OS/390 2.10 and z/OS 1.2. My
 testing includes steps that are designed to fail. Not every
 system abend, user abend, nor RETURN code value; but at least
 two of each.

 I support my code using a best-effort philosophy. As long as I
 have access to an image where I can test, I will maintain it as
 best as I can. If you find a flaw, please do let me know.

 The code released by Kenneth E. Tomiak does not alter anything.
 It follows control blocks that are outside of the IBM defined
 'Programming Interface'. BUYER BEWARE! Your decision to execute
 this code means you accept responsibility for the consequences.
 What could go wrong? If control blocks are changed or used in
 some way I did not anticipate you may find this loops wildly;
 tries to access storage it should not; or other yet to be
 conceived problems. BUYER BEWARE! Always test this in a sandbox
 MVS image if you have concerns.

 In no event will the author be liable to the user of this code
 for any damages. Including, but not limited to, any lost
 profits, lost savings or other incidental, consequential or
 special damages arising out of the operation of or inability to
 operate this code, even if the user has been advised of the
 possibility of such damages.

 With that stated, enjoy all this has to offer.

-----------------------------------------------------------------------

STANDARD GLOBAL DISCLAIMER
--------------------------
The author explicitly disavows any claim whatsoever about the
correctness or functionality of this program, and disclaims liability
for anything and everything bad that might happen in connection with,
before, during, or after using it. I have tried to make it work right,
and I am personally pretty confident that it does, but everybody makes
mistakes, so if you use it, you do so at your own risk.

=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine initializes constants and variables.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Initialization_Routine:
  return_code = 0
  psatol   = STORAGE(D2X(540),4)
  tcbjscbb = STORAGE(D2X(C2D(psatol)+181),3)
  jcbjct   = Swareq22(STORAGE(D2X(C2D(tcbjscbb)+261),3))
  currsct  = Swareq22(STORAGE(D2X(C2D(tcbjscbb)+329),3))
  jscbstep = C2D(STORAGE(D2X(C2D(tcbjscbb)+228),1)) /* Step number   */
  jscbssib = STORAGE(D2X(C2D(tcbjscbb)+316),4)
  ssibjbid = STORAGE(D2X(C2D(jscbssib)+12),8)     /* job identifier  */
  jctjstat =     STORAGE(D2X(jcbjct +   5),1)       /* Job Status    */
  jctjname =     STORAGE(D2X(jcbjct +   8),8)       /* Job Name      */
  jctjfail = C2X(STORAGE(D2X(jcbjct + 52),1))       /* Job FAILURE   */
  jctacode =     STORAGE(D2X(jcbjct +168),4)        /* Job Abend     */

  job_stat = C2X(jctjstat)
  IF (BITAND('20'x,jctjstat) = '20'x) THEN DO
    job_stat = job_stat "Cancelled By Condition Codes"
  END
  IF (BITAND('08'x,jctjstat) = '08'x) THEN DO
    job_stat = job_stat "jct ABend"
  END
  IF (BITAND('04'x,jctjstat) = '04'x) THEN DO
    job_stat = job_stat "Job Failed"
  END
  IF (BITAND('02'x,jctjstat) = '02'x) THEN DO
    job_stat = job_stat "Catalog Job"
  END

  SELECT
    WHEN (LEFT(C2X(jctacode),2) = "40") |,
         (LEFT(C2X(jctacode),2) = "80") |,
         (LEFT(C2X(jctacode),2) = "C0") THEN DO
      last_abend = "U"RIGHT("0000"C2D(RIGHT(jctacode,2)),4)
    END
    WHEN (C2X(jctjstat) <> "00") THEN DO
      last_abend = "S"SUBSTR(C2X(jctacode),3,3)
    END
    OTHERWISE DO
      last_abend = 0
    END
  END

  high_cond = "R000"

  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine does the processing.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_Routine:
  thissct  = Swareq22(STORAGE(D2X(jcbjct+32),3)) /* status code tbl */
  DO UNTIL ((thissct = '10'x) | (thissct = currsct))
    sctsstat = C2X(STORAGE(D2X(thissct +4),1)) /* internal step stat */
    sctsexec = C2D(STORAGE(D2X(thissct + 8),2))  /* step status code */
    sctsclpc = STRIP(STORAGE(D2X(thissct + 44),8)) /* step proc name */
    sctsname = STRIP(STORAGE(D2X(thissct + 52),8))      /* Step name */
    sctssysc = C2X(STORAGE(D2X(thissct + 62),2)) /* Step SYStem Code */
    sctxbttr = Swareq22(STORAGE(D2X(thissct + 68),3)) /* ptr to scte */
    sctpgmnm = STORAGE(D2X(thissct +108),8)          /* Program name */
    sctabcnd = C2X(STORAGE(D2X(thissct +160),1))       /* Abend code */
    sctstend = STORAGE(D2X(thissct +172),1) /* Start END status flag */
    sctxabcc = STORAGE(D2X(sctxbttr +112),4)    /* abend or condcode */

/*-------------------------------------------------------------------*/
/* Determine final status of step.                                   */
/*-------------------------------------------------------------------*/
    SELECT
      WHEN (jscbstep = 1) THEN DO
        cond_code = "Active"
        QUEUE LEFT(procstep,30) LEFT(SCTpgmnm,9) cond_code
        LEAVE
      END
      WHEN (sctsstat = "01") THEN DO
        cond_code = "FLUSH - STEP WAS NOT EXECUTED"
      END
      WHEN (BITAND('10'x,sctstend) = '10'x) THEN DO
        cond_code = "FLUSH -",
          "STEP WAS NOT RUN BECAUSE OF CONDITION CODES," ,
          "STEP WAS NOT EXECUTED."
      END
      WHEN (sctabcnd = "04") THEN DO
        SELECT
          WHEN (LEFT(C2X(sctxabcc),2) = "40") |,
               (LEFT(C2X(sctxabcc),2) = "80") |,
               (LEFT(C2X(sctxabcc),2) = "C0") THEN DO
            cond_code = "U"RIGHT("0000"C2D(RIGHT(sctxabcc,3)),4)
            IF (cond_code > high_cond) THEN DO
              high_cond = cond_code
            END
          END
          WHEN (LEFT(C2X(sctxabcc),2) = "00") |,
               (LEFT(C2X(sctxabcc),2) = "04") |,
               (LEFT(C2X(sctxabcc),2) = "84") THEN DO
            cond_code = "S"SUBSTR(C2X(sctxabcc),3,3)
            IF (cond_code > high_cond) THEN DO
              high_cond = cond_code
            END
          END
          OTHERWISE DO
            NOP
          END
        END
      END
      WHEN (BITAND('C0'x,sctstend) = 'C0'x) THEN DO
        cond_code = RIGHT("     "sctsexec,5)
        sctsexec = RIGHT(sctsexec+100000,4)
        IF ("R"sctsexec > high_cond) THEN DO
          high_cond = "R"sctsexec
        END
      END
      WHEN (BITAND('40'x,sctstend) = '40'x) THEN DO
        cond_code = "BYPASSED DUE TO RESTART - STEP WAS NOT EXECUTED"
      END
      OTHERWISE DO
        cond_code = "Help me!",
          sctsstat"-"sctsexec"-"sctssysc"-"sctabcnd"-"C2X(sctstend)
      END
    END
    IF (sctsclpc <> " ") THEN DO    /* procstep.stepname combination */
      procstep = LEFT(sctsclpc"."sctsname,17)
    END
    ELSE DO
      procstep = LEFT(sctsname,17)
    END
    IF (LEFT(cond_code,1) = "S") THEN DO
      QUEUE LEFT(procstep,30) LEFT(sctpgmnm,9) " "||cond_code
    END
    ELSE DO
      QUEUE LEFT(procstep,30) LEFT(sctpgmnm,9) cond_code
    END
    thissct = Swareq22(STORAGE(D2X(thissct+20),3))
  END
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine does cleanup before exiting.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Termination_Routine:
  high_cond = STRIP(STRIP(high_cond,"L"," "),"L","R")
  SAY "JOB="jctjname"("ssibjbid") jctACODE="C2X(jctacode),
    "FAIL="jctjfail "STAT="job_stat
  SAY LEFT(" ",22) "LASTABEND="last_abend,
    "HIGHESTCOND="high_cond
  SAY LEFT("Step.ProcStep",30) LEFT("Program",9) " Code"
  DO WHILE (QUEUED() > 0)
    PARSE PULL stepline
    SAY stepline
  END
  RETURN return_code

/* ====================================================================
-----------------------------------------------------------------------
 Other called routines.
-----------------------------------------------------------------------
==================================================================== */

/* --------------------------------------------------------------------
   Handle SWA above or below the bar.
   Fix from Don Poitras to adjust to z/OS 2.2 putting
   a control block above the 64-bit bar.

     https://groups.google.com/forum/#!
     msg/bit.listserv.ibm-main/E-fMschhS2M/Na4x_Vc9BgAJ

     Comes out of
     http://www.cbttape.org/ftp/cbt/CBT183.zip

-------------------------------------------------------------------- */
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 Convert an ADDRESS in SWA format to usable location
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Swareq22: PROCEDURE
  NUMERIC DIGITS 16                   /* Handles Petabyte addressing */
  sva = C2D(ARG(1))                         /* convert to decimal   */
  tcb = C2D(STORAGE(21C,4))                 /* TCB         psatold  */
  jscb = C2D(STORAGE(D2X(tcb+180),4))       /* JSCB        TCBJSCB  */
  qmpl = C2D(STORAGE(D2X(jscb+244),4))      /* QMPL        JSCBQMPI */
  /* See if qmat can be above the bar */
  qmsta = C2X(STORAGE(D2X(qmpl+16),1))     /* JOB STATUS BYTE      */
  IF (SUBSTR(Hex_To_Bit(qmsta),6,1)) THEN DO  /* QMQMAT64 bit on  */
    IF (RIGHT(Hex_To_Bit(C2X(ARG(1))),1) <> "1") THEN DO /* BELOW */
      RETURN C2D(ARG(1)) + 16             /* yes, RETURN sva+16   */
    END
    qmat = C2D(STORAGE(D2X(qmpl+10),2))*(2**48) +, /* QMAT+0 QMADD01 */
         C2D(STORAGE(D2X(qmpl+18),2))*(2**32) + ,  /* QMAT+2 QMADD23 */
         C2D(STORAGE(D2X(qmpl+24),4))              /* QMAT+4 QMADD */
    RETURN C2D(STORAGE(D2X(qmat+(sva*12)+64),4))+16
  END
  ELSE DO                                   /* NO, QMAT IS BTB      */
    IF (RIGHT(C2X(ARG(1)),1) <> "F") THEN DO /* SWA=BELOW ?         */
      RETURN C2D(ARG(1))+16                 /* yes, RETURN sva+16   */
    END
    qmat = C2D(STORAGE(D2X(qmpl+24),4))     /* QMAT        QMADD    */
    DO WHILE (sva > 65536)
      qmat = C2D(STORAGE(D2X(qmat+12),4))   /* next QMAT   QMAT+12  */
      sva = sva - 65536                     /* 010006F -> 000006F   */
    END
    RETURN C2D(STORAGE(D2X(qmat+sva+1),4))+16
  END
  RETURN "ERROR, SHOULD NOT REACH HERE!"

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 Convert a hexadecimal value to its bitstring value.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Hex_To_Bit:
  IF (bits.F <> "1111") THEN DO
    bits.0="0000"; bits.1="0001"; bits.2="0010"; bits.3="0011"
    bits.4="0100"; bits.5="0101"; bits.6="0110"; bits.7="0111"
    bits.8="1000"; bits.9="1001"; bits.A="1010"; bits.B="1011"
    bits.C="1100"; bits.D="1101"; bits.E="1110"; bits.F="1111"
  END
  hexchr = ARG(1)
  bit_str = ""
  DO ix = 1 TO LENGTH(hexchr)
    str = SUBSTR(hexchr,ix,1)
    bit_str = bit_str||bits.str
  END
  RETURN bit_str

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
End of code.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
