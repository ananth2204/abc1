rexx_GIM30206: /* We still need rexx in comment if read from SYSPROC */
  rexxpgm_version = "01.00"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

 Dataset:  KET2812.MIS.REXX(GIM30206)
 Author:   KTomiak
 Contact:  "Kenneth Tomiak"<KenTomiak@KTomiak.org>
 Syntax:   %GIM30206 {jobname jobid}
 Overview: Scan output of a job and find GIM30206E messags.
           Add the PTF to the EXCLUDE list.



=======================================================================

 History of Modifications
 ------------------------
vv.mm When     Who      What you did
----- -------- -------- -----------------------------------------------
01.00 20100430 KTomiak  1) Original code basd on GIMACT.
----- -------- -------- -----------------------------------------------

=======================================================================

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */

  ADDRESS ISREDIT "MACRO (MACVARS) NOPROCESS"
  ADDRESS ISPEXEC "CONTROL ERRORS RETURN"
  ADDRESS ISREDIT "CAPS OFF"
  ADDRESS ISREDIT "NUM ON"
  ADDRESS ISREDIT "(currrow, currcol) = CURSOR"
  address ISREDIT "CURSOR = .ZLAST"
  ADDRESS ISREDIT "(lastrow, lastcol) = CURSOR"
  address ISREDIT "CURSOR =" currrow currcol
  Parse Arg all_my_arguments
  Numeric Digits 12

rexx_Main_GIM30206:
  return_code = rexx_Initialize()
  If (return_code = 0) then,
    Do
      return_code = rexx_Process()
    End
  return_code = rexx_Termination()
  Return return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 In this routine we open any files and initialize any
 constants we might need.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
rexx_Initialize:
  PARSE VERSION,
    version_rexx_name,
    version_rexx_version,
    version_rexx_date
  PARSE SOURCE,
    source_host_env,
    source_call_type,
    source_uc_exec_name,
    source_hostdd,
    source_hostdsn,
    source_nf_exec_name,
    source_initial_cmd_env,
    source_asid_name,
    source_char8_user_token,
    source_hostother
  mvsvar_sysname = MVSVAR("SYSNAME")
  sysvar_syspref = SYSVAR("SYSPREF")
  sysvar_sysuid = SYSVAR("SYSUID")
  sysvar_sysenv = SYSVAR("SYSENV")
  sysvar_sysispf = SYSVAR("SYSISPF")
  parse var MACVARS myjname myjobid .
  next_line = lastrow + 0
  ins@text = "      EXCLUDE(                 /* ERROR HOLDS  */"
  Address IsrEdit,
    "LINE_AFTER" next_line "= DATALINE (ins@text)"
  next_line = next_line + 1
  isfprefix = Space(myjname,0)
  return_code = 0

  If (source_host_env >< "TSO") Then do
    Say "Wrong host environment" source_host_env
    return_code = 16
  End

  isfcalls_rc = isfcalls(ON)
  if (isfcalls_rc <> 0) then do
    say "ISFCALLS(ON) failed, RC("isfcalls_rc")."
    return_code = 16
    return return_code
  end

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
00 Function completed successfully
01 Host command environment query failed, environment not added
02 Host command environment add failed
03 Host command environment delete failed
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */

  write_rc = 0

  Return return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 In this routine we do our processing.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
rexx_Process:
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
  isfcols = "JNAME TOKEN POS JOBID"
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
  address SDSF "ISFEXEC H (ALTERNATE DELAYED VERBOSE)"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
00 The request completed successfully.
08 An incorrect or invalid parameter was specified for an
   option or command.
12 A syntax error occurred parsing a host environment command.
16 The user is not authorized to invoke SDSF.
20 A request failed due to an environmental error.
24 Insufficient storage was available to complete a request.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
  sdsf_rc = rc
  if (sdsf_rc > 8) then do
    say "sdsf RC("sdsf_rc")"
    show_rc = show_isf_message()
    return_code = sdsf_rc
    return return_code
  end

  if (isfrows = 0) then do
    say ""
    say "No rows returned, sorry. Play again?"
    say ""
    return_code = 14
  end
  else do
    this_job_name = word(isfcols,1)
    this_job_nbr  = word(isfcols,4)

    do job_ctr = 1 to JNAME.0
      if (JOBID.job_ctr <> myjobid) then iterate
      get_rc = get_all_output()
    end
  end

  Return return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 In this routine we close files and finish up.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
rexx_Termination:
  ins@text = "      )                        /* ERROR HOLDS  */"
  Address IsrEdit,
    "LINE_AFTER" next_line "= DATALINE (ins@text)"
  next_line = next_line + 1
  rc = isfcalls(OFF)
  Return return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 Place any of your subroutines and procedures below this.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 Loop through each job and get the JCL that ran it.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
get_the jobjcl:
  Address SDSF "ISFACT H TOKEN('"TOKEN.job_ctr"') PARM(NP SJA)" ,
    "( prefix jds_"
  do _isf_dd_ctr = 1 to isfddname.0
    Say " SJA" ,
      "//"isfddname._isf_dd_ctr,
      "DSN="isfdsname._isf_dd_ctr
    "EXECIO * DISKR" isfddname._isf_dd_ctr "(STEM jclline. FINIS"
    "Free FILE("isfddname._isf_dd_ctr")"
  end
  return jclline.0

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 Loop through each job and get the real ddnames.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
get_real_ddname:
  Address SDSF "ISFACT H TOKEN('"TOKEN.job_ctr"') PARM(NP ?)" ,
    "(prefix JCL_"
  return jcl_DDNAME.0
  do _jcl_dd_ctr = 1 to jcl_DDNAME.0
    say "JCL:"jcl_ddname._jcl_dd_ctr
  end

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 Loop through each job and get the output.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
get_all_output:
  get_rc = 0
  nbr_ddnames = get_real_ddname()
  Address SDSF "ISFACT H TOKEN('"TOKEN.job_ctr"') PARM(NP SA)" ,
    "(prefix JDS_"
  isfact_rc = rc
  if (left(isfmsg2.2,7) = "ISF747E") then do
    say "It is not nice to purge output while I am running."
    say "This is your only warning you do not play nice with others."
    return 0
  end
  if (isfact_rc <> 0) then do
    say "Error in PARM(NP SA), RC("isfact_rc")."
    show_rc = show_isf_message()
    return_code = isfact_rc
    return return_code
  end

  do _isf_dd_ctr = 1 to isfddname.0
    /*
    Say "    " ,
      "//"left(JCL_DDNAME._isf_dd_ctr,8) "DD ",
      "DSN="isfdsname._isf_dd_ctr
    */
 /* ????????.ERASCA00.JOB00824.D0000002.JESMSGLG */
 /* ownerid  jobname  jobnbr   ddnbr    ddname   */
    parse var isfdsname._isf_dd_ctr,
      job_ownerid "." ,
      job_jobname ".",
      job_jobnbr "." ,
      job_ddnbr  "." ,
      job_ddname "."      .
    Select
      when (JCL_DDNAME._isf_dd_ctr = "SMPOUT") then do
        null_rc = Process_SMPOUT()
      end
      otherwise
        "Free FILE("isfddname._isf_dd_ctr")"
    end
  End
  return get_rc

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 Show extended error help.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
show_isf_message:
  Say "isfmsg is:" isfmsg
  if (isfmsg2.0 > 0) then do
    do isfmsg_ctr = 1 to isfmsg2.0
      say "isfmsg2."isfmsg_ctr "is:" isfmsg2.isfmsg_ctr
    end
  end
  say "DIAG("isfdiag")"
  return 0

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 Look for GIM error messages. Currently just returning
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Process_SMPOUT:
  "EXECIO * DISKR" isfddname._isf_dd_ctr "(STEM line. FINIS"
  do _line_ctr = 1 to line.0
    if (pos("GIM30206E",line._line_ctr) = 0) then iterate
    parse var line._line_ctr ,
      . "SYSMOD " sys_mod " " .
    sys_mod = strip(sys_mod,"T",".")
    ins@text = "              "sys_mod","
    Address IsrEdit,
      "LINE_AFTER" next_line "= DATALINE (ins@text)"
    next_line = next_line + 1
  end
  return 0

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
__DATA__
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
