/* rexx */
Rexx_KTPMATCM:
  rexxpgm_version = "01.07"           /* ver lev */

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This code drives Initialization, Process, and Termination routines.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Main_Routine:
  return_code = Initialization_Routine()
  IF (return_code = 0) THEN DO
    return_code = Process_Routine()
  END
  return_code = Termination_Routine()
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================

  Dataset:  KTPM.REXX(KTPMATCM)
  Contact: "Kenneth E. Tomiak"<CBT_Ken@KTomiak.BIZ>
  Overview: Kenneth Tomiak Programming Method (KTPM) collection.
            This is a REXX program to demonstrate using the REXX
            ADDRESS ATTACHMVS environment.
            ATTACHMVS unauthorized programs on a different task level.
            R1 P1 points to the length and parameter string.
            Internally the parameter string contains pairs of length
            and VALUE strings. There is a firm dependency on passing
            the maximum variable length (pad with spaces if you want).
  Syntax:   %ktpmatcm

-----------------------------------------------------------------------

 History of Modifications
 ------------------------
vv.mm WHEN     Who / What you did ... (Newest change at the top.)
----- -------- --------------------------------------------------------
01.07 20180630 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Kenneth Tomiak Programming Method (KTPM) collection.
----- -------- --------------------------------------------------------
01.06 20180505 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Reimplemented invokeing IEBGENER.
               2) Add display of RC and meaning.
               3) VIEW report when rC > 0.
               4) CHANGE SYSISPF = ACTIVE to SYSENV = FORE.
               5) Correct LRECL of //REP (SYSPRINT for IEBGENER).
----- -------- --------------------------------------------------------
01.05 20180427 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
         -     1) Stylize using template $putktm:
      20180426    Programming Using The Kenneth Tomiak Method.
               2) Added ALLOC if run under ISPF.
               3) Stylize using Edit Macro %@putktm:
                  Programming Using The Kenneth Tomiak Method.
               4) Stylize using template $putktm:
                  Programming Using The Kenneth Tomiak Method.
               5) Added SNAPSHOT code if ISPF is active.
----- -------- --------------------------------------------------------
01.04 20171001 "Kenneth E Tomiak"<KenTomiak@KTomiak.org>
               1) Used SNAP to confirm the manual is correct. Fixed
                  my code to use R1 and the parameter list of
                  parameter length VALUE setup
----- -------- --------------------------------------------------------
01.03 20170929 "Kenneth E Tomiak"<KenTomiak@KTomiak.org>
               1) Lots of experimentation fails to get more than one
                  parameter string. Thus I built my own method of
                  what would be a multi-parameter list of length and
                  VALUE pairs.
----- -------- --------------------------------------------------------
01.02 20170929 "Kenneth E Tomiak"<KenTomiak@KTomiak.org>
               1) Add IBM's example for IEBGENER using alternate DD.
----- -------- --------------------------------------------------------
01.01 20170929 "Kenneth E Tomiak"<KenTomiak@KTomiak.org>
               1) Corrected spelling of variable.
----- -------- --------------------------------------------------------
01.00 20170928 "Kenneth E Tomiak"<KenTomiak@KTomiak.org>
               1) Original code.
----- -------- --------------------------------------------------------

-----------------------------------------------------------------------

STANDARD GLOBAL DISCLAIMER
--------------------------
The author explicitly disavows any claim whatsoever about the
correctness or functionality of this program, and disclaims liability
for anything and everything bad that might happen in connection with,
before, during, or after using it. I have tried to make it work right,
and I am personally pretty confident that it does, but everybody makes
mistakes, so if you use it, you do so at your own risk.

=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine initializes constants and variables.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Initialization_Routine:
  return_code = 0
  SAY ""
  SAY "Check SYSLOG for displayed output."
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine does the processing.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_Routine:
  SAY ""
  SAY "ATTCHMVS KTPMATCM"
  SAY "================="
  SAY ""
  msg1 = "Demonstrating how to use REXX's ADDRESS ATTCHMVS."
  msg2 = "     This is the second variable of two."
  IF (SYSVAR("SYSENV") = "FORE") THEN DO
    "ALLOC FILE(SNAPSHOT) NEW DELETE REUSE" ,
      "UNIT(SYSDA) TRACKS SPACE(5,5)" ,
      "DSORG(PS) RECFM(V B A) BLKSIZE(0) LRECL(125)"
  END
  parms = "msg1 msg2"
  SAY 'ADDRESS ATTCHMVS "KTPMATCM"' parms
  ADDRESS ATTCHMVS "KTPMATCM" parms
  return_code = RC
  SAY "       " msg1
  SAY "       " msg2
  SAY "ATTCHMVS KTPMATCM RC("return_code")."
  IF (SYSVAR("SYSENV") = "FORE") THEN DO
    ADDRESS ISPEXEC ,
      "LMINIT DATAID(fileid) DDNAME(SNAPSHOT) ENQ(SHR)"
    lminit_rc = RC
    ADDRESS ISPEXEC ,
      "VIEW DATAID("fileid")"
    ADDRESS ISPEXEC ,
      "LMCLOSE DATAID("fileid")"
    lmclose_rc = RC
  END
  "FREE FILE(SNAPSHOT)"

  SAY ""
  msg1 = "TIME FOR A NEW MSG1."
  msg2 = ""
  msg3 = ""
  IF (SYSVAR("SYSENV") = "FORE") THEN DO
    "ALLOC FILE(SNAPSHOT) NEW DELETE REUSE" ,
      "UNIT(SYSDA) TRACKS SPACE(5,5)" ,
      "DSORG(PS) RECFM(V B A) BLKSIZE(0) LRECL(125)"
  END
  parms = "msg1"
  SAY 'ADDRESS ATTCHMVS "KTPMATCM"' parms
  SAY "       " msg1
  ADDRESS ATTCHMVS "KTPMATCM" parms
  return_code = RC
  SAY "ATTCHMVS KTPMATCM RC("return_code")."
  IF (SYSVAR("SYSENV") = "FORE") THEN DO
    ADDRESS ISPEXEC ,
      "LMINIT DATAID(fileid) DDNAME(SNAPSHOT) ENQ(SHR)"
    lminit_rc = RC
    ADDRESS ISPEXEC ,
      "VIEW DATAID("fileid")"
    ADDRESS ISPEXEC ,
      "LMCLOSE DATAID("fileid")"
    lmclose_rc = RC
  END
  "FREE FILE(SNAPSHOT)"

  SAY ""
  msg1 = "THREE PARAMETERS IS ONE TWO (sic) MANY."
  msg2 = "(sic) TWO was used in place of TOO."
  msg3 = "O n e   m e s s a g e   t o o   m a n y!"
  IF (SYSVAR("SYSENV") = "FORE") THEN DO
    "ALLOC FILE(SNAPSHOT) NEW DELETE REUSE" ,
      "UNIT(SYSDA) TRACKS SPACE(5,5)" ,
      "DSORG(PS) RECFM(V B A) BLKSIZE(0) LRECL(125)"
  END
  parms = "msg1 msg2 msg3"
  SAY 'ADDRESS ATTCHMVS "KTPMATCM"' parms
  SAY "       " msg1
  SAY "       " msg2
  SAY "       " msg3
  ADDRESS ATTCHMVS "KTPMATCM" parms
  return_code = RC
  SAY "ATTCHMVS KTPMATCM RC("return_code")."
  IF (SYSVAR("SYSENV") = "FORE") THEN DO
    ADDRESS ISPEXEC ,
      "LMINIT DATAID(fileid) DDNAME(SNAPSHOT) ENQ(SHR)"
    lminit_rc = RC
    ADDRESS ISPEXEC ,
      "VIEW DATAID("fileid")"
    ADDRESS ISPEXEC ,
      "LMCLOSE DATAID("fileid")"
    lmclose_rc = RC
  END
  "FREE FILE(SNAPSHOT)"

  function_rc = Ddlist_For_Iebgener()

  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine does cleanup before exiting.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Termination_Routine:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Example for passing a DDLIST to IEBGENER.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Ddlist_For_Iebgener:
    "ALLOC FILE(CTL) DUMMY LRECL(80)"
    "ALLOC FILE(REP) NEW DELETE REUSE" ,
      "UNIT(SYSDA) TRACKS SPACE(5,5)" ,
      "DSORG(PS) RECFM(F B A) BLKSIZE(0) LRECL(121)"
    "ALLOC FILE(INP) DATASET(KTPM.REXX(KTPMATCM)) SHR REUSE"
    "ALLOC FILE(OUT) NEW DELETE REUSE" ,
      "UNIT(SYSDA) TRACKS SPACE(5,5)" ,
      "DSORG(PS) RECFM(V B A) BLKSIZE(0) LRECL(137)"
  SAY ""
  SAY "ATTCHMVS IEBGENER"
  SAY "================="
  prog   = 'IEBGENER'
  parm   = ''                       /* Standard PARM, as from JCL    */
  ddlist = COPIES('00'x,8) ||,      /* DDname  1 override: SYSLIN    */
           COPIES('00'x,8) ||,      /* DDname  2 override:  n/a      */
           COPIES('00'x,8) ||,      /* DDname  3 override: SYSLMOD   */
           COPIES('00'x,8) ||,      /* DDname  4 override: SYSLIB    */
           LEFT('CTL',  8) ||,      /* DDname  5 override: SYSIN     */
           LEFT('REP',  8) ||,      /* DDname  6 override: SYSPRINT  */
           COPIES('00'x,8) ||,      /* DDname  7 override: SYSPUNCH  */
           LEFT('INP',  8) ||,      /* DDname  8 override: SYSUT1    */
           LEFT('OUT',  8) ||,      /* DDname  9 override: SYSUT2    */
           COPIES('00'x,8) ||,      /* DDname 10 override: SYSUT3    */
           COPIES('00'x,8) ||,      /* DDname 11 override: SYSUT4    */
           COPIES('00'x,8) ||,      /* DDname 12 override: SYSTERM   */
           COPIES('00'x,8) ||,      /* DDname 13 override:  n/a      */
           COPIES('00'x,8)          /* DDname 14 override: SYSCIN    */
  ADDRESS ATTCHMVS prog 'PARM DDLIST'   /* had LINKMVS */
  iebgener_rc = RC
  SELECT
    WHEN (iebgener_rc = 0) THEN DO
      SAY "00 (X'00')Successful completion."
    END
    WHEN (iebgener_rc = 4) THEN DO
      SAY "04 (X'04')Probable successful completion. A warning message"
      SAY "is written."
    END
    WHEN (iebgener_rc = 8) THEN DO
      SAY "08 (X'08')Either processing was ended after you requested"
      SAY "processing of  user header labels only, or a DBCS error was"
      SAY "encountered."
    END
    WHEN (iebgener_rc = 12) THEN DO
      SAY "12 (X'0C')Either an unrecoverable error exists and the job"
      SAY "step is  stopped, or a DBCS error was encountered."
    END
    WHEN (iebgener_rc = 16) THEN DO
      SAY "16 (X'10')A user routine passed a return code of 16 to"
      SAY "IEBGENER. The  utility ends."
    END
    OTHERWISE DO
      SAY "You should never reach here."
      SAY "RC("iebgener_rc") is not one I recognize."
    END
  END
  IF (SYSVAR("SYSENV") = "FORE") THEN DO
    IF (iebgener_rc > 0) THEN DO
      ADDRESS ISPEXEC ,
        "LMINIT DATAID(fileid) DDNAME(REP) ENQ(SHR)"
      lminit_rc = RC
      ADDRESS ISPEXEC ,
        "VIEW DATAID("fileid")"
      ADDRESS ISPEXEC ,
        "LMCLOSE DATAID("fileid")"
      lmclose_rc = RC
    END
    ADDRESS ISPEXEC ,
      "LMINIT DATAID(fileid) DDNAME(OUT) ENQ(SHR)"
    lminit_rc = RC
    ADDRESS ISPEXEC ,
      "VIEW DATAID("fileid")"
    ADDRESS ISPEXEC ,
      "LMCLOSE DATAID("fileid")"
    lmclose_rc = RC
    "FREE FILE(CTL)"
    "FREE FILE(REP)"
    "FREE FILE(INP)"
    "FREE FILE(OUT)"
  END
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
End of code.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
