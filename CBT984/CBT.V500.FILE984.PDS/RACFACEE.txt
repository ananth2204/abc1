/* We first need REXX in comment if compiled or read from SYSPROC.   */
pgm_RACFACEE:
  rexxpgm_version = "01.01"         /* Set with 'ver 1' and 'lev 2'. */

  NUMERIC DIGITS 16   /* Handles Petabyte                            */

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
-----------------------------------------------------------------------
 Get REXX system variables (SYSVAR).
-----------------------------------------------------------------------
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
  sys_sysuid = Strip(Sysvar("SYSUID"),"T"," ")
  say "User:" sys_sysuid"."
  sysvar_sysracf = SysVar("SYSRACF")
  say "RACF status:" sysvar_sysracf
  sysvar_syslracf = SysVar("SYSLRACF")
  say "Level of racf:" sysvar_syslracf

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
-----------------------------------------------------------------------
 Get Communication Vector Table (CVT).
-----------------------------------------------------------------------
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
  PTR2PSA  = 0                                     /* Pointer to PSA */
  CVTPTR   = STORAGE(D2X(PTR2PSA + 16),4)          /* Pointer to CVT */
  CVT      = C2D(BitAnd(CVTPTR,"7FFFFFFF"X)) /* Flip high order bit */

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
-----------------------------------------------------------------------
 Get RACF Communication Vector Table (RCVT).
-----------------------------------------------------------------------
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
  CVTRAC   = C2d(Storage(D2x(CVT + 992),4))     /* point to RACF CVT */
  RCVTID   = Storage(D2x(CVTRAC),4)           /* point to RCVTID     */
  SECNAM = RCVTID                             /* ACF2, RCVT, or RTSS */
  If RCVTID = "ACF2" then SECNAM = "CA-ACF2"  /* ACF2 is CA-ACF2     */
  If RCVTID = "RCVT" then SECNAM = "RACF"     /* RCVT is RACF        */
  If RCVTID = "RTSS" then SECNAM = "TopSecret" /* RTSS is Top Secret */
  Say "SAF product is:" SECNAM
  If ((RCVTID = "RCVT") | (RCVTID = "RTSS")) then do
    RCVTDSN = Strip(Storage(D2x(CVTRAC + 56),44)) /* RACF prim dsn or */
    Say "database:" rcvtdsn                      /* TSS Security File */
  End
  RACFVRM  = Storage(D2x(CVTRAC + 616),4)      /* RACF Ver/Rel/Mod    */
  RACFVER  = Substr(RACFVRM,1,1)               /* RACF Version        */
  RACFREL  = Substr(RACFVRM,2,2)               /* RACF Release        */
  RACFREL  = Format(RACFREL)                   /* Remove leading 0    */
  RACFMOD  = Substr(RACFVRM,4,1)               /* RACF MOD level      */
  RACFLEV  = RACFVER || "." || RACFREL || "." || RACFMOD
  say "RACF level (FMID) =" racflev
  If (rcvtid <> "RCVT") Then Do
    Say "Not a RACF shop."
    Return 0
  End

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
-----------------------------------------------------------------------
 Get ACcessor Environment Element (ACEE)
-----------------------------------------------------------------------
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
  psaold   = Storage(D2x(548),4)             /* Pointer to curr ASCB */
  ascbasxb = Storage(D2x(C2d(psaold)+108),4)     /* Get ASXB address */
  asxbsenv = Storage(D2x(C2d(ascbasxb)+200),4)   /* Get ACEE address */
  aceeptr = asxbsenv
  aceeacee = Storage(D2x(C2d(aceeptr)+0),4)        /* get eyecatcher */
  say "Eyecatcher:" aceeacee
  If (aceeacee <> "ACEE") Then Do
    Say "No ACEE"
    return 0
  end

  aceeusrl = Storage(D2x(C2d(aceeptr)+20),1)        /* userid length */
  aceeusr  = Storage(D2x(C2d(aceeptr)+21),C2D(aceeusrl))   /* userid */
  say "USERID:" aceeusr "length("c2d(aceeusrl)")"

  aceegrpl = Storage(D2x(C2d(aceeptr)+29),1)               /* length */
  aceegrpn = Storage(D2x(C2d(aceeptr)+30),C2D(aceegrpl))     /* name */
  say "Connect GROUP:" aceegrpn

  aceeflg1 = Storage(D2x(C2d(aceeptr)+38),1)                 /* flag */
  say "User flags:" Char_To_Bits(aceeflg1)
  If (BitAnd(aceeflg1,"80"X) = "80"x) Then Do
    Say "  You are SPECIAL."
  End
  If (SubStr(aceeuser_flag1,2,1) = 1) Then Do
    Say "  ADSP"
  End
  If (SubStr(aceeuser_flag1,3,1) = 1) Then Do
    Say "  You have OPERATIONS."
  End
  If (SubStr(aceeuser_flag1,4,1) = 1) Then Do
    Say "  You have AUDITOR."
  End
  If (SubStr(aceeuser_flag1,5,1) = 1) Then Do
    Say "  You are being monitored."
  End
  If (SubStr(aceeuser_flag1,6,1) = 1) Then Do
    Say "  This is reserved."
  End
  If (SubStr(aceeuser_flag1,7,1) = 1) Then Do
    Say "  Privieged STC."
  End
  If (SubStr(aceeuser_flag1,8,1) = 1) Then Do
    Say "  RACF-defined user."
  End

  aceeflg2 = Storage(D2x(C2d(aceeptr)+39),1)                 /* flag */
  aceeuser_flag2 = Char_To_Bits(aceeflg2)
  If (SubStr(aceeuser_flag2,1,1) = 1) Then Do
    Say "  alter-auth to resource"
  End
  If (SubStr(aceeuser_flag2,2,1) = 1) Then Do
    Say "  control-auth to resource"
  End
  If (SubStr(aceeuser_flag2,3,1) = 1) Then Do
    Say "  update-auth to resource"
  End
  If (SubStr(aceeuser_flag2,4,1) = 1) Then Do
    Say "  read-auth to resource"
  End
  If (SubStr(aceeuser_flag2,5,1) = 1) Then Do
    Say "  This is reserved."
  End
  If (SubStr(aceeuser_flag2,6,1) = 1) Then Do
    Say "  This is reserved."
  End
  If (SubStr(aceeuser_flag2,7,1) = 1) Then Do
    Say "  This is reserved."
  End
  If (SubStr(aceeuser_flag2,8,1) = 1) Then Do
    Say "  no-auth to resource"
  End

  aceeflg3 = Storage(D2x(C2d(aceeptr)+40),1)                 /* flag */
  aceeuser_flag3 = Char_To_Bits(aceeflg3)
  If (SubStr(aceeuser_flag3,1,1) = 1) Then Do
    Say "  access list of group"
  End
  If (SubStr(aceeuser_flag3,2,1) = 1) Then Do
    Say "  This is reserved."
  End
  If (SubStr(aceeuser_flag3,3,1) = 1) Then Do
    Say "  This is reserved."
  End
  If (SubStr(aceeuser_flag3,4,1) = 1) Then Do
    Say "  This is reserved."
  End
  If (SubStr(aceeuser_flag3,5,1) = 1) Then Do
    Say "  This is reserved."
  End
  If (SubStr(aceeuser_flag3,6,1) = 1) Then Do
    Say "  This is reserved."
  End
  If (SubStr(aceeuser_flag3,7,1) = 1) Then Do
    Say "  This is reserved."
  End
  If (SubStr(aceeuser_flag3,8,1) = 1) Then Do
    Say "  This is reserved."
  End

  aceedate = C2X(Storage(D2x(C2d(aceeptr)+41),3)) /* date of racinit */
  racinit_year = Substr(aceedate,1,2)
  racinit_doy = Substr(aceedate,3,3)
  tmpdate = racinit_year||racinit_doy
  say "tmpdate="tmpdate
  binary_days = Date('B', tmpdate, 'J')
  human_date = Date('N', binary_days, 'B')
  say "Racinit on" aceedate "-" human_date

  aceeproc = Storage(D2x(C2d(aceeptr)+44),8)         /* STC procname */
  say "STC procname:" aceeproc

  aceetrmp = Storage(D2x(C2d(aceeptr)+52),4)         /* STC procname */
  say "non-terminal user terminal related information address:" ,
    c2x(aceetrmp)

  aceeflg4 = Storage(D2x(C2d(aceeptr)+56),1)                 /* flag */
  aceeuser_flag4 = Char_To_Bits(aceeflg4)
  If (SubStr(aceeuser_flag4,3,1) = 1) Then Do
    Say "  authorized to define other users"
  End
  If (SubStr(aceeuser_flag4,5,1) = 1) Then Do
    Say "  authorized to protect DASD volumes"
  End
  If (SubStr(aceeuser_flag4,6,1) = 1) Then Do
    Say "  authorized to protect TAPE volumes"
  End
  If (SubStr(aceeuser_flag4,7,1) = 1) Then Do
    Say "  authorized to protect TERMINALS"
  End

  aceetrid = Storage(D2x(C2d(aceeptr)+64),8)          /* terminal id */
  say "terminal:" aceetrid

  aceeunaa = Storage(D2x(C2d(aceeptr)+100),4)     /* address of name */
  say "user name at address:" c2x(aceeunaa)
  If (C2D(aceeunaa) > 0) Then Do
    aceeunal = Storage(D2x(C2d(aceeunaa)),1)      /* name length     */
    aceeunam = Storage(D2x(C2d(aceeunaa)+1),C2D(aceeunal))  /* name */
    say "user name:" aceeunam
  End

  say "Connect C group list:"
  aceecgrp = Storage(D2x(C2d(aceeptr)+108),4)     /* addr group list */
  aceeeyec = Storage(D2x(C2d(aceecgrp)+00),4)     /* addr group list */
  If (aceeeyec <> "CGRP") Then Do
    Say "Major error on CGRP"
    return 0
  end
  aceecqty = Storage(D2x(C2d(aceecgrp)+8),2)              /* quantity */
  cgrp_pos = 32
  cgrp_eyecatcher = Storage(D2x(C2d(aceecgrp)+cgrp_pos),4)
  saf_connect = ""
  Do gix = 1 to c2d(aceecqty)
    function_rc = show_storage(Storage(D2x(C2d(aceecgrp)+cgrp_pos),24))
    cgrp_item = Storage(D2x(C2d(aceecgrp)+cgrp_pos),8)
    saf_connect = saf_connect""cgrp_item" "
    cgrp_pos = cgrp_pos + 24
  End
  say "C:" saf_connect

  say "Connect F group list:"
  aceefcgp = Storage(D2x(C2d(aceeptr)+116),4)      /* get group list */
  aceeeyec = Storage(D2x(C2d(aceefcgp)+00),4)     /* addr group list */
  If (aceeeyec <> "CGRP") Then Do
    Say "Major error on CGRP"
    return 0
  end

  /*

aceeptr+108 = 007B8BF0
123456789+123456789+123456789+12
---------+---------+---------+--
CGRP:  & ::    :    ::::
CCDDF0050000000000000FFF00000000
3797F0000210000F00001FFF00000000
123456789+123456789+1234
---------+---------+----
OMVSGRP
DDEECDD40000000000000000
645279700000000000000000
123456789+123456789+1234
---------+---------+----
SYS1
EEEF44440000000000000000
282100000000000000000000
Group connections: OMVSGRP  SYS1

  */

  aceefqty = Storage(D2x(C2d(aceefcgp)+8),2)              /* quantity */
  function_rc = show_storage(Storage(D2x(C2d(aceefcgp)+000),32))
  cgrp_pos = 32
  cgrp_eyecatcher = Storage(D2x(C2d(aceefcgp)+cgrp_pos),4)
  aceeeyec = Storage(D2x(C2d(aceefcgp)+00),4)     /* group list */
  If (aceeeyec <> "CGRP") Then Do
    Say "Major error on CGRP"
    return 0
  end
  saf_fconnect = ""
  Do gix = 1 to c2d(aceefqty)
    function_rc = show_storage(Storage(D2x(C2d(aceefcgp)+cgrp_pos),24))
    cgrp_item = Storage(D2x(C2d(aceefcgp)+cgrp_pos),8)
    saf_fconnect = saf_fconnect""cgrp_item" "
    cgrp_pos = cgrp_pos + 24
  End
  say "F:" saf_fconnect

  /*

aceeptr+116 = 007FC888
123456789+123456789+123456789+12
---------+---------+---------+--
CGRP:  & ::    :    ::::
CCDDF0050000000000000FFF00000000
3797F0000210000D00001FFF00000000
123456789+123456789+1234
---------+---------+----
OMVSGRP
DDEECDD40000000000000000
645279700000000000000000
123456789+123456789+1234
---------+---------+----
SYS1
EEEF44440000000000000000
282100000000000000000000
Group connections: OMVSGRP  SYS1

  */

  aceeflg5 = Storage(D2x(C2d(aceeptr)+133),1)                /* flag */
  aceeuser_flag5 = Char_To_Bits(aceeflg5)
  If (SubStr(aceeuser_flag5,1,1) = 1) Then Do
    Say "  ACEE 31 bit mode"
  End
  If (SubStr(aceeuser_flag5,2,1) = 1) Then Do
    Say "  ACEEDAT4 contains data"
  End
  Else Do
    Say "  ACEEDAT4 not used"
  End

  xx = OUTTRAP("racf_back.")
  address TSO "LISTUSER" sys_sysuid ,
    "CICS CSDATA DCE DFP EIM KERB LANGUAGE LNOTES",
    "NDS NETVIEW OMVS OPERPARM OVM PROXY TSO WORKATTR"
  xx = OUTTRAP("Off")
  /* Get UserID's Current Name */
  if (racf_back.0 < 2 ) Then Do
    say "Unable to get the user's name from RACF."
    return 16
  end

  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
-----------------------------------------------------------------------
 Show a block of storage in character and hexadecimal (c/h/l) format.
-----------------------------------------------------------------------
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
show_storage:
  Parse Arg storage_block
  Say Left(Copies("123456789+",13),Length(storage_block))
  Say Left(Copies("---------+",13),Length(storage_block))
  Say storage_block
  hex_blk = c2x(storage_block)
  hex_top = ""
  hex_bot = ""
  do hix = 1 to Length(hex_blk)
    hex_top = hex_top""Substr(hex_blk,hix,1)
    hix = hix + 1
    hex_bot = hex_bot""Substr(hex_blk,hix,1)
  end
  say hex_top
  say hex_bot
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
-----------------------------------------------------------------------
 FUNCTION TO TURN A CHARACTER STRING INTO BINARY BITS.
-----------------------------------------------------------------------
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Char_To_Bits: Procedure Expose BITS
  DATA = ARG(1)
  IF (BITS.F <> "1111") Then Do
    BITS.0="0000"; BITS.1="0001"; BITS.2="0010"; BITS.3="0011"
    BITS.4="0100"; BITS.5="0101"; BITS.6="0110"; BITS.7="0111"
    BITS.8="1000"; BITS.9="1001"; BITS.A="1010"; BITS.B="1011"
    BITS.C="1100"; BITS.D="1101"; BITS.E="1110"; BITS.F="1111"
  End
  dx = C2X(DATA)
  BS=""
  Do I = 1 TO LENGTH(dx)
    Q = SUBSTR(dx,I,1)
    BS = BS""BITS.Q
  End
  BS = STRIP(BS,"B"," ")
  Return BS
