/* rexx */

  rexxpgm_version = "02.08"           /* ver lev */

  PARSE ARG tsoeparm

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This code drives Initialization, Process, and Termination routines.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Main_Routine:
  return_code = Initialization_Routine()
  IF (return_code = 0) THEN DO
    return_code = Process_Routine()
  END
  return_code = Termination_Routine()
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================

 Dataset:  VENDOR.SYSEXEC(SPFPROCK)
 Contact:  "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
 Overview: Allocate ISPF DDnames and launch ISPF.
 Syntax:   %SPFPROCK '|debug=level|'
           ex 'VENDOR.SYSEXEC(SPFPROCK)' 'debug=1'
           debug: appends how much is done.
               0: Default, normal progress messages.
               1: Shows the data set list.
 JCL:      VENDOR.PROCLIB(SPFPROCK)
//SPFPROCK PROC
//SPFPROCK EXEC PGM=IKJEFT01,DYNAMNBR=200,
//             PARM='%SPFPROCK'
//*                                                                 *//
//* DSN=VENDOR.PROCLIB(SPFPROCK)                                    *//
//*                                                                 *//
//* THIS PROC CONTAINS NO ISPF DATASETS - ALL ISPF DDNAMES ARE      *//
//* SUPPLIED IN THE REXX ROUTINE LOCATED IN VENDOR.CLIST(SPFPROCK). *//
//*                                                                 *//
//STEPLIB DD DISP=SHR,DSN=SYS1.W$$.LINKLIB
//*                                                                 *//
//* IF THIS LOGON PROC STAYS SIMPLE AND ALLOCATIONS REQUIRED FOR    *//
//* ISPF ARE COMPLETED VIA THE NAMED ROUTINE IN THE PARM ABOVE THEN *//
//* IT IS HIGHLY LIKELY THAT A USER WOULD BE ABLE TO GET ON TSO/E.  *//
//*                                                                 *//
//SYSPROC  DD  DISP=SHR,DSN=VENDOR.CLIST
//SYSPRINT DD  TERM=TS,SYSOUT=*
//SYSTERM  DD  TERM=TS,SYSOUT=*
//SYSIN    DD  TERM=TS

-----------------------------------------------------------------------

 History of Modifications
 ------------------------
vv.mm WHEN     Who / What you did ... (Newest change at the top.)
----- -------- --------------------------------------------------------
02.08 20180621 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Added SYS1.SEDG* (DFSMSrmm) to let ISMF option G
                  work.
----- -------- --------------------------------------------------------
02.07 20180606 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Added SAY to 'other' ddnames.
               2) Added IF to all alloc routines.
               3) Deleted FREE since REUSE is in use.
               4) Every ddname uses Ini,Add,ALLOCATE*.
               5) $KTPM added CODE.
               6) Use apostrophes only where apostrophes should be.
               7) Added debug support to invoke Show_Dslist().
               7) Added 0 to return on Show_Dslist.
----- -------- --------------------------------------------------------
02.06 20180605 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Added SAY for TSO ddnames.
----- -------- --------------------------------------------------------
02.05 20180514 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Stylize using $PUTKTM and manual edits:
                  Programming Using The Kenneth Tomiak Method.
                 a) $PUTKTM Added MAIN.
                 b) $PUTKTM Added BLK.
                 c) $PUTKTM Added IniT.
                 d) $PUTKTM Added PROC.
                 e) $PUTKTM Added TERM.
               2) Stylize using Edit Macro @putktm:
                  Programming Using The Kenneth Tomiak Method.
----- -------- --------------------------------------------------------
02.04 20180410 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Allocate IBM FileManager for z/OS FMND10 data sets.
----- -------- --------------------------------------------------------
02.03 20170727 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Mount zFS if named 'OMVS.&SYSUID..ZFS'
               2) Add To_Lowercase().
----- -------- --------------------------------------------------------
02.02 20170722 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Added SYSTCPD.
               2) Converted IPCSPARM and SMPTABL to using
                  Ini,Add,ALLOCATE*.
----- -------- --------------------------------------------------------
02.01 20170415 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Added IPCSPARM.
----- -------- --------------------------------------------------------
02.00 20170316 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Based on SYS1.LOGON.CLISTS(ISPFZRY) - 01.02
               2) Altered user data set names to match what the
                  MODEL macro uses.
               3) Minor style editing.
               4) Removed a duplicale allocate_sysproc routine.
               5) Commented out the use of the unnecessary
                   Allocate_More_Temp_Datasets().
----- -------- --------------------------------------------------------
01.02 20170105 N.Haas
               1) Based on ISPFZRX.
----- -------- --------------------------------------------------------
01.01 20170104 Roland Schiradin
               1) Added Allocate_More_Temp_Datasets() to handle
                  more than two split screens.
                    ISPCTL*, ISPLST*, and ISPLOG
               2) Added Allocate_New() for new allocations.
----- -------- --------------------------------------------------------
01.00 ????????
               1) Original code.
----- -------- --------------------------------------------------------

-----------------------------------------------------------------------

STANDARD GLOBAL DISCLAIMER
--------------------------
The author explicitly disavows any claim whatsoever about the
correctness or functionality of this program, and disclaims liability
for anything and everything bad that might happen in connection with,
before, during, or after using it. I have tried to make it work right,
and I am personally pretty confident that it does, but everybody makes
mistakes, so if you use it, you do so at your own risk.

=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine Initializes constants and variables.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Initialization_Routine:
  return_code = 0

  PARSE UPPER VAR tsoeparm tsoeparm "=" debug_method
  IF (ABBREV("DEBUG",tsoeparm,1) > 0) THEN DO
    IF (debug_method > 0) THEN DO
      SAY "DEBUG mode" debug_method "is on."
    END
  END
  ELSE DO
    debug_method = 0
  END

  SIGNAL ON HALT
  msg_state = MSG("Off")
  sysvar_sysuid = SYSVAR("SYSUID")
  SAY ""
  SAY COPIES("+",79)
  SAY "If something fails horribly, then"
  SAY "try some other logon clist:"
  SAY "  ex 'sys1.logon.clists(ISPFZ25)'"
  SAY "From TSO READY redrive this using:"
  SAY "  ex 'VENDOR.SYSEXEC(SPFPROCK)'"
  SAY COPIES("+",79)
  SAY ""
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine does the processing.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_Routine:
/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
TSO/E data sets
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
  SAY "Allocating TSO/E datasets:"
  function_rc = Alloc_Sysexec()
  function_rc = Alloc_Sysproc()
  function_rc = Alloc_Syshelp()
  count = Ini()
  count = Add("'SYS1.BRODCAST'")
  IF (count > 0) THEN DO
    SAY "  SYSLBC  :" RIGHT(count,2) "data set(s)"
    count = Allocate_Ddname("SYSLBC")
  END
  count = Ini()
  count = Add("'SYS1.UADS'")
  IF (count > 0) THEN DO
    SAY "  SYSUADS :" RIGHT(count,2) "data set(s)"
    count = Allocate_Ddname("SYSUADS")
  END
/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
ISPF related datasets (includes other products)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
  SAY "Allocating ISPF datasets:"
  function_rc = Alloc_Ispprof()
  function_rc = Alloc_Ispllib()
  function_rc = Alloc_Ispmlib()
  function_rc = Alloc_Ispplib()
  function_rc = Alloc_Ispslib()
  function_rc = Alloc_Isptabl()
  function_rc = Alloc_Isptlib()
/* function_rc = Allocate_More_Temp_Datasets() */
/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
SMP/E ISPF table input/output.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
  SAY "Allocating SMP/E datasets:"
  count = Ini()
  profile_dsn = "ISPF.ISPPROF"
  listdsi_rc = LISTDSI(profile_dsn)
  IF (listdsi_rc <= 4) THEN DO
    count = Add(profile_dsn)
  END
  IF (count > 0) THEN DO
    SAY "  SMPTABL :" RIGHT(count,2) "data set(s)"
    count = Allocate_Ddname("SMPTABL")
  END
/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
Interactive Problem Control System (IPCS).
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
  SAY "Allocating IPCS datasets:"
  count = Ini()
  count = Add("'SYS1.PARMLIB'")
  count = Add("'SYS1.SHASPARM'")
  count = Add("'DFH540.CICS.SDFHPARM'")
  IF (count > 0) THEN DO
    SAY "  IPCSPARM:" RIGHT(count,2) "data set(s)"
    count = Allocate_Ddname('IPCSPARM')
  END
/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
Interactive Problem Control System (IPCS).
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
  SAY "Allocating TCP/IP datasets:"
  count = Ini()
  count = Add("'TCPIP.TCPIP.DATA'")
  count = Add("'SYS1.SHASPARM'")
  IF (count > 0) THEN DO
    SAY "  SYSTCPD :" RIGHT(count,2) "data set(s)"
    count = Allocate_Ddname("SYSTCPD")
  END
/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
Mount UNIX System Service user zFS.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
  SAY "Mounting zFS for user:"
  sysdsn_rc = SYSDSN("'OMVS."sysvar_sysuid".ZFS'")
  IF (sysdsn_rc = "OK") THEN DO
    lowercase_sysuid = To_Lowercase(sysvar_sysuid)
    ADDRESS TSO ,
      "MOUNT FILESYSTEM('OMVS."sysvar_sysuid".ZFS')" ,
      "MOUNTPOINT('/u/'lowercase_sysuid) TYPE(ZFS)"
  END
/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
Serena License file. Would be nice to know why?
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
/*
  SAY "Allocating Serena datasets:"
  SAY "  SERLIC"
  "ALLOC FILE(SERLIC) DA('IBMUSER.SERENA.LICENSE.DATA') SHR REUSE"
*/
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine does cleanup before exiting.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Termination_Routine:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
Something went horribly wrong and it is not prudent to launch ISPF.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Halt:
  SAY ""
  SAY COPIES("+",79)
  SAY ""
  SAY "Something went horribly wrong and it is not" ,
   "prudent to launch ISPF."
  SAY ""
  SAY "Try some other logon clist:"
  SAY "  ex 'sys1.logon.clists(ISPFZ25)'"
  SAY ""
  SAY COPIES("+",79)
  SAY ""
  EXIT

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
Allocate a concatenation of REXX type of datasets.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Alloc_Sysexec:
  count = Ini()
  rexx_dataset = "TSO.REXX"
  listdsi_rc = LISTDSI(rexx_dataset)
  IF (listdsi_rc <= 4) THEN DO
    count = Add(rexx_dataset)
  END
  count = Add("'VENDOR.SYSEXEC'")            /* System user          */
  count = Add("'SVTSC.SYSEXEC'")             /* IBM System Center    */
  count = Add("'LVL0.SYSEXEC'")              /* IBM Internal         */
  count = Add("'ISP.SISPEXEC'")              /* ISPF/PDF             */
  /* count = Add("'EOY.SEOYCLIB'") */        /* BookManager Read/MVS */
  count = Add("'FMND10.SFMNEXEC'")           /* File Manager         */
  /* count = Add("'CSQ710.SCSQEXEC'") */     /* MQ Series            */
  /* count = Add("'FAN140.SVSC.CMDLIB'") */  /* REXX Compiler        */
  /* count = Add("'FAN140.SFANCMD'") */      /* REXX Compiler        */
  /* count = Add("'FAN140.SEAGCMD'") */      /* REXX Library         */
  count = Add("'TCPIP.SEZAEXEC'")            /* TCP/IP               */
  count = Add("'SYS1.SBPXEXEC'")             /* UNIX System Services */
  count = Add("'SYS1.SEDGEXE1'")             /* DFSMSrmm             */
  IF (count > 0) THEN DO
    SAY "  SYSEXEC :" RIGHT(count,2) "data set(s)"
    count = Allocate_Ddname("SYSEXEC")
  END
  RETURN count

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
Allocate a concatenation of CLIST type of datasets.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Alloc_Sysproc:
  count = Ini()
  rexx_dataset = "TSO.CLIST"
  listdsi_rc = LISTDSI(rexx_dataset)
  IF (listdsi_rc <= 4) THEN DO
    count = Add(rexx_dataset)
  END
  /*  count = Add("'IBMUSER.CLIST'") */      /* A lot of user stuff. */
  count = Add("'VENDOR.CLIST'")              /* System user          */
  count = Add("'SVTSC.CLIST'")               /* IBM System Center    */
  count = Add("'ISP.SISPCLIB'")              /* ISPF                 */
  /* count = Add("'EOY.SEOYPROC'") */        /* BookManager Read/MVS */
  /* count = Add("'EQAD10.SEQAEXEC'") */     /* Debug Tool for z/OS  */
  count = Add("'SYS1.SCBDCLST'")             /* HCD                  */
  count = Add("'SYS1.SBLSCLI0'")             /* IPCS                 */
  count = Add("'SYS1.DGTCLIB'")              /* ISMF                 */
  count = Add("'SYS1.HRFCLST'")              /* RACF                 */
  count = Add("'SYS1.SERBCLS'")              /* RMF                  */
  count = Add("'GIM.SGIMCLS0'")              /* SMP/E                */
  IF (count > 0) THEN DO
    SAY "  SYSPROC :" RIGHT(count,2) "data set(s)"
    count = Allocate_Ddname("SYSPROC")
  END
  RETURN count

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
Allocate a concatenation of Help type of datasets.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Alloc_Syshelp:
  count = Ini()
  help_dataset = "TSO.HELP"
  listdsi_rc = LISTDSI(help_dataset)
  IF (listdsi_rc <= 4) THEN DO
    count = Add(help_dataset)
  END
  count = Add("'VENDOR.HELP'")
  /* count = Add("'IBMUSER.HELP'") */        /* A lot of user stuff. */
  count = Add("'SVTSC.HELP'")                /* IBM System Center    */
  count = Add("'LVL0.HELP'")                 /* IBM Internal         */
  count = Add("'SYS1.HELP'")                 /* TSO/E                */
  count = Add("'ISP.SISPHELP'")              /* ISPF/PDF             */
  IF (count > 0) THEN DO
    SAY "  SYSHELP :" RIGHT(count,2) "data set(s)"
    count = Allocate_Ddname("SYSHELP")
  END
  RETURN count

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
Allocate the pre-defined ISPPROF data set.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Alloc_Ispprof:
  count = Ini()
  profile_dataset = "ISPF.ISPPROF"
  listdsi_rc = LISTDSI(profile_dataset)
  IF (listdsi_rc <= 4) THEN DO
    count = Add(profile_dataset)
    IF (count > 0) THEN DO
      SAY "  ISPPROF :" RIGHT(count,2) "data set(s)"
      count = Allocate_Ddname("ISPPROF")
    END
  END
  RETURN count

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
Allocate a concatenation of LOADLIB type of datasets.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Alloc_Ispllib:
  count = Ini()
  loadlib_dataset = "PGM.LOADLIB"
  listdsi_rc = LISTDSI(loadlib_dataset)
  IF (listdsi_rc <= 4) THEN DO
    count = Add(loadlib_dataset)
  END
  count = Add("'VENDOR.ISPLLIB'")               /* System user       */
  count = Add("'SVTSC.ISPLLIB'")                /* IBM System Center */
  count = Add("'LVL0.ISPLLIB'")                 /* IBM Internal      */
  count = Add("'ISP.SISPLOAD'")                 /* ISPF/PDF          */
  /* count = Add("'SYS1.DFQLLIB'") */           /* ABARS             */
  count = Add("'SYS1.SICELINK'")                /* DFSort            */
  count = Add("'SYS1.SCBDHENU'")                /* HCD               */
  count = Add("'SYS1.DGTLLIB'")                 /* ISMF              */
  /* count = Add("'CSQ710.SCSQAUTH'") */        /* MQ Series         */
  /* count = Add("'IBMUSER.FDM780.LOAD'") */    /* PDSE aka STARTOOL */
  /* count = Add("'IBMUSER.SERCOMC.FDM780.LOAD'") */ /* STARTOOL     */
  /* count = Add("'FAN140.SFANLMD'") */         /* REXX Compiler     */
  /* count = Add("'FAN140.SEAGLMD'") */         /* REXX Library      */
  count = Add("'GIM.SGIMLMD0'")                 /* SMP/E             */
  IF (count > 0) THEN DO
    SAY "  ISPLLIB :" RIGHT(count,2) "data set(s)"
    count = Allocate_Ddname("ISPLLIB")
  END
  RETURN count

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
Allocate a concatenation of Message type of datasets.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Alloc_Ispmlib:
  count = Ini()
  msg_dataset = "ISPF.MSGS"
  listdsi_rc = LISTDSI(msg_dataset)
  IF (listdsi_rc <= 4) THEN DO
    count = Add(msg_dataset)
  END
  count = Add("'VENDOR.ISPMLIB'")            /* System user          */
  count = Add("'SVTSC.ISPMLIB'")             /* IBM System Center    */
  count = Add("'LVL0.ISPMLIB'")              /* IBM Internal         */
  count = Add("'ISP.SISPMENU'")              /* ISPF/PDF             */
  count = Add("'SYS1.SBLSMSG0'")             /* DAE Display Facility */
  /* count = Add("'SYS1.DFQMLIB'") */        /* ABARS                */
  /* count = Add("'EOY.SEOYMENU'") */        /* BookManager Read/MVS */
  count = Add("'FMND10.SFMNMENU'")           /* File Manager         */
  count = Add("'SYS1.DGTMLIB'")              /* ISMF                 */
  /* count = Add("'CSQ710.SCSQMSGE'") */     /* MQ Series            */
  /* count = Add("'IBMUSER.FDM780.MSGS'") */ /* PDSE aka STARTOOL    */
  count = Add("'SYS1.HRFMSG'")               /* RACF                 */
  /* count = Add("'FAN140.SFANMSEU'") */     /* REXX Compiler        */
  count = Add("'SYS1.SERBMENU'")             /* RMF                  */
  count = Add("'ISF.SISFMLIB'")              /* SDSF                 */
  count = Add("'GIM.SGIMMENU'")              /* SMP/E                */
  count = Add("'SYS1.SBPXMENU'")             /* UNIX System Services */
  count = Add("'SYS1.SEDGMENU'")             /* DFSMSrmm             */
  IF (count > 0) THEN DO
    SAY "  ISPMLIB :" RIGHT(count,2) "data set(s)"
    count = Allocate_Ddname("ISPMLIB")
  END
  RETURN count

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
Allocate a concatenation of Panel type of datasets.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Alloc_Ispplib:
  count = Ini()
  panels_dataset = "ISPF.PANELS"
  listdsi_rc = LISTDSI(panels_dataset)
  IF (listdsi_rc <= 4) THEN DO
    count = Add(panels_dataset)
  END
  /* count = Add("'IBMUSER.PANELS'") */      /* A lot of user stuff. */
  count = Add("'VENDOR.ISPPLIB'")            /* System user          */
  count = Add("'SVTSC.ISPPLIB'")             /* IBM System Center    */
  count = Add("'LVL0.ISPPLIB'")              /* IBM Internal         */
  count = Add("'ISP.SISPPENU'")              /* ISPF/PDF             */
  /* count = Add("'SYS1.DFQPLIB'") */        /* ABARS                */
  /* count = Add("'EOY.SEOYPENU'") */        /* BookManager Read/MVS */
  count = Add("'FMND10.SFMNPENU'")           /* File Manager         */
  count = Add("'SYS1.SBLSPNL0'")             /* IPCS                 */
  count = Add("'SYS1.DGTPLIB'")              /* ISMF                 */
  /* count = Add("'CSQ710.SCSQPNLE'") */     /* MQ Series            */
  /* count = Add("'IBMUSER.FDM780.PANELS'") */ /* PDSE aka STARTOOL  */
  count = Add("'SYS1.HRFPANL'")              /* RACF                 */
  /* count = Add("'FAN140.SFANPENU'") */     /* REXX Compiler        */
  count = Add("'SYS1.SERBPENU'")             /* RMF                  */
  count = Add("'ISF.SISFPLIB'")              /* SDSF                 */
  count = Add("'GIM.SGIMPENU'")              /* SMP/E                */
  count = Add("'SYS1.SBPXPENU'")             /* UNIX System Services */
  count = Add("'SYS1.SEDGPENU'")             /* DFSMSrmm             */
  IF (count > 0) THEN DO
    SAY "  ISPPLIB :" RIGHT(count,2) "data set(s)"
    count = Allocate_Ddname("ISPPLIB")
  END
  RETURN count

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
Allocate a concatenation of Skeleton type of datasets.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Alloc_Ispslib:
  count = Ini()
  skels_dataset = "ISPF.SKELS"
  listdsi_rc = LISTDSI(skels_dataset)
  IF (listdsi_rc <= 4) THEN DO
    count = Add(skels_dataset)
  END
  count = Add("'VENDOR.ISPSLIB'")            /* System user          */
  count = Add("'SVTSC.ISPSLIB'")             /* IBM System Center    */
  count = Add("'LVL0.ISPSLIB'")              /* IBM Internal         */
  count = Add("'ISP.SISPSENU'")              /* ISPF/PDF             */
  count = Add("'ISP.SISPSLIB'")              /* ISPF                 */
  count = Add("'FMND10.SFMNSLIB'")           /* File Manager         */
  count = Add("'SYS1.SBLSKEL0'")             /* IPCS                 */
  count = Add("'SYS1.DGTSLIB'")              /* ISMF                 */
  /* count = Add("'IBMUSER.FDM780.SKELS'") *//* PDSE aka STARTOOL    */
  count = Add("'SYS1.HRFSKEL'")              /* RACF                 */
  /* count = Add("'FAN140.SVSC.SFANSKL'") */ /* REXX Compiler        */
  count = Add("'ISF.SISFSLIB'")              /* SDSF                 */
  count = Add("'GIM.SGIMSENU'")              /* SMP/E                */
  IF (count > 0) THEN DO
    SAY "  ISPSLIB :" RIGHT(count,2) "data set(s)"
    count = Allocate_Ddname("ISPSLIB")
  END
  RETURN count

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
Allocate a Table output type of data set.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Alloc_Isptabl:
  count = Ini()
  tabl_dataset = "ISPF.ISPPROF"
  listdsi_rc = LISTDSI(tabl_dataset)
  IF (listdsi_rc <= 4) THEN DO
    count = Add(tabl_dataset)
  END
  IF (count > 0) THEN DO
    SAY "  ISPTABL :" RIGHT(count,2) "data set(s)"
    count = Allocate_Ddname("ISPTABL")
  END
  RETURN count

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
Allocate a concatenation of Table Iinput type of datasets.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Alloc_Isptlib:
  count = Ini()
  tables_dataset = "ISPF.TABLES"
  listdsi_rc = LISTDSI(tables_dataset)
  IF (listdsi_rc <= 4) THEN DO
    count = Add(tables_dataset)
  END
  count = Add("'"sysvar_sysuid".ISPF.ISPPROF'") /* User              */
  count = Add("'VENDOR.ISPTLIB'")            /* System user          */
  count = Add("'SVTSC.ISPTLIB'")             /* IBM System Center    */
  count = Add("'LVL0.ISPTLIB'")              /* IBM Internal         */
  count = Add("'ISP.SISPTENU'")              /* ISPF/PDF             */
  /* count = Add("'EOY.SEOYTENU'") */        /* BookManager Read/MVS */
  count = Add("'FMND10.SFMNTENU'")           /* File Manager         */
  count = Add("'SYS1.SBLSTBL0'")             /* IPCS                 */
  count = Add("'SYS1.DGTTLIB'")              /* ISMF                 */
  /* count = Add("'CSQ710.SCSQTBLE'") */     /* MQ Series            */
  count = Add("'ISF.SISFTLIB'")              /* SDSF                 */
  count = Add("'GIM.SGIMTENU'")              /* SMP/E                */
  count = Add("'SYS1.SBPXTENU'")             /* UNIX System Services */
  IF (count > 0) THEN DO
    SAY "  ISPTLIB :" RIGHT(count,2) "data set(s)"
    count = Allocate_Ddname("ISPTLIB")
  END
  RETURN count

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
Initialize an empty list of dataset names.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Ini:
  ds_list  = ""
  RETURN 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
Verify dataset existence and then Add to a list.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Add:
  ARG add_dsname
  sysdsn_rc = SYSDSN(add_dsname)
  SELECT
   WHEN (sysdsn_rc <> "OK") THEN DO
     SAY "Dataset not found:" add_dsname
   END
   OTHERWISE DO
     IF (POS(add_dsname,ds_list) = 0) THEN DO
       ds_list = ds_list || " " || add_dsname
       add_one = count + 1
      END
      ELSE DO
        SAY add_dsname "already in the data set list."
      END
    END
  END
  RETURN add_one

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Allocate additional ISPDTLn and ISPLSTn data sets.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Allocate_More_Temp_Datasets:
  SAY "  ISPF temporary data sets ISPCTL*, ISPLST*, and ISPLOG"
  allocate_rc = Allocate_New(ISPCTL0 VIO "F,B" 80)
  allocate_rc = Allocate_New(ISPCTL1 VIO "F,B" 80)
  allocate_rc = Allocate_New(ISPCTL2 VIO "F,B" 80)
  allocate_rc = Allocate_New(ISPCTL3 VIO "F,B" 80)
  allocate_rc = Allocate_New(ISPCTL4 VIO "F,B" 80)
  allocate_rc = Allocate_New(ISPCTL5 VIO "F,B" 80)
  allocate_rc = Allocate_New(ISPCTL6 VIO "F,B" 80)
  allocate_rc = Allocate_New(ISPCTL7 VIO "F,B" 80)
  allocate_rc = Allocate_New(ISPCTL8 VIO "F,B" 80)
  allocate_rc = Allocate_New(ISPLST1 VIO "F,B,A" 121)
  allocate_rc = Allocate_New(ISPLST2 VIO "F,B,A" 121)
  allocate_rc = Allocate_New(ISPLST3 VIO "F,B,A" 121)
  allocate_rc = Allocate_New(ISPLST4 VIO "F,B,A" 121)
  allocate_rc = Allocate_New(ISPLST5 VIO "F,B,A" 121)
  allocate_rc = Allocate_New(ISPLST6 VIO "F,B,A" 121)
  allocate_rc = Allocate_New(ISPLST7 VIO "F,B,A" 121)
  allocate_rc = Allocate_New(ISPLST8 VIO "F,B,A" 121)
  allocate_rc = Allocate_New(ISPLOG VIO "V,A" 125)
  RETURN 18

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Allocate a new PS type of data set.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Allocate_New:
  ARG ddname unit recfm lrecl
  "ALLOC FILE("ddname") NEW DELETE UNIT("unit")" ,
    "SPACE(1,1) CYLINDERS RECFM("recfm") LRECL("lrecl")"
  alloc_rc = RC
  RETURN alloc_rc

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Allocate a new PS type of data set.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Allocate_Ddname:
  ARG ddname
  IF (debug_method > 0) THEN DO
    function_rc = Show_Dslist(ddname, ds_list)
  END
  "ALLOC FILE("ddname") DA("ds_list") SHR REUSE"
  alloc_rc = RC
  RETURN alloc_rc

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Show the data set list (for debugging purposes).
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Show_Dslist: PROCEDURE
  PARSE ARG dd, dsn_list
  SAY COPIES("-",79)
  SAY LEFT(dd, 8) "==>" WORD(dsn_list, 1)
  DO ix = 2 TO WORDS(dsn_list)
    SAY COPIES(" ",12) WORD(dsn_list, ix)
  END
  SAY COPIES("-",99)
  RETURN 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Convert string to lowercase.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
To_Lowercase: PARSE ARG myarg
  IF (lowercase_letters = "LOWERCASE_LETTERS") THEN DO
    lowercase_letters = "abcdefghijklmnopqrstuvwxyz"
  END
  IF (uppercase_letters = "UPPERCASE_LETTERS") THEN DO
    uppercase_letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  END
  RETURN TRANSLATE(myarg,lowercase_letters,uppercase_letters)

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
End of code.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
