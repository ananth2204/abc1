/* rexx */
Rexx_DSNR048I:
  rexxpgm_version = "01.04"           /* ver lev */

  PARSE ARG all_my_arguments
  NUMERIC DIGITS 12

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This code drives Initialization, Process, and Termination routines.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Main_Routine:
  return_code = Initialization_Routine()
  IF (return_code = 0) THEN DO
    return_code = Process_Routine()
  END
  return_code = Termination_Routine()
  RETURN return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

 Dataset:  DEMO.REXX(DSNR048I)
 Author:   KTomiak
 Contact:  "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
 Syntax:   DSNR048I {ssid}
 Overview: Process DSNR048I messages to estimate how long until
           recovery will complete.


06.13.48 STC07802  DSNR048I  -DB2P DSNRBMON UR BACKOUT PROCESSING LOG  258
   258             RECORD
   258                       AT RBA 0B0DB3BF10EA TO RBA 0B02521F4863 FOR
   258                       CORRELATION NAME = FCSP145Y
   258                       CONNECTION ID  = BATCH
   258                       LUWID = IDPONET1.DB2PDDF.C490B07348CC = 113599
   258                       PLAN NAME = PDBIP60
   258                       AUTHID = JSCHPAS
   258                       END USER ID = *
   258                       TRANSACTION NAME = *
   258                       WORKSTATION NAME = *

=======================================================================

 History of Modifications
 ------------------------
vv.mm When     Who / What you did ... (Newest change at the top.)
----- -------- --------------------------------------------------------
01.04 20180429 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Removed unused Ctlblk_Jobspecs.
----- -------- --------------------------------------------------------
01.03 20180428 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Stylize using template $putktm:
                  Programming Using The Kenneth Tomiak Method.
               2) Stylize using Edit Macro @putktm:
                  Programming Using The Kenneth Tomiak Method.
----- -------- --------------------------------------------------------
01.02 20090812 KTOMIAK  "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
                        1) Added support for using SDSF Rexx API
                           to access the joblog directly.
----- -------- --------------------------------------------------------
01.01 20090731 KTOMIAK  "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
                        1) Changed how multiple entries are processed.
----- -------- --------------------------------------------------------
01.00 20080130 KTOMIAK  "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
                        1) Original code for DB2.
----- -------- --------------------------------------------------------

-----------------------------------------------------------------------

STANDARD GLOBAL DISCLAIMER
--------------------------
The author explicitly disavows any claim whatsoever about the
correctness or functionality of this program, and disclaims liability
for anything and everything bad that might happen in connection with,
before, during, or after using it. I have tried to make it work right,
and I am personally pretty confident that it does, but everybody makes
mistakes, so if you use it, you do so at your own risk.

=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine initializes constants and variables.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Initialization_Routine:
  return_code = 0
  PARSE VERSION,
    version_rexx_name,
    version_rexx_version,
    version_rexx_date
  PARSE SOURCE,
    source_host_env,
    source_call_type,
    source_uc_exec_name,
    source_hostdd,
    source_hostdsn,
    source_nf_exec_name,
    source_initial_cmd_env,
    source_asid_name,
    source_char8_user_token,
    source_hostother
  sysvar_sysuid = SYSVAR("SYSUID")
  sysvar_sysenv = SYSVAR("SYSENV")

  PARSE UPPER VAR all_my_arguments ssid .
  IF (ssid = "") THEN DO
    SAY "Try telling me which DB2 subsystem to check."
    return_code = 24
    RETURN return_code
  END
  isfprefix = ssid"MSTR"

  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine does the processing.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_Routine:
  rba_ctr = Read_Joblog()
  IF (rba_ctr > 0) THEN DO
    current_digits = Digits()
    IF (current_digits < 42) THEN DO
      NUMERIC DIGITS 42
    END
    null_rc = Process_Rbas()
  END

  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine does cleanup before exiting.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Termination_Routine:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
End of code.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 In this routine we read the joblog for the requested db2 subsystem.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Read_Joblog:
  isfcalls_rc = ISFCALLS("ON")
  IF (isfcalls_rc <> 0) THEN DO
    SAY "ISFCALLS("ON") failed, RC("isfcalls_rc")."
    return_code = 16
    RETURN return_code
  END

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
00 Function completed successfully
01 Host command environment query failed, environment not added
02 Host command environment add failed
03 Host command environment delete failed
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
  ADDRESS SDSF "ISFEXEC DA (ALTERNATE DELAYED VERBOSE)"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
00 The request completed successfully.
08 An incorrect or invalid parameter was specified for an
   option or command.
12 A SYNTAX ERROR occurred parsing a host environment command.
16 The user is not authorized to invoke SDSF.
20 A request failed due to an environmental error.
24 Insufficient storage was available to complete a request.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
  sdsf_rc = RC
  IF (sdsf_rc > 8) THEN DO
    SAY "sdsf RC("sdsf_rc")"
    show_rc = show_isf_message()
    return_code = sdsf_rc
    RETURN return_code
  END

  IF (isfrows = 0) THEN DO
    SAY ""
    SAY "No rows returned, sorry. Play again?"
    SAY "Is" ssid "even running?"
    SAY ""
    return_code = 14
  END
  ELSE DO
    this_job_name = WORD(isfcols,1)
    this_job_nbr  = WORD(isfcols,4)

    DO job_ctr = 1 TO JNAME.0
      get_rc = Get_All_Output()
    END
  END
  RC = ISFCALLS("OFF")
  RETURN return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 Loop through each job and get the output.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Get_All_Output:
  get_rc = 0
  nbr_ddnames = Get_Real_Ddname()
  ADDRESS SDSF "ISFACT DA TOKEN('"TOKEN.job_ctr"') PARM(NP SA)" ,
    "(prefix JDS_"
  isfact_rc = RC
  IF (LEFT(isfmsg2.2,7) = "ISF747E") THEN DO
    SAY "It is not nice to purge output while I am running."
    SAY "This is your only warning you do not play nice with others."
    RETURN 0
  END
  IF (isfact_rc <> 0) THEN DO
    SAY "Error in PARM(NP SA), RC("isfact_rc")."
    show_rc = show_isf_message()
    return_code = isfact_rc
    RETURN return_code
  END

  DO _isf_dd_ctr = 1 TO isfddname.0
    /*
    SAY "    " ,
      "//"LEFT(JCL_DDNAME._isf_dd_ctr,8) "DD ",
      "DSN="isfdsname._isf_dd_ctr
    */
 /* ????????.ERASCA00.JOB00824.D0000002.JESMSGLG */
 /* ownerid  jobname  jobnbr   ddnbr    ddname   */
    PARSE VAR isfdsname._isf_dd_ctr,
      job_ownerid "." ,
      job_jobname ".",
      job_jobnbr "." ,
      job_ddnbr  "." ,
      job_ddname "."      .
    SELECT
      WHEN (JCL_DDNAME._isf_dd_ctr = "JESMSGLG") THEN DO
        null_rc = Process_Jesmsglg()
      END
      OTHERWISE DO
        "FREE FILE("isfddname._isf_dd_ctr")"
      END
    END
  END
  RETURN get_rc

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 Loop through each job and get the real ddnames.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Get_Real_Ddname:
  ADDRESS SDSF "ISFACT DA TOKEN('"TOKEN.job_ctr"') PARM(NP ?)" ,
    "(prefix JCL_"
  RETURN jcl_DDNAME.0

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 Look for GIM ERROR messages. Currently just returning
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Process_Jesmsglg:
  ADDRESS MVS ,
    "EXECIO * DISKR" isfddname._isf_dd_ctr "(STEM line. FINIS"
  DO _line_ctr = 1 TO line.0
    PARSE VAR line._line_ctr ,
      msg_time stc_number msg_id msg_text
    SELECT
      WHEN (msg_id = "DSNI031I") THEN DO
        null_rc = Show_Lines(10)
      END
      WHEN (msg_id = "DSNT375I") THEN DO
        null_rc = Show_Lines(10)
      END
      WHEN (msg_id = "DSNT501I") THEN DO
        null_rc = Show_Lines(6)
      END
      WHEN (msg_id = "DSN3201I") THEN DO
        null_rc = Show_Lines(2)
      END
      WHEN (msg_id = "DSNL511I") THEN DO
        null_rc = Show_Lines(3)
      END
      WHEN (msg_id = "DSNJ001I") THEN DO
        null_rc = Show_Lines(2)
      END
      OTHERWISE DO
      END
    END
  END
  RETURN 0

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 In this routine we show however many lines were requested.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Show_Lines:
  PARSE ARG _show_ctr .
  DO _sl = 1 TO _show_ctr
    _line_ctr = _line_ctr + 1
    PARSE VAR line._line_ctr ,
      msg_cont msg_keyword "=" msg_value
    SELECT
      WHEN (msg_keyword = "STARTRBA") THEN DO
        PARSE VAR msg_value rba_start "," . "=" rba_end .
        SAY msg_time "Offload("rba_start","rba_end")"
      END
      WHEN (msg_keyword = "IPADDR") THEN DO
        SAY msg_time msg_value
      END
      WHEN (msg_keyword = "IS DEADLOCKED WITH PLAN") THEN DO
        SAY msg_time msg_value
      END
      OTHERWISE DO
      END
    END
  END
  RETURN 0

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 In this routine we process RBAs.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Process_Rbas:
  rba = 0
  DO _ix = rba TO 3 BY -1
    null_rc = ,
      Time_To_Go(_ix , (_ix - 1) )
  END
  RETURN return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 In this routine we add the RBA data to stem variables.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Add_Rba: PROCEDURE ,
  EXPOSE rba rba_time. rba_logp. show_time. show_logp.
  arg_1 = ARG(1)
  arg_2 = ARG(2)
  rba = rba + 1
  show_time.rba = arg_1
  show_logp.rba = arg_2
  IF (arg_1 = "??:??:??") THEN DO
    rba_time.rba = 0
  END
  ELSE DO
    rba_time.rba = Time_To_Seconds(arg_1)
  END
  rba_logp.rba = C2D(X2C(arg_2))
  RETURN return_code
  SAY "Add_Rba Time:" arg_1 "LOGP:" arg_2

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 In this routine we convert hh:mm:ss to pur seconds.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Time_To_Seconds: PROCEDURE
  time_arg = ARG(1)
  PARSE VAR time_arg hh ":" mm ":" ss .
  total_seconds = (hh * 3600) + (mm * 60) + ss
  RETURN total_seconds

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 In this routine we calculate distance, duration, and speed.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Time_To_Go: PROCEDURE ,
  EXPOSE rba rba_time. rba_logp. show_time. show_logp.
  arg_1 = ARG(1)
  arg_2 = ARG(2)
  rba_duration =  rba_time.arg_2 - rba_time.arg_1
  SAY ""
  SAY ""
  SAY COPIES("-",20) ,
      "Duration=" RIGHT(rba_duration,10) "second(s)" ,
      COPIES("-",20) ,

  /*
  Interval distance traveled
  */
  SAY "Distance processed this Interval"
  SAY "--------------------------------"
  SAY RIGHT(arg_1,4) ,
    "Time:" RIGHT(show_time.arg_1,10) ,
    "LOGP:" RIGHT(show_logp.arg_1,10)
  SAY RIGHT(arg_2,4) ,
    "Time:" RIGHT(show_time.arg_2,10) ,
    "LOGP:" RIGHT(show_logp.arg_2,10)
  SAY "         " ,
    COPIES(" ",16) ,
    COPIES("-",10)
  rba_distance = rba_logp.arg_1 - rba_logp.arg_2
  SAY "Distance=" ,
    COPIES(" ",11) ,
    "RBA :" RIGHT(C2X(D2C(rba_distance)),10,"0")

  /*
  Distance left to travel
  */
  SAY "Distance left to process"
  SAY "------------------------"
  SAY RIGHT(arg_2,4) ,
    "Time:" RIGHT(show_time.arg_2,10) ,
    "LOGP:" RIGHT(show_logp.arg_2,10)
  SAY RIGHT("1",4) ,
    "Time:" RIGHT(show_time.1,10) ,
    "LOGP:" RIGHT(show_logp.1,10)
  SAY "         " ,
    COPIES(" ",16) ,
    COPIES("-",10)
  rba_left     = (rba_logp.arg_2 - rba_logp.1)
  SAY "Remaining" ,
    COPIES(" ",11) ,
    "RBA :" RIGHT(C2X(D2C(rba_left)),10,"0")

  /*
  Wild stab at how long that will take based on last duration
  */
  rba_speed    = rba_left / rba_distance
  SAY "ETTC    =" S2t(rba_speed)  "HH:MM:SS"
  RETURN dec_left

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 Convert seconds back Into time format.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
S2t: PROCEDURE
  arg_1 = ARG(1)
  arg_1 = arg_1 * 3600
  t_s = RIGHT(arg_1 // 60,2,0)
  t_m = arg_1 %  60
  t_h = RIGHT(t_m   %  60,2,0)
  t_m = RIGHT(t_m  //  60,2,0)
  val = t_h":"t_m":"t_s
  RETURN val

  arg_3 = ARG(3)
  arg_4 = ARG(4)
  dec_hour = arg_4 - arg_2
  dec_togo = arg_2 - dec_done
  dec_left = dec_togo / dec_hour
  SAY "Hours to go based on" arg_3 "to" arg_1 "=" dec_hour
  RETURN dec_left

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 My old flunky way to get an Integer.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Int: PROCEDURE
  arg_1 = ARG(1)
  PARSE VAR arg_1 val "." .
  RETURN val

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
End of code.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
