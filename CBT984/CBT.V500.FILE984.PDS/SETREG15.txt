/* rexx */
Rexx_SETREG15:
  rexxpgm_version = "01.00"           /* ver lev */

  PARSE UPPER ARG reg_15 unused_junk

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This code drives Initialization, Process, and Termination routines.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Main_Routine:
  return_code = Initialization_Routine()
  IF (return_code = 0) THEN DO
    return_code = Process_Routine()
  END
  return_code = Termination_Routine()
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================

 Dataset: DEMO.REXX(SETREG15)
 Contact: "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
 Purpose: Set register 15 to achieve the desired return code.
 Syntax:  %SETREG15 |posnumval|

-----------------------------------------------------------------------

 History of Modifications
 ------------------------
vv.mm WHEN     Who / What you did ... (Newest change at the top.)
----- -------- --------------------------------------------------------
01.00 20180530 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Original code.
----- -------- --------------------------------------------------------

-----------------------------------------------------------------------

STANDARD GLOBAL DISCLAIMER
--------------------------
The author explicitly disavows any claim whatsoever about the
correctness or functionality of this program, and disclaims liability
for anything and everything bad that might happen in connection with,
before, during, or after using it. I have tried to make it work right,
and I am personally pretty confident that it does, but everybody makes
mistakes, so if you use it, you do so at your own risk.

=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine initializes constants and variables.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Initialization_Routine:
  return_code = 0
  SAY COPIES("=",79)
  SAY LEFT("= Requested R15("reg_15")",77) "="

  dow_number. = ""
  dow_number.0 = 7
  day_name = "Sunday" ; dow_number.day_name = 1
  day_name = "Monday" ; dow_number.day_name = 2
  day_name = "Tuesday" ; dow_number.day_name = 3
  day_name = "Wednesday" ; dow_number.day_name = 4
  day_name = "Thursday" ; dow_number.day_name = 5
  day_name = "Friday" ; dow_number.day_name = 6
  day_name = "Saturday" ; dow_number.day_name = 7

  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine does the processing.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_Routine:
  IF (DATATYPE(reg_15,"N") = 1) THEN DO
    IF (DATATYPE(reg_15,"W") = 1) THEN DO
      IF (SIGN(reg_15) > -1) THEN DO
        IF (reg_15 > 4095) THEN DO
          return_code = reg_15 // 4096
          SAY reg_15 "is > 4095, remaindering to" ,
            return_code"."
        END
        ELSE DO
          return_code = reg_15
        END
      END
      ELSE DO
        SAY reg_15 "is not a positive number, but it will be."
        reg_15 = reg_15 * -1
        IF (reg_15 > 4095) THEN DO
          return_code = 4096 - ((reg_15 // 4096) * -1)
          SAY reg_15 "is > 4095, remaindering to" ,
            return_code"."
        END
        ELSE DO
          return_code = reg_15
        END
      END
    END
    ELSE DO
      SAY reg_15 "is not an integer number, but it will be."
      PARSE VAR reg_15 return_code "." .
      IF (SIGN(return_code) < 0) THEN DO
        return_code = return_code * -1
        return_code = 4096 - (return_code // 4096)
        SAY reg_15 "was not a positive whole number, defaulting to" ,
          return_code"."
      END
      ELSE DO
        NOP
        SAY reg_15 "was not a whole number, defaulting to" ,
          return_code"."
      END
    END
  END
  ELSE DO
    SELECT
      WHEN (reg_15 = "DOM") THEN DO
        date_standard = DATE("S")
        return_code = SUBSTR(date_standard,7,2)
      END
      WHEN (reg_15 = "DOW") THEN DO
        dow_name = DATE("W")
        return_code = dow_number.dow_name
      END
      WHEN (reg_15 = "MOY") THEN DO
        date_standard = DATE("S")
        return_code = SUBSTR(date_standard,5,2)
      END
      WHEN (reg_15 = "YEAR") THEN DO
        date_standard = DATE("S")
        return_code = SUBSTR(date_standard,1,4)
      END
      OTHERWISE DO
        return_code = RANDOM(1000,4095)
        SAY reg_15 "is not a number, defaulting to" ,
          return_code"."
      END
    END
    END
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine does cleanup before exiting.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Termination_Routine:
  SAY LEFT("= Return Code  ("return_code")",77) "="
  SAY COPIES("=",79)
  SAY ""
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
End of code.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
