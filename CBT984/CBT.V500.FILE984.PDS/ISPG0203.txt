/* We first need rexx in comment if compiled or read from SYSPROC. */
REXX_ISPG0203:
  rexxpgm_version = "01.00"          /* Set with 'ver 1' and 'lev 0'. */

  SAY "BROWSE-browse a data set"
  SAY "========================"

  ADDRESS ISPEXEC "CONTROL ERRORS RETURN"

Example_1:
  SAY "BROWSE DATASET(DEMO.REXX(ISPG0203)"
  ADDRESS ISPEXEC "BROWSE DATASET(DEMO.REXX(ISPG0203))"
  browse_rc = RC
  SELECT
    WHEN (browse_rc = 0) THEN DO
      /* Normal completion. */
      NOP
    END
    WHEN (browse_rc = 12) THEN DO
      /* Zero-length data; empty sequential data set or z/OS UNIX
         file, or zero-length member of a partitioned data set. */
      SAY "Ask your programmer to handle this condition."
    END
    WHEN (browse_rc = 14) THEN DO
      /* Specified member not found. */
      SAY "Ask your programmer to fix the logic."
      SAY "Use SYSDSN('dsname(member)') to verify existence."
    END
    WHEN (browse_rc = 16) THEN DO
      /* Either:
         -> No members matched the specified pattern.
         -> No members in the partitioned data set. */
      SAY "Use SETMSG() to let the user know what happened."
    END
    WHEN (browse_rc = 18) THEN DO
      /* A VSAM data set was specified but the ISPF Configuration
         Table does not allow VSAM processing. */
      SAY "Use SETMSG() to let the user know what happened."
    END
    WHEN (browse_rc = 20) THEN DO
      /* Severe error; unable to continue. */
      SAY "Ask your programmer to fix the logic."
    END
    OTHERWISE DO
      SAY "Something very unexpected happened, RC("browse_rc")."
    END
  END

  SAY "Next, get a member list of ISPG*."
  ADDRESS ISPEXEC "BROWSE DATASET(DEMO.REXX(ISPG*))"

Example_2:
  SAY "BROWSE DATAID(&DDBROW) MEMBER(ISPG020*)"
  ADDRESS ISPEXEC "LMINIT DATAID(DDBROW)" ,
    "DATASET(DEMO.REXX)"
  ADDRESS ISPEXEC "BROWSE DATAID(&DDBROW) MEMBER(ISPG020*)"
  ADDRESS ISPEXEC "LMFREE DATAID(&DDBROW)"

Example_3:
  SAY "BROWSE FILE(FILEVAR)"
  syscalls_rc = SYSCALLS("ON")
  ADDRESS SYSCALL "getcwd cwd"
  syscalls_rc = RC
  getcwd_retval = RETVAL
  getcwd_errno = ERRNO
  IF ((syscalls_rc >= 0) & (getcwd_retval = -1)) THEN DO
    getcwd_errnojr = ERRNOJR
  END
  ELSE DO
    getcwd_errnojr = ""
  END
  filevar = cwd || "/.sh_history"
  ADDRESS ISPEXEC "BROWSE FILE(filevar)" /* Must be a variable name. */
  browse_rc = RC
  SELECT
    WHEN (browse_rc = 0) THEN DO
      /* Normal completion. */
      NOP
    END
    WHEN (browse_rc = 12) THEN DO
      /* Zero-length data; empty sequential data set or z/OS UNIX
         file, or zero-length member of a partitioned data set. */
      SAY "Ask your programmer to handle this condition."
    END
    WHEN (browse_rc = 14) THEN DO
      /* Specified member not found. */
      SAY "Ask your programmer to fix the logic."
      SAY "Use SYSDSN('dsname(member)') to verify existence."
    END
    WHEN (browse_rc = 16) THEN DO
      /* Either:
         -> No members matched the specified pattern.
         -> No members in the partitioned data set. */
      SAY "Use SETMSG() to let the user know what happened."
    END
    WHEN (browse_rc = 18) THEN DO
      /* A VSAM data set was specified but the ISPF Configuration
         Table does not allow VSAM processing. */
      SAY "Use SETMSG() to let the user know what happened."
    END
    WHEN (browse_rc = 20) THEN DO
      /* Severe error; unable to continue. */
      SAY "Ask your system programmer to report this bug to IBM."
      SAY "ISPEXEC BROWSE FILE("filevar") does not work."
      ZERRHM = "*"
      ZERRALRM = "YES"
      ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
    END
    OTHERWISE DO
      SAY "Something very unexpected happened, RC("browse_rc")."
    END
  END

  RETURN 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Convert string to lowercase.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
To_Lowercase: Parse arg myarg
  IF (lowercase_letters = "LOWERCASE_LETTERS") THEN DO
    lowercase_letters = "abcdefghijklmnopqrstuvwxyz"
  END
  IF (uppercase_letters = "UPPERCASE_LETTERS") THEN DO
    uppercase_letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  END
  RETURN Translate(myarg,lowercase_letters,uppercase_letters)
