rexx_IFDEL:    /* We still need rexx in comment if read from SYSPROC */
  rexxpgm_version = "01.00"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

 Dataset:  CICS.CRNRSTNE.REXX(IFDEL)
 Author:   KTomiak
 Contact:  "Kenneth Tomiak"<KenTomiak@KTomiak.org>
 Syntax:   IFDEL {arguments ...}
 Overview: Get a list of datasets using a pattern and if any
           exist, delete them. Return code 16 if the delete fails,
           otherwise 0.

=======================================================================

 History of Modifications
 ------------------------
  When     Who      What you did
  -------- -------- ---------------------------------------------------
  20071108 KET2812  Original code.

=======================================================================

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */

  Parse Arg all_my_arguments
  Numeric Digits 12

rexx_Main_IFDEL:
  return_code = rexx_Initialize()
  If (return_code = 0) then,
    Do
      return_code = rexx_Process()
    End
  return_code = rexx_Termination()
  Return 0

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 In this routine we open any files and initialize any
 constants we might need.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
rexx_Initialize:
  ADDRESS ISPEXEC "CONTROL ERRORS RETURN"
  PARSE VERSION,
    rexx_version,
    rexx_level,
    rexx_date
  PARSE SOURCE,
    source_host_env,
    source_call_type,
    source_uc_exec_name,
    source_hostdd,
    source_hostdsn,
    source_nf_exec_name,
    source_initial_cmd_env,
    source_asid_name,
    source_char8_user_token,
    source_hostother
  job_specs = rexx_jobspecs()
  sysvar_sysuid = SYSVAR("SYSUID")
  sysvar_sysenv = SYSVAR("SYSENV")
  say ""
  say Copies("=",55)
  say left("=" job_specs,53) "="
  say left("=" source_uc_exec_name rexxpgm_version,53) "="
  say left("=" "executing under" source_host_env,
    "as a" source_call_type,53) "="
  say left("=  on" date() "at" time()".",53) "="
  say Copies("=",55)
  say ""
  return_code = 0

  If (source_host_env >< "TSO") Then,
    Do
      Say "Wrong host environment" source_host_env
      return_code = 16
    End

  trap_msg = OutTrap("io_msgs.")
  quietly = Msg("OFF")
  Address MVS "EXECIO",
    "* DISKR IFDEL (FINIS STEM DSNPTRN.)"
  read_rc = rc
  trap_msg = OutTrap("OFF")
  noisily = Msg("ON")
  If (read_rc >< 0) Then,
    Do
      Say "I/O error reading //IFDEL DD, RC("read_rc")"
      return_code = 16
    End
  If (DSNPTRN.0 = 0) Then,
    Do
      Say "Empty data set pattern list in //IFDEL DD."
      return_code = 16
    End

  Return return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 In this routine we do our processing.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
rexx_Process:
  Do dsn_x = 1 to DSNPTRN.0
    parse var DSNPTRN.dsn_x dsn_pattern .
    Say "DSN Pattern:" dsn_pattern"."
    Address ISPEXEC,
      "LMDINIT LISTID(DSNLIST)",
      "LEVEL("dsn_pattern")"
                                /* Return codes                   */
                                /* 8 - Listid not created         */
                                /* 12 - Invalid parameter value   */
                                /* 16 - Truncation or translation */
                                /*    error in accessing dialog   */
                                /*    variables                   */
                                /* 20 - Severe error              */
    RCSAVE = RC
    If (RCSAVE >< 0) Then,
      Do
        say "Does" dsn_pattern "exist?"
        Iterate
      End

    DSNVAR = ''
    say left("Dataset",44) "VOLSER  CreateDt  RC"
    say copies("-",44)     "------ ---------- --"

    rclist = 0
    num_dsnvar = 0
    DO While rclist = 0
      Address ISPEXEC,
        "LMDLIST LISTID("DSNLIST")",
                      "OPTION(LIST)",
                      "DATASET(DSNVAR)",
                      "STATS(YES)"
      RCLIST = RC
                   /* Return codes                         */
                   /* 4 - No data sets matched specified   */
                   /*    search criteria (the values for   */
                   /*    keywords LEVEL and VOLUME on the  */
                   /*    LMDINIT service).                 */
                   /* 8 - No more data sets names in list  */
                   /*    (option LIST)                     */
                   /*  - No data set list exists for this  */
                   /*    dslist-id (option FREE)           */
                   /*  - Data set lists already exists and */
                   /*    must be freed before using SAVE   */
                   /*    option (option SAVE)              */
                   /* 10 - Data set listid not created by  */
                   /*    lmdinit                           */
                   /* 12 - Invalid parameter value         */
                   /* 16 - Truncation or translation error */
                   /*    in accessing dialog variables     */
                   /* 20 - Severe error                    */
      if (RCLIST > 0) then leave
      If (ZDLVOL = "*ALIAS") Then Iterate
      num_dsnvar = num_dsnvar + 1
      trap_msg = OutTrap("io_msgs.")
      quietly = Msg("OFF")
      "Delete '"Space(dsnvar)"'"
      del_rc = RC
      read_rc = rc
      trap_msg = OutTrap("OFF")
      Say Left(DSNVAR,44),
          Left(ZDLVOL,6),
          Left(ZDLCDATE,10),
          del_rc
      If (del_rc >< 0) Then,
        Do
          Do io_x = 1 to io_msgs.0
            Say io_msgs.io_x
          End
          Return_code = 16
        End
    End
    say copies("-",44)     "------ ---------- --"
    say num_dsnvar "Entries found."
    Say ""
  End
  Return return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 In this routine we close files and finish up.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
rexx_Termination:
  say ""
  Address ISPEXEC,
     "LMDLIST LISTID("DSNLIST") OPTION(FREE)"
  Address ISPEXEC,
    "LMDFREE DATAID("DSNLIST")"
  Return return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 Place any of your subroutines and procedures below this.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
rexx_jobspecs:
  /*---------------------------------------------------------------*/
  /* ADDRESSABILITY TO CVT FROM PSA                                */
  /*---------------------------------------------------------------*/
  PTR2PSA = 0
  CVTPTR = STORAGE(D2X(PTR2PSA + 16),4)
  /*---------------------------------------------------------------*/
  /* ADDRESSABILITY TO SMCA, THEN GET SMF SYSTEM ID                */
  /*---------------------------------------------------------------*/
  CVTSMCA = STORAGE(D2X(C2D(CVTPTR)+197),3)
  SMFID = STORAGE(D2X(C2D(CVTSMCA)+16),4)
  /*---------------------------------------------------------------*/
  /* GET JOBNAME, STEP, AND PROCEDURE                              */
  /*---------------------------------------------------------------*/
  PSATOLD  = STORAGE(21C,4)                    /* POINTER TO TCB   */
  PTRTIOT  = STORAGE(D2X(C2D(PSATOLD)+12),4)   /* POINTER TO TIOT  */
  JOBNAME  = STORAGE(D2X(C2D(PTRTIOT)),8)
  STEPNAME = STORAGE(D2X(C2D(PTRTIOT)+8),8)
  PROCNAME = STORAGE(D2X(C2D(PTRTIOT)+16),8)
  Tcbjscbb = Storage(D2x(C2d(Psatold)+181),3)              /* jscb */
  jscbssib = STORAGE(D2X(C2D(tcbjscbb)+316),4)      /* Ptr to SSIB */
  ssibjbid = STORAGE(D2X(C2D(jscbssib)+12),8)    /* job identifier */
  Return JOBNAME SSIBJBID STEPNAME PROCNAME

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 describe your routines here
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 Two ways to use ISPF messages
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */

check_isr_rc:
  parse arg isr_rc
  If (isr_rc > 4) then,
    Do
      ZERRHM = "*"
      ZERRALRM = "YES"
      ZERRSM = isr_function "FAILED"
      ZERRLM = zerrsm ", RC("isr_rc")"
      if (sysvar_sysenv = "FORE") then,
        do
          Address IspExec "VPUT",
            "(ZERRSM ZERRLM ZERRHM ZERRALRM)",
            " SHARED"
          ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
          isr_rc = rc
        end
      Else,
        do
          say zerrsm zerrlm
          isr_rc = 0
        end
    End
  Return isr_rc
    zedsmsg = "LINE TOO LONG RC("myrc")"
    zedlmsg = "Really," mymsg "is too long"
    Address IspExec "setmsg msg(ISRZ000)"


/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
__DATA__
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
