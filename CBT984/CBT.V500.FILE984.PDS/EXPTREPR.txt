/* We first need rexx in comment if compiled or read from SYSPROC. */
REXX_exptrepr:
  rexxpgm_version = "01.09"          /* Set with 'ver 1' and 'lev 2'. */

  PARSE ARG all_my_arguments

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This code drives Initialization, Process, and Termination routines.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
REXX_Main_Code:
  return_code = Initialization_Routine()
  IF (return_code = 0) THEN DO
    return_code = Process_Routine()
  ENS
  return_code = Termination_Routine()
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================

  Dataset:  DEMO.REXX(EXPTREPR)
  Author:   KTomiak
  Contact:  "Kenneth E Tomiak"<KenTomiak@KTomiak.org>
  Overview: Read the EXPORT output data set and build a job that
            can redefine the cluster and REPRO data back in.

-----------------------------------------------------------------------

 History of Modifications
 ------------------------
vv.mm WHEN     Who / What you did ... (Newest change at the top.)
----- -------- --------------------------------------------------------
01.09 20180407 "Kenneth E Tomiak"<KenTomiak@KTomiak.org>
               1) Stylize using the
                  Programming Using The Kenneth Tomiak Method.
----- -------- --------------------------------------------------------
01.08 20180405 "Kenneth E Tomiak"<KenTomiak@KTomiak.org>
               1) Moved some data parameters to the cluster level.
               2) Eliminated unnecessary index parameters.
----- -------- --------------------------------------------------------
01.07 20180404 "Kenneth E Tomiak"<KenTomiak@KTomiak.org>
               1) IMPORT versus REPRO based on data_organization.
               2) Align FLAG18 and FLAG40 block hex dump.
----- -------- --------------------------------------------------------
01.06 20180403 "Kenneth E Tomiak"<KenTomiak@KTomiak.org>
               1) Refining whar gets defined.
----- -------- --------------------------------------------------------
01.05 20180402 "Kenneth E Tomiak"<KenTomiak@KTomiak.org>
               1) Cleaned up code by removing unused variables.
----- -------- --------------------------------------------------------
01.04 20180401 "Kenneth E Tomiak"<KenTomiak@KTomiak.org>
               1) Add RLS/DFSMStvs  type of support:
                  a) LOGSTREAMID
                  b) BWO
                  c) FRLOG
                  d) LOG
----- -------- --------------------------------------------------------
01.03 20180331 "Kenneth E Tomiak"<KenTomiak@KTomiak.org>
               2) Show global disclaimer.
----- -------- --------------------------------------------------------
01.02 20180330 "Kenneth E Tomiak"<KenTomiak@KTomiak.org>
               1) Added LISTPST step.
               2) Added call to IPCS routine BLSUXTOD for
                  system-timestamp conversion.
               3) Handle CIMODE export versus RECORD type.
                  CIMODE = IMPORT
                  RECORD = REPRO
               4) Supporting some more less often used options.
----- -------- --------------------------------------------------------
01.01 20180329 "Kenneth E Tomiak"<KenTomiak@KTomiak.org>
               1) Convert displays of control records to DEBUG.
               2) Add code to build DEFINE statement.
----- -------- --------------------------------------------------------
01.00 20180322 "Kenneth E Tomiak"<KenTomiak@KTomiak.org>
               1) Original code.
----- -------- --------------------------------------------------------

-----------------------------------------------------------------------

=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 Put the onus on the user if anything should go wrong.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Standard_Global_Disclaimer:
  SAY ""
  SAY "STANDARD GLOBAL DISCLAIMER"
  SAY "=========================="
  SAY "The author explicitly disavows any claim whatsoever about"
  SAY "the correctness or functionality of this program, and"
  SAY "disclaims liability for anything and everything bad that"
  SAY "might happen in connection with, before, during, or after"
  SAY "using it. I have tried to make it work right, and I am"
  SAY "personally pretty confident that it does, but everybody"
  SAY "makes mistakes, so if you use it, you do so at your own"
  SAY "risk."
  RETURN 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine initializes constants and variables.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Initialization_Routine:
  PARSE VAR all_my_arguments upper_arguments
  IF (POS(upper_arguments,"DEBUG(") > 0) THEN DO
    PARSE VAR upper_arguments . "DEBUG(" debug_level ")" .
    IF (debug_level = "") THEN DO
      debug_level = 1
    END
    SAY "Debug level:" debug_level
  END
  ELSE DO
    debug_level = 0
  END
  PARSE VERSION,
    version_rexx_name,
    version_rexx_version,
    version_rexx_date
  PARSE SOURCE,
    source_host_env,
    source_call_type,
    source_uc_exec_name,
    source_hostdd,
    source_hostdsn,
    source_nf_exec_name,
    source_initial_cmd_env,
    source_asid_name,
    source_char8_user_token,
    source_hostother
  address_environment = ADDRESS()
  IF (debug_level >= 1) THEN DO
    job_specs = Ctlblk_Jobspecs()
    SAY ""
    SAY COPIES("=",79)
    SAY LEFT("=" jobspecs_jobname ,
      jobspecs_ssibjbid jobspecs_stepname ,
      jobspecs_procname,77) "="
    SAY LEFT("=" source_uc_exec_name rexxpgm_version,77) "="
    SAY LEFT("= executing under" source_host_env,77) "="
    SAY LEFT("= as a" source_call_type,77) "="
    SAY LEFT("= on" DATE() "at" TIME()".",77) "="
    SAY COPIES("=",79)
    SAY ""
  END
  IF (source_hostdsn = "?") THEN DO
    function_rc = Find_Hostdsn()
  END
  return_code = 0
  out_record. = ""
  out_record.0 = 0
  function_rc = Clear_Define()
  exportds_check = DDFINDER("EXPORTDS")
  IF (exportds_check = "0:") THEN DO
    SAY ""
    SAY "ERROR: Unable to proceed."
    SAY "   Add //EXPORTDS  DD DISP=SHR,DSN=your.bkup.dsn" ,
      "to your JCL."
    SAY "   Then try again."
    return_code = 12
  END
  ELSE DO
    PARSE VAR exportds_check . ":2-" . "="  exportds_dsn ":" .
    IF (debug_level >= 2) THEN DO
      SAY "EXPORTDS:" exportds_dsn
    END
  END
  definejb_check = DDFINDER("DEFINEJB")
  IF (definejb_check = "0:") THEN DO
    SAY ""
    SAY "ERROR: Unable to proceed."
    SAY "   Add //DEFINEJB  DD DISP=OLD,DSN=your.JCL.CNTL(member)"
    SAY "    OR //DEFINEJB  DD" ,
      "DISP=(NEW,CATLG),DSN=your.JCL.CNTL(member)"
    SAY "       //             UNIT=SYSDA,SPACE=(TRK,(1,1,47),RLSE),"
    SAY "       //             RECFM=FB,BLKSIZE=0,LRECL=80"
    SAY "    to your JCL."
    SAY "   Then try again."
    return_code = 12
  END
  ELSE DO
    PARSE VAR definejb_check . ":2-" . "=" definejb_pds ":" .
    PARSE VAR definejb_pds definejb_dsn "(" definejb_mbr ")" .
    IF (definejb_mbr <> "") THEN DO
      jobname = definejb_mbr
    END
    ELSE DO
      jobname = "imptbkup"
    END
    IF (debug_level >= 2) THEN DO
      SAY "DEFINEJB:" definejb_dsn"("definejb_mbr")"
    END
  END
  layout_control. = ""
  layout_control.0 = 0
  export_control. = ""
  export_control.0 = 0
  cc_ctr = 0
  cc_skip = 0
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine does the processing.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_Routine:
  ADDRESS MVS "EXECIO 15 DISKR EXPORTDS" ,
    "(STEM in_record. FINIS)"
  DO rix = 1 to in_record.0
    r_len = C2D(LEFT(in_record.rix,2))
    SELECT
      WHEN (r_len = 8) THEN DO
        cc_skip = rix
        rix = in_record.0
      END
      WHEN (r_len = 28) THEN DO
        ctr_components = C2D(SUBSTR(in_record.rix,9,1))
        bkup_time = SUBSTR(in_record.rix,13,8)
        bkup_date = SUBSTR(in_record.rix,21,8)
        PARSE VAR bkup_date bkup_mm "/" bkup_dd "/" bkup_yy
        bkup_date = "20"||bkup_yy||bkup_mm||bkup_dd
      END
      WHEN (r_len = 436) THEN DO
        lix = layout_control.0 + 1
        layout_control.0 = lix
        layout_control.lix = in_record.rix
        next_len = C2D(SUBSTR(in_record.rix,5,2))
        cc_ctr = cc_ctr +1
      END
      WHEN (r_len = 1000) THEN DO
        export_control.lix = in_record.rix
        DO WHILE LENGTH(export_control.lix) <> next_len
          rix = rix + 1
          export_control.lix = export_control.lix || in_record.rix
        END
      END
      OTHERWISE DO
        SAY "An oddball length came in:" r_len
        rix = in_record.0
      END
    END
  END
  NUMERIC DIGITS 14   /* Handles Terabyte                            */
  DO lix = 1 to layout_control.0
    SELECT
      WHEN (lix = 1) THEN DO
        function_rc = Process_Cluster_Record()
      END
      WHEN (lix = 2) THEN DO
        function_rc = Process_Data_Record()
      END
      WHEN (lix = 3) THEN DO
        function_rc = Process_Index_Record()
      END
      OTHERWISE DO
        SAY "Too many control records:" lix
      END
    END
  END
  function_rc = Build_Define()
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine does cleanup before exiting.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Termination_Routine:
  IF (out_record.0 = 0) THEN DO
    SAY ""
    SAY "No job was created"
    out_record.0 = 1
    out_record.1 = "ERRORS PREVENTED JOB CREATION."
  END
  IF (definejb_check = "0:") THEN DO
    SAY ""
    DO orx = 1 to out_record.0
      SAY out_record.orx
    END
  END
  ELSE DO
    ADDRESS MVS "EXECIO" out_record.0 "DISKW DEFINEJB" ,
      "(STEM out_record. FINIS)"
  END
  IF (return_code > 0) THEN DO
    SAY ""
    SAY "Some unhappy turn of events is sending back",
      "a RETURN code higher than 0, RC("return_code")."
    SAY "Review the above messges and do what needs to be done."
  END
  SAY ""
  SAY COPIES("=",79)
  function_rc = Standard_Global_Disclaimer()
  SAY ""
  SAY COPIES("=",79)
  SAY ""
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Search a DD to find where this code runs from.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Find_Hostdsn:
  hostdd_check = DDFINDER(source_hostdd)
  IF (debug_level = 0) THEN DO
    RETURN 0
  END
  IF (debug_level >= 2) THEN DO
    SAY ""
    SAY "HOSTDSN:" hostdd_check
  END
  IF (hostdd_check = "0:") THEN DO
    SAY source_hostdd "is not allocated."
    RETURN 12
  END
  ELSE DO
    tmp_alloc = hostdd_check
    DO WHILE (tmp_alloc <> "")
      PARSE VAR tmp_alloc alloc_entry ":" tmp_alloc
      SELECT
        WHEN (LEFT(alloc_entry,1) = 1) THEN DO
          PARSE VAR alloc_entry ,
            ae_id "-" ae_dd# "=" ae_ddname
          IF (debug_level >= 2) THEN DO
            SAY ae_ddname "is dd#" ae_dd#
          END
        END
        WHEN (LEFT(alloc_entry,1) = 2) THEN DO
          PARSE VAR alloc_entry ,
            ae_id "-" ae_dd# "-" ae_dsn# "=" ae_dsname
          IF (debug_level >= 2) THEN DO
            SAY ae_ddname "is dd#" ae_dd# "has" ,
              ae_dsn# "as" ae_dsname
          END
          @trap_state = TRAPMSG("On")
          msg_state = MSG("OFF")
          sysdsn_rc = SYSDSN("'"ae_dsname"("source_uc_exec_name")'")
          IF (sysdsn_rc = "OK") THEN DO
            source_hostdsn = STRIP(ae_dsname,"B"," ")
            IF (debug_level >= 2) THEN DO
              SAY ae_dsname "contains" source_uc_exec_name
            END
            LEAVE
          End
          msg_rc = MSG(msg_state)
          @trap_rc = TRAPMSG(@trap_state)
        END
        OTHERWISE DO
        END
      END
    END
  END
  RETURN 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 Parse the "C" control record.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_Cluster_Record:
  IF (debug_level >= 0) THEN DO
    SAY ""
    SAY COPIES("C",132)
  END
  lix_number = C2D(SUBSTR(layout_control.lix,7,2))
  lix_qty = C2D(SUBSTR(layout_control.lix,9,4))
  lix_fields = SUBSTR(layout_control.lix,13)
  ctr_fields = 0
  DO WHILE lix_fields <> ""
    PARSE VAR lix_fields ,
      hex_len  +4 ,
      hex_position +4 ,
      lix_fields
    ctr_fields = ctr_fields + 1
    lix_position = C2D(hex_position) + 1
    lix_len = C2D(hex_len)
    IF (lix_len > 0) THEN DO
      eix_data = SUBSTR(export_control.lix,lix_position,lix_len)
      function_rc = Parse_Cluster_Fields()
    END
  END
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 Show the cluster fields.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Parse_Cluster_Fields:
  field_name = ""
  SELECT
    WHEN (ctr_fields = 1) THEN DO
      field_name = "Component_type"
    END
    WHEN (ctr_fields = 2) THEN DO
      field_name = "Component_name"
      cluster_name = STRIP(eix_data,"T"," ")
    END
    WHEN (ctr_fields = 4) THEN DO
      field_name = "OWNER"
      cluster_owner = "OWNER("STRIP(eix_data,"T"," ")")"
    END
    WHEN (ctr_fields = 5) THEN DO
      field_name = "Creation_date"
      tmp_date = C2X(eix_data)
      tmp_dt = LEFT(tmp_date,5)
      jul_date = LEFT(tmp_dt,2)"."RIGHT(tmp_dt,3)
      entry_crtdt = DATE('S', tmp_dt, 'J') jul_date
      eix_data = tmp_date":" entry_crtdt
    END
    WHEN (ctr_fields = 6) THEN DO
      field_name = "EXPIRE-DATE"
      tmp_date = C2X(eix_data)
      IF (tmp_date <> "00000F") THEN DO
        tmp_dt = LEFT(tmp_date,5)
        cluster_to = "TO(20"tmp_dt")"
        jul_date = LEFT(tmp_dt,2)"."RIGHT(tmp_dt,3)
        two_date = DATE('S', tmp_dt, 'J') jul_date
      END
      ELSE DO
        cluster_to = ""
        two_date = "low-values"
      END
      eix_data = tmp_date":" two_date
    END
    WHEN (ctr_fields = 32) THEN DO
      field_name = "FLAG32"
      c2b_data = C2B(eix_data)
      eix_data = c2b_data":"
      SELECT
        WHEN (SUBSTR(c2b_data,2,1) = 0) THEN DO
          cluster_reclaim = "NO"
          eix_data = eix_data ,
            "CA-RECLAIM("cluster_reclaim")"
        END
        WHEN (SUBSTR(c2b_data,2,1) = 1) THEN DO
          cluster_reclaim = "YES"
          eix_data = eix_data ,
            "CA-RECLAIM("cluster_reclaim")"
        END
        OTHERWISE DO
          eix_data = eix_data ,
            "32-2-1: undefined"
        END
      END
    END
    WHEN (ctr_fields = 33) THEN DO
      field_name = "SMS-33"
      blk = C2X(eix_data)
      IF (blk <> "0000000000000000") THEN DO
        tunits = SUBSTR(eix_data,33,8)    /* from Mark Zelden */
        TIMESTAMP = COPIES(0,26)  /* force result length=26 */
        ADDRESS LINKPGM "BLSUXTOD TUNITS TIMESTAMP"
        eix_data = blk timestamp
      END
      ELSE DO
        eix_data = blk "low-values"
      END
    END
    WHEN (ctr_fields = 34) THEN DO
      field_name = "SMS-34"
      c2x_data = C2X(eix_data)
      IF (c2x_data = "000000000000") THEN DO
        eix_data = c2x_data": low-values"
      END
      ELSE DO
        f34ix = 1
        sc_len = C2D(SUBSTR(eix_data,f34ix,2))
        f34ix = f34ix + 2
        IF (sc_len > 0) THEN DO
          cluster_sc = "STORCLAS("SUBSTR(eix_data,f34ix,sc_len)")"
        END
        ELSE DO
          cluster_sc = ""
        END
        f34ix = f34ix + sc_len
        dc_len = C2D(SUBSTR(eix_data,f34ix,2))
        f34ix = f34ix + 2
        IF (dc_len > 0) THEN DO
          cluster_dc = "DATACLAS("SUBSTR(eix_data,f34ix,dc_len)")"
        END
        ELSE DO
          cluster_dc = ""
        END
        f34ix = f34ix + dc_len
        mc_len = C2D(SUBSTR(eix_data,f34ix,2))
        f34ix = f34ix + 2
        IF (mc_len > 0) THEN DO
          cluster_mc = "MGMTCLAS("SUBSTR(eix_data,f34ix,mc_len)")"
        END
        ELSE DO
          cluster_mc = ""
        END
        eix_data = c2x_data":" sc_len cluster_sc ,
          dc_len cluster_dc ,
          mc_len cluster_mc
      END
    END
    WHEN (ctr_fields = 36) THEN DO
      field_name = "SMS-36"
      eix_data = C2X(eix_data)":"
    END
    WHEN (ctr_fields = 37) THEN DO
      field_name = "SMS-37"
      eix_data = C2X(eix_data)":"
    END
    WHEN (ctr_fields = 38) THEN DO
      field_name = "SMS-38"
      blk = C2X(eix_data)
      IF (blk <> "0000000000000000") THEN DO
        tunits = SUBSTR(eix_data,33,8)    /* from Mark Zelden */
        TIMESTAMP = COPIES(0,26)  /* force result length=26 */
        ADDRESS LINKPGM "BLSUXTOD TUNITS TIMESTAMP"
        eix_data = blk":" timestamp
      END
      ELSE DO
        eix_data = blk": low-values"
      END
    END
    WHEN (ctr_fields = 40) THEN DO
      field_name = "SMS-40"
      IF (debug_level >= 0) THEN DO
        SAY "  #:" RIGHT(ctr_fields,2,"0") ,
          "length:" RIGHT(lix_len,3," ") ,
          LEFT(field_name,25) ,
          "      <--------------<>-------------->"
      END
      tmp_data = C2X(eix_data)
      offset = 1
      DO WHILE (tmp_data <> "")
        PARSE VAR tmp_data blk +32 tmp_data
        IF (debug_level >= 2) THEN DO
          SAY "                 ==" ,
            LEFT(field_name,25) RIGHT(offset,4,"0")":" blk
        END
        offset = offset + 16
      END
      IF (debug_level >= 0) THEN DO
        SAY "                 ==" ,
          LEFT(field_name,25) ,
            "      <--------------<>-------------->"
      END
      field_name = "System-Timestamp(25,8)"
      lix_len = 8
      blk = C2X(SUBSTR(eix_data,25,8))
      IF (blk <> "0000000000000000") THEN DO
        tunits = SUBSTR(eix_data,25,8)    /* from Mark Zelden */
        TIMESTAMP = COPIES(0,26)  /* force result length=26 */
        ADDRESS LINKPGM "BLSUXTOD TUNITS TIMESTAMP"
        blk = blk":" timestamp
      END
      ELSE DO
        blk = blk": low-values"
      END
      IF (debug_level >= 0) THEN DO
        SAY "       " ,
          "length:" RIGHT(lix_len,3," ") ,
          LEFT(field_name,25) blk
      END
      field_name = "System-Timestamp(33,8)"
      lix_len = 8
      blk = C2X(SUBSTR(eix_data,33,8))
      IF (blk <> "0000000000000000") THEN DO
        tunits = SUBSTR(eix_data,33,8)    /* from Mark Zelden */
        TIMESTAMP = COPIES(0,26)  /* force result length=26 */
        ADDRESS LINKPGM "BLSUXTOD TUNITS TIMESTAMP"
        blk = blk":" timestamp
      END
      ELSE DO
        blk = blk": low-values"
      END
      IF (debug_level >= 0) THEN DO
        SAY "       " ,
          "length:" RIGHT(lix_len,3," ") ,
          LEFT(field_name,25) blk
      END
      field_name = "ACCOUNT(87,32)"
      lix_len = 32
      IF (SUBSTR(eix_data,87,1) = "00") THEN DO
        blk = ""
      END
      ELSE DO
        blk = STRIP(SUBSTR(eix_data,87,32),"T"," ")
        cluster_account = "ACCOUNT("blk")"
      END
      IF (debug_level >= 0) THEN DO
        SAY "       " ,
          "length:" RIGHT(lix_len,3," ") ,
          LEFT(field_name,25) blk
      END
      eix_data = -1
    END
    WHEN (ctr_fields = 42) THEN DO
      field_name = "SMS-42?"
      eix_data = C2X(eix_data)":"
    END
    WHEN (ctr_fields = 43) THEN DO
      field_name = "SMS-43?"
      eix_data = C2X(eix_data)":"
    END
    WHEN (ctr_fields = 44) THEN DO
      field_name = "SMS-in-use?"
      eix_data = C2X(eix_data)":"
    END
    WHEN (ctr_fields = 46) THEN DO
      field_name = "LOG"
      c2x_data = C2X(eix_data)
      SELECT
        WHEN (c2x_data = "01") THEN DO
          cluster_log = "LOG(NONE)"
        END
        WHEN (c2x_data = "02") THEN DO
          cluster_log = "LOG(UNDO)"
        END
        WHEN (c2x_data = "03") THEN DO
          cluster_log = "LOG(ALL)"
        END
        WHEN (c2x_data = "04") THEN DO
          cluster_log = "LOG(REDO)"
        END
        OTHERWISE DO
          cluster_log = ""
        END
      END
      eix_data = c2x_data":" cluster_log
    END
    WHEN (ctr_fields = 47) THEN DO
      field_name = "LOGSTREAMID"
      IF (C2X(LEFT(eix_data,1)) <> "00") THEN DO
        cluster_logstreamid = ,
        "LOGSTREAMID("STRIP(eix_data,"T"," ")")"
      END
    END
    WHEN (ctr_fields = 48) THEN DO
      field_name = "RLS-FLAG48"
      eix_data = C2X(eix_data)":"
    END
    WHEN (ctr_fields = 49) THEN DO
      field_name = "BWO"
      c2x_data = C2X(eix_data)
      SELECT
        WHEN (c2x_data = "01") THEN DO
          cluster_bwo = "BWO(TYPECICS)"
        END
        WHEN (c2x_data = "02") THEN DO
          cluster_bwo = "BWO(NO)"
        END
        WHEN (c2x_data = "03") THEN DO
          cluster_bwo = "BWO(TYPEIMS)"
        END
        OTHERWISE DO
          cluster_bwo = ""
        END
      END
      eix_data = c2x_data":" cluster_bwo
    END
    WHEN (ctr_fields = 50) THEN DO
      field_name = "FLAG50"
      c2x_data = C2X(eix_data)
      SELECT
        WHEN (c2x_data = "00") THEN DO
          cluster_flag50 = "Normal"
        END
        WHEN (c2x_data = "C0") THEN DO
          cluster_flag50 = "SMS-in-use?"
        END
        OTHERWISE DO
          cluster_flag50 = "Unhandled"
        END
      END
      eix_data = c2x_data":" cluster_flag50
    END
    WHEN (ctr_fields = 51) THEN DO
      field_name = "RLS-FRLOG"
      c2x_data = C2X(eix_data)
      SELECT
        WHEN (c2x_data = "01") THEN DO
          cluster_frlog = "FRLOG(NONE)"
        END
        WHEN (c2x_data = "02") THEN DO
          cluster_frlog = "FRLOG(UNDO)"
        END
        WHEN (c2x_data = "04") THEN DO
          cluster_frlog = "FRLOG(REDO)"
        END
        WHEN (c2x_data = "06") THEN DO
          cluster_frlog = "FRLOG(ALL)"
        END
        OTHERWISE DO
          cluster_frlog = ""
        END
      END
      eix_data = c2x_data":" cluster_frlog
    END
    WHEN (ctr_fields = 52) THEN DO
      field_name = "EATTR"
      c2x_data = C2X(eix_data)
      SELECT
        WHEN (c2x_data = "00") THEN DO
          cluster_eattr = ""
        END
        WHEN (c2x_data = "01") THEN DO
          cluster_eattr = "EATTR(NO)"
        END
        WHEN (c2x_data = "02") THEN DO
          cluster_eattr = "EATTR(OPT)"
        END
        OTHERWISE DO
          cluster_eattr = "undefined"
        END
      END
      IF (cluster_eattr = "") THEN DO
        eix_data = c2x_data": EATTR(NULL)"
      END
      ELSE DO
        eix_data = c2x_data":" cluster_eattr
      END
    END
    OTHERWISE DO
      SAY "Unknown field" ctr_fields
      eix_data = C2X(eix_data)
    END
  END
  IF (eix_data > -1) THEN DO
    IF (debug_level >= 0) THEN DO
      SAY "  #:" RIGHT(ctr_fields,2,"0") ,
        "length:" RIGHT(lix_len,3," ") ,
        LEFT(field_name,25) "data:" eix_data
    END
  END
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 Parse the "D" control record.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_Data_Record:
  IF (debug_level >= 0) THEN DO
    SAY ""
    SAY COPIES("D",132)
  END
  lix_number = C2D(SUBSTR(layout_control.lix,7,2))
  lix_qty = C2D(SUBSTR(layout_control.lix,9,4))
  lix_fields = SUBSTR(layout_control.lix,13)
  ctr_fields = 0
  DO WHILE lix_fields <> ""
    PARSE VAR lix_fields ,
      hex_len  +4 ,
      hex_position +4 ,
      lix_fields
    ctr_fields = ctr_fields + 1
    lix_position = C2D(hex_position) + 1
    lix_len = C2D(hex_len)
    IF (lix_len > 0) THEN DO
      eix_data = SUBSTR(export_control.lix,lix_position,lix_len)
      function_rc = Parse_Data_Fields()
    END
  END
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 Show the data fields.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Parse_Data_Fields:
  field_name = ""
  SELECT
    WHEN (ctr_fields = 1) THEN DO
      field_name = "Component_type"
    END
    WHEN (ctr_fields = 2) THEN DO
      field_name = "Component_name"
      data_name = STRIP(eix_data,"T"," ")
    END
    WHEN (ctr_fields = 3) THEN DO
      field_name = "FLAG3"
      blk = C2X(eix_data)":"
      IF (debug_level >= 0) THEN DO
        SAY "  #:" RIGHT(ctr_fields,2,"0") ,
          "length:" RIGHT(lix_len,3," ") ,
          LEFT(field_name,25) "data:" blk
      END
      field_name = "FLAG3-1"
      lix_len = 1
      eix_flag1_1 = C2B(LEFT(eix_data,1))
      blk = eix_flag1_1":"
      IF (SUBSTR(eix_flag1_1,1,1) = 1) THEN DO
        blk = blk "SPEED "
        data_speed = "SPEED"
      END
      ELSE DO
        blk = blk "RECOVERY"
        data_speed = "RECOVERY"
      END
      IF (SUBSTR(eix_flag1_1,2,1) = 1) THEN DO
        blk = blk "NOREUSE"
        data_reuse = "NOREUSE"
      END
      ELSE DO
        blk = blk "REUSE"
        data_reuse = "REUSE"
      END
      IF (SUBSTR(eix_flag1_1,4,1) = 1) THEN DO
        blk = blk "ERASE"
        data_erase = "ERASE"
      END
      ELSE DO
        blk = blk "NOERASE"
        data_erase = ""
      END
      IF (debug_level >= 0) THEN DO
        SAY "       " ,
          "length:" RIGHT(lix_len,3," ") ,
          LEFT(field_name,25) "data:" eix_flag1_1":" blk
      END
      field_name = "FLAG3-2"
      lix_len = 1
      c2b_flag3_2 = C2B(RIGHT(eix_data,1))
      blk = c2b_flag3_2":"
      SELECT
        WHEN (SUBSTR(c2b_flag3_2,1,4) = '0010') THEN DO
          blk = blk "SHR(1 3) "
          data_shropts = "SHAREOPTIONS(1 3)"
        END
        WHEN (SUBSTR(c2b_flag3_2,1,4) = '0011') THEN DO
          blk = blk "SHR(1 4) "
          data_shropts = "SHAREOPTIONS(1 4)"
        END
        WHEN (SUBSTR(c2b_flag3_2,1,4) = '0110') THEN DO
          blk = blk "SHR(2 3) "
          data_shropts = "SHAREOPTIONS(2 3)"
        END
        WHEN (SUBSTR(c2b_flag3_2,1,4) = '0111') THEN DO
          blk = blk "SHR(2 4) "
          data_shropts = "SHAREOPTIONS(2 4)"
        END
        WHEN (SUBSTR(c2b_flag3_2,1,4) = '1010') THEN DO
          blk = blk "SHR(3 3) "
          data_shropts = "SHAREOPTIONS(3 3)"
        END
        WHEN (SUBSTR(c2b_flag3_2,1,4) = '1011') THEN DO
          blk = blk "SHR(3 4) "
          data_shropts = "SHAREOPTIONS(3 4)"
        END
        WHEN (SUBSTR(c2b_flag3_2,1,4) = '1110') THEN DO
          blk = blk "SHR(4 3) "
          data_shropts = "SHAREOPTIONS(4 3)"
        END
        WHEN (SUBSTR(c2b_flag3_2,1,4) = '1111') THEN DO
          blk = blk "SHR(4 4) "
          data_shropts = "SHAREOPTIONS(4 4)"
        END
        OTHERWISE DO
          blk = blk "FLAG3-2:" ,
            SUBSTR(c2b_flag3_2,1,4)
        END
      END
    END
    WHEN (ctr_fields = 5) THEN DO
      field_name = "Creation_date"
      tmp_date = C2X(eix_data)
      tmp_dt = LEFT(tmp_date,5)
      jul_date = LEFT(tmp_dt,2)"."RIGHT(tmp_dt,3)
      two_date = DATE('S', tmp_dt, 'J') jul_date
      eix_data = tmp_date":" two_date
    END
    WHEN (ctr_fields = 6) THEN DO
      field_name = "EXPIRE-DATE"
      tmp_date = C2X(eix_data)
      IF (tmp_date <> "00000F") THEN DO
        tmp_dt = LEFT(tmp_date,5)
        jul_date = LEFT(tmp_dt,2)"."RIGHT(tmp_dt,3)
        two_date = DATE('S', tmp_dt, 'J') jul_date
        eix_data = tmp_date":" two_date
      END
      ELSE DO
        eix_data = tmp_date": low-values"
      END
    END
    WHEN (ctr_fields = 7) THEN DO
      field_name = "BUFSPACE"
      eix_data = C2D(eix_data)
      data_bufspace = "BUFFERSPACE("eix_data")"
    END
    WHEN (ctr_fields = 8) THEN DO
      field_name = "AVGLRECL"
      eix_data = C2D(eix_data)
      data_avglrecl = eix_data
    END
    WHEN (ctr_fields = 9) THEN DO
      field_name = "SPACE-ALC"
      eix_pri = C2D(SUBSTR(eix_data,1,3))
      eix_sec = C2D(SUBSTR(eix_data,4,3))
      c2b_flag = C2B(SUBSTR(eix_data,7,1))
      SELECT
        WHEN (LEFT(c2b_flag,4) = "0000") THEN DO
          space_type = "not-requested"
        END
        WHEN (LEFT(c2b_flag,4) = "0001") THEN DO
          space_type = "MEGABYTES"
        END
        WHEN (LEFT(c2b_flag,4) = "0010") THEN DO
          space_type = "KILOBYTES"
        END
        WHEN (LEFT(c2b_flag,4) = "0100") THEN DO
          space_type = "RECORDS"
        END
        WHEN (LEFT(c2b_flag,4) = "1000") THEN DO
          space_type = "TRACK"
        END
        WHEN (LEFT(c2b_flag,4) = "1100") THEN DO
          space_type = "CYLINDERS"
        END
        OTHERWISE DO
          space_type = "unknown"
        END
      END
      IF (space_type = "not-requested") THEN DO
        data_space_alc = ""
      END
      ELSE DO
        data_space_alc = space_type"("eix_pri eix_sec")"
      END
      eix_data = c2b_flag":" space_type"("eix_pri eix_sec")"
    END
    WHEN (ctr_fields = 17) THEN DO
      field_name = "VOLSER"
      vols = eix_data
      vollist = ""
      DO WHILE (vols <> "")
        PARSE VAR vols volser +6 vols
        vollist = vollist||volser||","
      END
      eix_data = STRIP(vollist,"T",",")
      data_volumes = eix_data
    END
    WHEN (ctr_fields = 18) THEN DO
      field_name = "FLAG18"
      IF (debug_level >= 0) THEN DO
        SAY "  #:" RIGHT(ctr_fields,2,"0") ,
          "length:" RIGHT(lix_len,3," ") ,
          LEFT(field_name,25) ,
          "      <--------------<>-------------->"
      END
      tmp_data = C2X(eix_data)
      offset = 1
      DO WHILE (tmp_data <> "")
        PARSE VAR tmp_data blk +32 tmp_data
        IF (debug_level >= 2) THEN DO
          SAY "                 ==" ,
            LEFT(field_name,25) RIGHT(offset,4,"0")":" blk
        END
        offset = offset + 16
      END
      field_name = "FLAG18"
      IF (debug_level >= 0) THEN DO
        SAY "       " ,
          "length:" RIGHT(lix_len,3," ") ,
          LEFT(field_name,25) ,
            "      <--------------<>-------------->"
      END
      field_name = "FLAG18-2"
      lix_len = 1
      c2b_flag18_2 = C2B(SUBSTR(eix_data,2,1))
      blk = c2b_flag18_2":"
      IF (SUBSTR(c2b_flag18_2,1,1) = 1) THEN DO
        blk = blk "INDEXED "
      END
      ELSE DO
        blk = blk "NONINDEXED "
      END
      IF (SUBSTR(c2b_flag18_2,2,1) = 1) THEN DO
        blk = blk "WRITECHECK "
        data_wrtck = "WRITECHECK"
      END
      ELSE DO
        blk = blk "NOWRITECHECK "
        data_wrtck = ""
      END
      IF (SUBSTR(c2b_flag18_2,4,1) = 1) THEN DO
        blk = blk "SPANNED "
        data_spanned = "SPANNED"
      END
      ELSE DO
        blk = blk "NONSPANNED "
        data_spanned = ""
      END
      IF (debug_level >= 0) THEN DO
        SAY "       " ,
          "length:" RIGHT(lix_len,3," ") ,
          LEFT(field_name,25) "     " blk
      END
      field_name = "Unknown (17,4)"
      lix_len = 4
      c2x_data = C2X(SUBSTR(eix_data,17,4))
      c2d_data = C2D(SUBSTR(eix_data,17,4))
      IF (debug_level >= 0) THEN DO
        SAY "       " ,
          "length:" RIGHT(lix_len,3," ") ,
          LEFT(field_name,25) "     " c2x_data":" c2d_data
      END
      field_name = "CISIZE(21,4)"
      lix_len = 4
      c2x_data = C2X(SUBSTR(eix_data,21,4))
      c2d_data = C2D(SUBSTR(eix_data,21,4))
      IF (debug_level >= 0) THEN DO
        SAY "       " ,
          "length:" RIGHT(lix_len,3," ") ,
          LEFT(field_name,25) "     " c2x_data":" c2d_data
      END
      field_name = "MAXLRECL(25,4)"
      lix_len = 4
      c2x_data = C2X(SUBSTR(eix_data,25,4))
      c2d_data = C2D(SUBSTR(eix_data,25,4))
      IF (debug_level >= 0) THEN DO
        SAY "       " ,
          "length:" RIGHT(lix_len,3," ") ,
          LEFT(field_name,25) "     " c2x_data":" c2d_data
      END
      field_name = "CISIZE(39,4)"
      lix_len = 4
      c2x_data = C2X(SUBSTR(eix_data,39,4))
      c2d_data = C2D(SUBSTR(eix_data,39,4))
      IF (debug_level >= 0) THEN DO
        SAY "       " ,
          "length:" RIGHT(lix_len,3," ") ,
          LEFT(field_name,25) "     " c2x_data":" c2d_data
      END
      field_name = "SYSTEM-TIMESTAMP(49,8)"
      lix_len = 8
      blk = C2X(SUBSTR(eix_data,49,8))
      IF (blk <> "0000000000000000") THEN DO
        tunits = SUBSTR(eix_data,49,8)    /* from Mark Zelden */
        TIMESTAMP = COPIES(0,26)  /* force result length=26 */
        ADDRESS LINKPGM "BLSUXTOD TUNITS TIMESTAMP"
        blk = blk":" timestamp
      END
      ELSE DO
        blk = blk": low-values"
      END
      IF (debug_level >= 0) THEN DO
        SAY "       " ,
          "length:" RIGHT(lix_len,3," ") ,
          LEFT(field_name,25) "     " blk
      END
      field_name = "EXTENTS(57,4)"
      lix_len = 4
      c2x_data = C2X(SUBSTR(eix_data,57,4))
      c2d_data = C2D(SUBSTR(eix_data,57,4))
      IF (debug_level >= 0) THEN DO
        SAY "       " ,
          "length:" RIGHT(lix_len,3," ") ,
          LEFT(field_name,25) "     " c2x_data":" c2d_data
      END
      field_name = "REC-TOTAL(61,4)"
      lix_len = 4
      c2x_data = C2X(SUBSTR(eix_data,61,4))
      c2d_data = C2D(SUBSTR(eix_data,61,4))
      IF (debug_level >= 0) THEN DO
        SAY "       " ,
          "length:" RIGHT(lix_len,3," ") ,
          LEFT(field_name,25) "     " c2x_data":" c2d_data
      END
      field_name = "REC-DELETED(65,4)"
      lix_len = 4
      c2x_data = C2X(SUBSTR(eix_data,65,4))
      c2d_data = C2D(SUBSTR(eix_data,65,4))
      IF (debug_level >= 0) THEN DO
        SAY "       " ,
          "length:" RIGHT(lix_len,3," ") ,
          LEFT(field_name,25) "     " c2x_data":" c2d_data
      END
      field_name = "REC-INSERTED(69,4)"
      lix_len = 4
      c2x_data = C2X(SUBSTR(eix_data,69,4))
      c2d_data = C2D(SUBSTR(eix_data,69,4))
      IF (debug_level >= 0) THEN DO
        SAY "       " ,
          "length:" RIGHT(lix_len,3," ") ,
          LEFT(field_name,25) "     " c2x_data":" c2d_data
      END
      field_name = "REC-UPDATED(73,4)"
      lix_len = 4
      c2x_data = C2X(SUBSTR(eix_data,73,4))
      c2d_data = C2D(SUBSTR(eix_data,73,4))
      IF (debug_level >= 0) THEN DO
        SAY "       " ,
          "length:" RIGHT(lix_len,3," ") ,
          LEFT(field_name,25) "     " c2x_data":" c2d_data
      END
      field_name = "REC-RETRIEVED(77,4)"
      lix_len = 4
      c2x_data = C2X(SUBSTR(eix_data,77,4))
      c2d_data = C2D(SUBSTR(eix_data,77,4))
      IF (debug_level >= 0) THEN DO
        SAY "       " ,
          "length:" RIGHT(lix_len,3," ") ,
          LEFT(field_name,25) "     " c2x_data":" c2d_data
      END
      field_name = "FREESPC(81,4)"
      lix_len = 4
      c2x_data = C2X(SUBSTR(eix_data,81,4))
      c2d_data = C2D(SUBSTR(eix_data,81,4))
      IF (debug_level >= 0) THEN DO
        SAY "       " ,
          "length:" RIGHT(lix_len,3," ") ,
          LEFT(field_name,25) "     " c2x_data":" c2d_data
      END
      field_name = "SPLITS-CI(85,4)"
      lix_len = 4
      c2x_data = C2X(SUBSTR(eix_data,85,4))
      c2d_data = C2D(SUBSTR(eix_data,85,4))
      IF (debug_level >= 0) THEN DO
        SAY "       " ,
          "length:" RIGHT(lix_len,3," ") ,
          LEFT(field_name,25) "     " c2x_data":" c2d_data
      END
      field_name = "SPLITS-CA(89,4)"
      lix_len = 4
      c2x_data = C2X(SUBSTR(eix_data,89,4))
      c2d_data = C2D(SUBSTR(eix_data,89,4))
      IF (debug_level >= 0) THEN DO
        SAY "       " ,
          "length:" RIGHT(lix_len,3," ") ,
          LEFT(field_name,25) "     " c2x_data":" c2d_data
      END
      field_name = "EXCPS(93,4)"
      lix_len = 4
      c2x_data = C2X(SUBSTR(eix_data,93,4))
      c2d_data = C2D(SUBSTR(eix_data,93,4))
      IF (debug_level >= 0) THEN DO
        SAY "       " ,
          "length:" RIGHT(lix_len,3," ") ,
          LEFT(field_name,25) "     " c2x_data":" c2d_data
      END
      eix_data = -1
    END
    WHEN (ctr_fields = 19) THEN DO
      field_name = "Unknown"
      eix_data = C2X(eix_data)":"
    END
    WHEN (ctr_fields = 20) THEN DO
      field_name = "RKP"
      eix_data = C2D(eix_data)
      data_rkp = eix_data
    END
    WHEN (ctr_fields = 21) THEN DO
      field_name = "KEYLEN"
      eix_data = C2D(eix_data)
      data_keylen = eix_data
      IF (data_keylen > 0) THEN DO
        data_keys = "KEYS("data_keylen data_rkp")"
      END
      ELSE DO
        data_keys = ""
      END
    END
    WHEN (ctr_fields = 22) THEN DO
      field_name = "CISIZE"
      eix_data = C2D(eix_data)
      data_cisize = "CONTROLINTERVALSIZE("eix_data")"
    END
    WHEN (ctr_fields = 23) THEN DO
      field_name = "MAXLRECL"
      eix_data = C2D(eix_data)
      data_maxlrecl = eix_data
      data_rsize = "RECORDSIZE("data_avglrecl data_maxlrecl")"
    END
    WHEN (ctr_fields = 24) THEN DO
      field_name = "FREESPACE-%CA"
      eix_data = C2D(eix_data)
      data_freespc_ca = eix_data
    END
    WHEN (ctr_fields = 25) THEN DO
      field_name = "FREESPACE-%CI"
      eix_data = C2D(eix_data)
      data_freespc_ci = eix_data
      IF ((data_freespc_ci + data_freespc_ca) > 0) THEN DO
        data_freespc = "FREESPACE("data_freespc_ci data_freespc_ca")"
      END
      ELSE DO
        data_freespc = ""
      END
    END
    WHEN (ctr_fields = 26) THEN DO
      field_name = "VSAM "
      c2x_data = C2X(eix_data)
      SELECT
        WHEN (LEFT(c2x_data,2) = "00") THEN DO
          eix_data = c2x_data": KSDS"
          data_organization = "INDEXED"
        END
        WHEN (LEFT(c2x_data,2) = "08") THEN DO
          eix_data = c2x_data": KSDS"
          data_organization = "INDEXED"
        END
        WHEN (LEFT(c2x_data,2) = "44") THEN DO
          eix_data = c2x_data": ZFS"
          data_organization = "LINEAR"
        END
        WHEN (LEFT(c2x_data,2) = "48") THEN DO
          eix_data = c2x_data": ESDS"
          data_organization = "NONINDEXED"
        END
        WHEN (LEFT(c2x_data,2) = "49") THEN DO
          eix_data = c2x_data": RRDS"
          data_organization = "NUMBERED"
        END
        WHEN (LEFT(c2x_data,2) = "4C") THEN DO
          eix_data = c2x_data": DB2"
          data_organization = "LINEAR"
        END
        OTHERWISE DO
          eix_data = c2x_data": Unknown organization"
        END
      END
    END
    WHEN (ctr_fields = 27) THEN DO
      field_name = "Unknown"
      eix_data = C2X(eix_data)":"
    END
    WHEN (ctr_fields = 28) THEN DO
      field_name = "EXCPEXIT"
      data_excpexit = "EXCPEXIT("eix_data")"
    END
    WHEN (ctr_fields = 32) THEN DO
      field_name = "FLAG32-2"
      c2b_flag32_2 = C2B(eix_data)
      blk = c2b_flag32_2":"
      SELECT
        WHEN (SUBSTR(c2b_flag32_2,2,1) = 0) THEN DO
          blk = blk "CA-RECLAIM(NO)"
        END
        WHEN (SUBSTR(c2b_flag32_2,2,1) = 1) THEN DO
          blk = blk "CA-RECLAIM(YES)"
        END
        OTHERWISE DO
          NOP
        END
      END
      eix_data = blk
    END
    WHEN (ctr_fields = 34) THEN DO
      field_name = "SMS-34"
      c2x_data = C2X(eix_data)
      IF (c2x_data = "000000000000") THEN DO
        eix_data = c2x_data":"
      END
      ELSE DO
        f34ix = 1
        sc_len = C2D(SUBSTR(eix_data,f34ix,2))
        f34ix = f34ix + 2
        IF (sc_len > 0) THEN DO
          data_sc = "STORCLAS("SUBSTR(eix_data,f34ix,sc_len)")"
        END
        ELSE DO
          data_sc = ""
        END
        f34ix = f34ix + sc_len
        dc_len = C2D(SUBSTR(eix_data,f34ix,2))
        f34ix = f34ix + 2
        IF (dc_len > 0) THEN DO
          data_dc = "DATACLAS("SUBSTR(eix_data,f34ix,dc_len)")"
        END
        ELSE DO
          data_dc = ""
        END
        f34ix = f34ix + dc_len
        mc_len = C2D(SUBSTR(eix_data,f34ix,2))
        f34ix = f34ix + 2
        IF (mc_len > 0) THEN DO
          data_mc = "MGMTCLAS("SUBSTR(eix_data,f34ix,mc_len)")"
        END
        ELSE DO
          data_mc = ""
        END
        eix_data = c2x_data":" sc_len data_sc ,
          dc_len data_dc ,
          mc_len data_mc
      END
    END
    WHEN (ctr_fields = 35) THEN DO
      field_name = "SPACE-Req"
      eix_pri = C2D(SUBSTR(eix_data,1,3))
      eix_sec = C2D(SUBSTR(eix_data,4,3))
      c2b_flag = C2B(SUBSTR(eix_data,7,1))
      SELECT
        WHEN (LEFT(c2b_flag,4) = "0000") THEN DO
          space_type = "not-requested"
        END
        WHEN (LEFT(c2b_flag,4) = "0001") THEN DO
          space_type = "MEGABYTES"
        END
        WHEN (LEFT(c2b_flag,4) = "0010") THEN DO
          space_type = "KILOBYTES"
        END
        WHEN (LEFT(c2b_flag,4) = "0100") THEN DO
          space_type = "RECORDS"
        END
        WHEN (LEFT(c2b_flag,4) = "1000") THEN DO
          space_type = "TRACK"
        END
        WHEN (LEFT(c2b_flag,4) = "1100") THEN DO
          space_type = "CYLINDERS"
        END
        OTHERWISE DO
          space_type = "unknown"
        END
      END
      eix_data = c2b_flag eix_pri eix_sec":" ,
        space_type"("eix_pri eix_sec")"
      IF (space_type = "not-requested") THEN DO
        data_space_req = ""
      END
      ELSE DO
        data_space_req = space_type"("eix_pri eix_sec")"
      END
    END
    WHEN (ctr_fields = 36) THEN DO
      field_name = "SMS-36"
      eix_data = C2X(eix_data)":"
    END
    WHEN (ctr_fields = 37) THEN DO
      field_name = "SMS-37"
      eix_data = C2X(eix_data)":"
    END
    WHEN (ctr_fields = 38) THEN DO
      field_name = "SMS-38"
      blk = C2X(eix_data)":"
      IF (blk <> "0000000000000000") THEN DO
        tunits = SUBSTR(eix_data,33,8)    /* from Mark Zelden */
        TIMESTAMP = COPIES(0,26)  /* force result length=26 */
        ADDRESS LINKPGM "BLSUXTOD TUNITS TIMESTAMP"
        eix_data = blk timestamp
      END
      ELSE DO
        eix_data = blk "low-values"
      END
    END
    WHEN (ctr_fields = 39) THEN DO
      field_name = "DEVTYPE"
      eix_qty = lix_len / 4
      blk = eix_data
      eix_data = ""
      DO WHILE (blk <> "")
        PARSE VAR blk one_unit +4 blk
        SELECT
          WHEN (LEFT(one_unit,2) = "33") THEN DO
            eix_data = eix_data||one_unit||","
          END
          OTHERWISE DO
            eix_data = eix_data||"x'"C2X(one_unit)||"',"
          END
        END
      END
      eix_data = eix_qty":" STRIP(eix_data,"T",",")
    END
    WHEN (ctr_fields = 40) THEN DO
      field_name = "FLAG40"
      IF (debug_level >= 0) THEN DO
        SAY "  #:" RIGHT(ctr_fields,2,"0") ,
          "length:" RIGHT(lix_len,3," ") ,
          LEFT(field_name,25) ,
          "      <--------------<>-------------->"
      END
      tmp_data = C2X(eix_data)
      offset = 1
      DO WHILE (tmp_data <> "")
        PARSE VAR tmp_data blk +32 tmp_data
        IF (debug_level >= 2) THEN DO
          SAY "                 ==" ,
            LEFT(field_name,25) RIGHT(offset,4,"0")":" blk
        END
        offset = offset + 16
      END
      field_name = "FLAG40"
      IF (debug_level >= 0) THEN DO
        SAY "       " ,
          "length:" RIGHT(lix_len,3," ") ,
          LEFT(field_name,25) ,
            "      <--------------<>-------------->"
      END
      field_name = "System-Timestamp(25,8)"
      lix_len = 8
      blk = C2X(SUBSTR(eix_data,25,8))
      IF (blk <> "0000000000000000") THEN DO
        tunits = SUBSTR(eix_data,25,8)    /* from Mark Zelden */
        TIMESTAMP = COPIES(0,26)  /* force result length=26 */
        ADDRESS LINKPGM "BLSUXTOD TUNITS TIMESTAMP"
        blk = blk":" timestamp
      END
      ELSE DO
        blk = blk": low-values"
      END
      IF (debug_level >= 0) THEN DO
        SAY "       " ,
          "length:" RIGHT(lix_len,3," ") ,
          LEFT(field_name,25) "   25" blk
      END
      field_name = "System-Timestamp(33,8)"
      blk = C2X(SUBSTR(eix_data,33,8))
      lix_len = 8
      IF (blk <> "0000000000000000") THEN DO
        tunits = SUBSTR(eix_data,33,8)    /* from Mark Zelden */
        TIMESTAMP = COPIES(0,26)  /* force result length=26 */
        ADDRESS LINKPGM "BLSUXTOD TUNITS TIMESTAMP"
        blk = blk":" timestamp
      END
      ELSE DO
        blk = blk": low-values"
      END
      IF (debug_level >= 0) THEN DO
        SAY "       " ,
          "length:" RIGHT(lix_len,3," ") ,
          LEFT(field_name,25) "   33" blk
      END
      field_name = "ACCOUNT(87,32)"
      lix_len = 32
      IF (C2X(SUBSTR(eix_data,87,1)) = "00") THEN DO
        blk = ""
      END
      ELSE DO
        blk = SUBSTR(eix_data,87,32)
      END
      IF (debug_level >= 0) THEN DO
        SAY "       " ,
          "length:" RIGHT(lix_len,3," ") ,
          LEFT(field_name,25) blk
      END
      eix_data = -1
    END
    WHEN (ctr_fields = 41) THEN DO
      field_name = "SMS-41?"
      eix_data = C2X(eix_data)":"
    END
    WHEN (ctr_fields = 42) THEN DO
      field_name = "SMS-42?"
      eix_data = C2X(eix_data)":"
    END
    WHEN (ctr_fields = 43) THEN DO
      field_name = "SMS-43?"
      eix_data = C2X(eix_data)":"
    END
    WHEN (ctr_fields = 44) THEN DO
      field_name = "SMS-in-use?"
      eix_data = C2X(eix_data)":"
    END
    WHEN (ctr_fields = 46) THEN DO
      field_name = "LOG"
      eix_data = C2X(eix_data)":"
    END
    WHEN (ctr_fields = 45) THEN DO
      field_name = "SMS-45?"
      eix_data = C2X(eix_data)":"
    END
    WHEN (ctr_fields = 47) THEN DO
      field_name = "LOGSTREAMID"
    END
    WHEN (ctr_fields = 48) THEN DO
      field_name = "RLS-FLAG48"
      eix_data = C2X(eix_data)":"
    END
    WHEN (ctr_fields = 49) THEN DO
      field_name = "BWO"
      eix_data = C2X(eix_data)":"
    END
    WHEN (ctr_fields = 50) THEN DO
      field_name = "FLAG50"
      c2x_data = C2X(eix_data)
      SELECT
        WHEN (c2x_data = "00") THEN DO
          data_flag50 = "Normal"
        END
        WHEN (c2x_data = "C0") THEN DO
          data_flag50 = "SMS-in-use?"
        END
        OTHERWISE DO
          data_flag50 = "Unhandled"
        END
      END
      eix_data = c2x_data":" data_flag50
    END
    WHEN (ctr_fields = 51) THEN DO
      field_name = "RLS-FRLOG"
      eix_data = C2X(eix_data)":"
    END
    WHEN (ctr_fields = 52) THEN DO
      field_name = "EATTR"
      eix_data = C2X(eix_data)":"
    END
    OTHERWISE DO
      SAY "Unknown field" ctr_fields
      eix_data = C2X(eix_data)
    END
  END
  IF (eix_data > -1) THEN DO
    IF (debug_level >= 0) THEN DO
      SAY "  #:" RIGHT(ctr_fields,2,"0") ,
        "length:" RIGHT(lix_len,3," ") ,
        LEFT(field_name,25) "data:" eix_data
    END
  END
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 Parse the "I" control record.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_Index_Record:
  IF (debug_level >= 0) THEN DO
    SAY ""
    SAY COPIES("I",132)
  END
  lix_number = C2D(SUBSTR(layout_control.lix,7,2))
  lix_qty = C2D(SUBSTR(layout_control.lix,9,4))
  lix_fields = SUBSTR(layout_control.lix,13)
  ctr_fields = 0
  DO WHILE lix_fields <> ""
    PARSE VAR lix_fields ,
      hex_len  +4 ,
      hex_position +4 ,
      lix_fields
    ctr_fields = ctr_fields + 1
    lix_position = C2D(hex_position) + 1
    lix_len = C2D(hex_len)
    IF (lix_len > 0) THEN DO
      eix_data = SUBSTR(export_control.lix,lix_position,lix_len)
      function_rc = Parse_Index_Fields()
    END
  END
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 Show the index fields.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Parse_Index_Fields:
  field_name = ""
  SELECT
    WHEN (ctr_fields = 1) THEN DO
      field_name = "Component_type"
    END
    WHEN (ctr_fields = 2) THEN DO
      field_name = "Component_name"
      index_name = STRIP(eix_data,"T"," ")
    END
    WHEN (ctr_fields = 3) THEN DO
      field_name = "FLAG3"
      blk = C2X(eix_data)
      IF (debug_level >= 0) THEN DO
        SAY "  #:" RIGHT(ctr_fields,2,"0") ,
          "length:" RIGHT(lix_len,3," ") ,
          LEFT(field_name,25) "data:" blk
      END
      field_name = "FLAG3-1"
      lix_len = 1
      eix_flag1_1 = C2B(LEFT(eix_data,1))
      blk = eix_flag1_1":"
      IF (SUBSTR(eix_flag1_1,1,1) = 1) THEN DO
        blk = blk "SPEED"
      END
      ELSE DO
        blk = blk "RECOVERY"
      END
      IF (SUBSTR(eix_flag1_1,2,1) = 1) THEN DO
        blk = blk "NOREUSE"
        index_reuse = "NOREUSE"
      END
      ELSE DO
        blk = blk "REUSE"
        index_reuse = "REUSE"
      END
      IF (SUBSTR(eix_flag1_1,4,1) = 1) THEN DO
        blk = blk "ERASE"
      END
      ELSE DO
        blk = blk "NOERASE"
      END
      IF (debug_level >= 0) THEN DO
        SAY "       " ,
          "length:" RIGHT(lix_len,3," ") ,
          LEFT(field_name,25) "data:" blk
      END
      field_name = "FLAG3-2"
      lix_len = 1
      eix_flag3_2 = C2B(RIGHT(eix_data,1))
      blk = eix_flag3_2":"
      SELECT
        WHEN (SUBSTR(eix_flag3_2,1,4) = '0010') THEN DO
          blk = blk "SHR(1 3) "
        END
        WHEN (SUBSTR(eix_flag3_2,1,4) = '0011') THEN DO
          blk = blk "SHR(1 4) "
        END
        WHEN (SUBSTR(eix_flag3_2,1,4) = '0110') THEN DO
          blk = blk "SHR(2 3) "
        END
        WHEN (SUBSTR(eix_flag3_2,1,4) = '0111') THEN DO
          blk = blk "SHR(2 4) "
        END
        WHEN (SUBSTR(eix_flag3_2,1,4) = '1010') THEN DO
          blk = blk "SHR(3 3) "
        END
        WHEN (SUBSTR(eix_flag3_2,1,4) = '1011') THEN DO
          blk = blk "SHR(3 4) "
        END
        WHEN (SUBSTR(eix_flag3_2,1,4) = '1110') THEN DO
          blk = blk "SHR(4 3) "
        END
        WHEN (SUBSTR(eix_flag3_2,1,4) = '1111') THEN DO
          blk = blk "SHR(4 4) "
        END
        OTHERWISE DO
          blk = blk "FLAG3-2:"  ,
            SUBSTR(eix_flag3_2,1,4)
        END
      END
      eix_data = blk
    END
    WHEN (ctr_fields = 5) THEN DO
      field_name = "Creation_date"
      tmp_date = C2X(eix_data)
      tmp_dt = LEFT(tmp_date,5)
      jul_date = LEFT(tmp_dt,2)"."RIGHT(tmp_dt,3)
      two_date = DATE('S', tmp_dt, 'J') jul_date
      eix_data = tmp_date":" two_date
    END
    WHEN (ctr_fields = 6) THEN DO
      field_name = "EXPIRE-DATE"
      tmp_date = C2X(eix_data)
      IF (tmp_date <> "00000F") THEN DO
        tmp_dt = LEFT(tmp_date,5)
        jul_date = LEFT(tmp_dt,2)"."RIGHT(tmp_dt,3)
        two_date = DATE('S', tmp_dt, 'J') jul_date
        eix_data = tmp_date":" two_date
      END
      ELSE DO
        eix_data = tmp_date":"
      END
    END
    WHEN (ctr_fields = 7) THEN DO
      field_name = "BUFSPACE"
      eix_data = C2D(eix_data)
    END
    WHEN (ctr_fields = 8) THEN DO
      field_name = "AVGLRECL"
      eix_data = C2D(eix_data)
    END
    WHEN (ctr_fields = 9) THEN DO
      field_name = "SPACE-ALC"
      eix_pri = C2D(SUBSTR(eix_data,1,3))
      eix_sec = C2D(SUBSTR(eix_data,4,3))
      c2b_flag = C2B(SUBSTR(eix_data,7,1))
      SELECT
        WHEN (LEFT(c2b_flag,4) = "0000") THEN DO
          space_type = "not-requested"
        END
        WHEN (LEFT(c2b_flag,4) = "0001") THEN DO
          space_type = "MEGABYTES"
        END
        WHEN (LEFT(c2b_flag,4) = "0010") THEN DO
          space_type = "KILOBYTES"
        END
        WHEN (LEFT(c2b_flag,4) = "0100") THEN DO
          space_type = "RECORDS"
        END
        WHEN (LEFT(c2b_flag,4) = "1000") THEN DO
          space_type = "TRACK"
        END
        WHEN (LEFT(c2b_flag,4) = "1100") THEN DO
          space_type = "CYLINDERS"
        END
        OTHERWISE DO
          space_type = "unknown"
        END
      END
      eix_data = c2b_flag":" space_type"("eix_pri eix_sec")"
      IF (space_type = "not-requested") THEN DO
        index_space_alc = ""
      END
      ELSE DO
        index_space_alc = space_type"("eix_pri eix_sec")"
      END
    END
    WHEN (ctr_fields = 17) THEN DO
      field_name = "VOLSER"
      vols = eix_data
      vollist = ""
      DO WHILE (vols <> "")
        PARSE VAR vols volser +6 vols
        vollist = vollist||volser||","
      END
      eix_data = STRIP(vollist,"T",",")
      index_volumes = eix_data
    END
    WHEN (ctr_fields = 18) THEN DO
      field_name = "FLAG18"
      IF (debug_level >= 0) THEN DO
        SAY "  #:" RIGHT(ctr_fields,2,"0") ,
          "length:" RIGHT(lix_len,3," ") ,
          LEFT(field_name,25) ,
          "      <--------------<>-------------->"
      END
      tmp_data = C2X(eix_data)
      offset = 1
      DO WHILE (tmp_data <> "")
        PARSE VAR tmp_data blk +32 tmp_data
        IF (debug_level >= 2) THEN DO
          SAY "                 ==" ,
            LEFT(field_name,25) RIGHT(offset,5,"0") blk
        END
        offset = offset + 32
      END
      field_name = "FLAG18"
      IF (debug_level >= 0) THEN DO
        SAY "                 ==" ,
          LEFT(field_name,25) ,
            "      <--------------<>-------------->"
      END
      field_name = "FLAG18-2-1"
      lix_len = 1
      flag18_2 = C2B(SUBSTR(eix_data,2,1))
      blk = flag18_2":"
      IF (SUBSTR(flag18_2,2,1) = 1) THEN DO
        blk = blk "WRITECHECK "
        index_wrtck = "WRITECHECK"
      END
      ELSE DO
        blk = blk "NOWRITECHECK "
        index_wrtck = "NOWRITECHECK"
      END
      IF (debug_level >= 0) THEN DO
        SAY "       " ,
          "length:" RIGHT(lix_len,3," ") ,
          LEFT(field_name,25) "     " blk
      END
      field_name = "Unknown(17,4)"
      lix_len = 4
      c2x_data = C2X(SUBSTR(eix_data,17,4))
      c2d_data = C2X(SUBSTR(eix_data,17,4))
      IF (debug_level >= 0) THEN DO
        SAY "       " ,
          "length:" RIGHT(lix_len,3," ") ,
          LEFT(field_name,25) "     " c2x_data":" c2d_data
      END
      field_name = "SYSTEM-TIMESTAMP(33,8)"
      lix_len = 8
      blk = C2X(SUBSTR(eix_data,33,8))
      IF (blk <> "0000000000000000") THEN DO
        tunits = SUBSTR(eix_data,33,8)    /* from Mark Zelden */
        TIMESTAMP = COPIES(0,26)  /* force result length=26 */
        ADDRESS LINKPGM "BLSUXTOD TUNITS TIMESTAMP"
      END
      ELSE DO
        timestamp = ""
      END
      IF (debug_level >= 0) THEN DO
        SAY "       " ,
          "length:" RIGHT(lix_len,3," ") ,
          LEFT(field_name,25) "     " blk":" timestamp
      END
      field_name = "SYSTEM-TIMESTAMP(49,8)"
      lix_len = 8
      blk = C2X(SUBSTR(eix_data,49,8))
      IF (blk <> "0000000000000000") THEN DO
        tunits = SUBSTR(eix_data,49,8)    /* from Mark Zelden */
        TIMESTAMP = COPIES(0,26)  /* force result length=26 */
        ADDRESS LINKPGM "BLSUXTOD TUNITS TIMESTAMP"
      END
      ELSE DO
        timestamp = ""
      END
      IF (debug_level >= 0) THEN DO
        SAY "       " ,
          "length:" RIGHT(lix_len,3," ") ,
          LEFT(field_name,25) "     " blk":" timestamp
      END
      field_name = "LEVELS(57,2)"
      lix_len = 2
      c2x_data = C2X(SUBSTR(eix_data,57,2))
      c2d_data = C2D(SUBSTR(eix_data,57,2))
      IF (debug_level >= 0) THEN DO
        SAY "       " ,
          "length:" RIGHT(lix_len,3," ") ,
          LEFT(field_name,25) "     " c2x_data":" c2d_data
      END
      field_name = "ENTRIES/SECT(59,2)"
      lix_len = 2
      c2x_data = C2X(SUBSTR(eix_data,59,2))
      c2d_data = C2D(SUBSTR(eix_data,59,2))
      IF (debug_level >= 0) THEN DO
        SAY "       " ,
          "length:" RIGHT(lix_len,3," ") ,
          LEFT(field_name,25) "     " c2x_data":" c2d_data
      END
      field_name = "REC-TOTAL(61,4)"
      lix_len = 4
      c2x_data = C2X(SUBSTR(eix_data,61,4))
      c2d_data = C2D(SUBSTR(eix_data,61,4))
      IF (debug_level >= 0) THEN DO
        SAY "       " ,
          "length:" RIGHT(lix_len,3," ") ,
          LEFT(field_name,25) "     " c2x_data":" c2d_data
      END
      field_name = "REC-DELETED(65,4)"
      lix_len = 4
      c2x_data = C2X(SUBSTR(eix_data,65,4))
      c2d_data = C2D(SUBSTR(eix_data,65,4))
      IF (debug_level >= 0) THEN DO
        SAY "       " ,
          "length:" RIGHT(lix_len,3," ") ,
          LEFT(field_name,25) "     " c2x_data":" c2d_data
      END
      field_name = "REC-INSERTED(69,4)"
      lix_len = 4
      c2x_data = C2X(SUBSTR(eix_data,69,4))
      c2d_data = C2D(SUBSTR(eix_data,69,4))
      IF (debug_level >= 0) THEN DO
        SAY "       " ,
          "length:" RIGHT(lix_len,3," ") ,
          LEFT(field_name,25) "     " c2x_data":" c2d_data
      END
      field_name = "REC-UPDATED(73,4)"
      lix_len = 4
      c2x_data = C2X(SUBSTR(eix_data,73,4))
      c2d_data = C2D(SUBSTR(eix_data,73,4))
      IF (debug_level >= 0) THEN DO
        SAY "       " ,
          "length:" RIGHT(lix_len,3," ") ,
          LEFT(field_name,25) "     " c2x_data":" c2d_data
      END
      field_name = "REC-RETRIEVED(77,4)"
      lix_len = 4
      c2x_data = C2X(SUBSTR(eix_data,77,4))
      c2d_data = C2D(SUBSTR(eix_data,77,4))
      IF (debug_level >= 0) THEN DO
        SAY "       " ,
          "length:" RIGHT(lix_len,3," ") ,
          LEFT(field_name,25) "     " c2x_data":" c2d_data
      END
      field_name = "FREESPC(81,4)"
      lix_len = 4
      c2x_data = C2X(SUBSTR(eix_data,81,4))
      c2d_data = C2D(SUBSTR(eix_data,81,4))
      IF (debug_level >= 0) THEN DO
        SAY "       " ,
          "length:" RIGHT(lix_len,3," ") ,
          LEFT(field_name,25) "     " c2x_data":" c2d_data
      END
      field_name = "SPLITS-CI(85,4)"
      lix_len = 4
      c2x_data = C2X(SUBSTR(eix_data,85,4))
      c2d_data = C2D(SUBSTR(eix_data,85,4))
      IF (debug_level >= 0) THEN DO
        SAY "       " ,
          "length:" RIGHT(lix_len,3," ") ,
          LEFT(field_name,25) "     " c2x_data":" c2d_data
      END
      field_name = "SPLITS-CA(89,4)"
      lix_len = 4
      c2x_data = C2X(SUBSTR(eix_data,89,4))
      c2d_data = C2D(SUBSTR(eix_data,89,4))
      IF (debug_level >= 0) THEN DO
        SAY "       " ,
          "length:" RIGHT(lix_len,3," ") ,
          LEFT(field_name,25) "     " c2x_data":" c2d_data
      END
      field_name = "EXCPS(93,4)"
      lix_len = 4
      c2x_data = C2X(SUBSTR(eix_data,93,4))
      c2d_data = C2D(SUBSTR(eix_data,93,4))
      IF (debug_level >= 0) THEN DO
        SAY "       " ,
          "length:" RIGHT(lix_len,3," ") ,
          LEFT(field_name,25) "     " c2x_data":" c2d_data
      END
      eix_data = -1
    END
    WHEN (ctr_fields = 19) THEN DO
      field_name = "Unknown"
      eix_data = C2X(eix_data)":"
    END
    WHEN (ctr_fields = 20) THEN DO
      field_name = "RKP"
      eix_data = C2D(eix_data)":"
    END
    WHEN (ctr_fields = 21) THEN DO
      field_name = "KEYLEN"
      eix_data = C2D(eix_data)
    END
    WHEN (ctr_fields = 22) THEN DO
      field_name = "CISIZE"
      eix_data = C2D(eix_data)
      index_cisize = "CONTROLINTERVALSIZE("eix_data")"
    END
    WHEN (ctr_fields = 23) THEN DO
      field_name = "MAXLRECL"
      eix_data = C2D(eix_data)
    END
    WHEN (ctr_fields = 24) THEN DO
      field_name = "FREESPACE-%CA"
      eix_data = C2D(eix_data)
    END
    WHEN (ctr_fields = 25) THEN DO
      field_name = "FREESPACE-%CI"
      eix_data = C2D(eix_data)
    END
    WHEN (ctr_fields = 26) THEN DO
      field_name = "VSAM "
      c2x_data = C2X(eix_data)
      SELECT
        WHEN (LEFT(c2x_data,2) = "00") THEN DO
          eix_data = "00 KSDS"
        END
        WHEN (LEFT(c2x_data,2) = "08") THEN DO
          eix_data = "08 KSDS"
        END
        WHEN (LEFT(c2x_data,2) = "44") THEN DO
          eix_data = "44 ZFS"
        END
        WHEN (LEFT(c2x_data,2) = "48") THEN DO
          eix_data = "48 ESDS"
        END
        WHEN (LEFT(c2x_data,2) = "49") THEN DO
          eix_data = "49 RRDS"
        END
        WHEN (LEFT(c2x_data,2) = "4C") THEN DO
          eix_data = "4C LINEAR"
        END
        OTHERWISE DO
          eix_data = c2x_data": Unknown organization"
        END
      END
    END
    WHEN (ctr_fields = 27) THEN DO
      field_name = "Unknown"
      eix_data = C2X(eix_data)":"
    END
    WHEN (ctr_fields = 28) THEN DO
      field_name = "EXCPEXIT"
    END
    WHEN (ctr_fields = 32) THEN DO
      field_name = "FLAG32"
      c2b_data = C2B(eix_data)
      eix_data = c2b_data":"
      SELECT
        WHEN (SUBSTR(c2b_data,2,1) = 0) THEN DO
          index_reclaim = "NO"
          eix_data = eix_data ,
            "CA-RECLAIM("index_reclaim")"
        END
        WHEN (SUBSTR(c2b_data,2,1) = 1) THEN DO
          index_reclaim = "YES"
          eix_data = eix_data ,
            "CA-RECLAIM("index_reclaim")"
        END
        OTHERWISE DO
          eix_data = eix_data ,
            "32-2-1: undefined"
        END
      END
    END
    WHEN (ctr_fields = 34) THEN DO
      field_name = "SMS-34"
      c2x_data = C2X(eix_data)
      IF (c2x_data = "000000000000") THEN DO
        eix_data = c2x_data
      END
      ELSE DO
        f34ix = 1
        sc_len = C2D(SUBSTR(eix_data,f34ix,2))
        f34ix = f34ix + 2
        IF (sc_len > 0) THEN DO
          index_sc = "STORCLAS("SUBSTR(eix_data,f34ix,sc_len)")"
        END
        ELSE DO
          index_sc = ""
        END
        f34ix = f34ix + sc_len
        dc_len = C2D(SUBSTR(eix_data,f34ix,2))
        f34ix = f34ix + 2
        IF (dc_len > 0) THEN DO
          index_dc = "DATACLAS("SUBSTR(eix_data,f34ix,dc_len)")"
        END
        ELSE DO
          index_dc = ""
        END
        f34ix = f34ix + dc_len
        mc_len = C2D(SUBSTR(eix_data,f34ix,2))
        f34ix = f34ix + 2
        IF (mc_len > 0) THEN DO
          index_mc = "MGMTCLAS("SUBSTR(eix_data,f34ix,mc_len)")"
        END
        ELSE DO
          index_mc = ""
        END
        eix_data = c2x_data":" sc_len data_sc ,
          dc_len data_dc ,
          mc_len data_mc
      END
    END
    WHEN (ctr_fields = 35) THEN DO
      field_name = "SPACE-Req"
      eix_pri = C2D(SUBSTR(eix_data,1,3))
      eix_sec = C2D(SUBSTR(eix_data,4,3))
      c2b_flag = C2B(SUBSTR(eix_data,7,1))
      SELECT
        WHEN (LEFT(c2b_flag,4) = "0000") THEN DO
          space_type = "not-requested"
        END
        WHEN (LEFT(c2b_flag,4) = "0001") THEN DO
          space_type = "MEGABYTES"
        END
        WHEN (LEFT(c2b_flag,4) = "0010") THEN DO
          space_type = "KILOBYTES"
        END
        WHEN (LEFT(c2b_flag,4) = "0100") THEN DO
          space_type = "RECORDS"
        END
        WHEN (LEFT(c2b_flag,4) = "1000") THEN DO
          space_type = "TRACK"
        END
        WHEN (LEFT(c2b_flag,4) = "1100") THEN DO
          space_type = "CYLINDERS"
        END
        OTHERWISE DO
          space_type = "unknown"
        END
      END
      eix_data = c2b_flag eix_pri eix_sec":" ,
        space_type"("eix_pri eix_sec")"
      IF (space_type = "not-requested") THEN DO
        index_space_req = ""
      END
      ELSE DO
        index_space_req = space_type"("eix_pri eix_sec")"
      END
    END
    WHEN (ctr_fields = 36) THEN DO
      field_name = "SMS-36"
      eix_data = C2X(eix_data)":"
    END
    WHEN (ctr_fields = 37) THEN DO
      field_name = "SMS-37"
      eix_data = C2X(eix_data)":"
    END
    WHEN (ctr_fields = 38) THEN DO
      field_name = "SMS-38"
      blk = C2X(eix_data)
      IF (blk <> "0000000000000000") THEN DO
        tunits = SUBSTR(eix_data,33,8)    /* from Mark Zelden */
        TIMESTAMP = COPIES(0,26)  /* force result length=26 */
        ADDRESS LINKPGM "BLSUXTOD TUNITS TIMESTAMP"
        blk = blk":" timestamp
      END
      ELSE DO
        blk = blk": low-values"
      END
        eix_data = blk
    END
    WHEN (ctr_fields = 39) THEN DO
      field_name = "DEVTYPE"
      eix_qty = lix_len / 4
      blk = eix_data
      eix_data = ""
      DO WHILE (blk <> "")
        PARSE VAR blk one_unit +4 blk
        SELECT
          WHEN (LEFT(one_unit,2) = "33") THEN DO
            eix_data = eix_data||one_unit||","
          END
          OTHERWISE DO
            eix_data = eix_data||"x'"C2X(one_unit)||"',"
          END
        END
      END
      eix_data = eix_qty":" STRIP(eix_data,"T",",")
    END
    WHEN (ctr_fields = 44) THEN DO
      field_name = "SMS-in-use?"
      eix_data = C2X(eix_data)":"
    END
    WHEN (ctr_fields = 50) THEN DO
      field_name = "FLAG50"
      c2x_data = C2X(eix_data)
      SELECT
        WHEN (c2x_data = "00") THEN DO
          index_flag50 = "Normal"
        END
        WHEN (c2x_data = "C0") THEN DO
          index_flag50 = "SMS-in-use?"
        END
        OTHERWISE DO
          index_flag50 = "Unhandled"
        END
      END
      eix_data = c2x_data":" index_flag50
    END
    WHEN (ctr_fields = 52) THEN DO
      field_name = "EATTR"
      eix_data = C2X(eix_data)":"
    END
    OTHERWISE DO
      SAY "INDEX: Unknown field" ctr_fields
      eix_data = C2X(eix_data)
    END
  END
  IF (eix_data > -1) THEN DO
    IF (debug_level >= 0) THEN DO
      SAY "  #:" RIGHT(ctr_fields,2,"0") ,
        "length:" RIGHT(lix_len,3," ") ,
        LEFT(field_name,25) "data:" eix_data
    END
  END
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
-----------------------------------------------------------------------
 Function to turn a character string into binary bits.
-----------------------------------------------------------------------
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
C2B: PROCEDURE EXPOSE bits
  data = ARG(1)
  IF (bits.F <> "1111") THEN DO
    bits.0="0000"; bits.1="0001"; bits.2="0010"; bits.3="0011"
    bits.4="0100"; bits.5="0101"; bits.6="0110"; bits.7="0111"
    bits.8="1000"; bits.9="1001"; bits.A="1010"; bits.B="1011"
    bits.C="1100"; bits.D="1101"; bits.E="1110"; bits.F="1111"
  END
  c2x_data = C2X(data)
  bs = ""
  DO ix = 1 TO LENGTH(c2x_data)
    bx = SUBSTR(c2x_data,ix,1)
    bs =bs||bits.bx
  END
  RETURN bs

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 Clear all variables used in the DEFINE.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Clear_Define:
  bkup_date = ""
  bkup_time = ""
  definejb_pds = ""
  definejb_dsn = ""
  definejb_mbr = ""
  entry_crtdt = ""
  exportds_dsn = ""
  jobname = ""

  cluster_account = ""
  cluster_bwo = ""
  cluster_dc = ""
  cluster_eattr = ""
  cluster_frlog = ""
  cluster_log = ""
  cluster_logstreamid = ""
  cluster_mc = ""
  cluster_mode = ""
  cluster_name = ""
  data_organization = ""
  cluster_owner = ""
  cluster_sc = ""
  cluster_to = ""

  data_avglrecl = ""
  data_bufspace = ""
  data_cisize = ""
  data_erase = ""
  data_excpexit = ""
  data_freespc = ""
  data_freespc_ca = 0
  data_freespc_ci = 0
  data_keylen = ""
  data_keys = ""
  data_maxlrecl = ""
  data_name = ""
  data_reuse = ""
  data_rkp = ""
  data_rsize = ""
  data_shropts = ""
  data_space_alc = ""
  data_space_req = ""
  data_spanned = ""
  data_speed = ""
  data_volumes = ""
  data_wrtck = ""

  index_cisize = ""
  index_dc = ""
  index_excpexit = ""
  index_name = ""
  index_reuse = ""
  index_space_alc = ""
  index_space_req = ""
  index_volumes = ""
  index_wrtck = ""
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 Build a job to DEFINE the cluster and repro the data back in.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Build_Define:
  orx = out_record.0 + 1
  out_record.0 = orx
  out_record.orx = ,
    "//"jobname "JOB ('GRP',USER,60,9999,0,STD,1,Y,60),"
  orx = out_record.0 + 1
  out_record.0 = orx
  out_record.orx = ,
    "//             'DEL/DEF/REPRO',"
  orx = out_record.0 + 1
  out_record.0 = orx
  out_record.orx = ,
    "//             CLASS=A,MSGCLASS=X,TIME=1440,"
  orx = out_record.0 + 1
  out_record.0 = orx
  out_record.orx = ,
    "//             REGION=32M,NOTIFY=&SYSUID."
  orx = out_record.0 + 1
  out_record.0 = orx
  out_record.orx = ,
    "//*"
  orx = out_record.0 + 1
  out_record.0 = orx
  out_record.orx = ,
    "//*" COPIES("<",67)
  orx = out_record.0 + 1
  out_record.0 = orx
  out_record.orx = ,
    "//*" COPIES("=",67)
  orx = out_record.0 + 1
  out_record.0 = orx
  out_record.orx = ,
    "//*"
  orx = out_record.0 + 1
  out_record.0 = orx
  out_record.orx = ,
    "//* Source :" definejb_dsn"("jobname")"
  orx = out_record.0 + 1
  out_record.0 = orx
  out_record.orx = ,
    "//* Built  :" Date("S") Time()
  orx = out_record.0 + 1
  out_record.0 = orx
  out_record.orx = ,
    "//* Purpose: This job will DELETE/DEFINE cluster:"
  orx = out_record.0 + 1
  out_record.0 = orx
  out_record.orx = ,
    "//*             " cluster_name
  orx = out_record.0 + 1
  out_record.0 = orx
  out_record.orx = ,
    "//*          created on" entry_crtdt
  orx = out_record.0 + 1
  out_record.0 = orx
  out_record.orx = ,
    "//*          and then REPRO in data from:"
  orx = out_record.0 + 1
  out_record.0 = orx
  out_record.orx = ,
    "//*             " exportds_dsn
  orx = out_record.0 + 1
  out_record.0 = orx
  out_record.orx = ,
    "//*          exported on" bkup_date "at" bkup_time"."
  orx = out_record.0 + 1
  out_record.0 = orx
  out_record.orx = ,
    "//*"
  orx = out_record.0 + 1
  out_record.0 = orx
  out_record.orx = ,
    "//*" COPIES("=",67)
  orx = out_record.0 + 1
  out_record.0 = orx
  out_record.orx = ,
    "//*" COPIES(">",67)
  orx = out_record.0 + 1
  out_record.0 = orx
  out_record.orx = ,
    "//*" COPIES("-",67)
  orx = out_record.0 + 1
  out_record.0 = orx
  out_record.orx = ,
    "//LISTPRE EXEC PGM=IDCAMS"
  orx = out_record.0 + 1
  out_record.0 = orx
  out_record.orx = ,
    "//SYSIN     DD *"
  orx = out_record.0 + 1
  out_record.0 = orx
  out_record.orx = ,
    "  LISTCAT -"
  orx = out_record.0 + 1
  out_record.0 = orx
  out_record.orx = ,
    "    ENTRY("cluster_name") -"
  orx = out_record.0 + 1
  out_record.0 = orx
  out_record.orx = ,
    "    ALL"
  orx = out_record.0 + 1
  out_record.0 = orx
  out_record.orx = ,
    "  SET MAXCC = 0"
  orx = out_record.0 + 1
  out_record.0 = orx
  out_record.orx = ,
    "/*"
  orx = out_record.0 + 1
  out_record.0 = orx
  out_record.orx = ,
    "//SYSPRINT  DD SYSOUT=*"
  orx = out_record.0 + 1
  out_record.0 = orx
  out_record.orx = ,
    "//*" COPIES("-",67)
  orx = out_record.0 + 1
  out_record.0 = orx
  out_record.orx = ,
    "//DELETE  EXEC PGM=IDCAMS"
  orx = out_record.0 + 1
  out_record.0 = orx
  out_record.orx = ,
    "//SYSIN     DD *"
  orx = out_record.0 + 1
  out_record.0 = orx
  out_record.orx = ,
    "  DELETE -"
  orx = out_record.0 + 1
  out_record.0 = orx
  out_record.orx = ,
    "    "cluster_name "-"
  IF (cluster_to <> "") THEN DO
    orx = out_record.0 + 1
    out_record.0 = orx
    out_record.orx = ,
      "    PURGE -"
  END
  orx = out_record.0 + 1
  out_record.0 = orx
  out_record.orx = ,
    "    CLUSTER"
  orx = out_record.0 + 1
  out_record.0 = orx
  out_record.orx = ,
    "  SET MAXCC = 0"
  orx = out_record.0 + 1
  out_record.0 = orx
  out_record.orx = ,
    "/*"
  orx = out_record.0 + 1
  out_record.0 = orx
  out_record.orx = ,
    "//SYSPRINT  DD SYSOUT=*"
  orx = out_record.0 + 1
  out_record.0 = orx
  out_record.orx = ,
    "//*" COPIES("-",67)
  orx = out_record.0 + 1
  out_record.0 = orx
  out_record.orx = ,
    "//DEFINE  EXEC PGM=IDCAMS"
  orx = out_record.0 + 1
  out_record.0 = orx
  out_record.orx = ,
    "//SYSIN     DD *"
  orx = out_record.0 + 1
  out_record.0 = orx
  out_record.orx = ,
    "  DEFINE -"
  orx = out_record.0 + 1
  out_record.0 = orx
  out_record.orx = ,
    "    CLUSTER( -"
  orx = out_record.0 + 1
  out_record.0 = orx
  out_record.orx = ,
    "      NAME("cluster_name") -"
  IF (cluster_account <> "") THEN DO
    orx = out_record.0 + 1
    out_record.0 = orx
    out_record.orx = ,
      "     " cluster_account "-"
  END
  IF (cluster_bwo <> "") THEN DO
    orx = out_record.0 + 1
    out_record.0 = orx
    out_record.orx = ,
      "     " cluster_bwo "-"
  END
  IF (cluster_dc <> "") THEN DO
    orx = out_record.0 + 1
    out_record.0 = orx
    out_record.orx = ,
      "     " cluster_dc "-"
  END
  IF (cluster_eattr <> "") THEN DO
    orx = out_record.0 + 1
    out_record.0 = orx
    out_record.orx = ,
      "     " cluster_eattr "-"
  END
  IF (cluster_frlog <> "") THEN DO
    orx = out_record.0 + 1
    out_record.0 = orx
    out_record.orx = ,
      "     " cluster_frlog "-"
  END
  IF (cluster_log <> "") THEN DO
    orx = out_record.0 + 1
    out_record.0 = orx
    out_record.orx = ,
      "     " cluster_log "-"
  END
  IF (cluster_logstreamid <> "") THEN DO
    orx = out_record.0 + 1
    out_record.0 = orx
    out_record.orx = ,
      "     " cluster_logstreamid "-"
  END
  IF (cluster_mc <> "") THEN DO
    orx = out_record.0 + 1
    out_record.0 = orx
    out_record.orx = ,
      "     " cluster_mc "-"
  END
  orx = out_record.0 + 1
  out_record.0 = orx
  out_record.orx = ,
    "     " data_organization "-"
  IF (cluster_owner <> "") THEN DO
    orx = out_record.0 + 1
    out_record.0 = orx
    out_record.orx = ,
      "     " cluster_owner "-"
  END
  IF (data_organization <> "LINEAR") THEN DO
    orx = out_record.0 + 1
    out_record.0 = orx
    out_record.orx = ,
        "     " data_rsize "-"
  END
  IF (cluster_sc <> "") THEN DO
    orx = out_record.0 + 1
    out_record.0 = orx
    out_record.orx = ,
      "     " cluster_sc "-"
  END
  IF (data_reuse <> "") THEN DO
    orx = out_record.0 + 1
    out_record.0 = orx
    out_record.orx = ,
      "     " data_reuse "-"
  END
  IF (data_speed <> "") THEN DO
    orx = out_record.0 + 1
    out_record.0 = orx
    out_record.orx = ,
      "     " data_speed "-"
  END
  orx = out_record.0 + 1
  out_record.0 = orx
  out_record.orx = ,
    "     " data_shropts "-"
  IF (cluster_to <> "") THEN DO
    orx = out_record.0 + 1
    out_record.0 = orx
    out_record.orx = ,
      "     " cluster_to "-"
  END
  orx = out_record.0 + 1
  out_record.0 = orx
  out_record.orx = ,
    "    ) -"
  orx = out_record.0 + 1
  out_record.0 = orx
  out_record.orx = ,
    "    DATA( -"
  orx = out_record.0 + 1
  out_record.0 = orx
  out_record.orx = ,
    "      NAME("data_name") -"
  IF (data_bufspace <> "") THEN DO
    orx = out_record.0 + 1
    out_record.0 = orx
    out_record.orx = ,
      "     " data_bufspace "-"
  END
  IF (data_cisize <> "") THEN DO
    orx = out_record.0 + 1
    out_record.0 = orx
    out_record.orx = ,
      "     " data_cisize "-"
  END
  IF (data_erase <> "") THEN DO
    orx = out_record.0 + 1
    out_record.0 = orx
    out_record.orx = ,
      "     " data_erase "-"
  END
  IF (data_excpexit <> "") THEN DO
    orx = out_record.0 + 1
    out_record.0 = orx
    out_record.orx = ,
      "     " data_excpexit "-"
  END
  IF (data_freespc <> "") THEN DO
    orx = out_record.0 + 1
    out_record.0 = orx
    out_record.orx = ,
      "     " data_freespc "-"
  END
  IF (data_keys <> "") THEN DO
    orx = out_record.0 + 1
    out_record.0 = orx
    out_record.orx = ,
      "     " data_keys "-"
  END
  IF (data_space_req <> "") THEN DO
    orx = out_record.0 + 1
    out_record.0 = orx
    out_record.orx = ,
      "     " data_space_req "-"
  END
  IF (data_spanned <> "") THEN DO
    orx = out_record.0 + 1
    out_record.0 = orx
    out_record.orx = ,
      "     " data_spanned "-"
  END
  orx = out_record.0 + 1
  out_record.0 = orx
  out_record.orx = ,
    "      VOLUMES( -"
  tmp_vols = data_volumes
  DO WHILE (tmp_vols <> "")
    PARSE VAR tmp_vols one_vol "," tmp_vols
    orx = out_record.0 + 1
    out_record.0 = orx
    out_record.orx = ,
      "        "one_vol" -"
  END
  orx = out_record.0 + 1
  out_record.0 = orx
  out_record.orx = ,
    "      ) -"
  IF (data_wrtck <> "") THEN DO
    orx = out_record.0 + 1
    out_record.0 = orx
    out_record.orx = ,
      "     " data_wrtck "-"
  END
  IF ((data_organization = "INDEXED") | ,
    (data_organization = "NUMBERED")) THEN DO
    orx = out_record.0 + 1
    out_record.0 = orx
    out_record.orx = ,
      "    ) -"
    orx = out_record.0 + 1
    out_record.0 = orx
    out_record.orx = ,
      "    INDEX( -"
    orx = out_record.0 + 1
    out_record.0 = orx
    out_record.orx = ,
      "      NAME("index_name") -"
    IF (index_cisize <> "") THEN DO
      orx = out_record.0 + 1
      out_record.0 = orx
      out_record.orx = ,
        "     " index_cisize "-"
    END
    IF (index_dc <> "") THEN DO
      orx = out_record.0 + 1
      out_record.0 = orx
      out_record.orx = ,
        "     " index_dc "-"
    END
    IF (index_excpexit <> "") THEN DO
      orx = out_record.0 + 1
      out_record.0 = orx
      out_record.orx = ,
        "     " index_excpexit "-"
    END
    orx = out_record.0 + 1
    out_record.0 = orx
    out_record.orx = ,
      "     " index_space_alc" -"
    orx = out_record.0 + 1
    out_record.0 = orx
    out_record.orx = ,
      "      VOLUMES( -"
    tmp_vols = index_volumes
    DO WHILE (tmp_vols <> "")
      PARSE VAR tmp_vols one_vol "," tmp_vols
      orx = out_record.0 + 1
      out_record.0 = orx
      out_record.orx = ,
        "        "one_vol" -"
    END
    orx = out_record.0 + 1
    out_record.0 = orx
    out_record.orx = ,
      "      ) -"
  END
  orx = out_record.0 + 1
  out_record.0 = orx
  out_record.orx = ,
    "    )"
  orx = out_record.0 + 1
  out_record.0 = orx
  out_record.orx = ,
    "/*"
  orx = out_record.0 + 1
  out_record.0 = orx
  out_record.orx = ,
    "//SYSPRINT  DD SYSOUT=*"
  orx = out_record.0 + 1
  out_record.0 = orx
  out_record.orx = ,
    "//*" COPIES("-",67)
  IF (data_organization = "LINEAR") THEN DO
    orx = out_record.0 + 1
    out_record.0 = orx
    out_record.orx = ,
      "//IMPORT  EXEC PGM=IDCAMS"
    orx = out_record.0 + 1
    out_record.0 = orx
    out_record.orx = ,
      "//SYSIN     DD *"
    orx = out_record.0 + 1
    out_record.0 = orx
    out_record.orx = ,
      "  IMPORT -"
    orx = out_record.0 + 1
    out_record.0 = orx
    out_record.orx = ,
      "    INTOEMPTY -"
    orx = out_record.0 + 1
    out_record.0 = orx
    out_record.orx = ,
      "    INFILE(EXPORTDS) -"
    orx = out_record.0 + 1
    out_record.0 = orx
    out_record.orx = ,
      "    OUTFILE(CLUSTER)"
  END
  ELSE DO
    orx = out_record.0 + 1
    out_record.0 = orx
    out_record.orx = ,
      "//REPRO   EXEC PGM=IDCAMS"
    orx = out_record.0 + 1
    out_record.0 = orx
    out_record.orx = ,
      "//SYSIN     DD *"
    orx = out_record.0 + 1
    out_record.0 = orx
    out_record.orx = ,
      "  REPRO -"
    orx = out_record.0 + 1
    out_record.0 = orx
    out_record.orx = ,
      "    INFILE(EXPORTDS) -"
    orx = out_record.0 + 1
    out_record.0 = orx
    out_record.orx = ,
      "    OUTFILE(CLUSTER) -"
    orx = out_record.0 + 1
    out_record.0 = orx
    out_record.orx = ,
      "    SKIP("cc_skip")"
  END
  orx = out_record.0 + 1
  out_record.0 = orx
  out_record.orx = ,
    "/*"
  orx = out_record.0 + 1
  out_record.0 = orx
  out_record.orx = ,
    "//SYSPRINT  DD SYSOUT=*"
  orx = out_record.0 + 1
  out_record.0 = orx
  out_record.orx = ,
    "//EXPORTDS  DD DISP=SHR,DSN="exportds_dsn
  orx = out_record.0 + 1
  out_record.0 = orx
  out_record.orx = ,
    "//CLUSTER   DD DISP=OLD,DSN="cluster_name
  orx = out_record.0 + 1
  out_record.0 = orx
  out_record.orx = ,
    "//*" COPIES("-",67)
  orx = out_record.0 + 1
  out_record.0 = orx
  out_record.orx = ,
    "//LISTPST EXEC PGM=IDCAMS"
  orx = out_record.0 + 1
  out_record.0 = orx
  out_record.orx = ,
    "//SYSIN     DD *"
  orx = out_record.0 + 1
  out_record.0 = orx
  out_record.orx = ,
    "  LISTCAT -"
  orx = out_record.0 + 1
  out_record.0 = orx
  out_record.orx = ,
    "    ENTRY("cluster_name") -"
  orx = out_record.0 + 1
  out_record.0 = orx
  out_record.orx = ,
    "    ALL"
  orx = out_record.0 + 1
  out_record.0 = orx
  out_record.orx = ,
    "/*"
  orx = out_record.0 + 1
  out_record.0 = orx
  out_record.orx = ,
    "//SYSPRINT  DD SYSOUT=*"
  orx = out_record.0 + 1
  out_record.0 = orx
  out_record.orx = ,
    "//*"
  orx = out_record.0 + 1
  out_record.0 = orx
  out_record.orx = ,
    "//*" COPIES("=",67)
  orx = out_record.0 + 1
  out_record.0 = orx
  out_record.orx = ,
    "//* End of job:" definejb_mbr"."
  orx = out_record.0 + 1
  out_record.0 = orx
  out_record.orx = ,
    "//*" COPIES("=",67)
  orx = out_record.0 + 1
  out_record.0 = orx
  out_record.orx = ,
    "//"
  RETURN return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 Follow control blocks to identify jobname, type, and JES number.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
CtlBlk_JobSpecs:
  ptr2psa = 0
  cvtptr = STORAGE(D2X(ptr2psa + 16),4)
  cvtsmca = STORAGE(D2X(C2D(cvtptr)+197),3)
  smfid = STORAGE(D2X(C2D(cvtsmca)+16),4)
  psatold = STORAGE(21C,4)
  ptr2tiot = STORAGE(D2X(C2D(psatold)+12),4)
  jobspecs_jobname = STORAGE(D2X(C2D(ptr2tiot)),8)
  jobspecs_stepname = STORAGE(D2X(C2D(ptr2tiot)+8),8)
  jobspecs_procname = STORAGE(D2X(C2D(ptr2tiot)+16),8)
  tcbjscbb = STORAGE(D2X(C2D(psatold)+181),3)
  jscbssib = STORAGE(D2X(C2D(tcbjscbb)+316),4)
  jobspecs_ssibjbid = STORAGE(D2X(C2D(jscbssib)+12),8)
  RETURN jobspecs_jobname jobspecs_ssibjbid ,
    jobspecs_stepname jobspecs_procname
