/* rexx */
Rexx_DSN2REX2:
  rexxpgm_version = "01.01"           /* ver lev */

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This code drives Initialization, Process, and Termination routines.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Main_Routine:
  return_code = Initialization_Routine()
  IF (return_code = 0) THEN DO
    return_code = Process_Routine()
  END
  return_code = Termination_Routine()
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================

 Dataset:  DEMO.REXX(DSN2REX2)
 Author:   Kenneth Tomiak
 Contact:  "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
 Syntax:   %DSN2REX2
 Overview: This sample shows how to CONNECT to two subsystems at the
           same time.

-----------------------------------------------------------------------

 History of Modifications
 ------------------------
vv.mm WHEN     Who / What you did ... (Newest change at the top.)
----- -------- --------------------------------------------------------
01.01 20180429 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Stylize using template $putktm:
                  Programming Using The Kenneth Tomiak Method.
               2) Stylize using Edit Macro @putktm:
                  Programming Using The Kenneth Tomiak Method.
----- -------- --------------------------------------------------------
01.00 20080720 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Original code.
----- -------- --------------------------------------------------------

-----------------------------------------------------------------------

STANDARD GLOBAL DISCLAIMER
--------------------------
The author explicitly disavows any claim whatsoever about the
correctness or functionality of this program, and disclaims liability
for anything and everything bad that might happen in connection with,
before, during, or after using it. I have tried to make it work right,
and I am personally pretty confident that it does, but everybody makes
mistakes, so if you use it, you do so at your own risk.

=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine initializes constants and variables.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Initialization_Routine:
  return_code = 0
  PARSE VERSION,
    version_rexx_name,
    version_rexx_version,
    version_rexx_date
  PARSE SOURCE,
    source_host_env,
    source_call_type,
    source_uc_exec_name,
    source_hostdd,
    source_hostdsn,
    source_nf_exec_name,
    source_initial_cmd_env,
    source_asid_name,
    source_char8_user_token,
    source_hostother

  sysvar_sysuid = SYSVAR("SYSUID")
  sysvar_sysenv = SYSVAR("SYSENV")
  sysvar_sysispf = SYSVAR("SYSISPF")
  job_specs = Ctlblk_Jobspecs()
  SAY ""
  SAY COPIES("=",79)
  SAY LEFT("=" jobspecs_jobname ,
    jobspecs_ssibjbid jobspecs_stepname ,
    jobspecs_procname,77) "="
  SAY LEFT("=" source_uc_exec_name rexxpgm_version,77) "="
  SAY LEFT("= executing under" source_host_env,77) "="
  SAY LEFT("= as a" source_call_type,77) "="
  SAY LEFT("= on" DATE() "at" TIME()".",77) "="
  SAY COPIES("=",79)
  SAY ""

  IF (source_host_env <> "TSO") THEN DO
    SAY "Wrong host environment" source_host_env
    return_code = 16
    RETURN return_code
  END

  db2m_add = 0
  DB2M = "DB2M"
  SAY "Creating new DB2 environment for" DB2M
  s_rc = RXSUBCOM("ADD",DB2M,"DSNREXX")
  IF (s_rc <> 0) THEN DO
    SAY "RXSUBCOM ADD failed for" DB2M", rc("s_rc")."
    return_code = 16
    RETURN return_code
  END
  db2m_add = 1

  db2t_add = 0
  DB2T = "DB2T"
  SAY "Creating new DB2 environment for" DB2T
  s_rc = RXSUBCOM("ADD",DB2T,"DSNREXX")
  IF (s_rc <> 0) THEN DO
    SAY "RXSUBCOM ADD failed for" DB2T", rc("s_rc")."
    return_code = 16
    RETURN return_code
  END
  db2t_add = 1

  SAY "SO FAR SO GOOD."

  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine does the processing.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_Routine:
  db2m_connect = 0
  ADDRESS DB2M "CONNECT" DB2M
  IF (s_rc <> 0) THEN DO
    SAY "CONNECT failed for" DB2M", rc("s_rc")."
    CALL Display_Sqlca
    SIGNAL Disc_It
  END
  IF (sqlcode <> 0) THEN DO
    SAY "CONNECT SQL error" DB2M", SQLCODE("sqlcode")."
    CALL Display_Sqlca
    SIGNAL Disc_It
  END
  db2m_connect = 1

  db2t_connect = 0
  ADDRESS DB2T "CONNECT" DB2T
  IF (s_rc <> 0) THEN DO
    SAY "CONNECT failed for" DB2T", rc("s_rc")."
    CALL Display_Sqlca
    SIGNAL Disc_It
  END
  IF (sqlcode <> 0) THEN DO
    SAY "CONNECT SQL error" DB2T", SQLCODE("sqlcode")."
    CALL Display_Sqlca
    SIGNAL Disc_It
  END
  db2t_connect = 1

  SAY "YEAH! READY TO DO SOME PROCESSING!!"

  db2msql = "SELECT * FROM SYSIBM.SYSUSERAUTH"
  ADDRESS DB2M "EXECSQL DECLARE C1 CURSOR FOR S1"
  IF (sqlcode <> 0) THEN DO
    SAY "DECLARE C1 for" DB2M "failed, SQLCODE("sqlcode")."
    CALL Display_Sqlca
    SIGNAL Disc_It
  END
  ADDRESS DB2M "EXECSQL PREPARE S1 INTO:db2msqla FROM :db2msql"
  IF (sqlcode <> 0) THEN DO
    SAY "PREPARE C1 for" DB2M "failed, SQLCODE("sqlcode")."
    CALL Display_Sqlca
    SIGNAL Disc_It
  END
  db2m_c1_open = 0
  ADDRESS DB2M "EXECSQL OPEN C1"
  IF (sqlcode <> 0) THEN DO
    SAY "OPEN C1 for" DB2M "failed, SQLCODE("sqlcode")."
    CALL Display_Sqlca
    SIGNAL Disc_It
  END
  db2m_c1_open = 1
  max_db2m_fetched = 0
  max_db2m_rows = 10

  SAY "DB2M C1 OPENED!!"

Fetch_It:
  ADDRESS DB2M "EXECSQL FETCH C1 USING DESCRIPTOR :db2msqla"
  IF (sqlcode = 100) THEN DO
    SAY "FETCH 100 for" DB2M "already."
    SIGNAL Close_It
  END
  IF (sqlcode <> 0) THEN DO
    SAY "FETCH ERROR for" DB2M "failed, SQLCODE("sqlcode")."
    CALL Display_Sqlca
    SIGNAL Disc_It
  END
  max_db2m_fetched = max_db2m_fetched + 1
  sqln = db2msqla.SQLD
  IF (max_db2m_fetched = 1) THEN DO
    cols = DB2M":"
    DO _ix = 1 TO sqln
      CALL Lookup_Db2m_Types
      cols = cols db2msqla._ix.sqlname"|"sql_type"|"
    END
    SAY cols
  END
  SAY "/*                     " max_db2m_fetched "           */"
  IF (sqln > 1) THEN DO
    cols = DB2M":"
    DO yx = 1 TO sqln
      cols = cols db2msqla.yx.SQLDATA
    END
    SAY cols
    CALL Match_Db2t
  END
  /* */
  IF (max_db2m_fetched < max_db2m_rows) THEN DO /* set max here */
    SIGNAL Fetch_It
  END
Close_It:

Disc_It:
  IF (db2m_c1_open = 1) THEN DO
    ADDRESS DB2M "EXECSQL CLOSE C1"
    IF (sqlcode <> 0) THEN DO
      SAY "CLOSE C1 failed for" DB2M", rc("s_rc")."
      CALL Display_Sqlca
    END
  END
  IF (db2m_connect = 1) THEN DO
    ADDRESS DB2M "DISCONNECT"
    IF (sqlcode <> 0) THEN DO
      SAY "DISCONNECT failed for" DB2M", rc("s_rc")."
      CALL Display_Sqlca
      return_code = 16
      RETURN return_code
    END
  END
  IF (db2t_connect = 1) THEN DO
    ADDRESS DB2T "DISCONNECT"
    IF (sqlcode <> 0) THEN DO
      SAY "DISCONNECT failed for" DB2T", rc("s_rc")."
      CALL Display_Sqlca
      return_code = 16
      RETURN return_code
    END
  END
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine does cleanup before exiting.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Termination_Routine:
Abort_It:
  IF (db2m_add = 1) THEN DO
    s_rc = RXSUBCOM("DELETE",DB2M,"DSNREXX")
    IF (s_rc <> 0) THEN DO
      SAY "RXSUBCOM DELETE failed for" DB2M", rc("s_rc")."
      CALL Display_Sqlca
      return_code = 16
      RETURN return_code
    END
  END
  IF (db2t_add = 1) THEN DO
    s_rc = RXSUBCOM("DELETE",DB2T,"DSNREXX")
    IF (s_rc <> 0) THEN DO
      SAY "RXSUBCOM DELETE failed for" DB2T", rc("s_rc")."
      CALL Display_Sqlca
      return_code = 16
      RETURN return_code
    END
  END
  RETURN return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 Follow control blocks to identify jobname, type, and JES number.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Ctlblk_Jobspecs:
  ptr2psa = 0
  cvtptr = STORAGE(D2X(ptr2psa + 16),4)
  cvtsmca = STORAGE(D2X(C2D(cvtptr)+197),3)
  smfid = STORAGE(D2X(C2D(cvtsmca)+16),4)
  psatold = STORAGE(21C,4)
  ptr2tiot = STORAGE(D2X(C2D(psatold)+12),4)
  jobspecs_jobname = STORAGE(D2X(C2D(ptr2tiot)),8)
  jobspecs_stepname = STORAGE(D2X(C2D(ptr2tiot)+8),8)
  jobspecs_procname = STORAGE(D2X(C2D(ptr2tiot)+16),8)
  tcbjscbb = STORAGE(D2X(C2D(psatold)+181),3)
  jscbssib = STORAGE(D2X(C2D(tcbjscbb)+316),4)
  jobspecs_ssibjbid = STORAGE(D2X(C2D(jscbssib)+12),8)
  RETURN jobspecs_jobname jobspecs_ssibjbid ,
    jobspecs_stepname jobspecs_procname

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 Display the SQL Communicatio Area (SQLCA)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Display_Sqlca:
  SAY TIME() ">>ERROR>>",
    "SQLSTATE="SQLSTATE "SQLcode="SQLcode
  SAY "SQLERRP ="SQLERRP
  SAY "SQLERRM ="SQLERRM
  SAY "SQLERRMC ="SQLERRMC
  SQL_ERRD = ""
  DO I = 1 TO 6
    SQL_ERRD = SQL_ERRD||D2C(SQLERRD.I,4)
  END I
  SQL_WARN = ""
  DO I = 0 TO 10
    SQL_WARN = SQL_WARN||LEFT(SQLWARN.I,1)
  END I
  SQLCA = "SQLCA   "||D2C(136,4)||D2C(SQLCODE,4)||D2C(70,2),
    ||LEFT(SQLERRMC,70)||"DSN     "||,
    SQL_ERRD||SQL_WARN||LEFT(SQLSTATE,5)
/* If the length is beyond DSNTIAR possible values (72-240), reset */
  IF (msg_len < 72) | msg_len > 240 THEN DO
    msg_len = 120  /* Outside scope */
  END
  IF (msg_len = "msg_len") THEN DO
    msg_len = 120  /* Default msg length 120 */
  END
  db2_err_msg = D2C(msg_len * 12,2) || COPIES(" ",msg_len * 12)
  db2_err_len = D2C(msg_len,4)

/* Execute DSNTIAR program with SQLCA/Parm data */
  ADDRESS LINKPGM "DSNTIAR SQLCA db2_err_msg db2_err_len"
  IF (RC < 5) THEN DO
    IF (RC = 4) THEN SAY "DSNTIAR RC=4 Message Area Truncated"
    S_POS = 3           /* Bypass the length bytes in Message Area */
    DO I = 1 TO 12            /* Loop through all lines of message */
      msg_text = SUBSTR(db2_err_msg,S_POS,msg_len) /* Pick out text */
      msg_text = STRIP(msg_text,T," ")   /* Remove trailing blanks */
      IF (msg_text <> " ") THEN SAY msg_text  /* Show msg */
      ELSE ITERATE               /* Some msg lines are blank, skip */
      S_POS = S_POS + msg_len   /* Skip to next "line" of MSG data */
    END I
  END
/* If DSNTIAR fails for any reason, print SQLCA info anyway */
  ELSE DO
    SAY "Call to DSNTIAR - Failed. RC=" RC
    SAY "SQLCODE ="SQLCODE; SAY "SQLERRM ="SQLERRMC
    SAY "SQLERRP ="SQLERRP; SAY "SQLSTATE="SQLSTATE
    msg_text = "SQLERRD ="
    DO I = 1 TO 6
      msg_text = msg_text||SQLERRD.I||","
    END I
    SAY msg_text
    msg_text = "SQLWARN ="
    DO I = 0 TO 10
      msg_text = msg_text||SQLWARN.I||","
    END I
    SAY msg_text
  END
  RETURN

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 Lookup the type we got from DB2M.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Lookup_Db2m_Types:
  SQL_Type = db2msqla._ix.SQLTYPE
  Null = SQL_Type//2
  IF (Null) THEN SQL_Type = SQL_Type - 1
  Len = db2msqla._ix.SQLLEN
  Prcsn = db2msqla._ix.SQLLEN.SQLPRECISION
  Scale = db2msqla._ix.SQLLEN.SQLSCALE
  SELECT
    WHEN (SQL_Type = CHTYPE |,
      SQL_Type = VCHTYPE |,
      SQL_Type = LVCHTYPE |,
      SQL_Type = GRTYP |,
      SQL_Type = VGRTYP |,
      SQL_Type = LVGRTYP ) THEN DO
        SQL_Type = SQLTYPES.SQL_Type"("STRIP(LEN)")"
    END
    WHEN (SQL_Type = FLOTYPE ) THEN DO
      SQL_Type = SQLTYPES.SQL_Type"("STRIP((LEN*4)-11) ")"
    END
    WHEN (SQL_Type = DCTYPE ) THEN DO
      SQL_Type = SQLTYPES.SQL_Type"("STRIP(PRCSN)","STRIP(SCALE)")"
    END
    OTHERWISE DO
      SQL_Type = SQLTYPES.sql_Type
    END
  END
  RETURN

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 Lookup the type we got from DB2T.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Lookup_Db2t_Types:
  SQL_Type = db2tsqla._ix.SQLTYPE
  Null = SQL_Type//2
  IF (Null) THEN SQL_Type = SQL_Type - 1
  Len = db2tsqla._ix.SQLLEN
  Prcsn = db2tsqla._ix.SQLLEN.SQLPRECISION
  Scale = db2tsqla._ix.SQLLEN.SQLSCALE
  SELECT
    WHEN (SQL_Type = CHTYPE |,
      SQL_Type = VCHTYPE |,
      SQL_Type = LVCHTYPE |,
      SQL_Type = GRTYP |,
      SQL_Type = VGRTYP |,
      SQL_Type = LVGRTYP ) THEN DO
        SQL_Type = SQLTYPES.SQL_Type"("STRIP(LEN)")"
    END
    WHEN (SQL_Type = FLOTYPE ) THEN DO
      SQL_Type = SQLTYPES.SQL_Type"("STRIP((LEN*4)-11) ")"
    END
    WHEN (SQL_Type = DCTYPE ) THEN DO
      SQL_Type = SQLTYPES.SQL_Type"("STRIP(PRCSN)","STRIP(SCALE)")"
    END
    OTHERWISE DO
      SQL_Type = SQLTYPES.sql_Type
    END
  END
  RETURN

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 Define the data types I might expect to receive back from DB2.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Init_Types:
  SQLTYPE. = "UNKNOWN TYPE"
  DATYPE   = 384; SQLTYPES.DATYPE   = "DATE"
  TITYPE   = 388; SQLTYPES.TITYPE   = "TIME"
  TSTYPE   = 392; SQLTYPES.TSTYPE   = "TIMESTAMP"
  VCHTYPE  = 448; SQLTYPES.VCHTYPE  = "VARCHAR"
  CHTYPE   = 452; SQLTYPES.CHTYPE   = "CHAR"
  LVCHTYPE = 456; SQLTYPES.LVCHTYPE = "VARCHAR"
  VGRTYP   = 464; SQLTYPES.VGRTYP   = "VARGRAPHIC"
  GRTYP    = 468; SQLTYPES.GRTYP    = "GRAPHIC"
  LVGRTYP  = 472; SQLTYPES.LVGRTYP  = "VARGRAPHIC"
  FLOTYPE  = 480; SQLTYPES.FLOTYPE  = "FLOAT"
  DCTYPE   = 484; SQLTYPES.DCTYPE   = "DECIMAL"
  INTYPE   = 496; SQLTYPES.INTYPE   = "INTEGER"
  SMTYPE   = 500; SQLTYPES.SMTYPE   = "SMALLINT"
  RETURN 0

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 Here we take the GRANTEE from DB2M and look for a match in DB2T.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Match_Db2t:
  SAY "INSERT DB2T match up code here for GRANTEE."
  grantee = db2msqla.2.SQLDATA
  SAY "Using GRANTEE("grantee")."
  db2tsql = "SELECT * FROM SYSIBM.SYSUSERAUTH",
    "WHERE GRANTEE = '"grantee"'"
  ADDRESS DB2T "EXECSQL DECLARE C2 CURSOR FOR S2"
  IF (sqlcode <> 0) THEN DO
    SAY "DECLARE C2 for" DB2T "failed, SQLCODE("sqlcode")."
    CALL Display_Sqlca
    SIGNAL Skip_It
  END
  ADDRESS DB2T "EXECSQL PREPARE S2 INTO:db2tsqla FROM :db2tsql"
  IF (sqlcode <> 0) THEN DO
    SAY "PREPARE C2 for" DB2T "failed, SQLCODE("sqlcode")."
    CALL Display_Sqlca
    SIGNAL Skip_It
  END
  db2t_c2_open = 0
  ADDRESS DB2T "EXECSQL OPEN C2"
  IF (sqlcode <> 0) THEN DO
    SAY "OPEN C2 for" DB2T "failed, SQLCODE("sqlcode")."
    CALL Display_Sqlca
    SIGNAL Skip_It
  END
  db2t_c2_open = 1

  max_db2t_fetched = 0
  max_db2t_rows = 10

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 Fetch the next row.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Fetch_More:
  ADDRESS DB2T "EXECSQL FETCH C2 USING DESCRIPTOR :db2tsqla"
  IF (sqlcode = 100) THEN DO
    SAY "FETCH 100 for" DB2T "already."
    SIGNAL Skip_It
  END
  IF (sqlcode <> 0) THEN DO
    SAY "FETCH ERROR for" DB2T "failed, SQLCODE("sqlcode")."
    CALL Display_Sqlca
    SIGNAL Skip_It
  END
  max_db2t_fetched = max_db2t_fetched + 1
  Sqln = db2tsqla.SQLD
  SAY "/*                     " max_db2t_fetched "           */"
  IF (sqln > 1) THEN DO
    cols = DB2T":"
    DO yx = 1 TO sqln
      cols = cols db2tsqla.yx.SQLDATA
    END
    SAY cols
  END
  /* */
  IF (max_db2t_fetched < max_db2t_rows) THEN DO /* set max here */
    SIGNAL Fetch_More
  END

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 Close the cursor.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Skip_It:
  IF (db2t_c2_open = 1) THEN DO
    ADDRESS DB2T "EXECSQL CLOSE C2"
    IF (sqlcode <> 0) THEN DO
      SAY "CLOSE C2 failed for" DB2T", rc("s_rc")."
      CALL Display_Sqlca
    END
  END
  RETURN

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
End of code.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
