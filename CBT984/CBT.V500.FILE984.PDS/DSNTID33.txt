/* rexx */
Rexx_DSNTID33:
  rexxpgm_version = "01.01"           /* ver lev */

  PARSE ARG all_my_arguments

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This code drives Initialization, Process, and Termination routines.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Main_Routine:
  return_code = Initialization_Routine()
  IF (return_code = 0) THEN DO
    return_code = Process_Routine()
  END
  return_code = Termination_Routine()
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================

 Dataset:  DEMO.REXX(DSNTID33)
 Author:   Kenneth Tomiak
 Contact:  "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
 Syntax:   DSNTID33 |input_dsname output_dsname member_prefix|
 Overview: Copies new members from one PDS to another.

-----------------------------------------------------------------------

 History of Modifications
 ------------------------
vv.mm WHEN     Who / What you did ... (Newest change at the top.)
----- -------- --------------------------------------------------------
01.01 20180429 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Stylize using template $putktm:
                  Programming Using The Kenneth Tomiak Method.
               2) Stylize using Edit Macro @putktm:
                  Programming Using The Kenneth Tomiak Method.
----- -------- --------------------------------------------------------
01.00 20070601 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Original code.
----- -------- --------------------------------------------------------

-----------------------------------------------------------------------

STANDARD GLOBAL DISCLAIMER
--------------------------
The author explicitly disavows any claim whatsoever about the
correctness or functionality of this program, and disclaims liability
for anything and everything bad that might happen in connection with,
before, during, or after using it. I have tried to make it work right,
and I am personally pretty confident that it does, but everybody makes
mistakes, so if you use it, you do so at your own risk.

=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine initializes constants and variables.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Initialization_Routine:
  return_code = 0
  PARSE VERSION,
    version_rexx_name,
    version_rexx_version,
    version_rexx_date
  PARSE SOURCE,
    source_host_env,
    source_call_type,
    source_uc_exec_name,
    source_hostdd,
    source_hostdsn,
    source_nf_exec_name,
    source_initial_cmd_env,
    source_asid_name,
    source_char8_user_token,
    source_hostother

  sysvar_sysuid = SYSVAR("SYSUID")
  sysvar_sysenv = SYSVAR("SYSENV")
  sysvar_sysispf = SYSVAR("SYSISPF")
  job_specs = Ctlblk_Jobspecs()
  SAY ""
  SAY COPIES("=",79)
  SAY LEFT("=" jobspecs_jobname ,
    jobspecs_ssibjbid jobspecs_stepname ,
    jobspecs_procname,77) "="
  SAY LEFT("=" source_uc_exec_name rexxpgm_version,77) "="
  SAY LEFT("= executing under" source_host_env,77) "="
  SAY LEFT("= as a" source_call_type,77) "="
  SAY LEFT("= on" DATE() "at" TIME()".",77) "="
  SAY COPIES("=",79)
  SAY ""
  MYCTR = 0

  IF (source_host_env <> "TSO") THEN DO
    SAY "Wrong host environment" source_host_env
    return_code = 16
  END
  PARSE VAR all_my_arguments,
    input_dsname,
    output_dsname,
    member_name_prefix,
    .
  IF (input_dsname = "") THEN DO
    SAY "Try again."
    SAY "This time pass an input dataset name,"
    SAY "an output dataet name,"
    SAY "and, optionally, a member name prefix."
    RETURN 16
  END
  IF (output_dsname = "") THEN DO
    SAY "Try again."
    SAY "This time pass an output dataset name"
    SAY "and, optionally, a member name prefix."
    RETURN 16
  END
  IF (member_name_prefix = "") THEN DO
    SAY "Defaulting to all the new members."
    member_name_prefix = "*"
  END
  ADDRESS ISPEXEC "CONTROL ERRORS RETURN"

  input_pds_name = STRIP(input_dsname,"B","'")
  ADDRESS ISPEXEC "LMINIT DATAID(DATAIN)",
    "DATASET('"input_pds_name"') ENQ(SHR)"
  my_rc = RC
  IF (my_rc <> 0) THEN DO
    SAY "LMINIT failed on" input_dsname", RC("my_rc")"
    RETURN my_rc
  END
  output_pds_name = STRIP(output_dsname,"B","'")
  ADDRESS ISPEXEC "LMINIT DATAID(DATAOT)",
    "DATASET('"output_pds_name"') ENQ(SHRW)"
  my_rc = RC
  IF (my_rc <> 0) THEN DO
    SAY "LMINIT failed on" output_dsname", RC("my_rc")"
    RETURN my_rc
  END
  input_open = 0
  ADDRESS ISPEXEC "LMOPEN DATAID("DATAIN")",
    "OPTION(INPUT)"
  my_rc = RC
  IF (my_rc > 0) THEN DO
    SAY "LMOPEN failed on" input_dsname", RC("my_rc")"
    RETURN my_rc
  END
  input_open = 1

  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine does the processing.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_Routine:
  PDSMBR = ""
  DO FOREVER
    ADDRESS ISPEXEC "LMMLIST DATAID("DATAIN")",
      "OPTION(LIST) MEMBER(PDSMBR) STATS(YES)",
      "PATTERN("member_name_prefix")"
    my_rc = RC
    IF (my_rc <> 0) THEN LEAVE
    my_member   = STRIP(PDSMBR)
    ADDRESS ISPEXEC,
      "LMCOPY FROMID("DATAIN") FROMMEM("my_member")",
      "TODATAID("DATAOT")"
                          /* Return codes -                        */
                          /*  4 - "From" data set is empty         */
                          /*    - No members match pattern         */
                          /*  8 - "From" member not found          */
                          /* 10 - No data set associated with the  */
                          /*      given data-id                    */
                          /* 12 - Invalid data set organization    */
                          /*    - Data set attribute invalid for   */
                          /*      packed data                      */
                          /*    - Member already exists in "to"    */
                          /*      data set and "REPLACE" was       */
                          /*      not specified                    */
                          /*    - Open ERROR                       */
                          /*    - LOCK specified                   */
                          /* 16 - Truncation ERROR                 */
                          /* 20 - Severe ERROR                     */
    my_rc = RC
    IF (my_rc = 12) THEN DO
      SAY my_member "not replaced"
    END
    ELSE DO
      SAY my_member "copied"
    END
  END
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine does cleanup before exiting.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Termination_Routine:
  IF (input_open = 1) THEN DO
    ADDRESS ISPEXEC "LMMLIST DATAID("DATAIN") OPTION(FREE)"
  END
  IF (input_open = 1) THEN DO
    ADDRESS ISPEXEC "LMCLOSE DATAID("DATAIN")"
  END
  IF (datain <> "DATAIN") THEN DO
    ADDRESS ISPEXEC "LMFREE DATAID("DATAIN")"
  END
  my_rc = RC
  IF (my_rc <> 0) THEN DO
    SAY "LMFREE failed on" input_dsname", RC("my_rc")"
    RETURN my_rc
  END
  IF (dataot <> "DATAOT") THEN DO
    ADDRESS ISPEXEC "LMFREE DATAID("DATAOT")"
  END
  my_rc = RC
  IF (my_rc <> 0) THEN DO
    SAY "LMFREE failed on" output_dsname", RC("my_rc")"
    RETURN my_rc
  END
  RETURN return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 Follow control blocks to identify jobname, type, and JES number.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Ctlblk_Jobspecs:
  ptr2psa = 0
  cvtptr = STORAGE(D2X(ptr2psa + 16),4)
  cvtsmca = STORAGE(D2X(C2D(cvtptr)+197),3)
  smfid = STORAGE(D2X(C2D(cvtsmca)+16),4)
  psatold = STORAGE(21C,4)
  ptr2tiot = STORAGE(D2X(C2D(psatold)+12),4)
  jobspecs_jobname = STORAGE(D2X(C2D(ptr2tiot)),8)
  jobspecs_stepname = STORAGE(D2X(C2D(ptr2tiot)+8),8)
  jobspecs_procname = STORAGE(D2X(C2D(ptr2tiot)+16),8)
  tcbjscbb = STORAGE(D2X(C2D(psatold)+181),3)
  jscbssib = STORAGE(D2X(C2D(tcbjscbb)+316),4)
  jobspecs_ssibjbid = STORAGE(D2X(C2D(jscbssib)+12),8)
  RETURN jobspecs_jobname jobspecs_ssibjbid ,
    jobspecs_stepname jobspecs_procname

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
End of code.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
