rexx_PDSEDIT:  /* We still need rexx in comment if read from SYSPROC */
  rexxpgm_version = "01.06"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

  Dataset:  DB2.CRNRSTNE.REXX(PDSEDIT)
  Author:   KTomiak
  Contact:  "Kenneth Tomiak"<KenTomiak@KTomiak.org>
  Syntax:   PDSEDIT {dsn{(member)} initial_macro}
  Overview: Runs through a member list and invokes EDIT on each
            matching member, with an initial macro.

=======================================================================

  History of Modifications
  ------------------------
VV.MM When     Who       What you did
----- -------- --------- ----------------------------------------------
01.06 20090519 KTomiak   Fiddling to avoid abend if change fails.
----- -------- --------- ----------------------------------------------
01.05 20080917 KTomiak   Fiddling to avoid abend if change fails.
----- -------- --------- ----------------------------------------------
01.04 20080314 KTomiak   Removed say with mbr_ok, which was not used.
----- -------- --------- ----------------------------------------------
01.03 20080314 KTomiak   Fixed return_code in logic.
----- -------- --------- ----------------------------------------------
01.02 20070329 KET2812   Added support to do member pattern,
                         '*' defaults.
----- -------- --------- ----------------------------------------------
01.00 20070322 KET2812   Added support to use an initial macro
----- -------- --------- ----------------------------------------------
01.00 20070320 KET2812   Original code
----- -------- -------- -----------------------------------------------

=======================================================================

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */

  Parse Arg all_my_arguments
  Numeric Digits 12

rexx_Main_PDSEDIT:
  return_code = rexx_Initialize()
  If (return_code = 0) then,
    Do
      return_code = rexx_Process()
    End
  return_code = rexx_Termination()
  Return return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
  In this routine we open any files and intialize any
  constants we might need.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
rexx_Initialize:
  PARSE VERSION,
    rexx_version,
    rexx_level,
    rexx_date
  PARSE SOURCE,
    source_host_env,
    source_call_type,
    source_uc_exec_name,
    source_hostdd,
    source_hostdsn,
    source_nf_exec_name,
    source_initial_cmd_env,
    source_asid_name,
    source_char8_user_token,
    source_hostother
  say ""
  say Copies("=",55)
  say left("=" job_specs,53) "="
  say left("=" source_uc_exec_name rexxpgm_version,53) "="
  say left("= executing under" source_host_env,53) "="
  say left("= as a" source_call_type,53) "="
  say left("= on" date() "at" time()".",53) "="
  say Copies("=",55)
  say ""
  return_code = 0

  If (pos(",",all_my_arguments) = 0) then,
    parse upper var all_my_arguments dsn_member my_macro .
  Else,
    parse upper var all_my_arguments dsn_member "," my_macro .

  dsn_member = Strip(dsn_member,"B","'")
  parse var dsn_member dsname "(" mbrname ")" .
  dsn_ok = SYSDSN("'"dsname"'")
  If (dsn_ok >< "OK") Then,
    Do
      Say "*ERROR*" dsname "=" dsn_ok
      return_code = return_code + 1
    End

  If (mbrname = "") then mbrname = "*"

  anymacro = ""
  If (my_macro >< "") then
    anymacro = "MACRO("my_macro")"
  Else,
    Do
      Say "The point of this is to execute an EDIT macro."
      return_code = return_code + 1
    End

  say "all_my_arguments("all_my_arguments")"
  say "dsn_member("dsn_member")"
  say "dsname("dsname")"
  say "mbrname("mbrname")"
  say anymacro

  sys_sysenv  = SYSVAR("SYSENV")  /* FORE means SETMSG works.        */

  sys_sysispf = SYSVAR("SYSISPF") /* ACTIVE means I can use it.      */
  If (sys_sysispf >< "ACTIVE") Then,
    Do
      Say "You must be using ISPF to use" source_uc_exec_name"."
      return_code = return_code + 1
    End

  ZERRHM = "*"
  ZERRALRM = "YES"

  Address IspExec "LMINIT DATAID(DATAID)",
    "DATASET('"dsname"') ENQ(SHR)"
  ispexec_rc = RC
  IF (ispexec_rc >< 0) THEN ,
    Do
      ZERRSM = "FILE IN USE"
      ZERRLM = "THE FILE" PDSDSN "IS IN USE"
      If (sys_sysenv = "FORE") Then,
        Address IspExec "SETMSG MSG(ISRZ002)"
      Else,
        Say zerrlm
      Return_code = 16
    End

  high_return_code = 0

  Return return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
  In this routine we do our processing.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
rexx_Process:
  Address IspExec "LMOPEN DATAID("DATAID")",
    "OPTION(INPUT)"
  ispexec_rc = RC
  IF (ispexec_rc > 0) THEN ,
    DO
      ZERRSM = "FILE FAILED TO OPEN"
      ZERRLM = "THE FILE" PDSDSN "FAILED TO OPEN RC="ispexec_rc
      If (sys_sysenv = "FORE") Then,
        Address IspExec "SETMSG MSG(ISRZ002)"
      Else,
        Say zerrlm
      Return_code = 16
      Return return_code
    END

  PDSMBR = ""
  return_code = 1
  Do while ispexec_rc = 0
    gnm_rc = get_next_member()
    if (zispfrc > high_return_code) then do
      high_return_code = zispfrc
    end
  End

  Address IspExec "LMMLIST DATAID("DATAID") OPTION(FREE)"
  Address IspExec "LMCLOSE DATAID("DATAID")"
  Address IspExec "LMFREE DATAID("DATAID")"

  return_code = high_return_code
  Return return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
  In this routine we close files and finish up.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
rexx_Termination:
  If (return_code > 0) Then Do
    Say Copies("*",55)
    Say left("* FINAL RC=" return_code,53) "*"
    Say Copies("*",55)
  End
  zispfrc = high_return_code
  Address IspExec "VPUT (ZISPFRC)"
  Return return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
  Place any of your subroutines and procedures below this.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
get_next_member:
  Address IspExec "LMMLIST DATAID("dataid")",
    "OPTION(LIST) MEMBER(PDSMBR) STATS(NO) PATTERN("mbrname")"
  ispexec_rc = RC
  IF (ispexec_rc > 0) Then,
    DO
      Return ispexec_rc
    END
  MEMBR = space(PDSMBR)
  dsn_member = dsname"("membr")"
  Address IspExec,
    "EDIT dataset('"dsn_member"')" anymacro
  isredit_rc = rc
  If (isredit_rc > 4) then,
    Do
      ZERRSM = "EDIT FAILED"
      ZERRLM = zerrsm "RC("isredit_rc")"
      say "SYSENV =" sys_sysenv
      If (sys_sysenv = "FORE") then,
        Address IspExec "SETMSG MSG(ISRZ002)"
      Else,
        say zerrlm
      ispexec_rc = isredit_rc
    End
  Address IspExec "VGET (ZISPFRC)"
  Return zispfrc

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
__DATA__
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
