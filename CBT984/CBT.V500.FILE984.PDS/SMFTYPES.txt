/* rexx */
Rexx_SMFTYPES:
  rexxpgm_version = "01.01"           /* ver lev */

  NUMERIC DIGITS 16 /* Handles Petabyte for following control blocks */

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This code drives Initialization, Process, and Termination routines.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Main_Routine:
  return_code = Initialization_Routine()
  IF (return_code = 0) THEN DO
    return_code = Process_Routine()
  END
  return_code = Termination_Routine()

  RETURN return_code


/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================

 Dataset: KTPM.REXX(SMFTYPES)
 Contact: KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTOMIAK.BIZ>
 Purpose: ...
 Syntax:  %SMFTYPES

-----------------------------------------------------------------------

 History of Modifications
 ------------------------
vv.mm When     Who / What you did ... (Newest date at the top.)
----- -------- --------------------------------------------------------
01.01 20180709 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTOMIAK.BIZ>
               1) Add 00, 02, 03, 04, 05, 20, 32, 34, 35.
----- -------- --------------------------------------------------------
01.00 20180708 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTOMIAK.BIZ>
               1) Original base code.
                  SMF processing routines generated using ASMA90RX.
----- -------- --------------------------------------------------------

-----------------------------------------------------------------------

Use at your own risk
--------------------
The author explicitly disavows any claim whatsoever about the
correctness or functionality of this program, and disclaims liability
for anything and everything bad that might happen in connection with,
before, during, or after using it. I have tried to make it work right,
and I am personally pretty confident that it does, but mistakes
happen.

=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine initializes constants and variables.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Initialization_Routine:
  return_code = 0
  PARSE VERSION ,
    version_rexx_name ,
    version_rexx_level ,
    version_rexx_date

  PARSE SOURCE ,
    source_host_env ,
    source_call_type ,
    source_uc_exec_name ,
    source_hostdd ,
    source_hostdsn ,
    source_nf_exec_name ,
    source_initial_cmd_env ,
    source_asid_name ,
    source_char8_user_token ,
    source_hostother

  job_specs = Retrieve_Job_Step_Info()

  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine does the processing.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_Routine:
  function_rc = Smf_Process_Routine()

  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine does cleanup before exiting.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Termination_Routine:
  SAY ""
  SAY COPIES("=",79)
  SAY LEFT("= RC=" return_code,77) "="
  SAY COPIES("=",79)
  SAY ""

  RETURN return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 Follow control blocks to identify jobname, type, and JES number.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Retrieve_Job_Step_Info:
  ptr2psa = 0
  cvtptr = STORAGE(D2X(ptr2psa + 16),4)
  cvtsmca = STORAGE(D2X(C2D(cvtptr)+197),3)
  smfid = STORAGE(D2X(C2D(cvtsmca)+16),4)
  psatold = STORAGE(21C,4)
  ptr2tiot = STORAGE(D2X(C2D(psatold)+12),4)
  jobspecs_jobname = STORAGE(D2X(C2D(ptr2tiot)),8)
  jobspecs_stepname = STORAGE(D2X(C2D(ptr2tiot)+8),8)
  jobspecs_procname = STORAGE(D2X(C2D(ptr2tiot)+16),8)
  tcbjscbb = STORAGE(D2X(C2D(psatold)+181),3)
  jscbssib = STORAGE(D2X(C2D(tcbjscbb)+316),4)
  jobspecs_ssibjbid = STORAGE(D2X(C2D(jscbssib)+12),8)
  RETURN jobspecs_jobname jobspecs_ssibjbid ,
    jobspecs_stepname jobspecs_procname

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 Process the SMF data 100 records at a time.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Smf_Process_Routine:
  smftype_idx. = 0
  smftype_min. = 32760
  smftype_max. = 0
  smftype_idx = ""

  smfdata_eof = 0
  smfdata_bunch = 0
  smfdata_ctr = 0
  DO WHILE (smfdata_eof = 0)
    ADDRESS MVS "EXECIO 100 DISKR" ,
      "SMFDATA (STEM smfdata.)"
    smfdata_rc = RC
    smfdata_bunch = smfdata_bunch + 1
    DO smf_x = 1 TO smfdata.0
      smfdata_ctr = smfdata_ctr + 1
 /*   ... parse common header and branch ...   */
      smf_record = smfdata.smf_x
      PARSE VAR smfdata.smf_x ,
          =1 SMFHDFLG +1 ,
          =2 SMFHDRTY +1 ,
          =3 SMFHDTME +4 ,
          =7 SMFHDDTE +4 ,
         =11 SMFHDSID +4 ,
        smf_record_data

      usrhdtme = Convert_Binary_Time(SMFHDTME)
      usrhddte = Convert_Packed_Date(SMFHDDTE)
      IF (dechdrty > 3) THEN DO
        IF (datsmfst = "DATSMFST") THEN DO
          datsmfst = usrhddte usrhdtme
        END
        datsmfce = usrhddte usrhdtme
      END

 /*   Rebuild RDW to satisfy MACRO offsets.   */
      dechdlen = LENGTH(smfdata.smf_x) + 4
      hexhdlen = D2C(dechdlen,2)
      smf_record = hexhdlen || D2C(0,2) || smfdata.smf_x
      section_offset = 0
      dechdrty = C2D(SMFHDRTY) + 0
      hexhdrty = C2X(SMFHDRTY)
  /*
      SAY RIGHT(smfdata_bunch,6) RIGHT(smf_x,3) ,
        RIGHT(smfdata_ctr,7) ,
        "type: ("hexhdrty") dec("dechdrty")"
  */
      IF (WORDPOS(dechdrty,smftype_idx) = 0) THEN DO
        smftype_idx = smftype_idx || dechdrty || " "
      END
      tmp = smftype_idx.dechdrty + 1
      smftype_idx.dechdrty = tmp
      smftype_min.dechdrty = MIN(dechdlen,smftype_min.dechdrty)
      smftype_max.dechdrty = MAX(dechdlen,smftype_max.dechdrty)

 /*   ... add what you intend to handle ...   */
      SELECT
        WHEN (dechdrty =   0) THEN rrc = Process_000()
        WHEN (dechdrty =   2) THEN rrc = Process_002()
        WHEN (dechdrty =   3) THEN rrc = Process_003()
        WHEN (dechdrty =   4) THEN rrc = Process_004()
        WHEN (dechdrty =   5) THEN rrc = Process_005()
        WHEN (dechdrty =  20) THEN rrc = Process_020()
        WHEN (dechdrty =  30) THEN rrc = Process_030()
        WHEN (dechdrty =  32) THEN rrc = Process_032()
        WHEN (dechdrty =  34) THEN rrc = Process_034()
        WHEN (dechdrty =  35) THEN rrc = Process_035()
        OTHERWISE DO
          NOP
        END
      END
    END
    smfdata_eof = smfdata_rc
  END
  ADDRESS MVS "EXECIO 0 DISKR" ,
    "SMFDATA (FINIS)"
  SAY
  SAY "Read" smfdata_bunch "bunch(es) for" smfdata_ctr "record(s)."

  SAY CENTER("SUMMARY ACTIVITY REPORT",80)
  SAY "IFASMDP: START DATE-TIME" ifasmfst COPIES(" ",10) ,
    "END DATE-TIME" ifasmfce
  SAY "Data   : START DATE-TIME" datsmfst COPIES(" ",10) ,
    "END DATE-TIME" datsmfce

  bubble_rc = Bubble_Sort_Keyed_Index("smftype_idx", "Ascending")
  SAY "Typ  QUANTITY   Min   Max"
  SAY "=== ========= ===== ====="
  smf_total = 0
  min_total = 32760
  max_total = 0
  DO smf_x = 1 TO WORDS(smftype_idx)
    smftype_one = WORD(smftype_idx,smf_x)
    SAY RIGHT(smftype_one,3,"0") RIGHT(smftype_idx.smftype_one,9) ,
      RIGHT(smftype_min.smftype_one,5) RIGHT(smftype_max.smftype_one,5)
    smf_total = smf_total + smftype_idx.smftype_one
    min_total = MIN(min_total,smftype_min.smftype_one)
    max_total = MAX(max_total,smftype_max.smftype_one)
  END
  SAY "=== ========= ===== ====="
  SAY "All" RIGHT(smf_total,9) ,
    RIGHT(min_total,5) RIGHT(max_total,5)

  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Dual loop thru 'stembase.' and sort by swapping pairs.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Bubble_Sort_Numbered_Stem:
  stembase = ARG(1)
  UPPER stembase
  sort_sequence = ARG(2)
  UPPER sort_sequence

  SELECT
    WHEN (ABBREV("DESCENDING",sort_sequence,1) = 1) THEN DO
      rexx_block = ,
        'count_of_elements = 'stembase'.0;' ,
        'DO i = 1 TO  (count_of_elements - 1);' ,
          'DO j = 1 TO (count_of_elements - 1);' ,
            'j_plus1 = j + 1;' ,
            'IF ('stembase'.j < 'stembase'.j_plus1) THEN DO;' ,
              'temp = 'stembase'.j;' ,
               stembase'.j = 'stembase'.j_plus1;' ,
               stembase'.j_plus1 = temp;' ,
            'END;' ,
          'END j;' ,
        'END i'
    END
    OTHERWISE DO
      rexx_block = ,
        'count_of_elements = 'stembase'.0;' ,
        'DO i = 1 TO  (count_of_elements - 1);' ,
          'DO j = 1 TO (count_of_elements - 1);' ,
            'j_plus1 = j + 1;' ,
            'IF ('stembase'.j > 'stembase'.j_plus1) THEN DO;' ,
              'temp = 'stembase'.j;' ,
               stembase'.j = 'stembase'.j_plus1;' ,
               stembase'.j_plus1 = temp;' ,
            'END;' ,
          'END j;' ,
        'END i'
    END
  END
  INTERPRET rexx_block

  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Turn 'key_index' into a numbered stem and sort it.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Bubble_Sort_Keyed_Index:
  key_index = ARG(1)
  UPPER key_index
  sort_sequence = ARG(2)
  UPPER sort_sequence
  random_stem = "@@@stem_"Random()

  rexx_block = ,
    'IF ('key_index' <> "") THEN DO ;' ,
      random_stem'. = "" ;' ,
      random_stem'.0 = 0 ;' ,
      'DO @sx = 1 TO WORDS('key_index') ;' ,
        'tmp = 'random_stem'.0 + 1 ; ' ,
        random_stem'.0 = tmp ; ' ,
        random_stem'.tmp = WORD('key_index',tmp) ;' ,
      'END ;' ,
    'END ;'
  INTERPRET rexx_block
  rexx_block = ,
    'bubble_rc = Bubble_Sort_Numbered_Stem("'random_stem || ,
      '", sort_sequence)'
  INTERPRET rexx_block
  rexx_block = ,
    key_index' = "" ;' ,
    'DO @sx = 1 TO 'random_stem'.0 ;' ,
      key_index' = 'key_index' || 'random_stem'.@sx || " " ;' ,
    'END ;'
  INTERPRET rexx_block

  RETURN 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Convert 4 byte binary time to displayable format.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Convert_Binary_Time: PROCEDURE
  dechndsc = C2D(ARG(1))
  secs = dechndsc % 100
  hrs  = secs % 3600
  mins = (secs - (hrs * 3600)) % 60
  secs = secs - ((hrs * 3600) + (mins * 60))
  hnsc = dechndsc - ((secs * 60) - ((hrs * 3600) + (mins * 60)))
  sort_time =  RIGHT(hrs,2,"0") || ":" || ,
    RIGHT(mins,2,"0") || ":" || ,
    RIGHT(secs,2,"0") || "." || hnsc

  RETURN sort_time

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Convert 4 byte packed date to displayble format.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Convert_Packed_Date: PROCEDURE
  hexpckdt = C2X(ARG(1))
  decpckcn = SUBSTR(hexpckdt,1,2) * 1900
  decpckyr = SUBSTR(hexpckdt,3,2)
  decpckdy = SUBSTR(hexpckdt,5,3)
  sort_date = DATE('S',decpckyr || decpckdy,'J')

  RETURN sort_date

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_000:
  function_rc = SMFRX000_Parse_Routine()
  SAY "Came across an IPL record at:" smfdata_ctr ,
    usrhddte usrhdtme
  SAY ,
    SMF0SYP ,
    SMF0SYN ,
    SMF0OSL

  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_001:
  SAY "As of 2018-07-10 this is not an IBM record in use."
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
  SAY "Came across IFASMDP start at:" smfdata_ctr ,
    usrhddte usrhdtme
Process_002:
  function_rc = SMFRX002_Parse_Routine()
  IF (ifasmfst = "IFASMFST") THEN DO
    ifasmfst = usrhddte usrhdtme
  END
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
  SAY "Came across IFASMDP cease at:" smfdata_ctr ,
    usrhddte usrhdtme
Process_003:
  function_rc = SMFRX003_Parse_Routine()
  ifasmfce = usrhddte usrhdtme
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_004:
  function_rc = SMFRX004_Parse_Routine()
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_005:
  function_rc = SMFRX005_Parse_Routine()
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_006:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_007:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_008:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_009:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_010:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_011:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_012:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_013:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_014:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_015:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_016:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_017:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_018:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_019:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_020:
  function_rc = SMFRX020_Parse_Routine()
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_021:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_022:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_023:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_024:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_025:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_026:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_027:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_028:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_029:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Sample handler for: Record Type 30 (1E)  Common address space work
 SMF30 is a variably-occurring-section record.
-----------------------------------------------------------------------
   The following rules apply to all subtypes (except subtype 1).
   When examining a type 30 record
   -> A record is the first record if at least one of the following
      fields is non-zero:
   SMF30AON
   SMF30ARN
   SMF30CON
   SMF30DRN
   SMF30OON
   SMF30PON
   SMF30RON
   SMF30TON
   SMF30UON
-----------------------------------------------------------------------
   -> A record is an additional record if the following fields are all
      zero:
   SMF30AON
   SMF30ARN
   SMF30CON
   SMF30DRN
   SMF30OON
   SMF30PON
   SMF30RON
   SMF30TON
   SMF30UON
-----------------------------------------------------------------------
   -> In either a first or additional record: There are more records
      to follow if at least one of the following fields is non-zero:
   SMF30EOS
   SMF30MOS
   SMF30OPM
   SMF30RMS
   SMF30UDS
-----------------------------------------------------------------------
   -> This is the last record if the following fields are all zero:
   SMF30EOS
   SMF30MOS
   SMF30OPM
   SMF30RMS
   SMF30UDS
-----------------------------------------------------------------------

   Sub-DSECTs
   ----------
   Triplet+ Description
   -------- ----------------------------------------------------------
            Common SMF fields and SELF DEFINING SECTION
   -------- ----------------------------------------------------------
   SMF30SOF SMF30PSS SUBSYSTEM SECTION
   SMF30SLN
   SMF30SON
   -------- ----------------------------------------------------------
   SMF30IOF SMF30ID IDENTIFICATION SECTION
   SMF30ILN
   SMF30ION
   -------- ----------------------------------------------------------
   SMF30UOF SMF30URA I/O ACTIVITY SECTION
   SMF30ULN
   SMF30UON
   -------- ----------------------------------------------------------
   SMF30TOF SMF30CMP COMPLETION SECTION
   SMF30TLN
   SMF30TON
   -------- ----------------------------------------------------------
   SMF30COF SMF30CAS PROCESSOR SECTION
   SMF30CLN
   SMF30CON
   -------- ----------------------------------------------------------
   SMF30AOF SMF30ACS ACCOUNTING SECTION
   SMF30ALN
   SMF30AON
   -------- ----------------------------------------------------------
   SMF30ROF SMF30SAP STORAGE AND PAGING SECTION
   SMF30RLN
   SMF30RON
   -------- ----------------------------------------------------------
   SMF30POF SMF30PRF PERFORMANCE SECTION
   SMF30PLN
   SMF30PON
   -------- ----------------------------------------------------------
   SMF30OOF SMF30OPS OPERATOR SECTION
   SMF30OLN
   SMF30OON
   -------- ----------------------------------------------------------
   SMF30EOF SMF30EXP EXECUTE CHANNEL PROGRAM (EXCP) SECTION
   SMF30ELN
   SMF30EON
   SMF30EOR
   SMF30EOS
   -------- ----------------------------------------------------------
   SMF30DRO SMF30DR  APPC/MVS RESOURCE SECTION
   SMF30DRL
   SMF30DRN
   -------- ----------------------------------------------------------
   SMF30ARO SMF30AR  APPC/MVS CUMULATIVE RESOURCE SECTION
   SMF30ARL
   SMF30ARN
   -------- ----------------------------------------------------------
   SMF30OPO SMF30OP  OPENMVS PROCESS SECTION (z/OS UNIX SYSTEM SVCS.)
   SMF30OPL
   SMF30OPN
   SMF30OPM
   -------- ----------------------------------------------------------
   SMF30UDO SMF30UD  USAGE SECTION
   SMF30EDL
   SMF30UDN
   SMF30UDS
   -------- ----------------------------------------------------------
   SMF30RMO SMF30RM  ARM SECTION
   SMF30RML
   SMF30RMN
   SMF30RMS
   -------- ----------------------------------------------------------
   SMF30MOF SMF30MSE MULTISYSTEM ENCLAVE REMOTE SYSTEM DATA SECTION
   SMF30MLN
   SMF30MON
   SMF30MON
   -------- ----------------------------------------------------------
   SMF30CDO SMF30CDS COUNTER DTA SECTION
   SMF30CDL
   SMF30CDN
   -------- ----------------------------------------------------------
   SMF30UOF SMF30USS ZEDC USAGE STATISTICS SECTION
   SMF30USL
   SMF30USN
   -------- ----------------------------------------------------------
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_030:
  function_rc = SMFRX030_Parse_Routine()
  dec30stp = C2D(SMF30STP) + 0
  hex30stp = C2X(SMF30STP)

  /* The ID section is done early in case you want to filter. */
  IF (C2D(SMF30ION) > 0) THEN DO
    DO son_ctr = 1 TO C2D(SMF30ION)
      section_offset = C2D(SMF30IOF)
      function_rc = SMF30ID_Parse_Routine()
    END
  END
  IF (LEFT(SMF30JBN,7) <> "KTOMIAK") THEN DO
    RETURN return_code
  END
  SAY COPIES("-",131)
  SAY "  JOB:" SMF30JBN "STEP:"SMF30STM "PGM="SMF30PGM ,
    "SubType:" dec30stp

  IF (C2D(SMF30SON) > 0) THEN DO
    DO son_ctr = 1 TO C2D(SMF30SON)
      section_offset = C2D(SMF30SOF)
      function_rc = SMF30PSS_Parse_Routine()
    END
  END

  IF (C2D(SMF30UON) > 0) THEN DO
    DO uon_ctr = 1 TO C2D(SMF30UON)
      section_offset = C2D(SMF30UOF)
      function_rc = SMF30URA_Parse_Routine()
    END
  END

  IF (C2D(SMF30TON) > 0) THEN DO
    DO ton_ctr = 1 TO C2D(SMF30TON)
      section_offset = C2D(SMF30TOF)
      function_rc = SMF30CMP_Parse_Routine()
    END
  END

  IF (C2D(SMF30CON) > 0) THEN DO
    DO con_ctr = 1 TO C2D(SMF30CON)
      section_offset = C2D(SMF30COF)
      function_rc = SMF30CAS_Parse_Routine()
    END
  END

  IF (C2D(SMF30AON) > 0) THEN DO
    section_offset = C2D(SMF30AOF)
/*  function_rc = SMF30ACS_Parse_Routine() DSECT poorly written */
    var_offset = section_offset + 1       /* 000000 */
    dec30aln = C2D(SMF30ALN)
    PARSE VAR smf_record ,             /* JOB OR STEP ACCOUNTING FIELD */
      =(var_offset) SMF30ACT +(dec30aln)
    sub_offset = 1
    DO aon_ctr = 1 TO C2D(SMF30AON)
      smf30acs = C2D(SUBSTR(SMF30ACT,sub_offset,1))
      sub_offset = sub_offset + 1
      smf30act.aon_ctr = SUBSTR(SMF30ACT,sub_offset,smf30acs)
      sub_offset = sub_offset + smf30acs
      SAY "  ACCT#" aon_ctr":" smf30act.aon_ctr
    END
  END

  IF (C2D(SMF30RON) > 0) THEN DO
    DO ron_ctr = 1 TO C2D(SMF30RON)
      section_offset = C2D(SMF30ROF)
      function_rc = SMF30SAP_Parse_Routine()
    END
  END

  IF (C2D(SMF30PON) > 0) THEN DO
    DO pon_ctr = 1 TO C2D(SMF30PON)
      section_offset = C2D(SMF30POF)
      function_rc = SMF30PRF_Parse_Routine()
    END
  END

  IF (C2D(SMF30OON) > 0) THEN DO
    DO oon_ctr = 1 TO C2D(SMF30OON)
      section_offset = C2D(SMF30OOF)
      function_rc = SMF30OPS_Parse_Routine()
    END
  END

  IF (C2D(SMF30EON) > 0) THEN DO
    DO eon_ctr = 1 TO C2D(SMF30EON)
      section_offset = C2D(SMF30EOF)
      function_rc = SMF30EXP_Parse_Routine()
    END
  END

  IF (C2D(SMF30DRN) > 0) THEN DO
    DO drn_ctr = 1 TO C2D(SMF30DRN)
      section_offset = C2D(SMF30DRO)
      function_rc = SMF30DR_Parse_Routine()
    END
  END

  IF (C2D(SMF30ARN) > 0) THEN DO
    DO arn_ctr = 1 TO C2D(SMF30ARN)
      section_offset = C2D(SMF30ARO)
      function_rc = SMF30AR_Parse_Routine()
    END
  END

  IF (C2D(SMF30OPN) > 0) THEN DO
    DO opn_ctr = 1 TO C2D(SMF30OPN)
      section_offset = C2D(SMF30OPO)
      function_rc = SMF30OP_Parse_Routine()
    END
  END

  IF (C2D(SMF30RMN) > 0) THEN DO
    DO rmn_ctr = 1 TO C2D(SMF30RMN)
      section_offset = C2D(SMF30RMO)
      function_rc = SMF30RM_Parse_Routine()
    END
  END

  IF (C2D(SMF30UDN) > 0) THEN DO
    DO udn_ctr = 1 TO C2D(SMF30UDN)
      section_offset = C2D(SMF30UDO)
      function_rc = SMF30UD_Parse_Routine()
    END
  END

  IF (C2D(SMF30MNO) > 0) THEN DO
    DO mno_ctr = 1 TO C2D(SMF30MNO)
      section_offset = C2D(SMF30MOF)
      function_rc = SMF30MSE_Parse_Routine()
    END
  END

  IF (C2D(SMF30CDN) > 0) THEN DO
    DO cdn_ctr = 1 TO C2D(SMF30CDN)
      section_offset = C2D(SMF30CDO)
      function_rc = SMF30CDS_Parse_Routine()
    END
  END

  IF (C2D(SMF30USN) > 0) THEN DO
    DO usn_ctr = 1 TO C2D(SMF30USN)
      section_offset = C2D(SMF30USO)
      function_rc = SMF30USS_Parse_Routine()
    END
  END

  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_031:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_032:
  function_rc = SMFRX032_Parse_Routine()
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_033:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_034:
  function_rc = SMFRX034_Parse_Routine()
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_035:
  function_rc = SMFRX035_Parse_Routine()
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_036:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_037:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_038:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_039:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_040:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_041:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_042:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_043:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_044:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_045:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_046:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_047:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_048:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_049:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_050:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_051:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_052:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_053:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_054:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_055:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_056:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_057:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_058:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_059:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_060:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_061:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_062:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_063:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_064:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_065:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_066:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_067:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_068:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_069:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_070:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_071:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_072:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_073:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_074:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_075:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_076:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_077:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_078:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_079:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_080:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_081:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_082:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_083:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_084:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_085:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_086:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_087:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_088:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_089:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_090:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_091:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_092:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_093:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_094:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_095:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_096:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_097:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_098:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_099:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_100:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_101:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_102:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_103:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_104:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_105:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_106:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_107:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_108:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_109:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_110:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_111:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_112:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_113:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_114:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_115:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_116:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_117:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_118:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_119:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_120:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_121:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_122:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_123:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_124:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_125:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_126:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_127:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 Start of specific record type parsing routines.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Parse the DSECT named: SMFRX000.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
SMFRX000_Parse_Routine:

  var_offset = section_offset + 1       /* 000000 */
  PARSE VAR smf_record ,              /* ALIGN TO FULL WORD BOUNDARY */
    =(var_offset) SMFRX000_unnamed_2 +4 .

  var_offset = section_offset + 1       /* 000000 */
  PARSE VAR smf_record ,                            /* RECORD LENGTH */
    =(var_offset) SMF0LEN +2 .

  var_offset = section_offset + 3       /* 000002 */
  PARSE VAR smf_record ,                       /* SEGMENT DESCRIPTOR */
    =(var_offset) SMF0SEG +2 .

  var_offset = section_offset + 5       /* 000004 */
  PARSE VAR smf_record ,                         /* HEADER FLAG BYTE */
    =(var_offset) SMF0FLG +1 .

  var_offset = section_offset + 6       /* 000005 */
  PARSE VAR smf_record ,                            /* RECORD TYPE 0 */
    =(var_offset) SMF0RTY +1 .

  var_offset = section_offset + 7       /* 000006 */
  PARSE VAR smf_record , /* TOD, USING FORMAT FROM TIME MACRO W/BIN. */
    =(var_offset) SMF0TME +4 .

  var_offset = section_offset + 11       /* 00000A */
  PARSE VAR smf_record ,    /* DATE IN PACKED DECIMAL FORM: 00YYDDDF */
    =(var_offset) SMF0DTE +4 .

  var_offset = section_offset + 15       /* 00000E */
  PARSE VAR smf_record ,              /* SYSTEM IDENTIFICATION Y0290 */
    =(var_offset) SMF0SID +4 .

  var_offset = section_offset + 19       /* 000012 */
  PARSE VAR smf_record ,                /* Continuous wait time limt */
    =(var_offset) SMF0JWT +4 .

  var_offset = section_offset + 23       /* 000016 */
  PARSE VAR smf_record , /* This field contains meaningless informat */
    =(var_offset) SMF0BUF +4 .

  var_offset = section_offset + 27       /* 00001A */
  PARSE VAR smf_record , /* VIRTUAL STORAGE SIZE IN K BLOCKS(BINARY) */
    =(var_offset) SMF0VST +4 .

  var_offset = section_offset + 31       /* 00001E */
  PARSE VAR smf_record ,                            /* OPTIONS BYTE: */
    =(var_offset) SMF0OPT +1 .

  var_offset = section_offset + 32       /* 00001F */
  PARSE VAR smf_record , /* REAL STORAGE SIZE IN K BLOCKS(BINARY) XM */
    =(var_offset) SMF0RST +4 .

  var_offset = section_offset + 36       /* 000023 */
  PARSE VAR smf_record ,                             /* Reserved @01 */
    =(var_offset) SMF0RSV +1 .

  var_offset = section_offset + 37       /* 000024 */
  PARSE VAR smf_record ,                     /* MVS Product name @01 */
    =(var_offset) SMF0OSL +8 .

  var_offset = section_offset + 45       /* 00002C */
  PARSE VAR smf_record ,                          /* System name @01 */
    =(var_offset) SMF0SYN +8 .

  var_offset = section_offset + 53       /* 000034 */
  PARSE VAR smf_record ,                         /* Sysplex name @01 */
    =(var_offset) SMF0SYP +8 .

  var_offset = section_offset + 61       /* 00003C */
  PARSE VAR smf_record ,     /* Difference in time between local @P5 */
    =(var_offset) SMF0TZ +4 .

  var_offset = section_offset + 65       /* 000040 */
  PARSE VAR smf_record , /* Started task wait time limit (SMFPRMxx @ */
    =(var_offset) SMF0MSWT +4 .

  var_offset = section_offset + 69       /* 000044 */
  PARSE VAR smf_record , /* TSO wait time limit (SMFPRMxx TWT(hhmm)  */
    =(var_offset) SMF0MTWT +4 .

  var_offset = section_offset + 73       /* 000048 */
  PARSE VAR smf_record , /* The number of megabytes specified by @0A */
    =(var_offset) SMF0TBUF +2 .

  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Parse the DSECT named: SMFRX002.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
SMFRX002_Parse_Routine:

  var_offset = section_offset + 1       /* 000000 */
  PARSE VAR smf_record ,              /* ALIGN TO FULL WORD BOUNDARY */
    =(var_offset) SMFRX002_unnamed_2 +4 .

  var_offset = section_offset + 1       /* 000000 */
  PARSE VAR smf_record ,                            /* RECORD LENGTH */
    =(var_offset) SMF2LEN +2 .

  var_offset = section_offset + 3       /* 000002 */
  PARSE VAR smf_record ,                       /* SEGMENT DESCRIPTOR */
    =(var_offset) SMF2SEG +2 .

  var_offset = section_offset + 5       /* 000004 */
  PARSE VAR smf_record ,                         /* HEADER FLAG BYTE */
    =(var_offset) SMF2FLG +1 .

  var_offset = section_offset + 6       /* 000005 */
  PARSE VAR smf_record ,                            /* RECORD TYPE 2 */
    =(var_offset) SMF2RTY +1 .

  var_offset = section_offset + 7       /* 000006 */
  PARSE VAR smf_record , /* TOD, USING FORMAT FROM TIME MACRO W/BIN. */
    =(var_offset) SMF2TME +4 .

  var_offset = section_offset + 11       /* 00000A */
  PARSE VAR smf_record ,    /* DATE IN PACKED DECIMAL FORM: 00YYDDDF */
    =(var_offset) SMF2DTE +4 .

  var_offset = section_offset + 15       /* 00000E */
  PARSE VAR smf_record ,              /* SYSTEM IDENTIFICATION Y0290 */
    =(var_offset) SMF2SID +4 .

  var_offset = section_offset + 21       /* 000014 */
  PARSE VAR smf_record ,          /* Align on full word boundary @L2 */
    =(var_offset) SMFRX002_unnamed_3 +4 .

  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Parse the DSECT named: SMF2GRP.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
SMF2GRP_Parse_Routine:

  var_offset = section_offset + 1       /* 000000 */
  PARSE VAR smf_record ,                               /* Length @L2 */
    =(var_offset) SMF2GLEN +2 .

  var_offset = section_offset + 3       /* 000002 */
  PARSE VAR smf_record ,                              /* Segment @L2 */
    =(var_offset) SMF2GSEG +2 .

  var_offset = section_offset + 5       /* 000004 */
  PARSE VAR smf_record , /* Flags. Bit 0 reserved. Bit 1 is ON when  */
    =(var_offset) SMF2GFLG +1 .

  var_offset = section_offset + 6       /* 000005 */
  PARSE VAR smf_record ,                      /* Record Type (2) @L2 */
    =(var_offset) SMF2GRTY +1 .

  var_offset = section_offset + 7       /* 000006 */
  PARSE VAR smf_record ,   /* Time (of the last record in group) @L2 */
    =(var_offset) SMF2GTME +4 .

  var_offset = section_offset + 11       /* 00000A */
  PARSE VAR smf_record ,   /* Date (of the last record in group) @L2 */
    =(var_offset) SMF2GDTE +4 .

  var_offset = section_offset + 15       /* 00000E */
  PARSE VAR smf_record ,                     /* System ID (DUMY) @L2 */
    =(var_offset) SMF2GSID +4 .

  var_offset = section_offset + 19       /* 000012 */
  PARSE VAR smf_record ,                         /* Subsystem ID @L2 */
    =(var_offset) SMF2GWID +4 .

  var_offset = section_offset + 23       /* 000016 */
  PARSE VAR smf_record ,                          /* Subtype (1) @L2 */
    =(var_offset) SMF2GSTP +2 .

  var_offset = section_offset + 25       /* 000018 */
  PARSE VAR smf_record ,                    /* Group's system ID @L2 */
    =(var_offset) SMF2GRSID +4 .

  var_offset = section_offset + 29       /* 00001C */
  PARSE VAR smf_record ,                          /* More flags. @L2 */
    =(var_offset) SMF2GFLG2 +1 .

  var_offset = section_offset + 30       /* 00001D */
  PARSE VAR smf_record ,                         /* Group's type @L2 */
    =(var_offset) SMF2GRTYPE +1 .

  var_offset = section_offset + 31       /* 00001E */
  PARSE VAR smf_record ,                      /* Group's subtype @L2 */
    =(var_offset) SMF2GSTYPE +2 .

  var_offset = section_offset + 33       /* 000020 */
  PARSE VAR smf_record ,                   /* Group's start time @L2 */
    =(var_offset) SMF2GFTME +4 .

  var_offset = section_offset + 37       /* 000024 */
  PARSE VAR smf_record ,                   /* Group's start date @L2 */
    =(var_offset) SMF2GFDTE +4 .

  var_offset = section_offset + 41       /* 000028 */
  PARSE VAR smf_record ,                 /* Group's record count @L2 */
    =(var_offset) SMF2GCNT +4 .

  var_offset = section_offset + 45       /* 00002C */
  PARSE VAR smf_record ,                     /* Hash method flag @L2 */
    =(var_offset) SMF2GHASHMETH +1 .

  var_offset = section_offset + 46       /* 00002D */
  PARSE VAR smf_record ,                  /* Signature type flag @L2 */
    =(var_offset) SMF2GSIGTYPE +1 .

  var_offset = section_offset + 47       /* 00002E */
  PARSE VAR smf_record ,                           /* Token name @L2 */
    =(var_offset) SMF2GTOKENNAME +32 .

  var_offset = section_offset + 79       /* 00004E */
  PARSE VAR smf_record ,                         /* Group's type @L2 */
    =(var_offset) SMF2GRTYPX +2 .

  var_offset = section_offset + 81       /* 000050 */
  PARSE VAR smf_record ,                     /* Signature length @L2 */
    =(var_offset) SMF2GSIGLEN +4 .

  var_offset = section_offset + 85       /* 000054 */
  PARSE VAR smf_record ,                            /* Signature @P8 */
    =(var_offset) SMF2GSIG +256 .

  var_offset = section_offset + 597       /* 000254 */
  PARSE VAR smf_record ,          /* Align on full word boundary @L2 */
    =(var_offset) SMF2GRP_unnamed_1 +4 .

  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Parse the DSECT named: SMF2INT.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
SMF2INT_Parse_Routine:

  var_offset = section_offset + 1       /* 000000 */
  PARSE VAR smf_record ,                               /* Length @L2 */
    =(var_offset) SMF2ILEN +2 .

  var_offset = section_offset + 3       /* 000002 */
  PARSE VAR smf_record ,                              /* Segment @L2 */
    =(var_offset) SMF2ISEG +2 .

  var_offset = section_offset + 5       /* 000004 */
  PARSE VAR smf_record , /* Flags. Bit 0 reserved. Bit 1 is ON when  */
    =(var_offset) SMF2IFLG +1 .

  var_offset = section_offset + 6       /* 000005 */
  PARSE VAR smf_record ,                      /* Record Type (2) @L2 */
    =(var_offset) SMF2IRTY +1 .

  var_offset = section_offset + 7       /* 000006 */
  PARSE VAR smf_record ,                      /* Interval's time @L2 */
    =(var_offset) SMF2ITME +4 .

  var_offset = section_offset + 11       /* 00000A */
  PARSE VAR smf_record ,                      /* Interval's date @L2 */
    =(var_offset) SMF2IDTE +4 .

  var_offset = section_offset + 15       /* 00000E */
  PARSE VAR smf_record ,                     /* System ID (DUMY) @L2 */
    =(var_offset) SMF2ISID +4 .

  var_offset = section_offset + 19       /* 000012 */
  PARSE VAR smf_record ,                         /* Subsystem ID @L2 */
    =(var_offset) SMF2IWID +4 .

  var_offset = section_offset + 23       /* 000016 */
  PARSE VAR smf_record ,                          /* Subtype (1) @L2 */
    =(var_offset) SMF2ISTP +2 .

  var_offset = section_offset + 25       /* 000018 */
  PARSE VAR smf_record ,                    /* Group's system ID @L2 */
    =(var_offset) SMF2IRSID +4 .

  var_offset = section_offset + 29       /* 00001C */
  PARSE VAR smf_record ,                 /* Bit Meaning when set @P9 */
    =(var_offset) SMF2IFLG2 +1 .

  var_offset = section_offset + 30       /* 00001D */
  PARSE VAR smf_record ,                      /* Interval's type @L2 */
    =(var_offset) SMF2IRTYPE +1 .

  var_offset = section_offset + 31       /* 00001E */
  PARSE VAR smf_record ,                   /* Interval's subtype @L2 */
    =(var_offset) SMF2ISTYPE +2 .

  var_offset = section_offset + 33       /* 000020 */
  PARSE VAR smf_record ,                  /* First record's time @L2 */
    =(var_offset) SMF2IFTME +4 .

  var_offset = section_offset + 37       /* 000024 */
  PARSE VAR smf_record ,                  /* First record's date @L2 */
    =(var_offset) SMF2IFDTE +4 .

  var_offset = section_offset + 41       /* 000028 */
  PARSE VAR smf_record ,                   /* Last record's time @L2 */
    =(var_offset) SMF2ILTME +4 .

  var_offset = section_offset + 45       /* 00002C */
  PARSE VAR smf_record ,                   /* Last record's date @L2 */
    =(var_offset) SMF2ILDTE +4 .

  var_offset = section_offset + 49       /* 000030 */
  PARSE VAR smf_record ,                 /* Next interval's time @L2 */
    =(var_offset) SMF2INTME +4 .

  var_offset = section_offset + 53       /* 000034 */
  PARSE VAR smf_record ,                 /* Next interval's date @L2 */
    =(var_offset) SMF2INDTE +4 .

  var_offset = section_offset + 57       /* 000038 */
  PARSE VAR smf_record ,              /* Interval's record count @L2 */
    =(var_offset) SMF2ICNT +4 .

  var_offset = section_offset + 61       /* 00003C */
  PARSE VAR smf_record ,                     /* Hash method flag @L2 */
    =(var_offset) SMF2IHASHMETH +1 .

  var_offset = section_offset + 62       /* 00003D */
  PARSE VAR smf_record ,                  /* Signature type flag @L2 */
    =(var_offset) SMF2ISIGTYPE +1 .

  var_offset = section_offset + 63       /* 00003E */
  PARSE VAR smf_record ,                           /* Token name @L2 */
    =(var_offset) SMF2ITOKENNAME +32 .

  var_offset = section_offset + 95       /* 00005E */
  PARSE VAR smf_record ,                          /* Interval's type */
    =(var_offset) SMF2IRTYPX +2 .

  var_offset = section_offset + 97       /* 000060 */
  PARSE VAR smf_record ,                     /* Signature length @L2 */
    =(var_offset) SMF2ISIGLEN +4 .

  var_offset = section_offset + 101       /* 000064 */
  PARSE VAR smf_record ,                            /* Signature @P8 */
    =(var_offset) SMF2ISIG +256 .

  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Parse the DSECT named: SMFRX003.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
SMFRX003_Parse_Routine:

  var_offset = section_offset + 1       /* 000000 */
  PARSE VAR smf_record ,              /* ALIGN TO FULL WORD BOUNDARY */
    =(var_offset) SMFRX003_unnamed_2 +4 .

  var_offset = section_offset + 1       /* 000000 */
  PARSE VAR smf_record ,                            /* RECORD LENGTH */
    =(var_offset) SMF3LEN +2 .

  var_offset = section_offset + 3       /* 000002 */
  PARSE VAR smf_record ,                       /* SEGMENT DESCRIPTOR */
    =(var_offset) SMF3SEG +2 .

  var_offset = section_offset + 5       /* 000004 */
  PARSE VAR smf_record ,                         /* HEADER FLAG BYTE */
    =(var_offset) SMF3FLG +1 .

  var_offset = section_offset + 6       /* 000005 */
  PARSE VAR smf_record ,                            /* RECORD TYPE 3 */
    =(var_offset) SMF3RTY +1 .

  var_offset = section_offset + 7       /* 000006 */
  PARSE VAR smf_record , /* TOD, USING FORMAT FROM TIME MACRO W/BIN. */
    =(var_offset) SMF3TME +4 .

  var_offset = section_offset + 11       /* 00000A */
  PARSE VAR smf_record ,    /* DATE IN PACKED DECIMAL FORM: 00YYDDDF */
    =(var_offset) SMF3DTE +4 .

  var_offset = section_offset + 15       /* 00000E */
  PARSE VAR smf_record ,              /* SYSTEM IDENTIFICATION Y0290 */
    =(var_offset) SMF3SID +4 .

  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Parse the DSECT named: SMFRX004.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
SMFRX004_Parse_Routine:

  var_offset = section_offset + 1       /* 000000 */
  PARSE VAR smf_record ,              /* ALIGN TO FULL WORD BOUNDARY */
    =(var_offset) SMFRX004_unnamed_2 +4 .

  var_offset = section_offset + 1       /* 000000 */
  PARSE VAR smf_record ,                            /* RECORD LENGTH */
    =(var_offset) SMF4LEN +2 .

  var_offset = section_offset + 3       /* 000002 */
  PARSE VAR smf_record ,                       /* SEGMENT DESCRIPTOR */
    =(var_offset) SMF4SEG +2 .

  var_offset = section_offset + 5       /* 000004 */
  PARSE VAR smf_record ,                         /* HEADER FLAG BYTE */
    =(var_offset) SMF4FLG +1 .

  var_offset = section_offset + 6       /* 000005 */
  PARSE VAR smf_record ,                            /* RECORD TYPE 4 */
    =(var_offset) SMF4RTY +1 .

  var_offset = section_offset + 7       /* 000006 */
  PARSE VAR smf_record , /* TOD USING FORMAT FROM TIME MACRO W/BIN.  */
    =(var_offset) SMF4TME +4 .

  var_offset = section_offset + 11       /* 00000A */
  PARSE VAR smf_record ,    /* DATE IN PACKED DECIMAL FORM: OOYYDDDF */
    =(var_offset) SMF4DTE +4 .

  var_offset = section_offset + 15       /* 00000E */
  PARSE VAR smf_record ,              /* SYSTEM IDENTIFICATION Y0290 */
    =(var_offset) SMF4SID +4 .

  var_offset = section_offset + 19       /* 000012 */
  PARSE VAR smf_record ,                                 /* JOB NAME */
    =(var_offset) SMF4JBN +8 .

  var_offset = section_offset + 27       /* 00001A */
  PARSE VAR smf_record ,    /* READER START TIME (IN 100THS SECONDS) */
    =(var_offset) SMF4RST +4 .

  var_offset = section_offset + 31       /* 00001E */
  PARSE VAR smf_record ,                        /* READER START DATE */
    =(var_offset) SMF4RSD +4 .

  var_offset = section_offset + 35       /* 000022 */
  PARSE VAR smf_record ,                /* USER IDENTIFICATION FIELD */
    =(var_offset) SMF4UIF +8 .

  var_offset = section_offset + 43       /* 00002A */
  PARSE VAR smf_record ,                              /* STEP NUMBER */
    =(var_offset) SMF4STN +1 .

  var_offset = section_offset + 44       /* 00002B */
  PARSE VAR smf_record , /* STEP INITIATION TIME (IN 100THS SECONDS) */
    =(var_offset) SMF4SIT +4 .

  var_offset = section_offset + 48       /* 00002F */
  PARSE VAR smf_record , /* STEP INITIATION DATE (PACKED DECIMAL FOR */
    =(var_offset) SMF4STID +4 .

  var_offset = section_offset + 52       /* 000033 */
  PARSE VAR smf_record , /* NUMBER OF CARD IMAGES IN DD DATA OR DD * */
    =(var_offset) SMF4NCI +4 .

  var_offset = section_offset + 56       /* 000037 */
  PARSE VAR smf_record ,             /* STEP COMPLETION CODE @G50FPR */
    =(var_offset) SMF4SCC +2 .

  var_offset = section_offset + 58       /* 000039 */
  PARSE VAR smf_record ,  /* PRIORITY AT WHICH STEP WAS DISPATCHED : */
    =(var_offset) SMF4PRTY +1 .

  var_offset = section_offset + 59       /* 00003A */
  PARSE VAR smf_record ,                             /* PROGRAM NAME */
    =(var_offset) SMF4PGMN +8 .

  var_offset = section_offset + 67       /* 000042 */
  PARSE VAR smf_record ,                                /* STEP NAME */
    =(var_offset) SMF4STMN +8 .

  var_offset = section_offset + 75       /* 00004A */
  PARSE VAR smf_record ,                             /* RESERVED @PV */
    =(var_offset) SMF4RSV5 +2 .

  var_offset = section_offset + 77       /* 00004C */
  PARSE VAR smf_record , /* SYSTEM AREA USED(TOP OF PROVATE AREA) Y0 */
    =(var_offset) SMF4SYST +2 .

  var_offset = section_offset + 79       /* 00004E */
  PARSE VAR smf_record ,   /* STORAGE USED(VIRT OR REAL-SEE SMF4RIN) */
    =(var_offset) SMF4H0ST +2 .
                                      /* (LOW OF PRIVATE AREA) Y0290 */
  SMF4STU = BITAND(SMF4H0ST,SMF4H0ST)

  var_offset = section_offset + 81       /* 000050 */
  PARSE VAR smf_record ,                             /* RESERVED @PV */
    =(var_offset) SMF4RV1 +2 .

  var_offset = section_offset + 83       /* 000052 */
  PARSE VAR smf_record , /* REGION SIZE REQ(PRIVATE AREA 1K UNIT) @P */
    =(var_offset) SMF4RSH0 +4 .
                                                              /* @PV */
  SMF4PRV = BITAND(SMF4RSH0,SMF4RSH0)

  var_offset = section_offset + 87       /* 000056 */
  PARSE VAR smf_record ,                /* STORAGE PROTECT KEY A4079 */
    =(var_offset) SMF4SPK +1 .

  var_offset = section_offset + 88       /* 000057 */
  PARSE VAR smf_record ,               /* STEP TERMINATION INDICATOR */
    =(var_offset) SMF4STI +1 .

  var_offset = section_offset + 89       /* 000058 */
  PARSE VAR smf_record ,                           /* RESERVED A4079 */
    =(var_offset) SMF4RV2 +2 .

  var_offset = section_offset + 91       /* 00005A */
  PARSE VAR smf_record ,            /* DEVICE ALLOC START TIME A4079 */
    =(var_offset) SMF4AST +4 .

  var_offset = section_offset + 95       /* 00005E */
  PARSE VAR smf_record ,         /* PROBLEM PROGRAM START TIME A4079 */
    =(var_offset) SMF4PPST +4 .

  var_offset = section_offset + 99       /* 000062 */
  PARSE VAR smf_record ,                         /* RESERVED @YL026W */
    =(var_offset) SMF4RV3 +1 .

  var_offset = section_offset + 100       /* 000063 */
  PARSE VAR smf_record , /* STEP CPU TIME UNDER SRB(.01 SEC) @YL026W */
    =(var_offset) SMF4SRBT +3 .

  var_offset = section_offset + 103       /* 000066 */
  PARSE VAR smf_record ,                        /* RECORD INDICATORS */
    =(var_offset) SMF4RIN +2 .

  var_offset = section_offset + 105       /* 000068 */
  PARSE VAR smf_record ,               /* OFFSET TO RELOCATE SECTION */
    =(var_offset) SMF4RLCT +2 .

  var_offset = section_offset + 107       /* 00006A */
  PARSE VAR smf_record ,         /* LENGTH OF EXCP PORTION OF RECORD */
    =(var_offset) SMF4LENN +2 .

  var_offset = section_offset + 109       /* 00006C */
  PARSE VAR smf_record ,                             /* DEVICE CLASS */
    =(var_offset) SMF4DEVC +1 .

  var_offset = section_offset + 110       /* 00006D */
  PARSE VAR smf_record ,                                /* UNIT TYPE */
    =(var_offset) SMF4UTYP +1 .

  var_offset = section_offset + 111       /* 00006E */
  PARSE VAR smf_record ,                        /* Device Number @LY */
    =(var_offset) SMF4CUAD +2 .

  var_offset = section_offset + 113       /* 000070 */
  PARSE VAR smf_record , /* COUNT OF EXCP'S ISSUED FOR THE DEVICE AN */
    =(var_offset) SMF4EXCP +4 .

  var_offset = section_offset + 109       /* 00006C */
  PARSE VAR smf_record ,    /* TOTAL LENGTH OF CPU AND ACCT. SECTION */
    =(var_offset) SMF4LNTH +1 .

  var_offset = section_offset + 110       /* 00006D */
  PARSE VAR smf_record ,                            /* RESERVED @LAC */
    =(var_offset) SMF4SETM +3 .

  var_offset = section_offset + 113       /* 000070 */
  PARSE VAR smf_record ,              /* NUMBER OF ACCOUNTING FIELDS */
    =(var_offset) SMF4NAF +1 .

  var_offset = section_offset + 114       /* 000071 */
  PARSE VAR smf_record , /* EXEC STATEMENT ACCOUNTING FIELDS(VARIABL */
    =(var_offset) SMF4ACTF +1 .

  var_offset = section_offset + 114       /* 000071 */
  PARSE VAR smf_record ,                       /* NUMBER OF PAGE-INS */
    =(var_offset) SMF4PGIN +4 .

  var_offset = section_offset + 118       /* 000075 */
  PARSE VAR smf_record ,                      /* NUMBER OF PAGE-OUTS */
    =(var_offset) SMF4PGOT +4 .

  var_offset = section_offset + 122       /* 000079 */
  PARSE VAR smf_record ,                       /* NUM OF SWAPS Y0290 */
    =(var_offset) SMF4NSW +4 .
                                                            /* Y0290 */
  SMF4RGNS = BITAND(SMF4NSW,SMF4NSW)

  var_offset = section_offset + 126       /* 00007D */
  PARSE VAR smf_record ,                   /* PAGES SWAPPED IN Y0290 */
    =(var_offset) SMF4PSI +4 .
                                                            /* Y0290 */
  SMF4SIN = BITAND(SMF4PSI,SMF4PSI)

  var_offset = section_offset + 130       /* 000081 */
  PARSE VAR smf_record ,                  /* PAGES SWAPPED OUT Y0290 */
    =(var_offset) SMF4PSO +4 .
                                                            /* Y0290 */
  SMF4SOUT = BITAND(SMF4PSO,SMF4PSO)

  var_offset = section_offset + 134       /* 000085 */
  PARSE VAR smf_record ,                       /* VAM PAGE INS Y0213 */
    =(var_offset) SMF4VPI +4 .

  var_offset = section_offset + 138       /* 000089 */
  PARSE VAR smf_record ,                      /* VAM PAGE OUTS Y0213 */
    =(var_offset) SMF4VPO +4 .

  var_offset = section_offset + 142       /* 00008D */
  PARSE VAR smf_record ,                /* STEP SERVICE TIME @YM0745 */
    =(var_offset) SMF4SST +4 .

  var_offset = section_offset + 146       /* 000091 */
  PARSE VAR smf_record ,                 /* STEP ACTIVE TIME @YM0745 */
    =(var_offset) SMF4ACT +4 .

  var_offset = section_offset + 150       /* 000095 */
  PARSE VAR smf_record ,       /* Step performance group number: @LZ */
    =(var_offset) SMF4PGNO +2 .

  var_offset = section_offset + 152       /* 000097 */
  PARSE VAR smf_record ,  /* STEP TRANSACTION RESIDENCY TIME @Z40FPP */
    =(var_offset) SMF4TRAN +4 .

  var_offset = section_offset + 156       /* 00009B */
  PARSE VAR smf_record ,                /* CREAD PAGE MISS COUNT @DF */
    =(var_offset) SMF4CPM +4 .

  var_offset = section_offset + 160       /* 00009F */
  PARSE VAR smf_record ,           /* NUMBER OF VIO RECLAIMS @Z40FPP */
    =(var_offset) SMF4RCLM +4 .

  var_offset = section_offset + 164       /* 0000A3 */
  PARSE VAR smf_record ,        /* NUMBER OF COMMON PAGE-INS @Z40FPP */
    =(var_offset) SMF4CPGN +4 .

  var_offset = section_offset + 168       /* 0000A7 */
  PARSE VAR smf_record ,             /* HIPERSPACE PAGE IN COUNT @LB */
    =(var_offset) SMF4HSPI +4 .

  var_offset = section_offset + 172       /* 0000AB */
  PARSE VAR smf_record ,      /* NUMBER OF PAGES STOLEN FROM @Z40FPP */
    =(var_offset) SMF4PGST +4 .

  var_offset = section_offset + 176       /* 0000AF */
  PARSE VAR smf_record ,            /* COUNT OF PAGE SECONDS @Z40FPP */
    =(var_offset) SMF4PSEC +8 .

  var_offset = section_offset + 184       /* 0000B7 */
  PARSE VAR smf_record ,                     /* LPA PAGE INS @G50FPR */
    =(var_offset) SMF4LPAI +4 .

  var_offset = section_offset + 188       /* 0000BB */
  PARSE VAR smf_record ,            /* HIPERSPACE PAGE OUT COUNT @LB */
    =(var_offset) SMF4HSPO +4 .

  var_offset = section_offset + 192       /* 0000BF */
  PARSE VAR smf_record ,                 /* STEP CPU SERVICE @G50FPR */
    =(var_offset) SMF4CPUS +4 .

  var_offset = section_offset + 196       /* 0000C3 */
  PARSE VAR smf_record ,                 /* STEP I/O SERVICE @G50FPR */
    =(var_offset) SMF4IOCS +4 .

  var_offset = section_offset + 200       /* 0000C7 */
  PARSE VAR smf_record ,        /* STEP MAIN STORAGE SERVICE @G50FPR */
    =(var_offset) SMF4MSOS +4 .

  var_offset = section_offset + 204       /* 0000CB */
  PARSE VAR smf_record ,                 /* STEP SRB SERVICE @G50FPR */
    =(var_offset) SMF4SRBS +4 .

  var_offset = section_offset + 208       /* 0000CF */
  PARSE VAR smf_record ,                         /* RESERVED @YA1560 */
    =(var_offset) SMF4RSV1 +8 .

  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Parse the DSECT named: SMFRX005.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
SMFRX005_Parse_Routine:

  var_offset = section_offset + 1       /* 000000 */
  PARSE VAR smf_record ,              /* ALIGN TO FULL WORD BOUNDARY */
    =(var_offset) SMFRX005_unnamed_2 +4 .

  var_offset = section_offset + 1       /* 000000 */
  PARSE VAR smf_record ,                            /* RECORD LENGTH */
    =(var_offset) SMF5LEN +2 .

  var_offset = section_offset + 3       /* 000002 */
  PARSE VAR smf_record ,                       /* SEGMENT DESCRIPTOR */
    =(var_offset) SMF5SEG +2 .

  var_offset = section_offset + 5       /* 000004 */
  PARSE VAR smf_record ,                         /* HEADER FLAG BYTE */
    =(var_offset) SMF5FLG +1 .

  var_offset = section_offset + 6       /* 000005 */
  PARSE VAR smf_record ,                            /* RECORD TYPE 5 */
    =(var_offset) SMF5RTY +1 .

  var_offset = section_offset + 7       /* 000006 */
  PARSE VAR smf_record , /* TOD USING FORMAT FROM TIME MACRO W/BIN.  */
    =(var_offset) SMF5TME +4 .

  var_offset = section_offset + 11       /* 00000A */
  PARSE VAR smf_record , /* DATE, PACKED DEC. FORM : OOYYDDDF(F IS A */
    =(var_offset) SMF5DTE +4 .

  var_offset = section_offset + 15       /* 00000E */
  PARSE VAR smf_record ,              /* SYSTEM IDENTIFICATION Y0290 */
    =(var_offset) SMF5SID +4 .

  var_offset = section_offset + 19       /* 000012 */
  PARSE VAR smf_record ,                                 /* JOB NAME */
    =(var_offset) SMF5JBN +8 .

  var_offset = section_offset + 27       /* 00001A */
  PARSE VAR smf_record , /* READER START TIME FOR JOB (IN 100THS/SEC */
    =(var_offset) SMF5RST +4 .

  var_offset = section_offset + 31       /* 00001E */
  PARSE VAR smf_record ,  /* READER START DATE,PACKED DECIMAL FORMAT */
    =(var_offset) SMF5RSD +4 .

  var_offset = section_offset + 35       /* 000022 */
  PARSE VAR smf_record ,                /* USER IDENTIFICATION FIELD */
    =(var_offset) SMF5UIF +8 .

  var_offset = section_offset + 43       /* 00002A */
  PARSE VAR smf_record ,               /* NUMBER OF STEPS IN THE JOB */
    =(var_offset) SMF5NST +1 .

  var_offset = section_offset + 44       /* 00002B */
  PARSE VAR smf_record ,  /* JOB INITIATION TIME (IN 100THS/SECONDS) */
    =(var_offset) SMF5JIT +4 .

  var_offset = section_offset + 48       /* 00002F */
  PARSE VAR smf_record , /* JOB INITIATION DATE, PACKED DECIMAL FORM */
    =(var_offset) SMF5JID +4 .

  var_offset = section_offset + 52       /* 000033 */
  PARSE VAR smf_record , /* NUMBER OF CARD-IMAGE RECORDS IN DD DATA  */
    =(var_offset) SMF5NCI +4 .

  var_offset = section_offset + 56       /* 000037 */
  PARSE VAR smf_record ,                      /* JOB COMPLETION CODE */
    =(var_offset) SMF5JCC +2 .

  var_offset = section_offset + 58       /* 000039 */
  PARSE VAR smf_record ,                             /* JOB PRIORITY */
    =(var_offset) SMF5JPTY +1 .

  var_offset = section_offset + 59       /* 00003A */
  PARSE VAR smf_record , /* READER STOP TIME FOR JOB (IN 100THS/SECO */
    =(var_offset) SMF5RSTT +4 .

  var_offset = section_offset + 63       /* 00003E */
  PARSE VAR smf_record , /* READER STOP DATE FOR JOB (IN PACKED DEC. */
    =(var_offset) SMF5RSTD +4 .

  var_offset = section_offset + 67       /* 000042 */
  PARSE VAR smf_record ,                /* JOB TERMINATION INDICATOR */
    =(var_offset) SMF5JBTI +1 .

  var_offset = section_offset + 68       /* 000043 */
  PARSE VAR smf_record , /* RESV-FORMERLY SYSOUT CLASSES INDICATOR Y */
    =(var_offset) SMF5SMCI +1 .

  var_offset = section_offset + 69       /* 000044 */
  PARSE VAR smf_record , /* TOTAL TRANSACTION RESIDENCY TIME @ZM0138 */
    =(var_offset) SMF5TRAN +4 .

  var_offset = section_offset + 73       /* 000048 */
  PARSE VAR smf_record ,                                     /* RESV */
    =(var_offset) SMF5CKRE +1 .

  var_offset = section_offset + 74       /* 000049 */
  PARSE VAR smf_record ,                      /* READER DEVICE CLASS */
    =(var_offset) SMF5RDCL +1 .

  var_offset = section_offset + 75       /* 00004A */
  PARSE VAR smf_record ,                         /* READER UNIT TYPE */
    =(var_offset) SMF5RUTY +1 .

  var_offset = section_offset + 76       /* 00004B */
  PARSE VAR smf_record ,                          /* JOB INPUT CLASS */
    =(var_offset) SMF5JICL +1 .

  var_offset = section_offset + 77       /* 00004C */
  PARSE VAR smf_record ,                /* STORAGE PROTECT KEY A4079 */
    =(var_offset) SMF5SPK +1 .

  var_offset = section_offset + 78       /* 00004D */
  PARSE VAR smf_record ,  /* JOB CPU TIME UNDER SRB(.01 SEC) @YL026W */
    =(var_offset) SMF5SRBT +3 .

  var_offset = section_offset + 81       /* 000050 */
  PARSE VAR smf_record ,   /* TOTAL JOB SERVICE(SERVICE UNITS) Y0213 */
    =(var_offset) SMF5TJS +4 .

  var_offset = section_offset + 85       /* 000054 */
  PARSE VAR smf_record , /* TOTAL TRANSACTION ACTIVE TIME FOR JOB Y0 */
    =(var_offset) SMF5TTAT +4 .

  var_offset = section_offset + 89       /* 000058 */
  PARSE VAR smf_record ,                         /* RESERVED @YL026W */
    =(var_offset) SMF5RV2 +4 .

  var_offset = section_offset + 93       /* 00005C */
  PARSE VAR smf_record ,             /* Performance group number @LZ */
    =(var_offset) SMF5PGNO +2 .

  var_offset = section_offset + 95       /* 00005E */
  PARSE VAR smf_record ,                         /* RESERVED @YL026W */
    =(var_offset) SMF5RV3 +2 .

  var_offset = section_offset + 97       /* 000060 */
  PARSE VAR smf_record , /* TOTAL LENGTH OF ACCT SECT OF RECORD @G50 */
    =(var_offset) SMF5TLEN +1 .

  var_offset = section_offset + 98       /* 000061 */
  PARSE VAR smf_record ,                        /* PROGRAMMER'S NAME */
    =(var_offset) SMF5PRGN +20 .

  var_offset = section_offset + 118       /* 000075 */
  PARSE VAR smf_record ,                             /* RESERVED @LA */
    =(var_offset) SMF5JCPU +3 .

  var_offset = section_offset + 121       /* 000078 */
  PARSE VAR smf_record ,              /* NUMBER OF ACCOUNTING FIELDS */
    =(var_offset) SMF5ACTF +1 .

  var_offset = section_offset + 122       /* 000079 */
  PARSE VAR smf_record , /* JOB STATEMENT ACCOUNTING FIELDS(VARIABLE */
    =(var_offset) SMF5JSAF +1 .

  var_offset = section_offset + 122       /* 000079 */
  PARSE VAR smf_record ,                  /* JOB CPU SERVICE @G50FPR */
    =(var_offset) SMF5CPUS +4 .

  var_offset = section_offset + 126       /* 00007D */
  PARSE VAR smf_record ,                  /* JOB I/O SERVICE @G50FPR */
    =(var_offset) SMF5IOCS +4 .

  var_offset = section_offset + 130       /* 000081 */
  PARSE VAR smf_record ,         /* JOB MAIN STORAGE SERVICE @G50FPR */
    =(var_offset) SMF5MSOS +4 .

  var_offset = section_offset + 134       /* 000085 */
  PARSE VAR smf_record ,                  /* JOB SRB SERVICE @G50FPR */
    =(var_offset) SMF5SRBS +4 .

  var_offset = section_offset + 138       /* 000089 */
  PARSE VAR smf_record ,                         /* RESERVED @YA1560 */
    =(var_offset) SMF5RSV1 +8 .

  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Parse the DSECT named: SMFRX020.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
SMFRX020_Parse_Routine:

  var_offset = section_offset + 1       /* 000000 */
  PARSE VAR smf_record ,              /* ALIGN TO FULL WORD BOUNDARY */
    =(var_offset) SMFRX020_unnamed_2 +4 .

  var_offset = section_offset + 1       /* 000000 */
  PARSE VAR smf_record ,                            /* RECORD LENGTH */
    =(var_offset) SMF20LEN +2 .

  var_offset = section_offset + 3       /* 000002 */
  PARSE VAR smf_record ,                       /* SEGMENT DESCRIPTOR */
    =(var_offset) SMF20SEG +2 .

  var_offset = section_offset + 5       /* 000004 */
  PARSE VAR smf_record ,                         /* HEADER FLAG BYTE */
    =(var_offset) SMF20FLG +1 .

  var_offset = section_offset + 6       /* 000005 */
  PARSE VAR smf_record ,                           /* RECORD TYPE 20 */
    =(var_offset) SMF20RTY +1 .

  var_offset = section_offset + 7       /* 000006 */
  PARSE VAR smf_record ,      /* TOD, USING TIME MACRO W/BIN. INTVL. */
    =(var_offset) SMF20TME +4 .

  var_offset = section_offset + 11       /* 00000A */
  PARSE VAR smf_record ,          /* DATE, PACKED/DEC FORM; 00YYDDDF */
    =(var_offset) SMF20DTE +4 .

  var_offset = section_offset + 15       /* 00000E */
  PARSE VAR smf_record ,                          /* SYSTEM ID Y0290 */
    =(var_offset) SMF20SID +4 .

  var_offset = section_offset + 19       /* 000012 */
  PARSE VAR smf_record ,                                 /* JOB NAME */
    =(var_offset) SMF20JBN +8 .

  var_offset = section_offset + 27       /* 00001A */
  PARSE VAR smf_record ,                        /* READER START TIME */
    =(var_offset) SMF20RST +4 .

  var_offset = section_offset + 31       /* 00001E */
  PARSE VAR smf_record , /* READER START DATE, PK/DEC FORM: 00YYDDDF */
    =(var_offset) SMF20RSD +4 .

  var_offset = section_offset + 35       /* 000022 */
  PARSE VAR smf_record ,                                   /* USERID */
    =(var_offset) SMF20UID +8 .

  var_offset = section_offset + 43       /* 00002A */
  PARSE VAR smf_record ,                                  /* @G32FPR */
    =(var_offset) SMF20RIN +2 .

  var_offset = section_offset + 43       /* 00002A */
  PARSE VAR smf_record ,       /* OFFSET TO RELOCATE SECTION @G32FPR */
    =(var_offset) SMF20RLO +2 .

  var_offset = section_offset + 45       /* 00002C */
  PARSE VAR smf_record ,                         /* PROGRAMMERS NAME */
    =(var_offset) SMF20PGM +20 .

  var_offset = section_offset + 65       /* 000040 */
  PARSE VAR smf_record ,                    /* NO. ACCOUNTING FIELDS */
    =(var_offset) SMF20NAF +1 .

  var_offset = section_offset + 66       /* 000041 */
  PARSE VAR smf_record ,         /* SIZE OF RELOCATABLE AREA @G32FPR */
    =(var_offset) SMF20RLS +2 .

  var_offset = section_offset + 68       /* 000043 */
  PARSE VAR smf_record ,                    /* RACF GROUP ID @G32FPR */
    =(var_offset) SMF20GRP +8 .

  var_offset = section_offset + 76       /* 00004B */
  PARSE VAR smf_record ,                     /* RACF USER ID @G32FPR */
    =(var_offset) SMF20RUD +8 .

  var_offset = section_offset + 84       /* 000053 */
  PARSE VAR smf_record ,                 /* RACF TERMINAL ID @G32FPR */
    =(var_offset) SMF20TID +8 .

  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Parse the DSECT named: SMFRX030.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
SMFRX030_Parse_Routine:
  function_rc = SMFRCD30_Parse_Routine()

  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Parse the DSECT named: SMFRCD30.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
SMFRCD30_Parse_Routine:

  var_offset = section_offset + 1       /* 000000 */
  PARSE VAR smf_record ,                                  /* @G742PJ */
    =(var_offset) SMFRC030_unnamed_1 +8 .

  var_offset = section_offset + 1       /* 000000 */
  PARSE VAR smf_record ,                   /* Length of standard and */
    =(var_offset) SMF30RPS +192 .

  var_offset = section_offset + 1       /* 000000 */
  PARSE VAR smf_record ,                /* RECORD HEADER SECTION @02 */
    =(var_offset) SMF30RHD +24 .

  var_offset = section_offset + 1       /* 000000 */
  PARSE VAR smf_record ,                    /* RECORD LENGTH @G742PJ */
    =(var_offset) SMF30LEN +2 .

  var_offset = section_offset + 3       /* 000002 */
  PARSE VAR smf_record ,               /* SEGMENT DESCRIPTOR @G742PJ */
    =(var_offset) SMF30SEG +2 .

  var_offset = section_offset + 5       /* 000004 */
  PARSE VAR smf_record ,               /* HEADER FLAG BYTE - @G742PJ */
    =(var_offset) SMF30FLG +1 .

  var_offset = section_offset + 6       /* 000005 */
  PARSE VAR smf_record ,                   /* RECORD TYPE 30 @G742PJ */
    =(var_offset) SMF30RTY +1 .

  var_offset = section_offset + 7       /* 000006 */
  PARSE VAR smf_record ,                    /* TIME RECORD WAS MOVED */
    =(var_offset) SMF30TME +4 .

  var_offset = section_offset + 11       /* 00000A */
  PARSE VAR smf_record ,                     /* DATE THAT THE RECORD */
    =(var_offset) SMF30DTE +4 .

  var_offset = section_offset + 15       /* 00000E */
  PARSE VAR smf_record ,            /* SYSTEM IDENTIFICATION @G742PJ */
    =(var_offset) SMF30SID +4 .

  var_offset = section_offset + 19       /* 000012 */
  PARSE VAR smf_record ,    /* OUCBSUBN SUBSYSTEM IDENTIFIER @G743PJ */
    =(var_offset) SMF30WID +4 .

  var_offset = section_offset + 23       /* 000016 */
  PARSE VAR smf_record ,                   /* RECORD SUBTYPE @G860P2 */
    =(var_offset) SMF30STP +2 .

  var_offset = section_offset + 25       /* 000018 */
  PARSE VAR smf_record ,          /* Length of self defining hdr @0S */
    =(var_offset) SMF30SDS +168 .

  var_offset = section_offset + 25       /* 000018 */
  PARSE VAR smf_record ,              /* OFFSET TO SUBSYSTEM SEGTION */
    =(var_offset) SMF30SOF +4 .

  var_offset = section_offset + 29       /* 00001C */
  PARSE VAR smf_record ,              /* LENGTH OF SUBSYSTEM SECTION */
    =(var_offset) SMF30SLN +2 .

  var_offset = section_offset + 31       /* 00001E */
  PARSE VAR smf_record ,             /* NUMBER OF SUBSYSTEM SECTIONS */
    =(var_offset) SMF30SON +2 .

  var_offset = section_offset + 33       /* 000020 */
  PARSE VAR smf_record ,                 /* OFFSET TO IDENTIFICATION */
    =(var_offset) SMF30IOF +4 .

  var_offset = section_offset + 37       /* 000024 */
  PARSE VAR smf_record ,                 /* LENGTH OF IDENTIFICATION */
    =(var_offset) SMF30ILN +2 .

  var_offset = section_offset + 39       /* 000026 */
  PARSE VAR smf_record ,                 /* NUMBER OF IDENTIFICATION */
    =(var_offset) SMF30ION +2 .

  var_offset = section_offset + 41       /* 000028 */
  PARSE VAR smf_record ,           /* OFFSET TO I/O ACTIVITY SECTION */
    =(var_offset) SMF30UOF +4 .

  var_offset = section_offset + 45       /* 00002C */
  PARSE VAR smf_record ,           /* LENGTH OF I/O ACTIVITY SECTION */
    =(var_offset) SMF30ULN +2 .

  var_offset = section_offset + 47       /* 00002E */
  PARSE VAR smf_record ,          /* NUMBER OF I/O ACTIVITY SECTIONS */
    =(var_offset) SMF30UON +2 .

  var_offset = section_offset + 49       /* 000030 */
  PARSE VAR smf_record ,             /* OFFSET TO COMPLETION SECTION */
    =(var_offset) SMF30TOF +4 .

  var_offset = section_offset + 53       /* 000034 */
  PARSE VAR smf_record ,             /* LENGTH OF COMPLETION SECTION */
    =(var_offset) SMF30TLN +2 .

  var_offset = section_offset + 55       /* 000036 */
  PARSE VAR smf_record ,            /* NUMBER OF COMPLETION SECTIONS */
    =(var_offset) SMF30TON +2 .

  var_offset = section_offset + 57       /* 000038 */
  PARSE VAR smf_record ,              /* OFFSET TO PROCESSOR SECTION */
    =(var_offset) SMF30COF +4 .

  var_offset = section_offset + 61       /* 00003C */
  PARSE VAR smf_record ,              /* LENGTH OF PROCESSOR SECTION */
    =(var_offset) SMF30CLN +2 .

  var_offset = section_offset + 63       /* 00003E */
  PARSE VAR smf_record ,             /* NUMBER OF PROCESSOR SECTIONS */
    =(var_offset) SMF30CON +2 .

  var_offset = section_offset + 65       /* 000040 */
  PARSE VAR smf_record ,             /* OFFSET TO ACCOUNTING SECTION */
    =(var_offset) SMF30AOF +4 .

  var_offset = section_offset + 69       /* 000044 */
  PARSE VAR smf_record ,             /* LENGTH OF ACCOUNTING SECTION */
    =(var_offset) SMF30ALN +2 .

  var_offset = section_offset + 71       /* 000046 */
  PARSE VAR smf_record ,            /* NUMBER OF ACCOUNTING SECTIONS */
    =(var_offset) SMF30AON +2 .

  var_offset = section_offset + 73       /* 000048 */
  PARSE VAR smf_record ,                /* OFFSET TO STORAGE SECTION */
    =(var_offset) SMF30ROF +4 .

  var_offset = section_offset + 77       /* 00004C */
  PARSE VAR smf_record ,                /* LENGTH OF STORAGE SECTION */
    =(var_offset) SMF30RLN +2 .

  var_offset = section_offset + 79       /* 00004E */
  PARSE VAR smf_record ,               /* NUMBER OF STORAGE SECTIONS */
    =(var_offset) SMF30RON +2 .

  var_offset = section_offset + 81       /* 000050 */
  PARSE VAR smf_record ,            /* OFFSET TO PERFORMANCE SECTION */
    =(var_offset) SMF30POF +4 .

  var_offset = section_offset + 85       /* 000054 */
  PARSE VAR smf_record ,           /* LENGTH OF PERFORMANCE SECTIONS */
    =(var_offset) SMF30PLN +2 .

  var_offset = section_offset + 87       /* 000056 */
  PARSE VAR smf_record ,           /* NUMBER OF PERFORMANCE SECTIONS */
    =(var_offset) SMF30PON +2 .

  var_offset = section_offset + 89       /* 000058 */
  PARSE VAR smf_record ,               /* OFFSET TO OPERATOR SECTION */
    =(var_offset) SMF30OOF +4 .

  var_offset = section_offset + 93       /* 00005C */
  PARSE VAR smf_record ,               /* LENGTH OF OPERATOR SECTION */
    =(var_offset) SMF30OLN +2 .

  var_offset = section_offset + 95       /* 00005E */
  PARSE VAR smf_record ,              /* NUMBER OF OPERATOR SECTIONS */
    =(var_offset) SMF30OON +2 .

  var_offset = section_offset + 97       /* 000060 */
  PARSE VAR smf_record ,                   /* OFFSET TO EXCP SECTION */
    =(var_offset) SMF30EOF +4 .

  var_offset = section_offset + 101       /* 000064 */
  PARSE VAR smf_record ,          /* LENGTH OF EXCP SECTIONS IN THIS */
    =(var_offset) SMF30ELN +2 .

  var_offset = section_offset + 103       /* 000066 */
  PARSE VAR smf_record ,          /* NUMBER OF EXCP SECTIONS IN THIS */
    =(var_offset) SMF30EON +2 .

  var_offset = section_offset + 105       /* 000068 */
  PARSE VAR smf_record ,               /* NUMBER OF EXCP SEGMENTS IN */
    =(var_offset) SMF30EOR +2 .

  var_offset = section_offset + 107       /* 00006A */
  PARSE VAR smf_record ,                             /* RESERVED @01 */
    =(var_offset) SMF30RVD +2 .

  var_offset = section_offset + 109       /* 00006C */
  PARSE VAR smf_record ,                  /* NUMBER OF EXCP SECTIONS */
    =(var_offset) SMF30EOS +4 .

  var_offset = section_offset + 113       /* 000070 */
  PARSE VAR smf_record ,                       /* Offset of APPC/MVS */
    =(var_offset) SMF30DRO +4 .

  var_offset = section_offset + 117       /* 000074 */
  PARSE VAR smf_record ,                       /* Length of APPC/MVS */
    =(var_offset) SMF30DRL +2 .

  var_offset = section_offset + 119       /* 000076 */
  PARSE VAR smf_record ,                       /* Number of APPC/MVS */
    =(var_offset) SMF30DRN +2 .

  var_offset = section_offset + 121       /* 000078 */
  PARSE VAR smf_record ,            /* Offset of APPC/MVS Cumulative */
    =(var_offset) SMF30ARO +4 .

  var_offset = section_offset + 125       /* 00007C */
  PARSE VAR smf_record ,            /* Length of APPC/MVS Cumulative */
    =(var_offset) SMF30ARL +2 .

  var_offset = section_offset + 127       /* 00007E */
  PARSE VAR smf_record ,            /* Number of APPC/MVS Cumulative */
    =(var_offset) SMF30ARN +2 .

  var_offset = section_offset + 129       /* 000080 */
  PARSE VAR smf_record ,                /* Offset of OpenMVS Process */
    =(var_offset) SMF30OPO +4 .

  var_offset = section_offset + 133       /* 000084 */
  PARSE VAR smf_record ,                /* Length of OpenMVS Process */
    =(var_offset) SMF30OPL +2 .

  var_offset = section_offset + 135       /* 000086 */
  PARSE VAR smf_record ,                /* Number of OpenMVS Process */
    =(var_offset) SMF30OPN +2 .

  var_offset = section_offset + 137       /* 000088 */
  PARSE VAR smf_record ,                /* Number of OpenMVS Process */
    =(var_offset) SMF30OPM +4 .

  var_offset = section_offset + 141       /* 00008C */
  PARSE VAR smf_record ,             /* Offset of Usage Sections @06 */
    =(var_offset) SMF30UDO +4 .

  var_offset = section_offset + 145       /* 000090 */
  PARSE VAR smf_record ,              /* Length of Usage Section @06 */
    =(var_offset) SMF30UDL +2 .

  var_offset = section_offset + 147       /* 000092 */
  PARSE VAR smf_record ,          /* Number of Usage Sections in @06 */
    =(var_offset) SMF30UDN +2 .

  var_offset = section_offset + 149       /* 000094 */
  PARSE VAR smf_record ,          /* Number of Usage Sections in @06 */
    =(var_offset) SMF30UDS +4 .

  var_offset = section_offset + 153       /* 000098 */
  PARSE VAR smf_record ,              /* Offset of first ARM Section */
    =(var_offset) SMF30RMO +4 .

  var_offset = section_offset + 157       /* 00009C */
  PARSE VAR smf_record ,               /* Length of each ARM Section */
    =(var_offset) SMF30RML +2 .

  var_offset = section_offset + 159       /* 00009E */
  PARSE VAR smf_record ,                /* Number of ARM sections on */
    =(var_offset) SMF30RMN +2 .

  var_offset = section_offset + 161       /* 0000A0 */
  PARSE VAR smf_record ,                /* Number of ARM sections on */
    =(var_offset) SMF30RMS +4 .

  var_offset = section_offset + 165       /* 0000A4 */
  PARSE VAR smf_record ,            /* Offset to MultiSystem Enclave */
    =(var_offset) SMF30MOF +4 .

  var_offset = section_offset + 169       /* 0000A8 */
  PARSE VAR smf_record ,            /* Length of MultiSystem Enclave */
    =(var_offset) SMF30MLN +2 .

  var_offset = section_offset + 171       /* 0000AA */
  PARSE VAR smf_record ,            /* Number of MultiSystem Enclave */
    =(var_offset) SMF30MNO +2 .

  var_offset = section_offset + 173       /* 0000AC */
  PARSE VAR smf_record ,            /* Number of MultiSystem Enclave */
    =(var_offset) SMF30MOS +4 .

  var_offset = section_offset + 177       /* 0000B0 */
  PARSE VAR smf_record ,       /* Offset to Counter Data Section @LZ */
    =(var_offset) SMF30CDO +4 .

  var_offset = section_offset + 181       /* 0000B4 */
  PARSE VAR smf_record ,       /* Length of Counter Data Section @LZ */
    =(var_offset) SMF30CDL +2 .

  var_offset = section_offset + 183       /* 0000B6 */
  PARSE VAR smf_record ,      /* Number of Counter Data Sections @LZ */
    =(var_offset) SMF30CDN +2 .

  var_offset = section_offset + 185       /* 0000B8 */
  PARSE VAR smf_record ,          /* Offset to zEDC usage statistics */
    =(var_offset) SMF30USO +4 .

  var_offset = section_offset + 189       /* 0000BC */
  PARSE VAR smf_record ,          /* Length of zEDC usage statistics */
    =(var_offset) SMF30USL +2 .

  var_offset = section_offset + 191       /* 0000BE */
  PARSE VAR smf_record ,          /* Number of zEDC usage statistics */
    =(var_offset) SMF30USN +2 .

  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Parse the DSECT named: SMF30PSS.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
SMF30PSS_Parse_Routine:

  var_offset = section_offset + 1       /* 000000 */
  PARSE VAR smf_record ,              /* SUB TYPE IDENTIFICATION FOR */
    =(var_offset) SMF30TYP +2 .

  var_offset = section_offset + 3       /* 000002 */
  PARSE VAR smf_record ,                         /* RESERVED @G744PJ */
    =(var_offset) SMF30RS1 +2 .

  var_offset = section_offset + 5       /* 000004 */
  PARSE VAR smf_record ,          /* RECORD VERSION NUMBER C'05' @D2 */
    =(var_offset) SMF30RVN +2 .

  var_offset = section_offset + 7       /* 000006 */
  PARSE VAR smf_record ,    /* SUBSYTEM OR PRODUCT NAME- SMF @G742PJ */
    =(var_offset) SMF30PNM +8 .

  var_offset = section_offset + 15       /* 00000E */
  PARSE VAR smf_record ,                    /* MVS PRODUCT LEVEL @DO */
    =(var_offset) SMF30OSL +8 .

  var_offset = section_offset + 23       /* 000016 */
  PARSE VAR smf_record ,            /* Current System Name Value @L3 */
    =(var_offset) SMF30SYN +8 .

  var_offset = section_offset + 31       /* 00001E */
  PARSE VAR smf_record ,                         /* Sysplex name @05 */
    =(var_offset) SMF30SYP +8 .

  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Parse the DSECT named: SMF30ID.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
SMF30ID_Parse_Routine:

  var_offset = section_offset + 1       /* 000000 */
  PARSE VAR smf_record ,      /* JMRJOB JOB OR SESSION NAME. THE JOB */
    =(var_offset) SMF30JBN +8 .

  var_offset = section_offset + 9       /* 000008 */
  PARSE VAR smf_record ,   /* SCTPGMNM PROGRAM NAME (TAKEN FROM PGM= */
    =(var_offset) SMF30PGM +8 .

  var_offset = section_offset + 17       /* 000010 */
  PARSE VAR smf_record ,   /* SCTSNAME STEP NAME (TAKEN FROM NAME ON */
    =(var_offset) SMF30STM +8 .

  var_offset = section_offset + 25       /* 000018 */
  PARSE VAR smf_record ,      /* JMRUSEID User identification (taken */
    =(var_offset) SMF30UIF +8 .

  var_offset = section_offset + 33       /* 000020 */
  PARSE VAR smf_record ,          /* SSIB JES JOB IDENTIFIER @G742PJ */
    =(var_offset) SMF30JNM +8 .

  var_offset = section_offset + 41       /* 000028 */
  PARSE VAR smf_record ,    /* SCTSNUMB STEP NUMBER (FIRST STEP = 1, */
    =(var_offset) SMF30STN +2 .

  var_offset = section_offset + 43       /* 00002A */
  PARSE VAR smf_record , /* JCTJCSMF JOB CLASS. ZERO FOR TSO SESSION */
    =(var_offset) SMF30CLS +1 .

  var_offset = section_offset + 44       /* 00002B */
  PARSE VAR smf_record ,            /* Job / Session ID section flag */
    =(var_offset) SMF30JF1 +1 .
                                          /* SMF30PGN is invalid @PB */
  SMF30PGF = BITAND(SMF30JF1,X'80')

  var_offset = section_offset + 45       /* 00002C */
  PARSE VAR smf_record ,     /* OUCBNPG Job performance group number */
    =(var_offset) SMF30PGN +2 .

  var_offset = section_offset + 47       /* 00002E */
  PARSE VAR smf_record , /* JCTJPRTY JES INPUT PRIORITY. IF NO VALUE */
    =(var_offset) SMF30JPT +2 .

  var_offset = section_offset + 49       /* 000030 */
  PARSE VAR smf_record ,      /* TCTAST DEVICE ALLOCATION START TIME */
    =(var_offset) SMF30AST +4 .

  var_offset = section_offset + 53       /* 000034 */
  PARSE VAR smf_record ,       /* TCTPPST PROBLEM PROGRAM START TIME */
    =(var_offset) SMF30PPS +4 .

  var_offset = section_offset + 57       /* 000038 */
  PARSE VAR smf_record , /* JCTJMRSS TIME, IN HUNDREDTHS OF A SECOND */
    =(var_offset) SMF30SIT +4 .

  var_offset = section_offset + 61       /* 00003C */
  PARSE VAR smf_record ,      /* JCTSSD DATE INITIATOR SELECTED THIS */
    =(var_offset) SMF30STD +4 .

  var_offset = section_offset + 65       /* 000040 */
  PARSE VAR smf_record , /* JMRENTRY TIME, IN HUNDREDTHS OF A SECOND */
    =(var_offset) SMF30RST +4 .

  var_offset = section_offset + 69       /* 000044 */
  PARSE VAR smf_record ,  /* JMREDATE DATE READER RECOGNIZED THE JOB */
    =(var_offset) SMF30RSD +4 .

  var_offset = section_offset + 73       /* 000048 */
  PARSE VAR smf_record ,             /* READER END TIME/DATE @G744PJ */
    =(var_offset) SMF30RDE +8 .

  var_offset = section_offset + 73       /* 000048 */
  PARSE VAR smf_record ,          /* TIME, IN HUNDREDTHS OF A SECOND */
    =(var_offset) SMF30RET +4 .

  var_offset = section_offset + 77       /* 00004C */
  PARSE VAR smf_record ,           /* DATE READER RECOGNIZED THE END */
    =(var_offset) SMF30RED +4 .

  var_offset = section_offset + 81       /* 000050 */
  PARSE VAR smf_record ,        /* ACTPRGNM PROGRAMMERS NAME @G742PJ */
    =(var_offset) SMF30USR +20 .

  var_offset = section_offset + 101       /* 000064 */
  PARSE VAR smf_record , /* ACEEGRPN RACF GROUP ID. 0=RACF NOT ACTIV */
    =(var_offset) SMF30GRP +8 .

  var_offset = section_offset + 109       /* 00006C */
  PARSE VAR smf_record , /* ACEEUSRI RACF USER ID. 0=RACF NOT ACTIVE */
    =(var_offset) SMF30RUD +8 .

  var_offset = section_offset + 117       /* 000074 */
  PARSE VAR smf_record ,  /* ACEETRMF RACF TERMINAL ID. THE FIELD IS */
    =(var_offset) SMF30TID +8 .

  var_offset = section_offset + 125       /* 00007C */
  PARSE VAR smf_record ,      /* TSBTRMID TERMINAL SYMBOLIC NAME @DC */
    =(var_offset) SMF30TSN +8 .

  var_offset = section_offset + 133       /* 000084 */
  PARSE VAR smf_record ,       /* SCTSCLPC THE NAME OF THE STEP THAT */
    =(var_offset) SMF30PSN +8 .

  var_offset = section_offset + 141       /* 00008C */
  PARSE VAR smf_record ,    /* LCTCLASS 8-CHARACTER JOB CLASS. BLANK */
    =(var_offset) SMF30CL8 +8 .

  var_offset = section_offset + 149       /* 000094 */
  PARSE VAR smf_record ,           /* TCTISS Interval Start Time for */
    =(var_offset) SMF30ISS +8 .

  var_offset = section_offset + 157       /* 00009C */
  PARSE VAR smf_record ,           /* SMCXINTE Interval End Time for */
    =(var_offset) SMF30IET +8 .

  var_offset = section_offset + 165       /* 0000A4 */
  PARSE VAR smf_record ,             /* SCTSSNUM Sub-Step Number @LQ */
    =(var_offset) SMF30SSN +4 .

  var_offset = section_offset + 169       /* 0000A8 */
  PARSE VAR smf_record ,              /* OpenMVS Exec'ed program @L5 */
    =(var_offset) SMF30EXN +16 .

  var_offset = section_offset + 185       /* 0000B8 */
  PARSE VAR smf_record ,    /* ASCBASID Address space identifier @PH */
    =(var_offset) SMF30ASI +2 .

  var_offset = section_offset + 187       /* 0000BA */
  PARSE VAR smf_record ,  /* JMRJOBCORRELATOR JES JOB CORRELATOR @LD */
    =(var_offset) SMF30COR +64 .

  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Parse the DSECT named: SMF30URA.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
SMF30URA_Parse_Routine:

  var_offset = section_offset + 1       /* 000000 */
  PARSE VAR smf_record ,   /* SCTSMF NUMBER OF CARD IMAGE RECORDS IN */
    =(var_offset) SMF30INP +4 .

  var_offset = section_offset + 5       /* 000004 */
  PARSE VAR smf_record ,      /* D ASCBIOSC Total blocks transferred */
    =(var_offset) SMF30TEP +4 .

  var_offset = section_offset + 9       /* 000008 */
  PARSE VAR smf_record ,      /* D TCTLOUT NUMBER OF TPUTS FOR A TSO */
    =(var_offset) SMF30TPT +4 .

  var_offset = section_offset + 13       /* 00000C */
  PARSE VAR smf_record ,       /* D TCTLIN NUMBER OF TGETS FOR A TSO */
    =(var_offset) SMF30TGT +4 .

  var_offset = section_offset + 17       /* 000010 */
  PARSE VAR smf_record ,       /* JMRRDR READER DEVICE CLASS @G742PJ */
    =(var_offset) SMF30RDR +1 .

  var_offset = section_offset + 18       /* 000011 */
  PARSE VAR smf_record ,        /* JMRRDR READER DEVICE TYPE @G742PJ */
    =(var_offset) SMF30RDT +1 .

  var_offset = section_offset + 19       /* 000012 */
  PARSE VAR smf_record ,   /* ASCBDCTI TOTAL DEVICE CONNECT TIME FOR */
    =(var_offset) SMF30TCN +4 .

  var_offset = section_offset + 23       /* 000016 */
  PARSE VAR smf_record ,             /* DEVICE CONNECT FLAGS @ZMC288 */
    =(var_offset) SMF30DCF +1 .
                                       /* DEVICE CONNECT TIME MAY BE */
  SMF30MFL = BITAND(SMF30DCF,X'80')
                                     /* The following fields contain */
  SMF30IIN = BITAND(SMF30DCF,X'40')
                                    /* SMF30TEP invalid when set @0E */
  SMF30TEF = BITAND(SMF30DCF,X'20')

  var_offset = section_offset + 24       /* 000017 */
  PARSE VAR smf_record ,                         /* RESERVED @ZMC288 */
    =(var_offset) SMF30RS2 +3 .

  var_offset = section_offset + 27       /* 00001A */
  PARSE VAR smf_record ,                /* RESERVED FOR BOUNDARY @D9 */
    =(var_offset) SMF30RSB +2 .

  var_offset = section_offset + 29       /* 00001C */
  PARSE VAR smf_record , /* ASSBASRR- TOTAL ADDRESS SPACE RE-READ @D */
    =(var_offset) SMF30TRR +4 .

  var_offset = section_offset + 33       /* 000020 */
  PARSE VAR smf_record ,                /* DASD I/O connect time for */
    =(var_offset) SMF30AIC +4 .

  var_offset = section_offset + 37       /* 000024 */
  PARSE VAR smf_record ,             /* DASD I/O disconnect time for */
    =(var_offset) SMF30AID +4 .

  var_offset = section_offset + 41       /* 000028 */
  PARSE VAR smf_record ,            /* DASD I/O pending plus control */
    =(var_offset) SMF30AIW +4 .

  var_offset = section_offset + 45       /* 00002C */
  PARSE VAR smf_record ,          /* DASD I/O start subchannel count */
    =(var_offset) SMF30AIS +4 .

  var_offset = section_offset + 49       /* 000030 */
  PARSE VAR smf_record ,                /* DASD I/O connect time for */
    =(var_offset) SMF30EIC +4 .

  var_offset = section_offset + 53       /* 000034 */
  PARSE VAR smf_record ,             /* DASD I/O disconnect time for */
    =(var_offset) SMF30EID +4 .

  var_offset = section_offset + 57       /* 000038 */
  PARSE VAR smf_record ,            /* DASD I/O pending plus control */
    =(var_offset) SMF30EIW +4 .

  var_offset = section_offset + 61       /* 00003C */
  PARSE VAR smf_record ,          /* DASD I/O start subchannel count */
    =(var_offset) SMF30EIS +4 .

  var_offset = section_offset + 65       /* 000040 */
  PARSE VAR smf_record ,      /* D ASCBIOSX Total blocks transferred */
    =(var_offset) SMF30TEX +8 .

  var_offset = section_offset + 73       /* 000048 */
  PARSE VAR smf_record ,            /* Number of DDs which had their */
    =(var_offset) SMF30DAS +4 .

  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Parse the DSECT named: SMF30CMP.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
SMF30CMP_Parse_Routine:

  var_offset = section_offset + 1       /* 000000 */
  PARSE VAR smf_record ,     /* TCTCMPC STEP COMPLETION CODE @G742PJ */
    =(var_offset) SMF30SCC +2 .
                                           /* BIT0 - USER ABEND @PEA */
  SMF30UAB = BITAND(SMF30SCC,X'80')

  var_offset = section_offset + 3       /* 000002 */
  PARSE VAR smf_record ,               /* STEP TERMINATION INDICATOR */
    =(var_offset) SMF30STI +1 .

  var_offset = section_offset + 3       /* 000002 */
  PARSE VAR smf_record ,                 /* 1st byte of SMF30STI @0T */
    =(var_offset) SMF30STI_Byte1 +1 .
                             /* JCTJMRCL BIT0 - JOB was cancelled by */
  SMF30SLC = BITAND(SMF30STI_Byte1,X'80')
                         /* JCTJMRCL BIT1 - CANCELLED BY EXIT IEFUJV */
  SMF30UJV = BITAND(SMF30STI_Byte1,X'40')
                         /* JCTJMRCL BIT2 - CANCELLED BY EXIT IEFUJI */
  SMF30UJI = BITAND(SMF30STI_Byte1,X'20')
                         /* JCTJMRCL BIT3 - CANCELLED BY EXIT IEFUSI */
  SMF30USI = BITAND(SMF30STI_Byte1,X'10')
                         /* JCTJMRCL BIT4 -CANCELLED BY EXIT IEFACTR */
  SMF30TRT = BITAND(SMF30STI_Byte1,X'08')
                                   /* BIT5 - STEP IS TO BE RESTARTED */
  SMF30SRS = BITAND(SMF30STI_Byte1,X'04')
                                     /* TCBFA BIT6 - IF ZERO, NORMAL */
  SMF30ABD = BITAND(SMF30STI_Byte1,X'02')
                           /* TCTHWM BIT7 - IF 0, NORMAL COMPLETION. */
  SMF30FLH = BITAND(SMF30STI_Byte1,X'01')

  var_offset = section_offset + 4       /* 000003 */
  PARSE VAR smf_record ,                 /* 2nd byte of SMF30STI @0T */
    =(var_offset) SMF30STI_Byte2 +1 .
                               /* TCTIEX BIT0 - EXCP COUNTS MIGHT BE */
  SMF30EXF = BITAND(SMF30STI_Byte2,X'80')
                           /* TCTISK BIT1 - PREVIOUS INTERVAL RECORD */
  SMF30ISK = BITAND(SMF30STI_Byte2,X'40')
                                  /* BIT2 - EXCP SECTIONS NOT MERGED */
  SMF30NEX = BITAND(SMF30STI_Byte2,X'20')
                                      /* BIT3 - STEP ENDED WITH POST */
  SMF30SYE = BITAND(SMF30STI_Byte2,X'10')
                                  /* BIT4 - STEP ENDED DUE TO OpenMV */
  SMF30ERE = BITAND(SMF30STI_Byte2,X'08')
                                  /* BIT5 - JOB abnormally ended @0N */
  SMF30CDE = BITAND(SMF30STI_Byte2,X'04')
                              /* JCTSUBSR Bit 6: Job was evicted via */
  SMF30CNR = BITAND(SMF30STI_Byte2,X'02')

  var_offset = section_offset + 5       /* 000004 */
  PARSE VAR smf_record ,         /* TCBARC ABEND REASON CODE @G860P2 */
    =(var_offset) SMF30ARC +4 .

  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Parse the DSECT named: SMF30CAS.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
SMF30CAS_Parse_Routine:

  var_offset = section_offset + 1       /* 000000 */
  PARSE VAR smf_record ,         /* SCTSDP ADDRESS SPACE DISPATCHING */
    =(var_offset) SMF30PTY +2 .

  var_offset = section_offset + 3       /* 000002 */
  PARSE VAR smf_record ,                         /* RESERVED @G744PJ */
    =(var_offset) SMF30RV3 +2 .

  var_offset = section_offset + 3       /* 000002 */
  PARSE VAR smf_record ,                    /* TIMER FLAGS-ALIAS @0K */
    =(var_offset) SMF30TFL +1 .

  var_offset = section_offset + 3       /* 000002 */
  PARSE VAR smf_record ,                 /* 1st byte of SMF30BFL @0T */
    =(var_offset) SMF30TFL_BYTE1 +1 .
                                  /* BIT 0 - TIMER FLAGS ARE USED@0K */
  SMF30TFO = BITAND(SMF30TFL_BYTE1,X'80')
                                     /* BIT 1 - SMF30CPT INVALID @0K */
  SMF30CTF = BITAND(SMF30TFL_BYTE1,X'40')
                                     /* BIT 2 - SMF30CPS INVALID @0K */
  SMF30CSF = BITAND(SMF30TFL_BYTE1,X'20')
                                     /* BIT 3 - SMF30JVU INVALID @0K */
  SMF30VUF = BITAND(SMF30TFL_BYTE1,X'10')
                                     /* BIT 4 - SMF30JVA INVALID @0K */
  SMF30VAF = BITAND(SMF30TFL_BYTE1,X'08')
                                     /* BIT 5 - SMF30ISB INVALID @0K */
  SMF30ISF = BITAND(SMF30TFL_BYTE1,X'04')
                                     /* BIT 6 - SMF30ICU INVALID @0K */
  SMF30ICF = BITAND(SMF30TFL_BYTE1,X'02')
                                     /* BIT 7 - SMF30IVU INVALID @0K */
  SMF30IVF = BITAND(SMF30TFL_BYTE1,X'01')

  var_offset = section_offset + 4       /* 000003 */
  PARSE VAR smf_record ,                 /* 2nd byte of SMF30BFL @0T */
    =(var_offset) SMF30TFL_BYTE2 +1 .
                                     /* BIT 0 - SMF30IVA INVALID @0K */
  SMF30IAF = BITAND(SMF30TFL_BYTE2,X'80')
                                     /* BIT 1 - SMF30IIP INVALID @0K */
  SMF30IIF = BITAND(SMF30TFL_BYTE2,X'40')
                                     /* BIT 2 - SMF30HPT INVALID @0K */
  SMF30HPF = BITAND(SMF30TFL_BYTE2,X'20')
                                     /* BIT 3 - SMF30RCT INVALID @0K */
  SMF30RCF = BITAND(SMF30TFL_BYTE2,X'10')
                                     /* BIT 4 - SMF30ASR INVALID @L7 */
  SMF30ASF = BITAND(SMF30TFL_BYTE2,X'08')
                                     /* BIT 5 - SMF30ENC INVALID @L7 */
  SMF30ENF = BITAND(SMF30TFL_BYTE2,X'04')
                                     /* BIT 6 - SMF30DET INVALID @DW */
  SMF30DEF = BITAND(SMF30TFL_BYTE2,X'02')
                                     /* BIT 7 - SMF30CEP INVALID @PB */
  SMF30CIN = BITAND(SMF30TFL_BYTE2,X'01')

  var_offset = section_offset + 5       /* 000004 */
  PARSE VAR smf_record , /* D ASCBEJST OR STEP CPU TIME UNDER TCB @G */
    =(var_offset) SMF30CPT +4 .

  var_offset = section_offset + 9       /* 000008 */
  PARSE VAR smf_record , /* D ASCBSRBT OR STEP CPU TIME UNDER SRB @G */
    =(var_offset) SMF30CPS +4 .

  var_offset = section_offset + 13       /* 00000C */
  PARSE VAR smf_record , /* D ASCBEJST + INITIATOR CPU TIME UNDER TC */
    =(var_offset) SMF30ICU +4 .

  var_offset = section_offset + 17       /* 000010 */
  PARSE VAR smf_record , /* D ASCBSRBT + INITIATOR CPU TIME UNDER SR */
    =(var_offset) SMF30ISB +4 .

  var_offset = section_offset + 21       /* 000014 */
  PARSE VAR smf_record , /* D ASCBEVST OR STEP VECTOR USAGE TIME @H4 */
    =(var_offset) SMF30JVU +4 .

  var_offset = section_offset + 25       /* 000018 */
  PARSE VAR smf_record , /* D ASCBEVST + INITIATOR VECTOR USAGE TIME */
    =(var_offset) SMF30IVU +4 .

  var_offset = section_offset + 29       /* 00001C */
  PARSE VAR smf_record , /* D ASCBVFAT OR STEP VECTOR AFFINITY TIME  */
    =(var_offset) SMF30JVA +4 .

  var_offset = section_offset + 33       /* 000020 */
  PARSE VAR smf_record , /* D ASCBVFAT + INITIATOR VECTOR AFFINITY T */
    =(var_offset) SMF30IVA +4 .

  var_offset = section_offset + 37       /* 000024 */
  PARSE VAR smf_record ,                  /* INTERVAL START TIME, IN */
    =(var_offset) SMF30IST +4 .

  var_offset = section_offset + 41       /* 000028 */
  PARSE VAR smf_record ,              /* INTERVAL START DATE FOR @L4 */
    =(var_offset) SMF30IDT +4 .

  var_offset = section_offset + 45       /* 00002C */
  PARSE VAR smf_record , /* D ASSBIIPT AMOUNT OF PROCESSOR TIME USED */
    =(var_offset) SMF30IIP +4 .

  var_offset = section_offset + 49       /* 000030 */
  PARSE VAR smf_record , /* D TCBTTIME AMOUNT OF PROCESSOR TIME USED */
    =(var_offset) SMF30RCT +4 .

  var_offset = section_offset + 53       /* 000034 */
  PARSE VAR smf_record , /* D ASSBHST PROCESSOR TIME CONSUMED FOR TH */
    =(var_offset) SMF30HPT +4 .

  var_offset = section_offset + 57       /* 000038 */
  PARSE VAR smf_record , /* D ASSBFSC INTEGRATED CRYPTOGRAPHIC SERVI */
    =(var_offset) SMF30CSC +4 .

  var_offset = section_offset + 61       /* 00003C */
  PARSE VAR smf_record , /* D ASSBTPMT Number of pages moved with AD */
    =(var_offset) SMF30DMI +4 .

  var_offset = section_offset + 65       /* 000040 */
  PARSE VAR smf_record , /* D ASSBTPMA Number of pages moved with AD */
    =(var_offset) SMF30DMO +4 .

  var_offset = section_offset + 69       /* 000044 */
  PARSE VAR smf_record ,       /* D ASSBASST Additional CPU time, in */
    =(var_offset) SMF30ASR +4 .

  var_offset = section_offset + 73       /* 000048 */
  PARSE VAR smf_record ,                   /* D RQSVECPT Independent */
    =(var_offset) SMF30ENC +4 .

  var_offset = section_offset + 77       /* 00004C */
  PARSE VAR smf_record ,                      /* D RQSVDET Dependent */
    =(var_offset) SMF30DET +4 .

  var_offset = section_offset + 81       /* 000050 */
  PARSE VAR smf_record ,      /* RqsvCPUtimeConsumedWhileENQpromoted */
    =(var_offset) SMF30CEP +4 .

  var_offset = section_offset + 85       /* 000054 */
  PARSE VAR smf_record ,            /* More failure flags. Each flag */
    =(var_offset) SMF30TF2 +1 .
                                                              /* @H5 */
  SMF30_TIME_ON_IFA_F = BITAND(SMF30TF2,X'80')
                                                              /* @H5 */
  SMF30_ENCLAVE_TIME_ON_IFA_F = BITAND(SMF30TF2,X'40')
                                                              /* @H5 */
  SMF30_DEP_ENCLAVE_TIME_ON_IFA_F = BITAND(SMF30TF2,X'20')
                                                              /* @H5 */
  SMF30_TIME_IFA_ON_CP_F = BITAND(SMF30TF2,X'10')
                                                              /* @H5 */
  SMF30_ENCLAVE_TIME_IFA_ON_CP_F = BITAND(SMF30TF2,X'08')
                                                              /* @H5 */
  SMF30_DEP_ENCLAVE_TIME_IFA_ON_CP_F = BITAND(SMF30TF2,X'04')
                                         /* Failure in SMF30CEPI @PA */
  SMF30_CEPI_F = BITAND(SMF30TF2,X'02')
                                          /* Failure in SMF30CRP @LJ */
  SMF30CRP_F = BITAND(SMF30TF2,X'01')

  var_offset = section_offset + 86       /* 000055 */
  PARSE VAR smf_record ,            /* More failure flags. Each flag */
    =(var_offset) SMF30T32 +1 .
                                                              /* @H6 */
  SMF30_TIME_ON_zIIP_F = BITAND(SMF30T32,X'80')
                                                              /* @H6 */
  SMF30_TIME_ON_SUP_F = BITAND(SMF30T32,X'80')
                                                              /* @H6 */
  SMF30_ENCLAVE_TIME_ON_zIIP_F = BITAND(SMF30T32,X'40')
                                                              /* @H6 */
  SMF30_ENCLAVE_TIME_ON_SUP_F = BITAND(SMF30T32,X'40')
                                                              /* @H6 */
  SMF30_DEPENC_TIME_ON_zIIP_F = BITAND(SMF30T32,X'20')
                                                              /* @H6 */
  SMF30_DEPENC_TIME_ON_SUP_F = BITAND(SMF30T32,X'20')
                                                              /* @H6 */
  SMF30_TIME_zIIP_ON_CP_F = BITAND(SMF30T32,X'10')
                                                              /* @H6 */
  SMF30_TIME_SUP_ON_CP_F = BITAND(SMF30T32,X'10')
                                                              /* @H6 */
  SMF30_ENCLAVE_TIME_zIIP_ON_CP_F = BITAND(SMF30T32,X'08')
                                                              /* @H6 */
  SMF30_ENCLAVE_TIME_SUP_ON_CP_F = BITAND(SMF30T32,X'08')
                                                              /* @H6 */
  SMF30_DEPENC_TIME_zIIP_ON_CP_F = BITAND(SMF30T32,X'04')
                                                              /* @H6 */
  SMF30_DEPENC_TIME_SUP_ON_CP_F = BITAND(SMF30T32,X'04')

  var_offset = section_offset + 87       /* 000056 */
  PARSE VAR smf_record ,            /* More failure flags. Each flag */
    =(var_offset) SMF30T33 +1 .
                                                              /* @H6 */
  SMF30_ENCLAVE_TIME_ON_zIIP_N_F = BITAND(SMF30T33,X'80')
                                                              /* @H6 */
  SMF30_ENCLAVE_TIME_ON_SUP_N_F = BITAND(SMF30T33,X'80')
                                                              /* @H6 */
  SMF30_DEPENC_TIME_ON_zIIP_N_F = BITAND(SMF30T33,X'40')
                                                              /* @H6 */
  SMF30_DEPENC_TIME_ON_SUP_N_F = BITAND(SMF30T33,X'40')
                                                              /* @H6 */
  SMF30_ENCLAVE_TIME_zIIP_QUAL_F = BITAND(SMF30T33,X'20')
                                                              /* @H6 */
  SMF30_ENCLAVE_TIME_SUP_QUAL_F = BITAND(SMF30T33,X'20')
                                                              /* @H6 */
  SMF30_DEPENC_TIME_zIIP_QUAL_F = BITAND(SMF30T33,X'10')
                                                              /* @H6 */
  SMF30_DEPENC_TIME_SUP_QUAL_F = BITAND(SMF30T33,X'10')

  var_offset = section_offset + 88       /* 000057 */
  PARSE VAR smf_record ,                             /* Reserved @H6 */
    =(var_offset) SMF30CAS_unnamed_13 +1 .

  var_offset = section_offset + 89       /* 000058 */
  PARSE VAR smf_record ,       /* ASSB_Time_On_IFA Time spent on IFA */
    =(var_offset) SMF30_TIME_ON_IFA +4 .

  var_offset = section_offset + 93       /* 00005C */
  PARSE VAR smf_record ,                 /* Rqsv_Enclave_Time_On_IFA */
    =(var_offset) SMF30_ENCLAVE_TIME_ON_IFA +4 .

  var_offset = section_offset + 97       /* 000060 */
  PARSE VAR smf_record ,             /* Rqsv_Dep_Enclave_Time_On_IFA */
    =(var_offset) SMF30_DEP_ENCLAVE_TIME_ON_IFA +4 .

  var_offset = section_offset + 101       /* 000064 */
  PARSE VAR smf_record , /* ASSB_Time_IFA_ON_CP IFA CPU time spent o */
    =(var_offset) SMF30_TIME_IFA_ON_CP +4 .

  var_offset = section_offset + 105       /* 000068 */
  PARSE VAR smf_record ,              /* Rqsv_Enclave_Time_IFA_ON_CP */
    =(var_offset) SMF30_ENCLAVE_TIME_IFA_ON_CP +4 .

  var_offset = section_offset + 109       /* 00006C */
  PARSE VAR smf_record ,
    =(var_offset) SMF30_DEP_ENCLAVE_TIME_IFA_ON_CP +4 .

  var_offset = section_offset + 113       /* 000070 */
  PARSE VAR smf_record ,      /* RqsvCPUtimeConsumedWhileENQpromoted */
    =(var_offset) SMF30CEPI +4 .

  var_offset = section_offset + 117       /* 000074 */
  PARSE VAR smf_record ,     /* ASSB_Time_On_zIIP Time spent on zIIP */
    =(var_offset) SMF30_TIME_ON_zIIP +4 .

  var_offset = section_offset + 117       /* 000074 */
  PARSE VAR smf_record ,
    =(var_offset) SMF30_TIME_ON_SUP +4 .

  var_offset = section_offset + 121       /* 000078 */
  PARSE VAR smf_record ,                 /* Rqsv_Enclave_Time_On_SUP */
    =(var_offset) SMF30_ENCLAVE_TIME_ON_zIIP +4 .

  var_offset = section_offset + 121       /* 000078 */
  PARSE VAR smf_record ,
    =(var_offset) SMF30_ENCLAVE_TIME_ON_SUP +4 .

  var_offset = section_offset + 125       /* 00007C */
  PARSE VAR smf_record ,                  /* Rqsv_DEPENC_Time_On_SUP */
    =(var_offset) SMF30_DEPENC_TIME_ON_zIIP +4 .

  var_offset = section_offset + 125       /* 00007C */
  PARSE VAR smf_record ,
    =(var_offset) SMF30_DEPENC_TIME_ON_SUP +4 .

  var_offset = section_offset + 129       /* 000080 */
  PARSE VAR smf_record ,  /* ASSB_Time_zIIP_ON_CP zIIP CPU time spen */
    =(var_offset) SMF30_TIME_zIIP_ON_CP +4 .

  var_offset = section_offset + 129       /* 000080 */
  PARSE VAR smf_record ,
    =(var_offset) SMF30_TIME_SUP_ON_CP +4 .

  var_offset = section_offset + 133       /* 000084 */
  PARSE VAR smf_record ,              /* Rqsv_Enclave_Time_SUP_ON_CP */
    =(var_offset) SMF30_ENCLAVE_TIME_zIIP_ON_CP +4 .

  var_offset = section_offset + 133       /* 000084 */
  PARSE VAR smf_record ,
    =(var_offset) SMF30_ENCLAVE_TIME_SUP_ON_CP +4 .

  var_offset = section_offset + 137       /* 000088 */
  PARSE VAR smf_record ,               /* Rqsv_DEPENC_Time_SUP_ON_CP */
    =(var_offset) SMF30_DEPENC_TIME_zIIP_ON_CP +4 .

  var_offset = section_offset + 137       /* 000088 */
  PARSE VAR smf_record ,
    =(var_offset) SMF30_DEPENC_TIME_SUP_ON_CP +4 .

  var_offset = section_offset + 141       /* 00008C */
  PARSE VAR smf_record ,               /* Rqsv_Enclave_TIME_SUP_QUAL */
    =(var_offset) SMF30_ENCLAVE_TIME_zIIP_QUAL +4 .

  var_offset = section_offset + 141       /* 00008C */
  PARSE VAR smf_record ,
    =(var_offset) SMF30_ENCLAVE_TIME_SUP_QUAL +4 .

  var_offset = section_offset + 145       /* 000090 */
  PARSE VAR smf_record ,                /* Rqsv_DepEnc_TIME_SUP_QUAL */
    =(var_offset) SMF30_DEPENC_TIME_zIIP_QUAL +4 .

  var_offset = section_offset + 145       /* 000090 */
  PARSE VAR smf_record ,
    =(var_offset) SMF30_DEPENC_TIME_SUP_QUAL +4 .

  var_offset = section_offset + 149       /* 000094 */
  PARSE VAR smf_record ,      /* RqsvCPUtimeConsumedWhileCRMpromoted */
    =(var_offset) SMF30CRP +4 .

  var_offset = section_offset + 153       /* 000098 */
  PARSE VAR smf_record ,                /* CPU TCB time spent by the */
    =(var_offset) SMF30ICU_Step_Term +4 .

  var_offset = section_offset + 157       /* 00009C */
  PARSE VAR smf_record ,                /* CPU TCB time spent by the */
    =(var_offset) SMF30ICU_Step_Init +4 .

  var_offset = section_offset + 161       /* 0000A0 */
  PARSE VAR smf_record ,                /* CPU SRB time spent by the */
    =(var_offset) SMF30ISB_Step_Term +4 .

  var_offset = section_offset + 165       /* 0000A4 */
  PARSE VAR smf_record ,                /* CPU SRB time spent by the */
    =(var_offset) SMF30ISB_Step_Init +4 .

  var_offset = section_offset + 169       /* 0000A8 */
  PARSE VAR smf_record ,           /* Accumulated value of I/O block */
    =(var_offset) SMF30_Missed_SMF30BLK +4 .

  var_offset = section_offset + 173       /* 0000AC */
  PARSE VAR smf_record ,              /* Accumulated value of device */
    =(var_offset) SMF30_Missed_SMF30DCT +4 .

  var_offset = section_offset + 177       /* 0000B0 */
  PARSE VAR smf_record ,                /* For interval records, the */
    =(var_offset) SMF30_Highest_Task_CPU_Percent +2 .

  var_offset = section_offset + 179       /* 0000B2 */
  PARSE VAR smf_record ,              /* Program name running in the */
    =(var_offset) SMF30_Highest_Task_CPU_Program +8 .

  var_offset = section_offset + 187       /* 0000BA */
  PARSE VAR smf_record ,             /* CPU Accounting Segment Flags */
    =(var_offset) SMF30CAS_Flag +1 .
                                        /* When on, eligible work in */
  SMF30CAS_InEligHonorPriority = BITAND(SMF30CAS_Flag,X'80')

  var_offset = section_offset + 188       /* 0000BB */
  PARSE VAR smf_record ,                             /* Reserved @0R */
    =(var_offset) SMF30CAS_R0BB +1 .

  var_offset = section_offset + 189       /* 0000BC */
  PARSE VAR smf_record ,              /* Contains data introduced by */
    =(var_offset) SMF30CAS_OA54589 +4 .

  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Parse the DSECT named: SMF30EXP.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
SMF30EXP_Parse_Routine:

  var_offset = section_offset + 1       /* 000000 */
  PARSE VAR smf_record ,                      /* SECTION KEY @G742PJ */
    =(var_offset) SMF30KEY +12 .

  var_offset = section_offset + 1       /* 000000 */
  PARSE VAR smf_record ,            /* UCBTBYT3 DEVICE CLASS @G742PJ */
    =(var_offset) SMF30DEV +1 .

  var_offset = section_offset + 2       /* 000001 */
  PARSE VAR smf_record ,               /* UCBTBYT3 UNIT TYPE @G742PJ */
    =(var_offset) SMF30UTP +1 .

  var_offset = section_offset + 3       /* 000002 */
  PARSE VAR smf_record ,                /* UCBCHAN Device number @LY */
    =(var_offset) SMF30CUA +2 .

  var_offset = section_offset + 5       /* 000004 */
  PARSE VAR smf_record , /* TIOEDDNM DD NAME USED TO ACCESS THE DATA */
    =(var_offset) SMF30DDN +8 .

  var_offset = section_offset + 13       /* 00000C */
  PARSE VAR smf_record , /* D TCTDCTR COUNT OF BLOCKS ISSUED FOR THE */
    =(var_offset) SMF30BLK +4 .

  var_offset = section_offset + 17       /* 000010 */
  PARSE VAR smf_record ,   /* TCTBLKSZ LARGEST BLOCKSIZE OF THE DATA */
    =(var_offset) SMF30BSZ +2 .
                                  /* INDICATES CHANGED BLOCKSIZE FOR */
  SMF30CBS = BITAND(SMF30BSZ,X'80')

  var_offset = section_offset + 19       /* 000012 */
  PARSE VAR smf_record ,             /* DEVICE CONNECT TIME FOR THIS */
    =(var_offset) SMF30DCT +4 .

  var_offset = section_offset + 23       /* 000016 */
  PARSE VAR smf_record ,              /* TCTXBLKS BLOCKSIZE >32K @LG */
    =(var_offset) SMF30XBS +8 .

  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Parse the DSECT named: SMF30ACS.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
SMF30ACS_Parse_Routine:

  var_offset = section_offset + 1       /* 000000 */
  PARSE VAR smf_record ,            /* LENGTH OF ACCOUNTING SECTION, */
    =(var_offset) SMF30ACL +1 .

  var_offset = section_offset + 2       /* 000001 */
  PARSE VAR smf_record ,             /* JOB OR STEP ACCOUNTING FIELD */
    =(var_offset) SMF30ACT +1 .

  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Parse the DSECT named: SMF30SAP.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
SMF30SAP_Parse_Routine:

  var_offset = section_offset + 1       /* 000000 */
  PARSE VAR smf_record ,           /* RESERVED - NOTE THAT SMF30RGN, */
    =(var_offset) SMF30RSV +2 .

  var_offset = section_offset + 3       /* 000002 */
  PARSE VAR smf_record ,            /* STORAGE FLAGS. IF STORAGE WAS */
    =(var_offset) SMF30SFL +1 .
                      /* EAADDRBT BIT V=R IS SPECIFIED. THIS BIT HAS */
  SMF30VQR = BITAND(SMF30SFL,X'80')
                        /* IEFUSI-REGION IEFUSI CHANGED REGION LIMIT */
  SMF30UCL = BITAND(SMF30SFL,X'40')
                          /* IEFUSI-MEMLIMIT IEFUSI CHANGED MEMLIMIT */
  SMF30UCM = BITAND(SMF30SFL,X'20')
                                     /* The following fields contain */
  SMF30SIN = BITAND(SMF30SFL,X'10')
                             /* SCTNHUSI When on, indicates that the */
  SMF30NHU = BITAND(SMF30SFL,X'08')

  var_offset = section_offset + 4       /* 000003 */
  PARSE VAR smf_record ,   /* TCBPKF STORAGE PROTECT KEY, IN THE FOR */
    =(var_offset) SMF30SPK +1 .

  var_offset = section_offset + 5       /* 000004 */
  PARSE VAR smf_record , /* TCTHWM/1024 LARGEST AMOUNT OF STORAGE US */
    =(var_offset) SMF30PRV +2 .

  var_offset = section_offset + 7       /* 000006 */
  PARSE VAR smf_record ,    /* TCTLWM LARGEST AMOUNT OF STORAGE USED */
    =(var_offset) SMF30SYS +2 .

  var_offset = section_offset + 9       /* 000008 */
  PARSE VAR smf_record , /* D OUXBPIN + NUMBER OF PAGES THAT WERE PA */
    =(var_offset) SMF30PGI +4 .

  var_offset = section_offset + 9       /* 000008 */
  PARSE VAR smf_record , /* D OUXBPIN + NUMBER OF PAGE-INS ALIAS @LL */
    =(var_offset) SMF30PIA +4 .

  var_offset = section_offset + 13       /* 00000C */
  PARSE VAR smf_record , /* D OUXBPOUT + NUMBER OF PAGES THAT WERE P */
    =(var_offset) SMF30PGO +4 .

  var_offset = section_offset + 13       /* 00000C */
  PARSE VAR smf_record , /* D OUXBPOUT + NUMBER OF PAGE-OUTS ALIAS @ */
    =(var_offset) SMF30POA +4 .

  var_offset = section_offset + 17       /* 000010 */
  PARSE VAR smf_record ,   /* D OUXB NUMBER OF ATTEMPTS TO READ DATA */
    =(var_offset) SMF30CPM +4 .

  var_offset = section_offset + 21       /* 000014 */
  PARSE VAR smf_record ,  /* D OUXBSWCT NUMBER OF ADDRESS SPACE SWAP */
    =(var_offset) SMF30NSW +4 .

  var_offset = section_offset + 25       /* 000018 */
  PARSE VAR smf_record , /* D OUXBSPIN + NUMBER OF PAGES SWAPPED IN. */
    =(var_offset) SMF30PSI +4 .

  var_offset = section_offset + 29       /* 00001C */
  PARSE VAR smf_record , /* D OUXBSPOT + NUMBER OF PAGES SWAPPED OUT */
    =(var_offset) SMF30PSO +4 .

  var_offset = section_offset + 33       /* 000020 */
  PARSE VAR smf_record , /* D OUXBVAMI + NUMBER OF VIO PAGE INS FOR  */
    =(var_offset) SMF30VPI +4 .

  var_offset = section_offset + 37       /* 000024 */
  PARSE VAR smf_record , /* D OUXBVAMO + NUMBER OF VIO PAGE OUTS FOR */
    =(var_offset) SMF30VPO +4 .

  var_offset = section_offset + 41       /* 000028 */
  PARSE VAR smf_record , /* D OUXBVAMR + NUMBER OF VIO RECLAIMS @G74 */
    =(var_offset) SMF30VPR +4 .

  var_offset = section_offset + 45       /* 00002C */
  PARSE VAR smf_record , /* D OUXBCAPI + NUMBER OF COMMON AREA PAGE- */
    =(var_offset) SMF30CPI +4 .

  var_offset = section_offset + 49       /* 000030 */
  PARSE VAR smf_record , /* D OUXBHSPI NUMBER OF HIPERSPACE PAGE-INS */
    =(var_offset) SMF30HPI +4 .

  var_offset = section_offset + 53       /* 000034 */
  PARSE VAR smf_record , /* D OUXBLPAI NUMBER OF LPA PAGE-INS @G742P */
    =(var_offset) SMF30LPI +4 .

  var_offset = section_offset + 57       /* 000038 */
  PARSE VAR smf_record , /* D OUXBHSPO NUMBER OF HIPERSPACE PAGE-OUT */
    =(var_offset) SMF30HPO +4 .

  var_offset = section_offset + 61       /* 00003C */
  PARSE VAR smf_record , /* D OUXBSTCT + NUMBER OF PAGES STOLEN FROM */
    =(var_offset) SMF30PST +4 .

  var_offset = section_offset + 65       /* 000040 */
  PARSE VAR smf_record , /* D OUCBPSS NUMBER OF CPU PAGE SECONDS FOR */
    =(var_offset) SMF30PSC +8 .

  var_offset = section_offset + 73       /* 000048 */
  PARSE VAR smf_record , /* TCTRGNB PRIVATE AREA SIZE IN BYTES, BELO */
    =(var_offset) SMF30RGB +4 .

  var_offset = section_offset + 77       /* 00004C */
  PARSE VAR smf_record , /* TCTERGNB PRIVATE AREA SIZE IN BYTES, ABO */
    =(var_offset) SMF30ERG +4 .

  var_offset = section_offset + 81       /* 000050 */
  PARSE VAR smf_record ,  /* TCTHWM MAXIMUM VIRTUAL STORAGE IN BYTES */
    =(var_offset) SMF30ARB +4 .

  var_offset = section_offset + 85       /* 000054 */
  PARSE VAR smf_record , /* TCTEHWM MAXIMUM VIRTUAL STORAGE IN BYTES */
    =(var_offset) SMF30EAR +4 .

  var_offset = section_offset + 89       /* 000058 */
  PARSE VAR smf_record ,  /* TCTLWM MAXIMUM VIRTUAL STORAGE IN BYTES */
    =(var_offset) SMF30URB +4 .

  var_offset = section_offset + 93       /* 00005C */
  PARSE VAR smf_record , /* TCTELWM MAXIMUM VIRTUAL STORAGE IN BYTES */
    =(var_offset) SMF30EUR +4 .

  var_offset = section_offset + 97       /* 000060 */
  PARSE VAR smf_record ,  /* TCTRSZ*2 REGION SIZE ESTABLISHED, IN 1K */
    =(var_offset) SMF30RGN +4 .

  var_offset = section_offset + 101       /* 000064 */
  PARSE VAR smf_record ,   /* RAXDSHWM AMOUNT OF USER KEY DATA SPACE */
    =(var_offset) SMF30DSV +4 .

  var_offset = section_offset + 105       /* 000068 */
  PARSE VAR smf_record ,           /* NUMBER OF UNBLOCKED PAGES THAT */
    =(var_offset) SMF30PIE +4 .

  var_offset = section_offset + 109       /* 00006C */
  PARSE VAR smf_record ,           /* NUMBER OF UNBLOCKED PAGES THAT */
    =(var_offset) SMF30POE +4 .

  var_offset = section_offset + 113       /* 000070 */
  PARSE VAR smf_record ,        /* NUMBER OF BLOCKED PAGES THAT WERE */
    =(var_offset) SMF30BIA +4 .

  var_offset = section_offset + 117       /* 000074 */
  PARSE VAR smf_record ,        /* NUMBER OF BLOCKED PAGES THAT WERE */
    =(var_offset) SMF30BOA +4 .

  var_offset = section_offset + 121       /* 000078 */
  PARSE VAR smf_record ,        /* NUMBER OF BLOCKED PAGES THAT WERE */
    =(var_offset) SMF30BIE +4 .

  var_offset = section_offset + 125       /* 00007C */
  PARSE VAR smf_record ,        /* NUMBER OF BLOCKED PAGES THAT WERE */
    =(var_offset) SMF30BOE +4 .

  var_offset = section_offset + 129       /* 000080 */
  PARSE VAR smf_record ,         /* NUMBER OF BLOCKS THAT WERE PAGED */
    =(var_offset) SMF30KIA +4 .

  var_offset = section_offset + 133       /* 000084 */
  PARSE VAR smf_record ,         /* NUMBER OF BLOCKS THAT WERE PAGED */
    =(var_offset) SMF30KOA +4 .

  var_offset = section_offset + 137       /* 000088 */
  PARSE VAR smf_record ,         /* NUMBER OF BLOCKS THAT WERE PAGED */
    =(var_offset) SMF30KIE +4 .

  var_offset = section_offset + 141       /* 00008C */
  PARSE VAR smf_record ,         /* NUMBER OF BLOCKS THAT WERE PAGED */
    =(var_offset) SMF30KOE +4 .

  var_offset = section_offset + 145       /* 000090 */
  PARSE VAR smf_record ,        /* Number of CPU page seconds for th */
    =(var_offset) SMF30PSF +8 .

  var_offset = section_offset + 153       /* 000098 */
  PARSE VAR smf_record ,         /* Number of shared pages that were */
    =(var_offset) SMF30PAI +4 .

  var_offset = section_offset + 157       /* 00009C */
  PARSE VAR smf_record ,         /* Number of shared pages that were */
    =(var_offset) SMF30PEI +4 .

  var_offset = section_offset + 161       /* 0000A0 */
  PARSE VAR smf_record ,          /* Expanded storage page residency */
    =(var_offset) SMF30ERS +8 .

  var_offset = section_offset + 169       /* 0000A8 */
  PARSE VAR smf_record ,           /* MEMLIMIT value in 1MB units as */
    =(var_offset) SMF30MEM +8 .

  var_offset = section_offset + 177       /* 0000B0 */
  PARSE VAR smf_record ,                      /* MEMLIMIT source @0A */
    =(var_offset) SMF30MES +1 .

  var_offset = section_offset + 178       /* 0000B1 */
  PARSE VAR smf_record ,            /* Actions taken on the job step */
    =(var_offset) SMF30SLM +1 .
                                      /* When on, SMFLIM REGIONBELOW */
  SMF30SL1 = BITAND(SMF30SLM,X'80')
                                      /* When on, SMFLIM REGIONABOVE */
  SMF30SL2 = BITAND(SMF30SLM,X'40')
                                     /* When on, SMFLIM SYSRESVBELOW */
  SMF30SL3 = BITAND(SMF30SLM,X'20')
                                     /* When on, SMFLIM SYSRESVABOVE */
  SMF30SL4 = BITAND(SMF30SLM,X'10')
                                         /* When on, SMFLIM MEMLIMIT */
  SMF30SL5 = BITAND(SMF30SLM,X'08')
                                 /* When on, the IEFUSI exit set the */
  SMF30SL6 = BITAND(SMF30SLM,X'04')

  var_offset = section_offset + 179       /* 0000B2 */
  PARSE VAR smf_record ,                        /* RAX Flag Byte @0U */
    =(var_offset) SMF30_RaxFlags +1 .
                                        /* When on, auditing of user */
  SMF30_UserKeyCommonAuditEnabled = BITAND(SMF30_RaxFlags,X'80')
                                      /* When on, attempts were made */
  SMF30_UserKeyCsaUsage = BITAND(SMF30_RaxFlags,X'40')
                                      /* When on, attempts were made */
  SMF30_UserKeyCadsUsage = BITAND(SMF30_RaxFlags,X'20')
                                   /* When on, attempts were made to */
  SMF30_UserKeyChangKeyUsage = BITAND(SMF30_RaxFlags,X'10')

  var_offset = section_offset + 180       /* 0000B3 */
  PARSE VAR smf_record ,                             /* Reserved @0U */
    =(var_offset) SMF30SAP_unnamed_3 +5 .

  var_offset = section_offset + 185       /* 0000B8 */
  PARSE VAR smf_record , /* RAXHVGPAGESINREAL High water mark for th */
    =(var_offset) SMF30HVR +8 .

  var_offset = section_offset + 193       /* 0000C0 */
  PARSE VAR smf_record ,   /* RAXHVGAUXSLOTS High water mark for the */
    =(var_offset) SMF30HVA +8 .

  var_offset = section_offset + 201       /* 0000C8 */
  PARSE VAR smf_record , /* RAXLVABYTES Amount of 64-bit private sto */
    =(var_offset) SMF30HVO +8 .

  var_offset = section_offset + 209       /* 0000D0 */
  PARSE VAR smf_record , /* RAXLVGBYTES High water mark for the numb */
    =(var_offset) SMF30HVH +8 .

  var_offset = section_offset + 217       /* 0000D8 */
  PARSE VAR smf_record , /* RAXLVSHRBYTES Amount of 64-bit shared st */
    =(var_offset) SMF30HSO +8 .

  var_offset = section_offset + 225       /* 0000E0 */
  PARSE VAR smf_record , /* RAXLVSHRGBYTES High water mark for the n */
    =(var_offset) SMF30HSH +8 .

  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Parse the DSECT named: SMF30PRF.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
SMF30PRF_Parse_Routine:

  var_offset = section_offset + 1       /* 000000 */
  PARSE VAR smf_record ,  /* D OUXBJBS + TOTAL SERVICE UNITS @G742PJ */
    =(var_offset) SMF30SRV +4 .

  var_offset = section_offset + 5       /* 000004 */
  PARSE VAR smf_record ,      /* D OUXBCPU CPU SERVICE UNITS @G742PJ */
    =(var_offset) SMF30CSU +4 .

  var_offset = section_offset + 9       /* 000008 */
  PARSE VAR smf_record ,      /* D OUXBSRB SRB SERVICE UNITS @G742PJ */
    =(var_offset) SMF30SRB +4 .

  var_offset = section_offset + 13       /* 00000C */
  PARSE VAR smf_record ,      /* D OUXBIOC I/O SERVICE UNITS @G742PJ */
    =(var_offset) SMF30IO +4 .

  var_offset = section_offset + 17       /* 000010 */
  PARSE VAR smf_record ,      /* D OUXBMSO MSO SERVICE UNITS @G742PJ */
    =(var_offset) SMF30MSO +4 .

  var_offset = section_offset + 21       /* 000014 */
  PARSE VAR smf_record , /* D OUXBJBT + TRANSACTION ACTIVE TIME IN 1 */
    =(var_offset) SMF30TAT +4 .

  var_offset = section_offset + 25       /* 000018 */
  PARSE VAR smf_record ,         /* D Copy of RmctAdjC when this SMF */
    =(var_offset) SMF30SUS +4 .

  var_offset = section_offset + 29       /* 00001C */
  PARSE VAR smf_record ,  /* D OUXBJBR TRANSACTION RESIDENCY TIME IN */
    =(var_offset) SMF30RES +4 .

  var_offset = section_offset + 33       /* 000020 */
  PARSE VAR smf_record , /* D OUXBTRC NUMBER OF TRANSACTIONS @G742PJ */
    =(var_offset) SMF30TRS +4 .

  var_offset = section_offset + 37       /* 000024 */
  PARSE VAR smf_record ,                        /* Workload Name @L1 */
    =(var_offset) SMF30WLM +8 .

  var_offset = section_offset + 45       /* 00002C */
  PARSE VAR smf_record ,                   /* Service Class Name @L1 */
    =(var_offset) SMF30SCN +8 .

  var_offset = section_offset + 53       /* 000034 */
  PARSE VAR smf_record ,                  /* Resource Group Name @L1 */
    =(var_offset) SMF30GRN +8 .

  var_offset = section_offset + 61       /* 00003C */
  PARSE VAR smf_record ,                 /* Reporting Class Name @L1 */
    =(var_offset) SMF30RCN +8 .

  var_offset = section_offset + 69       /* 000044 */
  PARSE VAR smf_record , /* D RQSVETIM Independent Enclave Transacti */
    =(var_offset) SMF30ETA +4 .

  var_offset = section_offset + 73       /* 000048 */
  PARSE VAR smf_record ,       /* D RQSVECPU Independent Enclave CPU */
    =(var_offset) SMF30ESU +4 .

  var_offset = section_offset + 77       /* 00004C */
  PARSE VAR smf_record , /* D RQSVETRC Independent Enclave Transacti */
    =(var_offset) SMF30ETC +4 .

  var_offset = section_offset + 81       /* 000050 */
  PARSE VAR smf_record ,    /* D RQSVSCHEDENV JCL SCHEDENV value @LE */
    =(var_offset) SMF30PFL +16 .

  var_offset = section_offset + 97       /* 000060 */
  PARSE VAR smf_record , /* D RQSVJCLCONVERSIONTIME JCL conversion t */
    =(var_offset) SMF30JQT +4 .

  var_offset = section_offset + 101       /* 000064 */
  PARSE VAR smf_record , /* D RqsvSysOrResAffTime Resource and/or sy */
    =(var_offset) SMF30RQT +4 .

  var_offset = section_offset + 105       /* 000068 */
  PARSE VAR smf_record , /* D RqsvIneligibleTime Hold time not due t */
    =(var_offset) SMF30HQT +4 .

  var_offset = section_offset + 109       /* 00006C */
  PARSE VAR smf_record , /* D RqsvQueueTime Time that job was eligib */
    =(var_offset) SMF30SQT +4 .

  var_offset = section_offset + 113       /* 000070 */
  PARSE VAR smf_record ,            /* Performance section flags @LE */
    =(var_offset) SMF30PF1 +1 .
                         /* D RqsvResetBeforeInitiation Reset before */
  SMF30PFJ = BITAND(SMF30PF1,X'80')
                           /* D RqsvResetAfterInitiation Reset after */
  SMF30PFR = BITAND(SMF30PF1,X'40')
                                   /* D RqsvOperatorForcedInitiation */
  SMF30PFF = BITAND(SMF30PF1,X'20')
                                            /* D RqsvJobReincarnated */
  SMF30RTR = BITAND(SMF30PF1,X'10')
                                              /* D RqsvRSDIncomplete */
  SMF30MSI = BITAND(SMF30PF1,X'08')
                                   /* Job is executing in a workload */
  SMF30WMI = BITAND(SMF30PF1,X'04')
                          /* RasdCProtCpu Service class assigned was */
  SMF30CCP = BITAND(SMF30PF1,X'02')
                            /* RasdCProtStg Service class served was */
  SMF30CSP = BITAND(SMF30PF1,X'01')

  var_offset = section_offset + 114       /* 000071 */
  PARSE VAR smf_record ,                /* Performance section flags */
    =(var_offset) SMF30PF2 +1 .
                                  /* RasdASProtStg Address space was */
  SMF30ASP = BITAND(SMF30PF2,X'80')
                       /* RasdTrxnMgmtExempt Address space cannot be */
  SMF30SME = BITAND(SMF30PF2,X'40')
                      /* RasdCpuProtected Address space is currently */
  SMF30CPR = BITAND(SMF30PF2,X'20')
                      /* RasdStgProtected Address space is currently */
  SMF30SPR = BITAND(SMF30PF2,X'10')
                                     /* The following fields contain */
  SMF30PIN = BITAND(SMF30PF2,X'08')
                     /* RqsvTrxnMgmtBoth The address space matched a */
  SMF30CRM = BITAND(SMF30PF2,X'04')

  var_offset = section_offset + 115       /* 000072 */
  PARSE VAR smf_record ,                            /* Flag byte @LO */
    =(var_offset) SMF30INV +1 .
                                    /* Bit 0 When on, indicates that */
  SMF30SRV_INV = BITAND(SMF30INV,X'80')
                                    /* Bit 1 When on, indicates that */
  SMF30CSU_INV = BITAND(SMF30INV,X'40')
                                    /* Bit 2 When on, indicates that */
  SMF30SRB_INV = BITAND(SMF30INV,X'20')
                                    /* Bit 3 When on, indicates that */
  SMF30IO_INV = BITAND(SMF30INV,X'10')
                                    /* Bit 4 When on, indicates that */
  SMF30MSO_INV = BITAND(SMF30INV,X'08')
                                    /* Bit 5 When on, indicates that */
  SMF30ESU_INV = BITAND(SMF30INV,X'04')

  var_offset = section_offset + 116       /* 000073 */
  PARSE VAR smf_record ,          /* Contains information associated */
    =(var_offset) SMF30ZEP +1 .

  var_offset = section_offset + 117       /* 000074 */
  PARSE VAR smf_record , /* IWMCLSFY SUBCOLN Subsystem collection na */
    =(var_offset) SMF30JPN +8 .

  var_offset = section_offset + 125       /* 00007C */
  PARSE VAR smf_record ,             /* MSO SDC, scaled by 10000 @0C */
    =(var_offset) SMF30MSC +4 .

  var_offset = section_offset + 129       /* 000080 */
  PARSE VAR smf_record ,                /* CPU SDC, scaled by 10 @0C */
    =(var_offset) SMF30CPC +2 .

  var_offset = section_offset + 131       /* 000082 */
  PARSE VAR smf_record ,                /* IOC SDC, scaled by 10 @0C */
    =(var_offset) SMF30LOC +2 .

  var_offset = section_offset + 133       /* 000084 */
  PARSE VAR smf_record ,                /* SRB SDC, scaled by 10 @0C */
    =(var_offset) SMF30SRC +2 .

  var_offset = section_offset + 135       /* 000086 */
  PARSE VAR smf_record ,                /* zAAP Normalization Factor */
    =(var_offset) SMF30ZNF +2 .

  var_offset = section_offset + 137       /* 000088 */
  PARSE VAR smf_record ,                /* zIIP Normalization Factor */
    =(var_offset) SMF30SNF +2 .

  var_offset = section_offset + 139       /* 00008A */
  PARSE VAR smf_record ,                /* Reserved for alignment of */
    =(var_offset) SMF30RS6 +6 .

  var_offset = section_offset + 145       /* 000090 */
  PARSE VAR smf_record ,             /* RQSVSRVL TOTAL SERVICE UNITS */
    =(var_offset) SMF30SRV_L +8 .

  var_offset = section_offset + 153       /* 000098 */
  PARSE VAR smf_record ,               /* RQSVCPUL CPU SERVICE UNITS */
    =(var_offset) SMF30CSU_L +8 .

  var_offset = section_offset + 161       /* 0000A0 */
  PARSE VAR smf_record ,               /* RQSVSRBL SRB SERVICE UNITS */
    =(var_offset) SMF30SRB_L +8 .

  var_offset = section_offset + 169       /* 0000A8 */
  PARSE VAR smf_record ,               /* RQSVIOCL I/O SERVICE UNITS */
    =(var_offset) SMF30IO_L +8 .

  var_offset = section_offset + 177       /* 0000B0 */
  PARSE VAR smf_record ,               /* RQSVMSOL MSO SERVICE UNITS */
    =(var_offset) SMF30MSO_L +8 .

  var_offset = section_offset + 185       /* 0000B8 */
  PARSE VAR smf_record ,               /* RQSVECPL MSO SERVICE UNITS */
    =(var_offset) SMF30ESU_L +8 .

  var_offset = section_offset + 193       /* 0000C0 */
  PARSE VAR smf_record ,          /* Contains information associated */
    =(var_offset) SMF30ACB +1 .
                                  /* Contains information associated */
  SMF30LGA = BITAND(SMF30ACB,X'80')
                                  /* Contains information associated */
  SMF30P1A = BITAND(SMF30ACB,X'40')

  var_offset = section_offset + 194       /* 0000C1 */
  PARSE VAR smf_record ,          /* Contains information associated */
    =(var_offset) SMF30CR +1 .

  var_offset = section_offset + 195       /* 0000C2 */
  PARSE VAR smf_record ,         /* The number of processor capacity */
    =(var_offset) SMF30_Capacity_Change_Cnt +2 .

  var_offset = section_offset + 197       /* 0000C4 */
  PARSE VAR smf_record ,           /* Physical CPU adjustment factor */
    =(var_offset) SMF30_RCTPCPUA_Actual +4 .

  var_offset = section_offset + 201       /* 0000C8 */
  PARSE VAR smf_record ,           /* Physical CPU adjustment factor */
    =(var_offset) SMF30_RCTPCPUA_Nominal +4 .

  var_offset = section_offset + 205       /* 0000CC */
  PARSE VAR smf_record ,                       /* scaling factor for */
    =(var_offset) SMF30_RCTPCPUA_scaling_factor +4 .

  var_offset = section_offset + 209       /* 0000D0 */
  PARSE VAR smf_record ,                /* When zero, the indication */
    =(var_offset) SMF30_Capacity_Adjustment_Ind +1 .

  var_offset = section_offset + 210       /* 0000D1 */
  PARSE VAR smf_record ,            /* Indicates the reason which is */
    =(var_offset) SMF30_Capacity_Change_Rsn +1 .

  var_offset = section_offset + 211       /* 0000D2 */
  PARSE VAR smf_record ,             /* Processor capacity flags @LV */
    =(var_offset) SMF30_Capacity_Flags +1 .
                                      /* When on, indicates that the */
  SMF30_Event_Driven_Intvl_Rec = BITAND(SMF30_Capacity_Flags,X'80')
                                       /* When on, indicates that an */
  SMF30_RQSVSUS_Err = BITAND(SMF30_Capacity_Flags,X'40')
                                       /* When on, indicates that an */
  SMF30_Capacity_Data_err = BITAND(SMF30_Capacity_Flags,X'20')
                                       /* This bit is set in records */
  SMF30_PCD_Rsvd_Exists = BITAND(SMF30_Capacity_Flags,X'10')

  var_offset = section_offset + 212       /* 0000D3 */
  PARSE VAR smf_record ,               /* Reserved for alignment @PN */
    =(var_offset) SMF30RS5 +1 .

  var_offset = section_offset + 213       /* 0000D4 */
  PARSE VAR smf_record ,          /* Nominal CPU rate adjustment @PN */
    =(var_offset) SMF30_RMCTADJN_Nominal +4 .

  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Parse the DSECT named: SMF30OPS.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
SMF30OPS_Parse_Routine:

  var_offset = section_offset + 1       /* 000000 */
  PARSE VAR smf_record ,     /* TCTPDASD NUMBER OF NON-SPECIFIC DASD */
    =(var_offset) SMF30PDM +4 .

  var_offset = section_offset + 5       /* 000004 */
  PARSE VAR smf_record ,  /* TCTRDASD NUMBER OF SPECIFIC DASD MOUNTS */
    =(var_offset) SMF30PRD +4 .

  var_offset = section_offset + 9       /* 000008 */
  PARSE VAR smf_record ,     /* TCTPTAPE NUMBER OF NON-SPECIFIC TAPE */
    =(var_offset) SMF30PTM +4 .

  var_offset = section_offset + 13       /* 00000C */
  PARSE VAR smf_record ,  /* TCTRTAPE NUMBER OF SPECIFIC TAPE MOUNTS */
    =(var_offset) SMF30TPR +4 .

  var_offset = section_offset + 17       /* 000010 */
  PARSE VAR smf_record ,       /* TCTPMSS NUMBER OF NON-SPECIFIC MSS */
    =(var_offset) SMF30MTM +4 .

  var_offset = section_offset + 21       /* 000014 */
  PARSE VAR smf_record ,   /* TCTRMSS NUMBER OF SPECIFIC MSS MOUNTS. */
    =(var_offset) SMF30MSR +4 .

  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Parse the DSECT named: SMF30AR.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
SMF30AR_Parse_Routine:

  var_offset = section_offset + 1       /* 000000 */
  PARSE VAR smf_record ,            /* TOTAL NUMBER OF CONVERSATIONS */
    =(var_offset) SMF30CN +4 .

  var_offset = section_offset + 5       /* 000004 */
  PARSE VAR smf_record ,            /* TOTAL NUMBER OF CONVERSATIONS */
    =(var_offset) SMF30CNA +4 .

  var_offset = section_offset + 9       /* 000008 */
  PARSE VAR smf_record ,             /* TOTAL NUMBER OF TIMES THE TP */
    =(var_offset) SMF30SEN +4 .

  var_offset = section_offset + 13       /* 00000C */
  PARSE VAR smf_record ,             /* TOTAL AMOUNT OF DATA SENT BY */
    =(var_offset) SMF30DAT +8 .

  var_offset = section_offset + 21       /* 000014 */
  PARSE VAR smf_record ,             /* TOTAL NUMBER OF TIMES THE TP */
    =(var_offset) SMF30REC +4 .

  var_offset = section_offset + 25       /* 000018 */
  PARSE VAR smf_record ,            /* TOTAL AMOUNT FO DATA RECIEVED */
    =(var_offset) SMF30DAR +8 .

  var_offset = section_offset + 33       /* 000020 */
  PARSE VAR smf_record ,               /* TOTAL NUMBER OF ACTIVE @DP */
    =(var_offset) SMF30TAC +4 .

  var_offset = section_offset + 37       /* 000024 */
  PARSE VAR smf_record ,          /* NUMBER OF APPC/MVS TRANSACTIONS */
    =(var_offset) SMF30ATR +4 .

  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Parse the DSECT named: SMF30DR.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
SMF30DR_Parse_Routine:

  var_offset = section_offset + 1       /* 000000 */
  PARSE VAR smf_record ,                  /* Number of conversations */
    =(var_offset) SMF30DC +4 .

  var_offset = section_offset + 5       /* 000004 */
  PARSE VAR smf_record ,                            /* Number of all */
    =(var_offset) SMF30DCA +4 .

  var_offset = section_offset + 9       /* 000008 */
  PARSE VAR smf_record ,                      /* Number of times the */
    =(var_offset) SMF30DSC +4 .

  var_offset = section_offset + 13       /* 00000C */
  PARSE VAR smf_record ,               /* Amount of data sent by the */
    =(var_offset) SMF30DDS +8 .

  var_offset = section_offset + 21       /* 000014 */
  PARSE VAR smf_record ,                      /* Number of times the */
    =(var_offset) SMF30DRC +4 .

  var_offset = section_offset + 25       /* 000018 */
  PARSE VAR smf_record ,                  /* Amount of data received */
    =(var_offset) SMF30DDR +8 .

  var_offset = section_offset + 33       /* 000020 */
  PARSE VAR smf_record ,                         /* Number of active */
    =(var_offset) SMF30DAC +4 .

  var_offset = section_offset + 37       /* 000024 */
  PARSE VAR smf_record ,                       /* Number of APPC/MVS */
    =(var_offset) SMF30DTR +4 .

  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Parse the DSECT named: SMF30OP.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
SMF30OP_Parse_Routine:

  var_offset = section_offset + 1       /* 000000 */
  PARSE VAR smf_record ,                           /* Process ID @LU */
    =(var_offset) SMF30OPI +4 .

  var_offset = section_offset + 5       /* 000004 */
  PARSE VAR smf_record ,                     /* Process Group ID @LU */
    =(var_offset) SMF30OPG +4 .

  var_offset = section_offset + 9       /* 000008 */
  PARSE VAR smf_record ,                      /* Process User ID @LU */
    =(var_offset) SMF30OUI +4 .

  var_offset = section_offset + 13       /* 00000C */
  PARSE VAR smf_record ,                /* Process User Group ID @LU */
    =(var_offset) SMF30OUG +4 .

  var_offset = section_offset + 17       /* 000010 */
  PARSE VAR smf_record ,                   /* Process Session ID @LU */
    =(var_offset) SMF30OSI +4 .

  var_offset = section_offset + 21       /* 000014 */
  PARSE VAR smf_record ,            /* Total CPU time accumulated by */
    =(var_offset) SMF30OSC +4 .

  var_offset = section_offset + 25       /* 000018 */
  PARSE VAR smf_record ,               /* Number of OpenMVS Syscalls */
    =(var_offset) SMF30OST +4 .

  var_offset = section_offset + 29       /* 00001C */
  PARSE VAR smf_record ,           /* Number of directory I/O blocks */
    =(var_offset) SMF30ODR +4 .

  var_offset = section_offset + 33       /* 000020 */
  PARSE VAR smf_record ,                /* Number of I/O blocks read */
    =(var_offset) SMF30OFR +4 .

  var_offset = section_offset + 37       /* 000024 */
  PARSE VAR smf_record ,             /* Number of I/O blocks written */
    =(var_offset) SMF30OFW +4 .

  var_offset = section_offset + 41       /* 000028 */
  PARSE VAR smf_record ,                /* Number of I/O blocks read */
    =(var_offset) SMF30OPR +4 .

  var_offset = section_offset + 45       /* 00002C */
  PARSE VAR smf_record ,             /* Number of I/O blocks written */
    =(var_offset) SMF30OPW +4 .

  var_offset = section_offset + 49       /* 000030 */
  PARSE VAR smf_record ,                /* Number of I/O blocks read */
    =(var_offset) SMF30OSR +4 .

  var_offset = section_offset + 53       /* 000034 */
  PARSE VAR smf_record ,             /* Number of I/O blocks written */
    =(var_offset) SMF30OSW +4 .

  var_offset = section_offset + 57       /* 000038 */
  PARSE VAR smf_record ,           /* Number of path name Look calls */
    =(var_offset) SMF30OLL +4 .

  var_offset = section_offset + 61       /* 00003C */
  PARSE VAR smf_record ,           /* Number of path name Look calls */
    =(var_offset) SMF30OLP +4 .

  var_offset = section_offset + 65       /* 000040 */
  PARSE VAR smf_record ,           /* Number of path name Generation */
    =(var_offset) SMF30OGL +4 .

  var_offset = section_offset + 69       /* 000044 */
  PARSE VAR smf_record ,           /* Number of path name Generation */
    =(var_offset) SMF30OGP +4 .

  var_offset = section_offset + 73       /* 000048 */
  PARSE VAR smf_record ,     /* OpenMVS parent process ID number @L5 */
    =(var_offset) SMF30OPP +4 .

  var_offset = section_offset + 77       /* 00004C */
  PARSE VAR smf_record ,     /* Number of I/O blocks read for Remote */
    =(var_offset) SMF30OKR +4 .

  var_offset = section_offset + 81       /* 000050 */
  PARSE VAR smf_record ,         /* Number of I/O blocks written for */
    =(var_offset) SMF30OKW +4 .

  var_offset = section_offset + 85       /* 000054 */
  PARSE VAR smf_record ,      /* Number of bytes that message queues */
    =(var_offset) SMF30OMS +4 .

  var_offset = section_offset + 89       /* 000058 */
  PARSE VAR smf_record ,      /* Number of bytes that message queues */
    =(var_offset) SMF30OMR +4 .

  var_offset = section_offset + 93       /* 00005C */
  PARSE VAR smf_record ,      /* Number of sync() function calls @LC */
    =(var_offset) SMF30OSY +4 .

  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Parse the DSECT named: SMF30UD.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
SMF30UD_Parse_Routine:

  var_offset = section_offset + 1       /* 000000 */
  PARSE VAR smf_record ,         /* Product Owner or Vendor Name @06 */
    =(var_offset) SMF30UPO +16 .

  var_offset = section_offset + 17       /* 000010 */
  PARSE VAR smf_record ,                         /* Product Name @06 */
    =(var_offset) SMF30UPN +16 .

  var_offset = section_offset + 33       /* 000020 */
  PARSE VAR smf_record ,                      /* Product Version @06 */
    =(var_offset) SMF30UPV +8 .

  var_offset = section_offset + 41       /* 000028 */
  PARSE VAR smf_record ,                     /* Product Qualifer @06 */
    =(var_offset) SMF30UPQ +8 .

  var_offset = section_offset + 49       /* 000030 */
  PARSE VAR smf_record ,                     /* Product ID Value @06 */
    =(var_offset) SMF30UPI +8 .

  var_offset = section_offset + 57       /* 000038 */
  PARSE VAR smf_record ,       /* Product CPU Time (.01 Seconds) @06 */
    =(var_offset) SMF30UCT +4 .

  var_offset = section_offset + 61       /* 00003C */
  PARSE VAR smf_record ,       /* Product SRB Time (.01 Seconds) @06 */
    =(var_offset) SMF30UCS +4 .

  var_offset = section_offset + 65       /* 000040 */
  PARSE VAR smf_record ,     /* Product 'Specific' Resource Data @06 */
    =(var_offset) SMF30URD +8 .

  var_offset = section_offset + 73       /* 000048 */
  PARSE VAR smf_record ,     /* Data format of value in SMF30URD @06 */
    =(var_offset) SMF30UDF +1 .

  var_offset = section_offset + 74       /* 000049 */
  PARSE VAR smf_record ,                    /* Usage Entry Flags @06 */
    =(var_offset) SMF30UFG +1 .
                              /* UNAUTHORIZED REGISTER Requested @06 */
  SMF30UUN = BITAND(SMF30UFG,X'80')

  var_offset = section_offset + 75       /* 00004A */
  PARSE VAR smf_record ,                             /* Reserved @06 */
    =(var_offset) SMF30UD_unnamed_1 +2 .

  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Parse the DSECT named: SMF30RM.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
SMF30RM_Parse_Routine:

  var_offset = section_offset + 1       /* 000000 */
  PARSE VAR smf_record ,                         /* Element Name @L3 */
    =(var_offset) SMF30RNM +16 .

  var_offset = section_offset + 17       /* 000010 */
  PARSE VAR smf_record ,                         /* Element Type @L3 */
    =(var_offset) SMF30RTP +8 .

  var_offset = section_offset + 25       /* 000018 */
  PARSE VAR smf_record ,            /* Restart Group for Element @L3 */
    =(var_offset) SMF30RRG +16 .

  var_offset = section_offset + 41       /* 000028 */
  PARSE VAR smf_record ,    /* The system name for the system on @L3 */
    =(var_offset) SMF30RSN +8 .

  var_offset = section_offset + 49       /* 000030 */
  PARSE VAR smf_record ,     /* - Time (local) Element requested @L3 */
    =(var_offset) SMF30RGT +4 .

  var_offset = section_offset + 53       /* 000034 */
  PARSE VAR smf_record ,    /* - Date Element requested REGISTER @L3 */
    =(var_offset) SMF30RGD +4 .

  var_offset = section_offset + 57       /* 000038 */
  PARSE VAR smf_record ,     /* - Time (local) Element requested @L3 */
    =(var_offset) SMF30RWT +4 .

  var_offset = section_offset + 61       /* 00003C */
  PARSE VAR smf_record ,    /* - Date Element requested WAITPRED @L3 */
    =(var_offset) SMF30RWD +4 .

  var_offset = section_offset + 65       /* 000040 */
  PARSE VAR smf_record ,    /* - Time (local) Element was READY, @L3 */
    =(var_offset) SMF30RYT +4 .

  var_offset = section_offset + 69       /* 000044 */
  PARSE VAR smf_record ,     /* - Date Element was READY, in the @L3 */
    =(var_offset) SMF30RYD +4 .

  var_offset = section_offset + 73       /* 000048 */
  PARSE VAR smf_record ,           /* - Time (local) Element was @L3 */
    =(var_offset) SMF30RTT +4 .

  var_offset = section_offset + 77       /* 00004C */
  PARSE VAR smf_record ,  /* - Date Element was DEREGISTERED, in @L3 */
    =(var_offset) SMF30RTD +4 .

  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Parse the DSECT named: SMF30MSE.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
SMF30MSE_Parse_Routine:

  var_offset = section_offset + 1       /* 000000 */
  PARSE VAR smf_record ,                   /* Unique system key. @LF */
    =(var_offset) SMF30MKY +12 .

  var_offset = section_offset + 1       /* 000000 */
  PARSE VAR smf_record ,                         /* System name. @LF */
    =(var_offset) SMF30MRS +8 .

  var_offset = section_offset + 9       /* 000008 */
  PARSE VAR smf_record ,      /* Adjustment factor for CPU rate. @LF */
    =(var_offset) SMF30MRA +4 .

  var_offset = section_offset + 13       /* 00000C */
  PARSE VAR smf_record ,  /* CPU Time used by dependent enclaves @LF */
    =(var_offset) SMF30MRD +4 .

  var_offset = section_offset + 17       /* 000010 */
  PARSE VAR smf_record ,         /* CPU Time used by independent @LF */
    =(var_offset) SMF30MRI +4 .

  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Parse the DSECT named: SMF30CDS.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
SMF30CDS_Parse_Routine:

  var_offset = section_offset + 1       /* 000000 */
  PARSE VAR smf_record ,    /* Instruction counter related flags. If */
    =(var_offset) SMF30_InstFlgs1 +1 .
                                           /* There was a disruption */
  SMF30_InstCaptDisruption = BITAND(SMF30_InstFlgs1,X'80')
                                     /* The following fields contain */
  SMF30_InstCaptLimited = BITAND(SMF30_InstFlgs1,X'40')

  var_offset = section_offset + 2       /* 000001 */
  PARSE VAR smf_record ,                             /* Reserved @LZ */
    =(var_offset) SMF30CDS_unnamed_1 +7 .

  var_offset = section_offset + 9       /* 000008 */
  PARSE VAR smf_record ,                            /* The number of */
    =(var_offset) SMF30_Inst_CP_Task +8 .

  var_offset = section_offset + 17       /* 000010 */
  PARSE VAR smf_record ,                            /* The number of */
    =(var_offset) SMF30_Inst_CP_NonPreemptSRB +8 .

  var_offset = section_offset + 25       /* 000018 */
  PARSE VAR smf_record ,                            /* The number of */
    =(var_offset) SMF30_Inst_CP_PreemptSRB +8 .

  var_offset = section_offset + 33       /* 000020 */
  PARSE VAR smf_record ,                            /* The number of */
    =(var_offset) SMF30_Inst_Offload +8 .

  var_offset = section_offset + 41       /* 000028 */
  PARSE VAR smf_record ,                            /* The number of */
    =(var_offset) SMF30_Inst_OffloadOnCP +8 .

  var_offset = section_offset + 49       /* 000030 */
  PARSE VAR smf_record ,                            /* The number of */
    =(var_offset) SMF30_Inst_CP_Enclave +8 .

  var_offset = section_offset + 57       /* 000038 */
  PARSE VAR smf_record ,                            /* The number of */
    =(var_offset) SMF30_Inst_Offload_Enclave +8 .

  var_offset = section_offset + 65       /* 000040 */
  PARSE VAR smf_record ,                            /* The number of */
    =(var_offset) SMF30_Inst_OffloadOnCP_Enclave +8 .

  var_offset = section_offset + 73       /* 000048 */
  PARSE VAR smf_record ,                            /* The number of */
    =(var_offset) SMF30_Inst_CP_DepEnc +8 .

  var_offset = section_offset + 81       /* 000050 */
  PARSE VAR smf_record ,                            /* The number of */
    =(var_offset) SMF30_Inst_Offload_DepEnc +8 .

  var_offset = section_offset + 89       /* 000058 */
  PARSE VAR smf_record ,                            /* The number of */
    =(var_offset) SMF30_Inst_OffloadOnCP_DepEnc +8 .

  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Parse the DSECT named: SMF30USS.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
SMF30USS_Parse_Routine:

  var_offset = section_offset + 1       /* 000000 */
  PARSE VAR smf_record ,          /* Total number of compression and */
    =(var_offset) SMF30_US_ComprReq +8 .

  var_offset = section_offset + 9       /* 000008 */
  PARSE VAR smf_record ,            /* Total number of problem state */
    =(var_offset) SMF30_US_ComprReq_Prob +8 .

  var_offset = section_offset + 17       /* 000010 */
  PARSE VAR smf_record ,     /* Total queue time. The amount of time */
    =(var_offset) SMF30_US_QueueTime +8 .

  var_offset = section_offset + 25       /* 000018 */
  PARSE VAR smf_record ,    /* Total execution time (in microseconds */
    =(var_offset) SMF30_US_ExecTime +8 .

  var_offset = section_offset + 33       /* 000020 */
  PARSE VAR smf_record ,    /* Deflate (i.e. Compression) statistics */
    =(var_offset) SMF30_US_DeflateStats +16 .

  var_offset = section_offset + 33       /* 000020 */
  PARSE VAR smf_record ,               /* Total number (in bytes) of */
    =(var_offset) SMF30_US_Def_UncomprIn +8 .

  var_offset = section_offset + 41       /* 000028 */
  PARSE VAR smf_record ,    /* Total number (in bytes) of compressed */
    =(var_offset) SMF30_US_Def_ComprOut +8 .

  var_offset = section_offset + 49       /* 000030 */
  PARSE VAR smf_record ,             /* Inflate (i.e. decompression) */
    =(var_offset) SMF30_US_InflateStats +16 .

  var_offset = section_offset + 49       /* 000030 */
  PARSE VAR smf_record ,    /* Total number (in bytes) of compressed */
    =(var_offset) SMF30_US_Inf_ComprIn +8 .

  var_offset = section_offset + 57       /* 000038 */
  PARSE VAR smf_record ,               /* Total number (in bytes) of */
    =(var_offset) SMF30_US_Inf_DecomprOut +8 .

  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Parse the DSECT named: SMFRX032.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
SMFRX032_Parse_Routine:

  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Parse the DSECT named: SMFRCD32.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
SMFRCD32_Parse_Routine:

  var_offset = section_offset + 1       /* 000000 */
  PARSE VAR smf_record ,                    /* RECORD HEADER @G744PJ */
    =(var_offset) SMF32RPS +22 .

  var_offset = section_offset + 1       /* 000000 */
  PARSE VAR smf_record ,                    /* RECORD LENGTH @G743PJ */
    =(var_offset) SMF32LEN +2 .

  var_offset = section_offset + 3       /* 000002 */
  PARSE VAR smf_record ,               /* SEGMENT DESCRIPTOR @G743PJ */
    =(var_offset) SMF32SEG +2 .

  var_offset = section_offset + 5       /* 000004 */
  PARSE VAR smf_record ,                 /* HEADER FLAG BYTE @G743PJ */
    =(var_offset) SMF32FLG +1 .

  var_offset = section_offset + 6       /* 000005 */
  PARSE VAR smf_record ,                   /* RECORD TYPE 32 @VS4984 */
    =(var_offset) SMF32RTY +1 .

  var_offset = section_offset + 7       /* 000006 */
  PARSE VAR smf_record ,              /* RECORD WRITTEN TIME @VS4984 */
    =(var_offset) SMF32TME +4 .

  var_offset = section_offset + 11       /* 00000A */
  PARSE VAR smf_record ,              /* RECORD WRITTEN DATE @G743PJ */
    =(var_offset) SMF32DTE +4 .

  var_offset = section_offset + 15       /* 00000E */
  PARSE VAR smf_record ,    /* SMCASID SYSTEM IDENTIFICATION @G743PJ */
    =(var_offset) SMF32SID +4 .

  var_offset = section_offset + 19       /* 000012 */
  PARSE VAR smf_record ,            /* OUCBSUBN SUBSYSTEM ID @G743PJ */
    =(var_offset) SMF32WID +4 .

  var_offset = section_offset + 23       /* 000016 */
  PARSE VAR smf_record ,                   /* RECORD SUBTYPE @G860P2 */
    =(var_offset) SMF32STP +2 .

  var_offset = section_offset + 25       /* 000018 */
  PARSE VAR smf_record ,                /* SELF DEFINING SECTION @09 */
    =(var_offset) SMF32SDS +28 .

  var_offset = section_offset + 25       /* 000018 */
  PARSE VAR smf_record ,                /* OFFSET TO PRODUCT SEGMENT */
    =(var_offset) SMF32POF +4 .

  var_offset = section_offset + 29       /* 00001C */
  PARSE VAR smf_record ,                /* LENGTH OF PRODUCT SEGMENT */
    =(var_offset) SMF32PLN +2 .

  var_offset = section_offset + 31       /* 00001E */
  PARSE VAR smf_record ,                 /* NUMBEROF PRODUCT SEGMENT */
    =(var_offset) SMF32PON +2 .

  var_offset = section_offset + 33       /* 000020 */
  PARSE VAR smf_record ,         /* OFFSET TO IDENTIFICATION SEGMENT */
    =(var_offset) SMF32IOF +4 .

  var_offset = section_offset + 37       /* 000024 */
  PARSE VAR smf_record ,         /* LENGTH OF IDENTIFICATION SEGMENT */
    =(var_offset) SMF32ILN +2 .

  var_offset = section_offset + 39       /* 000026 */
  PARSE VAR smf_record ,        /* NUMBER OF IDENTIFICATION SEGMENTS */
    =(var_offset) SMF32ION +2 .

  var_offset = section_offset + 41       /* 000028 */
  PARSE VAR smf_record ,            /* OFFSET TO TSO COMMAND SEGMENT */
    =(var_offset) SMF32COF +4 .

  var_offset = section_offset + 45       /* 00002C */
  PARSE VAR smf_record ,            /* LENGTH OF TSO COMMAND SEGMENT */
    =(var_offset) SMF32CLN +2 .

  var_offset = section_offset + 47       /* 00002E */
  PARSE VAR smf_record ,           /* NUMBER OF TSO COMMAND SEGMENTS */
    =(var_offset) SMF32CON +2 .

  var_offset = section_offset + 49       /* 000030 */
  PARSE VAR smf_record ,           /* NUMBER OF TSO COMMAND SEGMENTS */
    =(var_offset) SMF32COS +4 .

  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Parse the DSECT named: SMF32PSS.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
SMF32PSS_Parse_Routine:

  var_offset = section_offset + 1       /* 000000 */
  PARSE VAR smf_record ,          /* SUB TYPE ID FOR TYPE 32 @G743PJ */
    =(var_offset) SMF32TYP +2 .

  var_offset = section_offset + 3       /* 000002 */
  PARSE VAR smf_record ,      /* RECORD VERSION NUMBER C'01' @G743PJ */
    =(var_offset) SMF32RVN +2 .

  var_offset = section_offset + 5       /* 000004 */
  PARSE VAR smf_record ,       /* PRODUCT NAME 'TSO FOR TSO' @G743PJ */
    =(var_offset) SMF32PNM +8 .

  var_offset = section_offset + 13       /* 00000C */
  PARSE VAR smf_record ,                     /* MVS Product name @05 */
    =(var_offset) SMF32OSL +8 .

  var_offset = section_offset + 21       /* 000014 */
  PARSE VAR smf_record ,                          /* System name @05 */
    =(var_offset) SMF32SYN +8 .

  var_offset = section_offset + 29       /* 00001C */
  PARSE VAR smf_record ,                         /* Sysplex name @05 */
    =(var_offset) SMF32SYP +8 .

  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Parse the DSECT named: SMF32ID.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
SMF32ID_Parse_Routine:

  var_offset = section_offset + 1       /* 000000 */
  PARSE VAR smf_record ,        /* JMRJOB JOB / SESSION NAME @G743PJ */
    =(var_offset) SMF32JBN +8 .

  var_offset = section_offset + 9       /* 000008 */
  PARSE VAR smf_record ,            /* SCTPGMNM PROGRAM NAME @G743PJ */
    =(var_offset) SMF32PGM +8 .

  var_offset = section_offset + 17       /* 000010 */
  PARSE VAR smf_record ,               /* SCTSNAME STEP NAME @G743PJ */
    =(var_offset) SMF32STM +8 .

  var_offset = section_offset + 25       /* 000018 */
  PARSE VAR smf_record , /* JMRUSEID User-defined identification fie */
    =(var_offset) SMF32UIF +8 .

  var_offset = section_offset + 33       /* 000020 */
  PARSE VAR smf_record ,              /* SSIB JES JOB NUMBER @G743PJ */
    =(var_offset) SMF32JNM +8 .

  var_offset = section_offset + 41       /* 000028 */
  PARSE VAR smf_record ,             /* LCTSNUMB STEP NUMBER @G743PJ */
    =(var_offset) SMF32STN +2 .

  var_offset = section_offset + 43       /* 00002A */
  PARSE VAR smf_record ,                         /* RESERVED @VS4978 */
    =(var_offset) SMF32RV1 +2 .

  var_offset = section_offset + 45       /* 00002C */
  PARSE VAR smf_record ,     /* OUCBNPG Job performance group number */
    =(var_offset) SMF32PGN +2 .

  var_offset = section_offset + 47       /* 00002E */
  PARSE VAR smf_record ,      /* JCTJPRTY JES INPUT PRIORITY @G743PJ */
    =(var_offset) SMF32JPT +2 .

  var_offset = section_offset + 49       /* 000030 */
  PARSE VAR smf_record ,   /* TCTAST DEVICE ALLOC START TIME @G743PJ */
    =(var_offset) SMF32AST +4 .

  var_offset = section_offset + 53       /* 000034 */
  PARSE VAR smf_record , /* TCTPPST PROBLEM PROGRAM START TIME @G744 */
    =(var_offset) SMF32PPS +4 .

  var_offset = section_offset + 57       /* 000038 */
  PARSE VAR smf_record ,    /* JCTJMRSS STEP INITIATION TIME @G743PJ */
    =(var_offset) SMF32SIT +4 .

  var_offset = section_offset + 61       /* 00003C */
  PARSE VAR smf_record ,      /* JCTSSD STEP INITIATION DATE @G743PJ */
    =(var_offset) SMF32STD +4 .

  var_offset = section_offset + 65       /* 000040 */
  PARSE VAR smf_record ,       /* JMRENTRY READER START TIME @G743PJ */
    =(var_offset) SMF32RST +4 .

  var_offset = section_offset + 69       /* 000044 */
  PARSE VAR smf_record ,       /* JMREDATE READER START DATE @G743PJ */
    =(var_offset) SMF32RSD +4 .

  var_offset = section_offset + 73       /* 000048 */
  PARSE VAR smf_record , /* JMRDRSTP LOGON ENQUEUE TIME/DATE @G744PJ */
    =(var_offset) SMF32RDE +8 .

  var_offset = section_offset + 73       /* 000048 */
  PARSE VAR smf_record ,               /* LOGON ENQUEUE TIME @G744PJ */
    =(var_offset) SMF32RET +4 .

  var_offset = section_offset + 77       /* 00004C */
  PARSE VAR smf_record ,               /* LOGON ENQUEUE DATE @G744PJ */
    =(var_offset) SMF32RED +4 .

  var_offset = section_offset + 81       /* 000050 */
  PARSE VAR smf_record ,        /* ACTJNFLD PROGRAMMERS NAME @G743PJ */
    =(var_offset) SMF32USR +20 .

  var_offset = section_offset + 101       /* 000064 */
  PARSE VAR smf_record ,           /* ACEEGRPN RACF GROUP ID @G743PJ */
    =(var_offset) SMF32GRP +8 .

  var_offset = section_offset + 109       /* 00006C */
  PARSE VAR smf_record ,            /* ACEEUSRI RACF USER ID @G743PJ */
    =(var_offset) SMF32RUD +8 .

  var_offset = section_offset + 117       /* 000074 */
  PARSE VAR smf_record , /* ACEETRMF IF RACF IS NOT ACTIVE THIS FIEL */
    =(var_offset) SMF32TID +8 .

  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Parse the DSECT named: SMF32CDS.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
SMF32CDS_Parse_Routine:

  var_offset = section_offset + 1       /* 000000 */
  PARSE VAR smf_record ,            /* BASIC COMMAND SECTION @G744PJ */
    =(var_offset) SMF32BSC +8 .

  var_offset = section_offset + 1       /* 000000 */
  PARSE VAR smf_record ,                 /* TSO COMMAND NAME @G743PJ */
    =(var_offset) SMF32CMD +8 .

  var_offset = section_offset + 9       /* 000008 */
  PARSE VAR smf_record ,                /* COUNT OF COMMANDS @G743PJ */
    =(var_offset) SMF32CNT +4 .

  var_offset = section_offset + 13       /* 00000C */
  PARSE VAR smf_record ,           /* DETAIL COMMAND SECTION @G744PJ */
    =(var_offset) SMF32DTL +12 .

  var_offset = section_offset + 13       /* 00000C */
  PARSE VAR smf_record ,             /* TCB TIME FOR COMMAND @G743PJ */
    =(var_offset) SMF32TCB +4 .

  var_offset = section_offset + 17       /* 000010 */
  PARSE VAR smf_record ,             /* SRB TIME FOR COMMAND @G743PJ */
    =(var_offset) SMF32SRB +4 .

  var_offset = section_offset + 21       /* 000014 */
  PARSE VAR smf_record ,                /* TGETS FOR COMMAND @G743PJ */
    =(var_offset) SMF32TGT +4 .

  var_offset = section_offset + 25       /* 000018 */
  PARSE VAR smf_record ,                /* TPUTS FOR COMMAND @G743PJ */
    =(var_offset) SMF32TPT +4 .

  var_offset = section_offset + 29       /* 00001C */
  PARSE VAR smf_record ,         /* TRANSACTIONS FOR COMMAND @VS4978 */
    =(var_offset) SMF32TRN +4 .

  var_offset = section_offset + 33       /* 000020 */
  PARSE VAR smf_record ,                /* EXCPS FOR COMMAND @VS4978 */
    =(var_offset) SMF32EXP +4 .

  var_offset = section_offset + 37       /* 000024 */
  PARSE VAR smf_record ,        /* TOTAL DEVICE CONNECT TIME @G860P2 */
    =(var_offset) SMF32TCT +4 .

  var_offset = section_offset + 41       /* 000028 */
  PARSE VAR smf_record ,                 /* Detail Section Flags @07 */
    =(var_offset) SMF32DSF +4 .
                                        /* SMF32TRN is not valid @07 */
  SMF32TCF = BITAND(SMF32DSF,X'80')
                                        /* SMF32EXP is not valid @0E */
  SMF32EXF = BITAND(SMF32DSF,X'40')

  var_offset = section_offset + 45       /* 00002C */
  PARSE VAR smf_record ,               /* Reserved for alignment @0F */
    =(var_offset) SMF32RV2 +4 .

  var_offset = section_offset + 49       /* 000030 */
  PARSE VAR smf_record ,                    /* EXCPs for command @0F */
    =(var_offset) SMF32EXX +8 .

  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Parse the DSECT named: SMFRX034.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
SMFRX034_Parse_Routine:

  var_offset = section_offset + 1       /* 000000 */
  PARSE VAR smf_record ,              /* ALIGN TO FULL WORD BOUNDARY */
    =(var_offset) SMFRX034_unnamed_2 +4 .

  var_offset = section_offset + 1       /* 000000 */
  PARSE VAR smf_record ,                            /* RECORD LENGTH */
    =(var_offset) TIVRLEN +2 .

  var_offset = section_offset + 3       /* 000002 */
  PARSE VAR smf_record ,                       /* SEGMENT DESCRIPTOR */
    =(var_offset) TIVRSEG +2 .

  var_offset = section_offset + 5       /* 000004 */
  PARSE VAR smf_record ,                         /* HEADER FLAG BYTE */
    =(var_offset) TIVRFLG +1 .

  var_offset = section_offset + 6       /* 000005 */
  PARSE VAR smf_record ,                 /* RECORD TYPE (34 DECIMAL) */
    =(var_offset) TIVRCDTY +1 .

  var_offset = section_offset + 7       /* 000006 */
  PARSE VAR smf_record ,                  /* TIME STAMP TOD .01 SECS */
    =(var_offset) TIVRCDTS +4 .

  var_offset = section_offset + 11       /* 00000A */
  PARSE VAR smf_record ,                            /* DATE 00YYDDDF */
    =(var_offset) TIVRCDTE +4 .

  var_offset = section_offset + 15       /* 00000E */
  PARSE VAR smf_record ,       /* CPU IDENTIFICATION (SYSTEM, MODEL) */
    =(var_offset) TIVCPUID +4 .

  var_offset = section_offset + 19       /* 000012 */
  PARSE VAR smf_record ,          /* USER IDENTIFICATION FIELD Y0290 */
    =(var_offset) TIVUIF +8 .
  TIVUID = BITAND(TIVUIF,TIVUIF)

  var_offset = section_offset + 27       /* 00001A */
  PARSE VAR smf_record ,                  /* LOGON TIME TOD .01 SECS */
    =(var_offset) TIVONTME +4 .

  var_offset = section_offset + 31       /* 00001E */
  PARSE VAR smf_record ,                            /* DATE 00YYDDDF */
    =(var_offset) TIVONDTE +4 .

  var_offset = section_offset + 35       /* 000022 */
  PARSE VAR smf_record ,        /* User-defined identification field */
    =(var_offset) TIVUDATA +8 .

  var_offset = section_offset + 43       /* 00002A */
  PARSE VAR smf_record ,                     /* STEP SEQUENCE NUMBER */
    =(var_offset) TIVINVSQ +1 .

  var_offset = section_offset + 44       /* 00002B */
  PARSE VAR smf_record ,              /* TOD STEP INITIATION @YL026W */
    =(var_offset) TIVSIT +4 .
                              /* WAS MAIN STOR OCCUPANCY TIME@YL026W */
  TIVCRTME = BITAND(TIVSIT,TIVSIT)

  var_offset = section_offset + 48       /* 00002F */
  PARSE VAR smf_record ,                           /* LINE OUT COUNT */
    =(var_offset) TIVOUTCT +4 .

  var_offset = section_offset + 52       /* 000033 */
  PARSE VAR smf_record ,                            /* LINE IN COUNT */
    =(var_offset) TIVINCT +4 .

  var_offset = section_offset + 56       /* 000037 */
  PARSE VAR smf_record ,                  /* STEP TERMINATION STATUS */
    =(var_offset) TIVSTAT +2 .

  var_offset = section_offset + 58       /* 000039 */
  PARSE VAR smf_record ,                /* STEP DISPATCHING PRIORITY */
    =(var_offset) TIVPRI +1 .

  var_offset = section_offset + 59       /* 00003A */
  PARSE VAR smf_record ,                  /* NAME OF PROGRAM INVOKED */
    =(var_offset) TIVPRGNM +8 .

  var_offset = section_offset + 67       /* 000042 */
  PARSE VAR smf_record ,                         /* STEP (PROC) NAME */
    =(var_offset) TIVINVNM +8 .

  var_offset = section_offset + 75       /* 00004A */
  PARSE VAR smf_record ,                             /* RESERVED @PV */
    =(var_offset) TIVRSV5 +2 .

  var_offset = section_offset + 77       /* 00004C */
  PARSE VAR smf_record ,       /* SYST AREA USED, TOP PRI AREA Y0290 */
    =(var_offset) TIVSYST +2 .
                                                            /* Y0290 */
  TIVRVB = BITAND(TIVSYST,TIVSYST)

  var_offset = section_offset + 79       /* 00004E */
  PARSE VAR smf_record ,            /* CORE ACTUALLY USED IN 1K BLKS */
    =(var_offset) TIVMCRE +2 .
                                 /* STORAGE USED, LOW PRI AREA Y0290 */
  TIVSTU = BITAND(TIVMCRE,TIVMCRE)

  var_offset = section_offset + 81       /* 000050 */
  PARSE VAR smf_record ,                             /* RESERVED @PV */
    =(var_offset) TIVRVC +2 .

  var_offset = section_offset + 83       /* 000052 */
  PARSE VAR smf_record ,      /* EFFECTIVE RGN SIZE IN 1K BLOCKS @PV */
    =(var_offset) TIVEFRGN +4 .
                                /* REG SIZE REQUEST(PRI AREA 1K) @PV */
  TIVPRV = BITAND(TIVEFRGN,TIVEFRGN)

  var_offset = section_offset + 87       /* 000056 */
  PARSE VAR smf_record ,                /* STORAGE PROTECT KEY A4079 */
    =(var_offset) TIVSPK +1 .

  var_offset = section_offset + 88       /* 000057 */
  PARSE VAR smf_record ,              /* STEP TERMINATION INDICATORS */
    =(var_offset) TIVSTI +1 .

  var_offset = section_offset + 89       /* 000058 */
  PARSE VAR smf_record ,                           /* RESERVED A4079 */
    =(var_offset) TIVRV1 +2 .

  var_offset = section_offset + 91       /* 00005A */
  PARSE VAR smf_record ,                  /* ALLOC. START TIME A4079 */
    =(var_offset) TIVAST +4 .

  var_offset = section_offset + 95       /* 00005E */
  PARSE VAR smf_record ,           /* PROBLEM PROG. START TIME A4079 */
    =(var_offset) TIVPPST +4 .

  var_offset = section_offset + 99       /* 000062 */
  PARSE VAR smf_record ,                         /* RESERVED @YL026W */
    =(var_offset) TIVRV2 +1 .

  var_offset = section_offset + 100       /* 000063 */
  PARSE VAR smf_record ,      /* STEP CPU UNDER SRB(.01 SEC) @YL026W */
    =(var_offset) TIVSRBT +3 .

  var_offset = section_offset + 103       /* 000066 */
  PARSE VAR smf_record ,                        /* RECORD INDICATORS */
    =(var_offset) TIVRIN +2 .

  var_offset = section_offset + 105       /* 000068 */
  PARSE VAR smf_record ,               /* OFFSET TO RELOCATE SECTION */
    =(var_offset) TIVRLCT +2 .

  var_offset = section_offset + 107       /* 00006A */
  PARSE VAR smf_record ,              /* LENGTH OF EXCP COUNT FIELDS */
    =(var_offset) TIVVAR +2 .

  var_offset = section_offset + 109       /* 00006C */
  PARSE VAR smf_record ,                             /* DEVICE CLASS */
    =(var_offset) TIVDEVC +1 .

  var_offset = section_offset + 110       /* 00006D */
  PARSE VAR smf_record ,                                /* UNIT TYPE */
    =(var_offset) TIVUTYP +1 .

  var_offset = section_offset + 111       /* 00006E */
  PARSE VAR smf_record ,                        /* Device Number @LY */
    =(var_offset) TIVCUAD +2 .

  var_offset = section_offset + 113       /* 000070 */
  PARSE VAR smf_record ,                               /* EXCP COUNT */
    =(var_offset) TIVNEXCP +4 .

  var_offset = section_offset + 109       /* 00006C */
  PARSE VAR smf_record ,          /* LENGTH OF CPU AND ACCT. SECTION */
    =(var_offset) TIVVARA +1 .

  var_offset = section_offset + 110       /* 00006D */
  PARSE VAR smf_record ,                             /* ACTJTIME @DG */
    =(var_offset) TIVCPUTM +3 .

  var_offset = section_offset + 113       /* 000070 */
  PARSE VAR smf_record ,              /* NUMBER OF ACCOUNTING FIELDS */
    =(var_offset) TIVNBRAC +1 .

  var_offset = section_offset + 114       /* 000071 */
  PARSE VAR smf_record ,                       /* NUMBER OF PAGE-INS */
    =(var_offset) TIVPGIN +4 .

  var_offset = section_offset + 118       /* 000075 */
  PARSE VAR smf_record ,                      /* NUMBER OF PAGE-OUTS */
    =(var_offset) TIVPGOUT +4 .
                                                            /* Y0290 */
  TIVPGOT = BITAND(TIVPGOUT,TIVPGOUT)

  var_offset = section_offset + 122       /* 000079 */
  PARSE VAR smf_record ,                          /* NUMBER OF SWAPS */
    =(var_offset) TIVRGNS +4 .
                                                            /* Y0290 */
  TIVNSW = BITAND(TIVRGNS,TIVRGNS)

  var_offset = section_offset + 126       /* 00007D */
  PARSE VAR smf_record ,              /* NUMBER OF TSO SWAP PAGE-INS */
    =(var_offset) TIVSIN +4 .
                                                            /* Y0290 */
  TIVPSI = BITAND(TIVSIN,TIVSIN)

  var_offset = section_offset + 130       /* 000081 */
  PARSE VAR smf_record ,             /* NUMBER OF TSO SWAP PAGE-OUTS */
    =(var_offset) TIVSOUT +4 .
                                                            /* Y0290 */
  TIVPSO = BITAND(TIVSOUT,TIVSOUT)

  var_offset = section_offset + 134       /* 000085 */
  PARSE VAR smf_record ,                       /* VIO PAGE INS Y0213 */
    =(var_offset) TIVVPI +4 .

  var_offset = section_offset + 138       /* 000089 */
  PARSE VAR smf_record ,                      /* VIO PAGE OUTS Y0213 */
    =(var_offset) TIVVPO +4 .

  var_offset = section_offset + 142       /* 00008D */
  PARSE VAR smf_record ,                /* STEP SERVICE TIME @YM0745 */
    =(var_offset) TIVSST +4 .

  var_offset = section_offset + 146       /* 000091 */
  PARSE VAR smf_record ,                 /* STEP ACTIVE TIME @YM0745 */
    =(var_offset) TIVACT +4 .

  var_offset = section_offset + 146       /* 000091 */
  PARSE VAR smf_record ,             /* STEP ACTIVE TIME - ALIAS @P4 */
    =(var_offset) TIVTAT +4 .

  var_offset = section_offset + 150       /* 000095 */
  PARSE VAR smf_record ,               /* PERFORMANCE NUMBER @YM0745 */
    =(var_offset) TIVPGNO +2 .

  var_offset = section_offset + 152       /* 000097 */
  PARSE VAR smf_record ,  /* STEP TRANSACTION RESIDENCY TIME @Z40FPP */
    =(var_offset) TIVTRANT +4 .

  var_offset = section_offset + 156       /* 00009B */
  PARSE VAR smf_record ,                /* CREAD PAGE MISS COUNT @DF */
    =(var_offset) TIVCPM +4 .

  var_offset = section_offset + 160       /* 00009F */
  PARSE VAR smf_record ,           /* NUMBER OF VIO RECLAIMS @Z40FPP */
    =(var_offset) TIVRCLAM +4 .

  var_offset = section_offset + 164       /* 0000A3 */
  PARSE VAR smf_record ,        /* NUMBER OF COMMON PAGE-INS @Z40FPP */
    =(var_offset) TIVCPGIN +4 .

  var_offset = section_offset + 168       /* 0000A7 */
  PARSE VAR smf_record ,             /* HIPERSPACE PAGE-IN COUNT @LB */
    =(var_offset) TIVHSPI +4 .

  var_offset = section_offset + 172       /* 0000AB */
  PARSE VAR smf_record ,  /* NUMBER OF PAGES STOLEN FROM THIS MEMORY */
    =(var_offset) TIVPGSTL +4 .

  var_offset = section_offset + 176       /* 0000AF */
  PARSE VAR smf_record ,    /* COUNT OF PAGE SECONDS (UNIT IS 1 PAGE */
    =(var_offset) TIVPGSEC +8 .

  var_offset = section_offset + 184       /* 0000B7 */
  PARSE VAR smf_record ,                     /* LPA PAGE INS @G50FPR */
    =(var_offset) TIVLPAI +4 .

  var_offset = section_offset + 188       /* 0000BB */
  PARSE VAR smf_record ,            /* HIPERSPACE PAGE-OUT COUNT @LB */
    =(var_offset) TIVHSPO +4 .

  var_offset = section_offset + 192       /* 0000BF */
  PARSE VAR smf_record ,                 /* STEP CPU SERVICE @G50FPR */
    =(var_offset) TIVCPUS +4 .

  var_offset = section_offset + 196       /* 0000C3 */
  PARSE VAR smf_record ,                 /* STEP I/O SERVICE @G50FPR */
    =(var_offset) TIVIOCS +4 .

  var_offset = section_offset + 200       /* 0000C7 */
  PARSE VAR smf_record ,        /* STEP MAIN STORAGE SERVICE @G50FPR */
    =(var_offset) TIVMSOS +4 .

  var_offset = section_offset + 204       /* 0000CB */
  PARSE VAR smf_record ,                 /* STEP SRB SERVICE @G50FPR */
    =(var_offset) TIVSRBS +4 .

  var_offset = section_offset + 208       /* 0000CF */
  PARSE VAR smf_record ,               /* TERMINAL SYMBOLIC NAME @DC */
    =(var_offset) TIVTSN +8 .

  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Parse the DSECT named: SMFRX035.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
SMFRX035_Parse_Routine:

  var_offset = section_offset + 1       /* 000000 */
  PARSE VAR smf_record ,              /* ALIGN TO FULL WORD BOUNDARY */
    =(var_offset) SMFRX035_unnamed_2 +4 .

  var_offset = section_offset + 1       /* 000000 */
  PARSE VAR smf_record ,                            /* RECORD LENGTH */
    =(var_offset) TLGRLEN +2 .

  var_offset = section_offset + 3       /* 000002 */
  PARSE VAR smf_record ,                       /* SEGMENT DESCRIPTOR */
    =(var_offset) TLGRSEG +2 .

  var_offset = section_offset + 5       /* 000004 */
  PARSE VAR smf_record ,                         /* HEADER FLAG BYTE */
    =(var_offset) TLGRFLG +1 .

  var_offset = section_offset + 6       /* 000005 */
  PARSE VAR smf_record ,                 /* RECORD TYPE (35 DECIMAL) */
    =(var_offset) TLGRCDTY +1 .

  var_offset = section_offset + 7       /* 000006 */
  PARSE VAR smf_record ,               /* TIME STAMP TOD 100THS SECS */
    =(var_offset) TLGRCDTS +4 .

  var_offset = section_offset + 11       /* 00000A */
  PARSE VAR smf_record ,                            /* DATE 00YYDDDF */
    =(var_offset) TLGRCDTE +4 .

  var_offset = section_offset + 15       /* 00000E */
  PARSE VAR smf_record ,       /* CPU IDENTIFICATION (SYSTEM, MODEL) */
    =(var_offset) TLGCPUID +4 .

  var_offset = section_offset + 19       /* 000012 */
  PARSE VAR smf_record ,          /* USER IDENTIFICATION FIELD Y0290 */
    =(var_offset) TLGUIF +8 .
  TLGUID = BITAND(TLGUIF,TLGUIF)

  var_offset = section_offset + 27       /* 00001A */
  PARSE VAR smf_record ,               /* LOGON TIME TOD 100THS SECS */
    =(var_offset) TLGONTME +4 .

  var_offset = section_offset + 31       /* 00001E */
  PARSE VAR smf_record ,                            /* DATE 00YYDDDF */
    =(var_offset) TLGONDTE +4 .

  var_offset = section_offset + 35       /* 000022 */
  PARSE VAR smf_record ,        /* User-defined identification field */
    =(var_offset) TLGUDATA +8 .

  var_offset = section_offset + 43       /* 00002A */
  PARSE VAR smf_record ,               /* NUMBER OF STEPS IN SESSION */
    =(var_offset) TLGSTPCT +1 .

  var_offset = section_offset + 44       /* 00002B */
  PARSE VAR smf_record ,                                 /* RESERVED */
    =(var_offset) TLGCRTME +4 .

  var_offset = section_offset + 48       /* 00002F */
  PARSE VAR smf_record ,                           /* LINE OUT COUNT */
    =(var_offset) TLGOUTCT +4 .

  var_offset = section_offset + 52       /* 000033 */
  PARSE VAR smf_record ,                            /* LINE IN COUNT */
    =(var_offset) TLGINCT +4 .

  var_offset = section_offset + 56       /* 000037 */
  PARSE VAR smf_record ,               /* SESSION TERMINATION STATUS */
    =(var_offset) TLGSTAT +2 .

  var_offset = section_offset + 58       /* 000039 */
  PARSE VAR smf_record ,                           /* LOGON PRIORITY */
    =(var_offset) TLGPRI +1 .

  var_offset = section_offset + 59       /* 00003A */
  PARSE VAR smf_record ,          /* LOGON ENQUEUE TIME TOD .01 SECS */
    =(var_offset) TLGNQTME +4 .

  var_offset = section_offset + 63       /* 00003E */
  PARSE VAR smf_record ,              /* LOGON ENQUEUE DATE 00YYDDDF */
    =(var_offset) TLGNQDTE +4 .

  var_offset = section_offset + 67       /* 000042 */
  PARSE VAR smf_record ,                   /* TERMINATION INDICATORS */
    =(var_offset) TLGTRMI +1 .

  var_offset = section_offset + 68       /* 000043 */
  PARSE VAR smf_record ,       /* RESV-FORMERLY SYSOUT CLASSES Y0212 */
    =(var_offset) TLGOUTCL +1 .

  var_offset = section_offset + 69       /* 000044 */
  PARSE VAR smf_record ,              /* TOTAL TRANSACTION RESIDENCY */
    =(var_offset) TLGTRANT +4 .

  var_offset = section_offset + 73       /* 000048 */
  PARSE VAR smf_record ,                                 /* RESERVED */
    =(var_offset) TLGRVC +4 .

  var_offset = section_offset + 77       /* 00004C */
  PARSE VAR smf_record ,                /* STORAGE PROTECT KEY A4079 */
    =(var_offset) TLGSPK +1 .

  var_offset = section_offset + 78       /* 00004D */
  PARSE VAR smf_record ,       /* JOB CPU UNDER SRB(.01 SEC) @YL026W */
    =(var_offset) TLGSRBT +3 .

  var_offset = section_offset + 81       /* 000050 */
  PARSE VAR smf_record ,      /* TOTAL SESSION SERV(SERV UNITS)Y0213 */
    =(var_offset) TLGTJS +4 .

  var_offset = section_offset + 85       /* 000054 */
  PARSE VAR smf_record ,      /* TOTAL ACTIVE TIME FOR SESSION Y0213 */
    =(var_offset) TLGTTAT +4 .

  var_offset = section_offset + 89       /* 000058 */
  PARSE VAR smf_record ,            /* TOTAL # OF TRANSACTIONS Y0213 */
    =(var_offset) TLGNTSN +4 .

  var_offset = section_offset + 93       /* 00005C */
  PARSE VAR smf_record ,              /* PERFORMANCE GROUP # @YL026W */
    =(var_offset) TLGPGNO +2 .

  var_offset = section_offset + 95       /* 00005E */
  PARSE VAR smf_record ,                         /* RESERVED @YL026W */
    =(var_offset) TLGRV2 +2 .

  var_offset = section_offset + 97       /* 000060 */
  PARSE VAR smf_record ,   /* LENGTH OF ACCT PART OF RECORD @G50FPRL */
    =(var_offset) TLGVAR +1 .

  var_offset = section_offset + 98       /* 000061 */
  PARSE VAR smf_record ,                                 /* RESERVED */
    =(var_offset) TLGRVB +20 .

  var_offset = section_offset + 118       /* 000075 */
  PARSE VAR smf_record ,                             /* ACTJTIME @DG */
    =(var_offset) TLGCPUTM +3 .

  var_offset = section_offset + 121       /* 000078 */
  PARSE VAR smf_record ,              /* NUMBER OF ACCOUNTING FIELDS */
    =(var_offset) TLGNBRAC +1 .

  var_offset = section_offset + 122       /* 000079 */
  PARSE VAR smf_record ,              /* SESSION CPU SERVICE @G50FPR */
    =(var_offset) TLGCPUS +4 .

  var_offset = section_offset + 126       /* 00007D */
  PARSE VAR smf_record ,              /* SESSION I/O SERVICE @G50FPR */
    =(var_offset) TLGIOCS +4 .

  var_offset = section_offset + 130       /* 000081 */
  PARSE VAR smf_record ,       /* SESSION MAIN STORAGE SERV. @G50FPR */
    =(var_offset) TLGMSOS +4 .

  var_offset = section_offset + 134       /* 000085 */
  PARSE VAR smf_record ,              /* SESSION SRB SERVICE @G50FPR */
    =(var_offset) TLGSRBS +4 .

  var_offset = section_offset + 138       /* 000089 */
  PARSE VAR smf_record ,               /* TERMINAL SYMBOLIC NAME @DC */
    =(var_offset) TLGTSN +8 .

  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
End of code.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */

