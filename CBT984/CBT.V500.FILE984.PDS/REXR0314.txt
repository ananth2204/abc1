/* We first need rexx in comment if compiled or read from SYSPROC. */
rexx-rexr0314:
  rexxpgm_version = "01.00"          /* Set with 'ver 1' and 'lev 2'. */

  SAY ""
  SAY "REXR0314 PARSE"
  SAY "=============="

  SAY "Arg()" Arg()
  parse source module_source
  subroutine_rc = parse_ways(Arg(1))
  RETURN 0

  subroutine_rc = loop_value()
  loop_count = 750
  SAY "Parse" PARSE_VALUE_ctr "time(s)."
  subroutine_rc = loop_var()
  subroutine_rc = loop_var()
  subroutine_rc = loop_value()
  subroutine_rc = loop_value()
  subroutine_rc = loop_var()
  RETURN 0

parse_ways: Procedure ,
  Expose module_source
  parse source subroutine_source

  SAY ""
  SAY "Example PARSE ARG"
  SAY "-------------------------"
  SAY "tso %rexr0314 Hello, 'Kenneth E. Tomiak'."
  PARSE ARG greeting "," . =1 . "'" named "'"  appendage
  SAY "Greeting:" greeting
  SAY "named   :" named
  SAY "Clutter :" appendage
  SAY "Example PARSE UPPER ARG"
  SAY "-------------------------"
  PARSE UPPER ARG greeting "," . =1 . "'" named "'"  appendage
  SAY "Greeting:" greeting
  SAY "named   :" named
  SAY "Clutter :" appendage

  SAY ""
  SAY "Example PARSE EXTERNAL"
  SAY "------------------------------"
  Address MVS MAKEBUF
  QUEUE "This is on the stack."
  SAY "Prompt for some input:"
  PARSE EXTERNAL @user_data1
  SAY "Prompt for more input:"
  PARSE UPPER EXTERNAL @user_data2
  Address MVS DROPBUF
  SAY "You entered:" @user_data1
  SAY "           :" @user_data2

  SAY ""
  SAY "Example PARSE NUMERIC (always upper)"
  SAY "------------------------------------"
  PARSE NUMERIC digitz fuzzy form
  SAY "Digits:" digitz
  SAY "Fuzz  :" fuzzy
  SAY "Form  :" form
  SAY "Or retrieving each individually..."
  bif_digits = Digits()
  bif_fuzzy = Fuzz()
  bif_form = Form()
  SAY "Digits:" bif_digits
  SAY "Fuzz  :" bif_fuzzy
  SAY "Form  :" bif_form

  SAY ""
  SAY "Example PARSE PULL"
  SAY "--------------------------"
  Address MVS MAKEBUF
  QUEUE "This is on the stack."
  bif_queued = Queued()
  SAY "Input from the stack:"
  DO q_ctr = 1 to bif_queued
    PARSE UPPER PULL @user_data1
    SAY @user_data1
  END
  SAY "Input from EXTERNAL (stack empty):"
  PARSE UPPER PULL @user_data2
  Address MVS DROPBUF
  SAY @user_data2

  SAY ""
  SAY "Example PARSE SOURCE"
  SAY "----------------------------"
  PARSE SOURCE c_TSO ,
               l_cfs ,
               v_uen ,
               v_ddn ,
               v_dsn ,
               v_len ,
               v_uhce ,
               v_asn ,
               v_ut
  SAY "Constant TSO:" c_TSO
  SAY "Label COMMAND | FUNCTION | SUBROUTINE:" l_cfs
  SAY "Variable UPPERCASE Exec Name:" v_uen
  SAY "Variable DDName:" v_ddn
  SAY "Variable DSName:" v_dsn
  SAY "Variable lowercase Exec Name" v_len
  SAY "Variable UPPERCASE Host Command Environment" v_uhce
  SAY "Variable Address Space Name" v_asn
  SAY "Variable User Token" v_ut
  SAY "++++++++++++++++++++++++++++++++++++++++++++++++++"
  SAY "+                    CALL                        +"
  SAY "++++++++++++++++++++++++++++++++++++++++++++++++++"
  CALL GSource
  SAY "++++++++++++++++++++++++++++++++++++++++++++++++++"
  SAY "+              Address TSO                       +"
  SAY "++++++++++++++++++++++++++++++++++++++++++++++++++"
  Address TSO "EXEC 'KTOMIAK.TSO.REXX(GSOURCE)' 'some, data'"
  SAY "++++++++++++++++++++++++++++++++++++++++++++++++++"
  SAY "+                   GSource                      +"
  SAY "++++++++++++++++++++++++++++++++++++++++++++++++++"
  GSource

  SAY ""
  SAY "Example PARSE VALUE expression WITH"
  SAY "-------------------------------------------"
  PARSE VALUE V_DDN (3 * 7) WITH field_1 Field_2
  SAY "Field #1 =" field_1
  SAY "Field #2 =" field_2

  SAY ""
  SAY "Example PARSE VAR name"
  SAY "------------------------------"
  PARSE VAR v_ddn ,
            scope +3 ,
            modtype
  SAY "Scope:" scope
  SAY "Module type (PROC=CLIST; EXEC=REXX):" modtype

  SAY ""
  SAY "Example PARSE VERSION"
  SAY "-----------------------------"
  PARSE VERSION ver_language ver_level ver_token
  PARSE VAR ver_token prd_dom prd_month prd_year
  SAY "Language:" ver_Language
  SAY "Level:" ver_Level
  SAY "Token:" ver_token
  SAY "Tokendate:" prd_year"-"prd_month"-"prd_dom

  SAY ""
  RETURN 0

loop_value:
  SAY " "
  SAY "PARSE_VALUE timings:"
  SAY "===================="
  @start_SYSCPU   = SysVar("SYSCPU")
  @start_SYSSRV   = SysVar("SYSSRV")
  Do PARSE_VALUE_ctr = 1 to loop_count
    static_value = "PO BOX" loop_count
    PARSE VALUE static_value WITH ,
      po box number
  End
  @PARSE_VALUE_SYSCPU = SysVar("SYSCPU")
  @PARSE_VALUE_SYSSRV = SysVar("SYSSRV")
  PARSE_VALUE_ctr = PARSE_VALUE_ctr - 1
  @accum_syscpu = @PARSE_VALUE_syscpu - @start_syscpu
  @accum_syssrv = @PARSE_VALUE_syssrv - @start_syssrv
  SAY "CPU used:" @accum_syscpu
  SAY "SRV used:" @accum_syssrv
  RETURN loop_count

loop_var:
  SAY " "
  SAY "PARSE_VAR timings:"
  SAY "===================="
  @start_SYSCPU   = SysVar("SYSCPU")
  @start_SYSSRV   = SysVar("SYSSRV")
  Do PARSE_VAR_ctr = 1 to loop_count
    static_value = "PO BOX" loop_count
    PARSE VAR static_VAR ,
      po box number
  End
  @PARSE_VAR_SYSCPU = SysVar("SYSCPU")
  @PARSE_VAR_SYSSRV = SysVar("SYSSRV")
  PARSE_VAR_ctr = PARSE_VAR_ctr - 1
  @accum_syscpu = @PARSE_VAR_syscpu - @start_syscpu
  @accum_syssrv = @PARSE_VAR_syssrv - @start_syssrv
  SAY "CPU used:" @accum_syscpu
  SAY "SRV used:" @accum_syssrv
  RETURN loop_count

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================

 Dataset:  REXX(REXR0314)
 Author:   Kenneth Tomiak
 Contact:  "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
 Manual:   ikj4a3a0.pdf
           SA22-7790-10 z/OS TSO/E REXX Reference
           Version 1 Release 13
           Chapter 3. Keyword instructions
           Instructions
           PARSE
 Overview: Unstrings the variable/expression into one or more
           variables as described in the template list.

-----------------------------------------------------------------------

 History of Modifications
 ------------------------
vv.mm WHEN     Who / What you did ... (Newest change at the top.)
----- -------- --------------------------------------------------------
01.01 20171004 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Original base code.
----- -------- --------------------------------------------------------

-----------------------------------------------------------------------

STANDARD GLOBAL DISCLAIMER
--------------------------
The author explicitly disavows any claim whatsoever about the
correctness or functionality of this program, and disclaims liability
for anything and everything bad that might happen in connection with,
before, during, or after using it. I have tried to make it work right,
and I am personally pretty confident that it does, but everybody makes
mistakes, so If you use it, you DO so at your own risk.

=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */

