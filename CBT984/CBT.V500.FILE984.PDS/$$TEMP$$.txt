
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 Process the SMF data 100 records at a time.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Smf_Process_Routine:
  smftype_idx. = 0
  smftype_idx = ""

  smfdata_eof = 0
  smfdata_bunch = 0
  smfdata_ctr = 0
  DO WHILE (smfdata_eof = 0)
    ADDRESS MVS "EXECIO 100 DISKR" ,
      "SMFDATA (STEM smfdata.)"
    smfdata_rc = RC
    smfdata_bunch = smfdata_bunch + 1
    DO smf_x = 1 TO smfdata.0
      smfdata_ctr = smfdata_ctr + 1
 /*   ... parse common header and branch ...   */
      smf_record = smfdata.smf_x
      PARSE VAR smfdata.smf_x ,
          =1 SMFHDFLG +1 ,
          =2 SMFHDRTY +1 ,
          =3 SMFHDTME +4 ,
          =7 SMFHDDTE +4 ,
         =11 SMFHDSID +4 ,
        smf_record_data
      dechdrty = C2D(SMFHDRTY) + 0
      hexhdrty = C2X(SMFHDRTY)
  /*
      SAY RIGHT(smfdata_bunch,6) RIGHT(smf_x,3) ,
        RIGHT(smfdata_ctr,7) ,
        "type: ("hexhdrty") dec("dechdrty")"
  */
      IF (WORDPOS(dechdrty,smftype_idx) = 0) THEN DO
        smftype_idx = smftype_idx || dechdrty || " "
      END
      tmp = smftype_idx.dechdrty + 1
      smftype_idx.dechdrty = tmp

 /*   Rebuild RDW to satisfy MACRO offsets.   */
      dechdlen = LENGTH(smfdata.smf_x) + 4
      hexhdlen = D2C(dechdlen,2)
      smf_record = hexhdlen || D2C(0,2) || smfdata.smf_x

 /*   ... add what you intend to handle ...   */
      SELECT
        WHEN (dechdrty =   0) THEN rrc = Process_000()
        WHEN (dechdrty >   0) & ,
             (dechdrty <  30) THEN NOP
        WHEN (dechdrty =  30) THEN rrc = Process_030()
        WHEN (dechdrty >  30) & ,
             (dechdrty < 127) THEN NOP
        WHEN (dechdrty = 127) THEN NOP
        WHEN (dechdrty > 127) THEN NOP
        OTHERWISE DO
          SAY "No process handler for SMF record type" dechdrty
        END
      END
    END
    smfdata_eof = smfdata_rc
  END
  ADDRESS MVS "EXECIO 0 DISKR" ,
    "SMFDATA (FINIS)"
  SAY
  SAY "Read" smfdata_bunch "bunch(es) for" smfdata_ctr "record(s)."

  bubble_rc = Bubble_Sort_Keyed_Index("smftype_idx", "Ascending")
  SAY "REC  QUANTITY"
  SAY "=== ========="
  smf_total = 0
  DO smf_x = 1 TO WORDS(smftype_idx)
    smftype_one = WORD(smftype_idx,smf_x)
    SAY RIGHT(smftype_one,3,"0") RIGHT(smftype_idx.smftype_one,9)
    smf_total = smf_total + smftype_idx.smftype_one
  END
  SAY "=== ========="
  SAY "All" RIGHT(smf_total,9)

  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Dual loop thru 'stembase.' and sort by swapping pairs.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Bubble_Sort_Numbered_Stem:
  stembase = ARG(1)
  UPPER stembase
  sort_sequence = ARG(2)
  UPPER sort_sequence

  SELECT
    WHEN (ABBREV("DESCENDING",sort_sequence,1) = 1) THEN DO
      rexx_block = ,
        'count_of_elements = 'stembase'.0;' ,
        'DO i = 1 TO  (count_of_elements - 1);' ,
          'DO j = 1 TO (count_of_elements - 1);' ,
            'j_plus1 = j + 1;' ,
            'IF ('stembase'.j < 'stembase'.j_plus1) THEN DO;' ,
              'temp = 'stembase'.j;' ,
               stembase'.j = 'stembase'.j_plus1;' ,
               stembase'.j_plus1 = temp;' ,
            'END;' ,
          'END j;' ,
        'END i'
    END
    OTHERWISE DO
      rexx_block = ,
        'count_of_elements = 'stembase'.0;' ,
        'DO i = 1 TO  (count_of_elements - 1);' ,
          'DO j = 1 TO (count_of_elements - 1);' ,
            'j_plus1 = j + 1;' ,
            'IF ('stembase'.j > 'stembase'.j_plus1) THEN DO;' ,
              'temp = 'stembase'.j;' ,
               stembase'.j = 'stembase'.j_plus1;' ,
               stembase'.j_plus1 = temp;' ,
            'END;' ,
          'END j;' ,
        'END i'
    END
  END
  INTERPRET rexx_block
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Turn 'key_index' into a numbered stem and sort it.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Bubble_Sort_Keyed_Index:
  key_index = ARG(1)
  UPPER key_index
  sort_sequence = ARG(2)
  UPPER sort_sequence
  random_stem = "@@@stem_"Random()

  rexx_block = ,
    'IF ('key_index' <> "") THEN DO ;' ,
      random_stem'. = "" ;' ,
      random_stem'.0 = 0 ;' ,
      'DO @sx = 1 TO WORDS('key_index') ;' ,
        'tmp = 'random_stem'.0 + 1 ; ' ,
        random_stem'.0 = tmp ; ' ,
        random_stem'.tmp = WORD('key_index',tmp) ;' ,
      'END ;' ,
    'END ;'
  INTERPRET rexx_block
  rexx_block = ,
    'bubble_rc = Bubble_Sort_Numbered_Stem("'random_stem || ,
      '", sort_sequence)'
  INTERPRET rexx_block
  rexx_block = ,
    key_index' = "" ;' ,
    'DO @sx = 1 TO 'random_stem'.0 ;' ,
      key_index' = 'key_index' || 'random_stem'.@sx || " " ;' ,
    'END ;'
  INTERPRET rexx_block
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Basic handler.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_000:
  SAY "Came across an IPL record at:" smfdata_ctr ,
    C2X(SMFHDDTE) ,
    C2X(SMFHDTME)

  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Sample handler for: Record Type 30 (1E)  Common address space work
 SMF30 is a variably-occurrubf-section record.
-----------------------------------------------------------------------
   The following rules apply to all subtypes (except subtype 1).
   When examining a type 30 record
   -> A record is the first record if at least one of the following
      fields is non-zero:
   SMF30AON
   SMF30ARN
   SMF30CON
   SMF30DRN
   SMF30OON
   SMF30PON
   SMF30RON
   SMF30TON
   SMF30UON
-----------------------------------------------------------------------
   -> A record is an additional record if the following fields are all
      zero:
   SMF30AON
   SMF30ARN
   SMF30CON
   SMF30DRN
   SMF30OON
   SMF30PON
   SMF30RON
   SMF30TON
   SMF30UON
-----------------------------------------------------------------------
   -> In either a first or additional record: ?There are more records
      to follow if at least one of the following fields is non-zero:
   SMF30EOS
   SMF30MOS
   SMF30OPM
   SMF30RMS
   SMF30UDS
-----------------------------------------------------------------------
   -> This is the last record if the following fields are all zero:
   SMF30EOS
   SMF30MOS
   SMF30OPM
   SMF30RMS
   SMF30UDS
-----------------------------------------------------------------------
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_030:
  section_offset = 0
  function_rc = SMFRCD30_Parse_Routine()
  IF (C2D(SMF30SLN) > 0) THEN DO
    DO son_ctr = 1 TO C2D(SMF30SON)
      section_offset = C2D(SMF30SOF)
    END
  END
  /* ... next section ... */

  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Parse the DSECT named: SMFRCD00.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
SMFRCD00_Parse_Routine:

  var_offset = section_offset + 1       /* 000000 */
  PARSE VAR smf_record ,              /* ALIGN TO FULL WORD BOUNDARY */
    =(var_offset) SMFRCD00_unnamed_2 +4 .
                                                   /* HEADER SEGMENT */
  SMFRCD0 = BITAND(SMFRCD00_unnamed_2,*)

  var_offset = section_offset + 1       /* 000000 */
  PARSE VAR smf_record ,                            /* RECORD LENGTH */
    =(var_offset) SMF0LEN +2 .

  var_offset = section_offset + 3       /* 000002 */
  PARSE VAR smf_record ,                       /* SEGMENT DESCRIPTOR */
    =(var_offset) SMF0SEG +2 .

  var_offset = section_offset + 5       /* 000004 */
  PARSE VAR smf_record ,                         /* HEADER FLAG BYTE */
    =(var_offset) SMF0FLG +1 .

  var_offset = section_offset + 6       /* 000005 */
  PARSE VAR smf_record ,                            /* RECORD TYPE 0 */
    =(var_offset) SMF0RTY +1 .

  var_offset = section_offset + 7       /* 000006 */
  PARSE VAR smf_record , /* TOD, USING FORMAT FROM TIME MACRO W/BIN. */
    =(var_offset) SMF0TME +4 .

  var_offset = section_offset + 11       /* 00000A */
  PARSE VAR smf_record ,    /* DATE IN PACKED DECIMAL FORM: 00YYDDDF */
    =(var_offset) SMF0DTE +4 .

  var_offset = section_offset + 15       /* 00000E */
  PARSE VAR smf_record ,              /* SYSTEM IDENTIFICATION Y0290 */
    =(var_offset) SMF0SID +4 .

  var_offset = section_offset + 19       /* 000012 */
  PARSE VAR smf_record ,                /* Continuous wait time limt */
    =(var_offset) SMF0JWT +4 .

  var_offset = section_offset + 23       /* 000016 */
  PARSE VAR smf_record , /* This field contains meaningless informat */
    =(var_offset) SMF0BUF +4 .

  var_offset = section_offset + 27       /* 00001A */
  PARSE VAR smf_record , /* VIRTUAL STORAGE SIZE IN K BLOCKS(BINARY) */
    =(var_offset) SMF0VST +4 .

  var_offset = section_offset + 31       /* 00001E */
  PARSE VAR smf_record ,                            /* OPTIONS BYTE: */
    =(var_offset) SMF0OPT +1 .

  var_offset = section_offset + 32       /* 00001F */
  PARSE VAR smf_record , /* REAL STORAGE SIZE IN K BLOCKS(BINARY) XM */
    =(var_offset) SMF0RST +4 .

  var_offset = section_offset + 36       /* 000023 */
  PARSE VAR smf_record ,                             /* Reserved @01 */
    =(var_offset) SMF0RSV +1 .

  var_offset = section_offset + 37       /* 000024 */
  PARSE VAR smf_record ,                     /* MVS Product name @01 */
    =(var_offset) SMF0OSL +8 .

  var_offset = section_offset + 45       /* 00002C */
  PARSE VAR smf_record ,                          /* System name @01 */
    =(var_offset) SMF0SYN +8 .

  var_offset = section_offset + 53       /* 000034 */
  PARSE VAR smf_record ,                         /* Sysplex name @01 */
    =(var_offset) SMF0SYP +8 .

  var_offset = section_offset + 61       /* 00003C */
  PARSE VAR smf_record ,     /* Difference in time between local @P5 */
    =(var_offset) SMF0TZ +4 .

  var_offset = section_offset + 65       /* 000040 */
  PARSE VAR smf_record , /* Started task wait time limit (SMFPRMxx @ */
    =(var_offset) SMF0MSWT +4 .

  var_offset = section_offset + 69       /* 000044 */
  PARSE VAR smf_record , /* TSO wait time limit (SMFPRMxx TWT(hhmm)  */
    =(var_offset) SMF0MTWT +4 .

  var_offset = section_offset + 73       /* 000048 */
  PARSE VAR smf_record , /* The number of megabytes specified by @0A */
    =(var_offset) SMF0TBUF +2 .

  RETURN return_code

