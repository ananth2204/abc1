/* rexx */
Rexx_BLKFCTR:
  rexxpgm_version = "01.02"           /* ver lev */

  PARSE ARG all_my_arguments

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This code drives Initialization, Process, and Termination routines.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Main_Routine:
  return_code = Initialization_Routine()
  IF (return_code = 0) THEN DO
    return_code = Process_Routine()
  END
  return_code = Termination_Routine()
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================

  Dataset:  DEMO.REXX(BLKFCTR)
  Contact:  "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
  Overview: Use the lrecl and optional keylen to show the efficiency
            of block sizes.
  Websearch: am3u1001 to see the formula used for 3390.
    http://publibz.boulder.ibm.com/cgi-bin/bookmgr_OS390/BOOKS/am3u1001
    Title:  Using IBM 3390 in an MVS Environment
    Document Number:  GC26-4574-03
    Build Date:  06/30/93 18:05:27  Build Version:  1.2
    Appendix B.1.1.1 Space Calculation
  Syntax:   blkfctr |lrecl keylen|

-----------------------------------------------------------------------

 History of Modifications
 ------------------------
vv.mm WHEN     Who / What you did ... (Newest change at the top.)
----- -------- --------------------------------------------------------
01.02 20180505 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
         -     1) Stylize using Edit Macro @putktm:
      20180407    Programming Using The Kenneth Tomiak Method.
               2) Stylize using the
                  Programming Using The Kenneth Tomiak Method.
               3) Stylize using Edit Macro @putktm:
                  Programming Using The Kenneth Tomiak Method.
               4) Stylize using template $putktm:
                  Programming Using The Kenneth Tomiak Method.
               5) Moved original code under PUTKTM function routines.
               6) Added PULL prompt for lrecl and keylen when
                  not provided.
----- -------- --------------------------------------------------------
01.01 20170509 KTomiak "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               Original code for ooRexx claimed will work on any
               opsys. It will not.
               1) Replaced ooRexx specific constructs.
               2) Modified long length statements to work from an
                  LRECL=80 PDS.
               3) Made it user friendly by validating all arguments
                  before bailing out.
               4) Removed unnecessary display of repetitous data.
                  a) _myname
                  b) keylen
                  c) reclen
               5) Stylized using PUTKTM-REXX.
               6) Added a display of:
                  a) how many records fit in the maximum range blksize
                  b) percent used
                  c) unused bytes per track
               7) Display caveat of using Fixed Length Records.
----- -------- --------------------------------------------------------
01.00 20081115 enrico-sorichetti
               1) Original code posted at:
                  http://ibmmainframes.com/about35906.html
----- -------- --------------------------------------------------------

-----------------------------------------------------------------------

STANDARD GLOBAL DISCLAIMER
--------------------------
The author explicitly disavows any claim whatsoever about the
correctness or functionality of this program, and disclaims liability
for anything and everything bad that might happen in connection with,
before, during, or after using it. I have tried to make it work right,
and I am personally pretty confident that it does, but everybody makes
mistakes, so if you use it, you do so at your own risk.

=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine initializes constants and variables.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Initialization_Routine:
  return_code = 0
  PARSE SOURCE,
    source_host_env,
    source_call_type,
    source_uc_exec_name,
    source_hostdd,
    source_hostdsn,
    source_nf_exec_name,
    source_initial_cmd_env,
    source_asid_name,
    source_char8_user_token,
    source_hostother
  SAY ""
  SAY source_uc_exec_name
  args = STRIP(all_my_arguments)
  argc = WORDS(args)
  IF (argc = 0) THEN DO
    SAY "BLKFCTR - needs at least one argument."
    SAY "        - SYNTAX is '"source_uc_exec_name" lrecl keylength'"
    SAY ""
    SAY "Enter LRECL or blank to cancel out."
    PULL argw1
    IF (argw1 = "") THEN DO
      RETURN 4
    END
    SAY "Enter optional key length or blank for none."
    PULL argw2
    args = argw1 argw2
    argc = WORDS(args)
  END
  IF (argc > 2) THEN DO
    SAY "BLKFCTR - supports only two arguments."
    SAY "        - SYNTAX is '"source_uc_exec_name" lrecl |keylength|'"
    SAY "        - ignoring any extra arguements you passed in."
    SAY "You tried: BLKFCTR" args
    ignore_args = ""
    DO arg_ix = 3 TO argc
      ignore_args =  ignore_args""WORD(args,arg_ix)" "
    END
    SAY "Ignoring:" ignore_args
  END

  trkcap = 56664
  maxrec = 32760
  maxkey = 256
  least_waste = trkcap
  best_blksize = "??"

  PARSE VAR args reclen keylen .
  reclen = STRIP(reclen)
  keylen = STRIP(keylen)
  IF (keylen = "") THEN DO
    keylen = 0
  END
  datagood = "Good"
  IF (DATATYPE(reclen) <> "NUM") THEN DO
    SAY "Problem: not numeric record LENGTH("reclen")."
    datagood = "Bad"
  END
  ELSE DO
    IF (reclen > maxrec) THEN DO
      SAY "Error: reclen" reclen "out of range, up to" maxrec "allowed."
      datagood = "Bad"
    END
  END
  IF (DATATYPE(keylen) <> "NUM") THEN DO
    SAY "Problem: not numeric key LENGTH("keylen")."
    datagood = "Bad"
  END
  ELSE DO
    IF (keylen > maxkey) THEN DO
       SAY "Error: keylen" keylen "out of range, up to" ,
         maxkey "allowed."
    END
  END
  IF (datagood = "Bad") THEN DO
    SAY "Correct the above errors and try again."
    RETURN 16
  END
  and_key = ""
  IF (keylen > 0) THEN DO
    and_key = "and key-length="keylen
  END
  SAY "Finding optimum 3390 blksize for LRECL="reclen and_key
  SAY " * Assuming fixed length record sizes"
  SAY "Blocks per track (15 tracks per cylinder) based on blksize."
  SAY "==============================================================="

  c_blksz = reclen
  c_count = Blocks_X_Tracks(c_blksz,keylen)
  i_blksz = c_blksz
  i_count = c_count
  p_blksz = c_blksz
  p_count = c_count
  SAY "                                          Unused"
  SAY "min-blksz max-blksz blk/trk rec/blk %Used  Bytes"
  SAY "--------- --------- ------- ------- ----- ------"

  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine does the processing.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_Routine:
  DO i = reclen TO maxrec BY reclen
    c_blksz = i
    c_count = Blocks_X_Tracks(c_blksz,keylen)
    rec_blk = p_blksz / reclen
    pct_used_val = ((p_count * p_blksz) / trkcap) * 100
    PARSE VAR pct_used_val pct_used_show "." .
    pct_used = RIGHT(pct_used_show,6)
    trk_unused = trkcap - (p_count * p_blksz)
    IF (trk_unused < least_waste) THEN DO
      least_waste = trk_unused
      best_blksize = p_blksz
    END

    IF (c_count <> p_count) THEN DO
      SAY RIGHT(i_blksz,9) ,
          RIGHT(p_blksz,9) ,
          RIGHT(p_count,7),
          RIGHT(rec_blk,7),
          RIGHT(pct_used,5),
          RIGHT(trk_unused,6)
      i_blksz = c_blksz
      i_count = c_count
    END
    p_blksz = c_blksz
    p_count = c_count
  END
  rec_blk = p_blksz / reclen
  pct_used_val = ((p_count * p_blksz) / trkcap) * 100
  PARSE VAR pct_used_val pct_used_show "." .
  pct_used = RIGHT(pct_used_show,6)
  trk_unused = trkcap - (p_count * p_blksz)
  SAY RIGHT(i_blksz,9) ,
      RIGHT(p_blksz,9) ,
      RIGHT(p_count,7),
      RIGHT(rec_blk,7),
      RIGHT(pct_used,5),
      RIGHT(trk_unused,6)
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine does cleanup before exiting.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Termination_Routine:
  SAY ""
  SAY "The most efficient BLKSIZE("best_blksize") leaves" ,
    least_waste "bytes unused per track."
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 This routine calculates how many blocks fit per track.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Blocks_X_Tracks: PROCEDURE
  PARSE ARG blksz, keyln
  c = 10
  IF (keyln = 0) THEN DO
    k = 0
  END
  ELSE DO
    kn = ( keyln + 6 ) % 232 + 1 - ( ( ( keyln + 6 ) // 232) = 0 )
    k  = 9 + ( keyln + 6 * kn + 6 ) % 34 + 1 - ,
         ( ( ( keyln + 6 * kn + 6 ) // 34) = 0 )
  END
  dn = ( blksz + 6 ) % 232 + 1 - ( ( ( blksz + 6 ) // 232) = 0 )
  d  = 9 + ( blksz + 6 * dn + 6 ) % 34 + 1 - ,
       ( ( ( blksz + 6 * dn + 6 ) // 34) = 0 )
  s = c + k + d
  RETURN 1729 % s

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
End of code.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
