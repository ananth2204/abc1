/*----------------------------- REXX -------------------------------*/
/*                                                                  */
/* LIB: CLIST(IDIEXITL)                                             */
/* GDE: IDIUGB00.BOO Fault Analyzer User's Guide and Reference      */
/*      KENNETH E. TOMIAK                                           */
/* DOC: THIS REXX EXIT provides fault analyzer with a side file     */
/*      for dump analysis.                                          */
/*                                                                  */
/* Input: ENV. and LST.                                             */
/*                                                                  */
/*                                                                  */
/*------------------------------------------------------------------*/

THE_BEGINNING:
    Call Initialization_Routines
    Call Main_Logic
    Call Wrapup_Routines
    exit exit_rc

Initialization_Routines:
    exit_rc = 0
    ignore_csects = "CEE DFH IGZ"
    modnm = strip(LST.CSECT_NAME)
    left_modnm = Left(modnm,3)
/*--------------------------------------------------------------*/
/* ADDRESSABILITY TO CVT FROM PSA                               */
/*--------------------------------------------------------------*/
    PTR2PSA = 0
    CVTPTR = STORAGE(D2X(PTR2PSA + 16),4)
/*--------------------------------------------------------------*/
/* ADDRESSABILITY TO SMCA, THEN GET SMF SYSTEM ID               */
/*--------------------------------------------------------------*/
    CVTSMCA = STORAGE(D2X(C2D(CVTPTR)+197),3)
    SMFID = STORAGE(D2X(C2D(CVTSMCA)+16),4)
/*--------------------------------------------------------------*/
/* GET SYSPLEX NAME                                             */
/*--------------------------------------------------------------*/
    ECVTPTR  = STORAGE(D2X(C2D(CVTPTR)+140),4)
    ECVTSPLX = STORAGE(D2X(C2D(ECVTPTR)+8),8)
/*--------------------------------------------------------------*/
/* GET JOBNAME, STEP, AND PROCEDURE                             */
/*--------------------------------------------------------------*/
    PSATOLD  = STORAGE(21C,4)                      /* POINTER TO TCB */
    PTRTIOT  = STORAGE(D2X(C2D(PSATOLD)+12),4)    /* POINTER TO TIOT */
    JOBNAME  = STRIP(STORAGE(D2X(C2D(PTRTIOT)),8),"B"," ")
    STEPNAME = STRIP(STORAGE(D2X(C2D(PTRTIOT)+8),8),"B"," ")
    PROCNAME = STRIP(STORAGE(D2X(C2D(PTRTIOT)+16),8),"B"," ")
    myid = left(jobname,7)
    Return

/*--------------------------------------------------------------*/
/* make sure sidefiles come from a pds                          */
/*--------------------------------------------------------------*/
    "IDIDDTEST DD(NEWPDS)"
    If RC >< 0 then,
      Do
        fid = strip(env.fault_id,"B"," ")
        if fid = "" then fid = "F000000"
        pds = myid"."fid".TEMPPDS"
        "IDIALLOC DD(NEWPDS) DSN("pds")",
          "NEW CATALOG SPACE(2,2) DIR(5)",
          "RECFM(VB) LRECL(1566) UNIT(SYSALLDA)"
        "IDIDDTEST DD(NEWPDS)"
        If RC = 0 then,
          Do
            "IDIWTO PDS for Sidefiles allocated"
            "IDIDDTEST DD(IDILANGX)"
            If RC = 0 then,
              Do
                "IDIFREE DD(IDILANGX)"
              End
            "IDIALLOC DD(IDILANGX) DSN("pds") SHR KEEP"
          End
      End
    Return

Main_Logic:
    "IDIWTO listing exit invoked."
    If (Pos(left_modnm,ignore_csects) > 0) then,
      Do
        Say "I don't do csects beginning with" left_modnm
        Return
        lst.DISREGARD_EXIT_LISTING = "Y"
      End
    Select
      When LST.LISTING_TYPE = 'S' then,
        Do
          Call Sidefile_Routine
        End
      When LST.LISTING_TYPE = 'L' then,
        Do
          Call Listing_Routine
        End
      When LST.LISTING_TYPE = 'A' then,
        Do
          Call ADATA_Routine
        End
      Otherwise,
        Do
          Say 'LST.LISTING_TYPE =' LST.LISTING_TYPE 'is unknown to me.'
          lst.DISREGARD_EXIT_LISTING = "Y"
          Return
        End
    End
    Return

Wrapup_Routines:
    "IDIDDTEST DD(SIDEIN)"
    If rc = 0 then,
      "IDIFREE DD(SIDEIN)"
    "IDIDDTEST DD(SIDEOT)"
    If rc = 0 then,
      "IDIFREE DD(SIDEOT)"
    Return

ADATA_Routine:
    Return

Sidefile_Routine:
    call pass_sidefile
    Return

    dsnnm = "TS.MSHTECH.DBGTOOL."modnm".SYSDEBUG"
    "IDIALLOC DD(SIDEIN)",
      "DSN("dsnnm") SHR"
    idi_rc = rc
    If idi_rc = 0 then,
      Do
        Say 'Sidefile found, yahoo!'
        "IDIWTO Sidefile for" modnm "found"
      End
    Else,
      Do
        Say "What do you want me to do about it, go compile it."
        Return
      End
    "IDIALLOC DD(SIDEOT)",
      "DSN("pds"("modnm")) SHR"
    idi_rc = rc
    If idi_rc >< 1 then,
      Do
        Say "Problems adding member" modnm "to pds" pds"." idi_rc
      End
    Address mvs "execio * diskr sidein (finis"
    rdrc = rc
    Queue ""
    Address mvs "execio * diskw sideot (finis"
    wrrc = rc
    if wrrc = 0 then,
      Do
        Say 'sidefile' modnm 'written to' pds'.'
      End
    Else,
      Do
        Say "could not write" modnm "to" pds "rc="wrrc"."
      End
    Return

        lst.DISREGARD_EXIT_LISTING = "Y"

Listing_Routine:
    call pass_listing
    return

pass_sidefile:
    modnm = strip(LST.MODULE_NAME)

    "IDIDDTEST DD(SYSPRINT)"
     If RC >< 0 then,
      "IDIALLOC DD(SYSPRINT) SYSOUT"
    "IDIALLOC DD(INFILE) DSN(ts.mshtech.dbgtool."modnm".trsmain) SHR"
    idi_rc = rc
    If idi_rc = 0 then,
      Do
        recfm = strip(LST.RECFM)
        lrecl = strip(LST.LRECL,L,0)
        "IDIALLOC DD(OUTFILE) DSN(ts.mshtech.dbgtool.TEMP)",
          "NEW DELETE SPACE(5,1)",
          "RECFM(VB) LRECL(1566) UNIT(SYSDA)"
          idi_rc = rc
          If idi_rc >< 0 then,
            Do
              "IDIALLOC DD(OUTFILE) DSN(ts.mshtech.dbgtool.TEMP)",
                "SHR DELETE"
            End
        address linkmvs "trsmain unpack"
        address mvs "execio * diskr outfile (finis"
        do while queued() >< 0
          parse pull rec
          LST.DATA_LENGTH = length(rec)
          LST.DATA_BUFFER = rec
          "IDIWRITE"
        end
        "IDIFREE DD(INFILE,OUTFILE)"
      end
    Else,
      Do
        Say "What do you want me to do about it, go compile it."
        Return
      End
    return

    dsnnm = "TS.MSHTECH.KIXUTL.SIDEFILE.VB("modnm")"
    "IDIALLOC DD(INFILE)",
      "DSN("dsnnm") SHR"
    idi_rc = rc
    If idi_rc = 0 then,
      Do
        "IDIWTO Sidefile found, yahoo!"
        Address mvs "execio * diskr infile (finis STEM SFILE."
        myctr = 0
        wrc = 0
        Do while myctr < SFILE.0
          myctr = myctr + 1
          rec = sfile.myctr
          LST.DATA_LENGTH = length(rec)
          LST.DATA_BUFFER = rec
          "IDIWRITE"
          wrc = wrc + rc
        End
        say 'wrote' myctr ' records via idiwrite, final rc='wrc
        "IDIFREE DD(INFILE)"
      End
    Else,
      Do
        Say "What do you want me to do about it, go compile it."
        Return
        lst.DISREGARD_EXIT_LISTING = "Y"
      End
    Return

pass_listing:
    Return

    dsnnm = "TS.MSHTECH.dbgtool."modnm".SYSPRINT"
    "IDIALLOC DD(INFILE)",
      "DSN("dsnnm") SHR"
    idi_rc = rc
    If idi_rc = 0 then,
      Do
        "IDIWTO Listing found, yahoo!"
        Address mvs "execio * diskr infile (finis STEM SFILE."
        myctr = 0
        wrc = 0
        Do while myctr < SFILE.0
          myctr = myctr + 1
          rec = sfile.myctr
          LST.DATA_LENGTH = length(rec)
          LST.DATA_BUFFER = rec
          "IDIWRITE"
          wrc = wrc + rc
        End
        say 'wrote' myctr ' records via idiwrite, final rc='wrc
        "IDIFREE DD(INFILE)"
      End
    Else,
      Do
        Say "What do you want me to do about it, go compile it."
        Return
        lst.DISREGARD_EXIT_LISTING = "Y"
      End
    Return
