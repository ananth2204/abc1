/* rexx */
Rexx_DDFINDER:
  rexxpgm_version = "02.02"           /* ver lev */

  PARSE ARG all_my_arguments
  NUMERIC DIGITS 16                   /* Handles Petabyte addressing */

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This code drives Initialization, Process, and Termination routines.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Main_Routine:
  return_code = Initialization_Routine()
  IF (return_code = 0) THEN DO
    return_code = Process_Routine()
  END
  return_code = Termination_Routine()
  RETURN return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================

  Dataset: DEMO.REXX(DDFINDER)
  Author:  KTomiak
  Contact: KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
  Syntax:  ddfinder |ddname|

-----------------------------------------------------------------------

 History of Modifications
 ------------------------
vv.mm WHEN     Who / What you did ... (Newest change at the top.)
----- -------- --------------------------------------------------------
02.02 20180505 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
         -     1) Stylize using Edit Macro @putktm:
      20180423    Programming Using The Kenneth Tomiak Method.
               2) Stylize using template $putktm:
                  Programming Using The Kenneth Tomiak Method.
               3) Stylize using Edit Macro %putktm:
                  Programming Using The Kenneth Tomiak Method.
               4) Stylize using the
                  Programming Using The Kenneth Tomiak Method.
----- -------- --------------------------------------------------------
02.01 20180331 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Tweaked the data returned to be:
                  WHEN not found:
                    0:
                  OTHERWISE DO:
                    1-1=ddname:1-1-1=dsname:
                  Or:
                    1-1=ddname:1-1-1=dsname:1-1-2=dsname:1-2=ddname:...
----- -------- --------------------------------------------------------
02.00 20180329 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Copied DDBYCBLK.
               2) Convert Show_Allocations to returning the matched
                  DD and their dsnames.
----- -------- --------------------------------------------------------
01.02 20180329 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Moved some code around.
----- -------- --------------------------------------------------------
01.01 20180202 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Swapped SWAREQ with Swareq22.
----- -------- --------------------------------------------------------
01.00 20070320 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Original code. Well, it has been an ongoing work.
----- -------- --------------------------------------------------------

=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine initializes constants and variables.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Initialization_Routine:
  return_code = 0
  returning_match = 0
  PARSE VAR all_my_arguments match_dd .
  IF (match_dd = "") THEN DO
    match_dd = "SYSEXEC"
  END
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine does the processing.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_Routine:
  all_ddnames = Retrieve_Allocations() /* Run through control blocks */
  grc = Show_Allocations()
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine does cleanup before exiting.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Termination_Routine:
  RETURN return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 Chase control blocks and build a STEM of DDnames and DSnames.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Retrieve_Allocations:
  psatold  = STORAGE(21C,4)                      /* POINTER TO TCB  */
  ptr2tiot = STORAGE(D2X(C2D(psatold)+12),4)     /* POINTER TO TIOT */
  tiotptr  = D2C(C2D(ptr2tiot)+24)               /* TIOT pointer    */
  tiotelen = C2D(STORAGE(D2X(C2D(tiotptr)+0),1))
  dd_names = 0
  dsn_names = 0
  dd_nnbr. = 0
  DO WHILE (tiotelen > 0)
    tiotflag = C2D(STORAGE(D2X(C2D(tiotptr)+1),1))
    tiotddnm = SPACE(STORAGE(D2X(C2D(tiotptr)+4),8))
    IF (BITAND(tiotflag,'80'X) = '80'X) THEN DO /* active ddname   */
      IF (tiotddnm = COPIES("00"x,8)) THEN DO
        SAY "tiotddnm= hex zeroes."
        ITERATE  /* LEAVE */
      END
      IF (tiotddnm <> "        ") THEN DO
        dd_name = STRIP(tiotddnm,"B"," ")
        dd_names = dd_names + 1
        dd_name.dd_names = dd_name
        dd_nnbr.tiotddnm = dd_names
        dsname.dd_names.0 = 0
        dsn_names = dsn_names + 1
      END
      tioejfcb = STORAGE(D2X(C2D(tiotptr)+12),3)
      jfcb = Swareq22(tioejfcb)
      IF (jfcb > 0) THEN DO
        jfcbdsn = STRIP(STORAGE(D2X(jfcb+000),44),"B"," ")
        jfcbelnm = STRIP(STORAGE(D2X(jfcb+044),8),"B"," ")
        IF (jfcbelnm <> "") THEN DO
          fullname = jfcbdsn"("jfcbelnm")"
        END
        ELSE DO
          fullname = jfcbdsn
        END
        ds_temp = dsname.dd_names.0 + 1
        dsname.dd_names.0 = ds_temp
        dsname.dd_names.ds_temp = fullname
        dsn_names = dsn_names + 1
      END
      ELSE DO
        SAY "Oh my gosh, SWAREQ and BATCH do not mix."
        LEAVE
      END
    END
    tiotptr = D2C(C2D(tiotptr)+tiotelen)
    tiotelen = C2D(STORAGE(D2X(C2D(tiotptr)+0),1))
  END
  RETURN dd_names

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 Put matching DD to DSNAMES for the final RETURN.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Show_Allocations:
  SELECT
    WHEN (match_dd = "*") THEN DO
      returning_match = ""
      DO dd# = 1 TO dd_names
        dn = dd_name.dd#
        returning_match = ,
          returning_match||"1-"dd#"="dn":"
        nd = dsname.dd#.0
        DO ds# = 1 TO nd
          returning_match = ,
            returning_match||"2-"dd#"-"ds#"="dsname.dd#.ds#":"
        END
      END
      return_code = 0
    END
    WHEN (match_dd <> "") THEN DO
      dd# = dd_nnbr.match_dd
      IF (dd# = 0) THEN DO
        returning_match = ,
          "0:"
        return_code = 8
        RETURN return_code
      END
      returning_match = ,
        "1-"dd_nnbr.match_dd"="match_dd":"
      dn = dd_name.dd#
      nd = dsname.dd#.0
      DO ds# = 1 TO nd
        returning_match = ,
          returning_match||"2-"dd#"-"ds#"="dsname.dd#.ds#":"
      END
      return_code = 0
    END
    OTHERWISE DO
      returning_match = "0:"
      return_code = 8
    END
  END
  RETURN return_code

/*--------------------------------------------------------------*/
/* Handle SWA above or below the bar.
   Fix from Don Poitras to adjust to z/OS 2.2 putting
   a control block above the 64-bit bar.                            */

     https://groups.google.com/forum/#!
     msg/bit.listserv.ibm-main/E-fMschhS2M/Na4x_Vc9BgAJ

     Comes out of
     http://www.cbttape.org/ftp/cbt/CBT183.zip
/*--------------------------------------------------------------*/

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 Convert an ADDRESS in SWA format to usable location
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Swareq22: PROCEDURE
  tcb = C2D(STORAGE(D2X(540),4))
  jscb = C2D(STORAGE(D2X((tcb+180)),4))
  qmpl = C2D(STORAGE(D2X((jscb+244)),4))
  sva = C2D(ARG(1))
  /* See if qmat can be above the bar */
  qmsta = C2X(STORAGE(D2X(qmpl+16),1))     /* JOB STATUS BYTE      */
  IF (SUBSTR(Hex_To_Bit(qmsta),6,1)) THEN DO /* QMQMAT64 bit on   */
    IF (RIGHT(Hex_To_Bit(C2X(ARG(1))),1) <> '1') /* SWA=BELOW  */ ,
    THEN DO
      RETURN C2D(ARG(1))+16                 /* yes, RETURN sva+16   */
    END
    qmat = C2D(STORAGE(D2X(qmpl+10),2))*(2**48) +, /* QMAT+0 QMADD01 */
         C2D(STORAGE(D2X(qmpl+18),2))*(2**32) +, /* QMAT+2 QMADD23  */
         C2D(STORAGE(D2X(qmpl+24),4))           /*  QMAT+4 QMADD    */
    RETURN C2D(STORAGE(D2X(qmat+(sva*12)+64),4))+16
  END
  ELSE DO /* NO, QMAT IS BTB      */
    IF (RIGHT(C2X(ARG(1)),1) <> 'F') THEN DO /* SWA=BELOW ?     */
      RETURN C2D(ARG(1))+16                 /* yes, RETURN sva+16   */
    END
    qmat = C2D(STORAGE(D2X(qmpl+24),4))     /* QMAT        QMADD    */
    DO WHILE (sva > 65536)
      qmat = C2D(STORAGE(D2X(qmat+12),4))   /* next QMAT   QMAT+12  */
      sva = sva - 65536                     /* 010006F -> 000006F   */
    END
    RETURN C2D(STORAGE(D2X(qmat+sva+1),4))+16
  END
  SAY "ERROR, SHOULD NOT REACH HERE!"
  RETURN -12

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 Convert a hexadecimal value to its bitstring value.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Hex_To_Bit:
  IF (bits.F <> "1111") THEN DO
    bits.0="0000"; bits.1="0001"; bits.2="0010"; bits.3="0011"
    bits.4="0100"; bits.5="0101"; bits.6="0110"; bits.7="0111"
    bits.8="1000"; bits.9="1001"; bits.A="1010"; bits.B="1011"
    bits.C="1100"; bits.D="1101"; bits.E="1110"; bits.F="1111"
  END
  hexchr = ARG(1)
  bit_str = ''
  DO ix = 1 TO LENGTH(hexchr)
    str = SUBSTR(hexchr,ix,1)
    bit_str = bit_str||bits.str
  END
  RETURN bit_str

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 Something failed.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Failure:
  SAY "Failure:"
  SAY "Line in error:" SIGL
  SAY "Sourceline   :"
  SAY SOURCELINE(sigl)
  SAY "QMAT("qmat")"
  SAY "SVA ("sva")"
  RETURN -1

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 Coding error.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Syntax:
  SAY "Syntax:"
  SAY "Line in error:" SIGL
  SAY "Sourceline   :"
  SAY SOURCELINE(sigl)
  SAY "QMAT("qmat")"
  SAY "SVA ("sva")"
  qmat_plus_sva = qmat + sva + 1
  SAY "QS+1("qmat_plus_sva")"
  SAY "D2X ("D2X(qmat_plus_sva)")"
  RETURN -1

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
End of code.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
