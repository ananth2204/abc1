/* We first need rexx in comment if compiled or read from SYSPROC. */
REXX_ISPG0206:
  rexxpgm_version = "01.00"          /* Set with 'ver 1' and 'lev 0'. */

  ADDRESS ISPEXEC "CONTROL ERRORS RETURN"

  SAY "DSINFO-directory list service"
  SAY "=============================="


Example_1:
  SAY "DSINFO - Gather attributes and statistics."
  listdsi_rc = LISTDSI(DEMO.REXX "DIRECTORY SMSINFO")
  ZERRSM = ""
  ZERRLM = ""
  ADDRESS ISPEXEC "DSINFO" ,
    "DATASET(demo.rexx)"
  dsinfo_rc = RC
  SELECT
    WHEN (dsinfo_rc = 0) THEN DO
      /* Normal completion. */
      NOP
    END
    WHEN (dsinfo_rc = 8) THEN DO
      /* User requested information is unavailable. Dialog error
         variables (ZERRLM, and so on) contain further information. */
      SAY ZERRSM
      SAY ZERRLM
      NOP
    END
    WHEN (dsinfo_rc = 12) THEN DO
      /* One of these:
         -> FAMS error
         -> Obtain error
         -> Error obtaining directory information
      */
      SAY "Ask your programmer to handle the error."
      SAY ZERRSM
      SAY ZERRLM
    END
    WHEN (dsinfo_rc = 20) THEN DO
      /* Severe error. */
      SAY "Ask your programmer to fix the DSINFO statement."
      SAY ZERRSM
      SAY ZERRLM
    END
    OTHERWISE DO
      SAY "Something very unexpected happened, RC("dsinfo_rc")."
    END
  END

  SELECT
    WHEN (dsinfo_rc = 0) THEN DO
      /* Normal completion. */
      NOP
    END
    WHEN (dsinfo_rc = 8) THEN DO
      /* User requested information is unavailable. Dialog error
         variables (ZERRLM, and so on) contain further information. */
      SAY "Ask your programmer to handle the error."
      SAY ZERRSM
      SAY ZERRLM
      reset_rc = Reset_ZDS()
    END
    WHEN (dsinfo_rc = 12) THEN DO
      /* One of these:
         -> FAMS error
         -> Obtain error
         -> Error obtaining directory information
      */
      SAY "Ask your programmer to handle the error."
      SAY ZERRSM
      SAY ZERRLM
      reset_rc = Reset_ZDS()
    END
    WHEN (dsinfo_rc = 20) THEN DO
      /* Severe error. */
      SAY "Ask your programmer to fix the DSINFO statement."
      SAY ZERRSM
      SAY ZERRLM
      reset_rc = Reset_ZDS()
    END
    OTHERWISE DO
      SAY "Something very unexpected happened, RC("dsinfo_rc")."
      reset_rc = Reset_ZDS()
    END
  END

  dsninfo. = ""
  dsninfo.0 = 0
  ctr = Append_Output(" ")
  ctr = Append_Output("Data Set Information")
  ctr = Append_Output(COPIES("=",73))
  ctr = Append_Output(" ")
  ctr = Append_Output("Data set name:" apost_dsn)
  ctr = Append_Output(" ")
  ctr = Append_Output(LEFT("Description",35) ,
    LEFT("LISTDSI",18) "ISPF-DSINFO")
  ctr = Append_Output(COPIES("-",35) COPIES("-",18) COPIES("-",18))
  ctr = Append_Output("Request result")
  ctr = Append_Output(COPIES("-",35) COPIES("-",18) COPIES("-",18))
  ctr = Append_Output("RC/LASTCC.........................." ,
    RIGHT(listdsi_rc,18,".") RIGHT(dsinfo_rc,18,"."))
  ctr = Append_Output("REASON............................." ,
    LEFT(SYSREASON,18,".") )
  IF (SYSMSGLVL1 <> "") THEN DO
    desc = "MSGLVL1............................"
    temp_msglvl1 = SYSMSGLVL1
    DO WHILE (temp_msglvl1 <> "")
      PARSE VAR temp_msglvl1 one_msglvl1 +70 temp_msglvl1
      ctr = Append_Output(desc one_msglvl1)
      desc = "        ..........................."
    END
  END
  IF (SYSMSGLVL2 <> "") THEN DO
    desc = "MSGLVL2............................"
    temp_msglvl2 = SYSMSGLVL2
    DO WHILE (temp_msglvl2 <> "")
      PARSE VAR temp_msglvl2 one_msglvl2 +70 temp_msglvl2
      ctr = Append_Output(desc one_msglvl2)
      desc = "        ..........................."
    END
  END
  IF (ZERRSM <> "") THEN DO
    ctr = Append_Output(" ZERRSM............................" ZERRSM)
  END
  IF (ZERRLM <> "") THEN DO
    desc = " ZERRLM............................"
    temp_zerrlm = ZERRLM
    DO WHILE (temp_zerrlm <> "")
      PARSE VAR temp_zerrlm one_zerrlm +64 temp_zerrlm
      ctr = Append_Output(desc one_zerrlm)
      desc = "        ..........................."
    END
  END
  ctr = Append_Output(" ")
  ctr = Append_Output("Storage MEDIA")
  ctr = Append_Output(COPIES("-",35) COPIES("-",18) COPIES("-",18))
  ctr = Append_Output("Number of volumes.................." ,
    RIGHT(" ",18,".") RIGHT(ZDS#VOLS,18,"."))
  ctr = Append_Output("Device type........................" ,
    LEFT(SYSUNIT,18,".") LEFT(ZDSDEVT,18,"."))
  ctr = Append_Output("First or only volume..............." ,
    LEFT(SYSVOLUME,18,".") LEFT(ZDSVOL,18,"."))
  temp_ZDSVTAB = STRIP(ZDSVTAB,"B"," ")
  IF (temp_ZDSVTAB <> "") THEN DO
    desc = "Volume table (All volumes)........."
    DO WHILE (temp_ZDSVTAB <> "")
      PARSE VAR temp_ZDSVTAB one_ZDSVTAB +8 temp_ZDSVTAB
      ctr = Append_Output(desc LEFT(" ",18,".") one_ZDSVTAB)
      desc = "        ..........................."
    END
  END
  ctr = Append_Output(" ")
  ctr = Append_Output("Allocated space")
  ctr = Append_Output(COPIES("-",35) COPIES("-",18) COPIES("-",18))
  ctr = Append_Output("Blocks per track..................." ,
    RIGHT(SYSBLKSTRK,18,".") )
  ctr = Append_Output("Primary space units................" ,
    LEFT(SYSUNITS,18,".") LEFT(ZDSSPC,18,"."))
  ctr = Append_Output("Secondary space units.............." ,
    RIGHT(" ",18,".") LEFT(ZDS2SPC,18,"."))
  ctr = Append_Output("Primary space allocation..........." ,
    RIGHT(SYSPRIMARY,18,".") RIGHT(ZDS1EX,18,"."))
  ctr = Append_Output("Secondary space allocation........." ,
    RIGHT(SYSSECONDS,18,".") RIGHT(ZDS2EX,18,"."))
  ctr = Append_Output("Allocated extents.................." ,
    RIGHT(SYSEXTENTS,18,".") RIGHT(ZDSEXTA,18,"."))
  IF (ZDSOVF = "NO") THEN DO
    ctr = Append_Output("Allocated space units.............." ,
      RIGHT(SYSALLOC,18,".") RIGHT(ZDSTOTA,18,"."))
  END
  ELSE DO
    ctr = Append_Output("Allocated space units (long format)" ,
      RIGHT(SYSALLOC,18,".") RIGHT(ZDSTOTAX,18,"."))
  END
  IF (SYSDSSMS = "PDS") THEN DO
    ctr = Append_Output("Allocated directory blocks........." ,
      RIGHT(SYSADIRBLK,18,".") RIGHT(ZDSDIRA,18,"."))
  END
  ctr = Append_Output(" ")
  ctr = Append_Output("Used space")
  ctr = Append_Output(COPIES("-",35) COPIES("-",18) COPIES("-",18))
  ctr = Append_Output("Used extents......................." ,
      RIGHT(" ",18,".") RIGHT(ZDSEXTU,18,"."))
  IF (ZDSOVF = "NO") THEN DO
    ctr = Append_Output("Used space units..................." ,
      RIGHT(SYSALLOC,18,".") RIGHT(ZDSTOTU,18,"."))
  END
  ELSE DO
    ctr = Append_Output("Used space units (long format)....." ,
      RIGHT(SYSALLOC,18,".") RIGHT(ZDSTOTUX,18,"."))
  END
  IF (SYSDSSMS = "PDS") THEN DO
    ctr = Append_Output("Used directory blocks.............." ,
      RIGHT(SYSUDIRBLK,18,".") RIGHT(ZDSDIRU,18,"."))
    ctr = Append_Output("Number of members.................." ,
      RIGHT(SYSMEMBERS,18,".") RIGHT(ZDS#MEM,18,"."))
  END
  IF (SYSDSSMS = "PROGRAM_LIBRARY") THEN DO
    ctr = Append_Output("PDSE directory blocks.............." ,
      RIGHT(" ",18,".") RIGHT(ZDSDIR,18,"."))
    ctr = Append_Output("Pages used (PDSE).................." ,
      RIGHT(SYSUSEDPAGES,18,".") RIGHT(ZDSPAGU,18,"."))
    ctr = Append_Output("Percent used (PDSE)................" ,
      RIGHT(" ",18,".") RIGHT(ZDSPERU,18,"."))
  END
  ctr = Append_Output(" ")
  ctr = Append_Output("DCB")
  ctr = Append_Output(COPIES("-",35) COPIES("-",18) COPIES("-",18))
  ctr = Append_Output("Data set organization.............." ,
    LEFT(SYSDSORG,18,".") LEFT(ZDSORG,18,"."))
  ctr = Append_Output("Record format......................" ,
    LEFT(SYSRECFM,18,".") LEFT(ZDSRF,18,"."))
  ctr = Append_Output("Block size........................." ,
    RIGHT(SYSBLKSIZE,18,".") RIGHT(ZDSBLK,18,"."))
  ctr = Append_Output("Logical record length.............." ,
    RIGHT(SYSLRECL,18,".") RIGHT(ZDSLREC,18,"."))
  ctr = Append_Output("Key length........................." ,
    RIGHT(SYSKEYLEN,18,".") )
  ctr = Append_Output(" ")
  ctr = Append_Output("Security")
  ctr = Append_Output(COPIES("-",35) COPIES("-",18) COPIES("-",18))
  IF (SYSPASSWORD = "SYSPASSWORD") THEN SYSPASSWORD = ""
  ctr = Append_Output("MVS password......................." ,
    LEFT(SYSPASSWORD,18) )
  IF (SYSRACFA = "SYSRACFA") THEN SYSRACFA = ""
  ctr = Append_Output("RACF..............................." ,
    LEFT(SYSRACFA,18) )
  ctr = Append_Output(" ")
  ctr = Append_Output("Dates")
  ctr = Append_Output(COPIES("-",35) COPIES("-",18) COPIES("-",18))
  ctr = Append_Output("Creation date (National format)...." ,
    LEFT(SYSCREATE,18,".") RIGHT(ZDSCDATE,18,"."))
  ctr = Append_Output("Referenced date (National format).." ,
    LEFT(SYSREFDATE,18,".") RIGHT(ZDSRDATE,18,"."))
  ctr = Append_Output("Expiration date (National format).." ,
    LEFT(SYSEXDATE,18,".") RIGHT(ZDSXDATE,18,"."))
  ctr = Append_Output("Updated since backup..............." ,
    LEFT(SYSUPDATED,18,".") )
  ctr = Append_Output("Create jobname....................." ,
    LEFT(" ",18,".") LEFT(ZDSCJOBN,18,"."))
  ctr = Append_Output("Create stepname...................." ,
    LEFT(" ",18,".") LEFT(ZDSCSTPN,18,"."))
  ctr = Append_Output(" ")
  ctr = Append_Output("SMS DATA")
  ctr = Append_Output(COPIES("-",35) COPIES("-",18) COPIES("-",18))
  ctr = Append_Output("SYSDSSMS..........................." ,
    LEFT(SYSDSSMS,18,".") LEFT(ZDSDSNT,18,"."))
  ctr = Append_Output("Storage class......................" ,
    LEFT(SYSSTORCLASS,18,".") LEFT(ZDSSC,18,"."))
  ctr = Append_Output("Data class........................." ,
    LEFT(SYSDATACLASS,18,".") LEFT(ZDSDC,18,"."))
  ctr = Append_Output("Management class..................." ,
    LEFT(SYSMGMTCLASS,18,".") LEFT(ZDSMC,18,"."))
  ctr = Append_Output("Compressible (YES/NO).............." ,
    LEFT(" ",18,".") LEFT(ZDSSEQ,18,"."))
  ctr = Append_Output(" ")
  ctr = Append_Output("Miscellaneous")
  ctr = Append_Output(COPIES("-",35) COPIES("-",18) COPIES("-",18))
  ctr = Append_Output("APF status of the data set........." ,
    LEFT(" ",18,".") LEFT(ZDSAPF,18,"."))
  ctr = Append_Output("LNKLST status of the data set......" ,
    LEFT(" ",18,".") LEFT(ZDSLNK,18,"."))
  ctr = Append_Output("Extended attribute indicator......." ,
    LEFT(" ",18,".") LEFT(ZDSEATR,18,"."))
  ctr = Append_Output("Data set version..................." ,
    LEFT(" ",18,".") RIGHT(ZDSDSNV,18,"."))
  ctr = Append_Output("Maximum number of generations......" ,
    LEFT(" ",18,".") RIGHT(ZDSNGEN,18,"."))
  ctr = Append_Output("Format 1 data control block........" ,
    "----+----1----+----2----+----3" || ,
    "----+----4----+----5----+----6" || ,
    "----+----7----+----8----+----9----+-")
  temp_ZDSCB1 = ZDSCB1
  DO WHILE (temp_ZDSCB1 <> "")
    PARSE VAR temp_ZDSCB1 one_ZDSCB1 +96 temp_ZDSCB1
    ctr = Append_Output("                                   " ,
      one_ZDSCB1)
    hex_ZDSCB1 = C2X(one_ZDSCB1)
    chr = ""
    DO hx = 1 TO LENGTH(hex_ZDSCB1) BY 2
      chr = chr || SUBSTR(hex_ZDSCB1,hx,1)
    END
    ctr = Append_Output("                                   " chr)
    chr = ""
    DO hx = 2 TO LENGTH(hex_ZDSCB1) BY 2
      chr = chr || SUBSTR(hex_ZDSCB1,hx,1)
    END
    ctr = Append_Output("                                   " chr)
    ctr = Append_Output("                                   " ,
    "----+----1----+----2----+----3" || ,
    "----+----4----+----5----+----6" || ,
    "----+----7----+----8----+----9----+-")
  END

  "ALLOC FILE(DSNINFO) NEW DELETE REUSE" ,
    "UNIT(SYSDA) TRACKS SPACE(2,2)" ,
    "DSORG(PS) RECFM(V B) BLKSIZE(0) LRECL(147)"

  ADDRESS MVS "EXECIO" dsninfo.0 ,
    "DISKW DSNINFO (STEM dsninfo. FINIS)"
  execio_rc = RC
  IF (execio_rc <> 0) THEN DO
    ZERRHM = "*"
    ZERRALRM = "YES"
    ZERRSM = "EXECIO failure"
    ZERRLM = "execio diskw error("execio_rc") on DSNINFO."
    ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
    return_code = 12
    RETURN return_code
  END
  ADDRESS ISPEXEC ,
    "LMINIT DATAID(fileid) DDNAME(DSNINFO) ENQ(SHR)"
  lminit_rc = RC
  ADDRESS ISPEXEC ,
    "VIEW DATAID("fileid")"
  ADDRESS ISPEXEC ,
    "LMCLOSE DATAID("fileid")"
  lmclose_rc = RC
  "FREE FILE(DSNINFO)"

  RETURN 0

Split_Say: PROCEDURE
  var_data = ARG(1)
  var_leng = Arg(2)
  DO WHILE var_data <> ""
    PARSE VAR var_data chr_data +(var_leng) var_data
    SAY "               " chr_data
    hex_data = C2X(chr_data)
    say_data = "                "
    DO hx = 1 TO LENGTH(hex_data) BY 2
      one_data = SUBSTR(hex_data,hx,1)
      say_data = say_data || one_data
    END
    SAY say_data
    say_data = "                "
    DO hx = 2 TO LENGTH(hex_data) BY 2
      one_data = SUBSTR(hex_data,hx,1)
      say_data = say_data || one_data
    END
    SAY say_data
  END
  RETURN 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Append stem dsninfo. with argument.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Append_Output:
  actr = dsninfo.0 + 1
  dsninfo.actr = ARG(1)
  dsninfo.0 = actr
  return actr
