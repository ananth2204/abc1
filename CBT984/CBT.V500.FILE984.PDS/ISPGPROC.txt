/* We first need rexx in comment if compiled or read from SYSPROC. */
REXX_ISPGPROC:
  rexxpgm_version = "01.00"          /* Set with 'ver 1' and 'lev 0'. */

  PARSE ARG all_my_arguments
  arg_qty = Arg()
  SAY "ARG#" arg_qty
  say all_my_arguments

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This code drives Initialization, Process, and Termination routines.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
REXX_Main_Code:
  return_code = Initialization_Routine()
  IF (return_code = 0) THEN DO
    return_code = Process_Routine()
  END
  return_code = Termination_Routine()
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================

 Dataset:  DEMO.REXX(ISPGPROC)
 Author:   Kenneth Tomiak
 Contact:  "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
 Syntax:   Invoked from ISPG0205 via DIRLIST LCCMDS.
 Purpose:  Line command processor.
 Abstract: Determine which line command was used and handle it.

-----------------------------------------------------------------------

 History of Modifications
 ------------------------
vv.mm WHEN     Who / What you did ... (Newest change at the top.)
----- -------- --------------------------------------------------------
01.00 20180416 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Original code.
----- -------- --------------------------------------------------------

-----------------------------------------------------------------------

=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 Put the onus on the user if anything should go wrong.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Standard_Global_Disclaimer:
  SAY ""
  SAY "STANDARD GLOBAL DISCLAIMER"
  SAY "=========================="
  SAY "The author explicitly disavows any claim whatsoever about"
  SAY "the correctness or functionality of this program, and"
  SAY "disclaims liability for anything and everything bad that"
  SAY "might happen in connection with, before, during, or after"
  SAY "using it. I have tried to make it work right, and I am"
  SAY "personally pretty confident that it does, but everybody"
  SAY "makes mistakes, so if you use it, you do so at your own"
  SAY "risk."
  RETURN 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine initializes constants and variables.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Initialization_Routine:
  return_code = 0
  /* APAR: OA54669
     PROBLEM DESCRIPTION: When a user issues the DIRLIST service
                          with the LCMDS parameter, many of the
                          variables that are used to pass values
                          (related to the selected line) to the
                          line command processor have incorrect
                          values and lengths.
     RN02 PSY UA95129 UP 2018/02/28 P F802
     RP02 PSY UA95246 UP 2018/03/16 P F803
     RR02 PSY UA95247 UP 2018/03/16 P F803 */
  ADDRESS ISPEXEC "VGET" ,
    "(ZUDLCMD,  ZUDPATH,  ZUDFTYPE, ZUDFPERM, ZUDFPRMO," ,
     "ZUDFOWN,  ZUDFAUDT, ZUDFEXTA, ZUDFFORM, ZUDFGRP," ,
     "ZUDFLNKS, ZUDFSIZE, ZUDFMDTM, ZUDFADTM, ZUDCRDTM) SHARED"
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine does the processing.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_Routine:
  SELECT
    WHEN (ABBREV("LL",To_Uppercase(ZUDLCMD),2) > 0) THEN DO
      SAY "Line CMD        :" ZUDLCMD
      SAY "Path/filename   :" ZUDPATH
      SAY "File type       :" ZUDFTYPE
      SAY "File permissions:" ZUDFPERM
      SAY "  in Octal      :" ZUDFPRMO
      SAY "Owner           :" ZUDFOWN
      SAY "Audit settings  :" ZUDFAUDT
      SAY "Extended attrib :" ZUDFEXTA
      SAY "File format     :" ZUDFFORM
      SAY "Owner group     :" ZUDFGRP
      SAY "Links           :" ZUDFLNKS
      SAY "File size       :" ZUDFSIZE
      SAY "Modified        :" ZUDFMDTM
      SAY "Changed         :" ZUDFCDTM
      SAY "Accessed        :" ZUDFADTM
      SAY "Created         :" ZUDCRDTM
    END
    WHEN (ABBREV("UPD",To_Uppercase(ZUDLCMD),3) > 0) THEN DO
      SAY "UPD:" ZUDLCMD "on" ZUDPATH"."
    END
    OTHERWISE DO
      SAY "You should not have reached here."
      SAY ZUDLCMD
    END
  END
  ZUDMESSG = "Handled"
  ADDRESS ISPEXEC "VPUT" ,
    "(ZUDMESSG) SHARED"
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine does cleanup before exiting.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Termination_Routine:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Convert string to lowercase.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
To_Lowercase: Parse arg myarg
  IF (lowercase_letters = "LOWERCASE_LETTERS") THEN DO
    lowercase_letters = "abcdefghijklmnopqrstuvwxyz"
  END
  IF (uppercase_letters = "UPPERCASE_LETTERS") THEN DO
    uppercase_letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  END
  RETURN Translate(myarg,lowercase_letters,uppercase_letters)

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Convert string to uppercase.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
To_Uppercase: Parse arg myarg
  IF (lowercase_letters = "LOWERCASE_LETTERS") THEN DO
    lowercase_letters = "abcdefghijklmnopqrstuvwxyz"
  END
  IF (uppercase_letters = "UPPERCASE_LETTERS") THEN DO
    uppercase_letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  END
  RETURN Translate(myarg,uppercase_letters,lowercase_letters)

