rexx_PDSEREAD: /* We still need rexx in comment if read from SYSPROC */
  rexxpgm_version = "01.00"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

 Dataset:  KET2812.MIS.REXX(PDSEREAD)
 Author:   KTomiak
 Contact:  "Kenneth Tomiak"<KenTomiak@KTomiak.org>
 Syntax:   PDSEREAD {arguments ...}
 Overview: (tell us about the code)

=======================================================================

 History of Modifications
 ------------------------
  When     Who      What you did
  -------- -------- ---------------------------------------------------
  20080115 KET2812  01.00 Original code.

=======================================================================

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */

  Parse Arg all_my_arguments
  Numeric Digits 12

rexx_Main_PDSEREAD:
  return_code = rexx_Initialize()
  If (return_code = 0) then,
    Do
      return_code = rexx_Process()
    End
  return_code = rexx_Termination()
  Return 0

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 In this routine we open any files and initialize any
 constants we might need.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
rexx_Initialize:
  PARSE VERSION,
    rexx_version,
    rexx_level,
    rexx_date
  PARSE SOURCE,
    source_host_env,
    source_call_type,
    source_uc_exec_name,
    source_hostdd,
    source_hostdsn,
    source_nf_exec_name,
    source_initial_cmd_env,
    source_asid_name,
    source_char8_user_token,
    source_hostother
  job_specs = rexx_jobspecs()
  sysvar_sysuid = SYSVAR("SYSUID")
  sysvar_sysenv = SYSVAR("SYSENV")
  say ""
  say Copies("=",55)
  say left("=" job_specs,53) "="
  say left("=" source_uc_exec_name rexxpgm_version,53) "="
  say left("=" "executing under" source_host_env,
    "as a" source_call_type,53) "="
  say left("=  on" date() "at" time()".",53) "="
  say Copies("=",55)
  say ""
  return_code = 0

  If (source_host_env >< "TSO") Then,
    Do
      Say "Wrong host environment" source_host_env
      return_code = 16
    End

  Parse Var all_my_arguments,
    pdseread_name .
  pdseread_name = "'"pdseread_name"'"

  Address TSO "Alloc File(PDSEREAD) SHR REUSE",
    "Dataset("pdseread_name")",
    "DSORG(PS) RECFM(F) BLKSIZE(256) LRECL(256) KEYLEN(8)"

  dsi_name = "PDSEREAD"                                    /* DDname */
  dsi_loc = "FILE"                        /* Default, Catalog search */
  dsi_options = "NODIRECTORY"                             /* Default */
  Call check_listdsi_rc
  If (listdsi_rc > 0) Then,
    Do
      return_code = 16
      Return return_code
    End
  Say Copies("-",131)
  Say ""
  Select
    When (Pos("U",sysrecfm) > 0)  Then,
      Do
      Say "  Member   TTR    ",
        "TTRT   TTRN   N A1 A2 STORAG FTBL EPA    F1 F2",
        "RM  AM  EPR"
      Say "  -------- ------ ",
        "------ ------ - -- -- ------ ---- ------ -- --",
        "--- --- ---"
      End
    Otherwise,
      Say "  Member   TTR    ",
      "Created    Changed    Time     initl curln modln vv.mm userid"
      Say "  -------- ------ ",
      "---------- ---------- -------- ----- ----- ----- ----- --------"
  End

  Return return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 In this routine we do our processing.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
rexx_Process:
  EOF = 0
  max_read = 25
  records_total = 0
  tot_mbrs = 0
  Do while EOF = 0
    Address MVS "ExecIO" max_read "DISKR PDSEREAD (STEM records.)"
    execio_rc = RC
    If (execio_rc > 2) Then Leave
    records_total = records_total + records.0
    Do loop_ctr = 1 To records.0
      Call parse_dir
    End
    If (execio_rc = 2) Then EOF = 1
  End
  Say "A total of" records_total "record(s) read."
  Say "A total of" tot_mbrs "member(s) read."
  Address MVS "ExecIO" "0" "DISKR PDSEREAD (FINIS)"

  Return return_code
    Say "Read" records.0 "record(s)"

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 In this routine we close files and finish up.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
rexx_Termination:
  Address TSO "Free File(PDSEREAD)"
  Return return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 Place any of your subroutines and procedures below this.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
rexx_jobspecs:
  /*---------------------------------------------------------------*/
  /* ADDRESSABILITY TO CVT FROM PSA                                */
  /*---------------------------------------------------------------*/
  PTR2PSA = 0
  CVTPTR = STORAGE(D2X(PTR2PSA + 16),4)
  /*---------------------------------------------------------------*/
  /* ADDRESSABILITY TO SMCA, THEN GET SMF SYSTEM ID                */
  /*---------------------------------------------------------------*/
  CVTSMCA = STORAGE(D2X(C2D(CVTPTR)+197),3)
  SMFID = STORAGE(D2X(C2D(CVTSMCA)+16),4)
  /*---------------------------------------------------------------*/
  /* GET JOBNAME, STEP, AND PROCEDURE                              */
  /*---------------------------------------------------------------*/
  PSATOLD  = STORAGE(21C,4)                    /* POINTER TO TCB   */
  PTRTIOT  = STORAGE(D2X(C2D(PSATOLD)+12),4)   /* POINTER TO TIOT  */
  JOBNAME  = STORAGE(D2X(C2D(PTRTIOT)),8)
  STEPNAME = STORAGE(D2X(C2D(PTRTIOT)+8),8)
  PROCNAME = STORAGE(D2X(C2D(PTRTIOT)+16),8)
  Tcbjscbb = Storage(D2x(C2d(Psatold)+181),3)              /* jscb */
  jscbssib = STORAGE(D2X(C2D(tcbjscbb)+316),4)      /* Ptr to SSIB */
  ssibjbid = STORAGE(D2X(C2D(jscbssib)+12),8)    /* job identifier */
  Return JOBNAME SSIBJBID STEPNAME PROCNAME

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 describe your routines here
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
parse_dir:
  Parse Var records.loop_ctr,
    dir_size +2,
    dir_entries
  Say "Block is" c2d(dir_size) "bytes."
  Say dir_entries
  Do While dir_entries <> ""
    stats_line. = ""
    stats_ctr = 1
    Parse Var dir_entries,
      one_entry +8,
      one_loc   +3,
      one_flag  +1,
      dir_entries
    If (Left(one_entry,1) = 'FF'x) Then Leave         /* End of DIRS */
    If (Left(one_entry,1) = '00'x) Then Leave        /* End of block */
    tot_mbrs = tot_mbrs + 1
    Select
      When (Pos("U",sysrecfm) > 0)  Then,
        Do
          call stats_loadlib
        End
      Otherwise,
        If (BitAnd(one_flag,'0F'x) = '0F'x) Then call stats_ispf
    End
    Say " " one_entry c2x(one_loc) stats_line.1
    If (stats_ctr > 1) Then,
      Do stats_idx = 2 to stats_ctr
        Say "            " stats_line.stats_idx
      End
  End
  Say ""
  Return 0

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
  Decode the ISPF based statistics
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
stats_ispf:
  Parse Var dir_entries,
    user_char +30,
    dir_entries
  midblk = 1
  mbr_vv = Right("00"c2d(SubStr(user_char,midblk,1)),2)
  midblk = midblk + 1
  mbr_mm = Right("00"c2d(SubStr(user_char,midblk,1)),2)
  midblk = midblk + 1
  mbr_xx = c2x(SubStr(user_char,midblk,1))
  midblk = midblk + 1
  mbr_sc = c2x(SubStr(user_char,midblk,1))
  midblk = midblk + 1
  mbr_credt = doy2g(c2x(SubStr(user_char,midblk,4)))
  midblk = midblk + 4
  mbr_chgdt = doy2g(c2x(SubStr(user_char,midblk,4)))
  midblk = midblk + 4
  mbr_hr = c2x(SubStr(user_char,midblk,1))
  midblk = midblk + 1
  mbr_mn = c2x(SubStr(user_char,midblk,1))
  midblk = midblk + 1
  mbr_curln = c2d(SubStr(user_char,midblk,2))
  midblk = midblk + 2
  mbr_initl = c2d(SubStr(user_char,midblk,2))
  midblk = midblk + 2
  mbr_modln = c2d(SubStr(user_char,midblk,2))
  midblk = midblk + 2
  mbr_userid = SubStr(user_char,midblk,8)
  midblk = midblk + 8
  mbr_notused = SubStr(user_char,midblk,2)
  midblk = midblk + 2
  stats_line.1 = stats_line.1,
    mbr_credt mbr_chgdt,
    mbr_hr":"mbr_mn":"mbr_sc,
    Right("     "mbr_initl,5) Right("     "mbr_curln,5),
    Right("     "mbr_modln,5),
    mbr_vv'.'mbr_mm mbr_userid
  Return 0

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
  Decode the loadlib statistics using macro(IHAPDS)
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
stats_loadlib:
  Parse Var dir_entries,
    user_char +24,
    dir_entries
  /* START-OF-BASIC-SECTION                                          */
  pds2ttrt                 = c2x(SubStr(user_char,1,3))
  stats_line.1 = stats_line.1 pds2ttrt
  pds2zero                 = c2x(SubStr(user_char,4,1))
  pds2ttrn                 = c2x(SubStr(user_char,5,3))
  stats_line.1 = stats_line.1 pds2ttrn
  pds2nl                   = c2d(SubStr(user_char,8,1))
  stats_line.1 = stats_line.1 pds2nl
  pds2atr1                 =     SubStr(user_char,9,1)
  stats_line.1 = stats_line.1 c2x(pds2atr1)
    pds2rent             = BitAnd(pds2atr1,'80'x)
    If (pds2rent = '80'x) Then,
      Do
        stats_ctr = stats_ctr + 1
        stats_line.stats_ctr = stats_line.stats_ctr,
          "                     80=RENT"
      End
    pds2reus             = BitAnd(pds2atr1,'40'x)
    If (pds2reus = '40'x) Then,
      Do
        stats_ctr = stats_ctr + 1
        stats_line.stats_ctr = stats_line.stats_ctr,
          "                     40=REUS"
      End
    pds2ovly             = BitAnd(pds2atr1,'20'x)
    If (pds2ovly = '20'x) Then,
      Do
        stats_ctr = stats_ctr + 1
        stats_line.stats_ctr = stats_line.stats_ctr,
          "                     20=OVERLAY"
      End
    pds2test             = BitAnd(pds2atr1,'10'x)
    If (pds2test = '10'x) Then,
      Do
        stats_ctr = stats_ctr + 1
        stats_line.stats_ctr = stats_line.stats_ctr,
          "                     10=TEST"
      End
    pds2load             = BitAnd(pds2atr1,'08'x)
    If (pds2load = '08'x) Then,
      Do
        stats_ctr = stats_ctr + 1
        stats_line.stats_ctr = stats_line.stats_ctr,
          "                     08=ONLY LOADABLE"
      End
    pds2sctr             = BitAnd(pds2atr1,'04'x)
    If (pds2sctr = '04'x) Then,
      Do
        stats_ctr = stats_ctr + 1
        stats_line.stats_ctr = stats_line.stats_ctr,
          "                     04=SCATTER LOAD"
      End
    pds2exec             = BitAnd(pds2atr1,'02'x)
    If (pds2exec = '02'x) Then,
      Do
        stats_ctr = stats_ctr + 1
        stats_line.stats_ctr = stats_line.stats_ctr,
          "                     02=EXECUTABLE"
      End
    pds21blk             = BitAnd(pds2atr1,'01'x)
    If (pds21blk = '01'x) Then,
      Do
        stats_ctr = stats_ctr + 1
        stats_line.stats_ctr = stats_line.stats_ctr,
          "                     01=1st TEXT BLOCK"
      End
  pds2atr2                 =     SubStr(user_char,10,1)
  stats_line.1 = stats_line.1 c2x(pds2atr2)
    pds2flvl             = BitAnd(pds2atr2,'80'x)
    If (pds2flvl = '80'x) Then,
      Do
        stats_ctr = stats_ctr + 1
        stats_line.stats_ctr = stats_line.stats_ctr,
          "                        80=NO E LINKAGE EDITOR"
      End
    pds2org0             = BitAnd(pds2atr2,'40'x)
    If (pds2org0 = '40'x) Then,
      Do
        stats_ctr = stats_ctr + 1
        stats_line.stats_ctr = stats_line.stats_ctr,
          "                        40=ORIGIN ZERO"
      End
    pds2ep0              = BitAnd(pds2atr2,'20'x)
    If (pds2ep0  = '20'x) Then,
      Do
        stats_ctr = stats_ctr + 1
        stats_line.stats_ctr = stats_line.stats_ctr,
          "                        20=ENTPT ZERO"
      End
    pds2nrld             = BitAnd(pds2atr2,'10'x)
    If (pds2nrld = '10'x) Then,
      Do
        stats_ctr = stats_ctr + 1
        stats_line.stats_ctr = stats_line.stats_ctr,
          "                        10=NO RLD"
      End
    pds2nrep             = BitAnd(pds2atr2,'08'x)
    If (pds2nrep = '08'x) Then,
      Do
        stats_ctr = stats_ctr + 1
        stats_line.stats_ctr = stats_line.stats_ctr,
          "                        08=NOT REPROCESSABLE"
      End
    pds2tstn             = BitAnd(pds2atr2,'04'x)
    If (pds2tstn = '04'x) Then,
      Do
        stats_ctr = stats_ctr + 1
        stats_line.stats_ctr = stats_line.stats_ctr,
          "                        04=TESTRAN SYMBOL CARDS"
      End
    pds2lef              = BitAnd(pds2atr2,'02'x)
    If (pds2lef  = '02'x) Then,
      Do
        stats_ctr = stats_ctr + 1
        stats_line.stats_ctr = stats_line.stats_ctr,
          "                        02=Linkage Editor F"
      End
    pds2refr             = BitAnd(pds2atr2,'01'x)
    If (pds2refr = '01'x) Then,
      Do
        stats_ctr = stats_ctr + 1
        stats_line.stats_ctr = stats_line.stats_ctr,
          "                        01=REFRESHABLE"
      End
  pds2stor                 = c2x(SubStr(user_char,11,3))
  stats_line.1 = stats_line.1 pds2stor
  pds2ftbl                 = c2x(SubStr(user_char,14,2))
  stats_line.1 = stats_line.1 pds2ftbl
  pds2epa                  = c2x(SubStr(user_char,16,3))
  stats_line.1 = stats_line.1 pds2epa
  pds2ftb1                 =     SubStr(user_char,19,1)
  stats_line.1 = stats_line.1 c2x(pds2ftb1)
    pdsaosle             = BitAnd(pds2ftb1,'80'x)
    If (pdsaosle = '80'x) Then,
      Do
        stats_ctr = stats_ctr + 1
        stats_line.stats_ctr = stats_line.stats_ctr,
 "                                              80=AOS Linkage Editor"
      End
    pds2big              = BitAnd(pds2ftb1,'40'x)
    If (pds2big  = '40'x) Then,
      Do
        stats_ctr = stats_ctr + 1
        stats_line.stats_ctr = stats_line.stats_ctr,
 "                                              40=LPO SECTION Exists"
      End
    pds2paga             = BitAnd(pds2ftb1,'20'x)
    If (pds2paga = '20'x) Then,
      Do
        stats_ctr = stats_ctr + 1
        stats_line.stats_ctr = stats_line.stats_ctr,
 "                                              20=PAGE Alignment"
      End
    pds2ssi              = BitAnd(pds2ftb1,'10'x)
    If (pds2ssi  = '10'x) Then,
      Do
        stats_ctr = stats_ctr + 1
        stats_line.stats_ctr = stats_line.stats_ctr,
 "                                              10=SSI SECTION Exists"
      End
    pdsapflg             = BitAnd(pds2ftb1,'08'x)
    If (pdsapflg = '08'x) Then,
      Do
        stats_ctr = stats_ctr + 1
        stats_line.stats_ctr = stats_line.stats_ctr,
 "                                              08=APF SECTION Exists"
      End
    pds2pgmo             = BitAnd(pds2ftb1,'04'x)
    If (pds2pgmo = '04'x) Then,
      Do
        stats_ctr = stats_ctr + 1
        stats_line.stats_ctr = stats_line.stats_ctr,
 "                                              04=PDS2FTB3 VALID"
      End
  pds2ftb2                 =     SubStr(user_char,20,1)
  stats_line.1 = stats_line.1 c2x(pds2ftb2)
    pds2altp             = BitAnd(pds2ftb2,'80'x)
    If (pds2altp = '80'x) Then,
      Do
        stats_ctr = stats_ctr + 1
        stats_line.stats_ctr = stats_line.stats_ctr,
        "                                                ",
        "80=Binder Primary Name"
      End
    pdslrmod             = BitAnd(pds2ftb2,'10'x)
    If (pdslrmod = '10'x) Then stats_line.1 = stats_line.1 "ANY"
    Else                       stats_line.1 = stats_line.1 "24 "
    pdsaamod             = BitAnd(pds2ftb2,'0C'x)
    If (pdsaamod = '01'x) Then stats_line.1 = stats_line.1 "64 "
    If (pdsaamod = '08'x) Then stats_line.1 = stats_line.1 "31 "
    If (pdsaamod = '00'x) Then stats_line.1 = stats_line.1 "24 "
    If (pdsaamod = '0C'x) Then stats_line.1 = stats_line.1 "ANY"
      /*
*                             B'00' = AMODE 24
*                             B'10' = AMODE 31
*                             B'11' = AMODE ANY
*                             B'01' = AMODE 64
*/
    pdsmamod             = BitAnd(pds2ftb2,'03'x)
    If (pdsmamod = '03'x) Then stats_line.1 = stats_line.1 "ANY"
    If (pdsmamod = '02'x) Then stats_line.1 = stats_line.1 "31 "
    If (pdsmamod = '01'x) Then stats_line.1 = stats_line.1 "64 "
    If (pdsmamod = '00'x) Then stats_line.1 = stats_line.1 "24 "
      /*
*                             B'00' = AMODE 24
*                             B'10' = AMODE 31
*                             B'11' = AMODE ANY
*                             B'01' = AMODE 64
*/
  If (pds2pgmo = '04'x) Then,
    Do
      stats_line.1 = stats_line.1 "PGO flag #3"
      pds2ftb3             =     SubStr(user_char,21,1)
        pds2nmig         = BitAnd(pds2ftb3,'80'x)
        If (pds2mnig = '80'x) Then,
        stats_line.1 = stats_line.1 "PGO >< LMOD"
        pds2prim         = BitAnd(pds2ftb3,'40'x)
        If (pds2prim = '40'x) Then,
        stats_line.1 = stats_line.1 "FETCHOPT PRIME"
        pds2pack         = BitAnd(pds2ftb3,'20'x)
        If (pds2pack = '20'x) Then,
    stats_line.1 = stats_line.1 "FETCHOPT PACK"
    End
  Else,
    Do
      pds2rlds             = c2d(SubStr(user_char,21,1))
      stats_line.1 = stats_line.1 "#RLD("pds2rlds")"
    End
  user_opt_loc = 22
  /* END-OF-BASIC-SECTION                                            */
  /* START-OF-SCATTER-LOAD-SECTION OPTIONAL                          */
  If (pds2sctr = '01'x) Then,
    Do
      stats_ctr = stats_ctr + 1
      stats_line.stats_ctr = "    SCATTER LOAD"
      pds2slsz             = c2d(SubStr(user_char,user_opt_loc,2))
      stats_line.stats_ctr = stats_line.status_ctr,
        "List size("pds2slsz")"
      user_opt_loc = user_opl_loc + 2
      pds2ttsz             = c2d(SubStr(user_char,user_opt_loc,2))
      stats_line.stats_ctr = stats_line.status_ctr,
        "XLAT size("pds2ttsz")"
      user_opt_loc = user_opl_loc + 2
      pds2esdt             =     SubStr(user_char,user_opt_loc,2)
      stats_line.stats_ctr = stats_line.status_ctr,
        "1st Block ESDID("pds2esdt")"
      user_opt_loc = user_opl_loc + 2
      pds2esdc              =    SubStr(user_char,user_opt_loc,2)
      stats_line.stats_ctr = stats_line.status_ctr,
        "ENTPT Scatter ESDID("pds2esdt")"
      user_opt_loc = user_opl_loc + 2
    End
  Else,
    Do
      pds2slsz = 0
      pds2ttsz = "0000"
      pds2esdt = "  "
      pds2esdc = "  "
    End
  /* END-OF-SCATTER-LOAD-SECTION                                     */
  /* START-OF-ALIAS-SECTION                                          */
  If (is_alias = "YES") Then,
    Do
      stats_ctr = stats_ctr + 1
      stats_line.stats_ctr = "    Alias SECTION"
      pds2epm              = c2x(SubStr(user_char,user_opt_loc,3))
      stats_line.stats_ctr = stats_line.status_ctr,
        "Member ENTPT("pds2epm")"
      user_opt_loc = user_opt_loc + 3
      pds2mnm              =    SubStr(user_char,user_opt_loc,8)
      stats_line.stats_ctr = stats_line.status_ctr,
        "Member name("pds2mnm")"
      user_opt_loc = user_opt_loc + 8
    End
  Else,
    Do
      pds2epm = "000000"
      pds2mnm = "        "
    End
  /* END-OF-ALIAS-SECTION                                            */
  /* START-OF-SSI-SECTION                                            */
  If (pds2ssi = '10'x) Then,
    Do
      stats_ctr = stats_ctr + 1
      stats_line.stats_ctr = "    SSI: loc("user_opt_loc")"
      user_opt = user_opt_loc // 2
      If (user_opt > 0) Then,
        Do
          user_opt_loc = user_opt_loc +user_opt
          stats_line.stats_ctr = stats_line.stats_ctr,
            "HWBDY("user_opt_loc")"
        End
      pdschlvl             = c2x(SubStr(user_char,user_opt_loc,1))
      stats_line.stats_ctr = stats_line.stats_ctr,
        "Change level("pdschlvl")"
      user_opt_loc = user_opt_loc + 1
      pdsssifb             =     SubStr(user_char,user_opt_loc,1)
      stats_line.stats_ctr = stats_line.stats_ctr,
        "SSI FLAG("c2x(pdsssifb)")="
      user_opt_loc = user_opt_loc + 1
        pdsforce         = BitAnd(pdsssifb,'40'x)
        If (pdsforce = '40'x) Then,
        stats_line.stats_ctr = stats_line.stats_ctr"FORCE/"
        pdsusrch         = BitAnd(pdsssifb,'20'x)
        If (pdsusrch = '20'x) Then,
        stats_line.stats_ctr = stats_line.stats_ctr"USER CHANGE/"
        pdsemfix         = BitAnd(pdsssifb,'10'x)
        If (pdsusrch = '10'x) Then,
        stats_line.stats_ctr = stats_line.stats_ctr"IBM Emergency/"
        pdsdepch         = BitAnd(pdsssifb,'08'x)
        If (pdsusrch = '08'x) Then,
        stats_line.stats_ctr = stats_line.stats_ctr"DEPENDENCY/"
        pdssysgn         = BitAnd(pdsssifb,'03'x)
          pdsnosgn       = BitAnd(pdssysgn,'00'x)
          If (pdssysgn = '00'x) Then,
          stats_line.stats_ctr = stats_line.stats_ctr "NO SYSGEN"
          pdsptsgn       = BitAnd(pdssysgn,'04'x)
          If (pdsptsgn = '04'x) Then,
          stats_line.stats_ctr = stats_line.stats_ctr "PARTIAL SYSGEN"
          pdscmsgn       = BitAnd(pdssysgn,'02'x)
          If (pdscmsgn = '02'x) Then,
          stats_line.stats_ctr = stats_line.stats_ctr "COMPLETE SYSGEN"
          pdsibmmb         = BitAnd(pdsssifb,'01'x)
          If (pdsibmmb = '01'x) Then,
      stats_line.stats_ctr = stats_line.stats_ctr "IBM SUPPLIED MEMBER"
      user_opt_loc = user_opt_loc - 1
      pdsmbrsn           = c2x(SubStr(user_char,user_opt_loc,4))
      stats_line.stats_ctr = stats_line.stats_ctr "SN("pdsmbrsn")"
      user_opt_loc = user_opt_loc + 4
    End
  Else,
    Do
      pdschlvl = '00'x
      pdsssifb = '00'x
        pdsforce         = BitAnd(pdsssifb,'40'x)
        pdsusrch         = BitAnd(pdsssifb,'20'x)
        pdsemfix         = BitAnd(pdsssifb,'10'x)
        pdsdepch         = BitAnd(pdsssifb,'08'x)
        pdssysgn         = BitAnd(pdsssifb,'03'x)
          pdsnosgn       = BitAnd(pdssysgn,'00'x)
          pdsptsgn       = BitAnd(pdssysgn,'10'x)
          pdscmsgn       = BitAnd(pdssysgn,'01'x)
        pdsibmmb         = BitAnd(pdsssifb,'01'x)
      pdsmbrsn = "  "
    End
  /* END-OF-SSI-SECTION                                              */
  /* START-OF-APF-SECTION                                            */
  If (pdsapflg = '08'x) Then,
    Do
      stats_ctr = stats_ctr + 1
      stats_line.stats_ctr = stats_line.stats_ctr "APF:"
      pdsapfct             = c2x(SubStr(user_char,user_opt_loc,1))
      stats_line.stats_ctr = stats_line.stats_ctr "Len("pdsapfct")"
      user_opt_loc = user_opt_loc + 1
      pdsapfac             = c2x(SubStr(user_char,user_opt_loc,1))
      stats_line.stats_ctr = stats_line.stats_ctr "AC("pdsapfac")"
/*    user_opt_loc = user_opt_loc + 1
      stats_line.stats_ctr = stats_line.stats_ctr "AC("pdsapfac")" */
    End
  Else,
    Do
      pdsapfct = 0
      pdsapfac = " "
    End
  /* END-OF-APF-SECTION                                              */
  /* START-OF-LPO-SECTION                                            */
  If (pds2big = '40'x) Then,
    Do
      stats_ctr = stats_ctr + 1
      stats_line.stats_ctr = stats_line.stats_ctr "LPO:"
      pds2lpol         = c2d(SubStr(user_char,user_opt_loc,1))
      stats_line.stats_ctr = stats_line.stats_ctr "Len("pds2lpol")"
      user_opt_loc = user_opt_loc + 1
      pds2vstr         = c2x(SubStr(user_char,user_opt_loc,4))
      stats_line.stats_ctr = stats_line.stats_ctr,
        "Virtual Storage("pds2vstr")"
      user_opt_loc = user_opt_loc + 4
      pds2mepa         = c2x(SubStr(user_char,user_opt_loc,4))
      stats_line.stats_ctr = stats_line.stats_ctr,
        "Main EPA offset("pds2mepa")"
      user_opt_loc = user_opt_loc + 4
      pds2aepa         = c2x(SubStr(user_char,user_opt_loc,4))
      stats_line.stats_ctr = stats_line.stats_ctr,
        "Alias EPA offset("pds2aepa")"
      user_opt_loc = user_opt_loc + 4
    End
  Else,
    Do
      pds2lpol = 0
      pds2vstr = 0
      pds2mepa = "00000000"
      pds2aepa = "00000000"
    End
  /* END-OF-LPO-SECTION                                              */
  Return 0

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
  Convert day-of-year to Gregorian date
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
doy2g: Procedure
  Arg ccyyddds
  Parse Var ccyyddds,
    century +2,
    year    +2,
    days    +3,
    sign    +1
  yy = 1900 + (century * 100) + year
  ddd = days + 0
  If (yy // 4 = 0) Then,
     dom = 31 29 31 30 31 30 31 31 30 31 30 31 999
   Else,
     dom = 31 28 31 30 31 30 31 31 30 31 30 31 999
  If (yy // 400 = 0)  Then,
     dom = 31 28 31 30 31 30 31 31 30 31 30 31 999
  Do i = 1 by 1 until ddd < 0
     ddd = ddd - word(dom,i)
  End
  Return Right(i,2,0)"/"Right(ddd+word(dom,i),2,0)"/"yy

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
  Show whether ListDSI worked or not.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
check_listdsi_rc:
  Say "ListDSI("dsi_name dsi_loc dsi_options") testing results:"
  your_msg = Msg("OFF")          /* hide TSO/E messages from LISTDSI */
  listdsi_rc = ListDSI(dsi_name dsi_loc dsi_options)
  my_msg = Msg(your_msg)
  Return 0                                       /* DO NOT SHOW DATA */
  Select
    When (listdsi_rc = 0) Then,                  /* Complete success */
      Do
        Call show_listdsi
      End
    When (listdsi_rc = 4) Then,                   /* Partial success */
      Do
        Call show_partial_listdsi
      End
    When (listdsi_rc = 16) Then,                       /* No success */
      Do
        Say "ListDSI failed, RC("listdsi_rc")"
        Say "  SYSREASON ("sysreason")"
        Call show_sysreason
        Say "  SYSMSGLVL1("sysmsglvl1")"
        Say "  SYSMSGLVL2("sysmsglvl2")"
      End
    Otherwise,
      Say "Unexpected RC("listdsi_rc")"
  End
  Return 0

show_listdsi:
  Say dsi_name "listed okay."
  Say "  SYSDSNAME    ("sysdsname")"
  Say "  SYSVOLUME    ("sysvolume")"
  Say "  SYSUNIT      ("sysunit")"
  Say "  SYSDSORG     ("sysdsorg")"
  Select
    When (sysdsorg = "PS")  Then Say "    Physical Sequential"
    When (sysdsorg = "PSU") Then Say "    Physical Sequential unmovable"
    When (sysdsorg = "DA")  Then Say "    Direct organization"
    When (sysdsorg = "DAU") Then Say "    Direct organization unmovable"
    When (sysdsorg = "IS")  Then Say "    Indexed Sequential"
    When (sysdsorg = "ISU") Then Say "    Indexed Sequential unmovable"
    When (sysdsorg = "PO")  Then Say "    Partitioned organization"
    When (sysdsorg = "POU") Then,
      Say "    Partitioned organization unmovable"
    When (sysdsorg = "VS")  Then Say "    VSAM"
    When (sysdsorg = "???") Then Say "    Unknown"
    Otherwise,
      Say "    Unexpected DSORG("sysdsorg")"
  End
  Say "  SYSRECFM     ("sysrecfm")"
  Select
    When (Pos("U",sysrecfm) > 0)  Then,
      Say "    Undefined record length"
    When (Pos("F",sysrecfm) > 0)  Then,
      Say "    Fixed record length"
    When (Pos("V",sysrecfm) > 0)  Then,
      Say "    Variable record length"
    When (Pos("T",sysrecfm) > 0)  Then,
      Say "    Track overflow feature"
    When (Pos("B",sysrecfm) > 0)  Then,
      Say "    Blocked"
    When (Pos("S",sysrecfm) > 0)  Then,
      Say "    Standard or spanned records"
    When (Pos("A",sysrecfm) > 0)  Then,
      Say "    ASCII control characters"
    When (Pos("M",sysrecfm) > 0)  Then,
      Say "    Machine code control characters"
    When (Pos("??????",sysrecfm) > 0)  Then,
      Say "    Unknown"
    Otherwise,
      Say "    Unexpected RECFM("sysrecfm")"
  End
  Say "  SYSLRECL     ("syslrecl")"
  Say "  SYSBLKSIZE   ("sysblksize")"
  Say "  SYSKEYLEN    ("syskeylen")"
  Say "  SYSALLOC     ("sysalloc")"
  Say "  SYSUSED      ("sysused")"
  Say "  SYSUSEDPAGES ("sysusedpages")"
  Say "  SYSPRIMARY   ("sysprimary")"
  Say "  SYSSECONDS   ("sysseconds")"
  Say "  SYSUNITS     ("sysunits")"
  Select
    When (sysunits = "CYLINDER") Then,
      Say "    CYL"
    When (sysunits = "TRACK") Then,
      Say "    TRK"
    When (sysunits = "BLOCK") Then,
      Say "    BLK"
    When (sysunits = "??????") Then,
      Say "    UNK"
    Otherwise,
      Say "    Unexpected UNITS("sysunits")"
  End
  Say "  SYSEXTENTS   ("sysextents")"
  Say "  SYSCREATE    ("syscreate")"
  Say "  SYSREFDATE   ("sysrefdate")"
  Say "  SYSEXDATE    ("sysexdate")"
  Say "  SYSPASSWORD  ("syspassword")"
  Select
    When (syspassword = "NONE") Then,
      Say "    No password protection, and that is a good thing."
    When (syspassword = "READ") Then,
      Say "    A password is reguired to read the dataset, bad."
    When (syspassword = "WRITE") Then,
      Say "    A password is reguired to write the dataset, worse."
    Otherwise,
      Say "    Unexpected PASSWORD("syspassword")"
  End
  Say "  SYSRACFA     ("sysracfa")"
  Select
    When (sysracfa = "NONE") Then,
      Say "    No RACF protection, and that is a bad thing."
    When (sysracfa = "GENERIC") Then,
      Say "    A generic profile covers this dataset, good."
    When (sysracfa = "DISCRETE") Then,
      Say "    A discrete profile covers this dataset, try generics."
    Otherwise,
      Say "    Unexpected RACF("sysracfa")"
  End
  Say "  SYSUPDATED   ("sysupdated")"
  Select
    When (sysupdated = "YES") Then,
      Say "    Dataset has been updated since the last backup."
    When (sysupdated = "NO") Then,
      Say "    Dataset is still the same since the last backup."
    Otherwise,
      Say "    Unexpected UPDATE("sysupdated")"
  End
  Say "  SYSTRKSCYL   ("systrkscyl")"
  Say "  SYSBLKSTRK   ("sysblkstrk")"
  If (Pos("PO",sysdsorg) > 0) Then,
    Do
      Say " SYSADIRBLK   ("sysadirblk")"
      Say " SYSUDIRBLK   ("sysudirblk")"
      Say " SYSMEMBERS   ("sysmembers")"
    End
  Say "  SYSREASON    ("sysreason")"
  Call show_sysreason
  Say "  SYSMSGLVL1   ("sysmsglvl1")"
  Say "  SYSMSGLVL2   ("sysmsglvl2")"
  Say "  SYSDSSMS     ("sysdssms")"
  Select
    When (sysdssms = "SEQ") Then,
      Say "    DSNTYPE not retrieved, Sequential dataset."
    When (sysdssms = "PDS") Then,
      Say "    DSNTYPE not retrieved, Partitioned dataset."
    When (sysdssms = "PDSE") Then,
      Say "    DSNTYPE not retrieved, Partitioned dataset extended."
    When (sysdssms = "LIBRARY") Then,
      Say "    Empty PDSE."
    When (sysdssms = "PROGRAM_LIBRARY") Then,
      Say "    Program PDSE."
    When (sysdssms = "DATA_LIBRARY") Then,
      Say "    Data PDSE."
    Otherwise,
      Say "    Unexpected DSSMS("sysdssms")"
  End
  If (Pos("SMSINFO",dsi_options) > 0) Then,
    Do
      Say "  SYSDATACLASS ("sysdataclass")"
      Say "  SYSSTORCLASS ("sysstorclass")"
      Say "  SYSMGMTCLASS ("sysmgmtclass")"
    End
  If (Pos("S",sysdsorg) > 0)  Then,
    Do
      Say "  SYSSEQDSNTYPE("sysseqdsntype")"
      Select
        When (sysseqdsntype = "BASIC") Then,
          Say "    Regular Sequential dataset."
        When (sysseqdsntype = "LARGE") Then,
          Say "    Large Sequential dataset."
        When (sysseqdsntype = "EXTENDED") Then,
          Say "    Extended Sequential dataset."
        Otherwise,
          Say "    Unexpected SEQDSNTYPE("sysseqdsntype")"
      End
    End
  Return 0

show_partial_listdsi:
  Say dsi_name "partially listed."
  SYSDATACLASS = "NON-SMS"
  SYSSTORCLASS = "NON-SMS"
  SYSMGMTCLASS = "NON-SMS"
  Call show_listdsi
  Return 0

show_sysreason:
  my_sysreason = Right(sysreason,2)
  If (listdsi_rc = 4) Then my_sysreason = 30
  Say "SYSMSGLVL2 = IKJ584"my_sysreason"I:"
  Select
    When (sysreason = 00) Then,
      Say "    Normal completion"
    When (sysreason = 01) Then,
      Say "    Error parsing the function."
    When (sysreason = 02) Then,
      Say "    Dynamic allocation processing error."
    When (sysreason = 03) Then,
      Say "    The data set is a type that can not be processed."
    When (sysreason = 04) Then,
      Say "    Error determining UNIT name."
    When (sysreason = 05) Then,
      Say "    Data set is not catalogued."
    When (sysreason = 06) Then,
      Say "    Error obtaining the dataset name."
    When (sysreason = 07) Then,
      Say "    Error finding the device type."
    When (sysreason = 08) Then,
      Say "    The dataset is not on a DASD volume."
    When (sysreason = 09) Then,
      Say "    NORECALL prevented retrieval of information."
    When (sysreason = 11) Then,
      Say "    DIRECTORY specified, but you lack read access."
    When (sysreason = 12) Then,
      Say "    VSAM datasets not supported."
    When (sysreason = 13) Then,
      Say "    The dataset could not be opened."
    When (sysreason = 14) Then,
      Say "    Device type not found in UCB tables."
    When (sysreason = 17) Then,
      Say "    System or User abend occurred."
    When (sysreason = 18) Then,
      Say "    Partial dataset information returned."
    When (sysreason = 19) Then,
      Say "    Multi-volume dataset."
    When (sysreason = 20) Then,
      Say "    Device type not found in EDT table."
    When (sysreason = 21) Then,
      Say "    Catalog locate error."
    When (sysreason = 22) Then,
      Say "    Volume not mounted."
    When (sysreason = 23) Then,
      Say "    Permanent I/O error on volume."
    When (sysreason = 24) Then,
      Say "    Data set not found."
    When (sysreason = 25) Then,
      Say "    Migrated to non-DASD volume."
    When (sysreason = 26) Then,
      Say "    MSS device."
    When (sysreason = 27) Then,
      Say "    No VOLSER assigned."
    When (sysreason = 28) Then,
      Say "    DDname not one to eight valid characters."
    When (sysreason = 29) Then,
      Say "    You need to sepcify either a dataset name or ddname."
    When (sysreason = 30) Then,
      Say "    Not SMS managed."
    When (sysreason = 31) Then,
      Say "    ISITMGD macro had a problem, see sysmsglvl2."
    When (sysreason = 32) Then,
      Say "    DFSMS/MVS level incompatability."
    When (sysreason = 33) Then,
      Say "    DFSMS/MVS is not active."
    When (sysreason = 34) Then,
      Say "    OPEN error."
    When (sysreason = 35) Then,
      Say "    Unexpected error from DFSMS/MVS IGWFAMS routine."
    When (sysreason = 36) Then,
      Say "    Unexpected error from SMS service module."
    When (sysreason = 37) Then,
      Say "    Unexpected error from DFSMS service IGGCSI00."
    Otherwise,
      Say "    Unexpected sysreason("sysreason")"
  End
  Return 0

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
__DATA__
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
