rexx_IPCSDB2:  /* We still need rexx in comment if read from SYSPROC */
  rexxpgm_version = "01.00"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

 Dataset:  KET2812.MIS.REXX(IPCSDB2)
 Author:   KTomiak
 Contact:  "Kenneth Tomiak"<KenTomiak@KTomiak.org>
 Syntax:   IPCSDB2 {DB2_envir}
 Overview: Use the argument to allocate the DB2_envir loadlibs and
           parmlib before launching IPCS.
           Validates DB2_envir against the mvs system name.
           Optionally chooses a default if DB2_envir is not passed.

=======================================================================

 History of Modifications
 ------------------------
vv.mm When     Who      What you did
----- -------- -------- -----------------------------------------------
01.01 20081217 KET2812  Copied IPCSKIX and modified for DB2.
----- -------- -------- -----------------------------------------------
01.00 20080620 KET2812  Original code.
----- -------- -------- -----------------------------------------------

=======================================================================

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */

  Parse Arg all_my_arguments
  Numeric Digits 12

rexx_Main_IPCSDB2:
  return_code = rexx_Initialize()
  If (return_code = 0) then,
    Do
      return_code = rexx_Process()
    End
  return_code = rexx_Termination()
  Return return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 In this routine we open any files and initialize any
 constants we might need.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
rexx_Initialize:
  PARSE VERSION,
    version_rexx_name,
    version_rexx_version,
    version_rexx_date
  PARSE SOURCE,
    source_host_env,
    source_call_type,
    source_uc_exec_name,
    source_hostdd,
    source_hostdsn,
    source_nf_exec_name,
    source_initial_cmd_env,
    source_asid_name,
    source_char8_user_token,
    source_hostother
  return_code = 0

  If (source_host_env >< "TSO") Then,
    Do
      Say "Wrong host environment" source_host_env
      return_code = 16
    End

  mvsvar_sysname = MVSVAR("SYSNAME")
  DB2_on_sysname. = ""
  DB2_on_sysname.CISP   = "IPCO"
  DB2_on_sysname.PROD   = "IPCO"
  DB2_on_sysname.DW     = "IPCO"
  DB2_on_sysname.DEV    = "IDAT"
  DB2_on_sysname.TEST   = "IDAT"
  DB2_on_sysname.MAINT  = "IDAT"
  DB2_on_sysname.SBOX   = "ISYS"
  DB2_on_sysname.ISYS   = "SBOX"
  DB2_on_sysname.IDAT   = "TEST"
  DB2_on_sysname.IPCO   = "PROD"

  Parse upper Var all_my_arguments DB2_envir .
  if (DB2_envir = "") then DB2_envir = DB2_on_sysname.mvsvar_sysname
  if (DB2_on_sysname.DB2_envir <> mvsvar_sysname) then do
    say "That is not a valid choice."
    say "Try again."
    say DB2_envir "does not run on" mvsvar_sysname"."
    say ""
    return_code = 24
    return return_code
  end
  "ALLOC FILE(IPCSPARM)",
    "DATASET('SYS1.SHASPARM'",
            "'SYS1.IBM.PARMLIB'",
            ") SHR REUSE"
  alloc_rc = RC
  if (alloc_rc <> 0) then do
    say "ALLOC FILE(IPCSPARM) failed, RC("alloc_rc")"
    return_code = alloc_rc
    Return return_code
  end
  Address Ispexec "CONTROL ERRORS RETURN"
  ADDRESS ISPEXEC,
    "LIBDEF ISPLLIB DATASET",
      "ID('DB2."DB2_envir".SDSNEXIT'",
         "'DB2."DB2_envir".SDSNLOAD')"
  alloc_rc = RC
  if (alloc_rc <> 0) then do
    say "LIBDEF ISPLLIB DATASET failed, RC("alloc_rc")"
    return_code = alloc_rc
    Return return_code
  end

  Return return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 In this routine we do our processing.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
rexx_Process:
  Address Ispexec "Select",
    "PGM(BLSGLIBD) PARM(PANEL(BLSPPRIM)) NEWAPPL(BLSG)"
  Return return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 In this routine we close files and finish up.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
rexx_Termination:
  ADDRESS ISPEXEC,
    "LIBDEF ISPLLIB"
  "FREE FILE(IPCSPARM)"
  "FREE FILE(IPCSDDIR)"
  Return return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 Place any of your subroutines and procedures below this.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
rexx_jobspecs:
  /*---------------------------------------------------------------*/
  /* ADDRESSABILITY TO CVT FROM PSA                                */
  /*---------------------------------------------------------------*/
  PTR2PSA = 0
  CVTPTR = STORAGE(D2X(PTR2PSA + 16),4)
  /*---------------------------------------------------------------*/
  /* ADDRESSABILITY TO SMCA, THEN GET SMF SYSTEM ID                */
  /*---------------------------------------------------------------*/
  CVTSMCA = STORAGE(D2X(C2D(CVTPTR)+197),3)
  SMFID = STORAGE(D2X(C2D(CVTSMCA)+16),4)
  /*---------------------------------------------------------------*/
  /* GET JOBNAME, STEP, AND PROCEDURE                              */
  /*---------------------------------------------------------------*/
  PSATOLD  = STORAGE(21C,4)                    /* POINTER TO TCB   */
  PTRTIOT  = STORAGE(D2X(C2D(PSATOLD)+12),4)   /* POINTER TO TIOT  */
  JOBNAME  = STORAGE(D2X(C2D(PTRTIOT)),8)
  STEPNAME = STORAGE(D2X(C2D(PTRTIOT)+8),8)
  PROCNAME = STORAGE(D2X(C2D(PTRTIOT)+16),8)
  Tcbjscbb = Storage(D2x(C2d(Psatold)+181),3)              /* jscb */
  jscbssib = STORAGE(D2X(C2D(tcbjscbb)+316),4)      /* Ptr to SSIB */
  ssibjbid = STORAGE(D2X(C2D(jscbssib)+12),8)    /* job identifier */
  Return JOBNAME SSIBJBID STEPNAME PROCNAME

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 describe your routines here
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */


/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
__DATA__
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
