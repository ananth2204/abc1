rexx_OBJ2HEX:  /* We still need rexx in comment if read from SYSPROC */
  rexxpgm_version = "01.00"
/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

  Dataset:  DEMO.REXX(OBJ2HEX)
  Author:   "Kenneth E. Tomiak"<CBT_Ken@KTomiak.BIZ>
  Overview: Reads any data set of 80 byte records and wraps it in JCL
            to reconstruct it back later.
  Usage:    See DEMO.CNTL(OBJ2HEX$)

=======================================================================

 History of Modifications
 ------------------------
 vv.mm When     Who / What you did
 ----- -------- -------------------------------------------------------
 01.00 20180115 "Kenneth E. Tomiak"<CBT_Ken@KTomiak.BIZ>
                1) Origination of code based on OBJ2REXX.
 ----- -------- -------------------------------------------------------

=======================================================================

STANDARD GLOBAL DISCLAIMER
--------------------------
The author explicitly disavows any claim whatsoever about the
correctness or functionality of this program, and disclaims liability
for anything and everything bad that might happen in connection with,
before, during, or after using it. I have tried to make it work right,
and I am personally pretty confident that it does, but everybody makes
mistakes, so if you use it, you do so at your own risk.

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */

  Parse ARG all_my_arguments
  Numeric Digits 12

rexx_Main_OBJ2REXX:
  return_code = rexx_Initialize()
  If (return_code = 0) Then Do
    return_code = rexx_Process()
  End
  return_code = rexx_Termination()
  Return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 In this routine we open any files and initialize any
 constants we might need.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_Initialize:
  Parse VERSION,
    version_rexx_name,
    version_rexx_version,
    version_rexx_date
  Parse SOURCE,
    source_host_env,
    source_call_type,
    source_uc_exec_name,
    source_hostdd,
    source_hostdsn,
    source_nf_exec_name,
    source_initial_cmd_env,
    source_asid_name,
    source_char8_user_token,
    source_hostother

  Say ""
  Say source_uc_exec_name "Begin:"
  Say "(C) 2018 KTOMIAK.BIZ"
  Say "ALL RIGHTS RESERVED."
  Say 'Author: "Kenneth E. Tomiak"<CBT_Ken@KTomiak.BIZ>'
  Say ""
  job_specs = rexx_jobspecs()
  sysvar_sysuid = SYSVAR("SYSUID")
  sysvar_sysenv = SYSVAR("SYSENV")
  Say ""
  Say Copies("=",55)
  Say Left("=" source_uc_exec_name rexxpgm_version,53) "="
  Say Left("=" "executing under" source_host_env,53) "="
  Say Left("=" "as a" source_call_type,53) "="
  Say Left("= on" date() "at" time()".",53) "="
  Say Copies("=",55)
  Say ""
  return_code = 0

  If (source_host_env <> "TSO") Then Do
    Say "Wrong host environment" source_host_env
    return_code = 16
  End

  Parse Var all_my_arguments dd_in dd_ot jcl_ot .
  If (DataType(dd_in) = "NUM") Then Do
    Say "Setting default input and output DDnames."
    dd_in = "OBJIN"
    dd_ot = "HEXOT"
    jcl_ot = "JCLOT"
  End
  If (DataType(dd_ot) = "NUM") Then Do
    Say "Setting default output DDname."
    dd_ot = "HEXOT"
    jcl_ot = "JCLOT"
  End
  If (dd_in = "") Then Do
    Say "Setting default input and output DDnames."
    dd_in = "OBJIN"
    dd_ot = "HEXOT"
    jcl_ot = "JCLOT"
  End
  If (dd_ot = "") Then Do
    Say "Setting default output DDname."
    dd_ot = "HEXOT"
    jcl_ot = "JCLOT"
  End

  function_rc = get_alc()

  match_dd = dd_in
  function_rc = process_dd()
  object_name = good_mbr
  ddin_name = good_mbr
  ddin_dsn = good_dsn
  Say "//DDIN :"dd_in"." good_dsn good_mbr

  match_dd = dd_ot
  function_rc = process_dd()
  Say "//DDOT :"dd_ot"." good_dsn good_mbr
  ddot_name = good_mbr
  ddot_dsn = good_dsn

  match_dd = jcl_ot
  function_rc = process_dd()
  Say "//JCLOT:"jcl_ot"." good_dsn good_mbr
  jclot_name = good_mbr
  jclot_dsn = good_dsn

  text_in.0 = 0
  text_out.0 = 0
  "EXECIO * DISKR" dd_in "(FINIS STEM TEXT_IN.)"
  read_rc = RC
  If (read_rc <> 0) Then Do
    Say "Encountered problems reading //DD:"dd_in"."
    Say "RC("read_rc") <> 0"
    return_code = read_rc
  End
  Say "Read" text_in.0 "record(s)."

  Return return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 In this routine we do our processing.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
rexx_Process:
  If (text_in.0 = 0) Then Do
    Say "//DD:"dd_in "appears to be a null file."
    return_code = 4
    Return 4
  End
  hex_text = 0
  Do text_ix = 1 to text_in.0
    line_1 = ""
    line_2 = ""
    text_hex = c2x(text_in.text_ix)
    Do While (text_hex <> "")
      Parse Var text_hex hex_odd +1 hex_even +1 text_hex
      line_1 = line_1""hex_odd
      line_2 = line_2""hex_even
    End
    text_out.0 = out_text(line_1)
    text_out.0 = out_text(line_2)
    hex_text = hex_text + 2
  End
  Return return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 In this routine we close files and finish up.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
rexx_Termination:
  "EXECIO * DISKW" dd_ot "(FINIS STEM TEXT_OUT.)"
  write_rc = RC
  If (write_rc <> 0) Then Do
    Say "Encountered problems writing //DD:"dd_ot"."
    Say "RC("write_rc") <> 0"
    return_code = write_rc
  End
  Say "Wrote" hex_text   "records."
  text_out. = ""
  text_out.0 = 0
  text_out.0 = out_text("//"sysvar_sysuid ,
    "JOB (),'CONVERT OBJ" object_name"',")
  text_out.0 = out_text("//             CLASS=A,")
  text_out.0 = out_text("//             MSGCLASS=X,MSGLEVEL=(1,1),")
  text_out.0 = out_text("//             REGION=18M,TIME=1230,")
  text_out.0 = out_text("//             NOTIFY=&SYSUID")
  text_out.0 = out_text("//*")
  text_out.0 = out_text("//*" copies("<",67))
  text_out.0 = out_text("//*" copies("=",67))
  text_out.0 = out_text("//* SOURCE:  DSN="jclot_dsn"("jclot_name")")
  text_out.0 = out_text("//* Contact:" ,
    '"Kenneth E. Tomiak"<CBT_Ken@KTomiak.BIZ>')
  text_out.0 = out_text("//* Purposee:" ,
    "THIS JOB IS USED TO INVOKE TSO AND RUN A REXX PROGRAM")
  text_out.0 = out_text("//*          " ,
    "THAT READS AN INPUT DATA SET AND FOR EVERY TWO LINES WILL")
  text_out.0 = out_text("//*          " ,
    "OUTPUT ONE EBCDIC LINE, CONVERTING BACK TO ITS ORIGINAL")
  text_out.0 = out_text("//*          " ,
    "EBCDIC FORMAT.")
  text_out.0 = out_text("//*" copies("=",67))
  text_out.0 = out_text("//*" copies(">",67))
  text_out.0 = out_text("//*")
  text_out.0 = out_text("//*" copies("<",67))
  text_out.0 = out_text("//* INVOKE THE PROCEDURE TO RUN TSO.")
  text_out.0 = out_text("//*" copies(">",67))
  text_out.0 = out_text("//ST01#01 EXEC",
    "PGM=IKJEFT1B,DYNAMNBR=20,PARM=''")
  text_out.0 = out_text("//SYSTSIN   DD *")
  text_out.0 = out_text("%HEX2OBJ HEXIN OBJOT .")
  text_out.0 = out_text("/*")
  text_out.0 = out_text("//SYSTSPRT  DD SYSOUT=*")
  text_out.0 = out_text("//SYSEXEC   DD" ,
    "DISP=SHR,DSN=&SYSUID..DEMO.REXX")
  text_out.0 = out_text("//HEXIN     DD" ,
     "DISP=SHR,DSN="ddot_dsn"("ddot_name")")
  text_out.0 = out_text("//OBJOT     DD" ,
     "DISP=OLD,DSN="ddin_dsn"("ddin_name")")
  text_out.0 = out_text("//*")
  text_out.0 = out_text("//* End of Job " jclot_name".")
  text_out.0 = out_text("//")
  "EXECIO * DISKW" jcl_ot "(FINIS STEM TEXT_OUT.)"
  write_rc = RC
  If (write_rc <> 0) Then Do
    Say "Encountered problems writing //DD:"dd_ot"."
    Say "RC("write_rc") <> 0"
    return_code = write_rc
  End
  Say "Wrote" text_out.0 "records."
  Say ""
  Say source_uc_exec_name "Finish:"
  Say ""
  Return return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
-----------------------------------------------------------------------
 Use LISTALC STATUS to discover DDNAMEs and what they are allocated to.
-----------------------------------------------------------------------
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
get_alc:
  rc = Outtrap("ln.")                 /* open trap                  */
  "LISTALC STATUS"
  rc = Outtrap("OFF")                 /* close trap                 */
  dd_names = 0
  dd_nnbr. = ""
  do trapx = 2 to ln.0                  /* skip heading         */
    ln.trapx = space(ln.trapx)
    parse var ln.trapx tempname tempddnm
    select
      When (tempddnm <> " ") then Do
        parse var ln.trapx fullname tiotddnm
        dd_names = dd_names + 1       /* DDName index         */
        dd_name.dd_names = tiotddnm
        dd_nnbr.tiotddnm = dd_names
        dsname.dd_names.0 = 0
        ds_temp = dsname.dd_names.0 + 1
        dsname.dd_names.0 = ds_temp
        dsname.dd_names.ds_temp = fullname
      end
      When ((left(ln.trapx,3) <> " ") &,
            (Words(ln.trapx) = 1)) then Do
        parse var ln.trapx fullname .
        trapx = trapx + 1
        ln.trapx = space(ln.trapx)
        parse var ln.trapx tempddnm " " final_disp " " .
        if ((tempddnm <> " ") &,
            (final_disp <> " ")) then do
          tiotddnm = tempddnm
          dd_names = dd_names + 1   /* DDName index         */
          dd_name.dd_names = tiotddnm
          dd_nnbr.tiotddnm = dd_names
          dsname.dd_names.0 = 0
        end
        ds_temp = dsname.dd_names.0 + 1
        dsname.dd_names.0 = ds_temp
        dsname.dd_names.ds_temp = fullname
      end
      Otherwise Do
        say "*ERR*" ln.trapx
      end
    end
  end                                 /* trapx                      */
  return dd_names

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
-----------------------------------------------------------------------
 Find the matching DDNAME entry.
-----------------------------------------------------------------------
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
process_dd:
  good_dsn = ""
  good_mbr = ""
  dd# = dd_nnbr.match_dd
  dn = dd_name.dd#
  If (dn <> match_dd) THEN DO
    RETURN 0
  END
  nd = dsname.dd#.0
  do ds# = 1 to nd
    PARSE VAR dsname.dd#.ds# good_dsn "(" good_mbr ")" .
  end
  RETURN 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
-----------------------------------------------------------------------
 Follow control blocks to get job specifications.
-----------------------------------------------------------------------
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_jobspecs:
  /*---------------------------------------------------------------*/
  /* ADDRESSABILITY TO CVT FROM PSA                                */
  /*---------------------------------------------------------------*/
  PTR2PSA = 0
  CVTPTR = STORAGE(D2X(PTR2PSA + 16),4)
  /*---------------------------------------------------------------*/
  /* ADDRESSABILITY TO SMCA, THEN GET SMF SYSTEM ID                */
  /*---------------------------------------------------------------*/
  CVTSMCA = STORAGE(D2X(C2D(CVTPTR)+197),3)
  SMFID = STORAGE(D2X(C2D(CVTSMCA)+16),4)
  /*---------------------------------------------------------------*/
  /* GET JOBNAME, STEP, AND PROCEDURE                              */
  /*---------------------------------------------------------------*/
  PSATOLD  = STORAGE(21C,4)                    /* POINTER TO TCB   */
  PTRTIOT  = STORAGE(D2X(C2D(PSATOLD)+12),4)   /* POINTER TO TIOT  */
  JOBNAME  = STORAGE(D2X(C2D(PTRTIOT)),8)
  STEPNAME = STORAGE(D2X(C2D(PTRTIOT)+8),8)
  PROCNAME = STORAGE(D2X(C2D(PTRTIOT)+16),8)
  Tcbjscbb = Storage(D2x(C2d(Psatold)+181),3)              /* jscb */
  jscbssib = STORAGE(D2X(C2D(tcbjscbb)+316),4)      /* Ptr to SSIB */
  ssibjbid = STORAGE(D2X(C2D(jscbssib)+12),8)    /* job identifier */
  Return JOBNAME SSIBJBID STEPNAME PROCNAME

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
-----------------------------------------------------------------------
 Adds text to a stem variable
-----------------------------------------------------------------------
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
out_text:
  Parse ARG text_line
  text_next = text_out.0 + 1
  text_out.text_next = text_line
  Return text_next

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
-----------------------------------------------------------------------
 Adds the rexx code to convert the member back.
-----------------------------------------------------------------------
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
__DATA__
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */

