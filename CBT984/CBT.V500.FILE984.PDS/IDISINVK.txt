rexx_INVKIDIS: /* We still need rexx in comment if read from SYSPROC */
  rexxpgm_version = "01.00"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

 Dataset:  SYS2.TSO.CMDPROC(INVKIDIS)
 Author:   Kenneth Tomiak
 Contact:  "Kenneth Tomiak"<KenTomiak@KTomiak.org>
 Syntax:   INVKIDIS {<null>|dump_data_setname|history_data_set_name}
 Overview: This exists to invoke Fault Analyzer.

           A <null> parameter will launch a panel.
           Otherwise the data set name is checked and if the DSCB
           attributes suggest a dump then a parameter with DSN
           is passed.

=======================================================================

 History of Modifications
 ------------------------
vv.mm When     Who      What you did
----- -------- -------- -----------------------------------------------
01.00 20091211 KET2812  "Kenneth Tomiak"<KenTomiak@KTomiak.org>
                        1) Original code. Combines the loose suggestion
                           for LIBDEFs and includes IDISFA ideas.
----- -------- -------- -----------------------------------------------

=======================================================================

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */

  Parse Arg all_my_arguments
  Numeric Digits 12

rexx_Main_INVKIDIS:
  MAKEBUF
  return_code = rexx_Initialize()
  If (return_code = 0) then do
    return_code = rexx_Process()
  End
  return_code = rexx_Termination()
  DROPBUF
  Return return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 In this routine we open any files and initialize any
 constants we might need.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
rexx_Initialize:
  ADDRESS ISPEXEC "CONTROL ERRORS RETURN"
  PARSE VERSION,
    version_rexx_name,
    version_rexx_version,
    version_rexx_date
  PARSE SOURCE,
    source_host_env,
    source_call_type,
    source_uc_exec_name,
    source_hostdd,
    source_hostdsn,
    source_nf_exec_name,
    source_initial_cmd_env,
    source_asid_name,
    source_char8_user_token,
    source_hostother
  sysvar_sysuid = SYSVAR("SYSUID")
  sysvar_sysenv = SYSVAR("SYSENV")
  sysvar_sysname = MVSVAR("SYSNAME")
  return_code = 0
  msg_line.  = ""
  HX00 = '00'X
  max_rc = ""

  Return return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 In this routine we do our processing.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
rexx_Process:

  erc = 0
  ddname_qty = get_alc()               /* Run through control blocks */

  void_rc    = get_def()             /* Query how things are defined */
  chgdef_rc  = chg_def()            /* Change how things are defined */
  if (max_rc <> "") then do
    Return 16
  end

  Parse upper var all_my_arguments data_set_name .
  Select
    when (data_set_name = "") then do
      Address ISPEXEC ,
        "SELECT PGM(IDIPDDIR)" ,
        "NEWAPPL(IDI) PASSLIB" ,
        "SCRNAME(FAULTA)"
    end
    when (pos(".IDI.HIST",data_set_name) > 0) then do
      Address ISPEXEC ,
        "SELECT PGM(IDIPDDIR)" ,
        "NEWAPPL(IDI) PASSLIB" ,
        "PARM(ISPFHISTDSN("data_set_name"))"
    end
    when (pos("SYS2.DUMP",data_set_name) > 0) then do
      Address ISPEXEC ,
        "SELECT PGM(IDIPDDIR)" ,
        "NEWAPPL(IDI) PASSLIB" ,
        "PARM(DSN("data_set_name"))"
    end
    Otherwise
  end

  Return return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 In this routine we close files and finish up.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
rexx_Termination:

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 If any failed, show enough debugging information to fix it.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
  if (max_rc <> "") then do
    ZEDSMSG = "Allocation error!"
    msg_line.1 = "An allocation error occurred."
    msg_line.2 = "Severe enough you need to report the error to the"
    msg_line.3 = "ITServiceDesk at extension 2858."
    msg_line.4 = "Error code:" max_rc"."
    ZEDLMSG = CENTER(msg_line.1,76,HX00) ,
              CENTER(msg_line.2,76,HX00) ,
              CENTER(msg_line.3,76,HX00) ,
              CENTER(msg_line.4,76,HX00) ,
              CENTER(msg_line.5,76,HX00)
    ADDRESS ISPEXEC,
      'SETMSG MSG(ISRZ001)'      /* SET MESSAGE WITH ALARM       */
    return_code = 12
    Return return_code
  end
  if (exec_altlib_rc = 0) then do
    Address TSO ,
      "ALTLIB DEACTIVATE APPLICATION(EXEC)"
  end
  if (mlib_libdef_rc = 0) then do
    Address ISPEXEC ,
      "LIBDEF ISPMLIB"
  end
  if (plib_libdef_rc = 0) then do
    Address ISPEXEC ,
      "LIBDEF ISPPLIB"
  end
  if (slib_libdef_rc = 0) then do
    Address ISPEXEC ,
      "LIBDEF ISPSLIB"
  end
  if (tlib_libdef_rc = 0) then do
    Address ISPEXEC ,
      "LIBDEF ISPTLIB"
  end
  Address TSO ,
    "Free file(IDIOPTS)"
  Return return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 In this routine I fetch how DDs are defined.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
get_def:
  app_exec  = ""
  app_clist = ""
  orig_exec = ""
  orig_clist = ""
  sys_exec  = ""
  sys_clist = ""
  ADDRESS TSO,
    "ALTLIB DISPLAY QUIET"
  display_rc = RC
  if (display_rc = 0) then do
    add_dsns = get_ikjadm("display_"display_stem)
    do _dsnctr = 1 to add_dsns
      one_line = Value("display_"display_stem"_msg"._dsnctr)
      select
        when (pos("IKJ79325I",one_line) > 0) then do
          parse var one_line . "DDNAME=" app_exec
        end
        when (pos("IKJ79326I",one_line) > 0) then do
          parse var one_line . "DDNAME=" app_clist
        end
        when (pos("IKJ79327I",one_line) > 0) then do
          parse var one_line . "DDNAME=" sys_exec
        end
        when (pos("IKJ79328I",one_line) > 0) then do
          parse var one_line . "DDNAME=" sys_clist
        end
        otherwise
      end
    end
    if (app_exec <> "") then do
      app_exec_qty = get_dsnames(app_exec)
      dd# = dd_nnbr.app_exec
      dn  = dd_name.dd#
      nd  = dsname.dd#.0
      do ds# = 1 to nd
        orig_exec = orig_exec "'"dsname.dd#.ds#"'"
      end
    end
    if (app_clist <> "") then do
      app_clist_qty = get_dsnames(app_clist)
      dd# = dd_nnbr.app_clist
      dn  = dd_name.dd#
      nd  = dsname.dd#.0
      do ds# = 1 to nd
        orig_clist = orig_clist "'"dsname.dd#.ds#"'"
      end
    end
    if (sys_exec <> "") then do
      sys_exec_qty = get_dsnames(sys_exec)
    end
    if (sys_clist <> "") then do
      sys_clist_qty = get_dsnames(sys_clist)
    end
  end
  else do
    say "ALTLIB DISPLAY failed, RC("display_rc")"
    return_code = display_rc
    return return_code
  end

  llibdef_val = query_libdef("L")
  parse var llibdef_val . ":" orig_ispllib
  mlibdef_val = query_libdef("M")
  parse var mlibdef_val . ":" orig_ispmlib
  plibdef_val = query_libdef("P")
  parse var plibdef_val . ":" orig_ispplib
  slibdef_val = query_libdef("S")
  parse var slibdef_val . ":" orig_ispslib
  tlibdef_val = query_libdef("T")
  parse var tlibdef_val . ":" orig_isptlib

  return return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 In this routine we change what LIBDEFs are used.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
SC19-2538-02 IBM Fault Analyzer for z/OS V9R1 Users Guide and Reference
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
chg_def:

  IDIEXEC  = "SYS1.IDI.SIDIEXEC"
  orig_exec = orig_exec "'"IDIexec"'"

  IDIISPM  = "SYS1.IDI.SIDIMLIB"
  if (pos(IDIispm,orig_ispmlib) = 0) then do
    orig_ispmlib = orig_ispmlib "'"IDIispm"'"
  end

  IDIISPP  = "SYS1.IDI.SIDIPLIB"
  if (pos(IDIispp,orig_ispplib) = 0) then do
    orig_ispplib = orig_ispplib "'"IDIispp"'"
  end

  IDIISPS  = "SYS1.IDI.SIDISLIB"
  if (pos(IDIisps,orig_ispslib) = 0) then do
    orig_ispslib = orig_ispslib "'"IDIisps"'"
  end

  IDIISPT  = "SYS1.IDI.SIDITLIB"
  if (pos(IDIispt,orig_isptlib) = 0) then do
    orig_isptlib = orig_isptlib "'"IDIispt"'"
  end


  /*-----------------------------------------*/
  /* ACTIVATE APPLICATION EXEC               */
  /*-----------------------------------------*/
  Address TSO ,
    "ALTLIB ACTIVATE QUIET APPLICATION(EXEC)" ,
    "DATASET("orig_exec") UNCOND"
  exec_altlib_rc = RC
  if (exec_altlib_rc <> 0) then do
    max_rc = max_rc || "ALTLIB-EXEC("exec_altlib_rc") "
    return_code = exec_altlib_rc
    return return_code
  end

  Address ISPEXEC ,
    "LIBDEF ISPMLIB DATASET ID("orig_ispmlib") STACK"
  mlib_libdef_rc = RC
  if (mlib_libdef_rc <> 0) then do
    max_rc = max_rc || "ISPMLIB("mlib_libdef_rc") "
  end
  Address ISPEXEC ,
    "LIBDEF ISPPLIB DATASET ID("orig_ispplib") STACK"
  plib_libdef_rc = RC
  if (plib_libdef_rc <> 0) then do
    max_rc = max_rc || "ISPPLIB("plib_libdef_rc") "
  end
  Address ISPEXEC ,
    "LIBDEF ISPSLIB DATASET ID("orig_ispslib") STACK"
  slib_libdef_rc = RC
  if (slib_libdef_rc <> 0) then do
    max_rc = max_rc || "ISPSLIB("slib_libdef_rc") "
  end
  Address ISPEXEC ,
    "LIBDEF ISPTLIB DATASET ID("orig_isptlib") STACK"
  tlib_libdef_rc = RC
  if (tlib_libdef_rc <> 0) then do
    max_rc = max_rc || "ISPTLIB("tlib_libdef_rc") "
  end

  Address TSO ,
    "Alloc file(IDIOPTS) DATASET('KET2812.MIS.CNTL(IDIOPTSP)')" ,
    "SHR REUSE"

  Return return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 Place any of your subroutines and procedures below this.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
rexx_jobspecs:
  /*---------------------------------------------------------------*/
  /* ADDRESSABILITY TO CVT FROM PSA                                */
  /*---------------------------------------------------------------*/
  PTR2PSA = 0
  CVTPTR = STORAGE(D2X(PTR2PSA + 16),4)
  /*---------------------------------------------------------------*/
  /* ADDRESSABILITY TO SMCA, THEN GET SMF SYSTEM ID                */
  /*---------------------------------------------------------------*/
  CVTSMCA = STORAGE(D2X(C2D(CVTPTR)+197),3)
  SMFID = STORAGE(D2X(C2D(CVTSMCA)+16),4)
  /*---------------------------------------------------------------*/
  /* GET JOBNAME, STEP, AND PROCEDURE                              */
  /*---------------------------------------------------------------*/
  PSATOLD  = STORAGE(21C,4)                    /* POINTER TO TCB   */
  PTRTIOT  = STORAGE(D2X(C2D(PSATOLD)+12),4)   /* POINTER TO TIOT  */
  JOBNAME  = STORAGE(D2X(C2D(PTRTIOT)),8)
  STEPNAME = STORAGE(D2X(C2D(PTRTIOT)+8),8)
  PROCNAME = STORAGE(D2X(C2D(PTRTIOT)+16),8)
  Tcbjscbb = Storage(D2x(C2d(Psatold)+181),3)              /* jscb */
  jscbssib = STORAGE(D2X(C2D(tcbjscbb)+316),4)      /* Ptr to SSIB */
  ssibjbid = STORAGE(D2X(C2D(jscbssib)+12),8)    /* job identifier */
  Return JOBNAME SSIBJBID STEPNAME PROCNAME

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 describe your routines here
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 Two ways to use ISPF messages
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
check_isr_rc:
  parse arg isr_rc
  If (isr_rc > 4) then do
    ZERRHM = "*"
    ZERRALRM = "YES"
    ZERRSM = isr_function "FAILED"
    ZERRLM = zerrsm ", RC("isr_rc")"
    if (sysvar_sysenv = "FORE") then do
      Address IspExec "VPUT",
        "(ZERRSM ZERRLM ZERRHM ZERRALRM)",
        " SHARED"
      ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
      isr_rc = rc
    end
    Else do
      say zerrsm zerrlm
      isr_rc = 0
    end
  End
  Return isr_rc

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
ALTLIB failed, get error messages.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
get_ikjadm:
  msg_stem = ARG(1)
  ADDRESS ISPEXEC,
    "VGET (IKJADM) SHARED"
  vget_rc = RC
  if (vget_rc <> 0) then do
    say "ABORT, IKJADM does not work as described."
  end
  ikjadm_vars = ""
  do _ctr = 1 to IKJADM
    ikjadm_vars = ikjadm_vars "IKJADM"_ctr
  end
  ADDRESS ISPEXEC,
    "VGET (" ikjadm_vars") SHARED"
  do _ctr = 1 to IKJADM
    one_var = "IKJADM"_ctr
    one_val = Value(one_var)
    null_rc = Value(msg_stem"_msg."_ctr,one_val)
  end
  return ikjadm

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
Query LIBDEF and return type and identifiers
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
query_libdef:
  libchar = ARG(1)
  Address ISPEXEC ,
    "QLIBDEF ISP"libchar"LIB TYPE(LIBTYPE) ID(LIBID)"
  qlibdef_rc = RC
  if (qlibdef_rc <> 0) then do
    libtype = ""
    libid = ""
  end
  type_id = libtype":"libid
  return type_id

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
Find matching DDNAME and show DSNAMEs
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
get_dsnames:
  match_dd = Arg(1)
  dd# = dd_nnbr.match_dd
  dn  = dd_name.dd#
  nd  = dsname.dd#.0
  return nd

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
  Chase control blocks and build a stream
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
get_alc:
  tcb  = c2d(storage(d2x(540),4))                /* Return a pointer */
  jscb = c2d(storage(d2x((tcb+180)),4))          /* Return a pointer */
  qmpl = c2d(storage(d2x((jscb+244)),4))         /* Return a pointer */
  qmat = c2d(storage(d2x((qmpl+24)),4))          /* Return a pointer */
  first_qmat = qmat
  dd_name. = ""
  dd_nnbr. = 0
  PSATOLD  = STORAGE(21C,4)                      /* POINTER TO TCB  */
  PTRTIOT  = STORAGE(D2X(C2D(PSATOLD)+12),4)     /* POINTER TO TIOT */
  tiotptr  = D2C(C2D(PTRTIOT)+24)                /* TIOT pointer    */
  tiotelen = c2d(STORAGE(D2X(C2D(tiotptr)+0),1))
  dd_names = 0
  do while tiotelen > 0
    tiotflag = c2d(STORAGE(D2X(C2D(tiotptr)+1),1))
    tiotddnm = space(STORAGE(D2X(C2D(tiotptr)+4),8))
    IF BITAND(tiotflag,'80'X) = '80'X THEN,      /* active ddname  */
      do
        if tiotddnm = copies("00"x,8) then,
          do
            Leave
          end
        if tiotddnm >< "        " then,
          do
            dd_name = strip(tiotddnm,"B"," ")
            dd_names = dd_names + 1
            dd_name.dd_names = dd_name
            dd_nnbr.tiotddnm = dd_names
            dsname.dd_names.0 = 0
          end
        tioejfcb = storage(d2x(c2d(tiotptr)+12),3)
        jfcb = swareq(tioejfcb)
        if (jfcb > 0) then,
          do
            JFCBDSN = strip(storage(d2x(jfcb+000),44),"B"," ")
            JFCBELNM = strip(storage(d2x(jfcb+044),8),"B"," ")
            if jfcbelnm >< "" then,
              fullname = jfcbdsn"("jfcbelnm")"
            else,
              fullname = jfcbdsn
            ds_temp = dsname.dd_names.0 + 1
            dsname.dd_names.0 = ds_temp
            dsname.dd_names.ds_temp = fullname
          end
        else,
          do
            say "Oh my gosh, SWAREQ and BATCH do not mix."
            Leave
          end
      end
    tiotptr = D2C(C2D(tiotptr)+tiotelen)
    tiotelen = c2d(STORAGE(D2X(C2D(tiotptr)+0),1))
  end
  return dd_names

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
  Convert an address in SWA format to usable location
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
swareq: Procedure Expose first_qmat
  Signal ON Syntax
  Signal ON Failure
  If (right(c2x(Arg(1)),1) >< "F") Then,              /* Swa=Below ? */
    Return c2d(Arg(1))+16                      /* Yes, return sva+16 */
  sva = c2d(Arg(1))                            /* Convert to decimal */
  qmat = first_qmat
  Do While sva > 65536
    qmat = c2d(storage(d2x(qmat+12),4))        /* Return a pointer */
    sva = sva - 65536                          /* 010006F -> 000006F */
  End
  swaptr = c2d(storage(d2x(qmat+sva+1),4))+16
  Return swaptr                                  /* Return a pointer */

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
__DATA__
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
