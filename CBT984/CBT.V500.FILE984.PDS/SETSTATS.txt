rexx_FAKESTAT: /* We still need rexx in comment if read from SYSPROC */
  rexxpgm_version = "01.01"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

 Dataset:  KET2812.MIS.REXX(FAKESTAT)
 Author:   Kenneth Tomiak
 Contact:  "Kenneth Tomiak"<KenTomiak@KTomiak.org>
 Syntax:   FAKESTAT {member_name}
 Overview: (tell us about the code)


=======================================================================

 History of Modifications
 ------------------------
vv.mm When     Who      What you did
----- -------- -------- -----------------------------------------------
01.01 20110310 KET2812  "Kenneth Tomiak"<KenTomiak@KTomiak.org>
                        1) Fancify it.
----- -------- -------- -----------------------------------------------
01.00 19?????? KET2812  "Kenneth Tomiak"<KenTomiak@KTomiak.org>
                        1) Original code.
----- -------- -------- -----------------------------------------------

=======================================================================

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */

  trace o
  Parse Arg all_my_arguments
  Numeric Digits 12

rexx_Main_FAKESTAT:
  MAKEBUF
  return_code = rexx_Initialize()
  If (return_code = 0) then do
    return_code = rexx_Process()
  End
  return_code = rexx_Termination()
  DROPBUF
  Return return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 In this routine we open any files and initialize any
 constants we might need.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
rexx_Initialize:
  Address Ispexec,
    "CONTROL ERRORS RETURN"
  return_code = 0
  PARSE VERSION,
    version_rexx_name,
    version_rexx_version,
    version_rexx_date
  PARSE SOURCE,
    source_host_env,
    source_call_type,
    source_uc_exec_name,
    source_hostdd,
    source_hostdsn,
    source_nf_exec_name,
    source_initial_cmd_env,
    source_asid_name,
    source_char8_user_token,
    source_hostother
  job_specs = rexx_jobspecs()
  sysvar_sysuid = SYSVAR("SYSUID")
  sysvar_sysenv = SYSVAR("SYSENV")

  Return return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 In this routine we do our processing.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
rexx_Process:
  is_it_good = validate_argument()
  if (is_it_good > 0) then do
    return is_it_good
  end
  plib_alloc = alloc_plib()
  if (plib_alloc = 1) then do
    good_stat_rc = panel_prompt()
  end
  else do
    good_stat_rc = manual_prompt()
  end
  if (good_stat_rc = 0) then do
    void_rc = change_stats_here()
  end
  Return return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 In this routine we close files and finish up.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
rexx_Termination:
  if (pdsid_alloc = 1) then do
    Address IspExec ,
      "LMCLOSE DATAID("PDSID")"
    Address Ispexec,
      "LMFREE DATAID("pdsid")"
  end
  if (plib_alloc = 1) then do
    Address IspExec,
      "LIBDEF ISPPLIB"
  end
  Return return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 Place any of your subroutines and procedures below this.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
rexx_jobspecs:
  /*---------------------------------------------------------------*/
  /* ADDRESSABILITY TO CVT FROM PSA                                */
  /*---------------------------------------------------------------*/
  PTR2PSA = 0
  CVTPTR = STORAGE(D2X(PTR2PSA + 16),4)
  /*---------------------------------------------------------------*/
  /* ADDRESSABILITY TO SMCA, THEN GET SMF SYSTEM ID                */
  /*---------------------------------------------------------------*/
  CVTSMCA = STORAGE(D2X(C2D(CVTPTR)+197),3)
  SMFID = STORAGE(D2X(C2D(CVTSMCA)+16),4)
  /*---------------------------------------------------------------*/
  /* GET JOBNAME, STEP, AND PROCEDURE                              */
  /*---------------------------------------------------------------*/
  PSATOLD  = STORAGE(21C,4)                    /* POINTER TO TCB   */
  PTRTIOT  = STORAGE(D2X(C2D(PSATOLD)+12),4)   /* POINTER TO TIOT  */
  JOBNAME  = STORAGE(D2X(C2D(PTRTIOT)),8)
  STEPNAME = STORAGE(D2X(C2D(PTRTIOT)+8),8)
  PROCNAME = STORAGE(D2X(C2D(PTRTIOT)+16),8)
  Tcbjscbb = Storage(D2x(C2d(Psatold)+181),3)              /* jscb */
  jscbssib = STORAGE(D2X(C2D(tcbjscbb)+316),4)      /* Ptr to SSIB */
  ssibjbid = STORAGE(D2X(C2D(jscbssib)+12),8)    /* job identifier */
  Return JOBNAME SSIBJBID STEPNAME PROCNAME

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
  See if the right two parts were passed.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
validate_argument:
  if (all_my_arguments = "") then do
    say "You need to provide the member name to change."
    return_code = 16
    Return return_code
  end
  if (pos("'",all_my_arguments) > 0) then do
    parse var all_my_arguments ,
      . "'" DSNAME "(" MBRNAME ")" .
  end
  else do
    parse var all_my_arguments ,
      DSNAME "(" MBRNAME ")" .
  end
  if (DSNAME = "") then do
    say "You need to provide the data set name to change."
    return_code = 16
    Return return_code
  end
  if (MBRNAME = "") then do
    say "You need to provide the member name to change."
    return_code = 16
    Return return_code
  end
  Address Ispexec,
    "LMINIT DATAID(PDSID) DATASET('"DSNAME"')",
       "ENQ(SHRW)"
  ispexec_rc = rc
  If (ispexec_rc <> 0) then do /* Return codes                    */
                              /*  8 - Data set or file not        */
                              /*      allocated                   */
                              /*    - DDname not found            */
                              /*    - Data set or file            */
                              /*      organization not supported  */
                              /* 12 - Invalid parameter value     */
                              /* 16 - Truncation or translation   */
                              /*      error in accessing dialog   */
                              /*      variables                   */
                              /* 20 - Severe error                */
    Say 'LMINIT failed, rc='ispexec_rc
    return_code = ispexec_rc
    Return return_code
  End
  pdsid_alloc = 1
  Address IspExec "LMOPEN DATAID("PDSID")",
    "OPTION(INPUT)"
  ispexec_rc = RC
  IF (ispexec_rc > 0) THEN do
    say "THE FILE" PDSDSN "FAILED TO OPEN RC="ispexec_rc
    return_code = ispexec_rc
    Return return_code
  END
  olddate = "1955 / 01 / 24"
  oldtime = "00 : 00 : 00"
  user = "FAKE#IT"
  do while (ispexec_rc = 0)
    Address IspExec "LMMLIST DATAID("PDSID")",
      "OPTION(LIST) MEMBER(NAMEMBR) STATS(YES) PATTERN("MBRNAME")"
    ispexec_rc = RC
    IF (ispexec_rc > 0) Then do
      return_code = ispexec_rc
      Leave
    END
    if (NAMEMBR = mbrname) then do
      parse var zlm4date ny "/" nm "/" nd
      olddate = ny "/" nm "/" nd
      parse var zlmtime th ":" tm
      oldtime = th ":" tm
      user = ZLUSER
      return_code = 0
      leave
    END
  End
  Address IspExec "LMMLIST DATAID("PDSID") OPTION(FREE)"
  return return_code


/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
  Allocate a temporary PDS and load a dynamically generated panel.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
alloc_plib:
  bulk_dd = "BULK"RIGHT("0000"RANDOM(99999),4)
  "ALLOC NEW DEL F("bulk_dd") DSO(PO) DIR(1) SP(3,3) TRACK",
         "REUSE RECFM(F B) BLKSIZE(0) LRECL(80) UNIT(SYSDA)"
  _lctr = panel_def()
  Do Until substr(srcline,1,7)="/*PLIB"
    srcline = sourceline(_lctr)
    _lctr=_lctr+1
  End
  srcline = sourceline(_lctr)
  _lctr=_lctr+1
  Do Until substr(srcline,1,7)="PLIB*/"
    Parse var srcline . panelname .
    Address IspExec,
      "LMINIT DATAID(TMPPNL) ENQ(EXCLU) DDNAME("bulk_dd")"
    Address IspExec,
      "LMOPEN DATAID("tmppnl") OPTION(OUTPUT)"
    Do Until substr(srcline,1,4)=")END"
      srcline = sourceline(_lctr)
      Address IspExec,
        "LMPUT DATAID(&TMPPNL) MODE(INVAR) DATALOC(SRCLINE) DATALEN(80)"
      _lctr=_lctr+1
    End
    srcline = sourceline(_lctr)
    _lctr=_lctr+1
    Address IspExec,
      "LMMADD DATAID(&TMPPNL) MEMBER("panelname")"
  Address IspExec,
    "LMFREE DATAID(&TMPPNL)"
  End
  Address IspExec,
    "LIBDEF ISPPLIB LIBRARY ID("bulk_dd") STACK"
  Return 1


/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
__DATA__
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
panel_def:
  Signal ON SYNTAX             /* PC does not set SIGL on function() */
  Return next_line()
next_line:
  Return sigl+4

/*PLIB
PANEL FAKESTAT
)ATTR DEFAULT(%+_)
       %   TYPE(TEXT)   INTENS(HIGH)
       +   TYPE(TEXT)   INTENS(LOW)  SKIP(ON)
       _   TYPE(INPUT)  INTENS(HIGH) CAPS(OFF) JUST(LEFT)
       ~   TYPE(OUTPUT) INTENS(LOW)
)BODY EXPAND(\\)
%-\-\- FAKESTAT Specification -\-\-
%COMMAND ==>_ZCMD
%
+ &DSNAME ( &MBRNAME )
+
%      YYYY / MM / DD   HR   MN    Userid
+Old : &olddate      +- &oldtime+- &user
%      ----   --   --   --   --    -------
+New :_ny  +/_nm+/_nd+-_th+:_tm+  _nu     +
)INIT
  .CURSOR = 'NY'
)REINIT
)PROC
  VER(&NY,RANGE,1955,2200)
  VER(&NM,RANGE,1,12)
  IF (&NM = 1, 3, 5, 7, 8, 10, 12)
    VER(&ND,RANGE,1,31)
  IF (&NM = 2)
    VER(&ND,RANGE,1,28)
  IF (&NM = 4, 6, 9, 11)
    VER(&ND,RANGE,1,30)
  VER(&TH,RANGE,00,23)
  VER(&TM,RANGE,00,59)
  VER(&NU,NB)
)END
PLIB*/


/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 Manually prompt for the new date and time statistics.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
manual_prompt:
  say "Okay, what date (YYYY/MM/DD) :"
  pull newdate
  parse var newdate ny "/" nm "/" nd
  say "Okay, what time (HR:MN) :"
  pull newtime
  parse var newtime th ":" tm
  say "Okay, what userid :"
  pull nu
  return return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 Use a dynamically added ISPF panel to prompt.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
panel_prompt:
  Address Ispexec ,
    "DISPLAY PANEL(FAKESTAT)"
  panel_rc = rc
  if (panel_rc > 0) then do
    void_rc = manual_prompt()
  end
  return return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 Here we get the current stats, show them, get the new ones, and fake.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
change_stats_here:
  Address Ispexec,
    "LMMSTATS DATAID("pdsid") MEMBER("MBRNAME")" ,
    "USER("nu")" ,
    "MODDATE4("ny"/"nm"/"nd") MODTIME("th":"tm")"
  ispexec_rc = rc
  return_code = ispexec_rc
  If (ispexec_rc <> 0) then do /* Return codes                    */
                         /*  4 - No members match pattern         */
                         /*    - No member in data set            */
                         /*  8 - Member not found                 */
                         /* 10 - No data set associated with the  */
                         /*      given data-id                    */
                         /* 12 - Invalid parameter value          */
                         /*    - Data set is not open or is not   */
                         /*      partitioned                      */
                         /* 20 - Severe error                     */
    Say 'LMmstats failed, rc='ispexec_rc
  End
  return return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
__DATA__
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
