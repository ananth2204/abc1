rexx_PDS2XMIT: /* We still need rexx in comment if read from SYSPROC */
  ADDRESS ISREDIT "MACRO (locfile rmtfile options) NOPROCESS"
  rexxpgm_version = "02.02"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
  Dataset: REXX(PDS2XMIT)
  Author:  KTomiak
  Contact: "Kenneth Tomiak"<CBT_KEN@KTomiak.biz>
  Syntax:  PDS2XMIT (locfile) {(rmtfile)}
           filename - a PDS or PDSE
  PURPOSE: THIS CODE USES TSO TRANSMIT, WHICH INVOKES IEBCOPY,
           TO CONVERT A PDS OR PDSE INTO A SEQUENTIAL DATASET,
           THEN BUNDLES THE SEQUENTIAL DATASET INSIDE AN IDTF
           FORMAT.

  Input : your pds data set name.
  Output: &sysuid..UNKNOWN.XMI if rmtfile not provided.
  History of Modifications
  ------------------------
  When     Who      What you did
  -------- -------- ---------------------------------------------------
  20170617 KTomiak  02.02 Change to how data set names are handled.
  20070729 KTomiak  02.01 Standardizing Rexx_Initialize routine
  20070715 KTomiak  02.00 Well, a long time ago, but this is now being
                          released for www.CBTTAPE.org UNIVERSE.
=======================================================================
STANDARD GLOBAL DISCLAIMER
The author explicitly disavows any claim whatsoever about the
correctness or functionality of this program, and disclaims liability
for anything and everything bad that might happen in connection with,
before, during, or after using it.  I have tried to make it work right,
and I am personally pretty confident that it does, but everybody makes
mistakes, so if you use it, you do so at your own risk.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
  ADDRESS ISPEXEC "CONTROL ERRORS RETURN"
  call who_am_i
  if (locfile = "LOCFILE") then do
    parse arg locfile rmtfile options
  end
  drc = 0
  bitbuckt = "Z"
  touser = sys_sysuid
  call alloc_plib
  call XMIT2_a_file
  call free_plib
  exit 0
who_am_i:
  Parse SOURCE,
    source_host_env,
    source_call_type,
    source_uc_exec_name,
    source_hostdd,
    source_hostdsn,
    source_nf_exec_name,
    source_initial_cmd_env,
    source_asid_name,
    source_char8_user_token,
    source_hostother
  Address_Environment = Address()
  sys_sysuid = SYSVAR("SYSUID")
  sys_sysenv = SYSVAR("SYSENV")
  mvs_sysname = MVSVAR("SYSNAME")
  mvs_opsys = MVSVAR("SYSOPSYS")
  sysvar_syspref = Sysvar("SYSPREF")
  sys_username = sys_sysuid"@"mvs_sysname

  old_trap = OutTrap("RACF.")
  "listuser" sys_sysuid
  new_trap = OutTrap("OFF")
  if (racf.0 > 0) then do
    if (pos("NAME=",racf.ix) > 0) then do
      parse var racf.ix . "NAME=" sys_username "OWNER=" .
      sys_username = strip(an(sys_username))
    end
    if (pos("INSTALLATION-DATA",racf.ix) > 0) then do
      parse var racf.ix . "=" sys_username
      sys_username = strip(an(sys_username))
    end
  end
  prolog01 = ""
  prolog02 = ""
  prolog03 = ""
  prolog04 = ""
  prolog05 = ""
  prolog06 = ""
  prolog07 = ""
  prolog08 = ""
  epilog01 = ""
  epilog02 = ""
  epilog03 = ""
  epilog04 = ""
  epilog05 = ""
  epilog06 = ""
  epilog07 = ""
  epilog08 = "From" sys_username
  return

validate_files:
  locfile_name = Strip(locfile,"B","'")
  parse var locfile_name hlq "." olq
  if (hlq >< sysvar_syspref) then do
    locfile_name = sysvar_syspref"."locfile_name
  end
  locfile_name = "'"Strip(Left(locfile_name,44),"T"," ")"'"
  rmtfile_name = Strip(rmtfile,"B","'")
  if (rmtfile = "RMTFILE") | (rmtfile = "") then do
    rmtfile_name = sysvar_syspref".UNKNOWN.XMI"
  end
  parse var rmtfile_name hlq "." olq
  if (hlq >< sysvar_syspref) then do
    rmtfile_name = sysvar_syspref"."rmtfile_name
  end
  rmtfile_name = "'"Strip(Left(rmtfile_name,44),"T"," ")"'"
  call get_file_attributes
  return

XMIT2_a_file:
  call validate_files
  if (sys_sysenv = "FORE") then do
    locfile = locfile_name
    rmtfile = rmtfile_name
    Address ispexec "DISPLAY PANEL("source_uc_exec_name")"
    drc = rc
    if (drc =  8) then do
      say "not doing anything more"
      return
    end
    if (drc >  8) then do
      ZERRHM = "*"
      ZERRALRM = "YES"
      ZERRSM = source_uc_exec_name "terminating"
      ZERRLM = "Either you pressed END or the display panel failed."
      ADDRESS ISPEXEC "VPUT (ZERRSM ZERRLM ZERRHM ZERRALRM) SHARED"
      ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
      return
    end
    call validate_files
  end
  else do
    say ""
    say Copies("=",55)
    say left("=" source_uc_exec_name rexxpgm_version,53) "="
    say left("=" "executing under" source_host_env,53) "="
    say left("=" "as a" source_call_type,53) "="
    say left("=  on" date() "at" time()".",53) "="
    say Copies("=",55)
    say ""
    say ""
    say "Transmit" locfile_name "into" rmtfile_name"."
    say ""
  end
  NEWSTACK
  queue "* Control Section"
  queue ":altctl. '"sys_sysuid".NICKNAME'"
  if (prolog01 >< "") then,
    queue ":prolog."prolog01
  if (prolog02 >< "") then,
    queue ":prolog."prolog02
  if (prolog03 >< "") then,
    queue ":prolog."prolog03
  if (prolog04 >< "") then,
    queue ":prolog."prolog04
  if (prolog05 >< "") then,
    queue ":prolog."prolog05
  if (prolog06 >< "") then,
    queue ":prolog."prolog06
  if (prolog07 >< "") then,
    queue ":prolog."prolog07
  if (prolog08 >< "") then,
    queue ":prolog."prolog08
  if (epilog01 >< "") then,
    queue ":epilog."epilog01
  if (epilog02 >< "") then,
    queue ":epilog."epilog02
  if (epilog03 >< "") then,
    queue ":epilog."epilog03
  if (epilog04 >< "") then,
    queue ":epilog."epilog04
  if (epilog05 >< "") then,
    queue ":epilog."epilog05
  if (epilog06 >< "") then,
    queue ":epilog."epilog06
  if (epilog07 >< "") then,
    queue ":epilog."epilog07
  if (epilog08 >< "") then,
    queue ":epilog."epilog08
  queue ":nolog"
  queue "* Nicknames Section"
  queue ":nick.KEN"
  queue ":name. PDS2XMIT"
  queue ":node."
  queue ":userid."sys_sysuid
  queue ":nolog"
  numq = Queued()
  quiet = Outtrap("HLP.")
  "delete NAMES.TEXT"
  "delete" rmtfile_name
  quiet = Outtrap("OFF")
  "ALLOC FILE(NAMES) SPACE(1 1) RECFM(V B)",
    "TRACKS",
    "BLKSIZE(0) LRECL(255) DSORG(PS) NEW DELETE REUSE",
    "UNIT(SYSALLDA) DIR(0) DATASET('"sysvar_syspref".NAMES.TEXT')"
  "ALLOC FILE(DOTXMI) SPACE("rmt_space") RECFM(F B)",
    "TRACKS NEW CATALOG REUSE",
    "BLKSIZE(3120) LRECL(80) DSORG(PS)",
    "UNIT(SYSALLDA) DIR(0) DATASET("rmtfile")"
  "EXECIO" numq "DISKW NAMES (FINIS"
  "FREE FILE(DOTXMI)"
  if (bitbuckt = "") then bitbuckt = "*"
  quiet = Outtrap("HLP.")
  "TRANSMIT Ken COPYLIST PROLOG EPILOG NOLOG",
    "NONOTIFY DATASET("locfile_name")",
    "MSGDATASET('"sys_sysuid".RECEIVE.MSG')",
    options,
    "OUTDSNAME("rmtfile_name")",
    "SYSOUT("bitbuckt")"
  did_it = rc
  "FREE FILE(NAMES)"
  "delete '"sys_sysuid".RECEIVE.MSG'"
  quiet = Outtrap("OFF")
  if (did_it >< 0) then,
    do
      say "Transmit rc("did_it")"
      XMIT2in = Queued()
      do ix = 1 to XMIT2in
        parse pull dline
        say dline
      end
      do ix = 1 to HLP.0
        say HLP.ix
      end
    end
  DELSTACK
  if (sys_sysenv >< "FORE") then,
    drc = 8
  return
get_file_attributes:
  lrc=LISTDSI(locfile_name "DIRECTORY")
  DSIRC=SYSREASON
  if (dsirc >< 0) then,
    do
      msg = msg "LISTDSI("dsirc")"
      prolog03 = locfile msg
      return
    end
  dirs = ""
  if (left(sysdsorg,2) = "PO") then,
    dirs = "DIR="SYSADIRBLK
  if (SYSADIRBLK = "NO_LIM") then dirs = "PDSTYPE=PDSE"
  rmt_space = SYSPRIMARY SYSSECONDS
  call build_msg
  return
uc: Procedure
  parse upper arg string
  return string
lc: Procedure
  parse arg string
  string = translate(string,
    "abcdefghijklmnopqrstuvwxyz",
    "ABCDEFGHIJKLMNOPQRSTUVWXYZ")
  return string
an: Procedure
  parse arg string
  all_ebcdic = xrange(x2c("00"),x2c("FF"))
  alpha_numeric = ,
    copies(" ",x2d("6B")-x2d("00"))||,
    "," ||,
    copies(" ",x2d("C1")-x2d("6C"))||,
    "ABCDEFGHI" ||,
    copies(" ",x2d("D1")-x2d("CA"))||,
    "JKLMNOPQR" ||,
    copies(" ",x2d("E2")-x2d("DA"))||,
    "STUVWXYZ" ||,
    copies(" ",x2d("F0")-x2d("EA"))||,
    "0123456789" ||,
    copies(" ",x2d("0100")-x2d("FA"))
  string = translate(string,alpha_numeric,all_ebcdic)
  return string

alloc_plib:
  bulk_dd = "BULK"RIGHT("0000"RANDOM(99999),4)
  "ALLOC NEW DEL F("bulk_dd") DSO(PO) DIR(1) SP(3,3) TRACK",
         "REUSE RECFM(F B) BLKSIZE(0) LRECL(80) UNIT(SYSDA)"
  a = panel_def()
  Do Until substr(line,1,7)="/*PANEL"
    line = sourceline(a)
    a=a+1
  End
  panelname = source_uc_exec_name
  Address ispexec,
    "LMINIT DATAID(TMPPNL) ENQ(EXCLU) DDNAME("bulk_dd")"
  Address ispexec,
    "LMOPEN DATAID("tmppnl") OPTION(OUTPUT)"
  Do Until substr(line,1,4)=")END"
    line = sourceline(a)
    Address ispexec,
      "LMPUT DATAID(&TMPPNL) MODE(INVAR) DATALOC(LINE) DATALEN(80)"
    a=a+1
  End
  Address ispexec,
    "LMMADD DATAID(&TMPPNL) MEMBER("panelname")"
  Address ispexec,
    "LMFREE DATAID(&TMPPNL)"
  Address ispexec,
    "LIBDEF ISPPLIB LIBRARY ID("bulk_dd") STACK"
  return
free_plib:
  address ispexec "LIBDEF ISPPLIB"
  "FREE F("bulk_dd")"
  return
panel_def:
  return next_line()
next_line:
  return sigl+4

/*PANEL XMIT2
)ATTR DEFAULT(%+_)
       %   TYPE(TEXT) INTENS(HIGH)
       +   TYPE(TEXT) INTENS(LOW)
       _   TYPE(INPUT) INTENS(HIGH) CAPS(OFF) JUST(LEFT)
)BODY EXPAND(//)
%-/-/- TRANSMIT a data set -/-/-
Command ===>_ZCMD
+
+Host Data set:_locfile                                             +
+Remote name: :_rmtfile                                             +
+Prolog: Bit-bucket output class:_Z+
_prolog01                                                            +
_prolog02                                                            +
_prolog03                                                            +
_prolog04                                                            +
_prolog05                                                            +
_prolog06                                                            +
_prolog07                                                            +
_prolog08                                                            +
+epilog:
_epilog01                                                            +
_epilog02                                                            +
_epilog03                                                            +
_epilog04                                                            +
_epilog05                                                            +
_epilog06                                                            +
_epilog07                                                            +
_epilog08                                                            +
)INIT
  .ZVARS = 'BITBUCKT'
)END
*/
build_msg:
  queue ,
"                                                                      "
  queue ,
"     This message is intended to help someone who is viewing          "
  queue ,
"     an EBCDIC binary version and not sure how to process             "
  queue ,
"     the file. If you are viewing this on a PC, then you              "
  queue ,
"     will need to file transfer this file in a binary                 "
  queue ,
"     format to an "MVS" system with RECFM=FB, BLKSIZE=3120,           "
  queue ,
"     and LRECL=80. Then you can issue the TSO/E command:              "
  queue ,
"                                                                      "
  queue ,
"       RECEIVE INDATASET('your.mvs.dataset.name')                     "
  queue ,
"                                                                      "
  queue ,
"     You will get any messages inside this file and then              "
  queue ,
"     be prompted:                                                     "
  queue ,
"                                                                      "
  queue ,
"INMR906A Enter restore parameters or 'DELETE' or 'END' +              "
  queue ,
"                                                                      "
  queue ,
"     The '+' plus sign indicates there is more to the prompt. Enter   "
  queue ,
"     a question mark in response to each line and you will get the    "
  queue ,
"     next line. INMR908A will show file attributes for the file       "
  queue ,
"     that was processed by 'TRANSMIT'. Normally you can just press    "
  queue ,
"     the enter key and take all the defaults. You can always          "
  queue ,
"     rename the received file afterwards. If you want to save time    "
  queue ,
"     then respond 'DATASET('my.new.dataset.name'). And optionally,    "
  queue ,
"     VOLUME(volser) if non-SMS managed.                               "
  queue ,
"                                                                      "
  queue ,
" INMR906A Enter restore parameters or 'DELETE' or 'END' +             "
  queue ,
"?                                                                     "
  queue ,
" INMR908A The input file attributes are: DSORG=PARTITIONED, RECFM=FB, "
  queue ,
"BLKSIZE=32720, LRECL=80, File size=53K bytes +                        "
  queue ,
"?                                                                     "
  queue ,
" INMR909A You may enter DSNAME, SPACE, UNIT, VOL, OLD/NEW, or RESTORE/"
  queue ,
"COPY/DELETE/END                                                       "
  queue ,
"                                                                      "
  queue ,
"     This file was allocated with:                                    "
  queue "RECFM="SYSRECFM "BLKSIZE="SYSBLKSIZE,
        "LRECL="SYSLRECL
  queue "TRACKS" "PRIMARY="SYSPRIMARY,
    "SECONDARY="SYSSECONDS dirs
  queue " "
  numq = Queued()
  quiet = Outtrap("HLP.")
  "delete '"sys_sysuid".RECEIVE.MSG'"
  quiet = Outtrap("OFF")
  "ALLOC FILE(RMSG) SPACE(2 1) RECFM(F B)",
    "TRACKS",
    "BLKSIZE(0) LRECL(80) DSORG(PS) NEW CATALOG REUSE",
    "UNIT(SYSALLDA) DIR(0) DATASET('"sys_sysuid".RECEIVE.MSG')"
  "EXECIO" numq "DISKW RMSG (FINIS"
  "FREE FILE(RMSG)"
  return
