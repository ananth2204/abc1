/* rexx */
Rexx_CSV2FIXC:
  rexxpgm_version = "01.01"           /* ver lev */

  PARSE ARG all_my_arguments
  NUMERIC DIGITS 12

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This code drives Initialization, Process, and Termination routines.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Main_Routine:
  return_code = Initialization_Routine()
  IF (return_code = 0) THEN DO
    return_code = Process_Routine()
  END
  return_code = Termination_Routine()
  RETURN 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================

 Dataset:  DEMO.REXX(CSV2FIXC)
 Author:   Kenneth Tomiak
 Contact:  "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
 Overview: Read from //CSVIN and convert the comma separated VALUE
           file Into fixed size columns based on longest length
           found for each column.
 Known limitations:
           1) Internal line breaks may present themselves as
              separate records.
           2  CSV never started out using any quotation mark, thus
              WHEN people started using the comma inside text fields
              the format was extended to use one of the well known
              quotation marks (the apostrophe and the quote). Those
              are the only ones supported here.

-----------------------------------------------------------------------

 History of Modifications
 ------------------------
vv.mm When     Who / What you did ... (Newest change at the top.)
----- -------- --------------------------------------------------------
01.01 20180505 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
         -     1) Stylize using Edit Macro @putktm:
      20180423    Programming Using The Kenneth Tomiak Method.
               2) Correct placement of return_code = 0.
               3) Updated Ctlblk_Jobspecs.
               4) Stylize using:
                  Programming Using The Kenneth Tomiak Method.
                 a) ADDRESS MVS before EXECIO.
               5) Stylize using template $putktm:
                  Programming Using The Kenneth Tomiak Method.
               6) Stylize using Edit Macro %putktm:
                  Programming Using The Kenneth Tomiak Method.
               7) Stylize using the
                  Programming Using The Kenneth Tomiak Method.
----- -------- --------------------------------------------------------
01.00 20090110 "Kenneth E Tomiak"<KenTomiak@KTomiak.org>
               1) Original code built by BGN#REXX.SPF.
               2) Csv_Unparse found on the web and it needed
                  a bunch of fixing before it would work.
----- -------- --------------------------------------------------------

-----------------------------------------------------------------------

STANDARD GLOBAL DISCLAIMER
--------------------------
The author explicitly disavows any claim whatsoever about the
correctness or functionality of this program, and disclaims liability
for anything and everything bad that might happen in connection with,
before, during, or after using it. I have tried to make it work right,
and I am personally pretty confident that it does, but everybody makes
mistakes, so if you use it, you do so at your own risk.

=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 This routine initializes constants and variables.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Initialization_Routine:
  return_code = 0
  PARSE VERSION,
    version_rexx_name,
    version_rexx_version,
    version_rexx_date
  PARSE SOURCE,
    source_host_env,
    source_call_type,
    source_uc_exec_name,
    source_hostdd,
    source_hostdsn,
    source_nf_exec_name,
    source_initial_cmd_env,
    source_asid_name,
    source_char8_user_token,
    source_hostother
  IF (source_host_env = "TSO") THEN DO
    MAKEBUF
    job_specs = Ctlblk_Jobspecs()
    sysvar_sysuid = SYSVAR("SYSUID")
    sysvar_sysenv = SYSVAR("SYSENV")
    sysvar_sysispf = SYSVAR("SYSISPF")
  END
  ELSE DO
    job_specs = Set_Static_Jobspecs()
    sysvar_sysuid = "Nobody"
    sysvar_sysenv = source_host_env
    sysvar_sysispf = "INACTIVE"
  END
  SAY ""
  SAY COPIES("=",79)
  SAY LEFT("=" jobspecs_jobname ,
    jobspecs_ssibjbid jobspecs_stepname ,
    jobspecs_procname,77) "="
  SAY LEFT("=" source_uc_exec_name rexxpgm_version,77) "="
  SAY LEFT("= executing under" source_host_env,77) "="
  SAY LEFT("= as a" source_call_type,77) "="
  SAY LEFT("= on" DATE() "at" TIME()".",77) "="
  SAY COPIES("=",79)
  SAY ""

  mylength. = 0
  num_recs = 0
  max_fields = 0
  SELECT
    WHEN (source_host_env = "WindowsNT") THEN DO
      std_in = "SAMPLE.CSV"
      std_out = "SAMPLE.FC"
      DO WHILE (Lines(std_in) > 0)
        num_recs = num_recs + 1
        one_line.num_recs = LineIn(std_in)
      END
      one_line.0 = num_recs
      stream_info = STREAM(std_in,"Command","CLOSE")
    END
    WHEN (source_host_env = "TSO") THEN DO
      MAKEBUF
      ADDRESS MVS ,
        "EXECIO * DISKR CSVIN (STEM one_line. FINIS)"
      read_rc = RC
      IF (read_rc <> 0) THEN DO
        SAY COPIES("?",79)
        SAY "Error reading CSVIN, RC("read_rc")"
        SAY COPIES("?",79)
        return_code = 8
      END
    END
    OTHERWISE DO
      SAY COPIES("?",79)
      SAY "I am not written to run on" source_host_env"."
      SAY COPIES("?",79)
      return_code = 12
    END
  END
  IF (return_code > 0) THEN DO
    RETURN return_code
  END

  DO i = 1 TO one_line.0
    IF (one_line.i = "") THEN DO
      ITERATE
    END
    num_fields = Csv_Unparse(one_line.i)
    IF (num_fields > max_fields) THEN DO
      max_fields = num_fields
    END
    IF (num_fields > 0) THEN DO
      DO j = 1 TO csv.0
        IF (LENGTH(csv.j) > mylength.j) THEN DO
          mylength.j = LENGTH(csv.j)
        END
      END
    END
    ELSE DO
      SAY ERROR
      return_code = 12
    END
  END

  SAY num_recs "records",
    max_fields "fields"
  rec_length = 0
  DO i = 1 TO max_fields
    rec_length = rec_length + mylength.i
  END
  SAY "LRECL("rec_length")"
  blkfctr = Int(28000 / rec_length)
  SAY "Factor("blkfctr")"
  blksize = blkfctr * rec_length
  tot_tracks = Int(num_recs / blkfctr) + 1
  half_trk = Int(tot_tracks / 2)
  SAY "File size("tot_tracks")"
  SELECT
    WHEN (source_host_env = "WindowsNT") THEN DO
      NOP
    END
    WHEN (source_host_env = "TSO") THEN DO
      "DELETE "jobname".CSVOUT"
      "ALLOC FILE(CSVOUT) DATASET("jobname".CSVOUT)" ,
        "NEW CATALOG" ,
        "UNIT(SYSALLDA) SPACE("tot_tracks","half_trk") TRACKS" ,
        "RECFM(F B) BLKSIZE(0) LRECL("rec_length")"
    END
    OTHERWISE DO
      NOP
    END
  END
  RETURN return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 This routine does the processing.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Process_Routine:
  DO i = 1 TO one_line.0
    csv_out = ""
    IF (one_line.i <> "") THEN DO
      num_fields = Csv_Unparse(one_line.i)
      IF (num_fields > 0) THEN DO
        DO j = 1 TO max_fields
          csv_out = csv_out||LEFT(csv.j,mylength.j)
        END
      END
      ELSE DO
        SAY ERROR
      END
    END
    SELECT
      WHEN (source_host_env = "WindowsNT") THEN DO
        write_rc = LineOut(std_out,csv_out)
      END
      WHEN (source_host_env = "TSO") THEN DO
        QUEUE csv_out
        ADDRESS MVS ,
          "EXECIO 1 DISKW CSVOUT"
        write_rc = RC
        IF (write_rc <> 0) THEN DO
          SAY "Write ERROR at" num_rec
          LEAVE
        END
      END
      OTHERWISE DO
        NOP
      END /* OTHERWISE */
    END /* SELECT */
  END /* DO */
  SELECT
    WHEN (source_host_env = "WindowsNT") THEN DO
      write_rc = LineOut(std_out)
      stream_info = STREAM(std_out,"Command","CLOSE")
    END
    WHEN (source_host_env = "TSO") THEN DO
      ADDRESS MVS ,
        "EXECIO 0 DISKW CSVOUT (FINIS)"
    END
    OTHERWISE DO
      NOP
    END /* OTHERWISE */
  END /* SELECT */
  RETURN return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 This routine does cleanup before exiting.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Termination_Routine:
  IF (return_code > 0) THEN DO
    SAY COPIES("*",79)
    SAY LEFT("* FINAL RC=" return_code,77) "*"
    SAY COPIES("*",79)
  END
  IF (sysvar_sysispf = "ACTIVE") THEN DO
    ZISPFRC = return_code
    ADDRESS ISPEXEC "VPUT (ZISPFRC) SHARED"
  END
  IF (source_host_env = "TSO") THEN DO
    DROPBUF
  END
  RETURN return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 Follow control blocks to identify jobname, type, and JES number.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Ctlblk_Jobspecs:
  ptr2psa = 0
  cvtptr = STORAGE(D2X(ptr2psa + 16),4)
  cvtsmca = STORAGE(D2X(C2D(cvtptr)+197),3)
  smfid = STORAGE(D2X(C2D(cvtsmca)+16),4)
  psatold = STORAGE(21C,4)
  ptr2tiot = STORAGE(D2X(C2D(psatold)+12),4)
  jobspecs_jobname = STORAGE(D2X(C2D(ptr2tiot)),8)
  jobspecs_stepname = STORAGE(D2X(C2D(ptr2tiot)+8),8)
  jobspecs_procname = STORAGE(D2X(C2D(ptr2tiot)+16),8)
  tcbjscbb = STORAGE(D2X(C2D(psatold)+181),3)
  jscbssib = STORAGE(D2X(C2D(tcbjscbb)+316),4)
  jobspecs_ssibjbid = STORAGE(D2X(C2D(jscbssib)+12),8)
  RETURN jobspecs_jobname jobspecs_ssibjbid ,
    jobspecs_stepname jobspecs_procname

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 Pretend to know who I am on non-MVS systems.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Set_Static_Jobspecs:
  IF (LASTPOS("\",source_uc_exec_name) > 0) THEN DO
    jobname = ,
      SUBSTR(source_uc_exec_name, ,
      LASTPOS("\",source_uc_exec_name)+1,12)
  END
  ELSE DO
    jobspecs_jobname = "none"
  END
  jobspecs_stepname = "none"
  jobspecs_procname = "none"
  jobspecs_ssibjbid = "REXX####"
  RETURN jobspecs_jobname jobspecs_ssibjbid ,
    jobspecs_stepname jobspecs_procname

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 Place any of your subroutines and procedures below this.
 And describe your routines here.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */

/* ================== ParseCSV ====================
   This is passed a line (from a CSV text file) to
   parse. It breaks up the fields of the line Into
   an array where (arrayname).0 is a count of how
   many fields are broken off, and those fields
   are stored in (arrayname).1 to (arrayname).XXX
   where XXX is however many fields there are.

   This returns an empty string if success, or an
   ERROR message if an error.
   ERROR = ParceCSV(line)

   line is the CSV line to parse.

   The name of the array (stem) must be assigned to the
   variable named 'Array'. This will be the STEM variable
   where the fields are to be stored.

   EXAMPLE:

   Array = 'csv.'
   ERROR = ParseCSV('Field 1, ""Field 2"", Field 3')
   IF (ERROR  = "") THEN DO
     DO i = 1 TO csv.0
       SAY "Field" i "=" csv.i
     END
   END
   RETURN 0
 */

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 Attempt to correctly extract fields from the expanded CSV format.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Csv_Unparse: PROCEDURE EXPOSE csv.
  PARSE ARG orig
  /*
  This is a '1' when we are within a quoted string,
  or '0' OTHERWISE DO. Initially, 0.
  */
  inside = 0
  /*
  We have not yet parsed any fields.
  */
  count = 0
   /*
   Let us trim off any leading and trailing spaces, and make
   sure that we have something to parse.
   */
   IF (orig <> "") THEN DO
     /*
     IF (the last char is not a comma,) THEN DO
       just stick a comma
     END
     on the END of it so that the last field has a definitive
     end.
     */
     IF (RIGHT(orig, 1) <> ',') THEN DO
       orig = orig || ','
     END
     /*
     We have to slog through each character ourselves, because
     we want to account for quoted fields. So, we first need to
     determine how many chars we need to slog through.
     */
     orig_length = LENGTH(orig)
     /*
     This is the position within our original string
     where the next field starts. Initially at the
     start of the string.
     */
     startpos = 1
     /* Do each char of the original line */
     DO i = 1 TO orig_length
       SELECT
         /*
         Have we gotten to the END of the field? This happens
         WHEN we encounter a comma that falls outside of
         any quotes, or if we get to the END of the line.
         */
         WHEN (SUBSTR(orig, i , 1) == ',' & (inside = 0)) THEN DO
           /*
           Extract the text of this field, with leading/trailing spaces
           trimmed. That text begins at an offset of 'startpos' within
           the original line, and it ends at an offset of 'i'.
           */
           piece = STRIP(SUBSTR(orig, startpos, i - startpos))
           /*
           Update 'startpos' to where the next field should start. It
           starts after the comma.
           */
           startpos = i + 1
           /*
           Unconventional leading '=' sign ahead of field for formulas
           */
           piece = STRIP(piece,"L","=")
           /*
           Remove any pair of quotes around the field.
           */
           IF LEFT(piece, 1) == '"' & ,
             RIGHT(piece, 1) == '"' & piece <> '"' THEN DO
             piece = SUBSTR(piece, 2, LENGTH(piece) - 2)
           END
           /*
           Another field will be stored in our array,
           so increment the count.
           */
           count = count + 1
           /*
           Find any instances of double quote characters back to
           back, and replace them with a single double quote.
           NOTE: Because the REXX Interpreter is doing the same
           with our own instruction below, we need to specify 4
           double quote characters in order to have 2 of them in
           this literal string.
           */
           two_quotes = POS('""',piece)
           DO WHILE (two_quotes > 0)
             piece = DELSTR(piece,two_quotes,1)
             two_quotes = POS('""',piece,two_quotes+1)
           END
           /*
           Store the final text in the next field of our array.
           */
           csv.count = piece
         END /* The END of a field. */
         /*
         DO we have a quote char? IF so, THEN toggle 'inside'. This
         variable will be '1' when we're inside of a quoted string,
         and '0' when we're outside of the quotes. We need to
         know whether we're inside or out so that we know whether
         any comma we encounter will be regarded as an embedded
         comma (inside the quotes) or the END of a field (outside
         quotes).
         */
         WHEN (SUBSTR(orig, i , 1) = '"') THEN DO
           inside = 1 - inside
         END
         /*
         IF we are parsing in the middle of a field, just keep looking
         for any quote characters inside of it, or a comma outside of
         quotes (ie, the END of the field).
         */
         OTHERWISE DO
           NOP
         END /* OTHERWISE */
      END /* SELECT */
    END /* All chars processed */
  END /* Not a blank original string */
  /*
  Store how many fields we have.
  */
  csv.0 = count
  /*
           THEN DO
             something is
           END
  amiss with this string.
  */
  IF (inside) THEN DO
    SAY    "The original line has an odd number" ,
      "of double quote characters!"
    RETURN 0
  END
  /*
  Done
  */
  RETURN count

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 Sloppy way to get an Integer VALUE from REXX.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Int: PROCEDURE
  PARSE ARG yournumber
  PARSE VAR yournumber Intpart "." decpart
  RETURN Intpart

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
End of code.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
