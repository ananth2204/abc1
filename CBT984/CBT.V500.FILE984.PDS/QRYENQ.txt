rexx_ENQ:      /* We still need rexx in comment if read from SYSPROC */
  rexxpgm_version = "01.02"
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

 Dataset:  KET2812.MIS.REXX(ENQ)
 Author:   Kenneth Tomiak
 Contact:  "Kenneth Tomiak"<KenTomiak@KTomiak.org>
 Syntax:   ENQ {arguments ...}
 Overview: (tell us about the code)


=======================================================================

 History of Modifications
 ------------------------
vv.mm When     Who      What you did
----- -------- -------- -----------------------------------------------
01.02 20090209 KET2812  "Kenneth Tomiak"<KenTomiak@KTomiak.org>
                        1) Documenting it more.
----- -------- -------- -----------------------------------------------
01.01 20090205 KET2812  "Kenneth Tomiak"<KenTomiak@KTomiak.org>
                        1) Fixing it to be smarter.
                        2) Documenting it more.
----- -------- -------- -----------------------------------------------
01.00 20090204 KET2812  Plucked from an ISPF-LIST entry.
                        1) Original code.
----- -------- -------- -----------------------------------------------

=======================================================================

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */

  Parse Arg all_my_arguments
  Numeric Digits 12

rexx_Main_ENQ:
  MAKEBUF
  return_code = rexx_Initialize()
  If (return_code = 0) then do
    return_code = rexx_Process()
  End
  return_code = rexx_Termination()
  DROPBUF
  Return return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 In this routine we open any files and initialize any
 constants we might need.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
rexx_Initialize:
  ADDRESS ISPEXEC "CONTROL ERRORS RETURN"
  PARSE VERSION,
    version_rexx_name,
    version_rexx_version,
    version_rexx_date
  PARSE SOURCE,
    source_host_env,
    source_call_type,
    source_uc_exec_name,
    source_hostdd,
    source_hostdsn,
    source_nf_exec_name,
    source_initial_cmd_env,
    source_asid_name,
    source_char8_user_token,
    source_hostother
  sysvar_sysuid = SYSVAR("SYSUID")
  sysvar_sysenv = SYSVAR("SYSENV")
  return_code = 0

  If (source_host_env <> "TSO") Then do,
    Say "Wrong host environment" source_host_env
    return_code = 16
  End
  zedsmsg = source_uc_exec_name "FAILED"
  Address ISPEXEC,
    "VGET (ZISPFOS)"
  parse var zispfos . . os osrelv "." osrelr "." osrelm  .
  if ((os = "OS/390") | ((osrelv = 1) & (osrelr < 2))) then do
    zedlmsg = "QUERYENQ is not supported under" zispfos
    Address ISPEXEC,
      "SETMSG MSG(ISRZ000)"
    return_code = 20
    return return_code
  end
  parse var all_my_arguments ZENRNAME ZENQNAME reqholdr .
  if (ZENRNAME = "") then do
    zedlmsg = "QUERYENQ needs a resource name."
    Address ISPEXEC,
      "SETMSG MSG(ISRZ000)"
    return_code = 20
    return return_code
  end
  ZENRNAME = strip(ZENRNAME,"B","'")
  if (ZENQNAME = "") then ZENQNAME = "SYSDSN"
  if (reqholdr = "") then reqholdr = "*" /* or sysvar_sysuid? */

  Return return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 In this routine we do our processing.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
rexx_Process:
  Address ISPEXEC,
    "TBEND ENQTBL"
  ispexec_rc = rc
  Address ISPEXEC "QUERYENQ",
    "Table(ENQTBL)",
    "Qname(ZENQNAME) Rname(ZENRNAME) Req("reqholdr")",
    "LIMIT(0) XSYS"
  ispexec_rc = rc

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

  Address ISPEXEC "QUERYENQ",

    "Table(ENQTBL)",
/*  OR                                                  */ ,
    "SAVE(MIS)",

    "Qname(ZENQNAME) Rname(ZENRNAME) Req("reqholdr")"
/*  OR                                                  */ ,
    "WAIT" ,

    "LIMIT(0)",
    "XSYS"

=======================================================================

 RC Description (ZERRLM MAY HAVE A MESSAGE IN IT)
 -- -------------------------------------------------------------------
  0 Table returned or data set written, but XSYS parameter was not
    specified and the system is running in STAR mode. The data returned
    may not reflect all ENQs on all systems.

    NOTE: ZERO MAY NOT BE A GOOD THING??
 -- -------------------------------------------------------------------
  2 Table returned or data set written.
 -- -------------------------------------------------------------------
  4 Table returned but truncated due to limit.
 -- -------------------------------------------------------------------
  8 No ENQs satisfy the request.
 -- -------------------------------------------------------------------
  10 No ENQs satisfy the request, but XSYS parameter was not specified
     and the system is running in STAR mode. The data returned may not
     reflect all ENQs on all systems.
 -- -------------------------------------------------------------------
  12 Table creation error, parameter or other termination error. See
     messages for more detail. This includes services not available due
     to configuration table restrictions.
 -- -------------------------------------------------------------------
  14 The SAVE data set is in use by another user.
 -- -------------------------------------------------------------------
  20 Severe error, including TBADD error or data set creation errors.
 -- -------------------------------------------------------------------

=======================================================================

   Limitation - only 84 of the same QNAME/RNAME can be returned.

   TABLE(your-name-for-the-table)
     creates a table with columns:
     COLNAME      COL_Len
     --------     -------
     ZENJOB       8
     ZENQNAME     8
     ZENRNAME     255
     ZENDISP      5
     ZENHOLD      4
     ZENSCOPE     7
     ZENSTEP      7
     ZENGLOBL     6
     ZENSYST      8
     ZENRESV      7

   SAVE(MLQ) creates a sequential file &prefix.&mlq.ENQLIST, VB 332 with
      ZENJOB         8
      ZENSYST        8
      ZENDISP        5
      ZENHOLD        4
      ZENSCOPE       15
      ZENGLOBL       15
      ZENQNAME       8
      ZENRNAME       VL - 255 max

   QNAME(the-ZENQNAME-queue-name-or-an-asterisk)

   RNAME(the-ZENRNAME-queue-name-or-an-asterisk)

   REQ(the-enqueue-requestor-or-an-asterisk)

   WAIT - ignores ZENQNAME and ZENRNAME and returns all enqueues

   LIMIT(#) - 0=no-limit else how few to get

   XSYS - Cross-system (sysplex wide)

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */

  Select
    When (ispexec_rc = 0) then do
      Call process_table
    end
    When (ispexec_rc = 2) then do
      Call process_table
    end
    When (ispexec_rc = 4) then do
      Call process_table
    end
    When (ispexec_rc = 8) then do
      zedsmsg = "NO ENQ"
      zedlmsg = "Nothing has it ENQUEUED."
      Address ISPEXEC,
        "SETMSG  MSG(ISRZ000)"
    end
    When (ispexec_rc = 10) then do
      zedlmsg = "TRY XSYS?"
      Address ISPEXEC,
        "SETMSG  MSG(ISRZ000)"
    end
    When (ispexec_rc = 14) then do
      zedlmsg = "SAVE data set in use."
      Address ISPEXEC,
        "SETMSG  MSG(ISRZ000)"
      return_code = ispexec_rc
      return return_code
    end
    When (ispexec_rc = 20) then do
      zedlmsg = "QUERYENQ had a problem, RC("ispexec_rc")"
      Address ISPEXEC,
        "SETMSG  MSG(ISRZ000)"
      return_code = ispexec_rc
      return return_code
    end
    Otherwise
      zedlmsg = "QUERYENQ had a problem, RC("ispexec_rc")"
      Address ISPEXEC,
        "SETMSG  MSG(ISRZ000)"
  end
  Return return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 In this routine we close files and finish up.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
rexx_Termination:
  Return return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 Place any of your subroutines and procedures below this.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
rexx_jobspecs:
  /*---------------------------------------------------------------*/
  /* ADDRESSABILITY TO CVT FROM PSA                                */
  /*---------------------------------------------------------------*/
  PTR2PSA = 0
  CVTPTR = STORAGE(D2X(PTR2PSA + 16),4)
  /*---------------------------------------------------------------*/
  /* ADDRESSABILITY TO SMCA, THEN GET SMF SYSTEM ID                */
  /*---------------------------------------------------------------*/
  CVTSMCA = STORAGE(D2X(C2D(CVTPTR)+197),3)
  SMFID = STORAGE(D2X(C2D(CVTSMCA)+16),4)
  /*---------------------------------------------------------------*/
  /* GET JOBNAME, STEP, AND PROCEDURE                              */
  /*---------------------------------------------------------------*/
  PSATOLD  = STORAGE(21C,4)                    /* POINTER TO TCB   */
  PTRTIOT  = STORAGE(D2X(C2D(PSATOLD)+12),4)   /* POINTER TO TIOT  */
  JOBNAME  = STORAGE(D2X(C2D(PTRTIOT)),8)
  STEPNAME = STORAGE(D2X(C2D(PTRTIOT)+8),8)
  PROCNAME = STORAGE(D2X(C2D(PTRTIOT)+16),8)
  Tcbjscbb = Storage(D2x(C2d(Psatold)+181),3)              /* jscb */
  jscbssib = STORAGE(D2X(C2D(tcbjscbb)+316),4)      /* Ptr to SSIB */
  ssibjbid = STORAGE(D2X(C2D(jscbssib)+12),8)    /* job identifier */
  Return JOBNAME SSIBJBID STEPNAME PROCNAME

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 describe your routines here
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
 Check the RC and set a message.
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
check_isr_rc:
  parse arg isr_rc
  If (isr_rc > 4) then do
    ZERRHM = "*"
    ZERRALRM = "YES"
    ZERRSM = isr_function "FAILED"
    ZERRLM = zerrsm ", RC("isr_rc")"
    if (sysvar_sysenv = "FORE") then do
      Address IspExec "VPUT",
        "(ZERRSM ZERRLM ZERRHM ZERRALRM)",
        " SHARED"
      ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
      isr_rc = rc
    end
    Else do
      say zerrsm zerrlm
      isr_rc = 0
    end
  End
  Return isr_rc

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
__DATA__
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
process_table:
  say "------------------------"
  say "ZENQNAME("ZENQNAME")"
  say "ZENRNAME("ZENRNAME")"
  say "Req("reqholdr")"
  say "------------------------"
  Address ISPEXEC,
    "TBSTATS ENQTBL ROWCURR(CURRROWS)"
  if (currrows = 0) then do
    zedlmsg = "NO ROWS"
    Address ISPEXEC,
      "SETMSG  MSG(ISRZ000)"
    return_code = 4
    return return_code
  end
  say currrows "rows to process."
  Address ISPEXEC,
    "TBTOP ENQTBL"
  ispexec_rc = rc
  if (ispexec_rc < 8) then do
    Address ISPEXEC,
      "TBSKIP ENQTBL"
    ispexec_rc = rc
  end
  Do While ispexec_rc = 0
    Say ,
      ZENJOB,
      ZENQNAME,
      ZENRNAME,
      ZENDISP,
      ZENHOLD,
      ZENSCOPE,
      ZENSTEP,
      ZENGLOBL,
      ZENSYST,
      ZENRESV
    Address ISPEXEC,
      "TBSKIP ENQTBL"
    ispexec_rc = rc
  End
  Address ISPEXEC,
    "TBEND ENQTBL"
  ispexec_rc = rc
  return return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
__DATA__
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
