/* rexx */
Rexx_SHOWDSCB:
  rexxpgm_version = "01.02"           /* ver lev */

  NUMERIC DIGITS 10   /* Handles Gigabyte */

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This code drives Initialization, Process, and Termination routines.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Main_Routine:
  return_code = Initialization_Routine()
  IF (return_code = 0) THEN DO
    return_code = Process_Routine()
  END
  return_code = Termination_Routine()
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================

 Dataset:  DEMO.REXX(SHOWDSCB)
 Author:   Kenneth Tomiak
 Contact:  "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
 Syntax:   %SHOWDSCB
 Purpose:  Shows DSCB type of information for ddname SHOWDSCB.

-----------------------------------------------------------------------

 History of Modifications
 ------------------------
vv.mm WHEN     Who / What you did ... (Newest change at the top.)
----- -------- --------------------------------------------------------
01.02 20180527 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Modified LISTVTOC to use just_dsn.
               2) Renamed linkmvs_rc to invoked program name.
               3) Added SELECT for iehlist_rc.
               4) Show used space after requested and include extents.
               5) If SYSDSORG is PO SYSRECFM is U then LISTPDS FORMAT
                  else LISTPDS DUMP.
----- -------- --------------------------------------------------------
01.01 20180526 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) LINKMVS to IEHLIST to format the VTOC DSCB entry.
               2) Added Ctlblk_Jobspecs processing.
----- -------- --------------------------------------------------------
01.00 20180521 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Original code copied from CSRDSN.
----- -------- --------------------------------------------------------

-----------------------------------------------------------------------

STANDARD GLOBAL DISCLAIMER
--------------------------
The author explicitly disavows any claim whatsoever about the
correctness or functionality of this program, and disclaims liability
for anything and everything bad that might happen in connection with,
before, during, or after using it. I have tried to make it work right,
and I am personally pretty confident that it does, but everybody makes
mistakes, so if you use it, you do so at your own risk.

=======================================================================

=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine initializes constants and variables.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Initialization_Routine:
  return_code = 0
  PARSE SOURCE ,
    source_host_env ,
    source_call_type ,
    source_uc_exec_name ,
    source_hostdd ,
    source_hostdsn ,
    source_nf_exec_name ,
    source_initial_cmd_env ,
    source_asid_name ,
    source_char8_user_token ,
    source_hostother
  job_specs = Ctlblk_Jobspecs()
  SAY ""
  SAY COPIES("=",79)
  SAY LEFT("=" jobspecs_jobname ,
    jobspecs_ssibjbid jobspecs_stepname ,
    jobspecs_procname,77) "="
  SAY LEFT("=" source_uc_exec_name rexxpgm_version,77) "="
  SAY LEFT("= executing under" source_host_env,77) "="
  SAY LEFT("= as a" source_call_type,77) "="
  SAY LEFT("= on" DATE() "at" TIME()".",77) "="
  SAY COPIES("=",79)
  SAY ""

  allcblk = Retrieve_Allocations()
  function_rc = Parse_Allcblk()

  my_ddname = "SHOWDSCB"
  found_dd = tiotddnm.my_ddname
  IF (found_dd = "") THEN DO
    SAY "//SHOWDSCB is not included in the STEP's JCL."
    return_code = 16
    RETURN return_code
  END

  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine does the processing.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_Routine:
  found_dsns = dd_dsname.my_ddname.0
  DO ds_x = 1 TO found_dsns
    PARSE VAR dd_dsname.my_ddname.ds_x just_dsn "(" just_mbr ")"
    aposted_dsn = "'"just_dsn"'"
    SAY RIGHT(ds_x,4,"0") "DSN="aposted_dsn
    function_rc = Gather_Listdsi()
    function_rc = Gather_Iehlist()
    SELECT
      WHEN ((SYSDSORG = "PO") & (just_mbr <> "")) THEN DO
        aposted_dsnmbr = "'"dd_dsname.my_ddname.ds_x"'"
        "ALLOC FILE(TMP) DATASET("aposted_dsnmbr") SHR REUSE"
        "EXECIO * DISKR TMP (STEM tmp_record. FINIS)"
        SAY "Read" tmp_record.0 "record(s)."
        DROP tmp_record.
        "FREE FILE(TMP)"
      END
      WHEN ((SYSDSORG = "PO") & (just_mbr = "")) THEN DO
        SAY "Unable to read a PDS without a member name."
      END
      WHEN (SYSDSORG = "PS") THEN DO
        "ALLOC FILE(TMP) DATASET("aposted_dsn") SHR REUSE"
        "EXECIO * DISKR TMP (STEM tmp_record. FINIS)"
        SAY "Read" tmp_record.0 "record(s)."
        DROP tmp_record.
        "FREE FILE(TMP)"
      END
    END
  END
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine does cleanup before exiting.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Termination_Routine:
  msg_rc = Msg("OFF")
  "FREE FILE(SYSIN)"
  "FREE FILE(SYSPRINT)"
  msg_rc = Msg("ON")
  SAY ""
  SAY COPIES("=",79)
  SAY LEFT("= RC=" return_code,77) "="
  SAY COPIES("=",79)
  SAY ""
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Start showing the DSCB type of information for one data set.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Gather_Listdsi:
  listdsi_rc = LISTDSI(aposted_dsn "DIRECTORY SMSINFO")
  SELECT
    WHEN (listdsi_rc = 0) THEN DO
      NOP
    END
    WHEN ((listdsi_rc = 16) & (SYSREASON = 5)) THEN DO
      listcat.0 = 1
      listcat.1 = "  LISTCAT ENTRY("aposted_dsn") GDG ALL"
      listcat_rc = Linkmvs_Idcams()
      "FREE FILE(SYSPRINT)"
      IF (listcat_rc = 0) THEN DO
          DO nx = 1 TO nonvsam.0
          aposted_dsn = "'"nonvsam.nx"'"
          SAY RIGHT(ds_x,4,"0") || "-" || RIGHT(nx,4,"0") ,
            "DSN="aposted_dsn
          function_rc = Gather_Listdsi()
        END
      END
    END
    WHEN (listdsi_rc > 4) THEN DO
      SAY "LISTDSI error"
      SAY ,
        LEFT("LISTDSI reports back with RC("listdsi_rc"). ",76," ")
      SAY LEFT("REASON("SYSREASON")",76," ")
      SAY LEFT("DSN: "aposted_dsn".",76," ")
      temp_msg2 = SYSMSGLVL2
      short_msg = ""
      DO WHILE (temp_msg2 <> "")
        PARSE VAR temp_msg2 one_word " " temp_msg2
        IF (LENGTH(short_msg one_word) > 75) THEN DO
          SAY short_msg || " "
          short_msg = one_word || hex_A1
        END
        ELSE DO
          short_msg = short_msg || one_word || hex_A1
        END
      END
      IF (short_msg <> "") THEN DO
        SAY short_msg
      END
      SAY ZERRSM
      SAY ZERRLM
      return_code = 12
      RETURN return_code
    END
    WHEN ((listdsi_rc = 4) & (SYSREASON = 12)) THEN DO
      NOP /* sysdsorg=VS is handled below. */
    END
    WHEN ((listdsi_rc = 4) & (SYSREASON = 30)) THEN DO
      NOP /* SMSINFO requested, but not SMS managed. */
    END
    OTHERWISE DO
      SAY "NOT CATLG"
      SAY "LISTDSI" aposted_dsn ,
        "RC("listdsi_rc") REASON("SYSREASON")."
      temp_msg2 = SYSMSGLVL2
      short_msg = ""
      DO WHILE (temp_msg2 <> "")
        PARSE VAR temp_msg2 one_word " " temp_msg2
        IF (LENGTH(short_msg one_word) > 75) THEN DO
          SAY short_msg || " "
          short_msg = one_word || hex_A1
        END
        ELSE DO
          short_msg = short_msg || one_word || hex_A1
        END
      END
      IF (short_msg <> "") THEN DO
        SAY short_msg
      END
      SAY ZERRSM
      SAY ZERRLM
      return_code = 12
      RETURN return_code
    END
  END

  IF (SYSMGMTCLASS <> "") THEN DO
    infotext = "//*           MGMTCLASS="SYSMGMTCLASS
    SAY infotext
  END
  IF (SYSDATACLASS <> "") THEN DO
    infotext = "//*           DATACLASS="SYSDATACLASS
    SAY infotext
  END
  IF (SYSSTORCLASS <> "") THEN DO
    infotext = "//*           STORCLASS="SYSSTORCLASS
    SAY infotext
  END
  infotext = "//*           BLKS/TRK="SYSBLKSTRK
  SAY infotext
  infotext = "//*          " ,
    "DCB=(DSORG="SYSDSORG",RECFM="SYSRECFM","||,
    "BLKSIZE="SYSBLKSIZE",LRECL="SYSLRECL")"
  SAY infotext
  infotext = "//*          " ,
    "SPACE=("SYSUNITS",("SYSPRIMARY","SYSSECONDS","SYSADIRBLK"))"
  SAY infotext
  infotext = "//*          " ,
    "USED=("SYSUNITS",("SYSALLOC",,"SYSUDIRBLK")) taking" ,
    SYSEXTENTS "extent(s)"
  SAY infotext
  infotext = "//*           UNIT="SYSUNIT",VOL=SER="SYSVOLUME
  SAY infotext
  listcat.0 = 1
  listcat.1 = "  LISTCAT ENTRY("aposted_dsn") ALL"
  listcat_rc = Linkmvs_Idcams()
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Now format the DSCB found in the VTOC.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Gather_Iehlist:
  "ALLOC FILE(SYSIN) NEW DELETE REUSE" ,
    "UNIT(SYSDA) TRACKS SPACE(1,0)" ,
    "DSORG(PS) RECFM(F) BLKSIZE(0) LRECL(80)"
  sysin_rc = RC
  IF (sysin_rc <> 0) THEN DO
    SAY "IEHLIST alloc of SYSIN failed, RC("sysin_rc")."
    return_code = 12
    RETURN return_code
  END
  SAY ""
  SAY "IEHLIST input:"
  SAY "--------------"
  iehlist.0 = 1
  SELECT
    WHEN (SYSDSORG = "PO") THEN DO
      iehlist.0 = 2
      iehlist.1 = ,
        " LISTVTOC   FORMAT,VOL="SYSUNIT"="SYSVOLUME",DSNAME=" || ,
        just_dsn
      IF (SYSRECFM = "U") THEN DO
        iehlist.2 = ,
          " LISTPDS    FORMAT,VOL="SYSUNIT"="SYSVOLUME",DSNAME=" || ,
          just_dsn
      END
      ELSE DO
        iehlist.2 = ,
          " LISTPDS    DUMP,VOL="SYSUNIT"="SYSVOLUME",DSNAME=" || ,
          just_dsn
      END
    END
    OTHERWISE DO
      iehlist.1 = ,
        " LISTVTOC   FORMAT,VOL="SYSUNIT"="SYSVOLUME",DSNAME=" || ,
        just_dsn
    END
  END
  DO iehlist_x = 1 TO iehlist.0
    SAY iehlist.iehlist_x
  END
  ADDRESS MVS "EXECIO * DISKW SYSIN (STEM iehlist. FINIS)"
  execio_rc = RC
  IF (execio_rc <> 0) THEN DO
    SAY "EXECIO failure"
    SAY "EXECIO DISKW error," execio_rc
    "FREE FILE(SYSIN)"
    "FREE FILE(SYSPRINT)"
    return_code = 12
    RETURN return_code
  END
  "ALLOC FILE(SYSPRINT) NEW DELETE REUSE" ,
    "UNIT(SYSDA) TRACKS SPACE(2,5)" ,
    "DSORG(PS) RECFM(F B) BLKSIZE(0) LRECL(121)"
  sysprint_rc = RC
  IF (sysprint_rc <> 0) THEN DO
    SAY "IEHLIST alloc of SYSPRINT failed, RC("sysprint_rc")."
    "FREE FILE(SYSIN)"
    return_code = 12
    RETURN return_code
  END

  ADDRESS LINKMVS "IEHLIST"
  iehlist_rc = RC
  SELECT
    WHEN (iehlist_rc = 0) THEN DO
      /* 00 (X'00')
         Successful completion.
      */
      SAY "IEHLIST output:"
      SAY "---------------"
      ADDRESS MVS "EXECIO * DISKR SYSPRINT (STEM iehlist. FINIS)"
      execio_rc = RC
      SAY iehlist.0 "record(s) in //SYSPRINT."
      IF (execio_rc <> 0) THEN DO
        SAY "EXECIO failure"
        SAY "EXECIO DISKR error," execio_rc
        "FREE FILE(SYSIN)"
        "FREE FILE(SYSPRINT)"
        return_code = 12
        RETURN return_code
      END
      DO iehlist_ix = 1 to iehlist.0
        SAY SUBSTR(iehlist.iehlist_ix,2)
      END
    END
    WHEN (iehlist_rc = 8) THEN DO
      /* 08 (X'08')
         An error condition caused a specified request to be ignored.
         Processing continues.
      */
      SAY "LINKMVS with IEHLIST was not happy, RC("iehlist_rc")."
      ADDRESS MVS "EXECIO * DISKR SYSPRINT (STEM iehlist. FINIS)"
      execio_rc = RC
      IF (execio_rc <> 0) THEN DO
        SAY "EXECIO failure"
        SAY "EXECIO DISKW error," execio_rc
        "FREE FILE(SYSIN)"
        "FREE FILE(SYSPRINT)"
        return_code = 12
        RETURN return_code
      END
    END
    WHEN (iehlist_rc = 12) THEN DO
      /* 12 (X'0C')
         A permanent input/output error occurred. The job is ended.
      */
      SAY "LINKMVS with IEHLIST was not happy, RC("iehlist_rc")."
      ADDRESS MVS "EXECIO * DISKR SYSPRINT (STEM iehlist. FINIS)"
      execio_rc = RC
      IF (execio_rc <> 0) THEN DO
        SAY "EXECIO failure"
        SAY "EXECIO DISKW error," execio_rc
        "FREE FILE(SYSIN)"
        "FREE FILE(SYSPRINT)"
        return_code = 12
        RETURN return_code
      END
    END
    WHEN (iehlist_rc = 16) THEN DO
      /* 16 (X'10')
         An unrecoverable error occurred while reading the data set.
         The job is ended.
      */
      SAY "LINKMVS with IEHLIST was not happy, RC("iehlist_rc")."
      ADDRESS MVS "EXECIO * DISKR SYSPRINT (STEM iehlist. FINIS)"
      execio_rc = RC
      IF (execio_rc <> 0) THEN DO
        SAY "EXECIO failure"
        SAY "EXECIO DISKW error," execio_rc
        "FREE FILE(SYSIN)"
        "FREE FILE(SYSPRINT)"
        return_code = 12
        RETURN return_code
      END
    END
    OTHERWISE DO
      SAY "LINKMVS with IEHLIST was not happy, RC("iehlist_rc")."
    END
  END
  "FREE FILE(SYSIN)"
  "FREE FILE(SYSPRINT)"
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 This routine executes IDCAMS to check LIFO/FIFO stats and get GDS.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Linkmvs_Idcams:
  "ALLOC FILE(SYSIN) NEW DELETE REUSE" ,
    "UNIT(SYSDA) TRACKS SPACE(1,0)" ,
    "DSORG(PS) RECFM(F B) BLKSIZE(0) LRECL(80)"
  "ALLOC FILE(SYSPRINT) NEW DELETE REUSE" ,
    "UNIT(SYSDA) TRACKS SPACE(2,2)" ,
    "DSORG(PS) RECFM(V B A) BLKSIZE(0) LRECL(125)"
  ADDRESS MVS "EXECIO * DISKW SYSIN (STEM listcat. FINIS)"
  execio_rc = RC
  IF (execio_rc <> 0) THEN DO
    SAY "EXECIO failure"
    SAY "EXECIO DISKW error," execio_rc
    return_code = 12
    RETURN return_code
  END
  ADDRESS LINKMVS "IDCAMS"
  idcams_rc = RC
  "FREE FILE(SYSIN)"
  IF (idcams_rc = 0) THEN DO
    ADDRESS MVS "EXECIO * DISKR SYSPRINT (STEM listcat. FINIS)"
    lifofifo = ""
    nonvsam. = ""
    nonvsam.0 = 0
    gdg_limit = 0
    DO lx = 1 TO listcat.0
      IF (POS(" LIMIT---",listcat.lx) > 0) THEN DO
        PARSE VAR listcat.lx . "LIMIT------------------" gdg_limit ,
          " " .
      END
      IF (POS(" NONVSAM--",listcat.lx) > 0) THEN DO
        tmp_ctr = nonvsam.0 + 1
        PARSE VAR listcat.lx . "--" nonvsam_tmp " " .
        nonvsam.tmp_ctr = nonvsam_tmp
        nonvsam.0 = tmp_ctr
      END
      IF (POS(" LIFO",listcat.lx) > 0) THEN DO
        lifofifo = "LIFO"
      END
      IF (POS(" FIFO",listcat.lx) > 0) THEN DO
        lifofifo = "FIFO"
      END
    END
  END
  ELSE DO
    SAY "LISTCAT failed"
    SAY "LISTCAT ENTRY("aposted_dsn")" ,
      "RC("idcams_rc")."
    SAY ZERRSM
    SAY ZERRLM
    return_code = 12
    RETURN return_code
  END
  RETURN 0

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 Chase control blocks and build a STEM of DDnames and DSnames.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Retrieve_Allocations:
  psatold = STORAGE(21C,4)                       /* POINTER TO TCB  */
  ptr2tiot = STORAGE(D2X(C2D(psatold)+12),4)     /* POINTER TO TIOT */
  tiotptr = D2C(C2D(ptr2tiot)+24)                /* TIOT pointer    */
  tiotelen = C2D(STORAGE(D2X(C2D(tiotptr)+0),1))
  dd_names = 0
  DO WHILE (tiotelen > 0)
    tiotflag = C2D(STORAGE(D2X(C2D(tiotptr)+1),1))
    tiotddnm = SPACE(STORAGE(D2X(C2D(tiotptr)+4),8))
    IF (BITAND(tiotflag,'80'X) = '80'X) THEN DO /* active ddname   */
      IF (tiotddnm = COPIES("00"x,8)) THEN DO
        LEAVE
      END
      IF (tiotddnm <> "      ") THEN DO
        dd_name = STRIP(tiotddnm,"B"," ")
        dd_names = dd_names + 1
        dd_name.dd_names = dd_name
        dd_nnbr.tiotddnm = dd_names
        dsname.dd_names.0 = 0
      END
      tioejfcb = STORAGE(D2X(C2D(tiotptr)+12),3)
      jfcb = Swareq22(tioejfcb)
      IF (jfcb > 0) THEN DO
        jfcbdsn = STRIP(STORAGE(D2X(jfcb+000),44),"B"," ")
        jfcbelnm = STRIP(STORAGE(D2X(jfcb+044),8),"B"," ")
        IF (jfcbelnm <> "") THEN DO
          fullname = jfcbdsn"("jfcbelnm")"
        END
        ELSE DO
          fullname = jfcbdsn
        END
        ds_temp = dsname.dd_names.0 + 1
        dsname.dd_names.0 = ds_temp
        dsname.dd_names.ds_temp = fullname
      END
      ELSE DO
        SAY "Oh my gosh, SWAREQ and BATCH do not mix."
        LEAVE
      END
    END
    tiotptr = D2C(C2D(tiotptr)+tiotelen)
    tiotelen = C2D(STORAGE(D2X(C2D(tiotptr)+0),1))
  END
  RETURN dd_names

/* --------------------------------------------------------------------
   Handle SWA above or below the bar.
   Fix from Don Poitras to adjust to z/OS 2.2 putting
   a control block above the 64-bit bar.

     https://groups.google.com/forum/#!
     msg/bit.listserv.ibm-main/E-fMschhS2M/Na4x_Vc9BgAJ

     Comes out of
     http://www.cbttape.org/ftp/cbt/CBT183.zip

-------------------------------------------------------------------- */
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 Convert an ADDRESS in SWA format to usable location
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Swareq22: PROCEDURE
  NUMERIC DIGITS 16                   /* Handles Petabyte addressing */
  sva = C2D(ARG(1))                         /* convert to decimal   */
  tcb = C2D(STORAGE(21C,4))                 /* TCB         psatold  */
  jscb = C2D(STORAGE(D2X(tcb+180),4))       /* JSCB        TCBJSCB  */
  qmpl = C2D(STORAGE(D2X(jscb+244),4))      /* QMPL        JSCBQMPI */
  /* See if qmat can be above the bar */
  qmsta = C2X(STORAGE(D2X(qmpl+16),1))     /* JOB STATUS BYTE      */
  IF (SUBSTR(Hex_To_Bit(qmsta),6,1)) THEN DO /* QMQMAT64 bit on   */
    IF (RIGHT(Hex_To_Bit(C2X(ARG(1))),1) <> "1") THEN DO /* BELOW  */
      RETURN C2D(ARG(1)) + 16             /* yes, RETURN sva+16   */
    END
    qmat = C2D(STORAGE(D2X(qmpl+10),2))*(2**48) +, /* QMAT+0 QMADD01 */
         C2D(STORAGE(D2X(qmpl+18),2))*(2**32) + ,  /* QMAT+2 QMADD23 */
         C2D(STORAGE(D2X(qmpl+24),4))              /* QMAT+4 QMADD */
    RETURN C2D(STORAGE(D2X(qmat+(sva*12)+64),4))+16
  END
  ELSE DO /* NO, QMAT IS BTB      */
    IF (RIGHT(C2X(ARG(1)),1) <> "F") THEN DO /* SWA=BELOW ?          */
      RETURN C2D(ARG(1))+16                 /* yes, RETURN sva+16   */
    END
    qmat = C2D(STORAGE(D2X(qmpl+24),4))     /* QMAT        QMADD    */
    DO WHILE (sva > 65536)
      qmat = C2D(STORAGE(D2X(qmat+12),4))   /* next QMAT   QMAT+12  */
      sva = sva - 65536                     /* 010006F -> 000006F   */
    END
    RETURN C2D(STORAGE(D2X(qmat+sva+1),4))+16
  END
  RETURN "ERROR, SHOULD NOT REACH HERE!"

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 Convert a hexadecimal VALUE to its bitstring value.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Hex_To_Bit:
  IF (bits.F <> "1111") THEN DO
    bits.0="0000"; bits.1="0001"; bits.2="0010"; bits.3="0011"
    bits.4="0100"; bits.5="0101"; bits.6="0110"; bits.7="0111"
    bits.8="1000"; bits.9="1001"; bits.A="1010"; bits.B="1011"
    bits.C="1100"; bits.D="1101"; bits.E="1110"; bits.F="1111"
  END
  hexchr = ARG(1)
  bit_str = ''
  DO ix = 1 TO LENGTH(hexchr)
    str = SUBSTR(hexchr,ix,1)
    bit_str = bit_str||bits.str
  END
  RETURN bit_str

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 Parse the stream of ddname information.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
/* #dds;dd#;ddname;#dsn;dsn#;dsname;...                              */
Parse_Allcblk:
  allofit = allcblk
  tiotddnm. = ""
  tiotddnm.0 = DD#
  erc = dd_names
  DO dd# = 1 TO dd_names
    dn = dd_name.dd#
    tiotddnm.dn = dd#
    nd = dsname.dd#.0
    erc = erc";"dd#";"dn";"nd
    dd_dsname.dn.0 = nd
    DO ds# = 1 TO nd
      dd_dsname.dn.ds# = dsname.dd#.ds#
    END
  END
  RETURN 0

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 Follow control blocks to identify jobname, type, and JES number.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Ctlblk_Jobspecs:
  ptr2psa = 0
  cvtptr = STORAGE(D2X(ptr2psa + 16),4)
  cvtsmca = STORAGE(D2X(C2D(cvtptr)+197),3)
  smfid = STORAGE(D2X(C2D(cvtsmca)+16),4)
  psatold = STORAGE(21C,4)
  ptr2tiot = STORAGE(D2X(C2D(psatold)+12),4)
  jobspecs_jobname = STORAGE(D2X(C2D(ptr2tiot)),8)
  jobspecs_stepname = STORAGE(D2X(C2D(ptr2tiot)+8),8)
  jobspecs_procname = STORAGE(D2X(C2D(ptr2tiot)+16),8)
  tcbjscbb = STORAGE(D2X(C2D(psatold)+181),3)
  jscbssib = STORAGE(D2X(C2D(tcbjscbb)+316),4)
  jobspecs_ssibjbid = STORAGE(D2X(C2D(jscbssib)+12),8)
  RETURN jobspecs_jobname jobspecs_ssibjbid ,
    jobspecs_stepname jobspecs_procname

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
End of code.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
