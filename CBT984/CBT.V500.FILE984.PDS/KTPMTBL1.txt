/* rexx */
Rexx_KTPMTBL1:
  rexxpgm_version = "01.02"           /* ver lev */

  ADDRESS ISPEXEC "CONTROL ERRORS Return"

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This code drives Initialization, Process, and Termination routines.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Main_Routine:
  return_code = Initialization_Routine()
  IF (return_code = 0) THEN DO
    return_code = Process_Routine()
  END
  return_code = Termination_Routine()
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

  Dataset:  KTPM.REXX(KTPMTBL1)
  Contact:  "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
  Overview: Kenneth Tomiak Programming Method (KTPM) collection.
            This is an ISPF dialog driver program. It will display a
            panel and process requests until the user exits.

            A demonstration sample of TBDISPL with point and shoot
            fields to sort the table based on a column heading.
  Syntax:   %ktpmtbl1

=======================================================================

 History of Modifications
 ------------------------
vv.mm WHEN     Who / What you did ... (Newest change at the top.)
----- -------- --------------------------------------------------------
01.02 20180630 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Kenneth Tomiak Programming Method (KTPM) collection.
----- -------- --------------------------------------------------------
01.01 20180505 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
         -     1) Stylize using Edit Macro @putktm:
      20180425    Programming Using The Kenneth Tomiak Method.
               2) Updated Ctlblk_Jobspecs.
               3) Stylize using:
                  Programming Using The Kenneth Tomiak Method.
                 a) Added the STANDARD GLOBAL DISCLAIMER.
                 b) Parentheses on WHEN.
                 c) Parentheses on IF.
                 d) ELSE.
                 e) return in comment.
               4) Changed amt to ZSCR to match the panel.
               5) Stylize using Edit Macro @putktm:
                  Programming Using The Kenneth Tomiak Method.
               6) Stylize using Edit Macro @putktm:
                  Programming Using The Kenneth Tomiak Method.
----- -------- --------------------------------------------------------
01.00 20170321 "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Original code.
----- -------- --------------------------------------------------------

-----------------------------------------------------------------------

STANDARD GLOBAL DISCLAIMER
--------------------------
The author explicitly disavows any claim whatsoever about the
correctness or functionality of this program, and disclaims liability
for anything and everything bad that might happen in connection with,
before, during, or after using it. I have tried to make it work right,
and I am personally pretty confident that it does, but everybody makes
mistakes, so if you use it, you do so at your own risk.

=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine initializes constants and variables.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Initialization_Routine:
  return_code = 0
  PARSE VERSION,
    version_rexx_name,
    version_rexx_version,
    version_rexx_date
  PARSE SOURCE,
    source_host_env,
    source_call_type,
    source_uc_exec_name,
    source_hostdd,
    source_hostdsn,
    source_nf_exec_name,
    source_initial_cmd_env,
    source_asid_name,
    source_char8_user_token,
    source_hostother

  MAKEBUF

  sysvar_sysuid = SYSVAR("SYSUID")
  sysvar_sysenv = SYSVAR("SYSENV")
  sysvar_sysispf = SYSVAR("SYSISPF")
  tsopfx = SYSVAR("SYSPREF")
  job_specs = Ctlblk_Jobspecs()
  SAY ""
  SAY COPIES("=",79)
  SAY LEFT("=" jobspecs_jobname ,
    jobspecs_ssibjbid jobspecs_stepname ,
    jobspecs_procname,77) "="
  SAY LEFT("=" source_uc_exec_name rexxpgm_version,77) "="
  SAY LEFT("= executing under" source_host_env,77) "="
  SAY LEFT("= as a" source_call_type,77) "="
  SAY LEFT("= on" DATE() "at" TIME()".",77) "="
  SAY COPIES("=",79)
  SAY ""

  IF (sysvar_sysispf <> "ACTIVE") THEN DO
    SAY "This requires you run under ISPF."
    return_code = 28
    RETURN return_code
  END

  ZERRALRM = "Yes"
  ZERRHM = "KTPMTUTR"
  ZERRSM = ""
  ZERRLM = ""

  ADDRESS ISPEXEC "LIBDEF ISPPLIB DATASET",
    "ID(KTPM.PANELS) STACK"
  ispexec_rc = RC
  IF (ispexec_rc <> 0) THEN DO
                /*  4  - Application library does not exist for   */
                /*       this type if a delete requested.         */
                /*  8  - Application already exists for this type */
                /*       IF COND specified.                       */
                /* 12  - ISPPROF was specified as the lib-type or */
                /*       EXCLDATA or EXCLLIBR was specified with  */
                /*       lib-type other than ISPXLIB or ISPLLIB.  */
                /* 16  - A libname was not allocated or the       */
                /*       dataset-list is incomplete.              */
                /* 20 -  Severe error.                            */
    SAY "LIBDEF of ISPPLIB failed, rc="ispexec_rc
    SAY "SO bail out now!"
    return_code = ispexec_rc
    RETURN return_code
  END

  ADDRESS ISPEXEC "TBCLOSE KTPMTBL1"
  ADDRESS ISPEXEC "TBCREATE KTPMTBL1" ,
    "KEYS(ktpmcol1)" ,
    "NAMES(ZSEL, ktpmcol2, ktpmcol3, ktpmcol4)" ,
    "REPLACE SHARE NoWRITE"
  tbcreate_rc = RC
                /*  4 - Duplicate table exists but   */
                /*      "replace" specified          */
                /*  8 - Table already exists;        */
                /*      "replace" not specified      */
                /* 12 - Table in use; enq failed     */
                /* 16 - Table input library not      */
                /*      allocated with "write"       */
                /* 20 - Severe ERROR                 */
  IF (tbcreate_rc > 4) THEN DO
    SAY "TBCREATE failure:" tbcreate_rc
    return_code = 44
    RETURN return_code
  END
  ELSE DO
    ZSEL = ""
    ktpmcol1 = "1st row"
    ktpmcol2 = "Alive"
    ktpmcol3 = "Humanoid"
    ktpmcol4 = "Something resembling people of the planet Earth" ,
      "in the Milky Way."
    ADDRESS ISPEXEC "TBADD KTPMTBL1"
    tbadd_rc = RC
              /*  4 - Number of rows parameter   */
              /*      was specified but storage  */
              /*      was only obtained for a    */
              /*      single row                 */
              /*  8 - Key tables: a row with the */
              /*      same key already exists;   */
              /*      crp set to top             */
              /* 12 - Table is not OPEN          */
              /* 20 - Severe ERROR               */
    random_seed = RANDOM()
    DO tbadd_ctr = 2 TO 50
      ADDRESS ISPEXEC "TBCLEAR KTPMTBL1"
      ktpmcol1 = tbadd_ctr "Row"
      random_seed = RANDOM(1,50)
      ktpmcol2 = "Alt" random_seed
      ktpmcol3 = "Column"
      ktpmcol4 = "  Filler  " tbadd_ctr
      ADDRESS ISPEXEC "TBADD KTPMTBL1"
    END tbadd_ctr
    tb_field = 1
    tb_order. = "A"
    ADDRESS ISPEXEC "TBSORT KTPMTBL1" ,
      "FIELDS(ktpmcol"tb_field",C,"tb_order.tb_field")"
    ADDRESS ISPEXEC "TBTOP KTPMTBL1"
    return_code = 0
  END
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine does the processing.
 The panel is displayed and the user's choices acted upon.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_Routine:
  ktpmhdr1 = "Nickname"
  ktpmhdr2 = "MBRSTAT"
  IF (sysvar_sysuid = "KTOMIAK") THEN DO
    ZSCR = "HALF"
  END
  ELSE DO
    ZSCR = "PAGE"
  END
  orig_ZSCR = ZSCR
  DO WHILE (return_code = 0)
    msg_rc = 0
    ADDRESS ISPEXEC "TBDISPL KTPMTBL1 PANEL(KTPMTBL1)"
    /* MSG('msg-id') CURSOR('field'),
       CSRROW('row#') CSRPOS('pos#') AUTOSEL(YES),
       POSITION('crpname') ROWID('rowidname') MSGLOC('msgfield')'
      msg-id     - Optional, message to be displayed on the panel.
      field      - Optional, identifies the column in which the
                   cursor is to be placed.
      row#       - Optional, table row number of the screen line
                   where the cursor is to be placed.
      pos#       - Optional, position in field to place cursor.
                   The default is 1.
      AUTOSEL    - Optional, choose one.
        YES      - Default, always return contents of row.
        NO       - Return contents of row only if modified.
      crpname    - Optional, the name of a variable in which the row
                   number pointed to by the crp is to be stored.
      rowidnam   - Optional, the name of a variable in which a number
                   that uniquely identifies the row being accessed is to
                   be stored.
      msgfield   - Optional, name of the field relative to which the
                   message pop-up is positioned.
    */
    tbdispl_rc = RC
                  /* 4  - The enter key or scroll      */
                  /*      command used; additional data*/
                  /*      remains to be stored         */
                  /* 8  - The end or return command was*/
                  /*      entered.  IF crp at top, no  */
                  /*      lines modified               */
                  /*    - Panel was generated from tags*/
                  /*      and the EXIT command was     */
                  /*      entered                      */
                  /* 12 - Panel or message not found or*/
                  /*      table not OPEN               */
                  /* 20 - Severe ERROR                 */
    SELECT
      WHEN (tbdispl_rc < 5) THEN DO
        Zcmd_Handler_rc = Zcmd_Handler()
        Zsel_Handler_rc = Zsel_Handler()
      END
      WHEN (tbdispl_rc = 8) THEN DO
        ZERRSM = "Okay."
        ZERRLM = "You asked to leave."
        ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
        return_code = 30
      END
      WHEN (tbdispl_rc > 0) THEN DO
        SAY "return_code > 0"
        SAY "DEBUGGING NEEDED ON KTPMTBL1:" return_code
        return_code = 32
      END
      OTHERWISE DO
        SAY zcmd
      END
    END
  END
  IF (return_code = 30) THEN DO
    return_code = 0
  END
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine does any pre-termination cleanup.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Termination_Routine:
  ADDRESS ISPEXEC "LIBDEF ISPPLIB"
  IF (return_code > 0) THEN DO
    IF (sysvar_sysispf = "ACTIVE") THEN DO
      IF (msg_rc = 1) THEN DO
        IF (ZERRSM = "") THEN DO
          ZERRSM = "An unhappy ending"
          ZERRLM = "Some unhappy turn of events is sending back",
            "a return code higher than 0 with no message."
        END
        ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
      END
    END
    ELSE DO
      SAY COPIES("*",77)
      SAY LEFT("* FINAL RC=" return_code,77) " *"
      SAY COPIES("*",77)
    END
  END
  DROPBUF
  RETURN return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 Follow control blocks to identify jobname, type, and JES number.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Ctlblk_Jobspecs:
  ptr2psa = 0
  cvtptr = STORAGE(D2X(ptr2psa + 16),4)
  cvtsmca = STORAGE(D2X(C2D(cvtptr)+197),3)
  smfid = STORAGE(D2X(C2D(cvtsmca)+16),4)
  psatold = STORAGE(21C,4)
  ptr2tiot = STORAGE(D2X(C2D(psatold)+12),4)
  jobspecs_jobname = STORAGE(D2X(C2D(ptr2tiot)),8)
  jobspecs_stepname = STORAGE(D2X(C2D(ptr2tiot)+8),8)
  jobspecs_procname = STORAGE(D2X(C2D(ptr2tiot)+16),8)
  tcbjscbb = STORAGE(D2X(C2D(psatold)+181),3)
  jscbssib = STORAGE(D2X(C2D(tcbjscbb)+316),4)
  jobspecs_ssibjbid = STORAGE(D2X(C2D(jscbssib)+12),8)
  RETURN jobspecs_jobname jobspecs_ssibjbid ,
    jobspecs_stepname jobspecs_procname

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Follow MVS control blocks to discover what RACF groups they are in.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Rexx_Saf:
  psaold = STORAGE(D2X(548),4)             /* Pointer to curr ASCB */
  ascbasxb = STORAGE(D2X(C2D(psaold)+108),4)     /* Get ASXB ADDRESS */
  asxbsenv = STORAGE(D2X(C2D(ascbasxb)+200),4)   /* Get ACEE ADDRESS */
  aceefcgp = STORAGE(D2X(C2D(asxbsenv)+116),4)     /* get group list */
  cgrplen = C2D(STORAGE(D2X(C2D(aceefcgp)+5),3))     /* list length */
  cgrp = STORAGE(D2X(C2D(aceefcgp)+32),(cgrplen-32))   /* groups */
  saf_groups = ""
  DO loop = 1 TO cgrplen BY 24                   /* loop thru groups */
    saf_groups = saf_groups";"STRIP(SUBSTR(cgrp,loop,8))   /* append */
  END                                        /* end loop thru groups */
  RETURN 0
  SAY "List-of-Groups="saf_groups

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Follow MVS control blocks to discover what machine they are on.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Rexx_Hardware:
  ptr2psa = 0                                     /* Pointer to PSA */
  cvtptr = STORAGE(D2X(ptr2psa + 16),4)          /* Pointer to cvt */
  cvt = BITAND(cvtptr,'7FFFFFFF'X)       /* Flip high order bit */
  csdptr = STORAGE(D2X(C2D(cvt)+X2D("294")),4)   /* Pointer to CSD */
  csd = BITAND(csdptr,'7FFFFFFF'X)       /* Flip high order bit */
  hardware_CPUENG = C2D(STORAGE(D2X(C2D(csd)+10),2))
  pccaavt = STORAGE(D2X(C2D(cvt)+X2D("2FC")),4)
  pccaavt = BITAND(pccaavt,'7FFFFFFF'X)
  DO I = 0 TO 60 BY 4
    pcca = STORAGE(D2X(C2D(pccaavt)+I),4)
    pcca = BITAND(pcca,'7FFFFFFF'X)
    IF (pcca == '00000000'X) THEN DO
      ITERATE I
    END
    INFO = STORAGE(C2X(pcca),32)
    hardware_CPUID   = SUBSTR(INFO,7,1)
    hardware_CPUSN   = SUBSTR(INFO,8,5)
    hardware_CPUTYPE = SUBSTR(INFO,13,4)
  END
  RETURN 0
  SAY "Hardware="hardware_CPUENG
  SAY "        ="hardware_CPUID
  SAY "        ="hardware_CPUSN
  SAY "        ="hardware_CPUTYPE

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Follow MVS control blocks to discover what server (host) they are on.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Rexx_Server_Info:
  ptr2psa = 0                                     /* Pointer to PSA */
  cvtptr = STORAGE(D2X(ptr2psa + 16),4)          /* Pointer to cvt */
  ecvtptr = STORAGE(D2X(C2D(cvtptr)+140),4)      /* Pointer to ecvt */
  server_ecvtsplx = STORAGE(D2X(C2D(ecvtptr)+8),8)    /* SYSPLEXNAME */
  cvtsmca = STORAGE(D2X(C2D(cvtptr)+197),3)      /* Pointer to SMCA */
  server_smfid = STORAGE(D2X(C2D(cvtsmca)+16),4)   /* SMF Identifier */
  mvsvar_sysname = MVSVAR("SYSNAME")
  IF (server_smfid <> mvsvar_sysname) THEN DO
    SAY "Tricky Having Your System Name Different Than The SMF ID."
  END
  RETURN 0
  SAY "Server="server_ecvtsplx
  SAY "      ="server_smfid
  SAY "      ="mvsvar_sysname

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Follow MVS control blocks to discover what terminal they are on.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Rexx_Termid:
  ascbptr = STORAGE(224,4)
  asxbptr = STORAGE(D2X(C2D(ascbptr)+X2D('6c')),4)
  termptr = STORAGE(D2X(C2D(asxbptr)+X2D('c8')),4)
  asxb_termid = STORAGE(D2X(C2D(termptr)+40),8)
  the_termid = C2X(asxb_termid)
  SAY "Termid="the_termid
  RETURN 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 This is where the contents of the ZCMD variable are handled.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Zcmd_Handler:
  my_zcmd = ZCMD
  ZCMD = ""
  SELECT
    WHEN (To_Uppercase(LEFT(my_ZCMD,3)) = "CAN") THEN DO
      SAY "Cancelling"
      return_code = 32
    END
    WHEN (my_ZCMD = "") THEN DO
      IF (ZSCR <> orig_ZSCR) THEN DO
        SELECT
          WHEN (To_Uppercase(LEFT(ZSCR,1)) = "C") THEN DO
            ZSCR = "CSR"
          END
          WHEN (To_Uppercase(LEFT(ZSCR,1)) = "H") THEN DO
            ZSCR = "Half"
          END
          WHEN (To_Uppercase(LEFT(ZSCR,1)) = "P") THEN DO
            ZSCR = "Page"
          END
          OTHERWISE DO
            ZSCR = orig_ZSCR
          END
        END
        orig_ZSCR = ZSCR
      END
    END
    WHEN (To_Uppercase(my_ZCMD) = "TBLSORT-1") THEN DO
      function_rc = Table_Sort_Header1()
    END
    WHEN (To_Uppercase(my_ZCMD) = "TBLSORT-2") THEN DO
      function_rc = Table_Sort_Header2()
    END
    WHEN (To_Uppercase(my_ZCMD) = "X") THEN DO
      ZERRSM = "Okay"
      ZERRLM = "You used X to leave."
      ADDRESS ISPEXEC "VPUT (ZERRALRM ZERRHM ZERRSM ZERRLM)",
        "SHARED"
      ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
      return_code = -1
    END
    OTHERWISE DO
      SAY my_zcmd "is not yet something KTPM handles at this time."
      ZERRSM = "What?"
      ZERRLM = "Choose a valid option or feature."
      ADDRESS ISPEXEC "VPUT (ZERRALRM ZERRHM ZERRSM ZERRLM)",
        "SHARED"
      ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
    END  /* End of OTHERWISE */
  END  /* End of SELECT  */
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 This is where the contents of the ZSEL variable are handled.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Zsel_Handler:
  DO WHILE (ZTDSELS > 0)
    ZSEL = TRANSLATE(STRIP(ZSEL))
    SELECT
      WHEN (ZSEL = "V") THEN DO
         vdsn = STRIP(ktpmdsn,"B","'")
  /*     ADDRESS ISPEXEC "VIEW DATASET('"vdsn"("MBRNAME")')"  */
      END
      WHEN (ZSEL = "E") THEN DO
         vdsn = STRIP(ktpmdsn,"B","'")
  /*     ADDRESS ISPEXEC "EDIT DATASET('"vdsn"("MBRNAME")')"  */
      END
      WHEN (ZSEL = "R") THEN DO
      END
      WHEN (ZSEL = "M") THEN DO
      END
      WHEN (ZSEL = "C") THEN DO
      END
      OTHERWISE DO
        mbrstat = "?" ZSEL
      END
    END
    ZSEL = ""
    ADDRESS ISPEXEC "TBPUT KTPMTBL1"
    IF (ztdsels > 1) THEN DO
      ADDRESS ISPEXEC 'TBDISPL KTPMTBL1'
    END
    ELSE DO
      ZTDSELS = 0
    END
  END
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Sort the table on the first column.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Table_Sort_Header1:
  return_code = 0
  tb_field = 1
  IF (tb_order.tb_field = "A") THEN DO
    tb_order.tb_field = "D"
  END
  ELSE DO
    tb_order.tb_field = "A"
  END
  ADDRESS ISPEXEC "TBSORT KTPMTBL1" ,
    "FIELDS(ktpmcol"tb_field",C,"tb_order.tb_field")"
  tbsort_rc = RC
              /* 12 - Table is not OPEN       */
              /* 16 - Numeric convert ERROR   */
              /* 20 - Severe ERROR            */
  ADDRESS ISPEXEC "TBTOP KTPMTBL1"
              /* 12 - Table is not OPEN          */
              /* 20 - Severe ERROR               */
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Sort the table on the second column.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Table_Sort_Header2:
  return_code = 0
  tb_field = 2
  IF (tb_order.tb_field = "A") THEN DO
    tb_order.tb_field = "D"
  END
  ELSE DO
    tb_order.tb_field = "A"
  END
  ADDRESS ISPEXEC "TBSORT KTPMTBL1" ,
    "FIELDS(ktpmcol"tb_field",C,"tb_order.tb_field")"
  tbsort_rc = RC
              /* 12 - Table is not OPEN       */
              /* 16 - Numeric convert ERROR   */
              /* 20 - Severe ERROR            */
  ADDRESS ISPEXEC "TBTOP KTPMTBL1"
              /* 12 - Table is not OPEN          */
              /* 20 - Severe ERROR               */
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Convert string to lowercase.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
To_Lowercase: PARSE ARG myarg
  IF (lowercase_letters = "LOWERCASE_LETTERS") THEN DO
    lowercase_letters = "abcdefghijklmnopqrstuvwxyz"
  END
  IF (uppercase_letters = "UPPERCASE_LETTERS") THEN DO
    uppercase_letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  END
  RETURN TRANSLATE(myarg,lowercase_letters,uppercase_letters)

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Convert string to uppercase.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
To_Uppercase: PARSE ARG myarg
  IF (lowercase_letters = "LOWERCASE_LETTERS") THEN DO
    lowercase_letters = "abcdefghijklmnopqrstuvwxyz"
  END
  IF (uppercase_letters = "UPPERCASE_LETTERS") THEN DO
    uppercase_letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  END
  RETURN TRANSLATE(myarg,uppercase_letters,lowercase_letters)

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
End of code.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
