/* rexx */
Rexx_DSPZPARM:
  rexxpgm_version = "01.02"           /* ver lev */

  PARSE ARG all_my_arguments

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This code drives Initialization, Process, and Termination routines.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Main_Routine:
  return_code = Initialization_Routine()
  IF (return_code = 0) THEN DO
    return_code = Process_Routine()
  END
  return_code = Termination_Routine()
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================

 Dataset:  DEMO.REXX(DSPZPARM)
 Author:   Kenneth Tomiak
 Contact:  "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
 Syntax:   DSPZPARM |db2_ssid|
 OVERVIEW: ALLOCATE THE SUBSYSTEM SPECIFIC DATASETS AND INVOKE
           DSNREXX BEFORE EXECUTING DSNZWP.

-----------------------------------------------------------------------

 History of Modifications
 ------------------------
vv.mm WHEN     Who / What you did ... (Newest change at the top.)
----- -------- --------------------------------------------------------
01.02 20180429 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Stylize using template $putktm:
                  Programming Using The Kenneth Tomiak Method.
               2) Stylize using Edit Macro @putktm:
                  Programming Using The Kenneth Tomiak Method.
----- -------- --------------------------------------------------------
01.01 20080410 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Had an abend using zparm.0
----- -------- --------------------------------------------------------
01.00 200804?? KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Original code.
----- -------- --------------------------------------------------------

-----------------------------------------------------------------------

STANDARD GLOBAL DISCLAIMER
--------------------------
The author explicitly disavows any claim whatsoever about the
correctness or functionality of this program, and disclaims liability
for anything and everything bad that might happen in connection with,
before, during, or after using it. I have tried to make it work right,
and I am personally pretty confident that it does, but everybody makes
mistakes, so if you use it, you do so at your own risk.

=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine initializes constants and variables.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Initialization_Routine:
  return_code = 0
  PARSE VERSION,
    version_rexx_name,
    version_rexx_version,
    version_rexx_date
  PARSE SOURCE,
    source_host_env,
    source_call_type,
    source_uc_exec_name,
    source_hostdd,
    source_hostdsn,
    source_nf_exec_name,
    source_initial_cmd_env,
    source_asid_name,
    source_char8_user_token,
    source_hostother

  sysvar_sysuid = SYSVAR("SYSUID")
  sysvar_sysenv = SYSVAR("SYSENV")
  job_specs = Ctlblk_Jobspecs()
  SAY ""
  SAY COPIES("=",79)
  SAY LEFT("=" jobspecs_jobname ,
    jobspecs_ssibjbid jobspecs_stepname ,
    jobspecs_procname,77) "="
  SAY LEFT("=" source_uc_exec_name rexxpgm_version,77) "="
  SAY LEFT("= executing under" source_host_env,77) "="
  SAY LEFT("= as a" source_call_type,77) "="
  SAY LEFT("= on" DATE() "at" TIME()".",77) "="
  SAY COPIES("=",79)
  SAY ""

  PARSE VAR all_my_arguments,
    . "SSID=" db2_ssid " ",
    =1 . "DEBUG=" db2_debug_option " " .
  IF ((db2_debug_option = "ON") & ,
      (sysvar_sysenv = "FORE")) THEN DO
    trace ?ilrs
  END
  ELSE DO
    IF (db2_debug_option = "ON") THEN DO
      trace ilrs
    END
  END

  IF (db2_SSID = "") THEN db2_SSID = "DB2M"
  mvsvar_sysname = MVSVAR("SYSNAME")
  ssid_on_sysname. = ""
  ssid_on_sysname.DB2P = "IPCO"
  ssid_on_sysname.DB2C = "IPCO"
  ssid_on_sysname.DB2W = "IPCO"
  ssid_on_sysname.DB2M = "IDAT"
  ssid_on_sysname.DB2D = "IDAT"
  ssid_on_sysname.DB2T = "IDAT"
  db2_mlq. = ""
  db2_mlq.DB2M = "MAINT"
  db2_mlq.DB2D = "DEV"
  db2_mlq.DB2T = "TEST"
  db2_mlq.DB2P = "PROD"
  db2_mlq.DB2C = "CISP"
  db2_mlq.DB2W = "DW"
  IF (mvsvar_sysname = "ISYS") THEN DO
    ssid_on_sysname.DB2M = "ISYS"
    db2_mlq.DB2M = "SBOX"
  END
  msg_line.  = ""
  IF (ssid_on_sysname.db2_ssid <> mvsvar_sysname) THEN DO
    ZEDSMSG = "Wrong selection!"
    msg_line.1 = "DB2 subsystem" db2_ssid","
    msg_line.3 = "does not run on" mvsvar_sysname"."
    SAY       CENTER(msg_line.1,76," ")
    SAY       CENTER(msg_line.2,76," ")
    SAY       CENTER(msg_line.3,76," ")
    SAY       CENTER(msg_line.4,76," ")
    SAY       CENTER(msg_line.5,76," ")
    return_code = 12
    RETURN return_code
  END

  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine does the processing.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_Routine:
  PROCNAME = 'DSNWZP '

  IF (sysvar_sysenv = "FORE")  THEN DO
    ADDRESS ISPEXEC,
      "CONTROL ERRORS RETURN"
    STATUS = MSG('OFF')
    ADDRESS TSO,
      "FREE DDNAME(RPTOUT)"
    listdsi_rc = LISTDSI (ZPARM.TXT "DIRECTORY NORECALL")
    IF (SYSREASON = 9) THEN "HDELETE ZPARM.TXT WAIT"
    ELSE "DELETE ZPARM.TXT "

    "ALLOC FI(RPTOUT) DA(ZPARM.TXT)",
       "NEW LRECL(500) SP(5 2) CYL RECFM(F B) DSORG(PS)"
    "FREE DDNAME(RPTOUT)"
  END

  ADDRESS TSO "SUBCOM DSNREXX"
  IF (RC = 1) THEN S_RC = RXSUBCOM("ADD","DSNREXX","DSNREXX")
  ADDRESS DSNREXX "CONNECT" db2_SSID
  IF (SQLCODE <> 0) THEN DO
    function_rc = Sqlerror()
    return_code = sqlcode
    RETURN return_code
  END

  /* SET UP SQLDA FOR CALL TO DSNWZP */

  INSQLDA.SQLD = 1
  INSQLDA.1.SQLTYPE = 449        /* VARCHAR */
  INSQLDA.1.SQLLEN  = 32000
  INSQLDA.1.SQLIND  = 0
  INSQLDA.1.SQLDATA = ""

  /* CALL PROCEDURE DSNWZP */

  ADDRESS DSNREXX,
    "EXECSQL CALL :PROCNAME USING DESCRIPTOR :INSQLDA  "

  IF (SQLCODE = 0) THEN DO

    IF (sysvar_sysenv = "FORE")  THEN DO
      ADDRESS ISPEXEC,
        "LMINIT  DATAID(DATAIDX) DATASET(ZPARM.TXT) ENQ(MOD)"
      ADDRESS ISPEXEC,
        "LMOPEN  DATAID("DATAIDX") OPTION(OUTPUT)"
    END
    RESULT = INSQLDA.1.SQLDATA
    SAY "SQLdata LENGTH("LENGTH(insqlda.1.sqldata)")"
    PARMCOUNT = 1
    I = POS(X2C(404025),RESULT)
    ZPARM.0 = 0
    DO WHILE (I <> 0)
      RESULT = SUBSTR(RESULT,4)
      ni = POS(X2C(404025),RESULT)
      IF (ni = 0) THEN ni = LENGTH(RESULT) + 1
      ZPARM.PARMCOUNT = SUBSTR(RESULT,1,ni-1)
      ZPARM.0 = PARMCOUNT
      PARMCOUNT = PARMCOUNT + 1
      RESULT = SUBSTR(RESULT,ni)
      I = POS(X2C(404025),RESULT)
    END

    DO I = 1 TO ZPARM.0
      RECVAL = ZPARM.I
      function_rc = Dsnwzp_Row_Formatter()
      IF (sysvar_sysenv = "FORE") THEN DO
         ADDRESS ISPEXEC,
           "LMPUT  DATAID("DATAIDX") MODE(INVAR)",
           "DATALOC(RECVAL) DATALEN(500) "
      END
      ELSE DO
       SAY orecval
      END
    END
    IF (sysvar_sysenv = "FORE") THEN DO
      ADDRESS ISPEXEC,
        "LMCLOSE DATAID("DATAIDX")"
      ADDRESS ISPEXEC,
        "EDIT DATAID("DATAIDX")"
      ADDRESS ISPEXEC,
        "LMFREE  DATAID("DATAIDX")"
      "DELETE ZPARM.TXT "
      END
  END
  ELSE DO
     SAY "UNEXPECTED SQLCODE ON CALL TO" procname
     SAY "SQL CODE =" SQLCODE
  END
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine does cleanup before exiting.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Termination_Routine:
  RETURN return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 Follow control blocks to identify jobname, type, and JES number.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Ctlblk_Jobspecs:
  ptr2psa = 0
  cvtptr = STORAGE(D2X(ptr2psa + 16),4)
  cvtsmca = STORAGE(D2X(C2D(cvtptr)+197),3)
  smfid = STORAGE(D2X(C2D(cvtsmca)+16),4)
  psatold = STORAGE(21C,4)
  ptr2tiot = STORAGE(D2X(C2D(psatold)+12),4)
  jobspecs_jobname = STORAGE(D2X(C2D(ptr2tiot)),8)
  jobspecs_stepname = STORAGE(D2X(C2D(ptr2tiot)+8),8)
  jobspecs_procname = STORAGE(D2X(C2D(ptr2tiot)+16),8)
  tcbjscbb = STORAGE(D2X(C2D(psatold)+181),3)
  jscbssib = STORAGE(D2X(C2D(tcbjscbb)+316),4)
  jobspecs_ssibjbid = STORAGE(D2X(C2D(jscbssib)+12),8)
  RETURN jobspecs_jobname jobspecs_ssibjbid ,
    jobspecs_stepname jobspecs_procname

/*****************************  REXX  ********************************/
/*                                                                   */
/*     EXEC : DISPZPRM                                               */
/*  PURPOSE : REXX TO CALL THE DSNWZP STORED PROCEDURE AND PARSE     */
/*            THE OUTPUT FIELD INTO A READABLE FILE.  THROW YOU      */
/*            INTO EDIT OF THE OUPUT DATASET SO YOU CAN FIND / SORT  */
/*            OR DO WHATEVER YOU WANT.                               */
/*                                                                   */
/*********************************************************************/
/*  TAKE THE VALUE AND SPACE IT OUT AND REARRANGE IT FOR DISPLAY     */
/*  IF YOU DO NOT LIKE THE ORDER SIMPLY CHANGE THE LAST LINE         */
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 Follow control blocks to identify jobname, type, and JES number.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Dsnwzp_Row_Formatter:
  ORECVAL = RECVAL
  L = POS('/',RECVAL)
  W1 = SUBSTR(LEFT(RECVAL,L-1),1,9)
  WR = SUBSTR(RECVAL,L+1)
  L = POS('/',WR)
  W2 = SUBSTR(LEFT(WR,L-1),1,9)
  WR = SUBSTR(WR,L+1)
  L = POS('/',WR)
  W3 = SUBSTR(LEFT(WR,L-1),1,25)
  WR = SUBSTR(WR,L+1)
  L = POS('/',WR)
  W4 = SUBSTR(LEFT(WR,L-1),1,9)
  WR = SUBSTR(WR,L+1)
  L = POS('/',WR)
  W5 = SUBSTR(LEFT(WR,L-1),1,9)
  WR = SUBSTR(WR,L+1)
  L = POS('/',WR)
  W6 = SUBSTR(LEFT(WR,L-1),1,40)
  WR = SUBSTR(WR,L+1,32)
  RECVAL = W3||WR||W6||W4||W5||W2||W1
  RETURN 0

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 Show what failed.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Sqlerror: PROCEDURE EXPOSE SQLCODE SQLERRP SQLERRMC SQLERRD. SQLWARN. ,
                           SQLSTATE
  SAY "SQLCODE  = " SQLCODE
  SAY "SQLSTATE = " SQLSTATE
  SAY "SQLERRP  = " SQLERRP
  SAY "SQLERRMC = " SQLERRMC

  SAY "SQLERRD  = " SQLERRD.1",",
                   SQLERRD.2",",
                   SQLERRD.3",",
                   SQLERRD.4",",
                   SQLERRD.5",",
                   SQLERRD.6
  SAY "SQLWARN  = " SQLWARN.0",",
                   SQLWARN.1",",
                   SQLWARN.2",",
                   SQLWARN.3",",
                   SQLWARN.4",",
                   SQLWARN.5",",
                   SQLWARN.6",",
                   SQLWARN.7",",
                   SQLWARN.8",",
                   SQLWARN.9",",
                   SQLWARN.10

  RETURN 12

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
End of code.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
