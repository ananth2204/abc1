/* We first need rexx in comment if compiled or read from SYSPROC. */
pgm_LOGONTSO:
  rexxpgm_version = "02.04"          /* Set with 'ver 1' and 'lev 2'. */

  Signal On Halt
  x = Msg("Off")
  sysvar_sysuid = SYSVAR("SYSUID")
  Say ""
  Say Copies("+",79)
  Say ""
  Say "If something fails horribly, then"
  Say "try some other logon clist:"
  Say "  ex 'sys1.logon.clists(ISPFZ25)'"

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
TSO/E data sets
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
  Say "Allocating TSO/E datasets:"
  function_rc = alloc_sysexec()
  function_rc = alloc_sysproc()
  function_rc = alloc_syshelp()
  "ALLOC File(SYSLBC) DA('SYS1.BRODCAST') SHR REUSE"
  "ALLOC File(SYSUADS) DA('SYS1.UADS') SHR REUSE"
/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
ISPF related datasets (includes other products)
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
  Say "Allocating ISPF datasets:"
  function_rc = alloc_ispprof()
  function_rc = alloc_ispllib()
  function_rc = alloc_ispmlib()
  function_rc = alloc_ispplib()
  function_rc = alloc_ispslib()
  "ALLOC File(ISPTABL) DA('"sysvar_sysuid".ISPF.ISPPROF') SHR REUSE"
  function_rc = alloc_isptlib()
/* function_rc = allocate_more_temp_datasets() */
/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
SMP/E ISPF table input/output.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
  Say "Allocating SMP/E datasets:"
  count = ini()
  count = add("'"sysvar_sysuid".ISPF.ISPPROF'")
  If (count > 0) Then Do
    count = allocate_ddname('SMPTABL')
  End
/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
Interactive Problem Control System (IPCS).
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
  Say "Allocating IPCS datasets:"
  count = ini()
  count = add("'SYS1.PARMLIB'")
  count = add("'SYS1.SHASPARM'")
  If (count > 0) Then Do
    count = allocate_ddname('IPCSPARM')
  End
/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
Interactive Problem Control System (IPCS).
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
  Say "Allocating TCP/IP datasets:"
  count = ini()
  count = add("'TCPIP.TCPIP.DATA'")
  count = add("'SYS1.SHASPARM'")
  If (count > 0) Then Do
    count = allocate_ddname('SYSTCPD')
  End
/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
Mount UNIX System Service user zFS.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
  Say "Mounting zFS for user:"
  sysdsn_rc = SysDsn("'OMVS."sysvar_sysuid".ZFS'")
  If (sysdsn_rc = "OK") Then Do
    lowercase_sysuid = To_Lowercase(sysvar_sysuid)
    Address TSO ,
      "MOUNT FILESYSTEM('OMVS."sysvar_sysuid".ZFS')" ,
      "MOUNTPOINT('/u/'lowercase_sysuid) TYPE(ZFS)"
  End
/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
Serena License file. Would be nice to know why?
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
  /*
  Say "Allocating Serena datasets:"
  "ALLOC File(SERLIC) DA('IBMUSER.SERENA.LICENSE.DATA') SHR REUSE"
  */

  Return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
Something went horribly wrong and it is not prudent to launch ISPF.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
HALT:
  Say ""
  Say Copies("+",79)
  Say ""
  Say "Something went horribly wrong and it is not" ,
   "prudent to launch ISPF."
  Say ""
  Say "Try some other logon clist:"
  Say "  ex 'sys1.logon.clists(ISPFZ25)'"
  Say ""
  Say ""
  Say Copies("+",79)
  Say ""
  exit

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
Allocate a concatenation of REXX type of datasets.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
alloc_sysexec:
  "FREE File(SYSEXEC)"
  count = ini()
  rexx_dataset = "'"sysvar_sysuid".TSO.REXX'"
  x = listdsi(rexx_dataset)
  if x <= 4 then count = add(rexx_dataset)
  count = add("'VENDOR.SYSEXEC'")             /* System user          */
  count = add("'SVTSC.SYSEXEC'")              /* IBM System Center    */
  count = add("'LVL0.SYSEXEC'")               /* IBM Internal         */
  count = add("'ISP.SISPEXEC'")               /* ISPF/PDF             */
  /* count = add("'EOY.SEOYCLIB'") */         /* BookManager Read/MVS */
  /* count = add("'FMND10.SFMNEXEC'") */      /* File Manager         */
  /* count = add("'CSQ710.SCSQEXEC'") */      /* MQ Series            */
  /* count = add("'FAN140.SVSC.CMDLIB'") */   /* REXX Compiler        */
  /* count = add("'FAN140.SFANCMD'") */       /* REXX Compiler        */
  /* count = add("'FAN140.SEAGCMD'") */       /* REXX Library         */
  count = add("'TCPIP.SEZAEXEC'")             /* TCP/IP               */
  count = add("'SYS1.SBPXEXEC'")              /* UNIX System Services */
  count = allocate_ddname('SYSEXEC')
  return count

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
Allocate a concatenation of CLIST type of datasets.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
alloc_sysproc:
  "FREE File(SYSPROC)"
  count = ini()
  clist_dataset = "'"sysvar_sysuid".TSO.CLIST'"
  x = listdsi(clist_dataset)
  if x <= 4 then count = add(clist_dataset)
  /*  count = add("'IBMUSER.CLIST'") */       /* A lot of user stuff. */
  count = add("'VENDOR.CLIST'")               /* System user          */
  count = add("'SVTSC.CLIST'")                /* IBM System Center    */
  count = add("'ISP.SISPCLIB'")               /* ISPF                 */
  /* count = add("'EOY.SEOYPROC'") */         /* BookManager Read/MVS */
  /* count = add("'EQAD10.SEQAEXEC'") */      /* Debug Tool for z/OS  */
  count = add("'SYS1.SCBDCLST'")              /* HCD                  */
  count = add("'SYS1.SBLSCLI0'")              /* IPCS                 */
  count = add("'SYS1.DGTCLIB'")               /* ISMF                 */
  count = add("'SYS1.HRFCLST'")               /* RACF                 */
  count = add("'SYS1.SERBCLS'")               /* RMF                  */
  count = add("'GIM.SGIMCLS0'")               /* SMP/E                */
  count = allocate_ddname('SYSPROC')
  return count

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
Allocate a concatenation of Help type of datasets.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
alloc_syshelp:
  "FREE File(SYSHELP)"
  count = ini()
  help_dataset = "'"sysvar_sysuid".TSO.HELP'"
  x = listdsi(help_dataset)
  if x <= 4 then count = add(help_dataset)
  count = add("'VENDOR.HELP'")
  /* count = add("'IBMUSER.HELP'") */         /* A lot of user stuff. */
  count = add("'SVTSC.HELP'")                 /* IBM System Center    */
  count = add("'LVL0.HELP'")                  /* IBM Internal         */
  count = add("'SYS1.HELP'")                  /* TSO/E                */
  count = add("'ISP.SISPHELP'")               /* ISPF/PDF             */
  count = allocate_ddname('SYSHELP')
  return count

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
Allocate the pre-defined ISPPROF data set.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
alloc_ispprof:
  "FREE File(ISPPROF)"
  profile_dsn = sysvar_sysuid||'.ISPF.ISPPROF'
  "ALLOC File(ISPPROF) DA('"profile_dsn"') SHR REUSE"
  return 1

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
Allocate a concatenation of LOADLIB type of datasets.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
alloc_ispllib:
  "FREE File(ISPLLIB)"
  count = ini()
  loadlib_dataset = "'"sysvar_sysuid".PGM.LOADLIB'"
  x = listdsi(loadlib_dataset)
  if x <= 4 then count = add(loadlib_dataset)
  count = add("'VENDOR.ISPLLIB'")               /* System user        */
  count = add("'SVTSC.ISPLLIB'")                /* IBM System Center  */
  count = add("'LVL0.ISPLLIB'")                 /* IBM Internal       */
  count = add("'ISP.SISPLOAD'")                 /* ISPF/PDF           */
  /* count = add("'SYS1.DFQLLIB'") */           /* ABARS              */
  count = add("'SYS1.SICELINK'")                /* DFSort             */
  count = add("'SYS1.SCBDHENU'")                /* HCD                */
  count = add("'SYS1.DGTLLIB'")                 /* ISMF               */
  /* count = add("'CSQ710.SCSQAUTH'") */        /* MQ Series          */
  /* count = add("'IBMUSER.FDM780.LOAD'") */    /* PDSE aka STARTOOL  */
  /* count = add("'IBMUSER.SERCOMC.FDM780.LOAD'") */ /* STARTOOL      */
  /* count = add("'FAN140.SFANLMD'") */         /* REXX Compiler      */
  /* count = add("'FAN140.SEAGLMD'") */         /* REXX Library       */
  count = add("'GIM.SGIMLMD0'")                 /* SMP/E              */
  count = allocate_ddname('ISPLLIB')
  return count

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
Allocate a concatenation of Message type of datasets.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
alloc_ispmlib:
  "FREE File(ISPMLIB)"
  count = ini()
  msgs_dataset = "'"sysvar_sysuid".ISPF.MSGS'"
  x = listdsi(msg_dataset)
  if x <= 4 then count = add(msg_dataset)
  count = add("'VENDOR.ISPMLIB'")             /* System user          */
  count = add("'SVTSC.ISPMLIB'")              /* IBM System Center    */
  count = add("'LVL0.ISPMLIB'")               /* IBM Internal         */
  count = add("'ISP.SISPMENU'")               /* ISPF/PDF             */
  count = add("'SYS1.SBLSMSG0'")              /* DAE Display Facility */
  /* count = add("'SYS1.DFQMLIB'") */         /* ABARS                */
  /* count = add("'EOY.SEOYMENU'") */         /* BookManager Read/MVS */
  /* count = add("'FMND10.SFMNMENU'") */      /* File Manager         */
  count = add("'SYS1.DGTMLIB'")               /* ISMF                 */
  /* count = add("'CSQ710.SCSQMSGE'") */      /* MQ Series            */
  /* count = add("'IBMUSER.FDM780.MSGS'") */  /* PDSE aka STARTOOL    */
  count = add("'SYS1.HRFMSG'")                /* RACF                 */
  /* count = add("'FAN140.SFANMSEU'") */      /* REXX Compiler        */
  count = add("'SYS1.SERBMENU'")              /* RMF                  */
  count = add("'ISF.SISFMLIB'")               /* SDSF                 */
  count = add("'GIM.SGIMMENU'")               /* SMP/E                */
  count = add("'SYS1.SBPXMENU'")              /* UNIX System Services */
  count = allocate_ddname('ISPMLIB')
  return count

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
Allocate a concatenation of Panel type of datasets.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
alloc_ispplib:
  "FREE File(ISPPLIB)"
  count = ini()
  panels_dataset = "'"sysvar_sysuid".ISPF.PANELS'"
  x = listdsi(panels_dataset)
  if x <= 4 then count = add(panels_dataset)
  /* count = add("'IBMUSER.PANELS'") */       /* A lot of user stuff. */
  count = add("'VENDOR.ISPPLIB'")             /* System user          */
  count = add("'SVTSC.ISPPLIB'")              /* IBM System Center    */
  count = add("'LVL0.ISPPLIB'")               /* IBM Internal         */
  count = add("'ISP.SISPPENU'")               /* ISPF/PDF             */
  /* count = add("'SYS1.DFQPLIB'") */         /* ABARS                */
  /* count = add("'EOY.SEOYPENU'") */         /* BookManager Read/MVS */
  /* count = add("'FMND10.SFMNPENU'") */      /* File Manager         */
  count = add("'SYS1.SBLSPNL0'")              /* IPCS                 */
  count = add("'SYS1.DGTPLIB'")               /* ISMF                 */
  /* count = add("'CSQ710.SCSQPNLE'") */      /* MQ Series            */
  /* count = add("'IBMUSER.FDM780.PANELS'") *//* PDSE aka STARTOOL    */
  count = add("'SYS1.HRFPANL'")               /* RACF                 */
  /* count = add("'FAN140.SFANPENU'") */      /* REXX Compiler        */
  count = add("'SYS1.SERBPENU'")              /* RMF                  */
  count = add("'ISF.SISFPLIB'")               /* SDSF                 */
  count = add("'GIM.SGIMPENU'")               /* SMP/E                */
  count = add("'SYS1.SBPXPENU'")              /* UNIX System Services */
  count = allocate_ddname('ISPPLIB')
  return count

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
Allocate a concatenation of Skeleton type of datasets.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
alloc_ispslib:
  "FREE File(ISPSLIB)"
  count = ini()
  skels_dataset = "'"sysvar_sysuid".ISPF.SKELS'"
  x = listdsi(skels_dataset)
  if x <= 4 then count = add(skels_dataset)
                                                /*                   */
  count = add("'VENDOR.ISPSLIB'")               /* System user       */
  count = add("'SVTSC.ISPSLIB'")                /* IBM System Center */
  count = add("'LVL0.ISPSLIB'")                 /* IBM Internal      */
  count = add("'ISP.SISPSENU'")                 /* ISPF/PDF          */
  count = add("'ISP.SISPSLIB'")                 /* ISPF              */
  /* count = add("'FMND10.SFMNSLIB'") */        /* File Manager      */
  count = add("'SYS1.SBLSKEL0'")                /* IPCS              */
  count = add("'SYS1.DGTSLIB'")                 /* ISMF              */
  /* count = add("'IBMUSER.FDM780.SKELS'") */   /* PDSE aka STARTOOL */
  count = add("'SYS1.HRFSKEL'")                 /* RACF              */
  /* count = add("'FAN140.SVSC.SFANSKL'") */    /* REXX Compiler     */
  count = add("'ISF.SISFSLIB'")                 /* SDSF              */
  count = add("'GIM.SGIMSENU'")                 /* SMP/E             */
  count = allocate_ddname('ISPSLIB')
  return count

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
Allocate a concatenation of Table Iinput type of datasets.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
alloc_isptlib:
  "FREE File(ISPTLIB)"
  count = ini()
  tables_dataset = "'"sysvar_sysuid".ISPF.TABLES'"
  x = listdsi(tables_dataset)
  if x <= 4 then count = add(tables_dataset)
  count = add("'"sysvar_sysuid".ISPF.ISPPROF'") /* User */
  count = add("'VENDOR.ISPTLIB'")               /* System user */
  count = add("'SVTSC.ISPTLIB'")                /* IBM System Center */
  count = add("'LVL0.ISPTLIB'")                 /* IBM Internal */
  count = add("'ISP.SISPTENU'")                 /* ISPF/PDF */
  /* count = add("'EOY.SEOYTENU'") */        /* BookManager Read/MVS */
  /* count = add("'FMND10.SFMNTENU'") */        /* File Manager */
  count = add("'SYS1.SBLSTBL0'")                /* IPCS */
  count = add("'SYS1.DGTTLIB'")                 /* ISMF */
  /* count = add("'CSQ710.SCSQTBLE'") */        /* MQ Series */
  count = add("'ISF.SISFTLIB'")                 /* SDSF */
  count = add("'GIM.SGIMTENU'")                 /* SMP/E */
  count = add("'SYS1.SBPXTENU'")            /* UNIX System Services */
  count = allocate_ddname('ISPTLIB')
  return count

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
Initialize an empty list of dataset names.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
ini:
  ds_list  = ''
  return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
Verify dataset existence and then add to a list.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
add:
  arg add_dsname
  x = sysdsn(add_dsname)
  select
   when x <> "OK" then Say "Dataset not found:" add_dsname
   otherwise do
    ds_list = ds_list " " add_dsname
    a = count + 1
   end
  end
  return a

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
2017-01-04 Roland Schiradin
Pre-allocate addition ISPDTLn and ISPLSTn data sets for more than
two split screens.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
allocate_more_temp_datasets:
  X = allocate_new(ISPCTL0 VIO 'F,B' 80)
  X = allocate_new(ISPCTL1 VIO 'F,B' 80)
  X = allocate_new(ISPCTL2 VIO 'F,B' 80)
  X = allocate_new(ISPCTL3 VIO 'F,B' 80)
  X = allocate_new(ISPCTL4 VIO 'F,B' 80)
  X = allocate_new(ISPCTL5 VIO 'F,B' 80)
  X = allocate_new(ISPCTL6 VIO 'F,B' 80)
  X = allocate_new(ISPCTL7 VIO 'F,B' 80)
  X = allocate_new(ISPCTL8 VIO 'F,B' 80)
  X = allocate_new(ISPLST1 VIO 'F,B,A' 121)
  X = allocate_new(ISPLST2 VIO 'F,B,A' 121)
  X = allocate_new(ISPLST3 VIO 'F,B,A' 121)
  X = allocate_new(ISPLST4 VIO 'F,B,A' 121)
  X = allocate_new(ISPLST5 VIO 'F,B,A' 121)
  X = allocate_new(ISPLST6 VIO 'F,B,A' 121)
  X = allocate_new(ISPLST7 VIO 'F,B,A' 121)
  X = allocate_new(ISPLST8 VIO 'F,B,A' 121)
  X = allocate_new(ISPLOG VIO 'V,A' 125)
  return 18

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
Allocate a new PS type of data set.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
allocate_new:
  arg ddname unit recfm lrecl
  "ALLOC File("ddname") NEW DELETE UNIT("unit"),
       SPACE(1,1) CYLINDERS RECFM("recfm") LRECL("lrecl")"
  return rc

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
Allocate a new PS type of data set.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
allocate_ddname:
  arg ddname
  /* Call Show ddname, ds_list */
  "ALLOC File("ddname") DA("ds_list") SHR REUSE"
  return rc

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
Show the data set list (for debugging purposes).
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Show: Procedure
  Parse ARG dd, dsn_list
  Say '-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-'
  Say Left(dd, 8) "==>" Word(dsn_list, 1)
  Do i = 2 To Words(dsn_list)
    Say Left(" ", 12) Word(dsn_list, i)
  End
  Return

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Convert string to lowercase.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
To_Lowercase: Parse arg myarg
  If (lowercase_letters = "LOWERCASE_LETTERS") Then Do
    lowercase_letters = "abcdefghijklmnopqrstuvwxyz"
  End
  If (uppercase_letters = "UPPERCASE_LETTERS") Then Do
    uppercase_letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  End
  Return Translate(myarg,lowercase_letters,uppercase_letters)

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================

 Dataset:  REXX(LOGONTSO)
 Author:   Kenneth Tomiak
 Contact:  "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
 Overview: Group instructions into a pseudo-routine like block.
           Also allows for a repetitious looping using a counter.
           Also allows for conditional looping.

-----------------------------------------------------------------------

 History of Modifications
 ------------------------
vv.mm When     Who / What you did ... (Newest change at the top.)
----- -------- --------------------------------------------------------
02.04 2018-01-11 "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
      1) Indent code.
----- -------- --------------------------------------------------------
02.03 2017-07-27 "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
      1) Mount zFS if named 'OMVS.&SYSUID..ZFS'
      2) Added routine To_Lowercase().
----- -------- --------------------------------------------------------
02.02 2017-07-22 "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
      1) Added SYSTCPD.
      2) Converted IPCSPARM and SMPTABL to using INI,ADD,ALLOCATE*.
----- -------- --------------------------------------------------------
02.01 2017-04-15 "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
      1) Added IPCSPARM.
----- -------- --------------------------------------------------------
02.00 2017-03-16 "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
      Based on SYS1.LOGON.CLISTS(ISPFZRY) - 01.02
      1) Altered user data set names to match what the MODEL macro uses.
      2) Minor style editing.
      3) Removed a duplicale allocate_sysproc routine.
----- -------- --------------------------------------------------------
01.02 2017-01-05 N.Haas, based on ISPFZRX
----- -------- --------------------------------------------------------
01.01 2017-01-05 Roland Schiradin
----- -------- --------------------------------------------------------
01.00 yyyy-mm-dd Who?
----- -------- --------------------------------------------------------

-----------------------------------------------------------------------

STANDARD GLOBAL DISCLAIMER
--------------------------
The author explicitly disavows any claim whatsoever about the
correctness or functionality of this program, and disclaims liability
for anything and everything bad that might happen in connection with,
before, during, or after using it. I have tried to make it work right,
and I am personally pretty confident that it does, but everybody makes
mistakes, so if you use it, you do so at your own risk.

=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

//SPFPROCK PROC
//SPFPROCK EXEC PGM=IKJEFT01,DYNAMNBR=200,
//             PARM='%logonket'
//*                                                                 *//
//* DSN=VENDOR.PROCLIB(SPFPROCK)                                    *//
//*                                                                 *//
//* THIS PROC CONTAINS NO ISPF DATASETS - ALL ISPF DDNAMES ARE      *//
//* SUPPLIED IN THE REXX ROUTINE LOCATED IN VENDOR.REXX(LOGONTSO).  *//
//*                                                                 *//
//STEPLIB DD DISP=SHR,DSN=SYS1.W$$.LINKLIB
//*                                                                 *//
//* IF THIS LOGON PROC STAYS SIMPLE AND ALLOCATIONS REQUIRED FOR    *//
//* ISPF ARE COMPLETED VIA THE NAMED ROUTINE IN THE REXX ABOVE THEN *//
//* IT IS HIGHLY LIKELY THAT A USER WOULD BE ABLE TO GET ON TSO/E.  *//
//*                                                                 *//
//SYSPROC  DD  DISP=SHR,DSN=VENDOR.CLIST
//*SYSEXEC DD  DISP=SHR,DSN=VENDOR.REXX   Used explicitely          *//
//SYSPRINT DD  TERM=TS,SYSOUT=*
//SYSTERM  DD  TERM=TS,SYSOUT=*
//SYSIN    DD  TERM=TS

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
