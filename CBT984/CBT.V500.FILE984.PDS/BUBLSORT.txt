/* rexx */
Rexx_BUBLSORT:
  rexxpgm_version = "01.01"           /* ver lev */

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This code drives Initialization, Process, and Termination routines.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Main_Routine:
  return_code = Initialization_Routine()
  IF (return_code = 0) THEN DO
    return_code = Process_Routine()
  END
  return_code = Termination_Routine()
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================

 Dataset:  DEMO.REXX(BUBLSORT)
 Contact:  "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
 Overview: Copy the functions into your code and change the stem
           variable to what you are using.
 Syntax:   tso %bublsort

-----------------------------------------------------------------------

 History of Modifications
 ------------------------
vv.mm WHEN     Who / What you did ... (Newest change at the top.)
----- -------- --------------------------------------------------------
01.01 20180429 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
         -     1) Stylize using:
      20180407    Programming Using The Kenneth Tomiak Method.
               1) Stylize using template $putktm:
                  Programming Using The Kenneth Tomiak Method.
               1) Stylize using the
                  Programming Using The Kenneth Tomiak Method.
----- -------- --------------------------------------------------------
01.02 20180425 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Stylize using Edit Macro %putktm:
                  Programming Using The Kenneth Tomiak Method.
----- -------- --------------------------------------------------------
01.01 20180407 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
----- -------- --------------------------------------------------------
01.00 ???????? KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Original code.
----- -------- --------------------------------------------------------

-----------------------------------------------------------------------

STANDARD GLOBAL DISCLAIMER
--------------------------
The author explicitly disavows any claim whatsoever about the
correctness or functionality of this program, and disclaims liability
for anything and everything bad that might happen in connection with,
before, during, or after using it. I have tried to make it work right,
and I am personally pretty confident that it does, but everybody makes
mistakes, so IF you use it, you do so at your own risk.

=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine initializes constants and variables.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Initialization_Routine:
  return_code = 0
/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Build up a stem variable with three entries.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
  stem.0 = 0
  some_var = "Tomiak, Kenneth"
  CALL Add_To_Stem
  some_var = "Dyck, Lionel"
  CALL Add_To_Stem
  some_var = "Golob, Sam"
  CALL Add_To_Stem
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine does the processing.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_Routine:
/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Show the stem variable's original order.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
  SAY ""
  SAY "Original stem. order"
  DO sx = 1 TO stem.0
    SAY stem.sx
  END

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Sort and show the stem variable's ascending order.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
  sort_rc = Sort_Stem_Asc()
  SAY ""
  SAY "Sorted stem. ascending order"
  DO sx = 1 TO stem.0
    SAY stem.sx
  END

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Sort and show the stem variable's descending order.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
  sort_rc = Sort_Stem_Desc()
  SAY ""
  SAY "Sorted stem. descending order"
  DO sx = 1 TO stem.0
    SAY stem.sx
  END

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Sort on WORD(2) and show the stem variable's ascending order.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
  DO sx = 1 TO stem.0
    rec.sx = stem.sx
  END
  rec.0 = stem.0
  sort_rc = Sort_Stem_Asc_WORD(2)
  SAY ""
  SAY "Sorted WORD(stem.,2) ascending order"
  DO sx = 1 TO rec.0
    SAY rec.sx
  END
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine does cleanup before exiting.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Termination_Routine:
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Add to the stem variable (+1).
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Add_To_Stem:
  PARSE VALUE stem.0+1 some_var WITH 1 x stem.x 1 stem.0 .
  RETURN stem.0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Loop thru the stem variable putting the higher VALUE next.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Sort_Stem_Asc: PROCEDURE EXPOSE stem.
  count_of_elements = stem.0
  DO i = 1 TO  (count_of_elements - 1)
    DO j = 1 TO (count_of_elements - 1)
      j_plus1 = j + 1
      IF (stem.j > stem.j_plus1) THEN DO
        temp = stem.j
        stem.j = stem.j_plus1
        stem.j_plus1 = temp
      END
    END j
  END i
  RETURN 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Loop thru the stem variable putting the higher VALUE previous.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Sort_Stem_Desc: PROCEDURE EXPOSE stem.
  count_of_elements = stem.0
  DO i = 1 TO  (count_of_elements - 1)
    DO j = 1 TO (count_of_elements - 1)
      j_plus1 = j + 1
      IF stem.j < stem.j_plus1 THEN DO
        temp = stem.j
        stem.j = stem.j_plus1
        stem.j_plus1 = temp
      END
    END j
  END i
  RETURN 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Loop thru the stem variable putting the higher VALUE previous.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Sort_Stem_Asc_Word:
  sort_word = ARG(1)
  sort_done = 0
  sort_recs = rec.0
  DO WHILE sort_done = 0
    sort_done = 1
    DO ix = 1 TO sort_recs - 1
      jx = ix + 1
      IF WORD(rec.ix,sort_word) > WORD(rec.jx,sort_word) THEN DO
        sort_done = 0
        temp_sort = rec.jx
        rec.jx = rec.ix
        rec.ix = temp_sort
      END /* IF WORD(rec.ix,sort_word) > WORD(rec.jx,sort_word) */
    END /* DO ix = 1 TO sort_recs - 1 */
    sort_recs = sort_recs - 1
  END /* DO WHILE sort_done = 0 */
  RETURN 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
End of code.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
