rexx_URLCHECK: /* URLCHECK.rex - IBM REXX Sample Program OS/2 Warp   */
  rexxpgm_version = "02.00"
  /*------------------------------------------------------*/
  /*                                                      */
  /* Program:   URLCHECK                                  */
  /* Purpose:   Check the modification dates of all URLs  */
  /* Input:     URLList - ddname of urls to check         */
  /*            HTMLFile - ddname for output              */
  /* Returns:   HTML showing last modified dates.         */
  /*                                                      */
  /*------------------------------------------------------*/
  /* URLList:                                             */
  /*   http://www.sitename.com                            */
  /*   http://www.sitename.com/doclib/filename.doc        */
  /*   #http://www.sitename.com                           */
  /*------------------------------------------------------*/
URLCheck:
  Parse Arg URLList HTMLFile
  signal on halt
  signal on syntax

  function_rc = Program_Initiation()
  IF (function_rc = 0) THEN DO
    CALL Initialize_TCPIP_Services

    CALL CheckURLs URLList
    CALL WriteHTML HTMLFile, Changed, Unchanged, Commented

    CALL Terminate_TCPIP_Services
    CALL Shut_the_socket
  END
  RETURN return_code

  /*------------------------------------------------------*/
  /*                                                      */
  /* Procedure: Program initiation                        */
  /* Purpose:   Initialize variables.                     */
  /* Arguments: None                                      */
  /* Returns:   Nothing                                   */
  /*                                                      */
  /*------------------------------------------------------*/
Program_Initiation:
  IF (SYSVAR("SYSENV") = "FORE") THEN DO
    Say "Run the DEMO.CNTL(URLCHECK) JCL."
    return_code = 16
    RETURN return_code
  END
  return_code = 0
  call WHERE_AM_I_STORED
  Say "Input comes from ddname="URLList
  Say "Output goes to ddname="HTMLFile

  URLS.0 = 0
  Changed = ''
  Unchanged = ''
  Commented = ''
  CRLF = x2c('0D25')
  CR   = x2c('0D')
  LF   = x2c('25')
  Return

  /*------------------------------------------------------*/
  /*                                                      */
  /* Procedure: Establish_A_Socket                        */
  /* Purpose:   Get the TCP/IP socket primed.             */
  /* Arguments: None                                      */
  /* Returns:   rc                                        */
  /*                                                      */
  /*------------------------------------------------------*/
Initialize_TCPIP_Services:

 /*----------------------------------------------------------------*/
 /* Initialize the Socket                                          */
 /*----------------------------------------------------------------*/
  so_txt = Socket('Initialize', 'URLCHECK', 20)
  parse var so_txt s_rc s_subtask s_maxdesc s_servicename
  socket_rc = s_rc
  if s_rc = 0 THEN DO
    initialized = 1
    Say s_servicename":"s_subtask "initialized" s_maxdesc "sockets"
  End
  else,
    call error 'E', 40, 'Unable to initialize SOCKET URLCheck' s_rc
  Return

  /*------------------------------------------------------*/
  /*                                                      */
  /* Procedure: Establish_A_Socket                        */
  /* Purpose:   Get the TCP/IP socket primed.             */
  /* Arguments: None                                      */
  /* Returns:   rc                                        */
  /*                                                      */
  /*------------------------------------------------------*/
Establish_A_Socket:
 /*----------------------------------------------------------------*/
 /* Establish a socket                                             */
 /*----------------------------------------------------------------*/
  so_txt = Socket('Socket', 'AF_INET', 'STREAM', 'TCP')
  parse var so_txt s_rc s_results
  if s_rc <> 0 then,
    do
      call error 'E', 60, 'SOCKET(SOCKET) rc='s_rc
    end
  else,
    Do
      say "Socket(STREAM)="so_txt
      s_d = s_results
      say 'socket descriptor='s_d
      socket_rc = 0
    End

 /*----------------------------------------------------------------*/
 /* Turn  on               EBCDIC-Ascii conversion                 */
 /*----------------------------------------------------------------*/
  so_txt = Socket('SetSockOpt',s_d,'SOL_SOCKET','SO_ASCII','On')
  parse var so_txt s_rc s_results
  if s_rc = 0 then,
    Do
      Say "'Socket' So_ASCII" so_txt
    End
  else,
    call error 'W', 70, 'Unable to set SOCKET So_ASCii' s_rc
  Return

  /*------------------------------------------------------*/
  /*                                                      */
  /* Procedure: CheckURLs                                 */
  /* Purpose:   Check the modification dates of all URLs  */
  /*            listed in the specified file. If the date */
  /*            has changed, update the list file with    */
  /*            the new date.                             */
  /* Arguments: URLFile - file containing URL list        */
  /* Returns:   nothing                                   */
  /*                                                      */
  /*------------------------------------------------------*/
CheckURLs:
  Parse Arg URLFile

  If socket_rc <> 0 then exit socket_rc
  Index = 0
  Do forever
    /* read line with URL and last modification date    */
    inline  = LineIn(URLFile)
    parse var inline readrc URLLine
    if readrc <> 0 then leave
    say "========================================================"
    say 'inline='inline'='

    /* remember line for later update of file           */
    Index = Index + 1
    URLS.0 = Index
    URLS.Index = URLLine

    /* if first character is not a '#' then process URL */
    If SubStr(URLLine, 1, 1) \= '#' Then
     Do
       /* retrieve header for specified URL             */
       Parse Var URLLine URL ' ' ModDate
       Header = GetHeader(URL)

       If Length(Header) \= 0 Then
        Do
          /* header could be read, find date            */
          DocDate = GetModificationDate(Header)
         say 'moddate='moddate 'docdate='docdate

 /*       If Length(ModDate) = 0 | ModDate \= DocDate Then    */
          If ModDate \= DocDate Then,
           Do
             /* this URL has been changed, add to list  */
             /* of changed URLs and update the date     */
             Changed = Changed Index
             URLS.Index = URL DocDate
           End
          Else,
            /* add index to list of unchanged URLs     */
            Unchanged = Unchanged Index
        End
       Else,
         /* add index to list of unchanged URLs        */
         Unchanged = Unchanged Index
     End
    Else
      /* add index to list of all commented out URLs   */
      Commented = Commented Index
  End

  /* close input stream, erase it and then rewrite it   */
  "EXECIO 0 DISKR" URLFile "(Finis"

  url_end = urls.0
  say url_end 'urls in' URLFile
  Do Index = 1 To URL_END
    say 'dd='URLFile  URLS.Index
    Call LineOut URLFile, URLS.Index
  End

  "EXECIO 0 DISKW" URLFile "(Finis"
  Return

  /*------------------------------------------------------*/
  /*                                                      */
  /* Procedure: WriteHTML                                 */
  /* Purpose:   Create a new HTML document with links to  */
  /*            the input URLs grouped by modification.   */
  /* Arguments: HTML - output filename                    */
  /*            Changed - list of changed URL indices     */
  /*            Unchanged - list of unchanged URL indices */
  /*            Commented - list of commented URL indices */
  /* Returns:   nothing                                   */
  /*                                                      */
  /*------------------------------------------------------*/
WriteHTML:
  Parse Arg HTMLFile, Changed, Unchanged, Commented

  /* write new HTML document with links to URLs         */

  Call LineOut HTMLFile, '<html><head>'
  Call LineOut HTMLFile, '<title>My link list</title>'
  Call LineOut HTMLFile, '</head><body>'
  Call LineOut HTMLFile, ' '
  Call LineOut HTMLFile, '<h1>Changed documents</h1>'
  Call FormatURLList HTMLFile, Changed
  Call LineOut HTMLFile, '<br><hr><br>'
  Call LineOut HTMLFile, ' '
  Call LineOut HTMLFile, '<h1>Unchanged documents</h1>'
  Call FormatURLList HTMLFile, Unchanged
  Call LineOut HTMLFile, '<br><hr><br>'
  Call LineOut HTMLFile, ' '
  Call LineOut HTMLFile, '<h1>Commented documents</h1>'
  Call FormatURLList HTMLFile, Commented
  Call LineOut HTMLFile, '<br><hr><br>'
  Call LineOut HTMLFile, ' '
  Call LineOut HTMLFile, '<p><i>Documents checked at',
               Date() 'on' Time() '</i>'
  Call LineOut HTMLFile, '</body></html>'
  Return

  /*------------------------------------------------------*/
  /*                                                      */
  /* Procedure: FormatURLList                             */
  /* Purpose:   Format a list of URL indices into a HTML  */
  /*            formatted list with links to the URLs.    */
  /* Arguments: HTML - output filename                    */
  /*            List - list of indices                    */
  /* Returns:   nothing                                   */
  /*                                                      */
  /*------------------------------------------------------*/
FormatURLList:
  Parse Arg HTMLFile, List

  /* are there any indices in the list?                 */
  If Words(List) > 0 Then
   Do
    Do Index = 1 To Words(List)
      Idx = Word(List, Index)
      Parse Var URLS.Idx URL ModDate
      URL = Strip(URL, 'L', '#')

      last_moddate =  '<br><a href=''' || URL || '''>',
                             URL || '</a>'
      If Length(ModDate) > 0 Then
        last_moddate = last_moddate||', last modified at' ModDate
      Call LineOut HTMLFile, last_ModDate
    End
   End
  Else
    Call LineOut HTMLFile, '<p><i>No documents in list</i>     '
  Return

  /*------------------------------------------------------*/
  /*                                                      */
  /* Procedure: LineOut                                   */
  /* Purpose:   Output the line using EXECIO.             */
  /* Arguments: ddname                                    */
  /*            TextString                                */
  /* Returns:   rc                                        */
  /*                                                      */
  /*------------------------------------------------------*/
LineOut:
  outddname = arg(1)
  TextString = arg(2)
  say 'ddname='outddname 'txt='textstring
  push TextString
  "EXECIO 1 DISKW" outddname
  Return

  /*------------------------------------------------------*/
  /*                                                      */
  /* Procedure: LineIn                                    */
  /* Purpose:   Read a record using EXECIO.               */
  /* Arguments: ddname                                    */
  /* Returns:   rc                                        */
  /*            TextString                                */
  /*                                                      */
  /*------------------------------------------------------*/
LineIn:
  parse arg inddname
  "EXECIO 1 DISKR" inddname "(stem indata."
  read_rc = rc
  inline = strip(indata.1,"T"," ")
  if read_rc <> 0 then inline = "<EOF>"
  Return read_rc inline

  /*------------------------------------------------------*/
  /*                                                      */
  /* Function:  Connect                                   */
  /* Purpose:   Create a socket and connect it to server. */
  /* Arguments: Server - server name, may contain port no.*/
  /* Returns:   Socket number if successful, -1 otherwise */
  /*                                                      */
  /*------------------------------------------------------*/
Connect:
  Parse Arg Server

  /* if the servername has a port address specified     */
  /* then use this one, otherwise use the default http  */
  /* port 80                                            */
  Parse Var Server Server ':' Port
  If Port = '' Then
    Port = 80

  if this_is_real  = 1 then,
    do
  /* resolve server name alias to dotted IP address     */
  so_txt = Socket('Gethostbyname', server)
  parse var so_txt s_rc s_results
  if s_rc <> 0 then,
    do
      call error 'I', 80, 'GetHostByName for',
        server 'failed' s_rc
     Return -1
    end
    end

 /*----------------------------------------------------------------*/
 /* Connect the socket                                             */
 /*----------------------------------------------------------------*/
  so_txt = Socket('Connect', s_d, 'AF_INET' port server)
  parse var so_txt s_rc s_results
  if s_rc <> 0 then,
    do
      call error 'W', 120, 'SOCKET(CONNECT) rc='s_rc
    end
  else,
    Do
      say "Connected to" server s_results
    End
  Return 0

  /*------------------------------------------------------*/
  /*                                                      */
  /* Function:  Read_From_Socket                          */
  /* Purpose:   Retrieve the results of a command or      */
  /*            socket call.                              */
  /* Arguments: Socket - active socket number             */
  /* Returns:   Response from server or empty string if   */
  /*            failed.                                   */
  /*                                                      */
  /*------------------------------------------------------*/
read_from_socket:
  Response = ''
  Do Forever
    so_txt = peek_at_socket()
    if s_rc <> 0 then,
      do
        say 'I tried to peek but had a problem:'s_rc
        say '::'so_txt'::'
        Leave
      end
    if s_data_len = 0 then,
      do
        say "I peeked and found nothing more to read."
        Leave
      end
    BytesRcvd = Socket('Recvfrom', s_d, 1024)
    parse var bytesrcvd s_rc RcvData
    If s_rc <  0 Then
      do
        say  s_rc '<= 0 so i am leaving read_from_socket' rcvdata
        Leave
      end
    if s_rc <> 0 then,
      do
        call error 'I', 242, 'SOCKET(RecvFrom) rc='s_rc
      end
    Response = Response || RcvData
  End
  Return Response

 /*----------------------------------------------------------------*/
 /* Hear what the server has to say                                */
 /*----------------------------------------------------------------*/
Peek_at_socket:
  so_txt = Socket('Recv', s_d, 1024, 'PEEK')
  parse var so_txt s_rc s_type s_port s_ip s_results
  parse var so_txt s_rc s_data_len s_data_text
  if s_rc <> 0 then,
    do
      call error 'W', 250, 'SOCKET(Peek) rc='s_rc
    end
  Return so_txt

  /*------------------------------------------------------*/
  /*                                                      */
  /* Procedure: Close_Socket                              */
  /* Purpose:   Close the socket                          */
  /* Arguments: Socket - active socket number             */
  /* Returns:   nothing                                   */
  /*                                                      */
  /*------------------------------------------------------*/
Close_socket:
  so_txt = Socket('Close', s_d)
  parse var so_txt s_rc s_results
  if s_rc <> 0 then,
    do
      call error 'W', 234, 'Close rc='s_rc
    end
  Return

  /*------------------------------------------------------*/
  /*                                                      */
  /* Function:  GetHeader                                 */
  /* Purpose:   Request the header for the specified URL  */
  /*            from the network.                         */
  /* Arguments: URL - fully specified document locator    */
  /* Returns:   Full header of specified document or      */
  /*            empty string if failed (also if no header */
  /*            exists).                                  */
  /*                                                      */
  /*------------------------------------------------------*/
GetHeader:
  Parse Arg URL

  /* Isolate server name and document name, document    */
  /* name is always preceded with a slash               */
  Parse Var URL 'http://' Server '/' Document
  Document = '/' || Document

  socket_rc = -1
  Call Establish_A_Socket
  Socket = Connect(Server)
  If Socket = -1 Then
    Return ''

  Command = 'HEAD' Document 'HTTP/1.0'
  sendrc = SendCommand(Socket, Command)
  Command = ''
  sendrc = SendCommand(Socket, Command)
  Header  = read_from_socket()
  Call Close_Socket
  Return Header

  /*------------------------------------------------------*/
  /*                                                      */
  /* Function:  SendCommand                               */
  /* Purpose:   Send a command via the specified socket   */
  /*            and return the full response to caller.   */
  /* Arguments: Socket - active socket number             */
  /*            Command - command string                  */
  /* Returns:   Response from server or empty string if   */
  /*            failed.                                   */
  /*                                                      */
  /*------------------------------------------------------*/
SendCommand:
  Parse Arg Socket, Command
  call check_ops

  /* append two pairs of CRLF to end the command string */
  Command = Command || crlf
  say 'cmd='command'=cmd'

  so_txt = Socket('Write', s_d,Command)
  parse var so_txt s_rc s_results
  if s_rc <> 0 then,
    do
      call error 'E', 230, 'SOCKET(WRITE) rc='s_rc
    end
  else,
    Do
      s_data_len = s_results
      if s_data_len < 1 then say "Writing nothing?" s_data_len
    End
  return so_txt

 /*----------------------------------------------------------------*/
 /* See if I should read                                           */
 /*----------------------------------------------------------------*/
check_ops:
  so_txt = Socket('Select', 'Read' '*' 'Write' '*' 'Exception' '*', 2)
  parse var so_txt s_rc s_results
  if s_rc <> 0 then,
    do
      call error 'W', 210, 'SOCKET(Select) rc='so_txt
    end
  else,
    Do
      say "Select shows" so_txt
    End
  return

  /*------------------------------------------------------*/
  /*                                                      */
  /* Procedure: Shutdown_the_socket                       */
  /* Purpose:   Shutdown the socket                       */
  /* Arguments: Socket - active socket number             */
  /* Returns:   nothing                                   */
  /*                                                      */
  /*------------------------------------------------------*/
Shut_the_socket:
  Parse Arg Socket
  so_txt = Socket('Shutdown', s_d, 'BOTH')
  parse var so_txt s_rc s_results
  if s_rc <> 0 then,
    do
      call error 'W', 232, 'Shutdown rc='s_rc
    end
  Return

  /*------------------------------------------------------*/
  /*                                                      */
  /* Function:  GetModificationDate                       */
  /* Purpose:   Find the last-modified date in the passed */
  /*            header and return just the date.          */
  /* Arguments: Header - full header of document          */
  /* Returns:   Date string when document was last        */
  /*            modified or empty string if date was not  */
  /*            found.                                    */
  /*                                                      */
  /*------------------------------------------------------*/
GetModificationDate:
  Parse Arg Header

  /* isolate date string and strip all unwanted chars   */
  Parse Upper Var Header 'LAST-MODIFIED:' HeadDate '25'x
  HeadDate = Strip(HeadDate)
  HeadDate = Strip(HeadDate,,'0D'x)
  Return HeadDate

  /*------------------------------------------------------*/
  /* Find out who I am and then show it.                  */
  /*------------------------------------------------------*/
WHERE_AM_I_STORED:
  myexitrc = 0
  Parse VERSION,
    version_rexx_name,
    version_rexx_version,
    version_rexx_date
  Parse SOURCE,
    source_host_env,
    source_call_type,
    source_uc_exec_name,
    source_hostdd,
    source_hostdsn,
    source_nf_exec_name,
    source_initial_cmd_env,
    source_asid_name,
    source_char8_user_token,
    source_hostother
  Address_Environment = Address()
  Select
    When (version_rexx_name = "REXX-ooRexx_3.1(MT)") Then,
      REXX_ENVIR = "PC/ooREXX"
    When ((version_rexx_name = "REXXSAA") & ,
          (source_initial_cmd_env = "DOS")) Then,
      REXX_ENVIR = "PC/IBM_PC_DOS"
    When ((version_rexx_name = "REXXSAA") & ,
          (source_initial_cmd_env = "OS2")) Then,
      REXX_ENVIR = "PC/IBM_OS/2"
    When ((version_rexx_name = "REXX370") & ,
          (source_initial_cmd_env = "CMS")) Then,
      REXX_ENVIR = "VM/CMS"
    When ((source_asid_name = "MVS") & ,
          (source_initial_cmd_env = "MVS")) Then,
      REXX_ENVIR = "MVS/Batch"
    When ((version_rexx_name = "REXX370") & ,
          (source_initial_cmd_env = "TSO")) Then,
      REXX_ENVIR = "MVS/TSO"
    When ((version_rexx_name = "REXX370") & ,
          (source_initial_cmd_env = "ISPF")) Then,
      REXX_ENVIR = "MVS/TSO/ISPF"
    When ((version_rexx_name = "REXX/2") & ,
          (source_initial_cmd_env = "WINDOWS")) Then,
      REXX_ENVIR = "PC/SPFPC"
    When (Address_Environment = "COMMAND") Then,      /* PC/DOS 7.0 */
      REXX_ENVIR = "PC/DOS7.0"
    When (Address_Environment = "SYSTEM") Then,       /* Regina Rexx */
      REXX_ENVIR = "PC/REGINA"
    Otherwise
      REXX_ENVIR = "UNKNOWN"
  End
  say ""
  say Copies("=",55)
  say left("=" source_uc_exec_name dir2updt_version,53) "="
  say left("=" "executing under" source_host_env,53) "="
  say left("=" "as a" source_call_type,53) "="
  say left("=  on" date() "at" time()".",53) "="
  say Copies("=",55)
  say ""
  RETURN


  /*------------------------------------------------------*/
  /* Syntax error routine                                 */
  /*------------------------------------------------------*/
syntax:
  xrc = rc
  say "xrc="xrc
  sigl_record = sigl
  MY_DATA=SOURCELINE(SIGL_RECORD)
  say sigl_record my_data
  call error 'E', rc, '==> REXX Error No.' xrc '@ line',
    sigl_record
  return

  /*------------------------------------------------------*/
  /* Halt   error routine                                 */
  /*------------------------------------------------------*/
halt:
  call error 'E', 220, '==> REXX Interrupted'
  return

  /*------------------------------------------------------*/
  /* Common error routine                                 */
  /*------------------------------------------------------*/
error:
  type = arg(1)
  retc = arg(2)
  text = arg(3)
  ecretc = right(retc,3,'0')
  ectype = translate(type)
  ecfull = 'URLCheck' || ecretc || ectype
  say '===> 'type":" ecfull text
  if type <> 'E' then return
  if (initialized = 0) then,
    do
      so_txt = Socket('SocketSetStatus')
      parse var so_txt s_rc s_severreason
      if (s_rc <> 'Connected') then,
        say 'The status of the socket set is' s_rc s_severreason
    end
  else,
    do
      so_txt = Socket('SocketSetStatus')
      parse var so_txt s_rc s_severreason
      if (s_rc <> 'Connected') then,
        say 'The status of the socket set is' s_rc s_severreason
    end
  so_txt = Socket('Terminate')
  exit retc

Terminate_TCPIP_Services:
  *-------------------------------------------------------*/
  * Terminate the socket and exit                         */
  *-------------------------------------------------------*/
  so_txt = Socket('Terminate')
  Return

  /*------------------------------------------------------

     The HEAD command can be sent in two formats: the simple request or
the full request. The full request format of the HEAD command is defined
as follows:

    HEAD documentname HTTP/1.0<CRLF>
    request header<CRLF>

For our purpose we don't need to pass additional options in the request
header field so we can leave this field blank. However we may not omit
the closing CRLF character pair terminating the request header field
otherwise the server would not accept it as a valid command. The full
request sent to a server will return a full response in the format:

    HTTP/1.0 statuscode reasonphrase<CRLF>
    response body<CRLF>

The HTTP specification lists several information fields for the
response body that can appear in any order. Currently we are only
interested in the Last-Modified field and ignore all other fields.

     The following line shows a sample HEAD command sent to a server
with the appropriate response:

    HEAD / HTTP/1.0<CRLF><CRLF>

Response from server:

    HTTP/1.0 200 OK<CRLF>
    Server: GoServe/2.45<CRLF>
    Date: Thu, 18 Jul 1996 15:40:47 GMT<CRLF>
    Content-Type: text/html<CRLF>
    Content-Length: 1081<CRLF>
    Content-Transfer-Encoding: binary<CRLF>
    Last-Modified: Thu, 19 Oct 1995 16:27:52 GMT<CRLF>

Since we are only interested in the date when the document has been
last modified we have to search the response for this keyword. During
development of this sample I discovered that most web servers use the
exact string as shown above to identify this field, some other servers
however don't. To be able to find  the date in responses from all
servers we can simply uppercase the whole string before searching the
last-modified field.

     This is already everything we need to know for our program.

      ------------------------------------------------------*/
