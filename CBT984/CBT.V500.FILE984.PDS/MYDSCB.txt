rexx_MYDSCB:   /* We still need rexx in comment if read from SYSPROC */
/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

 Dataset:  KET2812.MIS.REXX(MYDSCB)
 Author:   KTomiak
 Contact:  "Kenneth Tomiak"<KenTomiak@KTomiak.org>
 Syntax:   MYDSCB - with the cursor on a full DSNAME.
 Overview: This edit macro will insert comment lines with the DSCB
           related information.

=======================================================================

 History of Modifications
 ------------------------
 When Who     What you did
  -------- -------- ---------------------------------------------------
  20130111 KTomiak  PDS_DIR now shows sysudirblk.
  -------- -------- ---------------------------------------------------
  20070411 KTomiak  Generalizing what this can do.
                    JCL  - general JCL
                    JOB  - jobcard
                    LOG  - action log
                    OPS  - operations instructions
                    DOC  - a documentation member
                    EDIT - rexx edit macro
                    ISPF - rexx with ispf support
                    REXX - rexx
                    ?    - Displays help
  20070410 KET2812  Original code.

=======================================================================

<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
THE_BEGINNING:
  ADDRESS ISREDIT "MACRO () NOPROCESS"
  ADDRESS ISPEXEC "CONTROL ERRORS RETURN"
  ADDRESS ISREDIT,
    "(myrw, mycl) = CURSOR"
  myrw = myrw + 0
  ADDRESS ISREDIT,
    "(myln) = Line" myrw
  parse var myln . "DSN=" fulldsn "("
  parse var fulldsn fulldsn ","
  parse var fulldsn fulldsn " "
  if (fulldsn >< "") then call launch_it
  exit 0


launch_it:
  fulldsn = "'"fulldsn"'"
  loc_opt = "VOLUME("some_vol")"
  loc_opt = ""
  dsi_opt = "DIRECTORY RECALL SMSINFO" /* last-reference date updated */
  quietly = MSG("OFF")
  dsi_rc=LISTDSI(fulldsn loc_opt dsi_opt)
  asitwas = MSG(quietly)
  if (dsi_rc > 4) then,
    DO
      ZERRHM = "*"
      ZERRALRM = "YES"
      ZERRSM = "LISTDSI"
      ZERRLM = "Failed, RC="dsi_rc
      ADDRESS ISPEXEC "VPUT (ZERRSM ZERRLM ZERRHM ZERRALRM) SHARED"
      ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
      return
      if (sysreason > 0) then,
        DO
          ZERRHM = "*"
          ZERRALRM = "YES"
          ZERRSM = "LISTDSI"
          ZERRLM = "REASON > 4, SYSREASON="sysreason,
            sysmsglvl1 sysmsglvl2
          ADDRESS ISPEXEC "VPUT (ZERRSM ZERRLM ZERRHM ZERRALRM) SHARED"
          ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
          return
        end
    end
/*
     rc           (0=good, 4=partial, 16=failure)
     sysdsname
     sysvolume
     sysunit
     sysdsorg     (ps, psu, da, dau, is, isu, po, pou, vs)
     sysrecfm     (u, f, v, t, b, s, a, m)
     syslrecl
     sysblksize
     syskeylen
     sysalloc
     sysused
     sysusedpages
     sysprimary
     sysseconds
     sysunits
     sysextents
     syscreate    yyyy/doy
     sysrefdate   yyyy/doy
     sysexdate    yyyy/doy
     syspassword  (none, read, write)
     sysracfa     (none, generic, discrete)
     sysupdated   (yes, no)
     systrkscyl   (for unit type)
     sysblkstrk   (for unit type)
     sysadirblk
     sysudirblk
     sysmembers
     sysreason
     sysmsglvl1
     sysmsglvl2
     sysdssms
     sysdataclass
     sysstorclass
     sysmgmtclass
*/
  select
    when (sysunits = "CYLINDER") then space_unit = "CYL"
    when (sysunits = "TRACK") then space_unit = "TRK"
    when (sysunits = "BLOCK") then space_unit = sysblksize
    Otherwise
      space_unit = "?????"
  end
  dirs = ""
  select
    when (SYSADIRBLK = "NO_LIM") then dirs = "0"
    when (left(sysdsorg,2) = "PO") then,
      dirs = SYSADIRBLK + 0
    otherwise
      dirs = ""
  end
  syscreate_date = chg_date(syscreate)
  sysrefdate_date = chg_date(sysrefdate)
  sysexdate_date = chg_date(sysexdate)

  if (sysreason > 0) then,
    DO
      mymsg = "//*" sysmsglvl2
      Address IsrEdit,
        "LINE_AFTER" myrw "= DATALINE (MYMSG)"
      MYRC=RC
      mymsg = "//*" sysmsglvl1
      Address IsrEdit,
        "LINE_AFTER" myrw "= DATALINE (MYMSG)"
      MYRC=RC
    end
  mymsg = "//*            DFSMS="sysdssms
  Address IsrEdit,
    "LINE_AFTER" myrw "= DATALINE (MYMSG)"
  MYRC=RC
  mymsg = "//*            DATACLAS="sysdataclass||,
    ",STORCLAS="sysstorclass",MGMTCLAS="sysmgmtclass
  Address IsrEdit,
    "LINE_AFTER" myrw "= DATALINE (MYMSG)"
  MYRC=RC
  mymsg = "//*            PASSWORD="syspassword||,
    ",RACF="sysracfa
  Address IsrEdit,
    "LINE_AFTER" myrw "= DATALINE (MYMSG)"
  MYRC=RC
  mymsg = "//*            CREDATE="syscreate_date||,
    ",REFDATE="sysrefdate_date",EXPDATE="sysexdate_date
  Address IsrEdit,
    "LINE_AFTER" myrw "= DATALINE (MYMSG)"
  MYRC=RC
  mymsg = "//*            USED="sysalloc sysunits
  if ((left(sysdsorg,2) = "PO") & (SYSADIRBLK = "NO_LIM")) then,
    mymsg = mymsg,
    "PDSE_PAGES("sysusedpages")"
  if ((left(sysdsorg,2) = "PO") & (SYSADIRBLK >< "NO_LIM")) then,
    mymsg = mymsg,
    "PDS_DIR("sysudirblk")"
  Address IsrEdit,
    "LINE_AFTER" myrw "= DATALINE (MYMSG)"
  MYRC=RC
  mymsg = "//*            DCB=(DSORG="sysdsorg ||,
    ",RECFM="sysrecfm",BLKSIZE="sysblksize",LRECL="syslrecl")"
  Address IsrEdit,
    "LINE_AFTER" myrw "= DATALINE (MYMSG)"
  MYRC=RC
  mymsg = "//*           ",
    "SPACE=("space_unit",("sysprimary","sysseconds","dirs"),RLSE),"
  Address IsrEdit,
    "LINE_AFTER" myrw "= DATALINE (MYMSG)"
  MYRC=RC
  mymsg = "//*            UNIT="sysunit",VOL=SER="sysvolume","
  Address IsrEdit,
    "LINE_AFTER" myrw "= DATALINE (MYMSG)"
  MYRC=RC
  if (SYSADIRBLK = "NO_LIM") then
    do
      mymsg = "//*            DSNTYPE=LIBRARY,"
      Address IsrEdit,
        "LINE_AFTER" myrw "= DATALINE (MYMSG)"
      MYRC=RC
    end
  IF (MYRC > 4) THEN,
    DO
      ZERRHM = "*"
      ZERRALRM = "YES"
      ZERRSM = "LINE_AFTER"
      ZERRLM = "Failed to insert line, RC="MYRC
      ADDRESS ISPEXEC "VPUT (ZERRSM ZERRLM ZERRHM ZERRALRM) SHARED"
      ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
    END
  return

/*                                                    */
chg_date: Procedure
  parse arg my_date
  parse var my_date my_year "/" my_doy
  if (my_year = "0000") then return "NO_EXP"
  my_date = Date("U",right(my_year,2)||my_doy,"J")
  return my_date

/*                                                    */
