/* rexx */
Rexx_DRISFAPI: /* We still need rexx in comment if read from SYSPROC */
  rexxpgm_version = "01.04"           /* ver lev */

  PARSE ARG all_my_arguments

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This code drives Initialization, Process, and Termination routines.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Main_Routine:
  return_code = Initialization_Routine()
  IF (return_code = 0) THEN DO
    return_code = Process_Routine()
  END
  return_code = Termination_Routine()
  RETURN return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

 Dataset:  DEMO.REXX(DRISFAPI)
 Author:   KTomiak
 Contact:  "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
 Syntax:   %drisfapi |isfprefix|
 Overview: Capture all matching jobnames to both a sequential dataset
           and members of a PDS. Member names must be unique, perhaps
           I shall assign numeric numbers of my own because I allow
           appending to the data sets.

 JCL:      DEMO.CNTL(DRISFAPI)

    //ST01#01 EXEC PGM=IKJEFT1B,PARM='',
    //             DYNAMNBR=32,REGION=32M
    //SYSTSIN   DD DATA,DLM='!!'
    %DRISFAPI KTOMIAK
    LOGOFF
    %DRISFAPI DRJOBS
    KT
    //SYSTSPRT  DD SYSOUT=*
    //SYSEXEC   DD DISP=SHR,DSN=&SYSUID..DEMO.REXX
    //SYSIN     DD DATA,DLM=KT
    KTOMIAK.ERASEJOB.Y2018.M05.D10.PO.LISTING
    KTOMIAK.ERASEJOB.Y2018.M05.D10.PS.LISTING
    !!

=======================================================================

 History of Modifications
 ------------------------
vv.mm WHEN     Who / What you did ... (Newest change at the top.)
----- -------- -------- -----------------------------------------------
01.04 20180510 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
         -     1) Stylize using Edit Macro @putktm:
      20180428    Programming Using The Kenneth Tomiak Method.
               2) Stylize using template $putktm:
                  Programming Using The Kenneth Tomiak Method.
----- -------- --------------------------------------------------------
01.03 20090627 KTomiak  Fixed variable in ps_ ERROR message.
----- -------- -------- -----------------------------------------------
01.02 20090605 KTomiak  Mod mbr_ctr if dsn exists.
----- -------- -------- -----------------------------------------------
01.01 20090603 KTomiak  Changed pos.job_ctr to just job_ctr.
----- -------- -------- -----------------------------------------------
01.00 20081205 KTomiak  Original code.
----- -------- -------- -----------------------------------------------

=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine initializes constants and variables.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Initialization_Routine:
  return_code = 0
  PARSE VERSION,
    version_rexx_name,
    version_rexx_version,
    version_rexx_date
  PARSE SOURCE,
    source_host_env,
    source_call_type,
    source_uc_exec_name,
    source_hostdd,
    source_hostdsn,
    source_nf_exec_name,
    source_initial_cmd_env,
    source_asid_name,
    source_char8_user_token,
    source_hostother
  mvsvar_sysname = MVSVAR("SYSNAME")
  sysvar_syspref = SYSVAR("SYSPREF")
  sysvar_sysuid = SYSVAR("SYSUID")
  sysvar_sysenv = SYSVAR("SYSENV")
  SAY ""
  SAY COPIES("=",79)
  SAY LEFT("=" source_uc_exec_name rexxpgm_version,77) "="
  SAY LEFT("= executing under" source_host_env,77) "="
  SAY LEFT("= as a" source_call_type,77) "="
  SAY LEFT("= on" DATE() "at" TIME()".",77) "="
  SAY COPIES("=",79)
  SAY LEFT("= SYSNAME" mvsvar_sysname,77) "="
  SAY LEFT("= SYSPREF" sysvar_syspref,77) "="
  SAY LEFT("= SYSUID" sysvar_sysuid,77) "="
  SAY LEFT("= SYSENV" sysvar_sysenv,77) "="
  SAY COPIES("=",79)

  PARSE VAR all_my_arguments isfprefix +8 .

  isfprefix = SPACE(isfprefix,0)
  SAY LEFT("= JOB Prefix:" isfprefix,77) "="
  SAY COPIES("=",79)
  SAY ""

  IF (source_host_env <> "TSO") THEN DO
    SAY "Wrong host environment" source_host_env
    return_code = 16
    RETURN return_code
  END

  isfcalls_rc = ISFCALLS("ON")
  SAY "ISFCALLS RC("isfcalls_rc")"
  IF (isfcalls_rc <> 0) THEN DO
    SAY "ISFCALLS ON failed, RC("isfcalls_rc")."
    return_code = 16
    RETURN return_code
  END

  trace irs
  ADDRESS MVS "EXECIO" ,
    "* DISKR SYSIN 0 (STEM myinput.)"
  sysin_rc = RC
  IF (sysin_rc <> 0) THEN DO
    SAY "EXECIO error reading //SYSIN, RC("sysin_rc")."
    return_code = 16
    RETURN return_code
  END
  SAY myinput.0 "record(s) read from //SYSIN."

  IF (myinput.0 <> 2) THEN DO
    SAY "//SYSIN requires two output data set names."
    SAY ""
    SAY "The first is for a PDS. Used if found, else allocated."
    SAY "The second is for a PS. Used if found, else allocated."
    return_code = 16
    RETURN return_code
  END

  po_dsname = WORD(myinput.1,1)
  apost_dsn = "'"po_dsname"'"
  SAY "PDS:" apost_dsn
  dsi_rc =  Check_Dsname("po_")
  mbr_ctr = po_sysmembers
  IF (dsi_rc > 4) THEN DO
    IF (po_sysreason > 0) THEN DO
      SAY source_uc_exec_name": ERROR:" po_sysreason":" apost_dsn
      SAY source_uc_exec_name":             " po_sysmsglvl1
      SAY source_uc_exec_name":             " po_sysmsglvl2
      return_code = sysreason
      null = VALUE(var_prefix"sysmembers",0)
    END
    ELSE DO
      "ALLOC FILE(PO) DATASET('"po_dsname"')",
        "NEW CATALOG UNIT(SYSALLDA) SPACE(500,500) TRACKS DIR(450)",
        "DSORG(PO) RECFM(V B A) BLKSIZE(0) LRECL(255)"
      alloc_rc = RC
      IF (alloc_rc <> 0) THEN DO
        SAY "Allocate of" po_dsname "failed."
        return_code = 16
        RETURN return_code
      END
      "FREE FILE(PO)"
      mbr_ctr = 0
    END
  END

  ps_dsname = WORD(myinput.2,1)
  apost_dsn = "'"ps_dsname"'"
  dsi_rc =  Check_Dsname("ps_")
  IF (dsi_rc > 4) THEN DO
    IF (ps_sysreason > 0) THEN DO
      SAY source_uc_exec_name": ERROR:" ps_sysreason":" apost_dsn
      SAY source_uc_exec_name":             " ps_sysmsglvl1
      SAY source_uc_exec_name":             " ps_sysmsglvl2
      return_code = sysreason
    END
    ELSE DO
      "ALLOC FILE(PS) DATASET('"ps_dsname"')",
        "NEW CATALOG UNIT(SYSALLDA) SPACE(500,500) TRACKS",
        "DSORG(PS) RECFM(V B A) BLKSIZE(0) LRECL(255)"
      alloc_rc = RC
      IF (alloc_rc <> 0) THEN DO
        SAY "Allocate of" ps_dsname "failed."
        return_code = 16
        RETURN return_code
      END
    END
  END
  ELSE DO
    "ALLOC FILE(PS) DATASET('"ps_dsname"') MOD"
  END

  ADDRESS SDSF "ISFEXEC WHO"
  sdsf_rc = RC
  IF (sdsf_rc > 8) THEN DO
    SAY "sdsf RC("sdsf_rc")"
    show_rc = Show_Isf_Message()
    SAY "DIAG("isfdiag")"
    return_code = sdsf_rc
    RETURN return_code
  END

  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine does the processing.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_Routine:
  SAY ""
  isfcols = "JNAME TOKEN POS JOBID QUEUE"
  ADDRESS SDSF "ISFEXEC ST"
  sdsf_rc = RC
  IF (sdsf_rc > 8) THEN DO
    SAY "sdsf RC("sdsf_rc")"
    show_rc = Show_Isf_Message()
    SAY "DIAG("isfdiag")"
    return_code = sdsf_rc
    RETURN return_code
  END

  IF (isfrows > 0) THEN DO
    SAY "Output from ST has" isfrows "rows."
    this_job_name = WORD(isfcols,1)
    this_job_nbr  = WORD(isfcols,4)

    DO job_ctr = 1 TO JNAME.0
      SAY "Job:" VALUE(this_job_name"."job_ctr) JOBID.job_ctr,
        QUEUE.job_ctr
      get_rc = Get_All_Output()
      IF (get_rc <> 0) THEN DO
        SAY "Error in Get_All_Output, RC("get_Rc")."
        return_code = get_rc
        RETURN return_code
      END
    END
  END
  ELSE DO
    SAY ""
    SAY "No rows returned, sorry. Play again?"
    SAY ""
    return_code = 1214
  END

  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine does cleanup before exiting.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Termination_Routine:
  RC = ISFCALLS("OFF")
  ADDRESS MVS ,
    "EXECIO 0 DISKW PS (FINIS"
  RETURN return_code

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 Loop through each job and get the output.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
  /*****************************************/
  /* Issue the ? (JDS) action against the  */
  /* row to list the data sets in the job. */
  /*****************************************/
    /*****************************************/
    /* Process each DDNAME of the job.       */
    /*****************************************/
      /*****************************************************/
      /* Read the records from the data set and list them. */
      /* The ddname for each allocated data set will be in */
      /* the isfddname stem.  Since the SA action was done */
      /* from JDS, only one data set will be allocated.    */
      /*****************************************************/
    /*****************************************/
  /*****************************************/
Get_All_Output:
  get_rc = 0
  mbr_ctr = mbr_ctr + 1
  right_job = RIGHT(mbr_ctr,7,0)
  ADDRESS SDSF "ISFACT ST TOKEN('"TOKEN.job_ctr"') PARM(NP SA)" ,
    "( prefix jds_"
  isfact_rc = RC
  IF (isfact_rc <> 0) THEN DO
    SAY "Error in PARM(NP SA), RC("isfact_rc")."
    show_rc = Show_Isf_Message()
    return_code = isfact_rc
    RETURN return_code
  END
  "ALLOC FILE(PO) DATASET('"po_dsname"($"right_job")') SHR REUSE"

  updte.0=1
  updte.1 = "./$"right_job "ADD NAME="right_job  "ZLUSER="jobid.job_ctr
  ADDRESS MVS ,
    "EXECIO" updte.0 "DISKW PS (STEM updte."

  DO isf_dd_ctr = 1 TO isfddname.0
    SAY "    " isfdsname.isf_dd_ctr
 /* ????????.ERASCA00.JOB00824.D0000002.JESMSGLG */
 /* ownerid  jobname  jobnbr   ddnbr    ddname   */
    PARSE VAR isfdsname.isf_dd_ctr,
      job_ownerid "." ,
      job_jobname ".",
      job_jobnbr "." ,
      job_ddnbr  "." ,
      job_ddname "."      .
    myline.0 = 5
    myline.1 = ""
    myline.2 = "1"COPIES("*",135)
    myline.3 = "                " job_jobnbr"-"job_ddnbr"-"job_ddname
    myline.4 = "1"COPIES("*",135)
    myline.5 = ""
    ADDRESS MVS ,
      "EXECIO" myline.0 "DISKW PS (STEM myline."
    ADDRESS MVS ,
      "EXECIO" myline.0 "DISKW PO (STEM myline."
    ADDRESS MVS ,
      "EXECIO * DISKR" isfddname.isf_dd_ctr "(STEM line. FINIS"
    ADDRESS MVS ,
      "EXECIO" line.0 "DISKW PS (STEM line."
    ADDRESS MVS ,
      "EXECIO" line.0 "DISKW PO (STEM line."

  END
  ADDRESS MVS ,
    "EXECIO 0 DISKW PO (FINIS"
  "FREE FILE(PO)"
  RETURN get_rc

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 Show extended ERROR help.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Show_Isf_Message:
  SAY "isfmsg is:" isfmsg
  IF (isfmsg2.0 > 0) THEN DO
    DO isfmsg_ctr = 1 TO isfmsg2.0
      SAY "isfmsg2."isfmsg_ctr "is:" isfmsg2.isfmsg_ctr
    END
  END
  RETURN 0

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 Use listdsi to see if data set exists, if so we mod to it.
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
Check_Dsname:
  var_prefix = ARG(1)
  dsi_opt = "DIRECTORY RECALL SMSINFO" /* last-reference date updated */
  quietly = MSG("OFF")
  dsi_rc = LISTDSI(apost_dsn dsi_opt)
  quietly = MSG("ON")
  IF (dsi_rc > 4) THEN DO
    SAY "LISTDSI RC("dsi_rc") SYSREASON("sysreason")."
    IF (sysreason > 0) THEN DO
      RETURN sysreason
    END
  END
  null = VALUE(var_prefix"rc",rc          )
  null = VALUE(var_prefix"sysdsname",SYSDSNAME   )
  null = VALUE(var_prefix"sysvolume",SYSVOLUME   )
  null = VALUE(var_prefix"sysunit",SYSUNIT     )
  null = VALUE(var_prefix"sysdsorg",SYSDSORG    )
  null = VALUE(var_prefix"sysrecfm",SYSRECFM    )
  null = VALUE(var_prefix"syslrecl",SYSLRECL    )
  null = VALUE(var_prefix"sysblksize",SYSBLKSIZE  )
  null = VALUE(var_prefix"syskeylen",SYSKEYLEN   )
  null = VALUE(var_prefix"sysalloc",SYSALLOC    )
  null = VALUE(var_prefix"sysused",SYSUSED     )
  null = VALUE(var_prefix"sysusedpages",SYSUSEDPAGES)
  null = VALUE(var_prefix"sysprimary",SYSPRIMARY  )
  null = VALUE(var_prefix"sysseconds",SYSSECONDS  )
  null = VALUE(var_prefix"sysunits",SYSUNITS    )
  null = VALUE(var_prefix"sysextents",SYSEXTENTS  )
  null = VALUE(var_prefix"syscreate",SYSCREATE   )
  null = VALUE(var_prefix"sysrefdate",SYSREFDATE  )
  null = VALUE(var_prefix"sysexdate",SYSEXDATE   )
  null = VALUE(var_prefix"syspassword",SYSPASSWORD )
  null = VALUE(var_prefix"sysracfa",SYSRACFA    )
  null = VALUE(var_prefix"sysupdated",SYSUPDATED  )
  null = VALUE(var_prefix"systrkscyl",SYSTRKSCYL  )
  null = VALUE(var_prefix"sysblkstrk",SYSBLKSTRK  )
  null = VALUE(var_prefix"sysadirblk",SYSADIRBLK  )
  null = VALUE(var_prefix"sysudirblk",SYSUDIRBLK  )
  null = VALUE(var_prefix"sysmembers",SYSMEMBERS  )
  null = VALUE(var_prefix"sysreason",SYSREASON   )
  null = VALUE(var_prefix"sysmsglvl1",SYSMSGLVL1  )
  null = VALUE(var_prefix"sysmsglvl2",SYSMSGLVL2  )
  null = VALUE(var_prefix"sysdssms",SYSDSSMS    )
  null = VALUE(var_prefix"sysdataclass",SYSDATACLASS)
  null = VALUE(var_prefix"sysstorclass",SYSSTORCLASS)
  null = VALUE(var_prefix"sysmgmtclass",SYSMGMTCLASS)
  RETURN 0
/*
     RC           (0=good, 4=partial, 16=failure)
     sysdsorg     (ps, psu, da, dau, is, isu, po, pou, vs)
     sysrecfm     (u, f, v, t, b, s, a, m)
     syscreate    yyyy/doy
     sysrefdate   yyyy/doy
     sysexdate    yyyy/doy
     syspassword  (none, read, write)
     sysracfa     (none, generic, discrete)
     sysupdated   (yes, no)
     systrkscyl   (for unit type)
     sysblkstrk   (for unit type)
*/

/* >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
=======================================================================
__DATA__
=======================================================================
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< */
/*

Panel  Column      Title               Delayed?  Overtype?
ST     JNAME       JOBNAME
ST     JTYPE       Type
ST     JNUM        JNum
ST     JOBID       JobID
ST     OWNERID     Owner
ST     JPRIO       Prty                          X
ST     QUEUE       QUEUE
ST     JCLASS      C
ST     POS         Pos
ST     SYSAFF      SAff                          X
ST     ACTSYS      ASys
ST     STATUS      Status
ST     PRTDEST     PrtDest                       X
ST     SECLABEL    SecLabel
ST     TGNUM       TGNum
ST     TGPCT       TGPct
ST     ORIGNODE    OrigNode
ST     EXECNODE    ExecNode                      X
ST     DEVID       Device
ST     RETCODE     Max-RC
ST     SRVCLS      SrvClass                      X
ST     WLMPOS      WPos                X
ST     SCHENV      Scheduling-Env      X         X
ST     DELAY       Dly
ST     SSMODE      Mode
ST     ROOMN       RNum                X
ST     PNAME       Programmer-Name     X
ST     ACCTN       Acct                X
ST     NOTIFY      Notify              X
ST     ISYSID      ISys                X
ST     TIMER       Rd-Time             X
ST     DATER       Rd-Date             X
ST     ESYSID      ESys                X
ST     TIMEE       St-Time             X
ST     DATEE       St-Date             X
ST     TIMEN       End-Time            X
ST     DATEN       End-Date            X
ST     ICARDS      Cards               X
ST     MCLASS      MC                  X
ST     TSREC       Tot-Lines           X
ST     OFFDEVS     OffS
ST     SPIN        Spin                X
ST     SUBGROUP    SubGroup            X

*/

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
End of code.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
