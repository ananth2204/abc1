/* We first need rexx in comment if compiled or read from SYSPROC. */
rexx_demotbl1:
  rexxpgm_version = "01.00"          /* Set with 'ver 1' and 'lev 2'. */


/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This code drives Initialization, Process, and Termination routines.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_Main_Code:
  return_code = Initialization_routine()
  If (return_code = 0) Then do
    return_code = Process_routine()
  End
  return_code = Termination_routine()
  If (source_host_env = "TSO") Then do
    DROPBUF
  End
  Return return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

  Dataset:  TSO.REXX(DEMOTBL1)
  Contact:  "Kenneth E. Tomiak"<CBT_Ken@KTomiak.BIZ>
  Overview: This is an ISPF dialog driver program. It will display a
            panel and process requests until the user exits.

            A demonstration sample of TBDISPL with point and shoot
            fields to sort the table based on a column heading.
  Syntax:   %demotbl1

=======================================================================

  History of Modifications
  ------------------------
vv.mm When     Who  /  What you did
----- -------- --------------------------------------------------------
01.00 20170321 "Kenneth E. Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Original code.
----- -------- --------------------------------------------------------

=======================================================================

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */


/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine initializes constants and variables.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Initialization_routine:
  ADDRESS ISPEXEC "CONTROL ERRORS Return"
  return_code = 0
  PARSE VERSION,
    version_rexx_name,
    version_rexx_version,
    version_rexx_date
  PARSE SOURCE,
    source_host_env,
    source_call_type,
    source_uc_exec_name,
    source_hostdd,
    source_hostdsn,
    source_nf_exec_name,
    source_initial_cmd_env,
    source_asid_name,
    source_char8_user_token,
    source_hostother

  MAKEBUF

  sysvar_sysuid = SYSVAR("SYSUID")
  sysvar_sysenv = SYSVAR("SYSENV")
  sysvar_sysispf = SYSVAR("SYSISPF")
  tsopfx = SYSVAR("SYSPREF")
  function_rc = rexx_Jobspecs()

  If (sysvar_sysispf >< "ACTIVE") Then Do
    Say ""
    Say Copies("=",55)
    Say left("=" job_specs,53) " ="
    Say left("=" source_uc_exec_name rexxpgm_version,53) " ="
    Say left("=  executing under" source_host_env,53) " ="
    Say left("=  as a" source_call_type,53) " ="
    Say left("=  on" date() "at" time()".",53) " ="
    Say Copies("=",55)
    Say ""
    return_code = 28
    Return return_code
  End

  ZERRHM = "DEMOTUTR"
  ZERRALRM = "Yes"
  ZERRSM = ""
  ZERRLM = ""

  ADDRESS ISPEXEC "LIBDEF ISPPLIB DATASET",
    "ID('KTOMIAK.ISPF.PANELS') STACK"
  ispexec_rc = RC
  If (ispexec_rc >< 0) Then Do
                /*  4  - Application library does not exist for   */
                /*       this type if a delete requested.         */
                /*  8  - Application already exists for this type */
                /*       if COND specified.                       */
                /* 12  - ISPPROF was specified as the lib-type or */
                /*       EXCLDATA or EXCLLIBR was specified with  */
                /*       lib-type other than ISPXLIB or ISPLLIB.  */
                /* 16  - A libname was not allocated or the       */
                /*       dataset-list is incomplete.              */
                /* 20 -  Severe error.                            */
    Say "LIBDEF of ISPPLIB failed, rc="ispexec_rc
    Say "SO bail out now!"
    return_code = ispexec_rc
  end

  Address ISPEXEC "TBCLOSE DEMOTBL1"
  Address ISPEXEC "TBCREATE DEMOTBL1" ,
    "KEYS(DEMOCOL1)" ,
    "NAMES(ZSEL, DEMOCOL2, DEMOCOL3, DEMOCOL4)" ,
    "REPLACE SHARE NoWRITE"
  tbcreate_rc = RC
                /*  4 - Duplicate table exists but   */
                /*      "replace" specified          */
                /*  8 - Table already exists;        */
                /*      "replace" not specified      */
                /* 12 - Table in use; enq failed     */
                /* 16 - Table input library not      */
                /*      allocated with "write"       */
                /* 20 - Severe error                 */
  If (tbcreate_rc > 4) then do
    Say "TBCREATE failure:" tbcreate_rc
    return_code = 44
  End
  Else Do
    ZSEL = ""
    democol1 = "1st row"
    democol2 = "Alive"
    democol3 = "Humanoid"
    democol4 = "Something resembling people of the planet Earth" ,
      "in the Milky Way."
    Address ISPEXEC "TBADD DEMOTBL1"
    tbadd_rc = RC
              /*  4 - Number of rows parameter   */
              /*      was specified but storage  */
              /*      was only obtained for a    */
              /*      single row                 */
              /*  8 - Key tables: a row with the */
              /*      same key already exists;   */
              /*      crp set to top             */
              /* 12 - Table is not open          */
              /* 20 - Severe error               */
    random_seed = Random()
    Do tbadd_ctr = 2 to 50
      Address ISPEXEC "TBCLEAR DEMOTBL1"
      democol1 = tbadd_ctr "Row"
      random_seed = Random(1,50)
      democol2 = "Alt" random_seed
      democol3 = "Column"
      democol4 = "  Filler  " tbadd_ctr
      Address ISPEXEC "TBADD DEMOTBL1"
    End tbadd_ctr
    tb_field = 1
    tb_order. = "A"
    Address ISPEXEC "TBSORT DEMOTBL1" ,
      "FIELDS(DEMOCOL"tb_field",C,"tb_order.tb_field")"
    Address ISPEXEC "TBTOP DEMOTBL1"
    return_code = 0
  End
  Return return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine does the processing.
 The panel is displayed and the user's choices acted upon.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_routine:
  demohdr1 = "Nickname"
  demohdr2 = "MBRSTAT"
  If (sysvar_sysuid = "KTOMIAK") then amt = "HALF"
  Else amt = "PAGE"
  orig_amt = amt
  Do While (return_code = 0)
    msg_rc = 0
    Address ISPEXEC "TBDISPL DEMOTBL1 PANEL(DEMOTBL1)"
    /* MSG('msg-id') CURSOR('field'),
       CSRROW('row#') CSRPOS('pos#') AUTOSEL(YES),
       POSITION('crpname') ROWID('rowidname') MSGLOC('msgfield')'
      msg-id     - Optional, message to be displayed on the panel.
      field      - Optional, identifies the column in which the
                   cursor is to be placed.
      row#       - Optional, table row number of the screen line
                   where the cursor is to be placed.
      pos#       - Optional, position in field to place cursor.
                   The default is 1.
      AUTOSEL    - Optional, choose one.
        YES      - Default, always return contents of row.
        NO       - Return contents of row only if modified.
      crpname    - Optional, the name of a variable in which the row
                   number pointed to by the crp is to be stored.
      rowidnam   - Optional, the name of a variable in which a number
                   that uniquely identifies the row being accessed is to
                   be stored.
      msgfield   - Optional, name of the field relative to which the
                   message pop-up is positioned.
    */
    tbdispl_rc = RC
                  /* 4  - The enter key or scroll      */
                  /*      command used; additional data*/
                  /*      remains to be stored         */
                  /* 8  - The end or return command was*/
                  /*      entered.  If crp at top, no  */
                  /*      lines modified               */
                  /*    - Panel was generated from tags*/
                  /*      and the EXIT command was     */
                  /*      entered                      */
                  /* 12 - Panel or message not found or*/
                  /*      table not open               */
                  /* 20 - Severe error                 */
    Select
      When (tbdispl_rc < 5) Then Do
        zcmd_handler_rc = zcmd_handler()
        zsel_handler_rc = zsel_handler()
      End
      When (tbdispl_rc = 8) Then Do
        ZERRSM = "Okay."
        ZERRLM = "You asked to leave."
        ADDRESS ISPEXEC "VPUT (ZERRALRM ZERRHM ZERRSM ZERRLM)",
          "SHARED"
        ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
        return_code = 30
      End
      When (tbdispl_rc > 0) Then Do
        Say "return_code > 0"
        Say "DEBUGGING NEEDED ON DEMOTBL1:" return_code
        return_code = 32
      End
      Otherwise Do
        Say zcmd
      End
    End
  End
  Return return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine does any pre-termination cleanup.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Termination_routine:
  ADDRESS ISPEXEC "LIBDEF ISPPLIB DATASET"
  If (return_code > 0) Then Do
    If (sysvar_sysispf = "ACTIVE") Then Do
      If (msg_rc = 1) Then Do
        If (ZERRSM = "") Then Do
          ZERRSM = "An unhappy ending"
          ZERRLM = "Some unhappy turn of events is sending back",
            "a RETURN code higher than 0 with no message."
        End
        ADDRESS ISPEXEC "VPUT (ZERRALRM ZERRHM ZERRSM ZERRLM)",
            "SHARED"
        ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
      End
    End
    Else Do
      Say Copies("*",55)
      Say left("* FINAL RC=" return_code,53) " *"
      Say Copies("*",55)
    End
  End
  Return return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Follow MVS control blocks to discover my task names.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_Jobspecs:
  PSATOLD  = STORAGE(21C,4)                        /* Pointer to TCB */
  PTRTIOT  = STORAGE(D2X(C2D(PSATOLD)+12),4)      /* Pointer to TIOT */
  jobspecs_JOBNAME  = STORAGE(D2X(C2D(PTRTIOT)),8)
  jobspecs_STEPNAME = STORAGE(D2X(C2D(PTRTIOT)+8),8)
  jobspecs_PROCNAME = STORAGE(D2X(C2D(PTRTIOT)+16),8)
  Tcbjscbb = Storage(D2x(C2d(Psatold)+181),3)                /* jscb */
  jscbssib = STORAGE(D2X(C2D(tcbjscbb)+316),4)        /* Ptr to SSIB */
  jobspecs_ssibjbid = STORAGE(D2X(C2D(jscbssib)+12),8)
    jobspecs_jobtype  = Substr(jobspecs_ssibjbid,1,3)
    jobspecs_tasknum  = Substr(jobspecs_ssibjbid,4,5)
  Return 0
  Say "ssibjbid="jobspecs_ssibjbid

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Follow MVS control blocks to discover what RACF groups they are in.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_SAF:
  psaold   = Storage(D2x(548),4)             /* Pointer to curr ASCB */
  ascbasxb = Storage(D2x(C2d(psaold)+108),4)     /* Get ASXB address */
  asxbsenv = Storage(D2x(C2d(ascbasxb)+200),4)   /* Get ACEE address */
  aceefcgp = Storage(D2x(C2d(asxbsenv)+116),4)     /* get group list */
  cgrplen  = C2d(Storage(D2x(C2d(aceefcgp)+5),3))     /* list length */
  cgrp     = Storage(D2x(C2d(aceefcgp)+32),(cgrplen-32))   /* groups */
  saf_groups   = ""
  Do loop = 1 to cgrplen by 24                   /* loop thru groups */
    saf_groups = saf_groups";"Strip(Substr(cgrp,loop,8))   /* append */
  End                                        /* end loop thru groups */
  Return 0
  Say "List-of-Groups="saf_groups

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Follow MVS control blocks to discover what machine they are on.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_Hardware:
  PTR2PSA  = 0                                     /* Pointer to PSA */
  CVTPTR   = STORAGE(D2X(PTR2PSA + 16),4)          /* Pointer to CVT */
  CVT      = BitAnd(CVTPTR,"7FFFFFFF"X)       /* Flip high order bit */
  CSDPTR   = STORAGE(D2X(C2D(CVT)+X2D("294")),4)   /* Pointer to CSD */
  CSD      = BitAnd(CSDPTR,"7FFFFFFF"X)       /* Flip high order bit */
  hardware_CPUENG = C2D(STORAGE(D2X(C2D(CSD)+10),2))
  PCCAAVT  = STORAGE(D2X(C2D(CVT)+X2D("2FC")),4)
  PCCAAVT  = BitAnd(PCCAAVT,"7FFFFFFF"X)
  Do I = 0 TO 60 BY 4
    PCCA = STORAGE(D2X(C2D(PCCAAVT)+I),4)
    PCCA = BitAnd(PCCA,"7FFFFFFF"X)
    If PCCA == "00000000"X Then Iterate I
    INFO = STORAGE(C2X(PCCA),32)
    hardware_CPUID   = SubStr(INFO,7,1)
    hardware_CPUSN   = SubStr(INFO,8,5)
    hardware_CPUTYPE = SubStr(INFO,13,4)
  End
  Return 0
  Say "Hardware="hardware_CPUENG
  Say "        ="hardware_CPUID
  Say "        ="hardware_CPUSN
  Say "        ="hardware_CPUTYPE

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Follow MVS control blocks to discover what server (host) they are on.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_Server_Info:
  PTR2PSA  = 0                                     /* Pointer to PSA */
  CVTPTR   = STORAGE(D2X(PTR2PSA + 16),4)          /* Pointer to CVT */
  ECVTPTR  = STORAGE(D2X(C2D(CVTPTR)+140),4)      /* Pointer to ECVT */
  server_ECVTSPLX = STORAGE(D2X(C2D(ECVTPTR)+8),8)    /* SYSPLEXNAME */
  CVTSMCA  = STORAGE(D2X(C2D(CVTPTR)+197),3)      /* Pointer to SMCA */
  server_SMFID = STORAGE(D2X(C2D(CVTSMCA)+16),4)   /* SMF Identifier */
  mvsvar_sysname = MvsVar("SYSNAME")
  if (server_smfid >< mvsvar_sysname) Then Do
    Say "Tricky Having Your System Name Different Than The SMF ID."
  End
  Return 0
  Say "Server="server_ECVTSPLX
  Say "      ="server_SMFID
  Say "      ="mvsvar_sysname

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Follow MVS control blocks to discover what terminal they are on.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
rexx_Termid:
  ascbptr  = STORAGE(224,4)
  asxbptr  = STORAGE(D2X(C2D(ascbptr)+x2d('6c')),4)
  termptr  = STORAGE(D2X(C2D(asxbptr)+x2d('c8')),4)
  asxb_TERMID = STORAGE(D2X(C2D(termptr)+40),8)
  the_TERMID = C2X(asxb_TERMID)
  Say "Termid="the_TERMID
  Return 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 This is where the contents of the ZCMD variable are handled.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
zcmd_handler:
  my_zcmd = ZCMD
  ZCMD = ""
  Select
    When (To_Uppercase(Left(my_ZCMD,3)) = "CAN") Then Do
      Say "Cancelling"
      return_code = 32
    End
    When (my_ZCMD = "") Then Do
      If (amt >< orig_amt) Then Do
        Select
          When (To_Uppercase(Left(amt,1)) = "C") Then do
            amt = "CSR"
          End
          When (To_Uppercase(Left(amt,1)) = "H") Then do
            amt = "Half"
          End
          When (To_Uppercase(Left(amt,1)) = "P") Then do
            amt = "Page"
          End
          Otherwise Do
            amt = orig_amt
          End
        End
        orig_amt = amt
      End
    End
    When (To_Uppercase(my_ZCMD) = "TBLSORT-1") Then Do
      function_rc = Table_Sort_Header1()
    End
    When (To_Uppercase(my_ZCMD) = "TBLSORT-2") Then Do
      function_rc = Table_Sort_Header2()
    End
    When (To_Uppercase(my_ZCMD) = "X") Then Do
      ZERRSM = "Okay"
      ZERRLM = "You used X to leave."
      ADDRESS ISPEXEC "VPUT (ZERRALRM ZERRHM ZERRSM ZERRLM)",
        "SHARED"
      ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
      return_code = -1
    End
    Otherwise Do
      Say my_zcmd "is not yet something DEMO handles at this time."
      ZERRSM = "What?"
      ZERRLM = "Choose a valid option or feature."
      ADDRESS ISPEXEC "VPUT (ZERRALRM ZERRHM ZERRSM ZERRLM)",
        "SHARED"
      ADDRESS ISPEXEC "SETMSG MSG(ISRZ002)"
    End  /* End of OTHERWISE */
  End  /* End of SELECT  */
  Return return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 This is where the contents of the ZSEL variable are handled.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
zsel_handler:
  Do WHILE (ZTDSELS > 0)
    ZSEL = translate(Strip(ZSEL))
    Select
      When ZSEL = "V" Then Do
         vdsn = Strip(demodsn,"B","'")
  /*     ADDRESS ISPEXEC "VIEW DATASET('"vdsn"("MBRNAME")')"  */
      End
      When ZSEL = "E" Then Do
         vdsn = Strip(demodsn,"B","'")
  /*     ADDRESS ISPEXEC "EDIT DATASET('"vdsn"("MBRNAME")')"  */
      End
      When ZSEL = "R" Then Do
      End
      When ZSEL = "M" Then Do
      End
      When ZSEL = "C" Then Do
      End
      Otherwise Do
        mbrstat = "?" ZSEL
      End
    End
    ZSEL = ""
    Address ISPEXEC "TBPUT DEMOTBL1"
    If ztdsels > 1 Then Do
      Address ISPEXEC 'TBDISPL DEMOTBL1'
    End
    Else Do
      ZTDSELS = 0
    End
  End
  Return return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Sort the table on the first column.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Table_Sort_Header1:
  return_code = 0
  tb_field = 1
  If (tb_order.tb_field = "A") then tb_order.tb_field = "D"
  Else tb_order.tb_field = "A"
  Address ISPEXEC "TBSORT DEMOTBL1" ,
    "FIELDS(DEMOCOL"tb_field",C,"tb_order.tb_field")"
  tbsort_rc = RC
              /* 12 - Table is not open       */
              /* 16 - Numeric convert error   */
              /* 20 - Severe error            */
  Address ISPEXEC "TBTOP DEMOTBL1"
              /* 12 - Table is not open          */
              /* 20 - Severe error               */
  Return return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Sort the table on the second column.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Table_Sort_Header2:
  return_code = 0
  tb_field = 2
  If (tb_order.tb_field = "A") then tb_order.tb_field = "D"
  Else tb_order.tb_field = "A"
  Address ISPEXEC "TBSORT DEMOTBL1" ,
    "FIELDS(DEMOCOL"tb_field",C,"tb_order.tb_field")"
  tbsort_rc = RC
              /* 12 - Table is not open       */
              /* 16 - Numeric convert error   */
              /* 20 - Severe error            */
  Address ISPEXEC "TBTOP DEMOTBL1"
              /* 12 - Table is not open          */
              /* 20 - Severe error               */
  Return return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Convert string to lowercase.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
To_Lowercase: Parse arg myarg
  If (lowercase_letters = "LOWERCASE_LETTERS") Then Do
    lowercase_letters = "abcdefghijklmnopqrstuvwxyz"
  End
  If (uppercase_letters = "UPPERCASE_LETTERS") Then Do
    uppercase_letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  End
  Return Translate(myarg,lowercase_letters,uppercase_letters)

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Convert string to uppercase.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
To_Uppercase: Parse arg myarg
  If (lowercase_letters = "LOWERCASE_LETTERS") Then Do
    lowercase_letters = "abcdefghijklmnopqrstuvwxyz"
  End
  If (uppercase_letters = "UPPERCASE_LETTERS") Then Do
    uppercase_letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
  End
  Return Translate(myarg,uppercase_letters,lowercase_letters)

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
End of code.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */

