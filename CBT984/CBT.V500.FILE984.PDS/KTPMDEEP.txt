/* rexx */
Rexx_KTPMDEEP:
  rexxpgm_version = "02.04"           /* ver lev */

  ADDRESS ISPEXEC "CONTROL ERRORS RETURN"

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This code drives Initialization, Process, and Termination routines.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Main_Routine:
  return_code = Initialization_Routine()
  IF (return_code = 0) THEN DO
    return_code = Process_Routine()
  END
  return_code = Termination_Routine()
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================

 Dataset:  KTPM.REXX(KTPMDEEP)
 Contact:  "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
 Overview: Kenneth Tomiak Programming Method (KTPM) collection.
           Demonstrate a faux scrollable panel with more lines (Depth)
           than the current display session allows. The REXX code
           extracts a subset of the 'dyndata' for the 'dynarea'.
 Syntax:   %ktpmdeep

-----------------------------------------------------------------------

 History of Modifications
 ------------------------
vv.mm When     Who / What you did ... (Newest change at the top.)
----- -------- --------------------------------------------------------
02.04 20180630 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Kenneth Tomiak Programming Method (KTPM) collection.
----- -------- --------------------------------------------------------
02.03 20180505 KTOMIAK "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
         -     1) Stylize using Edit Macro @putktm:
      20180427    Programming Using The Kenneth Tomiak Method.
               2) Stylize using:
                  Programming Using The Kenneth Tomiak Method.
                 a) Moved CONTROL ERRORS RETURN above Main_Routine.
                 b) VGET.
                 c) Parentheses on WHEN.
               3) Stylize using Edit Macro @putktm:
                  Programming Using The Kenneth Tomiak Method.
               4) Stylize using template $putktm:
                  Programming Using The Kenneth Tomiak Method.
----- -------- --------------------------------------------------------
02.00 20170806 "Kenneth Tomiak"<CBT_Ken@KTomiak.BIZ>
               1) Some major modifications to support INPUT fields and
                  wider screens.
                  a) Overlay the dyndata from the dynarea before
                     doing any scrolling and before handling the END
                     condition.
                  b) Widths use ZSCREENW.
                  c) Only non-blank input fields are shown after END.
               2) Removed the errant 'CONTROL DISPLAY SAVE' that broke
                  the underlying panel in progress. It was not needed
                  so deleting it was a better option than adding lots
                  of code to ensure a 'CONTROL DISPLAY RESTORE' was
                  done.
               3) Changed some clunky variable names.
               4) Fixed some comments.
               5) Added my own TOP/BOTTOM of dynamic lines markers.
               6) Added lots of mising RC validation logic.
               7) Tailored default attributes to be useful:
                  a) _ Input is Low intensity and underscored so that
                     the end-user has a visual on how long the field
                     is.
                  b) + Text uses Skip(On) to jump to the next field.
----- -------- --------------------------------------------------------
01.00 20110504 prino
               http://ibmmainframes.com/about54372.html#ixzz4ojBTS0Cb
            "code comes from another forum that is currently defunct,
               so I cannot properly attribute it, sorry."
----- -------- --------------------------------------------------------

-----------------------------------------------------------------------

STANDARD GLOBAL DISCLAIMER
--------------------------
The author explicitly disavows any claim whatsoever about the
correctness or functionality of this program, and disclaims liability
for anything and everything bad that might happen in connection with,
before, during, or after using it. I have tried to make it work right,
and I am personally pretty confident that it does, but everybody makes
mistakes, so if you use it, you do so at your own risk.

=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine initializes constants and variables.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Initialization_Routine:
  return_code = 0
  load_rc = Load_Temporary_Pds()
  IF (load_rc <> 0) THEN DO
    SAY "Aborting"
    RETURN 16
  END

  red     = '01'x                            /* Assign colors to  */
  blue    = '02'x                            /*  Attribute bytes */
  green   = '03'x                            /*   found in the data */
  white   = '04'x
  fldbgn  = '05'x
  fldend  = '06'x
  maxlines = 85                              /* max number of lines */
  ADDRESS ISPEXEC "VGET (ZSCREENW)"
  dyndata = ""                               /* initialize data */
  dyndata = dyndata || LEFT(blue || ,
    CENTER(green || "Dynamic (pseudo-scrollable area follows." || ,
    blue, zscreenw, "-"), zscreenw)

  DO ax = 1 TO maxlines                       /* Create panel lines */
    fldlen = 7 + (ax // 8)
    dyndata = dyndata || LEFT(white ||,
              LEFT("This is" || red || "red" || white || ax, 20) ,
              LEFT("This is" || blue || "blue" || white , 20) ,
              LEFT("This is" || green || "green" || white , 20) ,
              "==>"fldbgn || COPIES(" ",fldlen) || fldend, zscreenw)
  END
  dyndata  = dyndata || ,
    LEFT(blue || ,
    CENTER(green || "Dynamic (pseudo-scrollable area precedes." || ,
    blue, zscreenw, "-"), zscreenw)
  dyndata  = dyndata || ,
    COPIES(" ",zscreenw) || ,
    LEFT(green || ,
    CENTER(white || "Bottom of panel." || ,
    green, zscreenw, "="), zscreenw)
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine does the processing.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Process_Routine:
  curline = 1
  display_rc = 0
  DO UNTIL (display_rc > 0)
    dynarea = SUBSTR(dyndata,1+(curline-1)*zscreenw)
    SELECT
      WHEN (curline = 1) THEN DO
        MORELESS = "More (+) Showing line 1 of" maxlines
      END
      WHEN ((curline + zscrolln) >= maxlines) THEN DO
        MORELESS = "Less (-) Showing line" (curline - 1) "of" maxlines
      END
      OTHERWISE DO
        MORELESS = "More/Less (+/-) Showing line" (curline - 1) "of" ,
          maxlines
      END
    END
    ADDRESS ISPEXEC "DISPLAY PANEL(KTPMDEEP)"
    display_rc = RC                          /* save Return code */
    dyndata = OVERLAY(dynarea,dyndata,1+(curline-1)*zscreenw)
    IF (display_rc = 8) THEN DO
      LEAVE
    END
    IF (display_rc > 8) THEN DO
      SAY "Error in displaying panel(KTPMDEEP), RC("display_rc")."
      LEAVE
    END
    ADDRESS ISPEXEC ,
      "VGET (ZVERB, ZSCROLLA, ZSCROLLN)" /* get scroll values */
    SELECT                                   /* Process scrolling */
      WHEN (zverb = "UP") THEN DO /* Scroll up  */
        IF (zscrolla = "MAX") THEN DO /* IF scroll was max  */
          curline = 1                         /*    scroll to top */
        END
        ELSE DO /* ELSE a number is known */
          curline = MAX(1, curline - zscrolln) /* (maximum is top) */
        END
      END
      WHEN (zverb = "DOWN") THEN DO /* Scroll down  */
        IF (zscrolla = "MAX") THEN DO /* IF scroll was max  */
          curline = maxlines                  /*    scroll to bottom */
        END
        ELSE DO /* Else a number is known */
          curline = MIN(maxlines, curline + zscrolln)
        END
      END
      WHEN (zverb = "LEFT") THEN DO /* Scroll left  */
        SAY "Scroll LEFT was requested."
      END
      WHEN (zverb = "RIGHT") THEN DO /* Scroll right  */
        SAY "Scroll RIGHT was requested."
      END
      OTHERWISE DO
        NOP
      END
    END
  END                                        /* End of display loop */

  IF (display_rc < 9) THEN DO
    any_input = 0
    fixed_input = 0
    dynamic_input = 0
    IF (somevar <> "") THEN DO
      any_input = 1
      fixed_input = 1
    END
    inpdata = dyndata
    fields. = ""
    fldctr = 0
    DO WHILE (POS(fldbgn,inpdata) > 0)
      fldctr = fldctr + 1
      fldstart = POS(fldbgn,inpdata) + 1
      fldlen = POS(fldend,inpdata) - fldstart
      PARSE VAR inpdata . =(fldstart) fields.fldctr +(fldlen) ,
       . +1 inpdata
      IF (fields.fldctr <> "") THEN DO
        any_input = 1
        dynamic_input = 1
      END
    END

    IF (any_input = 1) THEN DO
      SAY ""
      SAY "Process the input fields:"
      IF (fixed_input = 1) THEN DO
        SAY "Process the fixed input fields:"
        SAY "somevar =" somevar
      END
      IF (dynamic_input = 1) THEN DO
        SAY "Process the dynamic DataIn fields:"
        SAY "  You will have to keep track of how the input"
        SAY "  fields align with the variables you use."
        DO fx = 1 TO fldctr
          IF (fields.fx <> "") THEN DO
            SAY RIGHT(fx,LENGTH(fldctr),"0") fields.fx
          END
        END
      SAY ""
      END
    END
  END
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
 This routine does cleanup before exiting.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Termination_Routine:
  ADDRESS ISPEXEC "LIBDEF ISPPLIB"
  "FREE FILE("tmp_dataset")"
  RETURN return_code

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 Load_Temporary_Pds:

 This PROCEDURE allocates a PDS that can be loaded with any type
 of member you like. It currently only does a LibDef for ISPPLIB.
 So, if you want to include anything else then keep in mind, member
 names must be unique and you have to ALTLIB/LIBDEF as appropriate.
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
Load_Temporary_Pds:
  tmp_dataset = "dyn"RANDOM(99999)
  alloc = "ALLOC fi("tmp_dataset") rtdsn(sysdsname)" ,
                     "New Delete Reuse" ,
                     "SPACE(1,1) dir(1)" ,
                     "BLKSIZE(0) LRECL(80)"
  bpx_rc = BPXWDYN(alloc)
  IF (bpx_rc > 0) THEN DO
    SAY "Something very bad happened in Load_Temporary_Pds," ,
      "rc("bpx_rc")"
    RETURN bpx_rc
  END
  NEWSTACK
  member = "KTPMDEEP"
  QUEUE ")ATTR DEFAULT(%+_)"
  QUEUE "/* Defaults */"
  QUEUE "/*  %  TYPE(TEXT) INTENS(HIGH) */"
  QUEUE "/*  +  TYPE(TEXT) INTENS(LOW) SKIP(OFF) */"
  QUEUE " +  TYPE(TEXT) INTENS(LOW) SKIP(ON)"
  QUEUE "/*  _  TYPE(INPUT) INTENS(HIGH) CAPS(OFF) JUST(LEFT) */"
  QUEUE " _  TYPE(INPUT) INTENS(Low)" ,
            "CAPS(OFF) JUST(LEFT) Hilite(Uscore)"
  QUEUE " @  Area(Dynamic) Scroll(On) Extend(On)"
  QUEUE " 01 Type(Dataout) Color(Red)"
  QUEUE " 02 Type(Dataout) Color(Blue)"
  QUEUE " 03 Type(Dataout) Color(Green)"
  QUEUE " 04 Type(Dataout) Color(White)"
  QUEUE " 05 Type(Datain)  Color(Pink) Hilite(UScore)"
  QUEUE " 06 Type(Dataout) Color(Green) Skip(On)"
  QUEUE " $  Type(Text)    Color(Yellow)"
  QUEUE ")Body Expand(||) Width(&ZSCREENW)"
  QUEUE "%|-| Faux scrollable display of &maxlines dynamically" ,
    "built lines.|-|"
  QUEUE "%Command ===>_zcmd | | %Scroll ===>_ZSCR+"
  QUEUE "%"
  QUEUE "+ This is a fixed area to show something" ,
    "that does not scroll."
  QUEUE "+ This is an input field%===>_somevar +"
  QUEUE "+| |&MORELESS| |"
  QUEUE "@dynarea| |@"
  QUEUE ")Init"
  QUEUE "If (&DYNAREA = &Z)"
  QUEUE "  &dynarea = ' OOPS!'"
  QUEUE ")End"

  ktpmplib = "KTPM"RANDOM(9999)
  "ALLOC FILE("ktpmplib")" ,
    "DATASET('"sysdsname"("member")') SHR REUSE"
  alloc_rc = RC
  IF (alloc_rc <> 0) THEN DO
    SAY "ALLOC failed, rc("alloc_rc")."
    RETURN 12
  END
  ADDRESS MVS "EXECIO" QUEUED() "DISKW "ktpmplib" (FINIS)"
  execio_rc = RC
  IF (execio_rc <> 0) THEN DO
    SAY "EXECIO failed, rc("execio_rc")."
    RETURN 12
  END
  "FREE FILE("ktpmplib")"
  DELSTACK
  ADDRESS ISPEXEC "LIBDEF ISPPLIB LIBRARY ID("tmp_dataset") STACK"
  libdef_rc = RC
  IF (libdef_rc <> 0) THEN DO
    SAY "LIBDEF failed, rc("libdef_rc")."
    RETURN 12
  END
  RETURN 0

/* <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
=======================================================================
End of code.
=======================================================================
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> */
